
build/spike/rvh_test.elf:     file format elf64-littleriscv


Disassembly of section .boot:

0000000080000000 <_boot>:

.section .boot, "ax" 
.globl _boot
_boot:
    bnez a0, .
    80000000:	e101                	bnez	a0,80000000 <_boot>
    csrwi    sscratch, 0xf
    80000002:	1407d073          	csrwi	sscratch,15
    /* Initialize stack pointer */
    la sp, __stack_top
    80000006:	002ff117          	auipc	sp,0x2ff
    8000000a:	ffa10113          	addi	sp,sp,-6 # 802ff000 <__stack_top>

    /* Clear bss */ 
    la a0, __bss_start
    8000000e:	00043517          	auipc	a0,0x43
    80000012:	ff250513          	addi	a0,a0,-14 # 80043000 <__bss_start>
    la a1, __bss_end
    80000016:	0005c597          	auipc	a1,0x5c
    8000001a:	0ca58593          	addi	a1,a1,202 # 8005c0e0 <__bss_end>
    bgeu a0, a1, 2f
    8000001e:	00b57763          	bgeu	a0,a1,8000002c <_boot+0x2c>
1:
    sw zero, (a0)
    80000022:	00052023          	sw	zero,0(a0)
    addi a0, a0, 4
    80000026:	0511                	addi	a0,a0,4
    bltu a0, a1, 1b
    80000028:	feb56de3          	bltu	a0,a1,80000022 <_boot+0x22>
2:
    call _init
    8000002c:	6cc2f0ef          	jal	8002f6f8 <_init>
    call main
    80000030:	0b4300ef          	jal	800300e4 <main>
    li a0, 0
    80000034:	4501                	li	a0,0
    call exit
    80000036:	0442f0ef          	jal	8002f07a <exit>
    j .
    8000003a:	a001                	j	8000003a <_boot+0x3a>

Disassembly of section .text:

000000008000003c <check_csr_field_spec>:
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <rvh_test.h>

bool check_csr_field_spec(){
    8000003c:	7179                	addi	sp,sp,-48

    TEST_START();
    8000003e:	00030597          	auipc	a1,0x30
    80000042:	13a58593          	addi	a1,a1,314 # 80030178 <__func__.1>
    80000046:	00032517          	auipc	a0,0x32
    8000004a:	68250513          	addi	a0,a0,1666 # 800326c8 <__func__.0+0x2e0>
bool check_csr_field_spec(){
    8000004e:	f406                	sd	ra,40(sp)
    80000050:	f022                	sd	s0,32(sp)
    80000052:	ec26                	sd	s1,24(sp)
    80000054:	e84a                	sd	s2,16(sp)
    80000056:	e44e                	sd	s3,8(sp)
    80000058:	e052                	sd	s4,0(sp)
    TEST_START();
    8000005a:	46a2f0ef          	jal	8002f4c4 <printf>
    8000005e:	4529                	li	a0,10
    80000060:	1522e0ef          	jal	8002e1b2 <putchar>

    /* this assumes machine mode */
    //check_csr_wrrd("mstatus", mstatus, (uint64_t) -1, 0x800000ca007e79aaULL);
    //check_csr_wrrd("mideleg", mideleg, (uint64_t) -1, 0x1666);
    //check_csr_wrrd("medeleg", medeleg, (uint64_t) -1, 0xb15d);
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    80000064:	30302973          	csrr	s2,mideleg
    80000068:	30305073          	csrwi	mideleg,0
    8000006c:	30302473          	csrr	s0,mideleg
    80000070:	00032617          	auipc	a2,0x32
    80000074:	66860613          	addi	a2,a2,1640 # 800326d8 <__func__.0+0x2f0>
    80000078:	08c00593          	li	a1,140
    8000007c:	00032517          	auipc	a0,0x32
    80000080:	66450513          	addi	a0,a0,1636 # 800326e0 <__func__.0+0x2f8>
    80000084:	44400493          	li	s1,1092
    80000088:	43c2f0ef          	jal	8002f4c4 <printf>
    8000008c:	46940163          	beq	s0,s1,800004ee <check_csr_field_spec+0x4b2>
    80000090:	00032597          	auipc	a1,0x32
    80000094:	62858593          	addi	a1,a1,1576 # 800326b8 <__func__.0+0x2d0>
    80000098:	00032517          	auipc	a0,0x32
    8000009c:	66050513          	addi	a0,a0,1632 # 800326f8 <__func__.0+0x310>
    800000a0:	4242f0ef          	jal	8002f4c4 <printf>
    800000a4:	00032517          	auipc	a0,0x32
    800000a8:	65c50513          	addi	a0,a0,1628 # 80032700 <__func__.0+0x318>
    800000ac:	4182f0ef          	jal	8002f4c4 <printf>
    800000b0:	8622                	mv	a2,s0
    800000b2:	86a6                	mv	a3,s1
    800000b4:	4581                	li	a1,0
    800000b6:	00032517          	auipc	a0,0x32
    800000ba:	65250513          	addi	a0,a0,1618 # 80032708 <__func__.0+0x320>
    800000be:	4062f0ef          	jal	8002f4c4 <printf>
    800000c2:	02900513          	li	a0,41
    800000c6:	0ec2e0ef          	jal	8002e1b2 <putchar>
    800000ca:	4529                	li	a0,10
    800000cc:	0e62e0ef          	jal	8002e1b2 <putchar>
    800000d0:	4401                	li	s0,0
    800000d2:	30391073          	csrw	mideleg,s2
    //check_csr_wrrd("mip", mip, (uint64_t) -1, 0x6e6);
    //check_csr_wrrd("mie", mie, (uint64_t) -1, 0x1eee);
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    800000d6:	34a029f3          	csrr	s3,0x34a
    800000da:	54fd                	li	s1,-1
    800000dc:	34a49073          	csrw	0x34a,s1
    800000e0:	34a02973          	csrr	s2,0x34a
    800000e4:	00032617          	auipc	a2,0x32
    800000e8:	63c60613          	addi	a2,a2,1596 # 80032720 <__func__.0+0x338>
    800000ec:	08c00593          	li	a1,140
    800000f0:	00032517          	auipc	a0,0x32
    800000f4:	5f050513          	addi	a0,a0,1520 # 800326e0 <__func__.0+0x2f8>
    800000f8:	3cc2f0ef          	jal	8002f4c4 <printf>
    800000fc:	30990f63          	beq	s2,s1,8000041a <check_csr_field_spec+0x3de>
    80000100:	00032597          	auipc	a1,0x32
    80000104:	5b858593          	addi	a1,a1,1464 # 800326b8 <__func__.0+0x2d0>
    80000108:	00032517          	auipc	a0,0x32
    8000010c:	5f050513          	addi	a0,a0,1520 # 800326f8 <__func__.0+0x310>
    80000110:	3b42f0ef          	jal	8002f4c4 <printf>
    80000114:	00032517          	auipc	a0,0x32
    80000118:	5ec50513          	addi	a0,a0,1516 # 80032700 <__func__.0+0x318>
    8000011c:	3a82f0ef          	jal	8002f4c4 <printf>
    80000120:	86a6                	mv	a3,s1
    80000122:	864a                	mv	a2,s2
    80000124:	85a6                	mv	a1,s1
    80000126:	00032517          	auipc	a0,0x32
    8000012a:	5e250513          	addi	a0,a0,1506 # 80032708 <__func__.0+0x320>
    8000012e:	3962f0ef          	jal	8002f4c4 <printf>
    80000132:	02900513          	li	a0,41
    80000136:	07c2e0ef          	jal	8002e1b2 <putchar>
    8000013a:	4529                	li	a0,10
    8000013c:	0762e0ef          	jal	8002e1b2 <putchar>
    80000140:	4401                	li	s0,0
    80000142:	34a99073          	csrw	0x34a,s3
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    80000146:	34b029f3          	csrr	s3,0x34b
    8000014a:	54fd                	li	s1,-1
    8000014c:	34b49073          	csrw	0x34b,s1
    80000150:	34b02973          	csrr	s2,0x34b
    80000154:	00032617          	auipc	a2,0x32
    80000158:	5d460613          	addi	a2,a2,1492 # 80032728 <__func__.0+0x340>
    8000015c:	08c00593          	li	a1,140
    80000160:	00032517          	auipc	a0,0x32
    80000164:	58050513          	addi	a0,a0,1408 # 800326e0 <__func__.0+0x2f8>
    80000168:	35c2f0ef          	jal	8002f4c4 <printf>
    8000016c:	36990363          	beq	s2,s1,800004d2 <check_csr_field_spec+0x496>
    80000170:	00032597          	auipc	a1,0x32
    80000174:	54858593          	addi	a1,a1,1352 # 800326b8 <__func__.0+0x2d0>
    80000178:	00032517          	auipc	a0,0x32
    8000017c:	58050513          	addi	a0,a0,1408 # 800326f8 <__func__.0+0x310>
    80000180:	3442f0ef          	jal	8002f4c4 <printf>
    80000184:	00032517          	auipc	a0,0x32
    80000188:	57c50513          	addi	a0,a0,1404 # 80032700 <__func__.0+0x318>
    8000018c:	3382f0ef          	jal	8002f4c4 <printf>
    80000190:	86a6                	mv	a3,s1
    80000192:	864a                	mv	a2,s2
    80000194:	85a6                	mv	a1,s1
    80000196:	00032517          	auipc	a0,0x32
    8000019a:	57250513          	addi	a0,a0,1394 # 80032708 <__func__.0+0x320>
    8000019e:	3262f0ef          	jal	8002f4c4 <printf>
    800001a2:	02900513          	li	a0,41
    800001a6:	00c2e0ef          	jal	8002e1b2 <putchar>
    800001aa:	4529                	li	a0,10
    800001ac:	0062e0ef          	jal	8002e1b2 <putchar>
    800001b0:	4401                	li	s0,0
    800001b2:	34b99073          	csrw	0x34b,s3
    //check_csr_wrrd("hstatus", CSR_HSTATUS, (uint64_t) -1, 0x30053f3e0);
    //check_csr_wrrd("hideleg", CSR_HIDELEG, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hedeleg", CSR_HEDELEG, (uint64_t) -1, 0xb1ff);
    //check_csr_wrrd("hvip", CSR_HVIP, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hip", CSR_HIP, (uint64_t) -1, 0x4);
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800001b6:	60402a73          	csrr	s4,hie
    800001ba:	54fd                	li	s1,-1
    800001bc:	60449073          	csrw	hie,s1
    800001c0:	60402973          	csrr	s2,hie
    800001c4:	00032617          	auipc	a2,0x32
    800001c8:	56c60613          	addi	a2,a2,1388 # 80032730 <__func__.0+0x348>
    800001cc:	08c00593          	li	a1,140
    800001d0:	00032517          	auipc	a0,0x32
    800001d4:	51050513          	addi	a0,a0,1296 # 800326e0 <__func__.0+0x2f8>
    800001d8:	44400993          	li	s3,1092
    800001dc:	2e82f0ef          	jal	8002f4c4 <printf>
    800001e0:	2d390b63          	beq	s2,s3,800004b6 <check_csr_field_spec+0x47a>
    800001e4:	00032597          	auipc	a1,0x32
    800001e8:	4d458593          	addi	a1,a1,1236 # 800326b8 <__func__.0+0x2d0>
    800001ec:	00032517          	auipc	a0,0x32
    800001f0:	50c50513          	addi	a0,a0,1292 # 800326f8 <__func__.0+0x310>
    800001f4:	2d02f0ef          	jal	8002f4c4 <printf>
    800001f8:	00032517          	auipc	a0,0x32
    800001fc:	50850513          	addi	a0,a0,1288 # 80032700 <__func__.0+0x318>
    80000200:	2c42f0ef          	jal	8002f4c4 <printf>
    80000204:	86ce                	mv	a3,s3
    80000206:	864a                	mv	a2,s2
    80000208:	85a6                	mv	a1,s1
    8000020a:	00032517          	auipc	a0,0x32
    8000020e:	4fe50513          	addi	a0,a0,1278 # 80032708 <__func__.0+0x320>
    80000212:	2b22f0ef          	jal	8002f4c4 <printf>
    80000216:	02900513          	li	a0,41
    8000021a:	7992d0ef          	jal	8002e1b2 <putchar>
    8000021e:	4529                	li	a0,10
    80000220:	7932d0ef          	jal	8002e1b2 <putchar>
    80000224:	4401                	li	s0,0
    80000226:	604a1073          	csrw	hie,s4
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000022a:	643029f3          	csrr	s3,htval
    8000022e:	54fd                	li	s1,-1
    80000230:	64349073          	csrw	htval,s1
    80000234:	64302973          	csrr	s2,htval
    80000238:	00032617          	auipc	a2,0x32
    8000023c:	50060613          	addi	a2,a2,1280 # 80032738 <__func__.0+0x350>
    80000240:	08c00593          	li	a1,140
    80000244:	00032517          	auipc	a0,0x32
    80000248:	49c50513          	addi	a0,a0,1180 # 800326e0 <__func__.0+0x2f8>
    8000024c:	2782f0ef          	jal	8002f4c4 <printf>
    80000250:	24990563          	beq	s2,s1,8000049a <check_csr_field_spec+0x45e>
    80000254:	00032597          	auipc	a1,0x32
    80000258:	46458593          	addi	a1,a1,1124 # 800326b8 <__func__.0+0x2d0>
    8000025c:	00032517          	auipc	a0,0x32
    80000260:	49c50513          	addi	a0,a0,1180 # 800326f8 <__func__.0+0x310>
    80000264:	2602f0ef          	jal	8002f4c4 <printf>
    80000268:	00032517          	auipc	a0,0x32
    8000026c:	49850513          	addi	a0,a0,1176 # 80032700 <__func__.0+0x318>
    80000270:	2542f0ef          	jal	8002f4c4 <printf>
    80000274:	86a6                	mv	a3,s1
    80000276:	864a                	mv	a2,s2
    80000278:	85a6                	mv	a1,s1
    8000027a:	00032517          	auipc	a0,0x32
    8000027e:	48e50513          	addi	a0,a0,1166 # 80032708 <__func__.0+0x320>
    80000282:	2422f0ef          	jal	8002f4c4 <printf>
    80000286:	02900513          	li	a0,41
    8000028a:	7292d0ef          	jal	8002e1b2 <putchar>
    8000028e:	4529                	li	a0,10
    80000290:	7232d0ef          	jal	8002e1b2 <putchar>
    80000294:	4401                	li	s0,0
    80000296:	64399073          	csrw	htval,s3
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000029a:	64a029f3          	csrr	s3,htinst
    8000029e:	54fd                	li	s1,-1
    800002a0:	64a49073          	csrw	htinst,s1
    800002a4:	64a02973          	csrr	s2,htinst
    800002a8:	00032617          	auipc	a2,0x32
    800002ac:	49860613          	addi	a2,a2,1176 # 80032740 <__func__.0+0x358>
    800002b0:	08c00593          	li	a1,140
    800002b4:	00032517          	auipc	a0,0x32
    800002b8:	42c50513          	addi	a0,a0,1068 # 800326e0 <__func__.0+0x2f8>
    800002bc:	2082f0ef          	jal	8002f4c4 <printf>
    800002c0:	1a990f63          	beq	s2,s1,8000047e <check_csr_field_spec+0x442>
    800002c4:	00032597          	auipc	a1,0x32
    800002c8:	3f458593          	addi	a1,a1,1012 # 800326b8 <__func__.0+0x2d0>
    800002cc:	00032517          	auipc	a0,0x32
    800002d0:	42c50513          	addi	a0,a0,1068 # 800326f8 <__func__.0+0x310>
    800002d4:	1f02f0ef          	jal	8002f4c4 <printf>
    800002d8:	00032517          	auipc	a0,0x32
    800002dc:	42850513          	addi	a0,a0,1064 # 80032700 <__func__.0+0x318>
    800002e0:	1e42f0ef          	jal	8002f4c4 <printf>
    800002e4:	86a6                	mv	a3,s1
    800002e6:	864a                	mv	a2,s2
    800002e8:	85a6                	mv	a1,s1
    800002ea:	00032517          	auipc	a0,0x32
    800002ee:	41e50513          	addi	a0,a0,1054 # 80032708 <__func__.0+0x320>
    800002f2:	1d22f0ef          	jal	8002f4c4 <printf>
    800002f6:	02900513          	li	a0,41
    800002fa:	6b92d0ef          	jal	8002e1b2 <putchar>
    800002fe:	4529                	li	a0,10
    80000300:	6b32d0ef          	jal	8002e1b2 <putchar>
    80000304:	4401                	li	s0,0
    80000306:	64a99073          	csrw	htinst,s3
    //check_csr_wrrd("hgatp", CSR_HGATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);
    //check_csr_wrrd("vsstatus", CSR_VSSTATUS, (uint64_t) -1, 0x80000000000c6122ULL);
    //check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vstvec", CSR_VSTVEC, (uint64_t) -1, 0xffffffffffffff01ULL);
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    8000030a:	240029f3          	csrr	s3,vsscratch
    8000030e:	54fd                	li	s1,-1
    80000310:	24049073          	csrw	vsscratch,s1
    80000314:	24002973          	csrr	s2,vsscratch
    80000318:	00032617          	auipc	a2,0x32
    8000031c:	43060613          	addi	a2,a2,1072 # 80032748 <__func__.0+0x360>
    80000320:	08c00593          	li	a1,140
    80000324:	00032517          	auipc	a0,0x32
    80000328:	3bc50513          	addi	a0,a0,956 # 800326e0 <__func__.0+0x2f8>
    8000032c:	1982f0ef          	jal	8002f4c4 <printf>
    80000330:	12990963          	beq	s2,s1,80000462 <check_csr_field_spec+0x426>
    80000334:	00032597          	auipc	a1,0x32
    80000338:	38458593          	addi	a1,a1,900 # 800326b8 <__func__.0+0x2d0>
    8000033c:	00032517          	auipc	a0,0x32
    80000340:	3bc50513          	addi	a0,a0,956 # 800326f8 <__func__.0+0x310>
    80000344:	1802f0ef          	jal	8002f4c4 <printf>
    80000348:	00032517          	auipc	a0,0x32
    8000034c:	3b850513          	addi	a0,a0,952 # 80032700 <__func__.0+0x318>
    80000350:	1742f0ef          	jal	8002f4c4 <printf>
    80000354:	86a6                	mv	a3,s1
    80000356:	864a                	mv	a2,s2
    80000358:	85a6                	mv	a1,s1
    8000035a:	00032517          	auipc	a0,0x32
    8000035e:	3ae50513          	addi	a0,a0,942 # 80032708 <__func__.0+0x320>
    80000362:	1622f0ef          	jal	8002f4c4 <printf>
    80000366:	02900513          	li	a0,41
    8000036a:	6492d0ef          	jal	8002e1b2 <putchar>
    8000036e:	4529                	li	a0,10
    80000370:	6432d0ef          	jal	8002e1b2 <putchar>
    80000374:	4401                	li	s0,0
    80000376:	24099073          	csrw	vsscratch,s3
    //check_csr_wrrd("vsepc", CSR_VSEPC, (uint64_t) -1, 0xfffffffffffffffeULL);
    //check_csr_wrrd("vscause", CSR_VSCAUSE, (uint64_t) -1, 0x800000000000001fULL);
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    8000037a:	243029f3          	csrr	s3,vstval
    8000037e:	54fd                	li	s1,-1
    80000380:	24349073          	csrw	vstval,s1
    80000384:	24302973          	csrr	s2,vstval
    80000388:	00032617          	auipc	a2,0x32
    8000038c:	3d060613          	addi	a2,a2,976 # 80032758 <__func__.0+0x370>
    80000390:	08c00593          	li	a1,140
    80000394:	00032517          	auipc	a0,0x32
    80000398:	34c50513          	addi	a0,a0,844 # 800326e0 <__func__.0+0x2f8>
    8000039c:	1282f0ef          	jal	8002f4c4 <printf>
    800003a0:	08990b63          	beq	s2,s1,80000436 <check_csr_field_spec+0x3fa>
    800003a4:	00032597          	auipc	a1,0x32
    800003a8:	31458593          	addi	a1,a1,788 # 800326b8 <__func__.0+0x2d0>
    800003ac:	00032517          	auipc	a0,0x32
    800003b0:	34c50513          	addi	a0,a0,844 # 800326f8 <__func__.0+0x310>
    800003b4:	1102f0ef          	jal	8002f4c4 <printf>
    800003b8:	00032517          	auipc	a0,0x32
    800003bc:	34850513          	addi	a0,a0,840 # 80032700 <__func__.0+0x318>
    800003c0:	1042f0ef          	jal	8002f4c4 <printf>
    800003c4:	86a6                	mv	a3,s1
    800003c6:	864a                	mv	a2,s2
    800003c8:	85a6                	mv	a1,s1
    800003ca:	00032517          	auipc	a0,0x32
    800003ce:	33e50513          	addi	a0,a0,830 # 80032708 <__func__.0+0x320>
    800003d2:	0f22f0ef          	jal	8002f4c4 <printf>
    800003d6:	02900513          	li	a0,41
    800003da:	5d92d0ef          	jal	8002e1b2 <putchar>
    800003de:	4529                	li	a0,10
    800003e0:	5d32d0ef          	jal	8002e1b2 <putchar>
    800003e4:	24399073          	csrw	vstval,s3
    800003e8:	4401                	li	s0,0
    //check_csr_wrrd("vsatp", CSR_VSATP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsatp", CSR_VSATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);

    TEST_END();
    800003ea:	00032597          	auipc	a1,0x32
    800003ee:	2ce58593          	addi	a1,a1,718 # 800326b8 <__func__.0+0x2d0>
    800003f2:	00032517          	auipc	a0,0x32
    800003f6:	36e50513          	addi	a0,a0,878 # 80032760 <__func__.0+0x378>
    800003fa:	0ca2f0ef          	jal	8002f4c4 <printf>
    800003fe:	4511                	li	a0,4
    80000400:	315000ef          	jal	80000f14 <goto_priv>
    80000404:	372010ef          	jal	80001776 <reset_state>
}
    80000408:	70a2                	ld	ra,40(sp)
    8000040a:	8522                	mv	a0,s0
    8000040c:	7402                	ld	s0,32(sp)
    8000040e:	64e2                	ld	s1,24(sp)
    80000410:	6942                	ld	s2,16(sp)
    80000412:	69a2                	ld	s3,8(sp)
    80000414:	6a02                	ld	s4,0(sp)
    80000416:	6145                	addi	sp,sp,48
    80000418:	8082                	ret
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    8000041a:	00032597          	auipc	a1,0x32
    8000041e:	28e58593          	addi	a1,a1,654 # 800326a8 <__func__.0+0x2c0>
    80000422:	00032517          	auipc	a0,0x32
    80000426:	2d650513          	addi	a0,a0,726 # 800326f8 <__func__.0+0x310>
    8000042a:	09a2f0ef          	jal	8002f4c4 <printf>
    8000042e:	4529                	li	a0,10
    80000430:	5832d0ef          	jal	8002e1b2 <putchar>
    80000434:	b339                	j	80000142 <check_csr_field_spec+0x106>
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    80000436:	00032597          	auipc	a1,0x32
    8000043a:	27258593          	addi	a1,a1,626 # 800326a8 <__func__.0+0x2c0>
    8000043e:	00032517          	auipc	a0,0x32
    80000442:	2ba50513          	addi	a0,a0,698 # 800326f8 <__func__.0+0x310>
    80000446:	07e2f0ef          	jal	8002f4c4 <printf>
    8000044a:	4529                	li	a0,10
    8000044c:	5672d0ef          	jal	8002e1b2 <putchar>
    80000450:	d851                	beqz	s0,800003e4 <check_csr_field_spec+0x3a8>
    80000452:	24399073          	csrw	vstval,s3
    80000456:	4405                	li	s0,1
    TEST_END();
    80000458:	00032597          	auipc	a1,0x32
    8000045c:	25058593          	addi	a1,a1,592 # 800326a8 <__func__.0+0x2c0>
    80000460:	bf49                	j	800003f2 <check_csr_field_spec+0x3b6>
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    80000462:	00032597          	auipc	a1,0x32
    80000466:	24658593          	addi	a1,a1,582 # 800326a8 <__func__.0+0x2c0>
    8000046a:	00032517          	auipc	a0,0x32
    8000046e:	28e50513          	addi	a0,a0,654 # 800326f8 <__func__.0+0x310>
    80000472:	0522f0ef          	jal	8002f4c4 <printf>
    80000476:	4529                	li	a0,10
    80000478:	53b2d0ef          	jal	8002e1b2 <putchar>
    8000047c:	bded                	j	80000376 <check_csr_field_spec+0x33a>
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000047e:	00032597          	auipc	a1,0x32
    80000482:	22a58593          	addi	a1,a1,554 # 800326a8 <__func__.0+0x2c0>
    80000486:	00032517          	auipc	a0,0x32
    8000048a:	27250513          	addi	a0,a0,626 # 800326f8 <__func__.0+0x310>
    8000048e:	0362f0ef          	jal	8002f4c4 <printf>
    80000492:	4529                	li	a0,10
    80000494:	51f2d0ef          	jal	8002e1b2 <putchar>
    80000498:	b5bd                	j	80000306 <check_csr_field_spec+0x2ca>
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000049a:	00032597          	auipc	a1,0x32
    8000049e:	20e58593          	addi	a1,a1,526 # 800326a8 <__func__.0+0x2c0>
    800004a2:	00032517          	auipc	a0,0x32
    800004a6:	25650513          	addi	a0,a0,598 # 800326f8 <__func__.0+0x310>
    800004aa:	01a2f0ef          	jal	8002f4c4 <printf>
    800004ae:	4529                	li	a0,10
    800004b0:	5032d0ef          	jal	8002e1b2 <putchar>
    800004b4:	b3cd                	j	80000296 <check_csr_field_spec+0x25a>
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800004b6:	00032597          	auipc	a1,0x32
    800004ba:	1f258593          	addi	a1,a1,498 # 800326a8 <__func__.0+0x2c0>
    800004be:	00032517          	auipc	a0,0x32
    800004c2:	23a50513          	addi	a0,a0,570 # 800326f8 <__func__.0+0x310>
    800004c6:	7ff2e0ef          	jal	8002f4c4 <printf>
    800004ca:	4529                	li	a0,10
    800004cc:	4e72d0ef          	jal	8002e1b2 <putchar>
    800004d0:	bb99                	j	80000226 <check_csr_field_spec+0x1ea>
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    800004d2:	00032597          	auipc	a1,0x32
    800004d6:	1d658593          	addi	a1,a1,470 # 800326a8 <__func__.0+0x2c0>
    800004da:	00032517          	auipc	a0,0x32
    800004de:	21e50513          	addi	a0,a0,542 # 800326f8 <__func__.0+0x310>
    800004e2:	7e32e0ef          	jal	8002f4c4 <printf>
    800004e6:	4529                	li	a0,10
    800004e8:	4cb2d0ef          	jal	8002e1b2 <putchar>
    800004ec:	b1d9                	j	800001b2 <check_csr_field_spec+0x176>
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    800004ee:	00032597          	auipc	a1,0x32
    800004f2:	1ba58593          	addi	a1,a1,442 # 800326a8 <__func__.0+0x2c0>
    800004f6:	00032517          	auipc	a0,0x32
    800004fa:	20250513          	addi	a0,a0,514 # 800326f8 <__func__.0+0x310>
    800004fe:	7c72e0ef          	jal	8002f4c4 <printf>
    80000502:	4529                	li	a0,10
    80000504:	4af2d0ef          	jal	8002e1b2 <putchar>
    80000508:	4405                	li	s0,1
    8000050a:	b6e1                	j	800000d2 <check_csr_field_spec+0x96>

000000008000050c <check_misa_h>:

bool check_misa_h(){
    8000050c:	1141                	addi	sp,sp,-16

    TEST_START();
    8000050e:	00030597          	auipc	a1,0x30
    80000512:	c8258593          	addi	a1,a1,-894 # 80030190 <__func__.0>
    80000516:	00032517          	auipc	a0,0x32
    8000051a:	1b250513          	addi	a0,a0,434 # 800326c8 <__func__.0+0x2e0>
bool check_misa_h(){
    8000051e:	e406                	sd	ra,8(sp)
    80000520:	e022                	sd	s0,0(sp)
    TEST_START();
    80000522:	7a32e0ef          	jal	8002f4c4 <printf>
    80000526:	4529                	li	a0,10
    80000528:	48b2d0ef          	jal	8002e1b2 <putchar>

    uint64_t misa = CSRR(misa);
    8000052c:	301027f3          	csrr	a5,misa
    CSRS(misa, (1ULL << 7));
    80000530:	08000793          	li	a5,128
    80000534:	3017a073          	csrs	misa,a5

    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000538:	30102473          	csrr	s0,misa
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000053c:	00032617          	auipc	a2,0x32
    80000540:	22c60613          	addi	a2,a2,556 # 80032768 <__func__.0+0x380>
    80000544:	08c00593          	li	a1,140
    80000548:	00032517          	auipc	a0,0x32
    8000054c:	19850513          	addi	a0,a0,408 # 800326e0 <__func__.0+0x2f8>
    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000550:	08047413          	andi	s0,s0,128
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    80000554:	7712e0ef          	jal	8002f4c4 <printf>
    80000558:	c031                	beqz	s0,8000059c <check_misa_h+0x90>
    8000055a:	00032597          	auipc	a1,0x32
    8000055e:	14e58593          	addi	a1,a1,334 # 800326a8 <__func__.0+0x2c0>
    80000562:	00032517          	auipc	a0,0x32
    80000566:	19650513          	addi	a0,a0,406 # 800326f8 <__func__.0+0x310>
    8000056a:	75b2e0ef          	jal	8002f4c4 <printf>
    8000056e:	4529                	li	a0,10
    80000570:	4432d0ef          	jal	8002e1b2 <putchar>
    //     VERBOSE("misa h bit is hardwired");
    // }

    // CSRW(misa, misa);

    TEST_END();
    80000574:	00032597          	auipc	a1,0x32
    80000578:	13458593          	addi	a1,a1,308 # 800326a8 <__func__.0+0x2c0>
    8000057c:	00032517          	auipc	a0,0x32
    80000580:	1e450513          	addi	a0,a0,484 # 80032760 <__func__.0+0x378>
    80000584:	7412e0ef          	jal	8002f4c4 <printf>
    80000588:	4511                	li	a0,4
    8000058a:	18b000ef          	jal	80000f14 <goto_priv>
    8000058e:	1e8010ef          	jal	80001776 <reset_state>
}
    80000592:	60a2                	ld	ra,8(sp)
    80000594:	6402                	ld	s0,0(sp)
    TEST_END();
    80000596:	4505                	li	a0,1
}
    80000598:	0141                	addi	sp,sp,16
    8000059a:	8082                	ret
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000059c:	00032597          	auipc	a1,0x32
    800005a0:	11c58593          	addi	a1,a1,284 # 800326b8 <__func__.0+0x2d0>
    800005a4:	00032517          	auipc	a0,0x32
    800005a8:	15450513          	addi	a0,a0,340 # 800326f8 <__func__.0+0x310>
    800005ac:	7192e0ef          	jal	8002f4c4 <printf>
    800005b0:	00032517          	auipc	a0,0x32
    800005b4:	15050513          	addi	a0,a0,336 # 80032700 <__func__.0+0x318>
    800005b8:	70d2e0ef          	jal	8002f4c4 <printf>
    800005bc:	00032517          	auipc	a0,0x32
    800005c0:	1cc50513          	addi	a0,a0,460 # 80032788 <__func__.0+0x3a0>
    800005c4:	7012e0ef          	jal	8002f4c4 <printf>
    800005c8:	02900513          	li	a0,41
    800005cc:	3e72d0ef          	jal	8002e1b2 <putchar>
    800005d0:	4529                	li	a0,10
    800005d2:	3e12d0ef          	jal	8002e1b2 <putchar>
}
    800005d6:	60a2                	ld	ra,8(sp)
    800005d8:	6402                	ld	s0,0(sp)
        return false;
    800005da:	4501                	li	a0,0
}
    800005dc:	0141                	addi	sp,sp,16
    800005de:	8082                	ret

00000000800005e0 <print_page_table_type>:

void print_page_table_type() {
    #if defined(sv39)
        printf("sv39\n");
    #elif defined(sv48)
        printf("sv48\n");
    800005e0:	00032517          	auipc	a0,0x32
    800005e4:	22850513          	addi	a0,a0,552 # 80032808 <__func__.0+0x420>
    800005e8:	3192e06f          	j	8002f100 <puts>

00000000800005ec <hspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    }

    hspt[1][4] = 
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005ec:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    800005f0:	00059797          	auipc	a5,0x59
    800005f4:	a1078793          	addi	a5,a5,-1520 # 80059000 <hspt+0x2000>
    800005f8:	5e07c157          	vmv.v.x	v2,a5
    800005fc:	0005a517          	auipc	a0,0x5a
    80000600:	a0450513          	addi	a0,a0,-1532 # 8005a000 <hspt+0x3000>
        hspt[1][i] = 
    80000604:	5208a0d7          	vid.v	v1
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    80000608:	3e256157          	vslide1down.vx	v2,v2,a0
        PTE_V | (((uintptr_t)&hspt[3][0]) >> 2);
    hspt[2][0] = 
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);

    for(int i = 0; i < 4; i++){
        hspt[3][i] = 
    8000060c:	9619b1d7          	vsll.vi	v3,v1,19
        hspt[1][i] = 
    80000610:	961e30d7          	vsll.vi	v1,v1,28
    80000614:	0cf00593          	li	a1,207
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    80000618:	a2213157          	vsrl.vi	v2,v2,2
        hspt[1][i] = 
    8000061c:	200007b7          	lui	a5,0x20000
        hspt[3][i] = 
    80000620:	0d8076d7          	vsetvli	a3,zero,e64,m1,ta,ma
        hspt[1][i] = 
    80000624:	97ae                	add	a5,a5,a1
        hspt[3][i] = 
    80000626:	5208a257          	vid.v	v4
    8000062a:	40000637          	lui	a2,0x40000
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000062e:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
        hspt[3][i] = 
    80000632:	40100737          	lui	a4,0x40100
        hspt[1][i] = 
    80000636:	0215c2d7          	vadd.vx	v5,v1,a1
        hspt[3][i] = 
    8000063a:	0cf70713          	addi	a4,a4,207 # 401000cf <STACK_SIZE+0x400000cf>
        hspt[1][i] = 
    8000063e:	0217c0d7          	vadd.vx	v1,v1,a5
        hspt[3][i] = 
    80000642:	0cf60613          	addi	a2,a2,207 # 400000cf <STACK_SIZE+0x3ff000cf>
    80000646:	02364357          	vadd.vx	v6,v3,a2
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000064a:	2a20b157          	vor.vi	v2,v2,1
        hspt[3][i] = 
    8000064e:	023741d7          	vadd.vx	v3,v3,a4
    80000652:	0d8076d7          	vsetvli	a3,zero,e64,m1,ta,ma
    80000656:	96463257          	vsll.vi	v4,v4,12
        hspt[1][i] = 
    8000065a:	00058897          	auipc	a7,0x58
    8000065e:	9b688893          	addi	a7,a7,-1610 # 80058010 <hspt+0x1010>
    hspt[1][4] = 
    80000662:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
        hspt[1][i] = 
    80000666:	0208f0a7          	vse64.v	v1,(a7)
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    8000066a:	00058797          	auipc	a5,0x58
    8000066e:	99678793          	addi	a5,a5,-1642 # 80058000 <hspt+0x1000>
    hspt[1][4] = 
    80000672:	00058e17          	auipc	t3,0x58
    80000676:	9aee0e13          	addi	t3,t3,-1618 # 80058020 <hspt+0x1020>
        hspt[3][i] = 
    8000067a:	0005a317          	auipc	t1,0x5a
    8000067e:	99630313          	addi	t1,t1,-1642 # 8005a010 <hspt+0x3010>
    80000682:	02057327          	vse64.v	v6,(a0)
        hspt[1][i] = 
    80000686:	0207f2a7          	vse64.v	v5,(a5)
    hspt[1][4] = 
    8000068a:	020e7127          	vse64.v	v2,(t3)
        hspt[3][i] = 
    8000068e:	020371a7          	vse64.v	v3,(t1)
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);
    80000692:	0005b717          	auipc	a4,0x5b
    80000696:	96e70713          	addi	a4,a4,-1682 # 8005b000 <hspt+0x4000>
        hspt[3][i] = 
    8000069a:	0d8076d7          	vsetvli	a3,zero,e64,m1,ta,ma
    8000069e:	0c000813          	li	a6,192
    800006a2:	45c5                	li	a1,17
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800006a4:	8389                	srli	a5,a5,0x2
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);
    800006a6:	00275693          	srli	a3,a4,0x2
    800006aa:	5e084357          	vmv.v.x	v6,a6
        hspt[3][i] = 
    800006ae:	05ee                	slli	a1,a1,0x1b
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800006b0:	0017e793          	ori	a5,a5,1
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);
    800006b4:	0016e693          	ori	a3,a3,1
    hspt[0][0] =
    800006b8:	00057897          	auipc	a7,0x57
    800006bc:	94888893          	addi	a7,a7,-1720 # 80057000 <hspt>
        hspt[3][i] = 
    800006c0:	0245c257          	vadd.vx	v4,v4,a1
    hspt[0][0] =
    800006c4:	00f8b023          	sd	a5,0(a7)
        hspt[3][i] = 
    800006c8:	0003f597          	auipc	a1,0x3f
    800006cc:	98858593          	addi	a1,a1,-1656 # 8003f050 <test_page_perm_table>
    hspt[2][0] = 
    800006d0:	00059797          	auipc	a5,0x59
    800006d4:	92d7b823          	sd	a3,-1744(a5) # 80059000 <hspt+0x2000>
        hspt[3][i] = 
    800006d8:	1ff00693          	li	a3,511
    800006dc:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
    }

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        hspt[4][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
    800006e0:	2205f107          	vlseg2e64.v	v2,(a1)
        hspt[4][i] = (addr >> 2) | PTE_AD |
    800006e4:	a24130d7          	vsrl.vi	v1,v4,2
    800006e8:	00c79513          	slli	a0,a5,0xc
    800006ec:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800006f0:	5e0542d7          	vmv.v.x	v5,a0
    800006f4:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800006f8:	00479813          	slli	a6,a5,0x4
    800006fc:	00379513          	slli	a0,a5,0x3
    80000700:	8e9d                	sub	a3,a3,a5
    80000702:	95c2                	add	a1,a1,a6
        hspt[4][i] = (addr >> 2) | PTE_AD |
    80000704:	2a610157          	vor.vv	v2,v6,v2
    80000708:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    8000070c:	02428257          	vadd.vv	v4,v4,v5
    80000710:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000714:	2a1100d7          	vor.vv	v1,v1,v2
    80000718:	020770a7          	vse64.v	v1,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000071c:	972a                	add	a4,a4,a0
    8000071e:	fedd                	bnez	a3,800006dc <hspt_init+0xf0>
        hspt[4][i] = (addr >> 2) | PTE_AD |
    80000720:	00041717          	auipc	a4,0x41
    80000724:	92073703          	ld	a4,-1760(a4) # 80041040 <test_page_perm_table+0x1ff0>
        addr += PAGE_SIZE;
    }


    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000728:	00041797          	auipc	a5,0x41
    8000072c:	92c7a783          	lw	a5,-1748(a5) # 80041054 <curr_priv>
        hspt[4][i] = (addr >> 2) | PTE_AD |
    80000730:	220806b7          	lui	a3,0x22080
    80000734:	cc068693          	addi	a3,a3,-832 # 2207fcc0 <STACK_SIZE+0x21f7fcc0>
    80000738:	8f55                	or	a4,a4,a3
    8000073a:	0005c697          	auipc	a3,0x5c
    8000073e:	8ae6bf23          	sd	a4,-1858(a3) # 8005bff8 <hspt+0x4ff8>
    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000742:	37f5                	addiw	a5,a5,-3
    80000744:	4705                	li	a4,1
    80000746:	00f76a63          	bltu	a4,a5,8000075a <hspt_init+0x16e>
        uintptr_t satp = (((uintptr_t)hspt) >> 12) | (0x9ULL << 60);
    8000074a:	5765                	li	a4,-7
    8000074c:	00c8d793          	srli	a5,a7,0xc
    80000750:	1772                	slli	a4,a4,0x3c
    80000752:	8fd9                	or	a5,a5,a4
        CSRW(satp, satp);
    80000754:	18079073          	csrw	satp,a5
    } else {
        ERROR("trying to set hs level satp from lower privilege");
    80000758:	8082                	ret
void hspt_init(){
    8000075a:	1141                	addi	sp,sp,-16
        ERROR("trying to set hs level satp from lower privilege");
    8000075c:	00032517          	auipc	a0,0x32
    80000760:	0b450513          	addi	a0,a0,180 # 80032810 <__func__.0+0x428>
void hspt_init(){
    80000764:	e406                	sd	ra,8(sp)
        ERROR("trying to set hs level satp from lower privilege");
    80000766:	55f2e0ef          	jal	8002f4c4 <printf>
    8000076a:	1c400613          	li	a2,452
    8000076e:	00030597          	auipc	a1,0x30
    80000772:	a3258593          	addi	a1,a1,-1486 # 800301a0 <__func__.2>
    80000776:	00032517          	auipc	a0,0x32
    8000077a:	0e250513          	addi	a0,a0,226 # 80032858 <__func__.0+0x470>
    8000077e:	5472e0ef          	jal	8002f4c4 <printf>
    80000782:	4501                	li	a0,0
    80000784:	0f72e0ef          	jal	8002f07a <exit>

0000000080000788 <vspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    }

    vspt[1][4] = 
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    80000788:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    8000078c:	00052797          	auipc	a5,0x52
    80000790:	87478793          	addi	a5,a5,-1932 # 80052000 <vspt+0x2000>
    80000794:	5e07c0d7          	vmv.v.x	v1,a5
void vspt_init(){
    80000798:	1101                	addi	sp,sp,-32
    8000079a:	e822                	sd	s0,16(sp)
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    8000079c:	00053417          	auipc	s0,0x53
    800007a0:	86440413          	addi	s0,s0,-1948 # 80053000 <vspt+0x3000>
    800007a4:	3e1460d7          	vslide1down.vx	v1,v1,s0
        vspt[1][i] = 
    800007a8:	5208a157          	vid.v	v2
    800007ac:	0cf00713          	li	a4,207
    800007b0:	962e3157          	vsll.vi	v2,v2,28
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    800007b4:	a21130d7          	vsrl.vi	v1,v1,2
        vspt[1][i] = 
    800007b8:	200007b7          	lui	a5,0x20000
    800007bc:	97ba                	add	a5,a5,a4
    800007be:	022741d7          	vadd.vx	v3,v2,a4
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    800007c2:	2a10b0d7          	vor.vi	v1,v1,1
        vspt[1][i] = 
    800007c6:	0227c157          	vadd.vx	v2,v2,a5
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800007ca:	00051717          	auipc	a4,0x51
    800007ce:	83670713          	addi	a4,a4,-1994 # 80051000 <vspt+0x1000>
    vspt[1][5] = 
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    vspt[1][6] = 
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    800007d2:	00054517          	auipc	a0,0x54
    800007d6:	82e50513          	addi	a0,a0,-2002 # 80054000 <vspt+0x4000>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800007da:	00275793          	srli	a5,a4,0x2
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    800007de:	00255693          	srli	a3,a0,0x2
void vspt_init(){
    800007e2:	e426                	sd	s1,8(sp)
    800007e4:	ec06                	sd	ra,24(sp)
    vspt[1][4] = 
    800007e6:	00051897          	auipc	a7,0x51
    800007ea:	83a88893          	addi	a7,a7,-1990 # 80051020 <vspt+0x1020>
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    800007ee:	0016e693          	ori	a3,a3,1
        vspt[1][i] = 
    800007f2:	00051817          	auipc	a6,0x51
    800007f6:	81e80813          	addi	a6,a6,-2018 # 80051010 <vspt+0x1010>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800007fa:	0017e793          	ori	a5,a5,1
    vspt[0][0] = 
    800007fe:	00050497          	auipc	s1,0x50
    80000802:	80248493          	addi	s1,s1,-2046 # 80050000 <vspt>
    
    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) vspt[4][i] = 0;
    80000806:	6605                	lui	a2,0x1
    80000808:	4581                	li	a1,0
        vspt[1][i] = 
    8000080a:	020771a7          	vse64.v	v3,(a4)
    8000080e:	02087127          	vse64.v	v2,(a6)
    vspt[1][6] = 
    80000812:	fb14                	sd	a3,48(a4)
    vspt[1][4] = 
    80000814:	0208f0a7          	vse64.v	v1,(a7)
    vspt[0][0] = 
    80000818:	e09c                	sd	a5,0(s1)
    for(int i = 0; i < 512; i++) vspt[4][i] = 0;
    8000081a:	5af2e0ef          	jal	8002f5c8 <memset>
    8000081e:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000822:	5208a157          	vid.v	v2
    80000826:	4705                	li	a4,1
    80000828:	962ab157          	vsll.vi	v2,v2,21
    8000082c:	1702                	slli	a4,a4,0x20
    8000082e:	0cf00693          	li	a3,207
    80000832:	02274157          	vadd.vx	v2,v2,a4
    80000836:	5e06c2d7          	vmv.v.x	v5,a3
    8000083a:	8722                	mv	a4,s0
    8000083c:	20000693          	li	a3,512
    80000840:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        addr +=  SUPERPAGE_SIZE(2);
    }

    addr = 4 * SUPERPAGE_SIZE(1);                                        
    for(int i = 0; i < 512; i++){
        vspt[3][i] = (addr >> 2) |
    80000844:	a22130d7          	vsrl.vi	v1,v2,2
    80000848:	01579613          	slli	a2,a5,0x15
    8000084c:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000850:	5e0641d7          	vmv.v.x	v3,a2
             PTE_V | PTE_AD | PTE_RWX;  
    80000854:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000858:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    8000085c:	00379613          	slli	a2,a5,0x3
    80000860:	8e9d                	sub	a3,a3,a5
        vspt[3][i] = (addr >> 2) |
    80000862:	020770a7          	vse64.v	v1,(a4)
    80000866:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    8000086a:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    8000086e:	9732                	add	a4,a4,a2
    80000870:	fae1                	bnez	a3,80000840 <vspt_init+0xb8>
        addr +=  SUPERPAGE_SIZE(2);
    }  

    vspt[2][0] = 
    80000872:	5208a257          	vid.v	v4
    80000876:	4605                	li	a2,1
    80000878:	96463257          	vsll.vi	v4,v4,12
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    8000087c:	00054717          	auipc	a4,0x54
    80000880:	78470713          	addi	a4,a4,1924 # 80055000 <vspt+0x5000>
    vspt[2][0] = 
    80000884:	1602                	slli	a2,a2,0x20
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000886:	00275793          	srli	a5,a4,0x2
    vspt[2][0] = 
    8000088a:	02464257          	vadd.vx	v4,v4,a2
    8000088e:	0c000593          	li	a1,192
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000892:	0017e793          	ori	a5,a5,1
    vspt[2][0] = 
    80000896:	00051317          	auipc	t1,0x51
    8000089a:	76a30313          	addi	t1,t1,1898 # 80052000 <vspt+0x2000>
    8000089e:	5e05c3d7          	vmv.v.x	v7,a1
    800008a2:	00f33023          	sd	a5,0(t1)
    800008a6:	1ff00693          	li	a3,511
    800008aa:	0003e597          	auipc	a1,0x3e
    800008ae:	7a658593          	addi	a1,a1,1958 # 8003f050 <test_page_perm_table>
    800008b2:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = TEST_VPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        vspt[5][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
    800008b6:	2205f107          	vlseg2e64.v	v2,(a1)
        vspt[5][i] = (addr >> 2) | PTE_AD |
    800008ba:	a24130d7          	vsrl.vi	v1,v4,2
    800008be:	00c79513          	slli	a0,a5,0xc
    800008c2:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800008c6:	5e054357          	vmv.v.x	v6,a0
    800008ca:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008ce:	00479813          	slli	a6,a5,0x4
    800008d2:	00379513          	slli	a0,a5,0x3
    800008d6:	8e9d                	sub	a3,a3,a5
    800008d8:	95c2                	add	a1,a1,a6
        vspt[5][i] = (addr >> 2) | PTE_AD |
    800008da:	2a710157          	vor.vv	v2,v7,v2
    800008de:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800008e2:	02430257          	vadd.vv	v4,v4,v6
    800008e6:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    800008ea:	2a208157          	vor.vv	v2,v2,v1
    800008ee:	02077127          	vse64.v	v2,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008f2:	972a                	add	a4,a4,a0
    800008f4:	fedd                	bnez	a3,800008b2 <vspt_init+0x12a>
        addr +=  PAGE_SIZE;
    }

    vspt[2][1] = 
    800008f6:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    800008fa:	5208a157          	vid.v	v2
        vspt[5][i] = (addr >> 2) | PTE_AD |
    800008fe:	00040697          	auipc	a3,0x40
    80000902:	7426b683          	ld	a3,1858(a3) # 80041040 <test_page_perm_table+0x1ff0>
    vspt[2][1] = 
    80000906:	96263157          	vsll.vi	v2,v2,12
    8000090a:	008015b7          	lui	a1,0x801
        vspt[5][i] = (addr >> 2) | PTE_AD |
    8000090e:	00055717          	auipc	a4,0x55
    80000912:	6f270713          	addi	a4,a4,1778 # 80056000 <vspt+0x6000>
    80000916:	40080637          	lui	a2,0x40080
    vspt[2][1] = 
    8000091a:	05a6                	slli	a1,a1,0x9
        vspt[5][i] = (addr >> 2) | PTE_AD |
    8000091c:	cc060613          	addi	a2,a2,-832 # 4007fcc0 <STACK_SIZE+0x3ff7fcc0>
        PTE_V | (((uintptr_t)&vspt[6][0]) >> 2);
    80000920:	00275793          	srli	a5,a4,0x2
    vspt[2][1] = 
    80000924:	0225c157          	vadd.vx	v2,v2,a1
        vspt[5][i] = (addr >> 2) | PTE_AD |
    80000928:	8ed1                	or	a3,a3,a2
        PTE_V | (((uintptr_t)&vspt[6][0]) >> 2);
    8000092a:	0017e793          	ori	a5,a5,1
        vspt[5][i] = (addr >> 2) | PTE_AD |
    8000092e:	fed73c23          	sd	a3,-8(a4)
    vspt[2][1] = 
    80000932:	00f33423          	sd	a5,8(t1)
    80000936:	20000693          	li	a3,512
    8000093a:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = 4 * SUPERPAGE_SIZE(1) + SUPERPAGE_SIZE(2);
    for(int i = 0; i < 512; i++){
        vspt[6][i] = (addr >> 2) | 
    8000093e:	a22130d7          	vsrl.vi	v1,v2,2
    80000942:	00c79613          	slli	a2,a5,0xc
    80000946:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    8000094a:	5e0641d7          	vmv.v.x	v3,a2
            PTE_V | PTE_AD | PTE_RWX; 
    8000094e:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000952:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000956:	00379613          	slli	a2,a5,0x3
    8000095a:	8e9d                	sub	a3,a3,a5
        vspt[6][i] = (addr >> 2) | 
    8000095c:	020770a7          	vse64.v	v1,(a4)
    80000960:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000964:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000968:	9732                	add	a4,a4,a2
    8000096a:	fae1                	bnez	a3,8000093a <vspt_init+0x1b2>
        addr +=  PAGE_SIZE;
    }  

    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x9ULL << 60);
    if(curr_priv == PRIV_VS){
    8000096c:	00040717          	auipc	a4,0x40
    80000970:	6e872703          	lw	a4,1768(a4) # 80041054 <curr_priv>
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x9ULL << 60);
    80000974:	57e5                	li	a5,-7
    80000976:	80b1                	srli	s1,s1,0xc
    80000978:	17f2                	slli	a5,a5,0x3c
    if(curr_priv == PRIV_VS){
    8000097a:	4689                	li	a3,2
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x9ULL << 60);
    8000097c:	8cdd                	or	s1,s1,a5
    if(curr_priv == PRIV_VS){
    8000097e:	04d70263          	beq	a4,a3,800009c2 <vspt_init+0x23a>
        CSRW(satp, satp);
    } else if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000982:	3775                	addiw	a4,a4,-3
    80000984:	4785                	li	a5,1
    80000986:	00e7e963          	bltu	a5,a4,80000998 <vspt_init+0x210>
        CSRW(CSR_VSATP, satp);
    8000098a:	28049073          	csrw	vsatp,s1
    } else {
        ERROR("");
    }

}
    8000098e:	60e2                	ld	ra,24(sp)
    80000990:	6442                	ld	s0,16(sp)
    80000992:	64a2                	ld	s1,8(sp)
    80000994:	6105                	addi	sp,sp,32
    80000996:	8082                	ret
        ERROR("");
    80000998:	00032517          	auipc	a0,0x32
    8000099c:	ed050513          	addi	a0,a0,-304 # 80032868 <__func__.0+0x480>
    800009a0:	3252e0ef          	jal	8002f4c4 <printf>
    800009a4:	20800613          	li	a2,520
    800009a8:	00030597          	auipc	a1,0x30
    800009ac:	80858593          	addi	a1,a1,-2040 # 800301b0 <__func__.1>
    800009b0:	00032517          	auipc	a0,0x32
    800009b4:	ea850513          	addi	a0,a0,-344 # 80032858 <__func__.0+0x470>
    800009b8:	30d2e0ef          	jal	8002f4c4 <printf>
    800009bc:	4501                	li	a0,0
    800009be:	6bc2e0ef          	jal	8002f07a <exit>
        CSRW(satp, satp);
    800009c2:	18049073          	csrw	satp,s1
}
    800009c6:	60e2                	ld	ra,24(sp)
    800009c8:	6442                	ld	s0,16(sp)
    800009ca:	64a2                	ld	s1,8(sp)
    800009cc:	6105                	addi	sp,sp,32
    800009ce:	8082                	ret

00000000800009d0 <hpt_init>:

pte_t hpt_root[PAGE_SIZE*4/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE*4)));
pte_t hpt[7][PAGE_SIZE/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE)));

void hpt_init(){
    800009d0:	1101                	addi	sp,sp,-32
    800009d2:	e822                	sd	s0,16(sp)

    for(int i = 0; i < 2048; i++){
        hpt_root[i] = 0;
    800009d4:	0004b417          	auipc	s0,0x4b
    800009d8:	62c40413          	addi	s0,s0,1580 # 8004c000 <hpt_root>
    800009dc:	6611                	lui	a2,0x4
    800009de:	4581                	li	a1,0
    800009e0:	8522                	mv	a0,s0
void hpt_init(){
    800009e2:	ec06                	sd	ra,24(sp)
    800009e4:	e426                	sd	s1,8(sp)
        hpt_root[i] = 0;
    800009e6:	3e32e0ef          	jal	8002f5c8 <memset>

    hpt[1][4] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);

    hpt[0][0] = 
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    800009ea:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    800009ee:	00046797          	auipc	a5,0x46
    800009f2:	61278793          	addi	a5,a5,1554 # 80047000 <hpt+0x3000>
    800009f6:	5e07c0d7          	vmv.v.x	v1,a5
    800009fa:	00047797          	auipc	a5,0x47
    800009fe:	60678793          	addi	a5,a5,1542 # 80048000 <hpt+0x4000>
        hpt[1][i] = 
    80000a02:	5208a157          	vid.v	v2
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    80000a06:	3e17e0d7          	vslide1down.vx	v1,v1,a5
        hpt[1][i] = 
    80000a0a:	962e3157          	vsll.vi	v2,v2,28
    80000a0e:	0df00713          	li	a4,223
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    80000a12:	a21130d7          	vsrl.vi	v1,v1,2
        hpt[1][i] = 
    80000a16:	200007b7          	lui	a5,0x20000
    80000a1a:	97ba                	add	a5,a5,a4
    80000a1c:	022741d7          	vadd.vx	v3,v2,a4
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000a20:	00043897          	auipc	a7,0x43
    80000a24:	5e088893          	addi	a7,a7,1504 # 80044000 <hpt>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a28:	00044717          	auipc	a4,0x44
    80000a2c:	5d870713          	addi	a4,a4,1496 # 80045000 <hpt+0x1000>
        hpt[1][i] = 
    80000a30:	0227c157          	vadd.vx	v2,v2,a5
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    80000a34:	2a10b0d7          	vor.vi	v1,v1,1
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000a38:	00045497          	auipc	s1,0x45
    80000a3c:	5c848493          	addi	s1,s1,1480 # 80046000 <hpt+0x2000>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a40:	00275793          	srli	a5,a4,0x2
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000a44:	0028d813          	srli	a6,a7,0x2
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000a48:	0024d693          	srli	a3,s1,0x2
    80000a4c:	0016e693          	ori	a3,a3,1
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a50:	0017e793          	ori	a5,a5,1
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000a54:	00186813          	ori	a6,a6,1
        hpt[1][i] = 
    80000a58:	00044317          	auipc	t1,0x44
    80000a5c:	5b830313          	addi	t1,t1,1464 # 80045010 <hpt+0x1010>

    hpt[0][1] = 
        PTE_V | (((uintptr_t)&hpt[4][0]) >> 2);

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) hpt[3][i] = 0;
    80000a60:	6605                	lui	a2,0x1
    80000a62:	4581                	li	a1,0
    80000a64:	00046517          	auipc	a0,0x46
    80000a68:	59c50513          	addi	a0,a0,1436 # 80047000 <hpt+0x3000>
        hpt[1][i] = 
    80000a6c:	020771a7          	vse64.v	v3,(a4)
    hpt[1][4] = 
    80000a70:	f314                	sd	a3,32(a4)
        hpt[1][i] = 
    80000a72:	02037127          	vse64.v	v2,(t1)
    hpt[0][0] = 
    80000a76:	0208f0a7          	vse64.v	v1,(a7)
    hpt_root[2047] =
    80000a7a:	0004f717          	auipc	a4,0x4f
    80000a7e:	56f73f23          	sd	a5,1406(a4) # 8004fff8 <hpt_root+0x3ff8>
    hpt_root[MEM_BASE/SUPERPAGE_SIZE(1)] =
    80000a82:	01043823          	sd	a6,16(s0)
    hpt_root[0] =
    80000a86:	e01c                	sd	a5,0(s0)
    for(int i = 0; i < 512; i++) hpt[3][i] = 0;
    80000a88:	3412e0ef          	jal	8002f5c8 <memset>
    80000a8c:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000a90:	5208a157          	vid.v	v2
    80000a94:	4705                	li	a4,1
    80000a96:	962ab157          	vsll.vi	v2,v2,21
    80000a9a:	077e                	slli	a4,a4,0x1f
    80000a9c:	0df00693          	li	a3,223
    80000aa0:	00046517          	auipc	a0,0x46
    80000aa4:	56050513          	addi	a0,a0,1376 # 80047000 <hpt+0x3000>
    80000aa8:	02274157          	vadd.vx	v2,v2,a4
    80000aac:	5e06c2d7          	vmv.v.x	v5,a3
    80000ab0:	04000713          	li	a4,64
    80000ab4:	86aa                	mv	a3,a0
    80000ab6:	0d8777d7          	vsetvli	a5,a4,e64,m1,ta,ma
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(2)/2; i++){
        hpt[3][i] = 
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
    80000aba:	a22130d7          	vsrl.vi	v1,v2,2
    80000abe:	01579613          	slli	a2,a5,0x15
    80000ac2:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000ac6:	5e0641d7          	vmv.v.x	v3,a2
    80000aca:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000ace:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(2)/2; i++){
    80000ad2:	00379613          	slli	a2,a5,0x3
    80000ad6:	8f1d                	sub	a4,a4,a5
        hpt[3][i] = 
    80000ad8:	0206f0a7          	vse64.v	v1,(a3)
    80000adc:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000ae0:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(2)/2; i++){
    80000ae4:	96b2                	add	a3,a3,a2
    80000ae6:	fb61                	bnez	a4,80000ab6 <hpt_init+0xe6>
    80000ae8:	5208a157          	vid.v	v2
    80000aec:	47c5                	li	a5,17
    80000aee:	962ab157          	vsll.vi	v2,v2,21
    80000af2:	07ee                	slli	a5,a5,0x1b
    80000af4:	20000693          	li	a3,512
    80000af8:	0227c157          	vadd.vx	v2,v2,a5
    80000afc:	00047717          	auipc	a4,0x47
    80000b00:	50470713          	addi	a4,a4,1284 # 80048000 <hpt+0x4000>
    80000b04:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        addr +=  SUPERPAGE_SIZE(2);
    }    

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
        hpt[4][i] = (addr >> 2) |
    80000b08:	a22130d7          	vsrl.vi	v1,v2,2
    80000b0c:	01579613          	slli	a2,a5,0x15
    80000b10:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000b14:	5e0641d7          	vmv.v.x	v3,a2
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
    80000b18:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000b1c:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000b20:	00379613          	slli	a2,a5,0x3
    80000b24:	8e9d                	sub	a3,a3,a5
        hpt[4][i] = (addr >> 2) |
    80000b26:	020770a7          	vse64.v	v1,(a4)
    80000b2a:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000b2e:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000b32:	9732                	add	a4,a4,a2
    80000b34:	fae1                	bnez	a3,80000b04 <hpt_init+0x134>
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);

    hpt[2][1] = 
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);

    hpt[2][511] = 
    80000b36:	5208a257          	vid.v	v4
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);
    80000b3a:	00048717          	auipc	a4,0x48
    80000b3e:	4c670713          	addi	a4,a4,1222 # 80049000 <hpt+0x5000>
    hpt[2][511] = 
    80000b42:	96463257          	vsll.vi	v4,v4,12
        PTE_V | (((uintptr_t)&hpt[6][0]) >> 2);
    80000b46:	00049317          	auipc	t1,0x49
    80000b4a:	4ba30313          	addi	t1,t1,1210 # 8004a000 <hpt+0x6000>
    80000b4e:	0c000813          	li	a6,192
    hpt[2][511] = 
    80000b52:	45c5                	li	a1,17
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);
    80000b54:	00275793          	srli	a5,a4,0x2
        PTE_V | (((uintptr_t)&hpt[6][0]) >> 2);
    80000b58:	00235693          	srli	a3,t1,0x2
    80000b5c:	5e0843d7          	vmv.v.x	v7,a6
    hpt[2][511] = 
    80000b60:	05ee                	slli	a1,a1,0x1b
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);
    80000b62:	0017e793          	ori	a5,a5,1
        PTE_V | (((uintptr_t)&hpt[6][0]) >> 2);
    80000b66:	0016e693          	ori	a3,a3,1
    hpt[2][511] = 
    80000b6a:	0245c257          	vadd.vx	v4,v4,a1
    80000b6e:	fed53c23          	sd	a3,-8(a0)
    hpt[2][0] = 
    80000b72:	e09c                	sd	a5,0(s1)
    hpt[2][1] = 
    80000b74:	e49c                	sd	a5,8(s1)
    hpt[2][511] = 
    80000b76:	1ff00693          	li	a3,511
    80000b7a:	0003e597          	auipc	a1,0x3e
    80000b7e:	4de58593          	addi	a1,a1,1246 # 8003f058 <test_page_perm_table+0x8>
    80000b82:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        hpt[5][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].h; 
    80000b86:	2205f107          	vlseg2e64.v	v2,(a1)
        hpt[5][i] = (addr >> 2) | PTE_AD |
    80000b8a:	a24130d7          	vsrl.vi	v1,v4,2
    80000b8e:	00c79513          	slli	a0,a5,0xc
    80000b92:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000b96:	5e054357          	vmv.v.x	v6,a0
    80000b9a:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000b9e:	00479813          	slli	a6,a5,0x4
    80000ba2:	00379513          	slli	a0,a5,0x3
    80000ba6:	8e9d                	sub	a3,a3,a5
    80000ba8:	95c2                	add	a1,a1,a6
        hpt[5][i] = (addr >> 2) | PTE_AD |
    80000baa:	2a710157          	vor.vv	v2,v7,v2
    80000bae:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000bb2:	02430257          	vadd.vv	v4,v4,v6
    80000bb6:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000bba:	2a208157          	vor.vv	v2,v2,v1
    80000bbe:	02077127          	vse64.v	v2,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000bc2:	972a                	add	a4,a4,a0
    80000bc4:	fedd                	bnez	a3,80000b82 <hpt_init+0x1b2>
        hpt[5][i] = (addr >> 2) | PTE_AD |
    80000bc6:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000bca:	5208a157          	vid.v	v2
    80000bce:	00040797          	auipc	a5,0x40
    80000bd2:	47a7b783          	ld	a5,1146(a5) # 80041048 <test_page_perm_table+0x1ff8>
    80000bd6:	96263157          	vsll.vi	v2,v2,12
    80000bda:	22080737          	lui	a4,0x22080
    80000bde:	cc070713          	addi	a4,a4,-832 # 2207fcc0 <STACK_SIZE+0x21f7fcc0>
    80000be2:	46c5                	li	a3,17
    80000be4:	06ee                	slli	a3,a3,0x1b
    80000be6:	8fd9                	or	a5,a5,a4
    80000be8:	0226c157          	vadd.vx	v2,v2,a3
    80000bec:	fef33c23          	sd	a5,-8(t1)
    80000bf0:	20000693          	li	a3,512
    80000bf4:	00049717          	auipc	a4,0x49
    80000bf8:	40c70713          	addi	a4,a4,1036 # 8004a000 <hpt+0x6000>
    80000bfc:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        addr +=  PAGE_SIZE;
    }

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
        hpt[6][i] = (addr >> 2) | 
    80000c00:	a22130d7          	vsrl.vi	v1,v2,2
    80000c04:	00c79613          	slli	a2,a5,0xc
    80000c08:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000c0c:	5e0641d7          	vmv.v.x	v3,a2
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
    80000c10:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000c14:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000c18:	00379613          	slli	a2,a5,0x3
    80000c1c:	8e9d                	sub	a3,a3,a5
        hpt[6][i] = (addr >> 2) | 
    80000c1e:	020770a7          	vse64.v	v1,(a4)
    80000c22:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000c26:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000c2a:	9732                	add	a4,a4,a2
    80000c2c:	fae1                	bnez	a3,80000bfc <hpt_init+0x22c>
        addr +=  PAGE_SIZE;
    }  

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000c2e:	00040797          	auipc	a5,0x40
    80000c32:	4267a783          	lw	a5,1062(a5) # 80041054 <curr_priv>
    80000c36:	4705                	li	a4,1
    80000c38:	37f5                	addiw	a5,a5,-3
    80000c3a:	00f76e63          	bltu	a4,a5,80000c56 <hpt_init+0x286>
        uintptr_t hsatp = (((uintptr_t)hpt_root) >> 12) | (0x9ULL << 60);
    80000c3e:	5765                	li	a4,-7
    80000c40:	00c45793          	srli	a5,s0,0xc
    80000c44:	1772                	slli	a4,a4,0x3c
    80000c46:	8fd9                	or	a5,a5,a4
        CSRW(CSR_HGATP, hsatp);
    80000c48:	68079073          	csrw	hgatp,a5
    } else {
        ERROR("trying to set hs hgatp from lower privilege");
    }

}
    80000c4c:	60e2                	ld	ra,24(sp)
    80000c4e:	6442                	ld	s0,16(sp)
    80000c50:	64a2                	ld	s1,8(sp)
    80000c52:	6105                	addi	sp,sp,32
    80000c54:	8082                	ret
        ERROR("trying to set hs hgatp from lower privilege");
    80000c56:	00032517          	auipc	a0,0x32
    80000c5a:	c2a50513          	addi	a0,a0,-982 # 80032880 <__func__.0+0x498>
    80000c5e:	0672e0ef          	jal	8002f4c4 <printf>
    80000c62:	25b00613          	li	a2,603
    80000c66:	0002f597          	auipc	a1,0x2f
    80000c6a:	55a58593          	addi	a1,a1,1370 # 800301c0 <__func__.0>
    80000c6e:	00032517          	auipc	a0,0x32
    80000c72:	bea50513          	addi	a0,a0,-1046 # 80032858 <__func__.0+0x470>
    80000c76:	04f2e0ef          	jal	8002f4c4 <printf>
    80000c7a:	4501                	li	a0,0
    80000c7c:	3fe2e0ef          	jal	8002f07a <exit>

0000000080000c80 <page_table_add_vs_AD>:

void page_table_add_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000c80:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c84:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000c88:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c8c:	0003e617          	auipc	a2,0x3e
    80000c90:	3c460613          	addi	a2,a2,964 # 8003f050 <test_page_perm_table>
    addr = 0x88000000 + i*0x1000;
    80000c94:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c96:	962e                	add	a2,a2,a1

    addr = 0x100000000 + i*0x1000;
    80000c98:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c9a:	6210                	ld	a2,0(a2)
    addr = 0x100000000 + i*0x1000;
    80000c9c:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    80000c9e:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    80000ca0:	9736                	add	a4,a4,a3
    addr = 0x88000000 + i*0x1000;
    80000ca2:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000ca4:	40050593          	addi	a1,a0,1024
    80000ca8:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000caa:	8309                	srli	a4,a4,0x2
    80000cac:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cb0:	8fd1                	or	a5,a5,a2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cb2:	8f51                	or	a4,a4,a2
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cb4:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cb6:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cb8:	00056617          	auipc	a2,0x56
    80000cbc:	34860613          	addi	a2,a2,840 # 80057000 <hspt>
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc0:	0004f697          	auipc	a3,0x4f
    80000cc4:	34068693          	addi	a3,a3,832 # 80050000 <vspt>
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc8:	0c07e793          	ori	a5,a5,192
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000ccc:	0c076713          	ori	a4,a4,192
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cd0:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cd2:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cd4:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cd6:	e298                	sd	a4,0(a3)
}
    80000cd8:	8082                	ret

0000000080000cda <page_table_del_vs_AD>:

void page_table_del_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000cda:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cde:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000ce2:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000ce6:	0003e617          	auipc	a2,0x3e
    80000cea:	36a60613          	addi	a2,a2,874 # 8003f050 <test_page_perm_table>
    80000cee:	962e                	add	a2,a2,a1
    addr = 0x88000000 + i*0x1000;
    80000cf0:	9fb9                	addw	a5,a5,a4

    addr = 0x100000000 + i*0x1000;
    80000cf2:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cf4:	00063803          	ld	a6,0(a2)
    addr = 0x100000000 + i*0x1000;
    80000cf8:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    80000cfa:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    80000cfc:	9736                	add	a4,a4,a3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cfe:	40050593          	addi	a1,a0,1024
    addr = 0x88000000 + i*0x1000;
    80000d02:	9381                	srli	a5,a5,0x20
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d04:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d08:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d0a:	8309                	srli	a4,a4,0x2
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d0c:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d0e:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d10:	00056617          	auipc	a2,0x56
    80000d14:	2f060613          	addi	a2,a2,752 # 80057000 <hspt>
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d18:	0004f697          	auipc	a3,0x4f
    80000d1c:	2e868693          	addi	a3,a3,744 # 80050000 <vspt>
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d20:	0107e7b3          	or	a5,a5,a6
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d24:	01076733          	or	a4,a4,a6
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d28:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d2a:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d2c:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d2e:	e298                	sd	a4,0(a3)
}
    80000d30:	8082                	ret

0000000080000d32 <page_table_add_h_AD>:


void page_table_add_h_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000d32:	00c5171b          	slliw	a4,a0,0xc
    80000d36:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000d3a:	00451693          	slli	a3,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000d3e:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000d40:	0003e717          	auipc	a4,0x3e
    80000d44:	31070713          	addi	a4,a4,784 # 8003f050 <test_page_perm_table>
    80000d48:	9736                	add	a4,a4,a3
    80000d4a:	6714                	ld	a3,8(a4)
    addr = 0x88000000 + i*0x1000;
    80000d4c:	1782                	slli	a5,a5,0x20
    80000d4e:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000d50:	40050513          	addi	a0,a0,1024
    80000d54:	8389                	srli	a5,a5,0x2
    80000d56:	050e                	slli	a0,a0,0x3
    80000d58:	00056717          	auipc	a4,0x56
    80000d5c:	2a870713          	addi	a4,a4,680 # 80057000 <hspt>
    80000d60:	8fd5                	or	a5,a5,a3
    80000d62:	972a                	add	a4,a4,a0
    80000d64:	e31c                	sd	a5,0(a4)
}
    80000d66:	8082                	ret

0000000080000d68 <page_table_del_h_AD>:

void page_table_del_h_AD(int i){
    80000d68:	00c5171b          	slliw	a4,a0,0xc
    80000d6c:	880007b7          	lui	a5,0x88000
    80000d70:	00451693          	slli	a3,a0,0x4
    80000d74:	9fb9                	addw	a5,a5,a4
    80000d76:	0003e717          	auipc	a4,0x3e
    80000d7a:	2da70713          	addi	a4,a4,730 # 8003f050 <test_page_perm_table>
    80000d7e:	9736                	add	a4,a4,a3
    80000d80:	6714                	ld	a3,8(a4)
    80000d82:	1782                	slli	a5,a5,0x20
    80000d84:	9381                	srli	a5,a5,0x20
    80000d86:	40050513          	addi	a0,a0,1024
    80000d8a:	8389                	srli	a5,a5,0x2
    80000d8c:	050e                	slli	a0,a0,0x3
    80000d8e:	00056717          	auipc	a4,0x56
    80000d92:	27270713          	addi	a4,a4,626 # 80057000 <hspt>
    80000d96:	8fd5                	or	a5,a5,a3
    80000d98:	972a                	add	a4,a4,a0
    80000d9a:	e31c                	sd	a5,0(a4)
    80000d9c:	8082                	ret

0000000080000d9e <hspt_switch>:
    addr = 0x88000000 + i*0x1000;
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
}

void hspt_switch(){
    pte_t temp = hspt[4][SWITCH1];
    80000d9e:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    hspt[4][SWITCH1] = hspt[4][SWITCH2];
    80000da2:	0005a797          	auipc	a5,0x5a
    80000da6:	5be78793          	addi	a5,a5,1470 # 8005b360 <hspt+0x4360>
    80000daa:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = hspt[4][SWITCH1];
    80000dae:	5208a0d7          	vid.v	v1
    80000db2:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000db6:	32308157          	vrgather.vv	v2,v3,v1
    hspt[4][SWITCH1] = hspt[4][SWITCH2];
    80000dba:	0207f127          	vse64.v	v2,(a5)
    hspt[4][SWITCH2] = temp;
}
    80000dbe:	8082                	ret

0000000080000dc0 <vspt_switch>:

void vspt_switch(){
    pte_t temp = vspt[5][SWITCH1];
    80000dc0:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    vspt[5][SWITCH1] = vspt[5][SWITCH2];
    80000dc4:	00054797          	auipc	a5,0x54
    80000dc8:	59c78793          	addi	a5,a5,1436 # 80055360 <vspt+0x5360>
    80000dcc:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = vspt[5][SWITCH1];
    80000dd0:	5208a0d7          	vid.v	v1
    80000dd4:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000dd8:	32308157          	vrgather.vv	v2,v3,v1
    vspt[5][SWITCH1] = vspt[5][SWITCH2];
    80000ddc:	0207f127          	vse64.v	v2,(a5)
    vspt[5][SWITCH2] = temp;
}
    80000de0:	8082                	ret

0000000080000de2 <hpt_switch>:

void hpt_switch(){
    pte_t temp = hpt[5][SWITCH1];
    80000de2:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    hpt[5][SWITCH1] = hpt[5][SWITCH2];
    80000de6:	00048797          	auipc	a5,0x48
    80000dea:	57a78793          	addi	a5,a5,1402 # 80049360 <hpt+0x5360>
    80000dee:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = hpt[5][SWITCH1];
    80000df2:	5208a0d7          	vid.v	v1
    80000df6:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000dfa:	32308157          	vrgather.vv	v2,v3,v1
    hpt[5][SWITCH1] = hpt[5][SWITCH2];
    80000dfe:	0207f127          	vse64.v	v2,(a5)
    hpt[5][SWITCH2] = temp;
}
    80000e02:	8082                	ret

0000000080000e04 <ecall>:

uint64_t ecall_args[2];

uint64_t ecall(uint64_t a0, uint64_t a1)
{
    ecall_args[0] = a0;
    80000e04:	0005b797          	auipc	a5,0x5b
    80000e08:	1fc78793          	addi	a5,a5,508 # 8005c000 <ecall_args>
    80000e0c:	e388                	sd	a0,0(a5)
    ecall_args[1] = a1;
    80000e0e:	e78c                	sd	a1,8(a5)

    asm volatile("ecall" ::: "memory");
    80000e10:	00000073          	ecall
    return ecall_args[0];

}
    80000e14:	6388                	ld	a0,0(a5)
    80000e16:	8082                	ret

0000000080000e18 <test_setup_except_function>:

//v扩展时防止被编译成向量指令干扰测试环境
#ifdef __riscv_vector
__attribute__((target("arch=rv64imac_zicsr")))
void test_setup_except_function() {
    __sync_synchronize();
    80000e18:	0330000f          	fence	rw,rw
    excpt.testing = true;
    80000e1c:	0005b797          	auipc	a5,0x5b
    80000e20:	1e478793          	addi	a5,a5,484 # 8005c000 <ecall_args>
    80000e24:	4705                	li	a4,1
    excpt.triggered = false;
    excpt.fault_inst = 0;
    80000e26:	0407b423          	sd	zero,72(a5)
    excpt.testing = true;
    80000e2a:	00e79823          	sh	a4,16(a5)
    __sync_synchronize();
    80000e2e:	0330000f          	fence	rw,rw
    DEBUG("setting up exception test");
}
    80000e32:	8082                	ret

0000000080000e34 <set_prev_priv>:
    return priv == PRIV_VU || priv == PRIV_HU;
}

void set_prev_priv(int priv){

    switch(curr_priv){
    80000e34:	00040797          	auipc	a5,0x40
    80000e38:	2207a783          	lw	a5,544(a5) # 80041054 <curr_priv>
    80000e3c:	470d                	li	a4,3
    80000e3e:	06e78963          	beq	a5,a4,80000eb0 <set_prev_priv+0x7c>
    80000e42:	4711                	li	a4,4
    80000e44:	04e78163          	beq	a5,a4,80000e86 <set_prev_priv+0x52>
    80000e48:	4709                	li	a4,2
    80000e4a:	08e78863          	beq	a5,a4,80000eda <set_prev_priv+0xa6>
void set_prev_priv(int priv){
    80000e4e:	1141                	addi	sp,sp,-16
        case PRIV_VS: {
            uint64_t temp = CSRR(sstatus);
            CSRC(sstatus, 0x1ULL << 8);
        }
        break;
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000e50:	85aa                	mv	a1,a0
    80000e52:	0002f617          	auipc	a2,0x2f
    80000e56:	37e60613          	addi	a2,a2,894 # 800301d0 <__func__.6>
    80000e5a:	00032517          	auipc	a0,0x32
    80000e5e:	a6650513          	addi	a0,a0,-1434 # 800328c0 <__func__.0+0x4d8>
void set_prev_priv(int priv){
    80000e62:	e406                	sd	ra,8(sp)
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000e64:	6602e0ef          	jal	8002f4c4 <printf>
    80000e68:	04b00613          	li	a2,75
    80000e6c:	0002f597          	auipc	a1,0x2f
    80000e70:	36458593          	addi	a1,a1,868 # 800301d0 <__func__.6>
    80000e74:	00032517          	auipc	a0,0x32
    80000e78:	9e450513          	addi	a0,a0,-1564 # 80032858 <__func__.0+0x470>
    80000e7c:	6482e0ef          	jal	8002f4c4 <printf>
    80000e80:	4501                	li	a0,0
    80000e82:	1f82e0ef          	jal	8002f07a <exit>
            uint64_t temp = CSRR(mstatus);
    80000e86:	30002773          	csrr	a4,mstatus
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000e8a:	fc0007b7          	lui	a5,0xfc000
    80000e8e:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80000e90:	07b6                	slli	a5,a5,0xd
    80000e92:	7ff78793          	addi	a5,a5,2047
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000e96:	ffe5069b          	addiw	a3,a0,-2
    80000e9a:	4605                	li	a2,1
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000e9c:	8ff9                	and	a5,a5,a4
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000e9e:	06d67363          	bgeu	a2,a3,80000f04 <set_prev_priv+0xd0>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000ea2:	e501                	bnez	a0,80000eaa <set_prev_priv+0x76>
    80000ea4:	4705                	li	a4,1
    80000ea6:	171e                	slli	a4,a4,0x27
    80000ea8:	8fd9                	or	a5,a5,a4
            CSRW(mstatus, temp);
    80000eaa:	30079073          	csrw	mstatus,a5
        break;
    80000eae:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000eb0:	100027f3          	csrr	a5,sstatus
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000eb4:	4705                	li	a4,1
    80000eb6:	ffe5069b          	addiw	a3,a0,-2
    80000eba:	02d77763          	bgeu	a4,a3,80000ee8 <set_prev_priv+0xb4>
            temp &= ~(0x1ULL << 8);
    80000ebe:	eff7f793          	andi	a5,a5,-257
            CSRW(sstatus, temp);
    80000ec2:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000ec6:	600027f3          	csrr	a5,hstatus
            temp &= ~(0x3ULL << 7);
    80000eca:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000ece:	e119                	bnez	a0,80000ed4 <set_prev_priv+0xa0>
    80000ed0:	0807e793          	ori	a5,a5,128
            CSRW(CSR_HSTATUS, temp);
    80000ed4:	60079073          	csrw	hstatus,a5
        break;
    80000ed8:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000eda:	100027f3          	csrr	a5,sstatus
            CSRC(sstatus, 0x1ULL << 8);
    80000ede:	10000793          	li	a5,256
    80000ee2:	1007b073          	csrc	sstatus,a5
        break;
    80000ee6:	8082                	ret
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000ee8:	1007e793          	ori	a5,a5,256
            CSRW(sstatus, temp);
    80000eec:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000ef0:	600027f3          	csrr	a5,hstatus
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000ef4:	4709                	li	a4,2
            temp &= ~(0x3ULL << 7);
    80000ef6:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000efa:	fce51de3          	bne	a0,a4,80000ed4 <set_prev_priv+0xa0>
    80000efe:	1007e793          	ori	a5,a5,256
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000f02:	b7f9                	j	80000ed0 <set_prev_priv+0x9c>
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000f04:	6705                	lui	a4,0x1
    80000f06:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000f0a:	4689                	li	a3,2
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000f0c:	8fd9                	or	a5,a5,a4
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000f0e:	f8d50be3          	beq	a0,a3,80000ea4 <set_prev_priv+0x70>
    80000f12:	bf61                	j	80000eaa <set_prev_priv+0x76>

0000000080000f14 <goto_priv>:
    curr_priv = priv;

}


void goto_priv(int target_priv){
    80000f14:	1101                	addi	sp,sp,-32
    80000f16:	e822                	sd	s0,16(sp)
    80000f18:	ec06                	sd	ra,24(sp)
    80000f1a:	e426                	sd	s1,8(sp)

    static bool on_going = false;

    DEBUG("goto_priv: real = %s, target = %s, curr = %s",  priv_strs[real_priv], priv_strs[target_priv], priv_strs[curr_priv]);

    if(is_user(target_priv) && is_user(curr_priv)) {
    80000f1c:	4785                	li	a5,1
void goto_priv(int target_priv){
    80000f1e:	842a                	mv	s0,a0
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000f20:	02a7f963          	bgeu	a5,a0,80000f52 <goto_priv+0x3e>
        goto_priv(PRIV_M);
    }

    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000f24:	00040797          	auipc	a5,0x40
    80000f28:	12c7a783          	lw	a5,300(a5) # 80041050 <real_priv>
    80000f2c:	00040497          	auipc	s1,0x40
    80000f30:	12848493          	addi	s1,s1,296 # 80041054 <curr_priv>
    80000f34:	00a78963          	beq	a5,a0,80000f46 <goto_priv+0x32>
    80000f38:	4791                	li	a5,4
    80000f3a:	00040497          	auipc	s1,0x40
    80000f3e:	11a48493          	addi	s1,s1,282 # 80041054 <curr_priv>
    80000f42:	06a7d363          	bge	a5,a0,80000fa8 <goto_priv+0x94>
        if(on_going)
            VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        curr_priv = target_priv;
    80000f46:	c080                	sw	s0,0(s1)
        VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        lower_priv(target_priv);
    }

}
    80000f48:	60e2                	ld	ra,24(sp)
    80000f4a:	6442                	ld	s0,16(sp)
    80000f4c:	64a2                	ld	s1,8(sp)
    80000f4e:	6105                	addi	sp,sp,32
    80000f50:	8082                	ret
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000f52:	00040717          	auipc	a4,0x40
    80000f56:	10272703          	lw	a4,258(a4) # 80041054 <curr_priv>
    80000f5a:	00040497          	auipc	s1,0x40
    80000f5e:	0fa48493          	addi	s1,s1,250 # 80041054 <curr_priv>
    80000f62:	0ae7f863          	bgeu	a5,a4,80001012 <goto_priv+0xfe>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000f66:	00040797          	auipc	a5,0x40
    80000f6a:	0ea7a783          	lw	a5,234(a5) # 80041050 <real_priv>
    80000f6e:	fca78ce3          	beq	a5,a0,80000f46 <goto_priv+0x32>
    if(curr_priv == PRIV_VS && priv == PRIV_HU){
    80000f72:	4789                	li	a5,2
    80000f74:	06f71063          	bne	a4,a5,80000fd4 <goto_priv+0xc0>
    80000f78:	4785                	li	a5,1
    80000f7a:	04f41d63          	bne	s0,a5,80000fd4 <goto_priv+0xc0>
        ERROR("trying to go from vs to hu");
    80000f7e:	00032517          	auipc	a0,0x32
    80000f82:	97250513          	addi	a0,a0,-1678 # 800328f0 <__func__.0+0x508>
    80000f86:	53e2e0ef          	jal	8002f4c4 <printf>
    80000f8a:	05a00613          	li	a2,90
        ERROR("cant lower priv from u");
    80000f8e:	0002f597          	auipc	a1,0x2f
    80000f92:	25258593          	addi	a1,a1,594 # 800301e0 <__func__.4>
    80000f96:	00032517          	auipc	a0,0x32
    80000f9a:	8c250513          	addi	a0,a0,-1854 # 80032858 <__func__.0+0x470>
    80000f9e:	5262e0ef          	jal	8002f4c4 <printf>
    80000fa2:	4501                	li	a0,0
    80000fa4:	0d62e0ef          	jal	8002f07a <exit>
    if(target_priv > curr_priv){
    80000fa8:	00040797          	auipc	a5,0x40
    80000fac:	0ac7a783          	lw	a5,172(a5) # 80041054 <curr_priv>
    80000fb0:	02a7f063          	bgeu	a5,a0,80000fd0 <goto_priv+0xbc>
    ecall_args[0] = a0;
    80000fb4:	0005b797          	auipc	a5,0x5b
    80000fb8:	04c78793          	addi	a5,a5,76 # 8005c000 <ecall_args>
    80000fbc:	4705                	li	a4,1
        ecall(ECALL_GOTO_PRIV, target_priv);
    80000fbe:	e780                	sd	s0,8(a5)
    ecall_args[0] = a0;
    80000fc0:	e398                	sd	a4,0(a5)
    asm volatile("ecall" ::: "memory");
    80000fc2:	00000073          	ecall
}
    80000fc6:	60e2                	ld	ra,24(sp)
    80000fc8:	6442                	ld	s0,16(sp)
    80000fca:	64a2                	ld	s1,8(sp)
    80000fcc:	6105                	addi	sp,sp,32
    80000fce:	8082                	ret
    if(priv == curr_priv) 
    80000fd0:	f6f50ce3          	beq	a0,a5,80000f48 <goto_priv+0x34>
    set_prev_priv(priv);
    80000fd4:	8522                	mv	a0,s0
    80000fd6:	e5fff0ef          	jal	80000e34 <set_prev_priv>
    if(curr_priv == PRIV_M) {
    80000fda:	00040797          	auipc	a5,0x40
    80000fde:	07a7a783          	lw	a5,122(a5) # 80041054 <curr_priv>
    real_priv = priv;
    80000fe2:	00040717          	auipc	a4,0x40
    80000fe6:	06872723          	sw	s0,110(a4) # 80041050 <real_priv>
    if(curr_priv == PRIV_M) {
    80000fea:	4711                	li	a4,4
    80000fec:	04e78e63          	beq	a5,a4,80001048 <goto_priv+0x134>
    } else if(curr_priv == PRIV_VS || curr_priv == PRIV_HS){
    80000ff0:	37f9                	addiw	a5,a5,-2
    80000ff2:	4705                	li	a4,1
    80000ff4:	04f76163          	bltu	a4,a5,80001036 <goto_priv+0x122>
        asm volatile(
    80000ff8:	00000297          	auipc	t0,0x0
    80000ffc:	01028293          	addi	t0,t0,16 # 80001008 <goto_priv+0xf4>
    80001000:	14129073          	csrw	sepc,t0
    80001004:	10200073          	sret
    curr_priv = priv;
    80001008:	00040797          	auipc	a5,0x40
    8000100c:	0487a623          	sw	s0,76(a5) # 80041054 <curr_priv>
    80001010:	bf25                	j	80000f48 <goto_priv+0x34>
        goto_priv(PRIV_M);
    80001012:	4511                	li	a0,4
    80001014:	f01ff0ef          	jal	80000f14 <goto_priv>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80001018:	00040797          	auipc	a5,0x40
    8000101c:	0387a783          	lw	a5,56(a5) # 80041050 <real_priv>
    80001020:	f28783e3          	beq	a5,s0,80000f46 <goto_priv+0x32>
    if(target_priv > curr_priv){
    80001024:	00040717          	auipc	a4,0x40
    80001028:	03072703          	lw	a4,48(a4) # 80041054 <curr_priv>
    8000102c:	f88764e3          	bltu	a4,s0,80000fb4 <goto_priv+0xa0>
    if(priv == curr_priv) 
    80001030:	f0870ce3          	beq	a4,s0,80000f48 <goto_priv+0x34>
    80001034:	bf3d                	j	80000f72 <goto_priv+0x5e>
        ERROR("cant lower priv from u");
    80001036:	00032517          	auipc	a0,0x32
    8000103a:	8ea50513          	addi	a0,a0,-1814 # 80032920 <__func__.0+0x538>
    8000103e:	4862e0ef          	jal	8002f4c4 <printf>
    80001042:	07200613          	li	a2,114
    80001046:	b7a1                	j	80000f8e <goto_priv+0x7a>
        asm volatile(
    80001048:	00000297          	auipc	t0,0x0
    8000104c:	01028293          	addi	t0,t0,16 # 80001058 <goto_priv+0x144>
    80001050:	34129073          	csrw	mepc,t0
    80001054:	30200073          	mret
    80001058:	bf45                	j	80001008 <goto_priv+0xf4>

000000008000105a <excpt_info>:
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    else return epc + 2;
}

void excpt_info(){
    const char* x = excpt.triggered ? "是" : "否";
    8000105a:	0005b797          	auipc	a5,0x5b
    8000105e:	fb77c783          	lbu	a5,-73(a5) # 8005c011 <excpt+0x1>
void excpt_info(){
    80001062:	1141                	addi	sp,sp,-16
    80001064:	e406                	sd	ra,8(sp)
    const char* x = excpt.triggered ? "是" : "否";
    80001066:	00032597          	auipc	a1,0x32
    8000106a:	8e258593          	addi	a1,a1,-1822 # 80032948 <__func__.0+0x560>
    8000106e:	e789                	bnez	a5,80001078 <excpt_info+0x1e>
    80001070:	00032597          	auipc	a1,0x32
    80001074:	8e058593          	addi	a1,a1,-1824 # 80032950 <__func__.0+0x568>
    printf("异常触发：%s\n",x);
    80001078:	00032517          	auipc	a0,0x32
    8000107c:	8e050513          	addi	a0,a0,-1824 # 80032958 <__func__.0+0x570>
    80001080:	4442e0ef          	jal	8002f4c4 <printf>
    printf("异常原因：%d\n",excpt.cause);
}
    80001084:	60a2                	ld	ra,8(sp)
    printf("异常原因：%d\n",excpt.cause);
    80001086:	0005b597          	auipc	a1,0x5b
    8000108a:	f925b583          	ld	a1,-110(a1) # 8005c018 <excpt+0x8>
    8000108e:	00032517          	auipc	a0,0x32
    80001092:	8e250513          	addi	a0,a0,-1822 # 80032970 <__func__.0+0x588>
}
    80001096:	0141                	addi	sp,sp,16
    printf("异常原因：%d\n",excpt.cause);
    80001098:	42c2e06f          	j	8002f4c4 <printf>

000000008000109c <return_from_exception>:

bool double_trap_enabled = false;  // 设为 true 来启用 double_trap 逻辑


int return_from_exception(unsigned from_priv,unsigned to_priv,uint64_t cause,uint64_t epc) {
    if(double_trap_enabled == true){
    8000109c:	0005b797          	auipc	a5,0x5b
    800010a0:	0347c783          	lbu	a5,52(a5) # 8005c0d0 <double_trap_enabled>
    800010a4:	cf99                	beqz	a5,800010c2 <return_from_exception+0x26>
        double_trap_enabled = false;
    800010a6:	0005b797          	auipc	a5,0x5b
    800010aa:	02078523          	sb	zero,42(a5) # 8005c0d0 <double_trap_enabled>
        uint64_t _temp_status;
        switch(from_priv){
    800010ae:	478d                	li	a5,3
    800010b0:	02f50363          	beq	a0,a5,800010d6 <return_from_exception+0x3a>
    800010b4:	4791                	li	a5,4
    800010b6:	0ef50b63          	beq	a0,a5,800011ac <return_from_exception+0x110>
    800010ba:	4789                	li	a5,2
    800010bc:	02f50863          	beq	a0,a5,800010ec <return_from_exception+0x50>
    800010c0:	8082                	ret
        return from_priv;
    }

    else{
        uint64_t _temp_status;
        switch(from_priv){
    800010c2:	478d                	li	a5,3
    800010c4:	06f50763          	beq	a0,a5,80001132 <return_from_exception+0x96>
    800010c8:	4791                	li	a5,4
    800010ca:	14f50063          	beq	a0,a5,8000120a <return_from_exception+0x16e>
    800010ce:	4789                	li	a5,2
    800010d0:	04f50663          	beq	a0,a5,8000111c <return_from_exception+0x80>
    800010d4:	8082                	ret
                _temp_status = CSRR(CSR_HSTATUS);
    800010d6:	600027f3          	csrr	a5,hstatus
                if(to_priv == PRIV_VU || to_priv == PRIV_VS) _temp_status |= (0x1ULL << 7);
    800010da:	16058763          	beqz	a1,80001248 <return_from_exception+0x1ac>
    800010de:	4709                	li	a4,2
    800010e0:	08e58363          	beq	a1,a4,80001166 <return_from_exception+0xca>
                _temp_status &= ~(0x1ULL << 7);
    800010e4:	f7f7f793          	andi	a5,a5,-129
                CSRW(CSR_HSTATUS, _temp_status);
    800010e8:	60079073          	csrw	hstatus,a5
                _temp_status = CSRR(sstatus);
    800010ec:	100027f3          	csrr	a5,sstatus
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (0x1ULL << 8);
    800010f0:	4705                	li	a4,1
    800010f2:	35f9                	addiw	a1,a1,-2
                _temp_status &= ~((1ULL << 8) | (1ULL << 5));
    800010f4:	edf7f793          	andi	a5,a5,-289
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (0x1ULL << 8);
    800010f8:	06b77f63          	bgeu	a4,a1,80001176 <return_from_exception+0xda>
                CSRW(sstatus, _temp_status);
    800010fc:	10079073          	csrw	sstatus,a5
                if (!(CSRR(CSR_MNSTATUS)& (1ULL << 3))) 
    80001100:	744027f3          	csrr	a5,0x744
    80001104:	8ba1                	andi	a5,a5,8
    80001106:	c3c1                	beqz	a5,80001186 <return_from_exception+0xea>
                else if(!(cause & (1ULL << 63))) CSRW(sepc, next_instruction(epc));
    80001108:	04065263          	bgez	a2,8000114c <return_from_exception+0xb0>
                CSRW(sepc, next_instruction(epc));
            break;
        }
        return from_priv;
    }
}
    8000110c:	8082                	ret
                if(to_priv == PRIV_VU || to_priv == PRIV_VS) _temp_status |= (0x1ULL << 7);
    8000110e:	4709                	li	a4,2
    80001110:	14e58563          	beq	a1,a4,8000125a <return_from_exception+0x1be>
                _temp_status &= ~(0x1ULL << 7);
    80001114:	f7f7f793          	andi	a5,a5,-129
                CSRW(CSR_HSTATUS, _temp_status);
    80001118:	60079073          	csrw	hstatus,a5
                _temp_status = CSRR(sstatus);
    8000111c:	100027f3          	csrr	a5,sstatus
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (0x1ULL << 8);
    80001120:	4705                	li	a4,1
    80001122:	35f9                	addiw	a1,a1,-2
                _temp_status &= ~((1ULL << 8) | (1ULL << 5));
    80001124:	edf7f793          	andi	a5,a5,-289
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (0x1ULL << 8);
    80001128:	02b76063          	bltu	a4,a1,80001148 <return_from_exception+0xac>
    8000112c:	1007e793          	ori	a5,a5,256
    80001130:	a821                	j	80001148 <return_from_exception+0xac>
                _temp_status = CSRR(CSR_HSTATUS);
    80001132:	600027f3          	csrr	a5,hstatus
                if(to_priv == PRIV_VU || to_priv == PRIV_VS) _temp_status |= (0x1ULL << 7);
    80001136:	fde1                	bnez	a1,8000110e <return_from_exception+0x72>
    80001138:	0807e793          	ori	a5,a5,128
                CSRW(CSR_HSTATUS, _temp_status);
    8000113c:	60079073          	csrw	hstatus,a5
                _temp_status = CSRR(sstatus);
    80001140:	100027f3          	csrr	a5,sstatus
                _temp_status &= ~((1ULL << 8) | (1ULL << 5));
    80001144:	edf7f793          	andi	a5,a5,-289
                CSRW(sstatus, _temp_status);
    80001148:	10079073          	csrw	sstatus,a5
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000114c:	0006d783          	lhu	a5,0(a3)
    80001150:	460d                	li	a2,3
    else return epc + 2;
    80001152:	00268713          	addi	a4,a3,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001156:	8ff1                	and	a5,a5,a2
    80001158:	00c79463          	bne	a5,a2,80001160 <return_from_exception+0xc4>
    8000115c:	00468713          	addi	a4,a3,4
                CSRW(sepc, next_instruction(epc));
    80001160:	14171073          	csrw	sepc,a4
}
    80001164:	8082                	ret
                if(to_priv == PRIV_VU || to_priv == PRIV_VS) _temp_status |= (0x1ULL << 7);
    80001166:	0807e793          	ori	a5,a5,128
                CSRW(CSR_HSTATUS, _temp_status);
    8000116a:	60079073          	csrw	hstatus,a5
                _temp_status = CSRR(sstatus);
    8000116e:	100027f3          	csrr	a5,sstatus
                _temp_status &= ~((1ULL << 8) | (1ULL << 5));
    80001172:	edf7f793          	andi	a5,a5,-289
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (0x1ULL << 8);
    80001176:	1007e793          	ori	a5,a5,256
                CSRW(sstatus, _temp_status);
    8000117a:	10079073          	csrw	sstatus,a5
                if (!(CSRR(CSR_MNSTATUS)& (1ULL << 3))) 
    8000117e:	744027f3          	csrr	a5,0x744
    80001182:	8ba1                	andi	a5,a5,8
    80001184:	f3d1                	bnez	a5,80001108 <return_from_exception+0x6c>
                if(!(CSRR(CSR_MNCAUSE) & (1ULL << 63))) CSRW(CSR_MNEPC, next_instruction(CSRR(CSR_MNEPC)));
    80001186:	742027f3          	csrr	a5,0x742
    8000118a:	f807c1e3          	bltz	a5,8000110c <return_from_exception+0x70>
    8000118e:	74102773          	csrr	a4,0x741
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001192:	00075783          	lhu	a5,0(a4)
    80001196:	460d                	li	a2,3
    else return epc + 2;
    80001198:	00270693          	addi	a3,a4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000119c:	8ff1                	and	a5,a5,a2
    8000119e:	00c79463          	bne	a5,a2,800011a6 <return_from_exception+0x10a>
    800011a2:	00470693          	addi	a3,a4,4
                if(!(CSRR(CSR_MNCAUSE) & (1ULL << 63))) CSRW(CSR_MNEPC, next_instruction(CSRR(CSR_MNEPC)));
    800011a6:	74169073          	csrw	0x741,a3
    800011aa:	8082                	ret
                _temp_status = CSRR(mstatus);
    800011ac:	30002773          	csrr	a4,mstatus
                _temp_status &= ~((3ULL << 11) | (1ULL << 39) | (1ULL << 7));
    800011b0:	fc0007b7          	lui	a5,0xfc000
    800011b4:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    800011b6:	07b6                	slli	a5,a5,0xd
    800011b8:	77f78793          	addi	a5,a5,1919
    800011bc:	8ff9                	and	a5,a5,a4
                if(to_priv == PRIV_M) _temp_status |= (3ULL << 11);
    800011be:	0aa58e63          	beq	a1,a0,8000127a <return_from_exception+0x1de>
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (1ULL << 11);
    800011c2:	ffe5871b          	addiw	a4,a1,-2
    800011c6:	4805                	li	a6,1
    800011c8:	0ae86e63          	bltu	a6,a4,80001284 <return_from_exception+0x1e8>
    800011cc:	6705                	lui	a4,0x1
    800011ce:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
                if(to_priv == PRIV_VU || to_priv == PRIV_VS) _temp_status |= (1ULL << 39);
    800011d2:	4809                	li	a6,2
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (1ULL << 11);
    800011d4:	8fd9                	or	a5,a5,a4
                if(to_priv == PRIV_VU || to_priv == PRIV_VS) _temp_status |= (1ULL << 39);
    800011d6:	01059563          	bne	a1,a6,800011e0 <return_from_exception+0x144>
    800011da:	4705                	li	a4,1
    800011dc:	171e                	slli	a4,a4,0x27
    800011de:	8fd9                	or	a5,a5,a4
                CSRW(mstatus, _temp_status);
    800011e0:	30079073          	csrw	mstatus,a5
                if (!(CSRR(CSR_MNSTATUS)& MNSTATUS_NMIE)) 
    800011e4:	744027f3          	csrr	a5,0x744
    800011e8:	8ba1                	andi	a5,a5,8
    800011ea:	dfd1                	beqz	a5,80001186 <return_from_exception+0xea>
                else if(!(cause & (1ULL << 63))) CSRW(mepc, next_instruction(epc));
    800011ec:	f20640e3          	bltz	a2,8000110c <return_from_exception+0x70>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011f0:	0006d783          	lhu	a5,0(a3)
    800011f4:	460d                	li	a2,3
    else return epc + 2;
    800011f6:	00268713          	addi	a4,a3,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011fa:	8ff1                	and	a5,a5,a2
    800011fc:	00c79463          	bne	a5,a2,80001204 <return_from_exception+0x168>
    80001200:	00468713          	addi	a4,a3,4
                CSRW(mepc, next_instruction(epc));
    80001204:	34171073          	csrw	mepc,a4
            break;
    80001208:	8082                	ret
                _temp_status = CSRR(mstatus);
    8000120a:	30002773          	csrr	a4,mstatus
                _temp_status &= ~((3ULL << 11) | (1ULL << 39) | (1ULL << 7));
    8000120e:	fc0007b7          	lui	a5,0xfc000
    80001212:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80001214:	07b6                	slli	a5,a5,0xd
    80001216:	77f78793          	addi	a5,a5,1919
    8000121a:	8ff9                	and	a5,a5,a4
                if(to_priv == PRIV_M) _temp_status |= (3ULL << 11);
    8000121c:	04a58a63          	beq	a1,a0,80001270 <return_from_exception+0x1d4>
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (1ULL << 11);
    80001220:	ffe5871b          	addiw	a4,a1,-2
    80001224:	4605                	li	a2,1
    80001226:	00e67963          	bgeu	a2,a4,80001238 <return_from_exception+0x19c>
                if(to_priv == PRIV_VU || to_priv == PRIV_VS) _temp_status |= (1ULL << 39);
    8000122a:	e581                	bnez	a1,80001232 <return_from_exception+0x196>
    8000122c:	4705                	li	a4,1
    8000122e:	171e                	slli	a4,a4,0x27
    80001230:	8fd9                	or	a5,a5,a4
                CSRW(mstatus, _temp_status);
    80001232:	30079073          	csrw	mstatus,a5
    80001236:	bf6d                	j	800011f0 <return_from_exception+0x154>
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (1ULL << 11);
    80001238:	6705                	lui	a4,0x1
    8000123a:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
                if(to_priv == PRIV_VU || to_priv == PRIV_VS) _temp_status |= (1ULL << 39);
    8000123e:	4609                	li	a2,2
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (1ULL << 11);
    80001240:	8fd9                	or	a5,a5,a4
                if(to_priv == PRIV_VU || to_priv == PRIV_VS) _temp_status |= (1ULL << 39);
    80001242:	fec585e3          	beq	a1,a2,8000122c <return_from_exception+0x190>
    80001246:	b7f5                	j	80001232 <return_from_exception+0x196>
                if(to_priv == PRIV_VU || to_priv == PRIV_VS) _temp_status |= (0x1ULL << 7);
    80001248:	0807e793          	ori	a5,a5,128
                CSRW(CSR_HSTATUS, _temp_status);
    8000124c:	60079073          	csrw	hstatus,a5
                _temp_status = CSRR(sstatus);
    80001250:	100027f3          	csrr	a5,sstatus
                _temp_status &= ~((1ULL << 8) | (1ULL << 5));
    80001254:	edf7f793          	andi	a5,a5,-289
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (0x1ULL << 8);
    80001258:	b555                	j	800010fc <return_from_exception+0x60>
                if(to_priv == PRIV_VU || to_priv == PRIV_VS) _temp_status |= (0x1ULL << 7);
    8000125a:	0807e793          	ori	a5,a5,128
                CSRW(CSR_HSTATUS, _temp_status);
    8000125e:	60079073          	csrw	hstatus,a5
                _temp_status = CSRR(sstatus);
    80001262:	100027f3          	csrr	a5,sstatus
                _temp_status &= ~((1ULL << 8) | (1ULL << 5));
    80001266:	edf7f793          	andi	a5,a5,-289
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (0x1ULL << 8);
    8000126a:	1007e793          	ori	a5,a5,256
    8000126e:	bde9                	j	80001148 <return_from_exception+0xac>
                if(to_priv == PRIV_M) _temp_status |= (3ULL << 11);
    80001270:	6709                	lui	a4,0x2
    80001272:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001276:	8fd9                	or	a5,a5,a4
                if(to_priv == PRIV_VS || to_priv == PRIV_HS) _temp_status |= (1ULL << 11);
    80001278:	bf6d                	j	80001232 <return_from_exception+0x196>
                if(to_priv == PRIV_M) _temp_status |= (3ULL << 11);
    8000127a:	6709                	lui	a4,0x2
    8000127c:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001280:	8fd9                	or	a5,a5,a4
                if(to_priv == PRIV_VU || to_priv == PRIV_VS) _temp_status |= (1ULL << 39);
    80001282:	bfb9                	j	800011e0 <return_from_exception+0x144>
    80001284:	d9b9                	beqz	a1,800011da <return_from_exception+0x13e>
    80001286:	bfa9                	j	800011e0 <return_from_exception+0x144>

0000000080001288 <mhandler>:





uint64_t mhandler(){
    80001288:	715d                	addi	sp,sp,-80
    8000128a:	f84a                	sd	s2,48(sp)
    8000128c:	e486                	sd	ra,72(sp)
    8000128e:	e0a2                	sd	s0,64(sp)
    80001290:	fc26                	sd	s1,56(sp)
    80001292:	f44e                	sd	s3,40(sp)
    80001294:	f052                	sd	s4,32(sp)
    80001296:	ec56                	sd	s5,24(sp)

    real_priv = PRIV_M;
    80001298:	00040917          	auipc	s2,0x40
    8000129c:	db890913          	addi	s2,s2,-584 # 80041050 <real_priv>
    800012a0:	4791                	li	a5,4
    800012a2:	00f92023          	sw	a5,0(s2)

    uint64_t cause = CSRR(mcause);
    800012a6:	34202673          	csrr	a2,mcause
    uint64_t epc = CSRR(mepc);
    800012aa:	341024f3          	csrr	s1,mepc
    800012ae:	86a6                	mv	a3,s1
    uint64_t tval = CSRR(mtval);
    800012b0:	34302af3          	csrr	s5,mtval
    uint64_t tval2 = CSRR(CSR_MTVAL2);
    800012b4:	34b029f3          	csrr	s3,0x34b
    uint64_t tinst= CSRR(CSR_MTINST);
    800012b8:	34a02a73          	csrr	s4,0x34a
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    800012bc:	478d                	li	a5,3
    800012be:	ff860713          	addi	a4,a2,-8
    800012c2:	0ce7e663          	bltu	a5,a4,8000138e <mhandler+0x106>
    DEBUG("mtinst = 0x%lx", tinst);
    DEBUG("mpp = 0x%lx", (CSRR(mstatus) >> 11) & 0x3);
    DEBUG("mpv = 0x%lx", (CSRR(mstatus) >> 39) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
    800012c6:	0005b417          	auipc	s0,0x5b
    800012ca:	d3a40413          	addi	s0,s0,-710 # 8005c000 <ecall_args>
    800012ce:	6018                	ld	a4,0(s0)
    800012d0:	4785                	li	a5,1
    800012d2:	0ef70863          	beq	a4,a5,800013c2 <mhandler+0x13a>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    800012d6:	0005b797          	auipc	a5,0x5b
    800012da:	d3a7c783          	lbu	a5,-710(a5) # 8005c010 <excpt>
    800012de:	c3d9                	beqz	a5,80001364 <mhandler+0xdc>

    if(cause & (1ULL << 63)){
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    }

    excpt.triggered = true;
    800012e0:	4705                	li	a4,1
    excpt.priv = PRIV_M;
    800012e2:	4791                	li	a5,4
    excpt.cause = cause;
    800012e4:	ec10                	sd	a2,24(s0)
    excpt.epc = epc;
    800012e6:	f004                	sd	s1,32(s0)
    excpt.tval = tval;
    800012e8:	03543423          	sd	s5,40(s0)
    excpt.tinst = tinst;
    800012ec:	03443823          	sd	s4,48(s0)
    excpt.tval2 = tval2;
    800012f0:	03343c23          	sd	s3,56(s0)
    excpt.triggered = true;
    800012f4:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_M;
    800012f8:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    800012fa:	300027f3          	csrr	a5,mstatus
    800012fe:	9399                	srli	a5,a5,0x26
    80001300:	8ff9                	and	a5,a5,a4
    80001302:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(mstatus) >> 39) & 0x1);
    80001306:	300027f3          	csrr	a5,mstatus
    8000130a:	939d                	srli	a5,a5,0x27
    8000130c:	8ff9                	and	a5,a5,a4
    8000130e:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80001312:	0005b797          	auipc	a5,0x5b
    80001316:	ce078f23          	sb	zero,-770(a5) # 8005c010 <excpt>
    if(is_inst_fault(cause)){
    8000131a:	47d1                	li	a5,20
    8000131c:	00c7eb63          	bltu	a5,a2,80001332 <mhandler+0xaa>
    80001320:	001017b7          	lui	a5,0x101
    80001324:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80001326:	00c7d7b3          	srl	a5,a5,a2
    8000132a:	8ff9                	and	a5,a5,a4
    8000132c:	c399                	beqz	a5,80001332 <mhandler+0xaa>
        if(excpt.fault_inst != 0){ 
    8000132e:	6434                	ld	a3,72(s0)
    80001330:	c2c1                	beqz	a3,800013b0 <mhandler+0x128>
        } else 
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    80001332:	00040517          	auipc	a0,0x40
    80001336:	d1e52503          	lw	a0,-738(a0) # 80041050 <real_priv>
    real_priv = curr_priv;
    8000133a:	00040597          	auipc	a1,0x40
    8000133e:	d1a5a583          	lw	a1,-742(a1) # 80041054 <curr_priv>
    excpt.fault_inst = 0;
    80001342:	0005b797          	auipc	a5,0x5b
    80001346:	d007b323          	sd	zero,-762(a5) # 8005c048 <excpt+0x38>
    real_priv = curr_priv;
    8000134a:	00b92023          	sw	a1,0(s2)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000134e:	d4fff0ef          	jal	8000109c <return_from_exception>
}
    80001352:	60a6                	ld	ra,72(sp)
    80001354:	6406                	ld	s0,64(sp)
    80001356:	74e2                	ld	s1,56(sp)
    80001358:	7942                	ld	s2,48(sp)
    8000135a:	79a2                	ld	s3,40(sp)
    8000135c:	7a02                	ld	s4,32(sp)
    8000135e:	6ae2                	ld	s5,24(sp)
    80001360:	6161                	addi	sp,sp,80
    80001362:	8082                	ret
        ERROR("untested exception!");
    80001364:	00031517          	auipc	a0,0x31
    80001368:	62450513          	addi	a0,a0,1572 # 80032988 <__func__.0+0x5a0>
    8000136c:	1582e0ef          	jal	8002f4c4 <printf>
    80001370:	13700613          	li	a2,311
            ERROR("instruction fault without return address");
    80001374:	0002f597          	auipc	a1,0x2f
    80001378:	e7c58593          	addi	a1,a1,-388 # 800301f0 <__func__.3>
    8000137c:	00031517          	auipc	a0,0x31
    80001380:	4dc50513          	addi	a0,a0,1244 # 80032858 <__func__.0+0x470>
    80001384:	1402e0ef          	jal	8002f4c4 <printf>
    80001388:	4501                	li	a0,0
    8000138a:	4f12d0ef          	jal	8002f07a <exit>
    } else if(!excpt.testing){
    8000138e:	0005b797          	auipc	a5,0x5b
    80001392:	c827c783          	lbu	a5,-894(a5) # 8005c010 <excpt>
    80001396:	d7f9                	beqz	a5,80001364 <mhandler+0xdc>
    if(cause & (1ULL << 63)){
    80001398:	00065763          	bgez	a2,800013a6 <mhandler+0x11e>
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    8000139c:	4785                	li	a5,1
    8000139e:	00c797b3          	sll	a5,a5,a2
    800013a2:	3447b073          	csrc	mip,a5
    800013a6:	0005b417          	auipc	s0,0x5b
    800013aa:	c5a40413          	addi	s0,s0,-934 # 8005c000 <ecall_args>
    800013ae:	bf0d                	j	800012e0 <mhandler+0x58>
            ERROR("instruction fault without return address");
    800013b0:	00031517          	auipc	a0,0x31
    800013b4:	60050513          	addi	a0,a0,1536 # 800329b0 <__func__.0+0x5c8>
    800013b8:	10c2e0ef          	jal	8002f4c4 <printf>
    800013bc:	14d00613          	li	a2,333
    800013c0:	bf55                	j	80001374 <mhandler+0xec>
        goto_priv(ecall_args[1]); 
    800013c2:	4408                	lw	a0,8(s0)
    800013c4:	e432                	sd	a2,8(sp)
    800013c6:	e026                	sd	s1,0(sp)
    800013c8:	b4dff0ef          	jal	80000f14 <goto_priv>
    if(cause & (1ULL << 63)){
    800013cc:	6682                	ld	a3,0(sp)
    800013ce:	6622                	ld	a2,8(sp)
    800013d0:	bf01                	j	800012e0 <mhandler+0x58>

00000000800013d2 <hshandler>:
uint64_t hshandler(){
    800013d2:	715d                	addi	sp,sp,-80
    800013d4:	f44e                	sd	s3,40(sp)
    800013d6:	e486                	sd	ra,72(sp)
    800013d8:	e0a2                	sd	s0,64(sp)
    800013da:	fc26                	sd	s1,56(sp)
    800013dc:	f84a                	sd	s2,48(sp)
    800013de:	f052                	sd	s4,32(sp)
    800013e0:	ec56                	sd	s5,24(sp)
    800013e2:	e85a                	sd	s6,16(sp)
    800013e4:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_HS;
    800013e6:	00040997          	auipc	s3,0x40
    800013ea:	c6a98993          	addi	s3,s3,-918 # 80041050 <real_priv>
    800013ee:	478d                	li	a5,3
    800013f0:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(scause);
    800013f4:	142024f3          	csrr	s1,scause
    uint64_t epc = CSRR(sepc);
    800013f8:	14102973          	csrr	s2,sepc
    800013fc:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(stval);
    800013fe:	14302bf3          	csrr	s7,stval
    uint64_t htval = CSRR(CSR_HTVAL);
    80001402:	64302af3          	csrr	s5,htval
    uint64_t htinst = CSRR(CSR_HTINST);
    80001406:	64a02b73          	csrr	s6,htinst
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    8000140a:	ff848713          	addi	a4,s1,-8
    8000140e:	02e7ef63          	bltu	a5,a4,8000144c <hshandler+0x7a>
    DEBUG("spv = 0x%lx", (CSRR(CSR_HSTATUS) >> 7) & 0x1);
    DEBUG("spvp = 0x%lx", (CSRR(CSR_HSTATUS) >> 8) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);


    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){ 
    80001412:	0005b417          	auipc	s0,0x5b
    80001416:	bee40413          	addi	s0,s0,-1042 # 8005c000 <ecall_args>
    8000141a:	6018                	ld	a4,0(s0)
    8000141c:	4785                	li	a5,1
    8000141e:	0ef70b63          	beq	a4,a5,80001514 <hshandler+0x142>
        goto_priv(ecall_args[1]); 
    } else if(is_ecall(cause)) {
        ERROR("unknown ecall"); 
    80001422:	00031517          	auipc	a0,0x31
    80001426:	5ce50513          	addi	a0,a0,1486 # 800329f0 <__func__.0+0x608>
    8000142a:	09a2e0ef          	jal	8002f4c4 <printf>
    8000142e:	16d00613          	li	a2,365
    } else if(!excpt.testing){
        ERROR("untested exception!");
    80001432:	0002f597          	auipc	a1,0x2f
    80001436:	dce58593          	addi	a1,a1,-562 # 80030200 <__func__.2>
    8000143a:	00031517          	auipc	a0,0x31
    8000143e:	41e50513          	addi	a0,a0,1054 # 80032858 <__func__.0+0x470>
    80001442:	0822e0ef          	jal	8002f4c4 <printf>
    80001446:	4501                	li	a0,0
    80001448:	4332d0ef          	jal	8002f07a <exit>
    } else if(!excpt.testing){
    8000144c:	0005b797          	auipc	a5,0x5b
    80001450:	bc47c783          	lbu	a5,-1084(a5) # 8005c010 <excpt>
    80001454:	c7dd                	beqz	a5,80001502 <hshandler+0x130>
    }
    
    if(cause & (1ULL << 63)){
    80001456:	0005b417          	auipc	s0,0x5b
    8000145a:	baa40413          	addi	s0,s0,-1110 # 8005c000 <ecall_args>
    8000145e:	0004d963          	bgez	s1,80001470 <hshandler+0x9e>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    80001462:	4785                	li	a5,1
    80001464:	009797b3          	sll	a5,a5,s1
    80001468:	1447b073          	csrc	sip,a5
        //CSRC(CSR_HVIP, 1ULL << (cause &  ~(1ULL << 63)));
        CSRC(CSR_HIP, 1ULL << (cause &  ~(1ULL << 63)));
    8000146c:	6447b073          	csrc	hip,a5
    }

    excpt.triggered = true;
    80001470:	4705                	li	a4,1
    excpt.priv = PRIV_HS;
    80001472:	478d                	li	a5,3
    excpt.cause = cause;
    80001474:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80001476:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    8000147a:	03743423          	sd	s7,40(s0)
    excpt.tinst = htinst;
    8000147e:	03643823          	sd	s6,48(s0)
    excpt.tval2 = htval;
    80001482:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80001486:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_HS;
    8000148a:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);
    8000148c:	600027f3          	csrr	a5,hstatus
    80001490:	8399                	srli	a5,a5,0x6
    80001492:	8ff9                	and	a5,a5,a4
    80001494:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(CSR_HSTATUS) >> 7) & 0x1);
    80001498:	600027f3          	csrr	a5,hstatus
    8000149c:	839d                	srli	a5,a5,0x7
    8000149e:	8ff9                	and	a5,a5,a4
    800014a0:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    800014a4:	0005b797          	auipc	a5,0x5b
    800014a8:	b6078623          	sb	zero,-1172(a5) # 8005c010 <excpt>
    if(is_inst_fault(cause)){
    800014ac:	47d1                	li	a5,20
    800014ae:	0097ed63          	bltu	a5,s1,800014c8 <hshandler+0xf6>
    800014b2:	001017b7          	lui	a5,0x101
    800014b6:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    800014b8:	0097d7b3          	srl	a5,a5,s1
    800014bc:	8ff9                	and	a5,a5,a4
    800014be:	c789                	beqz	a5,800014c8 <hshandler+0xf6>
        if(excpt.fault_inst != 0){ 
    800014c0:	04843a03          	ld	s4,72(s0)
    800014c4:	040a0c63          	beqz	s4,8000151c <hshandler+0x14a>
        } else 
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    800014c8:	00040517          	auipc	a0,0x40
    800014cc:	b8852503          	lw	a0,-1144(a0) # 80041050 <real_priv>
    real_priv = curr_priv;
    800014d0:	00040597          	auipc	a1,0x40
    800014d4:	b845a583          	lw	a1,-1148(a1) # 80041054 <curr_priv>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800014d8:	86d2                	mv	a3,s4
    800014da:	8626                	mv	a2,s1
    real_priv = curr_priv;
    800014dc:	00b9a023          	sw	a1,0(s3)
    excpt.fault_inst = 0;
    800014e0:	0005b797          	auipc	a5,0x5b
    800014e4:	b607b423          	sd	zero,-1176(a5) # 8005c048 <excpt+0x38>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800014e8:	bb5ff0ef          	jal	8000109c <return_from_exception>
}
    800014ec:	60a6                	ld	ra,72(sp)
    800014ee:	6406                	ld	s0,64(sp)
    800014f0:	74e2                	ld	s1,56(sp)
    800014f2:	7942                	ld	s2,48(sp)
    800014f4:	79a2                	ld	s3,40(sp)
    800014f6:	7a02                	ld	s4,32(sp)
    800014f8:	6ae2                	ld	s5,24(sp)
    800014fa:	6b42                	ld	s6,16(sp)
    800014fc:	6ba2                	ld	s7,8(sp)
    800014fe:	6161                	addi	sp,sp,80
    80001500:	8082                	ret
        ERROR("untested exception!");
    80001502:	00031517          	auipc	a0,0x31
    80001506:	48650513          	addi	a0,a0,1158 # 80032988 <__func__.0+0x5a0>
    8000150a:	7bb2d0ef          	jal	8002f4c4 <printf>
    8000150e:	16f00613          	li	a2,367
    80001512:	b705                	j	80001432 <hshandler+0x60>
        goto_priv(ecall_args[1]); 
    80001514:	4408                	lw	a0,8(s0)
    80001516:	9ffff0ef          	jal	80000f14 <goto_priv>
    if(cause & (1ULL << 63)){
    8000151a:	bf99                	j	80001470 <hshandler+0x9e>
            ERROR("instruction fault without return address");
    8000151c:	00031517          	auipc	a0,0x31
    80001520:	49450513          	addi	a0,a0,1172 # 800329b0 <__func__.0+0x5c8>
    80001524:	7a12d0ef          	jal	8002f4c4 <printf>
    80001528:	18700613          	li	a2,391
    8000152c:	b719                	j	80001432 <hshandler+0x60>

000000008000152e <vshandler>:

uint64_t vshandler(){
    8000152e:	7139                	addi	sp,sp,-64
    80001530:	f822                	sd	s0,48(sp)
    80001532:	fc06                	sd	ra,56(sp)
    80001534:	f426                	sd	s1,40(sp)
    80001536:	f04a                	sd	s2,32(sp)
    80001538:	ec4e                	sd	s3,24(sp)

    real_priv = PRIV_VS;
    8000153a:	00040417          	auipc	s0,0x40
    8000153e:	b1640413          	addi	s0,s0,-1258 # 80041050 <real_priv>
    80001542:	4709                	li	a4,2
    80001544:	c018                	sw	a4,0(s0)

    uint64_t cause = CSRR(scause);
    80001546:	14202673          	csrr	a2,scause
    uint64_t epc = CSRR(sepc);
    8000154a:	141024f3          	csrr	s1,sepc
    8000154e:	86a6                	mv	a3,s1
    uint64_t tval = CSRR(stval);
    80001550:	14302973          	csrr	s2,stval
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80001554:	478d                	li	a5,3
    80001556:	ff860593          	addi	a1,a2,-8
    8000155a:	04b7e663          	bltu	a5,a1,800015a6 <vshandler+0x78>
    VERBOSE("virtual supervisor handler (scause = 0x%llx)", cause);
    DEBUG("scause = 0x%llx", cause);
    DEBUG("sepc = 0x%lx", epc);
    DEBUG("stval = 0x%lx", tval);
    
    if(is_ecall(cause) && ecall_args[0] ==ECALL_GOTO_PRIV ){
    8000155e:	0005b997          	auipc	s3,0x5b
    80001562:	aa298993          	addi	s3,s3,-1374 # 8005c000 <ecall_args>
    80001566:	0009b703          	ld	a4,0(s3)
    8000156a:	4785                	li	a5,1
    8000156c:	0ef70763          	beq	a4,a5,8000165a <vshandler+0x12c>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    80001570:	0005b797          	auipc	a5,0x5b
    80001574:	aa07c783          	lbu	a5,-1376(a5) # 8005c010 <excpt>
    80001578:	0e079963          	bnez	a5,8000166a <vshandler+0x13c>
        ERROR("untested exception!");
    8000157c:	00031517          	auipc	a0,0x31
    80001580:	40c50513          	addi	a0,a0,1036 # 80032988 <__func__.0+0x5a0>
    80001584:	7412d0ef          	jal	8002f4c4 <printf>
    80001588:	1a000613          	li	a2,416
    excpt.epc = epc;
    excpt.tval = tval;
    excpt.testing = false;
    if(is_inst_fault(cause)){
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
        else ERROR("instruction fault without return address");
    8000158c:	0002f597          	auipc	a1,0x2f
    80001590:	c8458593          	addi	a1,a1,-892 # 80030210 <__func__.1>
    80001594:	00031517          	auipc	a0,0x31
    80001598:	2c450513          	addi	a0,a0,708 # 80032858 <__func__.0+0x470>
    8000159c:	7292d0ef          	jal	8002f4c4 <printf>
    800015a0:	4501                	li	a0,0
    800015a2:	2d92d0ef          	jal	8002f07a <exit>
    } else if(!excpt.testing){
    800015a6:	0005b597          	auipc	a1,0x5b
    800015aa:	a6a5c583          	lbu	a1,-1430(a1) # 8005c010 <excpt>
    800015ae:	0005b797          	auipc	a5,0x5b
    800015b2:	a5278793          	addi	a5,a5,-1454 # 8005c000 <ecall_args>
    800015b6:	d1f9                	beqz	a1,8000157c <vshandler+0x4e>
    if(cause & (1ULL << 63)){
    800015b8:	04065d63          	bgez	a2,80001612 <vshandler+0xe4>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    800015bc:	4585                	li	a1,1
    800015be:	00c595b3          	sll	a1,a1,a2
    800015c2:	1445b073          	csrc	sip,a1
    excpt.testing = false;
    800015c6:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    800015ca:	5208a0d7          	vid.v	v1
    800015ce:	0005b597          	auipc	a1,0x5b
    800015d2:	a4258593          	addi	a1,a1,-1470 # 8005c010 <excpt>
    800015d6:	020580a7          	vse8.v	v1,(a1)
    excpt.priv = PRIV_VS;
    800015da:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    800015dc:	ef90                	sd	a2,24(a5)
    excpt.epc = epc;
    800015de:	f384                	sd	s1,32(a5)
    excpt.tval = tval;
    800015e0:	0327b423          	sd	s2,40(a5)
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    800015e4:	00040517          	auipc	a0,0x40
    800015e8:	a6c52503          	lw	a0,-1428(a0) # 80041050 <real_priv>
    real_priv = curr_priv;
    800015ec:	00040597          	auipc	a1,0x40
    800015f0:	a685a583          	lw	a1,-1432(a1) # 80041054 <curr_priv>
    excpt.fault_inst = 0;
    800015f4:	0005b797          	auipc	a5,0x5b
    800015f8:	a407ba23          	sd	zero,-1452(a5) # 8005c048 <excpt+0x38>
    real_priv = curr_priv;
    800015fc:	c00c                	sw	a1,0(s0)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800015fe:	a9fff0ef          	jal	8000109c <return_from_exception>
}
    80001602:	70e2                	ld	ra,56(sp)
    80001604:	7442                	ld	s0,48(sp)
    80001606:	74a2                	ld	s1,40(sp)
    80001608:	7902                	ld	s2,32(sp)
    8000160a:	69e2                	ld	s3,24(sp)
    8000160c:	4501                	li	a0,0
    8000160e:	6121                	addi	sp,sp,64
    80001610:	8082                	ret
    excpt.testing = false;
    80001612:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    80001616:	5208a0d7          	vid.v	v1
    8000161a:	0005b597          	auipc	a1,0x5b
    8000161e:	9f658593          	addi	a1,a1,-1546 # 8005c010 <excpt>
    80001622:	020580a7          	vse8.v	v1,(a1)
    excpt.priv = PRIV_VS;
    80001626:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    80001628:	ef90                	sd	a2,24(a5)
    excpt.epc = epc;
    8000162a:	f384                	sd	s1,32(a5)
    excpt.tval = tval;
    8000162c:	0327b423          	sd	s2,40(a5)
    if(is_inst_fault(cause)){
    80001630:	4751                	li	a4,20
    80001632:	fac769e3          	bltu	a4,a2,800015e4 <vshandler+0xb6>
    80001636:	00101737          	lui	a4,0x101
    8000163a:	070d                	addi	a4,a4,3 # 101003 <STACK_SIZE+0x1003>
    8000163c:	00c75733          	srl	a4,a4,a2
    80001640:	8b05                	andi	a4,a4,1
    80001642:	d34d                	beqz	a4,800015e4 <vshandler+0xb6>
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
    80001644:	67b4                	ld	a3,72(a5)
    80001646:	fed9                	bnez	a3,800015e4 <vshandler+0xb6>
        else ERROR("instruction fault without return address");
    80001648:	00031517          	auipc	a0,0x31
    8000164c:	36850513          	addi	a0,a0,872 # 800329b0 <__func__.0+0x5c8>
    80001650:	6752d0ef          	jal	8002f4c4 <printf>
    80001654:	1af00613          	li	a2,431
    80001658:	bf15                	j	8000158c <vshandler+0x5e>
        goto_priv(ecall_args[1]); 
    8000165a:	0089a503          	lw	a0,8(s3)
    8000165e:	e432                	sd	a2,8(sp)
    80001660:	e026                	sd	s1,0(sp)
    80001662:	8b3ff0ef          	jal	80000f14 <goto_priv>
    if(cause & (1ULL << 63)){
    80001666:	6682                	ld	a3,0(sp)
    80001668:	6622                	ld	a2,8(sp)
    excpt.testing = false;
    8000166a:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    8000166e:	5208a0d7          	vid.v	v1
    80001672:	0005b717          	auipc	a4,0x5b
    80001676:	99e70713          	addi	a4,a4,-1634 # 8005c010 <excpt>
    excpt.priv = PRIV_VS;
    8000167a:	4789                	li	a5,2
    excpt.testing = false;
    8000167c:	020700a7          	vse8.v	v1,(a4)
    excpt.cause = cause;
    80001680:	00c9bc23          	sd	a2,24(s3)
    excpt.epc = epc;
    80001684:	0299b023          	sd	s1,32(s3)
    excpt.tval = tval;
    80001688:	0329b423          	sd	s2,40(s3)
    excpt.priv = PRIV_VS;
    8000168c:	00f9aa23          	sw	a5,20(s3)
    if(is_inst_fault(cause)){
    80001690:	bf91                	j	800015e4 <vshandler+0xb6>

0000000080001692 <expand_compressed_instruction>:

uint32_t expand_compressed_instruction(uint16_t ins) {
    80001692:	1141                	addi	sp,sp,-16
    80001694:	e406                	sd	ra,8(sp)

    if(!INS_COMPRESSED(ins)) {
    80001696:	00357713          	andi	a4,a0,3
    8000169a:	478d                	li	a5,3
    8000169c:	04f70763          	beq	a4,a5,800016ea <expand_compressed_instruction+0x58>
        ERROR("trying to expand non-compressed instruction");
    }

    if(INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins) || INS_MATCH_C_SW(ins) || INS_MATCH_C_SD(ins)){
    800016a0:	77f9                	lui	a5,0xffffe
    800016a2:	078d                	addi	a5,a5,3 # ffffffffffffe003 <__stack_top+0xffffffff7fcff003>
    800016a4:	8fe9                	and	a5,a5,a0
    800016a6:	6711                	lui	a4,0x4
    800016a8:	85aa                	mv	a1,a0
    800016aa:	08e78963          	beq	a5,a4,8000173c <expand_compressed_instruction+0xaa>
    800016ae:	6719                	lui	a4,0x6
    800016b0:	04e78663          	beq	a5,a4,800016fc <expand_compressed_instruction+0x6a>
    800016b4:	6731                	lui	a4,0xc
    800016b6:	0ae78b63          	beq	a5,a4,8000176c <expand_compressed_instruction+0xda>
    800016ba:	6739                	lui	a4,0xe
    800016bc:	0ae78363          	beq	a5,a4,80001762 <expand_compressed_instruction+0xd0>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) & 0x1 << 6 |
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) >> 1 & 0x1 << 2;
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    } else {
        ERROR("expansion not implemented for target compressed instruction: 0x%x", ins);
    800016c0:	00031517          	auipc	a0,0x31
    800016c4:	39050513          	addi	a0,a0,912 # 80032a50 <__func__.0+0x668>
    800016c8:	5fd2d0ef          	jal	8002f4c4 <printf>
    800016cc:	1ce00613          	li	a2,462
    800016d0:	0002f597          	auipc	a1,0x2f
    800016d4:	b5058593          	addi	a1,a1,-1200 # 80030220 <__func__.0>
    800016d8:	00031517          	auipc	a0,0x31
    800016dc:	18050513          	addi	a0,a0,384 # 80032858 <__func__.0+0x470>
    800016e0:	5e52d0ef          	jal	8002f4c4 <printf>
    800016e4:	4501                	li	a0,0
    800016e6:	1952d0ef          	jal	8002f07a <exit>
        ERROR("trying to expand non-compressed instruction");
    800016ea:	00031517          	auipc	a0,0x31
    800016ee:	32650513          	addi	a0,a0,806 # 80032a10 <__func__.0+0x628>
    800016f2:	5d32d0ef          	jal	8002f4c4 <printf>
    800016f6:	1bb00613          	li	a2,443
    800016fa:	bfd9                	j	800016d0 <expand_compressed_instruction+0x3e>
            (is_load ? MATCH_LD : MATCH_SD):
    800016fc:	668d                	lui	a3,0x3
    800016fe:	068d                	addi	a3,a3,3 # 3003 <_test_table_size+0x3002>
        bool is_load = INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins); 
    80001700:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001702:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001706:	0075d713          	srli	a4,a1,0x7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    8000170a:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000170c:	8b1d                	andi	a4,a4,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    8000170e:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001710:	2721                	addiw	a4,a4,8 # e008 <_test_table_size+0xe007>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) << 6 :
    80001712:	0055d613          	srli	a2,a1,0x5
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    80001716:	0606                	slli	a2,a2,0x1
    80001718:	0196161b          	slliw	a2,a2,0x19
    8000171c:	0e0005b7          	lui	a1,0xe000
    80001720:	8e6d                	and	a2,a2,a1
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    80001722:	45d1                	li	a1,20
    80001724:	c111                	beqz	a0,80001728 <expand_compressed_instruction+0x96>
    80001726:	459d                	li	a1,7
    }

}
    80001728:	60a2                	ld	ra,8(sp)
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    8000172a:	00f7171b          	slliw	a4,a4,0xf
    8000172e:	8ed1                	or	a3,a3,a2
    80001730:	8f55                	or	a4,a4,a3
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    80001732:	00b7953b          	sllw	a0,a5,a1
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    80001736:	8d59                	or	a0,a0,a4
}
    80001738:	0141                	addi	sp,sp,16
    8000173a:	8082                	ret
            (is_load ? MATCH_LD : MATCH_SD):
    8000173c:	6689                	lui	a3,0x2
    8000173e:	068d                	addi	a3,a3,3 # 2003 <_test_table_size+0x2002>
    80001740:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001742:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001746:	0075d713          	srli	a4,a1,0x7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    8000174a:	00a5d813          	srli	a6,a1,0xa
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    8000174e:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001750:	8b1d                	andi	a4,a4,7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001752:	00787813          	andi	a6,a6,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001756:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001758:	2721                	addiw	a4,a4,8
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    8000175a:	4601                	li	a2,0
    8000175c:	fc0803e3          	beqz	a6,80001722 <expand_compressed_instruction+0x90>
    80001760:	bf4d                	j	80001712 <expand_compressed_instruction+0x80>
            (is_load ? MATCH_LD : MATCH_SD):
    80001762:	668d                	lui	a3,0x3
    80001764:	02368693          	addi	a3,a3,35 # 3023 <_test_table_size+0x3022>
    80001768:	4501                	li	a0,0
    8000176a:	bf61                	j	80001702 <expand_compressed_instruction+0x70>
    8000176c:	6689                	lui	a3,0x2
    8000176e:	02368693          	addi	a3,a3,35 # 2023 <_test_table_size+0x2022>
    80001772:	4501                	li	a0,0
    80001774:	b7f9                	j	80001742 <expand_compressed_instruction+0xb0>

0000000080001776 <reset_state>:

extern void hshandler_entry();
extern void mhandler_entry();
extern void vshandler_entry();
    
void reset_state(){
    80001776:	1141                	addi	sp,sp,-16

    goto_priv(PRIV_M);
    80001778:	4511                	li	a0,4
void reset_state(){
    8000177a:	e406                	sd	ra,8(sp)
    goto_priv(PRIV_M);
    8000177c:	f98ff0ef          	jal	80000f14 <goto_priv>
    CSRW(mstatus, 0ULL);
    80001780:	30005073          	csrwi	mstatus,0
    //CSRW(mtvec, 0ULL);
    CSRW(medeleg, 0ULL);
    80001784:	30205073          	csrwi	medeleg,0
    CSRW(mideleg, 0ULL);
    80001788:	30305073          	csrwi	mideleg,0
    CSRW(mip, 0ULL);
    8000178c:	34405073          	csrwi	mip,0
    CSRW(mie, 0ULL);
    80001790:	30405073          	csrwi	mie,0
    //CSRW(mtime, 0ULL); 
    //CSRW(mtimecmp, 0ULL); 
    CSRW(mscratch, 0ULL);
    80001794:	34005073          	csrwi	mscratch,0
    CSRW(mepc, 0ULL);
    80001798:	34105073          	csrwi	mepc,0
    CSRW(mtval, 0ULL);
    8000179c:	34305073          	csrwi	mtval,0
    CSRW(CSR_MTINST, 0ULL);
    800017a0:	34a05073          	csrwi	0x34a,0
    CSRW(CSR_MTVAL2, 0ULL);
    800017a4:	34b05073          	csrwi	0x34b,0
    //what about pmp register?
    CSRW(sstatus, 0ULL);
    800017a8:	10005073          	csrwi	sstatus,0
    //CSRW(stvec, 0ULL);
    CSRW(sip, 0ULL);
    800017ac:	14405073          	csrwi	sip,0
    CSRW(sie, 0ULL);
    800017b0:	10405073          	csrwi	sie,0
    CSRW(sscratch, 0ULL);
    800017b4:	14005073          	csrwi	sscratch,0
    CSRW(sepc, 0ULL);
    800017b8:	14105073          	csrwi	sepc,0
    CSRW(scause, 0ULL);
    800017bc:	14205073          	csrwi	scause,0
    CSRW(stval, 0ULL);
    800017c0:	14305073          	csrwi	stval,0
    CSRW(satp, 0ULL);
    800017c4:	18005073          	csrwi	satp,0
    CSRW(CSR_HSTATUS, 0ULL);
    800017c8:	60005073          	csrwi	hstatus,0
    CSRW(CSR_HIDELEG, 0ULL);
    800017cc:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG, 0ULL);
    800017d0:	60205073          	csrwi	hedeleg,0
    CSRW(CSR_HVIP, 0ULL);
    800017d4:	64505073          	csrwi	hvip,0
    CSRW(CSR_HIP, 0ULL);
    800017d8:	64405073          	csrwi	hip,0
    CSRW(CSR_HIE, 0ULL);  
    800017dc:	60405073          	csrwi	hie,0
    CSRW(CSR_HTVAL, 0ULL);
    800017e0:	64305073          	csrwi	htval,0
    CSRW(CSR_HTINST, 0ULL);
    800017e4:	64a05073          	csrwi	htinst,0
    CSRW(CSR_HGATP, 0ULL);
    800017e8:	68005073          	csrwi	hgatp,0
    CSRW(CSR_VSSTATUS, 0ULL);
    800017ec:	20005073          	csrwi	vsstatus,0
    CSRW(CSR_VSIP, 0ULL);
    800017f0:	24405073          	csrwi	vsip,0
    CSRW(CSR_VSIE, 0ULL);
    800017f4:	20405073          	csrwi	vsie,0
    //CSRW(CSR_VSTVEC, 0ULL);
    CSRW(CSR_VSSCRATCH, 0ULL);
    800017f8:	24005073          	csrwi	vsscratch,0
    CSRW(CSR_VSEPC, 0ULL);
    800017fc:	24105073          	csrwi	vsepc,0
    CSRW(CSR_VSCAUSE, 0ULL);
    80001800:	24205073          	csrwi	vscause,0
    CSRW(CSR_VSTVAL, 0ULL);
    80001804:	24305073          	csrwi	vstval,0
    CSRW(CSR_VSATP, 0ULL);  
    80001808:	28005073          	csrwi	vsatp,0

    CSRW(mtvec, mhandler_entry);
    8000180c:	0002e797          	auipc	a5,0x2e
    80001810:	ef078793          	addi	a5,a5,-272 # 8002f6fc <mhandler_entry>
    80001814:	30579073          	csrw	mtvec,a5
    CSRS(medeleg, (1ULL << 8) | (1ULL << 10));
    80001818:	50000793          	li	a5,1280
    8000181c:	3027a073          	csrs	medeleg,a5
    // full access to physical memory to other modes
    CSRW(pmpcfg0, 0xf);
    80001820:	3a07d073          	csrwi	pmpcfg0,15
    CSRW(pmpaddr0, (uint64_t) -1);
    80001824:	57fd                	li	a5,-1
    80001826:	3b079073          	csrw	pmpaddr0,a5

    CSRW(stvec, hshandler_entry);
    8000182a:	0002e797          	auipc	a5,0x2e
    8000182e:	f1a78793          	addi	a5,a5,-230 # 8002f744 <hshandler_entry>
    80001832:	10579073          	csrw	stvec,a5
    CSRS(CSR_HEDELEG, (1ULL << 8));
    80001836:	10000793          	li	a5,256
    8000183a:	6027a073          	csrs	hedeleg,a5

    CSRW(CSR_VSTVEC, vshandler_entry);
    8000183e:	0002e797          	auipc	a5,0x2e
    80001842:	f4e78793          	addi	a5,a5,-178 # 8002f78c <vshandler_entry>
    80001846:	20579073          	csrw	vstvec,a5

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    8000184a:	20000713          	li	a4,512
    8000184e:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80001852:	40000793          	li	a5,1024
    80001856:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    8000185a:	20072073          	csrs	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    8000185e:	2007b073          	csrc	vsstatus,a5
// }



static inline void sfence(){
    asm volatile ("sfence.vma \n\t");
    80001862:	12000073          	sfence.vma
        ".insn r 0x73, 0x0, 0x31, x0, x0, x0\n\t"
        ::: "memory");
}

static inline void hfence_vvma() {
    asm volatile(
    80001866:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8000186a:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
}
    8000186e:	60a2                	ld	ra,8(sp)
    80001870:	0141                	addi	sp,sp,16
    80001872:	8082                	ret

0000000080001874 <random_m_instruction>:
#include <instructions.h> 
#include <csrs.h>

void random_m_instruction(){    

    int rand1=CSRR(CSR_TIME);  
    80001874:	c01027f3          	rdtime	a5
    int rand2=CSRR(CSR_CYCLE);    
    80001878:	c00026f3          	rdcycle	a3
    int num0=rand1+rand2;   
    int num=num0%10;
    8000187c:	66666737          	lui	a4,0x66666
    int num0=rand1+rand2;   
    80001880:	9fb5                	addw	a5,a5,a3
    int num=num0%10;
    80001882:	66770713          	addi	a4,a4,1639 # 66666667 <STACK_SIZE+0x66566667>
    80001886:	02e78733          	mul	a4,a5,a4
    8000188a:	41f7d69b          	sraiw	a3,a5,0x1f

    switch (num)    //注意负数
    8000188e:	4625                	li	a2,9
    int num=num0%10;
    80001890:	9709                	srai	a4,a4,0x22
    80001892:	9f15                	subw	a4,a4,a3
    80001894:	0027169b          	slliw	a3,a4,0x2
    80001898:	9f35                	addw	a4,a4,a3
    8000189a:	0017171b          	slliw	a4,a4,0x1
    8000189e:	9f99                	subw	a5,a5,a4
    switch (num)    //注意负数
    800018a0:	08f66a63          	bltu	a2,a5,80001934 <random_m_instruction+0xc0>
    800018a4:	02079713          	slli	a4,a5,0x20
    800018a8:	01e75793          	srli	a5,a4,0x1e
    800018ac:	0002f717          	auipc	a4,0x2f
    800018b0:	99470713          	addi	a4,a4,-1644 # 80030240 <__func__.0+0x20>
    800018b4:	97ba                	add	a5,a5,a4
    800018b6:	439c                	lw	a5,0(a5)
    800018b8:	97ba                	add	a5,a5,a4
    800018ba:	8782                	jr	a5
        break;
    case 7:
        printf("这是7号指令\n");
        break;
    case 8:
        printf("这是8号指令\n");
    800018bc:	00031517          	auipc	a0,0x31
    800018c0:	2ac50513          	addi	a0,a0,684 # 80032b68 <__func__.0+0x780>
    800018c4:	03d2d06f          	j	8002f100 <puts>
        break;
    case 9:
        printf("这是9号指令\n");
    800018c8:	00031517          	auipc	a0,0x31
    800018cc:	2b850513          	addi	a0,a0,696 # 80032b80 <__func__.0+0x798>
    800018d0:	0312d06f          	j	8002f100 <puts>
        printf("这是0号指令\n");
    800018d4:	00031517          	auipc	a0,0x31
    800018d8:	1d450513          	addi	a0,a0,468 # 80032aa8 <__func__.0+0x6c0>
    800018dc:	0252d06f          	j	8002f100 <puts>
        printf("这是1号指令\n");
    800018e0:	00031517          	auipc	a0,0x31
    800018e4:	1e050513          	addi	a0,a0,480 # 80032ac0 <__func__.0+0x6d8>
    800018e8:	0192d06f          	j	8002f100 <puts>
        printf("这是2号指令\n");
    800018ec:	00031517          	auipc	a0,0x31
    800018f0:	1ec50513          	addi	a0,a0,492 # 80032ad8 <__func__.0+0x6f0>
    800018f4:	00d2d06f          	j	8002f100 <puts>
        printf("这是3号指令\n");
    800018f8:	00031517          	auipc	a0,0x31
    800018fc:	1f850513          	addi	a0,a0,504 # 80032af0 <__func__.0+0x708>
    80001900:	0012d06f          	j	8002f100 <puts>
        printf("这是4号指令\n");
    80001904:	00031517          	auipc	a0,0x31
    80001908:	20450513          	addi	a0,a0,516 # 80032b08 <__func__.0+0x720>
    8000190c:	7f42d06f          	j	8002f100 <puts>
        printf("这是5号指令\n");
    80001910:	00031517          	auipc	a0,0x31
    80001914:	21050513          	addi	a0,a0,528 # 80032b20 <__func__.0+0x738>
    80001918:	7e82d06f          	j	8002f100 <puts>
        printf("这是6号指令\n");
    8000191c:	00031517          	auipc	a0,0x31
    80001920:	21c50513          	addi	a0,a0,540 # 80032b38 <__func__.0+0x750>
    80001924:	7dc2d06f          	j	8002f100 <puts>
        printf("这是7号指令\n");
    80001928:	00031517          	auipc	a0,0x31
    8000192c:	22850513          	addi	a0,a0,552 # 80032b50 <__func__.0+0x768>
    80001930:	7d02d06f          	j	8002f100 <puts>
        break;

    default:
        break;
    }
    80001934:	8082                	ret

0000000080001936 <check_xip_regs_1>:
#include <rvh_test.h>

bool check_xip_regs_1(){
    80001936:	7179                	addi	sp,sp,-48

    TEST_START();
    80001938:	0002f597          	auipc	a1,0x2f
    8000193c:	93058593          	addi	a1,a1,-1744 # 80030268 <__func__.3>
    80001940:	00031517          	auipc	a0,0x31
    80001944:	d8850513          	addi	a0,a0,-632 # 800326c8 <__func__.0+0x2e0>
bool check_xip_regs_1(){
    80001948:	f406                	sd	ra,40(sp)
    8000194a:	f022                	sd	s0,32(sp)
    8000194c:	ec26                	sd	s1,24(sp)
    8000194e:	e84a                	sd	s2,16(sp)
    80001950:	e44e                	sd	s3,8(sp)
    80001952:	e052                	sd	s4,0(sp)
    TEST_START();
    80001954:	3712d0ef          	jal	8002f4c4 <printf>
    80001958:	4529                	li	a0,10
    8000195a:	0592c0ef          	jal	8002e1b2 <putchar>

    CSRW(mideleg, 0);
    8000195e:	30305073          	csrwi	mideleg,0

    int64_t mtime_mask = ~((int64_t)0x80);

    CSRW(mideleg, (uint64_t)-1);
    80001962:	547d                	li	s0,-1
    80001964:	30341073          	csrw	mideleg,s0
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001968:	60341073          	csrw	hideleg,s0
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2002);
    8000196c:	244029f3          	csrr	s3,vsip
    80001970:	24441073          	csrw	vsip,s0
    80001974:	24402973          	csrr	s2,vsip
    80001978:	6489                	lui	s1,0x2
    8000197a:	00031617          	auipc	a2,0x31
    8000197e:	21e60613          	addi	a2,a2,542 # 80032b98 <__func__.0+0x7b0>
    80001982:	08c00593          	li	a1,140
    80001986:	00031517          	auipc	a0,0x31
    8000198a:	d5a50513          	addi	a0,a0,-678 # 800326e0 <__func__.0+0x2f8>
    8000198e:	0489                	addi	s1,s1,2 # 2002 <_test_table_size+0x2001>
    80001990:	3352d0ef          	jal	8002f4c4 <printf>
    80001994:	10990f63          	beq	s2,s1,80001ab2 <check_xip_regs_1+0x17c>
    80001998:	00031597          	auipc	a1,0x31
    8000199c:	d2058593          	addi	a1,a1,-736 # 800326b8 <__func__.0+0x2d0>
    800019a0:	00031517          	auipc	a0,0x31
    800019a4:	d5850513          	addi	a0,a0,-680 # 800326f8 <__func__.0+0x310>
    800019a8:	31d2d0ef          	jal	8002f4c4 <printf>
    800019ac:	00031517          	auipc	a0,0x31
    800019b0:	d5450513          	addi	a0,a0,-684 # 80032700 <__func__.0+0x318>
    800019b4:	3112d0ef          	jal	8002f4c4 <printf>
    800019b8:	86a6                	mv	a3,s1
    800019ba:	864a                	mv	a2,s2
    800019bc:	85a2                	mv	a1,s0
    800019be:	00031517          	auipc	a0,0x31
    800019c2:	d4a50513          	addi	a0,a0,-694 # 80032708 <__func__.0+0x320>
    800019c6:	2ff2d0ef          	jal	8002f4c4 <printf>
    800019ca:	02900513          	li	a0,41
    800019ce:	7e42c0ef          	jal	8002e1b2 <putchar>
    800019d2:	4529                	li	a0,10
    800019d4:	7de2c0ef          	jal	8002e1b2 <putchar>
    800019d8:	4a01                	li	s4,0
    800019da:	24499073          	csrw	vsip,s3
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    800019de:	204029f3          	csrr	s3,vsie
    800019e2:	54fd                	li	s1,-1
    800019e4:	20449073          	csrw	vsie,s1
    800019e8:	20402973          	csrr	s2,vsie
    800019ec:	6409                	lui	s0,0x2
    800019ee:	00031617          	auipc	a2,0x31
    800019f2:	1b260613          	addi	a2,a2,434 # 80032ba0 <__func__.0+0x7b8>
    800019f6:	08c00593          	li	a1,140
    800019fa:	00031517          	auipc	a0,0x31
    800019fe:	ce650513          	addi	a0,a0,-794 # 800326e0 <__func__.0+0x2f8>
    80001a02:	22240413          	addi	s0,s0,546 # 2222 <_test_table_size+0x2221>
    80001a06:	2bf2d0ef          	jal	8002f4c4 <printf>
    80001a0a:	06890d63          	beq	s2,s0,80001a84 <check_xip_regs_1+0x14e>
    80001a0e:	00031597          	auipc	a1,0x31
    80001a12:	caa58593          	addi	a1,a1,-854 # 800326b8 <__func__.0+0x2d0>
    80001a16:	00031517          	auipc	a0,0x31
    80001a1a:	ce250513          	addi	a0,a0,-798 # 800326f8 <__func__.0+0x310>
    80001a1e:	2a72d0ef          	jal	8002f4c4 <printf>
    80001a22:	00031517          	auipc	a0,0x31
    80001a26:	cde50513          	addi	a0,a0,-802 # 80032700 <__func__.0+0x318>
    80001a2a:	29b2d0ef          	jal	8002f4c4 <printf>
    80001a2e:	86a2                	mv	a3,s0
    80001a30:	864a                	mv	a2,s2
    80001a32:	85a6                	mv	a1,s1
    80001a34:	00031517          	auipc	a0,0x31
    80001a38:	cd450513          	addi	a0,a0,-812 # 80032708 <__func__.0+0x320>
    80001a3c:	2892d0ef          	jal	8002f4c4 <printf>
    80001a40:	02900513          	li	a0,41
    80001a44:	76e2c0ef          	jal	8002e1b2 <putchar>
    80001a48:	4529                	li	a0,10
    80001a4a:	7682c0ef          	jal	8002e1b2 <putchar>
    80001a4e:	20499073          	csrw	vsie,s3
    80001a52:	4401                	li	s0,0
    
    TEST_END();
    80001a54:	00031597          	auipc	a1,0x31
    80001a58:	c6458593          	addi	a1,a1,-924 # 800326b8 <__func__.0+0x2d0>
    80001a5c:	00031517          	auipc	a0,0x31
    80001a60:	d0450513          	addi	a0,a0,-764 # 80032760 <__func__.0+0x378>
    80001a64:	2612d0ef          	jal	8002f4c4 <printf>
    80001a68:	4511                	li	a0,4
    80001a6a:	caaff0ef          	jal	80000f14 <goto_priv>
    80001a6e:	d09ff0ef          	jal	80001776 <reset_state>
}
    80001a72:	70a2                	ld	ra,40(sp)
    80001a74:	8522                	mv	a0,s0
    80001a76:	7402                	ld	s0,32(sp)
    80001a78:	64e2                	ld	s1,24(sp)
    80001a7a:	6942                	ld	s2,16(sp)
    80001a7c:	69a2                	ld	s3,8(sp)
    80001a7e:	6a02                	ld	s4,0(sp)
    80001a80:	6145                	addi	sp,sp,48
    80001a82:	8082                	ret
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    80001a84:	00031597          	auipc	a1,0x31
    80001a88:	c2458593          	addi	a1,a1,-988 # 800326a8 <__func__.0+0x2c0>
    80001a8c:	00031517          	auipc	a0,0x31
    80001a90:	c6c50513          	addi	a0,a0,-916 # 800326f8 <__func__.0+0x310>
    80001a94:	2312d0ef          	jal	8002f4c4 <printf>
    80001a98:	4529                	li	a0,10
    80001a9a:	7182c0ef          	jal	8002e1b2 <putchar>
    80001a9e:	fa0a08e3          	beqz	s4,80001a4e <check_xip_regs_1+0x118>
    80001aa2:	20499073          	csrw	vsie,s3
    80001aa6:	4405                	li	s0,1
    TEST_END();
    80001aa8:	00031597          	auipc	a1,0x31
    80001aac:	c0058593          	addi	a1,a1,-1024 # 800326a8 <__func__.0+0x2c0>
    80001ab0:	b775                	j	80001a5c <check_xip_regs_1+0x126>
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2002);
    80001ab2:	00031597          	auipc	a1,0x31
    80001ab6:	bf658593          	addi	a1,a1,-1034 # 800326a8 <__func__.0+0x2c0>
    80001aba:	00031517          	auipc	a0,0x31
    80001abe:	c3e50513          	addi	a0,a0,-962 # 800326f8 <__func__.0+0x310>
    80001ac2:	2032d0ef          	jal	8002f4c4 <printf>
    80001ac6:	4529                	li	a0,10
    80001ac8:	6ea2c0ef          	jal	8002e1b2 <putchar>
    80001acc:	4a05                	li	s4,1
    80001ace:	b731                	j	800019da <check_xip_regs_1+0xa4>

0000000080001ad0 <check_xip_regs_2>:

bool check_xip_regs_2(){
    80001ad0:	1101                	addi	sp,sp,-32

    TEST_START();
    80001ad2:	0002e597          	auipc	a1,0x2e
    80001ad6:	7ae58593          	addi	a1,a1,1966 # 80030280 <__func__.2>
    80001ada:	00031517          	auipc	a0,0x31
    80001ade:	bee50513          	addi	a0,a0,-1042 # 800326c8 <__func__.0+0x2e0>
bool check_xip_regs_2(){
    80001ae2:	ec06                	sd	ra,24(sp)
    80001ae4:	e822                	sd	s0,16(sp)
    80001ae6:	e426                	sd	s1,8(sp)
    80001ae8:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001aea:	1db2d0ef          	jal	8002f4c4 <printf>
    80001aee:	4529                	li	a0,10
    80001af0:	6c22c0ef          	jal	8002e1b2 <putchar>

    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80001af4:	57fd                	li	a5,-1
    80001af6:	03f79713          	slli	a4,a5,0x3f
    80001afa:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    80001afe:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001b02:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    80001b06:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001b0a:	64402473          	csrr	s0,hip
    80001b0e:	00031617          	auipc	a2,0x31
    80001b12:	09a60613          	addi	a2,a2,154 # 80032ba8 <__func__.0+0x7c0>
    80001b16:	08c00593          	li	a1,140
    80001b1a:	00031517          	auipc	a0,0x31
    80001b1e:	bc650513          	addi	a0,a0,-1082 # 800326e0 <__func__.0+0x2f8>
    80001b22:	4491                	li	s1,4
    80001b24:	1a12d0ef          	jal	8002f4c4 <printf>
    80001b28:	46940763          	beq	s0,s1,80001f96 <check_xip_regs_2+0x4c6>
    80001b2c:	00031597          	auipc	a1,0x31
    80001b30:	b8c58593          	addi	a1,a1,-1140 # 800326b8 <__func__.0+0x2d0>
    80001b34:	00031517          	auipc	a0,0x31
    80001b38:	bc450513          	addi	a0,a0,-1084 # 800326f8 <__func__.0+0x310>
    80001b3c:	1892d0ef          	jal	8002f4c4 <printf>
    80001b40:	00031517          	auipc	a0,0x31
    80001b44:	bc050513          	addi	a0,a0,-1088 # 80032700 <__func__.0+0x318>
    80001b48:	17d2d0ef          	jal	8002f4c4 <printf>
    80001b4c:	8622                	mv	a2,s0
    80001b4e:	86a6                	mv	a3,s1
    80001b50:	02d00593          	li	a1,45
    80001b54:	00031517          	auipc	a0,0x31
    80001b58:	05c50513          	addi	a0,a0,92 # 80032bb0 <__func__.0+0x7c8>
    80001b5c:	1692d0ef          	jal	8002f4c4 <printf>
    80001b60:	02900513          	li	a0,41
    80001b64:	64e2c0ef          	jal	8002e1b2 <putchar>
    80001b68:	4529                	li	a0,10
    80001b6a:	6482c0ef          	jal	8002e1b2 <putchar>
    80001b6e:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x2222);    
    80001b70:	14402973          	csrr	s2,sip
    80001b74:	6489                	lui	s1,0x2
    80001b76:	00031617          	auipc	a2,0x31
    80001b7a:	05260613          	addi	a2,a2,82 # 80032bc8 <__func__.0+0x7e0>
    80001b7e:	08c00593          	li	a1,140
    80001b82:	00031517          	auipc	a0,0x31
    80001b86:	b5e50513          	addi	a0,a0,-1186 # 800326e0 <__func__.0+0x2f8>
    80001b8a:	22248493          	addi	s1,s1,546 # 2222 <_test_table_size+0x2221>
    80001b8e:	1372d0ef          	jal	8002f4c4 <printf>
    80001b92:	3a990863          	beq	s2,s1,80001f42 <check_xip_regs_2+0x472>
    80001b96:	00031597          	auipc	a1,0x31
    80001b9a:	b2258593          	addi	a1,a1,-1246 # 800326b8 <__func__.0+0x2d0>
    80001b9e:	00031517          	auipc	a0,0x31
    80001ba2:	b5a50513          	addi	a0,a0,-1190 # 800326f8 <__func__.0+0x310>
    80001ba6:	11f2d0ef          	jal	8002f4c4 <printf>
    80001baa:	00031517          	auipc	a0,0x31
    80001bae:	b5650513          	addi	a0,a0,-1194 # 80032700 <__func__.0+0x318>
    80001bb2:	1132d0ef          	jal	8002f4c4 <printf>
    80001bb6:	86a6                	mv	a3,s1
    80001bb8:	864a                	mv	a2,s2
    80001bba:	02d00593          	li	a1,45
    80001bbe:	00031517          	auipc	a0,0x31
    80001bc2:	ff250513          	addi	a0,a0,-14 # 80032bb0 <__func__.0+0x7c8>
    80001bc6:	0ff2d0ef          	jal	8002f4c4 <printf>
    80001bca:	02900513          	li	a0,41
    80001bce:	5e42c0ef          	jal	8002e1b2 <putchar>
    80001bd2:	4529                	li	a0,10
    80001bd4:	5de2c0ef          	jal	8002e1b2 <putchar>
    80001bd8:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2002);
    80001bda:	24402973          	csrr	s2,vsip
    80001bde:	6489                	lui	s1,0x2
    80001be0:	00031617          	auipc	a2,0x31
    80001be4:	fb860613          	addi	a2,a2,-72 # 80032b98 <__func__.0+0x7b0>
    80001be8:	08c00593          	li	a1,140
    80001bec:	00031517          	auipc	a0,0x31
    80001bf0:	af450513          	addi	a0,a0,-1292 # 800326e0 <__func__.0+0x2f8>
    80001bf4:	0489                	addi	s1,s1,2 # 2002 <_test_table_size+0x2001>
    80001bf6:	0cf2d0ef          	jal	8002f4c4 <printf>
    80001bfa:	38990063          	beq	s2,s1,80001f7a <check_xip_regs_2+0x4aa>
    80001bfe:	00031597          	auipc	a1,0x31
    80001c02:	aba58593          	addi	a1,a1,-1350 # 800326b8 <__func__.0+0x2d0>
    80001c06:	00031517          	auipc	a0,0x31
    80001c0a:	af250513          	addi	a0,a0,-1294 # 800326f8 <__func__.0+0x310>
    80001c0e:	0b72d0ef          	jal	8002f4c4 <printf>
    80001c12:	00031517          	auipc	a0,0x31
    80001c16:	aee50513          	addi	a0,a0,-1298 # 80032700 <__func__.0+0x318>
    80001c1a:	0ab2d0ef          	jal	8002f4c4 <printf>
    80001c1e:	86a6                	mv	a3,s1
    80001c20:	864a                	mv	a2,s2
    80001c22:	02d00593          	li	a1,45
    80001c26:	00031517          	auipc	a0,0x31
    80001c2a:	f8a50513          	addi	a0,a0,-118 # 80032bb0 <__func__.0+0x7c8>
    80001c2e:	0972d0ef          	jal	8002f4c4 <printf>
    80001c32:	02900513          	li	a0,41
    80001c36:	57c2c0ef          	jal	8002e1b2 <putchar>
    80001c3a:	4529                	li	a0,10
    80001c3c:	5762c0ef          	jal	8002e1b2 <putchar>
    80001c40:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001c42:	4509                	li	a0,2
    80001c44:	ad0ff0ef          	jal	80000f14 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2002);
    80001c48:	14402973          	csrr	s2,sip
    80001c4c:	6489                	lui	s1,0x2
    80001c4e:	00031617          	auipc	a2,0x31
    80001c52:	f8260613          	addi	a2,a2,-126 # 80032bd0 <__func__.0+0x7e8>
    80001c56:	08c00593          	li	a1,140
    80001c5a:	00031517          	auipc	a0,0x31
    80001c5e:	a8650513          	addi	a0,a0,-1402 # 800326e0 <__func__.0+0x2f8>
    80001c62:	0489                	addi	s1,s1,2 # 2002 <_test_table_size+0x2001>
    80001c64:	0612d0ef          	jal	8002f4c4 <printf>
    80001c68:	2e990b63          	beq	s2,s1,80001f5e <check_xip_regs_2+0x48e>
    80001c6c:	00031597          	auipc	a1,0x31
    80001c70:	a4c58593          	addi	a1,a1,-1460 # 800326b8 <__func__.0+0x2d0>
    80001c74:	00031517          	auipc	a0,0x31
    80001c78:	a8450513          	addi	a0,a0,-1404 # 800326f8 <__func__.0+0x310>
    80001c7c:	0492d0ef          	jal	8002f4c4 <printf>
    80001c80:	00031517          	auipc	a0,0x31
    80001c84:	a8050513          	addi	a0,a0,-1408 # 80032700 <__func__.0+0x318>
    80001c88:	03d2d0ef          	jal	8002f4c4 <printf>
    80001c8c:	86a6                	mv	a3,s1
    80001c8e:	864a                	mv	a2,s2
    80001c90:	02d00593          	li	a1,45
    80001c94:	00031517          	auipc	a0,0x31
    80001c98:	f1c50513          	addi	a0,a0,-228 # 80032bb0 <__func__.0+0x7c8>
    80001c9c:	0292d0ef          	jal	8002f4c4 <printf>
    80001ca0:	02900513          	li	a0,41
    80001ca4:	50e2c0ef          	jal	8002e1b2 <putchar>
    80001ca8:	4529                	li	a0,10
    80001caa:	5082c0ef          	jal	8002e1b2 <putchar>
    80001cae:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80001cb0:	4511                	li	a0,4
    80001cb2:	a62ff0ef          	jal	80000f14 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    80001cb6:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001cba:	644024f3          	csrr	s1,hip
    80001cbe:	00031617          	auipc	a2,0x31
    80001cc2:	eea60613          	addi	a2,a2,-278 # 80032ba8 <__func__.0+0x7c0>
    80001cc6:	08c00593          	li	a1,140
    80001cca:	00031517          	auipc	a0,0x31
    80001cce:	a1650513          	addi	a0,a0,-1514 # 800326e0 <__func__.0+0x2f8>
    80001cd2:	7f22d0ef          	jal	8002f4c4 <printf>
    80001cd6:	1a048663          	beqz	s1,80001e82 <check_xip_regs_2+0x3b2>
    80001cda:	00031597          	auipc	a1,0x31
    80001cde:	9de58593          	addi	a1,a1,-1570 # 800326b8 <__func__.0+0x2d0>
    80001ce2:	00031517          	auipc	a0,0x31
    80001ce6:	a1650513          	addi	a0,a0,-1514 # 800326f8 <__func__.0+0x310>
    80001cea:	7da2d0ef          	jal	8002f4c4 <printf>
    80001cee:	00031517          	auipc	a0,0x31
    80001cf2:	a1250513          	addi	a0,a0,-1518 # 80032700 <__func__.0+0x318>
    80001cf6:	7ce2d0ef          	jal	8002f4c4 <printf>
    80001cfa:	8626                	mv	a2,s1
    80001cfc:	4681                	li	a3,0
    80001cfe:	02d00593          	li	a1,45
    80001d02:	00031517          	auipc	a0,0x31
    80001d06:	eae50513          	addi	a0,a0,-338 # 80032bb0 <__func__.0+0x7c8>
    80001d0a:	7ba2d0ef          	jal	8002f4c4 <printf>
    80001d0e:	02900513          	li	a0,41
    80001d12:	4a02c0ef          	jal	8002e1b2 <putchar>
    80001d16:	4529                	li	a0,10
    80001d18:	49a2c0ef          	jal	8002e1b2 <putchar>
    80001d1c:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001d1e:	144024f3          	csrr	s1,sip
    80001d22:	00031617          	auipc	a2,0x31
    80001d26:	ea660613          	addi	a2,a2,-346 # 80032bc8 <__func__.0+0x7e0>
    80001d2a:	08c00593          	li	a1,140
    80001d2e:	00031517          	auipc	a0,0x31
    80001d32:	9b250513          	addi	a0,a0,-1614 # 800326e0 <__func__.0+0x2f8>
    80001d36:	78e2d0ef          	jal	8002f4c4 <printf>
    80001d3a:	18048163          	beqz	s1,80001ebc <check_xip_regs_2+0x3ec>
    80001d3e:	00031597          	auipc	a1,0x31
    80001d42:	97a58593          	addi	a1,a1,-1670 # 800326b8 <__func__.0+0x2d0>
    80001d46:	00031517          	auipc	a0,0x31
    80001d4a:	9b250513          	addi	a0,a0,-1614 # 800326f8 <__func__.0+0x310>
    80001d4e:	7762d0ef          	jal	8002f4c4 <printf>
    80001d52:	00031517          	auipc	a0,0x31
    80001d56:	9ae50513          	addi	a0,a0,-1618 # 80032700 <__func__.0+0x318>
    80001d5a:	76a2d0ef          	jal	8002f4c4 <printf>
    80001d5e:	8626                	mv	a2,s1
    80001d60:	4681                	li	a3,0
    80001d62:	02d00593          	li	a1,45
    80001d66:	00031517          	auipc	a0,0x31
    80001d6a:	e4a50513          	addi	a0,a0,-438 # 80032bb0 <__func__.0+0x7c8>
    80001d6e:	7562d0ef          	jal	8002f4c4 <printf>
    80001d72:	02900513          	li	a0,41
    80001d76:	43c2c0ef          	jal	8002e1b2 <putchar>
    80001d7a:	4529                	li	a0,10
    80001d7c:	4362c0ef          	jal	8002e1b2 <putchar>
    80001d80:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001d82:	244024f3          	csrr	s1,vsip
    80001d86:	00031617          	auipc	a2,0x31
    80001d8a:	e1260613          	addi	a2,a2,-494 # 80032b98 <__func__.0+0x7b0>
    80001d8e:	08c00593          	li	a1,140
    80001d92:	00031517          	auipc	a0,0x31
    80001d96:	94e50513          	addi	a0,a0,-1714 # 800326e0 <__func__.0+0x2f8>
    80001d9a:	72a2d0ef          	jal	8002f4c4 <printf>
    80001d9e:	14048c63          	beqz	s1,80001ef6 <check_xip_regs_2+0x426>
    80001da2:	00031597          	auipc	a1,0x31
    80001da6:	91658593          	addi	a1,a1,-1770 # 800326b8 <__func__.0+0x2d0>
    80001daa:	00031517          	auipc	a0,0x31
    80001dae:	94e50513          	addi	a0,a0,-1714 # 800326f8 <__func__.0+0x310>
    80001db2:	7122d0ef          	jal	8002f4c4 <printf>
    80001db6:	00031517          	auipc	a0,0x31
    80001dba:	94a50513          	addi	a0,a0,-1718 # 80032700 <__func__.0+0x318>
    80001dbe:	7062d0ef          	jal	8002f4c4 <printf>
    80001dc2:	8626                	mv	a2,s1
    80001dc4:	4681                	li	a3,0
    80001dc6:	02d00593          	li	a1,45
    80001dca:	00031517          	auipc	a0,0x31
    80001dce:	de650513          	addi	a0,a0,-538 # 80032bb0 <__func__.0+0x7c8>
    80001dd2:	6f22d0ef          	jal	8002f4c4 <printf>
    80001dd6:	02900513          	li	a0,41
    80001dda:	3d82c0ef          	jal	8002e1b2 <putchar>
    80001dde:	4529                	li	a0,10
    80001de0:	3d22c0ef          	jal	8002e1b2 <putchar>
    80001de4:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001de6:	4509                	li	a0,2
    80001de8:	92cff0ef          	jal	80000f14 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001dec:	144024f3          	csrr	s1,sip
    80001df0:	00031617          	auipc	a2,0x31
    80001df4:	de060613          	addi	a2,a2,-544 # 80032bd0 <__func__.0+0x7e8>
    80001df8:	08c00593          	li	a1,140
    80001dfc:	00031517          	auipc	a0,0x31
    80001e00:	8e450513          	addi	a0,a0,-1820 # 800326e0 <__func__.0+0x2f8>
    80001e04:	6c02d0ef          	jal	8002f4c4 <printf>
    80001e08:	10048563          	beqz	s1,80001f12 <check_xip_regs_2+0x442>
    80001e0c:	00031597          	auipc	a1,0x31
    80001e10:	8ac58593          	addi	a1,a1,-1876 # 800326b8 <__func__.0+0x2d0>
    80001e14:	00031517          	auipc	a0,0x31
    80001e18:	8e450513          	addi	a0,a0,-1820 # 800326f8 <__func__.0+0x310>
    80001e1c:	6a82d0ef          	jal	8002f4c4 <printf>
    80001e20:	00031517          	auipc	a0,0x31
    80001e24:	8e050513          	addi	a0,a0,-1824 # 80032700 <__func__.0+0x318>
    80001e28:	69c2d0ef          	jal	8002f4c4 <printf>
    80001e2c:	8626                	mv	a2,s1
    80001e2e:	4681                	li	a3,0
    80001e30:	02d00593          	li	a1,45
    80001e34:	00031517          	auipc	a0,0x31
    80001e38:	d7c50513          	addi	a0,a0,-644 # 80032bb0 <__func__.0+0x7c8>
    80001e3c:	6882d0ef          	jal	8002f4c4 <printf>
    80001e40:	02900513          	li	a0,41
    80001e44:	36e2c0ef          	jal	8002e1b2 <putchar>
    80001e48:	4529                	li	a0,10
    80001e4a:	3682c0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);   
    80001e4e:	4511                	li	a0,4
    80001e50:	8c4ff0ef          	jal	80000f14 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001e54:	4401                	li	s0,0

    TEST_END();
    80001e56:	00031597          	auipc	a1,0x31
    80001e5a:	86258593          	addi	a1,a1,-1950 # 800326b8 <__func__.0+0x2d0>
    80001e5e:	00031517          	auipc	a0,0x31
    80001e62:	90250513          	addi	a0,a0,-1790 # 80032760 <__func__.0+0x378>
    80001e66:	65e2d0ef          	jal	8002f4c4 <printf>
    80001e6a:	4511                	li	a0,4
    80001e6c:	8a8ff0ef          	jal	80000f14 <goto_priv>
    80001e70:	907ff0ef          	jal	80001776 <reset_state>
}
    80001e74:	60e2                	ld	ra,24(sp)
    80001e76:	8522                	mv	a0,s0
    80001e78:	6442                	ld	s0,16(sp)
    80001e7a:	64a2                	ld	s1,8(sp)
    80001e7c:	6902                	ld	s2,0(sp)
    80001e7e:	6105                	addi	sp,sp,32
    80001e80:	8082                	ret
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001e82:	00031597          	auipc	a1,0x31
    80001e86:	82658593          	addi	a1,a1,-2010 # 800326a8 <__func__.0+0x2c0>
    80001e8a:	00031517          	auipc	a0,0x31
    80001e8e:	86e50513          	addi	a0,a0,-1938 # 800326f8 <__func__.0+0x310>
    80001e92:	6322d0ef          	jal	8002f4c4 <printf>
    80001e96:	4529                	li	a0,10
    80001e98:	31a2c0ef          	jal	8002e1b2 <putchar>
    check_csr_rd("sip", sip, 0x0);
    80001e9c:	144024f3          	csrr	s1,sip
    80001ea0:	00031617          	auipc	a2,0x31
    80001ea4:	d2860613          	addi	a2,a2,-728 # 80032bc8 <__func__.0+0x7e0>
    80001ea8:	08c00593          	li	a1,140
    80001eac:	00031517          	auipc	a0,0x31
    80001eb0:	83450513          	addi	a0,a0,-1996 # 800326e0 <__func__.0+0x2f8>
    80001eb4:	6102d0ef          	jal	8002f4c4 <printf>
    80001eb8:	e80493e3          	bnez	s1,80001d3e <check_xip_regs_2+0x26e>
    80001ebc:	00030597          	auipc	a1,0x30
    80001ec0:	7ec58593          	addi	a1,a1,2028 # 800326a8 <__func__.0+0x2c0>
    80001ec4:	00031517          	auipc	a0,0x31
    80001ec8:	83450513          	addi	a0,a0,-1996 # 800326f8 <__func__.0+0x310>
    80001ecc:	5f82d0ef          	jal	8002f4c4 <printf>
    80001ed0:	4529                	li	a0,10
    80001ed2:	2e02c0ef          	jal	8002e1b2 <putchar>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001ed6:	244024f3          	csrr	s1,vsip
    80001eda:	00031617          	auipc	a2,0x31
    80001ede:	cbe60613          	addi	a2,a2,-834 # 80032b98 <__func__.0+0x7b0>
    80001ee2:	08c00593          	li	a1,140
    80001ee6:	00030517          	auipc	a0,0x30
    80001eea:	7fa50513          	addi	a0,a0,2042 # 800326e0 <__func__.0+0x2f8>
    80001eee:	5d62d0ef          	jal	8002f4c4 <printf>
    80001ef2:	ea0498e3          	bnez	s1,80001da2 <check_xip_regs_2+0x2d2>
    80001ef6:	00030597          	auipc	a1,0x30
    80001efa:	7b258593          	addi	a1,a1,1970 # 800326a8 <__func__.0+0x2c0>
    80001efe:	00030517          	auipc	a0,0x30
    80001f02:	7fa50513          	addi	a0,a0,2042 # 800326f8 <__func__.0+0x310>
    80001f06:	5be2d0ef          	jal	8002f4c4 <printf>
    80001f0a:	4529                	li	a0,10
    80001f0c:	2a62c0ef          	jal	8002e1b2 <putchar>
    80001f10:	bdd9                	j	80001de6 <check_xip_regs_2+0x316>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001f12:	00030597          	auipc	a1,0x30
    80001f16:	79658593          	addi	a1,a1,1942 # 800326a8 <__func__.0+0x2c0>
    80001f1a:	00030517          	auipc	a0,0x30
    80001f1e:	7de50513          	addi	a0,a0,2014 # 800326f8 <__func__.0+0x310>
    80001f22:	5a22d0ef          	jal	8002f4c4 <printf>
    80001f26:	4529                	li	a0,10
    80001f28:	28a2c0ef          	jal	8002e1b2 <putchar>
    80001f2c:	f20401e3          	beqz	s0,80001e4e <check_xip_regs_2+0x37e>
    goto_priv(PRIV_M);   
    80001f30:	4511                	li	a0,4
    80001f32:	fe3fe0ef          	jal	80000f14 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001f36:	4405                	li	s0,1
    TEST_END();
    80001f38:	00030597          	auipc	a1,0x30
    80001f3c:	77058593          	addi	a1,a1,1904 # 800326a8 <__func__.0+0x2c0>
    80001f40:	bf39                	j	80001e5e <check_xip_regs_2+0x38e>
    check_csr_rd("sip", sip, 0x2222);    
    80001f42:	00030597          	auipc	a1,0x30
    80001f46:	76658593          	addi	a1,a1,1894 # 800326a8 <__func__.0+0x2c0>
    80001f4a:	00030517          	auipc	a0,0x30
    80001f4e:	7ae50513          	addi	a0,a0,1966 # 800326f8 <__func__.0+0x310>
    80001f52:	5722d0ef          	jal	8002f4c4 <printf>
    80001f56:	4529                	li	a0,10
    80001f58:	25a2c0ef          	jal	8002e1b2 <putchar>
    80001f5c:	b9bd                	j	80001bda <check_xip_regs_2+0x10a>
    check_csr_rd("sip (vs perspective)", sip, 0x2002);
    80001f5e:	00030597          	auipc	a1,0x30
    80001f62:	74a58593          	addi	a1,a1,1866 # 800326a8 <__func__.0+0x2c0>
    80001f66:	00030517          	auipc	a0,0x30
    80001f6a:	79250513          	addi	a0,a0,1938 # 800326f8 <__func__.0+0x310>
    80001f6e:	5562d0ef          	jal	8002f4c4 <printf>
    80001f72:	4529                	li	a0,10
    80001f74:	23e2c0ef          	jal	8002e1b2 <putchar>
    80001f78:	bb25                	j	80001cb0 <check_xip_regs_2+0x1e0>
    check_csr_rd("vsip", CSR_VSIP, 0x2002);
    80001f7a:	00030597          	auipc	a1,0x30
    80001f7e:	72e58593          	addi	a1,a1,1838 # 800326a8 <__func__.0+0x2c0>
    80001f82:	00030517          	auipc	a0,0x30
    80001f86:	77650513          	addi	a0,a0,1910 # 800326f8 <__func__.0+0x310>
    80001f8a:	53a2d0ef          	jal	8002f4c4 <printf>
    80001f8e:	4529                	li	a0,10
    80001f90:	2222c0ef          	jal	8002e1b2 <putchar>
    80001f94:	b17d                	j	80001c42 <check_xip_regs_2+0x172>
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001f96:	00030597          	auipc	a1,0x30
    80001f9a:	71258593          	addi	a1,a1,1810 # 800326a8 <__func__.0+0x2c0>
    80001f9e:	00030517          	auipc	a0,0x30
    80001fa2:	75a50513          	addi	a0,a0,1882 # 800326f8 <__func__.0+0x310>
    80001fa6:	51e2d0ef          	jal	8002f4c4 <printf>
    80001faa:	4529                	li	a0,10
    80001fac:	2062c0ef          	jal	8002e1b2 <putchar>
    80001fb0:	4405                	li	s0,1
    80001fb2:	be7d                	j	80001b70 <check_xip_regs_2+0xa0>

0000000080001fb4 <check_xip_regs_3>:

bool check_xip_regs_3(){
    80001fb4:	1101                	addi	sp,sp,-32

    TEST_START();
    80001fb6:	0002e597          	auipc	a1,0x2e
    80001fba:	2e258593          	addi	a1,a1,738 # 80030298 <__func__.1>
    80001fbe:	00030517          	auipc	a0,0x30
    80001fc2:	70a50513          	addi	a0,a0,1802 # 800326c8 <__func__.0+0x2e0>
bool check_xip_regs_3(){
    80001fc6:	ec06                	sd	ra,24(sp)
    80001fc8:	e822                	sd	s0,16(sp)
    80001fca:	e426                	sd	s1,8(sp)
    80001fcc:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001fce:	4f62d0ef          	jal	8002f4c4 <printf>
    80001fd2:	4529                	li	a0,10
    80001fd4:	1de2c0ef          	jal	8002e1b2 <putchar>

    CSRW(mideleg, (uint64_t)-1);
    80001fd8:	57fd                	li	a5,-1
    80001fda:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001fde:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)-1);
    80001fe2:	64579073          	csrw	hvip,a5
    check_csr_rd("hvip", CSR_HVIP, 0x2444);
    80001fe6:	645024f3          	csrr	s1,hvip
    80001fea:	6409                	lui	s0,0x2
    80001fec:	00031617          	auipc	a2,0x31
    80001ff0:	bfc60613          	addi	a2,a2,-1028 # 80032be8 <__func__.0+0x800>
    80001ff4:	08c00593          	li	a1,140
    80001ff8:	00030517          	auipc	a0,0x30
    80001ffc:	6e850513          	addi	a0,a0,1768 # 800326e0 <__func__.0+0x2f8>
    80002000:	44440413          	addi	s0,s0,1092 # 2444 <_test_table_size+0x2443>
    80002004:	4c02d0ef          	jal	8002f4c4 <printf>
    80002008:	4a848663          	beq	s1,s0,800024b4 <check_xip_regs_3+0x500>
    8000200c:	00030597          	auipc	a1,0x30
    80002010:	6ac58593          	addi	a1,a1,1708 # 800326b8 <__func__.0+0x2d0>
    80002014:	00030517          	auipc	a0,0x30
    80002018:	6e450513          	addi	a0,a0,1764 # 800326f8 <__func__.0+0x310>
    8000201c:	4a82d0ef          	jal	8002f4c4 <printf>
    80002020:	00030517          	auipc	a0,0x30
    80002024:	6e050513          	addi	a0,a0,1760 # 80032700 <__func__.0+0x318>
    80002028:	49c2d0ef          	jal	8002f4c4 <printf>
    8000202c:	86a2                	mv	a3,s0
    8000202e:	8626                	mv	a2,s1
    80002030:	02d00593          	li	a1,45
    80002034:	00031517          	auipc	a0,0x31
    80002038:	b7c50513          	addi	a0,a0,-1156 # 80032bb0 <__func__.0+0x7c8>
    8000203c:	4882d0ef          	jal	8002f4c4 <printf>
    80002040:	02900513          	li	a0,41
    80002044:	16e2c0ef          	jal	8002e1b2 <putchar>
    80002048:	4529                	li	a0,10
    8000204a:	1682c0ef          	jal	8002e1b2 <putchar>
    8000204e:	4401                	li	s0,0
    check_csr_rd("hip", CSR_HIP, 0x444);
    80002050:	644024f3          	csrr	s1,hip
    80002054:	00031617          	auipc	a2,0x31
    80002058:	b5460613          	addi	a2,a2,-1196 # 80032ba8 <__func__.0+0x7c0>
    8000205c:	08c00593          	li	a1,140
    80002060:	00030517          	auipc	a0,0x30
    80002064:	68050513          	addi	a0,a0,1664 # 800326e0 <__func__.0+0x2f8>
    80002068:	44400913          	li	s2,1092
    8000206c:	4582d0ef          	jal	8002f4c4 <printf>
    80002070:	3f248863          	beq	s1,s2,80002460 <check_xip_regs_3+0x4ac>
    80002074:	00030597          	auipc	a1,0x30
    80002078:	64458593          	addi	a1,a1,1604 # 800326b8 <__func__.0+0x2d0>
    8000207c:	00030517          	auipc	a0,0x30
    80002080:	67c50513          	addi	a0,a0,1660 # 800326f8 <__func__.0+0x310>
    80002084:	4402d0ef          	jal	8002f4c4 <printf>
    80002088:	00030517          	auipc	a0,0x30
    8000208c:	67850513          	addi	a0,a0,1656 # 80032700 <__func__.0+0x318>
    80002090:	4342d0ef          	jal	8002f4c4 <printf>
    80002094:	86ca                	mv	a3,s2
    80002096:	8626                	mv	a2,s1
    80002098:	02d00593          	li	a1,45
    8000209c:	00031517          	auipc	a0,0x31
    800020a0:	b1450513          	addi	a0,a0,-1260 # 80032bb0 <__func__.0+0x7c8>
    800020a4:	4202d0ef          	jal	8002f4c4 <printf>
    800020a8:	02900513          	li	a0,41
    800020ac:	1062c0ef          	jal	8002e1b2 <putchar>
    800020b0:	4529                	li	a0,10
    800020b2:	1002c0ef          	jal	8002e1b2 <putchar>
    800020b6:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    800020b8:	144024f3          	csrr	s1,sip
    800020bc:	00031617          	auipc	a2,0x31
    800020c0:	b0c60613          	addi	a2,a2,-1268 # 80032bc8 <__func__.0+0x7e0>
    800020c4:	08c00593          	li	a1,140
    800020c8:	00030517          	auipc	a0,0x30
    800020cc:	61850513          	addi	a0,a0,1560 # 800326e0 <__func__.0+0x2f8>
    800020d0:	3f42d0ef          	jal	8002f4c4 <printf>
    800020d4:	2e048763          	beqz	s1,800023c2 <check_xip_regs_3+0x40e>
    800020d8:	00030597          	auipc	a1,0x30
    800020dc:	5e058593          	addi	a1,a1,1504 # 800326b8 <__func__.0+0x2d0>
    800020e0:	00030517          	auipc	a0,0x30
    800020e4:	61850513          	addi	a0,a0,1560 # 800326f8 <__func__.0+0x310>
    800020e8:	3dc2d0ef          	jal	8002f4c4 <printf>
    800020ec:	00030517          	auipc	a0,0x30
    800020f0:	61450513          	addi	a0,a0,1556 # 80032700 <__func__.0+0x318>
    800020f4:	3d02d0ef          	jal	8002f4c4 <printf>
    800020f8:	8626                	mv	a2,s1
    800020fa:	4681                	li	a3,0
    800020fc:	02d00593          	li	a1,45
    80002100:	00031517          	auipc	a0,0x31
    80002104:	ab050513          	addi	a0,a0,-1360 # 80032bb0 <__func__.0+0x7c8>
    80002108:	3bc2d0ef          	jal	8002f4c4 <printf>
    8000210c:	02900513          	li	a0,41
    80002110:	0a22c0ef          	jal	8002e1b2 <putchar>
    80002114:	4529                	li	a0,10
    80002116:	09c2c0ef          	jal	8002e1b2 <putchar>
    8000211a:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x444, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    8000211c:	244024f3          	csrr	s1,vsip
    80002120:	00031617          	auipc	a2,0x31
    80002124:	a7860613          	addi	a2,a2,-1416 # 80032b98 <__func__.0+0x7b0>
    80002128:	08c00593          	li	a1,140
    8000212c:	00030517          	auipc	a0,0x30
    80002130:	5b450513          	addi	a0,a0,1460 # 800326e0 <__func__.0+0x2f8>
    80002134:	22200913          	li	s2,546
    80002138:	38c2d0ef          	jal	8002f4c4 <printf>
    8000213c:	35248e63          	beq	s1,s2,80002498 <check_xip_regs_3+0x4e4>
    80002140:	00030597          	auipc	a1,0x30
    80002144:	57858593          	addi	a1,a1,1400 # 800326b8 <__func__.0+0x2d0>
    80002148:	00030517          	auipc	a0,0x30
    8000214c:	5b050513          	addi	a0,a0,1456 # 800326f8 <__func__.0+0x310>
    80002150:	3742d0ef          	jal	8002f4c4 <printf>
    80002154:	00030517          	auipc	a0,0x30
    80002158:	5ac50513          	addi	a0,a0,1452 # 80032700 <__func__.0+0x318>
    8000215c:	3682d0ef          	jal	8002f4c4 <printf>
    80002160:	86ca                	mv	a3,s2
    80002162:	8626                	mv	a2,s1
    80002164:	02d00593          	li	a1,45
    80002168:	00031517          	auipc	a0,0x31
    8000216c:	a4850513          	addi	a0,a0,-1464 # 80032bb0 <__func__.0+0x7c8>
    80002170:	3542d0ef          	jal	8002f4c4 <printf>
    80002174:	02900513          	li	a0,41
    80002178:	03a2c0ef          	jal	8002e1b2 <putchar>
    8000217c:	4529                	li	a0,10
    8000217e:	0342c0ef          	jal	8002e1b2 <putchar>
    80002182:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80002184:	4509                	li	a0,2
    80002186:	d8ffe0ef          	jal	80000f14 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    8000218a:	144024f3          	csrr	s1,sip
    8000218e:	00031617          	auipc	a2,0x31
    80002192:	a4260613          	addi	a2,a2,-1470 # 80032bd0 <__func__.0+0x7e8>
    80002196:	08c00593          	li	a1,140
    8000219a:	00030517          	auipc	a0,0x30
    8000219e:	54650513          	addi	a0,a0,1350 # 800326e0 <__func__.0+0x2f8>
    800021a2:	22200913          	li	s2,546
    800021a6:	31e2d0ef          	jal	8002f4c4 <printf>
    800021aa:	2d248963          	beq	s1,s2,8000247c <check_xip_regs_3+0x4c8>
    800021ae:	00030597          	auipc	a1,0x30
    800021b2:	50a58593          	addi	a1,a1,1290 # 800326b8 <__func__.0+0x2d0>
    800021b6:	00030517          	auipc	a0,0x30
    800021ba:	54250513          	addi	a0,a0,1346 # 800326f8 <__func__.0+0x310>
    800021be:	3062d0ef          	jal	8002f4c4 <printf>
    800021c2:	00030517          	auipc	a0,0x30
    800021c6:	53e50513          	addi	a0,a0,1342 # 80032700 <__func__.0+0x318>
    800021ca:	2fa2d0ef          	jal	8002f4c4 <printf>
    800021ce:	86ca                	mv	a3,s2
    800021d0:	8626                	mv	a2,s1
    800021d2:	02d00593          	li	a1,45
    800021d6:	00031517          	auipc	a0,0x31
    800021da:	9da50513          	addi	a0,a0,-1574 # 80032bb0 <__func__.0+0x7c8>
    800021de:	2e62d0ef          	jal	8002f4c4 <printf>
    800021e2:	02900513          	li	a0,41
    800021e6:	7cd2b0ef          	jal	8002e1b2 <putchar>
    800021ea:	4529                	li	a0,10
    800021ec:	7c72b0ef          	jal	8002e1b2 <putchar>
    800021f0:	4401                	li	s0,0
    goto_priv(PRIV_M);
    800021f2:	4511                	li	a0,4
    800021f4:	d21fe0ef          	jal	80000f14 <goto_priv>

    VERBOSE("clearing all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)0);
    800021f8:	64505073          	csrwi	hvip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    800021fc:	644024f3          	csrr	s1,hip
    80002200:	00031617          	auipc	a2,0x31
    80002204:	9a860613          	addi	a2,a2,-1624 # 80032ba8 <__func__.0+0x7c0>
    80002208:	08c00593          	li	a1,140
    8000220c:	00030517          	auipc	a0,0x30
    80002210:	4d450513          	addi	a0,a0,1236 # 800326e0 <__func__.0+0x2f8>
    80002214:	2b02d0ef          	jal	8002f4c4 <printf>
    80002218:	22048663          	beqz	s1,80002444 <check_xip_regs_3+0x490>
    8000221c:	00030597          	auipc	a1,0x30
    80002220:	49c58593          	addi	a1,a1,1180 # 800326b8 <__func__.0+0x2d0>
    80002224:	00030517          	auipc	a0,0x30
    80002228:	4d450513          	addi	a0,a0,1236 # 800326f8 <__func__.0+0x310>
    8000222c:	2982d0ef          	jal	8002f4c4 <printf>
    80002230:	00030517          	auipc	a0,0x30
    80002234:	4d050513          	addi	a0,a0,1232 # 80032700 <__func__.0+0x318>
    80002238:	28c2d0ef          	jal	8002f4c4 <printf>
    8000223c:	8626                	mv	a2,s1
    8000223e:	4681                	li	a3,0
    80002240:	02d00593          	li	a1,45
    80002244:	00031517          	auipc	a0,0x31
    80002248:	96c50513          	addi	a0,a0,-1684 # 80032bb0 <__func__.0+0x7c8>
    8000224c:	2782d0ef          	jal	8002f4c4 <printf>
    80002250:	02900513          	li	a0,41
    80002254:	75f2b0ef          	jal	8002e1b2 <putchar>
    80002258:	4529                	li	a0,10
    8000225a:	7592b0ef          	jal	8002e1b2 <putchar>
    8000225e:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80002260:	144024f3          	csrr	s1,sip
    80002264:	00031617          	auipc	a2,0x31
    80002268:	96460613          	addi	a2,a2,-1692 # 80032bc8 <__func__.0+0x7e0>
    8000226c:	08c00593          	li	a1,140
    80002270:	00030517          	auipc	a0,0x30
    80002274:	47050513          	addi	a0,a0,1136 # 800326e0 <__func__.0+0x2f8>
    80002278:	24c2d0ef          	jal	8002f4c4 <printf>
    8000227c:	1a048663          	beqz	s1,80002428 <check_xip_regs_3+0x474>
    80002280:	00030597          	auipc	a1,0x30
    80002284:	43858593          	addi	a1,a1,1080 # 800326b8 <__func__.0+0x2d0>
    80002288:	00030517          	auipc	a0,0x30
    8000228c:	47050513          	addi	a0,a0,1136 # 800326f8 <__func__.0+0x310>
    80002290:	2342d0ef          	jal	8002f4c4 <printf>
    80002294:	00030517          	auipc	a0,0x30
    80002298:	46c50513          	addi	a0,a0,1132 # 80032700 <__func__.0+0x318>
    8000229c:	2282d0ef          	jal	8002f4c4 <printf>
    800022a0:	8626                	mv	a2,s1
    800022a2:	4681                	li	a3,0
    800022a4:	02d00593          	li	a1,45
    800022a8:	00031517          	auipc	a0,0x31
    800022ac:	90850513          	addi	a0,a0,-1784 # 80032bb0 <__func__.0+0x7c8>
    800022b0:	2142d0ef          	jal	8002f4c4 <printf>
    800022b4:	02900513          	li	a0,41
    800022b8:	6fb2b0ef          	jal	8002e1b2 <putchar>
    800022bc:	4529                	li	a0,10
    800022be:	6f52b0ef          	jal	8002e1b2 <putchar>
    800022c2:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    800022c4:	244024f3          	csrr	s1,vsip
    800022c8:	00031617          	auipc	a2,0x31
    800022cc:	8d060613          	addi	a2,a2,-1840 # 80032b98 <__func__.0+0x7b0>
    800022d0:	08c00593          	li	a1,140
    800022d4:	00030517          	auipc	a0,0x30
    800022d8:	40c50513          	addi	a0,a0,1036 # 800326e0 <__func__.0+0x2f8>
    800022dc:	1e82d0ef          	jal	8002f4c4 <printf>
    800022e0:	12048663          	beqz	s1,8000240c <check_xip_regs_3+0x458>
    800022e4:	00030597          	auipc	a1,0x30
    800022e8:	3d458593          	addi	a1,a1,980 # 800326b8 <__func__.0+0x2d0>
    800022ec:	00030517          	auipc	a0,0x30
    800022f0:	40c50513          	addi	a0,a0,1036 # 800326f8 <__func__.0+0x310>
    800022f4:	1d02d0ef          	jal	8002f4c4 <printf>
    800022f8:	00030517          	auipc	a0,0x30
    800022fc:	40850513          	addi	a0,a0,1032 # 80032700 <__func__.0+0x318>
    80002300:	1c42d0ef          	jal	8002f4c4 <printf>
    80002304:	8626                	mv	a2,s1
    80002306:	4681                	li	a3,0
    80002308:	02d00593          	li	a1,45
    8000230c:	00031517          	auipc	a0,0x31
    80002310:	8a450513          	addi	a0,a0,-1884 # 80032bb0 <__func__.0+0x7c8>
    80002314:	1b02d0ef          	jal	8002f4c4 <printf>
    80002318:	02900513          	li	a0,41
    8000231c:	6972b0ef          	jal	8002e1b2 <putchar>
    80002320:	4529                	li	a0,10
    80002322:	6912b0ef          	jal	8002e1b2 <putchar>
    80002326:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80002328:	4509                	li	a0,2
    8000232a:	bebfe0ef          	jal	80000f14 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8000232e:	144024f3          	csrr	s1,sip
    80002332:	00031617          	auipc	a2,0x31
    80002336:	89e60613          	addi	a2,a2,-1890 # 80032bd0 <__func__.0+0x7e8>
    8000233a:	08c00593          	li	a1,140
    8000233e:	00030517          	auipc	a0,0x30
    80002342:	3a250513          	addi	a0,a0,930 # 800326e0 <__func__.0+0x2f8>
    80002346:	17e2d0ef          	jal	8002f4c4 <printf>
    8000234a:	c8d1                	beqz	s1,800023de <check_xip_regs_3+0x42a>
    8000234c:	00030597          	auipc	a1,0x30
    80002350:	36c58593          	addi	a1,a1,876 # 800326b8 <__func__.0+0x2d0>
    80002354:	00030517          	auipc	a0,0x30
    80002358:	3a450513          	addi	a0,a0,932 # 800326f8 <__func__.0+0x310>
    8000235c:	1682d0ef          	jal	8002f4c4 <printf>
    80002360:	00030517          	auipc	a0,0x30
    80002364:	3a050513          	addi	a0,a0,928 # 80032700 <__func__.0+0x318>
    80002368:	15c2d0ef          	jal	8002f4c4 <printf>
    8000236c:	8626                	mv	a2,s1
    8000236e:	4681                	li	a3,0
    80002370:	02d00593          	li	a1,45
    80002374:	00031517          	auipc	a0,0x31
    80002378:	83c50513          	addi	a0,a0,-1988 # 80032bb0 <__func__.0+0x7c8>
    8000237c:	1482d0ef          	jal	8002f4c4 <printf>
    80002380:	02900513          	li	a0,41
    80002384:	62f2b0ef          	jal	8002e1b2 <putchar>
    80002388:	4529                	li	a0,10
    8000238a:	6292b0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8000238e:	4511                	li	a0,4
    80002390:	b85fe0ef          	jal	80000f14 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002394:	4401                	li	s0,0

    TEST_END();
    80002396:	00030597          	auipc	a1,0x30
    8000239a:	32258593          	addi	a1,a1,802 # 800326b8 <__func__.0+0x2d0>
    8000239e:	00030517          	auipc	a0,0x30
    800023a2:	3c250513          	addi	a0,a0,962 # 80032760 <__func__.0+0x378>
    800023a6:	11e2d0ef          	jal	8002f4c4 <printf>
    800023aa:	4511                	li	a0,4
    800023ac:	b69fe0ef          	jal	80000f14 <goto_priv>
    800023b0:	bc6ff0ef          	jal	80001776 <reset_state>
}
    800023b4:	60e2                	ld	ra,24(sp)
    800023b6:	8522                	mv	a0,s0
    800023b8:	6442                	ld	s0,16(sp)
    800023ba:	64a2                	ld	s1,8(sp)
    800023bc:	6902                	ld	s2,0(sp)
    800023be:	6105                	addi	sp,sp,32
    800023c0:	8082                	ret
    check_csr_rd("sip", sip, 0x0);
    800023c2:	00030597          	auipc	a1,0x30
    800023c6:	2e658593          	addi	a1,a1,742 # 800326a8 <__func__.0+0x2c0>
    800023ca:	00030517          	auipc	a0,0x30
    800023ce:	32e50513          	addi	a0,a0,814 # 800326f8 <__func__.0+0x310>
    800023d2:	0f22d0ef          	jal	8002f4c4 <printf>
    800023d6:	4529                	li	a0,10
    800023d8:	5db2b0ef          	jal	8002e1b2 <putchar>
    800023dc:	b381                	j	8000211c <check_xip_regs_3+0x168>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800023de:	00030597          	auipc	a1,0x30
    800023e2:	2ca58593          	addi	a1,a1,714 # 800326a8 <__func__.0+0x2c0>
    800023e6:	00030517          	auipc	a0,0x30
    800023ea:	31250513          	addi	a0,a0,786 # 800326f8 <__func__.0+0x310>
    800023ee:	0d62d0ef          	jal	8002f4c4 <printf>
    800023f2:	4529                	li	a0,10
    800023f4:	5bf2b0ef          	jal	8002e1b2 <putchar>
    800023f8:	d859                	beqz	s0,8000238e <check_xip_regs_3+0x3da>
    goto_priv(PRIV_M);
    800023fa:	4511                	li	a0,4
    800023fc:	b19fe0ef          	jal	80000f14 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002400:	4405                	li	s0,1
    TEST_END();
    80002402:	00030597          	auipc	a1,0x30
    80002406:	2a658593          	addi	a1,a1,678 # 800326a8 <__func__.0+0x2c0>
    8000240a:	bf51                	j	8000239e <check_xip_regs_3+0x3ea>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    8000240c:	00030597          	auipc	a1,0x30
    80002410:	29c58593          	addi	a1,a1,668 # 800326a8 <__func__.0+0x2c0>
    80002414:	00030517          	auipc	a0,0x30
    80002418:	2e450513          	addi	a0,a0,740 # 800326f8 <__func__.0+0x310>
    8000241c:	0a82d0ef          	jal	8002f4c4 <printf>
    80002420:	4529                	li	a0,10
    80002422:	5912b0ef          	jal	8002e1b2 <putchar>
    80002426:	b709                	j	80002328 <check_xip_regs_3+0x374>
    check_csr_rd("sip", sip, 0x0);
    80002428:	00030597          	auipc	a1,0x30
    8000242c:	28058593          	addi	a1,a1,640 # 800326a8 <__func__.0+0x2c0>
    80002430:	00030517          	auipc	a0,0x30
    80002434:	2c850513          	addi	a0,a0,712 # 800326f8 <__func__.0+0x310>
    80002438:	08c2d0ef          	jal	8002f4c4 <printf>
    8000243c:	4529                	li	a0,10
    8000243e:	5752b0ef          	jal	8002e1b2 <putchar>
    80002442:	b549                	j	800022c4 <check_xip_regs_3+0x310>
    check_csr_rd("hip", CSR_HIP, 0x0);
    80002444:	00030597          	auipc	a1,0x30
    80002448:	26458593          	addi	a1,a1,612 # 800326a8 <__func__.0+0x2c0>
    8000244c:	00030517          	auipc	a0,0x30
    80002450:	2ac50513          	addi	a0,a0,684 # 800326f8 <__func__.0+0x310>
    80002454:	0702d0ef          	jal	8002f4c4 <printf>
    80002458:	4529                	li	a0,10
    8000245a:	5592b0ef          	jal	8002e1b2 <putchar>
    8000245e:	b509                	j	80002260 <check_xip_regs_3+0x2ac>
    check_csr_rd("hip", CSR_HIP, 0x444);
    80002460:	00030597          	auipc	a1,0x30
    80002464:	24858593          	addi	a1,a1,584 # 800326a8 <__func__.0+0x2c0>
    80002468:	00030517          	auipc	a0,0x30
    8000246c:	29050513          	addi	a0,a0,656 # 800326f8 <__func__.0+0x310>
    80002470:	0542d0ef          	jal	8002f4c4 <printf>
    80002474:	4529                	li	a0,10
    80002476:	53d2b0ef          	jal	8002e1b2 <putchar>
    8000247a:	b93d                	j	800020b8 <check_xip_regs_3+0x104>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    8000247c:	00030597          	auipc	a1,0x30
    80002480:	22c58593          	addi	a1,a1,556 # 800326a8 <__func__.0+0x2c0>
    80002484:	00030517          	auipc	a0,0x30
    80002488:	27450513          	addi	a0,a0,628 # 800326f8 <__func__.0+0x310>
    8000248c:	0382d0ef          	jal	8002f4c4 <printf>
    80002490:	4529                	li	a0,10
    80002492:	5212b0ef          	jal	8002e1b2 <putchar>
    80002496:	bbb1                	j	800021f2 <check_xip_regs_3+0x23e>
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    80002498:	00030597          	auipc	a1,0x30
    8000249c:	21058593          	addi	a1,a1,528 # 800326a8 <__func__.0+0x2c0>
    800024a0:	00030517          	auipc	a0,0x30
    800024a4:	25850513          	addi	a0,a0,600 # 800326f8 <__func__.0+0x310>
    800024a8:	01c2d0ef          	jal	8002f4c4 <printf>
    800024ac:	4529                	li	a0,10
    800024ae:	5052b0ef          	jal	8002e1b2 <putchar>
    800024b2:	b9c9                	j	80002184 <check_xip_regs_3+0x1d0>
    check_csr_rd("hvip", CSR_HVIP, 0x2444);
    800024b4:	00030597          	auipc	a1,0x30
    800024b8:	1f458593          	addi	a1,a1,500 # 800326a8 <__func__.0+0x2c0>
    800024bc:	00030517          	auipc	a0,0x30
    800024c0:	23c50513          	addi	a0,a0,572 # 800326f8 <__func__.0+0x310>
    800024c4:	0002d0ef          	jal	8002f4c4 <printf>
    800024c8:	4529                	li	a0,10
    800024ca:	4e92b0ef          	jal	8002e1b2 <putchar>
    800024ce:	4405                	li	s0,1
    800024d0:	b641                	j	80002050 <check_xip_regs_3+0x9c>

00000000800024d2 <interrupt_tests>:

bool interrupt_tests(){
    800024d2:	1101                	addi	sp,sp,-32

    TEST_START();
    800024d4:	0002e597          	auipc	a1,0x2e
    800024d8:	ddc58593          	addi	a1,a1,-548 # 800302b0 <__func__.0>
    800024dc:	00030517          	auipc	a0,0x30
    800024e0:	1ec50513          	addi	a0,a0,492 # 800326c8 <__func__.0+0x2e0>
bool interrupt_tests(){
    800024e4:	ec06                	sd	ra,24(sp)
    800024e6:	e822                	sd	s0,16(sp)
    800024e8:	e426                	sd	s1,8(sp)
    TEST_START();
    800024ea:	7db2c0ef          	jal	8002f4c4 <printf>
    800024ee:	4529                	li	a0,10
    800024f0:	4c32b0ef          	jal	8002e1b2 <putchar>
    /**
     * Test trigerring VSSI without delegating it. 
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    
    goto_priv(PRIV_HS);
    800024f4:	450d                	li	a0,3
    800024f6:	a1ffe0ef          	jal	80000f14 <goto_priv>
    CSRC(sstatus, SSTATUS_SPIE_BIT | SSTATUS_SIE_BIT); 
    800024fa:	02200793          	li	a5,34
    800024fe:	1007b073          	csrc	sstatus,a5
    CSRS(CSR_HIE, 0x4);
    80002502:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0x4);
    80002506:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    8000250a:	90ffe0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_VS);
    8000250e:	4509                	li	a0,2
    80002510:	a05fe0ef          	jal	80000f14 <goto_priv>
    //CSRS(sstatus, SSTATUS_SIE_BIT);
    TEST_ASSERT("vs sw irq with no delegation", 
    80002514:	08c00593          	li	a1,140
    80002518:	00030617          	auipc	a2,0x30
    8000251c:	6d860613          	addi	a2,a2,1752 # 80032bf0 <__func__.0+0x808>
    80002520:	00030517          	auipc	a0,0x30
    80002524:	1c050513          	addi	a0,a0,448 # 800326e0 <__func__.0+0x2f8>
    80002528:	79d2c0ef          	jal	8002f4c4 <printf>
    8000252c:	0005a797          	auipc	a5,0x5a
    80002530:	ae57c783          	lbu	a5,-1307(a5) # 8005c011 <excpt+0x1>
    80002534:	0005a417          	auipc	s0,0x5a
    80002538:	adc40413          	addi	s0,s0,-1316 # 8005c010 <excpt>
    8000253c:	00030597          	auipc	a1,0x30
    80002540:	17c58593          	addi	a1,a1,380 # 800326b8 <__func__.0+0x2d0>
    80002544:	c799                	beqz	a5,80002552 <interrupt_tests+0x80>
    80002546:	57fd                	li	a5,-1
    80002548:	6418                	ld	a4,8(s0)
    8000254a:	17fe                	slli	a5,a5,0x3f
    8000254c:	0789                	addi	a5,a5,2
    8000254e:	16f70863          	beq	a4,a5,800026be <interrupt_tests+0x1ec>
    80002552:	00030517          	auipc	a0,0x30
    80002556:	1a650513          	addi	a0,a0,422 # 800326f8 <__func__.0+0x310>
    8000255a:	76b2c0ef          	jal	8002f4c4 <printf>
    8000255e:	0005a797          	auipc	a5,0x5a
    80002562:	ab37c783          	lbu	a5,-1357(a5) # 8005c011 <excpt+0x1>
    80002566:	c799                	beqz	a5,80002574 <interrupt_tests+0xa2>
    80002568:	57fd                	li	a5,-1
    8000256a:	6418                	ld	a4,8(s0)
    8000256c:	17fe                	slli	a5,a5,0x3f
    8000256e:	0789                	addi	a5,a5,2
    80002570:	12f70f63          	beq	a4,a5,800026ae <interrupt_tests+0x1dc>
    80002574:	00030517          	auipc	a0,0x30
    80002578:	18c50513          	addi	a0,a0,396 # 80032700 <__func__.0+0x318>
    8000257c:	7492c0ef          	jal	8002f4c4 <printf>
    80002580:	02900513          	li	a0,41
    80002584:	42f2b0ef          	jal	8002e1b2 <putchar>
    80002588:	4529                	li	a0,10
    8000258a:	4292b0ef          	jal	8002e1b2 <putchar>
    8000258e:	0005a797          	auipc	a5,0x5a
    80002592:	a837c783          	lbu	a5,-1405(a5) # 8005c011 <excpt+0x1>
    80002596:	4481                	li	s1,0
    80002598:	c799                	beqz	a5,800025a6 <interrupt_tests+0xd4>
    8000259a:	57fd                	li	a5,-1
    8000259c:	6418                	ld	a4,8(s0)
    8000259e:	17fe                	slli	a5,a5,0x3f
    800025a0:	0789                	addi	a5,a5,2
    800025a2:	12f70e63          	beq	a4,a5,800026de <interrupt_tests+0x20c>
   
    /**
     * Test trigerring VSSI and delegating it. Should trap to VS with cause SSI.
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    goto_priv(PRIV_HS);
    800025a6:	450d                	li	a0,3
    800025a8:	96dfe0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HIDELEG, 0x4);
    800025ac:	60326073          	csrsi	hideleg,4
    CSRS(CSR_HIP, 0x4);
    800025b0:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    800025b4:	865fe0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_VS);
    800025b8:	4509                	li	a0,2
    800025ba:	95bfe0ef          	jal	80000f14 <goto_priv>
    CSRS(sie, 0x2);
    800025be:	10416073          	csrsi	sie,2
    CSRS(sstatus, 0x2);
    800025c2:	10016073          	csrsi	sstatus,2
    TEST_ASSERT("vs sw irq with delegation", 
    800025c6:	08c00593          	li	a1,140
    800025ca:	00030617          	auipc	a2,0x30
    800025ce:	64660613          	addi	a2,a2,1606 # 80032c10 <__func__.0+0x828>
    800025d2:	00030517          	auipc	a0,0x30
    800025d6:	10e50513          	addi	a0,a0,270 # 800326e0 <__func__.0+0x2f8>
    800025da:	6eb2c0ef          	jal	8002f4c4 <printf>
    800025de:	0005a797          	auipc	a5,0x5a
    800025e2:	a337c783          	lbu	a5,-1485(a5) # 8005c011 <excpt+0x1>
    800025e6:	00030597          	auipc	a1,0x30
    800025ea:	0d258593          	addi	a1,a1,210 # 800326b8 <__func__.0+0x2d0>
    800025ee:	c799                	beqz	a5,800025fc <interrupt_tests+0x12a>
    800025f0:	57fd                	li	a5,-1
    800025f2:	6418                	ld	a4,8(s0)
    800025f4:	17fe                	slli	a5,a5,0x3f
    800025f6:	0785                	addi	a5,a5,1
    800025f8:	0ef70b63          	beq	a4,a5,800026ee <interrupt_tests+0x21c>
    800025fc:	00030517          	auipc	a0,0x30
    80002600:	0fc50513          	addi	a0,a0,252 # 800326f8 <__func__.0+0x310>
    80002604:	6c12c0ef          	jal	8002f4c4 <printf>
    80002608:	0005a797          	auipc	a5,0x5a
    8000260c:	a097c783          	lbu	a5,-1527(a5) # 8005c011 <excpt+0x1>
    80002610:	c799                	beqz	a5,8000261e <interrupt_tests+0x14c>
    80002612:	57fd                	li	a5,-1
    80002614:	6418                	ld	a4,8(s0)
    80002616:	17fe                	slli	a5,a5,0x3f
    80002618:	0785                	addi	a5,a5,1
    8000261a:	08f70263          	beq	a4,a5,8000269e <interrupt_tests+0x1cc>
    8000261e:	00030517          	auipc	a0,0x30
    80002622:	0e250513          	addi	a0,a0,226 # 80032700 <__func__.0+0x318>
    80002626:	69f2c0ef          	jal	8002f4c4 <printf>
    8000262a:	02900513          	li	a0,41
    8000262e:	3852b0ef          	jal	8002e1b2 <putchar>
    80002632:	4529                	li	a0,10
    80002634:	37f2b0ef          	jal	8002e1b2 <putchar>
    80002638:	cca9                	beqz	s1,80002692 <interrupt_tests+0x1c0>
    8000263a:	0005a497          	auipc	s1,0x5a
    8000263e:	9d74c483          	lbu	s1,-1577(s1) # 8005c011 <excpt+0x1>


    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    

    TEST_END();
    80002642:	00030597          	auipc	a1,0x30
    80002646:	07658593          	addi	a1,a1,118 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs sw irq with delegation", 
    8000264a:	c881                	beqz	s1,8000265a <interrupt_tests+0x188>
    8000264c:	57fd                	li	a5,-1
    8000264e:	6418                	ld	a4,8(s0)
    80002650:	17fe                	slli	a5,a5,0x3f
    80002652:	0785                	addi	a5,a5,1
    80002654:	02f70463          	beq	a4,a5,8000267c <interrupt_tests+0x1aa>
    80002658:	4481                	li	s1,0
    TEST_END();
    8000265a:	00030517          	auipc	a0,0x30
    8000265e:	10650513          	addi	a0,a0,262 # 80032760 <__func__.0+0x378>
    80002662:	6632c0ef          	jal	8002f4c4 <printf>
    80002666:	4511                	li	a0,4
    80002668:	8adfe0ef          	jal	80000f14 <goto_priv>
    8000266c:	90aff0ef          	jal	80001776 <reset_state>
}
    80002670:	60e2                	ld	ra,24(sp)
    80002672:	6442                	ld	s0,16(sp)
    80002674:	8526                	mv	a0,s1
    80002676:	64a2                	ld	s1,8(sp)
    80002678:	6105                	addi	sp,sp,32
    8000267a:	8082                	ret
    TEST_ASSERT("vs sw irq with delegation", 
    8000267c:	0005a717          	auipc	a4,0x5a
    80002680:	99872703          	lw	a4,-1640(a4) # 8005c014 <excpt+0x4>
    80002684:	4789                	li	a5,2
    TEST_END();
    80002686:	00030597          	auipc	a1,0x30
    8000268a:	02258593          	addi	a1,a1,34 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs sw irq with delegation", 
    8000268e:	fcf706e3          	beq	a4,a5,8000265a <interrupt_tests+0x188>
    80002692:	4481                	li	s1,0
    TEST_END();
    80002694:	00030597          	auipc	a1,0x30
    80002698:	02458593          	addi	a1,a1,36 # 800326b8 <__func__.0+0x2d0>
    8000269c:	bf7d                	j	8000265a <interrupt_tests+0x188>
    TEST_ASSERT("vs sw irq with delegation", 
    8000269e:	0005a717          	auipc	a4,0x5a
    800026a2:	97672703          	lw	a4,-1674(a4) # 8005c014 <excpt+0x4>
    800026a6:	4789                	li	a5,2
    800026a8:	f6f71be3          	bne	a4,a5,8000261e <interrupt_tests+0x14c>
    800026ac:	b759                	j	80002632 <interrupt_tests+0x160>
    TEST_ASSERT("vs sw irq with no delegation", 
    800026ae:	0005a717          	auipc	a4,0x5a
    800026b2:	96672703          	lw	a4,-1690(a4) # 8005c014 <excpt+0x4>
    800026b6:	478d                	li	a5,3
    800026b8:	eaf71ee3          	bne	a4,a5,80002574 <interrupt_tests+0xa2>
    800026bc:	b5f1                	j	80002588 <interrupt_tests+0xb6>
    800026be:	0005a717          	auipc	a4,0x5a
    800026c2:	95672703          	lw	a4,-1706(a4) # 8005c014 <excpt+0x4>
    800026c6:	478d                	li	a5,3
    800026c8:	00030597          	auipc	a1,0x30
    800026cc:	fe058593          	addi	a1,a1,-32 # 800326a8 <__func__.0+0x2c0>
    800026d0:	e8f701e3          	beq	a4,a5,80002552 <interrupt_tests+0x80>
    800026d4:	00030597          	auipc	a1,0x30
    800026d8:	fe458593          	addi	a1,a1,-28 # 800326b8 <__func__.0+0x2d0>
    800026dc:	bd9d                	j	80002552 <interrupt_tests+0x80>
    800026de:	0005a497          	auipc	s1,0x5a
    800026e2:	9364a483          	lw	s1,-1738(s1) # 8005c014 <excpt+0x4>
    800026e6:	14f5                	addi	s1,s1,-3
    800026e8:	0014b493          	seqz	s1,s1
    800026ec:	bd6d                	j	800025a6 <interrupt_tests+0xd4>
    TEST_ASSERT("vs sw irq with delegation", 
    800026ee:	0005a717          	auipc	a4,0x5a
    800026f2:	92672703          	lw	a4,-1754(a4) # 8005c014 <excpt+0x4>
    800026f6:	4789                	li	a5,2
    800026f8:	00030597          	auipc	a1,0x30
    800026fc:	fb058593          	addi	a1,a1,-80 # 800326a8 <__func__.0+0x2c0>
    80002700:	eef70ee3          	beq	a4,a5,800025fc <interrupt_tests+0x12a>
    80002704:	00030597          	auipc	a1,0x30
    80002708:	fb458593          	addi	a1,a1,-76 # 800326b8 <__func__.0+0x2d0>
    8000270c:	bdc5                	j	800025fc <interrupt_tests+0x12a>

000000008000270e <two_stage_translation_1>:

static inline void touch(uintptr_t addr){
    touchwrite(addr);
}

bool two_stage_translation_1(){
    8000270e:	7139                	addi	sp,sp,-64
    
    TEST_START();
    80002710:	0002e597          	auipc	a1,0x2e
    80002714:	bb058593          	addi	a1,a1,-1104 # 800302c0 <__func__.20>
    80002718:	00030517          	auipc	a0,0x30
    8000271c:	fb050513          	addi	a0,a0,-80 # 800326c8 <__func__.0+0x2e0>
bool two_stage_translation_1(){
    80002720:	fc06                	sd	ra,56(sp)
    80002722:	f822                	sd	s0,48(sp)
    80002724:	f426                	sd	s1,40(sp)
    80002726:	f04a                	sd	s2,32(sp)
    80002728:	ec4e                	sd	s3,24(sp)
    TEST_START();
    8000272a:	59b2c0ef          	jal	8002f4c4 <printf>
    8000272e:	4529                	li	a0,10
    80002730:	2832b0ef          	jal	8002e1b2 <putchar>
static inline uint8_t read8(uintptr_t addr){
    return *((volatile uint8_t*) addr);    
}

static inline void write64(uintptr_t addr, uint64_t val){
    *((volatile uint64_t*) addr) = val;
    80002734:	2201b737          	lui	a4,0x2201b
    80002738:	000887b7          	lui	a5,0x88
    8000273c:	070a                	slli	a4,a4,0x2
    8000273e:	44c5                	li	s1,17
    80002740:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002744:	e304                	sd	s1,0(a4)
    80002746:	07b2                	slli	a5,a5,0xc
    80002748:	02200913          	li	s2,34
    8000274c:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002750:	450d                	li	a0,3
    80002752:	fc2fe0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80002756:	e97fd0ef          	jal	800005ec <hspt_init>
    hpt_init();
    8000275a:	a76fe0ef          	jal	800009d0 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    8000275e:	82afe0ef          	jal	80000788 <vspt_init>
    return *((volatile uint64_t*) addr);
    80002762:	4001b737          	lui	a4,0x4001b
    80002766:	070a                	slli	a4,a4,0x2
    80002768:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    8000276c:	001007b7          	lui	a5,0x100
    80002770:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002774:	07b2                	slli	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002776:	00030617          	auipc	a2,0x30
    8000277a:	4ba60613          	addi	a2,a2,1210 # 80032c30 <__func__.0+0x848>
    8000277e:	08c00593          	li	a1,140
    80002782:	00030517          	auipc	a0,0x30
    80002786:	f5e50513          	addi	a0,a0,-162 # 800326e0 <__func__.0+0x2f8>
    8000278a:	6380                	ld	s0,0(a5)
    8000278c:	5392c0ef          	jal	8002f4c4 <printf>
    80002790:	3a998963          	beq	s3,s1,80002b42 <two_stage_translation_1+0x434>
    80002794:	00030597          	auipc	a1,0x30
    80002798:	f2458593          	addi	a1,a1,-220 # 800326b8 <__func__.0+0x2d0>
    8000279c:	00030517          	auipc	a0,0x30
    800027a0:	f5c50513          	addi	a0,a0,-164 # 800326f8 <__func__.0+0x310>
    800027a4:	5212c0ef          	jal	8002f4c4 <printf>
    800027a8:	00030517          	auipc	a0,0x30
    800027ac:	f5850513          	addi	a0,a0,-168 # 80032700 <__func__.0+0x318>
    800027b0:	5152c0ef          	jal	8002f4c4 <printf>
    800027b4:	02900513          	li	a0,41
    800027b8:	1fb2b0ef          	jal	8002e1b2 <putchar>
    800027bc:	4529                	li	a0,10
    800027be:	1f52b0ef          	jal	8002e1b2 <putchar>
    800027c2:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    800027c4:	450d                	li	a0,3
    800027c6:	f4efe0ef          	jal	80000f14 <goto_priv>
    hpt_switch();
    800027ca:	e18fe0ef          	jal	80000de2 <hpt_switch>
    asm volatile(
    800027ce:	22000073          	.insn	4, 0x22000073
    asm volatile(
    800027d2:	62000073          	.insn	4, 0x62000073
    hfence();
    goto_priv(PRIV_VS);
    800027d6:	4509                	li	a0,2
    800027d8:	f3cfe0ef          	jal	80000f14 <goto_priv>
    800027dc:	001007b7          	lui	a5,0x100
    800027e0:	4001b737          	lui	a4,0x4001b
    800027e4:	070a                	slli	a4,a4,0x2
    800027e6:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800027ea:	07b2                	slli	a5,a5,0xc
    800027ec:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    800027f0:	00030617          	auipc	a2,0x30
    800027f4:	45860613          	addi	a2,a2,1112 # 80032c48 <__func__.0+0x860>
    800027f8:	08c00593          	li	a1,140
    800027fc:	00030517          	auipc	a0,0x30
    80002800:	ee450513          	addi	a0,a0,-284 # 800326e0 <__func__.0+0x2f8>
    80002804:	6384                	ld	s1,0(a5)
    80002806:	4bf2c0ef          	jal	8002f4c4 <printf>
    8000280a:	02200793          	li	a5,34
    8000280e:	2ef90a63          	beq	s2,a5,80002b02 <two_stage_translation_1+0x3f4>
    80002812:	00030597          	auipc	a1,0x30
    80002816:	ea658593          	addi	a1,a1,-346 # 800326b8 <__func__.0+0x2d0>
    8000281a:	00030517          	auipc	a0,0x30
    8000281e:	ede50513          	addi	a0,a0,-290 # 800326f8 <__func__.0+0x310>
    80002822:	4a32c0ef          	jal	8002f4c4 <printf>
    80002826:	00030517          	auipc	a0,0x30
    8000282a:	eda50513          	addi	a0,a0,-294 # 80032700 <__func__.0+0x318>
    8000282e:	4972c0ef          	jal	8002f4c4 <printf>
    80002832:	02900513          	li	a0,41
    80002836:	17d2b0ef          	jal	8002e1b2 <putchar>
    8000283a:	4529                	li	a0,10
    8000283c:	1772b0ef          	jal	8002e1b2 <putchar>
    80002840:	4401                	li	s0,0

    vspt_switch();
    80002842:	d7efe0ef          	jal	80000dc0 <vspt_switch>
    asm volatile ("sfence.vma \n\t");
    80002846:	12000073          	sfence.vma
    8000284a:	001007b7          	lui	a5,0x100
    8000284e:	4001b737          	lui	a4,0x4001b
    80002852:	070a                	slli	a4,a4,0x2
    80002854:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002858:	07b2                	slli	a5,a5,0xc
    8000285a:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    sfence();
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    8000285e:	00030617          	auipc	a2,0x30
    80002862:	42260613          	addi	a2,a2,1058 # 80032c80 <__func__.0+0x898>
    80002866:	08c00593          	li	a1,140
    8000286a:	00030517          	auipc	a0,0x30
    8000286e:	e7650513          	addi	a0,a0,-394 # 800326e0 <__func__.0+0x2f8>
    80002872:	6384                	ld	s1,0(a5)
    80002874:	4512c0ef          	jal	8002f4c4 <printf>
    80002878:	47c5                	li	a5,17
    8000287a:	32f90063          	beq	s2,a5,80002b9a <two_stage_translation_1+0x48c>
    8000287e:	00030597          	auipc	a1,0x30
    80002882:	e3a58593          	addi	a1,a1,-454 # 800326b8 <__func__.0+0x2d0>
    80002886:	00030517          	auipc	a0,0x30
    8000288a:	e7250513          	addi	a0,a0,-398 # 800326f8 <__func__.0+0x310>
    8000288e:	4372c0ef          	jal	8002f4c4 <printf>
    80002892:	00030517          	auipc	a0,0x30
    80002896:	e6e50513          	addi	a0,a0,-402 # 80032700 <__func__.0+0x318>
    8000289a:	42b2c0ef          	jal	8002f4c4 <printf>
    8000289e:	02900513          	li	a0,41
    800028a2:	1112b0ef          	jal	8002e1b2 <putchar>
    800028a6:	4529                	li	a0,10
    800028a8:	10b2b0ef          	jal	8002e1b2 <putchar>
    800028ac:	4481                	li	s1,0

    goto_priv(PRIV_M); 
    800028ae:	4511                	li	a0,4
    800028b0:	e64fe0ef          	jal	80000f14 <goto_priv>
    CSRS(medeleg, 1ull << CAUSE_LGPF);
    800028b4:	002007b7          	lui	a5,0x200
    800028b8:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_VS);
    800028bc:	4509                	li	a0,2
    800028be:	e56fe0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800028c2:	d56fe0ef          	jal	80000e18 <test_setup_except_function>
    800028c6:	001007b7          	lui	a5,0x100
    800028ca:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800028ce:	07b2                	slli	a5,a5,0xc
    800028d0:	639c                	ld	a5,0(a5)
    read64(vs_page_base(VSRWX_GI));    
    TEST_ASSERT(
    800028d2:	08c00593          	li	a1,140
    800028d6:	00030617          	auipc	a2,0x30
    800028da:	3e260613          	addi	a2,a2,994 # 80032cb8 <__func__.0+0x8d0>
    800028de:	00030517          	auipc	a0,0x30
    800028e2:	e0250513          	addi	a0,a0,-510 # 800326e0 <__func__.0+0x2f8>
    800028e6:	3df2c0ef          	jal	8002f4c4 <printf>
    800028ea:	00059797          	auipc	a5,0x59
    800028ee:	7277c783          	lbu	a5,1831(a5) # 8005c011 <excpt+0x1>
    800028f2:	00059417          	auipc	s0,0x59
    800028f6:	71e40413          	addi	s0,s0,1822 # 8005c010 <excpt>
    800028fa:	00030597          	auipc	a1,0x30
    800028fe:	dbe58593          	addi	a1,a1,-578 # 800326b8 <__func__.0+0x2d0>
    80002902:	c789                	beqz	a5,8000290c <two_stage_translation_1+0x1fe>
    80002904:	6418                	ld	a4,8(s0)
    80002906:	47d5                	li	a5,21
    80002908:	3ef70963          	beq	a4,a5,80002cfa <two_stage_translation_1+0x5ec>
    8000290c:	00030517          	auipc	a0,0x30
    80002910:	dec50513          	addi	a0,a0,-532 # 800326f8 <__func__.0+0x310>
    80002914:	3b12c0ef          	jal	8002f4c4 <printf>
    80002918:	00059797          	auipc	a5,0x59
    8000291c:	6f97c783          	lbu	a5,1785(a5) # 8005c011 <excpt+0x1>
    80002920:	c789                	beqz	a5,8000292a <two_stage_translation_1+0x21c>
    80002922:	6418                	ld	a4,8(s0)
    80002924:	47d5                	li	a5,21
    80002926:	2af70c63          	beq	a4,a5,80002bde <two_stage_translation_1+0x4d0>
    8000292a:	00030517          	auipc	a0,0x30
    8000292e:	dd650513          	addi	a0,a0,-554 # 80032700 <__func__.0+0x318>
    80002932:	3932c0ef          	jal	8002f4c4 <printf>
    80002936:	02900513          	li	a0,41
    8000293a:	0792b0ef          	jal	8002e1b2 <putchar>
    8000293e:	4529                	li	a0,10
    80002940:	0732b0ef          	jal	8002e1b2 <putchar>
    80002944:	c899                	beqz	s1,8000295a <two_stage_translation_1+0x24c>
    80002946:	00059797          	auipc	a5,0x59
    8000294a:	6cb7c783          	lbu	a5,1739(a5) # 8005c011 <excpt+0x1>
    8000294e:	4481                	li	s1,0
    80002950:	c789                	beqz	a5,8000295a <two_stage_translation_1+0x24c>
    80002952:	6418                	ld	a4,8(s0)
    80002954:	47d5                	li	a5,21
    80002956:	32f70d63          	beq	a4,a5,80002c90 <two_stage_translation_1+0x582>
        excpt.priv == PRIV_HS &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    TEST_SETUP_EXCEPT();
    8000295a:	cbefe0ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vs_page_base(VSRWX_GI)); 
    8000295e:	001007b7          	lui	a5,0x100
    80002962:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002966:	07b2                	slli	a5,a5,0xc
    80002968:	00000297          	auipc	t0,0x0
    8000296c:	00c28293          	addi	t0,t0,12 # 80002974 <two_stage_translation_1+0x266>
    80002970:	02543c23          	sd	t0,56(s0)
    80002974:	8782                	jr	a5
    TEST_ASSERT(
    80002976:	08c00593          	li	a1,140
    8000297a:	00030617          	auipc	a2,0x30
    8000297e:	36e60613          	addi	a2,a2,878 # 80032ce8 <__func__.0+0x900>
    80002982:	00030517          	auipc	a0,0x30
    80002986:	d5e50513          	addi	a0,a0,-674 # 800326e0 <__func__.0+0x2f8>
    8000298a:	33b2c0ef          	jal	8002f4c4 <printf>
    8000298e:	00059797          	auipc	a5,0x59
    80002992:	6837c783          	lbu	a5,1667(a5) # 8005c011 <excpt+0x1>
    80002996:	00030597          	auipc	a1,0x30
    8000299a:	d2258593          	addi	a1,a1,-734 # 800326b8 <__func__.0+0x2d0>
    8000299e:	c789                	beqz	a5,800029a8 <two_stage_translation_1+0x29a>
    800029a0:	6418                	ld	a4,8(s0)
    800029a2:	47d1                	li	a5,20
    800029a4:	3af70e63          	beq	a4,a5,80002d60 <two_stage_translation_1+0x652>
    800029a8:	00030517          	auipc	a0,0x30
    800029ac:	d5050513          	addi	a0,a0,-688 # 800326f8 <__func__.0+0x310>
    800029b0:	3152c0ef          	jal	8002f4c4 <printf>
    800029b4:	00059797          	auipc	a5,0x59
    800029b8:	65d7c783          	lbu	a5,1629(a5) # 8005c011 <excpt+0x1>
    800029bc:	c789                	beqz	a5,800029c6 <two_stage_translation_1+0x2b8>
    800029be:	6418                	ld	a4,8(s0)
    800029c0:	47d1                	li	a5,20
    800029c2:	24f70963          	beq	a4,a5,80002c14 <two_stage_translation_1+0x506>
    800029c6:	00030517          	auipc	a0,0x30
    800029ca:	d3a50513          	addi	a0,a0,-710 # 80032700 <__func__.0+0x318>
    800029ce:	2f72c0ef          	jal	8002f4c4 <printf>
    800029d2:	02900513          	li	a0,41
    800029d6:	7dc2b0ef          	jal	8002e1b2 <putchar>
    800029da:	4529                	li	a0,10
    800029dc:	7d62b0ef          	jal	8002e1b2 <putchar>
    800029e0:	c899                	beqz	s1,800029f6 <two_stage_translation_1+0x2e8>
    800029e2:	00059797          	auipc	a5,0x59
    800029e6:	62f7c783          	lbu	a5,1583(a5) # 8005c011 <excpt+0x1>
    800029ea:	4481                	li	s1,0
    800029ec:	c789                	beqz	a5,800029f6 <two_stage_translation_1+0x2e8>
    800029ee:	6418                	ld	a4,8(s0)
    800029f0:	47d1                	li	a5,20
    800029f2:	26f70a63          	beq	a4,a5,80002c66 <two_stage_translation_1+0x558>
        excpt.priv == PRIV_M  &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    goto_priv(PRIV_M);
    800029f6:	4511                	li	a0,4
    800029f8:	d1cfe0ef          	jal	80000f14 <goto_priv>
    CSRS(medeleg, 1 << CAUSE_LPF | 1 << CAUSE_LGPF);
    800029fc:	002027b7          	lui	a5,0x202
    80002a00:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_HS); 
    80002a04:	450d                	li	a0,3
    80002a06:	d0efe0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HEDELEG, 1 << CAUSE_LPF);
    80002a0a:	6789                	lui	a5,0x2
    80002a0c:	6027a073          	csrs	hedeleg,a5
    goto_priv(PRIV_VS);
    80002a10:	4509                	li	a0,2
    80002a12:	d02fe0ef          	jal	80000f14 <goto_priv>
    80002a16:	12000073          	sfence.vma
    sfence();
    TEST_SETUP_EXCEPT();
    80002a1a:	bfefe0ef          	jal	80000e18 <test_setup_except_function>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    80002a1e:	400197b7          	lui	a5,0x40019
    80002a22:	078a                	slli	a5,a5,0x2
    80002a24:	639c                	ld	a5,0(a5)
    touchread(vs_page_base(VSI_GI));    
    TEST_ASSERT(
    80002a26:	08c00593          	li	a1,140
    80002a2a:	00030617          	auipc	a2,0x30
    80002a2e:	2fe60613          	addi	a2,a2,766 # 80032d28 <__func__.0+0x940>
    80002a32:	00030517          	auipc	a0,0x30
    80002a36:	cae50513          	addi	a0,a0,-850 # 800326e0 <__func__.0+0x2f8>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    80002a3a:	e43e                	sd	a5,8(sp)
    TEST_ASSERT(
    80002a3c:	2892c0ef          	jal	8002f4c4 <printf>
    80002a40:	00059797          	auipc	a5,0x59
    80002a44:	5d17c783          	lbu	a5,1489(a5) # 8005c011 <excpt+0x1>
    80002a48:	00030597          	auipc	a1,0x30
    80002a4c:	c7058593          	addi	a1,a1,-912 # 800326b8 <__func__.0+0x2d0>
    80002a50:	c789                	beqz	a5,80002a5a <two_stage_translation_1+0x34c>
    80002a52:	6418                	ld	a4,8(s0)
    80002a54:	47b5                	li	a5,13
    80002a56:	2cf70f63          	beq	a4,a5,80002d34 <two_stage_translation_1+0x626>
    80002a5a:	00030517          	auipc	a0,0x30
    80002a5e:	c9e50513          	addi	a0,a0,-866 # 800326f8 <__func__.0+0x310>
    80002a62:	2632c0ef          	jal	8002f4c4 <printf>
    80002a66:	00059797          	auipc	a5,0x59
    80002a6a:	5ab7c783          	lbu	a5,1451(a5) # 8005c011 <excpt+0x1>
    80002a6e:	c789                	beqz	a5,80002a78 <two_stage_translation_1+0x36a>
    80002a70:	6418                	ld	a4,8(s0)
    80002a72:	47b5                	li	a5,13
    80002a74:	1cf70b63          	beq	a4,a5,80002c4a <two_stage_translation_1+0x53c>
    80002a78:	00030517          	auipc	a0,0x30
    80002a7c:	c8850513          	addi	a0,a0,-888 # 80032700 <__func__.0+0x318>
    80002a80:	2452c0ef          	jal	8002f4c4 <printf>
    80002a84:	02900513          	li	a0,41
    80002a88:	72a2b0ef          	jal	8002e1b2 <putchar>
    80002a8c:	4529                	li	a0,10
    80002a8e:	7242b0ef          	jal	8002e1b2 <putchar>
    80002a92:	c0b5                	beqz	s1,80002af6 <two_stage_translation_1+0x3e8>
    80002a94:	00059497          	auipc	s1,0x59
    80002a98:	57d4c483          	lbu	s1,1405(s1) # 8005c011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_VS && 
        excpt.gva == false
    );

    TEST_END();
    80002a9c:	00030597          	auipc	a1,0x30
    80002aa0:	c1c58593          	addi	a1,a1,-996 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT(
    80002aa4:	c491                	beqz	s1,80002ab0 <two_stage_translation_1+0x3a2>
    80002aa6:	6418                	ld	a4,8(s0)
    80002aa8:	47b5                	li	a5,13
    80002aaa:	02f70663          	beq	a4,a5,80002ad6 <two_stage_translation_1+0x3c8>
    80002aae:	4481                	li	s1,0
    TEST_END();
    80002ab0:	00030517          	auipc	a0,0x30
    80002ab4:	cb050513          	addi	a0,a0,-848 # 80032760 <__func__.0+0x378>
    80002ab8:	20d2c0ef          	jal	8002f4c4 <printf>
    80002abc:	4511                	li	a0,4
    80002abe:	c56fe0ef          	jal	80000f14 <goto_priv>
    80002ac2:	cb5fe0ef          	jal	80001776 <reset_state>
}
    80002ac6:	70e2                	ld	ra,56(sp)
    80002ac8:	7442                	ld	s0,48(sp)
    80002aca:	7902                	ld	s2,32(sp)
    80002acc:	69e2                	ld	s3,24(sp)
    80002ace:	8526                	mv	a0,s1
    80002ad0:	74a2                	ld	s1,40(sp)
    80002ad2:	6121                	addi	sp,sp,64
    80002ad4:	8082                	ret
    TEST_ASSERT(
    80002ad6:	00059717          	auipc	a4,0x59
    80002ada:	53e72703          	lw	a4,1342(a4) # 8005c014 <excpt+0x4>
    80002ade:	4789                	li	a5,2
    80002ae0:	fcf717e3          	bne	a4,a5,80002aae <two_stage_translation_1+0x3a0>
    80002ae4:	00059797          	auipc	a5,0x59
    80002ae8:	55c7c783          	lbu	a5,1372(a5) # 8005c040 <excpt+0x30>
    TEST_END();
    80002aec:	00030597          	auipc	a1,0x30
    80002af0:	bbc58593          	addi	a1,a1,-1092 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT(
    80002af4:	dfd5                	beqz	a5,80002ab0 <two_stage_translation_1+0x3a2>
    80002af6:	4481                	li	s1,0
    TEST_END();
    80002af8:	00030597          	auipc	a1,0x30
    80002afc:	bc058593          	addi	a1,a1,-1088 # 800326b8 <__func__.0+0x2d0>
    80002b00:	bf45                	j	80002ab0 <two_stage_translation_1+0x3a2>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002b02:	47c5                	li	a5,17
    80002b04:	1cf48b63          	beq	s1,a5,80002cda <two_stage_translation_1+0x5cc>
    80002b08:	00030597          	auipc	a1,0x30
    80002b0c:	bb058593          	addi	a1,a1,-1104 # 800326b8 <__func__.0+0x2d0>
    80002b10:	00030517          	auipc	a0,0x30
    80002b14:	be850513          	addi	a0,a0,-1048 # 800326f8 <__func__.0+0x310>
    80002b18:	1ad2c0ef          	jal	8002f4c4 <printf>
    80002b1c:	00030517          	auipc	a0,0x30
    80002b20:	be450513          	addi	a0,a0,-1052 # 80032700 <__func__.0+0x318>
    80002b24:	1a12c0ef          	jal	8002f4c4 <printf>
    80002b28:	02900513          	li	a0,41
    80002b2c:	6862b0ef          	jal	8002e1b2 <putchar>
    80002b30:	4529                	li	a0,10
    80002b32:	6802b0ef          	jal	8002e1b2 <putchar>
    80002b36:	d00405e3          	beqz	s0,80002840 <two_stage_translation_1+0x132>
    80002b3a:	14bd                	addi	s1,s1,-17
    80002b3c:	0014b413          	seqz	s0,s1
    80002b40:	b309                	j	80002842 <two_stage_translation_1+0x134>
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002b42:	03240e63          	beq	s0,s2,80002b7e <two_stage_translation_1+0x470>
    80002b46:	00030597          	auipc	a1,0x30
    80002b4a:	b7258593          	addi	a1,a1,-1166 # 800326b8 <__func__.0+0x2d0>
    80002b4e:	00030517          	auipc	a0,0x30
    80002b52:	baa50513          	addi	a0,a0,-1110 # 800326f8 <__func__.0+0x310>
    80002b56:	16f2c0ef          	jal	8002f4c4 <printf>
    80002b5a:	00030517          	auipc	a0,0x30
    80002b5e:	ba650513          	addi	a0,a0,-1114 # 80032700 <__func__.0+0x318>
    80002b62:	1632c0ef          	jal	8002f4c4 <printf>
    80002b66:	02900513          	li	a0,41
    80002b6a:	6482b0ef          	jal	8002e1b2 <putchar>
    80002b6e:	4529                	li	a0,10
    80002b70:	6422b0ef          	jal	8002e1b2 <putchar>
    80002b74:	fde40413          	addi	s0,s0,-34
    80002b78:	00143413          	seqz	s0,s0
    80002b7c:	b1a1                	j	800027c4 <two_stage_translation_1+0xb6>
    80002b7e:	00030597          	auipc	a1,0x30
    80002b82:	b2a58593          	addi	a1,a1,-1238 # 800326a8 <__func__.0+0x2c0>
    80002b86:	00030517          	auipc	a0,0x30
    80002b8a:	b7250513          	addi	a0,a0,-1166 # 800326f8 <__func__.0+0x310>
    80002b8e:	1372c0ef          	jal	8002f4c4 <printf>
    80002b92:	4529                	li	a0,10
    80002b94:	61e2b0ef          	jal	8002e1b2 <putchar>
    80002b98:	bff1                	j	80002b74 <two_stage_translation_1+0x466>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002b9a:	02200793          	li	a5,34
    80002b9e:	10f48e63          	beq	s1,a5,80002cba <two_stage_translation_1+0x5ac>
    80002ba2:	00030597          	auipc	a1,0x30
    80002ba6:	b1658593          	addi	a1,a1,-1258 # 800326b8 <__func__.0+0x2d0>
    80002baa:	00030517          	auipc	a0,0x30
    80002bae:	b4e50513          	addi	a0,a0,-1202 # 800326f8 <__func__.0+0x310>
    80002bb2:	1132c0ef          	jal	8002f4c4 <printf>
    80002bb6:	00030517          	auipc	a0,0x30
    80002bba:	b4a50513          	addi	a0,a0,-1206 # 80032700 <__func__.0+0x318>
    80002bbe:	1072c0ef          	jal	8002f4c4 <printf>
    80002bc2:	02900513          	li	a0,41
    80002bc6:	5ec2b0ef          	jal	8002e1b2 <putchar>
    80002bca:	4529                	li	a0,10
    80002bcc:	5e62b0ef          	jal	8002e1b2 <putchar>
    80002bd0:	cc040ee3          	beqz	s0,800028ac <two_stage_translation_1+0x19e>
    80002bd4:	fde48493          	addi	s1,s1,-34
    80002bd8:	0014b493          	seqz	s1,s1
    80002bdc:	b9c9                	j	800028ae <two_stage_translation_1+0x1a0>
    TEST_ASSERT(
    80002bde:	7418                	ld	a4,40(s0)
    80002be0:	400197b7          	lui	a5,0x40019
    80002be4:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002be8:	d4f711e3          	bne	a4,a5,8000292a <two_stage_translation_1+0x21c>
    80002bec:	00059717          	auipc	a4,0x59
    80002bf0:	42872703          	lw	a4,1064(a4) # 8005c014 <excpt+0x4>
    80002bf4:	478d                	li	a5,3
    80002bf6:	d2f71ae3          	bne	a4,a5,8000292a <two_stage_translation_1+0x21c>
    80002bfa:	00059797          	auipc	a5,0x59
    80002bfe:	4467c783          	lbu	a5,1094(a5) # 8005c040 <excpt+0x30>
    80002c02:	d20784e3          	beqz	a5,8000292a <two_stage_translation_1+0x21c>
    80002c06:	00059797          	auipc	a5,0x59
    80002c0a:	43b7c783          	lbu	a5,1083(a5) # 8005c041 <excpt+0x31>
    80002c0e:	d20798e3          	bnez	a5,8000293e <two_stage_translation_1+0x230>
    80002c12:	bb21                	j	8000292a <two_stage_translation_1+0x21c>
    TEST_ASSERT(
    80002c14:	7418                	ld	a4,40(s0)
    80002c16:	400197b7          	lui	a5,0x40019
    80002c1a:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002c1e:	daf714e3          	bne	a4,a5,800029c6 <two_stage_translation_1+0x2b8>
    80002c22:	00059717          	auipc	a4,0x59
    80002c26:	3f272703          	lw	a4,1010(a4) # 8005c014 <excpt+0x4>
    80002c2a:	4791                	li	a5,4
    80002c2c:	d8f71de3          	bne	a4,a5,800029c6 <two_stage_translation_1+0x2b8>
    80002c30:	00059797          	auipc	a5,0x59
    80002c34:	4107c783          	lbu	a5,1040(a5) # 8005c040 <excpt+0x30>
    80002c38:	d80787e3          	beqz	a5,800029c6 <two_stage_translation_1+0x2b8>
    80002c3c:	00059797          	auipc	a5,0x59
    80002c40:	4057c783          	lbu	a5,1029(a5) # 8005c041 <excpt+0x31>
    80002c44:	d8079be3          	bnez	a5,800029da <two_stage_translation_1+0x2cc>
    80002c48:	bbbd                	j	800029c6 <two_stage_translation_1+0x2b8>
    TEST_ASSERT(
    80002c4a:	00059717          	auipc	a4,0x59
    80002c4e:	3ca72703          	lw	a4,970(a4) # 8005c014 <excpt+0x4>
    80002c52:	4789                	li	a5,2
    80002c54:	e2f712e3          	bne	a4,a5,80002a78 <two_stage_translation_1+0x36a>
    80002c58:	00059797          	auipc	a5,0x59
    80002c5c:	3e87c783          	lbu	a5,1000(a5) # 8005c040 <excpt+0x30>
    80002c60:	e20786e3          	beqz	a5,80002a8c <two_stage_translation_1+0x37e>
    80002c64:	bd11                	j	80002a78 <two_stage_translation_1+0x36a>
    TEST_ASSERT(
    80002c66:	7418                	ld	a4,40(s0)
    80002c68:	400197b7          	lui	a5,0x40019
    80002c6c:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002c70:	d8f713e3          	bne	a4,a5,800029f6 <two_stage_translation_1+0x2e8>
    80002c74:	00059717          	auipc	a4,0x59
    80002c78:	3a072703          	lw	a4,928(a4) # 8005c014 <excpt+0x4>
    80002c7c:	4791                	li	a5,4
    80002c7e:	d6f71ce3          	bne	a4,a5,800029f6 <two_stage_translation_1+0x2e8>
    80002c82:	03045483          	lhu	s1,48(s0)
    80002c86:	eff48493          	addi	s1,s1,-257
    80002c8a:	0014b493          	seqz	s1,s1
    80002c8e:	b3a5                	j	800029f6 <two_stage_translation_1+0x2e8>
    TEST_ASSERT(
    80002c90:	7418                	ld	a4,40(s0)
    80002c92:	400197b7          	lui	a5,0x40019
    80002c96:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002c9a:	ccf710e3          	bne	a4,a5,8000295a <two_stage_translation_1+0x24c>
    80002c9e:	00059717          	auipc	a4,0x59
    80002ca2:	37672703          	lw	a4,886(a4) # 8005c014 <excpt+0x4>
    80002ca6:	478d                	li	a5,3
    80002ca8:	caf719e3          	bne	a4,a5,8000295a <two_stage_translation_1+0x24c>
    80002cac:	03045483          	lhu	s1,48(s0)
    80002cb0:	eff48493          	addi	s1,s1,-257
    80002cb4:	0014b493          	seqz	s1,s1
    80002cb8:	b14d                	j	8000295a <two_stage_translation_1+0x24c>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002cba:	00030597          	auipc	a1,0x30
    80002cbe:	9ee58593          	addi	a1,a1,-1554 # 800326a8 <__func__.0+0x2c0>
    80002cc2:	00030517          	auipc	a0,0x30
    80002cc6:	a3650513          	addi	a0,a0,-1482 # 800326f8 <__func__.0+0x310>
    80002cca:	7fa2c0ef          	jal	8002f4c4 <printf>
    80002cce:	4529                	li	a0,10
    80002cd0:	4e22b0ef          	jal	8002e1b2 <putchar>
    80002cd4:	bc040ce3          	beqz	s0,800028ac <two_stage_translation_1+0x19e>
    80002cd8:	bdf5                	j	80002bd4 <two_stage_translation_1+0x4c6>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002cda:	00030597          	auipc	a1,0x30
    80002cde:	9ce58593          	addi	a1,a1,-1586 # 800326a8 <__func__.0+0x2c0>
    80002ce2:	00030517          	auipc	a0,0x30
    80002ce6:	a1650513          	addi	a0,a0,-1514 # 800326f8 <__func__.0+0x310>
    80002cea:	7da2c0ef          	jal	8002f4c4 <printf>
    80002cee:	4529                	li	a0,10
    80002cf0:	4c22b0ef          	jal	8002e1b2 <putchar>
    80002cf4:	b40406e3          	beqz	s0,80002840 <two_stage_translation_1+0x132>
    80002cf8:	b589                	j	80002b3a <two_stage_translation_1+0x42c>
    TEST_ASSERT(
    80002cfa:	7418                	ld	a4,40(s0)
    80002cfc:	400197b7          	lui	a5,0x40019
    80002d00:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002d04:	c0f714e3          	bne	a4,a5,8000290c <two_stage_translation_1+0x1fe>
    80002d08:	00059717          	auipc	a4,0x59
    80002d0c:	30c72703          	lw	a4,780(a4) # 8005c014 <excpt+0x4>
    80002d10:	478d                	li	a5,3
    80002d12:	bef71de3          	bne	a4,a5,8000290c <two_stage_translation_1+0x1fe>
    80002d16:	03045703          	lhu	a4,48(s0)
    80002d1a:	10100793          	li	a5,257
    80002d1e:	00030597          	auipc	a1,0x30
    80002d22:	98a58593          	addi	a1,a1,-1654 # 800326a8 <__func__.0+0x2c0>
    80002d26:	bef703e3          	beq	a4,a5,8000290c <two_stage_translation_1+0x1fe>
    80002d2a:	00030597          	auipc	a1,0x30
    80002d2e:	98e58593          	addi	a1,a1,-1650 # 800326b8 <__func__.0+0x2d0>
    80002d32:	bee9                	j	8000290c <two_stage_translation_1+0x1fe>
    TEST_ASSERT(
    80002d34:	00059717          	auipc	a4,0x59
    80002d38:	2e072703          	lw	a4,736(a4) # 8005c014 <excpt+0x4>
    80002d3c:	4789                	li	a5,2
    80002d3e:	d0f71ee3          	bne	a4,a5,80002a5a <two_stage_translation_1+0x34c>
    80002d42:	00059797          	auipc	a5,0x59
    80002d46:	2fe7c783          	lbu	a5,766(a5) # 8005c040 <excpt+0x30>
    80002d4a:	00030597          	auipc	a1,0x30
    80002d4e:	95e58593          	addi	a1,a1,-1698 # 800326a8 <__func__.0+0x2c0>
    80002d52:	d00784e3          	beqz	a5,80002a5a <two_stage_translation_1+0x34c>
    80002d56:	00030597          	auipc	a1,0x30
    80002d5a:	96258593          	addi	a1,a1,-1694 # 800326b8 <__func__.0+0x2d0>
    80002d5e:	b9f5                	j	80002a5a <two_stage_translation_1+0x34c>
    TEST_ASSERT(
    80002d60:	7418                	ld	a4,40(s0)
    80002d62:	400197b7          	lui	a5,0x40019
    80002d66:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002d6a:	c2f71fe3          	bne	a4,a5,800029a8 <two_stage_translation_1+0x29a>
    80002d6e:	00059717          	auipc	a4,0x59
    80002d72:	2a672703          	lw	a4,678(a4) # 8005c014 <excpt+0x4>
    80002d76:	4791                	li	a5,4
    80002d78:	c2f718e3          	bne	a4,a5,800029a8 <two_stage_translation_1+0x29a>
    80002d7c:	03045703          	lhu	a4,48(s0)
    80002d80:	10100793          	li	a5,257
    80002d84:	00030597          	auipc	a1,0x30
    80002d88:	92458593          	addi	a1,a1,-1756 # 800326a8 <__func__.0+0x2c0>
    80002d8c:	c0f70ee3          	beq	a4,a5,800029a8 <two_stage_translation_1+0x29a>
    80002d90:	00030597          	auipc	a1,0x30
    80002d94:	92858593          	addi	a1,a1,-1752 # 800326b8 <__func__.0+0x2d0>
    80002d98:	b901                	j	800029a8 <two_stage_translation_1+0x29a>

0000000080002d9a <two_stage_translation_2>:

bool two_stage_translation_2(){
    80002d9a:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80002d9c:	0002d597          	auipc	a1,0x2d
    80002da0:	53c58593          	addi	a1,a1,1340 # 800302d8 <__func__.17>
    80002da4:	00030517          	auipc	a0,0x30
    80002da8:	92450513          	addi	a0,a0,-1756 # 800326c8 <__func__.0+0x2e0>
bool two_stage_translation_2(){
    80002dac:	f406                	sd	ra,40(sp)
    80002dae:	f022                	sd	s0,32(sp)
    80002db0:	ec26                	sd	s1,24(sp)
    80002db2:	e84a                	sd	s2,16(sp)
    80002db4:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002db6:	70e2c0ef          	jal	8002f4c4 <printf>
    80002dba:	4529                	li	a0,10
    80002dbc:	3f62b0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    80002dc0:	4511                	li	a0,4
    80002dc2:	952fe0ef          	jal	80000f14 <goto_priv>
    *((volatile uint64_t*) addr) = val;
    80002dc6:	2201b737          	lui	a4,0x2201b
    80002dca:	000887b7          	lui	a5,0x88
    80002dce:	070a                	slli	a4,a4,0x2
    80002dd0:	44c5                	li	s1,17
    80002dd2:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002dd6:	e304                	sd	s1,0(a4)
    80002dd8:	07b2                	slli	a5,a5,0xc
    80002dda:	02200913          	li	s2,34
    80002dde:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002de2:	450d                	li	a0,3
    80002de4:	930fe0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80002de8:	805fd0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80002dec:	be5fd0ef          	jal	800009d0 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002df0:	999fd0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_VS);
    80002df4:	4509                	li	a0,2
    80002df6:	91efe0ef          	jal	80000f14 <goto_priv>
    return *((volatile uint64_t*) addr);
    80002dfa:	4001b737          	lui	a4,0x4001b
    80002dfe:	070a                	slli	a4,a4,0x2
    80002e00:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002e04:	001007b7          	lui	a5,0x100
    80002e08:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002e0c:	07b2                	slli	a5,a5,0xc
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002e0e:	00030617          	auipc	a2,0x30
    80002e12:	e2260613          	addi	a2,a2,-478 # 80032c30 <__func__.0+0x848>
    80002e16:	08c00593          	li	a1,140
    80002e1a:	00030517          	auipc	a0,0x30
    80002e1e:	8c650513          	addi	a0,a0,-1850 # 800326e0 <__func__.0+0x2f8>
    80002e22:	6380                	ld	s0,0(a5)
    80002e24:	6a02c0ef          	jal	8002f4c4 <printf>
    80002e28:	0c998b63          	beq	s3,s1,80002efe <two_stage_translation_2+0x164>
    80002e2c:	00030597          	auipc	a1,0x30
    80002e30:	88c58593          	addi	a1,a1,-1908 # 800326b8 <__func__.0+0x2d0>
    80002e34:	00030517          	auipc	a0,0x30
    80002e38:	8c450513          	addi	a0,a0,-1852 # 800326f8 <__func__.0+0x310>
    80002e3c:	6882c0ef          	jal	8002f4c4 <printf>
    80002e40:	00030517          	auipc	a0,0x30
    80002e44:	8c050513          	addi	a0,a0,-1856 # 80032700 <__func__.0+0x318>
    80002e48:	67c2c0ef          	jal	8002f4c4 <printf>
    80002e4c:	02900513          	li	a0,41
    80002e50:	3622b0ef          	jal	8002e1b2 <putchar>
    80002e54:	4529                	li	a0,10
    80002e56:	35c2b0ef          	jal	8002e1b2 <putchar>
    80002e5a:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    80002e5c:	450d                	li	a0,3
    80002e5e:	8b6fe0ef          	jal	80000f14 <goto_priv>
    hpt_switch();
    80002e62:	f81fd0ef          	jal	80000de2 <hpt_switch>
    goto_priv(PRIV_VS);
    80002e66:	4509                	li	a0,2
    80002e68:	8acfe0ef          	jal	80000f14 <goto_priv>
    80002e6c:	001007b7          	lui	a5,0x100
    80002e70:	4001b737          	lui	a4,0x4001b
    80002e74:	070a                	slli	a4,a4,0x2
    80002e76:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002e7a:	07b2                	slli	a5,a5,0xc
    80002e7c:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002e7e:	00030617          	auipc	a2,0x30
    80002e82:	ee260613          	addi	a2,a2,-286 # 80032d60 <__func__.0+0x978>
    80002e86:	08c00593          	li	a1,140
    80002e8a:	00030517          	auipc	a0,0x30
    80002e8e:	85650513          	addi	a0,a0,-1962 # 800326e0 <__func__.0+0x2f8>
    80002e92:	0007b903          	ld	s2,0(a5)
    80002e96:	62e2c0ef          	jal	8002f4c4 <printf>
    80002e9a:	47c5                	li	a5,17
    80002e9c:	0af48d63          	beq	s1,a5,80002f56 <two_stage_translation_2+0x1bc>
    80002ea0:	00030597          	auipc	a1,0x30
    80002ea4:	81858593          	addi	a1,a1,-2024 # 800326b8 <__func__.0+0x2d0>
    80002ea8:	00030517          	auipc	a0,0x30
    80002eac:	85050513          	addi	a0,a0,-1968 # 800326f8 <__func__.0+0x310>
    80002eb0:	6142c0ef          	jal	8002f4c4 <printf>
    80002eb4:	00030517          	auipc	a0,0x30
    80002eb8:	84c50513          	addi	a0,a0,-1972 # 80032700 <__func__.0+0x318>
    80002ebc:	6082c0ef          	jal	8002f4c4 <printf>
    80002ec0:	02900513          	li	a0,41
    80002ec4:	2ee2b0ef          	jal	8002e1b2 <putchar>
    80002ec8:	4529                	li	a0,10
    80002eca:	2e82b0ef          	jal	8002e1b2 <putchar>
    80002ece:	4401                	li	s0,0


    TEST_END();
    80002ed0:	0002f597          	auipc	a1,0x2f
    80002ed4:	7e858593          	addi	a1,a1,2024 # 800326b8 <__func__.0+0x2d0>
    80002ed8:	00030517          	auipc	a0,0x30
    80002edc:	88850513          	addi	a0,a0,-1912 # 80032760 <__func__.0+0x378>
    80002ee0:	5e42c0ef          	jal	8002f4c4 <printf>
    80002ee4:	4511                	li	a0,4
    80002ee6:	82efe0ef          	jal	80000f14 <goto_priv>
    80002eea:	88dfe0ef          	jal	80001776 <reset_state>
}
    80002eee:	70a2                	ld	ra,40(sp)
    80002ef0:	8522                	mv	a0,s0
    80002ef2:	7402                	ld	s0,32(sp)
    80002ef4:	64e2                	ld	s1,24(sp)
    80002ef6:	6942                	ld	s2,16(sp)
    80002ef8:	69a2                	ld	s3,8(sp)
    80002efa:	6145                	addi	sp,sp,48
    80002efc:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002efe:	03240e63          	beq	s0,s2,80002f3a <two_stage_translation_2+0x1a0>
    80002f02:	0002f597          	auipc	a1,0x2f
    80002f06:	7b658593          	addi	a1,a1,1974 # 800326b8 <__func__.0+0x2d0>
    80002f0a:	0002f517          	auipc	a0,0x2f
    80002f0e:	7ee50513          	addi	a0,a0,2030 # 800326f8 <__func__.0+0x310>
    80002f12:	5b22c0ef          	jal	8002f4c4 <printf>
    80002f16:	0002f517          	auipc	a0,0x2f
    80002f1a:	7ea50513          	addi	a0,a0,2026 # 80032700 <__func__.0+0x318>
    80002f1e:	5a62c0ef          	jal	8002f4c4 <printf>
    80002f22:	02900513          	li	a0,41
    80002f26:	28c2b0ef          	jal	8002e1b2 <putchar>
    80002f2a:	4529                	li	a0,10
    80002f2c:	2862b0ef          	jal	8002e1b2 <putchar>
    80002f30:	fde40413          	addi	s0,s0,-34
    80002f34:	00143413          	seqz	s0,s0
    80002f38:	b715                	j	80002e5c <two_stage_translation_2+0xc2>
    80002f3a:	0002f597          	auipc	a1,0x2f
    80002f3e:	76e58593          	addi	a1,a1,1902 # 800326a8 <__func__.0+0x2c0>
    80002f42:	0002f517          	auipc	a0,0x2f
    80002f46:	7b650513          	addi	a0,a0,1974 # 800326f8 <__func__.0+0x310>
    80002f4a:	57a2c0ef          	jal	8002f4c4 <printf>
    80002f4e:	4529                	li	a0,10
    80002f50:	2622b0ef          	jal	8002e1b2 <putchar>
    80002f54:	bff1                	j	80002f30 <two_stage_translation_2+0x196>
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002f56:	02200793          	li	a5,34
    80002f5a:	f4f913e3          	bne	s2,a5,80002ea0 <two_stage_translation_2+0x106>
    80002f5e:	0002f597          	auipc	a1,0x2f
    80002f62:	74a58593          	addi	a1,a1,1866 # 800326a8 <__func__.0+0x2c0>
    80002f66:	0002f517          	auipc	a0,0x2f
    80002f6a:	79250513          	addi	a0,a0,1938 # 800326f8 <__func__.0+0x310>
    80002f6e:	5562c0ef          	jal	8002f4c4 <printf>
    80002f72:	4529                	li	a0,10
    80002f74:	23e2b0ef          	jal	8002e1b2 <putchar>
    80002f78:	d839                	beqz	s0,80002ece <two_stage_translation_2+0x134>
    80002f7a:	4405                	li	s0,1
    TEST_END();
    80002f7c:	0002f597          	auipc	a1,0x2f
    80002f80:	72c58593          	addi	a1,a1,1836 # 800326a8 <__func__.0+0x2c0>
    80002f84:	bf91                	j	80002ed8 <two_stage_translation_2+0x13e>

0000000080002f86 <two_stage_translation_3>:

bool two_stage_translation_3(){
    80002f86:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80002f88:	0002d597          	auipc	a1,0x2d
    80002f8c:	36858593          	addi	a1,a1,872 # 800302f0 <__func__.16>
    80002f90:	0002f517          	auipc	a0,0x2f
    80002f94:	73850513          	addi	a0,a0,1848 # 800326c8 <__func__.0+0x2e0>
bool two_stage_translation_3(){
    80002f98:	f406                	sd	ra,40(sp)
    80002f9a:	f022                	sd	s0,32(sp)
    80002f9c:	ec26                	sd	s1,24(sp)
    80002f9e:	e84a                	sd	s2,16(sp)
    80002fa0:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002fa2:	5222c0ef          	jal	8002f4c4 <printf>
    80002fa6:	4529                	li	a0,10
    80002fa8:	20a2b0ef          	jal	8002e1b2 <putchar>
    *((volatile uint64_t*) addr) = val;
    80002fac:	2201b737          	lui	a4,0x2201b
    80002fb0:	000887b7          	lui	a5,0x88
    80002fb4:	070a                	slli	a4,a4,0x2
    80002fb6:	44c5                	li	s1,17
    80002fb8:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002fbc:	e304                	sd	s1,0(a4)
    80002fbe:	07b2                	slli	a5,a5,0xc
    80002fc0:	02200913          	li	s2,34
    80002fc4:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002fc8:	450d                	li	a0,3
    80002fca:	f4bfd0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80002fce:	e1efd0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80002fd2:	9fffd0ef          	jal	800009d0 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002fd6:	fb2fd0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_VS);
    80002fda:	4509                	li	a0,2
    80002fdc:	f39fd0ef          	jal	80000f14 <goto_priv>
    return *((volatile uint64_t*) addr);
    80002fe0:	4001b737          	lui	a4,0x4001b
    80002fe4:	070a                	slli	a4,a4,0x2
    80002fe6:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002fea:	001007b7          	lui	a5,0x100
    80002fee:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002ff2:	07b2                	slli	a5,a5,0xc
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002ff4:	00030617          	auipc	a2,0x30
    80002ff8:	c3c60613          	addi	a2,a2,-964 # 80032c30 <__func__.0+0x848>
    80002ffc:	08c00593          	li	a1,140
    80003000:	0002f517          	auipc	a0,0x2f
    80003004:	6e050513          	addi	a0,a0,1760 # 800326e0 <__func__.0+0x2f8>
    80003008:	6380                	ld	s0,0(a5)
    8000300a:	4ba2c0ef          	jal	8002f4c4 <printf>
    8000300e:	0c998863          	beq	s3,s1,800030de <two_stage_translation_3+0x158>
    80003012:	0002f597          	auipc	a1,0x2f
    80003016:	6a658593          	addi	a1,a1,1702 # 800326b8 <__func__.0+0x2d0>
    8000301a:	0002f517          	auipc	a0,0x2f
    8000301e:	6de50513          	addi	a0,a0,1758 # 800326f8 <__func__.0+0x310>
    80003022:	4a22c0ef          	jal	8002f4c4 <printf>
    80003026:	0002f517          	auipc	a0,0x2f
    8000302a:	6da50513          	addi	a0,a0,1754 # 80032700 <__func__.0+0x318>
    8000302e:	4962c0ef          	jal	8002f4c4 <printf>
    80003032:	02900513          	li	a0,41
    80003036:	17c2b0ef          	jal	8002e1b2 <putchar>
    8000303a:	4529                	li	a0,10
    8000303c:	1762b0ef          	jal	8002e1b2 <putchar>
    80003040:	4401                	li	s0,0
    
    goto_priv(PRIV_VS);
    80003042:	4509                	li	a0,2
    80003044:	ed1fd0ef          	jal	80000f14 <goto_priv>

    vspt_switch();
    80003048:	d79fd0ef          	jal	80000dc0 <vspt_switch>
    8000304c:	001007b7          	lui	a5,0x100
    80003050:	4001b737          	lui	a4,0x4001b
    80003054:	070a                	slli	a4,a4,0x2
    80003056:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000305a:	07b2                	slli	a5,a5,0xc
    8000305c:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    8000305e:	00030617          	auipc	a2,0x30
    80003062:	d5260613          	addi	a2,a2,-686 # 80032db0 <__func__.0+0x9c8>
    80003066:	08c00593          	li	a1,140
    8000306a:	0002f517          	auipc	a0,0x2f
    8000306e:	67650513          	addi	a0,a0,1654 # 800326e0 <__func__.0+0x2f8>
    80003072:	0007b903          	ld	s2,0(a5)
    80003076:	44e2c0ef          	jal	8002f4c4 <printf>
    8000307a:	47c5                	li	a5,17
    8000307c:	0af48d63          	beq	s1,a5,80003136 <two_stage_translation_3+0x1b0>
    80003080:	0002f597          	auipc	a1,0x2f
    80003084:	63858593          	addi	a1,a1,1592 # 800326b8 <__func__.0+0x2d0>
    80003088:	0002f517          	auipc	a0,0x2f
    8000308c:	67050513          	addi	a0,a0,1648 # 800326f8 <__func__.0+0x310>
    80003090:	4342c0ef          	jal	8002f4c4 <printf>
    80003094:	0002f517          	auipc	a0,0x2f
    80003098:	66c50513          	addi	a0,a0,1644 # 80032700 <__func__.0+0x318>
    8000309c:	4282c0ef          	jal	8002f4c4 <printf>
    800030a0:	02900513          	li	a0,41
    800030a4:	10e2b0ef          	jal	8002e1b2 <putchar>
    800030a8:	4529                	li	a0,10
    800030aa:	1082b0ef          	jal	8002e1b2 <putchar>
    800030ae:	4401                	li	s0,0

    TEST_END();
    800030b0:	0002f597          	auipc	a1,0x2f
    800030b4:	60858593          	addi	a1,a1,1544 # 800326b8 <__func__.0+0x2d0>
    800030b8:	0002f517          	auipc	a0,0x2f
    800030bc:	6a850513          	addi	a0,a0,1704 # 80032760 <__func__.0+0x378>
    800030c0:	4042c0ef          	jal	8002f4c4 <printf>
    800030c4:	4511                	li	a0,4
    800030c6:	e4ffd0ef          	jal	80000f14 <goto_priv>
    800030ca:	eacfe0ef          	jal	80001776 <reset_state>
}
    800030ce:	70a2                	ld	ra,40(sp)
    800030d0:	8522                	mv	a0,s0
    800030d2:	7402                	ld	s0,32(sp)
    800030d4:	64e2                	ld	s1,24(sp)
    800030d6:	6942                	ld	s2,16(sp)
    800030d8:	69a2                	ld	s3,8(sp)
    800030da:	6145                	addi	sp,sp,48
    800030dc:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    800030de:	03240e63          	beq	s0,s2,8000311a <two_stage_translation_3+0x194>
    800030e2:	0002f597          	auipc	a1,0x2f
    800030e6:	5d658593          	addi	a1,a1,1494 # 800326b8 <__func__.0+0x2d0>
    800030ea:	0002f517          	auipc	a0,0x2f
    800030ee:	60e50513          	addi	a0,a0,1550 # 800326f8 <__func__.0+0x310>
    800030f2:	3d22c0ef          	jal	8002f4c4 <printf>
    800030f6:	0002f517          	auipc	a0,0x2f
    800030fa:	60a50513          	addi	a0,a0,1546 # 80032700 <__func__.0+0x318>
    800030fe:	3c62c0ef          	jal	8002f4c4 <printf>
    80003102:	02900513          	li	a0,41
    80003106:	0ac2b0ef          	jal	8002e1b2 <putchar>
    8000310a:	4529                	li	a0,10
    8000310c:	0a62b0ef          	jal	8002e1b2 <putchar>
    80003110:	fde40413          	addi	s0,s0,-34
    80003114:	00143413          	seqz	s0,s0
    80003118:	b72d                	j	80003042 <two_stage_translation_3+0xbc>
    8000311a:	0002f597          	auipc	a1,0x2f
    8000311e:	58e58593          	addi	a1,a1,1422 # 800326a8 <__func__.0+0x2c0>
    80003122:	0002f517          	auipc	a0,0x2f
    80003126:	5d650513          	addi	a0,a0,1494 # 800326f8 <__func__.0+0x310>
    8000312a:	39a2c0ef          	jal	8002f4c4 <printf>
    8000312e:	4529                	li	a0,10
    80003130:	0822b0ef          	jal	8002e1b2 <putchar>
    80003134:	bff1                	j	80003110 <two_stage_translation_3+0x18a>
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    80003136:	02200793          	li	a5,34
    8000313a:	f4f913e3          	bne	s2,a5,80003080 <two_stage_translation_3+0xfa>
    8000313e:	0002f597          	auipc	a1,0x2f
    80003142:	56a58593          	addi	a1,a1,1386 # 800326a8 <__func__.0+0x2c0>
    80003146:	0002f517          	auipc	a0,0x2f
    8000314a:	5b250513          	addi	a0,a0,1458 # 800326f8 <__func__.0+0x310>
    8000314e:	3762c0ef          	jal	8002f4c4 <printf>
    80003152:	4529                	li	a0,10
    80003154:	05e2b0ef          	jal	8002e1b2 <putchar>
    80003158:	d839                	beqz	s0,800030ae <two_stage_translation_3+0x128>
    8000315a:	4405                	li	s0,1
    TEST_END();
    8000315c:	0002f597          	auipc	a1,0x2f
    80003160:	54c58593          	addi	a1,a1,1356 # 800326a8 <__func__.0+0x2c0>
    80003164:	bf91                	j	800030b8 <two_stage_translation_3+0x132>

0000000080003166 <second_stage_only_translation>:

bool second_stage_only_translation(){
    80003166:	7179                	addi	sp,sp,-48

    /**
     * Test only 2nd stage translation.
     */
    TEST_START();
    80003168:	0002d597          	auipc	a1,0x2d
    8000316c:	1a058593          	addi	a1,a1,416 # 80030308 <__func__.15>
    80003170:	0002f517          	auipc	a0,0x2f
    80003174:	55850513          	addi	a0,a0,1368 # 800326c8 <__func__.0+0x2e0>
bool second_stage_only_translation(){
    80003178:	f406                	sd	ra,40(sp)
    8000317a:	f022                	sd	s0,32(sp)
    8000317c:	e84a                	sd	s2,16(sp)
    8000317e:	ec26                	sd	s1,24(sp)
    80003180:	e44e                	sd	s3,8(sp)
    80003182:	e052                	sd	s4,0(sp)
    TEST_START();
    80003184:	3402c0ef          	jal	8002f4c4 <printf>
    80003188:	4529                	li	a0,10
    8000318a:	0282b0ef          	jal	8002e1b2 <putchar>
    *((volatile uint64_t*) addr) = val;
    8000318e:	2201b737          	lui	a4,0x2201b
    80003192:	000887b7          	lui	a5,0x88
    80003196:	070a                	slli	a4,a4,0x2
    80003198:	4445                	li	s0,17
    8000319a:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    8000319e:	e300                	sd	s0,0(a4)
    800031a0:	07b2                	slli	a5,a5,0xc
    800031a2:	02200913          	li	s2,34
    800031a6:	0127b023          	sd	s2,0(a5)
    uintptr_t vaddr2 = vs_page_base(SWITCH2);
    write64(addr1, 0x11);
    write64(addr2, 0x22);   


    CSRS(medeleg, (1 << CAUSE_LGPF) | (1 << CAUSE_SGPF));
    800031aa:	00a007b7          	lui	a5,0xa00
    800031ae:	3027a073          	csrs	medeleg,a5

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    800031b2:	450d                	li	a0,3
    800031b4:	d61fd0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800031b8:	c34fd0ef          	jal	800005ec <hspt_init>
    hpt_init();
    800031bc:	815fd0ef          	jal	800009d0 <hpt_init>
    
    goto_priv(PRIV_VS);
    800031c0:	4509                	li	a0,2
    800031c2:	d53fd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800031c6:	c53fd0ef          	jal	80000e18 <test_setup_except_function>
    return *((volatile uint64_t*) addr);
    800031ca:	001007b7          	lui	a5,0x100
    800031ce:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800031d2:	4001b737          	lui	a4,0x4001b
    800031d6:	07b2                	slli	a5,a5,0xc
    800031d8:	070a                	slli	a4,a4,0x2
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    800031da:	00030617          	auipc	a2,0x30
    800031de:	a5660613          	addi	a2,a2,-1450 # 80032c30 <__func__.0+0x848>
    800031e2:	08c00593          	li	a1,140
    800031e6:	0002f517          	auipc	a0,0x2f
    800031ea:	4fa50513          	addi	a0,a0,1274 # 800326e0 <__func__.0+0x2f8>
    800031ee:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800031f2:	0007ba03          	ld	s4,0(a5)
    800031f6:	2ce2c0ef          	jal	8002f4c4 <printf>
    800031fa:	00059797          	auipc	a5,0x59
    800031fe:	e177c783          	lbu	a5,-489(a5) # 8005c011 <excpt+0x1>
    80003202:	00059497          	auipc	s1,0x59
    80003206:	e0e48493          	addi	s1,s1,-498 # 8005c010 <excpt>
    8000320a:	ef91                	bnez	a5,80003226 <second_stage_only_translation+0xc0>
    8000320c:	2a898663          	beq	s3,s0,800034b8 <second_stage_only_translation+0x352>
    80003210:	0002f597          	auipc	a1,0x2f
    80003214:	4a858593          	addi	a1,a1,1192 # 800326b8 <__func__.0+0x2d0>
    80003218:	0002f517          	auipc	a0,0x2f
    8000321c:	4e050513          	addi	a0,a0,1248 # 800326f8 <__func__.0+0x310>
    80003220:	2a42c0ef          	jal	8002f4c4 <printf>
    80003224:	a01d                	j	8000324a <second_stage_only_translation+0xe4>
    80003226:	0002f597          	auipc	a1,0x2f
    8000322a:	49258593          	addi	a1,a1,1170 # 800326b8 <__func__.0+0x2d0>
    8000322e:	0002f517          	auipc	a0,0x2f
    80003232:	4ca50513          	addi	a0,a0,1226 # 800326f8 <__func__.0+0x310>
    80003236:	28e2c0ef          	jal	8002f4c4 <printf>
    8000323a:	00059797          	auipc	a5,0x59
    8000323e:	dd77c783          	lbu	a5,-553(a5) # 8005c011 <excpt+0x1>
    80003242:	2a079f63          	bnez	a5,80003500 <second_stage_only_translation+0x39a>
    80003246:	32898f63          	beq	s3,s0,80003584 <second_stage_only_translation+0x41e>
    8000324a:	0002f517          	auipc	a0,0x2f
    8000324e:	4b650513          	addi	a0,a0,1206 # 80032700 <__func__.0+0x318>
    80003252:	2722c0ef          	jal	8002f4c4 <printf>
    80003256:	02900513          	li	a0,41
    8000325a:	7592a0ef          	jal	8002e1b2 <putchar>
    8000325e:	4529                	li	a0,10
    80003260:	7532a0ef          	jal	8002e1b2 <putchar>
    80003264:	4401                	li	s0,0

    goto_priv(PRIV_HS);
    80003266:	450d                	li	a0,3
    80003268:	cadfd0ef          	jal	80000f14 <goto_priv>
    hpt_switch();       //在nemu中，执行read64没有变，执行hlvd变化了
    8000326c:	b77fd0ef          	jal	80000de2 <hpt_switch>
    asm volatile(
    80003270:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80003274:	62000073          	.insn	4, 0x62000073
    hfence(); //l2tlb
    goto_priv(PRIV_VS);
    80003278:	4509                	li	a0,2
    8000327a:	c9bfd0ef          	jal	80000f14 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    8000327e:	12000073          	sfence.vma
    sfence(); //l1tlb
    TEST_SETUP_EXCEPT();
    80003282:	b97fd0ef          	jal	80000e18 <test_setup_except_function>
    80003286:	001007b7          	lui	a5,0x100
    8000328a:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000328e:	4001b737          	lui	a4,0x4001b
    80003292:	07b2                	slli	a5,a5,0xc
    80003294:	070a                	slli	a4,a4,0x2
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80003296:	00030617          	auipc	a2,0x30
    8000329a:	b6a60613          	addi	a2,a2,-1174 # 80032e00 <__func__.0+0xa18>
    8000329e:	08c00593          	li	a1,140
    800032a2:	0002f517          	auipc	a0,0x2f
    800032a6:	43e50513          	addi	a0,a0,1086 # 800326e0 <__func__.0+0x2f8>
    800032aa:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800032ae:	0007b983          	ld	s3,0(a5)
    800032b2:	2122c0ef          	jal	8002f4c4 <printf>
    800032b6:	00059797          	auipc	a5,0x59
    800032ba:	d5b7c783          	lbu	a5,-677(a5) # 8005c011 <excpt+0x1>
    800032be:	18079363          	bnez	a5,80003444 <second_stage_only_translation+0x2de>
    800032c2:	02200793          	li	a5,34
    800032c6:	28f90b63          	beq	s2,a5,8000355c <second_stage_only_translation+0x3f6>
    800032ca:	0002f597          	auipc	a1,0x2f
    800032ce:	3ee58593          	addi	a1,a1,1006 # 800326b8 <__func__.0+0x2d0>
    800032d2:	0002f517          	auipc	a0,0x2f
    800032d6:	42650513          	addi	a0,a0,1062 # 800326f8 <__func__.0+0x310>
    800032da:	1ea2c0ef          	jal	8002f4c4 <printf>
    800032de:	0002f517          	auipc	a0,0x2f
    800032e2:	42250513          	addi	a0,a0,1058 # 80032700 <__func__.0+0x318>
    800032e6:	1de2c0ef          	jal	8002f4c4 <printf>
    800032ea:	02900513          	li	a0,41
    800032ee:	6c52a0ef          	jal	8002e1b2 <putchar>
    800032f2:	4529                	li	a0,10
    800032f4:	6bf2a0ef          	jal	8002e1b2 <putchar>
    800032f8:	c811                	beqz	s0,8000330c <second_stage_only_translation+0x1a6>
    800032fa:	00059797          	auipc	a5,0x59
    800032fe:	d177c783          	lbu	a5,-745(a5) # 8005c011 <excpt+0x1>
    80003302:	e789                	bnez	a5,8000330c <second_stage_only_translation+0x1a6>
    80003304:	02200793          	li	a5,34
    80003308:	18f90063          	beq	s2,a5,80003488 <second_stage_only_translation+0x322>
    8000330c:	4401                	li	s0,0

    TEST_SETUP_EXCEPT();
    8000330e:	b0bfd0ef          	jal	80000e18 <test_setup_except_function>
    80003312:	001007b7          	lui	a5,0x100
    80003316:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000331a:	07b2                	slli	a5,a5,0xc
    8000331c:	639c                	ld	a5,0(a5)
    (void) read64(vs_page_base(VSRWX_GI));  
    TEST_ASSERT(
    8000331e:	08c00593          	li	a1,140
    80003322:	00030617          	auipc	a2,0x30
    80003326:	b0660613          	addi	a2,a2,-1274 # 80032e28 <__func__.0+0xa40>
    8000332a:	0002f517          	auipc	a0,0x2f
    8000332e:	3b650513          	addi	a0,a0,950 # 800326e0 <__func__.0+0x2f8>
    80003332:	1922c0ef          	jal	8002f4c4 <printf>
    80003336:	00059797          	auipc	a5,0x59
    8000333a:	cdb7c783          	lbu	a5,-805(a5) # 8005c011 <excpt+0x1>
    8000333e:	0002f597          	auipc	a1,0x2f
    80003342:	37a58593          	addi	a1,a1,890 # 800326b8 <__func__.0+0x2d0>
    80003346:	c789                	beqz	a5,80003350 <second_stage_only_translation+0x1ea>
    80003348:	6498                	ld	a4,8(s1)
    8000334a:	47d5                	li	a5,21
    8000334c:	1ef70863          	beq	a4,a5,8000353c <second_stage_only_translation+0x3d6>
    80003350:	0002f517          	auipc	a0,0x2f
    80003354:	3a850513          	addi	a0,a0,936 # 800326f8 <__func__.0+0x310>
    80003358:	16c2c0ef          	jal	8002f4c4 <printf>
    8000335c:	00059797          	auipc	a5,0x59
    80003360:	cb57c783          	lbu	a5,-843(a5) # 8005c011 <excpt+0x1>
    80003364:	c789                	beqz	a5,8000336e <second_stage_only_translation+0x208>
    80003366:	6498                	ld	a4,8(s1)
    80003368:	47d5                	li	a5,21
    8000336a:	12f70f63          	beq	a4,a5,800034a8 <second_stage_only_translation+0x342>
    8000336e:	0002f517          	auipc	a0,0x2f
    80003372:	39250513          	addi	a0,a0,914 # 80032700 <__func__.0+0x318>
    80003376:	14e2c0ef          	jal	8002f4c4 <printf>
    8000337a:	02900513          	li	a0,41
    8000337e:	6352a0ef          	jal	8002e1b2 <putchar>
    80003382:	4529                	li	a0,10
    80003384:	62f2a0ef          	jal	8002e1b2 <putchar>
    80003388:	c819                	beqz	s0,8000339e <second_stage_only_translation+0x238>
    8000338a:	00059797          	auipc	a5,0x59
    8000338e:	c877c783          	lbu	a5,-889(a5) # 8005c011 <excpt+0x1>
    80003392:	4401                	li	s0,0
    80003394:	c789                	beqz	a5,8000339e <second_stage_only_translation+0x238>
    80003396:	6498                	ld	a4,8(s1)
    80003398:	47d5                	li	a5,21
    8000339a:	18f70963          	beq	a4,a5,8000352c <second_stage_only_translation+0x3c6>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        excpt.priv == PRIV_HS
    );

    TEST_SETUP_EXCEPT();
    8000339e:	a7bfd0ef          	jal	80000e18 <test_setup_except_function>
    800033a2:	200007b7          	lui	a5,0x20000
    800033a6:	17fd                	addi	a5,a5,-1 # 1fffffff <STACK_SIZE+0x1fefffff>
    800033a8:	07b2                	slli	a5,a5,0xc
    800033aa:	639c                	ld	a5,0(a5)
    read64(vs_page_base_limit(TOP));
    TEST_ASSERT(
    800033ac:	08c00593          	li	a1,140
    800033b0:	00030617          	auipc	a2,0x30
    800033b4:	aa060613          	addi	a2,a2,-1376 # 80032e50 <__func__.0+0xa68>
    800033b8:	0002f517          	auipc	a0,0x2f
    800033bc:	32850513          	addi	a0,a0,808 # 800326e0 <__func__.0+0x2f8>
    800033c0:	1042c0ef          	jal	8002f4c4 <printf>
    800033c4:	00059797          	auipc	a5,0x59
    800033c8:	c4d7c783          	lbu	a5,-947(a5) # 8005c011 <excpt+0x1>
    800033cc:	0002f597          	auipc	a1,0x2f
    800033d0:	2ec58593          	addi	a1,a1,748 # 800326b8 <__func__.0+0x2d0>
    800033d4:	e789                	bnez	a5,800033de <second_stage_only_translation+0x278>
    800033d6:	0002f597          	auipc	a1,0x2f
    800033da:	2d258593          	addi	a1,a1,722 # 800326a8 <__func__.0+0x2c0>
    800033de:	0002f517          	auipc	a0,0x2f
    800033e2:	31a50513          	addi	a0,a0,794 # 800326f8 <__func__.0+0x310>
    800033e6:	0de2c0ef          	jal	8002f4c4 <printf>
    800033ea:	00059797          	auipc	a5,0x59
    800033ee:	c277c783          	lbu	a5,-985(a5) # 8005c011 <excpt+0x1>
    800033f2:	e3c5                	bnez	a5,80003492 <second_stage_only_translation+0x32c>
    800033f4:	4529                	li	a0,10
    800033f6:	5bd2a0ef          	jal	8002e1b2 <putchar>
    800033fa:	cc1d                	beqz	s0,80003438 <second_stage_only_translation+0x2d2>
    800033fc:	00059797          	auipc	a5,0x59
    80003400:	c157c783          	lbu	a5,-1003(a5) # 8005c011 <excpt+0x1>
    80003404:	eb95                	bnez	a5,80003438 <second_stage_only_translation+0x2d2>
    80003406:	4405                	li	s0,1
    //     "access top of guest pa space with high bits =/= 0", 
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_LGPF
    // ); 

    TEST_END();
    80003408:	0002f597          	auipc	a1,0x2f
    8000340c:	2a058593          	addi	a1,a1,672 # 800326a8 <__func__.0+0x2c0>
    80003410:	0002f517          	auipc	a0,0x2f
    80003414:	35050513          	addi	a0,a0,848 # 80032760 <__func__.0+0x378>
    80003418:	0ac2c0ef          	jal	8002f4c4 <printf>
    8000341c:	4511                	li	a0,4
    8000341e:	af7fd0ef          	jal	80000f14 <goto_priv>
    80003422:	b54fe0ef          	jal	80001776 <reset_state>
}
    80003426:	70a2                	ld	ra,40(sp)
    80003428:	8522                	mv	a0,s0
    8000342a:	7402                	ld	s0,32(sp)
    8000342c:	64e2                	ld	s1,24(sp)
    8000342e:	6942                	ld	s2,16(sp)
    80003430:	69a2                	ld	s3,8(sp)
    80003432:	6a02                	ld	s4,0(sp)
    80003434:	6145                	addi	sp,sp,48
    80003436:	8082                	ret
    TEST_ASSERT(
    80003438:	4401                	li	s0,0
    TEST_END();
    8000343a:	0002f597          	auipc	a1,0x2f
    8000343e:	27e58593          	addi	a1,a1,638 # 800326b8 <__func__.0+0x2d0>
    80003442:	b7f9                	j	80003410 <second_stage_only_translation+0x2aa>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80003444:	0002f597          	auipc	a1,0x2f
    80003448:	27458593          	addi	a1,a1,628 # 800326b8 <__func__.0+0x2d0>
    8000344c:	0002f517          	auipc	a0,0x2f
    80003450:	2ac50513          	addi	a0,a0,684 # 800326f8 <__func__.0+0x310>
    80003454:	0702c0ef          	jal	8002f4c4 <printf>
    80003458:	00059797          	auipc	a5,0x59
    8000345c:	bb97c783          	lbu	a5,-1095(a5) # 8005c011 <excpt+0x1>
    80003460:	e6079fe3          	bnez	a5,800032de <second_stage_only_translation+0x178>
    80003464:	02200793          	li	a5,34
    80003468:	e6f91be3          	bne	s2,a5,800032de <second_stage_only_translation+0x178>
    8000346c:	47c5                	li	a5,17
    8000346e:	e6f998e3          	bne	s3,a5,800032de <second_stage_only_translation+0x178>
    80003472:	4529                	li	a0,10
    80003474:	53f2a0ef          	jal	8002e1b2 <putchar>
    80003478:	e8040ae3          	beqz	s0,8000330c <second_stage_only_translation+0x1a6>
    8000347c:	00059797          	auipc	a5,0x59
    80003480:	b957c783          	lbu	a5,-1131(a5) # 8005c011 <excpt+0x1>
    80003484:	e80794e3          	bnez	a5,8000330c <second_stage_only_translation+0x1a6>
    80003488:	fef98413          	addi	s0,s3,-17
    8000348c:	00143413          	seqz	s0,s0
    80003490:	bdbd                	j	8000330e <second_stage_only_translation+0x1a8>
    TEST_ASSERT(
    80003492:	0002f517          	auipc	a0,0x2f
    80003496:	26e50513          	addi	a0,a0,622 # 80032700 <__func__.0+0x318>
    8000349a:	02a2c0ef          	jal	8002f4c4 <printf>
    8000349e:	02900513          	li	a0,41
    800034a2:	5112a0ef          	jal	8002e1b2 <putchar>
    800034a6:	b7b9                	j	800033f4 <second_stage_only_translation+0x28e>
    TEST_ASSERT(
    800034a8:	00059717          	auipc	a4,0x59
    800034ac:	b6c72703          	lw	a4,-1172(a4) # 8005c014 <excpt+0x4>
    800034b0:	478d                	li	a5,3
    800034b2:	eaf71ee3          	bne	a4,a5,8000336e <second_stage_only_translation+0x208>
    800034b6:	b5f1                	j	80003382 <second_stage_only_translation+0x21c>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    800034b8:	0f2a0263          	beq	s4,s2,8000359c <second_stage_only_translation+0x436>
    800034bc:	0002f597          	auipc	a1,0x2f
    800034c0:	1fc58593          	addi	a1,a1,508 # 800326b8 <__func__.0+0x2d0>
    800034c4:	0002f517          	auipc	a0,0x2f
    800034c8:	23450513          	addi	a0,a0,564 # 800326f8 <__func__.0+0x310>
    800034cc:	7f92b0ef          	jal	8002f4c4 <printf>
    800034d0:	0002f517          	auipc	a0,0x2f
    800034d4:	23050513          	addi	a0,a0,560 # 80032700 <__func__.0+0x318>
    800034d8:	7ed2b0ef          	jal	8002f4c4 <printf>
    800034dc:	02900513          	li	a0,41
    800034e0:	4d32a0ef          	jal	8002e1b2 <putchar>
    800034e4:	4529                	li	a0,10
    800034e6:	4cd2a0ef          	jal	8002e1b2 <putchar>
    800034ea:	00059797          	auipc	a5,0x59
    800034ee:	b277c783          	lbu	a5,-1241(a5) # 8005c011 <excpt+0x1>
    800034f2:	d60799e3          	bnez	a5,80003264 <second_stage_only_translation+0xfe>
    800034f6:	fdea0413          	addi	s0,s4,-34
    800034fa:	00143413          	seqz	s0,s0
    800034fe:	b3a5                	j	80003266 <second_stage_only_translation+0x100>
    80003500:	0002f517          	auipc	a0,0x2f
    80003504:	20050513          	addi	a0,a0,512 # 80032700 <__func__.0+0x318>
    80003508:	7bd2b0ef          	jal	8002f4c4 <printf>
    8000350c:	02900513          	li	a0,41
    80003510:	4a32a0ef          	jal	8002e1b2 <putchar>
    80003514:	4529                	li	a0,10
    80003516:	49d2a0ef          	jal	8002e1b2 <putchar>
    8000351a:	00059797          	auipc	a5,0x59
    8000351e:	af77c783          	lbu	a5,-1289(a5) # 8005c011 <excpt+0x1>
    80003522:	d40791e3          	bnez	a5,80003264 <second_stage_only_translation+0xfe>
    80003526:	fc8988e3          	beq	s3,s0,800034f6 <second_stage_only_translation+0x390>
    8000352a:	bb2d                	j	80003264 <second_stage_only_translation+0xfe>
    TEST_ASSERT(
    8000352c:	00059417          	auipc	s0,0x59
    80003530:	ae842403          	lw	s0,-1304(s0) # 8005c014 <excpt+0x4>
    80003534:	1475                	addi	s0,s0,-3
    80003536:	00143413          	seqz	s0,s0
    8000353a:	b595                	j	8000339e <second_stage_only_translation+0x238>
    8000353c:	00059717          	auipc	a4,0x59
    80003540:	ad872703          	lw	a4,-1320(a4) # 8005c014 <excpt+0x4>
    80003544:	478d                	li	a5,3
    80003546:	0002f597          	auipc	a1,0x2f
    8000354a:	16258593          	addi	a1,a1,354 # 800326a8 <__func__.0+0x2c0>
    8000354e:	e0f701e3          	beq	a4,a5,80003350 <second_stage_only_translation+0x1ea>
    80003552:	0002f597          	auipc	a1,0x2f
    80003556:	16658593          	addi	a1,a1,358 # 800326b8 <__func__.0+0x2d0>
    8000355a:	bbdd                	j	80003350 <second_stage_only_translation+0x1ea>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    8000355c:	47c5                	li	a5,17
    8000355e:	d6f996e3          	bne	s3,a5,800032ca <second_stage_only_translation+0x164>
    80003562:	0002f597          	auipc	a1,0x2f
    80003566:	14658593          	addi	a1,a1,326 # 800326a8 <__func__.0+0x2c0>
    8000356a:	0002f517          	auipc	a0,0x2f
    8000356e:	18e50513          	addi	a0,a0,398 # 800326f8 <__func__.0+0x310>
    80003572:	7532b0ef          	jal	8002f4c4 <printf>
    80003576:	00059797          	auipc	a5,0x59
    8000357a:	a9b7c783          	lbu	a5,-1381(a5) # 8005c011 <excpt+0x1>
    8000357e:	ee078ae3          	beqz	a5,80003472 <second_stage_only_translation+0x30c>
    80003582:	bbb1                	j	800032de <second_stage_only_translation+0x178>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80003584:	f52a16e3          	bne	s4,s2,800034d0 <second_stage_only_translation+0x36a>
    80003588:	4529                	li	a0,10
    8000358a:	4292a0ef          	jal	8002e1b2 <putchar>
    8000358e:	00059417          	auipc	s0,0x59
    80003592:	a8344403          	lbu	s0,-1405(s0) # 8005c011 <excpt+0x1>
    80003596:	00144413          	xori	s0,s0,1
    8000359a:	b1f1                	j	80003266 <second_stage_only_translation+0x100>
    8000359c:	0002f597          	auipc	a1,0x2f
    800035a0:	10c58593          	addi	a1,a1,268 # 800326a8 <__func__.0+0x2c0>
    800035a4:	0002f517          	auipc	a0,0x2f
    800035a8:	15450513          	addi	a0,a0,340 # 800326f8 <__func__.0+0x310>
    800035ac:	7192b0ef          	jal	8002f4c4 <printf>
    800035b0:	00059797          	auipc	a5,0x59
    800035b4:	a617c783          	lbu	a5,-1439(a5) # 8005c011 <excpt+0x1>
    800035b8:	dbe1                	beqz	a5,80003588 <second_stage_only_translation+0x422>
    800035ba:	bf19                	j	800034d0 <second_stage_only_translation+0x36a>

00000000800035bc <m_and_hs_using_vs_access_1>:
    );

}


bool m_and_hs_using_vs_access_1(){
    800035bc:	7179                	addi	sp,sp,-48

    uint64_t val, valu;
    uintptr_t vaddr = vs_page_base(SCRATCHPAD);
    uintptr_t addr;

    TEST_START();
    800035be:	0002d597          	auipc	a1,0x2d
    800035c2:	d6a58593          	addi	a1,a1,-662 # 80030328 <__func__.13>
    800035c6:	0002f517          	auipc	a0,0x2f
    800035ca:	10250513          	addi	a0,a0,258 # 800326c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_1(){
    800035ce:	f406                	sd	ra,40(sp)
    800035d0:	ec26                	sd	s1,24(sp)
    800035d2:	f022                	sd	s0,32(sp)
    800035d4:	e84a                	sd	s2,16(sp)
    800035d6:	e44e                	sd	s3,8(sp)
    800035d8:	e052                	sd	s4,0(sp)
    TEST_START();
    800035da:	6eb2b0ef          	jal	8002f4c4 <printf>
    800035de:	4529                	li	a0,10
    800035e0:	3d32a0ef          	jal	8002e1b2 <putchar>
    
    hspt_init();
    800035e4:	808fd0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    800035e8:	be8fd0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800035ec:	99cfd0ef          	jal	80000788 <vspt_init>

    TEST_SETUP_EXCEPT();
    800035f0:	829fd0ef          	jal	80000e18 <test_setup_except_function>
    if(curr_priv != PRIV_M){
    800035f4:	0003e497          	auipc	s1,0x3e
    800035f8:	a604a483          	lw	s1,-1440(s1) # 80041054 <curr_priv>
    800035fc:	4791                	li	a5,4
    800035fe:	02f48763          	beq	s1,a5,8000362c <m_and_hs_using_vs_access_1+0x70>
        ERROR("trying to write as mprv from low privilege");
    80003602:	00030517          	auipc	a0,0x30
    80003606:	88650513          	addi	a0,a0,-1914 # 80032e88 <__func__.0+0xaa0>
    8000360a:	6bb2b0ef          	jal	8002f4c4 <printf>
    8000360e:	11100613          	li	a2,273
    80003612:	0002d597          	auipc	a1,0x2d
    80003616:	d3658593          	addi	a1,a1,-714 # 80030348 <__func__.12>
    8000361a:	0002f517          	auipc	a0,0x2f
    8000361e:	23e50513          	addi	a0,a0,574 # 80032858 <__func__.0+0x470>
    80003622:	6a32b0ef          	jal	8002f4c4 <printf>
    80003626:	4501                	li	a0,0
    80003628:	2532b0ef          	jal	8002f07a <exit>
    asm volatile(
    8000362c:	01108437          	lui	s0,0x1108
    80003630:	ec140413          	addi	s0,s0,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80003634:	00100937          	lui	s2,0x100
    set_prev_priv(priv);
    80003638:	4509                	li	a0,2
    asm volatile(
    8000363a:	0442                	slli	s0,s0,0x10
    8000363c:	06b90913          	addi	s2,s2,107 # 10006b <STACK_SIZE+0x6b>
    set_prev_priv(priv);
    80003640:	ff4fd0ef          	jal	80000e34 <set_prev_priv>
    asm volatile(
    80003644:	1439                	addi	s0,s0,-18
    80003646:	0932                	slli	s2,s2,0xc
    80003648:	000209b7          	lui	s3,0x20
    8000364c:	3009a073          	csrs	mstatus,s3
    80003650:	00893023          	sd	s0,0(s2)
    80003654:	3009b073          	csrc	mstatus,s3
    if(curr_priv != PRIV_M){
    80003658:	0003e797          	auipc	a5,0x3e
    8000365c:	9fc7a783          	lw	a5,-1540(a5) # 80041054 <curr_priv>
    80003660:	02978763          	beq	a5,s1,8000368e <m_and_hs_using_vs_access_1+0xd2>
        ERROR("trying to read as mprv from low privilege");
    80003664:	00030517          	auipc	a0,0x30
    80003668:	86450513          	addi	a0,a0,-1948 # 80032ec8 <__func__.0+0xae0>
    8000366c:	6592b0ef          	jal	8002f4c4 <printf>
    80003670:	0fe00613          	li	a2,254
    80003674:	0002d597          	auipc	a1,0x2d
    80003678:	ce458593          	addi	a1,a1,-796 # 80030358 <__func__.11>
    8000367c:	0002f517          	auipc	a0,0x2f
    80003680:	1dc50513          	addi	a0,a0,476 # 80032858 <__func__.0+0x470>
    80003684:	6412b0ef          	jal	8002f4c4 <printf>
    80003688:	4501                	li	a0,0
    8000368a:	1f12b0ef          	jal	8002f07a <exit>
    set_prev_priv(priv);
    8000368e:	4509                	li	a0,2
    80003690:	fa4fd0ef          	jal	80000e34 <set_prev_priv>
    asm volatile(
    80003694:	3009a073          	csrs	mstatus,s3
    80003698:	00093483          	ld	s1,0(s2)
    8000369c:	3009b073          	csrc	mstatus,s3
    write64_mprv(PRIV_VS, vaddr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine sets mprv to access vs space",
    800036a0:	00030617          	auipc	a2,0x30
    800036a4:	86860613          	addi	a2,a2,-1944 # 80032f08 <__func__.0+0xb20>
    800036a8:	08c00593          	li	a1,140
    800036ac:	0002f517          	auipc	a0,0x2f
    800036b0:	03450513          	addi	a0,a0,52 # 800326e0 <__func__.0+0x2f8>
    800036b4:	6112b0ef          	jal	8002f4c4 <printf>
    800036b8:	00059797          	auipc	a5,0x59
    800036bc:	9597c783          	lbu	a5,-1703(a5) # 8005c011 <excpt+0x1>
    800036c0:	2a079663          	bnez	a5,8000396c <m_and_hs_using_vs_access_1+0x3b0>
    800036c4:	44848763          	beq	s1,s0,80003b12 <m_and_hs_using_vs_access_1+0x556>
    800036c8:	0002f597          	auipc	a1,0x2f
    800036cc:	ff058593          	addi	a1,a1,-16 # 800326b8 <__func__.0+0x2d0>
    800036d0:	0002f517          	auipc	a0,0x2f
    800036d4:	02850513          	addi	a0,a0,40 # 800326f8 <__func__.0+0x310>
    800036d8:	5ed2b0ef          	jal	8002f4c4 <printf>
    800036dc:	0002f517          	auipc	a0,0x2f
    800036e0:	02450513          	addi	a0,a0,36 # 80032700 <__func__.0+0x318>
    800036e4:	5e12b0ef          	jal	8002f4c4 <printf>
    800036e8:	02900513          	li	a0,41
    800036ec:	2c72a0ef          	jal	8002e1b2 <putchar>
    800036f0:	4529                	li	a0,10
    800036f2:	2c12a0ef          	jal	8002e1b2 <putchar>
    800036f6:	00059797          	auipc	a5,0x59
    800036fa:	91b7c783          	lbu	a5,-1765(a5) # 8005c011 <excpt+0x1>
    800036fe:	4901                	li	s2,0
    80003700:	eb91                	bnez	a5,80003714 <m_and_hs_using_vs_access_1+0x158>
    80003702:	011087b7          	lui	a5,0x1108
    80003706:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    8000370a:	07c2                	slli	a5,a5,0x10
    8000370c:	17b9                	addi	a5,a5,-18
    8000370e:	8c9d                	sub	s1,s1,a5
    80003710:	0014b913          	seqz	s2,s1
        excpt.triggered == false && val == 0x1107ec0ffee
    );

    //TODO: test mprv to access hs space

    goto_priv(PRIV_HS);
    80003714:	450d                	li	a0,3
    80003716:	ffefd0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    8000371a:	4509                	li	a0,2
    8000371c:	f18fd0ef          	jal	80000e34 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003720:	ef8fd0ef          	jal	80000e18 <test_setup_except_function>
        :: "r"(value), "r"(addr): "memory");
    return value;
}

static inline uint64_t hsvd(uintptr_t addr, uint64_t value){
    asm volatile(
    80003724:	37ab74b7          	lui	s1,0x37ab7
    80003728:	001007b7          	lui	a5,0x100
    8000372c:	048a                	slli	s1,s1,0x2
    8000372e:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003732:	eef48493          	addi	s1,s1,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80003736:	07b2                	slli	a5,a5,0xc
    80003738:	6e97c073          	.insn	4, 0x6e97c073
    asm volatile(
    8000373c:	6c07c473          	.insn	4, 0x6c07c473
    hsvd(vaddr, 0xdeadbeef);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd",
    80003740:	0002f617          	auipc	a2,0x2f
    80003744:	7f060613          	addi	a2,a2,2032 # 80032f30 <__func__.0+0xb48>
    80003748:	08c00593          	li	a1,140
    8000374c:	0002f517          	auipc	a0,0x2f
    80003750:	f9450513          	addi	a0,a0,-108 # 800326e0 <__func__.0+0x2f8>
    80003754:	5712b0ef          	jal	8002f4c4 <printf>
    80003758:	00059797          	auipc	a5,0x59
    8000375c:	8b97c783          	lbu	a5,-1863(a5) # 8005c011 <excpt+0x1>
    80003760:	24079263          	bnez	a5,800039a4 <m_and_hs_using_vs_access_1+0x3e8>
    80003764:	3c940863          	beq	s0,s1,80003b34 <m_and_hs_using_vs_access_1+0x578>
    80003768:	0002f597          	auipc	a1,0x2f
    8000376c:	f5058593          	addi	a1,a1,-176 # 800326b8 <__func__.0+0x2d0>
    80003770:	0002f517          	auipc	a0,0x2f
    80003774:	f8850513          	addi	a0,a0,-120 # 800326f8 <__func__.0+0x310>
    80003778:	54d2b0ef          	jal	8002f4c4 <printf>
    8000377c:	0002f517          	auipc	a0,0x2f
    80003780:	f8450513          	addi	a0,a0,-124 # 80032700 <__func__.0+0x318>
    80003784:	5412b0ef          	jal	8002f4c4 <printf>
    80003788:	02900513          	li	a0,41
    8000378c:	2272a0ef          	jal	8002e1b2 <putchar>
    80003790:	4529                	li	a0,10
    80003792:	2212a0ef          	jal	8002e1b2 <putchar>
    80003796:	32091563          	bnez	s2,80003ac0 <m_and_hs_using_vs_access_1+0x504>
    8000379a:	4401                	li	s0,0
        excpt.triggered == false && val == 0xdeadbeef
    );

    TEST_SETUP_EXCEPT();
    8000379c:	e7cfd0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    800037a0:	001007b7          	lui	a5,0x100
    800037a4:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800037a8:	07b2                	slli	a5,a5,0xc
    800037aa:	0ff00913          	li	s2,255
    800037ae:	6327c073          	.insn	4, 0x6327c073
    asm volatile(
    800037b2:	6007c9f3          	.insn	4, 0x6007c9f3
    asm volatile(
    800037b6:	6017c4f3          	.insn	4, 0x6017c4f3
    hsvb(vaddr, ((uint8_t)-1));
    val = hlvb(vaddr);
    valu = hlvbu(vaddr);
    TEST_ASSERT("hs hlvb vs hlvbu",
    800037ba:	0002f617          	auipc	a2,0x2f
    800037be:	77e60613          	addi	a2,a2,1918 # 80032f38 <__func__.0+0xb50>
    800037c2:	08c00593          	li	a1,140
    800037c6:	0002f517          	auipc	a0,0x2f
    800037ca:	f1a50513          	addi	a0,a0,-230 # 800326e0 <__func__.0+0x2f8>
    800037ce:	4f72b0ef          	jal	8002f4c4 <printf>
    800037d2:	00059797          	auipc	a5,0x59
    800037d6:	83f7c783          	lbu	a5,-1985(a5) # 8005c011 <excpt+0x1>
    800037da:	28079e63          	bnez	a5,80003a76 <m_and_hs_using_vs_access_1+0x4ba>
    800037de:	57fd                	li	a5,-1
    800037e0:	30f98763          	beq	s3,a5,80003aee <m_and_hs_using_vs_access_1+0x532>
    800037e4:	0002f597          	auipc	a1,0x2f
    800037e8:	ed458593          	addi	a1,a1,-300 # 800326b8 <__func__.0+0x2d0>
    800037ec:	0002f517          	auipc	a0,0x2f
    800037f0:	f0c50513          	addi	a0,a0,-244 # 800326f8 <__func__.0+0x310>
    800037f4:	4d12b0ef          	jal	8002f4c4 <printf>
    800037f8:	0002f517          	auipc	a0,0x2f
    800037fc:	f0850513          	addi	a0,a0,-248 # 80032700 <__func__.0+0x318>
    80003800:	4c52b0ef          	jal	8002f4c4 <printf>
    80003804:	02900513          	li	a0,41
    80003808:	1ab2a0ef          	jal	8002e1b2 <putchar>
    8000380c:	4529                	li	a0,10
    8000380e:	1a52a0ef          	jal	8002e1b2 <putchar>
    80003812:	c419                	beqz	s0,80003820 <m_and_hs_using_vs_access_1+0x264>
    80003814:	00058797          	auipc	a5,0x58
    80003818:	7fd7c783          	lbu	a5,2045(a5) # 8005c011 <excpt+0x1>
    8000381c:	2c078563          	beqz	a5,80003ae6 <m_and_hs_using_vs_access_1+0x52a>
    80003820:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint8_t)-1)
    );

    TEST_SETUP_EXCEPT();
    80003822:	df6fd0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80003826:	001007b7          	lui	a5,0x100
    8000382a:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    8000382e:	6941                	lui	s2,0x10
    80003830:	07b2                	slli	a5,a5,0xc
    80003832:	197d                	addi	s2,s2,-1 # ffff <_test_table_size+0xfffe>
    80003834:	6727c073          	.insn	4, 0x6727c073
    asm volatile(
    80003838:	6407c9f3          	.insn	4, 0x6407c9f3
    asm volatile(
    8000383c:	6417c4f3          	.insn	4, 0x6417c4f3
    hsvh(vaddr, ((uint16_t)-1));
    val = hlvh(vaddr);
    valu = hlvhu(vaddr);
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003840:	0002f617          	auipc	a2,0x2f
    80003844:	71060613          	addi	a2,a2,1808 # 80032f50 <__func__.0+0xb68>
    80003848:	08c00593          	li	a1,140
    8000384c:	0002f517          	auipc	a0,0x2f
    80003850:	e9450513          	addi	a0,a0,-364 # 800326e0 <__func__.0+0x2f8>
    80003854:	4712b0ef          	jal	8002f4c4 <printf>
    80003858:	00058797          	auipc	a5,0x58
    8000385c:	7b97c783          	lbu	a5,1977(a5) # 8005c011 <excpt+0x1>
    80003860:	1c079563          	bnez	a5,80003a2a <m_and_hs_using_vs_access_1+0x46e>
    80003864:	57fd                	li	a5,-1
    80003866:	30f98b63          	beq	s3,a5,80003b7c <m_and_hs_using_vs_access_1+0x5c0>
    8000386a:	0002f597          	auipc	a1,0x2f
    8000386e:	e4e58593          	addi	a1,a1,-434 # 800326b8 <__func__.0+0x2d0>
    80003872:	0002f517          	auipc	a0,0x2f
    80003876:	e8650513          	addi	a0,a0,-378 # 800326f8 <__func__.0+0x310>
    8000387a:	44b2b0ef          	jal	8002f4c4 <printf>
    8000387e:	0002f517          	auipc	a0,0x2f
    80003882:	e8250513          	addi	a0,a0,-382 # 80032700 <__func__.0+0x318>
    80003886:	43f2b0ef          	jal	8002f4c4 <printf>
    8000388a:	02900513          	li	a0,41
    8000388e:	1252a0ef          	jal	8002e1b2 <putchar>
    80003892:	4529                	li	a0,10
    80003894:	11f2a0ef          	jal	8002e1b2 <putchar>
    80003898:	c419                	beqz	s0,800038a6 <m_and_hs_using_vs_access_1+0x2ea>
    8000389a:	00058797          	auipc	a5,0x58
    8000389e:	7777c783          	lbu	a5,1911(a5) # 8005c011 <excpt+0x1>
    800038a2:	22078e63          	beqz	a5,80003ade <m_and_hs_using_vs_access_1+0x522>
    800038a6:	4901                	li	s2,0
        excpt.triggered == false && val == (-1) && valu == ((uint16_t)-1)
    );

    TEST_SETUP_EXCEPT();
    800038a8:	d70fd0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    800038ac:	001007b7          	lui	a5,0x100
    800038b0:	54fd                	li	s1,-1
    800038b2:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800038b6:	07b2                	slli	a5,a5,0xc
    800038b8:	0204d993          	srli	s3,s1,0x20
    800038bc:	6b37c073          	.insn	4, 0x6b37c073
    asm volatile(
    800038c0:	6807ca73          	.insn	4, 0x6807ca73
    asm volatile(
    800038c4:	6817c473          	.insn	4, 0x6817c473
    hsvw(vaddr, ((uint32_t)-1));
    val = hlvw(vaddr);
    valu = hlvwu(vaddr);
    TEST_ASSERT("hs hlvw vs hlvwu",
    800038c8:	0002f617          	auipc	a2,0x2f
    800038cc:	6a060613          	addi	a2,a2,1696 # 80032f68 <__func__.0+0xb80>
    800038d0:	08c00593          	li	a1,140
    800038d4:	0002f517          	auipc	a0,0x2f
    800038d8:	e0c50513          	addi	a0,a0,-500 # 800326e0 <__func__.0+0x2f8>
    800038dc:	3e92b0ef          	jal	8002f4c4 <printf>
    800038e0:	00058797          	auipc	a5,0x58
    800038e4:	7317c783          	lbu	a5,1841(a5) # 8005c011 <excpt+0x1>
    800038e8:	0e079c63          	bnez	a5,800039e0 <m_and_hs_using_vs_access_1+0x424>
    800038ec:	269a0563          	beq	s4,s1,80003b56 <m_and_hs_using_vs_access_1+0x59a>
    800038f0:	0002f597          	auipc	a1,0x2f
    800038f4:	dc858593          	addi	a1,a1,-568 # 800326b8 <__func__.0+0x2d0>
    800038f8:	0002f517          	auipc	a0,0x2f
    800038fc:	e0050513          	addi	a0,a0,-512 # 800326f8 <__func__.0+0x310>
    80003900:	3c52b0ef          	jal	8002f4c4 <printf>
    80003904:	0002f517          	auipc	a0,0x2f
    80003908:	dfc50513          	addi	a0,a0,-516 # 80032700 <__func__.0+0x318>
    8000390c:	3b92b0ef          	jal	8002f4c4 <printf>
    80003910:	02900513          	li	a0,41
    80003914:	09f2a0ef          	jal	8002e1b2 <putchar>
    80003918:	4529                	li	a0,10
    8000391a:	0992a0ef          	jal	8002e1b2 <putchar>
    8000391e:	00090e63          	beqz	s2,8000393a <m_and_hs_using_vs_access_1+0x37e>
    80003922:	00058797          	auipc	a5,0x58
    80003926:	6ef7c783          	lbu	a5,1775(a5) # 8005c011 <excpt+0x1>
    8000392a:	eb81                	bnez	a5,8000393a <m_and_hs_using_vs_access_1+0x37e>
    8000392c:	57fd                	li	a5,-1
    8000392e:	00fa1663          	bne	s4,a5,8000393a <m_and_hs_using_vs_access_1+0x37e>
    80003932:	020a5a13          	srli	s4,s4,0x20
    80003936:	0f440463          	beq	s0,s4,80003a1e <m_and_hs_using_vs_access_1+0x462>
    8000393a:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint32_t)-1)
    );

    TEST_END();
    8000393c:	0002f597          	auipc	a1,0x2f
    80003940:	d7c58593          	addi	a1,a1,-644 # 800326b8 <__func__.0+0x2d0>
    80003944:	0002f517          	auipc	a0,0x2f
    80003948:	e1c50513          	addi	a0,a0,-484 # 80032760 <__func__.0+0x378>
    8000394c:	3792b0ef          	jal	8002f4c4 <printf>
    80003950:	4511                	li	a0,4
    80003952:	dc2fd0ef          	jal	80000f14 <goto_priv>
    80003956:	e21fd0ef          	jal	80001776 <reset_state>
}
    8000395a:	70a2                	ld	ra,40(sp)
    8000395c:	8522                	mv	a0,s0
    8000395e:	7402                	ld	s0,32(sp)
    80003960:	64e2                	ld	s1,24(sp)
    80003962:	6942                	ld	s2,16(sp)
    80003964:	69a2                	ld	s3,8(sp)
    80003966:	6a02                	ld	s4,0(sp)
    80003968:	6145                	addi	sp,sp,48
    8000396a:	8082                	ret
    TEST_ASSERT("machine sets mprv to access vs space",
    8000396c:	0002f597          	auipc	a1,0x2f
    80003970:	d4c58593          	addi	a1,a1,-692 # 800326b8 <__func__.0+0x2d0>
    80003974:	0002f517          	auipc	a0,0x2f
    80003978:	d8450513          	addi	a0,a0,-636 # 800326f8 <__func__.0+0x310>
    8000397c:	3492b0ef          	jal	8002f4c4 <printf>
    80003980:	00058797          	auipc	a5,0x58
    80003984:	6917c783          	lbu	a5,1681(a5) # 8005c011 <excpt+0x1>
    80003988:	d4079ae3          	bnez	a5,800036dc <m_and_hs_using_vs_access_1+0x120>
    8000398c:	d48498e3          	bne	s1,s0,800036dc <m_and_hs_using_vs_access_1+0x120>
    80003990:	4529                	li	a0,10
    80003992:	0212a0ef          	jal	8002e1b2 <putchar>
    80003996:	00058917          	auipc	s2,0x58
    8000399a:	67b94903          	lbu	s2,1659(s2) # 8005c011 <excpt+0x1>
    8000399e:	00194913          	xori	s2,s2,1
    800039a2:	bb8d                	j	80003714 <m_and_hs_using_vs_access_1+0x158>
    TEST_ASSERT("hs hlvd",
    800039a4:	0002f597          	auipc	a1,0x2f
    800039a8:	d1458593          	addi	a1,a1,-748 # 800326b8 <__func__.0+0x2d0>
    800039ac:	0002f517          	auipc	a0,0x2f
    800039b0:	d4c50513          	addi	a0,a0,-692 # 800326f8 <__func__.0+0x310>
    800039b4:	3112b0ef          	jal	8002f4c4 <printf>
    800039b8:	00058797          	auipc	a5,0x58
    800039bc:	6597c783          	lbu	a5,1625(a5) # 8005c011 <excpt+0x1>
    800039c0:	da079ee3          	bnez	a5,8000377c <m_and_hs_using_vs_access_1+0x1c0>
    800039c4:	da941ce3          	bne	s0,s1,8000377c <m_and_hs_using_vs_access_1+0x1c0>
    800039c8:	4529                	li	a0,10
    800039ca:	7e82a0ef          	jal	8002e1b2 <putchar>
    800039ce:	dc0906e3          	beqz	s2,8000379a <m_and_hs_using_vs_access_1+0x1de>
    800039d2:	00058417          	auipc	s0,0x58
    800039d6:	63f44403          	lbu	s0,1599(s0) # 8005c011 <excpt+0x1>
    800039da:	00144413          	xori	s0,s0,1
    800039de:	bb7d                	j	8000379c <m_and_hs_using_vs_access_1+0x1e0>
    TEST_ASSERT("hs hlvw vs hlvwu",
    800039e0:	0002f597          	auipc	a1,0x2f
    800039e4:	cd858593          	addi	a1,a1,-808 # 800326b8 <__func__.0+0x2d0>
    800039e8:	0002f517          	auipc	a0,0x2f
    800039ec:	d1050513          	addi	a0,a0,-752 # 800326f8 <__func__.0+0x310>
    800039f0:	2d52b0ef          	jal	8002f4c4 <printf>
    800039f4:	00058797          	auipc	a5,0x58
    800039f8:	61d7c783          	lbu	a5,1565(a5) # 8005c011 <excpt+0x1>
    800039fc:	f00794e3          	bnez	a5,80003904 <m_and_hs_using_vs_access_1+0x348>
    80003a00:	f09a12e3          	bne	s4,s1,80003904 <m_and_hs_using_vs_access_1+0x348>
    80003a04:	f13410e3          	bne	s0,s3,80003904 <m_and_hs_using_vs_access_1+0x348>
    80003a08:	4529                	li	a0,10
    80003a0a:	7a82a0ef          	jal	8002e1b2 <putchar>
    80003a0e:	f20906e3          	beqz	s2,8000393a <m_and_hs_using_vs_access_1+0x37e>
    80003a12:	00058797          	auipc	a5,0x58
    80003a16:	5ff7c783          	lbu	a5,1535(a5) # 8005c011 <excpt+0x1>
    80003a1a:	f20790e3          	bnez	a5,8000393a <m_and_hs_using_vs_access_1+0x37e>
    80003a1e:	4405                	li	s0,1
    TEST_END();
    80003a20:	0002f597          	auipc	a1,0x2f
    80003a24:	c8858593          	addi	a1,a1,-888 # 800326a8 <__func__.0+0x2c0>
    80003a28:	bf31                	j	80003944 <m_and_hs_using_vs_access_1+0x388>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003a2a:	0002f597          	auipc	a1,0x2f
    80003a2e:	c8e58593          	addi	a1,a1,-882 # 800326b8 <__func__.0+0x2d0>
    80003a32:	0002f517          	auipc	a0,0x2f
    80003a36:	cc650513          	addi	a0,a0,-826 # 800326f8 <__func__.0+0x310>
    80003a3a:	28b2b0ef          	jal	8002f4c4 <printf>
    80003a3e:	00058797          	auipc	a5,0x58
    80003a42:	5d37c783          	lbu	a5,1491(a5) # 8005c011 <excpt+0x1>
    80003a46:	e2079ce3          	bnez	a5,8000387e <m_and_hs_using_vs_access_1+0x2c2>
    80003a4a:	57fd                	li	a5,-1
    80003a4c:	e2f999e3          	bne	s3,a5,8000387e <m_and_hs_using_vs_access_1+0x2c2>
    80003a50:	e32497e3          	bne	s1,s2,8000387e <m_and_hs_using_vs_access_1+0x2c2>
    80003a54:	4529                	li	a0,10
    80003a56:	75c2a0ef          	jal	8002e1b2 <putchar>
    80003a5a:	e40406e3          	beqz	s0,800038a6 <m_and_hs_using_vs_access_1+0x2ea>
    80003a5e:	00058797          	auipc	a5,0x58
    80003a62:	5b37c783          	lbu	a5,1459(a5) # 8005c011 <excpt+0x1>
    80003a66:	e40790e3          	bnez	a5,800038a6 <m_and_hs_using_vs_access_1+0x2ea>
    80003a6a:	7941                	lui	s2,0xffff0
    80003a6c:	0905                	addi	s2,s2,1 # ffffffffffff0001 <__stack_top+0xffffffff7fcf1001>
    80003a6e:	9926                	add	s2,s2,s1
    80003a70:	00193913          	seqz	s2,s2
    80003a74:	bd15                	j	800038a8 <m_and_hs_using_vs_access_1+0x2ec>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003a76:	0002f597          	auipc	a1,0x2f
    80003a7a:	c4258593          	addi	a1,a1,-958 # 800326b8 <__func__.0+0x2d0>
    80003a7e:	0002f517          	auipc	a0,0x2f
    80003a82:	c7a50513          	addi	a0,a0,-902 # 800326f8 <__func__.0+0x310>
    80003a86:	23f2b0ef          	jal	8002f4c4 <printf>
    80003a8a:	00058797          	auipc	a5,0x58
    80003a8e:	5877c783          	lbu	a5,1415(a5) # 8005c011 <excpt+0x1>
    80003a92:	d60793e3          	bnez	a5,800037f8 <m_and_hs_using_vs_access_1+0x23c>
    80003a96:	57fd                	li	a5,-1
    80003a98:	d6f990e3          	bne	s3,a5,800037f8 <m_and_hs_using_vs_access_1+0x23c>
    80003a9c:	d5249ee3          	bne	s1,s2,800037f8 <m_and_hs_using_vs_access_1+0x23c>
    80003aa0:	4529                	li	a0,10
    80003aa2:	7102a0ef          	jal	8002e1b2 <putchar>
    80003aa6:	d6040de3          	beqz	s0,80003820 <m_and_hs_using_vs_access_1+0x264>
    80003aaa:	00058797          	auipc	a5,0x58
    80003aae:	5677c783          	lbu	a5,1383(a5) # 8005c011 <excpt+0x1>
    80003ab2:	d60797e3          	bnez	a5,80003820 <m_and_hs_using_vs_access_1+0x264>
    80003ab6:	f0148793          	addi	a5,s1,-255
    80003aba:	0017b413          	seqz	s0,a5
    80003abe:	b395                	j	80003822 <m_and_hs_using_vs_access_1+0x266>
    TEST_ASSERT("hs hlvd",
    80003ac0:	00058797          	auipc	a5,0x58
    80003ac4:	5517c783          	lbu	a5,1361(a5) # 8005c011 <excpt+0x1>
    80003ac8:	cc0799e3          	bnez	a5,8000379a <m_and_hs_using_vs_access_1+0x1de>
    80003acc:	c85497b7          	lui	a5,0xc8549
    80003ad0:	078a                	slli	a5,a5,0x2
    80003ad2:	11178793          	addi	a5,a5,273 # ffffffffc8549111 <__stack_top+0xffffffff4824a111>
    80003ad6:	943e                	add	s0,s0,a5
    80003ad8:	00143413          	seqz	s0,s0
    80003adc:	b1c1                	j	8000379c <m_and_hs_using_vs_access_1+0x1e0>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003ade:	57fd                	li	a5,-1
    80003ae0:	dcf993e3          	bne	s3,a5,800038a6 <m_and_hs_using_vs_access_1+0x2ea>
    80003ae4:	b759                	j	80003a6a <m_and_hs_using_vs_access_1+0x4ae>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003ae6:	57fd                	li	a5,-1
    80003ae8:	d2f99ce3          	bne	s3,a5,80003820 <m_and_hs_using_vs_access_1+0x264>
    80003aec:	b7e9                	j	80003ab6 <m_and_hs_using_vs_access_1+0x4fa>
    80003aee:	cf249be3          	bne	s1,s2,800037e4 <m_and_hs_using_vs_access_1+0x228>
    80003af2:	0002f597          	auipc	a1,0x2f
    80003af6:	bb658593          	addi	a1,a1,-1098 # 800326a8 <__func__.0+0x2c0>
    80003afa:	0002f517          	auipc	a0,0x2f
    80003afe:	bfe50513          	addi	a0,a0,-1026 # 800326f8 <__func__.0+0x310>
    80003b02:	1c32b0ef          	jal	8002f4c4 <printf>
    80003b06:	00058797          	auipc	a5,0x58
    80003b0a:	50b7c783          	lbu	a5,1291(a5) # 8005c011 <excpt+0x1>
    80003b0e:	dbc9                	beqz	a5,80003aa0 <m_and_hs_using_vs_access_1+0x4e4>
    80003b10:	b1e5                	j	800037f8 <m_and_hs_using_vs_access_1+0x23c>
    TEST_ASSERT("machine sets mprv to access vs space",
    80003b12:	0002f597          	auipc	a1,0x2f
    80003b16:	b9658593          	addi	a1,a1,-1130 # 800326a8 <__func__.0+0x2c0>
    80003b1a:	0002f517          	auipc	a0,0x2f
    80003b1e:	bde50513          	addi	a0,a0,-1058 # 800326f8 <__func__.0+0x310>
    80003b22:	1a32b0ef          	jal	8002f4c4 <printf>
    80003b26:	00058797          	auipc	a5,0x58
    80003b2a:	4eb7c783          	lbu	a5,1259(a5) # 8005c011 <excpt+0x1>
    80003b2e:	bc0781e3          	beqz	a5,800036f0 <m_and_hs_using_vs_access_1+0x134>
    80003b32:	b66d                	j	800036dc <m_and_hs_using_vs_access_1+0x120>
    TEST_ASSERT("hs hlvd",
    80003b34:	0002f597          	auipc	a1,0x2f
    80003b38:	b7458593          	addi	a1,a1,-1164 # 800326a8 <__func__.0+0x2c0>
    80003b3c:	0002f517          	auipc	a0,0x2f
    80003b40:	bbc50513          	addi	a0,a0,-1092 # 800326f8 <__func__.0+0x310>
    80003b44:	1812b0ef          	jal	8002f4c4 <printf>
    80003b48:	00058797          	auipc	a5,0x58
    80003b4c:	4c97c783          	lbu	a5,1225(a5) # 8005c011 <excpt+0x1>
    80003b50:	e6078ce3          	beqz	a5,800039c8 <m_and_hs_using_vs_access_1+0x40c>
    80003b54:	b125                	j	8000377c <m_and_hs_using_vs_access_1+0x1c0>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003b56:	d9341de3          	bne	s0,s3,800038f0 <m_and_hs_using_vs_access_1+0x334>
    80003b5a:	0002f597          	auipc	a1,0x2f
    80003b5e:	b4e58593          	addi	a1,a1,-1202 # 800326a8 <__func__.0+0x2c0>
    80003b62:	0002f517          	auipc	a0,0x2f
    80003b66:	b9650513          	addi	a0,a0,-1130 # 800326f8 <__func__.0+0x310>
    80003b6a:	15b2b0ef          	jal	8002f4c4 <printf>
    80003b6e:	00058797          	auipc	a5,0x58
    80003b72:	4a37c783          	lbu	a5,1187(a5) # 8005c011 <excpt+0x1>
    80003b76:	e80789e3          	beqz	a5,80003a08 <m_and_hs_using_vs_access_1+0x44c>
    80003b7a:	b369                	j	80003904 <m_and_hs_using_vs_access_1+0x348>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003b7c:	cf2497e3          	bne	s1,s2,8000386a <m_and_hs_using_vs_access_1+0x2ae>
    80003b80:	0002f597          	auipc	a1,0x2f
    80003b84:	b2858593          	addi	a1,a1,-1240 # 800326a8 <__func__.0+0x2c0>
    80003b88:	0002f517          	auipc	a0,0x2f
    80003b8c:	b7050513          	addi	a0,a0,-1168 # 800326f8 <__func__.0+0x310>
    80003b90:	1352b0ef          	jal	8002f4c4 <printf>
    80003b94:	00058797          	auipc	a5,0x58
    80003b98:	47d7c783          	lbu	a5,1149(a5) # 8005c011 <excpt+0x1>
    80003b9c:	ea078ce3          	beqz	a5,80003a54 <m_and_hs_using_vs_access_1+0x498>
    80003ba0:	b9f9                	j	8000387e <m_and_hs_using_vs_access_1+0x2c2>

0000000080003ba2 <m_and_hs_using_vs_access_2>:
     * hlvx instruction but on a previous lui instruction. 
     * TODO: find out why
     */


bool m_and_hs_using_vs_access_2(){
    80003ba2:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003ba4:	0002c597          	auipc	a1,0x2c
    80003ba8:	7c458593          	addi	a1,a1,1988 # 80030368 <__func__.10>
    80003bac:	0002f517          	auipc	a0,0x2f
    80003bb0:	b1c50513          	addi	a0,a0,-1252 # 800326c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_2(){
    80003bb4:	ec06                	sd	ra,24(sp)
    80003bb6:	e822                	sd	s0,16(sp)
    80003bb8:	e426                	sd	s1,8(sp)
    TEST_START();
    80003bba:	10b2b0ef          	jal	8002f4c4 <printf>
    80003bbe:	4529                	li	a0,10
    80003bc0:	5f22a0ef          	jal	8002e1b2 <putchar>
    
    hspt_init();
    80003bc4:	a29fc0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    80003bc8:	e09fc0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80003bcc:	bbdfc0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_HS);
    80003bd0:	450d                	li	a0,3
    80003bd2:	b42fd0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80003bd6:	4509                	li	a0,2
    80003bd8:	a5cfd0ef          	jal	80000e34 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003bdc:	a3cfd0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80003be0:	200037b7          	lui	a5,0x20003
    80003be4:	078e                	slli	a5,a5,0x3
    80003be6:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSX_GUX));
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003bea:	08c00593          	li	a1,140
    80003bee:	0002f617          	auipc	a2,0x2f
    80003bf2:	39260613          	addi	a2,a2,914 # 80032f80 <__func__.0+0xb98>
    80003bf6:	0002f517          	auipc	a0,0x2f
    80003bfa:	aea50513          	addi	a0,a0,-1302 # 800326e0 <__func__.0+0x2f8>
    80003bfe:	0c72b0ef          	jal	8002f4c4 <printf>
    80003c02:	00058797          	auipc	a5,0x58
    80003c06:	40f7c783          	lbu	a5,1039(a5) # 8005c011 <excpt+0x1>
    80003c0a:	0002f597          	auipc	a1,0x2f
    80003c0e:	a9e58593          	addi	a1,a1,-1378 # 800326a8 <__func__.0+0x2c0>
    80003c12:	c789                	beqz	a5,80003c1c <m_and_hs_using_vs_access_2+0x7a>
    80003c14:	0002f597          	auipc	a1,0x2f
    80003c18:	aa458593          	addi	a1,a1,-1372 # 800326b8 <__func__.0+0x2d0>
    80003c1c:	0002f517          	auipc	a0,0x2f
    80003c20:	adc50513          	addi	a0,a0,-1316 # 800326f8 <__func__.0+0x310>
    80003c24:	0a12b0ef          	jal	8002f4c4 <printf>
    80003c28:	00058797          	auipc	a5,0x58
    80003c2c:	3e97c783          	lbu	a5,1001(a5) # 8005c011 <excpt+0x1>
    80003c30:	24079d63          	bnez	a5,80003e8a <m_and_hs_using_vs_access_2+0x2e8>
    80003c34:	4529                	li	a0,10
    80003c36:	57c2a0ef          	jal	8002e1b2 <putchar>
    80003c3a:	00058497          	auipc	s1,0x58
    80003c3e:	3d74c483          	lbu	s1,983(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003c42:	9d6fd0ef          	jal	80000e18 <test_setup_except_function>
    80003c46:	4785                	li	a5,1
    80003c48:	1782                	slli	a5,a5,0x20
    80003c4a:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURWX));
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003c4e:	08c00593          	li	a1,140
    80003c52:	0002f617          	auipc	a2,0x2f
    80003c56:	35660613          	addi	a2,a2,854 # 80032fa8 <__func__.0+0xbc0>
    80003c5a:	0002f517          	auipc	a0,0x2f
    80003c5e:	a8650513          	addi	a0,a0,-1402 # 800326e0 <__func__.0+0x2f8>
    80003c62:	0632b0ef          	jal	8002f4c4 <printf>
    80003c66:	00058797          	auipc	a5,0x58
    80003c6a:	3ab7c783          	lbu	a5,939(a5) # 8005c011 <excpt+0x1>
    80003c6e:	0002f597          	auipc	a1,0x2f
    80003c72:	a4a58593          	addi	a1,a1,-1462 # 800326b8 <__func__.0+0x2d0>
    80003c76:	e789                	bnez	a5,80003c80 <m_and_hs_using_vs_access_2+0xde>
    80003c78:	0002f597          	auipc	a1,0x2f
    80003c7c:	a3058593          	addi	a1,a1,-1488 # 800326a8 <__func__.0+0x2c0>
    80003c80:	0002f517          	auipc	a0,0x2f
    80003c84:	a7850513          	addi	a0,a0,-1416 # 800326f8 <__func__.0+0x310>
    80003c88:	03d2b0ef          	jal	8002f4c4 <printf>
    80003c8c:	00058797          	auipc	a5,0x58
    80003c90:	3857c783          	lbu	a5,901(a5) # 8005c011 <excpt+0x1>
    80003c94:	1e079063          	bnez	a5,80003e74 <m_and_hs_using_vs_access_2+0x2d2>
    80003c98:	4529                	li	a0,10
    80003c9a:	5182a0ef          	jal	8002e1b2 <putchar>
    80003c9e:	4401                	li	s0,0
    80003ca0:	e499                	bnez	s1,80003cae <m_and_hs_using_vs_access_2+0x10c>
    80003ca2:	00058417          	auipc	s0,0x58
    80003ca6:	36f44403          	lbu	s0,879(s0) # 8005c011 <excpt+0x1>
    80003caa:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003cae:	96afd0ef          	jal	80000e18 <test_setup_except_function>
    80003cb2:	001007b7          	lui	a5,0x100
    80003cb6:	0785                	addi	a5,a5,1 # 100001 <STACK_SIZE+0x1>
    80003cb8:	07b2                	slli	a5,a5,0xc
    80003cba:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURW));
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003cbe:	08c00593          	li	a1,140
    80003cc2:	0002f617          	auipc	a2,0x2f
    80003cc6:	31660613          	addi	a2,a2,790 # 80032fd8 <__func__.0+0xbf0>
    80003cca:	0002f517          	auipc	a0,0x2f
    80003cce:	a1650513          	addi	a0,a0,-1514 # 800326e0 <__func__.0+0x2f8>
    80003cd2:	7f22b0ef          	jal	8002f4c4 <printf>
    80003cd6:	00058797          	auipc	a5,0x58
    80003cda:	33b7c783          	lbu	a5,827(a5) # 8005c011 <excpt+0x1>
    80003cde:	00058497          	auipc	s1,0x58
    80003ce2:	33248493          	addi	s1,s1,818 # 8005c010 <excpt>
    80003ce6:	0002f597          	auipc	a1,0x2f
    80003cea:	9d258593          	addi	a1,a1,-1582 # 800326b8 <__func__.0+0x2d0>
    80003cee:	c789                	beqz	a5,80003cf8 <m_and_hs_using_vs_access_2+0x156>
    80003cf0:	6498                	ld	a4,8(s1)
    80003cf2:	47d5                	li	a5,21
    80003cf4:	1cf70b63          	beq	a4,a5,80003eca <m_and_hs_using_vs_access_2+0x328>
    80003cf8:	0002f517          	auipc	a0,0x2f
    80003cfc:	a0050513          	addi	a0,a0,-1536 # 800326f8 <__func__.0+0x310>
    80003d00:	7c42b0ef          	jal	8002f4c4 <printf>
    80003d04:	00058797          	auipc	a5,0x58
    80003d08:	30d7c783          	lbu	a5,781(a5) # 8005c011 <excpt+0x1>
    80003d0c:	c789                	beqz	a5,80003d16 <m_and_hs_using_vs_access_2+0x174>
    80003d0e:	6498                	ld	a4,8(s1)
    80003d10:	47d5                	li	a5,21
    80003d12:	14f70463          	beq	a4,a5,80003e5a <m_and_hs_using_vs_access_2+0x2b8>
    80003d16:	0002f517          	auipc	a0,0x2f
    80003d1a:	9ea50513          	addi	a0,a0,-1558 # 80032700 <__func__.0+0x318>
    80003d1e:	7a62b0ef          	jal	8002f4c4 <printf>
    80003d22:	02900513          	li	a0,41
    80003d26:	48c2a0ef          	jal	8002e1b2 <putchar>
    80003d2a:	4529                	li	a0,10
    80003d2c:	4862a0ef          	jal	8002e1b2 <putchar>
    80003d30:	c801                	beqz	s0,80003d40 <m_and_hs_using_vs_access_2+0x19e>
    80003d32:	00058797          	auipc	a5,0x58
    80003d36:	2df7c783          	lbu	a5,735(a5) # 8005c011 <excpt+0x1>
    80003d3a:	4401                	li	s0,0
    80003d3c:	0e079363          	bnez	a5,80003e22 <m_and_hs_using_vs_access_2+0x280>
        excpt.cause == CAUSE_LGPF && 
        excpt.gva == true &&
        excpt.xpv == false
    );

    TEST_SETUP_EXCEPT();
    80003d40:	8d8fd0ef          	jal	80000e18 <test_setup_except_function>
    80003d44:	001007b7          	lui	a5,0x100
    80003d48:	0795                	addi	a5,a5,5 # 100005 <STACK_SIZE+0x5>
    80003d4a:	07b2                	slli	a5,a5,0xc
    80003d4c:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRW_GURWX));
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003d50:	08c00593          	li	a1,140
    80003d54:	0002f617          	auipc	a2,0x2f
    80003d58:	2bc60613          	addi	a2,a2,700 # 80033010 <__func__.0+0xc28>
    80003d5c:	0002f517          	auipc	a0,0x2f
    80003d60:	98450513          	addi	a0,a0,-1660 # 800326e0 <__func__.0+0x2f8>
    80003d64:	7602b0ef          	jal	8002f4c4 <printf>
    80003d68:	00058797          	auipc	a5,0x58
    80003d6c:	2a97c783          	lbu	a5,681(a5) # 8005c011 <excpt+0x1>
    80003d70:	0002f597          	auipc	a1,0x2f
    80003d74:	94858593          	addi	a1,a1,-1720 # 800326b8 <__func__.0+0x2d0>
    80003d78:	c789                	beqz	a5,80003d82 <m_and_hs_using_vs_access_2+0x1e0>
    80003d7a:	6498                	ld	a4,8(s1)
    80003d7c:	47b5                	li	a5,13
    80003d7e:	12f70163          	beq	a4,a5,80003ea0 <m_and_hs_using_vs_access_2+0x2fe>
    80003d82:	0002f517          	auipc	a0,0x2f
    80003d86:	97650513          	addi	a0,a0,-1674 # 800326f8 <__func__.0+0x310>
    80003d8a:	73a2b0ef          	jal	8002f4c4 <printf>
    80003d8e:	00058797          	auipc	a5,0x58
    80003d92:	2837c783          	lbu	a5,643(a5) # 8005c011 <excpt+0x1>
    80003d96:	c789                	beqz	a5,80003da0 <m_and_hs_using_vs_access_2+0x1fe>
    80003d98:	6498                	ld	a4,8(s1)
    80003d9a:	47b5                	li	a5,13
    80003d9c:	0af70463          	beq	a4,a5,80003e44 <m_and_hs_using_vs_access_2+0x2a2>
    80003da0:	0002f517          	auipc	a0,0x2f
    80003da4:	96050513          	addi	a0,a0,-1696 # 80032700 <__func__.0+0x318>
    80003da8:	71c2b0ef          	jal	8002f4c4 <printf>
    80003dac:	02900513          	li	a0,41
    80003db0:	4022a0ef          	jal	8002e1b2 <putchar>
    80003db4:	4529                	li	a0,10
    80003db6:	3fc2a0ef          	jal	8002e1b2 <putchar>
    80003dba:	c411                	beqz	s0,80003dc6 <m_and_hs_using_vs_access_2+0x224>
    80003dbc:	00058797          	auipc	a5,0x58
    80003dc0:	2557c783          	lbu	a5,597(a5) # 8005c011 <excpt+0x1>
    80003dc4:	e79d                	bnez	a5,80003df2 <m_and_hs_using_vs_access_2+0x250>
    80003dc6:	4401                	li	s0,0
        excpt.gva == true &&
        excpt.xpv == false
    );

    
    TEST_END();
    80003dc8:	0002f597          	auipc	a1,0x2f
    80003dcc:	8f058593          	addi	a1,a1,-1808 # 800326b8 <__func__.0+0x2d0>
    80003dd0:	0002f517          	auipc	a0,0x2f
    80003dd4:	99050513          	addi	a0,a0,-1648 # 80032760 <__func__.0+0x378>
    80003dd8:	6ec2b0ef          	jal	8002f4c4 <printf>
    80003ddc:	4511                	li	a0,4
    80003dde:	936fd0ef          	jal	80000f14 <goto_priv>
    80003de2:	995fd0ef          	jal	80001776 <reset_state>
}
    80003de6:	60e2                	ld	ra,24(sp)
    80003de8:	8522                	mv	a0,s0
    80003dea:	6442                	ld	s0,16(sp)
    80003dec:	64a2                	ld	s1,8(sp)
    80003dee:	6105                	addi	sp,sp,32
    80003df0:	8082                	ret
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003df2:	6498                	ld	a4,8(s1)
    80003df4:	47b5                	li	a5,13
    80003df6:	4401                	li	s0,0
    TEST_END();
    80003df8:	0002f597          	auipc	a1,0x2f
    80003dfc:	8c058593          	addi	a1,a1,-1856 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003e00:	fcf718e3          	bne	a4,a5,80003dd0 <m_and_hs_using_vs_access_2+0x22e>
    80003e04:	00058417          	auipc	s0,0x58
    80003e08:	23c44403          	lbu	s0,572(s0) # 8005c040 <excpt+0x30>
    80003e0c:	d071                	beqz	s0,80003dd0 <m_and_hs_using_vs_access_2+0x22e>
    80003e0e:	00058797          	auipc	a5,0x58
    80003e12:	2337c783          	lbu	a5,563(a5) # 8005c041 <excpt+0x31>
    TEST_END();
    80003e16:	0002f597          	auipc	a1,0x2f
    80003e1a:	89258593          	addi	a1,a1,-1902 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003e1e:	dbcd                	beqz	a5,80003dd0 <m_and_hs_using_vs_access_2+0x22e>
    80003e20:	b75d                	j	80003dc6 <m_and_hs_using_vs_access_2+0x224>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003e22:	6498                	ld	a4,8(s1)
    80003e24:	47d5                	li	a5,21
    80003e26:	f0f71de3          	bne	a4,a5,80003d40 <m_and_hs_using_vs_access_2+0x19e>
    80003e2a:	00058797          	auipc	a5,0x58
    80003e2e:	2167c783          	lbu	a5,534(a5) # 8005c040 <excpt+0x30>
    80003e32:	f00787e3          	beqz	a5,80003d40 <m_and_hs_using_vs_access_2+0x19e>
    80003e36:	00058417          	auipc	s0,0x58
    80003e3a:	20b44403          	lbu	s0,523(s0) # 8005c041 <excpt+0x31>
    80003e3e:	00144413          	xori	s0,s0,1
    80003e42:	bdfd                	j	80003d40 <m_and_hs_using_vs_access_2+0x19e>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003e44:	00058797          	auipc	a5,0x58
    80003e48:	1fc7c783          	lbu	a5,508(a5) # 8005c040 <excpt+0x30>
    80003e4c:	dbb1                	beqz	a5,80003da0 <m_and_hs_using_vs_access_2+0x1fe>
    80003e4e:	00058797          	auipc	a5,0x58
    80003e52:	1f37c783          	lbu	a5,499(a5) # 8005c041 <excpt+0x31>
    80003e56:	dfb9                	beqz	a5,80003db4 <m_and_hs_using_vs_access_2+0x212>
    80003e58:	b7a1                	j	80003da0 <m_and_hs_using_vs_access_2+0x1fe>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003e5a:	00058797          	auipc	a5,0x58
    80003e5e:	1e67c783          	lbu	a5,486(a5) # 8005c040 <excpt+0x30>
    80003e62:	ea078ae3          	beqz	a5,80003d16 <m_and_hs_using_vs_access_2+0x174>
    80003e66:	00058797          	auipc	a5,0x58
    80003e6a:	1db7c783          	lbu	a5,475(a5) # 8005c041 <excpt+0x31>
    80003e6e:	ea078ee3          	beqz	a5,80003d2a <m_and_hs_using_vs_access_2+0x188>
    80003e72:	b555                	j	80003d16 <m_and_hs_using_vs_access_2+0x174>
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003e74:	0002f517          	auipc	a0,0x2f
    80003e78:	88c50513          	addi	a0,a0,-1908 # 80032700 <__func__.0+0x318>
    80003e7c:	6482b0ef          	jal	8002f4c4 <printf>
    80003e80:	02900513          	li	a0,41
    80003e84:	32e2a0ef          	jal	8002e1b2 <putchar>
    80003e88:	bd01                	j	80003c98 <m_and_hs_using_vs_access_2+0xf6>
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003e8a:	0002f517          	auipc	a0,0x2f
    80003e8e:	87650513          	addi	a0,a0,-1930 # 80032700 <__func__.0+0x318>
    80003e92:	6322b0ef          	jal	8002f4c4 <printf>
    80003e96:	02900513          	li	a0,41
    80003e9a:	3182a0ef          	jal	8002e1b2 <putchar>
    80003e9e:	bb59                	j	80003c34 <m_and_hs_using_vs_access_2+0x92>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003ea0:	00058797          	auipc	a5,0x58
    80003ea4:	1a07c783          	lbu	a5,416(a5) # 8005c040 <excpt+0x30>
    80003ea8:	ec078de3          	beqz	a5,80003d82 <m_and_hs_using_vs_access_2+0x1e0>
    80003eac:	00058797          	auipc	a5,0x58
    80003eb0:	1957c783          	lbu	a5,405(a5) # 8005c041 <excpt+0x31>
    80003eb4:	0002e597          	auipc	a1,0x2e
    80003eb8:	7f458593          	addi	a1,a1,2036 # 800326a8 <__func__.0+0x2c0>
    80003ebc:	ec0783e3          	beqz	a5,80003d82 <m_and_hs_using_vs_access_2+0x1e0>
    80003ec0:	0002e597          	auipc	a1,0x2e
    80003ec4:	7f858593          	addi	a1,a1,2040 # 800326b8 <__func__.0+0x2d0>
    80003ec8:	bd6d                	j	80003d82 <m_and_hs_using_vs_access_2+0x1e0>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003eca:	00058797          	auipc	a5,0x58
    80003ece:	1767c783          	lbu	a5,374(a5) # 8005c040 <excpt+0x30>
    80003ed2:	e20783e3          	beqz	a5,80003cf8 <m_and_hs_using_vs_access_2+0x156>
    80003ed6:	00058797          	auipc	a5,0x58
    80003eda:	16b7c783          	lbu	a5,363(a5) # 8005c041 <excpt+0x31>
    80003ede:	0002e597          	auipc	a1,0x2e
    80003ee2:	7ca58593          	addi	a1,a1,1994 # 800326a8 <__func__.0+0x2c0>
    80003ee6:	e00789e3          	beqz	a5,80003cf8 <m_and_hs_using_vs_access_2+0x156>
    80003eea:	0002e597          	auipc	a1,0x2e
    80003eee:	7ce58593          	addi	a1,a1,1998 # 800326b8 <__func__.0+0x2d0>
    80003ef2:	b519                	j	80003cf8 <m_and_hs_using_vs_access_2+0x156>

0000000080003ef4 <m_and_hs_using_vs_access_3>:

bool m_and_hs_using_vs_access_3(){
    80003ef4:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003ef6:	0002c597          	auipc	a1,0x2c
    80003efa:	49258593          	addi	a1,a1,1170 # 80030388 <__func__.9>
    80003efe:	0002e517          	auipc	a0,0x2e
    80003f02:	7ca50513          	addi	a0,a0,1994 # 800326c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_3(){
    80003f06:	ec06                	sd	ra,24(sp)
    80003f08:	e822                	sd	s0,16(sp)
    80003f0a:	e426                	sd	s1,8(sp)
    80003f0c:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003f0e:	5b62b0ef          	jal	8002f4c4 <printf>
    80003f12:	4529                	li	a0,10
    80003f14:	29e2a0ef          	jal	8002e1b2 <putchar>
    
    hspt_init();
    80003f18:	ed4fc0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    80003f1c:	ab5fc0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80003f20:	869fc0ef          	jal	80000788 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_M);
    80003f24:	4511                	li	a0,4
    80003f26:	feffc0ef          	jal	80000f14 <goto_priv>
    *((volatile uint64_t*) addr) = val;
    80003f2a:	0003b417          	auipc	s0,0x3b
    80003f2e:	0f640413          	addi	s0,s0,246 # 8003f020 <__func__.0+0xcc38>

    TEST_SETUP_EXCEPT();
    80003f32:	ee7fc0ef          	jal	80000e18 <test_setup_except_function>
    80003f36:	6018                	ld	a4,0(s0)
    80003f38:	440197b7          	lui	a5,0x44019
    80003f3c:	0786                	slli	a5,a5,0x1
    80003f3e:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    80003f40:	0003d717          	auipc	a4,0x3d
    80003f44:	11472703          	lw	a4,276(a4) # 80041054 <curr_priv>
    80003f48:	4791                	li	a5,4
    80003f4a:	02f70763          	beq	a4,a5,80003f78 <m_and_hs_using_vs_access_3+0x84>
        ERROR("trying to read as mprv from low privilege");
    80003f4e:	0002f517          	auipc	a0,0x2f
    80003f52:	f7a50513          	addi	a0,a0,-134 # 80032ec8 <__func__.0+0xae0>
    80003f56:	56e2b0ef          	jal	8002f4c4 <printf>
    80003f5a:	0fe00613          	li	a2,254
    80003f5e:	0002c597          	auipc	a1,0x2c
    80003f62:	3fa58593          	addi	a1,a1,1018 # 80030358 <__func__.11>
    80003f66:	0002f517          	auipc	a0,0x2f
    80003f6a:	8f250513          	addi	a0,a0,-1806 # 80032858 <__func__.0+0x470>
    80003f6e:	5562b0ef          	jal	8002f4c4 <printf>
    80003f72:	4501                	li	a0,0
    80003f74:	1062b0ef          	jal	8002f07a <exit>
    set_prev_priv(priv);
    80003f78:	4509                	li	a0,2
    80003f7a:	ebbfc0ef          	jal	80000e34 <set_prev_priv>
    asm volatile(
    80003f7e:	000807b7          	lui	a5,0x80
    80003f82:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003f84:	07b6                	slli	a5,a5,0xd
    80003f86:	00020737          	lui	a4,0x20
    80003f8a:	30072073          	csrs	mstatus,a4
    80003f8e:	6394                	ld	a3,0(a5)
    80003f90:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv vs access to vu leads to exception",
    80003f94:	08c00593          	li	a1,140
    80003f98:	0002f617          	auipc	a2,0x2f
    80003f9c:	0b060613          	addi	a2,a2,176 # 80033048 <__func__.0+0xc60>
    80003fa0:	0002e517          	auipc	a0,0x2e
    80003fa4:	74050513          	addi	a0,a0,1856 # 800326e0 <__func__.0+0x2f8>
    80003fa8:	51c2b0ef          	jal	8002f4c4 <printf>
    80003fac:	00058797          	auipc	a5,0x58
    80003fb0:	0657c783          	lbu	a5,101(a5) # 8005c011 <excpt+0x1>
    80003fb4:	00058917          	auipc	s2,0x58
    80003fb8:	05c90913          	addi	s2,s2,92 # 8005c010 <excpt>
    80003fbc:	0002e597          	auipc	a1,0x2e
    80003fc0:	6fc58593          	addi	a1,a1,1788 # 800326b8 <__func__.0+0x2d0>
    80003fc4:	cf91                	beqz	a5,80003fe0 <m_and_hs_using_vs_access_3+0xec>
    80003fc6:	00893703          	ld	a4,8(s2)
    80003fca:	47b5                	li	a5,13
    80003fcc:	0002e597          	auipc	a1,0x2e
    80003fd0:	6dc58593          	addi	a1,a1,1756 # 800326a8 <__func__.0+0x2c0>
    80003fd4:	00f70663          	beq	a4,a5,80003fe0 <m_and_hs_using_vs_access_3+0xec>
    80003fd8:	0002e597          	auipc	a1,0x2e
    80003fdc:	6e058593          	addi	a1,a1,1760 # 800326b8 <__func__.0+0x2d0>
    80003fe0:	0002e517          	auipc	a0,0x2e
    80003fe4:	71850513          	addi	a0,a0,1816 # 800326f8 <__func__.0+0x310>
    80003fe8:	4dc2b0ef          	jal	8002f4c4 <printf>
    80003fec:	00058797          	auipc	a5,0x58
    80003ff0:	0257c783          	lbu	a5,37(a5) # 8005c011 <excpt+0x1>
    80003ff4:	c791                	beqz	a5,80004000 <m_and_hs_using_vs_access_3+0x10c>
    80003ff6:	00893703          	ld	a4,8(s2)
    80003ffa:	47b5                	li	a5,13
    80003ffc:	00f70c63          	beq	a4,a5,80004014 <m_and_hs_using_vs_access_3+0x120>
    80004000:	0002e517          	auipc	a0,0x2e
    80004004:	70050513          	addi	a0,a0,1792 # 80032700 <__func__.0+0x318>
    80004008:	4bc2b0ef          	jal	8002f4c4 <printf>
    8000400c:	02900513          	li	a0,41
    80004010:	1a22a0ef          	jal	8002e1b2 <putchar>
    80004014:	4529                	li	a0,10
    80004016:	19c2a0ef          	jal	8002e1b2 <putchar>
    8000401a:	00058797          	auipc	a5,0x58
    8000401e:	ff77c783          	lbu	a5,-9(a5) # 8005c011 <excpt+0x1>
    80004022:	4481                	li	s1,0
    80004024:	c791                	beqz	a5,80004030 <m_and_hs_using_vs_access_3+0x13c>
    80004026:	00893483          	ld	s1,8(s2)
    8000402a:	14cd                	addi	s1,s1,-13
    8000402c:	0014b493          	seqz	s1,s1
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF 
    );

    TEST_SETUP_EXCEPT();
    80004030:	de9fc0ef          	jal	80000e18 <test_setup_except_function>
    80004034:	6018                	ld	a4,0(s0)
    80004036:	440197b7          	lui	a5,0x44019
    8000403a:	0786                	slli	a5,a5,0x1
    8000403c:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    8000403e:	0003d717          	auipc	a4,0x3d
    80004042:	01672703          	lw	a4,22(a4) # 80041054 <curr_priv>
    80004046:	4791                	li	a5,4
    80004048:	f0f713e3          	bne	a4,a5,80003f4e <m_and_hs_using_vs_access_3+0x5a>
    set_prev_priv(priv);
    8000404c:	4501                	li	a0,0
    8000404e:	de7fc0ef          	jal	80000e34 <set_prev_priv>
    asm volatile(
    80004052:	000807b7          	lui	a5,0x80
    80004056:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80004058:	07b6                	slli	a5,a5,0xd
    8000405a:	00020737          	lui	a4,0x20
    8000405e:	30072073          	csrs	mstatus,a4
    80004062:	6394                	ld	a3,0(a5)
    80004064:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VU, vaddr);
    TEST_ASSERT("machine mprv vu access to vu successful",
    80004068:	08c00593          	li	a1,140
    8000406c:	0002f617          	auipc	a2,0x2f
    80004070:	00c60613          	addi	a2,a2,12 # 80033078 <__func__.0+0xc90>
    80004074:	0002e517          	auipc	a0,0x2e
    80004078:	66c50513          	addi	a0,a0,1644 # 800326e0 <__func__.0+0x2f8>
    8000407c:	4482b0ef          	jal	8002f4c4 <printf>
    80004080:	00058797          	auipc	a5,0x58
    80004084:	f917c783          	lbu	a5,-111(a5) # 8005c011 <excpt+0x1>
    80004088:	0002e597          	auipc	a1,0x2e
    8000408c:	63058593          	addi	a1,a1,1584 # 800326b8 <__func__.0+0x2d0>
    80004090:	e789                	bnez	a5,8000409a <m_and_hs_using_vs_access_3+0x1a6>
    80004092:	0002e597          	auipc	a1,0x2e
    80004096:	61658593          	addi	a1,a1,1558 # 800326a8 <__func__.0+0x2c0>
    8000409a:	0002e517          	auipc	a0,0x2e
    8000409e:	65e50513          	addi	a0,a0,1630 # 800326f8 <__func__.0+0x310>
    800040a2:	4222b0ef          	jal	8002f4c4 <printf>
    800040a6:	00058797          	auipc	a5,0x58
    800040aa:	f6b7c783          	lbu	a5,-149(a5) # 8005c011 <excpt+0x1>
    800040ae:	e7b9                	bnez	a5,800040fc <m_and_hs_using_vs_access_3+0x208>
    800040b0:	4529                	li	a0,10
    800040b2:	1002a0ef          	jal	8002e1b2 <putchar>
    800040b6:	c491                	beqz	s1,800040c2 <m_and_hs_using_vs_access_3+0x1ce>
    800040b8:	00058797          	auipc	a5,0x58
    800040bc:	f597c783          	lbu	a5,-167(a5) # 8005c011 <excpt+0x1>
    800040c0:	cb85                	beqz	a5,800040f0 <m_and_hs_using_vs_access_3+0x1fc>
    800040c2:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    800040c4:	0002e597          	auipc	a1,0x2e
    800040c8:	5f458593          	addi	a1,a1,1524 # 800326b8 <__func__.0+0x2d0>
    800040cc:	0002e517          	auipc	a0,0x2e
    800040d0:	69450513          	addi	a0,a0,1684 # 80032760 <__func__.0+0x378>
    800040d4:	3f02b0ef          	jal	8002f4c4 <printf>
    800040d8:	4511                	li	a0,4
    800040da:	e3bfc0ef          	jal	80000f14 <goto_priv>
    800040de:	e98fd0ef          	jal	80001776 <reset_state>
}
    800040e2:	60e2                	ld	ra,24(sp)
    800040e4:	8522                	mv	a0,s0
    800040e6:	6442                	ld	s0,16(sp)
    800040e8:	64a2                	ld	s1,8(sp)
    800040ea:	6902                	ld	s2,0(sp)
    800040ec:	6105                	addi	sp,sp,32
    800040ee:	8082                	ret
    TEST_ASSERT("machine mprv vu access to vu successful",
    800040f0:	4405                	li	s0,1
    TEST_END();
    800040f2:	0002e597          	auipc	a1,0x2e
    800040f6:	5b658593          	addi	a1,a1,1462 # 800326a8 <__func__.0+0x2c0>
    800040fa:	bfc9                	j	800040cc <m_and_hs_using_vs_access_3+0x1d8>
    TEST_ASSERT("machine mprv vu access to vu successful",
    800040fc:	0002e517          	auipc	a0,0x2e
    80004100:	60450513          	addi	a0,a0,1540 # 80032700 <__func__.0+0x318>
    80004104:	3c02b0ef          	jal	8002f4c4 <printf>
    80004108:	02900513          	li	a0,41
    8000410c:	0a62a0ef          	jal	8002e1b2 <putchar>
    80004110:	b745                	j	800040b0 <m_and_hs_using_vs_access_3+0x1bc>

0000000080004112 <m_and_hs_using_vs_access_4>:

bool m_and_hs_using_vs_access_4(){
    80004112:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004114:	0002c597          	auipc	a1,0x2c
    80004118:	29458593          	addi	a1,a1,660 # 800303a8 <__func__.8>
    8000411c:	0002e517          	auipc	a0,0x2e
    80004120:	5ac50513          	addi	a0,a0,1452 # 800326c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_4(){
    80004124:	ec06                	sd	ra,24(sp)
    80004126:	e822                	sd	s0,16(sp)
    80004128:	e426                	sd	s1,8(sp)
    8000412a:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000412c:	3982b0ef          	jal	8002f4c4 <printf>
    80004130:	4529                	li	a0,10
    80004132:	0802a0ef          	jal	8002e1b2 <putchar>
    
    hspt_init();
    80004136:	cb6fc0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    8000413a:	897fc0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8000413e:	e4afc0ef          	jal	80000788 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80004142:	450d                	li	a0,3
    80004144:	dd1fc0ef          	jal	80000f14 <goto_priv>

    set_prev_priv(PRIV_VU);
    80004148:	4501                	li	a0,0
    8000414a:	cebfc0ef          	jal	80000e34 <set_prev_priv>
    8000414e:	0003b417          	auipc	s0,0x3b
    80004152:	ed240413          	addi	s0,s0,-302 # 8003f020 <__func__.0+0xcc38>
    TEST_SETUP_EXCEPT();
    80004156:	cc3fc0ef          	jal	80000e18 <test_setup_except_function>
    8000415a:	6014                	ld	a3,0(s0)
    8000415c:	44019737          	lui	a4,0x44019
    asm volatile(
    80004160:	000807b7          	lui	a5,0x80
    80004164:	0706                	slli	a4,a4,0x1
    80004166:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80004168:	e314                	sd	a3,0(a4)
    8000416a:	07b6                	slli	a5,a5,0xd
    8000416c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80004170:	08c00593          	li	a1,140
    80004174:	0002f617          	auipc	a2,0x2f
    80004178:	f2c60613          	addi	a2,a2,-212 # 800330a0 <__func__.0+0xcb8>
    8000417c:	0002e517          	auipc	a0,0x2e
    80004180:	56450513          	addi	a0,a0,1380 # 800326e0 <__func__.0+0x2f8>
    80004184:	3402b0ef          	jal	8002f4c4 <printf>
    80004188:	00058797          	auipc	a5,0x58
    8000418c:	e897c783          	lbu	a5,-375(a5) # 8005c011 <excpt+0x1>
    80004190:	0002e597          	auipc	a1,0x2e
    80004194:	51858593          	addi	a1,a1,1304 # 800326a8 <__func__.0+0x2c0>
    80004198:	c789                	beqz	a5,800041a2 <m_and_hs_using_vs_access_4+0x90>
    8000419a:	0002e597          	auipc	a1,0x2e
    8000419e:	51e58593          	addi	a1,a1,1310 # 800326b8 <__func__.0+0x2d0>
    800041a2:	0002e517          	auipc	a0,0x2e
    800041a6:	55650513          	addi	a0,a0,1366 # 800326f8 <__func__.0+0x310>
    800041aa:	31a2b0ef          	jal	8002f4c4 <printf>
    800041ae:	00058797          	auipc	a5,0x58
    800041b2:	e637c783          	lbu	a5,-413(a5) # 8005c011 <excpt+0x1>
    800041b6:	10079463          	bnez	a5,800042be <m_and_hs_using_vs_access_4+0x1ac>
    800041ba:	4529                	li	a0,10
    800041bc:	7f7290ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    800041c0:	4509                	li	a0,2
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800041c2:	00058917          	auipc	s2,0x58
    800041c6:	e4f94903          	lbu	s2,-433(s2) # 8005c011 <excpt+0x1>
    set_prev_priv(PRIV_VS);
    800041ca:	c6bfc0ef          	jal	80000e34 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    800041ce:	c4bfc0ef          	jal	80000e18 <test_setup_except_function>
    800041d2:	6014                	ld	a3,0(s0)
    800041d4:	44019737          	lui	a4,0x44019
    800041d8:	000807b7          	lui	a5,0x80
    800041dc:	0706                	slli	a4,a4,0x1
    800041de:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800041e0:	00058497          	auipc	s1,0x58
    800041e4:	e3048493          	addi	s1,s1,-464 # 8005c010 <excpt>
    800041e8:	e314                	sd	a3,0(a4)
    800041ea:	07b6                	slli	a5,a5,0xd
    800041ec:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    800041f0:	08c00593          	li	a1,140
    800041f4:	0002f617          	auipc	a2,0x2f
    800041f8:	edc60613          	addi	a2,a2,-292 # 800330d0 <__func__.0+0xce8>
    800041fc:	0002e517          	auipc	a0,0x2e
    80004200:	4e450513          	addi	a0,a0,1252 # 800326e0 <__func__.0+0x2f8>
    80004204:	2c02b0ef          	jal	8002f4c4 <printf>
    80004208:	00058797          	auipc	a5,0x58
    8000420c:	e097c783          	lbu	a5,-503(a5) # 8005c011 <excpt+0x1>
    80004210:	0002e597          	auipc	a1,0x2e
    80004214:	4a858593          	addi	a1,a1,1192 # 800326b8 <__func__.0+0x2d0>
    80004218:	cf89                	beqz	a5,80004232 <m_and_hs_using_vs_access_4+0x120>
    8000421a:	6498                	ld	a4,8(s1)
    8000421c:	47b5                	li	a5,13
    8000421e:	0002e597          	auipc	a1,0x2e
    80004222:	48a58593          	addi	a1,a1,1162 # 800326a8 <__func__.0+0x2c0>
    80004226:	00f70663          	beq	a4,a5,80004232 <m_and_hs_using_vs_access_4+0x120>
    8000422a:	0002e597          	auipc	a1,0x2e
    8000422e:	48e58593          	addi	a1,a1,1166 # 800326b8 <__func__.0+0x2d0>
    80004232:	0002e517          	auipc	a0,0x2e
    80004236:	4c650513          	addi	a0,a0,1222 # 800326f8 <__func__.0+0x310>
    8000423a:	28a2b0ef          	jal	8002f4c4 <printf>
    8000423e:	00058797          	auipc	a5,0x58
    80004242:	dd37c783          	lbu	a5,-557(a5) # 8005c011 <excpt+0x1>
    80004246:	c789                	beqz	a5,80004250 <m_and_hs_using_vs_access_4+0x13e>
    80004248:	6498                	ld	a4,8(s1)
    8000424a:	47b5                	li	a5,13
    8000424c:	00f70c63          	beq	a4,a5,80004264 <m_and_hs_using_vs_access_4+0x152>
    80004250:	0002e517          	auipc	a0,0x2e
    80004254:	4b050513          	addi	a0,a0,1200 # 80032700 <__func__.0+0x318>
    80004258:	26c2b0ef          	jal	8002f4c4 <printf>
    8000425c:	02900513          	li	a0,41
    80004260:	753290ef          	jal	8002e1b2 <putchar>
    80004264:	4529                	li	a0,10
    80004266:	74d290ef          	jal	8002e1b2 <putchar>
    8000426a:	02091363          	bnez	s2,80004290 <m_and_hs_using_vs_access_4+0x17e>
    8000426e:	00058417          	auipc	s0,0x58
    80004272:	da344403          	lbu	s0,-605(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80004276:	0002e597          	auipc	a1,0x2e
    8000427a:	44258593          	addi	a1,a1,1090 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8000427e:	cc11                	beqz	s0,8000429a <m_and_hs_using_vs_access_4+0x188>
    80004280:	6498                	ld	a4,8(s1)
    80004282:	47b5                	li	a5,13
    TEST_END();
    80004284:	0002e597          	auipc	a1,0x2e
    80004288:	42458593          	addi	a1,a1,1060 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8000428c:	00f70763          	beq	a4,a5,8000429a <m_and_hs_using_vs_access_4+0x188>
    80004290:	4401                	li	s0,0
    TEST_END();
    80004292:	0002e597          	auipc	a1,0x2e
    80004296:	42658593          	addi	a1,a1,1062 # 800326b8 <__func__.0+0x2d0>
    8000429a:	0002e517          	auipc	a0,0x2e
    8000429e:	4c650513          	addi	a0,a0,1222 # 80032760 <__func__.0+0x378>
    800042a2:	2222b0ef          	jal	8002f4c4 <printf>
    800042a6:	4511                	li	a0,4
    800042a8:	c6dfc0ef          	jal	80000f14 <goto_priv>
    800042ac:	ccafd0ef          	jal	80001776 <reset_state>
}
    800042b0:	60e2                	ld	ra,24(sp)
    800042b2:	8522                	mv	a0,s0
    800042b4:	6442                	ld	s0,16(sp)
    800042b6:	64a2                	ld	s1,8(sp)
    800042b8:	6902                	ld	s2,0(sp)
    800042ba:	6105                	addi	sp,sp,32
    800042bc:	8082                	ret
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800042be:	0002e517          	auipc	a0,0x2e
    800042c2:	44250513          	addi	a0,a0,1090 # 80032700 <__func__.0+0x318>
    800042c6:	1fe2b0ef          	jal	8002f4c4 <printf>
    800042ca:	02900513          	li	a0,41
    800042ce:	6e5290ef          	jal	8002e1b2 <putchar>
    800042d2:	b5e5                	j	800041ba <m_and_hs_using_vs_access_4+0xa8>

00000000800042d4 <m_and_hs_using_vs_access_5>:

bool m_and_hs_using_vs_access_5(){
    800042d4:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800042d6:	0002c597          	auipc	a1,0x2c
    800042da:	0f258593          	addi	a1,a1,242 # 800303c8 <__func__.7>
    800042de:	0002e517          	auipc	a0,0x2e
    800042e2:	3ea50513          	addi	a0,a0,1002 # 800326c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_5(){
    800042e6:	ec06                	sd	ra,24(sp)
    800042e8:	e822                	sd	s0,16(sp)
    800042ea:	e426                	sd	s1,8(sp)
    TEST_START();
    800042ec:	1d82b0ef          	jal	8002f4c4 <printf>
    800042f0:	4529                	li	a0,10
    800042f2:	6c1290ef          	jal	8002e1b2 <putchar>
    
    hspt_init();
    800042f6:	af6fc0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    800042fa:	ed6fc0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800042fe:	c8afc0ef          	jal	80000788 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);


    goto_priv(PRIV_M);
    80004302:	4511                	li	a0,4
    80004304:	c11fc0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80004308:	000407b7          	lui	a5,0x40
    8000430c:	2007a073          	csrs	vsstatus,a5

    TEST_SETUP_EXCEPT();
    80004310:	b09fc0ef          	jal	80000e18 <test_setup_except_function>
    80004314:	0003b417          	auipc	s0,0x3b
    80004318:	d0c43403          	ld	s0,-756(s0) # 8003f020 <__func__.0+0xcc38>
    8000431c:	440197b7          	lui	a5,0x44019
    if(curr_priv != PRIV_M){
    80004320:	0003d717          	auipc	a4,0x3d
    80004324:	d3472703          	lw	a4,-716(a4) # 80041054 <curr_priv>
    80004328:	0786                	slli	a5,a5,0x1
    8000432a:	e380                	sd	s0,0(a5)
    8000432c:	4791                	li	a5,4
    8000432e:	02f70763          	beq	a4,a5,8000435c <m_and_hs_using_vs_access_5+0x88>
        ERROR("trying to read as mprv from low privilege");
    80004332:	0002f517          	auipc	a0,0x2f
    80004336:	b9650513          	addi	a0,a0,-1130 # 80032ec8 <__func__.0+0xae0>
    8000433a:	18a2b0ef          	jal	8002f4c4 <printf>
    8000433e:	0fe00613          	li	a2,254
    80004342:	0002c597          	auipc	a1,0x2c
    80004346:	01658593          	addi	a1,a1,22 # 80030358 <__func__.11>
    8000434a:	0002e517          	auipc	a0,0x2e
    8000434e:	50e50513          	addi	a0,a0,1294 # 80032858 <__func__.0+0x470>
    80004352:	1722b0ef          	jal	8002f4c4 <printf>
    80004356:	4501                	li	a0,0
    80004358:	5232a0ef          	jal	8002f07a <exit>
    set_prev_priv(priv);
    8000435c:	4509                	li	a0,2
    8000435e:	ad7fc0ef          	jal	80000e34 <set_prev_priv>
    asm volatile(
    80004362:	000807b7          	lui	a5,0x80
    80004366:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80004368:	07b6                	slli	a5,a5,0xd
    8000436a:	00020737          	lui	a4,0x20
    8000436e:	30072073          	csrs	mstatus,a4
    80004372:	6384                	ld	s1,0(a5)
    80004374:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    80004378:	0002f617          	auipc	a2,0x2f
    8000437c:	d9060613          	addi	a2,a2,-624 # 80033108 <__func__.0+0xd20>
    80004380:	08c00593          	li	a1,140
    80004384:	0002e517          	auipc	a0,0x2e
    80004388:	35c50513          	addi	a0,a0,860 # 800326e0 <__func__.0+0x2f8>
    8000438c:	1382b0ef          	jal	8002f4c4 <printf>
    80004390:	00058797          	auipc	a5,0x58
    80004394:	c817c783          	lbu	a5,-895(a5) # 8005c011 <excpt+0x1>
    80004398:	c3d1                	beqz	a5,8000441c <m_and_hs_using_vs_access_5+0x148>
    8000439a:	0002e597          	auipc	a1,0x2e
    8000439e:	31e58593          	addi	a1,a1,798 # 800326b8 <__func__.0+0x2d0>
    800043a2:	0002e517          	auipc	a0,0x2e
    800043a6:	35650513          	addi	a0,a0,854 # 800326f8 <__func__.0+0x310>
    800043aa:	11a2b0ef          	jal	8002f4c4 <printf>
    800043ae:	00058797          	auipc	a5,0x58
    800043b2:	c637c783          	lbu	a5,-925(a5) # 8005c011 <excpt+0x1>
    800043b6:	e399                	bnez	a5,800043bc <m_and_hs_using_vs_access_5+0xe8>
    800043b8:	08848e63          	beq	s1,s0,80004454 <m_and_hs_using_vs_access_5+0x180>
    800043bc:	0002e517          	auipc	a0,0x2e
    800043c0:	34450513          	addi	a0,a0,836 # 80032700 <__func__.0+0x318>
    800043c4:	1002b0ef          	jal	8002f4c4 <printf>
    800043c8:	02900513          	li	a0,41
    800043cc:	5e7290ef          	jal	8002e1b2 <putchar>
    800043d0:	4529                	li	a0,10
    800043d2:	5e1290ef          	jal	8002e1b2 <putchar>
    800043d6:	00058797          	auipc	a5,0x58
    800043da:	c3b7c783          	lbu	a5,-965(a5) # 8005c011 <excpt+0x1>
    800043de:	eb89                	bnez	a5,800043f0 <m_and_hs_using_vs_access_5+0x11c>
    800043e0:	011087b7          	lui	a5,0x1108
    800043e4:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800043e8:	07c2                	slli	a5,a5,0x10
    800043ea:	17b9                	addi	a5,a5,-18
    800043ec:	06f48c63          	beq	s1,a5,80004464 <m_and_hs_using_vs_access_5+0x190>
    800043f0:	4401                	li	s0,0
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    TEST_END();
    800043f2:	0002e597          	auipc	a1,0x2e
    800043f6:	2c658593          	addi	a1,a1,710 # 800326b8 <__func__.0+0x2d0>
    800043fa:	0002e517          	auipc	a0,0x2e
    800043fe:	36650513          	addi	a0,a0,870 # 80032760 <__func__.0+0x378>
    80004402:	0c22b0ef          	jal	8002f4c4 <printf>
    80004406:	4511                	li	a0,4
    80004408:	b0dfc0ef          	jal	80000f14 <goto_priv>
    8000440c:	b6afd0ef          	jal	80001776 <reset_state>
}
    80004410:	60e2                	ld	ra,24(sp)
    80004412:	8522                	mv	a0,s0
    80004414:	6442                	ld	s0,16(sp)
    80004416:	64a2                	ld	s1,8(sp)
    80004418:	6105                	addi	sp,sp,32
    8000441a:	8082                	ret
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    8000441c:	00848d63          	beq	s1,s0,80004436 <m_and_hs_using_vs_access_5+0x162>
    80004420:	0002e597          	auipc	a1,0x2e
    80004424:	29858593          	addi	a1,a1,664 # 800326b8 <__func__.0+0x2d0>
    80004428:	0002e517          	auipc	a0,0x2e
    8000442c:	2d050513          	addi	a0,a0,720 # 800326f8 <__func__.0+0x310>
    80004430:	0942b0ef          	jal	8002f4c4 <printf>
    80004434:	b761                	j	800043bc <m_and_hs_using_vs_access_5+0xe8>
    80004436:	0002e597          	auipc	a1,0x2e
    8000443a:	27258593          	addi	a1,a1,626 # 800326a8 <__func__.0+0x2c0>
    8000443e:	0002e517          	auipc	a0,0x2e
    80004442:	2ba50513          	addi	a0,a0,698 # 800326f8 <__func__.0+0x310>
    80004446:	07e2b0ef          	jal	8002f4c4 <printf>
    8000444a:	00058797          	auipc	a5,0x58
    8000444e:	bc77c783          	lbu	a5,-1081(a5) # 8005c011 <excpt+0x1>
    80004452:	f7ad                	bnez	a5,800043bc <m_and_hs_using_vs_access_5+0xe8>
    80004454:	4529                	li	a0,10
    80004456:	55d290ef          	jal	8002e1b2 <putchar>
    8000445a:	00058797          	auipc	a5,0x58
    8000445e:	bb77c783          	lbu	a5,-1097(a5) # 8005c011 <excpt+0x1>
    80004462:	f7d9                	bnez	a5,800043f0 <m_and_hs_using_vs_access_5+0x11c>
    80004464:	4405                	li	s0,1
    TEST_END();
    80004466:	0002e597          	auipc	a1,0x2e
    8000446a:	24258593          	addi	a1,a1,578 # 800326a8 <__func__.0+0x2c0>
    8000446e:	b771                	j	800043fa <m_and_hs_using_vs_access_5+0x126>

0000000080004470 <m_and_hs_using_vs_access_6>:

bool m_and_hs_using_vs_access_6(){
    80004470:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004472:	0002c597          	auipc	a1,0x2c
    80004476:	f7658593          	addi	a1,a1,-138 # 800303e8 <__func__.6>
    8000447a:	0002e517          	auipc	a0,0x2e
    8000447e:	24e50513          	addi	a0,a0,590 # 800326c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_6(){
    80004482:	ec06                	sd	ra,24(sp)
    80004484:	e822                	sd	s0,16(sp)
    80004486:	e426                	sd	s1,8(sp)
    TEST_START();
    80004488:	03c2b0ef          	jal	8002f4c4 <printf>
    8000448c:	4529                	li	a0,10
    8000448e:	525290ef          	jal	8002e1b2 <putchar>
    
    hspt_init();
    80004492:	95afc0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    80004496:	d3afc0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8000449a:	aeefc0ef          	jal	80000788 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8000449e:	000407b7          	lui	a5,0x40
    800044a2:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    800044a6:	450d                	li	a0,3
    800044a8:	a6dfc0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    800044ac:	4509                	li	a0,2
    800044ae:	987fc0ef          	jal	80000e34 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    800044b2:	967fc0ef          	jal	80000e18 <test_setup_except_function>
    800044b6:	0003b497          	auipc	s1,0x3b
    800044ba:	b6a4b483          	ld	s1,-1174(s1) # 8003f020 <__func__.0+0xcc38>
    800044be:	440197b7          	lui	a5,0x44019
    800044c2:	00080437          	lui	s0,0x80
    800044c6:	0786                	slli	a5,a5,0x1
    800044c8:	0465                	addi	s0,s0,25 # 80019 <_test_table_size+0x80018>
    800044ca:	e384                	sd	s1,0(a5)
    800044cc:	0436                	slli	s0,s0,0xd
    800044ce:	6c044473          	.insn	4, 0x6c044473
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800044d2:	0002f617          	auipc	a2,0x2f
    800044d6:	c7e60613          	addi	a2,a2,-898 # 80033150 <__func__.0+0xd68>
    800044da:	08c00593          	li	a1,140
    800044de:	0002e517          	auipc	a0,0x2e
    800044e2:	20250513          	addi	a0,a0,514 # 800326e0 <__func__.0+0x2f8>
    800044e6:	7df2a0ef          	jal	8002f4c4 <printf>
    800044ea:	00058797          	auipc	a5,0x58
    800044ee:	b277c783          	lbu	a5,-1241(a5) # 8005c011 <excpt+0x1>
    800044f2:	e7a5                	bnez	a5,8000455a <m_and_hs_using_vs_access_6+0xea>
    800044f4:	0c940863          	beq	s0,s1,800045c4 <m_and_hs_using_vs_access_6+0x154>
    800044f8:	0002e597          	auipc	a1,0x2e
    800044fc:	1c058593          	addi	a1,a1,448 # 800326b8 <__func__.0+0x2d0>
    80004500:	0002e517          	auipc	a0,0x2e
    80004504:	1f850513          	addi	a0,a0,504 # 800326f8 <__func__.0+0x310>
    80004508:	7bd2a0ef          	jal	8002f4c4 <printf>
    8000450c:	0002e517          	auipc	a0,0x2e
    80004510:	1f450513          	addi	a0,a0,500 # 80032700 <__func__.0+0x318>
    80004514:	7b12a0ef          	jal	8002f4c4 <printf>
    80004518:	02900513          	li	a0,41
    8000451c:	497290ef          	jal	8002e1b2 <putchar>
    80004520:	4529                	li	a0,10
    80004522:	491290ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80004526:	000407b7          	lui	a5,0x40
    8000452a:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000452e:	4401                	li	s0,0

    TEST_END();
    80004530:	0002e597          	auipc	a1,0x2e
    80004534:	18858593          	addi	a1,a1,392 # 800326b8 <__func__.0+0x2d0>
    80004538:	0002e517          	auipc	a0,0x2e
    8000453c:	22850513          	addi	a0,a0,552 # 80032760 <__func__.0+0x378>
    80004540:	7852a0ef          	jal	8002f4c4 <printf>
    80004544:	4511                	li	a0,4
    80004546:	9cffc0ef          	jal	80000f14 <goto_priv>
    8000454a:	a2cfd0ef          	jal	80001776 <reset_state>
}
    8000454e:	60e2                	ld	ra,24(sp)
    80004550:	8522                	mv	a0,s0
    80004552:	6442                	ld	s0,16(sp)
    80004554:	64a2                	ld	s1,8(sp)
    80004556:	6105                	addi	sp,sp,32
    80004558:	8082                	ret
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000455a:	0002e597          	auipc	a1,0x2e
    8000455e:	15e58593          	addi	a1,a1,350 # 800326b8 <__func__.0+0x2d0>
    80004562:	0002e517          	auipc	a0,0x2e
    80004566:	19650513          	addi	a0,a0,406 # 800326f8 <__func__.0+0x310>
    8000456a:	75b2a0ef          	jal	8002f4c4 <printf>
    8000456e:	00058797          	auipc	a5,0x58
    80004572:	aa37c783          	lbu	a5,-1373(a5) # 8005c011 <excpt+0x1>
    80004576:	e399                	bnez	a5,8000457c <m_and_hs_using_vs_access_6+0x10c>
    80004578:	06940563          	beq	s0,s1,800045e2 <m_and_hs_using_vs_access_6+0x172>
    8000457c:	0002e517          	auipc	a0,0x2e
    80004580:	18450513          	addi	a0,a0,388 # 80032700 <__func__.0+0x318>
    80004584:	7412a0ef          	jal	8002f4c4 <printf>
    80004588:	02900513          	li	a0,41
    8000458c:	427290ef          	jal	8002e1b2 <putchar>
    80004590:	4529                	li	a0,10
    80004592:	421290ef          	jal	8002e1b2 <putchar>
    80004596:	00058797          	auipc	a5,0x58
    8000459a:	a7b7c783          	lbu	a5,-1413(a5) # 8005c011 <excpt+0x1>
    8000459e:	f7c1                	bnez	a5,80004526 <m_and_hs_using_vs_access_6+0xb6>
    800045a0:	011087b7          	lui	a5,0x1108
    800045a4:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800045a8:	07c2                	slli	a5,a5,0x10
    800045aa:	17b9                	addi	a5,a5,-18
    800045ac:	f6f41de3          	bne	s0,a5,80004526 <m_and_hs_using_vs_access_6+0xb6>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800045b0:	000407b7          	lui	a5,0x40
    800045b4:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800045b8:	4405                	li	s0,1
    TEST_END();
    800045ba:	0002e597          	auipc	a1,0x2e
    800045be:	0ee58593          	addi	a1,a1,238 # 800326a8 <__func__.0+0x2c0>
    800045c2:	bf9d                	j	80004538 <m_and_hs_using_vs_access_6+0xc8>
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800045c4:	0002e597          	auipc	a1,0x2e
    800045c8:	0e458593          	addi	a1,a1,228 # 800326a8 <__func__.0+0x2c0>
    800045cc:	0002e517          	auipc	a0,0x2e
    800045d0:	12c50513          	addi	a0,a0,300 # 800326f8 <__func__.0+0x310>
    800045d4:	6f12a0ef          	jal	8002f4c4 <printf>
    800045d8:	00058797          	auipc	a5,0x58
    800045dc:	a397c783          	lbu	a5,-1479(a5) # 8005c011 <excpt+0x1>
    800045e0:	ffd1                	bnez	a5,8000457c <m_and_hs_using_vs_access_6+0x10c>
    800045e2:	4529                	li	a0,10
    800045e4:	3cf290ef          	jal	8002e1b2 <putchar>
    800045e8:	00058797          	auipc	a5,0x58
    800045ec:	a297c783          	lbu	a5,-1495(a5) # 8005c011 <excpt+0x1>
    800045f0:	fb9d                	bnez	a5,80004526 <m_and_hs_using_vs_access_6+0xb6>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800045f2:	000407b7          	lui	a5,0x40
    800045f6:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800045fa:	4405                	li	s0,1
    TEST_END();
    800045fc:	0002e597          	auipc	a1,0x2e
    80004600:	0ac58593          	addi	a1,a1,172 # 800326a8 <__func__.0+0x2c0>
    80004604:	bf15                	j	80004538 <m_and_hs_using_vs_access_6+0xc8>

0000000080004606 <m_and_hs_using_vs_access_7>:

bool m_and_hs_using_vs_access_7(){
    80004606:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004608:	0002c597          	auipc	a1,0x2c
    8000460c:	e0058593          	addi	a1,a1,-512 # 80030408 <__func__.5>
    80004610:	0002e517          	auipc	a0,0x2e
    80004614:	0b850513          	addi	a0,a0,184 # 800326c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_7(){
    80004618:	e406                	sd	ra,8(sp)
    8000461a:	e022                	sd	s0,0(sp)
    TEST_START();
    8000461c:	6a92a0ef          	jal	8002f4c4 <printf>
    80004620:	4529                	li	a0,10
    80004622:	391290ef          	jal	8002e1b2 <putchar>
    
    hspt_init();
    80004626:	fc7fb0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    8000462a:	ba6fc0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8000462e:	95afc0ef          	jal	80000788 <vspt_init>

    vaddr = vs_page_base(VSX_GUX);
    addr = phys_page_base(VSX_GUX);

    goto_priv(PRIV_HS);
    80004632:	450d                	li	a0,3
    80004634:	8e1fc0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004638:	4509                	li	a0,2
    8000463a:	ffafc0ef          	jal	80000e34 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    8000463e:	fdafc0ef          	jal	80000e18 <test_setup_except_function>
    80004642:	200037b7          	lui	a5,0x20003
    80004646:	078e                	slli	a5,a5,0x3
    80004648:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    8000464c:	08c00593          	li	a1,140
    80004650:	0002f617          	auipc	a2,0x2f
    80004654:	b3860613          	addi	a2,a2,-1224 # 80033188 <__func__.0+0xda0>
    80004658:	0002e517          	auipc	a0,0x2e
    8000465c:	08850513          	addi	a0,a0,136 # 800326e0 <__func__.0+0x2f8>
    80004660:	6652a0ef          	jal	8002f4c4 <printf>
    80004664:	00058797          	auipc	a5,0x58
    80004668:	9ad7c783          	lbu	a5,-1619(a5) # 8005c011 <excpt+0x1>
    8000466c:	0002e597          	auipc	a1,0x2e
    80004670:	03c58593          	addi	a1,a1,60 # 800326a8 <__func__.0+0x2c0>
    80004674:	e789                	bnez	a5,8000467e <m_and_hs_using_vs_access_7+0x78>
    80004676:	0002e597          	auipc	a1,0x2e
    8000467a:	04258593          	addi	a1,a1,66 # 800326b8 <__func__.0+0x2d0>
    8000467e:	0002e517          	auipc	a0,0x2e
    80004682:	07a50513          	addi	a0,a0,122 # 800326f8 <__func__.0+0x310>
    80004686:	63f2a0ef          	jal	8002f4c4 <printf>
    8000468a:	00058797          	auipc	a5,0x58
    8000468e:	9877c783          	lbu	a5,-1657(a5) # 8005c011 <excpt+0x1>
    80004692:	0c078e63          	beqz	a5,8000476e <m_and_hs_using_vs_access_7+0x168>
    80004696:	4529                	li	a0,10
    80004698:	31b290ef          	jal	8002e1b2 <putchar>
    8000469c:	00058417          	auipc	s0,0x58
    800046a0:	97544403          	lbu	s0,-1675(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true
    );
    TEST_SETUP_EXCEPT();
    800046a4:	f74fc0ef          	jal	80000e18 <test_setup_except_function>
    CSRS(sstatus, SSTATUS_MXR);
    800046a8:	000807b7          	lui	a5,0x80
    800046ac:	1007a073          	csrs	sstatus,a5
    800046b0:	200037b7          	lui	a5,0x20003
    800046b4:	078e                	slli	a5,a5,0x3
    800046b6:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    800046ba:	08c00593          	li	a1,140
    800046be:	0002f617          	auipc	a2,0x2f
    800046c2:	afa60613          	addi	a2,a2,-1286 # 800331b8 <__func__.0+0xdd0>
    800046c6:	0002e517          	auipc	a0,0x2e
    800046ca:	01a50513          	addi	a0,a0,26 # 800326e0 <__func__.0+0x2f8>
    800046ce:	5f72a0ef          	jal	8002f4c4 <printf>
    800046d2:	00058797          	auipc	a5,0x58
    800046d6:	93f7c783          	lbu	a5,-1729(a5) # 8005c011 <excpt+0x1>
    800046da:	0002e597          	auipc	a1,0x2e
    800046de:	fde58593          	addi	a1,a1,-34 # 800326b8 <__func__.0+0x2d0>
    800046e2:	e789                	bnez	a5,800046ec <m_and_hs_using_vs_access_7+0xe6>
    800046e4:	0002e597          	auipc	a1,0x2e
    800046e8:	fc458593          	addi	a1,a1,-60 # 800326a8 <__func__.0+0x2c0>
    800046ec:	0002e517          	auipc	a0,0x2e
    800046f0:	00c50513          	addi	a0,a0,12 # 800326f8 <__func__.0+0x310>
    800046f4:	5d12a0ef          	jal	8002f4c4 <printf>
    800046f8:	00058797          	auipc	a5,0x58
    800046fc:	9197c783          	lbu	a5,-1767(a5) # 8005c011 <excpt+0x1>
    80004700:	efa1                	bnez	a5,80004758 <m_and_hs_using_vs_access_7+0x152>
    80004702:	4529                	li	a0,10
    80004704:	2af290ef          	jal	8002e1b2 <putchar>
    80004708:	c411                	beqz	s0,80004714 <m_and_hs_using_vs_access_7+0x10e>
    8000470a:	00058797          	auipc	a5,0x58
    8000470e:	9077c783          	lbu	a5,-1785(a5) # 8005c011 <excpt+0x1>
    80004712:	cb95                	beqz	a5,80004746 <m_and_hs_using_vs_access_7+0x140>
        excpt.triggered == false
    );
    CSRC(sstatus, SSTATUS_MXR);
    80004714:	000807b7          	lui	a5,0x80
    80004718:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    8000471c:	4401                	li	s0,0

        TEST_END();
    8000471e:	0002e597          	auipc	a1,0x2e
    80004722:	f9a58593          	addi	a1,a1,-102 # 800326b8 <__func__.0+0x2d0>
    80004726:	0002e517          	auipc	a0,0x2e
    8000472a:	03a50513          	addi	a0,a0,58 # 80032760 <__func__.0+0x378>
    8000472e:	5972a0ef          	jal	8002f4c4 <printf>
    80004732:	4511                	li	a0,4
    80004734:	fe0fc0ef          	jal	80000f14 <goto_priv>
    80004738:	83efd0ef          	jal	80001776 <reset_state>
}
    8000473c:	60a2                	ld	ra,8(sp)
    8000473e:	8522                	mv	a0,s0
    80004740:	6402                	ld	s0,0(sp)
    80004742:	0141                	addi	sp,sp,16
    80004744:	8082                	ret
    CSRC(sstatus, SSTATUS_MXR);
    80004746:	000807b7          	lui	a5,0x80
    8000474a:	1007b073          	csrc	sstatus,a5
        TEST_END();
    8000474e:	0002e597          	auipc	a1,0x2e
    80004752:	f5a58593          	addi	a1,a1,-166 # 800326a8 <__func__.0+0x2c0>
    80004756:	bfc1                	j	80004726 <m_and_hs_using_vs_access_7+0x120>
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80004758:	0002e517          	auipc	a0,0x2e
    8000475c:	fa850513          	addi	a0,a0,-88 # 80032700 <__func__.0+0x318>
    80004760:	5652a0ef          	jal	8002f4c4 <printf>
    80004764:	02900513          	li	a0,41
    80004768:	24b290ef          	jal	8002e1b2 <putchar>
    8000476c:	bf59                	j	80004702 <m_and_hs_using_vs_access_7+0xfc>
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    8000476e:	0002e517          	auipc	a0,0x2e
    80004772:	f9250513          	addi	a0,a0,-110 # 80032700 <__func__.0+0x318>
    80004776:	54f2a0ef          	jal	8002f4c4 <printf>
    8000477a:	02900513          	li	a0,41
    8000477e:	235290ef          	jal	8002e1b2 <putchar>
    80004782:	bf11                	j	80004696 <m_and_hs_using_vs_access_7+0x90>

0000000080004784 <m_and_hs_using_vs_access_8>:

bool m_and_hs_using_vs_access_8(){
    80004784:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004786:	0002c597          	auipc	a1,0x2c
    8000478a:	ca258593          	addi	a1,a1,-862 # 80030428 <__func__.4>
    8000478e:	0002e517          	auipc	a0,0x2e
    80004792:	f3a50513          	addi	a0,a0,-198 # 800326c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_8(){
    80004796:	ec06                	sd	ra,24(sp)
    80004798:	e822                	sd	s0,16(sp)
    8000479a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000479c:	5292a0ef          	jal	8002f4c4 <printf>
    800047a0:	4529                	li	a0,10
    800047a2:	211290ef          	jal	8002e1b2 <putchar>
    
    hspt_init();
    800047a6:	e47fb0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    800047aa:	a26fc0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800047ae:	fdbfb0ef          	jal	80000788 <vspt_init>

    vaddr = vs_page_base(VSX_GUR);
    addr = phys_page_base(VSX_GUR);
    goto_priv(PRIV_HS);
    800047b2:	450d                	li	a0,3
    800047b4:	f60fc0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    800047b8:	4509                	li	a0,2
    800047ba:	e7afc0ef          	jal	80000e34 <set_prev_priv>
    CSRW(sscratch, 0x1111111);
    800047be:	011117b7          	lui	a5,0x1111
    800047c2:	1117879b          	addiw	a5,a5,273 # 1111111 <STACK_SIZE+0x1011111>
    800047c6:	14079073          	csrw	sscratch,a5
    TEST_SETUP_EXCEPT();
    800047ca:	e4efc0ef          	jal	80000e18 <test_setup_except_function>
    800047ce:	001007b7          	lui	a5,0x100
    800047d2:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    800047d4:	07b2                	slli	a5,a5,0xc
    800047d6:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to load page fault",
    800047da:	08c00593          	li	a1,140
    800047de:	0002f617          	auipc	a2,0x2f
    800047e2:	a0260613          	addi	a2,a2,-1534 # 800331e0 <__func__.0+0xdf8>
    800047e6:	0002e517          	auipc	a0,0x2e
    800047ea:	efa50513          	addi	a0,a0,-262 # 800326e0 <__func__.0+0x2f8>
    800047ee:	4d72a0ef          	jal	8002f4c4 <printf>
    800047f2:	00058797          	auipc	a5,0x58
    800047f6:	81f7c783          	lbu	a5,-2017(a5) # 8005c011 <excpt+0x1>
    800047fa:	00058497          	auipc	s1,0x58
    800047fe:	81648493          	addi	s1,s1,-2026 # 8005c010 <excpt>
    80004802:	0002e597          	auipc	a1,0x2e
    80004806:	eb658593          	addi	a1,a1,-330 # 800326b8 <__func__.0+0x2d0>
    8000480a:	cf89                	beqz	a5,80004824 <m_and_hs_using_vs_access_8+0xa0>
    8000480c:	6498                	ld	a4,8(s1)
    8000480e:	47b5                	li	a5,13
    80004810:	0002e597          	auipc	a1,0x2e
    80004814:	e9858593          	addi	a1,a1,-360 # 800326a8 <__func__.0+0x2c0>
    80004818:	00f70663          	beq	a4,a5,80004824 <m_and_hs_using_vs_access_8+0xa0>
    8000481c:	0002e597          	auipc	a1,0x2e
    80004820:	e9c58593          	addi	a1,a1,-356 # 800326b8 <__func__.0+0x2d0>
    80004824:	0002e517          	auipc	a0,0x2e
    80004828:	ed450513          	addi	a0,a0,-300 # 800326f8 <__func__.0+0x310>
    8000482c:	4992a0ef          	jal	8002f4c4 <printf>
    80004830:	00057797          	auipc	a5,0x57
    80004834:	7e17c783          	lbu	a5,2017(a5) # 8005c011 <excpt+0x1>
    80004838:	c789                	beqz	a5,80004842 <m_and_hs_using_vs_access_8+0xbe>
    8000483a:	6498                	ld	a4,8(s1)
    8000483c:	47b5                	li	a5,13
    8000483e:	00f70c63          	beq	a4,a5,80004856 <m_and_hs_using_vs_access_8+0xd2>
    80004842:	0002e517          	auipc	a0,0x2e
    80004846:	ebe50513          	addi	a0,a0,-322 # 80032700 <__func__.0+0x318>
    8000484a:	47b2a0ef          	jal	8002f4c4 <printf>
    8000484e:	02900513          	li	a0,41
    80004852:	161290ef          	jal	8002e1b2 <putchar>
    80004856:	4529                	li	a0,10
    80004858:	15b290ef          	jal	8002e1b2 <putchar>
    8000485c:	00057797          	auipc	a5,0x57
    80004860:	7b57c783          	lbu	a5,1973(a5) # 8005c011 <excpt+0x1>
    80004864:	4401                	li	s0,0
    80004866:	c789                	beqz	a5,80004870 <m_and_hs_using_vs_access_8+0xec>
    80004868:	6480                	ld	s0,8(s1)
    8000486a:	144d                	addi	s0,s0,-13
    8000486c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    TEST_SETUP_EXCEPT();
    80004870:	da8fc0ef          	jal	80000e18 <test_setup_except_function>
    CSRS(CSR_VSSTATUS, SSTATUS_MXR);
    80004874:	000807b7          	lui	a5,0x80
    80004878:	2007a073          	csrs	vsstatus,a5
    8000487c:	001007b7          	lui	a5,0x100
    80004880:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    80004882:	07b2                	slli	a5,a5,0xc
    80004884:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80004888:	08c00593          	li	a1,140
    8000488c:	0002f617          	auipc	a2,0x2f
    80004890:	98460613          	addi	a2,a2,-1660 # 80033210 <__func__.0+0xe28>
    80004894:	0002e517          	auipc	a0,0x2e
    80004898:	e4c50513          	addi	a0,a0,-436 # 800326e0 <__func__.0+0x2f8>
    8000489c:	4292a0ef          	jal	8002f4c4 <printf>
    800048a0:	00057797          	auipc	a5,0x57
    800048a4:	7717c783          	lbu	a5,1905(a5) # 8005c011 <excpt+0x1>
    800048a8:	0002e597          	auipc	a1,0x2e
    800048ac:	e1058593          	addi	a1,a1,-496 # 800326b8 <__func__.0+0x2d0>
    800048b0:	e789                	bnez	a5,800048ba <m_and_hs_using_vs_access_8+0x136>
    800048b2:	0002e597          	auipc	a1,0x2e
    800048b6:	df658593          	addi	a1,a1,-522 # 800326a8 <__func__.0+0x2c0>
    800048ba:	0002e517          	auipc	a0,0x2e
    800048be:	e3e50513          	addi	a0,a0,-450 # 800326f8 <__func__.0+0x310>
    800048c2:	4032a0ef          	jal	8002f4c4 <printf>
    800048c6:	00057797          	auipc	a5,0x57
    800048ca:	74b7c783          	lbu	a5,1867(a5) # 8005c011 <excpt+0x1>
    800048ce:	e7b1                	bnez	a5,8000491a <m_and_hs_using_vs_access_8+0x196>
    800048d0:	4529                	li	a0,10
    800048d2:	0e1290ef          	jal	8002e1b2 <putchar>
    800048d6:	c411                	beqz	s0,800048e2 <m_and_hs_using_vs_access_8+0x15e>
    800048d8:	00057797          	auipc	a5,0x57
    800048dc:	7397c783          	lbu	a5,1849(a5) # 8005c011 <excpt+0x1>
    800048e0:	c79d                	beqz	a5,8000490e <m_and_hs_using_vs_access_8+0x18a>
    800048e2:	4401                	li	s0,0
        excpt.triggered == false
    );


    TEST_END();
    800048e4:	0002e597          	auipc	a1,0x2e
    800048e8:	dd458593          	addi	a1,a1,-556 # 800326b8 <__func__.0+0x2d0>
    800048ec:	0002e517          	auipc	a0,0x2e
    800048f0:	e7450513          	addi	a0,a0,-396 # 80032760 <__func__.0+0x378>
    800048f4:	3d12a0ef          	jal	8002f4c4 <printf>
    800048f8:	4511                	li	a0,4
    800048fa:	e1afc0ef          	jal	80000f14 <goto_priv>
    800048fe:	e79fc0ef          	jal	80001776 <reset_state>
}
    80004902:	60e2                	ld	ra,24(sp)
    80004904:	8522                	mv	a0,s0
    80004906:	6442                	ld	s0,16(sp)
    80004908:	64a2                	ld	s1,8(sp)
    8000490a:	6105                	addi	sp,sp,32
    8000490c:	8082                	ret
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    8000490e:	4405                	li	s0,1
    TEST_END();
    80004910:	0002e597          	auipc	a1,0x2e
    80004914:	d9858593          	addi	a1,a1,-616 # 800326a8 <__func__.0+0x2c0>
    80004918:	bfd1                	j	800048ec <m_and_hs_using_vs_access_8+0x168>
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    8000491a:	0002e517          	auipc	a0,0x2e
    8000491e:	de650513          	addi	a0,a0,-538 # 80032700 <__func__.0+0x318>
    80004922:	3a32a0ef          	jal	8002f4c4 <printf>
    80004926:	02900513          	li	a0,41
    8000492a:	089290ef          	jal	8002e1b2 <putchar>
    8000492e:	b74d                	j	800048d0 <m_and_hs_using_vs_access_8+0x14c>

0000000080004930 <m_and_hs_using_vs_access_9>:

bool m_and_hs_using_vs_access_9(){
    80004930:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004932:	0002c597          	auipc	a1,0x2c
    80004936:	b1658593          	addi	a1,a1,-1258 # 80030448 <__func__.3>
    8000493a:	0002e517          	auipc	a0,0x2e
    8000493e:	d8e50513          	addi	a0,a0,-626 # 800326c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_9(){
    80004942:	ec06                	sd	ra,24(sp)
    80004944:	e822                	sd	s0,16(sp)
    80004946:	e426                	sd	s1,8(sp)
    TEST_START();
    80004948:	37d2a0ef          	jal	8002f4c4 <printf>
    8000494c:	4529                	li	a0,10
    8000494e:	065290ef          	jal	8002e1b2 <putchar>
    
    hspt_init();
    80004952:	c9bfb0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    80004956:	87afc0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8000495a:	e2ffb0ef          	jal	80000788 <vspt_init>
    
    reset_state();
    8000495e:	e19fc0ef          	jal	80001776 <reset_state>
    goto_priv(PRIV_HS);
    80004962:	450d                	li	a0,3
    80004964:	db0fc0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004968:	4509                	li	a0,2
    8000496a:	ccafc0ef          	jal	80000e34 <set_prev_priv>
    hpt_init();
    8000496e:	862fc0ef          	jal	800009d0 <hpt_init>
    
    vaddr = vs_page_base(VSI_GUR) ;
    TEST_SETUP_EXCEPT();
    80004972:	ca6fc0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80004976:	37ab77b7          	lui	a5,0x37ab7
    8000497a:	00100737          	lui	a4,0x100
    8000497e:	078a                	slli	a5,a5,0x2
    80004980:	06970713          	addi	a4,a4,105 # 100069 <STACK_SIZE+0x69>
    80004984:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004988:	0732                	slli	a4,a4,0xc
    8000498a:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    8000498e:	00057417          	auipc	s0,0x57
    80004992:	68240413          	addi	s0,s0,1666 # 8005c010 <excpt>
    80004996:	640c                	ld	a1,8(s0)
    80004998:	0002f517          	auipc	a0,0x2f
    8000499c:	8b050513          	addi	a0,a0,-1872 # 80033248 <__func__.0+0xe60>
    800049a0:	3252a0ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    800049a4:	08c00593          	li	a1,140
    800049a8:	0002f617          	auipc	a2,0x2f
    800049ac:	8a860613          	addi	a2,a2,-1880 # 80033250 <__func__.0+0xe68>
    800049b0:	0002e517          	auipc	a0,0x2e
    800049b4:	d3050513          	addi	a0,a0,-720 # 800326e0 <__func__.0+0x2f8>
    800049b8:	30d2a0ef          	jal	8002f4c4 <printf>
    800049bc:	00057797          	auipc	a5,0x57
    800049c0:	6557c783          	lbu	a5,1621(a5) # 8005c011 <excpt+0x1>
    800049c4:	0002e597          	auipc	a1,0x2e
    800049c8:	cf458593          	addi	a1,a1,-780 # 800326b8 <__func__.0+0x2d0>
    800049cc:	c789                	beqz	a5,800049d6 <m_and_hs_using_vs_access_9+0xa6>
    800049ce:	6418                	ld	a4,8(s0)
    800049d0:	47dd                	li	a5,23
    800049d2:	12f70463          	beq	a4,a5,80004afa <m_and_hs_using_vs_access_9+0x1ca>
    800049d6:	0002e517          	auipc	a0,0x2e
    800049da:	d2250513          	addi	a0,a0,-734 # 800326f8 <__func__.0+0x310>
    800049de:	2e72a0ef          	jal	8002f4c4 <printf>
    800049e2:	00057797          	auipc	a5,0x57
    800049e6:	62f7c783          	lbu	a5,1583(a5) # 8005c011 <excpt+0x1>
    800049ea:	c789                	beqz	a5,800049f4 <m_and_hs_using_vs_access_9+0xc4>
    800049ec:	6418                	ld	a4,8(s0)
    800049ee:	47dd                	li	a5,23
    800049f0:	0ef70263          	beq	a4,a5,80004ad4 <m_and_hs_using_vs_access_9+0x1a4>
    800049f4:	0002e517          	auipc	a0,0x2e
    800049f8:	d0c50513          	addi	a0,a0,-756 # 80032700 <__func__.0+0x318>
    800049fc:	2c92a0ef          	jal	8002f4c4 <printf>
    80004a00:	02900513          	li	a0,41
    80004a04:	7ae290ef          	jal	8002e1b2 <putchar>
    80004a08:	4529                	li	a0,10
    80004a0a:	7a8290ef          	jal	8002e1b2 <putchar>
    80004a0e:	00057797          	auipc	a5,0x57
    80004a12:	6037c783          	lbu	a5,1539(a5) # 8005c011 <excpt+0x1>
    80004a16:	4481                	li	s1,0
    80004a18:	c789                	beqz	a5,80004a22 <m_and_hs_using_vs_access_9+0xf2>
    80004a1a:	6418                	ld	a4,8(s0)
    80004a1c:	47dd                	li	a5,23
    80004a1e:	0ef70e63          	beq	a4,a5,80004b1a <m_and_hs_using_vs_access_9+0x1ea>
        excpt.cause == CAUSE_SGPF &&
        excpt.tval2 == vaddr >> 2
    );

    vaddr = vs_page_base(VSI_GUR);
    TEST_SETUP_EXCEPT();
    80004a22:	bf6fc0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80004a26:	001007b7          	lui	a5,0x100
    80004a2a:	06978793          	addi	a5,a5,105 # 100069 <STACK_SIZE+0x69>
    80004a2e:	07b2                	slli	a5,a5,0xc
    80004a30:	6007c7f3          	.insn	4, 0x6007c7f3
    val = hlvb(vaddr);
    printf("%d\n",excpt.cause);
    80004a34:	640c                	ld	a1,8(s0)
    80004a36:	0002f517          	auipc	a0,0x2f
    80004a3a:	81250513          	addi	a0,a0,-2030 # 80033248 <__func__.0+0xe60>
    80004a3e:	2872a0ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004a42:	08c00593          	li	a1,140
    80004a46:	0002f617          	auipc	a2,0x2f
    80004a4a:	84a60613          	addi	a2,a2,-1974 # 80033290 <__func__.0+0xea8>
    80004a4e:	0002e517          	auipc	a0,0x2e
    80004a52:	c9250513          	addi	a0,a0,-878 # 800326e0 <__func__.0+0x2f8>
    80004a56:	26f2a0ef          	jal	8002f4c4 <printf>
    80004a5a:	00057797          	auipc	a5,0x57
    80004a5e:	5b77c783          	lbu	a5,1463(a5) # 8005c011 <excpt+0x1>
    80004a62:	0002e597          	auipc	a1,0x2e
    80004a66:	c5658593          	addi	a1,a1,-938 # 800326b8 <__func__.0+0x2d0>
    80004a6a:	e789                	bnez	a5,80004a74 <m_and_hs_using_vs_access_9+0x144>
    80004a6c:	0002e597          	auipc	a1,0x2e
    80004a70:	c3c58593          	addi	a1,a1,-964 # 800326a8 <__func__.0+0x2c0>
    80004a74:	0002e517          	auipc	a0,0x2e
    80004a78:	c8450513          	addi	a0,a0,-892 # 800326f8 <__func__.0+0x310>
    80004a7c:	2492a0ef          	jal	8002f4c4 <printf>
    80004a80:	00057797          	auipc	a5,0x57
    80004a84:	5917c783          	lbu	a5,1425(a5) # 8005c011 <excpt+0x1>
    80004a88:	efb1                	bnez	a5,80004ae4 <m_and_hs_using_vs_access_9+0x1b4>
    80004a8a:	4529                	li	a0,10
    80004a8c:	726290ef          	jal	8002e1b2 <putchar>
    80004a90:	c491                	beqz	s1,80004a9c <m_and_hs_using_vs_access_9+0x16c>
    80004a92:	00057797          	auipc	a5,0x57
    80004a96:	57f7c783          	lbu	a5,1407(a5) # 8005c011 <excpt+0x1>
    80004a9a:	c79d                	beqz	a5,80004ac8 <m_and_hs_using_vs_access_9+0x198>
    80004a9c:	4401                	li	s0,0
        excpt.triggered == false
    );
    
    TEST_END();
    80004a9e:	0002e597          	auipc	a1,0x2e
    80004aa2:	c1a58593          	addi	a1,a1,-998 # 800326b8 <__func__.0+0x2d0>
    80004aa6:	0002e517          	auipc	a0,0x2e
    80004aaa:	cba50513          	addi	a0,a0,-838 # 80032760 <__func__.0+0x378>
    80004aae:	2172a0ef          	jal	8002f4c4 <printf>
    80004ab2:	4511                	li	a0,4
    80004ab4:	c60fc0ef          	jal	80000f14 <goto_priv>
    80004ab8:	cbffc0ef          	jal	80001776 <reset_state>
}
    80004abc:	60e2                	ld	ra,24(sp)
    80004abe:	8522                	mv	a0,s0
    80004ac0:	6442                	ld	s0,16(sp)
    80004ac2:	64a2                	ld	s1,8(sp)
    80004ac4:	6105                	addi	sp,sp,32
    80004ac6:	8082                	ret
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004ac8:	4405                	li	s0,1
    TEST_END();
    80004aca:	0002e597          	auipc	a1,0x2e
    80004ace:	bde58593          	addi	a1,a1,-1058 # 800326a8 <__func__.0+0x2c0>
    80004ad2:	bfd1                	j	80004aa6 <m_and_hs_using_vs_access_9+0x176>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004ad4:	7418                	ld	a4,40(s0)
    80004ad6:	4001a7b7          	lui	a5,0x4001a
    80004ada:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004ade:	f0f71be3          	bne	a4,a5,800049f4 <m_and_hs_using_vs_access_9+0xc4>
    80004ae2:	b71d                	j	80004a08 <m_and_hs_using_vs_access_9+0xd8>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004ae4:	0002e517          	auipc	a0,0x2e
    80004ae8:	c1c50513          	addi	a0,a0,-996 # 80032700 <__func__.0+0x318>
    80004aec:	1d92a0ef          	jal	8002f4c4 <printf>
    80004af0:	02900513          	li	a0,41
    80004af4:	6be290ef          	jal	8002e1b2 <putchar>
    80004af8:	bf49                	j	80004a8a <m_and_hs_using_vs_access_9+0x15a>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004afa:	7418                	ld	a4,40(s0)
    80004afc:	4001a7b7          	lui	a5,0x4001a
    80004b00:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004b04:	0002e597          	auipc	a1,0x2e
    80004b08:	ba458593          	addi	a1,a1,-1116 # 800326a8 <__func__.0+0x2c0>
    80004b0c:	ecf705e3          	beq	a4,a5,800049d6 <m_and_hs_using_vs_access_9+0xa6>
    80004b10:	0002e597          	auipc	a1,0x2e
    80004b14:	ba858593          	addi	a1,a1,-1112 # 800326b8 <__func__.0+0x2d0>
    80004b18:	bd7d                	j	800049d6 <m_and_hs_using_vs_access_9+0xa6>
    80004b1a:	7404                	ld	s1,40(s0)
    80004b1c:	bffe67b7          	lui	a5,0xbffe6
    80004b20:	c0078793          	addi	a5,a5,-1024 # ffffffffbffe5c00 <__stack_top+0xffffffff3fce6c00>
    80004b24:	94be                	add	s1,s1,a5
    80004b26:	0014b493          	seqz	s1,s1
    80004b2a:	bde5                	j	80004a22 <m_and_hs_using_vs_access_9+0xf2>

0000000080004b2c <m_and_hs_using_vs_access_10>:

bool m_and_hs_using_vs_access_10(){
    80004b2c:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004b2e:	0002c597          	auipc	a1,0x2c
    80004b32:	93a58593          	addi	a1,a1,-1734 # 80030468 <__func__.2>
    80004b36:	0002e517          	auipc	a0,0x2e
    80004b3a:	b9250513          	addi	a0,a0,-1134 # 800326c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_10(){
    80004b3e:	ec06                	sd	ra,24(sp)
    80004b40:	e822                	sd	s0,16(sp)
    80004b42:	e426                	sd	s1,8(sp)
    TEST_START();
    80004b44:	1812a0ef          	jal	8002f4c4 <printf>
    80004b48:	4529                	li	a0,10
    80004b4a:	668290ef          	jal	8002e1b2 <putchar>
    
    hspt_init();
    80004b4e:	a9ffb0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    80004b52:	e7ffb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80004b56:	c33fb0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_HS);
    80004b5a:	450d                	li	a0,3
    80004b5c:	bb8fc0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004b60:	4509                	li	a0,2
    80004b62:	ad2fc0ef          	jal	80000e34 <set_prev_priv>

    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004b66:	ab2fc0ef          	jal	80000e18 <test_setup_except_function>
    CSRW(sscratch, 0x911);
    80004b6a:	6785                	lui	a5,0x1
    80004b6c:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004b70:	14079073          	csrw	sscratch,a5
    80004b74:	000807b7          	lui	a5,0x80
    80004b78:	07a5                	addi	a5,a5,9 # 80009 <_test_table_size+0x80008>
    80004b7a:	07b6                	slli	a5,a5,0xd
    80004b7c:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004b80:	08c00593          	li	a1,140
    80004b84:	0002e617          	auipc	a2,0x2e
    80004b88:	73460613          	addi	a2,a2,1844 # 800332b8 <__func__.0+0xed0>
    80004b8c:	0002e517          	auipc	a0,0x2e
    80004b90:	b5450513          	addi	a0,a0,-1196 # 800326e0 <__func__.0+0x2f8>
    80004b94:	1312a0ef          	jal	8002f4c4 <printf>
    80004b98:	00057797          	auipc	a5,0x57
    80004b9c:	4797c783          	lbu	a5,1145(a5) # 8005c011 <excpt+0x1>
    80004ba0:	0002e597          	auipc	a1,0x2e
    80004ba4:	b0858593          	addi	a1,a1,-1272 # 800326a8 <__func__.0+0x2c0>
    80004ba8:	c789                	beqz	a5,80004bb2 <m_and_hs_using_vs_access_10+0x86>
    80004baa:	0002e597          	auipc	a1,0x2e
    80004bae:	b0e58593          	addi	a1,a1,-1266 # 800326b8 <__func__.0+0x2d0>
    80004bb2:	0002e517          	auipc	a0,0x2e
    80004bb6:	b4650513          	addi	a0,a0,-1210 # 800326f8 <__func__.0+0x310>
    80004bba:	10b2a0ef          	jal	8002f4c4 <printf>
    80004bbe:	00057797          	auipc	a5,0x57
    80004bc2:	4537c783          	lbu	a5,1107(a5) # 8005c011 <excpt+0x1>
    80004bc6:	10079663          	bnez	a5,80004cd2 <m_and_hs_using_vs_access_10+0x1a6>
    80004bca:	4529                	li	a0,10
    80004bcc:	5e6290ef          	jal	8002e1b2 <putchar>
    80004bd0:	00057417          	auipc	s0,0x57
    80004bd4:	44144403          	lbu	s0,1089(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == false
    );
    
    vspt_init();
    80004bd8:	bb1fb0ef          	jal	80000788 <vspt_init>
    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004bdc:	a3cfc0ef          	jal	80000e18 <test_setup_except_function>
    CSRW(sscratch, 0x911);      
    80004be0:	6785                	lui	a5,0x1
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004be2:	00057497          	auipc	s1,0x57
    80004be6:	42e48493          	addi	s1,s1,1070 # 8005c010 <excpt>
    CSRW(sscratch, 0x911);      
    80004bea:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004bee:	14079073          	csrw	sscratch,a5
    asm volatile(
    80004bf2:	37ab77b7          	lui	a5,0x37ab7
    80004bf6:	00080737          	lui	a4,0x80
    80004bfa:	078a                	slli	a5,a5,0x2
    80004bfc:	0725                	addi	a4,a4,9 # 80009 <_test_table_size+0x80008>
    80004bfe:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004c02:	0736                	slli	a4,a4,0xd
    80004c04:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004c08:	08c00593          	li	a1,140
    80004c0c:	0002e617          	auipc	a2,0x2e
    80004c10:	6dc60613          	addi	a2,a2,1756 # 800332e8 <__func__.0+0xf00>
    80004c14:	0002e517          	auipc	a0,0x2e
    80004c18:	acc50513          	addi	a0,a0,-1332 # 800326e0 <__func__.0+0x2f8>
    80004c1c:	0a92a0ef          	jal	8002f4c4 <printf>
    80004c20:	00057797          	auipc	a5,0x57
    80004c24:	3f17c783          	lbu	a5,1009(a5) # 8005c011 <excpt+0x1>
    80004c28:	0002e597          	auipc	a1,0x2e
    80004c2c:	a9058593          	addi	a1,a1,-1392 # 800326b8 <__func__.0+0x2d0>
    80004c30:	cf89                	beqz	a5,80004c4a <m_and_hs_using_vs_access_10+0x11e>
    80004c32:	6498                	ld	a4,8(s1)
    80004c34:	47bd                	li	a5,15
    80004c36:	0002e597          	auipc	a1,0x2e
    80004c3a:	a7258593          	addi	a1,a1,-1422 # 800326a8 <__func__.0+0x2c0>
    80004c3e:	00f70663          	beq	a4,a5,80004c4a <m_and_hs_using_vs_access_10+0x11e>
    80004c42:	0002e597          	auipc	a1,0x2e
    80004c46:	a7658593          	addi	a1,a1,-1418 # 800326b8 <__func__.0+0x2d0>
    80004c4a:	0002e517          	auipc	a0,0x2e
    80004c4e:	aae50513          	addi	a0,a0,-1362 # 800326f8 <__func__.0+0x310>
    80004c52:	0732a0ef          	jal	8002f4c4 <printf>
    80004c56:	00057797          	auipc	a5,0x57
    80004c5a:	3bb7c783          	lbu	a5,955(a5) # 8005c011 <excpt+0x1>
    80004c5e:	c789                	beqz	a5,80004c68 <m_and_hs_using_vs_access_10+0x13c>
    80004c60:	6498                	ld	a4,8(s1)
    80004c62:	47bd                	li	a5,15
    80004c64:	00f70c63          	beq	a4,a5,80004c7c <m_and_hs_using_vs_access_10+0x150>
    80004c68:	0002e517          	auipc	a0,0x2e
    80004c6c:	a9850513          	addi	a0,a0,-1384 # 80032700 <__func__.0+0x318>
    80004c70:	0552a0ef          	jal	8002f4c4 <printf>
    80004c74:	02900513          	li	a0,41
    80004c78:	53a290ef          	jal	8002e1b2 <putchar>
    80004c7c:	4529                	li	a0,10
    80004c7e:	534290ef          	jal	8002e1b2 <putchar>
    80004c82:	e015                	bnez	s0,80004ca6 <m_and_hs_using_vs_access_10+0x17a>
    80004c84:	00057417          	auipc	s0,0x57
    80004c88:	38d44403          	lbu	s0,909(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80004c8c:	0002e597          	auipc	a1,0x2e
    80004c90:	a2c58593          	addi	a1,a1,-1492 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004c94:	cc11                	beqz	s0,80004cb0 <m_and_hs_using_vs_access_10+0x184>
    80004c96:	6498                	ld	a4,8(s1)
    80004c98:	47bd                	li	a5,15
    TEST_END();
    80004c9a:	0002e597          	auipc	a1,0x2e
    80004c9e:	a0e58593          	addi	a1,a1,-1522 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004ca2:	00f70763          	beq	a4,a5,80004cb0 <m_and_hs_using_vs_access_10+0x184>
    80004ca6:	4401                	li	s0,0
    TEST_END();
    80004ca8:	0002e597          	auipc	a1,0x2e
    80004cac:	a1058593          	addi	a1,a1,-1520 # 800326b8 <__func__.0+0x2d0>
    80004cb0:	0002e517          	auipc	a0,0x2e
    80004cb4:	ab050513          	addi	a0,a0,-1360 # 80032760 <__func__.0+0x378>
    80004cb8:	00d2a0ef          	jal	8002f4c4 <printf>
    80004cbc:	4511                	li	a0,4
    80004cbe:	a56fc0ef          	jal	80000f14 <goto_priv>
    80004cc2:	ab5fc0ef          	jal	80001776 <reset_state>
}
    80004cc6:	60e2                	ld	ra,24(sp)
    80004cc8:	8522                	mv	a0,s0
    80004cca:	6442                	ld	s0,16(sp)
    80004ccc:	64a2                	ld	s1,8(sp)
    80004cce:	6105                	addi	sp,sp,32
    80004cd0:	8082                	ret
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004cd2:	0002e517          	auipc	a0,0x2e
    80004cd6:	a2e50513          	addi	a0,a0,-1490 # 80032700 <__func__.0+0x318>
    80004cda:	7ea2a0ef          	jal	8002f4c4 <printf>
    80004cde:	02900513          	li	a0,41
    80004ce2:	4d0290ef          	jal	8002e1b2 <putchar>
    80004ce6:	b5d5                	j	80004bca <m_and_hs_using_vs_access_10+0x9e>

0000000080004ce8 <m_and_hs_using_vs_access_11>:

bool m_and_hs_using_vs_access_11(){
    80004ce8:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004cea:	0002b597          	auipc	a1,0x2b
    80004cee:	79e58593          	addi	a1,a1,1950 # 80030488 <__func__.1>
    80004cf2:	0002e517          	auipc	a0,0x2e
    80004cf6:	9d650513          	addi	a0,a0,-1578 # 800326c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_11(){
    80004cfa:	ec06                	sd	ra,24(sp)
    80004cfc:	e822                	sd	s0,16(sp)
    80004cfe:	e426                	sd	s1,8(sp)
    TEST_START();
    80004d00:	7c42a0ef          	jal	8002f4c4 <printf>
    80004d04:	4529                	li	a0,10
    80004d06:	4ac290ef          	jal	8002e1b2 <putchar>
    
    hspt_init();
    80004d0a:	8e3fb0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    80004d0e:	cc3fb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80004d12:	a77fb0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_HS);
    80004d16:	450d                	li	a0,3
    80004d18:	9fcfc0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004d1c:	4509                	li	a0,2
    80004d1e:	916fc0ef          	jal	80000e34 <set_prev_priv>


    vaddr = vs_page_base(VSRW_GI);
    TEST_SETUP_EXCEPT();
    80004d22:	8f6fc0ef          	jal	80000e18 <test_setup_except_function>
    CSRW(sscratch, 0x112);
    80004d26:	11200793          	li	a5,274
    80004d2a:	14079073          	csrw	sscratch,a5
    80004d2e:	37ab77b7          	lui	a5,0x37ab7
    80004d32:	00080737          	lui	a4,0x80
    80004d36:	078a                	slli	a5,a5,0x2
    80004d38:	03370713          	addi	a4,a4,51 # 80033 <_test_table_size+0x80032>
    80004d3c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004d40:	0736                	slli	a4,a4,0xd
    80004d42:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004d46:	08c00593          	li	a1,140
    80004d4a:	0002e617          	auipc	a2,0x2e
    80004d4e:	5d660613          	addi	a2,a2,1494 # 80033320 <__func__.0+0xf38>
    80004d52:	0002e517          	auipc	a0,0x2e
    80004d56:	98e50513          	addi	a0,a0,-1650 # 800326e0 <__func__.0+0x2f8>
    80004d5a:	76a2a0ef          	jal	8002f4c4 <printf>
    80004d5e:	00057797          	auipc	a5,0x57
    80004d62:	2b37c783          	lbu	a5,691(a5) # 8005c011 <excpt+0x1>
    80004d66:	00057497          	auipc	s1,0x57
    80004d6a:	2aa48493          	addi	s1,s1,682 # 8005c010 <excpt>
    80004d6e:	0002e597          	auipc	a1,0x2e
    80004d72:	94a58593          	addi	a1,a1,-1718 # 800326b8 <__func__.0+0x2d0>
    80004d76:	cf89                	beqz	a5,80004d90 <m_and_hs_using_vs_access_11+0xa8>
    80004d78:	6498                	ld	a4,8(s1)
    80004d7a:	47dd                	li	a5,23
    80004d7c:	0002e597          	auipc	a1,0x2e
    80004d80:	92c58593          	addi	a1,a1,-1748 # 800326a8 <__func__.0+0x2c0>
    80004d84:	00f70663          	beq	a4,a5,80004d90 <m_and_hs_using_vs_access_11+0xa8>
    80004d88:	0002e597          	auipc	a1,0x2e
    80004d8c:	93058593          	addi	a1,a1,-1744 # 800326b8 <__func__.0+0x2d0>
    80004d90:	0002e517          	auipc	a0,0x2e
    80004d94:	96850513          	addi	a0,a0,-1688 # 800326f8 <__func__.0+0x310>
    80004d98:	72c2a0ef          	jal	8002f4c4 <printf>
    80004d9c:	00057797          	auipc	a5,0x57
    80004da0:	2757c783          	lbu	a5,629(a5) # 8005c011 <excpt+0x1>
    80004da4:	c789                	beqz	a5,80004dae <m_and_hs_using_vs_access_11+0xc6>
    80004da6:	6498                	ld	a4,8(s1)
    80004da8:	47dd                	li	a5,23
    80004daa:	00f70c63          	beq	a4,a5,80004dc2 <m_and_hs_using_vs_access_11+0xda>
    80004dae:	0002e517          	auipc	a0,0x2e
    80004db2:	95250513          	addi	a0,a0,-1710 # 80032700 <__func__.0+0x318>
    80004db6:	70e2a0ef          	jal	8002f4c4 <printf>
    80004dba:	02900513          	li	a0,41
    80004dbe:	3f4290ef          	jal	8002e1b2 <putchar>
    80004dc2:	4529                	li	a0,10
    80004dc4:	3ee290ef          	jal	8002e1b2 <putchar>
    80004dc8:	00057417          	auipc	s0,0x57
    80004dcc:	24944403          	lbu	s0,585(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80004dd0:	0002e597          	auipc	a1,0x2e
    80004dd4:	8e858593          	addi	a1,a1,-1816 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004dd8:	cc11                	beqz	s0,80004df4 <m_and_hs_using_vs_access_11+0x10c>
    80004dda:	6498                	ld	a4,8(s1)
    80004ddc:	47dd                	li	a5,23
    TEST_END();
    80004dde:	0002e597          	auipc	a1,0x2e
    80004de2:	8ca58593          	addi	a1,a1,-1846 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004de6:	00f70763          	beq	a4,a5,80004df4 <m_and_hs_using_vs_access_11+0x10c>
    80004dea:	4401                	li	s0,0
    TEST_END();
    80004dec:	0002e597          	auipc	a1,0x2e
    80004df0:	8cc58593          	addi	a1,a1,-1844 # 800326b8 <__func__.0+0x2d0>
    80004df4:	0002e517          	auipc	a0,0x2e
    80004df8:	96c50513          	addi	a0,a0,-1684 # 80032760 <__func__.0+0x378>
    80004dfc:	6c82a0ef          	jal	8002f4c4 <printf>
    80004e00:	4511                	li	a0,4
    80004e02:	912fc0ef          	jal	80000f14 <goto_priv>
    80004e06:	971fc0ef          	jal	80001776 <reset_state>
}
    80004e0a:	60e2                	ld	ra,24(sp)
    80004e0c:	8522                	mv	a0,s0
    80004e0e:	6442                	ld	s0,16(sp)
    80004e10:	64a2                	ld	s1,8(sp)
    80004e12:	6105                	addi	sp,sp,32
    80004e14:	8082                	ret

0000000080004e16 <m_and_hs_using_vs_access_12>:

bool m_and_hs_using_vs_access_12(){
    80004e16:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004e18:	0002b597          	auipc	a1,0x2b
    80004e1c:	69058593          	addi	a1,a1,1680 # 800304a8 <__func__.0>
    80004e20:	0002e517          	auipc	a0,0x2e
    80004e24:	8a850513          	addi	a0,a0,-1880 # 800326c8 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_12(){
    80004e28:	e406                	sd	ra,8(sp)
    80004e2a:	e022                	sd	s0,0(sp)
    TEST_START();
    80004e2c:	6982a0ef          	jal	8002f4c4 <printf>
    80004e30:	4529                	li	a0,10
    80004e32:	380290ef          	jal	8002e1b2 <putchar>
    
    hspt_init();
    80004e36:	fb6fb0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    80004e3a:	b97fb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80004e3e:	94bfb0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_HS);
    80004e42:	450d                	li	a0,3
    80004e44:	8d0fc0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004e48:	4509                	li	a0,2
    80004e4a:	febfb0ef          	jal	80000e34 <set_prev_priv>

    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80004e4e:	fcbfb0ef          	jal	80000e18 <test_setup_except_function>
    CSRW(sscratch, 0x112);
    80004e52:	11200793          	li	a5,274
    80004e56:	14079073          	csrw	sscratch,a5
    TEST_ASSERT("CSRW successfull int any condition",
    80004e5a:	08c00593          	li	a1,140
    80004e5e:	0002e617          	auipc	a2,0x2e
    80004e62:	50260613          	addi	a2,a2,1282 # 80033360 <__func__.0+0xf78>
    80004e66:	0002e517          	auipc	a0,0x2e
    80004e6a:	87a50513          	addi	a0,a0,-1926 # 800326e0 <__func__.0+0x2f8>
    80004e6e:	6562a0ef          	jal	8002f4c4 <printf>
    80004e72:	00057797          	auipc	a5,0x57
    80004e76:	19f7c783          	lbu	a5,415(a5) # 8005c011 <excpt+0x1>
    80004e7a:	0002e597          	auipc	a1,0x2e
    80004e7e:	82e58593          	addi	a1,a1,-2002 # 800326a8 <__func__.0+0x2c0>
    80004e82:	c789                	beqz	a5,80004e8c <m_and_hs_using_vs_access_12+0x76>
    80004e84:	0002e597          	auipc	a1,0x2e
    80004e88:	83458593          	addi	a1,a1,-1996 # 800326b8 <__func__.0+0x2d0>
    80004e8c:	0002e517          	auipc	a0,0x2e
    80004e90:	86c50513          	addi	a0,a0,-1940 # 800326f8 <__func__.0+0x310>
    80004e94:	6302a0ef          	jal	8002f4c4 <printf>
    80004e98:	00057797          	auipc	a5,0x57
    80004e9c:	1797c783          	lbu	a5,377(a5) # 8005c011 <excpt+0x1>
    80004ea0:	e7a1                	bnez	a5,80004ee8 <m_and_hs_using_vs_access_12+0xd2>
    80004ea2:	4529                	li	a0,10
    80004ea4:	30e290ef          	jal	8002e1b2 <putchar>
    80004ea8:	00057797          	auipc	a5,0x57
    80004eac:	1697c783          	lbu	a5,361(a5) # 8005c011 <excpt+0x1>
    80004eb0:	e795                	bnez	a5,80004edc <m_and_hs_using_vs_access_12+0xc6>
    80004eb2:	4405                	li	s0,1
        excpt.triggered == false
    );
    


    TEST_END();
    80004eb4:	0002d597          	auipc	a1,0x2d
    80004eb8:	7f458593          	addi	a1,a1,2036 # 800326a8 <__func__.0+0x2c0>
    80004ebc:	0002e517          	auipc	a0,0x2e
    80004ec0:	8a450513          	addi	a0,a0,-1884 # 80032760 <__func__.0+0x378>
    80004ec4:	6002a0ef          	jal	8002f4c4 <printf>
    80004ec8:	4511                	li	a0,4
    80004eca:	84afc0ef          	jal	80000f14 <goto_priv>
    80004ece:	8a9fc0ef          	jal	80001776 <reset_state>

}
    80004ed2:	60a2                	ld	ra,8(sp)
    80004ed4:	8522                	mv	a0,s0
    80004ed6:	6402                	ld	s0,0(sp)
    80004ed8:	0141                	addi	sp,sp,16
    80004eda:	8082                	ret
    TEST_ASSERT("CSRW successfull int any condition",
    80004edc:	4401                	li	s0,0
    TEST_END();
    80004ede:	0002d597          	auipc	a1,0x2d
    80004ee2:	7da58593          	addi	a1,a1,2010 # 800326b8 <__func__.0+0x2d0>
    80004ee6:	bfd9                	j	80004ebc <m_and_hs_using_vs_access_12+0xa6>
    TEST_ASSERT("CSRW successfull int any condition",
    80004ee8:	0002e517          	auipc	a0,0x2e
    80004eec:	81850513          	addi	a0,a0,-2024 # 80032700 <__func__.0+0x318>
    80004ef0:	5d42a0ef          	jal	8002f4c4 <printf>
    80004ef4:	02900513          	li	a0,41
    80004ef8:	2ba290ef          	jal	8002e1b2 <putchar>
    80004efc:	b75d                	j	80004ea2 <m_and_hs_using_vs_access_12+0x8c>

0000000080004efe <virtual_instruction_1>:
#include <rvh_test.h>
#include <page_tables.h> 


bool virtual_instruction_1() {
    80004efe:	1101                	addi	sp,sp,-32

    TEST_START();
    80004f00:	0002b597          	auipc	a1,0x2b
    80004f04:	5c858593          	addi	a1,a1,1480 # 800304c8 <__func__.11>
    80004f08:	0002d517          	auipc	a0,0x2d
    80004f0c:	7c050513          	addi	a0,a0,1984 # 800326c8 <__func__.0+0x2e0>
bool virtual_instruction_1() {
    80004f10:	ec06                	sd	ra,24(sp)
    80004f12:	e822                	sd	s0,16(sp)
    80004f14:	e426                	sd	s1,8(sp)
    TEST_START();
    80004f16:	5ae2a0ef          	jal	8002f4c4 <printf>
    80004f1a:	4529                	li	a0,10
    80004f1c:	296290ef          	jal	8002e1b2 <putchar>


    goto_priv(PRIV_VS);
    80004f20:	4509                	li	a0,2
    80004f22:	ff3fb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80004f26:	ef3fb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80004f2a:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vs executing hfence.vvma leads to virtual instruction exception",
    80004f2e:	08c00593          	li	a1,140
    80004f32:	0002e617          	auipc	a2,0x2e
    80004f36:	45660613          	addi	a2,a2,1110 # 80033388 <__func__.0+0xfa0>
    80004f3a:	0002d517          	auipc	a0,0x2d
    80004f3e:	7a650513          	addi	a0,a0,1958 # 800326e0 <__func__.0+0x2f8>
    80004f42:	5822a0ef          	jal	8002f4c4 <printf>
    80004f46:	00057797          	auipc	a5,0x57
    80004f4a:	0cb7c783          	lbu	a5,203(a5) # 8005c011 <excpt+0x1>
    80004f4e:	00057497          	auipc	s1,0x57
    80004f52:	0c248493          	addi	s1,s1,194 # 8005c010 <excpt>
    80004f56:	0002d597          	auipc	a1,0x2d
    80004f5a:	76258593          	addi	a1,a1,1890 # 800326b8 <__func__.0+0x2d0>
    80004f5e:	cf89                	beqz	a5,80004f78 <virtual_instruction_1+0x7a>
    80004f60:	6498                	ld	a4,8(s1)
    80004f62:	47d9                	li	a5,22
    80004f64:	0002d597          	auipc	a1,0x2d
    80004f68:	74458593          	addi	a1,a1,1860 # 800326a8 <__func__.0+0x2c0>
    80004f6c:	00f70663          	beq	a4,a5,80004f78 <virtual_instruction_1+0x7a>
    80004f70:	0002d597          	auipc	a1,0x2d
    80004f74:	74858593          	addi	a1,a1,1864 # 800326b8 <__func__.0+0x2d0>
    80004f78:	0002d517          	auipc	a0,0x2d
    80004f7c:	78050513          	addi	a0,a0,1920 # 800326f8 <__func__.0+0x310>
    80004f80:	5442a0ef          	jal	8002f4c4 <printf>
    80004f84:	00057797          	auipc	a5,0x57
    80004f88:	08d7c783          	lbu	a5,141(a5) # 8005c011 <excpt+0x1>
    80004f8c:	c789                	beqz	a5,80004f96 <virtual_instruction_1+0x98>
    80004f8e:	6498                	ld	a4,8(s1)
    80004f90:	47d9                	li	a5,22
    80004f92:	00f70c63          	beq	a4,a5,80004faa <virtual_instruction_1+0xac>
    80004f96:	0002d517          	auipc	a0,0x2d
    80004f9a:	76a50513          	addi	a0,a0,1898 # 80032700 <__func__.0+0x318>
    80004f9e:	5262a0ef          	jal	8002f4c4 <printf>
    80004fa2:	02900513          	li	a0,41
    80004fa6:	20c290ef          	jal	8002e1b2 <putchar>
    80004faa:	4529                	li	a0,10
    80004fac:	206290ef          	jal	8002e1b2 <putchar>
    80004fb0:	00057797          	auipc	a5,0x57
    80004fb4:	0617c783          	lbu	a5,97(a5) # 8005c011 <excpt+0x1>
    80004fb8:	4401                	li	s0,0
    80004fba:	c789                	beqz	a5,80004fc4 <virtual_instruction_1+0xc6>
    80004fbc:	6480                	ld	s0,8(s1)
    80004fbe:	1429                	addi	s0,s0,-22
    80004fc0:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VS);
    80004fc4:	4509                	li	a0,2
    80004fc6:	f4ffb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80004fca:	e4ffb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80004fce:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80004fd2:	08c00593          	li	a1,140
    80004fd6:	0002e617          	auipc	a2,0x2e
    80004fda:	3f260613          	addi	a2,a2,1010 # 800333c8 <__func__.0+0xfe0>
    80004fde:	0002d517          	auipc	a0,0x2d
    80004fe2:	70250513          	addi	a0,a0,1794 # 800326e0 <__func__.0+0x2f8>
    80004fe6:	4de2a0ef          	jal	8002f4c4 <printf>
    80004fea:	00057797          	auipc	a5,0x57
    80004fee:	0277c783          	lbu	a5,39(a5) # 8005c011 <excpt+0x1>
    80004ff2:	0002d597          	auipc	a1,0x2d
    80004ff6:	6c658593          	addi	a1,a1,1734 # 800326b8 <__func__.0+0x2d0>
    80004ffa:	cf89                	beqz	a5,80005014 <virtual_instruction_1+0x116>
    80004ffc:	6498                	ld	a4,8(s1)
    80004ffe:	47d9                	li	a5,22
    80005000:	0002d597          	auipc	a1,0x2d
    80005004:	6a858593          	addi	a1,a1,1704 # 800326a8 <__func__.0+0x2c0>
    80005008:	00f70663          	beq	a4,a5,80005014 <virtual_instruction_1+0x116>
    8000500c:	0002d597          	auipc	a1,0x2d
    80005010:	6ac58593          	addi	a1,a1,1708 # 800326b8 <__func__.0+0x2d0>
    80005014:	0002d517          	auipc	a0,0x2d
    80005018:	6e450513          	addi	a0,a0,1764 # 800326f8 <__func__.0+0x310>
    8000501c:	4a82a0ef          	jal	8002f4c4 <printf>
    80005020:	00057797          	auipc	a5,0x57
    80005024:	ff17c783          	lbu	a5,-15(a5) # 8005c011 <excpt+0x1>
    80005028:	c789                	beqz	a5,80005032 <virtual_instruction_1+0x134>
    8000502a:	6498                	ld	a4,8(s1)
    8000502c:	47d9                	li	a5,22
    8000502e:	00f70c63          	beq	a4,a5,80005046 <virtual_instruction_1+0x148>
    80005032:	0002d517          	auipc	a0,0x2d
    80005036:	6ce50513          	addi	a0,a0,1742 # 80032700 <__func__.0+0x318>
    8000503a:	48a2a0ef          	jal	8002f4c4 <printf>
    8000503e:	02900513          	li	a0,41
    80005042:	170290ef          	jal	8002e1b2 <putchar>
    80005046:	4529                	li	a0,10
    80005048:	16a290ef          	jal	8002e1b2 <putchar>
    8000504c:	c801                	beqz	s0,8000505c <virtual_instruction_1+0x15e>
    8000504e:	00057797          	auipc	a5,0x57
    80005052:	fc37c783          	lbu	a5,-61(a5) # 8005c011 <excpt+0x1>
    80005056:	4401                	li	s0,0
    80005058:	18079663          	bnez	a5,800051e4 <virtual_instruction_1+0x2e6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_M);  
    8000505c:	4511                	li	a0,4
    8000505e:	eb7fb0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    80005062:	001007b7          	lui	a5,0x100
    80005066:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    8000506a:	4509                	li	a0,2
    8000506c:	ea9fb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005070:	da9fb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80005074:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    80005078:	08c00593          	li	a1,140
    8000507c:	0002e617          	auipc	a2,0x2e
    80005080:	38c60613          	addi	a2,a2,908 # 80033408 <__func__.0+0x1020>
    80005084:	0002d517          	auipc	a0,0x2d
    80005088:	65c50513          	addi	a0,a0,1628 # 800326e0 <__func__.0+0x2f8>
    8000508c:	4382a0ef          	jal	8002f4c4 <printf>
    80005090:	00057797          	auipc	a5,0x57
    80005094:	f817c783          	lbu	a5,-127(a5) # 8005c011 <excpt+0x1>
    80005098:	0002d597          	auipc	a1,0x2d
    8000509c:	62058593          	addi	a1,a1,1568 # 800326b8 <__func__.0+0x2d0>
    800050a0:	cf89                	beqz	a5,800050ba <virtual_instruction_1+0x1bc>
    800050a2:	6498                	ld	a4,8(s1)
    800050a4:	47d9                	li	a5,22
    800050a6:	0002d597          	auipc	a1,0x2d
    800050aa:	60258593          	addi	a1,a1,1538 # 800326a8 <__func__.0+0x2c0>
    800050ae:	00f70663          	beq	a4,a5,800050ba <virtual_instruction_1+0x1bc>
    800050b2:	0002d597          	auipc	a1,0x2d
    800050b6:	60658593          	addi	a1,a1,1542 # 800326b8 <__func__.0+0x2d0>
    800050ba:	0002d517          	auipc	a0,0x2d
    800050be:	63e50513          	addi	a0,a0,1598 # 800326f8 <__func__.0+0x310>
    800050c2:	4022a0ef          	jal	8002f4c4 <printf>
    800050c6:	00057797          	auipc	a5,0x57
    800050ca:	f4b7c783          	lbu	a5,-181(a5) # 8005c011 <excpt+0x1>
    800050ce:	c789                	beqz	a5,800050d8 <virtual_instruction_1+0x1da>
    800050d0:	6498                	ld	a4,8(s1)
    800050d2:	47d9                	li	a5,22
    800050d4:	00f70c63          	beq	a4,a5,800050ec <virtual_instruction_1+0x1ee>
    800050d8:	0002d517          	auipc	a0,0x2d
    800050dc:	62850513          	addi	a0,a0,1576 # 80032700 <__func__.0+0x318>
    800050e0:	3e42a0ef          	jal	8002f4c4 <printf>
    800050e4:	02900513          	li	a0,41
    800050e8:	0ca290ef          	jal	8002e1b2 <putchar>
    800050ec:	4529                	li	a0,10
    800050ee:	0c4290ef          	jal	8002e1b2 <putchar>
    800050f2:	c801                	beqz	s0,80005102 <virtual_instruction_1+0x204>
    800050f4:	00057797          	auipc	a5,0x57
    800050f8:	f1d7c783          	lbu	a5,-227(a5) # 8005c011 <excpt+0x1>
    800050fc:	4401                	li	s0,0
    800050fe:	0c079e63          	bnez	a5,800051da <virtual_instruction_1+0x2dc>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80005102:	4509                	li	a0,2
    80005104:	e11fb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005108:	d11fb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    8000510c:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005110:	08c00593          	li	a1,140
    80005114:	0002e617          	auipc	a2,0x2e
    80005118:	34460613          	addi	a2,a2,836 # 80033458 <__func__.0+0x1070>
    8000511c:	0002d517          	auipc	a0,0x2d
    80005120:	5c450513          	addi	a0,a0,1476 # 800326e0 <__func__.0+0x2f8>
    80005124:	3a02a0ef          	jal	8002f4c4 <printf>
    80005128:	00057797          	auipc	a5,0x57
    8000512c:	ee97c783          	lbu	a5,-279(a5) # 8005c011 <excpt+0x1>
    80005130:	0002d597          	auipc	a1,0x2d
    80005134:	58858593          	addi	a1,a1,1416 # 800326b8 <__func__.0+0x2d0>
    80005138:	cf89                	beqz	a5,80005152 <virtual_instruction_1+0x254>
    8000513a:	6498                	ld	a4,8(s1)
    8000513c:	47d9                	li	a5,22
    8000513e:	0002d597          	auipc	a1,0x2d
    80005142:	56a58593          	addi	a1,a1,1386 # 800326a8 <__func__.0+0x2c0>
    80005146:	00f70663          	beq	a4,a5,80005152 <virtual_instruction_1+0x254>
    8000514a:	0002d597          	auipc	a1,0x2d
    8000514e:	56e58593          	addi	a1,a1,1390 # 800326b8 <__func__.0+0x2d0>
    80005152:	0002d517          	auipc	a0,0x2d
    80005156:	5a650513          	addi	a0,a0,1446 # 800326f8 <__func__.0+0x310>
    8000515a:	36a2a0ef          	jal	8002f4c4 <printf>
    8000515e:	00057797          	auipc	a5,0x57
    80005162:	eb37c783          	lbu	a5,-333(a5) # 8005c011 <excpt+0x1>
    80005166:	c789                	beqz	a5,80005170 <virtual_instruction_1+0x272>
    80005168:	6498                	ld	a4,8(s1)
    8000516a:	47d9                	li	a5,22
    8000516c:	00f70c63          	beq	a4,a5,80005184 <virtual_instruction_1+0x286>
    80005170:	0002d517          	auipc	a0,0x2d
    80005174:	59050513          	addi	a0,a0,1424 # 80032700 <__func__.0+0x318>
    80005178:	34c2a0ef          	jal	8002f4c4 <printf>
    8000517c:	02900513          	li	a0,41
    80005180:	032290ef          	jal	8002e1b2 <putchar>
    80005184:	4529                	li	a0,10
    80005186:	02c290ef          	jal	8002e1b2 <putchar>
    8000518a:	c015                	beqz	s0,800051ae <virtual_instruction_1+0x2b0>
    8000518c:	00057417          	auipc	s0,0x57
    80005190:	e8544403          	lbu	s0,-379(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005194:	0002d597          	auipc	a1,0x2d
    80005198:	52458593          	addi	a1,a1,1316 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    8000519c:	cc11                	beqz	s0,800051b8 <virtual_instruction_1+0x2ba>
    8000519e:	6498                	ld	a4,8(s1)
    800051a0:	47d9                	li	a5,22
    TEST_END();
    800051a2:	0002d597          	auipc	a1,0x2d
    800051a6:	50658593          	addi	a1,a1,1286 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800051aa:	00f70763          	beq	a4,a5,800051b8 <virtual_instruction_1+0x2ba>
    800051ae:	4401                	li	s0,0
    TEST_END();
    800051b0:	0002d597          	auipc	a1,0x2d
    800051b4:	50858593          	addi	a1,a1,1288 # 800326b8 <__func__.0+0x2d0>
    800051b8:	0002d517          	auipc	a0,0x2d
    800051bc:	5a850513          	addi	a0,a0,1448 # 80032760 <__func__.0+0x378>
    800051c0:	3042a0ef          	jal	8002f4c4 <printf>
    800051c4:	4511                	li	a0,4
    800051c6:	d4ffb0ef          	jal	80000f14 <goto_priv>
    800051ca:	dacfc0ef          	jal	80001776 <reset_state>
}
    800051ce:	60e2                	ld	ra,24(sp)
    800051d0:	8522                	mv	a0,s0
    800051d2:	6442                	ld	s0,16(sp)
    800051d4:	64a2                	ld	s1,8(sp)
    800051d6:	6105                	addi	sp,sp,32
    800051d8:	8082                	ret
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    800051da:	6480                	ld	s0,8(s1)
    800051dc:	1429                	addi	s0,s0,-22
    800051de:	00143413          	seqz	s0,s0
    800051e2:	b705                	j	80005102 <virtual_instruction_1+0x204>
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    800051e4:	6480                	ld	s0,8(s1)
    800051e6:	1429                	addi	s0,s0,-22
    800051e8:	00143413          	seqz	s0,s0
    800051ec:	bd85                	j	8000505c <virtual_instruction_1+0x15e>

00000000800051ee <virtual_instruction_2>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_2() {
    800051ee:	7179                	addi	sp,sp,-48

    TEST_START();
    800051f0:	0002b597          	auipc	a1,0x2b
    800051f4:	2f058593          	addi	a1,a1,752 # 800304e0 <__func__.10>
    800051f8:	0002d517          	auipc	a0,0x2d
    800051fc:	4d050513          	addi	a0,a0,1232 # 800326c8 <__func__.0+0x2e0>
bool virtual_instruction_2() {
    80005200:	f406                	sd	ra,40(sp)
    80005202:	f022                	sd	s0,32(sp)
    80005204:	ec26                	sd	s1,24(sp)
    TEST_START();
    80005206:	2be2a0ef          	jal	8002f4c4 <printf>
    8000520a:	4529                	li	a0,10
    8000520c:	7a7280ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_VS);
    80005210:	4509                	li	a0,2
    80005212:	d03fb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005216:	c03fb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    8000521a:	4781                	li	a5,0
    8000521c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    volatile uint64_t tmp = hlvd(0);
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    80005220:	08c00593          	li	a1,140
    80005224:	0002e617          	auipc	a2,0x2e
    80005228:	28460613          	addi	a2,a2,644 # 800334a8 <__func__.0+0x10c0>
    8000522c:	0002d517          	auipc	a0,0x2d
    80005230:	4b450513          	addi	a0,a0,1204 # 800326e0 <__func__.0+0x2f8>
    volatile uint64_t tmp = hlvd(0);
    80005234:	e43e                	sd	a5,8(sp)
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    80005236:	28e2a0ef          	jal	8002f4c4 <printf>
    8000523a:	00057797          	auipc	a5,0x57
    8000523e:	dd77c783          	lbu	a5,-553(a5) # 8005c011 <excpt+0x1>
    80005242:	00057497          	auipc	s1,0x57
    80005246:	dce48493          	addi	s1,s1,-562 # 8005c010 <excpt>
    8000524a:	0002d597          	auipc	a1,0x2d
    8000524e:	46e58593          	addi	a1,a1,1134 # 800326b8 <__func__.0+0x2d0>
    80005252:	cf89                	beqz	a5,8000526c <virtual_instruction_2+0x7e>
    80005254:	6498                	ld	a4,8(s1)
    80005256:	47d9                	li	a5,22
    80005258:	0002d597          	auipc	a1,0x2d
    8000525c:	45058593          	addi	a1,a1,1104 # 800326a8 <__func__.0+0x2c0>
    80005260:	00f70663          	beq	a4,a5,8000526c <virtual_instruction_2+0x7e>
    80005264:	0002d597          	auipc	a1,0x2d
    80005268:	45458593          	addi	a1,a1,1108 # 800326b8 <__func__.0+0x2d0>
    8000526c:	0002d517          	auipc	a0,0x2d
    80005270:	48c50513          	addi	a0,a0,1164 # 800326f8 <__func__.0+0x310>
    80005274:	2502a0ef          	jal	8002f4c4 <printf>
    80005278:	00057797          	auipc	a5,0x57
    8000527c:	d997c783          	lbu	a5,-615(a5) # 8005c011 <excpt+0x1>
    80005280:	c789                	beqz	a5,8000528a <virtual_instruction_2+0x9c>
    80005282:	6498                	ld	a4,8(s1)
    80005284:	47d9                	li	a5,22
    80005286:	00f70c63          	beq	a4,a5,8000529e <virtual_instruction_2+0xb0>
    8000528a:	0002d517          	auipc	a0,0x2d
    8000528e:	47650513          	addi	a0,a0,1142 # 80032700 <__func__.0+0x318>
    80005292:	2322a0ef          	jal	8002f4c4 <printf>
    80005296:	02900513          	li	a0,41
    8000529a:	719280ef          	jal	8002e1b2 <putchar>
    8000529e:	4529                	li	a0,10
    800052a0:	713280ef          	jal	8002e1b2 <putchar>
    800052a4:	00057797          	auipc	a5,0x57
    800052a8:	d6d7c783          	lbu	a5,-659(a5) # 8005c011 <excpt+0x1>
    800052ac:	4401                	li	s0,0
    800052ae:	c789                	beqz	a5,800052b8 <virtual_instruction_2+0xca>
    800052b0:	6480                	ld	s0,8(s1)
    800052b2:	1429                	addi	s0,s0,-22
    800052b4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800052b8:	4509                	li	a0,2
    800052ba:	c5bfb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800052be:	b5bfb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    800052c2:	37ab77b7          	lui	a5,0x37ab7
    800052c6:	078a                	slli	a5,a5,0x2
    800052c8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800052cc:	4701                	li	a4,0
    800052ce:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    800052d2:	08c00593          	li	a1,140
    800052d6:	0002e617          	auipc	a2,0x2e
    800052da:	20260613          	addi	a2,a2,514 # 800334d8 <__func__.0+0x10f0>
    800052de:	0002d517          	auipc	a0,0x2d
    800052e2:	40250513          	addi	a0,a0,1026 # 800326e0 <__func__.0+0x2f8>
    800052e6:	1de2a0ef          	jal	8002f4c4 <printf>
    800052ea:	00057797          	auipc	a5,0x57
    800052ee:	d277c783          	lbu	a5,-729(a5) # 8005c011 <excpt+0x1>
    800052f2:	0002d597          	auipc	a1,0x2d
    800052f6:	3c658593          	addi	a1,a1,966 # 800326b8 <__func__.0+0x2d0>
    800052fa:	cf89                	beqz	a5,80005314 <virtual_instruction_2+0x126>
    800052fc:	6498                	ld	a4,8(s1)
    800052fe:	47d9                	li	a5,22
    80005300:	0002d597          	auipc	a1,0x2d
    80005304:	3a858593          	addi	a1,a1,936 # 800326a8 <__func__.0+0x2c0>
    80005308:	00f70663          	beq	a4,a5,80005314 <virtual_instruction_2+0x126>
    8000530c:	0002d597          	auipc	a1,0x2d
    80005310:	3ac58593          	addi	a1,a1,940 # 800326b8 <__func__.0+0x2d0>
    80005314:	0002d517          	auipc	a0,0x2d
    80005318:	3e450513          	addi	a0,a0,996 # 800326f8 <__func__.0+0x310>
    8000531c:	1a82a0ef          	jal	8002f4c4 <printf>
    80005320:	00057797          	auipc	a5,0x57
    80005324:	cf17c783          	lbu	a5,-783(a5) # 8005c011 <excpt+0x1>
    80005328:	c789                	beqz	a5,80005332 <virtual_instruction_2+0x144>
    8000532a:	6498                	ld	a4,8(s1)
    8000532c:	47d9                	li	a5,22
    8000532e:	00f70c63          	beq	a4,a5,80005346 <virtual_instruction_2+0x158>
    80005332:	0002d517          	auipc	a0,0x2d
    80005336:	3ce50513          	addi	a0,a0,974 # 80032700 <__func__.0+0x318>
    8000533a:	18a2a0ef          	jal	8002f4c4 <printf>
    8000533e:	02900513          	li	a0,41
    80005342:	671280ef          	jal	8002e1b2 <putchar>
    80005346:	4529                	li	a0,10
    80005348:	66b280ef          	jal	8002e1b2 <putchar>
    8000534c:	c015                	beqz	s0,80005370 <virtual_instruction_2+0x182>
    8000534e:	00057417          	auipc	s0,0x57
    80005352:	cc344403          	lbu	s0,-829(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    80005356:	0002d597          	auipc	a1,0x2d
    8000535a:	36258593          	addi	a1,a1,866 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    8000535e:	cc11                	beqz	s0,8000537a <virtual_instruction_2+0x18c>
    80005360:	6498                	ld	a4,8(s1)
    80005362:	47d9                	li	a5,22
    TEST_END();
    80005364:	0002d597          	auipc	a1,0x2d
    80005368:	34458593          	addi	a1,a1,836 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    8000536c:	00f70763          	beq	a4,a5,8000537a <virtual_instruction_2+0x18c>
    80005370:	4401                	li	s0,0
    TEST_END();
    80005372:	0002d597          	auipc	a1,0x2d
    80005376:	34658593          	addi	a1,a1,838 # 800326b8 <__func__.0+0x2d0>
    8000537a:	0002d517          	auipc	a0,0x2d
    8000537e:	3e650513          	addi	a0,a0,998 # 80032760 <__func__.0+0x378>
    80005382:	1422a0ef          	jal	8002f4c4 <printf>
    80005386:	4511                	li	a0,4
    80005388:	b8dfb0ef          	jal	80000f14 <goto_priv>
    8000538c:	beafc0ef          	jal	80001776 <reset_state>

}
    80005390:	70a2                	ld	ra,40(sp)
    80005392:	8522                	mv	a0,s0
    80005394:	7402                	ld	s0,32(sp)
    80005396:	64e2                	ld	s1,24(sp)
    80005398:	6145                	addi	sp,sp,48
    8000539a:	8082                	ret

000000008000539c <virtual_instruction_3>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_3() {
    8000539c:	1101                	addi	sp,sp,-32

    TEST_START();
    8000539e:	0002b597          	auipc	a1,0x2b
    800053a2:	15a58593          	addi	a1,a1,346 # 800304f8 <__func__.9>
    800053a6:	0002d517          	auipc	a0,0x2d
    800053aa:	32250513          	addi	a0,a0,802 # 800326c8 <__func__.0+0x2e0>
bool virtual_instruction_3() {
    800053ae:	ec06                	sd	ra,24(sp)
    800053b0:	e822                	sd	s0,16(sp)
    800053b2:	e426                	sd	s1,8(sp)
    TEST_START();
    800053b4:	1102a0ef          	jal	8002f4c4 <printf>
    800053b8:	4529                	li	a0,10
    800053ba:	5f9280ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    800053be:	4511                	li	a0,4
    800053c0:	b55fb0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    800053c4:	004007b7          	lui	a5,0x400
    800053c8:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    800053cc:	4509                	li	a0,2
    800053ce:	b47fb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800053d2:	a47fb0ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_SRET();
    800053d6:	00000297          	auipc	t0,0x0
    800053da:	01028293          	addi	t0,t0,16 # 800053e6 <virtual_instruction_3+0x4a>
    800053de:	14129073          	csrw	sepc,t0
    800053e2:	10200073          	sret
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    800053e6:	08c00593          	li	a1,140
    800053ea:	0002e617          	auipc	a2,0x2e
    800053ee:	11e60613          	addi	a2,a2,286 # 80033508 <__func__.0+0x1120>
    800053f2:	0002d517          	auipc	a0,0x2d
    800053f6:	2ee50513          	addi	a0,a0,750 # 800326e0 <__func__.0+0x2f8>
    800053fa:	0ca2a0ef          	jal	8002f4c4 <printf>
    800053fe:	00057797          	auipc	a5,0x57
    80005402:	c137c783          	lbu	a5,-1005(a5) # 8005c011 <excpt+0x1>
    80005406:	00057497          	auipc	s1,0x57
    8000540a:	c0a48493          	addi	s1,s1,-1014 # 8005c010 <excpt>
    8000540e:	0002d597          	auipc	a1,0x2d
    80005412:	2aa58593          	addi	a1,a1,682 # 800326b8 <__func__.0+0x2d0>
    80005416:	cf89                	beqz	a5,80005430 <virtual_instruction_3+0x94>
    80005418:	6498                	ld	a4,8(s1)
    8000541a:	47d9                	li	a5,22
    8000541c:	0002d597          	auipc	a1,0x2d
    80005420:	28c58593          	addi	a1,a1,652 # 800326a8 <__func__.0+0x2c0>
    80005424:	00f70663          	beq	a4,a5,80005430 <virtual_instruction_3+0x94>
    80005428:	0002d597          	auipc	a1,0x2d
    8000542c:	29058593          	addi	a1,a1,656 # 800326b8 <__func__.0+0x2d0>
    80005430:	0002d517          	auipc	a0,0x2d
    80005434:	2c850513          	addi	a0,a0,712 # 800326f8 <__func__.0+0x310>
    80005438:	08c2a0ef          	jal	8002f4c4 <printf>
    8000543c:	00057797          	auipc	a5,0x57
    80005440:	bd57c783          	lbu	a5,-1067(a5) # 8005c011 <excpt+0x1>
    80005444:	c789                	beqz	a5,8000544e <virtual_instruction_3+0xb2>
    80005446:	6498                	ld	a4,8(s1)
    80005448:	47d9                	li	a5,22
    8000544a:	00f70c63          	beq	a4,a5,80005462 <virtual_instruction_3+0xc6>
    8000544e:	0002d517          	auipc	a0,0x2d
    80005452:	2b250513          	addi	a0,a0,690 # 80032700 <__func__.0+0x318>
    80005456:	06e2a0ef          	jal	8002f4c4 <printf>
    8000545a:	02900513          	li	a0,41
    8000545e:	555280ef          	jal	8002e1b2 <putchar>
    80005462:	4529                	li	a0,10
    80005464:	54f280ef          	jal	8002e1b2 <putchar>
    80005468:	00057417          	auipc	s0,0x57
    8000546c:	ba944403          	lbu	s0,-1111(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
    goto_priv(PRIV_M);
    80005470:	4511                	li	a0,4
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80005472:	c409                	beqz	s0,8000547c <virtual_instruction_3+0xe0>
    80005474:	6498                	ld	a4,8(s1)
    80005476:	47d9                	li	a5,22
    80005478:	02f70e63          	beq	a4,a5,800054b4 <virtual_instruction_3+0x118>
    goto_priv(PRIV_M);
    8000547c:	a99fb0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    80005480:	004007b7          	lui	a5,0x400
    80005484:	6007b073          	csrc	hstatus,a5
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80005488:	4401                	li	s0,0

    TEST_END();
    8000548a:	0002d597          	auipc	a1,0x2d
    8000548e:	22e58593          	addi	a1,a1,558 # 800326b8 <__func__.0+0x2d0>
    80005492:	0002d517          	auipc	a0,0x2d
    80005496:	2ce50513          	addi	a0,a0,718 # 80032760 <__func__.0+0x378>
    8000549a:	02a2a0ef          	jal	8002f4c4 <printf>
    8000549e:	4511                	li	a0,4
    800054a0:	a75fb0ef          	jal	80000f14 <goto_priv>
    800054a4:	ad2fc0ef          	jal	80001776 <reset_state>
}
    800054a8:	60e2                	ld	ra,24(sp)
    800054aa:	8522                	mv	a0,s0
    800054ac:	6442                	ld	s0,16(sp)
    800054ae:	64a2                	ld	s1,8(sp)
    800054b0:	6105                	addi	sp,sp,32
    800054b2:	8082                	ret
    goto_priv(PRIV_M);
    800054b4:	a61fb0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    800054b8:	004007b7          	lui	a5,0x400
    800054bc:	6007b073          	csrc	hstatus,a5
    TEST_END();
    800054c0:	0002d597          	auipc	a1,0x2d
    800054c4:	1e858593          	addi	a1,a1,488 # 800326a8 <__func__.0+0x2c0>
    800054c8:	b7e9                	j	80005492 <virtual_instruction_3+0xf6>

00000000800054ca <virtual_instruction_4>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_4() {
    800054ca:	1101                	addi	sp,sp,-32

    TEST_START();
    800054cc:	0002b597          	auipc	a1,0x2b
    800054d0:	04458593          	addi	a1,a1,68 # 80030510 <__func__.8>
    800054d4:	0002d517          	auipc	a0,0x2d
    800054d8:	1f450513          	addi	a0,a0,500 # 800326c8 <__func__.0+0x2e0>
bool virtual_instruction_4() {
    800054dc:	ec06                	sd	ra,24(sp)
    800054de:	e822                	sd	s0,16(sp)
    800054e0:	e426                	sd	s1,8(sp)
    TEST_START();
    800054e2:	7e3290ef          	jal	8002f4c4 <printf>
    800054e6:	4529                	li	a0,10
    800054e8:	4cb280ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    800054ec:	4511                	li	a0,4
    800054ee:	a27fb0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    800054f2:	001007b7          	lui	a5,0x100
    800054f6:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    800054fa:	4509                	li	a0,2
    800054fc:	a19fb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005500:	919fb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile ("sfence.vma \n\t");
    80005504:	12000073          	sfence.vma
    sfence();
    TEST_ASSERT("vs sfence leads to virtual instruction exception when vtvm set",
    80005508:	08c00593          	li	a1,140
    8000550c:	0002e617          	auipc	a2,0x2e
    80005510:	03c60613          	addi	a2,a2,60 # 80033548 <__func__.0+0x1160>
    80005514:	0002d517          	auipc	a0,0x2d
    80005518:	1cc50513          	addi	a0,a0,460 # 800326e0 <__func__.0+0x2f8>
    8000551c:	7a9290ef          	jal	8002f4c4 <printf>
    80005520:	00057797          	auipc	a5,0x57
    80005524:	af17c783          	lbu	a5,-1295(a5) # 8005c011 <excpt+0x1>
    80005528:	00057497          	auipc	s1,0x57
    8000552c:	ae848493          	addi	s1,s1,-1304 # 8005c010 <excpt>
    80005530:	0002d597          	auipc	a1,0x2d
    80005534:	18858593          	addi	a1,a1,392 # 800326b8 <__func__.0+0x2d0>
    80005538:	cf89                	beqz	a5,80005552 <virtual_instruction_4+0x88>
    8000553a:	6498                	ld	a4,8(s1)
    8000553c:	47d9                	li	a5,22
    8000553e:	0002d597          	auipc	a1,0x2d
    80005542:	16a58593          	addi	a1,a1,362 # 800326a8 <__func__.0+0x2c0>
    80005546:	00f70663          	beq	a4,a5,80005552 <virtual_instruction_4+0x88>
    8000554a:	0002d597          	auipc	a1,0x2d
    8000554e:	16e58593          	addi	a1,a1,366 # 800326b8 <__func__.0+0x2d0>
    80005552:	0002d517          	auipc	a0,0x2d
    80005556:	1a650513          	addi	a0,a0,422 # 800326f8 <__func__.0+0x310>
    8000555a:	76b290ef          	jal	8002f4c4 <printf>
    8000555e:	00057797          	auipc	a5,0x57
    80005562:	ab37c783          	lbu	a5,-1357(a5) # 8005c011 <excpt+0x1>
    80005566:	c789                	beqz	a5,80005570 <virtual_instruction_4+0xa6>
    80005568:	6498                	ld	a4,8(s1)
    8000556a:	47d9                	li	a5,22
    8000556c:	00f70c63          	beq	a4,a5,80005584 <virtual_instruction_4+0xba>
    80005570:	0002d517          	auipc	a0,0x2d
    80005574:	19050513          	addi	a0,a0,400 # 80032700 <__func__.0+0x318>
    80005578:	74d290ef          	jal	8002f4c4 <printf>
    8000557c:	02900513          	li	a0,41
    80005580:	433280ef          	jal	8002e1b2 <putchar>
    80005584:	4529                	li	a0,10
    80005586:	42d280ef          	jal	8002e1b2 <putchar>
    8000558a:	00057797          	auipc	a5,0x57
    8000558e:	a877c783          	lbu	a5,-1401(a5) # 8005c011 <excpt+0x1>
    80005592:	4401                	li	s0,0
    80005594:	c789                	beqz	a5,8000559e <virtual_instruction_4+0xd4>
    80005596:	6480                	ld	s0,8(s1)
    80005598:	1429                	addi	s0,s0,-22
    8000559a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_SETUP_EXCEPT();
    8000559e:	87bfb0ef          	jal	80000e18 <test_setup_except_function>
    CSRW(satp, 0x0);
    800055a2:	18005073          	csrwi	satp,0
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    800055a6:	08c00593          	li	a1,140
    800055aa:	0002e617          	auipc	a2,0x2e
    800055ae:	fde60613          	addi	a2,a2,-34 # 80033588 <__func__.0+0x11a0>
    800055b2:	0002d517          	auipc	a0,0x2d
    800055b6:	12e50513          	addi	a0,a0,302 # 800326e0 <__func__.0+0x2f8>
    800055ba:	70b290ef          	jal	8002f4c4 <printf>
    800055be:	00057797          	auipc	a5,0x57
    800055c2:	a537c783          	lbu	a5,-1453(a5) # 8005c011 <excpt+0x1>
    800055c6:	0002d597          	auipc	a1,0x2d
    800055ca:	0f258593          	addi	a1,a1,242 # 800326b8 <__func__.0+0x2d0>
    800055ce:	cf89                	beqz	a5,800055e8 <virtual_instruction_4+0x11e>
    800055d0:	6498                	ld	a4,8(s1)
    800055d2:	47d9                	li	a5,22
    800055d4:	0002d597          	auipc	a1,0x2d
    800055d8:	0d458593          	addi	a1,a1,212 # 800326a8 <__func__.0+0x2c0>
    800055dc:	00f70663          	beq	a4,a5,800055e8 <virtual_instruction_4+0x11e>
    800055e0:	0002d597          	auipc	a1,0x2d
    800055e4:	0d858593          	addi	a1,a1,216 # 800326b8 <__func__.0+0x2d0>
    800055e8:	0002d517          	auipc	a0,0x2d
    800055ec:	11050513          	addi	a0,a0,272 # 800326f8 <__func__.0+0x310>
    800055f0:	6d5290ef          	jal	8002f4c4 <printf>
    800055f4:	00057797          	auipc	a5,0x57
    800055f8:	a1d7c783          	lbu	a5,-1507(a5) # 8005c011 <excpt+0x1>
    800055fc:	c789                	beqz	a5,80005606 <virtual_instruction_4+0x13c>
    800055fe:	6498                	ld	a4,8(s1)
    80005600:	47d9                	li	a5,22
    80005602:	00f70c63          	beq	a4,a5,8000561a <virtual_instruction_4+0x150>
    80005606:	0002d517          	auipc	a0,0x2d
    8000560a:	0fa50513          	addi	a0,a0,250 # 80032700 <__func__.0+0x318>
    8000560e:	6b7290ef          	jal	8002f4c4 <printf>
    80005612:	02900513          	li	a0,41
    80005616:	39d280ef          	jal	8002e1b2 <putchar>
    8000561a:	4529                	li	a0,10
    8000561c:	397280ef          	jal	8002e1b2 <putchar>
    80005620:	c015                	beqz	s0,80005644 <virtual_instruction_4+0x17a>
    80005622:	00057417          	auipc	s0,0x57
    80005626:	9ef44403          	lbu	s0,-1553(s0) # 8005c011 <excpt+0x1>
    // TEST_ASSERT("vs mode access h level low part leads to virtual instruction exception when mstatus_TVM=0",
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_VRTI
    // );      
    
    TEST_END();
    8000562a:	0002d597          	auipc	a1,0x2d
    8000562e:	08e58593          	addi	a1,a1,142 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    80005632:	cc11                	beqz	s0,8000564e <virtual_instruction_4+0x184>
    80005634:	6498                	ld	a4,8(s1)
    80005636:	47d9                	li	a5,22
    TEST_END();
    80005638:	0002d597          	auipc	a1,0x2d
    8000563c:	07058593          	addi	a1,a1,112 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    80005640:	00f70763          	beq	a4,a5,8000564e <virtual_instruction_4+0x184>
    80005644:	4401                	li	s0,0
    TEST_END();
    80005646:	0002d597          	auipc	a1,0x2d
    8000564a:	07258593          	addi	a1,a1,114 # 800326b8 <__func__.0+0x2d0>
    8000564e:	0002d517          	auipc	a0,0x2d
    80005652:	11250513          	addi	a0,a0,274 # 80032760 <__func__.0+0x378>
    80005656:	66f290ef          	jal	8002f4c4 <printf>
    8000565a:	4511                	li	a0,4
    8000565c:	8b9fb0ef          	jal	80000f14 <goto_priv>
    80005660:	916fc0ef          	jal	80001776 <reset_state>
}
    80005664:	60e2                	ld	ra,24(sp)
    80005666:	8522                	mv	a0,s0
    80005668:	6442                	ld	s0,16(sp)
    8000566a:	64a2                	ld	s1,8(sp)
    8000566c:	6105                	addi	sp,sp,32
    8000566e:	8082                	ret

0000000080005670 <virtual_instruction_5>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_5() {
    80005670:	1101                	addi	sp,sp,-32

    TEST_START();
    80005672:	0002b597          	auipc	a1,0x2b
    80005676:	eb658593          	addi	a1,a1,-330 # 80030528 <__func__.7>
    8000567a:	0002d517          	auipc	a0,0x2d
    8000567e:	04e50513          	addi	a0,a0,78 # 800326c8 <__func__.0+0x2e0>
bool virtual_instruction_5() {
    80005682:	ec06                	sd	ra,24(sp)
    80005684:	e822                	sd	s0,16(sp)
    80005686:	e426                	sd	s1,8(sp)
    TEST_START();
    80005688:	63d290ef          	jal	8002f4c4 <printf>
    8000568c:	4529                	li	a0,10
    8000568e:	325280ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    80005692:	4511                	li	a0,4
    80005694:	881fb0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    80005698:	002007b7          	lui	a5,0x200
    8000569c:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    800056a0:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VS);
    800056a4:	4509                	li	a0,2
    800056a6:	86ffb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800056aa:	f6efb0ef          	jal	80000e18 <test_setup_except_function>
    asm("wfi");
    800056ae:	10500073          	wfi
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800056b2:	08c00593          	li	a1,140
    800056b6:	0002e617          	auipc	a2,0x2e
    800056ba:	f1a60613          	addi	a2,a2,-230 # 800335d0 <__func__.0+0x11e8>
    800056be:	0002d517          	auipc	a0,0x2d
    800056c2:	02250513          	addi	a0,a0,34 # 800326e0 <__func__.0+0x2f8>
    800056c6:	5ff290ef          	jal	8002f4c4 <printf>
    800056ca:	00057797          	auipc	a5,0x57
    800056ce:	9477c783          	lbu	a5,-1721(a5) # 8005c011 <excpt+0x1>
    800056d2:	00057497          	auipc	s1,0x57
    800056d6:	93e48493          	addi	s1,s1,-1730 # 8005c010 <excpt>
    800056da:	0002d597          	auipc	a1,0x2d
    800056de:	fde58593          	addi	a1,a1,-34 # 800326b8 <__func__.0+0x2d0>
    800056e2:	cf89                	beqz	a5,800056fc <virtual_instruction_5+0x8c>
    800056e4:	6498                	ld	a4,8(s1)
    800056e6:	47d9                	li	a5,22
    800056e8:	0002d597          	auipc	a1,0x2d
    800056ec:	fc058593          	addi	a1,a1,-64 # 800326a8 <__func__.0+0x2c0>
    800056f0:	00f70663          	beq	a4,a5,800056fc <virtual_instruction_5+0x8c>
    800056f4:	0002d597          	auipc	a1,0x2d
    800056f8:	fc458593          	addi	a1,a1,-60 # 800326b8 <__func__.0+0x2d0>
    800056fc:	0002d517          	auipc	a0,0x2d
    80005700:	ffc50513          	addi	a0,a0,-4 # 800326f8 <__func__.0+0x310>
    80005704:	5c1290ef          	jal	8002f4c4 <printf>
    80005708:	00057797          	auipc	a5,0x57
    8000570c:	9097c783          	lbu	a5,-1783(a5) # 8005c011 <excpt+0x1>
    80005710:	c789                	beqz	a5,8000571a <virtual_instruction_5+0xaa>
    80005712:	6498                	ld	a4,8(s1)
    80005714:	47d9                	li	a5,22
    80005716:	00f70c63          	beq	a4,a5,8000572e <virtual_instruction_5+0xbe>
    8000571a:	0002d517          	auipc	a0,0x2d
    8000571e:	fe650513          	addi	a0,a0,-26 # 80032700 <__func__.0+0x318>
    80005722:	5a3290ef          	jal	8002f4c4 <printf>
    80005726:	02900513          	li	a0,41
    8000572a:	289280ef          	jal	8002e1b2 <putchar>
    8000572e:	4529                	li	a0,10
    80005730:	283280ef          	jal	8002e1b2 <putchar>
    80005734:	00057417          	auipc	s0,0x57
    80005738:	8dd44403          	lbu	s0,-1827(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    goto_priv(PRIV_M);
    8000573c:	4511                	li	a0,4
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000573e:	c409                	beqz	s0,80005748 <virtual_instruction_5+0xd8>
    80005740:	6498                	ld	a4,8(s1)
    80005742:	47d9                	li	a5,22
    80005744:	04f70263          	beq	a4,a5,80005788 <virtual_instruction_5+0x118>
    goto_priv(PRIV_M);
    80005748:	fccfb0ef          	jal	80000f14 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    8000574c:	343025f3          	csrr	a1,mtval
    80005750:	0002e517          	auipc	a0,0x2e
    80005754:	ec850513          	addi	a0,a0,-312 # 80033618 <__func__.0+0x1230>
    80005758:	56d290ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000575c:	4401                	li	s0,0

    TEST_END();
    8000575e:	0002d597          	auipc	a1,0x2d
    80005762:	f5a58593          	addi	a1,a1,-166 # 800326b8 <__func__.0+0x2d0>
    80005766:	0002d517          	auipc	a0,0x2d
    8000576a:	ffa50513          	addi	a0,a0,-6 # 80032760 <__func__.0+0x378>
    8000576e:	557290ef          	jal	8002f4c4 <printf>
    80005772:	4511                	li	a0,4
    80005774:	fa0fb0ef          	jal	80000f14 <goto_priv>
    80005778:	ffffb0ef          	jal	80001776 <reset_state>
}
    8000577c:	60e2                	ld	ra,24(sp)
    8000577e:	8522                	mv	a0,s0
    80005780:	6442                	ld	s0,16(sp)
    80005782:	64a2                	ld	s1,8(sp)
    80005784:	6105                	addi	sp,sp,32
    80005786:	8082                	ret
    goto_priv(PRIV_M);
    80005788:	f8cfb0ef          	jal	80000f14 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    8000578c:	343025f3          	csrr	a1,mtval
    80005790:	0002e517          	auipc	a0,0x2e
    80005794:	e8850513          	addi	a0,a0,-376 # 80033618 <__func__.0+0x1230>
    80005798:	52d290ef          	jal	8002f4c4 <printf>
    TEST_END();
    8000579c:	0002d597          	auipc	a1,0x2d
    800057a0:	f0c58593          	addi	a1,a1,-244 # 800326a8 <__func__.0+0x2c0>
    800057a4:	b7c9                	j	80005766 <virtual_instruction_5+0xf6>

00000000800057a6 <virtual_instruction_6>:


bool virtual_instruction_6() {
    800057a6:	1101                	addi	sp,sp,-32

    TEST_START();
    800057a8:	0002b597          	auipc	a1,0x2b
    800057ac:	d9858593          	addi	a1,a1,-616 # 80030540 <__func__.6>
    800057b0:	0002d517          	auipc	a0,0x2d
    800057b4:	f1850513          	addi	a0,a0,-232 # 800326c8 <__func__.0+0x2e0>
bool virtual_instruction_6() {
    800057b8:	ec06                	sd	ra,24(sp)
    800057ba:	e822                	sd	s0,16(sp)
    800057bc:	e426                	sd	s1,8(sp)
    TEST_START();
    800057be:	507290ef          	jal	8002f4c4 <printf>
    800057c2:	4529                	li	a0,10
    800057c4:	1ef280ef          	jal	8002e1b2 <putchar>

//vu-mode
    goto_priv(PRIV_VU);
    800057c8:	4501                	li	a0,0
    800057ca:	f4afb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800057ce:	e4afb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    800057d2:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vu executing hfence.vvma leads to virtual instruction exception",
    800057d6:	08c00593          	li	a1,140
    800057da:	0002e617          	auipc	a2,0x2e
    800057de:	e4660613          	addi	a2,a2,-442 # 80033620 <__func__.0+0x1238>
    800057e2:	0002d517          	auipc	a0,0x2d
    800057e6:	efe50513          	addi	a0,a0,-258 # 800326e0 <__func__.0+0x2f8>
    800057ea:	4db290ef          	jal	8002f4c4 <printf>
    800057ee:	00057797          	auipc	a5,0x57
    800057f2:	8237c783          	lbu	a5,-2013(a5) # 8005c011 <excpt+0x1>
    800057f6:	00057497          	auipc	s1,0x57
    800057fa:	81a48493          	addi	s1,s1,-2022 # 8005c010 <excpt>
    800057fe:	0002d597          	auipc	a1,0x2d
    80005802:	eba58593          	addi	a1,a1,-326 # 800326b8 <__func__.0+0x2d0>
    80005806:	cf89                	beqz	a5,80005820 <virtual_instruction_6+0x7a>
    80005808:	6498                	ld	a4,8(s1)
    8000580a:	47d9                	li	a5,22
    8000580c:	0002d597          	auipc	a1,0x2d
    80005810:	e9c58593          	addi	a1,a1,-356 # 800326a8 <__func__.0+0x2c0>
    80005814:	00f70663          	beq	a4,a5,80005820 <virtual_instruction_6+0x7a>
    80005818:	0002d597          	auipc	a1,0x2d
    8000581c:	ea058593          	addi	a1,a1,-352 # 800326b8 <__func__.0+0x2d0>
    80005820:	0002d517          	auipc	a0,0x2d
    80005824:	ed850513          	addi	a0,a0,-296 # 800326f8 <__func__.0+0x310>
    80005828:	49d290ef          	jal	8002f4c4 <printf>
    8000582c:	00056797          	auipc	a5,0x56
    80005830:	7e57c783          	lbu	a5,2021(a5) # 8005c011 <excpt+0x1>
    80005834:	c789                	beqz	a5,8000583e <virtual_instruction_6+0x98>
    80005836:	6498                	ld	a4,8(s1)
    80005838:	47d9                	li	a5,22
    8000583a:	00f70c63          	beq	a4,a5,80005852 <virtual_instruction_6+0xac>
    8000583e:	0002d517          	auipc	a0,0x2d
    80005842:	ec250513          	addi	a0,a0,-318 # 80032700 <__func__.0+0x318>
    80005846:	47f290ef          	jal	8002f4c4 <printf>
    8000584a:	02900513          	li	a0,41
    8000584e:	165280ef          	jal	8002e1b2 <putchar>
    80005852:	4529                	li	a0,10
    80005854:	15f280ef          	jal	8002e1b2 <putchar>
    80005858:	00056797          	auipc	a5,0x56
    8000585c:	7b97c783          	lbu	a5,1977(a5) # 8005c011 <excpt+0x1>
    80005860:	4401                	li	s0,0
    80005862:	c789                	beqz	a5,8000586c <virtual_instruction_6+0xc6>
    80005864:	6480                	ld	s0,8(s1)
    80005866:	1429                	addi	s0,s0,-22
    80005868:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VU);
    8000586c:	4501                	li	a0,0
    8000586e:	ea6fb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005872:	da6fb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80005876:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    8000587a:	08c00593          	li	a1,140
    8000587e:	0002e617          	auipc	a2,0x2e
    80005882:	de260613          	addi	a2,a2,-542 # 80033660 <__func__.0+0x1278>
    80005886:	0002d517          	auipc	a0,0x2d
    8000588a:	e5a50513          	addi	a0,a0,-422 # 800326e0 <__func__.0+0x2f8>
    8000588e:	437290ef          	jal	8002f4c4 <printf>
    80005892:	00056797          	auipc	a5,0x56
    80005896:	77f7c783          	lbu	a5,1919(a5) # 8005c011 <excpt+0x1>
    8000589a:	0002d597          	auipc	a1,0x2d
    8000589e:	e1e58593          	addi	a1,a1,-482 # 800326b8 <__func__.0+0x2d0>
    800058a2:	cf89                	beqz	a5,800058bc <virtual_instruction_6+0x116>
    800058a4:	6498                	ld	a4,8(s1)
    800058a6:	47d9                	li	a5,22
    800058a8:	0002d597          	auipc	a1,0x2d
    800058ac:	e0058593          	addi	a1,a1,-512 # 800326a8 <__func__.0+0x2c0>
    800058b0:	00f70663          	beq	a4,a5,800058bc <virtual_instruction_6+0x116>
    800058b4:	0002d597          	auipc	a1,0x2d
    800058b8:	e0458593          	addi	a1,a1,-508 # 800326b8 <__func__.0+0x2d0>
    800058bc:	0002d517          	auipc	a0,0x2d
    800058c0:	e3c50513          	addi	a0,a0,-452 # 800326f8 <__func__.0+0x310>
    800058c4:	401290ef          	jal	8002f4c4 <printf>
    800058c8:	00056797          	auipc	a5,0x56
    800058cc:	7497c783          	lbu	a5,1865(a5) # 8005c011 <excpt+0x1>
    800058d0:	c789                	beqz	a5,800058da <virtual_instruction_6+0x134>
    800058d2:	6498                	ld	a4,8(s1)
    800058d4:	47d9                	li	a5,22
    800058d6:	00f70c63          	beq	a4,a5,800058ee <virtual_instruction_6+0x148>
    800058da:	0002d517          	auipc	a0,0x2d
    800058de:	e2650513          	addi	a0,a0,-474 # 80032700 <__func__.0+0x318>
    800058e2:	3e3290ef          	jal	8002f4c4 <printf>
    800058e6:	02900513          	li	a0,41
    800058ea:	0c9280ef          	jal	8002e1b2 <putchar>
    800058ee:	4529                	li	a0,10
    800058f0:	0c3280ef          	jal	8002e1b2 <putchar>
    800058f4:	c801                	beqz	s0,80005904 <virtual_instruction_6+0x15e>
    800058f6:	00056797          	auipc	a5,0x56
    800058fa:	71b7c783          	lbu	a5,1819(a5) # 8005c011 <excpt+0x1>
    800058fe:	4401                	li	s0,0
    80005900:	0c079e63          	bnez	a5,800059dc <virtual_instruction_6+0x236>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    goto_priv(PRIV_VU);
    80005904:	4501                	li	a0,0
    80005906:	e0efb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000590a:	d0efb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    8000590e:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005912:	08c00593          	li	a1,140
    80005916:	0002e617          	auipc	a2,0x2e
    8000591a:	d8a60613          	addi	a2,a2,-630 # 800336a0 <__func__.0+0x12b8>
    8000591e:	0002d517          	auipc	a0,0x2d
    80005922:	dc250513          	addi	a0,a0,-574 # 800326e0 <__func__.0+0x2f8>
    80005926:	39f290ef          	jal	8002f4c4 <printf>
    8000592a:	00056797          	auipc	a5,0x56
    8000592e:	6e77c783          	lbu	a5,1767(a5) # 8005c011 <excpt+0x1>
    80005932:	0002d597          	auipc	a1,0x2d
    80005936:	d8658593          	addi	a1,a1,-634 # 800326b8 <__func__.0+0x2d0>
    8000593a:	cf89                	beqz	a5,80005954 <virtual_instruction_6+0x1ae>
    8000593c:	6498                	ld	a4,8(s1)
    8000593e:	47d9                	li	a5,22
    80005940:	0002d597          	auipc	a1,0x2d
    80005944:	d6858593          	addi	a1,a1,-664 # 800326a8 <__func__.0+0x2c0>
    80005948:	00f70663          	beq	a4,a5,80005954 <virtual_instruction_6+0x1ae>
    8000594c:	0002d597          	auipc	a1,0x2d
    80005950:	d6c58593          	addi	a1,a1,-660 # 800326b8 <__func__.0+0x2d0>
    80005954:	0002d517          	auipc	a0,0x2d
    80005958:	da450513          	addi	a0,a0,-604 # 800326f8 <__func__.0+0x310>
    8000595c:	369290ef          	jal	8002f4c4 <printf>
    80005960:	00056797          	auipc	a5,0x56
    80005964:	6b17c783          	lbu	a5,1713(a5) # 8005c011 <excpt+0x1>
    80005968:	c789                	beqz	a5,80005972 <virtual_instruction_6+0x1cc>
    8000596a:	6498                	ld	a4,8(s1)
    8000596c:	47d9                	li	a5,22
    8000596e:	00f70c63          	beq	a4,a5,80005986 <virtual_instruction_6+0x1e0>
    80005972:	0002d517          	auipc	a0,0x2d
    80005976:	d8e50513          	addi	a0,a0,-626 # 80032700 <__func__.0+0x318>
    8000597a:	34b290ef          	jal	8002f4c4 <printf>
    8000597e:	02900513          	li	a0,41
    80005982:	031280ef          	jal	8002e1b2 <putchar>
    80005986:	4529                	li	a0,10
    80005988:	02b280ef          	jal	8002e1b2 <putchar>
    8000598c:	c015                	beqz	s0,800059b0 <virtual_instruction_6+0x20a>
    8000598e:	00056417          	auipc	s0,0x56
    80005992:	68344403          	lbu	s0,1667(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005996:	0002d597          	auipc	a1,0x2d
    8000599a:	d2258593          	addi	a1,a1,-734 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    8000599e:	cc11                	beqz	s0,800059ba <virtual_instruction_6+0x214>
    800059a0:	6498                	ld	a4,8(s1)
    800059a2:	47d9                	li	a5,22
    TEST_END();
    800059a4:	0002d597          	auipc	a1,0x2d
    800059a8:	d0458593          	addi	a1,a1,-764 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800059ac:	00f70763          	beq	a4,a5,800059ba <virtual_instruction_6+0x214>
    800059b0:	4401                	li	s0,0
    TEST_END();
    800059b2:	0002d597          	auipc	a1,0x2d
    800059b6:	d0658593          	addi	a1,a1,-762 # 800326b8 <__func__.0+0x2d0>
    800059ba:	0002d517          	auipc	a0,0x2d
    800059be:	da650513          	addi	a0,a0,-602 # 80032760 <__func__.0+0x378>
    800059c2:	303290ef          	jal	8002f4c4 <printf>
    800059c6:	4511                	li	a0,4
    800059c8:	d4cfb0ef          	jal	80000f14 <goto_priv>
    800059cc:	dabfb0ef          	jal	80001776 <reset_state>
}
    800059d0:	60e2                	ld	ra,24(sp)
    800059d2:	8522                	mv	a0,s0
    800059d4:	6442                	ld	s0,16(sp)
    800059d6:	64a2                	ld	s1,8(sp)
    800059d8:	6105                	addi	sp,sp,32
    800059da:	8082                	ret
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    800059dc:	6480                	ld	s0,8(s1)
    800059de:	1429                	addi	s0,s0,-22
    800059e0:	00143413          	seqz	s0,s0
    800059e4:	b705                	j	80005904 <virtual_instruction_6+0x15e>

00000000800059e6 <virtual_instruction_7>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_7() {
    800059e6:	1101                	addi	sp,sp,-32

    TEST_START();
    800059e8:	0002b597          	auipc	a1,0x2b
    800059ec:	b7058593          	addi	a1,a1,-1168 # 80030558 <__func__.5>
    800059f0:	0002d517          	auipc	a0,0x2d
    800059f4:	cd850513          	addi	a0,a0,-808 # 800326c8 <__func__.0+0x2e0>
bool virtual_instruction_7() {
    800059f8:	ec06                	sd	ra,24(sp)
    800059fa:	e822                	sd	s0,16(sp)
    800059fc:	e426                	sd	s1,8(sp)
    TEST_START();
    800059fe:	2c7290ef          	jal	8002f4c4 <printf>
    80005a02:	4529                	li	a0,10
    80005a04:	7ae280ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_VU);
    80005a08:	4501                	li	a0,0
    80005a0a:	d0afb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005a0e:	c0afb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80005a12:	4781                	li	a5,0
    80005a14:	6007c7f3          	.insn	4, 0x6007c7f3
    uint64_t tmp = hlvb(0);

    TEST_ASSERT("vu hlvb leads to virtual instruction exception",
    80005a18:	08c00593          	li	a1,140
    80005a1c:	0002e617          	auipc	a2,0x2e
    80005a20:	cd460613          	addi	a2,a2,-812 # 800336f0 <__func__.0+0x1308>
    80005a24:	0002d517          	auipc	a0,0x2d
    80005a28:	cbc50513          	addi	a0,a0,-836 # 800326e0 <__func__.0+0x2f8>
    80005a2c:	299290ef          	jal	8002f4c4 <printf>
    80005a30:	00056797          	auipc	a5,0x56
    80005a34:	5e17c783          	lbu	a5,1505(a5) # 8005c011 <excpt+0x1>
    80005a38:	00056497          	auipc	s1,0x56
    80005a3c:	5d848493          	addi	s1,s1,1496 # 8005c010 <excpt>
    80005a40:	0002d597          	auipc	a1,0x2d
    80005a44:	c7858593          	addi	a1,a1,-904 # 800326b8 <__func__.0+0x2d0>
    80005a48:	cf89                	beqz	a5,80005a62 <virtual_instruction_7+0x7c>
    80005a4a:	6498                	ld	a4,8(s1)
    80005a4c:	47d9                	li	a5,22
    80005a4e:	0002d597          	auipc	a1,0x2d
    80005a52:	c5a58593          	addi	a1,a1,-934 # 800326a8 <__func__.0+0x2c0>
    80005a56:	00f70663          	beq	a4,a5,80005a62 <virtual_instruction_7+0x7c>
    80005a5a:	0002d597          	auipc	a1,0x2d
    80005a5e:	c5e58593          	addi	a1,a1,-930 # 800326b8 <__func__.0+0x2d0>
    80005a62:	0002d517          	auipc	a0,0x2d
    80005a66:	c9650513          	addi	a0,a0,-874 # 800326f8 <__func__.0+0x310>
    80005a6a:	25b290ef          	jal	8002f4c4 <printf>
    80005a6e:	00056797          	auipc	a5,0x56
    80005a72:	5a37c783          	lbu	a5,1443(a5) # 8005c011 <excpt+0x1>
    80005a76:	c789                	beqz	a5,80005a80 <virtual_instruction_7+0x9a>
    80005a78:	6498                	ld	a4,8(s1)
    80005a7a:	47d9                	li	a5,22
    80005a7c:	00f70c63          	beq	a4,a5,80005a94 <virtual_instruction_7+0xae>
    80005a80:	0002d517          	auipc	a0,0x2d
    80005a84:	c8050513          	addi	a0,a0,-896 # 80032700 <__func__.0+0x318>
    80005a88:	23d290ef          	jal	8002f4c4 <printf>
    80005a8c:	02900513          	li	a0,41
    80005a90:	722280ef          	jal	8002e1b2 <putchar>
    80005a94:	4529                	li	a0,10
    80005a96:	71c280ef          	jal	8002e1b2 <putchar>
    80005a9a:	00056797          	auipc	a5,0x56
    80005a9e:	5777c783          	lbu	a5,1399(a5) # 8005c011 <excpt+0x1>
    80005aa2:	4401                	li	s0,0
    80005aa4:	c789                	beqz	a5,80005aae <virtual_instruction_7+0xc8>
    80005aa6:	6480                	ld	s0,8(s1)
    80005aa8:	1429                	addi	s0,s0,-22
    80005aaa:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005aae:	4501                	li	a0,0
    80005ab0:	c64fb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005ab4:	b64fb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80005ab8:	4781                	li	a5,0
    80005aba:	6017c7f3          	.insn	4, 0x6017c7f3
     tmp = hlvbu(0);

    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80005abe:	08c00593          	li	a1,140
    80005ac2:	0002e617          	auipc	a2,0x2e
    80005ac6:	c5e60613          	addi	a2,a2,-930 # 80033720 <__func__.0+0x1338>
    80005aca:	0002d517          	auipc	a0,0x2d
    80005ace:	c1650513          	addi	a0,a0,-1002 # 800326e0 <__func__.0+0x2f8>
    80005ad2:	1f3290ef          	jal	8002f4c4 <printf>
    80005ad6:	00056797          	auipc	a5,0x56
    80005ada:	53b7c783          	lbu	a5,1339(a5) # 8005c011 <excpt+0x1>
    80005ade:	0002d597          	auipc	a1,0x2d
    80005ae2:	bda58593          	addi	a1,a1,-1062 # 800326b8 <__func__.0+0x2d0>
    80005ae6:	cf89                	beqz	a5,80005b00 <virtual_instruction_7+0x11a>
    80005ae8:	6498                	ld	a4,8(s1)
    80005aea:	47d9                	li	a5,22
    80005aec:	0002d597          	auipc	a1,0x2d
    80005af0:	bbc58593          	addi	a1,a1,-1092 # 800326a8 <__func__.0+0x2c0>
    80005af4:	00f70663          	beq	a4,a5,80005b00 <virtual_instruction_7+0x11a>
    80005af8:	0002d597          	auipc	a1,0x2d
    80005afc:	bc058593          	addi	a1,a1,-1088 # 800326b8 <__func__.0+0x2d0>
    80005b00:	0002d517          	auipc	a0,0x2d
    80005b04:	bf850513          	addi	a0,a0,-1032 # 800326f8 <__func__.0+0x310>
    80005b08:	1bd290ef          	jal	8002f4c4 <printf>
    80005b0c:	00056797          	auipc	a5,0x56
    80005b10:	5057c783          	lbu	a5,1285(a5) # 8005c011 <excpt+0x1>
    80005b14:	c789                	beqz	a5,80005b1e <virtual_instruction_7+0x138>
    80005b16:	6498                	ld	a4,8(s1)
    80005b18:	47d9                	li	a5,22
    80005b1a:	00f70c63          	beq	a4,a5,80005b32 <virtual_instruction_7+0x14c>
    80005b1e:	0002d517          	auipc	a0,0x2d
    80005b22:	be250513          	addi	a0,a0,-1054 # 80032700 <__func__.0+0x318>
    80005b26:	19f290ef          	jal	8002f4c4 <printf>
    80005b2a:	02900513          	li	a0,41
    80005b2e:	684280ef          	jal	8002e1b2 <putchar>
    80005b32:	4529                	li	a0,10
    80005b34:	67e280ef          	jal	8002e1b2 <putchar>
    80005b38:	c801                	beqz	s0,80005b48 <virtual_instruction_7+0x162>
    80005b3a:	00056797          	auipc	a5,0x56
    80005b3e:	4d77c783          	lbu	a5,1239(a5) # 8005c011 <excpt+0x1>
    80005b42:	4401                	li	s0,0
    80005b44:	4c079d63          	bnez	a5,8000601e <virtual_instruction_7+0x638>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005b48:	4501                	li	a0,0
    80005b4a:	bcafb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005b4e:	acafb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80005b52:	4781                	li	a5,0
    80005b54:	6407c7f3          	.insn	4, 0x6407c7f3
     tmp = hlvh(0);

    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80005b58:	08c00593          	li	a1,140
    80005b5c:	0002e617          	auipc	a2,0x2e
    80005b60:	bf460613          	addi	a2,a2,-1036 # 80033750 <__func__.0+0x1368>
    80005b64:	0002d517          	auipc	a0,0x2d
    80005b68:	b7c50513          	addi	a0,a0,-1156 # 800326e0 <__func__.0+0x2f8>
    80005b6c:	159290ef          	jal	8002f4c4 <printf>
    80005b70:	00056797          	auipc	a5,0x56
    80005b74:	4a17c783          	lbu	a5,1185(a5) # 8005c011 <excpt+0x1>
    80005b78:	0002d597          	auipc	a1,0x2d
    80005b7c:	b4058593          	addi	a1,a1,-1216 # 800326b8 <__func__.0+0x2d0>
    80005b80:	cf89                	beqz	a5,80005b9a <virtual_instruction_7+0x1b4>
    80005b82:	6498                	ld	a4,8(s1)
    80005b84:	47d9                	li	a5,22
    80005b86:	0002d597          	auipc	a1,0x2d
    80005b8a:	b2258593          	addi	a1,a1,-1246 # 800326a8 <__func__.0+0x2c0>
    80005b8e:	00f70663          	beq	a4,a5,80005b9a <virtual_instruction_7+0x1b4>
    80005b92:	0002d597          	auipc	a1,0x2d
    80005b96:	b2658593          	addi	a1,a1,-1242 # 800326b8 <__func__.0+0x2d0>
    80005b9a:	0002d517          	auipc	a0,0x2d
    80005b9e:	b5e50513          	addi	a0,a0,-1186 # 800326f8 <__func__.0+0x310>
    80005ba2:	123290ef          	jal	8002f4c4 <printf>
    80005ba6:	00056797          	auipc	a5,0x56
    80005baa:	46b7c783          	lbu	a5,1131(a5) # 8005c011 <excpt+0x1>
    80005bae:	c789                	beqz	a5,80005bb8 <virtual_instruction_7+0x1d2>
    80005bb0:	6498                	ld	a4,8(s1)
    80005bb2:	47d9                	li	a5,22
    80005bb4:	00f70c63          	beq	a4,a5,80005bcc <virtual_instruction_7+0x1e6>
    80005bb8:	0002d517          	auipc	a0,0x2d
    80005bbc:	b4850513          	addi	a0,a0,-1208 # 80032700 <__func__.0+0x318>
    80005bc0:	105290ef          	jal	8002f4c4 <printf>
    80005bc4:	02900513          	li	a0,41
    80005bc8:	5ea280ef          	jal	8002e1b2 <putchar>
    80005bcc:	4529                	li	a0,10
    80005bce:	5e4280ef          	jal	8002e1b2 <putchar>
    80005bd2:	c801                	beqz	s0,80005be2 <virtual_instruction_7+0x1fc>
    80005bd4:	00056797          	auipc	a5,0x56
    80005bd8:	43d7c783          	lbu	a5,1085(a5) # 8005c011 <excpt+0x1>
    80005bdc:	4401                	li	s0,0
    80005bde:	44079a63          	bnez	a5,80006032 <virtual_instruction_7+0x64c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005be2:	4501                	li	a0,0
    80005be4:	b30fb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005be8:	a30fb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80005bec:	4781                	li	a5,0
    80005bee:	6807c7f3          	.insn	4, 0x6807c7f3
     tmp = hlvw(0);

    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005bf2:	08c00593          	li	a1,140
    80005bf6:	0002e617          	auipc	a2,0x2e
    80005bfa:	b8a60613          	addi	a2,a2,-1142 # 80033780 <__func__.0+0x1398>
    80005bfe:	0002d517          	auipc	a0,0x2d
    80005c02:	ae250513          	addi	a0,a0,-1310 # 800326e0 <__func__.0+0x2f8>
    80005c06:	0bf290ef          	jal	8002f4c4 <printf>
    80005c0a:	00056797          	auipc	a5,0x56
    80005c0e:	4077c783          	lbu	a5,1031(a5) # 8005c011 <excpt+0x1>
    80005c12:	0002d597          	auipc	a1,0x2d
    80005c16:	aa658593          	addi	a1,a1,-1370 # 800326b8 <__func__.0+0x2d0>
    80005c1a:	cf89                	beqz	a5,80005c34 <virtual_instruction_7+0x24e>
    80005c1c:	6498                	ld	a4,8(s1)
    80005c1e:	47d9                	li	a5,22
    80005c20:	0002d597          	auipc	a1,0x2d
    80005c24:	a8858593          	addi	a1,a1,-1400 # 800326a8 <__func__.0+0x2c0>
    80005c28:	00f70663          	beq	a4,a5,80005c34 <virtual_instruction_7+0x24e>
    80005c2c:	0002d597          	auipc	a1,0x2d
    80005c30:	a8c58593          	addi	a1,a1,-1396 # 800326b8 <__func__.0+0x2d0>
    80005c34:	0002d517          	auipc	a0,0x2d
    80005c38:	ac450513          	addi	a0,a0,-1340 # 800326f8 <__func__.0+0x310>
    80005c3c:	089290ef          	jal	8002f4c4 <printf>
    80005c40:	00056797          	auipc	a5,0x56
    80005c44:	3d17c783          	lbu	a5,977(a5) # 8005c011 <excpt+0x1>
    80005c48:	c789                	beqz	a5,80005c52 <virtual_instruction_7+0x26c>
    80005c4a:	6498                	ld	a4,8(s1)
    80005c4c:	47d9                	li	a5,22
    80005c4e:	00f70c63          	beq	a4,a5,80005c66 <virtual_instruction_7+0x280>
    80005c52:	0002d517          	auipc	a0,0x2d
    80005c56:	aae50513          	addi	a0,a0,-1362 # 80032700 <__func__.0+0x318>
    80005c5a:	06b290ef          	jal	8002f4c4 <printf>
    80005c5e:	02900513          	li	a0,41
    80005c62:	550280ef          	jal	8002e1b2 <putchar>
    80005c66:	4529                	li	a0,10
    80005c68:	54a280ef          	jal	8002e1b2 <putchar>
    80005c6c:	c801                	beqz	s0,80005c7c <virtual_instruction_7+0x296>
    80005c6e:	00056797          	auipc	a5,0x56
    80005c72:	3a37c783          	lbu	a5,931(a5) # 8005c011 <excpt+0x1>
    80005c76:	4401                	li	s0,0
    80005c78:	3a079863          	bnez	a5,80006028 <virtual_instruction_7+0x642>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005c7c:	4501                	li	a0,0
    80005c7e:	a96fb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005c82:	996fb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80005c86:	4781                	li	a5,0
    80005c88:	6c07c7f3          	.insn	4, 0x6c07c7f3
     tmp = hlvd(0);

    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80005c8c:	08c00593          	li	a1,140
    80005c90:	0002e617          	auipc	a2,0x2e
    80005c94:	b2060613          	addi	a2,a2,-1248 # 800337b0 <__func__.0+0x13c8>
    80005c98:	0002d517          	auipc	a0,0x2d
    80005c9c:	a4850513          	addi	a0,a0,-1464 # 800326e0 <__func__.0+0x2f8>
    80005ca0:	025290ef          	jal	8002f4c4 <printf>
    80005ca4:	00056797          	auipc	a5,0x56
    80005ca8:	36d7c783          	lbu	a5,877(a5) # 8005c011 <excpt+0x1>
    80005cac:	0002d597          	auipc	a1,0x2d
    80005cb0:	a0c58593          	addi	a1,a1,-1524 # 800326b8 <__func__.0+0x2d0>
    80005cb4:	cf89                	beqz	a5,80005cce <virtual_instruction_7+0x2e8>
    80005cb6:	6498                	ld	a4,8(s1)
    80005cb8:	47d9                	li	a5,22
    80005cba:	0002d597          	auipc	a1,0x2d
    80005cbe:	9ee58593          	addi	a1,a1,-1554 # 800326a8 <__func__.0+0x2c0>
    80005cc2:	00f70663          	beq	a4,a5,80005cce <virtual_instruction_7+0x2e8>
    80005cc6:	0002d597          	auipc	a1,0x2d
    80005cca:	9f258593          	addi	a1,a1,-1550 # 800326b8 <__func__.0+0x2d0>
    80005cce:	0002d517          	auipc	a0,0x2d
    80005cd2:	a2a50513          	addi	a0,a0,-1494 # 800326f8 <__func__.0+0x310>
    80005cd6:	7ee290ef          	jal	8002f4c4 <printf>
    80005cda:	00056797          	auipc	a5,0x56
    80005cde:	3377c783          	lbu	a5,823(a5) # 8005c011 <excpt+0x1>
    80005ce2:	c789                	beqz	a5,80005cec <virtual_instruction_7+0x306>
    80005ce4:	6498                	ld	a4,8(s1)
    80005ce6:	47d9                	li	a5,22
    80005ce8:	00f70c63          	beq	a4,a5,80005d00 <virtual_instruction_7+0x31a>
    80005cec:	0002d517          	auipc	a0,0x2d
    80005cf0:	a1450513          	addi	a0,a0,-1516 # 80032700 <__func__.0+0x318>
    80005cf4:	7d0290ef          	jal	8002f4c4 <printf>
    80005cf8:	02900513          	li	a0,41
    80005cfc:	4b6280ef          	jal	8002e1b2 <putchar>
    80005d00:	4529                	li	a0,10
    80005d02:	4b0280ef          	jal	8002e1b2 <putchar>
    80005d06:	c801                	beqz	s0,80005d16 <virtual_instruction_7+0x330>
    80005d08:	00056797          	auipc	a5,0x56
    80005d0c:	3097c783          	lbu	a5,777(a5) # 8005c011 <excpt+0x1>
    80005d10:	4401                	li	s0,0
    80005d12:	32079a63          	bnez	a5,80006046 <virtual_instruction_7+0x660>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005d16:	4501                	li	a0,0
    80005d18:	9fcfb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005d1c:	8fcfb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80005d20:	37ab77b7          	lui	a5,0x37ab7
    80005d24:	078a                	slli	a5,a5,0x2
    80005d26:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005d2a:	4701                	li	a4,0
    80005d2c:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005d30:	648c                	ld	a1,8(s1)
    80005d32:	0002d517          	auipc	a0,0x2d
    80005d36:	51650513          	addi	a0,a0,1302 # 80033248 <__func__.0+0xe60>
    80005d3a:	78a290ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005d3e:	08c00593          	li	a1,140
    80005d42:	0002e617          	auipc	a2,0x2e
    80005d46:	a9e60613          	addi	a2,a2,-1378 # 800337e0 <__func__.0+0x13f8>
    80005d4a:	0002d517          	auipc	a0,0x2d
    80005d4e:	99650513          	addi	a0,a0,-1642 # 800326e0 <__func__.0+0x2f8>
    80005d52:	772290ef          	jal	8002f4c4 <printf>
    80005d56:	00056797          	auipc	a5,0x56
    80005d5a:	2bb7c783          	lbu	a5,699(a5) # 8005c011 <excpt+0x1>
    80005d5e:	0002d597          	auipc	a1,0x2d
    80005d62:	95a58593          	addi	a1,a1,-1702 # 800326b8 <__func__.0+0x2d0>
    80005d66:	cf89                	beqz	a5,80005d80 <virtual_instruction_7+0x39a>
    80005d68:	6498                	ld	a4,8(s1)
    80005d6a:	47d9                	li	a5,22
    80005d6c:	0002d597          	auipc	a1,0x2d
    80005d70:	93c58593          	addi	a1,a1,-1732 # 800326a8 <__func__.0+0x2c0>
    80005d74:	00f70663          	beq	a4,a5,80005d80 <virtual_instruction_7+0x39a>
    80005d78:	0002d597          	auipc	a1,0x2d
    80005d7c:	94058593          	addi	a1,a1,-1728 # 800326b8 <__func__.0+0x2d0>
    80005d80:	0002d517          	auipc	a0,0x2d
    80005d84:	97850513          	addi	a0,a0,-1672 # 800326f8 <__func__.0+0x310>
    80005d88:	73c290ef          	jal	8002f4c4 <printf>
    80005d8c:	00056797          	auipc	a5,0x56
    80005d90:	2857c783          	lbu	a5,645(a5) # 8005c011 <excpt+0x1>
    80005d94:	c789                	beqz	a5,80005d9e <virtual_instruction_7+0x3b8>
    80005d96:	6498                	ld	a4,8(s1)
    80005d98:	47d9                	li	a5,22
    80005d9a:	00f70c63          	beq	a4,a5,80005db2 <virtual_instruction_7+0x3cc>
    80005d9e:	0002d517          	auipc	a0,0x2d
    80005da2:	96250513          	addi	a0,a0,-1694 # 80032700 <__func__.0+0x318>
    80005da6:	71e290ef          	jal	8002f4c4 <printf>
    80005daa:	02900513          	li	a0,41
    80005dae:	404280ef          	jal	8002e1b2 <putchar>
    80005db2:	4529                	li	a0,10
    80005db4:	3fe280ef          	jal	8002e1b2 <putchar>
    80005db8:	c801                	beqz	s0,80005dc8 <virtual_instruction_7+0x3e2>
    80005dba:	00056797          	auipc	a5,0x56
    80005dbe:	2577c783          	lbu	a5,599(a5) # 8005c011 <excpt+0x1>
    80005dc2:	4401                	li	s0,0
    80005dc4:	26079c63          	bnez	a5,8000603c <virtual_instruction_7+0x656>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005dc8:	4501                	li	a0,0
    80005dca:	94afb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005dce:	84afb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80005dd2:	37ab77b7          	lui	a5,0x37ab7
    80005dd6:	078a                	slli	a5,a5,0x2
    80005dd8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005ddc:	4701                	li	a4,0
    80005dde:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005de2:	648c                	ld	a1,8(s1)
    80005de4:	0002d517          	auipc	a0,0x2d
    80005de8:	46450513          	addi	a0,a0,1124 # 80033248 <__func__.0+0xe60>
    80005dec:	6d8290ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005df0:	08c00593          	li	a1,140
    80005df4:	0002e617          	auipc	a2,0x2e
    80005df8:	9ec60613          	addi	a2,a2,-1556 # 800337e0 <__func__.0+0x13f8>
    80005dfc:	0002d517          	auipc	a0,0x2d
    80005e00:	8e450513          	addi	a0,a0,-1820 # 800326e0 <__func__.0+0x2f8>
    80005e04:	6c0290ef          	jal	8002f4c4 <printf>
    80005e08:	00056797          	auipc	a5,0x56
    80005e0c:	2097c783          	lbu	a5,521(a5) # 8005c011 <excpt+0x1>
    80005e10:	0002d597          	auipc	a1,0x2d
    80005e14:	8a858593          	addi	a1,a1,-1880 # 800326b8 <__func__.0+0x2d0>
    80005e18:	cf89                	beqz	a5,80005e32 <virtual_instruction_7+0x44c>
    80005e1a:	6498                	ld	a4,8(s1)
    80005e1c:	47d9                	li	a5,22
    80005e1e:	0002d597          	auipc	a1,0x2d
    80005e22:	88a58593          	addi	a1,a1,-1910 # 800326a8 <__func__.0+0x2c0>
    80005e26:	00f70663          	beq	a4,a5,80005e32 <virtual_instruction_7+0x44c>
    80005e2a:	0002d597          	auipc	a1,0x2d
    80005e2e:	88e58593          	addi	a1,a1,-1906 # 800326b8 <__func__.0+0x2d0>
    80005e32:	0002d517          	auipc	a0,0x2d
    80005e36:	8c650513          	addi	a0,a0,-1850 # 800326f8 <__func__.0+0x310>
    80005e3a:	68a290ef          	jal	8002f4c4 <printf>
    80005e3e:	00056797          	auipc	a5,0x56
    80005e42:	1d37c783          	lbu	a5,467(a5) # 8005c011 <excpt+0x1>
    80005e46:	c789                	beqz	a5,80005e50 <virtual_instruction_7+0x46a>
    80005e48:	6498                	ld	a4,8(s1)
    80005e4a:	47d9                	li	a5,22
    80005e4c:	00f70c63          	beq	a4,a5,80005e64 <virtual_instruction_7+0x47e>
    80005e50:	0002d517          	auipc	a0,0x2d
    80005e54:	8b050513          	addi	a0,a0,-1872 # 80032700 <__func__.0+0x318>
    80005e58:	66c290ef          	jal	8002f4c4 <printf>
    80005e5c:	02900513          	li	a0,41
    80005e60:	352280ef          	jal	8002e1b2 <putchar>
    80005e64:	4529                	li	a0,10
    80005e66:	34c280ef          	jal	8002e1b2 <putchar>
    80005e6a:	c801                	beqz	s0,80005e7a <virtual_instruction_7+0x494>
    80005e6c:	00056797          	auipc	a5,0x56
    80005e70:	1a57c783          	lbu	a5,421(a5) # 8005c011 <excpt+0x1>
    80005e74:	4401                	li	s0,0
    80005e76:	1e079263          	bnez	a5,8000605a <virtual_instruction_7+0x674>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005e7a:	4501                	li	a0,0
    80005e7c:	898fb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005e80:	f99fa0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80005e84:	37ab77b7          	lui	a5,0x37ab7
    80005e88:	078a                	slli	a5,a5,0x2
    80005e8a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005e8e:	4701                	li	a4,0
    80005e90:	6af74073          	.insn	4, 0x6af74073
    hsvw(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005e94:	648c                	ld	a1,8(s1)
    80005e96:	0002d517          	auipc	a0,0x2d
    80005e9a:	3b250513          	addi	a0,a0,946 # 80033248 <__func__.0+0xe60>
    80005e9e:	626290ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005ea2:	08c00593          	li	a1,140
    80005ea6:	0002e617          	auipc	a2,0x2e
    80005eaa:	93a60613          	addi	a2,a2,-1734 # 800337e0 <__func__.0+0x13f8>
    80005eae:	0002d517          	auipc	a0,0x2d
    80005eb2:	83250513          	addi	a0,a0,-1998 # 800326e0 <__func__.0+0x2f8>
    80005eb6:	60e290ef          	jal	8002f4c4 <printf>
    80005eba:	00056797          	auipc	a5,0x56
    80005ebe:	1577c783          	lbu	a5,343(a5) # 8005c011 <excpt+0x1>
    80005ec2:	0002c597          	auipc	a1,0x2c
    80005ec6:	7f658593          	addi	a1,a1,2038 # 800326b8 <__func__.0+0x2d0>
    80005eca:	cf89                	beqz	a5,80005ee4 <virtual_instruction_7+0x4fe>
    80005ecc:	6498                	ld	a4,8(s1)
    80005ece:	47d9                	li	a5,22
    80005ed0:	0002c597          	auipc	a1,0x2c
    80005ed4:	7d858593          	addi	a1,a1,2008 # 800326a8 <__func__.0+0x2c0>
    80005ed8:	00f70663          	beq	a4,a5,80005ee4 <virtual_instruction_7+0x4fe>
    80005edc:	0002c597          	auipc	a1,0x2c
    80005ee0:	7dc58593          	addi	a1,a1,2012 # 800326b8 <__func__.0+0x2d0>
    80005ee4:	0002d517          	auipc	a0,0x2d
    80005ee8:	81450513          	addi	a0,a0,-2028 # 800326f8 <__func__.0+0x310>
    80005eec:	5d8290ef          	jal	8002f4c4 <printf>
    80005ef0:	00056797          	auipc	a5,0x56
    80005ef4:	1217c783          	lbu	a5,289(a5) # 8005c011 <excpt+0x1>
    80005ef8:	c789                	beqz	a5,80005f02 <virtual_instruction_7+0x51c>
    80005efa:	6498                	ld	a4,8(s1)
    80005efc:	47d9                	li	a5,22
    80005efe:	00f70c63          	beq	a4,a5,80005f16 <virtual_instruction_7+0x530>
    80005f02:	0002c517          	auipc	a0,0x2c
    80005f06:	7fe50513          	addi	a0,a0,2046 # 80032700 <__func__.0+0x318>
    80005f0a:	5ba290ef          	jal	8002f4c4 <printf>
    80005f0e:	02900513          	li	a0,41
    80005f12:	2a0280ef          	jal	8002e1b2 <putchar>
    80005f16:	4529                	li	a0,10
    80005f18:	29a280ef          	jal	8002e1b2 <putchar>
    80005f1c:	c801                	beqz	s0,80005f2c <virtual_instruction_7+0x546>
    80005f1e:	00056797          	auipc	a5,0x56
    80005f22:	0f37c783          	lbu	a5,243(a5) # 8005c011 <excpt+0x1>
    80005f26:	4401                	li	s0,0
    80005f28:	12079463          	bnez	a5,80006050 <virtual_instruction_7+0x66a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005f2c:	4501                	li	a0,0
    80005f2e:	fe7fa0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005f32:	ee7fa0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80005f36:	37ab77b7          	lui	a5,0x37ab7
    80005f3a:	078a                	slli	a5,a5,0x2
    80005f3c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005f40:	4701                	li	a4,0
    80005f42:	66f74073          	.insn	4, 0x66f74073
    hsvh(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005f46:	648c                	ld	a1,8(s1)
    80005f48:	0002d517          	auipc	a0,0x2d
    80005f4c:	30050513          	addi	a0,a0,768 # 80033248 <__func__.0+0xe60>
    80005f50:	574290ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005f54:	08c00593          	li	a1,140
    80005f58:	0002e617          	auipc	a2,0x2e
    80005f5c:	88860613          	addi	a2,a2,-1912 # 800337e0 <__func__.0+0x13f8>
    80005f60:	0002c517          	auipc	a0,0x2c
    80005f64:	78050513          	addi	a0,a0,1920 # 800326e0 <__func__.0+0x2f8>
    80005f68:	55c290ef          	jal	8002f4c4 <printf>
    80005f6c:	00056797          	auipc	a5,0x56
    80005f70:	0a57c783          	lbu	a5,165(a5) # 8005c011 <excpt+0x1>
    80005f74:	0002c597          	auipc	a1,0x2c
    80005f78:	74458593          	addi	a1,a1,1860 # 800326b8 <__func__.0+0x2d0>
    80005f7c:	cf89                	beqz	a5,80005f96 <virtual_instruction_7+0x5b0>
    80005f7e:	6498                	ld	a4,8(s1)
    80005f80:	47d9                	li	a5,22
    80005f82:	0002c597          	auipc	a1,0x2c
    80005f86:	72658593          	addi	a1,a1,1830 # 800326a8 <__func__.0+0x2c0>
    80005f8a:	00f70663          	beq	a4,a5,80005f96 <virtual_instruction_7+0x5b0>
    80005f8e:	0002c597          	auipc	a1,0x2c
    80005f92:	72a58593          	addi	a1,a1,1834 # 800326b8 <__func__.0+0x2d0>
    80005f96:	0002c517          	auipc	a0,0x2c
    80005f9a:	76250513          	addi	a0,a0,1890 # 800326f8 <__func__.0+0x310>
    80005f9e:	526290ef          	jal	8002f4c4 <printf>
    80005fa2:	00056797          	auipc	a5,0x56
    80005fa6:	06f7c783          	lbu	a5,111(a5) # 8005c011 <excpt+0x1>
    80005faa:	c789                	beqz	a5,80005fb4 <virtual_instruction_7+0x5ce>
    80005fac:	6498                	ld	a4,8(s1)
    80005fae:	47d9                	li	a5,22
    80005fb0:	00f70c63          	beq	a4,a5,80005fc8 <virtual_instruction_7+0x5e2>
    80005fb4:	0002c517          	auipc	a0,0x2c
    80005fb8:	74c50513          	addi	a0,a0,1868 # 80032700 <__func__.0+0x318>
    80005fbc:	508290ef          	jal	8002f4c4 <printf>
    80005fc0:	02900513          	li	a0,41
    80005fc4:	1ee280ef          	jal	8002e1b2 <putchar>
    80005fc8:	4529                	li	a0,10
    80005fca:	1e8280ef          	jal	8002e1b2 <putchar>
    80005fce:	c015                	beqz	s0,80005ff2 <virtual_instruction_7+0x60c>
    80005fd0:	00056417          	auipc	s0,0x56
    80005fd4:	04144403          	lbu	s0,65(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    80005fd8:	0002c597          	auipc	a1,0x2c
    80005fdc:	6e058593          	addi	a1,a1,1760 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005fe0:	cc11                	beqz	s0,80005ffc <virtual_instruction_7+0x616>
    80005fe2:	6498                	ld	a4,8(s1)
    80005fe4:	47d9                	li	a5,22
    TEST_END();
    80005fe6:	0002c597          	auipc	a1,0x2c
    80005fea:	6c258593          	addi	a1,a1,1730 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005fee:	00f70763          	beq	a4,a5,80005ffc <virtual_instruction_7+0x616>
    80005ff2:	4401                	li	s0,0
    TEST_END();
    80005ff4:	0002c597          	auipc	a1,0x2c
    80005ff8:	6c458593          	addi	a1,a1,1732 # 800326b8 <__func__.0+0x2d0>
    80005ffc:	0002c517          	auipc	a0,0x2c
    80006000:	76450513          	addi	a0,a0,1892 # 80032760 <__func__.0+0x378>
    80006004:	4c0290ef          	jal	8002f4c4 <printf>
    80006008:	4511                	li	a0,4
    8000600a:	f0bfa0ef          	jal	80000f14 <goto_priv>
    8000600e:	f68fb0ef          	jal	80001776 <reset_state>
}
    80006012:	60e2                	ld	ra,24(sp)
    80006014:	8522                	mv	a0,s0
    80006016:	6442                	ld	s0,16(sp)
    80006018:	64a2                	ld	s1,8(sp)
    8000601a:	6105                	addi	sp,sp,32
    8000601c:	8082                	ret
    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    8000601e:	6480                	ld	s0,8(s1)
    80006020:	1429                	addi	s0,s0,-22
    80006022:	00143413          	seqz	s0,s0
    80006026:	b60d                	j	80005b48 <virtual_instruction_7+0x162>
    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80006028:	6480                	ld	s0,8(s1)
    8000602a:	1429                	addi	s0,s0,-22
    8000602c:	00143413          	seqz	s0,s0
    80006030:	b1b1                	j	80005c7c <virtual_instruction_7+0x296>
    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80006032:	6480                	ld	s0,8(s1)
    80006034:	1429                	addi	s0,s0,-22
    80006036:	00143413          	seqz	s0,s0
    8000603a:	b665                	j	80005be2 <virtual_instruction_7+0x1fc>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000603c:	6480                	ld	s0,8(s1)
    8000603e:	1429                	addi	s0,s0,-22
    80006040:	00143413          	seqz	s0,s0
    80006044:	b351                	j	80005dc8 <virtual_instruction_7+0x3e2>
    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80006046:	6480                	ld	s0,8(s1)
    80006048:	1429                	addi	s0,s0,-22
    8000604a:	00143413          	seqz	s0,s0
    8000604e:	b1e1                	j	80005d16 <virtual_instruction_7+0x330>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006050:	6480                	ld	s0,8(s1)
    80006052:	1429                	addi	s0,s0,-22
    80006054:	00143413          	seqz	s0,s0
    80006058:	bdd1                	j	80005f2c <virtual_instruction_7+0x546>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000605a:	6480                	ld	s0,8(s1)
    8000605c:	1429                	addi	s0,s0,-22
    8000605e:	00143413          	seqz	s0,s0
    80006062:	bd21                	j	80005e7a <virtual_instruction_7+0x494>

0000000080006064 <virtual_instruction_8>:

    ////////////////////////////////////////////////////////////////////////
//在mstatus.TW=0  时执行WFI   (即使允许执行WFI指令),或者执行S级监管级指令 (SRET或者SFENCE)   , 引发虚拟异常(在虚拟用户模式下，软件不应该 由执行这些监管模式指令的权限)
bool virtual_instruction_8() {
    80006064:	1101                	addi	sp,sp,-32

    TEST_START();
    80006066:	0002a597          	auipc	a1,0x2a
    8000606a:	50a58593          	addi	a1,a1,1290 # 80030570 <__func__.4>
    8000606e:	0002c517          	auipc	a0,0x2c
    80006072:	65a50513          	addi	a0,a0,1626 # 800326c8 <__func__.0+0x2e0>
bool virtual_instruction_8() {
    80006076:	ec06                	sd	ra,24(sp)
    80006078:	e822                	sd	s0,16(sp)
    8000607a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000607c:	448290ef          	jal	8002f4c4 <printf>
    80006080:	4529                	li	a0,10
    80006082:	130280ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    80006086:	4511                	li	a0,4
    80006088:	e8dfa0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    8000608c:	004007b7          	lui	a5,0x400
    80006090:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80006094:	002007b7          	lui	a5,0x200
    80006098:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    8000609c:	4501                	li	a0,0
    8000609e:	e77fa0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800060a2:	d77fa0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    800060a6:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    800060aa:	08c00593          	li	a1,140
    800060ae:	0002d617          	auipc	a2,0x2d
    800060b2:	76260613          	addi	a2,a2,1890 # 80033810 <__func__.0+0x1428>
    800060b6:	0002c517          	auipc	a0,0x2c
    800060ba:	62a50513          	addi	a0,a0,1578 # 800326e0 <__func__.0+0x2f8>
    800060be:	406290ef          	jal	8002f4c4 <printf>
    800060c2:	00056797          	auipc	a5,0x56
    800060c6:	f4f7c783          	lbu	a5,-177(a5) # 8005c011 <excpt+0x1>
    800060ca:	00056497          	auipc	s1,0x56
    800060ce:	f4648493          	addi	s1,s1,-186 # 8005c010 <excpt>
    800060d2:	0002c597          	auipc	a1,0x2c
    800060d6:	5e658593          	addi	a1,a1,1510 # 800326b8 <__func__.0+0x2d0>
    800060da:	cf89                	beqz	a5,800060f4 <virtual_instruction_8+0x90>
    800060dc:	6498                	ld	a4,8(s1)
    800060de:	47d9                	li	a5,22
    800060e0:	0002c597          	auipc	a1,0x2c
    800060e4:	5c858593          	addi	a1,a1,1480 # 800326a8 <__func__.0+0x2c0>
    800060e8:	00f70663          	beq	a4,a5,800060f4 <virtual_instruction_8+0x90>
    800060ec:	0002c597          	auipc	a1,0x2c
    800060f0:	5cc58593          	addi	a1,a1,1484 # 800326b8 <__func__.0+0x2d0>
    800060f4:	0002c517          	auipc	a0,0x2c
    800060f8:	60450513          	addi	a0,a0,1540 # 800326f8 <__func__.0+0x310>
    800060fc:	3c8290ef          	jal	8002f4c4 <printf>
    80006100:	00056797          	auipc	a5,0x56
    80006104:	f117c783          	lbu	a5,-239(a5) # 8005c011 <excpt+0x1>
    80006108:	c789                	beqz	a5,80006112 <virtual_instruction_8+0xae>
    8000610a:	6498                	ld	a4,8(s1)
    8000610c:	47d9                	li	a5,22
    8000610e:	00f70c63          	beq	a4,a5,80006126 <virtual_instruction_8+0xc2>
    80006112:	0002c517          	auipc	a0,0x2c
    80006116:	5ee50513          	addi	a0,a0,1518 # 80032700 <__func__.0+0x318>
    8000611a:	3aa290ef          	jal	8002f4c4 <printf>
    8000611e:	02900513          	li	a0,41
    80006122:	090280ef          	jal	8002e1b2 <putchar>
    80006126:	4529                	li	a0,10
    80006128:	08a280ef          	jal	8002e1b2 <putchar>
    8000612c:	00056417          	auipc	s0,0x56
    80006130:	ee544403          	lbu	s0,-283(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
 
    TEST_END();
    80006134:	0002c597          	auipc	a1,0x2c
    80006138:	58458593          	addi	a1,a1,1412 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    8000613c:	cc11                	beqz	s0,80006158 <virtual_instruction_8+0xf4>
    8000613e:	6498                	ld	a4,8(s1)
    80006140:	47d9                	li	a5,22
    TEST_END();
    80006142:	0002c597          	auipc	a1,0x2c
    80006146:	56658593          	addi	a1,a1,1382 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    8000614a:	00f70763          	beq	a4,a5,80006158 <virtual_instruction_8+0xf4>
    8000614e:	4401                	li	s0,0
    TEST_END();
    80006150:	0002c597          	auipc	a1,0x2c
    80006154:	56858593          	addi	a1,a1,1384 # 800326b8 <__func__.0+0x2d0>
    80006158:	0002c517          	auipc	a0,0x2c
    8000615c:	60850513          	addi	a0,a0,1544 # 80032760 <__func__.0+0x378>
    80006160:	364290ef          	jal	8002f4c4 <printf>
    80006164:	4511                	li	a0,4
    80006166:	daffa0ef          	jal	80000f14 <goto_priv>
    8000616a:	e0cfb0ef          	jal	80001776 <reset_state>
}
    8000616e:	60e2                	ld	ra,24(sp)
    80006170:	8522                	mv	a0,s0
    80006172:	6442                	ld	s0,16(sp)
    80006174:	64a2                	ld	s1,8(sp)
    80006176:	6105                	addi	sp,sp,32
    80006178:	8082                	ret

000000008000617a <virtual_instruction_9>:
bool virtual_instruction_9() {
    8000617a:	1101                	addi	sp,sp,-32

    TEST_START();
    8000617c:	0002a597          	auipc	a1,0x2a
    80006180:	40c58593          	addi	a1,a1,1036 # 80030588 <__func__.3>
    80006184:	0002c517          	auipc	a0,0x2c
    80006188:	54450513          	addi	a0,a0,1348 # 800326c8 <__func__.0+0x2e0>
bool virtual_instruction_9() {
    8000618c:	ec06                	sd	ra,24(sp)
    8000618e:	e822                	sd	s0,16(sp)
    80006190:	e426                	sd	s1,8(sp)
    TEST_START();
    80006192:	332290ef          	jal	8002f4c4 <printf>
    80006196:	4529                	li	a0,10
    80006198:	01a280ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8000619c:	4511                	li	a0,4
    8000619e:	d77fa0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800061a2:	002007b7          	lui	a5,0x200
    800061a6:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    800061aa:	4501                	li	a0,0
    800061ac:	d69fa0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800061b0:	c69fa0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile ("sfence.vma \n\t");
    800061b4:	12000073          	sfence.vma
    sfence();
    
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    800061b8:	08c00593          	li	a1,140
    800061bc:	0002d617          	auipc	a2,0x2d
    800061c0:	69c60613          	addi	a2,a2,1692 # 80033858 <__func__.0+0x1470>
    800061c4:	0002c517          	auipc	a0,0x2c
    800061c8:	51c50513          	addi	a0,a0,1308 # 800326e0 <__func__.0+0x2f8>
    800061cc:	2f8290ef          	jal	8002f4c4 <printf>
    800061d0:	00056797          	auipc	a5,0x56
    800061d4:	e417c783          	lbu	a5,-447(a5) # 8005c011 <excpt+0x1>
    800061d8:	00056497          	auipc	s1,0x56
    800061dc:	e3848493          	addi	s1,s1,-456 # 8005c010 <excpt>
    800061e0:	0002c597          	auipc	a1,0x2c
    800061e4:	4d858593          	addi	a1,a1,1240 # 800326b8 <__func__.0+0x2d0>
    800061e8:	cf89                	beqz	a5,80006202 <virtual_instruction_9+0x88>
    800061ea:	6498                	ld	a4,8(s1)
    800061ec:	47d9                	li	a5,22
    800061ee:	0002c597          	auipc	a1,0x2c
    800061f2:	4ba58593          	addi	a1,a1,1210 # 800326a8 <__func__.0+0x2c0>
    800061f6:	00f70663          	beq	a4,a5,80006202 <virtual_instruction_9+0x88>
    800061fa:	0002c597          	auipc	a1,0x2c
    800061fe:	4be58593          	addi	a1,a1,1214 # 800326b8 <__func__.0+0x2d0>
    80006202:	0002c517          	auipc	a0,0x2c
    80006206:	4f650513          	addi	a0,a0,1270 # 800326f8 <__func__.0+0x310>
    8000620a:	2ba290ef          	jal	8002f4c4 <printf>
    8000620e:	00056797          	auipc	a5,0x56
    80006212:	e037c783          	lbu	a5,-509(a5) # 8005c011 <excpt+0x1>
    80006216:	c789                	beqz	a5,80006220 <virtual_instruction_9+0xa6>
    80006218:	6498                	ld	a4,8(s1)
    8000621a:	47d9                	li	a5,22
    8000621c:	00f70c63          	beq	a4,a5,80006234 <virtual_instruction_9+0xba>
    80006220:	0002c517          	auipc	a0,0x2c
    80006224:	4e050513          	addi	a0,a0,1248 # 80032700 <__func__.0+0x318>
    80006228:	29c290ef          	jal	8002f4c4 <printf>
    8000622c:	02900513          	li	a0,41
    80006230:	783270ef          	jal	8002e1b2 <putchar>
    80006234:	4529                	li	a0,10
    80006236:	77d270ef          	jal	8002e1b2 <putchar>
    8000623a:	00056417          	auipc	s0,0x56
    8000623e:	dd744403          	lbu	s0,-553(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    80006242:	0002c597          	auipc	a1,0x2c
    80006246:	47658593          	addi	a1,a1,1142 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    8000624a:	cc11                	beqz	s0,80006266 <virtual_instruction_9+0xec>
    8000624c:	6498                	ld	a4,8(s1)
    8000624e:	47d9                	li	a5,22
    TEST_END();
    80006250:	0002c597          	auipc	a1,0x2c
    80006254:	45858593          	addi	a1,a1,1112 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80006258:	00f70763          	beq	a4,a5,80006266 <virtual_instruction_9+0xec>
    8000625c:	4401                	li	s0,0
    TEST_END();
    8000625e:	0002c597          	auipc	a1,0x2c
    80006262:	45a58593          	addi	a1,a1,1114 # 800326b8 <__func__.0+0x2d0>
    80006266:	0002c517          	auipc	a0,0x2c
    8000626a:	4fa50513          	addi	a0,a0,1274 # 80032760 <__func__.0+0x378>
    8000626e:	256290ef          	jal	8002f4c4 <printf>
    80006272:	4511                	li	a0,4
    80006274:	ca1fa0ef          	jal	80000f14 <goto_priv>
    80006278:	cfefb0ef          	jal	80001776 <reset_state>
}
    8000627c:	60e2                	ld	ra,24(sp)
    8000627e:	8522                	mv	a0,s0
    80006280:	6442                	ld	s0,16(sp)
    80006282:	64a2                	ld	s1,8(sp)
    80006284:	6105                	addi	sp,sp,32
    80006286:	8082                	ret

0000000080006288 <virtual_instruction_10>:
bool virtual_instruction_10() {
    80006288:	1101                	addi	sp,sp,-32

    TEST_START();
    8000628a:	0002a597          	auipc	a1,0x2a
    8000628e:	31658593          	addi	a1,a1,790 # 800305a0 <__func__.2>
    80006292:	0002c517          	auipc	a0,0x2c
    80006296:	43650513          	addi	a0,a0,1078 # 800326c8 <__func__.0+0x2e0>
bool virtual_instruction_10() {
    8000629a:	ec06                	sd	ra,24(sp)
    8000629c:	e822                	sd	s0,16(sp)
    8000629e:	e426                	sd	s1,8(sp)
    TEST_START();
    800062a0:	224290ef          	jal	8002f4c4 <printf>
    800062a4:	4529                	li	a0,10
    800062a6:	70d270ef          	jal	8002e1b2 <putchar>


    goto_priv(PRIV_M);
    800062aa:	4511                	li	a0,4
    800062ac:	c69fa0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    800062b0:	002007b7          	lui	a5,0x200
    800062b4:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    800062b8:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    800062bc:	4501                	li	a0,0
    800062be:	c57fa0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800062c2:	b57fa0ef          	jal	80000e18 <test_setup_except_function>
        :: "r"(value), "r"(addr) : "memory");
    return value;
}

static inline void wfi() {
    asm ("wfi" ::: "memory");
    800062c6:	10500073          	wfi
    wfi();
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800062ca:	08c00593          	li	a1,140
    800062ce:	0002d617          	auipc	a2,0x2d
    800062d2:	5d260613          	addi	a2,a2,1490 # 800338a0 <__func__.0+0x14b8>
    800062d6:	0002c517          	auipc	a0,0x2c
    800062da:	40a50513          	addi	a0,a0,1034 # 800326e0 <__func__.0+0x2f8>
    800062de:	1e6290ef          	jal	8002f4c4 <printf>
    800062e2:	00056797          	auipc	a5,0x56
    800062e6:	d2f7c783          	lbu	a5,-721(a5) # 8005c011 <excpt+0x1>
    800062ea:	00056497          	auipc	s1,0x56
    800062ee:	d2648493          	addi	s1,s1,-730 # 8005c010 <excpt>
    800062f2:	0002c597          	auipc	a1,0x2c
    800062f6:	3c658593          	addi	a1,a1,966 # 800326b8 <__func__.0+0x2d0>
    800062fa:	cf89                	beqz	a5,80006314 <virtual_instruction_10+0x8c>
    800062fc:	6498                	ld	a4,8(s1)
    800062fe:	47d9                	li	a5,22
    80006300:	0002c597          	auipc	a1,0x2c
    80006304:	3a858593          	addi	a1,a1,936 # 800326a8 <__func__.0+0x2c0>
    80006308:	00f70663          	beq	a4,a5,80006314 <virtual_instruction_10+0x8c>
    8000630c:	0002c597          	auipc	a1,0x2c
    80006310:	3ac58593          	addi	a1,a1,940 # 800326b8 <__func__.0+0x2d0>
    80006314:	0002c517          	auipc	a0,0x2c
    80006318:	3e450513          	addi	a0,a0,996 # 800326f8 <__func__.0+0x310>
    8000631c:	1a8290ef          	jal	8002f4c4 <printf>
    80006320:	00056797          	auipc	a5,0x56
    80006324:	cf17c783          	lbu	a5,-783(a5) # 8005c011 <excpt+0x1>
    80006328:	c789                	beqz	a5,80006332 <virtual_instruction_10+0xaa>
    8000632a:	6498                	ld	a4,8(s1)
    8000632c:	47d9                	li	a5,22
    8000632e:	00f70c63          	beq	a4,a5,80006346 <virtual_instruction_10+0xbe>
    80006332:	0002c517          	auipc	a0,0x2c
    80006336:	3ce50513          	addi	a0,a0,974 # 80032700 <__func__.0+0x318>
    8000633a:	18a290ef          	jal	8002f4c4 <printf>
    8000633e:	02900513          	li	a0,41
    80006342:	671270ef          	jal	8002e1b2 <putchar>
    80006346:	4529                	li	a0,10
    80006348:	66b270ef          	jal	8002e1b2 <putchar>
    8000634c:	00056417          	auipc	s0,0x56
    80006350:	cc544403          	lbu	s0,-827(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    80006354:	0002c597          	auipc	a1,0x2c
    80006358:	36458593          	addi	a1,a1,868 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000635c:	cc11                	beqz	s0,80006378 <virtual_instruction_10+0xf0>
    8000635e:	6498                	ld	a4,8(s1)
    80006360:	47d9                	li	a5,22
    TEST_END();
    80006362:	0002c597          	auipc	a1,0x2c
    80006366:	34658593          	addi	a1,a1,838 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000636a:	00f70763          	beq	a4,a5,80006378 <virtual_instruction_10+0xf0>
    8000636e:	4401                	li	s0,0
    TEST_END();
    80006370:	0002c597          	auipc	a1,0x2c
    80006374:	34858593          	addi	a1,a1,840 # 800326b8 <__func__.0+0x2d0>
    80006378:	0002c517          	auipc	a0,0x2c
    8000637c:	3e850513          	addi	a0,a0,1000 # 80032760 <__func__.0+0x378>
    80006380:	144290ef          	jal	8002f4c4 <printf>
    80006384:	4511                	li	a0,4
    80006386:	b8ffa0ef          	jal	80000f14 <goto_priv>
    8000638a:	becfb0ef          	jal	80001776 <reset_state>
}
    8000638e:	60e2                	ld	ra,24(sp)
    80006390:	8522                	mv	a0,s0
    80006392:	6442                	ld	s0,16(sp)
    80006394:	64a2                	ld	s1,8(sp)
    80006396:	6105                	addi	sp,sp,32
    80006398:	8082                	ret

000000008000639a <virtual_instruction_11>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_11() {
    8000639a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8000639c:	0002a597          	auipc	a1,0x2a
    800063a0:	21c58593          	addi	a1,a1,540 # 800305b8 <__func__.1>
    800063a4:	0002c517          	auipc	a0,0x2c
    800063a8:	32450513          	addi	a0,a0,804 # 800326c8 <__func__.0+0x2e0>
bool virtual_instruction_11() {
    800063ac:	ec06                	sd	ra,24(sp)
    800063ae:	e822                	sd	s0,16(sp)
    800063b0:	e426                	sd	s1,8(sp)
    TEST_START();    
    800063b2:	112290ef          	jal	8002f4c4 <printf>
    800063b6:	4529                	li	a0,10
    800063b8:	5fb270ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    800063bc:	4511                	li	a0,4
    800063be:	b57fa0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTVM);
    800063c2:	001007b7          	lui	a5,0x100
    800063c6:	6007b073          	csrc	hstatus,a5
    CSRC(CSR_HSTATUS, MSTATUS_TVM);
    800063ca:	6007b073          	csrc	hstatus,a5
    goto_priv(PRIV_VU);
    800063ce:	4501                	li	a0,0
    800063d0:	b45fa0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800063d4:	a45fa0ef          	jal	80000e18 <test_setup_except_function>
    CSRS(CSR_VSIE,1ULL << 1);
    800063d8:	20416073          	csrsi	vsie,2
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    800063dc:	08c00593          	li	a1,140
    800063e0:	0002d617          	auipc	a2,0x2d
    800063e4:	50860613          	addi	a2,a2,1288 # 800338e8 <__func__.0+0x1500>
    800063e8:	0002c517          	auipc	a0,0x2c
    800063ec:	2f850513          	addi	a0,a0,760 # 800326e0 <__func__.0+0x2f8>
    800063f0:	0d4290ef          	jal	8002f4c4 <printf>
    800063f4:	00056797          	auipc	a5,0x56
    800063f8:	c1d7c783          	lbu	a5,-995(a5) # 8005c011 <excpt+0x1>
    800063fc:	00056497          	auipc	s1,0x56
    80006400:	c1448493          	addi	s1,s1,-1004 # 8005c010 <excpt>
    80006404:	0002c597          	auipc	a1,0x2c
    80006408:	2b458593          	addi	a1,a1,692 # 800326b8 <__func__.0+0x2d0>
    8000640c:	cf89                	beqz	a5,80006426 <virtual_instruction_11+0x8c>
    8000640e:	6498                	ld	a4,8(s1)
    80006410:	47d9                	li	a5,22
    80006412:	0002c597          	auipc	a1,0x2c
    80006416:	29658593          	addi	a1,a1,662 # 800326a8 <__func__.0+0x2c0>
    8000641a:	00f70663          	beq	a4,a5,80006426 <virtual_instruction_11+0x8c>
    8000641e:	0002c597          	auipc	a1,0x2c
    80006422:	29a58593          	addi	a1,a1,666 # 800326b8 <__func__.0+0x2d0>
    80006426:	0002c517          	auipc	a0,0x2c
    8000642a:	2d250513          	addi	a0,a0,722 # 800326f8 <__func__.0+0x310>
    8000642e:	096290ef          	jal	8002f4c4 <printf>
    80006432:	00056797          	auipc	a5,0x56
    80006436:	bdf7c783          	lbu	a5,-1057(a5) # 8005c011 <excpt+0x1>
    8000643a:	c789                	beqz	a5,80006444 <virtual_instruction_11+0xaa>
    8000643c:	6498                	ld	a4,8(s1)
    8000643e:	47d9                	li	a5,22
    80006440:	00f70c63          	beq	a4,a5,80006458 <virtual_instruction_11+0xbe>
    80006444:	0002c517          	auipc	a0,0x2c
    80006448:	2bc50513          	addi	a0,a0,700 # 80032700 <__func__.0+0x318>
    8000644c:	078290ef          	jal	8002f4c4 <printf>
    80006450:	02900513          	li	a0,41
    80006454:	55f270ef          	jal	8002e1b2 <putchar>
    80006458:	4529                	li	a0,10
    8000645a:	559270ef          	jal	8002e1b2 <putchar>
    8000645e:	00056417          	auipc	s0,0x56
    80006462:	bb344403          	lbu	s0,-1101(s0) # 8005c011 <excpt+0x1>
    //     excpt.cause == CAUSE_VRTI
    // );      



    TEST_END(); 
    80006466:	0002c597          	auipc	a1,0x2c
    8000646a:	25258593          	addi	a1,a1,594 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    8000646e:	cc11                	beqz	s0,8000648a <virtual_instruction_11+0xf0>
    80006470:	6498                	ld	a4,8(s1)
    80006472:	47d9                	li	a5,22
    TEST_END(); 
    80006474:	0002c597          	auipc	a1,0x2c
    80006478:	23458593          	addi	a1,a1,564 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    8000647c:	00f70763          	beq	a4,a5,8000648a <virtual_instruction_11+0xf0>
    80006480:	4401                	li	s0,0
    TEST_END(); 
    80006482:	0002c597          	auipc	a1,0x2c
    80006486:	23658593          	addi	a1,a1,566 # 800326b8 <__func__.0+0x2d0>
    8000648a:	0002c517          	auipc	a0,0x2c
    8000648e:	2d650513          	addi	a0,a0,726 # 80032760 <__func__.0+0x378>
    80006492:	032290ef          	jal	8002f4c4 <printf>
    80006496:	4511                	li	a0,4
    80006498:	a7dfa0ef          	jal	80000f14 <goto_priv>
    8000649c:	adafb0ef          	jal	80001776 <reset_state>
}
    800064a0:	60e2                	ld	ra,24(sp)
    800064a2:	8522                	mv	a0,s0
    800064a4:	6442                	ld	s0,16(sp)
    800064a6:	64a2                	ld	s1,8(sp)
    800064a8:	6105                	addi	sp,sp,32
    800064aa:	8082                	ret

00000000800064ac <virtual_instruction_12>:

bool virtual_instruction_12() {
    800064ac:	1101                	addi	sp,sp,-32

    TEST_START();
    800064ae:	0002a597          	auipc	a1,0x2a
    800064b2:	12258593          	addi	a1,a1,290 # 800305d0 <__func__.0>
    800064b6:	0002c517          	auipc	a0,0x2c
    800064ba:	21250513          	addi	a0,a0,530 # 800326c8 <__func__.0+0x2e0>
bool virtual_instruction_12() {
    800064be:	ec06                	sd	ra,24(sp)
    800064c0:	e822                	sd	s0,16(sp)
    800064c2:	e426                	sd	s1,8(sp)
    TEST_START();
    800064c4:	000290ef          	jal	8002f4c4 <printf>
    800064c8:	4529                	li	a0,10
    800064ca:	4e9270ef          	jal	8002e1b2 <putchar>


    goto_priv(PRIV_VU);
    800064ce:	4501                	li	a0,0
    800064d0:	a45fa0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800064d4:	945fa0ef          	jal	80000e18 <test_setup_except_function>

    CSRR(CSR_SATP);
    800064d8:	180027f3          	csrr	a5,satp
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    800064dc:	08c00593          	li	a1,140
    800064e0:	0002d617          	auipc	a2,0x2d
    800064e4:	46860613          	addi	a2,a2,1128 # 80033948 <__func__.0+0x1560>
    800064e8:	0002c517          	auipc	a0,0x2c
    800064ec:	1f850513          	addi	a0,a0,504 # 800326e0 <__func__.0+0x2f8>
    800064f0:	7d5280ef          	jal	8002f4c4 <printf>
    800064f4:	00056797          	auipc	a5,0x56
    800064f8:	b1d7c783          	lbu	a5,-1251(a5) # 8005c011 <excpt+0x1>
    800064fc:	00056497          	auipc	s1,0x56
    80006500:	b1448493          	addi	s1,s1,-1260 # 8005c010 <excpt>
    80006504:	0002c597          	auipc	a1,0x2c
    80006508:	1b458593          	addi	a1,a1,436 # 800326b8 <__func__.0+0x2d0>
    8000650c:	cf89                	beqz	a5,80006526 <virtual_instruction_12+0x7a>
    8000650e:	6498                	ld	a4,8(s1)
    80006510:	47d9                	li	a5,22
    80006512:	0002c597          	auipc	a1,0x2c
    80006516:	19658593          	addi	a1,a1,406 # 800326a8 <__func__.0+0x2c0>
    8000651a:	00f70663          	beq	a4,a5,80006526 <virtual_instruction_12+0x7a>
    8000651e:	0002c597          	auipc	a1,0x2c
    80006522:	19a58593          	addi	a1,a1,410 # 800326b8 <__func__.0+0x2d0>
    80006526:	0002c517          	auipc	a0,0x2c
    8000652a:	1d250513          	addi	a0,a0,466 # 800326f8 <__func__.0+0x310>
    8000652e:	797280ef          	jal	8002f4c4 <printf>
    80006532:	00056797          	auipc	a5,0x56
    80006536:	adf7c783          	lbu	a5,-1313(a5) # 8005c011 <excpt+0x1>
    8000653a:	c789                	beqz	a5,80006544 <virtual_instruction_12+0x98>
    8000653c:	6498                	ld	a4,8(s1)
    8000653e:	47d9                	li	a5,22
    80006540:	00f70c63          	beq	a4,a5,80006558 <virtual_instruction_12+0xac>
    80006544:	0002c517          	auipc	a0,0x2c
    80006548:	1bc50513          	addi	a0,a0,444 # 80032700 <__func__.0+0x318>
    8000654c:	779280ef          	jal	8002f4c4 <printf>
    80006550:	02900513          	li	a0,41
    80006554:	45f270ef          	jal	8002e1b2 <putchar>
    80006558:	4529                	li	a0,10
    8000655a:	459270ef          	jal	8002e1b2 <putchar>
    8000655e:	00056417          	auipc	s0,0x56
    80006562:	ab344403          	lbu	s0,-1357(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80006566:	0002c597          	auipc	a1,0x2c
    8000656a:	15258593          	addi	a1,a1,338 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    8000656e:	cc11                	beqz	s0,8000658a <virtual_instruction_12+0xde>
    80006570:	6498                	ld	a4,8(s1)
    80006572:	47d9                	li	a5,22
    TEST_END();
    80006574:	0002c597          	auipc	a1,0x2c
    80006578:	13458593          	addi	a1,a1,308 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    8000657c:	00f70763          	beq	a4,a5,8000658a <virtual_instruction_12+0xde>
    80006580:	4401                	li	s0,0
    TEST_END();
    80006582:	0002c597          	auipc	a1,0x2c
    80006586:	13658593          	addi	a1,a1,310 # 800326b8 <__func__.0+0x2d0>
    8000658a:	0002c517          	auipc	a0,0x2c
    8000658e:	1d650513          	addi	a0,a0,470 # 80032760 <__func__.0+0x378>
    80006592:	733280ef          	jal	8002f4c4 <printf>
    80006596:	4511                	li	a0,4
    80006598:	97dfa0ef          	jal	80000f14 <goto_priv>
    8000659c:	9dafb0ef          	jal	80001776 <reset_state>
}
    800065a0:	60e2                	ld	ra,24(sp)
    800065a2:	8522                	mv	a0,s0
    800065a4:	6442                	ld	s0,16(sp)
    800065a6:	64a2                	ld	s1,8(sp)
    800065a8:	6105                	addi	sp,sp,32
    800065aa:	8082                	ret

00000000800065ac <hfence_test>:
#include <rvh_test.h>
#include <page_tables.h> 

bool hfence_test() {
    800065ac:	7179                	addi	sp,sp,-48

    TEST_START();
    800065ae:	0002a597          	auipc	a1,0x2a
    800065b2:	03a58593          	addi	a1,a1,58 # 800305e8 <__func__.2>
    800065b6:	0002c517          	auipc	a0,0x2c
    800065ba:	11250513          	addi	a0,a0,274 # 800326c8 <__func__.0+0x2e0>
bool hfence_test() {
    800065be:	f406                	sd	ra,40(sp)
    800065c0:	ec26                	sd	s1,24(sp)
    800065c2:	f022                	sd	s0,32(sp)
    800065c4:	e84a                	sd	s2,16(sp)
    800065c6:	e44e                	sd	s3,8(sp)
    TEST_START();
    800065c8:	6fd280ef          	jal	8002f4c4 <printf>
    800065cc:	4529                	li	a0,10
    800065ce:	3e5270ef          	jal	8002e1b2 <putchar>
    800065d2:	00039617          	auipc	a2,0x39
    800065d6:	a5663603          	ld	a2,-1450(a2) # 8003f028 <__func__.0+0xcc40>
    800065da:	00039697          	auipc	a3,0x39
    800065de:	a566b683          	ld	a3,-1450(a3) # 8003f030 <__func__.0+0xcc48>
    800065e2:	2201b737          	lui	a4,0x2201b
    800065e6:	000887b7          	lui	a5,0x88
    800065ea:	070a                	slli	a4,a4,0x2
    800065ec:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    800065f0:	e310                	sd	a2,0(a4)
    800065f2:	07b2                	slli	a5,a5,0xc
    800065f4:	e394                	sd	a3,0(a5)
    write64(phys_page_base(SWITCH1), 0x111111111);
    write64(phys_page_base(SWITCH2), 0x222222222);

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    800065f6:	450d                	li	a0,3
    800065f8:	91dfa0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    800065fc:	4509                	li	a0,2
    asm volatile(
    800065fe:	4001b4b7          	lui	s1,0x4001b
    80006602:	833fa0ef          	jal	80000e34 <set_prev_priv>
    80006606:	048a                	slli	s1,s1,0x2
    hpt_init();
    80006608:	bc8fa0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8000660c:	97cfa0ef          	jal	80000788 <vspt_init>
    80006610:	6c04c9f3          	.insn	4, 0x6c04c9f3
    vaddr = vs_page_base(SWITCH1);

    val = hlvd(vaddr);
    cond = true;
    vspt_switch();
    80006614:	facfa0ef          	jal	80000dc0 <vspt_switch>
    80006618:	6c04c473          	.insn	4, 0x6c04c473
    asm volatile(
    8000661c:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80006620:	6c04c7f3          	.insn	4, 0x6c04c7f3
    cond &= (hlvd(vaddr) == val);
    80006624:	41340433          	sub	s0,s0,s3

    hfence_vvma();
    cond &= (hlvd(vaddr) != val);
    80006628:	413787b3          	sub	a5,a5,s3
    8000662c:	00f037b3          	snez	a5,a5
    80006630:	00143413          	seqz	s0,s0
    80006634:	8c7d                	and	s0,s0,a5

    hpt_switch();
    80006636:	facfa0ef          	jal	80000de2 <hpt_switch>
    8000663a:	6c04c973          	.insn	4, 0x6c04c973
    asm volatile(
    8000663e:	62000073          	.insn	4, 0x62000073
    asm volatile(
    80006642:	6c04c4f3          	.insn	4, 0x6c04c4f3
    cond &= (hlvd(vaddr) != val);
    80006646:	41390933          	sub	s2,s2,s3
    8000664a:	01203933          	snez	s2,s2

    hfence_gvma();
    cond &= (hlvd(vaddr) == val);

    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    8000664e:	0002d617          	auipc	a2,0x2d
    80006652:	33a60613          	addi	a2,a2,826 # 80033988 <__func__.0+0x15a0>
    80006656:	08c00593          	li	a1,140
    8000665a:	0002c517          	auipc	a0,0x2c
    8000665e:	08650513          	addi	a0,a0,134 # 800326e0 <__func__.0+0x2f8>
    80006662:	01247433          	and	s0,s0,s2
    80006666:	65f280ef          	jal	8002f4c4 <printf>
    8000666a:	12040863          	beqz	s0,8000679a <hfence_test+0x1ee>
    8000666e:	13349663          	bne	s1,s3,8000679a <hfence_test+0x1ee>
    80006672:	0002c597          	auipc	a1,0x2c
    80006676:	03658593          	addi	a1,a1,54 # 800326a8 <__func__.0+0x2c0>
    8000667a:	0002c517          	auipc	a0,0x2c
    8000667e:	07e50513          	addi	a0,a0,126 # 800326f8 <__func__.0+0x310>
    80006682:	643280ef          	jal	8002f4c4 <printf>
    80006686:	4529                	li	a0,10
    80006688:	32b270ef          	jal	8002e1b2 <putchar>
    8000668c:	4485                	li	s1,1

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    8000668e:	450d                	li	a0,3
    80006690:	4001b437          	lui	s0,0x4001b
    80006694:	881fa0ef          	jal	80000f14 <goto_priv>
    80006698:	040a                	slli	s0,s0,0x2
    8000669a:	6c044973          	.insn	4, 0x6c044973
    val = hlvd(vaddr);
    cond = true;
    hpt_switch();
    8000669e:	f44fa0ef          	jal	80000de2 <hpt_switch>
    asm volatile ("sfence.vma \n\t");
    800066a2:	12000073          	sfence.vma
    asm volatile(
    800066a6:	6c044473          	.insn	4, 0x6c044473
    sfence();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hs sfence does not affect guest level tlb entries", cond);
    800066aa:	0002d617          	auipc	a2,0x2d
    800066ae:	30e60613          	addi	a2,a2,782 # 800339b8 <__func__.0+0x15d0>
    800066b2:	08c00593          	li	a1,140
    800066b6:	0002c517          	auipc	a0,0x2c
    800066ba:	02a50513          	addi	a0,a0,42 # 800326e0 <__func__.0+0x2f8>
    800066be:	607280ef          	jal	8002f4c4 <printf>
    800066c2:	13240963          	beq	s0,s2,800067f4 <hfence_test+0x248>
    800066c6:	0002c597          	auipc	a1,0x2c
    800066ca:	ff258593          	addi	a1,a1,-14 # 800326b8 <__func__.0+0x2d0>
    800066ce:	0002c517          	auipc	a0,0x2c
    800066d2:	02a50513          	addi	a0,a0,42 # 800326f8 <__func__.0+0x310>
    800066d6:	5ef280ef          	jal	8002f4c4 <printf>
    800066da:	0002c517          	auipc	a0,0x2c
    800066de:	02650513          	addi	a0,a0,38 # 80032700 <__func__.0+0x318>
    800066e2:	5e3280ef          	jal	8002f4c4 <printf>
    800066e6:	02900513          	li	a0,41
    800066ea:	2c9270ef          	jal	8002e1b2 <putchar>
    800066ee:	4529                	li	a0,10
    800066f0:	2c3270ef          	jal	8002e1b2 <putchar>
    800066f4:	4481                	li	s1,0
    return *((volatile uint64_t*) addr);
    800066f6:	4001b437          	lui	s0,0x4001b

    //////////////////////////////////////////////////////////////////////  

    goto_priv(PRIV_HS);
    800066fa:	450d                	li	a0,3
    800066fc:	040a                	slli	s0,s0,0x2
    800066fe:	817fa0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80006702:	eebf90ef          	jal	800005ec <hspt_init>
    80006706:	00043903          	ld	s2,0(s0) # 4001b000 <STACK_SIZE+0x3ff1b000>
    vaddr = hs_page_base(SWITCH1);
    val = read64(vaddr);
    cond = true;

    hspt_switch();
    8000670a:	e94fa0ef          	jal	80000d9e <hspt_switch>
    goto_priv(PRIV_VS);
    8000670e:	4509                	li	a0,2
    80006710:	805fa0ef          	jal	80000f14 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    80006714:	12000073          	sfence.vma
    sfence();
    goto_priv(PRIV_HS);
    80006718:	450d                	li	a0,3
    8000671a:	ffafa0ef          	jal	80000f14 <goto_priv>
    8000671e:	6000                	ld	s0,0(s0)
    cond &= read64(vaddr) == val;
    TEST_ASSERT("vs sfence does not affect hypervisor level tlb entries", cond);
    80006720:	0002d617          	auipc	a2,0x2d
    80006724:	2d060613          	addi	a2,a2,720 # 800339f0 <__func__.0+0x1608>
    80006728:	08c00593          	li	a1,140
    8000672c:	0002c517          	auipc	a0,0x2c
    80006730:	fb450513          	addi	a0,a0,-76 # 800326e0 <__func__.0+0x2f8>
    80006734:	591280ef          	jal	8002f4c4 <printf>
    80006738:	09240a63          	beq	s0,s2,800067cc <hfence_test+0x220>
    8000673c:	0002c597          	auipc	a1,0x2c
    80006740:	f7c58593          	addi	a1,a1,-132 # 800326b8 <__func__.0+0x2d0>
    80006744:	0002c517          	auipc	a0,0x2c
    80006748:	fb450513          	addi	a0,a0,-76 # 800326f8 <__func__.0+0x310>
    8000674c:	579280ef          	jal	8002f4c4 <printf>
    80006750:	0002c517          	auipc	a0,0x2c
    80006754:	fb050513          	addi	a0,a0,-80 # 80032700 <__func__.0+0x318>
    80006758:	56d280ef          	jal	8002f4c4 <printf>
    8000675c:	02900513          	li	a0,41
    80006760:	253270ef          	jal	8002e1b2 <putchar>
    80006764:	4529                	li	a0,10
    80006766:	24d270ef          	jal	8002e1b2 <putchar>
    8000676a:	4401                	li	s0,0

    //////////////////////////////////////////////////////////////////////


    
    TEST_END();
    8000676c:	0002c597          	auipc	a1,0x2c
    80006770:	f4c58593          	addi	a1,a1,-180 # 800326b8 <__func__.0+0x2d0>
    80006774:	0002c517          	auipc	a0,0x2c
    80006778:	fec50513          	addi	a0,a0,-20 # 80032760 <__func__.0+0x378>
    8000677c:	549280ef          	jal	8002f4c4 <printf>
    80006780:	4511                	li	a0,4
    80006782:	f92fa0ef          	jal	80000f14 <goto_priv>
    80006786:	ff1fa0ef          	jal	80001776 <reset_state>
    8000678a:	70a2                	ld	ra,40(sp)
    8000678c:	8522                	mv	a0,s0
    8000678e:	7402                	ld	s0,32(sp)
    80006790:	64e2                	ld	s1,24(sp)
    80006792:	6942                	ld	s2,16(sp)
    80006794:	69a2                	ld	s3,8(sp)
    80006796:	6145                	addi	sp,sp,48
    80006798:	8082                	ret
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    8000679a:	0002c597          	auipc	a1,0x2c
    8000679e:	f1e58593          	addi	a1,a1,-226 # 800326b8 <__func__.0+0x2d0>
    800067a2:	0002c517          	auipc	a0,0x2c
    800067a6:	f5650513          	addi	a0,a0,-170 # 800326f8 <__func__.0+0x310>
    800067aa:	51b280ef          	jal	8002f4c4 <printf>
    800067ae:	0002c517          	auipc	a0,0x2c
    800067b2:	f5250513          	addi	a0,a0,-174 # 80032700 <__func__.0+0x318>
    800067b6:	50f280ef          	jal	8002f4c4 <printf>
    800067ba:	02900513          	li	a0,41
    800067be:	1f5270ef          	jal	8002e1b2 <putchar>
    800067c2:	4529                	li	a0,10
    800067c4:	1ef270ef          	jal	8002e1b2 <putchar>
    800067c8:	4481                	li	s1,0
    800067ca:	b5d1                	j	8000668e <hfence_test+0xe2>
    TEST_ASSERT("vs sfence does not affect hypervisor level tlb entries", cond);
    800067cc:	0002c597          	auipc	a1,0x2c
    800067d0:	edc58593          	addi	a1,a1,-292 # 800326a8 <__func__.0+0x2c0>
    800067d4:	0002c517          	auipc	a0,0x2c
    800067d8:	f2450513          	addi	a0,a0,-220 # 800326f8 <__func__.0+0x310>
    800067dc:	4e9280ef          	jal	8002f4c4 <printf>
    800067e0:	4529                	li	a0,10
    800067e2:	1d1270ef          	jal	8002e1b2 <putchar>
    800067e6:	d0d1                	beqz	s1,8000676a <hfence_test+0x1be>
    800067e8:	4405                	li	s0,1
    TEST_END();
    800067ea:	0002c597          	auipc	a1,0x2c
    800067ee:	ebe58593          	addi	a1,a1,-322 # 800326a8 <__func__.0+0x2c0>
    800067f2:	b749                	j	80006774 <hfence_test+0x1c8>
    TEST_ASSERT("hs sfence does not affect guest level tlb entries", cond);
    800067f4:	0002c597          	auipc	a1,0x2c
    800067f8:	eb458593          	addi	a1,a1,-332 # 800326a8 <__func__.0+0x2c0>
    800067fc:	0002c517          	auipc	a0,0x2c
    80006800:	efc50513          	addi	a0,a0,-260 # 800326f8 <__func__.0+0x310>
    80006804:	4c1280ef          	jal	8002f4c4 <printf>
    80006808:	4529                	li	a0,10
    8000680a:	1a9270ef          	jal	8002e1b2 <putchar>
    8000680e:	b5e5                	j	800066f6 <hfence_test+0x14a>

0000000080006810 <wfi_exception_tests_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <stdio.h>

bool wfi_exception_tests_1() {
    80006810:	1101                	addi	sp,sp,-32

    TEST_START();
    80006812:	0002a597          	auipc	a1,0x2a
    80006816:	de658593          	addi	a1,a1,-538 # 800305f8 <__func__.22>
    8000681a:	0002c517          	auipc	a0,0x2c
    8000681e:	eae50513          	addi	a0,a0,-338 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_1() {
    80006822:	ec06                	sd	ra,24(sp)
    80006824:	e822                	sd	s0,16(sp)
    80006826:	e426                	sd	s1,8(sp)
    TEST_START();
    80006828:	49d280ef          	jal	8002f4c4 <printf>
    8000682c:	4529                	li	a0,10
    8000682e:	185270ef          	jal	8002e1b2 <putchar>

    TEST_SETUP_EXCEPT();
    80006832:	de6fa0ef          	jal	80000e18 <test_setup_except_function>

    //mstatus.TW=0时，在u模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006836:	4511                	li	a0,4
    80006838:	edcfa0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000683c:	002007b7          	lui	a5,0x200
    80006840:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006844:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006848:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000684c:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80006850:	60205073          	csrwi	hedeleg,0
    CSRS(CSR_UIE, 0b0100);
    80006854:	00426073          	csrsi	uie,4
    asm ("wfi" ::: "memory");
    80006858:	10500073          	wfi
    wfi();

    goto_priv(PRIV_HU);
    8000685c:	4505                	li	a0,1
    8000685e:	eb6fa0ef          	jal	80000f14 <goto_priv>

    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006862:	08c00593          	li	a1,140
    80006866:	0002d617          	auipc	a2,0x2d
    8000686a:	1c260613          	addi	a2,a2,450 # 80033a28 <__func__.0+0x1640>
    8000686e:	0002c517          	auipc	a0,0x2c
    80006872:	e7250513          	addi	a0,a0,-398 # 800326e0 <__func__.0+0x2f8>
    80006876:	44f280ef          	jal	8002f4c4 <printf>
    8000687a:	00055797          	auipc	a5,0x55
    8000687e:	7977c783          	lbu	a5,1943(a5) # 8005c011 <excpt+0x1>
    80006882:	00055497          	auipc	s1,0x55
    80006886:	78e48493          	addi	s1,s1,1934 # 8005c010 <excpt>
    8000688a:	0002c597          	auipc	a1,0x2c
    8000688e:	e2e58593          	addi	a1,a1,-466 # 800326b8 <__func__.0+0x2d0>
    80006892:	cf89                	beqz	a5,800068ac <wfi_exception_tests_1+0x9c>
    80006894:	6498                	ld	a4,8(s1)
    80006896:	4789                	li	a5,2
    80006898:	0002c597          	auipc	a1,0x2c
    8000689c:	e1058593          	addi	a1,a1,-496 # 800326a8 <__func__.0+0x2c0>
    800068a0:	00f70663          	beq	a4,a5,800068ac <wfi_exception_tests_1+0x9c>
    800068a4:	0002c597          	auipc	a1,0x2c
    800068a8:	e1458593          	addi	a1,a1,-492 # 800326b8 <__func__.0+0x2d0>
    800068ac:	0002c517          	auipc	a0,0x2c
    800068b0:	e4c50513          	addi	a0,a0,-436 # 800326f8 <__func__.0+0x310>
    800068b4:	411280ef          	jal	8002f4c4 <printf>
    800068b8:	00055797          	auipc	a5,0x55
    800068bc:	7597c783          	lbu	a5,1881(a5) # 8005c011 <excpt+0x1>
    800068c0:	c789                	beqz	a5,800068ca <wfi_exception_tests_1+0xba>
    800068c2:	6498                	ld	a4,8(s1)
    800068c4:	4789                	li	a5,2
    800068c6:	00f70c63          	beq	a4,a5,800068de <wfi_exception_tests_1+0xce>
    800068ca:	0002c517          	auipc	a0,0x2c
    800068ce:	e3650513          	addi	a0,a0,-458 # 80032700 <__func__.0+0x318>
    800068d2:	3f3280ef          	jal	8002f4c4 <printf>
    800068d6:	02900513          	li	a0,41
    800068da:	0d9270ef          	jal	8002e1b2 <putchar>
    800068de:	4529                	li	a0,10
    800068e0:	0d3270ef          	jal	8002e1b2 <putchar>
    800068e4:	00055417          	auipc	s0,0x55
    800068e8:	72d44403          	lbu	s0,1837(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800068ec:	0002c597          	auipc	a1,0x2c
    800068f0:	dcc58593          	addi	a1,a1,-564 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800068f4:	cc11                	beqz	s0,80006910 <wfi_exception_tests_1+0x100>
    800068f6:	6498                	ld	a4,8(s1)
    800068f8:	4789                	li	a5,2
    TEST_END();
    800068fa:	0002c597          	auipc	a1,0x2c
    800068fe:	dae58593          	addi	a1,a1,-594 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006902:	00f70763          	beq	a4,a5,80006910 <wfi_exception_tests_1+0x100>
    80006906:	4401                	li	s0,0
    TEST_END();
    80006908:	0002c597          	auipc	a1,0x2c
    8000690c:	db058593          	addi	a1,a1,-592 # 800326b8 <__func__.0+0x2d0>
    80006910:	0002c517          	auipc	a0,0x2c
    80006914:	e5050513          	addi	a0,a0,-432 # 80032760 <__func__.0+0x378>
    80006918:	3ad280ef          	jal	8002f4c4 <printf>
    8000691c:	4511                	li	a0,4
    8000691e:	df6fa0ef          	jal	80000f14 <goto_priv>
    80006922:	e55fa0ef          	jal	80001776 <reset_state>
}
    80006926:	60e2                	ld	ra,24(sp)
    80006928:	8522                	mv	a0,s0
    8000692a:	6442                	ld	s0,16(sp)
    8000692c:	64a2                	ld	s1,8(sp)
    8000692e:	6105                	addi	sp,sp,32
    80006930:	8082                	ret

0000000080006932 <wfi_exception_tests_2>:

bool wfi_exception_tests_2() {
    80006932:	1101                	addi	sp,sp,-32

    TEST_START();
    80006934:	0002a597          	auipc	a1,0x2a
    80006938:	cdc58593          	addi	a1,a1,-804 # 80030610 <__func__.21>
    8000693c:	0002c517          	auipc	a0,0x2c
    80006940:	d8c50513          	addi	a0,a0,-628 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_2() {
    80006944:	ec06                	sd	ra,24(sp)
    80006946:	e822                	sd	s0,16(sp)
    80006948:	e426                	sd	s1,8(sp)
    TEST_START();
    8000694a:	37b280ef          	jal	8002f4c4 <printf>
    8000694e:	4529                	li	a0,10
    80006950:	063270ef          	jal	8002e1b2 <putchar>

    TEST_SETUP_EXCEPT();
    80006954:	cc4fa0ef          	jal	80000e18 <test_setup_except_function>
    //mstatus.TW=0时，在VU模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006958:	4511                	li	a0,4
    8000695a:	dbafa0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000695e:	002007b7          	lui	a5,0x200
    80006962:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006966:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000696a:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000696e:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80006972:	60205073          	csrwi	hedeleg,0
    TEST_SETUP_EXCEPT();
    80006976:	ca2fa0ef          	jal	80000e18 <test_setup_except_function>
    CSRS(CSR_UIE, 0b0100);
    8000697a:	00426073          	csrsi	uie,4
    8000697e:	10500073          	wfi
    wfi();

    goto_priv(PRIV_VU);
    80006982:	4501                	li	a0,0
    80006984:	d90fa0ef          	jal	80000f14 <goto_priv>
    
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006988:	08c00593          	li	a1,140
    8000698c:	0002d617          	auipc	a2,0x2d
    80006990:	10c60613          	addi	a2,a2,268 # 80033a98 <__func__.0+0x16b0>
    80006994:	0002c517          	auipc	a0,0x2c
    80006998:	d4c50513          	addi	a0,a0,-692 # 800326e0 <__func__.0+0x2f8>
    8000699c:	329280ef          	jal	8002f4c4 <printf>
    800069a0:	00055797          	auipc	a5,0x55
    800069a4:	6717c783          	lbu	a5,1649(a5) # 8005c011 <excpt+0x1>
    800069a8:	00055497          	auipc	s1,0x55
    800069ac:	66848493          	addi	s1,s1,1640 # 8005c010 <excpt>
    800069b0:	0002c597          	auipc	a1,0x2c
    800069b4:	d0858593          	addi	a1,a1,-760 # 800326b8 <__func__.0+0x2d0>
    800069b8:	cf89                	beqz	a5,800069d2 <wfi_exception_tests_2+0xa0>
    800069ba:	6498                	ld	a4,8(s1)
    800069bc:	4789                	li	a5,2
    800069be:	0002c597          	auipc	a1,0x2c
    800069c2:	cea58593          	addi	a1,a1,-790 # 800326a8 <__func__.0+0x2c0>
    800069c6:	00f70663          	beq	a4,a5,800069d2 <wfi_exception_tests_2+0xa0>
    800069ca:	0002c597          	auipc	a1,0x2c
    800069ce:	cee58593          	addi	a1,a1,-786 # 800326b8 <__func__.0+0x2d0>
    800069d2:	0002c517          	auipc	a0,0x2c
    800069d6:	d2650513          	addi	a0,a0,-730 # 800326f8 <__func__.0+0x310>
    800069da:	2eb280ef          	jal	8002f4c4 <printf>
    800069de:	00055797          	auipc	a5,0x55
    800069e2:	6337c783          	lbu	a5,1587(a5) # 8005c011 <excpt+0x1>
    800069e6:	c789                	beqz	a5,800069f0 <wfi_exception_tests_2+0xbe>
    800069e8:	6498                	ld	a4,8(s1)
    800069ea:	4789                	li	a5,2
    800069ec:	00f70c63          	beq	a4,a5,80006a04 <wfi_exception_tests_2+0xd2>
    800069f0:	0002c517          	auipc	a0,0x2c
    800069f4:	d1050513          	addi	a0,a0,-752 # 80032700 <__func__.0+0x318>
    800069f8:	2cd280ef          	jal	8002f4c4 <printf>
    800069fc:	02900513          	li	a0,41
    80006a00:	7b2270ef          	jal	8002e1b2 <putchar>
    80006a04:	4529                	li	a0,10
    80006a06:	7ac270ef          	jal	8002e1b2 <putchar>
    80006a0a:	00055417          	auipc	s0,0x55
    80006a0e:	60744403          	lbu	s0,1543(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    TEST_END();
    80006a12:	0002c597          	auipc	a1,0x2c
    80006a16:	ca658593          	addi	a1,a1,-858 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a1a:	cc11                	beqz	s0,80006a36 <wfi_exception_tests_2+0x104>
    80006a1c:	6498                	ld	a4,8(s1)
    80006a1e:	4789                	li	a5,2
    TEST_END();
    80006a20:	0002c597          	auipc	a1,0x2c
    80006a24:	c8858593          	addi	a1,a1,-888 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a28:	00f70763          	beq	a4,a5,80006a36 <wfi_exception_tests_2+0x104>
    80006a2c:	4401                	li	s0,0
    TEST_END();
    80006a2e:	0002c597          	auipc	a1,0x2c
    80006a32:	c8a58593          	addi	a1,a1,-886 # 800326b8 <__func__.0+0x2d0>
    80006a36:	0002c517          	auipc	a0,0x2c
    80006a3a:	d2a50513          	addi	a0,a0,-726 # 80032760 <__func__.0+0x378>
    80006a3e:	287280ef          	jal	8002f4c4 <printf>
    80006a42:	4511                	li	a0,4
    80006a44:	cd0fa0ef          	jal	80000f14 <goto_priv>
    80006a48:	d2ffa0ef          	jal	80001776 <reset_state>
}
    80006a4c:	60e2                	ld	ra,24(sp)
    80006a4e:	8522                	mv	a0,s0
    80006a50:	6442                	ld	s0,16(sp)
    80006a52:	64a2                	ld	s1,8(sp)
    80006a54:	6105                	addi	sp,sp,32
    80006a56:	8082                	ret

0000000080006a58 <wfi_exception_tests_3>:

bool wfi_exception_tests_3() {
    80006a58:	1141                	addi	sp,sp,-16

    TEST_START();
    80006a5a:	0002a597          	auipc	a1,0x2a
    80006a5e:	bce58593          	addi	a1,a1,-1074 # 80030628 <__func__.20>
    80006a62:	0002c517          	auipc	a0,0x2c
    80006a66:	c6650513          	addi	a0,a0,-922 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_3() {
    80006a6a:	e406                	sd	ra,8(sp)
    80006a6c:	e022                	sd	s0,0(sp)
    TEST_START();
    80006a6e:	257280ef          	jal	8002f4c4 <printf>
    80006a72:	4529                	li	a0,10
    80006a74:	73e270ef          	jal	8002e1b2 <putchar>

    TEST_SETUP_EXCEPT();
    80006a78:	ba0fa0ef          	jal	80000e18 <test_setup_except_function>
    /* Keep an interrupt pending so we don't get stuck when wfi succeeds */
    //mstatus.TW=0时，在m模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006a7c:	4511                	li	a0,4
    80006a7e:	c96fa0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006a82:	002007b7          	lui	a5,0x200
    80006a86:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006a8a:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006a8e:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006a92:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006a96:	34426073          	csrsi	mip,4

    goto_priv(PRIV_M);
    80006a9a:	4511                	li	a0,4
    80006a9c:	c78fa0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006aa0:	b78fa0ef          	jal	80000e18 <test_setup_except_function>
    80006aa4:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006aa8:	08c00593          	li	a1,140
    80006aac:	0002d617          	auipc	a2,0x2d
    80006ab0:	05c60613          	addi	a2,a2,92 # 80033b08 <__func__.0+0x1720>
    80006ab4:	0002c517          	auipc	a0,0x2c
    80006ab8:	c2c50513          	addi	a0,a0,-980 # 800326e0 <__func__.0+0x2f8>
    80006abc:	209280ef          	jal	8002f4c4 <printf>
    80006ac0:	00055797          	auipc	a5,0x55
    80006ac4:	5517c783          	lbu	a5,1361(a5) # 8005c011 <excpt+0x1>
    80006ac8:	0002c597          	auipc	a1,0x2c
    80006acc:	be058593          	addi	a1,a1,-1056 # 800326a8 <__func__.0+0x2c0>
    80006ad0:	c789                	beqz	a5,80006ada <wfi_exception_tests_3+0x82>
    80006ad2:	0002c597          	auipc	a1,0x2c
    80006ad6:	be658593          	addi	a1,a1,-1050 # 800326b8 <__func__.0+0x2d0>
    80006ada:	0002c517          	auipc	a0,0x2c
    80006ade:	c1e50513          	addi	a0,a0,-994 # 800326f8 <__func__.0+0x310>
    80006ae2:	1e3280ef          	jal	8002f4c4 <printf>
    80006ae6:	00055797          	auipc	a5,0x55
    80006aea:	52b7c783          	lbu	a5,1323(a5) # 8005c011 <excpt+0x1>
    80006aee:	e7a1                	bnez	a5,80006b36 <wfi_exception_tests_3+0xde>
    80006af0:	4529                	li	a0,10
    80006af2:	6c0270ef          	jal	8002e1b2 <putchar>
    80006af6:	00055797          	auipc	a5,0x55
    80006afa:	51b7c783          	lbu	a5,1307(a5) # 8005c011 <excpt+0x1>
    80006afe:	e795                	bnez	a5,80006b2a <wfi_exception_tests_3+0xd2>
    80006b00:	4405                	li	s0,1
        excpt.triggered == false
    );  

   
    TEST_END();
    80006b02:	0002c597          	auipc	a1,0x2c
    80006b06:	ba658593          	addi	a1,a1,-1114 # 800326a8 <__func__.0+0x2c0>
    80006b0a:	0002c517          	auipc	a0,0x2c
    80006b0e:	c5650513          	addi	a0,a0,-938 # 80032760 <__func__.0+0x378>
    80006b12:	1b3280ef          	jal	8002f4c4 <printf>
    80006b16:	4511                	li	a0,4
    80006b18:	bfcfa0ef          	jal	80000f14 <goto_priv>
    80006b1c:	c5bfa0ef          	jal	80001776 <reset_state>
}
    80006b20:	60a2                	ld	ra,8(sp)
    80006b22:	8522                	mv	a0,s0
    80006b24:	6402                	ld	s0,0(sp)
    80006b26:	0141                	addi	sp,sp,16
    80006b28:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b2a:	4401                	li	s0,0
    TEST_END();
    80006b2c:	0002c597          	auipc	a1,0x2c
    80006b30:	b8c58593          	addi	a1,a1,-1140 # 800326b8 <__func__.0+0x2d0>
    80006b34:	bfd9                	j	80006b0a <wfi_exception_tests_3+0xb2>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b36:	0002c517          	auipc	a0,0x2c
    80006b3a:	bca50513          	addi	a0,a0,-1078 # 80032700 <__func__.0+0x318>
    80006b3e:	187280ef          	jal	8002f4c4 <printf>
    80006b42:	02900513          	li	a0,41
    80006b46:	66c270ef          	jal	8002e1b2 <putchar>
    80006b4a:	b75d                	j	80006af0 <wfi_exception_tests_3+0x98>

0000000080006b4c <wfi_exception_tests_4>:

bool wfi_exception_tests_4() {
    80006b4c:	1141                	addi	sp,sp,-16

    TEST_START();
    80006b4e:	0002a597          	auipc	a1,0x2a
    80006b52:	af258593          	addi	a1,a1,-1294 # 80030640 <__func__.19>
    80006b56:	0002c517          	auipc	a0,0x2c
    80006b5a:	b7250513          	addi	a0,a0,-1166 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_4() {
    80006b5e:	e406                	sd	ra,8(sp)
    80006b60:	e022                	sd	s0,0(sp)
    TEST_START();
    80006b62:	163280ef          	jal	8002f4c4 <printf>
    80006b66:	4529                	li	a0,10
    80006b68:	64a270ef          	jal	8002e1b2 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006b6c:	aacfa0ef          	jal	80000e18 <test_setup_except_function>

    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理没打开，执行wfi指令
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006b70:	002007b7          	lui	a5,0x200
    80006b74:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006b78:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006b7c:	30305073          	csrwi	mideleg,0
    CSRS(CSR_HIE, 0b0100);
    80006b80:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80006b84:	64426073          	csrsi	hip,4

    goto_priv(PRIV_HS);
    80006b88:	450d                	li	a0,3
    80006b8a:	b8afa0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006b8e:	a8afa0ef          	jal	80000e18 <test_setup_except_function>
    80006b92:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b96:	08c00593          	li	a1,140
    80006b9a:	0002d617          	auipc	a2,0x2d
    80006b9e:	fde60613          	addi	a2,a2,-34 # 80033b78 <__func__.0+0x1790>
    80006ba2:	0002c517          	auipc	a0,0x2c
    80006ba6:	b3e50513          	addi	a0,a0,-1218 # 800326e0 <__func__.0+0x2f8>
    80006baa:	11b280ef          	jal	8002f4c4 <printf>
    80006bae:	00055797          	auipc	a5,0x55
    80006bb2:	4637c783          	lbu	a5,1123(a5) # 8005c011 <excpt+0x1>
    80006bb6:	0002c597          	auipc	a1,0x2c
    80006bba:	af258593          	addi	a1,a1,-1294 # 800326a8 <__func__.0+0x2c0>
    80006bbe:	c789                	beqz	a5,80006bc8 <wfi_exception_tests_4+0x7c>
    80006bc0:	0002c597          	auipc	a1,0x2c
    80006bc4:	af858593          	addi	a1,a1,-1288 # 800326b8 <__func__.0+0x2d0>
    80006bc8:	0002c517          	auipc	a0,0x2c
    80006bcc:	b3050513          	addi	a0,a0,-1232 # 800326f8 <__func__.0+0x310>
    80006bd0:	0f5280ef          	jal	8002f4c4 <printf>
    80006bd4:	00055797          	auipc	a5,0x55
    80006bd8:	43d7c783          	lbu	a5,1085(a5) # 8005c011 <excpt+0x1>
    80006bdc:	e7a1                	bnez	a5,80006c24 <wfi_exception_tests_4+0xd8>
    80006bde:	4529                	li	a0,10
    80006be0:	5d2270ef          	jal	8002e1b2 <putchar>
    80006be4:	00055797          	auipc	a5,0x55
    80006be8:	42d7c783          	lbu	a5,1069(a5) # 8005c011 <excpt+0x1>
    80006bec:	e795                	bnez	a5,80006c18 <wfi_exception_tests_4+0xcc>
    80006bee:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006bf0:	0002c597          	auipc	a1,0x2c
    80006bf4:	ab858593          	addi	a1,a1,-1352 # 800326a8 <__func__.0+0x2c0>
    80006bf8:	0002c517          	auipc	a0,0x2c
    80006bfc:	b6850513          	addi	a0,a0,-1176 # 80032760 <__func__.0+0x378>
    80006c00:	0c5280ef          	jal	8002f4c4 <printf>
    80006c04:	4511                	li	a0,4
    80006c06:	b0efa0ef          	jal	80000f14 <goto_priv>
    80006c0a:	b6dfa0ef          	jal	80001776 <reset_state>
}
    80006c0e:	60a2                	ld	ra,8(sp)
    80006c10:	8522                	mv	a0,s0
    80006c12:	6402                	ld	s0,0(sp)
    80006c14:	0141                	addi	sp,sp,16
    80006c16:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c18:	4401                	li	s0,0
    TEST_END();
    80006c1a:	0002c597          	auipc	a1,0x2c
    80006c1e:	a9e58593          	addi	a1,a1,-1378 # 800326b8 <__func__.0+0x2d0>
    80006c22:	bfd9                	j	80006bf8 <wfi_exception_tests_4+0xac>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c24:	0002c517          	auipc	a0,0x2c
    80006c28:	adc50513          	addi	a0,a0,-1316 # 80032700 <__func__.0+0x318>
    80006c2c:	099280ef          	jal	8002f4c4 <printf>
    80006c30:	02900513          	li	a0,41
    80006c34:	57e270ef          	jal	8002e1b2 <putchar>
    80006c38:	b75d                	j	80006bde <wfi_exception_tests_4+0x92>

0000000080006c3a <wfi_exception_tests_5>:

bool wfi_exception_tests_5() {
    80006c3a:	1141                	addi	sp,sp,-16

    TEST_START();
    80006c3c:	0002a597          	auipc	a1,0x2a
    80006c40:	a1c58593          	addi	a1,a1,-1508 # 80030658 <__func__.18>
    80006c44:	0002c517          	auipc	a0,0x2c
    80006c48:	a8450513          	addi	a0,a0,-1404 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_5() {
    80006c4c:	e406                	sd	ra,8(sp)
    80006c4e:	e022                	sd	s0,0(sp)
    TEST_START();
    80006c50:	075280ef          	jal	8002f4c4 <printf>
    80006c54:	4529                	li	a0,10
    80006c56:	55c270ef          	jal	8002e1b2 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006c5a:	9befa0ef          	jal	80000e18 <test_setup_except_function>

    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006c5e:	002007b7          	lui	a5,0x200
    80006c62:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006c66:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006c6a:	30305073          	csrwi	mideleg,0
    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理没打开，执行wfi指令

    goto_priv(PRIV_VS); //防止进入hs异常后不能直接进入m模式
    80006c6e:	4509                	li	a0,2
    80006c70:	aa4fa0ef          	jal	80000f14 <goto_priv>
    goto_priv(PRIV_M); 
    80006c74:	4511                	li	a0,4
    80006c76:	a9efa0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_VSIE, 0b0100);
    80006c7a:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006c7e:	24426073          	csrsi	vsip,4

    goto_priv(PRIV_VS);
    80006c82:	4509                	li	a0,2
    80006c84:	a90fa0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006c88:	990fa0ef          	jal	80000e18 <test_setup_except_function>
    80006c8c:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c90:	08c00593          	li	a1,140
    80006c94:	0002d617          	auipc	a2,0x2d
    80006c98:	f4c60613          	addi	a2,a2,-180 # 80033be0 <__func__.0+0x17f8>
    80006c9c:	0002c517          	auipc	a0,0x2c
    80006ca0:	a4450513          	addi	a0,a0,-1468 # 800326e0 <__func__.0+0x2f8>
    80006ca4:	021280ef          	jal	8002f4c4 <printf>
    80006ca8:	00055797          	auipc	a5,0x55
    80006cac:	3697c783          	lbu	a5,873(a5) # 8005c011 <excpt+0x1>
    80006cb0:	0002c597          	auipc	a1,0x2c
    80006cb4:	9f858593          	addi	a1,a1,-1544 # 800326a8 <__func__.0+0x2c0>
    80006cb8:	c789                	beqz	a5,80006cc2 <wfi_exception_tests_5+0x88>
    80006cba:	0002c597          	auipc	a1,0x2c
    80006cbe:	9fe58593          	addi	a1,a1,-1538 # 800326b8 <__func__.0+0x2d0>
    80006cc2:	0002c517          	auipc	a0,0x2c
    80006cc6:	a3650513          	addi	a0,a0,-1482 # 800326f8 <__func__.0+0x310>
    80006cca:	7fa280ef          	jal	8002f4c4 <printf>
    80006cce:	00055797          	auipc	a5,0x55
    80006cd2:	3437c783          	lbu	a5,835(a5) # 8005c011 <excpt+0x1>
    80006cd6:	e7a1                	bnez	a5,80006d1e <wfi_exception_tests_5+0xe4>
    80006cd8:	4529                	li	a0,10
    80006cda:	4d8270ef          	jal	8002e1b2 <putchar>
    80006cde:	00055797          	auipc	a5,0x55
    80006ce2:	3337c783          	lbu	a5,819(a5) # 8005c011 <excpt+0x1>
    80006ce6:	e795                	bnez	a5,80006d12 <wfi_exception_tests_5+0xd8>
    80006ce8:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006cea:	0002c597          	auipc	a1,0x2c
    80006cee:	9be58593          	addi	a1,a1,-1602 # 800326a8 <__func__.0+0x2c0>
    80006cf2:	0002c517          	auipc	a0,0x2c
    80006cf6:	a6e50513          	addi	a0,a0,-1426 # 80032760 <__func__.0+0x378>
    80006cfa:	7ca280ef          	jal	8002f4c4 <printf>
    80006cfe:	4511                	li	a0,4
    80006d00:	a14fa0ef          	jal	80000f14 <goto_priv>
    80006d04:	a73fa0ef          	jal	80001776 <reset_state>
}
    80006d08:	60a2                	ld	ra,8(sp)
    80006d0a:	8522                	mv	a0,s0
    80006d0c:	6402                	ld	s0,0(sp)
    80006d0e:	0141                	addi	sp,sp,16
    80006d10:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d12:	4401                	li	s0,0
    TEST_END();
    80006d14:	0002c597          	auipc	a1,0x2c
    80006d18:	9a458593          	addi	a1,a1,-1628 # 800326b8 <__func__.0+0x2d0>
    80006d1c:	bfd9                	j	80006cf2 <wfi_exception_tests_5+0xb8>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d1e:	0002c517          	auipc	a0,0x2c
    80006d22:	9e250513          	addi	a0,a0,-1566 # 80032700 <__func__.0+0x318>
    80006d26:	79e280ef          	jal	8002f4c4 <printf>
    80006d2a:	02900513          	li	a0,41
    80006d2e:	484270ef          	jal	8002e1b2 <putchar>
    80006d32:	b75d                	j	80006cd8 <wfi_exception_tests_5+0x9e>

0000000080006d34 <wfi_exception_tests_6>:

bool wfi_exception_tests_6() {
    80006d34:	1141                	addi	sp,sp,-16

    TEST_START();
    80006d36:	0002a597          	auipc	a1,0x2a
    80006d3a:	93a58593          	addi	a1,a1,-1734 # 80030670 <__func__.17>
    80006d3e:	0002c517          	auipc	a0,0x2c
    80006d42:	98a50513          	addi	a0,a0,-1654 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_6() {
    80006d46:	e406                	sd	ra,8(sp)
    80006d48:	e022                	sd	s0,0(sp)
    TEST_START();
    80006d4a:	77a280ef          	jal	8002f4c4 <printf>
    80006d4e:	4529                	li	a0,10
    80006d50:	462270ef          	jal	8002e1b2 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006d54:	8c4fa0ef          	jal	80000e18 <test_setup_except_function>
    
    goto_priv(PRIV_M);
    80006d58:	4511                	li	a0,4
    80006d5a:	9bafa0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006d5e:	002007b7          	lui	a5,0x200
    80006d62:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006d66:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006d6a:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006d6e:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006d72:	34426073          	csrsi	mip,4
    CSRS(mideleg, 0b0100);
    80006d76:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_M);
    80006d7a:	4511                	li	a0,4
    80006d7c:	998fa0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006d80:	898fa0ef          	jal	80000e18 <test_setup_except_function>
    80006d84:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006d88:	08c00593          	li	a1,140
    80006d8c:	0002d617          	auipc	a2,0x2d
    80006d90:	ebc60613          	addi	a2,a2,-324 # 80033c48 <__func__.0+0x1860>
    80006d94:	0002c517          	auipc	a0,0x2c
    80006d98:	94c50513          	addi	a0,a0,-1716 # 800326e0 <__func__.0+0x2f8>
    80006d9c:	728280ef          	jal	8002f4c4 <printf>
    80006da0:	00055797          	auipc	a5,0x55
    80006da4:	2717c783          	lbu	a5,625(a5) # 8005c011 <excpt+0x1>
    80006da8:	0002c597          	auipc	a1,0x2c
    80006dac:	90058593          	addi	a1,a1,-1792 # 800326a8 <__func__.0+0x2c0>
    80006db0:	c789                	beqz	a5,80006dba <wfi_exception_tests_6+0x86>
    80006db2:	0002c597          	auipc	a1,0x2c
    80006db6:	90658593          	addi	a1,a1,-1786 # 800326b8 <__func__.0+0x2d0>
    80006dba:	0002c517          	auipc	a0,0x2c
    80006dbe:	93e50513          	addi	a0,a0,-1730 # 800326f8 <__func__.0+0x310>
    80006dc2:	702280ef          	jal	8002f4c4 <printf>
    80006dc6:	00055797          	auipc	a5,0x55
    80006dca:	24b7c783          	lbu	a5,587(a5) # 8005c011 <excpt+0x1>
    80006dce:	e7a1                	bnez	a5,80006e16 <wfi_exception_tests_6+0xe2>
    80006dd0:	4529                	li	a0,10
    80006dd2:	3e0270ef          	jal	8002e1b2 <putchar>
    80006dd6:	00055797          	auipc	a5,0x55
    80006dda:	23b7c783          	lbu	a5,571(a5) # 8005c011 <excpt+0x1>
    80006dde:	e795                	bnez	a5,80006e0a <wfi_exception_tests_6+0xd6>
    80006de0:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    80006de2:	0002c597          	auipc	a1,0x2c
    80006de6:	8c658593          	addi	a1,a1,-1850 # 800326a8 <__func__.0+0x2c0>
    80006dea:	0002c517          	auipc	a0,0x2c
    80006dee:	97650513          	addi	a0,a0,-1674 # 80032760 <__func__.0+0x378>
    80006df2:	6d2280ef          	jal	8002f4c4 <printf>
    80006df6:	4511                	li	a0,4
    80006df8:	91cfa0ef          	jal	80000f14 <goto_priv>
    80006dfc:	97bfa0ef          	jal	80001776 <reset_state>
}
    80006e00:	60a2                	ld	ra,8(sp)
    80006e02:	8522                	mv	a0,s0
    80006e04:	6402                	ld	s0,0(sp)
    80006e06:	0141                	addi	sp,sp,16
    80006e08:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006e0a:	4401                	li	s0,0
    TEST_END();
    80006e0c:	0002c597          	auipc	a1,0x2c
    80006e10:	8ac58593          	addi	a1,a1,-1876 # 800326b8 <__func__.0+0x2d0>
    80006e14:	bfd9                	j	80006dea <wfi_exception_tests_6+0xb6>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006e16:	0002c517          	auipc	a0,0x2c
    80006e1a:	8ea50513          	addi	a0,a0,-1814 # 80032700 <__func__.0+0x318>
    80006e1e:	6a6280ef          	jal	8002f4c4 <printf>
    80006e22:	02900513          	li	a0,41
    80006e26:	38c270ef          	jal	8002e1b2 <putchar>
    80006e2a:	b75d                	j	80006dd0 <wfi_exception_tests_6+0x9c>

0000000080006e2c <wfi_exception_tests_7>:



bool wfi_exception_tests_7() {
    80006e2c:	1141                	addi	sp,sp,-16

    TEST_START();
    80006e2e:	0002a597          	auipc	a1,0x2a
    80006e32:	85a58593          	addi	a1,a1,-1958 # 80030688 <__func__.16>
    80006e36:	0002c517          	auipc	a0,0x2c
    80006e3a:	89250513          	addi	a0,a0,-1902 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_7() {
    80006e3e:	e406                	sd	ra,8(sp)
    80006e40:	e022                	sd	s0,0(sp)
    TEST_START();
    80006e42:	682280ef          	jal	8002f4c4 <printf>
    80006e46:	4529                	li	a0,10
    80006e48:	36a270ef          	jal	8002e1b2 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006e4c:	fcdf90ef          	jal	80000e18 <test_setup_except_function>

    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M); 
    80006e50:	4511                	li	a0,4
    80006e52:	8c2fa0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006e56:	002007b7          	lui	a5,0x200
    80006e5a:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSIE, 0b0100);
    80006e5e:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006e62:	24426073          	csrsi	vsip,4
    CSRS(mideleg, 0b0100);
    80006e66:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_VS);
    80006e6a:	4509                	li	a0,2
    80006e6c:	8a8fa0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006e70:	fa9f90ef          	jal	80000e18 <test_setup_except_function>
    80006e74:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006e78:	08c00593          	li	a1,140
    80006e7c:	0002d617          	auipc	a2,0x2d
    80006e80:	e3c60613          	addi	a2,a2,-452 # 80033cb8 <__func__.0+0x18d0>
    80006e84:	0002c517          	auipc	a0,0x2c
    80006e88:	85c50513          	addi	a0,a0,-1956 # 800326e0 <__func__.0+0x2f8>
    80006e8c:	638280ef          	jal	8002f4c4 <printf>
    80006e90:	00055797          	auipc	a5,0x55
    80006e94:	1817c783          	lbu	a5,385(a5) # 8005c011 <excpt+0x1>
    80006e98:	0002c597          	auipc	a1,0x2c
    80006e9c:	81058593          	addi	a1,a1,-2032 # 800326a8 <__func__.0+0x2c0>
    80006ea0:	c789                	beqz	a5,80006eaa <wfi_exception_tests_7+0x7e>
    80006ea2:	0002c597          	auipc	a1,0x2c
    80006ea6:	81658593          	addi	a1,a1,-2026 # 800326b8 <__func__.0+0x2d0>
    80006eaa:	0002c517          	auipc	a0,0x2c
    80006eae:	84e50513          	addi	a0,a0,-1970 # 800326f8 <__func__.0+0x310>
    80006eb2:	612280ef          	jal	8002f4c4 <printf>
    80006eb6:	00055797          	auipc	a5,0x55
    80006eba:	15b7c783          	lbu	a5,347(a5) # 8005c011 <excpt+0x1>
    80006ebe:	e7a1                	bnez	a5,80006f06 <wfi_exception_tests_7+0xda>
    80006ec0:	4529                	li	a0,10
    80006ec2:	2f0270ef          	jal	8002e1b2 <putchar>
    80006ec6:	00055797          	auipc	a5,0x55
    80006eca:	14b7c783          	lbu	a5,331(a5) # 8005c011 <excpt+0x1>
    80006ece:	e795                	bnez	a5,80006efa <wfi_exception_tests_7+0xce>
    80006ed0:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006ed2:	0002b597          	auipc	a1,0x2b
    80006ed6:	7d658593          	addi	a1,a1,2006 # 800326a8 <__func__.0+0x2c0>
    80006eda:	0002c517          	auipc	a0,0x2c
    80006ede:	88650513          	addi	a0,a0,-1914 # 80032760 <__func__.0+0x378>
    80006ee2:	5e2280ef          	jal	8002f4c4 <printf>
    80006ee6:	4511                	li	a0,4
    80006ee8:	82cfa0ef          	jal	80000f14 <goto_priv>
    80006eec:	88bfa0ef          	jal	80001776 <reset_state>
}
    80006ef0:	60a2                	ld	ra,8(sp)
    80006ef2:	8522                	mv	a0,s0
    80006ef4:	6402                	ld	s0,0(sp)
    80006ef6:	0141                	addi	sp,sp,16
    80006ef8:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006efa:	4401                	li	s0,0
    TEST_END();
    80006efc:	0002b597          	auipc	a1,0x2b
    80006f00:	7bc58593          	addi	a1,a1,1980 # 800326b8 <__func__.0+0x2d0>
    80006f04:	bfd9                	j	80006eda <wfi_exception_tests_7+0xae>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006f06:	0002b517          	auipc	a0,0x2b
    80006f0a:	7fa50513          	addi	a0,a0,2042 # 80032700 <__func__.0+0x318>
    80006f0e:	5b6280ef          	jal	8002f4c4 <printf>
    80006f12:	02900513          	li	a0,41
    80006f16:	29c270ef          	jal	8002e1b2 <putchar>
    80006f1a:	b75d                	j	80006ec0 <wfi_exception_tests_7+0x94>

0000000080006f1c <wfi_exception_tests_8>:

bool wfi_exception_tests_8() {
    80006f1c:	1141                	addi	sp,sp,-16

    TEST_START();
    80006f1e:	00029597          	auipc	a1,0x29
    80006f22:	78258593          	addi	a1,a1,1922 # 800306a0 <__func__.15>
    80006f26:	0002b517          	auipc	a0,0x2b
    80006f2a:	7a250513          	addi	a0,a0,1954 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_8() {
    80006f2e:	e406                	sd	ra,8(sp)
    80006f30:	e022                	sd	s0,0(sp)
    TEST_START();
    80006f32:	592280ef          	jal	8002f4c4 <printf>
    80006f36:	4529                	li	a0,10
    80006f38:	27a270ef          	jal	8002e1b2 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断未被代理到低特权模式
    goto_priv(PRIV_M); 
    80006f3c:	4511                	li	a0,4
    80006f3e:	fd7f90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006f42:	002007b7          	lui	a5,0x200
    80006f46:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    80006f4a:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    80006f4e:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_VS);
    80006f52:	4509                	li	a0,2
    80006f54:	fc1f90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006f58:	ec1f90ef          	jal	80000e18 <test_setup_except_function>
    80006f5c:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006f60:	08c00593          	li	a1,140
    80006f64:	0002d617          	auipc	a2,0x2d
    80006f68:	dbc60613          	addi	a2,a2,-580 # 80033d20 <__func__.0+0x1938>
    80006f6c:	0002b517          	auipc	a0,0x2b
    80006f70:	77450513          	addi	a0,a0,1908 # 800326e0 <__func__.0+0x2f8>
    80006f74:	550280ef          	jal	8002f4c4 <printf>
    80006f78:	00055797          	auipc	a5,0x55
    80006f7c:	0997c783          	lbu	a5,153(a5) # 8005c011 <excpt+0x1>
    80006f80:	0002b597          	auipc	a1,0x2b
    80006f84:	72858593          	addi	a1,a1,1832 # 800326a8 <__func__.0+0x2c0>
    80006f88:	c789                	beqz	a5,80006f92 <wfi_exception_tests_8+0x76>
    80006f8a:	0002b597          	auipc	a1,0x2b
    80006f8e:	72e58593          	addi	a1,a1,1838 # 800326b8 <__func__.0+0x2d0>
    80006f92:	0002b517          	auipc	a0,0x2b
    80006f96:	76650513          	addi	a0,a0,1894 # 800326f8 <__func__.0+0x310>
    80006f9a:	52a280ef          	jal	8002f4c4 <printf>
    80006f9e:	00055797          	auipc	a5,0x55
    80006fa2:	0737c783          	lbu	a5,115(a5) # 8005c011 <excpt+0x1>
    80006fa6:	e7a1                	bnez	a5,80006fee <wfi_exception_tests_8+0xd2>
    80006fa8:	4529                	li	a0,10
    80006faa:	208270ef          	jal	8002e1b2 <putchar>
    80006fae:	00055797          	auipc	a5,0x55
    80006fb2:	0637c783          	lbu	a5,99(a5) # 8005c011 <excpt+0x1>
    80006fb6:	e795                	bnez	a5,80006fe2 <wfi_exception_tests_8+0xc6>
    80006fb8:	4405                	li	s0,1
        excpt.triggered == false
    );  

    TEST_END();
    80006fba:	0002b597          	auipc	a1,0x2b
    80006fbe:	6ee58593          	addi	a1,a1,1774 # 800326a8 <__func__.0+0x2c0>
    80006fc2:	0002b517          	auipc	a0,0x2b
    80006fc6:	79e50513          	addi	a0,a0,1950 # 80032760 <__func__.0+0x378>
    80006fca:	4fa280ef          	jal	8002f4c4 <printf>
    80006fce:	4511                	li	a0,4
    80006fd0:	f45f90ef          	jal	80000f14 <goto_priv>
    80006fd4:	fa2fa0ef          	jal	80001776 <reset_state>
}
    80006fd8:	60a2                	ld	ra,8(sp)
    80006fda:	8522                	mv	a0,s0
    80006fdc:	6402                	ld	s0,0(sp)
    80006fde:	0141                	addi	sp,sp,16
    80006fe0:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006fe2:	4401                	li	s0,0
    TEST_END();
    80006fe4:	0002b597          	auipc	a1,0x2b
    80006fe8:	6d458593          	addi	a1,a1,1748 # 800326b8 <__func__.0+0x2d0>
    80006fec:	bfd9                	j	80006fc2 <wfi_exception_tests_8+0xa6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006fee:	0002b517          	auipc	a0,0x2b
    80006ff2:	71250513          	addi	a0,a0,1810 # 80032700 <__func__.0+0x318>
    80006ff6:	4ce280ef          	jal	8002f4c4 <printf>
    80006ffa:	02900513          	li	a0,41
    80006ffe:	1b4270ef          	jal	8002e1b2 <putchar>
    80007002:	b75d                	j	80006fa8 <wfi_exception_tests_8+0x8c>

0000000080007004 <wfi_exception_tests_9>:

bool wfi_exception_tests_9() {
    80007004:	1141                	addi	sp,sp,-16

    TEST_START();
    80007006:	00029597          	auipc	a1,0x29
    8000700a:	6b258593          	addi	a1,a1,1714 # 800306b8 <__func__.14>
    8000700e:	0002b517          	auipc	a0,0x2b
    80007012:	6ba50513          	addi	a0,a0,1722 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_9() {
    80007016:	e406                	sd	ra,8(sp)
    80007018:	e022                	sd	s0,0(sp)
    TEST_START();
    8000701a:	4aa280ef          	jal	8002f4c4 <printf>
    8000701e:	4529                	li	a0,10
    80007020:	192270ef          	jal	8002e1b2 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80007024:	4511                	li	a0,4
    80007026:	eeff90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000702a:	002007b7          	lui	a5,0x200
    8000702e:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    80007032:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    80007036:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_HS);
    8000703a:	450d                	li	a0,3
    8000703c:	ed9f90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007040:	dd9f90ef          	jal	80000e18 <test_setup_except_function>
    80007044:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007048:	08c00593          	li	a1,140
    8000704c:	0002d617          	auipc	a2,0x2d
    80007050:	cd460613          	addi	a2,a2,-812 # 80033d20 <__func__.0+0x1938>
    80007054:	0002b517          	auipc	a0,0x2b
    80007058:	68c50513          	addi	a0,a0,1676 # 800326e0 <__func__.0+0x2f8>
    8000705c:	468280ef          	jal	8002f4c4 <printf>
    80007060:	00055797          	auipc	a5,0x55
    80007064:	fb17c783          	lbu	a5,-79(a5) # 8005c011 <excpt+0x1>
    80007068:	0002b597          	auipc	a1,0x2b
    8000706c:	64058593          	addi	a1,a1,1600 # 800326a8 <__func__.0+0x2c0>
    80007070:	c789                	beqz	a5,8000707a <wfi_exception_tests_9+0x76>
    80007072:	0002b597          	auipc	a1,0x2b
    80007076:	64658593          	addi	a1,a1,1606 # 800326b8 <__func__.0+0x2d0>
    8000707a:	0002b517          	auipc	a0,0x2b
    8000707e:	67e50513          	addi	a0,a0,1662 # 800326f8 <__func__.0+0x310>
    80007082:	442280ef          	jal	8002f4c4 <printf>
    80007086:	00055797          	auipc	a5,0x55
    8000708a:	f8b7c783          	lbu	a5,-117(a5) # 8005c011 <excpt+0x1>
    8000708e:	e7a1                	bnez	a5,800070d6 <wfi_exception_tests_9+0xd2>
    80007090:	4529                	li	a0,10
    80007092:	120270ef          	jal	8002e1b2 <putchar>
    80007096:	00055797          	auipc	a5,0x55
    8000709a:	f7b7c783          	lbu	a5,-133(a5) # 8005c011 <excpt+0x1>
    8000709e:	e795                	bnez	a5,800070ca <wfi_exception_tests_9+0xc6>
    800070a0:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800070a2:	0002b597          	auipc	a1,0x2b
    800070a6:	60658593          	addi	a1,a1,1542 # 800326a8 <__func__.0+0x2c0>
    800070aa:	0002b517          	auipc	a0,0x2b
    800070ae:	6b650513          	addi	a0,a0,1718 # 80032760 <__func__.0+0x378>
    800070b2:	412280ef          	jal	8002f4c4 <printf>
    800070b6:	4511                	li	a0,4
    800070b8:	e5df90ef          	jal	80000f14 <goto_priv>
    800070bc:	ebafa0ef          	jal	80001776 <reset_state>
}
    800070c0:	60a2                	ld	ra,8(sp)
    800070c2:	8522                	mv	a0,s0
    800070c4:	6402                	ld	s0,0(sp)
    800070c6:	0141                	addi	sp,sp,16
    800070c8:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800070ca:	4401                	li	s0,0
    TEST_END();
    800070cc:	0002b597          	auipc	a1,0x2b
    800070d0:	5ec58593          	addi	a1,a1,1516 # 800326b8 <__func__.0+0x2d0>
    800070d4:	bfd9                	j	800070aa <wfi_exception_tests_9+0xa6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800070d6:	0002b517          	auipc	a0,0x2b
    800070da:	62a50513          	addi	a0,a0,1578 # 80032700 <__func__.0+0x318>
    800070de:	3e6280ef          	jal	8002f4c4 <printf>
    800070e2:	02900513          	li	a0,41
    800070e6:	0cc270ef          	jal	8002e1b2 <putchar>
    800070ea:	b75d                	j	80007090 <wfi_exception_tests_9+0x8c>

00000000800070ec <wfi_exception_tests_10>:

bool wfi_exception_tests_10() {
    800070ec:	1141                	addi	sp,sp,-16

    TEST_START();
    800070ee:	00029597          	auipc	a1,0x29
    800070f2:	5e258593          	addi	a1,a1,1506 # 800306d0 <__func__.13>
    800070f6:	0002b517          	auipc	a0,0x2b
    800070fa:	5d250513          	addi	a0,a0,1490 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_10() {
    800070fe:	e406                	sd	ra,8(sp)
    80007100:	e022                	sd	s0,0(sp)
    TEST_START();
    80007102:	3c2280ef          	jal	8002f4c4 <printf>
    80007106:	4529                	li	a0,10
    80007108:	0aa270ef          	jal	8002e1b2 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    8000710c:	4511                	li	a0,4
    8000710e:	e07f90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007112:	002007b7          	lui	a5,0x200
    80007116:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_MIE, 0x0);
    8000711a:	30406073          	csrsi	mie,0
    CSRS(mideleg, 0x0);
    8000711e:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_M);
    80007122:	4511                	li	a0,4
    80007124:	df1f90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007128:	cf1f90ef          	jal	80000e18 <test_setup_except_function>
    8000712c:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007130:	08c00593          	li	a1,140
    80007134:	0002d617          	auipc	a2,0x2d
    80007138:	c3460613          	addi	a2,a2,-972 # 80033d68 <__func__.0+0x1980>
    8000713c:	0002b517          	auipc	a0,0x2b
    80007140:	5a450513          	addi	a0,a0,1444 # 800326e0 <__func__.0+0x2f8>
    80007144:	380280ef          	jal	8002f4c4 <printf>
    80007148:	00055797          	auipc	a5,0x55
    8000714c:	ec97c783          	lbu	a5,-311(a5) # 8005c011 <excpt+0x1>
    80007150:	0002b597          	auipc	a1,0x2b
    80007154:	55858593          	addi	a1,a1,1368 # 800326a8 <__func__.0+0x2c0>
    80007158:	c789                	beqz	a5,80007162 <wfi_exception_tests_10+0x76>
    8000715a:	0002b597          	auipc	a1,0x2b
    8000715e:	55e58593          	addi	a1,a1,1374 # 800326b8 <__func__.0+0x2d0>
    80007162:	0002b517          	auipc	a0,0x2b
    80007166:	59650513          	addi	a0,a0,1430 # 800326f8 <__func__.0+0x310>
    8000716a:	35a280ef          	jal	8002f4c4 <printf>
    8000716e:	00055797          	auipc	a5,0x55
    80007172:	ea37c783          	lbu	a5,-349(a5) # 8005c011 <excpt+0x1>
    80007176:	e7a1                	bnez	a5,800071be <wfi_exception_tests_10+0xd2>
    80007178:	4529                	li	a0,10
    8000717a:	038270ef          	jal	8002e1b2 <putchar>
    8000717e:	00055797          	auipc	a5,0x55
    80007182:	e937c783          	lbu	a5,-365(a5) # 8005c011 <excpt+0x1>
    80007186:	e795                	bnez	a5,800071b2 <wfi_exception_tests_10+0xc6>
    80007188:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    8000718a:	0002b597          	auipc	a1,0x2b
    8000718e:	51e58593          	addi	a1,a1,1310 # 800326a8 <__func__.0+0x2c0>
    80007192:	0002b517          	auipc	a0,0x2b
    80007196:	5ce50513          	addi	a0,a0,1486 # 80032760 <__func__.0+0x378>
    8000719a:	32a280ef          	jal	8002f4c4 <printf>
    8000719e:	4511                	li	a0,4
    800071a0:	d75f90ef          	jal	80000f14 <goto_priv>
    800071a4:	dd2fa0ef          	jal	80001776 <reset_state>
}
    800071a8:	60a2                	ld	ra,8(sp)
    800071aa:	8522                	mv	a0,s0
    800071ac:	6402                	ld	s0,0(sp)
    800071ae:	0141                	addi	sp,sp,16
    800071b0:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800071b2:	4401                	li	s0,0
    TEST_END();
    800071b4:	0002b597          	auipc	a1,0x2b
    800071b8:	50458593          	addi	a1,a1,1284 # 800326b8 <__func__.0+0x2d0>
    800071bc:	bfd9                	j	80007192 <wfi_exception_tests_10+0xa6>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800071be:	0002b517          	auipc	a0,0x2b
    800071c2:	54250513          	addi	a0,a0,1346 # 80032700 <__func__.0+0x318>
    800071c6:	2fe280ef          	jal	8002f4c4 <printf>
    800071ca:	02900513          	li	a0,41
    800071ce:	7e5260ef          	jal	8002e1b2 <putchar>
    800071d2:	b75d                	j	80007178 <wfi_exception_tests_10+0x8c>

00000000800071d4 <wfi_exception_tests_11>:

bool wfi_exception_tests_11() {
    800071d4:	1141                	addi	sp,sp,-16

    TEST_START();
    800071d6:	00029597          	auipc	a1,0x29
    800071da:	51258593          	addi	a1,a1,1298 # 800306e8 <__func__.12>
    800071de:	0002b517          	auipc	a0,0x2b
    800071e2:	4ea50513          	addi	a0,a0,1258 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_11() {
    800071e6:	e406                	sd	ra,8(sp)
    800071e8:	e022                	sd	s0,0(sp)
    TEST_START();
    800071ea:	2da280ef          	jal	8002f4c4 <printf>
    800071ee:	4529                	li	a0,10
    800071f0:	7c3260ef          	jal	8002e1b2 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断被代理到低特权模式
    goto_priv(PRIV_M); 
    800071f4:	4511                	li	a0,4
    800071f6:	d1ff90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800071fa:	002007b7          	lui	a5,0x200
    800071fe:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    80007202:	10405073          	csrwi	sie,0

    CSRW(mideleg, (uint64_t)-1);
    80007206:	57fd                	li	a5,-1
    80007208:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    8000720c:	4509                	li	a0,2
    8000720e:	d07f90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007212:	c07f90ef          	jal	80000e18 <test_setup_except_function>
    80007216:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000721a:	08c00593          	li	a1,140
    8000721e:	0002d617          	auipc	a2,0x2d
    80007222:	b9260613          	addi	a2,a2,-1134 # 80033db0 <__func__.0+0x19c8>
    80007226:	0002b517          	auipc	a0,0x2b
    8000722a:	4ba50513          	addi	a0,a0,1210 # 800326e0 <__func__.0+0x2f8>
    8000722e:	296280ef          	jal	8002f4c4 <printf>
    80007232:	00055797          	auipc	a5,0x55
    80007236:	ddf7c783          	lbu	a5,-545(a5) # 8005c011 <excpt+0x1>
    8000723a:	0002b597          	auipc	a1,0x2b
    8000723e:	46e58593          	addi	a1,a1,1134 # 800326a8 <__func__.0+0x2c0>
    80007242:	c789                	beqz	a5,8000724c <wfi_exception_tests_11+0x78>
    80007244:	0002b597          	auipc	a1,0x2b
    80007248:	47458593          	addi	a1,a1,1140 # 800326b8 <__func__.0+0x2d0>
    8000724c:	0002b517          	auipc	a0,0x2b
    80007250:	4ac50513          	addi	a0,a0,1196 # 800326f8 <__func__.0+0x310>
    80007254:	270280ef          	jal	8002f4c4 <printf>
    80007258:	00055797          	auipc	a5,0x55
    8000725c:	db97c783          	lbu	a5,-583(a5) # 8005c011 <excpt+0x1>
    80007260:	e7a1                	bnez	a5,800072a8 <wfi_exception_tests_11+0xd4>
    80007262:	4529                	li	a0,10
    80007264:	74f260ef          	jal	8002e1b2 <putchar>
    80007268:	00055797          	auipc	a5,0x55
    8000726c:	da97c783          	lbu	a5,-599(a5) # 8005c011 <excpt+0x1>
    80007270:	e795                	bnez	a5,8000729c <wfi_exception_tests_11+0xc8>
    80007272:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007274:	0002b597          	auipc	a1,0x2b
    80007278:	43458593          	addi	a1,a1,1076 # 800326a8 <__func__.0+0x2c0>
    8000727c:	0002b517          	auipc	a0,0x2b
    80007280:	4e450513          	addi	a0,a0,1252 # 80032760 <__func__.0+0x378>
    80007284:	240280ef          	jal	8002f4c4 <printf>
    80007288:	4511                	li	a0,4
    8000728a:	c8bf90ef          	jal	80000f14 <goto_priv>
    8000728e:	ce8fa0ef          	jal	80001776 <reset_state>
}
    80007292:	60a2                	ld	ra,8(sp)
    80007294:	8522                	mv	a0,s0
    80007296:	6402                	ld	s0,0(sp)
    80007298:	0141                	addi	sp,sp,16
    8000729a:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000729c:	4401                	li	s0,0
    TEST_END();
    8000729e:	0002b597          	auipc	a1,0x2b
    800072a2:	41a58593          	addi	a1,a1,1050 # 800326b8 <__func__.0+0x2d0>
    800072a6:	bfd9                	j	8000727c <wfi_exception_tests_11+0xa8>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800072a8:	0002b517          	auipc	a0,0x2b
    800072ac:	45850513          	addi	a0,a0,1112 # 80032700 <__func__.0+0x318>
    800072b0:	214280ef          	jal	8002f4c4 <printf>
    800072b4:	02900513          	li	a0,41
    800072b8:	6fb260ef          	jal	8002e1b2 <putchar>
    800072bc:	b75d                	j	80007262 <wfi_exception_tests_11+0x8e>

00000000800072be <wfi_exception_tests_12>:

bool wfi_exception_tests_12() {
    800072be:	1141                	addi	sp,sp,-16

    TEST_START();
    800072c0:	00029597          	auipc	a1,0x29
    800072c4:	44058593          	addi	a1,a1,1088 # 80030700 <__func__.11>
    800072c8:	0002b517          	auipc	a0,0x2b
    800072cc:	40050513          	addi	a0,a0,1024 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_12() {
    800072d0:	e406                	sd	ra,8(sp)
    800072d2:	e022                	sd	s0,0(sp)
    TEST_START();
    800072d4:	1f0280ef          	jal	8002f4c4 <printf>
    800072d8:	4529                	li	a0,10
    800072da:	6d9260ef          	jal	8002e1b2 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800072de:	4511                	li	a0,4
    800072e0:	c35f90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800072e4:	002007b7          	lui	a5,0x200
    800072e8:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    800072ec:	10405073          	csrwi	sie,0
    CSRW(mideleg, (uint64_t)-1);
    800072f0:	57fd                	li	a5,-1
    800072f2:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_HS);
    800072f6:	450d                	li	a0,3
    800072f8:	c1df90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800072fc:	b1df90ef          	jal	80000e18 <test_setup_except_function>
    80007300:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007304:	08c00593          	li	a1,140
    80007308:	0002d617          	auipc	a2,0x2d
    8000730c:	aa860613          	addi	a2,a2,-1368 # 80033db0 <__func__.0+0x19c8>
    80007310:	0002b517          	auipc	a0,0x2b
    80007314:	3d050513          	addi	a0,a0,976 # 800326e0 <__func__.0+0x2f8>
    80007318:	1ac280ef          	jal	8002f4c4 <printf>
    8000731c:	00055797          	auipc	a5,0x55
    80007320:	cf57c783          	lbu	a5,-779(a5) # 8005c011 <excpt+0x1>
    80007324:	0002b597          	auipc	a1,0x2b
    80007328:	38458593          	addi	a1,a1,900 # 800326a8 <__func__.0+0x2c0>
    8000732c:	c789                	beqz	a5,80007336 <wfi_exception_tests_12+0x78>
    8000732e:	0002b597          	auipc	a1,0x2b
    80007332:	38a58593          	addi	a1,a1,906 # 800326b8 <__func__.0+0x2d0>
    80007336:	0002b517          	auipc	a0,0x2b
    8000733a:	3c250513          	addi	a0,a0,962 # 800326f8 <__func__.0+0x310>
    8000733e:	186280ef          	jal	8002f4c4 <printf>
    80007342:	00055797          	auipc	a5,0x55
    80007346:	ccf7c783          	lbu	a5,-817(a5) # 8005c011 <excpt+0x1>
    8000734a:	e7a1                	bnez	a5,80007392 <wfi_exception_tests_12+0xd4>
    8000734c:	4529                	li	a0,10
    8000734e:	665260ef          	jal	8002e1b2 <putchar>
    80007352:	00055797          	auipc	a5,0x55
    80007356:	cbf7c783          	lbu	a5,-833(a5) # 8005c011 <excpt+0x1>
    8000735a:	e795                	bnez	a5,80007386 <wfi_exception_tests_12+0xc8>
    8000735c:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    8000735e:	0002b597          	auipc	a1,0x2b
    80007362:	34a58593          	addi	a1,a1,842 # 800326a8 <__func__.0+0x2c0>
    80007366:	0002b517          	auipc	a0,0x2b
    8000736a:	3fa50513          	addi	a0,a0,1018 # 80032760 <__func__.0+0x378>
    8000736e:	156280ef          	jal	8002f4c4 <printf>
    80007372:	4511                	li	a0,4
    80007374:	ba1f90ef          	jal	80000f14 <goto_priv>
    80007378:	bfefa0ef          	jal	80001776 <reset_state>
}
    8000737c:	60a2                	ld	ra,8(sp)
    8000737e:	8522                	mv	a0,s0
    80007380:	6402                	ld	s0,0(sp)
    80007382:	0141                	addi	sp,sp,16
    80007384:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007386:	4401                	li	s0,0
    TEST_END();
    80007388:	0002b597          	auipc	a1,0x2b
    8000738c:	33058593          	addi	a1,a1,816 # 800326b8 <__func__.0+0x2d0>
    80007390:	bfd9                	j	80007366 <wfi_exception_tests_12+0xa8>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007392:	0002b517          	auipc	a0,0x2b
    80007396:	36e50513          	addi	a0,a0,878 # 80032700 <__func__.0+0x318>
    8000739a:	12a280ef          	jal	8002f4c4 <printf>
    8000739e:	02900513          	li	a0,41
    800073a2:	611260ef          	jal	8002e1b2 <putchar>
    800073a6:	b75d                	j	8000734c <wfi_exception_tests_12+0x8e>

00000000800073a8 <wfi_exception_tests_13>:

bool wfi_exception_tests_13() {
    800073a8:	1141                	addi	sp,sp,-16

    TEST_START();
    800073aa:	00029597          	auipc	a1,0x29
    800073ae:	36e58593          	addi	a1,a1,878 # 80030718 <__func__.10>
    800073b2:	0002b517          	auipc	a0,0x2b
    800073b6:	31650513          	addi	a0,a0,790 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_13() {
    800073ba:	e406                	sd	ra,8(sp)
    800073bc:	e022                	sd	s0,0(sp)
    TEST_START();
    800073be:	106280ef          	jal	8002f4c4 <printf>
    800073c2:	4529                	li	a0,10
    800073c4:	5ef260ef          	jal	8002e1b2 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800073c8:	4511                	li	a0,4
    800073ca:	b4bf90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800073ce:	002007b7          	lui	a5,0x200
    800073d2:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_MIE, 0x0);
    800073d6:	30405073          	csrwi	mie,0
    CSRW(mideleg, (uint64_t)-1);
    800073da:	57fd                	li	a5,-1
    800073dc:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_M);
    800073e0:	4511                	li	a0,4
    800073e2:	b33f90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800073e6:	a33f90ef          	jal	80000e18 <test_setup_except_function>
    800073ea:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800073ee:	08c00593          	li	a1,140
    800073f2:	0002d617          	auipc	a2,0x2d
    800073f6:	a0660613          	addi	a2,a2,-1530 # 80033df8 <__func__.0+0x1a10>
    800073fa:	0002b517          	auipc	a0,0x2b
    800073fe:	2e650513          	addi	a0,a0,742 # 800326e0 <__func__.0+0x2f8>
    80007402:	0c2280ef          	jal	8002f4c4 <printf>
    80007406:	00055797          	auipc	a5,0x55
    8000740a:	c0b7c783          	lbu	a5,-1013(a5) # 8005c011 <excpt+0x1>
    8000740e:	0002b597          	auipc	a1,0x2b
    80007412:	29a58593          	addi	a1,a1,666 # 800326a8 <__func__.0+0x2c0>
    80007416:	c789                	beqz	a5,80007420 <wfi_exception_tests_13+0x78>
    80007418:	0002b597          	auipc	a1,0x2b
    8000741c:	2a058593          	addi	a1,a1,672 # 800326b8 <__func__.0+0x2d0>
    80007420:	0002b517          	auipc	a0,0x2b
    80007424:	2d850513          	addi	a0,a0,728 # 800326f8 <__func__.0+0x310>
    80007428:	09c280ef          	jal	8002f4c4 <printf>
    8000742c:	00055797          	auipc	a5,0x55
    80007430:	be57c783          	lbu	a5,-1051(a5) # 8005c011 <excpt+0x1>
    80007434:	e7a1                	bnez	a5,8000747c <wfi_exception_tests_13+0xd4>
    80007436:	4529                	li	a0,10
    80007438:	57b260ef          	jal	8002e1b2 <putchar>
    8000743c:	00055797          	auipc	a5,0x55
    80007440:	bd57c783          	lbu	a5,-1067(a5) # 8005c011 <excpt+0x1>
    80007444:	e795                	bnez	a5,80007470 <wfi_exception_tests_13+0xc8>
    80007446:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007448:	0002b597          	auipc	a1,0x2b
    8000744c:	26058593          	addi	a1,a1,608 # 800326a8 <__func__.0+0x2c0>
    80007450:	0002b517          	auipc	a0,0x2b
    80007454:	31050513          	addi	a0,a0,784 # 80032760 <__func__.0+0x378>
    80007458:	06c280ef          	jal	8002f4c4 <printf>
    8000745c:	4511                	li	a0,4
    8000745e:	ab7f90ef          	jal	80000f14 <goto_priv>
    80007462:	b14fa0ef          	jal	80001776 <reset_state>
}
    80007466:	60a2                	ld	ra,8(sp)
    80007468:	8522                	mv	a0,s0
    8000746a:	6402                	ld	s0,0(sp)
    8000746c:	0141                	addi	sp,sp,16
    8000746e:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007470:	4401                	li	s0,0
    TEST_END();
    80007472:	0002b597          	auipc	a1,0x2b
    80007476:	24658593          	addi	a1,a1,582 # 800326b8 <__func__.0+0x2d0>
    8000747a:	bfd9                	j	80007450 <wfi_exception_tests_13+0xa8>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000747c:	0002b517          	auipc	a0,0x2b
    80007480:	28450513          	addi	a0,a0,644 # 80032700 <__func__.0+0x318>
    80007484:	040280ef          	jal	8002f4c4 <printf>
    80007488:	02900513          	li	a0,41
    8000748c:	527260ef          	jal	8002e1b2 <putchar>
    80007490:	b75d                	j	80007436 <wfi_exception_tests_13+0x8e>

0000000080007492 <wfi_exception_tests_14>:

bool wfi_exception_tests_14() {
    80007492:	1141                	addi	sp,sp,-16

    TEST_START();
    80007494:	00029597          	auipc	a1,0x29
    80007498:	29c58593          	addi	a1,a1,668 # 80030730 <__func__.9>
    8000749c:	0002b517          	auipc	a0,0x2b
    800074a0:	22c50513          	addi	a0,a0,556 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_14() {
    800074a4:	e406                	sd	ra,8(sp)
    800074a6:	e022                	sd	s0,0(sp)
    TEST_START();
    800074a8:	01c280ef          	jal	8002f4c4 <printf>
    800074ac:	4529                	li	a0,10
    800074ae:	505260ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    800074b2:	4511                	li	a0,4
    800074b4:	a61f90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800074b8:	002007b7          	lui	a5,0x200
    800074bc:	3007b073          	csrc	mstatus,a5
    CSRS(mideleg, 0b0100); 
    800074c0:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIE, 0b0100);
    800074c4:	60426073          	csrsi	hie,4

    goto_priv(PRIV_VS);
    800074c8:	4509                	li	a0,2
    800074ca:	a4bf90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800074ce:	94bf90ef          	jal	80000e18 <test_setup_except_function>
    800074d2:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800074d6:	08c00593          	li	a1,140
    800074da:	0002c617          	auipc	a2,0x2c
    800074de:	7de60613          	addi	a2,a2,2014 # 80033cb8 <__func__.0+0x18d0>
    800074e2:	0002b517          	auipc	a0,0x2b
    800074e6:	1fe50513          	addi	a0,a0,510 # 800326e0 <__func__.0+0x2f8>
    800074ea:	7db270ef          	jal	8002f4c4 <printf>
    800074ee:	00055797          	auipc	a5,0x55
    800074f2:	b237c783          	lbu	a5,-1245(a5) # 8005c011 <excpt+0x1>
    800074f6:	0002b597          	auipc	a1,0x2b
    800074fa:	1b258593          	addi	a1,a1,434 # 800326a8 <__func__.0+0x2c0>
    800074fe:	c789                	beqz	a5,80007508 <wfi_exception_tests_14+0x76>
    80007500:	0002b597          	auipc	a1,0x2b
    80007504:	1b858593          	addi	a1,a1,440 # 800326b8 <__func__.0+0x2d0>
    80007508:	0002b517          	auipc	a0,0x2b
    8000750c:	1f050513          	addi	a0,a0,496 # 800326f8 <__func__.0+0x310>
    80007510:	7b5270ef          	jal	8002f4c4 <printf>
    80007514:	00055797          	auipc	a5,0x55
    80007518:	afd7c783          	lbu	a5,-1283(a5) # 8005c011 <excpt+0x1>
    8000751c:	e7a1                	bnez	a5,80007564 <wfi_exception_tests_14+0xd2>
    8000751e:	4529                	li	a0,10
    80007520:	493260ef          	jal	8002e1b2 <putchar>
    80007524:	00055797          	auipc	a5,0x55
    80007528:	aed7c783          	lbu	a5,-1299(a5) # 8005c011 <excpt+0x1>
    8000752c:	e795                	bnez	a5,80007558 <wfi_exception_tests_14+0xc6>
    8000752e:	4405                	li	s0,1
        excpt.triggered == false
    ); 
    
    TEST_END();
    80007530:	0002b597          	auipc	a1,0x2b
    80007534:	17858593          	addi	a1,a1,376 # 800326a8 <__func__.0+0x2c0>
    80007538:	0002b517          	auipc	a0,0x2b
    8000753c:	22850513          	addi	a0,a0,552 # 80032760 <__func__.0+0x378>
    80007540:	785270ef          	jal	8002f4c4 <printf>
    80007544:	4511                	li	a0,4
    80007546:	9cff90ef          	jal	80000f14 <goto_priv>
    8000754a:	a2cfa0ef          	jal	80001776 <reset_state>
}
    8000754e:	60a2                	ld	ra,8(sp)
    80007550:	8522                	mv	a0,s0
    80007552:	6402                	ld	s0,0(sp)
    80007554:	0141                	addi	sp,sp,16
    80007556:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007558:	4401                	li	s0,0
    TEST_END();
    8000755a:	0002b597          	auipc	a1,0x2b
    8000755e:	15e58593          	addi	a1,a1,350 # 800326b8 <__func__.0+0x2d0>
    80007562:	bfd9                	j	80007538 <wfi_exception_tests_14+0xa6>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007564:	0002b517          	auipc	a0,0x2b
    80007568:	19c50513          	addi	a0,a0,412 # 80032700 <__func__.0+0x318>
    8000756c:	759270ef          	jal	8002f4c4 <printf>
    80007570:	02900513          	li	a0,41
    80007574:	43f260ef          	jal	8002e1b2 <putchar>
    80007578:	b75d                	j	8000751e <wfi_exception_tests_14+0x8c>

000000008000757a <wfi_exception_tests_15>:



bool wfi_exception_tests_15() {
    8000757a:	1101                	addi	sp,sp,-32

    TEST_START();
    8000757c:	00029597          	auipc	a1,0x29
    80007580:	1cc58593          	addi	a1,a1,460 # 80030748 <__func__.8>
    80007584:	0002b517          	auipc	a0,0x2b
    80007588:	14450513          	addi	a0,a0,324 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_15() {
    8000758c:	ec06                	sd	ra,24(sp)
    8000758e:	e822                	sd	s0,16(sp)
    80007590:	e426                	sd	s1,8(sp)
    TEST_START();
    80007592:	733270ef          	jal	8002f4c4 <printf>
    80007596:	4529                	li	a0,10
    80007598:	41b260ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8000759c:	4511                	li	a0,4
    8000759e:	977f90ef          	jal	80000f14 <goto_priv>
    CSRS(mstatus, MSTATUS_TW);
    800075a2:	002007b7          	lui	a5,0x200
    800075a6:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800075aa:	450d                	li	a0,3
    800075ac:	969f90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800075b0:	869f90ef          	jal	80000e18 <test_setup_except_function>
    800075b4:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    800075b8:	08c00593          	li	a1,140
    800075bc:	0002d617          	auipc	a2,0x2d
    800075c0:	88460613          	addi	a2,a2,-1916 # 80033e40 <__func__.0+0x1a58>
    800075c4:	0002b517          	auipc	a0,0x2b
    800075c8:	11c50513          	addi	a0,a0,284 # 800326e0 <__func__.0+0x2f8>
    800075cc:	6f9270ef          	jal	8002f4c4 <printf>
    800075d0:	00055797          	auipc	a5,0x55
    800075d4:	a417c783          	lbu	a5,-1471(a5) # 8005c011 <excpt+0x1>
    800075d8:	00055497          	auipc	s1,0x55
    800075dc:	a3848493          	addi	s1,s1,-1480 # 8005c010 <excpt>
    800075e0:	0002b597          	auipc	a1,0x2b
    800075e4:	0d858593          	addi	a1,a1,216 # 800326b8 <__func__.0+0x2d0>
    800075e8:	cf89                	beqz	a5,80007602 <wfi_exception_tests_15+0x88>
    800075ea:	6498                	ld	a4,8(s1)
    800075ec:	4789                	li	a5,2
    800075ee:	0002b597          	auipc	a1,0x2b
    800075f2:	0ba58593          	addi	a1,a1,186 # 800326a8 <__func__.0+0x2c0>
    800075f6:	00f70663          	beq	a4,a5,80007602 <wfi_exception_tests_15+0x88>
    800075fa:	0002b597          	auipc	a1,0x2b
    800075fe:	0be58593          	addi	a1,a1,190 # 800326b8 <__func__.0+0x2d0>
    80007602:	0002b517          	auipc	a0,0x2b
    80007606:	0f650513          	addi	a0,a0,246 # 800326f8 <__func__.0+0x310>
    8000760a:	6bb270ef          	jal	8002f4c4 <printf>
    8000760e:	00055797          	auipc	a5,0x55
    80007612:	a037c783          	lbu	a5,-1533(a5) # 8005c011 <excpt+0x1>
    80007616:	c789                	beqz	a5,80007620 <wfi_exception_tests_15+0xa6>
    80007618:	6498                	ld	a4,8(s1)
    8000761a:	4789                	li	a5,2
    8000761c:	00f70c63          	beq	a4,a5,80007634 <wfi_exception_tests_15+0xba>
    80007620:	0002b517          	auipc	a0,0x2b
    80007624:	0e050513          	addi	a0,a0,224 # 80032700 <__func__.0+0x318>
    80007628:	69d270ef          	jal	8002f4c4 <printf>
    8000762c:	02900513          	li	a0,41
    80007630:	383260ef          	jal	8002e1b2 <putchar>
    80007634:	4529                	li	a0,10
    80007636:	37d260ef          	jal	8002e1b2 <putchar>
    8000763a:	00055417          	auipc	s0,0x55
    8000763e:	9d744403          	lbu	s0,-1577(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80007642:	0002b597          	auipc	a1,0x2b
    80007646:	07658593          	addi	a1,a1,118 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    8000764a:	cc11                	beqz	s0,80007666 <wfi_exception_tests_15+0xec>
    8000764c:	6498                	ld	a4,8(s1)
    8000764e:	4789                	li	a5,2
    TEST_END();
    80007650:	0002b597          	auipc	a1,0x2b
    80007654:	05858593          	addi	a1,a1,88 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    80007658:	00f70763          	beq	a4,a5,80007666 <wfi_exception_tests_15+0xec>
    8000765c:	4401                	li	s0,0
    TEST_END();
    8000765e:	0002b597          	auipc	a1,0x2b
    80007662:	05a58593          	addi	a1,a1,90 # 800326b8 <__func__.0+0x2d0>
    80007666:	0002b517          	auipc	a0,0x2b
    8000766a:	0fa50513          	addi	a0,a0,250 # 80032760 <__func__.0+0x378>
    8000766e:	657270ef          	jal	8002f4c4 <printf>
    80007672:	4511                	li	a0,4
    80007674:	8a1f90ef          	jal	80000f14 <goto_priv>
    80007678:	8fefa0ef          	jal	80001776 <reset_state>
}
    8000767c:	60e2                	ld	ra,24(sp)
    8000767e:	8522                	mv	a0,s0
    80007680:	6442                	ld	s0,16(sp)
    80007682:	64a2                	ld	s1,8(sp)
    80007684:	6105                	addi	sp,sp,32
    80007686:	8082                	ret

0000000080007688 <wfi_exception_tests_16>:
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to vs.
     */


bool wfi_exception_tests_16() {
    80007688:	1101                	addi	sp,sp,-32

    TEST_START();
    8000768a:	00029597          	auipc	a1,0x29
    8000768e:	0d658593          	addi	a1,a1,214 # 80030760 <__func__.7>
    80007692:	0002b517          	auipc	a0,0x2b
    80007696:	03650513          	addi	a0,a0,54 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_16() {
    8000769a:	ec06                	sd	ra,24(sp)
    8000769c:	e822                	sd	s0,16(sp)
    8000769e:	e426                	sd	s1,8(sp)
    TEST_START();
    800076a0:	625270ef          	jal	8002f4c4 <printf>
    800076a4:	4529                	li	a0,10
    800076a6:	30d260ef          	jal	8002e1b2 <putchar>
    CSRS(mstatus, MSTATUS_TW);
    800076aa:	002007b7          	lui	a5,0x200
    800076ae:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HIDELEG, 0b0100);      
    800076b2:	60326073          	csrsi	hideleg,4
    CSRS(CSR_VSIE, 0b0010);           
    800076b6:	20416073          	csrsi	vsie,2
    
    goto_priv(PRIV_VS);
    800076ba:	4509                	li	a0,2
    800076bc:	859f90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800076c0:	f58f90ef          	jal	80000e18 <test_setup_except_function>
    800076c4:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    800076c8:	08c00593          	li	a1,140
    800076cc:	0002c617          	auipc	a2,0x2c
    800076d0:	7bc60613          	addi	a2,a2,1980 # 80033e88 <__func__.0+0x1aa0>
    800076d4:	0002b517          	auipc	a0,0x2b
    800076d8:	00c50513          	addi	a0,a0,12 # 800326e0 <__func__.0+0x2f8>
    800076dc:	5e9270ef          	jal	8002f4c4 <printf>
    800076e0:	00055797          	auipc	a5,0x55
    800076e4:	9317c783          	lbu	a5,-1743(a5) # 8005c011 <excpt+0x1>
    800076e8:	00055497          	auipc	s1,0x55
    800076ec:	92848493          	addi	s1,s1,-1752 # 8005c010 <excpt>
    800076f0:	0002b597          	auipc	a1,0x2b
    800076f4:	fc858593          	addi	a1,a1,-56 # 800326b8 <__func__.0+0x2d0>
    800076f8:	cf89                	beqz	a5,80007712 <wfi_exception_tests_16+0x8a>
    800076fa:	6498                	ld	a4,8(s1)
    800076fc:	4789                	li	a5,2
    800076fe:	0002b597          	auipc	a1,0x2b
    80007702:	faa58593          	addi	a1,a1,-86 # 800326a8 <__func__.0+0x2c0>
    80007706:	00f70663          	beq	a4,a5,80007712 <wfi_exception_tests_16+0x8a>
    8000770a:	0002b597          	auipc	a1,0x2b
    8000770e:	fae58593          	addi	a1,a1,-82 # 800326b8 <__func__.0+0x2d0>
    80007712:	0002b517          	auipc	a0,0x2b
    80007716:	fe650513          	addi	a0,a0,-26 # 800326f8 <__func__.0+0x310>
    8000771a:	5ab270ef          	jal	8002f4c4 <printf>
    8000771e:	00055797          	auipc	a5,0x55
    80007722:	8f37c783          	lbu	a5,-1805(a5) # 8005c011 <excpt+0x1>
    80007726:	c789                	beqz	a5,80007730 <wfi_exception_tests_16+0xa8>
    80007728:	6498                	ld	a4,8(s1)
    8000772a:	4789                	li	a5,2
    8000772c:	00f70c63          	beq	a4,a5,80007744 <wfi_exception_tests_16+0xbc>
    80007730:	0002b517          	auipc	a0,0x2b
    80007734:	fd050513          	addi	a0,a0,-48 # 80032700 <__func__.0+0x318>
    80007738:	58d270ef          	jal	8002f4c4 <printf>
    8000773c:	02900513          	li	a0,41
    80007740:	273260ef          	jal	8002e1b2 <putchar>
    80007744:	4529                	li	a0,10
    80007746:	26d260ef          	jal	8002e1b2 <putchar>
    8000774a:	00055417          	auipc	s0,0x55
    8000774e:	8c744403          	lbu	s0,-1849(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    goto_priv(PRIV_M);
    80007752:	4511                	li	a0,4
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007754:	c409                	beqz	s0,8000775e <wfi_exception_tests_16+0xd6>
    80007756:	6498                	ld	a4,8(s1)
    80007758:	4789                	li	a5,2
    8000775a:	02f70e63          	beq	a4,a5,80007796 <wfi_exception_tests_16+0x10e>
    goto_priv(PRIV_M);
    8000775e:	fb6f90ef          	jal	80000f14 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80007762:	002007b7          	lui	a5,0x200
    80007766:	3007b073          	csrc	mstatus,a5
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    8000776a:	4401                	li	s0,0
    TEST_END();
    8000776c:	0002b597          	auipc	a1,0x2b
    80007770:	f4c58593          	addi	a1,a1,-180 # 800326b8 <__func__.0+0x2d0>
    80007774:	0002b517          	auipc	a0,0x2b
    80007778:	fec50513          	addi	a0,a0,-20 # 80032760 <__func__.0+0x378>
    8000777c:	549270ef          	jal	8002f4c4 <printf>
    80007780:	4511                	li	a0,4
    80007782:	f92f90ef          	jal	80000f14 <goto_priv>
    80007786:	ff1f90ef          	jal	80001776 <reset_state>
}
    8000778a:	60e2                	ld	ra,24(sp)
    8000778c:	8522                	mv	a0,s0
    8000778e:	6442                	ld	s0,16(sp)
    80007790:	64a2                	ld	s1,8(sp)
    80007792:	6105                	addi	sp,sp,32
    80007794:	8082                	ret
    goto_priv(PRIV_M);
    80007796:	f7ef90ef          	jal	80000f14 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    8000779a:	002007b7          	lui	a5,0x200
    8000779e:	3007b073          	csrc	mstatus,a5
    TEST_END();
    800077a2:	0002b597          	auipc	a1,0x2b
    800077a6:	f0658593          	addi	a1,a1,-250 # 800326a8 <__func__.0+0x2c0>
    800077aa:	b7e9                	j	80007774 <wfi_exception_tests_16+0xec>

00000000800077ac <wfi_exception_tests_17>:

bool wfi_exception_tests_17() {
    800077ac:	1141                	addi	sp,sp,-16

    TEST_START();
    800077ae:	00029597          	auipc	a1,0x29
    800077b2:	fca58593          	addi	a1,a1,-54 # 80030778 <__func__.6>
    800077b6:	0002b517          	auipc	a0,0x2b
    800077ba:	f1250513          	addi	a0,a0,-238 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_17() {
    800077be:	e406                	sd	ra,8(sp)
    800077c0:	e022                	sd	s0,0(sp)
    TEST_START();
    800077c2:	503270ef          	jal	8002f4c4 <printf>
    800077c6:	4529                	li	a0,10
    800077c8:	1eb260ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    800077cc:	4511                	li	a0,4
    800077ce:	f46f90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800077d2:	002007b7          	lui	a5,0x200
    800077d6:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_HSTATUS,HSTATUS_VTW);
    800077da:	6007b073          	csrc	hstatus,a5

    goto_priv(PRIV_VS);
    800077de:	4509                	li	a0,2
    800077e0:	f34f90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800077e4:	e34f90ef          	jal	80000e18 <test_setup_except_function>
    800077e8:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    800077ec:	08c00593          	li	a1,140
    800077f0:	0002c617          	auipc	a2,0x2c
    800077f4:	6e060613          	addi	a2,a2,1760 # 80033ed0 <__func__.0+0x1ae8>
    800077f8:	0002b517          	auipc	a0,0x2b
    800077fc:	ee850513          	addi	a0,a0,-280 # 800326e0 <__func__.0+0x2f8>
    80007800:	4c5270ef          	jal	8002f4c4 <printf>
    80007804:	00055797          	auipc	a5,0x55
    80007808:	80d7c783          	lbu	a5,-2035(a5) # 8005c011 <excpt+0x1>
    8000780c:	0002b597          	auipc	a1,0x2b
    80007810:	e9c58593          	addi	a1,a1,-356 # 800326a8 <__func__.0+0x2c0>
    80007814:	c789                	beqz	a5,8000781e <wfi_exception_tests_17+0x72>
    80007816:	0002b597          	auipc	a1,0x2b
    8000781a:	ea258593          	addi	a1,a1,-350 # 800326b8 <__func__.0+0x2d0>
    8000781e:	0002b517          	auipc	a0,0x2b
    80007822:	eda50513          	addi	a0,a0,-294 # 800326f8 <__func__.0+0x310>
    80007826:	49f270ef          	jal	8002f4c4 <printf>
    8000782a:	00054797          	auipc	a5,0x54
    8000782e:	7e77c783          	lbu	a5,2023(a5) # 8005c011 <excpt+0x1>
    80007832:	e7a1                	bnez	a5,8000787a <wfi_exception_tests_17+0xce>
    80007834:	4529                	li	a0,10
    80007836:	17d260ef          	jal	8002e1b2 <putchar>
    8000783a:	00054797          	auipc	a5,0x54
    8000783e:	7d77c783          	lbu	a5,2007(a5) # 8005c011 <excpt+0x1>
    80007842:	e795                	bnez	a5,8000786e <wfi_exception_tests_17+0xc2>
    80007844:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007846:	0002b597          	auipc	a1,0x2b
    8000784a:	e6258593          	addi	a1,a1,-414 # 800326a8 <__func__.0+0x2c0>
    8000784e:	0002b517          	auipc	a0,0x2b
    80007852:	f1250513          	addi	a0,a0,-238 # 80032760 <__func__.0+0x378>
    80007856:	46f270ef          	jal	8002f4c4 <printf>
    8000785a:	4511                	li	a0,4
    8000785c:	eb8f90ef          	jal	80000f14 <goto_priv>
    80007860:	f17f90ef          	jal	80001776 <reset_state>
}
    80007864:	60a2                	ld	ra,8(sp)
    80007866:	8522                	mv	a0,s0
    80007868:	6402                	ld	s0,0(sp)
    8000786a:	0141                	addi	sp,sp,16
    8000786c:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    8000786e:	4401                	li	s0,0
    TEST_END();
    80007870:	0002b597          	auipc	a1,0x2b
    80007874:	e4858593          	addi	a1,a1,-440 # 800326b8 <__func__.0+0x2d0>
    80007878:	bfd9                	j	8000784e <wfi_exception_tests_17+0xa2>
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    8000787a:	0002b517          	auipc	a0,0x2b
    8000787e:	e8650513          	addi	a0,a0,-378 # 80032700 <__func__.0+0x318>
    80007882:	443270ef          	jal	8002f4c4 <printf>
    80007886:	02900513          	li	a0,41
    8000788a:	129260ef          	jal	8002e1b2 <putchar>
    8000788e:	b75d                	j	80007834 <wfi_exception_tests_17+0x88>

0000000080007890 <wfi_exception_tests_18>:


bool wfi_exception_tests_18() {
    80007890:	1101                	addi	sp,sp,-32

    TEST_START();
    80007892:	00029597          	auipc	a1,0x29
    80007896:	efe58593          	addi	a1,a1,-258 # 80030790 <__func__.5>
    8000789a:	0002b517          	auipc	a0,0x2b
    8000789e:	e2e50513          	addi	a0,a0,-466 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_18() {
    800078a2:	ec06                	sd	ra,24(sp)
    800078a4:	e822                	sd	s0,16(sp)
    800078a6:	e426                	sd	s1,8(sp)
    TEST_START();
    800078a8:	41d270ef          	jal	8002f4c4 <printf>
    800078ac:	4529                	li	a0,10
    800078ae:	105260ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    800078b2:	4511                	li	a0,4
    800078b4:	e60f90ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);  
    800078b8:	002007b7          	lui	a5,0x200
    800078bc:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_VS);
    800078c0:	4509                	li	a0,2
    800078c2:	e52f90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800078c6:	d52f90ef          	jal	80000e18 <test_setup_except_function>
    800078ca:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    800078ce:	08c00593          	li	a1,140
    800078d2:	0002c617          	auipc	a2,0x2c
    800078d6:	64660613          	addi	a2,a2,1606 # 80033f18 <__func__.0+0x1b30>
    800078da:	0002b517          	auipc	a0,0x2b
    800078de:	e0650513          	addi	a0,a0,-506 # 800326e0 <__func__.0+0x2f8>
    800078e2:	3e3270ef          	jal	8002f4c4 <printf>
    800078e6:	00054797          	auipc	a5,0x54
    800078ea:	72b7c783          	lbu	a5,1835(a5) # 8005c011 <excpt+0x1>
    800078ee:	00054497          	auipc	s1,0x54
    800078f2:	72248493          	addi	s1,s1,1826 # 8005c010 <excpt>
    800078f6:	0002b597          	auipc	a1,0x2b
    800078fa:	dc258593          	addi	a1,a1,-574 # 800326b8 <__func__.0+0x2d0>
    800078fe:	cf89                	beqz	a5,80007918 <wfi_exception_tests_18+0x88>
    80007900:	6498                	ld	a4,8(s1)
    80007902:	47d9                	li	a5,22
    80007904:	0002b597          	auipc	a1,0x2b
    80007908:	da458593          	addi	a1,a1,-604 # 800326a8 <__func__.0+0x2c0>
    8000790c:	00f70663          	beq	a4,a5,80007918 <wfi_exception_tests_18+0x88>
    80007910:	0002b597          	auipc	a1,0x2b
    80007914:	da858593          	addi	a1,a1,-600 # 800326b8 <__func__.0+0x2d0>
    80007918:	0002b517          	auipc	a0,0x2b
    8000791c:	de050513          	addi	a0,a0,-544 # 800326f8 <__func__.0+0x310>
    80007920:	3a5270ef          	jal	8002f4c4 <printf>
    80007924:	00054797          	auipc	a5,0x54
    80007928:	6ed7c783          	lbu	a5,1773(a5) # 8005c011 <excpt+0x1>
    8000792c:	c789                	beqz	a5,80007936 <wfi_exception_tests_18+0xa6>
    8000792e:	6498                	ld	a4,8(s1)
    80007930:	47d9                	li	a5,22
    80007932:	00f70c63          	beq	a4,a5,8000794a <wfi_exception_tests_18+0xba>
    80007936:	0002b517          	auipc	a0,0x2b
    8000793a:	dca50513          	addi	a0,a0,-566 # 80032700 <__func__.0+0x318>
    8000793e:	387270ef          	jal	8002f4c4 <printf>
    80007942:	02900513          	li	a0,41
    80007946:	06d260ef          	jal	8002e1b2 <putchar>
    8000794a:	4529                	li	a0,10
    8000794c:	067260ef          	jal	8002e1b2 <putchar>
    80007950:	00054417          	auipc	s0,0x54
    80007954:	6c144403          	lbu	s0,1729(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007958:	0002b597          	auipc	a1,0x2b
    8000795c:	d6058593          	addi	a1,a1,-672 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007960:	cc11                	beqz	s0,8000797c <wfi_exception_tests_18+0xec>
    80007962:	6498                	ld	a4,8(s1)
    80007964:	47d9                	li	a5,22
    TEST_END();
    80007966:	0002b597          	auipc	a1,0x2b
    8000796a:	d4258593          	addi	a1,a1,-702 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    8000796e:	00f70763          	beq	a4,a5,8000797c <wfi_exception_tests_18+0xec>
    80007972:	4401                	li	s0,0
    TEST_END();
    80007974:	0002b597          	auipc	a1,0x2b
    80007978:	d4458593          	addi	a1,a1,-700 # 800326b8 <__func__.0+0x2d0>
    8000797c:	0002b517          	auipc	a0,0x2b
    80007980:	de450513          	addi	a0,a0,-540 # 80032760 <__func__.0+0x378>
    80007984:	341270ef          	jal	8002f4c4 <printf>
    80007988:	4511                	li	a0,4
    8000798a:	d8af90ef          	jal	80000f14 <goto_priv>
    8000798e:	de9f90ef          	jal	80001776 <reset_state>
}
    80007992:	60e2                	ld	ra,24(sp)
    80007994:	8522                	mv	a0,s0
    80007996:	6442                	ld	s0,16(sp)
    80007998:	64a2                	ld	s1,8(sp)
    8000799a:	6105                	addi	sp,sp,32
    8000799c:	8082                	ret

000000008000799e <wfi_exception_tests_19>:

bool wfi_exception_tests_19() {
    8000799e:	1101                	addi	sp,sp,-32

    TEST_START();
    800079a0:	00029597          	auipc	a1,0x29
    800079a4:	e0858593          	addi	a1,a1,-504 # 800307a8 <__func__.4>
    800079a8:	0002b517          	auipc	a0,0x2b
    800079ac:	d2050513          	addi	a0,a0,-736 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_19() {
    800079b0:	ec06                	sd	ra,24(sp)
    800079b2:	e822                	sd	s0,16(sp)
    800079b4:	e426                	sd	s1,8(sp)
    TEST_START();
    800079b6:	30f270ef          	jal	8002f4c4 <printf>
    800079ba:	4529                	li	a0,10
    800079bc:	7f6260ef          	jal	8002e1b2 <putchar>
    //V=1&mstatus.TW=0 , hstatus.vtw=1时，在VS模式下执行WFI指令，并未在一个约定时间内产生中断
    goto_priv(PRIV_M);
    800079c0:	4511                	li	a0,4
    800079c2:	d52f90ef          	jal	80000f14 <goto_priv>

    CSRW(CSR_SIE, 0x0);
    800079c6:	10405073          	csrwi	sie,0
    CSRS(CSR_HSTATUS,HSTATUS_VTW);
    800079ca:	002007b7          	lui	a5,0x200
    800079ce:	6007a073          	csrs	hstatus,a5
    CSRC(mstatus, MSTATUS_TW);
    800079d2:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_VS);
    800079d6:	4509                	li	a0,2
    800079d8:	d3cf90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800079dc:	c3cf90ef          	jal	80000e18 <test_setup_except_function>
    800079e0:	10500073          	wfi
    wfi();
        printf("%d\n",excpt.cause);
    800079e4:	00054417          	auipc	s0,0x54
    800079e8:	62c40413          	addi	s0,s0,1580 # 8005c010 <excpt>
    800079ec:	640c                	ld	a1,8(s0)
    800079ee:	0002c517          	auipc	a0,0x2c
    800079f2:	85a50513          	addi	a0,a0,-1958 # 80033248 <__func__.0+0xe60>
    800079f6:	2cf270ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    800079fa:	08c00593          	li	a1,140
    800079fe:	0002c617          	auipc	a2,0x2c
    80007a02:	56260613          	addi	a2,a2,1378 # 80033f60 <__func__.0+0x1b78>
    80007a06:	0002b517          	auipc	a0,0x2b
    80007a0a:	cda50513          	addi	a0,a0,-806 # 800326e0 <__func__.0+0x2f8>
    80007a0e:	2b7270ef          	jal	8002f4c4 <printf>
    80007a12:	00054797          	auipc	a5,0x54
    80007a16:	5ff7c783          	lbu	a5,1535(a5) # 8005c011 <excpt+0x1>
    80007a1a:	0002b597          	auipc	a1,0x2b
    80007a1e:	c9e58593          	addi	a1,a1,-866 # 800326b8 <__func__.0+0x2d0>
    80007a22:	cf89                	beqz	a5,80007a3c <wfi_exception_tests_19+0x9e>
    80007a24:	6418                	ld	a4,8(s0)
    80007a26:	47d9                	li	a5,22
    80007a28:	0002b597          	auipc	a1,0x2b
    80007a2c:	c8058593          	addi	a1,a1,-896 # 800326a8 <__func__.0+0x2c0>
    80007a30:	00f70663          	beq	a4,a5,80007a3c <wfi_exception_tests_19+0x9e>
    80007a34:	0002b597          	auipc	a1,0x2b
    80007a38:	c8458593          	addi	a1,a1,-892 # 800326b8 <__func__.0+0x2d0>
    80007a3c:	0002b517          	auipc	a0,0x2b
    80007a40:	cbc50513          	addi	a0,a0,-836 # 800326f8 <__func__.0+0x310>
    80007a44:	281270ef          	jal	8002f4c4 <printf>
    80007a48:	00054797          	auipc	a5,0x54
    80007a4c:	5c97c783          	lbu	a5,1481(a5) # 8005c011 <excpt+0x1>
    80007a50:	c789                	beqz	a5,80007a5a <wfi_exception_tests_19+0xbc>
    80007a52:	6418                	ld	a4,8(s0)
    80007a54:	47d9                	li	a5,22
    80007a56:	00f70c63          	beq	a4,a5,80007a6e <wfi_exception_tests_19+0xd0>
    80007a5a:	0002b517          	auipc	a0,0x2b
    80007a5e:	ca650513          	addi	a0,a0,-858 # 80032700 <__func__.0+0x318>
    80007a62:	263270ef          	jal	8002f4c4 <printf>
    80007a66:	02900513          	li	a0,41
    80007a6a:	748260ef          	jal	8002e1b2 <putchar>
    80007a6e:	4529                	li	a0,10
    80007a70:	742260ef          	jal	8002e1b2 <putchar>
    80007a74:	00054497          	auipc	s1,0x54
    80007a78:	59d4c483          	lbu	s1,1437(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007a7c:	0002b597          	auipc	a1,0x2b
    80007a80:	c3c58593          	addi	a1,a1,-964 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007a84:	cc91                	beqz	s1,80007aa0 <wfi_exception_tests_19+0x102>
    80007a86:	6418                	ld	a4,8(s0)
    80007a88:	47d9                	li	a5,22
    TEST_END();
    80007a8a:	0002b597          	auipc	a1,0x2b
    80007a8e:	c1e58593          	addi	a1,a1,-994 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007a92:	00f70763          	beq	a4,a5,80007aa0 <wfi_exception_tests_19+0x102>
    80007a96:	4481                	li	s1,0
    TEST_END();
    80007a98:	0002b597          	auipc	a1,0x2b
    80007a9c:	c2058593          	addi	a1,a1,-992 # 800326b8 <__func__.0+0x2d0>
    80007aa0:	0002b517          	auipc	a0,0x2b
    80007aa4:	cc050513          	addi	a0,a0,-832 # 80032760 <__func__.0+0x378>
    80007aa8:	21d270ef          	jal	8002f4c4 <printf>
    80007aac:	4511                	li	a0,4
    80007aae:	c66f90ef          	jal	80000f14 <goto_priv>
    80007ab2:	cc5f90ef          	jal	80001776 <reset_state>
}
    80007ab6:	60e2                	ld	ra,24(sp)
    80007ab8:	6442                	ld	s0,16(sp)
    80007aba:	8526                	mv	a0,s1
    80007abc:	64a2                	ld	s1,8(sp)
    80007abe:	6105                	addi	sp,sp,32
    80007ac0:	8082                	ret

0000000080007ac2 <wfi_exception_tests_20>:





bool wfi_exception_tests_20() {
    80007ac2:	1141                	addi	sp,sp,-16

    TEST_START();
    80007ac4:	00029597          	auipc	a1,0x29
    80007ac8:	cfc58593          	addi	a1,a1,-772 # 800307c0 <__func__.3>
    80007acc:	0002b517          	auipc	a0,0x2b
    80007ad0:	bfc50513          	addi	a0,a0,-1028 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_20() {
    80007ad4:	e406                	sd	ra,8(sp)
    80007ad6:	e022                	sd	s0,0(sp)
    TEST_START();
    80007ad8:	1ed270ef          	jal	8002f4c4 <printf>
    80007adc:	4529                	li	a0,10
    80007ade:	6d4260ef          	jal	8002e1b2 <putchar>
    
    TEST_SETUP_EXCEPT();
    80007ae2:	b36f90ef          	jal	80000e18 <test_setup_except_function>
    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M);
    80007ae6:	4511                	li	a0,4
    80007ae8:	c2cf90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007aec:	002007b7          	lui	a5,0x200
    80007af0:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_HIE, 0b0100);
    80007af4:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80007af8:	64426073          	csrsi	hip,4
    CSRS(mideleg, 0b0100);
    80007afc:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_HS);
    80007b00:	450d                	li	a0,3
    80007b02:	c12f90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007b06:	b12f90ef          	jal	80000e18 <test_setup_except_function>
    80007b0a:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007b0e:	08c00593          	li	a1,140
    80007b12:	0002c617          	auipc	a2,0x2c
    80007b16:	49660613          	addi	a2,a2,1174 # 80033fa8 <__func__.0+0x1bc0>
    80007b1a:	0002b517          	auipc	a0,0x2b
    80007b1e:	bc650513          	addi	a0,a0,-1082 # 800326e0 <__func__.0+0x2f8>
    80007b22:	1a3270ef          	jal	8002f4c4 <printf>
    80007b26:	00054797          	auipc	a5,0x54
    80007b2a:	4eb7c783          	lbu	a5,1259(a5) # 8005c011 <excpt+0x1>
    80007b2e:	0002b597          	auipc	a1,0x2b
    80007b32:	b7a58593          	addi	a1,a1,-1158 # 800326a8 <__func__.0+0x2c0>
    80007b36:	c789                	beqz	a5,80007b40 <wfi_exception_tests_20+0x7e>
    80007b38:	0002b597          	auipc	a1,0x2b
    80007b3c:	b8058593          	addi	a1,a1,-1152 # 800326b8 <__func__.0+0x2d0>
    80007b40:	0002b517          	auipc	a0,0x2b
    80007b44:	bb850513          	addi	a0,a0,-1096 # 800326f8 <__func__.0+0x310>
    80007b48:	17d270ef          	jal	8002f4c4 <printf>
    80007b4c:	00054797          	auipc	a5,0x54
    80007b50:	4c57c783          	lbu	a5,1221(a5) # 8005c011 <excpt+0x1>
    80007b54:	e7a1                	bnez	a5,80007b9c <wfi_exception_tests_20+0xda>
    80007b56:	4529                	li	a0,10
    80007b58:	65a260ef          	jal	8002e1b2 <putchar>
    80007b5c:	00054797          	auipc	a5,0x54
    80007b60:	4b57c783          	lbu	a5,1205(a5) # 8005c011 <excpt+0x1>
    80007b64:	e795                	bnez	a5,80007b90 <wfi_exception_tests_20+0xce>
    80007b66:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007b68:	0002b597          	auipc	a1,0x2b
    80007b6c:	b4058593          	addi	a1,a1,-1216 # 800326a8 <__func__.0+0x2c0>
    80007b70:	0002b517          	auipc	a0,0x2b
    80007b74:	bf050513          	addi	a0,a0,-1040 # 80032760 <__func__.0+0x378>
    80007b78:	14d270ef          	jal	8002f4c4 <printf>
    80007b7c:	4511                	li	a0,4
    80007b7e:	b96f90ef          	jal	80000f14 <goto_priv>
    80007b82:	bf5f90ef          	jal	80001776 <reset_state>
}
    80007b86:	60a2                	ld	ra,8(sp)
    80007b88:	8522                	mv	a0,s0
    80007b8a:	6402                	ld	s0,0(sp)
    80007b8c:	0141                	addi	sp,sp,16
    80007b8e:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007b90:	4401                	li	s0,0
    TEST_END();
    80007b92:	0002b597          	auipc	a1,0x2b
    80007b96:	b2658593          	addi	a1,a1,-1242 # 800326b8 <__func__.0+0x2d0>
    80007b9a:	bfd9                	j	80007b70 <wfi_exception_tests_20+0xae>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007b9c:	0002b517          	auipc	a0,0x2b
    80007ba0:	b6450513          	addi	a0,a0,-1180 # 80032700 <__func__.0+0x318>
    80007ba4:	121270ef          	jal	8002f4c4 <printf>
    80007ba8:	02900513          	li	a0,41
    80007bac:	606260ef          	jal	8002e1b2 <putchar>
    80007bb0:	b75d                	j	80007b56 <wfi_exception_tests_20+0x94>

0000000080007bb2 <wfi_exception_tests_21>:



bool wfi_exception_tests_21() {
    80007bb2:	1101                	addi	sp,sp,-32

    TEST_START();
    80007bb4:	00029597          	auipc	a1,0x29
    80007bb8:	c2458593          	addi	a1,a1,-988 # 800307d8 <__func__.2>
    80007bbc:	0002b517          	auipc	a0,0x2b
    80007bc0:	b0c50513          	addi	a0,a0,-1268 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_21() {
    80007bc4:	ec06                	sd	ra,24(sp)
    80007bc6:	e822                	sd	s0,16(sp)
    80007bc8:	e426                	sd	s1,8(sp)
    TEST_START();
    80007bca:	0fb270ef          	jal	8002f4c4 <printf>
    80007bce:	4529                	li	a0,10
    80007bd0:	5e2260ef          	jal	8002e1b2 <putchar>

    //V=0&mstatus.TW=1时，且实现了S/HS模式，在U模式下执行WFI指令，并在一个约定时间内产生中断,wfi指令被唤醒，且中断会发生在下一条指令上，xepc=pc+4
    TEST_SETUP_EXCEPT();
    80007bd4:	a44f90ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80007bd8:	4511                	li	a0,4
    80007bda:	b3af90ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_HIE, 0x2);
    80007bde:	60415073          	csrwi	hie,2
    
    CSRS(mstatus, MSTATUS_TW);
    80007be2:	002007b7          	lui	a5,0x200
    80007be6:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007bea:	4505                	li	a0,1
    80007bec:	b28f90ef          	jal	80000f14 <goto_priv>
    80007bf0:	10500073          	wfi
    wfi();
    // CSRW(CSR_HIP,0x2);

    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007bf4:	08c00593          	li	a1,140
    80007bf8:	0002c617          	auipc	a2,0x2c
    80007bfc:	41860613          	addi	a2,a2,1048 # 80034010 <__func__.0+0x1c28>
    80007c00:	0002b517          	auipc	a0,0x2b
    80007c04:	ae050513          	addi	a0,a0,-1312 # 800326e0 <__func__.0+0x2f8>
    80007c08:	0bd270ef          	jal	8002f4c4 <printf>
    80007c0c:	00054797          	auipc	a5,0x54
    80007c10:	4057c783          	lbu	a5,1029(a5) # 8005c011 <excpt+0x1>
    80007c14:	00054497          	auipc	s1,0x54
    80007c18:	3fc48493          	addi	s1,s1,1020 # 8005c010 <excpt>
    80007c1c:	0002b597          	auipc	a1,0x2b
    80007c20:	a9c58593          	addi	a1,a1,-1380 # 800326b8 <__func__.0+0x2d0>
    80007c24:	cf89                	beqz	a5,80007c3e <wfi_exception_tests_21+0x8c>
    80007c26:	6498                	ld	a4,8(s1)
    80007c28:	4789                	li	a5,2
    80007c2a:	0002b597          	auipc	a1,0x2b
    80007c2e:	a7e58593          	addi	a1,a1,-1410 # 800326a8 <__func__.0+0x2c0>
    80007c32:	00f70663          	beq	a4,a5,80007c3e <wfi_exception_tests_21+0x8c>
    80007c36:	0002b597          	auipc	a1,0x2b
    80007c3a:	a8258593          	addi	a1,a1,-1406 # 800326b8 <__func__.0+0x2d0>
    80007c3e:	0002b517          	auipc	a0,0x2b
    80007c42:	aba50513          	addi	a0,a0,-1350 # 800326f8 <__func__.0+0x310>
    80007c46:	07f270ef          	jal	8002f4c4 <printf>
    80007c4a:	00054797          	auipc	a5,0x54
    80007c4e:	3c77c783          	lbu	a5,967(a5) # 8005c011 <excpt+0x1>
    80007c52:	c789                	beqz	a5,80007c5c <wfi_exception_tests_21+0xaa>
    80007c54:	6498                	ld	a4,8(s1)
    80007c56:	4789                	li	a5,2
    80007c58:	00f70c63          	beq	a4,a5,80007c70 <wfi_exception_tests_21+0xbe>
    80007c5c:	0002b517          	auipc	a0,0x2b
    80007c60:	aa450513          	addi	a0,a0,-1372 # 80032700 <__func__.0+0x318>
    80007c64:	061270ef          	jal	8002f4c4 <printf>
    80007c68:	02900513          	li	a0,41
    80007c6c:	546260ef          	jal	8002e1b2 <putchar>
    80007c70:	4529                	li	a0,10
    80007c72:	540260ef          	jal	8002e1b2 <putchar>
    80007c76:	00054417          	auipc	s0,0x54
    80007c7a:	39b44403          	lbu	s0,923(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007c7e:	0002b597          	auipc	a1,0x2b
    80007c82:	a3a58593          	addi	a1,a1,-1478 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007c86:	cc11                	beqz	s0,80007ca2 <wfi_exception_tests_21+0xf0>
    80007c88:	6498                	ld	a4,8(s1)
    80007c8a:	4789                	li	a5,2
    TEST_END();
    80007c8c:	0002b597          	auipc	a1,0x2b
    80007c90:	a1c58593          	addi	a1,a1,-1508 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007c94:	00f70763          	beq	a4,a5,80007ca2 <wfi_exception_tests_21+0xf0>
    80007c98:	4401                	li	s0,0
    TEST_END();
    80007c9a:	0002b597          	auipc	a1,0x2b
    80007c9e:	a1e58593          	addi	a1,a1,-1506 # 800326b8 <__func__.0+0x2d0>
    80007ca2:	0002b517          	auipc	a0,0x2b
    80007ca6:	abe50513          	addi	a0,a0,-1346 # 80032760 <__func__.0+0x378>
    80007caa:	01b270ef          	jal	8002f4c4 <printf>
    80007cae:	4511                	li	a0,4
    80007cb0:	a64f90ef          	jal	80000f14 <goto_priv>
    80007cb4:	ac3f90ef          	jal	80001776 <reset_state>
}
    80007cb8:	60e2                	ld	ra,24(sp)
    80007cba:	8522                	mv	a0,s0
    80007cbc:	6442                	ld	s0,16(sp)
    80007cbe:	64a2                	ld	s1,8(sp)
    80007cc0:	6105                	addi	sp,sp,32
    80007cc2:	8082                	ret

0000000080007cc4 <wfi_exception_tests_22>:


bool wfi_exception_tests_22() {
    80007cc4:	1101                	addi	sp,sp,-32

    TEST_START();
    80007cc6:	00029597          	auipc	a1,0x29
    80007cca:	b2a58593          	addi	a1,a1,-1238 # 800307f0 <__func__.1>
    80007cce:	0002b517          	auipc	a0,0x2b
    80007cd2:	9fa50513          	addi	a0,a0,-1542 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_22() {
    80007cd6:	ec06                	sd	ra,24(sp)
    80007cd8:	e822                	sd	s0,16(sp)
    80007cda:	e426                	sd	s1,8(sp)
    TEST_START();
    80007cdc:	7e8270ef          	jal	8002f4c4 <printf>
    80007ce0:	4529                	li	a0,10
    80007ce2:	4d0260ef          	jal	8002e1b2 <putchar>

    //V=0&mstatus.TW=1时，如果实现了S/HS模式，在U模式下执行WFI指令，没有在一个约定时间内产生中断
    TEST_SETUP_EXCEPT();
    80007ce6:	932f90ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80007cea:	4511                	li	a0,4
    80007cec:	a28f90ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_HIE, 0);
    80007cf0:	60405073          	csrwi	hie,0
    CSRW(CSR_HIP,0);
    80007cf4:	64405073          	csrwi	hip,0
    CSRS(mstatus, MSTATUS_TW);
    80007cf8:	002007b7          	lui	a5,0x200
    80007cfc:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007d00:	4505                	li	a0,1
    80007d02:	a12f90ef          	jal	80000f14 <goto_priv>
    80007d06:	10500073          	wfi
    wfi();
    
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007d0a:	08c00593          	li	a1,140
    80007d0e:	0002c617          	auipc	a2,0x2c
    80007d12:	30260613          	addi	a2,a2,770 # 80034010 <__func__.0+0x1c28>
    80007d16:	0002b517          	auipc	a0,0x2b
    80007d1a:	9ca50513          	addi	a0,a0,-1590 # 800326e0 <__func__.0+0x2f8>
    80007d1e:	7a6270ef          	jal	8002f4c4 <printf>
    80007d22:	00054797          	auipc	a5,0x54
    80007d26:	2ef7c783          	lbu	a5,751(a5) # 8005c011 <excpt+0x1>
    80007d2a:	00054497          	auipc	s1,0x54
    80007d2e:	2e648493          	addi	s1,s1,742 # 8005c010 <excpt>
    80007d32:	0002b597          	auipc	a1,0x2b
    80007d36:	98658593          	addi	a1,a1,-1658 # 800326b8 <__func__.0+0x2d0>
    80007d3a:	cf89                	beqz	a5,80007d54 <wfi_exception_tests_22+0x90>
    80007d3c:	6498                	ld	a4,8(s1)
    80007d3e:	4789                	li	a5,2
    80007d40:	0002b597          	auipc	a1,0x2b
    80007d44:	96858593          	addi	a1,a1,-1688 # 800326a8 <__func__.0+0x2c0>
    80007d48:	00f70663          	beq	a4,a5,80007d54 <wfi_exception_tests_22+0x90>
    80007d4c:	0002b597          	auipc	a1,0x2b
    80007d50:	96c58593          	addi	a1,a1,-1684 # 800326b8 <__func__.0+0x2d0>
    80007d54:	0002b517          	auipc	a0,0x2b
    80007d58:	9a450513          	addi	a0,a0,-1628 # 800326f8 <__func__.0+0x310>
    80007d5c:	768270ef          	jal	8002f4c4 <printf>
    80007d60:	00054797          	auipc	a5,0x54
    80007d64:	2b17c783          	lbu	a5,689(a5) # 8005c011 <excpt+0x1>
    80007d68:	c789                	beqz	a5,80007d72 <wfi_exception_tests_22+0xae>
    80007d6a:	6498                	ld	a4,8(s1)
    80007d6c:	4789                	li	a5,2
    80007d6e:	00f70c63          	beq	a4,a5,80007d86 <wfi_exception_tests_22+0xc2>
    80007d72:	0002b517          	auipc	a0,0x2b
    80007d76:	98e50513          	addi	a0,a0,-1650 # 80032700 <__func__.0+0x318>
    80007d7a:	74a270ef          	jal	8002f4c4 <printf>
    80007d7e:	02900513          	li	a0,41
    80007d82:	430260ef          	jal	8002e1b2 <putchar>
    80007d86:	4529                	li	a0,10
    80007d88:	42a260ef          	jal	8002e1b2 <putchar>
    80007d8c:	00054417          	auipc	s0,0x54
    80007d90:	28544403          	lbu	s0,645(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007d94:	0002b597          	auipc	a1,0x2b
    80007d98:	92458593          	addi	a1,a1,-1756 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007d9c:	cc11                	beqz	s0,80007db8 <wfi_exception_tests_22+0xf4>
    80007d9e:	6498                	ld	a4,8(s1)
    80007da0:	4789                	li	a5,2
    TEST_END();
    80007da2:	0002b597          	auipc	a1,0x2b
    80007da6:	90658593          	addi	a1,a1,-1786 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007daa:	00f70763          	beq	a4,a5,80007db8 <wfi_exception_tests_22+0xf4>
    80007dae:	4401                	li	s0,0
    TEST_END();
    80007db0:	0002b597          	auipc	a1,0x2b
    80007db4:	90858593          	addi	a1,a1,-1784 # 800326b8 <__func__.0+0x2d0>
    80007db8:	0002b517          	auipc	a0,0x2b
    80007dbc:	9a850513          	addi	a0,a0,-1624 # 80032760 <__func__.0+0x378>
    80007dc0:	704270ef          	jal	8002f4c4 <printf>
    80007dc4:	4511                	li	a0,4
    80007dc6:	94ef90ef          	jal	80000f14 <goto_priv>
    80007dca:	9adf90ef          	jal	80001776 <reset_state>
}
    80007dce:	60e2                	ld	ra,24(sp)
    80007dd0:	8522                	mv	a0,s0
    80007dd2:	6442                	ld	s0,16(sp)
    80007dd4:	64a2                	ld	s1,8(sp)
    80007dd6:	6105                	addi	sp,sp,32
    80007dd8:	8082                	ret

0000000080007dda <wfi_exception_tests_23>:


bool wfi_exception_tests_23() {
    80007dda:	1141                	addi	sp,sp,-16

    TEST_START();
    80007ddc:	00029597          	auipc	a1,0x29
    80007de0:	a2c58593          	addi	a1,a1,-1492 # 80030808 <__func__.0>
    80007de4:	0002b517          	auipc	a0,0x2b
    80007de8:	8e450513          	addi	a0,a0,-1820 # 800326c8 <__func__.0+0x2e0>
bool wfi_exception_tests_23() {
    80007dec:	e406                	sd	ra,8(sp)
    TEST_START();
    80007dee:	6d6270ef          	jal	8002f4c4 <printf>
    80007df2:	4529                	li	a0,10
    80007df4:	3be260ef          	jal	8002e1b2 <putchar>



    TEST_END();
    80007df8:	0002b597          	auipc	a1,0x2b
    80007dfc:	8b058593          	addi	a1,a1,-1872 # 800326a8 <__func__.0+0x2c0>
    80007e00:	0002b517          	auipc	a0,0x2b
    80007e04:	96050513          	addi	a0,a0,-1696 # 80032760 <__func__.0+0x378>
    80007e08:	6bc270ef          	jal	8002f4c4 <printf>
    80007e0c:	4511                	li	a0,4
    80007e0e:	906f90ef          	jal	80000f14 <goto_priv>
    80007e12:	965f90ef          	jal	80001776 <reset_state>
}
    80007e16:	60a2                	ld	ra,8(sp)
    80007e18:	4505                	li	a0,1
    80007e1a:	0141                	addi	sp,sp,16
    80007e1c:	8082                	ret

0000000080007e1e <tinst_tests_pf>:
#define TINST_CHECK_COMPRESSED(CHECK) (excpt.tinst == 0 ||\
    excpt.tinst == CHECK(expand_compressed_instruction(read_instruction(excpt.epc)) & ~0b10ULL))



bool tinst_tests_pf(){
    80007e1e:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80007e20:	00029597          	auipc	a1,0x29
    80007e24:	a0058593          	addi	a1,a1,-1536 # 80030820 <__func__.3>
    80007e28:	0002b517          	auipc	a0,0x2b
    80007e2c:	8a050513          	addi	a0,a0,-1888 # 800326c8 <__func__.0+0x2e0>
bool tinst_tests_pf(){
    80007e30:	f406                	sd	ra,40(sp)
    80007e32:	f022                	sd	s0,32(sp)
    80007e34:	ec26                	sd	s1,24(sp)
    80007e36:	e84a                	sd	s2,16(sp)
    80007e38:	e44e                	sd	s3,8(sp)
    TEST_START();
    80007e3a:	68a270ef          	jal	8002f4c4 <printf>
    80007e3e:	4529                	li	a0,10
    80007e40:	372260ef          	jal	8002e1b2 <putchar>

    hspt_init();        
    80007e44:	fa8f80ef          	jal	800005ec <hspt_init>
    goto_priv(PRIV_HS);     
    80007e48:	450d                	li	a0,3
    80007e4a:	8caf90ef          	jal	80000f14 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    80007e4e:	fcbf80ef          	jal	80000e18 <test_setup_except_function>
            ".option pop\n\t" \
            : "=r"(value) : "r"(addr) : "memory"); \
        return value; \
    }

LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80007e52:	400197b7          	lui	a5,0x40019
    80007e56:	078a                	slli	a5,a5,0x2
    80007e58:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80007e5c:	0002c617          	auipc	a2,0x2c
    80007e60:	1fc60613          	addi	a2,a2,508 # 80034058 <__func__.0+0x1c70>
    80007e64:	08c00593          	li	a1,140
    80007e68:	0002b517          	auipc	a0,0x2b
    80007e6c:	87850513          	addi	a0,a0,-1928 # 800326e0 <__func__.0+0x2f8>
    80007e70:	654270ef          	jal	8002f4c4 <printf>
    80007e74:	00054797          	auipc	a5,0x54
    80007e78:	19d7c783          	lbu	a5,413(a5) # 8005c011 <excpt+0x1>
    80007e7c:	00054417          	auipc	s0,0x54
    80007e80:	19440413          	addi	s0,s0,404 # 8005c010 <excpt>
    80007e84:	e399                	bnez	a5,80007e8a <tinst_tests_pf+0x6c>
    80007e86:	6000106f          	j	80009486 <tinst_tests_pf+0x1668>
    80007e8a:	6418                	ld	a4,8(s0)
    80007e8c:	47b5                	li	a5,13
    80007e8e:	0002b597          	auipc	a1,0x2b
    80007e92:	82a58593          	addi	a1,a1,-2006 # 800326b8 <__func__.0+0x2d0>
    80007e96:	00f71463          	bne	a4,a5,80007e9e <tinst_tests_pf+0x80>
    80007e9a:	5a40106f          	j	8000943e <tinst_tests_pf+0x1620>
    80007e9e:	0002b517          	auipc	a0,0x2b
    80007ea2:	85a50513          	addi	a0,a0,-1958 # 800326f8 <__func__.0+0x310>
    80007ea6:	61e270ef          	jal	8002f4c4 <printf>
    80007eaa:	00054797          	auipc	a5,0x54
    80007eae:	1677c783          	lbu	a5,359(a5) # 8005c011 <excpt+0x1>
    80007eb2:	c799                	beqz	a5,80007ec0 <tinst_tests_pf+0xa2>
    80007eb4:	6418                	ld	a4,8(s0)
    80007eb6:	47b5                	li	a5,13
    80007eb8:	00f71463          	bne	a4,a5,80007ec0 <tinst_tests_pf+0xa2>
    80007ebc:	6260106f          	j	800094e2 <tinst_tests_pf+0x16c4>
    80007ec0:	0002b517          	auipc	a0,0x2b
    80007ec4:	84050513          	addi	a0,a0,-1984 # 80032700 <__func__.0+0x318>
    80007ec8:	5fc270ef          	jal	8002f4c4 <printf>
    80007ecc:	02900513          	li	a0,41
    80007ed0:	2e2260ef          	jal	8002e1b2 <putchar>
    80007ed4:	4529                	li	a0,10
    80007ed6:	2dc260ef          	jal	8002e1b2 <putchar>
    80007eda:	00054797          	auipc	a5,0x54
    80007ede:	1377c783          	lbu	a5,311(a5) # 8005c011 <excpt+0x1>
    80007ee2:	c399                	beqz	a5,80007ee8 <tinst_tests_pf+0xca>
    80007ee4:	5ae0106f          	j	80009492 <tinst_tests_pf+0x1674>
    80007ee8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007eea:	f2ff80ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80007eee:	400197b7          	lui	a5,0x40019
    80007ef2:	078a                	slli	a5,a5,0x2
    80007ef4:	0007c783          	lbu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80007ef8:	0002c617          	auipc	a2,0x2c
    80007efc:	1e060613          	addi	a2,a2,480 # 800340d8 <__func__.0+0x1cf0>
    80007f00:	08c00593          	li	a1,140
    80007f04:	0002a517          	auipc	a0,0x2a
    80007f08:	7dc50513          	addi	a0,a0,2012 # 800326e0 <__func__.0+0x2f8>
    80007f0c:	5b8270ef          	jal	8002f4c4 <printf>
    80007f10:	00054797          	auipc	a5,0x54
    80007f14:	1017c783          	lbu	a5,257(a5) # 8005c011 <excpt+0x1>
    80007f18:	e399                	bnez	a5,80007f1e <tinst_tests_pf+0x100>
    80007f1a:	64c0106f          	j	80009566 <tinst_tests_pf+0x1748>
    80007f1e:	6418                	ld	a4,8(s0)
    80007f20:	47b5                	li	a5,13
    80007f22:	0002a597          	auipc	a1,0x2a
    80007f26:	79658593          	addi	a1,a1,1942 # 800326b8 <__func__.0+0x2d0>
    80007f2a:	00f71463          	bne	a4,a5,80007f32 <tinst_tests_pf+0x114>
    80007f2e:	5f00106f          	j	8000951e <tinst_tests_pf+0x1700>
    80007f32:	0002a517          	auipc	a0,0x2a
    80007f36:	7c650513          	addi	a0,a0,1990 # 800326f8 <__func__.0+0x310>
    80007f3a:	58a270ef          	jal	8002f4c4 <printf>
    80007f3e:	00054797          	auipc	a5,0x54
    80007f42:	0d37c783          	lbu	a5,211(a5) # 8005c011 <excpt+0x1>
    80007f46:	c799                	beqz	a5,80007f54 <tinst_tests_pf+0x136>
    80007f48:	6418                	ld	a4,8(s0)
    80007f4a:	47b5                	li	a5,13
    80007f4c:	00f71463          	bne	a4,a5,80007f54 <tinst_tests_pf+0x136>
    80007f50:	23d0106f          	j	8000998c <tinst_tests_pf+0x1b6e>
    80007f54:	0002a517          	auipc	a0,0x2a
    80007f58:	7ac50513          	addi	a0,a0,1964 # 80032700 <__func__.0+0x318>
    80007f5c:	568270ef          	jal	8002f4c4 <printf>
    80007f60:	02900513          	li	a0,41
    80007f64:	24e260ef          	jal	8002e1b2 <putchar>
    80007f68:	4529                	li	a0,10
    80007f6a:	248260ef          	jal	8002e1b2 <putchar>
    80007f6e:	00090e63          	beqz	s2,80007f8a <tinst_tests_pf+0x16c>
    80007f72:	00054797          	auipc	a5,0x54
    80007f76:	09f7c783          	lbu	a5,159(a5) # 8005c011 <excpt+0x1>
    80007f7a:	c799                	beqz	a5,80007f88 <tinst_tests_pf+0x16a>
    80007f7c:	6418                	ld	a4,8(s0)
    80007f7e:	47b5                	li	a5,13
    80007f80:	00f71463          	bne	a4,a5,80007f88 <tinst_tests_pf+0x16a>
    80007f84:	64d0106f          	j	80009dd0 <tinst_tests_pf+0x1fb2>
    80007f88:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007f8a:	e8ff80ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80007f8e:	400197b7          	lui	a5,0x40019
    80007f92:	078a                	slli	a5,a5,0x2
    80007f94:	00079783          	lh	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80007f98:	0002c617          	auipc	a2,0x2c
    80007f9c:	18060613          	addi	a2,a2,384 # 80034118 <__func__.0+0x1d30>
    80007fa0:	08c00593          	li	a1,140
    80007fa4:	0002a517          	auipc	a0,0x2a
    80007fa8:	73c50513          	addi	a0,a0,1852 # 800326e0 <__func__.0+0x2f8>
    80007fac:	518270ef          	jal	8002f4c4 <printf>
    80007fb0:	00054797          	auipc	a5,0x54
    80007fb4:	0617c783          	lbu	a5,97(a5) # 8005c011 <excpt+0x1>
    80007fb8:	e399                	bnez	a5,80007fbe <tinst_tests_pf+0x1a0>
    80007fba:	6000106f          	j	800095ba <tinst_tests_pf+0x179c>
    80007fbe:	6418                	ld	a4,8(s0)
    80007fc0:	47b5                	li	a5,13
    80007fc2:	0002a597          	auipc	a1,0x2a
    80007fc6:	6f658593          	addi	a1,a1,1782 # 800326b8 <__func__.0+0x2d0>
    80007fca:	00f71463          	bne	a4,a5,80007fd2 <tinst_tests_pf+0x1b4>
    80007fce:	5a40106f          	j	80009572 <tinst_tests_pf+0x1754>
    80007fd2:	0002a517          	auipc	a0,0x2a
    80007fd6:	72650513          	addi	a0,a0,1830 # 800326f8 <__func__.0+0x310>
    80007fda:	4ea270ef          	jal	8002f4c4 <printf>
    80007fde:	00054797          	auipc	a5,0x54
    80007fe2:	0337c783          	lbu	a5,51(a5) # 8005c011 <excpt+0x1>
    80007fe6:	c799                	beqz	a5,80007ff4 <tinst_tests_pf+0x1d6>
    80007fe8:	6418                	ld	a4,8(s0)
    80007fea:	47b5                	li	a5,13
    80007fec:	00f71463          	bne	a4,a5,80007ff4 <tinst_tests_pf+0x1d6>
    80007ff0:	6990106f          	j	80009e88 <tinst_tests_pf+0x206a>
    80007ff4:	0002a517          	auipc	a0,0x2a
    80007ff8:	70c50513          	addi	a0,a0,1804 # 80032700 <__func__.0+0x318>
    80007ffc:	4c8270ef          	jal	8002f4c4 <printf>
    80008000:	02900513          	li	a0,41
    80008004:	1ae260ef          	jal	8002e1b2 <putchar>
    80008008:	4529                	li	a0,10
    8000800a:	1a8260ef          	jal	8002e1b2 <putchar>
    8000800e:	00090e63          	beqz	s2,8000802a <tinst_tests_pf+0x20c>
    80008012:	00054797          	auipc	a5,0x54
    80008016:	fff7c783          	lbu	a5,-1(a5) # 8005c011 <excpt+0x1>
    8000801a:	c799                	beqz	a5,80008028 <tinst_tests_pf+0x20a>
    8000801c:	6418                	ld	a4,8(s0)
    8000801e:	47b5                	li	a5,13
    80008020:	00f71463          	bne	a4,a5,80008028 <tinst_tests_pf+0x20a>
    80008024:	5eb0106f          	j	80009e0e <tinst_tests_pf+0x1ff0>
    80008028:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000802a:	deff80ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    8000802e:	400197b7          	lui	a5,0x40019
    80008032:	078a                	slli	a5,a5,0x2
    80008034:	0007d783          	lhu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80008038:	0002c617          	auipc	a2,0x2c
    8000803c:	12060613          	addi	a2,a2,288 # 80034158 <__func__.0+0x1d70>
    80008040:	08c00593          	li	a1,140
    80008044:	0002a517          	auipc	a0,0x2a
    80008048:	69c50513          	addi	a0,a0,1692 # 800326e0 <__func__.0+0x2f8>
    8000804c:	478270ef          	jal	8002f4c4 <printf>
    80008050:	00054797          	auipc	a5,0x54
    80008054:	fc17c783          	lbu	a5,-63(a5) # 8005c011 <excpt+0x1>
    80008058:	e399                	bnez	a5,8000805e <tinst_tests_pf+0x240>
    8000805a:	5b40106f          	j	8000960e <tinst_tests_pf+0x17f0>
    8000805e:	6418                	ld	a4,8(s0)
    80008060:	47b5                	li	a5,13
    80008062:	0002a597          	auipc	a1,0x2a
    80008066:	65658593          	addi	a1,a1,1622 # 800326b8 <__func__.0+0x2d0>
    8000806a:	00f71463          	bne	a4,a5,80008072 <tinst_tests_pf+0x254>
    8000806e:	5580106f          	j	800095c6 <tinst_tests_pf+0x17a8>
    80008072:	0002a517          	auipc	a0,0x2a
    80008076:	68650513          	addi	a0,a0,1670 # 800326f8 <__func__.0+0x310>
    8000807a:	44a270ef          	jal	8002f4c4 <printf>
    8000807e:	00054797          	auipc	a5,0x54
    80008082:	f937c783          	lbu	a5,-109(a5) # 8005c011 <excpt+0x1>
    80008086:	c799                	beqz	a5,80008094 <tinst_tests_pf+0x276>
    80008088:	6418                	ld	a4,8(s0)
    8000808a:	47b5                	li	a5,13
    8000808c:	00f71463          	bne	a4,a5,80008094 <tinst_tests_pf+0x276>
    80008090:	6990106f          	j	80009f28 <tinst_tests_pf+0x210a>
    80008094:	0002a517          	auipc	a0,0x2a
    80008098:	66c50513          	addi	a0,a0,1644 # 80032700 <__func__.0+0x318>
    8000809c:	428270ef          	jal	8002f4c4 <printf>
    800080a0:	02900513          	li	a0,41
    800080a4:	10e260ef          	jal	8002e1b2 <putchar>
    800080a8:	4529                	li	a0,10
    800080aa:	108260ef          	jal	8002e1b2 <putchar>
    800080ae:	00090e63          	beqz	s2,800080ca <tinst_tests_pf+0x2ac>
    800080b2:	00054797          	auipc	a5,0x54
    800080b6:	f5f7c783          	lbu	a5,-161(a5) # 8005c011 <excpt+0x1>
    800080ba:	c799                	beqz	a5,800080c8 <tinst_tests_pf+0x2aa>
    800080bc:	6418                	ld	a4,8(s0)
    800080be:	47b5                	li	a5,13
    800080c0:	00f71463          	bne	a4,a5,800080c8 <tinst_tests_pf+0x2aa>
    800080c4:	5890106f          	j	80009e4c <tinst_tests_pf+0x202e>
    800080c8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800080ca:	d4ff80ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    800080ce:	400197b7          	lui	a5,0x40019
    800080d2:	078a                	slli	a5,a5,0x2
    800080d4:	0007a783          	lw	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    800080d8:	0002c617          	auipc	a2,0x2c
    800080dc:	0c060613          	addi	a2,a2,192 # 80034198 <__func__.0+0x1db0>
    800080e0:	08c00593          	li	a1,140
    800080e4:	0002a517          	auipc	a0,0x2a
    800080e8:	5fc50513          	addi	a0,a0,1532 # 800326e0 <__func__.0+0x2f8>
    800080ec:	3d8270ef          	jal	8002f4c4 <printf>
    800080f0:	00054797          	auipc	a5,0x54
    800080f4:	f217c783          	lbu	a5,-223(a5) # 8005c011 <excpt+0x1>
    800080f8:	e399                	bnez	a5,800080fe <tinst_tests_pf+0x2e0>
    800080fa:	5680106f          	j	80009662 <tinst_tests_pf+0x1844>
    800080fe:	6418                	ld	a4,8(s0)
    80008100:	47b5                	li	a5,13
    80008102:	0002a597          	auipc	a1,0x2a
    80008106:	5b658593          	addi	a1,a1,1462 # 800326b8 <__func__.0+0x2d0>
    8000810a:	00f71463          	bne	a4,a5,80008112 <tinst_tests_pf+0x2f4>
    8000810e:	50c0106f          	j	8000961a <tinst_tests_pf+0x17fc>
    80008112:	0002a517          	auipc	a0,0x2a
    80008116:	5e650513          	addi	a0,a0,1510 # 800326f8 <__func__.0+0x310>
    8000811a:	3aa270ef          	jal	8002f4c4 <printf>
    8000811e:	00054797          	auipc	a5,0x54
    80008122:	ef37c783          	lbu	a5,-269(a5) # 8005c011 <excpt+0x1>
    80008126:	c799                	beqz	a5,80008134 <tinst_tests_pf+0x316>
    80008128:	6418                	ld	a4,8(s0)
    8000812a:	47b5                	li	a5,13
    8000812c:	00f71463          	bne	a4,a5,80008134 <tinst_tests_pf+0x316>
    80008130:	68b0106f          	j	80009fba <tinst_tests_pf+0x219c>
    80008134:	0002a517          	auipc	a0,0x2a
    80008138:	5cc50513          	addi	a0,a0,1484 # 80032700 <__func__.0+0x318>
    8000813c:	388270ef          	jal	8002f4c4 <printf>
    80008140:	02900513          	li	a0,41
    80008144:	06e260ef          	jal	8002e1b2 <putchar>
    80008148:	4529                	li	a0,10
    8000814a:	068260ef          	jal	8002e1b2 <putchar>
    8000814e:	00090a63          	beqz	s2,80008162 <tinst_tests_pf+0x344>
    80008152:	00054797          	auipc	a5,0x54
    80008156:	ebf7c783          	lbu	a5,-321(a5) # 8005c011 <excpt+0x1>
    8000815a:	c399                	beqz	a5,80008160 <tinst_tests_pf+0x342>
    8000815c:	06d0106f          	j	800099c8 <tinst_tests_pf+0x1baa>
    80008160:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008162:	cb7f80ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    80008166:	400197b7          	lui	a5,0x40019
    8000816a:	078a                	slli	a5,a5,0x2
    8000816c:	0007e783          	lwu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80008170:	0002c617          	auipc	a2,0x2c
    80008174:	06860613          	addi	a2,a2,104 # 800341d8 <__func__.0+0x1df0>
    80008178:	08c00593          	li	a1,140
    8000817c:	0002a517          	auipc	a0,0x2a
    80008180:	56450513          	addi	a0,a0,1380 # 800326e0 <__func__.0+0x2f8>
    80008184:	340270ef          	jal	8002f4c4 <printf>
    80008188:	00054797          	auipc	a5,0x54
    8000818c:	e897c783          	lbu	a5,-375(a5) # 8005c011 <excpt+0x1>
    80008190:	e399                	bnez	a5,80008196 <tinst_tests_pf+0x378>
    80008192:	5240106f          	j	800096b6 <tinst_tests_pf+0x1898>
    80008196:	6418                	ld	a4,8(s0)
    80008198:	47b5                	li	a5,13
    8000819a:	0002a597          	auipc	a1,0x2a
    8000819e:	51e58593          	addi	a1,a1,1310 # 800326b8 <__func__.0+0x2d0>
    800081a2:	00f71463          	bne	a4,a5,800081aa <tinst_tests_pf+0x38c>
    800081a6:	4c80106f          	j	8000966e <tinst_tests_pf+0x1850>
    800081aa:	0002a517          	auipc	a0,0x2a
    800081ae:	54e50513          	addi	a0,a0,1358 # 800326f8 <__func__.0+0x310>
    800081b2:	312270ef          	jal	8002f4c4 <printf>
    800081b6:	00054797          	auipc	a5,0x54
    800081ba:	e5b7c783          	lbu	a5,-421(a5) # 8005c011 <excpt+0x1>
    800081be:	c799                	beqz	a5,800081cc <tinst_tests_pf+0x3ae>
    800081c0:	6418                	ld	a4,8(s0)
    800081c2:	47b5                	li	a5,13
    800081c4:	00f71463          	bne	a4,a5,800081cc <tinst_tests_pf+0x3ae>
    800081c8:	6890106f          	j	8000a050 <tinst_tests_pf+0x2232>
    800081cc:	0002a517          	auipc	a0,0x2a
    800081d0:	53450513          	addi	a0,a0,1332 # 80032700 <__func__.0+0x318>
    800081d4:	2f0270ef          	jal	8002f4c4 <printf>
    800081d8:	02900513          	li	a0,41
    800081dc:	7d7250ef          	jal	8002e1b2 <putchar>
    800081e0:	4529                	li	a0,10
    800081e2:	7d1250ef          	jal	8002e1b2 <putchar>
    800081e6:	00090a63          	beqz	s2,800081fa <tinst_tests_pf+0x3dc>
    800081ea:	00054797          	auipc	a5,0x54
    800081ee:	e277c783          	lbu	a5,-473(a5) # 8005c011 <excpt+0x1>
    800081f2:	c399                	beqz	a5,800081f8 <tinst_tests_pf+0x3da>
    800081f4:	0850106f          	j	80009a78 <tinst_tests_pf+0x1c5a>
    800081f8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800081fa:	c1ff80ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800081fe:	400197b7          	lui	a5,0x40019
    80008202:	078a                	slli	a5,a5,0x2
    80008204:	0007b783          	ld	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80008208:	0002c617          	auipc	a2,0x2c
    8000820c:	01060613          	addi	a2,a2,16 # 80034218 <__func__.0+0x1e30>
    80008210:	08c00593          	li	a1,140
    80008214:	0002a517          	auipc	a0,0x2a
    80008218:	4cc50513          	addi	a0,a0,1228 # 800326e0 <__func__.0+0x2f8>
    8000821c:	2a8270ef          	jal	8002f4c4 <printf>
    80008220:	00054797          	auipc	a5,0x54
    80008224:	df17c783          	lbu	a5,-527(a5) # 8005c011 <excpt+0x1>
    80008228:	e399                	bnez	a5,8000822e <tinst_tests_pf+0x410>
    8000822a:	4e00106f          	j	8000970a <tinst_tests_pf+0x18ec>
    8000822e:	6418                	ld	a4,8(s0)
    80008230:	47b5                	li	a5,13
    80008232:	0002a597          	auipc	a1,0x2a
    80008236:	48658593          	addi	a1,a1,1158 # 800326b8 <__func__.0+0x2d0>
    8000823a:	00f71463          	bne	a4,a5,80008242 <tinst_tests_pf+0x424>
    8000823e:	4840106f          	j	800096c2 <tinst_tests_pf+0x18a4>
    80008242:	0002a517          	auipc	a0,0x2a
    80008246:	4b650513          	addi	a0,a0,1206 # 800326f8 <__func__.0+0x310>
    8000824a:	27a270ef          	jal	8002f4c4 <printf>
    8000824e:	00054797          	auipc	a5,0x54
    80008252:	dc37c783          	lbu	a5,-573(a5) # 8005c011 <excpt+0x1>
    80008256:	c799                	beqz	a5,80008264 <tinst_tests_pf+0x446>
    80008258:	6418                	ld	a4,8(s0)
    8000825a:	47b5                	li	a5,13
    8000825c:	00f71463          	bne	a4,a5,80008264 <tinst_tests_pf+0x446>
    80008260:	6870106f          	j	8000a0e6 <tinst_tests_pf+0x22c8>
    80008264:	0002a517          	auipc	a0,0x2a
    80008268:	49c50513          	addi	a0,a0,1180 # 80032700 <__func__.0+0x318>
    8000826c:	258270ef          	jal	8002f4c4 <printf>
    80008270:	02900513          	li	a0,41
    80008274:	73f250ef          	jal	8002e1b2 <putchar>
    80008278:	4529                	li	a0,10
    8000827a:	739250ef          	jal	8002e1b2 <putchar>
    8000827e:	00090a63          	beqz	s2,80008292 <tinst_tests_pf+0x474>
    80008282:	00054797          	auipc	a5,0x54
    80008286:	d8f7c783          	lbu	a5,-625(a5) # 8005c011 <excpt+0x1>
    8000828a:	c399                	beqz	a5,80008290 <tinst_tests_pf+0x472>
    8000828c:	0370106f          	j	80009ac2 <tinst_tests_pf+0x1ca4>
    80008290:	4901                	li	s2,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    80008292:	b87f80ef          	jal	80000e18 <test_setup_except_function>
            ".option pop\n\t" \
            :: "r"(value), "r"(addr):  "memory" \
        ); \
    }

STORE_INSTRUCTION(sb, "sb", uint8_t);
    80008296:	400197b7          	lui	a5,0x40019
    8000829a:	078a                	slli	a5,a5,0x2
    8000829c:	573d                	li	a4,-17
    8000829e:	00e78023          	sb	a4,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    800082a2:	0002c617          	auipc	a2,0x2c
    800082a6:	fb660613          	addi	a2,a2,-74 # 80034258 <__func__.0+0x1e70>
    800082aa:	08c00593          	li	a1,140
    800082ae:	0002a517          	auipc	a0,0x2a
    800082b2:	43250513          	addi	a0,a0,1074 # 800326e0 <__func__.0+0x2f8>
    800082b6:	20e270ef          	jal	8002f4c4 <printf>
    800082ba:	00054797          	auipc	a5,0x54
    800082be:	d577c783          	lbu	a5,-681(a5) # 8005c011 <excpt+0x1>
    800082c2:	e399                	bnez	a5,800082c8 <tinst_tests_pf+0x4aa>
    800082c4:	4a00106f          	j	80009764 <tinst_tests_pf+0x1946>
    800082c8:	6418                	ld	a4,8(s0)
    800082ca:	47bd                	li	a5,15
    800082cc:	0002a597          	auipc	a1,0x2a
    800082d0:	3ec58593          	addi	a1,a1,1004 # 800326b8 <__func__.0+0x2d0>
    800082d4:	00f71463          	bne	a4,a5,800082dc <tinst_tests_pf+0x4be>
    800082d8:	43e0106f          	j	80009716 <tinst_tests_pf+0x18f8>
    800082dc:	0002a517          	auipc	a0,0x2a
    800082e0:	41c50513          	addi	a0,a0,1052 # 800326f8 <__func__.0+0x310>
    800082e4:	1e0270ef          	jal	8002f4c4 <printf>
    800082e8:	00054797          	auipc	a5,0x54
    800082ec:	d297c783          	lbu	a5,-727(a5) # 8005c011 <excpt+0x1>
    800082f0:	c799                	beqz	a5,800082fe <tinst_tests_pf+0x4e0>
    800082f2:	6418                	ld	a4,8(s0)
    800082f4:	47bd                	li	a5,15
    800082f6:	00f71463          	bne	a4,a5,800082fe <tinst_tests_pf+0x4e0>
    800082fa:	6830106f          	j	8000a17c <tinst_tests_pf+0x235e>
    800082fe:	0002a517          	auipc	a0,0x2a
    80008302:	40250513          	addi	a0,a0,1026 # 80032700 <__func__.0+0x318>
    80008306:	1be270ef          	jal	8002f4c4 <printf>
    8000830a:	02900513          	li	a0,41
    8000830e:	6a5250ef          	jal	8002e1b2 <putchar>
    80008312:	4529                	li	a0,10
    80008314:	69f250ef          	jal	8002e1b2 <putchar>
    80008318:	00090a63          	beqz	s2,8000832c <tinst_tests_pf+0x50e>
    8000831c:	00054797          	auipc	a5,0x54
    80008320:	cf57c783          	lbu	a5,-779(a5) # 8005c011 <excpt+0x1>
    80008324:	c399                	beqz	a5,8000832a <tinst_tests_pf+0x50c>
    80008326:	7e60106f          	j	80009b0c <tinst_tests_pf+0x1cee>
    8000832a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000832c:	aedf80ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80008330:	77f1                	lui	a5,0xffffc
    80008332:	40019737          	lui	a4,0x40019
    80008336:	eef7879b          	addiw	a5,a5,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8000833a:	070a                	slli	a4,a4,0x2
    8000833c:	00f71023          	sh	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80008340:	0002c617          	auipc	a2,0x2c
    80008344:	f5860613          	addi	a2,a2,-168 # 80034298 <__func__.0+0x1eb0>
    80008348:	08c00593          	li	a1,140
    8000834c:	0002a517          	auipc	a0,0x2a
    80008350:	39450513          	addi	a0,a0,916 # 800326e0 <__func__.0+0x2f8>
    80008354:	170270ef          	jal	8002f4c4 <printf>
    80008358:	00054797          	auipc	a5,0x54
    8000835c:	cb97c783          	lbu	a5,-839(a5) # 8005c011 <excpt+0x1>
    80008360:	e399                	bnez	a5,80008366 <tinst_tests_pf+0x548>
    80008362:	45c0106f          	j	800097be <tinst_tests_pf+0x19a0>
    80008366:	6418                	ld	a4,8(s0)
    80008368:	47bd                	li	a5,15
    8000836a:	0002a597          	auipc	a1,0x2a
    8000836e:	34e58593          	addi	a1,a1,846 # 800326b8 <__func__.0+0x2d0>
    80008372:	00f71463          	bne	a4,a5,8000837a <tinst_tests_pf+0x55c>
    80008376:	3fa0106f          	j	80009770 <tinst_tests_pf+0x1952>
    8000837a:	0002a517          	auipc	a0,0x2a
    8000837e:	37e50513          	addi	a0,a0,894 # 800326f8 <__func__.0+0x310>
    80008382:	142270ef          	jal	8002f4c4 <printf>
    80008386:	00054797          	auipc	a5,0x54
    8000838a:	c8b7c783          	lbu	a5,-885(a5) # 8005c011 <excpt+0x1>
    8000838e:	c799                	beqz	a5,8000839c <tinst_tests_pf+0x57e>
    80008390:	6418                	ld	a4,8(s0)
    80008392:	47bd                	li	a5,15
    80008394:	00f71463          	bne	a4,a5,8000839c <tinst_tests_pf+0x57e>
    80008398:	6810106f          	j	8000a218 <tinst_tests_pf+0x23fa>
    8000839c:	0002a517          	auipc	a0,0x2a
    800083a0:	36450513          	addi	a0,a0,868 # 80032700 <__func__.0+0x318>
    800083a4:	120270ef          	jal	8002f4c4 <printf>
    800083a8:	02900513          	li	a0,41
    800083ac:	607250ef          	jal	8002e1b2 <putchar>
    800083b0:	4529                	li	a0,10
    800083b2:	601250ef          	jal	8002e1b2 <putchar>
    800083b6:	00090a63          	beqz	s2,800083ca <tinst_tests_pf+0x5ac>
    800083ba:	00054797          	auipc	a5,0x54
    800083be:	c577c783          	lbu	a5,-937(a5) # 8005c011 <excpt+0x1>
    800083c2:	c399                	beqz	a5,800083c8 <tinst_tests_pf+0x5aa>
    800083c4:	7960106f          	j	80009b5a <tinst_tests_pf+0x1d3c>
    800083c8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800083ca:	a4ff80ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    800083ce:	deadc7b7          	lui	a5,0xdeadc
    800083d2:	40019737          	lui	a4,0x40019
    800083d6:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    800083da:	070a                	slli	a4,a4,0x2
    800083dc:	00f72023          	sw	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    800083e0:	0002c617          	auipc	a2,0x2c
    800083e4:	ef860613          	addi	a2,a2,-264 # 800342d8 <__func__.0+0x1ef0>
    800083e8:	08c00593          	li	a1,140
    800083ec:	0002a517          	auipc	a0,0x2a
    800083f0:	2f450513          	addi	a0,a0,756 # 800326e0 <__func__.0+0x2f8>
    800083f4:	0d0270ef          	jal	8002f4c4 <printf>
    800083f8:	00054797          	auipc	a5,0x54
    800083fc:	c197c783          	lbu	a5,-999(a5) # 8005c011 <excpt+0x1>
    80008400:	e399                	bnez	a5,80008406 <tinst_tests_pf+0x5e8>
    80008402:	4160106f          	j	80009818 <tinst_tests_pf+0x19fa>
    80008406:	6418                	ld	a4,8(s0)
    80008408:	47bd                	li	a5,15
    8000840a:	0002a597          	auipc	a1,0x2a
    8000840e:	2ae58593          	addi	a1,a1,686 # 800326b8 <__func__.0+0x2d0>
    80008412:	00f71463          	bne	a4,a5,8000841a <tinst_tests_pf+0x5fc>
    80008416:	3b40106f          	j	800097ca <tinst_tests_pf+0x19ac>
    8000841a:	0002a517          	auipc	a0,0x2a
    8000841e:	2de50513          	addi	a0,a0,734 # 800326f8 <__func__.0+0x310>
    80008422:	0a2270ef          	jal	8002f4c4 <printf>
    80008426:	00054797          	auipc	a5,0x54
    8000842a:	beb7c783          	lbu	a5,-1045(a5) # 8005c011 <excpt+0x1>
    8000842e:	c799                	beqz	a5,8000843c <tinst_tests_pf+0x61e>
    80008430:	6418                	ld	a4,8(s0)
    80008432:	47bd                	li	a5,15
    80008434:	00f71463          	bne	a4,a5,8000843c <tinst_tests_pf+0x61e>
    80008438:	67d0106f          	j	8000a2b4 <tinst_tests_pf+0x2496>
    8000843c:	0002a517          	auipc	a0,0x2a
    80008440:	2c450513          	addi	a0,a0,708 # 80032700 <__func__.0+0x318>
    80008444:	080270ef          	jal	8002f4c4 <printf>
    80008448:	02900513          	li	a0,41
    8000844c:	567250ef          	jal	8002e1b2 <putchar>
    80008450:	4529                	li	a0,10
    80008452:	561250ef          	jal	8002e1b2 <putchar>
    80008456:	00090a63          	beqz	s2,8000846a <tinst_tests_pf+0x64c>
    8000845a:	00054797          	auipc	a5,0x54
    8000845e:	bb77c783          	lbu	a5,-1097(a5) # 8005c011 <excpt+0x1>
    80008462:	c399                	beqz	a5,80008468 <tinst_tests_pf+0x64a>
    80008464:	7440106f          	j	80009ba8 <tinst_tests_pf+0x1d8a>
    80008468:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000846a:	9aff80ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000846e:	37ab77b7          	lui	a5,0x37ab7
    80008472:	078a                	slli	a5,a5,0x2
    80008474:	40019737          	lui	a4,0x40019
    80008478:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000847c:	070a                	slli	a4,a4,0x2
    8000847e:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80008482:	0002c617          	auipc	a2,0x2c
    80008486:	e9660613          	addi	a2,a2,-362 # 80034318 <__func__.0+0x1f30>
    8000848a:	08c00593          	li	a1,140
    8000848e:	0002a517          	auipc	a0,0x2a
    80008492:	25250513          	addi	a0,a0,594 # 800326e0 <__func__.0+0x2f8>
    80008496:	02e270ef          	jal	8002f4c4 <printf>
    8000849a:	00054797          	auipc	a5,0x54
    8000849e:	b777c783          	lbu	a5,-1161(a5) # 8005c011 <excpt+0x1>
    800084a2:	e399                	bnez	a5,800084a8 <tinst_tests_pf+0x68a>
    800084a4:	3ce0106f          	j	80009872 <tinst_tests_pf+0x1a54>
    800084a8:	6418                	ld	a4,8(s0)
    800084aa:	47bd                	li	a5,15
    800084ac:	0002a597          	auipc	a1,0x2a
    800084b0:	20c58593          	addi	a1,a1,524 # 800326b8 <__func__.0+0x2d0>
    800084b4:	00f71463          	bne	a4,a5,800084bc <tinst_tests_pf+0x69e>
    800084b8:	36c0106f          	j	80009824 <tinst_tests_pf+0x1a06>
    800084bc:	0002a517          	auipc	a0,0x2a
    800084c0:	23c50513          	addi	a0,a0,572 # 800326f8 <__func__.0+0x310>
    800084c4:	000270ef          	jal	8002f4c4 <printf>
    800084c8:	00054797          	auipc	a5,0x54
    800084cc:	b497c783          	lbu	a5,-1207(a5) # 8005c011 <excpt+0x1>
    800084d0:	c799                	beqz	a5,800084de <tinst_tests_pf+0x6c0>
    800084d2:	6418                	ld	a4,8(s0)
    800084d4:	47bd                	li	a5,15
    800084d6:	00f71463          	bne	a4,a5,800084de <tinst_tests_pf+0x6c0>
    800084da:	6770106f          	j	8000a350 <tinst_tests_pf+0x2532>
    800084de:	0002a517          	auipc	a0,0x2a
    800084e2:	22250513          	addi	a0,a0,546 # 80032700 <__func__.0+0x318>
    800084e6:	7df260ef          	jal	8002f4c4 <printf>
    800084ea:	02900513          	li	a0,41
    800084ee:	4c5250ef          	jal	8002e1b2 <putchar>
    800084f2:	4529                	li	a0,10
    800084f4:	4bf250ef          	jal	8002e1b2 <putchar>
    800084f8:	00090a63          	beqz	s2,8000850c <tinst_tests_pf+0x6ee>
    800084fc:	00054797          	auipc	a5,0x54
    80008500:	b157c783          	lbu	a5,-1259(a5) # 8005c011 <excpt+0x1>
    80008504:	c399                	beqz	a5,8000850a <tinst_tests_pf+0x6ec>
    80008506:	6f00106f          	j	80009bf6 <tinst_tests_pf+0x1dd8>
    8000850a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000850c:	90df80ef          	jal	80000e18 <test_setup_except_function>
 * the asm extended chosen registers are part of the subset allowed
 * so we have to make sure.
 */

static inline uint64_t c_lw(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    80008510:	40019537          	lui	a0,0x40019
    80008514:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    80008516:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80008518:	0002c617          	auipc	a2,0x2c
    8000851c:	e4060613          	addi	a2,a2,-448 # 80034358 <__func__.0+0x1f70>
    80008520:	08c00593          	li	a1,140
    80008524:	0002a517          	auipc	a0,0x2a
    80008528:	1bc50513          	addi	a0,a0,444 # 800326e0 <__func__.0+0x2f8>
    8000852c:	799260ef          	jal	8002f4c4 <printf>
    80008530:	00054797          	auipc	a5,0x54
    80008534:	ae17c783          	lbu	a5,-1311(a5) # 8005c011 <excpt+0x1>
    80008538:	c799                	beqz	a5,80008546 <tinst_tests_pf+0x728>
    8000853a:	6418                	ld	a4,8(s0)
    8000853c:	47b5                	li	a5,13
    8000853e:	00f71463          	bne	a4,a5,80008546 <tinst_tests_pf+0x728>
    80008542:	7fe0106f          	j	80009d40 <tinst_tests_pf+0x1f22>
    80008546:	0002a597          	auipc	a1,0x2a
    8000854a:	17258593          	addi	a1,a1,370 # 800326b8 <__func__.0+0x2d0>
    8000854e:	0002a517          	auipc	a0,0x2a
    80008552:	1aa50513          	addi	a0,a0,426 # 800326f8 <__func__.0+0x310>
    80008556:	76f260ef          	jal	8002f4c4 <printf>
    8000855a:	00054797          	auipc	a5,0x54
    8000855e:	ab77c783          	lbu	a5,-1353(a5) # 8005c011 <excpt+0x1>
    80008562:	c799                	beqz	a5,80008570 <tinst_tests_pf+0x752>
    80008564:	6418                	ld	a4,8(s0)
    80008566:	47b5                	li	a5,13
    80008568:	00f71463          	bne	a4,a5,80008570 <tinst_tests_pf+0x752>
    8000856c:	6810106f          	j	8000a3ec <tinst_tests_pf+0x25ce>
    80008570:	0002a517          	auipc	a0,0x2a
    80008574:	19050513          	addi	a0,a0,400 # 80032700 <__func__.0+0x318>
    80008578:	74d260ef          	jal	8002f4c4 <printf>
    8000857c:	02900513          	li	a0,41
    80008580:	433250ef          	jal	8002e1b2 <putchar>
    80008584:	4529                	li	a0,10
    80008586:	42d250ef          	jal	8002e1b2 <putchar>
    8000858a:	00090a63          	beqz	s2,8000859e <tinst_tests_pf+0x780>
    8000858e:	00054797          	auipc	a5,0x54
    80008592:	a837c783          	lbu	a5,-1405(a5) # 8005c011 <excpt+0x1>
    80008596:	c399                	beqz	a5,8000859c <tinst_tests_pf+0x77e>
    80008598:	6ac0106f          	j	80009c44 <tinst_tests_pf+0x1e26>
    8000859c:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000859e:	87bf80ef          	jal	80000e18 <test_setup_except_function>
    );
    return value;
}

static inline uint64_t c_ld(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    800085a2:	40019537          	lui	a0,0x40019
    800085a6:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    800085a8:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    800085aa:	0002c617          	auipc	a2,0x2c
    800085ae:	dee60613          	addi	a2,a2,-530 # 80034398 <__func__.0+0x1fb0>
        "c.ld    %0, 0(%1)\n\t"
        :"=r"(value): "r"(_addr) : "memory"
    );
    return value;
    800085b2:	84ae                	mv	s1,a1
    800085b4:	0002a517          	auipc	a0,0x2a
    800085b8:	12c50513          	addi	a0,a0,300 # 800326e0 <__func__.0+0x2f8>
    800085bc:	08c00593          	li	a1,140
    800085c0:	705260ef          	jal	8002f4c4 <printf>
    800085c4:	00054797          	auipc	a5,0x54
    800085c8:	a4d7c783          	lbu	a5,-1459(a5) # 8005c011 <excpt+0x1>
    800085cc:	c799                	beqz	a5,800085da <tinst_tests_pf+0x7bc>
    800085ce:	6418                	ld	a4,8(s0)
    800085d0:	47b5                	li	a5,13
    800085d2:	00f71463          	bne	a4,a5,800085da <tinst_tests_pf+0x7bc>
    800085d6:	7be0106f          	j	80009d94 <tinst_tests_pf+0x1f76>
    800085da:	0002a597          	auipc	a1,0x2a
    800085de:	0de58593          	addi	a1,a1,222 # 800326b8 <__func__.0+0x2d0>
    800085e2:	0002a517          	auipc	a0,0x2a
    800085e6:	11650513          	addi	a0,a0,278 # 800326f8 <__func__.0+0x310>
    800085ea:	6db260ef          	jal	8002f4c4 <printf>
    800085ee:	00054797          	auipc	a5,0x54
    800085f2:	a237c783          	lbu	a5,-1501(a5) # 8005c011 <excpt+0x1>
    800085f6:	c799                	beqz	a5,80008604 <tinst_tests_pf+0x7e6>
    800085f8:	6418                	ld	a4,8(s0)
    800085fa:	47b5                	li	a5,13
    800085fc:	00f71463          	bne	a4,a5,80008604 <tinst_tests_pf+0x7e6>
    80008600:	6730106f          	j	8000a472 <tinst_tests_pf+0x2654>
    80008604:	0002a517          	auipc	a0,0x2a
    80008608:	0fc50513          	addi	a0,a0,252 # 80032700 <__func__.0+0x318>
    8000860c:	6b9260ef          	jal	8002f4c4 <printf>
    80008610:	02900513          	li	a0,41
    80008614:	39f250ef          	jal	8002e1b2 <putchar>
    80008618:	4529                	li	a0,10
    8000861a:	399250ef          	jal	8002e1b2 <putchar>
    8000861e:	00090a63          	beqz	s2,80008632 <tinst_tests_pf+0x814>
    80008622:	00054797          	auipc	a5,0x54
    80008626:	9ef7c783          	lbu	a5,-1553(a5) # 8005c011 <excpt+0x1>
    8000862a:	c399                	beqz	a5,80008630 <tinst_tests_pf+0x812>
    8000862c:	6520106f          	j	80009c7e <tinst_tests_pf+0x1e60>
    80008630:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008632:	fe6f80ef          	jal	80000e18 <test_setup_except_function>
}

static inline void c_sw(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    80008636:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    8000863a:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    8000863c:	050a                	slli	a0,a0,0x2
    asm volatile(
    8000863e:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80008640:	0002c617          	auipc	a2,0x2c
    80008644:	d1860613          	addi	a2,a2,-744 # 80034358 <__func__.0+0x1f70>
    80008648:	08c00593          	li	a1,140
    8000864c:	0002a517          	auipc	a0,0x2a
    80008650:	09450513          	addi	a0,a0,148 # 800326e0 <__func__.0+0x2f8>
    80008654:	671260ef          	jal	8002f4c4 <printf>
    80008658:	00054797          	auipc	a5,0x54
    8000865c:	9b97c783          	lbu	a5,-1607(a5) # 8005c011 <excpt+0x1>
    80008660:	c799                	beqz	a5,8000866e <tinst_tests_pf+0x850>
    80008662:	6418                	ld	a4,8(s0)
    80008664:	47bd                	li	a5,15
    80008666:	00f71463          	bne	a4,a5,8000866e <tinst_tests_pf+0x850>
    8000866a:	73e0106f          	j	80009da8 <tinst_tests_pf+0x1f8a>
    8000866e:	0002a597          	auipc	a1,0x2a
    80008672:	04a58593          	addi	a1,a1,74 # 800326b8 <__func__.0+0x2d0>
    80008676:	0002a517          	auipc	a0,0x2a
    8000867a:	08250513          	addi	a0,a0,130 # 800326f8 <__func__.0+0x310>
    8000867e:	647260ef          	jal	8002f4c4 <printf>
    80008682:	00054797          	auipc	a5,0x54
    80008686:	98f7c783          	lbu	a5,-1649(a5) # 8005c011 <excpt+0x1>
    8000868a:	c799                	beqz	a5,80008698 <tinst_tests_pf+0x87a>
    8000868c:	6418                	ld	a4,8(s0)
    8000868e:	47bd                	li	a5,15
    80008690:	00f71463          	bne	a4,a5,80008698 <tinst_tests_pf+0x87a>
    80008694:	6690106f          	j	8000a4fc <tinst_tests_pf+0x26de>
    80008698:	0002a517          	auipc	a0,0x2a
    8000869c:	06850513          	addi	a0,a0,104 # 80032700 <__func__.0+0x318>
    800086a0:	625260ef          	jal	8002f4c4 <printf>
    800086a4:	02900513          	li	a0,41
    800086a8:	30b250ef          	jal	8002e1b2 <putchar>
    800086ac:	4529                	li	a0,10
    800086ae:	305250ef          	jal	8002e1b2 <putchar>
    800086b2:	00090e63          	beqz	s2,800086ce <tinst_tests_pf+0x8b0>
    800086b6:	00054797          	auipc	a5,0x54
    800086ba:	95b7c783          	lbu	a5,-1701(a5) # 8005c011 <excpt+0x1>
    800086be:	c799                	beqz	a5,800086cc <tinst_tests_pf+0x8ae>
    800086c0:	6418                	ld	a4,8(s0)
    800086c2:	47bd                	li	a5,15
    800086c4:	00f71463          	bne	a4,a5,800086cc <tinst_tests_pf+0x8ae>
    800086c8:	4920206f          	j	8000ab5a <tinst_tests_pf+0x2d3c>
    800086cc:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800086ce:	f4af80ef          	jal	80000e18 <test_setup_except_function>
        :: "r"(_value), "r"(_addr): "memory"
    );
}

static inline void c_sd(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    800086d2:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    800086d6:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    800086d8:	050a                	slli	a0,a0,0x2
    asm volatile(
    800086da:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    800086dc:	0002c617          	auipc	a2,0x2c
    800086e0:	cfc60613          	addi	a2,a2,-772 # 800343d8 <__func__.0+0x1ff0>
    800086e4:	08c00593          	li	a1,140
    800086e8:	0002a517          	auipc	a0,0x2a
    800086ec:	ff850513          	addi	a0,a0,-8 # 800326e0 <__func__.0+0x2f8>
    800086f0:	5d5260ef          	jal	8002f4c4 <printf>
    800086f4:	00054797          	auipc	a5,0x54
    800086f8:	91d7c783          	lbu	a5,-1763(a5) # 8005c011 <excpt+0x1>
    800086fc:	c799                	beqz	a5,8000870a <tinst_tests_pf+0x8ec>
    800086fe:	6418                	ld	a4,8(s0)
    80008700:	47bd                	li	a5,15
    80008702:	00f71463          	bne	a4,a5,8000870a <tinst_tests_pf+0x8ec>
    80008706:	6b60106f          	j	80009dbc <tinst_tests_pf+0x1f9e>
    8000870a:	0002a597          	auipc	a1,0x2a
    8000870e:	fae58593          	addi	a1,a1,-82 # 800326b8 <__func__.0+0x2d0>
    80008712:	0002a517          	auipc	a0,0x2a
    80008716:	fe650513          	addi	a0,a0,-26 # 800326f8 <__func__.0+0x310>
    8000871a:	5ab260ef          	jal	8002f4c4 <printf>
    8000871e:	00054797          	auipc	a5,0x54
    80008722:	8f37c783          	lbu	a5,-1805(a5) # 8005c011 <excpt+0x1>
    80008726:	c799                	beqz	a5,80008734 <tinst_tests_pf+0x916>
    80008728:	6418                	ld	a4,8(s0)
    8000872a:	47bd                	li	a5,15
    8000872c:	00f71463          	bne	a4,a5,80008734 <tinst_tests_pf+0x916>
    80008730:	65b0106f          	j	8000a58a <tinst_tests_pf+0x276c>
    80008734:	0002a517          	auipc	a0,0x2a
    80008738:	fcc50513          	addi	a0,a0,-52 # 80032700 <__func__.0+0x318>
    8000873c:	589260ef          	jal	8002f4c4 <printf>
    80008740:	02900513          	li	a0,41
    80008744:	26f250ef          	jal	8002e1b2 <putchar>
    80008748:	4529                	li	a0,10
    8000874a:	269250ef          	jal	8002e1b2 <putchar>
    8000874e:	00090e63          	beqz	s2,8000876a <tinst_tests_pf+0x94c>
    80008752:	00054797          	auipc	a5,0x54
    80008756:	8bf7c783          	lbu	a5,-1857(a5) # 8005c011 <excpt+0x1>
    8000875a:	c799                	beqz	a5,80008768 <tinst_tests_pf+0x94a>
    8000875c:	6418                	ld	a4,8(s0)
    8000875e:	47bd                	li	a5,15
    80008760:	00f71463          	bne	a4,a5,80008768 <tinst_tests_pf+0x94a>
    80008764:	42c0206f          	j	8000ab90 <tinst_tests_pf+0x2d72>
    80008768:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000876a:	eaef80ef          	jal	80000e18 <test_setup_except_function>
    );
}

static inline uint32_t lr_w(uintptr_t addr){
    uint32_t value;
    asm volatile(
    8000876e:	400197b7          	lui	a5,0x40019
    80008772:	078a                	slli	a5,a5,0x2
    80008774:	1007a7af          	lr.w	a5,(a5)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008778:	0002c617          	auipc	a2,0x2c
    8000877c:	ca060613          	addi	a2,a2,-864 # 80034418 <__func__.0+0x2030>
    80008780:	08c00593          	li	a1,140
    80008784:	0002a517          	auipc	a0,0x2a
    80008788:	f5c50513          	addi	a0,a0,-164 # 800326e0 <__func__.0+0x2f8>
    value = lr_w(vaddr_f);
    8000878c:	02079493          	slli	s1,a5,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008790:	535260ef          	jal	8002f4c4 <printf>
    80008794:	00054797          	auipc	a5,0x54
    80008798:	87d7c783          	lbu	a5,-1923(a5) # 8005c011 <excpt+0x1>
    value = lr_w(vaddr_f);
    8000879c:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000879e:	e399                	bnez	a5,800087a4 <tinst_tests_pf+0x986>
    800087a0:	12c0106f          	j	800098cc <tinst_tests_pf+0x1aae>
    800087a4:	6418                	ld	a4,8(s0)
    800087a6:	47b5                	li	a5,13
    800087a8:	0002a597          	auipc	a1,0x2a
    800087ac:	f1058593          	addi	a1,a1,-240 # 800326b8 <__func__.0+0x2d0>
    800087b0:	00f71463          	bne	a4,a5,800087b8 <tinst_tests_pf+0x99a>
    800087b4:	0ca0106f          	j	8000987e <tinst_tests_pf+0x1a60>
    800087b8:	0002a517          	auipc	a0,0x2a
    800087bc:	f4050513          	addi	a0,a0,-192 # 800326f8 <__func__.0+0x310>
    800087c0:	505260ef          	jal	8002f4c4 <printf>
    800087c4:	00054797          	auipc	a5,0x54
    800087c8:	84d7c783          	lbu	a5,-1971(a5) # 8005c011 <excpt+0x1>
    800087cc:	c799                	beqz	a5,800087da <tinst_tests_pf+0x9bc>
    800087ce:	6418                	ld	a4,8(s0)
    800087d0:	47b5                	li	a5,13
    800087d2:	00f71463          	bne	a4,a5,800087da <tinst_tests_pf+0x9bc>
    800087d6:	4e60106f          	j	80009cbc <tinst_tests_pf+0x1e9e>
    800087da:	0002a517          	auipc	a0,0x2a
    800087de:	f2650513          	addi	a0,a0,-218 # 80032700 <__func__.0+0x318>
    800087e2:	4e3260ef          	jal	8002f4c4 <printf>
    800087e6:	02900513          	li	a0,41
    800087ea:	1c9250ef          	jal	8002e1b2 <putchar>
    800087ee:	4529                	li	a0,10
    800087f0:	1c3250ef          	jal	8002e1b2 <putchar>
    800087f4:	00090e63          	beqz	s2,80008810 <tinst_tests_pf+0x9f2>
    800087f8:	00054797          	auipc	a5,0x54
    800087fc:	8197c783          	lbu	a5,-2023(a5) # 8005c011 <excpt+0x1>
    80008800:	c799                	beqz	a5,8000880e <tinst_tests_pf+0x9f0>
    80008802:	6418                	ld	a4,8(s0)
    80008804:	47b5                	li	a5,13
    80008806:	00f71463          	bne	a4,a5,8000880e <tinst_tests_pf+0x9f0>
    8000880a:	3b80206f          	j	8000abc2 <tinst_tests_pf+0x2da4>
    8000880e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008810:	e08f80ef          	jal	80000e18 <test_setup_except_function>
    );
    return value;
}

static inline uint32_t sc_w(uintptr_t addr, uint64_t value){
    asm volatile(
    80008814:	40019737          	lui	a4,0x40019
    80008818:	87a6                	mv	a5,s1
    8000881a:	070a                	slli	a4,a4,0x2
    8000881c:	18f727af          	sc.w	a5,a5,(a4)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80008820:	0002c617          	auipc	a2,0x2c
    80008824:	c3860613          	addi	a2,a2,-968 # 80034458 <__func__.0+0x2070>
    80008828:	08c00593          	li	a1,140
    8000882c:	0002a517          	auipc	a0,0x2a
    80008830:	eb450513          	addi	a0,a0,-332 # 800326e0 <__func__.0+0x2f8>
        "sc.w    %0, %0, 0(%1)\n\t"
        : "+r"(value) : "r"(addr): "memory"
    );
    return value;
    80008834:	0007849b          	sext.w	s1,a5
    80008838:	48d260ef          	jal	8002f4c4 <printf>
    8000883c:	00053797          	auipc	a5,0x53
    80008840:	7d57c783          	lbu	a5,2005(a5) # 8005c011 <excpt+0x1>
    80008844:	e399                	bnez	a5,8000884a <tinst_tests_pf+0xa2c>
    80008846:	0e00106f          	j	80009926 <tinst_tests_pf+0x1b08>
    8000884a:	6418                	ld	a4,8(s0)
    8000884c:	47bd                	li	a5,15
    8000884e:	0002a597          	auipc	a1,0x2a
    80008852:	e6a58593          	addi	a1,a1,-406 # 800326b8 <__func__.0+0x2d0>
    80008856:	00f71463          	bne	a4,a5,8000885e <tinst_tests_pf+0xa40>
    8000885a:	07e0106f          	j	800098d8 <tinst_tests_pf+0x1aba>
    8000885e:	0002a517          	auipc	a0,0x2a
    80008862:	e9a50513          	addi	a0,a0,-358 # 800326f8 <__func__.0+0x310>
    80008866:	45f260ef          	jal	8002f4c4 <printf>
    8000886a:	00053797          	auipc	a5,0x53
    8000886e:	7a77c783          	lbu	a5,1959(a5) # 8005c011 <excpt+0x1>
    80008872:	c799                	beqz	a5,80008880 <tinst_tests_pf+0xa62>
    80008874:	6418                	ld	a4,8(s0)
    80008876:	47bd                	li	a5,15
    80008878:	00f71463          	bne	a4,a5,80008880 <tinst_tests_pf+0xa62>
    8000887c:	4820106f          	j	80009cfe <tinst_tests_pf+0x1ee0>
    80008880:	0002a517          	auipc	a0,0x2a
    80008884:	e8050513          	addi	a0,a0,-384 # 80032700 <__func__.0+0x318>
    80008888:	43d260ef          	jal	8002f4c4 <printf>
    8000888c:	02900513          	li	a0,41
    80008890:	123250ef          	jal	8002e1b2 <putchar>
    80008894:	4529                	li	a0,10
    80008896:	11d250ef          	jal	8002e1b2 <putchar>
    8000889a:	00090e63          	beqz	s2,800088b6 <tinst_tests_pf+0xa98>
    8000889e:	00053797          	auipc	a5,0x53
    800088a2:	7737c783          	lbu	a5,1907(a5) # 8005c011 <excpt+0x1>
    800088a6:	c799                	beqz	a5,800088b4 <tinst_tests_pf+0xa96>
    800088a8:	6418                	ld	a4,8(s0)
    800088aa:	47bd                	li	a5,15
    800088ac:	00f71463          	bne	a4,a5,800088b4 <tinst_tests_pf+0xa96>
    800088b0:	3540206f          	j	8000ac04 <tinst_tests_pf+0x2de6>
    800088b4:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800088b6:	d62f80ef          	jal	80000e18 <test_setup_except_function>
            : "+r"(value) : "r"(addr): "memory" \
        ); \
        return value; \
    }

AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    800088ba:	400197b7          	lui	a5,0x40019
    800088be:	078a                	slli	a5,a5,0x2
    800088c0:	0897a4af          	amoswap.w	s1,s1,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    800088c4:	0002c617          	auipc	a2,0x2c
    800088c8:	bd460613          	addi	a2,a2,-1068 # 80034498 <__func__.0+0x20b0>
    800088cc:	08c00593          	li	a1,140
    800088d0:	0002a517          	auipc	a0,0x2a
    800088d4:	e1050513          	addi	a0,a0,-496 # 800326e0 <__func__.0+0x2f8>
    800088d8:	3ed260ef          	jal	8002f4c4 <printf>
    800088dc:	00053797          	auipc	a5,0x53
    800088e0:	7357c783          	lbu	a5,1845(a5) # 8005c011 <excpt+0x1>
    800088e4:	e399                	bnez	a5,800088ea <tinst_tests_pf+0xacc>
    800088e6:	09a0106f          	j	80009980 <tinst_tests_pf+0x1b62>
    800088ea:	6418                	ld	a4,8(s0)
    800088ec:	47bd                	li	a5,15
    800088ee:	0002a597          	auipc	a1,0x2a
    800088f2:	dca58593          	addi	a1,a1,-566 # 800326b8 <__func__.0+0x2d0>
    800088f6:	00f71463          	bne	a4,a5,800088fe <tinst_tests_pf+0xae0>
    800088fa:	0380106f          	j	80009932 <tinst_tests_pf+0x1b14>
    800088fe:	0002a517          	auipc	a0,0x2a
    80008902:	dfa50513          	addi	a0,a0,-518 # 800326f8 <__func__.0+0x310>
    80008906:	3bf260ef          	jal	8002f4c4 <printf>
    8000890a:	00053797          	auipc	a5,0x53
    8000890e:	7077c783          	lbu	a5,1799(a5) # 8005c011 <excpt+0x1>
    80008912:	c799                	beqz	a5,80008920 <tinst_tests_pf+0xb02>
    80008914:	6418                	ld	a4,8(s0)
    80008916:	47bd                	li	a5,15
    80008918:	00f71463          	bne	a4,a5,80008920 <tinst_tests_pf+0xb02>
    8000891c:	4360106f          	j	80009d52 <tinst_tests_pf+0x1f34>
    80008920:	0002a517          	auipc	a0,0x2a
    80008924:	de050513          	addi	a0,a0,-544 # 80032700 <__func__.0+0x318>
    80008928:	39d260ef          	jal	8002f4c4 <printf>
    8000892c:	02900513          	li	a0,41
    80008930:	083250ef          	jal	8002e1b2 <putchar>
    80008934:	4529                	li	a0,10
    80008936:	07d250ef          	jal	8002e1b2 <putchar>
    8000893a:	00090e63          	beqz	s2,80008956 <tinst_tests_pf+0xb38>
    8000893e:	00053797          	auipc	a5,0x53
    80008942:	6d37c783          	lbu	a5,1747(a5) # 8005c011 <excpt+0x1>
    80008946:	c799                	beqz	a5,80008954 <tinst_tests_pf+0xb36>
    80008948:	6418                	ld	a4,8(s0)
    8000894a:	47bd                	li	a5,15
    8000894c:	00f71463          	bne	a4,a5,80008954 <tinst_tests_pf+0xb36>
    80008950:	2f60206f          	j	8000ac46 <tinst_tests_pf+0x2e28>
    80008954:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008956:	cc2f80ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8000895a:	400197b7          	lui	a5,0x40019
    8000895e:	078a                	slli	a5,a5,0x2
    80008960:	0097a4af          	amoadd.w	s1,s1,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80008964:	0002c617          	auipc	a2,0x2c
    80008968:	b7460613          	addi	a2,a2,-1164 # 800344d8 <__func__.0+0x20f0>
    8000896c:	08c00593          	li	a1,140
    80008970:	0002a517          	auipc	a0,0x2a
    80008974:	d7050513          	addi	a0,a0,-656 # 800326e0 <__func__.0+0x2f8>
    80008978:	34d260ef          	jal	8002f4c4 <printf>
    8000897c:	00053797          	auipc	a5,0x53
    80008980:	6957c783          	lbu	a5,1685(a5) # 8005c011 <excpt+0x1>
    80008984:	c399                	beqz	a5,8000898a <tinst_tests_pf+0xb6c>
    80008986:	08c0106f          	j	80009a12 <tinst_tests_pf+0x1bf4>
    8000898a:	0002a597          	auipc	a1,0x2a
    8000898e:	d2e58593          	addi	a1,a1,-722 # 800326b8 <__func__.0+0x2d0>
    80008992:	0002a517          	auipc	a0,0x2a
    80008996:	d6650513          	addi	a0,a0,-666 # 800326f8 <__func__.0+0x310>
    8000899a:	32b260ef          	jal	8002f4c4 <printf>
    8000899e:	00053797          	auipc	a5,0x53
    800089a2:	6737c783          	lbu	a5,1651(a5) # 8005c011 <excpt+0x1>
    800089a6:	c799                	beqz	a5,800089b4 <tinst_tests_pf+0xb96>
    800089a8:	6418                	ld	a4,8(s0)
    800089aa:	47bd                	li	a5,15
    800089ac:	00f71463          	bne	a4,a5,800089b4 <tinst_tests_pf+0xb96>
    800089b0:	5730106f          	j	8000a722 <tinst_tests_pf+0x2904>
    800089b4:	0002a517          	auipc	a0,0x2a
    800089b8:	d4c50513          	addi	a0,a0,-692 # 80032700 <__func__.0+0x318>
    800089bc:	309260ef          	jal	8002f4c4 <printf>
    800089c0:	02900513          	li	a0,41
    800089c4:	7ee250ef          	jal	8002e1b2 <putchar>
    800089c8:	4529                	li	a0,10
    800089ca:	7e8250ef          	jal	8002e1b2 <putchar>
    800089ce:	00090e63          	beqz	s2,800089ea <tinst_tests_pf+0xbcc>
    800089d2:	00053797          	auipc	a5,0x53
    800089d6:	63f7c783          	lbu	a5,1599(a5) # 8005c011 <excpt+0x1>
    800089da:	c799                	beqz	a5,800089e8 <tinst_tests_pf+0xbca>
    800089dc:	6418                	ld	a4,8(s0)
    800089de:	47bd                	li	a5,15
    800089e0:	00f71463          	bne	a4,a5,800089e8 <tinst_tests_pf+0xbca>
    800089e4:	2a40206f          	j	8000ac88 <tinst_tests_pf+0x2e6a>
    800089e8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800089ea:	c2ef80ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    800089ee:	400197b7          	lui	a5,0x40019
    800089f2:	078a                	slli	a5,a5,0x2
    800089f4:	2097a4af          	amoxor.w	s1,s1,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    800089f8:	0002c617          	auipc	a2,0x2c
    800089fc:	b2060613          	addi	a2,a2,-1248 # 80034518 <__func__.0+0x2130>
    80008a00:	08c00593          	li	a1,140
    80008a04:	0002a517          	auipc	a0,0x2a
    80008a08:	cdc50513          	addi	a0,a0,-804 # 800326e0 <__func__.0+0x2f8>
    80008a0c:	2b9260ef          	jal	8002f4c4 <printf>
    80008a10:	00053797          	auipc	a5,0x53
    80008a14:	6017c783          	lbu	a5,1537(a5) # 8005c011 <excpt+0x1>
    80008a18:	e399                	bnez	a5,80008a1e <tinst_tests_pf+0xc00>
    80008a1a:	5020106f          	j	80009f1c <tinst_tests_pf+0x20fe>
    80008a1e:	6418                	ld	a4,8(s0)
    80008a20:	47bd                	li	a5,15
    80008a22:	0002a597          	auipc	a1,0x2a
    80008a26:	c9658593          	addi	a1,a1,-874 # 800326b8 <__func__.0+0x2d0>
    80008a2a:	00f71463          	bne	a4,a5,80008a32 <tinst_tests_pf+0xc14>
    80008a2e:	4a20106f          	j	80009ed0 <tinst_tests_pf+0x20b2>
    80008a32:	0002a517          	auipc	a0,0x2a
    80008a36:	cc650513          	addi	a0,a0,-826 # 800326f8 <__func__.0+0x310>
    80008a3a:	28b260ef          	jal	8002f4c4 <printf>
    80008a3e:	00053797          	auipc	a5,0x53
    80008a42:	5d37c783          	lbu	a5,1491(a5) # 8005c011 <excpt+0x1>
    80008a46:	c799                	beqz	a5,80008a54 <tinst_tests_pf+0xc36>
    80008a48:	6418                	ld	a4,8(s0)
    80008a4a:	47bd                	li	a5,15
    80008a4c:	00f71463          	bne	a4,a5,80008a54 <tinst_tests_pf+0xc36>
    80008a50:	5150106f          	j	8000a764 <tinst_tests_pf+0x2946>
    80008a54:	0002a517          	auipc	a0,0x2a
    80008a58:	cac50513          	addi	a0,a0,-852 # 80032700 <__func__.0+0x318>
    80008a5c:	269260ef          	jal	8002f4c4 <printf>
    80008a60:	02900513          	li	a0,41
    80008a64:	74e250ef          	jal	8002e1b2 <putchar>
    80008a68:	4529                	li	a0,10
    80008a6a:	748250ef          	jal	8002e1b2 <putchar>
    80008a6e:	00090e63          	beqz	s2,80008a8a <tinst_tests_pf+0xc6c>
    80008a72:	00053797          	auipc	a5,0x53
    80008a76:	59f7c783          	lbu	a5,1439(a5) # 8005c011 <excpt+0x1>
    80008a7a:	c799                	beqz	a5,80008a88 <tinst_tests_pf+0xc6a>
    80008a7c:	6418                	ld	a4,8(s0)
    80008a7e:	47bd                	li	a5,15
    80008a80:	00f71463          	bne	a4,a5,80008a88 <tinst_tests_pf+0xc6a>
    80008a84:	29e0206f          	j	8000ad22 <tinst_tests_pf+0x2f04>
    80008a88:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008a8a:	b8ef80ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    80008a8e:	400197b7          	lui	a5,0x40019
    80008a92:	078a                	slli	a5,a5,0x2
    80008a94:	6097a4af          	amoand.w	s1,s1,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80008a98:	0002c617          	auipc	a2,0x2c
    80008a9c:	ac060613          	addi	a2,a2,-1344 # 80034558 <__func__.0+0x2170>
    80008aa0:	08c00593          	li	a1,140
    80008aa4:	0002a517          	auipc	a0,0x2a
    80008aa8:	c3c50513          	addi	a0,a0,-964 # 800326e0 <__func__.0+0x2f8>
    80008aac:	219260ef          	jal	8002f4c4 <printf>
    80008ab0:	00053797          	auipc	a5,0x53
    80008ab4:	5617c783          	lbu	a5,1377(a5) # 8005c011 <excpt+0x1>
    80008ab8:	e399                	bnez	a5,80008abe <tinst_tests_pf+0xca0>
    80008aba:	4f40106f          	j	80009fae <tinst_tests_pf+0x2190>
    80008abe:	6418                	ld	a4,8(s0)
    80008ac0:	47bd                	li	a5,15
    80008ac2:	0002a597          	auipc	a1,0x2a
    80008ac6:	bf658593          	addi	a1,a1,-1034 # 800326b8 <__func__.0+0x2d0>
    80008aca:	00f71463          	bne	a4,a5,80008ad2 <tinst_tests_pf+0xcb4>
    80008ace:	4940106f          	j	80009f62 <tinst_tests_pf+0x2144>
    80008ad2:	0002a517          	auipc	a0,0x2a
    80008ad6:	c2650513          	addi	a0,a0,-986 # 800326f8 <__func__.0+0x310>
    80008ada:	1eb260ef          	jal	8002f4c4 <printf>
    80008ade:	00053797          	auipc	a5,0x53
    80008ae2:	5337c783          	lbu	a5,1331(a5) # 8005c011 <excpt+0x1>
    80008ae6:	c799                	beqz	a5,80008af4 <tinst_tests_pf+0xcd6>
    80008ae8:	6418                	ld	a4,8(s0)
    80008aea:	47bd                	li	a5,15
    80008aec:	00f71463          	bne	a4,a5,80008af4 <tinst_tests_pf+0xcd6>
    80008af0:	4b70106f          	j	8000a7a6 <tinst_tests_pf+0x2988>
    80008af4:	0002a517          	auipc	a0,0x2a
    80008af8:	c0c50513          	addi	a0,a0,-1012 # 80032700 <__func__.0+0x318>
    80008afc:	1c9260ef          	jal	8002f4c4 <printf>
    80008b00:	02900513          	li	a0,41
    80008b04:	6ae250ef          	jal	8002e1b2 <putchar>
    80008b08:	4529                	li	a0,10
    80008b0a:	6a8250ef          	jal	8002e1b2 <putchar>
    80008b0e:	00090e63          	beqz	s2,80008b2a <tinst_tests_pf+0xd0c>
    80008b12:	00053797          	auipc	a5,0x53
    80008b16:	4ff7c783          	lbu	a5,1279(a5) # 8005c011 <excpt+0x1>
    80008b1a:	c799                	beqz	a5,80008b28 <tinst_tests_pf+0xd0a>
    80008b1c:	6418                	ld	a4,8(s0)
    80008b1e:	47bd                	li	a5,15
    80008b20:	00f71463          	bne	a4,a5,80008b28 <tinst_tests_pf+0xd0a>
    80008b24:	2700206f          	j	8000ad94 <tinst_tests_pf+0x2f76>
    80008b28:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008b2a:	aeef80ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    80008b2e:	400197b7          	lui	a5,0x40019
    80008b32:	078a                	slli	a5,a5,0x2
    80008b34:	4097a4af          	amoor.w	s1,s1,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80008b38:	0002c617          	auipc	a2,0x2c
    80008b3c:	a6060613          	addi	a2,a2,-1440 # 80034598 <__func__.0+0x21b0>
    80008b40:	08c00593          	li	a1,140
    80008b44:	0002a517          	auipc	a0,0x2a
    80008b48:	b9c50513          	addi	a0,a0,-1124 # 800326e0 <__func__.0+0x2f8>
    80008b4c:	179260ef          	jal	8002f4c4 <printf>
    80008b50:	00053797          	auipc	a5,0x53
    80008b54:	4c17c783          	lbu	a5,1217(a5) # 8005c011 <excpt+0x1>
    80008b58:	e399                	bnez	a5,80008b5e <tinst_tests_pf+0xd40>
    80008b5a:	4ea0106f          	j	8000a044 <tinst_tests_pf+0x2226>
    80008b5e:	6418                	ld	a4,8(s0)
    80008b60:	47bd                	li	a5,15
    80008b62:	0002a597          	auipc	a1,0x2a
    80008b66:	b5658593          	addi	a1,a1,-1194 # 800326b8 <__func__.0+0x2d0>
    80008b6a:	00f71463          	bne	a4,a5,80008b72 <tinst_tests_pf+0xd54>
    80008b6e:	4880106f          	j	80009ff6 <tinst_tests_pf+0x21d8>
    80008b72:	0002a517          	auipc	a0,0x2a
    80008b76:	b8650513          	addi	a0,a0,-1146 # 800326f8 <__func__.0+0x310>
    80008b7a:	14b260ef          	jal	8002f4c4 <printf>
    80008b7e:	00053797          	auipc	a5,0x53
    80008b82:	4937c783          	lbu	a5,1171(a5) # 8005c011 <excpt+0x1>
    80008b86:	c799                	beqz	a5,80008b94 <tinst_tests_pf+0xd76>
    80008b88:	6418                	ld	a4,8(s0)
    80008b8a:	47bd                	li	a5,15
    80008b8c:	00f71463          	bne	a4,a5,80008b94 <tinst_tests_pf+0xd76>
    80008b90:	4590106f          	j	8000a7e8 <tinst_tests_pf+0x29ca>
    80008b94:	0002a517          	auipc	a0,0x2a
    80008b98:	b6c50513          	addi	a0,a0,-1172 # 80032700 <__func__.0+0x318>
    80008b9c:	129260ef          	jal	8002f4c4 <printf>
    80008ba0:	02900513          	li	a0,41
    80008ba4:	60e250ef          	jal	8002e1b2 <putchar>
    80008ba8:	4529                	li	a0,10
    80008baa:	608250ef          	jal	8002e1b2 <putchar>
    80008bae:	00090e63          	beqz	s2,80008bca <tinst_tests_pf+0xdac>
    80008bb2:	00053797          	auipc	a5,0x53
    80008bb6:	45f7c783          	lbu	a5,1119(a5) # 8005c011 <excpt+0x1>
    80008bba:	c799                	beqz	a5,80008bc8 <tinst_tests_pf+0xdaa>
    80008bbc:	6418                	ld	a4,8(s0)
    80008bbe:	47bd                	li	a5,15
    80008bc0:	00f71463          	bne	a4,a5,80008bc8 <tinst_tests_pf+0xdaa>
    80008bc4:	2420206f          	j	8000ae06 <tinst_tests_pf+0x2fe8>
    80008bc8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008bca:	a4ef80ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    80008bce:	400197b7          	lui	a5,0x40019
    80008bd2:	078a                	slli	a5,a5,0x2
    80008bd4:	8097a4af          	amomin.w	s1,s1,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    80008bd8:	0002c617          	auipc	a2,0x2c
    80008bdc:	a0060613          	addi	a2,a2,-1536 # 800345d8 <__func__.0+0x21f0>
    80008be0:	08c00593          	li	a1,140
    80008be4:	0002a517          	auipc	a0,0x2a
    80008be8:	afc50513          	addi	a0,a0,-1284 # 800326e0 <__func__.0+0x2f8>
    80008bec:	0d9260ef          	jal	8002f4c4 <printf>
    80008bf0:	00053797          	auipc	a5,0x53
    80008bf4:	4217c783          	lbu	a5,1057(a5) # 8005c011 <excpt+0x1>
    80008bf8:	e399                	bnez	a5,80008bfe <tinst_tests_pf+0xde0>
    80008bfa:	4e00106f          	j	8000a0da <tinst_tests_pf+0x22bc>
    80008bfe:	6418                	ld	a4,8(s0)
    80008c00:	47bd                	li	a5,15
    80008c02:	0002a597          	auipc	a1,0x2a
    80008c06:	ab658593          	addi	a1,a1,-1354 # 800326b8 <__func__.0+0x2d0>
    80008c0a:	00f71463          	bne	a4,a5,80008c12 <tinst_tests_pf+0xdf4>
    80008c0e:	47e0106f          	j	8000a08c <tinst_tests_pf+0x226e>
    80008c12:	0002a517          	auipc	a0,0x2a
    80008c16:	ae650513          	addi	a0,a0,-1306 # 800326f8 <__func__.0+0x310>
    80008c1a:	0ab260ef          	jal	8002f4c4 <printf>
    80008c1e:	00053797          	auipc	a5,0x53
    80008c22:	3f37c783          	lbu	a5,1011(a5) # 8005c011 <excpt+0x1>
    80008c26:	c799                	beqz	a5,80008c34 <tinst_tests_pf+0xe16>
    80008c28:	6418                	ld	a4,8(s0)
    80008c2a:	47bd                	li	a5,15
    80008c2c:	00f71463          	bne	a4,a5,80008c34 <tinst_tests_pf+0xe16>
    80008c30:	3fb0106f          	j	8000a82a <tinst_tests_pf+0x2a0c>
    80008c34:	0002a517          	auipc	a0,0x2a
    80008c38:	acc50513          	addi	a0,a0,-1332 # 80032700 <__func__.0+0x318>
    80008c3c:	089260ef          	jal	8002f4c4 <printf>
    80008c40:	02900513          	li	a0,41
    80008c44:	56e250ef          	jal	8002e1b2 <putchar>
    80008c48:	4529                	li	a0,10
    80008c4a:	568250ef          	jal	8002e1b2 <putchar>
    80008c4e:	00090e63          	beqz	s2,80008c6a <tinst_tests_pf+0xe4c>
    80008c52:	00053797          	auipc	a5,0x53
    80008c56:	3bf7c783          	lbu	a5,959(a5) # 8005c011 <excpt+0x1>
    80008c5a:	c799                	beqz	a5,80008c68 <tinst_tests_pf+0xe4a>
    80008c5c:	6418                	ld	a4,8(s0)
    80008c5e:	47bd                	li	a5,15
    80008c60:	00f71463          	bne	a4,a5,80008c68 <tinst_tests_pf+0xe4a>
    80008c64:	1e40206f          	j	8000ae48 <tinst_tests_pf+0x302a>
    80008c68:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008c6a:	9aef80ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    80008c6e:	400197b7          	lui	a5,0x40019
    80008c72:	078a                	slli	a5,a5,0x2
    80008c74:	a097a4af          	amomax.w	s1,s1,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    80008c78:	0002c617          	auipc	a2,0x2c
    80008c7c:	9a060613          	addi	a2,a2,-1632 # 80034618 <__func__.0+0x2230>
    80008c80:	08c00593          	li	a1,140
    80008c84:	0002a517          	auipc	a0,0x2a
    80008c88:	a5c50513          	addi	a0,a0,-1444 # 800326e0 <__func__.0+0x2f8>
    80008c8c:	039260ef          	jal	8002f4c4 <printf>
    80008c90:	00053797          	auipc	a5,0x53
    80008c94:	3817c783          	lbu	a5,897(a5) # 8005c011 <excpt+0x1>
    80008c98:	e399                	bnez	a5,80008c9e <tinst_tests_pf+0xe80>
    80008c9a:	4d60106f          	j	8000a170 <tinst_tests_pf+0x2352>
    80008c9e:	6418                	ld	a4,8(s0)
    80008ca0:	47bd                	li	a5,15
    80008ca2:	0002a597          	auipc	a1,0x2a
    80008ca6:	a1658593          	addi	a1,a1,-1514 # 800326b8 <__func__.0+0x2d0>
    80008caa:	00f71463          	bne	a4,a5,80008cb2 <tinst_tests_pf+0xe94>
    80008cae:	4740106f          	j	8000a122 <tinst_tests_pf+0x2304>
    80008cb2:	0002a517          	auipc	a0,0x2a
    80008cb6:	a4650513          	addi	a0,a0,-1466 # 800326f8 <__func__.0+0x310>
    80008cba:	00b260ef          	jal	8002f4c4 <printf>
    80008cbe:	00053797          	auipc	a5,0x53
    80008cc2:	3537c783          	lbu	a5,851(a5) # 8005c011 <excpt+0x1>
    80008cc6:	c799                	beqz	a5,80008cd4 <tinst_tests_pf+0xeb6>
    80008cc8:	6418                	ld	a4,8(s0)
    80008cca:	47bd                	li	a5,15
    80008ccc:	00f71463          	bne	a4,a5,80008cd4 <tinst_tests_pf+0xeb6>
    80008cd0:	39d0106f          	j	8000a86c <tinst_tests_pf+0x2a4e>
    80008cd4:	0002a517          	auipc	a0,0x2a
    80008cd8:	a2c50513          	addi	a0,a0,-1492 # 80032700 <__func__.0+0x318>
    80008cdc:	7e8260ef          	jal	8002f4c4 <printf>
    80008ce0:	02900513          	li	a0,41
    80008ce4:	4ce250ef          	jal	8002e1b2 <putchar>
    80008ce8:	4529                	li	a0,10
    80008cea:	4c8250ef          	jal	8002e1b2 <putchar>
    80008cee:	00090e63          	beqz	s2,80008d0a <tinst_tests_pf+0xeec>
    80008cf2:	00053797          	auipc	a5,0x53
    80008cf6:	31f7c783          	lbu	a5,799(a5) # 8005c011 <excpt+0x1>
    80008cfa:	c799                	beqz	a5,80008d08 <tinst_tests_pf+0xeea>
    80008cfc:	6418                	ld	a4,8(s0)
    80008cfe:	47bd                	li	a5,15
    80008d00:	00f71463          	bne	a4,a5,80008d08 <tinst_tests_pf+0xeea>
    80008d04:	1860206f          	j	8000ae8a <tinst_tests_pf+0x306c>
    80008d08:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008d0a:	90ef80ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    80008d0e:	400197b7          	lui	a5,0x40019
    80008d12:	078a                	slli	a5,a5,0x2
    80008d14:	c097a4af          	amominu.w	s1,s1,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    80008d18:	0002c617          	auipc	a2,0x2c
    80008d1c:	94060613          	addi	a2,a2,-1728 # 80034658 <__func__.0+0x2270>
    80008d20:	08c00593          	li	a1,140
    80008d24:	0002a517          	auipc	a0,0x2a
    80008d28:	9bc50513          	addi	a0,a0,-1604 # 800326e0 <__func__.0+0x2f8>
    80008d2c:	798260ef          	jal	8002f4c4 <printf>
    80008d30:	00053797          	auipc	a5,0x53
    80008d34:	2e17c783          	lbu	a5,737(a5) # 8005c011 <excpt+0x1>
    80008d38:	e399                	bnez	a5,80008d3e <tinst_tests_pf+0xf20>
    80008d3a:	4d20106f          	j	8000a20c <tinst_tests_pf+0x23ee>
    80008d3e:	6418                	ld	a4,8(s0)
    80008d40:	47bd                	li	a5,15
    80008d42:	0002a597          	auipc	a1,0x2a
    80008d46:	97658593          	addi	a1,a1,-1674 # 800326b8 <__func__.0+0x2d0>
    80008d4a:	00f71463          	bne	a4,a5,80008d52 <tinst_tests_pf+0xf34>
    80008d4e:	4700106f          	j	8000a1be <tinst_tests_pf+0x23a0>
    80008d52:	0002a517          	auipc	a0,0x2a
    80008d56:	9a650513          	addi	a0,a0,-1626 # 800326f8 <__func__.0+0x310>
    80008d5a:	76a260ef          	jal	8002f4c4 <printf>
    80008d5e:	00053797          	auipc	a5,0x53
    80008d62:	2b37c783          	lbu	a5,691(a5) # 8005c011 <excpt+0x1>
    80008d66:	c799                	beqz	a5,80008d74 <tinst_tests_pf+0xf56>
    80008d68:	6418                	ld	a4,8(s0)
    80008d6a:	47bd                	li	a5,15
    80008d6c:	00f71463          	bne	a4,a5,80008d74 <tinst_tests_pf+0xf56>
    80008d70:	33f0106f          	j	8000a8ae <tinst_tests_pf+0x2a90>
    80008d74:	0002a517          	auipc	a0,0x2a
    80008d78:	98c50513          	addi	a0,a0,-1652 # 80032700 <__func__.0+0x318>
    80008d7c:	748260ef          	jal	8002f4c4 <printf>
    80008d80:	02900513          	li	a0,41
    80008d84:	42e250ef          	jal	8002e1b2 <putchar>
    80008d88:	4529                	li	a0,10
    80008d8a:	428250ef          	jal	8002e1b2 <putchar>
    80008d8e:	00090e63          	beqz	s2,80008daa <tinst_tests_pf+0xf8c>
    80008d92:	00053797          	auipc	a5,0x53
    80008d96:	27f7c783          	lbu	a5,639(a5) # 8005c011 <excpt+0x1>
    80008d9a:	c799                	beqz	a5,80008da8 <tinst_tests_pf+0xf8a>
    80008d9c:	6418                	ld	a4,8(s0)
    80008d9e:	47bd                	li	a5,15
    80008da0:	00f71463          	bne	a4,a5,80008da8 <tinst_tests_pf+0xf8a>
    80008da4:	12a0206f          	j	8000aece <tinst_tests_pf+0x30b0>
    80008da8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008daa:	86ef80ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    80008dae:	400197b7          	lui	a5,0x40019
    80008db2:	078a                	slli	a5,a5,0x2
    80008db4:	e097a4af          	amomaxu.w	s1,s1,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80008db8:	0002c617          	auipc	a2,0x2c
    80008dbc:	8e060613          	addi	a2,a2,-1824 # 80034698 <__func__.0+0x22b0>
    80008dc0:	08c00593          	li	a1,140
    80008dc4:	0002a517          	auipc	a0,0x2a
    80008dc8:	91c50513          	addi	a0,a0,-1764 # 800326e0 <__func__.0+0x2f8>
    80008dcc:	6f8260ef          	jal	8002f4c4 <printf>
    80008dd0:	00053797          	auipc	a5,0x53
    80008dd4:	2417c783          	lbu	a5,577(a5) # 8005c011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    80008dd8:	1482                	slli	s1,s1,0x20
    80008dda:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80008ddc:	e399                	bnez	a5,80008de2 <tinst_tests_pf+0xfc4>
    80008dde:	4ca0106f          	j	8000a2a8 <tinst_tests_pf+0x248a>
    80008de2:	6418                	ld	a4,8(s0)
    80008de4:	47bd                	li	a5,15
    80008de6:	0002a597          	auipc	a1,0x2a
    80008dea:	8d258593          	addi	a1,a1,-1838 # 800326b8 <__func__.0+0x2d0>
    80008dee:	00f71463          	bne	a4,a5,80008df6 <tinst_tests_pf+0xfd8>
    80008df2:	4680106f          	j	8000a25a <tinst_tests_pf+0x243c>
    80008df6:	0002a517          	auipc	a0,0x2a
    80008dfa:	90250513          	addi	a0,a0,-1790 # 800326f8 <__func__.0+0x310>
    80008dfe:	6c6260ef          	jal	8002f4c4 <printf>
    80008e02:	00053797          	auipc	a5,0x53
    80008e06:	20f7c783          	lbu	a5,527(a5) # 8005c011 <excpt+0x1>
    80008e0a:	c799                	beqz	a5,80008e18 <tinst_tests_pf+0xffa>
    80008e0c:	6418                	ld	a4,8(s0)
    80008e0e:	47bd                	li	a5,15
    80008e10:	00f71463          	bne	a4,a5,80008e18 <tinst_tests_pf+0xffa>
    80008e14:	2dd0106f          	j	8000a8f0 <tinst_tests_pf+0x2ad2>
    80008e18:	0002a517          	auipc	a0,0x2a
    80008e1c:	8e850513          	addi	a0,a0,-1816 # 80032700 <__func__.0+0x318>
    80008e20:	6a4260ef          	jal	8002f4c4 <printf>
    80008e24:	02900513          	li	a0,41
    80008e28:	38a250ef          	jal	8002e1b2 <putchar>
    80008e2c:	4529                	li	a0,10
    80008e2e:	384250ef          	jal	8002e1b2 <putchar>
    80008e32:	00090e63          	beqz	s2,80008e4e <tinst_tests_pf+0x1030>
    80008e36:	00053797          	auipc	a5,0x53
    80008e3a:	1db7c783          	lbu	a5,475(a5) # 8005c011 <excpt+0x1>
    80008e3e:	c799                	beqz	a5,80008e4c <tinst_tests_pf+0x102e>
    80008e40:	6418                	ld	a4,8(s0)
    80008e42:	47bd                	li	a5,15
    80008e44:	00f71463          	bne	a4,a5,80008e4c <tinst_tests_pf+0x102e>
    80008e48:	0ca0206f          	j	8000af12 <tinst_tests_pf+0x30f4>
    80008e4c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008e4e:	fcbf70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    80008e52:	400197b7          	lui	a5,0x40019
    80008e56:	078a                	slli	a5,a5,0x2
    80008e58:	0897b4af          	amoswap.d	s1,s1,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    80008e5c:	0002c617          	auipc	a2,0x2c
    80008e60:	87c60613          	addi	a2,a2,-1924 # 800346d8 <__func__.0+0x22f0>
    80008e64:	08c00593          	li	a1,140
    80008e68:	0002a517          	auipc	a0,0x2a
    80008e6c:	87850513          	addi	a0,a0,-1928 # 800326e0 <__func__.0+0x2f8>
    80008e70:	654260ef          	jal	8002f4c4 <printf>
    80008e74:	00053797          	auipc	a5,0x53
    80008e78:	19d7c783          	lbu	a5,413(a5) # 8005c011 <excpt+0x1>
    80008e7c:	e399                	bnez	a5,80008e82 <tinst_tests_pf+0x1064>
    80008e7e:	4c60106f          	j	8000a344 <tinst_tests_pf+0x2526>
    80008e82:	6418                	ld	a4,8(s0)
    80008e84:	47bd                	li	a5,15
    80008e86:	0002a597          	auipc	a1,0x2a
    80008e8a:	83258593          	addi	a1,a1,-1998 # 800326b8 <__func__.0+0x2d0>
    80008e8e:	00f71463          	bne	a4,a5,80008e96 <tinst_tests_pf+0x1078>
    80008e92:	4640106f          	j	8000a2f6 <tinst_tests_pf+0x24d8>
    80008e96:	0002a517          	auipc	a0,0x2a
    80008e9a:	86250513          	addi	a0,a0,-1950 # 800326f8 <__func__.0+0x310>
    80008e9e:	626260ef          	jal	8002f4c4 <printf>
    80008ea2:	00053797          	auipc	a5,0x53
    80008ea6:	16f7c783          	lbu	a5,367(a5) # 8005c011 <excpt+0x1>
    80008eaa:	c799                	beqz	a5,80008eb8 <tinst_tests_pf+0x109a>
    80008eac:	6418                	ld	a4,8(s0)
    80008eae:	47bd                	li	a5,15
    80008eb0:	00f71463          	bne	a4,a5,80008eb8 <tinst_tests_pf+0x109a>
    80008eb4:	27f0106f          	j	8000a932 <tinst_tests_pf+0x2b14>
    80008eb8:	0002a517          	auipc	a0,0x2a
    80008ebc:	84850513          	addi	a0,a0,-1976 # 80032700 <__func__.0+0x318>
    80008ec0:	604260ef          	jal	8002f4c4 <printf>
    80008ec4:	02900513          	li	a0,41
    80008ec8:	2ea250ef          	jal	8002e1b2 <putchar>
    80008ecc:	4529                	li	a0,10
    80008ece:	2e4250ef          	jal	8002e1b2 <putchar>
    80008ed2:	00090e63          	beqz	s2,80008eee <tinst_tests_pf+0x10d0>
    80008ed6:	00053797          	auipc	a5,0x53
    80008eda:	13b7c783          	lbu	a5,315(a5) # 8005c011 <excpt+0x1>
    80008ede:	c799                	beqz	a5,80008eec <tinst_tests_pf+0x10ce>
    80008ee0:	6418                	ld	a4,8(s0)
    80008ee2:	47bd                	li	a5,15
    80008ee4:	00f71463          	bne	a4,a5,80008eec <tinst_tests_pf+0x10ce>
    80008ee8:	06e0206f          	j	8000af56 <tinst_tests_pf+0x3138>
    80008eec:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008eee:	f2bf70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    80008ef2:	400197b7          	lui	a5,0x40019
    80008ef6:	078a                	slli	a5,a5,0x2
    80008ef8:	0097b4af          	amoadd.d	s1,s1,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    80008efc:	0002c617          	auipc	a2,0x2c
    80008f00:	81c60613          	addi	a2,a2,-2020 # 80034718 <__func__.0+0x2330>
    80008f04:	08c00593          	li	a1,140
    80008f08:	00029517          	auipc	a0,0x29
    80008f0c:	7d850513          	addi	a0,a0,2008 # 800326e0 <__func__.0+0x2f8>
    80008f10:	5b4260ef          	jal	8002f4c4 <printf>
    80008f14:	00053797          	auipc	a5,0x53
    80008f18:	0fd7c783          	lbu	a5,253(a5) # 8005c011 <excpt+0x1>
    80008f1c:	e399                	bnez	a5,80008f22 <tinst_tests_pf+0x1104>
    80008f1e:	4c20106f          	j	8000a3e0 <tinst_tests_pf+0x25c2>
    80008f22:	6418                	ld	a4,8(s0)
    80008f24:	47bd                	li	a5,15
    80008f26:	00029597          	auipc	a1,0x29
    80008f2a:	79258593          	addi	a1,a1,1938 # 800326b8 <__func__.0+0x2d0>
    80008f2e:	00f71463          	bne	a4,a5,80008f36 <tinst_tests_pf+0x1118>
    80008f32:	4600106f          	j	8000a392 <tinst_tests_pf+0x2574>
    80008f36:	00029517          	auipc	a0,0x29
    80008f3a:	7c250513          	addi	a0,a0,1986 # 800326f8 <__func__.0+0x310>
    80008f3e:	586260ef          	jal	8002f4c4 <printf>
    80008f42:	00053797          	auipc	a5,0x53
    80008f46:	0cf7c783          	lbu	a5,207(a5) # 8005c011 <excpt+0x1>
    80008f4a:	c799                	beqz	a5,80008f58 <tinst_tests_pf+0x113a>
    80008f4c:	6418                	ld	a4,8(s0)
    80008f4e:	47bd                	li	a5,15
    80008f50:	00f71463          	bne	a4,a5,80008f58 <tinst_tests_pf+0x113a>
    80008f54:	2210106f          	j	8000a974 <tinst_tests_pf+0x2b56>
    80008f58:	00029517          	auipc	a0,0x29
    80008f5c:	7a850513          	addi	a0,a0,1960 # 80032700 <__func__.0+0x318>
    80008f60:	564260ef          	jal	8002f4c4 <printf>
    80008f64:	02900513          	li	a0,41
    80008f68:	24a250ef          	jal	8002e1b2 <putchar>
    80008f6c:	4529                	li	a0,10
    80008f6e:	244250ef          	jal	8002e1b2 <putchar>
    80008f72:	00090e63          	beqz	s2,80008f8e <tinst_tests_pf+0x1170>
    80008f76:	00053797          	auipc	a5,0x53
    80008f7a:	09b7c783          	lbu	a5,155(a5) # 8005c011 <excpt+0x1>
    80008f7e:	c799                	beqz	a5,80008f8c <tinst_tests_pf+0x116e>
    80008f80:	6418                	ld	a4,8(s0)
    80008f82:	47bd                	li	a5,15
    80008f84:	00f71463          	bne	a4,a5,80008f8c <tinst_tests_pf+0x116e>
    80008f88:	0120206f          	j	8000af9a <tinst_tests_pf+0x317c>
    80008f8c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008f8e:	e8bf70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    80008f92:	400197b7          	lui	a5,0x40019
    80008f96:	078a                	slli	a5,a5,0x2
    80008f98:	2097b4af          	amoxor.d	s1,s1,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    80008f9c:	0002b617          	auipc	a2,0x2b
    80008fa0:	7bc60613          	addi	a2,a2,1980 # 80034758 <__func__.0+0x2370>
    80008fa4:	08c00593          	li	a1,140
    80008fa8:	00029517          	auipc	a0,0x29
    80008fac:	73850513          	addi	a0,a0,1848 # 800326e0 <__func__.0+0x2f8>
    80008fb0:	514260ef          	jal	8002f4c4 <printf>
    80008fb4:	00053797          	auipc	a5,0x53
    80008fb8:	05d7c783          	lbu	a5,93(a5) # 8005c011 <excpt+0x1>
    80008fbc:	e399                	bnez	a5,80008fc2 <tinst_tests_pf+0x11a4>
    80008fbe:	4a80106f          	j	8000a466 <tinst_tests_pf+0x2648>
    80008fc2:	6418                	ld	a4,8(s0)
    80008fc4:	47bd                	li	a5,15
    80008fc6:	00029597          	auipc	a1,0x29
    80008fca:	6f258593          	addi	a1,a1,1778 # 800326b8 <__func__.0+0x2d0>
    80008fce:	00f71463          	bne	a4,a5,80008fd6 <tinst_tests_pf+0x11b8>
    80008fd2:	4460106f          	j	8000a418 <tinst_tests_pf+0x25fa>
    80008fd6:	00029517          	auipc	a0,0x29
    80008fda:	72250513          	addi	a0,a0,1826 # 800326f8 <__func__.0+0x310>
    80008fde:	4e6260ef          	jal	8002f4c4 <printf>
    80008fe2:	00053797          	auipc	a5,0x53
    80008fe6:	02f7c783          	lbu	a5,47(a5) # 8005c011 <excpt+0x1>
    80008fea:	c799                	beqz	a5,80008ff8 <tinst_tests_pf+0x11da>
    80008fec:	6418                	ld	a4,8(s0)
    80008fee:	47bd                	li	a5,15
    80008ff0:	00f71463          	bne	a4,a5,80008ff8 <tinst_tests_pf+0x11da>
    80008ff4:	1c30106f          	j	8000a9b6 <tinst_tests_pf+0x2b98>
    80008ff8:	00029517          	auipc	a0,0x29
    80008ffc:	70850513          	addi	a0,a0,1800 # 80032700 <__func__.0+0x318>
    80009000:	4c4260ef          	jal	8002f4c4 <printf>
    80009004:	02900513          	li	a0,41
    80009008:	1aa250ef          	jal	8002e1b2 <putchar>
    8000900c:	4529                	li	a0,10
    8000900e:	1a4250ef          	jal	8002e1b2 <putchar>
    80009012:	00090e63          	beqz	s2,8000902e <tinst_tests_pf+0x1210>
    80009016:	00053797          	auipc	a5,0x53
    8000901a:	ffb7c783          	lbu	a5,-5(a5) # 8005c011 <excpt+0x1>
    8000901e:	c799                	beqz	a5,8000902c <tinst_tests_pf+0x120e>
    80009020:	6418                	ld	a4,8(s0)
    80009022:	47bd                	li	a5,15
    80009024:	00f71463          	bne	a4,a5,8000902c <tinst_tests_pf+0x120e>
    80009028:	7b70106f          	j	8000afde <tinst_tests_pf+0x31c0>
    8000902c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000902e:	debf70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80009032:	400197b7          	lui	a5,0x40019
    80009036:	078a                	slli	a5,a5,0x2
    80009038:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000903c:	0002b617          	auipc	a2,0x2b
    80009040:	75c60613          	addi	a2,a2,1884 # 80034798 <__func__.0+0x23b0>
    80009044:	08c00593          	li	a1,140
    80009048:	00029517          	auipc	a0,0x29
    8000904c:	69850513          	addi	a0,a0,1688 # 800326e0 <__func__.0+0x2f8>
    80009050:	474260ef          	jal	8002f4c4 <printf>
    80009054:	00053797          	auipc	a5,0x53
    80009058:	fbd7c783          	lbu	a5,-67(a5) # 8005c011 <excpt+0x1>
    8000905c:	e399                	bnez	a5,80009062 <tinst_tests_pf+0x1244>
    8000905e:	4920106f          	j	8000a4f0 <tinst_tests_pf+0x26d2>
    80009062:	6418                	ld	a4,8(s0)
    80009064:	47bd                	li	a5,15
    80009066:	00029597          	auipc	a1,0x29
    8000906a:	65258593          	addi	a1,a1,1618 # 800326b8 <__func__.0+0x2d0>
    8000906e:	00f71463          	bne	a4,a5,80009076 <tinst_tests_pf+0x1258>
    80009072:	4300106f          	j	8000a4a2 <tinst_tests_pf+0x2684>
    80009076:	00029517          	auipc	a0,0x29
    8000907a:	68250513          	addi	a0,a0,1666 # 800326f8 <__func__.0+0x310>
    8000907e:	446260ef          	jal	8002f4c4 <printf>
    80009082:	00053797          	auipc	a5,0x53
    80009086:	f8f7c783          	lbu	a5,-113(a5) # 8005c011 <excpt+0x1>
    8000908a:	c799                	beqz	a5,80009098 <tinst_tests_pf+0x127a>
    8000908c:	6418                	ld	a4,8(s0)
    8000908e:	47bd                	li	a5,15
    80009090:	00f71463          	bne	a4,a5,80009098 <tinst_tests_pf+0x127a>
    80009094:	7d30106f          	j	8000b066 <tinst_tests_pf+0x3248>
    80009098:	00029517          	auipc	a0,0x29
    8000909c:	66850513          	addi	a0,a0,1640 # 80032700 <__func__.0+0x318>
    800090a0:	424260ef          	jal	8002f4c4 <printf>
    800090a4:	02900513          	li	a0,41
    800090a8:	10a250ef          	jal	8002e1b2 <putchar>
    800090ac:	4529                	li	a0,10
    800090ae:	104250ef          	jal	8002e1b2 <putchar>
    800090b2:	00090e63          	beqz	s2,800090ce <tinst_tests_pf+0x12b0>
    800090b6:	00053797          	auipc	a5,0x53
    800090ba:	f5b7c783          	lbu	a5,-165(a5) # 8005c011 <excpt+0x1>
    800090be:	c799                	beqz	a5,800090cc <tinst_tests_pf+0x12ae>
    800090c0:	6418                	ld	a4,8(s0)
    800090c2:	47bd                	li	a5,15
    800090c4:	00f71463          	bne	a4,a5,800090cc <tinst_tests_pf+0x12ae>
    800090c8:	75b0106f          	j	8000b022 <tinst_tests_pf+0x3204>
    800090cc:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800090ce:	d4bf70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    800090d2:	400197b7          	lui	a5,0x40019
    800090d6:	078a                	slli	a5,a5,0x2
    800090d8:	4097b4af          	amoor.d	s1,s1,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    800090dc:	0002b617          	auipc	a2,0x2b
    800090e0:	6fc60613          	addi	a2,a2,1788 # 800347d8 <__func__.0+0x23f0>
    800090e4:	08c00593          	li	a1,140
    800090e8:	00029517          	auipc	a0,0x29
    800090ec:	5f850513          	addi	a0,a0,1528 # 800326e0 <__func__.0+0x2f8>
    800090f0:	3d4260ef          	jal	8002f4c4 <printf>
    800090f4:	00053797          	auipc	a5,0x53
    800090f8:	f1d7c783          	lbu	a5,-227(a5) # 8005c011 <excpt+0x1>
    800090fc:	e399                	bnez	a5,80009102 <tinst_tests_pf+0x12e4>
    800090fe:	4800106f          	j	8000a57e <tinst_tests_pf+0x2760>
    80009102:	6418                	ld	a4,8(s0)
    80009104:	47bd                	li	a5,15
    80009106:	00029597          	auipc	a1,0x29
    8000910a:	5b258593          	addi	a1,a1,1458 # 800326b8 <__func__.0+0x2d0>
    8000910e:	00f71463          	bne	a4,a5,80009116 <tinst_tests_pf+0x12f8>
    80009112:	41e0106f          	j	8000a530 <tinst_tests_pf+0x2712>
    80009116:	00029517          	auipc	a0,0x29
    8000911a:	5e250513          	addi	a0,a0,1506 # 800326f8 <__func__.0+0x310>
    8000911e:	3a6260ef          	jal	8002f4c4 <printf>
    80009122:	00053797          	auipc	a5,0x53
    80009126:	eef7c783          	lbu	a5,-273(a5) # 8005c011 <excpt+0x1>
    8000912a:	c799                	beqz	a5,80009138 <tinst_tests_pf+0x131a>
    8000912c:	6418                	ld	a4,8(s0)
    8000912e:	47bd                	li	a5,15
    80009130:	00f71463          	bne	a4,a5,80009138 <tinst_tests_pf+0x131a>
    80009134:	7770106f          	j	8000b0aa <tinst_tests_pf+0x328c>
    80009138:	00029517          	auipc	a0,0x29
    8000913c:	5c850513          	addi	a0,a0,1480 # 80032700 <__func__.0+0x318>
    80009140:	384260ef          	jal	8002f4c4 <printf>
    80009144:	02900513          	li	a0,41
    80009148:	06a250ef          	jal	8002e1b2 <putchar>
    8000914c:	4529                	li	a0,10
    8000914e:	064250ef          	jal	8002e1b2 <putchar>
    80009152:	00090a63          	beqz	s2,80009166 <tinst_tests_pf+0x1348>
    80009156:	00053797          	auipc	a5,0x53
    8000915a:	ebb7c783          	lbu	a5,-325(a5) # 8005c011 <excpt+0x1>
    8000915e:	c399                	beqz	a5,80009164 <tinst_tests_pf+0x1346>
    80009160:	0990106f          	j	8000a9f8 <tinst_tests_pf+0x2bda>
    80009164:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009166:	cb3f70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8000916a:	400197b7          	lui	a5,0x40019
    8000916e:	078a                	slli	a5,a5,0x2
    80009170:	8097b4af          	amomin.d	s1,s1,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    80009174:	0002b617          	auipc	a2,0x2b
    80009178:	6a460613          	addi	a2,a2,1700 # 80034818 <__func__.0+0x2430>
    8000917c:	08c00593          	li	a1,140
    80009180:	00029517          	auipc	a0,0x29
    80009184:	56050513          	addi	a0,a0,1376 # 800326e0 <__func__.0+0x2f8>
    80009188:	33c260ef          	jal	8002f4c4 <printf>
    8000918c:	00053797          	auipc	a5,0x53
    80009190:	e857c783          	lbu	a5,-379(a5) # 8005c011 <excpt+0x1>
    80009194:	e399                	bnez	a5,8000919a <tinst_tests_pf+0x137c>
    80009196:	4720106f          	j	8000a608 <tinst_tests_pf+0x27ea>
    8000919a:	6418                	ld	a4,8(s0)
    8000919c:	47bd                	li	a5,15
    8000919e:	00029597          	auipc	a1,0x29
    800091a2:	51a58593          	addi	a1,a1,1306 # 800326b8 <__func__.0+0x2d0>
    800091a6:	00f71463          	bne	a4,a5,800091ae <tinst_tests_pf+0x1390>
    800091aa:	4100106f          	j	8000a5ba <tinst_tests_pf+0x279c>
    800091ae:	00029517          	auipc	a0,0x29
    800091b2:	54a50513          	addi	a0,a0,1354 # 800326f8 <__func__.0+0x310>
    800091b6:	30e260ef          	jal	8002f4c4 <printf>
    800091ba:	00053797          	auipc	a5,0x53
    800091be:	e577c783          	lbu	a5,-425(a5) # 8005c011 <excpt+0x1>
    800091c2:	c799                	beqz	a5,800091d0 <tinst_tests_pf+0x13b2>
    800091c4:	6418                	ld	a4,8(s0)
    800091c6:	47bd                	li	a5,15
    800091c8:	00f71463          	bne	a4,a5,800091d0 <tinst_tests_pf+0x13b2>
    800091cc:	7230106f          	j	8000b0ee <tinst_tests_pf+0x32d0>
    800091d0:	00029517          	auipc	a0,0x29
    800091d4:	53050513          	addi	a0,a0,1328 # 80032700 <__func__.0+0x318>
    800091d8:	2ec260ef          	jal	8002f4c4 <printf>
    800091dc:	02900513          	li	a0,41
    800091e0:	7d3240ef          	jal	8002e1b2 <putchar>
    800091e4:	4529                	li	a0,10
    800091e6:	7cd240ef          	jal	8002e1b2 <putchar>
    800091ea:	00090a63          	beqz	s2,800091fe <tinst_tests_pf+0x13e0>
    800091ee:	00053797          	auipc	a5,0x53
    800091f2:	e237c783          	lbu	a5,-477(a5) # 8005c011 <excpt+0x1>
    800091f6:	c399                	beqz	a5,800091fc <tinst_tests_pf+0x13de>
    800091f8:	04f0106f          	j	8000aa46 <tinst_tests_pf+0x2c28>
    800091fc:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800091fe:	c1bf70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80009202:	400197b7          	lui	a5,0x40019
    80009206:	078a                	slli	a5,a5,0x2
    80009208:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000920c:	0002b617          	auipc	a2,0x2b
    80009210:	64c60613          	addi	a2,a2,1612 # 80034858 <__func__.0+0x2470>
    80009214:	08c00593          	li	a1,140
    80009218:	00029517          	auipc	a0,0x29
    8000921c:	4c850513          	addi	a0,a0,1224 # 800326e0 <__func__.0+0x2f8>
    80009220:	2a4260ef          	jal	8002f4c4 <printf>
    80009224:	00053797          	auipc	a5,0x53
    80009228:	ded7c783          	lbu	a5,-531(a5) # 8005c011 <excpt+0x1>
    8000922c:	e399                	bnez	a5,80009232 <tinst_tests_pf+0x1414>
    8000922e:	4340106f          	j	8000a662 <tinst_tests_pf+0x2844>
    80009232:	6418                	ld	a4,8(s0)
    80009234:	47bd                	li	a5,15
    80009236:	00029597          	auipc	a1,0x29
    8000923a:	48258593          	addi	a1,a1,1154 # 800326b8 <__func__.0+0x2d0>
    8000923e:	00f71463          	bne	a4,a5,80009246 <tinst_tests_pf+0x1428>
    80009242:	3d20106f          	j	8000a614 <tinst_tests_pf+0x27f6>
    80009246:	00029517          	auipc	a0,0x29
    8000924a:	4b250513          	addi	a0,a0,1202 # 800326f8 <__func__.0+0x310>
    8000924e:	276260ef          	jal	8002f4c4 <printf>
    80009252:	00053797          	auipc	a5,0x53
    80009256:	dbf7c783          	lbu	a5,-577(a5) # 8005c011 <excpt+0x1>
    8000925a:	c799                	beqz	a5,80009268 <tinst_tests_pf+0x144a>
    8000925c:	6418                	ld	a4,8(s0)
    8000925e:	47bd                	li	a5,15
    80009260:	00f71463          	bne	a4,a5,80009268 <tinst_tests_pf+0x144a>
    80009264:	6cf0106f          	j	8000b132 <tinst_tests_pf+0x3314>
    80009268:	00029517          	auipc	a0,0x29
    8000926c:	49850513          	addi	a0,a0,1176 # 80032700 <__func__.0+0x318>
    80009270:	254260ef          	jal	8002f4c4 <printf>
    80009274:	02900513          	li	a0,41
    80009278:	73b240ef          	jal	8002e1b2 <putchar>
    8000927c:	4529                	li	a0,10
    8000927e:	735240ef          	jal	8002e1b2 <putchar>
    80009282:	00090a63          	beqz	s2,80009296 <tinst_tests_pf+0x1478>
    80009286:	00053797          	auipc	a5,0x53
    8000928a:	d8b7c783          	lbu	a5,-629(a5) # 8005c011 <excpt+0x1>
    8000928e:	c399                	beqz	a5,80009294 <tinst_tests_pf+0x1476>
    80009290:	02f0106f          	j	8000aabe <tinst_tests_pf+0x2ca0>
    80009294:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009296:	b83f70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8000929a:	400197b7          	lui	a5,0x40019
    8000929e:	078a                	slli	a5,a5,0x2
    800092a0:	c097b4af          	amominu.d	s1,s1,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    800092a4:	0002b617          	auipc	a2,0x2b
    800092a8:	5f460613          	addi	a2,a2,1524 # 80034898 <__func__.0+0x24b0>
    800092ac:	08c00593          	li	a1,140
    800092b0:	00029517          	auipc	a0,0x29
    800092b4:	43050513          	addi	a0,a0,1072 # 800326e0 <__func__.0+0x2f8>
    800092b8:	20c260ef          	jal	8002f4c4 <printf>
    800092bc:	00053797          	auipc	a5,0x53
    800092c0:	d557c783          	lbu	a5,-683(a5) # 8005c011 <excpt+0x1>
    800092c4:	e399                	bnez	a5,800092ca <tinst_tests_pf+0x14ac>
    800092c6:	3f60106f          	j	8000a6bc <tinst_tests_pf+0x289e>
    800092ca:	6418                	ld	a4,8(s0)
    800092cc:	47bd                	li	a5,15
    800092ce:	00029597          	auipc	a1,0x29
    800092d2:	3ea58593          	addi	a1,a1,1002 # 800326b8 <__func__.0+0x2d0>
    800092d6:	00f71463          	bne	a4,a5,800092de <tinst_tests_pf+0x14c0>
    800092da:	3940106f          	j	8000a66e <tinst_tests_pf+0x2850>
    800092de:	00029517          	auipc	a0,0x29
    800092e2:	41a50513          	addi	a0,a0,1050 # 800326f8 <__func__.0+0x310>
    800092e6:	1de260ef          	jal	8002f4c4 <printf>
    800092ea:	00053797          	auipc	a5,0x53
    800092ee:	d277c783          	lbu	a5,-729(a5) # 8005c011 <excpt+0x1>
    800092f2:	c799                	beqz	a5,80009300 <tinst_tests_pf+0x14e2>
    800092f4:	6418                	ld	a4,8(s0)
    800092f6:	47bd                	li	a5,15
    800092f8:	00f71463          	bne	a4,a5,80009300 <tinst_tests_pf+0x14e2>
    800092fc:	67b0106f          	j	8000b176 <tinst_tests_pf+0x3358>
    80009300:	00029517          	auipc	a0,0x29
    80009304:	40050513          	addi	a0,a0,1024 # 80032700 <__func__.0+0x318>
    80009308:	1bc260ef          	jal	8002f4c4 <printf>
    8000930c:	02900513          	li	a0,41
    80009310:	6a3240ef          	jal	8002e1b2 <putchar>
    80009314:	4529                	li	a0,10
    80009316:	69d240ef          	jal	8002e1b2 <putchar>
    8000931a:	00090a63          	beqz	s2,8000932e <tinst_tests_pf+0x1510>
    8000931e:	00053797          	auipc	a5,0x53
    80009322:	cf37c783          	lbu	a5,-781(a5) # 8005c011 <excpt+0x1>
    80009326:	c399                	beqz	a5,8000932c <tinst_tests_pf+0x150e>
    80009328:	7e40106f          	j	8000ab0c <tinst_tests_pf+0x2cee>
    8000932c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000932e:	aebf70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    80009332:	400197b7          	lui	a5,0x40019
    80009336:	078a                	slli	a5,a5,0x2
    80009338:	e097b4af          	amomaxu.d	s1,s1,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000933c:	0002b617          	auipc	a2,0x2b
    80009340:	59c60613          	addi	a2,a2,1436 # 800348d8 <__func__.0+0x24f0>
    80009344:	08c00593          	li	a1,140
    80009348:	00029517          	auipc	a0,0x29
    8000934c:	39850513          	addi	a0,a0,920 # 800326e0 <__func__.0+0x2f8>
    80009350:	174260ef          	jal	8002f4c4 <printf>
    80009354:	00053797          	auipc	a5,0x53
    80009358:	cbd7c783          	lbu	a5,-835(a5) # 8005c011 <excpt+0x1>
    8000935c:	e399                	bnez	a5,80009362 <tinst_tests_pf+0x1544>
    8000935e:	3b80106f          	j	8000a716 <tinst_tests_pf+0x28f8>
    80009362:	6418                	ld	a4,8(s0)
    80009364:	47bd                	li	a5,15
    80009366:	00029597          	auipc	a1,0x29
    8000936a:	35258593          	addi	a1,a1,850 # 800326b8 <__func__.0+0x2d0>
    8000936e:	00f71463          	bne	a4,a5,80009376 <tinst_tests_pf+0x1558>
    80009372:	3560106f          	j	8000a6c8 <tinst_tests_pf+0x28aa>
    80009376:	00029517          	auipc	a0,0x29
    8000937a:	38250513          	addi	a0,a0,898 # 800326f8 <__func__.0+0x310>
    8000937e:	146260ef          	jal	8002f4c4 <printf>
    80009382:	00053797          	auipc	a5,0x53
    80009386:	c8f7c783          	lbu	a5,-881(a5) # 8005c011 <excpt+0x1>
    8000938a:	c799                	beqz	a5,80009398 <tinst_tests_pf+0x157a>
    8000938c:	6418                	ld	a4,8(s0)
    8000938e:	47bd                	li	a5,15
    80009390:	00f71463          	bne	a4,a5,80009398 <tinst_tests_pf+0x157a>
    80009394:	6270106f          	j	8000b1ba <tinst_tests_pf+0x339c>
    80009398:	00029517          	auipc	a0,0x29
    8000939c:	36850513          	addi	a0,a0,872 # 80032700 <__func__.0+0x318>
    800093a0:	124260ef          	jal	8002f4c4 <printf>
    800093a4:	02900513          	li	a0,41
    800093a8:	60b240ef          	jal	8002e1b2 <putchar>
    800093ac:	4529                	li	a0,10
    800093ae:	605240ef          	jal	8002e1b2 <putchar>
    800093b2:	04090e63          	beqz	s2,8000940e <tinst_tests_pf+0x15f0>
    800093b6:	00053497          	auipc	s1,0x53
    800093ba:	c5b4c483          	lbu	s1,-933(s1) # 8005c011 <excpt+0x1>
    800093be:	c8a9                	beqz	s1,80009410 <tinst_tests_pf+0x15f2>
    800093c0:	6418                	ld	a4,8(s0)
    800093c2:	47bd                	li	a5,15
    800093c4:	04f71563          	bne	a4,a5,8000940e <tinst_tests_pf+0x15f0>
    800093c8:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    800093ca:	00029597          	auipc	a1,0x29
    800093ce:	2de58593          	addi	a1,a1,734 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    800093d2:	c3b9                	beqz	a5,80009418 <tinst_tests_pf+0x15fa>
    800093d4:	6814                	ld	a3,16(s0)

static inline uint32_t read_instruction(uintptr_t addr) {

    uint32_t instruction = 0;

    if((addr & 0b1) != 0) {
    800093d6:	0016f713          	andi	a4,a3,1
    800093da:	2c0710e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    }

    instruction = *((uint16_t*)addr);
    800093de:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800093e2:	460d                	li	a2,3
    800093e4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800093e8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800093ea:	00c59763          	bne	a1,a2,800093f8 <tinst_tests_pf+0x15da>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800093ee:	0026d683          	lhu	a3,2(a3)
    800093f2:	0106969b          	slliw	a3,a3,0x10
    800093f6:	8f55                	or	a4,a4,a3
    800093f8:	1ffe16b7          	lui	a3,0x1ffe1
    800093fc:	068e                	slli	a3,a3,0x3
    800093fe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009400:	8f75                	and	a4,a4,a3
    TEST_END();
    80009402:	00029597          	auipc	a1,0x29
    80009406:	2a658593          	addi	a1,a1,678 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000940a:	00e78763          	beq	a5,a4,80009418 <tinst_tests_pf+0x15fa>
    8000940e:	4481                	li	s1,0
    TEST_END();
    80009410:	00029597          	auipc	a1,0x29
    80009414:	2a858593          	addi	a1,a1,680 # 800326b8 <__func__.0+0x2d0>
    80009418:	00029517          	auipc	a0,0x29
    8000941c:	34850513          	addi	a0,a0,840 # 80032760 <__func__.0+0x378>
    80009420:	0a4260ef          	jal	8002f4c4 <printf>
    80009424:	4511                	li	a0,4
    80009426:	aeff70ef          	jal	80000f14 <goto_priv>
    8000942a:	b4cf80ef          	jal	80001776 <reset_state>
}
    8000942e:	70a2                	ld	ra,40(sp)
    80009430:	7402                	ld	s0,32(sp)
    80009432:	6942                	ld	s2,16(sp)
    80009434:	69a2                	ld	s3,8(sp)
    80009436:	8526                	mv	a0,s1
    80009438:	64e2                	ld	s1,24(sp)
    8000943a:	6145                	addi	sp,sp,48
    8000943c:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    8000943e:	701c                	ld	a5,32(s0)
    80009440:	00029597          	auipc	a1,0x29
    80009444:	26858593          	addi	a1,a1,616 # 800326a8 <__func__.0+0x2c0>
    80009448:	e399                	bnez	a5,8000944e <tinst_tests_pf+0x1630>
    8000944a:	a55fe06f          	j	80007e9e <tinst_tests_pf+0x80>
    8000944e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009450:	0016f713          	andi	a4,a3,1
    80009454:	240713e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009458:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000945c:	460d                	li	a2,3
    8000945e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009462:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009464:	00c59763          	bne	a1,a2,80009472 <tinst_tests_pf+0x1654>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009468:	0026d683          	lhu	a3,2(a3)
    8000946c:	0106969b          	slliw	a3,a3,0x10
    80009470:	8f55                	or	a4,a4,a3
    80009472:	1746                	slli	a4,a4,0x31
    80009474:	9345                	srli	a4,a4,0x31
    80009476:	00029597          	auipc	a1,0x29
    8000947a:	23258593          	addi	a1,a1,562 # 800326a8 <__func__.0+0x2c0>
    8000947e:	00e79463          	bne	a5,a4,80009486 <tinst_tests_pf+0x1668>
    80009482:	a1dfe06f          	j	80007e9e <tinst_tests_pf+0x80>
    80009486:	00029597          	auipc	a1,0x29
    8000948a:	23258593          	addi	a1,a1,562 # 800326b8 <__func__.0+0x2d0>
    8000948e:	a11fe06f          	j	80007e9e <tinst_tests_pf+0x80>
    80009492:	6418                	ld	a4,8(s0)
    80009494:	47b5                	li	a5,13
    80009496:	4901                	li	s2,0
    80009498:	00f70463          	beq	a4,a5,800094a0 <tinst_tests_pf+0x1682>
    8000949c:	a4ffe06f          	j	80007eea <tinst_tests_pf+0xcc>
    800094a0:	7018                	ld	a4,32(s0)
    800094a2:	4905                	li	s2,1
    800094a4:	e319                	bnez	a4,800094aa <tinst_tests_pf+0x168c>
    800094a6:	a45fe06f          	j	80007eea <tinst_tests_pf+0xcc>
    800094aa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800094ac:	0126f7b3          	and	a5,a3,s2
    800094b0:	1e0795e3          	bnez	a5,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800094b4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800094b8:	460d                	li	a2,3
    800094ba:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    800094be:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800094c0:	00c59763          	bne	a1,a2,800094ce <tinst_tests_pf+0x16b0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800094c4:	0026d683          	lhu	a3,2(a3)
    800094c8:	0106969b          	slliw	a3,a3,0x10
    800094cc:	8fd5                	or	a5,a5,a3
    800094ce:	03179913          	slli	s2,a5,0x31
    800094d2:	03195913          	srli	s2,s2,0x31
    800094d6:	40e90933          	sub	s2,s2,a4
    800094da:	00193913          	seqz	s2,s2
    800094de:	a0dfe06f          	j	80007eea <tinst_tests_pf+0xcc>
    800094e2:	701c                	ld	a5,32(s0)
    800094e4:	e399                	bnez	a5,800094ea <tinst_tests_pf+0x16cc>
    800094e6:	9effe06f          	j	80007ed4 <tinst_tests_pf+0xb6>
    800094ea:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800094ec:	0016f713          	andi	a4,a3,1
    800094f0:	1a0715e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800094f4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800094f8:	460d                	li	a2,3
    800094fa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800094fe:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009500:	00c59763          	bne	a1,a2,8000950e <tinst_tests_pf+0x16f0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009504:	0026d683          	lhu	a3,2(a3)
    80009508:	0106969b          	slliw	a3,a3,0x10
    8000950c:	8f55                	or	a4,a4,a3
    8000950e:	1746                	slli	a4,a4,0x31
    80009510:	9345                	srli	a4,a4,0x31
    80009512:	00e78463          	beq	a5,a4,8000951a <tinst_tests_pf+0x16fc>
    80009516:	9abfe06f          	j	80007ec0 <tinst_tests_pf+0xa2>
    8000951a:	9bbfe06f          	j	80007ed4 <tinst_tests_pf+0xb6>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000951e:	701c                	ld	a5,32(s0)
    80009520:	00029597          	auipc	a1,0x29
    80009524:	18858593          	addi	a1,a1,392 # 800326a8 <__func__.0+0x2c0>
    80009528:	e399                	bnez	a5,8000952e <tinst_tests_pf+0x1710>
    8000952a:	a09fe06f          	j	80007f32 <tinst_tests_pf+0x114>
    8000952e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009530:	0016f713          	andi	a4,a3,1
    80009534:	160713e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009538:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000953c:	460d                	li	a2,3
    8000953e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009542:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009544:	00c59763          	bne	a1,a2,80009552 <tinst_tests_pf+0x1734>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009548:	0026d683          	lhu	a3,2(a3)
    8000954c:	0106969b          	slliw	a3,a3,0x10
    80009550:	8f55                	or	a4,a4,a3
    80009552:	1746                	slli	a4,a4,0x31
    80009554:	9345                	srli	a4,a4,0x31
    80009556:	00029597          	auipc	a1,0x29
    8000955a:	15258593          	addi	a1,a1,338 # 800326a8 <__func__.0+0x2c0>
    8000955e:	00e79463          	bne	a5,a4,80009566 <tinst_tests_pf+0x1748>
    80009562:	9d1fe06f          	j	80007f32 <tinst_tests_pf+0x114>
    80009566:	00029597          	auipc	a1,0x29
    8000956a:	15258593          	addi	a1,a1,338 # 800326b8 <__func__.0+0x2d0>
    8000956e:	9c5fe06f          	j	80007f32 <tinst_tests_pf+0x114>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009572:	701c                	ld	a5,32(s0)
    80009574:	00029597          	auipc	a1,0x29
    80009578:	13458593          	addi	a1,a1,308 # 800326a8 <__func__.0+0x2c0>
    8000957c:	e399                	bnez	a5,80009582 <tinst_tests_pf+0x1764>
    8000957e:	a55fe06f          	j	80007fd2 <tinst_tests_pf+0x1b4>
    80009582:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009584:	0016f713          	andi	a4,a3,1
    80009588:	100719e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000958c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009590:	460d                	li	a2,3
    80009592:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009596:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009598:	00c59763          	bne	a1,a2,800095a6 <tinst_tests_pf+0x1788>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000959c:	0026d683          	lhu	a3,2(a3)
    800095a0:	0106969b          	slliw	a3,a3,0x10
    800095a4:	8f55                	or	a4,a4,a3
    800095a6:	1746                	slli	a4,a4,0x31
    800095a8:	9345                	srli	a4,a4,0x31
    800095aa:	00029597          	auipc	a1,0x29
    800095ae:	0fe58593          	addi	a1,a1,254 # 800326a8 <__func__.0+0x2c0>
    800095b2:	00e79463          	bne	a5,a4,800095ba <tinst_tests_pf+0x179c>
    800095b6:	a1dfe06f          	j	80007fd2 <tinst_tests_pf+0x1b4>
    800095ba:	00029597          	auipc	a1,0x29
    800095be:	0fe58593          	addi	a1,a1,254 # 800326b8 <__func__.0+0x2d0>
    800095c2:	a11fe06f          	j	80007fd2 <tinst_tests_pf+0x1b4>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    800095c6:	701c                	ld	a5,32(s0)
    800095c8:	00029597          	auipc	a1,0x29
    800095cc:	0e058593          	addi	a1,a1,224 # 800326a8 <__func__.0+0x2c0>
    800095d0:	e399                	bnez	a5,800095d6 <tinst_tests_pf+0x17b8>
    800095d2:	aa1fe06f          	j	80008072 <tinst_tests_pf+0x254>
    800095d6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800095d8:	0016f713          	andi	a4,a3,1
    800095dc:	0a071fe3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800095e0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800095e4:	460d                	li	a2,3
    800095e6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800095ea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800095ec:	00c59763          	bne	a1,a2,800095fa <tinst_tests_pf+0x17dc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800095f0:	0026d683          	lhu	a3,2(a3)
    800095f4:	0106969b          	slliw	a3,a3,0x10
    800095f8:	8f55                	or	a4,a4,a3
    800095fa:	1746                	slli	a4,a4,0x31
    800095fc:	9345                	srli	a4,a4,0x31
    800095fe:	00029597          	auipc	a1,0x29
    80009602:	0aa58593          	addi	a1,a1,170 # 800326a8 <__func__.0+0x2c0>
    80009606:	00e79463          	bne	a5,a4,8000960e <tinst_tests_pf+0x17f0>
    8000960a:	a69fe06f          	j	80008072 <tinst_tests_pf+0x254>
    8000960e:	00029597          	auipc	a1,0x29
    80009612:	0aa58593          	addi	a1,a1,170 # 800326b8 <__func__.0+0x2d0>
    80009616:	a5dfe06f          	j	80008072 <tinst_tests_pf+0x254>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    8000961a:	701c                	ld	a5,32(s0)
    8000961c:	00029597          	auipc	a1,0x29
    80009620:	08c58593          	addi	a1,a1,140 # 800326a8 <__func__.0+0x2c0>
    80009624:	e399                	bnez	a5,8000962a <tinst_tests_pf+0x180c>
    80009626:	aedfe06f          	j	80008112 <tinst_tests_pf+0x2f4>
    8000962a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000962c:	0016f713          	andi	a4,a3,1
    80009630:	060715e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009634:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009638:	460d                	li	a2,3
    8000963a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000963e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009640:	00c59763          	bne	a1,a2,8000964e <tinst_tests_pf+0x1830>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009644:	0026d683          	lhu	a3,2(a3)
    80009648:	0106969b          	slliw	a3,a3,0x10
    8000964c:	8f55                	or	a4,a4,a3
    8000964e:	1746                	slli	a4,a4,0x31
    80009650:	9345                	srli	a4,a4,0x31
    80009652:	00029597          	auipc	a1,0x29
    80009656:	05658593          	addi	a1,a1,86 # 800326a8 <__func__.0+0x2c0>
    8000965a:	00e79463          	bne	a5,a4,80009662 <tinst_tests_pf+0x1844>
    8000965e:	ab5fe06f          	j	80008112 <tinst_tests_pf+0x2f4>
    80009662:	00029597          	auipc	a1,0x29
    80009666:	05658593          	addi	a1,a1,86 # 800326b8 <__func__.0+0x2d0>
    8000966a:	aa9fe06f          	j	80008112 <tinst_tests_pf+0x2f4>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000966e:	701c                	ld	a5,32(s0)
    80009670:	00029597          	auipc	a1,0x29
    80009674:	03858593          	addi	a1,a1,56 # 800326a8 <__func__.0+0x2c0>
    80009678:	e399                	bnez	a5,8000967e <tinst_tests_pf+0x1860>
    8000967a:	b31fe06f          	j	800081aa <tinst_tests_pf+0x38c>
    8000967e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009680:	0016f713          	andi	a4,a3,1
    80009684:	00071be3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009688:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000968c:	460d                	li	a2,3
    8000968e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009692:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009694:	00c59763          	bne	a1,a2,800096a2 <tinst_tests_pf+0x1884>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009698:	0026d683          	lhu	a3,2(a3)
    8000969c:	0106969b          	slliw	a3,a3,0x10
    800096a0:	8f55                	or	a4,a4,a3
    800096a2:	1746                	slli	a4,a4,0x31
    800096a4:	9345                	srli	a4,a4,0x31
    800096a6:	00029597          	auipc	a1,0x29
    800096aa:	00258593          	addi	a1,a1,2 # 800326a8 <__func__.0+0x2c0>
    800096ae:	00e79463          	bne	a5,a4,800096b6 <tinst_tests_pf+0x1898>
    800096b2:	af9fe06f          	j	800081aa <tinst_tests_pf+0x38c>
    800096b6:	00029597          	auipc	a1,0x29
    800096ba:	00258593          	addi	a1,a1,2 # 800326b8 <__func__.0+0x2d0>
    800096be:	aedfe06f          	j	800081aa <tinst_tests_pf+0x38c>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    800096c2:	701c                	ld	a5,32(s0)
    800096c4:	00029597          	auipc	a1,0x29
    800096c8:	fe458593          	addi	a1,a1,-28 # 800326a8 <__func__.0+0x2c0>
    800096cc:	e399                	bnez	a5,800096d2 <tinst_tests_pf+0x18b4>
    800096ce:	b75fe06f          	j	80008242 <tinst_tests_pf+0x424>
    800096d2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800096d4:	0016f713          	andi	a4,a3,1
    800096d8:	7c071163          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800096dc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800096e0:	460d                	li	a2,3
    800096e2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800096e6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800096e8:	00c59763          	bne	a1,a2,800096f6 <tinst_tests_pf+0x18d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800096ec:	0026d683          	lhu	a3,2(a3)
    800096f0:	0106969b          	slliw	a3,a3,0x10
    800096f4:	8f55                	or	a4,a4,a3
    800096f6:	1746                	slli	a4,a4,0x31
    800096f8:	9345                	srli	a4,a4,0x31
    800096fa:	00029597          	auipc	a1,0x29
    800096fe:	fae58593          	addi	a1,a1,-82 # 800326a8 <__func__.0+0x2c0>
    80009702:	00e79463          	bne	a5,a4,8000970a <tinst_tests_pf+0x18ec>
    80009706:	b3dfe06f          	j	80008242 <tinst_tests_pf+0x424>
    8000970a:	00029597          	auipc	a1,0x29
    8000970e:	fae58593          	addi	a1,a1,-82 # 800326b8 <__func__.0+0x2d0>
    80009712:	b31fe06f          	j	80008242 <tinst_tests_pf+0x424>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009716:	701c                	ld	a5,32(s0)
    80009718:	00029597          	auipc	a1,0x29
    8000971c:	f9058593          	addi	a1,a1,-112 # 800326a8 <__func__.0+0x2c0>
    80009720:	e399                	bnez	a5,80009726 <tinst_tests_pf+0x1908>
    80009722:	bbbfe06f          	j	800082dc <tinst_tests_pf+0x4be>
    80009726:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009728:	0016f713          	andi	a4,a3,1
    8000972c:	76071763          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009730:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009734:	460d                	li	a2,3
    80009736:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000973a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000973c:	00c59763          	bne	a1,a2,8000974a <tinst_tests_pf+0x192c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009740:	0026d683          	lhu	a3,2(a3)
    80009744:	0106969b          	slliw	a3,a3,0x10
    80009748:	8f55                	or	a4,a4,a3
    8000974a:	01f076b7          	lui	a3,0x1f07
    8000974e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009752:	8f75                	and	a4,a4,a3
    80009754:	00029597          	auipc	a1,0x29
    80009758:	f5458593          	addi	a1,a1,-172 # 800326a8 <__func__.0+0x2c0>
    8000975c:	00e79463          	bne	a5,a4,80009764 <tinst_tests_pf+0x1946>
    80009760:	b7dfe06f          	j	800082dc <tinst_tests_pf+0x4be>
    80009764:	00029597          	auipc	a1,0x29
    80009768:	f5458593          	addi	a1,a1,-172 # 800326b8 <__func__.0+0x2d0>
    8000976c:	b71fe06f          	j	800082dc <tinst_tests_pf+0x4be>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009770:	701c                	ld	a5,32(s0)
    80009772:	00029597          	auipc	a1,0x29
    80009776:	f3658593          	addi	a1,a1,-202 # 800326a8 <__func__.0+0x2c0>
    8000977a:	e399                	bnez	a5,80009780 <tinst_tests_pf+0x1962>
    8000977c:	bfffe06f          	j	8000837a <tinst_tests_pf+0x55c>
    80009780:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009782:	0016f713          	andi	a4,a3,1
    80009786:	70071a63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000978a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000978e:	460d                	li	a2,3
    80009790:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009794:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009796:	00c59763          	bne	a1,a2,800097a4 <tinst_tests_pf+0x1986>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000979a:	0026d683          	lhu	a3,2(a3)
    8000979e:	0106969b          	slliw	a3,a3,0x10
    800097a2:	8f55                	or	a4,a4,a3
    800097a4:	01f076b7          	lui	a3,0x1f07
    800097a8:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    800097ac:	8f75                	and	a4,a4,a3
    800097ae:	00029597          	auipc	a1,0x29
    800097b2:	efa58593          	addi	a1,a1,-262 # 800326a8 <__func__.0+0x2c0>
    800097b6:	00e79463          	bne	a5,a4,800097be <tinst_tests_pf+0x19a0>
    800097ba:	bc1fe06f          	j	8000837a <tinst_tests_pf+0x55c>
    800097be:	00029597          	auipc	a1,0x29
    800097c2:	efa58593          	addi	a1,a1,-262 # 800326b8 <__func__.0+0x2d0>
    800097c6:	bb5fe06f          	j	8000837a <tinst_tests_pf+0x55c>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    800097ca:	701c                	ld	a5,32(s0)
    800097cc:	00029597          	auipc	a1,0x29
    800097d0:	edc58593          	addi	a1,a1,-292 # 800326a8 <__func__.0+0x2c0>
    800097d4:	e399                	bnez	a5,800097da <tinst_tests_pf+0x19bc>
    800097d6:	c45fe06f          	j	8000841a <tinst_tests_pf+0x5fc>
    800097da:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800097dc:	0016f713          	andi	a4,a3,1
    800097e0:	6a071d63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800097e4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800097e8:	460d                	li	a2,3
    800097ea:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800097ee:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800097f0:	00c59763          	bne	a1,a2,800097fe <tinst_tests_pf+0x19e0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800097f4:	0026d683          	lhu	a3,2(a3)
    800097f8:	0106969b          	slliw	a3,a3,0x10
    800097fc:	8f55                	or	a4,a4,a3
    800097fe:	01f076b7          	lui	a3,0x1f07
    80009802:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009806:	8f75                	and	a4,a4,a3
    80009808:	00029597          	auipc	a1,0x29
    8000980c:	ea058593          	addi	a1,a1,-352 # 800326a8 <__func__.0+0x2c0>
    80009810:	00e79463          	bne	a5,a4,80009818 <tinst_tests_pf+0x19fa>
    80009814:	c07fe06f          	j	8000841a <tinst_tests_pf+0x5fc>
    80009818:	00029597          	auipc	a1,0x29
    8000981c:	ea058593          	addi	a1,a1,-352 # 800326b8 <__func__.0+0x2d0>
    80009820:	bfbfe06f          	j	8000841a <tinst_tests_pf+0x5fc>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009824:	701c                	ld	a5,32(s0)
    80009826:	00029597          	auipc	a1,0x29
    8000982a:	e8258593          	addi	a1,a1,-382 # 800326a8 <__func__.0+0x2c0>
    8000982e:	e399                	bnez	a5,80009834 <tinst_tests_pf+0x1a16>
    80009830:	c8dfe06f          	j	800084bc <tinst_tests_pf+0x69e>
    80009834:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009836:	0016f713          	andi	a4,a3,1
    8000983a:	66071063          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000983e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009842:	460d                	li	a2,3
    80009844:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009848:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000984a:	00c59763          	bne	a1,a2,80009858 <tinst_tests_pf+0x1a3a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000984e:	0026d683          	lhu	a3,2(a3)
    80009852:	0106969b          	slliw	a3,a3,0x10
    80009856:	8f55                	or	a4,a4,a3
    80009858:	01f076b7          	lui	a3,0x1f07
    8000985c:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009860:	8f75                	and	a4,a4,a3
    80009862:	00029597          	auipc	a1,0x29
    80009866:	e4658593          	addi	a1,a1,-442 # 800326a8 <__func__.0+0x2c0>
    8000986a:	00e79463          	bne	a5,a4,80009872 <tinst_tests_pf+0x1a54>
    8000986e:	c4ffe06f          	j	800084bc <tinst_tests_pf+0x69e>
    80009872:	00029597          	auipc	a1,0x29
    80009876:	e4658593          	addi	a1,a1,-442 # 800326b8 <__func__.0+0x2d0>
    8000987a:	c43fe06f          	j	800084bc <tinst_tests_pf+0x69e>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000987e:	701c                	ld	a5,32(s0)
    80009880:	00029597          	auipc	a1,0x29
    80009884:	e2858593          	addi	a1,a1,-472 # 800326a8 <__func__.0+0x2c0>
    80009888:	e399                	bnez	a5,8000988e <tinst_tests_pf+0x1a70>
    8000988a:	f2ffe06f          	j	800087b8 <tinst_tests_pf+0x99a>
    8000988e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009890:	0016f713          	andi	a4,a3,1
    80009894:	60071363          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009898:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000989c:	460d                	li	a2,3
    8000989e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800098a2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800098a4:	00c59763          	bne	a1,a2,800098b2 <tinst_tests_pf+0x1a94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800098a8:	0026d683          	lhu	a3,2(a3)
    800098ac:	0106969b          	slliw	a3,a3,0x10
    800098b0:	8f55                	or	a4,a4,a3
    800098b2:	1ffe16b7          	lui	a3,0x1ffe1
    800098b6:	068e                	slli	a3,a3,0x3
    800098b8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    800098ba:	8f75                	and	a4,a4,a3
    800098bc:	00029597          	auipc	a1,0x29
    800098c0:	dec58593          	addi	a1,a1,-532 # 800326a8 <__func__.0+0x2c0>
    800098c4:	00e79463          	bne	a5,a4,800098cc <tinst_tests_pf+0x1aae>
    800098c8:	ef1fe06f          	j	800087b8 <tinst_tests_pf+0x99a>
    800098cc:	00029597          	auipc	a1,0x29
    800098d0:	dec58593          	addi	a1,a1,-532 # 800326b8 <__func__.0+0x2d0>
    800098d4:	ee5fe06f          	j	800087b8 <tinst_tests_pf+0x99a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    800098d8:	701c                	ld	a5,32(s0)
    800098da:	00029597          	auipc	a1,0x29
    800098de:	dce58593          	addi	a1,a1,-562 # 800326a8 <__func__.0+0x2c0>
    800098e2:	e399                	bnez	a5,800098e8 <tinst_tests_pf+0x1aca>
    800098e4:	f7bfe06f          	j	8000885e <tinst_tests_pf+0xa40>
    800098e8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800098ea:	0016f713          	andi	a4,a3,1
    800098ee:	5a071663          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800098f2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800098f6:	460d                	li	a2,3
    800098f8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800098fc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800098fe:	00c59763          	bne	a1,a2,8000990c <tinst_tests_pf+0x1aee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009902:	0026d683          	lhu	a3,2(a3)
    80009906:	0106969b          	slliw	a3,a3,0x10
    8000990a:	8f55                	or	a4,a4,a3
    8000990c:	1ffe16b7          	lui	a3,0x1ffe1
    80009910:	068e                	slli	a3,a3,0x3
    80009912:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009914:	8f75                	and	a4,a4,a3
    80009916:	00029597          	auipc	a1,0x29
    8000991a:	d9258593          	addi	a1,a1,-622 # 800326a8 <__func__.0+0x2c0>
    8000991e:	00e79463          	bne	a5,a4,80009926 <tinst_tests_pf+0x1b08>
    80009922:	f3dfe06f          	j	8000885e <tinst_tests_pf+0xa40>
    80009926:	00029597          	auipc	a1,0x29
    8000992a:	d9258593          	addi	a1,a1,-622 # 800326b8 <__func__.0+0x2d0>
    8000992e:	f31fe06f          	j	8000885e <tinst_tests_pf+0xa40>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009932:	701c                	ld	a5,32(s0)
    80009934:	00029597          	auipc	a1,0x29
    80009938:	d7458593          	addi	a1,a1,-652 # 800326a8 <__func__.0+0x2c0>
    8000993c:	e399                	bnez	a5,80009942 <tinst_tests_pf+0x1b24>
    8000993e:	fc1fe06f          	j	800088fe <tinst_tests_pf+0xae0>
    80009942:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009944:	0016f713          	andi	a4,a3,1
    80009948:	54071963          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000994c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009950:	460d                	li	a2,3
    80009952:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009956:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009958:	00c59763          	bne	a1,a2,80009966 <tinst_tests_pf+0x1b48>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000995c:	0026d683          	lhu	a3,2(a3)
    80009960:	0106969b          	slliw	a3,a3,0x10
    80009964:	8f55                	or	a4,a4,a3
    80009966:	1ffe16b7          	lui	a3,0x1ffe1
    8000996a:	068e                	slli	a3,a3,0x3
    8000996c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000996e:	8f75                	and	a4,a4,a3
    80009970:	00029597          	auipc	a1,0x29
    80009974:	d3858593          	addi	a1,a1,-712 # 800326a8 <__func__.0+0x2c0>
    80009978:	00e79463          	bne	a5,a4,80009980 <tinst_tests_pf+0x1b62>
    8000997c:	f83fe06f          	j	800088fe <tinst_tests_pf+0xae0>
    80009980:	00029597          	auipc	a1,0x29
    80009984:	d3858593          	addi	a1,a1,-712 # 800326b8 <__func__.0+0x2d0>
    80009988:	f77fe06f          	j	800088fe <tinst_tests_pf+0xae0>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000998c:	701c                	ld	a5,32(s0)
    8000998e:	e399                	bnez	a5,80009994 <tinst_tests_pf+0x1b76>
    80009990:	dd8fe06f          	j	80007f68 <tinst_tests_pf+0x14a>
    80009994:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009996:	0016f713          	andi	a4,a3,1
    8000999a:	50071063          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000999e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800099a2:	460d                	li	a2,3
    800099a4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800099a8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800099aa:	00c59763          	bne	a1,a2,800099b8 <tinst_tests_pf+0x1b9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800099ae:	0026d683          	lhu	a3,2(a3)
    800099b2:	0106969b          	slliw	a3,a3,0x10
    800099b6:	8f55                	or	a4,a4,a3
    800099b8:	1746                	slli	a4,a4,0x31
    800099ba:	9345                	srli	a4,a4,0x31
    800099bc:	00e78463          	beq	a5,a4,800099c4 <tinst_tests_pf+0x1ba6>
    800099c0:	d94fe06f          	j	80007f54 <tinst_tests_pf+0x136>
    800099c4:	da4fe06f          	j	80007f68 <tinst_tests_pf+0x14a>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    800099c8:	6418                	ld	a4,8(s0)
    800099ca:	47b5                	li	a5,13
    800099cc:	00f70463          	beq	a4,a5,800099d4 <tinst_tests_pf+0x1bb6>
    800099d0:	f90fe06f          	j	80008160 <tinst_tests_pf+0x342>
    800099d4:	7018                	ld	a4,32(s0)
    800099d6:	e319                	bnez	a4,800099dc <tinst_tests_pf+0x1bbe>
    800099d8:	f8afe06f          	j	80008162 <tinst_tests_pf+0x344>
    800099dc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800099de:	0016f793          	andi	a5,a3,1
    800099e2:	4a079c63          	bnez	a5,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800099e6:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800099ea:	460d                	li	a2,3
    800099ec:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    800099f0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800099f2:	00c59763          	bne	a1,a2,80009a00 <tinst_tests_pf+0x1be2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800099f6:	0026d683          	lhu	a3,2(a3)
    800099fa:	0106969b          	slliw	a3,a3,0x10
    800099fe:	8fd5                	or	a5,a5,a3
    80009a00:	17c6                	slli	a5,a5,0x31
    80009a02:	0317d913          	srli	s2,a5,0x31
    80009a06:	40e90933          	sub	s2,s2,a4
    80009a0a:	00193913          	seqz	s2,s2
    80009a0e:	f54fe06f          	j	80008162 <tinst_tests_pf+0x344>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80009a12:	6418                	ld	a4,8(s0)
    80009a14:	47bd                	li	a5,15
    80009a16:	00029597          	auipc	a1,0x29
    80009a1a:	ca258593          	addi	a1,a1,-862 # 800326b8 <__func__.0+0x2d0>
    80009a1e:	00f70463          	beq	a4,a5,80009a26 <tinst_tests_pf+0x1c08>
    80009a22:	f71fe06f          	j	80008992 <tinst_tests_pf+0xb74>
    80009a26:	701c                	ld	a5,32(s0)
    80009a28:	00029597          	auipc	a1,0x29
    80009a2c:	c8058593          	addi	a1,a1,-896 # 800326a8 <__func__.0+0x2c0>
    80009a30:	e399                	bnez	a5,80009a36 <tinst_tests_pf+0x1c18>
    80009a32:	f61fe06f          	j	80008992 <tinst_tests_pf+0xb74>
    80009a36:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a38:	0016f713          	andi	a4,a3,1
    80009a3c:	44071f63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009a40:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a44:	460d                	li	a2,3
    80009a46:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009a4a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a4c:	00c59763          	bne	a1,a2,80009a5a <tinst_tests_pf+0x1c3c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a50:	0026d683          	lhu	a3,2(a3)
    80009a54:	0106969b          	slliw	a3,a3,0x10
    80009a58:	8f55                	or	a4,a4,a3
    80009a5a:	1ffe16b7          	lui	a3,0x1ffe1
    80009a5e:	068e                	slli	a3,a3,0x3
    80009a60:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009a62:	8f75                	and	a4,a4,a3
    80009a64:	00029597          	auipc	a1,0x29
    80009a68:	c4458593          	addi	a1,a1,-956 # 800326a8 <__func__.0+0x2c0>
    80009a6c:	00e78463          	beq	a5,a4,80009a74 <tinst_tests_pf+0x1c56>
    80009a70:	f1bfe06f          	j	8000898a <tinst_tests_pf+0xb6c>
    80009a74:	f1ffe06f          	j	80008992 <tinst_tests_pf+0xb74>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009a78:	6418                	ld	a4,8(s0)
    80009a7a:	47b5                	li	a5,13
    80009a7c:	00f70463          	beq	a4,a5,80009a84 <tinst_tests_pf+0x1c66>
    80009a80:	f78fe06f          	j	800081f8 <tinst_tests_pf+0x3da>
    80009a84:	7018                	ld	a4,32(s0)
    80009a86:	e319                	bnez	a4,80009a8c <tinst_tests_pf+0x1c6e>
    80009a88:	f72fe06f          	j	800081fa <tinst_tests_pf+0x3dc>
    80009a8c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a8e:	0016f793          	andi	a5,a3,1
    80009a92:	40079463          	bnez	a5,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009a96:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a9a:	460d                	li	a2,3
    80009a9c:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009aa0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009aa2:	00c59763          	bne	a1,a2,80009ab0 <tinst_tests_pf+0x1c92>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009aa6:	0026d683          	lhu	a3,2(a3)
    80009aaa:	0106969b          	slliw	a3,a3,0x10
    80009aae:	8fd5                	or	a5,a5,a3
    80009ab0:	17c6                	slli	a5,a5,0x31
    80009ab2:	0317d913          	srli	s2,a5,0x31
    80009ab6:	40e90933          	sub	s2,s2,a4
    80009aba:	00193913          	seqz	s2,s2
    80009abe:	f3cfe06f          	j	800081fa <tinst_tests_pf+0x3dc>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009ac2:	6418                	ld	a4,8(s0)
    80009ac4:	47b5                	li	a5,13
    80009ac6:	00f70463          	beq	a4,a5,80009ace <tinst_tests_pf+0x1cb0>
    80009aca:	fc6fe06f          	j	80008290 <tinst_tests_pf+0x472>
    80009ace:	7018                	ld	a4,32(s0)
    80009ad0:	e319                	bnez	a4,80009ad6 <tinst_tests_pf+0x1cb8>
    80009ad2:	fc0fe06f          	j	80008292 <tinst_tests_pf+0x474>
    80009ad6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ad8:	0016f793          	andi	a5,a3,1
    80009adc:	3a079f63          	bnez	a5,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009ae0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ae4:	460d                	li	a2,3
    80009ae6:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009aea:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009aec:	00c59763          	bne	a1,a2,80009afa <tinst_tests_pf+0x1cdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009af0:	0026d683          	lhu	a3,2(a3)
    80009af4:	0106969b          	slliw	a3,a3,0x10
    80009af8:	8fd5                	or	a5,a5,a3
    80009afa:	17c6                	slli	a5,a5,0x31
    80009afc:	0317d913          	srli	s2,a5,0x31
    80009b00:	40e90933          	sub	s2,s2,a4
    80009b04:	00193913          	seqz	s2,s2
    80009b08:	f8afe06f          	j	80008292 <tinst_tests_pf+0x474>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009b0c:	6418                	ld	a4,8(s0)
    80009b0e:	47bd                	li	a5,15
    80009b10:	00f70463          	beq	a4,a5,80009b18 <tinst_tests_pf+0x1cfa>
    80009b14:	817fe06f          	j	8000832a <tinst_tests_pf+0x50c>
    80009b18:	701c                	ld	a5,32(s0)
    80009b1a:	e399                	bnez	a5,80009b20 <tinst_tests_pf+0x1d02>
    80009b1c:	811fe06f          	j	8000832c <tinst_tests_pf+0x50e>
    80009b20:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b22:	0016f713          	andi	a4,a3,1
    80009b26:	36071a63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009b2a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b2e:	460d                	li	a2,3
    80009b30:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009b34:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b36:	00c59763          	bne	a1,a2,80009b44 <tinst_tests_pf+0x1d26>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b3a:	0026d683          	lhu	a3,2(a3)
    80009b3e:	0106969b          	slliw	a3,a3,0x10
    80009b42:	8f55                	or	a4,a4,a3
    80009b44:	01f076b7          	lui	a3,0x1f07
    80009b48:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009b4c:	8f75                	and	a4,a4,a3
    80009b4e:	40f70933          	sub	s2,a4,a5
    80009b52:	00193913          	seqz	s2,s2
    80009b56:	fd6fe06f          	j	8000832c <tinst_tests_pf+0x50e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009b5a:	6418                	ld	a4,8(s0)
    80009b5c:	47bd                	li	a5,15
    80009b5e:	00f70463          	beq	a4,a5,80009b66 <tinst_tests_pf+0x1d48>
    80009b62:	867fe06f          	j	800083c8 <tinst_tests_pf+0x5aa>
    80009b66:	701c                	ld	a5,32(s0)
    80009b68:	e399                	bnez	a5,80009b6e <tinst_tests_pf+0x1d50>
    80009b6a:	861fe06f          	j	800083ca <tinst_tests_pf+0x5ac>
    80009b6e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b70:	0016f713          	andi	a4,a3,1
    80009b74:	32071363          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009b78:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b7c:	460d                	li	a2,3
    80009b7e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009b82:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b84:	00c59763          	bne	a1,a2,80009b92 <tinst_tests_pf+0x1d74>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b88:	0026d683          	lhu	a3,2(a3)
    80009b8c:	0106969b          	slliw	a3,a3,0x10
    80009b90:	8f55                	or	a4,a4,a3
    80009b92:	01f076b7          	lui	a3,0x1f07
    80009b96:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009b9a:	8f75                	and	a4,a4,a3
    80009b9c:	40f70933          	sub	s2,a4,a5
    80009ba0:	00193913          	seqz	s2,s2
    80009ba4:	827fe06f          	j	800083ca <tinst_tests_pf+0x5ac>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009ba8:	6418                	ld	a4,8(s0)
    80009baa:	47bd                	li	a5,15
    80009bac:	00f70463          	beq	a4,a5,80009bb4 <tinst_tests_pf+0x1d96>
    80009bb0:	8b9fe06f          	j	80008468 <tinst_tests_pf+0x64a>
    80009bb4:	701c                	ld	a5,32(s0)
    80009bb6:	e399                	bnez	a5,80009bbc <tinst_tests_pf+0x1d9e>
    80009bb8:	8b3fe06f          	j	8000846a <tinst_tests_pf+0x64c>
    80009bbc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009bbe:	0016f713          	andi	a4,a3,1
    80009bc2:	2c071c63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009bc6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009bca:	460d                	li	a2,3
    80009bcc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009bd0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009bd2:	00c59763          	bne	a1,a2,80009be0 <tinst_tests_pf+0x1dc2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009bd6:	0026d683          	lhu	a3,2(a3)
    80009bda:	0106969b          	slliw	a3,a3,0x10
    80009bde:	8f55                	or	a4,a4,a3
    80009be0:	01f076b7          	lui	a3,0x1f07
    80009be4:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009be8:	8f75                	and	a4,a4,a3
    80009bea:	40f70933          	sub	s2,a4,a5
    80009bee:	00193913          	seqz	s2,s2
    80009bf2:	879fe06f          	j	8000846a <tinst_tests_pf+0x64c>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009bf6:	6418                	ld	a4,8(s0)
    80009bf8:	47bd                	li	a5,15
    80009bfa:	00f70463          	beq	a4,a5,80009c02 <tinst_tests_pf+0x1de4>
    80009bfe:	90dfe06f          	j	8000850a <tinst_tests_pf+0x6ec>
    80009c02:	701c                	ld	a5,32(s0)
    80009c04:	e399                	bnez	a5,80009c0a <tinst_tests_pf+0x1dec>
    80009c06:	907fe06f          	j	8000850c <tinst_tests_pf+0x6ee>
    80009c0a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c0c:	0016f713          	andi	a4,a3,1
    80009c10:	28071563          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009c14:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c18:	460d                	li	a2,3
    80009c1a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009c1e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009c20:	00c59763          	bne	a1,a2,80009c2e <tinst_tests_pf+0x1e10>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c24:	0026d683          	lhu	a3,2(a3)
    80009c28:	0106969b          	slliw	a3,a3,0x10
    80009c2c:	8f55                	or	a4,a4,a3
    80009c2e:	01f076b7          	lui	a3,0x1f07
    80009c32:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009c36:	8f75                	and	a4,a4,a3
    80009c38:	40f70933          	sub	s2,a4,a5
    80009c3c:	00193913          	seqz	s2,s2
    80009c40:	8cdfe06f          	j	8000850c <tinst_tests_pf+0x6ee>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009c44:	6418                	ld	a4,8(s0)
    80009c46:	47b5                	li	a5,13
    80009c48:	00f70463          	beq	a4,a5,80009c50 <tinst_tests_pf+0x1e32>
    80009c4c:	951fe06f          	j	8000859c <tinst_tests_pf+0x77e>
    80009c50:	7004                	ld	s1,32(s0)
    80009c52:	e099                	bnez	s1,80009c58 <tinst_tests_pf+0x1e3a>
    80009c54:	94bfe06f          	j	8000859e <tinst_tests_pf+0x780>
    80009c58:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009c5a:	0017f713          	andi	a4,a5,1
    80009c5e:	22071e63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009c62:	0007d503          	lhu	a0,0(a5)
    80009c66:	a2df70ef          	jal	80001692 <expand_compressed_instruction>
    80009c6a:	67a1                	lui	a5,0x8
    80009c6c:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009c6e:	00f57933          	and	s2,a0,a5
    80009c72:	40990933          	sub	s2,s2,s1
    80009c76:	00193913          	seqz	s2,s2
    80009c7a:	925fe06f          	j	8000859e <tinst_tests_pf+0x780>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009c7e:	6418                	ld	a4,8(s0)
    80009c80:	47b5                	li	a5,13
    80009c82:	00f70463          	beq	a4,a5,80009c8a <tinst_tests_pf+0x1e6c>
    80009c86:	9abfe06f          	j	80008630 <tinst_tests_pf+0x812>
    80009c8a:	02043983          	ld	s3,32(s0)
    80009c8e:	00099463          	bnez	s3,80009c96 <tinst_tests_pf+0x1e78>
    80009c92:	9a1fe06f          	j	80008632 <tinst_tests_pf+0x814>
    80009c96:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009c98:	0017f713          	andi	a4,a5,1
    80009c9c:	1e071f63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009ca0:	0007d503          	lhu	a0,0(a5)
    80009ca4:	9eff70ef          	jal	80001692 <expand_compressed_instruction>
    80009ca8:	67a1                	lui	a5,0x8
    80009caa:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009cac:	00f57933          	and	s2,a0,a5
    80009cb0:	41390933          	sub	s2,s2,s3
    80009cb4:	00193913          	seqz	s2,s2
    80009cb8:	97bfe06f          	j	80008632 <tinst_tests_pf+0x814>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80009cbc:	701c                	ld	a5,32(s0)
    80009cbe:	e399                	bnez	a5,80009cc4 <tinst_tests_pf+0x1ea6>
    80009cc0:	b2ffe06f          	j	800087ee <tinst_tests_pf+0x9d0>
    80009cc4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009cc6:	0016f713          	andi	a4,a3,1
    80009cca:	1c071863          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009cce:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009cd2:	460d                	li	a2,3
    80009cd4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009cd8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009cda:	00c59763          	bne	a1,a2,80009ce8 <tinst_tests_pf+0x1eca>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009cde:	0026d683          	lhu	a3,2(a3)
    80009ce2:	0106969b          	slliw	a3,a3,0x10
    80009ce6:	8f55                	or	a4,a4,a3
    80009ce8:	1ffe16b7          	lui	a3,0x1ffe1
    80009cec:	068e                	slli	a3,a3,0x3
    80009cee:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009cf0:	8f75                	and	a4,a4,a3
    80009cf2:	00e78463          	beq	a5,a4,80009cfa <tinst_tests_pf+0x1edc>
    80009cf6:	ae5fe06f          	j	800087da <tinst_tests_pf+0x9bc>
    80009cfa:	af5fe06f          	j	800087ee <tinst_tests_pf+0x9d0>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80009cfe:	701c                	ld	a5,32(s0)
    80009d00:	e399                	bnez	a5,80009d06 <tinst_tests_pf+0x1ee8>
    80009d02:	b93fe06f          	j	80008894 <tinst_tests_pf+0xa76>
    80009d06:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d08:	0016f713          	andi	a4,a3,1
    80009d0c:	18071763          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009d10:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d14:	460d                	li	a2,3
    80009d16:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d1a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d1c:	00c59763          	bne	a1,a2,80009d2a <tinst_tests_pf+0x1f0c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d20:	0026d683          	lhu	a3,2(a3)
    80009d24:	0106969b          	slliw	a3,a3,0x10
    80009d28:	8f55                	or	a4,a4,a3
    80009d2a:	1ffe16b7          	lui	a3,0x1ffe1
    80009d2e:	068e                	slli	a3,a3,0x3
    80009d30:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009d32:	8f75                	and	a4,a4,a3
    80009d34:	00e78463          	beq	a5,a4,80009d3c <tinst_tests_pf+0x1f1e>
    80009d38:	b49fe06f          	j	80008880 <tinst_tests_pf+0xa62>
    80009d3c:	b59fe06f          	j	80008894 <tinst_tests_pf+0xa76>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009d40:	7004                	ld	s1,32(s0)
    80009d42:	780494e3          	bnez	s1,8000acca <tinst_tests_pf+0x2eac>
    80009d46:	00029597          	auipc	a1,0x29
    80009d4a:	96258593          	addi	a1,a1,-1694 # 800326a8 <__func__.0+0x2c0>
    80009d4e:	801fe06f          	j	8000854e <tinst_tests_pf+0x730>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009d52:	701c                	ld	a5,32(s0)
    80009d54:	e399                	bnez	a5,80009d5a <tinst_tests_pf+0x1f3c>
    80009d56:	bdffe06f          	j	80008934 <tinst_tests_pf+0xb16>
    80009d5a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d5c:	0016f713          	andi	a4,a3,1
    80009d60:	12071d63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009d64:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d68:	460d                	li	a2,3
    80009d6a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d6e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d70:	00c59763          	bne	a1,a2,80009d7e <tinst_tests_pf+0x1f60>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d74:	0026d683          	lhu	a3,2(a3)
    80009d78:	0106969b          	slliw	a3,a3,0x10
    80009d7c:	8f55                	or	a4,a4,a3
    80009d7e:	1ffe16b7          	lui	a3,0x1ffe1
    80009d82:	068e                	slli	a3,a3,0x3
    80009d84:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009d86:	8f75                	and	a4,a4,a3
    80009d88:	00e78463          	beq	a5,a4,80009d90 <tinst_tests_pf+0x1f72>
    80009d8c:	b95fe06f          	j	80008920 <tinst_tests_pf+0xb02>
    80009d90:	ba5fe06f          	j	80008934 <tinst_tests_pf+0xb16>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009d94:	02043983          	ld	s3,32(s0)
    80009d98:	74099fe3          	bnez	s3,8000acf6 <tinst_tests_pf+0x2ed8>
    80009d9c:	00029597          	auipc	a1,0x29
    80009da0:	90c58593          	addi	a1,a1,-1780 # 800326a8 <__func__.0+0x2c0>
    80009da4:	83ffe06f          	j	800085e2 <tinst_tests_pf+0x7c4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009da8:	02043983          	ld	s3,32(s0)
    80009dac:	7a099ce3          	bnez	s3,8000ad64 <tinst_tests_pf+0x2f46>
    80009db0:	00029597          	auipc	a1,0x29
    80009db4:	8f858593          	addi	a1,a1,-1800 # 800326a8 <__func__.0+0x2c0>
    80009db8:	8bffe06f          	j	80008676 <tinst_tests_pf+0x858>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    80009dbc:	7004                	ld	s1,32(s0)
    80009dbe:	c099                	beqz	s1,80009dc4 <tinst_tests_pf+0x1fa6>
    80009dc0:	0160106f          	j	8000add6 <tinst_tests_pf+0x2fb8>
    80009dc4:	00029597          	auipc	a1,0x29
    80009dc8:	8e458593          	addi	a1,a1,-1820 # 800326a8 <__func__.0+0x2c0>
    80009dcc:	947fe06f          	j	80008712 <tinst_tests_pf+0x8f4>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009dd0:	7018                	ld	a4,32(s0)
    80009dd2:	e319                	bnez	a4,80009dd8 <tinst_tests_pf+0x1fba>
    80009dd4:	9b6fe06f          	j	80007f8a <tinst_tests_pf+0x16c>
    80009dd8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009dda:	0016f793          	andi	a5,a3,1
    80009dde:	efd5                	bnez	a5,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009de0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009de4:	460d                	li	a2,3
    80009de6:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009dea:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009dec:	00c59763          	bne	a1,a2,80009dfa <tinst_tests_pf+0x1fdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009df0:	0026d683          	lhu	a3,2(a3)
    80009df4:	0106969b          	slliw	a3,a3,0x10
    80009df8:	8fd5                	or	a5,a5,a3
    80009dfa:	03179913          	slli	s2,a5,0x31
    80009dfe:	03195913          	srli	s2,s2,0x31
    80009e02:	40e90933          	sub	s2,s2,a4
    80009e06:	00193913          	seqz	s2,s2
    80009e0a:	980fe06f          	j	80007f8a <tinst_tests_pf+0x16c>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009e0e:	7018                	ld	a4,32(s0)
    80009e10:	e319                	bnez	a4,80009e16 <tinst_tests_pf+0x1ff8>
    80009e12:	a18fe06f          	j	8000802a <tinst_tests_pf+0x20c>
    80009e16:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e18:	0016f793          	andi	a5,a3,1
    80009e1c:	efbd                	bnez	a5,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009e1e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e22:	460d                	li	a2,3
    80009e24:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009e28:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009e2a:	00c59763          	bne	a1,a2,80009e38 <tinst_tests_pf+0x201a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e2e:	0026d683          	lhu	a3,2(a3)
    80009e32:	0106969b          	slliw	a3,a3,0x10
    80009e36:	8fd5                	or	a5,a5,a3
    80009e38:	03179913          	slli	s2,a5,0x31
    80009e3c:	03195913          	srli	s2,s2,0x31
    80009e40:	40e90933          	sub	s2,s2,a4
    80009e44:	00193913          	seqz	s2,s2
    80009e48:	9e2fe06f          	j	8000802a <tinst_tests_pf+0x20c>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009e4c:	7018                	ld	a4,32(s0)
    80009e4e:	e319                	bnez	a4,80009e54 <tinst_tests_pf+0x2036>
    80009e50:	a7afe06f          	j	800080ca <tinst_tests_pf+0x2ac>
    80009e54:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e56:	0016f793          	andi	a5,a3,1
    80009e5a:	e3a1                	bnez	a5,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009e5c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e60:	460d                	li	a2,3
    80009e62:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009e66:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009e68:	00c59763          	bne	a1,a2,80009e76 <tinst_tests_pf+0x2058>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e6c:	0026d683          	lhu	a3,2(a3)
    80009e70:	0106969b          	slliw	a3,a3,0x10
    80009e74:	8fd5                	or	a5,a5,a3
    80009e76:	17c6                	slli	a5,a5,0x31
    80009e78:	0317d913          	srli	s2,a5,0x31
    80009e7c:	40e90933          	sub	s2,s2,a4
    80009e80:	00193913          	seqz	s2,s2
    80009e84:	a46fe06f          	j	800080ca <tinst_tests_pf+0x2ac>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009e88:	701c                	ld	a5,32(s0)
    80009e8a:	e399                	bnez	a5,80009e90 <tinst_tests_pf+0x2072>
    80009e8c:	97cfe06f          	j	80008008 <tinst_tests_pf+0x1ea>
    80009e90:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e92:	0016f713          	andi	a4,a3,1
    80009e96:	3e070fe3          	beqz	a4,8000aa94 <tinst_tests_pf+0x2c76>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    80009e9a:	12300613          	li	a2,291
    80009e9e:	00027597          	auipc	a1,0x27
    80009ea2:	99258593          	addi	a1,a1,-1646 # 80030830 <__func__.1>
    80009ea6:	0002a517          	auipc	a0,0x2a
    80009eaa:	1f250513          	addi	a0,a0,498 # 80034098 <__func__.0+0x1cb0>
    80009eae:	616250ef          	jal	8002f4c4 <printf>
    80009eb2:	12300613          	li	a2,291
    80009eb6:	00027597          	auipc	a1,0x27
    80009eba:	97a58593          	addi	a1,a1,-1670 # 80030830 <__func__.1>
    80009ebe:	00029517          	auipc	a0,0x29
    80009ec2:	99a50513          	addi	a0,a0,-1638 # 80032858 <__func__.0+0x470>
    80009ec6:	5fe250ef          	jal	8002f4c4 <printf>
    80009eca:	4501                	li	a0,0
    80009ecc:	1ae250ef          	jal	8002f07a <exit>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80009ed0:	701c                	ld	a5,32(s0)
    80009ed2:	00028597          	auipc	a1,0x28
    80009ed6:	7d658593          	addi	a1,a1,2006 # 800326a8 <__func__.0+0x2c0>
    80009eda:	e399                	bnez	a5,80009ee0 <tinst_tests_pf+0x20c2>
    80009edc:	b57fe06f          	j	80008a32 <tinst_tests_pf+0xc14>
    80009ee0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ee2:	0016f713          	andi	a4,a3,1
    80009ee6:	fb55                	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009ee8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009eec:	460d                	li	a2,3
    80009eee:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ef2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ef4:	00c59763          	bne	a1,a2,80009f02 <tinst_tests_pf+0x20e4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ef8:	0026d683          	lhu	a3,2(a3)
    80009efc:	0106969b          	slliw	a3,a3,0x10
    80009f00:	8f55                	or	a4,a4,a3
    80009f02:	1ffe16b7          	lui	a3,0x1ffe1
    80009f06:	068e                	slli	a3,a3,0x3
    80009f08:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009f0a:	8f75                	and	a4,a4,a3
    80009f0c:	00028597          	auipc	a1,0x28
    80009f10:	79c58593          	addi	a1,a1,1948 # 800326a8 <__func__.0+0x2c0>
    80009f14:	00e79463          	bne	a5,a4,80009f1c <tinst_tests_pf+0x20fe>
    80009f18:	b1bfe06f          	j	80008a32 <tinst_tests_pf+0xc14>
    80009f1c:	00028597          	auipc	a1,0x28
    80009f20:	79c58593          	addi	a1,a1,1948 # 800326b8 <__func__.0+0x2d0>
    80009f24:	b0ffe06f          	j	80008a32 <tinst_tests_pf+0xc14>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009f28:	701c                	ld	a5,32(s0)
    80009f2a:	e399                	bnez	a5,80009f30 <tinst_tests_pf+0x2112>
    80009f2c:	97cfe06f          	j	800080a8 <tinst_tests_pf+0x28a>
    80009f30:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f32:	0016f713          	andi	a4,a3,1
    80009f36:	f335                	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009f38:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f3c:	460d                	li	a2,3
    80009f3e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009f42:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009f44:	00c59763          	bne	a1,a2,80009f52 <tinst_tests_pf+0x2134>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f48:	0026d683          	lhu	a3,2(a3)
    80009f4c:	0106969b          	slliw	a3,a3,0x10
    80009f50:	8f55                	or	a4,a4,a3
    80009f52:	1746                	slli	a4,a4,0x31
    80009f54:	9345                	srli	a4,a4,0x31
    80009f56:	00e78463          	beq	a5,a4,80009f5e <tinst_tests_pf+0x2140>
    80009f5a:	93afe06f          	j	80008094 <tinst_tests_pf+0x276>
    80009f5e:	94afe06f          	j	800080a8 <tinst_tests_pf+0x28a>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80009f62:	701c                	ld	a5,32(s0)
    80009f64:	00028597          	auipc	a1,0x28
    80009f68:	74458593          	addi	a1,a1,1860 # 800326a8 <__func__.0+0x2c0>
    80009f6c:	e399                	bnez	a5,80009f72 <tinst_tests_pf+0x2154>
    80009f6e:	b65fe06f          	j	80008ad2 <tinst_tests_pf+0xcb4>
    80009f72:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f74:	0016f713          	andi	a4,a3,1
    80009f78:	f30d                	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009f7a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f7e:	460d                	li	a2,3
    80009f80:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009f84:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009f86:	00c59763          	bne	a1,a2,80009f94 <tinst_tests_pf+0x2176>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f8a:	0026d683          	lhu	a3,2(a3)
    80009f8e:	0106969b          	slliw	a3,a3,0x10
    80009f92:	8f55                	or	a4,a4,a3
    80009f94:	1ffe16b7          	lui	a3,0x1ffe1
    80009f98:	068e                	slli	a3,a3,0x3
    80009f9a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009f9c:	8f75                	and	a4,a4,a3
    80009f9e:	00028597          	auipc	a1,0x28
    80009fa2:	70a58593          	addi	a1,a1,1802 # 800326a8 <__func__.0+0x2c0>
    80009fa6:	00e79463          	bne	a5,a4,80009fae <tinst_tests_pf+0x2190>
    80009faa:	b29fe06f          	j	80008ad2 <tinst_tests_pf+0xcb4>
    80009fae:	00028597          	auipc	a1,0x28
    80009fb2:	70a58593          	addi	a1,a1,1802 # 800326b8 <__func__.0+0x2d0>
    80009fb6:	b1dfe06f          	j	80008ad2 <tinst_tests_pf+0xcb4>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80009fba:	701c                	ld	a5,32(s0)
    80009fbc:	e399                	bnez	a5,80009fc2 <tinst_tests_pf+0x21a4>
    80009fbe:	98afe06f          	j	80008148 <tinst_tests_pf+0x32a>
    80009fc2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009fc4:	0016f713          	andi	a4,a3,1
    80009fc8:	ec0719e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009fcc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009fd0:	460d                	li	a2,3
    80009fd2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009fd6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009fd8:	00c59763          	bne	a1,a2,80009fe6 <tinst_tests_pf+0x21c8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009fdc:	0026d683          	lhu	a3,2(a3)
    80009fe0:	0106969b          	slliw	a3,a3,0x10
    80009fe4:	8f55                	or	a4,a4,a3
    80009fe6:	1746                	slli	a4,a4,0x31
    80009fe8:	9345                	srli	a4,a4,0x31
    80009fea:	00e78463          	beq	a5,a4,80009ff2 <tinst_tests_pf+0x21d4>
    80009fee:	946fe06f          	j	80008134 <tinst_tests_pf+0x316>
    80009ff2:	956fe06f          	j	80008148 <tinst_tests_pf+0x32a>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80009ff6:	701c                	ld	a5,32(s0)
    80009ff8:	00028597          	auipc	a1,0x28
    80009ffc:	6b058593          	addi	a1,a1,1712 # 800326a8 <__func__.0+0x2c0>
    8000a000:	e399                	bnez	a5,8000a006 <tinst_tests_pf+0x21e8>
    8000a002:	b71fe06f          	j	80008b72 <tinst_tests_pf+0xd54>
    8000a006:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a008:	0016f713          	andi	a4,a3,1
    8000a00c:	e80717e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a010:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a014:	460d                	li	a2,3
    8000a016:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a01a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a01c:	00c59763          	bne	a1,a2,8000a02a <tinst_tests_pf+0x220c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a020:	0026d683          	lhu	a3,2(a3)
    8000a024:	0106969b          	slliw	a3,a3,0x10
    8000a028:	8f55                	or	a4,a4,a3
    8000a02a:	1ffe16b7          	lui	a3,0x1ffe1
    8000a02e:	068e                	slli	a3,a3,0x3
    8000a030:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a032:	8f75                	and	a4,a4,a3
    8000a034:	00028597          	auipc	a1,0x28
    8000a038:	67458593          	addi	a1,a1,1652 # 800326a8 <__func__.0+0x2c0>
    8000a03c:	00e79463          	bne	a5,a4,8000a044 <tinst_tests_pf+0x2226>
    8000a040:	b33fe06f          	j	80008b72 <tinst_tests_pf+0xd54>
    8000a044:	00028597          	auipc	a1,0x28
    8000a048:	67458593          	addi	a1,a1,1652 # 800326b8 <__func__.0+0x2d0>
    8000a04c:	b27fe06f          	j	80008b72 <tinst_tests_pf+0xd54>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000a050:	701c                	ld	a5,32(s0)
    8000a052:	e399                	bnez	a5,8000a058 <tinst_tests_pf+0x223a>
    8000a054:	98cfe06f          	j	800081e0 <tinst_tests_pf+0x3c2>
    8000a058:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a05a:	0016f713          	andi	a4,a3,1
    8000a05e:	e2071ee3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a062:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a066:	460d                	li	a2,3
    8000a068:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a06c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a06e:	00c59763          	bne	a1,a2,8000a07c <tinst_tests_pf+0x225e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a072:	0026d683          	lhu	a3,2(a3)
    8000a076:	0106969b          	slliw	a3,a3,0x10
    8000a07a:	8f55                	or	a4,a4,a3
    8000a07c:	1746                	slli	a4,a4,0x31
    8000a07e:	9345                	srli	a4,a4,0x31
    8000a080:	00e78463          	beq	a5,a4,8000a088 <tinst_tests_pf+0x226a>
    8000a084:	948fe06f          	j	800081cc <tinst_tests_pf+0x3ae>
    8000a088:	958fe06f          	j	800081e0 <tinst_tests_pf+0x3c2>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a08c:	701c                	ld	a5,32(s0)
    8000a08e:	00028597          	auipc	a1,0x28
    8000a092:	61a58593          	addi	a1,a1,1562 # 800326a8 <__func__.0+0x2c0>
    8000a096:	e399                	bnez	a5,8000a09c <tinst_tests_pf+0x227e>
    8000a098:	b7bfe06f          	j	80008c12 <tinst_tests_pf+0xdf4>
    8000a09c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a09e:	0016f713          	andi	a4,a3,1
    8000a0a2:	de071ce3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a0a6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a0aa:	460d                	li	a2,3
    8000a0ac:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a0b0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a0b2:	00c59763          	bne	a1,a2,8000a0c0 <tinst_tests_pf+0x22a2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a0b6:	0026d683          	lhu	a3,2(a3)
    8000a0ba:	0106969b          	slliw	a3,a3,0x10
    8000a0be:	8f55                	or	a4,a4,a3
    8000a0c0:	1ffe16b7          	lui	a3,0x1ffe1
    8000a0c4:	068e                	slli	a3,a3,0x3
    8000a0c6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a0c8:	8f75                	and	a4,a4,a3
    8000a0ca:	00028597          	auipc	a1,0x28
    8000a0ce:	5de58593          	addi	a1,a1,1502 # 800326a8 <__func__.0+0x2c0>
    8000a0d2:	00e79463          	bne	a5,a4,8000a0da <tinst_tests_pf+0x22bc>
    8000a0d6:	b3dfe06f          	j	80008c12 <tinst_tests_pf+0xdf4>
    8000a0da:	00028597          	auipc	a1,0x28
    8000a0de:	5de58593          	addi	a1,a1,1502 # 800326b8 <__func__.0+0x2d0>
    8000a0e2:	b31fe06f          	j	80008c12 <tinst_tests_pf+0xdf4>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000a0e6:	701c                	ld	a5,32(s0)
    8000a0e8:	e399                	bnez	a5,8000a0ee <tinst_tests_pf+0x22d0>
    8000a0ea:	98efe06f          	j	80008278 <tinst_tests_pf+0x45a>
    8000a0ee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a0f0:	0016f713          	andi	a4,a3,1
    8000a0f4:	da0713e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a0f8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a0fc:	460d                	li	a2,3
    8000a0fe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a102:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a104:	00c59763          	bne	a1,a2,8000a112 <tinst_tests_pf+0x22f4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a108:	0026d683          	lhu	a3,2(a3)
    8000a10c:	0106969b          	slliw	a3,a3,0x10
    8000a110:	8f55                	or	a4,a4,a3
    8000a112:	1746                	slli	a4,a4,0x31
    8000a114:	9345                	srli	a4,a4,0x31
    8000a116:	00e78463          	beq	a5,a4,8000a11e <tinst_tests_pf+0x2300>
    8000a11a:	94afe06f          	j	80008264 <tinst_tests_pf+0x446>
    8000a11e:	95afe06f          	j	80008278 <tinst_tests_pf+0x45a>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a122:	701c                	ld	a5,32(s0)
    8000a124:	00028597          	auipc	a1,0x28
    8000a128:	58458593          	addi	a1,a1,1412 # 800326a8 <__func__.0+0x2c0>
    8000a12c:	e399                	bnez	a5,8000a132 <tinst_tests_pf+0x2314>
    8000a12e:	b85fe06f          	j	80008cb2 <tinst_tests_pf+0xe94>
    8000a132:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a134:	0016f713          	andi	a4,a3,1
    8000a138:	d60711e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a13c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a140:	460d                	li	a2,3
    8000a142:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a146:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a148:	00c59763          	bne	a1,a2,8000a156 <tinst_tests_pf+0x2338>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a14c:	0026d683          	lhu	a3,2(a3)
    8000a150:	0106969b          	slliw	a3,a3,0x10
    8000a154:	8f55                	or	a4,a4,a3
    8000a156:	1ffe16b7          	lui	a3,0x1ffe1
    8000a15a:	068e                	slli	a3,a3,0x3
    8000a15c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a15e:	8f75                	and	a4,a4,a3
    8000a160:	00028597          	auipc	a1,0x28
    8000a164:	54858593          	addi	a1,a1,1352 # 800326a8 <__func__.0+0x2c0>
    8000a168:	00e79463          	bne	a5,a4,8000a170 <tinst_tests_pf+0x2352>
    8000a16c:	b47fe06f          	j	80008cb2 <tinst_tests_pf+0xe94>
    8000a170:	00028597          	auipc	a1,0x28
    8000a174:	54858593          	addi	a1,a1,1352 # 800326b8 <__func__.0+0x2d0>
    8000a178:	b3bfe06f          	j	80008cb2 <tinst_tests_pf+0xe94>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000a17c:	701c                	ld	a5,32(s0)
    8000a17e:	e399                	bnez	a5,8000a184 <tinst_tests_pf+0x2366>
    8000a180:	992fe06f          	j	80008312 <tinst_tests_pf+0x4f4>
    8000a184:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a186:	0016f713          	andi	a4,a3,1
    8000a18a:	d00718e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a18e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a192:	460d                	li	a2,3
    8000a194:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a198:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a19a:	00c59763          	bne	a1,a2,8000a1a8 <tinst_tests_pf+0x238a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a19e:	0026d683          	lhu	a3,2(a3)
    8000a1a2:	0106969b          	slliw	a3,a3,0x10
    8000a1a6:	8f55                	or	a4,a4,a3
    8000a1a8:	01f076b7          	lui	a3,0x1f07
    8000a1ac:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a1b0:	8f75                	and	a4,a4,a3
    8000a1b2:	00e78463          	beq	a5,a4,8000a1ba <tinst_tests_pf+0x239c>
    8000a1b6:	948fe06f          	j	800082fe <tinst_tests_pf+0x4e0>
    8000a1ba:	958fe06f          	j	80008312 <tinst_tests_pf+0x4f4>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a1be:	701c                	ld	a5,32(s0)
    8000a1c0:	00028597          	auipc	a1,0x28
    8000a1c4:	4e858593          	addi	a1,a1,1256 # 800326a8 <__func__.0+0x2c0>
    8000a1c8:	e399                	bnez	a5,8000a1ce <tinst_tests_pf+0x23b0>
    8000a1ca:	b89fe06f          	j	80008d52 <tinst_tests_pf+0xf34>
    8000a1ce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1d0:	0016f713          	andi	a4,a3,1
    8000a1d4:	cc0713e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a1d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1dc:	460d                	li	a2,3
    8000a1de:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a1e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a1e4:	00c59763          	bne	a1,a2,8000a1f2 <tinst_tests_pf+0x23d4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1e8:	0026d683          	lhu	a3,2(a3)
    8000a1ec:	0106969b          	slliw	a3,a3,0x10
    8000a1f0:	8f55                	or	a4,a4,a3
    8000a1f2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a1f6:	068e                	slli	a3,a3,0x3
    8000a1f8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a1fa:	8f75                	and	a4,a4,a3
    8000a1fc:	00028597          	auipc	a1,0x28
    8000a200:	4ac58593          	addi	a1,a1,1196 # 800326a8 <__func__.0+0x2c0>
    8000a204:	00e79463          	bne	a5,a4,8000a20c <tinst_tests_pf+0x23ee>
    8000a208:	b4bfe06f          	j	80008d52 <tinst_tests_pf+0xf34>
    8000a20c:	00028597          	auipc	a1,0x28
    8000a210:	4ac58593          	addi	a1,a1,1196 # 800326b8 <__func__.0+0x2d0>
    8000a214:	b3ffe06f          	j	80008d52 <tinst_tests_pf+0xf34>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000a218:	701c                	ld	a5,32(s0)
    8000a21a:	e399                	bnez	a5,8000a220 <tinst_tests_pf+0x2402>
    8000a21c:	994fe06f          	j	800083b0 <tinst_tests_pf+0x592>
    8000a220:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a222:	0016f713          	andi	a4,a3,1
    8000a226:	c6071ae3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a22a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a22e:	460d                	li	a2,3
    8000a230:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a234:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a236:	00c59763          	bne	a1,a2,8000a244 <tinst_tests_pf+0x2426>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a23a:	0026d683          	lhu	a3,2(a3)
    8000a23e:	0106969b          	slliw	a3,a3,0x10
    8000a242:	8f55                	or	a4,a4,a3
    8000a244:	01f076b7          	lui	a3,0x1f07
    8000a248:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a24c:	8f75                	and	a4,a4,a3
    8000a24e:	00e78463          	beq	a5,a4,8000a256 <tinst_tests_pf+0x2438>
    8000a252:	94afe06f          	j	8000839c <tinst_tests_pf+0x57e>
    8000a256:	95afe06f          	j	800083b0 <tinst_tests_pf+0x592>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a25a:	701c                	ld	a5,32(s0)
    8000a25c:	00028597          	auipc	a1,0x28
    8000a260:	44c58593          	addi	a1,a1,1100 # 800326a8 <__func__.0+0x2c0>
    8000a264:	e399                	bnez	a5,8000a26a <tinst_tests_pf+0x244c>
    8000a266:	b91fe06f          	j	80008df6 <tinst_tests_pf+0xfd8>
    8000a26a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a26c:	0016f713          	andi	a4,a3,1
    8000a270:	c20715e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a274:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a278:	460d                	li	a2,3
    8000a27a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a27e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a280:	00c59763          	bne	a1,a2,8000a28e <tinst_tests_pf+0x2470>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a284:	0026d683          	lhu	a3,2(a3)
    8000a288:	0106969b          	slliw	a3,a3,0x10
    8000a28c:	8f55                	or	a4,a4,a3
    8000a28e:	1ffe16b7          	lui	a3,0x1ffe1
    8000a292:	068e                	slli	a3,a3,0x3
    8000a294:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a296:	8f75                	and	a4,a4,a3
    8000a298:	00028597          	auipc	a1,0x28
    8000a29c:	41058593          	addi	a1,a1,1040 # 800326a8 <__func__.0+0x2c0>
    8000a2a0:	00e79463          	bne	a5,a4,8000a2a8 <tinst_tests_pf+0x248a>
    8000a2a4:	b53fe06f          	j	80008df6 <tinst_tests_pf+0xfd8>
    8000a2a8:	00028597          	auipc	a1,0x28
    8000a2ac:	41058593          	addi	a1,a1,1040 # 800326b8 <__func__.0+0x2d0>
    8000a2b0:	b47fe06f          	j	80008df6 <tinst_tests_pf+0xfd8>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000a2b4:	701c                	ld	a5,32(s0)
    8000a2b6:	e399                	bnez	a5,8000a2bc <tinst_tests_pf+0x249e>
    8000a2b8:	998fe06f          	j	80008450 <tinst_tests_pf+0x632>
    8000a2bc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a2be:	0016f713          	andi	a4,a3,1
    8000a2c2:	bc071ce3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a2c6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a2ca:	460d                	li	a2,3
    8000a2cc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a2d0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a2d2:	00c59763          	bne	a1,a2,8000a2e0 <tinst_tests_pf+0x24c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a2d6:	0026d683          	lhu	a3,2(a3)
    8000a2da:	0106969b          	slliw	a3,a3,0x10
    8000a2de:	8f55                	or	a4,a4,a3
    8000a2e0:	01f076b7          	lui	a3,0x1f07
    8000a2e4:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a2e8:	8f75                	and	a4,a4,a3
    8000a2ea:	00e78463          	beq	a5,a4,8000a2f2 <tinst_tests_pf+0x24d4>
    8000a2ee:	94efe06f          	j	8000843c <tinst_tests_pf+0x61e>
    8000a2f2:	95efe06f          	j	80008450 <tinst_tests_pf+0x632>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a2f6:	701c                	ld	a5,32(s0)
    8000a2f8:	00028597          	auipc	a1,0x28
    8000a2fc:	3b058593          	addi	a1,a1,944 # 800326a8 <__func__.0+0x2c0>
    8000a300:	e399                	bnez	a5,8000a306 <tinst_tests_pf+0x24e8>
    8000a302:	b95fe06f          	j	80008e96 <tinst_tests_pf+0x1078>
    8000a306:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a308:	0016f713          	andi	a4,a3,1
    8000a30c:	b80717e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a310:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a314:	460d                	li	a2,3
    8000a316:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a31a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a31c:	00c59763          	bne	a1,a2,8000a32a <tinst_tests_pf+0x250c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a320:	0026d683          	lhu	a3,2(a3)
    8000a324:	0106969b          	slliw	a3,a3,0x10
    8000a328:	8f55                	or	a4,a4,a3
    8000a32a:	1ffe16b7          	lui	a3,0x1ffe1
    8000a32e:	068e                	slli	a3,a3,0x3
    8000a330:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a332:	8f75                	and	a4,a4,a3
    8000a334:	00028597          	auipc	a1,0x28
    8000a338:	37458593          	addi	a1,a1,884 # 800326a8 <__func__.0+0x2c0>
    8000a33c:	00e79463          	bne	a5,a4,8000a344 <tinst_tests_pf+0x2526>
    8000a340:	b57fe06f          	j	80008e96 <tinst_tests_pf+0x1078>
    8000a344:	00028597          	auipc	a1,0x28
    8000a348:	37458593          	addi	a1,a1,884 # 800326b8 <__func__.0+0x2d0>
    8000a34c:	b4bfe06f          	j	80008e96 <tinst_tests_pf+0x1078>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000a350:	701c                	ld	a5,32(s0)
    8000a352:	e399                	bnez	a5,8000a358 <tinst_tests_pf+0x253a>
    8000a354:	99efe06f          	j	800084f2 <tinst_tests_pf+0x6d4>
    8000a358:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a35a:	0016f713          	andi	a4,a3,1
    8000a35e:	b2071ee3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a362:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a366:	460d                	li	a2,3
    8000a368:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a36c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a36e:	00c59763          	bne	a1,a2,8000a37c <tinst_tests_pf+0x255e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a372:	0026d683          	lhu	a3,2(a3)
    8000a376:	0106969b          	slliw	a3,a3,0x10
    8000a37a:	8f55                	or	a4,a4,a3
    8000a37c:	01f076b7          	lui	a3,0x1f07
    8000a380:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a384:	8f75                	and	a4,a4,a3
    8000a386:	00e78463          	beq	a5,a4,8000a38e <tinst_tests_pf+0x2570>
    8000a38a:	954fe06f          	j	800084de <tinst_tests_pf+0x6c0>
    8000a38e:	964fe06f          	j	800084f2 <tinst_tests_pf+0x6d4>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a392:	701c                	ld	a5,32(s0)
    8000a394:	00028597          	auipc	a1,0x28
    8000a398:	31458593          	addi	a1,a1,788 # 800326a8 <__func__.0+0x2c0>
    8000a39c:	e399                	bnez	a5,8000a3a2 <tinst_tests_pf+0x2584>
    8000a39e:	b99fe06f          	j	80008f36 <tinst_tests_pf+0x1118>
    8000a3a2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a3a4:	0016f713          	andi	a4,a3,1
    8000a3a8:	ae0719e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a3ac:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a3b0:	460d                	li	a2,3
    8000a3b2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a3b6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a3b8:	00c59763          	bne	a1,a2,8000a3c6 <tinst_tests_pf+0x25a8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a3bc:	0026d683          	lhu	a3,2(a3)
    8000a3c0:	0106969b          	slliw	a3,a3,0x10
    8000a3c4:	8f55                	or	a4,a4,a3
    8000a3c6:	1ffe16b7          	lui	a3,0x1ffe1
    8000a3ca:	068e                	slli	a3,a3,0x3
    8000a3cc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a3ce:	8f75                	and	a4,a4,a3
    8000a3d0:	00028597          	auipc	a1,0x28
    8000a3d4:	2d858593          	addi	a1,a1,728 # 800326a8 <__func__.0+0x2c0>
    8000a3d8:	00e79463          	bne	a5,a4,8000a3e0 <tinst_tests_pf+0x25c2>
    8000a3dc:	b5bfe06f          	j	80008f36 <tinst_tests_pf+0x1118>
    8000a3e0:	00028597          	auipc	a1,0x28
    8000a3e4:	2d858593          	addi	a1,a1,728 # 800326b8 <__func__.0+0x2d0>
    8000a3e8:	b4ffe06f          	j	80008f36 <tinst_tests_pf+0x1118>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a3ec:	7004                	ld	s1,32(s0)
    8000a3ee:	e099                	bnez	s1,8000a3f4 <tinst_tests_pf+0x25d6>
    8000a3f0:	994fe06f          	j	80008584 <tinst_tests_pf+0x766>
    8000a3f4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a3f6:	0017f713          	andi	a4,a5,1
    8000a3fa:	aa0710e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a3fe:	0007d503          	lhu	a0,0(a5)
    8000a402:	a90f70ef          	jal	80001692 <expand_compressed_instruction>
    8000a406:	67a1                	lui	a5,0x8
    8000a408:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a40a:	8d7d                	and	a0,a0,a5
    8000a40c:	00a48463          	beq	s1,a0,8000a414 <tinst_tests_pf+0x25f6>
    8000a410:	960fe06f          	j	80008570 <tinst_tests_pf+0x752>
    8000a414:	970fe06f          	j	80008584 <tinst_tests_pf+0x766>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000a418:	701c                	ld	a5,32(s0)
    8000a41a:	00028597          	auipc	a1,0x28
    8000a41e:	28e58593          	addi	a1,a1,654 # 800326a8 <__func__.0+0x2c0>
    8000a422:	e399                	bnez	a5,8000a428 <tinst_tests_pf+0x260a>
    8000a424:	bb3fe06f          	j	80008fd6 <tinst_tests_pf+0x11b8>
    8000a428:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a42a:	0016f713          	andi	a4,a3,1
    8000a42e:	a60716e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a432:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a436:	460d                	li	a2,3
    8000a438:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a43c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a43e:	00c59763          	bne	a1,a2,8000a44c <tinst_tests_pf+0x262e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a442:	0026d683          	lhu	a3,2(a3)
    8000a446:	0106969b          	slliw	a3,a3,0x10
    8000a44a:	8f55                	or	a4,a4,a3
    8000a44c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a450:	068e                	slli	a3,a3,0x3
    8000a452:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a454:	8f75                	and	a4,a4,a3
    8000a456:	00028597          	auipc	a1,0x28
    8000a45a:	25258593          	addi	a1,a1,594 # 800326a8 <__func__.0+0x2c0>
    8000a45e:	00e79463          	bne	a5,a4,8000a466 <tinst_tests_pf+0x2648>
    8000a462:	b75fe06f          	j	80008fd6 <tinst_tests_pf+0x11b8>
    8000a466:	00028597          	auipc	a1,0x28
    8000a46a:	25258593          	addi	a1,a1,594 # 800326b8 <__func__.0+0x2d0>
    8000a46e:	b69fe06f          	j	80008fd6 <tinst_tests_pf+0x11b8>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a472:	02043983          	ld	s3,32(s0)
    8000a476:	00099463          	bnez	s3,8000a47e <tinst_tests_pf+0x2660>
    8000a47a:	99efe06f          	j	80008618 <tinst_tests_pf+0x7fa>
    8000a47e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a480:	0017f713          	andi	a4,a5,1
    8000a484:	a0071be3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a488:	0007d503          	lhu	a0,0(a5)
    8000a48c:	a06f70ef          	jal	80001692 <expand_compressed_instruction>
    8000a490:	67a1                	lui	a5,0x8
    8000a492:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a494:	8d7d                	and	a0,a0,a5
    8000a496:	00a98463          	beq	s3,a0,8000a49e <tinst_tests_pf+0x2680>
    8000a49a:	96afe06f          	j	80008604 <tinst_tests_pf+0x7e6>
    8000a49e:	97afe06f          	j	80008618 <tinst_tests_pf+0x7fa>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000a4a2:	701c                	ld	a5,32(s0)
    8000a4a4:	00028597          	auipc	a1,0x28
    8000a4a8:	20458593          	addi	a1,a1,516 # 800326a8 <__func__.0+0x2c0>
    8000a4ac:	e399                	bnez	a5,8000a4b2 <tinst_tests_pf+0x2694>
    8000a4ae:	bc9fe06f          	j	80009076 <tinst_tests_pf+0x1258>
    8000a4b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4b4:	0016f713          	andi	a4,a3,1
    8000a4b8:	9e0711e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a4bc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a4c0:	460d                	li	a2,3
    8000a4c2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a4c6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a4c8:	00c59763          	bne	a1,a2,8000a4d6 <tinst_tests_pf+0x26b8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a4cc:	0026d683          	lhu	a3,2(a3)
    8000a4d0:	0106969b          	slliw	a3,a3,0x10
    8000a4d4:	8f55                	or	a4,a4,a3
    8000a4d6:	1ffe16b7          	lui	a3,0x1ffe1
    8000a4da:	068e                	slli	a3,a3,0x3
    8000a4dc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a4de:	8f75                	and	a4,a4,a3
    8000a4e0:	00028597          	auipc	a1,0x28
    8000a4e4:	1c858593          	addi	a1,a1,456 # 800326a8 <__func__.0+0x2c0>
    8000a4e8:	00e79463          	bne	a5,a4,8000a4f0 <tinst_tests_pf+0x26d2>
    8000a4ec:	b8bfe06f          	j	80009076 <tinst_tests_pf+0x1258>
    8000a4f0:	00028597          	auipc	a1,0x28
    8000a4f4:	1c858593          	addi	a1,a1,456 # 800326b8 <__func__.0+0x2d0>
    8000a4f8:	b7ffe06f          	j	80009076 <tinst_tests_pf+0x1258>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a4fc:	02043983          	ld	s3,32(s0)
    8000a500:	00099463          	bnez	s3,8000a508 <tinst_tests_pf+0x26ea>
    8000a504:	9a8fe06f          	j	800086ac <tinst_tests_pf+0x88e>
    8000a508:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a50a:	0017f713          	andi	a4,a5,1
    8000a50e:	980716e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a512:	0007d503          	lhu	a0,0(a5)
    8000a516:	97cf70ef          	jal	80001692 <expand_compressed_instruction>
    8000a51a:	01f077b7          	lui	a5,0x1f07
    8000a51e:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a522:	8d7d                	and	a0,a0,a5
    8000a524:	00a98463          	beq	s3,a0,8000a52c <tinst_tests_pf+0x270e>
    8000a528:	970fe06f          	j	80008698 <tinst_tests_pf+0x87a>
    8000a52c:	980fe06f          	j	800086ac <tinst_tests_pf+0x88e>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000a530:	701c                	ld	a5,32(s0)
    8000a532:	00028597          	auipc	a1,0x28
    8000a536:	17658593          	addi	a1,a1,374 # 800326a8 <__func__.0+0x2c0>
    8000a53a:	e399                	bnez	a5,8000a540 <tinst_tests_pf+0x2722>
    8000a53c:	bdbfe06f          	j	80009116 <tinst_tests_pf+0x12f8>
    8000a540:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a542:	0016f713          	andi	a4,a3,1
    8000a546:	94071ae3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a54a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a54e:	460d                	li	a2,3
    8000a550:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a554:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a556:	00c59763          	bne	a1,a2,8000a564 <tinst_tests_pf+0x2746>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a55a:	0026d683          	lhu	a3,2(a3)
    8000a55e:	0106969b          	slliw	a3,a3,0x10
    8000a562:	8f55                	or	a4,a4,a3
    8000a564:	1ffe16b7          	lui	a3,0x1ffe1
    8000a568:	068e                	slli	a3,a3,0x3
    8000a56a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a56c:	8f75                	and	a4,a4,a3
    8000a56e:	00028597          	auipc	a1,0x28
    8000a572:	13a58593          	addi	a1,a1,314 # 800326a8 <__func__.0+0x2c0>
    8000a576:	00e79463          	bne	a5,a4,8000a57e <tinst_tests_pf+0x2760>
    8000a57a:	b9dfe06f          	j	80009116 <tinst_tests_pf+0x12f8>
    8000a57e:	00028597          	auipc	a1,0x28
    8000a582:	13a58593          	addi	a1,a1,314 # 800326b8 <__func__.0+0x2d0>
    8000a586:	b91fe06f          	j	80009116 <tinst_tests_pf+0x12f8>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a58a:	7004                	ld	s1,32(s0)
    8000a58c:	e099                	bnez	s1,8000a592 <tinst_tests_pf+0x2774>
    8000a58e:	9bafe06f          	j	80008748 <tinst_tests_pf+0x92a>
    8000a592:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a594:	0017f713          	andi	a4,a5,1
    8000a598:	900711e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a59c:	0007d503          	lhu	a0,0(a5)
    8000a5a0:	8f2f70ef          	jal	80001692 <expand_compressed_instruction>
    8000a5a4:	01f077b7          	lui	a5,0x1f07
    8000a5a8:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a5ac:	8d7d                	and	a0,a0,a5
    8000a5ae:	00a48463          	beq	s1,a0,8000a5b6 <tinst_tests_pf+0x2798>
    8000a5b2:	982fe06f          	j	80008734 <tinst_tests_pf+0x916>
    8000a5b6:	992fe06f          	j	80008748 <tinst_tests_pf+0x92a>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000a5ba:	701c                	ld	a5,32(s0)
    8000a5bc:	00028597          	auipc	a1,0x28
    8000a5c0:	0ec58593          	addi	a1,a1,236 # 800326a8 <__func__.0+0x2c0>
    8000a5c4:	e399                	bnez	a5,8000a5ca <tinst_tests_pf+0x27ac>
    8000a5c6:	be9fe06f          	j	800091ae <tinst_tests_pf+0x1390>
    8000a5ca:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a5cc:	0016f713          	andi	a4,a3,1
    8000a5d0:	8c0715e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a5d4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a5d8:	460d                	li	a2,3
    8000a5da:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a5de:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a5e0:	00c59763          	bne	a1,a2,8000a5ee <tinst_tests_pf+0x27d0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a5e4:	0026d683          	lhu	a3,2(a3)
    8000a5e8:	0106969b          	slliw	a3,a3,0x10
    8000a5ec:	8f55                	or	a4,a4,a3
    8000a5ee:	1ffe16b7          	lui	a3,0x1ffe1
    8000a5f2:	068e                	slli	a3,a3,0x3
    8000a5f4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a5f6:	8f75                	and	a4,a4,a3
    8000a5f8:	00028597          	auipc	a1,0x28
    8000a5fc:	0b058593          	addi	a1,a1,176 # 800326a8 <__func__.0+0x2c0>
    8000a600:	00e79463          	bne	a5,a4,8000a608 <tinst_tests_pf+0x27ea>
    8000a604:	babfe06f          	j	800091ae <tinst_tests_pf+0x1390>
    8000a608:	00028597          	auipc	a1,0x28
    8000a60c:	0b058593          	addi	a1,a1,176 # 800326b8 <__func__.0+0x2d0>
    8000a610:	b9ffe06f          	j	800091ae <tinst_tests_pf+0x1390>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000a614:	701c                	ld	a5,32(s0)
    8000a616:	00028597          	auipc	a1,0x28
    8000a61a:	09258593          	addi	a1,a1,146 # 800326a8 <__func__.0+0x2c0>
    8000a61e:	e399                	bnez	a5,8000a624 <tinst_tests_pf+0x2806>
    8000a620:	c27fe06f          	j	80009246 <tinst_tests_pf+0x1428>
    8000a624:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a626:	0016f713          	andi	a4,a3,1
    8000a62a:	860718e3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a62e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a632:	460d                	li	a2,3
    8000a634:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a638:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a63a:	00c59763          	bne	a1,a2,8000a648 <tinst_tests_pf+0x282a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a63e:	0026d683          	lhu	a3,2(a3)
    8000a642:	0106969b          	slliw	a3,a3,0x10
    8000a646:	8f55                	or	a4,a4,a3
    8000a648:	1ffe16b7          	lui	a3,0x1ffe1
    8000a64c:	068e                	slli	a3,a3,0x3
    8000a64e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a650:	8f75                	and	a4,a4,a3
    8000a652:	00028597          	auipc	a1,0x28
    8000a656:	05658593          	addi	a1,a1,86 # 800326a8 <__func__.0+0x2c0>
    8000a65a:	00e79463          	bne	a5,a4,8000a662 <tinst_tests_pf+0x2844>
    8000a65e:	be9fe06f          	j	80009246 <tinst_tests_pf+0x1428>
    8000a662:	00028597          	auipc	a1,0x28
    8000a666:	05658593          	addi	a1,a1,86 # 800326b8 <__func__.0+0x2d0>
    8000a66a:	bddfe06f          	j	80009246 <tinst_tests_pf+0x1428>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000a66e:	701c                	ld	a5,32(s0)
    8000a670:	00028597          	auipc	a1,0x28
    8000a674:	03858593          	addi	a1,a1,56 # 800326a8 <__func__.0+0x2c0>
    8000a678:	e399                	bnez	a5,8000a67e <tinst_tests_pf+0x2860>
    8000a67a:	c65fe06f          	j	800092de <tinst_tests_pf+0x14c0>
    8000a67e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a680:	0016f713          	andi	a4,a3,1
    8000a684:	80071be3          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a688:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a68c:	460d                	li	a2,3
    8000a68e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a692:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a694:	00c59763          	bne	a1,a2,8000a6a2 <tinst_tests_pf+0x2884>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a698:	0026d683          	lhu	a3,2(a3)
    8000a69c:	0106969b          	slliw	a3,a3,0x10
    8000a6a0:	8f55                	or	a4,a4,a3
    8000a6a2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a6a6:	068e                	slli	a3,a3,0x3
    8000a6a8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a6aa:	8f75                	and	a4,a4,a3
    8000a6ac:	00028597          	auipc	a1,0x28
    8000a6b0:	ffc58593          	addi	a1,a1,-4 # 800326a8 <__func__.0+0x2c0>
    8000a6b4:	00e79463          	bne	a5,a4,8000a6bc <tinst_tests_pf+0x289e>
    8000a6b8:	c27fe06f          	j	800092de <tinst_tests_pf+0x14c0>
    8000a6bc:	00028597          	auipc	a1,0x28
    8000a6c0:	ffc58593          	addi	a1,a1,-4 # 800326b8 <__func__.0+0x2d0>
    8000a6c4:	c1bfe06f          	j	800092de <tinst_tests_pf+0x14c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000a6c8:	701c                	ld	a5,32(s0)
    8000a6ca:	00028597          	auipc	a1,0x28
    8000a6ce:	fde58593          	addi	a1,a1,-34 # 800326a8 <__func__.0+0x2c0>
    8000a6d2:	e399                	bnez	a5,8000a6d8 <tinst_tests_pf+0x28ba>
    8000a6d4:	ca3fe06f          	j	80009376 <tinst_tests_pf+0x1558>
    8000a6d8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a6da:	0016f713          	andi	a4,a3,1
    8000a6de:	fa071e63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a6e2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a6e6:	460d                	li	a2,3
    8000a6e8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a6ec:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a6ee:	00c59763          	bne	a1,a2,8000a6fc <tinst_tests_pf+0x28de>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a6f2:	0026d683          	lhu	a3,2(a3)
    8000a6f6:	0106969b          	slliw	a3,a3,0x10
    8000a6fa:	8f55                	or	a4,a4,a3
    8000a6fc:	1ffe16b7          	lui	a3,0x1ffe1
    8000a700:	068e                	slli	a3,a3,0x3
    8000a702:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a704:	8f75                	and	a4,a4,a3
    8000a706:	00028597          	auipc	a1,0x28
    8000a70a:	fa258593          	addi	a1,a1,-94 # 800326a8 <__func__.0+0x2c0>
    8000a70e:	00e79463          	bne	a5,a4,8000a716 <tinst_tests_pf+0x28f8>
    8000a712:	c65fe06f          	j	80009376 <tinst_tests_pf+0x1558>
    8000a716:	00028597          	auipc	a1,0x28
    8000a71a:	fa258593          	addi	a1,a1,-94 # 800326b8 <__func__.0+0x2d0>
    8000a71e:	c59fe06f          	j	80009376 <tinst_tests_pf+0x1558>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000a722:	701c                	ld	a5,32(s0)
    8000a724:	e399                	bnez	a5,8000a72a <tinst_tests_pf+0x290c>
    8000a726:	aa2fe06f          	j	800089c8 <tinst_tests_pf+0xbaa>
    8000a72a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a72c:	0016f713          	andi	a4,a3,1
    8000a730:	f6071563          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a734:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a738:	460d                	li	a2,3
    8000a73a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a73e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a740:	00c59763          	bne	a1,a2,8000a74e <tinst_tests_pf+0x2930>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a744:	0026d683          	lhu	a3,2(a3)
    8000a748:	0106969b          	slliw	a3,a3,0x10
    8000a74c:	8f55                	or	a4,a4,a3
    8000a74e:	1ffe16b7          	lui	a3,0x1ffe1
    8000a752:	068e                	slli	a3,a3,0x3
    8000a754:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a756:	8f75                	and	a4,a4,a3
    8000a758:	00e78463          	beq	a5,a4,8000a760 <tinst_tests_pf+0x2942>
    8000a75c:	a58fe06f          	j	800089b4 <tinst_tests_pf+0xb96>
    8000a760:	a68fe06f          	j	800089c8 <tinst_tests_pf+0xbaa>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000a764:	701c                	ld	a5,32(s0)
    8000a766:	e399                	bnez	a5,8000a76c <tinst_tests_pf+0x294e>
    8000a768:	b00fe06f          	j	80008a68 <tinst_tests_pf+0xc4a>
    8000a76c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a76e:	0016f713          	andi	a4,a3,1
    8000a772:	f2071463          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a776:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a77a:	460d                	li	a2,3
    8000a77c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a780:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a782:	00c59763          	bne	a1,a2,8000a790 <tinst_tests_pf+0x2972>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a786:	0026d683          	lhu	a3,2(a3)
    8000a78a:	0106969b          	slliw	a3,a3,0x10
    8000a78e:	8f55                	or	a4,a4,a3
    8000a790:	1ffe16b7          	lui	a3,0x1ffe1
    8000a794:	068e                	slli	a3,a3,0x3
    8000a796:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a798:	8f75                	and	a4,a4,a3
    8000a79a:	00e78463          	beq	a5,a4,8000a7a2 <tinst_tests_pf+0x2984>
    8000a79e:	ab6fe06f          	j	80008a54 <tinst_tests_pf+0xc36>
    8000a7a2:	ac6fe06f          	j	80008a68 <tinst_tests_pf+0xc4a>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a7a6:	701c                	ld	a5,32(s0)
    8000a7a8:	e399                	bnez	a5,8000a7ae <tinst_tests_pf+0x2990>
    8000a7aa:	b5efe06f          	j	80008b08 <tinst_tests_pf+0xcea>
    8000a7ae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a7b0:	0016f713          	andi	a4,a3,1
    8000a7b4:	ee071363          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a7b8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7bc:	460d                	li	a2,3
    8000a7be:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a7c2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a7c4:	00c59763          	bne	a1,a2,8000a7d2 <tinst_tests_pf+0x29b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7c8:	0026d683          	lhu	a3,2(a3)
    8000a7cc:	0106969b          	slliw	a3,a3,0x10
    8000a7d0:	8f55                	or	a4,a4,a3
    8000a7d2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a7d6:	068e                	slli	a3,a3,0x3
    8000a7d8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a7da:	8f75                	and	a4,a4,a3
    8000a7dc:	00e78463          	beq	a5,a4,8000a7e4 <tinst_tests_pf+0x29c6>
    8000a7e0:	b14fe06f          	j	80008af4 <tinst_tests_pf+0xcd6>
    8000a7e4:	b24fe06f          	j	80008b08 <tinst_tests_pf+0xcea>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a7e8:	701c                	ld	a5,32(s0)
    8000a7ea:	e399                	bnez	a5,8000a7f0 <tinst_tests_pf+0x29d2>
    8000a7ec:	bbcfe06f          	j	80008ba8 <tinst_tests_pf+0xd8a>
    8000a7f0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a7f2:	0016f713          	andi	a4,a3,1
    8000a7f6:	ea071263          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a7fa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7fe:	460d                	li	a2,3
    8000a800:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a804:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a806:	00c59763          	bne	a1,a2,8000a814 <tinst_tests_pf+0x29f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a80a:	0026d683          	lhu	a3,2(a3)
    8000a80e:	0106969b          	slliw	a3,a3,0x10
    8000a812:	8f55                	or	a4,a4,a3
    8000a814:	1ffe16b7          	lui	a3,0x1ffe1
    8000a818:	068e                	slli	a3,a3,0x3
    8000a81a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a81c:	8f75                	and	a4,a4,a3
    8000a81e:	00e78463          	beq	a5,a4,8000a826 <tinst_tests_pf+0x2a08>
    8000a822:	b72fe06f          	j	80008b94 <tinst_tests_pf+0xd76>
    8000a826:	b82fe06f          	j	80008ba8 <tinst_tests_pf+0xd8a>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a82a:	701c                	ld	a5,32(s0)
    8000a82c:	e399                	bnez	a5,8000a832 <tinst_tests_pf+0x2a14>
    8000a82e:	c1afe06f          	j	80008c48 <tinst_tests_pf+0xe2a>
    8000a832:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a834:	0016f713          	andi	a4,a3,1
    8000a838:	e6071163          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a83c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a840:	460d                	li	a2,3
    8000a842:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a846:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a848:	00c59763          	bne	a1,a2,8000a856 <tinst_tests_pf+0x2a38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a84c:	0026d683          	lhu	a3,2(a3)
    8000a850:	0106969b          	slliw	a3,a3,0x10
    8000a854:	8f55                	or	a4,a4,a3
    8000a856:	1ffe16b7          	lui	a3,0x1ffe1
    8000a85a:	068e                	slli	a3,a3,0x3
    8000a85c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a85e:	8f75                	and	a4,a4,a3
    8000a860:	00e78463          	beq	a5,a4,8000a868 <tinst_tests_pf+0x2a4a>
    8000a864:	bd0fe06f          	j	80008c34 <tinst_tests_pf+0xe16>
    8000a868:	be0fe06f          	j	80008c48 <tinst_tests_pf+0xe2a>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a86c:	701c                	ld	a5,32(s0)
    8000a86e:	e399                	bnez	a5,8000a874 <tinst_tests_pf+0x2a56>
    8000a870:	c78fe06f          	j	80008ce8 <tinst_tests_pf+0xeca>
    8000a874:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a876:	0016f713          	andi	a4,a3,1
    8000a87a:	e2071063          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a87e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a882:	460d                	li	a2,3
    8000a884:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a888:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a88a:	00c59763          	bne	a1,a2,8000a898 <tinst_tests_pf+0x2a7a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a88e:	0026d683          	lhu	a3,2(a3)
    8000a892:	0106969b          	slliw	a3,a3,0x10
    8000a896:	8f55                	or	a4,a4,a3
    8000a898:	1ffe16b7          	lui	a3,0x1ffe1
    8000a89c:	068e                	slli	a3,a3,0x3
    8000a89e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a8a0:	8f75                	and	a4,a4,a3
    8000a8a2:	00e78463          	beq	a5,a4,8000a8aa <tinst_tests_pf+0x2a8c>
    8000a8a6:	c2efe06f          	j	80008cd4 <tinst_tests_pf+0xeb6>
    8000a8aa:	c3efe06f          	j	80008ce8 <tinst_tests_pf+0xeca>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a8ae:	701c                	ld	a5,32(s0)
    8000a8b0:	e399                	bnez	a5,8000a8b6 <tinst_tests_pf+0x2a98>
    8000a8b2:	cd6fe06f          	j	80008d88 <tinst_tests_pf+0xf6a>
    8000a8b6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8b8:	0016f713          	andi	a4,a3,1
    8000a8bc:	dc071f63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a8c0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a8c4:	460d                	li	a2,3
    8000a8c6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a8ca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a8cc:	00c59763          	bne	a1,a2,8000a8da <tinst_tests_pf+0x2abc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a8d0:	0026d683          	lhu	a3,2(a3)
    8000a8d4:	0106969b          	slliw	a3,a3,0x10
    8000a8d8:	8f55                	or	a4,a4,a3
    8000a8da:	1ffe16b7          	lui	a3,0x1ffe1
    8000a8de:	068e                	slli	a3,a3,0x3
    8000a8e0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a8e2:	8f75                	and	a4,a4,a3
    8000a8e4:	00e78463          	beq	a5,a4,8000a8ec <tinst_tests_pf+0x2ace>
    8000a8e8:	c8cfe06f          	j	80008d74 <tinst_tests_pf+0xf56>
    8000a8ec:	c9cfe06f          	j	80008d88 <tinst_tests_pf+0xf6a>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a8f0:	701c                	ld	a5,32(s0)
    8000a8f2:	e399                	bnez	a5,8000a8f8 <tinst_tests_pf+0x2ada>
    8000a8f4:	d38fe06f          	j	80008e2c <tinst_tests_pf+0x100e>
    8000a8f8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8fa:	0016f713          	andi	a4,a3,1
    8000a8fe:	d8071e63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a902:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a906:	460d                	li	a2,3
    8000a908:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a90c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a90e:	00c59763          	bne	a1,a2,8000a91c <tinst_tests_pf+0x2afe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a912:	0026d683          	lhu	a3,2(a3)
    8000a916:	0106969b          	slliw	a3,a3,0x10
    8000a91a:	8f55                	or	a4,a4,a3
    8000a91c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a920:	068e                	slli	a3,a3,0x3
    8000a922:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a924:	8f75                	and	a4,a4,a3
    8000a926:	00e78463          	beq	a5,a4,8000a92e <tinst_tests_pf+0x2b10>
    8000a92a:	ceefe06f          	j	80008e18 <tinst_tests_pf+0xffa>
    8000a92e:	cfefe06f          	j	80008e2c <tinst_tests_pf+0x100e>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a932:	701c                	ld	a5,32(s0)
    8000a934:	e399                	bnez	a5,8000a93a <tinst_tests_pf+0x2b1c>
    8000a936:	d96fe06f          	j	80008ecc <tinst_tests_pf+0x10ae>
    8000a93a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a93c:	0016f713          	andi	a4,a3,1
    8000a940:	d4071d63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a944:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a948:	460d                	li	a2,3
    8000a94a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a94e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a950:	00c59763          	bne	a1,a2,8000a95e <tinst_tests_pf+0x2b40>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a954:	0026d683          	lhu	a3,2(a3)
    8000a958:	0106969b          	slliw	a3,a3,0x10
    8000a95c:	8f55                	or	a4,a4,a3
    8000a95e:	1ffe16b7          	lui	a3,0x1ffe1
    8000a962:	068e                	slli	a3,a3,0x3
    8000a964:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a966:	8f75                	and	a4,a4,a3
    8000a968:	00e78463          	beq	a5,a4,8000a970 <tinst_tests_pf+0x2b52>
    8000a96c:	d4cfe06f          	j	80008eb8 <tinst_tests_pf+0x109a>
    8000a970:	d5cfe06f          	j	80008ecc <tinst_tests_pf+0x10ae>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a974:	701c                	ld	a5,32(s0)
    8000a976:	e399                	bnez	a5,8000a97c <tinst_tests_pf+0x2b5e>
    8000a978:	df4fe06f          	j	80008f6c <tinst_tests_pf+0x114e>
    8000a97c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a97e:	0016f713          	andi	a4,a3,1
    8000a982:	d0071c63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a986:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a98a:	460d                	li	a2,3
    8000a98c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a990:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a992:	00c59763          	bne	a1,a2,8000a9a0 <tinst_tests_pf+0x2b82>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a996:	0026d683          	lhu	a3,2(a3)
    8000a99a:	0106969b          	slliw	a3,a3,0x10
    8000a99e:	8f55                	or	a4,a4,a3
    8000a9a0:	1ffe16b7          	lui	a3,0x1ffe1
    8000a9a4:	068e                	slli	a3,a3,0x3
    8000a9a6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a9a8:	8f75                	and	a4,a4,a3
    8000a9aa:	00e78463          	beq	a5,a4,8000a9b2 <tinst_tests_pf+0x2b94>
    8000a9ae:	daafe06f          	j	80008f58 <tinst_tests_pf+0x113a>
    8000a9b2:	dbafe06f          	j	80008f6c <tinst_tests_pf+0x114e>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000a9b6:	701c                	ld	a5,32(s0)
    8000a9b8:	e399                	bnez	a5,8000a9be <tinst_tests_pf+0x2ba0>
    8000a9ba:	e52fe06f          	j	8000900c <tinst_tests_pf+0x11ee>
    8000a9be:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a9c0:	0016f713          	andi	a4,a3,1
    8000a9c4:	cc071b63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a9c8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9cc:	460d                	li	a2,3
    8000a9ce:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a9d2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a9d4:	00c59763          	bne	a1,a2,8000a9e2 <tinst_tests_pf+0x2bc4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a9d8:	0026d683          	lhu	a3,2(a3)
    8000a9dc:	0106969b          	slliw	a3,a3,0x10
    8000a9e0:	8f55                	or	a4,a4,a3
    8000a9e2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a9e6:	068e                	slli	a3,a3,0x3
    8000a9e8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a9ea:	8f75                	and	a4,a4,a3
    8000a9ec:	00e78463          	beq	a5,a4,8000a9f4 <tinst_tests_pf+0x2bd6>
    8000a9f0:	e08fe06f          	j	80008ff8 <tinst_tests_pf+0x11da>
    8000a9f4:	e18fe06f          	j	8000900c <tinst_tests_pf+0x11ee>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000a9f8:	6418                	ld	a4,8(s0)
    8000a9fa:	47bd                	li	a5,15
    8000a9fc:	00f70463          	beq	a4,a5,8000aa04 <tinst_tests_pf+0x2be6>
    8000aa00:	f64fe06f          	j	80009164 <tinst_tests_pf+0x1346>
    8000aa04:	701c                	ld	a5,32(s0)
    8000aa06:	e399                	bnez	a5,8000aa0c <tinst_tests_pf+0x2bee>
    8000aa08:	f5efe06f          	j	80009166 <tinst_tests_pf+0x1348>
    8000aa0c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa0e:	0016f713          	andi	a4,a3,1
    8000aa12:	c8071463          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aa16:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa1a:	460d                	li	a2,3
    8000aa1c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa20:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa22:	00c59763          	bne	a1,a2,8000aa30 <tinst_tests_pf+0x2c12>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa26:	0026d683          	lhu	a3,2(a3)
    8000aa2a:	0106969b          	slliw	a3,a3,0x10
    8000aa2e:	8f55                	or	a4,a4,a3
    8000aa30:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa34:	068e                	slli	a3,a3,0x3
    8000aa36:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa38:	8f75                	and	a4,a4,a3
    8000aa3a:	40f70933          	sub	s2,a4,a5
    8000aa3e:	00193913          	seqz	s2,s2
    8000aa42:	f24fe06f          	j	80009166 <tinst_tests_pf+0x1348>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000aa46:	6418                	ld	a4,8(s0)
    8000aa48:	47bd                	li	a5,15
    8000aa4a:	00f70463          	beq	a4,a5,8000aa52 <tinst_tests_pf+0x2c34>
    8000aa4e:	faefe06f          	j	800091fc <tinst_tests_pf+0x13de>
    8000aa52:	701c                	ld	a5,32(s0)
    8000aa54:	e399                	bnez	a5,8000aa5a <tinst_tests_pf+0x2c3c>
    8000aa56:	fa8fe06f          	j	800091fe <tinst_tests_pf+0x13e0>
    8000aa5a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa5c:	0016f713          	andi	a4,a3,1
    8000aa60:	c2071d63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aa64:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa68:	460d                	li	a2,3
    8000aa6a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa6e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa70:	00c59763          	bne	a1,a2,8000aa7e <tinst_tests_pf+0x2c60>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa74:	0026d683          	lhu	a3,2(a3)
    8000aa78:	0106969b          	slliw	a3,a3,0x10
    8000aa7c:	8f55                	or	a4,a4,a3
    8000aa7e:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa82:	068e                	slli	a3,a3,0x3
    8000aa84:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa86:	8f75                	and	a4,a4,a3
    8000aa88:	40f70933          	sub	s2,a4,a5
    8000aa8c:	00193913          	seqz	s2,s2
    8000aa90:	f6efe06f          	j	800091fe <tinst_tests_pf+0x13e0>
    instruction = *((uint16_t*)addr);
    8000aa94:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa98:	460d                	li	a2,3
    8000aa9a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa9e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aaa0:	00c59763          	bne	a1,a2,8000aaae <tinst_tests_pf+0x2c90>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aaa4:	0026d683          	lhu	a3,2(a3)
    8000aaa8:	0106969b          	slliw	a3,a3,0x10
    8000aaac:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000aaae:	1746                	slli	a4,a4,0x31
    8000aab0:	9345                	srli	a4,a4,0x31
    8000aab2:	00e78463          	beq	a5,a4,8000aaba <tinst_tests_pf+0x2c9c>
    8000aab6:	d3efd06f          	j	80007ff4 <tinst_tests_pf+0x1d6>
    8000aaba:	d4efd06f          	j	80008008 <tinst_tests_pf+0x1ea>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000aabe:	6418                	ld	a4,8(s0)
    8000aac0:	47bd                	li	a5,15
    8000aac2:	00f70463          	beq	a4,a5,8000aaca <tinst_tests_pf+0x2cac>
    8000aac6:	fcefe06f          	j	80009294 <tinst_tests_pf+0x1476>
    8000aaca:	701c                	ld	a5,32(s0)
    8000aacc:	e399                	bnez	a5,8000aad2 <tinst_tests_pf+0x2cb4>
    8000aace:	fc8fe06f          	j	80009296 <tinst_tests_pf+0x1478>
    8000aad2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aad4:	0016f713          	andi	a4,a3,1
    8000aad8:	bc071163          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aadc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aae0:	460d                	li	a2,3
    8000aae2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aae6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aae8:	00c59763          	bne	a1,a2,8000aaf6 <tinst_tests_pf+0x2cd8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aaec:	0026d683          	lhu	a3,2(a3)
    8000aaf0:	0106969b          	slliw	a3,a3,0x10
    8000aaf4:	8f55                	or	a4,a4,a3
    8000aaf6:	1ffe16b7          	lui	a3,0x1ffe1
    8000aafa:	068e                	slli	a3,a3,0x3
    8000aafc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aafe:	8f75                	and	a4,a4,a3
    8000ab00:	40f70933          	sub	s2,a4,a5
    8000ab04:	00193913          	seqz	s2,s2
    8000ab08:	f8efe06f          	j	80009296 <tinst_tests_pf+0x1478>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000ab0c:	6418                	ld	a4,8(s0)
    8000ab0e:	47bd                	li	a5,15
    8000ab10:	00f70463          	beq	a4,a5,8000ab18 <tinst_tests_pf+0x2cfa>
    8000ab14:	819fe06f          	j	8000932c <tinst_tests_pf+0x150e>
    8000ab18:	701c                	ld	a5,32(s0)
    8000ab1a:	e399                	bnez	a5,8000ab20 <tinst_tests_pf+0x2d02>
    8000ab1c:	813fe06f          	j	8000932e <tinst_tests_pf+0x1510>
    8000ab20:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab22:	0016f713          	andi	a4,a3,1
    8000ab26:	b6071a63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ab2a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab2e:	460d                	li	a2,3
    8000ab30:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab34:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab36:	00c59763          	bne	a1,a2,8000ab44 <tinst_tests_pf+0x2d26>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab3a:	0026d683          	lhu	a3,2(a3)
    8000ab3e:	0106969b          	slliw	a3,a3,0x10
    8000ab42:	8f55                	or	a4,a4,a3
    8000ab44:	1ffe16b7          	lui	a3,0x1ffe1
    8000ab48:	068e                	slli	a3,a3,0x3
    8000ab4a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ab4c:	8f75                	and	a4,a4,a3
    8000ab4e:	40f70933          	sub	s2,a4,a5
    8000ab52:	00193913          	seqz	s2,s2
    8000ab56:	fd8fe06f          	j	8000932e <tinst_tests_pf+0x1510>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ab5a:	02043983          	ld	s3,32(s0)
    8000ab5e:	00099463          	bnez	s3,8000ab66 <tinst_tests_pf+0x2d48>
    8000ab62:	b6dfd06f          	j	800086ce <tinst_tests_pf+0x8b0>
    8000ab66:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ab68:	0017f713          	andi	a4,a5,1
    8000ab6c:	b2071763          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ab70:	0007d503          	lhu	a0,0(a5)
    8000ab74:	b1ff60ef          	jal	80001692 <expand_compressed_instruction>
    8000ab78:	01f077b7          	lui	a5,0x1f07
    8000ab7c:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ab80:	00f57933          	and	s2,a0,a5
    8000ab84:	41390933          	sub	s2,s2,s3
    8000ab88:	00193913          	seqz	s2,s2
    8000ab8c:	b43fd06f          	j	800086ce <tinst_tests_pf+0x8b0>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000ab90:	7004                	ld	s1,32(s0)
    8000ab92:	e099                	bnez	s1,8000ab98 <tinst_tests_pf+0x2d7a>
    8000ab94:	bd7fd06f          	j	8000876a <tinst_tests_pf+0x94c>
    8000ab98:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ab9a:	0017f713          	andi	a4,a5,1
    8000ab9e:	ae071e63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aba2:	0007d503          	lhu	a0,0(a5)
    8000aba6:	aedf60ef          	jal	80001692 <expand_compressed_instruction>
    8000abaa:	01f077b7          	lui	a5,0x1f07
    8000abae:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000abb2:	00f57933          	and	s2,a0,a5
    8000abb6:	40990933          	sub	s2,s2,s1
    8000abba:	00193913          	seqz	s2,s2
    8000abbe:	badfd06f          	j	8000876a <tinst_tests_pf+0x94c>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000abc2:	701c                	ld	a5,32(s0)
    8000abc4:	e399                	bnez	a5,8000abca <tinst_tests_pf+0x2dac>
    8000abc6:	c4bfd06f          	j	80008810 <tinst_tests_pf+0x9f2>
    8000abca:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000abcc:	0016f713          	andi	a4,a3,1
    8000abd0:	ac071563          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000abd4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000abd8:	460d                	li	a2,3
    8000abda:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000abde:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000abe0:	00c59763          	bne	a1,a2,8000abee <tinst_tests_pf+0x2dd0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000abe4:	0026d683          	lhu	a3,2(a3)
    8000abe8:	0106969b          	slliw	a3,a3,0x10
    8000abec:	8f55                	or	a4,a4,a3
    8000abee:	1ffe16b7          	lui	a3,0x1ffe1
    8000abf2:	068e                	slli	a3,a3,0x3
    8000abf4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000abf6:	8f75                	and	a4,a4,a3
    8000abf8:	40f70933          	sub	s2,a4,a5
    8000abfc:	00193913          	seqz	s2,s2
    8000ac00:	c11fd06f          	j	80008810 <tinst_tests_pf+0x9f2>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000ac04:	701c                	ld	a5,32(s0)
    8000ac06:	e399                	bnez	a5,8000ac0c <tinst_tests_pf+0x2dee>
    8000ac08:	caffd06f          	j	800088b6 <tinst_tests_pf+0xa98>
    8000ac0c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac0e:	0016f713          	andi	a4,a3,1
    8000ac12:	a8071463          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac16:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac1a:	460d                	li	a2,3
    8000ac1c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac20:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac22:	00c59763          	bne	a1,a2,8000ac30 <tinst_tests_pf+0x2e12>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac26:	0026d683          	lhu	a3,2(a3)
    8000ac2a:	0106969b          	slliw	a3,a3,0x10
    8000ac2e:	8f55                	or	a4,a4,a3
    8000ac30:	1ffe16b7          	lui	a3,0x1ffe1
    8000ac34:	068e                	slli	a3,a3,0x3
    8000ac36:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ac38:	8f75                	and	a4,a4,a3
    8000ac3a:	40f70933          	sub	s2,a4,a5
    8000ac3e:	00193913          	seqz	s2,s2
    8000ac42:	c75fd06f          	j	800088b6 <tinst_tests_pf+0xa98>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000ac46:	701c                	ld	a5,32(s0)
    8000ac48:	e399                	bnez	a5,8000ac4e <tinst_tests_pf+0x2e30>
    8000ac4a:	d0dfd06f          	j	80008956 <tinst_tests_pf+0xb38>
    8000ac4e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac50:	0016f713          	andi	a4,a3,1
    8000ac54:	a4071363          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac58:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac5c:	460d                	li	a2,3
    8000ac5e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac62:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac64:	00c59763          	bne	a1,a2,8000ac72 <tinst_tests_pf+0x2e54>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac68:	0026d683          	lhu	a3,2(a3)
    8000ac6c:	0106969b          	slliw	a3,a3,0x10
    8000ac70:	8f55                	or	a4,a4,a3
    8000ac72:	1ffe16b7          	lui	a3,0x1ffe1
    8000ac76:	068e                	slli	a3,a3,0x3
    8000ac78:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ac7a:	8f75                	and	a4,a4,a3
    8000ac7c:	40f70933          	sub	s2,a4,a5
    8000ac80:	00193913          	seqz	s2,s2
    8000ac84:	cd3fd06f          	j	80008956 <tinst_tests_pf+0xb38>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000ac88:	701c                	ld	a5,32(s0)
    8000ac8a:	e399                	bnez	a5,8000ac90 <tinst_tests_pf+0x2e72>
    8000ac8c:	d5ffd06f          	j	800089ea <tinst_tests_pf+0xbcc>
    8000ac90:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac92:	0016f713          	andi	a4,a3,1
    8000ac96:	a0071263          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac9a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac9e:	460d                	li	a2,3
    8000aca0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aca4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aca6:	00c59763          	bne	a1,a2,8000acb4 <tinst_tests_pf+0x2e96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000acaa:	0026d683          	lhu	a3,2(a3)
    8000acae:	0106969b          	slliw	a3,a3,0x10
    8000acb2:	8f55                	or	a4,a4,a3
    8000acb4:	1ffe16b7          	lui	a3,0x1ffe1
    8000acb8:	068e                	slli	a3,a3,0x3
    8000acba:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000acbc:	8f75                	and	a4,a4,a3
    8000acbe:	40f70933          	sub	s2,a4,a5
    8000acc2:	00193913          	seqz	s2,s2
    8000acc6:	d25fd06f          	j	800089ea <tinst_tests_pf+0xbcc>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000acca:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000accc:	0017f713          	andi	a4,a5,1
    8000acd0:	9c071563          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000acd4:	0007d503          	lhu	a0,0(a5)
    8000acd8:	9bbf60ef          	jal	80001692 <expand_compressed_instruction>
    8000acdc:	67a1                	lui	a5,0x8
    8000acde:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000ace0:	8d7d                	and	a0,a0,a5
    8000ace2:	00a48463          	beq	s1,a0,8000acea <tinst_tests_pf+0x2ecc>
    8000ace6:	861fd06f          	j	80008546 <tinst_tests_pf+0x728>
    8000acea:	00028597          	auipc	a1,0x28
    8000acee:	9be58593          	addi	a1,a1,-1602 # 800326a8 <__func__.0+0x2c0>
    8000acf2:	85dfd06f          	j	8000854e <tinst_tests_pf+0x730>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000acf6:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000acf8:	0017f713          	andi	a4,a5,1
    8000acfc:	98071f63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad00:	0007d503          	lhu	a0,0(a5)
    8000ad04:	98ff60ef          	jal	80001692 <expand_compressed_instruction>
    8000ad08:	67a1                	lui	a5,0x8
    8000ad0a:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000ad0c:	8d7d                	and	a0,a0,a5
    8000ad0e:	00a98463          	beq	s3,a0,8000ad16 <tinst_tests_pf+0x2ef8>
    8000ad12:	8c9fd06f          	j	800085da <tinst_tests_pf+0x7bc>
    8000ad16:	00028597          	auipc	a1,0x28
    8000ad1a:	99258593          	addi	a1,a1,-1646 # 800326a8 <__func__.0+0x2c0>
    8000ad1e:	8c5fd06f          	j	800085e2 <tinst_tests_pf+0x7c4>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000ad22:	701c                	ld	a5,32(s0)
    8000ad24:	e399                	bnez	a5,8000ad2a <tinst_tests_pf+0x2f0c>
    8000ad26:	d65fd06f          	j	80008a8a <tinst_tests_pf+0xc6c>
    8000ad2a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad2c:	0016f713          	andi	a4,a3,1
    8000ad30:	96071563          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad34:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad38:	460d                	li	a2,3
    8000ad3a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad3e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad40:	00c59763          	bne	a1,a2,8000ad4e <tinst_tests_pf+0x2f30>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad44:	0026d683          	lhu	a3,2(a3)
    8000ad48:	0106969b          	slliw	a3,a3,0x10
    8000ad4c:	8f55                	or	a4,a4,a3
    8000ad4e:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad52:	068e                	slli	a3,a3,0x3
    8000ad54:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad56:	8f75                	and	a4,a4,a3
    8000ad58:	40f70933          	sub	s2,a4,a5
    8000ad5c:	00193913          	seqz	s2,s2
    8000ad60:	d2bfd06f          	j	80008a8a <tinst_tests_pf+0xc6c>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ad64:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ad66:	0017f713          	andi	a4,a5,1
    8000ad6a:	92071863          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad6e:	0007d503          	lhu	a0,0(a5)
    8000ad72:	921f60ef          	jal	80001692 <expand_compressed_instruction>
    8000ad76:	01f077b7          	lui	a5,0x1f07
    8000ad7a:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ad7e:	8d7d                	and	a0,a0,a5
    8000ad80:	00a98463          	beq	s3,a0,8000ad88 <tinst_tests_pf+0x2f6a>
    8000ad84:	8ebfd06f          	j	8000866e <tinst_tests_pf+0x850>
    8000ad88:	00028597          	auipc	a1,0x28
    8000ad8c:	92058593          	addi	a1,a1,-1760 # 800326a8 <__func__.0+0x2c0>
    8000ad90:	8e7fd06f          	j	80008676 <tinst_tests_pf+0x858>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000ad94:	701c                	ld	a5,32(s0)
    8000ad96:	e399                	bnez	a5,8000ad9c <tinst_tests_pf+0x2f7e>
    8000ad98:	d93fd06f          	j	80008b2a <tinst_tests_pf+0xd0c>
    8000ad9c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad9e:	0016f713          	andi	a4,a3,1
    8000ada2:	8e071c63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ada6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000adaa:	460d                	li	a2,3
    8000adac:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000adb0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000adb2:	00c59763          	bne	a1,a2,8000adc0 <tinst_tests_pf+0x2fa2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000adb6:	0026d683          	lhu	a3,2(a3)
    8000adba:	0106969b          	slliw	a3,a3,0x10
    8000adbe:	8f55                	or	a4,a4,a3
    8000adc0:	1ffe16b7          	lui	a3,0x1ffe1
    8000adc4:	068e                	slli	a3,a3,0x3
    8000adc6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000adc8:	8f75                	and	a4,a4,a3
    8000adca:	40f70933          	sub	s2,a4,a5
    8000adce:	00193913          	seqz	s2,s2
    8000add2:	d59fd06f          	j	80008b2a <tinst_tests_pf+0xd0c>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000add6:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000add8:	0017f713          	andi	a4,a5,1
    8000addc:	8a071f63          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ade0:	0007d503          	lhu	a0,0(a5)
    8000ade4:	8aff60ef          	jal	80001692 <expand_compressed_instruction>
    8000ade8:	01f077b7          	lui	a5,0x1f07
    8000adec:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000adf0:	8d7d                	and	a0,a0,a5
    8000adf2:	00a48463          	beq	s1,a0,8000adfa <tinst_tests_pf+0x2fdc>
    8000adf6:	915fd06f          	j	8000870a <tinst_tests_pf+0x8ec>
    8000adfa:	00028597          	auipc	a1,0x28
    8000adfe:	8ae58593          	addi	a1,a1,-1874 # 800326a8 <__func__.0+0x2c0>
    8000ae02:	911fd06f          	j	80008712 <tinst_tests_pf+0x8f4>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000ae06:	701c                	ld	a5,32(s0)
    8000ae08:	e399                	bnez	a5,8000ae0e <tinst_tests_pf+0x2ff0>
    8000ae0a:	dc1fd06f          	j	80008bca <tinst_tests_pf+0xdac>
    8000ae0e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae10:	0016f713          	andi	a4,a3,1
    8000ae14:	88071363          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae18:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae1c:	460d                	li	a2,3
    8000ae1e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae22:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae24:	00c59763          	bne	a1,a2,8000ae32 <tinst_tests_pf+0x3014>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae28:	0026d683          	lhu	a3,2(a3)
    8000ae2c:	0106969b          	slliw	a3,a3,0x10
    8000ae30:	8f55                	or	a4,a4,a3
    8000ae32:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae36:	068e                	slli	a3,a3,0x3
    8000ae38:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae3a:	8f75                	and	a4,a4,a3
    8000ae3c:	40f70933          	sub	s2,a4,a5
    8000ae40:	00193913          	seqz	s2,s2
    8000ae44:	d87fd06f          	j	80008bca <tinst_tests_pf+0xdac>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000ae48:	701c                	ld	a5,32(s0)
    8000ae4a:	e399                	bnez	a5,8000ae50 <tinst_tests_pf+0x3032>
    8000ae4c:	e1ffd06f          	j	80008c6a <tinst_tests_pf+0xe4c>
    8000ae50:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae52:	0016f713          	andi	a4,a3,1
    8000ae56:	84071263          	bnez	a4,80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae5a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae5e:	460d                	li	a2,3
    8000ae60:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae64:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae66:	00c59763          	bne	a1,a2,8000ae74 <tinst_tests_pf+0x3056>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae6a:	0026d683          	lhu	a3,2(a3)
    8000ae6e:	0106969b          	slliw	a3,a3,0x10
    8000ae72:	8f55                	or	a4,a4,a3
    8000ae74:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae78:	068e                	slli	a3,a3,0x3
    8000ae7a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae7c:	8f75                	and	a4,a4,a3
    8000ae7e:	40f70933          	sub	s2,a4,a5
    8000ae82:	00193913          	seqz	s2,s2
    8000ae86:	de5fd06f          	j	80008c6a <tinst_tests_pf+0xe4c>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000ae8a:	701c                	ld	a5,32(s0)
    8000ae8c:	e399                	bnez	a5,8000ae92 <tinst_tests_pf+0x3074>
    8000ae8e:	e7dfd06f          	j	80008d0a <tinst_tests_pf+0xeec>
    8000ae92:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae94:	0016f713          	andi	a4,a3,1
    8000ae98:	c319                	beqz	a4,8000ae9e <tinst_tests_pf+0x3080>
    8000ae9a:	800ff06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae9e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aea2:	460d                	li	a2,3
    8000aea4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aea8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aeaa:	00c59763          	bne	a1,a2,8000aeb8 <tinst_tests_pf+0x309a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aeae:	0026d683          	lhu	a3,2(a3)
    8000aeb2:	0106969b          	slliw	a3,a3,0x10
    8000aeb6:	8f55                	or	a4,a4,a3
    8000aeb8:	1ffe16b7          	lui	a3,0x1ffe1
    8000aebc:	068e                	slli	a3,a3,0x3
    8000aebe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aec0:	8f75                	and	a4,a4,a3
    8000aec2:	40f70933          	sub	s2,a4,a5
    8000aec6:	00193913          	seqz	s2,s2
    8000aeca:	e41fd06f          	j	80008d0a <tinst_tests_pf+0xeec>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000aece:	701c                	ld	a5,32(s0)
    8000aed0:	e399                	bnez	a5,8000aed6 <tinst_tests_pf+0x30b8>
    8000aed2:	ed9fd06f          	j	80008daa <tinst_tests_pf+0xf8c>
    8000aed6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aed8:	0016f713          	andi	a4,a3,1
    8000aedc:	c319                	beqz	a4,8000aee2 <tinst_tests_pf+0x30c4>
    8000aede:	fbdfe06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aee2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aee6:	460d                	li	a2,3
    8000aee8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aeec:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aeee:	00c59763          	bne	a1,a2,8000aefc <tinst_tests_pf+0x30de>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aef2:	0026d683          	lhu	a3,2(a3)
    8000aef6:	0106969b          	slliw	a3,a3,0x10
    8000aefa:	8f55                	or	a4,a4,a3
    8000aefc:	1ffe16b7          	lui	a3,0x1ffe1
    8000af00:	068e                	slli	a3,a3,0x3
    8000af02:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af04:	8f75                	and	a4,a4,a3
    8000af06:	40f70933          	sub	s2,a4,a5
    8000af0a:	00193913          	seqz	s2,s2
    8000af0e:	e9dfd06f          	j	80008daa <tinst_tests_pf+0xf8c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000af12:	701c                	ld	a5,32(s0)
    8000af14:	e399                	bnez	a5,8000af1a <tinst_tests_pf+0x30fc>
    8000af16:	f39fd06f          	j	80008e4e <tinst_tests_pf+0x1030>
    8000af1a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af1c:	0016f713          	andi	a4,a3,1
    8000af20:	c319                	beqz	a4,8000af26 <tinst_tests_pf+0x3108>
    8000af22:	f79fe06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af26:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af2a:	460d                	li	a2,3
    8000af2c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af30:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af32:	00c59763          	bne	a1,a2,8000af40 <tinst_tests_pf+0x3122>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af36:	0026d683          	lhu	a3,2(a3)
    8000af3a:	0106969b          	slliw	a3,a3,0x10
    8000af3e:	8f55                	or	a4,a4,a3
    8000af40:	1ffe16b7          	lui	a3,0x1ffe1
    8000af44:	068e                	slli	a3,a3,0x3
    8000af46:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af48:	8f75                	and	a4,a4,a3
    8000af4a:	40f70933          	sub	s2,a4,a5
    8000af4e:	00193913          	seqz	s2,s2
    8000af52:	efdfd06f          	j	80008e4e <tinst_tests_pf+0x1030>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000af56:	701c                	ld	a5,32(s0)
    8000af58:	e399                	bnez	a5,8000af5e <tinst_tests_pf+0x3140>
    8000af5a:	f95fd06f          	j	80008eee <tinst_tests_pf+0x10d0>
    8000af5e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af60:	0016f713          	andi	a4,a3,1
    8000af64:	c319                	beqz	a4,8000af6a <tinst_tests_pf+0x314c>
    8000af66:	f35fe06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af6a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af6e:	460d                	li	a2,3
    8000af70:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af74:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af76:	00c59763          	bne	a1,a2,8000af84 <tinst_tests_pf+0x3166>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af7a:	0026d683          	lhu	a3,2(a3)
    8000af7e:	0106969b          	slliw	a3,a3,0x10
    8000af82:	8f55                	or	a4,a4,a3
    8000af84:	1ffe16b7          	lui	a3,0x1ffe1
    8000af88:	068e                	slli	a3,a3,0x3
    8000af8a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af8c:	8f75                	and	a4,a4,a3
    8000af8e:	40f70933          	sub	s2,a4,a5
    8000af92:	00193913          	seqz	s2,s2
    8000af96:	f59fd06f          	j	80008eee <tinst_tests_pf+0x10d0>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000af9a:	701c                	ld	a5,32(s0)
    8000af9c:	e399                	bnez	a5,8000afa2 <tinst_tests_pf+0x3184>
    8000af9e:	ff1fd06f          	j	80008f8e <tinst_tests_pf+0x1170>
    8000afa2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000afa4:	0016f713          	andi	a4,a3,1
    8000afa8:	c319                	beqz	a4,8000afae <tinst_tests_pf+0x3190>
    8000afaa:	ef1fe06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000afae:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000afb2:	460d                	li	a2,3
    8000afb4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000afb8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000afba:	00c59763          	bne	a1,a2,8000afc8 <tinst_tests_pf+0x31aa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000afbe:	0026d683          	lhu	a3,2(a3)
    8000afc2:	0106969b          	slliw	a3,a3,0x10
    8000afc6:	8f55                	or	a4,a4,a3
    8000afc8:	1ffe16b7          	lui	a3,0x1ffe1
    8000afcc:	068e                	slli	a3,a3,0x3
    8000afce:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000afd0:	8f75                	and	a4,a4,a3
    8000afd2:	40f70933          	sub	s2,a4,a5
    8000afd6:	00193913          	seqz	s2,s2
    8000afda:	fb5fd06f          	j	80008f8e <tinst_tests_pf+0x1170>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000afde:	701c                	ld	a5,32(s0)
    8000afe0:	e399                	bnez	a5,8000afe6 <tinst_tests_pf+0x31c8>
    8000afe2:	84cfe06f          	j	8000902e <tinst_tests_pf+0x1210>
    8000afe6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000afe8:	0016f713          	andi	a4,a3,1
    8000afec:	c319                	beqz	a4,8000aff2 <tinst_tests_pf+0x31d4>
    8000afee:	eadfe06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aff2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aff6:	460d                	li	a2,3
    8000aff8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000affc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000affe:	00c59763          	bne	a1,a2,8000b00c <tinst_tests_pf+0x31ee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b002:	0026d683          	lhu	a3,2(a3)
    8000b006:	0106969b          	slliw	a3,a3,0x10
    8000b00a:	8f55                	or	a4,a4,a3
    8000b00c:	1ffe16b7          	lui	a3,0x1ffe1
    8000b010:	068e                	slli	a3,a3,0x3
    8000b012:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b014:	8f75                	and	a4,a4,a3
    8000b016:	40f70933          	sub	s2,a4,a5
    8000b01a:	00193913          	seqz	s2,s2
    8000b01e:	810fe06f          	j	8000902e <tinst_tests_pf+0x1210>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000b022:	701c                	ld	a5,32(s0)
    8000b024:	e399                	bnez	a5,8000b02a <tinst_tests_pf+0x320c>
    8000b026:	8a8fe06f          	j	800090ce <tinst_tests_pf+0x12b0>
    8000b02a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b02c:	0016f713          	andi	a4,a3,1
    8000b030:	c319                	beqz	a4,8000b036 <tinst_tests_pf+0x3218>
    8000b032:	e69fe06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b036:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b03a:	460d                	li	a2,3
    8000b03c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b040:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b042:	00c59763          	bne	a1,a2,8000b050 <tinst_tests_pf+0x3232>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b046:	0026d683          	lhu	a3,2(a3)
    8000b04a:	0106969b          	slliw	a3,a3,0x10
    8000b04e:	8f55                	or	a4,a4,a3
    8000b050:	1ffe16b7          	lui	a3,0x1ffe1
    8000b054:	068e                	slli	a3,a3,0x3
    8000b056:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b058:	8f75                	and	a4,a4,a3
    8000b05a:	40f70933          	sub	s2,a4,a5
    8000b05e:	00193913          	seqz	s2,s2
    8000b062:	86cfe06f          	j	800090ce <tinst_tests_pf+0x12b0>
    8000b066:	701c                	ld	a5,32(s0)
    8000b068:	e399                	bnez	a5,8000b06e <tinst_tests_pf+0x3250>
    8000b06a:	842fe06f          	j	800090ac <tinst_tests_pf+0x128e>
    8000b06e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b070:	0016f713          	andi	a4,a3,1
    8000b074:	c319                	beqz	a4,8000b07a <tinst_tests_pf+0x325c>
    8000b076:	e25fe06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b07a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b07e:	460d                	li	a2,3
    8000b080:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b084:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b086:	00c59763          	bne	a1,a2,8000b094 <tinst_tests_pf+0x3276>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b08a:	0026d683          	lhu	a3,2(a3)
    8000b08e:	0106969b          	slliw	a3,a3,0x10
    8000b092:	8f55                	or	a4,a4,a3
    8000b094:	1ffe16b7          	lui	a3,0x1ffe1
    8000b098:	068e                	slli	a3,a3,0x3
    8000b09a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b09c:	8f75                	and	a4,a4,a3
    8000b09e:	00e78463          	beq	a5,a4,8000b0a6 <tinst_tests_pf+0x3288>
    8000b0a2:	ff7fd06f          	j	80009098 <tinst_tests_pf+0x127a>
    8000b0a6:	806fe06f          	j	800090ac <tinst_tests_pf+0x128e>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000b0aa:	701c                	ld	a5,32(s0)
    8000b0ac:	e399                	bnez	a5,8000b0b2 <tinst_tests_pf+0x3294>
    8000b0ae:	89efe06f          	j	8000914c <tinst_tests_pf+0x132e>
    8000b0b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b0b4:	0016f713          	andi	a4,a3,1
    8000b0b8:	c319                	beqz	a4,8000b0be <tinst_tests_pf+0x32a0>
    8000b0ba:	de1fe06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b0be:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0c2:	460d                	li	a2,3
    8000b0c4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b0c8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b0ca:	00c59763          	bne	a1,a2,8000b0d8 <tinst_tests_pf+0x32ba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b0ce:	0026d683          	lhu	a3,2(a3)
    8000b0d2:	0106969b          	slliw	a3,a3,0x10
    8000b0d6:	8f55                	or	a4,a4,a3
    8000b0d8:	1ffe16b7          	lui	a3,0x1ffe1
    8000b0dc:	068e                	slli	a3,a3,0x3
    8000b0de:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b0e0:	8f75                	and	a4,a4,a3
    8000b0e2:	00e78463          	beq	a5,a4,8000b0ea <tinst_tests_pf+0x32cc>
    8000b0e6:	852fe06f          	j	80009138 <tinst_tests_pf+0x131a>
    8000b0ea:	862fe06f          	j	8000914c <tinst_tests_pf+0x132e>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000b0ee:	701c                	ld	a5,32(s0)
    8000b0f0:	e399                	bnez	a5,8000b0f6 <tinst_tests_pf+0x32d8>
    8000b0f2:	8f2fe06f          	j	800091e4 <tinst_tests_pf+0x13c6>
    8000b0f6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b0f8:	0016f713          	andi	a4,a3,1
    8000b0fc:	c319                	beqz	a4,8000b102 <tinst_tests_pf+0x32e4>
    8000b0fe:	d9dfe06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b102:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b106:	460d                	li	a2,3
    8000b108:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b10c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b10e:	00c59763          	bne	a1,a2,8000b11c <tinst_tests_pf+0x32fe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b112:	0026d683          	lhu	a3,2(a3)
    8000b116:	0106969b          	slliw	a3,a3,0x10
    8000b11a:	8f55                	or	a4,a4,a3
    8000b11c:	1ffe16b7          	lui	a3,0x1ffe1
    8000b120:	068e                	slli	a3,a3,0x3
    8000b122:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b124:	8f75                	and	a4,a4,a3
    8000b126:	00e78463          	beq	a5,a4,8000b12e <tinst_tests_pf+0x3310>
    8000b12a:	8a6fe06f          	j	800091d0 <tinst_tests_pf+0x13b2>
    8000b12e:	8b6fe06f          	j	800091e4 <tinst_tests_pf+0x13c6>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000b132:	701c                	ld	a5,32(s0)
    8000b134:	e399                	bnez	a5,8000b13a <tinst_tests_pf+0x331c>
    8000b136:	946fe06f          	j	8000927c <tinst_tests_pf+0x145e>
    8000b13a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b13c:	0016f713          	andi	a4,a3,1
    8000b140:	c319                	beqz	a4,8000b146 <tinst_tests_pf+0x3328>
    8000b142:	d59fe06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b146:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b14a:	460d                	li	a2,3
    8000b14c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b150:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b152:	00c59763          	bne	a1,a2,8000b160 <tinst_tests_pf+0x3342>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b156:	0026d683          	lhu	a3,2(a3)
    8000b15a:	0106969b          	slliw	a3,a3,0x10
    8000b15e:	8f55                	or	a4,a4,a3
    8000b160:	1ffe16b7          	lui	a3,0x1ffe1
    8000b164:	068e                	slli	a3,a3,0x3
    8000b166:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b168:	8f75                	and	a4,a4,a3
    8000b16a:	00e78463          	beq	a5,a4,8000b172 <tinst_tests_pf+0x3354>
    8000b16e:	8fafe06f          	j	80009268 <tinst_tests_pf+0x144a>
    8000b172:	90afe06f          	j	8000927c <tinst_tests_pf+0x145e>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000b176:	701c                	ld	a5,32(s0)
    8000b178:	e399                	bnez	a5,8000b17e <tinst_tests_pf+0x3360>
    8000b17a:	99afe06f          	j	80009314 <tinst_tests_pf+0x14f6>
    8000b17e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b180:	0016f713          	andi	a4,a3,1
    8000b184:	c319                	beqz	a4,8000b18a <tinst_tests_pf+0x336c>
    8000b186:	d15fe06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b18a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b18e:	460d                	li	a2,3
    8000b190:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b194:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b196:	00c59763          	bne	a1,a2,8000b1a4 <tinst_tests_pf+0x3386>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b19a:	0026d683          	lhu	a3,2(a3)
    8000b19e:	0106969b          	slliw	a3,a3,0x10
    8000b1a2:	8f55                	or	a4,a4,a3
    8000b1a4:	1ffe16b7          	lui	a3,0x1ffe1
    8000b1a8:	068e                	slli	a3,a3,0x3
    8000b1aa:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b1ac:	8f75                	and	a4,a4,a3
    8000b1ae:	00e78463          	beq	a5,a4,8000b1b6 <tinst_tests_pf+0x3398>
    8000b1b2:	94efe06f          	j	80009300 <tinst_tests_pf+0x14e2>
    8000b1b6:	95efe06f          	j	80009314 <tinst_tests_pf+0x14f6>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000b1ba:	701c                	ld	a5,32(s0)
    8000b1bc:	e399                	bnez	a5,8000b1c2 <tinst_tests_pf+0x33a4>
    8000b1be:	9eefe06f          	j	800093ac <tinst_tests_pf+0x158e>
    8000b1c2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b1c4:	0016f713          	andi	a4,a3,1
    8000b1c8:	c319                	beqz	a4,8000b1ce <tinst_tests_pf+0x33b0>
    8000b1ca:	cd1fe06f          	j	80009e9a <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b1ce:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b1d2:	460d                	li	a2,3
    8000b1d4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b1d8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b1da:	00c59763          	bne	a1,a2,8000b1e8 <tinst_tests_pf+0x33ca>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b1de:	0026d683          	lhu	a3,2(a3)
    8000b1e2:	0106969b          	slliw	a3,a3,0x10
    8000b1e6:	8f55                	or	a4,a4,a3
    8000b1e8:	1ffe16b7          	lui	a3,0x1ffe1
    8000b1ec:	068e                	slli	a3,a3,0x3
    8000b1ee:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b1f0:	8f75                	and	a4,a4,a3
    8000b1f2:	00e78463          	beq	a5,a4,8000b1fa <tinst_tests_pf+0x33dc>
    8000b1f6:	9a2fe06f          	j	80009398 <tinst_tests_pf+0x157a>
    8000b1fa:	9b2fe06f          	j	800093ac <tinst_tests_pf+0x158e>

000000008000b1fe <tinst_tests_gpf>:

bool tinst_tests_gpf(){
    8000b1fe:	7179                	addi	sp,sp,-48
    
    TEST_START();
    8000b200:	00025597          	auipc	a1,0x25
    8000b204:	64858593          	addi	a1,a1,1608 # 80030848 <__func__.0>
    8000b208:	00027517          	auipc	a0,0x27
    8000b20c:	4c050513          	addi	a0,a0,1216 # 800326c8 <__func__.0+0x2e0>
bool tinst_tests_gpf(){
    8000b210:	f406                	sd	ra,40(sp)
    8000b212:	f022                	sd	s0,32(sp)
    8000b214:	ec26                	sd	s1,24(sp)
    8000b216:	e84a                	sd	s2,16(sp)
    8000b218:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000b21a:	2aa240ef          	jal	8002f4c4 <printf>
    8000b21e:	4529                	li	a0,10
    8000b220:	793220ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8000b224:	450d                	li	a0,3
    8000b226:	ceff50ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8000b22a:	bc2f50ef          	jal	800005ec <hspt_init>
    hpt_init();
    8000b22e:	fa2f50ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8000b232:	d56f50ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_VS);   
    8000b236:	4509                	li	a0,2
    8000b238:	cddf50ef          	jal	80000f14 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GI);      
    printf("%llx\n",vaddr_f);
    8000b23c:	001005b7          	lui	a1,0x100
    8000b240:	06558593          	addi	a1,a1,101 # 100065 <STACK_SIZE+0x65>
    8000b244:	05b2                	slli	a1,a1,0xc
    8000b246:	0002e517          	auipc	a0,0x2e
    8000b24a:	aba50513          	addi	a0,a0,-1350 # 80038d00 <__func__.0+0x6918>
    8000b24e:	276240ef          	jal	8002f4c4 <printf>
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000b252:	bc7f50ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000b256:	001007b7          	lui	a5,0x100
    8000b25a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b25e:	07b2                	slli	a5,a5,0xc
    8000b260:	00078783          	lb	a5,0(a5)
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);    
    printf("%llx\n",excpt.tinst);
    8000b264:	00051417          	auipc	s0,0x51
    8000b268:	dac40413          	addi	s0,s0,-596 # 8005c010 <excpt>
    8000b26c:	700c                	ld	a1,32(s0)
    8000b26e:	0002e517          	auipc	a0,0x2e
    8000b272:	a9250513          	addi	a0,a0,-1390 # 80038d00 <__func__.0+0x6918>
    8000b276:	24e240ef          	jal	8002f4c4 <printf>
    printf("%llx\n",excpt.triggered);
    8000b27a:	00051597          	auipc	a1,0x51
    8000b27e:	d975c583          	lbu	a1,-617(a1) # 8005c011 <excpt+0x1>
    8000b282:	0002e517          	auipc	a0,0x2e
    8000b286:	a7e50513          	addi	a0,a0,-1410 # 80038d00 <__func__.0+0x6918>
    8000b28a:	23a240ef          	jal	8002f4c4 <printf>
    printf("%llx\n",excpt.cause);
    8000b28e:	640c                	ld	a1,8(s0)
    8000b290:	0002e517          	auipc	a0,0x2e
    8000b294:	a7050513          	addi	a0,a0,-1424 # 80038d00 <__func__.0+0x6918>
    8000b298:	22c240ef          	jal	8002f4c4 <printf>
    printf("%llx\n",excpt.tval2);
    8000b29c:	740c                	ld	a1,40(s0)
    8000b29e:	0002e517          	auipc	a0,0x2e
    8000b2a2:	a6250513          	addi	a0,a0,-1438 # 80038d00 <__func__.0+0x6918>
    8000b2a6:	21e240ef          	jal	8002f4c4 <printf>
    printf("%llx\n",excpt.tval);
    8000b2aa:	6c0c                	ld	a1,24(s0)
    8000b2ac:	0002e517          	auipc	a0,0x2e
    8000b2b0:	a5450513          	addi	a0,a0,-1452 # 80038d00 <__func__.0+0x6918>
    8000b2b4:	210240ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("correct tinst when executing a lb which results in a lgpf",         
    8000b2b8:	08c00593          	li	a1,140
    8000b2bc:	00029617          	auipc	a2,0x29
    8000b2c0:	65c60613          	addi	a2,a2,1628 # 80034918 <__func__.0+0x2530>
    8000b2c4:	00027517          	auipc	a0,0x27
    8000b2c8:	41c50513          	addi	a0,a0,1052 # 800326e0 <__func__.0+0x2f8>
    8000b2cc:	1f8240ef          	jal	8002f4c4 <printf>
    8000b2d0:	00051797          	auipc	a5,0x51
    8000b2d4:	d417c783          	lbu	a5,-703(a5) # 8005c011 <excpt+0x1>
    8000b2d8:	00027597          	auipc	a1,0x27
    8000b2dc:	3e058593          	addi	a1,a1,992 # 800326b8 <__func__.0+0x2d0>
    8000b2e0:	cf89                	beqz	a5,8000b2fa <tinst_tests_gpf+0xfc>
    8000b2e2:	6418                	ld	a4,8(s0)
    8000b2e4:	47d5                	li	a5,21
    8000b2e6:	00027597          	auipc	a1,0x27
    8000b2ea:	3c258593          	addi	a1,a1,962 # 800326a8 <__func__.0+0x2c0>
    8000b2ee:	00f70663          	beq	a4,a5,8000b2fa <tinst_tests_gpf+0xfc>
    8000b2f2:	00027597          	auipc	a1,0x27
    8000b2f6:	3c658593          	addi	a1,a1,966 # 800326b8 <__func__.0+0x2d0>
    8000b2fa:	00027517          	auipc	a0,0x27
    8000b2fe:	3fe50513          	addi	a0,a0,1022 # 800326f8 <__func__.0+0x310>
    8000b302:	1c2240ef          	jal	8002f4c4 <printf>
    8000b306:	00051797          	auipc	a5,0x51
    8000b30a:	d0b7c783          	lbu	a5,-757(a5) # 8005c011 <excpt+0x1>
    8000b30e:	c789                	beqz	a5,8000b318 <tinst_tests_gpf+0x11a>
    8000b310:	6418                	ld	a4,8(s0)
    8000b312:	47d5                	li	a5,21
    8000b314:	00f70c63          	beq	a4,a5,8000b32c <tinst_tests_gpf+0x12e>
    8000b318:	00027517          	auipc	a0,0x27
    8000b31c:	3e850513          	addi	a0,a0,1000 # 80032700 <__func__.0+0x318>
    8000b320:	1a4240ef          	jal	8002f4c4 <printf>
    8000b324:	02900513          	li	a0,41
    8000b328:	68b220ef          	jal	8002e1b2 <putchar>
    8000b32c:	4529                	li	a0,10
    8000b32e:	685220ef          	jal	8002e1b2 <putchar>
    8000b332:	00051797          	auipc	a5,0x51
    8000b336:	cdf7c783          	lbu	a5,-801(a5) # 8005c011 <excpt+0x1>
    8000b33a:	4481                	li	s1,0
    8000b33c:	c789                	beqz	a5,8000b346 <tinst_tests_gpf+0x148>
    8000b33e:	6404                	ld	s1,8(s0)
    8000b340:	14ad                	addi	s1,s1,-21
    8000b342:	0014b493          	seqz	s1,s1
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF 
    );

    TEST_SETUP_EXCEPT();
    8000b346:	ad3f50ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    8000b34a:	001007b7          	lui	a5,0x100
    8000b34e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b352:	07b2                	slli	a5,a5,0xc
    8000b354:	0007c783          	lbu	a5,0(a5)
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000b358:	00029617          	auipc	a2,0x29
    8000b35c:	60060613          	addi	a2,a2,1536 # 80034958 <__func__.0+0x2570>
    8000b360:	08c00593          	li	a1,140
    8000b364:	00027517          	auipc	a0,0x27
    8000b368:	37c50513          	addi	a0,a0,892 # 800326e0 <__func__.0+0x2f8>
    8000b36c:	158240ef          	jal	8002f4c4 <printf>
    8000b370:	00051797          	auipc	a5,0x51
    8000b374:	ca17c783          	lbu	a5,-863(a5) # 8005c011 <excpt+0x1>
    8000b378:	e399                	bnez	a5,8000b37e <tinst_tests_gpf+0x180>
    8000b37a:	59a0106f          	j	8000c914 <tinst_tests_gpf+0x1716>
    8000b37e:	6418                	ld	a4,8(s0)
    8000b380:	47d5                	li	a5,21
    8000b382:	00027597          	auipc	a1,0x27
    8000b386:	33658593          	addi	a1,a1,822 # 800326b8 <__func__.0+0x2d0>
    8000b38a:	00f71463          	bne	a4,a5,8000b392 <tinst_tests_gpf+0x194>
    8000b38e:	53e0106f          	j	8000c8cc <tinst_tests_gpf+0x16ce>
    8000b392:	00027517          	auipc	a0,0x27
    8000b396:	36650513          	addi	a0,a0,870 # 800326f8 <__func__.0+0x310>
    8000b39a:	12a240ef          	jal	8002f4c4 <printf>
    8000b39e:	00051797          	auipc	a5,0x51
    8000b3a2:	c737c783          	lbu	a5,-909(a5) # 8005c011 <excpt+0x1>
    8000b3a6:	c799                	beqz	a5,8000b3b4 <tinst_tests_gpf+0x1b6>
    8000b3a8:	6418                	ld	a4,8(s0)
    8000b3aa:	47d5                	li	a5,21
    8000b3ac:	00f71463          	bne	a4,a5,8000b3b4 <tinst_tests_gpf+0x1b6>
    8000b3b0:	5d00106f          	j	8000c980 <tinst_tests_gpf+0x1782>
    8000b3b4:	00027517          	auipc	a0,0x27
    8000b3b8:	34c50513          	addi	a0,a0,844 # 80032700 <__func__.0+0x318>
    8000b3bc:	108240ef          	jal	8002f4c4 <printf>
    8000b3c0:	02900513          	li	a0,41
    8000b3c4:	5ef220ef          	jal	8002e1b2 <putchar>
    8000b3c8:	4529                	li	a0,10
    8000b3ca:	5e9220ef          	jal	8002e1b2 <putchar>
    8000b3ce:	cc89                	beqz	s1,8000b3e8 <tinst_tests_gpf+0x1ea>
    8000b3d0:	00051797          	auipc	a5,0x51
    8000b3d4:	c417c783          	lbu	a5,-959(a5) # 8005c011 <excpt+0x1>
    8000b3d8:	c799                	beqz	a5,8000b3e6 <tinst_tests_gpf+0x1e8>
    8000b3da:	6418                	ld	a4,8(s0)
    8000b3dc:	47d5                	li	a5,21
    8000b3de:	00f71463          	bne	a4,a5,8000b3e6 <tinst_tests_gpf+0x1e8>
    8000b3e2:	71d0106f          	j	8000d2fe <tinst_tests_gpf+0x2100>
    8000b3e6:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b3e8:	a31f50ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000b3ec:	001007b7          	lui	a5,0x100
    8000b3f0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b3f4:	07b2                	slli	a5,a5,0xc
    8000b3f6:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000b3fa:	00029617          	auipc	a2,0x29
    8000b3fe:	59e60613          	addi	a2,a2,1438 # 80034998 <__func__.0+0x25b0>
    8000b402:	08c00593          	li	a1,140
    8000b406:	00027517          	auipc	a0,0x27
    8000b40a:	2da50513          	addi	a0,a0,730 # 800326e0 <__func__.0+0x2f8>
    8000b40e:	0b6240ef          	jal	8002f4c4 <printf>
    8000b412:	00051797          	auipc	a5,0x51
    8000b416:	bff7c783          	lbu	a5,-1025(a5) # 8005c011 <excpt+0x1>
    8000b41a:	c399                	beqz	a5,8000b420 <tinst_tests_gpf+0x222>
    8000b41c:	5040106f          	j	8000c920 <tinst_tests_gpf+0x1722>
    8000b420:	00027597          	auipc	a1,0x27
    8000b424:	29858593          	addi	a1,a1,664 # 800326b8 <__func__.0+0x2d0>
    8000b428:	00027517          	auipc	a0,0x27
    8000b42c:	2d050513          	addi	a0,a0,720 # 800326f8 <__func__.0+0x310>
    8000b430:	094240ef          	jal	8002f4c4 <printf>
    8000b434:	00051797          	auipc	a5,0x51
    8000b438:	bdd7c783          	lbu	a5,-1059(a5) # 8005c011 <excpt+0x1>
    8000b43c:	c799                	beqz	a5,8000b44a <tinst_tests_gpf+0x24c>
    8000b43e:	6418                	ld	a4,8(s0)
    8000b440:	47d5                	li	a5,21
    8000b442:	00f71463          	bne	a4,a5,8000b44a <tinst_tests_gpf+0x24c>
    8000b446:	1970106f          	j	8000cddc <tinst_tests_gpf+0x1bde>
    8000b44a:	00027517          	auipc	a0,0x27
    8000b44e:	2b650513          	addi	a0,a0,694 # 80032700 <__func__.0+0x318>
    8000b452:	072240ef          	jal	8002f4c4 <printf>
    8000b456:	02900513          	li	a0,41
    8000b45a:	559220ef          	jal	8002e1b2 <putchar>
    8000b45e:	4529                	li	a0,10
    8000b460:	553220ef          	jal	8002e1b2 <putchar>
    8000b464:	cc89                	beqz	s1,8000b47e <tinst_tests_gpf+0x280>
    8000b466:	00051797          	auipc	a5,0x51
    8000b46a:	bab7c783          	lbu	a5,-1109(a5) # 8005c011 <excpt+0x1>
    8000b46e:	c799                	beqz	a5,8000b47c <tinst_tests_gpf+0x27e>
    8000b470:	6418                	ld	a4,8(s0)
    8000b472:	47d5                	li	a5,21
    8000b474:	00f71463          	bne	a4,a5,8000b47c <tinst_tests_gpf+0x27e>
    8000b478:	6c10106f          	j	8000d338 <tinst_tests_gpf+0x213a>
    8000b47c:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b47e:	99bf50ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    8000b482:	001007b7          	lui	a5,0x100
    8000b486:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b48a:	07b2                	slli	a5,a5,0xc
    8000b48c:	0007d783          	lhu	a5,0(a5)
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000b490:	00029617          	auipc	a2,0x29
    8000b494:	54860613          	addi	a2,a2,1352 # 800349d8 <__func__.0+0x25f0>
    8000b498:	08c00593          	li	a1,140
    8000b49c:	00027517          	auipc	a0,0x27
    8000b4a0:	24450513          	addi	a0,a0,580 # 800326e0 <__func__.0+0x2f8>
    8000b4a4:	020240ef          	jal	8002f4c4 <printf>
    8000b4a8:	00051797          	auipc	a5,0x51
    8000b4ac:	b697c783          	lbu	a5,-1175(a5) # 8005c011 <excpt+0x1>
    8000b4b0:	e399                	bnez	a5,8000b4b6 <tinst_tests_gpf+0x2b8>
    8000b4b2:	5520106f          	j	8000ca04 <tinst_tests_gpf+0x1806>
    8000b4b6:	6418                	ld	a4,8(s0)
    8000b4b8:	47d5                	li	a5,21
    8000b4ba:	00027597          	auipc	a1,0x27
    8000b4be:	1fe58593          	addi	a1,a1,510 # 800326b8 <__func__.0+0x2d0>
    8000b4c2:	00f71463          	bne	a4,a5,8000b4ca <tinst_tests_gpf+0x2cc>
    8000b4c6:	4f60106f          	j	8000c9bc <tinst_tests_gpf+0x17be>
    8000b4ca:	00027517          	auipc	a0,0x27
    8000b4ce:	22e50513          	addi	a0,a0,558 # 800326f8 <__func__.0+0x310>
    8000b4d2:	7f3230ef          	jal	8002f4c4 <printf>
    8000b4d6:	00051797          	auipc	a5,0x51
    8000b4da:	b3b7c783          	lbu	a5,-1221(a5) # 8005c011 <excpt+0x1>
    8000b4de:	c799                	beqz	a5,8000b4ec <tinst_tests_gpf+0x2ee>
    8000b4e0:	6418                	ld	a4,8(s0)
    8000b4e2:	47d5                	li	a5,21
    8000b4e4:	00f71463          	bne	a4,a5,8000b4ec <tinst_tests_gpf+0x2ee>
    8000b4e8:	1310106f          	j	8000ce18 <tinst_tests_gpf+0x1c1a>
    8000b4ec:	00027517          	auipc	a0,0x27
    8000b4f0:	21450513          	addi	a0,a0,532 # 80032700 <__func__.0+0x318>
    8000b4f4:	7d1230ef          	jal	8002f4c4 <printf>
    8000b4f8:	02900513          	li	a0,41
    8000b4fc:	4b7220ef          	jal	8002e1b2 <putchar>
    8000b500:	4529                	li	a0,10
    8000b502:	4b1220ef          	jal	8002e1b2 <putchar>
    8000b506:	cc89                	beqz	s1,8000b520 <tinst_tests_gpf+0x322>
    8000b508:	00051797          	auipc	a5,0x51
    8000b50c:	b097c783          	lbu	a5,-1271(a5) # 8005c011 <excpt+0x1>
    8000b510:	c799                	beqz	a5,8000b51e <tinst_tests_gpf+0x320>
    8000b512:	6418                	ld	a4,8(s0)
    8000b514:	47d5                	li	a5,21
    8000b516:	00f71463          	bne	a4,a5,8000b51e <tinst_tests_gpf+0x320>
    8000b51a:	6590106f          	j	8000d372 <tinst_tests_gpf+0x2174>
    8000b51e:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b520:	8f9f50ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000b524:	001007b7          	lui	a5,0x100
    8000b528:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b52c:	07b2                	slli	a5,a5,0xc
    8000b52e:	0007a783          	lw	a5,0(a5)
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000b532:	00029617          	auipc	a2,0x29
    8000b536:	4e660613          	addi	a2,a2,1254 # 80034a18 <__func__.0+0x2630>
    8000b53a:	08c00593          	li	a1,140
    8000b53e:	00027517          	auipc	a0,0x27
    8000b542:	1a250513          	addi	a0,a0,418 # 800326e0 <__func__.0+0x2f8>
    8000b546:	77f230ef          	jal	8002f4c4 <printf>
    8000b54a:	00051797          	auipc	a5,0x51
    8000b54e:	ac77c783          	lbu	a5,-1337(a5) # 8005c011 <excpt+0x1>
    8000b552:	e399                	bnez	a5,8000b558 <tinst_tests_gpf+0x35a>
    8000b554:	5040106f          	j	8000ca58 <tinst_tests_gpf+0x185a>
    8000b558:	6418                	ld	a4,8(s0)
    8000b55a:	47d5                	li	a5,21
    8000b55c:	00027597          	auipc	a1,0x27
    8000b560:	15c58593          	addi	a1,a1,348 # 800326b8 <__func__.0+0x2d0>
    8000b564:	00f71463          	bne	a4,a5,8000b56c <tinst_tests_gpf+0x36e>
    8000b568:	4a80106f          	j	8000ca10 <tinst_tests_gpf+0x1812>
    8000b56c:	00027517          	auipc	a0,0x27
    8000b570:	18c50513          	addi	a0,a0,396 # 800326f8 <__func__.0+0x310>
    8000b574:	751230ef          	jal	8002f4c4 <printf>
    8000b578:	00051797          	auipc	a5,0x51
    8000b57c:	a997c783          	lbu	a5,-1383(a5) # 8005c011 <excpt+0x1>
    8000b580:	c799                	beqz	a5,8000b58e <tinst_tests_gpf+0x390>
    8000b582:	6418                	ld	a4,8(s0)
    8000b584:	47d5                	li	a5,21
    8000b586:	00f71463          	bne	a4,a5,8000b58e <tinst_tests_gpf+0x390>
    8000b58a:	65d0106f          	j	8000d3e6 <tinst_tests_gpf+0x21e8>
    8000b58e:	00027517          	auipc	a0,0x27
    8000b592:	17250513          	addi	a0,a0,370 # 80032700 <__func__.0+0x318>
    8000b596:	72f230ef          	jal	8002f4c4 <printf>
    8000b59a:	02900513          	li	a0,41
    8000b59e:	415220ef          	jal	8002e1b2 <putchar>
    8000b5a2:	4529                	li	a0,10
    8000b5a4:	40f220ef          	jal	8002e1b2 <putchar>
    8000b5a8:	cc89                	beqz	s1,8000b5c2 <tinst_tests_gpf+0x3c4>
    8000b5aa:	00051797          	auipc	a5,0x51
    8000b5ae:	a677c783          	lbu	a5,-1433(a5) # 8005c011 <excpt+0x1>
    8000b5b2:	c799                	beqz	a5,8000b5c0 <tinst_tests_gpf+0x3c2>
    8000b5b4:	6418                	ld	a4,8(s0)
    8000b5b6:	47d5                	li	a5,21
    8000b5b8:	00f71463          	bne	a4,a5,8000b5c0 <tinst_tests_gpf+0x3c2>
    8000b5bc:	5f10106f          	j	8000d3ac <tinst_tests_gpf+0x21ae>
    8000b5c0:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b5c2:	857f50ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    8000b5c6:	001007b7          	lui	a5,0x100
    8000b5ca:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b5ce:	07b2                	slli	a5,a5,0xc
    8000b5d0:	0007e783          	lwu	a5,0(a5)
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000b5d4:	00029617          	auipc	a2,0x29
    8000b5d8:	48460613          	addi	a2,a2,1156 # 80034a58 <__func__.0+0x2670>
    8000b5dc:	08c00593          	li	a1,140
    8000b5e0:	00027517          	auipc	a0,0x27
    8000b5e4:	10050513          	addi	a0,a0,256 # 800326e0 <__func__.0+0x2f8>
    8000b5e8:	6dd230ef          	jal	8002f4c4 <printf>
    8000b5ec:	00051797          	auipc	a5,0x51
    8000b5f0:	a257c783          	lbu	a5,-1499(a5) # 8005c011 <excpt+0x1>
    8000b5f4:	e399                	bnez	a5,8000b5fa <tinst_tests_gpf+0x3fc>
    8000b5f6:	4b60106f          	j	8000caac <tinst_tests_gpf+0x18ae>
    8000b5fa:	6418                	ld	a4,8(s0)
    8000b5fc:	47d5                	li	a5,21
    8000b5fe:	00027597          	auipc	a1,0x27
    8000b602:	0ba58593          	addi	a1,a1,186 # 800326b8 <__func__.0+0x2d0>
    8000b606:	00f71463          	bne	a4,a5,8000b60e <tinst_tests_gpf+0x410>
    8000b60a:	45a0106f          	j	8000ca64 <tinst_tests_gpf+0x1866>
    8000b60e:	00027517          	auipc	a0,0x27
    8000b612:	0ea50513          	addi	a0,a0,234 # 800326f8 <__func__.0+0x310>
    8000b616:	6af230ef          	jal	8002f4c4 <printf>
    8000b61a:	00051797          	auipc	a5,0x51
    8000b61e:	9f77c783          	lbu	a5,-1545(a5) # 8005c011 <excpt+0x1>
    8000b622:	c799                	beqz	a5,8000b630 <tinst_tests_gpf+0x432>
    8000b624:	6418                	ld	a4,8(s0)
    8000b626:	47d5                	li	a5,21
    8000b628:	00f71463          	bne	a4,a5,8000b630 <tinst_tests_gpf+0x432>
    8000b62c:	65b0106f          	j	8000d486 <tinst_tests_gpf+0x2288>
    8000b630:	00027517          	auipc	a0,0x27
    8000b634:	0d050513          	addi	a0,a0,208 # 80032700 <__func__.0+0x318>
    8000b638:	68d230ef          	jal	8002f4c4 <printf>
    8000b63c:	02900513          	li	a0,41
    8000b640:	373220ef          	jal	8002e1b2 <putchar>
    8000b644:	4529                	li	a0,10
    8000b646:	36d220ef          	jal	8002e1b2 <putchar>
    8000b64a:	c889                	beqz	s1,8000b65c <tinst_tests_gpf+0x45e>
    8000b64c:	00051797          	auipc	a5,0x51
    8000b650:	9c57c783          	lbu	a5,-1595(a5) # 8005c011 <excpt+0x1>
    8000b654:	c399                	beqz	a5,8000b65a <tinst_tests_gpf+0x45c>
    8000b656:	7fe0106f          	j	8000ce54 <tinst_tests_gpf+0x1c56>
    8000b65a:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b65c:	fbcf50ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000b660:	001007b7          	lui	a5,0x100
    8000b664:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b668:	07b2                	slli	a5,a5,0xc
    8000b66a:	0007b783          	ld	a5,0(a5)
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000b66e:	00029617          	auipc	a2,0x29
    8000b672:	42a60613          	addi	a2,a2,1066 # 80034a98 <__func__.0+0x26b0>
    8000b676:	08c00593          	li	a1,140
    8000b67a:	00027517          	auipc	a0,0x27
    8000b67e:	06650513          	addi	a0,a0,102 # 800326e0 <__func__.0+0x2f8>
    8000b682:	643230ef          	jal	8002f4c4 <printf>
    8000b686:	00051797          	auipc	a5,0x51
    8000b68a:	98b7c783          	lbu	a5,-1653(a5) # 8005c011 <excpt+0x1>
    8000b68e:	e399                	bnez	a5,8000b694 <tinst_tests_gpf+0x496>
    8000b690:	4700106f          	j	8000cb00 <tinst_tests_gpf+0x1902>
    8000b694:	6418                	ld	a4,8(s0)
    8000b696:	47d5                	li	a5,21
    8000b698:	00027597          	auipc	a1,0x27
    8000b69c:	02058593          	addi	a1,a1,32 # 800326b8 <__func__.0+0x2d0>
    8000b6a0:	00f71463          	bne	a4,a5,8000b6a8 <tinst_tests_gpf+0x4aa>
    8000b6a4:	4140106f          	j	8000cab8 <tinst_tests_gpf+0x18ba>
    8000b6a8:	00027517          	auipc	a0,0x27
    8000b6ac:	05050513          	addi	a0,a0,80 # 800326f8 <__func__.0+0x310>
    8000b6b0:	615230ef          	jal	8002f4c4 <printf>
    8000b6b4:	00051797          	auipc	a5,0x51
    8000b6b8:	95d7c783          	lbu	a5,-1699(a5) # 8005c011 <excpt+0x1>
    8000b6bc:	c799                	beqz	a5,8000b6ca <tinst_tests_gpf+0x4cc>
    8000b6be:	6418                	ld	a4,8(s0)
    8000b6c0:	47d5                	li	a5,21
    8000b6c2:	00f71463          	bne	a4,a5,8000b6ca <tinst_tests_gpf+0x4cc>
    8000b6c6:	6530106f          	j	8000d518 <tinst_tests_gpf+0x231a>
    8000b6ca:	00027517          	auipc	a0,0x27
    8000b6ce:	03650513          	addi	a0,a0,54 # 80032700 <__func__.0+0x318>
    8000b6d2:	5f3230ef          	jal	8002f4c4 <printf>
    8000b6d6:	02900513          	li	a0,41
    8000b6da:	2d9220ef          	jal	8002e1b2 <putchar>
    8000b6de:	4529                	li	a0,10
    8000b6e0:	2d3220ef          	jal	8002e1b2 <putchar>
    8000b6e4:	c889                	beqz	s1,8000b6f6 <tinst_tests_gpf+0x4f8>
    8000b6e6:	00051797          	auipc	a5,0x51
    8000b6ea:	92b7c783          	lbu	a5,-1749(a5) # 8005c011 <excpt+0x1>
    8000b6ee:	c399                	beqz	a5,8000b6f4 <tinst_tests_gpf+0x4f6>
    8000b6f0:	0130106f          	j	8000cf02 <tinst_tests_gpf+0x1d04>
    8000b6f4:	4481                	li	s1,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    8000b6f6:	f22f50ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000b6fa:	001007b7          	lui	a5,0x100
    8000b6fe:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b702:	07b2                	slli	a5,a5,0xc
    8000b704:	573d                	li	a4,-17
    8000b706:	00e78023          	sb	a4,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000b70a:	00029617          	auipc	a2,0x29
    8000b70e:	3ce60613          	addi	a2,a2,974 # 80034ad8 <__func__.0+0x26f0>
    8000b712:	08c00593          	li	a1,140
    8000b716:	00027517          	auipc	a0,0x27
    8000b71a:	fca50513          	addi	a0,a0,-54 # 800326e0 <__func__.0+0x2f8>
    8000b71e:	5a7230ef          	jal	8002f4c4 <printf>
    8000b722:	00051797          	auipc	a5,0x51
    8000b726:	8ef7c783          	lbu	a5,-1809(a5) # 8005c011 <excpt+0x1>
    8000b72a:	e399                	bnez	a5,8000b730 <tinst_tests_gpf+0x532>
    8000b72c:	42e0106f          	j	8000cb5a <tinst_tests_gpf+0x195c>
    8000b730:	6418                	ld	a4,8(s0)
    8000b732:	47dd                	li	a5,23
    8000b734:	00027597          	auipc	a1,0x27
    8000b738:	f8458593          	addi	a1,a1,-124 # 800326b8 <__func__.0+0x2d0>
    8000b73c:	00f71463          	bne	a4,a5,8000b744 <tinst_tests_gpf+0x546>
    8000b740:	3cc0106f          	j	8000cb0c <tinst_tests_gpf+0x190e>
    8000b744:	00027517          	auipc	a0,0x27
    8000b748:	fb450513          	addi	a0,a0,-76 # 800326f8 <__func__.0+0x310>
    8000b74c:	579230ef          	jal	8002f4c4 <printf>
    8000b750:	00051797          	auipc	a5,0x51
    8000b754:	8c17c783          	lbu	a5,-1855(a5) # 8005c011 <excpt+0x1>
    8000b758:	c799                	beqz	a5,8000b766 <tinst_tests_gpf+0x568>
    8000b75a:	6418                	ld	a4,8(s0)
    8000b75c:	47dd                	li	a5,23
    8000b75e:	00f71463          	bne	a4,a5,8000b766 <tinst_tests_gpf+0x568>
    8000b762:	64d0106f          	j	8000d5ae <tinst_tests_gpf+0x23b0>
    8000b766:	00027517          	auipc	a0,0x27
    8000b76a:	f9a50513          	addi	a0,a0,-102 # 80032700 <__func__.0+0x318>
    8000b76e:	557230ef          	jal	8002f4c4 <printf>
    8000b772:	02900513          	li	a0,41
    8000b776:	23d220ef          	jal	8002e1b2 <putchar>
    8000b77a:	4529                	li	a0,10
    8000b77c:	237220ef          	jal	8002e1b2 <putchar>
    8000b780:	c889                	beqz	s1,8000b792 <tinst_tests_gpf+0x594>
    8000b782:	00051797          	auipc	a5,0x51
    8000b786:	88f7c783          	lbu	a5,-1905(a5) # 8005c011 <excpt+0x1>
    8000b78a:	c399                	beqz	a5,8000b790 <tinst_tests_gpf+0x592>
    8000b78c:	0250106f          	j	8000cfb0 <tinst_tests_gpf+0x1db2>
    8000b790:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b792:	e86f50ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000b796:	001007b7          	lui	a5,0x100
    8000b79a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b79e:	7771                	lui	a4,0xffffc
    8000b7a0:	07b2                	slli	a5,a5,0xc
    8000b7a2:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8000b7a6:	00e79023          	sh	a4,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000b7aa:	00029617          	auipc	a2,0x29
    8000b7ae:	36e60613          	addi	a2,a2,878 # 80034b18 <__func__.0+0x2730>
    8000b7b2:	08c00593          	li	a1,140
    8000b7b6:	00027517          	auipc	a0,0x27
    8000b7ba:	f2a50513          	addi	a0,a0,-214 # 800326e0 <__func__.0+0x2f8>
    8000b7be:	507230ef          	jal	8002f4c4 <printf>
    8000b7c2:	00051797          	auipc	a5,0x51
    8000b7c6:	84f7c783          	lbu	a5,-1969(a5) # 8005c011 <excpt+0x1>
    8000b7ca:	e399                	bnez	a5,8000b7d0 <tinst_tests_gpf+0x5d2>
    8000b7cc:	3e80106f          	j	8000cbb4 <tinst_tests_gpf+0x19b6>
    8000b7d0:	6418                	ld	a4,8(s0)
    8000b7d2:	47dd                	li	a5,23
    8000b7d4:	00027597          	auipc	a1,0x27
    8000b7d8:	ee458593          	addi	a1,a1,-284 # 800326b8 <__func__.0+0x2d0>
    8000b7dc:	00f71463          	bne	a4,a5,8000b7e4 <tinst_tests_gpf+0x5e6>
    8000b7e0:	3860106f          	j	8000cb66 <tinst_tests_gpf+0x1968>
    8000b7e4:	00027517          	auipc	a0,0x27
    8000b7e8:	f1450513          	addi	a0,a0,-236 # 800326f8 <__func__.0+0x310>
    8000b7ec:	4d9230ef          	jal	8002f4c4 <printf>
    8000b7f0:	00051797          	auipc	a5,0x51
    8000b7f4:	8217c783          	lbu	a5,-2015(a5) # 8005c011 <excpt+0x1>
    8000b7f8:	c799                	beqz	a5,8000b806 <tinst_tests_gpf+0x608>
    8000b7fa:	6418                	ld	a4,8(s0)
    8000b7fc:	47dd                	li	a5,23
    8000b7fe:	00f71463          	bne	a4,a5,8000b806 <tinst_tests_gpf+0x608>
    8000b802:	6490106f          	j	8000d64a <tinst_tests_gpf+0x244c>
    8000b806:	00027517          	auipc	a0,0x27
    8000b80a:	efa50513          	addi	a0,a0,-262 # 80032700 <__func__.0+0x318>
    8000b80e:	4b7230ef          	jal	8002f4c4 <printf>
    8000b812:	02900513          	li	a0,41
    8000b816:	19d220ef          	jal	8002e1b2 <putchar>
    8000b81a:	4529                	li	a0,10
    8000b81c:	197220ef          	jal	8002e1b2 <putchar>
    8000b820:	c889                	beqz	s1,8000b832 <tinst_tests_gpf+0x634>
    8000b822:	00050797          	auipc	a5,0x50
    8000b826:	7ef7c783          	lbu	a5,2031(a5) # 8005c011 <excpt+0x1>
    8000b82a:	c399                	beqz	a5,8000b830 <tinst_tests_gpf+0x632>
    8000b82c:	7d20106f          	j	8000cffe <tinst_tests_gpf+0x1e00>
    8000b830:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b832:	de6f50ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000b836:	001007b7          	lui	a5,0x100
    8000b83a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b83e:	deadc737          	lui	a4,0xdeadc
    8000b842:	07b2                	slli	a5,a5,0xc
    8000b844:	eef7071b          	addiw	a4,a4,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    8000b848:	00e7a023          	sw	a4,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000b84c:	00029617          	auipc	a2,0x29
    8000b850:	30c60613          	addi	a2,a2,780 # 80034b58 <__func__.0+0x2770>
    8000b854:	08c00593          	li	a1,140
    8000b858:	00027517          	auipc	a0,0x27
    8000b85c:	e8850513          	addi	a0,a0,-376 # 800326e0 <__func__.0+0x2f8>
    8000b860:	465230ef          	jal	8002f4c4 <printf>
    8000b864:	00050797          	auipc	a5,0x50
    8000b868:	7ad7c783          	lbu	a5,1965(a5) # 8005c011 <excpt+0x1>
    8000b86c:	e399                	bnez	a5,8000b872 <tinst_tests_gpf+0x674>
    8000b86e:	3a00106f          	j	8000cc0e <tinst_tests_gpf+0x1a10>
    8000b872:	6418                	ld	a4,8(s0)
    8000b874:	47dd                	li	a5,23
    8000b876:	00027597          	auipc	a1,0x27
    8000b87a:	e4258593          	addi	a1,a1,-446 # 800326b8 <__func__.0+0x2d0>
    8000b87e:	00f71463          	bne	a4,a5,8000b886 <tinst_tests_gpf+0x688>
    8000b882:	33e0106f          	j	8000cbc0 <tinst_tests_gpf+0x19c2>
    8000b886:	00027517          	auipc	a0,0x27
    8000b88a:	e7250513          	addi	a0,a0,-398 # 800326f8 <__func__.0+0x310>
    8000b88e:	437230ef          	jal	8002f4c4 <printf>
    8000b892:	00050797          	auipc	a5,0x50
    8000b896:	77f7c783          	lbu	a5,1919(a5) # 8005c011 <excpt+0x1>
    8000b89a:	c799                	beqz	a5,8000b8a8 <tinst_tests_gpf+0x6aa>
    8000b89c:	6418                	ld	a4,8(s0)
    8000b89e:	47dd                	li	a5,23
    8000b8a0:	00f71463          	bne	a4,a5,8000b8a8 <tinst_tests_gpf+0x6aa>
    8000b8a4:	6430106f          	j	8000d6e6 <tinst_tests_gpf+0x24e8>
    8000b8a8:	00027517          	auipc	a0,0x27
    8000b8ac:	e5850513          	addi	a0,a0,-424 # 80032700 <__func__.0+0x318>
    8000b8b0:	415230ef          	jal	8002f4c4 <printf>
    8000b8b4:	02900513          	li	a0,41
    8000b8b8:	0fb220ef          	jal	8002e1b2 <putchar>
    8000b8bc:	4529                	li	a0,10
    8000b8be:	0f5220ef          	jal	8002e1b2 <putchar>
    8000b8c2:	c889                	beqz	s1,8000b8d4 <tinst_tests_gpf+0x6d6>
    8000b8c4:	00050797          	auipc	a5,0x50
    8000b8c8:	74d7c783          	lbu	a5,1869(a5) # 8005c011 <excpt+0x1>
    8000b8cc:	c399                	beqz	a5,8000b8d2 <tinst_tests_gpf+0x6d4>
    8000b8ce:	77e0106f          	j	8000d04c <tinst_tests_gpf+0x1e4e>
    8000b8d2:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b8d4:	d44f50ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000b8d8:	37ab77b7          	lui	a5,0x37ab7
    8000b8dc:	00100737          	lui	a4,0x100
    8000b8e0:	078a                	slli	a5,a5,0x2
    8000b8e2:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8000b8e6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000b8ea:	0732                	slli	a4,a4,0xc
    8000b8ec:	00f73023          	sd	a5,0(a4)
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000b8f0:	00029617          	auipc	a2,0x29
    8000b8f4:	2a860613          	addi	a2,a2,680 # 80034b98 <__func__.0+0x27b0>
    8000b8f8:	08c00593          	li	a1,140
    8000b8fc:	00027517          	auipc	a0,0x27
    8000b900:	de450513          	addi	a0,a0,-540 # 800326e0 <__func__.0+0x2f8>
    8000b904:	3c1230ef          	jal	8002f4c4 <printf>
    8000b908:	00050797          	auipc	a5,0x50
    8000b90c:	7097c783          	lbu	a5,1801(a5) # 8005c011 <excpt+0x1>
    8000b910:	e399                	bnez	a5,8000b916 <tinst_tests_gpf+0x718>
    8000b912:	3560106f          	j	8000cc68 <tinst_tests_gpf+0x1a6a>
    8000b916:	6418                	ld	a4,8(s0)
    8000b918:	47dd                	li	a5,23
    8000b91a:	00027597          	auipc	a1,0x27
    8000b91e:	d9e58593          	addi	a1,a1,-610 # 800326b8 <__func__.0+0x2d0>
    8000b922:	00f71463          	bne	a4,a5,8000b92a <tinst_tests_gpf+0x72c>
    8000b926:	2f40106f          	j	8000cc1a <tinst_tests_gpf+0x1a1c>
    8000b92a:	00027517          	auipc	a0,0x27
    8000b92e:	dce50513          	addi	a0,a0,-562 # 800326f8 <__func__.0+0x310>
    8000b932:	393230ef          	jal	8002f4c4 <printf>
    8000b936:	00050797          	auipc	a5,0x50
    8000b93a:	6db7c783          	lbu	a5,1755(a5) # 8005c011 <excpt+0x1>
    8000b93e:	c799                	beqz	a5,8000b94c <tinst_tests_gpf+0x74e>
    8000b940:	6418                	ld	a4,8(s0)
    8000b942:	47dd                	li	a5,23
    8000b944:	00f71463          	bne	a4,a5,8000b94c <tinst_tests_gpf+0x74e>
    8000b948:	63b0106f          	j	8000d782 <tinst_tests_gpf+0x2584>
    8000b94c:	00027517          	auipc	a0,0x27
    8000b950:	db450513          	addi	a0,a0,-588 # 80032700 <__func__.0+0x318>
    8000b954:	371230ef          	jal	8002f4c4 <printf>
    8000b958:	02900513          	li	a0,41
    8000b95c:	057220ef          	jal	8002e1b2 <putchar>
    8000b960:	4529                	li	a0,10
    8000b962:	051220ef          	jal	8002e1b2 <putchar>
    8000b966:	c889                	beqz	s1,8000b978 <tinst_tests_gpf+0x77a>
    8000b968:	00050797          	auipc	a5,0x50
    8000b96c:	6a97c783          	lbu	a5,1705(a5) # 8005c011 <excpt+0x1>
    8000b970:	c399                	beqz	a5,8000b976 <tinst_tests_gpf+0x778>
    8000b972:	7280106f          	j	8000d09a <tinst_tests_gpf+0x1e9c>
    8000b976:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b978:	ca0f50ef          	jal	80000e18 <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000b97c:	00100537          	lui	a0,0x100
    8000b980:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000b984:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000b986:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000b988:	00029617          	auipc	a2,0x29
    8000b98c:	25060613          	addi	a2,a2,592 # 80034bd8 <__func__.0+0x27f0>
    8000b990:	08c00593          	li	a1,140
    8000b994:	00027517          	auipc	a0,0x27
    8000b998:	d4c50513          	addi	a0,a0,-692 # 800326e0 <__func__.0+0x2f8>
    8000b99c:	329230ef          	jal	8002f4c4 <printf>
    8000b9a0:	00050797          	auipc	a5,0x50
    8000b9a4:	6717c783          	lbu	a5,1649(a5) # 8005c011 <excpt+0x1>
    8000b9a8:	c799                	beqz	a5,8000b9b6 <tinst_tests_gpf+0x7b8>
    8000b9aa:	6418                	ld	a4,8(s0)
    8000b9ac:	47d5                	li	a5,21
    8000b9ae:	00f71463          	bne	a4,a5,8000b9b6 <tinst_tests_gpf+0x7b8>
    8000b9b2:	0370106f          	j	8000d1e8 <tinst_tests_gpf+0x1fea>
    8000b9b6:	00027597          	auipc	a1,0x27
    8000b9ba:	d0258593          	addi	a1,a1,-766 # 800326b8 <__func__.0+0x2d0>
    8000b9be:	00027517          	auipc	a0,0x27
    8000b9c2:	d3a50513          	addi	a0,a0,-710 # 800326f8 <__func__.0+0x310>
    8000b9c6:	2ff230ef          	jal	8002f4c4 <printf>
    8000b9ca:	00050797          	auipc	a5,0x50
    8000b9ce:	6477c783          	lbu	a5,1607(a5) # 8005c011 <excpt+0x1>
    8000b9d2:	c799                	beqz	a5,8000b9e0 <tinst_tests_gpf+0x7e2>
    8000b9d4:	6418                	ld	a4,8(s0)
    8000b9d6:	47d5                	li	a5,21
    8000b9d8:	00f71463          	bne	a4,a5,8000b9e0 <tinst_tests_gpf+0x7e2>
    8000b9dc:	6430106f          	j	8000d81e <tinst_tests_gpf+0x2620>
    8000b9e0:	00027517          	auipc	a0,0x27
    8000b9e4:	d2050513          	addi	a0,a0,-736 # 80032700 <__func__.0+0x318>
    8000b9e8:	2dd230ef          	jal	8002f4c4 <printf>
    8000b9ec:	02900513          	li	a0,41
    8000b9f0:	7c2220ef          	jal	8002e1b2 <putchar>
    8000b9f4:	4529                	li	a0,10
    8000b9f6:	7bc220ef          	jal	8002e1b2 <putchar>
    8000b9fa:	c889                	beqz	s1,8000ba0c <tinst_tests_gpf+0x80e>
    8000b9fc:	00050797          	auipc	a5,0x50
    8000ba00:	6157c783          	lbu	a5,1557(a5) # 8005c011 <excpt+0x1>
    8000ba04:	c399                	beqz	a5,8000ba0a <tinst_tests_gpf+0x80c>
    8000ba06:	6e20106f          	j	8000d0e8 <tinst_tests_gpf+0x1eea>
    8000ba0a:	4481                	li	s1,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000ba0c:	c0cf50ef          	jal	80000e18 <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000ba10:	00100537          	lui	a0,0x100
    8000ba14:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000ba18:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000ba1a:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000ba1c:	00029617          	auipc	a2,0x29
    8000ba20:	1fc60613          	addi	a2,a2,508 # 80034c18 <__func__.0+0x2830>
    return value;
    8000ba24:	892e                	mv	s2,a1
    8000ba26:	00027517          	auipc	a0,0x27
    8000ba2a:	cba50513          	addi	a0,a0,-838 # 800326e0 <__func__.0+0x2f8>
    8000ba2e:	08c00593          	li	a1,140
    8000ba32:	293230ef          	jal	8002f4c4 <printf>
    8000ba36:	00050797          	auipc	a5,0x50
    8000ba3a:	5db7c783          	lbu	a5,1499(a5) # 8005c011 <excpt+0x1>
    8000ba3e:	c799                	beqz	a5,8000ba4c <tinst_tests_gpf+0x84e>
    8000ba40:	6418                	ld	a4,8(s0)
    8000ba42:	47d5                	li	a5,21
    8000ba44:	00f71463          	bne	a4,a5,8000ba4c <tinst_tests_gpf+0x84e>
    8000ba48:	7f60106f          	j	8000d23e <tinst_tests_gpf+0x2040>
    8000ba4c:	00027597          	auipc	a1,0x27
    8000ba50:	c6c58593          	addi	a1,a1,-916 # 800326b8 <__func__.0+0x2d0>
    8000ba54:	00027517          	auipc	a0,0x27
    8000ba58:	ca450513          	addi	a0,a0,-860 # 800326f8 <__func__.0+0x310>
    8000ba5c:	269230ef          	jal	8002f4c4 <printf>
    8000ba60:	00050797          	auipc	a5,0x50
    8000ba64:	5b17c783          	lbu	a5,1457(a5) # 8005c011 <excpt+0x1>
    8000ba68:	c799                	beqz	a5,8000ba76 <tinst_tests_gpf+0x878>
    8000ba6a:	6418                	ld	a4,8(s0)
    8000ba6c:	47d5                	li	a5,21
    8000ba6e:	00f71463          	bne	a4,a5,8000ba76 <tinst_tests_gpf+0x878>
    8000ba72:	6370106f          	j	8000d8a8 <tinst_tests_gpf+0x26aa>
    8000ba76:	00027517          	auipc	a0,0x27
    8000ba7a:	c8a50513          	addi	a0,a0,-886 # 80032700 <__func__.0+0x318>
    8000ba7e:	247230ef          	jal	8002f4c4 <printf>
    8000ba82:	02900513          	li	a0,41
    8000ba86:	72c220ef          	jal	8002e1b2 <putchar>
    8000ba8a:	4529                	li	a0,10
    8000ba8c:	726220ef          	jal	8002e1b2 <putchar>
    8000ba90:	c889                	beqz	s1,8000baa2 <tinst_tests_gpf+0x8a4>
    8000ba92:	00050797          	auipc	a5,0x50
    8000ba96:	57f7c783          	lbu	a5,1407(a5) # 8005c011 <excpt+0x1>
    8000ba9a:	c399                	beqz	a5,8000baa0 <tinst_tests_gpf+0x8a2>
    8000ba9c:	68a0106f          	j	8000d126 <tinst_tests_gpf+0x1f28>
    8000baa0:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000baa2:	b76f50ef          	jal	80000e18 <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000baa6:	00100537          	lui	a0,0x100
    8000baaa:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000baae:	0532                	slli	a0,a0,0xc
    register uint64_t _value asm("a1") = value;
    8000bab0:	85ca                	mv	a1,s2
    asm volatile(
    8000bab2:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000bab4:	00029617          	auipc	a2,0x29
    8000bab8:	12460613          	addi	a2,a2,292 # 80034bd8 <__func__.0+0x27f0>
    8000babc:	08c00593          	li	a1,140
    8000bac0:	00027517          	auipc	a0,0x27
    8000bac4:	c2050513          	addi	a0,a0,-992 # 800326e0 <__func__.0+0x2f8>
    8000bac8:	1fd230ef          	jal	8002f4c4 <printf>
    8000bacc:	00050797          	auipc	a5,0x50
    8000bad0:	5457c783          	lbu	a5,1349(a5) # 8005c011 <excpt+0x1>
    8000bad4:	c799                	beqz	a5,8000bae2 <tinst_tests_gpf+0x8e4>
    8000bad6:	6418                	ld	a4,8(s0)
    8000bad8:	47dd                	li	a5,23
    8000bada:	00f71463          	bne	a4,a5,8000bae2 <tinst_tests_gpf+0x8e4>
    8000bade:	7b60106f          	j	8000d294 <tinst_tests_gpf+0x2096>
    8000bae2:	00027597          	auipc	a1,0x27
    8000bae6:	bd658593          	addi	a1,a1,-1066 # 800326b8 <__func__.0+0x2d0>
    8000baea:	00027517          	auipc	a0,0x27
    8000baee:	c0e50513          	addi	a0,a0,-1010 # 800326f8 <__func__.0+0x310>
    8000baf2:	1d3230ef          	jal	8002f4c4 <printf>
    8000baf6:	00050797          	auipc	a5,0x50
    8000bafa:	51b7c783          	lbu	a5,1307(a5) # 8005c011 <excpt+0x1>
    8000bafe:	c799                	beqz	a5,8000bb0c <tinst_tests_gpf+0x90e>
    8000bb00:	6418                	ld	a4,8(s0)
    8000bb02:	47dd                	li	a5,23
    8000bb04:	00f71463          	bne	a4,a5,8000bb0c <tinst_tests_gpf+0x90e>
    8000bb08:	62b0106f          	j	8000d932 <tinst_tests_gpf+0x2734>
    8000bb0c:	00027517          	auipc	a0,0x27
    8000bb10:	bf450513          	addi	a0,a0,-1036 # 80032700 <__func__.0+0x318>
    8000bb14:	1b1230ef          	jal	8002f4c4 <printf>
    8000bb18:	02900513          	li	a0,41
    8000bb1c:	696220ef          	jal	8002e1b2 <putchar>
    8000bb20:	4529                	li	a0,10
    8000bb22:	690220ef          	jal	8002e1b2 <putchar>
    8000bb26:	c889                	beqz	s1,8000bb38 <tinst_tests_gpf+0x93a>
    8000bb28:	00050797          	auipc	a5,0x50
    8000bb2c:	4e97c783          	lbu	a5,1257(a5) # 8005c011 <excpt+0x1>
    8000bb30:	c399                	beqz	a5,8000bb36 <tinst_tests_gpf+0x938>
    8000bb32:	6320106f          	j	8000d164 <tinst_tests_gpf+0x1f66>
    8000bb36:	4481                	li	s1,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bb38:	ae0f50ef          	jal	80000e18 <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000bb3c:	00100537          	lui	a0,0x100
    8000bb40:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    register uint64_t _value asm("a1") = value;
    8000bb44:	85ca                	mv	a1,s2
    register uint64_t _addr asm("a0") = addr;
    8000bb46:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000bb48:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000bb4a:	00029617          	auipc	a2,0x29
    8000bb4e:	10e60613          	addi	a2,a2,270 # 80034c58 <__func__.0+0x2870>
    8000bb52:	08c00593          	li	a1,140
    8000bb56:	00027517          	auipc	a0,0x27
    8000bb5a:	b8a50513          	addi	a0,a0,-1142 # 800326e0 <__func__.0+0x2f8>
    8000bb5e:	167230ef          	jal	8002f4c4 <printf>
    8000bb62:	00050797          	auipc	a5,0x50
    8000bb66:	4af7c783          	lbu	a5,1199(a5) # 8005c011 <excpt+0x1>
    8000bb6a:	c799                	beqz	a5,8000bb78 <tinst_tests_gpf+0x97a>
    8000bb6c:	6418                	ld	a4,8(s0)
    8000bb6e:	47dd                	li	a5,23
    8000bb70:	00f71463          	bne	a4,a5,8000bb78 <tinst_tests_gpf+0x97a>
    8000bb74:	7760106f          	j	8000d2ea <tinst_tests_gpf+0x20ec>
    8000bb78:	00027597          	auipc	a1,0x27
    8000bb7c:	b4058593          	addi	a1,a1,-1216 # 800326b8 <__func__.0+0x2d0>
    8000bb80:	00027517          	auipc	a0,0x27
    8000bb84:	b7850513          	addi	a0,a0,-1160 # 800326f8 <__func__.0+0x310>
    8000bb88:	13d230ef          	jal	8002f4c4 <printf>
    8000bb8c:	00050797          	auipc	a5,0x50
    8000bb90:	4857c783          	lbu	a5,1157(a5) # 8005c011 <excpt+0x1>
    8000bb94:	c799                	beqz	a5,8000bba2 <tinst_tests_gpf+0x9a4>
    8000bb96:	6418                	ld	a4,8(s0)
    8000bb98:	47dd                	li	a5,23
    8000bb9a:	00f71463          	bne	a4,a5,8000bba2 <tinst_tests_gpf+0x9a4>
    8000bb9e:	6230106f          	j	8000d9c0 <tinst_tests_gpf+0x27c2>
    8000bba2:	00027517          	auipc	a0,0x27
    8000bba6:	b5e50513          	addi	a0,a0,-1186 # 80032700 <__func__.0+0x318>
    8000bbaa:	11b230ef          	jal	8002f4c4 <printf>
    8000bbae:	02900513          	li	a0,41
    8000bbb2:	600220ef          	jal	8002e1b2 <putchar>
    8000bbb6:	4529                	li	a0,10
    8000bbb8:	5fa220ef          	jal	8002e1b2 <putchar>
    8000bbbc:	cc89                	beqz	s1,8000bbd6 <tinst_tests_gpf+0x9d8>
    8000bbbe:	00050797          	auipc	a5,0x50
    8000bbc2:	4537c783          	lbu	a5,1107(a5) # 8005c011 <excpt+0x1>
    8000bbc6:	c799                	beqz	a5,8000bbd4 <tinst_tests_gpf+0x9d6>
    8000bbc8:	6418                	ld	a4,8(s0)
    8000bbca:	47dd                	li	a5,23
    8000bbcc:	00f71463          	bne	a4,a5,8000bbd4 <tinst_tests_gpf+0x9d6>
    8000bbd0:	3760206f          	j	8000df46 <tinst_tests_gpf+0x2d48>
    8000bbd4:	4481                	li	s1,0
    asm volatile(
    8000bbd6:	00100937          	lui	s2,0x100
    8000bbda:	06590913          	addi	s2,s2,101 # 100065 <STACK_SIZE+0x65>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bbde:	a3af50ef          	jal	80000e18 <test_setup_except_function>
    8000bbe2:	0932                	slli	s2,s2,0xc
    8000bbe4:	1009292f          	lr.w	s2,(s2)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000bbe8:	00029617          	auipc	a2,0x29
    8000bbec:	0b060613          	addi	a2,a2,176 # 80034c98 <__func__.0+0x28b0>
    8000bbf0:	08c00593          	li	a1,140
    8000bbf4:	00027517          	auipc	a0,0x27
    8000bbf8:	aec50513          	addi	a0,a0,-1300 # 800326e0 <__func__.0+0x2f8>
    8000bbfc:	0c9230ef          	jal	8002f4c4 <printf>
    8000bc00:	00050797          	auipc	a5,0x50
    8000bc04:	4117c783          	lbu	a5,1041(a5) # 8005c011 <excpt+0x1>
    value = lr_w(vaddr_f);
    8000bc08:	1902                	slli	s2,s2,0x20
    8000bc0a:	02095913          	srli	s2,s2,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000bc0e:	e399                	bnez	a5,8000bc14 <tinst_tests_gpf+0xa16>
    8000bc10:	0b20106f          	j	8000ccc2 <tinst_tests_gpf+0x1ac4>
    8000bc14:	6418                	ld	a4,8(s0)
    8000bc16:	47d5                	li	a5,21
    8000bc18:	00027597          	auipc	a1,0x27
    8000bc1c:	aa058593          	addi	a1,a1,-1376 # 800326b8 <__func__.0+0x2d0>
    8000bc20:	00f71463          	bne	a4,a5,8000bc28 <tinst_tests_gpf+0xa2a>
    8000bc24:	0500106f          	j	8000cc74 <tinst_tests_gpf+0x1a76>
    8000bc28:	00027517          	auipc	a0,0x27
    8000bc2c:	ad050513          	addi	a0,a0,-1328 # 800326f8 <__func__.0+0x310>
    8000bc30:	095230ef          	jal	8002f4c4 <printf>
    8000bc34:	00050797          	auipc	a5,0x50
    8000bc38:	3dd7c783          	lbu	a5,989(a5) # 8005c011 <excpt+0x1>
    8000bc3c:	c799                	beqz	a5,8000bc4a <tinst_tests_gpf+0xa4c>
    8000bc3e:	6418                	ld	a4,8(s0)
    8000bc40:	47d5                	li	a5,21
    8000bc42:	00f71463          	bne	a4,a5,8000bc4a <tinst_tests_gpf+0xa4c>
    8000bc46:	6090106f          	j	8000da4e <tinst_tests_gpf+0x2850>
    8000bc4a:	00027517          	auipc	a0,0x27
    8000bc4e:	ab650513          	addi	a0,a0,-1354 # 80032700 <__func__.0+0x318>
    8000bc52:	073230ef          	jal	8002f4c4 <printf>
    8000bc56:	02900513          	li	a0,41
    8000bc5a:	558220ef          	jal	8002e1b2 <putchar>
    8000bc5e:	4529                	li	a0,10
    8000bc60:	552220ef          	jal	8002e1b2 <putchar>
    8000bc64:	cc89                	beqz	s1,8000bc7e <tinst_tests_gpf+0xa80>
    8000bc66:	00050797          	auipc	a5,0x50
    8000bc6a:	3ab7c783          	lbu	a5,939(a5) # 8005c011 <excpt+0x1>
    8000bc6e:	c799                	beqz	a5,8000bc7c <tinst_tests_gpf+0xa7e>
    8000bc70:	6418                	ld	a4,8(s0)
    8000bc72:	47d5                	li	a5,21
    8000bc74:	00f71463          	bne	a4,a5,8000bc7c <tinst_tests_gpf+0xa7e>
    8000bc78:	3040206f          	j	8000df7c <tinst_tests_gpf+0x2d7e>
    8000bc7c:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bc7e:	99af50ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    8000bc82:	001007b7          	lui	a5,0x100
    8000bc86:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bc8a:	07b2                	slli	a5,a5,0xc
    8000bc8c:	1927a92f          	sc.w	s2,s2,(a5)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000bc90:	00029617          	auipc	a2,0x29
    8000bc94:	04860613          	addi	a2,a2,72 # 80034cd8 <__func__.0+0x28f0>
    8000bc98:	08c00593          	li	a1,140
    8000bc9c:	00027517          	auipc	a0,0x27
    8000bca0:	a4450513          	addi	a0,a0,-1468 # 800326e0 <__func__.0+0x2f8>
    8000bca4:	021230ef          	jal	8002f4c4 <printf>
    8000bca8:	00050797          	auipc	a5,0x50
    8000bcac:	3697c783          	lbu	a5,873(a5) # 8005c011 <excpt+0x1>
    return value;
    8000bcb0:	2901                	sext.w	s2,s2
    8000bcb2:	e399                	bnez	a5,8000bcb8 <tinst_tests_gpf+0xaba>
    8000bcb4:	0680106f          	j	8000cd1c <tinst_tests_gpf+0x1b1e>
    8000bcb8:	6418                	ld	a4,8(s0)
    8000bcba:	47dd                	li	a5,23
    8000bcbc:	00027597          	auipc	a1,0x27
    8000bcc0:	9fc58593          	addi	a1,a1,-1540 # 800326b8 <__func__.0+0x2d0>
    8000bcc4:	00f71463          	bne	a4,a5,8000bccc <tinst_tests_gpf+0xace>
    8000bcc8:	0060106f          	j	8000ccce <tinst_tests_gpf+0x1ad0>
    8000bccc:	00027517          	auipc	a0,0x27
    8000bcd0:	a2c50513          	addi	a0,a0,-1492 # 800326f8 <__func__.0+0x310>
    8000bcd4:	7f0230ef          	jal	8002f4c4 <printf>
    8000bcd8:	00050797          	auipc	a5,0x50
    8000bcdc:	3397c783          	lbu	a5,825(a5) # 8005c011 <excpt+0x1>
    8000bce0:	c799                	beqz	a5,8000bcee <tinst_tests_gpf+0xaf0>
    8000bce2:	6418                	ld	a4,8(s0)
    8000bce4:	47dd                	li	a5,23
    8000bce6:	00f71463          	bne	a4,a5,8000bcee <tinst_tests_gpf+0xaf0>
    8000bcea:	4bc0106f          	j	8000d1a6 <tinst_tests_gpf+0x1fa8>
    8000bcee:	00027517          	auipc	a0,0x27
    8000bcf2:	a1250513          	addi	a0,a0,-1518 # 80032700 <__func__.0+0x318>
    8000bcf6:	7ce230ef          	jal	8002f4c4 <printf>
    8000bcfa:	02900513          	li	a0,41
    8000bcfe:	4b4220ef          	jal	8002e1b2 <putchar>
    8000bd02:	4529                	li	a0,10
    8000bd04:	4ae220ef          	jal	8002e1b2 <putchar>
    8000bd08:	cc89                	beqz	s1,8000bd22 <tinst_tests_gpf+0xb24>
    8000bd0a:	00050797          	auipc	a5,0x50
    8000bd0e:	3077c783          	lbu	a5,775(a5) # 8005c011 <excpt+0x1>
    8000bd12:	c799                	beqz	a5,8000bd20 <tinst_tests_gpf+0xb22>
    8000bd14:	6418                	ld	a4,8(s0)
    8000bd16:	47dd                	li	a5,23
    8000bd18:	00f71463          	bne	a4,a5,8000bd20 <tinst_tests_gpf+0xb22>
    8000bd1c:	2a20206f          	j	8000dfbe <tinst_tests_gpf+0x2dc0>
    8000bd20:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bd22:	8f6f50ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    8000bd26:	001007b7          	lui	a5,0x100
    8000bd2a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bd2e:	07b2                	slli	a5,a5,0xc
    8000bd30:	0927a92f          	amoswap.w	s2,s2,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000bd34:	00029617          	auipc	a2,0x29
    8000bd38:	fe460613          	addi	a2,a2,-28 # 80034d18 <__func__.0+0x2930>
    8000bd3c:	08c00593          	li	a1,140
    8000bd40:	00027517          	auipc	a0,0x27
    8000bd44:	9a050513          	addi	a0,a0,-1632 # 800326e0 <__func__.0+0x2f8>
    8000bd48:	77c230ef          	jal	8002f4c4 <printf>
    8000bd4c:	00050797          	auipc	a5,0x50
    8000bd50:	2c57c783          	lbu	a5,709(a5) # 8005c011 <excpt+0x1>
    8000bd54:	e399                	bnez	a5,8000bd5a <tinst_tests_gpf+0xb5c>
    8000bd56:	0200106f          	j	8000cd76 <tinst_tests_gpf+0x1b78>
    8000bd5a:	6418                	ld	a4,8(s0)
    8000bd5c:	47dd                	li	a5,23
    8000bd5e:	00027597          	auipc	a1,0x27
    8000bd62:	95a58593          	addi	a1,a1,-1702 # 800326b8 <__func__.0+0x2d0>
    8000bd66:	00f71463          	bne	a4,a5,8000bd6e <tinst_tests_gpf+0xb70>
    8000bd6a:	7bf0006f          	j	8000cd28 <tinst_tests_gpf+0x1b2a>
    8000bd6e:	00027517          	auipc	a0,0x27
    8000bd72:	98a50513          	addi	a0,a0,-1654 # 800326f8 <__func__.0+0x310>
    8000bd76:	74e230ef          	jal	8002f4c4 <printf>
    8000bd7a:	00050797          	auipc	a5,0x50
    8000bd7e:	2977c783          	lbu	a5,663(a5) # 8005c011 <excpt+0x1>
    8000bd82:	c799                	beqz	a5,8000bd90 <tinst_tests_gpf+0xb92>
    8000bd84:	6418                	ld	a4,8(s0)
    8000bd86:	47dd                	li	a5,23
    8000bd88:	00f71463          	bne	a4,a5,8000bd90 <tinst_tests_gpf+0xb92>
    8000bd8c:	4700106f          	j	8000d1fc <tinst_tests_gpf+0x1ffe>
    8000bd90:	00027517          	auipc	a0,0x27
    8000bd94:	97050513          	addi	a0,a0,-1680 # 80032700 <__func__.0+0x318>
    8000bd98:	72c230ef          	jal	8002f4c4 <printf>
    8000bd9c:	02900513          	li	a0,41
    8000bda0:	412220ef          	jal	8002e1b2 <putchar>
    8000bda4:	4529                	li	a0,10
    8000bda6:	40c220ef          	jal	8002e1b2 <putchar>
    8000bdaa:	cc89                	beqz	s1,8000bdc4 <tinst_tests_gpf+0xbc6>
    8000bdac:	00050797          	auipc	a5,0x50
    8000bdb0:	2657c783          	lbu	a5,613(a5) # 8005c011 <excpt+0x1>
    8000bdb4:	c799                	beqz	a5,8000bdc2 <tinst_tests_gpf+0xbc4>
    8000bdb6:	6418                	ld	a4,8(s0)
    8000bdb8:	47dd                	li	a5,23
    8000bdba:	00f71463          	bne	a4,a5,8000bdc2 <tinst_tests_gpf+0xbc4>
    8000bdbe:	2420206f          	j	8000e000 <tinst_tests_gpf+0x2e02>
    8000bdc2:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bdc4:	854f50ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8000bdc8:	001007b7          	lui	a5,0x100
    8000bdcc:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bdd0:	07b2                	slli	a5,a5,0xc
    8000bdd2:	0127a92f          	amoadd.w	s2,s2,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000bdd6:	00029617          	auipc	a2,0x29
    8000bdda:	f8a60613          	addi	a2,a2,-118 # 80034d60 <__func__.0+0x2978>
    8000bdde:	08c00593          	li	a1,140
    8000bde2:	00027517          	auipc	a0,0x27
    8000bde6:	8fe50513          	addi	a0,a0,-1794 # 800326e0 <__func__.0+0x2f8>
    8000bdea:	6da230ef          	jal	8002f4c4 <printf>
    8000bdee:	00050797          	auipc	a5,0x50
    8000bdf2:	2237c783          	lbu	a5,547(a5) # 8005c011 <excpt+0x1>
    8000bdf6:	e399                	bnez	a5,8000bdfc <tinst_tests_gpf+0xbfe>
    8000bdf8:	7d90006f          	j	8000cdd0 <tinst_tests_gpf+0x1bd2>
    8000bdfc:	6418                	ld	a4,8(s0)
    8000bdfe:	47dd                	li	a5,23
    8000be00:	00027597          	auipc	a1,0x27
    8000be04:	8b858593          	addi	a1,a1,-1864 # 800326b8 <__func__.0+0x2d0>
    8000be08:	00f71463          	bne	a4,a5,8000be10 <tinst_tests_gpf+0xc12>
    8000be0c:	7770006f          	j	8000cd82 <tinst_tests_gpf+0x1b84>
    8000be10:	00027517          	auipc	a0,0x27
    8000be14:	8e850513          	addi	a0,a0,-1816 # 800326f8 <__func__.0+0x310>
    8000be18:	6ac230ef          	jal	8002f4c4 <printf>
    8000be1c:	00050797          	auipc	a5,0x50
    8000be20:	1f57c783          	lbu	a5,501(a5) # 8005c011 <excpt+0x1>
    8000be24:	c799                	beqz	a5,8000be32 <tinst_tests_gpf+0xc34>
    8000be26:	6418                	ld	a4,8(s0)
    8000be28:	47dd                	li	a5,23
    8000be2a:	00f71463          	bne	a4,a5,8000be32 <tinst_tests_gpf+0xc34>
    8000be2e:	4240106f          	j	8000d252 <tinst_tests_gpf+0x2054>
    8000be32:	00027517          	auipc	a0,0x27
    8000be36:	8ce50513          	addi	a0,a0,-1842 # 80032700 <__func__.0+0x318>
    8000be3a:	68a230ef          	jal	8002f4c4 <printf>
    8000be3e:	02900513          	li	a0,41
    8000be42:	370220ef          	jal	8002e1b2 <putchar>
    8000be46:	4529                	li	a0,10
    8000be48:	36a220ef          	jal	8002e1b2 <putchar>
    8000be4c:	cc89                	beqz	s1,8000be66 <tinst_tests_gpf+0xc68>
    8000be4e:	00050797          	auipc	a5,0x50
    8000be52:	1c37c783          	lbu	a5,451(a5) # 8005c011 <excpt+0x1>
    8000be56:	c799                	beqz	a5,8000be64 <tinst_tests_gpf+0xc66>
    8000be58:	6418                	ld	a4,8(s0)
    8000be5a:	47dd                	li	a5,23
    8000be5c:	00f71463          	bne	a4,a5,8000be64 <tinst_tests_gpf+0xc66>
    8000be60:	20e0206f          	j	8000e06e <tinst_tests_gpf+0x2e70>
    8000be64:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000be66:	fb3f40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    8000be6a:	001007b7          	lui	a5,0x100
    8000be6e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000be72:	07b2                	slli	a5,a5,0xc
    8000be74:	2127a92f          	amoxor.w	s2,s2,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000be78:	00029617          	auipc	a2,0x29
    8000be7c:	f2860613          	addi	a2,a2,-216 # 80034da0 <__func__.0+0x29b8>
    8000be80:	08c00593          	li	a1,140
    8000be84:	00027517          	auipc	a0,0x27
    8000be88:	85c50513          	addi	a0,a0,-1956 # 800326e0 <__func__.0+0x2f8>
    8000be8c:	638230ef          	jal	8002f4c4 <printf>
    8000be90:	00050797          	auipc	a5,0x50
    8000be94:	1817c783          	lbu	a5,385(a5) # 8005c011 <excpt+0x1>
    8000be98:	c399                	beqz	a5,8000be9e <tinst_tests_gpf+0xca0>
    8000be9a:	0020106f          	j	8000ce9c <tinst_tests_gpf+0x1c9e>
    8000be9e:	00027597          	auipc	a1,0x27
    8000bea2:	81a58593          	addi	a1,a1,-2022 # 800326b8 <__func__.0+0x2d0>
    8000bea6:	00027517          	auipc	a0,0x27
    8000beaa:	85250513          	addi	a0,a0,-1966 # 800326f8 <__func__.0+0x310>
    8000beae:	616230ef          	jal	8002f4c4 <printf>
    8000beb2:	00050797          	auipc	a5,0x50
    8000beb6:	15f7c783          	lbu	a5,351(a5) # 8005c011 <excpt+0x1>
    8000beba:	c799                	beqz	a5,8000bec8 <tinst_tests_gpf+0xcca>
    8000bebc:	6418                	ld	a4,8(s0)
    8000bebe:	47dd                	li	a5,23
    8000bec0:	00f71463          	bne	a4,a5,8000bec8 <tinst_tests_gpf+0xcca>
    8000bec4:	3e40106f          	j	8000d2a8 <tinst_tests_gpf+0x20aa>
    8000bec8:	00027517          	auipc	a0,0x27
    8000becc:	83850513          	addi	a0,a0,-1992 # 80032700 <__func__.0+0x318>
    8000bed0:	5f4230ef          	jal	8002f4c4 <printf>
    8000bed4:	02900513          	li	a0,41
    8000bed8:	2da220ef          	jal	8002e1b2 <putchar>
    8000bedc:	4529                	li	a0,10
    8000bede:	2d4220ef          	jal	8002e1b2 <putchar>
    8000bee2:	cc89                	beqz	s1,8000befc <tinst_tests_gpf+0xcfe>
    8000bee4:	00050797          	auipc	a5,0x50
    8000bee8:	12d7c783          	lbu	a5,301(a5) # 8005c011 <excpt+0x1>
    8000beec:	c799                	beqz	a5,8000befa <tinst_tests_gpf+0xcfc>
    8000beee:	6418                	ld	a4,8(s0)
    8000bef0:	47dd                	li	a5,23
    8000bef2:	00f71463          	bne	a4,a5,8000befa <tinst_tests_gpf+0xcfc>
    8000bef6:	1e60206f          	j	8000e0dc <tinst_tests_gpf+0x2ede>
    8000befa:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000befc:	f1df40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    8000bf00:	001007b7          	lui	a5,0x100
    8000bf04:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bf08:	07b2                	slli	a5,a5,0xc
    8000bf0a:	6127a92f          	amoand.w	s2,s2,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000bf0e:	00029617          	auipc	a2,0x29
    8000bf12:	ed260613          	addi	a2,a2,-302 # 80034de0 <__func__.0+0x29f8>
    8000bf16:	08c00593          	li	a1,140
    8000bf1a:	00026517          	auipc	a0,0x26
    8000bf1e:	7c650513          	addi	a0,a0,1990 # 800326e0 <__func__.0+0x2f8>
    8000bf22:	5a2230ef          	jal	8002f4c4 <printf>
    8000bf26:	00050797          	auipc	a5,0x50
    8000bf2a:	0eb7c783          	lbu	a5,235(a5) # 8005c011 <excpt+0x1>
    8000bf2e:	c399                	beqz	a5,8000bf34 <tinst_tests_gpf+0xd36>
    8000bf30:	01a0106f          	j	8000cf4a <tinst_tests_gpf+0x1d4c>
    8000bf34:	00026597          	auipc	a1,0x26
    8000bf38:	78458593          	addi	a1,a1,1924 # 800326b8 <__func__.0+0x2d0>
    8000bf3c:	00026517          	auipc	a0,0x26
    8000bf40:	7bc50513          	addi	a0,a0,1980 # 800326f8 <__func__.0+0x310>
    8000bf44:	580230ef          	jal	8002f4c4 <printf>
    8000bf48:	00050797          	auipc	a5,0x50
    8000bf4c:	0c97c783          	lbu	a5,201(a5) # 8005c011 <excpt+0x1>
    8000bf50:	c799                	beqz	a5,8000bf5e <tinst_tests_gpf+0xd60>
    8000bf52:	6418                	ld	a4,8(s0)
    8000bf54:	47dd                	li	a5,23
    8000bf56:	00f71463          	bne	a4,a5,8000bf5e <tinst_tests_gpf+0xd60>
    8000bf5a:	4450106f          	j	8000db9e <tinst_tests_gpf+0x29a0>
    8000bf5e:	00026517          	auipc	a0,0x26
    8000bf62:	7a250513          	addi	a0,a0,1954 # 80032700 <__func__.0+0x318>
    8000bf66:	55e230ef          	jal	8002f4c4 <printf>
    8000bf6a:	02900513          	li	a0,41
    8000bf6e:	244220ef          	jal	8002e1b2 <putchar>
    8000bf72:	4529                	li	a0,10
    8000bf74:	23e220ef          	jal	8002e1b2 <putchar>
    8000bf78:	cc89                	beqz	s1,8000bf92 <tinst_tests_gpf+0xd94>
    8000bf7a:	00050797          	auipc	a5,0x50
    8000bf7e:	0977c783          	lbu	a5,151(a5) # 8005c011 <excpt+0x1>
    8000bf82:	c799                	beqz	a5,8000bf90 <tinst_tests_gpf+0xd92>
    8000bf84:	6418                	ld	a4,8(s0)
    8000bf86:	47dd                	li	a5,23
    8000bf88:	00f71463          	bne	a4,a5,8000bf90 <tinst_tests_gpf+0xd92>
    8000bf8c:	1920206f          	j	8000e11e <tinst_tests_gpf+0x2f20>
    8000bf90:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bf92:	e87f40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    8000bf96:	001007b7          	lui	a5,0x100
    8000bf9a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bf9e:	07b2                	slli	a5,a5,0xc
    8000bfa0:	4127a92f          	amoor.w	s2,s2,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000bfa4:	00029617          	auipc	a2,0x29
    8000bfa8:	e7c60613          	addi	a2,a2,-388 # 80034e20 <__func__.0+0x2a38>
    8000bfac:	08c00593          	li	a1,140
    8000bfb0:	00026517          	auipc	a0,0x26
    8000bfb4:	73050513          	addi	a0,a0,1840 # 800326e0 <__func__.0+0x2f8>
    8000bfb8:	50c230ef          	jal	8002f4c4 <printf>
    8000bfbc:	00050797          	auipc	a5,0x50
    8000bfc0:	0557c783          	lbu	a5,85(a5) # 8005c011 <excpt+0x1>
    8000bfc4:	e399                	bnez	a5,8000bfca <tinst_tests_gpf+0xdcc>
    8000bfc6:	4b40106f          	j	8000d47a <tinst_tests_gpf+0x227c>
    8000bfca:	6418                	ld	a4,8(s0)
    8000bfcc:	47dd                	li	a5,23
    8000bfce:	00026597          	auipc	a1,0x26
    8000bfd2:	6ea58593          	addi	a1,a1,1770 # 800326b8 <__func__.0+0x2d0>
    8000bfd6:	00f71463          	bne	a4,a5,8000bfde <tinst_tests_gpf+0xde0>
    8000bfda:	4540106f          	j	8000d42e <tinst_tests_gpf+0x2230>
    8000bfde:	00026517          	auipc	a0,0x26
    8000bfe2:	71a50513          	addi	a0,a0,1818 # 800326f8 <__func__.0+0x310>
    8000bfe6:	4de230ef          	jal	8002f4c4 <printf>
    8000bfea:	00050797          	auipc	a5,0x50
    8000bfee:	0277c783          	lbu	a5,39(a5) # 8005c011 <excpt+0x1>
    8000bff2:	c799                	beqz	a5,8000c000 <tinst_tests_gpf+0xe02>
    8000bff4:	6418                	ld	a4,8(s0)
    8000bff6:	47dd                	li	a5,23
    8000bff8:	00f71463          	bne	a4,a5,8000c000 <tinst_tests_gpf+0xe02>
    8000bffc:	3e50106f          	j	8000dbe0 <tinst_tests_gpf+0x29e2>
    8000c000:	00026517          	auipc	a0,0x26
    8000c004:	70050513          	addi	a0,a0,1792 # 80032700 <__func__.0+0x318>
    8000c008:	4bc230ef          	jal	8002f4c4 <printf>
    8000c00c:	02900513          	li	a0,41
    8000c010:	1a2220ef          	jal	8002e1b2 <putchar>
    8000c014:	4529                	li	a0,10
    8000c016:	19c220ef          	jal	8002e1b2 <putchar>
    8000c01a:	cc89                	beqz	s1,8000c034 <tinst_tests_gpf+0xe36>
    8000c01c:	00050797          	auipc	a5,0x50
    8000c020:	ff57c783          	lbu	a5,-11(a5) # 8005c011 <excpt+0x1>
    8000c024:	c799                	beqz	a5,8000c032 <tinst_tests_gpf+0xe34>
    8000c026:	6418                	ld	a4,8(s0)
    8000c028:	47dd                	li	a5,23
    8000c02a:	00f71463          	bne	a4,a5,8000c032 <tinst_tests_gpf+0xe34>
    8000c02e:	1620206f          	j	8000e190 <tinst_tests_gpf+0x2f92>
    8000c032:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c034:	de5f40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    8000c038:	001007b7          	lui	a5,0x100
    8000c03c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c040:	07b2                	slli	a5,a5,0xc
    8000c042:	8127a92f          	amomin.w	s2,s2,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000c046:	00029617          	auipc	a2,0x29
    8000c04a:	e1a60613          	addi	a2,a2,-486 # 80034e60 <__func__.0+0x2a78>
    8000c04e:	08c00593          	li	a1,140
    8000c052:	00026517          	auipc	a0,0x26
    8000c056:	68e50513          	addi	a0,a0,1678 # 800326e0 <__func__.0+0x2f8>
    8000c05a:	46a230ef          	jal	8002f4c4 <printf>
    8000c05e:	00050797          	auipc	a5,0x50
    8000c062:	fb37c783          	lbu	a5,-77(a5) # 8005c011 <excpt+0x1>
    8000c066:	e399                	bnez	a5,8000c06c <tinst_tests_gpf+0xe6e>
    8000c068:	4a40106f          	j	8000d50c <tinst_tests_gpf+0x230e>
    8000c06c:	6418                	ld	a4,8(s0)
    8000c06e:	47dd                	li	a5,23
    8000c070:	00026597          	auipc	a1,0x26
    8000c074:	64858593          	addi	a1,a1,1608 # 800326b8 <__func__.0+0x2d0>
    8000c078:	00f71463          	bne	a4,a5,8000c080 <tinst_tests_gpf+0xe82>
    8000c07c:	4440106f          	j	8000d4c0 <tinst_tests_gpf+0x22c2>
    8000c080:	00026517          	auipc	a0,0x26
    8000c084:	67850513          	addi	a0,a0,1656 # 800326f8 <__func__.0+0x310>
    8000c088:	43c230ef          	jal	8002f4c4 <printf>
    8000c08c:	00050797          	auipc	a5,0x50
    8000c090:	f857c783          	lbu	a5,-123(a5) # 8005c011 <excpt+0x1>
    8000c094:	c799                	beqz	a5,8000c0a2 <tinst_tests_gpf+0xea4>
    8000c096:	6418                	ld	a4,8(s0)
    8000c098:	47dd                	li	a5,23
    8000c09a:	00f71463          	bne	a4,a5,8000c0a2 <tinst_tests_gpf+0xea4>
    8000c09e:	3850106f          	j	8000dc22 <tinst_tests_gpf+0x2a24>
    8000c0a2:	00026517          	auipc	a0,0x26
    8000c0a6:	65e50513          	addi	a0,a0,1630 # 80032700 <__func__.0+0x318>
    8000c0aa:	41a230ef          	jal	8002f4c4 <printf>
    8000c0ae:	02900513          	li	a0,41
    8000c0b2:	100220ef          	jal	8002e1b2 <putchar>
    8000c0b6:	4529                	li	a0,10
    8000c0b8:	0fa220ef          	jal	8002e1b2 <putchar>
    8000c0bc:	cc89                	beqz	s1,8000c0d6 <tinst_tests_gpf+0xed8>
    8000c0be:	00050797          	auipc	a5,0x50
    8000c0c2:	f537c783          	lbu	a5,-173(a5) # 8005c011 <excpt+0x1>
    8000c0c6:	c799                	beqz	a5,8000c0d4 <tinst_tests_gpf+0xed6>
    8000c0c8:	6418                	ld	a4,8(s0)
    8000c0ca:	47dd                	li	a5,23
    8000c0cc:	00f71463          	bne	a4,a5,8000c0d4 <tinst_tests_gpf+0xed6>
    8000c0d0:	1320206f          	j	8000e202 <tinst_tests_gpf+0x3004>
    8000c0d4:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c0d6:	d43f40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    8000c0da:	001007b7          	lui	a5,0x100
    8000c0de:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c0e2:	07b2                	slli	a5,a5,0xc
    8000c0e4:	a127a92f          	amomax.w	s2,s2,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000c0e8:	00029617          	auipc	a2,0x29
    8000c0ec:	db860613          	addi	a2,a2,-584 # 80034ea0 <__func__.0+0x2ab8>
    8000c0f0:	08c00593          	li	a1,140
    8000c0f4:	00026517          	auipc	a0,0x26
    8000c0f8:	5ec50513          	addi	a0,a0,1516 # 800326e0 <__func__.0+0x2f8>
    8000c0fc:	3c8230ef          	jal	8002f4c4 <printf>
    8000c100:	00050797          	auipc	a5,0x50
    8000c104:	f117c783          	lbu	a5,-239(a5) # 8005c011 <excpt+0x1>
    8000c108:	e399                	bnez	a5,8000c10e <tinst_tests_gpf+0xf10>
    8000c10a:	4980106f          	j	8000d5a2 <tinst_tests_gpf+0x23a4>
    8000c10e:	6418                	ld	a4,8(s0)
    8000c110:	47dd                	li	a5,23
    8000c112:	00026597          	auipc	a1,0x26
    8000c116:	5a658593          	addi	a1,a1,1446 # 800326b8 <__func__.0+0x2d0>
    8000c11a:	00f71463          	bne	a4,a5,8000c122 <tinst_tests_gpf+0xf24>
    8000c11e:	4360106f          	j	8000d554 <tinst_tests_gpf+0x2356>
    8000c122:	00026517          	auipc	a0,0x26
    8000c126:	5d650513          	addi	a0,a0,1494 # 800326f8 <__func__.0+0x310>
    8000c12a:	39a230ef          	jal	8002f4c4 <printf>
    8000c12e:	00050797          	auipc	a5,0x50
    8000c132:	ee37c783          	lbu	a5,-285(a5) # 8005c011 <excpt+0x1>
    8000c136:	c799                	beqz	a5,8000c144 <tinst_tests_gpf+0xf46>
    8000c138:	6418                	ld	a4,8(s0)
    8000c13a:	47dd                	li	a5,23
    8000c13c:	00f71463          	bne	a4,a5,8000c144 <tinst_tests_gpf+0xf46>
    8000c140:	3250106f          	j	8000dc64 <tinst_tests_gpf+0x2a66>
    8000c144:	00026517          	auipc	a0,0x26
    8000c148:	5bc50513          	addi	a0,a0,1468 # 80032700 <__func__.0+0x318>
    8000c14c:	378230ef          	jal	8002f4c4 <printf>
    8000c150:	02900513          	li	a0,41
    8000c154:	05e220ef          	jal	8002e1b2 <putchar>
    8000c158:	4529                	li	a0,10
    8000c15a:	058220ef          	jal	8002e1b2 <putchar>
    8000c15e:	cc89                	beqz	s1,8000c178 <tinst_tests_gpf+0xf7a>
    8000c160:	00050797          	auipc	a5,0x50
    8000c164:	eb17c783          	lbu	a5,-335(a5) # 8005c011 <excpt+0x1>
    8000c168:	c799                	beqz	a5,8000c176 <tinst_tests_gpf+0xf78>
    8000c16a:	6418                	ld	a4,8(s0)
    8000c16c:	47dd                	li	a5,23
    8000c16e:	00f71463          	bne	a4,a5,8000c176 <tinst_tests_gpf+0xf78>
    8000c172:	0d20206f          	j	8000e244 <tinst_tests_gpf+0x3046>
    8000c176:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c178:	ca1f40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    8000c17c:	001007b7          	lui	a5,0x100
    8000c180:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c184:	07b2                	slli	a5,a5,0xc
    8000c186:	c127a92f          	amominu.w	s2,s2,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000c18a:	00029617          	auipc	a2,0x29
    8000c18e:	d5660613          	addi	a2,a2,-682 # 80034ee0 <__func__.0+0x2af8>
    8000c192:	08c00593          	li	a1,140
    8000c196:	00026517          	auipc	a0,0x26
    8000c19a:	54a50513          	addi	a0,a0,1354 # 800326e0 <__func__.0+0x2f8>
    8000c19e:	326230ef          	jal	8002f4c4 <printf>
    8000c1a2:	00050797          	auipc	a5,0x50
    8000c1a6:	e6f7c783          	lbu	a5,-401(a5) # 8005c011 <excpt+0x1>
    8000c1aa:	e399                	bnez	a5,8000c1b0 <tinst_tests_gpf+0xfb2>
    8000c1ac:	4920106f          	j	8000d63e <tinst_tests_gpf+0x2440>
    8000c1b0:	6418                	ld	a4,8(s0)
    8000c1b2:	47dd                	li	a5,23
    8000c1b4:	00026597          	auipc	a1,0x26
    8000c1b8:	50458593          	addi	a1,a1,1284 # 800326b8 <__func__.0+0x2d0>
    8000c1bc:	00f71463          	bne	a4,a5,8000c1c4 <tinst_tests_gpf+0xfc6>
    8000c1c0:	4300106f          	j	8000d5f0 <tinst_tests_gpf+0x23f2>
    8000c1c4:	00026517          	auipc	a0,0x26
    8000c1c8:	53450513          	addi	a0,a0,1332 # 800326f8 <__func__.0+0x310>
    8000c1cc:	2f8230ef          	jal	8002f4c4 <printf>
    8000c1d0:	00050797          	auipc	a5,0x50
    8000c1d4:	e417c783          	lbu	a5,-447(a5) # 8005c011 <excpt+0x1>
    8000c1d8:	c799                	beqz	a5,8000c1e6 <tinst_tests_gpf+0xfe8>
    8000c1da:	6418                	ld	a4,8(s0)
    8000c1dc:	47dd                	li	a5,23
    8000c1de:	00f71463          	bne	a4,a5,8000c1e6 <tinst_tests_gpf+0xfe8>
    8000c1e2:	2c50106f          	j	8000dca6 <tinst_tests_gpf+0x2aa8>
    8000c1e6:	00026517          	auipc	a0,0x26
    8000c1ea:	51a50513          	addi	a0,a0,1306 # 80032700 <__func__.0+0x318>
    8000c1ee:	2d6230ef          	jal	8002f4c4 <printf>
    8000c1f2:	02900513          	li	a0,41
    8000c1f6:	7bd210ef          	jal	8002e1b2 <putchar>
    8000c1fa:	4529                	li	a0,10
    8000c1fc:	7b7210ef          	jal	8002e1b2 <putchar>
    8000c200:	cc89                	beqz	s1,8000c21a <tinst_tests_gpf+0x101c>
    8000c202:	00050797          	auipc	a5,0x50
    8000c206:	e0f7c783          	lbu	a5,-497(a5) # 8005c011 <excpt+0x1>
    8000c20a:	c799                	beqz	a5,8000c218 <tinst_tests_gpf+0x101a>
    8000c20c:	6418                	ld	a4,8(s0)
    8000c20e:	47dd                	li	a5,23
    8000c210:	00f71463          	bne	a4,a5,8000c218 <tinst_tests_gpf+0x101a>
    8000c214:	0720206f          	j	8000e286 <tinst_tests_gpf+0x3088>
    8000c218:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c21a:	bfff40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    8000c21e:	001007b7          	lui	a5,0x100
    8000c222:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c226:	07b2                	slli	a5,a5,0xc
    8000c228:	e127a92f          	amomaxu.w	s2,s2,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000c22c:	00029617          	auipc	a2,0x29
    8000c230:	cfc60613          	addi	a2,a2,-772 # 80034f28 <__func__.0+0x2b40>
    8000c234:	08c00593          	li	a1,140
    8000c238:	00026517          	auipc	a0,0x26
    8000c23c:	4a850513          	addi	a0,a0,1192 # 800326e0 <__func__.0+0x2f8>
    8000c240:	284230ef          	jal	8002f4c4 <printf>
    8000c244:	00050797          	auipc	a5,0x50
    8000c248:	dcd7c783          	lbu	a5,-563(a5) # 8005c011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    8000c24c:	1902                	slli	s2,s2,0x20
    8000c24e:	02095913          	srli	s2,s2,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000c252:	e399                	bnez	a5,8000c258 <tinst_tests_gpf+0x105a>
    8000c254:	4860106f          	j	8000d6da <tinst_tests_gpf+0x24dc>
    8000c258:	6418                	ld	a4,8(s0)
    8000c25a:	47dd                	li	a5,23
    8000c25c:	00026597          	auipc	a1,0x26
    8000c260:	45c58593          	addi	a1,a1,1116 # 800326b8 <__func__.0+0x2d0>
    8000c264:	00f71463          	bne	a4,a5,8000c26c <tinst_tests_gpf+0x106e>
    8000c268:	4240106f          	j	8000d68c <tinst_tests_gpf+0x248e>
    8000c26c:	00026517          	auipc	a0,0x26
    8000c270:	48c50513          	addi	a0,a0,1164 # 800326f8 <__func__.0+0x310>
    8000c274:	250230ef          	jal	8002f4c4 <printf>
    8000c278:	00050797          	auipc	a5,0x50
    8000c27c:	d997c783          	lbu	a5,-615(a5) # 8005c011 <excpt+0x1>
    8000c280:	c799                	beqz	a5,8000c28e <tinst_tests_gpf+0x1090>
    8000c282:	6418                	ld	a4,8(s0)
    8000c284:	47dd                	li	a5,23
    8000c286:	00f71463          	bne	a4,a5,8000c28e <tinst_tests_gpf+0x1090>
    8000c28a:	25f0106f          	j	8000dce8 <tinst_tests_gpf+0x2aea>
    8000c28e:	00026517          	auipc	a0,0x26
    8000c292:	47250513          	addi	a0,a0,1138 # 80032700 <__func__.0+0x318>
    8000c296:	22e230ef          	jal	8002f4c4 <printf>
    8000c29a:	02900513          	li	a0,41
    8000c29e:	715210ef          	jal	8002e1b2 <putchar>
    8000c2a2:	4529                	li	a0,10
    8000c2a4:	70f210ef          	jal	8002e1b2 <putchar>
    8000c2a8:	cc89                	beqz	s1,8000c2c2 <tinst_tests_gpf+0x10c4>
    8000c2aa:	00050797          	auipc	a5,0x50
    8000c2ae:	d677c783          	lbu	a5,-665(a5) # 8005c011 <excpt+0x1>
    8000c2b2:	c799                	beqz	a5,8000c2c0 <tinst_tests_gpf+0x10c2>
    8000c2b4:	6418                	ld	a4,8(s0)
    8000c2b6:	47dd                	li	a5,23
    8000c2b8:	00f71463          	bne	a4,a5,8000c2c0 <tinst_tests_gpf+0x10c2>
    8000c2bc:	00c0206f          	j	8000e2c8 <tinst_tests_gpf+0x30ca>
    8000c2c0:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c2c2:	b57f40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    8000c2c6:	001007b7          	lui	a5,0x100
    8000c2ca:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c2ce:	07b2                	slli	a5,a5,0xc
    8000c2d0:	0927b92f          	amoswap.d	s2,s2,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000c2d4:	00029617          	auipc	a2,0x29
    8000c2d8:	c9c60613          	addi	a2,a2,-868 # 80034f70 <__func__.0+0x2b88>
    8000c2dc:	08c00593          	li	a1,140
    8000c2e0:	00026517          	auipc	a0,0x26
    8000c2e4:	40050513          	addi	a0,a0,1024 # 800326e0 <__func__.0+0x2f8>
    8000c2e8:	1dc230ef          	jal	8002f4c4 <printf>
    8000c2ec:	00050797          	auipc	a5,0x50
    8000c2f0:	d257c783          	lbu	a5,-731(a5) # 8005c011 <excpt+0x1>
    8000c2f4:	e399                	bnez	a5,8000c2fa <tinst_tests_gpf+0x10fc>
    8000c2f6:	4800106f          	j	8000d776 <tinst_tests_gpf+0x2578>
    8000c2fa:	6418                	ld	a4,8(s0)
    8000c2fc:	47dd                	li	a5,23
    8000c2fe:	00026597          	auipc	a1,0x26
    8000c302:	3ba58593          	addi	a1,a1,954 # 800326b8 <__func__.0+0x2d0>
    8000c306:	00f71463          	bne	a4,a5,8000c30e <tinst_tests_gpf+0x1110>
    8000c30a:	41e0106f          	j	8000d728 <tinst_tests_gpf+0x252a>
    8000c30e:	00026517          	auipc	a0,0x26
    8000c312:	3ea50513          	addi	a0,a0,1002 # 800326f8 <__func__.0+0x310>
    8000c316:	1ae230ef          	jal	8002f4c4 <printf>
    8000c31a:	00050797          	auipc	a5,0x50
    8000c31e:	cf77c783          	lbu	a5,-777(a5) # 8005c011 <excpt+0x1>
    8000c322:	c799                	beqz	a5,8000c330 <tinst_tests_gpf+0x1132>
    8000c324:	6418                	ld	a4,8(s0)
    8000c326:	47dd                	li	a5,23
    8000c328:	00f71463          	bne	a4,a5,8000c330 <tinst_tests_gpf+0x1132>
    8000c32c:	1ff0106f          	j	8000dd2a <tinst_tests_gpf+0x2b2c>
    8000c330:	00026517          	auipc	a0,0x26
    8000c334:	3d050513          	addi	a0,a0,976 # 80032700 <__func__.0+0x318>
    8000c338:	18c230ef          	jal	8002f4c4 <printf>
    8000c33c:	02900513          	li	a0,41
    8000c340:	673210ef          	jal	8002e1b2 <putchar>
    8000c344:	4529                	li	a0,10
    8000c346:	66d210ef          	jal	8002e1b2 <putchar>
    8000c34a:	cc89                	beqz	s1,8000c364 <tinst_tests_gpf+0x1166>
    8000c34c:	00050797          	auipc	a5,0x50
    8000c350:	cc57c783          	lbu	a5,-827(a5) # 8005c011 <excpt+0x1>
    8000c354:	c799                	beqz	a5,8000c362 <tinst_tests_gpf+0x1164>
    8000c356:	6418                	ld	a4,8(s0)
    8000c358:	47dd                	li	a5,23
    8000c35a:	00f71463          	bne	a4,a5,8000c362 <tinst_tests_gpf+0x1164>
    8000c35e:	7ad0106f          	j	8000e30a <tinst_tests_gpf+0x310c>
    8000c362:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c364:	ab5f40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8000c368:	001007b7          	lui	a5,0x100
    8000c36c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c370:	07b2                	slli	a5,a5,0xc
    8000c372:	0127b92f          	amoadd.d	s2,s2,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000c376:	00029617          	auipc	a2,0x29
    8000c37a:	c4260613          	addi	a2,a2,-958 # 80034fb8 <__func__.0+0x2bd0>
    8000c37e:	08c00593          	li	a1,140
    8000c382:	00026517          	auipc	a0,0x26
    8000c386:	35e50513          	addi	a0,a0,862 # 800326e0 <__func__.0+0x2f8>
    8000c38a:	13a230ef          	jal	8002f4c4 <printf>
    8000c38e:	00050797          	auipc	a5,0x50
    8000c392:	c837c783          	lbu	a5,-893(a5) # 8005c011 <excpt+0x1>
    8000c396:	e399                	bnez	a5,8000c39c <tinst_tests_gpf+0x119e>
    8000c398:	47a0106f          	j	8000d812 <tinst_tests_gpf+0x2614>
    8000c39c:	6418                	ld	a4,8(s0)
    8000c39e:	47dd                	li	a5,23
    8000c3a0:	00026597          	auipc	a1,0x26
    8000c3a4:	31858593          	addi	a1,a1,792 # 800326b8 <__func__.0+0x2d0>
    8000c3a8:	00f71463          	bne	a4,a5,8000c3b0 <tinst_tests_gpf+0x11b2>
    8000c3ac:	4180106f          	j	8000d7c4 <tinst_tests_gpf+0x25c6>
    8000c3b0:	00026517          	auipc	a0,0x26
    8000c3b4:	34850513          	addi	a0,a0,840 # 800326f8 <__func__.0+0x310>
    8000c3b8:	10c230ef          	jal	8002f4c4 <printf>
    8000c3bc:	00050797          	auipc	a5,0x50
    8000c3c0:	c557c783          	lbu	a5,-939(a5) # 8005c011 <excpt+0x1>
    8000c3c4:	c799                	beqz	a5,8000c3d2 <tinst_tests_gpf+0x11d4>
    8000c3c6:	6418                	ld	a4,8(s0)
    8000c3c8:	47dd                	li	a5,23
    8000c3ca:	00f71463          	bne	a4,a5,8000c3d2 <tinst_tests_gpf+0x11d4>
    8000c3ce:	19f0106f          	j	8000dd6c <tinst_tests_gpf+0x2b6e>
    8000c3d2:	00026517          	auipc	a0,0x26
    8000c3d6:	32e50513          	addi	a0,a0,814 # 80032700 <__func__.0+0x318>
    8000c3da:	0ea230ef          	jal	8002f4c4 <printf>
    8000c3de:	02900513          	li	a0,41
    8000c3e2:	5d1210ef          	jal	8002e1b2 <putchar>
    8000c3e6:	4529                	li	a0,10
    8000c3e8:	5cb210ef          	jal	8002e1b2 <putchar>
    8000c3ec:	cc89                	beqz	s1,8000c406 <tinst_tests_gpf+0x1208>
    8000c3ee:	00050797          	auipc	a5,0x50
    8000c3f2:	c237c783          	lbu	a5,-989(a5) # 8005c011 <excpt+0x1>
    8000c3f6:	c799                	beqz	a5,8000c404 <tinst_tests_gpf+0x1206>
    8000c3f8:	6418                	ld	a4,8(s0)
    8000c3fa:	47dd                	li	a5,23
    8000c3fc:	00f71463          	bne	a4,a5,8000c404 <tinst_tests_gpf+0x1206>
    8000c400:	74d0106f          	j	8000e34c <tinst_tests_gpf+0x314e>
    8000c404:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c406:	a13f40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    8000c40a:	001007b7          	lui	a5,0x100
    8000c40e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c412:	07b2                	slli	a5,a5,0xc
    8000c414:	2127b92f          	amoxor.d	s2,s2,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000c418:	00029617          	auipc	a2,0x29
    8000c41c:	be060613          	addi	a2,a2,-1056 # 80034ff8 <__func__.0+0x2c10>
    8000c420:	08c00593          	li	a1,140
    8000c424:	00026517          	auipc	a0,0x26
    8000c428:	2bc50513          	addi	a0,a0,700 # 800326e0 <__func__.0+0x2f8>
    8000c42c:	098230ef          	jal	8002f4c4 <printf>
    8000c430:	00050797          	auipc	a5,0x50
    8000c434:	be17c783          	lbu	a5,-1055(a5) # 8005c011 <excpt+0x1>
    8000c438:	e399                	bnez	a5,8000c43e <tinst_tests_gpf+0x1240>
    8000c43a:	4620106f          	j	8000d89c <tinst_tests_gpf+0x269e>
    8000c43e:	6418                	ld	a4,8(s0)
    8000c440:	47dd                	li	a5,23
    8000c442:	00026597          	auipc	a1,0x26
    8000c446:	27658593          	addi	a1,a1,630 # 800326b8 <__func__.0+0x2d0>
    8000c44a:	00f71463          	bne	a4,a5,8000c452 <tinst_tests_gpf+0x1254>
    8000c44e:	4000106f          	j	8000d84e <tinst_tests_gpf+0x2650>
    8000c452:	00026517          	auipc	a0,0x26
    8000c456:	2a650513          	addi	a0,a0,678 # 800326f8 <__func__.0+0x310>
    8000c45a:	06a230ef          	jal	8002f4c4 <printf>
    8000c45e:	00050797          	auipc	a5,0x50
    8000c462:	bb37c783          	lbu	a5,-1101(a5) # 8005c011 <excpt+0x1>
    8000c466:	c799                	beqz	a5,8000c474 <tinst_tests_gpf+0x1276>
    8000c468:	6418                	ld	a4,8(s0)
    8000c46a:	47dd                	li	a5,23
    8000c46c:	00f71463          	bne	a4,a5,8000c474 <tinst_tests_gpf+0x1276>
    8000c470:	13f0106f          	j	8000ddae <tinst_tests_gpf+0x2bb0>
    8000c474:	00026517          	auipc	a0,0x26
    8000c478:	28c50513          	addi	a0,a0,652 # 80032700 <__func__.0+0x318>
    8000c47c:	048230ef          	jal	8002f4c4 <printf>
    8000c480:	02900513          	li	a0,41
    8000c484:	52f210ef          	jal	8002e1b2 <putchar>
    8000c488:	4529                	li	a0,10
    8000c48a:	529210ef          	jal	8002e1b2 <putchar>
    8000c48e:	cc89                	beqz	s1,8000c4a8 <tinst_tests_gpf+0x12aa>
    8000c490:	00050797          	auipc	a5,0x50
    8000c494:	b817c783          	lbu	a5,-1151(a5) # 8005c011 <excpt+0x1>
    8000c498:	c799                	beqz	a5,8000c4a6 <tinst_tests_gpf+0x12a8>
    8000c49a:	6418                	ld	a4,8(s0)
    8000c49c:	47dd                	li	a5,23
    8000c49e:	00f71463          	bne	a4,a5,8000c4a6 <tinst_tests_gpf+0x12a8>
    8000c4a2:	6ed0106f          	j	8000e38e <tinst_tests_gpf+0x3190>
    8000c4a6:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c4a8:	971f40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8000c4ac:	001007b7          	lui	a5,0x100
    8000c4b0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c4b4:	07b2                	slli	a5,a5,0xc
    8000c4b6:	6127b92f          	amoand.d	s2,s2,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000c4ba:	00029617          	auipc	a2,0x29
    8000c4be:	b7e60613          	addi	a2,a2,-1154 # 80035038 <__func__.0+0x2c50>
    8000c4c2:	08c00593          	li	a1,140
    8000c4c6:	00026517          	auipc	a0,0x26
    8000c4ca:	21a50513          	addi	a0,a0,538 # 800326e0 <__func__.0+0x2f8>
    8000c4ce:	7f7220ef          	jal	8002f4c4 <printf>
    8000c4d2:	00050797          	auipc	a5,0x50
    8000c4d6:	b3f7c783          	lbu	a5,-1217(a5) # 8005c011 <excpt+0x1>
    8000c4da:	e399                	bnez	a5,8000c4e0 <tinst_tests_gpf+0x12e2>
    8000c4dc:	44a0106f          	j	8000d926 <tinst_tests_gpf+0x2728>
    8000c4e0:	6418                	ld	a4,8(s0)
    8000c4e2:	47dd                	li	a5,23
    8000c4e4:	00026597          	auipc	a1,0x26
    8000c4e8:	1d458593          	addi	a1,a1,468 # 800326b8 <__func__.0+0x2d0>
    8000c4ec:	00f71463          	bne	a4,a5,8000c4f4 <tinst_tests_gpf+0x12f6>
    8000c4f0:	3e80106f          	j	8000d8d8 <tinst_tests_gpf+0x26da>
    8000c4f4:	00026517          	auipc	a0,0x26
    8000c4f8:	20450513          	addi	a0,a0,516 # 800326f8 <__func__.0+0x310>
    8000c4fc:	7c9220ef          	jal	8002f4c4 <printf>
    8000c500:	00050797          	auipc	a5,0x50
    8000c504:	b117c783          	lbu	a5,-1263(a5) # 8005c011 <excpt+0x1>
    8000c508:	c799                	beqz	a5,8000c516 <tinst_tests_gpf+0x1318>
    8000c50a:	6418                	ld	a4,8(s0)
    8000c50c:	47dd                	li	a5,23
    8000c50e:	00f71463          	bne	a4,a5,8000c516 <tinst_tests_gpf+0x1318>
    8000c512:	0df0106f          	j	8000ddf0 <tinst_tests_gpf+0x2bf2>
    8000c516:	00026517          	auipc	a0,0x26
    8000c51a:	1ea50513          	addi	a0,a0,490 # 80032700 <__func__.0+0x318>
    8000c51e:	7a7220ef          	jal	8002f4c4 <printf>
    8000c522:	02900513          	li	a0,41
    8000c526:	48d210ef          	jal	8002e1b2 <putchar>
    8000c52a:	4529                	li	a0,10
    8000c52c:	487210ef          	jal	8002e1b2 <putchar>
    8000c530:	cc89                	beqz	s1,8000c54a <tinst_tests_gpf+0x134c>
    8000c532:	00050797          	auipc	a5,0x50
    8000c536:	adf7c783          	lbu	a5,-1313(a5) # 8005c011 <excpt+0x1>
    8000c53a:	c799                	beqz	a5,8000c548 <tinst_tests_gpf+0x134a>
    8000c53c:	6418                	ld	a4,8(s0)
    8000c53e:	47dd                	li	a5,23
    8000c540:	00f71463          	bne	a4,a5,8000c548 <tinst_tests_gpf+0x134a>
    8000c544:	68d0106f          	j	8000e3d0 <tinst_tests_gpf+0x31d2>
    8000c548:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c54a:	8cff40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8000c54e:	001007b7          	lui	a5,0x100
    8000c552:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c556:	07b2                	slli	a5,a5,0xc
    8000c558:	4127b92f          	amoor.d	s2,s2,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000c55c:	00029617          	auipc	a2,0x29
    8000c560:	b1c60613          	addi	a2,a2,-1252 # 80035078 <__func__.0+0x2c90>
    8000c564:	08c00593          	li	a1,140
    8000c568:	00026517          	auipc	a0,0x26
    8000c56c:	17850513          	addi	a0,a0,376 # 800326e0 <__func__.0+0x2f8>
    8000c570:	755220ef          	jal	8002f4c4 <printf>
    8000c574:	00050797          	auipc	a5,0x50
    8000c578:	a9d7c783          	lbu	a5,-1379(a5) # 8005c011 <excpt+0x1>
    8000c57c:	e399                	bnez	a5,8000c582 <tinst_tests_gpf+0x1384>
    8000c57e:	4360106f          	j	8000d9b4 <tinst_tests_gpf+0x27b6>
    8000c582:	6418                	ld	a4,8(s0)
    8000c584:	47dd                	li	a5,23
    8000c586:	00026597          	auipc	a1,0x26
    8000c58a:	13258593          	addi	a1,a1,306 # 800326b8 <__func__.0+0x2d0>
    8000c58e:	00f71463          	bne	a4,a5,8000c596 <tinst_tests_gpf+0x1398>
    8000c592:	3d40106f          	j	8000d966 <tinst_tests_gpf+0x2768>
    8000c596:	00026517          	auipc	a0,0x26
    8000c59a:	16250513          	addi	a0,a0,354 # 800326f8 <__func__.0+0x310>
    8000c59e:	727220ef          	jal	8002f4c4 <printf>
    8000c5a2:	00050797          	auipc	a5,0x50
    8000c5a6:	a6f7c783          	lbu	a5,-1425(a5) # 8005c011 <excpt+0x1>
    8000c5aa:	c799                	beqz	a5,8000c5b8 <tinst_tests_gpf+0x13ba>
    8000c5ac:	6418                	ld	a4,8(s0)
    8000c5ae:	47dd                	li	a5,23
    8000c5b0:	00f71463          	bne	a4,a5,8000c5b8 <tinst_tests_gpf+0x13ba>
    8000c5b4:	6a50106f          	j	8000e458 <tinst_tests_gpf+0x325a>
    8000c5b8:	00026517          	auipc	a0,0x26
    8000c5bc:	14850513          	addi	a0,a0,328 # 80032700 <__func__.0+0x318>
    8000c5c0:	705220ef          	jal	8002f4c4 <printf>
    8000c5c4:	02900513          	li	a0,41
    8000c5c8:	3eb210ef          	jal	8002e1b2 <putchar>
    8000c5cc:	4529                	li	a0,10
    8000c5ce:	3e5210ef          	jal	8002e1b2 <putchar>
    8000c5d2:	cc89                	beqz	s1,8000c5ec <tinst_tests_gpf+0x13ee>
    8000c5d4:	00050797          	auipc	a5,0x50
    8000c5d8:	a3d7c783          	lbu	a5,-1475(a5) # 8005c011 <excpt+0x1>
    8000c5dc:	c799                	beqz	a5,8000c5ea <tinst_tests_gpf+0x13ec>
    8000c5de:	6418                	ld	a4,8(s0)
    8000c5e0:	47dd                	li	a5,23
    8000c5e2:	00f71463          	bne	a4,a5,8000c5ea <tinst_tests_gpf+0x13ec>
    8000c5e6:	62f0106f          	j	8000e414 <tinst_tests_gpf+0x3216>
    8000c5ea:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c5ec:	82df40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8000c5f0:	001007b7          	lui	a5,0x100
    8000c5f4:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c5f8:	07b2                	slli	a5,a5,0xc
    8000c5fa:	8127b92f          	amomin.d	s2,s2,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000c5fe:	00029617          	auipc	a2,0x29
    8000c602:	aba60613          	addi	a2,a2,-1350 # 800350b8 <__func__.0+0x2cd0>
    8000c606:	08c00593          	li	a1,140
    8000c60a:	00026517          	auipc	a0,0x26
    8000c60e:	0d650513          	addi	a0,a0,214 # 800326e0 <__func__.0+0x2f8>
    8000c612:	6b3220ef          	jal	8002f4c4 <printf>
    8000c616:	00050797          	auipc	a5,0x50
    8000c61a:	9fb7c783          	lbu	a5,-1541(a5) # 8005c011 <excpt+0x1>
    8000c61e:	e399                	bnez	a5,8000c624 <tinst_tests_gpf+0x1426>
    8000c620:	4220106f          	j	8000da42 <tinst_tests_gpf+0x2844>
    8000c624:	6418                	ld	a4,8(s0)
    8000c626:	47dd                	li	a5,23
    8000c628:	00026597          	auipc	a1,0x26
    8000c62c:	09058593          	addi	a1,a1,144 # 800326b8 <__func__.0+0x2d0>
    8000c630:	00f71463          	bne	a4,a5,8000c638 <tinst_tests_gpf+0x143a>
    8000c634:	3c00106f          	j	8000d9f4 <tinst_tests_gpf+0x27f6>
    8000c638:	00026517          	auipc	a0,0x26
    8000c63c:	0c050513          	addi	a0,a0,192 # 800326f8 <__func__.0+0x310>
    8000c640:	685220ef          	jal	8002f4c4 <printf>
    8000c644:	00050797          	auipc	a5,0x50
    8000c648:	9cd7c783          	lbu	a5,-1587(a5) # 8005c011 <excpt+0x1>
    8000c64c:	c799                	beqz	a5,8000c65a <tinst_tests_gpf+0x145c>
    8000c64e:	6418                	ld	a4,8(s0)
    8000c650:	47dd                	li	a5,23
    8000c652:	00f71463          	bne	a4,a5,8000c65a <tinst_tests_gpf+0x145c>
    8000c656:	6470106f          	j	8000e49c <tinst_tests_gpf+0x329e>
    8000c65a:	00026517          	auipc	a0,0x26
    8000c65e:	0a650513          	addi	a0,a0,166 # 80032700 <__func__.0+0x318>
    8000c662:	663220ef          	jal	8002f4c4 <printf>
    8000c666:	02900513          	li	a0,41
    8000c66a:	349210ef          	jal	8002e1b2 <putchar>
    8000c66e:	4529                	li	a0,10
    8000c670:	343210ef          	jal	8002e1b2 <putchar>
    8000c674:	c889                	beqz	s1,8000c686 <tinst_tests_gpf+0x1488>
    8000c676:	00050797          	auipc	a5,0x50
    8000c67a:	99b7c783          	lbu	a5,-1637(a5) # 8005c011 <excpt+0x1>
    8000c67e:	c399                	beqz	a5,8000c684 <tinst_tests_gpf+0x1486>
    8000c680:	7b20106f          	j	8000de32 <tinst_tests_gpf+0x2c34>
    8000c684:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c686:	f92f40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8000c68a:	001007b7          	lui	a5,0x100
    8000c68e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c692:	07b2                	slli	a5,a5,0xc
    8000c694:	a127b92f          	amomax.d	s2,s2,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000c698:	00029617          	auipc	a2,0x29
    8000c69c:	a6060613          	addi	a2,a2,-1440 # 800350f8 <__func__.0+0x2d10>
    8000c6a0:	08c00593          	li	a1,140
    8000c6a4:	00026517          	auipc	a0,0x26
    8000c6a8:	03c50513          	addi	a0,a0,60 # 800326e0 <__func__.0+0x2f8>
    8000c6ac:	619220ef          	jal	8002f4c4 <printf>
    8000c6b0:	00050797          	auipc	a5,0x50
    8000c6b4:	9617c783          	lbu	a5,-1695(a5) # 8005c011 <excpt+0x1>
    8000c6b8:	e399                	bnez	a5,8000c6be <tinst_tests_gpf+0x14c0>
    8000c6ba:	4240106f          	j	8000dade <tinst_tests_gpf+0x28e0>
    8000c6be:	6418                	ld	a4,8(s0)
    8000c6c0:	47dd                	li	a5,23
    8000c6c2:	00026597          	auipc	a1,0x26
    8000c6c6:	ff658593          	addi	a1,a1,-10 # 800326b8 <__func__.0+0x2d0>
    8000c6ca:	00f71463          	bne	a4,a5,8000c6d2 <tinst_tests_gpf+0x14d4>
    8000c6ce:	3c20106f          	j	8000da90 <tinst_tests_gpf+0x2892>
    8000c6d2:	00026517          	auipc	a0,0x26
    8000c6d6:	02650513          	addi	a0,a0,38 # 800326f8 <__func__.0+0x310>
    8000c6da:	5eb220ef          	jal	8002f4c4 <printf>
    8000c6de:	00050797          	auipc	a5,0x50
    8000c6e2:	9337c783          	lbu	a5,-1741(a5) # 8005c011 <excpt+0x1>
    8000c6e6:	c799                	beqz	a5,8000c6f4 <tinst_tests_gpf+0x14f6>
    8000c6e8:	6418                	ld	a4,8(s0)
    8000c6ea:	47dd                	li	a5,23
    8000c6ec:	00f71463          	bne	a4,a5,8000c6f4 <tinst_tests_gpf+0x14f6>
    8000c6f0:	5f10106f          	j	8000e4e0 <tinst_tests_gpf+0x32e2>
    8000c6f4:	00026517          	auipc	a0,0x26
    8000c6f8:	00c50513          	addi	a0,a0,12 # 80032700 <__func__.0+0x318>
    8000c6fc:	5c9220ef          	jal	8002f4c4 <printf>
    8000c700:	02900513          	li	a0,41
    8000c704:	2af210ef          	jal	8002e1b2 <putchar>
    8000c708:	4529                	li	a0,10
    8000c70a:	2a9210ef          	jal	8002e1b2 <putchar>
    8000c70e:	c889                	beqz	s1,8000c720 <tinst_tests_gpf+0x1522>
    8000c710:	00050797          	auipc	a5,0x50
    8000c714:	9017c783          	lbu	a5,-1791(a5) # 8005c011 <excpt+0x1>
    8000c718:	c399                	beqz	a5,8000c71e <tinst_tests_gpf+0x1520>
    8000c71a:	7660106f          	j	8000de80 <tinst_tests_gpf+0x2c82>
    8000c71e:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c720:	ef8f40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8000c724:	001007b7          	lui	a5,0x100
    8000c728:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c72c:	07b2                	slli	a5,a5,0xc
    8000c72e:	c127b92f          	amominu.d	s2,s2,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000c732:	00029617          	auipc	a2,0x29
    8000c736:	a0660613          	addi	a2,a2,-1530 # 80035138 <__func__.0+0x2d50>
    8000c73a:	08c00593          	li	a1,140
    8000c73e:	00026517          	auipc	a0,0x26
    8000c742:	fa250513          	addi	a0,a0,-94 # 800326e0 <__func__.0+0x2f8>
    8000c746:	57f220ef          	jal	8002f4c4 <printf>
    8000c74a:	00050797          	auipc	a5,0x50
    8000c74e:	8c77c783          	lbu	a5,-1849(a5) # 8005c011 <excpt+0x1>
    8000c752:	e399                	bnez	a5,8000c758 <tinst_tests_gpf+0x155a>
    8000c754:	3e40106f          	j	8000db38 <tinst_tests_gpf+0x293a>
    8000c758:	6418                	ld	a4,8(s0)
    8000c75a:	47dd                	li	a5,23
    8000c75c:	00026597          	auipc	a1,0x26
    8000c760:	f5c58593          	addi	a1,a1,-164 # 800326b8 <__func__.0+0x2d0>
    8000c764:	00f71463          	bne	a4,a5,8000c76c <tinst_tests_gpf+0x156e>
    8000c768:	3820106f          	j	8000daea <tinst_tests_gpf+0x28ec>
    8000c76c:	00026517          	auipc	a0,0x26
    8000c770:	f8c50513          	addi	a0,a0,-116 # 800326f8 <__func__.0+0x310>
    8000c774:	551220ef          	jal	8002f4c4 <printf>
    8000c778:	00050797          	auipc	a5,0x50
    8000c77c:	8997c783          	lbu	a5,-1895(a5) # 8005c011 <excpt+0x1>
    8000c780:	c799                	beqz	a5,8000c78e <tinst_tests_gpf+0x1590>
    8000c782:	6418                	ld	a4,8(s0)
    8000c784:	47dd                	li	a5,23
    8000c786:	00f71463          	bne	a4,a5,8000c78e <tinst_tests_gpf+0x1590>
    8000c78a:	59b0106f          	j	8000e524 <tinst_tests_gpf+0x3326>
    8000c78e:	00026517          	auipc	a0,0x26
    8000c792:	f7250513          	addi	a0,a0,-142 # 80032700 <__func__.0+0x318>
    8000c796:	52f220ef          	jal	8002f4c4 <printf>
    8000c79a:	02900513          	li	a0,41
    8000c79e:	215210ef          	jal	8002e1b2 <putchar>
    8000c7a2:	4529                	li	a0,10
    8000c7a4:	20f210ef          	jal	8002e1b2 <putchar>
    8000c7a8:	c889                	beqz	s1,8000c7ba <tinst_tests_gpf+0x15bc>
    8000c7aa:	00050797          	auipc	a5,0x50
    8000c7ae:	8677c783          	lbu	a5,-1945(a5) # 8005c011 <excpt+0x1>
    8000c7b2:	c399                	beqz	a5,8000c7b8 <tinst_tests_gpf+0x15ba>
    8000c7b4:	71a0106f          	j	8000dece <tinst_tests_gpf+0x2cd0>
    8000c7b8:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c7ba:	e5ef40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    8000c7be:	001007b7          	lui	a5,0x100
    8000c7c2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c7c6:	07b2                	slli	a5,a5,0xc
    8000c7c8:	e127b92f          	amomaxu.d	s2,s2,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c7cc:	00029617          	auipc	a2,0x29
    8000c7d0:	9b460613          	addi	a2,a2,-1612 # 80035180 <__func__.0+0x2d98>
    8000c7d4:	08c00593          	li	a1,140
    8000c7d8:	00026517          	auipc	a0,0x26
    8000c7dc:	f0850513          	addi	a0,a0,-248 # 800326e0 <__func__.0+0x2f8>
    8000c7e0:	4e5220ef          	jal	8002f4c4 <printf>
    8000c7e4:	00050797          	auipc	a5,0x50
    8000c7e8:	82d7c783          	lbu	a5,-2003(a5) # 8005c011 <excpt+0x1>
    8000c7ec:	e399                	bnez	a5,8000c7f2 <tinst_tests_gpf+0x15f4>
    8000c7ee:	3a40106f          	j	8000db92 <tinst_tests_gpf+0x2994>
    8000c7f2:	6418                	ld	a4,8(s0)
    8000c7f4:	47dd                	li	a5,23
    8000c7f6:	00026597          	auipc	a1,0x26
    8000c7fa:	ec258593          	addi	a1,a1,-318 # 800326b8 <__func__.0+0x2d0>
    8000c7fe:	00f71463          	bne	a4,a5,8000c806 <tinst_tests_gpf+0x1608>
    8000c802:	3420106f          	j	8000db44 <tinst_tests_gpf+0x2946>
    8000c806:	00026517          	auipc	a0,0x26
    8000c80a:	ef250513          	addi	a0,a0,-270 # 800326f8 <__func__.0+0x310>
    8000c80e:	4b7220ef          	jal	8002f4c4 <printf>
    8000c812:	0004f797          	auipc	a5,0x4f
    8000c816:	7ff7c783          	lbu	a5,2047(a5) # 8005c011 <excpt+0x1>
    8000c81a:	c799                	beqz	a5,8000c828 <tinst_tests_gpf+0x162a>
    8000c81c:	6418                	ld	a4,8(s0)
    8000c81e:	47dd                	li	a5,23
    8000c820:	00f71463          	bne	a4,a5,8000c828 <tinst_tests_gpf+0x162a>
    8000c824:	5450106f          	j	8000e568 <tinst_tests_gpf+0x336a>
    8000c828:	00026517          	auipc	a0,0x26
    8000c82c:	ed850513          	addi	a0,a0,-296 # 80032700 <__func__.0+0x318>
    8000c830:	495220ef          	jal	8002f4c4 <printf>
    8000c834:	02900513          	li	a0,41
    8000c838:	17b210ef          	jal	8002e1b2 <putchar>
    8000c83c:	4529                	li	a0,10
    8000c83e:	175210ef          	jal	8002e1b2 <putchar>
    8000c842:	cca9                	beqz	s1,8000c89c <tinst_tests_gpf+0x169e>
    8000c844:	0004f497          	auipc	s1,0x4f
    8000c848:	7cd4c483          	lbu	s1,1997(s1) # 8005c011 <excpt+0x1>
    8000c84c:	c8a9                	beqz	s1,8000c89e <tinst_tests_gpf+0x16a0>
    8000c84e:	6418                	ld	a4,8(s0)
    8000c850:	47dd                	li	a5,23
    8000c852:	04f71563          	bne	a4,a5,8000c89c <tinst_tests_gpf+0x169e>
    8000c856:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    8000c858:	00026597          	auipc	a1,0x26
    8000c85c:	e5058593          	addi	a1,a1,-432 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c860:	c3b9                	beqz	a5,8000c8a6 <tinst_tests_gpf+0x16a8>
    8000c862:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c864:	0016f713          	andi	a4,a3,1
    8000c868:	380718e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c86c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c870:	460d                	li	a2,3
    8000c872:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c876:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c878:	00c59763          	bne	a1,a2,8000c886 <tinst_tests_gpf+0x1688>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c87c:	0026d683          	lhu	a3,2(a3)
    8000c880:	0106969b          	slliw	a3,a3,0x10
    8000c884:	8f55                	or	a4,a4,a3
    8000c886:	1ffe16b7          	lui	a3,0x1ffe1
    8000c88a:	068e                	slli	a3,a3,0x3
    8000c88c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000c88e:	8f75                	and	a4,a4,a3
    TEST_END();
    8000c890:	00026597          	auipc	a1,0x26
    8000c894:	e1858593          	addi	a1,a1,-488 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c898:	00e78763          	beq	a5,a4,8000c8a6 <tinst_tests_gpf+0x16a8>
    8000c89c:	4481                	li	s1,0
    TEST_END();
    8000c89e:	00026597          	auipc	a1,0x26
    8000c8a2:	e1a58593          	addi	a1,a1,-486 # 800326b8 <__func__.0+0x2d0>
    8000c8a6:	00026517          	auipc	a0,0x26
    8000c8aa:	eba50513          	addi	a0,a0,-326 # 80032760 <__func__.0+0x378>
    8000c8ae:	417220ef          	jal	8002f4c4 <printf>
    8000c8b2:	4511                	li	a0,4
    8000c8b4:	e60f40ef          	jal	80000f14 <goto_priv>
    8000c8b8:	ebff40ef          	jal	80001776 <reset_state>
}
    8000c8bc:	70a2                	ld	ra,40(sp)
    8000c8be:	7402                	ld	s0,32(sp)
    8000c8c0:	6942                	ld	s2,16(sp)
    8000c8c2:	69a2                	ld	s3,8(sp)
    8000c8c4:	8526                	mv	a0,s1
    8000c8c6:	64e2                	ld	s1,24(sp)
    8000c8c8:	6145                	addi	sp,sp,48
    8000c8ca:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000c8cc:	701c                	ld	a5,32(s0)
    8000c8ce:	00026597          	auipc	a1,0x26
    8000c8d2:	dda58593          	addi	a1,a1,-550 # 800326a8 <__func__.0+0x2c0>
    8000c8d6:	e399                	bnez	a5,8000c8dc <tinst_tests_gpf+0x16de>
    8000c8d8:	abbfe06f          	j	8000b392 <tinst_tests_gpf+0x194>
    8000c8dc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c8de:	0016f713          	andi	a4,a3,1
    8000c8e2:	30071be3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c8e6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c8ea:	460d                	li	a2,3
    8000c8ec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c8f0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c8f2:	00c59763          	bne	a1,a2,8000c900 <tinst_tests_gpf+0x1702>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c8f6:	0026d683          	lhu	a3,2(a3)
    8000c8fa:	0106969b          	slliw	a3,a3,0x10
    8000c8fe:	8f55                	or	a4,a4,a3
    8000c900:	1746                	slli	a4,a4,0x31
    8000c902:	9345                	srli	a4,a4,0x31
    8000c904:	00026597          	auipc	a1,0x26
    8000c908:	da458593          	addi	a1,a1,-604 # 800326a8 <__func__.0+0x2c0>
    8000c90c:	00e79463          	bne	a5,a4,8000c914 <tinst_tests_gpf+0x1716>
    8000c910:	a83fe06f          	j	8000b392 <tinst_tests_gpf+0x194>
    8000c914:	00026597          	auipc	a1,0x26
    8000c918:	da458593          	addi	a1,a1,-604 # 800326b8 <__func__.0+0x2d0>
    8000c91c:	a77fe06f          	j	8000b392 <tinst_tests_gpf+0x194>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000c920:	6418                	ld	a4,8(s0)
    8000c922:	47d5                	li	a5,21
    8000c924:	00026597          	auipc	a1,0x26
    8000c928:	d9458593          	addi	a1,a1,-620 # 800326b8 <__func__.0+0x2d0>
    8000c92c:	00f70463          	beq	a4,a5,8000c934 <tinst_tests_gpf+0x1736>
    8000c930:	af9fe06f          	j	8000b428 <tinst_tests_gpf+0x22a>
    8000c934:	701c                	ld	a5,32(s0)
    8000c936:	00026597          	auipc	a1,0x26
    8000c93a:	d7258593          	addi	a1,a1,-654 # 800326a8 <__func__.0+0x2c0>
    8000c93e:	e399                	bnez	a5,8000c944 <tinst_tests_gpf+0x1746>
    8000c940:	ae9fe06f          	j	8000b428 <tinst_tests_gpf+0x22a>
    8000c944:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c946:	0016f713          	andi	a4,a3,1
    8000c94a:	2a0717e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c94e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c952:	460d                	li	a2,3
    8000c954:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c958:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c95a:	00c59763          	bne	a1,a2,8000c968 <tinst_tests_gpf+0x176a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c95e:	0026d683          	lhu	a3,2(a3)
    8000c962:	0106969b          	slliw	a3,a3,0x10
    8000c966:	8f55                	or	a4,a4,a3
    8000c968:	1746                	slli	a4,a4,0x31
    8000c96a:	9345                	srli	a4,a4,0x31
    8000c96c:	00026597          	auipc	a1,0x26
    8000c970:	d3c58593          	addi	a1,a1,-708 # 800326a8 <__func__.0+0x2c0>
    8000c974:	00e78463          	beq	a5,a4,8000c97c <tinst_tests_gpf+0x177e>
    8000c978:	aa9fe06f          	j	8000b420 <tinst_tests_gpf+0x222>
    8000c97c:	aadfe06f          	j	8000b428 <tinst_tests_gpf+0x22a>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000c980:	701c                	ld	a5,32(s0)
    8000c982:	e399                	bnez	a5,8000c988 <tinst_tests_gpf+0x178a>
    8000c984:	a45fe06f          	j	8000b3c8 <tinst_tests_gpf+0x1ca>
    8000c988:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c98a:	0016f713          	andi	a4,a3,1
    8000c98e:	260715e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c992:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c996:	460d                	li	a2,3
    8000c998:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c99c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c99e:	00c59763          	bne	a1,a2,8000c9ac <tinst_tests_gpf+0x17ae>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c9a2:	0026d683          	lhu	a3,2(a3)
    8000c9a6:	0106969b          	slliw	a3,a3,0x10
    8000c9aa:	8f55                	or	a4,a4,a3
    8000c9ac:	1746                	slli	a4,a4,0x31
    8000c9ae:	9345                	srli	a4,a4,0x31
    8000c9b0:	00e78463          	beq	a5,a4,8000c9b8 <tinst_tests_gpf+0x17ba>
    8000c9b4:	a01fe06f          	j	8000b3b4 <tinst_tests_gpf+0x1b6>
    8000c9b8:	a11fe06f          	j	8000b3c8 <tinst_tests_gpf+0x1ca>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000c9bc:	701c                	ld	a5,32(s0)
    8000c9be:	00026597          	auipc	a1,0x26
    8000c9c2:	cea58593          	addi	a1,a1,-790 # 800326a8 <__func__.0+0x2c0>
    8000c9c6:	e399                	bnez	a5,8000c9cc <tinst_tests_gpf+0x17ce>
    8000c9c8:	b03fe06f          	j	8000b4ca <tinst_tests_gpf+0x2cc>
    8000c9cc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c9ce:	0016f713          	andi	a4,a3,1
    8000c9d2:	220713e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c9d6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c9da:	460d                	li	a2,3
    8000c9dc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c9e0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c9e2:	00c59763          	bne	a1,a2,8000c9f0 <tinst_tests_gpf+0x17f2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c9e6:	0026d683          	lhu	a3,2(a3)
    8000c9ea:	0106969b          	slliw	a3,a3,0x10
    8000c9ee:	8f55                	or	a4,a4,a3
    8000c9f0:	1746                	slli	a4,a4,0x31
    8000c9f2:	9345                	srli	a4,a4,0x31
    8000c9f4:	00026597          	auipc	a1,0x26
    8000c9f8:	cb458593          	addi	a1,a1,-844 # 800326a8 <__func__.0+0x2c0>
    8000c9fc:	00e79463          	bne	a5,a4,8000ca04 <tinst_tests_gpf+0x1806>
    8000ca00:	acbfe06f          	j	8000b4ca <tinst_tests_gpf+0x2cc>
    8000ca04:	00026597          	auipc	a1,0x26
    8000ca08:	cb458593          	addi	a1,a1,-844 # 800326b8 <__func__.0+0x2d0>
    8000ca0c:	abffe06f          	j	8000b4ca <tinst_tests_gpf+0x2cc>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000ca10:	701c                	ld	a5,32(s0)
    8000ca12:	00026597          	auipc	a1,0x26
    8000ca16:	c9658593          	addi	a1,a1,-874 # 800326a8 <__func__.0+0x2c0>
    8000ca1a:	e399                	bnez	a5,8000ca20 <tinst_tests_gpf+0x1822>
    8000ca1c:	b51fe06f          	j	8000b56c <tinst_tests_gpf+0x36e>
    8000ca20:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ca22:	0016f713          	andi	a4,a3,1
    8000ca26:	1c0719e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ca2a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ca2e:	460d                	li	a2,3
    8000ca30:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ca34:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ca36:	00c59763          	bne	a1,a2,8000ca44 <tinst_tests_gpf+0x1846>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ca3a:	0026d683          	lhu	a3,2(a3)
    8000ca3e:	0106969b          	slliw	a3,a3,0x10
    8000ca42:	8f55                	or	a4,a4,a3
    8000ca44:	1746                	slli	a4,a4,0x31
    8000ca46:	9345                	srli	a4,a4,0x31
    8000ca48:	00026597          	auipc	a1,0x26
    8000ca4c:	c6058593          	addi	a1,a1,-928 # 800326a8 <__func__.0+0x2c0>
    8000ca50:	00e79463          	bne	a5,a4,8000ca58 <tinst_tests_gpf+0x185a>
    8000ca54:	b19fe06f          	j	8000b56c <tinst_tests_gpf+0x36e>
    8000ca58:	00026597          	auipc	a1,0x26
    8000ca5c:	c6058593          	addi	a1,a1,-928 # 800326b8 <__func__.0+0x2d0>
    8000ca60:	b0dfe06f          	j	8000b56c <tinst_tests_gpf+0x36e>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000ca64:	701c                	ld	a5,32(s0)
    8000ca66:	00026597          	auipc	a1,0x26
    8000ca6a:	c4258593          	addi	a1,a1,-958 # 800326a8 <__func__.0+0x2c0>
    8000ca6e:	e399                	bnez	a5,8000ca74 <tinst_tests_gpf+0x1876>
    8000ca70:	b9ffe06f          	j	8000b60e <tinst_tests_gpf+0x410>
    8000ca74:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ca76:	0016f713          	andi	a4,a3,1
    8000ca7a:	16071fe3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ca7e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ca82:	460d                	li	a2,3
    8000ca84:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ca88:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ca8a:	00c59763          	bne	a1,a2,8000ca98 <tinst_tests_gpf+0x189a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ca8e:	0026d683          	lhu	a3,2(a3)
    8000ca92:	0106969b          	slliw	a3,a3,0x10
    8000ca96:	8f55                	or	a4,a4,a3
    8000ca98:	1746                	slli	a4,a4,0x31
    8000ca9a:	9345                	srli	a4,a4,0x31
    8000ca9c:	00026597          	auipc	a1,0x26
    8000caa0:	c0c58593          	addi	a1,a1,-1012 # 800326a8 <__func__.0+0x2c0>
    8000caa4:	00e79463          	bne	a5,a4,8000caac <tinst_tests_gpf+0x18ae>
    8000caa8:	b67fe06f          	j	8000b60e <tinst_tests_gpf+0x410>
    8000caac:	00026597          	auipc	a1,0x26
    8000cab0:	c0c58593          	addi	a1,a1,-1012 # 800326b8 <__func__.0+0x2d0>
    8000cab4:	b5bfe06f          	j	8000b60e <tinst_tests_gpf+0x410>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000cab8:	701c                	ld	a5,32(s0)
    8000caba:	00026597          	auipc	a1,0x26
    8000cabe:	bee58593          	addi	a1,a1,-1042 # 800326a8 <__func__.0+0x2c0>
    8000cac2:	e399                	bnez	a5,8000cac8 <tinst_tests_gpf+0x18ca>
    8000cac4:	be5fe06f          	j	8000b6a8 <tinst_tests_gpf+0x4aa>
    8000cac8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000caca:	0016f713          	andi	a4,a3,1
    8000cace:	120715e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cad2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cad6:	460d                	li	a2,3
    8000cad8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cadc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cade:	00c59763          	bne	a1,a2,8000caec <tinst_tests_gpf+0x18ee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cae2:	0026d683          	lhu	a3,2(a3)
    8000cae6:	0106969b          	slliw	a3,a3,0x10
    8000caea:	8f55                	or	a4,a4,a3
    8000caec:	1746                	slli	a4,a4,0x31
    8000caee:	9345                	srli	a4,a4,0x31
    8000caf0:	00026597          	auipc	a1,0x26
    8000caf4:	bb858593          	addi	a1,a1,-1096 # 800326a8 <__func__.0+0x2c0>
    8000caf8:	00e79463          	bne	a5,a4,8000cb00 <tinst_tests_gpf+0x1902>
    8000cafc:	badfe06f          	j	8000b6a8 <tinst_tests_gpf+0x4aa>
    8000cb00:	00026597          	auipc	a1,0x26
    8000cb04:	bb858593          	addi	a1,a1,-1096 # 800326b8 <__func__.0+0x2d0>
    8000cb08:	ba1fe06f          	j	8000b6a8 <tinst_tests_gpf+0x4aa>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000cb0c:	701c                	ld	a5,32(s0)
    8000cb0e:	00026597          	auipc	a1,0x26
    8000cb12:	b9a58593          	addi	a1,a1,-1126 # 800326a8 <__func__.0+0x2c0>
    8000cb16:	e399                	bnez	a5,8000cb1c <tinst_tests_gpf+0x191e>
    8000cb18:	c2dfe06f          	j	8000b744 <tinst_tests_gpf+0x546>
    8000cb1c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cb1e:	0016f713          	andi	a4,a3,1
    8000cb22:	0c071be3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cb26:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cb2a:	460d                	li	a2,3
    8000cb2c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cb30:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cb32:	00c59763          	bne	a1,a2,8000cb40 <tinst_tests_gpf+0x1942>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cb36:	0026d683          	lhu	a3,2(a3)
    8000cb3a:	0106969b          	slliw	a3,a3,0x10
    8000cb3e:	8f55                	or	a4,a4,a3
    8000cb40:	01f076b7          	lui	a3,0x1f07
    8000cb44:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cb48:	8f75                	and	a4,a4,a3
    8000cb4a:	00026597          	auipc	a1,0x26
    8000cb4e:	b5e58593          	addi	a1,a1,-1186 # 800326a8 <__func__.0+0x2c0>
    8000cb52:	00e79463          	bne	a5,a4,8000cb5a <tinst_tests_gpf+0x195c>
    8000cb56:	beffe06f          	j	8000b744 <tinst_tests_gpf+0x546>
    8000cb5a:	00026597          	auipc	a1,0x26
    8000cb5e:	b5e58593          	addi	a1,a1,-1186 # 800326b8 <__func__.0+0x2d0>
    8000cb62:	be3fe06f          	j	8000b744 <tinst_tests_gpf+0x546>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000cb66:	701c                	ld	a5,32(s0)
    8000cb68:	00026597          	auipc	a1,0x26
    8000cb6c:	b4058593          	addi	a1,a1,-1216 # 800326a8 <__func__.0+0x2c0>
    8000cb70:	e399                	bnez	a5,8000cb76 <tinst_tests_gpf+0x1978>
    8000cb72:	c73fe06f          	j	8000b7e4 <tinst_tests_gpf+0x5e6>
    8000cb76:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cb78:	0016f713          	andi	a4,a3,1
    8000cb7c:	06071ee3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cb80:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cb84:	460d                	li	a2,3
    8000cb86:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cb8a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cb8c:	00c59763          	bne	a1,a2,8000cb9a <tinst_tests_gpf+0x199c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cb90:	0026d683          	lhu	a3,2(a3)
    8000cb94:	0106969b          	slliw	a3,a3,0x10
    8000cb98:	8f55                	or	a4,a4,a3
    8000cb9a:	01f076b7          	lui	a3,0x1f07
    8000cb9e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cba2:	8f75                	and	a4,a4,a3
    8000cba4:	00026597          	auipc	a1,0x26
    8000cba8:	b0458593          	addi	a1,a1,-1276 # 800326a8 <__func__.0+0x2c0>
    8000cbac:	00e79463          	bne	a5,a4,8000cbb4 <tinst_tests_gpf+0x19b6>
    8000cbb0:	c35fe06f          	j	8000b7e4 <tinst_tests_gpf+0x5e6>
    8000cbb4:	00026597          	auipc	a1,0x26
    8000cbb8:	b0458593          	addi	a1,a1,-1276 # 800326b8 <__func__.0+0x2d0>
    8000cbbc:	c29fe06f          	j	8000b7e4 <tinst_tests_gpf+0x5e6>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000cbc0:	701c                	ld	a5,32(s0)
    8000cbc2:	00026597          	auipc	a1,0x26
    8000cbc6:	ae658593          	addi	a1,a1,-1306 # 800326a8 <__func__.0+0x2c0>
    8000cbca:	e399                	bnez	a5,8000cbd0 <tinst_tests_gpf+0x19d2>
    8000cbcc:	cbbfe06f          	j	8000b886 <tinst_tests_gpf+0x688>
    8000cbd0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cbd2:	0016f713          	andi	a4,a3,1
    8000cbd6:	020711e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cbda:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cbde:	460d                	li	a2,3
    8000cbe0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cbe4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cbe6:	00c59763          	bne	a1,a2,8000cbf4 <tinst_tests_gpf+0x19f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cbea:	0026d683          	lhu	a3,2(a3)
    8000cbee:	0106969b          	slliw	a3,a3,0x10
    8000cbf2:	8f55                	or	a4,a4,a3
    8000cbf4:	01f076b7          	lui	a3,0x1f07
    8000cbf8:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cbfc:	8f75                	and	a4,a4,a3
    8000cbfe:	00026597          	auipc	a1,0x26
    8000cc02:	aaa58593          	addi	a1,a1,-1366 # 800326a8 <__func__.0+0x2c0>
    8000cc06:	00e79463          	bne	a5,a4,8000cc0e <tinst_tests_gpf+0x1a10>
    8000cc0a:	c7dfe06f          	j	8000b886 <tinst_tests_gpf+0x688>
    8000cc0e:	00026597          	auipc	a1,0x26
    8000cc12:	aaa58593          	addi	a1,a1,-1366 # 800326b8 <__func__.0+0x2d0>
    8000cc16:	c71fe06f          	j	8000b886 <tinst_tests_gpf+0x688>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000cc1a:	701c                	ld	a5,32(s0)
    8000cc1c:	00026597          	auipc	a1,0x26
    8000cc20:	a8c58593          	addi	a1,a1,-1396 # 800326a8 <__func__.0+0x2c0>
    8000cc24:	e399                	bnez	a5,8000cc2a <tinst_tests_gpf+0x1a2c>
    8000cc26:	d05fe06f          	j	8000b92a <tinst_tests_gpf+0x72c>
    8000cc2a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cc2c:	0016f713          	andi	a4,a3,1
    8000cc30:	7c071463          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cc34:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cc38:	460d                	li	a2,3
    8000cc3a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cc3e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cc40:	00c59763          	bne	a1,a2,8000cc4e <tinst_tests_gpf+0x1a50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cc44:	0026d683          	lhu	a3,2(a3)
    8000cc48:	0106969b          	slliw	a3,a3,0x10
    8000cc4c:	8f55                	or	a4,a4,a3
    8000cc4e:	01f076b7          	lui	a3,0x1f07
    8000cc52:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cc56:	8f75                	and	a4,a4,a3
    8000cc58:	00026597          	auipc	a1,0x26
    8000cc5c:	a5058593          	addi	a1,a1,-1456 # 800326a8 <__func__.0+0x2c0>
    8000cc60:	00e79463          	bne	a5,a4,8000cc68 <tinst_tests_gpf+0x1a6a>
    8000cc64:	cc7fe06f          	j	8000b92a <tinst_tests_gpf+0x72c>
    8000cc68:	00026597          	auipc	a1,0x26
    8000cc6c:	a5058593          	addi	a1,a1,-1456 # 800326b8 <__func__.0+0x2d0>
    8000cc70:	cbbfe06f          	j	8000b92a <tinst_tests_gpf+0x72c>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000cc74:	701c                	ld	a5,32(s0)
    8000cc76:	00026597          	auipc	a1,0x26
    8000cc7a:	a3258593          	addi	a1,a1,-1486 # 800326a8 <__func__.0+0x2c0>
    8000cc7e:	e399                	bnez	a5,8000cc84 <tinst_tests_gpf+0x1a86>
    8000cc80:	fa9fe06f          	j	8000bc28 <tinst_tests_gpf+0xa2a>
    8000cc84:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cc86:	0016f713          	andi	a4,a3,1
    8000cc8a:	76071763          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cc8e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cc92:	460d                	li	a2,3
    8000cc94:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cc98:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cc9a:	00c59763          	bne	a1,a2,8000cca8 <tinst_tests_gpf+0x1aaa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cc9e:	0026d683          	lhu	a3,2(a3)
    8000cca2:	0106969b          	slliw	a3,a3,0x10
    8000cca6:	8f55                	or	a4,a4,a3
    8000cca8:	1ffe16b7          	lui	a3,0x1ffe1
    8000ccac:	068e                	slli	a3,a3,0x3
    8000ccae:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ccb0:	8f75                	and	a4,a4,a3
    8000ccb2:	00026597          	auipc	a1,0x26
    8000ccb6:	9f658593          	addi	a1,a1,-1546 # 800326a8 <__func__.0+0x2c0>
    8000ccba:	00e79463          	bne	a5,a4,8000ccc2 <tinst_tests_gpf+0x1ac4>
    8000ccbe:	f6bfe06f          	j	8000bc28 <tinst_tests_gpf+0xa2a>
    8000ccc2:	00026597          	auipc	a1,0x26
    8000ccc6:	9f658593          	addi	a1,a1,-1546 # 800326b8 <__func__.0+0x2d0>
    8000ccca:	f5ffe06f          	j	8000bc28 <tinst_tests_gpf+0xa2a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000ccce:	701c                	ld	a5,32(s0)
    8000ccd0:	00026597          	auipc	a1,0x26
    8000ccd4:	9d858593          	addi	a1,a1,-1576 # 800326a8 <__func__.0+0x2c0>
    8000ccd8:	e399                	bnez	a5,8000ccde <tinst_tests_gpf+0x1ae0>
    8000ccda:	ff3fe06f          	j	8000bccc <tinst_tests_gpf+0xace>
    8000ccde:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cce0:	0016f713          	andi	a4,a3,1
    8000cce4:	70071a63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cce8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ccec:	460d                	li	a2,3
    8000ccee:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ccf2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ccf4:	00c59763          	bne	a1,a2,8000cd02 <tinst_tests_gpf+0x1b04>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ccf8:	0026d683          	lhu	a3,2(a3)
    8000ccfc:	0106969b          	slliw	a3,a3,0x10
    8000cd00:	8f55                	or	a4,a4,a3
    8000cd02:	1ffe16b7          	lui	a3,0x1ffe1
    8000cd06:	068e                	slli	a3,a3,0x3
    8000cd08:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cd0a:	8f75                	and	a4,a4,a3
    8000cd0c:	00026597          	auipc	a1,0x26
    8000cd10:	99c58593          	addi	a1,a1,-1636 # 800326a8 <__func__.0+0x2c0>
    8000cd14:	00e79463          	bne	a5,a4,8000cd1c <tinst_tests_gpf+0x1b1e>
    8000cd18:	fb5fe06f          	j	8000bccc <tinst_tests_gpf+0xace>
    8000cd1c:	00026597          	auipc	a1,0x26
    8000cd20:	99c58593          	addi	a1,a1,-1636 # 800326b8 <__func__.0+0x2d0>
    8000cd24:	fa9fe06f          	j	8000bccc <tinst_tests_gpf+0xace>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000cd28:	701c                	ld	a5,32(s0)
    8000cd2a:	00026597          	auipc	a1,0x26
    8000cd2e:	97e58593          	addi	a1,a1,-1666 # 800326a8 <__func__.0+0x2c0>
    8000cd32:	e399                	bnez	a5,8000cd38 <tinst_tests_gpf+0x1b3a>
    8000cd34:	83aff06f          	j	8000bd6e <tinst_tests_gpf+0xb70>
    8000cd38:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cd3a:	0016f713          	andi	a4,a3,1
    8000cd3e:	6a071d63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cd42:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cd46:	460d                	li	a2,3
    8000cd48:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cd4c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cd4e:	00c59763          	bne	a1,a2,8000cd5c <tinst_tests_gpf+0x1b5e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cd52:	0026d683          	lhu	a3,2(a3)
    8000cd56:	0106969b          	slliw	a3,a3,0x10
    8000cd5a:	8f55                	or	a4,a4,a3
    8000cd5c:	1ffe16b7          	lui	a3,0x1ffe1
    8000cd60:	068e                	slli	a3,a3,0x3
    8000cd62:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cd64:	8f75                	and	a4,a4,a3
    8000cd66:	00026597          	auipc	a1,0x26
    8000cd6a:	94258593          	addi	a1,a1,-1726 # 800326a8 <__func__.0+0x2c0>
    8000cd6e:	00e79463          	bne	a5,a4,8000cd76 <tinst_tests_gpf+0x1b78>
    8000cd72:	ffdfe06f          	j	8000bd6e <tinst_tests_gpf+0xb70>
    8000cd76:	00026597          	auipc	a1,0x26
    8000cd7a:	94258593          	addi	a1,a1,-1726 # 800326b8 <__func__.0+0x2d0>
    8000cd7e:	ff1fe06f          	j	8000bd6e <tinst_tests_gpf+0xb70>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000cd82:	701c                	ld	a5,32(s0)
    8000cd84:	00026597          	auipc	a1,0x26
    8000cd88:	92458593          	addi	a1,a1,-1756 # 800326a8 <__func__.0+0x2c0>
    8000cd8c:	e399                	bnez	a5,8000cd92 <tinst_tests_gpf+0x1b94>
    8000cd8e:	882ff06f          	j	8000be10 <tinst_tests_gpf+0xc12>
    8000cd92:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cd94:	0016f713          	andi	a4,a3,1
    8000cd98:	66071063          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cd9c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cda0:	460d                	li	a2,3
    8000cda2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cda6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cda8:	00c59763          	bne	a1,a2,8000cdb6 <tinst_tests_gpf+0x1bb8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cdac:	0026d683          	lhu	a3,2(a3)
    8000cdb0:	0106969b          	slliw	a3,a3,0x10
    8000cdb4:	8f55                	or	a4,a4,a3
    8000cdb6:	1ffe16b7          	lui	a3,0x1ffe1
    8000cdba:	068e                	slli	a3,a3,0x3
    8000cdbc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cdbe:	8f75                	and	a4,a4,a3
    8000cdc0:	00026597          	auipc	a1,0x26
    8000cdc4:	8e858593          	addi	a1,a1,-1816 # 800326a8 <__func__.0+0x2c0>
    8000cdc8:	00e79463          	bne	a5,a4,8000cdd0 <tinst_tests_gpf+0x1bd2>
    8000cdcc:	844ff06f          	j	8000be10 <tinst_tests_gpf+0xc12>
    8000cdd0:	00026597          	auipc	a1,0x26
    8000cdd4:	8e858593          	addi	a1,a1,-1816 # 800326b8 <__func__.0+0x2d0>
    8000cdd8:	838ff06f          	j	8000be10 <tinst_tests_gpf+0xc12>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000cddc:	701c                	ld	a5,32(s0)
    8000cdde:	e399                	bnez	a5,8000cde4 <tinst_tests_gpf+0x1be6>
    8000cde0:	e7efe06f          	j	8000b45e <tinst_tests_gpf+0x260>
    8000cde4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cde6:	0016f713          	andi	a4,a3,1
    8000cdea:	60071763          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cdee:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cdf2:	460d                	li	a2,3
    8000cdf4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cdf8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cdfa:	00c59763          	bne	a1,a2,8000ce08 <tinst_tests_gpf+0x1c0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cdfe:	0026d683          	lhu	a3,2(a3)
    8000ce02:	0106969b          	slliw	a3,a3,0x10
    8000ce06:	8f55                	or	a4,a4,a3
    8000ce08:	1746                	slli	a4,a4,0x31
    8000ce0a:	9345                	srli	a4,a4,0x31
    8000ce0c:	00e78463          	beq	a5,a4,8000ce14 <tinst_tests_gpf+0x1c16>
    8000ce10:	e3afe06f          	j	8000b44a <tinst_tests_gpf+0x24c>
    8000ce14:	e4afe06f          	j	8000b45e <tinst_tests_gpf+0x260>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000ce18:	701c                	ld	a5,32(s0)
    8000ce1a:	e399                	bnez	a5,8000ce20 <tinst_tests_gpf+0x1c22>
    8000ce1c:	ee4fe06f          	j	8000b500 <tinst_tests_gpf+0x302>
    8000ce20:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ce22:	0016f713          	andi	a4,a3,1
    8000ce26:	5c071963          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ce2a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ce2e:	460d                	li	a2,3
    8000ce30:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ce34:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ce36:	00c59763          	bne	a1,a2,8000ce44 <tinst_tests_gpf+0x1c46>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ce3a:	0026d683          	lhu	a3,2(a3)
    8000ce3e:	0106969b          	slliw	a3,a3,0x10
    8000ce42:	8f55                	or	a4,a4,a3
    8000ce44:	1746                	slli	a4,a4,0x31
    8000ce46:	9345                	srli	a4,a4,0x31
    8000ce48:	00e78463          	beq	a5,a4,8000ce50 <tinst_tests_gpf+0x1c52>
    8000ce4c:	ea0fe06f          	j	8000b4ec <tinst_tests_gpf+0x2ee>
    8000ce50:	eb0fe06f          	j	8000b500 <tinst_tests_gpf+0x302>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000ce54:	6418                	ld	a4,8(s0)
    8000ce56:	47d5                	li	a5,21
    8000ce58:	00f70463          	beq	a4,a5,8000ce60 <tinst_tests_gpf+0x1c62>
    8000ce5c:	ffefe06f          	j	8000b65a <tinst_tests_gpf+0x45c>
    8000ce60:	7018                	ld	a4,32(s0)
    8000ce62:	e319                	bnez	a4,8000ce68 <tinst_tests_gpf+0x1c6a>
    8000ce64:	ff8fe06f          	j	8000b65c <tinst_tests_gpf+0x45e>
    8000ce68:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ce6a:	0016f793          	andi	a5,a3,1
    8000ce6e:	58079563          	bnez	a5,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ce72:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ce76:	460d                	li	a2,3
    8000ce78:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000ce7c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000ce7e:	00c59763          	bne	a1,a2,8000ce8c <tinst_tests_gpf+0x1c8e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ce82:	0026d683          	lhu	a3,2(a3)
    8000ce86:	0106969b          	slliw	a3,a3,0x10
    8000ce8a:	8fd5                	or	a5,a5,a3
    8000ce8c:	17c6                	slli	a5,a5,0x31
    8000ce8e:	0317d493          	srli	s1,a5,0x31
    8000ce92:	8c99                	sub	s1,s1,a4
    8000ce94:	0014b493          	seqz	s1,s1
    8000ce98:	fc4fe06f          	j	8000b65c <tinst_tests_gpf+0x45e>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000ce9c:	6418                	ld	a4,8(s0)
    8000ce9e:	47dd                	li	a5,23
    8000cea0:	00026597          	auipc	a1,0x26
    8000cea4:	81858593          	addi	a1,a1,-2024 # 800326b8 <__func__.0+0x2d0>
    8000cea8:	00f70463          	beq	a4,a5,8000ceb0 <tinst_tests_gpf+0x1cb2>
    8000ceac:	ffbfe06f          	j	8000bea6 <tinst_tests_gpf+0xca8>
    8000ceb0:	701c                	ld	a5,32(s0)
    8000ceb2:	00025597          	auipc	a1,0x25
    8000ceb6:	7f658593          	addi	a1,a1,2038 # 800326a8 <__func__.0+0x2c0>
    8000ceba:	e399                	bnez	a5,8000cec0 <tinst_tests_gpf+0x1cc2>
    8000cebc:	febfe06f          	j	8000bea6 <tinst_tests_gpf+0xca8>
    8000cec0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cec2:	0016f713          	andi	a4,a3,1
    8000cec6:	52071963          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ceca:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cece:	460d                	li	a2,3
    8000ced0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ced4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ced6:	00c59763          	bne	a1,a2,8000cee4 <tinst_tests_gpf+0x1ce6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ceda:	0026d683          	lhu	a3,2(a3)
    8000cede:	0106969b          	slliw	a3,a3,0x10
    8000cee2:	8f55                	or	a4,a4,a3
    8000cee4:	1ffe16b7          	lui	a3,0x1ffe1
    8000cee8:	068e                	slli	a3,a3,0x3
    8000ceea:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ceec:	8f75                	and	a4,a4,a3
    8000ceee:	00025597          	auipc	a1,0x25
    8000cef2:	7ba58593          	addi	a1,a1,1978 # 800326a8 <__func__.0+0x2c0>
    8000cef6:	00e78463          	beq	a5,a4,8000cefe <tinst_tests_gpf+0x1d00>
    8000cefa:	fa5fe06f          	j	8000be9e <tinst_tests_gpf+0xca0>
    8000cefe:	fa9fe06f          	j	8000bea6 <tinst_tests_gpf+0xca8>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000cf02:	6418                	ld	a4,8(s0)
    8000cf04:	47d5                	li	a5,21
    8000cf06:	00f70463          	beq	a4,a5,8000cf0e <tinst_tests_gpf+0x1d10>
    8000cf0a:	feafe06f          	j	8000b6f4 <tinst_tests_gpf+0x4f6>
    8000cf0e:	7018                	ld	a4,32(s0)
    8000cf10:	e319                	bnez	a4,8000cf16 <tinst_tests_gpf+0x1d18>
    8000cf12:	fe4fe06f          	j	8000b6f6 <tinst_tests_gpf+0x4f8>
    8000cf16:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cf18:	0016f793          	andi	a5,a3,1
    8000cf1c:	4c079e63          	bnez	a5,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cf20:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cf24:	460d                	li	a2,3
    8000cf26:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000cf2a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000cf2c:	00c59763          	bne	a1,a2,8000cf3a <tinst_tests_gpf+0x1d3c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cf30:	0026d683          	lhu	a3,2(a3)
    8000cf34:	0106969b          	slliw	a3,a3,0x10
    8000cf38:	8fd5                	or	a5,a5,a3
    8000cf3a:	17c6                	slli	a5,a5,0x31
    8000cf3c:	0317d493          	srli	s1,a5,0x31
    8000cf40:	8c99                	sub	s1,s1,a4
    8000cf42:	0014b493          	seqz	s1,s1
    8000cf46:	fb0fe06f          	j	8000b6f6 <tinst_tests_gpf+0x4f8>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000cf4a:	6418                	ld	a4,8(s0)
    8000cf4c:	47dd                	li	a5,23
    8000cf4e:	00025597          	auipc	a1,0x25
    8000cf52:	76a58593          	addi	a1,a1,1898 # 800326b8 <__func__.0+0x2d0>
    8000cf56:	00f70463          	beq	a4,a5,8000cf5e <tinst_tests_gpf+0x1d60>
    8000cf5a:	fe3fe06f          	j	8000bf3c <tinst_tests_gpf+0xd3e>
    8000cf5e:	701c                	ld	a5,32(s0)
    8000cf60:	00025597          	auipc	a1,0x25
    8000cf64:	74858593          	addi	a1,a1,1864 # 800326a8 <__func__.0+0x2c0>
    8000cf68:	e399                	bnez	a5,8000cf6e <tinst_tests_gpf+0x1d70>
    8000cf6a:	fd3fe06f          	j	8000bf3c <tinst_tests_gpf+0xd3e>
    8000cf6e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cf70:	0016f713          	andi	a4,a3,1
    8000cf74:	48071263          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cf78:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cf7c:	460d                	li	a2,3
    8000cf7e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cf82:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cf84:	00c59763          	bne	a1,a2,8000cf92 <tinst_tests_gpf+0x1d94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cf88:	0026d683          	lhu	a3,2(a3)
    8000cf8c:	0106969b          	slliw	a3,a3,0x10
    8000cf90:	8f55                	or	a4,a4,a3
    8000cf92:	1ffe16b7          	lui	a3,0x1ffe1
    8000cf96:	068e                	slli	a3,a3,0x3
    8000cf98:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cf9a:	8f75                	and	a4,a4,a3
    8000cf9c:	00025597          	auipc	a1,0x25
    8000cfa0:	70c58593          	addi	a1,a1,1804 # 800326a8 <__func__.0+0x2c0>
    8000cfa4:	00e78463          	beq	a5,a4,8000cfac <tinst_tests_gpf+0x1dae>
    8000cfa8:	f8dfe06f          	j	8000bf34 <tinst_tests_gpf+0xd36>
    8000cfac:	f91fe06f          	j	8000bf3c <tinst_tests_gpf+0xd3e>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000cfb0:	6418                	ld	a4,8(s0)
    8000cfb2:	47dd                	li	a5,23
    8000cfb4:	00f70463          	beq	a4,a5,8000cfbc <tinst_tests_gpf+0x1dbe>
    8000cfb8:	fd8fe06f          	j	8000b790 <tinst_tests_gpf+0x592>
    8000cfbc:	701c                	ld	a5,32(s0)
    8000cfbe:	e399                	bnez	a5,8000cfc4 <tinst_tests_gpf+0x1dc6>
    8000cfc0:	fd2fe06f          	j	8000b792 <tinst_tests_gpf+0x594>
    8000cfc4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cfc6:	0016f713          	andi	a4,a3,1
    8000cfca:	42071763          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cfce:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cfd2:	460d                	li	a2,3
    8000cfd4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cfd8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cfda:	00c59763          	bne	a1,a2,8000cfe8 <tinst_tests_gpf+0x1dea>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cfde:	0026d683          	lhu	a3,2(a3)
    8000cfe2:	0106969b          	slliw	a3,a3,0x10
    8000cfe6:	8f55                	or	a4,a4,a3
    8000cfe8:	01f076b7          	lui	a3,0x1f07
    8000cfec:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cff0:	8f75                	and	a4,a4,a3
    8000cff2:	40f704b3          	sub	s1,a4,a5
    8000cff6:	0014b493          	seqz	s1,s1
    8000cffa:	f98fe06f          	j	8000b792 <tinst_tests_gpf+0x594>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000cffe:	6418                	ld	a4,8(s0)
    8000d000:	47dd                	li	a5,23
    8000d002:	00f70463          	beq	a4,a5,8000d00a <tinst_tests_gpf+0x1e0c>
    8000d006:	82bfe06f          	j	8000b830 <tinst_tests_gpf+0x632>
    8000d00a:	701c                	ld	a5,32(s0)
    8000d00c:	e399                	bnez	a5,8000d012 <tinst_tests_gpf+0x1e14>
    8000d00e:	825fe06f          	j	8000b832 <tinst_tests_gpf+0x634>
    8000d012:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d014:	0016f713          	andi	a4,a3,1
    8000d018:	3e071063          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d01c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d020:	460d                	li	a2,3
    8000d022:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d026:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d028:	00c59763          	bne	a1,a2,8000d036 <tinst_tests_gpf+0x1e38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d02c:	0026d683          	lhu	a3,2(a3)
    8000d030:	0106969b          	slliw	a3,a3,0x10
    8000d034:	8f55                	or	a4,a4,a3
    8000d036:	01f076b7          	lui	a3,0x1f07
    8000d03a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d03e:	8f75                	and	a4,a4,a3
    8000d040:	40f704b3          	sub	s1,a4,a5
    8000d044:	0014b493          	seqz	s1,s1
    8000d048:	feafe06f          	j	8000b832 <tinst_tests_gpf+0x634>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d04c:	6418                	ld	a4,8(s0)
    8000d04e:	47dd                	li	a5,23
    8000d050:	00f70463          	beq	a4,a5,8000d058 <tinst_tests_gpf+0x1e5a>
    8000d054:	87ffe06f          	j	8000b8d2 <tinst_tests_gpf+0x6d4>
    8000d058:	701c                	ld	a5,32(s0)
    8000d05a:	e399                	bnez	a5,8000d060 <tinst_tests_gpf+0x1e62>
    8000d05c:	879fe06f          	j	8000b8d4 <tinst_tests_gpf+0x6d6>
    8000d060:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d062:	0016f713          	andi	a4,a3,1
    8000d066:	38071963          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d06a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d06e:	460d                	li	a2,3
    8000d070:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d074:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d076:	00c59763          	bne	a1,a2,8000d084 <tinst_tests_gpf+0x1e86>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d07a:	0026d683          	lhu	a3,2(a3)
    8000d07e:	0106969b          	slliw	a3,a3,0x10
    8000d082:	8f55                	or	a4,a4,a3
    8000d084:	01f076b7          	lui	a3,0x1f07
    8000d088:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d08c:	8f75                	and	a4,a4,a3
    8000d08e:	40f704b3          	sub	s1,a4,a5
    8000d092:	0014b493          	seqz	s1,s1
    8000d096:	83ffe06f          	j	8000b8d4 <tinst_tests_gpf+0x6d6>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d09a:	6418                	ld	a4,8(s0)
    8000d09c:	47dd                	li	a5,23
    8000d09e:	00f70463          	beq	a4,a5,8000d0a6 <tinst_tests_gpf+0x1ea8>
    8000d0a2:	8d5fe06f          	j	8000b976 <tinst_tests_gpf+0x778>
    8000d0a6:	701c                	ld	a5,32(s0)
    8000d0a8:	e399                	bnez	a5,8000d0ae <tinst_tests_gpf+0x1eb0>
    8000d0aa:	8cffe06f          	j	8000b978 <tinst_tests_gpf+0x77a>
    8000d0ae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d0b0:	0016f713          	andi	a4,a3,1
    8000d0b4:	34071263          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d0b8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d0bc:	460d                	li	a2,3
    8000d0be:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d0c2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d0c4:	00c59763          	bne	a1,a2,8000d0d2 <tinst_tests_gpf+0x1ed4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d0c8:	0026d683          	lhu	a3,2(a3)
    8000d0cc:	0106969b          	slliw	a3,a3,0x10
    8000d0d0:	8f55                	or	a4,a4,a3
    8000d0d2:	01f076b7          	lui	a3,0x1f07
    8000d0d6:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d0da:	8f75                	and	a4,a4,a3
    8000d0dc:	40f704b3          	sub	s1,a4,a5
    8000d0e0:	0014b493          	seqz	s1,s1
    8000d0e4:	895fe06f          	j	8000b978 <tinst_tests_gpf+0x77a>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d0e8:	6418                	ld	a4,8(s0)
    8000d0ea:	47d5                	li	a5,21
    8000d0ec:	00f70463          	beq	a4,a5,8000d0f4 <tinst_tests_gpf+0x1ef6>
    8000d0f0:	91bfe06f          	j	8000ba0a <tinst_tests_gpf+0x80c>
    8000d0f4:	02043903          	ld	s2,32(s0)
    8000d0f8:	00091463          	bnez	s2,8000d100 <tinst_tests_gpf+0x1f02>
    8000d0fc:	911fe06f          	j	8000ba0c <tinst_tests_gpf+0x80e>
    8000d100:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d102:	0017f713          	andi	a4,a5,1
    8000d106:	2e071963          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d10a:	0007d503          	lhu	a0,0(a5)
    8000d10e:	d84f40ef          	jal	80001692 <expand_compressed_instruction>
    8000d112:	67a1                	lui	a5,0x8
    8000d114:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d116:	00f574b3          	and	s1,a0,a5
    8000d11a:	412484b3          	sub	s1,s1,s2
    8000d11e:	0014b493          	seqz	s1,s1
    8000d122:	8ebfe06f          	j	8000ba0c <tinst_tests_gpf+0x80e>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d126:	6418                	ld	a4,8(s0)
    8000d128:	47d5                	li	a5,21
    8000d12a:	00f70463          	beq	a4,a5,8000d132 <tinst_tests_gpf+0x1f34>
    8000d12e:	973fe06f          	j	8000baa0 <tinst_tests_gpf+0x8a2>
    8000d132:	02043983          	ld	s3,32(s0)
    8000d136:	00099463          	bnez	s3,8000d13e <tinst_tests_gpf+0x1f40>
    8000d13a:	969fe06f          	j	8000baa2 <tinst_tests_gpf+0x8a4>
    8000d13e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d140:	0017f713          	andi	a4,a5,1
    8000d144:	2a071a63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d148:	0007d503          	lhu	a0,0(a5)
    8000d14c:	d46f40ef          	jal	80001692 <expand_compressed_instruction>
    8000d150:	67a1                	lui	a5,0x8
    8000d152:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d154:	00f574b3          	and	s1,a0,a5
    8000d158:	413484b3          	sub	s1,s1,s3
    8000d15c:	0014b493          	seqz	s1,s1
    8000d160:	943fe06f          	j	8000baa2 <tinst_tests_gpf+0x8a4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d164:	6418                	ld	a4,8(s0)
    8000d166:	47dd                	li	a5,23
    8000d168:	00f70463          	beq	a4,a5,8000d170 <tinst_tests_gpf+0x1f72>
    8000d16c:	9cbfe06f          	j	8000bb36 <tinst_tests_gpf+0x938>
    8000d170:	02043983          	ld	s3,32(s0)
    8000d174:	00099463          	bnez	s3,8000d17c <tinst_tests_gpf+0x1f7e>
    8000d178:	9c1fe06f          	j	8000bb38 <tinst_tests_gpf+0x93a>
    8000d17c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d17e:	0017f713          	andi	a4,a5,1
    8000d182:	26071b63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d186:	0007d503          	lhu	a0,0(a5)
    8000d18a:	d08f40ef          	jal	80001692 <expand_compressed_instruction>
    8000d18e:	01f077b7          	lui	a5,0x1f07
    8000d192:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000d196:	00f574b3          	and	s1,a0,a5
    8000d19a:	413484b3          	sub	s1,s1,s3
    8000d19e:	0014b493          	seqz	s1,s1
    8000d1a2:	997fe06f          	j	8000bb38 <tinst_tests_gpf+0x93a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000d1a6:	701c                	ld	a5,32(s0)
    8000d1a8:	e399                	bnez	a5,8000d1ae <tinst_tests_gpf+0x1fb0>
    8000d1aa:	b59fe06f          	j	8000bd02 <tinst_tests_gpf+0xb04>
    8000d1ae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d1b0:	0016f713          	andi	a4,a3,1
    8000d1b4:	24071263          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d1b8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d1bc:	460d                	li	a2,3
    8000d1be:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d1c2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d1c4:	00c59763          	bne	a1,a2,8000d1d2 <tinst_tests_gpf+0x1fd4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d1c8:	0026d683          	lhu	a3,2(a3)
    8000d1cc:	0106969b          	slliw	a3,a3,0x10
    8000d1d0:	8f55                	or	a4,a4,a3
    8000d1d2:	1ffe16b7          	lui	a3,0x1ffe1
    8000d1d6:	068e                	slli	a3,a3,0x3
    8000d1d8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d1da:	8f75                	and	a4,a4,a3
    8000d1dc:	00e78463          	beq	a5,a4,8000d1e4 <tinst_tests_gpf+0x1fe6>
    8000d1e0:	b0ffe06f          	j	8000bcee <tinst_tests_gpf+0xaf0>
    8000d1e4:	b1ffe06f          	j	8000bd02 <tinst_tests_gpf+0xb04>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d1e8:	02043903          	ld	s2,32(s0)
    8000d1ec:	64091be3          	bnez	s2,8000e042 <tinst_tests_gpf+0x2e44>
    8000d1f0:	00025597          	auipc	a1,0x25
    8000d1f4:	4b858593          	addi	a1,a1,1208 # 800326a8 <__func__.0+0x2c0>
    8000d1f8:	fc6fe06f          	j	8000b9be <tinst_tests_gpf+0x7c0>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000d1fc:	701c                	ld	a5,32(s0)
    8000d1fe:	e399                	bnez	a5,8000d204 <tinst_tests_gpf+0x2006>
    8000d200:	ba5fe06f          	j	8000bda4 <tinst_tests_gpf+0xba6>
    8000d204:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d206:	0016f713          	andi	a4,a3,1
    8000d20a:	1e071763          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d20e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d212:	460d                	li	a2,3
    8000d214:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d218:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d21a:	00c59763          	bne	a1,a2,8000d228 <tinst_tests_gpf+0x202a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d21e:	0026d683          	lhu	a3,2(a3)
    8000d222:	0106969b          	slliw	a3,a3,0x10
    8000d226:	8f55                	or	a4,a4,a3
    8000d228:	1ffe16b7          	lui	a3,0x1ffe1
    8000d22c:	068e                	slli	a3,a3,0x3
    8000d22e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d230:	8f75                	and	a4,a4,a3
    8000d232:	00e78463          	beq	a5,a4,8000d23a <tinst_tests_gpf+0x203c>
    8000d236:	b5bfe06f          	j	8000bd90 <tinst_tests_gpf+0xb92>
    8000d23a:	b6bfe06f          	j	8000bda4 <tinst_tests_gpf+0xba6>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d23e:	02043983          	ld	s3,32(s0)
    8000d242:	660997e3          	bnez	s3,8000e0b0 <tinst_tests_gpf+0x2eb2>
    8000d246:	00025597          	auipc	a1,0x25
    8000d24a:	46258593          	addi	a1,a1,1122 # 800326a8 <__func__.0+0x2c0>
    8000d24e:	807fe06f          	j	8000ba54 <tinst_tests_gpf+0x856>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000d252:	701c                	ld	a5,32(s0)
    8000d254:	e399                	bnez	a5,8000d25a <tinst_tests_gpf+0x205c>
    8000d256:	bf1fe06f          	j	8000be46 <tinst_tests_gpf+0xc48>
    8000d25a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d25c:	0016f713          	andi	a4,a3,1
    8000d260:	18071c63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d264:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d268:	460d                	li	a2,3
    8000d26a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d26e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d270:	00c59763          	bne	a1,a2,8000d27e <tinst_tests_gpf+0x2080>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d274:	0026d683          	lhu	a3,2(a3)
    8000d278:	0106969b          	slliw	a3,a3,0x10
    8000d27c:	8f55                	or	a4,a4,a3
    8000d27e:	1ffe16b7          	lui	a3,0x1ffe1
    8000d282:	068e                	slli	a3,a3,0x3
    8000d284:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d286:	8f75                	and	a4,a4,a3
    8000d288:	00e78463          	beq	a5,a4,8000d290 <tinst_tests_gpf+0x2092>
    8000d28c:	ba7fe06f          	j	8000be32 <tinst_tests_gpf+0xc34>
    8000d290:	bb7fe06f          	j	8000be46 <tinst_tests_gpf+0xc48>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d294:	02043983          	ld	s3,32(s0)
    8000d298:	6c0994e3          	bnez	s3,8000e160 <tinst_tests_gpf+0x2f62>
    8000d29c:	00025597          	auipc	a1,0x25
    8000d2a0:	40c58593          	addi	a1,a1,1036 # 800326a8 <__func__.0+0x2c0>
    8000d2a4:	847fe06f          	j	8000baea <tinst_tests_gpf+0x8ec>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000d2a8:	701c                	ld	a5,32(s0)
    8000d2aa:	e399                	bnez	a5,8000d2b0 <tinst_tests_gpf+0x20b2>
    8000d2ac:	c31fe06f          	j	8000bedc <tinst_tests_gpf+0xcde>
    8000d2b0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d2b2:	0016f713          	andi	a4,a3,1
    8000d2b6:	14071163          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d2ba:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d2be:	460d                	li	a2,3
    8000d2c0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d2c4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d2c6:	00c59763          	bne	a1,a2,8000d2d4 <tinst_tests_gpf+0x20d6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d2ca:	0026d683          	lhu	a3,2(a3)
    8000d2ce:	0106969b          	slliw	a3,a3,0x10
    8000d2d2:	8f55                	or	a4,a4,a3
    8000d2d4:	1ffe16b7          	lui	a3,0x1ffe1
    8000d2d8:	068e                	slli	a3,a3,0x3
    8000d2da:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d2dc:	8f75                	and	a4,a4,a3
    8000d2de:	00e78463          	beq	a5,a4,8000d2e6 <tinst_tests_gpf+0x20e8>
    8000d2e2:	be7fe06f          	j	8000bec8 <tinst_tests_gpf+0xcca>
    8000d2e6:	bf7fe06f          	j	8000bedc <tinst_tests_gpf+0xcde>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000d2ea:	02043903          	ld	s2,32(s0)
    8000d2ee:	6e0912e3          	bnez	s2,8000e1d2 <tinst_tests_gpf+0x2fd4>
    8000d2f2:	00025597          	auipc	a1,0x25
    8000d2f6:	3b658593          	addi	a1,a1,950 # 800326a8 <__func__.0+0x2c0>
    8000d2fa:	887fe06f          	j	8000bb80 <tinst_tests_gpf+0x982>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000d2fe:	7018                	ld	a4,32(s0)
    8000d300:	e319                	bnez	a4,8000d306 <tinst_tests_gpf+0x2108>
    8000d302:	8e6fe06f          	j	8000b3e8 <tinst_tests_gpf+0x1ea>
    8000d306:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d308:	0016f793          	andi	a5,a3,1
    8000d30c:	e7f5                	bnez	a5,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d30e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d312:	460d                	li	a2,3
    8000d314:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d318:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d31a:	00c59763          	bne	a1,a2,8000d328 <tinst_tests_gpf+0x212a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d31e:	0026d683          	lhu	a3,2(a3)
    8000d322:	0106969b          	slliw	a3,a3,0x10
    8000d326:	8fd5                	or	a5,a5,a3
    8000d328:	03179493          	slli	s1,a5,0x31
    8000d32c:	90c5                	srli	s1,s1,0x31
    8000d32e:	8c99                	sub	s1,s1,a4
    8000d330:	0014b493          	seqz	s1,s1
    8000d334:	8b4fe06f          	j	8000b3e8 <tinst_tests_gpf+0x1ea>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000d338:	7018                	ld	a4,32(s0)
    8000d33a:	e319                	bnez	a4,8000d340 <tinst_tests_gpf+0x2142>
    8000d33c:	942fe06f          	j	8000b47e <tinst_tests_gpf+0x280>
    8000d340:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d342:	0016f793          	andi	a5,a3,1
    8000d346:	ebcd                	bnez	a5,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d348:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d34c:	460d                	li	a2,3
    8000d34e:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d352:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d354:	00c59763          	bne	a1,a2,8000d362 <tinst_tests_gpf+0x2164>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d358:	0026d683          	lhu	a3,2(a3)
    8000d35c:	0106969b          	slliw	a3,a3,0x10
    8000d360:	8fd5                	or	a5,a5,a3
    8000d362:	03179493          	slli	s1,a5,0x31
    8000d366:	90c5                	srli	s1,s1,0x31
    8000d368:	8c99                	sub	s1,s1,a4
    8000d36a:	0014b493          	seqz	s1,s1
    8000d36e:	910fe06f          	j	8000b47e <tinst_tests_gpf+0x280>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000d372:	7018                	ld	a4,32(s0)
    8000d374:	e319                	bnez	a4,8000d37a <tinst_tests_gpf+0x217c>
    8000d376:	9aafe06f          	j	8000b520 <tinst_tests_gpf+0x322>
    8000d37a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d37c:	0016f793          	andi	a5,a3,1
    8000d380:	efa5                	bnez	a5,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d382:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d386:	460d                	li	a2,3
    8000d388:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d38c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d38e:	00c59763          	bne	a1,a2,8000d39c <tinst_tests_gpf+0x219e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d392:	0026d683          	lhu	a3,2(a3)
    8000d396:	0106969b          	slliw	a3,a3,0x10
    8000d39a:	8fd5                	or	a5,a5,a3
    8000d39c:	03179493          	slli	s1,a5,0x31
    8000d3a0:	90c5                	srli	s1,s1,0x31
    8000d3a2:	8c99                	sub	s1,s1,a4
    8000d3a4:	0014b493          	seqz	s1,s1
    8000d3a8:	978fe06f          	j	8000b520 <tinst_tests_gpf+0x322>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000d3ac:	7018                	ld	a4,32(s0)
    8000d3ae:	e319                	bnez	a4,8000d3b4 <tinst_tests_gpf+0x21b6>
    8000d3b0:	a12fe06f          	j	8000b5c2 <tinst_tests_gpf+0x3c4>
    8000d3b4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3b6:	0016f793          	andi	a5,a3,1
    8000d3ba:	ef9d                	bnez	a5,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d3bc:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d3c0:	460d                	li	a2,3
    8000d3c2:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d3c6:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d3c8:	00c59763          	bne	a1,a2,8000d3d6 <tinst_tests_gpf+0x21d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d3cc:	0026d683          	lhu	a3,2(a3)
    8000d3d0:	0106969b          	slliw	a3,a3,0x10
    8000d3d4:	8fd5                	or	a5,a5,a3
    8000d3d6:	17c6                	slli	a5,a5,0x31
    8000d3d8:	0317d493          	srli	s1,a5,0x31
    8000d3dc:	8c99                	sub	s1,s1,a4
    8000d3de:	0014b493          	seqz	s1,s1
    8000d3e2:	9e0fe06f          	j	8000b5c2 <tinst_tests_gpf+0x3c4>
    8000d3e6:	701c                	ld	a5,32(s0)
    8000d3e8:	e399                	bnez	a5,8000d3ee <tinst_tests_gpf+0x21f0>
    8000d3ea:	9b8fe06f          	j	8000b5a2 <tinst_tests_gpf+0x3a4>
    8000d3ee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3f0:	0016f713          	andi	a4,a3,1
    8000d3f4:	320704e3          	beqz	a4,8000df1c <tinst_tests_gpf+0x2d1e>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    8000d3f8:	12300613          	li	a2,291
    8000d3fc:	00023597          	auipc	a1,0x23
    8000d400:	43458593          	addi	a1,a1,1076 # 80030830 <__func__.1>
    8000d404:	00027517          	auipc	a0,0x27
    8000d408:	c9450513          	addi	a0,a0,-876 # 80034098 <__func__.0+0x1cb0>
    8000d40c:	0b8220ef          	jal	8002f4c4 <printf>
    8000d410:	12300613          	li	a2,291
    8000d414:	00023597          	auipc	a1,0x23
    8000d418:	41c58593          	addi	a1,a1,1052 # 80030830 <__func__.1>
    8000d41c:	00025517          	auipc	a0,0x25
    8000d420:	43c50513          	addi	a0,a0,1084 # 80032858 <__func__.0+0x470>
    8000d424:	0a0220ef          	jal	8002f4c4 <printf>
    8000d428:	4501                	li	a0,0
    8000d42a:	451210ef          	jal	8002f07a <exit>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000d42e:	701c                	ld	a5,32(s0)
    8000d430:	00025597          	auipc	a1,0x25
    8000d434:	27858593          	addi	a1,a1,632 # 800326a8 <__func__.0+0x2c0>
    8000d438:	e399                	bnez	a5,8000d43e <tinst_tests_gpf+0x2240>
    8000d43a:	ba5fe06f          	j	8000bfde <tinst_tests_gpf+0xde0>
    8000d43e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d440:	0016f713          	andi	a4,a3,1
    8000d444:	fb55                	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d446:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d44a:	460d                	li	a2,3
    8000d44c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d450:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d452:	00c59763          	bne	a1,a2,8000d460 <tinst_tests_gpf+0x2262>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d456:	0026d683          	lhu	a3,2(a3)
    8000d45a:	0106969b          	slliw	a3,a3,0x10
    8000d45e:	8f55                	or	a4,a4,a3
    8000d460:	1ffe16b7          	lui	a3,0x1ffe1
    8000d464:	068e                	slli	a3,a3,0x3
    8000d466:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d468:	8f75                	and	a4,a4,a3
    8000d46a:	00025597          	auipc	a1,0x25
    8000d46e:	23e58593          	addi	a1,a1,574 # 800326a8 <__func__.0+0x2c0>
    8000d472:	00e79463          	bne	a5,a4,8000d47a <tinst_tests_gpf+0x227c>
    8000d476:	b69fe06f          	j	8000bfde <tinst_tests_gpf+0xde0>
    8000d47a:	00025597          	auipc	a1,0x25
    8000d47e:	23e58593          	addi	a1,a1,574 # 800326b8 <__func__.0+0x2d0>
    8000d482:	b5dfe06f          	j	8000bfde <tinst_tests_gpf+0xde0>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000d486:	701c                	ld	a5,32(s0)
    8000d488:	e399                	bnez	a5,8000d48e <tinst_tests_gpf+0x2290>
    8000d48a:	9bafe06f          	j	8000b644 <tinst_tests_gpf+0x446>
    8000d48e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d490:	0016f713          	andi	a4,a3,1
    8000d494:	f335                	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d496:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d49a:	460d                	li	a2,3
    8000d49c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d4a0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d4a2:	00c59763          	bne	a1,a2,8000d4b0 <tinst_tests_gpf+0x22b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d4a6:	0026d683          	lhu	a3,2(a3)
    8000d4aa:	0106969b          	slliw	a3,a3,0x10
    8000d4ae:	8f55                	or	a4,a4,a3
    8000d4b0:	1746                	slli	a4,a4,0x31
    8000d4b2:	9345                	srli	a4,a4,0x31
    8000d4b4:	00e78463          	beq	a5,a4,8000d4bc <tinst_tests_gpf+0x22be>
    8000d4b8:	978fe06f          	j	8000b630 <tinst_tests_gpf+0x432>
    8000d4bc:	988fe06f          	j	8000b644 <tinst_tests_gpf+0x446>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000d4c0:	701c                	ld	a5,32(s0)
    8000d4c2:	00025597          	auipc	a1,0x25
    8000d4c6:	1e658593          	addi	a1,a1,486 # 800326a8 <__func__.0+0x2c0>
    8000d4ca:	e399                	bnez	a5,8000d4d0 <tinst_tests_gpf+0x22d2>
    8000d4cc:	bb5fe06f          	j	8000c080 <tinst_tests_gpf+0xe82>
    8000d4d0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d4d2:	0016f713          	andi	a4,a3,1
    8000d4d6:	f30d                	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d4d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d4dc:	460d                	li	a2,3
    8000d4de:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d4e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d4e4:	00c59763          	bne	a1,a2,8000d4f2 <tinst_tests_gpf+0x22f4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d4e8:	0026d683          	lhu	a3,2(a3)
    8000d4ec:	0106969b          	slliw	a3,a3,0x10
    8000d4f0:	8f55                	or	a4,a4,a3
    8000d4f2:	1ffe16b7          	lui	a3,0x1ffe1
    8000d4f6:	068e                	slli	a3,a3,0x3
    8000d4f8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d4fa:	8f75                	and	a4,a4,a3
    8000d4fc:	00025597          	auipc	a1,0x25
    8000d500:	1ac58593          	addi	a1,a1,428 # 800326a8 <__func__.0+0x2c0>
    8000d504:	00e79463          	bne	a5,a4,8000d50c <tinst_tests_gpf+0x230e>
    8000d508:	b79fe06f          	j	8000c080 <tinst_tests_gpf+0xe82>
    8000d50c:	00025597          	auipc	a1,0x25
    8000d510:	1ac58593          	addi	a1,a1,428 # 800326b8 <__func__.0+0x2d0>
    8000d514:	b6dfe06f          	j	8000c080 <tinst_tests_gpf+0xe82>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000d518:	701c                	ld	a5,32(s0)
    8000d51a:	e399                	bnez	a5,8000d520 <tinst_tests_gpf+0x2322>
    8000d51c:	9c2fe06f          	j	8000b6de <tinst_tests_gpf+0x4e0>
    8000d520:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d522:	0016f713          	andi	a4,a3,1
    8000d526:	ec0719e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d52a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d52e:	460d                	li	a2,3
    8000d530:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d534:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d536:	00c59763          	bne	a1,a2,8000d544 <tinst_tests_gpf+0x2346>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d53a:	0026d683          	lhu	a3,2(a3)
    8000d53e:	0106969b          	slliw	a3,a3,0x10
    8000d542:	8f55                	or	a4,a4,a3
    8000d544:	1746                	slli	a4,a4,0x31
    8000d546:	9345                	srli	a4,a4,0x31
    8000d548:	00e78463          	beq	a5,a4,8000d550 <tinst_tests_gpf+0x2352>
    8000d54c:	97efe06f          	j	8000b6ca <tinst_tests_gpf+0x4cc>
    8000d550:	98efe06f          	j	8000b6de <tinst_tests_gpf+0x4e0>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000d554:	701c                	ld	a5,32(s0)
    8000d556:	00025597          	auipc	a1,0x25
    8000d55a:	15258593          	addi	a1,a1,338 # 800326a8 <__func__.0+0x2c0>
    8000d55e:	e399                	bnez	a5,8000d564 <tinst_tests_gpf+0x2366>
    8000d560:	bc3fe06f          	j	8000c122 <tinst_tests_gpf+0xf24>
    8000d564:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d566:	0016f713          	andi	a4,a3,1
    8000d56a:	e80717e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d56e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d572:	460d                	li	a2,3
    8000d574:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d578:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d57a:	00c59763          	bne	a1,a2,8000d588 <tinst_tests_gpf+0x238a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d57e:	0026d683          	lhu	a3,2(a3)
    8000d582:	0106969b          	slliw	a3,a3,0x10
    8000d586:	8f55                	or	a4,a4,a3
    8000d588:	1ffe16b7          	lui	a3,0x1ffe1
    8000d58c:	068e                	slli	a3,a3,0x3
    8000d58e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d590:	8f75                	and	a4,a4,a3
    8000d592:	00025597          	auipc	a1,0x25
    8000d596:	11658593          	addi	a1,a1,278 # 800326a8 <__func__.0+0x2c0>
    8000d59a:	00e79463          	bne	a5,a4,8000d5a2 <tinst_tests_gpf+0x23a4>
    8000d59e:	b85fe06f          	j	8000c122 <tinst_tests_gpf+0xf24>
    8000d5a2:	00025597          	auipc	a1,0x25
    8000d5a6:	11658593          	addi	a1,a1,278 # 800326b8 <__func__.0+0x2d0>
    8000d5aa:	b79fe06f          	j	8000c122 <tinst_tests_gpf+0xf24>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000d5ae:	701c                	ld	a5,32(s0)
    8000d5b0:	e399                	bnez	a5,8000d5b6 <tinst_tests_gpf+0x23b8>
    8000d5b2:	9c8fe06f          	j	8000b77a <tinst_tests_gpf+0x57c>
    8000d5b6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d5b8:	0016f713          	andi	a4,a3,1
    8000d5bc:	e2071ee3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d5c0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d5c4:	460d                	li	a2,3
    8000d5c6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d5ca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d5cc:	00c59763          	bne	a1,a2,8000d5da <tinst_tests_gpf+0x23dc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d5d0:	0026d683          	lhu	a3,2(a3)
    8000d5d4:	0106969b          	slliw	a3,a3,0x10
    8000d5d8:	8f55                	or	a4,a4,a3
    8000d5da:	01f076b7          	lui	a3,0x1f07
    8000d5de:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d5e2:	8f75                	and	a4,a4,a3
    8000d5e4:	00e78463          	beq	a5,a4,8000d5ec <tinst_tests_gpf+0x23ee>
    8000d5e8:	97efe06f          	j	8000b766 <tinst_tests_gpf+0x568>
    8000d5ec:	98efe06f          	j	8000b77a <tinst_tests_gpf+0x57c>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000d5f0:	701c                	ld	a5,32(s0)
    8000d5f2:	00025597          	auipc	a1,0x25
    8000d5f6:	0b658593          	addi	a1,a1,182 # 800326a8 <__func__.0+0x2c0>
    8000d5fa:	e399                	bnez	a5,8000d600 <tinst_tests_gpf+0x2402>
    8000d5fc:	bc9fe06f          	j	8000c1c4 <tinst_tests_gpf+0xfc6>
    8000d600:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d602:	0016f713          	andi	a4,a3,1
    8000d606:	de0719e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d60a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d60e:	460d                	li	a2,3
    8000d610:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d614:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d616:	00c59763          	bne	a1,a2,8000d624 <tinst_tests_gpf+0x2426>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d61a:	0026d683          	lhu	a3,2(a3)
    8000d61e:	0106969b          	slliw	a3,a3,0x10
    8000d622:	8f55                	or	a4,a4,a3
    8000d624:	1ffe16b7          	lui	a3,0x1ffe1
    8000d628:	068e                	slli	a3,a3,0x3
    8000d62a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d62c:	8f75                	and	a4,a4,a3
    8000d62e:	00025597          	auipc	a1,0x25
    8000d632:	07a58593          	addi	a1,a1,122 # 800326a8 <__func__.0+0x2c0>
    8000d636:	00e79463          	bne	a5,a4,8000d63e <tinst_tests_gpf+0x2440>
    8000d63a:	b8bfe06f          	j	8000c1c4 <tinst_tests_gpf+0xfc6>
    8000d63e:	00025597          	auipc	a1,0x25
    8000d642:	07a58593          	addi	a1,a1,122 # 800326b8 <__func__.0+0x2d0>
    8000d646:	b7ffe06f          	j	8000c1c4 <tinst_tests_gpf+0xfc6>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d64a:	701c                	ld	a5,32(s0)
    8000d64c:	e399                	bnez	a5,8000d652 <tinst_tests_gpf+0x2454>
    8000d64e:	9ccfe06f          	j	8000b81a <tinst_tests_gpf+0x61c>
    8000d652:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d654:	0016f713          	andi	a4,a3,1
    8000d658:	da0710e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d65c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d660:	460d                	li	a2,3
    8000d662:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d666:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d668:	00c59763          	bne	a1,a2,8000d676 <tinst_tests_gpf+0x2478>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d66c:	0026d683          	lhu	a3,2(a3)
    8000d670:	0106969b          	slliw	a3,a3,0x10
    8000d674:	8f55                	or	a4,a4,a3
    8000d676:	01f076b7          	lui	a3,0x1f07
    8000d67a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d67e:	8f75                	and	a4,a4,a3
    8000d680:	00e78463          	beq	a5,a4,8000d688 <tinst_tests_gpf+0x248a>
    8000d684:	982fe06f          	j	8000b806 <tinst_tests_gpf+0x608>
    8000d688:	992fe06f          	j	8000b81a <tinst_tests_gpf+0x61c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000d68c:	701c                	ld	a5,32(s0)
    8000d68e:	00025597          	auipc	a1,0x25
    8000d692:	01a58593          	addi	a1,a1,26 # 800326a8 <__func__.0+0x2c0>
    8000d696:	e399                	bnez	a5,8000d69c <tinst_tests_gpf+0x249e>
    8000d698:	bd5fe06f          	j	8000c26c <tinst_tests_gpf+0x106e>
    8000d69c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d69e:	0016f713          	andi	a4,a3,1
    8000d6a2:	d4071be3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d6a6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d6aa:	460d                	li	a2,3
    8000d6ac:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d6b0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d6b2:	00c59763          	bne	a1,a2,8000d6c0 <tinst_tests_gpf+0x24c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d6b6:	0026d683          	lhu	a3,2(a3)
    8000d6ba:	0106969b          	slliw	a3,a3,0x10
    8000d6be:	8f55                	or	a4,a4,a3
    8000d6c0:	1ffe16b7          	lui	a3,0x1ffe1
    8000d6c4:	068e                	slli	a3,a3,0x3
    8000d6c6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d6c8:	8f75                	and	a4,a4,a3
    8000d6ca:	00025597          	auipc	a1,0x25
    8000d6ce:	fde58593          	addi	a1,a1,-34 # 800326a8 <__func__.0+0x2c0>
    8000d6d2:	00e79463          	bne	a5,a4,8000d6da <tinst_tests_gpf+0x24dc>
    8000d6d6:	b97fe06f          	j	8000c26c <tinst_tests_gpf+0x106e>
    8000d6da:	00025597          	auipc	a1,0x25
    8000d6de:	fde58593          	addi	a1,a1,-34 # 800326b8 <__func__.0+0x2d0>
    8000d6e2:	b8bfe06f          	j	8000c26c <tinst_tests_gpf+0x106e>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d6e6:	701c                	ld	a5,32(s0)
    8000d6e8:	e399                	bnez	a5,8000d6ee <tinst_tests_gpf+0x24f0>
    8000d6ea:	9d2fe06f          	j	8000b8bc <tinst_tests_gpf+0x6be>
    8000d6ee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d6f0:	0016f713          	andi	a4,a3,1
    8000d6f4:	d00712e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d6f8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d6fc:	460d                	li	a2,3
    8000d6fe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d702:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d704:	00c59763          	bne	a1,a2,8000d712 <tinst_tests_gpf+0x2514>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d708:	0026d683          	lhu	a3,2(a3)
    8000d70c:	0106969b          	slliw	a3,a3,0x10
    8000d710:	8f55                	or	a4,a4,a3
    8000d712:	01f076b7          	lui	a3,0x1f07
    8000d716:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d71a:	8f75                	and	a4,a4,a3
    8000d71c:	00e78463          	beq	a5,a4,8000d724 <tinst_tests_gpf+0x2526>
    8000d720:	988fe06f          	j	8000b8a8 <tinst_tests_gpf+0x6aa>
    8000d724:	998fe06f          	j	8000b8bc <tinst_tests_gpf+0x6be>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000d728:	701c                	ld	a5,32(s0)
    8000d72a:	00025597          	auipc	a1,0x25
    8000d72e:	f7e58593          	addi	a1,a1,-130 # 800326a8 <__func__.0+0x2c0>
    8000d732:	e399                	bnez	a5,8000d738 <tinst_tests_gpf+0x253a>
    8000d734:	bdbfe06f          	j	8000c30e <tinst_tests_gpf+0x1110>
    8000d738:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d73a:	0016f713          	andi	a4,a3,1
    8000d73e:	ca071de3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d742:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d746:	460d                	li	a2,3
    8000d748:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d74c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d74e:	00c59763          	bne	a1,a2,8000d75c <tinst_tests_gpf+0x255e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d752:	0026d683          	lhu	a3,2(a3)
    8000d756:	0106969b          	slliw	a3,a3,0x10
    8000d75a:	8f55                	or	a4,a4,a3
    8000d75c:	1ffe16b7          	lui	a3,0x1ffe1
    8000d760:	068e                	slli	a3,a3,0x3
    8000d762:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d764:	8f75                	and	a4,a4,a3
    8000d766:	00025597          	auipc	a1,0x25
    8000d76a:	f4258593          	addi	a1,a1,-190 # 800326a8 <__func__.0+0x2c0>
    8000d76e:	00e79463          	bne	a5,a4,8000d776 <tinst_tests_gpf+0x2578>
    8000d772:	b9dfe06f          	j	8000c30e <tinst_tests_gpf+0x1110>
    8000d776:	00025597          	auipc	a1,0x25
    8000d77a:	f4258593          	addi	a1,a1,-190 # 800326b8 <__func__.0+0x2d0>
    8000d77e:	b91fe06f          	j	8000c30e <tinst_tests_gpf+0x1110>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d782:	701c                	ld	a5,32(s0)
    8000d784:	e399                	bnez	a5,8000d78a <tinst_tests_gpf+0x258c>
    8000d786:	9dafe06f          	j	8000b960 <tinst_tests_gpf+0x762>
    8000d78a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d78c:	0016f713          	andi	a4,a3,1
    8000d790:	c60714e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d794:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d798:	460d                	li	a2,3
    8000d79a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d79e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d7a0:	00c59763          	bne	a1,a2,8000d7ae <tinst_tests_gpf+0x25b0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d7a4:	0026d683          	lhu	a3,2(a3)
    8000d7a8:	0106969b          	slliw	a3,a3,0x10
    8000d7ac:	8f55                	or	a4,a4,a3
    8000d7ae:	01f076b7          	lui	a3,0x1f07
    8000d7b2:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d7b6:	8f75                	and	a4,a4,a3
    8000d7b8:	00e78463          	beq	a5,a4,8000d7c0 <tinst_tests_gpf+0x25c2>
    8000d7bc:	990fe06f          	j	8000b94c <tinst_tests_gpf+0x74e>
    8000d7c0:	9a0fe06f          	j	8000b960 <tinst_tests_gpf+0x762>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000d7c4:	701c                	ld	a5,32(s0)
    8000d7c6:	00025597          	auipc	a1,0x25
    8000d7ca:	ee258593          	addi	a1,a1,-286 # 800326a8 <__func__.0+0x2c0>
    8000d7ce:	e399                	bnez	a5,8000d7d4 <tinst_tests_gpf+0x25d6>
    8000d7d0:	be1fe06f          	j	8000c3b0 <tinst_tests_gpf+0x11b2>
    8000d7d4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d7d6:	0016f713          	andi	a4,a3,1
    8000d7da:	c0071fe3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d7de:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d7e2:	460d                	li	a2,3
    8000d7e4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d7e8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d7ea:	00c59763          	bne	a1,a2,8000d7f8 <tinst_tests_gpf+0x25fa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d7ee:	0026d683          	lhu	a3,2(a3)
    8000d7f2:	0106969b          	slliw	a3,a3,0x10
    8000d7f6:	8f55                	or	a4,a4,a3
    8000d7f8:	1ffe16b7          	lui	a3,0x1ffe1
    8000d7fc:	068e                	slli	a3,a3,0x3
    8000d7fe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d800:	8f75                	and	a4,a4,a3
    8000d802:	00025597          	auipc	a1,0x25
    8000d806:	ea658593          	addi	a1,a1,-346 # 800326a8 <__func__.0+0x2c0>
    8000d80a:	00e79463          	bne	a5,a4,8000d812 <tinst_tests_gpf+0x2614>
    8000d80e:	ba3fe06f          	j	8000c3b0 <tinst_tests_gpf+0x11b2>
    8000d812:	00025597          	auipc	a1,0x25
    8000d816:	ea658593          	addi	a1,a1,-346 # 800326b8 <__func__.0+0x2d0>
    8000d81a:	b97fe06f          	j	8000c3b0 <tinst_tests_gpf+0x11b2>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d81e:	02043903          	ld	s2,32(s0)
    8000d822:	00091463          	bnez	s2,8000d82a <tinst_tests_gpf+0x262c>
    8000d826:	9cefe06f          	j	8000b9f4 <tinst_tests_gpf+0x7f6>
    8000d82a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d82c:	0017f713          	andi	a4,a5,1
    8000d830:	bc0714e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d834:	0007d503          	lhu	a0,0(a5)
    8000d838:	e5bf30ef          	jal	80001692 <expand_compressed_instruction>
    8000d83c:	67a1                	lui	a5,0x8
    8000d83e:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d840:	8d7d                	and	a0,a0,a5
    8000d842:	00a90463          	beq	s2,a0,8000d84a <tinst_tests_gpf+0x264c>
    8000d846:	99afe06f          	j	8000b9e0 <tinst_tests_gpf+0x7e2>
    8000d84a:	9aafe06f          	j	8000b9f4 <tinst_tests_gpf+0x7f6>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000d84e:	701c                	ld	a5,32(s0)
    8000d850:	00025597          	auipc	a1,0x25
    8000d854:	e5858593          	addi	a1,a1,-424 # 800326a8 <__func__.0+0x2c0>
    8000d858:	e399                	bnez	a5,8000d85e <tinst_tests_gpf+0x2660>
    8000d85a:	bf9fe06f          	j	8000c452 <tinst_tests_gpf+0x1254>
    8000d85e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d860:	0016f713          	andi	a4,a3,1
    8000d864:	b8071ae3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d868:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d86c:	460d                	li	a2,3
    8000d86e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d872:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d874:	00c59763          	bne	a1,a2,8000d882 <tinst_tests_gpf+0x2684>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d878:	0026d683          	lhu	a3,2(a3)
    8000d87c:	0106969b          	slliw	a3,a3,0x10
    8000d880:	8f55                	or	a4,a4,a3
    8000d882:	1ffe16b7          	lui	a3,0x1ffe1
    8000d886:	068e                	slli	a3,a3,0x3
    8000d888:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d88a:	8f75                	and	a4,a4,a3
    8000d88c:	00025597          	auipc	a1,0x25
    8000d890:	e1c58593          	addi	a1,a1,-484 # 800326a8 <__func__.0+0x2c0>
    8000d894:	00e79463          	bne	a5,a4,8000d89c <tinst_tests_gpf+0x269e>
    8000d898:	bbbfe06f          	j	8000c452 <tinst_tests_gpf+0x1254>
    8000d89c:	00025597          	auipc	a1,0x25
    8000d8a0:	e1c58593          	addi	a1,a1,-484 # 800326b8 <__func__.0+0x2d0>
    8000d8a4:	baffe06f          	j	8000c452 <tinst_tests_gpf+0x1254>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d8a8:	02043983          	ld	s3,32(s0)
    8000d8ac:	00099463          	bnez	s3,8000d8b4 <tinst_tests_gpf+0x26b6>
    8000d8b0:	9dafe06f          	j	8000ba8a <tinst_tests_gpf+0x88c>
    8000d8b4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d8b6:	0017f713          	andi	a4,a5,1
    8000d8ba:	b2071fe3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d8be:	0007d503          	lhu	a0,0(a5)
    8000d8c2:	dd1f30ef          	jal	80001692 <expand_compressed_instruction>
    8000d8c6:	67a1                	lui	a5,0x8
    8000d8c8:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d8ca:	8d7d                	and	a0,a0,a5
    8000d8cc:	00a98463          	beq	s3,a0,8000d8d4 <tinst_tests_gpf+0x26d6>
    8000d8d0:	9a6fe06f          	j	8000ba76 <tinst_tests_gpf+0x878>
    8000d8d4:	9b6fe06f          	j	8000ba8a <tinst_tests_gpf+0x88c>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000d8d8:	701c                	ld	a5,32(s0)
    8000d8da:	00025597          	auipc	a1,0x25
    8000d8de:	dce58593          	addi	a1,a1,-562 # 800326a8 <__func__.0+0x2c0>
    8000d8e2:	e399                	bnez	a5,8000d8e8 <tinst_tests_gpf+0x26ea>
    8000d8e4:	c11fe06f          	j	8000c4f4 <tinst_tests_gpf+0x12f6>
    8000d8e8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d8ea:	0016f713          	andi	a4,a3,1
    8000d8ee:	b00715e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d8f2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d8f6:	460d                	li	a2,3
    8000d8f8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d8fc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d8fe:	00c59763          	bne	a1,a2,8000d90c <tinst_tests_gpf+0x270e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d902:	0026d683          	lhu	a3,2(a3)
    8000d906:	0106969b          	slliw	a3,a3,0x10
    8000d90a:	8f55                	or	a4,a4,a3
    8000d90c:	1ffe16b7          	lui	a3,0x1ffe1
    8000d910:	068e                	slli	a3,a3,0x3
    8000d912:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d914:	8f75                	and	a4,a4,a3
    8000d916:	00025597          	auipc	a1,0x25
    8000d91a:	d9258593          	addi	a1,a1,-622 # 800326a8 <__func__.0+0x2c0>
    8000d91e:	00e79463          	bne	a5,a4,8000d926 <tinst_tests_gpf+0x2728>
    8000d922:	bd3fe06f          	j	8000c4f4 <tinst_tests_gpf+0x12f6>
    8000d926:	00025597          	auipc	a1,0x25
    8000d92a:	d9258593          	addi	a1,a1,-622 # 800326b8 <__func__.0+0x2d0>
    8000d92e:	bc7fe06f          	j	8000c4f4 <tinst_tests_gpf+0x12f6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d932:	02043983          	ld	s3,32(s0)
    8000d936:	00099463          	bnez	s3,8000d93e <tinst_tests_gpf+0x2740>
    8000d93a:	9e6fe06f          	j	8000bb20 <tinst_tests_gpf+0x922>
    8000d93e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d940:	0017f713          	andi	a4,a5,1
    8000d944:	aa071ae3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d948:	0007d503          	lhu	a0,0(a5)
    8000d94c:	d47f30ef          	jal	80001692 <expand_compressed_instruction>
    8000d950:	01f077b7          	lui	a5,0x1f07
    8000d954:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000d958:	8d7d                	and	a0,a0,a5
    8000d95a:	00a98463          	beq	s3,a0,8000d962 <tinst_tests_gpf+0x2764>
    8000d95e:	9aefe06f          	j	8000bb0c <tinst_tests_gpf+0x90e>
    8000d962:	9befe06f          	j	8000bb20 <tinst_tests_gpf+0x922>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000d966:	701c                	ld	a5,32(s0)
    8000d968:	00025597          	auipc	a1,0x25
    8000d96c:	d4058593          	addi	a1,a1,-704 # 800326a8 <__func__.0+0x2c0>
    8000d970:	e399                	bnez	a5,8000d976 <tinst_tests_gpf+0x2778>
    8000d972:	c25fe06f          	j	8000c596 <tinst_tests_gpf+0x1398>
    8000d976:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d978:	0016f713          	andi	a4,a3,1
    8000d97c:	a6071ee3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d980:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d984:	460d                	li	a2,3
    8000d986:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d98a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d98c:	00c59763          	bne	a1,a2,8000d99a <tinst_tests_gpf+0x279c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d990:	0026d683          	lhu	a3,2(a3)
    8000d994:	0106969b          	slliw	a3,a3,0x10
    8000d998:	8f55                	or	a4,a4,a3
    8000d99a:	1ffe16b7          	lui	a3,0x1ffe1
    8000d99e:	068e                	slli	a3,a3,0x3
    8000d9a0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d9a2:	8f75                	and	a4,a4,a3
    8000d9a4:	00025597          	auipc	a1,0x25
    8000d9a8:	d0458593          	addi	a1,a1,-764 # 800326a8 <__func__.0+0x2c0>
    8000d9ac:	00e79463          	bne	a5,a4,8000d9b4 <tinst_tests_gpf+0x27b6>
    8000d9b0:	be7fe06f          	j	8000c596 <tinst_tests_gpf+0x1398>
    8000d9b4:	00025597          	auipc	a1,0x25
    8000d9b8:	d0458593          	addi	a1,a1,-764 # 800326b8 <__func__.0+0x2d0>
    8000d9bc:	bdbfe06f          	j	8000c596 <tinst_tests_gpf+0x1398>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000d9c0:	02043903          	ld	s2,32(s0)
    8000d9c4:	00091463          	bnez	s2,8000d9cc <tinst_tests_gpf+0x27ce>
    8000d9c8:	9eefe06f          	j	8000bbb6 <tinst_tests_gpf+0x9b8>
    8000d9cc:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d9ce:	0017f713          	andi	a4,a5,1
    8000d9d2:	a20713e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d9d6:	0007d503          	lhu	a0,0(a5)
    8000d9da:	cb9f30ef          	jal	80001692 <expand_compressed_instruction>
    8000d9de:	01f077b7          	lui	a5,0x1f07
    8000d9e2:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000d9e6:	8d7d                	and	a0,a0,a5
    8000d9e8:	00a90463          	beq	s2,a0,8000d9f0 <tinst_tests_gpf+0x27f2>
    8000d9ec:	9b6fe06f          	j	8000bba2 <tinst_tests_gpf+0x9a4>
    8000d9f0:	9c6fe06f          	j	8000bbb6 <tinst_tests_gpf+0x9b8>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000d9f4:	701c                	ld	a5,32(s0)
    8000d9f6:	00025597          	auipc	a1,0x25
    8000d9fa:	cb258593          	addi	a1,a1,-846 # 800326a8 <__func__.0+0x2c0>
    8000d9fe:	e399                	bnez	a5,8000da04 <tinst_tests_gpf+0x2806>
    8000da00:	c39fe06f          	j	8000c638 <tinst_tests_gpf+0x143a>
    8000da04:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000da06:	0016f713          	andi	a4,a3,1
    8000da0a:	9e0717e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000da0e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000da12:	460d                	li	a2,3
    8000da14:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000da18:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000da1a:	00c59763          	bne	a1,a2,8000da28 <tinst_tests_gpf+0x282a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000da1e:	0026d683          	lhu	a3,2(a3)
    8000da22:	0106969b          	slliw	a3,a3,0x10
    8000da26:	8f55                	or	a4,a4,a3
    8000da28:	1ffe16b7          	lui	a3,0x1ffe1
    8000da2c:	068e                	slli	a3,a3,0x3
    8000da2e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000da30:	8f75                	and	a4,a4,a3
    8000da32:	00025597          	auipc	a1,0x25
    8000da36:	c7658593          	addi	a1,a1,-906 # 800326a8 <__func__.0+0x2c0>
    8000da3a:	00e79463          	bne	a5,a4,8000da42 <tinst_tests_gpf+0x2844>
    8000da3e:	bfbfe06f          	j	8000c638 <tinst_tests_gpf+0x143a>
    8000da42:	00025597          	auipc	a1,0x25
    8000da46:	c7658593          	addi	a1,a1,-906 # 800326b8 <__func__.0+0x2d0>
    8000da4a:	beffe06f          	j	8000c638 <tinst_tests_gpf+0x143a>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000da4e:	701c                	ld	a5,32(s0)
    8000da50:	e399                	bnez	a5,8000da56 <tinst_tests_gpf+0x2858>
    8000da52:	a0cfe06f          	j	8000bc5e <tinst_tests_gpf+0xa60>
    8000da56:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000da58:	0016f713          	andi	a4,a3,1
    8000da5c:	98071ee3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000da60:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000da64:	460d                	li	a2,3
    8000da66:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000da6a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000da6c:	00c59763          	bne	a1,a2,8000da7a <tinst_tests_gpf+0x287c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000da70:	0026d683          	lhu	a3,2(a3)
    8000da74:	0106969b          	slliw	a3,a3,0x10
    8000da78:	8f55                	or	a4,a4,a3
    8000da7a:	1ffe16b7          	lui	a3,0x1ffe1
    8000da7e:	068e                	slli	a3,a3,0x3
    8000da80:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000da82:	8f75                	and	a4,a4,a3
    8000da84:	00e78463          	beq	a5,a4,8000da8c <tinst_tests_gpf+0x288e>
    8000da88:	9c2fe06f          	j	8000bc4a <tinst_tests_gpf+0xa4c>
    8000da8c:	9d2fe06f          	j	8000bc5e <tinst_tests_gpf+0xa60>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000da90:	701c                	ld	a5,32(s0)
    8000da92:	00025597          	auipc	a1,0x25
    8000da96:	c1658593          	addi	a1,a1,-1002 # 800326a8 <__func__.0+0x2c0>
    8000da9a:	e399                	bnez	a5,8000daa0 <tinst_tests_gpf+0x28a2>
    8000da9c:	c37fe06f          	j	8000c6d2 <tinst_tests_gpf+0x14d4>
    8000daa0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000daa2:	0016f713          	andi	a4,a3,1
    8000daa6:	940719e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000daaa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000daae:	460d                	li	a2,3
    8000dab0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dab4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dab6:	00c59763          	bne	a1,a2,8000dac4 <tinst_tests_gpf+0x28c6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000daba:	0026d683          	lhu	a3,2(a3)
    8000dabe:	0106969b          	slliw	a3,a3,0x10
    8000dac2:	8f55                	or	a4,a4,a3
    8000dac4:	1ffe16b7          	lui	a3,0x1ffe1
    8000dac8:	068e                	slli	a3,a3,0x3
    8000daca:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dacc:	8f75                	and	a4,a4,a3
    8000dace:	00025597          	auipc	a1,0x25
    8000dad2:	bda58593          	addi	a1,a1,-1062 # 800326a8 <__func__.0+0x2c0>
    8000dad6:	00e79463          	bne	a5,a4,8000dade <tinst_tests_gpf+0x28e0>
    8000dada:	bf9fe06f          	j	8000c6d2 <tinst_tests_gpf+0x14d4>
    8000dade:	00025597          	auipc	a1,0x25
    8000dae2:	bda58593          	addi	a1,a1,-1062 # 800326b8 <__func__.0+0x2d0>
    8000dae6:	bedfe06f          	j	8000c6d2 <tinst_tests_gpf+0x14d4>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000daea:	701c                	ld	a5,32(s0)
    8000daec:	00025597          	auipc	a1,0x25
    8000daf0:	bbc58593          	addi	a1,a1,-1092 # 800326a8 <__func__.0+0x2c0>
    8000daf4:	e399                	bnez	a5,8000dafa <tinst_tests_gpf+0x28fc>
    8000daf6:	c77fe06f          	j	8000c76c <tinst_tests_gpf+0x156e>
    8000dafa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dafc:	0016f713          	andi	a4,a3,1
    8000db00:	8e071ce3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000db04:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db08:	460d                	li	a2,3
    8000db0a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db0e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db10:	00c59763          	bne	a1,a2,8000db1e <tinst_tests_gpf+0x2920>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db14:	0026d683          	lhu	a3,2(a3)
    8000db18:	0106969b          	slliw	a3,a3,0x10
    8000db1c:	8f55                	or	a4,a4,a3
    8000db1e:	1ffe16b7          	lui	a3,0x1ffe1
    8000db22:	068e                	slli	a3,a3,0x3
    8000db24:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db26:	8f75                	and	a4,a4,a3
    8000db28:	00025597          	auipc	a1,0x25
    8000db2c:	b8058593          	addi	a1,a1,-1152 # 800326a8 <__func__.0+0x2c0>
    8000db30:	00e79463          	bne	a5,a4,8000db38 <tinst_tests_gpf+0x293a>
    8000db34:	c39fe06f          	j	8000c76c <tinst_tests_gpf+0x156e>
    8000db38:	00025597          	auipc	a1,0x25
    8000db3c:	b8058593          	addi	a1,a1,-1152 # 800326b8 <__func__.0+0x2d0>
    8000db40:	c2dfe06f          	j	8000c76c <tinst_tests_gpf+0x156e>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000db44:	701c                	ld	a5,32(s0)
    8000db46:	00025597          	auipc	a1,0x25
    8000db4a:	b6258593          	addi	a1,a1,-1182 # 800326a8 <__func__.0+0x2c0>
    8000db4e:	e399                	bnez	a5,8000db54 <tinst_tests_gpf+0x2956>
    8000db50:	cb7fe06f          	j	8000c806 <tinst_tests_gpf+0x1608>
    8000db54:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000db56:	0016f713          	andi	a4,a3,1
    8000db5a:	88071fe3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000db5e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db62:	460d                	li	a2,3
    8000db64:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db68:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db6a:	00c59763          	bne	a1,a2,8000db78 <tinst_tests_gpf+0x297a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db6e:	0026d683          	lhu	a3,2(a3)
    8000db72:	0106969b          	slliw	a3,a3,0x10
    8000db76:	8f55                	or	a4,a4,a3
    8000db78:	1ffe16b7          	lui	a3,0x1ffe1
    8000db7c:	068e                	slli	a3,a3,0x3
    8000db7e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db80:	8f75                	and	a4,a4,a3
    8000db82:	00025597          	auipc	a1,0x25
    8000db86:	b2658593          	addi	a1,a1,-1242 # 800326a8 <__func__.0+0x2c0>
    8000db8a:	00e79463          	bne	a5,a4,8000db92 <tinst_tests_gpf+0x2994>
    8000db8e:	c79fe06f          	j	8000c806 <tinst_tests_gpf+0x1608>
    8000db92:	00025597          	auipc	a1,0x25
    8000db96:	b2658593          	addi	a1,a1,-1242 # 800326b8 <__func__.0+0x2d0>
    8000db9a:	c6dfe06f          	j	8000c806 <tinst_tests_gpf+0x1608>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000db9e:	701c                	ld	a5,32(s0)
    8000dba0:	e399                	bnez	a5,8000dba6 <tinst_tests_gpf+0x29a8>
    8000dba2:	bd0fe06f          	j	8000bf72 <tinst_tests_gpf+0xd74>
    8000dba6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dba8:	0016f713          	andi	a4,a3,1
    8000dbac:	840716e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dbb0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dbb4:	460d                	li	a2,3
    8000dbb6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dbba:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dbbc:	00c59763          	bne	a1,a2,8000dbca <tinst_tests_gpf+0x29cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dbc0:	0026d683          	lhu	a3,2(a3)
    8000dbc4:	0106969b          	slliw	a3,a3,0x10
    8000dbc8:	8f55                	or	a4,a4,a3
    8000dbca:	1ffe16b7          	lui	a3,0x1ffe1
    8000dbce:	068e                	slli	a3,a3,0x3
    8000dbd0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dbd2:	8f75                	and	a4,a4,a3
    8000dbd4:	00e78463          	beq	a5,a4,8000dbdc <tinst_tests_gpf+0x29de>
    8000dbd8:	b86fe06f          	j	8000bf5e <tinst_tests_gpf+0xd60>
    8000dbdc:	b96fe06f          	j	8000bf72 <tinst_tests_gpf+0xd74>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000dbe0:	701c                	ld	a5,32(s0)
    8000dbe2:	e399                	bnez	a5,8000dbe8 <tinst_tests_gpf+0x29ea>
    8000dbe4:	c30fe06f          	j	8000c014 <tinst_tests_gpf+0xe16>
    8000dbe8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dbea:	0016f713          	andi	a4,a3,1
    8000dbee:	800715e3          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dbf2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dbf6:	460d                	li	a2,3
    8000dbf8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dbfc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dbfe:	00c59763          	bne	a1,a2,8000dc0c <tinst_tests_gpf+0x2a0e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc02:	0026d683          	lhu	a3,2(a3)
    8000dc06:	0106969b          	slliw	a3,a3,0x10
    8000dc0a:	8f55                	or	a4,a4,a3
    8000dc0c:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc10:	068e                	slli	a3,a3,0x3
    8000dc12:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc14:	8f75                	and	a4,a4,a3
    8000dc16:	00e78463          	beq	a5,a4,8000dc1e <tinst_tests_gpf+0x2a20>
    8000dc1a:	be6fe06f          	j	8000c000 <tinst_tests_gpf+0xe02>
    8000dc1e:	bf6fe06f          	j	8000c014 <tinst_tests_gpf+0xe16>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000dc22:	701c                	ld	a5,32(s0)
    8000dc24:	e399                	bnez	a5,8000dc2a <tinst_tests_gpf+0x2a2c>
    8000dc26:	c90fe06f          	j	8000c0b6 <tinst_tests_gpf+0xeb8>
    8000dc2a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc2c:	0016f713          	andi	a4,a3,1
    8000dc30:	fc071463          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dc34:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc38:	460d                	li	a2,3
    8000dc3a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dc3e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dc40:	00c59763          	bne	a1,a2,8000dc4e <tinst_tests_gpf+0x2a50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc44:	0026d683          	lhu	a3,2(a3)
    8000dc48:	0106969b          	slliw	a3,a3,0x10
    8000dc4c:	8f55                	or	a4,a4,a3
    8000dc4e:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc52:	068e                	slli	a3,a3,0x3
    8000dc54:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc56:	8f75                	and	a4,a4,a3
    8000dc58:	00e78463          	beq	a5,a4,8000dc60 <tinst_tests_gpf+0x2a62>
    8000dc5c:	c46fe06f          	j	8000c0a2 <tinst_tests_gpf+0xea4>
    8000dc60:	c56fe06f          	j	8000c0b6 <tinst_tests_gpf+0xeb8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000dc64:	701c                	ld	a5,32(s0)
    8000dc66:	e399                	bnez	a5,8000dc6c <tinst_tests_gpf+0x2a6e>
    8000dc68:	cf0fe06f          	j	8000c158 <tinst_tests_gpf+0xf5a>
    8000dc6c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc6e:	0016f713          	andi	a4,a3,1
    8000dc72:	f8071363          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dc76:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc7a:	460d                	li	a2,3
    8000dc7c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dc80:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dc82:	00c59763          	bne	a1,a2,8000dc90 <tinst_tests_gpf+0x2a92>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc86:	0026d683          	lhu	a3,2(a3)
    8000dc8a:	0106969b          	slliw	a3,a3,0x10
    8000dc8e:	8f55                	or	a4,a4,a3
    8000dc90:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc94:	068e                	slli	a3,a3,0x3
    8000dc96:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc98:	8f75                	and	a4,a4,a3
    8000dc9a:	00e78463          	beq	a5,a4,8000dca2 <tinst_tests_gpf+0x2aa4>
    8000dc9e:	ca6fe06f          	j	8000c144 <tinst_tests_gpf+0xf46>
    8000dca2:	cb6fe06f          	j	8000c158 <tinst_tests_gpf+0xf5a>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000dca6:	701c                	ld	a5,32(s0)
    8000dca8:	e399                	bnez	a5,8000dcae <tinst_tests_gpf+0x2ab0>
    8000dcaa:	d50fe06f          	j	8000c1fa <tinst_tests_gpf+0xffc>
    8000dcae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dcb0:	0016f713          	andi	a4,a3,1
    8000dcb4:	f4071263          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dcb8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dcbc:	460d                	li	a2,3
    8000dcbe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dcc2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dcc4:	00c59763          	bne	a1,a2,8000dcd2 <tinst_tests_gpf+0x2ad4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dcc8:	0026d683          	lhu	a3,2(a3)
    8000dccc:	0106969b          	slliw	a3,a3,0x10
    8000dcd0:	8f55                	or	a4,a4,a3
    8000dcd2:	1ffe16b7          	lui	a3,0x1ffe1
    8000dcd6:	068e                	slli	a3,a3,0x3
    8000dcd8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dcda:	8f75                	and	a4,a4,a3
    8000dcdc:	00e78463          	beq	a5,a4,8000dce4 <tinst_tests_gpf+0x2ae6>
    8000dce0:	d06fe06f          	j	8000c1e6 <tinst_tests_gpf+0xfe8>
    8000dce4:	d16fe06f          	j	8000c1fa <tinst_tests_gpf+0xffc>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000dce8:	701c                	ld	a5,32(s0)
    8000dcea:	e399                	bnez	a5,8000dcf0 <tinst_tests_gpf+0x2af2>
    8000dcec:	db6fe06f          	j	8000c2a2 <tinst_tests_gpf+0x10a4>
    8000dcf0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dcf2:	0016f713          	andi	a4,a3,1
    8000dcf6:	f0071163          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dcfa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dcfe:	460d                	li	a2,3
    8000dd00:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd04:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd06:	00c59763          	bne	a1,a2,8000dd14 <tinst_tests_gpf+0x2b16>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd0a:	0026d683          	lhu	a3,2(a3)
    8000dd0e:	0106969b          	slliw	a3,a3,0x10
    8000dd12:	8f55                	or	a4,a4,a3
    8000dd14:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd18:	068e                	slli	a3,a3,0x3
    8000dd1a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd1c:	8f75                	and	a4,a4,a3
    8000dd1e:	00e78463          	beq	a5,a4,8000dd26 <tinst_tests_gpf+0x2b28>
    8000dd22:	d6cfe06f          	j	8000c28e <tinst_tests_gpf+0x1090>
    8000dd26:	d7cfe06f          	j	8000c2a2 <tinst_tests_gpf+0x10a4>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000dd2a:	701c                	ld	a5,32(s0)
    8000dd2c:	e399                	bnez	a5,8000dd32 <tinst_tests_gpf+0x2b34>
    8000dd2e:	e16fe06f          	j	8000c344 <tinst_tests_gpf+0x1146>
    8000dd32:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd34:	0016f713          	andi	a4,a3,1
    8000dd38:	ec071063          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dd3c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd40:	460d                	li	a2,3
    8000dd42:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd46:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd48:	00c59763          	bne	a1,a2,8000dd56 <tinst_tests_gpf+0x2b58>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd4c:	0026d683          	lhu	a3,2(a3)
    8000dd50:	0106969b          	slliw	a3,a3,0x10
    8000dd54:	8f55                	or	a4,a4,a3
    8000dd56:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd5a:	068e                	slli	a3,a3,0x3
    8000dd5c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd5e:	8f75                	and	a4,a4,a3
    8000dd60:	00e78463          	beq	a5,a4,8000dd68 <tinst_tests_gpf+0x2b6a>
    8000dd64:	dccfe06f          	j	8000c330 <tinst_tests_gpf+0x1132>
    8000dd68:	ddcfe06f          	j	8000c344 <tinst_tests_gpf+0x1146>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000dd6c:	701c                	ld	a5,32(s0)
    8000dd6e:	e399                	bnez	a5,8000dd74 <tinst_tests_gpf+0x2b76>
    8000dd70:	e76fe06f          	j	8000c3e6 <tinst_tests_gpf+0x11e8>
    8000dd74:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd76:	0016f713          	andi	a4,a3,1
    8000dd7a:	e6071f63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dd7e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd82:	460d                	li	a2,3
    8000dd84:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd88:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd8a:	00c59763          	bne	a1,a2,8000dd98 <tinst_tests_gpf+0x2b9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd8e:	0026d683          	lhu	a3,2(a3)
    8000dd92:	0106969b          	slliw	a3,a3,0x10
    8000dd96:	8f55                	or	a4,a4,a3
    8000dd98:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd9c:	068e                	slli	a3,a3,0x3
    8000dd9e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dda0:	8f75                	and	a4,a4,a3
    8000dda2:	00e78463          	beq	a5,a4,8000ddaa <tinst_tests_gpf+0x2bac>
    8000dda6:	e2cfe06f          	j	8000c3d2 <tinst_tests_gpf+0x11d4>
    8000ddaa:	e3cfe06f          	j	8000c3e6 <tinst_tests_gpf+0x11e8>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000ddae:	701c                	ld	a5,32(s0)
    8000ddb0:	e399                	bnez	a5,8000ddb6 <tinst_tests_gpf+0x2bb8>
    8000ddb2:	ed6fe06f          	j	8000c488 <tinst_tests_gpf+0x128a>
    8000ddb6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ddb8:	0016f713          	andi	a4,a3,1
    8000ddbc:	e2071e63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ddc0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ddc4:	460d                	li	a2,3
    8000ddc6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ddca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ddcc:	00c59763          	bne	a1,a2,8000ddda <tinst_tests_gpf+0x2bdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ddd0:	0026d683          	lhu	a3,2(a3)
    8000ddd4:	0106969b          	slliw	a3,a3,0x10
    8000ddd8:	8f55                	or	a4,a4,a3
    8000ddda:	1ffe16b7          	lui	a3,0x1ffe1
    8000ddde:	068e                	slli	a3,a3,0x3
    8000dde0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dde2:	8f75                	and	a4,a4,a3
    8000dde4:	00e78463          	beq	a5,a4,8000ddec <tinst_tests_gpf+0x2bee>
    8000dde8:	e8cfe06f          	j	8000c474 <tinst_tests_gpf+0x1276>
    8000ddec:	e9cfe06f          	j	8000c488 <tinst_tests_gpf+0x128a>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000ddf0:	701c                	ld	a5,32(s0)
    8000ddf2:	e399                	bnez	a5,8000ddf8 <tinst_tests_gpf+0x2bfa>
    8000ddf4:	f36fe06f          	j	8000c52a <tinst_tests_gpf+0x132c>
    8000ddf8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ddfa:	0016f713          	andi	a4,a3,1
    8000ddfe:	de071d63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000de02:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de06:	460d                	li	a2,3
    8000de08:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de0c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de0e:	00c59763          	bne	a1,a2,8000de1c <tinst_tests_gpf+0x2c1e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de12:	0026d683          	lhu	a3,2(a3)
    8000de16:	0106969b          	slliw	a3,a3,0x10
    8000de1a:	8f55                	or	a4,a4,a3
    8000de1c:	1ffe16b7          	lui	a3,0x1ffe1
    8000de20:	068e                	slli	a3,a3,0x3
    8000de22:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de24:	8f75                	and	a4,a4,a3
    8000de26:	00e78463          	beq	a5,a4,8000de2e <tinst_tests_gpf+0x2c30>
    8000de2a:	eecfe06f          	j	8000c516 <tinst_tests_gpf+0x1318>
    8000de2e:	efcfe06f          	j	8000c52a <tinst_tests_gpf+0x132c>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000de32:	6418                	ld	a4,8(s0)
    8000de34:	47dd                	li	a5,23
    8000de36:	00f70463          	beq	a4,a5,8000de3e <tinst_tests_gpf+0x2c40>
    8000de3a:	84bfe06f          	j	8000c684 <tinst_tests_gpf+0x1486>
    8000de3e:	701c                	ld	a5,32(s0)
    8000de40:	e399                	bnez	a5,8000de46 <tinst_tests_gpf+0x2c48>
    8000de42:	845fe06f          	j	8000c686 <tinst_tests_gpf+0x1488>
    8000de46:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de48:	0016f713          	andi	a4,a3,1
    8000de4c:	da071663          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000de50:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de54:	460d                	li	a2,3
    8000de56:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de5a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de5c:	00c59763          	bne	a1,a2,8000de6a <tinst_tests_gpf+0x2c6c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de60:	0026d683          	lhu	a3,2(a3)
    8000de64:	0106969b          	slliw	a3,a3,0x10
    8000de68:	8f55                	or	a4,a4,a3
    8000de6a:	1ffe16b7          	lui	a3,0x1ffe1
    8000de6e:	068e                	slli	a3,a3,0x3
    8000de70:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de72:	8f75                	and	a4,a4,a3
    8000de74:	40f704b3          	sub	s1,a4,a5
    8000de78:	0014b493          	seqz	s1,s1
    8000de7c:	80bfe06f          	j	8000c686 <tinst_tests_gpf+0x1488>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000de80:	6418                	ld	a4,8(s0)
    8000de82:	47dd                	li	a5,23
    8000de84:	00f70463          	beq	a4,a5,8000de8c <tinst_tests_gpf+0x2c8e>
    8000de88:	897fe06f          	j	8000c71e <tinst_tests_gpf+0x1520>
    8000de8c:	701c                	ld	a5,32(s0)
    8000de8e:	e399                	bnez	a5,8000de94 <tinst_tests_gpf+0x2c96>
    8000de90:	891fe06f          	j	8000c720 <tinst_tests_gpf+0x1522>
    8000de94:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de96:	0016f713          	andi	a4,a3,1
    8000de9a:	d4071f63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000de9e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dea2:	460d                	li	a2,3
    8000dea4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dea8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000deaa:	00c59763          	bne	a1,a2,8000deb8 <tinst_tests_gpf+0x2cba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000deae:	0026d683          	lhu	a3,2(a3)
    8000deb2:	0106969b          	slliw	a3,a3,0x10
    8000deb6:	8f55                	or	a4,a4,a3
    8000deb8:	1ffe16b7          	lui	a3,0x1ffe1
    8000debc:	068e                	slli	a3,a3,0x3
    8000debe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dec0:	8f75                	and	a4,a4,a3
    8000dec2:	40f704b3          	sub	s1,a4,a5
    8000dec6:	0014b493          	seqz	s1,s1
    8000deca:	857fe06f          	j	8000c720 <tinst_tests_gpf+0x1522>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000dece:	6418                	ld	a4,8(s0)
    8000ded0:	47dd                	li	a5,23
    8000ded2:	00f70463          	beq	a4,a5,8000deda <tinst_tests_gpf+0x2cdc>
    8000ded6:	8e3fe06f          	j	8000c7b8 <tinst_tests_gpf+0x15ba>
    8000deda:	701c                	ld	a5,32(s0)
    8000dedc:	e399                	bnez	a5,8000dee2 <tinst_tests_gpf+0x2ce4>
    8000dede:	8ddfe06f          	j	8000c7ba <tinst_tests_gpf+0x15bc>
    8000dee2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dee4:	0016f713          	andi	a4,a3,1
    8000dee8:	d0071863          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000deec:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000def0:	460d                	li	a2,3
    8000def2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000def6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000def8:	00c59763          	bne	a1,a2,8000df06 <tinst_tests_gpf+0x2d08>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000defc:	0026d683          	lhu	a3,2(a3)
    8000df00:	0106969b          	slliw	a3,a3,0x10
    8000df04:	8f55                	or	a4,a4,a3
    8000df06:	1ffe16b7          	lui	a3,0x1ffe1
    8000df0a:	068e                	slli	a3,a3,0x3
    8000df0c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000df0e:	8f75                	and	a4,a4,a3
    8000df10:	40f704b3          	sub	s1,a4,a5
    8000df14:	0014b493          	seqz	s1,s1
    8000df18:	8a3fe06f          	j	8000c7ba <tinst_tests_gpf+0x15bc>
    instruction = *((uint16_t*)addr);
    8000df1c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df20:	460d                	li	a2,3
    8000df22:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df26:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df28:	00c59763          	bne	a1,a2,8000df36 <tinst_tests_gpf+0x2d38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df2c:	0026d683          	lhu	a3,2(a3)
    8000df30:	0106969b          	slliw	a3,a3,0x10
    8000df34:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000df36:	1746                	slli	a4,a4,0x31
    8000df38:	9345                	srli	a4,a4,0x31
    8000df3a:	00e78463          	beq	a5,a4,8000df42 <tinst_tests_gpf+0x2d44>
    8000df3e:	e50fd06f          	j	8000b58e <tinst_tests_gpf+0x390>
    8000df42:	e60fd06f          	j	8000b5a2 <tinst_tests_gpf+0x3a4>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000df46:	02043903          	ld	s2,32(s0)
    8000df4a:	00091463          	bnez	s2,8000df52 <tinst_tests_gpf+0x2d54>
    8000df4e:	c89fd06f          	j	8000bbd6 <tinst_tests_gpf+0x9d8>
    8000df52:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000df54:	0017f713          	andi	a4,a5,1
    8000df58:	ca071063          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000df5c:	0007d503          	lhu	a0,0(a5)
    8000df60:	f32f30ef          	jal	80001692 <expand_compressed_instruction>
    8000df64:	01f077b7          	lui	a5,0x1f07
    8000df68:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000df6c:	00f574b3          	and	s1,a0,a5
    8000df70:	412484b3          	sub	s1,s1,s2
    8000df74:	0014b493          	seqz	s1,s1
    8000df78:	c5ffd06f          	j	8000bbd6 <tinst_tests_gpf+0x9d8>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000df7c:	701c                	ld	a5,32(s0)
    8000df7e:	e399                	bnez	a5,8000df84 <tinst_tests_gpf+0x2d86>
    8000df80:	cfffd06f          	j	8000bc7e <tinst_tests_gpf+0xa80>
    8000df84:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000df86:	0016f713          	andi	a4,a3,1
    8000df8a:	c6071763          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000df8e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df92:	460d                	li	a2,3
    8000df94:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df98:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df9a:	00c59763          	bne	a1,a2,8000dfa8 <tinst_tests_gpf+0x2daa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df9e:	0026d683          	lhu	a3,2(a3)
    8000dfa2:	0106969b          	slliw	a3,a3,0x10
    8000dfa6:	8f55                	or	a4,a4,a3
    8000dfa8:	1ffe16b7          	lui	a3,0x1ffe1
    8000dfac:	068e                	slli	a3,a3,0x3
    8000dfae:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dfb0:	8f75                	and	a4,a4,a3
    8000dfb2:	40f704b3          	sub	s1,a4,a5
    8000dfb6:	0014b493          	seqz	s1,s1
    8000dfba:	cc5fd06f          	j	8000bc7e <tinst_tests_gpf+0xa80>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000dfbe:	701c                	ld	a5,32(s0)
    8000dfc0:	e399                	bnez	a5,8000dfc6 <tinst_tests_gpf+0x2dc8>
    8000dfc2:	d61fd06f          	j	8000bd22 <tinst_tests_gpf+0xb24>
    8000dfc6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dfc8:	0016f713          	andi	a4,a3,1
    8000dfcc:	c2071663          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dfd0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dfd4:	460d                	li	a2,3
    8000dfd6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dfda:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dfdc:	00c59763          	bne	a1,a2,8000dfea <tinst_tests_gpf+0x2dec>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dfe0:	0026d683          	lhu	a3,2(a3)
    8000dfe4:	0106969b          	slliw	a3,a3,0x10
    8000dfe8:	8f55                	or	a4,a4,a3
    8000dfea:	1ffe16b7          	lui	a3,0x1ffe1
    8000dfee:	068e                	slli	a3,a3,0x3
    8000dff0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dff2:	8f75                	and	a4,a4,a3
    8000dff4:	40f704b3          	sub	s1,a4,a5
    8000dff8:	0014b493          	seqz	s1,s1
    8000dffc:	d27fd06f          	j	8000bd22 <tinst_tests_gpf+0xb24>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000e000:	701c                	ld	a5,32(s0)
    8000e002:	e399                	bnez	a5,8000e008 <tinst_tests_gpf+0x2e0a>
    8000e004:	dc1fd06f          	j	8000bdc4 <tinst_tests_gpf+0xbc6>
    8000e008:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e00a:	0016f713          	andi	a4,a3,1
    8000e00e:	be071563          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e012:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e016:	460d                	li	a2,3
    8000e018:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e01c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e01e:	00c59763          	bne	a1,a2,8000e02c <tinst_tests_gpf+0x2e2e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e022:	0026d683          	lhu	a3,2(a3)
    8000e026:	0106969b          	slliw	a3,a3,0x10
    8000e02a:	8f55                	or	a4,a4,a3
    8000e02c:	1ffe16b7          	lui	a3,0x1ffe1
    8000e030:	068e                	slli	a3,a3,0x3
    8000e032:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e034:	8f75                	and	a4,a4,a3
    8000e036:	40f704b3          	sub	s1,a4,a5
    8000e03a:	0014b493          	seqz	s1,s1
    8000e03e:	d87fd06f          	j	8000bdc4 <tinst_tests_gpf+0xbc6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e042:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e044:	0017f713          	andi	a4,a5,1
    8000e048:	ba071863          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e04c:	0007d503          	lhu	a0,0(a5)
    8000e050:	e42f30ef          	jal	80001692 <expand_compressed_instruction>
    8000e054:	67a1                	lui	a5,0x8
    8000e056:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e058:	8d7d                	and	a0,a0,a5
    8000e05a:	00a90463          	beq	s2,a0,8000e062 <tinst_tests_gpf+0x2e64>
    8000e05e:	959fd06f          	j	8000b9b6 <tinst_tests_gpf+0x7b8>
    8000e062:	00024597          	auipc	a1,0x24
    8000e066:	64658593          	addi	a1,a1,1606 # 800326a8 <__func__.0+0x2c0>
    8000e06a:	955fd06f          	j	8000b9be <tinst_tests_gpf+0x7c0>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000e06e:	701c                	ld	a5,32(s0)
    8000e070:	e399                	bnez	a5,8000e076 <tinst_tests_gpf+0x2e78>
    8000e072:	df5fd06f          	j	8000be66 <tinst_tests_gpf+0xc68>
    8000e076:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e078:	0016f713          	andi	a4,a3,1
    8000e07c:	b6071e63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e080:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e084:	460d                	li	a2,3
    8000e086:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e08a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e08c:	00c59763          	bne	a1,a2,8000e09a <tinst_tests_gpf+0x2e9c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e090:	0026d683          	lhu	a3,2(a3)
    8000e094:	0106969b          	slliw	a3,a3,0x10
    8000e098:	8f55                	or	a4,a4,a3
    8000e09a:	1ffe16b7          	lui	a3,0x1ffe1
    8000e09e:	068e                	slli	a3,a3,0x3
    8000e0a0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e0a2:	8f75                	and	a4,a4,a3
    8000e0a4:	40f704b3          	sub	s1,a4,a5
    8000e0a8:	0014b493          	seqz	s1,s1
    8000e0ac:	dbbfd06f          	j	8000be66 <tinst_tests_gpf+0xc68>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000e0b0:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e0b2:	0017f713          	andi	a4,a5,1
    8000e0b6:	b4071163          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e0ba:	0007d503          	lhu	a0,0(a5)
    8000e0be:	dd4f30ef          	jal	80001692 <expand_compressed_instruction>
    8000e0c2:	67a1                	lui	a5,0x8
    8000e0c4:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e0c6:	8d7d                	and	a0,a0,a5
    8000e0c8:	00a98463          	beq	s3,a0,8000e0d0 <tinst_tests_gpf+0x2ed2>
    8000e0cc:	981fd06f          	j	8000ba4c <tinst_tests_gpf+0x84e>
    8000e0d0:	00024597          	auipc	a1,0x24
    8000e0d4:	5d858593          	addi	a1,a1,1496 # 800326a8 <__func__.0+0x2c0>
    8000e0d8:	97dfd06f          	j	8000ba54 <tinst_tests_gpf+0x856>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000e0dc:	701c                	ld	a5,32(s0)
    8000e0de:	e399                	bnez	a5,8000e0e4 <tinst_tests_gpf+0x2ee6>
    8000e0e0:	e1dfd06f          	j	8000befc <tinst_tests_gpf+0xcfe>
    8000e0e4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e0e6:	0016f713          	andi	a4,a3,1
    8000e0ea:	b0071763          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e0ee:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e0f2:	460d                	li	a2,3
    8000e0f4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e0f8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e0fa:	00c59763          	bne	a1,a2,8000e108 <tinst_tests_gpf+0x2f0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e0fe:	0026d683          	lhu	a3,2(a3)
    8000e102:	0106969b          	slliw	a3,a3,0x10
    8000e106:	8f55                	or	a4,a4,a3
    8000e108:	1ffe16b7          	lui	a3,0x1ffe1
    8000e10c:	068e                	slli	a3,a3,0x3
    8000e10e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e110:	8f75                	and	a4,a4,a3
    8000e112:	40f704b3          	sub	s1,a4,a5
    8000e116:	0014b493          	seqz	s1,s1
    8000e11a:	de3fd06f          	j	8000befc <tinst_tests_gpf+0xcfe>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000e11e:	701c                	ld	a5,32(s0)
    8000e120:	e399                	bnez	a5,8000e126 <tinst_tests_gpf+0x2f28>
    8000e122:	e71fd06f          	j	8000bf92 <tinst_tests_gpf+0xd94>
    8000e126:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e128:	0016f713          	andi	a4,a3,1
    8000e12c:	ac071663          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e130:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e134:	460d                	li	a2,3
    8000e136:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e13a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e13c:	00c59763          	bne	a1,a2,8000e14a <tinst_tests_gpf+0x2f4c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e140:	0026d683          	lhu	a3,2(a3)
    8000e144:	0106969b          	slliw	a3,a3,0x10
    8000e148:	8f55                	or	a4,a4,a3
    8000e14a:	1ffe16b7          	lui	a3,0x1ffe1
    8000e14e:	068e                	slli	a3,a3,0x3
    8000e150:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e152:	8f75                	and	a4,a4,a3
    8000e154:	40f704b3          	sub	s1,a4,a5
    8000e158:	0014b493          	seqz	s1,s1
    8000e15c:	e37fd06f          	j	8000bf92 <tinst_tests_gpf+0xd94>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e160:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e162:	0017f713          	andi	a4,a5,1
    8000e166:	a8071963          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e16a:	0007d503          	lhu	a0,0(a5)
    8000e16e:	d24f30ef          	jal	80001692 <expand_compressed_instruction>
    8000e172:	01f077b7          	lui	a5,0x1f07
    8000e176:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e17a:	8d7d                	and	a0,a0,a5
    8000e17c:	00a98463          	beq	s3,a0,8000e184 <tinst_tests_gpf+0x2f86>
    8000e180:	963fd06f          	j	8000bae2 <tinst_tests_gpf+0x8e4>
    8000e184:	00024597          	auipc	a1,0x24
    8000e188:	52458593          	addi	a1,a1,1316 # 800326a8 <__func__.0+0x2c0>
    8000e18c:	95ffd06f          	j	8000baea <tinst_tests_gpf+0x8ec>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000e190:	701c                	ld	a5,32(s0)
    8000e192:	e399                	bnez	a5,8000e198 <tinst_tests_gpf+0x2f9a>
    8000e194:	ea1fd06f          	j	8000c034 <tinst_tests_gpf+0xe36>
    8000e198:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e19a:	0016f713          	andi	a4,a3,1
    8000e19e:	a4071d63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e1a2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e1a6:	460d                	li	a2,3
    8000e1a8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e1ac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e1ae:	00c59763          	bne	a1,a2,8000e1bc <tinst_tests_gpf+0x2fbe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e1b2:	0026d683          	lhu	a3,2(a3)
    8000e1b6:	0106969b          	slliw	a3,a3,0x10
    8000e1ba:	8f55                	or	a4,a4,a3
    8000e1bc:	1ffe16b7          	lui	a3,0x1ffe1
    8000e1c0:	068e                	slli	a3,a3,0x3
    8000e1c2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e1c4:	8f75                	and	a4,a4,a3
    8000e1c6:	40f704b3          	sub	s1,a4,a5
    8000e1ca:	0014b493          	seqz	s1,s1
    8000e1ce:	e67fd06f          	j	8000c034 <tinst_tests_gpf+0xe36>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000e1d2:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e1d4:	0017f713          	andi	a4,a5,1
    8000e1d8:	a2071063          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e1dc:	0007d503          	lhu	a0,0(a5)
    8000e1e0:	cb2f30ef          	jal	80001692 <expand_compressed_instruction>
    8000e1e4:	01f077b7          	lui	a5,0x1f07
    8000e1e8:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e1ec:	8d7d                	and	a0,a0,a5
    8000e1ee:	00a90463          	beq	s2,a0,8000e1f6 <tinst_tests_gpf+0x2ff8>
    8000e1f2:	987fd06f          	j	8000bb78 <tinst_tests_gpf+0x97a>
    8000e1f6:	00024597          	auipc	a1,0x24
    8000e1fa:	4b258593          	addi	a1,a1,1202 # 800326a8 <__func__.0+0x2c0>
    8000e1fe:	983fd06f          	j	8000bb80 <tinst_tests_gpf+0x982>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000e202:	701c                	ld	a5,32(s0)
    8000e204:	e399                	bnez	a5,8000e20a <tinst_tests_gpf+0x300c>
    8000e206:	ed1fd06f          	j	8000c0d6 <tinst_tests_gpf+0xed8>
    8000e20a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e20c:	0016f713          	andi	a4,a3,1
    8000e210:	9e071463          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e214:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e218:	460d                	li	a2,3
    8000e21a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e21e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e220:	00c59763          	bne	a1,a2,8000e22e <tinst_tests_gpf+0x3030>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e224:	0026d683          	lhu	a3,2(a3)
    8000e228:	0106969b          	slliw	a3,a3,0x10
    8000e22c:	8f55                	or	a4,a4,a3
    8000e22e:	1ffe16b7          	lui	a3,0x1ffe1
    8000e232:	068e                	slli	a3,a3,0x3
    8000e234:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e236:	8f75                	and	a4,a4,a3
    8000e238:	40f704b3          	sub	s1,a4,a5
    8000e23c:	0014b493          	seqz	s1,s1
    8000e240:	e97fd06f          	j	8000c0d6 <tinst_tests_gpf+0xed8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000e244:	701c                	ld	a5,32(s0)
    8000e246:	e399                	bnez	a5,8000e24c <tinst_tests_gpf+0x304e>
    8000e248:	f31fd06f          	j	8000c178 <tinst_tests_gpf+0xf7a>
    8000e24c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e24e:	0016f713          	andi	a4,a3,1
    8000e252:	9a071363          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e256:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e25a:	460d                	li	a2,3
    8000e25c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e260:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e262:	00c59763          	bne	a1,a2,8000e270 <tinst_tests_gpf+0x3072>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e266:	0026d683          	lhu	a3,2(a3)
    8000e26a:	0106969b          	slliw	a3,a3,0x10
    8000e26e:	8f55                	or	a4,a4,a3
    8000e270:	1ffe16b7          	lui	a3,0x1ffe1
    8000e274:	068e                	slli	a3,a3,0x3
    8000e276:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e278:	8f75                	and	a4,a4,a3
    8000e27a:	40f704b3          	sub	s1,a4,a5
    8000e27e:	0014b493          	seqz	s1,s1
    8000e282:	ef7fd06f          	j	8000c178 <tinst_tests_gpf+0xf7a>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000e286:	701c                	ld	a5,32(s0)
    8000e288:	e399                	bnez	a5,8000e28e <tinst_tests_gpf+0x3090>
    8000e28a:	f91fd06f          	j	8000c21a <tinst_tests_gpf+0x101c>
    8000e28e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e290:	0016f713          	andi	a4,a3,1
    8000e294:	96071263          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e298:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e29c:	460d                	li	a2,3
    8000e29e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e2a2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e2a4:	00c59763          	bne	a1,a2,8000e2b2 <tinst_tests_gpf+0x30b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e2a8:	0026d683          	lhu	a3,2(a3)
    8000e2ac:	0106969b          	slliw	a3,a3,0x10
    8000e2b0:	8f55                	or	a4,a4,a3
    8000e2b2:	1ffe16b7          	lui	a3,0x1ffe1
    8000e2b6:	068e                	slli	a3,a3,0x3
    8000e2b8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e2ba:	8f75                	and	a4,a4,a3
    8000e2bc:	40f704b3          	sub	s1,a4,a5
    8000e2c0:	0014b493          	seqz	s1,s1
    8000e2c4:	f57fd06f          	j	8000c21a <tinst_tests_gpf+0x101c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000e2c8:	701c                	ld	a5,32(s0)
    8000e2ca:	e399                	bnez	a5,8000e2d0 <tinst_tests_gpf+0x30d2>
    8000e2cc:	ff7fd06f          	j	8000c2c2 <tinst_tests_gpf+0x10c4>
    8000e2d0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e2d2:	0016f713          	andi	a4,a3,1
    8000e2d6:	92071163          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e2da:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e2de:	460d                	li	a2,3
    8000e2e0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e2e4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e2e6:	00c59763          	bne	a1,a2,8000e2f4 <tinst_tests_gpf+0x30f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e2ea:	0026d683          	lhu	a3,2(a3)
    8000e2ee:	0106969b          	slliw	a3,a3,0x10
    8000e2f2:	8f55                	or	a4,a4,a3
    8000e2f4:	1ffe16b7          	lui	a3,0x1ffe1
    8000e2f8:	068e                	slli	a3,a3,0x3
    8000e2fa:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e2fc:	8f75                	and	a4,a4,a3
    8000e2fe:	40f704b3          	sub	s1,a4,a5
    8000e302:	0014b493          	seqz	s1,s1
    8000e306:	fbdfd06f          	j	8000c2c2 <tinst_tests_gpf+0x10c4>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000e30a:	701c                	ld	a5,32(s0)
    8000e30c:	e399                	bnez	a5,8000e312 <tinst_tests_gpf+0x3114>
    8000e30e:	856fe06f          	j	8000c364 <tinst_tests_gpf+0x1166>
    8000e312:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e314:	0016f713          	andi	a4,a3,1
    8000e318:	8e071063          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e31c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e320:	460d                	li	a2,3
    8000e322:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e326:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e328:	00c59763          	bne	a1,a2,8000e336 <tinst_tests_gpf+0x3138>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e32c:	0026d683          	lhu	a3,2(a3)
    8000e330:	0106969b          	slliw	a3,a3,0x10
    8000e334:	8f55                	or	a4,a4,a3
    8000e336:	1ffe16b7          	lui	a3,0x1ffe1
    8000e33a:	068e                	slli	a3,a3,0x3
    8000e33c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e33e:	8f75                	and	a4,a4,a3
    8000e340:	40f704b3          	sub	s1,a4,a5
    8000e344:	0014b493          	seqz	s1,s1
    8000e348:	81cfe06f          	j	8000c364 <tinst_tests_gpf+0x1166>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000e34c:	701c                	ld	a5,32(s0)
    8000e34e:	e399                	bnez	a5,8000e354 <tinst_tests_gpf+0x3156>
    8000e350:	8b6fe06f          	j	8000c406 <tinst_tests_gpf+0x1208>
    8000e354:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e356:	0016f713          	andi	a4,a3,1
    8000e35a:	88071f63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e35e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e362:	460d                	li	a2,3
    8000e364:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e368:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e36a:	00c59763          	bne	a1,a2,8000e378 <tinst_tests_gpf+0x317a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e36e:	0026d683          	lhu	a3,2(a3)
    8000e372:	0106969b          	slliw	a3,a3,0x10
    8000e376:	8f55                	or	a4,a4,a3
    8000e378:	1ffe16b7          	lui	a3,0x1ffe1
    8000e37c:	068e                	slli	a3,a3,0x3
    8000e37e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e380:	8f75                	and	a4,a4,a3
    8000e382:	40f704b3          	sub	s1,a4,a5
    8000e386:	0014b493          	seqz	s1,s1
    8000e38a:	87cfe06f          	j	8000c406 <tinst_tests_gpf+0x1208>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000e38e:	701c                	ld	a5,32(s0)
    8000e390:	e399                	bnez	a5,8000e396 <tinst_tests_gpf+0x3198>
    8000e392:	916fe06f          	j	8000c4a8 <tinst_tests_gpf+0x12aa>
    8000e396:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e398:	0016f713          	andi	a4,a3,1
    8000e39c:	84071e63          	bnez	a4,8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e3a0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e3a4:	460d                	li	a2,3
    8000e3a6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e3aa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e3ac:	00c59763          	bne	a1,a2,8000e3ba <tinst_tests_gpf+0x31bc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e3b0:	0026d683          	lhu	a3,2(a3)
    8000e3b4:	0106969b          	slliw	a3,a3,0x10
    8000e3b8:	8f55                	or	a4,a4,a3
    8000e3ba:	1ffe16b7          	lui	a3,0x1ffe1
    8000e3be:	068e                	slli	a3,a3,0x3
    8000e3c0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e3c2:	8f75                	and	a4,a4,a3
    8000e3c4:	40f704b3          	sub	s1,a4,a5
    8000e3c8:	0014b493          	seqz	s1,s1
    8000e3cc:	8dcfe06f          	j	8000c4a8 <tinst_tests_gpf+0x12aa>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000e3d0:	701c                	ld	a5,32(s0)
    8000e3d2:	e399                	bnez	a5,8000e3d8 <tinst_tests_gpf+0x31da>
    8000e3d4:	976fe06f          	j	8000c54a <tinst_tests_gpf+0x134c>
    8000e3d8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e3da:	0016f713          	andi	a4,a3,1
    8000e3de:	c319                	beqz	a4,8000e3e4 <tinst_tests_gpf+0x31e6>
    8000e3e0:	818ff06f          	j	8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e3e4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e3e8:	460d                	li	a2,3
    8000e3ea:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e3ee:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e3f0:	00c59763          	bne	a1,a2,8000e3fe <tinst_tests_gpf+0x3200>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e3f4:	0026d683          	lhu	a3,2(a3)
    8000e3f8:	0106969b          	slliw	a3,a3,0x10
    8000e3fc:	8f55                	or	a4,a4,a3
    8000e3fe:	1ffe16b7          	lui	a3,0x1ffe1
    8000e402:	068e                	slli	a3,a3,0x3
    8000e404:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e406:	8f75                	and	a4,a4,a3
    8000e408:	40f704b3          	sub	s1,a4,a5
    8000e40c:	0014b493          	seqz	s1,s1
    8000e410:	93afe06f          	j	8000c54a <tinst_tests_gpf+0x134c>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000e414:	701c                	ld	a5,32(s0)
    8000e416:	e399                	bnez	a5,8000e41c <tinst_tests_gpf+0x321e>
    8000e418:	9d4fe06f          	j	8000c5ec <tinst_tests_gpf+0x13ee>
    8000e41c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e41e:	0016f713          	andi	a4,a3,1
    8000e422:	c319                	beqz	a4,8000e428 <tinst_tests_gpf+0x322a>
    8000e424:	fd5fe06f          	j	8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e428:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e42c:	460d                	li	a2,3
    8000e42e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e432:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e434:	00c59763          	bne	a1,a2,8000e442 <tinst_tests_gpf+0x3244>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e438:	0026d683          	lhu	a3,2(a3)
    8000e43c:	0106969b          	slliw	a3,a3,0x10
    8000e440:	8f55                	or	a4,a4,a3
    8000e442:	1ffe16b7          	lui	a3,0x1ffe1
    8000e446:	068e                	slli	a3,a3,0x3
    8000e448:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e44a:	8f75                	and	a4,a4,a3
    8000e44c:	40f704b3          	sub	s1,a4,a5
    8000e450:	0014b493          	seqz	s1,s1
    8000e454:	998fe06f          	j	8000c5ec <tinst_tests_gpf+0x13ee>
    8000e458:	701c                	ld	a5,32(s0)
    8000e45a:	e399                	bnez	a5,8000e460 <tinst_tests_gpf+0x3262>
    8000e45c:	970fe06f          	j	8000c5cc <tinst_tests_gpf+0x13ce>
    8000e460:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e462:	0016f713          	andi	a4,a3,1
    8000e466:	c319                	beqz	a4,8000e46c <tinst_tests_gpf+0x326e>
    8000e468:	f91fe06f          	j	8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e46c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e470:	460d                	li	a2,3
    8000e472:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e476:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e478:	00c59763          	bne	a1,a2,8000e486 <tinst_tests_gpf+0x3288>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e47c:	0026d683          	lhu	a3,2(a3)
    8000e480:	0106969b          	slliw	a3,a3,0x10
    8000e484:	8f55                	or	a4,a4,a3
    8000e486:	1ffe16b7          	lui	a3,0x1ffe1
    8000e48a:	068e                	slli	a3,a3,0x3
    8000e48c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e48e:	8f75                	and	a4,a4,a3
    8000e490:	00e78463          	beq	a5,a4,8000e498 <tinst_tests_gpf+0x329a>
    8000e494:	924fe06f          	j	8000c5b8 <tinst_tests_gpf+0x13ba>
    8000e498:	934fe06f          	j	8000c5cc <tinst_tests_gpf+0x13ce>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000e49c:	701c                	ld	a5,32(s0)
    8000e49e:	e399                	bnez	a5,8000e4a4 <tinst_tests_gpf+0x32a6>
    8000e4a0:	9cefe06f          	j	8000c66e <tinst_tests_gpf+0x1470>
    8000e4a4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e4a6:	0016f713          	andi	a4,a3,1
    8000e4aa:	c319                	beqz	a4,8000e4b0 <tinst_tests_gpf+0x32b2>
    8000e4ac:	f4dfe06f          	j	8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e4b0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e4b4:	460d                	li	a2,3
    8000e4b6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e4ba:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e4bc:	00c59763          	bne	a1,a2,8000e4ca <tinst_tests_gpf+0x32cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e4c0:	0026d683          	lhu	a3,2(a3)
    8000e4c4:	0106969b          	slliw	a3,a3,0x10
    8000e4c8:	8f55                	or	a4,a4,a3
    8000e4ca:	1ffe16b7          	lui	a3,0x1ffe1
    8000e4ce:	068e                	slli	a3,a3,0x3
    8000e4d0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e4d2:	8f75                	and	a4,a4,a3
    8000e4d4:	00e78463          	beq	a5,a4,8000e4dc <tinst_tests_gpf+0x32de>
    8000e4d8:	982fe06f          	j	8000c65a <tinst_tests_gpf+0x145c>
    8000e4dc:	992fe06f          	j	8000c66e <tinst_tests_gpf+0x1470>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000e4e0:	701c                	ld	a5,32(s0)
    8000e4e2:	e399                	bnez	a5,8000e4e8 <tinst_tests_gpf+0x32ea>
    8000e4e4:	a24fe06f          	j	8000c708 <tinst_tests_gpf+0x150a>
    8000e4e8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e4ea:	0016f713          	andi	a4,a3,1
    8000e4ee:	c319                	beqz	a4,8000e4f4 <tinst_tests_gpf+0x32f6>
    8000e4f0:	f09fe06f          	j	8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e4f4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e4f8:	460d                	li	a2,3
    8000e4fa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e4fe:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e500:	00c59763          	bne	a1,a2,8000e50e <tinst_tests_gpf+0x3310>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e504:	0026d683          	lhu	a3,2(a3)
    8000e508:	0106969b          	slliw	a3,a3,0x10
    8000e50c:	8f55                	or	a4,a4,a3
    8000e50e:	1ffe16b7          	lui	a3,0x1ffe1
    8000e512:	068e                	slli	a3,a3,0x3
    8000e514:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e516:	8f75                	and	a4,a4,a3
    8000e518:	00e78463          	beq	a5,a4,8000e520 <tinst_tests_gpf+0x3322>
    8000e51c:	9d8fe06f          	j	8000c6f4 <tinst_tests_gpf+0x14f6>
    8000e520:	9e8fe06f          	j	8000c708 <tinst_tests_gpf+0x150a>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000e524:	701c                	ld	a5,32(s0)
    8000e526:	e399                	bnez	a5,8000e52c <tinst_tests_gpf+0x332e>
    8000e528:	a7afe06f          	j	8000c7a2 <tinst_tests_gpf+0x15a4>
    8000e52c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e52e:	0016f713          	andi	a4,a3,1
    8000e532:	c319                	beqz	a4,8000e538 <tinst_tests_gpf+0x333a>
    8000e534:	ec5fe06f          	j	8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e538:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e53c:	460d                	li	a2,3
    8000e53e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e542:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e544:	00c59763          	bne	a1,a2,8000e552 <tinst_tests_gpf+0x3354>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e548:	0026d683          	lhu	a3,2(a3)
    8000e54c:	0106969b          	slliw	a3,a3,0x10
    8000e550:	8f55                	or	a4,a4,a3
    8000e552:	1ffe16b7          	lui	a3,0x1ffe1
    8000e556:	068e                	slli	a3,a3,0x3
    8000e558:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e55a:	8f75                	and	a4,a4,a3
    8000e55c:	00e78463          	beq	a5,a4,8000e564 <tinst_tests_gpf+0x3366>
    8000e560:	a2efe06f          	j	8000c78e <tinst_tests_gpf+0x1590>
    8000e564:	a3efe06f          	j	8000c7a2 <tinst_tests_gpf+0x15a4>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000e568:	701c                	ld	a5,32(s0)
    8000e56a:	e399                	bnez	a5,8000e570 <tinst_tests_gpf+0x3372>
    8000e56c:	ad0fe06f          	j	8000c83c <tinst_tests_gpf+0x163e>
    8000e570:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e572:	0016f713          	andi	a4,a3,1
    8000e576:	c319                	beqz	a4,8000e57c <tinst_tests_gpf+0x337e>
    8000e578:	e81fe06f          	j	8000d3f8 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e57c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e580:	460d                	li	a2,3
    8000e582:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e586:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e588:	00c59763          	bne	a1,a2,8000e596 <tinst_tests_gpf+0x3398>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e58c:	0026d683          	lhu	a3,2(a3)
    8000e590:	0106969b          	slliw	a3,a3,0x10
    8000e594:	8f55                	or	a4,a4,a3
    8000e596:	1ffe16b7          	lui	a3,0x1ffe1
    8000e59a:	068e                	slli	a3,a3,0x3
    8000e59c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e59e:	8f75                	and	a4,a4,a3
    8000e5a0:	00e78463          	beq	a5,a4,8000e5a8 <tinst_tests_gpf+0x33aa>
    8000e5a4:	a84fe06f          	j	8000c828 <tinst_tests_gpf+0x162a>
    8000e5a8:	a94fe06f          	j	8000c83c <tinst_tests_gpf+0x163e>

000000008000e5ac <priv_change_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h> 
bool priv_change_1(){
    8000e5ac:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000e5ae:	00022597          	auipc	a1,0x22
    8000e5b2:	2aa58593          	addi	a1,a1,682 # 80030858 <__func__.16>
    8000e5b6:	00024517          	auipc	a0,0x24
    8000e5ba:	11250513          	addi	a0,a0,274 # 800326c8 <__func__.0+0x2e0>
bool priv_change_1(){
    8000e5be:	ec06                	sd	ra,24(sp)
    8000e5c0:	e822                	sd	s0,16(sp)
    8000e5c2:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e5c4:	701200ef          	jal	8002f4c4 <printf>
    8000e5c8:	4529                	li	a0,10
    8000e5ca:	3e91f0ef          	jal	8002e1b2 <putchar>


    goto_priv(PRIV_HS);
    8000e5ce:	450d                	li	a0,3
    8000e5d0:	945f20ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8000e5d4:	818f20ef          	jal	800005ec <hspt_init>
    hpt_init();
    8000e5d8:	bf8f20ef          	jal	800009d0 <hpt_init>
    vspt_init(); 
    8000e5dc:	9acf20ef          	jal	80000788 <vspt_init>

    //V=1，VS模式下发生异常，关闭代理，切换到M态处理异常，异常结束恢复到VS态
    goto_priv(PRIV_M);
    8000e5e0:	4511                	li	a0,4
    8000e5e2:	933f20ef          	jal	80000f14 <goto_priv>
    CSRW(medeleg,0);
    8000e5e6:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000e5ea:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000e5ee:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000e5f2:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VS);     
    8000e5f6:	4509                	li	a0,2
    8000e5f8:	91df20ef          	jal	80000f14 <goto_priv>
    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000e5fc:	81df20ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000e600:	400197b7          	lui	a5,0x40019
    8000e604:	078a                	slli	a5,a5,0x2
    8000e606:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e60a:	08c00593          	li	a1,140
    8000e60e:	00027617          	auipc	a2,0x27
    8000e612:	bba60613          	addi	a2,a2,-1094 # 800351c8 <__func__.0+0x2de0>
    8000e616:	00024517          	auipc	a0,0x24
    8000e61a:	0ca50513          	addi	a0,a0,202 # 800326e0 <__func__.0+0x2f8>
    8000e61e:	6a7200ef          	jal	8002f4c4 <printf>
    8000e622:	0004e797          	auipc	a5,0x4e
    8000e626:	9ef7c783          	lbu	a5,-1553(a5) # 8005c011 <excpt+0x1>
    8000e62a:	0004e497          	auipc	s1,0x4e
    8000e62e:	9e648493          	addi	s1,s1,-1562 # 8005c010 <excpt>
    8000e632:	00024597          	auipc	a1,0x24
    8000e636:	08658593          	addi	a1,a1,134 # 800326b8 <__func__.0+0x2d0>
    8000e63a:	c789                	beqz	a5,8000e644 <priv_change_1+0x98>
    8000e63c:	6498                	ld	a4,8(s1)
    8000e63e:	47b5                	li	a5,13
    8000e640:	0cf70463          	beq	a4,a5,8000e708 <priv_change_1+0x15c>
    8000e644:	00024517          	auipc	a0,0x24
    8000e648:	0b450513          	addi	a0,a0,180 # 800326f8 <__func__.0+0x310>
    8000e64c:	679200ef          	jal	8002f4c4 <printf>
    8000e650:	0004e797          	auipc	a5,0x4e
    8000e654:	9c17c783          	lbu	a5,-1599(a5) # 8005c011 <excpt+0x1>
    8000e658:	c789                	beqz	a5,8000e662 <priv_change_1+0xb6>
    8000e65a:	6498                	ld	a4,8(s1)
    8000e65c:	47b5                	li	a5,13
    8000e65e:	04f70e63          	beq	a4,a5,8000e6ba <priv_change_1+0x10e>
    8000e662:	00024517          	auipc	a0,0x24
    8000e666:	09e50513          	addi	a0,a0,158 # 80032700 <__func__.0+0x318>
    8000e66a:	65b200ef          	jal	8002f4c4 <printf>
    8000e66e:	02900513          	li	a0,41
    8000e672:	3411f0ef          	jal	8002e1b2 <putchar>
    8000e676:	4529                	li	a0,10
    8000e678:	33b1f0ef          	jal	8002e1b2 <putchar>
    8000e67c:	0004e417          	auipc	s0,0x4e
    8000e680:	99544403          	lbu	s0,-1643(s0) # 8005c011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000e684:	00024597          	auipc	a1,0x24
    8000e688:	03458593          	addi	a1,a1,52 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e68c:	c411                	beqz	s0,8000e698 <priv_change_1+0xec>
    8000e68e:	6498                	ld	a4,8(s1)
    8000e690:	47b5                	li	a5,13
    8000e692:	04f70363          	beq	a4,a5,8000e6d8 <priv_change_1+0x12c>
    8000e696:	4401                	li	s0,0
    TEST_END();
    8000e698:	00024517          	auipc	a0,0x24
    8000e69c:	0c850513          	addi	a0,a0,200 # 80032760 <__func__.0+0x378>
    8000e6a0:	625200ef          	jal	8002f4c4 <printf>
    8000e6a4:	4511                	li	a0,4
    8000e6a6:	86ff20ef          	jal	80000f14 <goto_priv>
    8000e6aa:	8ccf30ef          	jal	80001776 <reset_state>
}
    8000e6ae:	60e2                	ld	ra,24(sp)
    8000e6b0:	8522                	mv	a0,s0
    8000e6b2:	6442                	ld	s0,16(sp)
    8000e6b4:	64a2                	ld	s1,8(sp)
    8000e6b6:	6105                	addi	sp,sp,32
    8000e6b8:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e6ba:	0004e717          	auipc	a4,0x4e
    8000e6be:	95a72703          	lw	a4,-1702(a4) # 8005c014 <excpt+0x4>
    8000e6c2:	4791                	li	a5,4
    8000e6c4:	f8f71fe3          	bne	a4,a5,8000e662 <priv_change_1+0xb6>
    8000e6c8:	00033717          	auipc	a4,0x33
    8000e6cc:	98c72703          	lw	a4,-1652(a4) # 80041054 <curr_priv>
    8000e6d0:	4789                	li	a5,2
    8000e6d2:	f8f718e3          	bne	a4,a5,8000e662 <priv_change_1+0xb6>
    8000e6d6:	b745                	j	8000e676 <priv_change_1+0xca>
    8000e6d8:	0004e717          	auipc	a4,0x4e
    8000e6dc:	93c72703          	lw	a4,-1732(a4) # 8005c014 <excpt+0x4>
    8000e6e0:	4791                	li	a5,4
    8000e6e2:	faf71ae3          	bne	a4,a5,8000e696 <priv_change_1+0xea>
    8000e6e6:	00033717          	auipc	a4,0x33
    8000e6ea:	96e72703          	lw	a4,-1682(a4) # 80041054 <curr_priv>
    8000e6ee:	4789                	li	a5,2
    TEST_END();
    8000e6f0:	00024597          	auipc	a1,0x24
    8000e6f4:	fb858593          	addi	a1,a1,-72 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e6f8:	faf700e3          	beq	a4,a5,8000e698 <priv_change_1+0xec>
    8000e6fc:	4401                	li	s0,0
    TEST_END();
    8000e6fe:	00024597          	auipc	a1,0x24
    8000e702:	fba58593          	addi	a1,a1,-70 # 800326b8 <__func__.0+0x2d0>
    8000e706:	bf49                	j	8000e698 <priv_change_1+0xec>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e708:	0004e717          	auipc	a4,0x4e
    8000e70c:	90c72703          	lw	a4,-1780(a4) # 8005c014 <excpt+0x4>
    8000e710:	4791                	li	a5,4
    8000e712:	f2f719e3          	bne	a4,a5,8000e644 <priv_change_1+0x98>
    8000e716:	00033717          	auipc	a4,0x33
    8000e71a:	93e72703          	lw	a4,-1730(a4) # 80041054 <curr_priv>
    8000e71e:	4789                	li	a5,2
    8000e720:	00024597          	auipc	a1,0x24
    8000e724:	f8858593          	addi	a1,a1,-120 # 800326a8 <__func__.0+0x2c0>
    8000e728:	f0f70ee3          	beq	a4,a5,8000e644 <priv_change_1+0x98>
    8000e72c:	00024597          	auipc	a1,0x24
    8000e730:	f8c58593          	addi	a1,a1,-116 # 800326b8 <__func__.0+0x2d0>
    8000e734:	bf01                	j	8000e644 <priv_change_1+0x98>

000000008000e736 <priv_change_2>:

bool priv_change_2(){
    8000e736:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000e738:	00022597          	auipc	a1,0x22
    8000e73c:	13058593          	addi	a1,a1,304 # 80030868 <__func__.14>
    8000e740:	00024517          	auipc	a0,0x24
    8000e744:	f8850513          	addi	a0,a0,-120 # 800326c8 <__func__.0+0x2e0>
bool priv_change_2(){
    8000e748:	ec06                	sd	ra,24(sp)
    8000e74a:	e822                	sd	s0,16(sp)
    8000e74c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e74e:	577200ef          	jal	8002f4c4 <printf>
    8000e752:	4529                	li	a0,10
    8000e754:	25f1f0ef          	jal	8002e1b2 <putchar>


    goto_priv(PRIV_HS);
    8000e758:	450d                	li	a0,3
    8000e75a:	fbaf20ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8000e75e:	e8ff10ef          	jal	800005ec <hspt_init>
    hpt_init();
    8000e762:	a6ef20ef          	jal	800009d0 <hpt_init>
    vspt_init(); 
    8000e766:	822f20ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;
    //V=1，VS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000e76a:	4511                	li	a0,4
    8000e76c:	fa8f20ef          	jal	80000f14 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000e770:	6789                	lui	a5,0x2
    8000e772:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_VS);     
    8000e776:	4509                	li	a0,2
    8000e778:	f9cf20ef          	jal	80000f14 <goto_priv>

    vaddr_f = vs_page_base(VSI_GI);      
    value = 0xdeadbeef;
    
    TEST_SETUP_EXCEPT();        
    8000e77c:	e9cf20ef          	jal	80000e18 <test_setup_except_function>
    8000e780:	400197b7          	lui	a5,0x40019
    8000e784:	078a                	slli	a5,a5,0x2
    8000e786:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e78a:	08c00593          	li	a1,140
    8000e78e:	00027617          	auipc	a2,0x27
    8000e792:	aaa60613          	addi	a2,a2,-1366 # 80035238 <__func__.0+0x2e50>
    8000e796:	00024517          	auipc	a0,0x24
    8000e79a:	f4a50513          	addi	a0,a0,-182 # 800326e0 <__func__.0+0x2f8>
    8000e79e:	527200ef          	jal	8002f4c4 <printf>
    8000e7a2:	0004e797          	auipc	a5,0x4e
    8000e7a6:	86f7c783          	lbu	a5,-1937(a5) # 8005c011 <excpt+0x1>
    8000e7aa:	0004e497          	auipc	s1,0x4e
    8000e7ae:	86648493          	addi	s1,s1,-1946 # 8005c010 <excpt>
    8000e7b2:	00024597          	auipc	a1,0x24
    8000e7b6:	f0658593          	addi	a1,a1,-250 # 800326b8 <__func__.0+0x2d0>
    8000e7ba:	c789                	beqz	a5,8000e7c4 <priv_change_2+0x8e>
    8000e7bc:	6498                	ld	a4,8(s1)
    8000e7be:	47b5                	li	a5,13
    8000e7c0:	0cf70463          	beq	a4,a5,8000e888 <priv_change_2+0x152>
    8000e7c4:	00024517          	auipc	a0,0x24
    8000e7c8:	f3450513          	addi	a0,a0,-204 # 800326f8 <__func__.0+0x310>
    8000e7cc:	4f9200ef          	jal	8002f4c4 <printf>
    8000e7d0:	0004e797          	auipc	a5,0x4e
    8000e7d4:	8417c783          	lbu	a5,-1983(a5) # 8005c011 <excpt+0x1>
    8000e7d8:	c789                	beqz	a5,8000e7e2 <priv_change_2+0xac>
    8000e7da:	6498                	ld	a4,8(s1)
    8000e7dc:	47b5                	li	a5,13
    8000e7de:	04f70e63          	beq	a4,a5,8000e83a <priv_change_2+0x104>
    8000e7e2:	00024517          	auipc	a0,0x24
    8000e7e6:	f1e50513          	addi	a0,a0,-226 # 80032700 <__func__.0+0x318>
    8000e7ea:	4db200ef          	jal	8002f4c4 <printf>
    8000e7ee:	02900513          	li	a0,41
    8000e7f2:	1c11f0ef          	jal	8002e1b2 <putchar>
    8000e7f6:	4529                	li	a0,10
    8000e7f8:	1bb1f0ef          	jal	8002e1b2 <putchar>
    8000e7fc:	0004e417          	auipc	s0,0x4e
    8000e800:	81544403          	lbu	s0,-2027(s0) # 8005c011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );    

    TEST_END();
    8000e804:	00024597          	auipc	a1,0x24
    8000e808:	eb458593          	addi	a1,a1,-332 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e80c:	c411                	beqz	s0,8000e818 <priv_change_2+0xe2>
    8000e80e:	6498                	ld	a4,8(s1)
    8000e810:	47b5                	li	a5,13
    8000e812:	04f70363          	beq	a4,a5,8000e858 <priv_change_2+0x122>
    8000e816:	4401                	li	s0,0
    TEST_END();
    8000e818:	00024517          	auipc	a0,0x24
    8000e81c:	f4850513          	addi	a0,a0,-184 # 80032760 <__func__.0+0x378>
    8000e820:	4a5200ef          	jal	8002f4c4 <printf>
    8000e824:	4511                	li	a0,4
    8000e826:	eeef20ef          	jal	80000f14 <goto_priv>
    8000e82a:	f4df20ef          	jal	80001776 <reset_state>
}
    8000e82e:	60e2                	ld	ra,24(sp)
    8000e830:	8522                	mv	a0,s0
    8000e832:	6442                	ld	s0,16(sp)
    8000e834:	64a2                	ld	s1,8(sp)
    8000e836:	6105                	addi	sp,sp,32
    8000e838:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e83a:	0004d717          	auipc	a4,0x4d
    8000e83e:	7da72703          	lw	a4,2010(a4) # 8005c014 <excpt+0x4>
    8000e842:	4791                	li	a5,4
    8000e844:	f8f71fe3          	bne	a4,a5,8000e7e2 <priv_change_2+0xac>
    8000e848:	00033717          	auipc	a4,0x33
    8000e84c:	80c72703          	lw	a4,-2036(a4) # 80041054 <curr_priv>
    8000e850:	4789                	li	a5,2
    8000e852:	f8f718e3          	bne	a4,a5,8000e7e2 <priv_change_2+0xac>
    8000e856:	b745                	j	8000e7f6 <priv_change_2+0xc0>
    8000e858:	0004d717          	auipc	a4,0x4d
    8000e85c:	7bc72703          	lw	a4,1980(a4) # 8005c014 <excpt+0x4>
    8000e860:	4791                	li	a5,4
    8000e862:	faf71ae3          	bne	a4,a5,8000e816 <priv_change_2+0xe0>
    8000e866:	00032717          	auipc	a4,0x32
    8000e86a:	7ee72703          	lw	a4,2030(a4) # 80041054 <curr_priv>
    8000e86e:	4789                	li	a5,2
    TEST_END();
    8000e870:	00024597          	auipc	a1,0x24
    8000e874:	e3858593          	addi	a1,a1,-456 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e878:	faf700e3          	beq	a4,a5,8000e818 <priv_change_2+0xe2>
    8000e87c:	4401                	li	s0,0
    TEST_END();
    8000e87e:	00024597          	auipc	a1,0x24
    8000e882:	e3a58593          	addi	a1,a1,-454 # 800326b8 <__func__.0+0x2d0>
    8000e886:	bf49                	j	8000e818 <priv_change_2+0xe2>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e888:	0004d717          	auipc	a4,0x4d
    8000e88c:	78c72703          	lw	a4,1932(a4) # 8005c014 <excpt+0x4>
    8000e890:	4791                	li	a5,4
    8000e892:	f2f719e3          	bne	a4,a5,8000e7c4 <priv_change_2+0x8e>
    8000e896:	00032717          	auipc	a4,0x32
    8000e89a:	7be72703          	lw	a4,1982(a4) # 80041054 <curr_priv>
    8000e89e:	4789                	li	a5,2
    8000e8a0:	00024597          	auipc	a1,0x24
    8000e8a4:	e0858593          	addi	a1,a1,-504 # 800326a8 <__func__.0+0x2c0>
    8000e8a8:	f0f70ee3          	beq	a4,a5,8000e7c4 <priv_change_2+0x8e>
    8000e8ac:	00024597          	auipc	a1,0x24
    8000e8b0:	e0c58593          	addi	a1,a1,-500 # 800326b8 <__func__.0+0x2d0>
    8000e8b4:	bf01                	j	8000e7c4 <priv_change_2+0x8e>

000000008000e8b6 <priv_change_3>:


bool priv_change_3(){
    8000e8b6:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000e8b8:	00022597          	auipc	a1,0x22
    8000e8bc:	fc058593          	addi	a1,a1,-64 # 80030878 <__func__.13>
    8000e8c0:	00024517          	auipc	a0,0x24
    8000e8c4:	e0850513          	addi	a0,a0,-504 # 800326c8 <__func__.0+0x2e0>
bool priv_change_3(){
    8000e8c8:	e406                	sd	ra,8(sp)
    8000e8ca:	e022                	sd	s0,0(sp)
    TEST_START();
    8000e8cc:	3f9200ef          	jal	8002f4c4 <printf>
    8000e8d0:	4529                	li	a0,10
    8000e8d2:	0e11f0ef          	jal	8002e1b2 <putchar>


    goto_priv(PRIV_HS);
    8000e8d6:	450d                	li	a0,3
    8000e8d8:	e3cf20ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8000e8dc:	d11f10ef          	jal	800005ec <hspt_init>
    hpt_init();
    8000e8e0:	8f0f20ef          	jal	800009d0 <hpt_init>
    vspt_init(); 
    8000e8e4:	ea5f10ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭代理，切换到M态处理异常，处理结束执行mret返回HS态
    TEST_SETUP_EXCEPT();  
    8000e8e8:	d30f20ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8000e8ec:	4511                	li	a0,4
    8000e8ee:	e26f20ef          	jal	80000f14 <goto_priv>
    CSRW(medeleg,0);
    8000e8f2:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);
    8000e8f6:	30305073          	csrwi	mideleg,0
    goto_priv(PRIV_HS);     
    8000e8fa:	450d                	li	a0,3
    8000e8fc:	e18f20ef          	jal	80000f14 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000e900:	d18f20ef          	jal	80000e18 <test_setup_except_function>
    8000e904:	400197b7          	lui	a5,0x40019
    8000e908:	078a                	slli	a5,a5,0x2
    8000e90a:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    //mret();
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e90e:	08c00593          	li	a1,140
    8000e912:	00027617          	auipc	a2,0x27
    8000e916:	96660613          	addi	a2,a2,-1690 # 80035278 <__func__.0+0x2e90>
    8000e91a:	00024517          	auipc	a0,0x24
    8000e91e:	dc650513          	addi	a0,a0,-570 # 800326e0 <__func__.0+0x2f8>
    8000e922:	3a3200ef          	jal	8002f4c4 <printf>
    8000e926:	0004d797          	auipc	a5,0x4d
    8000e92a:	6eb7c783          	lbu	a5,1771(a5) # 8005c011 <excpt+0x1>
    8000e92e:	00024597          	auipc	a1,0x24
    8000e932:	d8a58593          	addi	a1,a1,-630 # 800326b8 <__func__.0+0x2d0>
    8000e936:	cb81                	beqz	a5,8000e946 <priv_change_3+0x90>
    8000e938:	00032717          	auipc	a4,0x32
    8000e93c:	71c72703          	lw	a4,1820(a4) # 80041054 <curr_priv>
    8000e940:	478d                	li	a5,3
    8000e942:	0af70b63          	beq	a4,a5,8000e9f8 <priv_change_3+0x142>
    8000e946:	00024517          	auipc	a0,0x24
    8000e94a:	db250513          	addi	a0,a0,-590 # 800326f8 <__func__.0+0x310>
    8000e94e:	377200ef          	jal	8002f4c4 <printf>
    8000e952:	0004d797          	auipc	a5,0x4d
    8000e956:	6bf7c783          	lbu	a5,1727(a5) # 8005c011 <excpt+0x1>
    8000e95a:	cb81                	beqz	a5,8000e96a <priv_change_3+0xb4>
    8000e95c:	00032717          	auipc	a4,0x32
    8000e960:	6f872703          	lw	a4,1784(a4) # 80041054 <curr_priv>
    8000e964:	478d                	li	a5,3
    8000e966:	06f70063          	beq	a4,a5,8000e9c6 <priv_change_3+0x110>
    8000e96a:	00024517          	auipc	a0,0x24
    8000e96e:	d9650513          	addi	a0,a0,-618 # 80032700 <__func__.0+0x318>
    8000e972:	353200ef          	jal	8002f4c4 <printf>
    8000e976:	02900513          	li	a0,41
    8000e97a:	0391f0ef          	jal	8002e1b2 <putchar>
    8000e97e:	4529                	li	a0,10
    8000e980:	0331f0ef          	jal	8002e1b2 <putchar>
    8000e984:	0004d417          	auipc	s0,0x4d
    8000e988:	68d44403          	lbu	s0,1677(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        curr_priv == PRIV_HS &&
        excpt.priv == PRIV_M
    ); 

    TEST_END();
    8000e98c:	00024597          	auipc	a1,0x24
    8000e990:	d2c58593          	addi	a1,a1,-724 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e994:	c809                	beqz	s0,8000e9a6 <priv_change_3+0xf0>
    8000e996:	00032717          	auipc	a4,0x32
    8000e99a:	6be72703          	lw	a4,1726(a4) # 80041054 <curr_priv>
    8000e99e:	478d                	li	a5,3
    8000e9a0:	02f70b63          	beq	a4,a5,8000e9d6 <priv_change_3+0x120>
    8000e9a4:	4401                	li	s0,0
    TEST_END();
    8000e9a6:	00024517          	auipc	a0,0x24
    8000e9aa:	dba50513          	addi	a0,a0,-582 # 80032760 <__func__.0+0x378>
    8000e9ae:	317200ef          	jal	8002f4c4 <printf>
    8000e9b2:	4511                	li	a0,4
    8000e9b4:	d60f20ef          	jal	80000f14 <goto_priv>
    8000e9b8:	dbff20ef          	jal	80001776 <reset_state>
}
    8000e9bc:	60a2                	ld	ra,8(sp)
    8000e9be:	8522                	mv	a0,s0
    8000e9c0:	6402                	ld	s0,0(sp)
    8000e9c2:	0141                	addi	sp,sp,16
    8000e9c4:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e9c6:	0004d717          	auipc	a4,0x4d
    8000e9ca:	64e72703          	lw	a4,1614(a4) # 8005c014 <excpt+0x4>
    8000e9ce:	4791                	li	a5,4
    8000e9d0:	f8f71de3          	bne	a4,a5,8000e96a <priv_change_3+0xb4>
    8000e9d4:	b76d                	j	8000e97e <priv_change_3+0xc8>
    8000e9d6:	0004d717          	auipc	a4,0x4d
    8000e9da:	63e72703          	lw	a4,1598(a4) # 8005c014 <excpt+0x4>
    8000e9de:	4791                	li	a5,4
    TEST_END();
    8000e9e0:	00024597          	auipc	a1,0x24
    8000e9e4:	cc858593          	addi	a1,a1,-824 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e9e8:	faf70fe3          	beq	a4,a5,8000e9a6 <priv_change_3+0xf0>
    8000e9ec:	4401                	li	s0,0
    TEST_END();
    8000e9ee:	00024597          	auipc	a1,0x24
    8000e9f2:	cca58593          	addi	a1,a1,-822 # 800326b8 <__func__.0+0x2d0>
    8000e9f6:	bf45                	j	8000e9a6 <priv_change_3+0xf0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e9f8:	0004d717          	auipc	a4,0x4d
    8000e9fc:	61c72703          	lw	a4,1564(a4) # 8005c014 <excpt+0x4>
    8000ea00:	4791                	li	a5,4
    8000ea02:	00024597          	auipc	a1,0x24
    8000ea06:	ca658593          	addi	a1,a1,-858 # 800326a8 <__func__.0+0x2c0>
    8000ea0a:	f2f70ee3          	beq	a4,a5,8000e946 <priv_change_3+0x90>
    8000ea0e:	00024597          	auipc	a1,0x24
    8000ea12:	caa58593          	addi	a1,a1,-854 # 800326b8 <__func__.0+0x2d0>
    8000ea16:	bf05                	j	8000e946 <priv_change_3+0x90>

000000008000ea18 <priv_change_4>:

bool priv_change_4(){
    8000ea18:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000ea1a:	00022597          	auipc	a1,0x22
    8000ea1e:	e6e58593          	addi	a1,a1,-402 # 80030888 <__func__.12>
    8000ea22:	00024517          	auipc	a0,0x24
    8000ea26:	ca650513          	addi	a0,a0,-858 # 800326c8 <__func__.0+0x2e0>
bool priv_change_4(){
    8000ea2a:	ec06                	sd	ra,24(sp)
    8000ea2c:	e822                	sd	s0,16(sp)
    8000ea2e:	e426                	sd	s1,8(sp)
    TEST_START();
    8000ea30:	295200ef          	jal	8002f4c4 <printf>
    8000ea34:	4529                	li	a0,10
    8000ea36:	77c1f0ef          	jal	8002e1b2 <putchar>


    goto_priv(PRIV_HS);
    8000ea3a:	450d                	li	a0,3
    8000ea3c:	cd8f20ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8000ea40:	badf10ef          	jal	800005ec <hspt_init>
    hpt_init();
    8000ea44:	f8df10ef          	jal	800009d0 <hpt_init>
    vspt_init(); 
    8000ea48:	d41f10ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000ea4c:	4511                	li	a0,4
    8000ea4e:	cc6f20ef          	jal	80000f14 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000ea52:	6789                	lui	a5,0x2
    8000ea54:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_HS);     
    8000ea58:	450d                	li	a0,3
    8000ea5a:	cbaf20ef          	jal	80000f14 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000ea5e:	bbaf20ef          	jal	80000e18 <test_setup_except_function>
    8000ea62:	400197b7          	lui	a5,0x40019
    8000ea66:	078a                	slli	a5,a5,0x2
    8000ea68:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ea6c:	08c00593          	li	a1,140
    8000ea70:	00027617          	auipc	a2,0x27
    8000ea74:	87860613          	addi	a2,a2,-1928 # 800352e8 <__func__.0+0x2f00>
    8000ea78:	00024517          	auipc	a0,0x24
    8000ea7c:	c6850513          	addi	a0,a0,-920 # 800326e0 <__func__.0+0x2f8>
    8000ea80:	245200ef          	jal	8002f4c4 <printf>
    8000ea84:	0004d797          	auipc	a5,0x4d
    8000ea88:	58d7c783          	lbu	a5,1421(a5) # 8005c011 <excpt+0x1>
    8000ea8c:	0004d497          	auipc	s1,0x4d
    8000ea90:	58448493          	addi	s1,s1,1412 # 8005c010 <excpt>
    8000ea94:	00024597          	auipc	a1,0x24
    8000ea98:	c2458593          	addi	a1,a1,-988 # 800326b8 <__func__.0+0x2d0>
    8000ea9c:	c789                	beqz	a5,8000eaa6 <priv_change_4+0x8e>
    8000ea9e:	6498                	ld	a4,8(s1)
    8000eaa0:	47b5                	li	a5,13
    8000eaa2:	0af70663          	beq	a4,a5,8000eb4e <priv_change_4+0x136>
    8000eaa6:	00024517          	auipc	a0,0x24
    8000eaaa:	c5250513          	addi	a0,a0,-942 # 800326f8 <__func__.0+0x310>
    8000eaae:	217200ef          	jal	8002f4c4 <printf>
    8000eab2:	0004d797          	auipc	a5,0x4d
    8000eab6:	55f7c783          	lbu	a5,1375(a5) # 8005c011 <excpt+0x1>
    8000eaba:	c789                	beqz	a5,8000eac4 <priv_change_4+0xac>
    8000eabc:	6498                	ld	a4,8(s1)
    8000eabe:	47b5                	li	a5,13
    8000eac0:	04f70e63          	beq	a4,a5,8000eb1c <priv_change_4+0x104>
    8000eac4:	00024517          	auipc	a0,0x24
    8000eac8:	c3c50513          	addi	a0,a0,-964 # 80032700 <__func__.0+0x318>
    8000eacc:	1f9200ef          	jal	8002f4c4 <printf>
    8000ead0:	02900513          	li	a0,41
    8000ead4:	6de1f0ef          	jal	8002e1b2 <putchar>
    8000ead8:	4529                	li	a0,10
    8000eada:	6d81f0ef          	jal	8002e1b2 <putchar>
    8000eade:	0004d417          	auipc	s0,0x4d
    8000eae2:	53344403          	lbu	s0,1331(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        excpt.priv==PRIV_M
    );  
    
    TEST_END();
    8000eae6:	00024597          	auipc	a1,0x24
    8000eaea:	bd258593          	addi	a1,a1,-1070 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000eaee:	c411                	beqz	s0,8000eafa <priv_change_4+0xe2>
    8000eaf0:	6498                	ld	a4,8(s1)
    8000eaf2:	47b5                	li	a5,13
    8000eaf4:	02f70c63          	beq	a4,a5,8000eb2c <priv_change_4+0x114>
    8000eaf8:	4401                	li	s0,0
    TEST_END();
    8000eafa:	00024517          	auipc	a0,0x24
    8000eafe:	c6650513          	addi	a0,a0,-922 # 80032760 <__func__.0+0x378>
    8000eb02:	1c3200ef          	jal	8002f4c4 <printf>
    8000eb06:	4511                	li	a0,4
    8000eb08:	c0cf20ef          	jal	80000f14 <goto_priv>
    8000eb0c:	c6bf20ef          	jal	80001776 <reset_state>
}
    8000eb10:	60e2                	ld	ra,24(sp)
    8000eb12:	8522                	mv	a0,s0
    8000eb14:	6442                	ld	s0,16(sp)
    8000eb16:	64a2                	ld	s1,8(sp)
    8000eb18:	6105                	addi	sp,sp,32
    8000eb1a:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000eb1c:	0004d717          	auipc	a4,0x4d
    8000eb20:	4f872703          	lw	a4,1272(a4) # 8005c014 <excpt+0x4>
    8000eb24:	4791                	li	a5,4
    8000eb26:	f8f71fe3          	bne	a4,a5,8000eac4 <priv_change_4+0xac>
    8000eb2a:	b77d                	j	8000ead8 <priv_change_4+0xc0>
    8000eb2c:	0004d717          	auipc	a4,0x4d
    8000eb30:	4e872703          	lw	a4,1256(a4) # 8005c014 <excpt+0x4>
    8000eb34:	4791                	li	a5,4
    TEST_END();
    8000eb36:	00024597          	auipc	a1,0x24
    8000eb3a:	b7258593          	addi	a1,a1,-1166 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000eb3e:	faf70ee3          	beq	a4,a5,8000eafa <priv_change_4+0xe2>
    8000eb42:	4401                	li	s0,0
    TEST_END();
    8000eb44:	00024597          	auipc	a1,0x24
    8000eb48:	b7458593          	addi	a1,a1,-1164 # 800326b8 <__func__.0+0x2d0>
    8000eb4c:	b77d                	j	8000eafa <priv_change_4+0xe2>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000eb4e:	0004d717          	auipc	a4,0x4d
    8000eb52:	4c672703          	lw	a4,1222(a4) # 8005c014 <excpt+0x4>
    8000eb56:	4791                	li	a5,4
    8000eb58:	00024597          	auipc	a1,0x24
    8000eb5c:	b5058593          	addi	a1,a1,-1200 # 800326a8 <__func__.0+0x2c0>
    8000eb60:	f4f703e3          	beq	a4,a5,8000eaa6 <priv_change_4+0x8e>
    8000eb64:	00024597          	auipc	a1,0x24
    8000eb68:	b5458593          	addi	a1,a1,-1196 # 800326b8 <__func__.0+0x2d0>
    8000eb6c:	bf2d                	j	8000eaa6 <priv_change_4+0x8e>

000000008000eb6e <priv_change_5>:

bool priv_change_5(){
    8000eb6e:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000eb70:	00022597          	auipc	a1,0x22
    8000eb74:	d2858593          	addi	a1,a1,-728 # 80030898 <__func__.11>
    8000eb78:	00024517          	auipc	a0,0x24
    8000eb7c:	b5050513          	addi	a0,a0,-1200 # 800326c8 <__func__.0+0x2e0>
bool priv_change_5(){
    8000eb80:	e406                	sd	ra,8(sp)
    8000eb82:	e022                	sd	s0,0(sp)
    TEST_START();
    8000eb84:	141200ef          	jal	8002f4c4 <printf>
    8000eb88:	4529                	li	a0,10
    8000eb8a:	6281f0ef          	jal	8002e1b2 <putchar>


    //V=0，M模式下发生异常，M态处理异常
    goto_priv(PRIV_M);
    8000eb8e:	4511                	li	a0,4
    8000eb90:	b84f20ef          	jal	80000f14 <goto_priv>
    reset_state();
    8000eb94:	be3f20ef          	jal	80001776 <reset_state>
    CSRW(medeleg, 0); 
    8000eb98:	30205073          	csrwi	medeleg,0

    TEST_SETUP_EXCEPT();       
    8000eb9c:	a7cf20ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    8000eba0:	00000073          	ecall
    ecall_1(); 
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000eba4:	08c00593          	li	a1,140
    8000eba8:	00026617          	auipc	a2,0x26
    8000ebac:	78060613          	addi	a2,a2,1920 # 80035328 <__func__.0+0x2f40>
    8000ebb0:	00024517          	auipc	a0,0x24
    8000ebb4:	b3050513          	addi	a0,a0,-1232 # 800326e0 <__func__.0+0x2f8>
    8000ebb8:	10d200ef          	jal	8002f4c4 <printf>
    8000ebbc:	0004d417          	auipc	s0,0x4d
    8000ebc0:	45440413          	addi	s0,s0,1108 # 8005c010 <excpt>
    8000ebc4:	6014                	ld	a3,0(s0)
    8000ebc6:	f0001737          	lui	a4,0xf0001
    8000ebca:	0712                	slli	a4,a4,0x4
    8000ebcc:	4785                	li	a5,1
    8000ebce:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ebd2:	178a                	slli	a5,a5,0x22
    8000ebd4:	8f75                	and	a4,a4,a3
    8000ebd6:	10078793          	addi	a5,a5,256
    8000ebda:	00024597          	auipc	a1,0x24
    8000ebde:	ace58593          	addi	a1,a1,-1330 # 800326a8 <__func__.0+0x2c0>
    8000ebe2:	00f70663          	beq	a4,a5,8000ebee <priv_change_5+0x80>
    8000ebe6:	00024597          	auipc	a1,0x24
    8000ebea:	ad258593          	addi	a1,a1,-1326 # 800326b8 <__func__.0+0x2d0>
    8000ebee:	00024517          	auipc	a0,0x24
    8000ebf2:	b0a50513          	addi	a0,a0,-1270 # 800326f8 <__func__.0+0x310>
    8000ebf6:	0cf200ef          	jal	8002f4c4 <printf>
    8000ebfa:	0004d797          	auipc	a5,0x4d
    8000ebfe:	4177c783          	lbu	a5,1047(a5) # 8005c011 <excpt+0x1>
    8000ec02:	cb81                	beqz	a5,8000ec12 <priv_change_5+0xa4>
    8000ec04:	0004d717          	auipc	a4,0x4d
    8000ec08:	41072703          	lw	a4,1040(a4) # 8005c014 <excpt+0x4>
    8000ec0c:	4791                	li	a5,4
    8000ec0e:	00f70c63          	beq	a4,a5,8000ec26 <priv_change_5+0xb8>
    8000ec12:	00024517          	auipc	a0,0x24
    8000ec16:	aee50513          	addi	a0,a0,-1298 # 80032700 <__func__.0+0x318>
    8000ec1a:	0ab200ef          	jal	8002f4c4 <printf>
    8000ec1e:	02900513          	li	a0,41
    8000ec22:	5901f0ef          	jal	8002e1b2 <putchar>
    8000ec26:	4529                	li	a0,10
    8000ec28:	58a1f0ef          	jal	8002e1b2 <putchar>
    8000ec2c:	6014                	ld	a3,0(s0)
    8000ec2e:	f0001737          	lui	a4,0xf0001
    8000ec32:	0712                	slli	a4,a4,0x4
    8000ec34:	4785                	li	a5,1
    8000ec36:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ec3a:	178a                	slli	a5,a5,0x22
    8000ec3c:	8f75                	and	a4,a4,a3
    8000ec3e:	10078793          	addi	a5,a5,256
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    ); 
    
    printf("niuh");
    8000ec42:	00026517          	auipc	a0,0x26
    8000ec46:	71e50513          	addi	a0,a0,1822 # 80035360 <__func__.0+0x2f78>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ec4a:	02f70963          	beq	a4,a5,8000ec7c <priv_change_5+0x10e>
    printf("niuh");
    8000ec4e:	077200ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ec52:	4401                	li	s0,0

    TEST_END();
    8000ec54:	00024597          	auipc	a1,0x24
    8000ec58:	a6458593          	addi	a1,a1,-1436 # 800326b8 <__func__.0+0x2d0>
    8000ec5c:	00024517          	auipc	a0,0x24
    8000ec60:	b0450513          	addi	a0,a0,-1276 # 80032760 <__func__.0+0x378>
    8000ec64:	061200ef          	jal	8002f4c4 <printf>
    8000ec68:	4511                	li	a0,4
    8000ec6a:	aaaf20ef          	jal	80000f14 <goto_priv>
    8000ec6e:	b09f20ef          	jal	80001776 <reset_state>
}
    8000ec72:	60a2                	ld	ra,8(sp)
    8000ec74:	8522                	mv	a0,s0
    8000ec76:	6402                	ld	s0,0(sp)
    8000ec78:	0141                	addi	sp,sp,16
    8000ec7a:	8082                	ret
    printf("niuh");
    8000ec7c:	049200ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ec80:	4405                	li	s0,1
    TEST_END();
    8000ec82:	00024597          	auipc	a1,0x24
    8000ec86:	a2658593          	addi	a1,a1,-1498 # 800326a8 <__func__.0+0x2c0>
    8000ec8a:	bfc9                	j	8000ec5c <priv_change_5+0xee>

000000008000ec8c <priv_change_6>:

bool priv_change_6(){
    8000ec8c:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000ec8e:	00022597          	auipc	a1,0x22
    8000ec92:	c1a58593          	addi	a1,a1,-998 # 800308a8 <__func__.10>
    8000ec96:	00024517          	auipc	a0,0x24
    8000ec9a:	a3250513          	addi	a0,a0,-1486 # 800326c8 <__func__.0+0x2e0>
bool priv_change_6(){
    8000ec9e:	e406                	sd	ra,8(sp)
    8000eca0:	e022                	sd	s0,0(sp)
    TEST_START();
    8000eca2:	023200ef          	jal	8002f4c4 <printf>
    8000eca6:	4529                	li	a0,10
    8000eca8:	50a1f0ef          	jal	8002e1b2 <putchar>


    //V=0，U模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000ecac:	4511                	li	a0,4
    8000ecae:	a66f20ef          	jal	80000f14 <goto_priv>
    CSRW(medeleg,0);         
    8000ecb2:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_HU); 
    8000ecb6:	4505                	li	a0,1
    8000ecb8:	a5cf20ef          	jal	80000f14 <goto_priv>
    
    TEST_SETUP_EXCEPT();      
    8000ecbc:	95cf20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000ecc0:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000ecc4:	08c00593          	li	a1,140
    8000ecc8:	00026617          	auipc	a2,0x26
    8000eccc:	6a060613          	addi	a2,a2,1696 # 80035368 <__func__.0+0x2f80>
    8000ecd0:	00024517          	auipc	a0,0x24
    8000ecd4:	a1050513          	addi	a0,a0,-1520 # 800326e0 <__func__.0+0x2f8>
    8000ecd8:	7ec200ef          	jal	8002f4c4 <printf>
    8000ecdc:	0004d417          	auipc	s0,0x4d
    8000ece0:	33440413          	addi	s0,s0,820 # 8005c010 <excpt>
    8000ece4:	6014                	ld	a3,0(s0)
    8000ece6:	f0001737          	lui	a4,0xf0001
    8000ecea:	0712                	slli	a4,a4,0x4
    8000ecec:	4785                	li	a5,1
    8000ecee:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ecf2:	178a                	slli	a5,a5,0x22
    8000ecf4:	8f75                	and	a4,a4,a3
    8000ecf6:	10078793          	addi	a5,a5,256
    8000ecfa:	00024597          	auipc	a1,0x24
    8000ecfe:	9ae58593          	addi	a1,a1,-1618 # 800326a8 <__func__.0+0x2c0>
    8000ed02:	00f70663          	beq	a4,a5,8000ed0e <priv_change_6+0x82>
    8000ed06:	00024597          	auipc	a1,0x24
    8000ed0a:	9b258593          	addi	a1,a1,-1614 # 800326b8 <__func__.0+0x2d0>
    8000ed0e:	00024517          	auipc	a0,0x24
    8000ed12:	9ea50513          	addi	a0,a0,-1558 # 800326f8 <__func__.0+0x310>
    8000ed16:	7ae200ef          	jal	8002f4c4 <printf>
    8000ed1a:	0004d797          	auipc	a5,0x4d
    8000ed1e:	2f77c783          	lbu	a5,759(a5) # 8005c011 <excpt+0x1>
    8000ed22:	cb81                	beqz	a5,8000ed32 <priv_change_6+0xa6>
    8000ed24:	0004d717          	auipc	a4,0x4d
    8000ed28:	2f072703          	lw	a4,752(a4) # 8005c014 <excpt+0x4>
    8000ed2c:	4791                	li	a5,4
    8000ed2e:	00f70c63          	beq	a4,a5,8000ed46 <priv_change_6+0xba>
    8000ed32:	00024517          	auipc	a0,0x24
    8000ed36:	9ce50513          	addi	a0,a0,-1586 # 80032700 <__func__.0+0x318>
    8000ed3a:	78a200ef          	jal	8002f4c4 <printf>
    8000ed3e:	02900513          	li	a0,41
    8000ed42:	4701f0ef          	jal	8002e1b2 <putchar>
    8000ed46:	4529                	li	a0,10
    8000ed48:	46a1f0ef          	jal	8002e1b2 <putchar>
    8000ed4c:	6014                	ld	a3,0(s0)
    8000ed4e:	f0001737          	lui	a4,0xf0001
    8000ed52:	0712                	slli	a4,a4,0x4
    8000ed54:	4785                	li	a5,1
    8000ed56:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ed5a:	178a                	slli	a5,a5,0x22
    8000ed5c:	8f75                	and	a4,a4,a3
    8000ed5e:	10078793          	addi	a5,a5,256
    8000ed62:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );

    TEST_END();
    8000ed64:	00024597          	auipc	a1,0x24
    8000ed68:	95458593          	addi	a1,a1,-1708 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000ed6c:	00f71763          	bne	a4,a5,8000ed7a <priv_change_6+0xee>
    8000ed70:	4405                	li	s0,1
    TEST_END();
    8000ed72:	00024597          	auipc	a1,0x24
    8000ed76:	93658593          	addi	a1,a1,-1738 # 800326a8 <__func__.0+0x2c0>
    8000ed7a:	00024517          	auipc	a0,0x24
    8000ed7e:	9e650513          	addi	a0,a0,-1562 # 80032760 <__func__.0+0x378>
    8000ed82:	742200ef          	jal	8002f4c4 <printf>
    8000ed86:	4511                	li	a0,4
    8000ed88:	98cf20ef          	jal	80000f14 <goto_priv>
    8000ed8c:	9ebf20ef          	jal	80001776 <reset_state>
}
    8000ed90:	60a2                	ld	ra,8(sp)
    8000ed92:	8522                	mv	a0,s0
    8000ed94:	6402                	ld	s0,0(sp)
    8000ed96:	0141                	addi	sp,sp,16
    8000ed98:	8082                	ret

000000008000ed9a <priv_change_7>:

bool priv_change_7(){
    8000ed9a:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000ed9c:	00022597          	auipc	a1,0x22
    8000eda0:	b1c58593          	addi	a1,a1,-1252 # 800308b8 <__func__.9>
    8000eda4:	00024517          	auipc	a0,0x24
    8000eda8:	92450513          	addi	a0,a0,-1756 # 800326c8 <__func__.0+0x2e0>
bool priv_change_7(){
    8000edac:	e406                	sd	ra,8(sp)
    8000edae:	e022                	sd	s0,0(sp)
    TEST_START();
    8000edb0:	714200ef          	jal	8002f4c4 <printf>
    8000edb4:	4529                	li	a0,10
    8000edb6:	3fc1f0ef          	jal	8002e1b2 <putchar>


    //V=1，VU模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000edba:	4511                	li	a0,4
    8000edbc:	958f20ef          	jal	80000f14 <goto_priv>
    CSRW(medeleg,0);      
    8000edc0:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_VU);     
    8000edc4:	4501                	li	a0,0
    8000edc6:	94ef20ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000edca:	84ef20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000edce:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000edd2:	08c00593          	li	a1,140
    8000edd6:	00026617          	auipc	a2,0x26
    8000edda:	5d260613          	addi	a2,a2,1490 # 800353a8 <__func__.0+0x2fc0>
    8000edde:	00024517          	auipc	a0,0x24
    8000ede2:	90250513          	addi	a0,a0,-1790 # 800326e0 <__func__.0+0x2f8>
    8000ede6:	6de200ef          	jal	8002f4c4 <printf>
    8000edea:	0004d417          	auipc	s0,0x4d
    8000edee:	22640413          	addi	s0,s0,550 # 8005c010 <excpt>
    8000edf2:	6014                	ld	a3,0(s0)
    8000edf4:	f0001737          	lui	a4,0xf0001
    8000edf8:	0712                	slli	a4,a4,0x4
    8000edfa:	4785                	li	a5,1
    8000edfc:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ee00:	178a                	slli	a5,a5,0x22
    8000ee02:	8f75                	and	a4,a4,a3
    8000ee04:	10078793          	addi	a5,a5,256
    8000ee08:	00024597          	auipc	a1,0x24
    8000ee0c:	8a058593          	addi	a1,a1,-1888 # 800326a8 <__func__.0+0x2c0>
    8000ee10:	00f70663          	beq	a4,a5,8000ee1c <priv_change_7+0x82>
    8000ee14:	00024597          	auipc	a1,0x24
    8000ee18:	8a458593          	addi	a1,a1,-1884 # 800326b8 <__func__.0+0x2d0>
    8000ee1c:	00024517          	auipc	a0,0x24
    8000ee20:	8dc50513          	addi	a0,a0,-1828 # 800326f8 <__func__.0+0x310>
    8000ee24:	6a0200ef          	jal	8002f4c4 <printf>
    8000ee28:	0004d797          	auipc	a5,0x4d
    8000ee2c:	1e97c783          	lbu	a5,489(a5) # 8005c011 <excpt+0x1>
    8000ee30:	cb81                	beqz	a5,8000ee40 <priv_change_7+0xa6>
    8000ee32:	0004d717          	auipc	a4,0x4d
    8000ee36:	1e272703          	lw	a4,482(a4) # 8005c014 <excpt+0x4>
    8000ee3a:	4791                	li	a5,4
    8000ee3c:	00f70c63          	beq	a4,a5,8000ee54 <priv_change_7+0xba>
    8000ee40:	00024517          	auipc	a0,0x24
    8000ee44:	8c050513          	addi	a0,a0,-1856 # 80032700 <__func__.0+0x318>
    8000ee48:	67c200ef          	jal	8002f4c4 <printf>
    8000ee4c:	02900513          	li	a0,41
    8000ee50:	3621f0ef          	jal	8002e1b2 <putchar>
    8000ee54:	4529                	li	a0,10
    8000ee56:	35c1f0ef          	jal	8002e1b2 <putchar>
    8000ee5a:	6014                	ld	a3,0(s0)
    8000ee5c:	f0001737          	lui	a4,0xf0001
    8000ee60:	0712                	slli	a4,a4,0x4
    8000ee62:	4785                	li	a5,1
    8000ee64:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ee68:	178a                	slli	a5,a5,0x22
    8000ee6a:	8f75                	and	a4,a4,a3
    8000ee6c:	10078793          	addi	a5,a5,256
    8000ee70:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );   


    TEST_END();
    8000ee72:	00024597          	auipc	a1,0x24
    8000ee76:	84658593          	addi	a1,a1,-1978 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000ee7a:	00f71763          	bne	a4,a5,8000ee88 <priv_change_7+0xee>
    8000ee7e:	4405                	li	s0,1
    TEST_END();
    8000ee80:	00024597          	auipc	a1,0x24
    8000ee84:	82858593          	addi	a1,a1,-2008 # 800326a8 <__func__.0+0x2c0>
    8000ee88:	00024517          	auipc	a0,0x24
    8000ee8c:	8d850513          	addi	a0,a0,-1832 # 80032760 <__func__.0+0x378>
    8000ee90:	634200ef          	jal	8002f4c4 <printf>
    8000ee94:	4511                	li	a0,4
    8000ee96:	87ef20ef          	jal	80000f14 <goto_priv>
    8000ee9a:	8ddf20ef          	jal	80001776 <reset_state>
}
    8000ee9e:	60a2                	ld	ra,8(sp)
    8000eea0:	8522                	mv	a0,s0
    8000eea2:	6402                	ld	s0,0(sp)
    8000eea4:	0141                	addi	sp,sp,16
    8000eea6:	8082                	ret

000000008000eea8 <priv_change_8>:

bool priv_change_8(){
    8000eea8:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000eeaa:	00022597          	auipc	a1,0x22
    8000eeae:	a1e58593          	addi	a1,a1,-1506 # 800308c8 <__func__.8>
    8000eeb2:	00024517          	auipc	a0,0x24
    8000eeb6:	81650513          	addi	a0,a0,-2026 # 800326c8 <__func__.0+0x2e0>
bool priv_change_8(){
    8000eeba:	e406                	sd	ra,8(sp)
    8000eebc:	e022                	sd	s0,0(sp)
    TEST_START();
    8000eebe:	606200ef          	jal	8002f4c4 <printf>
    8000eec2:	4529                	li	a0,10
    8000eec4:	2ee1f0ef          	jal	8002e1b2 <putchar>


    //V=1，VU模式下发生异常，关闭代理，切换到M态处理异常，异常结束执行mret恢复到VU态
    goto_priv(PRIV_M);
    8000eec8:	4511                	li	a0,4
    8000eeca:	84af20ef          	jal	80000f14 <goto_priv>
    reset_state();
    8000eece:	8a9f20ef          	jal	80001776 <reset_state>
    CSRW(medeleg,0);
    8000eed2:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000eed6:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000eeda:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000eede:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VU);     
    8000eee2:	4501                	li	a0,0
    8000eee4:	830f20ef          	jal	80000f14 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000eee8:	f31f10ef          	jal	80000e18 <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000eeec:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000eef0:	08c00593          	li	a1,140
    8000eef4:	00026617          	auipc	a2,0x26
    8000eef8:	4f460613          	addi	a2,a2,1268 # 800353e8 <__func__.0+0x3000>
    8000eefc:	00023517          	auipc	a0,0x23
    8000ef00:	7e450513          	addi	a0,a0,2020 # 800326e0 <__func__.0+0x2f8>
    8000ef04:	5c0200ef          	jal	8002f4c4 <printf>
    8000ef08:	0004d417          	auipc	s0,0x4d
    8000ef0c:	10840413          	addi	s0,s0,264 # 8005c010 <excpt>
    8000ef10:	6014                	ld	a3,0(s0)
    8000ef12:	f0001737          	lui	a4,0xf0001
    8000ef16:	0712                	slli	a4,a4,0x4
    8000ef18:	4785                	li	a5,1
    8000ef1a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ef1e:	178a                	slli	a5,a5,0x22
    8000ef20:	8f75                	and	a4,a4,a3
    8000ef22:	10078793          	addi	a5,a5,256
    8000ef26:	00023597          	auipc	a1,0x23
    8000ef2a:	79258593          	addi	a1,a1,1938 # 800326b8 <__func__.0+0x2d0>
    8000ef2e:	08f70963          	beq	a4,a5,8000efc0 <priv_change_8+0x118>
    8000ef32:	00023517          	auipc	a0,0x23
    8000ef36:	7c650513          	addi	a0,a0,1990 # 800326f8 <__func__.0+0x310>
    8000ef3a:	58a200ef          	jal	8002f4c4 <printf>
    8000ef3e:	0004d797          	auipc	a5,0x4d
    8000ef42:	0d37c783          	lbu	a5,211(a5) # 8005c011 <excpt+0x1>
    8000ef46:	cb81                	beqz	a5,8000ef56 <priv_change_8+0xae>
    8000ef48:	0004d717          	auipc	a4,0x4d
    8000ef4c:	0cc72703          	lw	a4,204(a4) # 8005c014 <excpt+0x4>
    8000ef50:	4791                	li	a5,4
    8000ef52:	06f70163          	beq	a4,a5,8000efb4 <priv_change_8+0x10c>
    8000ef56:	00023517          	auipc	a0,0x23
    8000ef5a:	7aa50513          	addi	a0,a0,1962 # 80032700 <__func__.0+0x318>
    8000ef5e:	566200ef          	jal	8002f4c4 <printf>
    8000ef62:	02900513          	li	a0,41
    8000ef66:	24c1f0ef          	jal	8002e1b2 <putchar>
    8000ef6a:	4529                	li	a0,10
    8000ef6c:	2461f0ef          	jal	8002e1b2 <putchar>
    8000ef70:	6014                	ld	a3,0(s0)
    8000ef72:	f0001737          	lui	a4,0xf0001
    8000ef76:	0712                	slli	a4,a4,0x4
    8000ef78:	4785                	li	a5,1
    8000ef7a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ef7e:	178a                	slli	a5,a5,0x22
    8000ef80:	8f75                	and	a4,a4,a3
    8000ef82:	10078793          	addi	a5,a5,256
    8000ef86:	4401                	li	s0,0
        curr_priv == PRIV_VU
    );



    TEST_END();
    8000ef88:	00023597          	auipc	a1,0x23
    8000ef8c:	73058593          	addi	a1,a1,1840 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ef90:	04f70663          	beq	a4,a5,8000efdc <priv_change_8+0x134>
    TEST_END();
    8000ef94:	00023517          	auipc	a0,0x23
    8000ef98:	7cc50513          	addi	a0,a0,1996 # 80032760 <__func__.0+0x378>
    8000ef9c:	528200ef          	jal	8002f4c4 <printf>
    8000efa0:	4511                	li	a0,4
    8000efa2:	f73f10ef          	jal	80000f14 <goto_priv>
    8000efa6:	fd0f20ef          	jal	80001776 <reset_state>
}
    8000efaa:	60a2                	ld	ra,8(sp)
    8000efac:	8522                	mv	a0,s0
    8000efae:	6402                	ld	s0,0(sp)
    8000efb0:	0141                	addi	sp,sp,16
    8000efb2:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000efb4:	00032797          	auipc	a5,0x32
    8000efb8:	0a07a783          	lw	a5,160(a5) # 80041054 <curr_priv>
    8000efbc:	d7dd                	beqz	a5,8000ef6a <priv_change_8+0xc2>
    8000efbe:	bf61                	j	8000ef56 <priv_change_8+0xae>
    8000efc0:	00032797          	auipc	a5,0x32
    8000efc4:	0947a783          	lw	a5,148(a5) # 80041054 <curr_priv>
    8000efc8:	00023597          	auipc	a1,0x23
    8000efcc:	6e058593          	addi	a1,a1,1760 # 800326a8 <__func__.0+0x2c0>
    8000efd0:	d3ad                	beqz	a5,8000ef32 <priv_change_8+0x8a>
    8000efd2:	00023597          	auipc	a1,0x23
    8000efd6:	6e658593          	addi	a1,a1,1766 # 800326b8 <__func__.0+0x2d0>
    8000efda:	bfa1                	j	8000ef32 <priv_change_8+0x8a>
    8000efdc:	00032797          	auipc	a5,0x32
    8000efe0:	0787a783          	lw	a5,120(a5) # 80041054 <curr_priv>
    8000efe4:	fbc5                	bnez	a5,8000ef94 <priv_change_8+0xec>
    8000efe6:	4405                	li	s0,1
    TEST_END();
    8000efe8:	00023597          	auipc	a1,0x23
    8000efec:	6c058593          	addi	a1,a1,1728 # 800326a8 <__func__.0+0x2c0>
    8000eff0:	b755                	j	8000ef94 <priv_change_8+0xec>

000000008000eff2 <priv_change_9>:
    /*
    当异常代理到了hs模式，那么处理的时候就会用hshandler处理。
    当想去m模式，会ecall，进入异常，但是去m模式需要mhandler才能过去，在hs模式下去处理这类异常是不行的，可是由于开启了异常代理，然后就一直循环执行hshandler出错。
    因此在开启异常代理后，不能在后面执行goto_priv(PRIV_M);否则会无限循环出错
    */
bool priv_change_9(){
    8000eff2:	1141                	addi	sp,sp,-16
    TEST_START();
    8000eff4:	00022597          	auipc	a1,0x22
    8000eff8:	8e458593          	addi	a1,a1,-1820 # 800308d8 <__func__.7>
    8000effc:	00023517          	auipc	a0,0x23
    8000f000:	6cc50513          	addi	a0,a0,1740 # 800326c8 <__func__.0+0x2e0>
bool priv_change_9(){
    8000f004:	e406                	sd	ra,8(sp)
    8000f006:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f008:	4bc200ef          	jal	8002f4c4 <printf>
    8000f00c:	4529                	li	a0,10
    8000f00e:	1a41f0ef          	jal	8002e1b2 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f012:	4511                	li	a0,4
    8000f014:	f01f10ef          	jal	80000f14 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000f018:	57fd                	li	a5,-1
    8000f01a:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f01e:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f022:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f026:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VU);     
    8000f02a:	4501                	li	a0,0
    8000f02c:	ee9f10ef          	jal	80000f14 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f030:	de9f10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f034:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f038:	08c00593          	li	a1,140
    8000f03c:	00026617          	auipc	a2,0x26
    8000f040:	41c60613          	addi	a2,a2,1052 # 80035458 <__func__.0+0x3070>
    8000f044:	00023517          	auipc	a0,0x23
    8000f048:	69c50513          	addi	a0,a0,1692 # 800326e0 <__func__.0+0x2f8>
    8000f04c:	478200ef          	jal	8002f4c4 <printf>
    8000f050:	0004d417          	auipc	s0,0x4d
    8000f054:	fc040413          	addi	s0,s0,-64 # 8005c010 <excpt>
    8000f058:	6014                	ld	a3,0(s0)
    8000f05a:	f0001737          	lui	a4,0xf0001
    8000f05e:	0712                	slli	a4,a4,0x4
    8000f060:	4785                	li	a5,1
    8000f062:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f066:	1786                	slli	a5,a5,0x21
    8000f068:	8f75                	and	a4,a4,a3
    8000f06a:	10078793          	addi	a5,a5,256
    8000f06e:	00023597          	auipc	a1,0x23
    8000f072:	64a58593          	addi	a1,a1,1610 # 800326b8 <__func__.0+0x2d0>
    8000f076:	08f70263          	beq	a4,a5,8000f0fa <priv_change_9+0x108>
    8000f07a:	00023517          	auipc	a0,0x23
    8000f07e:	67e50513          	addi	a0,a0,1662 # 800326f8 <__func__.0+0x310>
    8000f082:	442200ef          	jal	8002f4c4 <printf>
    8000f086:	0004d797          	auipc	a5,0x4d
    8000f08a:	f8b7c783          	lbu	a5,-117(a5) # 8005c011 <excpt+0x1>
    8000f08e:	cb81                	beqz	a5,8000f09e <priv_change_9+0xac>
    8000f090:	0004d717          	auipc	a4,0x4d
    8000f094:	f8472703          	lw	a4,-124(a4) # 8005c014 <excpt+0x4>
    8000f098:	4789                	li	a5,2
    8000f09a:	04f70a63          	beq	a4,a5,8000f0ee <priv_change_9+0xfc>
    8000f09e:	00023517          	auipc	a0,0x23
    8000f0a2:	66250513          	addi	a0,a0,1634 # 80032700 <__func__.0+0x318>
    8000f0a6:	41e200ef          	jal	8002f4c4 <printf>
    8000f0aa:	02900513          	li	a0,41
    8000f0ae:	1041f0ef          	jal	8002e1b2 <putchar>
    8000f0b2:	4529                	li	a0,10
    8000f0b4:	0fe1f0ef          	jal	8002e1b2 <putchar>
    8000f0b8:	6014                	ld	a3,0(s0)
    8000f0ba:	f0001737          	lui	a4,0xf0001
    8000f0be:	0712                	slli	a4,a4,0x4
    8000f0c0:	4785                	li	a5,1
    8000f0c2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f0c6:	1786                	slli	a5,a5,0x21
    8000f0c8:	8f75                	and	a4,a4,a3
    8000f0ca:	10078793          	addi	a5,a5,256
        curr_priv == PRIV_VU
    );


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f0ce:	00023597          	auipc	a1,0x23
    8000f0d2:	5ea58593          	addi	a1,a1,1514 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f0d6:	04f70063          	beq	a4,a5,8000f116 <priv_change_9+0x124>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f0da:	00023517          	auipc	a0,0x23
    8000f0de:	68650513          	addi	a0,a0,1670 # 80032760 <__func__.0+0x378>
    8000f0e2:	3e2200ef          	jal	8002f4c4 <printf>
    }
}
    8000f0e6:	60a2                	ld	ra,8(sp)
    8000f0e8:	6402                	ld	s0,0(sp)
    8000f0ea:	0141                	addi	sp,sp,16
    8000f0ec:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f0ee:	00032797          	auipc	a5,0x32
    8000f0f2:	f667a783          	lw	a5,-154(a5) # 80041054 <curr_priv>
    8000f0f6:	dfd5                	beqz	a5,8000f0b2 <priv_change_9+0xc0>
    8000f0f8:	b75d                	j	8000f09e <priv_change_9+0xac>
    8000f0fa:	00032797          	auipc	a5,0x32
    8000f0fe:	f5a7a783          	lw	a5,-166(a5) # 80041054 <curr_priv>
    8000f102:	00023597          	auipc	a1,0x23
    8000f106:	5a658593          	addi	a1,a1,1446 # 800326a8 <__func__.0+0x2c0>
    8000f10a:	dba5                	beqz	a5,8000f07a <priv_change_9+0x88>
    8000f10c:	00023597          	auipc	a1,0x23
    8000f110:	5ac58593          	addi	a1,a1,1452 # 800326b8 <__func__.0+0x2d0>
    8000f114:	b79d                	j	8000f07a <priv_change_9+0x88>
    8000f116:	00032797          	auipc	a5,0x32
    8000f11a:	f3e7a783          	lw	a5,-194(a5) # 80041054 <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f11e:	00023597          	auipc	a1,0x23
    8000f122:	58a58593          	addi	a1,a1,1418 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f126:	dbd5                	beqz	a5,8000f0da <priv_change_9+0xe8>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f128:	00023597          	auipc	a1,0x23
    8000f12c:	59058593          	addi	a1,a1,1424 # 800326b8 <__func__.0+0x2d0>
    8000f130:	00023517          	auipc	a0,0x23
    8000f134:	63050513          	addi	a0,a0,1584 # 80032760 <__func__.0+0x378>
    8000f138:	38c200ef          	jal	8002f4c4 <printf>
}
    8000f13c:	60a2                	ld	ra,8(sp)
    8000f13e:	6402                	ld	s0,0(sp)
    8000f140:	0141                	addi	sp,sp,16
    8000f142:	8082                	ret

000000008000f144 <priv_change_10>:


bool priv_change_10(){
    8000f144:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f146:	00021597          	auipc	a1,0x21
    8000f14a:	7a258593          	addi	a1,a1,1954 # 800308e8 <__func__.6>
    8000f14e:	00023517          	auipc	a0,0x23
    8000f152:	57a50513          	addi	a0,a0,1402 # 800326c8 <__func__.0+0x2e0>
bool priv_change_10(){
    8000f156:	e406                	sd	ra,8(sp)
    8000f158:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f15a:	36a200ef          	jal	8002f4c4 <printf>
    8000f15e:	4529                	li	a0,10
    8000f160:	0521f0ef          	jal	8002e1b2 <putchar>


    //V=0，U模式下发生异常，打开代理medeleg/mideleg，切换到HS态处理异常，异常处理结束执行sret恢复到U态
    goto_priv(PRIV_M);
    8000f164:	4511                	li	a0,4
    8000f166:	daff10ef          	jal	80000f14 <goto_priv>
    reset_state();
    8000f16a:	e0cf20ef          	jal	80001776 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f16e:	57fd                	li	a5,-1
    8000f170:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f174:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f178:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f17c:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HU);     
    8000f180:	4505                	li	a0,1
    8000f182:	d93f10ef          	jal	80000f14 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f186:	c93f10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f18a:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f18e:	08c00593          	li	a1,140
    8000f192:	00026617          	auipc	a2,0x26
    8000f196:	33660613          	addi	a2,a2,822 # 800354c8 <__func__.0+0x30e0>
    8000f19a:	00023517          	auipc	a0,0x23
    8000f19e:	54650513          	addi	a0,a0,1350 # 800326e0 <__func__.0+0x2f8>
    8000f1a2:	322200ef          	jal	8002f4c4 <printf>
    8000f1a6:	0004d417          	auipc	s0,0x4d
    8000f1aa:	e6a40413          	addi	s0,s0,-406 # 8005c010 <excpt>
    8000f1ae:	6014                	ld	a3,0(s0)
    8000f1b0:	f0001737          	lui	a4,0xf0001
    8000f1b4:	0712                	slli	a4,a4,0x4
    8000f1b6:	478d                	li	a5,3
    8000f1b8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f1bc:	1782                	slli	a5,a5,0x20
    8000f1be:	8f75                	and	a4,a4,a3
    8000f1c0:	10078793          	addi	a5,a5,256
    8000f1c4:	00023597          	auipc	a1,0x23
    8000f1c8:	4f458593          	addi	a1,a1,1268 # 800326b8 <__func__.0+0x2d0>
    8000f1cc:	08f70463          	beq	a4,a5,8000f254 <priv_change_10+0x110>
    8000f1d0:	00023517          	auipc	a0,0x23
    8000f1d4:	52850513          	addi	a0,a0,1320 # 800326f8 <__func__.0+0x310>
    8000f1d8:	2ec200ef          	jal	8002f4c4 <printf>
    8000f1dc:	0004d797          	auipc	a5,0x4d
    8000f1e0:	e357c783          	lbu	a5,-459(a5) # 8005c011 <excpt+0x1>
    8000f1e4:	cb81                	beqz	a5,8000f1f4 <priv_change_10+0xb0>
    8000f1e6:	0004d717          	auipc	a4,0x4d
    8000f1ea:	e2e72703          	lw	a4,-466(a4) # 8005c014 <excpt+0x4>
    8000f1ee:	478d                	li	a5,3
    8000f1f0:	04f70a63          	beq	a4,a5,8000f244 <priv_change_10+0x100>
    8000f1f4:	00023517          	auipc	a0,0x23
    8000f1f8:	50c50513          	addi	a0,a0,1292 # 80032700 <__func__.0+0x318>
    8000f1fc:	2c8200ef          	jal	8002f4c4 <printf>
    8000f200:	02900513          	li	a0,41
    8000f204:	7af1e0ef          	jal	8002e1b2 <putchar>
    8000f208:	4529                	li	a0,10
    8000f20a:	7a91e0ef          	jal	8002e1b2 <putchar>
    8000f20e:	6014                	ld	a3,0(s0)
    8000f210:	f0001737          	lui	a4,0xf0001
    8000f214:	0712                	slli	a4,a4,0x4
    8000f216:	478d                	li	a5,3
    8000f218:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f21c:	1782                	slli	a5,a5,0x20
    8000f21e:	8f75                	and	a4,a4,a3
    8000f220:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_HU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f224:	00023597          	auipc	a1,0x23
    8000f228:	49458593          	addi	a1,a1,1172 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f22c:	04f70463          	beq	a4,a5,8000f274 <priv_change_10+0x130>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f230:	00023517          	auipc	a0,0x23
    8000f234:	53050513          	addi	a0,a0,1328 # 80032760 <__func__.0+0x378>
    8000f238:	28c200ef          	jal	8002f4c4 <printf>
    }
}
    8000f23c:	60a2                	ld	ra,8(sp)
    8000f23e:	6402                	ld	s0,0(sp)
    8000f240:	0141                	addi	sp,sp,16
    8000f242:	8082                	ret
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f244:	00032717          	auipc	a4,0x32
    8000f248:	e1072703          	lw	a4,-496(a4) # 80041054 <curr_priv>
    8000f24c:	4785                	li	a5,1
    8000f24e:	faf713e3          	bne	a4,a5,8000f1f4 <priv_change_10+0xb0>
    8000f252:	bf5d                	j	8000f208 <priv_change_10+0xc4>
    8000f254:	00032717          	auipc	a4,0x32
    8000f258:	e0072703          	lw	a4,-512(a4) # 80041054 <curr_priv>
    8000f25c:	4785                	li	a5,1
    8000f25e:	00023597          	auipc	a1,0x23
    8000f262:	44a58593          	addi	a1,a1,1098 # 800326a8 <__func__.0+0x2c0>
    8000f266:	f6f705e3          	beq	a4,a5,8000f1d0 <priv_change_10+0x8c>
    8000f26a:	00023597          	auipc	a1,0x23
    8000f26e:	44e58593          	addi	a1,a1,1102 # 800326b8 <__func__.0+0x2d0>
    8000f272:	bfb9                	j	8000f1d0 <priv_change_10+0x8c>
    8000f274:	00032717          	auipc	a4,0x32
    8000f278:	de072703          	lw	a4,-544(a4) # 80041054 <curr_priv>
    8000f27c:	4785                	li	a5,1
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f27e:	00023597          	auipc	a1,0x23
    8000f282:	42a58593          	addi	a1,a1,1066 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f286:	faf705e3          	beq	a4,a5,8000f230 <priv_change_10+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f28a:	00023597          	auipc	a1,0x23
    8000f28e:	42e58593          	addi	a1,a1,1070 # 800326b8 <__func__.0+0x2d0>
    8000f292:	00023517          	auipc	a0,0x23
    8000f296:	4ce50513          	addi	a0,a0,1230 # 80032760 <__func__.0+0x378>
    8000f29a:	22a200ef          	jal	8002f4c4 <printf>
}
    8000f29e:	60a2                	ld	ra,8(sp)
    8000f2a0:	6402                	ld	s0,0(sp)
    8000f2a2:	0141                	addi	sp,sp,16
    8000f2a4:	8082                	ret

000000008000f2a6 <priv_change_11>:


bool priv_change_11(){
    8000f2a6:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f2a8:	00021597          	auipc	a1,0x21
    8000f2ac:	65058593          	addi	a1,a1,1616 # 800308f8 <__func__.5>
    8000f2b0:	00023517          	auipc	a0,0x23
    8000f2b4:	41850513          	addi	a0,a0,1048 # 800326c8 <__func__.0+0x2e0>
bool priv_change_11(){
    8000f2b8:	e406                	sd	ra,8(sp)
    8000f2ba:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f2bc:	208200ef          	jal	8002f4c4 <printf>
    8000f2c0:	4529                	li	a0,10
    8000f2c2:	6f11e0ef          	jal	8002e1b2 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常
    goto_priv(PRIV_M);
    8000f2c6:	4511                	li	a0,4
    8000f2c8:	c4df10ef          	jal	80000f14 <goto_priv>
    reset_state();
    8000f2cc:	caaf20ef          	jal	80001776 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f2d0:	57fd                	li	a5,-1
    8000f2d2:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f2d6:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f2da:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f2de:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VS);    
    8000f2e2:	4509                	li	a0,2
    8000f2e4:	c31f10ef          	jal	80000f14 <goto_priv>
    

    TEST_SETUP_EXCEPT();        
    8000f2e8:	b31f10ef          	jal	80000e18 <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000f2ec:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f2f0:	08c00593          	li	a1,140
    8000f2f4:	00026617          	auipc	a2,0x26
    8000f2f8:	24460613          	addi	a2,a2,580 # 80035538 <__func__.0+0x3150>
    8000f2fc:	00023517          	auipc	a0,0x23
    8000f300:	3e450513          	addi	a0,a0,996 # 800326e0 <__func__.0+0x2f8>
    8000f304:	1c0200ef          	jal	8002f4c4 <printf>
    8000f308:	0004d417          	auipc	s0,0x4d
    8000f30c:	d0840413          	addi	s0,s0,-760 # 8005c010 <excpt>
    8000f310:	6014                	ld	a3,0(s0)
    8000f312:	f0001737          	lui	a4,0xf0001
    8000f316:	0712                	slli	a4,a4,0x4
    8000f318:	4785                	li	a5,1
    8000f31a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f31e:	1786                	slli	a5,a5,0x21
    8000f320:	8f75                	and	a4,a4,a3
    8000f322:	10078793          	addi	a5,a5,256
    8000f326:	00023597          	auipc	a1,0x23
    8000f32a:	38258593          	addi	a1,a1,898 # 800326a8 <__func__.0+0x2c0>
    8000f32e:	00f70663          	beq	a4,a5,8000f33a <priv_change_11+0x94>
    8000f332:	00023597          	auipc	a1,0x23
    8000f336:	38658593          	addi	a1,a1,902 # 800326b8 <__func__.0+0x2d0>
    8000f33a:	00023517          	auipc	a0,0x23
    8000f33e:	3be50513          	addi	a0,a0,958 # 800326f8 <__func__.0+0x310>
    8000f342:	182200ef          	jal	8002f4c4 <printf>
    8000f346:	0004d797          	auipc	a5,0x4d
    8000f34a:	ccb7c783          	lbu	a5,-821(a5) # 8005c011 <excpt+0x1>
    8000f34e:	cb81                	beqz	a5,8000f35e <priv_change_11+0xb8>
    8000f350:	0004d717          	auipc	a4,0x4d
    8000f354:	cc472703          	lw	a4,-828(a4) # 8005c014 <excpt+0x4>
    8000f358:	4789                	li	a5,2
    8000f35a:	00f70c63          	beq	a4,a5,8000f372 <priv_change_11+0xcc>
    8000f35e:	00023517          	auipc	a0,0x23
    8000f362:	3a250513          	addi	a0,a0,930 # 80032700 <__func__.0+0x318>
    8000f366:	15e200ef          	jal	8002f4c4 <printf>
    8000f36a:	02900513          	li	a0,41
    8000f36e:	6451e0ef          	jal	8002e1b2 <putchar>
    8000f372:	4529                	li	a0,10
    8000f374:	63f1e0ef          	jal	8002e1b2 <putchar>
    8000f378:	6014                	ld	a3,0(s0)
    8000f37a:	f0001737          	lui	a4,0xf0001
    8000f37e:	0712                	slli	a4,a4,0x4
    8000f380:	4785                	li	a5,1
    8000f382:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f386:	1786                	slli	a5,a5,0x21
    8000f388:	8f75                	and	a4,a4,a3
    8000f38a:	10078793          	addi	a5,a5,256
        excpt.triggered == true && 
        excpt.priv==PRIV_VS
    ); 
    printf("excpt.priv== %d \n",excpt.priv);
    8000f38e:	0004d597          	auipc	a1,0x4d
    8000f392:	c865a583          	lw	a1,-890(a1) # 8005c014 <excpt+0x4>
    8000f396:	00026517          	auipc	a0,0x26
    8000f39a:	1fa50513          	addi	a0,a0,506 # 80035590 <__func__.0+0x31a8>
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f39e:	02f70263          	beq	a4,a5,8000f3c2 <priv_change_11+0x11c>
    printf("excpt.priv== %d \n",excpt.priv);
    8000f3a2:	122200ef          	jal	8002f4c4 <printf>


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f3a6:	00023597          	auipc	a1,0x23
    8000f3aa:	31258593          	addi	a1,a1,786 # 800326b8 <__func__.0+0x2d0>
    8000f3ae:	00023517          	auipc	a0,0x23
    8000f3b2:	3b250513          	addi	a0,a0,946 # 80032760 <__func__.0+0x378>
    8000f3b6:	10e200ef          	jal	8002f4c4 <printf>
    }
}
    8000f3ba:	60a2                	ld	ra,8(sp)
    8000f3bc:	6402                	ld	s0,0(sp)
    8000f3be:	0141                	addi	sp,sp,16
    8000f3c0:	8082                	ret
    printf("excpt.priv== %d \n",excpt.priv);
    8000f3c2:	102200ef          	jal	8002f4c4 <printf>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f3c6:	00023597          	auipc	a1,0x23
    8000f3ca:	2e258593          	addi	a1,a1,738 # 800326a8 <__func__.0+0x2c0>
    8000f3ce:	00023517          	auipc	a0,0x23
    8000f3d2:	39250513          	addi	a0,a0,914 # 80032760 <__func__.0+0x378>
    8000f3d6:	0ee200ef          	jal	8002f4c4 <printf>
}
    8000f3da:	60a2                	ld	ra,8(sp)
    8000f3dc:	6402                	ld	s0,0(sp)
    8000f3de:	0141                	addi	sp,sp,16
    8000f3e0:	8082                	ret

000000008000f3e2 <priv_change_12>:


bool priv_change_12(){
    8000f3e2:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f3e4:	00021597          	auipc	a1,0x21
    8000f3e8:	52458593          	addi	a1,a1,1316 # 80030908 <__func__.4>
    8000f3ec:	00023517          	auipc	a0,0x23
    8000f3f0:	2dc50513          	addi	a0,a0,732 # 800326c8 <__func__.0+0x2e0>
bool priv_change_12(){
    8000f3f4:	e406                	sd	ra,8(sp)
    8000f3f6:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f3f8:	0cc200ef          	jal	8002f4c4 <printf>
    8000f3fc:	4529                	li	a0,10
    8000f3fe:	5b51e0ef          	jal	8002e1b2 <putchar>



    //V=0，HS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常

    goto_priv(PRIV_M);     
    8000f402:	4511                	li	a0,4
    8000f404:	b11f10ef          	jal	80000f14 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000f408:	57fd                	li	a5,-1
    8000f40a:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f40e:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f412:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f416:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HS);
    8000f41a:	450d                	li	a0,3
    8000f41c:	af9f10ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000f420:	9f9f10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f424:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f428:	08c00593          	li	a1,140
    8000f42c:	00026617          	auipc	a2,0x26
    8000f430:	17c60613          	addi	a2,a2,380 # 800355a8 <__func__.0+0x31c0>
    8000f434:	00023517          	auipc	a0,0x23
    8000f438:	2ac50513          	addi	a0,a0,684 # 800326e0 <__func__.0+0x2f8>
    8000f43c:	088200ef          	jal	8002f4c4 <printf>
    8000f440:	0004d417          	auipc	s0,0x4d
    8000f444:	bd040413          	addi	s0,s0,-1072 # 8005c010 <excpt>
    8000f448:	6014                	ld	a3,0(s0)
    8000f44a:	f0001737          	lui	a4,0xf0001
    8000f44e:	0712                	slli	a4,a4,0x4
    8000f450:	478d                	li	a5,3
    8000f452:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f456:	1782                	slli	a5,a5,0x20
    8000f458:	8f75                	and	a4,a4,a3
    8000f45a:	10078793          	addi	a5,a5,256
    8000f45e:	00023597          	auipc	a1,0x23
    8000f462:	24a58593          	addi	a1,a1,586 # 800326a8 <__func__.0+0x2c0>
    8000f466:	00f70663          	beq	a4,a5,8000f472 <priv_change_12+0x90>
    8000f46a:	00023597          	auipc	a1,0x23
    8000f46e:	24e58593          	addi	a1,a1,590 # 800326b8 <__func__.0+0x2d0>
    8000f472:	00023517          	auipc	a0,0x23
    8000f476:	28650513          	addi	a0,a0,646 # 800326f8 <__func__.0+0x310>
    8000f47a:	04a200ef          	jal	8002f4c4 <printf>
    8000f47e:	0004d797          	auipc	a5,0x4d
    8000f482:	b937c783          	lbu	a5,-1133(a5) # 8005c011 <excpt+0x1>
    8000f486:	cb81                	beqz	a5,8000f496 <priv_change_12+0xb4>
    8000f488:	0004d717          	auipc	a4,0x4d
    8000f48c:	b8c72703          	lw	a4,-1140(a4) # 8005c014 <excpt+0x4>
    8000f490:	478d                	li	a5,3
    8000f492:	00f70c63          	beq	a4,a5,8000f4aa <priv_change_12+0xc8>
    8000f496:	00023517          	auipc	a0,0x23
    8000f49a:	26a50513          	addi	a0,a0,618 # 80032700 <__func__.0+0x318>
    8000f49e:	026200ef          	jal	8002f4c4 <printf>
    8000f4a2:	02900513          	li	a0,41
    8000f4a6:	50d1e0ef          	jal	8002e1b2 <putchar>
    8000f4aa:	4529                	li	a0,10
    8000f4ac:	5071e0ef          	jal	8002e1b2 <putchar>
    8000f4b0:	6014                	ld	a3,0(s0)
    8000f4b2:	f0001737          	lui	a4,0xf0001
    8000f4b6:	0712                	slli	a4,a4,0x4
    8000f4b8:	478d                	li	a5,3
    8000f4ba:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f4be:	1782                	slli	a5,a5,0x20
    8000f4c0:	8f75                	and	a4,a4,a3
    8000f4c2:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS
    ); 


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f4c6:	00023597          	auipc	a1,0x23
    8000f4ca:	1f258593          	addi	a1,a1,498 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f4ce:	00f71663          	bne	a4,a5,8000f4da <priv_change_12+0xf8>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f4d2:	00023597          	auipc	a1,0x23
    8000f4d6:	1d658593          	addi	a1,a1,470 # 800326a8 <__func__.0+0x2c0>
    8000f4da:	00023517          	auipc	a0,0x23
    8000f4de:	28650513          	addi	a0,a0,646 # 80032760 <__func__.0+0x378>
    8000f4e2:	7e31f0ef          	jal	8002f4c4 <printf>
    }

}
    8000f4e6:	60a2                	ld	ra,8(sp)
    8000f4e8:	6402                	ld	s0,0(sp)
    8000f4ea:	0141                	addi	sp,sp,16
    8000f4ec:	8082                	ret

000000008000f4ee <priv_change_13>:

bool priv_change_13(){
    8000f4ee:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f4f0:	00021597          	auipc	a1,0x21
    8000f4f4:	42858593          	addi	a1,a1,1064 # 80030918 <__func__.3>
    8000f4f8:	00023517          	auipc	a0,0x23
    8000f4fc:	1d050513          	addi	a0,a0,464 # 800326c8 <__func__.0+0x2e0>
bool priv_change_13(){
    8000f500:	e406                	sd	ra,8(sp)
    8000f502:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f504:	7c11f0ef          	jal	8002f4c4 <printf>
    8000f508:	4529                	li	a0,10
    8000f50a:	4a91e0ef          	jal	8002e1b2 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f50e:	4511                	li	a0,4
    8000f510:	a05f10ef          	jal	80000f14 <goto_priv>
    reset_state();
    8000f514:	a62f20ef          	jal	80001776 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f518:	57fd                	li	a5,-1
    8000f51a:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f51e:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f522:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f526:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();  
    8000f52a:	8eff10ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_VU);      
    8000f52e:	4501                	li	a0,0
    8000f530:	9e5f10ef          	jal	80000f14 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f534:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f538:	08c00593          	li	a1,140
    8000f53c:	00026617          	auipc	a2,0x26
    8000f540:	0c460613          	addi	a2,a2,196 # 80035600 <__func__.0+0x3218>
    8000f544:	00023517          	auipc	a0,0x23
    8000f548:	19c50513          	addi	a0,a0,412 # 800326e0 <__func__.0+0x2f8>
    8000f54c:	7791f0ef          	jal	8002f4c4 <printf>
    8000f550:	0004d417          	auipc	s0,0x4d
    8000f554:	ac040413          	addi	s0,s0,-1344 # 8005c010 <excpt>
    8000f558:	6014                	ld	a3,0(s0)
    8000f55a:	f0001737          	lui	a4,0xf0001
    8000f55e:	0712                	slli	a4,a4,0x4
    8000f560:	478d                	li	a5,3
    8000f562:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f566:	1782                	slli	a5,a5,0x20
    8000f568:	8f75                	and	a4,a4,a3
    8000f56a:	10078793          	addi	a5,a5,256
    8000f56e:	00023597          	auipc	a1,0x23
    8000f572:	14a58593          	addi	a1,a1,330 # 800326b8 <__func__.0+0x2d0>
    8000f576:	08f70263          	beq	a4,a5,8000f5fa <priv_change_13+0x10c>
    8000f57a:	00023517          	auipc	a0,0x23
    8000f57e:	17e50513          	addi	a0,a0,382 # 800326f8 <__func__.0+0x310>
    8000f582:	7431f0ef          	jal	8002f4c4 <printf>
    8000f586:	0004d797          	auipc	a5,0x4d
    8000f58a:	a8b7c783          	lbu	a5,-1397(a5) # 8005c011 <excpt+0x1>
    8000f58e:	cb81                	beqz	a5,8000f59e <priv_change_13+0xb0>
    8000f590:	0004d717          	auipc	a4,0x4d
    8000f594:	a8472703          	lw	a4,-1404(a4) # 8005c014 <excpt+0x4>
    8000f598:	478d                	li	a5,3
    8000f59a:	04f70a63          	beq	a4,a5,8000f5ee <priv_change_13+0x100>
    8000f59e:	00023517          	auipc	a0,0x23
    8000f5a2:	16250513          	addi	a0,a0,354 # 80032700 <__func__.0+0x318>
    8000f5a6:	71f1f0ef          	jal	8002f4c4 <printf>
    8000f5aa:	02900513          	li	a0,41
    8000f5ae:	4051e0ef          	jal	8002e1b2 <putchar>
    8000f5b2:	4529                	li	a0,10
    8000f5b4:	3ff1e0ef          	jal	8002e1b2 <putchar>
    8000f5b8:	6014                	ld	a3,0(s0)
    8000f5ba:	f0001737          	lui	a4,0xf0001
    8000f5be:	0712                	slli	a4,a4,0x4
    8000f5c0:	478d                	li	a5,3
    8000f5c2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f5c6:	1782                	slli	a5,a5,0x20
    8000f5c8:	8f75                	and	a4,a4,a3
    8000f5ca:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f5ce:	00023597          	auipc	a1,0x23
    8000f5d2:	0ea58593          	addi	a1,a1,234 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f5d6:	04f70063          	beq	a4,a5,8000f616 <priv_change_13+0x128>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f5da:	00023517          	auipc	a0,0x23
    8000f5de:	18650513          	addi	a0,a0,390 # 80032760 <__func__.0+0x378>
    8000f5e2:	6e31f0ef          	jal	8002f4c4 <printf>
    }
}
    8000f5e6:	60a2                	ld	ra,8(sp)
    8000f5e8:	6402                	ld	s0,0(sp)
    8000f5ea:	0141                	addi	sp,sp,16
    8000f5ec:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f5ee:	00032797          	auipc	a5,0x32
    8000f5f2:	a667a783          	lw	a5,-1434(a5) # 80041054 <curr_priv>
    8000f5f6:	dfd5                	beqz	a5,8000f5b2 <priv_change_13+0xc4>
    8000f5f8:	b75d                	j	8000f59e <priv_change_13+0xb0>
    8000f5fa:	00032797          	auipc	a5,0x32
    8000f5fe:	a5a7a783          	lw	a5,-1446(a5) # 80041054 <curr_priv>
    8000f602:	00023597          	auipc	a1,0x23
    8000f606:	0a658593          	addi	a1,a1,166 # 800326a8 <__func__.0+0x2c0>
    8000f60a:	dba5                	beqz	a5,8000f57a <priv_change_13+0x8c>
    8000f60c:	00023597          	auipc	a1,0x23
    8000f610:	0ac58593          	addi	a1,a1,172 # 800326b8 <__func__.0+0x2d0>
    8000f614:	b79d                	j	8000f57a <priv_change_13+0x8c>
    8000f616:	00032797          	auipc	a5,0x32
    8000f61a:	a3e7a783          	lw	a5,-1474(a5) # 80041054 <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f61e:	00023597          	auipc	a1,0x23
    8000f622:	08a58593          	addi	a1,a1,138 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f626:	dbd5                	beqz	a5,8000f5da <priv_change_13+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f628:	00023597          	auipc	a1,0x23
    8000f62c:	09058593          	addi	a1,a1,144 # 800326b8 <__func__.0+0x2d0>
    8000f630:	00023517          	auipc	a0,0x23
    8000f634:	13050513          	addi	a0,a0,304 # 80032760 <__func__.0+0x378>
    8000f638:	68d1f0ef          	jal	8002f4c4 <printf>
}
    8000f63c:	60a2                	ld	ra,8(sp)
    8000f63e:	6402                	ld	s0,0(sp)
    8000f640:	0141                	addi	sp,sp,16
    8000f642:	8082                	ret

000000008000f644 <priv_change_14>:

bool priv_change_14(){
    8000f644:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f646:	00021597          	auipc	a1,0x21
    8000f64a:	2e258593          	addi	a1,a1,738 # 80030928 <__func__.2>
    8000f64e:	00023517          	auipc	a0,0x23
    8000f652:	07a50513          	addi	a0,a0,122 # 800326c8 <__func__.0+0x2e0>
bool priv_change_14(){
    8000f656:	e406                	sd	ra,8(sp)
    8000f658:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f65a:	66b1f0ef          	jal	8002f4c4 <printf>
    8000f65e:	4529                	li	a0,10
    8000f660:	3531e0ef          	jal	8002e1b2 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭理hedeleg/hideleg，切换到HS态处理异常，异常处理结束恢复执行sret到VU态
    goto_priv(PRIV_M);
    8000f664:	4511                	li	a0,4
    8000f666:	8aff10ef          	jal	80000f14 <goto_priv>
    reset_state();
    8000f66a:	90cf20ef          	jal	80001776 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f66e:	57fd                	li	a5,-1
    8000f670:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f674:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f678:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f67c:	60205073          	csrwi	hedeleg,0
    
    goto_priv(PRIV_VU);     
    8000f680:	4501                	li	a0,0
    8000f682:	893f10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();        
    8000f686:	f92f10ef          	jal	80000e18 <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000f68a:	30205073          	csrwi	medeleg,0

    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f68e:	08c00593          	li	a1,140
    8000f692:	00026617          	auipc	a2,0x26
    8000f696:	fde60613          	addi	a2,a2,-34 # 80035670 <__func__.0+0x3288>
    8000f69a:	00023517          	auipc	a0,0x23
    8000f69e:	04650513          	addi	a0,a0,70 # 800326e0 <__func__.0+0x2f8>
    8000f6a2:	6231f0ef          	jal	8002f4c4 <printf>
    8000f6a6:	0004d417          	auipc	s0,0x4d
    8000f6aa:	96a40413          	addi	s0,s0,-1686 # 8005c010 <excpt>
    8000f6ae:	6014                	ld	a3,0(s0)
    8000f6b0:	f0001737          	lui	a4,0xf0001
    8000f6b4:	0712                	slli	a4,a4,0x4
    8000f6b6:	478d                	li	a5,3
    8000f6b8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f6bc:	1782                	slli	a5,a5,0x20
    8000f6be:	8f75                	and	a4,a4,a3
    8000f6c0:	10078793          	addi	a5,a5,256
    8000f6c4:	00023597          	auipc	a1,0x23
    8000f6c8:	ff458593          	addi	a1,a1,-12 # 800326b8 <__func__.0+0x2d0>
    8000f6cc:	08f70263          	beq	a4,a5,8000f750 <priv_change_14+0x10c>
    8000f6d0:	00023517          	auipc	a0,0x23
    8000f6d4:	02850513          	addi	a0,a0,40 # 800326f8 <__func__.0+0x310>
    8000f6d8:	5ed1f0ef          	jal	8002f4c4 <printf>
    8000f6dc:	0004d797          	auipc	a5,0x4d
    8000f6e0:	9357c783          	lbu	a5,-1739(a5) # 8005c011 <excpt+0x1>
    8000f6e4:	cb81                	beqz	a5,8000f6f4 <priv_change_14+0xb0>
    8000f6e6:	0004d717          	auipc	a4,0x4d
    8000f6ea:	92e72703          	lw	a4,-1746(a4) # 8005c014 <excpt+0x4>
    8000f6ee:	478d                	li	a5,3
    8000f6f0:	04f70a63          	beq	a4,a5,8000f744 <priv_change_14+0x100>
    8000f6f4:	00023517          	auipc	a0,0x23
    8000f6f8:	00c50513          	addi	a0,a0,12 # 80032700 <__func__.0+0x318>
    8000f6fc:	5c91f0ef          	jal	8002f4c4 <printf>
    8000f700:	02900513          	li	a0,41
    8000f704:	2af1e0ef          	jal	8002e1b2 <putchar>
    8000f708:	4529                	li	a0,10
    8000f70a:	2a91e0ef          	jal	8002e1b2 <putchar>
    8000f70e:	6014                	ld	a3,0(s0)
    8000f710:	f0001737          	lui	a4,0xf0001
    8000f714:	0712                	slli	a4,a4,0x4
    8000f716:	478d                	li	a5,3
    8000f718:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f71c:	1782                	slli	a5,a5,0x20
    8000f71e:	8f75                	and	a4,a4,a3
    8000f720:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f724:	00023597          	auipc	a1,0x23
    8000f728:	f9458593          	addi	a1,a1,-108 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f72c:	04f70063          	beq	a4,a5,8000f76c <priv_change_14+0x128>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f730:	00023517          	auipc	a0,0x23
    8000f734:	03050513          	addi	a0,a0,48 # 80032760 <__func__.0+0x378>
    8000f738:	58d1f0ef          	jal	8002f4c4 <printf>
    }

}
    8000f73c:	60a2                	ld	ra,8(sp)
    8000f73e:	6402                	ld	s0,0(sp)
    8000f740:	0141                	addi	sp,sp,16
    8000f742:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f744:	00032797          	auipc	a5,0x32
    8000f748:	9107a783          	lw	a5,-1776(a5) # 80041054 <curr_priv>
    8000f74c:	dfd5                	beqz	a5,8000f708 <priv_change_14+0xc4>
    8000f74e:	b75d                	j	8000f6f4 <priv_change_14+0xb0>
    8000f750:	00032797          	auipc	a5,0x32
    8000f754:	9047a783          	lw	a5,-1788(a5) # 80041054 <curr_priv>
    8000f758:	00023597          	auipc	a1,0x23
    8000f75c:	f5058593          	addi	a1,a1,-176 # 800326a8 <__func__.0+0x2c0>
    8000f760:	dba5                	beqz	a5,8000f6d0 <priv_change_14+0x8c>
    8000f762:	00023597          	auipc	a1,0x23
    8000f766:	f5658593          	addi	a1,a1,-170 # 800326b8 <__func__.0+0x2d0>
    8000f76a:	b79d                	j	8000f6d0 <priv_change_14+0x8c>
    8000f76c:	00032797          	auipc	a5,0x32
    8000f770:	8e87a783          	lw	a5,-1816(a5) # 80041054 <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f774:	00023597          	auipc	a1,0x23
    8000f778:	f3458593          	addi	a1,a1,-204 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f77c:	dbd5                	beqz	a5,8000f730 <priv_change_14+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f77e:	00023597          	auipc	a1,0x23
    8000f782:	f3a58593          	addi	a1,a1,-198 # 800326b8 <__func__.0+0x2d0>
    8000f786:	00023517          	auipc	a0,0x23
    8000f78a:	fda50513          	addi	a0,a0,-38 # 80032760 <__func__.0+0x378>
    8000f78e:	5371f0ef          	jal	8002f4c4 <printf>
}
    8000f792:	60a2                	ld	ra,8(sp)
    8000f794:	6402                	ld	s0,0(sp)
    8000f796:	0141                	addi	sp,sp,16
    8000f798:	8082                	ret

000000008000f79a <priv_change_15>:

bool priv_change_15(){
    8000f79a:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f79c:	00021597          	auipc	a1,0x21
    8000f7a0:	19c58593          	addi	a1,a1,412 # 80030938 <__func__.1>
    8000f7a4:	00023517          	auipc	a0,0x23
    8000f7a8:	f2450513          	addi	a0,a0,-220 # 800326c8 <__func__.0+0x2e0>
bool priv_change_15(){
    8000f7ac:	e406                	sd	ra,8(sp)
    8000f7ae:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f7b0:	5151f0ef          	jal	8002f4c4 <printf>
    8000f7b4:	4529                	li	a0,10
    8000f7b6:	1fd1e0ef          	jal	8002e1b2 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f7ba:	4511                	li	a0,4
    8000f7bc:	f58f10ef          	jal	80000f14 <goto_priv>
    reset_state();
    8000f7c0:	fb7f10ef          	jal	80001776 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f7c4:	57fd                	li	a5,-1
    8000f7c6:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f7ca:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f7ce:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f7d2:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();    
    8000f7d6:	e42f10ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_VS);     
    8000f7da:	4509                	li	a0,2
    8000f7dc:	f38f10ef          	jal	80000f14 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f7e0:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f7e4:	08c00593          	li	a1,140
    8000f7e8:	00026617          	auipc	a2,0x26
    8000f7ec:	ef860613          	addi	a2,a2,-264 # 800356e0 <__func__.0+0x32f8>
    8000f7f0:	00023517          	auipc	a0,0x23
    8000f7f4:	ef050513          	addi	a0,a0,-272 # 800326e0 <__func__.0+0x2f8>
    8000f7f8:	4cd1f0ef          	jal	8002f4c4 <printf>
    8000f7fc:	0004d417          	auipc	s0,0x4d
    8000f800:	81440413          	addi	s0,s0,-2028 # 8005c010 <excpt>
    8000f804:	6014                	ld	a3,0(s0)
    8000f806:	f0001737          	lui	a4,0xf0001
    8000f80a:	0712                	slli	a4,a4,0x4
    8000f80c:	478d                	li	a5,3
    8000f80e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f812:	1782                	slli	a5,a5,0x20
    8000f814:	8f75                	and	a4,a4,a3
    8000f816:	10078793          	addi	a5,a5,256
    8000f81a:	00023597          	auipc	a1,0x23
    8000f81e:	e9e58593          	addi	a1,a1,-354 # 800326b8 <__func__.0+0x2d0>
    8000f822:	08f70463          	beq	a4,a5,8000f8aa <priv_change_15+0x110>
    8000f826:	00023517          	auipc	a0,0x23
    8000f82a:	ed250513          	addi	a0,a0,-302 # 800326f8 <__func__.0+0x310>
    8000f82e:	4971f0ef          	jal	8002f4c4 <printf>
    8000f832:	0004c797          	auipc	a5,0x4c
    8000f836:	7df7c783          	lbu	a5,2015(a5) # 8005c011 <excpt+0x1>
    8000f83a:	cb81                	beqz	a5,8000f84a <priv_change_15+0xb0>
    8000f83c:	0004c717          	auipc	a4,0x4c
    8000f840:	7d872703          	lw	a4,2008(a4) # 8005c014 <excpt+0x4>
    8000f844:	478d                	li	a5,3
    8000f846:	04f70a63          	beq	a4,a5,8000f89a <priv_change_15+0x100>
    8000f84a:	00023517          	auipc	a0,0x23
    8000f84e:	eb650513          	addi	a0,a0,-330 # 80032700 <__func__.0+0x318>
    8000f852:	4731f0ef          	jal	8002f4c4 <printf>
    8000f856:	02900513          	li	a0,41
    8000f85a:	1591e0ef          	jal	8002e1b2 <putchar>
    8000f85e:	4529                	li	a0,10
    8000f860:	1531e0ef          	jal	8002e1b2 <putchar>
    8000f864:	6014                	ld	a3,0(s0)
    8000f866:	f0001737          	lui	a4,0xf0001
    8000f86a:	0712                	slli	a4,a4,0x4
    8000f86c:	478d                	li	a5,3
    8000f86e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f872:	1782                	slli	a5,a5,0x20
    8000f874:	8f75                	and	a4,a4,a3
    8000f876:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VS
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f87a:	00023597          	auipc	a1,0x23
    8000f87e:	e3e58593          	addi	a1,a1,-450 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f882:	04f70463          	beq	a4,a5,8000f8ca <priv_change_15+0x130>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f886:	00023517          	auipc	a0,0x23
    8000f88a:	eda50513          	addi	a0,a0,-294 # 80032760 <__func__.0+0x378>
    8000f88e:	4371f0ef          	jal	8002f4c4 <printf>
    }

}
    8000f892:	60a2                	ld	ra,8(sp)
    8000f894:	6402                	ld	s0,0(sp)
    8000f896:	0141                	addi	sp,sp,16
    8000f898:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f89a:	00031717          	auipc	a4,0x31
    8000f89e:	7ba72703          	lw	a4,1978(a4) # 80041054 <curr_priv>
    8000f8a2:	4789                	li	a5,2
    8000f8a4:	faf713e3          	bne	a4,a5,8000f84a <priv_change_15+0xb0>
    8000f8a8:	bf5d                	j	8000f85e <priv_change_15+0xc4>
    8000f8aa:	00031717          	auipc	a4,0x31
    8000f8ae:	7aa72703          	lw	a4,1962(a4) # 80041054 <curr_priv>
    8000f8b2:	4789                	li	a5,2
    8000f8b4:	00023597          	auipc	a1,0x23
    8000f8b8:	df458593          	addi	a1,a1,-524 # 800326a8 <__func__.0+0x2c0>
    8000f8bc:	f6f705e3          	beq	a4,a5,8000f826 <priv_change_15+0x8c>
    8000f8c0:	00023597          	auipc	a1,0x23
    8000f8c4:	df858593          	addi	a1,a1,-520 # 800326b8 <__func__.0+0x2d0>
    8000f8c8:	bfb9                	j	8000f826 <priv_change_15+0x8c>
    8000f8ca:	00031717          	auipc	a4,0x31
    8000f8ce:	78a72703          	lw	a4,1930(a4) # 80041054 <curr_priv>
    8000f8d2:	4789                	li	a5,2
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f8d4:	00023597          	auipc	a1,0x23
    8000f8d8:	dd458593          	addi	a1,a1,-556 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f8dc:	faf705e3          	beq	a4,a5,8000f886 <priv_change_15+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f8e0:	00023597          	auipc	a1,0x23
    8000f8e4:	dd858593          	addi	a1,a1,-552 # 800326b8 <__func__.0+0x2d0>
    8000f8e8:	00023517          	auipc	a0,0x23
    8000f8ec:	e7850513          	addi	a0,a0,-392 # 80032760 <__func__.0+0x378>
    8000f8f0:	3d51f0ef          	jal	8002f4c4 <printf>
}
    8000f8f4:	60a2                	ld	ra,8(sp)
    8000f8f6:	6402                	ld	s0,0(sp)
    8000f8f8:	0141                	addi	sp,sp,16
    8000f8fa:	8082                	ret

000000008000f8fc <priv_change_16>:

bool priv_change_16(){
    8000f8fc:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f8fe:	00021597          	auipc	a1,0x21
    8000f902:	04a58593          	addi	a1,a1,74 # 80030948 <__func__.0>
    8000f906:	00023517          	auipc	a0,0x23
    8000f90a:	dc250513          	addi	a0,a0,-574 # 800326c8 <__func__.0+0x2e0>
bool priv_change_16(){
    8000f90e:	e406                	sd	ra,8(sp)
    8000f910:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f912:	3b31f0ef          	jal	8002f4c4 <printf>
    8000f916:	4529                	li	a0,10
    8000f918:	09b1e0ef          	jal	8002e1b2 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f91c:	4511                	li	a0,4
    8000f91e:	df6f10ef          	jal	80000f14 <goto_priv>
    reset_state();
    8000f922:	e55f10ef          	jal	80001776 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f926:	57fd                	li	a5,-1
    8000f928:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f92c:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f930:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f934:	60279073          	csrw	hedeleg,a5

    TEST_SETUP_EXCEPT();    
    8000f938:	ce0f10ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_VS);     
    8000f93c:	4509                	li	a0,2
    8000f93e:	dd6f10ef          	jal	80000f14 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f942:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f946:	08c00593          	li	a1,140
    8000f94a:	00026617          	auipc	a2,0x26
    8000f94e:	e0660613          	addi	a2,a2,-506 # 80035750 <__func__.0+0x3368>
    8000f952:	00023517          	auipc	a0,0x23
    8000f956:	d8e50513          	addi	a0,a0,-626 # 800326e0 <__func__.0+0x2f8>
    8000f95a:	36b1f0ef          	jal	8002f4c4 <printf>
    8000f95e:	0004c417          	auipc	s0,0x4c
    8000f962:	6b240413          	addi	s0,s0,1714 # 8005c010 <excpt>
    8000f966:	6014                	ld	a3,0(s0)
    8000f968:	f0001737          	lui	a4,0xf0001
    8000f96c:	0712                	slli	a4,a4,0x4
    8000f96e:	4785                	li	a5,1
    8000f970:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f974:	1786                	slli	a5,a5,0x21
    8000f976:	8f75                	and	a4,a4,a3
    8000f978:	10078793          	addi	a5,a5,256
    8000f97c:	00023597          	auipc	a1,0x23
    8000f980:	d3c58593          	addi	a1,a1,-708 # 800326b8 <__func__.0+0x2d0>
    8000f984:	08f70363          	beq	a4,a5,8000fa0a <priv_change_16+0x10e>
    8000f988:	00023517          	auipc	a0,0x23
    8000f98c:	d7050513          	addi	a0,a0,-656 # 800326f8 <__func__.0+0x310>
    8000f990:	3351f0ef          	jal	8002f4c4 <printf>
    8000f994:	0004c797          	auipc	a5,0x4c
    8000f998:	67d7c783          	lbu	a5,1661(a5) # 8005c011 <excpt+0x1>
    8000f99c:	cb81                	beqz	a5,8000f9ac <priv_change_16+0xb0>
    8000f99e:	0004c797          	auipc	a5,0x4c
    8000f9a2:	6767a783          	lw	a5,1654(a5) # 8005c014 <excpt+0x4>
    8000f9a6:	4709                	li	a4,2
    8000f9a8:	04e78a63          	beq	a5,a4,8000f9fc <priv_change_16+0x100>
    8000f9ac:	00023517          	auipc	a0,0x23
    8000f9b0:	d5450513          	addi	a0,a0,-684 # 80032700 <__func__.0+0x318>
    8000f9b4:	3111f0ef          	jal	8002f4c4 <printf>
    8000f9b8:	02900513          	li	a0,41
    8000f9bc:	7f61e0ef          	jal	8002e1b2 <putchar>
    8000f9c0:	4529                	li	a0,10
    8000f9c2:	7f01e0ef          	jal	8002e1b2 <putchar>
    8000f9c6:	6014                	ld	a3,0(s0)
    8000f9c8:	f0001737          	lui	a4,0xf0001
    8000f9cc:	0712                	slli	a4,a4,0x4
    8000f9ce:	4785                	li	a5,1
    8000f9d0:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f9d4:	1786                	slli	a5,a5,0x21
    8000f9d6:	8f75                	and	a4,a4,a3
    8000f9d8:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_VS &&
        curr_priv == PRIV_VS
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f9dc:	00023597          	auipc	a1,0x23
    8000f9e0:	cdc58593          	addi	a1,a1,-804 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f9e4:	04f70363          	beq	a4,a5,8000fa2a <priv_change_16+0x12e>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f9e8:	00023517          	auipc	a0,0x23
    8000f9ec:	d7850513          	addi	a0,a0,-648 # 80032760 <__func__.0+0x378>
    8000f9f0:	2d51f0ef          	jal	8002f4c4 <printf>
    }

}
    8000f9f4:	60a2                	ld	ra,8(sp)
    8000f9f6:	6402                	ld	s0,0(sp)
    8000f9f8:	0141                	addi	sp,sp,16
    8000f9fa:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f9fc:	00031717          	auipc	a4,0x31
    8000fa00:	65872703          	lw	a4,1624(a4) # 80041054 <curr_priv>
    8000fa04:	faf714e3          	bne	a4,a5,8000f9ac <priv_change_16+0xb0>
    8000fa08:	bf65                	j	8000f9c0 <priv_change_16+0xc4>
    8000fa0a:	00031717          	auipc	a4,0x31
    8000fa0e:	64a72703          	lw	a4,1610(a4) # 80041054 <curr_priv>
    8000fa12:	4789                	li	a5,2
    8000fa14:	00023597          	auipc	a1,0x23
    8000fa18:	c9458593          	addi	a1,a1,-876 # 800326a8 <__func__.0+0x2c0>
    8000fa1c:	f6f706e3          	beq	a4,a5,8000f988 <priv_change_16+0x8c>
    8000fa20:	00023597          	auipc	a1,0x23
    8000fa24:	c9858593          	addi	a1,a1,-872 # 800326b8 <__func__.0+0x2d0>
    8000fa28:	b785                	j	8000f988 <priv_change_16+0x8c>
    8000fa2a:	00031717          	auipc	a4,0x31
    8000fa2e:	62a72703          	lw	a4,1578(a4) # 80041054 <curr_priv>
    8000fa32:	4789                	li	a5,2
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fa34:	00023597          	auipc	a1,0x23
    8000fa38:	c7458593          	addi	a1,a1,-908 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fa3c:	faf706e3          	beq	a4,a5,8000f9e8 <priv_change_16+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fa40:	00023597          	auipc	a1,0x23
    8000fa44:	c7858593          	addi	a1,a1,-904 # 800326b8 <__func__.0+0x2d0>
    8000fa48:	00023517          	auipc	a0,0x23
    8000fa4c:	d1850513          	addi	a0,a0,-744 # 80032760 <__func__.0+0x378>
    8000fa50:	2751f0ef          	jal	8002f4c4 <printf>
}
    8000fa54:	60a2                	ld	ra,8(sp)
    8000fa56:	6402                	ld	s0,0(sp)
    8000fa58:	0141                	addi	sp,sp,16
    8000fa5a:	8082                	ret

000000008000fa5c <addr_unaligned>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool addr_unaligned() {
    8000fa5c:	1101                	addi	sp,sp,-32

    TEST_START();
    8000fa5e:	00021597          	auipc	a1,0x21
    8000fa62:	efa58593          	addi	a1,a1,-262 # 80030958 <__func__.1>
    8000fa66:	00023517          	auipc	a0,0x23
    8000fa6a:	c6250513          	addi	a0,a0,-926 # 800326c8 <__func__.0+0x2e0>
bool addr_unaligned() {
    8000fa6e:	ec06                	sd	ra,24(sp)
    8000fa70:	e822                	sd	s0,16(sp)
    8000fa72:	e426                	sd	s1,8(sp)
    8000fa74:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000fa76:	24f1f0ef          	jal	8002f4c4 <printf>
    8000fa7a:	4529                	li	a0,10
    8000fa7c:	7361e0ef          	jal	8002e1b2 <putchar>

    TEST_SETUP_EXCEPT();
    8000fa80:	b98f10ef          	jal	80000e18 <test_setup_except_function>
    
    
    hspt_init();        
    8000fa84:	b69f00ef          	jal	800005ec <hspt_init>
    goto_priv(PRIV_HS);     
    8000fa88:	450d                	li	a0,3
    8000fa8a:	c8af10ef          	jal	80000f14 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000fa8e:	b8af10ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000fa92:	001007b7          	lui	a5,0x100
    8000fa96:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fa9a:	07b2                	slli	a5,a5,0xc
    8000fa9c:	0785                	addi	a5,a5,1
    8000fa9e:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    8000faa2:	08c00593          	li	a1,140
    8000faa6:	00026617          	auipc	a2,0x26
    8000faaa:	d1a60613          	addi	a2,a2,-742 # 800357c0 <__func__.0+0x33d8>
    8000faae:	00023517          	auipc	a0,0x23
    8000fab2:	c3250513          	addi	a0,a0,-974 # 800326e0 <__func__.0+0x2f8>
    8000fab6:	20f1f0ef          	jal	8002f4c4 <printf>
    8000faba:	0004c797          	auipc	a5,0x4c
    8000fabe:	5577c783          	lbu	a5,1367(a5) # 8005c011 <excpt+0x1>
    8000fac2:	00023597          	auipc	a1,0x23
    8000fac6:	be658593          	addi	a1,a1,-1050 # 800326a8 <__func__.0+0x2c0>
    8000faca:	c789                	beqz	a5,8000fad4 <addr_unaligned+0x78>
    8000facc:	00023597          	auipc	a1,0x23
    8000fad0:	bec58593          	addi	a1,a1,-1044 # 800326b8 <__func__.0+0x2d0>
    8000fad4:	00023517          	auipc	a0,0x23
    8000fad8:	c2450513          	addi	a0,a0,-988 # 800326f8 <__func__.0+0x310>
    8000fadc:	1e91f0ef          	jal	8002f4c4 <printf>
    8000fae0:	0004c797          	auipc	a5,0x4c
    8000fae4:	5317c783          	lbu	a5,1329(a5) # 8005c011 <excpt+0x1>
    8000fae8:	4c079c63          	bnez	a5,8000ffc0 <addr_unaligned+0x564>
    8000faec:	4529                	li	a0,10
    8000faee:	6c41e0ef          	jal	8002e1b2 <putchar>
    8000faf2:	0004c497          	auipc	s1,0x4c
    8000faf6:	51f4c483          	lbu	s1,1311(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == false
    );

    //load half地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fafa:	b1ef10ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000fafe:	001007b7          	lui	a5,0x100
    8000fb02:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fb06:	07b2                	slli	a5,a5,0xc
    TEST_ASSERT("load byte address is not aligned successful",         
    8000fb08:	0004c917          	auipc	s2,0x4c
    8000fb0c:	50890913          	addi	s2,s2,1288 # 8005c010 <excpt>
    8000fb10:	0785                	addi	a5,a5,1
    8000fb12:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000fb16:	08c00593          	li	a1,140
    8000fb1a:	00026617          	auipc	a2,0x26
    8000fb1e:	cd660613          	addi	a2,a2,-810 # 800357f0 <__func__.0+0x3408>
    8000fb22:	00023517          	auipc	a0,0x23
    8000fb26:	bbe50513          	addi	a0,a0,-1090 # 800326e0 <__func__.0+0x2f8>
    8000fb2a:	19b1f0ef          	jal	8002f4c4 <printf>
    8000fb2e:	0004c797          	auipc	a5,0x4c
    8000fb32:	4e37c783          	lbu	a5,1251(a5) # 8005c011 <excpt+0x1>
    8000fb36:	00023597          	auipc	a1,0x23
    8000fb3a:	b8258593          	addi	a1,a1,-1150 # 800326b8 <__func__.0+0x2d0>
    8000fb3e:	cf91                	beqz	a5,8000fb5a <addr_unaligned+0xfe>
    8000fb40:	00893703          	ld	a4,8(s2)
    8000fb44:	4791                	li	a5,4
    8000fb46:	00023597          	auipc	a1,0x23
    8000fb4a:	b6258593          	addi	a1,a1,-1182 # 800326a8 <__func__.0+0x2c0>
    8000fb4e:	00f70663          	beq	a4,a5,8000fb5a <addr_unaligned+0xfe>
    8000fb52:	00023597          	auipc	a1,0x23
    8000fb56:	b6658593          	addi	a1,a1,-1178 # 800326b8 <__func__.0+0x2d0>
    8000fb5a:	00023517          	auipc	a0,0x23
    8000fb5e:	b9e50513          	addi	a0,a0,-1122 # 800326f8 <__func__.0+0x310>
    8000fb62:	1631f0ef          	jal	8002f4c4 <printf>
    8000fb66:	0004c797          	auipc	a5,0x4c
    8000fb6a:	4ab7c783          	lbu	a5,1195(a5) # 8005c011 <excpt+0x1>
    8000fb6e:	c791                	beqz	a5,8000fb7a <addr_unaligned+0x11e>
    8000fb70:	00893703          	ld	a4,8(s2)
    8000fb74:	4791                	li	a5,4
    8000fb76:	00f70c63          	beq	a4,a5,8000fb8e <addr_unaligned+0x132>
    8000fb7a:	00023517          	auipc	a0,0x23
    8000fb7e:	b8650513          	addi	a0,a0,-1146 # 80032700 <__func__.0+0x318>
    8000fb82:	1431f0ef          	jal	8002f4c4 <printf>
    8000fb86:	02900513          	li	a0,41
    8000fb8a:	6281e0ef          	jal	8002e1b2 <putchar>
    8000fb8e:	4529                	li	a0,10
    8000fb90:	6221e0ef          	jal	8002e1b2 <putchar>
    8000fb94:	4401                	li	s0,0
    8000fb96:	e499                	bnez	s1,8000fba4 <addr_unaligned+0x148>
    8000fb98:	0004c797          	auipc	a5,0x4c
    8000fb9c:	4797c783          	lbu	a5,1145(a5) # 8005c011 <excpt+0x1>
    8000fba0:	3e079863          	bnez	a5,8000ff90 <addr_unaligned+0x534>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );
    
    //load word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fba4:	a74f10ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000fba8:	001007b7          	lui	a5,0x100
    8000fbac:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fbb0:	07b2                	slli	a5,a5,0xc
    8000fbb2:	0785                	addi	a5,a5,1
    8000fbb4:	0007a783          	lw	a5,0(a5)
    value = lw(vaddr_f);
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000fbb8:	08c00593          	li	a1,140
    8000fbbc:	00026617          	auipc	a2,0x26
    8000fbc0:	c6c60613          	addi	a2,a2,-916 # 80035828 <__func__.0+0x3440>
    8000fbc4:	00023517          	auipc	a0,0x23
    8000fbc8:	b1c50513          	addi	a0,a0,-1252 # 800326e0 <__func__.0+0x2f8>
    8000fbcc:	0f91f0ef          	jal	8002f4c4 <printf>
    8000fbd0:	0004c797          	auipc	a5,0x4c
    8000fbd4:	4417c783          	lbu	a5,1089(a5) # 8005c011 <excpt+0x1>
    8000fbd8:	00023597          	auipc	a1,0x23
    8000fbdc:	ae058593          	addi	a1,a1,-1312 # 800326b8 <__func__.0+0x2d0>
    8000fbe0:	cf91                	beqz	a5,8000fbfc <addr_unaligned+0x1a0>
    8000fbe2:	00893703          	ld	a4,8(s2)
    8000fbe6:	4791                	li	a5,4
    8000fbe8:	00023597          	auipc	a1,0x23
    8000fbec:	ac058593          	addi	a1,a1,-1344 # 800326a8 <__func__.0+0x2c0>
    8000fbf0:	00f70663          	beq	a4,a5,8000fbfc <addr_unaligned+0x1a0>
    8000fbf4:	00023597          	auipc	a1,0x23
    8000fbf8:	ac458593          	addi	a1,a1,-1340 # 800326b8 <__func__.0+0x2d0>
    8000fbfc:	00023517          	auipc	a0,0x23
    8000fc00:	afc50513          	addi	a0,a0,-1284 # 800326f8 <__func__.0+0x310>
    8000fc04:	0c11f0ef          	jal	8002f4c4 <printf>
    8000fc08:	0004c797          	auipc	a5,0x4c
    8000fc0c:	4097c783          	lbu	a5,1033(a5) # 8005c011 <excpt+0x1>
    8000fc10:	c791                	beqz	a5,8000fc1c <addr_unaligned+0x1c0>
    8000fc12:	00893703          	ld	a4,8(s2)
    8000fc16:	4791                	li	a5,4
    8000fc18:	00f70c63          	beq	a4,a5,8000fc30 <addr_unaligned+0x1d4>
    8000fc1c:	00023517          	auipc	a0,0x23
    8000fc20:	ae450513          	addi	a0,a0,-1308 # 80032700 <__func__.0+0x318>
    8000fc24:	0a11f0ef          	jal	8002f4c4 <printf>
    8000fc28:	02900513          	li	a0,41
    8000fc2c:	5861e0ef          	jal	8002e1b2 <putchar>
    8000fc30:	4529                	li	a0,10
    8000fc32:	5801e0ef          	jal	8002e1b2 <putchar>
    8000fc36:	c801                	beqz	s0,8000fc46 <addr_unaligned+0x1ea>
    8000fc38:	0004c797          	auipc	a5,0x4c
    8000fc3c:	3d97c783          	lbu	a5,985(a5) # 8005c011 <excpt+0x1>
    8000fc40:	4401                	li	s0,0
    8000fc42:	34079163          	bnez	a5,8000ff84 <addr_unaligned+0x528>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000fc46:	001004b7          	lui	s1,0x100
    8000fc4a:	04b48493          	addi	s1,s1,75 # 10004b <STACK_SIZE+0x4b>
    8000fc4e:	04b2                	slli	s1,s1,0xc
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //load double word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fc50:	9c8f10ef          	jal	80000e18 <test_setup_except_function>
    8000fc54:	0485                	addi	s1,s1,1
    8000fc56:	0004b483          	ld	s1,0(s1)
    value = ld(vaddr_f);
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000fc5a:	08c00593          	li	a1,140
    8000fc5e:	00026617          	auipc	a2,0x26
    8000fc62:	c0260613          	addi	a2,a2,-1022 # 80035860 <__func__.0+0x3478>
    8000fc66:	00023517          	auipc	a0,0x23
    8000fc6a:	a7a50513          	addi	a0,a0,-1414 # 800326e0 <__func__.0+0x2f8>
    8000fc6e:	0571f0ef          	jal	8002f4c4 <printf>
    8000fc72:	0004c797          	auipc	a5,0x4c
    8000fc76:	39f7c783          	lbu	a5,927(a5) # 8005c011 <excpt+0x1>
    8000fc7a:	00023597          	auipc	a1,0x23
    8000fc7e:	a3e58593          	addi	a1,a1,-1474 # 800326b8 <__func__.0+0x2d0>
    8000fc82:	cf91                	beqz	a5,8000fc9e <addr_unaligned+0x242>
    8000fc84:	00893703          	ld	a4,8(s2)
    8000fc88:	4791                	li	a5,4
    8000fc8a:	00023597          	auipc	a1,0x23
    8000fc8e:	a1e58593          	addi	a1,a1,-1506 # 800326a8 <__func__.0+0x2c0>
    8000fc92:	00f70663          	beq	a4,a5,8000fc9e <addr_unaligned+0x242>
    8000fc96:	00023597          	auipc	a1,0x23
    8000fc9a:	a2258593          	addi	a1,a1,-1502 # 800326b8 <__func__.0+0x2d0>
    8000fc9e:	00023517          	auipc	a0,0x23
    8000fca2:	a5a50513          	addi	a0,a0,-1446 # 800326f8 <__func__.0+0x310>
    8000fca6:	01f1f0ef          	jal	8002f4c4 <printf>
    8000fcaa:	0004c797          	auipc	a5,0x4c
    8000fcae:	3677c783          	lbu	a5,871(a5) # 8005c011 <excpt+0x1>
    8000fcb2:	c791                	beqz	a5,8000fcbe <addr_unaligned+0x262>
    8000fcb4:	00893703          	ld	a4,8(s2)
    8000fcb8:	4791                	li	a5,4
    8000fcba:	00f70c63          	beq	a4,a5,8000fcd2 <addr_unaligned+0x276>
    8000fcbe:	00023517          	auipc	a0,0x23
    8000fcc2:	a4250513          	addi	a0,a0,-1470 # 80032700 <__func__.0+0x318>
    8000fcc6:	7fe1f0ef          	jal	8002f4c4 <printf>
    8000fcca:	02900513          	li	a0,41
    8000fcce:	4e41e0ef          	jal	8002e1b2 <putchar>
    8000fcd2:	4529                	li	a0,10
    8000fcd4:	4de1e0ef          	jal	8002e1b2 <putchar>
    8000fcd8:	c801                	beqz	s0,8000fce8 <addr_unaligned+0x28c>
    8000fcda:	0004c797          	auipc	a5,0x4c
    8000fcde:	3377c783          	lbu	a5,823(a5) # 8005c011 <excpt+0x1>
    8000fce2:	4401                	li	s0,0
    8000fce4:	2c079863          	bnez	a5,8000ffb4 <addr_unaligned+0x558>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //store byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000fce8:	930f10ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000fcec:	001007b7          	lui	a5,0x100
    8000fcf0:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fcf4:	07b2                	slli	a5,a5,0xc
    8000fcf6:	0785                	addi	a5,a5,1
    8000fcf8:	00978023          	sb	s1,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("store byte address is not aligned successful",         
    8000fcfc:	08c00593          	li	a1,140
    8000fd00:	00026617          	auipc	a2,0x26
    8000fd04:	b9860613          	addi	a2,a2,-1128 # 80035898 <__func__.0+0x34b0>
    8000fd08:	00023517          	auipc	a0,0x23
    8000fd0c:	9d850513          	addi	a0,a0,-1576 # 800326e0 <__func__.0+0x2f8>
    8000fd10:	7b41f0ef          	jal	8002f4c4 <printf>
    8000fd14:	0004c797          	auipc	a5,0x4c
    8000fd18:	2fd7c783          	lbu	a5,765(a5) # 8005c011 <excpt+0x1>
    8000fd1c:	00023597          	auipc	a1,0x23
    8000fd20:	99c58593          	addi	a1,a1,-1636 # 800326b8 <__func__.0+0x2d0>
    8000fd24:	e789                	bnez	a5,8000fd2e <addr_unaligned+0x2d2>
    8000fd26:	00023597          	auipc	a1,0x23
    8000fd2a:	98258593          	addi	a1,a1,-1662 # 800326a8 <__func__.0+0x2c0>
    8000fd2e:	00023517          	auipc	a0,0x23
    8000fd32:	9ca50513          	addi	a0,a0,-1590 # 800326f8 <__func__.0+0x310>
    8000fd36:	78e1f0ef          	jal	8002f4c4 <printf>
    8000fd3a:	0004c797          	auipc	a5,0x4c
    8000fd3e:	2d77c783          	lbu	a5,727(a5) # 8005c011 <excpt+0x1>
    8000fd42:	28079a63          	bnez	a5,8000ffd6 <addr_unaligned+0x57a>
    8000fd46:	4529                	li	a0,10
    8000fd48:	46a1e0ef          	jal	8002e1b2 <putchar>
    8000fd4c:	c419                	beqz	s0,8000fd5a <addr_unaligned+0x2fe>
    8000fd4e:	0004c417          	auipc	s0,0x4c
    8000fd52:	2c344403          	lbu	s0,707(s0) # 8005c011 <excpt+0x1>
    8000fd56:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //store half地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000fd5a:	8bef10ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000fd5e:	001007b7          	lui	a5,0x100
    8000fd62:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fd66:	07b2                	slli	a5,a5,0xc
    8000fd68:	0785                	addi	a5,a5,1
    8000fd6a:	00979023          	sh	s1,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000fd6e:	08c00593          	li	a1,140
    8000fd72:	00026617          	auipc	a2,0x26
    8000fd76:	b5660613          	addi	a2,a2,-1194 # 800358c8 <__func__.0+0x34e0>
    8000fd7a:	00023517          	auipc	a0,0x23
    8000fd7e:	96650513          	addi	a0,a0,-1690 # 800326e0 <__func__.0+0x2f8>
    8000fd82:	7421f0ef          	jal	8002f4c4 <printf>
    8000fd86:	0004c797          	auipc	a5,0x4c
    8000fd8a:	28b7c783          	lbu	a5,651(a5) # 8005c011 <excpt+0x1>
    8000fd8e:	00023597          	auipc	a1,0x23
    8000fd92:	92a58593          	addi	a1,a1,-1750 # 800326b8 <__func__.0+0x2d0>
    8000fd96:	cf91                	beqz	a5,8000fdb2 <addr_unaligned+0x356>
    8000fd98:	00893703          	ld	a4,8(s2)
    8000fd9c:	4799                	li	a5,6
    8000fd9e:	00023597          	auipc	a1,0x23
    8000fda2:	90a58593          	addi	a1,a1,-1782 # 800326a8 <__func__.0+0x2c0>
    8000fda6:	00f70663          	beq	a4,a5,8000fdb2 <addr_unaligned+0x356>
    8000fdaa:	00023597          	auipc	a1,0x23
    8000fdae:	90e58593          	addi	a1,a1,-1778 # 800326b8 <__func__.0+0x2d0>
    8000fdb2:	00023517          	auipc	a0,0x23
    8000fdb6:	94650513          	addi	a0,a0,-1722 # 800326f8 <__func__.0+0x310>
    8000fdba:	70a1f0ef          	jal	8002f4c4 <printf>
    8000fdbe:	0004c797          	auipc	a5,0x4c
    8000fdc2:	2537c783          	lbu	a5,595(a5) # 8005c011 <excpt+0x1>
    8000fdc6:	c791                	beqz	a5,8000fdd2 <addr_unaligned+0x376>
    8000fdc8:	00893703          	ld	a4,8(s2)
    8000fdcc:	4799                	li	a5,6
    8000fdce:	00f70c63          	beq	a4,a5,8000fde6 <addr_unaligned+0x38a>
    8000fdd2:	00023517          	auipc	a0,0x23
    8000fdd6:	92e50513          	addi	a0,a0,-1746 # 80032700 <__func__.0+0x318>
    8000fdda:	6ea1f0ef          	jal	8002f4c4 <printf>
    8000fdde:	02900513          	li	a0,41
    8000fde2:	3d01e0ef          	jal	8002e1b2 <putchar>
    8000fde6:	4529                	li	a0,10
    8000fde8:	3ca1e0ef          	jal	8002e1b2 <putchar>
    8000fdec:	c801                	beqz	s0,8000fdfc <addr_unaligned+0x3a0>
    8000fdee:	0004c797          	auipc	a5,0x4c
    8000fdf2:	2237c783          	lbu	a5,547(a5) # 8005c011 <excpt+0x1>
    8000fdf6:	4401                	li	s0,0
    8000fdf8:	1a079863          	bnez	a5,8000ffa8 <addr_unaligned+0x54c>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );
    
    //store word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000fdfc:	81cf10ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000fe00:	001007b7          	lui	a5,0x100
    8000fe04:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fe08:	07b2                	slli	a5,a5,0xc
    8000fe0a:	0785                	addi	a5,a5,1
    8000fe0c:	0097a023          	sw	s1,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000fe10:	08c00593          	li	a1,140
    8000fe14:	00026617          	auipc	a2,0x26
    8000fe18:	aec60613          	addi	a2,a2,-1300 # 80035900 <__func__.0+0x3518>
    8000fe1c:	00023517          	auipc	a0,0x23
    8000fe20:	8c450513          	addi	a0,a0,-1852 # 800326e0 <__func__.0+0x2f8>
    8000fe24:	6a01f0ef          	jal	8002f4c4 <printf>
    8000fe28:	0004c797          	auipc	a5,0x4c
    8000fe2c:	1e97c783          	lbu	a5,489(a5) # 8005c011 <excpt+0x1>
    8000fe30:	00023597          	auipc	a1,0x23
    8000fe34:	88858593          	addi	a1,a1,-1912 # 800326b8 <__func__.0+0x2d0>
    8000fe38:	cf91                	beqz	a5,8000fe54 <addr_unaligned+0x3f8>
    8000fe3a:	00893703          	ld	a4,8(s2)
    8000fe3e:	4799                	li	a5,6
    8000fe40:	00023597          	auipc	a1,0x23
    8000fe44:	86858593          	addi	a1,a1,-1944 # 800326a8 <__func__.0+0x2c0>
    8000fe48:	00f70663          	beq	a4,a5,8000fe54 <addr_unaligned+0x3f8>
    8000fe4c:	00023597          	auipc	a1,0x23
    8000fe50:	86c58593          	addi	a1,a1,-1940 # 800326b8 <__func__.0+0x2d0>
    8000fe54:	00023517          	auipc	a0,0x23
    8000fe58:	8a450513          	addi	a0,a0,-1884 # 800326f8 <__func__.0+0x310>
    8000fe5c:	6681f0ef          	jal	8002f4c4 <printf>
    8000fe60:	0004c797          	auipc	a5,0x4c
    8000fe64:	1b17c783          	lbu	a5,433(a5) # 8005c011 <excpt+0x1>
    8000fe68:	c791                	beqz	a5,8000fe74 <addr_unaligned+0x418>
    8000fe6a:	00893703          	ld	a4,8(s2)
    8000fe6e:	4799                	li	a5,6
    8000fe70:	00f70c63          	beq	a4,a5,8000fe88 <addr_unaligned+0x42c>
    8000fe74:	00023517          	auipc	a0,0x23
    8000fe78:	88c50513          	addi	a0,a0,-1908 # 80032700 <__func__.0+0x318>
    8000fe7c:	6481f0ef          	jal	8002f4c4 <printf>
    8000fe80:	02900513          	li	a0,41
    8000fe84:	32e1e0ef          	jal	8002e1b2 <putchar>
    8000fe88:	4529                	li	a0,10
    8000fe8a:	3281e0ef          	jal	8002e1b2 <putchar>
    8000fe8e:	c801                	beqz	s0,8000fe9e <addr_unaligned+0x442>
    8000fe90:	0004c797          	auipc	a5,0x4c
    8000fe94:	1817c783          	lbu	a5,385(a5) # 8005c011 <excpt+0x1>
    8000fe98:	4401                	li	s0,0
    8000fe9a:	10079163          	bnez	a5,8000ff9c <addr_unaligned+0x540>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    //store double word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000fe9e:	f7bf00ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000fea2:	001007b7          	lui	a5,0x100
    8000fea6:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000feaa:	07b2                	slli	a5,a5,0xc
    8000feac:	0785                	addi	a5,a5,1
    8000feae:	0097b023          	sd	s1,0(a5)
    sd(vaddr_f,value);
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000feb2:	08c00593          	li	a1,140
    8000feb6:	00026617          	auipc	a2,0x26
    8000feba:	a8260613          	addi	a2,a2,-1406 # 80035938 <__func__.0+0x3550>
    8000febe:	00023517          	auipc	a0,0x23
    8000fec2:	82250513          	addi	a0,a0,-2014 # 800326e0 <__func__.0+0x2f8>
    8000fec6:	5fe1f0ef          	jal	8002f4c4 <printf>
    8000feca:	0004c797          	auipc	a5,0x4c
    8000fece:	1477c783          	lbu	a5,327(a5) # 8005c011 <excpt+0x1>
    8000fed2:	00022597          	auipc	a1,0x22
    8000fed6:	7e658593          	addi	a1,a1,2022 # 800326b8 <__func__.0+0x2d0>
    8000feda:	cf91                	beqz	a5,8000fef6 <addr_unaligned+0x49a>
    8000fedc:	00893703          	ld	a4,8(s2)
    8000fee0:	4799                	li	a5,6
    8000fee2:	00022597          	auipc	a1,0x22
    8000fee6:	7c658593          	addi	a1,a1,1990 # 800326a8 <__func__.0+0x2c0>
    8000feea:	00f70663          	beq	a4,a5,8000fef6 <addr_unaligned+0x49a>
    8000feee:	00022597          	auipc	a1,0x22
    8000fef2:	7ca58593          	addi	a1,a1,1994 # 800326b8 <__func__.0+0x2d0>
    8000fef6:	00023517          	auipc	a0,0x23
    8000fefa:	80250513          	addi	a0,a0,-2046 # 800326f8 <__func__.0+0x310>
    8000fefe:	5c61f0ef          	jal	8002f4c4 <printf>
    8000ff02:	0004c797          	auipc	a5,0x4c
    8000ff06:	10f7c783          	lbu	a5,271(a5) # 8005c011 <excpt+0x1>
    8000ff0a:	c791                	beqz	a5,8000ff16 <addr_unaligned+0x4ba>
    8000ff0c:	00893703          	ld	a4,8(s2)
    8000ff10:	4799                	li	a5,6
    8000ff12:	00f70c63          	beq	a4,a5,8000ff2a <addr_unaligned+0x4ce>
    8000ff16:	00022517          	auipc	a0,0x22
    8000ff1a:	7ea50513          	addi	a0,a0,2026 # 80032700 <__func__.0+0x318>
    8000ff1e:	5a61f0ef          	jal	8002f4c4 <printf>
    8000ff22:	02900513          	li	a0,41
    8000ff26:	28c1e0ef          	jal	8002e1b2 <putchar>
    8000ff2a:	4529                	li	a0,10
    8000ff2c:	2861e0ef          	jal	8002e1b2 <putchar>
    8000ff30:	c01d                	beqz	s0,8000ff56 <addr_unaligned+0x4fa>
    8000ff32:	0004c417          	auipc	s0,0x4c
    8000ff36:	0df44403          	lbu	s0,223(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    TEST_END();
    8000ff3a:	00022597          	auipc	a1,0x22
    8000ff3e:	77e58593          	addi	a1,a1,1918 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000ff42:	cc19                	beqz	s0,8000ff60 <addr_unaligned+0x504>
    8000ff44:	00893703          	ld	a4,8(s2)
    8000ff48:	4799                	li	a5,6
    TEST_END();
    8000ff4a:	00022597          	auipc	a1,0x22
    8000ff4e:	75e58593          	addi	a1,a1,1886 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000ff52:	00f70763          	beq	a4,a5,8000ff60 <addr_unaligned+0x504>
    8000ff56:	4401                	li	s0,0
    TEST_END();
    8000ff58:	00022597          	auipc	a1,0x22
    8000ff5c:	76058593          	addi	a1,a1,1888 # 800326b8 <__func__.0+0x2d0>
    8000ff60:	00023517          	auipc	a0,0x23
    8000ff64:	80050513          	addi	a0,a0,-2048 # 80032760 <__func__.0+0x378>
    8000ff68:	55c1f0ef          	jal	8002f4c4 <printf>
    8000ff6c:	4511                	li	a0,4
    8000ff6e:	fa7f00ef          	jal	80000f14 <goto_priv>
    8000ff72:	805f10ef          	jal	80001776 <reset_state>

    8000ff76:	60e2                	ld	ra,24(sp)
    8000ff78:	8522                	mv	a0,s0
    8000ff7a:	6442                	ld	s0,16(sp)
    8000ff7c:	64a2                	ld	s1,8(sp)
    8000ff7e:	6902                	ld	s2,0(sp)
    8000ff80:	6105                	addi	sp,sp,32
    8000ff82:	8082                	ret
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000ff84:	00893403          	ld	s0,8(s2)
    8000ff88:	1471                	addi	s0,s0,-4
    8000ff8a:	00143413          	seqz	s0,s0
    8000ff8e:	b965                	j	8000fc46 <addr_unaligned+0x1ea>
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000ff90:	00893403          	ld	s0,8(s2)
    8000ff94:	1471                	addi	s0,s0,-4
    8000ff96:	00143413          	seqz	s0,s0
    8000ff9a:	b129                	j	8000fba4 <addr_unaligned+0x148>
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000ff9c:	00893403          	ld	s0,8(s2)
    8000ffa0:	1469                	addi	s0,s0,-6
    8000ffa2:	00143413          	seqz	s0,s0
    8000ffa6:	bde5                	j	8000fe9e <addr_unaligned+0x442>
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000ffa8:	00893403          	ld	s0,8(s2)
    8000ffac:	1469                	addi	s0,s0,-6
    8000ffae:	00143413          	seqz	s0,s0
    8000ffb2:	b5a9                	j	8000fdfc <addr_unaligned+0x3a0>
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000ffb4:	00893403          	ld	s0,8(s2)
    8000ffb8:	1471                	addi	s0,s0,-4
    8000ffba:	00143413          	seqz	s0,s0
    8000ffbe:	b32d                	j	8000fce8 <addr_unaligned+0x28c>
    TEST_ASSERT("load byte address is not aligned successful",         
    8000ffc0:	00022517          	auipc	a0,0x22
    8000ffc4:	74050513          	addi	a0,a0,1856 # 80032700 <__func__.0+0x318>
    8000ffc8:	4fc1f0ef          	jal	8002f4c4 <printf>
    8000ffcc:	02900513          	li	a0,41
    8000ffd0:	1e21e0ef          	jal	8002e1b2 <putchar>
    8000ffd4:	be21                	j	8000faec <addr_unaligned+0x90>
    TEST_ASSERT("store byte address is not aligned successful",         
    8000ffd6:	00022517          	auipc	a0,0x22
    8000ffda:	72a50513          	addi	a0,a0,1834 # 80032700 <__func__.0+0x318>
    8000ffde:	4e61f0ef          	jal	8002f4c4 <printf>
    8000ffe2:	02900513          	li	a0,41
    8000ffe6:	1cc1e0ef          	jal	8002e1b2 <putchar>
    8000ffea:	bbb1                	j	8000fd46 <addr_unaligned+0x2ea>

000000008000ffec <illegal_except_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool illegal_except_1() {
    8000ffec:	1101                	addi	sp,sp,-32

    TEST_START();
    8000ffee:	00021597          	auipc	a1,0x21
    8000fff2:	97a58593          	addi	a1,a1,-1670 # 80030968 <__func__.14>
    8000fff6:	00022517          	auipc	a0,0x22
    8000fffa:	6d250513          	addi	a0,a0,1746 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_1() {
    8000fffe:	ec06                	sd	ra,24(sp)
    80010000:	e822                	sd	s0,16(sp)
    80010002:	e426                	sd	s1,8(sp)
    TEST_START();
    80010004:	4c01f0ef          	jal	8002f4c4 <printf>
    80010008:	4529                	li	a0,10
    8001000a:	1a81e0ef          	jal	8002e1b2 <putchar>

    TEST_SETUP_EXCEPT();
    8001000e:	e0bf00ef          	jal	80000e18 <test_setup_except_function>
    // ); 
    // printf("%d",excpt.triggered);
    // printf("%d",excpt.cause);

    //当前权限满足最低CSR访问权限，CSR写行为，但访问的CSR只读
    goto_priv(PRIV_M);
    80010012:	4511                	li	a0,4
    80010014:	f01f00ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    80010018:	6785                	lui	a5,0x1
    8001001a:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8001001c:	f1579073          	csrw	0xf15,a5
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    80010020:	08c00593          	li	a1,140
    80010024:	00026617          	auipc	a2,0x26
    80010028:	95460613          	addi	a2,a2,-1708 # 80035978 <__func__.0+0x3590>
    8001002c:	00022517          	auipc	a0,0x22
    80010030:	6b450513          	addi	a0,a0,1716 # 800326e0 <__func__.0+0x2f8>
    80010034:	4901f0ef          	jal	8002f4c4 <printf>
    80010038:	0004c797          	auipc	a5,0x4c
    8001003c:	fd97c783          	lbu	a5,-39(a5) # 8005c011 <excpt+0x1>
    80010040:	0004c497          	auipc	s1,0x4c
    80010044:	fd048493          	addi	s1,s1,-48 # 8005c010 <excpt>
    80010048:	00022597          	auipc	a1,0x22
    8001004c:	67058593          	addi	a1,a1,1648 # 800326b8 <__func__.0+0x2d0>
    80010050:	cf89                	beqz	a5,8001006a <illegal_except_1+0x7e>
    80010052:	6498                	ld	a4,8(s1)
    80010054:	4789                	li	a5,2
    80010056:	00022597          	auipc	a1,0x22
    8001005a:	65258593          	addi	a1,a1,1618 # 800326a8 <__func__.0+0x2c0>
    8001005e:	00f70663          	beq	a4,a5,8001006a <illegal_except_1+0x7e>
    80010062:	00022597          	auipc	a1,0x22
    80010066:	65658593          	addi	a1,a1,1622 # 800326b8 <__func__.0+0x2d0>
    8001006a:	00022517          	auipc	a0,0x22
    8001006e:	68e50513          	addi	a0,a0,1678 # 800326f8 <__func__.0+0x310>
    80010072:	4521f0ef          	jal	8002f4c4 <printf>
    80010076:	0004c797          	auipc	a5,0x4c
    8001007a:	f9b7c783          	lbu	a5,-101(a5) # 8005c011 <excpt+0x1>
    8001007e:	c789                	beqz	a5,80010088 <illegal_except_1+0x9c>
    80010080:	6498                	ld	a4,8(s1)
    80010082:	4789                	li	a5,2
    80010084:	00f70c63          	beq	a4,a5,8001009c <illegal_except_1+0xb0>
    80010088:	00022517          	auipc	a0,0x22
    8001008c:	67850513          	addi	a0,a0,1656 # 80032700 <__func__.0+0x318>
    80010090:	4341f0ef          	jal	8002f4c4 <printf>
    80010094:	02900513          	li	a0,41
    80010098:	11a1e0ef          	jal	8002e1b2 <putchar>
    8001009c:	4529                	li	a0,10
    8001009e:	1141e0ef          	jal	8002e1b2 <putchar>
    800100a2:	0004c797          	auipc	a5,0x4c
    800100a6:	f6f7c783          	lbu	a5,-145(a5) # 8005c011 <excpt+0x1>
    800100aa:	4401                	li	s0,0
    800100ac:	c789                	beqz	a5,800100b6 <illegal_except_1+0xca>
    800100ae:	6480                	ld	s0,8(s1)
    800100b0:	1479                	addi	s0,s0,-2
    800100b2:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_ILI 
    ); 


    //当前权限不满足最低CSR访问权限
    goto_priv(PRIV_HS);
    800100b6:	450d                	li	a0,3
    800100b8:	e5df00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800100bc:	d5df00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_MIE);
    800100c0:	304027f3          	csrr	a5,mie
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    800100c4:	08c00593          	li	a1,140
    800100c8:	00026617          	auipc	a2,0x26
    800100cc:	8f860613          	addi	a2,a2,-1800 # 800359c0 <__func__.0+0x35d8>
    800100d0:	00022517          	auipc	a0,0x22
    800100d4:	61050513          	addi	a0,a0,1552 # 800326e0 <__func__.0+0x2f8>
    800100d8:	3ec1f0ef          	jal	8002f4c4 <printf>
    800100dc:	0004c797          	auipc	a5,0x4c
    800100e0:	f357c783          	lbu	a5,-203(a5) # 8005c011 <excpt+0x1>
    800100e4:	00022597          	auipc	a1,0x22
    800100e8:	5d458593          	addi	a1,a1,1492 # 800326b8 <__func__.0+0x2d0>
    800100ec:	cf89                	beqz	a5,80010106 <illegal_except_1+0x11a>
    800100ee:	6498                	ld	a4,8(s1)
    800100f0:	4789                	li	a5,2
    800100f2:	00022597          	auipc	a1,0x22
    800100f6:	5b658593          	addi	a1,a1,1462 # 800326a8 <__func__.0+0x2c0>
    800100fa:	00f70663          	beq	a4,a5,80010106 <illegal_except_1+0x11a>
    800100fe:	00022597          	auipc	a1,0x22
    80010102:	5ba58593          	addi	a1,a1,1466 # 800326b8 <__func__.0+0x2d0>
    80010106:	00022517          	auipc	a0,0x22
    8001010a:	5f250513          	addi	a0,a0,1522 # 800326f8 <__func__.0+0x310>
    8001010e:	3b61f0ef          	jal	8002f4c4 <printf>
    80010112:	0004c797          	auipc	a5,0x4c
    80010116:	eff7c783          	lbu	a5,-257(a5) # 8005c011 <excpt+0x1>
    8001011a:	c789                	beqz	a5,80010124 <illegal_except_1+0x138>
    8001011c:	6498                	ld	a4,8(s1)
    8001011e:	4789                	li	a5,2
    80010120:	00f70c63          	beq	a4,a5,80010138 <illegal_except_1+0x14c>
    80010124:	00022517          	auipc	a0,0x22
    80010128:	5dc50513          	addi	a0,a0,1500 # 80032700 <__func__.0+0x318>
    8001012c:	3981f0ef          	jal	8002f4c4 <printf>
    80010130:	02900513          	li	a0,41
    80010134:	07e1e0ef          	jal	8002e1b2 <putchar>
    80010138:	4529                	li	a0,10
    8001013a:	0781e0ef          	jal	8002e1b2 <putchar>
    8001013e:	c015                	beqz	s0,80010162 <illegal_except_1+0x176>
    80010140:	0004c417          	auipc	s0,0x4c
    80010144:	ed144403          	lbu	s0,-303(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010148:	00022597          	auipc	a1,0x22
    8001014c:	57058593          	addi	a1,a1,1392 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    80010150:	cc11                	beqz	s0,8001016c <illegal_except_1+0x180>
    80010152:	6498                	ld	a4,8(s1)
    80010154:	4789                	li	a5,2
    TEST_END();
    80010156:	00022597          	auipc	a1,0x22
    8001015a:	55258593          	addi	a1,a1,1362 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8001015e:	00f70763          	beq	a4,a5,8001016c <illegal_except_1+0x180>
    80010162:	4401                	li	s0,0
    TEST_END();
    80010164:	00022597          	auipc	a1,0x22
    80010168:	55458593          	addi	a1,a1,1364 # 800326b8 <__func__.0+0x2d0>
    8001016c:	00022517          	auipc	a0,0x22
    80010170:	5f450513          	addi	a0,a0,1524 # 80032760 <__func__.0+0x378>
    80010174:	3501f0ef          	jal	8002f4c4 <printf>
    80010178:	4511                	li	a0,4
    8001017a:	d9bf00ef          	jal	80000f14 <goto_priv>
    8001017e:	df8f10ef          	jal	80001776 <reset_state>

}
    80010182:	60e2                	ld	ra,24(sp)
    80010184:	8522                	mv	a0,s0
    80010186:	6442                	ld	s0,16(sp)
    80010188:	64a2                	ld	s1,8(sp)
    8001018a:	6105                	addi	sp,sp,32
    8001018c:	8082                	ret

000000008001018e <illegal_except_2>:

bool illegal_except_2() {
    8001018e:	1101                	addi	sp,sp,-32

    TEST_START();
    80010190:	00020597          	auipc	a1,0x20
    80010194:	7f058593          	addi	a1,a1,2032 # 80030980 <__func__.13>
    80010198:	00022517          	auipc	a0,0x22
    8001019c:	53050513          	addi	a0,a0,1328 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_2() {
    800101a0:	ec06                	sd	ra,24(sp)
    800101a2:	e822                	sd	s0,16(sp)
    800101a4:	e426                	sd	s1,8(sp)
    TEST_START();
    800101a6:	31e1f0ef          	jal	8002f4c4 <printf>
    800101aa:	4529                	li	a0,10
    800101ac:	0061e0ef          	jal	8002e1b2 <putchar>


    //特殊情况，没有开启虚存，在S模式下访问Satp寄存器，但被sstatus.TVM拦截
    goto_priv(PRIV_M);
    800101b0:	4511                	li	a0,4
    800101b2:	d63f00ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    800101b6:	001007b7          	lui	a5,0x100
    800101ba:	3007a073          	csrs	mstatus,a5
    CSRW(satp, 0x0);    //关闭虚存
    800101be:	18005073          	csrwi	satp,0
    goto_priv(PRIV_HS);
    800101c2:	450d                	li	a0,3
    800101c4:	d51f00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800101c8:	c51f00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(satp);
    800101cc:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800101d0:	08c00593          	li	a1,140
    800101d4:	00026617          	auipc	a2,0x26
    800101d8:	84460613          	addi	a2,a2,-1980 # 80035a18 <__func__.0+0x3630>
    800101dc:	00022517          	auipc	a0,0x22
    800101e0:	50450513          	addi	a0,a0,1284 # 800326e0 <__func__.0+0x2f8>
    800101e4:	2e01f0ef          	jal	8002f4c4 <printf>
    800101e8:	0004c797          	auipc	a5,0x4c
    800101ec:	e297c783          	lbu	a5,-471(a5) # 8005c011 <excpt+0x1>
    800101f0:	0004c497          	auipc	s1,0x4c
    800101f4:	e2048493          	addi	s1,s1,-480 # 8005c010 <excpt>
    800101f8:	00022597          	auipc	a1,0x22
    800101fc:	4c058593          	addi	a1,a1,1216 # 800326b8 <__func__.0+0x2d0>
    80010200:	cf89                	beqz	a5,8001021a <illegal_except_2+0x8c>
    80010202:	6498                	ld	a4,8(s1)
    80010204:	4789                	li	a5,2
    80010206:	00022597          	auipc	a1,0x22
    8001020a:	4a258593          	addi	a1,a1,1186 # 800326a8 <__func__.0+0x2c0>
    8001020e:	00f70663          	beq	a4,a5,8001021a <illegal_except_2+0x8c>
    80010212:	00022597          	auipc	a1,0x22
    80010216:	4a658593          	addi	a1,a1,1190 # 800326b8 <__func__.0+0x2d0>
    8001021a:	00022517          	auipc	a0,0x22
    8001021e:	4de50513          	addi	a0,a0,1246 # 800326f8 <__func__.0+0x310>
    80010222:	2a21f0ef          	jal	8002f4c4 <printf>
    80010226:	0004c797          	auipc	a5,0x4c
    8001022a:	deb7c783          	lbu	a5,-533(a5) # 8005c011 <excpt+0x1>
    8001022e:	c789                	beqz	a5,80010238 <illegal_except_2+0xaa>
    80010230:	6498                	ld	a4,8(s1)
    80010232:	4789                	li	a5,2
    80010234:	00f70c63          	beq	a4,a5,8001024c <illegal_except_2+0xbe>
    80010238:	00022517          	auipc	a0,0x22
    8001023c:	4c850513          	addi	a0,a0,1224 # 80032700 <__func__.0+0x318>
    80010240:	2841f0ef          	jal	8002f4c4 <printf>
    80010244:	02900513          	li	a0,41
    80010248:	76b1d0ef          	jal	8002e1b2 <putchar>
    8001024c:	4529                	li	a0,10
    8001024e:	7651d0ef          	jal	8002e1b2 <putchar>
    80010252:	0004c417          	auipc	s0,0x4c
    80010256:	dbf44403          	lbu	s0,-577(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001025a:	00022597          	auipc	a1,0x22
    8001025e:	45e58593          	addi	a1,a1,1118 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010262:	cc11                	beqz	s0,8001027e <illegal_except_2+0xf0>
    80010264:	6498                	ld	a4,8(s1)
    80010266:	4789                	li	a5,2
    TEST_END();
    80010268:	00022597          	auipc	a1,0x22
    8001026c:	44058593          	addi	a1,a1,1088 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010270:	00f70763          	beq	a4,a5,8001027e <illegal_except_2+0xf0>
    80010274:	4401                	li	s0,0
    TEST_END();
    80010276:	00022597          	auipc	a1,0x22
    8001027a:	44258593          	addi	a1,a1,1090 # 800326b8 <__func__.0+0x2d0>
    8001027e:	00022517          	auipc	a0,0x22
    80010282:	4e250513          	addi	a0,a0,1250 # 80032760 <__func__.0+0x378>
    80010286:	23e1f0ef          	jal	8002f4c4 <printf>
    8001028a:	4511                	li	a0,4
    8001028c:	c89f00ef          	jal	80000f14 <goto_priv>
    80010290:	ce6f10ef          	jal	80001776 <reset_state>

}
    80010294:	60e2                	ld	ra,24(sp)
    80010296:	8522                	mv	a0,s0
    80010298:	6442                	ld	s0,16(sp)
    8001029a:	64a2                	ld	s1,8(sp)
    8001029c:	6105                	addi	sp,sp,32
    8001029e:	8082                	ret

00000000800102a0 <illegal_except_3>:

bool illegal_except_3() {
    800102a0:	1101                	addi	sp,sp,-32

    TEST_START();
    800102a2:	00020597          	auipc	a1,0x20
    800102a6:	6f658593          	addi	a1,a1,1782 # 80030998 <__func__.12>
    800102aa:	00022517          	auipc	a0,0x22
    800102ae:	41e50513          	addi	a0,a0,1054 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_3() {
    800102b2:	ec06                	sd	ra,24(sp)
    800102b4:	e822                	sd	s0,16(sp)
    800102b6:	e426                	sd	s1,8(sp)
    TEST_START();
    800102b8:	20c1f0ef          	jal	8002f4c4 <printf>
    800102bc:	4529                	li	a0,10
    800102be:	6f51d0ef          	jal	8002e1b2 <putchar>

    TEST_SETUP_EXCEPT();
    800102c2:	b57f00ef          	jal	80000e18 <test_setup_except_function>

    //执行CSR写指令尝试将非支持值写入WLRL字段时
    printf("%llx\n",CSRR(CSR_MCAUSE));
    800102c6:	342025f3          	csrr	a1,mcause
    800102ca:	00029517          	auipc	a0,0x29
    800102ce:	a3650513          	addi	a0,a0,-1482 # 80038d00 <__func__.0+0x6918>
    800102d2:	1f21f0ef          	jal	8002f4c4 <printf>
    CSRW(CSR_MCAUSE,0xfffffffff);     //不支持的值写入将不会写入，没报错
    800102d6:	57fd                	li	a5,-1
    800102d8:	83f1                	srli	a5,a5,0x1c
    800102da:	34279073          	csrw	mcause,a5
    printf("%llx\n",CSRR(CSR_MCAUSE));
    800102de:	342025f3          	csrr	a1,mcause
    800102e2:	00029517          	auipc	a0,0x29
    800102e6:	a1e50513          	addi	a0,a0,-1506 # 80038d00 <__func__.0+0x6918>
    800102ea:	1da1f0ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    800102ee:	08c00593          	li	a1,140
    800102f2:	00025617          	auipc	a2,0x25
    800102f6:	78660613          	addi	a2,a2,1926 # 80035a78 <__func__.0+0x3690>
    800102fa:	00022517          	auipc	a0,0x22
    800102fe:	3e650513          	addi	a0,a0,998 # 800326e0 <__func__.0+0x2f8>
    80010302:	1c21f0ef          	jal	8002f4c4 <printf>
    80010306:	0004c797          	auipc	a5,0x4c
    8001030a:	d0b7c783          	lbu	a5,-757(a5) # 8005c011 <excpt+0x1>
    8001030e:	0004c497          	auipc	s1,0x4c
    80010312:	d0248493          	addi	s1,s1,-766 # 8005c010 <excpt>
    80010316:	00022597          	auipc	a1,0x22
    8001031a:	3a258593          	addi	a1,a1,930 # 800326b8 <__func__.0+0x2d0>
    8001031e:	cf89                	beqz	a5,80010338 <illegal_except_3+0x98>
    80010320:	6498                	ld	a4,8(s1)
    80010322:	4789                	li	a5,2
    80010324:	00022597          	auipc	a1,0x22
    80010328:	38458593          	addi	a1,a1,900 # 800326a8 <__func__.0+0x2c0>
    8001032c:	00f70663          	beq	a4,a5,80010338 <illegal_except_3+0x98>
    80010330:	00022597          	auipc	a1,0x22
    80010334:	38858593          	addi	a1,a1,904 # 800326b8 <__func__.0+0x2d0>
    80010338:	00022517          	auipc	a0,0x22
    8001033c:	3c050513          	addi	a0,a0,960 # 800326f8 <__func__.0+0x310>
    80010340:	1841f0ef          	jal	8002f4c4 <printf>
    80010344:	0004c797          	auipc	a5,0x4c
    80010348:	ccd7c783          	lbu	a5,-819(a5) # 8005c011 <excpt+0x1>
    8001034c:	c789                	beqz	a5,80010356 <illegal_except_3+0xb6>
    8001034e:	6498                	ld	a4,8(s1)
    80010350:	4789                	li	a5,2
    80010352:	00f70c63          	beq	a4,a5,8001036a <illegal_except_3+0xca>
    80010356:	00022517          	auipc	a0,0x22
    8001035a:	3aa50513          	addi	a0,a0,938 # 80032700 <__func__.0+0x318>
    8001035e:	1661f0ef          	jal	8002f4c4 <printf>
    80010362:	02900513          	li	a0,41
    80010366:	64d1d0ef          	jal	8002e1b2 <putchar>
    8001036a:	4529                	li	a0,10
    8001036c:	6471d0ef          	jal	8002e1b2 <putchar>
    80010370:	0004c417          	auipc	s0,0x4c
    80010374:	ca144403          	lbu	s0,-863(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80010378:	00022597          	auipc	a1,0x22
    8001037c:	34058593          	addi	a1,a1,832 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010380:	cc11                	beqz	s0,8001039c <illegal_except_3+0xfc>
    80010382:	6498                	ld	a4,8(s1)
    80010384:	4789                	li	a5,2
    TEST_END();
    80010386:	00022597          	auipc	a1,0x22
    8001038a:	32258593          	addi	a1,a1,802 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    8001038e:	00f70763          	beq	a4,a5,8001039c <illegal_except_3+0xfc>
    80010392:	4401                	li	s0,0
    TEST_END();
    80010394:	00022597          	auipc	a1,0x22
    80010398:	32458593          	addi	a1,a1,804 # 800326b8 <__func__.0+0x2d0>
    8001039c:	00022517          	auipc	a0,0x22
    800103a0:	3c450513          	addi	a0,a0,964 # 80032760 <__func__.0+0x378>
    800103a4:	1201f0ef          	jal	8002f4c4 <printf>
    800103a8:	4511                	li	a0,4
    800103aa:	b6bf00ef          	jal	80000f14 <goto_priv>
    800103ae:	bc8f10ef          	jal	80001776 <reset_state>
}
    800103b2:	60e2                	ld	ra,24(sp)
    800103b4:	8522                	mv	a0,s0
    800103b6:	6442                	ld	s0,16(sp)
    800103b8:	64a2                	ld	s1,8(sp)
    800103ba:	6105                	addi	sp,sp,32
    800103bc:	8082                	ret

00000000800103be <illegal_except_4>:



bool illegal_except_4() {
    800103be:	1101                	addi	sp,sp,-32

    TEST_START();
    800103c0:	00020597          	auipc	a1,0x20
    800103c4:	5f058593          	addi	a1,a1,1520 # 800309b0 <__func__.11>
    800103c8:	00022517          	auipc	a0,0x22
    800103cc:	30050513          	addi	a0,a0,768 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_4() {
    800103d0:	ec06                	sd	ra,24(sp)
    800103d2:	e822                	sd	s0,16(sp)
    800103d4:	e426                	sd	s1,8(sp)
    800103d6:	e04a                	sd	s2,0(sp)
    TEST_START();
    800103d8:	0ec1f0ef          	jal	8002f4c4 <printf>
    800103dc:	4529                	li	a0,10
    800103de:	5d51d0ef          	jal	8002e1b2 <putchar>

    //M模式下可以访问任何CSR
    goto_priv(PRIV_M);
    800103e2:	4511                	li	a0,4
    800103e4:	b31f00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800103e8:	a31f00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_MCAUSE);
    800103ec:	342027f3          	csrr	a5,mcause
    CSRR(CSR_SCAUSE);
    800103f0:	142027f3          	csrr	a5,scause
    CSRR(CSR_VSCAUSE);
    800103f4:	242027f3          	csrr	a5,vscause
    TEST_ASSERT("m mode access any csr successful",
    800103f8:	08c00593          	li	a1,140
    800103fc:	00025617          	auipc	a2,0x25
    80010400:	6bc60613          	addi	a2,a2,1724 # 80035ab8 <__func__.0+0x36d0>
    80010404:	00022517          	auipc	a0,0x22
    80010408:	2dc50513          	addi	a0,a0,732 # 800326e0 <__func__.0+0x2f8>
    8001040c:	0b81f0ef          	jal	8002f4c4 <printf>
    80010410:	0004c797          	auipc	a5,0x4c
    80010414:	c017c783          	lbu	a5,-1023(a5) # 8005c011 <excpt+0x1>
    80010418:	00022597          	auipc	a1,0x22
    8001041c:	29058593          	addi	a1,a1,656 # 800326a8 <__func__.0+0x2c0>
    80010420:	c789                	beqz	a5,8001042a <illegal_except_4+0x6c>
    80010422:	00022597          	auipc	a1,0x22
    80010426:	29658593          	addi	a1,a1,662 # 800326b8 <__func__.0+0x2d0>
    8001042a:	00022517          	auipc	a0,0x22
    8001042e:	2ce50513          	addi	a0,a0,718 # 800326f8 <__func__.0+0x310>
    80010432:	0921f0ef          	jal	8002f4c4 <printf>
    80010436:	0004c797          	auipc	a5,0x4c
    8001043a:	bdb7c783          	lbu	a5,-1061(a5) # 8005c011 <excpt+0x1>
    8001043e:	18079e63          	bnez	a5,800105da <illegal_except_4+0x21c>
    80010442:	4529                	li	a0,10
    80010444:	56f1d0ef          	jal	8002e1b2 <putchar>
    80010448:	0004c917          	auipc	s2,0x4c
    8001044c:	bc994903          	lbu	s2,-1079(s2) # 8005c011 <excpt+0x1>
        excpt.triggered == false
    ); 

    reset_state();
    80010450:	b26f10ef          	jal	80001776 <reset_state>

    //尝试访问高特权级别的任何CSR
    goto_priv(PRIV_HS);
    80010454:	450d                	li	a0,3
    80010456:	abff00ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode access any csr successful",
    8001045a:	0004c417          	auipc	s0,0x4c
    8001045e:	bb640413          	addi	s0,s0,-1098 # 8005c010 <excpt>
    TEST_SETUP_EXCEPT();
    80010462:	9b7f00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_MCAUSE);
    80010466:	342027f3          	csrr	a5,mcause
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    8001046a:	08c00593          	li	a1,140
    8001046e:	00025617          	auipc	a2,0x25
    80010472:	67260613          	addi	a2,a2,1650 # 80035ae0 <__func__.0+0x36f8>
    80010476:	00022517          	auipc	a0,0x22
    8001047a:	26a50513          	addi	a0,a0,618 # 800326e0 <__func__.0+0x2f8>
    8001047e:	0461f0ef          	jal	8002f4c4 <printf>
    80010482:	0004c797          	auipc	a5,0x4c
    80010486:	b8f7c783          	lbu	a5,-1137(a5) # 8005c011 <excpt+0x1>
    8001048a:	00022597          	auipc	a1,0x22
    8001048e:	22e58593          	addi	a1,a1,558 # 800326b8 <__func__.0+0x2d0>
    80010492:	cf89                	beqz	a5,800104ac <illegal_except_4+0xee>
    80010494:	6418                	ld	a4,8(s0)
    80010496:	4789                	li	a5,2
    80010498:	00022597          	auipc	a1,0x22
    8001049c:	21058593          	addi	a1,a1,528 # 800326a8 <__func__.0+0x2c0>
    800104a0:	00f70663          	beq	a4,a5,800104ac <illegal_except_4+0xee>
    800104a4:	00022597          	auipc	a1,0x22
    800104a8:	21458593          	addi	a1,a1,532 # 800326b8 <__func__.0+0x2d0>
    800104ac:	00022517          	auipc	a0,0x22
    800104b0:	24c50513          	addi	a0,a0,588 # 800326f8 <__func__.0+0x310>
    800104b4:	0101f0ef          	jal	8002f4c4 <printf>
    800104b8:	0004c797          	auipc	a5,0x4c
    800104bc:	b597c783          	lbu	a5,-1191(a5) # 8005c011 <excpt+0x1>
    800104c0:	c789                	beqz	a5,800104ca <illegal_except_4+0x10c>
    800104c2:	6418                	ld	a4,8(s0)
    800104c4:	4789                	li	a5,2
    800104c6:	00f70c63          	beq	a4,a5,800104de <illegal_except_4+0x120>
    800104ca:	00022517          	auipc	a0,0x22
    800104ce:	23650513          	addi	a0,a0,566 # 80032700 <__func__.0+0x318>
    800104d2:	7f31e0ef          	jal	8002f4c4 <printf>
    800104d6:	02900513          	li	a0,41
    800104da:	4d91d0ef          	jal	8002e1b2 <putchar>
    800104de:	4529                	li	a0,10
    800104e0:	4d31d0ef          	jal	8002e1b2 <putchar>
    800104e4:	4481                	li	s1,0
    800104e6:	00091863          	bnez	s2,800104f6 <illegal_except_4+0x138>
    800104ea:	0004c797          	auipc	a5,0x4c
    800104ee:	b277c783          	lbu	a5,-1241(a5) # 8005c011 <excpt+0x1>
    800104f2:	0c079f63          	bnez	a5,800105d0 <illegal_except_4+0x212>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    ); 

    goto_priv(PRIV_VS);
    800104f6:	4509                	li	a0,2
    800104f8:	a1df00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800104fc:	91df00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_MIDELEG);
    80010500:	303027f3          	csrr	a5,mideleg
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80010504:	08c00593          	li	a1,140
    80010508:	00025617          	auipc	a2,0x25
    8001050c:	61060613          	addi	a2,a2,1552 # 80035b18 <__func__.0+0x3730>
    80010510:	00022517          	auipc	a0,0x22
    80010514:	1d050513          	addi	a0,a0,464 # 800326e0 <__func__.0+0x2f8>
    80010518:	7ad1e0ef          	jal	8002f4c4 <printf>
    8001051c:	0004c797          	auipc	a5,0x4c
    80010520:	af57c783          	lbu	a5,-1291(a5) # 8005c011 <excpt+0x1>
    80010524:	00022597          	auipc	a1,0x22
    80010528:	19458593          	addi	a1,a1,404 # 800326b8 <__func__.0+0x2d0>
    8001052c:	cf89                	beqz	a5,80010546 <illegal_except_4+0x188>
    8001052e:	6418                	ld	a4,8(s0)
    80010530:	4789                	li	a5,2
    80010532:	00022597          	auipc	a1,0x22
    80010536:	17658593          	addi	a1,a1,374 # 800326a8 <__func__.0+0x2c0>
    8001053a:	00f70663          	beq	a4,a5,80010546 <illegal_except_4+0x188>
    8001053e:	00022597          	auipc	a1,0x22
    80010542:	17a58593          	addi	a1,a1,378 # 800326b8 <__func__.0+0x2d0>
    80010546:	00022517          	auipc	a0,0x22
    8001054a:	1b250513          	addi	a0,a0,434 # 800326f8 <__func__.0+0x310>
    8001054e:	7771e0ef          	jal	8002f4c4 <printf>
    80010552:	0004c797          	auipc	a5,0x4c
    80010556:	abf7c783          	lbu	a5,-1345(a5) # 8005c011 <excpt+0x1>
    8001055a:	c789                	beqz	a5,80010564 <illegal_except_4+0x1a6>
    8001055c:	6418                	ld	a4,8(s0)
    8001055e:	4789                	li	a5,2
    80010560:	00f70c63          	beq	a4,a5,80010578 <illegal_except_4+0x1ba>
    80010564:	00022517          	auipc	a0,0x22
    80010568:	19c50513          	addi	a0,a0,412 # 80032700 <__func__.0+0x318>
    8001056c:	7591e0ef          	jal	8002f4c4 <printf>
    80010570:	02900513          	li	a0,41
    80010574:	43f1d0ef          	jal	8002e1b2 <putchar>
    80010578:	4529                	li	a0,10
    8001057a:	4391d0ef          	jal	8002e1b2 <putchar>
    8001057e:	c095                	beqz	s1,800105a2 <illegal_except_4+0x1e4>
    80010580:	0004c497          	auipc	s1,0x4c
    80010584:	a914c483          	lbu	s1,-1391(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    );

    TEST_END();
    80010588:	00022597          	auipc	a1,0x22
    8001058c:	13058593          	addi	a1,a1,304 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80010590:	cc91                	beqz	s1,800105ac <illegal_except_4+0x1ee>
    80010592:	6418                	ld	a4,8(s0)
    80010594:	4789                	li	a5,2
    TEST_END();
    80010596:	00022597          	auipc	a1,0x22
    8001059a:	11258593          	addi	a1,a1,274 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8001059e:	00f70763          	beq	a4,a5,800105ac <illegal_except_4+0x1ee>
    800105a2:	4481                	li	s1,0
    TEST_END();
    800105a4:	00022597          	auipc	a1,0x22
    800105a8:	11458593          	addi	a1,a1,276 # 800326b8 <__func__.0+0x2d0>
    800105ac:	00022517          	auipc	a0,0x22
    800105b0:	1b450513          	addi	a0,a0,436 # 80032760 <__func__.0+0x378>
    800105b4:	7111e0ef          	jal	8002f4c4 <printf>
    800105b8:	4511                	li	a0,4
    800105ba:	95bf00ef          	jal	80000f14 <goto_priv>
    800105be:	9b8f10ef          	jal	80001776 <reset_state>
}
    800105c2:	60e2                	ld	ra,24(sp)
    800105c4:	6442                	ld	s0,16(sp)
    800105c6:	6902                	ld	s2,0(sp)
    800105c8:	8526                	mv	a0,s1
    800105ca:	64a2                	ld	s1,8(sp)
    800105cc:	6105                	addi	sp,sp,32
    800105ce:	8082                	ret
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    800105d0:	6404                	ld	s1,8(s0)
    800105d2:	14f9                	addi	s1,s1,-2
    800105d4:	0014b493          	seqz	s1,s1
    800105d8:	bf39                	j	800104f6 <illegal_except_4+0x138>
    TEST_ASSERT("m mode access any csr successful",
    800105da:	00022517          	auipc	a0,0x22
    800105de:	12650513          	addi	a0,a0,294 # 80032700 <__func__.0+0x318>
    800105e2:	6e31e0ef          	jal	8002f4c4 <printf>
    800105e6:	02900513          	li	a0,41
    800105ea:	3c91d0ef          	jal	8002e1b2 <putchar>
    800105ee:	bd91                	j	80010442 <illegal_except_4+0x84>

00000000800105f0 <illegal_except_5>:
        excpt.cause==CAUSE_ILI
    );
*/


bool illegal_except_5() {
    800105f0:	1101                	addi	sp,sp,-32

    TEST_START();
    800105f2:	00020597          	auipc	a1,0x20
    800105f6:	3d658593          	addi	a1,a1,982 # 800309c8 <__func__.10>
    800105fa:	00022517          	auipc	a0,0x22
    800105fe:	0ce50513          	addi	a0,a0,206 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_5() {
    80010602:	ec06                	sd	ra,24(sp)
    80010604:	e822                	sd	s0,16(sp)
    80010606:	e426                	sd	s1,8(sp)
    TEST_START();
    80010608:	6bd1e0ef          	jal	8002f4c4 <printf>
    8001060c:	4529                	li	a0,10
    8001060e:	3a51d0ef          	jal	8002e1b2 <putchar>
    //TVM=1，在S模式下，读写satp 寄存器
    goto_priv(PRIV_M);
    80010612:	4511                	li	a0,4
    80010614:	901f00ef          	jal	80000f14 <goto_priv>
    CSRW(satp, 0x0);
    80010618:	18005073          	csrwi	satp,0
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8001061c:	001007b7          	lui	a5,0x100
    80010620:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010624:	450d                	li	a0,3
    80010626:	8eff00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001062a:	feef00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(satp);
    8001062e:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010632:	08c00593          	li	a1,140
    80010636:	00025617          	auipc	a2,0x25
    8001063a:	3e260613          	addi	a2,a2,994 # 80035a18 <__func__.0+0x3630>
    8001063e:	00022517          	auipc	a0,0x22
    80010642:	0a250513          	addi	a0,a0,162 # 800326e0 <__func__.0+0x2f8>
    80010646:	67f1e0ef          	jal	8002f4c4 <printf>
    8001064a:	0004c797          	auipc	a5,0x4c
    8001064e:	9c77c783          	lbu	a5,-1593(a5) # 8005c011 <excpt+0x1>
    80010652:	0004c497          	auipc	s1,0x4c
    80010656:	9be48493          	addi	s1,s1,-1602 # 8005c010 <excpt>
    8001065a:	00022597          	auipc	a1,0x22
    8001065e:	05e58593          	addi	a1,a1,94 # 800326b8 <__func__.0+0x2d0>
    80010662:	cf89                	beqz	a5,8001067c <illegal_except_5+0x8c>
    80010664:	6498                	ld	a4,8(s1)
    80010666:	4789                	li	a5,2
    80010668:	00022597          	auipc	a1,0x22
    8001066c:	04058593          	addi	a1,a1,64 # 800326a8 <__func__.0+0x2c0>
    80010670:	00f70663          	beq	a4,a5,8001067c <illegal_except_5+0x8c>
    80010674:	00022597          	auipc	a1,0x22
    80010678:	04458593          	addi	a1,a1,68 # 800326b8 <__func__.0+0x2d0>
    8001067c:	00022517          	auipc	a0,0x22
    80010680:	07c50513          	addi	a0,a0,124 # 800326f8 <__func__.0+0x310>
    80010684:	6411e0ef          	jal	8002f4c4 <printf>
    80010688:	0004c797          	auipc	a5,0x4c
    8001068c:	9897c783          	lbu	a5,-1655(a5) # 8005c011 <excpt+0x1>
    80010690:	c789                	beqz	a5,8001069a <illegal_except_5+0xaa>
    80010692:	6498                	ld	a4,8(s1)
    80010694:	4789                	li	a5,2
    80010696:	00f70c63          	beq	a4,a5,800106ae <illegal_except_5+0xbe>
    8001069a:	00022517          	auipc	a0,0x22
    8001069e:	06650513          	addi	a0,a0,102 # 80032700 <__func__.0+0x318>
    800106a2:	6231e0ef          	jal	8002f4c4 <printf>
    800106a6:	02900513          	li	a0,41
    800106aa:	3091d0ef          	jal	8002e1b2 <putchar>
    800106ae:	4529                	li	a0,10
    800106b0:	3031d0ef          	jal	8002e1b2 <putchar>
    800106b4:	0004c417          	auipc	s0,0x4c
    800106b8:	95d44403          	lbu	s0,-1699(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800106bc:	00022597          	auipc	a1,0x22
    800106c0:	ffc58593          	addi	a1,a1,-4 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800106c4:	cc11                	beqz	s0,800106e0 <illegal_except_5+0xf0>
    800106c6:	6498                	ld	a4,8(s1)
    800106c8:	4789                	li	a5,2
    TEST_END();
    800106ca:	00022597          	auipc	a1,0x22
    800106ce:	fde58593          	addi	a1,a1,-34 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800106d2:	00f70763          	beq	a4,a5,800106e0 <illegal_except_5+0xf0>
    800106d6:	4401                	li	s0,0
    TEST_END();
    800106d8:	00022597          	auipc	a1,0x22
    800106dc:	fe058593          	addi	a1,a1,-32 # 800326b8 <__func__.0+0x2d0>
    800106e0:	00022517          	auipc	a0,0x22
    800106e4:	08050513          	addi	a0,a0,128 # 80032760 <__func__.0+0x378>
    800106e8:	5dd1e0ef          	jal	8002f4c4 <printf>
    800106ec:	4511                	li	a0,4
    800106ee:	827f00ef          	jal	80000f14 <goto_priv>
    800106f2:	884f10ef          	jal	80001776 <reset_state>
}
    800106f6:	60e2                	ld	ra,24(sp)
    800106f8:	8522                	mv	a0,s0
    800106fa:	6442                	ld	s0,16(sp)
    800106fc:	64a2                	ld	s1,8(sp)
    800106fe:	6105                	addi	sp,sp,32
    80010700:	8082                	ret

0000000080010702 <illegal_except_6>:

bool illegal_except_6() {
    80010702:	1101                	addi	sp,sp,-32

    TEST_START();
    80010704:	00020597          	auipc	a1,0x20
    80010708:	2dc58593          	addi	a1,a1,732 # 800309e0 <__func__.9>
    8001070c:	00022517          	auipc	a0,0x22
    80010710:	fbc50513          	addi	a0,a0,-68 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_6() {
    80010714:	ec06                	sd	ra,24(sp)
    80010716:	e822                	sd	s0,16(sp)
    80010718:	e426                	sd	s1,8(sp)
    TEST_START();
    8001071a:	5ab1e0ef          	jal	8002f4c4 <printf>
    8001071e:	4529                	li	a0,10
    80010720:	2931d0ef          	jal	8002e1b2 <putchar>
    //当mstatus.TVM=1时，在HS模式下执行时尝试读取或写入hgatp
    goto_priv(PRIV_M);
    80010724:	4511                	li	a0,4
    80010726:	feef00ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8001072a:	001007b7          	lui	a5,0x100
    8001072e:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010732:	450d                	li	a0,3
    80010734:	fe0f00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010738:	ee0f00ef          	jal	80000e18 <test_setup_except_function>
    CSRW(CSR_HGATP,(uint64_t)-1);         //没报错
    8001073c:	57fd                	li	a5,-1
    8001073e:	68079073          	csrw	hgatp,a5
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    80010742:	08c00593          	li	a1,140
    80010746:	00025617          	auipc	a2,0x25
    8001074a:	40a60613          	addi	a2,a2,1034 # 80035b50 <__func__.0+0x3768>
    8001074e:	00022517          	auipc	a0,0x22
    80010752:	f9250513          	addi	a0,a0,-110 # 800326e0 <__func__.0+0x2f8>
    80010756:	56f1e0ef          	jal	8002f4c4 <printf>
    8001075a:	0004c797          	auipc	a5,0x4c
    8001075e:	8b77c783          	lbu	a5,-1865(a5) # 8005c011 <excpt+0x1>
    80010762:	0004c497          	auipc	s1,0x4c
    80010766:	8ae48493          	addi	s1,s1,-1874 # 8005c010 <excpt>
    8001076a:	00022597          	auipc	a1,0x22
    8001076e:	f4e58593          	addi	a1,a1,-178 # 800326b8 <__func__.0+0x2d0>
    80010772:	cf89                	beqz	a5,8001078c <illegal_except_6+0x8a>
    80010774:	6498                	ld	a4,8(s1)
    80010776:	4789                	li	a5,2
    80010778:	00022597          	auipc	a1,0x22
    8001077c:	f3058593          	addi	a1,a1,-208 # 800326a8 <__func__.0+0x2c0>
    80010780:	00f70663          	beq	a4,a5,8001078c <illegal_except_6+0x8a>
    80010784:	00022597          	auipc	a1,0x22
    80010788:	f3458593          	addi	a1,a1,-204 # 800326b8 <__func__.0+0x2d0>
    8001078c:	00022517          	auipc	a0,0x22
    80010790:	f6c50513          	addi	a0,a0,-148 # 800326f8 <__func__.0+0x310>
    80010794:	5311e0ef          	jal	8002f4c4 <printf>
    80010798:	0004c797          	auipc	a5,0x4c
    8001079c:	8797c783          	lbu	a5,-1927(a5) # 8005c011 <excpt+0x1>
    800107a0:	c789                	beqz	a5,800107aa <illegal_except_6+0xa8>
    800107a2:	6498                	ld	a4,8(s1)
    800107a4:	4789                	li	a5,2
    800107a6:	00f70c63          	beq	a4,a5,800107be <illegal_except_6+0xbc>
    800107aa:	00022517          	auipc	a0,0x22
    800107ae:	f5650513          	addi	a0,a0,-170 # 80032700 <__func__.0+0x318>
    800107b2:	5131e0ef          	jal	8002f4c4 <printf>
    800107b6:	02900513          	li	a0,41
    800107ba:	1f91d0ef          	jal	8002e1b2 <putchar>
    800107be:	4529                	li	a0,10
    800107c0:	1f31d0ef          	jal	8002e1b2 <putchar>
    800107c4:	0004c417          	auipc	s0,0x4c
    800107c8:	84d44403          	lbu	s0,-1971(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800107cc:	00022597          	auipc	a1,0x22
    800107d0:	eec58593          	addi	a1,a1,-276 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    800107d4:	cc11                	beqz	s0,800107f0 <illegal_except_6+0xee>
    800107d6:	6498                	ld	a4,8(s1)
    800107d8:	4789                	li	a5,2
    TEST_END();
    800107da:	00022597          	auipc	a1,0x22
    800107de:	ece58593          	addi	a1,a1,-306 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    800107e2:	00f70763          	beq	a4,a5,800107f0 <illegal_except_6+0xee>
    800107e6:	4401                	li	s0,0
    TEST_END();
    800107e8:	00022597          	auipc	a1,0x22
    800107ec:	ed058593          	addi	a1,a1,-304 # 800326b8 <__func__.0+0x2d0>
    800107f0:	00022517          	auipc	a0,0x22
    800107f4:	f7050513          	addi	a0,a0,-144 # 80032760 <__func__.0+0x378>
    800107f8:	4cd1e0ef          	jal	8002f4c4 <printf>
    800107fc:	4511                	li	a0,4
    800107fe:	f16f00ef          	jal	80000f14 <goto_priv>
    80010802:	f75f00ef          	jal	80001776 <reset_state>
}
    80010806:	60e2                	ld	ra,24(sp)
    80010808:	8522                	mv	a0,s0
    8001080a:	6442                	ld	s0,16(sp)
    8001080c:	64a2                	ld	s1,8(sp)
    8001080e:	6105                	addi	sp,sp,32
    80010810:	8082                	ret

0000000080010812 <illegal_except_7>:

bool illegal_except_7() {
    80010812:	1101                	addi	sp,sp,-32

    TEST_START();
    80010814:	00020597          	auipc	a1,0x20
    80010818:	1e458593          	addi	a1,a1,484 # 800309f8 <__func__.8>
    8001081c:	00022517          	auipc	a0,0x22
    80010820:	eac50513          	addi	a0,a0,-340 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_7() {
    80010824:	ec06                	sd	ra,24(sp)
    80010826:	e822                	sd	s0,16(sp)
    80010828:	e426                	sd	s1,8(sp)
    TEST_START();
    8001082a:	49b1e0ef          	jal	8002f4c4 <printf>
    8001082e:	4529                	li	a0,10
    80010830:	1831d0ef          	jal	8002e1b2 <putchar>

    //TVM=1，在S模式下，执行SFENCE.VMA或SINVAL.VMA指令
    goto_priv(PRIV_M);
    80010834:	4511                	li	a0,4
    80010836:	edef00ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8001083a:	001007b7          	lui	a5,0x100
    8001083e:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HSTATUS,HSTATUS_VTVM);
    80010842:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_HS); 
    80010846:	450d                	li	a0,3
    80010848:	eccf00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001084c:	dccf00ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80010850:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("s mode sfence.vma leads to ili when tvm=1",
    80010854:	08c00593          	li	a1,140
    80010858:	00025617          	auipc	a2,0x25
    8001085c:	36060613          	addi	a2,a2,864 # 80035bb8 <__func__.0+0x37d0>
    80010860:	00022517          	auipc	a0,0x22
    80010864:	e8050513          	addi	a0,a0,-384 # 800326e0 <__func__.0+0x2f8>
    80010868:	45d1e0ef          	jal	8002f4c4 <printf>
    8001086c:	0004b797          	auipc	a5,0x4b
    80010870:	7a57c783          	lbu	a5,1957(a5) # 8005c011 <excpt+0x1>
    80010874:	0004b497          	auipc	s1,0x4b
    80010878:	79c48493          	addi	s1,s1,1948 # 8005c010 <excpt>
    8001087c:	00022597          	auipc	a1,0x22
    80010880:	e3c58593          	addi	a1,a1,-452 # 800326b8 <__func__.0+0x2d0>
    80010884:	cf89                	beqz	a5,8001089e <illegal_except_7+0x8c>
    80010886:	6498                	ld	a4,8(s1)
    80010888:	4789                	li	a5,2
    8001088a:	00022597          	auipc	a1,0x22
    8001088e:	e1e58593          	addi	a1,a1,-482 # 800326a8 <__func__.0+0x2c0>
    80010892:	00f70663          	beq	a4,a5,8001089e <illegal_except_7+0x8c>
    80010896:	00022597          	auipc	a1,0x22
    8001089a:	e2258593          	addi	a1,a1,-478 # 800326b8 <__func__.0+0x2d0>
    8001089e:	00022517          	auipc	a0,0x22
    800108a2:	e5a50513          	addi	a0,a0,-422 # 800326f8 <__func__.0+0x310>
    800108a6:	41f1e0ef          	jal	8002f4c4 <printf>
    800108aa:	0004b797          	auipc	a5,0x4b
    800108ae:	7677c783          	lbu	a5,1895(a5) # 8005c011 <excpt+0x1>
    800108b2:	c789                	beqz	a5,800108bc <illegal_except_7+0xaa>
    800108b4:	6498                	ld	a4,8(s1)
    800108b6:	4789                	li	a5,2
    800108b8:	00f70c63          	beq	a4,a5,800108d0 <illegal_except_7+0xbe>
    800108bc:	00022517          	auipc	a0,0x22
    800108c0:	e4450513          	addi	a0,a0,-444 # 80032700 <__func__.0+0x318>
    800108c4:	4011e0ef          	jal	8002f4c4 <printf>
    800108c8:	02900513          	li	a0,41
    800108cc:	0e71d0ef          	jal	8002e1b2 <putchar>
    800108d0:	4529                	li	a0,10
    800108d2:	0e11d0ef          	jal	8002e1b2 <putchar>
    800108d6:	0004b797          	auipc	a5,0x4b
    800108da:	73b7c783          	lbu	a5,1851(a5) # 8005c011 <excpt+0x1>
    800108de:	4401                	li	s0,0
    800108e0:	c789                	beqz	a5,800108ea <illegal_except_7+0xd8>
    800108e2:	6480                	ld	s0,8(s1)
    800108e4:	1479                	addi	s0,s0,-2
    800108e6:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    800108ea:	450d                	li	a0,3
    800108ec:	e28f00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800108f0:	d28f00ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    800108f4:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    800108f8:	08c00593          	li	a1,140
    800108fc:	00025617          	auipc	a2,0x25
    80010900:	2ec60613          	addi	a2,a2,748 # 80035be8 <__func__.0+0x3800>
    80010904:	00022517          	auipc	a0,0x22
    80010908:	ddc50513          	addi	a0,a0,-548 # 800326e0 <__func__.0+0x2f8>
    8001090c:	3b91e0ef          	jal	8002f4c4 <printf>
    80010910:	0004b797          	auipc	a5,0x4b
    80010914:	7017c783          	lbu	a5,1793(a5) # 8005c011 <excpt+0x1>
    80010918:	00022597          	auipc	a1,0x22
    8001091c:	da058593          	addi	a1,a1,-608 # 800326b8 <__func__.0+0x2d0>
    80010920:	cf89                	beqz	a5,8001093a <illegal_except_7+0x128>
    80010922:	6498                	ld	a4,8(s1)
    80010924:	4789                	li	a5,2
    80010926:	00022597          	auipc	a1,0x22
    8001092a:	d8258593          	addi	a1,a1,-638 # 800326a8 <__func__.0+0x2c0>
    8001092e:	00f70663          	beq	a4,a5,8001093a <illegal_except_7+0x128>
    80010932:	00022597          	auipc	a1,0x22
    80010936:	d8658593          	addi	a1,a1,-634 # 800326b8 <__func__.0+0x2d0>
    8001093a:	00022517          	auipc	a0,0x22
    8001093e:	dbe50513          	addi	a0,a0,-578 # 800326f8 <__func__.0+0x310>
    80010942:	3831e0ef          	jal	8002f4c4 <printf>
    80010946:	0004b797          	auipc	a5,0x4b
    8001094a:	6cb7c783          	lbu	a5,1739(a5) # 8005c011 <excpt+0x1>
    8001094e:	c789                	beqz	a5,80010958 <illegal_except_7+0x146>
    80010950:	6498                	ld	a4,8(s1)
    80010952:	4789                	li	a5,2
    80010954:	00f70c63          	beq	a4,a5,8001096c <illegal_except_7+0x15a>
    80010958:	00022517          	auipc	a0,0x22
    8001095c:	da850513          	addi	a0,a0,-600 # 80032700 <__func__.0+0x318>
    80010960:	3651e0ef          	jal	8002f4c4 <printf>
    80010964:	02900513          	li	a0,41
    80010968:	04b1d0ef          	jal	8002e1b2 <putchar>
    8001096c:	4529                	li	a0,10
    8001096e:	0451d0ef          	jal	8002e1b2 <putchar>
    80010972:	c015                	beqz	s0,80010996 <illegal_except_7+0x184>
    80010974:	0004b417          	auipc	s0,0x4b
    80010978:	69d44403          	lbu	s0,1693(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001097c:	00022597          	auipc	a1,0x22
    80010980:	d3c58593          	addi	a1,a1,-708 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    80010984:	cc11                	beqz	s0,800109a0 <illegal_except_7+0x18e>
    80010986:	6498                	ld	a4,8(s1)
    80010988:	4789                	li	a5,2
    TEST_END();
    8001098a:	00022597          	auipc	a1,0x22
    8001098e:	d1e58593          	addi	a1,a1,-738 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    80010992:	00f70763          	beq	a4,a5,800109a0 <illegal_except_7+0x18e>
    80010996:	4401                	li	s0,0
    TEST_END();
    80010998:	00022597          	auipc	a1,0x22
    8001099c:	d2058593          	addi	a1,a1,-736 # 800326b8 <__func__.0+0x2d0>
    800109a0:	00022517          	auipc	a0,0x22
    800109a4:	dc050513          	addi	a0,a0,-576 # 80032760 <__func__.0+0x378>
    800109a8:	31d1e0ef          	jal	8002f4c4 <printf>
    800109ac:	4511                	li	a0,4
    800109ae:	d66f00ef          	jal	80000f14 <goto_priv>
    800109b2:	dc5f00ef          	jal	80001776 <reset_state>
}
    800109b6:	60e2                	ld	ra,24(sp)
    800109b8:	8522                	mv	a0,s0
    800109ba:	6442                	ld	s0,16(sp)
    800109bc:	64a2                	ld	s1,8(sp)
    800109be:	6105                	addi	sp,sp,32
    800109c0:	8082                	ret

00000000800109c2 <illegal_except_8>:


bool illegal_except_8() {
    800109c2:	1141                	addi	sp,sp,-16

    TEST_START();
    800109c4:	00020597          	auipc	a1,0x20
    800109c8:	04c58593          	addi	a1,a1,76 # 80030a10 <__func__.7>
    800109cc:	00022517          	auipc	a0,0x22
    800109d0:	cfc50513          	addi	a0,a0,-772 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_8() {
    800109d4:	e406                	sd	ra,8(sp)
    800109d6:	e022                	sd	s0,0(sp)
    TEST_START();
    800109d8:	2ed1e0ef          	jal	8002f4c4 <printf>
    800109dc:	4529                	li	a0,10
    800109de:	7d41d0ef          	jal	8002e1b2 <putchar>
    //M模式下（无论mstatus.TVM的值如何）执行HFENCE.GVMA
    goto_priv(PRIV_M);
    800109e2:	4511                	li	a0,4
    800109e4:	d30f00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800109e8:	c30f00ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    800109ec:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("m mode hfence.gvma successful",
    800109f0:	08c00593          	li	a1,140
    800109f4:	00025617          	auipc	a2,0x25
    800109f8:	22460613          	addi	a2,a2,548 # 80035c18 <__func__.0+0x3830>
    800109fc:	00022517          	auipc	a0,0x22
    80010a00:	ce450513          	addi	a0,a0,-796 # 800326e0 <__func__.0+0x2f8>
    80010a04:	2c11e0ef          	jal	8002f4c4 <printf>
    80010a08:	0004b797          	auipc	a5,0x4b
    80010a0c:	6097c783          	lbu	a5,1545(a5) # 8005c011 <excpt+0x1>
    80010a10:	00022597          	auipc	a1,0x22
    80010a14:	c9858593          	addi	a1,a1,-872 # 800326a8 <__func__.0+0x2c0>
    80010a18:	c789                	beqz	a5,80010a22 <illegal_except_8+0x60>
    80010a1a:	00022597          	auipc	a1,0x22
    80010a1e:	c9e58593          	addi	a1,a1,-866 # 800326b8 <__func__.0+0x2d0>
    80010a22:	00022517          	auipc	a0,0x22
    80010a26:	cd650513          	addi	a0,a0,-810 # 800326f8 <__func__.0+0x310>
    80010a2a:	29b1e0ef          	jal	8002f4c4 <printf>
    80010a2e:	0004b797          	auipc	a5,0x4b
    80010a32:	5e37c783          	lbu	a5,1507(a5) # 8005c011 <excpt+0x1>
    80010a36:	e7a1                	bnez	a5,80010a7e <illegal_except_8+0xbc>
    80010a38:	4529                	li	a0,10
    80010a3a:	7781d0ef          	jal	8002e1b2 <putchar>
    80010a3e:	0004b797          	auipc	a5,0x4b
    80010a42:	5d37c783          	lbu	a5,1491(a5) # 8005c011 <excpt+0x1>
    80010a46:	e795                	bnez	a5,80010a72 <illegal_except_8+0xb0>
    80010a48:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80010a4a:	00022597          	auipc	a1,0x22
    80010a4e:	c5e58593          	addi	a1,a1,-930 # 800326a8 <__func__.0+0x2c0>
    80010a52:	00022517          	auipc	a0,0x22
    80010a56:	d0e50513          	addi	a0,a0,-754 # 80032760 <__func__.0+0x378>
    80010a5a:	26b1e0ef          	jal	8002f4c4 <printf>
    80010a5e:	4511                	li	a0,4
    80010a60:	cb4f00ef          	jal	80000f14 <goto_priv>
    80010a64:	d13f00ef          	jal	80001776 <reset_state>
}
    80010a68:	60a2                	ld	ra,8(sp)
    80010a6a:	8522                	mv	a0,s0
    80010a6c:	6402                	ld	s0,0(sp)
    80010a6e:	0141                	addi	sp,sp,16
    80010a70:	8082                	ret
    TEST_ASSERT("m mode hfence.gvma successful",
    80010a72:	4401                	li	s0,0
    TEST_END();
    80010a74:	00022597          	auipc	a1,0x22
    80010a78:	c4458593          	addi	a1,a1,-956 # 800326b8 <__func__.0+0x2d0>
    80010a7c:	bfd9                	j	80010a52 <illegal_except_8+0x90>
    TEST_ASSERT("m mode hfence.gvma successful",
    80010a7e:	00022517          	auipc	a0,0x22
    80010a82:	c8250513          	addi	a0,a0,-894 # 80032700 <__func__.0+0x318>
    80010a86:	23f1e0ef          	jal	8002f4c4 <printf>
    80010a8a:	02900513          	li	a0,41
    80010a8e:	7241d0ef          	jal	8002e1b2 <putchar>
    80010a92:	b75d                	j	80010a38 <illegal_except_8+0x76>

0000000080010a94 <illegal_except_9>:

bool illegal_except_9() {
    80010a94:	1101                	addi	sp,sp,-32

    TEST_START();
    80010a96:	00020597          	auipc	a1,0x20
    80010a9a:	f9258593          	addi	a1,a1,-110 # 80030a28 <__func__.6>
    80010a9e:	00022517          	auipc	a0,0x22
    80010aa2:	c2a50513          	addi	a0,a0,-982 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_9() {
    80010aa6:	ec06                	sd	ra,24(sp)
    80010aa8:	e822                	sd	s0,16(sp)
    80010aaa:	e426                	sd	s1,8(sp)
    TEST_START();
    80010aac:	2191e0ef          	jal	8002f4c4 <printf>
    80010ab0:	4529                	li	a0,10
    80010ab2:	7001d0ef          	jal	8002e1b2 <putchar>
    //HS模式下mstatus.TVM=0时执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010ab6:	4511                	li	a0,4
    80010ab8:	c5cf00ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TVM);
    80010abc:	001007b7          	lui	a5,0x100
    80010ac0:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    80010ac4:	450d                	li	a0,3
    80010ac6:	c4ef00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010aca:	b4ef00ef          	jal	80000e18 <test_setup_except_function>
    80010ace:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010ad2:	08c00593          	li	a1,140
    80010ad6:	00025617          	auipc	a2,0x25
    80010ada:	16260613          	addi	a2,a2,354 # 80035c38 <__func__.0+0x3850>
    80010ade:	00022517          	auipc	a0,0x22
    80010ae2:	c0250513          	addi	a0,a0,-1022 # 800326e0 <__func__.0+0x2f8>
    80010ae6:	1df1e0ef          	jal	8002f4c4 <printf>
    80010aea:	0004b797          	auipc	a5,0x4b
    80010aee:	5277c783          	lbu	a5,1319(a5) # 8005c011 <excpt+0x1>
    80010af2:	00022597          	auipc	a1,0x22
    80010af6:	bb658593          	addi	a1,a1,-1098 # 800326a8 <__func__.0+0x2c0>
    80010afa:	c789                	beqz	a5,80010b04 <illegal_except_9+0x70>
    80010afc:	00022597          	auipc	a1,0x22
    80010b00:	bbc58593          	addi	a1,a1,-1092 # 800326b8 <__func__.0+0x2d0>
    80010b04:	00022517          	auipc	a0,0x22
    80010b08:	bf450513          	addi	a0,a0,-1036 # 800326f8 <__func__.0+0x310>
    80010b0c:	1b91e0ef          	jal	8002f4c4 <printf>
    80010b10:	0004b797          	auipc	a5,0x4b
    80010b14:	5017c783          	lbu	a5,1281(a5) # 8005c011 <excpt+0x1>
    80010b18:	10079063          	bnez	a5,80010c18 <illegal_except_9+0x184>
    80010b1c:	4529                	li	a0,10
    80010b1e:	6941d0ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    ); 

    //mstatus.TVM=1时，在HS模式下执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010b22:	4511                	li	a0,4
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010b24:	0004b417          	auipc	s0,0x4b
    80010b28:	4ed44403          	lbu	s0,1261(s0) # 8005c011 <excpt+0x1>
    goto_priv(PRIV_M);
    80010b2c:	be8f00ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010b30:	0004b497          	auipc	s1,0x4b
    80010b34:	4e048493          	addi	s1,s1,1248 # 8005c010 <excpt>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010b38:	001007b7          	lui	a5,0x100
    80010b3c:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010b40:	450d                	li	a0,3
    80010b42:	bd2f00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010b46:	ad2f00ef          	jal	80000e18 <test_setup_except_function>
    80010b4a:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010b4e:	08c00593          	li	a1,140
    80010b52:	00025617          	auipc	a2,0x25
    80010b56:	11e60613          	addi	a2,a2,286 # 80035c70 <__func__.0+0x3888>
    80010b5a:	00022517          	auipc	a0,0x22
    80010b5e:	b8650513          	addi	a0,a0,-1146 # 800326e0 <__func__.0+0x2f8>
    80010b62:	1631e0ef          	jal	8002f4c4 <printf>
    80010b66:	0004b797          	auipc	a5,0x4b
    80010b6a:	4ab7c783          	lbu	a5,1195(a5) # 8005c011 <excpt+0x1>
    80010b6e:	00022597          	auipc	a1,0x22
    80010b72:	b4a58593          	addi	a1,a1,-1206 # 800326b8 <__func__.0+0x2d0>
    80010b76:	cf89                	beqz	a5,80010b90 <illegal_except_9+0xfc>
    80010b78:	6498                	ld	a4,8(s1)
    80010b7a:	4789                	li	a5,2
    80010b7c:	00022597          	auipc	a1,0x22
    80010b80:	b2c58593          	addi	a1,a1,-1236 # 800326a8 <__func__.0+0x2c0>
    80010b84:	00f70663          	beq	a4,a5,80010b90 <illegal_except_9+0xfc>
    80010b88:	00022597          	auipc	a1,0x22
    80010b8c:	b3058593          	addi	a1,a1,-1232 # 800326b8 <__func__.0+0x2d0>
    80010b90:	00022517          	auipc	a0,0x22
    80010b94:	b6850513          	addi	a0,a0,-1176 # 800326f8 <__func__.0+0x310>
    80010b98:	12d1e0ef          	jal	8002f4c4 <printf>
    80010b9c:	0004b797          	auipc	a5,0x4b
    80010ba0:	4757c783          	lbu	a5,1141(a5) # 8005c011 <excpt+0x1>
    80010ba4:	c789                	beqz	a5,80010bae <illegal_except_9+0x11a>
    80010ba6:	6498                	ld	a4,8(s1)
    80010ba8:	4789                	li	a5,2
    80010baa:	00f70c63          	beq	a4,a5,80010bc2 <illegal_except_9+0x12e>
    80010bae:	00022517          	auipc	a0,0x22
    80010bb2:	b5250513          	addi	a0,a0,-1198 # 80032700 <__func__.0+0x318>
    80010bb6:	10f1e0ef          	jal	8002f4c4 <printf>
    80010bba:	02900513          	li	a0,41
    80010bbe:	5f41d0ef          	jal	8002e1b2 <putchar>
    80010bc2:	4529                	li	a0,10
    80010bc4:	5ee1d0ef          	jal	8002e1b2 <putchar>
    80010bc8:	e015                	bnez	s0,80010bec <illegal_except_9+0x158>
    80010bca:	0004b417          	auipc	s0,0x4b
    80010bce:	44744403          	lbu	s0,1095(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010bd2:	00022597          	auipc	a1,0x22
    80010bd6:	ae658593          	addi	a1,a1,-1306 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010bda:	cc11                	beqz	s0,80010bf6 <illegal_except_9+0x162>
    80010bdc:	6498                	ld	a4,8(s1)
    80010bde:	4789                	li	a5,2
    TEST_END();
    80010be0:	00022597          	auipc	a1,0x22
    80010be4:	ac858593          	addi	a1,a1,-1336 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010be8:	00f70763          	beq	a4,a5,80010bf6 <illegal_except_9+0x162>
    80010bec:	4401                	li	s0,0
    TEST_END();
    80010bee:	00022597          	auipc	a1,0x22
    80010bf2:	aca58593          	addi	a1,a1,-1334 # 800326b8 <__func__.0+0x2d0>
    80010bf6:	00022517          	auipc	a0,0x22
    80010bfa:	b6a50513          	addi	a0,a0,-1174 # 80032760 <__func__.0+0x378>
    80010bfe:	0c71e0ef          	jal	8002f4c4 <printf>
    80010c02:	4511                	li	a0,4
    80010c04:	b10f00ef          	jal	80000f14 <goto_priv>
    80010c08:	b6ff00ef          	jal	80001776 <reset_state>
}
    80010c0c:	60e2                	ld	ra,24(sp)
    80010c0e:	8522                	mv	a0,s0
    80010c10:	6442                	ld	s0,16(sp)
    80010c12:	64a2                	ld	s1,8(sp)
    80010c14:	6105                	addi	sp,sp,32
    80010c16:	8082                	ret
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010c18:	00022517          	auipc	a0,0x22
    80010c1c:	ae850513          	addi	a0,a0,-1304 # 80032700 <__func__.0+0x318>
    80010c20:	0a51e0ef          	jal	8002f4c4 <printf>
    80010c24:	02900513          	li	a0,41
    80010c28:	58a1d0ef          	jal	8002e1b2 <putchar>
    80010c2c:	bdc5                	j	80010b1c <illegal_except_9+0x88>

0000000080010c2e <illegal_except_10>:

bool illegal_except_10() {
    80010c2e:	1101                	addi	sp,sp,-32

    TEST_START();
    80010c30:	00020597          	auipc	a1,0x20
    80010c34:	e1058593          	addi	a1,a1,-496 # 80030a40 <__func__.5>
    80010c38:	00022517          	auipc	a0,0x22
    80010c3c:	a9050513          	addi	a0,a0,-1392 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_10() {
    80010c40:	ec06                	sd	ra,24(sp)
    80010c42:	e822                	sd	s0,16(sp)
    80010c44:	e426                	sd	s1,8(sp)
    TEST_START();
    80010c46:	07f1e0ef          	jal	8002f4c4 <printf>
    80010c4a:	4529                	li	a0,10
    80010c4c:	5661d0ef          	jal	8002e1b2 <putchar>
    
    //mstatus.TVM=1，尝试在S模式或HS模式下执行SINVAL.VMA或HINVAL.GVMA
    goto_priv(PRIV_M);
    80010c50:	4511                	li	a0,4
    80010c52:	ac2f00ef          	jal	80000f14 <goto_priv>
    reset_state();
    80010c56:	b21f00ef          	jal	80001776 <reset_state>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010c5a:	001007b7          	lui	a5,0x100
    80010c5e:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010c62:	450d                	li	a0,3
    80010c64:	ab0f00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010c68:	9b0f00ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80010c6c:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hs mode sinval.vma successful when mstatus.tvm=1",
    80010c70:	08c00593          	li	a1,140
    80010c74:	00025617          	auipc	a2,0x25
    80010c78:	03460613          	addi	a2,a2,52 # 80035ca8 <__func__.0+0x38c0>
    80010c7c:	00022517          	auipc	a0,0x22
    80010c80:	a6450513          	addi	a0,a0,-1436 # 800326e0 <__func__.0+0x2f8>
    80010c84:	0411e0ef          	jal	8002f4c4 <printf>
    80010c88:	0004b797          	auipc	a5,0x4b
    80010c8c:	3897c783          	lbu	a5,905(a5) # 8005c011 <excpt+0x1>
    80010c90:	0004b497          	auipc	s1,0x4b
    80010c94:	38048493          	addi	s1,s1,896 # 8005c010 <excpt>
    80010c98:	00022597          	auipc	a1,0x22
    80010c9c:	a2058593          	addi	a1,a1,-1504 # 800326b8 <__func__.0+0x2d0>
    80010ca0:	cf89                	beqz	a5,80010cba <illegal_except_10+0x8c>
    80010ca2:	6498                	ld	a4,8(s1)
    80010ca4:	4789                	li	a5,2
    80010ca6:	00022597          	auipc	a1,0x22
    80010caa:	a0258593          	addi	a1,a1,-1534 # 800326a8 <__func__.0+0x2c0>
    80010cae:	00f70663          	beq	a4,a5,80010cba <illegal_except_10+0x8c>
    80010cb2:	00022597          	auipc	a1,0x22
    80010cb6:	a0658593          	addi	a1,a1,-1530 # 800326b8 <__func__.0+0x2d0>
    80010cba:	00022517          	auipc	a0,0x22
    80010cbe:	a3e50513          	addi	a0,a0,-1474 # 800326f8 <__func__.0+0x310>
    80010cc2:	0031e0ef          	jal	8002f4c4 <printf>
    80010cc6:	0004b797          	auipc	a5,0x4b
    80010cca:	34b7c783          	lbu	a5,843(a5) # 8005c011 <excpt+0x1>
    80010cce:	c789                	beqz	a5,80010cd8 <illegal_except_10+0xaa>
    80010cd0:	6498                	ld	a4,8(s1)
    80010cd2:	4789                	li	a5,2
    80010cd4:	00f70c63          	beq	a4,a5,80010cec <illegal_except_10+0xbe>
    80010cd8:	00022517          	auipc	a0,0x22
    80010cdc:	a2850513          	addi	a0,a0,-1496 # 80032700 <__func__.0+0x318>
    80010ce0:	7e41e0ef          	jal	8002f4c4 <printf>
    80010ce4:	02900513          	li	a0,41
    80010ce8:	4ca1d0ef          	jal	8002e1b2 <putchar>
    80010cec:	4529                	li	a0,10
    80010cee:	4c41d0ef          	jal	8002e1b2 <putchar>
    80010cf2:	0004b797          	auipc	a5,0x4b
    80010cf6:	31f7c783          	lbu	a5,799(a5) # 8005c011 <excpt+0x1>
    80010cfa:	4401                	li	s0,0
    80010cfc:	c789                	beqz	a5,80010d06 <illegal_except_10+0xd8>
    80010cfe:	6480                	ld	s0,8(s1)
    80010d00:	1479                	addi	s0,s0,-2
    80010d02:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_M);
    80010d06:	4511                	li	a0,4
    80010d08:	a0cf00ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010d0c:	001007b7          	lui	a5,0x100
    80010d10:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010d14:	450d                	li	a0,3
    80010d16:	9fef00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010d1a:	8fef00ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80010d1e:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010d22:	08c00593          	li	a1,140
    80010d26:	00025617          	auipc	a2,0x25
    80010d2a:	fba60613          	addi	a2,a2,-70 # 80035ce0 <__func__.0+0x38f8>
    80010d2e:	00022517          	auipc	a0,0x22
    80010d32:	9b250513          	addi	a0,a0,-1614 # 800326e0 <__func__.0+0x2f8>
    80010d36:	78e1e0ef          	jal	8002f4c4 <printf>
    80010d3a:	0004b797          	auipc	a5,0x4b
    80010d3e:	2d77c783          	lbu	a5,727(a5) # 8005c011 <excpt+0x1>
    80010d42:	00022597          	auipc	a1,0x22
    80010d46:	97658593          	addi	a1,a1,-1674 # 800326b8 <__func__.0+0x2d0>
    80010d4a:	cf89                	beqz	a5,80010d64 <illegal_except_10+0x136>
    80010d4c:	6498                	ld	a4,8(s1)
    80010d4e:	4789                	li	a5,2
    80010d50:	00022597          	auipc	a1,0x22
    80010d54:	95858593          	addi	a1,a1,-1704 # 800326a8 <__func__.0+0x2c0>
    80010d58:	00f70663          	beq	a4,a5,80010d64 <illegal_except_10+0x136>
    80010d5c:	00022597          	auipc	a1,0x22
    80010d60:	95c58593          	addi	a1,a1,-1700 # 800326b8 <__func__.0+0x2d0>
    80010d64:	00022517          	auipc	a0,0x22
    80010d68:	99450513          	addi	a0,a0,-1644 # 800326f8 <__func__.0+0x310>
    80010d6c:	7581e0ef          	jal	8002f4c4 <printf>
    80010d70:	0004b797          	auipc	a5,0x4b
    80010d74:	2a17c783          	lbu	a5,673(a5) # 8005c011 <excpt+0x1>
    80010d78:	c789                	beqz	a5,80010d82 <illegal_except_10+0x154>
    80010d7a:	6498                	ld	a4,8(s1)
    80010d7c:	4789                	li	a5,2
    80010d7e:	00f70c63          	beq	a4,a5,80010d96 <illegal_except_10+0x168>
    80010d82:	00022517          	auipc	a0,0x22
    80010d86:	97e50513          	addi	a0,a0,-1666 # 80032700 <__func__.0+0x318>
    80010d8a:	73a1e0ef          	jal	8002f4c4 <printf>
    80010d8e:	02900513          	li	a0,41
    80010d92:	4201d0ef          	jal	8002e1b2 <putchar>
    80010d96:	4529                	li	a0,10
    80010d98:	41a1d0ef          	jal	8002e1b2 <putchar>
    80010d9c:	c015                	beqz	s0,80010dc0 <illegal_except_10+0x192>
    80010d9e:	0004b417          	auipc	s0,0x4b
    80010da2:	27344403          	lbu	s0,627(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010da6:	00022597          	auipc	a1,0x22
    80010daa:	91258593          	addi	a1,a1,-1774 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010dae:	cc11                	beqz	s0,80010dca <illegal_except_10+0x19c>
    80010db0:	6498                	ld	a4,8(s1)
    80010db2:	4789                	li	a5,2
    TEST_END();
    80010db4:	00022597          	auipc	a1,0x22
    80010db8:	8f458593          	addi	a1,a1,-1804 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010dbc:	00f70763          	beq	a4,a5,80010dca <illegal_except_10+0x19c>
    80010dc0:	4401                	li	s0,0
    TEST_END();
    80010dc2:	00022597          	auipc	a1,0x22
    80010dc6:	8f658593          	addi	a1,a1,-1802 # 800326b8 <__func__.0+0x2d0>
    80010dca:	00022517          	auipc	a0,0x22
    80010dce:	99650513          	addi	a0,a0,-1642 # 80032760 <__func__.0+0x378>
    80010dd2:	6f21e0ef          	jal	8002f4c4 <printf>
    80010dd6:	4511                	li	a0,4
    80010dd8:	93cf00ef          	jal	80000f14 <goto_priv>
    80010ddc:	99bf00ef          	jal	80001776 <reset_state>
}
    80010de0:	60e2                	ld	ra,24(sp)
    80010de2:	8522                	mv	a0,s0
    80010de4:	6442                	ld	s0,16(sp)
    80010de6:	64a2                	ld	s1,8(sp)
    80010de8:	6105                	addi	sp,sp,32
    80010dea:	8082                	ret

0000000080010dec <illegal_except_11>:

bool illegal_except_11() {
    80010dec:	1101                	addi	sp,sp,-32

    TEST_START();
    80010dee:	00020597          	auipc	a1,0x20
    80010df2:	c6a58593          	addi	a1,a1,-918 # 80030a58 <__func__.4>
    80010df6:	00022517          	auipc	a0,0x22
    80010dfa:	8d250513          	addi	a0,a0,-1838 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_11() {
    80010dfe:	ec06                	sd	ra,24(sp)
    80010e00:	e822                	sd	s0,16(sp)
    80010e02:	e426                	sd	s1,8(sp)
    TEST_START();
    80010e04:	6c01e0ef          	jal	8002f4c4 <printf>
    80010e08:	4529                	li	a0,10
    80010e0a:	3a81d0ef          	jal	8002e1b2 <putchar>

    //U模式下，执行HFENCE.VVMA或HFENCE.GVMA
    TEST_SETUP_EXCEPT();
    80010e0e:	80af00ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80010e12:	4511                	li	a0,4
    80010e14:	900f00ef          	jal	80000f14 <goto_priv>
    reset_state();
    80010e18:	95ff00ef          	jal	80001776 <reset_state>
    goto_priv(PRIV_HU);
    80010e1c:	4505                	li	a0,1
    80010e1e:	8f6f00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010e22:	ff7ef0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80010e26:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("hu mode hfence.vvma cause to illegal instruction interrupt",
    80010e2a:	08c00593          	li	a1,140
    80010e2e:	00025617          	auipc	a2,0x25
    80010e32:	eea60613          	addi	a2,a2,-278 # 80035d18 <__func__.0+0x3930>
    80010e36:	00022517          	auipc	a0,0x22
    80010e3a:	8aa50513          	addi	a0,a0,-1878 # 800326e0 <__func__.0+0x2f8>
    80010e3e:	6861e0ef          	jal	8002f4c4 <printf>
    80010e42:	0004b797          	auipc	a5,0x4b
    80010e46:	1cf7c783          	lbu	a5,463(a5) # 8005c011 <excpt+0x1>
    80010e4a:	0004b497          	auipc	s1,0x4b
    80010e4e:	1c648493          	addi	s1,s1,454 # 8005c010 <excpt>
    80010e52:	00022597          	auipc	a1,0x22
    80010e56:	86658593          	addi	a1,a1,-1946 # 800326b8 <__func__.0+0x2d0>
    80010e5a:	cf89                	beqz	a5,80010e74 <illegal_except_11+0x88>
    80010e5c:	6498                	ld	a4,8(s1)
    80010e5e:	4789                	li	a5,2
    80010e60:	00022597          	auipc	a1,0x22
    80010e64:	84858593          	addi	a1,a1,-1976 # 800326a8 <__func__.0+0x2c0>
    80010e68:	00f70663          	beq	a4,a5,80010e74 <illegal_except_11+0x88>
    80010e6c:	00022597          	auipc	a1,0x22
    80010e70:	84c58593          	addi	a1,a1,-1972 # 800326b8 <__func__.0+0x2d0>
    80010e74:	00022517          	auipc	a0,0x22
    80010e78:	88450513          	addi	a0,a0,-1916 # 800326f8 <__func__.0+0x310>
    80010e7c:	6481e0ef          	jal	8002f4c4 <printf>
    80010e80:	0004b797          	auipc	a5,0x4b
    80010e84:	1917c783          	lbu	a5,401(a5) # 8005c011 <excpt+0x1>
    80010e88:	c789                	beqz	a5,80010e92 <illegal_except_11+0xa6>
    80010e8a:	6498                	ld	a4,8(s1)
    80010e8c:	4789                	li	a5,2
    80010e8e:	00f70c63          	beq	a4,a5,80010ea6 <illegal_except_11+0xba>
    80010e92:	00022517          	auipc	a0,0x22
    80010e96:	86e50513          	addi	a0,a0,-1938 # 80032700 <__func__.0+0x318>
    80010e9a:	62a1e0ef          	jal	8002f4c4 <printf>
    80010e9e:	02900513          	li	a0,41
    80010ea2:	3101d0ef          	jal	8002e1b2 <putchar>
    80010ea6:	4529                	li	a0,10
    80010ea8:	30a1d0ef          	jal	8002e1b2 <putchar>
    80010eac:	0004b797          	auipc	a5,0x4b
    80010eb0:	1657c783          	lbu	a5,357(a5) # 8005c011 <excpt+0x1>
    80010eb4:	4401                	li	s0,0
    80010eb6:	c789                	beqz	a5,80010ec0 <illegal_except_11+0xd4>
    80010eb8:	6480                	ld	s0,8(s1)
    80010eba:	1479                	addi	s0,s0,-2
    80010ebc:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80010ec0:	f59ef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80010ec4:	4511                	li	a0,4
    80010ec6:	84ef00ef          	jal	80000f14 <goto_priv>
    reset_state();
    80010eca:	8adf00ef          	jal	80001776 <reset_state>
    goto_priv(PRIV_HU);
    80010ece:	4505                	li	a0,1
    80010ed0:	844f00ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010ed4:	f45ef0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80010ed8:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80010edc:	08c00593          	li	a1,140
    80010ee0:	00025617          	auipc	a2,0x25
    80010ee4:	e7860613          	addi	a2,a2,-392 # 80035d58 <__func__.0+0x3970>
    80010ee8:	00021517          	auipc	a0,0x21
    80010eec:	7f850513          	addi	a0,a0,2040 # 800326e0 <__func__.0+0x2f8>
    80010ef0:	5d41e0ef          	jal	8002f4c4 <printf>
    80010ef4:	0004b797          	auipc	a5,0x4b
    80010ef8:	11d7c783          	lbu	a5,285(a5) # 8005c011 <excpt+0x1>
    80010efc:	00021597          	auipc	a1,0x21
    80010f00:	7bc58593          	addi	a1,a1,1980 # 800326b8 <__func__.0+0x2d0>
    80010f04:	cf89                	beqz	a5,80010f1e <illegal_except_11+0x132>
    80010f06:	6498                	ld	a4,8(s1)
    80010f08:	4789                	li	a5,2
    80010f0a:	00021597          	auipc	a1,0x21
    80010f0e:	79e58593          	addi	a1,a1,1950 # 800326a8 <__func__.0+0x2c0>
    80010f12:	00f70663          	beq	a4,a5,80010f1e <illegal_except_11+0x132>
    80010f16:	00021597          	auipc	a1,0x21
    80010f1a:	7a258593          	addi	a1,a1,1954 # 800326b8 <__func__.0+0x2d0>
    80010f1e:	00021517          	auipc	a0,0x21
    80010f22:	7da50513          	addi	a0,a0,2010 # 800326f8 <__func__.0+0x310>
    80010f26:	59e1e0ef          	jal	8002f4c4 <printf>
    80010f2a:	0004b797          	auipc	a5,0x4b
    80010f2e:	0e77c783          	lbu	a5,231(a5) # 8005c011 <excpt+0x1>
    80010f32:	c789                	beqz	a5,80010f3c <illegal_except_11+0x150>
    80010f34:	6498                	ld	a4,8(s1)
    80010f36:	4789                	li	a5,2
    80010f38:	00f70c63          	beq	a4,a5,80010f50 <illegal_except_11+0x164>
    80010f3c:	00021517          	auipc	a0,0x21
    80010f40:	7c450513          	addi	a0,a0,1988 # 80032700 <__func__.0+0x318>
    80010f44:	5801e0ef          	jal	8002f4c4 <printf>
    80010f48:	02900513          	li	a0,41
    80010f4c:	2661d0ef          	jal	8002e1b2 <putchar>
    80010f50:	4529                	li	a0,10
    80010f52:	2601d0ef          	jal	8002e1b2 <putchar>
    80010f56:	c015                	beqz	s0,80010f7a <illegal_except_11+0x18e>
    80010f58:	0004b417          	auipc	s0,0x4b
    80010f5c:	0b944403          	lbu	s0,185(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010f60:	00021597          	auipc	a1,0x21
    80010f64:	75858593          	addi	a1,a1,1880 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80010f68:	cc11                	beqz	s0,80010f84 <illegal_except_11+0x198>
    80010f6a:	6498                	ld	a4,8(s1)
    80010f6c:	4789                	li	a5,2
    TEST_END();
    80010f6e:	00021597          	auipc	a1,0x21
    80010f72:	73a58593          	addi	a1,a1,1850 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80010f76:	00f70763          	beq	a4,a5,80010f84 <illegal_except_11+0x198>
    80010f7a:	4401                	li	s0,0
    TEST_END();
    80010f7c:	00021597          	auipc	a1,0x21
    80010f80:	73c58593          	addi	a1,a1,1852 # 800326b8 <__func__.0+0x2d0>
    80010f84:	00021517          	auipc	a0,0x21
    80010f88:	7dc50513          	addi	a0,a0,2012 # 80032760 <__func__.0+0x378>
    80010f8c:	5381e0ef          	jal	8002f4c4 <printf>
    80010f90:	4511                	li	a0,4
    80010f92:	f83ef0ef          	jal	80000f14 <goto_priv>
    80010f96:	fe0f00ef          	jal	80001776 <reset_state>
}
    80010f9a:	60e2                	ld	ra,24(sp)
    80010f9c:	8522                	mv	a0,s0
    80010f9e:	6442                	ld	s0,16(sp)
    80010fa0:	64a2                	ld	s1,8(sp)
    80010fa2:	6105                	addi	sp,sp,32
    80010fa4:	8082                	ret

0000000080010fa6 <illegal_except_12>:

bool illegal_except_12() {
    80010fa6:	1101                	addi	sp,sp,-32

    TEST_START();
    80010fa8:	00020597          	auipc	a1,0x20
    80010fac:	ac858593          	addi	a1,a1,-1336 # 80030a70 <__func__.3>
    80010fb0:	00021517          	auipc	a0,0x21
    80010fb4:	71850513          	addi	a0,a0,1816 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_12() {
    80010fb8:	ec06                	sd	ra,24(sp)
    80010fba:	e822                	sd	s0,16(sp)
    80010fbc:	e426                	sd	s1,8(sp)
    TEST_START();
    80010fbe:	5061e0ef          	jal	8002f4c4 <printf>
    80010fc2:	4529                	li	a0,10
    80010fc4:	1ee1d0ef          	jal	8002e1b2 <putchar>

    //在U模式下执行SINVAL.VMA、HINVAL.VVMA和HINVAL.GVMA中的任何一条
    TEST_SETUP_EXCEPT();
    80010fc8:	e51ef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80010fcc:	4511                	li	a0,4
    80010fce:	f47ef0ef          	jal	80000f14 <goto_priv>
    reset_state();
    80010fd2:	fa4f00ef          	jal	80001776 <reset_state>
    goto_priv(PRIV_HU);
    80010fd6:	4505                	li	a0,1
    80010fd8:	f3def0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010fdc:	e3def0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80010fe0:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hu mode sinval.vma cause to illegal instruction interrupt",
    80010fe4:	08c00593          	li	a1,140
    80010fe8:	00025617          	auipc	a2,0x25
    80010fec:	db060613          	addi	a2,a2,-592 # 80035d98 <__func__.0+0x39b0>
    80010ff0:	00021517          	auipc	a0,0x21
    80010ff4:	6f050513          	addi	a0,a0,1776 # 800326e0 <__func__.0+0x2f8>
    80010ff8:	4cc1e0ef          	jal	8002f4c4 <printf>
    80010ffc:	0004b797          	auipc	a5,0x4b
    80011000:	0157c783          	lbu	a5,21(a5) # 8005c011 <excpt+0x1>
    80011004:	0004b497          	auipc	s1,0x4b
    80011008:	00c48493          	addi	s1,s1,12 # 8005c010 <excpt>
    8001100c:	00021597          	auipc	a1,0x21
    80011010:	6ac58593          	addi	a1,a1,1708 # 800326b8 <__func__.0+0x2d0>
    80011014:	cf89                	beqz	a5,8001102e <illegal_except_12+0x88>
    80011016:	6498                	ld	a4,8(s1)
    80011018:	4789                	li	a5,2
    8001101a:	00021597          	auipc	a1,0x21
    8001101e:	68e58593          	addi	a1,a1,1678 # 800326a8 <__func__.0+0x2c0>
    80011022:	00f70663          	beq	a4,a5,8001102e <illegal_except_12+0x88>
    80011026:	00021597          	auipc	a1,0x21
    8001102a:	69258593          	addi	a1,a1,1682 # 800326b8 <__func__.0+0x2d0>
    8001102e:	00021517          	auipc	a0,0x21
    80011032:	6ca50513          	addi	a0,a0,1738 # 800326f8 <__func__.0+0x310>
    80011036:	48e1e0ef          	jal	8002f4c4 <printf>
    8001103a:	0004b797          	auipc	a5,0x4b
    8001103e:	fd77c783          	lbu	a5,-41(a5) # 8005c011 <excpt+0x1>
    80011042:	c789                	beqz	a5,8001104c <illegal_except_12+0xa6>
    80011044:	6498                	ld	a4,8(s1)
    80011046:	4789                	li	a5,2
    80011048:	00f70c63          	beq	a4,a5,80011060 <illegal_except_12+0xba>
    8001104c:	00021517          	auipc	a0,0x21
    80011050:	6b450513          	addi	a0,a0,1716 # 80032700 <__func__.0+0x318>
    80011054:	4701e0ef          	jal	8002f4c4 <printf>
    80011058:	02900513          	li	a0,41
    8001105c:	1561d0ef          	jal	8002e1b2 <putchar>
    80011060:	4529                	li	a0,10
    80011062:	1501d0ef          	jal	8002e1b2 <putchar>
    80011066:	0004b797          	auipc	a5,0x4b
    8001106a:	fab7c783          	lbu	a5,-85(a5) # 8005c011 <excpt+0x1>
    8001106e:	4401                	li	s0,0
    80011070:	c789                	beqz	a5,8001107a <illegal_except_12+0xd4>
    80011072:	6480                	ld	s0,8(s1)
    80011074:	1479                	addi	s0,s0,-2
    80011076:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    8001107a:	d9fef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001107e:	4511                	li	a0,4
    80011080:	e95ef0ef          	jal	80000f14 <goto_priv>
    reset_state();
    80011084:	ef2f00ef          	jal	80001776 <reset_state>
    goto_priv(PRIV_HU);
    80011088:	4505                	li	a0,1
    8001108a:	e8bef0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001108e:	d8bef0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80011092:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    80011096:	08c00593          	li	a1,140
    8001109a:	00025617          	auipc	a2,0x25
    8001109e:	d3e60613          	addi	a2,a2,-706 # 80035dd8 <__func__.0+0x39f0>
    800110a2:	00021517          	auipc	a0,0x21
    800110a6:	63e50513          	addi	a0,a0,1598 # 800326e0 <__func__.0+0x2f8>
    800110aa:	41a1e0ef          	jal	8002f4c4 <printf>
    800110ae:	0004b797          	auipc	a5,0x4b
    800110b2:	f637c783          	lbu	a5,-157(a5) # 8005c011 <excpt+0x1>
    800110b6:	00021597          	auipc	a1,0x21
    800110ba:	60258593          	addi	a1,a1,1538 # 800326b8 <__func__.0+0x2d0>
    800110be:	cf89                	beqz	a5,800110d8 <illegal_except_12+0x132>
    800110c0:	6498                	ld	a4,8(s1)
    800110c2:	4789                	li	a5,2
    800110c4:	00021597          	auipc	a1,0x21
    800110c8:	5e458593          	addi	a1,a1,1508 # 800326a8 <__func__.0+0x2c0>
    800110cc:	00f70663          	beq	a4,a5,800110d8 <illegal_except_12+0x132>
    800110d0:	00021597          	auipc	a1,0x21
    800110d4:	5e858593          	addi	a1,a1,1512 # 800326b8 <__func__.0+0x2d0>
    800110d8:	00021517          	auipc	a0,0x21
    800110dc:	62050513          	addi	a0,a0,1568 # 800326f8 <__func__.0+0x310>
    800110e0:	3e41e0ef          	jal	8002f4c4 <printf>
    800110e4:	0004b797          	auipc	a5,0x4b
    800110e8:	f2d7c783          	lbu	a5,-211(a5) # 8005c011 <excpt+0x1>
    800110ec:	c789                	beqz	a5,800110f6 <illegal_except_12+0x150>
    800110ee:	6498                	ld	a4,8(s1)
    800110f0:	4789                	li	a5,2
    800110f2:	00f70c63          	beq	a4,a5,8001110a <illegal_except_12+0x164>
    800110f6:	00021517          	auipc	a0,0x21
    800110fa:	60a50513          	addi	a0,a0,1546 # 80032700 <__func__.0+0x318>
    800110fe:	3c61e0ef          	jal	8002f4c4 <printf>
    80011102:	02900513          	li	a0,41
    80011106:	0ac1d0ef          	jal	8002e1b2 <putchar>
    8001110a:	4529                	li	a0,10
    8001110c:	0a61d0ef          	jal	8002e1b2 <putchar>
    80011110:	c801                	beqz	s0,80011120 <illegal_except_12+0x17a>
    80011112:	0004b797          	auipc	a5,0x4b
    80011116:	eff7c783          	lbu	a5,-257(a5) # 8005c011 <excpt+0x1>
    8001111a:	4401                	li	s0,0
    8001111c:	0e079563          	bnez	a5,80011206 <illegal_except_12+0x260>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80011120:	cf9ef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011124:	4511                	li	a0,4
    80011126:	defef0ef          	jal	80000f14 <goto_priv>
    reset_state();
    8001112a:	e4cf00ef          	jal	80001776 <reset_state>
    goto_priv(PRIV_HU);
    8001112e:	4505                	li	a0,1
    80011130:	de5ef0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011134:	ce5ef0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80011138:	26000073          	.insn	4, 0x26000073
    hinval_vvma();
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8001113c:	08c00593          	li	a1,140
    80011140:	00025617          	auipc	a2,0x25
    80011144:	cd860613          	addi	a2,a2,-808 # 80035e18 <__func__.0+0x3a30>
    80011148:	00021517          	auipc	a0,0x21
    8001114c:	59850513          	addi	a0,a0,1432 # 800326e0 <__func__.0+0x2f8>
    80011150:	3741e0ef          	jal	8002f4c4 <printf>
    80011154:	0004b797          	auipc	a5,0x4b
    80011158:	ebd7c783          	lbu	a5,-323(a5) # 8005c011 <excpt+0x1>
    8001115c:	00021597          	auipc	a1,0x21
    80011160:	55c58593          	addi	a1,a1,1372 # 800326b8 <__func__.0+0x2d0>
    80011164:	cf89                	beqz	a5,8001117e <illegal_except_12+0x1d8>
    80011166:	6498                	ld	a4,8(s1)
    80011168:	4789                	li	a5,2
    8001116a:	00021597          	auipc	a1,0x21
    8001116e:	53e58593          	addi	a1,a1,1342 # 800326a8 <__func__.0+0x2c0>
    80011172:	00f70663          	beq	a4,a5,8001117e <illegal_except_12+0x1d8>
    80011176:	00021597          	auipc	a1,0x21
    8001117a:	54258593          	addi	a1,a1,1346 # 800326b8 <__func__.0+0x2d0>
    8001117e:	00021517          	auipc	a0,0x21
    80011182:	57a50513          	addi	a0,a0,1402 # 800326f8 <__func__.0+0x310>
    80011186:	33e1e0ef          	jal	8002f4c4 <printf>
    8001118a:	0004b797          	auipc	a5,0x4b
    8001118e:	e877c783          	lbu	a5,-377(a5) # 8005c011 <excpt+0x1>
    80011192:	c789                	beqz	a5,8001119c <illegal_except_12+0x1f6>
    80011194:	6498                	ld	a4,8(s1)
    80011196:	4789                	li	a5,2
    80011198:	00f70c63          	beq	a4,a5,800111b0 <illegal_except_12+0x20a>
    8001119c:	00021517          	auipc	a0,0x21
    800111a0:	56450513          	addi	a0,a0,1380 # 80032700 <__func__.0+0x318>
    800111a4:	3201e0ef          	jal	8002f4c4 <printf>
    800111a8:	02900513          	li	a0,41
    800111ac:	0061d0ef          	jal	8002e1b2 <putchar>
    800111b0:	4529                	li	a0,10
    800111b2:	0001d0ef          	jal	8002e1b2 <putchar>
    800111b6:	c015                	beqz	s0,800111da <illegal_except_12+0x234>
    800111b8:	0004b417          	auipc	s0,0x4b
    800111bc:	e5944403          	lbu	s0,-423(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800111c0:	00021597          	auipc	a1,0x21
    800111c4:	4f858593          	addi	a1,a1,1272 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    800111c8:	cc11                	beqz	s0,800111e4 <illegal_except_12+0x23e>
    800111ca:	6498                	ld	a4,8(s1)
    800111cc:	4789                	li	a5,2
    TEST_END();
    800111ce:	00021597          	auipc	a1,0x21
    800111d2:	4da58593          	addi	a1,a1,1242 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    800111d6:	00f70763          	beq	a4,a5,800111e4 <illegal_except_12+0x23e>
    800111da:	4401                	li	s0,0
    TEST_END();
    800111dc:	00021597          	auipc	a1,0x21
    800111e0:	4dc58593          	addi	a1,a1,1244 # 800326b8 <__func__.0+0x2d0>
    800111e4:	00021517          	auipc	a0,0x21
    800111e8:	57c50513          	addi	a0,a0,1404 # 80032760 <__func__.0+0x378>
    800111ec:	2d81e0ef          	jal	8002f4c4 <printf>
    800111f0:	4511                	li	a0,4
    800111f2:	d23ef0ef          	jal	80000f14 <goto_priv>
    800111f6:	d80f00ef          	jal	80001776 <reset_state>
}
    800111fa:	60e2                	ld	ra,24(sp)
    800111fc:	8522                	mv	a0,s0
    800111fe:	6442                	ld	s0,16(sp)
    80011200:	64a2                	ld	s1,8(sp)
    80011202:	6105                	addi	sp,sp,32
    80011204:	8082                	ret
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    80011206:	6480                	ld	s0,8(s1)
    80011208:	1479                	addi	s0,s0,-2
    8001120a:	00143413          	seqz	s0,s0
    8001120e:	bf09                	j	80011120 <illegal_except_12+0x17a>

0000000080011210 <illegal_except_13>:


bool illegal_except_13() {
    80011210:	1101                	addi	sp,sp,-32

    TEST_START();
    80011212:	00020597          	auipc	a1,0x20
    80011216:	87658593          	addi	a1,a1,-1930 # 80030a88 <__func__.2>
    8001121a:	00021517          	auipc	a0,0x21
    8001121e:	4ae50513          	addi	a0,a0,1198 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_13() {
    80011222:	ec06                	sd	ra,24(sp)
    80011224:	e822                	sd	s0,16(sp)
    80011226:	e426                	sd	s1,8(sp)
    TEST_START();
    80011228:	29c1e0ef          	jal	8002f4c4 <printf>
    8001122c:	4529                	li	a0,10
    8001122e:	7851c0ef          	jal	8002e1b2 <putchar>
    //satp.MODE只读0，执行sfence.vma
    TEST_SETUP_EXCEPT();
    80011232:	be7ef0ef          	jal	80000e18 <test_setup_except_function>

    goto_priv(PRIV_HS);
    80011236:	450d                	li	a0,3
    80011238:	cddef0ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_SATP,0ULL);
    8001123c:	18005073          	csrwi	satp,0
    asm volatile(
    80011240:	12000073          	sfence.vma
    sfence_vma();
    printf("%d",excpt.triggered);
    80011244:	0004b597          	auipc	a1,0x4b
    80011248:	dcd5c583          	lbu	a1,-563(a1) # 8005c011 <excpt+0x1>
    8001124c:	00025517          	auipc	a0,0x25
    80011250:	c0c50513          	addi	a0,a0,-1012 # 80035e58 <__func__.0+0x3a70>
    80011254:	0004b497          	auipc	s1,0x4b
    80011258:	dbc48493          	addi	s1,s1,-580 # 8005c010 <excpt>
    8001125c:	2681e0ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80011260:	08c00593          	li	a1,140
    80011264:	00025617          	auipc	a2,0x25
    80011268:	bfc60613          	addi	a2,a2,-1028 # 80035e60 <__func__.0+0x3a78>
    8001126c:	00021517          	auipc	a0,0x21
    80011270:	47450513          	addi	a0,a0,1140 # 800326e0 <__func__.0+0x2f8>
    80011274:	2501e0ef          	jal	8002f4c4 <printf>
    80011278:	0004b797          	auipc	a5,0x4b
    8001127c:	d997c783          	lbu	a5,-615(a5) # 8005c011 <excpt+0x1>
    80011280:	00021597          	auipc	a1,0x21
    80011284:	43858593          	addi	a1,a1,1080 # 800326b8 <__func__.0+0x2d0>
    80011288:	cf89                	beqz	a5,800112a2 <illegal_except_13+0x92>
    8001128a:	6498                	ld	a4,8(s1)
    8001128c:	4789                	li	a5,2
    8001128e:	00021597          	auipc	a1,0x21
    80011292:	41a58593          	addi	a1,a1,1050 # 800326a8 <__func__.0+0x2c0>
    80011296:	00f70663          	beq	a4,a5,800112a2 <illegal_except_13+0x92>
    8001129a:	00021597          	auipc	a1,0x21
    8001129e:	41e58593          	addi	a1,a1,1054 # 800326b8 <__func__.0+0x2d0>
    800112a2:	00021517          	auipc	a0,0x21
    800112a6:	45650513          	addi	a0,a0,1110 # 800326f8 <__func__.0+0x310>
    800112aa:	21a1e0ef          	jal	8002f4c4 <printf>
    800112ae:	0004b797          	auipc	a5,0x4b
    800112b2:	d637c783          	lbu	a5,-669(a5) # 8005c011 <excpt+0x1>
    800112b6:	c789                	beqz	a5,800112c0 <illegal_except_13+0xb0>
    800112b8:	6498                	ld	a4,8(s1)
    800112ba:	4789                	li	a5,2
    800112bc:	00f70c63          	beq	a4,a5,800112d4 <illegal_except_13+0xc4>
    800112c0:	00021517          	auipc	a0,0x21
    800112c4:	44050513          	addi	a0,a0,1088 # 80032700 <__func__.0+0x318>
    800112c8:	1fc1e0ef          	jal	8002f4c4 <printf>
    800112cc:	02900513          	li	a0,41
    800112d0:	6e31c0ef          	jal	8002e1b2 <putchar>
    800112d4:	4529                	li	a0,10
    800112d6:	6dd1c0ef          	jal	8002e1b2 <putchar>
    800112da:	0004b417          	auipc	s0,0x4b
    800112de:	d3744403          	lbu	s0,-713(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800112e2:	00021597          	auipc	a1,0x21
    800112e6:	3d658593          	addi	a1,a1,982 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    800112ea:	cc11                	beqz	s0,80011306 <illegal_except_13+0xf6>
    800112ec:	6498                	ld	a4,8(s1)
    800112ee:	4789                	li	a5,2
    TEST_END();
    800112f0:	00021597          	auipc	a1,0x21
    800112f4:	3b858593          	addi	a1,a1,952 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    800112f8:	00f70763          	beq	a4,a5,80011306 <illegal_except_13+0xf6>
    800112fc:	4401                	li	s0,0
    TEST_END();
    800112fe:	00021597          	auipc	a1,0x21
    80011302:	3ba58593          	addi	a1,a1,954 # 800326b8 <__func__.0+0x2d0>
    80011306:	00021517          	auipc	a0,0x21
    8001130a:	45a50513          	addi	a0,a0,1114 # 80032760 <__func__.0+0x378>
    8001130e:	1b61e0ef          	jal	8002f4c4 <printf>
    80011312:	4511                	li	a0,4
    80011314:	c01ef0ef          	jal	80000f14 <goto_priv>
    80011318:	c5ef00ef          	jal	80001776 <reset_state>
}
    8001131c:	60e2                	ld	ra,24(sp)
    8001131e:	8522                	mv	a0,s0
    80011320:	6442                	ld	s0,16(sp)
    80011322:	64a2                	ld	s1,8(sp)
    80011324:	6105                	addi	sp,sp,32
    80011326:	8082                	ret

0000000080011328 <illegal_except_14>:
    //扩展FS的状态设置为0时，尝试读取或者写入浮点对应的状态指令
    //扩展VS的状态设置为0时，尝试读取或者写入向量对应的状态指令
    //扩展XS的状态设置为0时，尝试读取或者写入其他扩展对应的状态指令
    //设置HU=0时，在U模式执行超级虚拟机指令

bool illegal_except_14() {
    80011328:	1101                	addi	sp,sp,-32

    TEST_START();
    8001132a:	0001f597          	auipc	a1,0x1f
    8001132e:	77658593          	addi	a1,a1,1910 # 80030aa0 <__func__.1>
    80011332:	00021517          	auipc	a0,0x21
    80011336:	39650513          	addi	a0,a0,918 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_14() {
    8001133a:	ec06                	sd	ra,24(sp)
    8001133c:	e822                	sd	s0,16(sp)
    8001133e:	e426                	sd	s1,8(sp)
    TEST_START();
    80011340:	1841e0ef          	jal	8002f4c4 <printf>
    80011344:	4529                	li	a0,10
    80011346:	66d1c0ef          	jal	8002e1b2 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001134a:	acfef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001134e:	4511                	li	a0,4
    80011350:	bc5ef0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    80011354:	004007b7          	lui	a5,0x400
    80011358:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001135c:	450d                	li	a0,3
    8001135e:	bb7ef0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VU);
    80011362:	4501                	li	a0,0
    80011364:	ad1ef0ef          	jal	80000e34 <set_prev_priv>
    asm volatile(
    80011368:	10200073          	sret

    //TEST_EXEC_SRET();
    sret();

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001136c:	08c00593          	li	a1,140
    80011370:	00025617          	auipc	a2,0x25
    80011374:	b4060613          	addi	a2,a2,-1216 # 80035eb0 <__func__.0+0x3ac8>
    80011378:	00021517          	auipc	a0,0x21
    8001137c:	36850513          	addi	a0,a0,872 # 800326e0 <__func__.0+0x2f8>
    80011380:	1441e0ef          	jal	8002f4c4 <printf>
    80011384:	0004b797          	auipc	a5,0x4b
    80011388:	c8d7c783          	lbu	a5,-883(a5) # 8005c011 <excpt+0x1>
    8001138c:	0004b497          	auipc	s1,0x4b
    80011390:	c8448493          	addi	s1,s1,-892 # 8005c010 <excpt>
    80011394:	00021597          	auipc	a1,0x21
    80011398:	32458593          	addi	a1,a1,804 # 800326b8 <__func__.0+0x2d0>
    8001139c:	cf89                	beqz	a5,800113b6 <illegal_except_14+0x8e>
    8001139e:	6498                	ld	a4,8(s1)
    800113a0:	4789                	li	a5,2
    800113a2:	00021597          	auipc	a1,0x21
    800113a6:	30658593          	addi	a1,a1,774 # 800326a8 <__func__.0+0x2c0>
    800113aa:	00f70663          	beq	a4,a5,800113b6 <illegal_except_14+0x8e>
    800113ae:	00021597          	auipc	a1,0x21
    800113b2:	30a58593          	addi	a1,a1,778 # 800326b8 <__func__.0+0x2d0>
    800113b6:	00021517          	auipc	a0,0x21
    800113ba:	34250513          	addi	a0,a0,834 # 800326f8 <__func__.0+0x310>
    800113be:	1061e0ef          	jal	8002f4c4 <printf>
    800113c2:	0004b797          	auipc	a5,0x4b
    800113c6:	c4f7c783          	lbu	a5,-945(a5) # 8005c011 <excpt+0x1>
    800113ca:	c789                	beqz	a5,800113d4 <illegal_except_14+0xac>
    800113cc:	6498                	ld	a4,8(s1)
    800113ce:	4789                	li	a5,2
    800113d0:	00f70c63          	beq	a4,a5,800113e8 <illegal_except_14+0xc0>
    800113d4:	00021517          	auipc	a0,0x21
    800113d8:	32c50513          	addi	a0,a0,812 # 80032700 <__func__.0+0x318>
    800113dc:	0e81e0ef          	jal	8002f4c4 <printf>
    800113e0:	02900513          	li	a0,41
    800113e4:	5cf1c0ef          	jal	8002e1b2 <putchar>
    800113e8:	4529                	li	a0,10
    800113ea:	5c91c0ef          	jal	8002e1b2 <putchar>
    800113ee:	0004b417          	auipc	s0,0x4b
    800113f2:	c2344403          	lbu	s0,-989(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800113f6:	00021597          	auipc	a1,0x21
    800113fa:	2c258593          	addi	a1,a1,706 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    800113fe:	cc11                	beqz	s0,8001141a <illegal_except_14+0xf2>
    80011400:	6498                	ld	a4,8(s1)
    80011402:	4789                	li	a5,2
    TEST_END();
    80011404:	00021597          	auipc	a1,0x21
    80011408:	2a458593          	addi	a1,a1,676 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001140c:	00f70763          	beq	a4,a5,8001141a <illegal_except_14+0xf2>
    80011410:	4401                	li	s0,0
    TEST_END();
    80011412:	00021597          	auipc	a1,0x21
    80011416:	2a658593          	addi	a1,a1,678 # 800326b8 <__func__.0+0x2d0>
    8001141a:	00021517          	auipc	a0,0x21
    8001141e:	34650513          	addi	a0,a0,838 # 80032760 <__func__.0+0x378>
    80011422:	0a21e0ef          	jal	8002f4c4 <printf>
    80011426:	4511                	li	a0,4
    80011428:	aedef0ef          	jal	80000f14 <goto_priv>
    8001142c:	b4af00ef          	jal	80001776 <reset_state>

}
    80011430:	60e2                	ld	ra,24(sp)
    80011432:	8522                	mv	a0,s0
    80011434:	6442                	ld	s0,16(sp)
    80011436:	64a2                	ld	s1,8(sp)
    80011438:	6105                	addi	sp,sp,32
    8001143a:	8082                	ret

000000008001143c <illegal_except_15>:

bool illegal_except_15() {
    8001143c:	1141                	addi	sp,sp,-16

    TEST_START();
    8001143e:	0001f597          	auipc	a1,0x1f
    80011442:	67a58593          	addi	a1,a1,1658 # 80030ab8 <__func__.0>
    80011446:	00021517          	auipc	a0,0x21
    8001144a:	28250513          	addi	a0,a0,642 # 800326c8 <__func__.0+0x2e0>
bool illegal_except_15() {
    8001144e:	e406                	sd	ra,8(sp)
    80011450:	e022                	sd	s0,0(sp)
    TEST_START();
    80011452:	0721e0ef          	jal	8002f4c4 <printf>
    80011456:	4529                	li	a0,10
    80011458:	55b1c0ef          	jal	8002e1b2 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001145c:	9bdef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011460:	4511                	li	a0,4
    80011462:	ab3ef0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 22);    //TSR位
    80011466:	004007b7          	lui	a5,0x400
    8001146a:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    8001146e:	450d                	li	a0,3
    80011470:	aa5ef0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80011474:	4509                	li	a0,2
    80011476:	9bfef0ef          	jal	80000e34 <set_prev_priv>

    TEST_EXEC_SRET();
    8001147a:	00000297          	auipc	t0,0x0
    8001147e:	01028293          	addi	t0,t0,16 # 8001148a <illegal_except_15+0x4e>
    80011482:	14129073          	csrw	sepc,t0
    80011486:	10200073          	sret


    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    8001148a:	08c00593          	li	a1,140
    8001148e:	00025617          	auipc	a2,0x25
    80011492:	a5260613          	addi	a2,a2,-1454 # 80035ee0 <__func__.0+0x3af8>
    80011496:	00021517          	auipc	a0,0x21
    8001149a:	24a50513          	addi	a0,a0,586 # 800326e0 <__func__.0+0x2f8>
    8001149e:	0261e0ef          	jal	8002f4c4 <printf>
    800114a2:	0004b797          	auipc	a5,0x4b
    800114a6:	b6f7c783          	lbu	a5,-1169(a5) # 8005c011 <excpt+0x1>
    800114aa:	00021597          	auipc	a1,0x21
    800114ae:	1fe58593          	addi	a1,a1,510 # 800326a8 <__func__.0+0x2c0>
    800114b2:	c789                	beqz	a5,800114bc <illegal_except_15+0x80>
    800114b4:	00021597          	auipc	a1,0x21
    800114b8:	20458593          	addi	a1,a1,516 # 800326b8 <__func__.0+0x2d0>
    800114bc:	00021517          	auipc	a0,0x21
    800114c0:	23c50513          	addi	a0,a0,572 # 800326f8 <__func__.0+0x310>
    800114c4:	0001e0ef          	jal	8002f4c4 <printf>
    800114c8:	0004b797          	auipc	a5,0x4b
    800114cc:	b497c783          	lbu	a5,-1207(a5) # 8005c011 <excpt+0x1>
    800114d0:	e7a1                	bnez	a5,80011518 <illegal_except_15+0xdc>
    800114d2:	4529                	li	a0,10
    800114d4:	4df1c0ef          	jal	8002e1b2 <putchar>
    800114d8:	0004b797          	auipc	a5,0x4b
    800114dc:	b397c783          	lbu	a5,-1223(a5) # 8005c011 <excpt+0x1>
    800114e0:	e795                	bnez	a5,8001150c <illegal_except_15+0xd0>
    800114e2:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    800114e4:	00021597          	auipc	a1,0x21
    800114e8:	1c458593          	addi	a1,a1,452 # 800326a8 <__func__.0+0x2c0>
    800114ec:	00021517          	auipc	a0,0x21
    800114f0:	27450513          	addi	a0,a0,628 # 80032760 <__func__.0+0x378>
    800114f4:	7d11d0ef          	jal	8002f4c4 <printf>
    800114f8:	4511                	li	a0,4
    800114fa:	a1bef0ef          	jal	80000f14 <goto_priv>
    800114fe:	a78f00ef          	jal	80001776 <reset_state>

}
    80011502:	60a2                	ld	ra,8(sp)
    80011504:	8522                	mv	a0,s0
    80011506:	6402                	ld	s0,0(sp)
    80011508:	0141                	addi	sp,sp,16
    8001150a:	8082                	ret
    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    8001150c:	4401                	li	s0,0
    TEST_END();
    8001150e:	00021597          	auipc	a1,0x21
    80011512:	1aa58593          	addi	a1,a1,426 # 800326b8 <__func__.0+0x2d0>
    80011516:	bfd9                	j	800114ec <illegal_except_15+0xb0>
    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    80011518:	00021517          	auipc	a0,0x21
    8001151c:	1e850513          	addi	a0,a0,488 # 80032700 <__func__.0+0x318>
    80011520:	7a51d0ef          	jal	8002f4c4 <printf>
    80011524:	02900513          	li	a0,41
    80011528:	48b1c0ef          	jal	8002e1b2 <putchar>
    8001152c:	b75d                	j	800114d2 <illegal_except_15+0x96>

000000008001152e <external_interrupt_MEI>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool external_interrupt_MEI() {
    8001152e:	1101                	addi	sp,sp,-32

    TEST_START();
    80011530:	0001f597          	auipc	a1,0x1f
    80011534:	5a058593          	addi	a1,a1,1440 # 80030ad0 <__func__.2>
    80011538:	00021517          	auipc	a0,0x21
    8001153c:	19050513          	addi	a0,a0,400 # 800326c8 <__func__.0+0x2e0>
bool external_interrupt_MEI() {
    80011540:	ec06                	sd	ra,24(sp)
    80011542:	e822                	sd	s0,16(sp)
    80011544:	e426                	sd	s1,8(sp)
    TEST_START();
    80011546:	77f1d0ef          	jal	8002f4c4 <printf>
    8001154a:	4529                	li	a0,10
    8001154c:	4671c0ef          	jal	8002e1b2 <putchar>

    TEST_SETUP_EXCEPT();
    80011550:	8c9ef0ef          	jal	80000e18 <test_setup_except_function>

   
    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    goto_priv(PRIV_M);
    80011554:	4511                	li	a0,4
    80011556:	9bfef0ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    8001155a:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8001155e:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);         
    80011562:	6785                	lui	a5,0x1
    80011564:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011568:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);     //p33 read-only  is set and cleared by a platform-specific interrupt controller
    8001156c:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    80011570:	4511                	li	a0,4
    80011572:	9a3ef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80011576:	08c00593          	li	a1,140
    8001157a:	00025617          	auipc	a2,0x25
    8001157e:	99660613          	addi	a2,a2,-1642 # 80035f10 <__func__.0+0x3b28>
    80011582:	00021517          	auipc	a0,0x21
    80011586:	15e50513          	addi	a0,a0,350 # 800326e0 <__func__.0+0x2f8>
    8001158a:	73b1d0ef          	jal	8002f4c4 <printf>
    8001158e:	0004b797          	auipc	a5,0x4b
    80011592:	a837c783          	lbu	a5,-1405(a5) # 8005c011 <excpt+0x1>
    80011596:	0004b497          	auipc	s1,0x4b
    8001159a:	a7a48493          	addi	s1,s1,-1414 # 8005c010 <excpt>
    8001159e:	00021597          	auipc	a1,0x21
    800115a2:	11a58593          	addi	a1,a1,282 # 800326b8 <__func__.0+0x2d0>
    800115a6:	cf99                	beqz	a5,800115c4 <external_interrupt_MEI+0x96>
    800115a8:	57fd                	li	a5,-1
    800115aa:	6498                	ld	a4,8(s1)
    800115ac:	17fe                	slli	a5,a5,0x3f
    800115ae:	07ad                	addi	a5,a5,11
    800115b0:	00021597          	auipc	a1,0x21
    800115b4:	0f858593          	addi	a1,a1,248 # 800326a8 <__func__.0+0x2c0>
    800115b8:	00f70663          	beq	a4,a5,800115c4 <external_interrupt_MEI+0x96>
    800115bc:	00021597          	auipc	a1,0x21
    800115c0:	0fc58593          	addi	a1,a1,252 # 800326b8 <__func__.0+0x2d0>
    800115c4:	00021517          	auipc	a0,0x21
    800115c8:	13450513          	addi	a0,a0,308 # 800326f8 <__func__.0+0x310>
    800115cc:	6f91d0ef          	jal	8002f4c4 <printf>
    800115d0:	0004b797          	auipc	a5,0x4b
    800115d4:	a417c783          	lbu	a5,-1471(a5) # 8005c011 <excpt+0x1>
    800115d8:	c799                	beqz	a5,800115e6 <external_interrupt_MEI+0xb8>
    800115da:	57fd                	li	a5,-1
    800115dc:	6498                	ld	a4,8(s1)
    800115de:	17fe                	slli	a5,a5,0x3f
    800115e0:	07ad                	addi	a5,a5,11
    800115e2:	00f70c63          	beq	a4,a5,800115fa <external_interrupt_MEI+0xcc>
    800115e6:	00021517          	auipc	a0,0x21
    800115ea:	11a50513          	addi	a0,a0,282 # 80032700 <__func__.0+0x318>
    800115ee:	6d71d0ef          	jal	8002f4c4 <printf>
    800115f2:	02900513          	li	a0,41
    800115f6:	3bd1c0ef          	jal	8002e1b2 <putchar>
    800115fa:	4529                	li	a0,10
    800115fc:	3b71c0ef          	jal	8002e1b2 <putchar>
    80011600:	0004b797          	auipc	a5,0x4b
    80011604:	a117c783          	lbu	a5,-1519(a5) # 8005c011 <excpt+0x1>
    80011608:	4401                	li	s0,0
    8001160a:	c799                	beqz	a5,80011618 <external_interrupt_MEI+0xea>
    8001160c:	6480                	ld	s0,8(s1)
    8001160e:	57ad                	li	a5,-21
    80011610:	8385                	srli	a5,a5,0x1
    80011612:	943e                	add	s0,s0,a5
    80011614:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0
    TEST_SETUP_EXCEPT();
    80011618:	801ef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001161c:	4511                	li	a0,4
    8001161e:	8f7ef0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011622:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011626:	6785                	lui	a5,0x1
    80011628:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001162c:	3047b073          	csrc	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80011630:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    80011634:	4511                	li	a0,4
    80011636:	8dfef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8001163a:	08c00593          	li	a1,140
    8001163e:	00025617          	auipc	a2,0x25
    80011642:	93260613          	addi	a2,a2,-1742 # 80035f70 <__func__.0+0x3b88>
    80011646:	00021517          	auipc	a0,0x21
    8001164a:	09a50513          	addi	a0,a0,154 # 800326e0 <__func__.0+0x2f8>
    8001164e:	6771d0ef          	jal	8002f4c4 <printf>
    80011652:	0004b797          	auipc	a5,0x4b
    80011656:	9bf7c783          	lbu	a5,-1601(a5) # 8005c011 <excpt+0x1>
    8001165a:	00021597          	auipc	a1,0x21
    8001165e:	05e58593          	addi	a1,a1,94 # 800326b8 <__func__.0+0x2d0>
    80011662:	e789                	bnez	a5,8001166c <external_interrupt_MEI+0x13e>
    80011664:	00021597          	auipc	a1,0x21
    80011668:	04458593          	addi	a1,a1,68 # 800326a8 <__func__.0+0x2c0>
    8001166c:	00021517          	auipc	a0,0x21
    80011670:	08c50513          	addi	a0,a0,140 # 800326f8 <__func__.0+0x310>
    80011674:	6511d0ef          	jal	8002f4c4 <printf>
    80011678:	0004b797          	auipc	a5,0x4b
    8001167c:	9997c783          	lbu	a5,-1639(a5) # 8005c011 <excpt+0x1>
    80011680:	180796e3          	bnez	a5,8001200c <external_interrupt_MEI+0xade>
    80011684:	4529                	li	a0,10
    80011686:	32d1c0ef          	jal	8002e1b2 <putchar>
    8001168a:	c419                	beqz	s0,80011698 <external_interrupt_MEI+0x16a>
    8001168c:	0004b417          	auipc	s0,0x4b
    80011690:	98544403          	lbu	s0,-1659(s0) # 8005c011 <excpt+0x1>
    80011694:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1
    TEST_SETUP_EXCEPT();
    80011698:	f80ef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001169c:	4511                	li	a0,4
    8001169e:	877ef0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800116a2:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800116a6:	6785                	lui	a5,0x1
    800116a8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800116ac:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    800116b0:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    800116b4:	4511                	li	a0,4
    800116b6:	85fef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    800116ba:	08c00593          	li	a1,140
    800116be:	00025617          	auipc	a2,0x25
    800116c2:	90a60613          	addi	a2,a2,-1782 # 80035fc8 <__func__.0+0x3be0>
    800116c6:	00021517          	auipc	a0,0x21
    800116ca:	01a50513          	addi	a0,a0,26 # 800326e0 <__func__.0+0x2f8>
    800116ce:	5f71d0ef          	jal	8002f4c4 <printf>
    800116d2:	0004b797          	auipc	a5,0x4b
    800116d6:	93f7c783          	lbu	a5,-1729(a5) # 8005c011 <excpt+0x1>
    800116da:	00021597          	auipc	a1,0x21
    800116de:	fde58593          	addi	a1,a1,-34 # 800326b8 <__func__.0+0x2d0>
    800116e2:	cf99                	beqz	a5,80011700 <external_interrupt_MEI+0x1d2>
    800116e4:	57fd                	li	a5,-1
    800116e6:	6498                	ld	a4,8(s1)
    800116e8:	17fe                	slli	a5,a5,0x3f
    800116ea:	07ad                	addi	a5,a5,11
    800116ec:	00021597          	auipc	a1,0x21
    800116f0:	fbc58593          	addi	a1,a1,-68 # 800326a8 <__func__.0+0x2c0>
    800116f4:	00f70663          	beq	a4,a5,80011700 <external_interrupt_MEI+0x1d2>
    800116f8:	00021597          	auipc	a1,0x21
    800116fc:	fc058593          	addi	a1,a1,-64 # 800326b8 <__func__.0+0x2d0>
    80011700:	00021517          	auipc	a0,0x21
    80011704:	ff850513          	addi	a0,a0,-8 # 800326f8 <__func__.0+0x310>
    80011708:	5bd1d0ef          	jal	8002f4c4 <printf>
    8001170c:	0004b797          	auipc	a5,0x4b
    80011710:	9057c783          	lbu	a5,-1787(a5) # 8005c011 <excpt+0x1>
    80011714:	c799                	beqz	a5,80011722 <external_interrupt_MEI+0x1f4>
    80011716:	57fd                	li	a5,-1
    80011718:	6498                	ld	a4,8(s1)
    8001171a:	17fe                	slli	a5,a5,0x3f
    8001171c:	07ad                	addi	a5,a5,11
    8001171e:	00f70c63          	beq	a4,a5,80011736 <external_interrupt_MEI+0x208>
    80011722:	00021517          	auipc	a0,0x21
    80011726:	fde50513          	addi	a0,a0,-34 # 80032700 <__func__.0+0x318>
    8001172a:	59b1d0ef          	jal	8002f4c4 <printf>
    8001172e:	02900513          	li	a0,41
    80011732:	2811c0ef          	jal	8002e1b2 <putchar>
    80011736:	4529                	li	a0,10
    80011738:	27b1c0ef          	jal	8002e1b2 <putchar>
    8001173c:	c801                	beqz	s0,8001174c <external_interrupt_MEI+0x21e>
    8001173e:	0004b797          	auipc	a5,0x4b
    80011742:	8d37c783          	lbu	a5,-1837(a5) # 8005c011 <excpt+0x1>
    80011746:	4401                	li	s0,0
    80011748:	020792e3          	bnez	a5,80011f6c <external_interrupt_MEI+0xa3e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=1
    TEST_SETUP_EXCEPT();
    8001174c:	eccef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011750:	4511                	li	a0,4
    80011752:	fc2ef0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80011756:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8001175a:	6785                	lui	a5,0x1
    8001175c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011760:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80011764:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    80011768:	4511                	li	a0,4
    8001176a:	faaef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    8001176e:	08c00593          	li	a1,140
    80011772:	00025617          	auipc	a2,0x25
    80011776:	8b660613          	addi	a2,a2,-1866 # 80036028 <__func__.0+0x3c40>
    8001177a:	00021517          	auipc	a0,0x21
    8001177e:	f6650513          	addi	a0,a0,-154 # 800326e0 <__func__.0+0x2f8>
    80011782:	5431d0ef          	jal	8002f4c4 <printf>
    80011786:	0004b797          	auipc	a5,0x4b
    8001178a:	88b7c783          	lbu	a5,-1909(a5) # 8005c011 <excpt+0x1>
    8001178e:	00021597          	auipc	a1,0x21
    80011792:	f2a58593          	addi	a1,a1,-214 # 800326b8 <__func__.0+0x2d0>
    80011796:	e789                	bnez	a5,800117a0 <external_interrupt_MEI+0x272>
    80011798:	00021597          	auipc	a1,0x21
    8001179c:	f1058593          	addi	a1,a1,-240 # 800326a8 <__func__.0+0x2c0>
    800117a0:	00021517          	auipc	a0,0x21
    800117a4:	f5850513          	addi	a0,a0,-168 # 800326f8 <__func__.0+0x310>
    800117a8:	51d1d0ef          	jal	8002f4c4 <printf>
    800117ac:	0004b797          	auipc	a5,0x4b
    800117b0:	8657c783          	lbu	a5,-1947(a5) # 8005c011 <excpt+0x1>
    800117b4:	0c0796e3          	bnez	a5,80012080 <external_interrupt_MEI+0xb52>
    800117b8:	4529                	li	a0,10
    800117ba:	1f91c0ef          	jal	8002e1b2 <putchar>
    800117be:	c419                	beqz	s0,800117cc <external_interrupt_MEI+0x29e>
    800117c0:	0004b417          	auipc	s0,0x4b
    800117c4:	85144403          	lbu	s0,-1967(s0) # 8005c011 <excpt+0x1>
    800117c8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=0
    TEST_SETUP_EXCEPT();
    800117cc:	e4cef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800117d0:	4511                	li	a0,4
    800117d2:	f42ef0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    800117d6:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800117da:	6785                	lui	a5,0x1
    800117dc:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800117e0:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    800117e4:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    800117e8:	4511                	li	a0,4
    800117ea:	f2aef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    800117ee:	08c00593          	li	a1,140
    800117f2:	00025617          	auipc	a2,0x25
    800117f6:	88e60613          	addi	a2,a2,-1906 # 80036080 <__func__.0+0x3c98>
    800117fa:	00021517          	auipc	a0,0x21
    800117fe:	ee650513          	addi	a0,a0,-282 # 800326e0 <__func__.0+0x2f8>
    80011802:	4c31d0ef          	jal	8002f4c4 <printf>
    80011806:	0004b797          	auipc	a5,0x4b
    8001180a:	80b7c783          	lbu	a5,-2037(a5) # 8005c011 <excpt+0x1>
    8001180e:	00021597          	auipc	a1,0x21
    80011812:	eaa58593          	addi	a1,a1,-342 # 800326b8 <__func__.0+0x2d0>
    80011816:	e789                	bnez	a5,80011820 <external_interrupt_MEI+0x2f2>
    80011818:	00021597          	auipc	a1,0x21
    8001181c:	e9058593          	addi	a1,a1,-368 # 800326a8 <__func__.0+0x2c0>
    80011820:	00021517          	auipc	a0,0x21
    80011824:	ed850513          	addi	a0,a0,-296 # 800326f8 <__func__.0+0x310>
    80011828:	49d1d0ef          	jal	8002f4c4 <printf>
    8001182c:	0004a797          	auipc	a5,0x4a
    80011830:	7e57c783          	lbu	a5,2021(a5) # 8005c011 <excpt+0x1>
    80011834:	02079ae3          	bnez	a5,80012068 <external_interrupt_MEI+0xb3a>
    80011838:	4529                	li	a0,10
    8001183a:	1791c0ef          	jal	8002e1b2 <putchar>
    8001183e:	c419                	beqz	s0,8001184c <external_interrupt_MEI+0x31e>
    80011840:	0004a417          	auipc	s0,0x4a
    80011844:	7d144403          	lbu	s0,2001(s0) # 8005c011 <excpt+0x1>
    80011848:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=0，mie.MIE=0
    TEST_SETUP_EXCEPT();
    8001184c:	dccef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011850:	4511                	li	a0,4
    80011852:	ec2ef0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    80011856:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8001185a:	6785                	lui	a5,0x1
    8001185c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011860:	3047b073          	csrc	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011864:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    80011868:	4511                	li	a0,4
    8001186a:	eaaef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    8001186e:	08c00593          	li	a1,140
    80011872:	00025617          	auipc	a2,0x25
    80011876:	86660613          	addi	a2,a2,-1946 # 800360d8 <__func__.0+0x3cf0>
    8001187a:	00021517          	auipc	a0,0x21
    8001187e:	e6650513          	addi	a0,a0,-410 # 800326e0 <__func__.0+0x2f8>
    80011882:	4431d0ef          	jal	8002f4c4 <printf>
    80011886:	0004a797          	auipc	a5,0x4a
    8001188a:	78b7c783          	lbu	a5,1931(a5) # 8005c011 <excpt+0x1>
    8001188e:	00021597          	auipc	a1,0x21
    80011892:	e2a58593          	addi	a1,a1,-470 # 800326b8 <__func__.0+0x2d0>
    80011896:	e789                	bnez	a5,800118a0 <external_interrupt_MEI+0x372>
    80011898:	00021597          	auipc	a1,0x21
    8001189c:	e1058593          	addi	a1,a1,-496 # 800326a8 <__func__.0+0x2c0>
    800118a0:	00021517          	auipc	a0,0x21
    800118a4:	e5850513          	addi	a0,a0,-424 # 800326f8 <__func__.0+0x310>
    800118a8:	41d1d0ef          	jal	8002f4c4 <printf>
    800118ac:	0004a797          	auipc	a5,0x4a
    800118b0:	7657c783          	lbu	a5,1893(a5) # 8005c011 <excpt+0x1>
    800118b4:	78079e63          	bnez	a5,80012050 <external_interrupt_MEI+0xb22>
    800118b8:	4529                	li	a0,10
    800118ba:	0f91c0ef          	jal	8002e1b2 <putchar>
    800118be:	c419                	beqz	s0,800118cc <external_interrupt_MEI+0x39e>
    800118c0:	0004a417          	auipc	s0,0x4a
    800118c4:	75144403          	lbu	s0,1873(s0) # 8005c011 <excpt+0x1>
    800118c8:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    800118cc:	d4cef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800118d0:	4511                	li	a0,4
    800118d2:	e42ef0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800118d6:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800118da:	6785                	lui	a5,0x1
    800118dc:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800118e0:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    800118e4:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_HS);
    800118e8:	450d                	li	a0,3
    800118ea:	e2aef0ef          	jal	80000f14 <goto_priv>

    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    800118ee:	08c00593          	li	a1,140
    800118f2:	00025617          	auipc	a2,0x25
    800118f6:	83e60613          	addi	a2,a2,-1986 # 80036130 <__func__.0+0x3d48>
    800118fa:	00021517          	auipc	a0,0x21
    800118fe:	de650513          	addi	a0,a0,-538 # 800326e0 <__func__.0+0x2f8>
    80011902:	3c31d0ef          	jal	8002f4c4 <printf>
    80011906:	6094                	ld	a3,0(s1)
    80011908:	f0001737          	lui	a4,0xf0001
    8001190c:	0712                	slli	a4,a4,0x4
    8001190e:	4785                	li	a5,1
    80011910:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011914:	178a                	slli	a5,a5,0x22
    80011916:	8f75                	and	a4,a4,a3
    80011918:	10078793          	addi	a5,a5,256
    8001191c:	00021597          	auipc	a1,0x21
    80011920:	d9c58593          	addi	a1,a1,-612 # 800326b8 <__func__.0+0x2d0>
    80011924:	00f71663          	bne	a4,a5,80011930 <external_interrupt_MEI+0x402>
    80011928:	00021597          	auipc	a1,0x21
    8001192c:	d8058593          	addi	a1,a1,-640 # 800326a8 <__func__.0+0x2c0>
    80011930:	00021517          	auipc	a0,0x21
    80011934:	dc850513          	addi	a0,a0,-568 # 800326f8 <__func__.0+0x310>
    80011938:	38d1d0ef          	jal	8002f4c4 <printf>
    8001193c:	0004a797          	auipc	a5,0x4a
    80011940:	6d57c783          	lbu	a5,1749(a5) # 8005c011 <excpt+0x1>
    80011944:	cb81                	beqz	a5,80011954 <external_interrupt_MEI+0x426>
    80011946:	0004a717          	auipc	a4,0x4a
    8001194a:	6ce72703          	lw	a4,1742(a4) # 8005c014 <excpt+0x4>
    8001194e:	4791                	li	a5,4
    80011950:	00f70c63          	beq	a4,a5,80011968 <external_interrupt_MEI+0x43a>
    80011954:	00021517          	auipc	a0,0x21
    80011958:	dac50513          	addi	a0,a0,-596 # 80032700 <__func__.0+0x318>
    8001195c:	3691d0ef          	jal	8002f4c4 <printf>
    80011960:	02900513          	li	a0,41
    80011964:	04f1c0ef          	jal	8002e1b2 <putchar>
    80011968:	4529                	li	a0,10
    8001196a:	0491c0ef          	jal	8002e1b2 <putchar>
    8001196e:	cc19                	beqz	s0,8001198c <external_interrupt_MEI+0x45e>
    80011970:	6080                	ld	s0,0(s1)
    80011972:	f0001737          	lui	a4,0xf0001
    80011976:	0712                	slli	a4,a4,0x4
    80011978:	57fd                	li	a5,-1
    8001197a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8001197e:	178a                	slli	a5,a5,0x22
    80011980:	8c79                	and	s0,s0,a4
    80011982:	f0078793          	addi	a5,a5,-256
    80011986:	943e                	add	s0,s0,a5
    80011988:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    8001198c:	c8cef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011990:	4511                	li	a0,4
    80011992:	d82ef0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011996:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8001199a:	6785                	lui	a5,0x1
    8001199c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800119a0:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    800119a4:	577d                	li	a4,-1
    800119a6:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    800119aa:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    800119ae:	450d                	li	a0,3
    800119b0:	d64ef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    800119b4:	08c00593          	li	a1,140
    800119b8:	00024617          	auipc	a2,0x24
    800119bc:	7d060613          	addi	a2,a2,2000 # 80036188 <__func__.0+0x3da0>
    800119c0:	00021517          	auipc	a0,0x21
    800119c4:	d2050513          	addi	a0,a0,-736 # 800326e0 <__func__.0+0x2f8>
    800119c8:	2fd1d0ef          	jal	8002f4c4 <printf>
    800119cc:	6094                	ld	a3,0(s1)
    800119ce:	f0001737          	lui	a4,0xf0001
    800119d2:	0712                	slli	a4,a4,0x4
    800119d4:	478d                	li	a5,3
    800119d6:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    800119da:	1782                	slli	a5,a5,0x20
    800119dc:	8f75                	and	a4,a4,a3
    800119de:	10078793          	addi	a5,a5,256
    800119e2:	00021597          	auipc	a1,0x21
    800119e6:	cd658593          	addi	a1,a1,-810 # 800326b8 <__func__.0+0x2d0>
    800119ea:	00f71663          	bne	a4,a5,800119f6 <external_interrupt_MEI+0x4c8>
    800119ee:	00021597          	auipc	a1,0x21
    800119f2:	cba58593          	addi	a1,a1,-838 # 800326a8 <__func__.0+0x2c0>
    800119f6:	00021517          	auipc	a0,0x21
    800119fa:	d0250513          	addi	a0,a0,-766 # 800326f8 <__func__.0+0x310>
    800119fe:	2c71d0ef          	jal	8002f4c4 <printf>
    80011a02:	0004a797          	auipc	a5,0x4a
    80011a06:	60f7c783          	lbu	a5,1551(a5) # 8005c011 <excpt+0x1>
    80011a0a:	cb81                	beqz	a5,80011a1a <external_interrupt_MEI+0x4ec>
    80011a0c:	0004a717          	auipc	a4,0x4a
    80011a10:	60872703          	lw	a4,1544(a4) # 8005c014 <excpt+0x4>
    80011a14:	478d                	li	a5,3
    80011a16:	00f70c63          	beq	a4,a5,80011a2e <external_interrupt_MEI+0x500>
    80011a1a:	00021517          	auipc	a0,0x21
    80011a1e:	ce650513          	addi	a0,a0,-794 # 80032700 <__func__.0+0x318>
    80011a22:	2a31d0ef          	jal	8002f4c4 <printf>
    80011a26:	02900513          	li	a0,41
    80011a2a:	7881c0ef          	jal	8002e1b2 <putchar>
    80011a2e:	4529                	li	a0,10
    80011a30:	7821c0ef          	jal	8002e1b2 <putchar>
    80011a34:	cc19                	beqz	s0,80011a52 <external_interrupt_MEI+0x524>
    80011a36:	6080                	ld	s0,0(s1)
    80011a38:	f0001737          	lui	a4,0xf0001
    80011a3c:	0712                	slli	a4,a4,0x4
    80011a3e:	57f5                	li	a5,-3
    80011a40:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011a44:	1782                	slli	a5,a5,0x20
    80011a46:	8c79                	and	s0,s0,a4
    80011a48:	f0078793          	addi	a5,a5,-256
    80011a4c:	943e                	add	s0,s0,a5
    80011a4e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    80011a52:	bc6ef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011a56:	4511                	li	a0,4
    80011a58:	cbcef0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011a5c:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011a60:	6785                	lui	a5,0x1
    80011a62:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011a66:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    80011a6a:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80011a6e:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    80011a72:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    80011a76:	450d                	li	a0,3
    80011a78:	c9cef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80011a7c:	08c00593          	li	a1,140
    80011a80:	00024617          	auipc	a2,0x24
    80011a84:	76060613          	addi	a2,a2,1888 # 800361e0 <__func__.0+0x3df8>
    80011a88:	00021517          	auipc	a0,0x21
    80011a8c:	c5850513          	addi	a0,a0,-936 # 800326e0 <__func__.0+0x2f8>
    80011a90:	2351d0ef          	jal	8002f4c4 <printf>
    80011a94:	0004a797          	auipc	a5,0x4a
    80011a98:	57d7c783          	lbu	a5,1405(a5) # 8005c011 <excpt+0x1>
    80011a9c:	00021597          	auipc	a1,0x21
    80011aa0:	c1c58593          	addi	a1,a1,-996 # 800326b8 <__func__.0+0x2d0>
    80011aa4:	e789                	bnez	a5,80011aae <external_interrupt_MEI+0x580>
    80011aa6:	00021597          	auipc	a1,0x21
    80011aaa:	c0258593          	addi	a1,a1,-1022 # 800326a8 <__func__.0+0x2c0>
    80011aae:	00021517          	auipc	a0,0x21
    80011ab2:	c4a50513          	addi	a0,a0,-950 # 800326f8 <__func__.0+0x310>
    80011ab6:	20f1d0ef          	jal	8002f4c4 <printf>
    80011aba:	0004a797          	auipc	a5,0x4a
    80011abe:	5577c783          	lbu	a5,1367(a5) # 8005c011 <excpt+0x1>
    80011ac2:	56079c63          	bnez	a5,8001203a <external_interrupt_MEI+0xb0c>
    80011ac6:	4529                	li	a0,10
    80011ac8:	6ea1c0ef          	jal	8002e1b2 <putchar>
    80011acc:	c419                	beqz	s0,80011ada <external_interrupt_MEI+0x5ac>
    80011ace:	0004a417          	auipc	s0,0x4a
    80011ad2:	54344403          	lbu	s0,1347(s0) # 8005c011 <excpt+0x1>
    80011ad6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    80011ada:	b3eef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011ade:	4511                	li	a0,4
    80011ae0:	c34ef0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011ae4:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011ae8:	6785                	lui	a5,0x1
    80011aea:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011aee:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011af2:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    80011af6:	450d                	li	a0,3
    80011af8:	c1cef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011afc:	08c00593          	li	a1,140
    80011b00:	00024617          	auipc	a2,0x24
    80011b04:	73860613          	addi	a2,a2,1848 # 80036238 <__func__.0+0x3e50>
    80011b08:	00021517          	auipc	a0,0x21
    80011b0c:	bd850513          	addi	a0,a0,-1064 # 800326e0 <__func__.0+0x2f8>
    80011b10:	1b51d0ef          	jal	8002f4c4 <printf>
    80011b14:	0004a797          	auipc	a5,0x4a
    80011b18:	4fd7c783          	lbu	a5,1277(a5) # 8005c011 <excpt+0x1>
    80011b1c:	00021597          	auipc	a1,0x21
    80011b20:	b9c58593          	addi	a1,a1,-1124 # 800326b8 <__func__.0+0x2d0>
    80011b24:	c799                	beqz	a5,80011b32 <external_interrupt_MEI+0x604>
    80011b26:	57fd                	li	a5,-1
    80011b28:	6498                	ld	a4,8(s1)
    80011b2a:	17fe                	slli	a5,a5,0x3f
    80011b2c:	07ad                	addi	a5,a5,11
    80011b2e:	56f70563          	beq	a4,a5,80012098 <external_interrupt_MEI+0xb6a>
    80011b32:	00021517          	auipc	a0,0x21
    80011b36:	bc650513          	addi	a0,a0,-1082 # 800326f8 <__func__.0+0x310>
    80011b3a:	18b1d0ef          	jal	8002f4c4 <printf>
    80011b3e:	0004a797          	auipc	a5,0x4a
    80011b42:	4d37c783          	lbu	a5,1235(a5) # 8005c011 <excpt+0x1>
    80011b46:	c799                	beqz	a5,80011b54 <external_interrupt_MEI+0x626>
    80011b48:	57fd                	li	a5,-1
    80011b4a:	6498                	ld	a4,8(s1)
    80011b4c:	17fe                	slli	a5,a5,0x3f
    80011b4e:	07ad                	addi	a5,a5,11
    80011b50:	48f70063          	beq	a4,a5,80011fd0 <external_interrupt_MEI+0xaa2>
    80011b54:	00021517          	auipc	a0,0x21
    80011b58:	bac50513          	addi	a0,a0,-1108 # 80032700 <__func__.0+0x318>
    80011b5c:	1691d0ef          	jal	8002f4c4 <printf>
    80011b60:	02900513          	li	a0,41
    80011b64:	64e1c0ef          	jal	8002e1b2 <putchar>
    80011b68:	4529                	li	a0,10
    80011b6a:	6481c0ef          	jal	8002e1b2 <putchar>
    80011b6e:	c801                	beqz	s0,80011b7e <external_interrupt_MEI+0x650>
    80011b70:	0004a797          	auipc	a5,0x4a
    80011b74:	4a17c783          	lbu	a5,1185(a5) # 8005c011 <excpt+0x1>
    80011b78:	4401                	li	s0,0
    80011b7a:	42079563          	bnez	a5,80011fa4 <external_interrupt_MEI+0xa76>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80011b7e:	a9aef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011b82:	4511                	li	a0,4
    80011b84:	b90ef0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80011b88:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011b8c:	6785                	lui	a5,0x1
    80011b8e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011b92:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80011b96:	577d                	li	a4,-1
    80011b98:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1
    80011b9c:	30273073          	csrc	medeleg,a4
    );
    CSRC(CSR_MIP,MIP_MEIP);
    80011ba0:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    80011ba4:	450d                	li	a0,3
    80011ba6:	b6eef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011baa:	08c00593          	li	a1,140
    80011bae:	00024617          	auipc	a2,0x24
    80011bb2:	6e260613          	addi	a2,a2,1762 # 80036290 <__func__.0+0x3ea8>
    80011bb6:	00021517          	auipc	a0,0x21
    80011bba:	b2a50513          	addi	a0,a0,-1238 # 800326e0 <__func__.0+0x2f8>
    80011bbe:	1071d0ef          	jal	8002f4c4 <printf>
    80011bc2:	0004a797          	auipc	a5,0x4a
    80011bc6:	44f7c783          	lbu	a5,1103(a5) # 8005c011 <excpt+0x1>
    80011bca:	00021597          	auipc	a1,0x21
    80011bce:	aee58593          	addi	a1,a1,-1298 # 800326b8 <__func__.0+0x2d0>
    80011bd2:	e789                	bnez	a5,80011bdc <external_interrupt_MEI+0x6ae>
    80011bd4:	00021597          	auipc	a1,0x21
    80011bd8:	ad458593          	addi	a1,a1,-1324 # 800326a8 <__func__.0+0x2c0>
    80011bdc:	00021517          	auipc	a0,0x21
    80011be0:	b1c50513          	addi	a0,a0,-1252 # 800326f8 <__func__.0+0x310>
    80011be4:	0e11d0ef          	jal	8002f4c4 <printf>
    80011be8:	0004a797          	auipc	a5,0x4a
    80011bec:	4297c783          	lbu	a5,1065(a5) # 8005c011 <excpt+0x1>
    80011bf0:	3e079863          	bnez	a5,80011fe0 <external_interrupt_MEI+0xab2>
    80011bf4:	4529                	li	a0,10
    80011bf6:	5bc1c0ef          	jal	8002e1b2 <putchar>
    80011bfa:	c419                	beqz	s0,80011c08 <external_interrupt_MEI+0x6da>
    80011bfc:	0004a417          	auipc	s0,0x4a
    80011c00:	41544403          	lbu	s0,1045(s0) # 8005c011 <excpt+0x1>
    80011c04:	00144413          	xori	s0,s0,1



//vs-mode下
    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    80011c08:	a10ef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011c0c:	4511                	li	a0,4
    80011c0e:	b06ef0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011c12:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011c16:	6785                	lui	a5,0x1
    80011c18:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011c1c:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80011c20:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_VS);
    80011c24:	4509                	li	a0,2
    80011c26:	aeeef0ef          	jal	80000f14 <goto_priv>

    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80011c2a:	08c00593          	li	a1,140
    80011c2e:	00024617          	auipc	a2,0x24
    80011c32:	6b260613          	addi	a2,a2,1714 # 800362e0 <__func__.0+0x3ef8>
    80011c36:	00021517          	auipc	a0,0x21
    80011c3a:	aaa50513          	addi	a0,a0,-1366 # 800326e0 <__func__.0+0x2f8>
    80011c3e:	0871d0ef          	jal	8002f4c4 <printf>
    80011c42:	6094                	ld	a3,0(s1)
    80011c44:	f0001737          	lui	a4,0xf0001
    80011c48:	0712                	slli	a4,a4,0x4
    80011c4a:	4785                	li	a5,1
    80011c4c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011c50:	178a                	slli	a5,a5,0x22
    80011c52:	8f75                	and	a4,a4,a3
    80011c54:	10078793          	addi	a5,a5,256
    80011c58:	00021597          	auipc	a1,0x21
    80011c5c:	a6058593          	addi	a1,a1,-1440 # 800326b8 <__func__.0+0x2d0>
    80011c60:	00f71663          	bne	a4,a5,80011c6c <external_interrupt_MEI+0x73e>
    80011c64:	00021597          	auipc	a1,0x21
    80011c68:	a4458593          	addi	a1,a1,-1468 # 800326a8 <__func__.0+0x2c0>
    80011c6c:	00021517          	auipc	a0,0x21
    80011c70:	a8c50513          	addi	a0,a0,-1396 # 800326f8 <__func__.0+0x310>
    80011c74:	0511d0ef          	jal	8002f4c4 <printf>
    80011c78:	0004a797          	auipc	a5,0x4a
    80011c7c:	3997c783          	lbu	a5,921(a5) # 8005c011 <excpt+0x1>
    80011c80:	cb81                	beqz	a5,80011c90 <external_interrupt_MEI+0x762>
    80011c82:	0004a717          	auipc	a4,0x4a
    80011c86:	39272703          	lw	a4,914(a4) # 8005c014 <excpt+0x4>
    80011c8a:	4791                	li	a5,4
    80011c8c:	00f70c63          	beq	a4,a5,80011ca4 <external_interrupt_MEI+0x776>
    80011c90:	00021517          	auipc	a0,0x21
    80011c94:	a7050513          	addi	a0,a0,-1424 # 80032700 <__func__.0+0x318>
    80011c98:	02d1d0ef          	jal	8002f4c4 <printf>
    80011c9c:	02900513          	li	a0,41
    80011ca0:	5121c0ef          	jal	8002e1b2 <putchar>
    80011ca4:	4529                	li	a0,10
    80011ca6:	50c1c0ef          	jal	8002e1b2 <putchar>
    80011caa:	cc19                	beqz	s0,80011cc8 <external_interrupt_MEI+0x79a>
    80011cac:	6080                	ld	s0,0(s1)
    80011cae:	f0001737          	lui	a4,0xf0001
    80011cb2:	0712                	slli	a4,a4,0x4
    80011cb4:	57fd                	li	a5,-1
    80011cb6:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011cba:	178a                	slli	a5,a5,0x22
    80011cbc:	8c79                	and	s0,s0,a4
    80011cbe:	f0078793          	addi	a5,a5,-256
    80011cc2:	943e                	add	s0,s0,a5
    80011cc4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    80011cc8:	950ef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011ccc:	4511                	li	a0,4
    80011cce:	a46ef0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011cd2:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011cd6:	6785                	lui	a5,0x1
    80011cd8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011cdc:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80011ce0:	577d                	li	a4,-1
    80011ce2:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    80011ce6:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    80011cea:	4509                	li	a0,2
    80011cec:	a28ef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    80011cf0:	08c00593          	li	a1,140
    80011cf4:	00024617          	auipc	a2,0x24
    80011cf8:	64c60613          	addi	a2,a2,1612 # 80036340 <__func__.0+0x3f58>
    80011cfc:	00021517          	auipc	a0,0x21
    80011d00:	9e450513          	addi	a0,a0,-1564 # 800326e0 <__func__.0+0x2f8>
    80011d04:	7c01d0ef          	jal	8002f4c4 <printf>
    80011d08:	6094                	ld	a3,0(s1)
    80011d0a:	f0001737          	lui	a4,0xf0001
    80011d0e:	0712                	slli	a4,a4,0x4
    80011d10:	4785                	li	a5,1
    80011d12:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011d16:	1786                	slli	a5,a5,0x21
    80011d18:	8f75                	and	a4,a4,a3
    80011d1a:	10078793          	addi	a5,a5,256
    80011d1e:	00021597          	auipc	a1,0x21
    80011d22:	99a58593          	addi	a1,a1,-1638 # 800326b8 <__func__.0+0x2d0>
    80011d26:	00f71663          	bne	a4,a5,80011d32 <external_interrupt_MEI+0x804>
    80011d2a:	00021597          	auipc	a1,0x21
    80011d2e:	97e58593          	addi	a1,a1,-1666 # 800326a8 <__func__.0+0x2c0>
    80011d32:	00021517          	auipc	a0,0x21
    80011d36:	9c650513          	addi	a0,a0,-1594 # 800326f8 <__func__.0+0x310>
    80011d3a:	78a1d0ef          	jal	8002f4c4 <printf>
    80011d3e:	0004a797          	auipc	a5,0x4a
    80011d42:	2d37c783          	lbu	a5,723(a5) # 8005c011 <excpt+0x1>
    80011d46:	cb81                	beqz	a5,80011d56 <external_interrupt_MEI+0x828>
    80011d48:	0004a717          	auipc	a4,0x4a
    80011d4c:	2cc72703          	lw	a4,716(a4) # 8005c014 <excpt+0x4>
    80011d50:	4789                	li	a5,2
    80011d52:	00f70c63          	beq	a4,a5,80011d6a <external_interrupt_MEI+0x83c>
    80011d56:	00021517          	auipc	a0,0x21
    80011d5a:	9aa50513          	addi	a0,a0,-1622 # 80032700 <__func__.0+0x318>
    80011d5e:	7661d0ef          	jal	8002f4c4 <printf>
    80011d62:	02900513          	li	a0,41
    80011d66:	44c1c0ef          	jal	8002e1b2 <putchar>
    80011d6a:	4529                	li	a0,10
    80011d6c:	4461c0ef          	jal	8002e1b2 <putchar>
    80011d70:	cc19                	beqz	s0,80011d8e <external_interrupt_MEI+0x860>
    80011d72:	6080                	ld	s0,0(s1)
    80011d74:	f0001737          	lui	a4,0xf0001
    80011d78:	0712                	slli	a4,a4,0x4
    80011d7a:	57fd                	li	a5,-1
    80011d7c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011d80:	1786                	slli	a5,a5,0x21
    80011d82:	8c79                	and	s0,s0,a4
    80011d84:	f0078793          	addi	a5,a5,-256
    80011d88:	943e                	add	s0,s0,a5
    80011d8a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    80011d8e:	88aef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011d92:	4511                	li	a0,4
    80011d94:	980ef0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011d98:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011d9c:	6785                	lui	a5,0x1
    80011d9e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011da2:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    80011da6:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80011daa:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    80011dae:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    80011db2:	4509                	li	a0,2
    80011db4:	960ef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80011db8:	08c00593          	li	a1,140
    80011dbc:	00024617          	auipc	a2,0x24
    80011dc0:	5e460613          	addi	a2,a2,1508 # 800363a0 <__func__.0+0x3fb8>
    80011dc4:	00021517          	auipc	a0,0x21
    80011dc8:	91c50513          	addi	a0,a0,-1764 # 800326e0 <__func__.0+0x2f8>
    80011dcc:	6f81d0ef          	jal	8002f4c4 <printf>
    80011dd0:	0004a797          	auipc	a5,0x4a
    80011dd4:	2417c783          	lbu	a5,577(a5) # 8005c011 <excpt+0x1>
    80011dd8:	00021597          	auipc	a1,0x21
    80011ddc:	8e058593          	addi	a1,a1,-1824 # 800326b8 <__func__.0+0x2d0>
    80011de0:	e789                	bnez	a5,80011dea <external_interrupt_MEI+0x8bc>
    80011de2:	00021597          	auipc	a1,0x21
    80011de6:	8c658593          	addi	a1,a1,-1850 # 800326a8 <__func__.0+0x2c0>
    80011dea:	00021517          	auipc	a0,0x21
    80011dee:	90e50513          	addi	a0,a0,-1778 # 800326f8 <__func__.0+0x310>
    80011df2:	6d21d0ef          	jal	8002f4c4 <printf>
    80011df6:	0004a797          	auipc	a5,0x4a
    80011dfa:	21b7c783          	lbu	a5,539(a5) # 8005c011 <excpt+0x1>
    80011dfe:	1e079c63          	bnez	a5,80011ff6 <external_interrupt_MEI+0xac8>
    80011e02:	4529                	li	a0,10
    80011e04:	3ae1c0ef          	jal	8002e1b2 <putchar>
    80011e08:	c419                	beqz	s0,80011e16 <external_interrupt_MEI+0x8e8>
    80011e0a:	0004a417          	auipc	s0,0x4a
    80011e0e:	20744403          	lbu	s0,519(s0) # 8005c011 <excpt+0x1>
    80011e12:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    80011e16:	802ef0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011e1a:	4511                	li	a0,4
    80011e1c:	8f8ef0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011e20:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011e24:	6785                	lui	a5,0x1
    80011e26:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011e2a:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011e2e:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    80011e32:	4509                	li	a0,2
    80011e34:	8e0ef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011e38:	08c00593          	li	a1,140
    80011e3c:	00024617          	auipc	a2,0x24
    80011e40:	5c460613          	addi	a2,a2,1476 # 80036400 <__func__.0+0x4018>
    80011e44:	00021517          	auipc	a0,0x21
    80011e48:	89c50513          	addi	a0,a0,-1892 # 800326e0 <__func__.0+0x2f8>
    80011e4c:	6781d0ef          	jal	8002f4c4 <printf>
    80011e50:	0004a797          	auipc	a5,0x4a
    80011e54:	1c17c783          	lbu	a5,449(a5) # 8005c011 <excpt+0x1>
    80011e58:	00021597          	auipc	a1,0x21
    80011e5c:	86058593          	addi	a1,a1,-1952 # 800326b8 <__func__.0+0x2d0>
    80011e60:	c799                	beqz	a5,80011e6e <external_interrupt_MEI+0x940>
    80011e62:	57fd                	li	a5,-1
    80011e64:	6498                	ld	a4,8(s1)
    80011e66:	17fe                	slli	a5,a5,0x3f
    80011e68:	07ad                	addi	a5,a5,11
    80011e6a:	24f70763          	beq	a4,a5,800120b8 <external_interrupt_MEI+0xb8a>
    80011e6e:	00021517          	auipc	a0,0x21
    80011e72:	88a50513          	addi	a0,a0,-1910 # 800326f8 <__func__.0+0x310>
    80011e76:	64e1d0ef          	jal	8002f4c4 <printf>
    80011e7a:	0004a797          	auipc	a5,0x4a
    80011e7e:	1977c783          	lbu	a5,407(a5) # 8005c011 <excpt+0x1>
    80011e82:	c799                	beqz	a5,80011e90 <external_interrupt_MEI+0x962>
    80011e84:	57fd                	li	a5,-1
    80011e86:	6498                	ld	a4,8(s1)
    80011e88:	17fe                	slli	a5,a5,0x3f
    80011e8a:	07ad                	addi	a5,a5,11
    80011e8c:	12f70a63          	beq	a4,a5,80011fc0 <external_interrupt_MEI+0xa92>
    80011e90:	00021517          	auipc	a0,0x21
    80011e94:	87050513          	addi	a0,a0,-1936 # 80032700 <__func__.0+0x318>
    80011e98:	62c1d0ef          	jal	8002f4c4 <printf>
    80011e9c:	02900513          	li	a0,41
    80011ea0:	3121c0ef          	jal	8002e1b2 <putchar>
    80011ea4:	4529                	li	a0,10
    80011ea6:	30c1c0ef          	jal	8002e1b2 <putchar>
    80011eaa:	c419                	beqz	s0,80011eb8 <external_interrupt_MEI+0x98a>
    80011eac:	0004a797          	auipc	a5,0x4a
    80011eb0:	1657c783          	lbu	a5,357(a5) # 8005c011 <excpt+0x1>
    80011eb4:	4401                	li	s0,0
    80011eb6:	ebe9                	bnez	a5,80011f88 <external_interrupt_MEI+0xa5a>
        excpt.cause == CAUSE_MEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80011eb8:	f61ee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011ebc:	4511                	li	a0,4
    80011ebe:	856ef0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80011ec2:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011ec6:	6785                	lui	a5,0x1
    80011ec8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011ecc:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80011ed0:	577d                	li	a4,-1
    80011ed2:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1);
    80011ed6:	30273073          	csrc	medeleg,a4
    CSRC(CSR_MIP,MIP_MEIP);
    80011eda:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    80011ede:	4509                	li	a0,2
    80011ee0:	834ef0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011ee4:	08c00593          	li	a1,140
    80011ee8:	00024617          	auipc	a2,0x24
    80011eec:	57860613          	addi	a2,a2,1400 # 80036460 <__func__.0+0x4078>
    80011ef0:	00020517          	auipc	a0,0x20
    80011ef4:	7f050513          	addi	a0,a0,2032 # 800326e0 <__func__.0+0x2f8>
    80011ef8:	5cc1d0ef          	jal	8002f4c4 <printf>
    80011efc:	0004a797          	auipc	a5,0x4a
    80011f00:	1157c783          	lbu	a5,277(a5) # 8005c011 <excpt+0x1>
    80011f04:	00020597          	auipc	a1,0x20
    80011f08:	7b458593          	addi	a1,a1,1972 # 800326b8 <__func__.0+0x2d0>
    80011f0c:	e789                	bnez	a5,80011f16 <external_interrupt_MEI+0x9e8>
    80011f0e:	00020597          	auipc	a1,0x20
    80011f12:	79a58593          	addi	a1,a1,1946 # 800326a8 <__func__.0+0x2c0>
    80011f16:	00020517          	auipc	a0,0x20
    80011f1a:	7e250513          	addi	a0,a0,2018 # 800326f8 <__func__.0+0x310>
    80011f1e:	5a61d0ef          	jal	8002f4c4 <printf>
    80011f22:	0004a797          	auipc	a5,0x4a
    80011f26:	0ef7c783          	lbu	a5,239(a5) # 8005c011 <excpt+0x1>
    80011f2a:	0e079d63          	bnez	a5,80012024 <external_interrupt_MEI+0xaf6>
    80011f2e:	4529                	li	a0,10
    80011f30:	2821c0ef          	jal	8002e1b2 <putchar>
    80011f34:	c411                	beqz	s0,80011f40 <external_interrupt_MEI+0xa12>
    80011f36:	0004a797          	auipc	a5,0x4a
    80011f3a:	0db7c783          	lbu	a5,219(a5) # 8005c011 <excpt+0x1>
    80011f3e:	cf9d                	beqz	a5,80011f7c <external_interrupt_MEI+0xa4e>
    80011f40:	4401                	li	s0,0
    //     excpt.cause == CAUSE_MEI &&
    //     excpt.priv == PRIV_HS
    // ); 


    TEST_END();
    80011f42:	00020597          	auipc	a1,0x20
    80011f46:	77658593          	addi	a1,a1,1910 # 800326b8 <__func__.0+0x2d0>
    80011f4a:	00021517          	auipc	a0,0x21
    80011f4e:	81650513          	addi	a0,a0,-2026 # 80032760 <__func__.0+0x378>
    80011f52:	5721d0ef          	jal	8002f4c4 <printf>
    80011f56:	4511                	li	a0,4
    80011f58:	fbdee0ef          	jal	80000f14 <goto_priv>
    80011f5c:	81bef0ef          	jal	80001776 <reset_state>
}
    80011f60:	60e2                	ld	ra,24(sp)
    80011f62:	8522                	mv	a0,s0
    80011f64:	6442                	ld	s0,16(sp)
    80011f66:	64a2                	ld	s1,8(sp)
    80011f68:	6105                	addi	sp,sp,32
    80011f6a:	8082                	ret
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    80011f6c:	6480                	ld	s0,8(s1)
    80011f6e:	57ad                	li	a5,-21
    80011f70:	8385                	srli	a5,a5,0x1
    80011f72:	943e                	add	s0,s0,a5
    80011f74:	00143413          	seqz	s0,s0
    80011f78:	fd4ff06f          	j	8001174c <external_interrupt_MEI+0x21e>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011f7c:	4405                	li	s0,1
    TEST_END();
    80011f7e:	00020597          	auipc	a1,0x20
    80011f82:	72a58593          	addi	a1,a1,1834 # 800326a8 <__func__.0+0x2c0>
    80011f86:	b7d1                	j	80011f4a <external_interrupt_MEI+0xa1c>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011f88:	57fd                	li	a5,-1
    80011f8a:	6498                	ld	a4,8(s1)
    80011f8c:	17fe                	slli	a5,a5,0x3f
    80011f8e:	07ad                	addi	a5,a5,11
    80011f90:	f2f714e3          	bne	a4,a5,80011eb8 <external_interrupt_MEI+0x98a>
    80011f94:	0004a417          	auipc	s0,0x4a
    80011f98:	08042403          	lw	s0,128(s0) # 8005c014 <excpt+0x4>
    80011f9c:	1479                	addi	s0,s0,-2
    80011f9e:	00143413          	seqz	s0,s0
    80011fa2:	bf19                	j	80011eb8 <external_interrupt_MEI+0x98a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011fa4:	57fd                	li	a5,-1
    80011fa6:	6498                	ld	a4,8(s1)
    80011fa8:	17fe                	slli	a5,a5,0x3f
    80011faa:	07ad                	addi	a5,a5,11
    80011fac:	bcf719e3          	bne	a4,a5,80011b7e <external_interrupt_MEI+0x650>
    80011fb0:	0004a417          	auipc	s0,0x4a
    80011fb4:	06442403          	lw	s0,100(s0) # 8005c014 <excpt+0x4>
    80011fb8:	1475                	addi	s0,s0,-3
    80011fba:	00143413          	seqz	s0,s0
    80011fbe:	b6c1                	j	80011b7e <external_interrupt_MEI+0x650>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011fc0:	0004a717          	auipc	a4,0x4a
    80011fc4:	05472703          	lw	a4,84(a4) # 8005c014 <excpt+0x4>
    80011fc8:	4789                	li	a5,2
    80011fca:	ecf713e3          	bne	a4,a5,80011e90 <external_interrupt_MEI+0x962>
    80011fce:	bdd9                	j	80011ea4 <external_interrupt_MEI+0x976>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011fd0:	0004a717          	auipc	a4,0x4a
    80011fd4:	04472703          	lw	a4,68(a4) # 8005c014 <excpt+0x4>
    80011fd8:	478d                	li	a5,3
    80011fda:	b6f71de3          	bne	a4,a5,80011b54 <external_interrupt_MEI+0x626>
    80011fde:	b669                	j	80011b68 <external_interrupt_MEI+0x63a>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011fe0:	00020517          	auipc	a0,0x20
    80011fe4:	72050513          	addi	a0,a0,1824 # 80032700 <__func__.0+0x318>
    80011fe8:	4dc1d0ef          	jal	8002f4c4 <printf>
    80011fec:	02900513          	li	a0,41
    80011ff0:	1c21c0ef          	jal	8002e1b2 <putchar>
    80011ff4:	b101                	j	80011bf4 <external_interrupt_MEI+0x6c6>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80011ff6:	00020517          	auipc	a0,0x20
    80011ffa:	70a50513          	addi	a0,a0,1802 # 80032700 <__func__.0+0x318>
    80011ffe:	4c61d0ef          	jal	8002f4c4 <printf>
    80012002:	02900513          	li	a0,41
    80012006:	1ac1c0ef          	jal	8002e1b2 <putchar>
    8001200a:	bbe5                	j	80011e02 <external_interrupt_MEI+0x8d4>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8001200c:	00020517          	auipc	a0,0x20
    80012010:	6f450513          	addi	a0,a0,1780 # 80032700 <__func__.0+0x318>
    80012014:	4b01d0ef          	jal	8002f4c4 <printf>
    80012018:	02900513          	li	a0,41
    8001201c:	1961c0ef          	jal	8002e1b2 <putchar>
    80012020:	e64ff06f          	j	80011684 <external_interrupt_MEI+0x156>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012024:	00020517          	auipc	a0,0x20
    80012028:	6dc50513          	addi	a0,a0,1756 # 80032700 <__func__.0+0x318>
    8001202c:	4981d0ef          	jal	8002f4c4 <printf>
    80012030:	02900513          	li	a0,41
    80012034:	17e1c0ef          	jal	8002e1b2 <putchar>
    80012038:	bddd                	j	80011f2e <external_interrupt_MEI+0xa00>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8001203a:	00020517          	auipc	a0,0x20
    8001203e:	6c650513          	addi	a0,a0,1734 # 80032700 <__func__.0+0x318>
    80012042:	4821d0ef          	jal	8002f4c4 <printf>
    80012046:	02900513          	li	a0,41
    8001204a:	1681c0ef          	jal	8002e1b2 <putchar>
    8001204e:	bca5                	j	80011ac6 <external_interrupt_MEI+0x598>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    80012050:	00020517          	auipc	a0,0x20
    80012054:	6b050513          	addi	a0,a0,1712 # 80032700 <__func__.0+0x318>
    80012058:	46c1d0ef          	jal	8002f4c4 <printf>
    8001205c:	02900513          	li	a0,41
    80012060:	1521c0ef          	jal	8002e1b2 <putchar>
    80012064:	855ff06f          	j	800118b8 <external_interrupt_MEI+0x38a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    80012068:	00020517          	auipc	a0,0x20
    8001206c:	69850513          	addi	a0,a0,1688 # 80032700 <__func__.0+0x318>
    80012070:	4541d0ef          	jal	8002f4c4 <printf>
    80012074:	02900513          	li	a0,41
    80012078:	13a1c0ef          	jal	8002e1b2 <putchar>
    8001207c:	fbcff06f          	j	80011838 <external_interrupt_MEI+0x30a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    80012080:	00020517          	auipc	a0,0x20
    80012084:	68050513          	addi	a0,a0,1664 # 80032700 <__func__.0+0x318>
    80012088:	43c1d0ef          	jal	8002f4c4 <printf>
    8001208c:	02900513          	li	a0,41
    80012090:	1221c0ef          	jal	8002e1b2 <putchar>
    80012094:	f24ff06f          	j	800117b8 <external_interrupt_MEI+0x28a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012098:	0004a717          	auipc	a4,0x4a
    8001209c:	f7c72703          	lw	a4,-132(a4) # 8005c014 <excpt+0x4>
    800120a0:	478d                	li	a5,3
    800120a2:	00020597          	auipc	a1,0x20
    800120a6:	60658593          	addi	a1,a1,1542 # 800326a8 <__func__.0+0x2c0>
    800120aa:	a8f704e3          	beq	a4,a5,80011b32 <external_interrupt_MEI+0x604>
    800120ae:	00020597          	auipc	a1,0x20
    800120b2:	60a58593          	addi	a1,a1,1546 # 800326b8 <__func__.0+0x2d0>
    800120b6:	bcb5                	j	80011b32 <external_interrupt_MEI+0x604>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    800120b8:	0004a717          	auipc	a4,0x4a
    800120bc:	f5c72703          	lw	a4,-164(a4) # 8005c014 <excpt+0x4>
    800120c0:	4789                	li	a5,2
    800120c2:	00020597          	auipc	a1,0x20
    800120c6:	5e658593          	addi	a1,a1,1510 # 800326a8 <__func__.0+0x2c0>
    800120ca:	daf702e3          	beq	a4,a5,80011e6e <external_interrupt_MEI+0x940>
    800120ce:	00020597          	auipc	a1,0x20
    800120d2:	5ea58593          	addi	a1,a1,1514 # 800326b8 <__func__.0+0x2d0>
    800120d6:	bb61                	j	80011e6e <external_interrupt_MEI+0x940>

00000000800120d8 <external_interrupt_SEI>:


bool external_interrupt_SEI() {
    800120d8:	1101                	addi	sp,sp,-32

    TEST_START();
    800120da:	0001f597          	auipc	a1,0x1f
    800120de:	a0e58593          	addi	a1,a1,-1522 # 80030ae8 <__func__.1>
    800120e2:	00020517          	auipc	a0,0x20
    800120e6:	5e650513          	addi	a0,a0,1510 # 800326c8 <__func__.0+0x2e0>
bool external_interrupt_SEI() {
    800120ea:	ec06                	sd	ra,24(sp)
    800120ec:	e822                	sd	s0,16(sp)
    800120ee:	e426                	sd	s1,8(sp)
    TEST_START();
    800120f0:	3d41d0ef          	jal	8002f4c4 <printf>
    800120f4:	4529                	li	a0,10
    800120f6:	0bc1c0ef          	jal	8002e1b2 <putchar>

    TEST_SETUP_EXCEPT();
    800120fa:	d1fee0ef          	jal	80000e18 <test_setup_except_function>

   
    //HS模式下产生单bit外部中断，sstatus.sie=1，且mip，sie对应的SEIP、SEIE拉高
    goto_priv(PRIV_HS);
    800120fe:	450d                	li	a0,3
    80012100:	e15ee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     //sie位
    80012104:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    80012108:	20000793          	li	a5,512
    8001210c:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80012110:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    80012114:	450d                	li	a0,3
    80012116:	dffee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001211a:	08c00593          	li	a1,140
    8001211e:	00024617          	auipc	a2,0x24
    80012122:	3a260613          	addi	a2,a2,930 # 800364c0 <__func__.0+0x40d8>
    80012126:	00020517          	auipc	a0,0x20
    8001212a:	5ba50513          	addi	a0,a0,1466 # 800326e0 <__func__.0+0x2f8>
    8001212e:	3961d0ef          	jal	8002f4c4 <printf>
    80012132:	0004a797          	auipc	a5,0x4a
    80012136:	edf7c783          	lbu	a5,-289(a5) # 8005c011 <excpt+0x1>
    8001213a:	0004a497          	auipc	s1,0x4a
    8001213e:	ed648493          	addi	s1,s1,-298 # 8005c010 <excpt>
    80012142:	00020597          	auipc	a1,0x20
    80012146:	57658593          	addi	a1,a1,1398 # 800326b8 <__func__.0+0x2d0>
    8001214a:	c799                	beqz	a5,80012158 <external_interrupt_SEI+0x80>
    8001214c:	57fd                	li	a5,-1
    8001214e:	6498                	ld	a4,8(s1)
    80012150:	17fe                	slli	a5,a5,0x3f
    80012152:	07a5                	addi	a5,a5,9
    80012154:	74f70763          	beq	a4,a5,800128a2 <external_interrupt_SEI+0x7ca>
    80012158:	00020517          	auipc	a0,0x20
    8001215c:	5a050513          	addi	a0,a0,1440 # 800326f8 <__func__.0+0x310>
    80012160:	3641d0ef          	jal	8002f4c4 <printf>
    80012164:	0004a797          	auipc	a5,0x4a
    80012168:	ead7c783          	lbu	a5,-339(a5) # 8005c011 <excpt+0x1>
    8001216c:	c799                	beqz	a5,8001217a <external_interrupt_SEI+0xa2>
    8001216e:	57fd                	li	a5,-1
    80012170:	6498                	ld	a4,8(s1)
    80012172:	17fe                	slli	a5,a5,0x3f
    80012174:	07a5                	addi	a5,a5,9
    80012176:	5ef70f63          	beq	a4,a5,80012774 <external_interrupt_SEI+0x69c>
    8001217a:	00020517          	auipc	a0,0x20
    8001217e:	58650513          	addi	a0,a0,1414 # 80032700 <__func__.0+0x318>
    80012182:	3421d0ef          	jal	8002f4c4 <printf>
    80012186:	02900513          	li	a0,41
    8001218a:	0281c0ef          	jal	8002e1b2 <putchar>
    8001218e:	4529                	li	a0,10
    80012190:	0221c0ef          	jal	8002e1b2 <putchar>
    80012194:	0004a797          	auipc	a5,0x4a
    80012198:	e7d7c783          	lbu	a5,-387(a5) # 8005c011 <excpt+0x1>
    8001219c:	4401                	li	s0,0
    8001219e:	c799                	beqz	a5,800121ac <external_interrupt_SEI+0xd4>
    800121a0:	57fd                	li	a5,-1
    800121a2:	6498                	ld	a4,8(s1)
    800121a4:	17fe                	slli	a5,a5,0x3f
    800121a6:	07a5                	addi	a5,a5,9
    800121a8:	6af70563          	beq	a4,a5,80012852 <external_interrupt_SEI+0x77a>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=1，sie.SEIE=0
    TEST_SETUP_EXCEPT();
    800121ac:	c6dee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_HS);
    800121b0:	450d                	li	a0,3
    800121b2:	d63ee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800121b6:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800121ba:	20000793          	li	a5,512
    800121be:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    800121c2:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    800121c6:	450d                	li	a0,3
    800121c8:	d4dee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800121cc:	08c00593          	li	a1,140
    800121d0:	00024617          	auipc	a2,0x24
    800121d4:	35060613          	addi	a2,a2,848 # 80036520 <__func__.0+0x4138>
    800121d8:	00020517          	auipc	a0,0x20
    800121dc:	50850513          	addi	a0,a0,1288 # 800326e0 <__func__.0+0x2f8>
    800121e0:	2e41d0ef          	jal	8002f4c4 <printf>
    800121e4:	0004a797          	auipc	a5,0x4a
    800121e8:	e2d7c783          	lbu	a5,-467(a5) # 8005c011 <excpt+0x1>
    800121ec:	00020597          	auipc	a1,0x20
    800121f0:	4cc58593          	addi	a1,a1,1228 # 800326b8 <__func__.0+0x2d0>
    800121f4:	e789                	bnez	a5,800121fe <external_interrupt_SEI+0x126>
    800121f6:	00020597          	auipc	a1,0x20
    800121fa:	4b258593          	addi	a1,a1,1202 # 800326a8 <__func__.0+0x2c0>
    800121fe:	00020517          	auipc	a0,0x20
    80012202:	4fa50513          	addi	a0,a0,1274 # 800326f8 <__func__.0+0x310>
    80012206:	2be1d0ef          	jal	8002f4c4 <printf>
    8001220a:	0004a797          	auipc	a5,0x4a
    8001220e:	e077c783          	lbu	a5,-505(a5) # 8005c011 <excpt+0x1>
    80012212:	5a079f63          	bnez	a5,800127d0 <external_interrupt_SEI+0x6f8>
    80012216:	4529                	li	a0,10
    80012218:	79b1b0ef          	jal	8002e1b2 <putchar>
    8001221c:	c419                	beqz	s0,8001222a <external_interrupt_SEI+0x152>
    8001221e:	0004a417          	auipc	s0,0x4a
    80012222:	df344403          	lbu	s0,-525(s0) # 8005c011 <excpt+0x1>
    80012226:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=0，sie.SEIE=1
    TEST_SETUP_EXCEPT();
    8001222a:	befee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001222e:	4511                	li	a0,4
    80012230:	ce5ee0ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    80012234:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012238:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8001223c:	20000793          	li	a5,512
    80012240:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012244:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    80012248:	450d                	li	a0,3
    8001224a:	ccbee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001224e:	08c00593          	li	a1,140
    80012252:	00024617          	auipc	a2,0x24
    80012256:	31e60613          	addi	a2,a2,798 # 80036570 <__func__.0+0x4188>
    8001225a:	00020517          	auipc	a0,0x20
    8001225e:	48650513          	addi	a0,a0,1158 # 800326e0 <__func__.0+0x2f8>
    80012262:	2621d0ef          	jal	8002f4c4 <printf>
    80012266:	0004a797          	auipc	a5,0x4a
    8001226a:	dab7c783          	lbu	a5,-597(a5) # 8005c011 <excpt+0x1>
    8001226e:	00020597          	auipc	a1,0x20
    80012272:	44a58593          	addi	a1,a1,1098 # 800326b8 <__func__.0+0x2d0>
    80012276:	c799                	beqz	a5,80012284 <external_interrupt_SEI+0x1ac>
    80012278:	57fd                	li	a5,-1
    8001227a:	6498                	ld	a4,8(s1)
    8001227c:	17fe                	slli	a5,a5,0x3f
    8001227e:	07a5                	addi	a5,a5,9
    80012280:	5ef70163          	beq	a4,a5,80012862 <external_interrupt_SEI+0x78a>
    80012284:	00020517          	auipc	a0,0x20
    80012288:	47450513          	addi	a0,a0,1140 # 800326f8 <__func__.0+0x310>
    8001228c:	2381d0ef          	jal	8002f4c4 <printf>
    80012290:	0004a797          	auipc	a5,0x4a
    80012294:	d817c783          	lbu	a5,-639(a5) # 8005c011 <excpt+0x1>
    80012298:	c799                	beqz	a5,800122a6 <external_interrupt_SEI+0x1ce>
    8001229a:	57fd                	li	a5,-1
    8001229c:	6498                	ld	a4,8(s1)
    8001229e:	17fe                	slli	a5,a5,0x3f
    800122a0:	07a5                	addi	a5,a5,9
    800122a2:	4cf70163          	beq	a4,a5,80012764 <external_interrupt_SEI+0x68c>
    800122a6:	00020517          	auipc	a0,0x20
    800122aa:	45a50513          	addi	a0,a0,1114 # 80032700 <__func__.0+0x318>
    800122ae:	2161d0ef          	jal	8002f4c4 <printf>
    800122b2:	02900513          	li	a0,41
    800122b6:	6fd1b0ef          	jal	8002e1b2 <putchar>
    800122ba:	4529                	li	a0,10
    800122bc:	6f71b0ef          	jal	8002e1b2 <putchar>
    800122c0:	c801                	beqz	s0,800122d0 <external_interrupt_SEI+0x1f8>
    800122c2:	0004a797          	auipc	a5,0x4a
    800122c6:	d4f7c783          	lbu	a5,-689(a5) # 8005c011 <excpt+0x1>
    800122ca:	4401                	li	s0,0
    800122cc:	46079663          	bnez	a5,80012738 <external_interrupt_SEI+0x660>
    //     excpt.priv == PRIV_HS
    // ); 
    

    //HS模式下产生单bit外部中断，sstatus.mie=1，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    800122d0:	b49ee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800122d4:	4511                	li	a0,4
    800122d6:	c3fee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1)     
    800122da:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800122de:	20000793          	li	a5,512
    800122e2:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800122e6:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    800122ea:	450d                	li	a0,3
    800122ec:	c29ee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    800122f0:	08c00593          	li	a1,140
    800122f4:	00024617          	auipc	a2,0x24
    800122f8:	2dc60613          	addi	a2,a2,732 # 800365d0 <__func__.0+0x41e8>
    800122fc:	00020517          	auipc	a0,0x20
    80012300:	3e450513          	addi	a0,a0,996 # 800326e0 <__func__.0+0x2f8>
    80012304:	1c01d0ef          	jal	8002f4c4 <printf>
    80012308:	0004a797          	auipc	a5,0x4a
    8001230c:	d097c783          	lbu	a5,-759(a5) # 8005c011 <excpt+0x1>
    80012310:	00020597          	auipc	a1,0x20
    80012314:	3a858593          	addi	a1,a1,936 # 800326b8 <__func__.0+0x2d0>
    80012318:	e789                	bnez	a5,80012322 <external_interrupt_SEI+0x24a>
    8001231a:	00020597          	auipc	a1,0x20
    8001231e:	38e58593          	addi	a1,a1,910 # 800326a8 <__func__.0+0x2c0>
    80012322:	00020517          	auipc	a0,0x20
    80012326:	3d650513          	addi	a0,a0,982 # 800326f8 <__func__.0+0x310>
    8001232a:	19a1d0ef          	jal	8002f4c4 <printf>
    8001232e:	0004a797          	auipc	a5,0x4a
    80012332:	ce37c783          	lbu	a5,-797(a5) # 8005c011 <excpt+0x1>
    80012336:	48079263          	bnez	a5,800127ba <external_interrupt_SEI+0x6e2>
    8001233a:	4529                	li	a0,10
    8001233c:	6771b0ef          	jal	8002e1b2 <putchar>
    80012340:	c419                	beqz	s0,8001234e <external_interrupt_SEI+0x276>
    80012342:	0004a417          	auipc	s0,0x4a
    80012346:	ccf44403          	lbu	s0,-817(s0) # 8005c011 <excpt+0x1>
    8001234a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //HS模式下产生单bit外部中断，sstatus.sie=0，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    8001234e:	acbee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012352:	4511                	li	a0,4
    80012354:	bc1ee0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1)     
    80012358:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8001235c:	20000793          	li	a5,512
    80012360:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012364:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    80012368:	450d                	li	a0,3
    8001236a:	babee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    8001236e:	08c00593          	li	a1,140
    80012372:	00024617          	auipc	a2,0x24
    80012376:	2ae60613          	addi	a2,a2,686 # 80036620 <__func__.0+0x4238>
    8001237a:	00020517          	auipc	a0,0x20
    8001237e:	36650513          	addi	a0,a0,870 # 800326e0 <__func__.0+0x2f8>
    80012382:	1421d0ef          	jal	8002f4c4 <printf>
    80012386:	0004a797          	auipc	a5,0x4a
    8001238a:	c8b7c783          	lbu	a5,-885(a5) # 8005c011 <excpt+0x1>
    8001238e:	00020597          	auipc	a1,0x20
    80012392:	32a58593          	addi	a1,a1,810 # 800326b8 <__func__.0+0x2d0>
    80012396:	e789                	bnez	a5,800123a0 <external_interrupt_SEI+0x2c8>
    80012398:	00020597          	auipc	a1,0x20
    8001239c:	31058593          	addi	a1,a1,784 # 800326a8 <__func__.0+0x2c0>
    800123a0:	00020517          	auipc	a0,0x20
    800123a4:	35850513          	addi	a0,a0,856 # 800326f8 <__func__.0+0x310>
    800123a8:	11c1d0ef          	jal	8002f4c4 <printf>
    800123ac:	0004a797          	auipc	a5,0x4a
    800123b0:	c657c783          	lbu	a5,-923(a5) # 8005c011 <excpt+0x1>
    800123b4:	3e079863          	bnez	a5,800127a4 <external_interrupt_SEI+0x6cc>
    800123b8:	4529                	li	a0,10
    800123ba:	5f91b0ef          	jal	8002e1b2 <putchar>
    800123be:	c419                	beqz	s0,800123cc <external_interrupt_SEI+0x2f4>
    800123c0:	0004a417          	auipc	s0,0x4a
    800123c4:	c5144403          	lbu	s0,-943(s0) # 8005c011 <excpt+0x1>
    800123c8:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //VS模式下产生单bit外部中断，sstatus.sie=1，且sip，sie对应的SEIP、SEIE拉高
    TEST_SETUP_EXCEPT();
    800123cc:	a4dee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800123d0:	4511                	li	a0,4
    800123d2:	b43ee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800123d6:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    800123da:	20000793          	li	a5,512
    800123de:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    800123e2:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    800123e6:	4509                	li	a0,2
    800123e8:	b2dee0ef          	jal	80000f14 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800123ec:	08c00593          	li	a1,140
    800123f0:	00024617          	auipc	a2,0x24
    800123f4:	28060613          	addi	a2,a2,640 # 80036670 <__func__.0+0x4288>
    800123f8:	00020517          	auipc	a0,0x20
    800123fc:	2e850513          	addi	a0,a0,744 # 800326e0 <__func__.0+0x2f8>
    80012400:	0c41d0ef          	jal	8002f4c4 <printf>
    80012404:	0004a797          	auipc	a5,0x4a
    80012408:	c0d7c783          	lbu	a5,-1011(a5) # 8005c011 <excpt+0x1>
    8001240c:	00020597          	auipc	a1,0x20
    80012410:	2ac58593          	addi	a1,a1,684 # 800326b8 <__func__.0+0x2d0>
    80012414:	c799                	beqz	a5,80012422 <external_interrupt_SEI+0x34a>
    80012416:	57fd                	li	a5,-1
    80012418:	6498                	ld	a4,8(s1)
    8001241a:	17fe                	slli	a5,a5,0x3f
    8001241c:	07a5                	addi	a5,a5,9
    8001241e:	40f70a63          	beq	a4,a5,80012832 <external_interrupt_SEI+0x75a>
    80012422:	00020517          	auipc	a0,0x20
    80012426:	2d650513          	addi	a0,a0,726 # 800326f8 <__func__.0+0x310>
    8001242a:	09a1d0ef          	jal	8002f4c4 <printf>
    8001242e:	0004a797          	auipc	a5,0x4a
    80012432:	be37c783          	lbu	a5,-1053(a5) # 8005c011 <excpt+0x1>
    80012436:	c799                	beqz	a5,80012444 <external_interrupt_SEI+0x36c>
    80012438:	57fd                	li	a5,-1
    8001243a:	6498                	ld	a4,8(s1)
    8001243c:	17fe                	slli	a5,a5,0x3f
    8001243e:	07a5                	addi	a5,a5,9
    80012440:	30f70a63          	beq	a4,a5,80012754 <external_interrupt_SEI+0x67c>
    80012444:	00020517          	auipc	a0,0x20
    80012448:	2bc50513          	addi	a0,a0,700 # 80032700 <__func__.0+0x318>
    8001244c:	0781d0ef          	jal	8002f4c4 <printf>
    80012450:	02900513          	li	a0,41
    80012454:	55f1b0ef          	jal	8002e1b2 <putchar>
    80012458:	4529                	li	a0,10
    8001245a:	5591b0ef          	jal	8002e1b2 <putchar>
    8001245e:	c801                	beqz	s0,8001246e <external_interrupt_SEI+0x396>
    80012460:	0004a797          	auipc	a5,0x4a
    80012464:	bb17c783          	lbu	a5,-1103(a5) # 8005c011 <excpt+0x1>
    80012468:	4401                	li	s0,0
    8001246a:	2a079963          	bnez	a5,8001271c <external_interrupt_SEI+0x644>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=1，sie=0
    TEST_SETUP_EXCEPT();
    8001246e:	9abee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012472:	4511                	li	a0,4
    80012474:	aa1ee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012478:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8001247c:	20000793          	li	a5,512
    80012480:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80012484:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    80012488:	4509                	li	a0,2
    8001248a:	a8bee0ef          	jal	80000f14 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8001248e:	08c00593          	li	a1,140
    80012492:	00024617          	auipc	a2,0x24
    80012496:	23660613          	addi	a2,a2,566 # 800366c8 <__func__.0+0x42e0>
    8001249a:	00020517          	auipc	a0,0x20
    8001249e:	24650513          	addi	a0,a0,582 # 800326e0 <__func__.0+0x2f8>
    800124a2:	0221d0ef          	jal	8002f4c4 <printf>
    800124a6:	0004a797          	auipc	a5,0x4a
    800124aa:	b6b7c783          	lbu	a5,-1173(a5) # 8005c011 <excpt+0x1>
    800124ae:	00020597          	auipc	a1,0x20
    800124b2:	20a58593          	addi	a1,a1,522 # 800326b8 <__func__.0+0x2d0>
    800124b6:	c799                	beqz	a5,800124c4 <external_interrupt_SEI+0x3ec>
    800124b8:	57fd                	li	a5,-1
    800124ba:	6498                	ld	a4,8(s1)
    800124bc:	17fe                	slli	a5,a5,0x3f
    800124be:	07a5                	addi	a5,a5,9
    800124c0:	34f70963          	beq	a4,a5,80012812 <external_interrupt_SEI+0x73a>
    800124c4:	00020517          	auipc	a0,0x20
    800124c8:	23450513          	addi	a0,a0,564 # 800326f8 <__func__.0+0x310>
    800124cc:	7f91c0ef          	jal	8002f4c4 <printf>
    800124d0:	0004a797          	auipc	a5,0x4a
    800124d4:	b417c783          	lbu	a5,-1215(a5) # 8005c011 <excpt+0x1>
    800124d8:	c799                	beqz	a5,800124e6 <external_interrupt_SEI+0x40e>
    800124da:	57fd                	li	a5,-1
    800124dc:	6498                	ld	a4,8(s1)
    800124de:	17fe                	slli	a5,a5,0x3f
    800124e0:	07a5                	addi	a5,a5,9
    800124e2:	2af70963          	beq	a4,a5,80012794 <external_interrupt_SEI+0x6bc>
    800124e6:	00020517          	auipc	a0,0x20
    800124ea:	21a50513          	addi	a0,a0,538 # 80032700 <__func__.0+0x318>
    800124ee:	7d71c0ef          	jal	8002f4c4 <printf>
    800124f2:	02900513          	li	a0,41
    800124f6:	4bd1b0ef          	jal	8002e1b2 <putchar>
    800124fa:	4529                	li	a0,10
    800124fc:	4b71b0ef          	jal	8002e1b2 <putchar>
    80012500:	c801                	beqz	s0,80012510 <external_interrupt_SEI+0x438>
    80012502:	0004a797          	auipc	a5,0x4a
    80012506:	b0f7c783          	lbu	a5,-1265(a5) # 8005c011 <excpt+0x1>
    8001250a:	4401                	li	s0,0
    8001250c:	1e079a63          	bnez	a5,80012700 <external_interrupt_SEI+0x628>
        excpt.cause == CAUSE_SEI &&
        excpt.priv == PRIV_M
    ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=1
    TEST_SETUP_EXCEPT();
    80012510:	909ee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012514:	4511                	li	a0,4
    80012516:	9ffee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8001251a:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8001251e:	20000793          	li	a5,512
    80012522:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012526:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8001252a:	4509                	li	a0,2
    8001252c:	9e9ee0ef          	jal	80000f14 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012530:	08c00593          	li	a1,140
    80012534:	00024617          	auipc	a2,0x24
    80012538:	1ec60613          	addi	a2,a2,492 # 80036720 <__func__.0+0x4338>
    8001253c:	00020517          	auipc	a0,0x20
    80012540:	1a450513          	addi	a0,a0,420 # 800326e0 <__func__.0+0x2f8>
    80012544:	7811c0ef          	jal	8002f4c4 <printf>
    80012548:	0004a797          	auipc	a5,0x4a
    8001254c:	ac97c783          	lbu	a5,-1335(a5) # 8005c011 <excpt+0x1>
    80012550:	00020597          	auipc	a1,0x20
    80012554:	16858593          	addi	a1,a1,360 # 800326b8 <__func__.0+0x2d0>
    80012558:	c799                	beqz	a5,80012566 <external_interrupt_SEI+0x48e>
    8001255a:	57fd                	li	a5,-1
    8001255c:	6498                	ld	a4,8(s1)
    8001255e:	17fe                	slli	a5,a5,0x3f
    80012560:	07a5                	addi	a5,a5,9
    80012562:	32f70063          	beq	a4,a5,80012882 <external_interrupt_SEI+0x7aa>
    80012566:	00020517          	auipc	a0,0x20
    8001256a:	19250513          	addi	a0,a0,402 # 800326f8 <__func__.0+0x310>
    8001256e:	7571c0ef          	jal	8002f4c4 <printf>
    80012572:	0004a797          	auipc	a5,0x4a
    80012576:	a9f7c783          	lbu	a5,-1377(a5) # 8005c011 <excpt+0x1>
    8001257a:	c799                	beqz	a5,80012588 <external_interrupt_SEI+0x4b0>
    8001257c:	57fd                	li	a5,-1
    8001257e:	6498                	ld	a4,8(s1)
    80012580:	17fe                	slli	a5,a5,0x3f
    80012582:	07a5                	addi	a5,a5,9
    80012584:	20f70063          	beq	a4,a5,80012784 <external_interrupt_SEI+0x6ac>
    80012588:	00020517          	auipc	a0,0x20
    8001258c:	17850513          	addi	a0,a0,376 # 80032700 <__func__.0+0x318>
    80012590:	7351c0ef          	jal	8002f4c4 <printf>
    80012594:	02900513          	li	a0,41
    80012598:	41b1b0ef          	jal	8002e1b2 <putchar>
    8001259c:	4529                	li	a0,10
    8001259e:	4151b0ef          	jal	8002e1b2 <putchar>
    800125a2:	c801                	beqz	s0,800125b2 <external_interrupt_SEI+0x4da>
    800125a4:	0004a797          	auipc	a5,0x4a
    800125a8:	a6d7c783          	lbu	a5,-1427(a5) # 8005c011 <excpt+0x1>
    800125ac:	4401                	li	s0,0
    800125ae:	12079b63          	bnez	a5,800126e4 <external_interrupt_SEI+0x60c>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    800125b2:	867ee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800125b6:	4511                	li	a0,4
    800125b8:	95dee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800125bc:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800125c0:	20000793          	li	a5,512
    800125c4:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800125c8:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    800125cc:	4509                	li	a0,2
    800125ce:	947ee0ef          	jal	80000f14 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800125d2:	08c00593          	li	a1,140
    800125d6:	00024617          	auipc	a2,0x24
    800125da:	1a260613          	addi	a2,a2,418 # 80036778 <__func__.0+0x4390>
    800125de:	00020517          	auipc	a0,0x20
    800125e2:	10250513          	addi	a0,a0,258 # 800326e0 <__func__.0+0x2f8>
    800125e6:	6df1c0ef          	jal	8002f4c4 <printf>
    800125ea:	0004a797          	auipc	a5,0x4a
    800125ee:	a277c783          	lbu	a5,-1497(a5) # 8005c011 <excpt+0x1>
    800125f2:	00020597          	auipc	a1,0x20
    800125f6:	0c658593          	addi	a1,a1,198 # 800326b8 <__func__.0+0x2d0>
    800125fa:	e789                	bnez	a5,80012604 <external_interrupt_SEI+0x52c>
    800125fc:	00020597          	auipc	a1,0x20
    80012600:	0ac58593          	addi	a1,a1,172 # 800326a8 <__func__.0+0x2c0>
    80012604:	00020517          	auipc	a0,0x20
    80012608:	0f450513          	addi	a0,a0,244 # 800326f8 <__func__.0+0x310>
    8001260c:	6b91c0ef          	jal	8002f4c4 <printf>
    80012610:	0004a797          	auipc	a5,0x4a
    80012614:	a017c783          	lbu	a5,-1535(a5) # 8005c011 <excpt+0x1>
    80012618:	1e079263          	bnez	a5,800127fc <external_interrupt_SEI+0x724>
    8001261c:	4529                	li	a0,10
    8001261e:	3951b0ef          	jal	8002e1b2 <putchar>
    80012622:	c419                	beqz	s0,80012630 <external_interrupt_SEI+0x558>
    80012624:	0004a417          	auipc	s0,0x4a
    80012628:	9ed44403          	lbu	s0,-1555(s0) # 8005c011 <excpt+0x1>
    8001262c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=0，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    80012630:	fe8ee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012634:	4511                	li	a0,4
    80012636:	8dfee0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1);     
    8001263a:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8001263e:	20000793          	li	a5,512
    80012642:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012646:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8001264a:	4509                	li	a0,2
    8001264c:	8c9ee0ef          	jal	80000f14 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80012650:	08c00593          	li	a1,140
    80012654:	00024617          	auipc	a2,0x24
    80012658:	12460613          	addi	a2,a2,292 # 80036778 <__func__.0+0x4390>
    8001265c:	00020517          	auipc	a0,0x20
    80012660:	08450513          	addi	a0,a0,132 # 800326e0 <__func__.0+0x2f8>
    80012664:	6611c0ef          	jal	8002f4c4 <printf>
    80012668:	0004a797          	auipc	a5,0x4a
    8001266c:	9a97c783          	lbu	a5,-1623(a5) # 8005c011 <excpt+0x1>
    80012670:	00020597          	auipc	a1,0x20
    80012674:	04858593          	addi	a1,a1,72 # 800326b8 <__func__.0+0x2d0>
    80012678:	e789                	bnez	a5,80012682 <external_interrupt_SEI+0x5aa>
    8001267a:	00020597          	auipc	a1,0x20
    8001267e:	02e58593          	addi	a1,a1,46 # 800326a8 <__func__.0+0x2c0>
    80012682:	00020517          	auipc	a0,0x20
    80012686:	07650513          	addi	a0,a0,118 # 800326f8 <__func__.0+0x310>
    8001268a:	63b1c0ef          	jal	8002f4c4 <printf>
    8001268e:	0004a797          	auipc	a5,0x4a
    80012692:	9837c783          	lbu	a5,-1661(a5) # 8005c011 <excpt+0x1>
    80012696:	14079863          	bnez	a5,800127e6 <external_interrupt_SEI+0x70e>
    8001269a:	4529                	li	a0,10
    8001269c:	3171b0ef          	jal	8002e1b2 <putchar>
    800126a0:	c411                	beqz	s0,800126ac <external_interrupt_SEI+0x5d4>
    800126a2:	0004a797          	auipc	a5,0x4a
    800126a6:	96f7c783          	lbu	a5,-1681(a5) # 8005c011 <excpt+0x1>
    800126aa:	c79d                	beqz	a5,800126d8 <external_interrupt_SEI+0x600>
    800126ac:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    800126ae:	00020597          	auipc	a1,0x20
    800126b2:	00a58593          	addi	a1,a1,10 # 800326b8 <__func__.0+0x2d0>
    800126b6:	00020517          	auipc	a0,0x20
    800126ba:	0aa50513          	addi	a0,a0,170 # 80032760 <__func__.0+0x378>
    800126be:	6071c0ef          	jal	8002f4c4 <printf>
    800126c2:	4511                	li	a0,4
    800126c4:	851ee0ef          	jal	80000f14 <goto_priv>
    800126c8:	8aeef0ef          	jal	80001776 <reset_state>
}
    800126cc:	60e2                	ld	ra,24(sp)
    800126ce:	8522                	mv	a0,s0
    800126d0:	6442                	ld	s0,16(sp)
    800126d2:	64a2                	ld	s1,8(sp)
    800126d4:	6105                	addi	sp,sp,32
    800126d6:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800126d8:	4405                	li	s0,1
    TEST_END();
    800126da:	00020597          	auipc	a1,0x20
    800126de:	fce58593          	addi	a1,a1,-50 # 800326a8 <__func__.0+0x2c0>
    800126e2:	bfd1                	j	800126b6 <external_interrupt_SEI+0x5de>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800126e4:	57fd                	li	a5,-1
    800126e6:	6498                	ld	a4,8(s1)
    800126e8:	17fe                	slli	a5,a5,0x3f
    800126ea:	07a5                	addi	a5,a5,9
    800126ec:	ecf713e3          	bne	a4,a5,800125b2 <external_interrupt_SEI+0x4da>
    800126f0:	0004a417          	auipc	s0,0x4a
    800126f4:	92442403          	lw	s0,-1756(s0) # 8005c014 <excpt+0x4>
    800126f8:	1471                	addi	s0,s0,-4
    800126fa:	00143413          	seqz	s0,s0
    800126fe:	bd55                	j	800125b2 <external_interrupt_SEI+0x4da>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012700:	57fd                	li	a5,-1
    80012702:	6498                	ld	a4,8(s1)
    80012704:	17fe                	slli	a5,a5,0x3f
    80012706:	07a5                	addi	a5,a5,9
    80012708:	e0f714e3          	bne	a4,a5,80012510 <external_interrupt_SEI+0x438>
    8001270c:	0004a417          	auipc	s0,0x4a
    80012710:	90842403          	lw	s0,-1784(s0) # 8005c014 <excpt+0x4>
    80012714:	1471                	addi	s0,s0,-4
    80012716:	00143413          	seqz	s0,s0
    8001271a:	bbdd                	j	80012510 <external_interrupt_SEI+0x438>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001271c:	57fd                	li	a5,-1
    8001271e:	6498                	ld	a4,8(s1)
    80012720:	17fe                	slli	a5,a5,0x3f
    80012722:	07a5                	addi	a5,a5,9
    80012724:	d4f715e3          	bne	a4,a5,8001246e <external_interrupt_SEI+0x396>
    80012728:	0004a417          	auipc	s0,0x4a
    8001272c:	8ec42403          	lw	s0,-1812(s0) # 8005c014 <excpt+0x4>
    80012730:	1471                	addi	s0,s0,-4
    80012732:	00143413          	seqz	s0,s0
    80012736:	bb25                	j	8001246e <external_interrupt_SEI+0x396>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012738:	57fd                	li	a5,-1
    8001273a:	6498                	ld	a4,8(s1)
    8001273c:	17fe                	slli	a5,a5,0x3f
    8001273e:	07a5                	addi	a5,a5,9
    80012740:	b8f718e3          	bne	a4,a5,800122d0 <external_interrupt_SEI+0x1f8>
    80012744:	0004a417          	auipc	s0,0x4a
    80012748:	8d042403          	lw	s0,-1840(s0) # 8005c014 <excpt+0x4>
    8001274c:	1471                	addi	s0,s0,-4
    8001274e:	00143413          	seqz	s0,s0
    80012752:	bebd                	j	800122d0 <external_interrupt_SEI+0x1f8>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80012754:	0004a717          	auipc	a4,0x4a
    80012758:	8c072703          	lw	a4,-1856(a4) # 8005c014 <excpt+0x4>
    8001275c:	4791                	li	a5,4
    8001275e:	cef713e3          	bne	a4,a5,80012444 <external_interrupt_SEI+0x36c>
    80012762:	b9dd                	j	80012458 <external_interrupt_SEI+0x380>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012764:	0004a717          	auipc	a4,0x4a
    80012768:	8b072703          	lw	a4,-1872(a4) # 8005c014 <excpt+0x4>
    8001276c:	4791                	li	a5,4
    8001276e:	b2f71ce3          	bne	a4,a5,800122a6 <external_interrupt_SEI+0x1ce>
    80012772:	b6a1                	j	800122ba <external_interrupt_SEI+0x1e2>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80012774:	0004a717          	auipc	a4,0x4a
    80012778:	8a072703          	lw	a4,-1888(a4) # 8005c014 <excpt+0x4>
    8001277c:	4791                	li	a5,4
    8001277e:	9ef71ee3          	bne	a4,a5,8001217a <external_interrupt_SEI+0xa2>
    80012782:	b431                	j	8001218e <external_interrupt_SEI+0xb6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012784:	0004a717          	auipc	a4,0x4a
    80012788:	89072703          	lw	a4,-1904(a4) # 8005c014 <excpt+0x4>
    8001278c:	4791                	li	a5,4
    8001278e:	def71de3          	bne	a4,a5,80012588 <external_interrupt_SEI+0x4b0>
    80012792:	b529                	j	8001259c <external_interrupt_SEI+0x4c4>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012794:	0004a717          	auipc	a4,0x4a
    80012798:	88072703          	lw	a4,-1920(a4) # 8005c014 <excpt+0x4>
    8001279c:	4791                	li	a5,4
    8001279e:	d4f714e3          	bne	a4,a5,800124e6 <external_interrupt_SEI+0x40e>
    800127a2:	bba1                	j	800124fa <external_interrupt_SEI+0x422>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    800127a4:	00020517          	auipc	a0,0x20
    800127a8:	f5c50513          	addi	a0,a0,-164 # 80032700 <__func__.0+0x318>
    800127ac:	5191c0ef          	jal	8002f4c4 <printf>
    800127b0:	02900513          	li	a0,41
    800127b4:	1ff1b0ef          	jal	8002e1b2 <putchar>
    800127b8:	b101                	j	800123b8 <external_interrupt_SEI+0x2e0>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    800127ba:	00020517          	auipc	a0,0x20
    800127be:	f4650513          	addi	a0,a0,-186 # 80032700 <__func__.0+0x318>
    800127c2:	5031c0ef          	jal	8002f4c4 <printf>
    800127c6:	02900513          	li	a0,41
    800127ca:	1e91b0ef          	jal	8002e1b2 <putchar>
    800127ce:	b6b5                	j	8001233a <external_interrupt_SEI+0x262>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800127d0:	00020517          	auipc	a0,0x20
    800127d4:	f3050513          	addi	a0,a0,-208 # 80032700 <__func__.0+0x318>
    800127d8:	4ed1c0ef          	jal	8002f4c4 <printf>
    800127dc:	02900513          	li	a0,41
    800127e0:	1d31b0ef          	jal	8002e1b2 <putchar>
    800127e4:	bc0d                	j	80012216 <external_interrupt_SEI+0x13e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800127e6:	00020517          	auipc	a0,0x20
    800127ea:	f1a50513          	addi	a0,a0,-230 # 80032700 <__func__.0+0x318>
    800127ee:	4d71c0ef          	jal	8002f4c4 <printf>
    800127f2:	02900513          	li	a0,41
    800127f6:	1bd1b0ef          	jal	8002e1b2 <putchar>
    800127fa:	b545                	j	8001269a <external_interrupt_SEI+0x5c2>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800127fc:	00020517          	auipc	a0,0x20
    80012800:	f0450513          	addi	a0,a0,-252 # 80032700 <__func__.0+0x318>
    80012804:	4c11c0ef          	jal	8002f4c4 <printf>
    80012808:	02900513          	li	a0,41
    8001280c:	1a71b0ef          	jal	8002e1b2 <putchar>
    80012810:	b531                	j	8001261c <external_interrupt_SEI+0x544>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012812:	0004a717          	auipc	a4,0x4a
    80012816:	80272703          	lw	a4,-2046(a4) # 8005c014 <excpt+0x4>
    8001281a:	4791                	li	a5,4
    8001281c:	00020597          	auipc	a1,0x20
    80012820:	e8c58593          	addi	a1,a1,-372 # 800326a8 <__func__.0+0x2c0>
    80012824:	caf700e3          	beq	a4,a5,800124c4 <external_interrupt_SEI+0x3ec>
    80012828:	00020597          	auipc	a1,0x20
    8001282c:	e9058593          	addi	a1,a1,-368 # 800326b8 <__func__.0+0x2d0>
    80012830:	b951                	j	800124c4 <external_interrupt_SEI+0x3ec>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80012832:	00049717          	auipc	a4,0x49
    80012836:	7e272703          	lw	a4,2018(a4) # 8005c014 <excpt+0x4>
    8001283a:	4791                	li	a5,4
    8001283c:	00020597          	auipc	a1,0x20
    80012840:	e6c58593          	addi	a1,a1,-404 # 800326a8 <__func__.0+0x2c0>
    80012844:	bcf70fe3          	beq	a4,a5,80012422 <external_interrupt_SEI+0x34a>
    80012848:	00020597          	auipc	a1,0x20
    8001284c:	e7058593          	addi	a1,a1,-400 # 800326b8 <__func__.0+0x2d0>
    80012850:	bec9                	j	80012422 <external_interrupt_SEI+0x34a>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80012852:	00049417          	auipc	s0,0x49
    80012856:	7c242403          	lw	s0,1986(s0) # 8005c014 <excpt+0x4>
    8001285a:	1471                	addi	s0,s0,-4
    8001285c:	00143413          	seqz	s0,s0
    80012860:	b2b1                	j	800121ac <external_interrupt_SEI+0xd4>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012862:	00049717          	auipc	a4,0x49
    80012866:	7b272703          	lw	a4,1970(a4) # 8005c014 <excpt+0x4>
    8001286a:	4791                	li	a5,4
    8001286c:	00020597          	auipc	a1,0x20
    80012870:	e3c58593          	addi	a1,a1,-452 # 800326a8 <__func__.0+0x2c0>
    80012874:	a0f708e3          	beq	a4,a5,80012284 <external_interrupt_SEI+0x1ac>
    80012878:	00020597          	auipc	a1,0x20
    8001287c:	e4058593          	addi	a1,a1,-448 # 800326b8 <__func__.0+0x2d0>
    80012880:	b411                	j	80012284 <external_interrupt_SEI+0x1ac>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012882:	00049717          	auipc	a4,0x49
    80012886:	79272703          	lw	a4,1938(a4) # 8005c014 <excpt+0x4>
    8001288a:	4791                	li	a5,4
    8001288c:	00020597          	auipc	a1,0x20
    80012890:	e1c58593          	addi	a1,a1,-484 # 800326a8 <__func__.0+0x2c0>
    80012894:	ccf709e3          	beq	a4,a5,80012566 <external_interrupt_SEI+0x48e>
    80012898:	00020597          	auipc	a1,0x20
    8001289c:	e2058593          	addi	a1,a1,-480 # 800326b8 <__func__.0+0x2d0>
    800128a0:	b1d9                	j	80012566 <external_interrupt_SEI+0x48e>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800128a2:	00049717          	auipc	a4,0x49
    800128a6:	77272703          	lw	a4,1906(a4) # 8005c014 <excpt+0x4>
    800128aa:	4791                	li	a5,4
    800128ac:	00020597          	auipc	a1,0x20
    800128b0:	dfc58593          	addi	a1,a1,-516 # 800326a8 <__func__.0+0x2c0>
    800128b4:	8af702e3          	beq	a4,a5,80012158 <external_interrupt_SEI+0x80>
    800128b8:	00020597          	auipc	a1,0x20
    800128bc:	e0058593          	addi	a1,a1,-512 # 800326b8 <__func__.0+0x2d0>
    800128c0:	899ff06f          	j	80012158 <external_interrupt_SEI+0x80>

00000000800128c4 <external_interrupt_VSEI>:

bool external_interrupt_VSEI() {
    800128c4:	1101                	addi	sp,sp,-32

    TEST_START();
    800128c6:	0001e597          	auipc	a1,0x1e
    800128ca:	23a58593          	addi	a1,a1,570 # 80030b00 <__func__.0>
    800128ce:	00020517          	auipc	a0,0x20
    800128d2:	dfa50513          	addi	a0,a0,-518 # 800326c8 <__func__.0+0x2e0>
bool external_interrupt_VSEI() {
    800128d6:	ec06                	sd	ra,24(sp)
    800128d8:	e822                	sd	s0,16(sp)
    800128da:	e426                	sd	s1,8(sp)
    TEST_START();
    800128dc:	3e91c0ef          	jal	8002f4c4 <printf>
    800128e0:	4529                	li	a0,10
    800128e2:	0d11b0ef          	jal	8002e1b2 <putchar>

    TEST_SETUP_EXCEPT();
    800128e6:	d32ee0ef          	jal	80000e18 <test_setup_except_function>

   
    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高
    goto_priv(PRIV_M);
    800128ea:	4511                	li	a0,4
    800128ec:	e28ee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    800128f0:	40000793          	li	a5,1024
    800128f4:	6047a073          	csrs	hie,a5
    CSRS(CSR_HIP,HIP_VSEIP);
    800128f8:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    800128fc:	4509                	li	a0,2
    800128fe:	e16ee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012902:	08c00593          	li	a1,140
    80012906:	00024617          	auipc	a2,0x24
    8001290a:	ec260613          	addi	a2,a2,-318 # 800367c8 <__func__.0+0x43e0>
    8001290e:	00020517          	auipc	a0,0x20
    80012912:	dd250513          	addi	a0,a0,-558 # 800326e0 <__func__.0+0x2f8>
    80012916:	3af1c0ef          	jal	8002f4c4 <printf>
    8001291a:	00049797          	auipc	a5,0x49
    8001291e:	6f77c783          	lbu	a5,1783(a5) # 8005c011 <excpt+0x1>
    80012922:	00049497          	auipc	s1,0x49
    80012926:	6ee48493          	addi	s1,s1,1774 # 8005c010 <excpt>
    8001292a:	00020597          	auipc	a1,0x20
    8001292e:	d8e58593          	addi	a1,a1,-626 # 800326b8 <__func__.0+0x2d0>
    80012932:	c799                	beqz	a5,80012940 <external_interrupt_VSEI+0x7c>
    80012934:	57fd                	li	a5,-1
    80012936:	6498                	ld	a4,8(s1)
    80012938:	17fe                	slli	a5,a5,0x3f
    8001293a:	07a9                	addi	a5,a5,10
    8001293c:	62f70463          	beq	a4,a5,80012f64 <external_interrupt_VSEI+0x6a0>
    80012940:	00020517          	auipc	a0,0x20
    80012944:	db850513          	addi	a0,a0,-584 # 800326f8 <__func__.0+0x310>
    80012948:	37d1c0ef          	jal	8002f4c4 <printf>
    8001294c:	00049797          	auipc	a5,0x49
    80012950:	6c57c783          	lbu	a5,1733(a5) # 8005c011 <excpt+0x1>
    80012954:	c799                	beqz	a5,80012962 <external_interrupt_VSEI+0x9e>
    80012956:	57fd                	li	a5,-1
    80012958:	6498                	ld	a4,8(s1)
    8001295a:	17fe                	slli	a5,a5,0x3f
    8001295c:	07a9                	addi	a5,a5,10
    8001295e:	54f70563          	beq	a4,a5,80012ea8 <external_interrupt_VSEI+0x5e4>
    80012962:	00020517          	auipc	a0,0x20
    80012966:	d9e50513          	addi	a0,a0,-610 # 80032700 <__func__.0+0x318>
    8001296a:	35b1c0ef          	jal	8002f4c4 <printf>
    8001296e:	02900513          	li	a0,41
    80012972:	0411b0ef          	jal	8002e1b2 <putchar>
    80012976:	4529                	li	a0,10
    80012978:	03b1b0ef          	jal	8002e1b2 <putchar>
    8001297c:	00049797          	auipc	a5,0x49
    80012980:	6957c783          	lbu	a5,1685(a5) # 8005c011 <excpt+0x1>
    80012984:	4401                	li	s0,0
    80012986:	c799                	beqz	a5,80012994 <external_interrupt_VSEI+0xd0>
    80012988:	57fd                	li	a5,-1
    8001298a:	6498                	ld	a4,8(s1)
    8001298c:	17fe                	slli	a5,a5,0x3f
    8001298e:	07a9                	addi	a5,a5,10
    80012990:	5af70263          	beq	a4,a5,80012f34 <external_interrupt_VSEI+0x670>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg
    TEST_SETUP_EXCEPT();
    80012994:	c84ee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012998:	4511                	li	a0,4
    8001299a:	d7aee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8001299e:	40000793          	li	a5,1024
    800129a2:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    800129a6:	577d                	li	a4,-1
    800129a8:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    800129ac:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    800129b0:	4509                	li	a0,2
    800129b2:	d62ee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    800129b6:	08c00593          	li	a1,140
    800129ba:	00024617          	auipc	a2,0x24
    800129be:	e5e60613          	addi	a2,a2,-418 # 80036818 <__func__.0+0x4430>
    800129c2:	00020517          	auipc	a0,0x20
    800129c6:	d1e50513          	addi	a0,a0,-738 # 800326e0 <__func__.0+0x2f8>
    800129ca:	2fb1c0ef          	jal	8002f4c4 <printf>
    800129ce:	00049797          	auipc	a5,0x49
    800129d2:	6437c783          	lbu	a5,1603(a5) # 8005c011 <excpt+0x1>
    800129d6:	00020597          	auipc	a1,0x20
    800129da:	ce258593          	addi	a1,a1,-798 # 800326b8 <__func__.0+0x2d0>
    800129de:	c799                	beqz	a5,800129ec <external_interrupt_VSEI+0x128>
    800129e0:	57fd                	li	a5,-1
    800129e2:	6498                	ld	a4,8(s1)
    800129e4:	17fe                	slli	a5,a5,0x3f
    800129e6:	07a9                	addi	a5,a5,10
    800129e8:	54f70e63          	beq	a4,a5,80012f44 <external_interrupt_VSEI+0x680>
    800129ec:	00020517          	auipc	a0,0x20
    800129f0:	d0c50513          	addi	a0,a0,-756 # 800326f8 <__func__.0+0x310>
    800129f4:	2d11c0ef          	jal	8002f4c4 <printf>
    800129f8:	00049797          	auipc	a5,0x49
    800129fc:	6197c783          	lbu	a5,1561(a5) # 8005c011 <excpt+0x1>
    80012a00:	c799                	beqz	a5,80012a0e <external_interrupt_VSEI+0x14a>
    80012a02:	57fd                	li	a5,-1
    80012a04:	6498                	ld	a4,8(s1)
    80012a06:	17fe                	slli	a5,a5,0x3f
    80012a08:	07a9                	addi	a5,a5,10
    80012a0a:	46f70f63          	beq	a4,a5,80012e88 <external_interrupt_VSEI+0x5c4>
    80012a0e:	00020517          	auipc	a0,0x20
    80012a12:	cf250513          	addi	a0,a0,-782 # 80032700 <__func__.0+0x318>
    80012a16:	2af1c0ef          	jal	8002f4c4 <printf>
    80012a1a:	02900513          	li	a0,41
    80012a1e:	7941b0ef          	jal	8002e1b2 <putchar>
    80012a22:	4529                	li	a0,10
    80012a24:	78e1b0ef          	jal	8002e1b2 <putchar>
    80012a28:	c801                	beqz	s0,80012a38 <external_interrupt_VSEI+0x174>
    80012a2a:	00049797          	auipc	a5,0x49
    80012a2e:	5e77c783          	lbu	a5,1511(a5) # 8005c011 <excpt+0x1>
    80012a32:	4401                	li	s0,0
    80012a34:	42079c63          	bnez	a5,80012e6c <external_interrupt_VSEI+0x5a8>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80012a38:	be0ee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012a3c:	4511                	li	a0,4
    80012a3e:	cd6ee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012a42:	40000793          	li	a5,1024
    80012a46:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    80012a4a:	577d                	li	a4,-1
    80012a4c:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIDELEG,(uint64_t)-1);
    80012a50:	60372073          	csrs	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012a54:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012a58:	4509                	li	a0,2
    80012a5a:	cbaee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012a5e:	08c00593          	li	a1,140
    80012a62:	00024617          	auipc	a2,0x24
    80012a66:	e1660613          	addi	a2,a2,-490 # 80036878 <__func__.0+0x4490>
    80012a6a:	00020517          	auipc	a0,0x20
    80012a6e:	c7650513          	addi	a0,a0,-906 # 800326e0 <__func__.0+0x2f8>
    80012a72:	2531c0ef          	jal	8002f4c4 <printf>
    80012a76:	00049797          	auipc	a5,0x49
    80012a7a:	59b7c783          	lbu	a5,1435(a5) # 8005c011 <excpt+0x1>
    80012a7e:	00020597          	auipc	a1,0x20
    80012a82:	c3a58593          	addi	a1,a1,-966 # 800326b8 <__func__.0+0x2d0>
    80012a86:	c799                	beqz	a5,80012a94 <external_interrupt_VSEI+0x1d0>
    80012a88:	57fd                	li	a5,-1
    80012a8a:	6498                	ld	a4,8(s1)
    80012a8c:	17fe                	slli	a5,a5,0x3f
    80012a8e:	07a9                	addi	a5,a5,10
    80012a90:	4ef70a63          	beq	a4,a5,80012f84 <external_interrupt_VSEI+0x6c0>
    80012a94:	00020517          	auipc	a0,0x20
    80012a98:	c6450513          	addi	a0,a0,-924 # 800326f8 <__func__.0+0x310>
    80012a9c:	2291c0ef          	jal	8002f4c4 <printf>
    80012aa0:	00049797          	auipc	a5,0x49
    80012aa4:	5717c783          	lbu	a5,1393(a5) # 8005c011 <excpt+0x1>
    80012aa8:	c799                	beqz	a5,80012ab6 <external_interrupt_VSEI+0x1f2>
    80012aaa:	57fd                	li	a5,-1
    80012aac:	6498                	ld	a4,8(s1)
    80012aae:	17fe                	slli	a5,a5,0x3f
    80012ab0:	07a9                	addi	a5,a5,10
    80012ab2:	3ef70363          	beq	a4,a5,80012e98 <external_interrupt_VSEI+0x5d4>
    80012ab6:	00020517          	auipc	a0,0x20
    80012aba:	c4a50513          	addi	a0,a0,-950 # 80032700 <__func__.0+0x318>
    80012abe:	2071c0ef          	jal	8002f4c4 <printf>
    80012ac2:	02900513          	li	a0,41
    80012ac6:	6ec1b0ef          	jal	8002e1b2 <putchar>
    80012aca:	4529                	li	a0,10
    80012acc:	6e61b0ef          	jal	8002e1b2 <putchar>
    80012ad0:	c801                	beqz	s0,80012ae0 <external_interrupt_VSEI+0x21c>
    80012ad2:	00049797          	auipc	a5,0x49
    80012ad6:	53f7c783          	lbu	a5,1343(a5) # 8005c011 <excpt+0x1>
    80012ada:	4401                	li	s0,0
    80012adc:	36079a63          	bnez	a5,80012e50 <external_interrupt_VSEI+0x58c>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=1，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    80012ae0:	b38ee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012ae4:	4511                	li	a0,4
    80012ae6:	c2eee0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80012aea:	40000793          	li	a5,1024
    80012aee:	6047b073          	csrc	hie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80012af2:	577d                	li	a4,-1
    80012af4:	30373073          	csrc	mideleg,a4
    CSRC(CSR_HIDELEG,(uint64_t)-1);
    80012af8:	60373073          	csrc	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012afc:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012b00:	4509                	li	a0,2
    80012b02:	c12ee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80012b06:	08c00593          	li	a1,140
    80012b0a:	00024617          	auipc	a2,0x24
    80012b0e:	dde60613          	addi	a2,a2,-546 # 800368e8 <__func__.0+0x4500>
    80012b12:	00020517          	auipc	a0,0x20
    80012b16:	bce50513          	addi	a0,a0,-1074 # 800326e0 <__func__.0+0x2f8>
    80012b1a:	1ab1c0ef          	jal	8002f4c4 <printf>
    80012b1e:	00049797          	auipc	a5,0x49
    80012b22:	4f37c783          	lbu	a5,1267(a5) # 8005c011 <excpt+0x1>
    80012b26:	00020597          	auipc	a1,0x20
    80012b2a:	b9258593          	addi	a1,a1,-1134 # 800326b8 <__func__.0+0x2d0>
    80012b2e:	e789                	bnez	a5,80012b38 <external_interrupt_VSEI+0x274>
    80012b30:	00020597          	auipc	a1,0x20
    80012b34:	b7858593          	addi	a1,a1,-1160 # 800326a8 <__func__.0+0x2c0>
    80012b38:	00020517          	auipc	a0,0x20
    80012b3c:	bc050513          	addi	a0,a0,-1088 # 800326f8 <__func__.0+0x310>
    80012b40:	1851c0ef          	jal	8002f4c4 <printf>
    80012b44:	00049797          	auipc	a5,0x49
    80012b48:	4cd7c783          	lbu	a5,1229(a5) # 8005c011 <excpt+0x1>
    80012b4c:	3a079963          	bnez	a5,80012efe <external_interrupt_VSEI+0x63a>
    80012b50:	4529                	li	a0,10
    80012b52:	6601b0ef          	jal	8002e1b2 <putchar>
    80012b56:	c419                	beqz	s0,80012b64 <external_interrupt_VSEI+0x2a0>
    80012b58:	00049417          	auipc	s0,0x49
    80012b5c:	4b944403          	lbu	s0,1209(s0) # 8005c011 <excpt+0x1>
    80012b60:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1
    TEST_SETUP_EXCEPT();
    80012b64:	ab4ee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012b68:	4511                	li	a0,4
    80012b6a:	baaee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012b6e:	40000793          	li	a5,1024
    80012b72:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012b76:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    80012b7a:	4509                	li	a0,2
    80012b7c:	b98ee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012b80:	08c00593          	li	a1,140
    80012b84:	00024617          	auipc	a2,0x24
    80012b88:	da460613          	addi	a2,a2,-604 # 80036928 <__func__.0+0x4540>
    80012b8c:	00020517          	auipc	a0,0x20
    80012b90:	b5450513          	addi	a0,a0,-1196 # 800326e0 <__func__.0+0x2f8>
    80012b94:	1311c0ef          	jal	8002f4c4 <printf>
    80012b98:	00049797          	auipc	a5,0x49
    80012b9c:	4797c783          	lbu	a5,1145(a5) # 8005c011 <excpt+0x1>
    80012ba0:	00020597          	auipc	a1,0x20
    80012ba4:	b1858593          	addi	a1,a1,-1256 # 800326b8 <__func__.0+0x2d0>
    80012ba8:	e799                	bnez	a5,80012bb6 <external_interrupt_VSEI+0x2f2>
    80012baa:	57fd                	li	a5,-1
    80012bac:	6498                	ld	a4,8(s1)
    80012bae:	17fe                	slli	a5,a5,0x3f
    80012bb0:	07a9                	addi	a5,a5,10
    80012bb2:	40f70963          	beq	a4,a5,80012fc4 <external_interrupt_VSEI+0x700>
    80012bb6:	00020517          	auipc	a0,0x20
    80012bba:	b4250513          	addi	a0,a0,-1214 # 800326f8 <__func__.0+0x310>
    80012bbe:	1071c0ef          	jal	8002f4c4 <printf>
    80012bc2:	00049797          	auipc	a5,0x49
    80012bc6:	44f7c783          	lbu	a5,1103(a5) # 8005c011 <excpt+0x1>
    80012bca:	e799                	bnez	a5,80012bd8 <external_interrupt_VSEI+0x314>
    80012bcc:	57fd                	li	a5,-1
    80012bce:	6498                	ld	a4,8(s1)
    80012bd0:	17fe                	slli	a5,a5,0x3f
    80012bd2:	07a9                	addi	a5,a5,10
    80012bd4:	2ef70263          	beq	a4,a5,80012eb8 <external_interrupt_VSEI+0x5f4>
    80012bd8:	00020517          	auipc	a0,0x20
    80012bdc:	b2850513          	addi	a0,a0,-1240 # 80032700 <__func__.0+0x318>
    80012be0:	0e51c0ef          	jal	8002f4c4 <printf>
    80012be4:	02900513          	li	a0,41
    80012be8:	5ca1b0ef          	jal	8002e1b2 <putchar>
    80012bec:	4529                	li	a0,10
    80012bee:	5c41b0ef          	jal	8002e1b2 <putchar>
    80012bf2:	c801                	beqz	s0,80012c02 <external_interrupt_VSEI+0x33e>
    80012bf4:	00049797          	auipc	a5,0x49
    80012bf8:	41d7c783          	lbu	a5,1053(a5) # 8005c011 <excpt+0x1>
    80012bfc:	4401                	li	s0,0
    80012bfe:	22078b63          	beqz	a5,80012e34 <external_interrupt_VSEI+0x570>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg
    TEST_SETUP_EXCEPT();
    80012c02:	a16ee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012c06:	4511                	li	a0,4
    80012c08:	b0cee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012c0c:	40000793          	li	a5,1024
    80012c10:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012c14:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80012c18:	57fd                	li	a5,-1
    80012c1a:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    80012c1e:	4509                	li	a0,2
    80012c20:	af4ee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012c24:	08c00593          	li	a1,140
    80012c28:	00024617          	auipc	a2,0x24
    80012c2c:	d5060613          	addi	a2,a2,-688 # 80036978 <__func__.0+0x4590>
    80012c30:	00020517          	auipc	a0,0x20
    80012c34:	ab050513          	addi	a0,a0,-1360 # 800326e0 <__func__.0+0x2f8>
    80012c38:	08d1c0ef          	jal	8002f4c4 <printf>
    80012c3c:	00049797          	auipc	a5,0x49
    80012c40:	3d57c783          	lbu	a5,981(a5) # 8005c011 <excpt+0x1>
    80012c44:	00020597          	auipc	a1,0x20
    80012c48:	a7458593          	addi	a1,a1,-1420 # 800326b8 <__func__.0+0x2d0>
    80012c4c:	e799                	bnez	a5,80012c5a <external_interrupt_VSEI+0x396>
    80012c4e:	57fd                	li	a5,-1
    80012c50:	6498                	ld	a4,8(s1)
    80012c52:	17fe                	slli	a5,a5,0x3f
    80012c54:	07a9                	addi	a5,a5,10
    80012c56:	2af70f63          	beq	a4,a5,80012f14 <external_interrupt_VSEI+0x650>
    80012c5a:	00020517          	auipc	a0,0x20
    80012c5e:	a9e50513          	addi	a0,a0,-1378 # 800326f8 <__func__.0+0x310>
    80012c62:	0631c0ef          	jal	8002f4c4 <printf>
    80012c66:	00049797          	auipc	a5,0x49
    80012c6a:	3ab7c783          	lbu	a5,939(a5) # 8005c011 <excpt+0x1>
    80012c6e:	e799                	bnez	a5,80012c7c <external_interrupt_VSEI+0x3b8>
    80012c70:	57fd                	li	a5,-1
    80012c72:	6498                	ld	a4,8(s1)
    80012c74:	17fe                	slli	a5,a5,0x3f
    80012c76:	07a9                	addi	a5,a5,10
    80012c78:	26f70063          	beq	a4,a5,80012ed8 <external_interrupt_VSEI+0x614>
    80012c7c:	00020517          	auipc	a0,0x20
    80012c80:	a8450513          	addi	a0,a0,-1404 # 80032700 <__func__.0+0x318>
    80012c84:	0411c0ef          	jal	8002f4c4 <printf>
    80012c88:	02900513          	li	a0,41
    80012c8c:	5261b0ef          	jal	8002e1b2 <putchar>
    80012c90:	4529                	li	a0,10
    80012c92:	5201b0ef          	jal	8002e1b2 <putchar>
    80012c96:	c801                	beqz	s0,80012ca6 <external_interrupt_VSEI+0x3e2>
    80012c98:	00049797          	auipc	a5,0x49
    80012c9c:	3797c783          	lbu	a5,889(a5) # 8005c011 <excpt+0x1>
    80012ca0:	4401                	li	s0,0
    80012ca2:	16078b63          	beqz	a5,80012e18 <external_interrupt_VSEI+0x554>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80012ca6:	972ee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012caa:	4511                	li	a0,4
    80012cac:	a68ee0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012cb0:	40000793          	li	a5,1024
    80012cb4:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012cb8:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80012cbc:	57fd                	li	a5,-1
    80012cbe:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80012cc2:	60379073          	csrw	hideleg,a5

    goto_priv(PRIV_VS);
    80012cc6:	4509                	li	a0,2
    80012cc8:	a4cee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012ccc:	08c00593          	li	a1,140
    80012cd0:	00024617          	auipc	a2,0x24
    80012cd4:	d0860613          	addi	a2,a2,-760 # 800369d8 <__func__.0+0x45f0>
    80012cd8:	00020517          	auipc	a0,0x20
    80012cdc:	a0850513          	addi	a0,a0,-1528 # 800326e0 <__func__.0+0x2f8>
    80012ce0:	7e41c0ef          	jal	8002f4c4 <printf>
    80012ce4:	00049797          	auipc	a5,0x49
    80012ce8:	32d7c783          	lbu	a5,813(a5) # 8005c011 <excpt+0x1>
    80012cec:	00020597          	auipc	a1,0x20
    80012cf0:	9cc58593          	addi	a1,a1,-1588 # 800326b8 <__func__.0+0x2d0>
    80012cf4:	e799                	bnez	a5,80012d02 <external_interrupt_VSEI+0x43e>
    80012cf6:	57fd                	li	a5,-1
    80012cf8:	6498                	ld	a4,8(s1)
    80012cfa:	17fe                	slli	a5,a5,0x3f
    80012cfc:	07a9                	addi	a5,a5,10
    80012cfe:	2af70363          	beq	a4,a5,80012fa4 <external_interrupt_VSEI+0x6e0>
    80012d02:	00020517          	auipc	a0,0x20
    80012d06:	9f650513          	addi	a0,a0,-1546 # 800326f8 <__func__.0+0x310>
    80012d0a:	7ba1c0ef          	jal	8002f4c4 <printf>
    80012d0e:	00049797          	auipc	a5,0x49
    80012d12:	3037c783          	lbu	a5,771(a5) # 8005c011 <excpt+0x1>
    80012d16:	e799                	bnez	a5,80012d24 <external_interrupt_VSEI+0x460>
    80012d18:	57fd                	li	a5,-1
    80012d1a:	6498                	ld	a4,8(s1)
    80012d1c:	17fe                	slli	a5,a5,0x3f
    80012d1e:	07a9                	addi	a5,a5,10
    80012d20:	1af70463          	beq	a4,a5,80012ec8 <external_interrupt_VSEI+0x604>
    80012d24:	00020517          	auipc	a0,0x20
    80012d28:	9dc50513          	addi	a0,a0,-1572 # 80032700 <__func__.0+0x318>
    80012d2c:	7981c0ef          	jal	8002f4c4 <printf>
    80012d30:	02900513          	li	a0,41
    80012d34:	47e1b0ef          	jal	8002e1b2 <putchar>
    80012d38:	4529                	li	a0,10
    80012d3a:	4781b0ef          	jal	8002e1b2 <putchar>
    80012d3e:	c419                	beqz	s0,80012d4c <external_interrupt_VSEI+0x488>
    80012d40:	00049797          	auipc	a5,0x49
    80012d44:	2d17c783          	lbu	a5,721(a5) # 8005c011 <excpt+0x1>
    80012d48:	4401                	li	s0,0
    80012d4a:	cbcd                	beqz	a5,80012dfc <external_interrupt_VSEI+0x538>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    80012d4c:	8ccee0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012d50:	4511                	li	a0,4
    80012d52:	9c2ee0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80012d56:	40000793          	li	a5,1024
    80012d5a:	6047b073          	csrc	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012d5e:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    80012d62:	4509                	li	a0,2
    80012d64:	9b0ee0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012d68:	08c00593          	li	a1,140
    80012d6c:	00024617          	auipc	a2,0x24
    80012d70:	cdc60613          	addi	a2,a2,-804 # 80036a48 <__func__.0+0x4660>
    80012d74:	00020517          	auipc	a0,0x20
    80012d78:	96c50513          	addi	a0,a0,-1684 # 800326e0 <__func__.0+0x2f8>
    80012d7c:	7481c0ef          	jal	8002f4c4 <printf>
    80012d80:	00049797          	auipc	a5,0x49
    80012d84:	2917c783          	lbu	a5,657(a5) # 8005c011 <excpt+0x1>
    80012d88:	00020597          	auipc	a1,0x20
    80012d8c:	93058593          	addi	a1,a1,-1744 # 800326b8 <__func__.0+0x2d0>
    80012d90:	e789                	bnez	a5,80012d9a <external_interrupt_VSEI+0x4d6>
    80012d92:	00020597          	auipc	a1,0x20
    80012d96:	91658593          	addi	a1,a1,-1770 # 800326a8 <__func__.0+0x2c0>
    80012d9a:	00020517          	auipc	a0,0x20
    80012d9e:	95e50513          	addi	a0,a0,-1698 # 800326f8 <__func__.0+0x310>
    80012da2:	7221c0ef          	jal	8002f4c4 <printf>
    80012da6:	00049797          	auipc	a5,0x49
    80012daa:	26b7c783          	lbu	a5,619(a5) # 8005c011 <excpt+0x1>
    80012dae:	12079d63          	bnez	a5,80012ee8 <external_interrupt_VSEI+0x624>
    80012db2:	4529                	li	a0,10
    80012db4:	3fe1b0ef          	jal	8002e1b2 <putchar>
    80012db8:	c411                	beqz	s0,80012dc4 <external_interrupt_VSEI+0x500>
    80012dba:	00049797          	auipc	a5,0x49
    80012dbe:	2577c783          	lbu	a5,599(a5) # 8005c011 <excpt+0x1>
    80012dc2:	c79d                	beqz	a5,80012df0 <external_interrupt_VSEI+0x52c>
    80012dc4:	4401                	li	s0,0





    TEST_END();
    80012dc6:	00020597          	auipc	a1,0x20
    80012dca:	8f258593          	addi	a1,a1,-1806 # 800326b8 <__func__.0+0x2d0>
    80012dce:	00020517          	auipc	a0,0x20
    80012dd2:	99250513          	addi	a0,a0,-1646 # 80032760 <__func__.0+0x378>
    80012dd6:	6ee1c0ef          	jal	8002f4c4 <printf>
    80012dda:	4511                	li	a0,4
    80012ddc:	938ee0ef          	jal	80000f14 <goto_priv>
    80012de0:	997ee0ef          	jal	80001776 <reset_state>
}
    80012de4:	60e2                	ld	ra,24(sp)
    80012de6:	8522                	mv	a0,s0
    80012de8:	6442                	ld	s0,16(sp)
    80012dea:	64a2                	ld	s1,8(sp)
    80012dec:	6105                	addi	sp,sp,32
    80012dee:	8082                	ret
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012df0:	4405                	li	s0,1
    TEST_END();
    80012df2:	00020597          	auipc	a1,0x20
    80012df6:	8b658593          	addi	a1,a1,-1866 # 800326a8 <__func__.0+0x2c0>
    80012dfa:	bfd1                	j	80012dce <external_interrupt_VSEI+0x50a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012dfc:	57fd                	li	a5,-1
    80012dfe:	6498                	ld	a4,8(s1)
    80012e00:	17fe                	slli	a5,a5,0x3f
    80012e02:	07a9                	addi	a5,a5,10
    80012e04:	f4f714e3          	bne	a4,a5,80012d4c <external_interrupt_VSEI+0x488>
    80012e08:	00049417          	auipc	s0,0x49
    80012e0c:	20c42403          	lw	s0,524(s0) # 8005c014 <excpt+0x4>
    80012e10:	1479                	addi	s0,s0,-2
    80012e12:	00143413          	seqz	s0,s0
    80012e16:	bf1d                	j	80012d4c <external_interrupt_VSEI+0x488>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012e18:	57fd                	li	a5,-1
    80012e1a:	6498                	ld	a4,8(s1)
    80012e1c:	17fe                	slli	a5,a5,0x3f
    80012e1e:	07a9                	addi	a5,a5,10
    80012e20:	e8f713e3          	bne	a4,a5,80012ca6 <external_interrupt_VSEI+0x3e2>
    80012e24:	00049417          	auipc	s0,0x49
    80012e28:	1f042403          	lw	s0,496(s0) # 8005c014 <excpt+0x4>
    80012e2c:	1475                	addi	s0,s0,-3
    80012e2e:	00143413          	seqz	s0,s0
    80012e32:	bd95                	j	80012ca6 <external_interrupt_VSEI+0x3e2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012e34:	57fd                	li	a5,-1
    80012e36:	6498                	ld	a4,8(s1)
    80012e38:	17fe                	slli	a5,a5,0x3f
    80012e3a:	07a9                	addi	a5,a5,10
    80012e3c:	dcf713e3          	bne	a4,a5,80012c02 <external_interrupt_VSEI+0x33e>
    80012e40:	00049417          	auipc	s0,0x49
    80012e44:	1d442403          	lw	s0,468(s0) # 8005c014 <excpt+0x4>
    80012e48:	1471                	addi	s0,s0,-4
    80012e4a:	00143413          	seqz	s0,s0
    80012e4e:	bb55                	j	80012c02 <external_interrupt_VSEI+0x33e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012e50:	57fd                	li	a5,-1
    80012e52:	6498                	ld	a4,8(s1)
    80012e54:	17fe                	slli	a5,a5,0x3f
    80012e56:	07a9                	addi	a5,a5,10
    80012e58:	c8f714e3          	bne	a4,a5,80012ae0 <external_interrupt_VSEI+0x21c>
    80012e5c:	00049417          	auipc	s0,0x49
    80012e60:	1b842403          	lw	s0,440(s0) # 8005c014 <excpt+0x4>
    80012e64:	1479                	addi	s0,s0,-2
    80012e66:	00143413          	seqz	s0,s0
    80012e6a:	b99d                	j	80012ae0 <external_interrupt_VSEI+0x21c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80012e6c:	57fd                	li	a5,-1
    80012e6e:	6498                	ld	a4,8(s1)
    80012e70:	17fe                	slli	a5,a5,0x3f
    80012e72:	07a9                	addi	a5,a5,10
    80012e74:	bcf712e3          	bne	a4,a5,80012a38 <external_interrupt_VSEI+0x174>
    80012e78:	00049417          	auipc	s0,0x49
    80012e7c:	19c42403          	lw	s0,412(s0) # 8005c014 <excpt+0x4>
    80012e80:	1475                	addi	s0,s0,-3
    80012e82:	00143413          	seqz	s0,s0
    80012e86:	be4d                	j	80012a38 <external_interrupt_VSEI+0x174>
    80012e88:	00049717          	auipc	a4,0x49
    80012e8c:	18c72703          	lw	a4,396(a4) # 8005c014 <excpt+0x4>
    80012e90:	478d                	li	a5,3
    80012e92:	b6f71ee3          	bne	a4,a5,80012a0e <external_interrupt_VSEI+0x14a>
    80012e96:	b671                	j	80012a22 <external_interrupt_VSEI+0x15e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012e98:	00049717          	auipc	a4,0x49
    80012e9c:	17c72703          	lw	a4,380(a4) # 8005c014 <excpt+0x4>
    80012ea0:	4789                	li	a5,2
    80012ea2:	c0f71ae3          	bne	a4,a5,80012ab6 <external_interrupt_VSEI+0x1f2>
    80012ea6:	b115                	j	80012aca <external_interrupt_VSEI+0x206>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012ea8:	00049717          	auipc	a4,0x49
    80012eac:	16c72703          	lw	a4,364(a4) # 8005c014 <excpt+0x4>
    80012eb0:	4791                	li	a5,4
    80012eb2:	aaf718e3          	bne	a4,a5,80012962 <external_interrupt_VSEI+0x9e>
    80012eb6:	b4c1                	j	80012976 <external_interrupt_VSEI+0xb2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012eb8:	00049717          	auipc	a4,0x49
    80012ebc:	15c72703          	lw	a4,348(a4) # 8005c014 <excpt+0x4>
    80012ec0:	4791                	li	a5,4
    80012ec2:	d0f71be3          	bne	a4,a5,80012bd8 <external_interrupt_VSEI+0x314>
    80012ec6:	b31d                	j	80012bec <external_interrupt_VSEI+0x328>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012ec8:	00049717          	auipc	a4,0x49
    80012ecc:	14c72703          	lw	a4,332(a4) # 8005c014 <excpt+0x4>
    80012ed0:	4789                	li	a5,2
    80012ed2:	e4f719e3          	bne	a4,a5,80012d24 <external_interrupt_VSEI+0x460>
    80012ed6:	b58d                	j	80012d38 <external_interrupt_VSEI+0x474>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012ed8:	00049717          	auipc	a4,0x49
    80012edc:	13c72703          	lw	a4,316(a4) # 8005c014 <excpt+0x4>
    80012ee0:	478d                	li	a5,3
    80012ee2:	d8f71de3          	bne	a4,a5,80012c7c <external_interrupt_VSEI+0x3b8>
    80012ee6:	b36d                	j	80012c90 <external_interrupt_VSEI+0x3cc>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012ee8:	00020517          	auipc	a0,0x20
    80012eec:	81850513          	addi	a0,a0,-2024 # 80032700 <__func__.0+0x318>
    80012ef0:	5d41c0ef          	jal	8002f4c4 <printf>
    80012ef4:	02900513          	li	a0,41
    80012ef8:	2ba1b0ef          	jal	8002e1b2 <putchar>
    80012efc:	bd5d                	j	80012db2 <external_interrupt_VSEI+0x4ee>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80012efe:	00020517          	auipc	a0,0x20
    80012f02:	80250513          	addi	a0,a0,-2046 # 80032700 <__func__.0+0x318>
    80012f06:	5be1c0ef          	jal	8002f4c4 <printf>
    80012f0a:	02900513          	li	a0,41
    80012f0e:	2a41b0ef          	jal	8002e1b2 <putchar>
    80012f12:	b93d                	j	80012b50 <external_interrupt_VSEI+0x28c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012f14:	00049717          	auipc	a4,0x49
    80012f18:	10072703          	lw	a4,256(a4) # 8005c014 <excpt+0x4>
    80012f1c:	478d                	li	a5,3
    80012f1e:	0001f597          	auipc	a1,0x1f
    80012f22:	78a58593          	addi	a1,a1,1930 # 800326a8 <__func__.0+0x2c0>
    80012f26:	d2f70ae3          	beq	a4,a5,80012c5a <external_interrupt_VSEI+0x396>
    80012f2a:	0001f597          	auipc	a1,0x1f
    80012f2e:	78e58593          	addi	a1,a1,1934 # 800326b8 <__func__.0+0x2d0>
    80012f32:	b325                	j	80012c5a <external_interrupt_VSEI+0x396>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012f34:	00049417          	auipc	s0,0x49
    80012f38:	0e042403          	lw	s0,224(s0) # 8005c014 <excpt+0x4>
    80012f3c:	1471                	addi	s0,s0,-4
    80012f3e:	00143413          	seqz	s0,s0
    80012f42:	bc89                	j	80012994 <external_interrupt_VSEI+0xd0>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80012f44:	00049717          	auipc	a4,0x49
    80012f48:	0d072703          	lw	a4,208(a4) # 8005c014 <excpt+0x4>
    80012f4c:	478d                	li	a5,3
    80012f4e:	0001f597          	auipc	a1,0x1f
    80012f52:	75a58593          	addi	a1,a1,1882 # 800326a8 <__func__.0+0x2c0>
    80012f56:	a8f70be3          	beq	a4,a5,800129ec <external_interrupt_VSEI+0x128>
    80012f5a:	0001f597          	auipc	a1,0x1f
    80012f5e:	75e58593          	addi	a1,a1,1886 # 800326b8 <__func__.0+0x2d0>
    80012f62:	b469                	j	800129ec <external_interrupt_VSEI+0x128>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012f64:	00049717          	auipc	a4,0x49
    80012f68:	0b072703          	lw	a4,176(a4) # 8005c014 <excpt+0x4>
    80012f6c:	4791                	li	a5,4
    80012f6e:	0001f597          	auipc	a1,0x1f
    80012f72:	73a58593          	addi	a1,a1,1850 # 800326a8 <__func__.0+0x2c0>
    80012f76:	9cf705e3          	beq	a4,a5,80012940 <external_interrupt_VSEI+0x7c>
    80012f7a:	0001f597          	auipc	a1,0x1f
    80012f7e:	73e58593          	addi	a1,a1,1854 # 800326b8 <__func__.0+0x2d0>
    80012f82:	ba7d                	j	80012940 <external_interrupt_VSEI+0x7c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012f84:	00049717          	auipc	a4,0x49
    80012f88:	09072703          	lw	a4,144(a4) # 8005c014 <excpt+0x4>
    80012f8c:	4789                	li	a5,2
    80012f8e:	0001f597          	auipc	a1,0x1f
    80012f92:	71a58593          	addi	a1,a1,1818 # 800326a8 <__func__.0+0x2c0>
    80012f96:	aef70fe3          	beq	a4,a5,80012a94 <external_interrupt_VSEI+0x1d0>
    80012f9a:	0001f597          	auipc	a1,0x1f
    80012f9e:	71e58593          	addi	a1,a1,1822 # 800326b8 <__func__.0+0x2d0>
    80012fa2:	bccd                	j	80012a94 <external_interrupt_VSEI+0x1d0>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012fa4:	00049717          	auipc	a4,0x49
    80012fa8:	07072703          	lw	a4,112(a4) # 8005c014 <excpt+0x4>
    80012fac:	4789                	li	a5,2
    80012fae:	0001f597          	auipc	a1,0x1f
    80012fb2:	6fa58593          	addi	a1,a1,1786 # 800326a8 <__func__.0+0x2c0>
    80012fb6:	d4f706e3          	beq	a4,a5,80012d02 <external_interrupt_VSEI+0x43e>
    80012fba:	0001f597          	auipc	a1,0x1f
    80012fbe:	6fe58593          	addi	a1,a1,1790 # 800326b8 <__func__.0+0x2d0>
    80012fc2:	b381                	j	80012d02 <external_interrupt_VSEI+0x43e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012fc4:	00049717          	auipc	a4,0x49
    80012fc8:	05072703          	lw	a4,80(a4) # 8005c014 <excpt+0x4>
    80012fcc:	4791                	li	a5,4
    80012fce:	0001f597          	auipc	a1,0x1f
    80012fd2:	6da58593          	addi	a1,a1,1754 # 800326a8 <__func__.0+0x2c0>
    80012fd6:	bef700e3          	beq	a4,a5,80012bb6 <external_interrupt_VSEI+0x2f2>
    80012fda:	0001f597          	auipc	a1,0x1f
    80012fde:	6de58593          	addi	a1,a1,1758 # 800326b8 <__func__.0+0x2d0>
    80012fe2:	bed1                	j	80012bb6 <external_interrupt_VSEI+0x2f2>

0000000080012fe4 <software_interrupt_msi>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool software_interrupt_msi() {
    80012fe4:	1101                	addi	sp,sp,-32

    TEST_START();
    80012fe6:	0001e597          	auipc	a1,0x1e
    80012fea:	b3258593          	addi	a1,a1,-1230 # 80030b18 <__func__.2>
    80012fee:	0001f517          	auipc	a0,0x1f
    80012ff2:	6da50513          	addi	a0,a0,1754 # 800326c8 <__func__.0+0x2e0>
bool software_interrupt_msi() {
    80012ff6:	ec06                	sd	ra,24(sp)
    80012ff8:	e822                	sd	s0,16(sp)
    80012ffa:	e426                	sd	s1,8(sp)
    TEST_START();
    80012ffc:	4c81c0ef          	jal	8002f4c4 <printf>
    80013000:	4529                	li	a0,10
    80013002:	1b01b0ef          	jal	8002e1b2 <putchar>

    TEST_SETUP_EXCEPT();
    80013006:	e13ed0ef          	jal	80000e18 <test_setup_except_function>

   
    //M模式下产生软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高
    goto_priv(PRIV_M);
    8001300a:	4511                	li	a0,4
    8001300c:	f09ed0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80013010:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013014:	30446073          	csrsi	mie,8
    CSRW(CSR_MIDELEG,0);
    80013018:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MIP,MIP_MSIP);     //read-only
    8001301c:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013020:	4511                	li	a0,4
    80013022:	ef3ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013026:	08c00593          	li	a1,140
    8001302a:	00024617          	auipc	a2,0x24
    8001302e:	a6e60613          	addi	a2,a2,-1426 # 80036a98 <__func__.0+0x46b0>
    80013032:	0001f517          	auipc	a0,0x1f
    80013036:	6ae50513          	addi	a0,a0,1710 # 800326e0 <__func__.0+0x2f8>
    8001303a:	48a1c0ef          	jal	8002f4c4 <printf>
    8001303e:	00049797          	auipc	a5,0x49
    80013042:	fd37c783          	lbu	a5,-45(a5) # 8005c011 <excpt+0x1>
    80013046:	00049497          	auipc	s1,0x49
    8001304a:	fca48493          	addi	s1,s1,-54 # 8005c010 <excpt>
    8001304e:	0001f597          	auipc	a1,0x1f
    80013052:	66a58593          	addi	a1,a1,1642 # 800326b8 <__func__.0+0x2d0>
    80013056:	c799                	beqz	a5,80013064 <software_interrupt_msi+0x80>
    80013058:	57fd                	li	a5,-1
    8001305a:	6498                	ld	a4,8(s1)
    8001305c:	17fe                	slli	a5,a5,0x3f
    8001305e:	078d                	addi	a5,a5,3
    80013060:	4ef702e3          	beq	a4,a5,80013d44 <software_interrupt_msi+0xd60>
    80013064:	0001f517          	auipc	a0,0x1f
    80013068:	69450513          	addi	a0,a0,1684 # 800326f8 <__func__.0+0x310>
    8001306c:	4581c0ef          	jal	8002f4c4 <printf>
    80013070:	00049797          	auipc	a5,0x49
    80013074:	fa17c783          	lbu	a5,-95(a5) # 8005c011 <excpt+0x1>
    80013078:	c799                	beqz	a5,80013086 <software_interrupt_msi+0xa2>
    8001307a:	57fd                	li	a5,-1
    8001307c:	6498                	ld	a4,8(s1)
    8001307e:	17fe                	slli	a5,a5,0x3f
    80013080:	078d                	addi	a5,a5,3
    80013082:	34f700e3          	beq	a4,a5,80013bc2 <software_interrupt_msi+0xbde>
    80013086:	0001f517          	auipc	a0,0x1f
    8001308a:	67a50513          	addi	a0,a0,1658 # 80032700 <__func__.0+0x318>
    8001308e:	4361c0ef          	jal	8002f4c4 <printf>
    80013092:	02900513          	li	a0,41
    80013096:	11c1b0ef          	jal	8002e1b2 <putchar>
    8001309a:	4529                	li	a0,10
    8001309c:	1161b0ef          	jal	8002e1b2 <putchar>
    800130a0:	00049797          	auipc	a5,0x49
    800130a4:	f717c783          	lbu	a5,-143(a5) # 8005c011 <excpt+0x1>
    800130a8:	4401                	li	s0,0
    800130aa:	c799                	beqz	a5,800130b8 <software_interrupt_msi+0xd4>
    800130ac:	57fd                	li	a5,-1
    800130ae:	6498                	ld	a4,8(s1)
    800130b0:	17fe                	slli	a5,a5,0x3f
    800130b2:	078d                	addi	a5,a5,3
    800130b4:	56f70ce3          	beq	a4,a5,80013e2c <software_interrupt_msi+0xe48>
        excpt.priv == PRIV_M
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    800130b8:	d61ed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800130bc:	4511                	li	a0,4
    800130be:	e57ed0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800130c2:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800130c6:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800130ca:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    800130ce:	4511                	li	a0,4
    800130d0:	e45ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    800130d4:	08c00593          	li	a1,140
    800130d8:	00024617          	auipc	a2,0x24
    800130dc:	a2060613          	addi	a2,a2,-1504 # 80036af8 <__func__.0+0x4710>
    800130e0:	0001f517          	auipc	a0,0x1f
    800130e4:	60050513          	addi	a0,a0,1536 # 800326e0 <__func__.0+0x2f8>
    800130e8:	3dc1c0ef          	jal	8002f4c4 <printf>
    800130ec:	00049797          	auipc	a5,0x49
    800130f0:	f257c783          	lbu	a5,-219(a5) # 8005c011 <excpt+0x1>
    800130f4:	0001f597          	auipc	a1,0x1f
    800130f8:	5c458593          	addi	a1,a1,1476 # 800326b8 <__func__.0+0x2d0>
    800130fc:	e789                	bnez	a5,80013106 <software_interrupt_msi+0x122>
    800130fe:	0001f597          	auipc	a1,0x1f
    80013102:	5aa58593          	addi	a1,a1,1450 # 800326a8 <__func__.0+0x2c0>
    80013106:	0001f517          	auipc	a0,0x1f
    8001310a:	5f250513          	addi	a0,a0,1522 # 800326f8 <__func__.0+0x310>
    8001310e:	3b61c0ef          	jal	8002f4c4 <printf>
    80013112:	00049797          	auipc	a5,0x49
    80013116:	eff7c783          	lbu	a5,-257(a5) # 8005c011 <excpt+0x1>
    8001311a:	320797e3          	bnez	a5,80013c48 <software_interrupt_msi+0xc64>
    8001311e:	4529                	li	a0,10
    80013120:	0921b0ef          	jal	8002e1b2 <putchar>
    80013124:	c419                	beqz	s0,80013132 <software_interrupt_msi+0x14e>
    80013126:	00049417          	auipc	s0,0x49
    8001312a:	eeb44403          	lbu	s0,-277(s0) # 8005c011 <excpt+0x1>
    8001312e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    80013132:	ce7ed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013136:	4511                	li	a0,4
    80013138:	ddded0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8001313c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013140:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013144:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    80013148:	4511                	li	a0,4
    8001314a:	dcbed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    8001314e:	08c00593          	li	a1,140
    80013152:	00024617          	auipc	a2,0x24
    80013156:	9fe60613          	addi	a2,a2,-1538 # 80036b50 <__func__.0+0x4768>
    8001315a:	0001f517          	auipc	a0,0x1f
    8001315e:	58650513          	addi	a0,a0,1414 # 800326e0 <__func__.0+0x2f8>
    80013162:	3621c0ef          	jal	8002f4c4 <printf>
    80013166:	00049797          	auipc	a5,0x49
    8001316a:	eab7c783          	lbu	a5,-341(a5) # 8005c011 <excpt+0x1>
    8001316e:	0001f597          	auipc	a1,0x1f
    80013172:	54a58593          	addi	a1,a1,1354 # 800326b8 <__func__.0+0x2d0>
    80013176:	cf99                	beqz	a5,80013194 <software_interrupt_msi+0x1b0>
    80013178:	57fd                	li	a5,-1
    8001317a:	6498                	ld	a4,8(s1)
    8001317c:	17fe                	slli	a5,a5,0x3f
    8001317e:	078d                	addi	a5,a5,3
    80013180:	0001f597          	auipc	a1,0x1f
    80013184:	52858593          	addi	a1,a1,1320 # 800326a8 <__func__.0+0x2c0>
    80013188:	00f70663          	beq	a4,a5,80013194 <software_interrupt_msi+0x1b0>
    8001318c:	0001f597          	auipc	a1,0x1f
    80013190:	52c58593          	addi	a1,a1,1324 # 800326b8 <__func__.0+0x2d0>
    80013194:	0001f517          	auipc	a0,0x1f
    80013198:	56450513          	addi	a0,a0,1380 # 800326f8 <__func__.0+0x310>
    8001319c:	3281c0ef          	jal	8002f4c4 <printf>
    800131a0:	00049797          	auipc	a5,0x49
    800131a4:	e717c783          	lbu	a5,-399(a5) # 8005c011 <excpt+0x1>
    800131a8:	c799                	beqz	a5,800131b6 <software_interrupt_msi+0x1d2>
    800131aa:	57fd                	li	a5,-1
    800131ac:	6498                	ld	a4,8(s1)
    800131ae:	17fe                	slli	a5,a5,0x3f
    800131b0:	078d                	addi	a5,a5,3
    800131b2:	00f70c63          	beq	a4,a5,800131ca <software_interrupt_msi+0x1e6>
    800131b6:	0001f517          	auipc	a0,0x1f
    800131ba:	54a50513          	addi	a0,a0,1354 # 80032700 <__func__.0+0x318>
    800131be:	3061c0ef          	jal	8002f4c4 <printf>
    800131c2:	02900513          	li	a0,41
    800131c6:	7ed1a0ef          	jal	8002e1b2 <putchar>
    800131ca:	4529                	li	a0,10
    800131cc:	7e71a0ef          	jal	8002e1b2 <putchar>
    800131d0:	c801                	beqz	s0,800131e0 <software_interrupt_msi+0x1fc>
    800131d2:	00049797          	auipc	a5,0x49
    800131d6:	e3f7c783          	lbu	a5,-449(a5) # 8005c011 <excpt+0x1>
    800131da:	4401                	li	s0,0
    800131dc:	1c0793e3          	bnez	a5,80013ba2 <software_interrupt_msi+0xbbe>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MSI
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    800131e0:	c39ed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800131e4:	4511                	li	a0,4
    800131e6:	d2fed0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    800131ea:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800131ee:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800131f2:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    800131f6:	4511                	li	a0,4
    800131f8:	d1ded0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    800131fc:	08c00593          	li	a1,140
    80013200:	00024617          	auipc	a2,0x24
    80013204:	9b060613          	addi	a2,a2,-1616 # 80036bb0 <__func__.0+0x47c8>
    80013208:	0001f517          	auipc	a0,0x1f
    8001320c:	4d850513          	addi	a0,a0,1240 # 800326e0 <__func__.0+0x2f8>
    80013210:	2b41c0ef          	jal	8002f4c4 <printf>
    80013214:	00049797          	auipc	a5,0x49
    80013218:	dfd7c783          	lbu	a5,-515(a5) # 8005c011 <excpt+0x1>
    8001321c:	0001f597          	auipc	a1,0x1f
    80013220:	49c58593          	addi	a1,a1,1180 # 800326b8 <__func__.0+0x2d0>
    80013224:	e789                	bnez	a5,8001322e <software_interrupt_msi+0x24a>
    80013226:	0001f597          	auipc	a1,0x1f
    8001322a:	48258593          	addi	a1,a1,1154 # 800326a8 <__func__.0+0x2c0>
    8001322e:	0001f517          	auipc	a0,0x1f
    80013232:	4ca50513          	addi	a0,a0,1226 # 800326f8 <__func__.0+0x310>
    80013236:	28e1c0ef          	jal	8002f4c4 <printf>
    8001323a:	00049797          	auipc	a5,0x49
    8001323e:	dd77c783          	lbu	a5,-553(a5) # 8005c011 <excpt+0x1>
    80013242:	22079ae3          	bnez	a5,80013c76 <software_interrupt_msi+0xc92>
    80013246:	4529                	li	a0,10
    80013248:	76b1a0ef          	jal	8002e1b2 <putchar>
    8001324c:	c419                	beqz	s0,8001325a <software_interrupt_msi+0x276>
    8001324e:	00049417          	auipc	s0,0x49
    80013252:	dc344403          	lbu	s0,-573(s0) # 8005c011 <excpt+0x1>
    80013256:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    8001325a:	bbfed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001325e:	4511                	li	a0,4
    80013260:	cb5ed0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80013264:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013268:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001326c:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013270:	4511                	li	a0,4
    80013272:	ca3ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    80013276:	08c00593          	li	a1,140
    8001327a:	00024617          	auipc	a2,0x24
    8001327e:	98660613          	addi	a2,a2,-1658 # 80036c00 <__func__.0+0x4818>
    80013282:	0001f517          	auipc	a0,0x1f
    80013286:	45e50513          	addi	a0,a0,1118 # 800326e0 <__func__.0+0x2f8>
    8001328a:	23a1c0ef          	jal	8002f4c4 <printf>
    8001328e:	00049797          	auipc	a5,0x49
    80013292:	d837c783          	lbu	a5,-637(a5) # 8005c011 <excpt+0x1>
    80013296:	0001f597          	auipc	a1,0x1f
    8001329a:	42258593          	addi	a1,a1,1058 # 800326b8 <__func__.0+0x2d0>
    8001329e:	e789                	bnez	a5,800132a8 <software_interrupt_msi+0x2c4>
    800132a0:	0001f597          	auipc	a1,0x1f
    800132a4:	40858593          	addi	a1,a1,1032 # 800326a8 <__func__.0+0x2c0>
    800132a8:	0001f517          	auipc	a0,0x1f
    800132ac:	45050513          	addi	a0,a0,1104 # 800326f8 <__func__.0+0x310>
    800132b0:	2141c0ef          	jal	8002f4c4 <printf>
    800132b4:	00049797          	auipc	a5,0x49
    800132b8:	d5d7c783          	lbu	a5,-675(a5) # 8005c011 <excpt+0x1>
    800132bc:	220797e3          	bnez	a5,80013cea <software_interrupt_msi+0xd06>
    800132c0:	4529                	li	a0,10
    800132c2:	6f11a0ef          	jal	8002e1b2 <putchar>
    800132c6:	c419                	beqz	s0,800132d4 <software_interrupt_msi+0x2f0>
    800132c8:	00049417          	auipc	s0,0x49
    800132cc:	d4944403          	lbu	s0,-695(s0) # 8005c011 <excpt+0x1>
    800132d0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=0，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    800132d4:	b45ed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800132d8:	4511                	li	a0,4
    800132da:	c3bed0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    800132de:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800132e2:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800132e6:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    800132ea:	4511                	li	a0,4
    800132ec:	c29ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    800132f0:	08c00593          	li	a1,140
    800132f4:	00024617          	auipc	a2,0x24
    800132f8:	95c60613          	addi	a2,a2,-1700 # 80036c50 <__func__.0+0x4868>
    800132fc:	0001f517          	auipc	a0,0x1f
    80013300:	3e450513          	addi	a0,a0,996 # 800326e0 <__func__.0+0x2f8>
    80013304:	1c01c0ef          	jal	8002f4c4 <printf>
    80013308:	00049797          	auipc	a5,0x49
    8001330c:	d097c783          	lbu	a5,-759(a5) # 8005c011 <excpt+0x1>
    80013310:	0001f597          	auipc	a1,0x1f
    80013314:	3a858593          	addi	a1,a1,936 # 800326b8 <__func__.0+0x2d0>
    80013318:	e789                	bnez	a5,80013322 <software_interrupt_msi+0x33e>
    8001331a:	0001f597          	auipc	a1,0x1f
    8001331e:	38e58593          	addi	a1,a1,910 # 800326a8 <__func__.0+0x2c0>
    80013322:	0001f517          	auipc	a0,0x1f
    80013326:	3d650513          	addi	a0,a0,982 # 800326f8 <__func__.0+0x310>
    8001332a:	19a1c0ef          	jal	8002f4c4 <printf>
    8001332e:	00049797          	auipc	a5,0x49
    80013332:	ce37c783          	lbu	a5,-797(a5) # 8005c011 <excpt+0x1>
    80013336:	18079ee3          	bnez	a5,80013cd2 <software_interrupt_msi+0xcee>
    8001333a:	4529                	li	a0,10
    8001333c:	6771a0ef          	jal	8002e1b2 <putchar>
    80013340:	c419                	beqz	s0,8001334e <software_interrupt_msi+0x36a>
    80013342:	00049417          	auipc	s0,0x49
    80013346:	ccf44403          	lbu	s0,-817(s0) # 8005c011 <excpt+0x1>
    8001334a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//HS mode 下

    TEST_SETUP_EXCEPT();
    8001334e:	acbed0ef          	jal	80000e18 <test_setup_except_function>
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    80013352:	4511                	li	a0,4
    80013354:	bc1ed0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80013358:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001335c:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013360:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80013364:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013368:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    8001336c:	450d                	li	a0,3
    8001336e:	ba7ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013372:	08c00593          	li	a1,140
    80013376:	00024617          	auipc	a2,0x24
    8001337a:	92a60613          	addi	a2,a2,-1750 # 80036ca0 <__func__.0+0x48b8>
    8001337e:	0001f517          	auipc	a0,0x1f
    80013382:	36250513          	addi	a0,a0,866 # 800326e0 <__func__.0+0x2f8>
    80013386:	13e1c0ef          	jal	8002f4c4 <printf>
    8001338a:	00049797          	auipc	a5,0x49
    8001338e:	c877c783          	lbu	a5,-889(a5) # 8005c011 <excpt+0x1>
    80013392:	0001f597          	auipc	a1,0x1f
    80013396:	32658593          	addi	a1,a1,806 # 800326b8 <__func__.0+0x2d0>
    8001339a:	c799                	beqz	a5,800133a8 <software_interrupt_msi+0x3c4>
    8001339c:	57fd                	li	a5,-1
    8001339e:	6498                	ld	a4,8(s1)
    800133a0:	17fe                	slli	a5,a5,0x3f
    800133a2:	078d                	addi	a5,a5,3
    800133a4:	20f702e3          	beq	a4,a5,80013da8 <software_interrupt_msi+0xdc4>
    800133a8:	0001f517          	auipc	a0,0x1f
    800133ac:	35050513          	addi	a0,a0,848 # 800326f8 <__func__.0+0x310>
    800133b0:	1141c0ef          	jal	8002f4c4 <printf>
    800133b4:	00049797          	auipc	a5,0x49
    800133b8:	c5d7c783          	lbu	a5,-931(a5) # 8005c011 <excpt+0x1>
    800133bc:	c799                	beqz	a5,800133ca <software_interrupt_msi+0x3e6>
    800133be:	57fd                	li	a5,-1
    800133c0:	6498                	ld	a4,8(s1)
    800133c2:	17fe                	slli	a5,a5,0x3f
    800133c4:	078d                	addi	a5,a5,3
    800133c6:	04f700e3          	beq	a4,a5,80013c06 <software_interrupt_msi+0xc22>
    800133ca:	0001f517          	auipc	a0,0x1f
    800133ce:	33650513          	addi	a0,a0,822 # 80032700 <__func__.0+0x318>
    800133d2:	0f21c0ef          	jal	8002f4c4 <printf>
    800133d6:	02900513          	li	a0,41
    800133da:	5d91a0ef          	jal	8002e1b2 <putchar>
    800133de:	4529                	li	a0,10
    800133e0:	5d31a0ef          	jal	8002e1b2 <putchar>
    800133e4:	c801                	beqz	s0,800133f4 <software_interrupt_msi+0x410>
    800133e6:	00049797          	auipc	a5,0x49
    800133ea:	c2b7c783          	lbu	a5,-981(a5) # 8005c011 <excpt+0x1>
    800133ee:	4401                	li	s0,0
    800133f0:	78079a63          	bnez	a5,80013b84 <software_interrupt_msi+0xba0>
        excpt.priv == PRIV_M
    ); 

    
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    800133f4:	a25ed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800133f8:	4511                	li	a0,4
    800133fa:	b1bed0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800133fe:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013402:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013406:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8001340a:	57fd                	li	a5,-1
    8001340c:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    80013410:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80013414:	450d                	li	a0,3
    80013416:	affed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8001341a:	08c00593          	li	a1,140
    8001341e:	00024617          	auipc	a2,0x24
    80013422:	8e260613          	addi	a2,a2,-1822 # 80036d00 <__func__.0+0x4918>
    80013426:	0001f517          	auipc	a0,0x1f
    8001342a:	2ba50513          	addi	a0,a0,698 # 800326e0 <__func__.0+0x2f8>
    8001342e:	0961c0ef          	jal	8002f4c4 <printf>
    80013432:	00049797          	auipc	a5,0x49
    80013436:	bdf7c783          	lbu	a5,-1057(a5) # 8005c011 <excpt+0x1>
    8001343a:	0001f597          	auipc	a1,0x1f
    8001343e:	27e58593          	addi	a1,a1,638 # 800326b8 <__func__.0+0x2d0>
    80013442:	c799                	beqz	a5,80013450 <software_interrupt_msi+0x46c>
    80013444:	57fd                	li	a5,-1
    80013446:	6498                	ld	a4,8(s1)
    80013448:	17fe                	slli	a5,a5,0x3f
    8001344a:	078d                	addi	a5,a5,3
    8001344c:	16f70fe3          	beq	a4,a5,80013dca <software_interrupt_msi+0xde6>
    80013450:	0001f517          	auipc	a0,0x1f
    80013454:	2a850513          	addi	a0,a0,680 # 800326f8 <__func__.0+0x310>
    80013458:	06c1c0ef          	jal	8002f4c4 <printf>
    8001345c:	00049797          	auipc	a5,0x49
    80013460:	bb57c783          	lbu	a5,-1099(a5) # 8005c011 <excpt+0x1>
    80013464:	c799                	beqz	a5,80013472 <software_interrupt_msi+0x48e>
    80013466:	57fd                	li	a5,-1
    80013468:	6498                	ld	a4,8(s1)
    8001346a:	17fe                	slli	a5,a5,0x3f
    8001346c:	078d                	addi	a5,a5,3
    8001346e:	78f70363          	beq	a4,a5,80013bf4 <software_interrupt_msi+0xc10>
    80013472:	0001f517          	auipc	a0,0x1f
    80013476:	28e50513          	addi	a0,a0,654 # 80032700 <__func__.0+0x318>
    8001347a:	04a1c0ef          	jal	8002f4c4 <printf>
    8001347e:	02900513          	li	a0,41
    80013482:	5311a0ef          	jal	8002e1b2 <putchar>
    80013486:	4529                	li	a0,10
    80013488:	52b1a0ef          	jal	8002e1b2 <putchar>
    8001348c:	c801                	beqz	s0,8001349c <software_interrupt_msi+0x4b8>
    8001348e:	00049797          	auipc	a5,0x49
    80013492:	b837c783          	lbu	a5,-1149(a5) # 8005c011 <excpt+0x1>
    80013496:	4401                	li	s0,0
    80013498:	6c079763          	bnez	a5,80013b66 <software_interrupt_msi+0xb82>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    8001349c:	97ded0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800134a0:	4511                	li	a0,4
    800134a2:	a73ed0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800134a6:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800134aa:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800134ae:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    800134b2:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800134b6:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800134ba:	450d                	li	a0,3
    800134bc:	a59ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    800134c0:	08c00593          	li	a1,140
    800134c4:	00024617          	auipc	a2,0x24
    800134c8:	8ac60613          	addi	a2,a2,-1876 # 80036d70 <__func__.0+0x4988>
    800134cc:	0001f517          	auipc	a0,0x1f
    800134d0:	21450513          	addi	a0,a0,532 # 800326e0 <__func__.0+0x2f8>
    800134d4:	7f11b0ef          	jal	8002f4c4 <printf>
    800134d8:	00049797          	auipc	a5,0x49
    800134dc:	b397c783          	lbu	a5,-1223(a5) # 8005c011 <excpt+0x1>
    800134e0:	0001f597          	auipc	a1,0x1f
    800134e4:	1d858593          	addi	a1,a1,472 # 800326b8 <__func__.0+0x2d0>
    800134e8:	e789                	bnez	a5,800134f2 <software_interrupt_msi+0x50e>
    800134ea:	0001f597          	auipc	a1,0x1f
    800134ee:	1be58593          	addi	a1,a1,446 # 800326a8 <__func__.0+0x2c0>
    800134f2:	0001f517          	auipc	a0,0x1f
    800134f6:	20650513          	addi	a0,a0,518 # 800326f8 <__func__.0+0x310>
    800134fa:	7cb1b0ef          	jal	8002f4c4 <printf>
    800134fe:	00049797          	auipc	a5,0x49
    80013502:	b137c783          	lbu	a5,-1261(a5) # 8005c011 <excpt+0x1>
    80013506:	7a079a63          	bnez	a5,80013cba <software_interrupt_msi+0xcd6>
    8001350a:	4529                	li	a0,10
    8001350c:	4a71a0ef          	jal	8002e1b2 <putchar>
    80013510:	c419                	beqz	s0,8001351e <software_interrupt_msi+0x53a>
    80013512:	00049417          	auipc	s0,0x49
    80013516:	aff44403          	lbu	s0,-1281(s0) # 8005c011 <excpt+0x1>
    8001351a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8001351e:	8fbed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013522:	4511                	li	a0,4
    80013524:	9f1ed0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013528:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001352c:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013530:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80013534:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013538:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    8001353c:	450d                	li	a0,3
    8001353e:	9d7ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013542:	08c00593          	li	a1,140
    80013546:	00024617          	auipc	a2,0x24
    8001354a:	89260613          	addi	a2,a2,-1902 # 80036dd8 <__func__.0+0x49f0>
    8001354e:	0001f517          	auipc	a0,0x1f
    80013552:	19250513          	addi	a0,a0,402 # 800326e0 <__func__.0+0x2f8>
    80013556:	76f1b0ef          	jal	8002f4c4 <printf>
    8001355a:	00049797          	auipc	a5,0x49
    8001355e:	ab77c783          	lbu	a5,-1353(a5) # 8005c011 <excpt+0x1>
    80013562:	0001f597          	auipc	a1,0x1f
    80013566:	15658593          	addi	a1,a1,342 # 800326b8 <__func__.0+0x2d0>
    8001356a:	c799                	beqz	a5,80013578 <software_interrupt_msi+0x594>
    8001356c:	57fd                	li	a5,-1
    8001356e:	6498                	ld	a4,8(s1)
    80013570:	17fe                	slli	a5,a5,0x3f
    80013572:	078d                	addi	a5,a5,3
    80013574:	7ef70963          	beq	a4,a5,80013d66 <software_interrupt_msi+0xd82>
    80013578:	0001f517          	auipc	a0,0x1f
    8001357c:	18050513          	addi	a0,a0,384 # 800326f8 <__func__.0+0x310>
    80013580:	7451b0ef          	jal	8002f4c4 <printf>
    80013584:	00049797          	auipc	a5,0x49
    80013588:	a8d7c783          	lbu	a5,-1395(a5) # 8005c011 <excpt+0x1>
    8001358c:	c799                	beqz	a5,8001359a <software_interrupt_msi+0x5b6>
    8001358e:	57fd                	li	a5,-1
    80013590:	6498                	ld	a4,8(s1)
    80013592:	17fe                	slli	a5,a5,0x3f
    80013594:	078d                	addi	a5,a5,3
    80013596:	68f70963          	beq	a4,a5,80013c28 <software_interrupt_msi+0xc44>
    8001359a:	0001f517          	auipc	a0,0x1f
    8001359e:	16650513          	addi	a0,a0,358 # 80032700 <__func__.0+0x318>
    800135a2:	7231b0ef          	jal	8002f4c4 <printf>
    800135a6:	02900513          	li	a0,41
    800135aa:	4091a0ef          	jal	8002e1b2 <putchar>
    800135ae:	4529                	li	a0,10
    800135b0:	4031a0ef          	jal	8002e1b2 <putchar>
    800135b4:	c801                	beqz	s0,800135c4 <software_interrupt_msi+0x5e0>
    800135b6:	00049797          	auipc	a5,0x49
    800135ba:	a5b7c783          	lbu	a5,-1445(a5) # 8005c011 <excpt+0x1>
    800135be:	4401                	li	s0,0
    800135c0:	58079563          	bnez	a5,80013b4a <software_interrupt_msi+0xb66>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    800135c4:	855ed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800135c8:	4511                	li	a0,4
    800135ca:	94bed0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800135ce:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800135d2:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800135d6:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    800135da:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    800135de:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800135e2:	450d                	li	a0,3
    800135e4:	931ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    800135e8:	08c00593          	li	a1,140
    800135ec:	00024617          	auipc	a2,0x24
    800135f0:	85c60613          	addi	a2,a2,-1956 # 80036e48 <__func__.0+0x4a60>
    800135f4:	0001f517          	auipc	a0,0x1f
    800135f8:	0ec50513          	addi	a0,a0,236 # 800326e0 <__func__.0+0x2f8>
    800135fc:	6c91b0ef          	jal	8002f4c4 <printf>
    80013600:	00049797          	auipc	a5,0x49
    80013604:	a117c783          	lbu	a5,-1519(a5) # 8005c011 <excpt+0x1>
    80013608:	0001f597          	auipc	a1,0x1f
    8001360c:	0b058593          	addi	a1,a1,176 # 800326b8 <__func__.0+0x2d0>
    80013610:	c799                	beqz	a5,8001361e <software_interrupt_msi+0x63a>
    80013612:	57fd                	li	a5,-1
    80013614:	6498                	ld	a4,8(s1)
    80013616:	17fe                	slli	a5,a5,0x3f
    80013618:	078d                	addi	a5,a5,3
    8001361a:	6ef70463          	beq	a4,a5,80013d02 <software_interrupt_msi+0xd1e>
    8001361e:	0001f517          	auipc	a0,0x1f
    80013622:	0da50513          	addi	a0,a0,218 # 800326f8 <__func__.0+0x310>
    80013626:	69f1b0ef          	jal	8002f4c4 <printf>
    8001362a:	00049797          	auipc	a5,0x49
    8001362e:	9e77c783          	lbu	a5,-1561(a5) # 8005c011 <excpt+0x1>
    80013632:	c799                	beqz	a5,80013640 <software_interrupt_msi+0x65c>
    80013634:	57fd                	li	a5,-1
    80013636:	6498                	ld	a4,8(s1)
    80013638:	17fe                	slli	a5,a5,0x3f
    8001363a:	078d                	addi	a5,a5,3
    8001363c:	5ef70e63          	beq	a4,a5,80013c38 <software_interrupt_msi+0xc54>
    80013640:	0001f517          	auipc	a0,0x1f
    80013644:	0c050513          	addi	a0,a0,192 # 80032700 <__func__.0+0x318>
    80013648:	67d1b0ef          	jal	8002f4c4 <printf>
    8001364c:	02900513          	li	a0,41
    80013650:	3631a0ef          	jal	8002e1b2 <putchar>
    80013654:	4529                	li	a0,10
    80013656:	35d1a0ef          	jal	8002e1b2 <putchar>
    8001365a:	c801                	beqz	s0,8001366a <software_interrupt_msi+0x686>
    8001365c:	00049797          	auipc	a5,0x49
    80013660:	9b57c783          	lbu	a5,-1611(a5) # 8005c011 <excpt+0x1>
    80013664:	4401                	li	s0,0
    80013666:	4c079463          	bnez	a5,80013b2e <software_interrupt_msi+0xb4a>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    8001366a:	faeed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001366e:	4511                	li	a0,4
    80013670:	8a5ed0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    80013674:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013678:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8001367c:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80013680:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013684:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80013688:	450d                	li	a0,3
    8001368a:	88bed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    8001368e:	08c00593          	li	a1,140
    80013692:	00024617          	auipc	a2,0x24
    80013696:	82660613          	addi	a2,a2,-2010 # 80036eb8 <__func__.0+0x4ad0>
    8001369a:	0001f517          	auipc	a0,0x1f
    8001369e:	04650513          	addi	a0,a0,70 # 800326e0 <__func__.0+0x2f8>
    800136a2:	6231b0ef          	jal	8002f4c4 <printf>
    800136a6:	00049797          	auipc	a5,0x49
    800136aa:	96b7c783          	lbu	a5,-1685(a5) # 8005c011 <excpt+0x1>
    800136ae:	0001f597          	auipc	a1,0x1f
    800136b2:	00a58593          	addi	a1,a1,10 # 800326b8 <__func__.0+0x2d0>
    800136b6:	e789                	bnez	a5,800136c0 <software_interrupt_msi+0x6dc>
    800136b8:	0001f597          	auipc	a1,0x1f
    800136bc:	ff058593          	addi	a1,a1,-16 # 800326a8 <__func__.0+0x2c0>
    800136c0:	0001f517          	auipc	a0,0x1f
    800136c4:	03850513          	addi	a0,a0,56 # 800326f8 <__func__.0+0x310>
    800136c8:	5fd1b0ef          	jal	8002f4c4 <printf>
    800136cc:	00049797          	auipc	a5,0x49
    800136d0:	9457c783          	lbu	a5,-1723(a5) # 8005c011 <excpt+0x1>
    800136d4:	5c079863          	bnez	a5,80013ca4 <software_interrupt_msi+0xcc0>
    800136d8:	4529                	li	a0,10
    800136da:	2d91a0ef          	jal	8002e1b2 <putchar>
    800136de:	c419                	beqz	s0,800136ec <software_interrupt_msi+0x708>
    800136e0:	00049417          	auipc	s0,0x49
    800136e4:	93144403          	lbu	s0,-1743(s0) # 8005c011 <excpt+0x1>
    800136e8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//vs mode 下

    TEST_SETUP_EXCEPT();
    800136ec:	f2ced0ef          	jal	80000e18 <test_setup_except_function>
    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    800136f0:	4511                	li	a0,4
    800136f2:	823ed0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    800136f6:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800136fa:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800136fe:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80013702:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013706:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    8001370a:	4509                	li	a0,2
    8001370c:	809ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013710:	08c00593          	li	a1,140
    80013714:	00024617          	auipc	a2,0x24
    80013718:	80460613          	addi	a2,a2,-2044 # 80036f18 <__func__.0+0x4b30>
    8001371c:	0001f517          	auipc	a0,0x1f
    80013720:	fc450513          	addi	a0,a0,-60 # 800326e0 <__func__.0+0x2f8>
    80013724:	5a11b0ef          	jal	8002f4c4 <printf>
    80013728:	00049797          	auipc	a5,0x49
    8001372c:	8e97c783          	lbu	a5,-1815(a5) # 8005c011 <excpt+0x1>
    80013730:	0001f597          	auipc	a1,0x1f
    80013734:	f8858593          	addi	a1,a1,-120 # 800326b8 <__func__.0+0x2d0>
    80013738:	c799                	beqz	a5,80013746 <software_interrupt_msi+0x762>
    8001373a:	57fd                	li	a5,-1
    8001373c:	6498                	ld	a4,8(s1)
    8001373e:	17fe                	slli	a5,a5,0x3f
    80013740:	078d                	addi	a5,a5,3
    80013742:	64f70363          	beq	a4,a5,80013d88 <software_interrupt_msi+0xda4>
    80013746:	0001f517          	auipc	a0,0x1f
    8001374a:	fb250513          	addi	a0,a0,-78 # 800326f8 <__func__.0+0x310>
    8001374e:	5771b0ef          	jal	8002f4c4 <printf>
    80013752:	00049797          	auipc	a5,0x49
    80013756:	8bf7c783          	lbu	a5,-1857(a5) # 8005c011 <excpt+0x1>
    8001375a:	c799                	beqz	a5,80013768 <software_interrupt_msi+0x784>
    8001375c:	57fd                	li	a5,-1
    8001375e:	6498                	ld	a4,8(s1)
    80013760:	17fe                	slli	a5,a5,0x3f
    80013762:	078d                	addi	a5,a5,3
    80013764:	4af70a63          	beq	a4,a5,80013c18 <software_interrupt_msi+0xc34>
    80013768:	0001f517          	auipc	a0,0x1f
    8001376c:	f9850513          	addi	a0,a0,-104 # 80032700 <__func__.0+0x318>
    80013770:	5551b0ef          	jal	8002f4c4 <printf>
    80013774:	02900513          	li	a0,41
    80013778:	23b1a0ef          	jal	8002e1b2 <putchar>
    8001377c:	4529                	li	a0,10
    8001377e:	2351a0ef          	jal	8002e1b2 <putchar>
    80013782:	c801                	beqz	s0,80013792 <software_interrupt_msi+0x7ae>
    80013784:	00049797          	auipc	a5,0x49
    80013788:	88d7c783          	lbu	a5,-1907(a5) # 8005c011 <excpt+0x1>
    8001378c:	4401                	li	s0,0
    8001378e:	38079263          	bnez	a5,80013b12 <software_interrupt_msi+0xb2e>
        excpt.priv == PRIV_M
    ); 


    //vs模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    80013792:	e86ed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013796:	4511                	li	a0,4
    80013798:	f7ced0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8001379c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800137a0:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800137a4:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    800137a8:	57fd                	li	a5,-1
    800137aa:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    800137ae:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    800137b2:	4509                	li	a0,2
    800137b4:	f60ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800137b8:	08c00593          	li	a1,140
    800137bc:	00023617          	auipc	a2,0x23
    800137c0:	7bc60613          	addi	a2,a2,1980 # 80036f78 <__func__.0+0x4b90>
    800137c4:	0001f517          	auipc	a0,0x1f
    800137c8:	f1c50513          	addi	a0,a0,-228 # 800326e0 <__func__.0+0x2f8>
    800137cc:	4f91b0ef          	jal	8002f4c4 <printf>
    800137d0:	00049797          	auipc	a5,0x49
    800137d4:	8417c783          	lbu	a5,-1983(a5) # 8005c011 <excpt+0x1>
    800137d8:	0001f597          	auipc	a1,0x1f
    800137dc:	ee058593          	addi	a1,a1,-288 # 800326b8 <__func__.0+0x2d0>
    800137e0:	c799                	beqz	a5,800137ee <software_interrupt_msi+0x80a>
    800137e2:	57fd                	li	a5,-1
    800137e4:	6498                	ld	a4,8(s1)
    800137e6:	17fe                	slli	a5,a5,0x3f
    800137e8:	078d                	addi	a5,a5,3
    800137ea:	62f70163          	beq	a4,a5,80013e0c <software_interrupt_msi+0xe28>
    800137ee:	0001f517          	auipc	a0,0x1f
    800137f2:	f0a50513          	addi	a0,a0,-246 # 800326f8 <__func__.0+0x310>
    800137f6:	4cf1b0ef          	jal	8002f4c4 <printf>
    800137fa:	00049797          	auipc	a5,0x49
    800137fe:	8177c783          	lbu	a5,-2025(a5) # 8005c011 <excpt+0x1>
    80013802:	c799                	beqz	a5,80013810 <software_interrupt_msi+0x82c>
    80013804:	57fd                	li	a5,-1
    80013806:	6498                	ld	a4,8(s1)
    80013808:	17fe                	slli	a5,a5,0x3f
    8001380a:	078d                	addi	a5,a5,3
    8001380c:	3cf70463          	beq	a4,a5,80013bd4 <software_interrupt_msi+0xbf0>
    80013810:	0001f517          	auipc	a0,0x1f
    80013814:	ef050513          	addi	a0,a0,-272 # 80032700 <__func__.0+0x318>
    80013818:	4ad1b0ef          	jal	8002f4c4 <printf>
    8001381c:	02900513          	li	a0,41
    80013820:	1931a0ef          	jal	8002e1b2 <putchar>
    80013824:	4529                	li	a0,10
    80013826:	18d1a0ef          	jal	8002e1b2 <putchar>
    8001382a:	c801                	beqz	s0,8001383a <software_interrupt_msi+0x856>
    8001382c:	00048797          	auipc	a5,0x48
    80013830:	7e57c783          	lbu	a5,2021(a5) # 8005c011 <excpt+0x1>
    80013834:	4401                	li	s0,0
    80013836:	2c079063          	bnez	a5,80013af6 <software_interrupt_msi+0xb12>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    8001383a:	ddeed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001383e:	4511                	li	a0,4
    80013840:	ed4ed0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013844:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013848:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001384c:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80013850:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013854:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013858:	4509                	li	a0,2
    8001385a:	ebaed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    8001385e:	08c00593          	li	a1,140
    80013862:	00023617          	auipc	a2,0x23
    80013866:	78660613          	addi	a2,a2,1926 # 80036fe8 <__func__.0+0x4c00>
    8001386a:	0001f517          	auipc	a0,0x1f
    8001386e:	e7650513          	addi	a0,a0,-394 # 800326e0 <__func__.0+0x2f8>
    80013872:	4531b0ef          	jal	8002f4c4 <printf>
    80013876:	00048797          	auipc	a5,0x48
    8001387a:	79b7c783          	lbu	a5,1947(a5) # 8005c011 <excpt+0x1>
    8001387e:	0001f597          	auipc	a1,0x1f
    80013882:	e3a58593          	addi	a1,a1,-454 # 800326b8 <__func__.0+0x2d0>
    80013886:	e789                	bnez	a5,80013890 <software_interrupt_msi+0x8ac>
    80013888:	0001f597          	auipc	a1,0x1f
    8001388c:	e2058593          	addi	a1,a1,-480 # 800326a8 <__func__.0+0x2c0>
    80013890:	0001f517          	auipc	a0,0x1f
    80013894:	e6850513          	addi	a0,a0,-408 # 800326f8 <__func__.0+0x310>
    80013898:	42d1b0ef          	jal	8002f4c4 <printf>
    8001389c:	00048797          	auipc	a5,0x48
    800138a0:	7757c783          	lbu	a5,1909(a5) # 8005c011 <excpt+0x1>
    800138a4:	3a079e63          	bnez	a5,80013c60 <software_interrupt_msi+0xc7c>
    800138a8:	4529                	li	a0,10
    800138aa:	1091a0ef          	jal	8002e1b2 <putchar>
    800138ae:	c419                	beqz	s0,800138bc <software_interrupt_msi+0x8d8>
    800138b0:	00048417          	auipc	s0,0x48
    800138b4:	76144403          	lbu	s0,1889(s0) # 8005c011 <excpt+0x1>
    800138b8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    800138bc:	d5ced0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800138c0:	4511                	li	a0,4
    800138c2:	e52ed0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800138c6:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800138ca:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800138ce:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    800138d2:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800138d6:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    800138da:	4509                	li	a0,2
    800138dc:	e38ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800138e0:	08c00593          	li	a1,140
    800138e4:	00023617          	auipc	a2,0x23
    800138e8:	76c60613          	addi	a2,a2,1900 # 80037050 <__func__.0+0x4c68>
    800138ec:	0001f517          	auipc	a0,0x1f
    800138f0:	df450513          	addi	a0,a0,-524 # 800326e0 <__func__.0+0x2f8>
    800138f4:	3d11b0ef          	jal	8002f4c4 <printf>
    800138f8:	00048797          	auipc	a5,0x48
    800138fc:	7197c783          	lbu	a5,1817(a5) # 8005c011 <excpt+0x1>
    80013900:	0001f597          	auipc	a1,0x1f
    80013904:	db858593          	addi	a1,a1,-584 # 800326b8 <__func__.0+0x2d0>
    80013908:	c799                	beqz	a5,80013916 <software_interrupt_msi+0x932>
    8001390a:	57fd                	li	a5,-1
    8001390c:	6498                	ld	a4,8(s1)
    8001390e:	17fe                	slli	a5,a5,0x3f
    80013910:	078d                	addi	a5,a5,3
    80013912:	40f70963          	beq	a4,a5,80013d24 <software_interrupt_msi+0xd40>
    80013916:	0001f517          	auipc	a0,0x1f
    8001391a:	de250513          	addi	a0,a0,-542 # 800326f8 <__func__.0+0x310>
    8001391e:	3a71b0ef          	jal	8002f4c4 <printf>
    80013922:	00048797          	auipc	a5,0x48
    80013926:	6ef7c783          	lbu	a5,1775(a5) # 8005c011 <excpt+0x1>
    8001392a:	c799                	beqz	a5,80013938 <software_interrupt_msi+0x954>
    8001392c:	57fd                	li	a5,-1
    8001392e:	6498                	ld	a4,8(s1)
    80013930:	17fe                	slli	a5,a5,0x3f
    80013932:	078d                	addi	a5,a5,3
    80013934:	26f70f63          	beq	a4,a5,80013bb2 <software_interrupt_msi+0xbce>
    80013938:	0001f517          	auipc	a0,0x1f
    8001393c:	dc850513          	addi	a0,a0,-568 # 80032700 <__func__.0+0x318>
    80013940:	3851b0ef          	jal	8002f4c4 <printf>
    80013944:	02900513          	li	a0,41
    80013948:	06b1a0ef          	jal	8002e1b2 <putchar>
    8001394c:	4529                	li	a0,10
    8001394e:	0651a0ef          	jal	8002e1b2 <putchar>
    80013952:	c801                	beqz	s0,80013962 <software_interrupt_msi+0x97e>
    80013954:	00048797          	auipc	a5,0x48
    80013958:	6bd7c783          	lbu	a5,1725(a5) # 8005c011 <excpt+0x1>
    8001395c:	4401                	li	s0,0
    8001395e:	16079e63          	bnez	a5,80013ada <software_interrupt_msi+0xaf6>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80013962:	cb6ed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013966:	4511                	li	a0,4
    80013968:	daced0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8001396c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013970:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013974:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    80013978:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    8001397c:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013980:	4509                	li	a0,2
    80013982:	d92ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013986:	08c00593          	li	a1,140
    8001398a:	00023617          	auipc	a2,0x23
    8001398e:	73660613          	addi	a2,a2,1846 # 800370c0 <__func__.0+0x4cd8>
    80013992:	0001f517          	auipc	a0,0x1f
    80013996:	d4e50513          	addi	a0,a0,-690 # 800326e0 <__func__.0+0x2f8>
    8001399a:	32b1b0ef          	jal	8002f4c4 <printf>
    8001399e:	00048797          	auipc	a5,0x48
    800139a2:	6737c783          	lbu	a5,1651(a5) # 8005c011 <excpt+0x1>
    800139a6:	0001f597          	auipc	a1,0x1f
    800139aa:	d1258593          	addi	a1,a1,-750 # 800326b8 <__func__.0+0x2d0>
    800139ae:	c799                	beqz	a5,800139bc <software_interrupt_msi+0x9d8>
    800139b0:	57fd                	li	a5,-1
    800139b2:	6498                	ld	a4,8(s1)
    800139b4:	17fe                	slli	a5,a5,0x3f
    800139b6:	078d                	addi	a5,a5,3
    800139b8:	42f70a63          	beq	a4,a5,80013dec <software_interrupt_msi+0xe08>
    800139bc:	0001f517          	auipc	a0,0x1f
    800139c0:	d3c50513          	addi	a0,a0,-708 # 800326f8 <__func__.0+0x310>
    800139c4:	3011b0ef          	jal	8002f4c4 <printf>
    800139c8:	00048797          	auipc	a5,0x48
    800139cc:	6497c783          	lbu	a5,1609(a5) # 8005c011 <excpt+0x1>
    800139d0:	c799                	beqz	a5,800139de <software_interrupt_msi+0x9fa>
    800139d2:	57fd                	li	a5,-1
    800139d4:	6498                	ld	a4,8(s1)
    800139d6:	17fe                	slli	a5,a5,0x3f
    800139d8:	078d                	addi	a5,a5,3
    800139da:	20f70563          	beq	a4,a5,80013be4 <software_interrupt_msi+0xc00>
    800139de:	0001f517          	auipc	a0,0x1f
    800139e2:	d2250513          	addi	a0,a0,-734 # 80032700 <__func__.0+0x318>
    800139e6:	2df1b0ef          	jal	8002f4c4 <printf>
    800139ea:	02900513          	li	a0,41
    800139ee:	7c41a0ef          	jal	8002e1b2 <putchar>
    800139f2:	4529                	li	a0,10
    800139f4:	7be1a0ef          	jal	8002e1b2 <putchar>
    800139f8:	c419                	beqz	s0,80013a06 <software_interrupt_msi+0xa22>
    800139fa:	00048797          	auipc	a5,0x48
    800139fe:	6177c783          	lbu	a5,1559(a5) # 8005c011 <excpt+0x1>
    80013a02:	4401                	li	s0,0
    80013a04:	efcd                	bnez	a5,80013abe <software_interrupt_msi+0xada>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80013a06:	c12ed0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013a0a:	4511                	li	a0,4
    80013a0c:	d08ed0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    80013a10:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013a14:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013a18:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80013a1c:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013a20:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013a24:	4509                	li	a0,2
    80013a26:	ceeed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013a2a:	08c00593          	li	a1,140
    80013a2e:	00023617          	auipc	a2,0x23
    80013a32:	70260613          	addi	a2,a2,1794 # 80037130 <__func__.0+0x4d48>
    80013a36:	0001f517          	auipc	a0,0x1f
    80013a3a:	caa50513          	addi	a0,a0,-854 # 800326e0 <__func__.0+0x2f8>
    80013a3e:	2871b0ef          	jal	8002f4c4 <printf>
    80013a42:	00048797          	auipc	a5,0x48
    80013a46:	5cf7c783          	lbu	a5,1487(a5) # 8005c011 <excpt+0x1>
    80013a4a:	0001f597          	auipc	a1,0x1f
    80013a4e:	c6e58593          	addi	a1,a1,-914 # 800326b8 <__func__.0+0x2d0>
    80013a52:	e789                	bnez	a5,80013a5c <software_interrupt_msi+0xa78>
    80013a54:	0001f597          	auipc	a1,0x1f
    80013a58:	c5458593          	addi	a1,a1,-940 # 800326a8 <__func__.0+0x2c0>
    80013a5c:	0001f517          	auipc	a0,0x1f
    80013a60:	c9c50513          	addi	a0,a0,-868 # 800326f8 <__func__.0+0x310>
    80013a64:	2611b0ef          	jal	8002f4c4 <printf>
    80013a68:	00048797          	auipc	a5,0x48
    80013a6c:	5a97c783          	lbu	a5,1449(a5) # 8005c011 <excpt+0x1>
    80013a70:	20079f63          	bnez	a5,80013c8e <software_interrupt_msi+0xcaa>
    80013a74:	4529                	li	a0,10
    80013a76:	73c1a0ef          	jal	8002e1b2 <putchar>
    80013a7a:	c411                	beqz	s0,80013a86 <software_interrupt_msi+0xaa2>
    80013a7c:	00048797          	auipc	a5,0x48
    80013a80:	5957c783          	lbu	a5,1429(a5) # 8005c011 <excpt+0x1>
    80013a84:	c79d                	beqz	a5,80013ab2 <software_interrupt_msi+0xace>
    80013a86:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80013a88:	0001f597          	auipc	a1,0x1f
    80013a8c:	c3058593          	addi	a1,a1,-976 # 800326b8 <__func__.0+0x2d0>
    80013a90:	0001f517          	auipc	a0,0x1f
    80013a94:	cd050513          	addi	a0,a0,-816 # 80032760 <__func__.0+0x378>
    80013a98:	22d1b0ef          	jal	8002f4c4 <printf>
    80013a9c:	4511                	li	a0,4
    80013a9e:	c76ed0ef          	jal	80000f14 <goto_priv>
    80013aa2:	cd5ed0ef          	jal	80001776 <reset_state>
}
    80013aa6:	60e2                	ld	ra,24(sp)
    80013aa8:	8522                	mv	a0,s0
    80013aaa:	6442                	ld	s0,16(sp)
    80013aac:	64a2                	ld	s1,8(sp)
    80013aae:	6105                	addi	sp,sp,32
    80013ab0:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013ab2:	4405                	li	s0,1
    TEST_END();
    80013ab4:	0001f597          	auipc	a1,0x1f
    80013ab8:	bf458593          	addi	a1,a1,-1036 # 800326a8 <__func__.0+0x2c0>
    80013abc:	bfd1                	j	80013a90 <software_interrupt_msi+0xaac>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013abe:	57fd                	li	a5,-1
    80013ac0:	6498                	ld	a4,8(s1)
    80013ac2:	17fe                	slli	a5,a5,0x3f
    80013ac4:	078d                	addi	a5,a5,3
    80013ac6:	f4f710e3          	bne	a4,a5,80013a06 <software_interrupt_msi+0xa22>
    80013aca:	00048417          	auipc	s0,0x48
    80013ace:	54a42403          	lw	s0,1354(s0) # 8005c014 <excpt+0x4>
    80013ad2:	1475                	addi	s0,s0,-3
    80013ad4:	00143413          	seqz	s0,s0
    80013ad8:	b73d                	j	80013a06 <software_interrupt_msi+0xa22>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013ada:	57fd                	li	a5,-1
    80013adc:	6498                	ld	a4,8(s1)
    80013ade:	17fe                	slli	a5,a5,0x3f
    80013ae0:	078d                	addi	a5,a5,3
    80013ae2:	e8f710e3          	bne	a4,a5,80013962 <software_interrupt_msi+0x97e>
    80013ae6:	00048417          	auipc	s0,0x48
    80013aea:	52e42403          	lw	s0,1326(s0) # 8005c014 <excpt+0x4>
    80013aee:	1471                	addi	s0,s0,-4
    80013af0:	00143413          	seqz	s0,s0
    80013af4:	b5bd                	j	80013962 <software_interrupt_msi+0x97e>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013af6:	57fd                	li	a5,-1
    80013af8:	6498                	ld	a4,8(s1)
    80013afa:	17fe                	slli	a5,a5,0x3f
    80013afc:	078d                	addi	a5,a5,3
    80013afe:	d2f71ee3          	bne	a4,a5,8001383a <software_interrupt_msi+0x856>
    80013b02:	00048417          	auipc	s0,0x48
    80013b06:	51242403          	lw	s0,1298(s0) # 8005c014 <excpt+0x4>
    80013b0a:	1475                	addi	s0,s0,-3
    80013b0c:	00143413          	seqz	s0,s0
    80013b10:	b32d                	j	8001383a <software_interrupt_msi+0x856>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013b12:	57fd                	li	a5,-1
    80013b14:	6498                	ld	a4,8(s1)
    80013b16:	17fe                	slli	a5,a5,0x3f
    80013b18:	078d                	addi	a5,a5,3
    80013b1a:	c6f71ce3          	bne	a4,a5,80013792 <software_interrupt_msi+0x7ae>
    80013b1e:	00048417          	auipc	s0,0x48
    80013b22:	4f642403          	lw	s0,1270(s0) # 8005c014 <excpt+0x4>
    80013b26:	1471                	addi	s0,s0,-4
    80013b28:	00143413          	seqz	s0,s0
    80013b2c:	b19d                	j	80013792 <software_interrupt_msi+0x7ae>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013b2e:	57fd                	li	a5,-1
    80013b30:	6498                	ld	a4,8(s1)
    80013b32:	17fe                	slli	a5,a5,0x3f
    80013b34:	078d                	addi	a5,a5,3
    80013b36:	b2f71ae3          	bne	a4,a5,8001366a <software_interrupt_msi+0x686>
    80013b3a:	00048417          	auipc	s0,0x48
    80013b3e:	4da42403          	lw	s0,1242(s0) # 8005c014 <excpt+0x4>
    80013b42:	1475                	addi	s0,s0,-3
    80013b44:	00143413          	seqz	s0,s0
    80013b48:	b60d                	j	8001366a <software_interrupt_msi+0x686>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013b4a:	57fd                	li	a5,-1
    80013b4c:	6498                	ld	a4,8(s1)
    80013b4e:	17fe                	slli	a5,a5,0x3f
    80013b50:	078d                	addi	a5,a5,3
    80013b52:	a6f719e3          	bne	a4,a5,800135c4 <software_interrupt_msi+0x5e0>
    80013b56:	00048417          	auipc	s0,0x48
    80013b5a:	4be42403          	lw	s0,1214(s0) # 8005c014 <excpt+0x4>
    80013b5e:	1471                	addi	s0,s0,-4
    80013b60:	00143413          	seqz	s0,s0
    80013b64:	b485                	j	800135c4 <software_interrupt_msi+0x5e0>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013b66:	57fd                	li	a5,-1
    80013b68:	6498                	ld	a4,8(s1)
    80013b6a:	17fe                	slli	a5,a5,0x3f
    80013b6c:	078d                	addi	a5,a5,3
    80013b6e:	92f717e3          	bne	a4,a5,8001349c <software_interrupt_msi+0x4b8>
    80013b72:	00048417          	auipc	s0,0x48
    80013b76:	4a242403          	lw	s0,1186(s0) # 8005c014 <excpt+0x4>
    80013b7a:	1475                	addi	s0,s0,-3
    80013b7c:	00143413          	seqz	s0,s0
    80013b80:	91dff06f          	j	8001349c <software_interrupt_msi+0x4b8>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013b84:	57fd                	li	a5,-1
    80013b86:	6498                	ld	a4,8(s1)
    80013b88:	17fe                	slli	a5,a5,0x3f
    80013b8a:	078d                	addi	a5,a5,3
    80013b8c:	86f714e3          	bne	a4,a5,800133f4 <software_interrupt_msi+0x410>
    80013b90:	00048417          	auipc	s0,0x48
    80013b94:	48442403          	lw	s0,1156(s0) # 8005c014 <excpt+0x4>
    80013b98:	1471                	addi	s0,s0,-4
    80013b9a:	00143413          	seqz	s0,s0
    80013b9e:	857ff06f          	j	800133f4 <software_interrupt_msi+0x410>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    80013ba2:	6480                	ld	s0,8(s1)
    80013ba4:	57ed                	li	a5,-5
    80013ba6:	8385                	srli	a5,a5,0x1
    80013ba8:	943e                	add	s0,s0,a5
    80013baa:	00143413          	seqz	s0,s0
    80013bae:	e32ff06f          	j	800131e0 <software_interrupt_msi+0x1fc>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013bb2:	00048717          	auipc	a4,0x48
    80013bb6:	46272703          	lw	a4,1122(a4) # 8005c014 <excpt+0x4>
    80013bba:	4791                	li	a5,4
    80013bbc:	d6f71ee3          	bne	a4,a5,80013938 <software_interrupt_msi+0x954>
    80013bc0:	b371                	j	8001394c <software_interrupt_msi+0x968>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013bc2:	00048717          	auipc	a4,0x48
    80013bc6:	45272703          	lw	a4,1106(a4) # 8005c014 <excpt+0x4>
    80013bca:	4791                	li	a5,4
    80013bcc:	caf71d63          	bne	a4,a5,80013086 <software_interrupt_msi+0xa2>
    80013bd0:	ccaff06f          	j	8001309a <software_interrupt_msi+0xb6>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013bd4:	00048717          	auipc	a4,0x48
    80013bd8:	44072703          	lw	a4,1088(a4) # 8005c014 <excpt+0x4>
    80013bdc:	478d                	li	a5,3
    80013bde:	c2f719e3          	bne	a4,a5,80013810 <software_interrupt_msi+0x82c>
    80013be2:	b189                	j	80013824 <software_interrupt_msi+0x840>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013be4:	00048717          	auipc	a4,0x48
    80013be8:	43072703          	lw	a4,1072(a4) # 8005c014 <excpt+0x4>
    80013bec:	478d                	li	a5,3
    80013bee:	def718e3          	bne	a4,a5,800139de <software_interrupt_msi+0x9fa>
    80013bf2:	b501                	j	800139f2 <software_interrupt_msi+0xa0e>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013bf4:	00048717          	auipc	a4,0x48
    80013bf8:	42072703          	lw	a4,1056(a4) # 8005c014 <excpt+0x4>
    80013bfc:	478d                	li	a5,3
    80013bfe:	86f71ae3          	bne	a4,a5,80013472 <software_interrupt_msi+0x48e>
    80013c02:	885ff06f          	j	80013486 <software_interrupt_msi+0x4a2>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013c06:	00048717          	auipc	a4,0x48
    80013c0a:	40e72703          	lw	a4,1038(a4) # 8005c014 <excpt+0x4>
    80013c0e:	4791                	li	a5,4
    80013c10:	faf71d63          	bne	a4,a5,800133ca <software_interrupt_msi+0x3e6>
    80013c14:	fcaff06f          	j	800133de <software_interrupt_msi+0x3fa>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013c18:	00048717          	auipc	a4,0x48
    80013c1c:	3fc72703          	lw	a4,1020(a4) # 8005c014 <excpt+0x4>
    80013c20:	4791                	li	a5,4
    80013c22:	b4f713e3          	bne	a4,a5,80013768 <software_interrupt_msi+0x784>
    80013c26:	be99                	j	8001377c <software_interrupt_msi+0x798>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013c28:	00048717          	auipc	a4,0x48
    80013c2c:	3ec72703          	lw	a4,1004(a4) # 8005c014 <excpt+0x4>
    80013c30:	4791                	li	a5,4
    80013c32:	96f714e3          	bne	a4,a5,8001359a <software_interrupt_msi+0x5b6>
    80013c36:	baa5                	j	800135ae <software_interrupt_msi+0x5ca>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013c38:	00048717          	auipc	a4,0x48
    80013c3c:	3dc72703          	lw	a4,988(a4) # 8005c014 <excpt+0x4>
    80013c40:	478d                	li	a5,3
    80013c42:	9ef71fe3          	bne	a4,a5,80013640 <software_interrupt_msi+0x65c>
    80013c46:	b439                	j	80013654 <software_interrupt_msi+0x670>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    80013c48:	0001f517          	auipc	a0,0x1f
    80013c4c:	ab850513          	addi	a0,a0,-1352 # 80032700 <__func__.0+0x318>
    80013c50:	0751b0ef          	jal	8002f4c4 <printf>
    80013c54:	02900513          	li	a0,41
    80013c58:	55a1a0ef          	jal	8002e1b2 <putchar>
    80013c5c:	cc2ff06f          	j	8001311e <software_interrupt_msi+0x13a>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013c60:	0001f517          	auipc	a0,0x1f
    80013c64:	aa050513          	addi	a0,a0,-1376 # 80032700 <__func__.0+0x318>
    80013c68:	05d1b0ef          	jal	8002f4c4 <printf>
    80013c6c:	02900513          	li	a0,41
    80013c70:	5421a0ef          	jal	8002e1b2 <putchar>
    80013c74:	b915                	j	800138a8 <software_interrupt_msi+0x8c4>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80013c76:	0001f517          	auipc	a0,0x1f
    80013c7a:	a8a50513          	addi	a0,a0,-1398 # 80032700 <__func__.0+0x318>
    80013c7e:	0471b0ef          	jal	8002f4c4 <printf>
    80013c82:	02900513          	li	a0,41
    80013c86:	52c1a0ef          	jal	8002e1b2 <putchar>
    80013c8a:	dbcff06f          	j	80013246 <software_interrupt_msi+0x262>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013c8e:	0001f517          	auipc	a0,0x1f
    80013c92:	a7250513          	addi	a0,a0,-1422 # 80032700 <__func__.0+0x318>
    80013c96:	02f1b0ef          	jal	8002f4c4 <printf>
    80013c9a:	02900513          	li	a0,41
    80013c9e:	5141a0ef          	jal	8002e1b2 <putchar>
    80013ca2:	bbc9                	j	80013a74 <software_interrupt_msi+0xa90>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013ca4:	0001f517          	auipc	a0,0x1f
    80013ca8:	a5c50513          	addi	a0,a0,-1444 # 80032700 <__func__.0+0x318>
    80013cac:	0191b0ef          	jal	8002f4c4 <printf>
    80013cb0:	02900513          	li	a0,41
    80013cb4:	4fe1a0ef          	jal	8002e1b2 <putchar>
    80013cb8:	b405                	j	800136d8 <software_interrupt_msi+0x6f4>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013cba:	0001f517          	auipc	a0,0x1f
    80013cbe:	a4650513          	addi	a0,a0,-1466 # 80032700 <__func__.0+0x318>
    80013cc2:	0031b0ef          	jal	8002f4c4 <printf>
    80013cc6:	02900513          	li	a0,41
    80013cca:	4e81a0ef          	jal	8002e1b2 <putchar>
    80013cce:	83dff06f          	j	8001350a <software_interrupt_msi+0x526>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    80013cd2:	0001f517          	auipc	a0,0x1f
    80013cd6:	a2e50513          	addi	a0,a0,-1490 # 80032700 <__func__.0+0x318>
    80013cda:	7ea1b0ef          	jal	8002f4c4 <printf>
    80013cde:	02900513          	li	a0,41
    80013ce2:	4d01a0ef          	jal	8002e1b2 <putchar>
    80013ce6:	e54ff06f          	j	8001333a <software_interrupt_msi+0x356>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    80013cea:	0001f517          	auipc	a0,0x1f
    80013cee:	a1650513          	addi	a0,a0,-1514 # 80032700 <__func__.0+0x318>
    80013cf2:	7d21b0ef          	jal	8002f4c4 <printf>
    80013cf6:	02900513          	li	a0,41
    80013cfa:	4b81a0ef          	jal	8002e1b2 <putchar>
    80013cfe:	dc2ff06f          	j	800132c0 <software_interrupt_msi+0x2dc>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013d02:	00048717          	auipc	a4,0x48
    80013d06:	31272703          	lw	a4,786(a4) # 8005c014 <excpt+0x4>
    80013d0a:	478d                	li	a5,3
    80013d0c:	0001f597          	auipc	a1,0x1f
    80013d10:	99c58593          	addi	a1,a1,-1636 # 800326a8 <__func__.0+0x2c0>
    80013d14:	90f705e3          	beq	a4,a5,8001361e <software_interrupt_msi+0x63a>
    80013d18:	0001f597          	auipc	a1,0x1f
    80013d1c:	9a058593          	addi	a1,a1,-1632 # 800326b8 <__func__.0+0x2d0>
    80013d20:	8ffff06f          	j	8001361e <software_interrupt_msi+0x63a>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013d24:	00048717          	auipc	a4,0x48
    80013d28:	2f072703          	lw	a4,752(a4) # 8005c014 <excpt+0x4>
    80013d2c:	4791                	li	a5,4
    80013d2e:	0001f597          	auipc	a1,0x1f
    80013d32:	97a58593          	addi	a1,a1,-1670 # 800326a8 <__func__.0+0x2c0>
    80013d36:	bef700e3          	beq	a4,a5,80013916 <software_interrupt_msi+0x932>
    80013d3a:	0001f597          	auipc	a1,0x1f
    80013d3e:	97e58593          	addi	a1,a1,-1666 # 800326b8 <__func__.0+0x2d0>
    80013d42:	bed1                	j	80013916 <software_interrupt_msi+0x932>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013d44:	00048717          	auipc	a4,0x48
    80013d48:	2d072703          	lw	a4,720(a4) # 8005c014 <excpt+0x4>
    80013d4c:	4791                	li	a5,4
    80013d4e:	0001f597          	auipc	a1,0x1f
    80013d52:	95a58593          	addi	a1,a1,-1702 # 800326a8 <__func__.0+0x2c0>
    80013d56:	b0f70763          	beq	a4,a5,80013064 <software_interrupt_msi+0x80>
    80013d5a:	0001f597          	auipc	a1,0x1f
    80013d5e:	95e58593          	addi	a1,a1,-1698 # 800326b8 <__func__.0+0x2d0>
    80013d62:	b02ff06f          	j	80013064 <software_interrupt_msi+0x80>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013d66:	00048717          	auipc	a4,0x48
    80013d6a:	2ae72703          	lw	a4,686(a4) # 8005c014 <excpt+0x4>
    80013d6e:	4791                	li	a5,4
    80013d70:	0001f597          	auipc	a1,0x1f
    80013d74:	93858593          	addi	a1,a1,-1736 # 800326a8 <__func__.0+0x2c0>
    80013d78:	80f700e3          	beq	a4,a5,80013578 <software_interrupt_msi+0x594>
    80013d7c:	0001f597          	auipc	a1,0x1f
    80013d80:	93c58593          	addi	a1,a1,-1732 # 800326b8 <__func__.0+0x2d0>
    80013d84:	ff4ff06f          	j	80013578 <software_interrupt_msi+0x594>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013d88:	00048717          	auipc	a4,0x48
    80013d8c:	28c72703          	lw	a4,652(a4) # 8005c014 <excpt+0x4>
    80013d90:	4791                	li	a5,4
    80013d92:	0001f597          	auipc	a1,0x1f
    80013d96:	91658593          	addi	a1,a1,-1770 # 800326a8 <__func__.0+0x2c0>
    80013d9a:	9af706e3          	beq	a4,a5,80013746 <software_interrupt_msi+0x762>
    80013d9e:	0001f597          	auipc	a1,0x1f
    80013da2:	91a58593          	addi	a1,a1,-1766 # 800326b8 <__func__.0+0x2d0>
    80013da6:	b245                	j	80013746 <software_interrupt_msi+0x762>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013da8:	00048717          	auipc	a4,0x48
    80013dac:	26c72703          	lw	a4,620(a4) # 8005c014 <excpt+0x4>
    80013db0:	4791                	li	a5,4
    80013db2:	0001f597          	auipc	a1,0x1f
    80013db6:	8f658593          	addi	a1,a1,-1802 # 800326a8 <__func__.0+0x2c0>
    80013dba:	def70763          	beq	a4,a5,800133a8 <software_interrupt_msi+0x3c4>
    80013dbe:	0001f597          	auipc	a1,0x1f
    80013dc2:	8fa58593          	addi	a1,a1,-1798 # 800326b8 <__func__.0+0x2d0>
    80013dc6:	de2ff06f          	j	800133a8 <software_interrupt_msi+0x3c4>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013dca:	00048717          	auipc	a4,0x48
    80013dce:	24a72703          	lw	a4,586(a4) # 8005c014 <excpt+0x4>
    80013dd2:	478d                	li	a5,3
    80013dd4:	0001f597          	auipc	a1,0x1f
    80013dd8:	8d458593          	addi	a1,a1,-1836 # 800326a8 <__func__.0+0x2c0>
    80013ddc:	e6f70a63          	beq	a4,a5,80013450 <software_interrupt_msi+0x46c>
    80013de0:	0001f597          	auipc	a1,0x1f
    80013de4:	8d858593          	addi	a1,a1,-1832 # 800326b8 <__func__.0+0x2d0>
    80013de8:	e68ff06f          	j	80013450 <software_interrupt_msi+0x46c>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013dec:	00048717          	auipc	a4,0x48
    80013df0:	22872703          	lw	a4,552(a4) # 8005c014 <excpt+0x4>
    80013df4:	478d                	li	a5,3
    80013df6:	0001f597          	auipc	a1,0x1f
    80013dfa:	8b258593          	addi	a1,a1,-1870 # 800326a8 <__func__.0+0x2c0>
    80013dfe:	baf70fe3          	beq	a4,a5,800139bc <software_interrupt_msi+0x9d8>
    80013e02:	0001f597          	auipc	a1,0x1f
    80013e06:	8b658593          	addi	a1,a1,-1866 # 800326b8 <__func__.0+0x2d0>
    80013e0a:	be4d                	j	800139bc <software_interrupt_msi+0x9d8>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013e0c:	00048717          	auipc	a4,0x48
    80013e10:	20872703          	lw	a4,520(a4) # 8005c014 <excpt+0x4>
    80013e14:	478d                	li	a5,3
    80013e16:	0001f597          	auipc	a1,0x1f
    80013e1a:	89258593          	addi	a1,a1,-1902 # 800326a8 <__func__.0+0x2c0>
    80013e1e:	9cf708e3          	beq	a4,a5,800137ee <software_interrupt_msi+0x80a>
    80013e22:	0001f597          	auipc	a1,0x1f
    80013e26:	89658593          	addi	a1,a1,-1898 # 800326b8 <__func__.0+0x2d0>
    80013e2a:	b2d1                	j	800137ee <software_interrupt_msi+0x80a>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013e2c:	00048417          	auipc	s0,0x48
    80013e30:	1e842403          	lw	s0,488(s0) # 8005c014 <excpt+0x4>
    80013e34:	1471                	addi	s0,s0,-4
    80013e36:	00143413          	seqz	s0,s0
    80013e3a:	a7eff06f          	j	800130b8 <software_interrupt_msi+0xd4>

0000000080013e3e <software_interrupt_ssi>:



bool software_interrupt_ssi() {
    80013e3e:	1101                	addi	sp,sp,-32

    TEST_START();
    80013e40:	0001d597          	auipc	a1,0x1d
    80013e44:	cf058593          	addi	a1,a1,-784 # 80030b30 <__func__.1>
    80013e48:	0001f517          	auipc	a0,0x1f
    80013e4c:	88050513          	addi	a0,a0,-1920 # 800326c8 <__func__.0+0x2e0>
bool software_interrupt_ssi() {
    80013e50:	ec06                	sd	ra,24(sp)
    80013e52:	e822                	sd	s0,16(sp)
    80013e54:	e426                	sd	s1,8(sp)
    TEST_START();
    80013e56:	66e1b0ef          	jal	8002f4c4 <printf>
    80013e5a:	4529                	li	a0,10
    80013e5c:	3561a0ef          	jal	8002e1b2 <putchar>

    TEST_SETUP_EXCEPT();
    80013e60:	fb9ec0ef          	jal	80000e18 <test_setup_except_function>

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    goto_priv(PRIV_M);
    80013e64:	4511                	li	a0,4
    80013e66:	8aeed0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80013e6a:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    80013e6e:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    80013e72:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80013e76:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80013e7a:	450d                	li	a0,3
    80013e7c:	898ed0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80013e80:	08c00593          	li	a1,140
    80013e84:	00023617          	auipc	a2,0x23
    80013e88:	30c60613          	addi	a2,a2,780 # 80037190 <__func__.0+0x4da8>
    80013e8c:	0001f517          	auipc	a0,0x1f
    80013e90:	85450513          	addi	a0,a0,-1964 # 800326e0 <__func__.0+0x2f8>
    80013e94:	6301b0ef          	jal	8002f4c4 <printf>
    80013e98:	00048797          	auipc	a5,0x48
    80013e9c:	1797c783          	lbu	a5,377(a5) # 8005c011 <excpt+0x1>
    80013ea0:	00048497          	auipc	s1,0x48
    80013ea4:	17048493          	addi	s1,s1,368 # 8005c010 <excpt>
    80013ea8:	0001f597          	auipc	a1,0x1f
    80013eac:	81058593          	addi	a1,a1,-2032 # 800326b8 <__func__.0+0x2d0>
    80013eb0:	c799                	beqz	a5,80013ebe <software_interrupt_ssi+0x80>
    80013eb2:	57fd                	li	a5,-1
    80013eb4:	6498                	ld	a4,8(s1)
    80013eb6:	17fe                	slli	a5,a5,0x3f
    80013eb8:	0785                	addi	a5,a5,1
    80013eba:	26f706e3          	beq	a4,a5,80014926 <software_interrupt_ssi+0xae8>
    80013ebe:	0001f517          	auipc	a0,0x1f
    80013ec2:	83a50513          	addi	a0,a0,-1990 # 800326f8 <__func__.0+0x310>
    80013ec6:	5fe1b0ef          	jal	8002f4c4 <printf>
    80013eca:	00048797          	auipc	a5,0x48
    80013ece:	1477c783          	lbu	a5,327(a5) # 8005c011 <excpt+0x1>
    80013ed2:	c799                	beqz	a5,80013ee0 <software_interrupt_ssi+0xa2>
    80013ed4:	57fd                	li	a5,-1
    80013ed6:	6498                	ld	a4,8(s1)
    80013ed8:	17fe                	slli	a5,a5,0x3f
    80013eda:	0785                	addi	a5,a5,1
    80013edc:	08f70de3          	beq	a4,a5,80014776 <software_interrupt_ssi+0x938>
    80013ee0:	0001f517          	auipc	a0,0x1f
    80013ee4:	82050513          	addi	a0,a0,-2016 # 80032700 <__func__.0+0x318>
    80013ee8:	5dc1b0ef          	jal	8002f4c4 <printf>
    80013eec:	02900513          	li	a0,41
    80013ef0:	2c21a0ef          	jal	8002e1b2 <putchar>
    80013ef4:	4529                	li	a0,10
    80013ef6:	2bc1a0ef          	jal	8002e1b2 <putchar>
    80013efa:	00048797          	auipc	a5,0x48
    80013efe:	1177c783          	lbu	a5,279(a5) # 8005c011 <excpt+0x1>
    80013f02:	4401                	li	s0,0
    80013f04:	c799                	beqz	a5,80013f12 <software_interrupt_ssi+0xd4>
    80013f06:	57fd                	li	a5,-1
    80013f08:	6498                	ld	a4,8(s1)
    80013f0a:	17fe                	slli	a5,a5,0x3f
    80013f0c:	0785                	addi	a5,a5,1
    80013f0e:	18f701e3          	beq	a4,a5,80014890 <software_interrupt_ssi+0xa52>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80013f12:	f07ec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013f16:	4511                	li	a0,4
    80013f18:	ffdec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80013f1c:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80013f20:	57fd                	li	a5,-1
    80013f22:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80013f26:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80013f2a:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80013f2e:	450d                	li	a0,3
    80013f30:	fe5ec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80013f34:	08c00593          	li	a1,140
    80013f38:	00023617          	auipc	a2,0x23
    80013f3c:	2c860613          	addi	a2,a2,712 # 80037200 <__func__.0+0x4e18>
    80013f40:	0001e517          	auipc	a0,0x1e
    80013f44:	7a050513          	addi	a0,a0,1952 # 800326e0 <__func__.0+0x2f8>
    80013f48:	57c1b0ef          	jal	8002f4c4 <printf>
    80013f4c:	00048797          	auipc	a5,0x48
    80013f50:	0c57c783          	lbu	a5,197(a5) # 8005c011 <excpt+0x1>
    80013f54:	0001e597          	auipc	a1,0x1e
    80013f58:	76458593          	addi	a1,a1,1892 # 800326b8 <__func__.0+0x2d0>
    80013f5c:	c799                	beqz	a5,80013f6a <software_interrupt_ssi+0x12c>
    80013f5e:	57fd                	li	a5,-1
    80013f60:	6498                	ld	a4,8(s1)
    80013f62:	17fe                	slli	a5,a5,0x3f
    80013f64:	0785                	addi	a5,a5,1
    80013f66:	12f70ee3          	beq	a4,a5,800148a2 <software_interrupt_ssi+0xa64>
    80013f6a:	0001e517          	auipc	a0,0x1e
    80013f6e:	78e50513          	addi	a0,a0,1934 # 800326f8 <__func__.0+0x310>
    80013f72:	5521b0ef          	jal	8002f4c4 <printf>
    80013f76:	00048797          	auipc	a5,0x48
    80013f7a:	09b7c783          	lbu	a5,155(a5) # 8005c011 <excpt+0x1>
    80013f7e:	c799                	beqz	a5,80013f8c <software_interrupt_ssi+0x14e>
    80013f80:	57fd                	li	a5,-1
    80013f82:	6498                	ld	a4,8(s1)
    80013f84:	17fe                	slli	a5,a5,0x3f
    80013f86:	0785                	addi	a5,a5,1
    80013f88:	7cf70e63          	beq	a4,a5,80014764 <software_interrupt_ssi+0x926>
    80013f8c:	0001e517          	auipc	a0,0x1e
    80013f90:	77450513          	addi	a0,a0,1908 # 80032700 <__func__.0+0x318>
    80013f94:	5301b0ef          	jal	8002f4c4 <printf>
    80013f98:	02900513          	li	a0,41
    80013f9c:	2161a0ef          	jal	8002e1b2 <putchar>
    80013fa0:	4529                	li	a0,10
    80013fa2:	2101a0ef          	jal	8002e1b2 <putchar>
    80013fa6:	c801                	beqz	s0,80013fb6 <software_interrupt_ssi+0x178>
    80013fa8:	00048797          	auipc	a5,0x48
    80013fac:	0697c783          	lbu	a5,105(a5) # 8005c011 <excpt+0x1>
    80013fb0:	4401                	li	s0,0
    80013fb2:	78079a63          	bnez	a5,80014746 <software_interrupt_ssi+0x908>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80013fb6:	e63ec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013fba:	4511                	li	a0,4
    80013fbc:	f59ec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80013fc0:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80013fc4:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    80013fc8:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80013fcc:	450d                	li	a0,3
    80013fce:	f47ec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80013fd2:	08c00593          	li	a1,140
    80013fd6:	00023617          	auipc	a2,0x23
    80013fda:	29a60613          	addi	a2,a2,666 # 80037270 <__func__.0+0x4e88>
    80013fde:	0001e517          	auipc	a0,0x1e
    80013fe2:	70250513          	addi	a0,a0,1794 # 800326e0 <__func__.0+0x2f8>
    80013fe6:	4de1b0ef          	jal	8002f4c4 <printf>
    80013fea:	00048797          	auipc	a5,0x48
    80013fee:	0277c783          	lbu	a5,39(a5) # 8005c011 <excpt+0x1>
    80013ff2:	0001e597          	auipc	a1,0x1e
    80013ff6:	6c658593          	addi	a1,a1,1734 # 800326b8 <__func__.0+0x2d0>
    80013ffa:	e789                	bnez	a5,80014004 <software_interrupt_ssi+0x1c6>
    80013ffc:	0001e597          	auipc	a1,0x1e
    80014000:	6ac58593          	addi	a1,a1,1708 # 800326a8 <__func__.0+0x2c0>
    80014004:	0001e517          	auipc	a0,0x1e
    80014008:	6f450513          	addi	a0,a0,1780 # 800326f8 <__func__.0+0x310>
    8001400c:	4b81b0ef          	jal	8002f4c4 <printf>
    80014010:	00048797          	auipc	a5,0x48
    80014014:	0017c783          	lbu	a5,1(a5) # 8005c011 <excpt+0x1>
    80014018:	7e079463          	bnez	a5,80014800 <software_interrupt_ssi+0x9c2>
    8001401c:	4529                	li	a0,10
    8001401e:	1941a0ef          	jal	8002e1b2 <putchar>
    80014022:	c419                	beqz	s0,80014030 <software_interrupt_ssi+0x1f2>
    80014024:	00048417          	auipc	s0,0x48
    80014028:	fed44403          	lbu	s0,-19(s0) # 8005c011 <excpt+0x1>
    8001402c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    80014030:	de9ec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80014034:	4511                	li	a0,4
    80014036:	edfec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001403a:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    8001403e:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    80014042:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014046:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    8001404a:	450d                	li	a0,3
    8001404c:	ec9ec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014050:	08c00593          	li	a1,140
    80014054:	00023617          	auipc	a2,0x23
    80014058:	27460613          	addi	a2,a2,628 # 800372c8 <__func__.0+0x4ee0>
    8001405c:	0001e517          	auipc	a0,0x1e
    80014060:	68450513          	addi	a0,a0,1668 # 800326e0 <__func__.0+0x2f8>
    80014064:	4601b0ef          	jal	8002f4c4 <printf>
    80014068:	00048797          	auipc	a5,0x48
    8001406c:	fa97c783          	lbu	a5,-87(a5) # 8005c011 <excpt+0x1>
    80014070:	0001e597          	auipc	a1,0x1e
    80014074:	64858593          	addi	a1,a1,1608 # 800326b8 <__func__.0+0x2d0>
    80014078:	c799                	beqz	a5,80014086 <software_interrupt_ssi+0x248>
    8001407a:	57fd                	li	a5,-1
    8001407c:	6498                	ld	a4,8(s1)
    8001407e:	17fe                	slli	a5,a5,0x3f
    80014080:	0785                	addi	a5,a5,1
    80014082:	04f701e3          	beq	a4,a5,800148c4 <software_interrupt_ssi+0xa86>
    80014086:	0001e517          	auipc	a0,0x1e
    8001408a:	67250513          	addi	a0,a0,1650 # 800326f8 <__func__.0+0x310>
    8001408e:	4361b0ef          	jal	8002f4c4 <printf>
    80014092:	00048797          	auipc	a5,0x48
    80014096:	f7f7c783          	lbu	a5,-129(a5) # 8005c011 <excpt+0x1>
    8001409a:	c799                	beqz	a5,800140a8 <software_interrupt_ssi+0x26a>
    8001409c:	57fd                	li	a5,-1
    8001409e:	6498                	ld	a4,8(s1)
    800140a0:	17fe                	slli	a5,a5,0x3f
    800140a2:	0785                	addi	a5,a5,1
    800140a4:	70f70a63          	beq	a4,a5,800147b8 <software_interrupt_ssi+0x97a>
    800140a8:	0001e517          	auipc	a0,0x1e
    800140ac:	65850513          	addi	a0,a0,1624 # 80032700 <__func__.0+0x318>
    800140b0:	4141b0ef          	jal	8002f4c4 <printf>
    800140b4:	02900513          	li	a0,41
    800140b8:	0fa1a0ef          	jal	8002e1b2 <putchar>
    800140bc:	4529                	li	a0,10
    800140be:	0f41a0ef          	jal	8002e1b2 <putchar>
    800140c2:	c801                	beqz	s0,800140d2 <software_interrupt_ssi+0x294>
    800140c4:	00048797          	auipc	a5,0x48
    800140c8:	f4d7c783          	lbu	a5,-179(a5) # 8005c011 <excpt+0x1>
    800140cc:	4401                	li	s0,0
    800140ce:	64079e63          	bnez	a5,8001472a <software_interrupt_ssi+0x8ec>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    800140d2:	d47ec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800140d6:	4511                	li	a0,4
    800140d8:	e3dec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800140dc:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800140e0:	57fd                	li	a5,-1
    800140e2:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800140e6:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800140ea:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    800140ee:	450d                	li	a0,3
    800140f0:	e25ec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800140f4:	08c00593          	li	a1,140
    800140f8:	00023617          	auipc	a2,0x23
    800140fc:	24060613          	addi	a2,a2,576 # 80037338 <__func__.0+0x4f50>
    80014100:	0001e517          	auipc	a0,0x1e
    80014104:	5e050513          	addi	a0,a0,1504 # 800326e0 <__func__.0+0x2f8>
    80014108:	3bc1b0ef          	jal	8002f4c4 <printf>
    8001410c:	00048797          	auipc	a5,0x48
    80014110:	f057c783          	lbu	a5,-251(a5) # 8005c011 <excpt+0x1>
    80014114:	0001e597          	auipc	a1,0x1e
    80014118:	5a458593          	addi	a1,a1,1444 # 800326b8 <__func__.0+0x2d0>
    8001411c:	c799                	beqz	a5,8001412a <software_interrupt_ssi+0x2ec>
    8001411e:	57fd                	li	a5,-1
    80014120:	6498                	ld	a4,8(s1)
    80014122:	17fe                	slli	a5,a5,0x3f
    80014124:	0785                	addi	a5,a5,1
    80014126:	02f701e3          	beq	a4,a5,80014948 <software_interrupt_ssi+0xb0a>
    8001412a:	0001e517          	auipc	a0,0x1e
    8001412e:	5ce50513          	addi	a0,a0,1486 # 800326f8 <__func__.0+0x310>
    80014132:	3921b0ef          	jal	8002f4c4 <printf>
    80014136:	00048797          	auipc	a5,0x48
    8001413a:	edb7c783          	lbu	a5,-293(a5) # 8005c011 <excpt+0x1>
    8001413e:	c799                	beqz	a5,8001414c <software_interrupt_ssi+0x30e>
    80014140:	57fd                	li	a5,-1
    80014142:	6498                	ld	a4,8(s1)
    80014144:	17fe                	slli	a5,a5,0x3f
    80014146:	0785                	addi	a5,a5,1
    80014148:	68f70163          	beq	a4,a5,800147ca <software_interrupt_ssi+0x98c>
    8001414c:	0001e517          	auipc	a0,0x1e
    80014150:	5b450513          	addi	a0,a0,1460 # 80032700 <__func__.0+0x318>
    80014154:	3701b0ef          	jal	8002f4c4 <printf>
    80014158:	02900513          	li	a0,41
    8001415c:	0561a0ef          	jal	8002e1b2 <putchar>
    80014160:	4529                	li	a0,10
    80014162:	0501a0ef          	jal	8002e1b2 <putchar>
    80014166:	c801                	beqz	s0,80014176 <software_interrupt_ssi+0x338>
    80014168:	00048797          	auipc	a5,0x48
    8001416c:	ea97c783          	lbu	a5,-343(a5) # 8005c011 <excpt+0x1>
    80014170:	4401                	li	s0,0
    80014172:	58079e63          	bnez	a5,8001470e <software_interrupt_ssi+0x8d0>
        excpt.priv == PRIV_HS
    );


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80014176:	ca3ec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001417a:	4511                	li	a0,4
    8001417c:	d99ec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014180:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80014184:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014188:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    8001418c:	450d                	li	a0,3
    8001418e:	d87ec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80014192:	08c00593          	li	a1,140
    80014196:	00023617          	auipc	a2,0x23
    8001419a:	20260613          	addi	a2,a2,514 # 80037398 <__func__.0+0x4fb0>
    8001419e:	0001e517          	auipc	a0,0x1e
    800141a2:	54250513          	addi	a0,a0,1346 # 800326e0 <__func__.0+0x2f8>
    800141a6:	31e1b0ef          	jal	8002f4c4 <printf>
    800141aa:	00048797          	auipc	a5,0x48
    800141ae:	e677c783          	lbu	a5,-409(a5) # 8005c011 <excpt+0x1>
    800141b2:	0001e597          	auipc	a1,0x1e
    800141b6:	50658593          	addi	a1,a1,1286 # 800326b8 <__func__.0+0x2d0>
    800141ba:	e789                	bnez	a5,800141c4 <software_interrupt_ssi+0x386>
    800141bc:	0001e597          	auipc	a1,0x1e
    800141c0:	4ec58593          	addi	a1,a1,1260 # 800326a8 <__func__.0+0x2c0>
    800141c4:	0001e517          	auipc	a0,0x1e
    800141c8:	53450513          	addi	a0,a0,1332 # 800326f8 <__func__.0+0x310>
    800141cc:	2f81b0ef          	jal	8002f4c4 <printf>
    800141d0:	00048797          	auipc	a5,0x48
    800141d4:	e417c783          	lbu	a5,-447(a5) # 8005c011 <excpt+0x1>
    800141d8:	64079b63          	bnez	a5,8001482e <software_interrupt_ssi+0x9f0>
    800141dc:	4529                	li	a0,10
    800141de:	7d5190ef          	jal	8002e1b2 <putchar>
    800141e2:	c419                	beqz	s0,800141f0 <software_interrupt_ssi+0x3b2>
    800141e4:	00048417          	auipc	s0,0x48
    800141e8:	e2d44403          	lbu	s0,-467(s0) # 8005c011 <excpt+0x1>
    800141ec:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800141f0:	c29ec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800141f4:	4511                	li	a0,4
    800141f6:	d1fec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800141fa:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800141fe:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014202:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80014206:	450d                	li	a0,3
    80014208:	d0dec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001420c:	08c00593          	li	a1,140
    80014210:	00023617          	auipc	a2,0x23
    80014214:	1d860613          	addi	a2,a2,472 # 800373e8 <__func__.0+0x5000>
    80014218:	0001e517          	auipc	a0,0x1e
    8001421c:	4c850513          	addi	a0,a0,1224 # 800326e0 <__func__.0+0x2f8>
    80014220:	2a41b0ef          	jal	8002f4c4 <printf>
    80014224:	00048797          	auipc	a5,0x48
    80014228:	ded7c783          	lbu	a5,-531(a5) # 8005c011 <excpt+0x1>
    8001422c:	0001e597          	auipc	a1,0x1e
    80014230:	48c58593          	addi	a1,a1,1164 # 800326b8 <__func__.0+0x2d0>
    80014234:	e789                	bnez	a5,8001423e <software_interrupt_ssi+0x400>
    80014236:	0001e597          	auipc	a1,0x1e
    8001423a:	47258593          	addi	a1,a1,1138 # 800326a8 <__func__.0+0x2c0>
    8001423e:	0001e517          	auipc	a0,0x1e
    80014242:	4ba50513          	addi	a0,a0,1210 # 800326f8 <__func__.0+0x310>
    80014246:	27e1b0ef          	jal	8002f4c4 <printf>
    8001424a:	00048797          	auipc	a5,0x48
    8001424e:	dc77c783          	lbu	a5,-569(a5) # 8005c011 <excpt+0x1>
    80014252:	5c079363          	bnez	a5,80014818 <software_interrupt_ssi+0x9da>
    80014256:	4529                	li	a0,10
    80014258:	75b190ef          	jal	8002e1b2 <putchar>
    8001425c:	c419                	beqz	s0,8001426a <software_interrupt_ssi+0x42c>
    8001425e:	00048417          	auipc	s0,0x48
    80014262:	db344403          	lbu	s0,-589(s0) # 8005c011 <excpt+0x1>
    80014266:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

//VS-mode下

    TEST_SETUP_EXCEPT();
    8001426a:	bafec0ef          	jal	80000e18 <test_setup_except_function>
    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    TEST_SETUP_EXCEPT();
    8001426e:	babec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80014272:	4511                	li	a0,4
    80014274:	ca1ec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80014278:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    8001427c:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    80014280:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80014284:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    80014288:	4509                	li	a0,2
    8001428a:	c8bec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    8001428e:	08c00593          	li	a1,140
    80014292:	00023617          	auipc	a2,0x23
    80014296:	1a660613          	addi	a2,a2,422 # 80037438 <__func__.0+0x5050>
    8001429a:	0001e517          	auipc	a0,0x1e
    8001429e:	44650513          	addi	a0,a0,1094 # 800326e0 <__func__.0+0x2f8>
    800142a2:	2221b0ef          	jal	8002f4c4 <printf>
    800142a6:	00048797          	auipc	a5,0x48
    800142aa:	d6b7c783          	lbu	a5,-661(a5) # 8005c011 <excpt+0x1>
    800142ae:	0001e597          	auipc	a1,0x1e
    800142b2:	40a58593          	addi	a1,a1,1034 # 800326b8 <__func__.0+0x2d0>
    800142b6:	c799                	beqz	a5,800142c4 <software_interrupt_ssi+0x486>
    800142b8:	57fd                	li	a5,-1
    800142ba:	6498                	ld	a4,8(s1)
    800142bc:	17fe                	slli	a5,a5,0x3f
    800142be:	0785                	addi	a5,a5,1
    800142c0:	6af70563          	beq	a4,a5,8001496a <software_interrupt_ssi+0xb2c>
    800142c4:	0001e517          	auipc	a0,0x1e
    800142c8:	43450513          	addi	a0,a0,1076 # 800326f8 <__func__.0+0x310>
    800142cc:	1f81b0ef          	jal	8002f4c4 <printf>
    800142d0:	00048797          	auipc	a5,0x48
    800142d4:	d417c783          	lbu	a5,-703(a5) # 8005c011 <excpt+0x1>
    800142d8:	c799                	beqz	a5,800142e6 <software_interrupt_ssi+0x4a8>
    800142da:	57fd                	li	a5,-1
    800142dc:	6498                	ld	a4,8(s1)
    800142de:	17fe                	slli	a5,a5,0x3f
    800142e0:	0785                	addi	a5,a5,1
    800142e2:	4af70363          	beq	a4,a5,80014788 <software_interrupt_ssi+0x94a>
    800142e6:	0001e517          	auipc	a0,0x1e
    800142ea:	41a50513          	addi	a0,a0,1050 # 80032700 <__func__.0+0x318>
    800142ee:	1d61b0ef          	jal	8002f4c4 <printf>
    800142f2:	02900513          	li	a0,41
    800142f6:	6bd190ef          	jal	8002e1b2 <putchar>
    800142fa:	4529                	li	a0,10
    800142fc:	6b7190ef          	jal	8002e1b2 <putchar>
    80014300:	c801                	beqz	s0,80014310 <software_interrupt_ssi+0x4d2>
    80014302:	00048797          	auipc	a5,0x48
    80014306:	d0f7c783          	lbu	a5,-753(a5) # 8005c011 <excpt+0x1>
    8001430a:	4401                	li	s0,0
    8001430c:	3e079363          	bnez	a5,800146f2 <software_interrupt_ssi+0x8b4>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80014310:	b09ec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80014314:	4511                	li	a0,4
    80014316:	bffec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001431a:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    8001431e:	57fd                	li	a5,-1
    80014320:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80014324:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80014328:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    8001432c:	4509                	li	a0,2
    8001432e:	be7ec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014332:	08c00593          	li	a1,140
    80014336:	00023617          	auipc	a2,0x23
    8001433a:	17260613          	addi	a2,a2,370 # 800374a8 <__func__.0+0x50c0>
    8001433e:	0001e517          	auipc	a0,0x1e
    80014342:	3a250513          	addi	a0,a0,930 # 800326e0 <__func__.0+0x2f8>
    80014346:	17e1b0ef          	jal	8002f4c4 <printf>
    8001434a:	00048797          	auipc	a5,0x48
    8001434e:	cc77c783          	lbu	a5,-825(a5) # 8005c011 <excpt+0x1>
    80014352:	0001e597          	auipc	a1,0x1e
    80014356:	36658593          	addi	a1,a1,870 # 800326b8 <__func__.0+0x2d0>
    8001435a:	c799                	beqz	a5,80014368 <software_interrupt_ssi+0x52a>
    8001435c:	57fd                	li	a5,-1
    8001435e:	6498                	ld	a4,8(s1)
    80014360:	17fe                	slli	a5,a5,0x3f
    80014362:	0785                	addi	a5,a5,1
    80014364:	5af70163          	beq	a4,a5,80014906 <software_interrupt_ssi+0xac8>
    80014368:	0001e517          	auipc	a0,0x1e
    8001436c:	39050513          	addi	a0,a0,912 # 800326f8 <__func__.0+0x310>
    80014370:	1541b0ef          	jal	8002f4c4 <printf>
    80014374:	00048797          	auipc	a5,0x48
    80014378:	c9d7c783          	lbu	a5,-867(a5) # 8005c011 <excpt+0x1>
    8001437c:	c799                	beqz	a5,8001438a <software_interrupt_ssi+0x54c>
    8001437e:	57fd                	li	a5,-1
    80014380:	6498                	ld	a4,8(s1)
    80014382:	17fe                	slli	a5,a5,0x3f
    80014384:	0785                	addi	a5,a5,1
    80014386:	40f70963          	beq	a4,a5,80014798 <software_interrupt_ssi+0x95a>
    8001438a:	0001e517          	auipc	a0,0x1e
    8001438e:	37650513          	addi	a0,a0,886 # 80032700 <__func__.0+0x318>
    80014392:	1321b0ef          	jal	8002f4c4 <printf>
    80014396:	02900513          	li	a0,41
    8001439a:	619190ef          	jal	8002e1b2 <putchar>
    8001439e:	4529                	li	a0,10
    800143a0:	613190ef          	jal	8002e1b2 <putchar>
    800143a4:	c801                	beqz	s0,800143b4 <software_interrupt_ssi+0x576>
    800143a6:	00048797          	auipc	a5,0x48
    800143aa:	c6b7c783          	lbu	a5,-917(a5) # 8005c011 <excpt+0x1>
    800143ae:	4401                	li	s0,0
    800143b0:	32079363          	bnez	a5,800146d6 <software_interrupt_ssi+0x898>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800143b4:	a65ec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800143b8:	4511                	li	a0,4
    800143ba:	b5bec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800143be:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800143c2:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    800143c6:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    800143ca:	4509                	li	a0,2
    800143cc:	b49ec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    800143d0:	08c00593          	li	a1,140
    800143d4:	00023617          	auipc	a2,0x23
    800143d8:	14460613          	addi	a2,a2,324 # 80037518 <__func__.0+0x5130>
    800143dc:	0001e517          	auipc	a0,0x1e
    800143e0:	30450513          	addi	a0,a0,772 # 800326e0 <__func__.0+0x2f8>
    800143e4:	0e01b0ef          	jal	8002f4c4 <printf>
    800143e8:	00048797          	auipc	a5,0x48
    800143ec:	c297c783          	lbu	a5,-983(a5) # 8005c011 <excpt+0x1>
    800143f0:	0001e597          	auipc	a1,0x1e
    800143f4:	2c858593          	addi	a1,a1,712 # 800326b8 <__func__.0+0x2d0>
    800143f8:	e789                	bnez	a5,80014402 <software_interrupt_ssi+0x5c4>
    800143fa:	0001e597          	auipc	a1,0x1e
    800143fe:	2ae58593          	addi	a1,a1,686 # 800326a8 <__func__.0+0x2c0>
    80014402:	0001e517          	auipc	a0,0x1e
    80014406:	2f650513          	addi	a0,a0,758 # 800326f8 <__func__.0+0x310>
    8001440a:	0ba1b0ef          	jal	8002f4c4 <printf>
    8001440e:	00048797          	auipc	a5,0x48
    80014412:	c037c783          	lbu	a5,-1021(a5) # 8005c011 <excpt+0x1>
    80014416:	3c079a63          	bnez	a5,800147ea <software_interrupt_ssi+0x9ac>
    8001441a:	4529                	li	a0,10
    8001441c:	597190ef          	jal	8002e1b2 <putchar>
    80014420:	c419                	beqz	s0,8001442e <software_interrupt_ssi+0x5f0>
    80014422:	00048417          	auipc	s0,0x48
    80014426:	bef44403          	lbu	s0,-1041(s0) # 8005c011 <excpt+0x1>
    8001442a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    8001442e:	9ebec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80014432:	4511                	li	a0,4
    80014434:	ae1ec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014438:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    8001443c:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    80014440:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014444:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80014448:	4509                	li	a0,2
    8001444a:	acbec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001444e:	08c00593          	li	a1,140
    80014452:	00023617          	auipc	a2,0x23
    80014456:	11e60613          	addi	a2,a2,286 # 80037570 <__func__.0+0x5188>
    8001445a:	0001e517          	auipc	a0,0x1e
    8001445e:	28650513          	addi	a0,a0,646 # 800326e0 <__func__.0+0x2f8>
    80014462:	0621b0ef          	jal	8002f4c4 <printf>
    80014466:	00048797          	auipc	a5,0x48
    8001446a:	bab7c783          	lbu	a5,-1109(a5) # 8005c011 <excpt+0x1>
    8001446e:	0001e597          	auipc	a1,0x1e
    80014472:	24a58593          	addi	a1,a1,586 # 800326b8 <__func__.0+0x2d0>
    80014476:	c799                	beqz	a5,80014484 <software_interrupt_ssi+0x646>
    80014478:	57fd                	li	a5,-1
    8001447a:	6498                	ld	a4,8(s1)
    8001447c:	17fe                	slli	a5,a5,0x3f
    8001447e:	0785                	addi	a5,a5,1
    80014480:	3ef70863          	beq	a4,a5,80014870 <software_interrupt_ssi+0xa32>
    80014484:	0001e517          	auipc	a0,0x1e
    80014488:	27450513          	addi	a0,a0,628 # 800326f8 <__func__.0+0x310>
    8001448c:	0381b0ef          	jal	8002f4c4 <printf>
    80014490:	00048797          	auipc	a5,0x48
    80014494:	b817c783          	lbu	a5,-1151(a5) # 8005c011 <excpt+0x1>
    80014498:	c799                	beqz	a5,800144a6 <software_interrupt_ssi+0x668>
    8001449a:	57fd                	li	a5,-1
    8001449c:	6498                	ld	a4,8(s1)
    8001449e:	17fe                	slli	a5,a5,0x3f
    800144a0:	0785                	addi	a5,a5,1
    800144a2:	32f70c63          	beq	a4,a5,800147da <software_interrupt_ssi+0x99c>
    800144a6:	0001e517          	auipc	a0,0x1e
    800144aa:	25a50513          	addi	a0,a0,602 # 80032700 <__func__.0+0x318>
    800144ae:	0161b0ef          	jal	8002f4c4 <printf>
    800144b2:	02900513          	li	a0,41
    800144b6:	4fd190ef          	jal	8002e1b2 <putchar>
    800144ba:	4529                	li	a0,10
    800144bc:	4f7190ef          	jal	8002e1b2 <putchar>
    800144c0:	c801                	beqz	s0,800144d0 <software_interrupt_ssi+0x692>
    800144c2:	00048797          	auipc	a5,0x48
    800144c6:	b4f7c783          	lbu	a5,-1201(a5) # 8005c011 <excpt+0x1>
    800144ca:	4401                	li	s0,0
    800144cc:	1e079763          	bnez	a5,800146ba <software_interrupt_ssi+0x87c>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    800144d0:	949ec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800144d4:	4511                	li	a0,4
    800144d6:	a3fec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800144da:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800144de:	57fd                	li	a5,-1
    800144e0:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800144e4:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800144e8:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    800144ec:	4509                	li	a0,2
    800144ee:	a27ec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800144f2:	08c00593          	li	a1,140
    800144f6:	00023617          	auipc	a2,0x23
    800144fa:	0ea60613          	addi	a2,a2,234 # 800375e0 <__func__.0+0x51f8>
    800144fe:	0001e517          	auipc	a0,0x1e
    80014502:	1e250513          	addi	a0,a0,482 # 800326e0 <__func__.0+0x2f8>
    80014506:	7bf1a0ef          	jal	8002f4c4 <printf>
    8001450a:	00048797          	auipc	a5,0x48
    8001450e:	b077c783          	lbu	a5,-1273(a5) # 8005c011 <excpt+0x1>
    80014512:	0001e597          	auipc	a1,0x1e
    80014516:	1a658593          	addi	a1,a1,422 # 800326b8 <__func__.0+0x2d0>
    8001451a:	c799                	beqz	a5,80014528 <software_interrupt_ssi+0x6ea>
    8001451c:	57fd                	li	a5,-1
    8001451e:	6498                	ld	a4,8(s1)
    80014520:	17fe                	slli	a5,a5,0x3f
    80014522:	0785                	addi	a5,a5,1
    80014524:	3cf70163          	beq	a4,a5,800148e6 <software_interrupt_ssi+0xaa8>
    80014528:	0001e517          	auipc	a0,0x1e
    8001452c:	1d050513          	addi	a0,a0,464 # 800326f8 <__func__.0+0x310>
    80014530:	7951a0ef          	jal	8002f4c4 <printf>
    80014534:	00048797          	auipc	a5,0x48
    80014538:	add7c783          	lbu	a5,-1315(a5) # 8005c011 <excpt+0x1>
    8001453c:	c799                	beqz	a5,8001454a <software_interrupt_ssi+0x70c>
    8001453e:	57fd                	li	a5,-1
    80014540:	6498                	ld	a4,8(s1)
    80014542:	17fe                	slli	a5,a5,0x3f
    80014544:	0785                	addi	a5,a5,1
    80014546:	26f70163          	beq	a4,a5,800147a8 <software_interrupt_ssi+0x96a>
    8001454a:	0001e517          	auipc	a0,0x1e
    8001454e:	1b650513          	addi	a0,a0,438 # 80032700 <__func__.0+0x318>
    80014552:	7731a0ef          	jal	8002f4c4 <printf>
    80014556:	02900513          	li	a0,41
    8001455a:	459190ef          	jal	8002e1b2 <putchar>
    8001455e:	4529                	li	a0,10
    80014560:	453190ef          	jal	8002e1b2 <putchar>
    80014564:	c801                	beqz	s0,80014574 <software_interrupt_ssi+0x736>
    80014566:	00048797          	auipc	a5,0x48
    8001456a:	aab7c783          	lbu	a5,-1365(a5) # 8005c011 <excpt+0x1>
    8001456e:	4401                	li	s0,0
    80014570:	12079763          	bnez	a5,8001469e <software_interrupt_ssi+0x860>
        excpt.priv == PRIV_HS
    );


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80014574:	8a5ec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    80014578:	4511                	li	a0,4
    8001457a:	99bec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001457e:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80014582:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014586:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    8001458a:	4509                	li	a0,2
    8001458c:	989ec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80014590:	08c00593          	li	a1,140
    80014594:	00023617          	auipc	a2,0x23
    80014598:	0ac60613          	addi	a2,a2,172 # 80037640 <__func__.0+0x5258>
    8001459c:	0001e517          	auipc	a0,0x1e
    800145a0:	14450513          	addi	a0,a0,324 # 800326e0 <__func__.0+0x2f8>
    800145a4:	7211a0ef          	jal	8002f4c4 <printf>
    800145a8:	00048797          	auipc	a5,0x48
    800145ac:	a697c783          	lbu	a5,-1431(a5) # 8005c011 <excpt+0x1>
    800145b0:	0001e597          	auipc	a1,0x1e
    800145b4:	10858593          	addi	a1,a1,264 # 800326b8 <__func__.0+0x2d0>
    800145b8:	e789                	bnez	a5,800145c2 <software_interrupt_ssi+0x784>
    800145ba:	0001e597          	auipc	a1,0x1e
    800145be:	0ee58593          	addi	a1,a1,238 # 800326a8 <__func__.0+0x2c0>
    800145c2:	0001e517          	auipc	a0,0x1e
    800145c6:	13650513          	addi	a0,a0,310 # 800326f8 <__func__.0+0x310>
    800145ca:	6fb1a0ef          	jal	8002f4c4 <printf>
    800145ce:	00048797          	auipc	a5,0x48
    800145d2:	a437c783          	lbu	a5,-1469(a5) # 8005c011 <excpt+0x1>
    800145d6:	28079263          	bnez	a5,8001485a <software_interrupt_ssi+0xa1c>
    800145da:	4529                	li	a0,10
    800145dc:	3d7190ef          	jal	8002e1b2 <putchar>
    800145e0:	c419                	beqz	s0,800145ee <software_interrupt_ssi+0x7b0>
    800145e2:	00048417          	auipc	s0,0x48
    800145e6:	a2f44403          	lbu	s0,-1489(s0) # 8005c011 <excpt+0x1>
    800145ea:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800145ee:	82bec0ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    800145f2:	4511                	li	a0,4
    800145f4:	921ec0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800145f8:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800145fc:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014600:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80014604:	4509                	li	a0,2
    80014606:	90fec0ef          	jal	80000f14 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001460a:	08c00593          	li	a1,140
    8001460e:	00023617          	auipc	a2,0x23
    80014612:	08260613          	addi	a2,a2,130 # 80037690 <__func__.0+0x52a8>
    80014616:	0001e517          	auipc	a0,0x1e
    8001461a:	0ca50513          	addi	a0,a0,202 # 800326e0 <__func__.0+0x2f8>
    8001461e:	6a71a0ef          	jal	8002f4c4 <printf>
    80014622:	00048797          	auipc	a5,0x48
    80014626:	9ef7c783          	lbu	a5,-1553(a5) # 8005c011 <excpt+0x1>
    8001462a:	0001e597          	auipc	a1,0x1e
    8001462e:	08e58593          	addi	a1,a1,142 # 800326b8 <__func__.0+0x2d0>
    80014632:	e789                	bnez	a5,8001463c <software_interrupt_ssi+0x7fe>
    80014634:	0001e597          	auipc	a1,0x1e
    80014638:	07458593          	addi	a1,a1,116 # 800326a8 <__func__.0+0x2c0>
    8001463c:	0001e517          	auipc	a0,0x1e
    80014640:	0bc50513          	addi	a0,a0,188 # 800326f8 <__func__.0+0x310>
    80014644:	6811a0ef          	jal	8002f4c4 <printf>
    80014648:	00048797          	auipc	a5,0x48
    8001464c:	9c97c783          	lbu	a5,-1591(a5) # 8005c011 <excpt+0x1>
    80014650:	1e079a63          	bnez	a5,80014844 <software_interrupt_ssi+0xa06>
    80014654:	4529                	li	a0,10
    80014656:	35d190ef          	jal	8002e1b2 <putchar>
    8001465a:	c411                	beqz	s0,80014666 <software_interrupt_ssi+0x828>
    8001465c:	00048797          	auipc	a5,0x48
    80014660:	9b57c783          	lbu	a5,-1611(a5) # 8005c011 <excpt+0x1>
    80014664:	c79d                	beqz	a5,80014692 <software_interrupt_ssi+0x854>
    80014666:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80014668:	0001e597          	auipc	a1,0x1e
    8001466c:	05058593          	addi	a1,a1,80 # 800326b8 <__func__.0+0x2d0>
    80014670:	0001e517          	auipc	a0,0x1e
    80014674:	0f050513          	addi	a0,a0,240 # 80032760 <__func__.0+0x378>
    80014678:	64d1a0ef          	jal	8002f4c4 <printf>
    8001467c:	4511                	li	a0,4
    8001467e:	897ec0ef          	jal	80000f14 <goto_priv>
    80014682:	8f4ed0ef          	jal	80001776 <reset_state>
}
    80014686:	60e2                	ld	ra,24(sp)
    80014688:	8522                	mv	a0,s0
    8001468a:	6442                	ld	s0,16(sp)
    8001468c:	64a2                	ld	s1,8(sp)
    8001468e:	6105                	addi	sp,sp,32
    80014690:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80014692:	4405                	li	s0,1
    TEST_END();
    80014694:	0001e597          	auipc	a1,0x1e
    80014698:	01458593          	addi	a1,a1,20 # 800326a8 <__func__.0+0x2c0>
    8001469c:	bfd1                	j	80014670 <software_interrupt_ssi+0x832>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    8001469e:	57fd                	li	a5,-1
    800146a0:	6498                	ld	a4,8(s1)
    800146a2:	17fe                	slli	a5,a5,0x3f
    800146a4:	0785                	addi	a5,a5,1
    800146a6:	ecf717e3          	bne	a4,a5,80014574 <software_interrupt_ssi+0x736>
    800146aa:	00048417          	auipc	s0,0x48
    800146ae:	96a42403          	lw	s0,-1686(s0) # 8005c014 <excpt+0x4>
    800146b2:	1475                	addi	s0,s0,-3
    800146b4:	00143413          	seqz	s0,s0
    800146b8:	bd75                	j	80014574 <software_interrupt_ssi+0x736>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800146ba:	57fd                	li	a5,-1
    800146bc:	6498                	ld	a4,8(s1)
    800146be:	17fe                	slli	a5,a5,0x3f
    800146c0:	0785                	addi	a5,a5,1
    800146c2:	e0f717e3          	bne	a4,a5,800144d0 <software_interrupt_ssi+0x692>
    800146c6:	00048417          	auipc	s0,0x48
    800146ca:	94e42403          	lw	s0,-1714(s0) # 8005c014 <excpt+0x4>
    800146ce:	1471                	addi	s0,s0,-4
    800146d0:	00143413          	seqz	s0,s0
    800146d4:	bbf5                	j	800144d0 <software_interrupt_ssi+0x692>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800146d6:	57fd                	li	a5,-1
    800146d8:	6498                	ld	a4,8(s1)
    800146da:	17fe                	slli	a5,a5,0x3f
    800146dc:	0785                	addi	a5,a5,1
    800146de:	ccf71be3          	bne	a4,a5,800143b4 <software_interrupt_ssi+0x576>
    800146e2:	00048417          	auipc	s0,0x48
    800146e6:	93242403          	lw	s0,-1742(s0) # 8005c014 <excpt+0x4>
    800146ea:	1475                	addi	s0,s0,-3
    800146ec:	00143413          	seqz	s0,s0
    800146f0:	b1d1                	j	800143b4 <software_interrupt_ssi+0x576>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800146f2:	57fd                	li	a5,-1
    800146f4:	6498                	ld	a4,8(s1)
    800146f6:	17fe                	slli	a5,a5,0x3f
    800146f8:	0785                	addi	a5,a5,1
    800146fa:	c0f71be3          	bne	a4,a5,80014310 <software_interrupt_ssi+0x4d2>
    800146fe:	00048417          	auipc	s0,0x48
    80014702:	91642403          	lw	s0,-1770(s0) # 8005c014 <excpt+0x4>
    80014706:	1471                	addi	s0,s0,-4
    80014708:	00143413          	seqz	s0,s0
    8001470c:	b111                	j	80014310 <software_interrupt_ssi+0x4d2>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    8001470e:	57fd                	li	a5,-1
    80014710:	6498                	ld	a4,8(s1)
    80014712:	17fe                	slli	a5,a5,0x3f
    80014714:	0785                	addi	a5,a5,1
    80014716:	a6f710e3          	bne	a4,a5,80014176 <software_interrupt_ssi+0x338>
    8001471a:	00048417          	auipc	s0,0x48
    8001471e:	8fa42403          	lw	s0,-1798(s0) # 8005c014 <excpt+0x4>
    80014722:	1475                	addi	s0,s0,-3
    80014724:	00143413          	seqz	s0,s0
    80014728:	b4b9                	j	80014176 <software_interrupt_ssi+0x338>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001472a:	57fd                	li	a5,-1
    8001472c:	6498                	ld	a4,8(s1)
    8001472e:	17fe                	slli	a5,a5,0x3f
    80014730:	0785                	addi	a5,a5,1
    80014732:	9af710e3          	bne	a4,a5,800140d2 <software_interrupt_ssi+0x294>
    80014736:	00048417          	auipc	s0,0x48
    8001473a:	8de42403          	lw	s0,-1826(s0) # 8005c014 <excpt+0x4>
    8001473e:	1471                	addi	s0,s0,-4
    80014740:	00143413          	seqz	s0,s0
    80014744:	b279                	j	800140d2 <software_interrupt_ssi+0x294>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014746:	57fd                	li	a5,-1
    80014748:	6498                	ld	a4,8(s1)
    8001474a:	17fe                	slli	a5,a5,0x3f
    8001474c:	0785                	addi	a5,a5,1
    8001474e:	86f714e3          	bne	a4,a5,80013fb6 <software_interrupt_ssi+0x178>
    80014752:	00048417          	auipc	s0,0x48
    80014756:	8c242403          	lw	s0,-1854(s0) # 8005c014 <excpt+0x4>
    8001475a:	1475                	addi	s0,s0,-3
    8001475c:	00143413          	seqz	s0,s0
    80014760:	857ff06f          	j	80013fb6 <software_interrupt_ssi+0x178>
    80014764:	00048717          	auipc	a4,0x48
    80014768:	8b072703          	lw	a4,-1872(a4) # 8005c014 <excpt+0x4>
    8001476c:	478d                	li	a5,3
    8001476e:	80f71fe3          	bne	a4,a5,80013f8c <software_interrupt_ssi+0x14e>
    80014772:	82fff06f          	j	80013fa0 <software_interrupt_ssi+0x162>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014776:	00048717          	auipc	a4,0x48
    8001477a:	89e72703          	lw	a4,-1890(a4) # 8005c014 <excpt+0x4>
    8001477e:	4791                	li	a5,4
    80014780:	f6f71063          	bne	a4,a5,80013ee0 <software_interrupt_ssi+0xa2>
    80014784:	f70ff06f          	j	80013ef4 <software_interrupt_ssi+0xb6>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014788:	00048717          	auipc	a4,0x48
    8001478c:	88c72703          	lw	a4,-1908(a4) # 8005c014 <excpt+0x4>
    80014790:	4791                	li	a5,4
    80014792:	b4f71ae3          	bne	a4,a5,800142e6 <software_interrupt_ssi+0x4a8>
    80014796:	b695                	j	800142fa <software_interrupt_ssi+0x4bc>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014798:	00048717          	auipc	a4,0x48
    8001479c:	87c72703          	lw	a4,-1924(a4) # 8005c014 <excpt+0x4>
    800147a0:	478d                	li	a5,3
    800147a2:	bef714e3          	bne	a4,a5,8001438a <software_interrupt_ssi+0x54c>
    800147a6:	bee5                	j	8001439e <software_interrupt_ssi+0x560>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800147a8:	00048717          	auipc	a4,0x48
    800147ac:	86c72703          	lw	a4,-1940(a4) # 8005c014 <excpt+0x4>
    800147b0:	478d                	li	a5,3
    800147b2:	d8f71ce3          	bne	a4,a5,8001454a <software_interrupt_ssi+0x70c>
    800147b6:	b365                	j	8001455e <software_interrupt_ssi+0x720>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800147b8:	00048717          	auipc	a4,0x48
    800147bc:	85c72703          	lw	a4,-1956(a4) # 8005c014 <excpt+0x4>
    800147c0:	4791                	li	a5,4
    800147c2:	8ef713e3          	bne	a4,a5,800140a8 <software_interrupt_ssi+0x26a>
    800147c6:	8f7ff06f          	j	800140bc <software_interrupt_ssi+0x27e>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800147ca:	00048717          	auipc	a4,0x48
    800147ce:	84a72703          	lw	a4,-1974(a4) # 8005c014 <excpt+0x4>
    800147d2:	478d                	li	a5,3
    800147d4:	96f71ce3          	bne	a4,a5,8001414c <software_interrupt_ssi+0x30e>
    800147d8:	b261                	j	80014160 <software_interrupt_ssi+0x322>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800147da:	00048717          	auipc	a4,0x48
    800147de:	83a72703          	lw	a4,-1990(a4) # 8005c014 <excpt+0x4>
    800147e2:	4791                	li	a5,4
    800147e4:	ccf711e3          	bne	a4,a5,800144a6 <software_interrupt_ssi+0x668>
    800147e8:	b9c9                	j	800144ba <software_interrupt_ssi+0x67c>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    800147ea:	0001e517          	auipc	a0,0x1e
    800147ee:	f1650513          	addi	a0,a0,-234 # 80032700 <__func__.0+0x318>
    800147f2:	4d31a0ef          	jal	8002f4c4 <printf>
    800147f6:	02900513          	li	a0,41
    800147fa:	1b9190ef          	jal	8002e1b2 <putchar>
    800147fe:	b931                	j	8001441a <software_interrupt_ssi+0x5dc>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80014800:	0001e517          	auipc	a0,0x1e
    80014804:	f0050513          	addi	a0,a0,-256 # 80032700 <__func__.0+0x318>
    80014808:	4bd1a0ef          	jal	8002f4c4 <printf>
    8001480c:	02900513          	li	a0,41
    80014810:	1a3190ef          	jal	8002e1b2 <putchar>
    80014814:	809ff06f          	j	8001401c <software_interrupt_ssi+0x1de>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80014818:	0001e517          	auipc	a0,0x1e
    8001481c:	ee850513          	addi	a0,a0,-280 # 80032700 <__func__.0+0x318>
    80014820:	4a51a0ef          	jal	8002f4c4 <printf>
    80014824:	02900513          	li	a0,41
    80014828:	18b190ef          	jal	8002e1b2 <putchar>
    8001482c:	b42d                	j	80014256 <software_interrupt_ssi+0x418>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    8001482e:	0001e517          	auipc	a0,0x1e
    80014832:	ed250513          	addi	a0,a0,-302 # 80032700 <__func__.0+0x318>
    80014836:	48f1a0ef          	jal	8002f4c4 <printf>
    8001483a:	02900513          	li	a0,41
    8001483e:	175190ef          	jal	8002e1b2 <putchar>
    80014842:	ba69                	j	800141dc <software_interrupt_ssi+0x39e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80014844:	0001e517          	auipc	a0,0x1e
    80014848:	ebc50513          	addi	a0,a0,-324 # 80032700 <__func__.0+0x318>
    8001484c:	4791a0ef          	jal	8002f4c4 <printf>
    80014850:	02900513          	li	a0,41
    80014854:	15f190ef          	jal	8002e1b2 <putchar>
    80014858:	bbf5                	j	80014654 <software_interrupt_ssi+0x816>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    8001485a:	0001e517          	auipc	a0,0x1e
    8001485e:	ea650513          	addi	a0,a0,-346 # 80032700 <__func__.0+0x318>
    80014862:	4631a0ef          	jal	8002f4c4 <printf>
    80014866:	02900513          	li	a0,41
    8001486a:	149190ef          	jal	8002e1b2 <putchar>
    8001486e:	b3b5                	j	800145da <software_interrupt_ssi+0x79c>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014870:	00047717          	auipc	a4,0x47
    80014874:	7a472703          	lw	a4,1956(a4) # 8005c014 <excpt+0x4>
    80014878:	4791                	li	a5,4
    8001487a:	0001e597          	auipc	a1,0x1e
    8001487e:	e2e58593          	addi	a1,a1,-466 # 800326a8 <__func__.0+0x2c0>
    80014882:	c0f701e3          	beq	a4,a5,80014484 <software_interrupt_ssi+0x646>
    80014886:	0001e597          	auipc	a1,0x1e
    8001488a:	e3258593          	addi	a1,a1,-462 # 800326b8 <__func__.0+0x2d0>
    8001488e:	bedd                	j	80014484 <software_interrupt_ssi+0x646>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014890:	00047417          	auipc	s0,0x47
    80014894:	78442403          	lw	s0,1924(s0) # 8005c014 <excpt+0x4>
    80014898:	1471                	addi	s0,s0,-4
    8001489a:	00143413          	seqz	s0,s0
    8001489e:	e74ff06f          	j	80013f12 <software_interrupt_ssi+0xd4>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800148a2:	00047717          	auipc	a4,0x47
    800148a6:	77272703          	lw	a4,1906(a4) # 8005c014 <excpt+0x4>
    800148aa:	478d                	li	a5,3
    800148ac:	0001e597          	auipc	a1,0x1e
    800148b0:	dfc58593          	addi	a1,a1,-516 # 800326a8 <__func__.0+0x2c0>
    800148b4:	eaf70b63          	beq	a4,a5,80013f6a <software_interrupt_ssi+0x12c>
    800148b8:	0001e597          	auipc	a1,0x1e
    800148bc:	e0058593          	addi	a1,a1,-512 # 800326b8 <__func__.0+0x2d0>
    800148c0:	eaaff06f          	j	80013f6a <software_interrupt_ssi+0x12c>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800148c4:	00047717          	auipc	a4,0x47
    800148c8:	75072703          	lw	a4,1872(a4) # 8005c014 <excpt+0x4>
    800148cc:	4791                	li	a5,4
    800148ce:	0001e597          	auipc	a1,0x1e
    800148d2:	dda58593          	addi	a1,a1,-550 # 800326a8 <__func__.0+0x2c0>
    800148d6:	faf70863          	beq	a4,a5,80014086 <software_interrupt_ssi+0x248>
    800148da:	0001e597          	auipc	a1,0x1e
    800148de:	dde58593          	addi	a1,a1,-546 # 800326b8 <__func__.0+0x2d0>
    800148e2:	fa4ff06f          	j	80014086 <software_interrupt_ssi+0x248>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800148e6:	00047717          	auipc	a4,0x47
    800148ea:	72e72703          	lw	a4,1838(a4) # 8005c014 <excpt+0x4>
    800148ee:	478d                	li	a5,3
    800148f0:	0001e597          	auipc	a1,0x1e
    800148f4:	db858593          	addi	a1,a1,-584 # 800326a8 <__func__.0+0x2c0>
    800148f8:	c2f708e3          	beq	a4,a5,80014528 <software_interrupt_ssi+0x6ea>
    800148fc:	0001e597          	auipc	a1,0x1e
    80014900:	dbc58593          	addi	a1,a1,-580 # 800326b8 <__func__.0+0x2d0>
    80014904:	b115                	j	80014528 <software_interrupt_ssi+0x6ea>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014906:	00047717          	auipc	a4,0x47
    8001490a:	70e72703          	lw	a4,1806(a4) # 8005c014 <excpt+0x4>
    8001490e:	478d                	li	a5,3
    80014910:	0001e597          	auipc	a1,0x1e
    80014914:	d9858593          	addi	a1,a1,-616 # 800326a8 <__func__.0+0x2c0>
    80014918:	a4f708e3          	beq	a4,a5,80014368 <software_interrupt_ssi+0x52a>
    8001491c:	0001e597          	auipc	a1,0x1e
    80014920:	d9c58593          	addi	a1,a1,-612 # 800326b8 <__func__.0+0x2d0>
    80014924:	b491                	j	80014368 <software_interrupt_ssi+0x52a>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014926:	00047717          	auipc	a4,0x47
    8001492a:	6ee72703          	lw	a4,1774(a4) # 8005c014 <excpt+0x4>
    8001492e:	4791                	li	a5,4
    80014930:	0001e597          	auipc	a1,0x1e
    80014934:	d7858593          	addi	a1,a1,-648 # 800326a8 <__func__.0+0x2c0>
    80014938:	d8f70363          	beq	a4,a5,80013ebe <software_interrupt_ssi+0x80>
    8001493c:	0001e597          	auipc	a1,0x1e
    80014940:	d7c58593          	addi	a1,a1,-644 # 800326b8 <__func__.0+0x2d0>
    80014944:	d7aff06f          	j	80013ebe <software_interrupt_ssi+0x80>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014948:	00047717          	auipc	a4,0x47
    8001494c:	6cc72703          	lw	a4,1740(a4) # 8005c014 <excpt+0x4>
    80014950:	478d                	li	a5,3
    80014952:	0001e597          	auipc	a1,0x1e
    80014956:	d5658593          	addi	a1,a1,-682 # 800326a8 <__func__.0+0x2c0>
    8001495a:	fcf70863          	beq	a4,a5,8001412a <software_interrupt_ssi+0x2ec>
    8001495e:	0001e597          	auipc	a1,0x1e
    80014962:	d5a58593          	addi	a1,a1,-678 # 800326b8 <__func__.0+0x2d0>
    80014966:	fc4ff06f          	j	8001412a <software_interrupt_ssi+0x2ec>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    8001496a:	00047717          	auipc	a4,0x47
    8001496e:	6aa72703          	lw	a4,1706(a4) # 8005c014 <excpt+0x4>
    80014972:	4791                	li	a5,4
    80014974:	0001e597          	auipc	a1,0x1e
    80014978:	d3458593          	addi	a1,a1,-716 # 800326a8 <__func__.0+0x2c0>
    8001497c:	94f704e3          	beq	a4,a5,800142c4 <software_interrupt_ssi+0x486>
    80014980:	0001e597          	auipc	a1,0x1e
    80014984:	d3858593          	addi	a1,a1,-712 # 800326b8 <__func__.0+0x2d0>
    80014988:	ba35                	j	800142c4 <software_interrupt_ssi+0x486>

000000008001498a <software_interrupt_vssi>:


bool software_interrupt_vssi() {
    8001498a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001498c:	0001c597          	auipc	a1,0x1c
    80014990:	1bc58593          	addi	a1,a1,444 # 80030b48 <__func__.0>
    80014994:	0001e517          	auipc	a0,0x1e
    80014998:	d3450513          	addi	a0,a0,-716 # 800326c8 <__func__.0+0x2e0>
bool software_interrupt_vssi() {
    8001499c:	e406                	sd	ra,8(sp)
    TEST_START();
    8001499e:	3271a0ef          	jal	8002f4c4 <printf>
    800149a2:	4529                	li	a0,10
    800149a4:	00f190ef          	jal	8002e1b2 <putchar>

    TEST_SETUP_EXCEPT();
    800149a8:	c70ec0ef          	jal	80000e18 <test_setup_except_function>

    TEST_END();
    800149ac:	0001e597          	auipc	a1,0x1e
    800149b0:	cfc58593          	addi	a1,a1,-772 # 800326a8 <__func__.0+0x2c0>
    800149b4:	0001e517          	auipc	a0,0x1e
    800149b8:	dac50513          	addi	a0,a0,-596 # 80032760 <__func__.0+0x378>
    800149bc:	3091a0ef          	jal	8002f4c4 <printf>
    800149c0:	4511                	li	a0,4
    800149c2:	d52ec0ef          	jal	80000f14 <goto_priv>
    800149c6:	db1ec0ef          	jal	80001776 <reset_state>


    800149ca:	60a2                	ld	ra,8(sp)
    800149cc:	4505                	li	a0,1
    800149ce:	0141                	addi	sp,sp,16
    800149d0:	8082                	ret

00000000800149d2 <instruction_page_fault_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool instruction_page_fault_1(){
    800149d2:	1101                	addi	sp,sp,-32

    TEST_START();
    800149d4:	0001c597          	auipc	a1,0x1c
    800149d8:	18c58593          	addi	a1,a1,396 # 80030b60 <__func__.26>
    800149dc:	0001e517          	auipc	a0,0x1e
    800149e0:	cec50513          	addi	a0,a0,-788 # 800326c8 <__func__.0+0x2e0>
bool instruction_page_fault_1(){
    800149e4:	ec06                	sd	ra,24(sp)
    800149e6:	e822                	sd	s0,16(sp)
    800149e8:	e426                	sd	s1,8(sp)
    TEST_START();
    800149ea:	2db1a0ef          	jal	8002f4c4 <printf>
    800149ee:	4529                	li	a0,10
    800149f0:	7c2190ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    800149f4:	450d                	li	a0,3
    800149f6:	d1eec0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800149fa:	bf3eb0ef          	jal	800005ec <hspt_init>
    hpt_init();
    800149fe:	fd3eb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80014a02:	d87eb0ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_HS);
    80014a06:	450d                	li	a0,3
    80014a08:	d0cec0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80014a0c:	4509                	li	a0,2
    80014a0e:	c26ec0ef          	jal	80000e34 <set_prev_priv>

    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80014a12:	c06ec0ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014a16:	400197b7          	lui	a5,0x40019
    80014a1a:	078a                	slli	a5,a5,0x2
    80014a1c:	00047417          	auipc	s0,0x47
    80014a20:	5f440413          	addi	s0,s0,1524 # 8005c010 <excpt>
    80014a24:	00000297          	auipc	t0,0x0
    80014a28:	00c28293          	addi	t0,t0,12 # 80014a30 <instruction_page_fault_1+0x5e>
    80014a2c:	02543c23          	sd	t0,56(s0)
    80014a30:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.v=0 leads to IPF",
    80014a32:	08c00593          	li	a1,140
    80014a36:	00023617          	auipc	a2,0x23
    80014a3a:	caa60613          	addi	a2,a2,-854 # 800376e0 <__func__.0+0x52f8>
    80014a3e:	0001e517          	auipc	a0,0x1e
    80014a42:	ca250513          	addi	a0,a0,-862 # 800326e0 <__func__.0+0x2f8>
    80014a46:	27f1a0ef          	jal	8002f4c4 <printf>
    80014a4a:	00047797          	auipc	a5,0x47
    80014a4e:	5c77c783          	lbu	a5,1479(a5) # 8005c011 <excpt+0x1>
    80014a52:	0001e597          	auipc	a1,0x1e
    80014a56:	c6658593          	addi	a1,a1,-922 # 800326b8 <__func__.0+0x2d0>
    80014a5a:	cf89                	beqz	a5,80014a74 <instruction_page_fault_1+0xa2>
    80014a5c:	6418                	ld	a4,8(s0)
    80014a5e:	47b1                	li	a5,12
    80014a60:	0001e597          	auipc	a1,0x1e
    80014a64:	c4858593          	addi	a1,a1,-952 # 800326a8 <__func__.0+0x2c0>
    80014a68:	00f70663          	beq	a4,a5,80014a74 <instruction_page_fault_1+0xa2>
    80014a6c:	0001e597          	auipc	a1,0x1e
    80014a70:	c4c58593          	addi	a1,a1,-948 # 800326b8 <__func__.0+0x2d0>
    80014a74:	0001e517          	auipc	a0,0x1e
    80014a78:	c8450513          	addi	a0,a0,-892 # 800326f8 <__func__.0+0x310>
    80014a7c:	2491a0ef          	jal	8002f4c4 <printf>
    80014a80:	00047797          	auipc	a5,0x47
    80014a84:	5917c783          	lbu	a5,1425(a5) # 8005c011 <excpt+0x1>
    80014a88:	c789                	beqz	a5,80014a92 <instruction_page_fault_1+0xc0>
    80014a8a:	6418                	ld	a4,8(s0)
    80014a8c:	47b1                	li	a5,12
    80014a8e:	00f70c63          	beq	a4,a5,80014aa6 <instruction_page_fault_1+0xd4>
    80014a92:	0001e517          	auipc	a0,0x1e
    80014a96:	c6e50513          	addi	a0,a0,-914 # 80032700 <__func__.0+0x318>
    80014a9a:	22b1a0ef          	jal	8002f4c4 <printf>
    80014a9e:	02900513          	li	a0,41
    80014aa2:	710190ef          	jal	8002e1b2 <putchar>
    80014aa6:	4529                	li	a0,10
    80014aa8:	70a190ef          	jal	8002e1b2 <putchar>
    80014aac:	00047797          	auipc	a5,0x47
    80014ab0:	5657c783          	lbu	a5,1381(a5) # 8005c011 <excpt+0x1>
    80014ab4:	4481                	li	s1,0
    80014ab6:	c789                	beqz	a5,80014ac0 <instruction_page_fault_1+0xee>
    80014ab8:	6404                	ld	s1,8(s0)
    80014aba:	14d1                	addi	s1,s1,-12
    80014abc:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80014ac0:	b58ec0ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014ac4:	001007b7          	lui	a5,0x100
    80014ac8:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80014acc:	07b2                	slli	a5,a5,0xc
    80014ace:	00000297          	auipc	t0,0x0
    80014ad2:	00c28293          	addi	t0,t0,12 # 80014ada <instruction_page_fault_1+0x108>
    80014ad6:	02543c23          	sd	t0,56(s0)
    80014ada:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014adc:	08c00593          	li	a1,140
    80014ae0:	00023617          	auipc	a2,0x23
    80014ae4:	c3860613          	addi	a2,a2,-968 # 80037718 <__func__.0+0x5330>
    80014ae8:	0001e517          	auipc	a0,0x1e
    80014aec:	bf850513          	addi	a0,a0,-1032 # 800326e0 <__func__.0+0x2f8>
    80014af0:	1d51a0ef          	jal	8002f4c4 <printf>
    80014af4:	00047797          	auipc	a5,0x47
    80014af8:	51d7c783          	lbu	a5,1309(a5) # 8005c011 <excpt+0x1>
    80014afc:	0001e597          	auipc	a1,0x1e
    80014b00:	bbc58593          	addi	a1,a1,-1092 # 800326b8 <__func__.0+0x2d0>
    80014b04:	cf89                	beqz	a5,80014b1e <instruction_page_fault_1+0x14c>
    80014b06:	6418                	ld	a4,8(s0)
    80014b08:	47b1                	li	a5,12
    80014b0a:	0001e597          	auipc	a1,0x1e
    80014b0e:	b9e58593          	addi	a1,a1,-1122 # 800326a8 <__func__.0+0x2c0>
    80014b12:	00f70663          	beq	a4,a5,80014b1e <instruction_page_fault_1+0x14c>
    80014b16:	0001e597          	auipc	a1,0x1e
    80014b1a:	ba258593          	addi	a1,a1,-1118 # 800326b8 <__func__.0+0x2d0>
    80014b1e:	0001e517          	auipc	a0,0x1e
    80014b22:	bda50513          	addi	a0,a0,-1062 # 800326f8 <__func__.0+0x310>
    80014b26:	19f1a0ef          	jal	8002f4c4 <printf>
    80014b2a:	00047797          	auipc	a5,0x47
    80014b2e:	4e77c783          	lbu	a5,1255(a5) # 8005c011 <excpt+0x1>
    80014b32:	c789                	beqz	a5,80014b3c <instruction_page_fault_1+0x16a>
    80014b34:	6418                	ld	a4,8(s0)
    80014b36:	47b1                	li	a5,12
    80014b38:	00f70c63          	beq	a4,a5,80014b50 <instruction_page_fault_1+0x17e>
    80014b3c:	0001e517          	auipc	a0,0x1e
    80014b40:	bc450513          	addi	a0,a0,-1084 # 80032700 <__func__.0+0x318>
    80014b44:	1811a0ef          	jal	8002f4c4 <printf>
    80014b48:	02900513          	li	a0,41
    80014b4c:	666190ef          	jal	8002e1b2 <putchar>
    80014b50:	4529                	li	a0,10
    80014b52:	660190ef          	jal	8002e1b2 <putchar>
    80014b56:	c095                	beqz	s1,80014b7a <instruction_page_fault_1+0x1a8>
    80014b58:	00047497          	auipc	s1,0x47
    80014b5c:	4b94c483          	lbu	s1,1209(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014b60:	0001e597          	auipc	a1,0x1e
    80014b64:	b5858593          	addi	a1,a1,-1192 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014b68:	cc91                	beqz	s1,80014b84 <instruction_page_fault_1+0x1b2>
    80014b6a:	6418                	ld	a4,8(s0)
    80014b6c:	47b1                	li	a5,12
    TEST_END();
    80014b6e:	0001e597          	auipc	a1,0x1e
    80014b72:	b3a58593          	addi	a1,a1,-1222 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014b76:	00f70763          	beq	a4,a5,80014b84 <instruction_page_fault_1+0x1b2>
    80014b7a:	4481                	li	s1,0
    TEST_END();
    80014b7c:	0001e597          	auipc	a1,0x1e
    80014b80:	b3c58593          	addi	a1,a1,-1220 # 800326b8 <__func__.0+0x2d0>
    80014b84:	0001e517          	auipc	a0,0x1e
    80014b88:	bdc50513          	addi	a0,a0,-1060 # 80032760 <__func__.0+0x378>
    80014b8c:	1391a0ef          	jal	8002f4c4 <printf>
    80014b90:	4511                	li	a0,4
    80014b92:	b82ec0ef          	jal	80000f14 <goto_priv>
    80014b96:	be1ec0ef          	jal	80001776 <reset_state>
}
    80014b9a:	60e2                	ld	ra,24(sp)
    80014b9c:	6442                	ld	s0,16(sp)
    80014b9e:	8526                	mv	a0,s1
    80014ba0:	64a2                	ld	s1,8(sp)
    80014ba2:	6105                	addi	sp,sp,32
    80014ba4:	8082                	ret

0000000080014ba6 <instruction_page_fault_2>:

bool instruction_page_fault_2(){
    80014ba6:	1101                	addi	sp,sp,-32

    TEST_START();
    80014ba8:	0001c597          	auipc	a1,0x1c
    80014bac:	fd858593          	addi	a1,a1,-40 # 80030b80 <__func__.24>
    80014bb0:	0001e517          	auipc	a0,0x1e
    80014bb4:	b1850513          	addi	a0,a0,-1256 # 800326c8 <__func__.0+0x2e0>
bool instruction_page_fault_2(){
    80014bb8:	ec06                	sd	ra,24(sp)
    80014bba:	e822                	sd	s0,16(sp)
    80014bbc:	e426                	sd	s1,8(sp)
    TEST_START();
    80014bbe:	1071a0ef          	jal	8002f4c4 <printf>
    80014bc2:	4529                	li	a0,10
    80014bc4:	5ee190ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80014bc8:	450d                	li	a0,3
    80014bca:	b4aec0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80014bce:	a1feb0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80014bd2:	dffeb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80014bd6:	bb3eb0ef          	jal	80000788 <vspt_init>


    goto_priv(PRIV_HS);
    80014bda:	450d                	li	a0,3
    80014bdc:	b38ec0ef          	jal	80000f14 <goto_priv>

    //执行取指指令时，在HS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80014be0:	a38ec0ef          	jal	80000e18 <test_setup_except_function>
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80014be4:	000807b7          	lui	a5,0x80
    80014be8:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014bea:	07b6                	slli	a5,a5,0xd
    80014bec:	00047417          	auipc	s0,0x47
    80014bf0:	42440413          	addi	s0,s0,1060 # 8005c010 <excpt>
    80014bf4:	00000297          	auipc	t0,0x0
    80014bf8:	00c28293          	addi	t0,t0,12 # 80014c00 <instruction_page_fault_2+0x5a>
    80014bfc:	02543c23          	sd	t0,56(s0)
    80014c00:	8782                	jr	a5
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014c02:	08c00593          	li	a1,140
    80014c06:	00023617          	auipc	a2,0x23
    80014c0a:	b4a60613          	addi	a2,a2,-1206 # 80037750 <__func__.0+0x5368>
    80014c0e:	0001e517          	auipc	a0,0x1e
    80014c12:	ad250513          	addi	a0,a0,-1326 # 800326e0 <__func__.0+0x2f8>
    80014c16:	0af1a0ef          	jal	8002f4c4 <printf>
    80014c1a:	00047797          	auipc	a5,0x47
    80014c1e:	3f77c783          	lbu	a5,1015(a5) # 8005c011 <excpt+0x1>
    80014c22:	0001e597          	auipc	a1,0x1e
    80014c26:	a9658593          	addi	a1,a1,-1386 # 800326b8 <__func__.0+0x2d0>
    80014c2a:	cf89                	beqz	a5,80014c44 <instruction_page_fault_2+0x9e>
    80014c2c:	6418                	ld	a4,8(s0)
    80014c2e:	47b1                	li	a5,12
    80014c30:	0001e597          	auipc	a1,0x1e
    80014c34:	a7858593          	addi	a1,a1,-1416 # 800326a8 <__func__.0+0x2c0>
    80014c38:	00f70663          	beq	a4,a5,80014c44 <instruction_page_fault_2+0x9e>
    80014c3c:	0001e597          	auipc	a1,0x1e
    80014c40:	a7c58593          	addi	a1,a1,-1412 # 800326b8 <__func__.0+0x2d0>
    80014c44:	0001e517          	auipc	a0,0x1e
    80014c48:	ab450513          	addi	a0,a0,-1356 # 800326f8 <__func__.0+0x310>
    80014c4c:	0791a0ef          	jal	8002f4c4 <printf>
    80014c50:	00047797          	auipc	a5,0x47
    80014c54:	3c17c783          	lbu	a5,961(a5) # 8005c011 <excpt+0x1>
    80014c58:	c789                	beqz	a5,80014c62 <instruction_page_fault_2+0xbc>
    80014c5a:	6418                	ld	a4,8(s0)
    80014c5c:	47b1                	li	a5,12
    80014c5e:	00f70c63          	beq	a4,a5,80014c76 <instruction_page_fault_2+0xd0>
    80014c62:	0001e517          	auipc	a0,0x1e
    80014c66:	a9e50513          	addi	a0,a0,-1378 # 80032700 <__func__.0+0x318>
    80014c6a:	05b1a0ef          	jal	8002f4c4 <printf>
    80014c6e:	02900513          	li	a0,41
    80014c72:	540190ef          	jal	8002e1b2 <putchar>
    80014c76:	4529                	li	a0,10
    80014c78:	53a190ef          	jal	8002e1b2 <putchar>
    80014c7c:	00047497          	auipc	s1,0x47
    80014c80:	3954c483          	lbu	s1,917(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014c84:	0001e597          	auipc	a1,0x1e
    80014c88:	a3458593          	addi	a1,a1,-1484 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014c8c:	cc91                	beqz	s1,80014ca8 <instruction_page_fault_2+0x102>
    80014c8e:	6418                	ld	a4,8(s0)
    80014c90:	47b1                	li	a5,12
    TEST_END();
    80014c92:	0001e597          	auipc	a1,0x1e
    80014c96:	a1658593          	addi	a1,a1,-1514 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014c9a:	00f70763          	beq	a4,a5,80014ca8 <instruction_page_fault_2+0x102>
    80014c9e:	4481                	li	s1,0
    TEST_END();
    80014ca0:	0001e597          	auipc	a1,0x1e
    80014ca4:	a1858593          	addi	a1,a1,-1512 # 800326b8 <__func__.0+0x2d0>
    80014ca8:	0001e517          	auipc	a0,0x1e
    80014cac:	ab850513          	addi	a0,a0,-1352 # 80032760 <__func__.0+0x378>
    80014cb0:	0151a0ef          	jal	8002f4c4 <printf>
    80014cb4:	4511                	li	a0,4
    80014cb6:	a5eec0ef          	jal	80000f14 <goto_priv>
    80014cba:	abdec0ef          	jal	80001776 <reset_state>
}
    80014cbe:	60e2                	ld	ra,24(sp)
    80014cc0:	6442                	ld	s0,16(sp)
    80014cc2:	8526                	mv	a0,s1
    80014cc4:	64a2                	ld	s1,8(sp)
    80014cc6:	6105                	addi	sp,sp,32
    80014cc8:	8082                	ret

0000000080014cca <instruction_page_fault_3>:



bool instruction_page_fault_3(){
    80014cca:	1101                	addi	sp,sp,-32

    TEST_START();
    80014ccc:	0001c597          	auipc	a1,0x1c
    80014cd0:	ed458593          	addi	a1,a1,-300 # 80030ba0 <__func__.23>
    80014cd4:	0001e517          	auipc	a0,0x1e
    80014cd8:	9f450513          	addi	a0,a0,-1548 # 800326c8 <__func__.0+0x2e0>
bool instruction_page_fault_3(){
    80014cdc:	ec06                	sd	ra,24(sp)
    80014cde:	e822                	sd	s0,16(sp)
    80014ce0:	e426                	sd	s1,8(sp)
    TEST_START();
    80014ce2:	7e21a0ef          	jal	8002f4c4 <printf>
    80014ce6:	4529                	li	a0,10
    80014ce8:	4ca190ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80014cec:	450d                	li	a0,3
    80014cee:	a26ec0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80014cf2:	8fbeb0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80014cf6:	cdbeb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80014cfa:	a8feb0ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80014cfe:	4509                	li	a0,2
    80014d00:	a14ec0ef          	jal	80000f14 <goto_priv>


    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80014d04:	914ec0ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014d08:	400197b7          	lui	a5,0x40019
    80014d0c:	078a                	slli	a5,a5,0x2
    80014d0e:	00047417          	auipc	s0,0x47
    80014d12:	30240413          	addi	s0,s0,770 # 8005c010 <excpt>
    80014d16:	00000297          	auipc	t0,0x0
    80014d1a:	00c28293          	addi	t0,t0,12 # 80014d22 <instruction_page_fault_3+0x58>
    80014d1e:	02543c23          	sd	t0,56(s0)
    80014d22:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.v=0 leads to IPF",
    80014d24:	08c00593          	li	a1,140
    80014d28:	00023617          	auipc	a2,0x23
    80014d2c:	a6060613          	addi	a2,a2,-1440 # 80037788 <__func__.0+0x53a0>
    80014d30:	0001e517          	auipc	a0,0x1e
    80014d34:	9b050513          	addi	a0,a0,-1616 # 800326e0 <__func__.0+0x2f8>
    80014d38:	78c1a0ef          	jal	8002f4c4 <printf>
    80014d3c:	00047797          	auipc	a5,0x47
    80014d40:	2d57c783          	lbu	a5,725(a5) # 8005c011 <excpt+0x1>
    80014d44:	0001e597          	auipc	a1,0x1e
    80014d48:	97458593          	addi	a1,a1,-1676 # 800326b8 <__func__.0+0x2d0>
    80014d4c:	cf89                	beqz	a5,80014d66 <instruction_page_fault_3+0x9c>
    80014d4e:	6418                	ld	a4,8(s0)
    80014d50:	47b1                	li	a5,12
    80014d52:	0001e597          	auipc	a1,0x1e
    80014d56:	95658593          	addi	a1,a1,-1706 # 800326a8 <__func__.0+0x2c0>
    80014d5a:	00f70663          	beq	a4,a5,80014d66 <instruction_page_fault_3+0x9c>
    80014d5e:	0001e597          	auipc	a1,0x1e
    80014d62:	95a58593          	addi	a1,a1,-1702 # 800326b8 <__func__.0+0x2d0>
    80014d66:	0001e517          	auipc	a0,0x1e
    80014d6a:	99250513          	addi	a0,a0,-1646 # 800326f8 <__func__.0+0x310>
    80014d6e:	7561a0ef          	jal	8002f4c4 <printf>
    80014d72:	00047797          	auipc	a5,0x47
    80014d76:	29f7c783          	lbu	a5,671(a5) # 8005c011 <excpt+0x1>
    80014d7a:	c789                	beqz	a5,80014d84 <instruction_page_fault_3+0xba>
    80014d7c:	6418                	ld	a4,8(s0)
    80014d7e:	47b1                	li	a5,12
    80014d80:	00f70c63          	beq	a4,a5,80014d98 <instruction_page_fault_3+0xce>
    80014d84:	0001e517          	auipc	a0,0x1e
    80014d88:	97c50513          	addi	a0,a0,-1668 # 80032700 <__func__.0+0x318>
    80014d8c:	7381a0ef          	jal	8002f4c4 <printf>
    80014d90:	02900513          	li	a0,41
    80014d94:	41e190ef          	jal	8002e1b2 <putchar>
    80014d98:	4529                	li	a0,10
    80014d9a:	418190ef          	jal	8002e1b2 <putchar>
    80014d9e:	00047797          	auipc	a5,0x47
    80014da2:	2737c783          	lbu	a5,627(a5) # 8005c011 <excpt+0x1>
    80014da6:	4481                	li	s1,0
    80014da8:	c789                	beqz	a5,80014db2 <instruction_page_fault_3+0xe8>
    80014daa:	6404                	ld	s1,8(s0)
    80014dac:	14d1                	addi	s1,s1,-12
    80014dae:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80014db2:	866ec0ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014db6:	001007b7          	lui	a5,0x100
    80014dba:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80014dbe:	07b2                	slli	a5,a5,0xc
    80014dc0:	00000297          	auipc	t0,0x0
    80014dc4:	00c28293          	addi	t0,t0,12 # 80014dcc <instruction_page_fault_3+0x102>
    80014dc8:	02543c23          	sd	t0,56(s0)
    80014dcc:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014dce:	08c00593          	li	a1,140
    80014dd2:	00023617          	auipc	a2,0x23
    80014dd6:	9ee60613          	addi	a2,a2,-1554 # 800377c0 <__func__.0+0x53d8>
    80014dda:	0001e517          	auipc	a0,0x1e
    80014dde:	90650513          	addi	a0,a0,-1786 # 800326e0 <__func__.0+0x2f8>
    80014de2:	6e21a0ef          	jal	8002f4c4 <printf>
    80014de6:	00047797          	auipc	a5,0x47
    80014dea:	22b7c783          	lbu	a5,555(a5) # 8005c011 <excpt+0x1>
    80014dee:	0001e597          	auipc	a1,0x1e
    80014df2:	8ca58593          	addi	a1,a1,-1846 # 800326b8 <__func__.0+0x2d0>
    80014df6:	cf89                	beqz	a5,80014e10 <instruction_page_fault_3+0x146>
    80014df8:	6418                	ld	a4,8(s0)
    80014dfa:	47b1                	li	a5,12
    80014dfc:	0001e597          	auipc	a1,0x1e
    80014e00:	8ac58593          	addi	a1,a1,-1876 # 800326a8 <__func__.0+0x2c0>
    80014e04:	00f70663          	beq	a4,a5,80014e10 <instruction_page_fault_3+0x146>
    80014e08:	0001e597          	auipc	a1,0x1e
    80014e0c:	8b058593          	addi	a1,a1,-1872 # 800326b8 <__func__.0+0x2d0>
    80014e10:	0001e517          	auipc	a0,0x1e
    80014e14:	8e850513          	addi	a0,a0,-1816 # 800326f8 <__func__.0+0x310>
    80014e18:	6ac1a0ef          	jal	8002f4c4 <printf>
    80014e1c:	00047797          	auipc	a5,0x47
    80014e20:	1f57c783          	lbu	a5,501(a5) # 8005c011 <excpt+0x1>
    80014e24:	c789                	beqz	a5,80014e2e <instruction_page_fault_3+0x164>
    80014e26:	6418                	ld	a4,8(s0)
    80014e28:	47b1                	li	a5,12
    80014e2a:	00f70c63          	beq	a4,a5,80014e42 <instruction_page_fault_3+0x178>
    80014e2e:	0001e517          	auipc	a0,0x1e
    80014e32:	8d250513          	addi	a0,a0,-1838 # 80032700 <__func__.0+0x318>
    80014e36:	68e1a0ef          	jal	8002f4c4 <printf>
    80014e3a:	02900513          	li	a0,41
    80014e3e:	374190ef          	jal	8002e1b2 <putchar>
    80014e42:	4529                	li	a0,10
    80014e44:	36e190ef          	jal	8002e1b2 <putchar>
    80014e48:	c095                	beqz	s1,80014e6c <instruction_page_fault_3+0x1a2>
    80014e4a:	00047497          	auipc	s1,0x47
    80014e4e:	1c74c483          	lbu	s1,455(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014e52:	0001e597          	auipc	a1,0x1e
    80014e56:	86658593          	addi	a1,a1,-1946 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014e5a:	cc91                	beqz	s1,80014e76 <instruction_page_fault_3+0x1ac>
    80014e5c:	6418                	ld	a4,8(s0)
    80014e5e:	47b1                	li	a5,12
    TEST_END();
    80014e60:	0001e597          	auipc	a1,0x1e
    80014e64:	84858593          	addi	a1,a1,-1976 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014e68:	00f70763          	beq	a4,a5,80014e76 <instruction_page_fault_3+0x1ac>
    80014e6c:	4481                	li	s1,0
    TEST_END();
    80014e6e:	0001e597          	auipc	a1,0x1e
    80014e72:	84a58593          	addi	a1,a1,-1974 # 800326b8 <__func__.0+0x2d0>
    80014e76:	0001e517          	auipc	a0,0x1e
    80014e7a:	8ea50513          	addi	a0,a0,-1814 # 80032760 <__func__.0+0x378>
    80014e7e:	6461a0ef          	jal	8002f4c4 <printf>
    80014e82:	4511                	li	a0,4
    80014e84:	890ec0ef          	jal	80000f14 <goto_priv>
    80014e88:	8efec0ef          	jal	80001776 <reset_state>
}
    80014e8c:	60e2                	ld	ra,24(sp)
    80014e8e:	6442                	ld	s0,16(sp)
    80014e90:	8526                	mv	a0,s1
    80014e92:	64a2                	ld	s1,8(sp)
    80014e94:	6105                	addi	sp,sp,32
    80014e96:	8082                	ret

0000000080014e98 <instruction_page_fault_4>:

bool instruction_page_fault_4(){
    80014e98:	1101                	addi	sp,sp,-32

    TEST_START();
    80014e9a:	0001c597          	auipc	a1,0x1c
    80014e9e:	d2658593          	addi	a1,a1,-730 # 80030bc0 <__func__.22>
    80014ea2:	0001e517          	auipc	a0,0x1e
    80014ea6:	82650513          	addi	a0,a0,-2010 # 800326c8 <__func__.0+0x2e0>
bool instruction_page_fault_4(){
    80014eaa:	ec06                	sd	ra,24(sp)
    80014eac:	e822                	sd	s0,16(sp)
    80014eae:	e426                	sd	s1,8(sp)
    TEST_START();
    80014eb0:	6141a0ef          	jal	8002f4c4 <printf>
    80014eb4:	4529                	li	a0,10
    80014eb6:	2fc190ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80014eba:	450d                	li	a0,3
    80014ebc:	858ec0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80014ec0:	f2ceb0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80014ec4:	b0deb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80014ec8:	8c1eb0ef          	jal	80000788 <vspt_init>


    goto_priv(PRIV_VS);
    80014ecc:	4509                	li	a0,2
    80014ece:	846ec0ef          	jal	80000f14 <goto_priv>

    //执行取指指令时，在VS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80014ed2:	f47eb0ef          	jal	80000e18 <test_setup_except_function>
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80014ed6:	000807b7          	lui	a5,0x80
    80014eda:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014edc:	07b6                	slli	a5,a5,0xd
    80014ede:	00047417          	auipc	s0,0x47
    80014ee2:	13240413          	addi	s0,s0,306 # 8005c010 <excpt>
    80014ee6:	00000297          	auipc	t0,0x0
    80014eea:	00c28293          	addi	t0,t0,12 # 80014ef2 <instruction_page_fault_4+0x5a>
    80014eee:	02543c23          	sd	t0,56(s0)
    80014ef2:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80014ef4:	08c00593          	li	a1,140
    80014ef8:	00023617          	auipc	a2,0x23
    80014efc:	90060613          	addi	a2,a2,-1792 # 800377f8 <__func__.0+0x5410>
    80014f00:	0001d517          	auipc	a0,0x1d
    80014f04:	7e050513          	addi	a0,a0,2016 # 800326e0 <__func__.0+0x2f8>
    80014f08:	5bc1a0ef          	jal	8002f4c4 <printf>
    80014f0c:	00047797          	auipc	a5,0x47
    80014f10:	1057c783          	lbu	a5,261(a5) # 8005c011 <excpt+0x1>
    80014f14:	0001d597          	auipc	a1,0x1d
    80014f18:	7a458593          	addi	a1,a1,1956 # 800326b8 <__func__.0+0x2d0>
    80014f1c:	cf89                	beqz	a5,80014f36 <instruction_page_fault_4+0x9e>
    80014f1e:	6418                	ld	a4,8(s0)
    80014f20:	47b1                	li	a5,12
    80014f22:	0001d597          	auipc	a1,0x1d
    80014f26:	78658593          	addi	a1,a1,1926 # 800326a8 <__func__.0+0x2c0>
    80014f2a:	00f70663          	beq	a4,a5,80014f36 <instruction_page_fault_4+0x9e>
    80014f2e:	0001d597          	auipc	a1,0x1d
    80014f32:	78a58593          	addi	a1,a1,1930 # 800326b8 <__func__.0+0x2d0>
    80014f36:	0001d517          	auipc	a0,0x1d
    80014f3a:	7c250513          	addi	a0,a0,1986 # 800326f8 <__func__.0+0x310>
    80014f3e:	5861a0ef          	jal	8002f4c4 <printf>
    80014f42:	00047797          	auipc	a5,0x47
    80014f46:	0cf7c783          	lbu	a5,207(a5) # 8005c011 <excpt+0x1>
    80014f4a:	c789                	beqz	a5,80014f54 <instruction_page_fault_4+0xbc>
    80014f4c:	6418                	ld	a4,8(s0)
    80014f4e:	47b1                	li	a5,12
    80014f50:	00f70c63          	beq	a4,a5,80014f68 <instruction_page_fault_4+0xd0>
    80014f54:	0001d517          	auipc	a0,0x1d
    80014f58:	7ac50513          	addi	a0,a0,1964 # 80032700 <__func__.0+0x318>
    80014f5c:	5681a0ef          	jal	8002f4c4 <printf>
    80014f60:	02900513          	li	a0,41
    80014f64:	24e190ef          	jal	8002e1b2 <putchar>
    80014f68:	4529                	li	a0,10
    80014f6a:	248190ef          	jal	8002e1b2 <putchar>
    80014f6e:	00047497          	auipc	s1,0x47
    80014f72:	0a34c483          	lbu	s1,163(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014f76:	0001d597          	auipc	a1,0x1d
    80014f7a:	74258593          	addi	a1,a1,1858 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80014f7e:	cc91                	beqz	s1,80014f9a <instruction_page_fault_4+0x102>
    80014f80:	6418                	ld	a4,8(s0)
    80014f82:	47b1                	li	a5,12
    TEST_END();
    80014f84:	0001d597          	auipc	a1,0x1d
    80014f88:	72458593          	addi	a1,a1,1828 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80014f8c:	00f70763          	beq	a4,a5,80014f9a <instruction_page_fault_4+0x102>
    80014f90:	4481                	li	s1,0
    TEST_END();
    80014f92:	0001d597          	auipc	a1,0x1d
    80014f96:	72658593          	addi	a1,a1,1830 # 800326b8 <__func__.0+0x2d0>
    80014f9a:	0001d517          	auipc	a0,0x1d
    80014f9e:	7c650513          	addi	a0,a0,1990 # 80032760 <__func__.0+0x378>
    80014fa2:	5221a0ef          	jal	8002f4c4 <printf>
    80014fa6:	4511                	li	a0,4
    80014fa8:	f6deb0ef          	jal	80000f14 <goto_priv>
    80014fac:	fcaec0ef          	jal	80001776 <reset_state>
}
    80014fb0:	60e2                	ld	ra,24(sp)
    80014fb2:	6442                	ld	s0,16(sp)
    80014fb4:	8526                	mv	a0,s1
    80014fb6:	64a2                	ld	s1,8(sp)
    80014fb8:	6105                	addi	sp,sp,32
    80014fba:	8082                	ret

0000000080014fbc <load_page_fault_1>:

bool load_page_fault_1(){
    80014fbc:	1101                	addi	sp,sp,-32

    TEST_START();
    80014fbe:	0001c597          	auipc	a1,0x1c
    80014fc2:	c2258593          	addi	a1,a1,-990 # 80030be0 <__func__.21>
    80014fc6:	0001d517          	auipc	a0,0x1d
    80014fca:	70250513          	addi	a0,a0,1794 # 800326c8 <__func__.0+0x2e0>
bool load_page_fault_1(){
    80014fce:	ec06                	sd	ra,24(sp)
    80014fd0:	e822                	sd	s0,16(sp)
    80014fd2:	e426                	sd	s1,8(sp)
    TEST_START();
    80014fd4:	4f01a0ef          	jal	8002f4c4 <printf>
    80014fd8:	4529                	li	a0,10
    80014fda:	1d8190ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS); 
    80014fde:	450d                	li	a0,3
    80014fe0:	f35eb0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80014fe4:	e08eb0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80014fe8:	9e9eb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80014fec:	f9ceb0ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80014ff0:	450d                	li	a0,3
    80014ff2:	f23eb0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80014ff6:	4509                	li	a0,2
    80014ff8:	e3deb0ef          	jal	80000e34 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80014ffc:	e1deb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80015000:	400197b7          	lui	a5,0x40019
    80015004:	078a                	slli	a5,a5,0x2
    80015006:	6007c7f3          	.insn	4, 0x6007c7f3

    addr = hs_page_base(VSI_GI);
    hlvb(addr);
    TEST_ASSERT("hs mode load when pte.v=0 leads to LPF",
    8001500a:	08c00593          	li	a1,140
    8001500e:	00023617          	auipc	a2,0x23
    80015012:	82260613          	addi	a2,a2,-2014 # 80037830 <__func__.0+0x5448>
    80015016:	0001d517          	auipc	a0,0x1d
    8001501a:	6ca50513          	addi	a0,a0,1738 # 800326e0 <__func__.0+0x2f8>
    8001501e:	4a61a0ef          	jal	8002f4c4 <printf>
    80015022:	00047797          	auipc	a5,0x47
    80015026:	fef7c783          	lbu	a5,-17(a5) # 8005c011 <excpt+0x1>
    8001502a:	00047497          	auipc	s1,0x47
    8001502e:	fe648493          	addi	s1,s1,-26 # 8005c010 <excpt>
    80015032:	0001d597          	auipc	a1,0x1d
    80015036:	68658593          	addi	a1,a1,1670 # 800326b8 <__func__.0+0x2d0>
    8001503a:	cf89                	beqz	a5,80015054 <load_page_fault_1+0x98>
    8001503c:	6498                	ld	a4,8(s1)
    8001503e:	47b5                	li	a5,13
    80015040:	0001d597          	auipc	a1,0x1d
    80015044:	66858593          	addi	a1,a1,1640 # 800326a8 <__func__.0+0x2c0>
    80015048:	00f70663          	beq	a4,a5,80015054 <load_page_fault_1+0x98>
    8001504c:	0001d597          	auipc	a1,0x1d
    80015050:	66c58593          	addi	a1,a1,1644 # 800326b8 <__func__.0+0x2d0>
    80015054:	0001d517          	auipc	a0,0x1d
    80015058:	6a450513          	addi	a0,a0,1700 # 800326f8 <__func__.0+0x310>
    8001505c:	4681a0ef          	jal	8002f4c4 <printf>
    80015060:	00047797          	auipc	a5,0x47
    80015064:	fb17c783          	lbu	a5,-79(a5) # 8005c011 <excpt+0x1>
    80015068:	c789                	beqz	a5,80015072 <load_page_fault_1+0xb6>
    8001506a:	6498                	ld	a4,8(s1)
    8001506c:	47b5                	li	a5,13
    8001506e:	00f70c63          	beq	a4,a5,80015086 <load_page_fault_1+0xca>
    80015072:	0001d517          	auipc	a0,0x1d
    80015076:	68e50513          	addi	a0,a0,1678 # 80032700 <__func__.0+0x318>
    8001507a:	44a1a0ef          	jal	8002f4c4 <printf>
    8001507e:	02900513          	li	a0,41
    80015082:	130190ef          	jal	8002e1b2 <putchar>
    80015086:	4529                	li	a0,10
    80015088:	12a190ef          	jal	8002e1b2 <putchar>
    8001508c:	00047797          	auipc	a5,0x47
    80015090:	f857c783          	lbu	a5,-123(a5) # 8005c011 <excpt+0x1>
    80015094:	4401                	li	s0,0
    80015096:	c789                	beqz	a5,800150a0 <load_page_fault_1+0xe4>
    80015098:	6480                	ld	s0,8(s1)
    8001509a:	144d                	addi	s0,s0,-13
    8001509c:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LPF
    );


    //执行hlvd指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    800150a0:	d79eb0ef          	jal	80000e18 <test_setup_except_function>
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800150a4:	000807b7          	lui	a5,0x80
    800150a8:	1007b073          	csrc	sstatus,a5
    asm volatile(
    800150ac:	001007b7          	lui	a5,0x100
    800150b0:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    800150b4:	07b2                	slli	a5,a5,0xc
    800150b6:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800150ba:	08c00593          	li	a1,140
    800150be:	00022617          	auipc	a2,0x22
    800150c2:	79a60613          	addi	a2,a2,1946 # 80037858 <__func__.0+0x5470>
    800150c6:	0001d517          	auipc	a0,0x1d
    800150ca:	61a50513          	addi	a0,a0,1562 # 800326e0 <__func__.0+0x2f8>
    800150ce:	3f61a0ef          	jal	8002f4c4 <printf>
    800150d2:	00047797          	auipc	a5,0x47
    800150d6:	f3f7c783          	lbu	a5,-193(a5) # 8005c011 <excpt+0x1>
    800150da:	0001d597          	auipc	a1,0x1d
    800150de:	5de58593          	addi	a1,a1,1502 # 800326b8 <__func__.0+0x2d0>
    800150e2:	cf89                	beqz	a5,800150fc <load_page_fault_1+0x140>
    800150e4:	6498                	ld	a4,8(s1)
    800150e6:	47b5                	li	a5,13
    800150e8:	0001d597          	auipc	a1,0x1d
    800150ec:	5c058593          	addi	a1,a1,1472 # 800326a8 <__func__.0+0x2c0>
    800150f0:	00f70663          	beq	a4,a5,800150fc <load_page_fault_1+0x140>
    800150f4:	0001d597          	auipc	a1,0x1d
    800150f8:	5c458593          	addi	a1,a1,1476 # 800326b8 <__func__.0+0x2d0>
    800150fc:	0001d517          	auipc	a0,0x1d
    80015100:	5fc50513          	addi	a0,a0,1532 # 800326f8 <__func__.0+0x310>
    80015104:	3c01a0ef          	jal	8002f4c4 <printf>
    80015108:	00047797          	auipc	a5,0x47
    8001510c:	f097c783          	lbu	a5,-247(a5) # 8005c011 <excpt+0x1>
    80015110:	c789                	beqz	a5,8001511a <load_page_fault_1+0x15e>
    80015112:	6498                	ld	a4,8(s1)
    80015114:	47b5                	li	a5,13
    80015116:	00f70c63          	beq	a4,a5,8001512e <load_page_fault_1+0x172>
    8001511a:	0001d517          	auipc	a0,0x1d
    8001511e:	5e650513          	addi	a0,a0,1510 # 80032700 <__func__.0+0x318>
    80015122:	3a21a0ef          	jal	8002f4c4 <printf>
    80015126:	02900513          	li	a0,41
    8001512a:	088190ef          	jal	8002e1b2 <putchar>
    8001512e:	4529                	li	a0,10
    80015130:	082190ef          	jal	8002e1b2 <putchar>
    80015134:	c801                	beqz	s0,80015144 <load_page_fault_1+0x188>
    80015136:	00047797          	auipc	a5,0x47
    8001513a:	edb7c783          	lbu	a5,-293(a5) # 8005c011 <excpt+0x1>
    8001513e:	4401                	li	s0,0
    80015140:	0c079e63          	bnez	a5,8001521c <load_page_fault_1+0x260>
        excpt.cause == CAUSE_LPF
    );

    //执行hlvd指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_HS);
    80015144:	450d                	li	a0,3
    80015146:	dcfeb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001514a:	ccfeb0ef          	jal	80000e18 <test_setup_except_function>
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001514e:	000807b7          	lui	a5,0x80
    80015152:	1007a073          	csrs	sstatus,a5
    80015156:	001007b7          	lui	a5,0x100
    8001515a:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001515c:	07b2                	slli	a5,a5,0xc
    8001515e:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80015162:	08c00593          	li	a1,140
    80015166:	00022617          	auipc	a2,0x22
    8001516a:	73260613          	addi	a2,a2,1842 # 80037898 <__func__.0+0x54b0>
    8001516e:	0001d517          	auipc	a0,0x1d
    80015172:	57250513          	addi	a0,a0,1394 # 800326e0 <__func__.0+0x2f8>
    80015176:	34e1a0ef          	jal	8002f4c4 <printf>
    8001517a:	00047797          	auipc	a5,0x47
    8001517e:	e977c783          	lbu	a5,-361(a5) # 8005c011 <excpt+0x1>
    80015182:	0001d597          	auipc	a1,0x1d
    80015186:	53658593          	addi	a1,a1,1334 # 800326b8 <__func__.0+0x2d0>
    8001518a:	cf89                	beqz	a5,800151a4 <load_page_fault_1+0x1e8>
    8001518c:	6498                	ld	a4,8(s1)
    8001518e:	47b5                	li	a5,13
    80015190:	0001d597          	auipc	a1,0x1d
    80015194:	51858593          	addi	a1,a1,1304 # 800326a8 <__func__.0+0x2c0>
    80015198:	00f70663          	beq	a4,a5,800151a4 <load_page_fault_1+0x1e8>
    8001519c:	0001d597          	auipc	a1,0x1d
    800151a0:	51c58593          	addi	a1,a1,1308 # 800326b8 <__func__.0+0x2d0>
    800151a4:	0001d517          	auipc	a0,0x1d
    800151a8:	55450513          	addi	a0,a0,1364 # 800326f8 <__func__.0+0x310>
    800151ac:	3181a0ef          	jal	8002f4c4 <printf>
    800151b0:	00047797          	auipc	a5,0x47
    800151b4:	e617c783          	lbu	a5,-415(a5) # 8005c011 <excpt+0x1>
    800151b8:	c789                	beqz	a5,800151c2 <load_page_fault_1+0x206>
    800151ba:	6498                	ld	a4,8(s1)
    800151bc:	47b5                	li	a5,13
    800151be:	00f70c63          	beq	a4,a5,800151d6 <load_page_fault_1+0x21a>
    800151c2:	0001d517          	auipc	a0,0x1d
    800151c6:	53e50513          	addi	a0,a0,1342 # 80032700 <__func__.0+0x318>
    800151ca:	2fa1a0ef          	jal	8002f4c4 <printf>
    800151ce:	02900513          	li	a0,41
    800151d2:	7e1180ef          	jal	8002e1b2 <putchar>
    800151d6:	4529                	li	a0,10
    800151d8:	7db180ef          	jal	8002e1b2 <putchar>
    800151dc:	c411                	beqz	s0,800151e8 <load_page_fault_1+0x22c>
    800151de:	00047417          	auipc	s0,0x47
    800151e2:	e3344403          	lbu	s0,-461(s0) # 8005c011 <excpt+0x1>
    800151e6:	e021                	bnez	s0,80015226 <load_page_fault_1+0x26a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800151e8:	000807b7          	lui	a5,0x80
    800151ec:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800151f0:	4401                	li	s0,0

    TEST_END();
    800151f2:	0001d597          	auipc	a1,0x1d
    800151f6:	4c658593          	addi	a1,a1,1222 # 800326b8 <__func__.0+0x2d0>
    800151fa:	0001d517          	auipc	a0,0x1d
    800151fe:	56650513          	addi	a0,a0,1382 # 80032760 <__func__.0+0x378>
    80015202:	2c21a0ef          	jal	8002f4c4 <printf>
    80015206:	4511                	li	a0,4
    80015208:	d0deb0ef          	jal	80000f14 <goto_priv>
    8001520c:	d6aec0ef          	jal	80001776 <reset_state>

}
    80015210:	60e2                	ld	ra,24(sp)
    80015212:	8522                	mv	a0,s0
    80015214:	6442                	ld	s0,16(sp)
    80015216:	64a2                	ld	s1,8(sp)
    80015218:	6105                	addi	sp,sp,32
    8001521a:	8082                	ret
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    8001521c:	6480                	ld	s0,8(s1)
    8001521e:	144d                	addi	s0,s0,-13
    80015220:	00143413          	seqz	s0,s0
    80015224:	b705                	j	80015144 <load_page_fault_1+0x188>
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80015226:	6498                	ld	a4,8(s1)
    80015228:	47b5                	li	a5,13
    8001522a:	faf71fe3          	bne	a4,a5,800151e8 <load_page_fault_1+0x22c>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001522e:	000807b7          	lui	a5,0x80
    80015232:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80015236:	0001d597          	auipc	a1,0x1d
    8001523a:	47258593          	addi	a1,a1,1138 # 800326a8 <__func__.0+0x2c0>
    8001523e:	bf75                	j	800151fa <load_page_fault_1+0x23e>

0000000080015240 <load_page_fault_2>:

bool load_page_fault_2(){
    80015240:	1101                	addi	sp,sp,-32

    TEST_START();
    80015242:	0001c597          	auipc	a1,0x1c
    80015246:	9b658593          	addi	a1,a1,-1610 # 80030bf8 <__func__.20>
    8001524a:	0001d517          	auipc	a0,0x1d
    8001524e:	47e50513          	addi	a0,a0,1150 # 800326c8 <__func__.0+0x2e0>
bool load_page_fault_2(){
    80015252:	ec06                	sd	ra,24(sp)
    80015254:	e822                	sd	s0,16(sp)
    80015256:	e426                	sd	s1,8(sp)
    TEST_START();
    80015258:	26c1a0ef          	jal	8002f4c4 <printf>
    8001525c:	4529                	li	a0,10
    8001525e:	755180ef          	jal	8002e1b2 <putchar>


    goto_priv(PRIV_HS);
    80015262:	450d                	li	a0,3
    80015264:	cb1eb0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80015268:	b84eb0ef          	jal	800005ec <hspt_init>
    hpt_init();
    8001526c:	f64eb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80015270:	d18eb0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    80015274:	4511                	li	a0,4
    80015276:	c9feb0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001527a:	000407b7          	lui	a5,0x40
    8001527e:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80015282:	450d                	li	a0,3
    80015284:	c91eb0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015288:	4509                	li	a0,2
    8001528a:	babeb0ef          	jal	80000e34 <set_prev_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001528e:	b8beb0ef          	jal	80000e18 <test_setup_except_function>
    80015292:	000807b7          	lui	a5,0x80
    80015296:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015298:	07b6                	slli	a5,a5,0xd
    8001529a:	6c07c7f3          	.insn	4, 0x6c07c7f3
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    hlvd(addr);
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    8001529e:	08c00593          	li	a1,140
    800152a2:	00022617          	auipc	a2,0x22
    800152a6:	63e60613          	addi	a2,a2,1598 # 800378e0 <__func__.0+0x54f8>
    800152aa:	0001d517          	auipc	a0,0x1d
    800152ae:	43650513          	addi	a0,a0,1078 # 800326e0 <__func__.0+0x2f8>
    800152b2:	2121a0ef          	jal	8002f4c4 <printf>
    800152b6:	00047797          	auipc	a5,0x47
    800152ba:	d5b7c783          	lbu	a5,-677(a5) # 8005c011 <excpt+0x1>
    800152be:	00047497          	auipc	s1,0x47
    800152c2:	d5248493          	addi	s1,s1,-686 # 8005c010 <excpt>
    800152c6:	0001d597          	auipc	a1,0x1d
    800152ca:	3f258593          	addi	a1,a1,1010 # 800326b8 <__func__.0+0x2d0>
    800152ce:	cf89                	beqz	a5,800152e8 <load_page_fault_2+0xa8>
    800152d0:	6498                	ld	a4,8(s1)
    800152d2:	47b5                	li	a5,13
    800152d4:	0001d597          	auipc	a1,0x1d
    800152d8:	3d458593          	addi	a1,a1,980 # 800326a8 <__func__.0+0x2c0>
    800152dc:	00f70663          	beq	a4,a5,800152e8 <load_page_fault_2+0xa8>
    800152e0:	0001d597          	auipc	a1,0x1d
    800152e4:	3d858593          	addi	a1,a1,984 # 800326b8 <__func__.0+0x2d0>
    800152e8:	0001d517          	auipc	a0,0x1d
    800152ec:	41050513          	addi	a0,a0,1040 # 800326f8 <__func__.0+0x310>
    800152f0:	1d41a0ef          	jal	8002f4c4 <printf>
    800152f4:	00047797          	auipc	a5,0x47
    800152f8:	d1d7c783          	lbu	a5,-739(a5) # 8005c011 <excpt+0x1>
    800152fc:	c789                	beqz	a5,80015306 <load_page_fault_2+0xc6>
    800152fe:	6498                	ld	a4,8(s1)
    80015300:	47b5                	li	a5,13
    80015302:	00f70c63          	beq	a4,a5,8001531a <load_page_fault_2+0xda>
    80015306:	0001d517          	auipc	a0,0x1d
    8001530a:	3fa50513          	addi	a0,a0,1018 # 80032700 <__func__.0+0x318>
    8001530e:	1b61a0ef          	jal	8002f4c4 <printf>
    80015312:	02900513          	li	a0,41
    80015316:	69d180ef          	jal	8002e1b2 <putchar>
    8001531a:	4529                	li	a0,10
    8001531c:	697180ef          	jal	8002e1b2 <putchar>
    80015320:	00047417          	auipc	s0,0x47
    80015324:	cf144403          	lbu	s0,-783(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80015328:	0001d597          	auipc	a1,0x1d
    8001532c:	39058593          	addi	a1,a1,912 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80015330:	cc11                	beqz	s0,8001534c <load_page_fault_2+0x10c>
    80015332:	6498                	ld	a4,8(s1)
    80015334:	47b5                	li	a5,13
    TEST_END();
    80015336:	0001d597          	auipc	a1,0x1d
    8001533a:	37258593          	addi	a1,a1,882 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    8001533e:	00f70763          	beq	a4,a5,8001534c <load_page_fault_2+0x10c>
    80015342:	4401                	li	s0,0
    TEST_END();
    80015344:	0001d597          	auipc	a1,0x1d
    80015348:	37458593          	addi	a1,a1,884 # 800326b8 <__func__.0+0x2d0>
    8001534c:	0001d517          	auipc	a0,0x1d
    80015350:	41450513          	addi	a0,a0,1044 # 80032760 <__func__.0+0x378>
    80015354:	1701a0ef          	jal	8002f4c4 <printf>
    80015358:	4511                	li	a0,4
    8001535a:	bbbeb0ef          	jal	80000f14 <goto_priv>
    8001535e:	c18ec0ef          	jal	80001776 <reset_state>
}
    80015362:	60e2                	ld	ra,24(sp)
    80015364:	8522                	mv	a0,s0
    80015366:	6442                	ld	s0,16(sp)
    80015368:	64a2                	ld	s1,8(sp)
    8001536a:	6105                	addi	sp,sp,32
    8001536c:	8082                	ret

000000008001536e <load_page_fault_3>:

bool load_page_fault_3(){
    8001536e:	1141                	addi	sp,sp,-16

    TEST_START();
    80015370:	0001c597          	auipc	a1,0x1c
    80015374:	8a058593          	addi	a1,a1,-1888 # 80030c10 <__func__.19>
    80015378:	0001d517          	auipc	a0,0x1d
    8001537c:	35050513          	addi	a0,a0,848 # 800326c8 <__func__.0+0x2e0>
bool load_page_fault_3(){
    80015380:	e406                	sd	ra,8(sp)
    80015382:	e022                	sd	s0,0(sp)
    TEST_START();
    80015384:	1401a0ef          	jal	8002f4c4 <printf>
    80015388:	4529                	li	a0,10
    8001538a:	629180ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8001538e:	450d                	li	a0,3
    80015390:	b85eb0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80015394:	a58eb0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80015398:	e38eb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001539c:	beceb0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    800153a0:	4511                	li	a0,4
    800153a2:	b73eb0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800153a6:	000407b7          	lui	a5,0x40
    800153aa:	2007a073          	csrs	vsstatus,a5

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    800153ae:	450d                	li	a0,3
    800153b0:	b65eb0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    800153b4:	4509                	li	a0,2
    800153b6:	a7feb0ef          	jal	80000e34 <set_prev_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    800153ba:	a5feb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    800153be:	000807b7          	lui	a5,0x80
    800153c2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800153c4:	07b6                	slli	a5,a5,0xd
    800153c6:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(addr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800153ca:	08c00593          	li	a1,140
    800153ce:	00022617          	auipc	a2,0x22
    800153d2:	55260613          	addi	a2,a2,1362 # 80037920 <__func__.0+0x5538>
    800153d6:	0001d517          	auipc	a0,0x1d
    800153da:	30a50513          	addi	a0,a0,778 # 800326e0 <__func__.0+0x2f8>
    800153de:	0e61a0ef          	jal	8002f4c4 <printf>
    800153e2:	00047797          	auipc	a5,0x47
    800153e6:	c2f7c783          	lbu	a5,-977(a5) # 8005c011 <excpt+0x1>
    800153ea:	0001d597          	auipc	a1,0x1d
    800153ee:	2be58593          	addi	a1,a1,702 # 800326a8 <__func__.0+0x2c0>
    800153f2:	c789                	beqz	a5,800153fc <load_page_fault_3+0x8e>
    800153f4:	0001d597          	auipc	a1,0x1d
    800153f8:	2c458593          	addi	a1,a1,708 # 800326b8 <__func__.0+0x2d0>
    800153fc:	0001d517          	auipc	a0,0x1d
    80015400:	2fc50513          	addi	a0,a0,764 # 800326f8 <__func__.0+0x310>
    80015404:	0c01a0ef          	jal	8002f4c4 <printf>
    80015408:	00047797          	auipc	a5,0x47
    8001540c:	c097c783          	lbu	a5,-1015(a5) # 8005c011 <excpt+0x1>
    80015410:	e7a1                	bnez	a5,80015458 <load_page_fault_3+0xea>
    80015412:	4529                	li	a0,10
    80015414:	59f180ef          	jal	8002e1b2 <putchar>
    80015418:	00047797          	auipc	a5,0x47
    8001541c:	bf97c783          	lbu	a5,-1031(a5) # 8005c011 <excpt+0x1>
    80015420:	e795                	bnez	a5,8001544c <load_page_fault_3+0xde>
    80015422:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015424:	0001d597          	auipc	a1,0x1d
    80015428:	28458593          	addi	a1,a1,644 # 800326a8 <__func__.0+0x2c0>
    8001542c:	0001d517          	auipc	a0,0x1d
    80015430:	33450513          	addi	a0,a0,820 # 80032760 <__func__.0+0x378>
    80015434:	0901a0ef          	jal	8002f4c4 <printf>
    80015438:	4511                	li	a0,4
    8001543a:	adbeb0ef          	jal	80000f14 <goto_priv>
    8001543e:	b38ec0ef          	jal	80001776 <reset_state>
}
    80015442:	60a2                	ld	ra,8(sp)
    80015444:	8522                	mv	a0,s0
    80015446:	6402                	ld	s0,0(sp)
    80015448:	0141                	addi	sp,sp,16
    8001544a:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001544c:	4401                	li	s0,0
    TEST_END();
    8001544e:	0001d597          	auipc	a1,0x1d
    80015452:	26a58593          	addi	a1,a1,618 # 800326b8 <__func__.0+0x2d0>
    80015456:	bfd9                	j	8001542c <load_page_fault_3+0xbe>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80015458:	0001d517          	auipc	a0,0x1d
    8001545c:	2a850513          	addi	a0,a0,680 # 80032700 <__func__.0+0x318>
    80015460:	0641a0ef          	jal	8002f4c4 <printf>
    80015464:	02900513          	li	a0,41
    80015468:	54b180ef          	jal	8002e1b2 <putchar>
    8001546c:	b75d                	j	80015412 <load_page_fault_3+0xa4>

000000008001546e <load_page_fault_4>:


bool load_page_fault_4(){
    8001546e:	1101                	addi	sp,sp,-32

    TEST_START();
    80015470:	0001b597          	auipc	a1,0x1b
    80015474:	7b858593          	addi	a1,a1,1976 # 80030c28 <__func__.18>
    80015478:	0001d517          	auipc	a0,0x1d
    8001547c:	25050513          	addi	a0,a0,592 # 800326c8 <__func__.0+0x2e0>
bool load_page_fault_4(){
    80015480:	ec06                	sd	ra,24(sp)
    80015482:	e822                	sd	s0,16(sp)
    80015484:	e426                	sd	s1,8(sp)
    TEST_START();
    80015486:	03e1a0ef          	jal	8002f4c4 <printf>
    8001548a:	4529                	li	a0,10
    8001548c:	527180ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS); 
    80015490:	450d                	li	a0,3
    80015492:	a83eb0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80015496:	956eb0ef          	jal	800005ec <hspt_init>
    hpt_init();
    8001549a:	d36eb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001549e:	aeaeb0ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800154a2:	4509                	li	a0,2
    800154a4:	a71eb0ef          	jal	80000f14 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    800154a8:	971eb0ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    800154ac:	400197b7          	lui	a5,0x40019
    800154b0:	078a                	slli	a5,a5,0x2
    800154b2:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    lb(addr);
    TEST_ASSERT("vs mode lb when pte.v=0 leads to LPF",
    800154b6:	08c00593          	li	a1,140
    800154ba:	00022617          	auipc	a2,0x22
    800154be:	49e60613          	addi	a2,a2,1182 # 80037958 <__func__.0+0x5570>
    800154c2:	0001d517          	auipc	a0,0x1d
    800154c6:	21e50513          	addi	a0,a0,542 # 800326e0 <__func__.0+0x2f8>
    800154ca:	7fb190ef          	jal	8002f4c4 <printf>
    800154ce:	00047797          	auipc	a5,0x47
    800154d2:	b437c783          	lbu	a5,-1213(a5) # 8005c011 <excpt+0x1>
    800154d6:	00047497          	auipc	s1,0x47
    800154da:	b3a48493          	addi	s1,s1,-1222 # 8005c010 <excpt>
    800154de:	0001d597          	auipc	a1,0x1d
    800154e2:	1da58593          	addi	a1,a1,474 # 800326b8 <__func__.0+0x2d0>
    800154e6:	cf89                	beqz	a5,80015500 <load_page_fault_4+0x92>
    800154e8:	6498                	ld	a4,8(s1)
    800154ea:	47b5                	li	a5,13
    800154ec:	0001d597          	auipc	a1,0x1d
    800154f0:	1bc58593          	addi	a1,a1,444 # 800326a8 <__func__.0+0x2c0>
    800154f4:	00f70663          	beq	a4,a5,80015500 <load_page_fault_4+0x92>
    800154f8:	0001d597          	auipc	a1,0x1d
    800154fc:	1c058593          	addi	a1,a1,448 # 800326b8 <__func__.0+0x2d0>
    80015500:	0001d517          	auipc	a0,0x1d
    80015504:	1f850513          	addi	a0,a0,504 # 800326f8 <__func__.0+0x310>
    80015508:	7bd190ef          	jal	8002f4c4 <printf>
    8001550c:	00047797          	auipc	a5,0x47
    80015510:	b057c783          	lbu	a5,-1275(a5) # 8005c011 <excpt+0x1>
    80015514:	c789                	beqz	a5,8001551e <load_page_fault_4+0xb0>
    80015516:	6498                	ld	a4,8(s1)
    80015518:	47b5                	li	a5,13
    8001551a:	00f70c63          	beq	a4,a5,80015532 <load_page_fault_4+0xc4>
    8001551e:	0001d517          	auipc	a0,0x1d
    80015522:	1e250513          	addi	a0,a0,482 # 80032700 <__func__.0+0x318>
    80015526:	79f190ef          	jal	8002f4c4 <printf>
    8001552a:	02900513          	li	a0,41
    8001552e:	485180ef          	jal	8002e1b2 <putchar>
    80015532:	4529                	li	a0,10
    80015534:	47f180ef          	jal	8002e1b2 <putchar>
    80015538:	00047797          	auipc	a5,0x47
    8001553c:	ad97c783          	lbu	a5,-1319(a5) # 8005c011 <excpt+0x1>
    80015540:	4401                	li	s0,0
    80015542:	c789                	beqz	a5,8001554c <load_page_fault_4+0xde>
    80015544:	6480                	ld	s0,8(s1)
    80015546:	144d                	addi	s0,s0,-13
    80015548:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LPF
    );


    //执行ld令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    8001554c:	8cdeb0ef          	jal	80000e18 <test_setup_except_function>
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015550:	000807b7          	lui	a5,0x80
    80015554:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80015558:	001007b7          	lui	a5,0x100
    8001555c:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80015560:	07b2                	slli	a5,a5,0xc
    80015562:	0007b783          	ld	a5,0(a5)
    ld(addr);   
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80015566:	08c00593          	li	a1,140
    8001556a:	00022617          	auipc	a2,0x22
    8001556e:	41660613          	addi	a2,a2,1046 # 80037980 <__func__.0+0x5598>
    80015572:	0001d517          	auipc	a0,0x1d
    80015576:	16e50513          	addi	a0,a0,366 # 800326e0 <__func__.0+0x2f8>
    8001557a:	74b190ef          	jal	8002f4c4 <printf>
    8001557e:	00047797          	auipc	a5,0x47
    80015582:	a937c783          	lbu	a5,-1389(a5) # 8005c011 <excpt+0x1>
    80015586:	0001d597          	auipc	a1,0x1d
    8001558a:	13258593          	addi	a1,a1,306 # 800326b8 <__func__.0+0x2d0>
    8001558e:	cf89                	beqz	a5,800155a8 <load_page_fault_4+0x13a>
    80015590:	6498                	ld	a4,8(s1)
    80015592:	47b5                	li	a5,13
    80015594:	0001d597          	auipc	a1,0x1d
    80015598:	11458593          	addi	a1,a1,276 # 800326a8 <__func__.0+0x2c0>
    8001559c:	00f70663          	beq	a4,a5,800155a8 <load_page_fault_4+0x13a>
    800155a0:	0001d597          	auipc	a1,0x1d
    800155a4:	11858593          	addi	a1,a1,280 # 800326b8 <__func__.0+0x2d0>
    800155a8:	0001d517          	auipc	a0,0x1d
    800155ac:	15050513          	addi	a0,a0,336 # 800326f8 <__func__.0+0x310>
    800155b0:	715190ef          	jal	8002f4c4 <printf>
    800155b4:	00047797          	auipc	a5,0x47
    800155b8:	a5d7c783          	lbu	a5,-1443(a5) # 8005c011 <excpt+0x1>
    800155bc:	c789                	beqz	a5,800155c6 <load_page_fault_4+0x158>
    800155be:	6498                	ld	a4,8(s1)
    800155c0:	47b5                	li	a5,13
    800155c2:	00f70c63          	beq	a4,a5,800155da <load_page_fault_4+0x16c>
    800155c6:	0001d517          	auipc	a0,0x1d
    800155ca:	13a50513          	addi	a0,a0,314 # 80032700 <__func__.0+0x318>
    800155ce:	6f7190ef          	jal	8002f4c4 <printf>
    800155d2:	02900513          	li	a0,41
    800155d6:	3dd180ef          	jal	8002e1b2 <putchar>
    800155da:	4529                	li	a0,10
    800155dc:	3d7180ef          	jal	8002e1b2 <putchar>
    800155e0:	c801                	beqz	s0,800155f0 <load_page_fault_4+0x182>
    800155e2:	00047797          	auipc	a5,0x47
    800155e6:	a2f7c783          	lbu	a5,-1489(a5) # 8005c011 <excpt+0x1>
    800155ea:	4401                	li	s0,0
    800155ec:	0c079e63          	bnez	a5,800156c8 <load_page_fault_4+0x25a>
        excpt.cause == CAUSE_LPF
    );

    //执行lh指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_VS);
    800155f0:	4509                	li	a0,2
    800155f2:	923eb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800155f6:	823eb0ef          	jal	80000e18 <test_setup_except_function>
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800155fa:	000807b7          	lui	a5,0x80
    800155fe:	1007a073          	csrs	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80015602:	001007b7          	lui	a5,0x100
    80015606:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80015608:	07b2                	slli	a5,a5,0xc
    8001560a:	00079783          	lh	a5,0(a5)
    lh(addr);
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001560e:	08c00593          	li	a1,140
    80015612:	00022617          	auipc	a2,0x22
    80015616:	3a660613          	addi	a2,a2,934 # 800379b8 <__func__.0+0x55d0>
    8001561a:	0001d517          	auipc	a0,0x1d
    8001561e:	0c650513          	addi	a0,a0,198 # 800326e0 <__func__.0+0x2f8>
    80015622:	6a3190ef          	jal	8002f4c4 <printf>
    80015626:	00047797          	auipc	a5,0x47
    8001562a:	9eb7c783          	lbu	a5,-1557(a5) # 8005c011 <excpt+0x1>
    8001562e:	0001d597          	auipc	a1,0x1d
    80015632:	08a58593          	addi	a1,a1,138 # 800326b8 <__func__.0+0x2d0>
    80015636:	cf89                	beqz	a5,80015650 <load_page_fault_4+0x1e2>
    80015638:	6498                	ld	a4,8(s1)
    8001563a:	47b5                	li	a5,13
    8001563c:	0001d597          	auipc	a1,0x1d
    80015640:	06c58593          	addi	a1,a1,108 # 800326a8 <__func__.0+0x2c0>
    80015644:	00f70663          	beq	a4,a5,80015650 <load_page_fault_4+0x1e2>
    80015648:	0001d597          	auipc	a1,0x1d
    8001564c:	07058593          	addi	a1,a1,112 # 800326b8 <__func__.0+0x2d0>
    80015650:	0001d517          	auipc	a0,0x1d
    80015654:	0a850513          	addi	a0,a0,168 # 800326f8 <__func__.0+0x310>
    80015658:	66d190ef          	jal	8002f4c4 <printf>
    8001565c:	00047797          	auipc	a5,0x47
    80015660:	9b57c783          	lbu	a5,-1611(a5) # 8005c011 <excpt+0x1>
    80015664:	c789                	beqz	a5,8001566e <load_page_fault_4+0x200>
    80015666:	6498                	ld	a4,8(s1)
    80015668:	47b5                	li	a5,13
    8001566a:	00f70c63          	beq	a4,a5,80015682 <load_page_fault_4+0x214>
    8001566e:	0001d517          	auipc	a0,0x1d
    80015672:	09250513          	addi	a0,a0,146 # 80032700 <__func__.0+0x318>
    80015676:	64f190ef          	jal	8002f4c4 <printf>
    8001567a:	02900513          	li	a0,41
    8001567e:	335180ef          	jal	8002e1b2 <putchar>
    80015682:	4529                	li	a0,10
    80015684:	32f180ef          	jal	8002e1b2 <putchar>
    80015688:	c411                	beqz	s0,80015694 <load_page_fault_4+0x226>
    8001568a:	00047417          	auipc	s0,0x47
    8001568e:	98744403          	lbu	s0,-1657(s0) # 8005c011 <excpt+0x1>
    80015692:	e021                	bnez	s0,800156d2 <load_page_fault_4+0x264>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015694:	000807b7          	lui	a5,0x80
    80015698:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001569c:	4401                	li	s0,0

    TEST_END();
    8001569e:	0001d597          	auipc	a1,0x1d
    800156a2:	01a58593          	addi	a1,a1,26 # 800326b8 <__func__.0+0x2d0>
    800156a6:	0001d517          	auipc	a0,0x1d
    800156aa:	0ba50513          	addi	a0,a0,186 # 80032760 <__func__.0+0x378>
    800156ae:	617190ef          	jal	8002f4c4 <printf>
    800156b2:	4511                	li	a0,4
    800156b4:	861eb0ef          	jal	80000f14 <goto_priv>
    800156b8:	8beec0ef          	jal	80001776 <reset_state>

}
    800156bc:	60e2                	ld	ra,24(sp)
    800156be:	8522                	mv	a0,s0
    800156c0:	6442                	ld	s0,16(sp)
    800156c2:	64a2                	ld	s1,8(sp)
    800156c4:	6105                	addi	sp,sp,32
    800156c6:	8082                	ret
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800156c8:	6480                	ld	s0,8(s1)
    800156ca:	144d                	addi	s0,s0,-13
    800156cc:	00143413          	seqz	s0,s0
    800156d0:	b705                	j	800155f0 <load_page_fault_4+0x182>
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800156d2:	6498                	ld	a4,8(s1)
    800156d4:	47b5                	li	a5,13
    800156d6:	faf71fe3          	bne	a4,a5,80015694 <load_page_fault_4+0x226>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800156da:	000807b7          	lui	a5,0x80
    800156de:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800156e2:	0001d597          	auipc	a1,0x1d
    800156e6:	fc658593          	addi	a1,a1,-58 # 800326a8 <__func__.0+0x2c0>
    800156ea:	bf75                	j	800156a6 <load_page_fault_4+0x238>

00000000800156ec <load_page_fault_5>:

bool load_page_fault_5(){
    800156ec:	1101                	addi	sp,sp,-32

    TEST_START();
    800156ee:	0001b597          	auipc	a1,0x1b
    800156f2:	55258593          	addi	a1,a1,1362 # 80030c40 <__func__.17>
    800156f6:	0001d517          	auipc	a0,0x1d
    800156fa:	fd250513          	addi	a0,a0,-46 # 800326c8 <__func__.0+0x2e0>
bool load_page_fault_5(){
    800156fe:	ec06                	sd	ra,24(sp)
    80015700:	e822                	sd	s0,16(sp)
    80015702:	e426                	sd	s1,8(sp)
    TEST_START();
    80015704:	5c1190ef          	jal	8002f4c4 <printf>
    80015708:	4529                	li	a0,10
    8001570a:	2a9180ef          	jal	8002e1b2 <putchar>


    goto_priv(PRIV_HS);
    8001570e:	450d                	li	a0,3
    80015710:	805eb0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80015714:	ed9ea0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80015718:	ab8eb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001571c:	86ceb0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    80015720:	4511                	li	a0,4
    80015722:	ff2eb0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80015726:	000407b7          	lui	a5,0x40
    8001572a:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    8001572e:	4509                	li	a0,2
    80015730:	fe4eb0ef          	jal	80000f14 <goto_priv>

    //执行lbu指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015734:	ee4eb0ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80015738:	000807b7          	lui	a5,0x80
    8001573c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001573e:	07b6                	slli	a5,a5,0xd
    80015740:	0007c783          	lbu	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    lbu(addr);
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80015744:	08c00593          	li	a1,140
    80015748:	00022617          	auipc	a2,0x22
    8001574c:	2b860613          	addi	a2,a2,696 # 80037a00 <__func__.0+0x5618>
    80015750:	0001d517          	auipc	a0,0x1d
    80015754:	f9050513          	addi	a0,a0,-112 # 800326e0 <__func__.0+0x2f8>
    80015758:	56d190ef          	jal	8002f4c4 <printf>
    8001575c:	00047797          	auipc	a5,0x47
    80015760:	8b57c783          	lbu	a5,-1867(a5) # 8005c011 <excpt+0x1>
    80015764:	00047497          	auipc	s1,0x47
    80015768:	8ac48493          	addi	s1,s1,-1876 # 8005c010 <excpt>
    8001576c:	0001d597          	auipc	a1,0x1d
    80015770:	f4c58593          	addi	a1,a1,-180 # 800326b8 <__func__.0+0x2d0>
    80015774:	cf89                	beqz	a5,8001578e <load_page_fault_5+0xa2>
    80015776:	6498                	ld	a4,8(s1)
    80015778:	47b5                	li	a5,13
    8001577a:	0001d597          	auipc	a1,0x1d
    8001577e:	f2e58593          	addi	a1,a1,-210 # 800326a8 <__func__.0+0x2c0>
    80015782:	00f70663          	beq	a4,a5,8001578e <load_page_fault_5+0xa2>
    80015786:	0001d597          	auipc	a1,0x1d
    8001578a:	f3258593          	addi	a1,a1,-206 # 800326b8 <__func__.0+0x2d0>
    8001578e:	0001d517          	auipc	a0,0x1d
    80015792:	f6a50513          	addi	a0,a0,-150 # 800326f8 <__func__.0+0x310>
    80015796:	52f190ef          	jal	8002f4c4 <printf>
    8001579a:	00047797          	auipc	a5,0x47
    8001579e:	8777c783          	lbu	a5,-1929(a5) # 8005c011 <excpt+0x1>
    800157a2:	c789                	beqz	a5,800157ac <load_page_fault_5+0xc0>
    800157a4:	6498                	ld	a4,8(s1)
    800157a6:	47b5                	li	a5,13
    800157a8:	00f70c63          	beq	a4,a5,800157c0 <load_page_fault_5+0xd4>
    800157ac:	0001d517          	auipc	a0,0x1d
    800157b0:	f5450513          	addi	a0,a0,-172 # 80032700 <__func__.0+0x318>
    800157b4:	511190ef          	jal	8002f4c4 <printf>
    800157b8:	02900513          	li	a0,41
    800157bc:	1f7180ef          	jal	8002e1b2 <putchar>
    800157c0:	4529                	li	a0,10
    800157c2:	1f1180ef          	jal	8002e1b2 <putchar>
    800157c6:	00047417          	auipc	s0,0x47
    800157ca:	84b44403          	lbu	s0,-1973(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800157ce:	0001d597          	auipc	a1,0x1d
    800157d2:	eea58593          	addi	a1,a1,-278 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    800157d6:	cc11                	beqz	s0,800157f2 <load_page_fault_5+0x106>
    800157d8:	6498                	ld	a4,8(s1)
    800157da:	47b5                	li	a5,13
    TEST_END();
    800157dc:	0001d597          	auipc	a1,0x1d
    800157e0:	ecc58593          	addi	a1,a1,-308 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    800157e4:	00f70763          	beq	a4,a5,800157f2 <load_page_fault_5+0x106>
    800157e8:	4401                	li	s0,0
    TEST_END();
    800157ea:	0001d597          	auipc	a1,0x1d
    800157ee:	ece58593          	addi	a1,a1,-306 # 800326b8 <__func__.0+0x2d0>
    800157f2:	0001d517          	auipc	a0,0x1d
    800157f6:	f6e50513          	addi	a0,a0,-146 # 80032760 <__func__.0+0x378>
    800157fa:	4cb190ef          	jal	8002f4c4 <printf>
    800157fe:	4511                	li	a0,4
    80015800:	f14eb0ef          	jal	80000f14 <goto_priv>
    80015804:	f73eb0ef          	jal	80001776 <reset_state>
}
    80015808:	60e2                	ld	ra,24(sp)
    8001580a:	8522                	mv	a0,s0
    8001580c:	6442                	ld	s0,16(sp)
    8001580e:	64a2                	ld	s1,8(sp)
    80015810:	6105                	addi	sp,sp,32
    80015812:	8082                	ret

0000000080015814 <load_page_fault_6>:

bool load_page_fault_6(){
    80015814:	1141                	addi	sp,sp,-16

    TEST_START();
    80015816:	0001b597          	auipc	a1,0x1b
    8001581a:	44258593          	addi	a1,a1,1090 # 80030c58 <__func__.16>
    8001581e:	0001d517          	auipc	a0,0x1d
    80015822:	eaa50513          	addi	a0,a0,-342 # 800326c8 <__func__.0+0x2e0>
bool load_page_fault_6(){
    80015826:	e406                	sd	ra,8(sp)
    80015828:	e022                	sd	s0,0(sp)
    TEST_START();
    8001582a:	49b190ef          	jal	8002f4c4 <printf>
    8001582e:	4529                	li	a0,10
    80015830:	183180ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80015834:	450d                	li	a0,3
    80015836:	edeeb0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001583a:	db3ea0ef          	jal	800005ec <hspt_init>
    hpt_init();
    8001583e:	992eb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80015842:	f47ea0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    80015846:	4511                	li	a0,4
    80015848:	ecceb0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001584c:	000407b7          	lui	a5,0x40
    80015850:	2007a073          	csrs	vsstatus,a5

    //执行lbu指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_VS);
    80015854:	4509                	li	a0,2
    80015856:	ebeeb0ef          	jal	80000f14 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    8001585a:	dbeeb0ef          	jal	80000e18 <test_setup_except_function>
    8001585e:	000807b7          	lui	a5,0x80
    80015862:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015864:	07b6                	slli	a5,a5,0xd
    80015866:	0007c783          	lbu	a5,0(a5)
    lbu(addr);

    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    8001586a:	08c00593          	li	a1,140
    8001586e:	00022617          	auipc	a2,0x22
    80015872:	1d260613          	addi	a2,a2,466 # 80037a40 <__func__.0+0x5658>
    80015876:	0001d517          	auipc	a0,0x1d
    8001587a:	e6a50513          	addi	a0,a0,-406 # 800326e0 <__func__.0+0x2f8>
    8001587e:	447190ef          	jal	8002f4c4 <printf>
    80015882:	00046797          	auipc	a5,0x46
    80015886:	78f7c783          	lbu	a5,1935(a5) # 8005c011 <excpt+0x1>
    8001588a:	0001d597          	auipc	a1,0x1d
    8001588e:	e1e58593          	addi	a1,a1,-482 # 800326a8 <__func__.0+0x2c0>
    80015892:	c789                	beqz	a5,8001589c <load_page_fault_6+0x88>
    80015894:	0001d597          	auipc	a1,0x1d
    80015898:	e2458593          	addi	a1,a1,-476 # 800326b8 <__func__.0+0x2d0>
    8001589c:	0001d517          	auipc	a0,0x1d
    800158a0:	e5c50513          	addi	a0,a0,-420 # 800326f8 <__func__.0+0x310>
    800158a4:	421190ef          	jal	8002f4c4 <printf>
    800158a8:	00046797          	auipc	a5,0x46
    800158ac:	7697c783          	lbu	a5,1897(a5) # 8005c011 <excpt+0x1>
    800158b0:	e7a1                	bnez	a5,800158f8 <load_page_fault_6+0xe4>
    800158b2:	4529                	li	a0,10
    800158b4:	0ff180ef          	jal	8002e1b2 <putchar>
    800158b8:	00046797          	auipc	a5,0x46
    800158bc:	7597c783          	lbu	a5,1881(a5) # 8005c011 <excpt+0x1>
    800158c0:	e795                	bnez	a5,800158ec <load_page_fault_6+0xd8>
    800158c2:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    800158c4:	0001d597          	auipc	a1,0x1d
    800158c8:	de458593          	addi	a1,a1,-540 # 800326a8 <__func__.0+0x2c0>
    800158cc:	0001d517          	auipc	a0,0x1d
    800158d0:	e9450513          	addi	a0,a0,-364 # 80032760 <__func__.0+0x378>
    800158d4:	3f1190ef          	jal	8002f4c4 <printf>
    800158d8:	4511                	li	a0,4
    800158da:	e3aeb0ef          	jal	80000f14 <goto_priv>
    800158de:	e99eb0ef          	jal	80001776 <reset_state>
}
    800158e2:	60a2                	ld	ra,8(sp)
    800158e4:	8522                	mv	a0,s0
    800158e6:	6402                	ld	s0,0(sp)
    800158e8:	0141                	addi	sp,sp,16
    800158ea:	8082                	ret
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    800158ec:	4401                	li	s0,0
    TEST_END();
    800158ee:	0001d597          	auipc	a1,0x1d
    800158f2:	dca58593          	addi	a1,a1,-566 # 800326b8 <__func__.0+0x2d0>
    800158f6:	bfd9                	j	800158cc <load_page_fault_6+0xb8>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    800158f8:	0001d517          	auipc	a0,0x1d
    800158fc:	e0850513          	addi	a0,a0,-504 # 80032700 <__func__.0+0x318>
    80015900:	3c5190ef          	jal	8002f4c4 <printf>
    80015904:	02900513          	li	a0,41
    80015908:	0ab180ef          	jal	8002e1b2 <putchar>
    8001590c:	b75d                	j	800158b2 <load_page_fault_6+0x9e>

000000008001590e <load_page_fault_7>:


bool load_page_fault_7(){
    8001590e:	1101                	addi	sp,sp,-32

    TEST_START();
    80015910:	0001b597          	auipc	a1,0x1b
    80015914:	36058593          	addi	a1,a1,864 # 80030c70 <__func__.15>
    80015918:	0001d517          	auipc	a0,0x1d
    8001591c:	db050513          	addi	a0,a0,-592 # 800326c8 <__func__.0+0x2e0>
bool load_page_fault_7(){
    80015920:	ec06                	sd	ra,24(sp)
    80015922:	e822                	sd	s0,16(sp)
    80015924:	e426                	sd	s1,8(sp)
    TEST_START();
    80015926:	39f190ef          	jal	8002f4c4 <printf>
    8001592a:	4529                	li	a0,10
    8001592c:	087180ef          	jal	8002e1b2 <putchar>


    goto_priv(PRIV_HS);
    80015930:	450d                	li	a0,3
    80015932:	de2eb0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80015936:	cb7ea0ef          	jal	800005ec <hspt_init>
    hpt_init();
    8001593a:	896eb0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001593e:	e4bea0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    80015942:	4511                	li	a0,4
    80015944:	dd0eb0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80015948:	000407b7          	lui	a5,0x40
    8001594c:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80015950:	450d                	li	a0,3
    80015952:	dc2eb0ef          	jal	80000f14 <goto_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015956:	cc2eb0ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001595a:	000807b7          	lui	a5,0x80
    8001595e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015960:	07b6                	slli	a5,a5,0xd
    80015962:	0007b783          	ld	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    ld(addr);
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80015966:	08c00593          	li	a1,140
    8001596a:	00022617          	auipc	a2,0x22
    8001596e:	10e60613          	addi	a2,a2,270 # 80037a78 <__func__.0+0x5690>
    80015972:	0001d517          	auipc	a0,0x1d
    80015976:	d6e50513          	addi	a0,a0,-658 # 800326e0 <__func__.0+0x2f8>
    8001597a:	34b190ef          	jal	8002f4c4 <printf>
    8001597e:	00046797          	auipc	a5,0x46
    80015982:	6937c783          	lbu	a5,1683(a5) # 8005c011 <excpt+0x1>
    80015986:	00046497          	auipc	s1,0x46
    8001598a:	68a48493          	addi	s1,s1,1674 # 8005c010 <excpt>
    8001598e:	0001d597          	auipc	a1,0x1d
    80015992:	d2a58593          	addi	a1,a1,-726 # 800326b8 <__func__.0+0x2d0>
    80015996:	cf89                	beqz	a5,800159b0 <load_page_fault_7+0xa2>
    80015998:	6498                	ld	a4,8(s1)
    8001599a:	47b5                	li	a5,13
    8001599c:	0001d597          	auipc	a1,0x1d
    800159a0:	d0c58593          	addi	a1,a1,-756 # 800326a8 <__func__.0+0x2c0>
    800159a4:	00f70663          	beq	a4,a5,800159b0 <load_page_fault_7+0xa2>
    800159a8:	0001d597          	auipc	a1,0x1d
    800159ac:	d1058593          	addi	a1,a1,-752 # 800326b8 <__func__.0+0x2d0>
    800159b0:	0001d517          	auipc	a0,0x1d
    800159b4:	d4850513          	addi	a0,a0,-696 # 800326f8 <__func__.0+0x310>
    800159b8:	30d190ef          	jal	8002f4c4 <printf>
    800159bc:	00046797          	auipc	a5,0x46
    800159c0:	6557c783          	lbu	a5,1621(a5) # 8005c011 <excpt+0x1>
    800159c4:	c789                	beqz	a5,800159ce <load_page_fault_7+0xc0>
    800159c6:	6498                	ld	a4,8(s1)
    800159c8:	47b5                	li	a5,13
    800159ca:	00f70c63          	beq	a4,a5,800159e2 <load_page_fault_7+0xd4>
    800159ce:	0001d517          	auipc	a0,0x1d
    800159d2:	d3250513          	addi	a0,a0,-718 # 80032700 <__func__.0+0x318>
    800159d6:	2ef190ef          	jal	8002f4c4 <printf>
    800159da:	02900513          	li	a0,41
    800159de:	7d4180ef          	jal	8002e1b2 <putchar>
    800159e2:	4529                	li	a0,10
    800159e4:	7ce180ef          	jal	8002e1b2 <putchar>
    800159e8:	00046417          	auipc	s0,0x46
    800159ec:	62944403          	lbu	s0,1577(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800159f0:	0001d597          	auipc	a1,0x1d
    800159f4:	cc858593          	addi	a1,a1,-824 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    800159f8:	cc11                	beqz	s0,80015a14 <load_page_fault_7+0x106>
    800159fa:	6498                	ld	a4,8(s1)
    800159fc:	47b5                	li	a5,13
    TEST_END();
    800159fe:	0001d597          	auipc	a1,0x1d
    80015a02:	caa58593          	addi	a1,a1,-854 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80015a06:	00f70763          	beq	a4,a5,80015a14 <load_page_fault_7+0x106>
    80015a0a:	4401                	li	s0,0
    TEST_END();
    80015a0c:	0001d597          	auipc	a1,0x1d
    80015a10:	cac58593          	addi	a1,a1,-852 # 800326b8 <__func__.0+0x2d0>
    80015a14:	0001d517          	auipc	a0,0x1d
    80015a18:	d4c50513          	addi	a0,a0,-692 # 80032760 <__func__.0+0x378>
    80015a1c:	2a9190ef          	jal	8002f4c4 <printf>
    80015a20:	4511                	li	a0,4
    80015a22:	cf2eb0ef          	jal	80000f14 <goto_priv>
    80015a26:	d51eb0ef          	jal	80001776 <reset_state>
}
    80015a2a:	60e2                	ld	ra,24(sp)
    80015a2c:	8522                	mv	a0,s0
    80015a2e:	6442                	ld	s0,16(sp)
    80015a30:	64a2                	ld	s1,8(sp)
    80015a32:	6105                	addi	sp,sp,32
    80015a34:	8082                	ret

0000000080015a36 <load_page_fault_8>:

bool load_page_fault_8(){
    80015a36:	1141                	addi	sp,sp,-16

    TEST_START();
    80015a38:	0001b597          	auipc	a1,0x1b
    80015a3c:	25058593          	addi	a1,a1,592 # 80030c88 <__func__.14>
    80015a40:	0001d517          	auipc	a0,0x1d
    80015a44:	c8850513          	addi	a0,a0,-888 # 800326c8 <__func__.0+0x2e0>
bool load_page_fault_8(){
    80015a48:	e406                	sd	ra,8(sp)
    80015a4a:	e022                	sd	s0,0(sp)
    TEST_START();
    80015a4c:	279190ef          	jal	8002f4c4 <printf>
    80015a50:	4529                	li	a0,10
    80015a52:	760180ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80015a56:	450d                	li	a0,3
    80015a58:	cbceb0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80015a5c:	b91ea0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80015a60:	f71ea0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80015a64:	d25ea0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    80015a68:	4511                	li	a0,4
    80015a6a:	caaeb0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80015a6e:	000407b7          	lui	a5,0x40
    80015a72:	3007a073          	csrs	mstatus,a5

    //执行ld指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80015a76:	450d                	li	a0,3
    80015a78:	c9ceb0ef          	jal	80000f14 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80015a7c:	b9ceb0ef          	jal	80000e18 <test_setup_except_function>
    80015a80:	000807b7          	lui	a5,0x80
    80015a84:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015a86:	07b6                	slli	a5,a5,0xd
    80015a88:	0007b783          	ld	a5,0(a5)
    ld(addr);

    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015a8c:	08c00593          	li	a1,140
    80015a90:	00022617          	auipc	a2,0x22
    80015a94:	02060613          	addi	a2,a2,32 # 80037ab0 <__func__.0+0x56c8>
    80015a98:	0001d517          	auipc	a0,0x1d
    80015a9c:	c4850513          	addi	a0,a0,-952 # 800326e0 <__func__.0+0x2f8>
    80015aa0:	225190ef          	jal	8002f4c4 <printf>
    80015aa4:	00046797          	auipc	a5,0x46
    80015aa8:	56d7c783          	lbu	a5,1389(a5) # 8005c011 <excpt+0x1>
    80015aac:	0001d597          	auipc	a1,0x1d
    80015ab0:	bfc58593          	addi	a1,a1,-1028 # 800326a8 <__func__.0+0x2c0>
    80015ab4:	c789                	beqz	a5,80015abe <load_page_fault_8+0x88>
    80015ab6:	0001d597          	auipc	a1,0x1d
    80015aba:	c0258593          	addi	a1,a1,-1022 # 800326b8 <__func__.0+0x2d0>
    80015abe:	0001d517          	auipc	a0,0x1d
    80015ac2:	c3a50513          	addi	a0,a0,-966 # 800326f8 <__func__.0+0x310>
    80015ac6:	1ff190ef          	jal	8002f4c4 <printf>
    80015aca:	00046797          	auipc	a5,0x46
    80015ace:	5477c783          	lbu	a5,1351(a5) # 8005c011 <excpt+0x1>
    80015ad2:	e7a1                	bnez	a5,80015b1a <load_page_fault_8+0xe4>
    80015ad4:	4529                	li	a0,10
    80015ad6:	6dc180ef          	jal	8002e1b2 <putchar>
    80015ada:	00046797          	auipc	a5,0x46
    80015ade:	5377c783          	lbu	a5,1335(a5) # 8005c011 <excpt+0x1>
    80015ae2:	e795                	bnez	a5,80015b0e <load_page_fault_8+0xd8>
    80015ae4:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015ae6:	0001d597          	auipc	a1,0x1d
    80015aea:	bc258593          	addi	a1,a1,-1086 # 800326a8 <__func__.0+0x2c0>
    80015aee:	0001d517          	auipc	a0,0x1d
    80015af2:	c7250513          	addi	a0,a0,-910 # 80032760 <__func__.0+0x378>
    80015af6:	1cf190ef          	jal	8002f4c4 <printf>
    80015afa:	4511                	li	a0,4
    80015afc:	c18eb0ef          	jal	80000f14 <goto_priv>
    80015b00:	c77eb0ef          	jal	80001776 <reset_state>
}
    80015b04:	60a2                	ld	ra,8(sp)
    80015b06:	8522                	mv	a0,s0
    80015b08:	6402                	ld	s0,0(sp)
    80015b0a:	0141                	addi	sp,sp,16
    80015b0c:	8082                	ret
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015b0e:	4401                	li	s0,0
    TEST_END();
    80015b10:	0001d597          	auipc	a1,0x1d
    80015b14:	ba858593          	addi	a1,a1,-1112 # 800326b8 <__func__.0+0x2d0>
    80015b18:	bfd9                	j	80015aee <load_page_fault_8+0xb8>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015b1a:	0001d517          	auipc	a0,0x1d
    80015b1e:	be650513          	addi	a0,a0,-1050 # 80032700 <__func__.0+0x318>
    80015b22:	1a3190ef          	jal	8002f4c4 <printf>
    80015b26:	02900513          	li	a0,41
    80015b2a:	688180ef          	jal	8002e1b2 <putchar>
    80015b2e:	b75d                	j	80015ad4 <load_page_fault_8+0x9e>

0000000080015b30 <store_page_fault_1>:





bool store_page_fault_1(){
    80015b30:	1101                	addi	sp,sp,-32

    TEST_START();
    80015b32:	0001b597          	auipc	a1,0x1b
    80015b36:	16e58593          	addi	a1,a1,366 # 80030ca0 <__func__.13>
    80015b3a:	0001d517          	auipc	a0,0x1d
    80015b3e:	b8e50513          	addi	a0,a0,-1138 # 800326c8 <__func__.0+0x2e0>
bool store_page_fault_1(){
    80015b42:	ec06                	sd	ra,24(sp)
    80015b44:	e822                	sd	s0,16(sp)
    80015b46:	e426                	sd	s1,8(sp)
    TEST_START();
    80015b48:	17d190ef          	jal	8002f4c4 <printf>
    80015b4c:	4529                	li	a0,10
    80015b4e:	664180ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80015b52:	450d                	li	a0,3
    80015b54:	bc0eb0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80015b58:	a95ea0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80015b5c:	e75ea0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80015b60:	c29ea0ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80015b64:	450d                	li	a0,3
    80015b66:	baeeb0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015b6a:	4509                	li	a0,2
    80015b6c:	ac8eb0ef          	jal	80000e34 <set_prev_priv>

    //执行store指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80015b70:	aa8eb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80015b74:	37ab77b7          	lui	a5,0x37ab7
    80015b78:	078a                	slli	a5,a5,0x2
    80015b7a:	40019737          	lui	a4,0x40019
    80015b7e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015b82:	070a                	slli	a4,a4,0x2
    80015b84:	6ef74073          	.insn	4, 0x6ef74073

    addr = hs_page_base(VSI_GI);
    hsvd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when pte.v=0 leads to LPF",
    80015b88:	08c00593          	li	a1,140
    80015b8c:	00022617          	auipc	a2,0x22
    80015b90:	f5c60613          	addi	a2,a2,-164 # 80037ae8 <__func__.0+0x5700>
    80015b94:	0001d517          	auipc	a0,0x1d
    80015b98:	b4c50513          	addi	a0,a0,-1204 # 800326e0 <__func__.0+0x2f8>
    80015b9c:	129190ef          	jal	8002f4c4 <printf>
    80015ba0:	00046797          	auipc	a5,0x46
    80015ba4:	4717c783          	lbu	a5,1137(a5) # 8005c011 <excpt+0x1>
    80015ba8:	00046497          	auipc	s1,0x46
    80015bac:	46848493          	addi	s1,s1,1128 # 8005c010 <excpt>
    80015bb0:	0001d597          	auipc	a1,0x1d
    80015bb4:	b0858593          	addi	a1,a1,-1272 # 800326b8 <__func__.0+0x2d0>
    80015bb8:	cf89                	beqz	a5,80015bd2 <store_page_fault_1+0xa2>
    80015bba:	6498                	ld	a4,8(s1)
    80015bbc:	47bd                	li	a5,15
    80015bbe:	0001d597          	auipc	a1,0x1d
    80015bc2:	aea58593          	addi	a1,a1,-1302 # 800326a8 <__func__.0+0x2c0>
    80015bc6:	00f70663          	beq	a4,a5,80015bd2 <store_page_fault_1+0xa2>
    80015bca:	0001d597          	auipc	a1,0x1d
    80015bce:	aee58593          	addi	a1,a1,-1298 # 800326b8 <__func__.0+0x2d0>
    80015bd2:	0001d517          	auipc	a0,0x1d
    80015bd6:	b2650513          	addi	a0,a0,-1242 # 800326f8 <__func__.0+0x310>
    80015bda:	0eb190ef          	jal	8002f4c4 <printf>
    80015bde:	00046797          	auipc	a5,0x46
    80015be2:	4337c783          	lbu	a5,1075(a5) # 8005c011 <excpt+0x1>
    80015be6:	c789                	beqz	a5,80015bf0 <store_page_fault_1+0xc0>
    80015be8:	6498                	ld	a4,8(s1)
    80015bea:	47bd                	li	a5,15
    80015bec:	00f70c63          	beq	a4,a5,80015c04 <store_page_fault_1+0xd4>
    80015bf0:	0001d517          	auipc	a0,0x1d
    80015bf4:	b1050513          	addi	a0,a0,-1264 # 80032700 <__func__.0+0x318>
    80015bf8:	0cd190ef          	jal	8002f4c4 <printf>
    80015bfc:	02900513          	li	a0,41
    80015c00:	5b2180ef          	jal	8002e1b2 <putchar>
    80015c04:	4529                	li	a0,10
    80015c06:	5ac180ef          	jal	8002e1b2 <putchar>
    80015c0a:	00046797          	auipc	a5,0x46
    80015c0e:	4077c783          	lbu	a5,1031(a5) # 8005c011 <excpt+0x1>
    80015c12:	4401                	li	s0,0
    80015c14:	c789                	beqz	a5,80015c1e <store_page_fault_1+0xee>
    80015c16:	6480                	ld	s0,8(s1)
    80015c18:	1445                	addi	s0,s0,-15
    80015c1a:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行store指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80015c1e:	9faeb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80015c22:	37ab77b7          	lui	a5,0x37ab7
    80015c26:	00100737          	lui	a4,0x100
    80015c2a:	078a                	slli	a5,a5,0x2
    80015c2c:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    80015c30:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015c34:	0732                	slli	a4,a4,0xc
    80015c36:	62f74073          	.insn	4, 0x62f74073
    addr = hs_page_base(VSRX_GRWX);

    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80015c3a:	08c00593          	li	a1,140
    80015c3e:	00022617          	auipc	a2,0x22
    80015c42:	ed260613          	addi	a2,a2,-302 # 80037b10 <__func__.0+0x5728>
    80015c46:	0001d517          	auipc	a0,0x1d
    80015c4a:	a9a50513          	addi	a0,a0,-1382 # 800326e0 <__func__.0+0x2f8>
    80015c4e:	077190ef          	jal	8002f4c4 <printf>
    80015c52:	00046797          	auipc	a5,0x46
    80015c56:	3bf7c783          	lbu	a5,959(a5) # 8005c011 <excpt+0x1>
    80015c5a:	0001d597          	auipc	a1,0x1d
    80015c5e:	a5e58593          	addi	a1,a1,-1442 # 800326b8 <__func__.0+0x2d0>
    80015c62:	cf89                	beqz	a5,80015c7c <store_page_fault_1+0x14c>
    80015c64:	6498                	ld	a4,8(s1)
    80015c66:	47bd                	li	a5,15
    80015c68:	0001d597          	auipc	a1,0x1d
    80015c6c:	a4058593          	addi	a1,a1,-1472 # 800326a8 <__func__.0+0x2c0>
    80015c70:	00f70663          	beq	a4,a5,80015c7c <store_page_fault_1+0x14c>
    80015c74:	0001d597          	auipc	a1,0x1d
    80015c78:	a4458593          	addi	a1,a1,-1468 # 800326b8 <__func__.0+0x2d0>
    80015c7c:	0001d517          	auipc	a0,0x1d
    80015c80:	a7c50513          	addi	a0,a0,-1412 # 800326f8 <__func__.0+0x310>
    80015c84:	041190ef          	jal	8002f4c4 <printf>
    80015c88:	00046797          	auipc	a5,0x46
    80015c8c:	3897c783          	lbu	a5,905(a5) # 8005c011 <excpt+0x1>
    80015c90:	c789                	beqz	a5,80015c9a <store_page_fault_1+0x16a>
    80015c92:	6498                	ld	a4,8(s1)
    80015c94:	47bd                	li	a5,15
    80015c96:	00f70c63          	beq	a4,a5,80015cae <store_page_fault_1+0x17e>
    80015c9a:	0001d517          	auipc	a0,0x1d
    80015c9e:	a6650513          	addi	a0,a0,-1434 # 80032700 <__func__.0+0x318>
    80015ca2:	023190ef          	jal	8002f4c4 <printf>
    80015ca6:	02900513          	li	a0,41
    80015caa:	508180ef          	jal	8002e1b2 <putchar>
    80015cae:	4529                	li	a0,10
    80015cb0:	502180ef          	jal	8002e1b2 <putchar>
    80015cb4:	c419                	beqz	s0,80015cc2 <store_page_fault_1+0x192>
    80015cb6:	00046797          	auipc	a5,0x46
    80015cba:	35b7c783          	lbu	a5,859(a5) # 8005c011 <excpt+0x1>
    80015cbe:	4401                	li	s0,0
    80015cc0:	e7dd                	bnez	a5,80015d6e <store_page_fault_1+0x23e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行store指令时，pte.w=1
    TEST_SETUP_EXCEPT();
    80015cc2:	956eb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80015cc6:	37ab77b7          	lui	a5,0x37ab7
    80015cca:	00080737          	lui	a4,0x80
    80015cce:	078a                	slli	a5,a5,0x2
    80015cd0:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    80015cd2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015cd6:	0736                	slli	a4,a4,0xd
    80015cd8:	66f74073          	.insn	4, 0x66f74073
    addr = hs_page_base(VSRW_GURW);

    hsvh(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015cdc:	08c00593          	li	a1,140
    80015ce0:	00022617          	auipc	a2,0x22
    80015ce4:	e6060613          	addi	a2,a2,-416 # 80037b40 <__func__.0+0x5758>
    80015ce8:	0001d517          	auipc	a0,0x1d
    80015cec:	9f850513          	addi	a0,a0,-1544 # 800326e0 <__func__.0+0x2f8>
    80015cf0:	7d4190ef          	jal	8002f4c4 <printf>
    80015cf4:	00046797          	auipc	a5,0x46
    80015cf8:	31d7c783          	lbu	a5,797(a5) # 8005c011 <excpt+0x1>
    80015cfc:	0001d597          	auipc	a1,0x1d
    80015d00:	9bc58593          	addi	a1,a1,-1604 # 800326b8 <__func__.0+0x2d0>
    80015d04:	e789                	bnez	a5,80015d0e <store_page_fault_1+0x1de>
    80015d06:	0001d597          	auipc	a1,0x1d
    80015d0a:	9a258593          	addi	a1,a1,-1630 # 800326a8 <__func__.0+0x2c0>
    80015d0e:	0001d517          	auipc	a0,0x1d
    80015d12:	9ea50513          	addi	a0,a0,-1558 # 800326f8 <__func__.0+0x310>
    80015d16:	7ae190ef          	jal	8002f4c4 <printf>
    80015d1a:	00046797          	auipc	a5,0x46
    80015d1e:	2f77c783          	lbu	a5,759(a5) # 8005c011 <excpt+0x1>
    80015d22:	ebb9                	bnez	a5,80015d78 <store_page_fault_1+0x248>
    80015d24:	4529                	li	a0,10
    80015d26:	48c180ef          	jal	8002e1b2 <putchar>
    80015d2a:	c411                	beqz	s0,80015d36 <store_page_fault_1+0x206>
    80015d2c:	00046797          	auipc	a5,0x46
    80015d30:	2e57c783          	lbu	a5,741(a5) # 8005c011 <excpt+0x1>
    80015d34:	c79d                	beqz	a5,80015d62 <store_page_fault_1+0x232>
    80015d36:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80015d38:	0001d597          	auipc	a1,0x1d
    80015d3c:	98058593          	addi	a1,a1,-1664 # 800326b8 <__func__.0+0x2d0>
    80015d40:	0001d517          	auipc	a0,0x1d
    80015d44:	a2050513          	addi	a0,a0,-1504 # 80032760 <__func__.0+0x378>
    80015d48:	77c190ef          	jal	8002f4c4 <printf>
    80015d4c:	4511                	li	a0,4
    80015d4e:	9c6eb0ef          	jal	80000f14 <goto_priv>
    80015d52:	a25eb0ef          	jal	80001776 <reset_state>
}
    80015d56:	60e2                	ld	ra,24(sp)
    80015d58:	8522                	mv	a0,s0
    80015d5a:	6442                	ld	s0,16(sp)
    80015d5c:	64a2                	ld	s1,8(sp)
    80015d5e:	6105                	addi	sp,sp,32
    80015d60:	8082                	ret
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015d62:	4405                	li	s0,1
    TEST_END();
    80015d64:	0001d597          	auipc	a1,0x1d
    80015d68:	94458593          	addi	a1,a1,-1724 # 800326a8 <__func__.0+0x2c0>
    80015d6c:	bfd1                	j	80015d40 <store_page_fault_1+0x210>
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80015d6e:	6480                	ld	s0,8(s1)
    80015d70:	1445                	addi	s0,s0,-15
    80015d72:	00143413          	seqz	s0,s0
    80015d76:	b7b1                	j	80015cc2 <store_page_fault_1+0x192>
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015d78:	0001d517          	auipc	a0,0x1d
    80015d7c:	98850513          	addi	a0,a0,-1656 # 80032700 <__func__.0+0x318>
    80015d80:	744190ef          	jal	8002f4c4 <printf>
    80015d84:	02900513          	li	a0,41
    80015d88:	42a180ef          	jal	8002e1b2 <putchar>
    80015d8c:	bf61                	j	80015d24 <store_page_fault_1+0x1f4>

0000000080015d8e <store_page_fault_2>:

bool store_page_fault_2(){
    80015d8e:	1101                	addi	sp,sp,-32

    TEST_START();
    80015d90:	0001b597          	auipc	a1,0x1b
    80015d94:	f2858593          	addi	a1,a1,-216 # 80030cb8 <__func__.12>
    80015d98:	0001d517          	auipc	a0,0x1d
    80015d9c:	93050513          	addi	a0,a0,-1744 # 800326c8 <__func__.0+0x2e0>
bool store_page_fault_2(){
    80015da0:	ec06                	sd	ra,24(sp)
    80015da2:	e822                	sd	s0,16(sp)
    80015da4:	e426                	sd	s1,8(sp)
    TEST_START();
    80015da6:	71e190ef          	jal	8002f4c4 <printf>
    80015daa:	4529                	li	a0,10
    80015dac:	406180ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80015db0:	450d                	li	a0,3
    80015db2:	962eb0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80015db6:	837ea0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80015dba:	c17ea0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80015dbe:	9cbea0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    80015dc2:	4511                	li	a0,4
    80015dc4:	950eb0ef          	jal	80000f14 <goto_priv>
    print_page_table_type();    //看当前页表类型是sv48还是sv39
    80015dc8:	819ea0ef          	jal	800005e0 <print_page_table_type>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80015dcc:	000407b7          	lui	a5,0x40
    80015dd0:	2007b073          	csrc	vsstatus,a5
    goto_priv(PRIV_HS);
    80015dd4:	450d                	li	a0,3
    80015dd6:	93eeb0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015dda:	4509                	li	a0,2
    80015ddc:	858eb0ef          	jal	80000e34 <set_prev_priv>
    //执行hsvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015de0:	838eb0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80015de4:	37ab77b7          	lui	a5,0x37ab7
    80015de8:	00080737          	lui	a4,0x80
    80015dec:	078a                	slli	a5,a5,0x2
    80015dee:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80015df0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015df4:	0736                	slli	a4,a4,0xd
    80015df6:	6ef74073          	.insn	4, 0x6ef74073
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    hsvd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015dfa:	08c00593          	li	a1,140
    80015dfe:	00022617          	auipc	a2,0x22
    80015e02:	d6a60613          	addi	a2,a2,-662 # 80037b68 <__func__.0+0x5780>
    80015e06:	0001d517          	auipc	a0,0x1d
    80015e0a:	8da50513          	addi	a0,a0,-1830 # 800326e0 <__func__.0+0x2f8>
    80015e0e:	6b6190ef          	jal	8002f4c4 <printf>
    80015e12:	00046797          	auipc	a5,0x46
    80015e16:	1ff7c783          	lbu	a5,511(a5) # 8005c011 <excpt+0x1>
    80015e1a:	00046497          	auipc	s1,0x46
    80015e1e:	1f648493          	addi	s1,s1,502 # 8005c010 <excpt>
    80015e22:	0001d597          	auipc	a1,0x1d
    80015e26:	89658593          	addi	a1,a1,-1898 # 800326b8 <__func__.0+0x2d0>
    80015e2a:	cf89                	beqz	a5,80015e44 <store_page_fault_2+0xb6>
    80015e2c:	6498                	ld	a4,8(s1)
    80015e2e:	47bd                	li	a5,15
    80015e30:	0001d597          	auipc	a1,0x1d
    80015e34:	87858593          	addi	a1,a1,-1928 # 800326a8 <__func__.0+0x2c0>
    80015e38:	00f70663          	beq	a4,a5,80015e44 <store_page_fault_2+0xb6>
    80015e3c:	0001d597          	auipc	a1,0x1d
    80015e40:	87c58593          	addi	a1,a1,-1924 # 800326b8 <__func__.0+0x2d0>
    80015e44:	0001d517          	auipc	a0,0x1d
    80015e48:	8b450513          	addi	a0,a0,-1868 # 800326f8 <__func__.0+0x310>
    80015e4c:	678190ef          	jal	8002f4c4 <printf>
    80015e50:	00046797          	auipc	a5,0x46
    80015e54:	1c17c783          	lbu	a5,449(a5) # 8005c011 <excpt+0x1>
    80015e58:	c789                	beqz	a5,80015e62 <store_page_fault_2+0xd4>
    80015e5a:	6498                	ld	a4,8(s1)
    80015e5c:	47bd                	li	a5,15
    80015e5e:	00f70c63          	beq	a4,a5,80015e76 <store_page_fault_2+0xe8>
    80015e62:	0001d517          	auipc	a0,0x1d
    80015e66:	89e50513          	addi	a0,a0,-1890 # 80032700 <__func__.0+0x318>
    80015e6a:	65a190ef          	jal	8002f4c4 <printf>
    80015e6e:	02900513          	li	a0,41
    80015e72:	340180ef          	jal	8002e1b2 <putchar>
    80015e76:	4529                	li	a0,10
    80015e78:	33a180ef          	jal	8002e1b2 <putchar>
    80015e7c:	00046417          	auipc	s0,0x46
    80015e80:	19544403          	lbu	s0,405(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80015e84:	0001d597          	auipc	a1,0x1d
    80015e88:	83458593          	addi	a1,a1,-1996 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015e8c:	cc11                	beqz	s0,80015ea8 <store_page_fault_2+0x11a>
    80015e8e:	6498                	ld	a4,8(s1)
    80015e90:	47bd                	li	a5,15
    TEST_END();
    80015e92:	0001d597          	auipc	a1,0x1d
    80015e96:	81658593          	addi	a1,a1,-2026 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015e9a:	00f70763          	beq	a4,a5,80015ea8 <store_page_fault_2+0x11a>
    80015e9e:	4401                	li	s0,0
    TEST_END();
    80015ea0:	0001d597          	auipc	a1,0x1d
    80015ea4:	81858593          	addi	a1,a1,-2024 # 800326b8 <__func__.0+0x2d0>
    80015ea8:	0001d517          	auipc	a0,0x1d
    80015eac:	8b850513          	addi	a0,a0,-1864 # 80032760 <__func__.0+0x378>
    80015eb0:	614190ef          	jal	8002f4c4 <printf>
    80015eb4:	4511                	li	a0,4
    80015eb6:	85eeb0ef          	jal	80000f14 <goto_priv>
    80015eba:	8bdeb0ef          	jal	80001776 <reset_state>
}
    80015ebe:	60e2                	ld	ra,24(sp)
    80015ec0:	8522                	mv	a0,s0
    80015ec2:	6442                	ld	s0,16(sp)
    80015ec4:	64a2                	ld	s1,8(sp)
    80015ec6:	6105                	addi	sp,sp,32
    80015ec8:	8082                	ret

0000000080015eca <store_page_fault_3>:

bool store_page_fault_3(){
    80015eca:	1141                	addi	sp,sp,-16

    TEST_START();
    80015ecc:	0001b597          	auipc	a1,0x1b
    80015ed0:	e0458593          	addi	a1,a1,-508 # 80030cd0 <__func__.11>
    80015ed4:	0001c517          	auipc	a0,0x1c
    80015ed8:	7f450513          	addi	a0,a0,2036 # 800326c8 <__func__.0+0x2e0>
bool store_page_fault_3(){
    80015edc:	e406                	sd	ra,8(sp)
    80015ede:	e022                	sd	s0,0(sp)
    TEST_START();
    80015ee0:	5e4190ef          	jal	8002f4c4 <printf>
    80015ee4:	4529                	li	a0,10
    80015ee6:	2cc180ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80015eea:	450d                	li	a0,3
    80015eec:	828eb0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80015ef0:	efcea0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80015ef4:	addea0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80015ef8:	891ea0ef          	jal	80000788 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80015efc:	4511                	li	a0,4
    80015efe:	816eb0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80015f02:	000407b7          	lui	a5,0x40
    80015f06:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80015f0a:	450d                	li	a0,3
    80015f0c:	808eb0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015f10:	4509                	li	a0,2
    80015f12:	f23ea0ef          	jal	80000e34 <set_prev_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80015f16:	f03ea0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80015f1a:	37ab77b7          	lui	a5,0x37ab7
    80015f1e:	00080737          	lui	a4,0x80
    80015f22:	078a                	slli	a5,a5,0x2
    80015f24:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80015f26:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015f2a:	0736                	slli	a4,a4,0xd
    80015f2c:	62f74073          	.insn	4, 0x62f74073
    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80015f30:	08c00593          	li	a1,140
    80015f34:	00022617          	auipc	a2,0x22
    80015f38:	c7460613          	addi	a2,a2,-908 # 80037ba8 <__func__.0+0x57c0>
    80015f3c:	0001c517          	auipc	a0,0x1c
    80015f40:	7a450513          	addi	a0,a0,1956 # 800326e0 <__func__.0+0x2f8>
    80015f44:	580190ef          	jal	8002f4c4 <printf>
    80015f48:	00046797          	auipc	a5,0x46
    80015f4c:	0c97c783          	lbu	a5,201(a5) # 8005c011 <excpt+0x1>
    80015f50:	0001c597          	auipc	a1,0x1c
    80015f54:	75858593          	addi	a1,a1,1880 # 800326a8 <__func__.0+0x2c0>
    80015f58:	c789                	beqz	a5,80015f62 <store_page_fault_3+0x98>
    80015f5a:	0001c597          	auipc	a1,0x1c
    80015f5e:	75e58593          	addi	a1,a1,1886 # 800326b8 <__func__.0+0x2d0>
    80015f62:	0001c517          	auipc	a0,0x1c
    80015f66:	79650513          	addi	a0,a0,1942 # 800326f8 <__func__.0+0x310>
    80015f6a:	55a190ef          	jal	8002f4c4 <printf>
    80015f6e:	00046797          	auipc	a5,0x46
    80015f72:	0a37c783          	lbu	a5,163(a5) # 8005c011 <excpt+0x1>
    80015f76:	e7a1                	bnez	a5,80015fbe <store_page_fault_3+0xf4>
    80015f78:	4529                	li	a0,10
    80015f7a:	238180ef          	jal	8002e1b2 <putchar>
    80015f7e:	00046797          	auipc	a5,0x46
    80015f82:	0937c783          	lbu	a5,147(a5) # 8005c011 <excpt+0x1>
    80015f86:	e795                	bnez	a5,80015fb2 <store_page_fault_3+0xe8>
    80015f88:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015f8a:	0001c597          	auipc	a1,0x1c
    80015f8e:	71e58593          	addi	a1,a1,1822 # 800326a8 <__func__.0+0x2c0>
    80015f92:	0001c517          	auipc	a0,0x1c
    80015f96:	7ce50513          	addi	a0,a0,1998 # 80032760 <__func__.0+0x378>
    80015f9a:	52a190ef          	jal	8002f4c4 <printf>
    80015f9e:	4511                	li	a0,4
    80015fa0:	f75ea0ef          	jal	80000f14 <goto_priv>
    80015fa4:	fd2eb0ef          	jal	80001776 <reset_state>
}
    80015fa8:	60a2                	ld	ra,8(sp)
    80015faa:	8522                	mv	a0,s0
    80015fac:	6402                	ld	s0,0(sp)
    80015fae:	0141                	addi	sp,sp,16
    80015fb0:	8082                	ret
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80015fb2:	4401                	li	s0,0
    TEST_END();
    80015fb4:	0001c597          	auipc	a1,0x1c
    80015fb8:	70458593          	addi	a1,a1,1796 # 800326b8 <__func__.0+0x2d0>
    80015fbc:	bfd9                	j	80015f92 <store_page_fault_3+0xc8>
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80015fbe:	0001c517          	auipc	a0,0x1c
    80015fc2:	74250513          	addi	a0,a0,1858 # 80032700 <__func__.0+0x318>
    80015fc6:	4fe190ef          	jal	8002f4c4 <printf>
    80015fca:	02900513          	li	a0,41
    80015fce:	1e4180ef          	jal	8002e1b2 <putchar>
    80015fd2:	b75d                	j	80015f78 <store_page_fault_3+0xae>

0000000080015fd4 <store_page_fault_4>:


bool store_page_fault_4(){
    80015fd4:	1101                	addi	sp,sp,-32

    TEST_START();
    80015fd6:	0001b597          	auipc	a1,0x1b
    80015fda:	d1258593          	addi	a1,a1,-750 # 80030ce8 <__func__.10>
    80015fde:	0001c517          	auipc	a0,0x1c
    80015fe2:	6ea50513          	addi	a0,a0,1770 # 800326c8 <__func__.0+0x2e0>
bool store_page_fault_4(){
    80015fe6:	ec06                	sd	ra,24(sp)
    80015fe8:	e822                	sd	s0,16(sp)
    80015fea:	e426                	sd	s1,8(sp)
    TEST_START();
    80015fec:	4d8190ef          	jal	8002f4c4 <printf>
    80015ff0:	4529                	li	a0,10
    80015ff2:	1c0180ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80015ff6:	450d                	li	a0,3
    80015ff8:	f1dea0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80015ffc:	df0ea0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80016000:	9d1ea0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80016004:	f84ea0ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80016008:	4509                	li	a0,2
    8001600a:	f0bea0ef          	jal	80000f14 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    8001600e:	e0bea0ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80016012:	37ab77b7          	lui	a5,0x37ab7
    80016016:	078a                	slli	a5,a5,0x2
    80016018:	40019737          	lui	a4,0x40019
    8001601c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016020:	070a                	slli	a4,a4,0x2
    80016022:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.v=0 leads to LPF",
    80016026:	08c00593          	li	a1,140
    8001602a:	00022617          	auipc	a2,0x22
    8001602e:	bb660613          	addi	a2,a2,-1098 # 80037be0 <__func__.0+0x57f8>
    80016032:	0001c517          	auipc	a0,0x1c
    80016036:	6ae50513          	addi	a0,a0,1710 # 800326e0 <__func__.0+0x2f8>
    8001603a:	48a190ef          	jal	8002f4c4 <printf>
    8001603e:	00046797          	auipc	a5,0x46
    80016042:	fd37c783          	lbu	a5,-45(a5) # 8005c011 <excpt+0x1>
    80016046:	00046497          	auipc	s1,0x46
    8001604a:	fca48493          	addi	s1,s1,-54 # 8005c010 <excpt>
    8001604e:	0001c597          	auipc	a1,0x1c
    80016052:	66a58593          	addi	a1,a1,1642 # 800326b8 <__func__.0+0x2d0>
    80016056:	cf89                	beqz	a5,80016070 <store_page_fault_4+0x9c>
    80016058:	6498                	ld	a4,8(s1)
    8001605a:	47bd                	li	a5,15
    8001605c:	0001c597          	auipc	a1,0x1c
    80016060:	64c58593          	addi	a1,a1,1612 # 800326a8 <__func__.0+0x2c0>
    80016064:	00f70663          	beq	a4,a5,80016070 <store_page_fault_4+0x9c>
    80016068:	0001c597          	auipc	a1,0x1c
    8001606c:	65058593          	addi	a1,a1,1616 # 800326b8 <__func__.0+0x2d0>
    80016070:	0001c517          	auipc	a0,0x1c
    80016074:	68850513          	addi	a0,a0,1672 # 800326f8 <__func__.0+0x310>
    80016078:	44c190ef          	jal	8002f4c4 <printf>
    8001607c:	00046797          	auipc	a5,0x46
    80016080:	f957c783          	lbu	a5,-107(a5) # 8005c011 <excpt+0x1>
    80016084:	c789                	beqz	a5,8001608e <store_page_fault_4+0xba>
    80016086:	6498                	ld	a4,8(s1)
    80016088:	47bd                	li	a5,15
    8001608a:	00f70c63          	beq	a4,a5,800160a2 <store_page_fault_4+0xce>
    8001608e:	0001c517          	auipc	a0,0x1c
    80016092:	67250513          	addi	a0,a0,1650 # 80032700 <__func__.0+0x318>
    80016096:	42e190ef          	jal	8002f4c4 <printf>
    8001609a:	02900513          	li	a0,41
    8001609e:	114180ef          	jal	8002e1b2 <putchar>
    800160a2:	4529                	li	a0,10
    800160a4:	10e180ef          	jal	8002e1b2 <putchar>
    800160a8:	00046797          	auipc	a5,0x46
    800160ac:	f697c783          	lbu	a5,-151(a5) # 8005c011 <excpt+0x1>
    800160b0:	4401                	li	s0,0
    800160b2:	c789                	beqz	a5,800160bc <store_page_fault_4+0xe8>
    800160b4:	6480                	ld	s0,8(s1)
    800160b6:	1445                	addi	s0,s0,-15
    800160b8:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行sd指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    800160bc:	d5dea0ef          	jal	80000e18 <test_setup_except_function>
    addr = hs_page_base(VSRX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800160c0:	000807b7          	lui	a5,0x80
    800160c4:	1007b073          	csrc	sstatus,a5
    800160c8:	37ab77b7          	lui	a5,0x37ab7
    800160cc:	00100737          	lui	a4,0x100
    800160d0:	078a                	slli	a5,a5,0x2
    800160d2:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    800160d6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800160da:	0732                	slli	a4,a4,0xc
    800160dc:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    800160e0:	08c00593          	li	a1,140
    800160e4:	00022617          	auipc	a2,0x22
    800160e8:	b2460613          	addi	a2,a2,-1244 # 80037c08 <__func__.0+0x5820>
    800160ec:	0001c517          	auipc	a0,0x1c
    800160f0:	5f450513          	addi	a0,a0,1524 # 800326e0 <__func__.0+0x2f8>
    800160f4:	3d0190ef          	jal	8002f4c4 <printf>
    800160f8:	00046797          	auipc	a5,0x46
    800160fc:	f197c783          	lbu	a5,-231(a5) # 8005c011 <excpt+0x1>
    80016100:	0001c597          	auipc	a1,0x1c
    80016104:	5b858593          	addi	a1,a1,1464 # 800326b8 <__func__.0+0x2d0>
    80016108:	cf89                	beqz	a5,80016122 <store_page_fault_4+0x14e>
    8001610a:	6498                	ld	a4,8(s1)
    8001610c:	47bd                	li	a5,15
    8001610e:	0001c597          	auipc	a1,0x1c
    80016112:	59a58593          	addi	a1,a1,1434 # 800326a8 <__func__.0+0x2c0>
    80016116:	00f70663          	beq	a4,a5,80016122 <store_page_fault_4+0x14e>
    8001611a:	0001c597          	auipc	a1,0x1c
    8001611e:	59e58593          	addi	a1,a1,1438 # 800326b8 <__func__.0+0x2d0>
    80016122:	0001c517          	auipc	a0,0x1c
    80016126:	5d650513          	addi	a0,a0,1494 # 800326f8 <__func__.0+0x310>
    8001612a:	39a190ef          	jal	8002f4c4 <printf>
    8001612e:	00046797          	auipc	a5,0x46
    80016132:	ee37c783          	lbu	a5,-285(a5) # 8005c011 <excpt+0x1>
    80016136:	c789                	beqz	a5,80016140 <store_page_fault_4+0x16c>
    80016138:	6498                	ld	a4,8(s1)
    8001613a:	47bd                	li	a5,15
    8001613c:	00f70c63          	beq	a4,a5,80016154 <store_page_fault_4+0x180>
    80016140:	0001c517          	auipc	a0,0x1c
    80016144:	5c050513          	addi	a0,a0,1472 # 80032700 <__func__.0+0x318>
    80016148:	37c190ef          	jal	8002f4c4 <printf>
    8001614c:	02900513          	li	a0,41
    80016150:	062180ef          	jal	8002e1b2 <putchar>
    80016154:	4529                	li	a0,10
    80016156:	05c180ef          	jal	8002e1b2 <putchar>
    8001615a:	c419                	beqz	s0,80016168 <store_page_fault_4+0x194>
    8001615c:	00046797          	auipc	a5,0x46
    80016160:	eb57c783          	lbu	a5,-331(a5) # 8005c011 <excpt+0x1>
    80016164:	4401                	li	s0,0
    80016166:	e7dd                	bnez	a5,80016214 <store_page_fault_4+0x240>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行sd指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80016168:	cb1ea0ef          	jal	80000e18 <test_setup_except_function>
    8001616c:	37ab77b7          	lui	a5,0x37ab7
    80016170:	00080737          	lui	a4,0x80
    80016174:	078a                	slli	a5,a5,0x2
    80016176:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    80016178:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001617c:	0736                	slli	a4,a4,0xd
    8001617e:	00f73023          	sd	a5,0(a4)
    addr = hs_page_base(VSRW_GURW);

    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    80016182:	08c00593          	li	a1,140
    80016186:	00022617          	auipc	a2,0x22
    8001618a:	aaa60613          	addi	a2,a2,-1366 # 80037c30 <__func__.0+0x5848>
    8001618e:	0001c517          	auipc	a0,0x1c
    80016192:	55250513          	addi	a0,a0,1362 # 800326e0 <__func__.0+0x2f8>
    80016196:	32e190ef          	jal	8002f4c4 <printf>
    8001619a:	00046797          	auipc	a5,0x46
    8001619e:	e777c783          	lbu	a5,-393(a5) # 8005c011 <excpt+0x1>
    800161a2:	0001c597          	auipc	a1,0x1c
    800161a6:	51658593          	addi	a1,a1,1302 # 800326b8 <__func__.0+0x2d0>
    800161aa:	e789                	bnez	a5,800161b4 <store_page_fault_4+0x1e0>
    800161ac:	0001c597          	auipc	a1,0x1c
    800161b0:	4fc58593          	addi	a1,a1,1276 # 800326a8 <__func__.0+0x2c0>
    800161b4:	0001c517          	auipc	a0,0x1c
    800161b8:	54450513          	addi	a0,a0,1348 # 800326f8 <__func__.0+0x310>
    800161bc:	308190ef          	jal	8002f4c4 <printf>
    800161c0:	00046797          	auipc	a5,0x46
    800161c4:	e517c783          	lbu	a5,-431(a5) # 8005c011 <excpt+0x1>
    800161c8:	ebb9                	bnez	a5,8001621e <store_page_fault_4+0x24a>
    800161ca:	4529                	li	a0,10
    800161cc:	7e7170ef          	jal	8002e1b2 <putchar>
    800161d0:	c411                	beqz	s0,800161dc <store_page_fault_4+0x208>
    800161d2:	00046797          	auipc	a5,0x46
    800161d6:	e3f7c783          	lbu	a5,-449(a5) # 8005c011 <excpt+0x1>
    800161da:	c79d                	beqz	a5,80016208 <store_page_fault_4+0x234>
    800161dc:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    800161de:	0001c597          	auipc	a1,0x1c
    800161e2:	4da58593          	addi	a1,a1,1242 # 800326b8 <__func__.0+0x2d0>
    800161e6:	0001c517          	auipc	a0,0x1c
    800161ea:	57a50513          	addi	a0,a0,1402 # 80032760 <__func__.0+0x378>
    800161ee:	2d6190ef          	jal	8002f4c4 <printf>
    800161f2:	4511                	li	a0,4
    800161f4:	d21ea0ef          	jal	80000f14 <goto_priv>
    800161f8:	d7eeb0ef          	jal	80001776 <reset_state>
}
    800161fc:	60e2                	ld	ra,24(sp)
    800161fe:	8522                	mv	a0,s0
    80016200:	6442                	ld	s0,16(sp)
    80016202:	64a2                	ld	s1,8(sp)
    80016204:	6105                	addi	sp,sp,32
    80016206:	8082                	ret
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    80016208:	4405                	li	s0,1
    TEST_END();
    8001620a:	0001c597          	auipc	a1,0x1c
    8001620e:	49e58593          	addi	a1,a1,1182 # 800326a8 <__func__.0+0x2c0>
    80016212:	bfd1                	j	800161e6 <store_page_fault_4+0x212>
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    80016214:	6480                	ld	s0,8(s1)
    80016216:	1445                	addi	s0,s0,-15
    80016218:	00143413          	seqz	s0,s0
    8001621c:	b7b1                	j	80016168 <store_page_fault_4+0x194>
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    8001621e:	0001c517          	auipc	a0,0x1c
    80016222:	4e250513          	addi	a0,a0,1250 # 80032700 <__func__.0+0x318>
    80016226:	29e190ef          	jal	8002f4c4 <printf>
    8001622a:	02900513          	li	a0,41
    8001622e:	785170ef          	jal	8002e1b2 <putchar>
    80016232:	bf61                	j	800161ca <store_page_fault_4+0x1f6>

0000000080016234 <store_page_fault_5>:

bool store_page_fault_5(){
    80016234:	1101                	addi	sp,sp,-32

    TEST_START();
    80016236:	0001b597          	auipc	a1,0x1b
    8001623a:	aca58593          	addi	a1,a1,-1334 # 80030d00 <__func__.9>
    8001623e:	0001c517          	auipc	a0,0x1c
    80016242:	48a50513          	addi	a0,a0,1162 # 800326c8 <__func__.0+0x2e0>
bool store_page_fault_5(){
    80016246:	ec06                	sd	ra,24(sp)
    80016248:	e822                	sd	s0,16(sp)
    8001624a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001624c:	278190ef          	jal	8002f4c4 <printf>
    80016250:	4529                	li	a0,10
    80016252:	761170ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80016256:	450d                	li	a0,3
    80016258:	cbdea0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001625c:	b90ea0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80016260:	f70ea0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80016264:	d24ea0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    80016268:	4511                	li	a0,4
    8001626a:	cabea0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001626e:	000407b7          	lui	a5,0x40
    80016272:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80016276:	4509                	li	a0,2
    80016278:	c9dea0ef          	jal	80000f14 <goto_priv>
    //执行sd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001627c:	b9dea0ef          	jal	80000e18 <test_setup_except_function>
    80016280:	37ab77b7          	lui	a5,0x37ab7
    80016284:	00080737          	lui	a4,0x80
    80016288:	078a                	slli	a5,a5,0x2
    8001628a:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001628c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016290:	0736                	slli	a4,a4,0xd
    80016292:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80016296:	08c00593          	li	a1,140
    8001629a:	00022617          	auipc	a2,0x22
    8001629e:	9be60613          	addi	a2,a2,-1602 # 80037c58 <__func__.0+0x5870>
    800162a2:	0001c517          	auipc	a0,0x1c
    800162a6:	43e50513          	addi	a0,a0,1086 # 800326e0 <__func__.0+0x2f8>
    800162aa:	21a190ef          	jal	8002f4c4 <printf>
    800162ae:	00046797          	auipc	a5,0x46
    800162b2:	d637c783          	lbu	a5,-669(a5) # 8005c011 <excpt+0x1>
    800162b6:	00046497          	auipc	s1,0x46
    800162ba:	d5a48493          	addi	s1,s1,-678 # 8005c010 <excpt>
    800162be:	0001c597          	auipc	a1,0x1c
    800162c2:	3fa58593          	addi	a1,a1,1018 # 800326b8 <__func__.0+0x2d0>
    800162c6:	cf89                	beqz	a5,800162e0 <store_page_fault_5+0xac>
    800162c8:	6498                	ld	a4,8(s1)
    800162ca:	47bd                	li	a5,15
    800162cc:	0001c597          	auipc	a1,0x1c
    800162d0:	3dc58593          	addi	a1,a1,988 # 800326a8 <__func__.0+0x2c0>
    800162d4:	00f70663          	beq	a4,a5,800162e0 <store_page_fault_5+0xac>
    800162d8:	0001c597          	auipc	a1,0x1c
    800162dc:	3e058593          	addi	a1,a1,992 # 800326b8 <__func__.0+0x2d0>
    800162e0:	0001c517          	auipc	a0,0x1c
    800162e4:	41850513          	addi	a0,a0,1048 # 800326f8 <__func__.0+0x310>
    800162e8:	1dc190ef          	jal	8002f4c4 <printf>
    800162ec:	00046797          	auipc	a5,0x46
    800162f0:	d257c783          	lbu	a5,-731(a5) # 8005c011 <excpt+0x1>
    800162f4:	c789                	beqz	a5,800162fe <store_page_fault_5+0xca>
    800162f6:	6498                	ld	a4,8(s1)
    800162f8:	47bd                	li	a5,15
    800162fa:	00f70c63          	beq	a4,a5,80016312 <store_page_fault_5+0xde>
    800162fe:	0001c517          	auipc	a0,0x1c
    80016302:	40250513          	addi	a0,a0,1026 # 80032700 <__func__.0+0x318>
    80016306:	1be190ef          	jal	8002f4c4 <printf>
    8001630a:	02900513          	li	a0,41
    8001630e:	6a5170ef          	jal	8002e1b2 <putchar>
    80016312:	4529                	li	a0,10
    80016314:	69f170ef          	jal	8002e1b2 <putchar>
    80016318:	00046417          	auipc	s0,0x46
    8001631c:	cf944403          	lbu	s0,-775(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80016320:	0001c597          	auipc	a1,0x1c
    80016324:	39858593          	addi	a1,a1,920 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80016328:	cc11                	beqz	s0,80016344 <store_page_fault_5+0x110>
    8001632a:	6498                	ld	a4,8(s1)
    8001632c:	47bd                	li	a5,15
    TEST_END();
    8001632e:	0001c597          	auipc	a1,0x1c
    80016332:	37a58593          	addi	a1,a1,890 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80016336:	00f70763          	beq	a4,a5,80016344 <store_page_fault_5+0x110>
    8001633a:	4401                	li	s0,0
    TEST_END();
    8001633c:	0001c597          	auipc	a1,0x1c
    80016340:	37c58593          	addi	a1,a1,892 # 800326b8 <__func__.0+0x2d0>
    80016344:	0001c517          	auipc	a0,0x1c
    80016348:	41c50513          	addi	a0,a0,1052 # 80032760 <__func__.0+0x378>
    8001634c:	178190ef          	jal	8002f4c4 <printf>
    80016350:	4511                	li	a0,4
    80016352:	bc3ea0ef          	jal	80000f14 <goto_priv>
    80016356:	c20eb0ef          	jal	80001776 <reset_state>
}
    8001635a:	60e2                	ld	ra,24(sp)
    8001635c:	8522                	mv	a0,s0
    8001635e:	6442                	ld	s0,16(sp)
    80016360:	64a2                	ld	s1,8(sp)
    80016362:	6105                	addi	sp,sp,32
    80016364:	8082                	ret

0000000080016366 <store_page_fault_6>:

bool store_page_fault_6(){
    80016366:	1141                	addi	sp,sp,-16

    TEST_START();
    80016368:	0001b597          	auipc	a1,0x1b
    8001636c:	9b058593          	addi	a1,a1,-1616 # 80030d18 <__func__.8>
    80016370:	0001c517          	auipc	a0,0x1c
    80016374:	35850513          	addi	a0,a0,856 # 800326c8 <__func__.0+0x2e0>
bool store_page_fault_6(){
    80016378:	e406                	sd	ra,8(sp)
    8001637a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001637c:	148190ef          	jal	8002f4c4 <printf>
    80016380:	4529                	li	a0,10
    80016382:	631170ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80016386:	450d                	li	a0,3
    80016388:	b8dea0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001638c:	a60ea0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80016390:	e40ea0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80016394:	bf4ea0ef          	jal	80000788 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016398:	4511                	li	a0,4
    8001639a:	b7bea0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001639e:	000407b7          	lui	a5,0x40
    800163a2:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    800163a6:	4509                	li	a0,2
    800163a8:	b6dea0ef          	jal	80000f14 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800163ac:	a6dea0ef          	jal	80000e18 <test_setup_except_function>
    800163b0:	37ab77b7          	lui	a5,0x37ab7
    800163b4:	00080737          	lui	a4,0x80
    800163b8:	078a                	slli	a5,a5,0x2
    800163ba:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800163bc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800163c0:	0736                	slli	a4,a4,0xd
    800163c2:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    800163c6:	08c00593          	li	a1,140
    800163ca:	00022617          	auipc	a2,0x22
    800163ce:	8c660613          	addi	a2,a2,-1850 # 80037c90 <__func__.0+0x58a8>
    800163d2:	0001c517          	auipc	a0,0x1c
    800163d6:	30e50513          	addi	a0,a0,782 # 800326e0 <__func__.0+0x2f8>
    800163da:	0ea190ef          	jal	8002f4c4 <printf>
    800163de:	00046797          	auipc	a5,0x46
    800163e2:	c337c783          	lbu	a5,-973(a5) # 8005c011 <excpt+0x1>
    800163e6:	0001c597          	auipc	a1,0x1c
    800163ea:	2c258593          	addi	a1,a1,706 # 800326a8 <__func__.0+0x2c0>
    800163ee:	c789                	beqz	a5,800163f8 <store_page_fault_6+0x92>
    800163f0:	0001c597          	auipc	a1,0x1c
    800163f4:	2c858593          	addi	a1,a1,712 # 800326b8 <__func__.0+0x2d0>
    800163f8:	0001c517          	auipc	a0,0x1c
    800163fc:	30050513          	addi	a0,a0,768 # 800326f8 <__func__.0+0x310>
    80016400:	0c4190ef          	jal	8002f4c4 <printf>
    80016404:	00046797          	auipc	a5,0x46
    80016408:	c0d7c783          	lbu	a5,-1011(a5) # 8005c011 <excpt+0x1>
    8001640c:	e7a1                	bnez	a5,80016454 <store_page_fault_6+0xee>
    8001640e:	4529                	li	a0,10
    80016410:	5a3170ef          	jal	8002e1b2 <putchar>
    80016414:	00046797          	auipc	a5,0x46
    80016418:	bfd7c783          	lbu	a5,-1027(a5) # 8005c011 <excpt+0x1>
    8001641c:	e795                	bnez	a5,80016448 <store_page_fault_6+0xe2>
    8001641e:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016420:	0001c597          	auipc	a1,0x1c
    80016424:	28858593          	addi	a1,a1,648 # 800326a8 <__func__.0+0x2c0>
    80016428:	0001c517          	auipc	a0,0x1c
    8001642c:	33850513          	addi	a0,a0,824 # 80032760 <__func__.0+0x378>
    80016430:	094190ef          	jal	8002f4c4 <printf>
    80016434:	4511                	li	a0,4
    80016436:	adfea0ef          	jal	80000f14 <goto_priv>
    8001643a:	b3ceb0ef          	jal	80001776 <reset_state>
}
    8001643e:	60a2                	ld	ra,8(sp)
    80016440:	8522                	mv	a0,s0
    80016442:	6402                	ld	s0,0(sp)
    80016444:	0141                	addi	sp,sp,16
    80016446:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80016448:	4401                	li	s0,0
    TEST_END();
    8001644a:	0001c597          	auipc	a1,0x1c
    8001644e:	26e58593          	addi	a1,a1,622 # 800326b8 <__func__.0+0x2d0>
    80016452:	bfd9                	j	80016428 <store_page_fault_6+0xc2>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80016454:	0001c517          	auipc	a0,0x1c
    80016458:	2ac50513          	addi	a0,a0,684 # 80032700 <__func__.0+0x318>
    8001645c:	068190ef          	jal	8002f4c4 <printf>
    80016460:	02900513          	li	a0,41
    80016464:	54f170ef          	jal	8002e1b2 <putchar>
    80016468:	b75d                	j	8001640e <store_page_fault_6+0xa8>

000000008001646a <store_page_fault_7>:

bool store_page_fault_7(){
    8001646a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001646c:	0001b597          	auipc	a1,0x1b
    80016470:	8c458593          	addi	a1,a1,-1852 # 80030d30 <__func__.7>
    80016474:	0001c517          	auipc	a0,0x1c
    80016478:	25450513          	addi	a0,a0,596 # 800326c8 <__func__.0+0x2e0>
bool store_page_fault_7(){
    8001647c:	ec06                	sd	ra,24(sp)
    8001647e:	e822                	sd	s0,16(sp)
    80016480:	e426                	sd	s1,8(sp)
    TEST_START();
    80016482:	042190ef          	jal	8002f4c4 <printf>
    80016486:	4529                	li	a0,10
    80016488:	52b170ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8001648c:	450d                	li	a0,3
    8001648e:	a87ea0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80016492:	95aea0ef          	jal	800005ec <hspt_init>
    hpt_init();
    80016496:	d3aea0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001649a:	aeeea0ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    8001649e:	4511                	li	a0,4
    800164a0:	a75ea0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    800164a4:	000407b7          	lui	a5,0x40
    800164a8:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800164ac:	450d                	li	a0,3
    800164ae:	a67ea0ef          	jal	80000f14 <goto_priv>
    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800164b2:	967ea0ef          	jal	80000e18 <test_setup_except_function>
    800164b6:	37ab77b7          	lui	a5,0x37ab7
    800164ba:	00080737          	lui	a4,0x80
    800164be:	078a                	slli	a5,a5,0x2
    800164c0:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800164c2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800164c6:	0736                	slli	a4,a4,0xd
    800164c8:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800164cc:	08c00593          	li	a1,140
    800164d0:	00021617          	auipc	a2,0x21
    800164d4:	7f860613          	addi	a2,a2,2040 # 80037cc8 <__func__.0+0x58e0>
    800164d8:	0001c517          	auipc	a0,0x1c
    800164dc:	20850513          	addi	a0,a0,520 # 800326e0 <__func__.0+0x2f8>
    800164e0:	7e5180ef          	jal	8002f4c4 <printf>
    800164e4:	00046797          	auipc	a5,0x46
    800164e8:	b2d7c783          	lbu	a5,-1235(a5) # 8005c011 <excpt+0x1>
    800164ec:	00046497          	auipc	s1,0x46
    800164f0:	b2448493          	addi	s1,s1,-1244 # 8005c010 <excpt>
    800164f4:	0001c597          	auipc	a1,0x1c
    800164f8:	1c458593          	addi	a1,a1,452 # 800326b8 <__func__.0+0x2d0>
    800164fc:	cf89                	beqz	a5,80016516 <store_page_fault_7+0xac>
    800164fe:	6498                	ld	a4,8(s1)
    80016500:	47bd                	li	a5,15
    80016502:	0001c597          	auipc	a1,0x1c
    80016506:	1a658593          	addi	a1,a1,422 # 800326a8 <__func__.0+0x2c0>
    8001650a:	00f70663          	beq	a4,a5,80016516 <store_page_fault_7+0xac>
    8001650e:	0001c597          	auipc	a1,0x1c
    80016512:	1aa58593          	addi	a1,a1,426 # 800326b8 <__func__.0+0x2d0>
    80016516:	0001c517          	auipc	a0,0x1c
    8001651a:	1e250513          	addi	a0,a0,482 # 800326f8 <__func__.0+0x310>
    8001651e:	7a7180ef          	jal	8002f4c4 <printf>
    80016522:	00046797          	auipc	a5,0x46
    80016526:	aef7c783          	lbu	a5,-1297(a5) # 8005c011 <excpt+0x1>
    8001652a:	c789                	beqz	a5,80016534 <store_page_fault_7+0xca>
    8001652c:	6498                	ld	a4,8(s1)
    8001652e:	47bd                	li	a5,15
    80016530:	00f70c63          	beq	a4,a5,80016548 <store_page_fault_7+0xde>
    80016534:	0001c517          	auipc	a0,0x1c
    80016538:	1cc50513          	addi	a0,a0,460 # 80032700 <__func__.0+0x318>
    8001653c:	789180ef          	jal	8002f4c4 <printf>
    80016540:	02900513          	li	a0,41
    80016544:	46f170ef          	jal	8002e1b2 <putchar>
    80016548:	4529                	li	a0,10
    8001654a:	469170ef          	jal	8002e1b2 <putchar>
    8001654e:	00046417          	auipc	s0,0x46
    80016552:	ac344403          	lbu	s0,-1341(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80016556:	0001c597          	auipc	a1,0x1c
    8001655a:	16258593          	addi	a1,a1,354 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    8001655e:	cc11                	beqz	s0,8001657a <store_page_fault_7+0x110>
    80016560:	6498                	ld	a4,8(s1)
    80016562:	47bd                	li	a5,15
    TEST_END();
    80016564:	0001c597          	auipc	a1,0x1c
    80016568:	14458593          	addi	a1,a1,324 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    8001656c:	00f70763          	beq	a4,a5,8001657a <store_page_fault_7+0x110>
    80016570:	4401                	li	s0,0
    TEST_END();
    80016572:	0001c597          	auipc	a1,0x1c
    80016576:	14658593          	addi	a1,a1,326 # 800326b8 <__func__.0+0x2d0>
    8001657a:	0001c517          	auipc	a0,0x1c
    8001657e:	1e650513          	addi	a0,a0,486 # 80032760 <__func__.0+0x378>
    80016582:	743180ef          	jal	8002f4c4 <printf>
    80016586:	4511                	li	a0,4
    80016588:	98dea0ef          	jal	80000f14 <goto_priv>
    8001658c:	9eaeb0ef          	jal	80001776 <reset_state>
}
    80016590:	60e2                	ld	ra,24(sp)
    80016592:	8522                	mv	a0,s0
    80016594:	6442                	ld	s0,16(sp)
    80016596:	64a2                	ld	s1,8(sp)
    80016598:	6105                	addi	sp,sp,32
    8001659a:	8082                	ret

000000008001659c <store_page_fault_8>:

bool store_page_fault_8(){
    8001659c:	1141                	addi	sp,sp,-16

    TEST_START();
    8001659e:	0001a597          	auipc	a1,0x1a
    800165a2:	7aa58593          	addi	a1,a1,1962 # 80030d48 <__func__.6>
    800165a6:	0001c517          	auipc	a0,0x1c
    800165aa:	12250513          	addi	a0,a0,290 # 800326c8 <__func__.0+0x2e0>
bool store_page_fault_8(){
    800165ae:	e406                	sd	ra,8(sp)
    800165b0:	e022                	sd	s0,0(sp)
    TEST_START();
    800165b2:	713180ef          	jal	8002f4c4 <printf>
    800165b6:	4529                	li	a0,10
    800165b8:	3fb170ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    800165bc:	450d                	li	a0,3
    800165be:	957ea0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800165c2:	82aea0ef          	jal	800005ec <hspt_init>
    hpt_init();
    800165c6:	c0aea0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800165ca:	9beea0ef          	jal	80000788 <vspt_init>


    //执行sd指令时，设置了msstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    800165ce:	4511                	li	a0,4
    800165d0:	945ea0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    800165d4:	000407b7          	lui	a5,0x40
    800165d8:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800165dc:	450d                	li	a0,3
    800165de:	937ea0ef          	jal	80000f14 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800165e2:	837ea0ef          	jal	80000e18 <test_setup_except_function>
    800165e6:	37ab77b7          	lui	a5,0x37ab7
    800165ea:	00080737          	lui	a4,0x80
    800165ee:	078a                	slli	a5,a5,0x2
    800165f0:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800165f2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800165f6:	0736                	slli	a4,a4,0xd
    800165f8:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    800165fc:	08c00593          	li	a1,140
    80016600:	00021617          	auipc	a2,0x21
    80016604:	70060613          	addi	a2,a2,1792 # 80037d00 <__func__.0+0x5918>
    80016608:	0001c517          	auipc	a0,0x1c
    8001660c:	0d850513          	addi	a0,a0,216 # 800326e0 <__func__.0+0x2f8>
    80016610:	6b5180ef          	jal	8002f4c4 <printf>
    80016614:	00046797          	auipc	a5,0x46
    80016618:	9fd7c783          	lbu	a5,-1539(a5) # 8005c011 <excpt+0x1>
    8001661c:	0001c597          	auipc	a1,0x1c
    80016620:	08c58593          	addi	a1,a1,140 # 800326a8 <__func__.0+0x2c0>
    80016624:	c789                	beqz	a5,8001662e <store_page_fault_8+0x92>
    80016626:	0001c597          	auipc	a1,0x1c
    8001662a:	09258593          	addi	a1,a1,146 # 800326b8 <__func__.0+0x2d0>
    8001662e:	0001c517          	auipc	a0,0x1c
    80016632:	0ca50513          	addi	a0,a0,202 # 800326f8 <__func__.0+0x310>
    80016636:	68f180ef          	jal	8002f4c4 <printf>
    8001663a:	00046797          	auipc	a5,0x46
    8001663e:	9d77c783          	lbu	a5,-1577(a5) # 8005c011 <excpt+0x1>
    80016642:	e7a1                	bnez	a5,8001668a <store_page_fault_8+0xee>
    80016644:	4529                	li	a0,10
    80016646:	36d170ef          	jal	8002e1b2 <putchar>
    8001664a:	00046797          	auipc	a5,0x46
    8001664e:	9c77c783          	lbu	a5,-1593(a5) # 8005c011 <excpt+0x1>
    80016652:	e795                	bnez	a5,8001667e <store_page_fault_8+0xe2>
    80016654:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016656:	0001c597          	auipc	a1,0x1c
    8001665a:	05258593          	addi	a1,a1,82 # 800326a8 <__func__.0+0x2c0>
    8001665e:	0001c517          	auipc	a0,0x1c
    80016662:	10250513          	addi	a0,a0,258 # 80032760 <__func__.0+0x378>
    80016666:	65f180ef          	jal	8002f4c4 <printf>
    8001666a:	4511                	li	a0,4
    8001666c:	8a9ea0ef          	jal	80000f14 <goto_priv>
    80016670:	906eb0ef          	jal	80001776 <reset_state>
}
    80016674:	60a2                	ld	ra,8(sp)
    80016676:	8522                	mv	a0,s0
    80016678:	6402                	ld	s0,0(sp)
    8001667a:	0141                	addi	sp,sp,16
    8001667c:	8082                	ret
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    8001667e:	4401                	li	s0,0
    TEST_END();
    80016680:	0001c597          	auipc	a1,0x1c
    80016684:	03858593          	addi	a1,a1,56 # 800326b8 <__func__.0+0x2d0>
    80016688:	bfd9                	j	8001665e <store_page_fault_8+0xc2>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    8001668a:	0001c517          	auipc	a0,0x1c
    8001668e:	07650513          	addi	a0,a0,118 # 80032700 <__func__.0+0x318>
    80016692:	633180ef          	jal	8002f4c4 <printf>
    80016696:	02900513          	li	a0,41
    8001669a:	319170ef          	jal	8002e1b2 <putchar>
    8001669e:	b75d                	j	80016644 <store_page_fault_8+0xa8>

00000000800166a0 <amo_page_fault_1>:





bool amo_page_fault_1(){
    800166a0:	1101                	addi	sp,sp,-32

    TEST_START();
    800166a2:	0001a597          	auipc	a1,0x1a
    800166a6:	6be58593          	addi	a1,a1,1726 # 80030d60 <__func__.5>
    800166aa:	0001c517          	auipc	a0,0x1c
    800166ae:	01e50513          	addi	a0,a0,30 # 800326c8 <__func__.0+0x2e0>
bool amo_page_fault_1(){
    800166b2:	ec06                	sd	ra,24(sp)
    800166b4:	e822                	sd	s0,16(sp)
    800166b6:	e426                	sd	s1,8(sp)
    800166b8:	e04a                	sd	s2,0(sp)
    TEST_START();
    800166ba:	60b180ef          	jal	8002f4c4 <printf>
    800166be:	4529                	li	a0,10
    800166c0:	2f3170ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    800166c4:	450d                	li	a0,3
    800166c6:	84fea0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800166ca:	f23e90ef          	jal	800005ec <hspt_init>
    hpt_init();
    800166ce:	b02ea0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800166d2:	8b6ea0ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_HS);
    800166d6:	450d                	li	a0,3
    800166d8:	83dea0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    800166dc:	4509                	li	a0,2
    800166de:	f56ea0ef          	jal	80000e34 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    800166e2:	f36ea0ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    800166e6:	deadc7b7          	lui	a5,0xdeadc
    800166ea:	40019737          	lui	a4,0x40019
    800166ee:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    800166f2:	070a                	slli	a4,a4,0x2
    800166f4:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    800166f8:	08c00593          	li	a1,140
    800166fc:	00021617          	auipc	a2,0x21
    80016700:	63c60613          	addi	a2,a2,1596 # 80037d38 <__func__.0+0x5950>
    80016704:	0001c517          	auipc	a0,0x1c
    80016708:	fdc50513          	addi	a0,a0,-36 # 800326e0 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    8001670c:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016710:	5b5180ef          	jal	8002f4c4 <printf>
    80016714:	00046797          	auipc	a5,0x46
    80016718:	8fd7c783          	lbu	a5,-1795(a5) # 8005c011 <excpt+0x1>
    value = amoadd_w(addr,value);
    8001671c:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    8001671e:	00046917          	auipc	s2,0x46
    80016722:	8f290913          	addi	s2,s2,-1806 # 8005c010 <excpt>
    80016726:	0001c597          	auipc	a1,0x1c
    8001672a:	f9258593          	addi	a1,a1,-110 # 800326b8 <__func__.0+0x2d0>
    8001672e:	cf91                	beqz	a5,8001674a <amo_page_fault_1+0xaa>
    80016730:	00893703          	ld	a4,8(s2)
    80016734:	47bd                	li	a5,15
    80016736:	0001c597          	auipc	a1,0x1c
    8001673a:	f7258593          	addi	a1,a1,-142 # 800326a8 <__func__.0+0x2c0>
    8001673e:	00f70663          	beq	a4,a5,8001674a <amo_page_fault_1+0xaa>
    80016742:	0001c597          	auipc	a1,0x1c
    80016746:	f7658593          	addi	a1,a1,-138 # 800326b8 <__func__.0+0x2d0>
    8001674a:	0001c517          	auipc	a0,0x1c
    8001674e:	fae50513          	addi	a0,a0,-82 # 800326f8 <__func__.0+0x310>
    80016752:	573180ef          	jal	8002f4c4 <printf>
    80016756:	00046797          	auipc	a5,0x46
    8001675a:	8bb7c783          	lbu	a5,-1861(a5) # 8005c011 <excpt+0x1>
    8001675e:	c791                	beqz	a5,8001676a <amo_page_fault_1+0xca>
    80016760:	00893703          	ld	a4,8(s2)
    80016764:	47bd                	li	a5,15
    80016766:	00f70c63          	beq	a4,a5,8001677e <amo_page_fault_1+0xde>
    8001676a:	0001c517          	auipc	a0,0x1c
    8001676e:	f9650513          	addi	a0,a0,-106 # 80032700 <__func__.0+0x318>
    80016772:	553180ef          	jal	8002f4c4 <printf>
    80016776:	02900513          	li	a0,41
    8001677a:	239170ef          	jal	8002e1b2 <putchar>
    8001677e:	4529                	li	a0,10
    80016780:	233170ef          	jal	8002e1b2 <putchar>
    80016784:	00046797          	auipc	a5,0x46
    80016788:	88d7c783          	lbu	a5,-1907(a5) # 8005c011 <excpt+0x1>
    8001678c:	4481                	li	s1,0
    8001678e:	c791                	beqz	a5,8001679a <amo_page_fault_1+0xfa>
    80016790:	00893483          	ld	s1,8(s2)
    80016794:	14c5                	addi	s1,s1,-15
    80016796:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    8001679a:	e7eea0ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8001679e:	001007b7          	lui	a5,0x100
    800167a2:	05578793          	addi	a5,a5,85 # 100055 <STACK_SIZE+0x55>
    800167a6:	07b2                	slli	a5,a5,0xc
    800167a8:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GRWX);

    value = amoand_d(addr,value);
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    800167ac:	08c00593          	li	a1,140
    800167b0:	00021617          	auipc	a2,0x21
    800167b4:	5c060613          	addi	a2,a2,1472 # 80037d70 <__func__.0+0x5988>
    800167b8:	0001c517          	auipc	a0,0x1c
    800167bc:	f2850513          	addi	a0,a0,-216 # 800326e0 <__func__.0+0x2f8>
    800167c0:	505180ef          	jal	8002f4c4 <printf>
    800167c4:	00046797          	auipc	a5,0x46
    800167c8:	84d7c783          	lbu	a5,-1971(a5) # 8005c011 <excpt+0x1>
    800167cc:	0001c597          	auipc	a1,0x1c
    800167d0:	eec58593          	addi	a1,a1,-276 # 800326b8 <__func__.0+0x2d0>
    800167d4:	cf91                	beqz	a5,800167f0 <amo_page_fault_1+0x150>
    800167d6:	00893703          	ld	a4,8(s2)
    800167da:	47bd                	li	a5,15
    800167dc:	0001c597          	auipc	a1,0x1c
    800167e0:	ecc58593          	addi	a1,a1,-308 # 800326a8 <__func__.0+0x2c0>
    800167e4:	00f70663          	beq	a4,a5,800167f0 <amo_page_fault_1+0x150>
    800167e8:	0001c597          	auipc	a1,0x1c
    800167ec:	ed058593          	addi	a1,a1,-304 # 800326b8 <__func__.0+0x2d0>
    800167f0:	0001c517          	auipc	a0,0x1c
    800167f4:	f0850513          	addi	a0,a0,-248 # 800326f8 <__func__.0+0x310>
    800167f8:	4cd180ef          	jal	8002f4c4 <printf>
    800167fc:	00046797          	auipc	a5,0x46
    80016800:	8157c783          	lbu	a5,-2027(a5) # 8005c011 <excpt+0x1>
    80016804:	c791                	beqz	a5,80016810 <amo_page_fault_1+0x170>
    80016806:	00893703          	ld	a4,8(s2)
    8001680a:	47bd                	li	a5,15
    8001680c:	00f70c63          	beq	a4,a5,80016824 <amo_page_fault_1+0x184>
    80016810:	0001c517          	auipc	a0,0x1c
    80016814:	ef050513          	addi	a0,a0,-272 # 80032700 <__func__.0+0x318>
    80016818:	4ad180ef          	jal	8002f4c4 <printf>
    8001681c:	02900513          	li	a0,41
    80016820:	193170ef          	jal	8002e1b2 <putchar>
    80016824:	4529                	li	a0,10
    80016826:	18d170ef          	jal	8002e1b2 <putchar>
    8001682a:	c499                	beqz	s1,80016838 <amo_page_fault_1+0x198>
    8001682c:	00045797          	auipc	a5,0x45
    80016830:	7e57c783          	lbu	a5,2021(a5) # 8005c011 <excpt+0x1>
    80016834:	4481                	li	s1,0
    80016836:	e3cd                	bnez	a5,800168d8 <amo_page_fault_1+0x238>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80016838:	de0ea0ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8001683c:	4785                	li	a5,1
    8001683e:	1782                	slli	a5,a5,0x20
    80016840:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    80016844:	08c00593          	li	a1,140
    80016848:	00021617          	auipc	a2,0x21
    8001684c:	56060613          	addi	a2,a2,1376 # 80037da8 <__func__.0+0x59c0>
    80016850:	0001c517          	auipc	a0,0x1c
    80016854:	e9050513          	addi	a0,a0,-368 # 800326e0 <__func__.0+0x2f8>
    80016858:	46d180ef          	jal	8002f4c4 <printf>
    8001685c:	00045797          	auipc	a5,0x45
    80016860:	7b57c783          	lbu	a5,1973(a5) # 8005c011 <excpt+0x1>
    80016864:	0001c597          	auipc	a1,0x1c
    80016868:	e5458593          	addi	a1,a1,-428 # 800326b8 <__func__.0+0x2d0>
    8001686c:	e789                	bnez	a5,80016876 <amo_page_fault_1+0x1d6>
    8001686e:	0001c597          	auipc	a1,0x1c
    80016872:	e3a58593          	addi	a1,a1,-454 # 800326a8 <__func__.0+0x2c0>
    80016876:	0001c517          	auipc	a0,0x1c
    8001687a:	e8250513          	addi	a0,a0,-382 # 800326f8 <__func__.0+0x310>
    8001687e:	447180ef          	jal	8002f4c4 <printf>
    80016882:	00045797          	auipc	a5,0x45
    80016886:	78f7c783          	lbu	a5,1935(a5) # 8005c011 <excpt+0x1>
    8001688a:	efa9                	bnez	a5,800168e4 <amo_page_fault_1+0x244>
    8001688c:	4529                	li	a0,10
    8001688e:	125170ef          	jal	8002e1b2 <putchar>
    80016892:	c491                	beqz	s1,8001689e <amo_page_fault_1+0x1fe>
    80016894:	00045797          	auipc	a5,0x45
    80016898:	77d7c783          	lbu	a5,1917(a5) # 8005c011 <excpt+0x1>
    8001689c:	cb85                	beqz	a5,800168cc <amo_page_fault_1+0x22c>
    8001689e:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    800168a0:	0001c597          	auipc	a1,0x1c
    800168a4:	e1858593          	addi	a1,a1,-488 # 800326b8 <__func__.0+0x2d0>
    800168a8:	0001c517          	auipc	a0,0x1c
    800168ac:	eb850513          	addi	a0,a0,-328 # 80032760 <__func__.0+0x378>
    800168b0:	415180ef          	jal	8002f4c4 <printf>
    800168b4:	4511                	li	a0,4
    800168b6:	e5eea0ef          	jal	80000f14 <goto_priv>
    800168ba:	ebdea0ef          	jal	80001776 <reset_state>
}
    800168be:	60e2                	ld	ra,24(sp)
    800168c0:	8522                	mv	a0,s0
    800168c2:	6442                	ld	s0,16(sp)
    800168c4:	64a2                	ld	s1,8(sp)
    800168c6:	6902                	ld	s2,0(sp)
    800168c8:	6105                	addi	sp,sp,32
    800168ca:	8082                	ret
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    800168cc:	4405                	li	s0,1
    TEST_END();
    800168ce:	0001c597          	auipc	a1,0x1c
    800168d2:	dda58593          	addi	a1,a1,-550 # 800326a8 <__func__.0+0x2c0>
    800168d6:	bfc9                	j	800168a8 <amo_page_fault_1+0x208>
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    800168d8:	00893483          	ld	s1,8(s2)
    800168dc:	14c5                	addi	s1,s1,-15
    800168de:	0014b493          	seqz	s1,s1
    800168e2:	bf99                	j	80016838 <amo_page_fault_1+0x198>
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    800168e4:	0001c517          	auipc	a0,0x1c
    800168e8:	e1c50513          	addi	a0,a0,-484 # 80032700 <__func__.0+0x318>
    800168ec:	3d9180ef          	jal	8002f4c4 <printf>
    800168f0:	02900513          	li	a0,41
    800168f4:	0bf170ef          	jal	8002e1b2 <putchar>
    800168f8:	bf51                	j	8001688c <amo_page_fault_1+0x1ec>

00000000800168fa <amo_page_fault_2>:

bool amo_page_fault_2(){
    800168fa:	1101                	addi	sp,sp,-32

    TEST_START();
    800168fc:	0001a597          	auipc	a1,0x1a
    80016900:	47c58593          	addi	a1,a1,1148 # 80030d78 <__func__.4>
    80016904:	0001c517          	auipc	a0,0x1c
    80016908:	dc450513          	addi	a0,a0,-572 # 800326c8 <__func__.0+0x2e0>
bool amo_page_fault_2(){
    8001690c:	ec06                	sd	ra,24(sp)
    8001690e:	e822                	sd	s0,16(sp)
    80016910:	e426                	sd	s1,8(sp)
    TEST_START();
    80016912:	3b3180ef          	jal	8002f4c4 <printf>
    80016916:	4529                	li	a0,10
    80016918:	09b170ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8001691c:	450d                	li	a0,3
    8001691e:	df6ea0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80016922:	ccbe90ef          	jal	800005ec <hspt_init>
    hpt_init();
    80016926:	8aaea0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001692a:	e5fe90ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    8001692e:	4511                	li	a0,4
    80016930:	de4ea0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80016934:	000407b7          	lui	a5,0x40
    80016938:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    8001693c:	450d                	li	a0,3
    8001693e:	dd6ea0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);    
    80016942:	4509                	li	a0,2
    80016944:	cf0ea0ef          	jal	80000e34 <set_prev_priv>
    //执行amomin_d指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    80016948:	cd0ea0ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8001694c:	000807b7          	lui	a5,0x80
    80016950:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016952:	4701                	li	a4,0
    80016954:	07b6                	slli	a5,a5,0xd
    80016956:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    8001695a:	08c00593          	li	a1,140
    8001695e:	00021617          	auipc	a2,0x21
    80016962:	48260613          	addi	a2,a2,1154 # 80037de0 <__func__.0+0x59f8>
    80016966:	0001c517          	auipc	a0,0x1c
    8001696a:	d7a50513          	addi	a0,a0,-646 # 800326e0 <__func__.0+0x2f8>
    8001696e:	357180ef          	jal	8002f4c4 <printf>
    80016972:	00045797          	auipc	a5,0x45
    80016976:	69f7c783          	lbu	a5,1695(a5) # 8005c011 <excpt+0x1>
    8001697a:	00045497          	auipc	s1,0x45
    8001697e:	69648493          	addi	s1,s1,1686 # 8005c010 <excpt>
    80016982:	0001c597          	auipc	a1,0x1c
    80016986:	d3658593          	addi	a1,a1,-714 # 800326b8 <__func__.0+0x2d0>
    8001698a:	cf89                	beqz	a5,800169a4 <amo_page_fault_2+0xaa>
    8001698c:	6498                	ld	a4,8(s1)
    8001698e:	47bd                	li	a5,15
    80016990:	0001c597          	auipc	a1,0x1c
    80016994:	d1858593          	addi	a1,a1,-744 # 800326a8 <__func__.0+0x2c0>
    80016998:	00f70663          	beq	a4,a5,800169a4 <amo_page_fault_2+0xaa>
    8001699c:	0001c597          	auipc	a1,0x1c
    800169a0:	d1c58593          	addi	a1,a1,-740 # 800326b8 <__func__.0+0x2d0>
    800169a4:	0001c517          	auipc	a0,0x1c
    800169a8:	d5450513          	addi	a0,a0,-684 # 800326f8 <__func__.0+0x310>
    800169ac:	319180ef          	jal	8002f4c4 <printf>
    800169b0:	00045797          	auipc	a5,0x45
    800169b4:	6617c783          	lbu	a5,1633(a5) # 8005c011 <excpt+0x1>
    800169b8:	c789                	beqz	a5,800169c2 <amo_page_fault_2+0xc8>
    800169ba:	6498                	ld	a4,8(s1)
    800169bc:	47bd                	li	a5,15
    800169be:	00f70c63          	beq	a4,a5,800169d6 <amo_page_fault_2+0xdc>
    800169c2:	0001c517          	auipc	a0,0x1c
    800169c6:	d3e50513          	addi	a0,a0,-706 # 80032700 <__func__.0+0x318>
    800169ca:	2fb180ef          	jal	8002f4c4 <printf>
    800169ce:	02900513          	li	a0,41
    800169d2:	7e0170ef          	jal	8002e1b2 <putchar>
    800169d6:	4529                	li	a0,10
    800169d8:	7da170ef          	jal	8002e1b2 <putchar>
    800169dc:	00045417          	auipc	s0,0x45
    800169e0:	63544403          	lbu	s0,1589(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800169e4:	0001c597          	auipc	a1,0x1c
    800169e8:	cd458593          	addi	a1,a1,-812 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    800169ec:	cc11                	beqz	s0,80016a08 <amo_page_fault_2+0x10e>
    800169ee:	6498                	ld	a4,8(s1)
    800169f0:	47bd                	li	a5,15
    TEST_END();
    800169f2:	0001c597          	auipc	a1,0x1c
    800169f6:	cb658593          	addi	a1,a1,-842 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    800169fa:	00f70763          	beq	a4,a5,80016a08 <amo_page_fault_2+0x10e>
    800169fe:	4401                	li	s0,0
    TEST_END();
    80016a00:	0001c597          	auipc	a1,0x1c
    80016a04:	cb858593          	addi	a1,a1,-840 # 800326b8 <__func__.0+0x2d0>
    80016a08:	0001c517          	auipc	a0,0x1c
    80016a0c:	d5850513          	addi	a0,a0,-680 # 80032760 <__func__.0+0x378>
    80016a10:	2b5180ef          	jal	8002f4c4 <printf>
    80016a14:	4511                	li	a0,4
    80016a16:	cfeea0ef          	jal	80000f14 <goto_priv>
    80016a1a:	d5dea0ef          	jal	80001776 <reset_state>
}
    80016a1e:	60e2                	ld	ra,24(sp)
    80016a20:	8522                	mv	a0,s0
    80016a22:	6442                	ld	s0,16(sp)
    80016a24:	64a2                	ld	s1,8(sp)
    80016a26:	6105                	addi	sp,sp,32
    80016a28:	8082                	ret

0000000080016a2a <amo_page_fault_3>:

bool amo_page_fault_3(){
    80016a2a:	1141                	addi	sp,sp,-16

    TEST_START();
    80016a2c:	0001a597          	auipc	a1,0x1a
    80016a30:	36458593          	addi	a1,a1,868 # 80030d90 <__func__.3>
    80016a34:	0001c517          	auipc	a0,0x1c
    80016a38:	c9450513          	addi	a0,a0,-876 # 800326c8 <__func__.0+0x2e0>
bool amo_page_fault_3(){
    80016a3c:	e406                	sd	ra,8(sp)
    80016a3e:	e022                	sd	s0,0(sp)
    TEST_START();
    80016a40:	285180ef          	jal	8002f4c4 <printf>
    80016a44:	4529                	li	a0,10
    80016a46:	76c170ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80016a4a:	450d                	li	a0,3
    80016a4c:	cc8ea0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80016a50:	b9de90ef          	jal	800005ec <hspt_init>
    hpt_init();
    80016a54:	f7de90ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80016a58:	d31e90ef          	jal	80000788 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016a5c:	4511                	li	a0,4
    80016a5e:	cb6ea0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80016a62:	000407b7          	lui	a5,0x40
    80016a66:	3007a073          	csrs	mstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80016a6a:	450d                	li	a0,3
    80016a6c:	ca8ea0ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);   
    80016a70:	4509                	li	a0,2
    80016a72:	bc2ea0ef          	jal	80000e34 <set_prev_priv>
    
    TEST_SETUP_EXCEPT();
    80016a76:	ba2ea0ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80016a7a:	000807b7          	lui	a5,0x80
    80016a7e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016a80:	4701                	li	a4,0
    80016a82:	07b6                	slli	a5,a5,0xd
    80016a84:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016a88:	08c00593          	li	a1,140
    80016a8c:	00021617          	auipc	a2,0x21
    80016a90:	39c60613          	addi	a2,a2,924 # 80037e28 <__func__.0+0x5a40>
    80016a94:	0001c517          	auipc	a0,0x1c
    80016a98:	c4c50513          	addi	a0,a0,-948 # 800326e0 <__func__.0+0x2f8>
    80016a9c:	229180ef          	jal	8002f4c4 <printf>
    80016aa0:	00045797          	auipc	a5,0x45
    80016aa4:	5717c783          	lbu	a5,1393(a5) # 8005c011 <excpt+0x1>
    80016aa8:	0001c597          	auipc	a1,0x1c
    80016aac:	c0058593          	addi	a1,a1,-1024 # 800326a8 <__func__.0+0x2c0>
    80016ab0:	c789                	beqz	a5,80016aba <amo_page_fault_3+0x90>
    80016ab2:	0001c597          	auipc	a1,0x1c
    80016ab6:	c0658593          	addi	a1,a1,-1018 # 800326b8 <__func__.0+0x2d0>
    80016aba:	0001c517          	auipc	a0,0x1c
    80016abe:	c3e50513          	addi	a0,a0,-962 # 800326f8 <__func__.0+0x310>
    80016ac2:	203180ef          	jal	8002f4c4 <printf>
    80016ac6:	00045797          	auipc	a5,0x45
    80016aca:	54b7c783          	lbu	a5,1355(a5) # 8005c011 <excpt+0x1>
    80016ace:	e7a1                	bnez	a5,80016b16 <amo_page_fault_3+0xec>
    80016ad0:	4529                	li	a0,10
    80016ad2:	6e0170ef          	jal	8002e1b2 <putchar>
    80016ad6:	00045797          	auipc	a5,0x45
    80016ada:	53b7c783          	lbu	a5,1339(a5) # 8005c011 <excpt+0x1>
    80016ade:	e795                	bnez	a5,80016b0a <amo_page_fault_3+0xe0>
    80016ae0:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016ae2:	0001c597          	auipc	a1,0x1c
    80016ae6:	bc658593          	addi	a1,a1,-1082 # 800326a8 <__func__.0+0x2c0>
    80016aea:	0001c517          	auipc	a0,0x1c
    80016aee:	c7650513          	addi	a0,a0,-906 # 80032760 <__func__.0+0x378>
    80016af2:	1d3180ef          	jal	8002f4c4 <printf>
    80016af6:	4511                	li	a0,4
    80016af8:	c1cea0ef          	jal	80000f14 <goto_priv>
    80016afc:	c7bea0ef          	jal	80001776 <reset_state>
}
    80016b00:	60a2                	ld	ra,8(sp)
    80016b02:	8522                	mv	a0,s0
    80016b04:	6402                	ld	s0,0(sp)
    80016b06:	0141                	addi	sp,sp,16
    80016b08:	8082                	ret
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016b0a:	4401                	li	s0,0
    TEST_END();
    80016b0c:	0001c597          	auipc	a1,0x1c
    80016b10:	bac58593          	addi	a1,a1,-1108 # 800326b8 <__func__.0+0x2d0>
    80016b14:	bfd9                	j	80016aea <amo_page_fault_3+0xc0>
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016b16:	0001c517          	auipc	a0,0x1c
    80016b1a:	bea50513          	addi	a0,a0,-1046 # 80032700 <__func__.0+0x318>
    80016b1e:	1a7180ef          	jal	8002f4c4 <printf>
    80016b22:	02900513          	li	a0,41
    80016b26:	68c170ef          	jal	8002e1b2 <putchar>
    80016b2a:	b75d                	j	80016ad0 <amo_page_fault_3+0xa6>

0000000080016b2c <amo_page_fault_4>:

bool amo_page_fault_4(){
    80016b2c:	1101                	addi	sp,sp,-32

    TEST_START();
    80016b2e:	0001a597          	auipc	a1,0x1a
    80016b32:	27a58593          	addi	a1,a1,634 # 80030da8 <__func__.2>
    80016b36:	0001c517          	auipc	a0,0x1c
    80016b3a:	b9250513          	addi	a0,a0,-1134 # 800326c8 <__func__.0+0x2e0>
bool amo_page_fault_4(){
    80016b3e:	ec06                	sd	ra,24(sp)
    80016b40:	e822                	sd	s0,16(sp)
    80016b42:	e426                	sd	s1,8(sp)
    80016b44:	e04a                	sd	s2,0(sp)
    TEST_START();
    80016b46:	17f180ef          	jal	8002f4c4 <printf>
    80016b4a:	4529                	li	a0,10
    80016b4c:	666170ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80016b50:	450d                	li	a0,3
    80016b52:	bc2ea0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80016b56:	a97e90ef          	jal	800005ec <hspt_init>
    hpt_init();
    80016b5a:	e77e90ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80016b5e:	c2be90ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80016b62:	4509                	li	a0,2
    80016b64:	bb0ea0ef          	jal	80000f14 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80016b68:	ab0ea0ef          	jal	80000e18 <test_setup_except_function>
    80016b6c:	deadc7b7          	lui	a5,0xdeadc
    80016b70:	40019737          	lui	a4,0x40019
    80016b74:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80016b78:	070a                	slli	a4,a4,0x2
    80016b7a:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016b7e:	08c00593          	li	a1,140
    80016b82:	00021617          	auipc	a2,0x21
    80016b86:	2ee60613          	addi	a2,a2,750 # 80037e70 <__func__.0+0x5a88>
    80016b8a:	0001c517          	auipc	a0,0x1c
    80016b8e:	b5650513          	addi	a0,a0,-1194 # 800326e0 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    80016b92:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016b96:	12f180ef          	jal	8002f4c4 <printf>
    80016b9a:	00045797          	auipc	a5,0x45
    80016b9e:	4777c783          	lbu	a5,1143(a5) # 8005c011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80016ba2:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016ba4:	00045917          	auipc	s2,0x45
    80016ba8:	46c90913          	addi	s2,s2,1132 # 8005c010 <excpt>
    80016bac:	0001c597          	auipc	a1,0x1c
    80016bb0:	b0c58593          	addi	a1,a1,-1268 # 800326b8 <__func__.0+0x2d0>
    80016bb4:	cf91                	beqz	a5,80016bd0 <amo_page_fault_4+0xa4>
    80016bb6:	00893703          	ld	a4,8(s2)
    80016bba:	47bd                	li	a5,15
    80016bbc:	0001c597          	auipc	a1,0x1c
    80016bc0:	aec58593          	addi	a1,a1,-1300 # 800326a8 <__func__.0+0x2c0>
    80016bc4:	00f70663          	beq	a4,a5,80016bd0 <amo_page_fault_4+0xa4>
    80016bc8:	0001c597          	auipc	a1,0x1c
    80016bcc:	af058593          	addi	a1,a1,-1296 # 800326b8 <__func__.0+0x2d0>
    80016bd0:	0001c517          	auipc	a0,0x1c
    80016bd4:	b2850513          	addi	a0,a0,-1240 # 800326f8 <__func__.0+0x310>
    80016bd8:	0ed180ef          	jal	8002f4c4 <printf>
    80016bdc:	00045797          	auipc	a5,0x45
    80016be0:	4357c783          	lbu	a5,1077(a5) # 8005c011 <excpt+0x1>
    80016be4:	c791                	beqz	a5,80016bf0 <amo_page_fault_4+0xc4>
    80016be6:	00893703          	ld	a4,8(s2)
    80016bea:	47bd                	li	a5,15
    80016bec:	00f70c63          	beq	a4,a5,80016c04 <amo_page_fault_4+0xd8>
    80016bf0:	0001c517          	auipc	a0,0x1c
    80016bf4:	b1050513          	addi	a0,a0,-1264 # 80032700 <__func__.0+0x318>
    80016bf8:	0cd180ef          	jal	8002f4c4 <printf>
    80016bfc:	02900513          	li	a0,41
    80016c00:	5b2170ef          	jal	8002e1b2 <putchar>
    80016c04:	4529                	li	a0,10
    80016c06:	5ac170ef          	jal	8002e1b2 <putchar>
    80016c0a:	00045797          	auipc	a5,0x45
    80016c0e:	4077c783          	lbu	a5,1031(a5) # 8005c011 <excpt+0x1>
    80016c12:	4481                	li	s1,0
    80016c14:	c791                	beqz	a5,80016c20 <amo_page_fault_4+0xf4>
    80016c16:	00893483          	ld	s1,8(s2)
    80016c1a:	14c5                	addi	s1,s1,-15
    80016c1c:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80016c20:	9f8ea0ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80016c24:	000807b7          	lui	a5,0x80
    80016c28:	0795                	addi	a5,a5,5 # 80005 <_test_table_size+0x80004>
    80016c2a:	07b6                	slli	a5,a5,0xd
    80016c2c:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GURWX);

    value = amoand_d(addr,value);

    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80016c30:	08c00593          	li	a1,140
    80016c34:	00021617          	auipc	a2,0x21
    80016c38:	27460613          	addi	a2,a2,628 # 80037ea8 <__func__.0+0x5ac0>
    80016c3c:	0001c517          	auipc	a0,0x1c
    80016c40:	aa450513          	addi	a0,a0,-1372 # 800326e0 <__func__.0+0x2f8>
    80016c44:	081180ef          	jal	8002f4c4 <printf>
    80016c48:	00045797          	auipc	a5,0x45
    80016c4c:	3c97c783          	lbu	a5,969(a5) # 8005c011 <excpt+0x1>
    80016c50:	0001c597          	auipc	a1,0x1c
    80016c54:	a6858593          	addi	a1,a1,-1432 # 800326b8 <__func__.0+0x2d0>
    80016c58:	cf91                	beqz	a5,80016c74 <amo_page_fault_4+0x148>
    80016c5a:	00893703          	ld	a4,8(s2)
    80016c5e:	47bd                	li	a5,15
    80016c60:	0001c597          	auipc	a1,0x1c
    80016c64:	a4858593          	addi	a1,a1,-1464 # 800326a8 <__func__.0+0x2c0>
    80016c68:	00f70663          	beq	a4,a5,80016c74 <amo_page_fault_4+0x148>
    80016c6c:	0001c597          	auipc	a1,0x1c
    80016c70:	a4c58593          	addi	a1,a1,-1460 # 800326b8 <__func__.0+0x2d0>
    80016c74:	0001c517          	auipc	a0,0x1c
    80016c78:	a8450513          	addi	a0,a0,-1404 # 800326f8 <__func__.0+0x310>
    80016c7c:	049180ef          	jal	8002f4c4 <printf>
    80016c80:	00045797          	auipc	a5,0x45
    80016c84:	3917c783          	lbu	a5,913(a5) # 8005c011 <excpt+0x1>
    80016c88:	c791                	beqz	a5,80016c94 <amo_page_fault_4+0x168>
    80016c8a:	00893703          	ld	a4,8(s2)
    80016c8e:	47bd                	li	a5,15
    80016c90:	00f70c63          	beq	a4,a5,80016ca8 <amo_page_fault_4+0x17c>
    80016c94:	0001c517          	auipc	a0,0x1c
    80016c98:	a6c50513          	addi	a0,a0,-1428 # 80032700 <__func__.0+0x318>
    80016c9c:	029180ef          	jal	8002f4c4 <printf>
    80016ca0:	02900513          	li	a0,41
    80016ca4:	50e170ef          	jal	8002e1b2 <putchar>
    80016ca8:	4529                	li	a0,10
    80016caa:	508170ef          	jal	8002e1b2 <putchar>
    80016cae:	c499                	beqz	s1,80016cbc <amo_page_fault_4+0x190>
    80016cb0:	00045797          	auipc	a5,0x45
    80016cb4:	3617c783          	lbu	a5,865(a5) # 8005c011 <excpt+0x1>
    80016cb8:	4481                	li	s1,0
    80016cba:	e3cd                	bnez	a5,80016d5c <amo_page_fault_4+0x230>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80016cbc:	95cea0ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80016cc0:	4785                	li	a5,1
    80016cc2:	1782                	slli	a5,a5,0x20
    80016cc4:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016cc8:	08c00593          	li	a1,140
    80016ccc:	00021617          	auipc	a2,0x21
    80016cd0:	20c60613          	addi	a2,a2,524 # 80037ed8 <__func__.0+0x5af0>
    80016cd4:	0001c517          	auipc	a0,0x1c
    80016cd8:	a0c50513          	addi	a0,a0,-1524 # 800326e0 <__func__.0+0x2f8>
    80016cdc:	7e8180ef          	jal	8002f4c4 <printf>
    80016ce0:	00045797          	auipc	a5,0x45
    80016ce4:	3317c783          	lbu	a5,817(a5) # 8005c011 <excpt+0x1>
    80016ce8:	0001c597          	auipc	a1,0x1c
    80016cec:	9d058593          	addi	a1,a1,-1584 # 800326b8 <__func__.0+0x2d0>
    80016cf0:	e789                	bnez	a5,80016cfa <amo_page_fault_4+0x1ce>
    80016cf2:	0001c597          	auipc	a1,0x1c
    80016cf6:	9b658593          	addi	a1,a1,-1610 # 800326a8 <__func__.0+0x2c0>
    80016cfa:	0001c517          	auipc	a0,0x1c
    80016cfe:	9fe50513          	addi	a0,a0,-1538 # 800326f8 <__func__.0+0x310>
    80016d02:	7c2180ef          	jal	8002f4c4 <printf>
    80016d06:	00045797          	auipc	a5,0x45
    80016d0a:	30b7c783          	lbu	a5,779(a5) # 8005c011 <excpt+0x1>
    80016d0e:	efa9                	bnez	a5,80016d68 <amo_page_fault_4+0x23c>
    80016d10:	4529                	li	a0,10
    80016d12:	4a0170ef          	jal	8002e1b2 <putchar>
    80016d16:	c491                	beqz	s1,80016d22 <amo_page_fault_4+0x1f6>
    80016d18:	00045797          	auipc	a5,0x45
    80016d1c:	2f97c783          	lbu	a5,761(a5) # 8005c011 <excpt+0x1>
    80016d20:	cb85                	beqz	a5,80016d50 <amo_page_fault_4+0x224>
    80016d22:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80016d24:	0001c597          	auipc	a1,0x1c
    80016d28:	99458593          	addi	a1,a1,-1644 # 800326b8 <__func__.0+0x2d0>
    80016d2c:	0001c517          	auipc	a0,0x1c
    80016d30:	a3450513          	addi	a0,a0,-1484 # 80032760 <__func__.0+0x378>
    80016d34:	790180ef          	jal	8002f4c4 <printf>
    80016d38:	4511                	li	a0,4
    80016d3a:	9daea0ef          	jal	80000f14 <goto_priv>
    80016d3e:	a39ea0ef          	jal	80001776 <reset_state>
}
    80016d42:	60e2                	ld	ra,24(sp)
    80016d44:	8522                	mv	a0,s0
    80016d46:	6442                	ld	s0,16(sp)
    80016d48:	64a2                	ld	s1,8(sp)
    80016d4a:	6902                	ld	s2,0(sp)
    80016d4c:	6105                	addi	sp,sp,32
    80016d4e:	8082                	ret
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016d50:	4405                	li	s0,1
    TEST_END();
    80016d52:	0001c597          	auipc	a1,0x1c
    80016d56:	95658593          	addi	a1,a1,-1706 # 800326a8 <__func__.0+0x2c0>
    80016d5a:	bfc9                	j	80016d2c <amo_page_fault_4+0x200>
    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80016d5c:	00893483          	ld	s1,8(s2)
    80016d60:	14c5                	addi	s1,s1,-15
    80016d62:	0014b493          	seqz	s1,s1
    80016d66:	bf99                	j	80016cbc <amo_page_fault_4+0x190>
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016d68:	0001c517          	auipc	a0,0x1c
    80016d6c:	99850513          	addi	a0,a0,-1640 # 80032700 <__func__.0+0x318>
    80016d70:	754180ef          	jal	8002f4c4 <printf>
    80016d74:	02900513          	li	a0,41
    80016d78:	43a170ef          	jal	8002e1b2 <putchar>
    80016d7c:	bf51                	j	80016d10 <amo_page_fault_4+0x1e4>

0000000080016d7e <amo_page_fault_5>:

bool amo_page_fault_5(){
    80016d7e:	1101                	addi	sp,sp,-32

    TEST_START();
    80016d80:	0001a597          	auipc	a1,0x1a
    80016d84:	04058593          	addi	a1,a1,64 # 80030dc0 <__func__.1>
    80016d88:	0001c517          	auipc	a0,0x1c
    80016d8c:	94050513          	addi	a0,a0,-1728 # 800326c8 <__func__.0+0x2e0>
bool amo_page_fault_5(){
    80016d90:	ec06                	sd	ra,24(sp)
    80016d92:	e822                	sd	s0,16(sp)
    80016d94:	e426                	sd	s1,8(sp)
    TEST_START();
    80016d96:	72e180ef          	jal	8002f4c4 <printf>
    80016d9a:	4529                	li	a0,10
    80016d9c:	416170ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80016da0:	450d                	li	a0,3
    80016da2:	972ea0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80016da6:	847e90ef          	jal	800005ec <hspt_init>
    hpt_init();
    80016daa:	c27e90ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80016dae:	9dbe90ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    80016db2:	4511                	li	a0,4
    80016db4:	960ea0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80016db8:	000407b7          	lui	a5,0x40
    80016dbc:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80016dc0:	4509                	li	a0,2
    80016dc2:	952ea0ef          	jal	80000f14 <goto_priv>
   
    //执行amomin_d指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    80016dc6:	852ea0ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80016dca:	000807b7          	lui	a5,0x80
    80016dce:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016dd0:	4701                	li	a4,0
    80016dd2:	07b6                	slli	a5,a5,0xd
    80016dd4:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016dd8:	08c00593          	li	a1,140
    80016ddc:	00021617          	auipc	a2,0x21
    80016de0:	13460613          	addi	a2,a2,308 # 80037f10 <__func__.0+0x5b28>
    80016de4:	0001c517          	auipc	a0,0x1c
    80016de8:	8fc50513          	addi	a0,a0,-1796 # 800326e0 <__func__.0+0x2f8>
    80016dec:	6d8180ef          	jal	8002f4c4 <printf>
    80016df0:	00045797          	auipc	a5,0x45
    80016df4:	2217c783          	lbu	a5,545(a5) # 8005c011 <excpt+0x1>
    80016df8:	00045497          	auipc	s1,0x45
    80016dfc:	21848493          	addi	s1,s1,536 # 8005c010 <excpt>
    80016e00:	0001c597          	auipc	a1,0x1c
    80016e04:	8b858593          	addi	a1,a1,-1864 # 800326b8 <__func__.0+0x2d0>
    80016e08:	cf89                	beqz	a5,80016e22 <amo_page_fault_5+0xa4>
    80016e0a:	6498                	ld	a4,8(s1)
    80016e0c:	47bd                	li	a5,15
    80016e0e:	0001c597          	auipc	a1,0x1c
    80016e12:	89a58593          	addi	a1,a1,-1894 # 800326a8 <__func__.0+0x2c0>
    80016e16:	00f70663          	beq	a4,a5,80016e22 <amo_page_fault_5+0xa4>
    80016e1a:	0001c597          	auipc	a1,0x1c
    80016e1e:	89e58593          	addi	a1,a1,-1890 # 800326b8 <__func__.0+0x2d0>
    80016e22:	0001c517          	auipc	a0,0x1c
    80016e26:	8d650513          	addi	a0,a0,-1834 # 800326f8 <__func__.0+0x310>
    80016e2a:	69a180ef          	jal	8002f4c4 <printf>
    80016e2e:	00045797          	auipc	a5,0x45
    80016e32:	1e37c783          	lbu	a5,483(a5) # 8005c011 <excpt+0x1>
    80016e36:	c789                	beqz	a5,80016e40 <amo_page_fault_5+0xc2>
    80016e38:	6498                	ld	a4,8(s1)
    80016e3a:	47bd                	li	a5,15
    80016e3c:	00f70c63          	beq	a4,a5,80016e54 <amo_page_fault_5+0xd6>
    80016e40:	0001c517          	auipc	a0,0x1c
    80016e44:	8c050513          	addi	a0,a0,-1856 # 80032700 <__func__.0+0x318>
    80016e48:	67c180ef          	jal	8002f4c4 <printf>
    80016e4c:	02900513          	li	a0,41
    80016e50:	362170ef          	jal	8002e1b2 <putchar>
    80016e54:	4529                	li	a0,10
    80016e56:	35c170ef          	jal	8002e1b2 <putchar>
    80016e5a:	00045417          	auipc	s0,0x45
    80016e5e:	1b744403          	lbu	s0,439(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80016e62:	0001c597          	auipc	a1,0x1c
    80016e66:	85658593          	addi	a1,a1,-1962 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016e6a:	cc11                	beqz	s0,80016e86 <amo_page_fault_5+0x108>
    80016e6c:	6498                	ld	a4,8(s1)
    80016e6e:	47bd                	li	a5,15
    TEST_END();
    80016e70:	0001c597          	auipc	a1,0x1c
    80016e74:	83858593          	addi	a1,a1,-1992 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016e78:	00f70763          	beq	a4,a5,80016e86 <amo_page_fault_5+0x108>
    80016e7c:	4401                	li	s0,0
    TEST_END();
    80016e7e:	0001c597          	auipc	a1,0x1c
    80016e82:	83a58593          	addi	a1,a1,-1990 # 800326b8 <__func__.0+0x2d0>
    80016e86:	0001c517          	auipc	a0,0x1c
    80016e8a:	8da50513          	addi	a0,a0,-1830 # 80032760 <__func__.0+0x378>
    80016e8e:	636180ef          	jal	8002f4c4 <printf>
    80016e92:	4511                	li	a0,4
    80016e94:	880ea0ef          	jal	80000f14 <goto_priv>
    80016e98:	8dfea0ef          	jal	80001776 <reset_state>
}
    80016e9c:	60e2                	ld	ra,24(sp)
    80016e9e:	8522                	mv	a0,s0
    80016ea0:	6442                	ld	s0,16(sp)
    80016ea2:	64a2                	ld	s1,8(sp)
    80016ea4:	6105                	addi	sp,sp,32
    80016ea6:	8082                	ret

0000000080016ea8 <amo_page_fault_6>:

bool amo_page_fault_6(){
    80016ea8:	1141                	addi	sp,sp,-16

    TEST_START();
    80016eaa:	0001a597          	auipc	a1,0x1a
    80016eae:	f2e58593          	addi	a1,a1,-210 # 80030dd8 <__func__.0>
    80016eb2:	0001c517          	auipc	a0,0x1c
    80016eb6:	81650513          	addi	a0,a0,-2026 # 800326c8 <__func__.0+0x2e0>
bool amo_page_fault_6(){
    80016eba:	e406                	sd	ra,8(sp)
    80016ebc:	e022                	sd	s0,0(sp)
    TEST_START();
    80016ebe:	606180ef          	jal	8002f4c4 <printf>
    80016ec2:	4529                	li	a0,10
    80016ec4:	2ee170ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80016ec8:	450d                	li	a0,3
    80016eca:	84aea0ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80016ece:	f1ee90ef          	jal	800005ec <hspt_init>
    hpt_init();
    80016ed2:	affe90ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80016ed6:	8b3e90ef          	jal	80000788 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016eda:	4511                	li	a0,4
    80016edc:	838ea0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80016ee0:	000407b7          	lui	a5,0x40
    80016ee4:	2007a073          	csrs	vsstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_VS);   
    80016ee8:	4509                	li	a0,2
    80016eea:	82aea0ef          	jal	80000f14 <goto_priv>
    
    TEST_SETUP_EXCEPT();
    80016eee:	f2be90ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80016ef2:	000807b7          	lui	a5,0x80
    80016ef6:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016ef8:	4701                	li	a4,0
    80016efa:	07b6                	slli	a5,a5,0xd
    80016efc:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80016f00:	08c00593          	li	a1,140
    80016f04:	00021617          	auipc	a2,0x21
    80016f08:	05c60613          	addi	a2,a2,92 # 80037f60 <__func__.0+0x5b78>
    80016f0c:	0001b517          	auipc	a0,0x1b
    80016f10:	7d450513          	addi	a0,a0,2004 # 800326e0 <__func__.0+0x2f8>
    80016f14:	5b0180ef          	jal	8002f4c4 <printf>
    80016f18:	00045797          	auipc	a5,0x45
    80016f1c:	0f97c783          	lbu	a5,249(a5) # 8005c011 <excpt+0x1>
    80016f20:	0001b597          	auipc	a1,0x1b
    80016f24:	78858593          	addi	a1,a1,1928 # 800326a8 <__func__.0+0x2c0>
    80016f28:	c789                	beqz	a5,80016f32 <amo_page_fault_6+0x8a>
    80016f2a:	0001b597          	auipc	a1,0x1b
    80016f2e:	78e58593          	addi	a1,a1,1934 # 800326b8 <__func__.0+0x2d0>
    80016f32:	0001b517          	auipc	a0,0x1b
    80016f36:	7c650513          	addi	a0,a0,1990 # 800326f8 <__func__.0+0x310>
    80016f3a:	58a180ef          	jal	8002f4c4 <printf>
    80016f3e:	00045797          	auipc	a5,0x45
    80016f42:	0d37c783          	lbu	a5,211(a5) # 8005c011 <excpt+0x1>
    80016f46:	e7a1                	bnez	a5,80016f8e <amo_page_fault_6+0xe6>
    80016f48:	4529                	li	a0,10
    80016f4a:	268170ef          	jal	8002e1b2 <putchar>
    80016f4e:	00045797          	auipc	a5,0x45
    80016f52:	0c37c783          	lbu	a5,195(a5) # 8005c011 <excpt+0x1>
    80016f56:	e795                	bnez	a5,80016f82 <amo_page_fault_6+0xda>
    80016f58:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016f5a:	0001b597          	auipc	a1,0x1b
    80016f5e:	74e58593          	addi	a1,a1,1870 # 800326a8 <__func__.0+0x2c0>
    80016f62:	0001b517          	auipc	a0,0x1b
    80016f66:	7fe50513          	addi	a0,a0,2046 # 80032760 <__func__.0+0x378>
    80016f6a:	55a180ef          	jal	8002f4c4 <printf>
    80016f6e:	4511                	li	a0,4
    80016f70:	fa5e90ef          	jal	80000f14 <goto_priv>
    80016f74:	803ea0ef          	jal	80001776 <reset_state>
}
    80016f78:	60a2                	ld	ra,8(sp)
    80016f7a:	8522                	mv	a0,s0
    80016f7c:	6402                	ld	s0,0(sp)
    80016f7e:	0141                	addi	sp,sp,16
    80016f80:	8082                	ret
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80016f82:	4401                	li	s0,0
    TEST_END();
    80016f84:	0001b597          	auipc	a1,0x1b
    80016f88:	73458593          	addi	a1,a1,1844 # 800326b8 <__func__.0+0x2d0>
    80016f8c:	bfd9                	j	80016f62 <amo_page_fault_6+0xba>
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80016f8e:	0001b517          	auipc	a0,0x1b
    80016f92:	77250513          	addi	a0,a0,1906 # 80032700 <__func__.0+0x318>
    80016f96:	52e180ef          	jal	8002f4c4 <printf>
    80016f9a:	02900513          	li	a0,41
    80016f9e:	214170ef          	jal	8002e1b2 <putchar>
    80016fa2:	b75d                	j	80016f48 <amo_page_fault_6+0xa0>

0000000080016fa4 <load_guest_page_fault_1>:
 #include <rvh_test.h>
#include <page_tables.h>

bool load_guest_page_fault_1(){
    80016fa4:	1101                	addi	sp,sp,-32

    TEST_START();
    80016fa6:	0001a597          	auipc	a1,0x1a
    80016faa:	e4a58593          	addi	a1,a1,-438 # 80030df0 <__func__.37>
    80016fae:	0001b517          	auipc	a0,0x1b
    80016fb2:	71a50513          	addi	a0,a0,1818 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_1(){
    80016fb6:	ec06                	sd	ra,24(sp)
    80016fb8:	e822                	sd	s0,16(sp)
    80016fba:	e426                	sd	s1,8(sp)
    TEST_START();
    80016fbc:	508180ef          	jal	8002f4c4 <printf>
    80016fc0:	4529                	li	a0,10
    80016fc2:	1f0170ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80016fc6:	450d                	li	a0,3
    80016fc8:	f4de90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80016fcc:	e20e90ef          	jal	800005ec <hspt_init>
    hpt_init();
    80016fd0:	a01e90ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80016fd4:	fb4e90ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80016fd8:	450d                	li	a0,3
    80016fda:	f3be90ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80016fde:	4509                	li	a0,2
    80016fe0:	e55e90ef          	jal	80000e34 <set_prev_priv>

    //执行取指相关指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80016fe4:	e35e90ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80016fe8:	001007b7          	lui	a5,0x100
    80016fec:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80016ff0:	07b2                	slli	a5,a5,0xc
    80016ff2:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = hs_page_base(VSRWX_GI);
    hlvd(vaddr);
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80016ff6:	08c00593          	li	a1,140
    80016ffa:	00021617          	auipc	a2,0x21
    80016ffe:	fae60613          	addi	a2,a2,-82 # 80037fa8 <__func__.0+0x5bc0>
    80017002:	0001b517          	auipc	a0,0x1b
    80017006:	6de50513          	addi	a0,a0,1758 # 800326e0 <__func__.0+0x2f8>
    8001700a:	4ba180ef          	jal	8002f4c4 <printf>
    8001700e:	00045797          	auipc	a5,0x45
    80017012:	0037c783          	lbu	a5,3(a5) # 8005c011 <excpt+0x1>
    80017016:	00045497          	auipc	s1,0x45
    8001701a:	ffa48493          	addi	s1,s1,-6 # 8005c010 <excpt>
    8001701e:	0001b597          	auipc	a1,0x1b
    80017022:	69a58593          	addi	a1,a1,1690 # 800326b8 <__func__.0+0x2d0>
    80017026:	cf89                	beqz	a5,80017040 <load_guest_page_fault_1+0x9c>
    80017028:	6498                	ld	a4,8(s1)
    8001702a:	47d5                	li	a5,21
    8001702c:	0001b597          	auipc	a1,0x1b
    80017030:	67c58593          	addi	a1,a1,1660 # 800326a8 <__func__.0+0x2c0>
    80017034:	00f70663          	beq	a4,a5,80017040 <load_guest_page_fault_1+0x9c>
    80017038:	0001b597          	auipc	a1,0x1b
    8001703c:	68058593          	addi	a1,a1,1664 # 800326b8 <__func__.0+0x2d0>
    80017040:	0001b517          	auipc	a0,0x1b
    80017044:	6b850513          	addi	a0,a0,1720 # 800326f8 <__func__.0+0x310>
    80017048:	47c180ef          	jal	8002f4c4 <printf>
    8001704c:	00045797          	auipc	a5,0x45
    80017050:	fc57c783          	lbu	a5,-59(a5) # 8005c011 <excpt+0x1>
    80017054:	c789                	beqz	a5,8001705e <load_guest_page_fault_1+0xba>
    80017056:	6498                	ld	a4,8(s1)
    80017058:	47d5                	li	a5,21
    8001705a:	00f70c63          	beq	a4,a5,80017072 <load_guest_page_fault_1+0xce>
    8001705e:	0001b517          	auipc	a0,0x1b
    80017062:	6a250513          	addi	a0,a0,1698 # 80032700 <__func__.0+0x318>
    80017066:	45e180ef          	jal	8002f4c4 <printf>
    8001706a:	02900513          	li	a0,41
    8001706e:	144170ef          	jal	8002e1b2 <putchar>
    80017072:	4529                	li	a0,10
    80017074:	13e170ef          	jal	8002e1b2 <putchar>
    80017078:	00045797          	auipc	a5,0x45
    8001707c:	f997c783          	lbu	a5,-103(a5) # 8005c011 <excpt+0x1>
    80017080:	4401                	li	s0,0
    80017082:	c789                	beqz	a5,8001708c <load_guest_page_fault_1+0xe8>
    80017084:	6480                	ld	s0,8(s1)
    80017086:	142d                	addi	s0,s0,-21
    80017088:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LGPF
    );


    //执行hlvb指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    8001708c:	d8de90ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80017090:	001007b7          	lui	a5,0x100
    80017094:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017098:	07b2                	slli	a5,a5,0xc
    8001709a:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSRWX_GI);

    hlvb(vaddr);   
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001709e:	08c00593          	li	a1,140
    800170a2:	00021617          	auipc	a2,0x21
    800170a6:	f5660613          	addi	a2,a2,-170 # 80037ff8 <__func__.0+0x5c10>
    800170aa:	0001b517          	auipc	a0,0x1b
    800170ae:	63650513          	addi	a0,a0,1590 # 800326e0 <__func__.0+0x2f8>
    800170b2:	412180ef          	jal	8002f4c4 <printf>
    800170b6:	00045797          	auipc	a5,0x45
    800170ba:	f5b7c783          	lbu	a5,-165(a5) # 8005c011 <excpt+0x1>
    800170be:	0001b597          	auipc	a1,0x1b
    800170c2:	5fa58593          	addi	a1,a1,1530 # 800326b8 <__func__.0+0x2d0>
    800170c6:	cf89                	beqz	a5,800170e0 <load_guest_page_fault_1+0x13c>
    800170c8:	6498                	ld	a4,8(s1)
    800170ca:	47d5                	li	a5,21
    800170cc:	0001b597          	auipc	a1,0x1b
    800170d0:	5dc58593          	addi	a1,a1,1500 # 800326a8 <__func__.0+0x2c0>
    800170d4:	00f70663          	beq	a4,a5,800170e0 <load_guest_page_fault_1+0x13c>
    800170d8:	0001b597          	auipc	a1,0x1b
    800170dc:	5e058593          	addi	a1,a1,1504 # 800326b8 <__func__.0+0x2d0>
    800170e0:	0001b517          	auipc	a0,0x1b
    800170e4:	61850513          	addi	a0,a0,1560 # 800326f8 <__func__.0+0x310>
    800170e8:	3dc180ef          	jal	8002f4c4 <printf>
    800170ec:	00045797          	auipc	a5,0x45
    800170f0:	f257c783          	lbu	a5,-219(a5) # 8005c011 <excpt+0x1>
    800170f4:	c789                	beqz	a5,800170fe <load_guest_page_fault_1+0x15a>
    800170f6:	6498                	ld	a4,8(s1)
    800170f8:	47d5                	li	a5,21
    800170fa:	00f70c63          	beq	a4,a5,80017112 <load_guest_page_fault_1+0x16e>
    800170fe:	0001b517          	auipc	a0,0x1b
    80017102:	60250513          	addi	a0,a0,1538 # 80032700 <__func__.0+0x318>
    80017106:	3be180ef          	jal	8002f4c4 <printf>
    8001710a:	02900513          	li	a0,41
    8001710e:	0a4170ef          	jal	8002e1b2 <putchar>
    80017112:	4529                	li	a0,10
    80017114:	09e170ef          	jal	8002e1b2 <putchar>
    80017118:	c015                	beqz	s0,8001713c <load_guest_page_fault_1+0x198>
    8001711a:	00045417          	auipc	s0,0x45
    8001711e:	ef744403          	lbu	s0,-265(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80017122:	0001b597          	auipc	a1,0x1b
    80017126:	59658593          	addi	a1,a1,1430 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001712a:	cc11                	beqz	s0,80017146 <load_guest_page_fault_1+0x1a2>
    8001712c:	6498                	ld	a4,8(s1)
    8001712e:	47d5                	li	a5,21
    TEST_END();
    80017130:	0001b597          	auipc	a1,0x1b
    80017134:	57858593          	addi	a1,a1,1400 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80017138:	00f70763          	beq	a4,a5,80017146 <load_guest_page_fault_1+0x1a2>
    8001713c:	4401                	li	s0,0
    TEST_END();
    8001713e:	0001b597          	auipc	a1,0x1b
    80017142:	57a58593          	addi	a1,a1,1402 # 800326b8 <__func__.0+0x2d0>
    80017146:	0001b517          	auipc	a0,0x1b
    8001714a:	61a50513          	addi	a0,a0,1562 # 80032760 <__func__.0+0x378>
    8001714e:	376180ef          	jal	8002f4c4 <printf>
    80017152:	4511                	li	a0,4
    80017154:	dc1e90ef          	jal	80000f14 <goto_priv>
    80017158:	e1eea0ef          	jal	80001776 <reset_state>
}
    8001715c:	60e2                	ld	ra,24(sp)
    8001715e:	8522                	mv	a0,s0
    80017160:	6442                	ld	s0,16(sp)
    80017162:	64a2                	ld	s1,8(sp)
    80017164:	6105                	addi	sp,sp,32
    80017166:	8082                	ret

0000000080017168 <load_guest_page_fault_2>:

bool load_guest_page_fault_2(){
    80017168:	1101                	addi	sp,sp,-32

    TEST_START();
    8001716a:	0001a597          	auipc	a1,0x1a
    8001716e:	c9e58593          	addi	a1,a1,-866 # 80030e08 <__func__.35>
    80017172:	0001b517          	auipc	a0,0x1b
    80017176:	55650513          	addi	a0,a0,1366 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_2(){
    8001717a:	ec06                	sd	ra,24(sp)
    8001717c:	e822                	sd	s0,16(sp)
    8001717e:	e426                	sd	s1,8(sp)
    TEST_START();
    80017180:	344180ef          	jal	8002f4c4 <printf>
    80017184:	4529                	li	a0,10
    80017186:	02c170ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8001718a:	450d                	li	a0,3
    8001718c:	d89e90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80017190:	c5ce90ef          	jal	800005ec <hspt_init>
    hpt_init();
    80017194:	83de90ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80017198:	df0e90ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001719c:	450d                	li	a0,3
    8001719e:	d77e90ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    800171a2:	4509                	li	a0,2
    800171a4:	c91e90ef          	jal	80000e34 <set_prev_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800171a8:	c71e90ef          	jal	80000e18 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800171ac:	000807b7          	lui	a5,0x80
    800171b0:	1007b073          	csrc	sstatus,a5
    asm volatile(
    800171b4:	001007b7          	lui	a5,0x100
    800171b8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800171bc:	07b2                	slli	a5,a5,0xc
    800171be:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800171c2:	08c00593          	li	a1,140
    800171c6:	00021617          	auipc	a2,0x21
    800171ca:	e9260613          	addi	a2,a2,-366 # 80038058 <__func__.0+0x5c70>
    800171ce:	0001b517          	auipc	a0,0x1b
    800171d2:	51250513          	addi	a0,a0,1298 # 800326e0 <__func__.0+0x2f8>
    800171d6:	2ee180ef          	jal	8002f4c4 <printf>
    800171da:	00045797          	auipc	a5,0x45
    800171de:	e377c783          	lbu	a5,-457(a5) # 8005c011 <excpt+0x1>
    800171e2:	00045497          	auipc	s1,0x45
    800171e6:	e2e48493          	addi	s1,s1,-466 # 8005c010 <excpt>
    800171ea:	0001b597          	auipc	a1,0x1b
    800171ee:	4ce58593          	addi	a1,a1,1230 # 800326b8 <__func__.0+0x2d0>
    800171f2:	cf89                	beqz	a5,8001720c <load_guest_page_fault_2+0xa4>
    800171f4:	6498                	ld	a4,8(s1)
    800171f6:	47d5                	li	a5,21
    800171f8:	0001b597          	auipc	a1,0x1b
    800171fc:	4b058593          	addi	a1,a1,1200 # 800326a8 <__func__.0+0x2c0>
    80017200:	00f70663          	beq	a4,a5,8001720c <load_guest_page_fault_2+0xa4>
    80017204:	0001b597          	auipc	a1,0x1b
    80017208:	4b458593          	addi	a1,a1,1204 # 800326b8 <__func__.0+0x2d0>
    8001720c:	0001b517          	auipc	a0,0x1b
    80017210:	4ec50513          	addi	a0,a0,1260 # 800326f8 <__func__.0+0x310>
    80017214:	2b0180ef          	jal	8002f4c4 <printf>
    80017218:	00045797          	auipc	a5,0x45
    8001721c:	df97c783          	lbu	a5,-519(a5) # 8005c011 <excpt+0x1>
    80017220:	c789                	beqz	a5,8001722a <load_guest_page_fault_2+0xc2>
    80017222:	6498                	ld	a4,8(s1)
    80017224:	47d5                	li	a5,21
    80017226:	00f70c63          	beq	a4,a5,8001723e <load_guest_page_fault_2+0xd6>
    8001722a:	0001b517          	auipc	a0,0x1b
    8001722e:	4d650513          	addi	a0,a0,1238 # 80032700 <__func__.0+0x318>
    80017232:	292180ef          	jal	8002f4c4 <printf>
    80017236:	02900513          	li	a0,41
    8001723a:	779160ef          	jal	8002e1b2 <putchar>
    8001723e:	4529                	li	a0,10
    80017240:	773160ef          	jal	8002e1b2 <putchar>
    80017244:	00045417          	auipc	s0,0x45
    80017248:	dcd44403          	lbu	s0,-563(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001724c:	0001b597          	auipc	a1,0x1b
    80017250:	46c58593          	addi	a1,a1,1132 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017254:	cc11                	beqz	s0,80017270 <load_guest_page_fault_2+0x108>
    80017256:	6498                	ld	a4,8(s1)
    80017258:	47d5                	li	a5,21
    TEST_END();
    8001725a:	0001b597          	auipc	a1,0x1b
    8001725e:	44e58593          	addi	a1,a1,1102 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017262:	00f70763          	beq	a4,a5,80017270 <load_guest_page_fault_2+0x108>
    80017266:	4401                	li	s0,0
    TEST_END();
    80017268:	0001b597          	auipc	a1,0x1b
    8001726c:	45058593          	addi	a1,a1,1104 # 800326b8 <__func__.0+0x2d0>
    80017270:	0001b517          	auipc	a0,0x1b
    80017274:	4f050513          	addi	a0,a0,1264 # 80032760 <__func__.0+0x378>
    80017278:	24c180ef          	jal	8002f4c4 <printf>
    8001727c:	4511                	li	a0,4
    8001727e:	c97e90ef          	jal	80000f14 <goto_priv>
    80017282:	cf4ea0ef          	jal	80001776 <reset_state>
}
    80017286:	60e2                	ld	ra,24(sp)
    80017288:	8522                	mv	a0,s0
    8001728a:	6442                	ld	s0,16(sp)
    8001728c:	64a2                	ld	s1,8(sp)
    8001728e:	6105                	addi	sp,sp,32
    80017290:	8082                	ret

0000000080017292 <load_guest_page_fault_3>:

bool load_guest_page_fault_3(){
    80017292:	1101                	addi	sp,sp,-32

    TEST_START();
    80017294:	0001a597          	auipc	a1,0x1a
    80017298:	b8c58593          	addi	a1,a1,-1140 # 80030e20 <__func__.34>
    8001729c:	0001b517          	auipc	a0,0x1b
    800172a0:	42c50513          	addi	a0,a0,1068 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_3(){
    800172a4:	ec06                	sd	ra,24(sp)
    800172a6:	e822                	sd	s0,16(sp)
    800172a8:	e426                	sd	s1,8(sp)
    TEST_START();
    800172aa:	21a180ef          	jal	8002f4c4 <printf>
    800172ae:	4529                	li	a0,10
    800172b0:	703160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    800172b4:	450d                	li	a0,3
    800172b6:	c5fe90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800172ba:	b32e90ef          	jal	800005ec <hspt_init>
    hpt_init();
    800172be:	f12e90ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800172c2:	cc6e90ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800172c6:	450d                	li	a0,3
    800172c8:	c4de90ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    800172cc:	4509                	li	a0,2
    800172ce:	b67e90ef          	jal	80000e34 <set_prev_priv>
    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800172d2:	b47e90ef          	jal	80000e18 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800172d6:	000807b7          	lui	a5,0x80
    800172da:	1007a073          	csrs	sstatus,a5
    800172de:	001007b7          	lui	a5,0x100
    800172e2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800172e6:	07b2                	slli	a5,a5,0xc
    800172e8:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800172ec:	08c00593          	li	a1,140
    800172f0:	00021617          	auipc	a2,0x21
    800172f4:	dc860613          	addi	a2,a2,-568 # 800380b8 <__func__.0+0x5cd0>
    800172f8:	0001b517          	auipc	a0,0x1b
    800172fc:	3e850513          	addi	a0,a0,1000 # 800326e0 <__func__.0+0x2f8>
    80017300:	1c4180ef          	jal	8002f4c4 <printf>
    80017304:	00045797          	auipc	a5,0x45
    80017308:	d0d7c783          	lbu	a5,-755(a5) # 8005c011 <excpt+0x1>
    8001730c:	00045497          	auipc	s1,0x45
    80017310:	d0448493          	addi	s1,s1,-764 # 8005c010 <excpt>
    80017314:	0001b597          	auipc	a1,0x1b
    80017318:	3a458593          	addi	a1,a1,932 # 800326b8 <__func__.0+0x2d0>
    8001731c:	cf89                	beqz	a5,80017336 <load_guest_page_fault_3+0xa4>
    8001731e:	6498                	ld	a4,8(s1)
    80017320:	47d5                	li	a5,21
    80017322:	0001b597          	auipc	a1,0x1b
    80017326:	38658593          	addi	a1,a1,902 # 800326a8 <__func__.0+0x2c0>
    8001732a:	00f70663          	beq	a4,a5,80017336 <load_guest_page_fault_3+0xa4>
    8001732e:	0001b597          	auipc	a1,0x1b
    80017332:	38a58593          	addi	a1,a1,906 # 800326b8 <__func__.0+0x2d0>
    80017336:	0001b517          	auipc	a0,0x1b
    8001733a:	3c250513          	addi	a0,a0,962 # 800326f8 <__func__.0+0x310>
    8001733e:	186180ef          	jal	8002f4c4 <printf>
    80017342:	00045797          	auipc	a5,0x45
    80017346:	ccf7c783          	lbu	a5,-817(a5) # 8005c011 <excpt+0x1>
    8001734a:	c789                	beqz	a5,80017354 <load_guest_page_fault_3+0xc2>
    8001734c:	6498                	ld	a4,8(s1)
    8001734e:	47d5                	li	a5,21
    80017350:	00f70c63          	beq	a4,a5,80017368 <load_guest_page_fault_3+0xd6>
    80017354:	0001b517          	auipc	a0,0x1b
    80017358:	3ac50513          	addi	a0,a0,940 # 80032700 <__func__.0+0x318>
    8001735c:	168180ef          	jal	8002f4c4 <printf>
    80017360:	02900513          	li	a0,41
    80017364:	64f160ef          	jal	8002e1b2 <putchar>
    80017368:	4529                	li	a0,10
    8001736a:	649160ef          	jal	8002e1b2 <putchar>
    8001736e:	00045417          	auipc	s0,0x45
    80017372:	ca344403          	lbu	s0,-861(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80017376:	0001b597          	auipc	a1,0x1b
    8001737a:	34258593          	addi	a1,a1,834 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    8001737e:	cc11                	beqz	s0,8001739a <load_guest_page_fault_3+0x108>
    80017380:	6498                	ld	a4,8(s1)
    80017382:	47d5                	li	a5,21
    TEST_END();
    80017384:	0001b597          	auipc	a1,0x1b
    80017388:	32458593          	addi	a1,a1,804 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    8001738c:	00f70763          	beq	a4,a5,8001739a <load_guest_page_fault_3+0x108>
    80017390:	4401                	li	s0,0
    TEST_END();
    80017392:	0001b597          	auipc	a1,0x1b
    80017396:	32658593          	addi	a1,a1,806 # 800326b8 <__func__.0+0x2d0>
    8001739a:	0001b517          	auipc	a0,0x1b
    8001739e:	3c650513          	addi	a0,a0,966 # 80032760 <__func__.0+0x378>
    800173a2:	122180ef          	jal	8002f4c4 <printf>
    800173a6:	4511                	li	a0,4
    800173a8:	b6de90ef          	jal	80000f14 <goto_priv>
    800173ac:	bcaea0ef          	jal	80001776 <reset_state>
}
    800173b0:	60e2                	ld	ra,24(sp)
    800173b2:	8522                	mv	a0,s0
    800173b4:	6442                	ld	s0,16(sp)
    800173b6:	64a2                	ld	s1,8(sp)
    800173b8:	6105                	addi	sp,sp,32
    800173ba:	8082                	ret

00000000800173bc <load_guest_page_fault_4>:

bool load_guest_page_fault_4(){
    800173bc:	1101                	addi	sp,sp,-32

    TEST_START();
    800173be:	0001a597          	auipc	a1,0x1a
    800173c2:	a7a58593          	addi	a1,a1,-1414 # 80030e38 <__func__.33>
    800173c6:	0001b517          	auipc	a0,0x1b
    800173ca:	30250513          	addi	a0,a0,770 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_4(){
    800173ce:	ec06                	sd	ra,24(sp)
    800173d0:	e822                	sd	s0,16(sp)
    800173d2:	e426                	sd	s1,8(sp)
    TEST_START();
    800173d4:	0f0180ef          	jal	8002f4c4 <printf>
    800173d8:	4529                	li	a0,10
    800173da:	5d9160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    800173de:	450d                	li	a0,3
    800173e0:	b35e90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800173e4:	a08e90ef          	jal	800005ec <hspt_init>
    hpt_init();
    800173e8:	de8e90ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800173ec:	b9ce90ef          	jal	80000788 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    800173f0:	4511                	li	a0,4
    800173f2:	b23e90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800173f6:	000407b7          	lui	a5,0x40
    800173fa:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_HS);
    800173fe:	450d                	li	a0,3
    80017400:	b15e90ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017404:	4509                	li	a0,2
    80017406:	a2fe90ef          	jal	80000e34 <set_prev_priv>
    //执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001740a:	a0fe90ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    8001740e:	000807b7          	lui	a5,0x80
    80017412:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017414:	07b6                	slli	a5,a5,0xd
    80017416:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSURWX_GURWX);


    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    8001741a:	08c00593          	li	a1,140
    8001741e:	00021617          	auipc	a2,0x21
    80017422:	d0a60613          	addi	a2,a2,-758 # 80038128 <__func__.0+0x5d40>
    80017426:	0001b517          	auipc	a0,0x1b
    8001742a:	2ba50513          	addi	a0,a0,698 # 800326e0 <__func__.0+0x2f8>
    8001742e:	096180ef          	jal	8002f4c4 <printf>
    80017432:	00045797          	auipc	a5,0x45
    80017436:	bdf7c783          	lbu	a5,-1057(a5) # 8005c011 <excpt+0x1>
    8001743a:	00045497          	auipc	s1,0x45
    8001743e:	bd648493          	addi	s1,s1,-1066 # 8005c010 <excpt>
    80017442:	0001b597          	auipc	a1,0x1b
    80017446:	27658593          	addi	a1,a1,630 # 800326b8 <__func__.0+0x2d0>
    8001744a:	cf89                	beqz	a5,80017464 <load_guest_page_fault_4+0xa8>
    8001744c:	6498                	ld	a4,8(s1)
    8001744e:	47b5                	li	a5,13
    80017450:	0001b597          	auipc	a1,0x1b
    80017454:	25858593          	addi	a1,a1,600 # 800326a8 <__func__.0+0x2c0>
    80017458:	00f70663          	beq	a4,a5,80017464 <load_guest_page_fault_4+0xa8>
    8001745c:	0001b597          	auipc	a1,0x1b
    80017460:	25c58593          	addi	a1,a1,604 # 800326b8 <__func__.0+0x2d0>
    80017464:	0001b517          	auipc	a0,0x1b
    80017468:	29450513          	addi	a0,a0,660 # 800326f8 <__func__.0+0x310>
    8001746c:	058180ef          	jal	8002f4c4 <printf>
    80017470:	00045797          	auipc	a5,0x45
    80017474:	ba17c783          	lbu	a5,-1119(a5) # 8005c011 <excpt+0x1>
    80017478:	c789                	beqz	a5,80017482 <load_guest_page_fault_4+0xc6>
    8001747a:	6498                	ld	a4,8(s1)
    8001747c:	47b5                	li	a5,13
    8001747e:	00f70c63          	beq	a4,a5,80017496 <load_guest_page_fault_4+0xda>
    80017482:	0001b517          	auipc	a0,0x1b
    80017486:	27e50513          	addi	a0,a0,638 # 80032700 <__func__.0+0x318>
    8001748a:	03a180ef          	jal	8002f4c4 <printf>
    8001748e:	02900513          	li	a0,41
    80017492:	521160ef          	jal	8002e1b2 <putchar>
    80017496:	4529                	li	a0,10
    80017498:	51b160ef          	jal	8002e1b2 <putchar>
    8001749c:	00045417          	auipc	s0,0x45
    800174a0:	b7544403          	lbu	s0,-1163(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800174a4:	0001b597          	auipc	a1,0x1b
    800174a8:	21458593          	addi	a1,a1,532 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    800174ac:	cc11                	beqz	s0,800174c8 <load_guest_page_fault_4+0x10c>
    800174ae:	6498                	ld	a4,8(s1)
    800174b0:	47b5                	li	a5,13
    TEST_END();
    800174b2:	0001b597          	auipc	a1,0x1b
    800174b6:	1f658593          	addi	a1,a1,502 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    800174ba:	00f70763          	beq	a4,a5,800174c8 <load_guest_page_fault_4+0x10c>
    800174be:	4401                	li	s0,0
    TEST_END();
    800174c0:	0001b597          	auipc	a1,0x1b
    800174c4:	1f858593          	addi	a1,a1,504 # 800326b8 <__func__.0+0x2d0>
    800174c8:	0001b517          	auipc	a0,0x1b
    800174cc:	29850513          	addi	a0,a0,664 # 80032760 <__func__.0+0x378>
    800174d0:	7f5170ef          	jal	8002f4c4 <printf>
    800174d4:	4511                	li	a0,4
    800174d6:	a3fe90ef          	jal	80000f14 <goto_priv>
    800174da:	a9cea0ef          	jal	80001776 <reset_state>
}
    800174de:	60e2                	ld	ra,24(sp)
    800174e0:	8522                	mv	a0,s0
    800174e2:	6442                	ld	s0,16(sp)
    800174e4:	64a2                	ld	s1,8(sp)
    800174e6:	6105                	addi	sp,sp,32
    800174e8:	8082                	ret

00000000800174ea <load_guest_page_fault_5>:

bool load_guest_page_fault_5(){
    800174ea:	1141                	addi	sp,sp,-16

    TEST_START();
    800174ec:	0001a597          	auipc	a1,0x1a
    800174f0:	96458593          	addi	a1,a1,-1692 # 80030e50 <__func__.32>
    800174f4:	0001b517          	auipc	a0,0x1b
    800174f8:	1d450513          	addi	a0,a0,468 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_5(){
    800174fc:	e406                	sd	ra,8(sp)
    800174fe:	e022                	sd	s0,0(sp)
    TEST_START();
    80017500:	7c5170ef          	jal	8002f4c4 <printf>
    80017504:	4529                	li	a0,10
    80017506:	4ad160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8001750a:	450d                	li	a0,3
    8001750c:	a09e90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80017510:	8dce90ef          	jal	800005ec <hspt_init>
    hpt_init();
    80017514:	cbce90ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80017518:	a70e90ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    8001751c:	4511                	li	a0,4
    8001751e:	9f7e90ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80017522:	000407b7          	lui	a5,0x40
    80017526:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    8001752a:	450d                	li	a0,3
    8001752c:	9e9e90ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017530:	4509                	li	a0,2
    80017532:	903e90ef          	jal	80000e34 <set_prev_priv>

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80017536:	8e3e90ef          	jal	80000e18 <test_setup_except_function>
    8001753a:	000807b7          	lui	a5,0x80
    8001753e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017540:	07b6                	slli	a5,a5,0xd
    80017542:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80017546:	08c00593          	li	a1,140
    8001754a:	00020617          	auipc	a2,0x20
    8001754e:	3d660613          	addi	a2,a2,982 # 80037920 <__func__.0+0x5538>
    80017552:	0001b517          	auipc	a0,0x1b
    80017556:	18e50513          	addi	a0,a0,398 # 800326e0 <__func__.0+0x2f8>
    8001755a:	76b170ef          	jal	8002f4c4 <printf>
    8001755e:	00045797          	auipc	a5,0x45
    80017562:	ab37c783          	lbu	a5,-1357(a5) # 8005c011 <excpt+0x1>
    80017566:	0001b597          	auipc	a1,0x1b
    8001756a:	14258593          	addi	a1,a1,322 # 800326a8 <__func__.0+0x2c0>
    8001756e:	c789                	beqz	a5,80017578 <load_guest_page_fault_5+0x8e>
    80017570:	0001b597          	auipc	a1,0x1b
    80017574:	14858593          	addi	a1,a1,328 # 800326b8 <__func__.0+0x2d0>
    80017578:	0001b517          	auipc	a0,0x1b
    8001757c:	18050513          	addi	a0,a0,384 # 800326f8 <__func__.0+0x310>
    80017580:	745170ef          	jal	8002f4c4 <printf>
    80017584:	00045797          	auipc	a5,0x45
    80017588:	a8d7c783          	lbu	a5,-1395(a5) # 8005c011 <excpt+0x1>
    8001758c:	e7a1                	bnez	a5,800175d4 <load_guest_page_fault_5+0xea>
    8001758e:	4529                	li	a0,10
    80017590:	423160ef          	jal	8002e1b2 <putchar>
    80017594:	00045797          	auipc	a5,0x45
    80017598:	a7d7c783          	lbu	a5,-1411(a5) # 8005c011 <excpt+0x1>
    8001759c:	e795                	bnez	a5,800175c8 <load_guest_page_fault_5+0xde>
    8001759e:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800175a0:	0001b597          	auipc	a1,0x1b
    800175a4:	10858593          	addi	a1,a1,264 # 800326a8 <__func__.0+0x2c0>
    800175a8:	0001b517          	auipc	a0,0x1b
    800175ac:	1b850513          	addi	a0,a0,440 # 80032760 <__func__.0+0x378>
    800175b0:	715170ef          	jal	8002f4c4 <printf>
    800175b4:	4511                	li	a0,4
    800175b6:	95fe90ef          	jal	80000f14 <goto_priv>
    800175ba:	9bcea0ef          	jal	80001776 <reset_state>
}
    800175be:	60a2                	ld	ra,8(sp)
    800175c0:	8522                	mv	a0,s0
    800175c2:	6402                	ld	s0,0(sp)
    800175c4:	0141                	addi	sp,sp,16
    800175c6:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800175c8:	4401                	li	s0,0
    TEST_END();
    800175ca:	0001b597          	auipc	a1,0x1b
    800175ce:	0ee58593          	addi	a1,a1,238 # 800326b8 <__func__.0+0x2d0>
    800175d2:	bfd9                	j	800175a8 <load_guest_page_fault_5+0xbe>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800175d4:	0001b517          	auipc	a0,0x1b
    800175d8:	12c50513          	addi	a0,a0,300 # 80032700 <__func__.0+0x318>
    800175dc:	6e9170ef          	jal	8002f4c4 <printf>
    800175e0:	02900513          	li	a0,41
    800175e4:	3cf160ef          	jal	8002e1b2 <putchar>
    800175e8:	b75d                	j	8001758e <load_guest_page_fault_5+0xa4>

00000000800175ea <load_guest_page_fault_6>:

bool load_guest_page_fault_6(){
    800175ea:	1101                	addi	sp,sp,-32

    TEST_START();
    800175ec:	0001a597          	auipc	a1,0x1a
    800175f0:	87c58593          	addi	a1,a1,-1924 # 80030e68 <__func__.31>
    800175f4:	0001b517          	auipc	a0,0x1b
    800175f8:	0d450513          	addi	a0,a0,212 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_6(){
    800175fc:	ec06                	sd	ra,24(sp)
    800175fe:	e822                	sd	s0,16(sp)
    80017600:	e426                	sd	s1,8(sp)
    TEST_START();
    80017602:	6c3170ef          	jal	8002f4c4 <printf>
    80017606:	4529                	li	a0,10
    80017608:	3ab160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8001760c:	450d                	li	a0,3
    8001760e:	907e90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80017612:	fdbe80ef          	jal	800005ec <hspt_init>
    hpt_init();
    80017616:	bbae90ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001761a:	96ee90ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001761e:	4509                	li	a0,2
    80017620:	8f5e90ef          	jal	80000f14 <goto_priv>

    //执行lb指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80017624:	ff4e90ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80017628:	001007b7          	lui	a5,0x100
    8001762c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017630:	07b2                	slli	a5,a5,0xc
    80017632:	00078783          	lb	a5,0(a5)

    vaddr = hs_page_base(VSRWX_GI);
    lb(vaddr);
    TEST_ASSERT("vs mode lb when the second-stage address translation pte.v=0 leads to LGPF",
    80017636:	08c00593          	li	a1,140
    8001763a:	00021617          	auipc	a2,0x21
    8001763e:	b2e60613          	addi	a2,a2,-1234 # 80038168 <__func__.0+0x5d80>
    80017642:	0001b517          	auipc	a0,0x1b
    80017646:	09e50513          	addi	a0,a0,158 # 800326e0 <__func__.0+0x2f8>
    8001764a:	67b170ef          	jal	8002f4c4 <printf>
    8001764e:	00045797          	auipc	a5,0x45
    80017652:	9c37c783          	lbu	a5,-1597(a5) # 8005c011 <excpt+0x1>
    80017656:	00045497          	auipc	s1,0x45
    8001765a:	9ba48493          	addi	s1,s1,-1606 # 8005c010 <excpt>
    8001765e:	0001b597          	auipc	a1,0x1b
    80017662:	05a58593          	addi	a1,a1,90 # 800326b8 <__func__.0+0x2d0>
    80017666:	cf89                	beqz	a5,80017680 <load_guest_page_fault_6+0x96>
    80017668:	6498                	ld	a4,8(s1)
    8001766a:	47d5                	li	a5,21
    8001766c:	0001b597          	auipc	a1,0x1b
    80017670:	03c58593          	addi	a1,a1,60 # 800326a8 <__func__.0+0x2c0>
    80017674:	00f70663          	beq	a4,a5,80017680 <load_guest_page_fault_6+0x96>
    80017678:	0001b597          	auipc	a1,0x1b
    8001767c:	04058593          	addi	a1,a1,64 # 800326b8 <__func__.0+0x2d0>
    80017680:	0001b517          	auipc	a0,0x1b
    80017684:	07850513          	addi	a0,a0,120 # 800326f8 <__func__.0+0x310>
    80017688:	63d170ef          	jal	8002f4c4 <printf>
    8001768c:	00045797          	auipc	a5,0x45
    80017690:	9857c783          	lbu	a5,-1659(a5) # 8005c011 <excpt+0x1>
    80017694:	c789                	beqz	a5,8001769e <load_guest_page_fault_6+0xb4>
    80017696:	6498                	ld	a4,8(s1)
    80017698:	47d5                	li	a5,21
    8001769a:	00f70c63          	beq	a4,a5,800176b2 <load_guest_page_fault_6+0xc8>
    8001769e:	0001b517          	auipc	a0,0x1b
    800176a2:	06250513          	addi	a0,a0,98 # 80032700 <__func__.0+0x318>
    800176a6:	61f170ef          	jal	8002f4c4 <printf>
    800176aa:	02900513          	li	a0,41
    800176ae:	305160ef          	jal	8002e1b2 <putchar>
    800176b2:	4529                	li	a0,10
    800176b4:	2ff160ef          	jal	8002e1b2 <putchar>
    800176b8:	00045797          	auipc	a5,0x45
    800176bc:	9597c783          	lbu	a5,-1703(a5) # 8005c011 <excpt+0x1>
    800176c0:	4401                	li	s0,0
    800176c2:	c789                	beqz	a5,800176cc <load_guest_page_fault_6+0xe2>
    800176c4:	6480                	ld	s0,8(s1)
    800176c6:	142d                	addi	s0,s0,-21
    800176c8:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LGPF
    );


    //执行ld指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    800176cc:	f4ce90ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800176d0:	001007b7          	lui	a5,0x100
    800176d4:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800176d8:	07b2                	slli	a5,a5,0xc
    800176da:	0007b783          	ld	a5,0(a5)
    vaddr = hs_page_base(VSRWX_GI);

    ld(vaddr);   
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800176de:	08c00593          	li	a1,140
    800176e2:	00021617          	auipc	a2,0x21
    800176e6:	ad660613          	addi	a2,a2,-1322 # 800381b8 <__func__.0+0x5dd0>
    800176ea:	0001b517          	auipc	a0,0x1b
    800176ee:	ff650513          	addi	a0,a0,-10 # 800326e0 <__func__.0+0x2f8>
    800176f2:	5d3170ef          	jal	8002f4c4 <printf>
    800176f6:	00045797          	auipc	a5,0x45
    800176fa:	91b7c783          	lbu	a5,-1765(a5) # 8005c011 <excpt+0x1>
    800176fe:	0001b597          	auipc	a1,0x1b
    80017702:	fba58593          	addi	a1,a1,-70 # 800326b8 <__func__.0+0x2d0>
    80017706:	cf89                	beqz	a5,80017720 <load_guest_page_fault_6+0x136>
    80017708:	6498                	ld	a4,8(s1)
    8001770a:	47d5                	li	a5,21
    8001770c:	0001b597          	auipc	a1,0x1b
    80017710:	f9c58593          	addi	a1,a1,-100 # 800326a8 <__func__.0+0x2c0>
    80017714:	00f70663          	beq	a4,a5,80017720 <load_guest_page_fault_6+0x136>
    80017718:	0001b597          	auipc	a1,0x1b
    8001771c:	fa058593          	addi	a1,a1,-96 # 800326b8 <__func__.0+0x2d0>
    80017720:	0001b517          	auipc	a0,0x1b
    80017724:	fd850513          	addi	a0,a0,-40 # 800326f8 <__func__.0+0x310>
    80017728:	59d170ef          	jal	8002f4c4 <printf>
    8001772c:	00045797          	auipc	a5,0x45
    80017730:	8e57c783          	lbu	a5,-1819(a5) # 8005c011 <excpt+0x1>
    80017734:	c789                	beqz	a5,8001773e <load_guest_page_fault_6+0x154>
    80017736:	6498                	ld	a4,8(s1)
    80017738:	47d5                	li	a5,21
    8001773a:	00f70c63          	beq	a4,a5,80017752 <load_guest_page_fault_6+0x168>
    8001773e:	0001b517          	auipc	a0,0x1b
    80017742:	fc250513          	addi	a0,a0,-62 # 80032700 <__func__.0+0x318>
    80017746:	57f170ef          	jal	8002f4c4 <printf>
    8001774a:	02900513          	li	a0,41
    8001774e:	265160ef          	jal	8002e1b2 <putchar>
    80017752:	4529                	li	a0,10
    80017754:	25f160ef          	jal	8002e1b2 <putchar>
    80017758:	c015                	beqz	s0,8001777c <load_guest_page_fault_6+0x192>
    8001775a:	00045417          	auipc	s0,0x45
    8001775e:	8b744403          	lbu	s0,-1865(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80017762:	0001b597          	auipc	a1,0x1b
    80017766:	f5658593          	addi	a1,a1,-170 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001776a:	cc11                	beqz	s0,80017786 <load_guest_page_fault_6+0x19c>
    8001776c:	6498                	ld	a4,8(s1)
    8001776e:	47d5                	li	a5,21
    TEST_END();
    80017770:	0001b597          	auipc	a1,0x1b
    80017774:	f3858593          	addi	a1,a1,-200 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80017778:	00f70763          	beq	a4,a5,80017786 <load_guest_page_fault_6+0x19c>
    8001777c:	4401                	li	s0,0
    TEST_END();
    8001777e:	0001b597          	auipc	a1,0x1b
    80017782:	f3a58593          	addi	a1,a1,-198 # 800326b8 <__func__.0+0x2d0>
    80017786:	0001b517          	auipc	a0,0x1b
    8001778a:	fda50513          	addi	a0,a0,-38 # 80032760 <__func__.0+0x378>
    8001778e:	537170ef          	jal	8002f4c4 <printf>
    80017792:	4511                	li	a0,4
    80017794:	f80e90ef          	jal	80000f14 <goto_priv>
    80017798:	fdfe90ef          	jal	80001776 <reset_state>
}
    8001779c:	60e2                	ld	ra,24(sp)
    8001779e:	8522                	mv	a0,s0
    800177a0:	6442                	ld	s0,16(sp)
    800177a2:	64a2                	ld	s1,8(sp)
    800177a4:	6105                	addi	sp,sp,32
    800177a6:	8082                	ret

00000000800177a8 <load_guest_page_fault_7>:

bool load_guest_page_fault_7(){
    800177a8:	1101                	addi	sp,sp,-32

    TEST_START();
    800177aa:	00019597          	auipc	a1,0x19
    800177ae:	6d658593          	addi	a1,a1,1750 # 80030e80 <__func__.30>
    800177b2:	0001b517          	auipc	a0,0x1b
    800177b6:	f1650513          	addi	a0,a0,-234 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_7(){
    800177ba:	ec06                	sd	ra,24(sp)
    800177bc:	e822                	sd	s0,16(sp)
    800177be:	e426                	sd	s1,8(sp)
    TEST_START();
    800177c0:	505170ef          	jal	8002f4c4 <printf>
    800177c4:	4529                	li	a0,10
    800177c6:	1ed160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    800177ca:	450d                	li	a0,3
    800177cc:	f48e90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800177d0:	e1de80ef          	jal	800005ec <hspt_init>
    hpt_init();
    800177d4:	9fce90ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800177d8:	fb1e80ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800177dc:	4509                	li	a0,2
    800177de:	f36e90ef          	jal	80000f14 <goto_priv>

    //执行lh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800177e2:	e36e90ef          	jal	80000e18 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800177e6:	000807b7          	lui	a5,0x80
    800177ea:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    800177ee:	001007b7          	lui	a5,0x100
    800177f2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800177f6:	07b2                	slli	a5,a5,0xc
    800177f8:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800177fc:	08c00593          	li	a1,140
    80017800:	00021617          	auipc	a2,0x21
    80017804:	a1060613          	addi	a2,a2,-1520 # 80038210 <__func__.0+0x5e28>
    80017808:	0001b517          	auipc	a0,0x1b
    8001780c:	ed850513          	addi	a0,a0,-296 # 800326e0 <__func__.0+0x2f8>
    80017810:	4b5170ef          	jal	8002f4c4 <printf>
    80017814:	00044797          	auipc	a5,0x44
    80017818:	7fd7c783          	lbu	a5,2045(a5) # 8005c011 <excpt+0x1>
    8001781c:	00044497          	auipc	s1,0x44
    80017820:	7f448493          	addi	s1,s1,2036 # 8005c010 <excpt>
    80017824:	0001b597          	auipc	a1,0x1b
    80017828:	e9458593          	addi	a1,a1,-364 # 800326b8 <__func__.0+0x2d0>
    8001782c:	cf89                	beqz	a5,80017846 <load_guest_page_fault_7+0x9e>
    8001782e:	6498                	ld	a4,8(s1)
    80017830:	47d5                	li	a5,21
    80017832:	0001b597          	auipc	a1,0x1b
    80017836:	e7658593          	addi	a1,a1,-394 # 800326a8 <__func__.0+0x2c0>
    8001783a:	00f70663          	beq	a4,a5,80017846 <load_guest_page_fault_7+0x9e>
    8001783e:	0001b597          	auipc	a1,0x1b
    80017842:	e7a58593          	addi	a1,a1,-390 # 800326b8 <__func__.0+0x2d0>
    80017846:	0001b517          	auipc	a0,0x1b
    8001784a:	eb250513          	addi	a0,a0,-334 # 800326f8 <__func__.0+0x310>
    8001784e:	477170ef          	jal	8002f4c4 <printf>
    80017852:	00044797          	auipc	a5,0x44
    80017856:	7bf7c783          	lbu	a5,1983(a5) # 8005c011 <excpt+0x1>
    8001785a:	c789                	beqz	a5,80017864 <load_guest_page_fault_7+0xbc>
    8001785c:	6498                	ld	a4,8(s1)
    8001785e:	47d5                	li	a5,21
    80017860:	00f70c63          	beq	a4,a5,80017878 <load_guest_page_fault_7+0xd0>
    80017864:	0001b517          	auipc	a0,0x1b
    80017868:	e9c50513          	addi	a0,a0,-356 # 80032700 <__func__.0+0x318>
    8001786c:	459170ef          	jal	8002f4c4 <printf>
    80017870:	02900513          	li	a0,41
    80017874:	13f160ef          	jal	8002e1b2 <putchar>
    80017878:	4529                	li	a0,10
    8001787a:	139160ef          	jal	8002e1b2 <putchar>
    8001787e:	00044417          	auipc	s0,0x44
    80017882:	79344403          	lbu	s0,1939(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80017886:	0001b597          	auipc	a1,0x1b
    8001788a:	e3258593          	addi	a1,a1,-462 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    8001788e:	cc11                	beqz	s0,800178aa <load_guest_page_fault_7+0x102>
    80017890:	6498                	ld	a4,8(s1)
    80017892:	47d5                	li	a5,21
    TEST_END();
    80017894:	0001b597          	auipc	a1,0x1b
    80017898:	e1458593          	addi	a1,a1,-492 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    8001789c:	00f70763          	beq	a4,a5,800178aa <load_guest_page_fault_7+0x102>
    800178a0:	4401                	li	s0,0
    TEST_END();
    800178a2:	0001b597          	auipc	a1,0x1b
    800178a6:	e1658593          	addi	a1,a1,-490 # 800326b8 <__func__.0+0x2d0>
    800178aa:	0001b517          	auipc	a0,0x1b
    800178ae:	eb650513          	addi	a0,a0,-330 # 80032760 <__func__.0+0x378>
    800178b2:	413170ef          	jal	8002f4c4 <printf>
    800178b6:	4511                	li	a0,4
    800178b8:	e5ce90ef          	jal	80000f14 <goto_priv>
    800178bc:	ebbe90ef          	jal	80001776 <reset_state>
}
    800178c0:	60e2                	ld	ra,24(sp)
    800178c2:	8522                	mv	a0,s0
    800178c4:	6442                	ld	s0,16(sp)
    800178c6:	64a2                	ld	s1,8(sp)
    800178c8:	6105                	addi	sp,sp,32
    800178ca:	8082                	ret

00000000800178cc <load_guest_page_fault_8>:

bool load_guest_page_fault_8(){
    800178cc:	1101                	addi	sp,sp,-32

    TEST_START();
    800178ce:	00019597          	auipc	a1,0x19
    800178d2:	5ca58593          	addi	a1,a1,1482 # 80030e98 <__func__.29>
    800178d6:	0001b517          	auipc	a0,0x1b
    800178da:	df250513          	addi	a0,a0,-526 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_8(){
    800178de:	ec06                	sd	ra,24(sp)
    800178e0:	e822                	sd	s0,16(sp)
    800178e2:	e426                	sd	s1,8(sp)
    TEST_START();
    800178e4:	3e1170ef          	jal	8002f4c4 <printf>
    800178e8:	4529                	li	a0,10
    800178ea:	0c9160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    800178ee:	450d                	li	a0,3
    800178f0:	e24e90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800178f4:	cf9e80ef          	jal	800005ec <hspt_init>
    hpt_init();
    800178f8:	8d8e90ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800178fc:	e8de80ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80017900:	4509                	li	a0,2
    80017902:	e12e90ef          	jal	80000f14 <goto_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80017906:	d12e90ef          	jal	80000e18 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001790a:	000807b7          	lui	a5,0x80
    8001790e:	1007a073          	csrs	sstatus,a5
    80017912:	001007b7          	lui	a5,0x100
    80017916:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001791a:	07b2                	slli	a5,a5,0xc
    8001791c:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017920:	08c00593          	li	a1,140
    80017924:	00021617          	auipc	a2,0x21
    80017928:	94c60613          	addi	a2,a2,-1716 # 80038270 <__func__.0+0x5e88>
    8001792c:	0001b517          	auipc	a0,0x1b
    80017930:	db450513          	addi	a0,a0,-588 # 800326e0 <__func__.0+0x2f8>
    80017934:	391170ef          	jal	8002f4c4 <printf>
    80017938:	00044797          	auipc	a5,0x44
    8001793c:	6d97c783          	lbu	a5,1753(a5) # 8005c011 <excpt+0x1>
    80017940:	00044497          	auipc	s1,0x44
    80017944:	6d048493          	addi	s1,s1,1744 # 8005c010 <excpt>
    80017948:	0001b597          	auipc	a1,0x1b
    8001794c:	d7058593          	addi	a1,a1,-656 # 800326b8 <__func__.0+0x2d0>
    80017950:	cf89                	beqz	a5,8001796a <load_guest_page_fault_8+0x9e>
    80017952:	6498                	ld	a4,8(s1)
    80017954:	47d5                	li	a5,21
    80017956:	0001b597          	auipc	a1,0x1b
    8001795a:	d5258593          	addi	a1,a1,-686 # 800326a8 <__func__.0+0x2c0>
    8001795e:	00f70663          	beq	a4,a5,8001796a <load_guest_page_fault_8+0x9e>
    80017962:	0001b597          	auipc	a1,0x1b
    80017966:	d5658593          	addi	a1,a1,-682 # 800326b8 <__func__.0+0x2d0>
    8001796a:	0001b517          	auipc	a0,0x1b
    8001796e:	d8e50513          	addi	a0,a0,-626 # 800326f8 <__func__.0+0x310>
    80017972:	353170ef          	jal	8002f4c4 <printf>
    80017976:	00044797          	auipc	a5,0x44
    8001797a:	69b7c783          	lbu	a5,1691(a5) # 8005c011 <excpt+0x1>
    8001797e:	c789                	beqz	a5,80017988 <load_guest_page_fault_8+0xbc>
    80017980:	6498                	ld	a4,8(s1)
    80017982:	47d5                	li	a5,21
    80017984:	00f70c63          	beq	a4,a5,8001799c <load_guest_page_fault_8+0xd0>
    80017988:	0001b517          	auipc	a0,0x1b
    8001798c:	d7850513          	addi	a0,a0,-648 # 80032700 <__func__.0+0x318>
    80017990:	335170ef          	jal	8002f4c4 <printf>
    80017994:	02900513          	li	a0,41
    80017998:	01b160ef          	jal	8002e1b2 <putchar>
    8001799c:	4529                	li	a0,10
    8001799e:	015160ef          	jal	8002e1b2 <putchar>
    800179a2:	00044417          	auipc	s0,0x44
    800179a6:	66f44403          	lbu	s0,1647(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    800179aa:	0001b597          	auipc	a1,0x1b
    800179ae:	d0e58593          	addi	a1,a1,-754 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800179b2:	cc11                	beqz	s0,800179ce <load_guest_page_fault_8+0x102>
    800179b4:	6498                	ld	a4,8(s1)
    800179b6:	47d5                	li	a5,21
    TEST_END();
    800179b8:	0001b597          	auipc	a1,0x1b
    800179bc:	cf058593          	addi	a1,a1,-784 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800179c0:	00f70763          	beq	a4,a5,800179ce <load_guest_page_fault_8+0x102>
    800179c4:	4401                	li	s0,0
    TEST_END();
    800179c6:	0001b597          	auipc	a1,0x1b
    800179ca:	cf258593          	addi	a1,a1,-782 # 800326b8 <__func__.0+0x2d0>
    800179ce:	0001b517          	auipc	a0,0x1b
    800179d2:	d9250513          	addi	a0,a0,-622 # 80032760 <__func__.0+0x378>
    800179d6:	2ef170ef          	jal	8002f4c4 <printf>
    800179da:	4511                	li	a0,4
    800179dc:	d38e90ef          	jal	80000f14 <goto_priv>
    800179e0:	d97e90ef          	jal	80001776 <reset_state>
}
    800179e4:	60e2                	ld	ra,24(sp)
    800179e6:	8522                	mv	a0,s0
    800179e8:	6442                	ld	s0,16(sp)
    800179ea:	64a2                	ld	s1,8(sp)
    800179ec:	6105                	addi	sp,sp,32
    800179ee:	8082                	ret

00000000800179f0 <load_guest_page_fault_9>:

bool load_guest_page_fault_9(){
    800179f0:	1101                	addi	sp,sp,-32

    TEST_START();
    800179f2:	00019597          	auipc	a1,0x19
    800179f6:	4be58593          	addi	a1,a1,1214 # 80030eb0 <__func__.28>
    800179fa:	0001b517          	auipc	a0,0x1b
    800179fe:	cce50513          	addi	a0,a0,-818 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_9(){
    80017a02:	ec06                	sd	ra,24(sp)
    80017a04:	e822                	sd	s0,16(sp)
    80017a06:	e426                	sd	s1,8(sp)
    TEST_START();
    80017a08:	2bd170ef          	jal	8002f4c4 <printf>
    80017a0c:	4529                	li	a0,10
    80017a0e:	7a4160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80017a12:	450d                	li	a0,3
    80017a14:	d00e90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80017a18:	bd5e80ef          	jal	800005ec <hspt_init>
    hpt_init();
    80017a1c:	fb5e80ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80017a20:	d69e80ef          	jal	80000788 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80017a24:	4511                	li	a0,4
    80017a26:	ceee90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80017a2a:	000407b7          	lui	a5,0x40
    80017a2e:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_VS);
    80017a32:	4509                	li	a0,2
    80017a34:	ce0e90ef          	jal	80000f14 <goto_priv>
    //执行lb指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80017a38:	be0e90ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80017a3c:	000807b7          	lui	a5,0x80
    80017a40:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017a42:	07b6                	slli	a5,a5,0xd
    80017a44:	00078783          	lb	a5,0(a5)
    vaddr = hs_page_base(VSURWX_GURWX);


    lb(vaddr)  ;
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017a48:	08c00593          	li	a1,140
    80017a4c:	00021617          	auipc	a2,0x21
    80017a50:	89460613          	addi	a2,a2,-1900 # 800382e0 <__func__.0+0x5ef8>
    80017a54:	0001b517          	auipc	a0,0x1b
    80017a58:	c8c50513          	addi	a0,a0,-884 # 800326e0 <__func__.0+0x2f8>
    80017a5c:	269170ef          	jal	8002f4c4 <printf>
    80017a60:	00044797          	auipc	a5,0x44
    80017a64:	5b17c783          	lbu	a5,1457(a5) # 8005c011 <excpt+0x1>
    80017a68:	00044497          	auipc	s1,0x44
    80017a6c:	5a848493          	addi	s1,s1,1448 # 8005c010 <excpt>
    80017a70:	0001b597          	auipc	a1,0x1b
    80017a74:	c4858593          	addi	a1,a1,-952 # 800326b8 <__func__.0+0x2d0>
    80017a78:	cf89                	beqz	a5,80017a92 <load_guest_page_fault_9+0xa2>
    80017a7a:	6498                	ld	a4,8(s1)
    80017a7c:	47b5                	li	a5,13
    80017a7e:	0001b597          	auipc	a1,0x1b
    80017a82:	c2a58593          	addi	a1,a1,-982 # 800326a8 <__func__.0+0x2c0>
    80017a86:	00f70663          	beq	a4,a5,80017a92 <load_guest_page_fault_9+0xa2>
    80017a8a:	0001b597          	auipc	a1,0x1b
    80017a8e:	c2e58593          	addi	a1,a1,-978 # 800326b8 <__func__.0+0x2d0>
    80017a92:	0001b517          	auipc	a0,0x1b
    80017a96:	c6650513          	addi	a0,a0,-922 # 800326f8 <__func__.0+0x310>
    80017a9a:	22b170ef          	jal	8002f4c4 <printf>
    80017a9e:	00044797          	auipc	a5,0x44
    80017aa2:	5737c783          	lbu	a5,1395(a5) # 8005c011 <excpt+0x1>
    80017aa6:	c789                	beqz	a5,80017ab0 <load_guest_page_fault_9+0xc0>
    80017aa8:	6498                	ld	a4,8(s1)
    80017aaa:	47b5                	li	a5,13
    80017aac:	00f70c63          	beq	a4,a5,80017ac4 <load_guest_page_fault_9+0xd4>
    80017ab0:	0001b517          	auipc	a0,0x1b
    80017ab4:	c5050513          	addi	a0,a0,-944 # 80032700 <__func__.0+0x318>
    80017ab8:	20d170ef          	jal	8002f4c4 <printf>
    80017abc:	02900513          	li	a0,41
    80017ac0:	6f2160ef          	jal	8002e1b2 <putchar>
    80017ac4:	4529                	li	a0,10
    80017ac6:	6ec160ef          	jal	8002e1b2 <putchar>
    80017aca:	00044417          	auipc	s0,0x44
    80017ace:	54744403          	lbu	s0,1351(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80017ad2:	0001b597          	auipc	a1,0x1b
    80017ad6:	be658593          	addi	a1,a1,-1050 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017ada:	cc11                	beqz	s0,80017af6 <load_guest_page_fault_9+0x106>
    80017adc:	6498                	ld	a4,8(s1)
    80017ade:	47b5                	li	a5,13
    TEST_END();
    80017ae0:	0001b597          	auipc	a1,0x1b
    80017ae4:	bc858593          	addi	a1,a1,-1080 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017ae8:	00f70763          	beq	a4,a5,80017af6 <load_guest_page_fault_9+0x106>
    80017aec:	4401                	li	s0,0
    TEST_END();
    80017aee:	0001b597          	auipc	a1,0x1b
    80017af2:	bca58593          	addi	a1,a1,-1078 # 800326b8 <__func__.0+0x2d0>
    80017af6:	0001b517          	auipc	a0,0x1b
    80017afa:	c6a50513          	addi	a0,a0,-918 # 80032760 <__func__.0+0x378>
    80017afe:	1c7170ef          	jal	8002f4c4 <printf>
    80017b02:	4511                	li	a0,4
    80017b04:	c10e90ef          	jal	80000f14 <goto_priv>
    80017b08:	c6fe90ef          	jal	80001776 <reset_state>
}
    80017b0c:	60e2                	ld	ra,24(sp)
    80017b0e:	8522                	mv	a0,s0
    80017b10:	6442                	ld	s0,16(sp)
    80017b12:	64a2                	ld	s1,8(sp)
    80017b14:	6105                	addi	sp,sp,32
    80017b16:	8082                	ret

0000000080017b18 <load_guest_page_fault_10>:

bool load_guest_page_fault_10(){
    80017b18:	1141                	addi	sp,sp,-16

    TEST_START();
    80017b1a:	00019597          	auipc	a1,0x19
    80017b1e:	3ae58593          	addi	a1,a1,942 # 80030ec8 <__func__.27>
    80017b22:	0001b517          	auipc	a0,0x1b
    80017b26:	ba650513          	addi	a0,a0,-1114 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_10(){
    80017b2a:	e406                	sd	ra,8(sp)
    80017b2c:	e022                	sd	s0,0(sp)
    TEST_START();
    80017b2e:	197170ef          	jal	8002f4c4 <printf>
    80017b32:	4529                	li	a0,10
    80017b34:	67e160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80017b38:	450d                	li	a0,3
    80017b3a:	bdae90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80017b3e:	aafe80ef          	jal	800005ec <hspt_init>
    hpt_init();
    80017b42:	e8fe80ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80017b46:	c43e80ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017b4a:	4511                	li	a0,4
    80017b4c:	bc8e90ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80017b50:	000407b7          	lui	a5,0x40
    80017b54:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80017b58:	4509                	li	a0,2
    80017b5a:	bbae90ef          	jal	80000f14 <goto_priv>

    //执行lb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80017b5e:	abae90ef          	jal	80000e18 <test_setup_except_function>
    80017b62:	000807b7          	lui	a5,0x80
    80017b66:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017b68:	07b6                	slli	a5,a5,0xd
    80017b6a:	00078783          	lb	a5,0(a5)
    lb(vaddr);

    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017b6e:	08c00593          	li	a1,140
    80017b72:	00020617          	auipc	a2,0x20
    80017b76:	7a660613          	addi	a2,a2,1958 # 80038318 <__func__.0+0x5f30>
    80017b7a:	0001b517          	auipc	a0,0x1b
    80017b7e:	b6650513          	addi	a0,a0,-1178 # 800326e0 <__func__.0+0x2f8>
    80017b82:	143170ef          	jal	8002f4c4 <printf>
    80017b86:	00044797          	auipc	a5,0x44
    80017b8a:	48b7c783          	lbu	a5,1163(a5) # 8005c011 <excpt+0x1>
    80017b8e:	0001b597          	auipc	a1,0x1b
    80017b92:	b1a58593          	addi	a1,a1,-1254 # 800326a8 <__func__.0+0x2c0>
    80017b96:	c789                	beqz	a5,80017ba0 <load_guest_page_fault_10+0x88>
    80017b98:	0001b597          	auipc	a1,0x1b
    80017b9c:	b2058593          	addi	a1,a1,-1248 # 800326b8 <__func__.0+0x2d0>
    80017ba0:	0001b517          	auipc	a0,0x1b
    80017ba4:	b5850513          	addi	a0,a0,-1192 # 800326f8 <__func__.0+0x310>
    80017ba8:	11d170ef          	jal	8002f4c4 <printf>
    80017bac:	00044797          	auipc	a5,0x44
    80017bb0:	4657c783          	lbu	a5,1125(a5) # 8005c011 <excpt+0x1>
    80017bb4:	e7a1                	bnez	a5,80017bfc <load_guest_page_fault_10+0xe4>
    80017bb6:	4529                	li	a0,10
    80017bb8:	5fa160ef          	jal	8002e1b2 <putchar>
    80017bbc:	00044797          	auipc	a5,0x44
    80017bc0:	4557c783          	lbu	a5,1109(a5) # 8005c011 <excpt+0x1>
    80017bc4:	e795                	bnez	a5,80017bf0 <load_guest_page_fault_10+0xd8>
    80017bc6:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017bc8:	0001b597          	auipc	a1,0x1b
    80017bcc:	ae058593          	addi	a1,a1,-1312 # 800326a8 <__func__.0+0x2c0>
    80017bd0:	0001b517          	auipc	a0,0x1b
    80017bd4:	b9050513          	addi	a0,a0,-1136 # 80032760 <__func__.0+0x378>
    80017bd8:	0ed170ef          	jal	8002f4c4 <printf>
    80017bdc:	4511                	li	a0,4
    80017bde:	b36e90ef          	jal	80000f14 <goto_priv>
    80017be2:	b95e90ef          	jal	80001776 <reset_state>
}
    80017be6:	60a2                	ld	ra,8(sp)
    80017be8:	8522                	mv	a0,s0
    80017bea:	6402                	ld	s0,0(sp)
    80017bec:	0141                	addi	sp,sp,16
    80017bee:	8082                	ret
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017bf0:	4401                	li	s0,0
    TEST_END();
    80017bf2:	0001b597          	auipc	a1,0x1b
    80017bf6:	ac658593          	addi	a1,a1,-1338 # 800326b8 <__func__.0+0x2d0>
    80017bfa:	bfd9                	j	80017bd0 <load_guest_page_fault_10+0xb8>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017bfc:	0001b517          	auipc	a0,0x1b
    80017c00:	b0450513          	addi	a0,a0,-1276 # 80032700 <__func__.0+0x318>
    80017c04:	0c1170ef          	jal	8002f4c4 <printf>
    80017c08:	02900513          	li	a0,41
    80017c0c:	5a6160ef          	jal	8002e1b2 <putchar>
    80017c10:	b75d                	j	80017bb6 <load_guest_page_fault_10+0x9e>

0000000080017c12 <load_guest_page_fault_11>:



bool load_guest_page_fault_11(){
    80017c12:	1101                	addi	sp,sp,-32

    TEST_START();
    80017c14:	00019597          	auipc	a1,0x19
    80017c18:	2d458593          	addi	a1,a1,724 # 80030ee8 <__func__.26>
    80017c1c:	0001b517          	auipc	a0,0x1b
    80017c20:	aac50513          	addi	a0,a0,-1364 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_11(){
    80017c24:	ec06                	sd	ra,24(sp)
    80017c26:	e822                	sd	s0,16(sp)
    80017c28:	e426                	sd	s1,8(sp)
    TEST_START();
    80017c2a:	09b170ef          	jal	8002f4c4 <printf>
    80017c2e:	4529                	li	a0,10
    80017c30:	582160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80017c34:	450d                	li	a0,3
    80017c36:	adee90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80017c3a:	9b3e80ef          	jal	800005ec <hspt_init>
    hpt_init();
    80017c3e:	d93e80ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80017c42:	b47e80ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017c46:	4511                	li	a0,4
    80017c48:	acce90ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017c4c:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017c50:	450d                	li	a0,3
    80017c52:	ac2e90ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017c56:	4509                	li	a0,2
    80017c58:	9dce90ef          	jal	80000e34 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80017c5c:	9bce90ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80017c60:	400197b7          	lui	a5,0x40019
    80017c64:	078a                	slli	a5,a5,0x2
    80017c66:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = vs_page_base(VSI_GI);
    hlvd(vaddr);

    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017c6a:	08c00593          	li	a1,140
    80017c6e:	00020617          	auipc	a2,0x20
    80017c72:	33a60613          	addi	a2,a2,826 # 80037fa8 <__func__.0+0x5bc0>
    80017c76:	0001b517          	auipc	a0,0x1b
    80017c7a:	a6a50513          	addi	a0,a0,-1430 # 800326e0 <__func__.0+0x2f8>
    80017c7e:	047170ef          	jal	8002f4c4 <printf>
    80017c82:	00044797          	auipc	a5,0x44
    80017c86:	38f7c783          	lbu	a5,911(a5) # 8005c011 <excpt+0x1>
    80017c8a:	00044497          	auipc	s1,0x44
    80017c8e:	38648493          	addi	s1,s1,902 # 8005c010 <excpt>
    80017c92:	0001b597          	auipc	a1,0x1b
    80017c96:	a2658593          	addi	a1,a1,-1498 # 800326b8 <__func__.0+0x2d0>
    80017c9a:	cf89                	beqz	a5,80017cb4 <load_guest_page_fault_11+0xa2>
    80017c9c:	6498                	ld	a4,8(s1)
    80017c9e:	47d5                	li	a5,21
    80017ca0:	0001b597          	auipc	a1,0x1b
    80017ca4:	a0858593          	addi	a1,a1,-1528 # 800326a8 <__func__.0+0x2c0>
    80017ca8:	00f70663          	beq	a4,a5,80017cb4 <load_guest_page_fault_11+0xa2>
    80017cac:	0001b597          	auipc	a1,0x1b
    80017cb0:	a0c58593          	addi	a1,a1,-1524 # 800326b8 <__func__.0+0x2d0>
    80017cb4:	0001b517          	auipc	a0,0x1b
    80017cb8:	a4450513          	addi	a0,a0,-1468 # 800326f8 <__func__.0+0x310>
    80017cbc:	009170ef          	jal	8002f4c4 <printf>
    80017cc0:	00044797          	auipc	a5,0x44
    80017cc4:	3517c783          	lbu	a5,849(a5) # 8005c011 <excpt+0x1>
    80017cc8:	c789                	beqz	a5,80017cd2 <load_guest_page_fault_11+0xc0>
    80017cca:	6498                	ld	a4,8(s1)
    80017ccc:	47d5                	li	a5,21
    80017cce:	00f70c63          	beq	a4,a5,80017ce6 <load_guest_page_fault_11+0xd4>
    80017cd2:	0001b517          	auipc	a0,0x1b
    80017cd6:	a2e50513          	addi	a0,a0,-1490 # 80032700 <__func__.0+0x318>
    80017cda:	7ea170ef          	jal	8002f4c4 <printf>
    80017cde:	02900513          	li	a0,41
    80017ce2:	4d0160ef          	jal	8002e1b2 <putchar>
    80017ce6:	4529                	li	a0,10
    80017ce8:	4ca160ef          	jal	8002e1b2 <putchar>
    80017cec:	00044417          	auipc	s0,0x44
    80017cf0:	32544403          	lbu	s0,805(s0) # 8005c011 <excpt+0x1>
        excpt.cause == CAUSE_LGPF
    );



    TEST_END();
    80017cf4:	0001b597          	auipc	a1,0x1b
    80017cf8:	9c458593          	addi	a1,a1,-1596 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017cfc:	cc11                	beqz	s0,80017d18 <load_guest_page_fault_11+0x106>
    80017cfe:	6498                	ld	a4,8(s1)
    80017d00:	47d5                	li	a5,21
    TEST_END();
    80017d02:	0001b597          	auipc	a1,0x1b
    80017d06:	9a658593          	addi	a1,a1,-1626 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017d0a:	00f70763          	beq	a4,a5,80017d18 <load_guest_page_fault_11+0x106>
    80017d0e:	4401                	li	s0,0
    TEST_END();
    80017d10:	0001b597          	auipc	a1,0x1b
    80017d14:	9a858593          	addi	a1,a1,-1624 # 800326b8 <__func__.0+0x2d0>
    80017d18:	0001b517          	auipc	a0,0x1b
    80017d1c:	a4850513          	addi	a0,a0,-1464 # 80032760 <__func__.0+0x378>
    80017d20:	7a4170ef          	jal	8002f4c4 <printf>
    80017d24:	4511                	li	a0,4
    80017d26:	9eee90ef          	jal	80000f14 <goto_priv>
    80017d2a:	a4de90ef          	jal	80001776 <reset_state>
}
    80017d2e:	60e2                	ld	ra,24(sp)
    80017d30:	8522                	mv	a0,s0
    80017d32:	6442                	ld	s0,16(sp)
    80017d34:	64a2                	ld	s1,8(sp)
    80017d36:	6105                	addi	sp,sp,32
    80017d38:	8082                	ret

0000000080017d3a <load_guest_page_fault_12>:

bool load_guest_page_fault_12(){
    80017d3a:	1101                	addi	sp,sp,-32

    TEST_START();
    80017d3c:	00019597          	auipc	a1,0x19
    80017d40:	1cc58593          	addi	a1,a1,460 # 80030f08 <__func__.25>
    80017d44:	0001b517          	auipc	a0,0x1b
    80017d48:	98450513          	addi	a0,a0,-1660 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_12(){
    80017d4c:	ec06                	sd	ra,24(sp)
    80017d4e:	e822                	sd	s0,16(sp)
    80017d50:	e426                	sd	s1,8(sp)
    TEST_START();
    80017d52:	772170ef          	jal	8002f4c4 <printf>
    80017d56:	4529                	li	a0,10
    80017d58:	45a160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80017d5c:	450d                	li	a0,3
    80017d5e:	9b6e90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80017d62:	88be80ef          	jal	800005ec <hspt_init>
    hpt_init();
    80017d66:	c6be80ef          	jal	800009d0 <hpt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017d6a:	4511                	li	a0,4
    80017d6c:	9a8e90ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017d70:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017d74:	450d                	li	a0,3
    80017d76:	99ee90ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017d7a:	4509                	li	a0,2
    80017d7c:	8b8e90ef          	jal	80000e34 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80017d80:	898e90ef          	jal	80000e18 <test_setup_except_function>
    vaddr = vs_page_base(VSI_GUX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80017d84:	000807b7          	lui	a5,0x80
    80017d88:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80017d8c:	2000d5b7          	lui	a1,0x2000d
    80017d90:	058e                	slli	a1,a1,0x3
    80017d92:	6405c7f3          	.insn	4, 0x6405c7f3
    hlvh(vaddr);

    printf("%llx\n",vaddr);
    80017d96:	00021517          	auipc	a0,0x21
    80017d9a:	f6a50513          	addi	a0,a0,-150 # 80038d00 <__func__.0+0x6918>
    80017d9e:	726170ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.cause);
    80017da2:	00044417          	auipc	s0,0x44
    80017da6:	26e40413          	addi	s0,s0,622 # 8005c010 <excpt>
    80017daa:	640c                	ld	a1,8(s0)
    80017dac:	0001b517          	auipc	a0,0x1b
    80017db0:	49c50513          	addi	a0,a0,1180 # 80033248 <__func__.0+0xe60>
    80017db4:	710170ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.triggered);
    80017db8:	00044597          	auipc	a1,0x44
    80017dbc:	2595c583          	lbu	a1,601(a1) # 8005c011 <excpt+0x1>
    80017dc0:	0001b517          	auipc	a0,0x1b
    80017dc4:	48850513          	addi	a0,a0,1160 # 80033248 <__func__.0+0xe60>
    80017dc8:	6fc170ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017dcc:	08c00593          	li	a1,140
    80017dd0:	00020617          	auipc	a2,0x20
    80017dd4:	28860613          	addi	a2,a2,648 # 80038058 <__func__.0+0x5c70>
    80017dd8:	0001b517          	auipc	a0,0x1b
    80017ddc:	90850513          	addi	a0,a0,-1784 # 800326e0 <__func__.0+0x2f8>
    80017de0:	6e4170ef          	jal	8002f4c4 <printf>
    80017de4:	00044797          	auipc	a5,0x44
    80017de8:	22d7c783          	lbu	a5,557(a5) # 8005c011 <excpt+0x1>
    80017dec:	0001b597          	auipc	a1,0x1b
    80017df0:	8cc58593          	addi	a1,a1,-1844 # 800326b8 <__func__.0+0x2d0>
    80017df4:	cf89                	beqz	a5,80017e0e <load_guest_page_fault_12+0xd4>
    80017df6:	6418                	ld	a4,8(s0)
    80017df8:	47d5                	li	a5,21
    80017dfa:	0001b597          	auipc	a1,0x1b
    80017dfe:	8ae58593          	addi	a1,a1,-1874 # 800326a8 <__func__.0+0x2c0>
    80017e02:	00f70663          	beq	a4,a5,80017e0e <load_guest_page_fault_12+0xd4>
    80017e06:	0001b597          	auipc	a1,0x1b
    80017e0a:	8b258593          	addi	a1,a1,-1870 # 800326b8 <__func__.0+0x2d0>
    80017e0e:	0001b517          	auipc	a0,0x1b
    80017e12:	8ea50513          	addi	a0,a0,-1814 # 800326f8 <__func__.0+0x310>
    80017e16:	6ae170ef          	jal	8002f4c4 <printf>
    80017e1a:	00044797          	auipc	a5,0x44
    80017e1e:	1f77c783          	lbu	a5,503(a5) # 8005c011 <excpt+0x1>
    80017e22:	c789                	beqz	a5,80017e2c <load_guest_page_fault_12+0xf2>
    80017e24:	6418                	ld	a4,8(s0)
    80017e26:	47d5                	li	a5,21
    80017e28:	00f70c63          	beq	a4,a5,80017e40 <load_guest_page_fault_12+0x106>
    80017e2c:	0001b517          	auipc	a0,0x1b
    80017e30:	8d450513          	addi	a0,a0,-1836 # 80032700 <__func__.0+0x318>
    80017e34:	690170ef          	jal	8002f4c4 <printf>
    80017e38:	02900513          	li	a0,41
    80017e3c:	376160ef          	jal	8002e1b2 <putchar>
    80017e40:	4529                	li	a0,10
    80017e42:	370160ef          	jal	8002e1b2 <putchar>
    80017e46:	00044497          	auipc	s1,0x44
    80017e4a:	1cb4c483          	lbu	s1,459(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80017e4e:	0001b597          	auipc	a1,0x1b
    80017e52:	86a58593          	addi	a1,a1,-1942 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017e56:	cc91                	beqz	s1,80017e72 <load_guest_page_fault_12+0x138>
    80017e58:	6418                	ld	a4,8(s0)
    80017e5a:	47d5                	li	a5,21
    TEST_END();
    80017e5c:	0001b597          	auipc	a1,0x1b
    80017e60:	84c58593          	addi	a1,a1,-1972 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017e64:	00f70763          	beq	a4,a5,80017e72 <load_guest_page_fault_12+0x138>
    80017e68:	4481                	li	s1,0
    TEST_END();
    80017e6a:	0001b597          	auipc	a1,0x1b
    80017e6e:	84e58593          	addi	a1,a1,-1970 # 800326b8 <__func__.0+0x2d0>
    80017e72:	0001b517          	auipc	a0,0x1b
    80017e76:	8ee50513          	addi	a0,a0,-1810 # 80032760 <__func__.0+0x378>
    80017e7a:	64a170ef          	jal	8002f4c4 <printf>
    80017e7e:	4511                	li	a0,4
    80017e80:	894e90ef          	jal	80000f14 <goto_priv>
    80017e84:	8f3e90ef          	jal	80001776 <reset_state>
}
    80017e88:	60e2                	ld	ra,24(sp)
    80017e8a:	6442                	ld	s0,16(sp)
    80017e8c:	8526                	mv	a0,s1
    80017e8e:	64a2                	ld	s1,8(sp)
    80017e90:	6105                	addi	sp,sp,32
    80017e92:	8082                	ret

0000000080017e94 <load_guest_page_fault_13>:

bool load_guest_page_fault_13(){
    80017e94:	1101                	addi	sp,sp,-32

    TEST_START();
    80017e96:	00019597          	auipc	a1,0x19
    80017e9a:	09258593          	addi	a1,a1,146 # 80030f28 <__func__.24>
    80017e9e:	0001b517          	auipc	a0,0x1b
    80017ea2:	82a50513          	addi	a0,a0,-2006 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_13(){
    80017ea6:	ec06                	sd	ra,24(sp)
    80017ea8:	e822                	sd	s0,16(sp)
    80017eaa:	e426                	sd	s1,8(sp)
    TEST_START();
    80017eac:	618170ef          	jal	8002f4c4 <printf>
    80017eb0:	4529                	li	a0,10
    80017eb2:	300160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80017eb6:	450d                	li	a0,3
    80017eb8:	85ce90ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80017ebc:	f30e80ef          	jal	800005ec <hspt_init>
    hpt_init();
    80017ec0:	b11e80ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80017ec4:	8c5e80ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017ec8:	4511                	li	a0,4
    80017eca:	84ae90ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017ece:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017ed2:	450d                	li	a0,3
    80017ed4:	840e90ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017ed8:	4509                	li	a0,2
    80017eda:	f5be80ef          	jal	80000e34 <set_prev_priv>
    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80017ede:	f3be80ef          	jal	80000e18 <test_setup_except_function>
    vaddr = vs_page_base(VSI_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80017ee2:	000807b7          	lui	a5,0x80
    80017ee6:	1007a073          	csrs	sstatus,a5
    80017eea:	400197b7          	lui	a5,0x40019
    80017eee:	078a                	slli	a5,a5,0x2
    80017ef0:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017ef4:	08c00593          	li	a1,140
    80017ef8:	00020617          	auipc	a2,0x20
    80017efc:	1c060613          	addi	a2,a2,448 # 800380b8 <__func__.0+0x5cd0>
    80017f00:	0001a517          	auipc	a0,0x1a
    80017f04:	7e050513          	addi	a0,a0,2016 # 800326e0 <__func__.0+0x2f8>
    80017f08:	5bc170ef          	jal	8002f4c4 <printf>
    80017f0c:	00044797          	auipc	a5,0x44
    80017f10:	1057c783          	lbu	a5,261(a5) # 8005c011 <excpt+0x1>
    80017f14:	00044497          	auipc	s1,0x44
    80017f18:	0fc48493          	addi	s1,s1,252 # 8005c010 <excpt>
    80017f1c:	0001a597          	auipc	a1,0x1a
    80017f20:	79c58593          	addi	a1,a1,1948 # 800326b8 <__func__.0+0x2d0>
    80017f24:	cf89                	beqz	a5,80017f3e <load_guest_page_fault_13+0xaa>
    80017f26:	6498                	ld	a4,8(s1)
    80017f28:	47d5                	li	a5,21
    80017f2a:	0001a597          	auipc	a1,0x1a
    80017f2e:	77e58593          	addi	a1,a1,1918 # 800326a8 <__func__.0+0x2c0>
    80017f32:	00f70663          	beq	a4,a5,80017f3e <load_guest_page_fault_13+0xaa>
    80017f36:	0001a597          	auipc	a1,0x1a
    80017f3a:	78258593          	addi	a1,a1,1922 # 800326b8 <__func__.0+0x2d0>
    80017f3e:	0001a517          	auipc	a0,0x1a
    80017f42:	7ba50513          	addi	a0,a0,1978 # 800326f8 <__func__.0+0x310>
    80017f46:	57e170ef          	jal	8002f4c4 <printf>
    80017f4a:	00044797          	auipc	a5,0x44
    80017f4e:	0c77c783          	lbu	a5,199(a5) # 8005c011 <excpt+0x1>
    80017f52:	c789                	beqz	a5,80017f5c <load_guest_page_fault_13+0xc8>
    80017f54:	6498                	ld	a4,8(s1)
    80017f56:	47d5                	li	a5,21
    80017f58:	00f70c63          	beq	a4,a5,80017f70 <load_guest_page_fault_13+0xdc>
    80017f5c:	0001a517          	auipc	a0,0x1a
    80017f60:	7a450513          	addi	a0,a0,1956 # 80032700 <__func__.0+0x318>
    80017f64:	560170ef          	jal	8002f4c4 <printf>
    80017f68:	02900513          	li	a0,41
    80017f6c:	246160ef          	jal	8002e1b2 <putchar>
    80017f70:	4529                	li	a0,10
    80017f72:	240160ef          	jal	8002e1b2 <putchar>
    80017f76:	00044417          	auipc	s0,0x44
    80017f7a:	09b44403          	lbu	s0,155(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80017f7e:	0001a597          	auipc	a1,0x1a
    80017f82:	73a58593          	addi	a1,a1,1850 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017f86:	cc11                	beqz	s0,80017fa2 <load_guest_page_fault_13+0x10e>
    80017f88:	6498                	ld	a4,8(s1)
    80017f8a:	47d5                	li	a5,21
    TEST_END();
    80017f8c:	0001a597          	auipc	a1,0x1a
    80017f90:	71c58593          	addi	a1,a1,1820 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017f94:	00f70763          	beq	a4,a5,80017fa2 <load_guest_page_fault_13+0x10e>
    80017f98:	4401                	li	s0,0
    TEST_END();
    80017f9a:	0001a597          	auipc	a1,0x1a
    80017f9e:	71e58593          	addi	a1,a1,1822 # 800326b8 <__func__.0+0x2d0>
    80017fa2:	0001a517          	auipc	a0,0x1a
    80017fa6:	7be50513          	addi	a0,a0,1982 # 80032760 <__func__.0+0x378>
    80017faa:	51a170ef          	jal	8002f4c4 <printf>
    80017fae:	4511                	li	a0,4
    80017fb0:	f65e80ef          	jal	80000f14 <goto_priv>
    80017fb4:	fc2e90ef          	jal	80001776 <reset_state>
}
    80017fb8:	60e2                	ld	ra,24(sp)
    80017fba:	8522                	mv	a0,s0
    80017fbc:	6442                	ld	s0,16(sp)
    80017fbe:	64a2                	ld	s1,8(sp)
    80017fc0:	6105                	addi	sp,sp,32
    80017fc2:	8082                	ret

0000000080017fc4 <load_guest_page_fault_14>:

bool load_guest_page_fault_14(){
    80017fc4:	1101                	addi	sp,sp,-32

    TEST_START();
    80017fc6:	00019597          	auipc	a1,0x19
    80017fca:	f8258593          	addi	a1,a1,-126 # 80030f48 <__func__.23>
    80017fce:	0001a517          	auipc	a0,0x1a
    80017fd2:	6fa50513          	addi	a0,a0,1786 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_14(){
    80017fd6:	ec06                	sd	ra,24(sp)
    80017fd8:	e822                	sd	s0,16(sp)
    80017fda:	e426                	sd	s1,8(sp)
    TEST_START();
    80017fdc:	4e8170ef          	jal	8002f4c4 <printf>
    80017fe0:	4529                	li	a0,10
    80017fe2:	1d0160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80017fe6:	450d                	li	a0,3
    80017fe8:	f2de80ef          	jal	80000f14 <goto_priv>
    hpt_init();
    80017fec:	9e5e80ef          	jal	800009d0 <hpt_init>
    hspt_init();
    80017ff0:	dfce80ef          	jal	800005ec <hspt_init>
    vspt_init();
    80017ff4:	f94e80ef          	jal	80000788 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80017ff8:	4511                	li	a0,4
    80017ffa:	f1be80ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80017ffe:	000407b7          	lui	a5,0x40
    80018002:	2007b073          	csrc	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    80018006:	28005073          	csrwi	vsatp,0
    
    goto_priv(PRIV_HS);
    8001800a:	450d                	li	a0,3
    8001800c:	f09e80ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018010:	4509                	li	a0,2
    80018012:	e23e80ef          	jal	80000e34 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80018016:	e03e80ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    8001801a:	001007b7          	lui	a5,0x100
    8001801e:	06778793          	addi	a5,a5,103 # 100067 <STACK_SIZE+0x67>
    80018022:	07b2                	slli	a5,a5,0xc
    80018024:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = vs_page_base(VSI_GURWX);


    hlvb(vaddr);
    printf("%d\n",excpt.cause);
    80018028:	00044417          	auipc	s0,0x44
    8001802c:	fe840413          	addi	s0,s0,-24 # 8005c010 <excpt>
    80018030:	640c                	ld	a1,8(s0)
    80018032:	0001b517          	auipc	a0,0x1b
    80018036:	21650513          	addi	a0,a0,534 # 80033248 <__func__.0+0xe60>
    8001803a:	48a170ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.triggered);
    8001803e:	00044597          	auipc	a1,0x44
    80018042:	fd35c583          	lbu	a1,-45(a1) # 8005c011 <excpt+0x1>
    80018046:	0001b517          	auipc	a0,0x1b
    8001804a:	20250513          	addi	a0,a0,514 # 80033248 <__func__.0+0xe60>
    8001804e:	476170ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80018052:	08c00593          	li	a1,140
    80018056:	00020617          	auipc	a2,0x20
    8001805a:	2fa60613          	addi	a2,a2,762 # 80038350 <__func__.0+0x5f68>
    8001805e:	0001a517          	auipc	a0,0x1a
    80018062:	68250513          	addi	a0,a0,1666 # 800326e0 <__func__.0+0x2f8>
    80018066:	45e170ef          	jal	8002f4c4 <printf>
    8001806a:	00044797          	auipc	a5,0x44
    8001806e:	fa77c783          	lbu	a5,-89(a5) # 8005c011 <excpt+0x1>
    80018072:	0001a597          	auipc	a1,0x1a
    80018076:	64658593          	addi	a1,a1,1606 # 800326b8 <__func__.0+0x2d0>
    8001807a:	cf89                	beqz	a5,80018094 <load_guest_page_fault_14+0xd0>
    8001807c:	6418                	ld	a4,8(s0)
    8001807e:	47d5                	li	a5,21
    80018080:	0001a597          	auipc	a1,0x1a
    80018084:	62858593          	addi	a1,a1,1576 # 800326a8 <__func__.0+0x2c0>
    80018088:	00f70663          	beq	a4,a5,80018094 <load_guest_page_fault_14+0xd0>
    8001808c:	0001a597          	auipc	a1,0x1a
    80018090:	62c58593          	addi	a1,a1,1580 # 800326b8 <__func__.0+0x2d0>
    80018094:	0001a517          	auipc	a0,0x1a
    80018098:	66450513          	addi	a0,a0,1636 # 800326f8 <__func__.0+0x310>
    8001809c:	428170ef          	jal	8002f4c4 <printf>
    800180a0:	00044797          	auipc	a5,0x44
    800180a4:	f717c783          	lbu	a5,-143(a5) # 8005c011 <excpt+0x1>
    800180a8:	c789                	beqz	a5,800180b2 <load_guest_page_fault_14+0xee>
    800180aa:	6418                	ld	a4,8(s0)
    800180ac:	47d5                	li	a5,21
    800180ae:	00f70c63          	beq	a4,a5,800180c6 <load_guest_page_fault_14+0x102>
    800180b2:	0001a517          	auipc	a0,0x1a
    800180b6:	64e50513          	addi	a0,a0,1614 # 80032700 <__func__.0+0x318>
    800180ba:	40a170ef          	jal	8002f4c4 <printf>
    800180be:	02900513          	li	a0,41
    800180c2:	0f0160ef          	jal	8002e1b2 <putchar>
    800180c6:	4529                	li	a0,10
    800180c8:	0ea160ef          	jal	8002e1b2 <putchar>
    800180cc:	00044497          	auipc	s1,0x44
    800180d0:	f454c483          	lbu	s1,-187(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800180d4:	0001a597          	auipc	a1,0x1a
    800180d8:	5e458593          	addi	a1,a1,1508 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    800180dc:	cc91                	beqz	s1,800180f8 <load_guest_page_fault_14+0x134>
    800180de:	6418                	ld	a4,8(s0)
    800180e0:	47d5                	li	a5,21
    TEST_END();
    800180e2:	0001a597          	auipc	a1,0x1a
    800180e6:	5c658593          	addi	a1,a1,1478 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    800180ea:	00f70763          	beq	a4,a5,800180f8 <load_guest_page_fault_14+0x134>
    800180ee:	4481                	li	s1,0
    TEST_END();
    800180f0:	0001a597          	auipc	a1,0x1a
    800180f4:	5c858593          	addi	a1,a1,1480 # 800326b8 <__func__.0+0x2d0>
    800180f8:	0001a517          	auipc	a0,0x1a
    800180fc:	66850513          	addi	a0,a0,1640 # 80032760 <__func__.0+0x378>
    80018100:	3c4170ef          	jal	8002f4c4 <printf>
    80018104:	4511                	li	a0,4
    80018106:	e0fe80ef          	jal	80000f14 <goto_priv>
    8001810a:	e6ce90ef          	jal	80001776 <reset_state>
}
    8001810e:	60e2                	ld	ra,24(sp)
    80018110:	6442                	ld	s0,16(sp)
    80018112:	8526                	mv	a0,s1
    80018114:	64a2                	ld	s1,8(sp)
    80018116:	6105                	addi	sp,sp,32
    80018118:	8082                	ret

000000008001811a <load_guest_page_fault_15>:

bool load_guest_page_fault_15(){
    8001811a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001811c:	00019597          	auipc	a1,0x19
    80018120:	e4c58593          	addi	a1,a1,-436 # 80030f68 <__func__.22>
    80018124:	0001a517          	auipc	a0,0x1a
    80018128:	5a450513          	addi	a0,a0,1444 # 800326c8 <__func__.0+0x2e0>
bool load_guest_page_fault_15(){
    8001812c:	e406                	sd	ra,8(sp)
    8001812e:	e022                	sd	s0,0(sp)
    TEST_START();
    80018130:	394170ef          	jal	8002f4c4 <printf>
    80018134:	4529                	li	a0,10
    80018136:	07c160ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8001813a:	450d                	li	a0,3
    8001813c:	dd9e80ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80018140:	cace80ef          	jal	800005ec <hspt_init>
    hpt_init();
    80018144:	88de80ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80018148:	e40e80ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    8001814c:	4511                	li	a0,4
    8001814e:	dc7e80ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018152:	000407b7          	lui	a5,0x40
    80018156:	2007a073          	csrs	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    8001815a:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    8001815e:	450d                	li	a0,3
    80018160:	db5e80ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018164:	4509                	li	a0,2
    80018166:	ccfe80ef          	jal	80000e34 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = vs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001816a:	cafe80ef          	jal	80000e18 <test_setup_except_function>
    8001816e:	000807b7          	lui	a5,0x80
    80018172:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80018174:	07b6                	slli	a5,a5,0xd
    80018176:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001817a:	08c00593          	li	a1,140
    8001817e:	0001f617          	auipc	a2,0x1f
    80018182:	7a260613          	addi	a2,a2,1954 # 80037920 <__func__.0+0x5538>
    80018186:	0001a517          	auipc	a0,0x1a
    8001818a:	55a50513          	addi	a0,a0,1370 # 800326e0 <__func__.0+0x2f8>
    8001818e:	336170ef          	jal	8002f4c4 <printf>
    80018192:	00044797          	auipc	a5,0x44
    80018196:	e7f7c783          	lbu	a5,-385(a5) # 8005c011 <excpt+0x1>
    8001819a:	0001a597          	auipc	a1,0x1a
    8001819e:	50e58593          	addi	a1,a1,1294 # 800326a8 <__func__.0+0x2c0>
    800181a2:	c789                	beqz	a5,800181ac <load_guest_page_fault_15+0x92>
    800181a4:	0001a597          	auipc	a1,0x1a
    800181a8:	51458593          	addi	a1,a1,1300 # 800326b8 <__func__.0+0x2d0>
    800181ac:	0001a517          	auipc	a0,0x1a
    800181b0:	54c50513          	addi	a0,a0,1356 # 800326f8 <__func__.0+0x310>
    800181b4:	310170ef          	jal	8002f4c4 <printf>
    800181b8:	00044797          	auipc	a5,0x44
    800181bc:	e597c783          	lbu	a5,-423(a5) # 8005c011 <excpt+0x1>
    800181c0:	e7a1                	bnez	a5,80018208 <load_guest_page_fault_15+0xee>
    800181c2:	4529                	li	a0,10
    800181c4:	7ef150ef          	jal	8002e1b2 <putchar>
    800181c8:	00044797          	auipc	a5,0x44
    800181cc:	e497c783          	lbu	a5,-439(a5) # 8005c011 <excpt+0x1>
    800181d0:	e795                	bnez	a5,800181fc <load_guest_page_fault_15+0xe2>
    800181d2:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    800181d4:	0001a597          	auipc	a1,0x1a
    800181d8:	4d458593          	addi	a1,a1,1236 # 800326a8 <__func__.0+0x2c0>
    800181dc:	0001a517          	auipc	a0,0x1a
    800181e0:	58450513          	addi	a0,a0,1412 # 80032760 <__func__.0+0x378>
    800181e4:	2e0170ef          	jal	8002f4c4 <printf>
    800181e8:	4511                	li	a0,4
    800181ea:	d2be80ef          	jal	80000f14 <goto_priv>
    800181ee:	d88e90ef          	jal	80001776 <reset_state>
}
    800181f2:	60a2                	ld	ra,8(sp)
    800181f4:	8522                	mv	a0,s0
    800181f6:	6402                	ld	s0,0(sp)
    800181f8:	0141                	addi	sp,sp,16
    800181fa:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800181fc:	4401                	li	s0,0
    TEST_END();
    800181fe:	0001a597          	auipc	a1,0x1a
    80018202:	4ba58593          	addi	a1,a1,1210 # 800326b8 <__func__.0+0x2d0>
    80018206:	bfd9                	j	800181dc <load_guest_page_fault_15+0xc2>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80018208:	0001a517          	auipc	a0,0x1a
    8001820c:	4f850513          	addi	a0,a0,1272 # 80032700 <__func__.0+0x318>
    80018210:	2b4170ef          	jal	8002f4c4 <printf>
    80018214:	02900513          	li	a0,41
    80018218:	79b150ef          	jal	8002e1b2 <putchar>
    8001821c:	b75d                	j	800181c2 <load_guest_page_fault_15+0xa8>

000000008001821e <store_guest_page_fault_1>:



bool store_guest_page_fault_1(){
    8001821e:	1101                	addi	sp,sp,-32

    TEST_START();
    80018220:	00019597          	auipc	a1,0x19
    80018224:	d6858593          	addi	a1,a1,-664 # 80030f88 <__func__.21>
    80018228:	0001a517          	auipc	a0,0x1a
    8001822c:	4a050513          	addi	a0,a0,1184 # 800326c8 <__func__.0+0x2e0>
bool store_guest_page_fault_1(){
    80018230:	ec06                	sd	ra,24(sp)
    80018232:	e822                	sd	s0,16(sp)
    80018234:	e426                	sd	s1,8(sp)
    TEST_START();
    80018236:	28e170ef          	jal	8002f4c4 <printf>
    8001823a:	4529                	li	a0,10
    8001823c:	777150ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80018240:	450d                	li	a0,3
    80018242:	cd3e80ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80018246:	ba6e80ef          	jal	800005ec <hspt_init>
    hpt_init();
    8001824a:	f86e80ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001824e:	d3ae80ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80018252:	450d                	li	a0,3
    80018254:	cc1e80ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018258:	4509                	li	a0,2
    8001825a:	bdbe80ef          	jal	80000e34 <set_prev_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    8001825e:	bbbe80ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80018262:	37ab77b7          	lui	a5,0x37ab7
    80018266:	00100737          	lui	a4,0x100
    8001826a:	078a                	slli	a5,a5,0x2
    8001826c:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018270:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018274:	0732                	slli	a4,a4,0xc
    80018276:	6ef74073          	.insn	4, 0x6ef74073

    vaddr = hs_page_base(VSRWX_GI);
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.v=0 leads to SGPF",
    8001827a:	08c00593          	li	a1,140
    8001827e:	00020617          	auipc	a2,0x20
    80018282:	11260613          	addi	a2,a2,274 # 80038390 <__func__.0+0x5fa8>
    80018286:	0001a517          	auipc	a0,0x1a
    8001828a:	45a50513          	addi	a0,a0,1114 # 800326e0 <__func__.0+0x2f8>
    8001828e:	236170ef          	jal	8002f4c4 <printf>
    80018292:	00044797          	auipc	a5,0x44
    80018296:	d7f7c783          	lbu	a5,-641(a5) # 8005c011 <excpt+0x1>
    8001829a:	00044497          	auipc	s1,0x44
    8001829e:	d7648493          	addi	s1,s1,-650 # 8005c010 <excpt>
    800182a2:	0001a597          	auipc	a1,0x1a
    800182a6:	41658593          	addi	a1,a1,1046 # 800326b8 <__func__.0+0x2d0>
    800182aa:	cf89                	beqz	a5,800182c4 <store_guest_page_fault_1+0xa6>
    800182ac:	6498                	ld	a4,8(s1)
    800182ae:	47dd                	li	a5,23
    800182b0:	0001a597          	auipc	a1,0x1a
    800182b4:	3f858593          	addi	a1,a1,1016 # 800326a8 <__func__.0+0x2c0>
    800182b8:	00f70663          	beq	a4,a5,800182c4 <store_guest_page_fault_1+0xa6>
    800182bc:	0001a597          	auipc	a1,0x1a
    800182c0:	3fc58593          	addi	a1,a1,1020 # 800326b8 <__func__.0+0x2d0>
    800182c4:	0001a517          	auipc	a0,0x1a
    800182c8:	43450513          	addi	a0,a0,1076 # 800326f8 <__func__.0+0x310>
    800182cc:	1f8170ef          	jal	8002f4c4 <printf>
    800182d0:	00044797          	auipc	a5,0x44
    800182d4:	d417c783          	lbu	a5,-703(a5) # 8005c011 <excpt+0x1>
    800182d8:	c789                	beqz	a5,800182e2 <store_guest_page_fault_1+0xc4>
    800182da:	6498                	ld	a4,8(s1)
    800182dc:	47dd                	li	a5,23
    800182de:	00f70c63          	beq	a4,a5,800182f6 <store_guest_page_fault_1+0xd8>
    800182e2:	0001a517          	auipc	a0,0x1a
    800182e6:	41e50513          	addi	a0,a0,1054 # 80032700 <__func__.0+0x318>
    800182ea:	1da170ef          	jal	8002f4c4 <printf>
    800182ee:	02900513          	li	a0,41
    800182f2:	6c1150ef          	jal	8002e1b2 <putchar>
    800182f6:	4529                	li	a0,10
    800182f8:	6bb150ef          	jal	8002e1b2 <putchar>
    800182fc:	00044797          	auipc	a5,0x44
    80018300:	d157c783          	lbu	a5,-747(a5) # 8005c011 <excpt+0x1>
    80018304:	4401                	li	s0,0
    80018306:	c789                	beqz	a5,80018310 <store_guest_page_fault_1+0xf2>
    80018308:	6480                	ld	s0,8(s1)
    8001830a:	1425                	addi	s0,s0,-23
    8001830c:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80018310:	b09e80ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80018314:	001007b7          	lui	a5,0x100
    80018318:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001831c:	6731                	lui	a4,0xc
    8001831e:	07b2                	slli	a5,a5,0xc
    80018320:	eef70713          	addi	a4,a4,-273 # beef <_test_table_size+0xbeee>
    80018324:	66e7c073          	.insn	4, 0x66e7c073
    addr = hs_page_base(VSRWX_GI);

    hsvh(addr,0xbeef);   
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018328:	08c00593          	li	a1,140
    8001832c:	00020617          	auipc	a2,0x20
    80018330:	0b460613          	addi	a2,a2,180 # 800383e0 <__func__.0+0x5ff8>
    80018334:	0001a517          	auipc	a0,0x1a
    80018338:	3ac50513          	addi	a0,a0,940 # 800326e0 <__func__.0+0x2f8>
    8001833c:	188170ef          	jal	8002f4c4 <printf>
    80018340:	00044797          	auipc	a5,0x44
    80018344:	cd17c783          	lbu	a5,-815(a5) # 8005c011 <excpt+0x1>
    80018348:	0001a597          	auipc	a1,0x1a
    8001834c:	37058593          	addi	a1,a1,880 # 800326b8 <__func__.0+0x2d0>
    80018350:	cf89                	beqz	a5,8001836a <store_guest_page_fault_1+0x14c>
    80018352:	6498                	ld	a4,8(s1)
    80018354:	47dd                	li	a5,23
    80018356:	0001a597          	auipc	a1,0x1a
    8001835a:	35258593          	addi	a1,a1,850 # 800326a8 <__func__.0+0x2c0>
    8001835e:	00f70663          	beq	a4,a5,8001836a <store_guest_page_fault_1+0x14c>
    80018362:	0001a597          	auipc	a1,0x1a
    80018366:	35658593          	addi	a1,a1,854 # 800326b8 <__func__.0+0x2d0>
    8001836a:	0001a517          	auipc	a0,0x1a
    8001836e:	38e50513          	addi	a0,a0,910 # 800326f8 <__func__.0+0x310>
    80018372:	152170ef          	jal	8002f4c4 <printf>
    80018376:	00044797          	auipc	a5,0x44
    8001837a:	c9b7c783          	lbu	a5,-869(a5) # 8005c011 <excpt+0x1>
    8001837e:	c789                	beqz	a5,80018388 <store_guest_page_fault_1+0x16a>
    80018380:	6498                	ld	a4,8(s1)
    80018382:	47dd                	li	a5,23
    80018384:	00f70c63          	beq	a4,a5,8001839c <store_guest_page_fault_1+0x17e>
    80018388:	0001a517          	auipc	a0,0x1a
    8001838c:	37850513          	addi	a0,a0,888 # 80032700 <__func__.0+0x318>
    80018390:	134170ef          	jal	8002f4c4 <printf>
    80018394:	02900513          	li	a0,41
    80018398:	61b150ef          	jal	8002e1b2 <putchar>
    8001839c:	4529                	li	a0,10
    8001839e:	615150ef          	jal	8002e1b2 <putchar>
    800183a2:	c015                	beqz	s0,800183c6 <store_guest_page_fault_1+0x1a8>
    800183a4:	00044417          	auipc	s0,0x44
    800183a8:	c6d44403          	lbu	s0,-915(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800183ac:	0001a597          	auipc	a1,0x1a
    800183b0:	30c58593          	addi	a1,a1,780 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800183b4:	cc11                	beqz	s0,800183d0 <store_guest_page_fault_1+0x1b2>
    800183b6:	6498                	ld	a4,8(s1)
    800183b8:	47dd                	li	a5,23
    TEST_END();
    800183ba:	0001a597          	auipc	a1,0x1a
    800183be:	2ee58593          	addi	a1,a1,750 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800183c2:	00f70763          	beq	a4,a5,800183d0 <store_guest_page_fault_1+0x1b2>
    800183c6:	4401                	li	s0,0
    TEST_END();
    800183c8:	0001a597          	auipc	a1,0x1a
    800183cc:	2f058593          	addi	a1,a1,752 # 800326b8 <__func__.0+0x2d0>
    800183d0:	0001a517          	auipc	a0,0x1a
    800183d4:	39050513          	addi	a0,a0,912 # 80032760 <__func__.0+0x378>
    800183d8:	0ec170ef          	jal	8002f4c4 <printf>
    800183dc:	4511                	li	a0,4
    800183de:	b37e80ef          	jal	80000f14 <goto_priv>
    800183e2:	b94e90ef          	jal	80001776 <reset_state>

}
    800183e6:	60e2                	ld	ra,24(sp)
    800183e8:	8522                	mv	a0,s0
    800183ea:	6442                	ld	s0,16(sp)
    800183ec:	64a2                	ld	s1,8(sp)
    800183ee:	6105                	addi	sp,sp,32
    800183f0:	8082                	ret

00000000800183f2 <store_guest_page_fault_2>:

bool store_guest_page_fault_2(){
    800183f2:	1101                	addi	sp,sp,-32

    TEST_START();
    800183f4:	00019597          	auipc	a1,0x19
    800183f8:	bb458593          	addi	a1,a1,-1100 # 80030fa8 <__func__.20>
    800183fc:	0001a517          	auipc	a0,0x1a
    80018400:	2cc50513          	addi	a0,a0,716 # 800326c8 <__func__.0+0x2e0>
bool store_guest_page_fault_2(){
    80018404:	ec06                	sd	ra,24(sp)
    80018406:	e822                	sd	s0,16(sp)
    80018408:	e426                	sd	s1,8(sp)
    TEST_START();
    8001840a:	0ba170ef          	jal	8002f4c4 <printf>
    8001840e:	4529                	li	a0,10
    80018410:	5a3150ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80018414:	450d                	li	a0,3
    80018416:	affe80ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001841a:	9d2e80ef          	jal	800005ec <hspt_init>
    hpt_init();
    8001841e:	db2e80ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80018422:	b66e80ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80018426:	450d                	li	a0,3
    80018428:	aede80ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001842c:	4509                	li	a0,2
    8001842e:	a07e80ef          	jal	80000e34 <set_prev_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80018432:	9e7e80ef          	jal	80000e18 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018436:	000807b7          	lui	a5,0x80
    8001843a:	1007b073          	csrc	sstatus,a5
    asm volatile(
    8001843e:	37ab77b7          	lui	a5,0x37ab7
    80018442:	00100737          	lui	a4,0x100
    80018446:	078a                	slli	a5,a5,0x2
    80018448:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001844c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018450:	0732                	slli	a4,a4,0xc
    80018452:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018456:	08c00593          	li	a1,140
    8001845a:	00020617          	auipc	a2,0x20
    8001845e:	fe660613          	addi	a2,a2,-26 # 80038440 <__func__.0+0x6058>
    80018462:	0001a517          	auipc	a0,0x1a
    80018466:	27e50513          	addi	a0,a0,638 # 800326e0 <__func__.0+0x2f8>
    8001846a:	05a170ef          	jal	8002f4c4 <printf>
    8001846e:	00044797          	auipc	a5,0x44
    80018472:	ba37c783          	lbu	a5,-1117(a5) # 8005c011 <excpt+0x1>
    80018476:	00044497          	auipc	s1,0x44
    8001847a:	b9a48493          	addi	s1,s1,-1126 # 8005c010 <excpt>
    8001847e:	0001a597          	auipc	a1,0x1a
    80018482:	23a58593          	addi	a1,a1,570 # 800326b8 <__func__.0+0x2d0>
    80018486:	cf89                	beqz	a5,800184a0 <store_guest_page_fault_2+0xae>
    80018488:	6498                	ld	a4,8(s1)
    8001848a:	47dd                	li	a5,23
    8001848c:	0001a597          	auipc	a1,0x1a
    80018490:	21c58593          	addi	a1,a1,540 # 800326a8 <__func__.0+0x2c0>
    80018494:	00f70663          	beq	a4,a5,800184a0 <store_guest_page_fault_2+0xae>
    80018498:	0001a597          	auipc	a1,0x1a
    8001849c:	22058593          	addi	a1,a1,544 # 800326b8 <__func__.0+0x2d0>
    800184a0:	0001a517          	auipc	a0,0x1a
    800184a4:	25850513          	addi	a0,a0,600 # 800326f8 <__func__.0+0x310>
    800184a8:	01c170ef          	jal	8002f4c4 <printf>
    800184ac:	00044797          	auipc	a5,0x44
    800184b0:	b657c783          	lbu	a5,-1179(a5) # 8005c011 <excpt+0x1>
    800184b4:	c789                	beqz	a5,800184be <store_guest_page_fault_2+0xcc>
    800184b6:	6498                	ld	a4,8(s1)
    800184b8:	47dd                	li	a5,23
    800184ba:	00f70c63          	beq	a4,a5,800184d2 <store_guest_page_fault_2+0xe0>
    800184be:	0001a517          	auipc	a0,0x1a
    800184c2:	24250513          	addi	a0,a0,578 # 80032700 <__func__.0+0x318>
    800184c6:	7ff160ef          	jal	8002f4c4 <printf>
    800184ca:	02900513          	li	a0,41
    800184ce:	4e5150ef          	jal	8002e1b2 <putchar>
    800184d2:	4529                	li	a0,10
    800184d4:	4df150ef          	jal	8002e1b2 <putchar>
    800184d8:	00044417          	auipc	s0,0x44
    800184dc:	b3944403          	lbu	s0,-1223(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800184e0:	0001a597          	auipc	a1,0x1a
    800184e4:	1d858593          	addi	a1,a1,472 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800184e8:	cc11                	beqz	s0,80018504 <store_guest_page_fault_2+0x112>
    800184ea:	6498                	ld	a4,8(s1)
    800184ec:	47dd                	li	a5,23
    TEST_END();
    800184ee:	0001a597          	auipc	a1,0x1a
    800184f2:	1ba58593          	addi	a1,a1,442 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800184f6:	00f70763          	beq	a4,a5,80018504 <store_guest_page_fault_2+0x112>
    800184fa:	4401                	li	s0,0
    TEST_END();
    800184fc:	0001a597          	auipc	a1,0x1a
    80018500:	1bc58593          	addi	a1,a1,444 # 800326b8 <__func__.0+0x2d0>
    80018504:	0001a517          	auipc	a0,0x1a
    80018508:	25c50513          	addi	a0,a0,604 # 80032760 <__func__.0+0x378>
    8001850c:	7b9160ef          	jal	8002f4c4 <printf>
    80018510:	4511                	li	a0,4
    80018512:	a03e80ef          	jal	80000f14 <goto_priv>
    80018516:	a60e90ef          	jal	80001776 <reset_state>
}
    8001851a:	60e2                	ld	ra,24(sp)
    8001851c:	8522                	mv	a0,s0
    8001851e:	6442                	ld	s0,16(sp)
    80018520:	64a2                	ld	s1,8(sp)
    80018522:	6105                	addi	sp,sp,32
    80018524:	8082                	ret

0000000080018526 <store_guest_page_fault_3>:

bool store_guest_page_fault_3(){
    80018526:	1101                	addi	sp,sp,-32

    TEST_START();
    80018528:	00019597          	auipc	a1,0x19
    8001852c:	aa058593          	addi	a1,a1,-1376 # 80030fc8 <__func__.19>
    80018530:	0001a517          	auipc	a0,0x1a
    80018534:	19850513          	addi	a0,a0,408 # 800326c8 <__func__.0+0x2e0>
bool store_guest_page_fault_3(){
    80018538:	ec06                	sd	ra,24(sp)
    8001853a:	e822                	sd	s0,16(sp)
    8001853c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001853e:	787160ef          	jal	8002f4c4 <printf>
    80018542:	4529                	li	a0,10
    80018544:	46f150ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80018548:	450d                	li	a0,3
    8001854a:	9cbe80ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001854e:	89ee80ef          	jal	800005ec <hspt_init>
    hpt_init();
    80018552:	c7ee80ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80018556:	a32e80ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001855a:	450d                	li	a0,3
    8001855c:	9b9e80ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018560:	4509                	li	a0,2
    80018562:	8d3e80ef          	jal	80000e34 <set_prev_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80018566:	8b3e80ef          	jal	80000e18 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001856a:	000807b7          	lui	a5,0x80
    8001856e:	1007a073          	csrs	sstatus,a5
    80018572:	37ab77b7          	lui	a5,0x37ab7
    80018576:	00100737          	lui	a4,0x100
    8001857a:	078a                	slli	a5,a5,0x2
    8001857c:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018580:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018584:	0732                	slli	a4,a4,0xc
    80018586:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001858a:	08c00593          	li	a1,140
    8001858e:	00020617          	auipc	a2,0x20
    80018592:	f1260613          	addi	a2,a2,-238 # 800384a0 <__func__.0+0x60b8>
    80018596:	0001a517          	auipc	a0,0x1a
    8001859a:	14a50513          	addi	a0,a0,330 # 800326e0 <__func__.0+0x2f8>
    8001859e:	727160ef          	jal	8002f4c4 <printf>
    800185a2:	00044797          	auipc	a5,0x44
    800185a6:	a6f7c783          	lbu	a5,-1425(a5) # 8005c011 <excpt+0x1>
    800185aa:	00044497          	auipc	s1,0x44
    800185ae:	a6648493          	addi	s1,s1,-1434 # 8005c010 <excpt>
    800185b2:	0001a597          	auipc	a1,0x1a
    800185b6:	10658593          	addi	a1,a1,262 # 800326b8 <__func__.0+0x2d0>
    800185ba:	cf89                	beqz	a5,800185d4 <store_guest_page_fault_3+0xae>
    800185bc:	6498                	ld	a4,8(s1)
    800185be:	47dd                	li	a5,23
    800185c0:	0001a597          	auipc	a1,0x1a
    800185c4:	0e858593          	addi	a1,a1,232 # 800326a8 <__func__.0+0x2c0>
    800185c8:	00f70663          	beq	a4,a5,800185d4 <store_guest_page_fault_3+0xae>
    800185cc:	0001a597          	auipc	a1,0x1a
    800185d0:	0ec58593          	addi	a1,a1,236 # 800326b8 <__func__.0+0x2d0>
    800185d4:	0001a517          	auipc	a0,0x1a
    800185d8:	12450513          	addi	a0,a0,292 # 800326f8 <__func__.0+0x310>
    800185dc:	6e9160ef          	jal	8002f4c4 <printf>
    800185e0:	00044797          	auipc	a5,0x44
    800185e4:	a317c783          	lbu	a5,-1487(a5) # 8005c011 <excpt+0x1>
    800185e8:	c789                	beqz	a5,800185f2 <store_guest_page_fault_3+0xcc>
    800185ea:	6498                	ld	a4,8(s1)
    800185ec:	47dd                	li	a5,23
    800185ee:	00f70c63          	beq	a4,a5,80018606 <store_guest_page_fault_3+0xe0>
    800185f2:	0001a517          	auipc	a0,0x1a
    800185f6:	10e50513          	addi	a0,a0,270 # 80032700 <__func__.0+0x318>
    800185fa:	6cb160ef          	jal	8002f4c4 <printf>
    800185fe:	02900513          	li	a0,41
    80018602:	3b1150ef          	jal	8002e1b2 <putchar>
    80018606:	4529                	li	a0,10
    80018608:	3ab150ef          	jal	8002e1b2 <putchar>
    8001860c:	00044417          	auipc	s0,0x44
    80018610:	a0544403          	lbu	s0,-1531(s0) # 8005c011 <excpt+0x1>
    80018614:	c409                	beqz	s0,8001861e <store_guest_page_fault_3+0xf8>
    80018616:	6498                	ld	a4,8(s1)
    80018618:	47dd                	li	a5,23
    8001861a:	02f70c63          	beq	a4,a5,80018652 <store_guest_page_fault_3+0x12c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001861e:	000807b7          	lui	a5,0x80
    80018622:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018626:	4401                	li	s0,0

    TEST_END();
    80018628:	0001a597          	auipc	a1,0x1a
    8001862c:	09058593          	addi	a1,a1,144 # 800326b8 <__func__.0+0x2d0>
    80018630:	0001a517          	auipc	a0,0x1a
    80018634:	13050513          	addi	a0,a0,304 # 80032760 <__func__.0+0x378>
    80018638:	68d160ef          	jal	8002f4c4 <printf>
    8001863c:	4511                	li	a0,4
    8001863e:	8d7e80ef          	jal	80000f14 <goto_priv>
    80018642:	934e90ef          	jal	80001776 <reset_state>
}
    80018646:	60e2                	ld	ra,24(sp)
    80018648:	8522                	mv	a0,s0
    8001864a:	6442                	ld	s0,16(sp)
    8001864c:	64a2                	ld	s1,8(sp)
    8001864e:	6105                	addi	sp,sp,32
    80018650:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018652:	000807b7          	lui	a5,0x80
    80018656:	1007b073          	csrc	sstatus,a5
    TEST_END();
    8001865a:	0001a597          	auipc	a1,0x1a
    8001865e:	04e58593          	addi	a1,a1,78 # 800326a8 <__func__.0+0x2c0>
    80018662:	b7f9                	j	80018630 <store_guest_page_fault_3+0x10a>

0000000080018664 <store_guest_page_fault_4>:

bool store_guest_page_fault_4(){
    80018664:	1101                	addi	sp,sp,-32

    TEST_START();
    80018666:	00019597          	auipc	a1,0x19
    8001866a:	98258593          	addi	a1,a1,-1662 # 80030fe8 <__func__.18>
    8001866e:	0001a517          	auipc	a0,0x1a
    80018672:	05a50513          	addi	a0,a0,90 # 800326c8 <__func__.0+0x2e0>
bool store_guest_page_fault_4(){
    80018676:	ec06                	sd	ra,24(sp)
    80018678:	e822                	sd	s0,16(sp)
    8001867a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001867c:	649160ef          	jal	8002f4c4 <printf>
    80018680:	4529                	li	a0,10
    80018682:	331150ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80018686:	450d                	li	a0,3
    80018688:	88de80ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001868c:	f61e70ef          	jal	800005ec <hspt_init>
    hpt_init();
    80018690:	b40e80ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80018694:	8f4e80ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80018698:	4511                	li	a0,4
    8001869a:	87be80ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001869e:	000407b7          	lui	a5,0x40
    800186a2:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    800186a6:	450d                	li	a0,3
    800186a8:	86de80ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    800186ac:	4509                	li	a0,2
    800186ae:	f86e80ef          	jal	80000e34 <set_prev_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800186b2:	f66e80ef          	jal	80000e18 <test_setup_except_function>
    800186b6:	37ab77b7          	lui	a5,0x37ab7
    800186ba:	00080737          	lui	a4,0x80
    800186be:	078a                	slli	a5,a5,0x2
    800186c0:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    800186c2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800186c6:	0736                	slli	a4,a4,0xd
    800186c8:	6ef74073          	.insn	4, 0x6ef74073
    vaddr = hs_page_base(VSURWX_GUX);


    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    800186cc:	08c00593          	li	a1,140
    800186d0:	00020617          	auipc	a2,0x20
    800186d4:	e4060613          	addi	a2,a2,-448 # 80038510 <__func__.0+0x6128>
    800186d8:	0001a517          	auipc	a0,0x1a
    800186dc:	00850513          	addi	a0,a0,8 # 800326e0 <__func__.0+0x2f8>
    800186e0:	5e5160ef          	jal	8002f4c4 <printf>
    800186e4:	00044797          	auipc	a5,0x44
    800186e8:	92d7c783          	lbu	a5,-1747(a5) # 8005c011 <excpt+0x1>
    800186ec:	00044497          	auipc	s1,0x44
    800186f0:	92448493          	addi	s1,s1,-1756 # 8005c010 <excpt>
    800186f4:	0001a597          	auipc	a1,0x1a
    800186f8:	fc458593          	addi	a1,a1,-60 # 800326b8 <__func__.0+0x2d0>
    800186fc:	cf89                	beqz	a5,80018716 <store_guest_page_fault_4+0xb2>
    800186fe:	6498                	ld	a4,8(s1)
    80018700:	47bd                	li	a5,15
    80018702:	0001a597          	auipc	a1,0x1a
    80018706:	fa658593          	addi	a1,a1,-90 # 800326a8 <__func__.0+0x2c0>
    8001870a:	00f70663          	beq	a4,a5,80018716 <store_guest_page_fault_4+0xb2>
    8001870e:	0001a597          	auipc	a1,0x1a
    80018712:	faa58593          	addi	a1,a1,-86 # 800326b8 <__func__.0+0x2d0>
    80018716:	0001a517          	auipc	a0,0x1a
    8001871a:	fe250513          	addi	a0,a0,-30 # 800326f8 <__func__.0+0x310>
    8001871e:	5a7160ef          	jal	8002f4c4 <printf>
    80018722:	00044797          	auipc	a5,0x44
    80018726:	8ef7c783          	lbu	a5,-1809(a5) # 8005c011 <excpt+0x1>
    8001872a:	c789                	beqz	a5,80018734 <store_guest_page_fault_4+0xd0>
    8001872c:	6498                	ld	a4,8(s1)
    8001872e:	47bd                	li	a5,15
    80018730:	00f70c63          	beq	a4,a5,80018748 <store_guest_page_fault_4+0xe4>
    80018734:	0001a517          	auipc	a0,0x1a
    80018738:	fcc50513          	addi	a0,a0,-52 # 80032700 <__func__.0+0x318>
    8001873c:	589160ef          	jal	8002f4c4 <printf>
    80018740:	02900513          	li	a0,41
    80018744:	26f150ef          	jal	8002e1b2 <putchar>
    80018748:	4529                	li	a0,10
    8001874a:	269150ef          	jal	8002e1b2 <putchar>
    8001874e:	00044417          	auipc	s0,0x44
    80018752:	8c344403          	lbu	s0,-1853(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80018756:	0001a597          	auipc	a1,0x1a
    8001875a:	f6258593          	addi	a1,a1,-158 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    8001875e:	cc11                	beqz	s0,8001877a <store_guest_page_fault_4+0x116>
    80018760:	6498                	ld	a4,8(s1)
    80018762:	47bd                	li	a5,15
    TEST_END();
    80018764:	0001a597          	auipc	a1,0x1a
    80018768:	f4458593          	addi	a1,a1,-188 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    8001876c:	00f70763          	beq	a4,a5,8001877a <store_guest_page_fault_4+0x116>
    80018770:	4401                	li	s0,0
    TEST_END();
    80018772:	0001a597          	auipc	a1,0x1a
    80018776:	f4658593          	addi	a1,a1,-186 # 800326b8 <__func__.0+0x2d0>
    8001877a:	0001a517          	auipc	a0,0x1a
    8001877e:	fe650513          	addi	a0,a0,-26 # 80032760 <__func__.0+0x378>
    80018782:	543160ef          	jal	8002f4c4 <printf>
    80018786:	4511                	li	a0,4
    80018788:	f8ce80ef          	jal	80000f14 <goto_priv>
    8001878c:	febe80ef          	jal	80001776 <reset_state>
}
    80018790:	60e2                	ld	ra,24(sp)
    80018792:	8522                	mv	a0,s0
    80018794:	6442                	ld	s0,16(sp)
    80018796:	64a2                	ld	s1,8(sp)
    80018798:	6105                	addi	sp,sp,32
    8001879a:	8082                	ret

000000008001879c <store_guest_page_fault_5>:

bool store_guest_page_fault_5(){
    8001879c:	1141                	addi	sp,sp,-16

    TEST_START();
    8001879e:	00019597          	auipc	a1,0x19
    800187a2:	86a58593          	addi	a1,a1,-1942 # 80031008 <__func__.17>
    800187a6:	0001a517          	auipc	a0,0x1a
    800187aa:	f2250513          	addi	a0,a0,-222 # 800326c8 <__func__.0+0x2e0>
bool store_guest_page_fault_5(){
    800187ae:	e406                	sd	ra,8(sp)
    800187b0:	e022                	sd	s0,0(sp)
    TEST_START();
    800187b2:	513160ef          	jal	8002f4c4 <printf>
    800187b6:	4529                	li	a0,10
    800187b8:	1fb150ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    800187bc:	450d                	li	a0,3
    800187be:	f56e80ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800187c2:	e2be70ef          	jal	800005ec <hspt_init>
    hpt_init();
    800187c6:	a0ae80ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800187ca:	fbfe70ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    800187ce:	4511                	li	a0,4
    800187d0:	f44e80ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800187d4:	000407b7          	lui	a5,0x40
    800187d8:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800187dc:	450d                	li	a0,3
    800187de:	f36e80ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    800187e2:	4509                	li	a0,2
    800187e4:	e50e80ef          	jal	80000e34 <set_prev_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800187e8:	e30e80ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    800187ec:	37ab77b7          	lui	a5,0x37ab7
    800187f0:	00080737          	lui	a4,0x80
    800187f4:	078a                	slli	a5,a5,0x2
    800187f6:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800187f8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800187fc:	0736                	slli	a4,a4,0xd
    800187fe:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80018802:	08c00593          	li	a1,140
    80018806:	00020617          	auipc	a2,0x20
    8001880a:	d4a60613          	addi	a2,a2,-694 # 80038550 <__func__.0+0x6168>
    8001880e:	0001a517          	auipc	a0,0x1a
    80018812:	ed250513          	addi	a0,a0,-302 # 800326e0 <__func__.0+0x2f8>
    80018816:	4af160ef          	jal	8002f4c4 <printf>
    8001881a:	00043797          	auipc	a5,0x43
    8001881e:	7f77c783          	lbu	a5,2039(a5) # 8005c011 <excpt+0x1>
    80018822:	0001a597          	auipc	a1,0x1a
    80018826:	e8658593          	addi	a1,a1,-378 # 800326a8 <__func__.0+0x2c0>
    8001882a:	c789                	beqz	a5,80018834 <store_guest_page_fault_5+0x98>
    8001882c:	0001a597          	auipc	a1,0x1a
    80018830:	e8c58593          	addi	a1,a1,-372 # 800326b8 <__func__.0+0x2d0>
    80018834:	0001a517          	auipc	a0,0x1a
    80018838:	ec450513          	addi	a0,a0,-316 # 800326f8 <__func__.0+0x310>
    8001883c:	489160ef          	jal	8002f4c4 <printf>
    80018840:	00043797          	auipc	a5,0x43
    80018844:	7d17c783          	lbu	a5,2001(a5) # 8005c011 <excpt+0x1>
    80018848:	e7a1                	bnez	a5,80018890 <store_guest_page_fault_5+0xf4>
    8001884a:	4529                	li	a0,10
    8001884c:	167150ef          	jal	8002e1b2 <putchar>
    80018850:	00043797          	auipc	a5,0x43
    80018854:	7c17c783          	lbu	a5,1985(a5) # 8005c011 <excpt+0x1>
    80018858:	e795                	bnez	a5,80018884 <store_guest_page_fault_5+0xe8>
    8001885a:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001885c:	0001a597          	auipc	a1,0x1a
    80018860:	e4c58593          	addi	a1,a1,-436 # 800326a8 <__func__.0+0x2c0>
    80018864:	0001a517          	auipc	a0,0x1a
    80018868:	efc50513          	addi	a0,a0,-260 # 80032760 <__func__.0+0x378>
    8001886c:	459160ef          	jal	8002f4c4 <printf>
    80018870:	4511                	li	a0,4
    80018872:	ea2e80ef          	jal	80000f14 <goto_priv>
    80018876:	f01e80ef          	jal	80001776 <reset_state>
}
    8001887a:	60a2                	ld	ra,8(sp)
    8001887c:	8522                	mv	a0,s0
    8001887e:	6402                	ld	s0,0(sp)
    80018880:	0141                	addi	sp,sp,16
    80018882:	8082                	ret
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80018884:	4401                	li	s0,0
    TEST_END();
    80018886:	0001a597          	auipc	a1,0x1a
    8001888a:	e3258593          	addi	a1,a1,-462 # 800326b8 <__func__.0+0x2d0>
    8001888e:	bfd9                	j	80018864 <store_guest_page_fault_5+0xc8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80018890:	0001a517          	auipc	a0,0x1a
    80018894:	e7050513          	addi	a0,a0,-400 # 80032700 <__func__.0+0x318>
    80018898:	42d160ef          	jal	8002f4c4 <printf>
    8001889c:	02900513          	li	a0,41
    800188a0:	113150ef          	jal	8002e1b2 <putchar>
    800188a4:	b75d                	j	8001884a <store_guest_page_fault_5+0xae>

00000000800188a6 <store_guest_page_fault_6>:

bool store_guest_page_fault_6(){
    800188a6:	1101                	addi	sp,sp,-32

    TEST_START();
    800188a8:	00018597          	auipc	a1,0x18
    800188ac:	78058593          	addi	a1,a1,1920 # 80031028 <__func__.16>
    800188b0:	0001a517          	auipc	a0,0x1a
    800188b4:	e1850513          	addi	a0,a0,-488 # 800326c8 <__func__.0+0x2e0>
bool store_guest_page_fault_6(){
    800188b8:	ec06                	sd	ra,24(sp)
    800188ba:	e822                	sd	s0,16(sp)
    800188bc:	e426                	sd	s1,8(sp)
    TEST_START();
    800188be:	407160ef          	jal	8002f4c4 <printf>
    800188c2:	4529                	li	a0,10
    800188c4:	0ef150ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    800188c8:	450d                	li	a0,3
    800188ca:	e4ae80ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800188ce:	d1fe70ef          	jal	800005ec <hspt_init>
    hpt_init();
    800188d2:	8fee80ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800188d6:	eb3e70ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800188da:	4509                	li	a0,2
    800188dc:	e38e80ef          	jal	80000f14 <goto_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    800188e0:	d38e80ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    800188e4:	37ab77b7          	lui	a5,0x37ab7
    800188e8:	00100737          	lui	a4,0x100
    800188ec:	078a                	slli	a5,a5,0x2
    800188ee:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800188f2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800188f6:	0732                	slli	a4,a4,0xc
    800188f8:	00f73023          	sd	a5,0(a4)

    vaddr = hs_page_base(VSRWX_GI);
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.v=0 leads to SGPF",
    800188fc:	08c00593          	li	a1,140
    80018900:	00020617          	auipc	a2,0x20
    80018904:	c8860613          	addi	a2,a2,-888 # 80038588 <__func__.0+0x61a0>
    80018908:	0001a517          	auipc	a0,0x1a
    8001890c:	dd850513          	addi	a0,a0,-552 # 800326e0 <__func__.0+0x2f8>
    80018910:	3b5160ef          	jal	8002f4c4 <printf>
    80018914:	00043797          	auipc	a5,0x43
    80018918:	6fd7c783          	lbu	a5,1789(a5) # 8005c011 <excpt+0x1>
    8001891c:	00043497          	auipc	s1,0x43
    80018920:	6f448493          	addi	s1,s1,1780 # 8005c010 <excpt>
    80018924:	0001a597          	auipc	a1,0x1a
    80018928:	d9458593          	addi	a1,a1,-620 # 800326b8 <__func__.0+0x2d0>
    8001892c:	cf89                	beqz	a5,80018946 <store_guest_page_fault_6+0xa0>
    8001892e:	6498                	ld	a4,8(s1)
    80018930:	47dd                	li	a5,23
    80018932:	0001a597          	auipc	a1,0x1a
    80018936:	d7658593          	addi	a1,a1,-650 # 800326a8 <__func__.0+0x2c0>
    8001893a:	00f70663          	beq	a4,a5,80018946 <store_guest_page_fault_6+0xa0>
    8001893e:	0001a597          	auipc	a1,0x1a
    80018942:	d7a58593          	addi	a1,a1,-646 # 800326b8 <__func__.0+0x2d0>
    80018946:	0001a517          	auipc	a0,0x1a
    8001894a:	db250513          	addi	a0,a0,-590 # 800326f8 <__func__.0+0x310>
    8001894e:	377160ef          	jal	8002f4c4 <printf>
    80018952:	00043797          	auipc	a5,0x43
    80018956:	6bf7c783          	lbu	a5,1727(a5) # 8005c011 <excpt+0x1>
    8001895a:	c789                	beqz	a5,80018964 <store_guest_page_fault_6+0xbe>
    8001895c:	6498                	ld	a4,8(s1)
    8001895e:	47dd                	li	a5,23
    80018960:	00f70c63          	beq	a4,a5,80018978 <store_guest_page_fault_6+0xd2>
    80018964:	0001a517          	auipc	a0,0x1a
    80018968:	d9c50513          	addi	a0,a0,-612 # 80032700 <__func__.0+0x318>
    8001896c:	359160ef          	jal	8002f4c4 <printf>
    80018970:	02900513          	li	a0,41
    80018974:	03f150ef          	jal	8002e1b2 <putchar>
    80018978:	4529                	li	a0,10
    8001897a:	039150ef          	jal	8002e1b2 <putchar>
    8001897e:	00043797          	auipc	a5,0x43
    80018982:	6937c783          	lbu	a5,1683(a5) # 8005c011 <excpt+0x1>
    80018986:	4401                	li	s0,0
    80018988:	c789                	beqz	a5,80018992 <store_guest_page_fault_6+0xec>
    8001898a:	6480                	ld	s0,8(s1)
    8001898c:	1425                	addi	s0,s0,-23
    8001898e:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80018992:	c86e80ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80018996:	001007b7          	lui	a5,0x100
    8001899a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001899e:	7771                	lui	a4,0xffffc
    800189a0:	07b2                	slli	a5,a5,0xc
    800189a2:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    800189a6:	00e79023          	sh	a4,0(a5)
    addr = hs_page_base(VSRWX_GI);

    sh(addr,0xbeef);   
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800189aa:	08c00593          	li	a1,140
    800189ae:	00020617          	auipc	a2,0x20
    800189b2:	c2a60613          	addi	a2,a2,-982 # 800385d8 <__func__.0+0x61f0>
    800189b6:	0001a517          	auipc	a0,0x1a
    800189ba:	d2a50513          	addi	a0,a0,-726 # 800326e0 <__func__.0+0x2f8>
    800189be:	307160ef          	jal	8002f4c4 <printf>
    800189c2:	00043797          	auipc	a5,0x43
    800189c6:	64f7c783          	lbu	a5,1615(a5) # 8005c011 <excpt+0x1>
    800189ca:	0001a597          	auipc	a1,0x1a
    800189ce:	cee58593          	addi	a1,a1,-786 # 800326b8 <__func__.0+0x2d0>
    800189d2:	cf89                	beqz	a5,800189ec <store_guest_page_fault_6+0x146>
    800189d4:	6498                	ld	a4,8(s1)
    800189d6:	47dd                	li	a5,23
    800189d8:	0001a597          	auipc	a1,0x1a
    800189dc:	cd058593          	addi	a1,a1,-816 # 800326a8 <__func__.0+0x2c0>
    800189e0:	00f70663          	beq	a4,a5,800189ec <store_guest_page_fault_6+0x146>
    800189e4:	0001a597          	auipc	a1,0x1a
    800189e8:	cd458593          	addi	a1,a1,-812 # 800326b8 <__func__.0+0x2d0>
    800189ec:	0001a517          	auipc	a0,0x1a
    800189f0:	d0c50513          	addi	a0,a0,-756 # 800326f8 <__func__.0+0x310>
    800189f4:	2d1160ef          	jal	8002f4c4 <printf>
    800189f8:	00043797          	auipc	a5,0x43
    800189fc:	6197c783          	lbu	a5,1561(a5) # 8005c011 <excpt+0x1>
    80018a00:	c789                	beqz	a5,80018a0a <store_guest_page_fault_6+0x164>
    80018a02:	6498                	ld	a4,8(s1)
    80018a04:	47dd                	li	a5,23
    80018a06:	00f70c63          	beq	a4,a5,80018a1e <store_guest_page_fault_6+0x178>
    80018a0a:	0001a517          	auipc	a0,0x1a
    80018a0e:	cf650513          	addi	a0,a0,-778 # 80032700 <__func__.0+0x318>
    80018a12:	2b3160ef          	jal	8002f4c4 <printf>
    80018a16:	02900513          	li	a0,41
    80018a1a:	798150ef          	jal	8002e1b2 <putchar>
    80018a1e:	4529                	li	a0,10
    80018a20:	792150ef          	jal	8002e1b2 <putchar>
    80018a24:	c015                	beqz	s0,80018a48 <store_guest_page_fault_6+0x1a2>
    80018a26:	00043417          	auipc	s0,0x43
    80018a2a:	5eb44403          	lbu	s0,1515(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018a2e:	0001a597          	auipc	a1,0x1a
    80018a32:	c8a58593          	addi	a1,a1,-886 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018a36:	cc11                	beqz	s0,80018a52 <store_guest_page_fault_6+0x1ac>
    80018a38:	6498                	ld	a4,8(s1)
    80018a3a:	47dd                	li	a5,23
    TEST_END();
    80018a3c:	0001a597          	auipc	a1,0x1a
    80018a40:	c6c58593          	addi	a1,a1,-916 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018a44:	00f70763          	beq	a4,a5,80018a52 <store_guest_page_fault_6+0x1ac>
    80018a48:	4401                	li	s0,0
    TEST_END();
    80018a4a:	0001a597          	auipc	a1,0x1a
    80018a4e:	c6e58593          	addi	a1,a1,-914 # 800326b8 <__func__.0+0x2d0>
    80018a52:	0001a517          	auipc	a0,0x1a
    80018a56:	d0e50513          	addi	a0,a0,-754 # 80032760 <__func__.0+0x378>
    80018a5a:	26b160ef          	jal	8002f4c4 <printf>
    80018a5e:	4511                	li	a0,4
    80018a60:	cb4e80ef          	jal	80000f14 <goto_priv>
    80018a64:	d13e80ef          	jal	80001776 <reset_state>

}
    80018a68:	60e2                	ld	ra,24(sp)
    80018a6a:	8522                	mv	a0,s0
    80018a6c:	6442                	ld	s0,16(sp)
    80018a6e:	64a2                	ld	s1,8(sp)
    80018a70:	6105                	addi	sp,sp,32
    80018a72:	8082                	ret

0000000080018a74 <store_guest_page_fault_7>:

bool store_guest_page_fault_7(){
    80018a74:	1101                	addi	sp,sp,-32

    TEST_START();
    80018a76:	00018597          	auipc	a1,0x18
    80018a7a:	5d258593          	addi	a1,a1,1490 # 80031048 <__func__.15>
    80018a7e:	0001a517          	auipc	a0,0x1a
    80018a82:	c4a50513          	addi	a0,a0,-950 # 800326c8 <__func__.0+0x2e0>
bool store_guest_page_fault_7(){
    80018a86:	ec06                	sd	ra,24(sp)
    80018a88:	e822                	sd	s0,16(sp)
    80018a8a:	e426                	sd	s1,8(sp)
    TEST_START();
    80018a8c:	239160ef          	jal	8002f4c4 <printf>
    80018a90:	4529                	li	a0,10
    80018a92:	720150ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80018a96:	450d                	li	a0,3
    80018a98:	c7ce80ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80018a9c:	b51e70ef          	jal	800005ec <hspt_init>
    hpt_init();
    80018aa0:	f31e70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80018aa4:	ce5e70ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018aa8:	4509                	li	a0,2
    80018aaa:	c6ae80ef          	jal	80000f14 <goto_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80018aae:	b6ae80ef          	jal	80000e18 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018ab2:	000807b7          	lui	a5,0x80
    80018ab6:	1007b073          	csrc	sstatus,a5
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80018aba:	37ab77b7          	lui	a5,0x37ab7
    80018abe:	00100737          	lui	a4,0x100
    80018ac2:	078a                	slli	a5,a5,0x2
    80018ac4:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018ac8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018acc:	0732                	slli	a4,a4,0xc
    80018ace:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018ad2:	08c00593          	li	a1,140
    80018ad6:	00020617          	auipc	a2,0x20
    80018ada:	b5a60613          	addi	a2,a2,-1190 # 80038630 <__func__.0+0x6248>
    80018ade:	0001a517          	auipc	a0,0x1a
    80018ae2:	c0250513          	addi	a0,a0,-1022 # 800326e0 <__func__.0+0x2f8>
    80018ae6:	1df160ef          	jal	8002f4c4 <printf>
    80018aea:	00043797          	auipc	a5,0x43
    80018aee:	5277c783          	lbu	a5,1319(a5) # 8005c011 <excpt+0x1>
    80018af2:	00043497          	auipc	s1,0x43
    80018af6:	51e48493          	addi	s1,s1,1310 # 8005c010 <excpt>
    80018afa:	0001a597          	auipc	a1,0x1a
    80018afe:	bbe58593          	addi	a1,a1,-1090 # 800326b8 <__func__.0+0x2d0>
    80018b02:	cf89                	beqz	a5,80018b1c <store_guest_page_fault_7+0xa8>
    80018b04:	6498                	ld	a4,8(s1)
    80018b06:	47dd                	li	a5,23
    80018b08:	0001a597          	auipc	a1,0x1a
    80018b0c:	ba058593          	addi	a1,a1,-1120 # 800326a8 <__func__.0+0x2c0>
    80018b10:	00f70663          	beq	a4,a5,80018b1c <store_guest_page_fault_7+0xa8>
    80018b14:	0001a597          	auipc	a1,0x1a
    80018b18:	ba458593          	addi	a1,a1,-1116 # 800326b8 <__func__.0+0x2d0>
    80018b1c:	0001a517          	auipc	a0,0x1a
    80018b20:	bdc50513          	addi	a0,a0,-1060 # 800326f8 <__func__.0+0x310>
    80018b24:	1a1160ef          	jal	8002f4c4 <printf>
    80018b28:	00043797          	auipc	a5,0x43
    80018b2c:	4e97c783          	lbu	a5,1257(a5) # 8005c011 <excpt+0x1>
    80018b30:	c789                	beqz	a5,80018b3a <store_guest_page_fault_7+0xc6>
    80018b32:	6498                	ld	a4,8(s1)
    80018b34:	47dd                	li	a5,23
    80018b36:	00f70c63          	beq	a4,a5,80018b4e <store_guest_page_fault_7+0xda>
    80018b3a:	0001a517          	auipc	a0,0x1a
    80018b3e:	bc650513          	addi	a0,a0,-1082 # 80032700 <__func__.0+0x318>
    80018b42:	183160ef          	jal	8002f4c4 <printf>
    80018b46:	02900513          	li	a0,41
    80018b4a:	668150ef          	jal	8002e1b2 <putchar>
    80018b4e:	4529                	li	a0,10
    80018b50:	662150ef          	jal	8002e1b2 <putchar>
    80018b54:	00043417          	auipc	s0,0x43
    80018b58:	4bd44403          	lbu	s0,1213(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018b5c:	0001a597          	auipc	a1,0x1a
    80018b60:	b5c58593          	addi	a1,a1,-1188 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018b64:	cc11                	beqz	s0,80018b80 <store_guest_page_fault_7+0x10c>
    80018b66:	6498                	ld	a4,8(s1)
    80018b68:	47dd                	li	a5,23
    TEST_END();
    80018b6a:	0001a597          	auipc	a1,0x1a
    80018b6e:	b3e58593          	addi	a1,a1,-1218 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018b72:	00f70763          	beq	a4,a5,80018b80 <store_guest_page_fault_7+0x10c>
    80018b76:	4401                	li	s0,0
    TEST_END();
    80018b78:	0001a597          	auipc	a1,0x1a
    80018b7c:	b4058593          	addi	a1,a1,-1216 # 800326b8 <__func__.0+0x2d0>
    80018b80:	0001a517          	auipc	a0,0x1a
    80018b84:	be050513          	addi	a0,a0,-1056 # 80032760 <__func__.0+0x378>
    80018b88:	13d160ef          	jal	8002f4c4 <printf>
    80018b8c:	4511                	li	a0,4
    80018b8e:	b86e80ef          	jal	80000f14 <goto_priv>
    80018b92:	be5e80ef          	jal	80001776 <reset_state>
}
    80018b96:	60e2                	ld	ra,24(sp)
    80018b98:	8522                	mv	a0,s0
    80018b9a:	6442                	ld	s0,16(sp)
    80018b9c:	64a2                	ld	s1,8(sp)
    80018b9e:	6105                	addi	sp,sp,32
    80018ba0:	8082                	ret

0000000080018ba2 <store_guest_page_fault_8>:

bool store_guest_page_fault_8(){
    80018ba2:	1101                	addi	sp,sp,-32

    TEST_START();
    80018ba4:	00018597          	auipc	a1,0x18
    80018ba8:	4c458593          	addi	a1,a1,1220 # 80031068 <__func__.14>
    80018bac:	0001a517          	auipc	a0,0x1a
    80018bb0:	b1c50513          	addi	a0,a0,-1252 # 800326c8 <__func__.0+0x2e0>
bool store_guest_page_fault_8(){
    80018bb4:	ec06                	sd	ra,24(sp)
    80018bb6:	e822                	sd	s0,16(sp)
    80018bb8:	e426                	sd	s1,8(sp)
    TEST_START();
    80018bba:	10b160ef          	jal	8002f4c4 <printf>
    80018bbe:	4529                	li	a0,10
    80018bc0:	5f2150ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80018bc4:	450d                	li	a0,3
    80018bc6:	b4ee80ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80018bca:	a23e70ef          	jal	800005ec <hspt_init>
    hpt_init();
    80018bce:	e03e70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80018bd2:	bb7e70ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018bd6:	4509                	li	a0,2
    80018bd8:	b3ce80ef          	jal	80000f14 <goto_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80018bdc:	a3ce80ef          	jal	80000e18 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80018be0:	000807b7          	lui	a5,0x80
    80018be4:	1007a073          	csrs	sstatus,a5
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80018be8:	001007b7          	lui	a5,0x100
    80018bec:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018bf0:	7771                	lui	a4,0xffffc
    80018bf2:	07b2                	slli	a5,a5,0xc
    80018bf4:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80018bf8:	00e79023          	sh	a4,0(a5)
    sh(vaddr,0xbeef);
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018bfc:	08c00593          	li	a1,140
    80018c00:	00020617          	auipc	a2,0x20
    80018c04:	a9060613          	addi	a2,a2,-1392 # 80038690 <__func__.0+0x62a8>
    80018c08:	0001a517          	auipc	a0,0x1a
    80018c0c:	ad850513          	addi	a0,a0,-1320 # 800326e0 <__func__.0+0x2f8>
    80018c10:	0b5160ef          	jal	8002f4c4 <printf>
    80018c14:	00043797          	auipc	a5,0x43
    80018c18:	3fd7c783          	lbu	a5,1021(a5) # 8005c011 <excpt+0x1>
    80018c1c:	00043497          	auipc	s1,0x43
    80018c20:	3f448493          	addi	s1,s1,1012 # 8005c010 <excpt>
    80018c24:	0001a597          	auipc	a1,0x1a
    80018c28:	a9458593          	addi	a1,a1,-1388 # 800326b8 <__func__.0+0x2d0>
    80018c2c:	cf89                	beqz	a5,80018c46 <store_guest_page_fault_8+0xa4>
    80018c2e:	6498                	ld	a4,8(s1)
    80018c30:	47dd                	li	a5,23
    80018c32:	0001a597          	auipc	a1,0x1a
    80018c36:	a7658593          	addi	a1,a1,-1418 # 800326a8 <__func__.0+0x2c0>
    80018c3a:	00f70663          	beq	a4,a5,80018c46 <store_guest_page_fault_8+0xa4>
    80018c3e:	0001a597          	auipc	a1,0x1a
    80018c42:	a7a58593          	addi	a1,a1,-1414 # 800326b8 <__func__.0+0x2d0>
    80018c46:	0001a517          	auipc	a0,0x1a
    80018c4a:	ab250513          	addi	a0,a0,-1358 # 800326f8 <__func__.0+0x310>
    80018c4e:	077160ef          	jal	8002f4c4 <printf>
    80018c52:	00043797          	auipc	a5,0x43
    80018c56:	3bf7c783          	lbu	a5,959(a5) # 8005c011 <excpt+0x1>
    80018c5a:	c789                	beqz	a5,80018c64 <store_guest_page_fault_8+0xc2>
    80018c5c:	6498                	ld	a4,8(s1)
    80018c5e:	47dd                	li	a5,23
    80018c60:	00f70c63          	beq	a4,a5,80018c78 <store_guest_page_fault_8+0xd6>
    80018c64:	0001a517          	auipc	a0,0x1a
    80018c68:	a9c50513          	addi	a0,a0,-1380 # 80032700 <__func__.0+0x318>
    80018c6c:	059160ef          	jal	8002f4c4 <printf>
    80018c70:	02900513          	li	a0,41
    80018c74:	53e150ef          	jal	8002e1b2 <putchar>
    80018c78:	4529                	li	a0,10
    80018c7a:	538150ef          	jal	8002e1b2 <putchar>
    80018c7e:	00043417          	auipc	s0,0x43
    80018c82:	39344403          	lbu	s0,915(s0) # 8005c011 <excpt+0x1>
    80018c86:	c409                	beqz	s0,80018c90 <store_guest_page_fault_8+0xee>
    80018c88:	6498                	ld	a4,8(s1)
    80018c8a:	47dd                	li	a5,23
    80018c8c:	02f70c63          	beq	a4,a5,80018cc4 <store_guest_page_fault_8+0x122>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018c90:	000807b7          	lui	a5,0x80
    80018c94:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018c98:	4401                	li	s0,0

    TEST_END();
    80018c9a:	0001a597          	auipc	a1,0x1a
    80018c9e:	a1e58593          	addi	a1,a1,-1506 # 800326b8 <__func__.0+0x2d0>
    80018ca2:	0001a517          	auipc	a0,0x1a
    80018ca6:	abe50513          	addi	a0,a0,-1346 # 80032760 <__func__.0+0x378>
    80018caa:	01b160ef          	jal	8002f4c4 <printf>
    80018cae:	4511                	li	a0,4
    80018cb0:	a64e80ef          	jal	80000f14 <goto_priv>
    80018cb4:	ac3e80ef          	jal	80001776 <reset_state>
}
    80018cb8:	60e2                	ld	ra,24(sp)
    80018cba:	8522                	mv	a0,s0
    80018cbc:	6442                	ld	s0,16(sp)
    80018cbe:	64a2                	ld	s1,8(sp)
    80018cc0:	6105                	addi	sp,sp,32
    80018cc2:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018cc4:	000807b7          	lui	a5,0x80
    80018cc8:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80018ccc:	0001a597          	auipc	a1,0x1a
    80018cd0:	9dc58593          	addi	a1,a1,-1572 # 800326a8 <__func__.0+0x2c0>
    80018cd4:	b7f9                	j	80018ca2 <store_guest_page_fault_8+0x100>

0000000080018cd6 <store_guest_page_fault_9>:

bool store_guest_page_fault_9(){
    80018cd6:	1101                	addi	sp,sp,-32

    TEST_START();
    80018cd8:	00018597          	auipc	a1,0x18
    80018cdc:	3b058593          	addi	a1,a1,944 # 80031088 <__func__.13>
    80018ce0:	0001a517          	auipc	a0,0x1a
    80018ce4:	9e850513          	addi	a0,a0,-1560 # 800326c8 <__func__.0+0x2e0>
bool store_guest_page_fault_9(){
    80018ce8:	ec06                	sd	ra,24(sp)
    80018cea:	e822                	sd	s0,16(sp)
    80018cec:	e426                	sd	s1,8(sp)
    TEST_START();
    80018cee:	7d6160ef          	jal	8002f4c4 <printf>
    80018cf2:	4529                	li	a0,10
    80018cf4:	4be150ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80018cf8:	450d                	li	a0,3
    80018cfa:	a1ae80ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80018cfe:	8efe70ef          	jal	800005ec <hspt_init>
    hpt_init();
    80018d02:	ccfe70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80018d06:	a83e70ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80018d0a:	4511                	li	a0,4
    80018d0c:	a08e80ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80018d10:	000407b7          	lui	a5,0x40
    80018d14:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80018d18:	4509                	li	a0,2
    80018d1a:	9fae80ef          	jal	80000f14 <goto_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80018d1e:	8fae80ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80018d22:	37ab77b7          	lui	a5,0x37ab7
    80018d26:	00080737          	lui	a4,0x80
    80018d2a:	078a                	slli	a5,a5,0x2
    80018d2c:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80018d2e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018d32:	0736                	slli	a4,a4,0xd
    80018d34:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GUX);


    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018d38:	08c00593          	li	a1,140
    80018d3c:	00020617          	auipc	a2,0x20
    80018d40:	9c460613          	addi	a2,a2,-1596 # 80038700 <__func__.0+0x6318>
    80018d44:	0001a517          	auipc	a0,0x1a
    80018d48:	99c50513          	addi	a0,a0,-1636 # 800326e0 <__func__.0+0x2f8>
    80018d4c:	778160ef          	jal	8002f4c4 <printf>
    80018d50:	00043797          	auipc	a5,0x43
    80018d54:	2c17c783          	lbu	a5,705(a5) # 8005c011 <excpt+0x1>
    80018d58:	00043497          	auipc	s1,0x43
    80018d5c:	2b848493          	addi	s1,s1,696 # 8005c010 <excpt>
    80018d60:	0001a597          	auipc	a1,0x1a
    80018d64:	95858593          	addi	a1,a1,-1704 # 800326b8 <__func__.0+0x2d0>
    80018d68:	cf89                	beqz	a5,80018d82 <store_guest_page_fault_9+0xac>
    80018d6a:	6498                	ld	a4,8(s1)
    80018d6c:	47bd                	li	a5,15
    80018d6e:	0001a597          	auipc	a1,0x1a
    80018d72:	93a58593          	addi	a1,a1,-1734 # 800326a8 <__func__.0+0x2c0>
    80018d76:	00f70663          	beq	a4,a5,80018d82 <store_guest_page_fault_9+0xac>
    80018d7a:	0001a597          	auipc	a1,0x1a
    80018d7e:	93e58593          	addi	a1,a1,-1730 # 800326b8 <__func__.0+0x2d0>
    80018d82:	0001a517          	auipc	a0,0x1a
    80018d86:	97650513          	addi	a0,a0,-1674 # 800326f8 <__func__.0+0x310>
    80018d8a:	73a160ef          	jal	8002f4c4 <printf>
    80018d8e:	00043797          	auipc	a5,0x43
    80018d92:	2837c783          	lbu	a5,643(a5) # 8005c011 <excpt+0x1>
    80018d96:	c789                	beqz	a5,80018da0 <store_guest_page_fault_9+0xca>
    80018d98:	6498                	ld	a4,8(s1)
    80018d9a:	47bd                	li	a5,15
    80018d9c:	00f70c63          	beq	a4,a5,80018db4 <store_guest_page_fault_9+0xde>
    80018da0:	0001a517          	auipc	a0,0x1a
    80018da4:	96050513          	addi	a0,a0,-1696 # 80032700 <__func__.0+0x318>
    80018da8:	71c160ef          	jal	8002f4c4 <printf>
    80018dac:	02900513          	li	a0,41
    80018db0:	402150ef          	jal	8002e1b2 <putchar>
    80018db4:	4529                	li	a0,10
    80018db6:	3fc150ef          	jal	8002e1b2 <putchar>
    80018dba:	00043417          	auipc	s0,0x43
    80018dbe:	25744403          	lbu	s0,599(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80018dc2:	0001a597          	auipc	a1,0x1a
    80018dc6:	8f658593          	addi	a1,a1,-1802 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018dca:	cc11                	beqz	s0,80018de6 <store_guest_page_fault_9+0x110>
    80018dcc:	6498                	ld	a4,8(s1)
    80018dce:	47bd                	li	a5,15
    TEST_END();
    80018dd0:	0001a597          	auipc	a1,0x1a
    80018dd4:	8d858593          	addi	a1,a1,-1832 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018dd8:	00f70763          	beq	a4,a5,80018de6 <store_guest_page_fault_9+0x110>
    80018ddc:	4401                	li	s0,0
    TEST_END();
    80018dde:	0001a597          	auipc	a1,0x1a
    80018de2:	8da58593          	addi	a1,a1,-1830 # 800326b8 <__func__.0+0x2d0>
    80018de6:	0001a517          	auipc	a0,0x1a
    80018dea:	97a50513          	addi	a0,a0,-1670 # 80032760 <__func__.0+0x378>
    80018dee:	6d6160ef          	jal	8002f4c4 <printf>
    80018df2:	4511                	li	a0,4
    80018df4:	920e80ef          	jal	80000f14 <goto_priv>
    80018df8:	97fe80ef          	jal	80001776 <reset_state>
}
    80018dfc:	60e2                	ld	ra,24(sp)
    80018dfe:	8522                	mv	a0,s0
    80018e00:	6442                	ld	s0,16(sp)
    80018e02:	64a2                	ld	s1,8(sp)
    80018e04:	6105                	addi	sp,sp,32
    80018e06:	8082                	ret

0000000080018e08 <store_guest_page_fault_10>:

bool store_guest_page_fault_10(){
    80018e08:	1141                	addi	sp,sp,-16

    TEST_START();
    80018e0a:	00018597          	auipc	a1,0x18
    80018e0e:	29e58593          	addi	a1,a1,670 # 800310a8 <__func__.12>
    80018e12:	0001a517          	auipc	a0,0x1a
    80018e16:	8b650513          	addi	a0,a0,-1866 # 800326c8 <__func__.0+0x2e0>
bool store_guest_page_fault_10(){
    80018e1a:	e406                	sd	ra,8(sp)
    80018e1c:	e022                	sd	s0,0(sp)
    TEST_START();
    80018e1e:	6a6160ef          	jal	8002f4c4 <printf>
    80018e22:	4529                	li	a0,10
    80018e24:	38e150ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80018e28:	450d                	li	a0,3
    80018e2a:	8eae80ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80018e2e:	fbee70ef          	jal	800005ec <hspt_init>
    hpt_init();
    80018e32:	b9fe70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80018e36:	953e70ef          	jal	80000788 <vspt_init>

    goto_priv(PRIV_M);
    80018e3a:	4511                	li	a0,4
    80018e3c:	8d8e80ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018e40:	000407b7          	lui	a5,0x40
    80018e44:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018e48:	4509                	li	a0,2
    80018e4a:	8cae80ef          	jal	80000f14 <goto_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80018e4e:	fcbe70ef          	jal	80000e18 <test_setup_except_function>
    80018e52:	37ab77b7          	lui	a5,0x37ab7
    80018e56:	00080737          	lui	a4,0x80
    80018e5a:	078a                	slli	a5,a5,0x2
    80018e5c:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80018e5e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018e62:	0736                	slli	a4,a4,0xd
    80018e64:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018e68:	08c00593          	li	a1,140
    80018e6c:	0001f617          	auipc	a2,0x1f
    80018e70:	e2460613          	addi	a2,a2,-476 # 80037c90 <__func__.0+0x58a8>
    80018e74:	0001a517          	auipc	a0,0x1a
    80018e78:	86c50513          	addi	a0,a0,-1940 # 800326e0 <__func__.0+0x2f8>
    80018e7c:	648160ef          	jal	8002f4c4 <printf>
    80018e80:	00043797          	auipc	a5,0x43
    80018e84:	1917c783          	lbu	a5,401(a5) # 8005c011 <excpt+0x1>
    80018e88:	0001a597          	auipc	a1,0x1a
    80018e8c:	82058593          	addi	a1,a1,-2016 # 800326a8 <__func__.0+0x2c0>
    80018e90:	c789                	beqz	a5,80018e9a <store_guest_page_fault_10+0x92>
    80018e92:	0001a597          	auipc	a1,0x1a
    80018e96:	82658593          	addi	a1,a1,-2010 # 800326b8 <__func__.0+0x2d0>
    80018e9a:	0001a517          	auipc	a0,0x1a
    80018e9e:	85e50513          	addi	a0,a0,-1954 # 800326f8 <__func__.0+0x310>
    80018ea2:	622160ef          	jal	8002f4c4 <printf>
    80018ea6:	00043797          	auipc	a5,0x43
    80018eaa:	16b7c783          	lbu	a5,363(a5) # 8005c011 <excpt+0x1>
    80018eae:	e7a1                	bnez	a5,80018ef6 <store_guest_page_fault_10+0xee>
    80018eb0:	4529                	li	a0,10
    80018eb2:	300150ef          	jal	8002e1b2 <putchar>
    80018eb6:	00043797          	auipc	a5,0x43
    80018eba:	15b7c783          	lbu	a5,347(a5) # 8005c011 <excpt+0x1>
    80018ebe:	e795                	bnez	a5,80018eea <store_guest_page_fault_10+0xe2>
    80018ec0:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80018ec2:	00019597          	auipc	a1,0x19
    80018ec6:	7e658593          	addi	a1,a1,2022 # 800326a8 <__func__.0+0x2c0>
    80018eca:	0001a517          	auipc	a0,0x1a
    80018ece:	89650513          	addi	a0,a0,-1898 # 80032760 <__func__.0+0x378>
    80018ed2:	5f2160ef          	jal	8002f4c4 <printf>
    80018ed6:	4511                	li	a0,4
    80018ed8:	83ce80ef          	jal	80000f14 <goto_priv>
    80018edc:	89be80ef          	jal	80001776 <reset_state>
}
    80018ee0:	60a2                	ld	ra,8(sp)
    80018ee2:	8522                	mv	a0,s0
    80018ee4:	6402                	ld	s0,0(sp)
    80018ee6:	0141                	addi	sp,sp,16
    80018ee8:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018eea:	4401                	li	s0,0
    TEST_END();
    80018eec:	00019597          	auipc	a1,0x19
    80018ef0:	7cc58593          	addi	a1,a1,1996 # 800326b8 <__func__.0+0x2d0>
    80018ef4:	bfd9                	j	80018eca <store_guest_page_fault_10+0xc2>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018ef6:	0001a517          	auipc	a0,0x1a
    80018efa:	80a50513          	addi	a0,a0,-2038 # 80032700 <__func__.0+0x318>
    80018efe:	5c6160ef          	jal	8002f4c4 <printf>
    80018f02:	02900513          	li	a0,41
    80018f06:	2ac150ef          	jal	8002e1b2 <putchar>
    80018f0a:	b75d                	j	80018eb0 <store_guest_page_fault_10+0xa8>

0000000080018f0c <amo_guest_page_fault_1>:

bool amo_guest_page_fault_1(){
    80018f0c:	1101                	addi	sp,sp,-32

    TEST_START();
    80018f0e:	00018597          	auipc	a1,0x18
    80018f12:	1ba58593          	addi	a1,a1,442 # 800310c8 <__func__.11>
    80018f16:	00019517          	auipc	a0,0x19
    80018f1a:	7b250513          	addi	a0,a0,1970 # 800326c8 <__func__.0+0x2e0>
bool amo_guest_page_fault_1(){
    80018f1e:	ec06                	sd	ra,24(sp)
    80018f20:	e822                	sd	s0,16(sp)
    80018f22:	e426                	sd	s1,8(sp)
    80018f24:	e04a                	sd	s2,0(sp)
    TEST_START();
    80018f26:	59e160ef          	jal	8002f4c4 <printf>
    80018f2a:	4529                	li	a0,10
    80018f2c:	286150ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80018f30:	450d                	li	a0,3
    80018f32:	fe3e70ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80018f36:	eb6e70ef          	jal	800005ec <hspt_init>
    hpt_init();
    80018f3a:	a97e70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80018f3e:	84be70ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0x1;  
    goto_priv(PRIV_VS);
    80018f42:	4509                	li	a0,2
    80018f44:	fd1e70ef          	jal	80000f14 <goto_priv>


    //执行原子指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80018f48:	ed1e70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80018f4c:	00100737          	lui	a4,0x100
    80018f50:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018f54:	4785                	li	a5,1
    80018f56:	0732                	slli	a4,a4,0xc
    80018f58:	00f727af          	amoadd.w	a5,a5,(a4)


    addr = hs_page_base(VSRWX_GI);
    value = amoadd_w(addr,value);
    
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80018f5c:	08c00593          	li	a1,140
    80018f60:	0001f617          	auipc	a2,0x1f
    80018f64:	7d860613          	addi	a2,a2,2008 # 80038738 <__func__.0+0x6350>
    80018f68:	00019517          	auipc	a0,0x19
    80018f6c:	77850513          	addi	a0,a0,1912 # 800326e0 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    80018f70:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80018f74:	550160ef          	jal	8002f4c4 <printf>
    80018f78:	00043797          	auipc	a5,0x43
    80018f7c:	0997c783          	lbu	a5,153(a5) # 8005c011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80018f80:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80018f82:	00043917          	auipc	s2,0x43
    80018f86:	08e90913          	addi	s2,s2,142 # 8005c010 <excpt>
    80018f8a:	00019597          	auipc	a1,0x19
    80018f8e:	72e58593          	addi	a1,a1,1838 # 800326b8 <__func__.0+0x2d0>
    80018f92:	cf91                	beqz	a5,80018fae <amo_guest_page_fault_1+0xa2>
    80018f94:	00893703          	ld	a4,8(s2)
    80018f98:	47dd                	li	a5,23
    80018f9a:	00019597          	auipc	a1,0x19
    80018f9e:	70e58593          	addi	a1,a1,1806 # 800326a8 <__func__.0+0x2c0>
    80018fa2:	00f70663          	beq	a4,a5,80018fae <amo_guest_page_fault_1+0xa2>
    80018fa6:	00019597          	auipc	a1,0x19
    80018faa:	71258593          	addi	a1,a1,1810 # 800326b8 <__func__.0+0x2d0>
    80018fae:	00019517          	auipc	a0,0x19
    80018fb2:	74a50513          	addi	a0,a0,1866 # 800326f8 <__func__.0+0x310>
    80018fb6:	50e160ef          	jal	8002f4c4 <printf>
    80018fba:	00043797          	auipc	a5,0x43
    80018fbe:	0577c783          	lbu	a5,87(a5) # 8005c011 <excpt+0x1>
    80018fc2:	c791                	beqz	a5,80018fce <amo_guest_page_fault_1+0xc2>
    80018fc4:	00893703          	ld	a4,8(s2)
    80018fc8:	47dd                	li	a5,23
    80018fca:	00f70c63          	beq	a4,a5,80018fe2 <amo_guest_page_fault_1+0xd6>
    80018fce:	00019517          	auipc	a0,0x19
    80018fd2:	73250513          	addi	a0,a0,1842 # 80032700 <__func__.0+0x318>
    80018fd6:	4ee160ef          	jal	8002f4c4 <printf>
    80018fda:	02900513          	li	a0,41
    80018fde:	1d4150ef          	jal	8002e1b2 <putchar>
    80018fe2:	4529                	li	a0,10
    80018fe4:	1ce150ef          	jal	8002e1b2 <putchar>
    80018fe8:	00043797          	auipc	a5,0x43
    80018fec:	0297c783          	lbu	a5,41(a5) # 8005c011 <excpt+0x1>
    80018ff0:	4481                	li	s1,0
    80018ff2:	c791                	beqz	a5,80018ffe <amo_guest_page_fault_1+0xf2>
    80018ff4:	00893483          	ld	s1,8(s2)
    80018ff8:	14a5                	addi	s1,s1,-23
    80018ffa:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行原子相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80018ffe:	e1be70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80019002:	001007b7          	lui	a5,0x100
    80019006:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001900a:	8722                	mv	a4,s0
    8001900c:	07b2                	slli	a5,a5,0xc
    8001900e:	a0e7b72f          	amomax.d	a4,a4,(a5)
    vaddr = hs_page_base(VSRWX_GI);
    value = amomax_d(vaddr,value);

    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019012:	08c00593          	li	a1,140
    80019016:	0001f617          	auipc	a2,0x1f
    8001901a:	77260613          	addi	a2,a2,1906 # 80038788 <__func__.0+0x63a0>
    8001901e:	00019517          	auipc	a0,0x19
    80019022:	6c250513          	addi	a0,a0,1730 # 800326e0 <__func__.0+0x2f8>
    80019026:	49e160ef          	jal	8002f4c4 <printf>
    8001902a:	00043797          	auipc	a5,0x43
    8001902e:	fe77c783          	lbu	a5,-25(a5) # 8005c011 <excpt+0x1>
    80019032:	00019597          	auipc	a1,0x19
    80019036:	68658593          	addi	a1,a1,1670 # 800326b8 <__func__.0+0x2d0>
    8001903a:	cf91                	beqz	a5,80019056 <amo_guest_page_fault_1+0x14a>
    8001903c:	00893703          	ld	a4,8(s2)
    80019040:	47dd                	li	a5,23
    80019042:	00019597          	auipc	a1,0x19
    80019046:	66658593          	addi	a1,a1,1638 # 800326a8 <__func__.0+0x2c0>
    8001904a:	00f70663          	beq	a4,a5,80019056 <amo_guest_page_fault_1+0x14a>
    8001904e:	00019597          	auipc	a1,0x19
    80019052:	66a58593          	addi	a1,a1,1642 # 800326b8 <__func__.0+0x2d0>
    80019056:	00019517          	auipc	a0,0x19
    8001905a:	6a250513          	addi	a0,a0,1698 # 800326f8 <__func__.0+0x310>
    8001905e:	466160ef          	jal	8002f4c4 <printf>
    80019062:	00043797          	auipc	a5,0x43
    80019066:	faf7c783          	lbu	a5,-81(a5) # 8005c011 <excpt+0x1>
    8001906a:	c791                	beqz	a5,80019076 <amo_guest_page_fault_1+0x16a>
    8001906c:	00893703          	ld	a4,8(s2)
    80019070:	47dd                	li	a5,23
    80019072:	00f70c63          	beq	a4,a5,8001908a <amo_guest_page_fault_1+0x17e>
    80019076:	00019517          	auipc	a0,0x19
    8001907a:	68a50513          	addi	a0,a0,1674 # 80032700 <__func__.0+0x318>
    8001907e:	446160ef          	jal	8002f4c4 <printf>
    80019082:	02900513          	li	a0,41
    80019086:	12c150ef          	jal	8002e1b2 <putchar>
    8001908a:	4529                	li	a0,10
    8001908c:	126150ef          	jal	8002e1b2 <putchar>
    80019090:	c09d                	beqz	s1,800190b6 <amo_guest_page_fault_1+0x1aa>
    80019092:	00043417          	auipc	s0,0x43
    80019096:	f7f44403          	lbu	s0,-129(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001909a:	00019597          	auipc	a1,0x19
    8001909e:	61e58593          	addi	a1,a1,1566 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800190a2:	cc19                	beqz	s0,800190c0 <amo_guest_page_fault_1+0x1b4>
    800190a4:	00893703          	ld	a4,8(s2)
    800190a8:	47dd                	li	a5,23
    TEST_END();
    800190aa:	00019597          	auipc	a1,0x19
    800190ae:	5fe58593          	addi	a1,a1,1534 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800190b2:	00f70763          	beq	a4,a5,800190c0 <amo_guest_page_fault_1+0x1b4>
    800190b6:	4401                	li	s0,0
    TEST_END();
    800190b8:	00019597          	auipc	a1,0x19
    800190bc:	60058593          	addi	a1,a1,1536 # 800326b8 <__func__.0+0x2d0>
    800190c0:	00019517          	auipc	a0,0x19
    800190c4:	6a050513          	addi	a0,a0,1696 # 80032760 <__func__.0+0x378>
    800190c8:	3fc160ef          	jal	8002f4c4 <printf>
    800190cc:	4511                	li	a0,4
    800190ce:	e47e70ef          	jal	80000f14 <goto_priv>
    800190d2:	ea4e80ef          	jal	80001776 <reset_state>
}
    800190d6:	60e2                	ld	ra,24(sp)
    800190d8:	8522                	mv	a0,s0
    800190da:	6442                	ld	s0,16(sp)
    800190dc:	64a2                	ld	s1,8(sp)
    800190de:	6902                	ld	s2,0(sp)
    800190e0:	6105                	addi	sp,sp,32
    800190e2:	8082                	ret

00000000800190e4 <amo_guest_page_fault_2>:

bool amo_guest_page_fault_2(){
    800190e4:	1101                	addi	sp,sp,-32

    TEST_START();
    800190e6:	00018597          	auipc	a1,0x18
    800190ea:	ffa58593          	addi	a1,a1,-6 # 800310e0 <__func__.10>
    800190ee:	00019517          	auipc	a0,0x19
    800190f2:	5da50513          	addi	a0,a0,1498 # 800326c8 <__func__.0+0x2e0>
bool amo_guest_page_fault_2(){
    800190f6:	ec06                	sd	ra,24(sp)
    800190f8:	e822                	sd	s0,16(sp)
    800190fa:	e426                	sd	s1,8(sp)
    TEST_START();
    800190fc:	3c8160ef          	jal	8002f4c4 <printf>
    80019100:	4529                	li	a0,10
    80019102:	0b0150ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80019106:	450d                	li	a0,3
    80019108:	e0de70ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001910c:	ce0e70ef          	jal	800005ec <hspt_init>
    hpt_init();
    80019110:	8c1e70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80019114:	e74e70ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80019118:	4509                	li	a0,2
    8001911a:	dfbe70ef          	jal	80000f14 <goto_priv>
    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001911e:	cfbe70ef          	jal	80000e18 <test_setup_except_function>
    addr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019122:	000807b7          	lui	a5,0x80
    80019126:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    8001912a:	37ab77b7          	lui	a5,0x37ab7
    8001912e:	00100737          	lui	a4,0x100
    80019132:	078a                	slli	a5,a5,0x2
    80019134:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80019138:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001913c:	0732                	slli	a4,a4,0xc
    8001913e:	08f737af          	amoswap.d	a5,a5,(a4)
    value = amoswap_d(addr,value);
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019142:	08c00593          	li	a1,140
    80019146:	0001f617          	auipc	a2,0x1f
    8001914a:	6a260613          	addi	a2,a2,1698 # 800387e8 <__func__.0+0x6400>
    8001914e:	00019517          	auipc	a0,0x19
    80019152:	59250513          	addi	a0,a0,1426 # 800326e0 <__func__.0+0x2f8>
    80019156:	36e160ef          	jal	8002f4c4 <printf>
    8001915a:	00043797          	auipc	a5,0x43
    8001915e:	eb77c783          	lbu	a5,-329(a5) # 8005c011 <excpt+0x1>
    80019162:	00043497          	auipc	s1,0x43
    80019166:	eae48493          	addi	s1,s1,-338 # 8005c010 <excpt>
    8001916a:	00019597          	auipc	a1,0x19
    8001916e:	54e58593          	addi	a1,a1,1358 # 800326b8 <__func__.0+0x2d0>
    80019172:	cf89                	beqz	a5,8001918c <amo_guest_page_fault_2+0xa8>
    80019174:	6498                	ld	a4,8(s1)
    80019176:	47dd                	li	a5,23
    80019178:	00019597          	auipc	a1,0x19
    8001917c:	53058593          	addi	a1,a1,1328 # 800326a8 <__func__.0+0x2c0>
    80019180:	00f70663          	beq	a4,a5,8001918c <amo_guest_page_fault_2+0xa8>
    80019184:	00019597          	auipc	a1,0x19
    80019188:	53458593          	addi	a1,a1,1332 # 800326b8 <__func__.0+0x2d0>
    8001918c:	00019517          	auipc	a0,0x19
    80019190:	56c50513          	addi	a0,a0,1388 # 800326f8 <__func__.0+0x310>
    80019194:	330160ef          	jal	8002f4c4 <printf>
    80019198:	00043797          	auipc	a5,0x43
    8001919c:	e797c783          	lbu	a5,-391(a5) # 8005c011 <excpt+0x1>
    800191a0:	c789                	beqz	a5,800191aa <amo_guest_page_fault_2+0xc6>
    800191a2:	6498                	ld	a4,8(s1)
    800191a4:	47dd                	li	a5,23
    800191a6:	00f70c63          	beq	a4,a5,800191be <amo_guest_page_fault_2+0xda>
    800191aa:	00019517          	auipc	a0,0x19
    800191ae:	55650513          	addi	a0,a0,1366 # 80032700 <__func__.0+0x318>
    800191b2:	312160ef          	jal	8002f4c4 <printf>
    800191b6:	02900513          	li	a0,41
    800191ba:	7f9140ef          	jal	8002e1b2 <putchar>
    800191be:	4529                	li	a0,10
    800191c0:	7f3140ef          	jal	8002e1b2 <putchar>
    800191c4:	00043417          	auipc	s0,0x43
    800191c8:	e4d44403          	lbu	s0,-435(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800191cc:	00019597          	auipc	a1,0x19
    800191d0:	4ec58593          	addi	a1,a1,1260 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800191d4:	cc11                	beqz	s0,800191f0 <amo_guest_page_fault_2+0x10c>
    800191d6:	6498                	ld	a4,8(s1)
    800191d8:	47dd                	li	a5,23
    TEST_END();
    800191da:	00019597          	auipc	a1,0x19
    800191de:	4ce58593          	addi	a1,a1,1230 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800191e2:	00f70763          	beq	a4,a5,800191f0 <amo_guest_page_fault_2+0x10c>
    800191e6:	4401                	li	s0,0
    TEST_END();
    800191e8:	00019597          	auipc	a1,0x19
    800191ec:	4d058593          	addi	a1,a1,1232 # 800326b8 <__func__.0+0x2d0>
    800191f0:	00019517          	auipc	a0,0x19
    800191f4:	57050513          	addi	a0,a0,1392 # 80032760 <__func__.0+0x378>
    800191f8:	2cc160ef          	jal	8002f4c4 <printf>
    800191fc:	4511                	li	a0,4
    800191fe:	d17e70ef          	jal	80000f14 <goto_priv>
    80019202:	d74e80ef          	jal	80001776 <reset_state>
}
    80019206:	60e2                	ld	ra,24(sp)
    80019208:	8522                	mv	a0,s0
    8001920a:	6442                	ld	s0,16(sp)
    8001920c:	64a2                	ld	s1,8(sp)
    8001920e:	6105                	addi	sp,sp,32
    80019210:	8082                	ret

0000000080019212 <amo_guest_page_fault_3>:

bool amo_guest_page_fault_3(){
    80019212:	1101                	addi	sp,sp,-32

    TEST_START();
    80019214:	00018597          	auipc	a1,0x18
    80019218:	ee458593          	addi	a1,a1,-284 # 800310f8 <__func__.9>
    8001921c:	00019517          	auipc	a0,0x19
    80019220:	4ac50513          	addi	a0,a0,1196 # 800326c8 <__func__.0+0x2e0>
bool amo_guest_page_fault_3(){
    80019224:	ec06                	sd	ra,24(sp)
    80019226:	e822                	sd	s0,16(sp)
    80019228:	e426                	sd	s1,8(sp)
    TEST_START();
    8001922a:	29a160ef          	jal	8002f4c4 <printf>
    8001922e:	4529                	li	a0,10
    80019230:	783140ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80019234:	450d                	li	a0,3
    80019236:	cdfe70ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001923a:	bb2e70ef          	jal	800005ec <hspt_init>
    hpt_init();
    8001923e:	f92e70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80019242:	d46e70ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80019246:	4509                	li	a0,2
    80019248:	ccde70ef          	jal	80000f14 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    8001924c:	bcde70ef          	jal	80000e18 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80019250:	000807b7          	lui	a5,0x80
    80019254:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    80019258:	37ab77b7          	lui	a5,0x37ab7
    8001925c:	00100737          	lui	a4,0x100
    80019260:	078a                	slli	a5,a5,0x2
    80019262:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80019266:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001926a:	0732                	slli	a4,a4,0xc
    8001926c:	40f737af          	amoor.d	a5,a5,(a4)
    value = amoor_d(vaddr,value);
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80019270:	08c00593          	li	a1,140
    80019274:	0001f617          	auipc	a2,0x1f
    80019278:	5dc60613          	addi	a2,a2,1500 # 80038850 <__func__.0+0x6468>
    8001927c:	00019517          	auipc	a0,0x19
    80019280:	46450513          	addi	a0,a0,1124 # 800326e0 <__func__.0+0x2f8>
    80019284:	240160ef          	jal	8002f4c4 <printf>
    80019288:	00043797          	auipc	a5,0x43
    8001928c:	d897c783          	lbu	a5,-631(a5) # 8005c011 <excpt+0x1>
    80019290:	00043497          	auipc	s1,0x43
    80019294:	d8048493          	addi	s1,s1,-640 # 8005c010 <excpt>
    80019298:	00019597          	auipc	a1,0x19
    8001929c:	42058593          	addi	a1,a1,1056 # 800326b8 <__func__.0+0x2d0>
    800192a0:	cf89                	beqz	a5,800192ba <amo_guest_page_fault_3+0xa8>
    800192a2:	6498                	ld	a4,8(s1)
    800192a4:	47dd                	li	a5,23
    800192a6:	00019597          	auipc	a1,0x19
    800192aa:	40258593          	addi	a1,a1,1026 # 800326a8 <__func__.0+0x2c0>
    800192ae:	00f70663          	beq	a4,a5,800192ba <amo_guest_page_fault_3+0xa8>
    800192b2:	00019597          	auipc	a1,0x19
    800192b6:	40658593          	addi	a1,a1,1030 # 800326b8 <__func__.0+0x2d0>
    800192ba:	00019517          	auipc	a0,0x19
    800192be:	43e50513          	addi	a0,a0,1086 # 800326f8 <__func__.0+0x310>
    800192c2:	202160ef          	jal	8002f4c4 <printf>
    800192c6:	00043797          	auipc	a5,0x43
    800192ca:	d4b7c783          	lbu	a5,-693(a5) # 8005c011 <excpt+0x1>
    800192ce:	c789                	beqz	a5,800192d8 <amo_guest_page_fault_3+0xc6>
    800192d0:	6498                	ld	a4,8(s1)
    800192d2:	47dd                	li	a5,23
    800192d4:	00f70c63          	beq	a4,a5,800192ec <amo_guest_page_fault_3+0xda>
    800192d8:	00019517          	auipc	a0,0x19
    800192dc:	42850513          	addi	a0,a0,1064 # 80032700 <__func__.0+0x318>
    800192e0:	1e4160ef          	jal	8002f4c4 <printf>
    800192e4:	02900513          	li	a0,41
    800192e8:	6cb140ef          	jal	8002e1b2 <putchar>
    800192ec:	4529                	li	a0,10
    800192ee:	6c5140ef          	jal	8002e1b2 <putchar>
    800192f2:	00043417          	auipc	s0,0x43
    800192f6:	d1f44403          	lbu	s0,-737(s0) # 8005c011 <excpt+0x1>
    800192fa:	c409                	beqz	s0,80019304 <amo_guest_page_fault_3+0xf2>
    800192fc:	6498                	ld	a4,8(s1)
    800192fe:	47dd                	li	a5,23
    80019300:	02f70c63          	beq	a4,a5,80019338 <amo_guest_page_fault_3+0x126>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019304:	000807b7          	lui	a5,0x80
    80019308:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001930c:	4401                	li	s0,0

    TEST_END();
    8001930e:	00019597          	auipc	a1,0x19
    80019312:	3aa58593          	addi	a1,a1,938 # 800326b8 <__func__.0+0x2d0>
    80019316:	00019517          	auipc	a0,0x19
    8001931a:	44a50513          	addi	a0,a0,1098 # 80032760 <__func__.0+0x378>
    8001931e:	1a6160ef          	jal	8002f4c4 <printf>
    80019322:	4511                	li	a0,4
    80019324:	bf1e70ef          	jal	80000f14 <goto_priv>
    80019328:	c4ee80ef          	jal	80001776 <reset_state>
}
    8001932c:	60e2                	ld	ra,24(sp)
    8001932e:	8522                	mv	a0,s0
    80019330:	6442                	ld	s0,16(sp)
    80019332:	64a2                	ld	s1,8(sp)
    80019334:	6105                	addi	sp,sp,32
    80019336:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019338:	000807b7          	lui	a5,0x80
    8001933c:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80019340:	00019597          	auipc	a1,0x19
    80019344:	36858593          	addi	a1,a1,872 # 800326a8 <__func__.0+0x2c0>
    80019348:	b7f9                	j	80019316 <amo_guest_page_fault_3+0x104>

000000008001934a <amo_guest_page_fault_4>:

bool amo_guest_page_fault_4(){
    8001934a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001934c:	00018597          	auipc	a1,0x18
    80019350:	dc458593          	addi	a1,a1,-572 # 80031110 <__func__.8>
    80019354:	00019517          	auipc	a0,0x19
    80019358:	37450513          	addi	a0,a0,884 # 800326c8 <__func__.0+0x2e0>
bool amo_guest_page_fault_4(){
    8001935c:	ec06                	sd	ra,24(sp)
    8001935e:	e822                	sd	s0,16(sp)
    80019360:	e426                	sd	s1,8(sp)
    TEST_START();
    80019362:	162160ef          	jal	8002f4c4 <printf>
    80019366:	4529                	li	a0,10
    80019368:	64b140ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8001936c:	450d                	li	a0,3
    8001936e:	ba7e70ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80019372:	a7ae70ef          	jal	800005ec <hspt_init>
    hpt_init();
    80019376:	e5ae70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001937a:	c0ee70ef          	jal	80000788 <vspt_init>
    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  

    goto_priv(PRIV_M);
    8001937e:	4511                	li	a0,4
    80019380:	b95e70ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80019384:	000407b7          	lui	a5,0x40
    80019388:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    8001938c:	450d                	li	a0,3
    8001938e:	b87e70ef          	jal	80000f14 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80019392:	a87e70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80019396:	37ab77b7          	lui	a5,0x37ab7
    8001939a:	00080737          	lui	a4,0x80
    8001939e:	078a                	slli	a5,a5,0x2
    800193a0:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    800193a2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800193a6:	0736                	slli	a4,a4,0xd
    800193a8:	80f737af          	amomin.d	a5,a5,(a4)
    addr = hs_page_base(VSURWX_GUX);

    value = amomin_d(addr,value);
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    800193ac:	08c00593          	li	a1,140
    800193b0:	0001f617          	auipc	a2,0x1f
    800193b4:	51060613          	addi	a2,a2,1296 # 800388c0 <__func__.0+0x64d8>
    800193b8:	00019517          	auipc	a0,0x19
    800193bc:	32850513          	addi	a0,a0,808 # 800326e0 <__func__.0+0x2f8>
    800193c0:	104160ef          	jal	8002f4c4 <printf>
    800193c4:	00043797          	auipc	a5,0x43
    800193c8:	c4d7c783          	lbu	a5,-947(a5) # 8005c011 <excpt+0x1>
    800193cc:	00043497          	auipc	s1,0x43
    800193d0:	c4448493          	addi	s1,s1,-956 # 8005c010 <excpt>
    800193d4:	00019597          	auipc	a1,0x19
    800193d8:	2e458593          	addi	a1,a1,740 # 800326b8 <__func__.0+0x2d0>
    800193dc:	cf89                	beqz	a5,800193f6 <amo_guest_page_fault_4+0xac>
    800193de:	6498                	ld	a4,8(s1)
    800193e0:	47bd                	li	a5,15
    800193e2:	00019597          	auipc	a1,0x19
    800193e6:	2c658593          	addi	a1,a1,710 # 800326a8 <__func__.0+0x2c0>
    800193ea:	00f70663          	beq	a4,a5,800193f6 <amo_guest_page_fault_4+0xac>
    800193ee:	00019597          	auipc	a1,0x19
    800193f2:	2ca58593          	addi	a1,a1,714 # 800326b8 <__func__.0+0x2d0>
    800193f6:	00019517          	auipc	a0,0x19
    800193fa:	30250513          	addi	a0,a0,770 # 800326f8 <__func__.0+0x310>
    800193fe:	0c6160ef          	jal	8002f4c4 <printf>
    80019402:	00043797          	auipc	a5,0x43
    80019406:	c0f7c783          	lbu	a5,-1009(a5) # 8005c011 <excpt+0x1>
    8001940a:	c789                	beqz	a5,80019414 <amo_guest_page_fault_4+0xca>
    8001940c:	6498                	ld	a4,8(s1)
    8001940e:	47bd                	li	a5,15
    80019410:	00f70c63          	beq	a4,a5,80019428 <amo_guest_page_fault_4+0xde>
    80019414:	00019517          	auipc	a0,0x19
    80019418:	2ec50513          	addi	a0,a0,748 # 80032700 <__func__.0+0x318>
    8001941c:	0a8160ef          	jal	8002f4c4 <printf>
    80019420:	02900513          	li	a0,41
    80019424:	58f140ef          	jal	8002e1b2 <putchar>
    80019428:	4529                	li	a0,10
    8001942a:	589140ef          	jal	8002e1b2 <putchar>
    8001942e:	00043417          	auipc	s0,0x43
    80019432:	be344403          	lbu	s0,-1053(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80019436:	00019597          	auipc	a1,0x19
    8001943a:	28258593          	addi	a1,a1,642 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    8001943e:	cc11                	beqz	s0,8001945a <amo_guest_page_fault_4+0x110>
    80019440:	6498                	ld	a4,8(s1)
    80019442:	47bd                	li	a5,15
    TEST_END();
    80019444:	00019597          	auipc	a1,0x19
    80019448:	26458593          	addi	a1,a1,612 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    8001944c:	00f70763          	beq	a4,a5,8001945a <amo_guest_page_fault_4+0x110>
    80019450:	4401                	li	s0,0
    TEST_END();
    80019452:	00019597          	auipc	a1,0x19
    80019456:	26658593          	addi	a1,a1,614 # 800326b8 <__func__.0+0x2d0>
    8001945a:	00019517          	auipc	a0,0x19
    8001945e:	30650513          	addi	a0,a0,774 # 80032760 <__func__.0+0x378>
    80019462:	062160ef          	jal	8002f4c4 <printf>
    80019466:	4511                	li	a0,4
    80019468:	aade70ef          	jal	80000f14 <goto_priv>
    8001946c:	b0ae80ef          	jal	80001776 <reset_state>
}
    80019470:	60e2                	ld	ra,24(sp)
    80019472:	8522                	mv	a0,s0
    80019474:	6442                	ld	s0,16(sp)
    80019476:	64a2                	ld	s1,8(sp)
    80019478:	6105                	addi	sp,sp,32
    8001947a:	8082                	ret

000000008001947c <amo_guest_page_fault_5>:

bool amo_guest_page_fault_5(){
    8001947c:	1141                	addi	sp,sp,-16

    TEST_START();
    8001947e:	00018597          	auipc	a1,0x18
    80019482:	caa58593          	addi	a1,a1,-854 # 80031128 <__func__.7>
    80019486:	00019517          	auipc	a0,0x19
    8001948a:	24250513          	addi	a0,a0,578 # 800326c8 <__func__.0+0x2e0>
bool amo_guest_page_fault_5(){
    8001948e:	e406                	sd	ra,8(sp)
    80019490:	e022                	sd	s0,0(sp)
    TEST_START();
    80019492:	032160ef          	jal	8002f4c4 <printf>
    80019496:	4529                	li	a0,10
    80019498:	51b140ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8001949c:	450d                	li	a0,3
    8001949e:	a77e70ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800194a2:	94ae70ef          	jal	800005ec <hspt_init>
    hpt_init();
    800194a6:	d2ae70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800194aa:	adee70ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_M);
    800194ae:	4511                	li	a0,4
    800194b0:	a65e70ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    800194b4:	000407b7          	lui	a5,0x40
    800194b8:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800194bc:	450d                	li	a0,3
    800194be:	a57e70ef          	jal	80000f14 <goto_priv>

    //执行原子指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800194c2:	957e70ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    800194c6:	37ab77b7          	lui	a5,0x37ab7
    800194ca:	00080737          	lui	a4,0x80
    800194ce:	078a                	slli	a5,a5,0x2
    800194d0:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800194d2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800194d6:	0736                	slli	a4,a4,0xd
    800194d8:	c0f737af          	amominu.d	a5,a5,(a4)
    value = amominu_d(vaddr,value);

    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    800194dc:	08c00593          	li	a1,140
    800194e0:	0001f617          	auipc	a2,0x1f
    800194e4:	42060613          	addi	a2,a2,1056 # 80038900 <__func__.0+0x6518>
    800194e8:	00019517          	auipc	a0,0x19
    800194ec:	1f850513          	addi	a0,a0,504 # 800326e0 <__func__.0+0x2f8>
    800194f0:	7d5150ef          	jal	8002f4c4 <printf>
    800194f4:	00043797          	auipc	a5,0x43
    800194f8:	b1d7c783          	lbu	a5,-1251(a5) # 8005c011 <excpt+0x1>
    800194fc:	00019597          	auipc	a1,0x19
    80019500:	1ac58593          	addi	a1,a1,428 # 800326a8 <__func__.0+0x2c0>
    80019504:	c789                	beqz	a5,8001950e <amo_guest_page_fault_5+0x92>
    80019506:	00019597          	auipc	a1,0x19
    8001950a:	1b258593          	addi	a1,a1,434 # 800326b8 <__func__.0+0x2d0>
    8001950e:	00019517          	auipc	a0,0x19
    80019512:	1ea50513          	addi	a0,a0,490 # 800326f8 <__func__.0+0x310>
    80019516:	7af150ef          	jal	8002f4c4 <printf>
    8001951a:	00043797          	auipc	a5,0x43
    8001951e:	af77c783          	lbu	a5,-1289(a5) # 8005c011 <excpt+0x1>
    80019522:	e7a1                	bnez	a5,8001956a <amo_guest_page_fault_5+0xee>
    80019524:	4529                	li	a0,10
    80019526:	48d140ef          	jal	8002e1b2 <putchar>
    8001952a:	00043797          	auipc	a5,0x43
    8001952e:	ae77c783          	lbu	a5,-1305(a5) # 8005c011 <excpt+0x1>
    80019532:	e795                	bnez	a5,8001955e <amo_guest_page_fault_5+0xe2>
    80019534:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80019536:	00019597          	auipc	a1,0x19
    8001953a:	17258593          	addi	a1,a1,370 # 800326a8 <__func__.0+0x2c0>
    8001953e:	00019517          	auipc	a0,0x19
    80019542:	22250513          	addi	a0,a0,546 # 80032760 <__func__.0+0x378>
    80019546:	77f150ef          	jal	8002f4c4 <printf>
    8001954a:	4511                	li	a0,4
    8001954c:	9c9e70ef          	jal	80000f14 <goto_priv>
    80019550:	a26e80ef          	jal	80001776 <reset_state>
}
    80019554:	60a2                	ld	ra,8(sp)
    80019556:	8522                	mv	a0,s0
    80019558:	6402                	ld	s0,0(sp)
    8001955a:	0141                	addi	sp,sp,16
    8001955c:	8082                	ret
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    8001955e:	4401                	li	s0,0
    TEST_END();
    80019560:	00019597          	auipc	a1,0x19
    80019564:	15858593          	addi	a1,a1,344 # 800326b8 <__func__.0+0x2d0>
    80019568:	bfd9                	j	8001953e <amo_guest_page_fault_5+0xc2>
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    8001956a:	00019517          	auipc	a0,0x19
    8001956e:	19650513          	addi	a0,a0,406 # 80032700 <__func__.0+0x318>
    80019572:	753150ef          	jal	8002f4c4 <printf>
    80019576:	02900513          	li	a0,41
    8001957a:	439140ef          	jal	8002e1b2 <putchar>
    8001957e:	b75d                	j	80019524 <amo_guest_page_fault_5+0xa8>

0000000080019580 <instruction_guest_page_fault_1>:


bool instruction_guest_page_fault_1(){
    80019580:	1101                	addi	sp,sp,-32

    TEST_START();
    80019582:	00018597          	auipc	a1,0x18
    80019586:	bbe58593          	addi	a1,a1,-1090 # 80031140 <__func__.6>
    8001958a:	00019517          	auipc	a0,0x19
    8001958e:	13e50513          	addi	a0,a0,318 # 800326c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_1(){
    80019592:	ec06                	sd	ra,24(sp)
    80019594:	e822                	sd	s0,16(sp)
    80019596:	e426                	sd	s1,8(sp)
    TEST_START();
    80019598:	72d150ef          	jal	8002f4c4 <printf>
    8001959c:	4529                	li	a0,10
    8001959e:	415140ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    800195a2:	450d                	li	a0,3
    800195a4:	971e70ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800195a8:	844e70ef          	jal	800005ec <hspt_init>
    hpt_init();
    800195ac:	c24e70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800195b0:	9d8e70ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    800195b4:	4509                	li	a0,2
    800195b6:	95fe70ef          	jal	80000f14 <goto_priv>

    //执行取指指令二级地址翻译阶段时，pte.v=0
    vaddr = hs_page_base(VSRWX_GI);
    TEST_SETUP_EXCEPT();
    800195ba:	85fe70ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    800195be:	001007b7          	lui	a5,0x100
    800195c2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800195c6:	07b2                	slli	a5,a5,0xc
    800195c8:	00043417          	auipc	s0,0x43
    800195cc:	a4840413          	addi	s0,s0,-1464 # 8005c010 <excpt>
    800195d0:	00000297          	auipc	t0,0x0
    800195d4:	00c28293          	addi	t0,t0,12 # 800195dc <instruction_guest_page_fault_1+0x5c>
    800195d8:	02543c23          	sd	t0,56(s0)
    800195dc:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    800195de:	08c00593          	li	a1,140
    800195e2:	0001f617          	auipc	a2,0x1f
    800195e6:	35e60613          	addi	a2,a2,862 # 80038940 <__func__.0+0x6558>
    800195ea:	00019517          	auipc	a0,0x19
    800195ee:	0f650513          	addi	a0,a0,246 # 800326e0 <__func__.0+0x2f8>
    800195f2:	6d3150ef          	jal	8002f4c4 <printf>
    800195f6:	00043797          	auipc	a5,0x43
    800195fa:	a1b7c783          	lbu	a5,-1509(a5) # 8005c011 <excpt+0x1>
    800195fe:	00019597          	auipc	a1,0x19
    80019602:	0ba58593          	addi	a1,a1,186 # 800326b8 <__func__.0+0x2d0>
    80019606:	cf89                	beqz	a5,80019620 <instruction_guest_page_fault_1+0xa0>
    80019608:	6418                	ld	a4,8(s0)
    8001960a:	47d1                	li	a5,20
    8001960c:	00019597          	auipc	a1,0x19
    80019610:	09c58593          	addi	a1,a1,156 # 800326a8 <__func__.0+0x2c0>
    80019614:	00f70663          	beq	a4,a5,80019620 <instruction_guest_page_fault_1+0xa0>
    80019618:	00019597          	auipc	a1,0x19
    8001961c:	0a058593          	addi	a1,a1,160 # 800326b8 <__func__.0+0x2d0>
    80019620:	00019517          	auipc	a0,0x19
    80019624:	0d850513          	addi	a0,a0,216 # 800326f8 <__func__.0+0x310>
    80019628:	69d150ef          	jal	8002f4c4 <printf>
    8001962c:	00043797          	auipc	a5,0x43
    80019630:	9e57c783          	lbu	a5,-1563(a5) # 8005c011 <excpt+0x1>
    80019634:	c789                	beqz	a5,8001963e <instruction_guest_page_fault_1+0xbe>
    80019636:	6418                	ld	a4,8(s0)
    80019638:	47d1                	li	a5,20
    8001963a:	00f70c63          	beq	a4,a5,80019652 <instruction_guest_page_fault_1+0xd2>
    8001963e:	00019517          	auipc	a0,0x19
    80019642:	0c250513          	addi	a0,a0,194 # 80032700 <__func__.0+0x318>
    80019646:	67f150ef          	jal	8002f4c4 <printf>
    8001964a:	02900513          	li	a0,41
    8001964e:	365140ef          	jal	8002e1b2 <putchar>
    80019652:	4529                	li	a0,10
    80019654:	35f140ef          	jal	8002e1b2 <putchar>
    80019658:	00043497          	auipc	s1,0x43
    8001965c:	9b94c483          	lbu	s1,-1607(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019660:	00019597          	auipc	a1,0x19
    80019664:	05858593          	addi	a1,a1,88 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    80019668:	cc91                	beqz	s1,80019684 <instruction_guest_page_fault_1+0x104>
    8001966a:	6418                	ld	a4,8(s0)
    8001966c:	47d1                	li	a5,20
    TEST_END();
    8001966e:	00019597          	auipc	a1,0x19
    80019672:	03a58593          	addi	a1,a1,58 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    80019676:	00f70763          	beq	a4,a5,80019684 <instruction_guest_page_fault_1+0x104>
    8001967a:	4481                	li	s1,0
    TEST_END();
    8001967c:	00019597          	auipc	a1,0x19
    80019680:	03c58593          	addi	a1,a1,60 # 800326b8 <__func__.0+0x2d0>
    80019684:	00019517          	auipc	a0,0x19
    80019688:	0dc50513          	addi	a0,a0,220 # 80032760 <__func__.0+0x378>
    8001968c:	639150ef          	jal	8002f4c4 <printf>
    80019690:	4511                	li	a0,4
    80019692:	883e70ef          	jal	80000f14 <goto_priv>
    80019696:	8e0e80ef          	jal	80001776 <reset_state>

}
    8001969a:	60e2                	ld	ra,24(sp)
    8001969c:	6442                	ld	s0,16(sp)
    8001969e:	8526                	mv	a0,s1
    800196a0:	64a2                	ld	s1,8(sp)
    800196a2:	6105                	addi	sp,sp,32
    800196a4:	8082                	ret

00000000800196a6 <instruction_guest_page_fault_2>:


bool instruction_guest_page_fault_2(){
    800196a6:	1101                	addi	sp,sp,-32

    TEST_START();
    800196a8:	00018597          	auipc	a1,0x18
    800196ac:	ab858593          	addi	a1,a1,-1352 # 80031160 <__func__.5>
    800196b0:	00019517          	auipc	a0,0x19
    800196b4:	01850513          	addi	a0,a0,24 # 800326c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_2(){
    800196b8:	ec06                	sd	ra,24(sp)
    800196ba:	e822                	sd	s0,16(sp)
    800196bc:	e426                	sd	s1,8(sp)
    TEST_START();
    800196be:	607150ef          	jal	8002f4c4 <printf>
    800196c2:	4529                	li	a0,10
    800196c4:	2ef140ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    800196c8:	450d                	li	a0,3
    800196ca:	84be70ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800196ce:	f1fe60ef          	jal	800005ec <hspt_init>
    hpt_init();
    800196d2:	afee70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    800196d6:	8b2e70ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    800196da:	4509                	li	a0,2
    800196dc:	839e70ef          	jal	80000f14 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    800196e0:	f38e70ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    800196e4:	400137b7          	lui	a5,0x40013
    800196e8:	078a                	slli	a5,a5,0x2
    800196ea:	00043417          	auipc	s0,0x43
    800196ee:	92640413          	addi	s0,s0,-1754 # 8005c010 <excpt>
    800196f2:	00000297          	auipc	t0,0x0
    800196f6:	00c28293          	addi	t0,t0,12 # 800196fe <instruction_guest_page_fault_2+0x58>
    800196fa:	02543c23          	sd	t0,56(s0)
    800196fe:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019700:	08c00593          	li	a1,140
    80019704:	0001f617          	auipc	a2,0x1f
    80019708:	29c60613          	addi	a2,a2,668 # 800389a0 <__func__.0+0x65b8>
    8001970c:	00019517          	auipc	a0,0x19
    80019710:	fd450513          	addi	a0,a0,-44 # 800326e0 <__func__.0+0x2f8>
    80019714:	5b1150ef          	jal	8002f4c4 <printf>
    80019718:	00043797          	auipc	a5,0x43
    8001971c:	8f97c783          	lbu	a5,-1799(a5) # 8005c011 <excpt+0x1>
    80019720:	00019597          	auipc	a1,0x19
    80019724:	f9858593          	addi	a1,a1,-104 # 800326b8 <__func__.0+0x2d0>
    80019728:	cf89                	beqz	a5,80019742 <instruction_guest_page_fault_2+0x9c>
    8001972a:	6418                	ld	a4,8(s0)
    8001972c:	47d1                	li	a5,20
    8001972e:	00019597          	auipc	a1,0x19
    80019732:	f7a58593          	addi	a1,a1,-134 # 800326a8 <__func__.0+0x2c0>
    80019736:	00f70663          	beq	a4,a5,80019742 <instruction_guest_page_fault_2+0x9c>
    8001973a:	00019597          	auipc	a1,0x19
    8001973e:	f7e58593          	addi	a1,a1,-130 # 800326b8 <__func__.0+0x2d0>
    80019742:	00019517          	auipc	a0,0x19
    80019746:	fb650513          	addi	a0,a0,-74 # 800326f8 <__func__.0+0x310>
    8001974a:	57b150ef          	jal	8002f4c4 <printf>
    8001974e:	00043797          	auipc	a5,0x43
    80019752:	8c37c783          	lbu	a5,-1853(a5) # 8005c011 <excpt+0x1>
    80019756:	c789                	beqz	a5,80019760 <instruction_guest_page_fault_2+0xba>
    80019758:	6418                	ld	a4,8(s0)
    8001975a:	47d1                	li	a5,20
    8001975c:	00f70c63          	beq	a4,a5,80019774 <instruction_guest_page_fault_2+0xce>
    80019760:	00019517          	auipc	a0,0x19
    80019764:	fa050513          	addi	a0,a0,-96 # 80032700 <__func__.0+0x318>
    80019768:	55d150ef          	jal	8002f4c4 <printf>
    8001976c:	02900513          	li	a0,41
    80019770:	243140ef          	jal	8002e1b2 <putchar>
    80019774:	4529                	li	a0,10
    80019776:	23d140ef          	jal	8002e1b2 <putchar>
    8001977a:	00043497          	auipc	s1,0x43
    8001977e:	8974c483          	lbu	s1,-1897(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019782:	00019597          	auipc	a1,0x19
    80019786:	f3658593          	addi	a1,a1,-202 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001978a:	cc91                	beqz	s1,800197a6 <instruction_guest_page_fault_2+0x100>
    8001978c:	6418                	ld	a4,8(s0)
    8001978e:	47d1                	li	a5,20
    TEST_END();
    80019790:	00019597          	auipc	a1,0x19
    80019794:	f1858593          	addi	a1,a1,-232 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019798:	00f70763          	beq	a4,a5,800197a6 <instruction_guest_page_fault_2+0x100>
    8001979c:	4481                	li	s1,0
    TEST_END();
    8001979e:	00019597          	auipc	a1,0x19
    800197a2:	f1a58593          	addi	a1,a1,-230 # 800326b8 <__func__.0+0x2d0>
    800197a6:	00019517          	auipc	a0,0x19
    800197aa:	fba50513          	addi	a0,a0,-70 # 80032760 <__func__.0+0x378>
    800197ae:	517150ef          	jal	8002f4c4 <printf>
    800197b2:	4511                	li	a0,4
    800197b4:	f60e70ef          	jal	80000f14 <goto_priv>
    800197b8:	fbfe70ef          	jal	80001776 <reset_state>
}
    800197bc:	60e2                	ld	ra,24(sp)
    800197be:	6442                	ld	s0,16(sp)
    800197c0:	8526                	mv	a0,s1
    800197c2:	64a2                	ld	s1,8(sp)
    800197c4:	6105                	addi	sp,sp,32
    800197c6:	8082                	ret

00000000800197c8 <instruction_guest_page_fault_3>:

bool instruction_guest_page_fault_3(){
    800197c8:	1101                	addi	sp,sp,-32

    TEST_START();
    800197ca:	00018597          	auipc	a1,0x18
    800197ce:	9b658593          	addi	a1,a1,-1610 # 80031180 <__func__.4>
    800197d2:	00019517          	auipc	a0,0x19
    800197d6:	ef650513          	addi	a0,a0,-266 # 800326c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_3(){
    800197da:	ec06                	sd	ra,24(sp)
    800197dc:	e822                	sd	s0,16(sp)
    800197de:	e426                	sd	s1,8(sp)
    TEST_START();
    800197e0:	4e5150ef          	jal	8002f4c4 <printf>
    800197e4:	4529                	li	a0,10
    800197e6:	1cd140ef          	jal	8002e1b2 <putchar>

    CSRC(CSR_VSSTATUS,SSTATUS_SUM);
    800197ea:	000407b7          	lui	a5,0x40
    800197ee:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    800197f2:	450d                	li	a0,3
    800197f4:	f20e70ef          	jal	80000f14 <goto_priv>
    hspt_init();
    800197f8:	df5e60ef          	jal	800005ec <hspt_init>
    hpt_init();
    800197fc:	9d4e70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80019800:	f89e60ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019804:	4509                	li	a0,2
    80019806:	f0ee70ef          	jal	80000f14 <goto_priv>

    //执行取指指令时，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001980a:	e0ee70ef          	jal	80000e18 <test_setup_except_function>
    vaddr = hs_page_base(VSURWX_GURWX);


    TEST_EXEC_EXCEPT(vaddr); 
    8001980e:	000807b7          	lui	a5,0x80
    80019812:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80019814:	07b6                	slli	a5,a5,0xd
    80019816:	00042417          	auipc	s0,0x42
    8001981a:	7fa40413          	addi	s0,s0,2042 # 8005c010 <excpt>
    8001981e:	00000297          	auipc	t0,0x0
    80019822:	00c28293          	addi	t0,t0,12 # 8001982a <instruction_guest_page_fault_3+0x62>
    80019826:	02543c23          	sd	t0,56(s0)
    8001982a:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    8001982c:	08c00593          	li	a1,140
    80019830:	0001f617          	auipc	a2,0x1f
    80019834:	1d060613          	addi	a2,a2,464 # 80038a00 <__func__.0+0x6618>
    80019838:	00019517          	auipc	a0,0x19
    8001983c:	ea850513          	addi	a0,a0,-344 # 800326e0 <__func__.0+0x2f8>
    80019840:	485150ef          	jal	8002f4c4 <printf>
    80019844:	00042797          	auipc	a5,0x42
    80019848:	7cd7c783          	lbu	a5,1997(a5) # 8005c011 <excpt+0x1>
    8001984c:	00019597          	auipc	a1,0x19
    80019850:	e6c58593          	addi	a1,a1,-404 # 800326b8 <__func__.0+0x2d0>
    80019854:	cf89                	beqz	a5,8001986e <instruction_guest_page_fault_3+0xa6>
    80019856:	6418                	ld	a4,8(s0)
    80019858:	47b1                	li	a5,12
    8001985a:	00019597          	auipc	a1,0x19
    8001985e:	e4e58593          	addi	a1,a1,-434 # 800326a8 <__func__.0+0x2c0>
    80019862:	00f70663          	beq	a4,a5,8001986e <instruction_guest_page_fault_3+0xa6>
    80019866:	00019597          	auipc	a1,0x19
    8001986a:	e5258593          	addi	a1,a1,-430 # 800326b8 <__func__.0+0x2d0>
    8001986e:	00019517          	auipc	a0,0x19
    80019872:	e8a50513          	addi	a0,a0,-374 # 800326f8 <__func__.0+0x310>
    80019876:	44f150ef          	jal	8002f4c4 <printf>
    8001987a:	00042797          	auipc	a5,0x42
    8001987e:	7977c783          	lbu	a5,1943(a5) # 8005c011 <excpt+0x1>
    80019882:	c789                	beqz	a5,8001988c <instruction_guest_page_fault_3+0xc4>
    80019884:	6418                	ld	a4,8(s0)
    80019886:	47b1                	li	a5,12
    80019888:	00f70c63          	beq	a4,a5,800198a0 <instruction_guest_page_fault_3+0xd8>
    8001988c:	00019517          	auipc	a0,0x19
    80019890:	e7450513          	addi	a0,a0,-396 # 80032700 <__func__.0+0x318>
    80019894:	431150ef          	jal	8002f4c4 <printf>
    80019898:	02900513          	li	a0,41
    8001989c:	117140ef          	jal	8002e1b2 <putchar>
    800198a0:	4529                	li	a0,10
    800198a2:	111140ef          	jal	8002e1b2 <putchar>
    800198a6:	00042497          	auipc	s1,0x42
    800198aa:	76b4c483          	lbu	s1,1899(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    800198ae:	00019597          	auipc	a1,0x19
    800198b2:	e0a58593          	addi	a1,a1,-502 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    800198b6:	cc91                	beqz	s1,800198d2 <instruction_guest_page_fault_3+0x10a>
    800198b8:	6418                	ld	a4,8(s0)
    800198ba:	47b1                	li	a5,12
    TEST_END();
    800198bc:	00019597          	auipc	a1,0x19
    800198c0:	dec58593          	addi	a1,a1,-532 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    800198c4:	00f70763          	beq	a4,a5,800198d2 <instruction_guest_page_fault_3+0x10a>
    800198c8:	4481                	li	s1,0
    TEST_END();
    800198ca:	00019597          	auipc	a1,0x19
    800198ce:	dee58593          	addi	a1,a1,-530 # 800326b8 <__func__.0+0x2d0>
    800198d2:	00019517          	auipc	a0,0x19
    800198d6:	e8e50513          	addi	a0,a0,-370 # 80032760 <__func__.0+0x378>
    800198da:	3eb150ef          	jal	8002f4c4 <printf>
    800198de:	4511                	li	a0,4
    800198e0:	e34e70ef          	jal	80000f14 <goto_priv>
    800198e4:	e93e70ef          	jal	80001776 <reset_state>
}
    800198e8:	60e2                	ld	ra,24(sp)
    800198ea:	6442                	ld	s0,16(sp)
    800198ec:	8526                	mv	a0,s1
    800198ee:	64a2                	ld	s1,8(sp)
    800198f0:	6105                	addi	sp,sp,32
    800198f2:	8082                	ret

00000000800198f4 <instruction_guest_page_fault_4>:


bool instruction_guest_page_fault_4(){
    800198f4:	1101                	addi	sp,sp,-32

    TEST_START();
    800198f6:	00018597          	auipc	a1,0x18
    800198fa:	8aa58593          	addi	a1,a1,-1878 # 800311a0 <__func__.3>
    800198fe:	00019517          	auipc	a0,0x19
    80019902:	dca50513          	addi	a0,a0,-566 # 800326c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_4(){
    80019906:	ec06                	sd	ra,24(sp)
    80019908:	e822                	sd	s0,16(sp)
    8001990a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001990c:	3b9150ef          	jal	8002f4c4 <printf>
    80019910:	4529                	li	a0,10
    80019912:	0a1140ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80019916:	450d                	li	a0,3
    80019918:	dfce70ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001991c:	cd1e60ef          	jal	800005ec <hspt_init>
    hpt_init();
    80019920:	8b0e70ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80019924:	e65e60ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_M);
    80019928:	4511                	li	a0,4
    8001992a:	deae70ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    8001992e:	28005073          	csrwi	vsatp,0
    goto_priv(PRIV_VS);
    80019932:	4509                	li	a0,2
    80019934:	de0e70ef          	jal	80000f14 <goto_priv>


    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项没有执行权限的页面中执行，pte.x=0
    addr = vs_page_base(VSURWX_GRW);
    TEST_SETUP_EXCEPT();
    80019938:	ce0e70ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(addr); 
    8001993c:	000807b7          	lui	a5,0x80
    80019940:	07b5                	addi	a5,a5,13 # 8000d <_test_table_size+0x8000c>
    80019942:	07b6                	slli	a5,a5,0xd
    80019944:	00042417          	auipc	s0,0x42
    80019948:	6cc40413          	addi	s0,s0,1740 # 8005c010 <excpt>
    8001994c:	00000297          	auipc	t0,0x0
    80019950:	00c28293          	addi	t0,t0,12 # 80019958 <instruction_guest_page_fault_4+0x64>
    80019954:	02543c23          	sd	t0,56(s0)
    80019958:	8782                	jr	a5

    printf("%d\n",excpt.cause);
    8001995a:	640c                	ld	a1,8(s0)
    8001995c:	0001a517          	auipc	a0,0x1a
    80019960:	8ec50513          	addi	a0,a0,-1812 # 80033248 <__func__.0+0xe60>
    80019964:	361150ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.triggered);
    80019968:	00042597          	auipc	a1,0x42
    8001996c:	6a95c583          	lbu	a1,1705(a1) # 8005c011 <excpt+0x1>
    80019970:	0001a517          	auipc	a0,0x1a
    80019974:	8d850513          	addi	a0,a0,-1832 # 80033248 <__func__.0+0xe60>
    80019978:	34d150ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    8001997c:	08c00593          	li	a1,140
    80019980:	0001f617          	auipc	a2,0x1f
    80019984:	0c860613          	addi	a2,a2,200 # 80038a48 <__func__.0+0x6660>
    80019988:	00019517          	auipc	a0,0x19
    8001998c:	d5850513          	addi	a0,a0,-680 # 800326e0 <__func__.0+0x2f8>
    80019990:	335150ef          	jal	8002f4c4 <printf>
    80019994:	00042797          	auipc	a5,0x42
    80019998:	67d7c783          	lbu	a5,1661(a5) # 8005c011 <excpt+0x1>
    8001999c:	00019597          	auipc	a1,0x19
    800199a0:	d1c58593          	addi	a1,a1,-740 # 800326b8 <__func__.0+0x2d0>
    800199a4:	cf89                	beqz	a5,800199be <instruction_guest_page_fault_4+0xca>
    800199a6:	6418                	ld	a4,8(s0)
    800199a8:	47d1                	li	a5,20
    800199aa:	00019597          	auipc	a1,0x19
    800199ae:	cfe58593          	addi	a1,a1,-770 # 800326a8 <__func__.0+0x2c0>
    800199b2:	00f70663          	beq	a4,a5,800199be <instruction_guest_page_fault_4+0xca>
    800199b6:	00019597          	auipc	a1,0x19
    800199ba:	d0258593          	addi	a1,a1,-766 # 800326b8 <__func__.0+0x2d0>
    800199be:	00019517          	auipc	a0,0x19
    800199c2:	d3a50513          	addi	a0,a0,-710 # 800326f8 <__func__.0+0x310>
    800199c6:	2ff150ef          	jal	8002f4c4 <printf>
    800199ca:	00042797          	auipc	a5,0x42
    800199ce:	6477c783          	lbu	a5,1607(a5) # 8005c011 <excpt+0x1>
    800199d2:	c789                	beqz	a5,800199dc <instruction_guest_page_fault_4+0xe8>
    800199d4:	6418                	ld	a4,8(s0)
    800199d6:	47d1                	li	a5,20
    800199d8:	00f70c63          	beq	a4,a5,800199f0 <instruction_guest_page_fault_4+0xfc>
    800199dc:	00019517          	auipc	a0,0x19
    800199e0:	d2450513          	addi	a0,a0,-732 # 80032700 <__func__.0+0x318>
    800199e4:	2e1150ef          	jal	8002f4c4 <printf>
    800199e8:	02900513          	li	a0,41
    800199ec:	7c6140ef          	jal	8002e1b2 <putchar>
    800199f0:	4529                	li	a0,10
    800199f2:	7c0140ef          	jal	8002e1b2 <putchar>
    800199f6:	00042497          	auipc	s1,0x42
    800199fa:	61b4c483          	lbu	s1,1563(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    800199fe:	00019597          	auipc	a1,0x19
    80019a02:	cba58593          	addi	a1,a1,-838 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80019a06:	cc91                	beqz	s1,80019a22 <instruction_guest_page_fault_4+0x12e>
    80019a08:	6418                	ld	a4,8(s0)
    80019a0a:	47d1                	li	a5,20
    TEST_END();
    80019a0c:	00019597          	auipc	a1,0x19
    80019a10:	c9c58593          	addi	a1,a1,-868 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80019a14:	00f70763          	beq	a4,a5,80019a22 <instruction_guest_page_fault_4+0x12e>
    80019a18:	4481                	li	s1,0
    TEST_END();
    80019a1a:	00019597          	auipc	a1,0x19
    80019a1e:	c9e58593          	addi	a1,a1,-866 # 800326b8 <__func__.0+0x2d0>
    80019a22:	00019517          	auipc	a0,0x19
    80019a26:	d3e50513          	addi	a0,a0,-706 # 80032760 <__func__.0+0x378>
    80019a2a:	29b150ef          	jal	8002f4c4 <printf>
    80019a2e:	4511                	li	a0,4
    80019a30:	ce4e70ef          	jal	80000f14 <goto_priv>
    80019a34:	d43e70ef          	jal	80001776 <reset_state>
}
    80019a38:	60e2                	ld	ra,24(sp)
    80019a3a:	6442                	ld	s0,16(sp)
    80019a3c:	8526                	mv	a0,s1
    80019a3e:	64a2                	ld	s1,8(sp)
    80019a40:	6105                	addi	sp,sp,32
    80019a42:	8082                	ret

0000000080019a44 <instruction_guest_page_fault_5>:


bool instruction_guest_page_fault_5(){
    80019a44:	1101                	addi	sp,sp,-32

    TEST_START();
    80019a46:	00017597          	auipc	a1,0x17
    80019a4a:	77a58593          	addi	a1,a1,1914 # 800311c0 <__func__.2>
    80019a4e:	00019517          	auipc	a0,0x19
    80019a52:	c7a50513          	addi	a0,a0,-902 # 800326c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_5(){
    80019a56:	ec06                	sd	ra,24(sp)
    80019a58:	e822                	sd	s0,16(sp)
    80019a5a:	e426                	sd	s1,8(sp)
    TEST_START();
    80019a5c:	269150ef          	jal	8002f4c4 <printf>
    80019a60:	4529                	li	a0,10
    80019a62:	750140ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80019a66:	450d                	li	a0,3
    80019a68:	cace70ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80019a6c:	b81e60ef          	jal	800005ec <hspt_init>
    hpt_init();
    80019a70:	f61e60ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80019a74:	d15e60ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;
    goto_priv(PRIV_M);
    80019a78:	4511                	li	a0,4
    80019a7a:	c9ae70ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80019a7e:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_VS);
    80019a82:	4509                	li	a0,2
    80019a84:	c90e70ef          	jal	80000f14 <goto_priv>

    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项无效，pte.v=0
    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80019a88:	b90e70ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019a8c:	400197b7          	lui	a5,0x40019
    80019a90:	078a                	slli	a5,a5,0x2
    80019a92:	00042417          	auipc	s0,0x42
    80019a96:	57e40413          	addi	s0,s0,1406 # 8005c010 <excpt>
    80019a9a:	00000297          	auipc	t0,0x0
    80019a9e:	00c28293          	addi	t0,t0,12 # 80019aa6 <instruction_guest_page_fault_5+0x62>
    80019aa2:	02543c23          	sd	t0,56(s0)
    80019aa6:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019aa8:	08c00593          	li	a1,140
    80019aac:	0001f617          	auipc	a2,0x1f
    80019ab0:	ffc60613          	addi	a2,a2,-4 # 80038aa8 <__func__.0+0x66c0>
    80019ab4:	00019517          	auipc	a0,0x19
    80019ab8:	c2c50513          	addi	a0,a0,-980 # 800326e0 <__func__.0+0x2f8>
    80019abc:	209150ef          	jal	8002f4c4 <printf>
    80019ac0:	00042797          	auipc	a5,0x42
    80019ac4:	5517c783          	lbu	a5,1361(a5) # 8005c011 <excpt+0x1>
    80019ac8:	00019597          	auipc	a1,0x19
    80019acc:	bf058593          	addi	a1,a1,-1040 # 800326b8 <__func__.0+0x2d0>
    80019ad0:	cf89                	beqz	a5,80019aea <instruction_guest_page_fault_5+0xa6>
    80019ad2:	6418                	ld	a4,8(s0)
    80019ad4:	47d1                	li	a5,20
    80019ad6:	00019597          	auipc	a1,0x19
    80019ada:	bd258593          	addi	a1,a1,-1070 # 800326a8 <__func__.0+0x2c0>
    80019ade:	00f70663          	beq	a4,a5,80019aea <instruction_guest_page_fault_5+0xa6>
    80019ae2:	00019597          	auipc	a1,0x19
    80019ae6:	bd658593          	addi	a1,a1,-1066 # 800326b8 <__func__.0+0x2d0>
    80019aea:	00019517          	auipc	a0,0x19
    80019aee:	c0e50513          	addi	a0,a0,-1010 # 800326f8 <__func__.0+0x310>
    80019af2:	1d3150ef          	jal	8002f4c4 <printf>
    80019af6:	00042797          	auipc	a5,0x42
    80019afa:	51b7c783          	lbu	a5,1307(a5) # 8005c011 <excpt+0x1>
    80019afe:	c789                	beqz	a5,80019b08 <instruction_guest_page_fault_5+0xc4>
    80019b00:	6418                	ld	a4,8(s0)
    80019b02:	47d1                	li	a5,20
    80019b04:	00f70c63          	beq	a4,a5,80019b1c <instruction_guest_page_fault_5+0xd8>
    80019b08:	00019517          	auipc	a0,0x19
    80019b0c:	bf850513          	addi	a0,a0,-1032 # 80032700 <__func__.0+0x318>
    80019b10:	1b5150ef          	jal	8002f4c4 <printf>
    80019b14:	02900513          	li	a0,41
    80019b18:	69a140ef          	jal	8002e1b2 <putchar>
    80019b1c:	4529                	li	a0,10
    80019b1e:	694140ef          	jal	8002e1b2 <putchar>
    80019b22:	00042497          	auipc	s1,0x42
    80019b26:	4ef4c483          	lbu	s1,1263(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019b2a:	00019597          	auipc	a1,0x19
    80019b2e:	b8e58593          	addi	a1,a1,-1138 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019b32:	cc91                	beqz	s1,80019b4e <instruction_guest_page_fault_5+0x10a>
    80019b34:	6418                	ld	a4,8(s0)
    80019b36:	47d1                	li	a5,20
    TEST_END();
    80019b38:	00019597          	auipc	a1,0x19
    80019b3c:	b7058593          	addi	a1,a1,-1168 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019b40:	00f70763          	beq	a4,a5,80019b4e <instruction_guest_page_fault_5+0x10a>
    80019b44:	4481                	li	s1,0
    TEST_END();
    80019b46:	00019597          	auipc	a1,0x19
    80019b4a:	b7258593          	addi	a1,a1,-1166 # 800326b8 <__func__.0+0x2d0>
    80019b4e:	00019517          	auipc	a0,0x19
    80019b52:	c1250513          	addi	a0,a0,-1006 # 80032760 <__func__.0+0x378>
    80019b56:	16f150ef          	jal	8002f4c4 <printf>
    80019b5a:	4511                	li	a0,4
    80019b5c:	bb8e70ef          	jal	80000f14 <goto_priv>
    80019b60:	c17e70ef          	jal	80001776 <reset_state>

}
    80019b64:	60e2                	ld	ra,24(sp)
    80019b66:	6442                	ld	s0,16(sp)
    80019b68:	8526                	mv	a0,s1
    80019b6a:	64a2                	ld	s1,8(sp)
    80019b6c:	6105                	addi	sp,sp,32
    80019b6e:	8082                	ret

0000000080019b70 <instruction_guest_page_fault_6>:



bool instruction_guest_page_fault_6(){
    80019b70:	1141                	addi	sp,sp,-16

    TEST_START();
    80019b72:	00017597          	auipc	a1,0x17
    80019b76:	66e58593          	addi	a1,a1,1646 # 800311e0 <__func__.1>
    80019b7a:	00019517          	auipc	a0,0x19
    80019b7e:	b4e50513          	addi	a0,a0,-1202 # 800326c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_6(){
    80019b82:	e406                	sd	ra,8(sp)
    80019b84:	e022                	sd	s0,0(sp)
    TEST_START();
    80019b86:	13f150ef          	jal	8002f4c4 <printf>
    80019b8a:	4529                	li	a0,10
    80019b8c:	626140ef          	jal	8002e1b2 <putchar>
    // CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    // CSRS(CSR_MSTATUS, SSTATUS_SUM);


    goto_priv(PRIV_HS);
    80019b90:	450d                	li	a0,3
    80019b92:	b82e70ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80019b96:	a57e60ef          	jal	800005ec <hspt_init>
    hpt_init();
    80019b9a:	e37e60ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80019b9e:	bebe60ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr ;


    goto_priv(PRIV_VS);
    80019ba2:	4509                	li	a0,2
    80019ba4:	b70e70ef          	jal	80000f14 <goto_priv>

    //执行取指指令时，在VS模式下
    vaddr = vs_page_base(VSRWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80019ba8:	a70e70ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019bac:	4785                	li	a5,1
    80019bae:	1782                	slli	a5,a5,0x20
    80019bb0:	00042717          	auipc	a4,0x42
    80019bb4:	46070713          	addi	a4,a4,1120 # 8005c010 <excpt>
    80019bb8:	00000297          	auipc	t0,0x0
    80019bbc:	00c28293          	addi	t0,t0,12 # 80019bc4 <instruction_guest_page_fault_6+0x54>
    80019bc0:	02573c23          	sd	t0,56(a4)
    80019bc4:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019bc6:	08c00593          	li	a1,140
    80019bca:	0001f617          	auipc	a2,0x1f
    80019bce:	f4660613          	addi	a2,a2,-186 # 80038b10 <__func__.0+0x6728>
    80019bd2:	00019517          	auipc	a0,0x19
    80019bd6:	b0e50513          	addi	a0,a0,-1266 # 800326e0 <__func__.0+0x2f8>
    80019bda:	0eb150ef          	jal	8002f4c4 <printf>
    80019bde:	00042797          	auipc	a5,0x42
    80019be2:	4337c783          	lbu	a5,1075(a5) # 8005c011 <excpt+0x1>
    80019be6:	00019597          	auipc	a1,0x19
    80019bea:	ac258593          	addi	a1,a1,-1342 # 800326a8 <__func__.0+0x2c0>
    80019bee:	c789                	beqz	a5,80019bf8 <instruction_guest_page_fault_6+0x88>
    80019bf0:	00019597          	auipc	a1,0x19
    80019bf4:	ac858593          	addi	a1,a1,-1336 # 800326b8 <__func__.0+0x2d0>
    80019bf8:	00019517          	auipc	a0,0x19
    80019bfc:	b0050513          	addi	a0,a0,-1280 # 800326f8 <__func__.0+0x310>
    80019c00:	0c5150ef          	jal	8002f4c4 <printf>
    80019c04:	00042797          	auipc	a5,0x42
    80019c08:	40d7c783          	lbu	a5,1037(a5) # 8005c011 <excpt+0x1>
    80019c0c:	e7a1                	bnez	a5,80019c54 <instruction_guest_page_fault_6+0xe4>
    80019c0e:	4529                	li	a0,10
    80019c10:	5a2140ef          	jal	8002e1b2 <putchar>
    80019c14:	00042797          	auipc	a5,0x42
    80019c18:	3fd7c783          	lbu	a5,1021(a5) # 8005c011 <excpt+0x1>
    80019c1c:	e795                	bnez	a5,80019c48 <instruction_guest_page_fault_6+0xd8>
    80019c1e:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80019c20:	00019597          	auipc	a1,0x19
    80019c24:	a8858593          	addi	a1,a1,-1400 # 800326a8 <__func__.0+0x2c0>
    80019c28:	00019517          	auipc	a0,0x19
    80019c2c:	b3850513          	addi	a0,a0,-1224 # 80032760 <__func__.0+0x378>
    80019c30:	095150ef          	jal	8002f4c4 <printf>
    80019c34:	4511                	li	a0,4
    80019c36:	adee70ef          	jal	80000f14 <goto_priv>
    80019c3a:	b3de70ef          	jal	80001776 <reset_state>
}
    80019c3e:	60a2                	ld	ra,8(sp)
    80019c40:	8522                	mv	a0,s0
    80019c42:	6402                	ld	s0,0(sp)
    80019c44:	0141                	addi	sp,sp,16
    80019c46:	8082                	ret
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019c48:	4401                	li	s0,0
    TEST_END();
    80019c4a:	00019597          	auipc	a1,0x19
    80019c4e:	a6e58593          	addi	a1,a1,-1426 # 800326b8 <__func__.0+0x2d0>
    80019c52:	bfd9                	j	80019c28 <instruction_guest_page_fault_6+0xb8>
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019c54:	00019517          	auipc	a0,0x19
    80019c58:	aac50513          	addi	a0,a0,-1364 # 80032700 <__func__.0+0x318>
    80019c5c:	069150ef          	jal	8002f4c4 <printf>
    80019c60:	02900513          	li	a0,41
    80019c64:	54e140ef          	jal	8002e1b2 <putchar>
    80019c68:	b75d                	j	80019c0e <instruction_guest_page_fault_6+0x9e>

0000000080019c6a <instruction_guest_page_fault_7>:

bool instruction_guest_page_fault_7(){
    80019c6a:	1101                	addi	sp,sp,-32

    TEST_START();
    80019c6c:	00017597          	auipc	a1,0x17
    80019c70:	59458593          	addi	a1,a1,1428 # 80031200 <__func__.0>
    80019c74:	00019517          	auipc	a0,0x19
    80019c78:	a5450513          	addi	a0,a0,-1452 # 800326c8 <__func__.0+0x2e0>
bool instruction_guest_page_fault_7(){
    80019c7c:	ec06                	sd	ra,24(sp)
    80019c7e:	e822                	sd	s0,16(sp)
    80019c80:	e426                	sd	s1,8(sp)
    TEST_START();
    80019c82:	043150ef          	jal	8002f4c4 <printf>
    80019c86:	4529                	li	a0,10
    80019c88:	52a140ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    80019c8c:	450d                	li	a0,3
    80019c8e:	a86e70ef          	jal	80000f14 <goto_priv>
    hspt_init();
    80019c92:	95be60ef          	jal	800005ec <hspt_init>
    hpt_init();
    80019c96:	d3be60ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80019c9a:	aefe60ef          	jal	80000788 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019c9e:	4509                	li	a0,2
    80019ca0:	a74e70ef          	jal	80000f14 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    80019ca4:	974e70ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019ca8:	400137b7          	lui	a5,0x40013
    80019cac:	078a                	slli	a5,a5,0x2
    80019cae:	00042417          	auipc	s0,0x42
    80019cb2:	36240413          	addi	s0,s0,866 # 8005c010 <excpt>
    80019cb6:	00000297          	auipc	t0,0x0
    80019cba:	00c28293          	addi	t0,t0,12 # 80019cc2 <instruction_guest_page_fault_7+0x58>
    80019cbe:	02543c23          	sd	t0,56(s0)
    80019cc2:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019cc4:	08c00593          	li	a1,140
    80019cc8:	0001f617          	auipc	a2,0x1f
    80019ccc:	e8060613          	addi	a2,a2,-384 # 80038b48 <__func__.0+0x6760>
    80019cd0:	00019517          	auipc	a0,0x19
    80019cd4:	a1050513          	addi	a0,a0,-1520 # 800326e0 <__func__.0+0x2f8>
    80019cd8:	7ec150ef          	jal	8002f4c4 <printf>
    80019cdc:	00042797          	auipc	a5,0x42
    80019ce0:	3357c783          	lbu	a5,821(a5) # 8005c011 <excpt+0x1>
    80019ce4:	00019597          	auipc	a1,0x19
    80019ce8:	9d458593          	addi	a1,a1,-1580 # 800326b8 <__func__.0+0x2d0>
    80019cec:	cf89                	beqz	a5,80019d06 <instruction_guest_page_fault_7+0x9c>
    80019cee:	6418                	ld	a4,8(s0)
    80019cf0:	47d1                	li	a5,20
    80019cf2:	00019597          	auipc	a1,0x19
    80019cf6:	9b658593          	addi	a1,a1,-1610 # 800326a8 <__func__.0+0x2c0>
    80019cfa:	00f70663          	beq	a4,a5,80019d06 <instruction_guest_page_fault_7+0x9c>
    80019cfe:	00019597          	auipc	a1,0x19
    80019d02:	9ba58593          	addi	a1,a1,-1606 # 800326b8 <__func__.0+0x2d0>
    80019d06:	00019517          	auipc	a0,0x19
    80019d0a:	9f250513          	addi	a0,a0,-1550 # 800326f8 <__func__.0+0x310>
    80019d0e:	7b6150ef          	jal	8002f4c4 <printf>
    80019d12:	00042797          	auipc	a5,0x42
    80019d16:	2ff7c783          	lbu	a5,767(a5) # 8005c011 <excpt+0x1>
    80019d1a:	c789                	beqz	a5,80019d24 <instruction_guest_page_fault_7+0xba>
    80019d1c:	6418                	ld	a4,8(s0)
    80019d1e:	47d1                	li	a5,20
    80019d20:	00f70c63          	beq	a4,a5,80019d38 <instruction_guest_page_fault_7+0xce>
    80019d24:	00019517          	auipc	a0,0x19
    80019d28:	9dc50513          	addi	a0,a0,-1572 # 80032700 <__func__.0+0x318>
    80019d2c:	798150ef          	jal	8002f4c4 <printf>
    80019d30:	02900513          	li	a0,41
    80019d34:	47e140ef          	jal	8002e1b2 <putchar>
    80019d38:	4529                	li	a0,10
    80019d3a:	478140ef          	jal	8002e1b2 <putchar>
    80019d3e:	00042797          	auipc	a5,0x42
    80019d42:	2d37c783          	lbu	a5,723(a5) # 8005c011 <excpt+0x1>
    80019d46:	4481                	li	s1,0
    80019d48:	c789                	beqz	a5,80019d52 <instruction_guest_page_fault_7+0xe8>
    80019d4a:	6404                	ld	s1,8(s0)
    80019d4c:	14b1                	addi	s1,s1,-20
    80019d4e:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_SETUP_EXCEPT();
    80019d52:	8c6e70ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019d56:	400137b7          	lui	a5,0x40013
    80019d5a:	078a                	slli	a5,a5,0x2
    80019d5c:	00000297          	auipc	t0,0x0
    80019d60:	00c28293          	addi	t0,t0,12 # 80019d68 <instruction_guest_page_fault_7+0xfe>
    80019d64:	02543c23          	sd	t0,56(s0)
    80019d68:	8782                	jr	a5

    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019d6a:	08c00593          	li	a1,140
    80019d6e:	0001f617          	auipc	a2,0x1f
    80019d72:	e4260613          	addi	a2,a2,-446 # 80038bb0 <__func__.0+0x67c8>
    80019d76:	00019517          	auipc	a0,0x19
    80019d7a:	96a50513          	addi	a0,a0,-1686 # 800326e0 <__func__.0+0x2f8>
    80019d7e:	746150ef          	jal	8002f4c4 <printf>
    80019d82:	00042797          	auipc	a5,0x42
    80019d86:	28f7c783          	lbu	a5,655(a5) # 8005c011 <excpt+0x1>
    80019d8a:	00019597          	auipc	a1,0x19
    80019d8e:	92e58593          	addi	a1,a1,-1746 # 800326b8 <__func__.0+0x2d0>
    80019d92:	cf89                	beqz	a5,80019dac <instruction_guest_page_fault_7+0x142>
    80019d94:	6418                	ld	a4,8(s0)
    80019d96:	47d1                	li	a5,20
    80019d98:	00019597          	auipc	a1,0x19
    80019d9c:	91058593          	addi	a1,a1,-1776 # 800326a8 <__func__.0+0x2c0>
    80019da0:	00f70663          	beq	a4,a5,80019dac <instruction_guest_page_fault_7+0x142>
    80019da4:	00019597          	auipc	a1,0x19
    80019da8:	91458593          	addi	a1,a1,-1772 # 800326b8 <__func__.0+0x2d0>
    80019dac:	00019517          	auipc	a0,0x19
    80019db0:	94c50513          	addi	a0,a0,-1716 # 800326f8 <__func__.0+0x310>
    80019db4:	710150ef          	jal	8002f4c4 <printf>
    80019db8:	00042797          	auipc	a5,0x42
    80019dbc:	2597c783          	lbu	a5,601(a5) # 8005c011 <excpt+0x1>
    80019dc0:	c789                	beqz	a5,80019dca <instruction_guest_page_fault_7+0x160>
    80019dc2:	6418                	ld	a4,8(s0)
    80019dc4:	47d1                	li	a5,20
    80019dc6:	00f70c63          	beq	a4,a5,80019dde <instruction_guest_page_fault_7+0x174>
    80019dca:	00019517          	auipc	a0,0x19
    80019dce:	93650513          	addi	a0,a0,-1738 # 80032700 <__func__.0+0x318>
    80019dd2:	6f2150ef          	jal	8002f4c4 <printf>
    80019dd6:	02900513          	li	a0,41
    80019dda:	3d8140ef          	jal	8002e1b2 <putchar>
    80019dde:	4529                	li	a0,10
    80019de0:	3d2140ef          	jal	8002e1b2 <putchar>
    80019de4:	c095                	beqz	s1,80019e08 <instruction_guest_page_fault_7+0x19e>
    80019de6:	00042497          	auipc	s1,0x42
    80019dea:	22b4c483          	lbu	s1,555(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019dee:	00019597          	auipc	a1,0x19
    80019df2:	8ca58593          	addi	a1,a1,-1846 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019df6:	cc91                	beqz	s1,80019e12 <instruction_guest_page_fault_7+0x1a8>
    80019df8:	6418                	ld	a4,8(s0)
    80019dfa:	47d1                	li	a5,20
    TEST_END();
    80019dfc:	00019597          	auipc	a1,0x19
    80019e00:	8ac58593          	addi	a1,a1,-1876 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019e04:	00f70763          	beq	a4,a5,80019e12 <instruction_guest_page_fault_7+0x1a8>
    80019e08:	4481                	li	s1,0
    TEST_END();
    80019e0a:	00019597          	auipc	a1,0x19
    80019e0e:	8ae58593          	addi	a1,a1,-1874 # 800326b8 <__func__.0+0x2d0>
    80019e12:	00019517          	auipc	a0,0x19
    80019e16:	94e50513          	addi	a0,a0,-1714 # 80032760 <__func__.0+0x378>
    80019e1a:	6aa150ef          	jal	8002f4c4 <printf>
    80019e1e:	4511                	li	a0,4
    80019e20:	8f4e70ef          	jal	80000f14 <goto_priv>
    80019e24:	953e70ef          	jal	80001776 <reset_state>
    80019e28:	60e2                	ld	ra,24(sp)
    80019e2a:	6442                	ld	s0,16(sp)
    80019e2c:	8526                	mv	a0,s1
    80019e2e:	64a2                	ld	s1,8(sp)
    80019e30:	6105                	addi	sp,sp,32
    80019e32:	8082                	ret

0000000080019e34 <load_access_fault_1>:
#include <page_tables.h>




bool load_access_fault_1(){
    80019e34:	1101                	addi	sp,sp,-32

    TEST_START();
    80019e36:	00017597          	auipc	a1,0x17
    80019e3a:	3ea58593          	addi	a1,a1,1002 # 80031220 <__func__.40>
    80019e3e:	00019517          	auipc	a0,0x19
    80019e42:	88a50513          	addi	a0,a0,-1910 # 800326c8 <__func__.0+0x2e0>
bool load_access_fault_1(){
    80019e46:	ec06                	sd	ra,24(sp)
    80019e48:	e822                	sd	s0,16(sp)
    80019e4a:	e426                	sd	s1,8(sp)
    TEST_START();
    80019e4c:	678150ef          	jal	8002f4c4 <printf>
    80019e50:	4529                	li	a0,10
    80019e52:	360140ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    80019e56:	4511                	li	a0,4
    80019e58:	8bce70ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019e5c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位（清除）
    80019e60:	10000793          	li	a5,256
    80019e64:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019e68:	20000793          	li	a5,512
    80019e6c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019e70:	40000793          	li	a5,1024
    80019e74:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019e78:	6785                	lui	a5,0x1
    80019e7a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019e7e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019e82:	4785                	li	a5,1
    80019e84:	07fe                	slli	a5,a5,0x1f
    80019e86:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019e8a:	08100793          	li	a5,129
    80019e8e:	07e2                	slli	a5,a5,0x18
    80019e90:	3b179073          	csrw	pmpaddr1,a5
    // sfence();
    // hfence();
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019e94:	67a1                	lui	a5,0x8
    80019e96:	3a07a073          	csrs	pmpcfg0,a5
    
    TEST_SETUP_EXCEPT();
    80019e9a:	f7fe60ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80019e9e:	4785                	li	a5,1
    80019ea0:	1786                	slli	a5,a5,0x21
    80019ea2:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    80019ea6:	00078783          	lb	a5,0(a5)

    lb(0x80000100UL << 2);    //访问区域内地址


    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019eaa:	08c00593          	li	a1,140
    80019eae:	0001f617          	auipc	a2,0x1f
    80019eb2:	d6a60613          	addi	a2,a2,-662 # 80038c18 <__func__.0+0x6830>
    80019eb6:	00019517          	auipc	a0,0x19
    80019eba:	82a50513          	addi	a0,a0,-2006 # 800326e0 <__func__.0+0x2f8>
    80019ebe:	606150ef          	jal	8002f4c4 <printf>
    80019ec2:	00042797          	auipc	a5,0x42
    80019ec6:	14f7c783          	lbu	a5,335(a5) # 8005c011 <excpt+0x1>
    80019eca:	00042497          	auipc	s1,0x42
    80019ece:	14648493          	addi	s1,s1,326 # 8005c010 <excpt>
    80019ed2:	00018597          	auipc	a1,0x18
    80019ed6:	7e658593          	addi	a1,a1,2022 # 800326b8 <__func__.0+0x2d0>
    80019eda:	cf89                	beqz	a5,80019ef4 <load_access_fault_1+0xc0>
    80019edc:	6498                	ld	a4,8(s1)
    80019ede:	4795                	li	a5,5
    80019ee0:	00018597          	auipc	a1,0x18
    80019ee4:	7c858593          	addi	a1,a1,1992 # 800326a8 <__func__.0+0x2c0>
    80019ee8:	00f70663          	beq	a4,a5,80019ef4 <load_access_fault_1+0xc0>
    80019eec:	00018597          	auipc	a1,0x18
    80019ef0:	7cc58593          	addi	a1,a1,1996 # 800326b8 <__func__.0+0x2d0>
    80019ef4:	00019517          	auipc	a0,0x19
    80019ef8:	80450513          	addi	a0,a0,-2044 # 800326f8 <__func__.0+0x310>
    80019efc:	5c8150ef          	jal	8002f4c4 <printf>
    80019f00:	00042797          	auipc	a5,0x42
    80019f04:	1117c783          	lbu	a5,273(a5) # 8005c011 <excpt+0x1>
    80019f08:	c789                	beqz	a5,80019f12 <load_access_fault_1+0xde>
    80019f0a:	6498                	ld	a4,8(s1)
    80019f0c:	4795                	li	a5,5
    80019f0e:	00f70c63          	beq	a4,a5,80019f26 <load_access_fault_1+0xf2>
    80019f12:	00018517          	auipc	a0,0x18
    80019f16:	7ee50513          	addi	a0,a0,2030 # 80032700 <__func__.0+0x318>
    80019f1a:	5aa150ef          	jal	8002f4c4 <printf>
    80019f1e:	02900513          	li	a0,41
    80019f22:	290140ef          	jal	8002e1b2 <putchar>
    80019f26:	4529                	li	a0,10
    80019f28:	28a140ef          	jal	8002e1b2 <putchar>
    80019f2c:	00042417          	auipc	s0,0x42
    80019f30:	0e544403          	lbu	s0,229(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80019f34:	00018597          	auipc	a1,0x18
    80019f38:	78458593          	addi	a1,a1,1924 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019f3c:	cc11                	beqz	s0,80019f58 <load_access_fault_1+0x124>
    80019f3e:	6498                	ld	a4,8(s1)
    80019f40:	4795                	li	a5,5
    TEST_END();
    80019f42:	00018597          	auipc	a1,0x18
    80019f46:	76658593          	addi	a1,a1,1894 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019f4a:	00f70763          	beq	a4,a5,80019f58 <load_access_fault_1+0x124>
    80019f4e:	4401                	li	s0,0
    TEST_END();
    80019f50:	00018597          	auipc	a1,0x18
    80019f54:	76858593          	addi	a1,a1,1896 # 800326b8 <__func__.0+0x2d0>
    80019f58:	00019517          	auipc	a0,0x19
    80019f5c:	80850513          	addi	a0,a0,-2040 # 80032760 <__func__.0+0x378>
    80019f60:	564150ef          	jal	8002f4c4 <printf>
    80019f64:	4511                	li	a0,4
    80019f66:	fafe60ef          	jal	80000f14 <goto_priv>
    80019f6a:	80de70ef          	jal	80001776 <reset_state>
}
    80019f6e:	60e2                	ld	ra,24(sp)
    80019f70:	8522                	mv	a0,s0
    80019f72:	6442                	ld	s0,16(sp)
    80019f74:	64a2                	ld	s1,8(sp)
    80019f76:	6105                	addi	sp,sp,32
    80019f78:	8082                	ret

0000000080019f7a <load_access_fault_2>:

bool load_access_fault_2(){
    80019f7a:	1101                	addi	sp,sp,-32

    TEST_START();
    80019f7c:	00017597          	auipc	a1,0x17
    80019f80:	2bc58593          	addi	a1,a1,700 # 80031238 <__func__.39>
    80019f84:	00018517          	auipc	a0,0x18
    80019f88:	74450513          	addi	a0,a0,1860 # 800326c8 <__func__.0+0x2e0>
bool load_access_fault_2(){
    80019f8c:	ec06                	sd	ra,24(sp)
    80019f8e:	e822                	sd	s0,16(sp)
    80019f90:	e426                	sd	s1,8(sp)
    TEST_START();
    80019f92:	532150ef          	jal	8002f4c4 <printf>
    80019f96:	4529                	li	a0,10
    80019f98:	21a140ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    80019f9c:	4511                	li	a0,4
    80019f9e:	f77e60ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0

    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019fa2:	3a005073          	csrwi	pmpcfg0,0

    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80019fa6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019faa:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019fae:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80019fb2:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80019fb6:	10000793          	li	a5,256
    80019fba:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019fbe:	20000793          	li	a5,512
    80019fc2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019fc6:	40000793          	li	a5,1024
    80019fca:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019fce:	6785                	lui	a5,0x1
    80019fd0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019fd4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, 0x88000000UL);
    80019fd8:	47c5                	li	a5,17
    80019fda:	07ee                	slli	a5,a5,0x1b
    80019fdc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, 0x89000000UL);
    80019fe0:	08900793          	li	a5,137
    80019fe4:	07e2                	slli	a5,a5,0x18
    80019fe6:	3b179073          	csrw	pmpaddr1,a5


    CSRS(CSR_PMPCFG0,1ULL << 7 );       //pmp0cfg的L位 
    80019fea:	08000793          	li	a5,128
    80019fee:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );      //pmp1cfg的L位 
    80019ff2:	67a1                	lui	a5,0x8
    80019ff4:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    80019ff8:	450d                	li	a0,3
    80019ffa:	f1be60ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    80019ffe:	e1be60ef          	jal	80000e18 <test_setup_except_function>
    8001a002:	008817b7          	lui	a5,0x881
    8001a006:	07aa                	slli	a5,a5,0xa
    8001a008:	00078783          	lb	a5,0(a5) # 881000 <STACK_SIZE+0x781000>

    lb(0x88100000UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a00c:	08c00593          	li	a1,140
    8001a010:	0001f617          	auipc	a2,0x1f
    8001a014:	c4060613          	addi	a2,a2,-960 # 80038c50 <__func__.0+0x6868>
    8001a018:	00018517          	auipc	a0,0x18
    8001a01c:	6c850513          	addi	a0,a0,1736 # 800326e0 <__func__.0+0x2f8>
    8001a020:	4a4150ef          	jal	8002f4c4 <printf>
    8001a024:	00042797          	auipc	a5,0x42
    8001a028:	fed7c783          	lbu	a5,-19(a5) # 8005c011 <excpt+0x1>
    8001a02c:	00042497          	auipc	s1,0x42
    8001a030:	fe448493          	addi	s1,s1,-28 # 8005c010 <excpt>
    8001a034:	00018597          	auipc	a1,0x18
    8001a038:	68458593          	addi	a1,a1,1668 # 800326b8 <__func__.0+0x2d0>
    8001a03c:	cf89                	beqz	a5,8001a056 <load_access_fault_2+0xdc>
    8001a03e:	6498                	ld	a4,8(s1)
    8001a040:	4795                	li	a5,5
    8001a042:	00018597          	auipc	a1,0x18
    8001a046:	66658593          	addi	a1,a1,1638 # 800326a8 <__func__.0+0x2c0>
    8001a04a:	00f70663          	beq	a4,a5,8001a056 <load_access_fault_2+0xdc>
    8001a04e:	00018597          	auipc	a1,0x18
    8001a052:	66a58593          	addi	a1,a1,1642 # 800326b8 <__func__.0+0x2d0>
    8001a056:	00018517          	auipc	a0,0x18
    8001a05a:	6a250513          	addi	a0,a0,1698 # 800326f8 <__func__.0+0x310>
    8001a05e:	466150ef          	jal	8002f4c4 <printf>
    8001a062:	00042797          	auipc	a5,0x42
    8001a066:	faf7c783          	lbu	a5,-81(a5) # 8005c011 <excpt+0x1>
    8001a06a:	c789                	beqz	a5,8001a074 <load_access_fault_2+0xfa>
    8001a06c:	6498                	ld	a4,8(s1)
    8001a06e:	4795                	li	a5,5
    8001a070:	00f70c63          	beq	a4,a5,8001a088 <load_access_fault_2+0x10e>
    8001a074:	00018517          	auipc	a0,0x18
    8001a078:	68c50513          	addi	a0,a0,1676 # 80032700 <__func__.0+0x318>
    8001a07c:	448150ef          	jal	8002f4c4 <printf>
    8001a080:	02900513          	li	a0,41
    8001a084:	12e140ef          	jal	8002e1b2 <putchar>
    8001a088:	4529                	li	a0,10
    8001a08a:	128140ef          	jal	8002e1b2 <putchar>
    8001a08e:	00042417          	auipc	s0,0x42
    8001a092:	f8344403          	lbu	s0,-125(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a096:	00018597          	auipc	a1,0x18
    8001a09a:	62258593          	addi	a1,a1,1570 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a09e:	cc11                	beqz	s0,8001a0ba <load_access_fault_2+0x140>
    8001a0a0:	6498                	ld	a4,8(s1)
    8001a0a2:	4795                	li	a5,5
    TEST_END();
    8001a0a4:	00018597          	auipc	a1,0x18
    8001a0a8:	60458593          	addi	a1,a1,1540 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a0ac:	00f70763          	beq	a4,a5,8001a0ba <load_access_fault_2+0x140>
    8001a0b0:	4401                	li	s0,0
    TEST_END();
    8001a0b2:	00018597          	auipc	a1,0x18
    8001a0b6:	60658593          	addi	a1,a1,1542 # 800326b8 <__func__.0+0x2d0>
    8001a0ba:	00018517          	auipc	a0,0x18
    8001a0be:	6a650513          	addi	a0,a0,1702 # 80032760 <__func__.0+0x378>
    8001a0c2:	402150ef          	jal	8002f4c4 <printf>
    8001a0c6:	4511                	li	a0,4
    8001a0c8:	e4de60ef          	jal	80000f14 <goto_priv>
    8001a0cc:	eaae70ef          	jal	80001776 <reset_state>
}
    8001a0d0:	60e2                	ld	ra,24(sp)
    8001a0d2:	8522                	mv	a0,s0
    8001a0d4:	6442                	ld	s0,16(sp)
    8001a0d6:	64a2                	ld	s1,8(sp)
    8001a0d8:	6105                	addi	sp,sp,32
    8001a0da:	8082                	ret

000000008001a0dc <load_access_fault_3>:


bool load_access_fault_3(){
    8001a0dc:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a0de:	00017597          	auipc	a1,0x17
    8001a0e2:	17258593          	addi	a1,a1,370 # 80031250 <__func__.38>
    8001a0e6:	00018517          	auipc	a0,0x18
    8001a0ea:	5e250513          	addi	a0,a0,1506 # 800326c8 <__func__.0+0x2e0>
bool load_access_fault_3(){
    8001a0ee:	ec06                	sd	ra,24(sp)
    8001a0f0:	e822                	sd	s0,16(sp)
    8001a0f2:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a0f4:	3d0150ef          	jal	8002f4c4 <printf>
    8001a0f8:	4529                	li	a0,10
    8001a0fa:	0b8140ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001a0fe:	4511                	li	a0,4
    8001a100:	e15e60ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a104:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a108:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a10c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a110:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a114:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a118:	10000793          	li	a5,256
    8001a11c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a120:	20000793          	li	a5,512
    8001a124:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a128:	40000793          	li	a5,1024
    8001a12c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a130:	6785                	lui	a5,0x1
    8001a132:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a136:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a13a:	4785                	li	a5,1
    8001a13c:	07fe                	slli	a5,a5,0x1f
    8001a13e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a142:	08100793          	li	a5,129
    8001a146:	07e2                	slli	a5,a5,0x18
    8001a148:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a14c:	08000793          	li	a5,128
    8001a150:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a154:	67a1                	lui	a5,0x8
    8001a156:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001a15a:	4505                	li	a0,1
    8001a15c:	db9e60ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a160:	cb9e60ef          	jal	80000e18 <test_setup_except_function>
    8001a164:	4785                	li	a5,1
    8001a166:	1786                	slli	a5,a5,0x21
    8001a168:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a16c:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a170:	08c00593          	li	a1,140
    8001a174:	0001f617          	auipc	a2,0x1f
    8001a178:	b1460613          	addi	a2,a2,-1260 # 80038c88 <__func__.0+0x68a0>
    8001a17c:	00018517          	auipc	a0,0x18
    8001a180:	56450513          	addi	a0,a0,1380 # 800326e0 <__func__.0+0x2f8>
    8001a184:	340150ef          	jal	8002f4c4 <printf>
    8001a188:	00042797          	auipc	a5,0x42
    8001a18c:	e897c783          	lbu	a5,-375(a5) # 8005c011 <excpt+0x1>
    8001a190:	00042497          	auipc	s1,0x42
    8001a194:	e8048493          	addi	s1,s1,-384 # 8005c010 <excpt>
    8001a198:	00018597          	auipc	a1,0x18
    8001a19c:	52058593          	addi	a1,a1,1312 # 800326b8 <__func__.0+0x2d0>
    8001a1a0:	cf89                	beqz	a5,8001a1ba <load_access_fault_3+0xde>
    8001a1a2:	6498                	ld	a4,8(s1)
    8001a1a4:	4795                	li	a5,5
    8001a1a6:	00018597          	auipc	a1,0x18
    8001a1aa:	50258593          	addi	a1,a1,1282 # 800326a8 <__func__.0+0x2c0>
    8001a1ae:	00f70663          	beq	a4,a5,8001a1ba <load_access_fault_3+0xde>
    8001a1b2:	00018597          	auipc	a1,0x18
    8001a1b6:	50658593          	addi	a1,a1,1286 # 800326b8 <__func__.0+0x2d0>
    8001a1ba:	00018517          	auipc	a0,0x18
    8001a1be:	53e50513          	addi	a0,a0,1342 # 800326f8 <__func__.0+0x310>
    8001a1c2:	302150ef          	jal	8002f4c4 <printf>
    8001a1c6:	00042797          	auipc	a5,0x42
    8001a1ca:	e4b7c783          	lbu	a5,-437(a5) # 8005c011 <excpt+0x1>
    8001a1ce:	c789                	beqz	a5,8001a1d8 <load_access_fault_3+0xfc>
    8001a1d0:	6498                	ld	a4,8(s1)
    8001a1d2:	4795                	li	a5,5
    8001a1d4:	00f70c63          	beq	a4,a5,8001a1ec <load_access_fault_3+0x110>
    8001a1d8:	00018517          	auipc	a0,0x18
    8001a1dc:	52850513          	addi	a0,a0,1320 # 80032700 <__func__.0+0x318>
    8001a1e0:	2e4150ef          	jal	8002f4c4 <printf>
    8001a1e4:	02900513          	li	a0,41
    8001a1e8:	7cb130ef          	jal	8002e1b2 <putchar>
    8001a1ec:	4529                	li	a0,10
    8001a1ee:	7c5130ef          	jal	8002e1b2 <putchar>
    8001a1f2:	00042417          	auipc	s0,0x42
    8001a1f6:	e1f44403          	lbu	s0,-481(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a1fa:	00018597          	auipc	a1,0x18
    8001a1fe:	4be58593          	addi	a1,a1,1214 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a202:	cc11                	beqz	s0,8001a21e <load_access_fault_3+0x142>
    8001a204:	6498                	ld	a4,8(s1)
    8001a206:	4795                	li	a5,5
    TEST_END();
    8001a208:	00018597          	auipc	a1,0x18
    8001a20c:	4a058593          	addi	a1,a1,1184 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a210:	00f70763          	beq	a4,a5,8001a21e <load_access_fault_3+0x142>
    8001a214:	4401                	li	s0,0
    TEST_END();
    8001a216:	00018597          	auipc	a1,0x18
    8001a21a:	4a258593          	addi	a1,a1,1186 # 800326b8 <__func__.0+0x2d0>
    8001a21e:	00018517          	auipc	a0,0x18
    8001a222:	54250513          	addi	a0,a0,1346 # 80032760 <__func__.0+0x378>
    8001a226:	29e150ef          	jal	8002f4c4 <printf>
    8001a22a:	4511                	li	a0,4
    8001a22c:	ce9e60ef          	jal	80000f14 <goto_priv>
    8001a230:	d46e70ef          	jal	80001776 <reset_state>
}
    8001a234:	60e2                	ld	ra,24(sp)
    8001a236:	8522                	mv	a0,s0
    8001a238:	6442                	ld	s0,16(sp)
    8001a23a:	64a2                	ld	s1,8(sp)
    8001a23c:	6105                	addi	sp,sp,32
    8001a23e:	8082                	ret

000000008001a240 <load_access_fault_4>:

bool load_access_fault_4(){
    8001a240:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a242:	00017597          	auipc	a1,0x17
    8001a246:	02658593          	addi	a1,a1,38 # 80031268 <__func__.37>
    8001a24a:	00018517          	auipc	a0,0x18
    8001a24e:	47e50513          	addi	a0,a0,1150 # 800326c8 <__func__.0+0x2e0>
bool load_access_fault_4(){
    8001a252:	ec06                	sd	ra,24(sp)
    8001a254:	e822                	sd	s0,16(sp)
    8001a256:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a258:	26c150ef          	jal	8002f4c4 <printf>
    8001a25c:	4529                	li	a0,10
    8001a25e:	755130ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001a262:	4511                	li	a0,4
    8001a264:	cb1e60ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a268:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a26c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a270:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a274:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a278:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a27c:	10000793          	li	a5,256
    8001a280:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a284:	20000793          	li	a5,512
    8001a288:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a28c:	40000793          	li	a5,1024
    8001a290:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a294:	6785                	lui	a5,0x1
    8001a296:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a29a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a29e:	4785                	li	a5,1
    8001a2a0:	07fe                	slli	a5,a5,0x1f
    8001a2a2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a2a6:	08100793          	li	a5,129
    8001a2aa:	07e2                	slli	a5,a5,0x18
    8001a2ac:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a2b0:	08000793          	li	a5,128
    8001a2b4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a2b8:	67a1                	lui	a5,0x8
    8001a2ba:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a2be:	4501                	li	a0,0
    8001a2c0:	c55e60ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a2c4:	b55e60ef          	jal	80000e18 <test_setup_except_function>
    8001a2c8:	4785                	li	a5,1
    8001a2ca:	1786                	slli	a5,a5,0x21
    8001a2cc:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a2d0:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a2d4:	08c00593          	li	a1,140
    8001a2d8:	0001f617          	auipc	a2,0x1f
    8001a2dc:	9e860613          	addi	a2,a2,-1560 # 80038cc0 <__func__.0+0x68d8>
    8001a2e0:	00018517          	auipc	a0,0x18
    8001a2e4:	40050513          	addi	a0,a0,1024 # 800326e0 <__func__.0+0x2f8>
    8001a2e8:	1dc150ef          	jal	8002f4c4 <printf>
    8001a2ec:	00042797          	auipc	a5,0x42
    8001a2f0:	d257c783          	lbu	a5,-731(a5) # 8005c011 <excpt+0x1>
    8001a2f4:	00042497          	auipc	s1,0x42
    8001a2f8:	d1c48493          	addi	s1,s1,-740 # 8005c010 <excpt>
    8001a2fc:	00018597          	auipc	a1,0x18
    8001a300:	3bc58593          	addi	a1,a1,956 # 800326b8 <__func__.0+0x2d0>
    8001a304:	cf89                	beqz	a5,8001a31e <load_access_fault_4+0xde>
    8001a306:	6498                	ld	a4,8(s1)
    8001a308:	4795                	li	a5,5
    8001a30a:	00018597          	auipc	a1,0x18
    8001a30e:	39e58593          	addi	a1,a1,926 # 800326a8 <__func__.0+0x2c0>
    8001a312:	00f70663          	beq	a4,a5,8001a31e <load_access_fault_4+0xde>
    8001a316:	00018597          	auipc	a1,0x18
    8001a31a:	3a258593          	addi	a1,a1,930 # 800326b8 <__func__.0+0x2d0>
    8001a31e:	00018517          	auipc	a0,0x18
    8001a322:	3da50513          	addi	a0,a0,986 # 800326f8 <__func__.0+0x310>
    8001a326:	19e150ef          	jal	8002f4c4 <printf>
    8001a32a:	00042797          	auipc	a5,0x42
    8001a32e:	ce77c783          	lbu	a5,-793(a5) # 8005c011 <excpt+0x1>
    8001a332:	c789                	beqz	a5,8001a33c <load_access_fault_4+0xfc>
    8001a334:	6498                	ld	a4,8(s1)
    8001a336:	4795                	li	a5,5
    8001a338:	00f70c63          	beq	a4,a5,8001a350 <load_access_fault_4+0x110>
    8001a33c:	00018517          	auipc	a0,0x18
    8001a340:	3c450513          	addi	a0,a0,964 # 80032700 <__func__.0+0x318>
    8001a344:	180150ef          	jal	8002f4c4 <printf>
    8001a348:	02900513          	li	a0,41
    8001a34c:	667130ef          	jal	8002e1b2 <putchar>
    8001a350:	4529                	li	a0,10
    8001a352:	661130ef          	jal	8002e1b2 <putchar>
    8001a356:	00042417          	auipc	s0,0x42
    8001a35a:	cbb44403          	lbu	s0,-837(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a35e:	00018597          	auipc	a1,0x18
    8001a362:	35a58593          	addi	a1,a1,858 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a366:	cc11                	beqz	s0,8001a382 <load_access_fault_4+0x142>
    8001a368:	6498                	ld	a4,8(s1)
    8001a36a:	4795                	li	a5,5
    TEST_END();
    8001a36c:	00018597          	auipc	a1,0x18
    8001a370:	33c58593          	addi	a1,a1,828 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a374:	00f70763          	beq	a4,a5,8001a382 <load_access_fault_4+0x142>
    8001a378:	4401                	li	s0,0
    TEST_END();
    8001a37a:	00018597          	auipc	a1,0x18
    8001a37e:	33e58593          	addi	a1,a1,830 # 800326b8 <__func__.0+0x2d0>
    8001a382:	00018517          	auipc	a0,0x18
    8001a386:	3de50513          	addi	a0,a0,990 # 80032760 <__func__.0+0x378>
    8001a38a:	13a150ef          	jal	8002f4c4 <printf>
    8001a38e:	4511                	li	a0,4
    8001a390:	b85e60ef          	jal	80000f14 <goto_priv>
    8001a394:	be2e70ef          	jal	80001776 <reset_state>
}
    8001a398:	60e2                	ld	ra,24(sp)
    8001a39a:	8522                	mv	a0,s0
    8001a39c:	6442                	ld	s0,16(sp)
    8001a39e:	64a2                	ld	s1,8(sp)
    8001a3a0:	6105                	addi	sp,sp,32
    8001a3a2:	8082                	ret

000000008001a3a4 <load_access_fault_5>:

bool load_access_fault_5(){
    8001a3a4:	1141                	addi	sp,sp,-16

    TEST_START();
    8001a3a6:	00017597          	auipc	a1,0x17
    8001a3aa:	eda58593          	addi	a1,a1,-294 # 80031280 <__func__.36>
    8001a3ae:	00018517          	auipc	a0,0x18
    8001a3b2:	31a50513          	addi	a0,a0,794 # 800326c8 <__func__.0+0x2e0>
bool load_access_fault_5(){
    8001a3b6:	e406                	sd	ra,8(sp)
    8001a3b8:	e022                	sd	s0,0(sp)
    TEST_START();
    8001a3ba:	10a150ef          	jal	8002f4c4 <printf>
    8001a3be:	4529                	li	a0,10
    8001a3c0:	5f3130ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001a3c4:	4511                	li	a0,4
    8001a3c6:	b4fe60ef          	jal	80000f14 <goto_priv>
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));
    8001a3ca:	3a0025f3          	csrr	a1,pmpcfg0
    8001a3ce:	0001f517          	auipc	a0,0x1f
    8001a3d2:	92a50513          	addi	a0,a0,-1750 # 80038cf8 <__func__.0+0x6910>
    8001a3d6:	0ee150ef          	jal	8002f4c4 <printf>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a3da:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a3de:	10000793          	li	a5,256
    8001a3e2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a3e6:	20000793          	li	a5,512
    8001a3ea:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a3ee:	40000793          	li	a5,1024
    8001a3f2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a3f6:	6785                	lui	a5,0x1
    8001a3f8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a3fc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a400:	4785                	li	a5,1
    8001a402:	07fe                	slli	a5,a5,0x1f
    8001a404:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a408:	08100793          	li	a5,129
    8001a40c:	07e2                	slli	a5,a5,0x18
    8001a40e:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a412:	67a1                	lui	a5,0x8
    8001a414:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001a418:	a01e60ef          	jal	80000e18 <test_setup_except_function>
    8001a41c:	4785                	li	a5,1
    8001a41e:	1786                	slli	a5,a5,0x21
    8001a420:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a424:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    printf("%d\n",excpt.triggered);
    8001a428:	00042597          	auipc	a1,0x42
    8001a42c:	be95c583          	lbu	a1,-1047(a1) # 8005c011 <excpt+0x1>
    8001a430:	00019517          	auipc	a0,0x19
    8001a434:	e1850513          	addi	a0,a0,-488 # 80033248 <__func__.0+0xe60>
    8001a438:	08c150ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.cause);
    8001a43c:	00042597          	auipc	a1,0x42
    8001a440:	bdc5b583          	ld	a1,-1060(a1) # 8005c018 <excpt+0x8>
    8001a444:	00019517          	auipc	a0,0x19
    8001a448:	e0450513          	addi	a0,a0,-508 # 80033248 <__func__.0+0xe60>
    8001a44c:	078150ef          	jal	8002f4c4 <printf>



    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a450:	08c00593          	li	a1,140
    8001a454:	0001f617          	auipc	a2,0x1f
    8001a458:	8b460613          	addi	a2,a2,-1868 # 80038d08 <__func__.0+0x6920>
    8001a45c:	00018517          	auipc	a0,0x18
    8001a460:	28450513          	addi	a0,a0,644 # 800326e0 <__func__.0+0x2f8>
    8001a464:	060150ef          	jal	8002f4c4 <printf>
    8001a468:	00042797          	auipc	a5,0x42
    8001a46c:	ba97c783          	lbu	a5,-1111(a5) # 8005c011 <excpt+0x1>
    8001a470:	00018597          	auipc	a1,0x18
    8001a474:	23858593          	addi	a1,a1,568 # 800326a8 <__func__.0+0x2c0>
    8001a478:	c789                	beqz	a5,8001a482 <load_access_fault_5+0xde>
    8001a47a:	00018597          	auipc	a1,0x18
    8001a47e:	23e58593          	addi	a1,a1,574 # 800326b8 <__func__.0+0x2d0>
    8001a482:	00018517          	auipc	a0,0x18
    8001a486:	27650513          	addi	a0,a0,630 # 800326f8 <__func__.0+0x310>
    8001a48a:	03a150ef          	jal	8002f4c4 <printf>
    8001a48e:	00042797          	auipc	a5,0x42
    8001a492:	b837c783          	lbu	a5,-1149(a5) # 8005c011 <excpt+0x1>
    8001a496:	e7a1                	bnez	a5,8001a4de <load_access_fault_5+0x13a>
    8001a498:	4529                	li	a0,10
    8001a49a:	519130ef          	jal	8002e1b2 <putchar>
    8001a49e:	00042797          	auipc	a5,0x42
    8001a4a2:	b737c783          	lbu	a5,-1165(a5) # 8005c011 <excpt+0x1>
    8001a4a6:	e795                	bnez	a5,8001a4d2 <load_access_fault_5+0x12e>
    8001a4a8:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001a4aa:	00018597          	auipc	a1,0x18
    8001a4ae:	1fe58593          	addi	a1,a1,510 # 800326a8 <__func__.0+0x2c0>
    8001a4b2:	00018517          	auipc	a0,0x18
    8001a4b6:	2ae50513          	addi	a0,a0,686 # 80032760 <__func__.0+0x378>
    8001a4ba:	00a150ef          	jal	8002f4c4 <printf>
    8001a4be:	4511                	li	a0,4
    8001a4c0:	a55e60ef          	jal	80000f14 <goto_priv>
    8001a4c4:	ab2e70ef          	jal	80001776 <reset_state>
}
    8001a4c8:	60a2                	ld	ra,8(sp)
    8001a4ca:	8522                	mv	a0,s0
    8001a4cc:	6402                	ld	s0,0(sp)
    8001a4ce:	0141                	addi	sp,sp,16
    8001a4d0:	8082                	ret
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a4d2:	4401                	li	s0,0
    TEST_END();
    8001a4d4:	00018597          	auipc	a1,0x18
    8001a4d8:	1e458593          	addi	a1,a1,484 # 800326b8 <__func__.0+0x2d0>
    8001a4dc:	bfd9                	j	8001a4b2 <load_access_fault_5+0x10e>
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a4de:	00018517          	auipc	a0,0x18
    8001a4e2:	22250513          	addi	a0,a0,546 # 80032700 <__func__.0+0x318>
    8001a4e6:	7df140ef          	jal	8002f4c4 <printf>
    8001a4ea:	02900513          	li	a0,41
    8001a4ee:	4c5130ef          	jal	8002e1b2 <putchar>
    8001a4f2:	b75d                	j	8001a498 <load_access_fault_5+0xf4>

000000008001a4f4 <load_access_fault_6>:


bool load_access_fault_6(){
    8001a4f4:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a4f6:	00017597          	auipc	a1,0x17
    8001a4fa:	da258593          	addi	a1,a1,-606 # 80031298 <__func__.35>
    8001a4fe:	00018517          	auipc	a0,0x18
    8001a502:	1ca50513          	addi	a0,a0,458 # 800326c8 <__func__.0+0x2e0>
bool load_access_fault_6(){
    8001a506:	ec06                	sd	ra,24(sp)
    8001a508:	e822                	sd	s0,16(sp)
    8001a50a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a50c:	7b9140ef          	jal	8002f4c4 <printf>
    8001a510:	4529                	li	a0,10
    8001a512:	4a1130ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001a516:	4511                	li	a0,4
    8001a518:	9fde60ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a51c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a520:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a524:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a528:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a52c:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a530:	10000793          	li	a5,256
    8001a534:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a538:	20000793          	li	a5,512
    8001a53c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a540:	40000793          	li	a5,1024
    8001a544:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a548:	6785                	lui	a5,0x1
    8001a54a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a54e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a552:	4785                	li	a5,1
    8001a554:	07fe                	slli	a5,a5,0x1f
    8001a556:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a55a:	08100793          	li	a5,129
    8001a55e:	07e2                	slli	a5,a5,0x18
    8001a560:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );           //pmp0cfg的L位 
    8001a564:	08000793          	li	a5,128
    8001a568:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );          //pmp1cfg的L位 
    8001a56c:	67a1                	lui	a5,0x8
    8001a56e:	3a07b073          	csrc	pmpcfg0,a5

    printf("%llx\n",CSRR(CSR_PMPADDR0));
    8001a572:	3b0025f3          	csrr	a1,pmpaddr0
    8001a576:	0001e517          	auipc	a0,0x1e
    8001a57a:	78a50513          	addi	a0,a0,1930 # 80038d00 <__func__.0+0x6918>
    8001a57e:	747140ef          	jal	8002f4c4 <printf>
    printf("%llx\n",CSRR(CSR_PMPADDR1));
    8001a582:	3b1025f3          	csrr	a1,pmpaddr1
    8001a586:	0001e517          	auipc	a0,0x1e
    8001a58a:	77a50513          	addi	a0,a0,1914 # 80038d00 <__func__.0+0x6918>
    8001a58e:	737140ef          	jal	8002f4c4 <printf>
    goto_priv(PRIV_HS);
    8001a592:	450d                	li	a0,3
    8001a594:	981e60ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a598:	881e60ef          	jal	80000e18 <test_setup_except_function>
    8001a59c:	4785                	li	a5,1
    8001a59e:	1786                	slli	a5,a5,0x21
    8001a5a0:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a5a4:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a5a8:	08c00593          	li	a1,140
    8001a5ac:	0001e617          	auipc	a2,0x1e
    8001a5b0:	79460613          	addi	a2,a2,1940 # 80038d40 <__func__.0+0x6958>
    8001a5b4:	00018517          	auipc	a0,0x18
    8001a5b8:	12c50513          	addi	a0,a0,300 # 800326e0 <__func__.0+0x2f8>
    8001a5bc:	709140ef          	jal	8002f4c4 <printf>
    8001a5c0:	00042797          	auipc	a5,0x42
    8001a5c4:	a517c783          	lbu	a5,-1455(a5) # 8005c011 <excpt+0x1>
    8001a5c8:	00042497          	auipc	s1,0x42
    8001a5cc:	a4848493          	addi	s1,s1,-1464 # 8005c010 <excpt>
    8001a5d0:	00018597          	auipc	a1,0x18
    8001a5d4:	0e858593          	addi	a1,a1,232 # 800326b8 <__func__.0+0x2d0>
    8001a5d8:	cf89                	beqz	a5,8001a5f2 <load_access_fault_6+0xfe>
    8001a5da:	6498                	ld	a4,8(s1)
    8001a5dc:	4795                	li	a5,5
    8001a5de:	00018597          	auipc	a1,0x18
    8001a5e2:	0ca58593          	addi	a1,a1,202 # 800326a8 <__func__.0+0x2c0>
    8001a5e6:	00f70663          	beq	a4,a5,8001a5f2 <load_access_fault_6+0xfe>
    8001a5ea:	00018597          	auipc	a1,0x18
    8001a5ee:	0ce58593          	addi	a1,a1,206 # 800326b8 <__func__.0+0x2d0>
    8001a5f2:	00018517          	auipc	a0,0x18
    8001a5f6:	10650513          	addi	a0,a0,262 # 800326f8 <__func__.0+0x310>
    8001a5fa:	6cb140ef          	jal	8002f4c4 <printf>
    8001a5fe:	00042797          	auipc	a5,0x42
    8001a602:	a137c783          	lbu	a5,-1517(a5) # 8005c011 <excpt+0x1>
    8001a606:	c789                	beqz	a5,8001a610 <load_access_fault_6+0x11c>
    8001a608:	6498                	ld	a4,8(s1)
    8001a60a:	4795                	li	a5,5
    8001a60c:	00f70c63          	beq	a4,a5,8001a624 <load_access_fault_6+0x130>
    8001a610:	00018517          	auipc	a0,0x18
    8001a614:	0f050513          	addi	a0,a0,240 # 80032700 <__func__.0+0x318>
    8001a618:	6ad140ef          	jal	8002f4c4 <printf>
    8001a61c:	02900513          	li	a0,41
    8001a620:	393130ef          	jal	8002e1b2 <putchar>
    8001a624:	4529                	li	a0,10
    8001a626:	38d130ef          	jal	8002e1b2 <putchar>
    8001a62a:	00042417          	auipc	s0,0x42
    8001a62e:	9e744403          	lbu	s0,-1561(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a632:	00018597          	auipc	a1,0x18
    8001a636:	08658593          	addi	a1,a1,134 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a63a:	cc11                	beqz	s0,8001a656 <load_access_fault_6+0x162>
    8001a63c:	6498                	ld	a4,8(s1)
    8001a63e:	4795                	li	a5,5
    TEST_END();
    8001a640:	00018597          	auipc	a1,0x18
    8001a644:	06858593          	addi	a1,a1,104 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a648:	00f70763          	beq	a4,a5,8001a656 <load_access_fault_6+0x162>
    8001a64c:	4401                	li	s0,0
    TEST_END();
    8001a64e:	00018597          	auipc	a1,0x18
    8001a652:	06a58593          	addi	a1,a1,106 # 800326b8 <__func__.0+0x2d0>
    8001a656:	00018517          	auipc	a0,0x18
    8001a65a:	10a50513          	addi	a0,a0,266 # 80032760 <__func__.0+0x378>
    8001a65e:	667140ef          	jal	8002f4c4 <printf>
    8001a662:	4511                	li	a0,4
    8001a664:	8b1e60ef          	jal	80000f14 <goto_priv>
    8001a668:	90ee70ef          	jal	80001776 <reset_state>
}
    8001a66c:	60e2                	ld	ra,24(sp)
    8001a66e:	8522                	mv	a0,s0
    8001a670:	6442                	ld	s0,16(sp)
    8001a672:	64a2                	ld	s1,8(sp)
    8001a674:	6105                	addi	sp,sp,32
    8001a676:	8082                	ret

000000008001a678 <load_access_fault_7>:


bool load_access_fault_7(){
    8001a678:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a67a:	00017597          	auipc	a1,0x17
    8001a67e:	c3658593          	addi	a1,a1,-970 # 800312b0 <__func__.34>
    8001a682:	00018517          	auipc	a0,0x18
    8001a686:	04650513          	addi	a0,a0,70 # 800326c8 <__func__.0+0x2e0>
bool load_access_fault_7(){
    8001a68a:	ec06                	sd	ra,24(sp)
    8001a68c:	e822                	sd	s0,16(sp)
    8001a68e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a690:	635140ef          	jal	8002f4c4 <printf>
    8001a694:	4529                	li	a0,10
    8001a696:	31d130ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001a69a:	4511                	li	a0,4
    8001a69c:	879e60ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a6a0:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a6a4:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a6a8:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a6ac:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a6b0:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a6b4:	10000793          	li	a5,256
    8001a6b8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a6bc:	20000793          	li	a5,512
    8001a6c0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a6c4:	40000793          	li	a5,1024
    8001a6c8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a6cc:	6785                	lui	a5,0x1
    8001a6ce:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a6d2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a6d6:	4785                	li	a5,1
    8001a6d8:	07fe                	slli	a5,a5,0x1f
    8001a6da:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a6de:	08100793          	li	a5,129
    8001a6e2:	07e2                	slli	a5,a5,0x18
    8001a6e4:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a6e8:	08000793          	li	a5,128
    8001a6ec:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a6f0:	67a1                	lui	a5,0x8
    8001a6f2:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001a6f6:	4505                	li	a0,1
    8001a6f8:	81de60ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a6fc:	f1ce60ef          	jal	80000e18 <test_setup_except_function>
    8001a700:	4785                	li	a5,1
    8001a702:	1786                	slli	a5,a5,0x21
    8001a704:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a708:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a70c:	08c00593          	li	a1,140
    8001a710:	0001e617          	auipc	a2,0x1e
    8001a714:	66860613          	addi	a2,a2,1640 # 80038d78 <__func__.0+0x6990>
    8001a718:	00018517          	auipc	a0,0x18
    8001a71c:	fc850513          	addi	a0,a0,-56 # 800326e0 <__func__.0+0x2f8>
    8001a720:	5a5140ef          	jal	8002f4c4 <printf>
    8001a724:	00042797          	auipc	a5,0x42
    8001a728:	8ed7c783          	lbu	a5,-1811(a5) # 8005c011 <excpt+0x1>
    8001a72c:	00042497          	auipc	s1,0x42
    8001a730:	8e448493          	addi	s1,s1,-1820 # 8005c010 <excpt>
    8001a734:	00018597          	auipc	a1,0x18
    8001a738:	f8458593          	addi	a1,a1,-124 # 800326b8 <__func__.0+0x2d0>
    8001a73c:	cf89                	beqz	a5,8001a756 <load_access_fault_7+0xde>
    8001a73e:	6498                	ld	a4,8(s1)
    8001a740:	4795                	li	a5,5
    8001a742:	00018597          	auipc	a1,0x18
    8001a746:	f6658593          	addi	a1,a1,-154 # 800326a8 <__func__.0+0x2c0>
    8001a74a:	00f70663          	beq	a4,a5,8001a756 <load_access_fault_7+0xde>
    8001a74e:	00018597          	auipc	a1,0x18
    8001a752:	f6a58593          	addi	a1,a1,-150 # 800326b8 <__func__.0+0x2d0>
    8001a756:	00018517          	auipc	a0,0x18
    8001a75a:	fa250513          	addi	a0,a0,-94 # 800326f8 <__func__.0+0x310>
    8001a75e:	567140ef          	jal	8002f4c4 <printf>
    8001a762:	00042797          	auipc	a5,0x42
    8001a766:	8af7c783          	lbu	a5,-1873(a5) # 8005c011 <excpt+0x1>
    8001a76a:	c789                	beqz	a5,8001a774 <load_access_fault_7+0xfc>
    8001a76c:	6498                	ld	a4,8(s1)
    8001a76e:	4795                	li	a5,5
    8001a770:	00f70c63          	beq	a4,a5,8001a788 <load_access_fault_7+0x110>
    8001a774:	00018517          	auipc	a0,0x18
    8001a778:	f8c50513          	addi	a0,a0,-116 # 80032700 <__func__.0+0x318>
    8001a77c:	549140ef          	jal	8002f4c4 <printf>
    8001a780:	02900513          	li	a0,41
    8001a784:	22f130ef          	jal	8002e1b2 <putchar>
    8001a788:	4529                	li	a0,10
    8001a78a:	229130ef          	jal	8002e1b2 <putchar>
    8001a78e:	00042417          	auipc	s0,0x42
    8001a792:	88344403          	lbu	s0,-1917(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a796:	00018597          	auipc	a1,0x18
    8001a79a:	f2258593          	addi	a1,a1,-222 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a79e:	cc11                	beqz	s0,8001a7ba <load_access_fault_7+0x142>
    8001a7a0:	6498                	ld	a4,8(s1)
    8001a7a2:	4795                	li	a5,5
    TEST_END();
    8001a7a4:	00018597          	auipc	a1,0x18
    8001a7a8:	f0458593          	addi	a1,a1,-252 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a7ac:	00f70763          	beq	a4,a5,8001a7ba <load_access_fault_7+0x142>
    8001a7b0:	4401                	li	s0,0
    TEST_END();
    8001a7b2:	00018597          	auipc	a1,0x18
    8001a7b6:	f0658593          	addi	a1,a1,-250 # 800326b8 <__func__.0+0x2d0>
    8001a7ba:	00018517          	auipc	a0,0x18
    8001a7be:	fa650513          	addi	a0,a0,-90 # 80032760 <__func__.0+0x378>
    8001a7c2:	503140ef          	jal	8002f4c4 <printf>
    8001a7c6:	4511                	li	a0,4
    8001a7c8:	f4ce60ef          	jal	80000f14 <goto_priv>
    8001a7cc:	fabe60ef          	jal	80001776 <reset_state>
}
    8001a7d0:	60e2                	ld	ra,24(sp)
    8001a7d2:	8522                	mv	a0,s0
    8001a7d4:	6442                	ld	s0,16(sp)
    8001a7d6:	64a2                	ld	s1,8(sp)
    8001a7d8:	6105                	addi	sp,sp,32
    8001a7da:	8082                	ret

000000008001a7dc <load_access_fault_8>:

bool load_access_fault_8(){
    8001a7dc:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a7de:	00017597          	auipc	a1,0x17
    8001a7e2:	aea58593          	addi	a1,a1,-1302 # 800312c8 <__func__.33>
    8001a7e6:	00018517          	auipc	a0,0x18
    8001a7ea:	ee250513          	addi	a0,a0,-286 # 800326c8 <__func__.0+0x2e0>
bool load_access_fault_8(){
    8001a7ee:	ec06                	sd	ra,24(sp)
    8001a7f0:	e822                	sd	s0,16(sp)
    8001a7f2:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a7f4:	4d1140ef          	jal	8002f4c4 <printf>
    8001a7f8:	4529                	li	a0,10
    8001a7fa:	1b9130ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001a7fe:	4511                	li	a0,4
    8001a800:	f14e60ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a804:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a808:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a80c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a810:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a814:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a818:	10000793          	li	a5,256
    8001a81c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a820:	20000793          	li	a5,512
    8001a824:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a828:	40000793          	li	a5,1024
    8001a82c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a830:	6785                	lui	a5,0x1
    8001a832:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a836:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a83a:	4785                	li	a5,1
    8001a83c:	07fe                	slli	a5,a5,0x1f
    8001a83e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a842:	08100793          	li	a5,129
    8001a846:	07e2                	slli	a5,a5,0x18
    8001a848:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a84c:	08000793          	li	a5,128
    8001a850:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a854:	67a1                	lui	a5,0x8
    8001a856:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a85a:	4501                	li	a0,0
    8001a85c:	eb8e60ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a860:	db8e60ef          	jal	80000e18 <test_setup_except_function>
    8001a864:	4785                	li	a5,1
    8001a866:	1786                	slli	a5,a5,0x21
    8001a868:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a86c:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a870:	08c00593          	li	a1,140
    8001a874:	0001e617          	auipc	a2,0x1e
    8001a878:	53c60613          	addi	a2,a2,1340 # 80038db0 <__func__.0+0x69c8>
    8001a87c:	00018517          	auipc	a0,0x18
    8001a880:	e6450513          	addi	a0,a0,-412 # 800326e0 <__func__.0+0x2f8>
    8001a884:	441140ef          	jal	8002f4c4 <printf>
    8001a888:	00041797          	auipc	a5,0x41
    8001a88c:	7897c783          	lbu	a5,1929(a5) # 8005c011 <excpt+0x1>
    8001a890:	00041497          	auipc	s1,0x41
    8001a894:	78048493          	addi	s1,s1,1920 # 8005c010 <excpt>
    8001a898:	00018597          	auipc	a1,0x18
    8001a89c:	e2058593          	addi	a1,a1,-480 # 800326b8 <__func__.0+0x2d0>
    8001a8a0:	cf89                	beqz	a5,8001a8ba <load_access_fault_8+0xde>
    8001a8a2:	6498                	ld	a4,8(s1)
    8001a8a4:	4795                	li	a5,5
    8001a8a6:	00018597          	auipc	a1,0x18
    8001a8aa:	e0258593          	addi	a1,a1,-510 # 800326a8 <__func__.0+0x2c0>
    8001a8ae:	00f70663          	beq	a4,a5,8001a8ba <load_access_fault_8+0xde>
    8001a8b2:	00018597          	auipc	a1,0x18
    8001a8b6:	e0658593          	addi	a1,a1,-506 # 800326b8 <__func__.0+0x2d0>
    8001a8ba:	00018517          	auipc	a0,0x18
    8001a8be:	e3e50513          	addi	a0,a0,-450 # 800326f8 <__func__.0+0x310>
    8001a8c2:	403140ef          	jal	8002f4c4 <printf>
    8001a8c6:	00041797          	auipc	a5,0x41
    8001a8ca:	74b7c783          	lbu	a5,1867(a5) # 8005c011 <excpt+0x1>
    8001a8ce:	c789                	beqz	a5,8001a8d8 <load_access_fault_8+0xfc>
    8001a8d0:	6498                	ld	a4,8(s1)
    8001a8d2:	4795                	li	a5,5
    8001a8d4:	00f70c63          	beq	a4,a5,8001a8ec <load_access_fault_8+0x110>
    8001a8d8:	00018517          	auipc	a0,0x18
    8001a8dc:	e2850513          	addi	a0,a0,-472 # 80032700 <__func__.0+0x318>
    8001a8e0:	3e5140ef          	jal	8002f4c4 <printf>
    8001a8e4:	02900513          	li	a0,41
    8001a8e8:	0cb130ef          	jal	8002e1b2 <putchar>
    8001a8ec:	4529                	li	a0,10
    8001a8ee:	0c5130ef          	jal	8002e1b2 <putchar>
    8001a8f2:	00041417          	auipc	s0,0x41
    8001a8f6:	71f44403          	lbu	s0,1823(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a8fa:	00018597          	auipc	a1,0x18
    8001a8fe:	dbe58593          	addi	a1,a1,-578 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a902:	cc11                	beqz	s0,8001a91e <load_access_fault_8+0x142>
    8001a904:	6498                	ld	a4,8(s1)
    8001a906:	4795                	li	a5,5
    TEST_END();
    8001a908:	00018597          	auipc	a1,0x18
    8001a90c:	da058593          	addi	a1,a1,-608 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a910:	00f70763          	beq	a4,a5,8001a91e <load_access_fault_8+0x142>
    8001a914:	4401                	li	s0,0
    TEST_END();
    8001a916:	00018597          	auipc	a1,0x18
    8001a91a:	da258593          	addi	a1,a1,-606 # 800326b8 <__func__.0+0x2d0>
    8001a91e:	00018517          	auipc	a0,0x18
    8001a922:	e4250513          	addi	a0,a0,-446 # 80032760 <__func__.0+0x378>
    8001a926:	39f140ef          	jal	8002f4c4 <printf>
    8001a92a:	4511                	li	a0,4
    8001a92c:	de8e60ef          	jal	80000f14 <goto_priv>
    8001a930:	e47e60ef          	jal	80001776 <reset_state>
}
    8001a934:	60e2                	ld	ra,24(sp)
    8001a936:	8522                	mv	a0,s0
    8001a938:	6442                	ld	s0,16(sp)
    8001a93a:	64a2                	ld	s1,8(sp)
    8001a93c:	6105                	addi	sp,sp,32
    8001a93e:	8082                	ret

000000008001a940 <load_access_fault_9>:

bool load_access_fault_9(){
    8001a940:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a942:	00017597          	auipc	a1,0x17
    8001a946:	99e58593          	addi	a1,a1,-1634 # 800312e0 <__func__.32>
    8001a94a:	00018517          	auipc	a0,0x18
    8001a94e:	d7e50513          	addi	a0,a0,-642 # 800326c8 <__func__.0+0x2e0>
bool load_access_fault_9(){
    8001a952:	ec06                	sd	ra,24(sp)
    8001a954:	e822                	sd	s0,16(sp)
    8001a956:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a958:	36d140ef          	jal	8002f4c4 <printf>
    8001a95c:	4529                	li	a0,10
    8001a95e:	055130ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001a962:	4511                	li	a0,4
    8001a964:	db0e60ef          	jal	80000f14 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a968:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a96c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a970:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a974:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a978:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a97c:	10000793          	li	a5,256
    8001a980:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a984:	20000793          	li	a5,512
    8001a988:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a98c:	40000793          	li	a5,1024
    8001a990:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a994:	6785                	lui	a5,0x1
    8001a996:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a99a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a99e:	4785                	li	a5,1
    8001a9a0:	07fe                	slli	a5,a5,0x1f
    8001a9a2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a9a6:	08100793          	li	a5,129
    8001a9aa:	07e2                	slli	a5,a5,0x18
    8001a9ac:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a9b0:	08000793          	li	a5,128
    8001a9b4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a9b8:	67a1                	lui	a5,0x8
    8001a9ba:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a9be:	4501                	li	a0,0
    8001a9c0:	d54e60ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a9c4:	c54e60ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001a9c8:	4785                	li	a5,1
    8001a9ca:	178e                	slli	a5,a5,0x23
    8001a9cc:	17e1                	addi	a5,a5,-8 # 7ff8 <_test_table_size+0x7ff7>
    8001a9ce:	0007b783          	ld	a5,0(a5)
    
    ld(0x1fffffffeUL << 2);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001a9d2:	08c00593          	li	a1,140
    8001a9d6:	0001e617          	auipc	a2,0x1e
    8001a9da:	41260613          	addi	a2,a2,1042 # 80038de8 <__func__.0+0x6a00>
    8001a9de:	00018517          	auipc	a0,0x18
    8001a9e2:	d0250513          	addi	a0,a0,-766 # 800326e0 <__func__.0+0x2f8>
    8001a9e6:	2df140ef          	jal	8002f4c4 <printf>
    8001a9ea:	00041797          	auipc	a5,0x41
    8001a9ee:	6277c783          	lbu	a5,1575(a5) # 8005c011 <excpt+0x1>
    8001a9f2:	00041497          	auipc	s1,0x41
    8001a9f6:	61e48493          	addi	s1,s1,1566 # 8005c010 <excpt>
    8001a9fa:	00018597          	auipc	a1,0x18
    8001a9fe:	cbe58593          	addi	a1,a1,-834 # 800326b8 <__func__.0+0x2d0>
    8001aa02:	cf89                	beqz	a5,8001aa1c <load_access_fault_9+0xdc>
    8001aa04:	6498                	ld	a4,8(s1)
    8001aa06:	4795                	li	a5,5
    8001aa08:	00018597          	auipc	a1,0x18
    8001aa0c:	ca058593          	addi	a1,a1,-864 # 800326a8 <__func__.0+0x2c0>
    8001aa10:	00f70663          	beq	a4,a5,8001aa1c <load_access_fault_9+0xdc>
    8001aa14:	00018597          	auipc	a1,0x18
    8001aa18:	ca458593          	addi	a1,a1,-860 # 800326b8 <__func__.0+0x2d0>
    8001aa1c:	00018517          	auipc	a0,0x18
    8001aa20:	cdc50513          	addi	a0,a0,-804 # 800326f8 <__func__.0+0x310>
    8001aa24:	2a1140ef          	jal	8002f4c4 <printf>
    8001aa28:	00041797          	auipc	a5,0x41
    8001aa2c:	5e97c783          	lbu	a5,1513(a5) # 8005c011 <excpt+0x1>
    8001aa30:	c789                	beqz	a5,8001aa3a <load_access_fault_9+0xfa>
    8001aa32:	6498                	ld	a4,8(s1)
    8001aa34:	4795                	li	a5,5
    8001aa36:	00f70c63          	beq	a4,a5,8001aa4e <load_access_fault_9+0x10e>
    8001aa3a:	00018517          	auipc	a0,0x18
    8001aa3e:	cc650513          	addi	a0,a0,-826 # 80032700 <__func__.0+0x318>
    8001aa42:	283140ef          	jal	8002f4c4 <printf>
    8001aa46:	02900513          	li	a0,41
    8001aa4a:	768130ef          	jal	8002e1b2 <putchar>
    8001aa4e:	4529                	li	a0,10
    8001aa50:	762130ef          	jal	8002e1b2 <putchar>
    8001aa54:	00041417          	auipc	s0,0x41
    8001aa58:	5bd44403          	lbu	s0,1469(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001aa5c:	00018597          	auipc	a1,0x18
    8001aa60:	c5c58593          	addi	a1,a1,-932 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001aa64:	cc11                	beqz	s0,8001aa80 <load_access_fault_9+0x140>
    8001aa66:	6498                	ld	a4,8(s1)
    8001aa68:	4795                	li	a5,5
    TEST_END();
    8001aa6a:	00018597          	auipc	a1,0x18
    8001aa6e:	c3e58593          	addi	a1,a1,-962 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001aa72:	00f70763          	beq	a4,a5,8001aa80 <load_access_fault_9+0x140>
    8001aa76:	4401                	li	s0,0
    TEST_END();
    8001aa78:	00018597          	auipc	a1,0x18
    8001aa7c:	c4058593          	addi	a1,a1,-960 # 800326b8 <__func__.0+0x2d0>
    8001aa80:	00018517          	auipc	a0,0x18
    8001aa84:	ce050513          	addi	a0,a0,-800 # 80032760 <__func__.0+0x378>
    8001aa88:	23d140ef          	jal	8002f4c4 <printf>
    8001aa8c:	4511                	li	a0,4
    8001aa8e:	c86e60ef          	jal	80000f14 <goto_priv>
    8001aa92:	ce5e60ef          	jal	80001776 <reset_state>
}
    8001aa96:	60e2                	ld	ra,24(sp)
    8001aa98:	8522                	mv	a0,s0
    8001aa9a:	6442                	ld	s0,16(sp)
    8001aa9c:	64a2                	ld	s1,8(sp)
    8001aa9e:	6105                	addi	sp,sp,32
    8001aaa0:	8082                	ret

000000008001aaa2 <load_access_fault_10>:

bool load_access_fault_10(){
    8001aaa2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001aaa4:	00017597          	auipc	a1,0x17
    8001aaa8:	85458593          	addi	a1,a1,-1964 # 800312f8 <__func__.31>
    8001aaac:	00018517          	auipc	a0,0x18
    8001aab0:	c1c50513          	addi	a0,a0,-996 # 800326c8 <__func__.0+0x2e0>
bool load_access_fault_10(){
    8001aab4:	ec06                	sd	ra,24(sp)
    8001aab6:	e822                	sd	s0,16(sp)
    8001aab8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001aaba:	20b140ef          	jal	8002f4c4 <printf>
    8001aabe:	4529                	li	a0,10
    8001aac0:	6f2130ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001aac4:	4511                	li	a0,4
    8001aac6:	c4ee60ef          	jal	80000f14 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001aaca:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001aace:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001aad2:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001aad6:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001aada:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001aade:	4785                	li	a5,1
    8001aae0:	07fe                	slli	a5,a5,0x1f
    8001aae2:	3b079073          	csrw	pmpaddr0,a5
    
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001aae6:	08000793          	li	a5,128
    8001aaea:	3a07a073          	csrs	pmpcfg0,a5

    printf("pmpcfg0=%llx \n",CSRR(CSR_PMPCFG0));
    8001aaee:	3a0025f3          	csrr	a1,pmpcfg0
    8001aaf2:	0001e517          	auipc	a0,0x1e
    8001aaf6:	36650513          	addi	a0,a0,870 # 80038e58 <__func__.0+0x6a70>
    8001aafa:	1cb140ef          	jal	8002f4c4 <printf>
    printf("pmpcfg2=%llx \n",CSRR(CSR_PMPCFG2));
    8001aafe:	3a2025f3          	csrr	a1,pmpcfg2
    8001ab02:	0001e517          	auipc	a0,0x1e
    8001ab06:	36650513          	addi	a0,a0,870 # 80038e68 <__func__.0+0x6a80>
    8001ab0a:	1bb140ef          	jal	8002f4c4 <printf>


    goto_priv(PRIV_HS);
    8001ab0e:	450d                	li	a0,3
    8001ab10:	c04e60ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ab14:	b04e60ef          	jal	80000e18 <test_setup_except_function>
    8001ab18:	08f00793          	li	a5,143
    8001ab1c:	07ea                	slli	a5,a5,0x1a
    8001ab1e:	0007b783          	ld	a5,0(a5)

    ld(0x8f000000UL << 2);

    printf("%d\n",excpt.triggered);
    8001ab22:	00041597          	auipc	a1,0x41
    8001ab26:	4ef5c583          	lbu	a1,1263(a1) # 8005c011 <excpt+0x1>
    8001ab2a:	00018517          	auipc	a0,0x18
    8001ab2e:	71e50513          	addi	a0,a0,1822 # 80033248 <__func__.0+0xe60>
    8001ab32:	00041417          	auipc	s0,0x41
    8001ab36:	4de40413          	addi	s0,s0,1246 # 8005c010 <excpt>
    8001ab3a:	18b140ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.cause);
    8001ab3e:	640c                	ld	a1,8(s0)
    8001ab40:	00018517          	auipc	a0,0x18
    8001ab44:	70850513          	addi	a0,a0,1800 # 80033248 <__func__.0+0xe60>
    8001ab48:	17d140ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001ab4c:	08c00593          	li	a1,140
    8001ab50:	0001e617          	auipc	a2,0x1e
    8001ab54:	32860613          	addi	a2,a2,808 # 80038e78 <__func__.0+0x6a90>
    8001ab58:	00018517          	auipc	a0,0x18
    8001ab5c:	b8850513          	addi	a0,a0,-1144 # 800326e0 <__func__.0+0x2f8>
    8001ab60:	165140ef          	jal	8002f4c4 <printf>
    8001ab64:	00041797          	auipc	a5,0x41
    8001ab68:	4ad7c783          	lbu	a5,1197(a5) # 8005c011 <excpt+0x1>
    8001ab6c:	00018597          	auipc	a1,0x18
    8001ab70:	b4c58593          	addi	a1,a1,-1204 # 800326b8 <__func__.0+0x2d0>
    8001ab74:	cf89                	beqz	a5,8001ab8e <load_access_fault_10+0xec>
    8001ab76:	6418                	ld	a4,8(s0)
    8001ab78:	4795                	li	a5,5
    8001ab7a:	00018597          	auipc	a1,0x18
    8001ab7e:	b2e58593          	addi	a1,a1,-1234 # 800326a8 <__func__.0+0x2c0>
    8001ab82:	00f70663          	beq	a4,a5,8001ab8e <load_access_fault_10+0xec>
    8001ab86:	00018597          	auipc	a1,0x18
    8001ab8a:	b3258593          	addi	a1,a1,-1230 # 800326b8 <__func__.0+0x2d0>
    8001ab8e:	00018517          	auipc	a0,0x18
    8001ab92:	b6a50513          	addi	a0,a0,-1174 # 800326f8 <__func__.0+0x310>
    8001ab96:	12f140ef          	jal	8002f4c4 <printf>
    8001ab9a:	00041797          	auipc	a5,0x41
    8001ab9e:	4777c783          	lbu	a5,1143(a5) # 8005c011 <excpt+0x1>
    8001aba2:	c789                	beqz	a5,8001abac <load_access_fault_10+0x10a>
    8001aba4:	6418                	ld	a4,8(s0)
    8001aba6:	4795                	li	a5,5
    8001aba8:	00f70c63          	beq	a4,a5,8001abc0 <load_access_fault_10+0x11e>
    8001abac:	00018517          	auipc	a0,0x18
    8001abb0:	b5450513          	addi	a0,a0,-1196 # 80032700 <__func__.0+0x318>
    8001abb4:	111140ef          	jal	8002f4c4 <printf>
    8001abb8:	02900513          	li	a0,41
    8001abbc:	5f6130ef          	jal	8002e1b2 <putchar>
    8001abc0:	4529                	li	a0,10
    8001abc2:	5f0130ef          	jal	8002e1b2 <putchar>
    8001abc6:	00041497          	auipc	s1,0x41
    8001abca:	44b4c483          	lbu	s1,1099(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001abce:	00018597          	auipc	a1,0x18
    8001abd2:	aea58593          	addi	a1,a1,-1302 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001abd6:	cc91                	beqz	s1,8001abf2 <load_access_fault_10+0x150>
    8001abd8:	6418                	ld	a4,8(s0)
    8001abda:	4795                	li	a5,5
    TEST_END();
    8001abdc:	00018597          	auipc	a1,0x18
    8001abe0:	acc58593          	addi	a1,a1,-1332 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001abe4:	00f70763          	beq	a4,a5,8001abf2 <load_access_fault_10+0x150>
    8001abe8:	4481                	li	s1,0
    TEST_END();
    8001abea:	00018597          	auipc	a1,0x18
    8001abee:	ace58593          	addi	a1,a1,-1330 # 800326b8 <__func__.0+0x2d0>
    8001abf2:	00018517          	auipc	a0,0x18
    8001abf6:	b6e50513          	addi	a0,a0,-1170 # 80032760 <__func__.0+0x378>
    8001abfa:	0cb140ef          	jal	8002f4c4 <printf>
    8001abfe:	4511                	li	a0,4
    8001ac00:	b14e60ef          	jal	80000f14 <goto_priv>
    8001ac04:	b73e60ef          	jal	80001776 <reset_state>
}
    8001ac08:	60e2                	ld	ra,24(sp)
    8001ac0a:	6442                	ld	s0,16(sp)
    8001ac0c:	8526                	mv	a0,s1
    8001ac0e:	64a2                	ld	s1,8(sp)
    8001ac10:	6105                	addi	sp,sp,32
    8001ac12:	8082                	ret

000000008001ac14 <store_access_fault_1>:


bool store_access_fault_1(){
    8001ac14:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ac16:	00016597          	auipc	a1,0x16
    8001ac1a:	6fa58593          	addi	a1,a1,1786 # 80031310 <__func__.30>
    8001ac1e:	00018517          	auipc	a0,0x18
    8001ac22:	aaa50513          	addi	a0,a0,-1366 # 800326c8 <__func__.0+0x2e0>
bool store_access_fault_1(){
    8001ac26:	ec06                	sd	ra,24(sp)
    8001ac28:	e822                	sd	s0,16(sp)
    8001ac2a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ac2c:	099140ef          	jal	8002f4c4 <printf>
    8001ac30:	4529                	li	a0,10
    8001ac32:	580130ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001ac36:	4511                	li	a0,4
    8001ac38:	adce60ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ac3c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ac40:	10000793          	li	a5,256
    8001ac44:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ac48:	20000793          	li	a5,512
    8001ac4c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ac50:	40000793          	li	a5,1024
    8001ac54:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ac58:	6785                	lui	a5,0x1
    8001ac5a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ac5e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ac62:	4785                	li	a5,1
    8001ac64:	07fe                	slli	a5,a5,0x1f
    8001ac66:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ac6a:	08100793          	li	a5,129
    8001ac6e:	07e2                	slli	a5,a5,0x18
    8001ac70:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ac74:	67a1                	lui	a5,0x8
    8001ac76:	3a07a073          	csrs	pmpcfg0,a5
    asm volatile ("sfence.vma \n\t");
    8001ac7a:	12000073          	sfence.vma
    asm volatile(
    8001ac7e:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8001ac82:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
    TEST_SETUP_EXCEPT();
    8001ac86:	992e60ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8001ac8a:	4785                	li	a5,1
    8001ac8c:	1786                	slli	a5,a5,0x21
    8001ac8e:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001ac92:	4701                	li	a4,0
    8001ac94:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2 , 0x0);

    printf("%d\n",excpt.triggered);
    8001ac98:	00041597          	auipc	a1,0x41
    8001ac9c:	3795c583          	lbu	a1,889(a1) # 8005c011 <excpt+0x1>
    8001aca0:	00018517          	auipc	a0,0x18
    8001aca4:	5a850513          	addi	a0,a0,1448 # 80033248 <__func__.0+0xe60>
    8001aca8:	00041417          	auipc	s0,0x41
    8001acac:	36840413          	addi	s0,s0,872 # 8005c010 <excpt>
    8001acb0:	015140ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.cause);
    8001acb4:	640c                	ld	a1,8(s0)
    8001acb6:	00018517          	auipc	a0,0x18
    8001acba:	59250513          	addi	a0,a0,1426 # 80033248 <__func__.0+0xe60>
    8001acbe:	007140ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001acc2:	08c00593          	li	a1,140
    8001acc6:	0001e617          	auipc	a2,0x1e
    8001acca:	21260613          	addi	a2,a2,530 # 80038ed8 <__func__.0+0x6af0>
    8001acce:	00018517          	auipc	a0,0x18
    8001acd2:	a1250513          	addi	a0,a0,-1518 # 800326e0 <__func__.0+0x2f8>
    8001acd6:	7ee140ef          	jal	8002f4c4 <printf>
    8001acda:	00041797          	auipc	a5,0x41
    8001acde:	3377c783          	lbu	a5,823(a5) # 8005c011 <excpt+0x1>
    8001ace2:	00018597          	auipc	a1,0x18
    8001ace6:	9d658593          	addi	a1,a1,-1578 # 800326b8 <__func__.0+0x2d0>
    8001acea:	cf89                	beqz	a5,8001ad04 <store_access_fault_1+0xf0>
    8001acec:	6418                	ld	a4,8(s0)
    8001acee:	479d                	li	a5,7
    8001acf0:	00018597          	auipc	a1,0x18
    8001acf4:	9b858593          	addi	a1,a1,-1608 # 800326a8 <__func__.0+0x2c0>
    8001acf8:	00f70663          	beq	a4,a5,8001ad04 <store_access_fault_1+0xf0>
    8001acfc:	00018597          	auipc	a1,0x18
    8001ad00:	9bc58593          	addi	a1,a1,-1604 # 800326b8 <__func__.0+0x2d0>
    8001ad04:	00018517          	auipc	a0,0x18
    8001ad08:	9f450513          	addi	a0,a0,-1548 # 800326f8 <__func__.0+0x310>
    8001ad0c:	7b8140ef          	jal	8002f4c4 <printf>
    8001ad10:	00041797          	auipc	a5,0x41
    8001ad14:	3017c783          	lbu	a5,769(a5) # 8005c011 <excpt+0x1>
    8001ad18:	c789                	beqz	a5,8001ad22 <store_access_fault_1+0x10e>
    8001ad1a:	6418                	ld	a4,8(s0)
    8001ad1c:	479d                	li	a5,7
    8001ad1e:	00f70c63          	beq	a4,a5,8001ad36 <store_access_fault_1+0x122>
    8001ad22:	00018517          	auipc	a0,0x18
    8001ad26:	9de50513          	addi	a0,a0,-1570 # 80032700 <__func__.0+0x318>
    8001ad2a:	79a140ef          	jal	8002f4c4 <printf>
    8001ad2e:	02900513          	li	a0,41
    8001ad32:	480130ef          	jal	8002e1b2 <putchar>
    8001ad36:	4529                	li	a0,10
    8001ad38:	47a130ef          	jal	8002e1b2 <putchar>
    8001ad3c:	00041497          	auipc	s1,0x41
    8001ad40:	2d54c483          	lbu	s1,725(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001ad44:	00018597          	auipc	a1,0x18
    8001ad48:	97458593          	addi	a1,a1,-1676 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ad4c:	cc91                	beqz	s1,8001ad68 <store_access_fault_1+0x154>
    8001ad4e:	6418                	ld	a4,8(s0)
    8001ad50:	479d                	li	a5,7
    TEST_END();
    8001ad52:	00018597          	auipc	a1,0x18
    8001ad56:	95658593          	addi	a1,a1,-1706 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ad5a:	00f70763          	beq	a4,a5,8001ad68 <store_access_fault_1+0x154>
    8001ad5e:	4481                	li	s1,0
    TEST_END();
    8001ad60:	00018597          	auipc	a1,0x18
    8001ad64:	95858593          	addi	a1,a1,-1704 # 800326b8 <__func__.0+0x2d0>
    8001ad68:	00018517          	auipc	a0,0x18
    8001ad6c:	9f850513          	addi	a0,a0,-1544 # 80032760 <__func__.0+0x378>
    8001ad70:	754140ef          	jal	8002f4c4 <printf>
    8001ad74:	4511                	li	a0,4
    8001ad76:	99ee60ef          	jal	80000f14 <goto_priv>
    8001ad7a:	9fde60ef          	jal	80001776 <reset_state>
}
    8001ad7e:	60e2                	ld	ra,24(sp)
    8001ad80:	6442                	ld	s0,16(sp)
    8001ad82:	8526                	mv	a0,s1
    8001ad84:	64a2                	ld	s1,8(sp)
    8001ad86:	6105                	addi	sp,sp,32
    8001ad88:	8082                	ret

000000008001ad8a <store_access_fault_2>:

bool store_access_fault_2(){
    8001ad8a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ad8c:	00016597          	auipc	a1,0x16
    8001ad90:	59c58593          	addi	a1,a1,1436 # 80031328 <__func__.29>
    8001ad94:	00018517          	auipc	a0,0x18
    8001ad98:	93450513          	addi	a0,a0,-1740 # 800326c8 <__func__.0+0x2e0>
bool store_access_fault_2(){
    8001ad9c:	ec06                	sd	ra,24(sp)
    8001ad9e:	e822                	sd	s0,16(sp)
    8001ada0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ada2:	722140ef          	jal	8002f4c4 <printf>
    8001ada6:	4529                	li	a0,10
    8001ada8:	40a130ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001adac:	4511                	li	a0,4
    8001adae:	966e60ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001adb2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001adb6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001adba:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001adbe:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001adc2:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001adc6:	10000793          	li	a5,256
    8001adca:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001adce:	20000793          	li	a5,512
    8001add2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001add6:	40000793          	li	a5,1024
    8001adda:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001adde:	6785                	lui	a5,0x1
    8001ade0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ade4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ade8:	4785                	li	a5,1
    8001adea:	07fe                	slli	a5,a5,0x1f
    8001adec:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001adf0:	08100793          	li	a5,129
    8001adf4:	07e2                	slli	a5,a5,0x18
    8001adf6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001adfa:	08000793          	li	a5,128
    8001adfe:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ae02:	67a1                	lui	a5,0x8
    8001ae04:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001ae08:	450d                	li	a0,3
    8001ae0a:	90ae60ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ae0e:	80ae60ef          	jal	80000e18 <test_setup_except_function>
    8001ae12:	4785                	li	a5,1
    8001ae14:	1786                	slli	a5,a5,0x21
    8001ae16:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001ae1a:	4701                	li	a4,0
    8001ae1c:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ae20:	08c00593          	li	a1,140
    8001ae24:	0001e617          	auipc	a2,0x1e
    8001ae28:	0ec60613          	addi	a2,a2,236 # 80038f10 <__func__.0+0x6b28>
    8001ae2c:	00018517          	auipc	a0,0x18
    8001ae30:	8b450513          	addi	a0,a0,-1868 # 800326e0 <__func__.0+0x2f8>
    8001ae34:	690140ef          	jal	8002f4c4 <printf>
    8001ae38:	00041797          	auipc	a5,0x41
    8001ae3c:	1d97c783          	lbu	a5,473(a5) # 8005c011 <excpt+0x1>
    8001ae40:	00041497          	auipc	s1,0x41
    8001ae44:	1d048493          	addi	s1,s1,464 # 8005c010 <excpt>
    8001ae48:	00018597          	auipc	a1,0x18
    8001ae4c:	87058593          	addi	a1,a1,-1936 # 800326b8 <__func__.0+0x2d0>
    8001ae50:	cf89                	beqz	a5,8001ae6a <store_access_fault_2+0xe0>
    8001ae52:	6498                	ld	a4,8(s1)
    8001ae54:	479d                	li	a5,7
    8001ae56:	00018597          	auipc	a1,0x18
    8001ae5a:	85258593          	addi	a1,a1,-1966 # 800326a8 <__func__.0+0x2c0>
    8001ae5e:	00f70663          	beq	a4,a5,8001ae6a <store_access_fault_2+0xe0>
    8001ae62:	00018597          	auipc	a1,0x18
    8001ae66:	85658593          	addi	a1,a1,-1962 # 800326b8 <__func__.0+0x2d0>
    8001ae6a:	00018517          	auipc	a0,0x18
    8001ae6e:	88e50513          	addi	a0,a0,-1906 # 800326f8 <__func__.0+0x310>
    8001ae72:	652140ef          	jal	8002f4c4 <printf>
    8001ae76:	00041797          	auipc	a5,0x41
    8001ae7a:	19b7c783          	lbu	a5,411(a5) # 8005c011 <excpt+0x1>
    8001ae7e:	c789                	beqz	a5,8001ae88 <store_access_fault_2+0xfe>
    8001ae80:	6498                	ld	a4,8(s1)
    8001ae82:	479d                	li	a5,7
    8001ae84:	00f70c63          	beq	a4,a5,8001ae9c <store_access_fault_2+0x112>
    8001ae88:	00018517          	auipc	a0,0x18
    8001ae8c:	87850513          	addi	a0,a0,-1928 # 80032700 <__func__.0+0x318>
    8001ae90:	634140ef          	jal	8002f4c4 <printf>
    8001ae94:	02900513          	li	a0,41
    8001ae98:	31a130ef          	jal	8002e1b2 <putchar>
    8001ae9c:	4529                	li	a0,10
    8001ae9e:	314130ef          	jal	8002e1b2 <putchar>
    8001aea2:	00041417          	auipc	s0,0x41
    8001aea6:	16f44403          	lbu	s0,367(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001aeaa:	00018597          	auipc	a1,0x18
    8001aeae:	80e58593          	addi	a1,a1,-2034 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001aeb2:	cc11                	beqz	s0,8001aece <store_access_fault_2+0x144>
    8001aeb4:	6498                	ld	a4,8(s1)
    8001aeb6:	479d                	li	a5,7
    TEST_END();
    8001aeb8:	00017597          	auipc	a1,0x17
    8001aebc:	7f058593          	addi	a1,a1,2032 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001aec0:	00f70763          	beq	a4,a5,8001aece <store_access_fault_2+0x144>
    8001aec4:	4401                	li	s0,0
    TEST_END();
    8001aec6:	00017597          	auipc	a1,0x17
    8001aeca:	7f258593          	addi	a1,a1,2034 # 800326b8 <__func__.0+0x2d0>
    8001aece:	00018517          	auipc	a0,0x18
    8001aed2:	89250513          	addi	a0,a0,-1902 # 80032760 <__func__.0+0x378>
    8001aed6:	5ee140ef          	jal	8002f4c4 <printf>
    8001aeda:	4511                	li	a0,4
    8001aedc:	838e60ef          	jal	80000f14 <goto_priv>
    8001aee0:	897e60ef          	jal	80001776 <reset_state>
}
    8001aee4:	60e2                	ld	ra,24(sp)
    8001aee6:	8522                	mv	a0,s0
    8001aee8:	6442                	ld	s0,16(sp)
    8001aeea:	64a2                	ld	s1,8(sp)
    8001aeec:	6105                	addi	sp,sp,32
    8001aeee:	8082                	ret

000000008001aef0 <store_access_fault_3>:


bool store_access_fault_3(){
    8001aef0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001aef2:	00016597          	auipc	a1,0x16
    8001aef6:	44e58593          	addi	a1,a1,1102 # 80031340 <__func__.28>
    8001aefa:	00017517          	auipc	a0,0x17
    8001aefe:	7ce50513          	addi	a0,a0,1998 # 800326c8 <__func__.0+0x2e0>
bool store_access_fault_3(){
    8001af02:	ec06                	sd	ra,24(sp)
    8001af04:	e822                	sd	s0,16(sp)
    8001af06:	e426                	sd	s1,8(sp)
    TEST_START();
    8001af08:	5bc140ef          	jal	8002f4c4 <printf>
    8001af0c:	4529                	li	a0,10
    8001af0e:	2a4130ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001af12:	4511                	li	a0,4
    8001af14:	800e60ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001af18:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001af1c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001af20:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001af24:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001af28:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001af2c:	10000793          	li	a5,256
    8001af30:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001af34:	20000793          	li	a5,512
    8001af38:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001af3c:	40000793          	li	a5,1024
    8001af40:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001af44:	6785                	lui	a5,0x1
    8001af46:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001af4a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001af4e:	4785                	li	a5,1
    8001af50:	07fe                	slli	a5,a5,0x1f
    8001af52:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001af56:	08100793          	li	a5,129
    8001af5a:	07e2                	slli	a5,a5,0x18
    8001af5c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001af60:	08000793          	li	a5,128
    8001af64:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001af68:	67a1                	lui	a5,0x8
    8001af6a:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001af6e:	4505                	li	a0,1
    8001af70:	fa5e50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001af74:	ea5e50ef          	jal	80000e18 <test_setup_except_function>
    8001af78:	4785                	li	a5,1
    8001af7a:	1786                	slli	a5,a5,0x21
    8001af7c:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001af80:	4701                	li	a4,0
    8001af82:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001af86:	08c00593          	li	a1,140
    8001af8a:	0001e617          	auipc	a2,0x1e
    8001af8e:	fbe60613          	addi	a2,a2,-66 # 80038f48 <__func__.0+0x6b60>
    8001af92:	00017517          	auipc	a0,0x17
    8001af96:	74e50513          	addi	a0,a0,1870 # 800326e0 <__func__.0+0x2f8>
    8001af9a:	52a140ef          	jal	8002f4c4 <printf>
    8001af9e:	00041797          	auipc	a5,0x41
    8001afa2:	0737c783          	lbu	a5,115(a5) # 8005c011 <excpt+0x1>
    8001afa6:	00041497          	auipc	s1,0x41
    8001afaa:	06a48493          	addi	s1,s1,106 # 8005c010 <excpt>
    8001afae:	00017597          	auipc	a1,0x17
    8001afb2:	70a58593          	addi	a1,a1,1802 # 800326b8 <__func__.0+0x2d0>
    8001afb6:	cf89                	beqz	a5,8001afd0 <store_access_fault_3+0xe0>
    8001afb8:	6498                	ld	a4,8(s1)
    8001afba:	479d                	li	a5,7
    8001afbc:	00017597          	auipc	a1,0x17
    8001afc0:	6ec58593          	addi	a1,a1,1772 # 800326a8 <__func__.0+0x2c0>
    8001afc4:	00f70663          	beq	a4,a5,8001afd0 <store_access_fault_3+0xe0>
    8001afc8:	00017597          	auipc	a1,0x17
    8001afcc:	6f058593          	addi	a1,a1,1776 # 800326b8 <__func__.0+0x2d0>
    8001afd0:	00017517          	auipc	a0,0x17
    8001afd4:	72850513          	addi	a0,a0,1832 # 800326f8 <__func__.0+0x310>
    8001afd8:	4ec140ef          	jal	8002f4c4 <printf>
    8001afdc:	00041797          	auipc	a5,0x41
    8001afe0:	0357c783          	lbu	a5,53(a5) # 8005c011 <excpt+0x1>
    8001afe4:	c789                	beqz	a5,8001afee <store_access_fault_3+0xfe>
    8001afe6:	6498                	ld	a4,8(s1)
    8001afe8:	479d                	li	a5,7
    8001afea:	00f70c63          	beq	a4,a5,8001b002 <store_access_fault_3+0x112>
    8001afee:	00017517          	auipc	a0,0x17
    8001aff2:	71250513          	addi	a0,a0,1810 # 80032700 <__func__.0+0x318>
    8001aff6:	4ce140ef          	jal	8002f4c4 <printf>
    8001affa:	02900513          	li	a0,41
    8001affe:	1b4130ef          	jal	8002e1b2 <putchar>
    8001b002:	4529                	li	a0,10
    8001b004:	1ae130ef          	jal	8002e1b2 <putchar>
    8001b008:	00041417          	auipc	s0,0x41
    8001b00c:	00944403          	lbu	s0,9(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b010:	00017597          	auipc	a1,0x17
    8001b014:	6a858593          	addi	a1,a1,1704 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b018:	cc11                	beqz	s0,8001b034 <store_access_fault_3+0x144>
    8001b01a:	6498                	ld	a4,8(s1)
    8001b01c:	479d                	li	a5,7
    TEST_END();
    8001b01e:	00017597          	auipc	a1,0x17
    8001b022:	68a58593          	addi	a1,a1,1674 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b026:	00f70763          	beq	a4,a5,8001b034 <store_access_fault_3+0x144>
    8001b02a:	4401                	li	s0,0
    TEST_END();
    8001b02c:	00017597          	auipc	a1,0x17
    8001b030:	68c58593          	addi	a1,a1,1676 # 800326b8 <__func__.0+0x2d0>
    8001b034:	00017517          	auipc	a0,0x17
    8001b038:	72c50513          	addi	a0,a0,1836 # 80032760 <__func__.0+0x378>
    8001b03c:	488140ef          	jal	8002f4c4 <printf>
    8001b040:	4511                	li	a0,4
    8001b042:	ed3e50ef          	jal	80000f14 <goto_priv>
    8001b046:	f30e60ef          	jal	80001776 <reset_state>
}
    8001b04a:	60e2                	ld	ra,24(sp)
    8001b04c:	8522                	mv	a0,s0
    8001b04e:	6442                	ld	s0,16(sp)
    8001b050:	64a2                	ld	s1,8(sp)
    8001b052:	6105                	addi	sp,sp,32
    8001b054:	8082                	ret

000000008001b056 <store_access_fault_4>:

bool store_access_fault_4(){
    8001b056:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b058:	00016597          	auipc	a1,0x16
    8001b05c:	30058593          	addi	a1,a1,768 # 80031358 <__func__.27>
    8001b060:	00017517          	auipc	a0,0x17
    8001b064:	66850513          	addi	a0,a0,1640 # 800326c8 <__func__.0+0x2e0>
bool store_access_fault_4(){
    8001b068:	ec06                	sd	ra,24(sp)
    8001b06a:	e822                	sd	s0,16(sp)
    8001b06c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b06e:	456140ef          	jal	8002f4c4 <printf>
    8001b072:	4529                	li	a0,10
    8001b074:	13e130ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001b078:	4511                	li	a0,4
    8001b07a:	e9be50ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b07e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b082:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b086:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b08a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b08e:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b092:	10000793          	li	a5,256
    8001b096:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b09a:	20000793          	li	a5,512
    8001b09e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b0a2:	40000793          	li	a5,1024
    8001b0a6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b0aa:	6785                	lui	a5,0x1
    8001b0ac:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b0b0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b0b4:	4785                	li	a5,1
    8001b0b6:	07fe                	slli	a5,a5,0x1f
    8001b0b8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b0bc:	08100793          	li	a5,129
    8001b0c0:	07e2                	slli	a5,a5,0x18
    8001b0c2:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b0c6:	08000793          	li	a5,128
    8001b0ca:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b0ce:	67a1                	lui	a5,0x8
    8001b0d0:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b0d4:	4501                	li	a0,0
    8001b0d6:	e3fe50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b0da:	d3fe50ef          	jal	80000e18 <test_setup_except_function>
    8001b0de:	4785                	li	a5,1
    8001b0e0:	1786                	slli	a5,a5,0x21
    8001b0e2:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b0e6:	4701                	li	a4,0
    8001b0e8:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b0ec:	08c00593          	li	a1,140
    8001b0f0:	0001e617          	auipc	a2,0x1e
    8001b0f4:	e9060613          	addi	a2,a2,-368 # 80038f80 <__func__.0+0x6b98>
    8001b0f8:	00017517          	auipc	a0,0x17
    8001b0fc:	5e850513          	addi	a0,a0,1512 # 800326e0 <__func__.0+0x2f8>
    8001b100:	3c4140ef          	jal	8002f4c4 <printf>
    8001b104:	00041797          	auipc	a5,0x41
    8001b108:	f0d7c783          	lbu	a5,-243(a5) # 8005c011 <excpt+0x1>
    8001b10c:	00041497          	auipc	s1,0x41
    8001b110:	f0448493          	addi	s1,s1,-252 # 8005c010 <excpt>
    8001b114:	00017597          	auipc	a1,0x17
    8001b118:	5a458593          	addi	a1,a1,1444 # 800326b8 <__func__.0+0x2d0>
    8001b11c:	cf89                	beqz	a5,8001b136 <store_access_fault_4+0xe0>
    8001b11e:	6498                	ld	a4,8(s1)
    8001b120:	479d                	li	a5,7
    8001b122:	00017597          	auipc	a1,0x17
    8001b126:	58658593          	addi	a1,a1,1414 # 800326a8 <__func__.0+0x2c0>
    8001b12a:	00f70663          	beq	a4,a5,8001b136 <store_access_fault_4+0xe0>
    8001b12e:	00017597          	auipc	a1,0x17
    8001b132:	58a58593          	addi	a1,a1,1418 # 800326b8 <__func__.0+0x2d0>
    8001b136:	00017517          	auipc	a0,0x17
    8001b13a:	5c250513          	addi	a0,a0,1474 # 800326f8 <__func__.0+0x310>
    8001b13e:	386140ef          	jal	8002f4c4 <printf>
    8001b142:	00041797          	auipc	a5,0x41
    8001b146:	ecf7c783          	lbu	a5,-305(a5) # 8005c011 <excpt+0x1>
    8001b14a:	c789                	beqz	a5,8001b154 <store_access_fault_4+0xfe>
    8001b14c:	6498                	ld	a4,8(s1)
    8001b14e:	479d                	li	a5,7
    8001b150:	00f70c63          	beq	a4,a5,8001b168 <store_access_fault_4+0x112>
    8001b154:	00017517          	auipc	a0,0x17
    8001b158:	5ac50513          	addi	a0,a0,1452 # 80032700 <__func__.0+0x318>
    8001b15c:	368140ef          	jal	8002f4c4 <printf>
    8001b160:	02900513          	li	a0,41
    8001b164:	04e130ef          	jal	8002e1b2 <putchar>
    8001b168:	4529                	li	a0,10
    8001b16a:	048130ef          	jal	8002e1b2 <putchar>
    8001b16e:	00041417          	auipc	s0,0x41
    8001b172:	ea344403          	lbu	s0,-349(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b176:	00017597          	auipc	a1,0x17
    8001b17a:	54258593          	addi	a1,a1,1346 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b17e:	cc11                	beqz	s0,8001b19a <store_access_fault_4+0x144>
    8001b180:	6498                	ld	a4,8(s1)
    8001b182:	479d                	li	a5,7
    TEST_END();
    8001b184:	00017597          	auipc	a1,0x17
    8001b188:	52458593          	addi	a1,a1,1316 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b18c:	00f70763          	beq	a4,a5,8001b19a <store_access_fault_4+0x144>
    8001b190:	4401                	li	s0,0
    TEST_END();
    8001b192:	00017597          	auipc	a1,0x17
    8001b196:	52658593          	addi	a1,a1,1318 # 800326b8 <__func__.0+0x2d0>
    8001b19a:	00017517          	auipc	a0,0x17
    8001b19e:	5c650513          	addi	a0,a0,1478 # 80032760 <__func__.0+0x378>
    8001b1a2:	322140ef          	jal	8002f4c4 <printf>
    8001b1a6:	4511                	li	a0,4
    8001b1a8:	d6de50ef          	jal	80000f14 <goto_priv>
    8001b1ac:	dcae60ef          	jal	80001776 <reset_state>
}
    8001b1b0:	60e2                	ld	ra,24(sp)
    8001b1b2:	8522                	mv	a0,s0
    8001b1b4:	6442                	ld	s0,16(sp)
    8001b1b6:	64a2                	ld	s1,8(sp)
    8001b1b8:	6105                	addi	sp,sp,32
    8001b1ba:	8082                	ret

000000008001b1bc <store_access_fault_5>:

bool store_access_fault_5(){
    8001b1bc:	1141                	addi	sp,sp,-16

    TEST_START();
    8001b1be:	00016597          	auipc	a1,0x16
    8001b1c2:	1b258593          	addi	a1,a1,434 # 80031370 <__func__.26>
    8001b1c6:	00017517          	auipc	a0,0x17
    8001b1ca:	50250513          	addi	a0,a0,1282 # 800326c8 <__func__.0+0x2e0>
bool store_access_fault_5(){
    8001b1ce:	e406                	sd	ra,8(sp)
    8001b1d0:	e022                	sd	s0,0(sp)
    TEST_START();
    8001b1d2:	2f2140ef          	jal	8002f4c4 <printf>
    8001b1d6:	4529                	li	a0,10
    8001b1d8:	7db120ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001b1dc:	4511                	li	a0,4
    8001b1de:	d37e50ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b1e2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b1e6:	10000793          	li	a5,256
    8001b1ea:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b1ee:	20000793          	li	a5,512
    8001b1f2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b1f6:	40000793          	li	a5,1024
    8001b1fa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b1fe:	6785                	lui	a5,0x1
    8001b200:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b204:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b208:	4785                	li	a5,1
    8001b20a:	07fe                	slli	a5,a5,0x1f
    8001b20c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b210:	08100793          	li	a5,129
    8001b214:	07e2                	slli	a5,a5,0x18
    8001b216:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b21a:	67a1                	lui	a5,0x8
    8001b21c:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001b220:	bf9e50ef          	jal	80000e18 <test_setup_except_function>
    8001b224:	4785                	li	a5,1
    8001b226:	1786                	slli	a5,a5,0x21
    8001b228:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b22c:	4701                	li	a4,0
    8001b22e:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    printf("%d\n",excpt.triggered);
    8001b232:	00041597          	auipc	a1,0x41
    8001b236:	ddf5c583          	lbu	a1,-545(a1) # 8005c011 <excpt+0x1>
    8001b23a:	00018517          	auipc	a0,0x18
    8001b23e:	00e50513          	addi	a0,a0,14 # 80033248 <__func__.0+0xe60>
    8001b242:	282140ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.cause);
    8001b246:	00041597          	auipc	a1,0x41
    8001b24a:	dd25b583          	ld	a1,-558(a1) # 8005c018 <excpt+0x8>
    8001b24e:	00018517          	auipc	a0,0x18
    8001b252:	ffa50513          	addi	a0,a0,-6 # 80033248 <__func__.0+0xe60>
    8001b256:	26e140ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b25a:	08c00593          	li	a1,140
    8001b25e:	0001e617          	auipc	a2,0x1e
    8001b262:	d5a60613          	addi	a2,a2,-678 # 80038fb8 <__func__.0+0x6bd0>
    8001b266:	00017517          	auipc	a0,0x17
    8001b26a:	47a50513          	addi	a0,a0,1146 # 800326e0 <__func__.0+0x2f8>
    8001b26e:	256140ef          	jal	8002f4c4 <printf>
    8001b272:	00041797          	auipc	a5,0x41
    8001b276:	d9f7c783          	lbu	a5,-609(a5) # 8005c011 <excpt+0x1>
    8001b27a:	00017597          	auipc	a1,0x17
    8001b27e:	42e58593          	addi	a1,a1,1070 # 800326a8 <__func__.0+0x2c0>
    8001b282:	c789                	beqz	a5,8001b28c <store_access_fault_5+0xd0>
    8001b284:	00017597          	auipc	a1,0x17
    8001b288:	43458593          	addi	a1,a1,1076 # 800326b8 <__func__.0+0x2d0>
    8001b28c:	00017517          	auipc	a0,0x17
    8001b290:	46c50513          	addi	a0,a0,1132 # 800326f8 <__func__.0+0x310>
    8001b294:	230140ef          	jal	8002f4c4 <printf>
    8001b298:	00041797          	auipc	a5,0x41
    8001b29c:	d797c783          	lbu	a5,-647(a5) # 8005c011 <excpt+0x1>
    8001b2a0:	e7a1                	bnez	a5,8001b2e8 <store_access_fault_5+0x12c>
    8001b2a2:	4529                	li	a0,10
    8001b2a4:	70f120ef          	jal	8002e1b2 <putchar>
    8001b2a8:	00041797          	auipc	a5,0x41
    8001b2ac:	d697c783          	lbu	a5,-663(a5) # 8005c011 <excpt+0x1>
    8001b2b0:	e795                	bnez	a5,8001b2dc <store_access_fault_5+0x120>
    8001b2b2:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001b2b4:	00017597          	auipc	a1,0x17
    8001b2b8:	3f458593          	addi	a1,a1,1012 # 800326a8 <__func__.0+0x2c0>
    8001b2bc:	00017517          	auipc	a0,0x17
    8001b2c0:	4a450513          	addi	a0,a0,1188 # 80032760 <__func__.0+0x378>
    8001b2c4:	200140ef          	jal	8002f4c4 <printf>
    8001b2c8:	4511                	li	a0,4
    8001b2ca:	c4be50ef          	jal	80000f14 <goto_priv>
    8001b2ce:	ca8e60ef          	jal	80001776 <reset_state>
}
    8001b2d2:	60a2                	ld	ra,8(sp)
    8001b2d4:	8522                	mv	a0,s0
    8001b2d6:	6402                	ld	s0,0(sp)
    8001b2d8:	0141                	addi	sp,sp,16
    8001b2da:	8082                	ret
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b2dc:	4401                	li	s0,0
    TEST_END();
    8001b2de:	00017597          	auipc	a1,0x17
    8001b2e2:	3da58593          	addi	a1,a1,986 # 800326b8 <__func__.0+0x2d0>
    8001b2e6:	bfd9                	j	8001b2bc <store_access_fault_5+0x100>
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b2e8:	00017517          	auipc	a0,0x17
    8001b2ec:	41850513          	addi	a0,a0,1048 # 80032700 <__func__.0+0x318>
    8001b2f0:	1d4140ef          	jal	8002f4c4 <printf>
    8001b2f4:	02900513          	li	a0,41
    8001b2f8:	6bb120ef          	jal	8002e1b2 <putchar>
    8001b2fc:	b75d                	j	8001b2a2 <store_access_fault_5+0xe6>

000000008001b2fe <store_access_fault_6>:


bool store_access_fault_6(){
    8001b2fe:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b300:	00016597          	auipc	a1,0x16
    8001b304:	08858593          	addi	a1,a1,136 # 80031388 <__func__.25>
    8001b308:	00017517          	auipc	a0,0x17
    8001b30c:	3c050513          	addi	a0,a0,960 # 800326c8 <__func__.0+0x2e0>
bool store_access_fault_6(){
    8001b310:	ec06                	sd	ra,24(sp)
    8001b312:	e822                	sd	s0,16(sp)
    8001b314:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b316:	1ae140ef          	jal	8002f4c4 <printf>
    8001b31a:	4529                	li	a0,10
    8001b31c:	697120ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001b320:	4511                	li	a0,4
    8001b322:	bf3e50ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b326:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b32a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b32e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b332:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b336:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b33a:	10000793          	li	a5,256
    8001b33e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b342:	20000793          	li	a5,512
    8001b346:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b34a:	40000793          	li	a5,1024
    8001b34e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b352:	6785                	lui	a5,0x1
    8001b354:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b358:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b35c:	4785                	li	a5,1
    8001b35e:	07fe                	slli	a5,a5,0x1f
    8001b360:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b364:	08100793          	li	a5,129
    8001b368:	07e2                	slli	a5,a5,0x18
    8001b36a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b36e:	08000793          	li	a5,128
    8001b372:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b376:	67a1                	lui	a5,0x8
    8001b378:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001b37c:	450d                	li	a0,3
    8001b37e:	b97e50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b382:	a97e50ef          	jal	80000e18 <test_setup_except_function>
    8001b386:	4785                	li	a5,1
    8001b388:	1786                	slli	a5,a5,0x21
    8001b38a:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b38e:	4701                	li	a4,0
    8001b390:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b394:	08c00593          	li	a1,140
    8001b398:	0001e617          	auipc	a2,0x1e
    8001b39c:	c5860613          	addi	a2,a2,-936 # 80038ff0 <__func__.0+0x6c08>
    8001b3a0:	00017517          	auipc	a0,0x17
    8001b3a4:	34050513          	addi	a0,a0,832 # 800326e0 <__func__.0+0x2f8>
    8001b3a8:	11c140ef          	jal	8002f4c4 <printf>
    8001b3ac:	00041797          	auipc	a5,0x41
    8001b3b0:	c657c783          	lbu	a5,-923(a5) # 8005c011 <excpt+0x1>
    8001b3b4:	00041497          	auipc	s1,0x41
    8001b3b8:	c5c48493          	addi	s1,s1,-932 # 8005c010 <excpt>
    8001b3bc:	00017597          	auipc	a1,0x17
    8001b3c0:	2fc58593          	addi	a1,a1,764 # 800326b8 <__func__.0+0x2d0>
    8001b3c4:	cf89                	beqz	a5,8001b3de <store_access_fault_6+0xe0>
    8001b3c6:	6498                	ld	a4,8(s1)
    8001b3c8:	479d                	li	a5,7
    8001b3ca:	00017597          	auipc	a1,0x17
    8001b3ce:	2de58593          	addi	a1,a1,734 # 800326a8 <__func__.0+0x2c0>
    8001b3d2:	00f70663          	beq	a4,a5,8001b3de <store_access_fault_6+0xe0>
    8001b3d6:	00017597          	auipc	a1,0x17
    8001b3da:	2e258593          	addi	a1,a1,738 # 800326b8 <__func__.0+0x2d0>
    8001b3de:	00017517          	auipc	a0,0x17
    8001b3e2:	31a50513          	addi	a0,a0,794 # 800326f8 <__func__.0+0x310>
    8001b3e6:	0de140ef          	jal	8002f4c4 <printf>
    8001b3ea:	00041797          	auipc	a5,0x41
    8001b3ee:	c277c783          	lbu	a5,-985(a5) # 8005c011 <excpt+0x1>
    8001b3f2:	c789                	beqz	a5,8001b3fc <store_access_fault_6+0xfe>
    8001b3f4:	6498                	ld	a4,8(s1)
    8001b3f6:	479d                	li	a5,7
    8001b3f8:	00f70c63          	beq	a4,a5,8001b410 <store_access_fault_6+0x112>
    8001b3fc:	00017517          	auipc	a0,0x17
    8001b400:	30450513          	addi	a0,a0,772 # 80032700 <__func__.0+0x318>
    8001b404:	0c0140ef          	jal	8002f4c4 <printf>
    8001b408:	02900513          	li	a0,41
    8001b40c:	5a7120ef          	jal	8002e1b2 <putchar>
    8001b410:	4529                	li	a0,10
    8001b412:	5a1120ef          	jal	8002e1b2 <putchar>
    8001b416:	00041417          	auipc	s0,0x41
    8001b41a:	bfb44403          	lbu	s0,-1029(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b41e:	00017597          	auipc	a1,0x17
    8001b422:	29a58593          	addi	a1,a1,666 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b426:	cc11                	beqz	s0,8001b442 <store_access_fault_6+0x144>
    8001b428:	6498                	ld	a4,8(s1)
    8001b42a:	479d                	li	a5,7
    TEST_END();
    8001b42c:	00017597          	auipc	a1,0x17
    8001b430:	27c58593          	addi	a1,a1,636 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b434:	00f70763          	beq	a4,a5,8001b442 <store_access_fault_6+0x144>
    8001b438:	4401                	li	s0,0
    TEST_END();
    8001b43a:	00017597          	auipc	a1,0x17
    8001b43e:	27e58593          	addi	a1,a1,638 # 800326b8 <__func__.0+0x2d0>
    8001b442:	00017517          	auipc	a0,0x17
    8001b446:	31e50513          	addi	a0,a0,798 # 80032760 <__func__.0+0x378>
    8001b44a:	07a140ef          	jal	8002f4c4 <printf>
    8001b44e:	4511                	li	a0,4
    8001b450:	ac5e50ef          	jal	80000f14 <goto_priv>
    8001b454:	b22e60ef          	jal	80001776 <reset_state>
}
    8001b458:	60e2                	ld	ra,24(sp)
    8001b45a:	8522                	mv	a0,s0
    8001b45c:	6442                	ld	s0,16(sp)
    8001b45e:	64a2                	ld	s1,8(sp)
    8001b460:	6105                	addi	sp,sp,32
    8001b462:	8082                	ret

000000008001b464 <store_access_fault_7>:


bool store_access_fault_7(){
    8001b464:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b466:	00016597          	auipc	a1,0x16
    8001b46a:	f3a58593          	addi	a1,a1,-198 # 800313a0 <__func__.24>
    8001b46e:	00017517          	auipc	a0,0x17
    8001b472:	25a50513          	addi	a0,a0,602 # 800326c8 <__func__.0+0x2e0>
bool store_access_fault_7(){
    8001b476:	ec06                	sd	ra,24(sp)
    8001b478:	e822                	sd	s0,16(sp)
    8001b47a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b47c:	048140ef          	jal	8002f4c4 <printf>
    8001b480:	4529                	li	a0,10
    8001b482:	531120ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001b486:	4511                	li	a0,4
    8001b488:	a8de50ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b48c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b490:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b494:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b498:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b49c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b4a0:	10000793          	li	a5,256
    8001b4a4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b4a8:	20000793          	li	a5,512
    8001b4ac:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b4b0:	40000793          	li	a5,1024
    8001b4b4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b4b8:	6785                	lui	a5,0x1
    8001b4ba:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b4be:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b4c2:	4785                	li	a5,1
    8001b4c4:	07fe                	slli	a5,a5,0x1f
    8001b4c6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b4ca:	08100793          	li	a5,129
    8001b4ce:	07e2                	slli	a5,a5,0x18
    8001b4d0:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b4d4:	08000793          	li	a5,128
    8001b4d8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b4dc:	67a1                	lui	a5,0x8
    8001b4de:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001b4e2:	4505                	li	a0,1
    8001b4e4:	a31e50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b4e8:	931e50ef          	jal	80000e18 <test_setup_except_function>
    8001b4ec:	4785                	li	a5,1
    8001b4ee:	1786                	slli	a5,a5,0x21
    8001b4f0:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b4f4:	4701                	li	a4,0
    8001b4f6:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b4fa:	08c00593          	li	a1,140
    8001b4fe:	0001e617          	auipc	a2,0x1e
    8001b502:	b2a60613          	addi	a2,a2,-1238 # 80039028 <__func__.0+0x6c40>
    8001b506:	00017517          	auipc	a0,0x17
    8001b50a:	1da50513          	addi	a0,a0,474 # 800326e0 <__func__.0+0x2f8>
    8001b50e:	7b7130ef          	jal	8002f4c4 <printf>
    8001b512:	00041797          	auipc	a5,0x41
    8001b516:	aff7c783          	lbu	a5,-1281(a5) # 8005c011 <excpt+0x1>
    8001b51a:	00041497          	auipc	s1,0x41
    8001b51e:	af648493          	addi	s1,s1,-1290 # 8005c010 <excpt>
    8001b522:	00017597          	auipc	a1,0x17
    8001b526:	19658593          	addi	a1,a1,406 # 800326b8 <__func__.0+0x2d0>
    8001b52a:	cf89                	beqz	a5,8001b544 <store_access_fault_7+0xe0>
    8001b52c:	6498                	ld	a4,8(s1)
    8001b52e:	479d                	li	a5,7
    8001b530:	00017597          	auipc	a1,0x17
    8001b534:	17858593          	addi	a1,a1,376 # 800326a8 <__func__.0+0x2c0>
    8001b538:	00f70663          	beq	a4,a5,8001b544 <store_access_fault_7+0xe0>
    8001b53c:	00017597          	auipc	a1,0x17
    8001b540:	17c58593          	addi	a1,a1,380 # 800326b8 <__func__.0+0x2d0>
    8001b544:	00017517          	auipc	a0,0x17
    8001b548:	1b450513          	addi	a0,a0,436 # 800326f8 <__func__.0+0x310>
    8001b54c:	779130ef          	jal	8002f4c4 <printf>
    8001b550:	00041797          	auipc	a5,0x41
    8001b554:	ac17c783          	lbu	a5,-1343(a5) # 8005c011 <excpt+0x1>
    8001b558:	c789                	beqz	a5,8001b562 <store_access_fault_7+0xfe>
    8001b55a:	6498                	ld	a4,8(s1)
    8001b55c:	479d                	li	a5,7
    8001b55e:	00f70c63          	beq	a4,a5,8001b576 <store_access_fault_7+0x112>
    8001b562:	00017517          	auipc	a0,0x17
    8001b566:	19e50513          	addi	a0,a0,414 # 80032700 <__func__.0+0x318>
    8001b56a:	75b130ef          	jal	8002f4c4 <printf>
    8001b56e:	02900513          	li	a0,41
    8001b572:	441120ef          	jal	8002e1b2 <putchar>
    8001b576:	4529                	li	a0,10
    8001b578:	43b120ef          	jal	8002e1b2 <putchar>
    8001b57c:	00041417          	auipc	s0,0x41
    8001b580:	a9544403          	lbu	s0,-1387(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b584:	00017597          	auipc	a1,0x17
    8001b588:	13458593          	addi	a1,a1,308 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b58c:	cc11                	beqz	s0,8001b5a8 <store_access_fault_7+0x144>
    8001b58e:	6498                	ld	a4,8(s1)
    8001b590:	479d                	li	a5,7
    TEST_END();
    8001b592:	00017597          	auipc	a1,0x17
    8001b596:	11658593          	addi	a1,a1,278 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b59a:	00f70763          	beq	a4,a5,8001b5a8 <store_access_fault_7+0x144>
    8001b59e:	4401                	li	s0,0
    TEST_END();
    8001b5a0:	00017597          	auipc	a1,0x17
    8001b5a4:	11858593          	addi	a1,a1,280 # 800326b8 <__func__.0+0x2d0>
    8001b5a8:	00017517          	auipc	a0,0x17
    8001b5ac:	1b850513          	addi	a0,a0,440 # 80032760 <__func__.0+0x378>
    8001b5b0:	715130ef          	jal	8002f4c4 <printf>
    8001b5b4:	4511                	li	a0,4
    8001b5b6:	95fe50ef          	jal	80000f14 <goto_priv>
    8001b5ba:	9bce60ef          	jal	80001776 <reset_state>
}
    8001b5be:	60e2                	ld	ra,24(sp)
    8001b5c0:	8522                	mv	a0,s0
    8001b5c2:	6442                	ld	s0,16(sp)
    8001b5c4:	64a2                	ld	s1,8(sp)
    8001b5c6:	6105                	addi	sp,sp,32
    8001b5c8:	8082                	ret

000000008001b5ca <store_access_fault_8>:

bool store_access_fault_8(){
    8001b5ca:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b5cc:	00016597          	auipc	a1,0x16
    8001b5d0:	dec58593          	addi	a1,a1,-532 # 800313b8 <__func__.23>
    8001b5d4:	00017517          	auipc	a0,0x17
    8001b5d8:	0f450513          	addi	a0,a0,244 # 800326c8 <__func__.0+0x2e0>
bool store_access_fault_8(){
    8001b5dc:	ec06                	sd	ra,24(sp)
    8001b5de:	e822                	sd	s0,16(sp)
    8001b5e0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b5e2:	6e3130ef          	jal	8002f4c4 <printf>
    8001b5e6:	4529                	li	a0,10
    8001b5e8:	3cb120ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001b5ec:	4511                	li	a0,4
    8001b5ee:	927e50ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b5f2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b5f6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b5fa:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b5fe:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b602:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b606:	10000793          	li	a5,256
    8001b60a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b60e:	20000793          	li	a5,512
    8001b612:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b616:	40000793          	li	a5,1024
    8001b61a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b61e:	6785                	lui	a5,0x1
    8001b620:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b624:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b628:	4785                	li	a5,1
    8001b62a:	07fe                	slli	a5,a5,0x1f
    8001b62c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b630:	08100793          	li	a5,129
    8001b634:	07e2                	slli	a5,a5,0x18
    8001b636:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b63a:	08000793          	li	a5,128
    8001b63e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b642:	67a1                	lui	a5,0x8
    8001b644:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b648:	4501                	li	a0,0
    8001b64a:	8cbe50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b64e:	fcae50ef          	jal	80000e18 <test_setup_except_function>
    8001b652:	4785                	li	a5,1
    8001b654:	1786                	slli	a5,a5,0x21
    8001b656:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b65a:	4701                	li	a4,0
    8001b65c:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b660:	08c00593          	li	a1,140
    8001b664:	0001e617          	auipc	a2,0x1e
    8001b668:	9fc60613          	addi	a2,a2,-1540 # 80039060 <__func__.0+0x6c78>
    8001b66c:	00017517          	auipc	a0,0x17
    8001b670:	07450513          	addi	a0,a0,116 # 800326e0 <__func__.0+0x2f8>
    8001b674:	651130ef          	jal	8002f4c4 <printf>
    8001b678:	00041797          	auipc	a5,0x41
    8001b67c:	9997c783          	lbu	a5,-1639(a5) # 8005c011 <excpt+0x1>
    8001b680:	00041497          	auipc	s1,0x41
    8001b684:	99048493          	addi	s1,s1,-1648 # 8005c010 <excpt>
    8001b688:	00017597          	auipc	a1,0x17
    8001b68c:	03058593          	addi	a1,a1,48 # 800326b8 <__func__.0+0x2d0>
    8001b690:	cf89                	beqz	a5,8001b6aa <store_access_fault_8+0xe0>
    8001b692:	6498                	ld	a4,8(s1)
    8001b694:	479d                	li	a5,7
    8001b696:	00017597          	auipc	a1,0x17
    8001b69a:	01258593          	addi	a1,a1,18 # 800326a8 <__func__.0+0x2c0>
    8001b69e:	00f70663          	beq	a4,a5,8001b6aa <store_access_fault_8+0xe0>
    8001b6a2:	00017597          	auipc	a1,0x17
    8001b6a6:	01658593          	addi	a1,a1,22 # 800326b8 <__func__.0+0x2d0>
    8001b6aa:	00017517          	auipc	a0,0x17
    8001b6ae:	04e50513          	addi	a0,a0,78 # 800326f8 <__func__.0+0x310>
    8001b6b2:	613130ef          	jal	8002f4c4 <printf>
    8001b6b6:	00041797          	auipc	a5,0x41
    8001b6ba:	95b7c783          	lbu	a5,-1701(a5) # 8005c011 <excpt+0x1>
    8001b6be:	c789                	beqz	a5,8001b6c8 <store_access_fault_8+0xfe>
    8001b6c0:	6498                	ld	a4,8(s1)
    8001b6c2:	479d                	li	a5,7
    8001b6c4:	00f70c63          	beq	a4,a5,8001b6dc <store_access_fault_8+0x112>
    8001b6c8:	00017517          	auipc	a0,0x17
    8001b6cc:	03850513          	addi	a0,a0,56 # 80032700 <__func__.0+0x318>
    8001b6d0:	5f5130ef          	jal	8002f4c4 <printf>
    8001b6d4:	02900513          	li	a0,41
    8001b6d8:	2db120ef          	jal	8002e1b2 <putchar>
    8001b6dc:	4529                	li	a0,10
    8001b6de:	2d5120ef          	jal	8002e1b2 <putchar>
    8001b6e2:	00041417          	auipc	s0,0x41
    8001b6e6:	92f44403          	lbu	s0,-1745(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b6ea:	00017597          	auipc	a1,0x17
    8001b6ee:	fce58593          	addi	a1,a1,-50 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b6f2:	cc11                	beqz	s0,8001b70e <store_access_fault_8+0x144>
    8001b6f4:	6498                	ld	a4,8(s1)
    8001b6f6:	479d                	li	a5,7
    TEST_END();
    8001b6f8:	00017597          	auipc	a1,0x17
    8001b6fc:	fb058593          	addi	a1,a1,-80 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b700:	00f70763          	beq	a4,a5,8001b70e <store_access_fault_8+0x144>
    8001b704:	4401                	li	s0,0
    TEST_END();
    8001b706:	00017597          	auipc	a1,0x17
    8001b70a:	fb258593          	addi	a1,a1,-78 # 800326b8 <__func__.0+0x2d0>
    8001b70e:	00017517          	auipc	a0,0x17
    8001b712:	05250513          	addi	a0,a0,82 # 80032760 <__func__.0+0x378>
    8001b716:	5af130ef          	jal	8002f4c4 <printf>
    8001b71a:	4511                	li	a0,4
    8001b71c:	ff8e50ef          	jal	80000f14 <goto_priv>
    8001b720:	856e60ef          	jal	80001776 <reset_state>
}
    8001b724:	60e2                	ld	ra,24(sp)
    8001b726:	8522                	mv	a0,s0
    8001b728:	6442                	ld	s0,16(sp)
    8001b72a:	64a2                	ld	s1,8(sp)
    8001b72c:	6105                	addi	sp,sp,32
    8001b72e:	8082                	ret

000000008001b730 <store_access_fault_9>:

bool store_access_fault_9(){
    8001b730:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b732:	00016597          	auipc	a1,0x16
    8001b736:	c9e58593          	addi	a1,a1,-866 # 800313d0 <__func__.22>
    8001b73a:	00017517          	auipc	a0,0x17
    8001b73e:	f8e50513          	addi	a0,a0,-114 # 800326c8 <__func__.0+0x2e0>
bool store_access_fault_9(){
    8001b742:	ec06                	sd	ra,24(sp)
    8001b744:	e822                	sd	s0,16(sp)
    8001b746:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b748:	57d130ef          	jal	8002f4c4 <printf>
    8001b74c:	4529                	li	a0,10
    8001b74e:	265120ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001b752:	4511                	li	a0,4
    8001b754:	fc0e50ef          	jal	80000f14 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b758:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b75c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b760:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b764:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b768:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b76c:	10000793          	li	a5,256
    8001b770:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b774:	20000793          	li	a5,512
    8001b778:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b77c:	40000793          	li	a5,1024
    8001b780:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b784:	6785                	lui	a5,0x1
    8001b786:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b78a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b78e:	4785                	li	a5,1
    8001b790:	07fe                	slli	a5,a5,0x1f
    8001b792:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b796:	08100793          	li	a5,129
    8001b79a:	07e2                	slli	a5,a5,0x18
    8001b79c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b7a0:	08000793          	li	a5,128
    8001b7a4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b7a8:	67a1                	lui	a5,0x8
    8001b7aa:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b7ae:	4501                	li	a0,0
    8001b7b0:	f64e50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b7b4:	e64e50ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001b7b8:	37ab77b7          	lui	a5,0x37ab7
    8001b7bc:	4705                	li	a4,1
    8001b7be:	078a                	slli	a5,a5,0x2
    8001b7c0:	170e                	slli	a4,a4,0x23
    8001b7c2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001b7c6:	1761                	addi	a4,a4,-8
    8001b7c8:	00f73023          	sd	a5,0(a4)
    
    sd(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b7cc:	08c00593          	li	a1,140
    8001b7d0:	0001e617          	auipc	a2,0x1e
    8001b7d4:	8c860613          	addi	a2,a2,-1848 # 80039098 <__func__.0+0x6cb0>
    8001b7d8:	00017517          	auipc	a0,0x17
    8001b7dc:	f0850513          	addi	a0,a0,-248 # 800326e0 <__func__.0+0x2f8>
    8001b7e0:	4e5130ef          	jal	8002f4c4 <printf>
    8001b7e4:	00041797          	auipc	a5,0x41
    8001b7e8:	82d7c783          	lbu	a5,-2003(a5) # 8005c011 <excpt+0x1>
    8001b7ec:	00041497          	auipc	s1,0x41
    8001b7f0:	82448493          	addi	s1,s1,-2012 # 8005c010 <excpt>
    8001b7f4:	00017597          	auipc	a1,0x17
    8001b7f8:	ec458593          	addi	a1,a1,-316 # 800326b8 <__func__.0+0x2d0>
    8001b7fc:	cf89                	beqz	a5,8001b816 <store_access_fault_9+0xe6>
    8001b7fe:	6498                	ld	a4,8(s1)
    8001b800:	479d                	li	a5,7
    8001b802:	00017597          	auipc	a1,0x17
    8001b806:	ea658593          	addi	a1,a1,-346 # 800326a8 <__func__.0+0x2c0>
    8001b80a:	00f70663          	beq	a4,a5,8001b816 <store_access_fault_9+0xe6>
    8001b80e:	00017597          	auipc	a1,0x17
    8001b812:	eaa58593          	addi	a1,a1,-342 # 800326b8 <__func__.0+0x2d0>
    8001b816:	00017517          	auipc	a0,0x17
    8001b81a:	ee250513          	addi	a0,a0,-286 # 800326f8 <__func__.0+0x310>
    8001b81e:	4a7130ef          	jal	8002f4c4 <printf>
    8001b822:	00040797          	auipc	a5,0x40
    8001b826:	7ef7c783          	lbu	a5,2031(a5) # 8005c011 <excpt+0x1>
    8001b82a:	c789                	beqz	a5,8001b834 <store_access_fault_9+0x104>
    8001b82c:	6498                	ld	a4,8(s1)
    8001b82e:	479d                	li	a5,7
    8001b830:	00f70c63          	beq	a4,a5,8001b848 <store_access_fault_9+0x118>
    8001b834:	00017517          	auipc	a0,0x17
    8001b838:	ecc50513          	addi	a0,a0,-308 # 80032700 <__func__.0+0x318>
    8001b83c:	489130ef          	jal	8002f4c4 <printf>
    8001b840:	02900513          	li	a0,41
    8001b844:	16f120ef          	jal	8002e1b2 <putchar>
    8001b848:	4529                	li	a0,10
    8001b84a:	169120ef          	jal	8002e1b2 <putchar>
    8001b84e:	00040417          	auipc	s0,0x40
    8001b852:	7c344403          	lbu	s0,1987(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b856:	00017597          	auipc	a1,0x17
    8001b85a:	e6258593          	addi	a1,a1,-414 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b85e:	cc11                	beqz	s0,8001b87a <store_access_fault_9+0x14a>
    8001b860:	6498                	ld	a4,8(s1)
    8001b862:	479d                	li	a5,7
    TEST_END();
    8001b864:	00017597          	auipc	a1,0x17
    8001b868:	e4458593          	addi	a1,a1,-444 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b86c:	00f70763          	beq	a4,a5,8001b87a <store_access_fault_9+0x14a>
    8001b870:	4401                	li	s0,0
    TEST_END();
    8001b872:	00017597          	auipc	a1,0x17
    8001b876:	e4658593          	addi	a1,a1,-442 # 800326b8 <__func__.0+0x2d0>
    8001b87a:	00017517          	auipc	a0,0x17
    8001b87e:	ee650513          	addi	a0,a0,-282 # 80032760 <__func__.0+0x378>
    8001b882:	443130ef          	jal	8002f4c4 <printf>
    8001b886:	4511                	li	a0,4
    8001b888:	e8ce50ef          	jal	80000f14 <goto_priv>
    8001b88c:	eebe50ef          	jal	80001776 <reset_state>
}
    8001b890:	60e2                	ld	ra,24(sp)
    8001b892:	8522                	mv	a0,s0
    8001b894:	6442                	ld	s0,16(sp)
    8001b896:	64a2                	ld	s1,8(sp)
    8001b898:	6105                	addi	sp,sp,32
    8001b89a:	8082                	ret

000000008001b89c <store_access_fault_10>:


bool store_access_fault_10(){
    8001b89c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b89e:	00016597          	auipc	a1,0x16
    8001b8a2:	b4a58593          	addi	a1,a1,-1206 # 800313e8 <__func__.21>
    8001b8a6:	00017517          	auipc	a0,0x17
    8001b8aa:	e2250513          	addi	a0,a0,-478 # 800326c8 <__func__.0+0x2e0>
bool store_access_fault_10(){
    8001b8ae:	ec06                	sd	ra,24(sp)
    8001b8b0:	e822                	sd	s0,16(sp)
    8001b8b2:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b8b4:	411130ef          	jal	8002f4c4 <printf>
    8001b8b8:	4529                	li	a0,10
    8001b8ba:	0f9120ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001b8be:	4511                	li	a0,4
    8001b8c0:	e54e50ef          	jal	80000f14 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b8c4:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b8c8:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b8cc:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b8d0:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b8d4:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b8d8:	4785                	li	a5,1
    8001b8da:	07fe                	slli	a5,a5,0x1f
    8001b8dc:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b8e0:	08000793          	li	a5,128
    8001b8e4:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001b8e8:	450d                	li	a0,3
    8001b8ea:	e2ae50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b8ee:	d2ae50ef          	jal	80000e18 <test_setup_except_function>
    8001b8f2:	37ab77b7          	lui	a5,0x37ab7
    8001b8f6:	078a                	slli	a5,a5,0x2
    8001b8f8:	00803737          	lui	a4,0x803
    8001b8fc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001b900:	072a                	slli	a4,a4,0xa
    8001b902:	00f73023          	sd	a5,0(a4) # 803000 <STACK_SIZE+0x703000>
    
    sd(0x80300000UL << 2,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001b906:	08c00593          	li	a1,140
    8001b90a:	0001d617          	auipc	a2,0x1d
    8001b90e:	7fe60613          	addi	a2,a2,2046 # 80039108 <__func__.0+0x6d20>
    8001b912:	00017517          	auipc	a0,0x17
    8001b916:	dce50513          	addi	a0,a0,-562 # 800326e0 <__func__.0+0x2f8>
    8001b91a:	3ab130ef          	jal	8002f4c4 <printf>
    8001b91e:	00040797          	auipc	a5,0x40
    8001b922:	6f37c783          	lbu	a5,1779(a5) # 8005c011 <excpt+0x1>
    8001b926:	00040497          	auipc	s1,0x40
    8001b92a:	6ea48493          	addi	s1,s1,1770 # 8005c010 <excpt>
    8001b92e:	00017597          	auipc	a1,0x17
    8001b932:	d8a58593          	addi	a1,a1,-630 # 800326b8 <__func__.0+0x2d0>
    8001b936:	cf89                	beqz	a5,8001b950 <store_access_fault_10+0xb4>
    8001b938:	6498                	ld	a4,8(s1)
    8001b93a:	479d                	li	a5,7
    8001b93c:	00017597          	auipc	a1,0x17
    8001b940:	d6c58593          	addi	a1,a1,-660 # 800326a8 <__func__.0+0x2c0>
    8001b944:	00f70663          	beq	a4,a5,8001b950 <store_access_fault_10+0xb4>
    8001b948:	00017597          	auipc	a1,0x17
    8001b94c:	d7058593          	addi	a1,a1,-656 # 800326b8 <__func__.0+0x2d0>
    8001b950:	00017517          	auipc	a0,0x17
    8001b954:	da850513          	addi	a0,a0,-600 # 800326f8 <__func__.0+0x310>
    8001b958:	36d130ef          	jal	8002f4c4 <printf>
    8001b95c:	00040797          	auipc	a5,0x40
    8001b960:	6b57c783          	lbu	a5,1717(a5) # 8005c011 <excpt+0x1>
    8001b964:	c789                	beqz	a5,8001b96e <store_access_fault_10+0xd2>
    8001b966:	6498                	ld	a4,8(s1)
    8001b968:	479d                	li	a5,7
    8001b96a:	00f70c63          	beq	a4,a5,8001b982 <store_access_fault_10+0xe6>
    8001b96e:	00017517          	auipc	a0,0x17
    8001b972:	d9250513          	addi	a0,a0,-622 # 80032700 <__func__.0+0x318>
    8001b976:	34f130ef          	jal	8002f4c4 <printf>
    8001b97a:	02900513          	li	a0,41
    8001b97e:	035120ef          	jal	8002e1b2 <putchar>
    8001b982:	4529                	li	a0,10
    8001b984:	02f120ef          	jal	8002e1b2 <putchar>
    8001b988:	00040417          	auipc	s0,0x40
    8001b98c:	68944403          	lbu	s0,1673(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b990:	00017597          	auipc	a1,0x17
    8001b994:	d2858593          	addi	a1,a1,-728 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001b998:	cc11                	beqz	s0,8001b9b4 <store_access_fault_10+0x118>
    8001b99a:	6498                	ld	a4,8(s1)
    8001b99c:	479d                	li	a5,7
    TEST_END();
    8001b99e:	00017597          	auipc	a1,0x17
    8001b9a2:	d0a58593          	addi	a1,a1,-758 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001b9a6:	00f70763          	beq	a4,a5,8001b9b4 <store_access_fault_10+0x118>
    8001b9aa:	4401                	li	s0,0
    TEST_END();
    8001b9ac:	00017597          	auipc	a1,0x17
    8001b9b0:	d0c58593          	addi	a1,a1,-756 # 800326b8 <__func__.0+0x2d0>
    8001b9b4:	00017517          	auipc	a0,0x17
    8001b9b8:	dac50513          	addi	a0,a0,-596 # 80032760 <__func__.0+0x378>
    8001b9bc:	309130ef          	jal	8002f4c4 <printf>
    8001b9c0:	4511                	li	a0,4
    8001b9c2:	d52e50ef          	jal	80000f14 <goto_priv>
    8001b9c6:	db1e50ef          	jal	80001776 <reset_state>
}
    8001b9ca:	60e2                	ld	ra,24(sp)
    8001b9cc:	8522                	mv	a0,s0
    8001b9ce:	6442                	ld	s0,16(sp)
    8001b9d0:	64a2                	ld	s1,8(sp)
    8001b9d2:	6105                	addi	sp,sp,32
    8001b9d4:	8082                	ret

000000008001b9d6 <amo_access_fault_1>:




bool amo_access_fault_1(){
    8001b9d6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b9d8:	00016597          	auipc	a1,0x16
    8001b9dc:	a2858593          	addi	a1,a1,-1496 # 80031400 <__func__.20>
    8001b9e0:	00017517          	auipc	a0,0x17
    8001b9e4:	ce850513          	addi	a0,a0,-792 # 800326c8 <__func__.0+0x2e0>
bool amo_access_fault_1(){
    8001b9e8:	ec06                	sd	ra,24(sp)
    8001b9ea:	e822                	sd	s0,16(sp)
    8001b9ec:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b9ee:	2d7130ef          	jal	8002f4c4 <printf>
    8001b9f2:	4529                	li	a0,10
    8001b9f4:	7be120ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001b9f8:	4511                	li	a0,4
    8001b9fa:	d1ae50ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b9fe:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ba02:	10000793          	li	a5,256
    8001ba06:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ba0a:	20000793          	li	a5,512
    8001ba0e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ba12:	40000793          	li	a5,1024
    8001ba16:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ba1a:	6785                	lui	a5,0x1
    8001ba1c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ba20:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ba24:	4785                	li	a5,1
    8001ba26:	07fe                	slli	a5,a5,0x1f
    8001ba28:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ba2c:	08100793          	li	a5,129
    8001ba30:	07e2                	slli	a5,a5,0x18
    8001ba32:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ba36:	67a1                	lui	a5,0x8
    8001ba38:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001ba3c:	bdce50ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8001ba40:	37ab77b7          	lui	a5,0x37ab7
    8001ba44:	4705                	li	a4,1
    8001ba46:	078a                	slli	a5,a5,0x2
    8001ba48:	1706                	slli	a4,a4,0x21
    8001ba4a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001ba4e:	40070713          	addi	a4,a4,1024
    8001ba52:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001ba56:	00040597          	auipc	a1,0x40
    8001ba5a:	5bb5c583          	lbu	a1,1467(a1) # 8005c011 <excpt+0x1>
    8001ba5e:	00017517          	auipc	a0,0x17
    8001ba62:	7ea50513          	addi	a0,a0,2026 # 80033248 <__func__.0+0xe60>
    8001ba66:	00040417          	auipc	s0,0x40
    8001ba6a:	5aa40413          	addi	s0,s0,1450 # 8005c010 <excpt>
    8001ba6e:	257130ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.cause);
    8001ba72:	640c                	ld	a1,8(s0)
    8001ba74:	00017517          	auipc	a0,0x17
    8001ba78:	7d450513          	addi	a0,a0,2004 # 80033248 <__func__.0+0xe60>
    8001ba7c:	249130ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ba80:	08c00593          	li	a1,140
    8001ba84:	0001d617          	auipc	a2,0x1d
    8001ba88:	6e460613          	addi	a2,a2,1764 # 80039168 <__func__.0+0x6d80>
    8001ba8c:	00017517          	auipc	a0,0x17
    8001ba90:	c5450513          	addi	a0,a0,-940 # 800326e0 <__func__.0+0x2f8>
    8001ba94:	231130ef          	jal	8002f4c4 <printf>
    8001ba98:	00040797          	auipc	a5,0x40
    8001ba9c:	5797c783          	lbu	a5,1401(a5) # 8005c011 <excpt+0x1>
    8001baa0:	00017597          	auipc	a1,0x17
    8001baa4:	c1858593          	addi	a1,a1,-1000 # 800326b8 <__func__.0+0x2d0>
    8001baa8:	cf89                	beqz	a5,8001bac2 <amo_access_fault_1+0xec>
    8001baaa:	6418                	ld	a4,8(s0)
    8001baac:	479d                	li	a5,7
    8001baae:	00017597          	auipc	a1,0x17
    8001bab2:	bfa58593          	addi	a1,a1,-1030 # 800326a8 <__func__.0+0x2c0>
    8001bab6:	00f70663          	beq	a4,a5,8001bac2 <amo_access_fault_1+0xec>
    8001baba:	00017597          	auipc	a1,0x17
    8001babe:	bfe58593          	addi	a1,a1,-1026 # 800326b8 <__func__.0+0x2d0>
    8001bac2:	00017517          	auipc	a0,0x17
    8001bac6:	c3650513          	addi	a0,a0,-970 # 800326f8 <__func__.0+0x310>
    8001baca:	1fb130ef          	jal	8002f4c4 <printf>
    8001bace:	00040797          	auipc	a5,0x40
    8001bad2:	5437c783          	lbu	a5,1347(a5) # 8005c011 <excpt+0x1>
    8001bad6:	c789                	beqz	a5,8001bae0 <amo_access_fault_1+0x10a>
    8001bad8:	6418                	ld	a4,8(s0)
    8001bada:	479d                	li	a5,7
    8001badc:	00f70c63          	beq	a4,a5,8001baf4 <amo_access_fault_1+0x11e>
    8001bae0:	00017517          	auipc	a0,0x17
    8001bae4:	c2050513          	addi	a0,a0,-992 # 80032700 <__func__.0+0x318>
    8001bae8:	1dd130ef          	jal	8002f4c4 <printf>
    8001baec:	02900513          	li	a0,41
    8001baf0:	6c2120ef          	jal	8002e1b2 <putchar>
    8001baf4:	4529                	li	a0,10
    8001baf6:	6bc120ef          	jal	8002e1b2 <putchar>
    8001bafa:	00040497          	auipc	s1,0x40
    8001bafe:	5174c483          	lbu	s1,1303(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bb02:	00017597          	auipc	a1,0x17
    8001bb06:	bb658593          	addi	a1,a1,-1098 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bb0a:	cc91                	beqz	s1,8001bb26 <amo_access_fault_1+0x150>
    8001bb0c:	6418                	ld	a4,8(s0)
    8001bb0e:	479d                	li	a5,7
    TEST_END();
    8001bb10:	00017597          	auipc	a1,0x17
    8001bb14:	b9858593          	addi	a1,a1,-1128 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bb18:	00f70763          	beq	a4,a5,8001bb26 <amo_access_fault_1+0x150>
    8001bb1c:	4481                	li	s1,0
    TEST_END();
    8001bb1e:	00017597          	auipc	a1,0x17
    8001bb22:	b9a58593          	addi	a1,a1,-1126 # 800326b8 <__func__.0+0x2d0>
    8001bb26:	00017517          	auipc	a0,0x17
    8001bb2a:	c3a50513          	addi	a0,a0,-966 # 80032760 <__func__.0+0x378>
    8001bb2e:	197130ef          	jal	8002f4c4 <printf>
    8001bb32:	4511                	li	a0,4
    8001bb34:	be0e50ef          	jal	80000f14 <goto_priv>
    8001bb38:	c3fe50ef          	jal	80001776 <reset_state>
}
    8001bb3c:	60e2                	ld	ra,24(sp)
    8001bb3e:	6442                	ld	s0,16(sp)
    8001bb40:	8526                	mv	a0,s1
    8001bb42:	64a2                	ld	s1,8(sp)
    8001bb44:	6105                	addi	sp,sp,32
    8001bb46:	8082                	ret

000000008001bb48 <amo_access_fault_2>:

bool amo_access_fault_2(){
    8001bb48:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bb4a:	00016597          	auipc	a1,0x16
    8001bb4e:	8ce58593          	addi	a1,a1,-1842 # 80031418 <__func__.19>
    8001bb52:	00017517          	auipc	a0,0x17
    8001bb56:	b7650513          	addi	a0,a0,-1162 # 800326c8 <__func__.0+0x2e0>
bool amo_access_fault_2(){
    8001bb5a:	ec06                	sd	ra,24(sp)
    8001bb5c:	e822                	sd	s0,16(sp)
    8001bb5e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bb60:	165130ef          	jal	8002f4c4 <printf>
    8001bb64:	4529                	li	a0,10
    8001bb66:	64c120ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001bb6a:	4511                	li	a0,4
    8001bb6c:	ba8e50ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bb70:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bb74:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bb78:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bb7c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bb80:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bb84:	10000793          	li	a5,256
    8001bb88:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bb8c:	20000793          	li	a5,512
    8001bb90:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bb94:	40000793          	li	a5,1024
    8001bb98:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bb9c:	6785                	lui	a5,0x1
    8001bb9e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bba2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bba6:	4785                	li	a5,1
    8001bba8:	07fe                	slli	a5,a5,0x1f
    8001bbaa:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bbae:	08100793          	li	a5,129
    8001bbb2:	07e2                	slli	a5,a5,0x18
    8001bbb4:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bbb8:	08000793          	li	a5,128
    8001bbbc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bbc0:	67a1                	lui	a5,0x8
    8001bbc2:	3a07a073          	csrs	pmpcfg0,a5


    goto_priv(PRIV_HS);
    8001bbc6:	450d                	li	a0,3
    8001bbc8:	b4ce50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bbcc:	a4ce50ef          	jal	80000e18 <test_setup_except_function>
    8001bbd0:	37ab77b7          	lui	a5,0x37ab7
    8001bbd4:	4705                	li	a4,1
    8001bbd6:	078a                	slli	a5,a5,0x2
    8001bbd8:	1706                	slli	a4,a4,0x21
    8001bbda:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bbde:	40070713          	addi	a4,a4,1024
    8001bbe2:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bbe6:	08c00593          	li	a1,140
    8001bbea:	0001d617          	auipc	a2,0x1d
    8001bbee:	5be60613          	addi	a2,a2,1470 # 800391a8 <__func__.0+0x6dc0>
    8001bbf2:	00017517          	auipc	a0,0x17
    8001bbf6:	aee50513          	addi	a0,a0,-1298 # 800326e0 <__func__.0+0x2f8>
    8001bbfa:	0cb130ef          	jal	8002f4c4 <printf>
    8001bbfe:	00040797          	auipc	a5,0x40
    8001bc02:	4137c783          	lbu	a5,1043(a5) # 8005c011 <excpt+0x1>
    8001bc06:	00040497          	auipc	s1,0x40
    8001bc0a:	40a48493          	addi	s1,s1,1034 # 8005c010 <excpt>
    8001bc0e:	00017597          	auipc	a1,0x17
    8001bc12:	aaa58593          	addi	a1,a1,-1366 # 800326b8 <__func__.0+0x2d0>
    8001bc16:	cf89                	beqz	a5,8001bc30 <amo_access_fault_2+0xe8>
    8001bc18:	6498                	ld	a4,8(s1)
    8001bc1a:	479d                	li	a5,7
    8001bc1c:	00017597          	auipc	a1,0x17
    8001bc20:	a8c58593          	addi	a1,a1,-1396 # 800326a8 <__func__.0+0x2c0>
    8001bc24:	00f70663          	beq	a4,a5,8001bc30 <amo_access_fault_2+0xe8>
    8001bc28:	00017597          	auipc	a1,0x17
    8001bc2c:	a9058593          	addi	a1,a1,-1392 # 800326b8 <__func__.0+0x2d0>
    8001bc30:	00017517          	auipc	a0,0x17
    8001bc34:	ac850513          	addi	a0,a0,-1336 # 800326f8 <__func__.0+0x310>
    8001bc38:	08d130ef          	jal	8002f4c4 <printf>
    8001bc3c:	00040797          	auipc	a5,0x40
    8001bc40:	3d57c783          	lbu	a5,981(a5) # 8005c011 <excpt+0x1>
    8001bc44:	c789                	beqz	a5,8001bc4e <amo_access_fault_2+0x106>
    8001bc46:	6498                	ld	a4,8(s1)
    8001bc48:	479d                	li	a5,7
    8001bc4a:	00f70c63          	beq	a4,a5,8001bc62 <amo_access_fault_2+0x11a>
    8001bc4e:	00017517          	auipc	a0,0x17
    8001bc52:	ab250513          	addi	a0,a0,-1358 # 80032700 <__func__.0+0x318>
    8001bc56:	06f130ef          	jal	8002f4c4 <printf>
    8001bc5a:	02900513          	li	a0,41
    8001bc5e:	554120ef          	jal	8002e1b2 <putchar>
    8001bc62:	4529                	li	a0,10
    8001bc64:	54e120ef          	jal	8002e1b2 <putchar>
    8001bc68:	00040417          	auipc	s0,0x40
    8001bc6c:	3a944403          	lbu	s0,937(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bc70:	00017597          	auipc	a1,0x17
    8001bc74:	a4858593          	addi	a1,a1,-1464 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bc78:	cc11                	beqz	s0,8001bc94 <amo_access_fault_2+0x14c>
    8001bc7a:	6498                	ld	a4,8(s1)
    8001bc7c:	479d                	li	a5,7
    TEST_END();
    8001bc7e:	00017597          	auipc	a1,0x17
    8001bc82:	a2a58593          	addi	a1,a1,-1494 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bc86:	00f70763          	beq	a4,a5,8001bc94 <amo_access_fault_2+0x14c>
    8001bc8a:	4401                	li	s0,0
    TEST_END();
    8001bc8c:	00017597          	auipc	a1,0x17
    8001bc90:	a2c58593          	addi	a1,a1,-1492 # 800326b8 <__func__.0+0x2d0>
    8001bc94:	00017517          	auipc	a0,0x17
    8001bc98:	acc50513          	addi	a0,a0,-1332 # 80032760 <__func__.0+0x378>
    8001bc9c:	029130ef          	jal	8002f4c4 <printf>
    8001bca0:	4511                	li	a0,4
    8001bca2:	a72e50ef          	jal	80000f14 <goto_priv>
    8001bca6:	ad1e50ef          	jal	80001776 <reset_state>
}
    8001bcaa:	60e2                	ld	ra,24(sp)
    8001bcac:	8522                	mv	a0,s0
    8001bcae:	6442                	ld	s0,16(sp)
    8001bcb0:	64a2                	ld	s1,8(sp)
    8001bcb2:	6105                	addi	sp,sp,32
    8001bcb4:	8082                	ret

000000008001bcb6 <amo_access_fault_3>:


bool amo_access_fault_3(){
    8001bcb6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bcb8:	00015597          	auipc	a1,0x15
    8001bcbc:	77858593          	addi	a1,a1,1912 # 80031430 <__func__.18>
    8001bcc0:	00017517          	auipc	a0,0x17
    8001bcc4:	a0850513          	addi	a0,a0,-1528 # 800326c8 <__func__.0+0x2e0>
bool amo_access_fault_3(){
    8001bcc8:	ec06                	sd	ra,24(sp)
    8001bcca:	e822                	sd	s0,16(sp)
    8001bccc:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bcce:	7f6130ef          	jal	8002f4c4 <printf>
    8001bcd2:	4529                	li	a0,10
    8001bcd4:	4de120ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001bcd8:	4511                	li	a0,4
    8001bcda:	a3ae50ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bcde:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bce2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bce6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bcea:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bcee:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bcf2:	10000793          	li	a5,256
    8001bcf6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bcfa:	20000793          	li	a5,512
    8001bcfe:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bd02:	40000793          	li	a5,1024
    8001bd06:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bd0a:	6785                	lui	a5,0x1
    8001bd0c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bd10:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bd14:	4785                	li	a5,1
    8001bd16:	07fe                	slli	a5,a5,0x1f
    8001bd18:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bd1c:	08100793          	li	a5,129
    8001bd20:	07e2                	slli	a5,a5,0x18
    8001bd22:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bd26:	08000793          	li	a5,128
    8001bd2a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bd2e:	67a1                	lui	a5,0x8
    8001bd30:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001bd34:	4505                	li	a0,1
    8001bd36:	9dee50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bd3a:	8dee50ef          	jal	80000e18 <test_setup_except_function>
    8001bd3e:	37ab77b7          	lui	a5,0x37ab7
    8001bd42:	4705                	li	a4,1
    8001bd44:	078a                	slli	a5,a5,0x2
    8001bd46:	1706                	slli	a4,a4,0x21
    8001bd48:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bd4c:	40070713          	addi	a4,a4,1024
    8001bd50:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bd54:	08c00593          	li	a1,140
    8001bd58:	0001d617          	auipc	a2,0x1d
    8001bd5c:	49060613          	addi	a2,a2,1168 # 800391e8 <__func__.0+0x6e00>
    8001bd60:	00017517          	auipc	a0,0x17
    8001bd64:	98050513          	addi	a0,a0,-1664 # 800326e0 <__func__.0+0x2f8>
    8001bd68:	75c130ef          	jal	8002f4c4 <printf>
    8001bd6c:	00040797          	auipc	a5,0x40
    8001bd70:	2a57c783          	lbu	a5,677(a5) # 8005c011 <excpt+0x1>
    8001bd74:	00040497          	auipc	s1,0x40
    8001bd78:	29c48493          	addi	s1,s1,668 # 8005c010 <excpt>
    8001bd7c:	00017597          	auipc	a1,0x17
    8001bd80:	93c58593          	addi	a1,a1,-1732 # 800326b8 <__func__.0+0x2d0>
    8001bd84:	cf89                	beqz	a5,8001bd9e <amo_access_fault_3+0xe8>
    8001bd86:	6498                	ld	a4,8(s1)
    8001bd88:	479d                	li	a5,7
    8001bd8a:	00017597          	auipc	a1,0x17
    8001bd8e:	91e58593          	addi	a1,a1,-1762 # 800326a8 <__func__.0+0x2c0>
    8001bd92:	00f70663          	beq	a4,a5,8001bd9e <amo_access_fault_3+0xe8>
    8001bd96:	00017597          	auipc	a1,0x17
    8001bd9a:	92258593          	addi	a1,a1,-1758 # 800326b8 <__func__.0+0x2d0>
    8001bd9e:	00017517          	auipc	a0,0x17
    8001bda2:	95a50513          	addi	a0,a0,-1702 # 800326f8 <__func__.0+0x310>
    8001bda6:	71e130ef          	jal	8002f4c4 <printf>
    8001bdaa:	00040797          	auipc	a5,0x40
    8001bdae:	2677c783          	lbu	a5,615(a5) # 8005c011 <excpt+0x1>
    8001bdb2:	c789                	beqz	a5,8001bdbc <amo_access_fault_3+0x106>
    8001bdb4:	6498                	ld	a4,8(s1)
    8001bdb6:	479d                	li	a5,7
    8001bdb8:	00f70c63          	beq	a4,a5,8001bdd0 <amo_access_fault_3+0x11a>
    8001bdbc:	00017517          	auipc	a0,0x17
    8001bdc0:	94450513          	addi	a0,a0,-1724 # 80032700 <__func__.0+0x318>
    8001bdc4:	700130ef          	jal	8002f4c4 <printf>
    8001bdc8:	02900513          	li	a0,41
    8001bdcc:	3e6120ef          	jal	8002e1b2 <putchar>
    8001bdd0:	4529                	li	a0,10
    8001bdd2:	3e0120ef          	jal	8002e1b2 <putchar>
    8001bdd6:	00040417          	auipc	s0,0x40
    8001bdda:	23b44403          	lbu	s0,571(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bdde:	00017597          	auipc	a1,0x17
    8001bde2:	8da58593          	addi	a1,a1,-1830 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bde6:	cc11                	beqz	s0,8001be02 <amo_access_fault_3+0x14c>
    8001bde8:	6498                	ld	a4,8(s1)
    8001bdea:	479d                	li	a5,7
    TEST_END();
    8001bdec:	00017597          	auipc	a1,0x17
    8001bdf0:	8bc58593          	addi	a1,a1,-1860 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bdf4:	00f70763          	beq	a4,a5,8001be02 <amo_access_fault_3+0x14c>
    8001bdf8:	4401                	li	s0,0
    TEST_END();
    8001bdfa:	00017597          	auipc	a1,0x17
    8001bdfe:	8be58593          	addi	a1,a1,-1858 # 800326b8 <__func__.0+0x2d0>
    8001be02:	00017517          	auipc	a0,0x17
    8001be06:	95e50513          	addi	a0,a0,-1698 # 80032760 <__func__.0+0x378>
    8001be0a:	6ba130ef          	jal	8002f4c4 <printf>
    8001be0e:	4511                	li	a0,4
    8001be10:	904e50ef          	jal	80000f14 <goto_priv>
    8001be14:	963e50ef          	jal	80001776 <reset_state>
}
    8001be18:	60e2                	ld	ra,24(sp)
    8001be1a:	8522                	mv	a0,s0
    8001be1c:	6442                	ld	s0,16(sp)
    8001be1e:	64a2                	ld	s1,8(sp)
    8001be20:	6105                	addi	sp,sp,32
    8001be22:	8082                	ret

000000008001be24 <amo_access_fault_4>:

bool amo_access_fault_4(){
    8001be24:	1101                	addi	sp,sp,-32

    TEST_START();
    8001be26:	00015597          	auipc	a1,0x15
    8001be2a:	62258593          	addi	a1,a1,1570 # 80031448 <__func__.17>
    8001be2e:	00017517          	auipc	a0,0x17
    8001be32:	89a50513          	addi	a0,a0,-1894 # 800326c8 <__func__.0+0x2e0>
bool amo_access_fault_4(){
    8001be36:	ec06                	sd	ra,24(sp)
    8001be38:	e822                	sd	s0,16(sp)
    8001be3a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001be3c:	688130ef          	jal	8002f4c4 <printf>
    8001be40:	4529                	li	a0,10
    8001be42:	370120ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001be46:	4511                	li	a0,4
    8001be48:	8cce50ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001be4c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001be50:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001be54:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001be58:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001be5c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001be60:	10000793          	li	a5,256
    8001be64:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001be68:	20000793          	li	a5,512
    8001be6c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001be70:	40000793          	li	a5,1024
    8001be74:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001be78:	6785                	lui	a5,0x1
    8001be7a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001be7e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001be82:	4785                	li	a5,1
    8001be84:	07fe                	slli	a5,a5,0x1f
    8001be86:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001be8a:	08100793          	li	a5,129
    8001be8e:	07e2                	slli	a5,a5,0x18
    8001be90:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001be94:	08000793          	li	a5,128
    8001be98:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001be9c:	67a1                	lui	a5,0x8
    8001be9e:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001bea2:	4501                	li	a0,0
    8001bea4:	870e50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bea8:	f71e40ef          	jal	80000e18 <test_setup_except_function>
    8001beac:	37ab77b7          	lui	a5,0x37ab7
    8001beb0:	4705                	li	a4,1
    8001beb2:	078a                	slli	a5,a5,0x2
    8001beb4:	1706                	slli	a4,a4,0x21
    8001beb6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001beba:	40070713          	addi	a4,a4,1024
    8001bebe:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bec2:	08c00593          	li	a1,140
    8001bec6:	0001d617          	auipc	a2,0x1d
    8001beca:	36260613          	addi	a2,a2,866 # 80039228 <__func__.0+0x6e40>
    8001bece:	00017517          	auipc	a0,0x17
    8001bed2:	81250513          	addi	a0,a0,-2030 # 800326e0 <__func__.0+0x2f8>
    8001bed6:	5ee130ef          	jal	8002f4c4 <printf>
    8001beda:	00040797          	auipc	a5,0x40
    8001bede:	1377c783          	lbu	a5,311(a5) # 8005c011 <excpt+0x1>
    8001bee2:	00040497          	auipc	s1,0x40
    8001bee6:	12e48493          	addi	s1,s1,302 # 8005c010 <excpt>
    8001beea:	00016597          	auipc	a1,0x16
    8001beee:	7ce58593          	addi	a1,a1,1998 # 800326b8 <__func__.0+0x2d0>
    8001bef2:	cf89                	beqz	a5,8001bf0c <amo_access_fault_4+0xe8>
    8001bef4:	6498                	ld	a4,8(s1)
    8001bef6:	479d                	li	a5,7
    8001bef8:	00016597          	auipc	a1,0x16
    8001befc:	7b058593          	addi	a1,a1,1968 # 800326a8 <__func__.0+0x2c0>
    8001bf00:	00f70663          	beq	a4,a5,8001bf0c <amo_access_fault_4+0xe8>
    8001bf04:	00016597          	auipc	a1,0x16
    8001bf08:	7b458593          	addi	a1,a1,1972 # 800326b8 <__func__.0+0x2d0>
    8001bf0c:	00016517          	auipc	a0,0x16
    8001bf10:	7ec50513          	addi	a0,a0,2028 # 800326f8 <__func__.0+0x310>
    8001bf14:	5b0130ef          	jal	8002f4c4 <printf>
    8001bf18:	00040797          	auipc	a5,0x40
    8001bf1c:	0f97c783          	lbu	a5,249(a5) # 8005c011 <excpt+0x1>
    8001bf20:	c789                	beqz	a5,8001bf2a <amo_access_fault_4+0x106>
    8001bf22:	6498                	ld	a4,8(s1)
    8001bf24:	479d                	li	a5,7
    8001bf26:	00f70c63          	beq	a4,a5,8001bf3e <amo_access_fault_4+0x11a>
    8001bf2a:	00016517          	auipc	a0,0x16
    8001bf2e:	7d650513          	addi	a0,a0,2006 # 80032700 <__func__.0+0x318>
    8001bf32:	592130ef          	jal	8002f4c4 <printf>
    8001bf36:	02900513          	li	a0,41
    8001bf3a:	278120ef          	jal	8002e1b2 <putchar>
    8001bf3e:	4529                	li	a0,10
    8001bf40:	272120ef          	jal	8002e1b2 <putchar>
    8001bf44:	00040417          	auipc	s0,0x40
    8001bf48:	0cd44403          	lbu	s0,205(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bf4c:	00016597          	auipc	a1,0x16
    8001bf50:	76c58593          	addi	a1,a1,1900 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bf54:	cc11                	beqz	s0,8001bf70 <amo_access_fault_4+0x14c>
    8001bf56:	6498                	ld	a4,8(s1)
    8001bf58:	479d                	li	a5,7
    TEST_END();
    8001bf5a:	00016597          	auipc	a1,0x16
    8001bf5e:	74e58593          	addi	a1,a1,1870 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bf62:	00f70763          	beq	a4,a5,8001bf70 <amo_access_fault_4+0x14c>
    8001bf66:	4401                	li	s0,0
    TEST_END();
    8001bf68:	00016597          	auipc	a1,0x16
    8001bf6c:	75058593          	addi	a1,a1,1872 # 800326b8 <__func__.0+0x2d0>
    8001bf70:	00016517          	auipc	a0,0x16
    8001bf74:	7f050513          	addi	a0,a0,2032 # 80032760 <__func__.0+0x378>
    8001bf78:	54c130ef          	jal	8002f4c4 <printf>
    8001bf7c:	4511                	li	a0,4
    8001bf7e:	f97e40ef          	jal	80000f14 <goto_priv>
    8001bf82:	ff4e50ef          	jal	80001776 <reset_state>
}
    8001bf86:	60e2                	ld	ra,24(sp)
    8001bf88:	8522                	mv	a0,s0
    8001bf8a:	6442                	ld	s0,16(sp)
    8001bf8c:	64a2                	ld	s1,8(sp)
    8001bf8e:	6105                	addi	sp,sp,32
    8001bf90:	8082                	ret

000000008001bf92 <amo_access_fault_5>:

bool amo_access_fault_5(){
    8001bf92:	1141                	addi	sp,sp,-16

    TEST_START();
    8001bf94:	00015597          	auipc	a1,0x15
    8001bf98:	4cc58593          	addi	a1,a1,1228 # 80031460 <__func__.16>
    8001bf9c:	00016517          	auipc	a0,0x16
    8001bfa0:	72c50513          	addi	a0,a0,1836 # 800326c8 <__func__.0+0x2e0>
bool amo_access_fault_5(){
    8001bfa4:	e406                	sd	ra,8(sp)
    8001bfa6:	e022                	sd	s0,0(sp)
    TEST_START();
    8001bfa8:	51c130ef          	jal	8002f4c4 <printf>
    8001bfac:	4529                	li	a0,10
    8001bfae:	204120ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001bfb2:	4511                	li	a0,4
    8001bfb4:	f61e40ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bfb8:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bfbc:	10000793          	li	a5,256
    8001bfc0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bfc4:	20000793          	li	a5,512
    8001bfc8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bfcc:	40000793          	li	a5,1024
    8001bfd0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bfd4:	6785                	lui	a5,0x1
    8001bfd6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bfda:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bfde:	4785                	li	a5,1
    8001bfe0:	07fe                	slli	a5,a5,0x1f
    8001bfe2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bfe6:	08100793          	li	a5,129
    8001bfea:	07e2                	slli	a5,a5,0x18
    8001bfec:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bff0:	67a1                	lui	a5,0x8
    8001bff2:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001bff6:	e23e40ef          	jal	80000e18 <test_setup_except_function>
    8001bffa:	37ab77b7          	lui	a5,0x37ab7
    8001bffe:	4705                	li	a4,1
    8001c000:	078a                	slli	a5,a5,0x2
    8001c002:	1706                	slli	a4,a4,0x21
    8001c004:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c008:	40070713          	addi	a4,a4,1024
    8001c00c:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001c010:	00040597          	auipc	a1,0x40
    8001c014:	0015c583          	lbu	a1,1(a1) # 8005c011 <excpt+0x1>
    8001c018:	00017517          	auipc	a0,0x17
    8001c01c:	23050513          	addi	a0,a0,560 # 80033248 <__func__.0+0xe60>
    8001c020:	4a4130ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.cause);
    8001c024:	00040597          	auipc	a1,0x40
    8001c028:	ff45b583          	ld	a1,-12(a1) # 8005c018 <excpt+0x8>
    8001c02c:	00017517          	auipc	a0,0x17
    8001c030:	21c50513          	addi	a0,a0,540 # 80033248 <__func__.0+0xe60>
    8001c034:	490130ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c038:	08c00593          	li	a1,140
    8001c03c:	0001d617          	auipc	a2,0x1d
    8001c040:	22c60613          	addi	a2,a2,556 # 80039268 <__func__.0+0x6e80>
    8001c044:	00016517          	auipc	a0,0x16
    8001c048:	69c50513          	addi	a0,a0,1692 # 800326e0 <__func__.0+0x2f8>
    8001c04c:	478130ef          	jal	8002f4c4 <printf>
    8001c050:	00040797          	auipc	a5,0x40
    8001c054:	fc17c783          	lbu	a5,-63(a5) # 8005c011 <excpt+0x1>
    8001c058:	00016597          	auipc	a1,0x16
    8001c05c:	65058593          	addi	a1,a1,1616 # 800326a8 <__func__.0+0x2c0>
    8001c060:	c789                	beqz	a5,8001c06a <amo_access_fault_5+0xd8>
    8001c062:	00016597          	auipc	a1,0x16
    8001c066:	65658593          	addi	a1,a1,1622 # 800326b8 <__func__.0+0x2d0>
    8001c06a:	00016517          	auipc	a0,0x16
    8001c06e:	68e50513          	addi	a0,a0,1678 # 800326f8 <__func__.0+0x310>
    8001c072:	452130ef          	jal	8002f4c4 <printf>
    8001c076:	00040797          	auipc	a5,0x40
    8001c07a:	f9b7c783          	lbu	a5,-101(a5) # 8005c011 <excpt+0x1>
    8001c07e:	e7a1                	bnez	a5,8001c0c6 <amo_access_fault_5+0x134>
    8001c080:	4529                	li	a0,10
    8001c082:	130120ef          	jal	8002e1b2 <putchar>
    8001c086:	00040797          	auipc	a5,0x40
    8001c08a:	f8b7c783          	lbu	a5,-117(a5) # 8005c011 <excpt+0x1>
    8001c08e:	e795                	bnez	a5,8001c0ba <amo_access_fault_5+0x128>
    8001c090:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001c092:	00016597          	auipc	a1,0x16
    8001c096:	61658593          	addi	a1,a1,1558 # 800326a8 <__func__.0+0x2c0>
    8001c09a:	00016517          	auipc	a0,0x16
    8001c09e:	6c650513          	addi	a0,a0,1734 # 80032760 <__func__.0+0x378>
    8001c0a2:	422130ef          	jal	8002f4c4 <printf>
    8001c0a6:	4511                	li	a0,4
    8001c0a8:	e6de40ef          	jal	80000f14 <goto_priv>
    8001c0ac:	ecae50ef          	jal	80001776 <reset_state>
}
    8001c0b0:	60a2                	ld	ra,8(sp)
    8001c0b2:	8522                	mv	a0,s0
    8001c0b4:	6402                	ld	s0,0(sp)
    8001c0b6:	0141                	addi	sp,sp,16
    8001c0b8:	8082                	ret
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c0ba:	4401                	li	s0,0
    TEST_END();
    8001c0bc:	00016597          	auipc	a1,0x16
    8001c0c0:	5fc58593          	addi	a1,a1,1532 # 800326b8 <__func__.0+0x2d0>
    8001c0c4:	bfd9                	j	8001c09a <amo_access_fault_5+0x108>
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c0c6:	00016517          	auipc	a0,0x16
    8001c0ca:	63a50513          	addi	a0,a0,1594 # 80032700 <__func__.0+0x318>
    8001c0ce:	3f6130ef          	jal	8002f4c4 <printf>
    8001c0d2:	02900513          	li	a0,41
    8001c0d6:	0dc120ef          	jal	8002e1b2 <putchar>
    8001c0da:	b75d                	j	8001c080 <amo_access_fault_5+0xee>

000000008001c0dc <amo_access_fault_6>:


bool amo_access_fault_6(){
    8001c0dc:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c0de:	00015597          	auipc	a1,0x15
    8001c0e2:	39a58593          	addi	a1,a1,922 # 80031478 <__func__.15>
    8001c0e6:	00016517          	auipc	a0,0x16
    8001c0ea:	5e250513          	addi	a0,a0,1506 # 800326c8 <__func__.0+0x2e0>
bool amo_access_fault_6(){
    8001c0ee:	ec06                	sd	ra,24(sp)
    8001c0f0:	e822                	sd	s0,16(sp)
    8001c0f2:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c0f4:	3d0130ef          	jal	8002f4c4 <printf>
    8001c0f8:	4529                	li	a0,10
    8001c0fa:	0b8120ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001c0fe:	4511                	li	a0,4
    8001c100:	e15e40ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c104:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c108:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c10c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c110:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c114:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c118:	10000793          	li	a5,256
    8001c11c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c120:	20000793          	li	a5,512
    8001c124:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c128:	40000793          	li	a5,1024
    8001c12c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c130:	6785                	lui	a5,0x1
    8001c132:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c136:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c13a:	4785                	li	a5,1
    8001c13c:	07fe                	slli	a5,a5,0x1f
    8001c13e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c142:	08100793          	li	a5,129
    8001c146:	07e2                	slli	a5,a5,0x18
    8001c148:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c14c:	08000793          	li	a5,128
    8001c150:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c154:	67a1                	lui	a5,0x8
    8001c156:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c15a:	450d                	li	a0,3
    8001c15c:	db9e40ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c160:	cb9e40ef          	jal	80000e18 <test_setup_except_function>
    8001c164:	37ab77b7          	lui	a5,0x37ab7
    8001c168:	4705                	li	a4,1
    8001c16a:	078a                	slli	a5,a5,0x2
    8001c16c:	1706                	slli	a4,a4,0x21
    8001c16e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c172:	40070713          	addi	a4,a4,1024
    8001c176:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c17a:	08c00593          	li	a1,140
    8001c17e:	0001d617          	auipc	a2,0x1d
    8001c182:	12a60613          	addi	a2,a2,298 # 800392a8 <__func__.0+0x6ec0>
    8001c186:	00016517          	auipc	a0,0x16
    8001c18a:	55a50513          	addi	a0,a0,1370 # 800326e0 <__func__.0+0x2f8>
    8001c18e:	336130ef          	jal	8002f4c4 <printf>
    8001c192:	00040797          	auipc	a5,0x40
    8001c196:	e7f7c783          	lbu	a5,-385(a5) # 8005c011 <excpt+0x1>
    8001c19a:	00040497          	auipc	s1,0x40
    8001c19e:	e7648493          	addi	s1,s1,-394 # 8005c010 <excpt>
    8001c1a2:	00016597          	auipc	a1,0x16
    8001c1a6:	51658593          	addi	a1,a1,1302 # 800326b8 <__func__.0+0x2d0>
    8001c1aa:	cf89                	beqz	a5,8001c1c4 <amo_access_fault_6+0xe8>
    8001c1ac:	6498                	ld	a4,8(s1)
    8001c1ae:	479d                	li	a5,7
    8001c1b0:	00016597          	auipc	a1,0x16
    8001c1b4:	4f858593          	addi	a1,a1,1272 # 800326a8 <__func__.0+0x2c0>
    8001c1b8:	00f70663          	beq	a4,a5,8001c1c4 <amo_access_fault_6+0xe8>
    8001c1bc:	00016597          	auipc	a1,0x16
    8001c1c0:	4fc58593          	addi	a1,a1,1276 # 800326b8 <__func__.0+0x2d0>
    8001c1c4:	00016517          	auipc	a0,0x16
    8001c1c8:	53450513          	addi	a0,a0,1332 # 800326f8 <__func__.0+0x310>
    8001c1cc:	2f8130ef          	jal	8002f4c4 <printf>
    8001c1d0:	00040797          	auipc	a5,0x40
    8001c1d4:	e417c783          	lbu	a5,-447(a5) # 8005c011 <excpt+0x1>
    8001c1d8:	c789                	beqz	a5,8001c1e2 <amo_access_fault_6+0x106>
    8001c1da:	6498                	ld	a4,8(s1)
    8001c1dc:	479d                	li	a5,7
    8001c1de:	00f70c63          	beq	a4,a5,8001c1f6 <amo_access_fault_6+0x11a>
    8001c1e2:	00016517          	auipc	a0,0x16
    8001c1e6:	51e50513          	addi	a0,a0,1310 # 80032700 <__func__.0+0x318>
    8001c1ea:	2da130ef          	jal	8002f4c4 <printf>
    8001c1ee:	02900513          	li	a0,41
    8001c1f2:	7c1110ef          	jal	8002e1b2 <putchar>
    8001c1f6:	4529                	li	a0,10
    8001c1f8:	7bb110ef          	jal	8002e1b2 <putchar>
    8001c1fc:	00040417          	auipc	s0,0x40
    8001c200:	e1544403          	lbu	s0,-491(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c204:	00016597          	auipc	a1,0x16
    8001c208:	4b458593          	addi	a1,a1,1204 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c20c:	cc11                	beqz	s0,8001c228 <amo_access_fault_6+0x14c>
    8001c20e:	6498                	ld	a4,8(s1)
    8001c210:	479d                	li	a5,7
    TEST_END();
    8001c212:	00016597          	auipc	a1,0x16
    8001c216:	49658593          	addi	a1,a1,1174 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c21a:	00f70763          	beq	a4,a5,8001c228 <amo_access_fault_6+0x14c>
    8001c21e:	4401                	li	s0,0
    TEST_END();
    8001c220:	00016597          	auipc	a1,0x16
    8001c224:	49858593          	addi	a1,a1,1176 # 800326b8 <__func__.0+0x2d0>
    8001c228:	00016517          	auipc	a0,0x16
    8001c22c:	53850513          	addi	a0,a0,1336 # 80032760 <__func__.0+0x378>
    8001c230:	294130ef          	jal	8002f4c4 <printf>
    8001c234:	4511                	li	a0,4
    8001c236:	cdfe40ef          	jal	80000f14 <goto_priv>
    8001c23a:	d3ce50ef          	jal	80001776 <reset_state>
}
    8001c23e:	60e2                	ld	ra,24(sp)
    8001c240:	8522                	mv	a0,s0
    8001c242:	6442                	ld	s0,16(sp)
    8001c244:	64a2                	ld	s1,8(sp)
    8001c246:	6105                	addi	sp,sp,32
    8001c248:	8082                	ret

000000008001c24a <amo_access_fault_7>:


bool amo_access_fault_7(){
    8001c24a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c24c:	00015597          	auipc	a1,0x15
    8001c250:	24458593          	addi	a1,a1,580 # 80031490 <__func__.14>
    8001c254:	00016517          	auipc	a0,0x16
    8001c258:	47450513          	addi	a0,a0,1140 # 800326c8 <__func__.0+0x2e0>
bool amo_access_fault_7(){
    8001c25c:	ec06                	sd	ra,24(sp)
    8001c25e:	e822                	sd	s0,16(sp)
    8001c260:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c262:	262130ef          	jal	8002f4c4 <printf>
    8001c266:	4529                	li	a0,10
    8001c268:	74b110ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001c26c:	4511                	li	a0,4
    8001c26e:	ca7e40ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c272:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c276:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c27a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c27e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c282:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c286:	10000793          	li	a5,256
    8001c28a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c28e:	20000793          	li	a5,512
    8001c292:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c296:	40000793          	li	a5,1024
    8001c29a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c29e:	6785                	lui	a5,0x1
    8001c2a0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c2a4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c2a8:	4785                	li	a5,1
    8001c2aa:	07fe                	slli	a5,a5,0x1f
    8001c2ac:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c2b0:	08100793          	li	a5,129
    8001c2b4:	07e2                	slli	a5,a5,0x18
    8001c2b6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c2ba:	08000793          	li	a5,128
    8001c2be:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c2c2:	67a1                	lui	a5,0x8
    8001c2c4:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001c2c8:	4505                	li	a0,1
    8001c2ca:	c4be40ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c2ce:	b4be40ef          	jal	80000e18 <test_setup_except_function>
    8001c2d2:	37ab77b7          	lui	a5,0x37ab7
    8001c2d6:	4705                	li	a4,1
    8001c2d8:	078a                	slli	a5,a5,0x2
    8001c2da:	1706                	slli	a4,a4,0x21
    8001c2dc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c2e0:	40070713          	addi	a4,a4,1024
    8001c2e4:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c2e8:	08c00593          	li	a1,140
    8001c2ec:	0001d617          	auipc	a2,0x1d
    8001c2f0:	ffc60613          	addi	a2,a2,-4 # 800392e8 <__func__.0+0x6f00>
    8001c2f4:	00016517          	auipc	a0,0x16
    8001c2f8:	3ec50513          	addi	a0,a0,1004 # 800326e0 <__func__.0+0x2f8>
    8001c2fc:	1c8130ef          	jal	8002f4c4 <printf>
    8001c300:	00040797          	auipc	a5,0x40
    8001c304:	d117c783          	lbu	a5,-751(a5) # 8005c011 <excpt+0x1>
    8001c308:	00040497          	auipc	s1,0x40
    8001c30c:	d0848493          	addi	s1,s1,-760 # 8005c010 <excpt>
    8001c310:	00016597          	auipc	a1,0x16
    8001c314:	3a858593          	addi	a1,a1,936 # 800326b8 <__func__.0+0x2d0>
    8001c318:	cf89                	beqz	a5,8001c332 <amo_access_fault_7+0xe8>
    8001c31a:	6498                	ld	a4,8(s1)
    8001c31c:	479d                	li	a5,7
    8001c31e:	00016597          	auipc	a1,0x16
    8001c322:	38a58593          	addi	a1,a1,906 # 800326a8 <__func__.0+0x2c0>
    8001c326:	00f70663          	beq	a4,a5,8001c332 <amo_access_fault_7+0xe8>
    8001c32a:	00016597          	auipc	a1,0x16
    8001c32e:	38e58593          	addi	a1,a1,910 # 800326b8 <__func__.0+0x2d0>
    8001c332:	00016517          	auipc	a0,0x16
    8001c336:	3c650513          	addi	a0,a0,966 # 800326f8 <__func__.0+0x310>
    8001c33a:	18a130ef          	jal	8002f4c4 <printf>
    8001c33e:	00040797          	auipc	a5,0x40
    8001c342:	cd37c783          	lbu	a5,-813(a5) # 8005c011 <excpt+0x1>
    8001c346:	c789                	beqz	a5,8001c350 <amo_access_fault_7+0x106>
    8001c348:	6498                	ld	a4,8(s1)
    8001c34a:	479d                	li	a5,7
    8001c34c:	00f70c63          	beq	a4,a5,8001c364 <amo_access_fault_7+0x11a>
    8001c350:	00016517          	auipc	a0,0x16
    8001c354:	3b050513          	addi	a0,a0,944 # 80032700 <__func__.0+0x318>
    8001c358:	16c130ef          	jal	8002f4c4 <printf>
    8001c35c:	02900513          	li	a0,41
    8001c360:	653110ef          	jal	8002e1b2 <putchar>
    8001c364:	4529                	li	a0,10
    8001c366:	64d110ef          	jal	8002e1b2 <putchar>
    8001c36a:	00040417          	auipc	s0,0x40
    8001c36e:	ca744403          	lbu	s0,-857(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c372:	00016597          	auipc	a1,0x16
    8001c376:	34658593          	addi	a1,a1,838 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c37a:	cc11                	beqz	s0,8001c396 <amo_access_fault_7+0x14c>
    8001c37c:	6498                	ld	a4,8(s1)
    8001c37e:	479d                	li	a5,7
    TEST_END();
    8001c380:	00016597          	auipc	a1,0x16
    8001c384:	32858593          	addi	a1,a1,808 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c388:	00f70763          	beq	a4,a5,8001c396 <amo_access_fault_7+0x14c>
    8001c38c:	4401                	li	s0,0
    TEST_END();
    8001c38e:	00016597          	auipc	a1,0x16
    8001c392:	32a58593          	addi	a1,a1,810 # 800326b8 <__func__.0+0x2d0>
    8001c396:	00016517          	auipc	a0,0x16
    8001c39a:	3ca50513          	addi	a0,a0,970 # 80032760 <__func__.0+0x378>
    8001c39e:	126130ef          	jal	8002f4c4 <printf>
    8001c3a2:	4511                	li	a0,4
    8001c3a4:	b71e40ef          	jal	80000f14 <goto_priv>
    8001c3a8:	bcee50ef          	jal	80001776 <reset_state>
}
    8001c3ac:	60e2                	ld	ra,24(sp)
    8001c3ae:	8522                	mv	a0,s0
    8001c3b0:	6442                	ld	s0,16(sp)
    8001c3b2:	64a2                	ld	s1,8(sp)
    8001c3b4:	6105                	addi	sp,sp,32
    8001c3b6:	8082                	ret

000000008001c3b8 <amo_access_fault_8>:

bool amo_access_fault_8(){
    8001c3b8:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c3ba:	00015597          	auipc	a1,0x15
    8001c3be:	0ee58593          	addi	a1,a1,238 # 800314a8 <__func__.13>
    8001c3c2:	00016517          	auipc	a0,0x16
    8001c3c6:	30650513          	addi	a0,a0,774 # 800326c8 <__func__.0+0x2e0>
bool amo_access_fault_8(){
    8001c3ca:	ec06                	sd	ra,24(sp)
    8001c3cc:	e822                	sd	s0,16(sp)
    8001c3ce:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c3d0:	0f4130ef          	jal	8002f4c4 <printf>
    8001c3d4:	4529                	li	a0,10
    8001c3d6:	5dd110ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001c3da:	4511                	li	a0,4
    8001c3dc:	b39e40ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c3e0:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c3e4:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c3e8:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c3ec:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c3f0:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c3f4:	10000793          	li	a5,256
    8001c3f8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c3fc:	20000793          	li	a5,512
    8001c400:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c404:	40000793          	li	a5,1024
    8001c408:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c40c:	6785                	lui	a5,0x1
    8001c40e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c412:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c416:	4785                	li	a5,1
    8001c418:	07fe                	slli	a5,a5,0x1f
    8001c41a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c41e:	08100793          	li	a5,129
    8001c422:	07e2                	slli	a5,a5,0x18
    8001c424:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c428:	08000793          	li	a5,128
    8001c42c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c430:	67a1                	lui	a5,0x8
    8001c432:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c436:	4501                	li	a0,0
    8001c438:	adde40ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c43c:	9dde40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8001c440:	37ab77b7          	lui	a5,0x37ab7
    8001c444:	4705                	li	a4,1
    8001c446:	078a                	slli	a5,a5,0x2
    8001c448:	1706                	slli	a4,a4,0x21
    8001c44a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c44e:	40070713          	addi	a4,a4,1024
    8001c452:	40f737af          	amoor.d	a5,a5,(a4)
    
    amoor_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c456:	08c00593          	li	a1,140
    8001c45a:	0001d617          	auipc	a2,0x1d
    8001c45e:	ece60613          	addi	a2,a2,-306 # 80039328 <__func__.0+0x6f40>
    8001c462:	00016517          	auipc	a0,0x16
    8001c466:	27e50513          	addi	a0,a0,638 # 800326e0 <__func__.0+0x2f8>
    8001c46a:	05a130ef          	jal	8002f4c4 <printf>
    8001c46e:	00040797          	auipc	a5,0x40
    8001c472:	ba37c783          	lbu	a5,-1117(a5) # 8005c011 <excpt+0x1>
    8001c476:	00040497          	auipc	s1,0x40
    8001c47a:	b9a48493          	addi	s1,s1,-1126 # 8005c010 <excpt>
    8001c47e:	00016597          	auipc	a1,0x16
    8001c482:	23a58593          	addi	a1,a1,570 # 800326b8 <__func__.0+0x2d0>
    8001c486:	cf89                	beqz	a5,8001c4a0 <amo_access_fault_8+0xe8>
    8001c488:	6498                	ld	a4,8(s1)
    8001c48a:	479d                	li	a5,7
    8001c48c:	00016597          	auipc	a1,0x16
    8001c490:	21c58593          	addi	a1,a1,540 # 800326a8 <__func__.0+0x2c0>
    8001c494:	00f70663          	beq	a4,a5,8001c4a0 <amo_access_fault_8+0xe8>
    8001c498:	00016597          	auipc	a1,0x16
    8001c49c:	22058593          	addi	a1,a1,544 # 800326b8 <__func__.0+0x2d0>
    8001c4a0:	00016517          	auipc	a0,0x16
    8001c4a4:	25850513          	addi	a0,a0,600 # 800326f8 <__func__.0+0x310>
    8001c4a8:	01c130ef          	jal	8002f4c4 <printf>
    8001c4ac:	00040797          	auipc	a5,0x40
    8001c4b0:	b657c783          	lbu	a5,-1179(a5) # 8005c011 <excpt+0x1>
    8001c4b4:	c789                	beqz	a5,8001c4be <amo_access_fault_8+0x106>
    8001c4b6:	6498                	ld	a4,8(s1)
    8001c4b8:	479d                	li	a5,7
    8001c4ba:	00f70c63          	beq	a4,a5,8001c4d2 <amo_access_fault_8+0x11a>
    8001c4be:	00016517          	auipc	a0,0x16
    8001c4c2:	24250513          	addi	a0,a0,578 # 80032700 <__func__.0+0x318>
    8001c4c6:	7ff120ef          	jal	8002f4c4 <printf>
    8001c4ca:	02900513          	li	a0,41
    8001c4ce:	4e5110ef          	jal	8002e1b2 <putchar>
    8001c4d2:	4529                	li	a0,10
    8001c4d4:	4df110ef          	jal	8002e1b2 <putchar>
    8001c4d8:	00040417          	auipc	s0,0x40
    8001c4dc:	b3944403          	lbu	s0,-1223(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c4e0:	00016597          	auipc	a1,0x16
    8001c4e4:	1d858593          	addi	a1,a1,472 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c4e8:	cc11                	beqz	s0,8001c504 <amo_access_fault_8+0x14c>
    8001c4ea:	6498                	ld	a4,8(s1)
    8001c4ec:	479d                	li	a5,7
    TEST_END();
    8001c4ee:	00016597          	auipc	a1,0x16
    8001c4f2:	1ba58593          	addi	a1,a1,442 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c4f6:	00f70763          	beq	a4,a5,8001c504 <amo_access_fault_8+0x14c>
    8001c4fa:	4401                	li	s0,0
    TEST_END();
    8001c4fc:	00016597          	auipc	a1,0x16
    8001c500:	1bc58593          	addi	a1,a1,444 # 800326b8 <__func__.0+0x2d0>
    8001c504:	00016517          	auipc	a0,0x16
    8001c508:	25c50513          	addi	a0,a0,604 # 80032760 <__func__.0+0x378>
    8001c50c:	7b9120ef          	jal	8002f4c4 <printf>
    8001c510:	4511                	li	a0,4
    8001c512:	a03e40ef          	jal	80000f14 <goto_priv>
    8001c516:	a60e50ef          	jal	80001776 <reset_state>
}
    8001c51a:	60e2                	ld	ra,24(sp)
    8001c51c:	8522                	mv	a0,s0
    8001c51e:	6442                	ld	s0,16(sp)
    8001c520:	64a2                	ld	s1,8(sp)
    8001c522:	6105                	addi	sp,sp,32
    8001c524:	8082                	ret

000000008001c526 <amo_access_fault_9>:

bool amo_access_fault_9(){
    8001c526:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c528:	00015597          	auipc	a1,0x15
    8001c52c:	f9858593          	addi	a1,a1,-104 # 800314c0 <__func__.12>
    8001c530:	00016517          	auipc	a0,0x16
    8001c534:	19850513          	addi	a0,a0,408 # 800326c8 <__func__.0+0x2e0>
bool amo_access_fault_9(){
    8001c538:	ec06                	sd	ra,24(sp)
    8001c53a:	e822                	sd	s0,16(sp)
    8001c53c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c53e:	787120ef          	jal	8002f4c4 <printf>
    8001c542:	4529                	li	a0,10
    8001c544:	46f110ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001c548:	4511                	li	a0,4
    8001c54a:	9cbe40ef          	jal	80000f14 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c54e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c552:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c556:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c55a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c55e:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c562:	10000793          	li	a5,256
    8001c566:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c56a:	20000793          	li	a5,512
    8001c56e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c572:	40000793          	li	a5,1024
    8001c576:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c57a:	6785                	lui	a5,0x1
    8001c57c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c580:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c584:	4785                	li	a5,1
    8001c586:	07fe                	slli	a5,a5,0x1f
    8001c588:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c58c:	08100793          	li	a5,129
    8001c590:	07e2                	slli	a5,a5,0x18
    8001c592:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c596:	08000793          	li	a5,128
    8001c59a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c59e:	67a1                	lui	a5,0x8
    8001c5a0:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c5a4:	4501                	li	a0,0
    8001c5a6:	96fe40ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c5aa:	86fe40ef          	jal	80000e18 <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8001c5ae:	37ab77b7          	lui	a5,0x37ab7
    8001c5b2:	4705                	li	a4,1
    8001c5b4:	078a                	slli	a5,a5,0x2
    8001c5b6:	170e                	slli	a4,a4,0x23
    8001c5b8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c5bc:	1761                	addi	a4,a4,-8
    8001c5be:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c5c2:	08c00593          	li	a1,140
    8001c5c6:	0001d617          	auipc	a2,0x1d
    8001c5ca:	da260613          	addi	a2,a2,-606 # 80039368 <__func__.0+0x6f80>
    8001c5ce:	00016517          	auipc	a0,0x16
    8001c5d2:	11250513          	addi	a0,a0,274 # 800326e0 <__func__.0+0x2f8>
    8001c5d6:	6ef120ef          	jal	8002f4c4 <printf>
    8001c5da:	00040797          	auipc	a5,0x40
    8001c5de:	a377c783          	lbu	a5,-1481(a5) # 8005c011 <excpt+0x1>
    8001c5e2:	00040497          	auipc	s1,0x40
    8001c5e6:	a2e48493          	addi	s1,s1,-1490 # 8005c010 <excpt>
    8001c5ea:	00016597          	auipc	a1,0x16
    8001c5ee:	0ce58593          	addi	a1,a1,206 # 800326b8 <__func__.0+0x2d0>
    8001c5f2:	cf89                	beqz	a5,8001c60c <amo_access_fault_9+0xe6>
    8001c5f4:	6498                	ld	a4,8(s1)
    8001c5f6:	479d                	li	a5,7
    8001c5f8:	00016597          	auipc	a1,0x16
    8001c5fc:	0b058593          	addi	a1,a1,176 # 800326a8 <__func__.0+0x2c0>
    8001c600:	00f70663          	beq	a4,a5,8001c60c <amo_access_fault_9+0xe6>
    8001c604:	00016597          	auipc	a1,0x16
    8001c608:	0b458593          	addi	a1,a1,180 # 800326b8 <__func__.0+0x2d0>
    8001c60c:	00016517          	auipc	a0,0x16
    8001c610:	0ec50513          	addi	a0,a0,236 # 800326f8 <__func__.0+0x310>
    8001c614:	6b1120ef          	jal	8002f4c4 <printf>
    8001c618:	00040797          	auipc	a5,0x40
    8001c61c:	9f97c783          	lbu	a5,-1543(a5) # 8005c011 <excpt+0x1>
    8001c620:	c789                	beqz	a5,8001c62a <amo_access_fault_9+0x104>
    8001c622:	6498                	ld	a4,8(s1)
    8001c624:	479d                	li	a5,7
    8001c626:	00f70c63          	beq	a4,a5,8001c63e <amo_access_fault_9+0x118>
    8001c62a:	00016517          	auipc	a0,0x16
    8001c62e:	0d650513          	addi	a0,a0,214 # 80032700 <__func__.0+0x318>
    8001c632:	693120ef          	jal	8002f4c4 <printf>
    8001c636:	02900513          	li	a0,41
    8001c63a:	379110ef          	jal	8002e1b2 <putchar>
    8001c63e:	4529                	li	a0,10
    8001c640:	373110ef          	jal	8002e1b2 <putchar>
    8001c644:	00040417          	auipc	s0,0x40
    8001c648:	9cd44403          	lbu	s0,-1587(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c64c:	00016597          	auipc	a1,0x16
    8001c650:	06c58593          	addi	a1,a1,108 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c654:	cc11                	beqz	s0,8001c670 <amo_access_fault_9+0x14a>
    8001c656:	6498                	ld	a4,8(s1)
    8001c658:	479d                	li	a5,7
    TEST_END();
    8001c65a:	00016597          	auipc	a1,0x16
    8001c65e:	04e58593          	addi	a1,a1,78 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c662:	00f70763          	beq	a4,a5,8001c670 <amo_access_fault_9+0x14a>
    8001c666:	4401                	li	s0,0
    TEST_END();
    8001c668:	00016597          	auipc	a1,0x16
    8001c66c:	05058593          	addi	a1,a1,80 # 800326b8 <__func__.0+0x2d0>
    8001c670:	00016517          	auipc	a0,0x16
    8001c674:	0f050513          	addi	a0,a0,240 # 80032760 <__func__.0+0x378>
    8001c678:	64d120ef          	jal	8002f4c4 <printf>
    8001c67c:	4511                	li	a0,4
    8001c67e:	897e40ef          	jal	80000f14 <goto_priv>
    8001c682:	8f4e50ef          	jal	80001776 <reset_state>
}
    8001c686:	60e2                	ld	ra,24(sp)
    8001c688:	8522                	mv	a0,s0
    8001c68a:	6442                	ld	s0,16(sp)
    8001c68c:	64a2                	ld	s1,8(sp)
    8001c68e:	6105                	addi	sp,sp,32
    8001c690:	8082                	ret

000000008001c692 <amo_access_fault_10>:


bool amo_access_fault_10(){
    8001c692:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c694:	00015597          	auipc	a1,0x15
    8001c698:	e4458593          	addi	a1,a1,-444 # 800314d8 <__func__.11>
    8001c69c:	00016517          	auipc	a0,0x16
    8001c6a0:	02c50513          	addi	a0,a0,44 # 800326c8 <__func__.0+0x2e0>
bool amo_access_fault_10(){
    8001c6a4:	ec06                	sd	ra,24(sp)
    8001c6a6:	e822                	sd	s0,16(sp)
    8001c6a8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c6aa:	61b120ef          	jal	8002f4c4 <printf>
    8001c6ae:	4529                	li	a0,10
    8001c6b0:	303110ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001c6b4:	4511                	li	a0,4
    8001c6b6:	85fe40ef          	jal	80000f14 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c6ba:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c6be:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c6c2:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c6c6:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c6ca:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c6ce:	4785                	li	a5,1
    8001c6d0:	07fe                	slli	a5,a5,0x1f
    8001c6d2:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c6d6:	08000793          	li	a5,128
    8001c6da:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c6de:	450d                	li	a0,3
    8001c6e0:	835e40ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c6e4:	f34e40ef          	jal	80000e18 <test_setup_except_function>
    8001c6e8:	37ab77b7          	lui	a5,0x37ab7
    8001c6ec:	078a                	slli	a5,a5,0x2
    8001c6ee:	4705                	li	a4,1
    8001c6f0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c6f4:	1706                	slli	a4,a4,0x21
    8001c6f6:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x80000000UL << 2 ,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c6fa:	08c00593          	li	a1,140
    8001c6fe:	0001d617          	auipc	a2,0x1d
    8001c702:	ce260613          	addi	a2,a2,-798 # 800393e0 <__func__.0+0x6ff8>
    8001c706:	00016517          	auipc	a0,0x16
    8001c70a:	fda50513          	addi	a0,a0,-38 # 800326e0 <__func__.0+0x2f8>
    8001c70e:	5b7120ef          	jal	8002f4c4 <printf>
    8001c712:	00040797          	auipc	a5,0x40
    8001c716:	8ff7c783          	lbu	a5,-1793(a5) # 8005c011 <excpt+0x1>
    8001c71a:	00040497          	auipc	s1,0x40
    8001c71e:	8f648493          	addi	s1,s1,-1802 # 8005c010 <excpt>
    8001c722:	00016597          	auipc	a1,0x16
    8001c726:	f9658593          	addi	a1,a1,-106 # 800326b8 <__func__.0+0x2d0>
    8001c72a:	cf89                	beqz	a5,8001c744 <amo_access_fault_10+0xb2>
    8001c72c:	6498                	ld	a4,8(s1)
    8001c72e:	479d                	li	a5,7
    8001c730:	00016597          	auipc	a1,0x16
    8001c734:	f7858593          	addi	a1,a1,-136 # 800326a8 <__func__.0+0x2c0>
    8001c738:	00f70663          	beq	a4,a5,8001c744 <amo_access_fault_10+0xb2>
    8001c73c:	00016597          	auipc	a1,0x16
    8001c740:	f7c58593          	addi	a1,a1,-132 # 800326b8 <__func__.0+0x2d0>
    8001c744:	00016517          	auipc	a0,0x16
    8001c748:	fb450513          	addi	a0,a0,-76 # 800326f8 <__func__.0+0x310>
    8001c74c:	579120ef          	jal	8002f4c4 <printf>
    8001c750:	00040797          	auipc	a5,0x40
    8001c754:	8c17c783          	lbu	a5,-1855(a5) # 8005c011 <excpt+0x1>
    8001c758:	c789                	beqz	a5,8001c762 <amo_access_fault_10+0xd0>
    8001c75a:	6498                	ld	a4,8(s1)
    8001c75c:	479d                	li	a5,7
    8001c75e:	00f70c63          	beq	a4,a5,8001c776 <amo_access_fault_10+0xe4>
    8001c762:	00016517          	auipc	a0,0x16
    8001c766:	f9e50513          	addi	a0,a0,-98 # 80032700 <__func__.0+0x318>
    8001c76a:	55b120ef          	jal	8002f4c4 <printf>
    8001c76e:	02900513          	li	a0,41
    8001c772:	241110ef          	jal	8002e1b2 <putchar>
    8001c776:	4529                	li	a0,10
    8001c778:	23b110ef          	jal	8002e1b2 <putchar>
    8001c77c:	00040417          	auipc	s0,0x40
    8001c780:	89544403          	lbu	s0,-1899(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c784:	00016597          	auipc	a1,0x16
    8001c788:	f3458593          	addi	a1,a1,-204 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c78c:	cc11                	beqz	s0,8001c7a8 <amo_access_fault_10+0x116>
    8001c78e:	6498                	ld	a4,8(s1)
    8001c790:	479d                	li	a5,7
    TEST_END();
    8001c792:	00016597          	auipc	a1,0x16
    8001c796:	f1658593          	addi	a1,a1,-234 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c79a:	00f70763          	beq	a4,a5,8001c7a8 <amo_access_fault_10+0x116>
    8001c79e:	4401                	li	s0,0
    TEST_END();
    8001c7a0:	00016597          	auipc	a1,0x16
    8001c7a4:	f1858593          	addi	a1,a1,-232 # 800326b8 <__func__.0+0x2d0>
    8001c7a8:	00016517          	auipc	a0,0x16
    8001c7ac:	fb850513          	addi	a0,a0,-72 # 80032760 <__func__.0+0x378>
    8001c7b0:	515120ef          	jal	8002f4c4 <printf>
    8001c7b4:	4511                	li	a0,4
    8001c7b6:	f5ee40ef          	jal	80000f14 <goto_priv>
    8001c7ba:	fbde40ef          	jal	80001776 <reset_state>
}
    8001c7be:	60e2                	ld	ra,24(sp)
    8001c7c0:	8522                	mv	a0,s0
    8001c7c2:	6442                	ld	s0,16(sp)
    8001c7c4:	64a2                	ld	s1,8(sp)
    8001c7c6:	6105                	addi	sp,sp,32
    8001c7c8:	8082                	ret

000000008001c7ca <instruction_access_fault_1>:


bool instruction_access_fault_1(){
    8001c7ca:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c7cc:	00015597          	auipc	a1,0x15
    8001c7d0:	d2458593          	addi	a1,a1,-732 # 800314f0 <__func__.10>
    8001c7d4:	00016517          	auipc	a0,0x16
    8001c7d8:	ef450513          	addi	a0,a0,-268 # 800326c8 <__func__.0+0x2e0>
bool instruction_access_fault_1(){
    8001c7dc:	ec06                	sd	ra,24(sp)
    8001c7de:	e822                	sd	s0,16(sp)
    8001c7e0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c7e2:	4e3120ef          	jal	8002f4c4 <printf>
    8001c7e6:	4529                	li	a0,10
    8001c7e8:	1cb110ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001c7ec:	4511                	li	a0,4
    8001c7ee:	f26e40ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c7f2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c7f6:	10000793          	li	a5,256
    8001c7fa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c7fe:	20000793          	li	a5,512
    8001c802:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c806:	40000793          	li	a5,1024
    8001c80a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c80e:	6785                	lui	a5,0x1
    8001c810:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c814:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c818:	4785                	li	a5,1
    8001c81a:	07fe                	slli	a5,a5,0x1f
    8001c81c:	4485                	li	s1,1
    8001c81e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c822:	08100793          	li	a5,129
    8001c826:	07e2                	slli	a5,a5,0x18
    8001c828:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c82c:	67a1                	lui	a5,0x8
    8001c82e:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001c832:	de6e40ef          	jal	80000e18 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001c836:	02149793          	slli	a5,s1,0x21
    8001c83a:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001c83e:	0003f417          	auipc	s0,0x3f
    8001c842:	7d240413          	addi	s0,s0,2002 # 8005c010 <excpt>
    8001c846:	00000297          	auipc	t0,0x0
    8001c84a:	00c28293          	addi	t0,t0,12 # 8001c852 <instruction_access_fault_1+0x88>
    8001c84e:	02543c23          	sd	t0,56(s0)
    8001c852:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001c854:	0003f597          	auipc	a1,0x3f
    8001c858:	7bd5c583          	lbu	a1,1981(a1) # 8005c011 <excpt+0x1>
    8001c85c:	00017517          	auipc	a0,0x17
    8001c860:	9ec50513          	addi	a0,a0,-1556 # 80033248 <__func__.0+0xe60>
    8001c864:	461120ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.cause);
    8001c868:	640c                	ld	a1,8(s0)
    8001c86a:	00017517          	auipc	a0,0x17
    8001c86e:	9de50513          	addi	a0,a0,-1570 # 80033248 <__func__.0+0xe60>
    8001c872:	453120ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c876:	08c00593          	li	a1,140
    8001c87a:	0001d617          	auipc	a2,0x1d
    8001c87e:	bd660613          	addi	a2,a2,-1066 # 80039450 <__func__.0+0x7068>
    8001c882:	00016517          	auipc	a0,0x16
    8001c886:	e5e50513          	addi	a0,a0,-418 # 800326e0 <__func__.0+0x2f8>
    8001c88a:	43b120ef          	jal	8002f4c4 <printf>
    8001c88e:	0003f797          	auipc	a5,0x3f
    8001c892:	7837c783          	lbu	a5,1923(a5) # 8005c011 <excpt+0x1>
    8001c896:	00016597          	auipc	a1,0x16
    8001c89a:	e2258593          	addi	a1,a1,-478 # 800326b8 <__func__.0+0x2d0>
    8001c89e:	cf81                	beqz	a5,8001c8b6 <instruction_access_fault_1+0xec>
    8001c8a0:	641c                	ld	a5,8(s0)
    8001c8a2:	00016597          	auipc	a1,0x16
    8001c8a6:	e0658593          	addi	a1,a1,-506 # 800326a8 <__func__.0+0x2c0>
    8001c8aa:	00978663          	beq	a5,s1,8001c8b6 <instruction_access_fault_1+0xec>
    8001c8ae:	00016597          	auipc	a1,0x16
    8001c8b2:	e0a58593          	addi	a1,a1,-502 # 800326b8 <__func__.0+0x2d0>
    8001c8b6:	00016517          	auipc	a0,0x16
    8001c8ba:	e4250513          	addi	a0,a0,-446 # 800326f8 <__func__.0+0x310>
    8001c8be:	407120ef          	jal	8002f4c4 <printf>
    8001c8c2:	0003f797          	auipc	a5,0x3f
    8001c8c6:	74f7c783          	lbu	a5,1871(a5) # 8005c011 <excpt+0x1>
    8001c8ca:	c789                	beqz	a5,8001c8d4 <instruction_access_fault_1+0x10a>
    8001c8cc:	6418                	ld	a4,8(s0)
    8001c8ce:	4785                	li	a5,1
    8001c8d0:	00f70c63          	beq	a4,a5,8001c8e8 <instruction_access_fault_1+0x11e>
    8001c8d4:	00016517          	auipc	a0,0x16
    8001c8d8:	e2c50513          	addi	a0,a0,-468 # 80032700 <__func__.0+0x318>
    8001c8dc:	3e9120ef          	jal	8002f4c4 <printf>
    8001c8e0:	02900513          	li	a0,41
    8001c8e4:	0cf110ef          	jal	8002e1b2 <putchar>
    8001c8e8:	4529                	li	a0,10
    8001c8ea:	0c9110ef          	jal	8002e1b2 <putchar>
    8001c8ee:	0003f497          	auipc	s1,0x3f
    8001c8f2:	7234c483          	lbu	s1,1827(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001c8f6:	00016597          	auipc	a1,0x16
    8001c8fa:	dc258593          	addi	a1,a1,-574 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c8fe:	cc91                	beqz	s1,8001c91a <instruction_access_fault_1+0x150>
    8001c900:	6418                	ld	a4,8(s0)
    8001c902:	4785                	li	a5,1
    TEST_END();
    8001c904:	00016597          	auipc	a1,0x16
    8001c908:	da458593          	addi	a1,a1,-604 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c90c:	00f70763          	beq	a4,a5,8001c91a <instruction_access_fault_1+0x150>
    8001c910:	4481                	li	s1,0
    TEST_END();
    8001c912:	00016597          	auipc	a1,0x16
    8001c916:	da658593          	addi	a1,a1,-602 # 800326b8 <__func__.0+0x2d0>
    8001c91a:	00016517          	auipc	a0,0x16
    8001c91e:	e4650513          	addi	a0,a0,-442 # 80032760 <__func__.0+0x378>
    8001c922:	3a3120ef          	jal	8002f4c4 <printf>
    8001c926:	4511                	li	a0,4
    8001c928:	dece40ef          	jal	80000f14 <goto_priv>
    8001c92c:	e4be40ef          	jal	80001776 <reset_state>
}
    8001c930:	60e2                	ld	ra,24(sp)
    8001c932:	6442                	ld	s0,16(sp)
    8001c934:	8526                	mv	a0,s1
    8001c936:	64a2                	ld	s1,8(sp)
    8001c938:	6105                	addi	sp,sp,32
    8001c93a:	8082                	ret

000000008001c93c <instruction_access_fault_2>:

bool instruction_access_fault_2(){
    8001c93c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c93e:	00015597          	auipc	a1,0x15
    8001c942:	bd258593          	addi	a1,a1,-1070 # 80031510 <__func__.9>
    8001c946:	00016517          	auipc	a0,0x16
    8001c94a:	d8250513          	addi	a0,a0,-638 # 800326c8 <__func__.0+0x2e0>
bool instruction_access_fault_2(){
    8001c94e:	ec06                	sd	ra,24(sp)
    8001c950:	e822                	sd	s0,16(sp)
    8001c952:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c954:	371120ef          	jal	8002f4c4 <printf>
    8001c958:	4529                	li	a0,10
    8001c95a:	059110ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001c95e:	4511                	li	a0,4
    8001c960:	db4e40ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c964:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c968:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c96c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c970:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c974:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c978:	10000793          	li	a5,256
    8001c97c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c980:	20000793          	li	a5,512
    8001c984:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c988:	40000793          	li	a5,1024
    8001c98c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c990:	6785                	lui	a5,0x1
    8001c992:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c996:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c99a:	4785                	li	a5,1
    8001c99c:	07fe                	slli	a5,a5,0x1f
    8001c99e:	4485                	li	s1,1
    8001c9a0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c9a4:	08100793          	li	a5,129
    8001c9a8:	07e2                	slli	a5,a5,0x18
    8001c9aa:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c9ae:	08000793          	li	a5,128
    8001c9b2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c9b6:	67a1                	lui	a5,0x8
    8001c9b8:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c9bc:	450d                	li	a0,3
    8001c9be:	d56e40ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c9c2:	c56e40ef          	jal	80000e18 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001c9c6:	02149793          	slli	a5,s1,0x21
    8001c9ca:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001c9ce:	0003f417          	auipc	s0,0x3f
    8001c9d2:	64240413          	addi	s0,s0,1602 # 8005c010 <excpt>
    8001c9d6:	00000297          	auipc	t0,0x0
    8001c9da:	00c28293          	addi	t0,t0,12 # 8001c9e2 <instruction_access_fault_2+0xa6>
    8001c9de:	02543c23          	sd	t0,56(s0)
    8001c9e2:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c9e4:	08c00593          	li	a1,140
    8001c9e8:	0001d617          	auipc	a2,0x1d
    8001c9ec:	ab060613          	addi	a2,a2,-1360 # 80039498 <__func__.0+0x70b0>
    8001c9f0:	00016517          	auipc	a0,0x16
    8001c9f4:	cf050513          	addi	a0,a0,-784 # 800326e0 <__func__.0+0x2f8>
    8001c9f8:	2cd120ef          	jal	8002f4c4 <printf>
    8001c9fc:	0003f797          	auipc	a5,0x3f
    8001ca00:	6157c783          	lbu	a5,1557(a5) # 8005c011 <excpt+0x1>
    8001ca04:	00016597          	auipc	a1,0x16
    8001ca08:	cb458593          	addi	a1,a1,-844 # 800326b8 <__func__.0+0x2d0>
    8001ca0c:	cf81                	beqz	a5,8001ca24 <instruction_access_fault_2+0xe8>
    8001ca0e:	641c                	ld	a5,8(s0)
    8001ca10:	00016597          	auipc	a1,0x16
    8001ca14:	c9858593          	addi	a1,a1,-872 # 800326a8 <__func__.0+0x2c0>
    8001ca18:	00978663          	beq	a5,s1,8001ca24 <instruction_access_fault_2+0xe8>
    8001ca1c:	00016597          	auipc	a1,0x16
    8001ca20:	c9c58593          	addi	a1,a1,-868 # 800326b8 <__func__.0+0x2d0>
    8001ca24:	00016517          	auipc	a0,0x16
    8001ca28:	cd450513          	addi	a0,a0,-812 # 800326f8 <__func__.0+0x310>
    8001ca2c:	299120ef          	jal	8002f4c4 <printf>
    8001ca30:	0003f797          	auipc	a5,0x3f
    8001ca34:	5e17c783          	lbu	a5,1505(a5) # 8005c011 <excpt+0x1>
    8001ca38:	c789                	beqz	a5,8001ca42 <instruction_access_fault_2+0x106>
    8001ca3a:	6418                	ld	a4,8(s0)
    8001ca3c:	4785                	li	a5,1
    8001ca3e:	00f70c63          	beq	a4,a5,8001ca56 <instruction_access_fault_2+0x11a>
    8001ca42:	00016517          	auipc	a0,0x16
    8001ca46:	cbe50513          	addi	a0,a0,-834 # 80032700 <__func__.0+0x318>
    8001ca4a:	27b120ef          	jal	8002f4c4 <printf>
    8001ca4e:	02900513          	li	a0,41
    8001ca52:	760110ef          	jal	8002e1b2 <putchar>
    8001ca56:	4529                	li	a0,10
    8001ca58:	75a110ef          	jal	8002e1b2 <putchar>
    8001ca5c:	0003f497          	auipc	s1,0x3f
    8001ca60:	5b54c483          	lbu	s1,1461(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001ca64:	00016597          	auipc	a1,0x16
    8001ca68:	c5458593          	addi	a1,a1,-940 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ca6c:	cc91                	beqz	s1,8001ca88 <instruction_access_fault_2+0x14c>
    8001ca6e:	6418                	ld	a4,8(s0)
    8001ca70:	4785                	li	a5,1
    TEST_END();
    8001ca72:	00016597          	auipc	a1,0x16
    8001ca76:	c3658593          	addi	a1,a1,-970 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ca7a:	00f70763          	beq	a4,a5,8001ca88 <instruction_access_fault_2+0x14c>
    8001ca7e:	4481                	li	s1,0
    TEST_END();
    8001ca80:	00016597          	auipc	a1,0x16
    8001ca84:	c3858593          	addi	a1,a1,-968 # 800326b8 <__func__.0+0x2d0>
    8001ca88:	00016517          	auipc	a0,0x16
    8001ca8c:	cd850513          	addi	a0,a0,-808 # 80032760 <__func__.0+0x378>
    8001ca90:	235120ef          	jal	8002f4c4 <printf>
    8001ca94:	4511                	li	a0,4
    8001ca96:	c7ee40ef          	jal	80000f14 <goto_priv>
    8001ca9a:	cdde40ef          	jal	80001776 <reset_state>
}
    8001ca9e:	60e2                	ld	ra,24(sp)
    8001caa0:	6442                	ld	s0,16(sp)
    8001caa2:	8526                	mv	a0,s1
    8001caa4:	64a2                	ld	s1,8(sp)
    8001caa6:	6105                	addi	sp,sp,32
    8001caa8:	8082                	ret

000000008001caaa <instruction_access_fault_3>:


bool instruction_access_fault_3(){
    8001caaa:	1101                	addi	sp,sp,-32

    TEST_START();
    8001caac:	00015597          	auipc	a1,0x15
    8001cab0:	a8458593          	addi	a1,a1,-1404 # 80031530 <__func__.8>
    8001cab4:	00016517          	auipc	a0,0x16
    8001cab8:	c1450513          	addi	a0,a0,-1004 # 800326c8 <__func__.0+0x2e0>
bool instruction_access_fault_3(){
    8001cabc:	ec06                	sd	ra,24(sp)
    8001cabe:	e822                	sd	s0,16(sp)
    8001cac0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cac2:	203120ef          	jal	8002f4c4 <printf>
    8001cac6:	4529                	li	a0,10
    8001cac8:	6ea110ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001cacc:	4511                	li	a0,4
    8001cace:	c46e40ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cad2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cad6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cada:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cade:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cae2:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cae6:	10000793          	li	a5,256
    8001caea:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001caee:	20000793          	li	a5,512
    8001caf2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001caf6:	40000793          	li	a5,1024
    8001cafa:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cafe:	6785                	lui	a5,0x1
    8001cb00:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cb04:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cb08:	4785                	li	a5,1
    8001cb0a:	07fe                	slli	a5,a5,0x1f
    8001cb0c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cb10:	08100793          	li	a5,129
    8001cb14:	07e2                	slli	a5,a5,0x18
    8001cb16:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cb1a:	08000793          	li	a5,128
    8001cb1e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cb22:	67a1                	lui	a5,0x8
    8001cb24:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001cb28:	4505                	li	a0,1
    8001cb2a:	beae40ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cb2e:	aeae40ef          	jal	80000e18 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cb32:	4785                	li	a5,1
    8001cb34:	1786                	slli	a5,a5,0x21
    8001cb36:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cb3a:	0003f417          	auipc	s0,0x3f
    8001cb3e:	4d640413          	addi	s0,s0,1238 # 8005c010 <excpt>
    8001cb42:	00000297          	auipc	t0,0x0
    8001cb46:	00c28293          	addi	t0,t0,12 # 8001cb4e <instruction_access_fault_3+0xa4>
    8001cb4a:	02543c23          	sd	t0,56(s0)
    8001cb4e:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cb50:	08c00593          	li	a1,140
    8001cb54:	0001d617          	auipc	a2,0x1d
    8001cb58:	98c60613          	addi	a2,a2,-1652 # 800394e0 <__func__.0+0x70f8>
    8001cb5c:	00016517          	auipc	a0,0x16
    8001cb60:	b8450513          	addi	a0,a0,-1148 # 800326e0 <__func__.0+0x2f8>
    8001cb64:	161120ef          	jal	8002f4c4 <printf>
    8001cb68:	0003f797          	auipc	a5,0x3f
    8001cb6c:	4a97c783          	lbu	a5,1193(a5) # 8005c011 <excpt+0x1>
    8001cb70:	00016597          	auipc	a1,0x16
    8001cb74:	b4858593          	addi	a1,a1,-1208 # 800326b8 <__func__.0+0x2d0>
    8001cb78:	cf89                	beqz	a5,8001cb92 <instruction_access_fault_3+0xe8>
    8001cb7a:	641c                	ld	a5,8(s0)
    8001cb7c:	4705                	li	a4,1
    8001cb7e:	00016597          	auipc	a1,0x16
    8001cb82:	b2a58593          	addi	a1,a1,-1238 # 800326a8 <__func__.0+0x2c0>
    8001cb86:	00e78663          	beq	a5,a4,8001cb92 <instruction_access_fault_3+0xe8>
    8001cb8a:	00016597          	auipc	a1,0x16
    8001cb8e:	b2e58593          	addi	a1,a1,-1234 # 800326b8 <__func__.0+0x2d0>
    8001cb92:	00016517          	auipc	a0,0x16
    8001cb96:	b6650513          	addi	a0,a0,-1178 # 800326f8 <__func__.0+0x310>
    8001cb9a:	12b120ef          	jal	8002f4c4 <printf>
    8001cb9e:	0003f797          	auipc	a5,0x3f
    8001cba2:	4737c783          	lbu	a5,1139(a5) # 8005c011 <excpt+0x1>
    8001cba6:	c789                	beqz	a5,8001cbb0 <instruction_access_fault_3+0x106>
    8001cba8:	6418                	ld	a4,8(s0)
    8001cbaa:	4785                	li	a5,1
    8001cbac:	00f70c63          	beq	a4,a5,8001cbc4 <instruction_access_fault_3+0x11a>
    8001cbb0:	00016517          	auipc	a0,0x16
    8001cbb4:	b5050513          	addi	a0,a0,-1200 # 80032700 <__func__.0+0x318>
    8001cbb8:	10d120ef          	jal	8002f4c4 <printf>
    8001cbbc:	02900513          	li	a0,41
    8001cbc0:	5f2110ef          	jal	8002e1b2 <putchar>
    8001cbc4:	4529                	li	a0,10
    8001cbc6:	5ec110ef          	jal	8002e1b2 <putchar>
    8001cbca:	0003f497          	auipc	s1,0x3f
    8001cbce:	4474c483          	lbu	s1,1095(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001cbd2:	00016597          	auipc	a1,0x16
    8001cbd6:	ae658593          	addi	a1,a1,-1306 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cbda:	cc91                	beqz	s1,8001cbf6 <instruction_access_fault_3+0x14c>
    8001cbdc:	6418                	ld	a4,8(s0)
    8001cbde:	4785                	li	a5,1
    TEST_END();
    8001cbe0:	00016597          	auipc	a1,0x16
    8001cbe4:	ac858593          	addi	a1,a1,-1336 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cbe8:	00f70763          	beq	a4,a5,8001cbf6 <instruction_access_fault_3+0x14c>
    8001cbec:	4481                	li	s1,0
    TEST_END();
    8001cbee:	00016597          	auipc	a1,0x16
    8001cbf2:	aca58593          	addi	a1,a1,-1334 # 800326b8 <__func__.0+0x2d0>
    8001cbf6:	00016517          	auipc	a0,0x16
    8001cbfa:	b6a50513          	addi	a0,a0,-1174 # 80032760 <__func__.0+0x378>
    8001cbfe:	0c7120ef          	jal	8002f4c4 <printf>
    8001cc02:	4511                	li	a0,4
    8001cc04:	b10e40ef          	jal	80000f14 <goto_priv>
    8001cc08:	b6fe40ef          	jal	80001776 <reset_state>
}
    8001cc0c:	60e2                	ld	ra,24(sp)
    8001cc0e:	6442                	ld	s0,16(sp)
    8001cc10:	8526                	mv	a0,s1
    8001cc12:	64a2                	ld	s1,8(sp)
    8001cc14:	6105                	addi	sp,sp,32
    8001cc16:	8082                	ret

000000008001cc18 <instruction_access_fault_4>:

bool instruction_access_fault_4(){
    8001cc18:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cc1a:	00015597          	auipc	a1,0x15
    8001cc1e:	93658593          	addi	a1,a1,-1738 # 80031550 <__func__.7>
    8001cc22:	00016517          	auipc	a0,0x16
    8001cc26:	aa650513          	addi	a0,a0,-1370 # 800326c8 <__func__.0+0x2e0>
bool instruction_access_fault_4(){
    8001cc2a:	ec06                	sd	ra,24(sp)
    8001cc2c:	e822                	sd	s0,16(sp)
    8001cc2e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cc30:	095120ef          	jal	8002f4c4 <printf>
    8001cc34:	4529                	li	a0,10
    8001cc36:	57c110ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001cc3a:	4511                	li	a0,4
    8001cc3c:	ad8e40ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cc40:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cc44:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cc48:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cc4c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cc50:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cc54:	10000793          	li	a5,256
    8001cc58:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cc5c:	20000793          	li	a5,512
    8001cc60:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cc64:	40000793          	li	a5,1024
    8001cc68:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cc6c:	6785                	lui	a5,0x1
    8001cc6e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cc72:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cc76:	4785                	li	a5,1
    8001cc78:	07fe                	slli	a5,a5,0x1f
    8001cc7a:	4485                	li	s1,1
    8001cc7c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cc80:	08100793          	li	a5,129
    8001cc84:	07e2                	slli	a5,a5,0x18
    8001cc86:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cc8a:	08000793          	li	a5,128
    8001cc8e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cc92:	67a1                	lui	a5,0x8
    8001cc94:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001cc98:	4501                	li	a0,0
    8001cc9a:	a7ae40ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cc9e:	97ae40ef          	jal	80000e18 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cca2:	02149793          	slli	a5,s1,0x21
    8001cca6:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001ccaa:	0003f417          	auipc	s0,0x3f
    8001ccae:	36640413          	addi	s0,s0,870 # 8005c010 <excpt>
    8001ccb2:	00000297          	auipc	t0,0x0
    8001ccb6:	00c28293          	addi	t0,t0,12 # 8001ccbe <instruction_access_fault_4+0xa6>
    8001ccba:	02543c23          	sd	t0,56(s0)
    8001ccbe:	8782                	jr	a5

    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ccc0:	08c00593          	li	a1,140
    8001ccc4:	0001d617          	auipc	a2,0x1d
    8001ccc8:	86460613          	addi	a2,a2,-1948 # 80039528 <__func__.0+0x7140>
    8001cccc:	00016517          	auipc	a0,0x16
    8001ccd0:	a1450513          	addi	a0,a0,-1516 # 800326e0 <__func__.0+0x2f8>
    8001ccd4:	7f0120ef          	jal	8002f4c4 <printf>
    8001ccd8:	0003f797          	auipc	a5,0x3f
    8001ccdc:	3397c783          	lbu	a5,825(a5) # 8005c011 <excpt+0x1>
    8001cce0:	00016597          	auipc	a1,0x16
    8001cce4:	9d858593          	addi	a1,a1,-1576 # 800326b8 <__func__.0+0x2d0>
    8001cce8:	cf81                	beqz	a5,8001cd00 <instruction_access_fault_4+0xe8>
    8001ccea:	641c                	ld	a5,8(s0)
    8001ccec:	00016597          	auipc	a1,0x16
    8001ccf0:	9bc58593          	addi	a1,a1,-1604 # 800326a8 <__func__.0+0x2c0>
    8001ccf4:	00978663          	beq	a5,s1,8001cd00 <instruction_access_fault_4+0xe8>
    8001ccf8:	00016597          	auipc	a1,0x16
    8001ccfc:	9c058593          	addi	a1,a1,-1600 # 800326b8 <__func__.0+0x2d0>
    8001cd00:	00016517          	auipc	a0,0x16
    8001cd04:	9f850513          	addi	a0,a0,-1544 # 800326f8 <__func__.0+0x310>
    8001cd08:	7bc120ef          	jal	8002f4c4 <printf>
    8001cd0c:	0003f797          	auipc	a5,0x3f
    8001cd10:	3057c783          	lbu	a5,773(a5) # 8005c011 <excpt+0x1>
    8001cd14:	c789                	beqz	a5,8001cd1e <instruction_access_fault_4+0x106>
    8001cd16:	6418                	ld	a4,8(s0)
    8001cd18:	4785                	li	a5,1
    8001cd1a:	00f70c63          	beq	a4,a5,8001cd32 <instruction_access_fault_4+0x11a>
    8001cd1e:	00016517          	auipc	a0,0x16
    8001cd22:	9e250513          	addi	a0,a0,-1566 # 80032700 <__func__.0+0x318>
    8001cd26:	79e120ef          	jal	8002f4c4 <printf>
    8001cd2a:	02900513          	li	a0,41
    8001cd2e:	484110ef          	jal	8002e1b2 <putchar>
    8001cd32:	4529                	li	a0,10
    8001cd34:	47e110ef          	jal	8002e1b2 <putchar>
    8001cd38:	0003f497          	auipc	s1,0x3f
    8001cd3c:	2d94c483          	lbu	s1,729(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001cd40:	00016597          	auipc	a1,0x16
    8001cd44:	97858593          	addi	a1,a1,-1672 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cd48:	cc91                	beqz	s1,8001cd64 <instruction_access_fault_4+0x14c>
    8001cd4a:	6418                	ld	a4,8(s0)
    8001cd4c:	4785                	li	a5,1
    TEST_END();
    8001cd4e:	00016597          	auipc	a1,0x16
    8001cd52:	95a58593          	addi	a1,a1,-1702 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cd56:	00f70763          	beq	a4,a5,8001cd64 <instruction_access_fault_4+0x14c>
    8001cd5a:	4481                	li	s1,0
    TEST_END();
    8001cd5c:	00016597          	auipc	a1,0x16
    8001cd60:	95c58593          	addi	a1,a1,-1700 # 800326b8 <__func__.0+0x2d0>
    8001cd64:	00016517          	auipc	a0,0x16
    8001cd68:	9fc50513          	addi	a0,a0,-1540 # 80032760 <__func__.0+0x378>
    8001cd6c:	758120ef          	jal	8002f4c4 <printf>
    8001cd70:	4511                	li	a0,4
    8001cd72:	9a2e40ef          	jal	80000f14 <goto_priv>
    8001cd76:	a01e40ef          	jal	80001776 <reset_state>
}
    8001cd7a:	60e2                	ld	ra,24(sp)
    8001cd7c:	6442                	ld	s0,16(sp)
    8001cd7e:	8526                	mv	a0,s1
    8001cd80:	64a2                	ld	s1,8(sp)
    8001cd82:	6105                	addi	sp,sp,32
    8001cd84:	8082                	ret

000000008001cd86 <instruction_access_fault_5>:

bool instruction_access_fault_5(){
    8001cd86:	1141                	addi	sp,sp,-16

    TEST_START();
    8001cd88:	00014597          	auipc	a1,0x14
    8001cd8c:	7e858593          	addi	a1,a1,2024 # 80031570 <__func__.6>
    8001cd90:	00016517          	auipc	a0,0x16
    8001cd94:	93850513          	addi	a0,a0,-1736 # 800326c8 <__func__.0+0x2e0>
bool instruction_access_fault_5(){
    8001cd98:	e406                	sd	ra,8(sp)
    8001cd9a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001cd9c:	728120ef          	jal	8002f4c4 <printf>
    8001cda0:	4529                	li	a0,10
    8001cda2:	410110ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001cda6:	4511                	li	a0,4
    8001cda8:	96ce40ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cdac:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cdb0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cdb4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cdb8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cdbc:	3a046073          	csrsi	pmpcfg0,8
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cdc0:	10000793          	li	a5,256
    8001cdc4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cdc8:	20000793          	li	a5,512
    8001cdcc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cdd0:	40000793          	li	a5,1024
    8001cdd4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cdd8:	6785                	lui	a5,0x1
    8001cdda:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cdde:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000UL);
    8001cde2:	4785                	li	a5,1
    8001cde4:	07fe                	slli	a5,a5,0x1f
    8001cde6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000UL);
    8001cdea:	08100793          	li	a5,129
    8001cdee:	07e2                	slli	a5,a5,0x18
    8001cdf0:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cdf4:	67a1                	lui	a5,0x8
    8001cdf6:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001cdfa:	81ee40ef          	jal	80000e18 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cdfe:	4785                	li	a5,1
    8001ce00:	1786                	slli	a5,a5,0x21
    8001ce02:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001ce06:	0003f417          	auipc	s0,0x3f
    8001ce0a:	20a40413          	addi	s0,s0,522 # 8005c010 <excpt>
    8001ce0e:	00000297          	auipc	t0,0x0
    8001ce12:	00c28293          	addi	t0,t0,12 # 8001ce1a <instruction_access_fault_5+0x94>
    8001ce16:	02543c23          	sd	t0,56(s0)
    8001ce1a:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001ce1c:	0003f597          	auipc	a1,0x3f
    8001ce20:	1f55c583          	lbu	a1,501(a1) # 8005c011 <excpt+0x1>
    8001ce24:	00016517          	auipc	a0,0x16
    8001ce28:	42450513          	addi	a0,a0,1060 # 80033248 <__func__.0+0xe60>
    8001ce2c:	698120ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.cause);
    8001ce30:	640c                	ld	a1,8(s0)
    8001ce32:	00016517          	auipc	a0,0x16
    8001ce36:	41650513          	addi	a0,a0,1046 # 80033248 <__func__.0+0xe60>
    8001ce3a:	68a120ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001ce3e:	08c00593          	li	a1,140
    8001ce42:	0001c617          	auipc	a2,0x1c
    8001ce46:	72e60613          	addi	a2,a2,1838 # 80039570 <__func__.0+0x7188>
    8001ce4a:	00016517          	auipc	a0,0x16
    8001ce4e:	89650513          	addi	a0,a0,-1898 # 800326e0 <__func__.0+0x2f8>
    8001ce52:	672120ef          	jal	8002f4c4 <printf>
    8001ce56:	0003f797          	auipc	a5,0x3f
    8001ce5a:	1bb7c783          	lbu	a5,443(a5) # 8005c011 <excpt+0x1>
    8001ce5e:	00016597          	auipc	a1,0x16
    8001ce62:	84a58593          	addi	a1,a1,-1974 # 800326a8 <__func__.0+0x2c0>
    8001ce66:	c789                	beqz	a5,8001ce70 <instruction_access_fault_5+0xea>
    8001ce68:	00016597          	auipc	a1,0x16
    8001ce6c:	85058593          	addi	a1,a1,-1968 # 800326b8 <__func__.0+0x2d0>
    8001ce70:	00016517          	auipc	a0,0x16
    8001ce74:	88850513          	addi	a0,a0,-1912 # 800326f8 <__func__.0+0x310>
    8001ce78:	64c120ef          	jal	8002f4c4 <printf>
    8001ce7c:	0003f797          	auipc	a5,0x3f
    8001ce80:	1957c783          	lbu	a5,405(a5) # 8005c011 <excpt+0x1>
    8001ce84:	e7a1                	bnez	a5,8001cecc <instruction_access_fault_5+0x146>
    8001ce86:	4529                	li	a0,10
    8001ce88:	32a110ef          	jal	8002e1b2 <putchar>
    8001ce8c:	0003f797          	auipc	a5,0x3f
    8001ce90:	1857c783          	lbu	a5,389(a5) # 8005c011 <excpt+0x1>
    8001ce94:	e795                	bnez	a5,8001cec0 <instruction_access_fault_5+0x13a>
    8001ce96:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001ce98:	00016597          	auipc	a1,0x16
    8001ce9c:	81058593          	addi	a1,a1,-2032 # 800326a8 <__func__.0+0x2c0>
    8001cea0:	00016517          	auipc	a0,0x16
    8001cea4:	8c050513          	addi	a0,a0,-1856 # 80032760 <__func__.0+0x378>
    8001cea8:	61c120ef          	jal	8002f4c4 <printf>
    8001ceac:	4511                	li	a0,4
    8001ceae:	866e40ef          	jal	80000f14 <goto_priv>
    8001ceb2:	8c5e40ef          	jal	80001776 <reset_state>
}
    8001ceb6:	60a2                	ld	ra,8(sp)
    8001ceb8:	8522                	mv	a0,s0
    8001ceba:	6402                	ld	s0,0(sp)
    8001cebc:	0141                	addi	sp,sp,16
    8001cebe:	8082                	ret
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001cec0:	4401                	li	s0,0
    TEST_END();
    8001cec2:	00015597          	auipc	a1,0x15
    8001cec6:	7f658593          	addi	a1,a1,2038 # 800326b8 <__func__.0+0x2d0>
    8001ceca:	bfd9                	j	8001cea0 <instruction_access_fault_5+0x11a>
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001cecc:	00016517          	auipc	a0,0x16
    8001ced0:	83450513          	addi	a0,a0,-1996 # 80032700 <__func__.0+0x318>
    8001ced4:	5f0120ef          	jal	8002f4c4 <printf>
    8001ced8:	02900513          	li	a0,41
    8001cedc:	2d6110ef          	jal	8002e1b2 <putchar>
    8001cee0:	b75d                	j	8001ce86 <instruction_access_fault_5+0x100>

000000008001cee2 <instruction_access_fault_6>:


bool instruction_access_fault_6(){
    8001cee2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cee4:	00014597          	auipc	a1,0x14
    8001cee8:	6ac58593          	addi	a1,a1,1708 # 80031590 <__func__.5>
    8001ceec:	00015517          	auipc	a0,0x15
    8001cef0:	7dc50513          	addi	a0,a0,2012 # 800326c8 <__func__.0+0x2e0>
bool instruction_access_fault_6(){
    8001cef4:	ec06                	sd	ra,24(sp)
    8001cef6:	e822                	sd	s0,16(sp)
    8001cef8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cefa:	5ca120ef          	jal	8002f4c4 <printf>
    8001cefe:	4529                	li	a0,10
    8001cf00:	2b2110ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001cf04:	4511                	li	a0,4
    8001cf06:	80ee40ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cf0a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cf0e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cf12:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cf16:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cf1a:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cf1e:	10000793          	li	a5,256
    8001cf22:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cf26:	20000793          	li	a5,512
    8001cf2a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cf2e:	40000793          	li	a5,1024
    8001cf32:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cf36:	6785                	lui	a5,0x1
    8001cf38:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cf3c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cf40:	4785                	li	a5,1
    8001cf42:	07fe                	slli	a5,a5,0x1f
    8001cf44:	4485                	li	s1,1
    8001cf46:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cf4a:	08100793          	li	a5,129
    8001cf4e:	07e2                	slli	a5,a5,0x18
    8001cf50:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cf54:	08000793          	li	a5,128
    8001cf58:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cf5c:	67a1                	lui	a5,0x8
    8001cf5e:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001cf62:	450d                	li	a0,3
    8001cf64:	fb1e30ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cf68:	eb1e30ef          	jal	80000e18 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cf6c:	02149793          	slli	a5,s1,0x21
    8001cf70:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cf74:	0003f417          	auipc	s0,0x3f
    8001cf78:	09c40413          	addi	s0,s0,156 # 8005c010 <excpt>
    8001cf7c:	00000297          	auipc	t0,0x0
    8001cf80:	00c28293          	addi	t0,t0,12 # 8001cf88 <instruction_access_fault_6+0xa6>
    8001cf84:	02543c23          	sd	t0,56(s0)
    8001cf88:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001cf8a:	08c00593          	li	a1,140
    8001cf8e:	0001c617          	auipc	a2,0x1c
    8001cf92:	62a60613          	addi	a2,a2,1578 # 800395b8 <__func__.0+0x71d0>
    8001cf96:	00015517          	auipc	a0,0x15
    8001cf9a:	74a50513          	addi	a0,a0,1866 # 800326e0 <__func__.0+0x2f8>
    8001cf9e:	526120ef          	jal	8002f4c4 <printf>
    8001cfa2:	0003f797          	auipc	a5,0x3f
    8001cfa6:	06f7c783          	lbu	a5,111(a5) # 8005c011 <excpt+0x1>
    8001cfaa:	00015597          	auipc	a1,0x15
    8001cfae:	70e58593          	addi	a1,a1,1806 # 800326b8 <__func__.0+0x2d0>
    8001cfb2:	cf81                	beqz	a5,8001cfca <instruction_access_fault_6+0xe8>
    8001cfb4:	641c                	ld	a5,8(s0)
    8001cfb6:	00015597          	auipc	a1,0x15
    8001cfba:	6f258593          	addi	a1,a1,1778 # 800326a8 <__func__.0+0x2c0>
    8001cfbe:	00978663          	beq	a5,s1,8001cfca <instruction_access_fault_6+0xe8>
    8001cfc2:	00015597          	auipc	a1,0x15
    8001cfc6:	6f658593          	addi	a1,a1,1782 # 800326b8 <__func__.0+0x2d0>
    8001cfca:	00015517          	auipc	a0,0x15
    8001cfce:	72e50513          	addi	a0,a0,1838 # 800326f8 <__func__.0+0x310>
    8001cfd2:	4f2120ef          	jal	8002f4c4 <printf>
    8001cfd6:	0003f797          	auipc	a5,0x3f
    8001cfda:	03b7c783          	lbu	a5,59(a5) # 8005c011 <excpt+0x1>
    8001cfde:	c789                	beqz	a5,8001cfe8 <instruction_access_fault_6+0x106>
    8001cfe0:	6418                	ld	a4,8(s0)
    8001cfe2:	4785                	li	a5,1
    8001cfe4:	00f70c63          	beq	a4,a5,8001cffc <instruction_access_fault_6+0x11a>
    8001cfe8:	00015517          	auipc	a0,0x15
    8001cfec:	71850513          	addi	a0,a0,1816 # 80032700 <__func__.0+0x318>
    8001cff0:	4d4120ef          	jal	8002f4c4 <printf>
    8001cff4:	02900513          	li	a0,41
    8001cff8:	1ba110ef          	jal	8002e1b2 <putchar>
    8001cffc:	4529                	li	a0,10
    8001cffe:	1b4110ef          	jal	8002e1b2 <putchar>
    8001d002:	0003f497          	auipc	s1,0x3f
    8001d006:	00f4c483          	lbu	s1,15(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d00a:	00015597          	auipc	a1,0x15
    8001d00e:	6ae58593          	addi	a1,a1,1710 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d012:	cc91                	beqz	s1,8001d02e <instruction_access_fault_6+0x14c>
    8001d014:	6418                	ld	a4,8(s0)
    8001d016:	4785                	li	a5,1
    TEST_END();
    8001d018:	00015597          	auipc	a1,0x15
    8001d01c:	69058593          	addi	a1,a1,1680 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d020:	00f70763          	beq	a4,a5,8001d02e <instruction_access_fault_6+0x14c>
    8001d024:	4481                	li	s1,0
    TEST_END();
    8001d026:	00015597          	auipc	a1,0x15
    8001d02a:	69258593          	addi	a1,a1,1682 # 800326b8 <__func__.0+0x2d0>
    8001d02e:	00015517          	auipc	a0,0x15
    8001d032:	73250513          	addi	a0,a0,1842 # 80032760 <__func__.0+0x378>
    8001d036:	48e120ef          	jal	8002f4c4 <printf>
    8001d03a:	4511                	li	a0,4
    8001d03c:	ed9e30ef          	jal	80000f14 <goto_priv>
    8001d040:	f36e40ef          	jal	80001776 <reset_state>
}
    8001d044:	60e2                	ld	ra,24(sp)
    8001d046:	6442                	ld	s0,16(sp)
    8001d048:	8526                	mv	a0,s1
    8001d04a:	64a2                	ld	s1,8(sp)
    8001d04c:	6105                	addi	sp,sp,32
    8001d04e:	8082                	ret

000000008001d050 <instruction_access_fault_7>:


bool instruction_access_fault_7(){
    8001d050:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d052:	00014597          	auipc	a1,0x14
    8001d056:	55e58593          	addi	a1,a1,1374 # 800315b0 <__func__.4>
    8001d05a:	00015517          	auipc	a0,0x15
    8001d05e:	66e50513          	addi	a0,a0,1646 # 800326c8 <__func__.0+0x2e0>
bool instruction_access_fault_7(){
    8001d062:	ec06                	sd	ra,24(sp)
    8001d064:	e822                	sd	s0,16(sp)
    8001d066:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d068:	45c120ef          	jal	8002f4c4 <printf>
    8001d06c:	4529                	li	a0,10
    8001d06e:	144110ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001d072:	4511                	li	a0,4
    8001d074:	ea1e30ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d078:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d07c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d080:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d084:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d088:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d08c:	10000793          	li	a5,256
    8001d090:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d094:	20000793          	li	a5,512
    8001d098:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d09c:	40000793          	li	a5,1024
    8001d0a0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d0a4:	6785                	lui	a5,0x1
    8001d0a6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d0aa:	3a07a073          	csrs	pmpcfg0,a5
    
    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d0ae:	4785                	li	a5,1
    8001d0b0:	07fe                	slli	a5,a5,0x1f
    8001d0b2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d0b6:	08100793          	li	a5,129
    8001d0ba:	07e2                	slli	a5,a5,0x18
    8001d0bc:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d0c0:	08000793          	li	a5,128
    8001d0c4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d0c8:	67a1                	lui	a5,0x8
    8001d0ca:	3a07b073          	csrc	pmpcfg0,a5


    goto_priv(PRIV_HU);
    8001d0ce:	4505                	li	a0,1
    8001d0d0:	e45e30ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d0d4:	d45e30ef          	jal	80000e18 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001d0d8:	4785                	li	a5,1
    8001d0da:	1786                	slli	a5,a5,0x21
    8001d0dc:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001d0e0:	0003f417          	auipc	s0,0x3f
    8001d0e4:	f3040413          	addi	s0,s0,-208 # 8005c010 <excpt>
    8001d0e8:	00000297          	auipc	t0,0x0
    8001d0ec:	00c28293          	addi	t0,t0,12 # 8001d0f4 <instruction_access_fault_7+0xa4>
    8001d0f0:	02543c23          	sd	t0,56(s0)
    8001d0f4:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d0f6:	08c00593          	li	a1,140
    8001d0fa:	0001c617          	auipc	a2,0x1c
    8001d0fe:	50660613          	addi	a2,a2,1286 # 80039600 <__func__.0+0x7218>
    8001d102:	00015517          	auipc	a0,0x15
    8001d106:	5de50513          	addi	a0,a0,1502 # 800326e0 <__func__.0+0x2f8>
    8001d10a:	3ba120ef          	jal	8002f4c4 <printf>
    8001d10e:	0003f797          	auipc	a5,0x3f
    8001d112:	f037c783          	lbu	a5,-253(a5) # 8005c011 <excpt+0x1>
    8001d116:	00015597          	auipc	a1,0x15
    8001d11a:	5a258593          	addi	a1,a1,1442 # 800326b8 <__func__.0+0x2d0>
    8001d11e:	cf89                	beqz	a5,8001d138 <instruction_access_fault_7+0xe8>
    8001d120:	641c                	ld	a5,8(s0)
    8001d122:	4705                	li	a4,1
    8001d124:	00015597          	auipc	a1,0x15
    8001d128:	58458593          	addi	a1,a1,1412 # 800326a8 <__func__.0+0x2c0>
    8001d12c:	00e78663          	beq	a5,a4,8001d138 <instruction_access_fault_7+0xe8>
    8001d130:	00015597          	auipc	a1,0x15
    8001d134:	58858593          	addi	a1,a1,1416 # 800326b8 <__func__.0+0x2d0>
    8001d138:	00015517          	auipc	a0,0x15
    8001d13c:	5c050513          	addi	a0,a0,1472 # 800326f8 <__func__.0+0x310>
    8001d140:	384120ef          	jal	8002f4c4 <printf>
    8001d144:	0003f797          	auipc	a5,0x3f
    8001d148:	ecd7c783          	lbu	a5,-307(a5) # 8005c011 <excpt+0x1>
    8001d14c:	c789                	beqz	a5,8001d156 <instruction_access_fault_7+0x106>
    8001d14e:	6418                	ld	a4,8(s0)
    8001d150:	4785                	li	a5,1
    8001d152:	00f70c63          	beq	a4,a5,8001d16a <instruction_access_fault_7+0x11a>
    8001d156:	00015517          	auipc	a0,0x15
    8001d15a:	5aa50513          	addi	a0,a0,1450 # 80032700 <__func__.0+0x318>
    8001d15e:	366120ef          	jal	8002f4c4 <printf>
    8001d162:	02900513          	li	a0,41
    8001d166:	04c110ef          	jal	8002e1b2 <putchar>
    8001d16a:	4529                	li	a0,10
    8001d16c:	046110ef          	jal	8002e1b2 <putchar>
    8001d170:	0003f497          	auipc	s1,0x3f
    8001d174:	ea14c483          	lbu	s1,-351(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );

    TEST_END();
    8001d178:	00015597          	auipc	a1,0x15
    8001d17c:	54058593          	addi	a1,a1,1344 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d180:	cc91                	beqz	s1,8001d19c <instruction_access_fault_7+0x14c>
    8001d182:	6418                	ld	a4,8(s0)
    8001d184:	4785                	li	a5,1
    TEST_END();
    8001d186:	00015597          	auipc	a1,0x15
    8001d18a:	52258593          	addi	a1,a1,1314 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d18e:	00f70763          	beq	a4,a5,8001d19c <instruction_access_fault_7+0x14c>
    8001d192:	4481                	li	s1,0
    TEST_END();
    8001d194:	00015597          	auipc	a1,0x15
    8001d198:	52458593          	addi	a1,a1,1316 # 800326b8 <__func__.0+0x2d0>
    8001d19c:	00015517          	auipc	a0,0x15
    8001d1a0:	5c450513          	addi	a0,a0,1476 # 80032760 <__func__.0+0x378>
    8001d1a4:	320120ef          	jal	8002f4c4 <printf>
    8001d1a8:	4511                	li	a0,4
    8001d1aa:	d6be30ef          	jal	80000f14 <goto_priv>
    8001d1ae:	dc8e40ef          	jal	80001776 <reset_state>
}
    8001d1b2:	60e2                	ld	ra,24(sp)
    8001d1b4:	6442                	ld	s0,16(sp)
    8001d1b6:	8526                	mv	a0,s1
    8001d1b8:	64a2                	ld	s1,8(sp)
    8001d1ba:	6105                	addi	sp,sp,32
    8001d1bc:	8082                	ret

000000008001d1be <instruction_access_fault_8>:

bool instruction_access_fault_8(){
    8001d1be:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d1c0:	00014597          	auipc	a1,0x14
    8001d1c4:	41058593          	addi	a1,a1,1040 # 800315d0 <__func__.3>
    8001d1c8:	00015517          	auipc	a0,0x15
    8001d1cc:	50050513          	addi	a0,a0,1280 # 800326c8 <__func__.0+0x2e0>
bool instruction_access_fault_8(){
    8001d1d0:	ec06                	sd	ra,24(sp)
    8001d1d2:	e822                	sd	s0,16(sp)
    8001d1d4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d1d6:	2ee120ef          	jal	8002f4c4 <printf>
    8001d1da:	4529                	li	a0,10
    8001d1dc:	7d7100ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001d1e0:	4511                	li	a0,4
    8001d1e2:	d33e30ef          	jal	80000f14 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d1e6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d1ea:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d1ee:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d1f2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d1f6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d1fa:	10000793          	li	a5,256
    8001d1fe:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d202:	20000793          	li	a5,512
    8001d206:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d20a:	40000793          	li	a5,1024
    8001d20e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d212:	6785                	lui	a5,0x1
    8001d214:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d218:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d21c:	4785                	li	a5,1
    8001d21e:	07fe                	slli	a5,a5,0x1f
    8001d220:	4485                	li	s1,1
    8001d222:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d226:	08100793          	li	a5,129
    8001d22a:	07e2                	slli	a5,a5,0x18
    8001d22c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d230:	08000793          	li	a5,128
    8001d234:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d238:	67a1                	lui	a5,0x8
    8001d23a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d23e:	4501                	li	a0,0
    8001d240:	cd5e30ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d244:	bd5e30ef          	jal	80000e18 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001d248:	02149793          	slli	a5,s1,0x21
    8001d24c:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001d250:	0003f417          	auipc	s0,0x3f
    8001d254:	dc040413          	addi	s0,s0,-576 # 8005c010 <excpt>
    8001d258:	00000297          	auipc	t0,0x0
    8001d25c:	00c28293          	addi	t0,t0,12 # 8001d264 <instruction_access_fault_8+0xa6>
    8001d260:	02543c23          	sd	t0,56(s0)
    8001d264:	8782                	jr	a5

    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d266:	08c00593          	li	a1,140
    8001d26a:	0001c617          	auipc	a2,0x1c
    8001d26e:	3de60613          	addi	a2,a2,990 # 80039648 <__func__.0+0x7260>
    8001d272:	00015517          	auipc	a0,0x15
    8001d276:	46e50513          	addi	a0,a0,1134 # 800326e0 <__func__.0+0x2f8>
    8001d27a:	24a120ef          	jal	8002f4c4 <printf>
    8001d27e:	0003f797          	auipc	a5,0x3f
    8001d282:	d937c783          	lbu	a5,-621(a5) # 8005c011 <excpt+0x1>
    8001d286:	00015597          	auipc	a1,0x15
    8001d28a:	43258593          	addi	a1,a1,1074 # 800326b8 <__func__.0+0x2d0>
    8001d28e:	cf81                	beqz	a5,8001d2a6 <instruction_access_fault_8+0xe8>
    8001d290:	641c                	ld	a5,8(s0)
    8001d292:	00015597          	auipc	a1,0x15
    8001d296:	41658593          	addi	a1,a1,1046 # 800326a8 <__func__.0+0x2c0>
    8001d29a:	00978663          	beq	a5,s1,8001d2a6 <instruction_access_fault_8+0xe8>
    8001d29e:	00015597          	auipc	a1,0x15
    8001d2a2:	41a58593          	addi	a1,a1,1050 # 800326b8 <__func__.0+0x2d0>
    8001d2a6:	00015517          	auipc	a0,0x15
    8001d2aa:	45250513          	addi	a0,a0,1106 # 800326f8 <__func__.0+0x310>
    8001d2ae:	216120ef          	jal	8002f4c4 <printf>
    8001d2b2:	0003f797          	auipc	a5,0x3f
    8001d2b6:	d5f7c783          	lbu	a5,-673(a5) # 8005c011 <excpt+0x1>
    8001d2ba:	c789                	beqz	a5,8001d2c4 <instruction_access_fault_8+0x106>
    8001d2bc:	6418                	ld	a4,8(s0)
    8001d2be:	4785                	li	a5,1
    8001d2c0:	00f70c63          	beq	a4,a5,8001d2d8 <instruction_access_fault_8+0x11a>
    8001d2c4:	00015517          	auipc	a0,0x15
    8001d2c8:	43c50513          	addi	a0,a0,1084 # 80032700 <__func__.0+0x318>
    8001d2cc:	1f8120ef          	jal	8002f4c4 <printf>
    8001d2d0:	02900513          	li	a0,41
    8001d2d4:	6df100ef          	jal	8002e1b2 <putchar>
    8001d2d8:	4529                	li	a0,10
    8001d2da:	6d9100ef          	jal	8002e1b2 <putchar>
    8001d2de:	0003f497          	auipc	s1,0x3f
    8001d2e2:	d334c483          	lbu	s1,-717(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d2e6:	00015597          	auipc	a1,0x15
    8001d2ea:	3d258593          	addi	a1,a1,978 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d2ee:	cc91                	beqz	s1,8001d30a <instruction_access_fault_8+0x14c>
    8001d2f0:	6418                	ld	a4,8(s0)
    8001d2f2:	4785                	li	a5,1
    TEST_END();
    8001d2f4:	00015597          	auipc	a1,0x15
    8001d2f8:	3b458593          	addi	a1,a1,948 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d2fc:	00f70763          	beq	a4,a5,8001d30a <instruction_access_fault_8+0x14c>
    8001d300:	4481                	li	s1,0
    TEST_END();
    8001d302:	00015597          	auipc	a1,0x15
    8001d306:	3b658593          	addi	a1,a1,950 # 800326b8 <__func__.0+0x2d0>
    8001d30a:	00015517          	auipc	a0,0x15
    8001d30e:	45650513          	addi	a0,a0,1110 # 80032760 <__func__.0+0x378>
    8001d312:	1b2120ef          	jal	8002f4c4 <printf>
    8001d316:	4511                	li	a0,4
    8001d318:	bfde30ef          	jal	80000f14 <goto_priv>
    8001d31c:	c5ae40ef          	jal	80001776 <reset_state>
}
    8001d320:	60e2                	ld	ra,24(sp)
    8001d322:	6442                	ld	s0,16(sp)
    8001d324:	8526                	mv	a0,s1
    8001d326:	64a2                	ld	s1,8(sp)
    8001d328:	6105                	addi	sp,sp,32
    8001d32a:	8082                	ret

000000008001d32c <instruction_access_fault_9>:

bool instruction_access_fault_9(){
    8001d32c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d32e:	00014597          	auipc	a1,0x14
    8001d332:	2c258593          	addi	a1,a1,706 # 800315f0 <__func__.2>
    8001d336:	00015517          	auipc	a0,0x15
    8001d33a:	39250513          	addi	a0,a0,914 # 800326c8 <__func__.0+0x2e0>
bool instruction_access_fault_9(){
    8001d33e:	ec06                	sd	ra,24(sp)
    8001d340:	e822                	sd	s0,16(sp)
    8001d342:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d344:	180120ef          	jal	8002f4c4 <printf>
    8001d348:	4529                	li	a0,10
    8001d34a:	669100ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001d34e:	4511                	li	a0,4
    8001d350:	bc5e30ef          	jal	80000f14 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d354:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d358:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d35c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d360:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d364:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d368:	10000793          	li	a5,256
    8001d36c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d370:	20000793          	li	a5,512
    8001d374:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d378:	40000793          	li	a5,1024
    8001d37c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d380:	6785                	lui	a5,0x1
    8001d382:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d386:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d38a:	4785                	li	a5,1
    8001d38c:	07fe                	slli	a5,a5,0x1f
    8001d38e:	4485                	li	s1,1
    8001d390:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d394:	08100793          	li	a5,129
    8001d398:	07e2                	slli	a5,a5,0x18
    8001d39a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d39e:	08000793          	li	a5,128
    8001d3a2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d3a6:	67a1                	lui	a5,0x8
    8001d3a8:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d3ac:	4501                	li	a0,0
    8001d3ae:	b67e30ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d3b2:	a67e30ef          	jal	80000e18 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x1fffffffeUL << 2);
    8001d3b6:	02349793          	slli	a5,s1,0x23
    8001d3ba:	17e1                	addi	a5,a5,-8 # 7ff8 <_test_table_size+0x7ff7>
    8001d3bc:	0003f417          	auipc	s0,0x3f
    8001d3c0:	c5440413          	addi	s0,s0,-940 # 8005c010 <excpt>
    8001d3c4:	00000297          	auipc	t0,0x0
    8001d3c8:	00c28293          	addi	t0,t0,12 # 8001d3d0 <instruction_access_fault_9+0xa4>
    8001d3cc:	02543c23          	sd	t0,56(s0)
    8001d3d0:	8782                	jr	a5

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d3d2:	08c00593          	li	a1,140
    8001d3d6:	0001c617          	auipc	a2,0x1c
    8001d3da:	2aa60613          	addi	a2,a2,682 # 80039680 <__func__.0+0x7298>
    8001d3de:	00015517          	auipc	a0,0x15
    8001d3e2:	30250513          	addi	a0,a0,770 # 800326e0 <__func__.0+0x2f8>
    8001d3e6:	0de120ef          	jal	8002f4c4 <printf>
    8001d3ea:	0003f797          	auipc	a5,0x3f
    8001d3ee:	c277c783          	lbu	a5,-985(a5) # 8005c011 <excpt+0x1>
    8001d3f2:	00015597          	auipc	a1,0x15
    8001d3f6:	2c658593          	addi	a1,a1,710 # 800326b8 <__func__.0+0x2d0>
    8001d3fa:	cf81                	beqz	a5,8001d412 <instruction_access_fault_9+0xe6>
    8001d3fc:	641c                	ld	a5,8(s0)
    8001d3fe:	00015597          	auipc	a1,0x15
    8001d402:	2aa58593          	addi	a1,a1,682 # 800326a8 <__func__.0+0x2c0>
    8001d406:	00978663          	beq	a5,s1,8001d412 <instruction_access_fault_9+0xe6>
    8001d40a:	00015597          	auipc	a1,0x15
    8001d40e:	2ae58593          	addi	a1,a1,686 # 800326b8 <__func__.0+0x2d0>
    8001d412:	00015517          	auipc	a0,0x15
    8001d416:	2e650513          	addi	a0,a0,742 # 800326f8 <__func__.0+0x310>
    8001d41a:	0aa120ef          	jal	8002f4c4 <printf>
    8001d41e:	0003f797          	auipc	a5,0x3f
    8001d422:	bf37c783          	lbu	a5,-1037(a5) # 8005c011 <excpt+0x1>
    8001d426:	c789                	beqz	a5,8001d430 <instruction_access_fault_9+0x104>
    8001d428:	6418                	ld	a4,8(s0)
    8001d42a:	4785                	li	a5,1
    8001d42c:	00f70c63          	beq	a4,a5,8001d444 <instruction_access_fault_9+0x118>
    8001d430:	00015517          	auipc	a0,0x15
    8001d434:	2d050513          	addi	a0,a0,720 # 80032700 <__func__.0+0x318>
    8001d438:	08c120ef          	jal	8002f4c4 <printf>
    8001d43c:	02900513          	li	a0,41
    8001d440:	573100ef          	jal	8002e1b2 <putchar>
    8001d444:	4529                	li	a0,10
    8001d446:	56d100ef          	jal	8002e1b2 <putchar>
    8001d44a:	0003f497          	auipc	s1,0x3f
    8001d44e:	bc74c483          	lbu	s1,-1081(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d452:	00015597          	auipc	a1,0x15
    8001d456:	26658593          	addi	a1,a1,614 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d45a:	cc91                	beqz	s1,8001d476 <instruction_access_fault_9+0x14a>
    8001d45c:	6418                	ld	a4,8(s0)
    8001d45e:	4785                	li	a5,1
    TEST_END();
    8001d460:	00015597          	auipc	a1,0x15
    8001d464:	24858593          	addi	a1,a1,584 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d468:	00f70763          	beq	a4,a5,8001d476 <instruction_access_fault_9+0x14a>
    8001d46c:	4481                	li	s1,0
    TEST_END();
    8001d46e:	00015597          	auipc	a1,0x15
    8001d472:	24a58593          	addi	a1,a1,586 # 800326b8 <__func__.0+0x2d0>
    8001d476:	00015517          	auipc	a0,0x15
    8001d47a:	2ea50513          	addi	a0,a0,746 # 80032760 <__func__.0+0x378>
    8001d47e:	046120ef          	jal	8002f4c4 <printf>
    8001d482:	4511                	li	a0,4
    8001d484:	a91e30ef          	jal	80000f14 <goto_priv>
    8001d488:	aeee40ef          	jal	80001776 <reset_state>
}
    8001d48c:	60e2                	ld	ra,24(sp)
    8001d48e:	6442                	ld	s0,16(sp)
    8001d490:	8526                	mv	a0,s1
    8001d492:	64a2                	ld	s1,8(sp)
    8001d494:	6105                	addi	sp,sp,32
    8001d496:	8082                	ret

000000008001d498 <instruction_access_fault_10>:

bool instruction_access_fault_10(){
    8001d498:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d49a:	00014597          	auipc	a1,0x14
    8001d49e:	17658593          	addi	a1,a1,374 # 80031610 <__func__.1>
    8001d4a2:	00015517          	auipc	a0,0x15
    8001d4a6:	22650513          	addi	a0,a0,550 # 800326c8 <__func__.0+0x2e0>
bool instruction_access_fault_10(){
    8001d4aa:	ec06                	sd	ra,24(sp)
    8001d4ac:	e822                	sd	s0,16(sp)
    8001d4ae:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d4b0:	014120ef          	jal	8002f4c4 <printf>
    8001d4b4:	4529                	li	a0,10
    8001d4b6:	4fd100ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001d4ba:	4511                	li	a0,4
    8001d4bc:	a59e30ef          	jal	80000f14 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d4c0:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d4c4:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d4c8:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d4cc:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d4d0:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x90000000);
    8001d4d4:	47a5                	li	a5,9
    8001d4d6:	07f2                	slli	a5,a5,0x1c
    8001d4d8:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d4dc:	08000793          	li	a5,128
    8001d4e0:	3a07a073          	csrs	pmpcfg0,a5
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));printf("pmpcfg2=%llx\n",CSRR(CSR_PMPCFG2));
    8001d4e4:	3a0025f3          	csrr	a1,pmpcfg0
    8001d4e8:	0001c517          	auipc	a0,0x1c
    8001d4ec:	81050513          	addi	a0,a0,-2032 # 80038cf8 <__func__.0+0x6910>
    8001d4f0:	7d5110ef          	jal	8002f4c4 <printf>
    8001d4f4:	3a2025f3          	csrr	a1,pmpcfg2
    8001d4f8:	0001c517          	auipc	a0,0x1c
    8001d4fc:	1f850513          	addi	a0,a0,504 # 800396f0 <__func__.0+0x7308>
    8001d500:	7c5110ef          	jal	8002f4c4 <printf>
    goto_priv(PRIV_HS);
    8001d504:	450d                	li	a0,3
    8001d506:	a0fe30ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d50a:	90fe30ef          	jal	80000e18 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x9f000000UL << 2);
    8001d50e:	09f00793          	li	a5,159
    8001d512:	07ea                	slli	a5,a5,0x1a
    8001d514:	0003f417          	auipc	s0,0x3f
    8001d518:	afc40413          	addi	s0,s0,-1284 # 8005c010 <excpt>
    8001d51c:	00000297          	auipc	t0,0x0
    8001d520:	00c28293          	addi	t0,t0,12 # 8001d528 <instruction_access_fault_10+0x90>
    8001d524:	02543c23          	sd	t0,56(s0)
    8001d528:	8782                	jr	a5

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d52a:	08c00593          	li	a1,140
    8001d52e:	0001c617          	auipc	a2,0x1c
    8001d532:	1d260613          	addi	a2,a2,466 # 80039700 <__func__.0+0x7318>
    8001d536:	00015517          	auipc	a0,0x15
    8001d53a:	1aa50513          	addi	a0,a0,426 # 800326e0 <__func__.0+0x2f8>
    8001d53e:	787110ef          	jal	8002f4c4 <printf>
    8001d542:	0003f797          	auipc	a5,0x3f
    8001d546:	acf7c783          	lbu	a5,-1329(a5) # 8005c011 <excpt+0x1>
    8001d54a:	00015597          	auipc	a1,0x15
    8001d54e:	16e58593          	addi	a1,a1,366 # 800326b8 <__func__.0+0x2d0>
    8001d552:	cf89                	beqz	a5,8001d56c <instruction_access_fault_10+0xd4>
    8001d554:	6418                	ld	a4,8(s0)
    8001d556:	4785                	li	a5,1
    8001d558:	00015597          	auipc	a1,0x15
    8001d55c:	15058593          	addi	a1,a1,336 # 800326a8 <__func__.0+0x2c0>
    8001d560:	00f70663          	beq	a4,a5,8001d56c <instruction_access_fault_10+0xd4>
    8001d564:	00015597          	auipc	a1,0x15
    8001d568:	15458593          	addi	a1,a1,340 # 800326b8 <__func__.0+0x2d0>
    8001d56c:	00015517          	auipc	a0,0x15
    8001d570:	18c50513          	addi	a0,a0,396 # 800326f8 <__func__.0+0x310>
    8001d574:	751110ef          	jal	8002f4c4 <printf>
    8001d578:	0003f797          	auipc	a5,0x3f
    8001d57c:	a997c783          	lbu	a5,-1383(a5) # 8005c011 <excpt+0x1>
    8001d580:	c789                	beqz	a5,8001d58a <instruction_access_fault_10+0xf2>
    8001d582:	6418                	ld	a4,8(s0)
    8001d584:	4785                	li	a5,1
    8001d586:	00f70c63          	beq	a4,a5,8001d59e <instruction_access_fault_10+0x106>
    8001d58a:	00015517          	auipc	a0,0x15
    8001d58e:	17650513          	addi	a0,a0,374 # 80032700 <__func__.0+0x318>
    8001d592:	733110ef          	jal	8002f4c4 <printf>
    8001d596:	02900513          	li	a0,41
    8001d59a:	419100ef          	jal	8002e1b2 <putchar>
    8001d59e:	4529                	li	a0,10
    8001d5a0:	413100ef          	jal	8002e1b2 <putchar>
    8001d5a4:	0003f497          	auipc	s1,0x3f
    8001d5a8:	a6d4c483          	lbu	s1,-1427(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d5ac:	00015597          	auipc	a1,0x15
    8001d5b0:	10c58593          	addi	a1,a1,268 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d5b4:	cc91                	beqz	s1,8001d5d0 <instruction_access_fault_10+0x138>
    8001d5b6:	6418                	ld	a4,8(s0)
    8001d5b8:	4785                	li	a5,1
    TEST_END();
    8001d5ba:	00015597          	auipc	a1,0x15
    8001d5be:	0ee58593          	addi	a1,a1,238 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d5c2:	00f70763          	beq	a4,a5,8001d5d0 <instruction_access_fault_10+0x138>
    8001d5c6:	4481                	li	s1,0
    TEST_END();
    8001d5c8:	00015597          	auipc	a1,0x15
    8001d5cc:	0f058593          	addi	a1,a1,240 # 800326b8 <__func__.0+0x2d0>
    8001d5d0:	00015517          	auipc	a0,0x15
    8001d5d4:	19050513          	addi	a0,a0,400 # 80032760 <__func__.0+0x378>
    8001d5d8:	6ed110ef          	jal	8002f4c4 <printf>
    8001d5dc:	4511                	li	a0,4
    8001d5de:	937e30ef          	jal	80000f14 <goto_priv>
    8001d5e2:	994e40ef          	jal	80001776 <reset_state>
}
    8001d5e6:	60e2                	ld	ra,24(sp)
    8001d5e8:	6442                	ld	s0,16(sp)
    8001d5ea:	8526                	mv	a0,s1
    8001d5ec:	64a2                	ld	s1,8(sp)
    8001d5ee:	6105                	addi	sp,sp,32
    8001d5f0:	8082                	ret

000000008001d5f2 <pmp_granularity_test>:

bool pmp_granularity_test(){
    8001d5f2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d5f4:	00014597          	auipc	a1,0x14
    8001d5f8:	03c58593          	addi	a1,a1,60 # 80031630 <__func__.0>
    8001d5fc:	00015517          	auipc	a0,0x15
    8001d600:	0cc50513          	addi	a0,a0,204 # 800326c8 <__func__.0+0x2e0>
bool pmp_granularity_test(){
    8001d604:	ec06                	sd	ra,24(sp)
    8001d606:	e822                	sd	s0,16(sp)
    8001d608:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d60a:	6bb110ef          	jal	8002f4c4 <printf>
    8001d60e:	4529                	li	a0,10
    8001d610:	3a3100ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8001d614:	4511                	li	a0,4
    8001d616:	8ffe30ef          	jal	80000f14 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d61a:	3a005073          	csrwi	pmpcfg0,0
    CSRW(CSR_PMPADDR0,(uint64_t)0x0);
    8001d61e:	3b005073          	csrwi	pmpaddr0,0


    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));
    8001d622:	3a0025f3          	csrr	a1,pmpcfg0
    8001d626:	0001b517          	auipc	a0,0x1b
    8001d62a:	6d250513          	addi	a0,a0,1746 # 80038cf8 <__func__.0+0x6910>
    8001d62e:	697110ef          	jal	8002f4c4 <printf>
    // printf("pmpaddr0=%llx\n",CSRR(CSR_PMPADDR0));

    CSRW(CSR_PMPADDR0, (uint64_t)-1);
    8001d632:	57fd                	li	a5,-1
    8001d634:	3b079073          	csrw	pmpaddr0,a5
    // CSRS(CSR_PMPADDR0, 1ULL << 9);

    printf("pmpaddr0=%llx\n",CSRR(CSR_PMPADDR0));
    8001d638:	3b0025f3          	csrr	a1,pmpaddr0
    8001d63c:	0001c517          	auipc	a0,0x1c
    8001d640:	12450513          	addi	a0,a0,292 # 80039760 <__func__.0+0x7378>
    8001d644:	681110ef          	jal	8002f4c4 <printf>
    

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d648:	08c00593          	li	a1,140
    8001d64c:	0001c617          	auipc	a2,0x1c
    8001d650:	0b460613          	addi	a2,a2,180 # 80039700 <__func__.0+0x7318>
    8001d654:	00015517          	auipc	a0,0x15
    8001d658:	08c50513          	addi	a0,a0,140 # 800326e0 <__func__.0+0x2f8>
    8001d65c:	669110ef          	jal	8002f4c4 <printf>
    8001d660:	0003f797          	auipc	a5,0x3f
    8001d664:	9b17c783          	lbu	a5,-1615(a5) # 8005c011 <excpt+0x1>
    8001d668:	0003f497          	auipc	s1,0x3f
    8001d66c:	9a848493          	addi	s1,s1,-1624 # 8005c010 <excpt>
    8001d670:	00015597          	auipc	a1,0x15
    8001d674:	04858593          	addi	a1,a1,72 # 800326b8 <__func__.0+0x2d0>
    8001d678:	cf89                	beqz	a5,8001d692 <pmp_granularity_test+0xa0>
    8001d67a:	6498                	ld	a4,8(s1)
    8001d67c:	4785                	li	a5,1
    8001d67e:	00015597          	auipc	a1,0x15
    8001d682:	02a58593          	addi	a1,a1,42 # 800326a8 <__func__.0+0x2c0>
    8001d686:	00f70663          	beq	a4,a5,8001d692 <pmp_granularity_test+0xa0>
    8001d68a:	00015597          	auipc	a1,0x15
    8001d68e:	02e58593          	addi	a1,a1,46 # 800326b8 <__func__.0+0x2d0>
    8001d692:	00015517          	auipc	a0,0x15
    8001d696:	06650513          	addi	a0,a0,102 # 800326f8 <__func__.0+0x310>
    8001d69a:	62b110ef          	jal	8002f4c4 <printf>
    8001d69e:	0003f797          	auipc	a5,0x3f
    8001d6a2:	9737c783          	lbu	a5,-1677(a5) # 8005c011 <excpt+0x1>
    8001d6a6:	c789                	beqz	a5,8001d6b0 <pmp_granularity_test+0xbe>
    8001d6a8:	6498                	ld	a4,8(s1)
    8001d6aa:	4785                	li	a5,1
    8001d6ac:	00f70c63          	beq	a4,a5,8001d6c4 <pmp_granularity_test+0xd2>
    8001d6b0:	00015517          	auipc	a0,0x15
    8001d6b4:	05050513          	addi	a0,a0,80 # 80032700 <__func__.0+0x318>
    8001d6b8:	60d110ef          	jal	8002f4c4 <printf>
    8001d6bc:	02900513          	li	a0,41
    8001d6c0:	2f3100ef          	jal	8002e1b2 <putchar>
    8001d6c4:	4529                	li	a0,10
    8001d6c6:	2ed100ef          	jal	8002e1b2 <putchar>
    8001d6ca:	0003f417          	auipc	s0,0x3f
    8001d6ce:	94744403          	lbu	s0,-1721(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d6d2:	00015597          	auipc	a1,0x15
    8001d6d6:	fe658593          	addi	a1,a1,-26 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d6da:	cc11                	beqz	s0,8001d6f6 <pmp_granularity_test+0x104>
    8001d6dc:	6498                	ld	a4,8(s1)
    8001d6de:	4785                	li	a5,1
    TEST_END();
    8001d6e0:	00015597          	auipc	a1,0x15
    8001d6e4:	fc858593          	addi	a1,a1,-56 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d6e8:	00f70763          	beq	a4,a5,8001d6f6 <pmp_granularity_test+0x104>
    8001d6ec:	4401                	li	s0,0
    TEST_END();
    8001d6ee:	00015597          	auipc	a1,0x15
    8001d6f2:	fca58593          	addi	a1,a1,-54 # 800326b8 <__func__.0+0x2d0>
    8001d6f6:	00015517          	auipc	a0,0x15
    8001d6fa:	06a50513          	addi	a0,a0,106 # 80032760 <__func__.0+0x378>
    8001d6fe:	5c7110ef          	jal	8002f4c4 <printf>
    8001d702:	4511                	li	a0,4
    8001d704:	811e30ef          	jal	80000f14 <goto_priv>
    8001d708:	86ee40ef          	jal	80001776 <reset_state>
    8001d70c:	60e2                	ld	ra,24(sp)
    8001d70e:	8522                	mv	a0,s0
    8001d710:	6442                	ld	s0,16(sp)
    8001d712:	64a2                	ld	s1,8(sp)
    8001d714:	6105                	addi	sp,sp,32
    8001d716:	8082                	ret

000000008001d718 <mstatus_csr_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool mstatus_csr_tests_1(){
    8001d718:	1101                	addi	sp,sp,-32

TEST_START();
    8001d71a:	00014597          	auipc	a1,0x14
    8001d71e:	f2e58593          	addi	a1,a1,-210 # 80031648 <__func__.10>
    8001d722:	00015517          	auipc	a0,0x15
    8001d726:	fa650513          	addi	a0,a0,-90 # 800326c8 <__func__.0+0x2e0>
bool mstatus_csr_tests_1(){
    8001d72a:	ec06                	sd	ra,24(sp)
    8001d72c:	e822                	sd	s0,16(sp)
    8001d72e:	e426                	sd	s1,8(sp)
TEST_START();
    8001d730:	595110ef          	jal	8002f4c4 <printf>
    8001d734:	4529                	li	a0,10
    8001d736:	27d100ef          	jal	8002e1b2 <putchar>
    printf("%d\n",x);
*/

//mstatus.SUM 阻止S对U访问，缺页异常
    
    goto_priv(PRIV_HS);
    8001d73a:	450d                	li	a0,3
    8001d73c:	fd8e30ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001d740:	eade20ef          	jal	800005ec <hspt_init>
    hpt_init();
    8001d744:	a8ce30ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001d748:	840e30ef          	jal	80000788 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001d74c:	4511                	li	a0,4
    8001d74e:	fc6e30ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATUS, MSTATUS_SUM);
    8001d752:	000407b7          	lui	a5,0x40
    8001d756:	3007b073          	csrc	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001d75a:	ebee30ef          	jal	80000e18 <test_setup_except_function>

    goto_priv(PRIV_HS);
    8001d75e:	450d                	li	a0,3
    8001d760:	fb4e30ef          	jal	80000f14 <goto_priv>
    asm volatile(
    8001d764:	000807b7          	lui	a5,0x80
    8001d768:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001d76a:	07b6                	slli	a5,a5,0xd
    8001d76c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d770:	08c00593          	li	a1,140
    8001d774:	0001c617          	auipc	a2,0x1c
    8001d778:	ffc60613          	addi	a2,a2,-4 # 80039770 <__func__.0+0x7388>
    8001d77c:	00015517          	auipc	a0,0x15
    8001d780:	f6450513          	addi	a0,a0,-156 # 800326e0 <__func__.0+0x2f8>
    8001d784:	541110ef          	jal	8002f4c4 <printf>
    8001d788:	0003f797          	auipc	a5,0x3f
    8001d78c:	8897c783          	lbu	a5,-1911(a5) # 8005c011 <excpt+0x1>
    8001d790:	0003f497          	auipc	s1,0x3f
    8001d794:	88048493          	addi	s1,s1,-1920 # 8005c010 <excpt>
    8001d798:	00015597          	auipc	a1,0x15
    8001d79c:	f2058593          	addi	a1,a1,-224 # 800326b8 <__func__.0+0x2d0>
    8001d7a0:	cf89                	beqz	a5,8001d7ba <mstatus_csr_tests_1+0xa2>
    8001d7a2:	6498                	ld	a4,8(s1)
    8001d7a4:	47b5                	li	a5,13
    8001d7a6:	00015597          	auipc	a1,0x15
    8001d7aa:	f0258593          	addi	a1,a1,-254 # 800326a8 <__func__.0+0x2c0>
    8001d7ae:	00f70663          	beq	a4,a5,8001d7ba <mstatus_csr_tests_1+0xa2>
    8001d7b2:	00015597          	auipc	a1,0x15
    8001d7b6:	f0658593          	addi	a1,a1,-250 # 800326b8 <__func__.0+0x2d0>
    8001d7ba:	00015517          	auipc	a0,0x15
    8001d7be:	f3e50513          	addi	a0,a0,-194 # 800326f8 <__func__.0+0x310>
    8001d7c2:	503110ef          	jal	8002f4c4 <printf>
    8001d7c6:	0003f797          	auipc	a5,0x3f
    8001d7ca:	84b7c783          	lbu	a5,-1973(a5) # 8005c011 <excpt+0x1>
    8001d7ce:	c789                	beqz	a5,8001d7d8 <mstatus_csr_tests_1+0xc0>
    8001d7d0:	6498                	ld	a4,8(s1)
    8001d7d2:	47b5                	li	a5,13
    8001d7d4:	00f70c63          	beq	a4,a5,8001d7ec <mstatus_csr_tests_1+0xd4>
    8001d7d8:	00015517          	auipc	a0,0x15
    8001d7dc:	f2850513          	addi	a0,a0,-216 # 80032700 <__func__.0+0x318>
    8001d7e0:	4e5110ef          	jal	8002f4c4 <printf>
    8001d7e4:	02900513          	li	a0,41
    8001d7e8:	1cb100ef          	jal	8002e1b2 <putchar>
    8001d7ec:	4529                	li	a0,10
    8001d7ee:	1c5100ef          	jal	8002e1b2 <putchar>
    8001d7f2:	0003f417          	auipc	s0,0x3f
    8001d7f6:	81f44403          	lbu	s0,-2017(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001d7fa:	00015597          	auipc	a1,0x15
    8001d7fe:	ebe58593          	addi	a1,a1,-322 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d802:	cc11                	beqz	s0,8001d81e <mstatus_csr_tests_1+0x106>
    8001d804:	6498                	ld	a4,8(s1)
    8001d806:	47b5                	li	a5,13
    TEST_END();
    8001d808:	00015597          	auipc	a1,0x15
    8001d80c:	ea058593          	addi	a1,a1,-352 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d810:	00f70763          	beq	a4,a5,8001d81e <mstatus_csr_tests_1+0x106>
    8001d814:	4401                	li	s0,0
    TEST_END();
    8001d816:	00015597          	auipc	a1,0x15
    8001d81a:	ea258593          	addi	a1,a1,-350 # 800326b8 <__func__.0+0x2d0>
    8001d81e:	00015517          	auipc	a0,0x15
    8001d822:	f4250513          	addi	a0,a0,-190 # 80032760 <__func__.0+0x378>
    8001d826:	49f110ef          	jal	8002f4c4 <printf>
    8001d82a:	4511                	li	a0,4
    8001d82c:	ee8e30ef          	jal	80000f14 <goto_priv>
    8001d830:	f47e30ef          	jal	80001776 <reset_state>
}
    8001d834:	60e2                	ld	ra,24(sp)
    8001d836:	8522                	mv	a0,s0
    8001d838:	6442                	ld	s0,16(sp)
    8001d83a:	64a2                	ld	s1,8(sp)
    8001d83c:	6105                	addi	sp,sp,32
    8001d83e:	8082                	ret

000000008001d840 <mstatus_csr_tests_2>:

bool mstatus_csr_tests_2(){
    8001d840:	1141                	addi	sp,sp,-16

    TEST_START();
    8001d842:	00014597          	auipc	a1,0x14
    8001d846:	e1e58593          	addi	a1,a1,-482 # 80031660 <__func__.8>
    8001d84a:	00015517          	auipc	a0,0x15
    8001d84e:	e7e50513          	addi	a0,a0,-386 # 800326c8 <__func__.0+0x2e0>
bool mstatus_csr_tests_2(){
    8001d852:	e406                	sd	ra,8(sp)
    8001d854:	e022                	sd	s0,0(sp)
    TEST_START();
    8001d856:	46f110ef          	jal	8002f4c4 <printf>
    8001d85a:	4529                	li	a0,10
    8001d85c:	157100ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8001d860:	450d                	li	a0,3
    8001d862:	eb2e30ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001d866:	d87e20ef          	jal	800005ec <hspt_init>
    hpt_init();
    8001d86a:	966e30ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001d86e:	f1be20ef          	jal	80000788 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001d872:	4511                	li	a0,4
    8001d874:	ea0e30ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_SUM);
    8001d878:	000407b7          	lui	a5,0x40
    8001d87c:	3007a073          	csrs	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001d880:	d98e30ef          	jal	80000e18 <test_setup_except_function>

    goto_priv(PRIV_HS);
    8001d884:	450d                	li	a0,3
    8001d886:	e8ee30ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001d88a:	4509                	li	a0,2
    8001d88c:	da8e30ef          	jal	80000e34 <set_prev_priv>
    8001d890:	000807b7          	lui	a5,0x80
    8001d894:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001d896:	07b6                	slli	a5,a5,0xd
    8001d898:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
        printf("%d\n",excpt.triggered);
    8001d89c:	0003e597          	auipc	a1,0x3e
    8001d8a0:	7755c583          	lbu	a1,1909(a1) # 8005c011 <excpt+0x1>
    8001d8a4:	00016517          	auipc	a0,0x16
    8001d8a8:	9a450513          	addi	a0,a0,-1628 # 80033248 <__func__.0+0xe60>
    8001d8ac:	419110ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.cause);
    8001d8b0:	0003e597          	auipc	a1,0x3e
    8001d8b4:	7685b583          	ld	a1,1896(a1) # 8005c018 <excpt+0x8>
    8001d8b8:	00016517          	auipc	a0,0x16
    8001d8bc:	99050513          	addi	a0,a0,-1648 # 80033248 <__func__.0+0xe60>
    8001d8c0:	405110ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d8c4:	08c00593          	li	a1,140
    8001d8c8:	0001c617          	auipc	a2,0x1c
    8001d8cc:	ee060613          	addi	a2,a2,-288 # 800397a8 <__func__.0+0x73c0>
    8001d8d0:	00015517          	auipc	a0,0x15
    8001d8d4:	e1050513          	addi	a0,a0,-496 # 800326e0 <__func__.0+0x2f8>
    8001d8d8:	3ed110ef          	jal	8002f4c4 <printf>
    8001d8dc:	0003e797          	auipc	a5,0x3e
    8001d8e0:	7357c783          	lbu	a5,1845(a5) # 8005c011 <excpt+0x1>
    8001d8e4:	00015597          	auipc	a1,0x15
    8001d8e8:	dc458593          	addi	a1,a1,-572 # 800326a8 <__func__.0+0x2c0>
    8001d8ec:	c789                	beqz	a5,8001d8f6 <mstatus_csr_tests_2+0xb6>
    8001d8ee:	00015597          	auipc	a1,0x15
    8001d8f2:	dca58593          	addi	a1,a1,-566 # 800326b8 <__func__.0+0x2d0>
    8001d8f6:	00015517          	auipc	a0,0x15
    8001d8fa:	e0250513          	addi	a0,a0,-510 # 800326f8 <__func__.0+0x310>
    8001d8fe:	3c7110ef          	jal	8002f4c4 <printf>
    8001d902:	0003e797          	auipc	a5,0x3e
    8001d906:	70f7c783          	lbu	a5,1807(a5) # 8005c011 <excpt+0x1>
    8001d90a:	e7a1                	bnez	a5,8001d952 <mstatus_csr_tests_2+0x112>
    8001d90c:	4529                	li	a0,10
    8001d90e:	0a5100ef          	jal	8002e1b2 <putchar>
    8001d912:	0003e797          	auipc	a5,0x3e
    8001d916:	6ff7c783          	lbu	a5,1791(a5) # 8005c011 <excpt+0x1>
    8001d91a:	e795                	bnez	a5,8001d946 <mstatus_csr_tests_2+0x106>
    8001d91c:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001d91e:	00015597          	auipc	a1,0x15
    8001d922:	d8a58593          	addi	a1,a1,-630 # 800326a8 <__func__.0+0x2c0>
    8001d926:	00015517          	auipc	a0,0x15
    8001d92a:	e3a50513          	addi	a0,a0,-454 # 80032760 <__func__.0+0x378>
    8001d92e:	397110ef          	jal	8002f4c4 <printf>
    8001d932:	4511                	li	a0,4
    8001d934:	de0e30ef          	jal	80000f14 <goto_priv>
    8001d938:	e3fe30ef          	jal	80001776 <reset_state>
}
    8001d93c:	60a2                	ld	ra,8(sp)
    8001d93e:	8522                	mv	a0,s0
    8001d940:	6402                	ld	s0,0(sp)
    8001d942:	0141                	addi	sp,sp,16
    8001d944:	8082                	ret
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d946:	4401                	li	s0,0
    TEST_END();
    8001d948:	00015597          	auipc	a1,0x15
    8001d94c:	d7058593          	addi	a1,a1,-656 # 800326b8 <__func__.0+0x2d0>
    8001d950:	bfd9                	j	8001d926 <mstatus_csr_tests_2+0xe6>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d952:	00015517          	auipc	a0,0x15
    8001d956:	dae50513          	addi	a0,a0,-594 # 80032700 <__func__.0+0x318>
    8001d95a:	36b110ef          	jal	8002f4c4 <printf>
    8001d95e:	02900513          	li	a0,41
    8001d962:	051100ef          	jal	8002e1b2 <putchar>
    8001d966:	b75d                	j	8001d90c <mstatus_csr_tests_2+0xcc>

000000008001d968 <mstatus_csr_tests_3>:

bool mstatus_csr_tests_3(){
    8001d968:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d96a:	00014597          	auipc	a1,0x14
    8001d96e:	d0e58593          	addi	a1,a1,-754 # 80031678 <__func__.7>
    8001d972:	00015517          	auipc	a0,0x15
    8001d976:	d5650513          	addi	a0,a0,-682 # 800326c8 <__func__.0+0x2e0>
bool mstatus_csr_tests_3(){
    8001d97a:	ec06                	sd	ra,24(sp)
    8001d97c:	e822                	sd	s0,16(sp)
    8001d97e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d980:	345110ef          	jal	8002f4c4 <printf>
    8001d984:	4529                	li	a0,10
    8001d986:	02d100ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8001d98a:	450d                	li	a0,3
    8001d98c:	d88e30ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001d990:	c5de20ef          	jal	800005ec <hspt_init>
    hpt_init();
    8001d994:	83ce30ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001d998:	df1e20ef          	jal	80000788 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    goto_priv(PRIV_M);
    8001d99c:	4511                	li	a0,4
    8001d99e:	d76e30ef          	jal	80000f14 <goto_priv>

    uintptr_t addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_MSTATUS, MSTATUS_MXR);
    8001d9a2:	000807b7          	lui	a5,0x80
    8001d9a6:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    8001d9aa:	450d                	li	a0,3
    8001d9ac:	d68e30ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001d9b0:	4509                	li	a0,2
    8001d9b2:	c82e30ef          	jal	80000e34 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001d9b6:	c62e30ef          	jal	80000e18 <test_setup_except_function>
    8001d9ba:	001007b7          	lui	a5,0x100
    8001d9be:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001d9c2:	07b2                	slli	a5,a5,0xc
    8001d9c4:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    printf("%d\n",excpt.triggered);
    8001d9c8:	0003e597          	auipc	a1,0x3e
    8001d9cc:	6495c583          	lbu	a1,1609(a1) # 8005c011 <excpt+0x1>
    8001d9d0:	00016517          	auipc	a0,0x16
    8001d9d4:	87850513          	addi	a0,a0,-1928 # 80033248 <__func__.0+0xe60>
    8001d9d8:	0003e417          	auipc	s0,0x3e
    8001d9dc:	63840413          	addi	s0,s0,1592 # 8005c010 <excpt>
    8001d9e0:	2e5110ef          	jal	8002f4c4 <printf>
    printf("%d\n",excpt.cause);
    8001d9e4:	640c                	ld	a1,8(s0)
    8001d9e6:	00016517          	auipc	a0,0x16
    8001d9ea:	86250513          	addi	a0,a0,-1950 # 80033248 <__func__.0+0xe60>
    8001d9ee:	2d7110ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001d9f2:	08c00593          	li	a1,140
    8001d9f6:	0001c617          	auipc	a2,0x1c
    8001d9fa:	dea60613          	addi	a2,a2,-534 # 800397e0 <__func__.0+0x73f8>
    8001d9fe:	00015517          	auipc	a0,0x15
    8001da02:	ce250513          	addi	a0,a0,-798 # 800326e0 <__func__.0+0x2f8>
    8001da06:	2bf110ef          	jal	8002f4c4 <printf>
    8001da0a:	0003e797          	auipc	a5,0x3e
    8001da0e:	6077c783          	lbu	a5,1543(a5) # 8005c011 <excpt+0x1>
    8001da12:	00015597          	auipc	a1,0x15
    8001da16:	ca658593          	addi	a1,a1,-858 # 800326b8 <__func__.0+0x2d0>
    8001da1a:	cf89                	beqz	a5,8001da34 <mstatus_csr_tests_3+0xcc>
    8001da1c:	6418                	ld	a4,8(s0)
    8001da1e:	47b5                	li	a5,13
    8001da20:	00015597          	auipc	a1,0x15
    8001da24:	c8858593          	addi	a1,a1,-888 # 800326a8 <__func__.0+0x2c0>
    8001da28:	00f70663          	beq	a4,a5,8001da34 <mstatus_csr_tests_3+0xcc>
    8001da2c:	00015597          	auipc	a1,0x15
    8001da30:	c8c58593          	addi	a1,a1,-884 # 800326b8 <__func__.0+0x2d0>
    8001da34:	00015517          	auipc	a0,0x15
    8001da38:	cc450513          	addi	a0,a0,-828 # 800326f8 <__func__.0+0x310>
    8001da3c:	289110ef          	jal	8002f4c4 <printf>
    8001da40:	0003e797          	auipc	a5,0x3e
    8001da44:	5d17c783          	lbu	a5,1489(a5) # 8005c011 <excpt+0x1>
    8001da48:	c789                	beqz	a5,8001da52 <mstatus_csr_tests_3+0xea>
    8001da4a:	6418                	ld	a4,8(s0)
    8001da4c:	47b5                	li	a5,13
    8001da4e:	00f70c63          	beq	a4,a5,8001da66 <mstatus_csr_tests_3+0xfe>
    8001da52:	00015517          	auipc	a0,0x15
    8001da56:	cae50513          	addi	a0,a0,-850 # 80032700 <__func__.0+0x318>
    8001da5a:	26b110ef          	jal	8002f4c4 <printf>
    8001da5e:	02900513          	li	a0,41
    8001da62:	750100ef          	jal	8002e1b2 <putchar>
    8001da66:	4529                	li	a0,10
    8001da68:	74a100ef          	jal	8002e1b2 <putchar>
    8001da6c:	0003e497          	auipc	s1,0x3e
    8001da70:	5a54c483          	lbu	s1,1445(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );


    TEST_END();
    8001da74:	00015597          	auipc	a1,0x15
    8001da78:	c4458593          	addi	a1,a1,-956 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001da7c:	cc91                	beqz	s1,8001da98 <mstatus_csr_tests_3+0x130>
    8001da7e:	6418                	ld	a4,8(s0)
    8001da80:	47b5                	li	a5,13
    TEST_END();
    8001da82:	00015597          	auipc	a1,0x15
    8001da86:	c2658593          	addi	a1,a1,-986 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001da8a:	00f70763          	beq	a4,a5,8001da98 <mstatus_csr_tests_3+0x130>
    8001da8e:	4481                	li	s1,0
    TEST_END();
    8001da90:	00015597          	auipc	a1,0x15
    8001da94:	c2858593          	addi	a1,a1,-984 # 800326b8 <__func__.0+0x2d0>
    8001da98:	00015517          	auipc	a0,0x15
    8001da9c:	cc850513          	addi	a0,a0,-824 # 80032760 <__func__.0+0x378>
    8001daa0:	225110ef          	jal	8002f4c4 <printf>
    8001daa4:	4511                	li	a0,4
    8001daa6:	c6ee30ef          	jal	80000f14 <goto_priv>
    8001daaa:	ccde30ef          	jal	80001776 <reset_state>
}
    8001daae:	60e2                	ld	ra,24(sp)
    8001dab0:	6442                	ld	s0,16(sp)
    8001dab2:	8526                	mv	a0,s1
    8001dab4:	64a2                	ld	s1,8(sp)
    8001dab6:	6105                	addi	sp,sp,32
    8001dab8:	8082                	ret

000000008001daba <mstatus_csr_tests_4>:

bool mstatus_csr_tests_4(){
    8001daba:	1101                	addi	sp,sp,-32

    TEST_START();
    8001dabc:	00014597          	auipc	a1,0x14
    8001dac0:	bd458593          	addi	a1,a1,-1068 # 80031690 <__func__.6>
    8001dac4:	00015517          	auipc	a0,0x15
    8001dac8:	c0450513          	addi	a0,a0,-1020 # 800326c8 <__func__.0+0x2e0>
bool mstatus_csr_tests_4(){
    8001dacc:	ec06                	sd	ra,24(sp)
    8001dace:	e822                	sd	s0,16(sp)
    8001dad0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001dad2:	1f3110ef          	jal	8002f4c4 <printf>
    8001dad6:	4529                	li	a0,10
    8001dad8:	6da100ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_HS);
    8001dadc:	450d                	li	a0,3
    8001dade:	c36e30ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8001dae2:	b0be20ef          	jal	800005ec <hspt_init>
    hpt_init();
    8001dae6:	eebe20ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8001daea:	c9fe20ef          	jal	80000788 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    uintptr_t addr = hs_page_base(VSV_GV);

    goto_priv(PRIV_M);
    8001daee:	4511                	li	a0,4
    8001daf0:	c24e30ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MXR);
    8001daf4:	000807b7          	lui	a5,0x80
    8001daf8:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8001dafc:	450d                	li	a0,3
    8001dafe:	c16e30ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001db02:	4509                	li	a0,2
    8001db04:	b30e30ef          	jal	80000e34 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001db08:	b10e30ef          	jal	80000e18 <test_setup_except_function>
    8001db0c:	001007b7          	lui	a5,0x100
    8001db10:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001db12:	07b2                	slli	a5,a5,0xc
    8001db14:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001db18:	08c00593          	li	a1,140
    8001db1c:	0001c617          	auipc	a2,0x1c
    8001db20:	cfc60613          	addi	a2,a2,-772 # 80039818 <__func__.0+0x7430>
    8001db24:	00015517          	auipc	a0,0x15
    8001db28:	bbc50513          	addi	a0,a0,-1092 # 800326e0 <__func__.0+0x2f8>
    8001db2c:	199110ef          	jal	8002f4c4 <printf>
    8001db30:	0003e797          	auipc	a5,0x3e
    8001db34:	4e17c783          	lbu	a5,1249(a5) # 8005c011 <excpt+0x1>
    8001db38:	0003e497          	auipc	s1,0x3e
    8001db3c:	4d848493          	addi	s1,s1,1240 # 8005c010 <excpt>
    8001db40:	00015597          	auipc	a1,0x15
    8001db44:	b7858593          	addi	a1,a1,-1160 # 800326b8 <__func__.0+0x2d0>
    8001db48:	cf89                	beqz	a5,8001db62 <mstatus_csr_tests_4+0xa8>
    8001db4a:	6498                	ld	a4,8(s1)
    8001db4c:	47b5                	li	a5,13
    8001db4e:	00015597          	auipc	a1,0x15
    8001db52:	b5a58593          	addi	a1,a1,-1190 # 800326a8 <__func__.0+0x2c0>
    8001db56:	00f70663          	beq	a4,a5,8001db62 <mstatus_csr_tests_4+0xa8>
    8001db5a:	00015597          	auipc	a1,0x15
    8001db5e:	b5e58593          	addi	a1,a1,-1186 # 800326b8 <__func__.0+0x2d0>
    8001db62:	00015517          	auipc	a0,0x15
    8001db66:	b9650513          	addi	a0,a0,-1130 # 800326f8 <__func__.0+0x310>
    8001db6a:	15b110ef          	jal	8002f4c4 <printf>
    8001db6e:	0003e797          	auipc	a5,0x3e
    8001db72:	4a37c783          	lbu	a5,1187(a5) # 8005c011 <excpt+0x1>
    8001db76:	c789                	beqz	a5,8001db80 <mstatus_csr_tests_4+0xc6>
    8001db78:	6498                	ld	a4,8(s1)
    8001db7a:	47b5                	li	a5,13
    8001db7c:	00f70c63          	beq	a4,a5,8001db94 <mstatus_csr_tests_4+0xda>
    8001db80:	00015517          	auipc	a0,0x15
    8001db84:	b8050513          	addi	a0,a0,-1152 # 80032700 <__func__.0+0x318>
    8001db88:	13d110ef          	jal	8002f4c4 <printf>
    8001db8c:	02900513          	li	a0,41
    8001db90:	622100ef          	jal	8002e1b2 <putchar>
    8001db94:	4529                	li	a0,10
    8001db96:	61c100ef          	jal	8002e1b2 <putchar>
    8001db9a:	0003e417          	auipc	s0,0x3e
    8001db9e:	47744403          	lbu	s0,1143(s0) # 8005c011 <excpt+0x1>
    8001dba2:	c409                	beqz	s0,8001dbac <mstatus_csr_tests_4+0xf2>
    8001dba4:	6498                	ld	a4,8(s1)
    8001dba6:	47b5                	li	a5,13
    8001dba8:	02f70c63          	beq	a4,a5,8001dbe0 <mstatus_csr_tests_4+0x126>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001dbac:	000807b7          	lui	a5,0x80
    8001dbb0:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001dbb4:	4401                	li	s0,0


TEST_END();
    8001dbb6:	00015597          	auipc	a1,0x15
    8001dbba:	b0258593          	addi	a1,a1,-1278 # 800326b8 <__func__.0+0x2d0>
    8001dbbe:	00015517          	auipc	a0,0x15
    8001dbc2:	ba250513          	addi	a0,a0,-1118 # 80032760 <__func__.0+0x378>
    8001dbc6:	0ff110ef          	jal	8002f4c4 <printf>
    8001dbca:	4511                	li	a0,4
    8001dbcc:	b48e30ef          	jal	80000f14 <goto_priv>
    8001dbd0:	ba7e30ef          	jal	80001776 <reset_state>

}
    8001dbd4:	60e2                	ld	ra,24(sp)
    8001dbd6:	8522                	mv	a0,s0
    8001dbd8:	6442                	ld	s0,16(sp)
    8001dbda:	64a2                	ld	s1,8(sp)
    8001dbdc:	6105                	addi	sp,sp,32
    8001dbde:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001dbe0:	000807b7          	lui	a5,0x80
    8001dbe4:	1007b073          	csrc	sstatus,a5
TEST_END();
    8001dbe8:	00015597          	auipc	a1,0x15
    8001dbec:	ac058593          	addi	a1,a1,-1344 # 800326a8 <__func__.0+0x2c0>
    8001dbf0:	b7f9                	j	8001dbbe <mstatus_csr_tests_4+0x104>

000000008001dbf2 <mstatus_csr_tests_5>:

bool mstatus_csr_tests_5(){
    8001dbf2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001dbf4:	00014597          	auipc	a1,0x14
    8001dbf8:	ab458593          	addi	a1,a1,-1356 # 800316a8 <__func__.5>
    8001dbfc:	00015517          	auipc	a0,0x15
    8001dc00:	acc50513          	addi	a0,a0,-1332 # 800326c8 <__func__.0+0x2e0>
bool mstatus_csr_tests_5(){
    8001dc04:	ec06                	sd	ra,24(sp)
    8001dc06:	e822                	sd	s0,16(sp)
    8001dc08:	e426                	sd	s1,8(sp)
    TEST_START();
    8001dc0a:	0bb110ef          	jal	8002f4c4 <printf>
    8001dc0e:	4529                	li	a0,10
    8001dc10:	5a2100ef          	jal	8002e1b2 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001dc14:	a04e30ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dc18:	4511                	li	a0,4
    8001dc1a:	afae30ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8001dc1e:	004007b7          	lui	a5,0x400
    8001dc22:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001dc26:	450d                	li	a0,3
    8001dc28:	aece30ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VU);
    8001dc2c:	4501                	li	a0,0
    8001dc2e:	a06e30ef          	jal	80000e34 <set_prev_priv>

    TEST_EXEC_SRET();
    8001dc32:	00000297          	auipc	t0,0x0
    8001dc36:	01028293          	addi	t0,t0,16 # 8001dc42 <mstatus_csr_tests_5+0x50>
    8001dc3a:	14129073          	csrw	sepc,t0
    8001dc3e:	10200073          	sret

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001dc42:	08c00593          	li	a1,140
    8001dc46:	00018617          	auipc	a2,0x18
    8001dc4a:	26a60613          	addi	a2,a2,618 # 80035eb0 <__func__.0+0x3ac8>
    8001dc4e:	00015517          	auipc	a0,0x15
    8001dc52:	a9250513          	addi	a0,a0,-1390 # 800326e0 <__func__.0+0x2f8>
    8001dc56:	06f110ef          	jal	8002f4c4 <printf>
    8001dc5a:	0003e797          	auipc	a5,0x3e
    8001dc5e:	3b77c783          	lbu	a5,951(a5) # 8005c011 <excpt+0x1>
    8001dc62:	0003e497          	auipc	s1,0x3e
    8001dc66:	3ae48493          	addi	s1,s1,942 # 8005c010 <excpt>
    8001dc6a:	00015597          	auipc	a1,0x15
    8001dc6e:	a4e58593          	addi	a1,a1,-1458 # 800326b8 <__func__.0+0x2d0>
    8001dc72:	cf89                	beqz	a5,8001dc8c <mstatus_csr_tests_5+0x9a>
    8001dc74:	6498                	ld	a4,8(s1)
    8001dc76:	4789                	li	a5,2
    8001dc78:	00015597          	auipc	a1,0x15
    8001dc7c:	a3058593          	addi	a1,a1,-1488 # 800326a8 <__func__.0+0x2c0>
    8001dc80:	00f70663          	beq	a4,a5,8001dc8c <mstatus_csr_tests_5+0x9a>
    8001dc84:	00015597          	auipc	a1,0x15
    8001dc88:	a3458593          	addi	a1,a1,-1484 # 800326b8 <__func__.0+0x2d0>
    8001dc8c:	00015517          	auipc	a0,0x15
    8001dc90:	a6c50513          	addi	a0,a0,-1428 # 800326f8 <__func__.0+0x310>
    8001dc94:	031110ef          	jal	8002f4c4 <printf>
    8001dc98:	0003e797          	auipc	a5,0x3e
    8001dc9c:	3797c783          	lbu	a5,889(a5) # 8005c011 <excpt+0x1>
    8001dca0:	c789                	beqz	a5,8001dcaa <mstatus_csr_tests_5+0xb8>
    8001dca2:	6498                	ld	a4,8(s1)
    8001dca4:	4789                	li	a5,2
    8001dca6:	00f70c63          	beq	a4,a5,8001dcbe <mstatus_csr_tests_5+0xcc>
    8001dcaa:	00015517          	auipc	a0,0x15
    8001dcae:	a5650513          	addi	a0,a0,-1450 # 80032700 <__func__.0+0x318>
    8001dcb2:	013110ef          	jal	8002f4c4 <printf>
    8001dcb6:	02900513          	li	a0,41
    8001dcba:	4f8100ef          	jal	8002e1b2 <putchar>
    8001dcbe:	4529                	li	a0,10
    8001dcc0:	4f2100ef          	jal	8002e1b2 <putchar>
    8001dcc4:	0003e417          	auipc	s0,0x3e
    8001dcc8:	34d44403          	lbu	s0,845(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001dccc:	00015597          	auipc	a1,0x15
    8001dcd0:	9ec58593          	addi	a1,a1,-1556 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001dcd4:	cc11                	beqz	s0,8001dcf0 <mstatus_csr_tests_5+0xfe>
    8001dcd6:	6498                	ld	a4,8(s1)
    8001dcd8:	4789                	li	a5,2
    TEST_END();
    8001dcda:	00015597          	auipc	a1,0x15
    8001dcde:	9ce58593          	addi	a1,a1,-1586 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001dce2:	00f70763          	beq	a4,a5,8001dcf0 <mstatus_csr_tests_5+0xfe>
    8001dce6:	4401                	li	s0,0
    TEST_END();
    8001dce8:	00015597          	auipc	a1,0x15
    8001dcec:	9d058593          	addi	a1,a1,-1584 # 800326b8 <__func__.0+0x2d0>
    8001dcf0:	00015517          	auipc	a0,0x15
    8001dcf4:	a7050513          	addi	a0,a0,-1424 # 80032760 <__func__.0+0x378>
    8001dcf8:	7cc110ef          	jal	8002f4c4 <printf>
    8001dcfc:	4511                	li	a0,4
    8001dcfe:	a16e30ef          	jal	80000f14 <goto_priv>
    8001dd02:	a75e30ef          	jal	80001776 <reset_state>

}
    8001dd06:	60e2                	ld	ra,24(sp)
    8001dd08:	8522                	mv	a0,s0
    8001dd0a:	6442                	ld	s0,16(sp)
    8001dd0c:	64a2                	ld	s1,8(sp)
    8001dd0e:	6105                	addi	sp,sp,32
    8001dd10:	8082                	ret

000000008001dd12 <hedeleg_csr_tests_1>:

bool hedeleg_csr_tests_1(){
    8001dd12:	1141                	addi	sp,sp,-16

    TEST_START();
    8001dd14:	00014597          	auipc	a1,0x14
    8001dd18:	9ac58593          	addi	a1,a1,-1620 # 800316c0 <__func__.4>
    8001dd1c:	00015517          	auipc	a0,0x15
    8001dd20:	9ac50513          	addi	a0,a0,-1620 # 800326c8 <__func__.0+0x2e0>
bool hedeleg_csr_tests_1(){
    8001dd24:	e406                	sd	ra,8(sp)
    8001dd26:	e022                	sd	s0,0(sp)
    TEST_START();
    8001dd28:	79c110ef          	jal	8002f4c4 <printf>
    8001dd2c:	4529                	li	a0,10
    8001dd2e:	484100ef          	jal	8002e1b2 <putchar>
    TEST_SETUP_EXCEPT();
    8001dd32:	8e6e30ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dd36:	4511                	li	a0,4
    8001dd38:	9dce30ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_HEDELEG, (uint64_t)-1);
    8001dd3c:	57fd                	li	a5,-1
    8001dd3e:	60279073          	csrw	hedeleg,a5
    printf("%llx\n",CSRR(CSR_HEDELEG));
    8001dd42:	602025f3          	csrr	a1,hedeleg
    8001dd46:	0001b517          	auipc	a0,0x1b
    8001dd4a:	fba50513          	addi	a0,a0,-70 # 80038d00 <__func__.0+0x6918>
    8001dd4e:	776110ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("hedeleg right",
    8001dd52:	0001c617          	auipc	a2,0x1c
    8001dd56:	b0e60613          	addi	a2,a2,-1266 # 80039860 <__func__.0+0x7478>
    8001dd5a:	08c00593          	li	a1,140
    8001dd5e:	00015517          	auipc	a0,0x15
    8001dd62:	98250513          	addi	a0,a0,-1662 # 800326e0 <__func__.0+0x2f8>
    8001dd66:	75e110ef          	jal	8002f4c4 <printf>
    8001dd6a:	60202773          	csrr	a4,hedeleg
    8001dd6e:	67ad                	lui	a5,0xb
    8001dd70:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dd74:	00015597          	auipc	a1,0x15
    8001dd78:	93458593          	addi	a1,a1,-1740 # 800326a8 <__func__.0+0x2c0>
    8001dd7c:	00f70663          	beq	a4,a5,8001dd88 <hedeleg_csr_tests_1+0x76>
    8001dd80:	00015597          	auipc	a1,0x15
    8001dd84:	93858593          	addi	a1,a1,-1736 # 800326b8 <__func__.0+0x2d0>
    8001dd88:	00015517          	auipc	a0,0x15
    8001dd8c:	97050513          	addi	a0,a0,-1680 # 800326f8 <__func__.0+0x310>
    8001dd90:	734110ef          	jal	8002f4c4 <printf>
    8001dd94:	60202773          	csrr	a4,hedeleg
    8001dd98:	67ad                	lui	a5,0xb
    8001dd9a:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dd9e:	00f70c63          	beq	a4,a5,8001ddb6 <hedeleg_csr_tests_1+0xa4>
    8001dda2:	00015517          	auipc	a0,0x15
    8001dda6:	95e50513          	addi	a0,a0,-1698 # 80032700 <__func__.0+0x318>
    8001ddaa:	71a110ef          	jal	8002f4c4 <printf>
    8001ddae:	02900513          	li	a0,41
    8001ddb2:	400100ef          	jal	8002e1b2 <putchar>
    8001ddb6:	4529                	li	a0,10
    8001ddb8:	3fa100ef          	jal	8002e1b2 <putchar>
    8001ddbc:	60202773          	csrr	a4,hedeleg
    8001ddc0:	67ad                	lui	a5,0xb
    8001ddc2:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001ddc6:	02f70763          	beq	a4,a5,8001ddf4 <hedeleg_csr_tests_1+0xe2>
    8001ddca:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001ddcc:	00015597          	auipc	a1,0x15
    8001ddd0:	8ec58593          	addi	a1,a1,-1812 # 800326b8 <__func__.0+0x2d0>
    8001ddd4:	00015517          	auipc	a0,0x15
    8001ddd8:	98c50513          	addi	a0,a0,-1652 # 80032760 <__func__.0+0x378>
    8001dddc:	6e8110ef          	jal	8002f4c4 <printf>
    8001dde0:	4511                	li	a0,4
    8001dde2:	932e30ef          	jal	80000f14 <goto_priv>
    8001dde6:	991e30ef          	jal	80001776 <reset_state>

}
    8001ddea:	60a2                	ld	ra,8(sp)
    8001ddec:	8522                	mv	a0,s0
    8001ddee:	6402                	ld	s0,0(sp)
    8001ddf0:	0141                	addi	sp,sp,16
    8001ddf2:	8082                	ret
    TEST_ASSERT("hedeleg right",
    8001ddf4:	4405                	li	s0,1
    TEST_END();
    8001ddf6:	00015597          	auipc	a1,0x15
    8001ddfa:	8b258593          	addi	a1,a1,-1870 # 800326a8 <__func__.0+0x2c0>
    8001ddfe:	bfd9                	j	8001ddd4 <hedeleg_csr_tests_1+0xc2>

000000008001de00 <mhpmevent_csr_tests_1>:

bool mhpmevent_csr_tests_1(){
    8001de00:	1141                	addi	sp,sp,-16

    TEST_START();
    8001de02:	00014597          	auipc	a1,0x14
    8001de06:	8d658593          	addi	a1,a1,-1834 # 800316d8 <__func__.3>
    8001de0a:	00015517          	auipc	a0,0x15
    8001de0e:	8be50513          	addi	a0,a0,-1858 # 800326c8 <__func__.0+0x2e0>
bool mhpmevent_csr_tests_1(){
    8001de12:	e406                	sd	ra,8(sp)
    TEST_START();
    8001de14:	6b0110ef          	jal	8002f4c4 <printf>
    8001de18:	4529                	li	a0,10
    8001de1a:	398100ef          	jal	8002e1b2 <putchar>
    TEST_SETUP_EXCEPT();
    8001de1e:	ffbe20ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001de22:	4511                	li	a0,4
    8001de24:	8f0e30ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_MHPMEVENT3, (uint64_t)-1);
    8001de28:	57fd                	li	a5,-1
    8001de2a:	32379073          	csrw	mhpmevent3,a5
    printf("%llx\n",CSRR(CSR_MHPMEVENT3));
    8001de2e:	323025f3          	csrr	a1,mhpmevent3
    8001de32:	0001b517          	auipc	a0,0x1b
    8001de36:	ece50513          	addi	a0,a0,-306 # 80038d00 <__func__.0+0x6918>
    8001de3a:	68a110ef          	jal	8002f4c4 <printf>

    TEST_END();
    8001de3e:	00015597          	auipc	a1,0x15
    8001de42:	86a58593          	addi	a1,a1,-1942 # 800326a8 <__func__.0+0x2c0>
    8001de46:	00015517          	auipc	a0,0x15
    8001de4a:	91a50513          	addi	a0,a0,-1766 # 80032760 <__func__.0+0x378>
    8001de4e:	676110ef          	jal	8002f4c4 <printf>
    8001de52:	4511                	li	a0,4
    8001de54:	8c0e30ef          	jal	80000f14 <goto_priv>
    8001de58:	91fe30ef          	jal	80001776 <reset_state>

}
    8001de5c:	60a2                	ld	ra,8(sp)
    8001de5e:	4505                	li	a0,1
    8001de60:	0141                	addi	sp,sp,16
    8001de62:	8082                	ret

000000008001de64 <tselect_csr_tests_1>:

bool tselect_csr_tests_1(){
    8001de64:	1141                	addi	sp,sp,-16

    TEST_START();
    8001de66:	00014597          	auipc	a1,0x14
    8001de6a:	88a58593          	addi	a1,a1,-1910 # 800316f0 <__func__.2>
    8001de6e:	00015517          	auipc	a0,0x15
    8001de72:	85a50513          	addi	a0,a0,-1958 # 800326c8 <__func__.0+0x2e0>
bool tselect_csr_tests_1(){
    8001de76:	e406                	sd	ra,8(sp)
    8001de78:	e022                	sd	s0,0(sp)
    TEST_START();
    8001de7a:	64a110ef          	jal	8002f4c4 <printf>
    8001de7e:	4529                	li	a0,10
    8001de80:	332100ef          	jal	8002e1b2 <putchar>
    TEST_SETUP_EXCEPT();
    8001de84:	f95e20ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001de88:	4511                	li	a0,4
    8001de8a:	88ae30ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_TSELECT, (uint64_t)-1);
    8001de8e:	57fd                	li	a5,-1
    8001de90:	7a079073          	csrw	tselect,a5
    printf("%llx\n",CSRR(CSR_TSELECT));
    8001de94:	7a0025f3          	csrr	a1,tselect
    8001de98:	0001b517          	auipc	a0,0x1b
    8001de9c:	e6850513          	addi	a0,a0,-408 # 80038d00 <__func__.0+0x6918>
    8001dea0:	624110ef          	jal	8002f4c4 <printf>

    TEST_ASSERT("tselect right",
    8001dea4:	0001c617          	auipc	a2,0x1c
    8001dea8:	9cc60613          	addi	a2,a2,-1588 # 80039870 <__func__.0+0x7488>
    8001deac:	08c00593          	li	a1,140
    8001deb0:	00015517          	auipc	a0,0x15
    8001deb4:	83050513          	addi	a0,a0,-2000 # 800326e0 <__func__.0+0x2f8>
    8001deb8:	60c110ef          	jal	8002f4c4 <printf>
    8001debc:	60202773          	csrr	a4,hedeleg
    8001dec0:	67ad                	lui	a5,0xb
    8001dec2:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dec6:	00014597          	auipc	a1,0x14
    8001deca:	7e258593          	addi	a1,a1,2018 # 800326a8 <__func__.0+0x2c0>
    8001dece:	00f70663          	beq	a4,a5,8001deda <tselect_csr_tests_1+0x76>
    8001ded2:	00014597          	auipc	a1,0x14
    8001ded6:	7e658593          	addi	a1,a1,2022 # 800326b8 <__func__.0+0x2d0>
    8001deda:	00015517          	auipc	a0,0x15
    8001dede:	81e50513          	addi	a0,a0,-2018 # 800326f8 <__func__.0+0x310>
    8001dee2:	5e2110ef          	jal	8002f4c4 <printf>
    8001dee6:	60202773          	csrr	a4,hedeleg
    8001deea:	67ad                	lui	a5,0xb
    8001deec:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001def0:	00f70c63          	beq	a4,a5,8001df08 <tselect_csr_tests_1+0xa4>
    8001def4:	00015517          	auipc	a0,0x15
    8001def8:	80c50513          	addi	a0,a0,-2036 # 80032700 <__func__.0+0x318>
    8001defc:	5c8110ef          	jal	8002f4c4 <printf>
    8001df00:	02900513          	li	a0,41
    8001df04:	2ae100ef          	jal	8002e1b2 <putchar>
    8001df08:	4529                	li	a0,10
    8001df0a:	2a8100ef          	jal	8002e1b2 <putchar>
    8001df0e:	60202773          	csrr	a4,hedeleg
    8001df12:	67ad                	lui	a5,0xb
    8001df14:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001df18:	02f70763          	beq	a4,a5,8001df46 <tselect_csr_tests_1+0xe2>
    8001df1c:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001df1e:	00014597          	auipc	a1,0x14
    8001df22:	79a58593          	addi	a1,a1,1946 # 800326b8 <__func__.0+0x2d0>
    8001df26:	00015517          	auipc	a0,0x15
    8001df2a:	83a50513          	addi	a0,a0,-1990 # 80032760 <__func__.0+0x378>
    8001df2e:	596110ef          	jal	8002f4c4 <printf>
    8001df32:	4511                	li	a0,4
    8001df34:	fe1e20ef          	jal	80000f14 <goto_priv>
    8001df38:	83fe30ef          	jal	80001776 <reset_state>

}
    8001df3c:	60a2                	ld	ra,8(sp)
    8001df3e:	8522                	mv	a0,s0
    8001df40:	6402                	ld	s0,0(sp)
    8001df42:	0141                	addi	sp,sp,16
    8001df44:	8082                	ret
    TEST_ASSERT("tselect right",
    8001df46:	4405                	li	s0,1
    TEST_END();
    8001df48:	00014597          	auipc	a1,0x14
    8001df4c:	76058593          	addi	a1,a1,1888 # 800326a8 <__func__.0+0x2c0>
    8001df50:	bfd9                	j	8001df26 <tselect_csr_tests_1+0xc2>

000000008001df52 <random_instruction_tests>:


bool random_instruction_tests(){
    8001df52:	1141                	addi	sp,sp,-16

    TEST_START();
    8001df54:	00013597          	auipc	a1,0x13
    8001df58:	7b458593          	addi	a1,a1,1972 # 80031708 <__func__.1>
    8001df5c:	00014517          	auipc	a0,0x14
    8001df60:	76c50513          	addi	a0,a0,1900 # 800326c8 <__func__.0+0x2e0>
bool random_instruction_tests(){
    8001df64:	e406                	sd	ra,8(sp)
    8001df66:	e022                	sd	s0,0(sp)
    TEST_START();
    8001df68:	55c110ef          	jal	8002f4c4 <printf>
    8001df6c:	4529                	li	a0,10
    8001df6e:	244100ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001df72:	4511                	li	a0,4
    8001df74:	fa1e20ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_MCYCLE,0x0);
    8001df78:	b0005073          	csrwi	mcycle,0

    excpt_info();
    8001df7c:	4429                	li	s0,10
    8001df7e:	8dce30ef          	jal	8000105a <excpt_info>

    for (int i = 0; i < 10; i++)
    8001df82:	347d                	addiw	s0,s0,-1
    {
        random_m_instruction();
    8001df84:	8f1e30ef          	jal	80001874 <random_m_instruction>
    for (int i = 0; i < 10; i++)
    8001df88:	fc6d                	bnez	s0,8001df82 <random_instruction_tests+0x30>
    }
    

    TEST_END();
    8001df8a:	00014597          	auipc	a1,0x14
    8001df8e:	71e58593          	addi	a1,a1,1822 # 800326a8 <__func__.0+0x2c0>
    8001df92:	00014517          	auipc	a0,0x14
    8001df96:	7ce50513          	addi	a0,a0,1998 # 80032760 <__func__.0+0x378>
    8001df9a:	52a110ef          	jal	8002f4c4 <printf>
    8001df9e:	4511                	li	a0,4
    8001dfa0:	f75e20ef          	jal	80000f14 <goto_priv>
    8001dfa4:	fd2e30ef          	jal	80001776 <reset_state>

}
    8001dfa8:	60a2                	ld	ra,8(sp)
    8001dfaa:	6402                	ld	s0,0(sp)
    8001dfac:	4505                	li	a0,1
    8001dfae:	0141                	addi	sp,sp,16
    8001dfb0:	8082                	ret

000000008001dfb2 <script_test>:

bool script_test(){     //草稿
    8001dfb2:	1141                	addi	sp,sp,-16

    TEST_START();
    8001dfb4:	00013597          	auipc	a1,0x13
    8001dfb8:	77458593          	addi	a1,a1,1908 # 80031728 <__func__.0>
    8001dfbc:	00014517          	auipc	a0,0x14
    8001dfc0:	70c50513          	addi	a0,a0,1804 # 800326c8 <__func__.0+0x2e0>
bool script_test(){     //草稿
    8001dfc4:	e406                	sd	ra,8(sp)
    TEST_START();
    8001dfc6:	4fe110ef          	jal	8002f4c4 <printf>
    8001dfca:	4529                	li	a0,10
    8001dfcc:	1e6100ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001dfd0:	4511                	li	a0,4
    8001dfd2:	f43e20ef          	jal	80000f14 <goto_priv>
    printf("mncause=%llx\n",CSRR(CSR_MNCAUSE));
    8001dfd6:	742025f3          	csrr	a1,0x742
    8001dfda:	0001c517          	auipc	a0,0x1c
    8001dfde:	8a650513          	addi	a0,a0,-1882 # 80039880 <__func__.0+0x7498>
    8001dfe2:	4e2110ef          	jal	8002f4c4 <printf>
    printf("mnepc=%llx\n",CSRR(CSR_MNEPC));
    8001dfe6:	741025f3          	csrr	a1,0x741
    8001dfea:	0001c517          	auipc	a0,0x1c
    8001dfee:	8a650513          	addi	a0,a0,-1882 # 80039890 <__func__.0+0x74a8>
    8001dff2:	4d2110ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8001dff6:	e23e20ef          	jal	80000e18 <test_setup_except_function>
    CSRW(CSR_MNEPC,0x8001dfde);
    8001dffa:	8001e7b7          	lui	a5,0x8001e
    8001dffe:	fde7879b          	addiw	a5,a5,-34 # ffffffff8001dfde <__stack_top+0xfffffffeffd1efde>
    8001e002:	74179073          	csrw	0x741,a5
    asm volatile(
    8001e006:	70200073          	.insn	4, 0x70200073
    mnret();
    excpt_info();
    8001e00a:	850e30ef          	jal	8000105a <excpt_info>
    printf("mncause=%llx\n",CSRR(CSR_MNCAUSE));
    8001e00e:	742025f3          	csrr	a1,0x742
    8001e012:	0001c517          	auipc	a0,0x1c
    8001e016:	86e50513          	addi	a0,a0,-1938 # 80039880 <__func__.0+0x7498>
    8001e01a:	4aa110ef          	jal	8002f4c4 <printf>

    TEST_END();
    8001e01e:	00014597          	auipc	a1,0x14
    8001e022:	68a58593          	addi	a1,a1,1674 # 800326a8 <__func__.0+0x2c0>
    8001e026:	00014517          	auipc	a0,0x14
    8001e02a:	73a50513          	addi	a0,a0,1850 # 80032760 <__func__.0+0x378>
    8001e02e:	496110ef          	jal	8002f4c4 <printf>
    8001e032:	4511                	li	a0,4
    8001e034:	ee1e20ef          	jal	80000f14 <goto_priv>
    8001e038:	f3ee30ef          	jal	80001776 <reset_state>

    8001e03c:	60a2                	ld	ra,8(sp)
    8001e03e:	4505                	li	a0,1
    8001e040:	0141                	addi	sp,sp,16
    8001e042:	8082                	ret

000000008001e044 <time_test_1>:
#include <rvh_test.h>
#include <csrs.h> 

bool time_test_1() {
    8001e044:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e046:	00013597          	auipc	a1,0x13
    8001e04a:	6f258593          	addi	a1,a1,1778 # 80031738 <__func__.50>
    8001e04e:	00014517          	auipc	a0,0x14
    8001e052:	67a50513          	addi	a0,a0,1658 # 800326c8 <__func__.0+0x2e0>
bool time_test_1() {
    8001e056:	ec06                	sd	ra,24(sp)
    8001e058:	e822                	sd	s0,16(sp)
    8001e05a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e05c:	468110ef          	jal	8002f4c4 <printf>
    8001e060:	4529                	li	a0,10
    8001e062:	150100ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001e066:	4511                	li	a0,4
    8001e068:	eade20ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001e06c:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8001e070:	4509                	li	a0,2
    8001e072:	ea3e20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e076:	da3e20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e07a:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e07e:	08c00593          	li	a1,140
    8001e082:	0001c617          	auipc	a2,0x1c
    8001e086:	81e60613          	addi	a2,a2,-2018 # 800398a0 <__func__.0+0x74b8>
    8001e08a:	00014517          	auipc	a0,0x14
    8001e08e:	65650513          	addi	a0,a0,1622 # 800326e0 <__func__.0+0x2f8>
    8001e092:	432110ef          	jal	8002f4c4 <printf>
    8001e096:	0003e797          	auipc	a5,0x3e
    8001e09a:	f7b7c783          	lbu	a5,-133(a5) # 8005c011 <excpt+0x1>
    8001e09e:	0003e497          	auipc	s1,0x3e
    8001e0a2:	f7248493          	addi	s1,s1,-142 # 8005c010 <excpt>
    8001e0a6:	00014597          	auipc	a1,0x14
    8001e0aa:	61258593          	addi	a1,a1,1554 # 800326b8 <__func__.0+0x2d0>
    8001e0ae:	cf89                	beqz	a5,8001e0c8 <time_test_1+0x84>
    8001e0b0:	6498                	ld	a4,8(s1)
    8001e0b2:	4789                	li	a5,2
    8001e0b4:	00014597          	auipc	a1,0x14
    8001e0b8:	5f458593          	addi	a1,a1,1524 # 800326a8 <__func__.0+0x2c0>
    8001e0bc:	00f70663          	beq	a4,a5,8001e0c8 <time_test_1+0x84>
    8001e0c0:	00014597          	auipc	a1,0x14
    8001e0c4:	5f858593          	addi	a1,a1,1528 # 800326b8 <__func__.0+0x2d0>
    8001e0c8:	00014517          	auipc	a0,0x14
    8001e0cc:	63050513          	addi	a0,a0,1584 # 800326f8 <__func__.0+0x310>
    8001e0d0:	3f4110ef          	jal	8002f4c4 <printf>
    8001e0d4:	0003e797          	auipc	a5,0x3e
    8001e0d8:	f3d7c783          	lbu	a5,-195(a5) # 8005c011 <excpt+0x1>
    8001e0dc:	c789                	beqz	a5,8001e0e6 <time_test_1+0xa2>
    8001e0de:	6498                	ld	a4,8(s1)
    8001e0e0:	4789                	li	a5,2
    8001e0e2:	00f70c63          	beq	a4,a5,8001e0fa <time_test_1+0xb6>
    8001e0e6:	00014517          	auipc	a0,0x14
    8001e0ea:	61a50513          	addi	a0,a0,1562 # 80032700 <__func__.0+0x318>
    8001e0ee:	3d6110ef          	jal	8002f4c4 <printf>
    8001e0f2:	02900513          	li	a0,41
    8001e0f6:	0bc100ef          	jal	8002e1b2 <putchar>
    8001e0fa:	4529                	li	a0,10
    8001e0fc:	0b6100ef          	jal	8002e1b2 <putchar>
    8001e100:	0003e797          	auipc	a5,0x3e
    8001e104:	f117c783          	lbu	a5,-239(a5) # 8005c011 <excpt+0x1>
    8001e108:	4401                	li	s0,0
    8001e10a:	c789                	beqz	a5,8001e114 <time_test_1+0xd0>
    8001e10c:	6480                	ld	s0,8(s1)
    8001e10e:	1479                	addi	s0,s0,-2
    8001e110:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001e114:	450d                	li	a0,3
    8001e116:	dffe20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e11a:	cffe20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e11e:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e122:	08c00593          	li	a1,140
    8001e126:	0001b617          	auipc	a2,0x1b
    8001e12a:	7ca60613          	addi	a2,a2,1994 # 800398f0 <__func__.0+0x7508>
    8001e12e:	00014517          	auipc	a0,0x14
    8001e132:	5b250513          	addi	a0,a0,1458 # 800326e0 <__func__.0+0x2f8>
    8001e136:	38e110ef          	jal	8002f4c4 <printf>
    8001e13a:	0003e797          	auipc	a5,0x3e
    8001e13e:	ed77c783          	lbu	a5,-297(a5) # 8005c011 <excpt+0x1>
    8001e142:	00014597          	auipc	a1,0x14
    8001e146:	57658593          	addi	a1,a1,1398 # 800326b8 <__func__.0+0x2d0>
    8001e14a:	cf89                	beqz	a5,8001e164 <time_test_1+0x120>
    8001e14c:	6498                	ld	a4,8(s1)
    8001e14e:	4789                	li	a5,2
    8001e150:	00014597          	auipc	a1,0x14
    8001e154:	55858593          	addi	a1,a1,1368 # 800326a8 <__func__.0+0x2c0>
    8001e158:	00f70663          	beq	a4,a5,8001e164 <time_test_1+0x120>
    8001e15c:	00014597          	auipc	a1,0x14
    8001e160:	55c58593          	addi	a1,a1,1372 # 800326b8 <__func__.0+0x2d0>
    8001e164:	00014517          	auipc	a0,0x14
    8001e168:	59450513          	addi	a0,a0,1428 # 800326f8 <__func__.0+0x310>
    8001e16c:	358110ef          	jal	8002f4c4 <printf>
    8001e170:	0003e797          	auipc	a5,0x3e
    8001e174:	ea17c783          	lbu	a5,-351(a5) # 8005c011 <excpt+0x1>
    8001e178:	c789                	beqz	a5,8001e182 <time_test_1+0x13e>
    8001e17a:	6498                	ld	a4,8(s1)
    8001e17c:	4789                	li	a5,2
    8001e17e:	00f70c63          	beq	a4,a5,8001e196 <time_test_1+0x152>
    8001e182:	00014517          	auipc	a0,0x14
    8001e186:	57e50513          	addi	a0,a0,1406 # 80032700 <__func__.0+0x318>
    8001e18a:	33a110ef          	jal	8002f4c4 <printf>
    8001e18e:	02900513          	li	a0,41
    8001e192:	020100ef          	jal	8002e1b2 <putchar>
    8001e196:	4529                	li	a0,10
    8001e198:	01a100ef          	jal	8002e1b2 <putchar>
    8001e19c:	c801                	beqz	s0,8001e1ac <time_test_1+0x168>
    8001e19e:	0003e797          	auipc	a5,0x3e
    8001e1a2:	e737c783          	lbu	a5,-397(a5) # 8005c011 <excpt+0x1>
    8001e1a6:	4401                	li	s0,0
    8001e1a8:	16079f63          	bnez	a5,8001e326 <time_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001e1ac:	4501                	li	a0,0
    8001e1ae:	d67e20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e1b2:	c67e20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e1b6:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e1ba:	08c00593          	li	a1,140
    8001e1be:	0001b617          	auipc	a2,0x1b
    8001e1c2:	78260613          	addi	a2,a2,1922 # 80039940 <__func__.0+0x7558>
    8001e1c6:	00014517          	auipc	a0,0x14
    8001e1ca:	51a50513          	addi	a0,a0,1306 # 800326e0 <__func__.0+0x2f8>
    8001e1ce:	2f6110ef          	jal	8002f4c4 <printf>
    8001e1d2:	0003e797          	auipc	a5,0x3e
    8001e1d6:	e3f7c783          	lbu	a5,-449(a5) # 8005c011 <excpt+0x1>
    8001e1da:	00014597          	auipc	a1,0x14
    8001e1de:	4de58593          	addi	a1,a1,1246 # 800326b8 <__func__.0+0x2d0>
    8001e1e2:	cf89                	beqz	a5,8001e1fc <time_test_1+0x1b8>
    8001e1e4:	6498                	ld	a4,8(s1)
    8001e1e6:	4789                	li	a5,2
    8001e1e8:	00014597          	auipc	a1,0x14
    8001e1ec:	4c058593          	addi	a1,a1,1216 # 800326a8 <__func__.0+0x2c0>
    8001e1f0:	00f70663          	beq	a4,a5,8001e1fc <time_test_1+0x1b8>
    8001e1f4:	00014597          	auipc	a1,0x14
    8001e1f8:	4c458593          	addi	a1,a1,1220 # 800326b8 <__func__.0+0x2d0>
    8001e1fc:	00014517          	auipc	a0,0x14
    8001e200:	4fc50513          	addi	a0,a0,1276 # 800326f8 <__func__.0+0x310>
    8001e204:	2c0110ef          	jal	8002f4c4 <printf>
    8001e208:	0003e797          	auipc	a5,0x3e
    8001e20c:	e097c783          	lbu	a5,-503(a5) # 8005c011 <excpt+0x1>
    8001e210:	c789                	beqz	a5,8001e21a <time_test_1+0x1d6>
    8001e212:	6498                	ld	a4,8(s1)
    8001e214:	4789                	li	a5,2
    8001e216:	00f70c63          	beq	a4,a5,8001e22e <time_test_1+0x1ea>
    8001e21a:	00014517          	auipc	a0,0x14
    8001e21e:	4e650513          	addi	a0,a0,1254 # 80032700 <__func__.0+0x318>
    8001e222:	2a2110ef          	jal	8002f4c4 <printf>
    8001e226:	02900513          	li	a0,41
    8001e22a:	7890f0ef          	jal	8002e1b2 <putchar>
    8001e22e:	4529                	li	a0,10
    8001e230:	7830f0ef          	jal	8002e1b2 <putchar>
    8001e234:	c801                	beqz	s0,8001e244 <time_test_1+0x200>
    8001e236:	0003e797          	auipc	a5,0x3e
    8001e23a:	ddb7c783          	lbu	a5,-549(a5) # 8005c011 <excpt+0x1>
    8001e23e:	4401                	li	s0,0
    8001e240:	0c079e63          	bnez	a5,8001e31c <time_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001e244:	4505                	li	a0,1
    8001e246:	ccfe20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e24a:	bcfe20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e24e:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e252:	08c00593          	li	a1,140
    8001e256:	0001b617          	auipc	a2,0x1b
    8001e25a:	73a60613          	addi	a2,a2,1850 # 80039990 <__func__.0+0x75a8>
    8001e25e:	00014517          	auipc	a0,0x14
    8001e262:	48250513          	addi	a0,a0,1154 # 800326e0 <__func__.0+0x2f8>
    8001e266:	25e110ef          	jal	8002f4c4 <printf>
    8001e26a:	0003e797          	auipc	a5,0x3e
    8001e26e:	da77c783          	lbu	a5,-601(a5) # 8005c011 <excpt+0x1>
    8001e272:	00014597          	auipc	a1,0x14
    8001e276:	44658593          	addi	a1,a1,1094 # 800326b8 <__func__.0+0x2d0>
    8001e27a:	cf89                	beqz	a5,8001e294 <time_test_1+0x250>
    8001e27c:	6498                	ld	a4,8(s1)
    8001e27e:	4789                	li	a5,2
    8001e280:	00014597          	auipc	a1,0x14
    8001e284:	42858593          	addi	a1,a1,1064 # 800326a8 <__func__.0+0x2c0>
    8001e288:	00f70663          	beq	a4,a5,8001e294 <time_test_1+0x250>
    8001e28c:	00014597          	auipc	a1,0x14
    8001e290:	42c58593          	addi	a1,a1,1068 # 800326b8 <__func__.0+0x2d0>
    8001e294:	00014517          	auipc	a0,0x14
    8001e298:	46450513          	addi	a0,a0,1124 # 800326f8 <__func__.0+0x310>
    8001e29c:	228110ef          	jal	8002f4c4 <printf>
    8001e2a0:	0003e797          	auipc	a5,0x3e
    8001e2a4:	d717c783          	lbu	a5,-655(a5) # 8005c011 <excpt+0x1>
    8001e2a8:	c789                	beqz	a5,8001e2b2 <time_test_1+0x26e>
    8001e2aa:	6498                	ld	a4,8(s1)
    8001e2ac:	4789                	li	a5,2
    8001e2ae:	00f70c63          	beq	a4,a5,8001e2c6 <time_test_1+0x282>
    8001e2b2:	00014517          	auipc	a0,0x14
    8001e2b6:	44e50513          	addi	a0,a0,1102 # 80032700 <__func__.0+0x318>
    8001e2ba:	20a110ef          	jal	8002f4c4 <printf>
    8001e2be:	02900513          	li	a0,41
    8001e2c2:	6f10f0ef          	jal	8002e1b2 <putchar>
    8001e2c6:	4529                	li	a0,10
    8001e2c8:	6eb0f0ef          	jal	8002e1b2 <putchar>
    8001e2cc:	c015                	beqz	s0,8001e2f0 <time_test_1+0x2ac>
    8001e2ce:	0003e417          	auipc	s0,0x3e
    8001e2d2:	d4344403          	lbu	s0,-701(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e2d6:	00014597          	auipc	a1,0x14
    8001e2da:	3e258593          	addi	a1,a1,994 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e2de:	cc11                	beqz	s0,8001e2fa <time_test_1+0x2b6>
    8001e2e0:	6498                	ld	a4,8(s1)
    8001e2e2:	4789                	li	a5,2
    TEST_END(); 
    8001e2e4:	00014597          	auipc	a1,0x14
    8001e2e8:	3c458593          	addi	a1,a1,964 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e2ec:	00f70763          	beq	a4,a5,8001e2fa <time_test_1+0x2b6>
    8001e2f0:	4401                	li	s0,0
    TEST_END(); 
    8001e2f2:	00014597          	auipc	a1,0x14
    8001e2f6:	3c658593          	addi	a1,a1,966 # 800326b8 <__func__.0+0x2d0>
    8001e2fa:	00014517          	auipc	a0,0x14
    8001e2fe:	46650513          	addi	a0,a0,1126 # 80032760 <__func__.0+0x378>
    8001e302:	1c2110ef          	jal	8002f4c4 <printf>
    8001e306:	4511                	li	a0,4
    8001e308:	c0de20ef          	jal	80000f14 <goto_priv>
    8001e30c:	c6ae30ef          	jal	80001776 <reset_state>
}
    8001e310:	60e2                	ld	ra,24(sp)
    8001e312:	8522                	mv	a0,s0
    8001e314:	6442                	ld	s0,16(sp)
    8001e316:	64a2                	ld	s1,8(sp)
    8001e318:	6105                	addi	sp,sp,32
    8001e31a:	8082                	ret
    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e31c:	6480                	ld	s0,8(s1)
    8001e31e:	1479                	addi	s0,s0,-2
    8001e320:	00143413          	seqz	s0,s0
    8001e324:	b705                	j	8001e244 <time_test_1+0x200>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e326:	6480                	ld	s0,8(s1)
    8001e328:	1479                	addi	s0,s0,-2
    8001e32a:	00143413          	seqz	s0,s0
    8001e32e:	bdbd                	j	8001e1ac <time_test_1+0x168>

000000008001e330 <time_test_2>:

bool time_test_2() {
    8001e330:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e332:	00013597          	auipc	a1,0x13
    8001e336:	41658593          	addi	a1,a1,1046 # 80031748 <__func__.49>
    8001e33a:	00014517          	auipc	a0,0x14
    8001e33e:	38e50513          	addi	a0,a0,910 # 800326c8 <__func__.0+0x2e0>
bool time_test_2() {
    8001e342:	e406                	sd	ra,8(sp)
    8001e344:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e346:	17e110ef          	jal	8002f4c4 <printf>
    8001e34a:	4529                	li	a0,10
    8001e34c:	6670f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001e350:	4511                	li	a0,4
    8001e352:	bc3e20ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001e356:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    8001e35a:	450d                	li	a0,3
    8001e35c:	bb9e20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e360:	ab9e20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e364:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e368:	08c00593          	li	a1,140
    8001e36c:	0001b617          	auipc	a2,0x1b
    8001e370:	67460613          	addi	a2,a2,1652 # 800399e0 <__func__.0+0x75f8>
    8001e374:	00014517          	auipc	a0,0x14
    8001e378:	36c50513          	addi	a0,a0,876 # 800326e0 <__func__.0+0x2f8>
    8001e37c:	148110ef          	jal	8002f4c4 <printf>
    8001e380:	0003e797          	auipc	a5,0x3e
    8001e384:	c917c783          	lbu	a5,-879(a5) # 8005c011 <excpt+0x1>
    8001e388:	00014597          	auipc	a1,0x14
    8001e38c:	32058593          	addi	a1,a1,800 # 800326a8 <__func__.0+0x2c0>
    8001e390:	c789                	beqz	a5,8001e39a <time_test_2+0x6a>
    8001e392:	00014597          	auipc	a1,0x14
    8001e396:	32658593          	addi	a1,a1,806 # 800326b8 <__func__.0+0x2d0>
    8001e39a:	00014517          	auipc	a0,0x14
    8001e39e:	35e50513          	addi	a0,a0,862 # 800326f8 <__func__.0+0x310>
    8001e3a2:	122110ef          	jal	8002f4c4 <printf>
    8001e3a6:	0003e797          	auipc	a5,0x3e
    8001e3aa:	c6b7c783          	lbu	a5,-917(a5) # 8005c011 <excpt+0x1>
    8001e3ae:	e7a1                	bnez	a5,8001e3f6 <time_test_2+0xc6>
    8001e3b0:	4529                	li	a0,10
    8001e3b2:	6010f0ef          	jal	8002e1b2 <putchar>
    8001e3b6:	0003e797          	auipc	a5,0x3e
    8001e3ba:	c5b7c783          	lbu	a5,-933(a5) # 8005c011 <excpt+0x1>
    8001e3be:	e795                	bnez	a5,8001e3ea <time_test_2+0xba>
    8001e3c0:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001e3c2:	00014597          	auipc	a1,0x14
    8001e3c6:	2e658593          	addi	a1,a1,742 # 800326a8 <__func__.0+0x2c0>
    8001e3ca:	00014517          	auipc	a0,0x14
    8001e3ce:	39650513          	addi	a0,a0,918 # 80032760 <__func__.0+0x378>
    8001e3d2:	0f2110ef          	jal	8002f4c4 <printf>
    8001e3d6:	4511                	li	a0,4
    8001e3d8:	b3de20ef          	jal	80000f14 <goto_priv>
    8001e3dc:	b9ae30ef          	jal	80001776 <reset_state>
}
    8001e3e0:	60a2                	ld	ra,8(sp)
    8001e3e2:	8522                	mv	a0,s0
    8001e3e4:	6402                	ld	s0,0(sp)
    8001e3e6:	0141                	addi	sp,sp,16
    8001e3e8:	8082                	ret
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e3ea:	4401                	li	s0,0
    TEST_END(); 
    8001e3ec:	00014597          	auipc	a1,0x14
    8001e3f0:	2cc58593          	addi	a1,a1,716 # 800326b8 <__func__.0+0x2d0>
    8001e3f4:	bfd9                	j	8001e3ca <time_test_2+0x9a>
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e3f6:	00014517          	auipc	a0,0x14
    8001e3fa:	30a50513          	addi	a0,a0,778 # 80032700 <__func__.0+0x318>
    8001e3fe:	0c6110ef          	jal	8002f4c4 <printf>
    8001e402:	02900513          	li	a0,41
    8001e406:	5ad0f0ef          	jal	8002e1b2 <putchar>
    8001e40a:	b75d                	j	8001e3b0 <time_test_2+0x80>

000000008001e40c <time_test_3>:

bool time_test_3() {
    8001e40c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e40e:	00013597          	auipc	a1,0x13
    8001e412:	34a58593          	addi	a1,a1,842 # 80031758 <__func__.48>
    8001e416:	00014517          	auipc	a0,0x14
    8001e41a:	2b250513          	addi	a0,a0,690 # 800326c8 <__func__.0+0x2e0>
bool time_test_3() {
    8001e41e:	ec06                	sd	ra,24(sp)
    8001e420:	e822                	sd	s0,16(sp)
    8001e422:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e424:	0a0110ef          	jal	8002f4c4 <printf>
    8001e428:	4529                	li	a0,10
    8001e42a:	5890f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001e42e:	4511                	li	a0,4
    8001e430:	ae5e20ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e434:	10617073          	csrci	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e438:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001e43c:	4505                	li	a0,1
    8001e43e:	ad7e20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e442:	9d7e20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e446:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e44a:	08c00593          	li	a1,140
    8001e44e:	0001b617          	auipc	a2,0x1b
    8001e452:	5ca60613          	addi	a2,a2,1482 # 80039a18 <__func__.0+0x7630>
    8001e456:	00014517          	auipc	a0,0x14
    8001e45a:	28a50513          	addi	a0,a0,650 # 800326e0 <__func__.0+0x2f8>
    8001e45e:	066110ef          	jal	8002f4c4 <printf>
    8001e462:	0003e797          	auipc	a5,0x3e
    8001e466:	baf7c783          	lbu	a5,-1105(a5) # 8005c011 <excpt+0x1>
    8001e46a:	0003e497          	auipc	s1,0x3e
    8001e46e:	ba648493          	addi	s1,s1,-1114 # 8005c010 <excpt>
    8001e472:	00014597          	auipc	a1,0x14
    8001e476:	24658593          	addi	a1,a1,582 # 800326b8 <__func__.0+0x2d0>
    8001e47a:	cf89                	beqz	a5,8001e494 <time_test_3+0x88>
    8001e47c:	6498                	ld	a4,8(s1)
    8001e47e:	4789                	li	a5,2
    8001e480:	00014597          	auipc	a1,0x14
    8001e484:	22858593          	addi	a1,a1,552 # 800326a8 <__func__.0+0x2c0>
    8001e488:	00f70663          	beq	a4,a5,8001e494 <time_test_3+0x88>
    8001e48c:	00014597          	auipc	a1,0x14
    8001e490:	22c58593          	addi	a1,a1,556 # 800326b8 <__func__.0+0x2d0>
    8001e494:	00014517          	auipc	a0,0x14
    8001e498:	26450513          	addi	a0,a0,612 # 800326f8 <__func__.0+0x310>
    8001e49c:	028110ef          	jal	8002f4c4 <printf>
    8001e4a0:	0003e797          	auipc	a5,0x3e
    8001e4a4:	b717c783          	lbu	a5,-1167(a5) # 8005c011 <excpt+0x1>
    8001e4a8:	c789                	beqz	a5,8001e4b2 <time_test_3+0xa6>
    8001e4aa:	6498                	ld	a4,8(s1)
    8001e4ac:	4789                	li	a5,2
    8001e4ae:	00f70c63          	beq	a4,a5,8001e4c6 <time_test_3+0xba>
    8001e4b2:	00014517          	auipc	a0,0x14
    8001e4b6:	24e50513          	addi	a0,a0,590 # 80032700 <__func__.0+0x318>
    8001e4ba:	00a110ef          	jal	8002f4c4 <printf>
    8001e4be:	02900513          	li	a0,41
    8001e4c2:	4f10f0ef          	jal	8002e1b2 <putchar>
    8001e4c6:	4529                	li	a0,10
    8001e4c8:	4eb0f0ef          	jal	8002e1b2 <putchar>
    8001e4cc:	0003e417          	auipc	s0,0x3e
    8001e4d0:	b4544403          	lbu	s0,-1211(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e4d4:	00014597          	auipc	a1,0x14
    8001e4d8:	1e458593          	addi	a1,a1,484 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e4dc:	cc11                	beqz	s0,8001e4f8 <time_test_3+0xec>
    8001e4de:	6498                	ld	a4,8(s1)
    8001e4e0:	4789                	li	a5,2
    TEST_END(); 
    8001e4e2:	00014597          	auipc	a1,0x14
    8001e4e6:	1c658593          	addi	a1,a1,454 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e4ea:	00f70763          	beq	a4,a5,8001e4f8 <time_test_3+0xec>
    8001e4ee:	4401                	li	s0,0
    TEST_END(); 
    8001e4f0:	00014597          	auipc	a1,0x14
    8001e4f4:	1c858593          	addi	a1,a1,456 # 800326b8 <__func__.0+0x2d0>
    8001e4f8:	00014517          	auipc	a0,0x14
    8001e4fc:	26850513          	addi	a0,a0,616 # 80032760 <__func__.0+0x378>
    8001e500:	7c5100ef          	jal	8002f4c4 <printf>
    8001e504:	4511                	li	a0,4
    8001e506:	a0fe20ef          	jal	80000f14 <goto_priv>
    8001e50a:	a6ce30ef          	jal	80001776 <reset_state>
}
    8001e50e:	60e2                	ld	ra,24(sp)
    8001e510:	8522                	mv	a0,s0
    8001e512:	6442                	ld	s0,16(sp)
    8001e514:	64a2                	ld	s1,8(sp)
    8001e516:	6105                	addi	sp,sp,32
    8001e518:	8082                	ret

000000008001e51a <time_test_4>:

bool time_test_4() {
    8001e51a:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e51c:	00013597          	auipc	a1,0x13
    8001e520:	24c58593          	addi	a1,a1,588 # 80031768 <__func__.47>
    8001e524:	00014517          	auipc	a0,0x14
    8001e528:	1a450513          	addi	a0,a0,420 # 800326c8 <__func__.0+0x2e0>
bool time_test_4() {
    8001e52c:	e406                	sd	ra,8(sp)
    8001e52e:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e530:	795100ef          	jal	8002f4c4 <printf>
    8001e534:	4529                	li	a0,10
    8001e536:	47d0f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001e53a:	4511                	li	a0,4
    8001e53c:	9d9e20ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e540:	10616073          	csrsi	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e544:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001e548:	4505                	li	a0,1
    8001e54a:	9cbe20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e54e:	8cbe20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e552:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e556:	08c00593          	li	a1,140
    8001e55a:	0001b617          	auipc	a2,0x1b
    8001e55e:	50e60613          	addi	a2,a2,1294 # 80039a68 <__func__.0+0x7680>
    8001e562:	00014517          	auipc	a0,0x14
    8001e566:	17e50513          	addi	a0,a0,382 # 800326e0 <__func__.0+0x2f8>
    8001e56a:	75b100ef          	jal	8002f4c4 <printf>
    8001e56e:	0003e797          	auipc	a5,0x3e
    8001e572:	aa37c783          	lbu	a5,-1373(a5) # 8005c011 <excpt+0x1>
    8001e576:	00014597          	auipc	a1,0x14
    8001e57a:	13258593          	addi	a1,a1,306 # 800326a8 <__func__.0+0x2c0>
    8001e57e:	c789                	beqz	a5,8001e588 <time_test_4+0x6e>
    8001e580:	00014597          	auipc	a1,0x14
    8001e584:	13858593          	addi	a1,a1,312 # 800326b8 <__func__.0+0x2d0>
    8001e588:	00014517          	auipc	a0,0x14
    8001e58c:	17050513          	addi	a0,a0,368 # 800326f8 <__func__.0+0x310>
    8001e590:	735100ef          	jal	8002f4c4 <printf>
    8001e594:	0003e797          	auipc	a5,0x3e
    8001e598:	a7d7c783          	lbu	a5,-1411(a5) # 8005c011 <excpt+0x1>
    8001e59c:	e7a1                	bnez	a5,8001e5e4 <time_test_4+0xca>
    8001e59e:	4529                	li	a0,10
    8001e5a0:	4130f0ef          	jal	8002e1b2 <putchar>
    8001e5a4:	0003e797          	auipc	a5,0x3e
    8001e5a8:	a6d7c783          	lbu	a5,-1427(a5) # 8005c011 <excpt+0x1>
    8001e5ac:	e795                	bnez	a5,8001e5d8 <time_test_4+0xbe>
    8001e5ae:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e5b0:	00014597          	auipc	a1,0x14
    8001e5b4:	0f858593          	addi	a1,a1,248 # 800326a8 <__func__.0+0x2c0>
    8001e5b8:	00014517          	auipc	a0,0x14
    8001e5bc:	1a850513          	addi	a0,a0,424 # 80032760 <__func__.0+0x378>
    8001e5c0:	705100ef          	jal	8002f4c4 <printf>
    8001e5c4:	4511                	li	a0,4
    8001e5c6:	94fe20ef          	jal	80000f14 <goto_priv>
    8001e5ca:	9ace30ef          	jal	80001776 <reset_state>
}
    8001e5ce:	60a2                	ld	ra,8(sp)
    8001e5d0:	8522                	mv	a0,s0
    8001e5d2:	6402                	ld	s0,0(sp)
    8001e5d4:	0141                	addi	sp,sp,16
    8001e5d6:	8082                	ret
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e5d8:	4401                	li	s0,0
    TEST_END(); 
    8001e5da:	00014597          	auipc	a1,0x14
    8001e5de:	0de58593          	addi	a1,a1,222 # 800326b8 <__func__.0+0x2d0>
    8001e5e2:	bfd9                	j	8001e5b8 <time_test_4+0x9e>
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e5e4:	00014517          	auipc	a0,0x14
    8001e5e8:	11c50513          	addi	a0,a0,284 # 80032700 <__func__.0+0x318>
    8001e5ec:	6d9100ef          	jal	8002f4c4 <printf>
    8001e5f0:	02900513          	li	a0,41
    8001e5f4:	3bf0f0ef          	jal	8002e1b2 <putchar>
    8001e5f8:	b75d                	j	8001e59e <time_test_4+0x84>

000000008001e5fa <time_test_5>:

bool time_test_5() {
    8001e5fa:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e5fc:	00013597          	auipc	a1,0x13
    8001e600:	17c58593          	addi	a1,a1,380 # 80031778 <__func__.46>
    8001e604:	00014517          	auipc	a0,0x14
    8001e608:	0c450513          	addi	a0,a0,196 # 800326c8 <__func__.0+0x2e0>
bool time_test_5() {
    8001e60c:	ec06                	sd	ra,24(sp)
    8001e60e:	e822                	sd	s0,16(sp)
    8001e610:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e612:	6b3100ef          	jal	8002f4c4 <printf>
    8001e616:	4529                	li	a0,10
    8001e618:	39b0f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001e61c:	4511                	li	a0,4
    8001e61e:	8f7e20ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e622:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e626:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e62a:	4509                	li	a0,2
    8001e62c:	8e9e20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e630:	fe8e20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e634:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e638:	08c00593          	li	a1,140
    8001e63c:	0001b617          	auipc	a2,0x1b
    8001e640:	47460613          	addi	a2,a2,1140 # 80039ab0 <__func__.0+0x76c8>
    8001e644:	00014517          	auipc	a0,0x14
    8001e648:	09c50513          	addi	a0,a0,156 # 800326e0 <__func__.0+0x2f8>
    8001e64c:	679100ef          	jal	8002f4c4 <printf>
    8001e650:	0003e797          	auipc	a5,0x3e
    8001e654:	9c17c783          	lbu	a5,-1599(a5) # 8005c011 <excpt+0x1>
    8001e658:	0003e497          	auipc	s1,0x3e
    8001e65c:	9b848493          	addi	s1,s1,-1608 # 8005c010 <excpt>
    8001e660:	00014597          	auipc	a1,0x14
    8001e664:	05858593          	addi	a1,a1,88 # 800326b8 <__func__.0+0x2d0>
    8001e668:	cf89                	beqz	a5,8001e682 <time_test_5+0x88>
    8001e66a:	6498                	ld	a4,8(s1)
    8001e66c:	47d9                	li	a5,22
    8001e66e:	00014597          	auipc	a1,0x14
    8001e672:	03a58593          	addi	a1,a1,58 # 800326a8 <__func__.0+0x2c0>
    8001e676:	00f70663          	beq	a4,a5,8001e682 <time_test_5+0x88>
    8001e67a:	00014597          	auipc	a1,0x14
    8001e67e:	03e58593          	addi	a1,a1,62 # 800326b8 <__func__.0+0x2d0>
    8001e682:	00014517          	auipc	a0,0x14
    8001e686:	07650513          	addi	a0,a0,118 # 800326f8 <__func__.0+0x310>
    8001e68a:	63b100ef          	jal	8002f4c4 <printf>
    8001e68e:	0003e797          	auipc	a5,0x3e
    8001e692:	9837c783          	lbu	a5,-1661(a5) # 8005c011 <excpt+0x1>
    8001e696:	c789                	beqz	a5,8001e6a0 <time_test_5+0xa6>
    8001e698:	6498                	ld	a4,8(s1)
    8001e69a:	47d9                	li	a5,22
    8001e69c:	00f70c63          	beq	a4,a5,8001e6b4 <time_test_5+0xba>
    8001e6a0:	00014517          	auipc	a0,0x14
    8001e6a4:	06050513          	addi	a0,a0,96 # 80032700 <__func__.0+0x318>
    8001e6a8:	61d100ef          	jal	8002f4c4 <printf>
    8001e6ac:	02900513          	li	a0,41
    8001e6b0:	3030f0ef          	jal	8002e1b2 <putchar>
    8001e6b4:	4529                	li	a0,10
    8001e6b6:	2fd0f0ef          	jal	8002e1b2 <putchar>
    8001e6ba:	0003e417          	auipc	s0,0x3e
    8001e6be:	95744403          	lbu	s0,-1705(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001e6c2:	00014597          	auipc	a1,0x14
    8001e6c6:	ff658593          	addi	a1,a1,-10 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e6ca:	cc11                	beqz	s0,8001e6e6 <time_test_5+0xec>
    8001e6cc:	6498                	ld	a4,8(s1)
    8001e6ce:	47d9                	li	a5,22
    TEST_END(); 
    8001e6d0:	00014597          	auipc	a1,0x14
    8001e6d4:	fd858593          	addi	a1,a1,-40 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e6d8:	00f70763          	beq	a4,a5,8001e6e6 <time_test_5+0xec>
    8001e6dc:	4401                	li	s0,0
    TEST_END(); 
    8001e6de:	00014597          	auipc	a1,0x14
    8001e6e2:	fda58593          	addi	a1,a1,-38 # 800326b8 <__func__.0+0x2d0>
    8001e6e6:	00014517          	auipc	a0,0x14
    8001e6ea:	07a50513          	addi	a0,a0,122 # 80032760 <__func__.0+0x378>
    8001e6ee:	5d7100ef          	jal	8002f4c4 <printf>
    8001e6f2:	4511                	li	a0,4
    8001e6f4:	821e20ef          	jal	80000f14 <goto_priv>
    8001e6f8:	87ee30ef          	jal	80001776 <reset_state>
}
    8001e6fc:	60e2                	ld	ra,24(sp)
    8001e6fe:	8522                	mv	a0,s0
    8001e700:	6442                	ld	s0,16(sp)
    8001e702:	64a2                	ld	s1,8(sp)
    8001e704:	6105                	addi	sp,sp,32
    8001e706:	8082                	ret

000000008001e708 <time_test_6>:

bool time_test_6() {
    8001e708:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e70a:	00013597          	auipc	a1,0x13
    8001e70e:	07e58593          	addi	a1,a1,126 # 80031788 <__func__.45>
    8001e712:	00014517          	auipc	a0,0x14
    8001e716:	fb650513          	addi	a0,a0,-74 # 800326c8 <__func__.0+0x2e0>
bool time_test_6() {
    8001e71a:	e406                	sd	ra,8(sp)
    8001e71c:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e71e:	5a7100ef          	jal	8002f4c4 <printf>
    8001e722:	4529                	li	a0,10
    8001e724:	28f0f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001e728:	4511                	li	a0,4
    8001e72a:	feae20ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e72e:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e732:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e736:	4509                	li	a0,2
    8001e738:	fdce20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e73c:	edce20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e740:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e744:	08c00593          	li	a1,140
    8001e748:	0001b617          	auipc	a2,0x1b
    8001e74c:	3c860613          	addi	a2,a2,968 # 80039b10 <__func__.0+0x7728>
    8001e750:	00014517          	auipc	a0,0x14
    8001e754:	f9050513          	addi	a0,a0,-112 # 800326e0 <__func__.0+0x2f8>
    8001e758:	56d100ef          	jal	8002f4c4 <printf>
    8001e75c:	0003e797          	auipc	a5,0x3e
    8001e760:	8b57c783          	lbu	a5,-1867(a5) # 8005c011 <excpt+0x1>
    8001e764:	00014597          	auipc	a1,0x14
    8001e768:	f4458593          	addi	a1,a1,-188 # 800326a8 <__func__.0+0x2c0>
    8001e76c:	c789                	beqz	a5,8001e776 <time_test_6+0x6e>
    8001e76e:	00014597          	auipc	a1,0x14
    8001e772:	f4a58593          	addi	a1,a1,-182 # 800326b8 <__func__.0+0x2d0>
    8001e776:	00014517          	auipc	a0,0x14
    8001e77a:	f8250513          	addi	a0,a0,-126 # 800326f8 <__func__.0+0x310>
    8001e77e:	547100ef          	jal	8002f4c4 <printf>
    8001e782:	0003e797          	auipc	a5,0x3e
    8001e786:	88f7c783          	lbu	a5,-1905(a5) # 8005c011 <excpt+0x1>
    8001e78a:	e7a1                	bnez	a5,8001e7d2 <time_test_6+0xca>
    8001e78c:	4529                	li	a0,10
    8001e78e:	2250f0ef          	jal	8002e1b2 <putchar>
    8001e792:	0003e797          	auipc	a5,0x3e
    8001e796:	87f7c783          	lbu	a5,-1921(a5) # 8005c011 <excpt+0x1>
    8001e79a:	e795                	bnez	a5,8001e7c6 <time_test_6+0xbe>
    8001e79c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e79e:	00014597          	auipc	a1,0x14
    8001e7a2:	f0a58593          	addi	a1,a1,-246 # 800326a8 <__func__.0+0x2c0>
    8001e7a6:	00014517          	auipc	a0,0x14
    8001e7aa:	fba50513          	addi	a0,a0,-70 # 80032760 <__func__.0+0x378>
    8001e7ae:	517100ef          	jal	8002f4c4 <printf>
    8001e7b2:	4511                	li	a0,4
    8001e7b4:	f60e20ef          	jal	80000f14 <goto_priv>
    8001e7b8:	fbfe20ef          	jal	80001776 <reset_state>
}
    8001e7bc:	60a2                	ld	ra,8(sp)
    8001e7be:	8522                	mv	a0,s0
    8001e7c0:	6402                	ld	s0,0(sp)
    8001e7c2:	0141                	addi	sp,sp,16
    8001e7c4:	8082                	ret
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e7c6:	4401                	li	s0,0
    TEST_END(); 
    8001e7c8:	00014597          	auipc	a1,0x14
    8001e7cc:	ef058593          	addi	a1,a1,-272 # 800326b8 <__func__.0+0x2d0>
    8001e7d0:	bfd9                	j	8001e7a6 <time_test_6+0x9e>
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e7d2:	00014517          	auipc	a0,0x14
    8001e7d6:	f2e50513          	addi	a0,a0,-210 # 80032700 <__func__.0+0x318>
    8001e7da:	4eb100ef          	jal	8002f4c4 <printf>
    8001e7de:	02900513          	li	a0,41
    8001e7e2:	1d10f0ef          	jal	8002e1b2 <putchar>
    8001e7e6:	b75d                	j	8001e78c <time_test_6+0x84>

000000008001e7e8 <time_test_7>:

bool time_test_7() {
    8001e7e8:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e7ea:	00013597          	auipc	a1,0x13
    8001e7ee:	fae58593          	addi	a1,a1,-82 # 80031798 <__func__.44>
    8001e7f2:	00014517          	auipc	a0,0x14
    8001e7f6:	ed650513          	addi	a0,a0,-298 # 800326c8 <__func__.0+0x2e0>
bool time_test_7() {
    8001e7fa:	e406                	sd	ra,8(sp)
    8001e7fc:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e7fe:	4c7100ef          	jal	8002f4c4 <printf>
    8001e802:	4529                	li	a0,10
    8001e804:	1af0f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001e808:	4511                	li	a0,4
    8001e80a:	f0ae20ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e80e:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e812:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e816:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001e81a:	4501                	li	a0,0
    8001e81c:	ef8e20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e820:	df8e20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e824:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e828:	08c00593          	li	a1,140
    8001e82c:	0001b617          	auipc	a2,0x1b
    8001e830:	32c60613          	addi	a2,a2,812 # 80039b58 <__func__.0+0x7770>
    8001e834:	00014517          	auipc	a0,0x14
    8001e838:	eac50513          	addi	a0,a0,-340 # 800326e0 <__func__.0+0x2f8>
    8001e83c:	489100ef          	jal	8002f4c4 <printf>
    8001e840:	0003d797          	auipc	a5,0x3d
    8001e844:	7d17c783          	lbu	a5,2001(a5) # 8005c011 <excpt+0x1>
    8001e848:	00014597          	auipc	a1,0x14
    8001e84c:	e6058593          	addi	a1,a1,-416 # 800326a8 <__func__.0+0x2c0>
    8001e850:	c789                	beqz	a5,8001e85a <time_test_7+0x72>
    8001e852:	00014597          	auipc	a1,0x14
    8001e856:	e6658593          	addi	a1,a1,-410 # 800326b8 <__func__.0+0x2d0>
    8001e85a:	00014517          	auipc	a0,0x14
    8001e85e:	e9e50513          	addi	a0,a0,-354 # 800326f8 <__func__.0+0x310>
    8001e862:	463100ef          	jal	8002f4c4 <printf>
    8001e866:	0003d797          	auipc	a5,0x3d
    8001e86a:	7ab7c783          	lbu	a5,1963(a5) # 8005c011 <excpt+0x1>
    8001e86e:	e7a1                	bnez	a5,8001e8b6 <time_test_7+0xce>
    8001e870:	4529                	li	a0,10
    8001e872:	1410f0ef          	jal	8002e1b2 <putchar>
    8001e876:	0003d797          	auipc	a5,0x3d
    8001e87a:	79b7c783          	lbu	a5,1947(a5) # 8005c011 <excpt+0x1>
    8001e87e:	e795                	bnez	a5,8001e8aa <time_test_7+0xc2>
    8001e880:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e882:	00014597          	auipc	a1,0x14
    8001e886:	e2658593          	addi	a1,a1,-474 # 800326a8 <__func__.0+0x2c0>
    8001e88a:	00014517          	auipc	a0,0x14
    8001e88e:	ed650513          	addi	a0,a0,-298 # 80032760 <__func__.0+0x378>
    8001e892:	433100ef          	jal	8002f4c4 <printf>
    8001e896:	4511                	li	a0,4
    8001e898:	e7ce20ef          	jal	80000f14 <goto_priv>
    8001e89c:	edbe20ef          	jal	80001776 <reset_state>
}
    8001e8a0:	60a2                	ld	ra,8(sp)
    8001e8a2:	8522                	mv	a0,s0
    8001e8a4:	6402                	ld	s0,0(sp)
    8001e8a6:	0141                	addi	sp,sp,16
    8001e8a8:	8082                	ret
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e8aa:	4401                	li	s0,0
    TEST_END(); 
    8001e8ac:	00014597          	auipc	a1,0x14
    8001e8b0:	e0c58593          	addi	a1,a1,-500 # 800326b8 <__func__.0+0x2d0>
    8001e8b4:	bfd9                	j	8001e88a <time_test_7+0xa2>
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e8b6:	00014517          	auipc	a0,0x14
    8001e8ba:	e4a50513          	addi	a0,a0,-438 # 80032700 <__func__.0+0x318>
    8001e8be:	407100ef          	jal	8002f4c4 <printf>
    8001e8c2:	02900513          	li	a0,41
    8001e8c6:	0ed0f0ef          	jal	8002e1b2 <putchar>
    8001e8ca:	b75d                	j	8001e870 <time_test_7+0x88>

000000008001e8cc <time_test_8>:

bool time_test_8() {
    8001e8cc:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e8ce:	00013597          	auipc	a1,0x13
    8001e8d2:	eda58593          	addi	a1,a1,-294 # 800317a8 <__func__.43>
    8001e8d6:	00014517          	auipc	a0,0x14
    8001e8da:	df250513          	addi	a0,a0,-526 # 800326c8 <__func__.0+0x2e0>
bool time_test_8() {
    8001e8de:	ec06                	sd	ra,24(sp)
    8001e8e0:	e822                	sd	s0,16(sp)
    8001e8e2:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e8e4:	3e1100ef          	jal	8002f4c4 <printf>
    8001e8e8:	4529                	li	a0,10
    8001e8ea:	0c90f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001e8ee:	4511                	li	a0,4
    8001e8f0:	e24e20ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e8f4:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e8f8:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e8fc:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001e900:	4501                	li	a0,0
    8001e902:	e12e20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e906:	d12e20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e90a:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e90e:	08c00593          	li	a1,140
    8001e912:	0001b617          	auipc	a2,0x1b
    8001e916:	29e60613          	addi	a2,a2,670 # 80039bb0 <__func__.0+0x77c8>
    8001e91a:	00014517          	auipc	a0,0x14
    8001e91e:	dc650513          	addi	a0,a0,-570 # 800326e0 <__func__.0+0x2f8>
    8001e922:	3a3100ef          	jal	8002f4c4 <printf>
    8001e926:	0003d797          	auipc	a5,0x3d
    8001e92a:	6eb7c783          	lbu	a5,1771(a5) # 8005c011 <excpt+0x1>
    8001e92e:	0003d497          	auipc	s1,0x3d
    8001e932:	6e248493          	addi	s1,s1,1762 # 8005c010 <excpt>
    8001e936:	00014597          	auipc	a1,0x14
    8001e93a:	d8258593          	addi	a1,a1,-638 # 800326b8 <__func__.0+0x2d0>
    8001e93e:	cf89                	beqz	a5,8001e958 <time_test_8+0x8c>
    8001e940:	6498                	ld	a4,8(s1)
    8001e942:	47d9                	li	a5,22
    8001e944:	00014597          	auipc	a1,0x14
    8001e948:	d6458593          	addi	a1,a1,-668 # 800326a8 <__func__.0+0x2c0>
    8001e94c:	00f70663          	beq	a4,a5,8001e958 <time_test_8+0x8c>
    8001e950:	00014597          	auipc	a1,0x14
    8001e954:	d6858593          	addi	a1,a1,-664 # 800326b8 <__func__.0+0x2d0>
    8001e958:	00014517          	auipc	a0,0x14
    8001e95c:	da050513          	addi	a0,a0,-608 # 800326f8 <__func__.0+0x310>
    8001e960:	365100ef          	jal	8002f4c4 <printf>
    8001e964:	0003d797          	auipc	a5,0x3d
    8001e968:	6ad7c783          	lbu	a5,1709(a5) # 8005c011 <excpt+0x1>
    8001e96c:	c789                	beqz	a5,8001e976 <time_test_8+0xaa>
    8001e96e:	6498                	ld	a4,8(s1)
    8001e970:	47d9                	li	a5,22
    8001e972:	00f70c63          	beq	a4,a5,8001e98a <time_test_8+0xbe>
    8001e976:	00014517          	auipc	a0,0x14
    8001e97a:	d8a50513          	addi	a0,a0,-630 # 80032700 <__func__.0+0x318>
    8001e97e:	347100ef          	jal	8002f4c4 <printf>
    8001e982:	02900513          	li	a0,41
    8001e986:	02d0f0ef          	jal	8002e1b2 <putchar>
    8001e98a:	4529                	li	a0,10
    8001e98c:	0270f0ef          	jal	8002e1b2 <putchar>
    8001e990:	0003d417          	auipc	s0,0x3d
    8001e994:	68144403          	lbu	s0,1665(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001e998:	00014597          	auipc	a1,0x14
    8001e99c:	d2058593          	addi	a1,a1,-736 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e9a0:	cc11                	beqz	s0,8001e9bc <time_test_8+0xf0>
    8001e9a2:	6498                	ld	a4,8(s1)
    8001e9a4:	47d9                	li	a5,22
    TEST_END(); 
    8001e9a6:	00014597          	auipc	a1,0x14
    8001e9aa:	d0258593          	addi	a1,a1,-766 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e9ae:	00f70763          	beq	a4,a5,8001e9bc <time_test_8+0xf0>
    8001e9b2:	4401                	li	s0,0
    TEST_END(); 
    8001e9b4:	00014597          	auipc	a1,0x14
    8001e9b8:	d0458593          	addi	a1,a1,-764 # 800326b8 <__func__.0+0x2d0>
    8001e9bc:	00014517          	auipc	a0,0x14
    8001e9c0:	da450513          	addi	a0,a0,-604 # 80032760 <__func__.0+0x378>
    8001e9c4:	301100ef          	jal	8002f4c4 <printf>
    8001e9c8:	4511                	li	a0,4
    8001e9ca:	d4ae20ef          	jal	80000f14 <goto_priv>
    8001e9ce:	da9e20ef          	jal	80001776 <reset_state>
}
    8001e9d2:	60e2                	ld	ra,24(sp)
    8001e9d4:	8522                	mv	a0,s0
    8001e9d6:	6442                	ld	s0,16(sp)
    8001e9d8:	64a2                	ld	s1,8(sp)
    8001e9da:	6105                	addi	sp,sp,32
    8001e9dc:	8082                	ret

000000008001e9de <time_test_9>:

bool time_test_9() {
    8001e9de:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e9e0:	00013597          	auipc	a1,0x13
    8001e9e4:	dd858593          	addi	a1,a1,-552 # 800317b8 <__func__.42>
    8001e9e8:	00014517          	auipc	a0,0x14
    8001e9ec:	ce050513          	addi	a0,a0,-800 # 800326c8 <__func__.0+0x2e0>
bool time_test_9() {
    8001e9f0:	ec06                	sd	ra,24(sp)
    8001e9f2:	e822                	sd	s0,16(sp)
    8001e9f4:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e9f6:	2cf100ef          	jal	8002f4c4 <printf>
    8001e9fa:	4529                	li	a0,10
    8001e9fc:	7b60f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001ea00:	4511                	li	a0,4
    8001ea02:	d12e20ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001ea06:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001ea0a:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001ea0e:	10617073          	csrci	scounteren,2

    goto_priv(PRIV_HU);
    8001ea12:	4505                	li	a0,1
    8001ea14:	d00e20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ea18:	c00e20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001ea1c:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001ea20:	08c00593          	li	a1,140
    8001ea24:	0001b617          	auipc	a2,0x1b
    8001ea28:	1fc60613          	addi	a2,a2,508 # 80039c20 <__func__.0+0x7838>
    8001ea2c:	00014517          	auipc	a0,0x14
    8001ea30:	cb450513          	addi	a0,a0,-844 # 800326e0 <__func__.0+0x2f8>
    8001ea34:	291100ef          	jal	8002f4c4 <printf>
    8001ea38:	0003d797          	auipc	a5,0x3d
    8001ea3c:	5d97c783          	lbu	a5,1497(a5) # 8005c011 <excpt+0x1>
    8001ea40:	0003d497          	auipc	s1,0x3d
    8001ea44:	5d048493          	addi	s1,s1,1488 # 8005c010 <excpt>
    8001ea48:	00014597          	auipc	a1,0x14
    8001ea4c:	c7058593          	addi	a1,a1,-912 # 800326b8 <__func__.0+0x2d0>
    8001ea50:	cf89                	beqz	a5,8001ea6a <time_test_9+0x8c>
    8001ea52:	6498                	ld	a4,8(s1)
    8001ea54:	4789                	li	a5,2
    8001ea56:	00014597          	auipc	a1,0x14
    8001ea5a:	c5258593          	addi	a1,a1,-942 # 800326a8 <__func__.0+0x2c0>
    8001ea5e:	00f70663          	beq	a4,a5,8001ea6a <time_test_9+0x8c>
    8001ea62:	00014597          	auipc	a1,0x14
    8001ea66:	c5658593          	addi	a1,a1,-938 # 800326b8 <__func__.0+0x2d0>
    8001ea6a:	00014517          	auipc	a0,0x14
    8001ea6e:	c8e50513          	addi	a0,a0,-882 # 800326f8 <__func__.0+0x310>
    8001ea72:	253100ef          	jal	8002f4c4 <printf>
    8001ea76:	0003d797          	auipc	a5,0x3d
    8001ea7a:	59b7c783          	lbu	a5,1435(a5) # 8005c011 <excpt+0x1>
    8001ea7e:	c789                	beqz	a5,8001ea88 <time_test_9+0xaa>
    8001ea80:	6498                	ld	a4,8(s1)
    8001ea82:	4789                	li	a5,2
    8001ea84:	00f70c63          	beq	a4,a5,8001ea9c <time_test_9+0xbe>
    8001ea88:	00014517          	auipc	a0,0x14
    8001ea8c:	c7850513          	addi	a0,a0,-904 # 80032700 <__func__.0+0x318>
    8001ea90:	235100ef          	jal	8002f4c4 <printf>
    8001ea94:	02900513          	li	a0,41
    8001ea98:	71a0f0ef          	jal	8002e1b2 <putchar>
    8001ea9c:	4529                	li	a0,10
    8001ea9e:	7140f0ef          	jal	8002e1b2 <putchar>
    8001eaa2:	0003d417          	auipc	s0,0x3d
    8001eaa6:	56f44403          	lbu	s0,1391(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001eaaa:	00014597          	auipc	a1,0x14
    8001eaae:	c0e58593          	addi	a1,a1,-1010 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001eab2:	cc11                	beqz	s0,8001eace <time_test_9+0xf0>
    8001eab4:	6498                	ld	a4,8(s1)
    8001eab6:	4789                	li	a5,2
    TEST_END(); 
    8001eab8:	00014597          	auipc	a1,0x14
    8001eabc:	bf058593          	addi	a1,a1,-1040 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001eac0:	00f70763          	beq	a4,a5,8001eace <time_test_9+0xf0>
    8001eac4:	4401                	li	s0,0
    TEST_END(); 
    8001eac6:	00014597          	auipc	a1,0x14
    8001eaca:	bf258593          	addi	a1,a1,-1038 # 800326b8 <__func__.0+0x2d0>
    8001eace:	00014517          	auipc	a0,0x14
    8001ead2:	c9250513          	addi	a0,a0,-878 # 80032760 <__func__.0+0x378>
    8001ead6:	1ef100ef          	jal	8002f4c4 <printf>
    8001eada:	4511                	li	a0,4
    8001eadc:	c38e20ef          	jal	80000f14 <goto_priv>
    8001eae0:	c97e20ef          	jal	80001776 <reset_state>
}
    8001eae4:	60e2                	ld	ra,24(sp)
    8001eae6:	8522                	mv	a0,s0
    8001eae8:	6442                	ld	s0,16(sp)
    8001eaea:	64a2                	ld	s1,8(sp)
    8001eaec:	6105                	addi	sp,sp,32
    8001eaee:	8082                	ret

000000008001eaf0 <time_test_10>:

bool time_test_10() {
    8001eaf0:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001eaf2:	00013597          	auipc	a1,0x13
    8001eaf6:	cd658593          	addi	a1,a1,-810 # 800317c8 <__func__.41>
    8001eafa:	00014517          	auipc	a0,0x14
    8001eafe:	bce50513          	addi	a0,a0,-1074 # 800326c8 <__func__.0+0x2e0>
bool time_test_10() {
    8001eb02:	e406                	sd	ra,8(sp)
    8001eb04:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001eb06:	1bf100ef          	jal	8002f4c4 <printf>
    8001eb0a:	4529                	li	a0,10
    8001eb0c:	6a60f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001eb10:	4511                	li	a0,4
    8001eb12:	c02e20ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001eb16:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001eb1a:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001eb1e:	4509                	li	a0,2
    8001eb20:	bf4e20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eb24:	af4e20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001eb28:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001eb2c:	08c00593          	li	a1,140
    8001eb30:	0001b617          	auipc	a2,0x1b
    8001eb34:	16060613          	addi	a2,a2,352 # 80039c90 <__func__.0+0x78a8>
    8001eb38:	00014517          	auipc	a0,0x14
    8001eb3c:	ba850513          	addi	a0,a0,-1112 # 800326e0 <__func__.0+0x2f8>
    8001eb40:	185100ef          	jal	8002f4c4 <printf>
    8001eb44:	0003d797          	auipc	a5,0x3d
    8001eb48:	4cd7c783          	lbu	a5,1229(a5) # 8005c011 <excpt+0x1>
    8001eb4c:	00014597          	auipc	a1,0x14
    8001eb50:	b5c58593          	addi	a1,a1,-1188 # 800326a8 <__func__.0+0x2c0>
    8001eb54:	c789                	beqz	a5,8001eb5e <time_test_10+0x6e>
    8001eb56:	00014597          	auipc	a1,0x14
    8001eb5a:	b6258593          	addi	a1,a1,-1182 # 800326b8 <__func__.0+0x2d0>
    8001eb5e:	00014517          	auipc	a0,0x14
    8001eb62:	b9a50513          	addi	a0,a0,-1126 # 800326f8 <__func__.0+0x310>
    8001eb66:	15f100ef          	jal	8002f4c4 <printf>
    8001eb6a:	0003d797          	auipc	a5,0x3d
    8001eb6e:	4a77c783          	lbu	a5,1191(a5) # 8005c011 <excpt+0x1>
    8001eb72:	e7a1                	bnez	a5,8001ebba <time_test_10+0xca>
    8001eb74:	4529                	li	a0,10
    8001eb76:	63c0f0ef          	jal	8002e1b2 <putchar>
    8001eb7a:	0003d797          	auipc	a5,0x3d
    8001eb7e:	4977c783          	lbu	a5,1175(a5) # 8005c011 <excpt+0x1>
    8001eb82:	e795                	bnez	a5,8001ebae <time_test_10+0xbe>
    8001eb84:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001eb86:	00014597          	auipc	a1,0x14
    8001eb8a:	b2258593          	addi	a1,a1,-1246 # 800326a8 <__func__.0+0x2c0>
    8001eb8e:	00014517          	auipc	a0,0x14
    8001eb92:	bd250513          	addi	a0,a0,-1070 # 80032760 <__func__.0+0x378>
    8001eb96:	12f100ef          	jal	8002f4c4 <printf>
    8001eb9a:	4511                	li	a0,4
    8001eb9c:	b78e20ef          	jal	80000f14 <goto_priv>
    8001eba0:	bd7e20ef          	jal	80001776 <reset_state>
}
    8001eba4:	60a2                	ld	ra,8(sp)
    8001eba6:	8522                	mv	a0,s0
    8001eba8:	6402                	ld	s0,0(sp)
    8001ebaa:	0141                	addi	sp,sp,16
    8001ebac:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001ebae:	4401                	li	s0,0
    TEST_END(); 
    8001ebb0:	00014597          	auipc	a1,0x14
    8001ebb4:	b0858593          	addi	a1,a1,-1272 # 800326b8 <__func__.0+0x2d0>
    8001ebb8:	bfd9                	j	8001eb8e <time_test_10+0x9e>
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001ebba:	00014517          	auipc	a0,0x14
    8001ebbe:	b4650513          	addi	a0,a0,-1210 # 80032700 <__func__.0+0x318>
    8001ebc2:	103100ef          	jal	8002f4c4 <printf>
    8001ebc6:	02900513          	li	a0,41
    8001ebca:	5e80f0ef          	jal	8002e1b2 <putchar>
    8001ebce:	b75d                	j	8001eb74 <time_test_10+0x84>

000000008001ebd0 <cycle_test_1>:


bool cycle_test_1() {
    8001ebd0:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ebd2:	00013597          	auipc	a1,0x13
    8001ebd6:	c0658593          	addi	a1,a1,-1018 # 800317d8 <__func__.40>
    8001ebda:	00014517          	auipc	a0,0x14
    8001ebde:	aee50513          	addi	a0,a0,-1298 # 800326c8 <__func__.0+0x2e0>
bool cycle_test_1() {
    8001ebe2:	ec06                	sd	ra,24(sp)
    8001ebe4:	e822                	sd	s0,16(sp)
    8001ebe6:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001ebe8:	0dd100ef          	jal	8002f4c4 <printf>
    8001ebec:	4529                	li	a0,10
    8001ebee:	5c40f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001ebf2:	4511                	li	a0,4
    8001ebf4:	b20e20ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8001ebf8:	3060f073          	csrci	mcounteren,1

    goto_priv(PRIV_VS);
    8001ebfc:	4509                	li	a0,2
    8001ebfe:	b16e20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ec02:	a16e20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ec06:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ec0a:	08c00593          	li	a1,140
    8001ec0e:	0001b617          	auipc	a2,0x1b
    8001ec12:	0d260613          	addi	a2,a2,210 # 80039ce0 <__func__.0+0x78f8>
    8001ec16:	00014517          	auipc	a0,0x14
    8001ec1a:	aca50513          	addi	a0,a0,-1334 # 800326e0 <__func__.0+0x2f8>
    8001ec1e:	0a7100ef          	jal	8002f4c4 <printf>
    8001ec22:	0003d797          	auipc	a5,0x3d
    8001ec26:	3ef7c783          	lbu	a5,1007(a5) # 8005c011 <excpt+0x1>
    8001ec2a:	0003d497          	auipc	s1,0x3d
    8001ec2e:	3e648493          	addi	s1,s1,998 # 8005c010 <excpt>
    8001ec32:	00014597          	auipc	a1,0x14
    8001ec36:	a8658593          	addi	a1,a1,-1402 # 800326b8 <__func__.0+0x2d0>
    8001ec3a:	cf89                	beqz	a5,8001ec54 <cycle_test_1+0x84>
    8001ec3c:	6498                	ld	a4,8(s1)
    8001ec3e:	4789                	li	a5,2
    8001ec40:	00014597          	auipc	a1,0x14
    8001ec44:	a6858593          	addi	a1,a1,-1432 # 800326a8 <__func__.0+0x2c0>
    8001ec48:	00f70663          	beq	a4,a5,8001ec54 <cycle_test_1+0x84>
    8001ec4c:	00014597          	auipc	a1,0x14
    8001ec50:	a6c58593          	addi	a1,a1,-1428 # 800326b8 <__func__.0+0x2d0>
    8001ec54:	00014517          	auipc	a0,0x14
    8001ec58:	aa450513          	addi	a0,a0,-1372 # 800326f8 <__func__.0+0x310>
    8001ec5c:	069100ef          	jal	8002f4c4 <printf>
    8001ec60:	0003d797          	auipc	a5,0x3d
    8001ec64:	3b17c783          	lbu	a5,945(a5) # 8005c011 <excpt+0x1>
    8001ec68:	c789                	beqz	a5,8001ec72 <cycle_test_1+0xa2>
    8001ec6a:	6498                	ld	a4,8(s1)
    8001ec6c:	4789                	li	a5,2
    8001ec6e:	00f70c63          	beq	a4,a5,8001ec86 <cycle_test_1+0xb6>
    8001ec72:	00014517          	auipc	a0,0x14
    8001ec76:	a8e50513          	addi	a0,a0,-1394 # 80032700 <__func__.0+0x318>
    8001ec7a:	04b100ef          	jal	8002f4c4 <printf>
    8001ec7e:	02900513          	li	a0,41
    8001ec82:	5300f0ef          	jal	8002e1b2 <putchar>
    8001ec86:	4529                	li	a0,10
    8001ec88:	52a0f0ef          	jal	8002e1b2 <putchar>
    8001ec8c:	0003d797          	auipc	a5,0x3d
    8001ec90:	3857c783          	lbu	a5,901(a5) # 8005c011 <excpt+0x1>
    8001ec94:	4401                	li	s0,0
    8001ec96:	c789                	beqz	a5,8001eca0 <cycle_test_1+0xd0>
    8001ec98:	6480                	ld	s0,8(s1)
    8001ec9a:	1479                	addi	s0,s0,-2
    8001ec9c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001eca0:	450d                	li	a0,3
    8001eca2:	a72e20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eca6:	972e20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ecaa:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ecae:	08c00593          	li	a1,140
    8001ecb2:	0001b617          	auipc	a2,0x1b
    8001ecb6:	07e60613          	addi	a2,a2,126 # 80039d30 <__func__.0+0x7948>
    8001ecba:	00014517          	auipc	a0,0x14
    8001ecbe:	a2650513          	addi	a0,a0,-1498 # 800326e0 <__func__.0+0x2f8>
    8001ecc2:	003100ef          	jal	8002f4c4 <printf>
    8001ecc6:	0003d797          	auipc	a5,0x3d
    8001ecca:	34b7c783          	lbu	a5,843(a5) # 8005c011 <excpt+0x1>
    8001ecce:	00014597          	auipc	a1,0x14
    8001ecd2:	9ea58593          	addi	a1,a1,-1558 # 800326b8 <__func__.0+0x2d0>
    8001ecd6:	cf89                	beqz	a5,8001ecf0 <cycle_test_1+0x120>
    8001ecd8:	6498                	ld	a4,8(s1)
    8001ecda:	4789                	li	a5,2
    8001ecdc:	00014597          	auipc	a1,0x14
    8001ece0:	9cc58593          	addi	a1,a1,-1588 # 800326a8 <__func__.0+0x2c0>
    8001ece4:	00f70663          	beq	a4,a5,8001ecf0 <cycle_test_1+0x120>
    8001ece8:	00014597          	auipc	a1,0x14
    8001ecec:	9d058593          	addi	a1,a1,-1584 # 800326b8 <__func__.0+0x2d0>
    8001ecf0:	00014517          	auipc	a0,0x14
    8001ecf4:	a0850513          	addi	a0,a0,-1528 # 800326f8 <__func__.0+0x310>
    8001ecf8:	7cc100ef          	jal	8002f4c4 <printf>
    8001ecfc:	0003d797          	auipc	a5,0x3d
    8001ed00:	3157c783          	lbu	a5,789(a5) # 8005c011 <excpt+0x1>
    8001ed04:	c789                	beqz	a5,8001ed0e <cycle_test_1+0x13e>
    8001ed06:	6498                	ld	a4,8(s1)
    8001ed08:	4789                	li	a5,2
    8001ed0a:	00f70c63          	beq	a4,a5,8001ed22 <cycle_test_1+0x152>
    8001ed0e:	00014517          	auipc	a0,0x14
    8001ed12:	9f250513          	addi	a0,a0,-1550 # 80032700 <__func__.0+0x318>
    8001ed16:	7ae100ef          	jal	8002f4c4 <printf>
    8001ed1a:	02900513          	li	a0,41
    8001ed1e:	4940f0ef          	jal	8002e1b2 <putchar>
    8001ed22:	4529                	li	a0,10
    8001ed24:	48e0f0ef          	jal	8002e1b2 <putchar>
    8001ed28:	c801                	beqz	s0,8001ed38 <cycle_test_1+0x168>
    8001ed2a:	0003d797          	auipc	a5,0x3d
    8001ed2e:	2e77c783          	lbu	a5,743(a5) # 8005c011 <excpt+0x1>
    8001ed32:	4401                	li	s0,0
    8001ed34:	16079f63          	bnez	a5,8001eeb2 <cycle_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001ed38:	4501                	li	a0,0
    8001ed3a:	9dae20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ed3e:	8dae20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ed42:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ed46:	08c00593          	li	a1,140
    8001ed4a:	0001b617          	auipc	a2,0x1b
    8001ed4e:	03660613          	addi	a2,a2,54 # 80039d80 <__func__.0+0x7998>
    8001ed52:	00014517          	auipc	a0,0x14
    8001ed56:	98e50513          	addi	a0,a0,-1650 # 800326e0 <__func__.0+0x2f8>
    8001ed5a:	76a100ef          	jal	8002f4c4 <printf>
    8001ed5e:	0003d797          	auipc	a5,0x3d
    8001ed62:	2b37c783          	lbu	a5,691(a5) # 8005c011 <excpt+0x1>
    8001ed66:	00014597          	auipc	a1,0x14
    8001ed6a:	95258593          	addi	a1,a1,-1710 # 800326b8 <__func__.0+0x2d0>
    8001ed6e:	cf89                	beqz	a5,8001ed88 <cycle_test_1+0x1b8>
    8001ed70:	6498                	ld	a4,8(s1)
    8001ed72:	4789                	li	a5,2
    8001ed74:	00014597          	auipc	a1,0x14
    8001ed78:	93458593          	addi	a1,a1,-1740 # 800326a8 <__func__.0+0x2c0>
    8001ed7c:	00f70663          	beq	a4,a5,8001ed88 <cycle_test_1+0x1b8>
    8001ed80:	00014597          	auipc	a1,0x14
    8001ed84:	93858593          	addi	a1,a1,-1736 # 800326b8 <__func__.0+0x2d0>
    8001ed88:	00014517          	auipc	a0,0x14
    8001ed8c:	97050513          	addi	a0,a0,-1680 # 800326f8 <__func__.0+0x310>
    8001ed90:	734100ef          	jal	8002f4c4 <printf>
    8001ed94:	0003d797          	auipc	a5,0x3d
    8001ed98:	27d7c783          	lbu	a5,637(a5) # 8005c011 <excpt+0x1>
    8001ed9c:	c789                	beqz	a5,8001eda6 <cycle_test_1+0x1d6>
    8001ed9e:	6498                	ld	a4,8(s1)
    8001eda0:	4789                	li	a5,2
    8001eda2:	00f70c63          	beq	a4,a5,8001edba <cycle_test_1+0x1ea>
    8001eda6:	00014517          	auipc	a0,0x14
    8001edaa:	95a50513          	addi	a0,a0,-1702 # 80032700 <__func__.0+0x318>
    8001edae:	716100ef          	jal	8002f4c4 <printf>
    8001edb2:	02900513          	li	a0,41
    8001edb6:	3fc0f0ef          	jal	8002e1b2 <putchar>
    8001edba:	4529                	li	a0,10
    8001edbc:	3f60f0ef          	jal	8002e1b2 <putchar>
    8001edc0:	c801                	beqz	s0,8001edd0 <cycle_test_1+0x200>
    8001edc2:	0003d797          	auipc	a5,0x3d
    8001edc6:	24f7c783          	lbu	a5,591(a5) # 8005c011 <excpt+0x1>
    8001edca:	4401                	li	s0,0
    8001edcc:	0c079e63          	bnez	a5,8001eea8 <cycle_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001edd0:	4505                	li	a0,1
    8001edd2:	942e20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001edd6:	842e20ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001edda:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001edde:	08c00593          	li	a1,140
    8001ede2:	0001b617          	auipc	a2,0x1b
    8001ede6:	fee60613          	addi	a2,a2,-18 # 80039dd0 <__func__.0+0x79e8>
    8001edea:	00014517          	auipc	a0,0x14
    8001edee:	8f650513          	addi	a0,a0,-1802 # 800326e0 <__func__.0+0x2f8>
    8001edf2:	6d2100ef          	jal	8002f4c4 <printf>
    8001edf6:	0003d797          	auipc	a5,0x3d
    8001edfa:	21b7c783          	lbu	a5,539(a5) # 8005c011 <excpt+0x1>
    8001edfe:	00014597          	auipc	a1,0x14
    8001ee02:	8ba58593          	addi	a1,a1,-1862 # 800326b8 <__func__.0+0x2d0>
    8001ee06:	cf89                	beqz	a5,8001ee20 <cycle_test_1+0x250>
    8001ee08:	6498                	ld	a4,8(s1)
    8001ee0a:	4789                	li	a5,2
    8001ee0c:	00014597          	auipc	a1,0x14
    8001ee10:	89c58593          	addi	a1,a1,-1892 # 800326a8 <__func__.0+0x2c0>
    8001ee14:	00f70663          	beq	a4,a5,8001ee20 <cycle_test_1+0x250>
    8001ee18:	00014597          	auipc	a1,0x14
    8001ee1c:	8a058593          	addi	a1,a1,-1888 # 800326b8 <__func__.0+0x2d0>
    8001ee20:	00014517          	auipc	a0,0x14
    8001ee24:	8d850513          	addi	a0,a0,-1832 # 800326f8 <__func__.0+0x310>
    8001ee28:	69c100ef          	jal	8002f4c4 <printf>
    8001ee2c:	0003d797          	auipc	a5,0x3d
    8001ee30:	1e57c783          	lbu	a5,485(a5) # 8005c011 <excpt+0x1>
    8001ee34:	c789                	beqz	a5,8001ee3e <cycle_test_1+0x26e>
    8001ee36:	6498                	ld	a4,8(s1)
    8001ee38:	4789                	li	a5,2
    8001ee3a:	00f70c63          	beq	a4,a5,8001ee52 <cycle_test_1+0x282>
    8001ee3e:	00014517          	auipc	a0,0x14
    8001ee42:	8c250513          	addi	a0,a0,-1854 # 80032700 <__func__.0+0x318>
    8001ee46:	67e100ef          	jal	8002f4c4 <printf>
    8001ee4a:	02900513          	li	a0,41
    8001ee4e:	3640f0ef          	jal	8002e1b2 <putchar>
    8001ee52:	4529                	li	a0,10
    8001ee54:	35e0f0ef          	jal	8002e1b2 <putchar>
    8001ee58:	c015                	beqz	s0,8001ee7c <cycle_test_1+0x2ac>
    8001ee5a:	0003d417          	auipc	s0,0x3d
    8001ee5e:	1b744403          	lbu	s0,439(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001ee62:	00014597          	auipc	a1,0x14
    8001ee66:	85658593          	addi	a1,a1,-1962 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ee6a:	cc11                	beqz	s0,8001ee86 <cycle_test_1+0x2b6>
    8001ee6c:	6498                	ld	a4,8(s1)
    8001ee6e:	4789                	li	a5,2
    TEST_END(); 
    8001ee70:	00014597          	auipc	a1,0x14
    8001ee74:	83858593          	addi	a1,a1,-1992 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ee78:	00f70763          	beq	a4,a5,8001ee86 <cycle_test_1+0x2b6>
    8001ee7c:	4401                	li	s0,0
    TEST_END(); 
    8001ee7e:	00014597          	auipc	a1,0x14
    8001ee82:	83a58593          	addi	a1,a1,-1990 # 800326b8 <__func__.0+0x2d0>
    8001ee86:	00014517          	auipc	a0,0x14
    8001ee8a:	8da50513          	addi	a0,a0,-1830 # 80032760 <__func__.0+0x378>
    8001ee8e:	636100ef          	jal	8002f4c4 <printf>
    8001ee92:	4511                	li	a0,4
    8001ee94:	880e20ef          	jal	80000f14 <goto_priv>
    8001ee98:	8dfe20ef          	jal	80001776 <reset_state>
}
    8001ee9c:	60e2                	ld	ra,24(sp)
    8001ee9e:	8522                	mv	a0,s0
    8001eea0:	6442                	ld	s0,16(sp)
    8001eea2:	64a2                	ld	s1,8(sp)
    8001eea4:	6105                	addi	sp,sp,32
    8001eea6:	8082                	ret
    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001eea8:	6480                	ld	s0,8(s1)
    8001eeaa:	1479                	addi	s0,s0,-2
    8001eeac:	00143413          	seqz	s0,s0
    8001eeb0:	b705                	j	8001edd0 <cycle_test_1+0x200>
    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001eeb2:	6480                	ld	s0,8(s1)
    8001eeb4:	1479                	addi	s0,s0,-2
    8001eeb6:	00143413          	seqz	s0,s0
    8001eeba:	bdbd                	j	8001ed38 <cycle_test_1+0x168>

000000008001eebc <cycle_test_2>:

bool cycle_test_2() {
    8001eebc:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001eebe:	00013597          	auipc	a1,0x13
    8001eec2:	92a58593          	addi	a1,a1,-1750 # 800317e8 <__func__.39>
    8001eec6:	00014517          	auipc	a0,0x14
    8001eeca:	80250513          	addi	a0,a0,-2046 # 800326c8 <__func__.0+0x2e0>
bool cycle_test_2() {
    8001eece:	e406                	sd	ra,8(sp)
    8001eed0:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001eed2:	5f2100ef          	jal	8002f4c4 <printf>
    8001eed6:	4529                	li	a0,10
    8001eed8:	2da0f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001eedc:	4511                	li	a0,4
    8001eede:	836e20ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8001eee2:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HS);
    8001eee6:	450d                	li	a0,3
    8001eee8:	82ce20ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eeec:	f2de10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001eef0:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001eef4:	08c00593          	li	a1,140
    8001eef8:	0001b617          	auipc	a2,0x1b
    8001eefc:	f2860613          	addi	a2,a2,-216 # 80039e20 <__func__.0+0x7a38>
    8001ef00:	00013517          	auipc	a0,0x13
    8001ef04:	7e050513          	addi	a0,a0,2016 # 800326e0 <__func__.0+0x2f8>
    8001ef08:	5bc100ef          	jal	8002f4c4 <printf>
    8001ef0c:	0003d797          	auipc	a5,0x3d
    8001ef10:	1057c783          	lbu	a5,261(a5) # 8005c011 <excpt+0x1>
    8001ef14:	00013597          	auipc	a1,0x13
    8001ef18:	79458593          	addi	a1,a1,1940 # 800326a8 <__func__.0+0x2c0>
    8001ef1c:	c789                	beqz	a5,8001ef26 <cycle_test_2+0x6a>
    8001ef1e:	00013597          	auipc	a1,0x13
    8001ef22:	79a58593          	addi	a1,a1,1946 # 800326b8 <__func__.0+0x2d0>
    8001ef26:	00013517          	auipc	a0,0x13
    8001ef2a:	7d250513          	addi	a0,a0,2002 # 800326f8 <__func__.0+0x310>
    8001ef2e:	596100ef          	jal	8002f4c4 <printf>
    8001ef32:	0003d797          	auipc	a5,0x3d
    8001ef36:	0df7c783          	lbu	a5,223(a5) # 8005c011 <excpt+0x1>
    8001ef3a:	e7a1                	bnez	a5,8001ef82 <cycle_test_2+0xc6>
    8001ef3c:	4529                	li	a0,10
    8001ef3e:	2740f0ef          	jal	8002e1b2 <putchar>
    8001ef42:	0003d797          	auipc	a5,0x3d
    8001ef46:	0cf7c783          	lbu	a5,207(a5) # 8005c011 <excpt+0x1>
    8001ef4a:	e795                	bnez	a5,8001ef76 <cycle_test_2+0xba>
    8001ef4c:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001ef4e:	00013597          	auipc	a1,0x13
    8001ef52:	75a58593          	addi	a1,a1,1882 # 800326a8 <__func__.0+0x2c0>
    8001ef56:	00014517          	auipc	a0,0x14
    8001ef5a:	80a50513          	addi	a0,a0,-2038 # 80032760 <__func__.0+0x378>
    8001ef5e:	566100ef          	jal	8002f4c4 <printf>
    8001ef62:	4511                	li	a0,4
    8001ef64:	fb1e10ef          	jal	80000f14 <goto_priv>
    8001ef68:	80fe20ef          	jal	80001776 <reset_state>
}
    8001ef6c:	60a2                	ld	ra,8(sp)
    8001ef6e:	8522                	mv	a0,s0
    8001ef70:	6402                	ld	s0,0(sp)
    8001ef72:	0141                	addi	sp,sp,16
    8001ef74:	8082                	ret
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001ef76:	4401                	li	s0,0
    TEST_END(); 
    8001ef78:	00013597          	auipc	a1,0x13
    8001ef7c:	74058593          	addi	a1,a1,1856 # 800326b8 <__func__.0+0x2d0>
    8001ef80:	bfd9                	j	8001ef56 <cycle_test_2+0x9a>
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001ef82:	00013517          	auipc	a0,0x13
    8001ef86:	77e50513          	addi	a0,a0,1918 # 80032700 <__func__.0+0x318>
    8001ef8a:	53a100ef          	jal	8002f4c4 <printf>
    8001ef8e:	02900513          	li	a0,41
    8001ef92:	2200f0ef          	jal	8002e1b2 <putchar>
    8001ef96:	b75d                	j	8001ef3c <cycle_test_2+0x80>

000000008001ef98 <cycle_test_3>:

bool cycle_test_3() {
    8001ef98:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ef9a:	00013597          	auipc	a1,0x13
    8001ef9e:	85e58593          	addi	a1,a1,-1954 # 800317f8 <__func__.38>
    8001efa2:	00013517          	auipc	a0,0x13
    8001efa6:	72650513          	addi	a0,a0,1830 # 800326c8 <__func__.0+0x2e0>
bool cycle_test_3() {
    8001efaa:	ec06                	sd	ra,24(sp)
    8001efac:	e822                	sd	s0,16(sp)
    8001efae:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001efb0:	514100ef          	jal	8002f4c4 <printf>
    8001efb4:	4529                	li	a0,10
    8001efb6:	1fc0f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001efba:	4511                	li	a0,4
    8001efbc:	f59e10ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001efc0:	1060f073          	csrci	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001efc4:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    8001efc8:	4505                	li	a0,1
    8001efca:	f4be10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001efce:	e4be10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001efd2:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001efd6:	08c00593          	li	a1,140
    8001efda:	0001b617          	auipc	a2,0x1b
    8001efde:	e7e60613          	addi	a2,a2,-386 # 80039e58 <__func__.0+0x7a70>
    8001efe2:	00013517          	auipc	a0,0x13
    8001efe6:	6fe50513          	addi	a0,a0,1790 # 800326e0 <__func__.0+0x2f8>
    8001efea:	4da100ef          	jal	8002f4c4 <printf>
    8001efee:	0003d797          	auipc	a5,0x3d
    8001eff2:	0237c783          	lbu	a5,35(a5) # 8005c011 <excpt+0x1>
    8001eff6:	0003d497          	auipc	s1,0x3d
    8001effa:	01a48493          	addi	s1,s1,26 # 8005c010 <excpt>
    8001effe:	00013597          	auipc	a1,0x13
    8001f002:	6ba58593          	addi	a1,a1,1722 # 800326b8 <__func__.0+0x2d0>
    8001f006:	cf89                	beqz	a5,8001f020 <cycle_test_3+0x88>
    8001f008:	6498                	ld	a4,8(s1)
    8001f00a:	4789                	li	a5,2
    8001f00c:	00013597          	auipc	a1,0x13
    8001f010:	69c58593          	addi	a1,a1,1692 # 800326a8 <__func__.0+0x2c0>
    8001f014:	00f70663          	beq	a4,a5,8001f020 <cycle_test_3+0x88>
    8001f018:	00013597          	auipc	a1,0x13
    8001f01c:	6a058593          	addi	a1,a1,1696 # 800326b8 <__func__.0+0x2d0>
    8001f020:	00013517          	auipc	a0,0x13
    8001f024:	6d850513          	addi	a0,a0,1752 # 800326f8 <__func__.0+0x310>
    8001f028:	49c100ef          	jal	8002f4c4 <printf>
    8001f02c:	0003d797          	auipc	a5,0x3d
    8001f030:	fe57c783          	lbu	a5,-27(a5) # 8005c011 <excpt+0x1>
    8001f034:	c789                	beqz	a5,8001f03e <cycle_test_3+0xa6>
    8001f036:	6498                	ld	a4,8(s1)
    8001f038:	4789                	li	a5,2
    8001f03a:	00f70c63          	beq	a4,a5,8001f052 <cycle_test_3+0xba>
    8001f03e:	00013517          	auipc	a0,0x13
    8001f042:	6c250513          	addi	a0,a0,1730 # 80032700 <__func__.0+0x318>
    8001f046:	47e100ef          	jal	8002f4c4 <printf>
    8001f04a:	02900513          	li	a0,41
    8001f04e:	1640f0ef          	jal	8002e1b2 <putchar>
    8001f052:	4529                	li	a0,10
    8001f054:	15e0f0ef          	jal	8002e1b2 <putchar>
    8001f058:	0003d417          	auipc	s0,0x3d
    8001f05c:	fb944403          	lbu	s0,-71(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f060:	00013597          	auipc	a1,0x13
    8001f064:	65858593          	addi	a1,a1,1624 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001f068:	cc11                	beqz	s0,8001f084 <cycle_test_3+0xec>
    8001f06a:	6498                	ld	a4,8(s1)
    8001f06c:	4789                	li	a5,2
    TEST_END(); 
    8001f06e:	00013597          	auipc	a1,0x13
    8001f072:	63a58593          	addi	a1,a1,1594 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001f076:	00f70763          	beq	a4,a5,8001f084 <cycle_test_3+0xec>
    8001f07a:	4401                	li	s0,0
    TEST_END(); 
    8001f07c:	00013597          	auipc	a1,0x13
    8001f080:	63c58593          	addi	a1,a1,1596 # 800326b8 <__func__.0+0x2d0>
    8001f084:	00013517          	auipc	a0,0x13
    8001f088:	6dc50513          	addi	a0,a0,1756 # 80032760 <__func__.0+0x378>
    8001f08c:	438100ef          	jal	8002f4c4 <printf>
    8001f090:	4511                	li	a0,4
    8001f092:	e83e10ef          	jal	80000f14 <goto_priv>
    8001f096:	ee0e20ef          	jal	80001776 <reset_state>
}
    8001f09a:	60e2                	ld	ra,24(sp)
    8001f09c:	8522                	mv	a0,s0
    8001f09e:	6442                	ld	s0,16(sp)
    8001f0a0:	64a2                	ld	s1,8(sp)
    8001f0a2:	6105                	addi	sp,sp,32
    8001f0a4:	8082                	ret

000000008001f0a6 <cycle_test_4>:

bool cycle_test_4() {
    8001f0a6:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f0a8:	00012597          	auipc	a1,0x12
    8001f0ac:	76058593          	addi	a1,a1,1888 # 80031808 <__func__.37>
    8001f0b0:	00013517          	auipc	a0,0x13
    8001f0b4:	61850513          	addi	a0,a0,1560 # 800326c8 <__func__.0+0x2e0>
bool cycle_test_4() {
    8001f0b8:	e406                	sd	ra,8(sp)
    8001f0ba:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f0bc:	408100ef          	jal	8002f4c4 <printf>
    8001f0c0:	4529                	li	a0,10
    8001f0c2:	0f00f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001f0c6:	4511                	li	a0,4
    8001f0c8:	e4de10ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f0cc:	1060e073          	csrsi	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f0d0:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    8001f0d4:	4505                	li	a0,1
    8001f0d6:	e3fe10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f0da:	d3fe10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f0de:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001f0e2:	08c00593          	li	a1,140
    8001f0e6:	0001b617          	auipc	a2,0x1b
    8001f0ea:	dc260613          	addi	a2,a2,-574 # 80039ea8 <__func__.0+0x7ac0>
    8001f0ee:	00013517          	auipc	a0,0x13
    8001f0f2:	5f250513          	addi	a0,a0,1522 # 800326e0 <__func__.0+0x2f8>
    8001f0f6:	3ce100ef          	jal	8002f4c4 <printf>
    8001f0fa:	0003d797          	auipc	a5,0x3d
    8001f0fe:	f177c783          	lbu	a5,-233(a5) # 8005c011 <excpt+0x1>
    8001f102:	00013597          	auipc	a1,0x13
    8001f106:	5a658593          	addi	a1,a1,1446 # 800326a8 <__func__.0+0x2c0>
    8001f10a:	c789                	beqz	a5,8001f114 <cycle_test_4+0x6e>
    8001f10c:	00013597          	auipc	a1,0x13
    8001f110:	5ac58593          	addi	a1,a1,1452 # 800326b8 <__func__.0+0x2d0>
    8001f114:	00013517          	auipc	a0,0x13
    8001f118:	5e450513          	addi	a0,a0,1508 # 800326f8 <__func__.0+0x310>
    8001f11c:	3a8100ef          	jal	8002f4c4 <printf>
    8001f120:	0003d797          	auipc	a5,0x3d
    8001f124:	ef17c783          	lbu	a5,-271(a5) # 8005c011 <excpt+0x1>
    8001f128:	e7a1                	bnez	a5,8001f170 <cycle_test_4+0xca>
    8001f12a:	4529                	li	a0,10
    8001f12c:	0860f0ef          	jal	8002e1b2 <putchar>
    8001f130:	0003d797          	auipc	a5,0x3d
    8001f134:	ee17c783          	lbu	a5,-287(a5) # 8005c011 <excpt+0x1>
    8001f138:	e795                	bnez	a5,8001f164 <cycle_test_4+0xbe>
    8001f13a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f13c:	00013597          	auipc	a1,0x13
    8001f140:	56c58593          	addi	a1,a1,1388 # 800326a8 <__func__.0+0x2c0>
    8001f144:	00013517          	auipc	a0,0x13
    8001f148:	61c50513          	addi	a0,a0,1564 # 80032760 <__func__.0+0x378>
    8001f14c:	378100ef          	jal	8002f4c4 <printf>
    8001f150:	4511                	li	a0,4
    8001f152:	dc3e10ef          	jal	80000f14 <goto_priv>
    8001f156:	e20e20ef          	jal	80001776 <reset_state>
}
    8001f15a:	60a2                	ld	ra,8(sp)
    8001f15c:	8522                	mv	a0,s0
    8001f15e:	6402                	ld	s0,0(sp)
    8001f160:	0141                	addi	sp,sp,16
    8001f162:	8082                	ret
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001f164:	4401                	li	s0,0
    TEST_END(); 
    8001f166:	00013597          	auipc	a1,0x13
    8001f16a:	55258593          	addi	a1,a1,1362 # 800326b8 <__func__.0+0x2d0>
    8001f16e:	bfd9                	j	8001f144 <cycle_test_4+0x9e>
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001f170:	00013517          	auipc	a0,0x13
    8001f174:	59050513          	addi	a0,a0,1424 # 80032700 <__func__.0+0x318>
    8001f178:	34c100ef          	jal	8002f4c4 <printf>
    8001f17c:	02900513          	li	a0,41
    8001f180:	0320f0ef          	jal	8002e1b2 <putchar>
    8001f184:	b75d                	j	8001f12a <cycle_test_4+0x84>

000000008001f186 <cycle_test_5>:

bool cycle_test_5() {
    8001f186:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f188:	00012597          	auipc	a1,0x12
    8001f18c:	69058593          	addi	a1,a1,1680 # 80031818 <__func__.36>
    8001f190:	00013517          	auipc	a0,0x13
    8001f194:	53850513          	addi	a0,a0,1336 # 800326c8 <__func__.0+0x2e0>
bool cycle_test_5() {
    8001f198:	ec06                	sd	ra,24(sp)
    8001f19a:	e822                	sd	s0,16(sp)
    8001f19c:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f19e:	326100ef          	jal	8002f4c4 <printf>
    8001f1a2:	4529                	li	a0,10
    8001f1a4:	00e0f0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001f1a8:	4511                	li	a0,4
    8001f1aa:	d6be10ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f1ae:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f1b2:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f1b6:	4509                	li	a0,2
    8001f1b8:	d5de10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f1bc:	c5de10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f1c0:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f1c4:	08c00593          	li	a1,140
    8001f1c8:	0001b617          	auipc	a2,0x1b
    8001f1cc:	d2860613          	addi	a2,a2,-728 # 80039ef0 <__func__.0+0x7b08>
    8001f1d0:	00013517          	auipc	a0,0x13
    8001f1d4:	51050513          	addi	a0,a0,1296 # 800326e0 <__func__.0+0x2f8>
    8001f1d8:	2ec100ef          	jal	8002f4c4 <printf>
    8001f1dc:	0003d797          	auipc	a5,0x3d
    8001f1e0:	e357c783          	lbu	a5,-459(a5) # 8005c011 <excpt+0x1>
    8001f1e4:	0003d497          	auipc	s1,0x3d
    8001f1e8:	e2c48493          	addi	s1,s1,-468 # 8005c010 <excpt>
    8001f1ec:	00013597          	auipc	a1,0x13
    8001f1f0:	4cc58593          	addi	a1,a1,1228 # 800326b8 <__func__.0+0x2d0>
    8001f1f4:	cf89                	beqz	a5,8001f20e <cycle_test_5+0x88>
    8001f1f6:	6498                	ld	a4,8(s1)
    8001f1f8:	47d9                	li	a5,22
    8001f1fa:	00013597          	auipc	a1,0x13
    8001f1fe:	4ae58593          	addi	a1,a1,1198 # 800326a8 <__func__.0+0x2c0>
    8001f202:	00f70663          	beq	a4,a5,8001f20e <cycle_test_5+0x88>
    8001f206:	00013597          	auipc	a1,0x13
    8001f20a:	4b258593          	addi	a1,a1,1202 # 800326b8 <__func__.0+0x2d0>
    8001f20e:	00013517          	auipc	a0,0x13
    8001f212:	4ea50513          	addi	a0,a0,1258 # 800326f8 <__func__.0+0x310>
    8001f216:	2ae100ef          	jal	8002f4c4 <printf>
    8001f21a:	0003d797          	auipc	a5,0x3d
    8001f21e:	df77c783          	lbu	a5,-521(a5) # 8005c011 <excpt+0x1>
    8001f222:	c789                	beqz	a5,8001f22c <cycle_test_5+0xa6>
    8001f224:	6498                	ld	a4,8(s1)
    8001f226:	47d9                	li	a5,22
    8001f228:	00f70c63          	beq	a4,a5,8001f240 <cycle_test_5+0xba>
    8001f22c:	00013517          	auipc	a0,0x13
    8001f230:	4d450513          	addi	a0,a0,1236 # 80032700 <__func__.0+0x318>
    8001f234:	290100ef          	jal	8002f4c4 <printf>
    8001f238:	02900513          	li	a0,41
    8001f23c:	7770e0ef          	jal	8002e1b2 <putchar>
    8001f240:	4529                	li	a0,10
    8001f242:	7710e0ef          	jal	8002e1b2 <putchar>
    8001f246:	0003d417          	auipc	s0,0x3d
    8001f24a:	dcb44403          	lbu	s0,-565(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001f24e:	00013597          	auipc	a1,0x13
    8001f252:	46a58593          	addi	a1,a1,1130 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f256:	cc11                	beqz	s0,8001f272 <cycle_test_5+0xec>
    8001f258:	6498                	ld	a4,8(s1)
    8001f25a:	47d9                	li	a5,22
    TEST_END(); 
    8001f25c:	00013597          	auipc	a1,0x13
    8001f260:	44c58593          	addi	a1,a1,1100 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f264:	00f70763          	beq	a4,a5,8001f272 <cycle_test_5+0xec>
    8001f268:	4401                	li	s0,0
    TEST_END(); 
    8001f26a:	00013597          	auipc	a1,0x13
    8001f26e:	44e58593          	addi	a1,a1,1102 # 800326b8 <__func__.0+0x2d0>
    8001f272:	00013517          	auipc	a0,0x13
    8001f276:	4ee50513          	addi	a0,a0,1262 # 80032760 <__func__.0+0x378>
    8001f27a:	24a100ef          	jal	8002f4c4 <printf>
    8001f27e:	4511                	li	a0,4
    8001f280:	c95e10ef          	jal	80000f14 <goto_priv>
    8001f284:	cf2e20ef          	jal	80001776 <reset_state>
}
    8001f288:	60e2                	ld	ra,24(sp)
    8001f28a:	8522                	mv	a0,s0
    8001f28c:	6442                	ld	s0,16(sp)
    8001f28e:	64a2                	ld	s1,8(sp)
    8001f290:	6105                	addi	sp,sp,32
    8001f292:	8082                	ret

000000008001f294 <cycle_test_6>:

bool cycle_test_6() {
    8001f294:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f296:	00012597          	auipc	a1,0x12
    8001f29a:	59258593          	addi	a1,a1,1426 # 80031828 <__func__.35>
    8001f29e:	00013517          	auipc	a0,0x13
    8001f2a2:	42a50513          	addi	a0,a0,1066 # 800326c8 <__func__.0+0x2e0>
bool cycle_test_6() {
    8001f2a6:	e406                	sd	ra,8(sp)
    8001f2a8:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f2aa:	21a100ef          	jal	8002f4c4 <printf>
    8001f2ae:	4529                	li	a0,10
    8001f2b0:	7030e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001f2b4:	4511                	li	a0,4
    8001f2b6:	c5fe10ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f2ba:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f2be:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f2c2:	4509                	li	a0,2
    8001f2c4:	c51e10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f2c8:	b51e10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f2cc:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f2d0:	08c00593          	li	a1,140
    8001f2d4:	0001b617          	auipc	a2,0x1b
    8001f2d8:	c7c60613          	addi	a2,a2,-900 # 80039f50 <__func__.0+0x7b68>
    8001f2dc:	00013517          	auipc	a0,0x13
    8001f2e0:	40450513          	addi	a0,a0,1028 # 800326e0 <__func__.0+0x2f8>
    8001f2e4:	1e0100ef          	jal	8002f4c4 <printf>
    8001f2e8:	0003d797          	auipc	a5,0x3d
    8001f2ec:	d297c783          	lbu	a5,-727(a5) # 8005c011 <excpt+0x1>
    8001f2f0:	00013597          	auipc	a1,0x13
    8001f2f4:	3b858593          	addi	a1,a1,952 # 800326a8 <__func__.0+0x2c0>
    8001f2f8:	c789                	beqz	a5,8001f302 <cycle_test_6+0x6e>
    8001f2fa:	00013597          	auipc	a1,0x13
    8001f2fe:	3be58593          	addi	a1,a1,958 # 800326b8 <__func__.0+0x2d0>
    8001f302:	00013517          	auipc	a0,0x13
    8001f306:	3f650513          	addi	a0,a0,1014 # 800326f8 <__func__.0+0x310>
    8001f30a:	1ba100ef          	jal	8002f4c4 <printf>
    8001f30e:	0003d797          	auipc	a5,0x3d
    8001f312:	d037c783          	lbu	a5,-765(a5) # 8005c011 <excpt+0x1>
    8001f316:	e7a1                	bnez	a5,8001f35e <cycle_test_6+0xca>
    8001f318:	4529                	li	a0,10
    8001f31a:	6990e0ef          	jal	8002e1b2 <putchar>
    8001f31e:	0003d797          	auipc	a5,0x3d
    8001f322:	cf37c783          	lbu	a5,-781(a5) # 8005c011 <excpt+0x1>
    8001f326:	e795                	bnez	a5,8001f352 <cycle_test_6+0xbe>
    8001f328:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f32a:	00013597          	auipc	a1,0x13
    8001f32e:	37e58593          	addi	a1,a1,894 # 800326a8 <__func__.0+0x2c0>
    8001f332:	00013517          	auipc	a0,0x13
    8001f336:	42e50513          	addi	a0,a0,1070 # 80032760 <__func__.0+0x378>
    8001f33a:	18a100ef          	jal	8002f4c4 <printf>
    8001f33e:	4511                	li	a0,4
    8001f340:	bd5e10ef          	jal	80000f14 <goto_priv>
    8001f344:	c32e20ef          	jal	80001776 <reset_state>
}
    8001f348:	60a2                	ld	ra,8(sp)
    8001f34a:	8522                	mv	a0,s0
    8001f34c:	6402                	ld	s0,0(sp)
    8001f34e:	0141                	addi	sp,sp,16
    8001f350:	8082                	ret
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f352:	4401                	li	s0,0
    TEST_END(); 
    8001f354:	00013597          	auipc	a1,0x13
    8001f358:	36458593          	addi	a1,a1,868 # 800326b8 <__func__.0+0x2d0>
    8001f35c:	bfd9                	j	8001f332 <cycle_test_6+0x9e>
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f35e:	00013517          	auipc	a0,0x13
    8001f362:	3a250513          	addi	a0,a0,930 # 80032700 <__func__.0+0x318>
    8001f366:	15e100ef          	jal	8002f4c4 <printf>
    8001f36a:	02900513          	li	a0,41
    8001f36e:	6450e0ef          	jal	8002e1b2 <putchar>
    8001f372:	b75d                	j	8001f318 <cycle_test_6+0x84>

000000008001f374 <cycle_test_7>:

bool cycle_test_7() {
    8001f374:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f376:	00012597          	auipc	a1,0x12
    8001f37a:	4c258593          	addi	a1,a1,1218 # 80031838 <__func__.34>
    8001f37e:	00013517          	auipc	a0,0x13
    8001f382:	34a50513          	addi	a0,a0,842 # 800326c8 <__func__.0+0x2e0>
bool cycle_test_7() {
    8001f386:	e406                	sd	ra,8(sp)
    8001f388:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f38a:	13a100ef          	jal	8002f4c4 <printf>
    8001f38e:	4529                	li	a0,10
    8001f390:	6230e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001f394:	4511                	li	a0,4
    8001f396:	b7fe10ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f39a:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f39e:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f3a2:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    8001f3a6:	4501                	li	a0,0
    8001f3a8:	b6de10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f3ac:	a6de10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f3b0:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f3b4:	08c00593          	li	a1,140
    8001f3b8:	0001b617          	auipc	a2,0x1b
    8001f3bc:	be060613          	addi	a2,a2,-1056 # 80039f98 <__func__.0+0x7bb0>
    8001f3c0:	00013517          	auipc	a0,0x13
    8001f3c4:	32050513          	addi	a0,a0,800 # 800326e0 <__func__.0+0x2f8>
    8001f3c8:	0fc100ef          	jal	8002f4c4 <printf>
    8001f3cc:	0003d797          	auipc	a5,0x3d
    8001f3d0:	c457c783          	lbu	a5,-955(a5) # 8005c011 <excpt+0x1>
    8001f3d4:	00013597          	auipc	a1,0x13
    8001f3d8:	2d458593          	addi	a1,a1,724 # 800326a8 <__func__.0+0x2c0>
    8001f3dc:	c789                	beqz	a5,8001f3e6 <cycle_test_7+0x72>
    8001f3de:	00013597          	auipc	a1,0x13
    8001f3e2:	2da58593          	addi	a1,a1,730 # 800326b8 <__func__.0+0x2d0>
    8001f3e6:	00013517          	auipc	a0,0x13
    8001f3ea:	31250513          	addi	a0,a0,786 # 800326f8 <__func__.0+0x310>
    8001f3ee:	0d6100ef          	jal	8002f4c4 <printf>
    8001f3f2:	0003d797          	auipc	a5,0x3d
    8001f3f6:	c1f7c783          	lbu	a5,-993(a5) # 8005c011 <excpt+0x1>
    8001f3fa:	e7a1                	bnez	a5,8001f442 <cycle_test_7+0xce>
    8001f3fc:	4529                	li	a0,10
    8001f3fe:	5b50e0ef          	jal	8002e1b2 <putchar>
    8001f402:	0003d797          	auipc	a5,0x3d
    8001f406:	c0f7c783          	lbu	a5,-1009(a5) # 8005c011 <excpt+0x1>
    8001f40a:	e795                	bnez	a5,8001f436 <cycle_test_7+0xc2>
    8001f40c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f40e:	00013597          	auipc	a1,0x13
    8001f412:	29a58593          	addi	a1,a1,666 # 800326a8 <__func__.0+0x2c0>
    8001f416:	00013517          	auipc	a0,0x13
    8001f41a:	34a50513          	addi	a0,a0,842 # 80032760 <__func__.0+0x378>
    8001f41e:	0a6100ef          	jal	8002f4c4 <printf>
    8001f422:	4511                	li	a0,4
    8001f424:	af1e10ef          	jal	80000f14 <goto_priv>
    8001f428:	b4ee20ef          	jal	80001776 <reset_state>
}
    8001f42c:	60a2                	ld	ra,8(sp)
    8001f42e:	8522                	mv	a0,s0
    8001f430:	6402                	ld	s0,0(sp)
    8001f432:	0141                	addi	sp,sp,16
    8001f434:	8082                	ret
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f436:	4401                	li	s0,0
    TEST_END(); 
    8001f438:	00013597          	auipc	a1,0x13
    8001f43c:	28058593          	addi	a1,a1,640 # 800326b8 <__func__.0+0x2d0>
    8001f440:	bfd9                	j	8001f416 <cycle_test_7+0xa2>
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f442:	00013517          	auipc	a0,0x13
    8001f446:	2be50513          	addi	a0,a0,702 # 80032700 <__func__.0+0x318>
    8001f44a:	07a100ef          	jal	8002f4c4 <printf>
    8001f44e:	02900513          	li	a0,41
    8001f452:	5610e0ef          	jal	8002e1b2 <putchar>
    8001f456:	b75d                	j	8001f3fc <cycle_test_7+0x88>

000000008001f458 <cycle_test_8>:

bool cycle_test_8() {
    8001f458:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f45a:	00012597          	auipc	a1,0x12
    8001f45e:	3ee58593          	addi	a1,a1,1006 # 80031848 <__func__.33>
    8001f462:	00013517          	auipc	a0,0x13
    8001f466:	26650513          	addi	a0,a0,614 # 800326c8 <__func__.0+0x2e0>
bool cycle_test_8() {
    8001f46a:	ec06                	sd	ra,24(sp)
    8001f46c:	e822                	sd	s0,16(sp)
    8001f46e:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f470:	054100ef          	jal	8002f4c4 <printf>
    8001f474:	4529                	li	a0,10
    8001f476:	53d0e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001f47a:	4511                	li	a0,4
    8001f47c:	a99e10ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f480:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f484:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f488:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    8001f48c:	4501                	li	a0,0
    8001f48e:	a87e10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f492:	987e10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f496:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f49a:	08c00593          	li	a1,140
    8001f49e:	0001b617          	auipc	a2,0x1b
    8001f4a2:	b5260613          	addi	a2,a2,-1198 # 80039ff0 <__func__.0+0x7c08>
    8001f4a6:	00013517          	auipc	a0,0x13
    8001f4aa:	23a50513          	addi	a0,a0,570 # 800326e0 <__func__.0+0x2f8>
    8001f4ae:	016100ef          	jal	8002f4c4 <printf>
    8001f4b2:	0003d797          	auipc	a5,0x3d
    8001f4b6:	b5f7c783          	lbu	a5,-1185(a5) # 8005c011 <excpt+0x1>
    8001f4ba:	0003d497          	auipc	s1,0x3d
    8001f4be:	b5648493          	addi	s1,s1,-1194 # 8005c010 <excpt>
    8001f4c2:	00013597          	auipc	a1,0x13
    8001f4c6:	1f658593          	addi	a1,a1,502 # 800326b8 <__func__.0+0x2d0>
    8001f4ca:	cf89                	beqz	a5,8001f4e4 <cycle_test_8+0x8c>
    8001f4cc:	6498                	ld	a4,8(s1)
    8001f4ce:	47d9                	li	a5,22
    8001f4d0:	00013597          	auipc	a1,0x13
    8001f4d4:	1d858593          	addi	a1,a1,472 # 800326a8 <__func__.0+0x2c0>
    8001f4d8:	00f70663          	beq	a4,a5,8001f4e4 <cycle_test_8+0x8c>
    8001f4dc:	00013597          	auipc	a1,0x13
    8001f4e0:	1dc58593          	addi	a1,a1,476 # 800326b8 <__func__.0+0x2d0>
    8001f4e4:	00013517          	auipc	a0,0x13
    8001f4e8:	21450513          	addi	a0,a0,532 # 800326f8 <__func__.0+0x310>
    8001f4ec:	7d90f0ef          	jal	8002f4c4 <printf>
    8001f4f0:	0003d797          	auipc	a5,0x3d
    8001f4f4:	b217c783          	lbu	a5,-1247(a5) # 8005c011 <excpt+0x1>
    8001f4f8:	c789                	beqz	a5,8001f502 <cycle_test_8+0xaa>
    8001f4fa:	6498                	ld	a4,8(s1)
    8001f4fc:	47d9                	li	a5,22
    8001f4fe:	00f70c63          	beq	a4,a5,8001f516 <cycle_test_8+0xbe>
    8001f502:	00013517          	auipc	a0,0x13
    8001f506:	1fe50513          	addi	a0,a0,510 # 80032700 <__func__.0+0x318>
    8001f50a:	7bb0f0ef          	jal	8002f4c4 <printf>
    8001f50e:	02900513          	li	a0,41
    8001f512:	4a10e0ef          	jal	8002e1b2 <putchar>
    8001f516:	4529                	li	a0,10
    8001f518:	49b0e0ef          	jal	8002e1b2 <putchar>
    8001f51c:	0003d417          	auipc	s0,0x3d
    8001f520:	af544403          	lbu	s0,-1291(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001f524:	00013597          	auipc	a1,0x13
    8001f528:	19458593          	addi	a1,a1,404 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f52c:	cc11                	beqz	s0,8001f548 <cycle_test_8+0xf0>
    8001f52e:	6498                	ld	a4,8(s1)
    8001f530:	47d9                	li	a5,22
    TEST_END(); 
    8001f532:	00013597          	auipc	a1,0x13
    8001f536:	17658593          	addi	a1,a1,374 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f53a:	00f70763          	beq	a4,a5,8001f548 <cycle_test_8+0xf0>
    8001f53e:	4401                	li	s0,0
    TEST_END(); 
    8001f540:	00013597          	auipc	a1,0x13
    8001f544:	17858593          	addi	a1,a1,376 # 800326b8 <__func__.0+0x2d0>
    8001f548:	00013517          	auipc	a0,0x13
    8001f54c:	21850513          	addi	a0,a0,536 # 80032760 <__func__.0+0x378>
    8001f550:	7750f0ef          	jal	8002f4c4 <printf>
    8001f554:	4511                	li	a0,4
    8001f556:	9bfe10ef          	jal	80000f14 <goto_priv>
    8001f55a:	a1ce20ef          	jal	80001776 <reset_state>
}
    8001f55e:	60e2                	ld	ra,24(sp)
    8001f560:	8522                	mv	a0,s0
    8001f562:	6442                	ld	s0,16(sp)
    8001f564:	64a2                	ld	s1,8(sp)
    8001f566:	6105                	addi	sp,sp,32
    8001f568:	8082                	ret

000000008001f56a <cycle_test_9>:

bool cycle_test_9() {
    8001f56a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f56c:	00012597          	auipc	a1,0x12
    8001f570:	2ec58593          	addi	a1,a1,748 # 80031858 <__func__.32>
    8001f574:	00013517          	auipc	a0,0x13
    8001f578:	15450513          	addi	a0,a0,340 # 800326c8 <__func__.0+0x2e0>
bool cycle_test_9() {
    8001f57c:	ec06                	sd	ra,24(sp)
    8001f57e:	e822                	sd	s0,16(sp)
    8001f580:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f582:	7430f0ef          	jal	8002f4c4 <printf>
    8001f586:	4529                	li	a0,10
    8001f588:	42b0e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001f58c:	4511                	li	a0,4
    8001f58e:	987e10ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f592:	3060e073          	csrsi	mcounteren,1
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f596:	1060f073          	csrci	scounteren,1

    goto_priv(PRIV_HU);
    8001f59a:	4505                	li	a0,1
    8001f59c:	979e10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f5a0:	879e10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f5a4:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f5a8:	08c00593          	li	a1,140
    8001f5ac:	0001b617          	auipc	a2,0x1b
    8001f5b0:	ab460613          	addi	a2,a2,-1356 # 8003a060 <__func__.0+0x7c78>
    8001f5b4:	00013517          	auipc	a0,0x13
    8001f5b8:	12c50513          	addi	a0,a0,300 # 800326e0 <__func__.0+0x2f8>
    8001f5bc:	7090f0ef          	jal	8002f4c4 <printf>
    8001f5c0:	0003d797          	auipc	a5,0x3d
    8001f5c4:	a517c783          	lbu	a5,-1455(a5) # 8005c011 <excpt+0x1>
    8001f5c8:	0003d497          	auipc	s1,0x3d
    8001f5cc:	a4848493          	addi	s1,s1,-1464 # 8005c010 <excpt>
    8001f5d0:	00013597          	auipc	a1,0x13
    8001f5d4:	0e858593          	addi	a1,a1,232 # 800326b8 <__func__.0+0x2d0>
    8001f5d8:	cf89                	beqz	a5,8001f5f2 <cycle_test_9+0x88>
    8001f5da:	6498                	ld	a4,8(s1)
    8001f5dc:	4789                	li	a5,2
    8001f5de:	00013597          	auipc	a1,0x13
    8001f5e2:	0ca58593          	addi	a1,a1,202 # 800326a8 <__func__.0+0x2c0>
    8001f5e6:	00f70663          	beq	a4,a5,8001f5f2 <cycle_test_9+0x88>
    8001f5ea:	00013597          	auipc	a1,0x13
    8001f5ee:	0ce58593          	addi	a1,a1,206 # 800326b8 <__func__.0+0x2d0>
    8001f5f2:	00013517          	auipc	a0,0x13
    8001f5f6:	10650513          	addi	a0,a0,262 # 800326f8 <__func__.0+0x310>
    8001f5fa:	6cb0f0ef          	jal	8002f4c4 <printf>
    8001f5fe:	0003d797          	auipc	a5,0x3d
    8001f602:	a137c783          	lbu	a5,-1517(a5) # 8005c011 <excpt+0x1>
    8001f606:	c789                	beqz	a5,8001f610 <cycle_test_9+0xa6>
    8001f608:	6498                	ld	a4,8(s1)
    8001f60a:	4789                	li	a5,2
    8001f60c:	00f70c63          	beq	a4,a5,8001f624 <cycle_test_9+0xba>
    8001f610:	00013517          	auipc	a0,0x13
    8001f614:	0f050513          	addi	a0,a0,240 # 80032700 <__func__.0+0x318>
    8001f618:	6ad0f0ef          	jal	8002f4c4 <printf>
    8001f61c:	02900513          	li	a0,41
    8001f620:	3930e0ef          	jal	8002e1b2 <putchar>
    8001f624:	4529                	li	a0,10
    8001f626:	38d0e0ef          	jal	8002e1b2 <putchar>
    8001f62a:	0003d417          	auipc	s0,0x3d
    8001f62e:	9e744403          	lbu	s0,-1561(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f632:	00013597          	auipc	a1,0x13
    8001f636:	08658593          	addi	a1,a1,134 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f63a:	cc11                	beqz	s0,8001f656 <cycle_test_9+0xec>
    8001f63c:	6498                	ld	a4,8(s1)
    8001f63e:	4789                	li	a5,2
    TEST_END(); 
    8001f640:	00013597          	auipc	a1,0x13
    8001f644:	06858593          	addi	a1,a1,104 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f648:	00f70763          	beq	a4,a5,8001f656 <cycle_test_9+0xec>
    8001f64c:	4401                	li	s0,0
    TEST_END(); 
    8001f64e:	00013597          	auipc	a1,0x13
    8001f652:	06a58593          	addi	a1,a1,106 # 800326b8 <__func__.0+0x2d0>
    8001f656:	00013517          	auipc	a0,0x13
    8001f65a:	10a50513          	addi	a0,a0,266 # 80032760 <__func__.0+0x378>
    8001f65e:	6670f0ef          	jal	8002f4c4 <printf>
    8001f662:	4511                	li	a0,4
    8001f664:	8b1e10ef          	jal	80000f14 <goto_priv>
    8001f668:	90ee20ef          	jal	80001776 <reset_state>
}
    8001f66c:	60e2                	ld	ra,24(sp)
    8001f66e:	8522                	mv	a0,s0
    8001f670:	6442                	ld	s0,16(sp)
    8001f672:	64a2                	ld	s1,8(sp)
    8001f674:	6105                	addi	sp,sp,32
    8001f676:	8082                	ret

000000008001f678 <cycle_test_10>:

bool cycle_test_10() {
    8001f678:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f67a:	00012597          	auipc	a1,0x12
    8001f67e:	1ee58593          	addi	a1,a1,494 # 80031868 <__func__.31>
    8001f682:	00013517          	auipc	a0,0x13
    8001f686:	04650513          	addi	a0,a0,70 # 800326c8 <__func__.0+0x2e0>
bool cycle_test_10() {
    8001f68a:	e406                	sd	ra,8(sp)
    8001f68c:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f68e:	6370f0ef          	jal	8002f4c4 <printf>
    8001f692:	4529                	li	a0,10
    8001f694:	31f0e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001f698:	4511                	li	a0,4
    8001f69a:	87be10ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f69e:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f6a2:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f6a6:	4509                	li	a0,2
    8001f6a8:	86de10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f6ac:	f6ce10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f6b0:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f6b4:	08c00593          	li	a1,140
    8001f6b8:	0001b617          	auipc	a2,0x1b
    8001f6bc:	a0860613          	addi	a2,a2,-1528 # 8003a0c0 <__func__.0+0x7cd8>
    8001f6c0:	00013517          	auipc	a0,0x13
    8001f6c4:	02050513          	addi	a0,a0,32 # 800326e0 <__func__.0+0x2f8>
    8001f6c8:	5fd0f0ef          	jal	8002f4c4 <printf>
    8001f6cc:	0003d797          	auipc	a5,0x3d
    8001f6d0:	9457c783          	lbu	a5,-1723(a5) # 8005c011 <excpt+0x1>
    8001f6d4:	00013597          	auipc	a1,0x13
    8001f6d8:	fd458593          	addi	a1,a1,-44 # 800326a8 <__func__.0+0x2c0>
    8001f6dc:	c789                	beqz	a5,8001f6e6 <cycle_test_10+0x6e>
    8001f6de:	00013597          	auipc	a1,0x13
    8001f6e2:	fda58593          	addi	a1,a1,-38 # 800326b8 <__func__.0+0x2d0>
    8001f6e6:	00013517          	auipc	a0,0x13
    8001f6ea:	01250513          	addi	a0,a0,18 # 800326f8 <__func__.0+0x310>
    8001f6ee:	5d70f0ef          	jal	8002f4c4 <printf>
    8001f6f2:	0003d797          	auipc	a5,0x3d
    8001f6f6:	91f7c783          	lbu	a5,-1761(a5) # 8005c011 <excpt+0x1>
    8001f6fa:	e7a1                	bnez	a5,8001f742 <cycle_test_10+0xca>
    8001f6fc:	4529                	li	a0,10
    8001f6fe:	2b50e0ef          	jal	8002e1b2 <putchar>
    8001f702:	0003d797          	auipc	a5,0x3d
    8001f706:	90f7c783          	lbu	a5,-1777(a5) # 8005c011 <excpt+0x1>
    8001f70a:	e795                	bnez	a5,8001f736 <cycle_test_10+0xbe>
    8001f70c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f70e:	00013597          	auipc	a1,0x13
    8001f712:	f9a58593          	addi	a1,a1,-102 # 800326a8 <__func__.0+0x2c0>
    8001f716:	00013517          	auipc	a0,0x13
    8001f71a:	04a50513          	addi	a0,a0,74 # 80032760 <__func__.0+0x378>
    8001f71e:	5a70f0ef          	jal	8002f4c4 <printf>
    8001f722:	4511                	li	a0,4
    8001f724:	ff0e10ef          	jal	80000f14 <goto_priv>
    8001f728:	84ee20ef          	jal	80001776 <reset_state>
}
    8001f72c:	60a2                	ld	ra,8(sp)
    8001f72e:	8522                	mv	a0,s0
    8001f730:	6402                	ld	s0,0(sp)
    8001f732:	0141                	addi	sp,sp,16
    8001f734:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f736:	4401                	li	s0,0
    TEST_END(); 
    8001f738:	00013597          	auipc	a1,0x13
    8001f73c:	f8058593          	addi	a1,a1,-128 # 800326b8 <__func__.0+0x2d0>
    8001f740:	bfd9                	j	8001f716 <cycle_test_10+0x9e>
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f742:	00013517          	auipc	a0,0x13
    8001f746:	fbe50513          	addi	a0,a0,-66 # 80032700 <__func__.0+0x318>
    8001f74a:	57b0f0ef          	jal	8002f4c4 <printf>
    8001f74e:	02900513          	li	a0,41
    8001f752:	2610e0ef          	jal	8002e1b2 <putchar>
    8001f756:	b75d                	j	8001f6fc <cycle_test_10+0x84>

000000008001f758 <instret_test_1>:


bool instret_test_1() {
    8001f758:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f75a:	00012597          	auipc	a1,0x12
    8001f75e:	11e58593          	addi	a1,a1,286 # 80031878 <__func__.30>
    8001f762:	00013517          	auipc	a0,0x13
    8001f766:	f6650513          	addi	a0,a0,-154 # 800326c8 <__func__.0+0x2e0>
bool instret_test_1() {
    8001f76a:	ec06                	sd	ra,24(sp)
    8001f76c:	e822                	sd	s0,16(sp)
    8001f76e:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f770:	5550f0ef          	jal	8002f4c4 <printf>
    8001f774:	4529                	li	a0,10
    8001f776:	23d0e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001f77a:	4511                	li	a0,4
    8001f77c:	f98e10ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8001f780:	30627073          	csrci	mcounteren,4

    goto_priv(PRIV_VS);
    8001f784:	4509                	li	a0,2
    8001f786:	f8ee10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f78a:	e8ee10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f78e:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f792:	08c00593          	li	a1,140
    8001f796:	0001b617          	auipc	a2,0x1b
    8001f79a:	97a60613          	addi	a2,a2,-1670 # 8003a110 <__func__.0+0x7d28>
    8001f79e:	00013517          	auipc	a0,0x13
    8001f7a2:	f4250513          	addi	a0,a0,-190 # 800326e0 <__func__.0+0x2f8>
    8001f7a6:	51f0f0ef          	jal	8002f4c4 <printf>
    8001f7aa:	0003d797          	auipc	a5,0x3d
    8001f7ae:	8677c783          	lbu	a5,-1945(a5) # 8005c011 <excpt+0x1>
    8001f7b2:	0003d497          	auipc	s1,0x3d
    8001f7b6:	85e48493          	addi	s1,s1,-1954 # 8005c010 <excpt>
    8001f7ba:	00013597          	auipc	a1,0x13
    8001f7be:	efe58593          	addi	a1,a1,-258 # 800326b8 <__func__.0+0x2d0>
    8001f7c2:	cf89                	beqz	a5,8001f7dc <instret_test_1+0x84>
    8001f7c4:	6498                	ld	a4,8(s1)
    8001f7c6:	4789                	li	a5,2
    8001f7c8:	00013597          	auipc	a1,0x13
    8001f7cc:	ee058593          	addi	a1,a1,-288 # 800326a8 <__func__.0+0x2c0>
    8001f7d0:	00f70663          	beq	a4,a5,8001f7dc <instret_test_1+0x84>
    8001f7d4:	00013597          	auipc	a1,0x13
    8001f7d8:	ee458593          	addi	a1,a1,-284 # 800326b8 <__func__.0+0x2d0>
    8001f7dc:	00013517          	auipc	a0,0x13
    8001f7e0:	f1c50513          	addi	a0,a0,-228 # 800326f8 <__func__.0+0x310>
    8001f7e4:	4e10f0ef          	jal	8002f4c4 <printf>
    8001f7e8:	0003d797          	auipc	a5,0x3d
    8001f7ec:	8297c783          	lbu	a5,-2007(a5) # 8005c011 <excpt+0x1>
    8001f7f0:	c789                	beqz	a5,8001f7fa <instret_test_1+0xa2>
    8001f7f2:	6498                	ld	a4,8(s1)
    8001f7f4:	4789                	li	a5,2
    8001f7f6:	00f70c63          	beq	a4,a5,8001f80e <instret_test_1+0xb6>
    8001f7fa:	00013517          	auipc	a0,0x13
    8001f7fe:	f0650513          	addi	a0,a0,-250 # 80032700 <__func__.0+0x318>
    8001f802:	4c30f0ef          	jal	8002f4c4 <printf>
    8001f806:	02900513          	li	a0,41
    8001f80a:	1a90e0ef          	jal	8002e1b2 <putchar>
    8001f80e:	4529                	li	a0,10
    8001f810:	1a30e0ef          	jal	8002e1b2 <putchar>
    8001f814:	0003c797          	auipc	a5,0x3c
    8001f818:	7fd7c783          	lbu	a5,2045(a5) # 8005c011 <excpt+0x1>
    8001f81c:	4401                	li	s0,0
    8001f81e:	c789                	beqz	a5,8001f828 <instret_test_1+0xd0>
    8001f820:	6480                	ld	s0,8(s1)
    8001f822:	1479                	addi	s0,s0,-2
    8001f824:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001f828:	450d                	li	a0,3
    8001f82a:	eeae10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f82e:	deae10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f832:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f836:	08c00593          	li	a1,140
    8001f83a:	0001b617          	auipc	a2,0x1b
    8001f83e:	92660613          	addi	a2,a2,-1754 # 8003a160 <__func__.0+0x7d78>
    8001f842:	00013517          	auipc	a0,0x13
    8001f846:	e9e50513          	addi	a0,a0,-354 # 800326e0 <__func__.0+0x2f8>
    8001f84a:	47b0f0ef          	jal	8002f4c4 <printf>
    8001f84e:	0003c797          	auipc	a5,0x3c
    8001f852:	7c37c783          	lbu	a5,1987(a5) # 8005c011 <excpt+0x1>
    8001f856:	00013597          	auipc	a1,0x13
    8001f85a:	e6258593          	addi	a1,a1,-414 # 800326b8 <__func__.0+0x2d0>
    8001f85e:	cf89                	beqz	a5,8001f878 <instret_test_1+0x120>
    8001f860:	6498                	ld	a4,8(s1)
    8001f862:	4789                	li	a5,2
    8001f864:	00013597          	auipc	a1,0x13
    8001f868:	e4458593          	addi	a1,a1,-444 # 800326a8 <__func__.0+0x2c0>
    8001f86c:	00f70663          	beq	a4,a5,8001f878 <instret_test_1+0x120>
    8001f870:	00013597          	auipc	a1,0x13
    8001f874:	e4858593          	addi	a1,a1,-440 # 800326b8 <__func__.0+0x2d0>
    8001f878:	00013517          	auipc	a0,0x13
    8001f87c:	e8050513          	addi	a0,a0,-384 # 800326f8 <__func__.0+0x310>
    8001f880:	4450f0ef          	jal	8002f4c4 <printf>
    8001f884:	0003c797          	auipc	a5,0x3c
    8001f888:	78d7c783          	lbu	a5,1933(a5) # 8005c011 <excpt+0x1>
    8001f88c:	c789                	beqz	a5,8001f896 <instret_test_1+0x13e>
    8001f88e:	6498                	ld	a4,8(s1)
    8001f890:	4789                	li	a5,2
    8001f892:	00f70c63          	beq	a4,a5,8001f8aa <instret_test_1+0x152>
    8001f896:	00013517          	auipc	a0,0x13
    8001f89a:	e6a50513          	addi	a0,a0,-406 # 80032700 <__func__.0+0x318>
    8001f89e:	4270f0ef          	jal	8002f4c4 <printf>
    8001f8a2:	02900513          	li	a0,41
    8001f8a6:	10d0e0ef          	jal	8002e1b2 <putchar>
    8001f8aa:	4529                	li	a0,10
    8001f8ac:	1070e0ef          	jal	8002e1b2 <putchar>
    8001f8b0:	c801                	beqz	s0,8001f8c0 <instret_test_1+0x168>
    8001f8b2:	0003c797          	auipc	a5,0x3c
    8001f8b6:	75f7c783          	lbu	a5,1887(a5) # 8005c011 <excpt+0x1>
    8001f8ba:	4401                	li	s0,0
    8001f8bc:	16079f63          	bnez	a5,8001fa3a <instret_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001f8c0:	4501                	li	a0,0
    8001f8c2:	e52e10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f8c6:	d52e10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f8ca:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f8ce:	08c00593          	li	a1,140
    8001f8d2:	0001b617          	auipc	a2,0x1b
    8001f8d6:	8de60613          	addi	a2,a2,-1826 # 8003a1b0 <__func__.0+0x7dc8>
    8001f8da:	00013517          	auipc	a0,0x13
    8001f8de:	e0650513          	addi	a0,a0,-506 # 800326e0 <__func__.0+0x2f8>
    8001f8e2:	3e30f0ef          	jal	8002f4c4 <printf>
    8001f8e6:	0003c797          	auipc	a5,0x3c
    8001f8ea:	72b7c783          	lbu	a5,1835(a5) # 8005c011 <excpt+0x1>
    8001f8ee:	00013597          	auipc	a1,0x13
    8001f8f2:	dca58593          	addi	a1,a1,-566 # 800326b8 <__func__.0+0x2d0>
    8001f8f6:	cf89                	beqz	a5,8001f910 <instret_test_1+0x1b8>
    8001f8f8:	6498                	ld	a4,8(s1)
    8001f8fa:	4789                	li	a5,2
    8001f8fc:	00013597          	auipc	a1,0x13
    8001f900:	dac58593          	addi	a1,a1,-596 # 800326a8 <__func__.0+0x2c0>
    8001f904:	00f70663          	beq	a4,a5,8001f910 <instret_test_1+0x1b8>
    8001f908:	00013597          	auipc	a1,0x13
    8001f90c:	db058593          	addi	a1,a1,-592 # 800326b8 <__func__.0+0x2d0>
    8001f910:	00013517          	auipc	a0,0x13
    8001f914:	de850513          	addi	a0,a0,-536 # 800326f8 <__func__.0+0x310>
    8001f918:	3ad0f0ef          	jal	8002f4c4 <printf>
    8001f91c:	0003c797          	auipc	a5,0x3c
    8001f920:	6f57c783          	lbu	a5,1781(a5) # 8005c011 <excpt+0x1>
    8001f924:	c789                	beqz	a5,8001f92e <instret_test_1+0x1d6>
    8001f926:	6498                	ld	a4,8(s1)
    8001f928:	4789                	li	a5,2
    8001f92a:	00f70c63          	beq	a4,a5,8001f942 <instret_test_1+0x1ea>
    8001f92e:	00013517          	auipc	a0,0x13
    8001f932:	dd250513          	addi	a0,a0,-558 # 80032700 <__func__.0+0x318>
    8001f936:	38f0f0ef          	jal	8002f4c4 <printf>
    8001f93a:	02900513          	li	a0,41
    8001f93e:	0750e0ef          	jal	8002e1b2 <putchar>
    8001f942:	4529                	li	a0,10
    8001f944:	06f0e0ef          	jal	8002e1b2 <putchar>
    8001f948:	c801                	beqz	s0,8001f958 <instret_test_1+0x200>
    8001f94a:	0003c797          	auipc	a5,0x3c
    8001f94e:	6c77c783          	lbu	a5,1735(a5) # 8005c011 <excpt+0x1>
    8001f952:	4401                	li	s0,0
    8001f954:	0c079e63          	bnez	a5,8001fa30 <instret_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001f958:	4505                	li	a0,1
    8001f95a:	dbae10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f95e:	cbae10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f962:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f966:	08c00593          	li	a1,140
    8001f96a:	0001b617          	auipc	a2,0x1b
    8001f96e:	89660613          	addi	a2,a2,-1898 # 8003a200 <__func__.0+0x7e18>
    8001f972:	00013517          	auipc	a0,0x13
    8001f976:	d6e50513          	addi	a0,a0,-658 # 800326e0 <__func__.0+0x2f8>
    8001f97a:	34b0f0ef          	jal	8002f4c4 <printf>
    8001f97e:	0003c797          	auipc	a5,0x3c
    8001f982:	6937c783          	lbu	a5,1683(a5) # 8005c011 <excpt+0x1>
    8001f986:	00013597          	auipc	a1,0x13
    8001f98a:	d3258593          	addi	a1,a1,-718 # 800326b8 <__func__.0+0x2d0>
    8001f98e:	cf89                	beqz	a5,8001f9a8 <instret_test_1+0x250>
    8001f990:	6498                	ld	a4,8(s1)
    8001f992:	4789                	li	a5,2
    8001f994:	00013597          	auipc	a1,0x13
    8001f998:	d1458593          	addi	a1,a1,-748 # 800326a8 <__func__.0+0x2c0>
    8001f99c:	00f70663          	beq	a4,a5,8001f9a8 <instret_test_1+0x250>
    8001f9a0:	00013597          	auipc	a1,0x13
    8001f9a4:	d1858593          	addi	a1,a1,-744 # 800326b8 <__func__.0+0x2d0>
    8001f9a8:	00013517          	auipc	a0,0x13
    8001f9ac:	d5050513          	addi	a0,a0,-688 # 800326f8 <__func__.0+0x310>
    8001f9b0:	3150f0ef          	jal	8002f4c4 <printf>
    8001f9b4:	0003c797          	auipc	a5,0x3c
    8001f9b8:	65d7c783          	lbu	a5,1629(a5) # 8005c011 <excpt+0x1>
    8001f9bc:	c789                	beqz	a5,8001f9c6 <instret_test_1+0x26e>
    8001f9be:	6498                	ld	a4,8(s1)
    8001f9c0:	4789                	li	a5,2
    8001f9c2:	00f70c63          	beq	a4,a5,8001f9da <instret_test_1+0x282>
    8001f9c6:	00013517          	auipc	a0,0x13
    8001f9ca:	d3a50513          	addi	a0,a0,-710 # 80032700 <__func__.0+0x318>
    8001f9ce:	2f70f0ef          	jal	8002f4c4 <printf>
    8001f9d2:	02900513          	li	a0,41
    8001f9d6:	7dc0e0ef          	jal	8002e1b2 <putchar>
    8001f9da:	4529                	li	a0,10
    8001f9dc:	7d60e0ef          	jal	8002e1b2 <putchar>
    8001f9e0:	c015                	beqz	s0,8001fa04 <instret_test_1+0x2ac>
    8001f9e2:	0003c417          	auipc	s0,0x3c
    8001f9e6:	62f44403          	lbu	s0,1583(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f9ea:	00013597          	auipc	a1,0x13
    8001f9ee:	cce58593          	addi	a1,a1,-818 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f9f2:	cc11                	beqz	s0,8001fa0e <instret_test_1+0x2b6>
    8001f9f4:	6498                	ld	a4,8(s1)
    8001f9f6:	4789                	li	a5,2
    TEST_END(); 
    8001f9f8:	00013597          	auipc	a1,0x13
    8001f9fc:	cb058593          	addi	a1,a1,-848 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001fa00:	00f70763          	beq	a4,a5,8001fa0e <instret_test_1+0x2b6>
    8001fa04:	4401                	li	s0,0
    TEST_END(); 
    8001fa06:	00013597          	auipc	a1,0x13
    8001fa0a:	cb258593          	addi	a1,a1,-846 # 800326b8 <__func__.0+0x2d0>
    8001fa0e:	00013517          	auipc	a0,0x13
    8001fa12:	d5250513          	addi	a0,a0,-686 # 80032760 <__func__.0+0x378>
    8001fa16:	2af0f0ef          	jal	8002f4c4 <printf>
    8001fa1a:	4511                	li	a0,4
    8001fa1c:	cf8e10ef          	jal	80000f14 <goto_priv>
    8001fa20:	d57e10ef          	jal	80001776 <reset_state>
}
    8001fa24:	60e2                	ld	ra,24(sp)
    8001fa26:	8522                	mv	a0,s0
    8001fa28:	6442                	ld	s0,16(sp)
    8001fa2a:	64a2                	ld	s1,8(sp)
    8001fa2c:	6105                	addi	sp,sp,32
    8001fa2e:	8082                	ret
    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001fa30:	6480                	ld	s0,8(s1)
    8001fa32:	1479                	addi	s0,s0,-2
    8001fa34:	00143413          	seqz	s0,s0
    8001fa38:	b705                	j	8001f958 <instret_test_1+0x200>
    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001fa3a:	6480                	ld	s0,8(s1)
    8001fa3c:	1479                	addi	s0,s0,-2
    8001fa3e:	00143413          	seqz	s0,s0
    8001fa42:	bdbd                	j	8001f8c0 <instret_test_1+0x168>

000000008001fa44 <instret_test_2>:

bool instret_test_2() {
    8001fa44:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fa46:	00012597          	auipc	a1,0x12
    8001fa4a:	e4258593          	addi	a1,a1,-446 # 80031888 <__func__.29>
    8001fa4e:	00013517          	auipc	a0,0x13
    8001fa52:	c7a50513          	addi	a0,a0,-902 # 800326c8 <__func__.0+0x2e0>
bool instret_test_2() {
    8001fa56:	e406                	sd	ra,8(sp)
    8001fa58:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fa5a:	26b0f0ef          	jal	8002f4c4 <printf>
    8001fa5e:	4529                	li	a0,10
    8001fa60:	7520e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001fa64:	4511                	li	a0,4
    8001fa66:	caee10ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8001fa6a:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HS);
    8001fa6e:	450d                	li	a0,3
    8001fa70:	ca4e10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fa74:	ba4e10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fa78:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001fa7c:	08c00593          	li	a1,140
    8001fa80:	0001a617          	auipc	a2,0x1a
    8001fa84:	7d060613          	addi	a2,a2,2000 # 8003a250 <__func__.0+0x7e68>
    8001fa88:	00013517          	auipc	a0,0x13
    8001fa8c:	c5850513          	addi	a0,a0,-936 # 800326e0 <__func__.0+0x2f8>
    8001fa90:	2350f0ef          	jal	8002f4c4 <printf>
    8001fa94:	0003c797          	auipc	a5,0x3c
    8001fa98:	57d7c783          	lbu	a5,1405(a5) # 8005c011 <excpt+0x1>
    8001fa9c:	00013597          	auipc	a1,0x13
    8001faa0:	c0c58593          	addi	a1,a1,-1012 # 800326a8 <__func__.0+0x2c0>
    8001faa4:	c789                	beqz	a5,8001faae <instret_test_2+0x6a>
    8001faa6:	00013597          	auipc	a1,0x13
    8001faaa:	c1258593          	addi	a1,a1,-1006 # 800326b8 <__func__.0+0x2d0>
    8001faae:	00013517          	auipc	a0,0x13
    8001fab2:	c4a50513          	addi	a0,a0,-950 # 800326f8 <__func__.0+0x310>
    8001fab6:	20f0f0ef          	jal	8002f4c4 <printf>
    8001faba:	0003c797          	auipc	a5,0x3c
    8001fabe:	5577c783          	lbu	a5,1367(a5) # 8005c011 <excpt+0x1>
    8001fac2:	e7a1                	bnez	a5,8001fb0a <instret_test_2+0xc6>
    8001fac4:	4529                	li	a0,10
    8001fac6:	6ec0e0ef          	jal	8002e1b2 <putchar>
    8001faca:	0003c797          	auipc	a5,0x3c
    8001face:	5477c783          	lbu	a5,1351(a5) # 8005c011 <excpt+0x1>
    8001fad2:	e795                	bnez	a5,8001fafe <instret_test_2+0xba>
    8001fad4:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001fad6:	00013597          	auipc	a1,0x13
    8001fada:	bd258593          	addi	a1,a1,-1070 # 800326a8 <__func__.0+0x2c0>
    8001fade:	00013517          	auipc	a0,0x13
    8001fae2:	c8250513          	addi	a0,a0,-894 # 80032760 <__func__.0+0x378>
    8001fae6:	1df0f0ef          	jal	8002f4c4 <printf>
    8001faea:	4511                	li	a0,4
    8001faec:	c28e10ef          	jal	80000f14 <goto_priv>
    8001faf0:	c87e10ef          	jal	80001776 <reset_state>
}
    8001faf4:	60a2                	ld	ra,8(sp)
    8001faf6:	8522                	mv	a0,s0
    8001faf8:	6402                	ld	s0,0(sp)
    8001fafa:	0141                	addi	sp,sp,16
    8001fafc:	8082                	ret
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001fafe:	4401                	li	s0,0
    TEST_END(); 
    8001fb00:	00013597          	auipc	a1,0x13
    8001fb04:	bb858593          	addi	a1,a1,-1096 # 800326b8 <__func__.0+0x2d0>
    8001fb08:	bfd9                	j	8001fade <instret_test_2+0x9a>
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001fb0a:	00013517          	auipc	a0,0x13
    8001fb0e:	bf650513          	addi	a0,a0,-1034 # 80032700 <__func__.0+0x318>
    8001fb12:	1b30f0ef          	jal	8002f4c4 <printf>
    8001fb16:	02900513          	li	a0,41
    8001fb1a:	6980e0ef          	jal	8002e1b2 <putchar>
    8001fb1e:	b75d                	j	8001fac4 <instret_test_2+0x80>

000000008001fb20 <instret_test_3>:

bool instret_test_3() {
    8001fb20:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001fb22:	00012597          	auipc	a1,0x12
    8001fb26:	d7658593          	addi	a1,a1,-650 # 80031898 <__func__.28>
    8001fb2a:	00013517          	auipc	a0,0x13
    8001fb2e:	b9e50513          	addi	a0,a0,-1122 # 800326c8 <__func__.0+0x2e0>
bool instret_test_3() {
    8001fb32:	ec06                	sd	ra,24(sp)
    8001fb34:	e822                	sd	s0,16(sp)
    8001fb36:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fb38:	18d0f0ef          	jal	8002f4c4 <printf>
    8001fb3c:	4529                	li	a0,10
    8001fb3e:	6740e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001fb42:	4511                	li	a0,4
    8001fb44:	bd0e10ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fb48:	10627073          	csrci	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fb4c:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8001fb50:	4505                	li	a0,1
    8001fb52:	bc2e10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fb56:	ac2e10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fb5a:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fb5e:	08c00593          	li	a1,140
    8001fb62:	0001a617          	auipc	a2,0x1a
    8001fb66:	72660613          	addi	a2,a2,1830 # 8003a288 <__func__.0+0x7ea0>
    8001fb6a:	00013517          	auipc	a0,0x13
    8001fb6e:	b7650513          	addi	a0,a0,-1162 # 800326e0 <__func__.0+0x2f8>
    8001fb72:	1530f0ef          	jal	8002f4c4 <printf>
    8001fb76:	0003c797          	auipc	a5,0x3c
    8001fb7a:	49b7c783          	lbu	a5,1179(a5) # 8005c011 <excpt+0x1>
    8001fb7e:	0003c497          	auipc	s1,0x3c
    8001fb82:	49248493          	addi	s1,s1,1170 # 8005c010 <excpt>
    8001fb86:	00013597          	auipc	a1,0x13
    8001fb8a:	b3258593          	addi	a1,a1,-1230 # 800326b8 <__func__.0+0x2d0>
    8001fb8e:	cf89                	beqz	a5,8001fba8 <instret_test_3+0x88>
    8001fb90:	6498                	ld	a4,8(s1)
    8001fb92:	4789                	li	a5,2
    8001fb94:	00013597          	auipc	a1,0x13
    8001fb98:	b1458593          	addi	a1,a1,-1260 # 800326a8 <__func__.0+0x2c0>
    8001fb9c:	00f70663          	beq	a4,a5,8001fba8 <instret_test_3+0x88>
    8001fba0:	00013597          	auipc	a1,0x13
    8001fba4:	b1858593          	addi	a1,a1,-1256 # 800326b8 <__func__.0+0x2d0>
    8001fba8:	00013517          	auipc	a0,0x13
    8001fbac:	b5050513          	addi	a0,a0,-1200 # 800326f8 <__func__.0+0x310>
    8001fbb0:	1150f0ef          	jal	8002f4c4 <printf>
    8001fbb4:	0003c797          	auipc	a5,0x3c
    8001fbb8:	45d7c783          	lbu	a5,1117(a5) # 8005c011 <excpt+0x1>
    8001fbbc:	c789                	beqz	a5,8001fbc6 <instret_test_3+0xa6>
    8001fbbe:	6498                	ld	a4,8(s1)
    8001fbc0:	4789                	li	a5,2
    8001fbc2:	00f70c63          	beq	a4,a5,8001fbda <instret_test_3+0xba>
    8001fbc6:	00013517          	auipc	a0,0x13
    8001fbca:	b3a50513          	addi	a0,a0,-1222 # 80032700 <__func__.0+0x318>
    8001fbce:	0f70f0ef          	jal	8002f4c4 <printf>
    8001fbd2:	02900513          	li	a0,41
    8001fbd6:	5dc0e0ef          	jal	8002e1b2 <putchar>
    8001fbda:	4529                	li	a0,10
    8001fbdc:	5d60e0ef          	jal	8002e1b2 <putchar>
    8001fbe0:	0003c417          	auipc	s0,0x3c
    8001fbe4:	43144403          	lbu	s0,1073(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001fbe8:	00013597          	auipc	a1,0x13
    8001fbec:	ad058593          	addi	a1,a1,-1328 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fbf0:	cc11                	beqz	s0,8001fc0c <instret_test_3+0xec>
    8001fbf2:	6498                	ld	a4,8(s1)
    8001fbf4:	4789                	li	a5,2
    TEST_END(); 
    8001fbf6:	00013597          	auipc	a1,0x13
    8001fbfa:	ab258593          	addi	a1,a1,-1358 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fbfe:	00f70763          	beq	a4,a5,8001fc0c <instret_test_3+0xec>
    8001fc02:	4401                	li	s0,0
    TEST_END(); 
    8001fc04:	00013597          	auipc	a1,0x13
    8001fc08:	ab458593          	addi	a1,a1,-1356 # 800326b8 <__func__.0+0x2d0>
    8001fc0c:	00013517          	auipc	a0,0x13
    8001fc10:	b5450513          	addi	a0,a0,-1196 # 80032760 <__func__.0+0x378>
    8001fc14:	0b10f0ef          	jal	8002f4c4 <printf>
    8001fc18:	4511                	li	a0,4
    8001fc1a:	afae10ef          	jal	80000f14 <goto_priv>
    8001fc1e:	b59e10ef          	jal	80001776 <reset_state>
}
    8001fc22:	60e2                	ld	ra,24(sp)
    8001fc24:	8522                	mv	a0,s0
    8001fc26:	6442                	ld	s0,16(sp)
    8001fc28:	64a2                	ld	s1,8(sp)
    8001fc2a:	6105                	addi	sp,sp,32
    8001fc2c:	8082                	ret

000000008001fc2e <instret_test_4>:

bool instret_test_4() {
    8001fc2e:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fc30:	00012597          	auipc	a1,0x12
    8001fc34:	c7858593          	addi	a1,a1,-904 # 800318a8 <__func__.27>
    8001fc38:	00013517          	auipc	a0,0x13
    8001fc3c:	a9050513          	addi	a0,a0,-1392 # 800326c8 <__func__.0+0x2e0>
bool instret_test_4() {
    8001fc40:	e406                	sd	ra,8(sp)
    8001fc42:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fc44:	0810f0ef          	jal	8002f4c4 <printf>
    8001fc48:	4529                	li	a0,10
    8001fc4a:	5680e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001fc4e:	4511                	li	a0,4
    8001fc50:	ac4e10ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fc54:	10626073          	csrsi	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fc58:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8001fc5c:	4505                	li	a0,1
    8001fc5e:	ab6e10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fc62:	9b6e10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fc66:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fc6a:	08c00593          	li	a1,140
    8001fc6e:	0001a617          	auipc	a2,0x1a
    8001fc72:	66a60613          	addi	a2,a2,1642 # 8003a2d8 <__func__.0+0x7ef0>
    8001fc76:	00013517          	auipc	a0,0x13
    8001fc7a:	a6a50513          	addi	a0,a0,-1430 # 800326e0 <__func__.0+0x2f8>
    8001fc7e:	0470f0ef          	jal	8002f4c4 <printf>
    8001fc82:	0003c797          	auipc	a5,0x3c
    8001fc86:	38f7c783          	lbu	a5,911(a5) # 8005c011 <excpt+0x1>
    8001fc8a:	00013597          	auipc	a1,0x13
    8001fc8e:	a1e58593          	addi	a1,a1,-1506 # 800326a8 <__func__.0+0x2c0>
    8001fc92:	c789                	beqz	a5,8001fc9c <instret_test_4+0x6e>
    8001fc94:	00013597          	auipc	a1,0x13
    8001fc98:	a2458593          	addi	a1,a1,-1500 # 800326b8 <__func__.0+0x2d0>
    8001fc9c:	00013517          	auipc	a0,0x13
    8001fca0:	a5c50513          	addi	a0,a0,-1444 # 800326f8 <__func__.0+0x310>
    8001fca4:	0210f0ef          	jal	8002f4c4 <printf>
    8001fca8:	0003c797          	auipc	a5,0x3c
    8001fcac:	3697c783          	lbu	a5,873(a5) # 8005c011 <excpt+0x1>
    8001fcb0:	e7a1                	bnez	a5,8001fcf8 <instret_test_4+0xca>
    8001fcb2:	4529                	li	a0,10
    8001fcb4:	4fe0e0ef          	jal	8002e1b2 <putchar>
    8001fcb8:	0003c797          	auipc	a5,0x3c
    8001fcbc:	3597c783          	lbu	a5,857(a5) # 8005c011 <excpt+0x1>
    8001fcc0:	e795                	bnez	a5,8001fcec <instret_test_4+0xbe>
    8001fcc2:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fcc4:	00013597          	auipc	a1,0x13
    8001fcc8:	9e458593          	addi	a1,a1,-1564 # 800326a8 <__func__.0+0x2c0>
    8001fccc:	00013517          	auipc	a0,0x13
    8001fcd0:	a9450513          	addi	a0,a0,-1388 # 80032760 <__func__.0+0x378>
    8001fcd4:	7f00f0ef          	jal	8002f4c4 <printf>
    8001fcd8:	4511                	li	a0,4
    8001fcda:	a3ae10ef          	jal	80000f14 <goto_priv>
    8001fcde:	a99e10ef          	jal	80001776 <reset_state>
}
    8001fce2:	60a2                	ld	ra,8(sp)
    8001fce4:	8522                	mv	a0,s0
    8001fce6:	6402                	ld	s0,0(sp)
    8001fce8:	0141                	addi	sp,sp,16
    8001fcea:	8082                	ret
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fcec:	4401                	li	s0,0
    TEST_END(); 
    8001fcee:	00013597          	auipc	a1,0x13
    8001fcf2:	9ca58593          	addi	a1,a1,-1590 # 800326b8 <__func__.0+0x2d0>
    8001fcf6:	bfd9                	j	8001fccc <instret_test_4+0x9e>
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fcf8:	00013517          	auipc	a0,0x13
    8001fcfc:	a0850513          	addi	a0,a0,-1528 # 80032700 <__func__.0+0x318>
    8001fd00:	7c40f0ef          	jal	8002f4c4 <printf>
    8001fd04:	02900513          	li	a0,41
    8001fd08:	4aa0e0ef          	jal	8002e1b2 <putchar>
    8001fd0c:	b75d                	j	8001fcb2 <instret_test_4+0x84>

000000008001fd0e <instret_test_5>:

bool instret_test_5() {
    8001fd0e:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001fd10:	00012597          	auipc	a1,0x12
    8001fd14:	ba858593          	addi	a1,a1,-1112 # 800318b8 <__func__.26>
    8001fd18:	00013517          	auipc	a0,0x13
    8001fd1c:	9b050513          	addi	a0,a0,-1616 # 800326c8 <__func__.0+0x2e0>
bool instret_test_5() {
    8001fd20:	ec06                	sd	ra,24(sp)
    8001fd22:	e822                	sd	s0,16(sp)
    8001fd24:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fd26:	79e0f0ef          	jal	8002f4c4 <printf>
    8001fd2a:	4529                	li	a0,10
    8001fd2c:	4860e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001fd30:	4511                	li	a0,4
    8001fd32:	9e2e10ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fd36:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fd3a:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001fd3e:	4509                	li	a0,2
    8001fd40:	9d4e10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fd44:	8d4e10ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fd48:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fd4c:	08c00593          	li	a1,140
    8001fd50:	0001a617          	auipc	a2,0x1a
    8001fd54:	5d060613          	addi	a2,a2,1488 # 8003a320 <__func__.0+0x7f38>
    8001fd58:	00013517          	auipc	a0,0x13
    8001fd5c:	98850513          	addi	a0,a0,-1656 # 800326e0 <__func__.0+0x2f8>
    8001fd60:	7640f0ef          	jal	8002f4c4 <printf>
    8001fd64:	0003c797          	auipc	a5,0x3c
    8001fd68:	2ad7c783          	lbu	a5,685(a5) # 8005c011 <excpt+0x1>
    8001fd6c:	0003c497          	auipc	s1,0x3c
    8001fd70:	2a448493          	addi	s1,s1,676 # 8005c010 <excpt>
    8001fd74:	00013597          	auipc	a1,0x13
    8001fd78:	94458593          	addi	a1,a1,-1724 # 800326b8 <__func__.0+0x2d0>
    8001fd7c:	cf89                	beqz	a5,8001fd96 <instret_test_5+0x88>
    8001fd7e:	6498                	ld	a4,8(s1)
    8001fd80:	47d9                	li	a5,22
    8001fd82:	00013597          	auipc	a1,0x13
    8001fd86:	92658593          	addi	a1,a1,-1754 # 800326a8 <__func__.0+0x2c0>
    8001fd8a:	00f70663          	beq	a4,a5,8001fd96 <instret_test_5+0x88>
    8001fd8e:	00013597          	auipc	a1,0x13
    8001fd92:	92a58593          	addi	a1,a1,-1750 # 800326b8 <__func__.0+0x2d0>
    8001fd96:	00013517          	auipc	a0,0x13
    8001fd9a:	96250513          	addi	a0,a0,-1694 # 800326f8 <__func__.0+0x310>
    8001fd9e:	7260f0ef          	jal	8002f4c4 <printf>
    8001fda2:	0003c797          	auipc	a5,0x3c
    8001fda6:	26f7c783          	lbu	a5,623(a5) # 8005c011 <excpt+0x1>
    8001fdaa:	c789                	beqz	a5,8001fdb4 <instret_test_5+0xa6>
    8001fdac:	6498                	ld	a4,8(s1)
    8001fdae:	47d9                	li	a5,22
    8001fdb0:	00f70c63          	beq	a4,a5,8001fdc8 <instret_test_5+0xba>
    8001fdb4:	00013517          	auipc	a0,0x13
    8001fdb8:	94c50513          	addi	a0,a0,-1716 # 80032700 <__func__.0+0x318>
    8001fdbc:	7080f0ef          	jal	8002f4c4 <printf>
    8001fdc0:	02900513          	li	a0,41
    8001fdc4:	3ee0e0ef          	jal	8002e1b2 <putchar>
    8001fdc8:	4529                	li	a0,10
    8001fdca:	3e80e0ef          	jal	8002e1b2 <putchar>
    8001fdce:	0003c417          	auipc	s0,0x3c
    8001fdd2:	24344403          	lbu	s0,579(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001fdd6:	00013597          	auipc	a1,0x13
    8001fdda:	8e258593          	addi	a1,a1,-1822 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fdde:	cc11                	beqz	s0,8001fdfa <instret_test_5+0xec>
    8001fde0:	6498                	ld	a4,8(s1)
    8001fde2:	47d9                	li	a5,22
    TEST_END(); 
    8001fde4:	00013597          	auipc	a1,0x13
    8001fde8:	8c458593          	addi	a1,a1,-1852 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fdec:	00f70763          	beq	a4,a5,8001fdfa <instret_test_5+0xec>
    8001fdf0:	4401                	li	s0,0
    TEST_END(); 
    8001fdf2:	00013597          	auipc	a1,0x13
    8001fdf6:	8c658593          	addi	a1,a1,-1850 # 800326b8 <__func__.0+0x2d0>
    8001fdfa:	00013517          	auipc	a0,0x13
    8001fdfe:	96650513          	addi	a0,a0,-1690 # 80032760 <__func__.0+0x378>
    8001fe02:	6c20f0ef          	jal	8002f4c4 <printf>
    8001fe06:	4511                	li	a0,4
    8001fe08:	90ce10ef          	jal	80000f14 <goto_priv>
    8001fe0c:	96be10ef          	jal	80001776 <reset_state>
}
    8001fe10:	60e2                	ld	ra,24(sp)
    8001fe12:	8522                	mv	a0,s0
    8001fe14:	6442                	ld	s0,16(sp)
    8001fe16:	64a2                	ld	s1,8(sp)
    8001fe18:	6105                	addi	sp,sp,32
    8001fe1a:	8082                	ret

000000008001fe1c <instret_test_6>:

bool instret_test_6() {
    8001fe1c:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fe1e:	00012597          	auipc	a1,0x12
    8001fe22:	aaa58593          	addi	a1,a1,-1366 # 800318c8 <__func__.25>
    8001fe26:	00013517          	auipc	a0,0x13
    8001fe2a:	8a250513          	addi	a0,a0,-1886 # 800326c8 <__func__.0+0x2e0>
bool instret_test_6() {
    8001fe2e:	e406                	sd	ra,8(sp)
    8001fe30:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fe32:	6920f0ef          	jal	8002f4c4 <printf>
    8001fe36:	4529                	li	a0,10
    8001fe38:	37a0e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001fe3c:	4511                	li	a0,4
    8001fe3e:	8d6e10ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fe42:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fe46:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001fe4a:	4509                	li	a0,2
    8001fe4c:	8c8e10ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fe50:	fc9e00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fe54:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fe58:	08c00593          	li	a1,140
    8001fe5c:	0001a617          	auipc	a2,0x1a
    8001fe60:	52460613          	addi	a2,a2,1316 # 8003a380 <__func__.0+0x7f98>
    8001fe64:	00013517          	auipc	a0,0x13
    8001fe68:	87c50513          	addi	a0,a0,-1924 # 800326e0 <__func__.0+0x2f8>
    8001fe6c:	6580f0ef          	jal	8002f4c4 <printf>
    8001fe70:	0003c797          	auipc	a5,0x3c
    8001fe74:	1a17c783          	lbu	a5,417(a5) # 8005c011 <excpt+0x1>
    8001fe78:	00013597          	auipc	a1,0x13
    8001fe7c:	83058593          	addi	a1,a1,-2000 # 800326a8 <__func__.0+0x2c0>
    8001fe80:	c789                	beqz	a5,8001fe8a <instret_test_6+0x6e>
    8001fe82:	00013597          	auipc	a1,0x13
    8001fe86:	83658593          	addi	a1,a1,-1994 # 800326b8 <__func__.0+0x2d0>
    8001fe8a:	00013517          	auipc	a0,0x13
    8001fe8e:	86e50513          	addi	a0,a0,-1938 # 800326f8 <__func__.0+0x310>
    8001fe92:	6320f0ef          	jal	8002f4c4 <printf>
    8001fe96:	0003c797          	auipc	a5,0x3c
    8001fe9a:	17b7c783          	lbu	a5,379(a5) # 8005c011 <excpt+0x1>
    8001fe9e:	e7a1                	bnez	a5,8001fee6 <instret_test_6+0xca>
    8001fea0:	4529                	li	a0,10
    8001fea2:	3100e0ef          	jal	8002e1b2 <putchar>
    8001fea6:	0003c797          	auipc	a5,0x3c
    8001feaa:	16b7c783          	lbu	a5,363(a5) # 8005c011 <excpt+0x1>
    8001feae:	e795                	bnez	a5,8001feda <instret_test_6+0xbe>
    8001feb0:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001feb2:	00012597          	auipc	a1,0x12
    8001feb6:	7f658593          	addi	a1,a1,2038 # 800326a8 <__func__.0+0x2c0>
    8001feba:	00013517          	auipc	a0,0x13
    8001febe:	8a650513          	addi	a0,a0,-1882 # 80032760 <__func__.0+0x378>
    8001fec2:	6020f0ef          	jal	8002f4c4 <printf>
    8001fec6:	4511                	li	a0,4
    8001fec8:	84ce10ef          	jal	80000f14 <goto_priv>
    8001fecc:	8abe10ef          	jal	80001776 <reset_state>
}
    8001fed0:	60a2                	ld	ra,8(sp)
    8001fed2:	8522                	mv	a0,s0
    8001fed4:	6402                	ld	s0,0(sp)
    8001fed6:	0141                	addi	sp,sp,16
    8001fed8:	8082                	ret
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001feda:	4401                	li	s0,0
    TEST_END(); 
    8001fedc:	00012597          	auipc	a1,0x12
    8001fee0:	7dc58593          	addi	a1,a1,2012 # 800326b8 <__func__.0+0x2d0>
    8001fee4:	bfd9                	j	8001feba <instret_test_6+0x9e>
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fee6:	00013517          	auipc	a0,0x13
    8001feea:	81a50513          	addi	a0,a0,-2022 # 80032700 <__func__.0+0x318>
    8001feee:	5d60f0ef          	jal	8002f4c4 <printf>
    8001fef2:	02900513          	li	a0,41
    8001fef6:	2bc0e0ef          	jal	8002e1b2 <putchar>
    8001fefa:	b75d                	j	8001fea0 <instret_test_6+0x84>

000000008001fefc <instret_test_7>:

bool instret_test_7() {
    8001fefc:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fefe:	00012597          	auipc	a1,0x12
    8001ff02:	9da58593          	addi	a1,a1,-1574 # 800318d8 <__func__.24>
    8001ff06:	00012517          	auipc	a0,0x12
    8001ff0a:	7c250513          	addi	a0,a0,1986 # 800326c8 <__func__.0+0x2e0>
bool instret_test_7() {
    8001ff0e:	e406                	sd	ra,8(sp)
    8001ff10:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001ff12:	5b20f0ef          	jal	8002f4c4 <printf>
    8001ff16:	4529                	li	a0,10
    8001ff18:	29a0e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8001ff1c:	4511                	li	a0,4
    8001ff1e:	ff7e00ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001ff22:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001ff26:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001ff2a:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    8001ff2e:	4501                	li	a0,0
    8001ff30:	fe5e00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ff34:	ee5e00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001ff38:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001ff3c:	08c00593          	li	a1,140
    8001ff40:	0001a617          	auipc	a2,0x1a
    8001ff44:	48860613          	addi	a2,a2,1160 # 8003a3c8 <__func__.0+0x7fe0>
    8001ff48:	00012517          	auipc	a0,0x12
    8001ff4c:	79850513          	addi	a0,a0,1944 # 800326e0 <__func__.0+0x2f8>
    8001ff50:	5740f0ef          	jal	8002f4c4 <printf>
    8001ff54:	0003c797          	auipc	a5,0x3c
    8001ff58:	0bd7c783          	lbu	a5,189(a5) # 8005c011 <excpt+0x1>
    8001ff5c:	00012597          	auipc	a1,0x12
    8001ff60:	74c58593          	addi	a1,a1,1868 # 800326a8 <__func__.0+0x2c0>
    8001ff64:	c789                	beqz	a5,8001ff6e <instret_test_7+0x72>
    8001ff66:	00012597          	auipc	a1,0x12
    8001ff6a:	75258593          	addi	a1,a1,1874 # 800326b8 <__func__.0+0x2d0>
    8001ff6e:	00012517          	auipc	a0,0x12
    8001ff72:	78a50513          	addi	a0,a0,1930 # 800326f8 <__func__.0+0x310>
    8001ff76:	54e0f0ef          	jal	8002f4c4 <printf>
    8001ff7a:	0003c797          	auipc	a5,0x3c
    8001ff7e:	0977c783          	lbu	a5,151(a5) # 8005c011 <excpt+0x1>
    8001ff82:	e7a1                	bnez	a5,8001ffca <instret_test_7+0xce>
    8001ff84:	4529                	li	a0,10
    8001ff86:	22c0e0ef          	jal	8002e1b2 <putchar>
    8001ff8a:	0003c797          	auipc	a5,0x3c
    8001ff8e:	0877c783          	lbu	a5,135(a5) # 8005c011 <excpt+0x1>
    8001ff92:	e795                	bnez	a5,8001ffbe <instret_test_7+0xc2>
    8001ff94:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001ff96:	00012597          	auipc	a1,0x12
    8001ff9a:	71258593          	addi	a1,a1,1810 # 800326a8 <__func__.0+0x2c0>
    8001ff9e:	00012517          	auipc	a0,0x12
    8001ffa2:	7c250513          	addi	a0,a0,1986 # 80032760 <__func__.0+0x378>
    8001ffa6:	51e0f0ef          	jal	8002f4c4 <printf>
    8001ffaa:	4511                	li	a0,4
    8001ffac:	f69e00ef          	jal	80000f14 <goto_priv>
    8001ffb0:	fc6e10ef          	jal	80001776 <reset_state>
}
    8001ffb4:	60a2                	ld	ra,8(sp)
    8001ffb6:	8522                	mv	a0,s0
    8001ffb8:	6402                	ld	s0,0(sp)
    8001ffba:	0141                	addi	sp,sp,16
    8001ffbc:	8082                	ret
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001ffbe:	4401                	li	s0,0
    TEST_END(); 
    8001ffc0:	00012597          	auipc	a1,0x12
    8001ffc4:	6f858593          	addi	a1,a1,1784 # 800326b8 <__func__.0+0x2d0>
    8001ffc8:	bfd9                	j	8001ff9e <instret_test_7+0xa2>
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001ffca:	00012517          	auipc	a0,0x12
    8001ffce:	73650513          	addi	a0,a0,1846 # 80032700 <__func__.0+0x318>
    8001ffd2:	4f20f0ef          	jal	8002f4c4 <printf>
    8001ffd6:	02900513          	li	a0,41
    8001ffda:	1d80e0ef          	jal	8002e1b2 <putchar>
    8001ffde:	b75d                	j	8001ff84 <instret_test_7+0x88>

000000008001ffe0 <instret_test_8>:

bool instret_test_8() {
    8001ffe0:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ffe2:	00012597          	auipc	a1,0x12
    8001ffe6:	90658593          	addi	a1,a1,-1786 # 800318e8 <__func__.23>
    8001ffea:	00012517          	auipc	a0,0x12
    8001ffee:	6de50513          	addi	a0,a0,1758 # 800326c8 <__func__.0+0x2e0>
bool instret_test_8() {
    8001fff2:	ec06                	sd	ra,24(sp)
    8001fff4:	e822                	sd	s0,16(sp)
    8001fff6:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fff8:	4cc0f0ef          	jal	8002f4c4 <printf>
    8001fffc:	4529                	li	a0,10
    8001fffe:	1b40e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    80020002:	4511                	li	a0,4
    80020004:	f11e00ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    80020008:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8002000c:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80020010:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    80020014:	4501                	li	a0,0
    80020016:	effe00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002001a:	dffe00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8002001e:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    80020022:	08c00593          	li	a1,140
    80020026:	0001a617          	auipc	a2,0x1a
    8002002a:	3fa60613          	addi	a2,a2,1018 # 8003a420 <__func__.0+0x8038>
    8002002e:	00012517          	auipc	a0,0x12
    80020032:	6b250513          	addi	a0,a0,1714 # 800326e0 <__func__.0+0x2f8>
    80020036:	48e0f0ef          	jal	8002f4c4 <printf>
    8002003a:	0003c797          	auipc	a5,0x3c
    8002003e:	fd77c783          	lbu	a5,-41(a5) # 8005c011 <excpt+0x1>
    80020042:	0003c497          	auipc	s1,0x3c
    80020046:	fce48493          	addi	s1,s1,-50 # 8005c010 <excpt>
    8002004a:	00012597          	auipc	a1,0x12
    8002004e:	66e58593          	addi	a1,a1,1646 # 800326b8 <__func__.0+0x2d0>
    80020052:	cf89                	beqz	a5,8002006c <instret_test_8+0x8c>
    80020054:	6498                	ld	a4,8(s1)
    80020056:	47d9                	li	a5,22
    80020058:	00012597          	auipc	a1,0x12
    8002005c:	65058593          	addi	a1,a1,1616 # 800326a8 <__func__.0+0x2c0>
    80020060:	00f70663          	beq	a4,a5,8002006c <instret_test_8+0x8c>
    80020064:	00012597          	auipc	a1,0x12
    80020068:	65458593          	addi	a1,a1,1620 # 800326b8 <__func__.0+0x2d0>
    8002006c:	00012517          	auipc	a0,0x12
    80020070:	68c50513          	addi	a0,a0,1676 # 800326f8 <__func__.0+0x310>
    80020074:	4500f0ef          	jal	8002f4c4 <printf>
    80020078:	0003c797          	auipc	a5,0x3c
    8002007c:	f997c783          	lbu	a5,-103(a5) # 8005c011 <excpt+0x1>
    80020080:	c789                	beqz	a5,8002008a <instret_test_8+0xaa>
    80020082:	6498                	ld	a4,8(s1)
    80020084:	47d9                	li	a5,22
    80020086:	00f70c63          	beq	a4,a5,8002009e <instret_test_8+0xbe>
    8002008a:	00012517          	auipc	a0,0x12
    8002008e:	67650513          	addi	a0,a0,1654 # 80032700 <__func__.0+0x318>
    80020092:	4320f0ef          	jal	8002f4c4 <printf>
    80020096:	02900513          	li	a0,41
    8002009a:	1180e0ef          	jal	8002e1b2 <putchar>
    8002009e:	4529                	li	a0,10
    800200a0:	1120e0ef          	jal	8002e1b2 <putchar>
    800200a4:	0003c417          	auipc	s0,0x3c
    800200a8:	f6d44403          	lbu	s0,-147(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800200ac:	00012597          	auipc	a1,0x12
    800200b0:	60c58593          	addi	a1,a1,1548 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    800200b4:	cc11                	beqz	s0,800200d0 <instret_test_8+0xf0>
    800200b6:	6498                	ld	a4,8(s1)
    800200b8:	47d9                	li	a5,22
    TEST_END(); 
    800200ba:	00012597          	auipc	a1,0x12
    800200be:	5ee58593          	addi	a1,a1,1518 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    800200c2:	00f70763          	beq	a4,a5,800200d0 <instret_test_8+0xf0>
    800200c6:	4401                	li	s0,0
    TEST_END(); 
    800200c8:	00012597          	auipc	a1,0x12
    800200cc:	5f058593          	addi	a1,a1,1520 # 800326b8 <__func__.0+0x2d0>
    800200d0:	00012517          	auipc	a0,0x12
    800200d4:	69050513          	addi	a0,a0,1680 # 80032760 <__func__.0+0x378>
    800200d8:	3ec0f0ef          	jal	8002f4c4 <printf>
    800200dc:	4511                	li	a0,4
    800200de:	e37e00ef          	jal	80000f14 <goto_priv>
    800200e2:	e94e10ef          	jal	80001776 <reset_state>
}
    800200e6:	60e2                	ld	ra,24(sp)
    800200e8:	8522                	mv	a0,s0
    800200ea:	6442                	ld	s0,16(sp)
    800200ec:	64a2                	ld	s1,8(sp)
    800200ee:	6105                	addi	sp,sp,32
    800200f0:	8082                	ret

00000000800200f2 <instret_test_9>:

bool instret_test_9() {
    800200f2:	1101                	addi	sp,sp,-32

    TEST_START();    
    800200f4:	00012597          	auipc	a1,0x12
    800200f8:	80458593          	addi	a1,a1,-2044 # 800318f8 <__func__.22>
    800200fc:	00012517          	auipc	a0,0x12
    80020100:	5cc50513          	addi	a0,a0,1484 # 800326c8 <__func__.0+0x2e0>
bool instret_test_9() {
    80020104:	ec06                	sd	ra,24(sp)
    80020106:	e822                	sd	s0,16(sp)
    80020108:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002010a:	3ba0f0ef          	jal	8002f4c4 <printf>
    8002010e:	4529                	li	a0,10
    80020110:	0a20e0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    80020114:	4511                	li	a0,4
    80020116:	dffe00ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8002011a:	30626073          	csrsi	mcounteren,4
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8002011e:	10627073          	csrci	scounteren,4

    goto_priv(PRIV_HU);
    80020122:	4505                	li	a0,1
    80020124:	df1e00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020128:	cf1e00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8002012c:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    80020130:	08c00593          	li	a1,140
    80020134:	0001a617          	auipc	a2,0x1a
    80020138:	35c60613          	addi	a2,a2,860 # 8003a490 <__func__.0+0x80a8>
    8002013c:	00012517          	auipc	a0,0x12
    80020140:	5a450513          	addi	a0,a0,1444 # 800326e0 <__func__.0+0x2f8>
    80020144:	3800f0ef          	jal	8002f4c4 <printf>
    80020148:	0003c797          	auipc	a5,0x3c
    8002014c:	ec97c783          	lbu	a5,-311(a5) # 8005c011 <excpt+0x1>
    80020150:	0003c497          	auipc	s1,0x3c
    80020154:	ec048493          	addi	s1,s1,-320 # 8005c010 <excpt>
    80020158:	00012597          	auipc	a1,0x12
    8002015c:	56058593          	addi	a1,a1,1376 # 800326b8 <__func__.0+0x2d0>
    80020160:	cf89                	beqz	a5,8002017a <instret_test_9+0x88>
    80020162:	6498                	ld	a4,8(s1)
    80020164:	4789                	li	a5,2
    80020166:	00012597          	auipc	a1,0x12
    8002016a:	54258593          	addi	a1,a1,1346 # 800326a8 <__func__.0+0x2c0>
    8002016e:	00f70663          	beq	a4,a5,8002017a <instret_test_9+0x88>
    80020172:	00012597          	auipc	a1,0x12
    80020176:	54658593          	addi	a1,a1,1350 # 800326b8 <__func__.0+0x2d0>
    8002017a:	00012517          	auipc	a0,0x12
    8002017e:	57e50513          	addi	a0,a0,1406 # 800326f8 <__func__.0+0x310>
    80020182:	3420f0ef          	jal	8002f4c4 <printf>
    80020186:	0003c797          	auipc	a5,0x3c
    8002018a:	e8b7c783          	lbu	a5,-373(a5) # 8005c011 <excpt+0x1>
    8002018e:	c789                	beqz	a5,80020198 <instret_test_9+0xa6>
    80020190:	6498                	ld	a4,8(s1)
    80020192:	4789                	li	a5,2
    80020194:	00f70c63          	beq	a4,a5,800201ac <instret_test_9+0xba>
    80020198:	00012517          	auipc	a0,0x12
    8002019c:	56850513          	addi	a0,a0,1384 # 80032700 <__func__.0+0x318>
    800201a0:	3240f0ef          	jal	8002f4c4 <printf>
    800201a4:	02900513          	li	a0,41
    800201a8:	00a0e0ef          	jal	8002e1b2 <putchar>
    800201ac:	4529                	li	a0,10
    800201ae:	0040e0ef          	jal	8002e1b2 <putchar>
    800201b2:	0003c417          	auipc	s0,0x3c
    800201b6:	e5f44403          	lbu	s0,-417(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800201ba:	00012597          	auipc	a1,0x12
    800201be:	4fe58593          	addi	a1,a1,1278 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    800201c2:	cc11                	beqz	s0,800201de <instret_test_9+0xec>
    800201c4:	6498                	ld	a4,8(s1)
    800201c6:	4789                	li	a5,2
    TEST_END(); 
    800201c8:	00012597          	auipc	a1,0x12
    800201cc:	4e058593          	addi	a1,a1,1248 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    800201d0:	00f70763          	beq	a4,a5,800201de <instret_test_9+0xec>
    800201d4:	4401                	li	s0,0
    TEST_END(); 
    800201d6:	00012597          	auipc	a1,0x12
    800201da:	4e258593          	addi	a1,a1,1250 # 800326b8 <__func__.0+0x2d0>
    800201de:	00012517          	auipc	a0,0x12
    800201e2:	58250513          	addi	a0,a0,1410 # 80032760 <__func__.0+0x378>
    800201e6:	2de0f0ef          	jal	8002f4c4 <printf>
    800201ea:	4511                	li	a0,4
    800201ec:	d29e00ef          	jal	80000f14 <goto_priv>
    800201f0:	d86e10ef          	jal	80001776 <reset_state>
}
    800201f4:	60e2                	ld	ra,24(sp)
    800201f6:	8522                	mv	a0,s0
    800201f8:	6442                	ld	s0,16(sp)
    800201fa:	64a2                	ld	s1,8(sp)
    800201fc:	6105                	addi	sp,sp,32
    800201fe:	8082                	ret

0000000080020200 <instret_test_10>:

bool instret_test_10() {
    80020200:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020202:	00011597          	auipc	a1,0x11
    80020206:	70658593          	addi	a1,a1,1798 # 80031908 <__func__.21>
    8002020a:	00012517          	auipc	a0,0x12
    8002020e:	4be50513          	addi	a0,a0,1214 # 800326c8 <__func__.0+0x2e0>
bool instret_test_10() {
    80020212:	e406                	sd	ra,8(sp)
    80020214:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020216:	2ae0f0ef          	jal	8002f4c4 <printf>
    8002021a:	4529                	li	a0,10
    8002021c:	7970d0ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    80020220:	4511                	li	a0,4
    80020222:	cf3e00ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    80020226:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8002022a:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8002022e:	4509                	li	a0,2
    80020230:	ce5e00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020234:	be5e00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    80020238:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    8002023c:	08c00593          	li	a1,140
    80020240:	0001a617          	auipc	a2,0x1a
    80020244:	2b060613          	addi	a2,a2,688 # 8003a4f0 <__func__.0+0x8108>
    80020248:	00012517          	auipc	a0,0x12
    8002024c:	49850513          	addi	a0,a0,1176 # 800326e0 <__func__.0+0x2f8>
    80020250:	2740f0ef          	jal	8002f4c4 <printf>
    80020254:	0003c797          	auipc	a5,0x3c
    80020258:	dbd7c783          	lbu	a5,-579(a5) # 8005c011 <excpt+0x1>
    8002025c:	00012597          	auipc	a1,0x12
    80020260:	44c58593          	addi	a1,a1,1100 # 800326a8 <__func__.0+0x2c0>
    80020264:	c789                	beqz	a5,8002026e <instret_test_10+0x6e>
    80020266:	00012597          	auipc	a1,0x12
    8002026a:	45258593          	addi	a1,a1,1106 # 800326b8 <__func__.0+0x2d0>
    8002026e:	00012517          	auipc	a0,0x12
    80020272:	48a50513          	addi	a0,a0,1162 # 800326f8 <__func__.0+0x310>
    80020276:	24e0f0ef          	jal	8002f4c4 <printf>
    8002027a:	0003c797          	auipc	a5,0x3c
    8002027e:	d977c783          	lbu	a5,-617(a5) # 8005c011 <excpt+0x1>
    80020282:	e7a1                	bnez	a5,800202ca <instret_test_10+0xca>
    80020284:	4529                	li	a0,10
    80020286:	72d0d0ef          	jal	8002e1b2 <putchar>
    8002028a:	0003c797          	auipc	a5,0x3c
    8002028e:	d877c783          	lbu	a5,-633(a5) # 8005c011 <excpt+0x1>
    80020292:	e795                	bnez	a5,800202be <instret_test_10+0xbe>
    80020294:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020296:	00012597          	auipc	a1,0x12
    8002029a:	41258593          	addi	a1,a1,1042 # 800326a8 <__func__.0+0x2c0>
    8002029e:	00012517          	auipc	a0,0x12
    800202a2:	4c250513          	addi	a0,a0,1218 # 80032760 <__func__.0+0x378>
    800202a6:	21e0f0ef          	jal	8002f4c4 <printf>
    800202aa:	4511                	li	a0,4
    800202ac:	c69e00ef          	jal	80000f14 <goto_priv>
    800202b0:	cc6e10ef          	jal	80001776 <reset_state>
}
    800202b4:	60a2                	ld	ra,8(sp)
    800202b6:	8522                	mv	a0,s0
    800202b8:	6402                	ld	s0,0(sp)
    800202ba:	0141                	addi	sp,sp,16
    800202bc:	8082                	ret
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    800202be:	4401                	li	s0,0
    TEST_END(); 
    800202c0:	00012597          	auipc	a1,0x12
    800202c4:	3f858593          	addi	a1,a1,1016 # 800326b8 <__func__.0+0x2d0>
    800202c8:	bfd9                	j	8002029e <instret_test_10+0x9e>
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    800202ca:	00012517          	auipc	a0,0x12
    800202ce:	43650513          	addi	a0,a0,1078 # 80032700 <__func__.0+0x318>
    800202d2:	1f20f0ef          	jal	8002f4c4 <printf>
    800202d6:	02900513          	li	a0,41
    800202da:	6d90d0ef          	jal	8002e1b2 <putchar>
    800202de:	b75d                	j	80020284 <instret_test_10+0x84>

00000000800202e0 <timecmp_test_1>:


bool timecmp_test_1() {
    800202e0:	1101                	addi	sp,sp,-32

    TEST_START();    
    800202e2:	00011597          	auipc	a1,0x11
    800202e6:	63658593          	addi	a1,a1,1590 # 80031918 <__func__.20>
    800202ea:	00012517          	auipc	a0,0x12
    800202ee:	3de50513          	addi	a0,a0,990 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_1() {
    800202f2:	ec06                	sd	ra,24(sp)
    800202f4:	e822                	sd	s0,16(sp)
    800202f6:	e426                	sd	s1,8(sp)
    TEST_START();    
    800202f8:	1cc0f0ef          	jal	8002f4c4 <printf>
    800202fc:	4529                	li	a0,10
    800202fe:	6b50d0ef          	jal	8002e1b2 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80020302:	57fd                	li	a5,-1
    80020304:	17fe                	slli	a5,a5,0x3f
    80020306:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002030a:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    8002030e:	450d                	li	a0,3
    80020310:	c05e00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020314:	b05e00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020318:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8002031c:	08c00593          	li	a1,140
    80020320:	0001a617          	auipc	a2,0x1a
    80020324:	22060613          	addi	a2,a2,544 # 8003a540 <__func__.0+0x8158>
    80020328:	00012517          	auipc	a0,0x12
    8002032c:	3b850513          	addi	a0,a0,952 # 800326e0 <__func__.0+0x2f8>
    80020330:	1940f0ef          	jal	8002f4c4 <printf>
    80020334:	0003c797          	auipc	a5,0x3c
    80020338:	cdd7c783          	lbu	a5,-803(a5) # 8005c011 <excpt+0x1>
    8002033c:	0003c497          	auipc	s1,0x3c
    80020340:	cd448493          	addi	s1,s1,-812 # 8005c010 <excpt>
    80020344:	00012597          	auipc	a1,0x12
    80020348:	37458593          	addi	a1,a1,884 # 800326b8 <__func__.0+0x2d0>
    8002034c:	cf89                	beqz	a5,80020366 <timecmp_test_1+0x86>
    8002034e:	6498                	ld	a4,8(s1)
    80020350:	4789                	li	a5,2
    80020352:	00012597          	auipc	a1,0x12
    80020356:	35658593          	addi	a1,a1,854 # 800326a8 <__func__.0+0x2c0>
    8002035a:	00f70663          	beq	a4,a5,80020366 <timecmp_test_1+0x86>
    8002035e:	00012597          	auipc	a1,0x12
    80020362:	35a58593          	addi	a1,a1,858 # 800326b8 <__func__.0+0x2d0>
    80020366:	00012517          	auipc	a0,0x12
    8002036a:	39250513          	addi	a0,a0,914 # 800326f8 <__func__.0+0x310>
    8002036e:	1560f0ef          	jal	8002f4c4 <printf>
    80020372:	0003c797          	auipc	a5,0x3c
    80020376:	c9f7c783          	lbu	a5,-865(a5) # 8005c011 <excpt+0x1>
    8002037a:	c789                	beqz	a5,80020384 <timecmp_test_1+0xa4>
    8002037c:	6498                	ld	a4,8(s1)
    8002037e:	4789                	li	a5,2
    80020380:	00f70c63          	beq	a4,a5,80020398 <timecmp_test_1+0xb8>
    80020384:	00012517          	auipc	a0,0x12
    80020388:	37c50513          	addi	a0,a0,892 # 80032700 <__func__.0+0x318>
    8002038c:	1380f0ef          	jal	8002f4c4 <printf>
    80020390:	02900513          	li	a0,41
    80020394:	61f0d0ef          	jal	8002e1b2 <putchar>
    80020398:	4529                	li	a0,10
    8002039a:	6190d0ef          	jal	8002e1b2 <putchar>
    8002039e:	0003c797          	auipc	a5,0x3c
    800203a2:	c737c783          	lbu	a5,-909(a5) # 8005c011 <excpt+0x1>
    800203a6:	4401                	li	s0,0
    800203a8:	c789                	beqz	a5,800203b2 <timecmp_test_1+0xd2>
    800203aa:	6480                	ld	s0,8(s1)
    800203ac:	1479                	addi	s0,s0,-2
    800203ae:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HU);
    800203b2:	4505                	li	a0,1
    800203b4:	b61e00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    800203b8:	a61e00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800203bc:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    800203c0:	08c00593          	li	a1,140
    800203c4:	0001a617          	auipc	a2,0x1a
    800203c8:	1e460613          	addi	a2,a2,484 # 8003a5a8 <__func__.0+0x81c0>
    800203cc:	00012517          	auipc	a0,0x12
    800203d0:	31450513          	addi	a0,a0,788 # 800326e0 <__func__.0+0x2f8>
    800203d4:	0f00f0ef          	jal	8002f4c4 <printf>
    800203d8:	0003c797          	auipc	a5,0x3c
    800203dc:	c397c783          	lbu	a5,-967(a5) # 8005c011 <excpt+0x1>
    800203e0:	00012597          	auipc	a1,0x12
    800203e4:	2d858593          	addi	a1,a1,728 # 800326b8 <__func__.0+0x2d0>
    800203e8:	cf89                	beqz	a5,80020402 <timecmp_test_1+0x122>
    800203ea:	6498                	ld	a4,8(s1)
    800203ec:	4789                	li	a5,2
    800203ee:	00012597          	auipc	a1,0x12
    800203f2:	2ba58593          	addi	a1,a1,698 # 800326a8 <__func__.0+0x2c0>
    800203f6:	00f70663          	beq	a4,a5,80020402 <timecmp_test_1+0x122>
    800203fa:	00012597          	auipc	a1,0x12
    800203fe:	2be58593          	addi	a1,a1,702 # 800326b8 <__func__.0+0x2d0>
    80020402:	00012517          	auipc	a0,0x12
    80020406:	2f650513          	addi	a0,a0,758 # 800326f8 <__func__.0+0x310>
    8002040a:	0ba0f0ef          	jal	8002f4c4 <printf>
    8002040e:	0003c797          	auipc	a5,0x3c
    80020412:	c037c783          	lbu	a5,-1021(a5) # 8005c011 <excpt+0x1>
    80020416:	c789                	beqz	a5,80020420 <timecmp_test_1+0x140>
    80020418:	6498                	ld	a4,8(s1)
    8002041a:	4789                	li	a5,2
    8002041c:	00f70c63          	beq	a4,a5,80020434 <timecmp_test_1+0x154>
    80020420:	00012517          	auipc	a0,0x12
    80020424:	2e050513          	addi	a0,a0,736 # 80032700 <__func__.0+0x318>
    80020428:	09c0f0ef          	jal	8002f4c4 <printf>
    8002042c:	02900513          	li	a0,41
    80020430:	5830d0ef          	jal	8002e1b2 <putchar>
    80020434:	4529                	li	a0,10
    80020436:	57d0d0ef          	jal	8002e1b2 <putchar>
    8002043a:	c015                	beqz	s0,8002045e <timecmp_test_1+0x17e>
    8002043c:	0003c417          	auipc	s0,0x3c
    80020440:	bd544403          	lbu	s0,-1067(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020444:	00012597          	auipc	a1,0x12
    80020448:	27458593          	addi	a1,a1,628 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8002044c:	cc11                	beqz	s0,80020468 <timecmp_test_1+0x188>
    8002044e:	6498                	ld	a4,8(s1)
    80020450:	4789                	li	a5,2
    TEST_END(); 
    80020452:	00012597          	auipc	a1,0x12
    80020456:	25658593          	addi	a1,a1,598 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8002045a:	00f70763          	beq	a4,a5,80020468 <timecmp_test_1+0x188>
    8002045e:	4401                	li	s0,0
    TEST_END(); 
    80020460:	00012597          	auipc	a1,0x12
    80020464:	25858593          	addi	a1,a1,600 # 800326b8 <__func__.0+0x2d0>
    80020468:	00012517          	auipc	a0,0x12
    8002046c:	2f850513          	addi	a0,a0,760 # 80032760 <__func__.0+0x378>
    80020470:	0540f0ef          	jal	8002f4c4 <printf>
    80020474:	4511                	li	a0,4
    80020476:	a9fe00ef          	jal	80000f14 <goto_priv>
    8002047a:	afce10ef          	jal	80001776 <reset_state>
}
    8002047e:	60e2                	ld	ra,24(sp)
    80020480:	8522                	mv	a0,s0
    80020482:	6442                	ld	s0,16(sp)
    80020484:	64a2                	ld	s1,8(sp)
    80020486:	6105                	addi	sp,sp,32
    80020488:	8082                	ret

000000008002048a <timecmp_test_2>:

bool timecmp_test_2() {
    8002048a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002048c:	00011597          	auipc	a1,0x11
    80020490:	49c58593          	addi	a1,a1,1180 # 80031928 <__func__.19>
    80020494:	00012517          	auipc	a0,0x12
    80020498:	23450513          	addi	a0,a0,564 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_2() {
    8002049c:	ec06                	sd	ra,24(sp)
    8002049e:	e822                	sd	s0,16(sp)
    800204a0:	e426                	sd	s1,8(sp)
    TEST_START();    
    800204a2:	0220f0ef          	jal	8002f4c4 <printf>
    800204a6:	4529                	li	a0,10
    800204a8:	50b0d0ef          	jal	8002e1b2 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800204ac:	57fd                	li	a5,-1
    800204ae:	17fe                	slli	a5,a5,0x3f
    800204b0:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HS);
    800204b4:	450d                	li	a0,3
    800204b6:	a5fe00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    800204ba:	95fe00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800204be:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800204c2:	08c00593          	li	a1,140
    800204c6:	0001a617          	auipc	a2,0x1a
    800204ca:	14a60613          	addi	a2,a2,330 # 8003a610 <__func__.0+0x8228>
    800204ce:	00012517          	auipc	a0,0x12
    800204d2:	21250513          	addi	a0,a0,530 # 800326e0 <__func__.0+0x2f8>
    800204d6:	7ef0e0ef          	jal	8002f4c4 <printf>
    800204da:	0003c797          	auipc	a5,0x3c
    800204de:	b377c783          	lbu	a5,-1225(a5) # 8005c011 <excpt+0x1>
    800204e2:	0003c497          	auipc	s1,0x3c
    800204e6:	b2e48493          	addi	s1,s1,-1234 # 8005c010 <excpt>
    800204ea:	00012597          	auipc	a1,0x12
    800204ee:	1ce58593          	addi	a1,a1,462 # 800326b8 <__func__.0+0x2d0>
    800204f2:	cf89                	beqz	a5,8002050c <timecmp_test_2+0x82>
    800204f4:	6498                	ld	a4,8(s1)
    800204f6:	4789                	li	a5,2
    800204f8:	00012597          	auipc	a1,0x12
    800204fc:	1b058593          	addi	a1,a1,432 # 800326a8 <__func__.0+0x2c0>
    80020500:	00f70663          	beq	a4,a5,8002050c <timecmp_test_2+0x82>
    80020504:	00012597          	auipc	a1,0x12
    80020508:	1b458593          	addi	a1,a1,436 # 800326b8 <__func__.0+0x2d0>
    8002050c:	00012517          	auipc	a0,0x12
    80020510:	1ec50513          	addi	a0,a0,492 # 800326f8 <__func__.0+0x310>
    80020514:	7b10e0ef          	jal	8002f4c4 <printf>
    80020518:	0003c797          	auipc	a5,0x3c
    8002051c:	af97c783          	lbu	a5,-1287(a5) # 8005c011 <excpt+0x1>
    80020520:	c789                	beqz	a5,8002052a <timecmp_test_2+0xa0>
    80020522:	6498                	ld	a4,8(s1)
    80020524:	4789                	li	a5,2
    80020526:	00f70c63          	beq	a4,a5,8002053e <timecmp_test_2+0xb4>
    8002052a:	00012517          	auipc	a0,0x12
    8002052e:	1d650513          	addi	a0,a0,470 # 80032700 <__func__.0+0x318>
    80020532:	7930e0ef          	jal	8002f4c4 <printf>
    80020536:	02900513          	li	a0,41
    8002053a:	4790d0ef          	jal	8002e1b2 <putchar>
    8002053e:	4529                	li	a0,10
    80020540:	4730d0ef          	jal	8002e1b2 <putchar>
    80020544:	0003c417          	auipc	s0,0x3c
    80020548:	acd44403          	lbu	s0,-1331(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002054c:	00012597          	auipc	a1,0x12
    80020550:	16c58593          	addi	a1,a1,364 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020554:	cc11                	beqz	s0,80020570 <timecmp_test_2+0xe6>
    80020556:	6498                	ld	a4,8(s1)
    80020558:	4789                	li	a5,2
    TEST_END(); 
    8002055a:	00012597          	auipc	a1,0x12
    8002055e:	14e58593          	addi	a1,a1,334 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020562:	00f70763          	beq	a4,a5,80020570 <timecmp_test_2+0xe6>
    80020566:	4401                	li	s0,0
    TEST_END(); 
    80020568:	00012597          	auipc	a1,0x12
    8002056c:	15058593          	addi	a1,a1,336 # 800326b8 <__func__.0+0x2d0>
    80020570:	00012517          	auipc	a0,0x12
    80020574:	1f050513          	addi	a0,a0,496 # 80032760 <__func__.0+0x378>
    80020578:	74d0e0ef          	jal	8002f4c4 <printf>
    8002057c:	4511                	li	a0,4
    8002057e:	997e00ef          	jal	80000f14 <goto_priv>
    80020582:	9f4e10ef          	jal	80001776 <reset_state>
}
    80020586:	60e2                	ld	ra,24(sp)
    80020588:	8522                	mv	a0,s0
    8002058a:	6442                	ld	s0,16(sp)
    8002058c:	64a2                	ld	s1,8(sp)
    8002058e:	6105                	addi	sp,sp,32
    80020590:	8082                	ret

0000000080020592 <timecmp_test_3>:

bool timecmp_test_3() {
    80020592:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020594:	00011597          	auipc	a1,0x11
    80020598:	3a458593          	addi	a1,a1,932 # 80031938 <__func__.18>
    8002059c:	00012517          	auipc	a0,0x12
    800205a0:	12c50513          	addi	a0,a0,300 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_3() {
    800205a4:	ec06                	sd	ra,24(sp)
    800205a6:	e822                	sd	s0,16(sp)
    800205a8:	e426                	sd	s1,8(sp)
    TEST_START();    
    800205aa:	71b0e0ef          	jal	8002f4c4 <printf>
    800205ae:	4529                	li	a0,10
    800205b0:	4030d0ef          	jal	8002e1b2 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800205b4:	57fd                	li	a5,-1
    800205b6:	17fe                	slli	a5,a5,0x3f
    800205b8:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VS); 
    800205bc:	4509                	li	a0,2
    800205be:	957e00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    800205c2:	857e00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800205c6:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800205ca:	08c00593          	li	a1,140
    800205ce:	0001a617          	auipc	a2,0x1a
    800205d2:	09a60613          	addi	a2,a2,154 # 8003a668 <__func__.0+0x8280>
    800205d6:	00012517          	auipc	a0,0x12
    800205da:	10a50513          	addi	a0,a0,266 # 800326e0 <__func__.0+0x2f8>
    800205de:	6e70e0ef          	jal	8002f4c4 <printf>
    800205e2:	0003c797          	auipc	a5,0x3c
    800205e6:	a2f7c783          	lbu	a5,-1489(a5) # 8005c011 <excpt+0x1>
    800205ea:	0003c497          	auipc	s1,0x3c
    800205ee:	a2648493          	addi	s1,s1,-1498 # 8005c010 <excpt>
    800205f2:	00012597          	auipc	a1,0x12
    800205f6:	0c658593          	addi	a1,a1,198 # 800326b8 <__func__.0+0x2d0>
    800205fa:	cf89                	beqz	a5,80020614 <timecmp_test_3+0x82>
    800205fc:	6498                	ld	a4,8(s1)
    800205fe:	4789                	li	a5,2
    80020600:	00012597          	auipc	a1,0x12
    80020604:	0a858593          	addi	a1,a1,168 # 800326a8 <__func__.0+0x2c0>
    80020608:	00f70663          	beq	a4,a5,80020614 <timecmp_test_3+0x82>
    8002060c:	00012597          	auipc	a1,0x12
    80020610:	0ac58593          	addi	a1,a1,172 # 800326b8 <__func__.0+0x2d0>
    80020614:	00012517          	auipc	a0,0x12
    80020618:	0e450513          	addi	a0,a0,228 # 800326f8 <__func__.0+0x310>
    8002061c:	6a90e0ef          	jal	8002f4c4 <printf>
    80020620:	0003c797          	auipc	a5,0x3c
    80020624:	9f17c783          	lbu	a5,-1551(a5) # 8005c011 <excpt+0x1>
    80020628:	c789                	beqz	a5,80020632 <timecmp_test_3+0xa0>
    8002062a:	6498                	ld	a4,8(s1)
    8002062c:	4789                	li	a5,2
    8002062e:	00f70c63          	beq	a4,a5,80020646 <timecmp_test_3+0xb4>
    80020632:	00012517          	auipc	a0,0x12
    80020636:	0ce50513          	addi	a0,a0,206 # 80032700 <__func__.0+0x318>
    8002063a:	68b0e0ef          	jal	8002f4c4 <printf>
    8002063e:	02900513          	li	a0,41
    80020642:	3710d0ef          	jal	8002e1b2 <putchar>
    80020646:	4529                	li	a0,10
    80020648:	36b0d0ef          	jal	8002e1b2 <putchar>
    8002064c:	0003c417          	auipc	s0,0x3c
    80020650:	9c544403          	lbu	s0,-1595(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020654:	00012597          	auipc	a1,0x12
    80020658:	06458593          	addi	a1,a1,100 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002065c:	cc11                	beqz	s0,80020678 <timecmp_test_3+0xe6>
    8002065e:	6498                	ld	a4,8(s1)
    80020660:	4789                	li	a5,2
    TEST_END(); 
    80020662:	00012597          	auipc	a1,0x12
    80020666:	04658593          	addi	a1,a1,70 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002066a:	00f70763          	beq	a4,a5,80020678 <timecmp_test_3+0xe6>
    8002066e:	4401                	li	s0,0
    TEST_END(); 
    80020670:	00012597          	auipc	a1,0x12
    80020674:	04858593          	addi	a1,a1,72 # 800326b8 <__func__.0+0x2d0>
    80020678:	00012517          	auipc	a0,0x12
    8002067c:	0e850513          	addi	a0,a0,232 # 80032760 <__func__.0+0x378>
    80020680:	6450e0ef          	jal	8002f4c4 <printf>
    80020684:	4511                	li	a0,4
    80020686:	88fe00ef          	jal	80000f14 <goto_priv>
    8002068a:	8ece10ef          	jal	80001776 <reset_state>
}
    8002068e:	60e2                	ld	ra,24(sp)
    80020690:	8522                	mv	a0,s0
    80020692:	6442                	ld	s0,16(sp)
    80020694:	64a2                	ld	s1,8(sp)
    80020696:	6105                	addi	sp,sp,32
    80020698:	8082                	ret

000000008002069a <timecmp_test_4>:

bool timecmp_test_4() {
    8002069a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002069c:	00011597          	auipc	a1,0x11
    800206a0:	2ac58593          	addi	a1,a1,684 # 80031948 <__func__.17>
    800206a4:	00012517          	auipc	a0,0x12
    800206a8:	02450513          	addi	a0,a0,36 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_4() {
    800206ac:	ec06                	sd	ra,24(sp)
    800206ae:	e822                	sd	s0,16(sp)
    800206b0:	e426                	sd	s1,8(sp)
    TEST_START();    
    800206b2:	6130e0ef          	jal	8002f4c4 <printf>
    800206b6:	4529                	li	a0,10
    800206b8:	2fb0d0ef          	jal	8002e1b2 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800206bc:	57fd                	li	a5,-1
    800206be:	17fe                	slli	a5,a5,0x3f
    800206c0:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HU);
    800206c4:	4505                	li	a0,1
    800206c6:	84fe00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    800206ca:	f4ee00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800206ce:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800206d2:	08c00593          	li	a1,140
    800206d6:	0001a617          	auipc	a2,0x1a
    800206da:	fea60613          	addi	a2,a2,-22 # 8003a6c0 <__func__.0+0x82d8>
    800206de:	00012517          	auipc	a0,0x12
    800206e2:	00250513          	addi	a0,a0,2 # 800326e0 <__func__.0+0x2f8>
    800206e6:	5df0e0ef          	jal	8002f4c4 <printf>
    800206ea:	0003c797          	auipc	a5,0x3c
    800206ee:	9277c783          	lbu	a5,-1753(a5) # 8005c011 <excpt+0x1>
    800206f2:	0003c497          	auipc	s1,0x3c
    800206f6:	91e48493          	addi	s1,s1,-1762 # 8005c010 <excpt>
    800206fa:	00012597          	auipc	a1,0x12
    800206fe:	fbe58593          	addi	a1,a1,-66 # 800326b8 <__func__.0+0x2d0>
    80020702:	cf89                	beqz	a5,8002071c <timecmp_test_4+0x82>
    80020704:	6498                	ld	a4,8(s1)
    80020706:	4789                	li	a5,2
    80020708:	00012597          	auipc	a1,0x12
    8002070c:	fa058593          	addi	a1,a1,-96 # 800326a8 <__func__.0+0x2c0>
    80020710:	00f70663          	beq	a4,a5,8002071c <timecmp_test_4+0x82>
    80020714:	00012597          	auipc	a1,0x12
    80020718:	fa458593          	addi	a1,a1,-92 # 800326b8 <__func__.0+0x2d0>
    8002071c:	00012517          	auipc	a0,0x12
    80020720:	fdc50513          	addi	a0,a0,-36 # 800326f8 <__func__.0+0x310>
    80020724:	5a10e0ef          	jal	8002f4c4 <printf>
    80020728:	0003c797          	auipc	a5,0x3c
    8002072c:	8e97c783          	lbu	a5,-1815(a5) # 8005c011 <excpt+0x1>
    80020730:	c789                	beqz	a5,8002073a <timecmp_test_4+0xa0>
    80020732:	6498                	ld	a4,8(s1)
    80020734:	4789                	li	a5,2
    80020736:	00f70c63          	beq	a4,a5,8002074e <timecmp_test_4+0xb4>
    8002073a:	00012517          	auipc	a0,0x12
    8002073e:	fc650513          	addi	a0,a0,-58 # 80032700 <__func__.0+0x318>
    80020742:	5830e0ef          	jal	8002f4c4 <printf>
    80020746:	02900513          	li	a0,41
    8002074a:	2690d0ef          	jal	8002e1b2 <putchar>
    8002074e:	4529                	li	a0,10
    80020750:	2630d0ef          	jal	8002e1b2 <putchar>
    80020754:	0003c417          	auipc	s0,0x3c
    80020758:	8bd44403          	lbu	s0,-1859(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002075c:	00012597          	auipc	a1,0x12
    80020760:	f5c58593          	addi	a1,a1,-164 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020764:	cc11                	beqz	s0,80020780 <timecmp_test_4+0xe6>
    80020766:	6498                	ld	a4,8(s1)
    80020768:	4789                	li	a5,2
    TEST_END(); 
    8002076a:	00012597          	auipc	a1,0x12
    8002076e:	f3e58593          	addi	a1,a1,-194 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020772:	00f70763          	beq	a4,a5,80020780 <timecmp_test_4+0xe6>
    80020776:	4401                	li	s0,0
    TEST_END(); 
    80020778:	00012597          	auipc	a1,0x12
    8002077c:	f4058593          	addi	a1,a1,-192 # 800326b8 <__func__.0+0x2d0>
    80020780:	00012517          	auipc	a0,0x12
    80020784:	fe050513          	addi	a0,a0,-32 # 80032760 <__func__.0+0x378>
    80020788:	53d0e0ef          	jal	8002f4c4 <printf>
    8002078c:	4511                	li	a0,4
    8002078e:	f86e00ef          	jal	80000f14 <goto_priv>
    80020792:	fe5e00ef          	jal	80001776 <reset_state>
}
    80020796:	60e2                	ld	ra,24(sp)
    80020798:	8522                	mv	a0,s0
    8002079a:	6442                	ld	s0,16(sp)
    8002079c:	64a2                	ld	s1,8(sp)
    8002079e:	6105                	addi	sp,sp,32
    800207a0:	8082                	ret

00000000800207a2 <timecmp_test_5>:

bool timecmp_test_5() {
    800207a2:	1101                	addi	sp,sp,-32

    TEST_START();    
    800207a4:	00011597          	auipc	a1,0x11
    800207a8:	1b458593          	addi	a1,a1,436 # 80031958 <__func__.16>
    800207ac:	00012517          	auipc	a0,0x12
    800207b0:	f1c50513          	addi	a0,a0,-228 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_5() {
    800207b4:	ec06                	sd	ra,24(sp)
    800207b6:	e822                	sd	s0,16(sp)
    800207b8:	e426                	sd	s1,8(sp)
    TEST_START();    
    800207ba:	50b0e0ef          	jal	8002f4c4 <printf>
    800207be:	4529                	li	a0,10
    800207c0:	1f30d0ef          	jal	8002e1b2 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800207c4:	57fd                	li	a5,-1
    800207c6:	17fe                	slli	a5,a5,0x3f
    800207c8:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VU);
    800207cc:	4501                	li	a0,0
    800207ce:	f46e00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    800207d2:	e46e00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800207d6:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800207da:	08c00593          	li	a1,140
    800207de:	0001a617          	auipc	a2,0x1a
    800207e2:	f3a60613          	addi	a2,a2,-198 # 8003a718 <__func__.0+0x8330>
    800207e6:	00012517          	auipc	a0,0x12
    800207ea:	efa50513          	addi	a0,a0,-262 # 800326e0 <__func__.0+0x2f8>
    800207ee:	4d70e0ef          	jal	8002f4c4 <printf>
    800207f2:	0003c797          	auipc	a5,0x3c
    800207f6:	81f7c783          	lbu	a5,-2017(a5) # 8005c011 <excpt+0x1>
    800207fa:	0003c497          	auipc	s1,0x3c
    800207fe:	81648493          	addi	s1,s1,-2026 # 8005c010 <excpt>
    80020802:	00012597          	auipc	a1,0x12
    80020806:	eb658593          	addi	a1,a1,-330 # 800326b8 <__func__.0+0x2d0>
    8002080a:	cf89                	beqz	a5,80020824 <timecmp_test_5+0x82>
    8002080c:	6498                	ld	a4,8(s1)
    8002080e:	4789                	li	a5,2
    80020810:	00012597          	auipc	a1,0x12
    80020814:	e9858593          	addi	a1,a1,-360 # 800326a8 <__func__.0+0x2c0>
    80020818:	00f70663          	beq	a4,a5,80020824 <timecmp_test_5+0x82>
    8002081c:	00012597          	auipc	a1,0x12
    80020820:	e9c58593          	addi	a1,a1,-356 # 800326b8 <__func__.0+0x2d0>
    80020824:	00012517          	auipc	a0,0x12
    80020828:	ed450513          	addi	a0,a0,-300 # 800326f8 <__func__.0+0x310>
    8002082c:	4990e0ef          	jal	8002f4c4 <printf>
    80020830:	0003b797          	auipc	a5,0x3b
    80020834:	7e17c783          	lbu	a5,2017(a5) # 8005c011 <excpt+0x1>
    80020838:	c789                	beqz	a5,80020842 <timecmp_test_5+0xa0>
    8002083a:	6498                	ld	a4,8(s1)
    8002083c:	4789                	li	a5,2
    8002083e:	00f70c63          	beq	a4,a5,80020856 <timecmp_test_5+0xb4>
    80020842:	00012517          	auipc	a0,0x12
    80020846:	ebe50513          	addi	a0,a0,-322 # 80032700 <__func__.0+0x318>
    8002084a:	47b0e0ef          	jal	8002f4c4 <printf>
    8002084e:	02900513          	li	a0,41
    80020852:	1610d0ef          	jal	8002e1b2 <putchar>
    80020856:	4529                	li	a0,10
    80020858:	15b0d0ef          	jal	8002e1b2 <putchar>
    8002085c:	0003b417          	auipc	s0,0x3b
    80020860:	7b544403          	lbu	s0,1973(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020864:	00012597          	auipc	a1,0x12
    80020868:	e5458593          	addi	a1,a1,-428 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002086c:	cc11                	beqz	s0,80020888 <timecmp_test_5+0xe6>
    8002086e:	6498                	ld	a4,8(s1)
    80020870:	4789                	li	a5,2
    TEST_END(); 
    80020872:	00012597          	auipc	a1,0x12
    80020876:	e3658593          	addi	a1,a1,-458 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002087a:	00f70763          	beq	a4,a5,80020888 <timecmp_test_5+0xe6>
    8002087e:	4401                	li	s0,0
    TEST_END(); 
    80020880:	00012597          	auipc	a1,0x12
    80020884:	e3858593          	addi	a1,a1,-456 # 800326b8 <__func__.0+0x2d0>
    80020888:	00012517          	auipc	a0,0x12
    8002088c:	ed850513          	addi	a0,a0,-296 # 80032760 <__func__.0+0x378>
    80020890:	4350e0ef          	jal	8002f4c4 <printf>
    80020894:	4511                	li	a0,4
    80020896:	e7ee00ef          	jal	80000f14 <goto_priv>
    8002089a:	edde00ef          	jal	80001776 <reset_state>
}
    8002089e:	60e2                	ld	ra,24(sp)
    800208a0:	8522                	mv	a0,s0
    800208a2:	6442                	ld	s0,16(sp)
    800208a4:	64a2                	ld	s1,8(sp)
    800208a6:	6105                	addi	sp,sp,32
    800208a8:	8082                	ret

00000000800208aa <timecmp_test_6>:

bool timecmp_test_6() {
    800208aa:	1101                	addi	sp,sp,-32

    TEST_START();    
    800208ac:	00011597          	auipc	a1,0x11
    800208b0:	0bc58593          	addi	a1,a1,188 # 80031968 <__func__.15>
    800208b4:	00012517          	auipc	a0,0x12
    800208b8:	e1450513          	addi	a0,a0,-492 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_6() {
    800208bc:	ec06                	sd	ra,24(sp)
    800208be:	e822                	sd	s0,16(sp)
    800208c0:	e426                	sd	s1,8(sp)
    TEST_START();    
    800208c2:	4030e0ef          	jal	8002f4c4 <printf>
    800208c6:	4529                	li	a0,10
    800208c8:	0eb0d0ef          	jal	8002e1b2 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800208cc:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    800208d0:	450d                	li	a0,3
    800208d2:	e42e00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    800208d6:	d42e00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    800208da:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800208de:	08c00593          	li	a1,140
    800208e2:	0001a617          	auipc	a2,0x1a
    800208e6:	e8e60613          	addi	a2,a2,-370 # 8003a770 <__func__.0+0x8388>
    800208ea:	00012517          	auipc	a0,0x12
    800208ee:	df650513          	addi	a0,a0,-522 # 800326e0 <__func__.0+0x2f8>
    800208f2:	3d30e0ef          	jal	8002f4c4 <printf>
    800208f6:	0003b797          	auipc	a5,0x3b
    800208fa:	71b7c783          	lbu	a5,1819(a5) # 8005c011 <excpt+0x1>
    800208fe:	0003b497          	auipc	s1,0x3b
    80020902:	71248493          	addi	s1,s1,1810 # 8005c010 <excpt>
    80020906:	00012597          	auipc	a1,0x12
    8002090a:	db258593          	addi	a1,a1,-590 # 800326b8 <__func__.0+0x2d0>
    8002090e:	cf89                	beqz	a5,80020928 <timecmp_test_6+0x7e>
    80020910:	6498                	ld	a4,8(s1)
    80020912:	4789                	li	a5,2
    80020914:	00012597          	auipc	a1,0x12
    80020918:	d9458593          	addi	a1,a1,-620 # 800326a8 <__func__.0+0x2c0>
    8002091c:	00f70663          	beq	a4,a5,80020928 <timecmp_test_6+0x7e>
    80020920:	00012597          	auipc	a1,0x12
    80020924:	d9858593          	addi	a1,a1,-616 # 800326b8 <__func__.0+0x2d0>
    80020928:	00012517          	auipc	a0,0x12
    8002092c:	dd050513          	addi	a0,a0,-560 # 800326f8 <__func__.0+0x310>
    80020930:	3950e0ef          	jal	8002f4c4 <printf>
    80020934:	0003b797          	auipc	a5,0x3b
    80020938:	6dd7c783          	lbu	a5,1757(a5) # 8005c011 <excpt+0x1>
    8002093c:	c789                	beqz	a5,80020946 <timecmp_test_6+0x9c>
    8002093e:	6498                	ld	a4,8(s1)
    80020940:	4789                	li	a5,2
    80020942:	00f70c63          	beq	a4,a5,8002095a <timecmp_test_6+0xb0>
    80020946:	00012517          	auipc	a0,0x12
    8002094a:	dba50513          	addi	a0,a0,-582 # 80032700 <__func__.0+0x318>
    8002094e:	3770e0ef          	jal	8002f4c4 <printf>
    80020952:	02900513          	li	a0,41
    80020956:	05d0d0ef          	jal	8002e1b2 <putchar>
    8002095a:	4529                	li	a0,10
    8002095c:	0570d0ef          	jal	8002e1b2 <putchar>
    80020960:	0003b417          	auipc	s0,0x3b
    80020964:	6b144403          	lbu	s0,1713(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020968:	00012597          	auipc	a1,0x12
    8002096c:	d5058593          	addi	a1,a1,-688 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020970:	cc11                	beqz	s0,8002098c <timecmp_test_6+0xe2>
    80020972:	6498                	ld	a4,8(s1)
    80020974:	4789                	li	a5,2
    TEST_END(); 
    80020976:	00012597          	auipc	a1,0x12
    8002097a:	d3258593          	addi	a1,a1,-718 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8002097e:	00f70763          	beq	a4,a5,8002098c <timecmp_test_6+0xe2>
    80020982:	4401                	li	s0,0
    TEST_END(); 
    80020984:	00012597          	auipc	a1,0x12
    80020988:	d3458593          	addi	a1,a1,-716 # 800326b8 <__func__.0+0x2d0>
    8002098c:	00012517          	auipc	a0,0x12
    80020990:	dd450513          	addi	a0,a0,-556 # 80032760 <__func__.0+0x378>
    80020994:	3310e0ef          	jal	8002f4c4 <printf>
    80020998:	4511                	li	a0,4
    8002099a:	d7ae00ef          	jal	80000f14 <goto_priv>
    8002099e:	dd9e00ef          	jal	80001776 <reset_state>
}
    800209a2:	60e2                	ld	ra,24(sp)
    800209a4:	8522                	mv	a0,s0
    800209a6:	6442                	ld	s0,16(sp)
    800209a8:	64a2                	ld	s1,8(sp)
    800209aa:	6105                	addi	sp,sp,32
    800209ac:	8082                	ret

00000000800209ae <timecmp_test_7>:

bool timecmp_test_7() {
    800209ae:	1101                	addi	sp,sp,-32

    TEST_START();    
    800209b0:	00011597          	auipc	a1,0x11
    800209b4:	fc858593          	addi	a1,a1,-56 # 80031978 <__func__.14>
    800209b8:	00012517          	auipc	a0,0x12
    800209bc:	d1050513          	addi	a0,a0,-752 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_7() {
    800209c0:	ec06                	sd	ra,24(sp)
    800209c2:	e822                	sd	s0,16(sp)
    800209c4:	e426                	sd	s1,8(sp)
    TEST_START();    
    800209c6:	2ff0e0ef          	jal	8002f4c4 <printf>
    800209ca:	4529                	li	a0,10
    800209cc:	7e60d0ef          	jal	8002e1b2 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800209d0:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    800209d4:	4509                	li	a0,2
    800209d6:	d3ee00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    800209da:	c3ee00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    800209de:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800209e2:	08c00593          	li	a1,140
    800209e6:	0001a617          	auipc	a2,0x1a
    800209ea:	de260613          	addi	a2,a2,-542 # 8003a7c8 <__func__.0+0x83e0>
    800209ee:	00012517          	auipc	a0,0x12
    800209f2:	cf250513          	addi	a0,a0,-782 # 800326e0 <__func__.0+0x2f8>
    800209f6:	2cf0e0ef          	jal	8002f4c4 <printf>
    800209fa:	0003b797          	auipc	a5,0x3b
    800209fe:	6177c783          	lbu	a5,1559(a5) # 8005c011 <excpt+0x1>
    80020a02:	0003b497          	auipc	s1,0x3b
    80020a06:	60e48493          	addi	s1,s1,1550 # 8005c010 <excpt>
    80020a0a:	00012597          	auipc	a1,0x12
    80020a0e:	cae58593          	addi	a1,a1,-850 # 800326b8 <__func__.0+0x2d0>
    80020a12:	cf89                	beqz	a5,80020a2c <timecmp_test_7+0x7e>
    80020a14:	6498                	ld	a4,8(s1)
    80020a16:	4789                	li	a5,2
    80020a18:	00012597          	auipc	a1,0x12
    80020a1c:	c9058593          	addi	a1,a1,-880 # 800326a8 <__func__.0+0x2c0>
    80020a20:	00f70663          	beq	a4,a5,80020a2c <timecmp_test_7+0x7e>
    80020a24:	00012597          	auipc	a1,0x12
    80020a28:	c9458593          	addi	a1,a1,-876 # 800326b8 <__func__.0+0x2d0>
    80020a2c:	00012517          	auipc	a0,0x12
    80020a30:	ccc50513          	addi	a0,a0,-820 # 800326f8 <__func__.0+0x310>
    80020a34:	2910e0ef          	jal	8002f4c4 <printf>
    80020a38:	0003b797          	auipc	a5,0x3b
    80020a3c:	5d97c783          	lbu	a5,1497(a5) # 8005c011 <excpt+0x1>
    80020a40:	c789                	beqz	a5,80020a4a <timecmp_test_7+0x9c>
    80020a42:	6498                	ld	a4,8(s1)
    80020a44:	4789                	li	a5,2
    80020a46:	00f70c63          	beq	a4,a5,80020a5e <timecmp_test_7+0xb0>
    80020a4a:	00012517          	auipc	a0,0x12
    80020a4e:	cb650513          	addi	a0,a0,-842 # 80032700 <__func__.0+0x318>
    80020a52:	2730e0ef          	jal	8002f4c4 <printf>
    80020a56:	02900513          	li	a0,41
    80020a5a:	7580d0ef          	jal	8002e1b2 <putchar>
    80020a5e:	4529                	li	a0,10
    80020a60:	7520d0ef          	jal	8002e1b2 <putchar>
    80020a64:	0003b417          	auipc	s0,0x3b
    80020a68:	5ad44403          	lbu	s0,1453(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020a6c:	00012597          	auipc	a1,0x12
    80020a70:	c4c58593          	addi	a1,a1,-948 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020a74:	cc11                	beqz	s0,80020a90 <timecmp_test_7+0xe2>
    80020a76:	6498                	ld	a4,8(s1)
    80020a78:	4789                	li	a5,2
    TEST_END(); 
    80020a7a:	00012597          	auipc	a1,0x12
    80020a7e:	c2e58593          	addi	a1,a1,-978 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020a82:	00f70763          	beq	a4,a5,80020a90 <timecmp_test_7+0xe2>
    80020a86:	4401                	li	s0,0
    TEST_END(); 
    80020a88:	00012597          	auipc	a1,0x12
    80020a8c:	c3058593          	addi	a1,a1,-976 # 800326b8 <__func__.0+0x2d0>
    80020a90:	00012517          	auipc	a0,0x12
    80020a94:	cd050513          	addi	a0,a0,-816 # 80032760 <__func__.0+0x378>
    80020a98:	22d0e0ef          	jal	8002f4c4 <printf>
    80020a9c:	4511                	li	a0,4
    80020a9e:	c76e00ef          	jal	80000f14 <goto_priv>
    80020aa2:	cd5e00ef          	jal	80001776 <reset_state>
}
    80020aa6:	60e2                	ld	ra,24(sp)
    80020aa8:	8522                	mv	a0,s0
    80020aaa:	6442                	ld	s0,16(sp)
    80020aac:	64a2                	ld	s1,8(sp)
    80020aae:	6105                	addi	sp,sp,32
    80020ab0:	8082                	ret

0000000080020ab2 <timecmp_test_8>:

bool timecmp_test_8() {
    80020ab2:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020ab4:	00011597          	auipc	a1,0x11
    80020ab8:	ed458593          	addi	a1,a1,-300 # 80031988 <__func__.13>
    80020abc:	00012517          	auipc	a0,0x12
    80020ac0:	c0c50513          	addi	a0,a0,-1012 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_8() {
    80020ac4:	ec06                	sd	ra,24(sp)
    80020ac6:	e822                	sd	s0,16(sp)
    80020ac8:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020aca:	1fb0e0ef          	jal	8002f4c4 <printf>
    80020ace:	4529                	li	a0,10
    80020ad0:	6e20d0ef          	jal	8002e1b2 <putchar>

    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020ad4:	57fd                	li	a5,-1
    80020ad6:	17fe                	slli	a5,a5,0x3f
    80020ad8:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020adc:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020ae0:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020ae4:	60617073          	csrci	hcounteren,2

    goto_priv(PRIV_VS);
    80020ae8:	4509                	li	a0,2
    80020aea:	c2ae00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020aee:	b2ae00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020af2:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80020af6:	08c00593          	li	a1,140
    80020afa:	0001a617          	auipc	a2,0x1a
    80020afe:	d2660613          	addi	a2,a2,-730 # 8003a820 <__func__.0+0x8438>
    80020b02:	00012517          	auipc	a0,0x12
    80020b06:	bde50513          	addi	a0,a0,-1058 # 800326e0 <__func__.0+0x2f8>
    80020b0a:	1bb0e0ef          	jal	8002f4c4 <printf>
    80020b0e:	0003b797          	auipc	a5,0x3b
    80020b12:	5037c783          	lbu	a5,1283(a5) # 8005c011 <excpt+0x1>
    80020b16:	0003b497          	auipc	s1,0x3b
    80020b1a:	4fa48493          	addi	s1,s1,1274 # 8005c010 <excpt>
    80020b1e:	00012597          	auipc	a1,0x12
    80020b22:	b9a58593          	addi	a1,a1,-1126 # 800326b8 <__func__.0+0x2d0>
    80020b26:	cf89                	beqz	a5,80020b40 <timecmp_test_8+0x8e>
    80020b28:	6498                	ld	a4,8(s1)
    80020b2a:	47d9                	li	a5,22
    80020b2c:	00012597          	auipc	a1,0x12
    80020b30:	b7c58593          	addi	a1,a1,-1156 # 800326a8 <__func__.0+0x2c0>
    80020b34:	00f70663          	beq	a4,a5,80020b40 <timecmp_test_8+0x8e>
    80020b38:	00012597          	auipc	a1,0x12
    80020b3c:	b8058593          	addi	a1,a1,-1152 # 800326b8 <__func__.0+0x2d0>
    80020b40:	00012517          	auipc	a0,0x12
    80020b44:	bb850513          	addi	a0,a0,-1096 # 800326f8 <__func__.0+0x310>
    80020b48:	17d0e0ef          	jal	8002f4c4 <printf>
    80020b4c:	0003b797          	auipc	a5,0x3b
    80020b50:	4c57c783          	lbu	a5,1221(a5) # 8005c011 <excpt+0x1>
    80020b54:	c789                	beqz	a5,80020b5e <timecmp_test_8+0xac>
    80020b56:	6498                	ld	a4,8(s1)
    80020b58:	47d9                	li	a5,22
    80020b5a:	00f70c63          	beq	a4,a5,80020b72 <timecmp_test_8+0xc0>
    80020b5e:	00012517          	auipc	a0,0x12
    80020b62:	ba250513          	addi	a0,a0,-1118 # 80032700 <__func__.0+0x318>
    80020b66:	15f0e0ef          	jal	8002f4c4 <printf>
    80020b6a:	02900513          	li	a0,41
    80020b6e:	6440d0ef          	jal	8002e1b2 <putchar>
    80020b72:	4529                	li	a0,10
    80020b74:	63e0d0ef          	jal	8002e1b2 <putchar>
    80020b78:	0003b417          	auipc	s0,0x3b
    80020b7c:	49944403          	lbu	s0,1177(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020b80:	00012597          	auipc	a1,0x12
    80020b84:	b3858593          	addi	a1,a1,-1224 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80020b88:	cc11                	beqz	s0,80020ba4 <timecmp_test_8+0xf2>
    80020b8a:	6498                	ld	a4,8(s1)
    80020b8c:	47d9                	li	a5,22
    TEST_END(); 
    80020b8e:	00012597          	auipc	a1,0x12
    80020b92:	b1a58593          	addi	a1,a1,-1254 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80020b96:	00f70763          	beq	a4,a5,80020ba4 <timecmp_test_8+0xf2>
    80020b9a:	4401                	li	s0,0
    TEST_END(); 
    80020b9c:	00012597          	auipc	a1,0x12
    80020ba0:	b1c58593          	addi	a1,a1,-1252 # 800326b8 <__func__.0+0x2d0>
    80020ba4:	00012517          	auipc	a0,0x12
    80020ba8:	bbc50513          	addi	a0,a0,-1092 # 80032760 <__func__.0+0x378>
    80020bac:	1190e0ef          	jal	8002f4c4 <printf>
    80020bb0:	4511                	li	a0,4
    80020bb2:	b62e00ef          	jal	80000f14 <goto_priv>
    80020bb6:	bc1e00ef          	jal	80001776 <reset_state>
}
    80020bba:	60e2                	ld	ra,24(sp)
    80020bbc:	8522                	mv	a0,s0
    80020bbe:	6442                	ld	s0,16(sp)
    80020bc0:	64a2                	ld	s1,8(sp)
    80020bc2:	6105                	addi	sp,sp,32
    80020bc4:	8082                	ret

0000000080020bc6 <timecmp_test_9>:

bool timecmp_test_9() {
    80020bc6:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020bc8:	00011597          	auipc	a1,0x11
    80020bcc:	dd058593          	addi	a1,a1,-560 # 80031998 <__func__.12>
    80020bd0:	00012517          	auipc	a0,0x12
    80020bd4:	af850513          	addi	a0,a0,-1288 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_9() {
    80020bd8:	ec06                	sd	ra,24(sp)
    80020bda:	e822                	sd	s0,16(sp)
    80020bdc:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020bde:	0e70e0ef          	jal	8002f4c4 <printf>
    80020be2:	4529                	li	a0,10
    80020be4:	5ce0d0ef          	jal	8002e1b2 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020be8:	57fd                	li	a5,-1
    80020bea:	17fe                	slli	a5,a5,0x3f
    80020bec:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020bf0:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020bf4:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020bf8:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80020bfc:	4509                	li	a0,2
    80020bfe:	b16e00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020c02:	a16e00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020c06:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020c0a:	08c00593          	li	a1,140
    80020c0e:	0001a617          	auipc	a2,0x1a
    80020c12:	c9260613          	addi	a2,a2,-878 # 8003a8a0 <__func__.0+0x84b8>
    80020c16:	00012517          	auipc	a0,0x12
    80020c1a:	aca50513          	addi	a0,a0,-1334 # 800326e0 <__func__.0+0x2f8>
    80020c1e:	0a70e0ef          	jal	8002f4c4 <printf>
    80020c22:	0003b797          	auipc	a5,0x3b
    80020c26:	3ef7c783          	lbu	a5,1007(a5) # 8005c011 <excpt+0x1>
    80020c2a:	0003b497          	auipc	s1,0x3b
    80020c2e:	3e648493          	addi	s1,s1,998 # 8005c010 <excpt>
    80020c32:	00012597          	auipc	a1,0x12
    80020c36:	a8658593          	addi	a1,a1,-1402 # 800326b8 <__func__.0+0x2d0>
    80020c3a:	cf89                	beqz	a5,80020c54 <timecmp_test_9+0x8e>
    80020c3c:	6498                	ld	a4,8(s1)
    80020c3e:	47d9                	li	a5,22
    80020c40:	00012597          	auipc	a1,0x12
    80020c44:	a6858593          	addi	a1,a1,-1432 # 800326a8 <__func__.0+0x2c0>
    80020c48:	00f70663          	beq	a4,a5,80020c54 <timecmp_test_9+0x8e>
    80020c4c:	00012597          	auipc	a1,0x12
    80020c50:	a6c58593          	addi	a1,a1,-1428 # 800326b8 <__func__.0+0x2d0>
    80020c54:	00012517          	auipc	a0,0x12
    80020c58:	aa450513          	addi	a0,a0,-1372 # 800326f8 <__func__.0+0x310>
    80020c5c:	0690e0ef          	jal	8002f4c4 <printf>
    80020c60:	0003b797          	auipc	a5,0x3b
    80020c64:	3b17c783          	lbu	a5,945(a5) # 8005c011 <excpt+0x1>
    80020c68:	c789                	beqz	a5,80020c72 <timecmp_test_9+0xac>
    80020c6a:	6498                	ld	a4,8(s1)
    80020c6c:	47d9                	li	a5,22
    80020c6e:	00f70c63          	beq	a4,a5,80020c86 <timecmp_test_9+0xc0>
    80020c72:	00012517          	auipc	a0,0x12
    80020c76:	a8e50513          	addi	a0,a0,-1394 # 80032700 <__func__.0+0x318>
    80020c7a:	04b0e0ef          	jal	8002f4c4 <printf>
    80020c7e:	02900513          	li	a0,41
    80020c82:	5300d0ef          	jal	8002e1b2 <putchar>
    80020c86:	4529                	li	a0,10
    80020c88:	52a0d0ef          	jal	8002e1b2 <putchar>
    80020c8c:	0003b417          	auipc	s0,0x3b
    80020c90:	38544403          	lbu	s0,901(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020c94:	00012597          	auipc	a1,0x12
    80020c98:	a2458593          	addi	a1,a1,-1500 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020c9c:	cc11                	beqz	s0,80020cb8 <timecmp_test_9+0xf2>
    80020c9e:	6498                	ld	a4,8(s1)
    80020ca0:	47d9                	li	a5,22
    TEST_END(); 
    80020ca2:	00012597          	auipc	a1,0x12
    80020ca6:	a0658593          	addi	a1,a1,-1530 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020caa:	00f70763          	beq	a4,a5,80020cb8 <timecmp_test_9+0xf2>
    80020cae:	4401                	li	s0,0
    TEST_END(); 
    80020cb0:	00012597          	auipc	a1,0x12
    80020cb4:	a0858593          	addi	a1,a1,-1528 # 800326b8 <__func__.0+0x2d0>
    80020cb8:	00012517          	auipc	a0,0x12
    80020cbc:	aa850513          	addi	a0,a0,-1368 # 80032760 <__func__.0+0x378>
    80020cc0:	0050e0ef          	jal	8002f4c4 <printf>
    80020cc4:	4511                	li	a0,4
    80020cc6:	a4ee00ef          	jal	80000f14 <goto_priv>
    80020cca:	aade00ef          	jal	80001776 <reset_state>
}
    80020cce:	60e2                	ld	ra,24(sp)
    80020cd0:	8522                	mv	a0,s0
    80020cd2:	6442                	ld	s0,16(sp)
    80020cd4:	64a2                	ld	s1,8(sp)
    80020cd6:	6105                	addi	sp,sp,32
    80020cd8:	8082                	ret

0000000080020cda <timecmp_test_10>:

bool timecmp_test_10() {
    80020cda:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020cdc:	00011597          	auipc	a1,0x11
    80020ce0:	ccc58593          	addi	a1,a1,-820 # 800319a8 <__func__.11>
    80020ce4:	00012517          	auipc	a0,0x12
    80020ce8:	9e450513          	addi	a0,a0,-1564 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_10() {
    80020cec:	e406                	sd	ra,8(sp)
    80020cee:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020cf0:	7d40e0ef          	jal	8002f4c4 <printf>
    80020cf4:	4529                	li	a0,10
    80020cf6:	4bc0d0ef          	jal	8002e1b2 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020cfa:	57fd                	li	a5,-1
    80020cfc:	17fe                	slli	a5,a5,0x3f
    80020cfe:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020d02:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020d06:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020d0a:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80020d0e:	4509                	li	a0,2
    80020d10:	a04e00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020d14:	904e00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020d18:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020d1c:	08c00593          	li	a1,140
    80020d20:	0001a617          	auipc	a2,0x1a
    80020d24:	c0060613          	addi	a2,a2,-1024 # 8003a920 <__func__.0+0x8538>
    80020d28:	00012517          	auipc	a0,0x12
    80020d2c:	9b850513          	addi	a0,a0,-1608 # 800326e0 <__func__.0+0x2f8>
    80020d30:	7940e0ef          	jal	8002f4c4 <printf>
    80020d34:	0003b797          	auipc	a5,0x3b
    80020d38:	2dd7c783          	lbu	a5,733(a5) # 8005c011 <excpt+0x1>
    80020d3c:	00012597          	auipc	a1,0x12
    80020d40:	96c58593          	addi	a1,a1,-1684 # 800326a8 <__func__.0+0x2c0>
    80020d44:	c789                	beqz	a5,80020d4e <timecmp_test_10+0x74>
    80020d46:	00012597          	auipc	a1,0x12
    80020d4a:	97258593          	addi	a1,a1,-1678 # 800326b8 <__func__.0+0x2d0>
    80020d4e:	00012517          	auipc	a0,0x12
    80020d52:	9aa50513          	addi	a0,a0,-1622 # 800326f8 <__func__.0+0x310>
    80020d56:	76e0e0ef          	jal	8002f4c4 <printf>
    80020d5a:	0003b797          	auipc	a5,0x3b
    80020d5e:	2b77c783          	lbu	a5,695(a5) # 8005c011 <excpt+0x1>
    80020d62:	e7a1                	bnez	a5,80020daa <timecmp_test_10+0xd0>
    80020d64:	4529                	li	a0,10
    80020d66:	44c0d0ef          	jal	8002e1b2 <putchar>
    80020d6a:	0003b797          	auipc	a5,0x3b
    80020d6e:	2a77c783          	lbu	a5,679(a5) # 8005c011 <excpt+0x1>
    80020d72:	e795                	bnez	a5,80020d9e <timecmp_test_10+0xc4>
    80020d74:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020d76:	00012597          	auipc	a1,0x12
    80020d7a:	93258593          	addi	a1,a1,-1742 # 800326a8 <__func__.0+0x2c0>
    80020d7e:	00012517          	auipc	a0,0x12
    80020d82:	9e250513          	addi	a0,a0,-1566 # 80032760 <__func__.0+0x378>
    80020d86:	73e0e0ef          	jal	8002f4c4 <printf>
    80020d8a:	4511                	li	a0,4
    80020d8c:	988e00ef          	jal	80000f14 <goto_priv>
    80020d90:	9e7e00ef          	jal	80001776 <reset_state>
}
    80020d94:	60a2                	ld	ra,8(sp)
    80020d96:	8522                	mv	a0,s0
    80020d98:	6402                	ld	s0,0(sp)
    80020d9a:	0141                	addi	sp,sp,16
    80020d9c:	8082                	ret
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020d9e:	4401                	li	s0,0
    TEST_END(); 
    80020da0:	00012597          	auipc	a1,0x12
    80020da4:	91858593          	addi	a1,a1,-1768 # 800326b8 <__func__.0+0x2d0>
    80020da8:	bfd9                	j	80020d7e <timecmp_test_10+0xa4>
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020daa:	00012517          	auipc	a0,0x12
    80020dae:	95650513          	addi	a0,a0,-1706 # 80032700 <__func__.0+0x318>
    80020db2:	7120e0ef          	jal	8002f4c4 <printf>
    80020db6:	02900513          	li	a0,41
    80020dba:	3f80d0ef          	jal	8002e1b2 <putchar>
    80020dbe:	b75d                	j	80020d64 <timecmp_test_10+0x8a>

0000000080020dc0 <timecmp_test_11>:

bool timecmp_test_11() {
    80020dc0:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020dc2:	00011597          	auipc	a1,0x11
    80020dc6:	bf658593          	addi	a1,a1,-1034 # 800319b8 <__func__.10>
    80020dca:	00012517          	auipc	a0,0x12
    80020dce:	8fe50513          	addi	a0,a0,-1794 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_11() {
    80020dd2:	e406                	sd	ra,8(sp)
    80020dd4:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020dd6:	6ee0e0ef          	jal	8002f4c4 <printf>
    80020dda:	4529                	li	a0,10
    80020ddc:	3d60d0ef          	jal	8002e1b2 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020de0:	57fd                	li	a5,-1
    80020de2:	17fe                	slli	a5,a5,0x3f
    80020de4:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020de8:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    80020dec:	450d                	li	a0,3
    80020dee:	926e00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020df2:	826e00ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020df6:	14d027f3          	csrr	a5,stimecmp
    CSRR(CSR_VSTIMECMP);
    80020dfa:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020dfe:	08c00593          	li	a1,140
    80020e02:	0001a617          	auipc	a2,0x1a
    80020e06:	b8660613          	addi	a2,a2,-1146 # 8003a988 <__func__.0+0x85a0>
    80020e0a:	00012517          	auipc	a0,0x12
    80020e0e:	8d650513          	addi	a0,a0,-1834 # 800326e0 <__func__.0+0x2f8>
    80020e12:	6b20e0ef          	jal	8002f4c4 <printf>
    80020e16:	0003b797          	auipc	a5,0x3b
    80020e1a:	1fb7c783          	lbu	a5,507(a5) # 8005c011 <excpt+0x1>
    80020e1e:	00012597          	auipc	a1,0x12
    80020e22:	88a58593          	addi	a1,a1,-1910 # 800326a8 <__func__.0+0x2c0>
    80020e26:	c789                	beqz	a5,80020e30 <timecmp_test_11+0x70>
    80020e28:	00012597          	auipc	a1,0x12
    80020e2c:	89058593          	addi	a1,a1,-1904 # 800326b8 <__func__.0+0x2d0>
    80020e30:	00012517          	auipc	a0,0x12
    80020e34:	8c850513          	addi	a0,a0,-1848 # 800326f8 <__func__.0+0x310>
    80020e38:	68c0e0ef          	jal	8002f4c4 <printf>
    80020e3c:	0003b797          	auipc	a5,0x3b
    80020e40:	1d57c783          	lbu	a5,469(a5) # 8005c011 <excpt+0x1>
    80020e44:	e7a1                	bnez	a5,80020e8c <timecmp_test_11+0xcc>
    80020e46:	4529                	li	a0,10
    80020e48:	36a0d0ef          	jal	8002e1b2 <putchar>
    80020e4c:	0003b797          	auipc	a5,0x3b
    80020e50:	1c57c783          	lbu	a5,453(a5) # 8005c011 <excpt+0x1>
    80020e54:	e795                	bnez	a5,80020e80 <timecmp_test_11+0xc0>
    80020e56:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020e58:	00012597          	auipc	a1,0x12
    80020e5c:	85058593          	addi	a1,a1,-1968 # 800326a8 <__func__.0+0x2c0>
    80020e60:	00012517          	auipc	a0,0x12
    80020e64:	90050513          	addi	a0,a0,-1792 # 80032760 <__func__.0+0x378>
    80020e68:	65c0e0ef          	jal	8002f4c4 <printf>
    80020e6c:	4511                	li	a0,4
    80020e6e:	8a6e00ef          	jal	80000f14 <goto_priv>
    80020e72:	905e00ef          	jal	80001776 <reset_state>
}
    80020e76:	60a2                	ld	ra,8(sp)
    80020e78:	8522                	mv	a0,s0
    80020e7a:	6402                	ld	s0,0(sp)
    80020e7c:	0141                	addi	sp,sp,16
    80020e7e:	8082                	ret
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020e80:	4401                	li	s0,0
    TEST_END(); 
    80020e82:	00012597          	auipc	a1,0x12
    80020e86:	83658593          	addi	a1,a1,-1994 # 800326b8 <__func__.0+0x2d0>
    80020e8a:	bfd9                	j	80020e60 <timecmp_test_11+0xa0>
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020e8c:	00012517          	auipc	a0,0x12
    80020e90:	87450513          	addi	a0,a0,-1932 # 80032700 <__func__.0+0x318>
    80020e94:	6300e0ef          	jal	8002f4c4 <printf>
    80020e98:	02900513          	li	a0,41
    80020e9c:	3160d0ef          	jal	8002e1b2 <putchar>
    80020ea0:	b75d                	j	80020e46 <timecmp_test_11+0x86>

0000000080020ea2 <timecmp_test_12>:

bool timecmp_test_12() {
    80020ea2:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020ea4:	00011597          	auipc	a1,0x11
    80020ea8:	b2458593          	addi	a1,a1,-1244 # 800319c8 <__func__.9>
    80020eac:	00012517          	auipc	a0,0x12
    80020eb0:	81c50513          	addi	a0,a0,-2020 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_12() {
    80020eb4:	e406                	sd	ra,8(sp)
    80020eb6:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020eb8:	60c0e0ef          	jal	8002f4c4 <printf>
    80020ebc:	4529                	li	a0,10
    80020ebe:	2f40d0ef          	jal	8002e1b2 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80020ec2:	57fd                	li	a5,-1
    80020ec4:	17fe                	slli	a5,a5,0x3f
    80020ec6:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020eca:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    80020ece:	450d                	li	a0,3
    80020ed0:	844e00ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020ed4:	f45df0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020ed8:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020edc:	08c00593          	li	a1,140
    80020ee0:	0001a617          	auipc	a2,0x1a
    80020ee4:	af860613          	addi	a2,a2,-1288 # 8003a9d8 <__func__.0+0x85f0>
    80020ee8:	00011517          	auipc	a0,0x11
    80020eec:	7f850513          	addi	a0,a0,2040 # 800326e0 <__func__.0+0x2f8>
    80020ef0:	5d40e0ef          	jal	8002f4c4 <printf>
    80020ef4:	0003b797          	auipc	a5,0x3b
    80020ef8:	11d7c783          	lbu	a5,285(a5) # 8005c011 <excpt+0x1>
    80020efc:	00011597          	auipc	a1,0x11
    80020f00:	7ac58593          	addi	a1,a1,1964 # 800326a8 <__func__.0+0x2c0>
    80020f04:	c789                	beqz	a5,80020f0e <timecmp_test_12+0x6c>
    80020f06:	00011597          	auipc	a1,0x11
    80020f0a:	7b258593          	addi	a1,a1,1970 # 800326b8 <__func__.0+0x2d0>
    80020f0e:	00011517          	auipc	a0,0x11
    80020f12:	7ea50513          	addi	a0,a0,2026 # 800326f8 <__func__.0+0x310>
    80020f16:	5ae0e0ef          	jal	8002f4c4 <printf>
    80020f1a:	0003b797          	auipc	a5,0x3b
    80020f1e:	0f77c783          	lbu	a5,247(a5) # 8005c011 <excpt+0x1>
    80020f22:	e7a1                	bnez	a5,80020f6a <timecmp_test_12+0xc8>
    80020f24:	4529                	li	a0,10
    80020f26:	28c0d0ef          	jal	8002e1b2 <putchar>
    80020f2a:	0003b797          	auipc	a5,0x3b
    80020f2e:	0e77c783          	lbu	a5,231(a5) # 8005c011 <excpt+0x1>
    80020f32:	e795                	bnez	a5,80020f5e <timecmp_test_12+0xbc>
    80020f34:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020f36:	00011597          	auipc	a1,0x11
    80020f3a:	77258593          	addi	a1,a1,1906 # 800326a8 <__func__.0+0x2c0>
    80020f3e:	00012517          	auipc	a0,0x12
    80020f42:	82250513          	addi	a0,a0,-2014 # 80032760 <__func__.0+0x378>
    80020f46:	57e0e0ef          	jal	8002f4c4 <printf>
    80020f4a:	4511                	li	a0,4
    80020f4c:	fc9df0ef          	jal	80000f14 <goto_priv>
    80020f50:	827e00ef          	jal	80001776 <reset_state>
}
    80020f54:	60a2                	ld	ra,8(sp)
    80020f56:	8522                	mv	a0,s0
    80020f58:	6402                	ld	s0,0(sp)
    80020f5a:	0141                	addi	sp,sp,16
    80020f5c:	8082                	ret
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020f5e:	4401                	li	s0,0
    TEST_END(); 
    80020f60:	00011597          	auipc	a1,0x11
    80020f64:	75858593          	addi	a1,a1,1880 # 800326b8 <__func__.0+0x2d0>
    80020f68:	bfd9                	j	80020f3e <timecmp_test_12+0x9c>
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020f6a:	00011517          	auipc	a0,0x11
    80020f6e:	79650513          	addi	a0,a0,1942 # 80032700 <__func__.0+0x318>
    80020f72:	5520e0ef          	jal	8002f4c4 <printf>
    80020f76:	02900513          	li	a0,41
    80020f7a:	2380d0ef          	jal	8002e1b2 <putchar>
    80020f7e:	b75d                	j	80020f24 <timecmp_test_12+0x82>

0000000080020f80 <timecmp_test_13>:

bool timecmp_test_13() {
    80020f80:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020f82:	00011597          	auipc	a1,0x11
    80020f86:	a5658593          	addi	a1,a1,-1450 # 800319d8 <__func__.8>
    80020f8a:	00011517          	auipc	a0,0x11
    80020f8e:	73e50513          	addi	a0,a0,1854 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_13() {
    80020f92:	ec06                	sd	ra,24(sp)
    80020f94:	e822                	sd	s0,16(sp)
    80020f96:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020f98:	52c0e0ef          	jal	8002f4c4 <printf>
    80020f9c:	4529                	li	a0,10
    80020f9e:	2140d0ef          	jal	8002e1b2 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020fa2:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020fa6:	57fd                	li	a5,-1
    80020fa8:	17fe                	slli	a5,a5,0x3f
    80020faa:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020fae:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80020fb2:	30a025f3          	csrr	a1,0x30a
    80020fb6:	00018517          	auipc	a0,0x18
    80020fba:	d4a50513          	addi	a0,a0,-694 # 80038d00 <__func__.0+0x6918>
    80020fbe:	5060e0ef          	jal	8002f4c4 <printf>
    80020fc2:	60a025f3          	csrr	a1,henvcfg
    80020fc6:	00018517          	auipc	a0,0x18
    80020fca:	d3a50513          	addi	a0,a0,-710 # 80038d00 <__func__.0+0x6918>
    80020fce:	4f60e0ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VU);
    80020fd2:	4501                	li	a0,0
    80020fd4:	f41df0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020fd8:	e41df0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020fdc:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80020fe0:	0003b597          	auipc	a1,0x3b
    80020fe4:	0315c583          	lbu	a1,49(a1) # 8005c011 <excpt+0x1>
    80020fe8:	0001a517          	auipc	a0,0x1a
    80020fec:	a4050513          	addi	a0,a0,-1472 # 8003aa28 <__func__.0+0x8640>
    80020ff0:	0003b417          	auipc	s0,0x3b
    80020ff4:	02040413          	addi	s0,s0,32 # 8005c010 <excpt>
    80020ff8:	4cc0e0ef          	jal	8002f4c4 <printf>
    printf("cause=%d\n",excpt.cause);
    80020ffc:	640c                	ld	a1,8(s0)
    80020ffe:	0001a517          	auipc	a0,0x1a
    80021002:	a3a50513          	addi	a0,a0,-1478 # 8003aa38 <__func__.0+0x8650>
    80021006:	4be0e0ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002100a:	08c00593          	li	a1,140
    8002100e:	0001a617          	auipc	a2,0x1a
    80021012:	a3a60613          	addi	a2,a2,-1478 # 8003aa48 <__func__.0+0x8660>
    80021016:	00011517          	auipc	a0,0x11
    8002101a:	6ca50513          	addi	a0,a0,1738 # 800326e0 <__func__.0+0x2f8>
    8002101e:	4a60e0ef          	jal	8002f4c4 <printf>
    80021022:	0003b797          	auipc	a5,0x3b
    80021026:	fef7c783          	lbu	a5,-17(a5) # 8005c011 <excpt+0x1>
    8002102a:	00011597          	auipc	a1,0x11
    8002102e:	68e58593          	addi	a1,a1,1678 # 800326b8 <__func__.0+0x2d0>
    80021032:	cf89                	beqz	a5,8002104c <timecmp_test_13+0xcc>
    80021034:	6418                	ld	a4,8(s0)
    80021036:	47d9                	li	a5,22
    80021038:	00011597          	auipc	a1,0x11
    8002103c:	67058593          	addi	a1,a1,1648 # 800326a8 <__func__.0+0x2c0>
    80021040:	00f70663          	beq	a4,a5,8002104c <timecmp_test_13+0xcc>
    80021044:	00011597          	auipc	a1,0x11
    80021048:	67458593          	addi	a1,a1,1652 # 800326b8 <__func__.0+0x2d0>
    8002104c:	00011517          	auipc	a0,0x11
    80021050:	6ac50513          	addi	a0,a0,1708 # 800326f8 <__func__.0+0x310>
    80021054:	4700e0ef          	jal	8002f4c4 <printf>
    80021058:	0003b797          	auipc	a5,0x3b
    8002105c:	fb97c783          	lbu	a5,-71(a5) # 8005c011 <excpt+0x1>
    80021060:	c789                	beqz	a5,8002106a <timecmp_test_13+0xea>
    80021062:	6418                	ld	a4,8(s0)
    80021064:	47d9                	li	a5,22
    80021066:	00f70c63          	beq	a4,a5,8002107e <timecmp_test_13+0xfe>
    8002106a:	00011517          	auipc	a0,0x11
    8002106e:	69650513          	addi	a0,a0,1686 # 80032700 <__func__.0+0x318>
    80021072:	4520e0ef          	jal	8002f4c4 <printf>
    80021076:	02900513          	li	a0,41
    8002107a:	1380d0ef          	jal	8002e1b2 <putchar>
    8002107e:	4529                	li	a0,10
    80021080:	1320d0ef          	jal	8002e1b2 <putchar>
    80021084:	0003b497          	auipc	s1,0x3b
    80021088:	f8d4c483          	lbu	s1,-115(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8002108c:	00011597          	auipc	a1,0x11
    80021090:	62c58593          	addi	a1,a1,1580 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021094:	cc91                	beqz	s1,800210b0 <timecmp_test_13+0x130>
    80021096:	6418                	ld	a4,8(s0)
    80021098:	47d9                	li	a5,22
    TEST_END(); 
    8002109a:	00011597          	auipc	a1,0x11
    8002109e:	60e58593          	addi	a1,a1,1550 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800210a2:	00f70763          	beq	a4,a5,800210b0 <timecmp_test_13+0x130>
    800210a6:	4481                	li	s1,0
    TEST_END(); 
    800210a8:	00011597          	auipc	a1,0x11
    800210ac:	61058593          	addi	a1,a1,1552 # 800326b8 <__func__.0+0x2d0>
    800210b0:	00011517          	auipc	a0,0x11
    800210b4:	6b050513          	addi	a0,a0,1712 # 80032760 <__func__.0+0x378>
    800210b8:	40c0e0ef          	jal	8002f4c4 <printf>
    800210bc:	4511                	li	a0,4
    800210be:	e57df0ef          	jal	80000f14 <goto_priv>
    800210c2:	eb4e00ef          	jal	80001776 <reset_state>
}
    800210c6:	60e2                	ld	ra,24(sp)
    800210c8:	6442                	ld	s0,16(sp)
    800210ca:	8526                	mv	a0,s1
    800210cc:	64a2                	ld	s1,8(sp)
    800210ce:	6105                	addi	sp,sp,32
    800210d0:	8082                	ret

00000000800210d2 <timecmp_test_14>:

bool timecmp_test_14() {
    800210d2:	1101                	addi	sp,sp,-32

    TEST_START();    
    800210d4:	00011597          	auipc	a1,0x11
    800210d8:	91458593          	addi	a1,a1,-1772 # 800319e8 <__func__.7>
    800210dc:	00011517          	auipc	a0,0x11
    800210e0:	5ec50513          	addi	a0,a0,1516 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_14() {
    800210e4:	ec06                	sd	ra,24(sp)
    800210e6:	e822                	sd	s0,16(sp)
    800210e8:	e426                	sd	s1,8(sp)
    TEST_START();    
    800210ea:	3da0e0ef          	jal	8002f4c4 <printf>
    800210ee:	4529                	li	a0,10
    800210f0:	0c20d0ef          	jal	8002e1b2 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800210f4:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800210f8:	57fd                	li	a5,-1
    800210fa:	17fe                	slli	a5,a5,0x3f
    800210fc:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021100:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80021104:	30a025f3          	csrr	a1,0x30a
    80021108:	00018517          	auipc	a0,0x18
    8002110c:	bf850513          	addi	a0,a0,-1032 # 80038d00 <__func__.0+0x6918>
    80021110:	3b40e0ef          	jal	8002f4c4 <printf>
    80021114:	60a025f3          	csrr	a1,henvcfg
    80021118:	00018517          	auipc	a0,0x18
    8002111c:	be850513          	addi	a0,a0,-1048 # 80038d00 <__func__.0+0x6918>
    80021120:	3a40e0ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);
    80021124:	4509                	li	a0,2
    80021126:	defdf0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002112a:	cefdf0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002112e:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80021132:	0003b597          	auipc	a1,0x3b
    80021136:	edf5c583          	lbu	a1,-289(a1) # 8005c011 <excpt+0x1>
    8002113a:	0001a517          	auipc	a0,0x1a
    8002113e:	8ee50513          	addi	a0,a0,-1810 # 8003aa28 <__func__.0+0x8640>
    80021142:	0003b417          	auipc	s0,0x3b
    80021146:	ece40413          	addi	s0,s0,-306 # 8005c010 <excpt>
    8002114a:	37a0e0ef          	jal	8002f4c4 <printf>
    printf("cause=%d\n",excpt.cause);
    8002114e:	640c                	ld	a1,8(s0)
    80021150:	0001a517          	auipc	a0,0x1a
    80021154:	8e850513          	addi	a0,a0,-1816 # 8003aa38 <__func__.0+0x8650>
    80021158:	36c0e0ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002115c:	08c00593          	li	a1,140
    80021160:	0001a617          	auipc	a2,0x1a
    80021164:	95860613          	addi	a2,a2,-1704 # 8003aab8 <__func__.0+0x86d0>
    80021168:	00011517          	auipc	a0,0x11
    8002116c:	57850513          	addi	a0,a0,1400 # 800326e0 <__func__.0+0x2f8>
    80021170:	3540e0ef          	jal	8002f4c4 <printf>
    80021174:	0003b797          	auipc	a5,0x3b
    80021178:	e9d7c783          	lbu	a5,-355(a5) # 8005c011 <excpt+0x1>
    8002117c:	00011597          	auipc	a1,0x11
    80021180:	53c58593          	addi	a1,a1,1340 # 800326b8 <__func__.0+0x2d0>
    80021184:	cf89                	beqz	a5,8002119e <timecmp_test_14+0xcc>
    80021186:	6418                	ld	a4,8(s0)
    80021188:	47d9                	li	a5,22
    8002118a:	00011597          	auipc	a1,0x11
    8002118e:	51e58593          	addi	a1,a1,1310 # 800326a8 <__func__.0+0x2c0>
    80021192:	00f70663          	beq	a4,a5,8002119e <timecmp_test_14+0xcc>
    80021196:	00011597          	auipc	a1,0x11
    8002119a:	52258593          	addi	a1,a1,1314 # 800326b8 <__func__.0+0x2d0>
    8002119e:	00011517          	auipc	a0,0x11
    800211a2:	55a50513          	addi	a0,a0,1370 # 800326f8 <__func__.0+0x310>
    800211a6:	31e0e0ef          	jal	8002f4c4 <printf>
    800211aa:	0003b797          	auipc	a5,0x3b
    800211ae:	e677c783          	lbu	a5,-409(a5) # 8005c011 <excpt+0x1>
    800211b2:	c789                	beqz	a5,800211bc <timecmp_test_14+0xea>
    800211b4:	6418                	ld	a4,8(s0)
    800211b6:	47d9                	li	a5,22
    800211b8:	00f70c63          	beq	a4,a5,800211d0 <timecmp_test_14+0xfe>
    800211bc:	00011517          	auipc	a0,0x11
    800211c0:	54450513          	addi	a0,a0,1348 # 80032700 <__func__.0+0x318>
    800211c4:	3000e0ef          	jal	8002f4c4 <printf>
    800211c8:	02900513          	li	a0,41
    800211cc:	7e70c0ef          	jal	8002e1b2 <putchar>
    800211d0:	4529                	li	a0,10
    800211d2:	7e10c0ef          	jal	8002e1b2 <putchar>
    800211d6:	0003b497          	auipc	s1,0x3b
    800211da:	e3b4c483          	lbu	s1,-453(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800211de:	00011597          	auipc	a1,0x11
    800211e2:	4da58593          	addi	a1,a1,1242 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800211e6:	cc91                	beqz	s1,80021202 <timecmp_test_14+0x130>
    800211e8:	6418                	ld	a4,8(s0)
    800211ea:	47d9                	li	a5,22
    TEST_END(); 
    800211ec:	00011597          	auipc	a1,0x11
    800211f0:	4bc58593          	addi	a1,a1,1212 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800211f4:	00f70763          	beq	a4,a5,80021202 <timecmp_test_14+0x130>
    800211f8:	4481                	li	s1,0
    TEST_END(); 
    800211fa:	00011597          	auipc	a1,0x11
    800211fe:	4be58593          	addi	a1,a1,1214 # 800326b8 <__func__.0+0x2d0>
    80021202:	00011517          	auipc	a0,0x11
    80021206:	55e50513          	addi	a0,a0,1374 # 80032760 <__func__.0+0x378>
    8002120a:	2ba0e0ef          	jal	8002f4c4 <printf>
    8002120e:	4511                	li	a0,4
    80021210:	d05df0ef          	jal	80000f14 <goto_priv>
    80021214:	d62e00ef          	jal	80001776 <reset_state>
}
    80021218:	60e2                	ld	ra,24(sp)
    8002121a:	6442                	ld	s0,16(sp)
    8002121c:	8526                	mv	a0,s1
    8002121e:	64a2                	ld	s1,8(sp)
    80021220:	6105                	addi	sp,sp,32
    80021222:	8082                	ret

0000000080021224 <timecmp_test_15>:


bool timecmp_test_15() {
    80021224:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021226:	00010597          	auipc	a1,0x10
    8002122a:	7d258593          	addi	a1,a1,2002 # 800319f8 <__func__.6>
    8002122e:	00011517          	auipc	a0,0x11
    80021232:	49a50513          	addi	a0,a0,1178 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_15() {
    80021236:	ec06                	sd	ra,24(sp)
    80021238:	e822                	sd	s0,16(sp)
    8002123a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002123c:	2880e0ef          	jal	8002f4c4 <printf>
    80021240:	4529                	li	a0,10
    80021242:	7710c0ef          	jal	8002e1b2 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021246:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8002124a:	57fd                	li	a5,-1
    8002124c:	17fe                	slli	a5,a5,0x3f
    8002124e:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021252:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80021256:	30a025f3          	csrr	a1,0x30a
    8002125a:	00018517          	auipc	a0,0x18
    8002125e:	aa650513          	addi	a0,a0,-1370 # 80038d00 <__func__.0+0x6918>
    80021262:	2620e0ef          	jal	8002f4c4 <printf>
    80021266:	60a025f3          	csrr	a1,henvcfg
    8002126a:	00018517          	auipc	a0,0x18
    8002126e:	a9650513          	addi	a0,a0,-1386 # 80038d00 <__func__.0+0x6918>
    80021272:	2520e0ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VU);
    80021276:	4501                	li	a0,0
    80021278:	c9ddf0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002127c:	b9ddf0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021280:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80021284:	0003b597          	auipc	a1,0x3b
    80021288:	d8d5c583          	lbu	a1,-627(a1) # 8005c011 <excpt+0x1>
    8002128c:	00019517          	auipc	a0,0x19
    80021290:	79c50513          	addi	a0,a0,1948 # 8003aa28 <__func__.0+0x8640>
    80021294:	0003b417          	auipc	s0,0x3b
    80021298:	d7c40413          	addi	s0,s0,-644 # 8005c010 <excpt>
    8002129c:	2280e0ef          	jal	8002f4c4 <printf>
    printf("cause=%d\n",excpt.cause);
    800212a0:	640c                	ld	a1,8(s0)
    800212a2:	00019517          	auipc	a0,0x19
    800212a6:	79650513          	addi	a0,a0,1942 # 8003aa38 <__func__.0+0x8650>
    800212aa:	21a0e0ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800212ae:	08c00593          	li	a1,140
    800212b2:	0001a617          	auipc	a2,0x1a
    800212b6:	87660613          	addi	a2,a2,-1930 # 8003ab28 <__func__.0+0x8740>
    800212ba:	00011517          	auipc	a0,0x11
    800212be:	42650513          	addi	a0,a0,1062 # 800326e0 <__func__.0+0x2f8>
    800212c2:	2020e0ef          	jal	8002f4c4 <printf>
    800212c6:	0003b797          	auipc	a5,0x3b
    800212ca:	d4b7c783          	lbu	a5,-693(a5) # 8005c011 <excpt+0x1>
    800212ce:	00011597          	auipc	a1,0x11
    800212d2:	3ea58593          	addi	a1,a1,1002 # 800326b8 <__func__.0+0x2d0>
    800212d6:	cf89                	beqz	a5,800212f0 <timecmp_test_15+0xcc>
    800212d8:	6418                	ld	a4,8(s0)
    800212da:	4789                	li	a5,2
    800212dc:	00011597          	auipc	a1,0x11
    800212e0:	3cc58593          	addi	a1,a1,972 # 800326a8 <__func__.0+0x2c0>
    800212e4:	00f70663          	beq	a4,a5,800212f0 <timecmp_test_15+0xcc>
    800212e8:	00011597          	auipc	a1,0x11
    800212ec:	3d058593          	addi	a1,a1,976 # 800326b8 <__func__.0+0x2d0>
    800212f0:	00011517          	auipc	a0,0x11
    800212f4:	40850513          	addi	a0,a0,1032 # 800326f8 <__func__.0+0x310>
    800212f8:	1cc0e0ef          	jal	8002f4c4 <printf>
    800212fc:	0003b797          	auipc	a5,0x3b
    80021300:	d157c783          	lbu	a5,-747(a5) # 8005c011 <excpt+0x1>
    80021304:	c789                	beqz	a5,8002130e <timecmp_test_15+0xea>
    80021306:	6418                	ld	a4,8(s0)
    80021308:	4789                	li	a5,2
    8002130a:	00f70c63          	beq	a4,a5,80021322 <timecmp_test_15+0xfe>
    8002130e:	00011517          	auipc	a0,0x11
    80021312:	3f250513          	addi	a0,a0,1010 # 80032700 <__func__.0+0x318>
    80021316:	1ae0e0ef          	jal	8002f4c4 <printf>
    8002131a:	02900513          	li	a0,41
    8002131e:	6950c0ef          	jal	8002e1b2 <putchar>
    80021322:	4529                	li	a0,10
    80021324:	68f0c0ef          	jal	8002e1b2 <putchar>
    80021328:	0003b497          	auipc	s1,0x3b
    8002132c:	ce94c483          	lbu	s1,-791(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021330:	00011597          	auipc	a1,0x11
    80021334:	38858593          	addi	a1,a1,904 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021338:	cc91                	beqz	s1,80021354 <timecmp_test_15+0x130>
    8002133a:	6418                	ld	a4,8(s0)
    8002133c:	4789                	li	a5,2
    TEST_END(); 
    8002133e:	00011597          	auipc	a1,0x11
    80021342:	36a58593          	addi	a1,a1,874 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021346:	00f70763          	beq	a4,a5,80021354 <timecmp_test_15+0x130>
    8002134a:	4481                	li	s1,0
    TEST_END(); 
    8002134c:	00011597          	auipc	a1,0x11
    80021350:	36c58593          	addi	a1,a1,876 # 800326b8 <__func__.0+0x2d0>
    80021354:	00011517          	auipc	a0,0x11
    80021358:	40c50513          	addi	a0,a0,1036 # 80032760 <__func__.0+0x378>
    8002135c:	1680e0ef          	jal	8002f4c4 <printf>
    80021360:	4511                	li	a0,4
    80021362:	bb3df0ef          	jal	80000f14 <goto_priv>
    80021366:	c10e00ef          	jal	80001776 <reset_state>
}
    8002136a:	60e2                	ld	ra,24(sp)
    8002136c:	6442                	ld	s0,16(sp)
    8002136e:	8526                	mv	a0,s1
    80021370:	64a2                	ld	s1,8(sp)
    80021372:	6105                	addi	sp,sp,32
    80021374:	8082                	ret

0000000080021376 <timecmp_test_16>:

bool timecmp_test_16() {
    80021376:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021378:	00010597          	auipc	a1,0x10
    8002137c:	69058593          	addi	a1,a1,1680 # 80031a08 <__func__.5>
    80021380:	00011517          	auipc	a0,0x11
    80021384:	34850513          	addi	a0,a0,840 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_16() {
    80021388:	ec06                	sd	ra,24(sp)
    8002138a:	e822                	sd	s0,16(sp)
    8002138c:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002138e:	1360e0ef          	jal	8002f4c4 <printf>
    80021392:	4529                	li	a0,10
    80021394:	61f0c0ef          	jal	8002e1b2 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021398:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8002139c:	57fd                	li	a5,-1
    8002139e:	17fe                	slli	a5,a5,0x3f
    800213a0:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800213a4:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800213a8:	30a025f3          	csrr	a1,0x30a
    800213ac:	00018517          	auipc	a0,0x18
    800213b0:	95450513          	addi	a0,a0,-1708 # 80038d00 <__func__.0+0x6918>
    800213b4:	1100e0ef          	jal	8002f4c4 <printf>
    800213b8:	60a025f3          	csrr	a1,henvcfg
    800213bc:	00018517          	auipc	a0,0x18
    800213c0:	94450513          	addi	a0,a0,-1724 # 80038d00 <__func__.0+0x6918>
    800213c4:	1000e0ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);
    800213c8:	4509                	li	a0,2
    800213ca:	b4bdf0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    800213ce:	a4bdf0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800213d2:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800213d6:	0003b597          	auipc	a1,0x3b
    800213da:	c3b5c583          	lbu	a1,-965(a1) # 8005c011 <excpt+0x1>
    800213de:	00019517          	auipc	a0,0x19
    800213e2:	64a50513          	addi	a0,a0,1610 # 8003aa28 <__func__.0+0x8640>
    800213e6:	0003b417          	auipc	s0,0x3b
    800213ea:	c2a40413          	addi	s0,s0,-982 # 8005c010 <excpt>
    800213ee:	0d60e0ef          	jal	8002f4c4 <printf>
    printf("cause=%d\n",excpt.cause);
    800213f2:	640c                	ld	a1,8(s0)
    800213f4:	00019517          	auipc	a0,0x19
    800213f8:	64450513          	addi	a0,a0,1604 # 8003aa38 <__func__.0+0x8650>
    800213fc:	0c80e0ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021400:	08c00593          	li	a1,140
    80021404:	00019617          	auipc	a2,0x19
    80021408:	79460613          	addi	a2,a2,1940 # 8003ab98 <__func__.0+0x87b0>
    8002140c:	00011517          	auipc	a0,0x11
    80021410:	2d450513          	addi	a0,a0,724 # 800326e0 <__func__.0+0x2f8>
    80021414:	0b00e0ef          	jal	8002f4c4 <printf>
    80021418:	0003b797          	auipc	a5,0x3b
    8002141c:	bf97c783          	lbu	a5,-1031(a5) # 8005c011 <excpt+0x1>
    80021420:	00011597          	auipc	a1,0x11
    80021424:	29858593          	addi	a1,a1,664 # 800326b8 <__func__.0+0x2d0>
    80021428:	cf89                	beqz	a5,80021442 <timecmp_test_16+0xcc>
    8002142a:	6418                	ld	a4,8(s0)
    8002142c:	4789                	li	a5,2
    8002142e:	00011597          	auipc	a1,0x11
    80021432:	27a58593          	addi	a1,a1,634 # 800326a8 <__func__.0+0x2c0>
    80021436:	00f70663          	beq	a4,a5,80021442 <timecmp_test_16+0xcc>
    8002143a:	00011597          	auipc	a1,0x11
    8002143e:	27e58593          	addi	a1,a1,638 # 800326b8 <__func__.0+0x2d0>
    80021442:	00011517          	auipc	a0,0x11
    80021446:	2b650513          	addi	a0,a0,694 # 800326f8 <__func__.0+0x310>
    8002144a:	07a0e0ef          	jal	8002f4c4 <printf>
    8002144e:	0003b797          	auipc	a5,0x3b
    80021452:	bc37c783          	lbu	a5,-1085(a5) # 8005c011 <excpt+0x1>
    80021456:	c789                	beqz	a5,80021460 <timecmp_test_16+0xea>
    80021458:	6418                	ld	a4,8(s0)
    8002145a:	4789                	li	a5,2
    8002145c:	00f70c63          	beq	a4,a5,80021474 <timecmp_test_16+0xfe>
    80021460:	00011517          	auipc	a0,0x11
    80021464:	2a050513          	addi	a0,a0,672 # 80032700 <__func__.0+0x318>
    80021468:	05c0e0ef          	jal	8002f4c4 <printf>
    8002146c:	02900513          	li	a0,41
    80021470:	5430c0ef          	jal	8002e1b2 <putchar>
    80021474:	4529                	li	a0,10
    80021476:	53d0c0ef          	jal	8002e1b2 <putchar>
    8002147a:	0003b497          	auipc	s1,0x3b
    8002147e:	b974c483          	lbu	s1,-1129(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021482:	00011597          	auipc	a1,0x11
    80021486:	23658593          	addi	a1,a1,566 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002148a:	cc91                	beqz	s1,800214a6 <timecmp_test_16+0x130>
    8002148c:	6418                	ld	a4,8(s0)
    8002148e:	4789                	li	a5,2
    TEST_END(); 
    80021490:	00011597          	auipc	a1,0x11
    80021494:	21858593          	addi	a1,a1,536 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021498:	00f70763          	beq	a4,a5,800214a6 <timecmp_test_16+0x130>
    8002149c:	4481                	li	s1,0
    TEST_END(); 
    8002149e:	00011597          	auipc	a1,0x11
    800214a2:	21a58593          	addi	a1,a1,538 # 800326b8 <__func__.0+0x2d0>
    800214a6:	00011517          	auipc	a0,0x11
    800214aa:	2ba50513          	addi	a0,a0,698 # 80032760 <__func__.0+0x378>
    800214ae:	0160e0ef          	jal	8002f4c4 <printf>
    800214b2:	4511                	li	a0,4
    800214b4:	a61df0ef          	jal	80000f14 <goto_priv>
    800214b8:	abee00ef          	jal	80001776 <reset_state>
}
    800214bc:	60e2                	ld	ra,24(sp)
    800214be:	6442                	ld	s0,16(sp)
    800214c0:	8526                	mv	a0,s1
    800214c2:	64a2                	ld	s1,8(sp)
    800214c4:	6105                	addi	sp,sp,32
    800214c6:	8082                	ret

00000000800214c8 <timecmp_test_17>:

bool timecmp_test_17() {
    800214c8:	1101                	addi	sp,sp,-32

    TEST_START();    
    800214ca:	00010597          	auipc	a1,0x10
    800214ce:	54e58593          	addi	a1,a1,1358 # 80031a18 <__func__.4>
    800214d2:	00011517          	auipc	a0,0x11
    800214d6:	1f650513          	addi	a0,a0,502 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_17() {
    800214da:	ec06                	sd	ra,24(sp)
    800214dc:	e822                	sd	s0,16(sp)
    800214de:	e426                	sd	s1,8(sp)
    TEST_START();    
    800214e0:	7e50d0ef          	jal	8002f4c4 <printf>
    800214e4:	4529                	li	a0,10
    800214e6:	4cd0c0ef          	jal	8002e1b2 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800214ea:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800214ee:	57fd                	li	a5,-1
    800214f0:	17fe                	slli	a5,a5,0x3f
    800214f2:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800214f6:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800214fa:	30a025f3          	csrr	a1,0x30a
    800214fe:	00018517          	auipc	a0,0x18
    80021502:	80250513          	addi	a0,a0,-2046 # 80038d00 <__func__.0+0x6918>
    80021506:	7bf0d0ef          	jal	8002f4c4 <printf>
    8002150a:	60a025f3          	csrr	a1,henvcfg
    8002150e:	00017517          	auipc	a0,0x17
    80021512:	7f250513          	addi	a0,a0,2034 # 80038d00 <__func__.0+0x6918>
    80021516:	7af0d0ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VU);
    8002151a:	4501                	li	a0,0
    8002151c:	9f9df0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021520:	8f9df0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021524:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80021528:	0003b597          	auipc	a1,0x3b
    8002152c:	ae95c583          	lbu	a1,-1303(a1) # 8005c011 <excpt+0x1>
    80021530:	00019517          	auipc	a0,0x19
    80021534:	4f850513          	addi	a0,a0,1272 # 8003aa28 <__func__.0+0x8640>
    80021538:	0003b417          	auipc	s0,0x3b
    8002153c:	ad840413          	addi	s0,s0,-1320 # 8005c010 <excpt>
    80021540:	7850d0ef          	jal	8002f4c4 <printf>
    printf("cause=%d\n",excpt.cause);
    80021544:	640c                	ld	a1,8(s0)
    80021546:	00019517          	auipc	a0,0x19
    8002154a:	4f250513          	addi	a0,a0,1266 # 8003aa38 <__func__.0+0x8650>
    8002154e:	7770d0ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021552:	08c00593          	li	a1,140
    80021556:	00019617          	auipc	a2,0x19
    8002155a:	4f260613          	addi	a2,a2,1266 # 8003aa48 <__func__.0+0x8660>
    8002155e:	00011517          	auipc	a0,0x11
    80021562:	18250513          	addi	a0,a0,386 # 800326e0 <__func__.0+0x2f8>
    80021566:	75f0d0ef          	jal	8002f4c4 <printf>
    8002156a:	0003b797          	auipc	a5,0x3b
    8002156e:	aa77c783          	lbu	a5,-1369(a5) # 8005c011 <excpt+0x1>
    80021572:	00011597          	auipc	a1,0x11
    80021576:	14658593          	addi	a1,a1,326 # 800326b8 <__func__.0+0x2d0>
    8002157a:	cf89                	beqz	a5,80021594 <timecmp_test_17+0xcc>
    8002157c:	6418                	ld	a4,8(s0)
    8002157e:	47d9                	li	a5,22
    80021580:	00011597          	auipc	a1,0x11
    80021584:	12858593          	addi	a1,a1,296 # 800326a8 <__func__.0+0x2c0>
    80021588:	00f70663          	beq	a4,a5,80021594 <timecmp_test_17+0xcc>
    8002158c:	00011597          	auipc	a1,0x11
    80021590:	12c58593          	addi	a1,a1,300 # 800326b8 <__func__.0+0x2d0>
    80021594:	00011517          	auipc	a0,0x11
    80021598:	16450513          	addi	a0,a0,356 # 800326f8 <__func__.0+0x310>
    8002159c:	7290d0ef          	jal	8002f4c4 <printf>
    800215a0:	0003b797          	auipc	a5,0x3b
    800215a4:	a717c783          	lbu	a5,-1423(a5) # 8005c011 <excpt+0x1>
    800215a8:	c789                	beqz	a5,800215b2 <timecmp_test_17+0xea>
    800215aa:	6418                	ld	a4,8(s0)
    800215ac:	47d9                	li	a5,22
    800215ae:	00f70c63          	beq	a4,a5,800215c6 <timecmp_test_17+0xfe>
    800215b2:	00011517          	auipc	a0,0x11
    800215b6:	14e50513          	addi	a0,a0,334 # 80032700 <__func__.0+0x318>
    800215ba:	70b0d0ef          	jal	8002f4c4 <printf>
    800215be:	02900513          	li	a0,41
    800215c2:	3f10c0ef          	jal	8002e1b2 <putchar>
    800215c6:	4529                	li	a0,10
    800215c8:	3eb0c0ef          	jal	8002e1b2 <putchar>
    800215cc:	0003b497          	auipc	s1,0x3b
    800215d0:	a454c483          	lbu	s1,-1467(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800215d4:	00011597          	auipc	a1,0x11
    800215d8:	0e458593          	addi	a1,a1,228 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800215dc:	cc91                	beqz	s1,800215f8 <timecmp_test_17+0x130>
    800215de:	6418                	ld	a4,8(s0)
    800215e0:	47d9                	li	a5,22
    TEST_END(); 
    800215e2:	00011597          	auipc	a1,0x11
    800215e6:	0c658593          	addi	a1,a1,198 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800215ea:	00f70763          	beq	a4,a5,800215f8 <timecmp_test_17+0x130>
    800215ee:	4481                	li	s1,0
    TEST_END(); 
    800215f0:	00011597          	auipc	a1,0x11
    800215f4:	0c858593          	addi	a1,a1,200 # 800326b8 <__func__.0+0x2d0>
    800215f8:	00011517          	auipc	a0,0x11
    800215fc:	16850513          	addi	a0,a0,360 # 80032760 <__func__.0+0x378>
    80021600:	6c50d0ef          	jal	8002f4c4 <printf>
    80021604:	4511                	li	a0,4
    80021606:	90fdf0ef          	jal	80000f14 <goto_priv>
    8002160a:	96ce00ef          	jal	80001776 <reset_state>
}
    8002160e:	60e2                	ld	ra,24(sp)
    80021610:	6442                	ld	s0,16(sp)
    80021612:	8526                	mv	a0,s1
    80021614:	64a2                	ld	s1,8(sp)
    80021616:	6105                	addi	sp,sp,32
    80021618:	8082                	ret

000000008002161a <timecmp_test_18>:

bool timecmp_test_18() {
    8002161a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002161c:	00010597          	auipc	a1,0x10
    80021620:	40c58593          	addi	a1,a1,1036 # 80031a28 <__func__.3>
    80021624:	00011517          	auipc	a0,0x11
    80021628:	0a450513          	addi	a0,a0,164 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_18() {
    8002162c:	ec06                	sd	ra,24(sp)
    8002162e:	e822                	sd	s0,16(sp)
    80021630:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021632:	6930d0ef          	jal	8002f4c4 <printf>
    80021636:	4529                	li	a0,10
    80021638:	37b0c0ef          	jal	8002e1b2 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002163c:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021640:	57fd                	li	a5,-1
    80021642:	17fe                	slli	a5,a5,0x3f
    80021644:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021648:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    8002164c:	30a025f3          	csrr	a1,0x30a
    80021650:	00017517          	auipc	a0,0x17
    80021654:	6b050513          	addi	a0,a0,1712 # 80038d00 <__func__.0+0x6918>
    80021658:	66d0d0ef          	jal	8002f4c4 <printf>
    8002165c:	60a025f3          	csrr	a1,henvcfg
    80021660:	00017517          	auipc	a0,0x17
    80021664:	6a050513          	addi	a0,a0,1696 # 80038d00 <__func__.0+0x6918>
    80021668:	65d0d0ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);
    8002166c:	4509                	li	a0,2
    8002166e:	8a7df0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021672:	fa6df0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021676:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    8002167a:	0003b597          	auipc	a1,0x3b
    8002167e:	9975c583          	lbu	a1,-1641(a1) # 8005c011 <excpt+0x1>
    80021682:	00019517          	auipc	a0,0x19
    80021686:	3a650513          	addi	a0,a0,934 # 8003aa28 <__func__.0+0x8640>
    8002168a:	0003b417          	auipc	s0,0x3b
    8002168e:	98640413          	addi	s0,s0,-1658 # 8005c010 <excpt>
    80021692:	6330d0ef          	jal	8002f4c4 <printf>
    printf("cause=%d\n",excpt.cause);
    80021696:	640c                	ld	a1,8(s0)
    80021698:	00019517          	auipc	a0,0x19
    8002169c:	3a050513          	addi	a0,a0,928 # 8003aa38 <__func__.0+0x8650>
    800216a0:	6250d0ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800216a4:	08c00593          	li	a1,140
    800216a8:	00019617          	auipc	a2,0x19
    800216ac:	41060613          	addi	a2,a2,1040 # 8003aab8 <__func__.0+0x86d0>
    800216b0:	00011517          	auipc	a0,0x11
    800216b4:	03050513          	addi	a0,a0,48 # 800326e0 <__func__.0+0x2f8>
    800216b8:	60d0d0ef          	jal	8002f4c4 <printf>
    800216bc:	0003b797          	auipc	a5,0x3b
    800216c0:	9557c783          	lbu	a5,-1707(a5) # 8005c011 <excpt+0x1>
    800216c4:	00011597          	auipc	a1,0x11
    800216c8:	ff458593          	addi	a1,a1,-12 # 800326b8 <__func__.0+0x2d0>
    800216cc:	cf89                	beqz	a5,800216e6 <timecmp_test_18+0xcc>
    800216ce:	6418                	ld	a4,8(s0)
    800216d0:	47d9                	li	a5,22
    800216d2:	00011597          	auipc	a1,0x11
    800216d6:	fd658593          	addi	a1,a1,-42 # 800326a8 <__func__.0+0x2c0>
    800216da:	00f70663          	beq	a4,a5,800216e6 <timecmp_test_18+0xcc>
    800216de:	00011597          	auipc	a1,0x11
    800216e2:	fda58593          	addi	a1,a1,-38 # 800326b8 <__func__.0+0x2d0>
    800216e6:	00011517          	auipc	a0,0x11
    800216ea:	01250513          	addi	a0,a0,18 # 800326f8 <__func__.0+0x310>
    800216ee:	5d70d0ef          	jal	8002f4c4 <printf>
    800216f2:	0003b797          	auipc	a5,0x3b
    800216f6:	91f7c783          	lbu	a5,-1761(a5) # 8005c011 <excpt+0x1>
    800216fa:	c789                	beqz	a5,80021704 <timecmp_test_18+0xea>
    800216fc:	6418                	ld	a4,8(s0)
    800216fe:	47d9                	li	a5,22
    80021700:	00f70c63          	beq	a4,a5,80021718 <timecmp_test_18+0xfe>
    80021704:	00011517          	auipc	a0,0x11
    80021708:	ffc50513          	addi	a0,a0,-4 # 80032700 <__func__.0+0x318>
    8002170c:	5b90d0ef          	jal	8002f4c4 <printf>
    80021710:	02900513          	li	a0,41
    80021714:	29f0c0ef          	jal	8002e1b2 <putchar>
    80021718:	4529                	li	a0,10
    8002171a:	2990c0ef          	jal	8002e1b2 <putchar>
    8002171e:	0003b497          	auipc	s1,0x3b
    80021722:	8f34c483          	lbu	s1,-1805(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80021726:	00011597          	auipc	a1,0x11
    8002172a:	f9258593          	addi	a1,a1,-110 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002172e:	cc91                	beqz	s1,8002174a <timecmp_test_18+0x130>
    80021730:	6418                	ld	a4,8(s0)
    80021732:	47d9                	li	a5,22
    TEST_END(); 
    80021734:	00011597          	auipc	a1,0x11
    80021738:	f7458593          	addi	a1,a1,-140 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002173c:	00f70763          	beq	a4,a5,8002174a <timecmp_test_18+0x130>
    80021740:	4481                	li	s1,0
    TEST_END(); 
    80021742:	00011597          	auipc	a1,0x11
    80021746:	f7658593          	addi	a1,a1,-138 # 800326b8 <__func__.0+0x2d0>
    8002174a:	00011517          	auipc	a0,0x11
    8002174e:	01650513          	addi	a0,a0,22 # 80032760 <__func__.0+0x378>
    80021752:	5730d0ef          	jal	8002f4c4 <printf>
    80021756:	4511                	li	a0,4
    80021758:	fbcdf0ef          	jal	80000f14 <goto_priv>
    8002175c:	81ae00ef          	jal	80001776 <reset_state>
}
    80021760:	60e2                	ld	ra,24(sp)
    80021762:	6442                	ld	s0,16(sp)
    80021764:	8526                	mv	a0,s1
    80021766:	64a2                	ld	s1,8(sp)
    80021768:	6105                	addi	sp,sp,32
    8002176a:	8082                	ret

000000008002176c <timecmp_test_19>:


bool timecmp_test_19() {
    8002176c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002176e:	00010597          	auipc	a1,0x10
    80021772:	2ca58593          	addi	a1,a1,714 # 80031a38 <__func__.2>
    80021776:	00011517          	auipc	a0,0x11
    8002177a:	f5250513          	addi	a0,a0,-174 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_19() {
    8002177e:	ec06                	sd	ra,24(sp)
    80021780:	e822                	sd	s0,16(sp)
    80021782:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021784:	5410d0ef          	jal	8002f4c4 <printf>
    80021788:	4529                	li	a0,10
    8002178a:	2290c0ef          	jal	8002e1b2 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002178e:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021792:	57fd                	li	a5,-1
    80021794:	17fe                	slli	a5,a5,0x3f
    80021796:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8002179a:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    8002179e:	30a025f3          	csrr	a1,0x30a
    800217a2:	00017517          	auipc	a0,0x17
    800217a6:	55e50513          	addi	a0,a0,1374 # 80038d00 <__func__.0+0x6918>
    800217aa:	51b0d0ef          	jal	8002f4c4 <printf>
    800217ae:	60a025f3          	csrr	a1,henvcfg
    800217b2:	00017517          	auipc	a0,0x17
    800217b6:	54e50513          	addi	a0,a0,1358 # 80038d00 <__func__.0+0x6918>
    800217ba:	50b0d0ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VU);
    800217be:	4501                	li	a0,0
    800217c0:	f54df0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    800217c4:	e54df0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800217c8:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800217cc:	0003b597          	auipc	a1,0x3b
    800217d0:	8455c583          	lbu	a1,-1979(a1) # 8005c011 <excpt+0x1>
    800217d4:	00019517          	auipc	a0,0x19
    800217d8:	25450513          	addi	a0,a0,596 # 8003aa28 <__func__.0+0x8640>
    800217dc:	0003b417          	auipc	s0,0x3b
    800217e0:	83440413          	addi	s0,s0,-1996 # 8005c010 <excpt>
    800217e4:	4e10d0ef          	jal	8002f4c4 <printf>
    printf("cause=%d\n",excpt.cause);
    800217e8:	640c                	ld	a1,8(s0)
    800217ea:	00019517          	auipc	a0,0x19
    800217ee:	24e50513          	addi	a0,a0,590 # 8003aa38 <__func__.0+0x8650>
    800217f2:	4d30d0ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800217f6:	08c00593          	li	a1,140
    800217fa:	00019617          	auipc	a2,0x19
    800217fe:	32e60613          	addi	a2,a2,814 # 8003ab28 <__func__.0+0x8740>
    80021802:	00011517          	auipc	a0,0x11
    80021806:	ede50513          	addi	a0,a0,-290 # 800326e0 <__func__.0+0x2f8>
    8002180a:	4bb0d0ef          	jal	8002f4c4 <printf>
    8002180e:	0003b797          	auipc	a5,0x3b
    80021812:	8037c783          	lbu	a5,-2045(a5) # 8005c011 <excpt+0x1>
    80021816:	00011597          	auipc	a1,0x11
    8002181a:	ea258593          	addi	a1,a1,-350 # 800326b8 <__func__.0+0x2d0>
    8002181e:	cf89                	beqz	a5,80021838 <timecmp_test_19+0xcc>
    80021820:	6418                	ld	a4,8(s0)
    80021822:	4789                	li	a5,2
    80021824:	00011597          	auipc	a1,0x11
    80021828:	e8458593          	addi	a1,a1,-380 # 800326a8 <__func__.0+0x2c0>
    8002182c:	00f70663          	beq	a4,a5,80021838 <timecmp_test_19+0xcc>
    80021830:	00011597          	auipc	a1,0x11
    80021834:	e8858593          	addi	a1,a1,-376 # 800326b8 <__func__.0+0x2d0>
    80021838:	00011517          	auipc	a0,0x11
    8002183c:	ec050513          	addi	a0,a0,-320 # 800326f8 <__func__.0+0x310>
    80021840:	4850d0ef          	jal	8002f4c4 <printf>
    80021844:	0003a797          	auipc	a5,0x3a
    80021848:	7cd7c783          	lbu	a5,1997(a5) # 8005c011 <excpt+0x1>
    8002184c:	c789                	beqz	a5,80021856 <timecmp_test_19+0xea>
    8002184e:	6418                	ld	a4,8(s0)
    80021850:	4789                	li	a5,2
    80021852:	00f70c63          	beq	a4,a5,8002186a <timecmp_test_19+0xfe>
    80021856:	00011517          	auipc	a0,0x11
    8002185a:	eaa50513          	addi	a0,a0,-342 # 80032700 <__func__.0+0x318>
    8002185e:	4670d0ef          	jal	8002f4c4 <printf>
    80021862:	02900513          	li	a0,41
    80021866:	14d0c0ef          	jal	8002e1b2 <putchar>
    8002186a:	4529                	li	a0,10
    8002186c:	1470c0ef          	jal	8002e1b2 <putchar>
    80021870:	0003a497          	auipc	s1,0x3a
    80021874:	7a14c483          	lbu	s1,1953(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021878:	00011597          	auipc	a1,0x11
    8002187c:	e4058593          	addi	a1,a1,-448 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021880:	cc91                	beqz	s1,8002189c <timecmp_test_19+0x130>
    80021882:	6418                	ld	a4,8(s0)
    80021884:	4789                	li	a5,2
    TEST_END(); 
    80021886:	00011597          	auipc	a1,0x11
    8002188a:	e2258593          	addi	a1,a1,-478 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002188e:	00f70763          	beq	a4,a5,8002189c <timecmp_test_19+0x130>
    80021892:	4481                	li	s1,0
    TEST_END(); 
    80021894:	00011597          	auipc	a1,0x11
    80021898:	e2458593          	addi	a1,a1,-476 # 800326b8 <__func__.0+0x2d0>
    8002189c:	00011517          	auipc	a0,0x11
    800218a0:	ec450513          	addi	a0,a0,-316 # 80032760 <__func__.0+0x378>
    800218a4:	4210d0ef          	jal	8002f4c4 <printf>
    800218a8:	4511                	li	a0,4
    800218aa:	e6adf0ef          	jal	80000f14 <goto_priv>
    800218ae:	ec9df0ef          	jal	80001776 <reset_state>
}
    800218b2:	60e2                	ld	ra,24(sp)
    800218b4:	6442                	ld	s0,16(sp)
    800218b6:	8526                	mv	a0,s1
    800218b8:	64a2                	ld	s1,8(sp)
    800218ba:	6105                	addi	sp,sp,32
    800218bc:	8082                	ret

00000000800218be <timecmp_test_20>:

bool timecmp_test_20() {
    800218be:	1101                	addi	sp,sp,-32

    TEST_START();    
    800218c0:	00010597          	auipc	a1,0x10
    800218c4:	18858593          	addi	a1,a1,392 # 80031a48 <__func__.1>
    800218c8:	00011517          	auipc	a0,0x11
    800218cc:	e0050513          	addi	a0,a0,-512 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_20() {
    800218d0:	ec06                	sd	ra,24(sp)
    800218d2:	e822                	sd	s0,16(sp)
    800218d4:	e426                	sd	s1,8(sp)
    TEST_START();    
    800218d6:	3ef0d0ef          	jal	8002f4c4 <printf>
    800218da:	4529                	li	a0,10
    800218dc:	0d70c0ef          	jal	8002e1b2 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800218e0:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800218e4:	57fd                	li	a5,-1
    800218e6:	17fe                	slli	a5,a5,0x3f
    800218e8:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800218ec:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800218f0:	30a025f3          	csrr	a1,0x30a
    800218f4:	00017517          	auipc	a0,0x17
    800218f8:	40c50513          	addi	a0,a0,1036 # 80038d00 <__func__.0+0x6918>
    800218fc:	3c90d0ef          	jal	8002f4c4 <printf>
    80021900:	60a025f3          	csrr	a1,henvcfg
    80021904:	00017517          	auipc	a0,0x17
    80021908:	3fc50513          	addi	a0,a0,1020 # 80038d00 <__func__.0+0x6918>
    8002190c:	3b90d0ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);
    80021910:	4509                	li	a0,2
    80021912:	e02df0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021916:	d02df0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002191a:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    8002191e:	0003a597          	auipc	a1,0x3a
    80021922:	6f35c583          	lbu	a1,1779(a1) # 8005c011 <excpt+0x1>
    80021926:	00019517          	auipc	a0,0x19
    8002192a:	10250513          	addi	a0,a0,258 # 8003aa28 <__func__.0+0x8640>
    8002192e:	0003a417          	auipc	s0,0x3a
    80021932:	6e240413          	addi	s0,s0,1762 # 8005c010 <excpt>
    80021936:	38f0d0ef          	jal	8002f4c4 <printf>
    printf("cause=%d\n",excpt.cause);
    8002193a:	640c                	ld	a1,8(s0)
    8002193c:	00019517          	auipc	a0,0x19
    80021940:	0fc50513          	addi	a0,a0,252 # 8003aa38 <__func__.0+0x8650>
    80021944:	3810d0ef          	jal	8002f4c4 <printf>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021948:	08c00593          	li	a1,140
    8002194c:	00019617          	auipc	a2,0x19
    80021950:	24c60613          	addi	a2,a2,588 # 8003ab98 <__func__.0+0x87b0>
    80021954:	00011517          	auipc	a0,0x11
    80021958:	d8c50513          	addi	a0,a0,-628 # 800326e0 <__func__.0+0x2f8>
    8002195c:	3690d0ef          	jal	8002f4c4 <printf>
    80021960:	0003a797          	auipc	a5,0x3a
    80021964:	6b17c783          	lbu	a5,1713(a5) # 8005c011 <excpt+0x1>
    80021968:	00011597          	auipc	a1,0x11
    8002196c:	d5058593          	addi	a1,a1,-688 # 800326b8 <__func__.0+0x2d0>
    80021970:	cf89                	beqz	a5,8002198a <timecmp_test_20+0xcc>
    80021972:	6418                	ld	a4,8(s0)
    80021974:	4789                	li	a5,2
    80021976:	00011597          	auipc	a1,0x11
    8002197a:	d3258593          	addi	a1,a1,-718 # 800326a8 <__func__.0+0x2c0>
    8002197e:	00f70663          	beq	a4,a5,8002198a <timecmp_test_20+0xcc>
    80021982:	00011597          	auipc	a1,0x11
    80021986:	d3658593          	addi	a1,a1,-714 # 800326b8 <__func__.0+0x2d0>
    8002198a:	00011517          	auipc	a0,0x11
    8002198e:	d6e50513          	addi	a0,a0,-658 # 800326f8 <__func__.0+0x310>
    80021992:	3330d0ef          	jal	8002f4c4 <printf>
    80021996:	0003a797          	auipc	a5,0x3a
    8002199a:	67b7c783          	lbu	a5,1659(a5) # 8005c011 <excpt+0x1>
    8002199e:	c789                	beqz	a5,800219a8 <timecmp_test_20+0xea>
    800219a0:	6418                	ld	a4,8(s0)
    800219a2:	4789                	li	a5,2
    800219a4:	00f70c63          	beq	a4,a5,800219bc <timecmp_test_20+0xfe>
    800219a8:	00011517          	auipc	a0,0x11
    800219ac:	d5850513          	addi	a0,a0,-680 # 80032700 <__func__.0+0x318>
    800219b0:	3150d0ef          	jal	8002f4c4 <printf>
    800219b4:	02900513          	li	a0,41
    800219b8:	7fa0c0ef          	jal	8002e1b2 <putchar>
    800219bc:	4529                	li	a0,10
    800219be:	7f40c0ef          	jal	8002e1b2 <putchar>
    800219c2:	0003a497          	auipc	s1,0x3a
    800219c6:	64f4c483          	lbu	s1,1615(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800219ca:	00011597          	auipc	a1,0x11
    800219ce:	cee58593          	addi	a1,a1,-786 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800219d2:	cc91                	beqz	s1,800219ee <timecmp_test_20+0x130>
    800219d4:	6418                	ld	a4,8(s0)
    800219d6:	4789                	li	a5,2
    TEST_END(); 
    800219d8:	00011597          	auipc	a1,0x11
    800219dc:	cd058593          	addi	a1,a1,-816 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800219e0:	00f70763          	beq	a4,a5,800219ee <timecmp_test_20+0x130>
    800219e4:	4481                	li	s1,0
    TEST_END(); 
    800219e6:	00011597          	auipc	a1,0x11
    800219ea:	cd258593          	addi	a1,a1,-814 # 800326b8 <__func__.0+0x2d0>
    800219ee:	00011517          	auipc	a0,0x11
    800219f2:	d7250513          	addi	a0,a0,-654 # 80032760 <__func__.0+0x378>
    800219f6:	2cf0d0ef          	jal	8002f4c4 <printf>
    800219fa:	4511                	li	a0,4
    800219fc:	d18df0ef          	jal	80000f14 <goto_priv>
    80021a00:	d77df0ef          	jal	80001776 <reset_state>
}
    80021a04:	60e2                	ld	ra,24(sp)
    80021a06:	6442                	ld	s0,16(sp)
    80021a08:	8526                	mv	a0,s1
    80021a0a:	64a2                	ld	s1,8(sp)
    80021a0c:	6105                	addi	sp,sp,32
    80021a0e:	8082                	ret

0000000080021a10 <timecmp_test_21>:

bool timecmp_test_21() {
    80021a10:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021a12:	00010597          	auipc	a1,0x10
    80021a16:	04658593          	addi	a1,a1,70 # 80031a58 <__func__.0>
    80021a1a:	00011517          	auipc	a0,0x11
    80021a1e:	cae50513          	addi	a0,a0,-850 # 800326c8 <__func__.0+0x2e0>
bool timecmp_test_21() {
    80021a22:	ec06                	sd	ra,24(sp)
    80021a24:	e822                	sd	s0,16(sp)
    80021a26:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021a28:	29d0d0ef          	jal	8002f4c4 <printf>
    80021a2c:	4529                	li	a0,10
    80021a2e:	7840c0ef          	jal	8002e1b2 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80021a32:	57fd                	li	a5,-1
    80021a34:	17fe                	slli	a5,a5,0x3f
    80021a36:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021a3a:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    80021a3e:	4509                	li	a0,2
    80021a40:	cd4df0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021a44:	bd4df0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021a48:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021a4c:	08c00593          	li	a1,140
    80021a50:	00019617          	auipc	a2,0x19
    80021a54:	1b860613          	addi	a2,a2,440 # 8003ac08 <__func__.0+0x8820>
    80021a58:	00011517          	auipc	a0,0x11
    80021a5c:	c8850513          	addi	a0,a0,-888 # 800326e0 <__func__.0+0x2f8>
    80021a60:	2650d0ef          	jal	8002f4c4 <printf>
    80021a64:	0003a797          	auipc	a5,0x3a
    80021a68:	5ad7c783          	lbu	a5,1453(a5) # 8005c011 <excpt+0x1>
    80021a6c:	0003a497          	auipc	s1,0x3a
    80021a70:	5a448493          	addi	s1,s1,1444 # 8005c010 <excpt>
    80021a74:	00011597          	auipc	a1,0x11
    80021a78:	c4458593          	addi	a1,a1,-956 # 800326b8 <__func__.0+0x2d0>
    80021a7c:	cf89                	beqz	a5,80021a96 <timecmp_test_21+0x86>
    80021a7e:	6498                	ld	a4,8(s1)
    80021a80:	4789                	li	a5,2
    80021a82:	00011597          	auipc	a1,0x11
    80021a86:	c2658593          	addi	a1,a1,-986 # 800326a8 <__func__.0+0x2c0>
    80021a8a:	00f70663          	beq	a4,a5,80021a96 <timecmp_test_21+0x86>
    80021a8e:	00011597          	auipc	a1,0x11
    80021a92:	c2a58593          	addi	a1,a1,-982 # 800326b8 <__func__.0+0x2d0>
    80021a96:	00011517          	auipc	a0,0x11
    80021a9a:	c6250513          	addi	a0,a0,-926 # 800326f8 <__func__.0+0x310>
    80021a9e:	2270d0ef          	jal	8002f4c4 <printf>
    80021aa2:	0003a797          	auipc	a5,0x3a
    80021aa6:	56f7c783          	lbu	a5,1391(a5) # 8005c011 <excpt+0x1>
    80021aaa:	c789                	beqz	a5,80021ab4 <timecmp_test_21+0xa4>
    80021aac:	6498                	ld	a4,8(s1)
    80021aae:	4789                	li	a5,2
    80021ab0:	00f70c63          	beq	a4,a5,80021ac8 <timecmp_test_21+0xb8>
    80021ab4:	00011517          	auipc	a0,0x11
    80021ab8:	c4c50513          	addi	a0,a0,-948 # 80032700 <__func__.0+0x318>
    80021abc:	2090d0ef          	jal	8002f4c4 <printf>
    80021ac0:	02900513          	li	a0,41
    80021ac4:	6ee0c0ef          	jal	8002e1b2 <putchar>
    80021ac8:	4529                	li	a0,10
    80021aca:	6e80c0ef          	jal	8002e1b2 <putchar>
    80021ace:	0003a797          	auipc	a5,0x3a
    80021ad2:	5437c783          	lbu	a5,1347(a5) # 8005c011 <excpt+0x1>
    80021ad6:	4401                	li	s0,0
    80021ad8:	c789                	beqz	a5,80021ae2 <timecmp_test_21+0xd2>
    80021ada:	6480                	ld	s0,8(s1)
    80021adc:	1479                	addi	s0,s0,-2
    80021ade:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    80021ae2:	4501                	li	a0,0
    80021ae4:	c30df0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021ae8:	b30df0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021aec:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021af0:	08c00593          	li	a1,140
    80021af4:	00019617          	auipc	a2,0x19
    80021af8:	17c60613          	addi	a2,a2,380 # 8003ac70 <__func__.0+0x8888>
    80021afc:	00011517          	auipc	a0,0x11
    80021b00:	be450513          	addi	a0,a0,-1052 # 800326e0 <__func__.0+0x2f8>
    80021b04:	1c10d0ef          	jal	8002f4c4 <printf>
    80021b08:	0003a797          	auipc	a5,0x3a
    80021b0c:	5097c783          	lbu	a5,1289(a5) # 8005c011 <excpt+0x1>
    80021b10:	00011597          	auipc	a1,0x11
    80021b14:	ba858593          	addi	a1,a1,-1112 # 800326b8 <__func__.0+0x2d0>
    80021b18:	cf89                	beqz	a5,80021b32 <timecmp_test_21+0x122>
    80021b1a:	6498                	ld	a4,8(s1)
    80021b1c:	4789                	li	a5,2
    80021b1e:	00011597          	auipc	a1,0x11
    80021b22:	b8a58593          	addi	a1,a1,-1142 # 800326a8 <__func__.0+0x2c0>
    80021b26:	00f70663          	beq	a4,a5,80021b32 <timecmp_test_21+0x122>
    80021b2a:	00011597          	auipc	a1,0x11
    80021b2e:	b8e58593          	addi	a1,a1,-1138 # 800326b8 <__func__.0+0x2d0>
    80021b32:	00011517          	auipc	a0,0x11
    80021b36:	bc650513          	addi	a0,a0,-1082 # 800326f8 <__func__.0+0x310>
    80021b3a:	18b0d0ef          	jal	8002f4c4 <printf>
    80021b3e:	0003a797          	auipc	a5,0x3a
    80021b42:	4d37c783          	lbu	a5,1235(a5) # 8005c011 <excpt+0x1>
    80021b46:	c789                	beqz	a5,80021b50 <timecmp_test_21+0x140>
    80021b48:	6498                	ld	a4,8(s1)
    80021b4a:	4789                	li	a5,2
    80021b4c:	00f70c63          	beq	a4,a5,80021b64 <timecmp_test_21+0x154>
    80021b50:	00011517          	auipc	a0,0x11
    80021b54:	bb050513          	addi	a0,a0,-1104 # 80032700 <__func__.0+0x318>
    80021b58:	16d0d0ef          	jal	8002f4c4 <printf>
    80021b5c:	02900513          	li	a0,41
    80021b60:	6520c0ef          	jal	8002e1b2 <putchar>
    80021b64:	4529                	li	a0,10
    80021b66:	64c0c0ef          	jal	8002e1b2 <putchar>
    80021b6a:	c015                	beqz	s0,80021b8e <timecmp_test_21+0x17e>
    80021b6c:	0003a417          	auipc	s0,0x3a
    80021b70:	4a544403          	lbu	s0,1189(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021b74:	00011597          	auipc	a1,0x11
    80021b78:	b4458593          	addi	a1,a1,-1212 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021b7c:	cc11                	beqz	s0,80021b98 <timecmp_test_21+0x188>
    80021b7e:	6498                	ld	a4,8(s1)
    80021b80:	4789                	li	a5,2
    TEST_END(); 
    80021b82:	00011597          	auipc	a1,0x11
    80021b86:	b2658593          	addi	a1,a1,-1242 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021b8a:	00f70763          	beq	a4,a5,80021b98 <timecmp_test_21+0x188>
    80021b8e:	4401                	li	s0,0
    TEST_END(); 
    80021b90:	00011597          	auipc	a1,0x11
    80021b94:	b2858593          	addi	a1,a1,-1240 # 800326b8 <__func__.0+0x2d0>
    80021b98:	00011517          	auipc	a0,0x11
    80021b9c:	bc850513          	addi	a0,a0,-1080 # 80032760 <__func__.0+0x378>
    80021ba0:	1250d0ef          	jal	8002f4c4 <printf>
    80021ba4:	4511                	li	a0,4
    80021ba6:	b6edf0ef          	jal	80000f14 <goto_priv>
    80021baa:	bcddf0ef          	jal	80001776 <reset_state>
    80021bae:	60e2                	ld	ra,24(sp)
    80021bb0:	8522                	mv	a0,s0
    80021bb2:	6442                	ld	s0,16(sp)
    80021bb4:	64a2                	ld	s1,8(sp)
    80021bb6:	6105                	addi	sp,sp,32
    80021bb8:	8082                	ret

0000000080021bba <mix_instruction_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h>

bool mix_instruction_1(){
    80021bba:	7179                	addi	sp,sp,-48

    TEST_START();
    80021bbc:	00010597          	auipc	a1,0x10
    80021bc0:	eac58593          	addi	a1,a1,-340 # 80031a68 <__func__.2>
    80021bc4:	00011517          	auipc	a0,0x11
    80021bc8:	b0450513          	addi	a0,a0,-1276 # 800326c8 <__func__.0+0x2e0>
bool mix_instruction_1(){
    80021bcc:	f406                	sd	ra,40(sp)
    80021bce:	f022                	sd	s0,32(sp)
    80021bd0:	ec26                	sd	s1,24(sp)
    80021bd2:	e84a                	sd	s2,16(sp)
    80021bd4:	e44e                	sd	s3,8(sp)
    TEST_START();
    80021bd6:	0ef0d0ef          	jal	8002f4c4 <printf>
    80021bda:	4529                	li	a0,10
    80021bdc:	5d60c0ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    80021be0:	4511                	li	a0,4
    80021be2:	b32df0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021be6:	57fd                	li	a5,-1
    80021be8:	17fe                	slli	a5,a5,0x3f
    80021bea:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021bee:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021bf2:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80021bf6:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80021bfa:	4509                	li	a0,2
    80021bfc:	b18df0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021c00:	a18df0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80021c04:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 and henvcfg.stce=0",
    80021c08:	08c00593          	li	a1,140
    80021c0c:	00019617          	auipc	a2,0x19
    80021c10:	0cc60613          	addi	a2,a2,204 # 8003acd8 <__func__.0+0x88f0>
    80021c14:	00011517          	auipc	a0,0x11
    80021c18:	acc50513          	addi	a0,a0,-1332 # 800326e0 <__func__.0+0x2f8>
    80021c1c:	0a90d0ef          	jal	8002f4c4 <printf>
    80021c20:	0003a797          	auipc	a5,0x3a
    80021c24:	3f17c783          	lbu	a5,1009(a5) # 8005c011 <excpt+0x1>
    80021c28:	0003a497          	auipc	s1,0x3a
    80021c2c:	3e848493          	addi	s1,s1,1000 # 8005c010 <excpt>
    80021c30:	00011597          	auipc	a1,0x11
    80021c34:	a8858593          	addi	a1,a1,-1400 # 800326b8 <__func__.0+0x2d0>
    80021c38:	cf89                	beqz	a5,80021c52 <mix_instruction_1+0x98>
    80021c3a:	6498                	ld	a4,8(s1)
    80021c3c:	47d9                	li	a5,22
    80021c3e:	00011597          	auipc	a1,0x11
    80021c42:	a6a58593          	addi	a1,a1,-1430 # 800326a8 <__func__.0+0x2c0>
    80021c46:	00f70663          	beq	a4,a5,80021c52 <mix_instruction_1+0x98>
    80021c4a:	00011597          	auipc	a1,0x11
    80021c4e:	a6e58593          	addi	a1,a1,-1426 # 800326b8 <__func__.0+0x2d0>
    80021c52:	00011517          	auipc	a0,0x11
    80021c56:	aa650513          	addi	a0,a0,-1370 # 800326f8 <__func__.0+0x310>
    80021c5a:	06b0d0ef          	jal	8002f4c4 <printf>
    80021c5e:	0003a797          	auipc	a5,0x3a
    80021c62:	3b37c783          	lbu	a5,947(a5) # 8005c011 <excpt+0x1>
    80021c66:	c789                	beqz	a5,80021c70 <mix_instruction_1+0xb6>
    80021c68:	6498                	ld	a4,8(s1)
    80021c6a:	47d9                	li	a5,22
    80021c6c:	00f70c63          	beq	a4,a5,80021c84 <mix_instruction_1+0xca>
    80021c70:	00011517          	auipc	a0,0x11
    80021c74:	a9050513          	addi	a0,a0,-1392 # 80032700 <__func__.0+0x318>
    80021c78:	04d0d0ef          	jal	8002f4c4 <printf>
    80021c7c:	02900513          	li	a0,41
    80021c80:	5320c0ef          	jal	8002e1b2 <putchar>
    80021c84:	4529                	li	a0,10
    80021c86:	52c0c0ef          	jal	8002e1b2 <putchar>
    80021c8a:	0003a797          	auipc	a5,0x3a
    80021c8e:	3877c783          	lbu	a5,903(a5) # 8005c011 <excpt+0x1>
    80021c92:	4401                	li	s0,0
    80021c94:	c789                	beqz	a5,80021c9e <mix_instruction_1+0xe4>
    80021c96:	6480                	ld	s0,8(s1)
    80021c98:	1429                	addi	s0,s0,-22
    80021c9a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80021c9e:	4511                	li	a0,4
    80021ca0:	a74df0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021ca4:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    80021ca8:	450d                	li	a0,3
    80021caa:	a6adf0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021cae:	96adf0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_TIME);
    80021cb2:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    80021cb6:	08c00593          	li	a1,140
    80021cba:	00018617          	auipc	a2,0x18
    80021cbe:	c3660613          	addi	a2,a2,-970 # 800398f0 <__func__.0+0x7508>
    80021cc2:	00011517          	auipc	a0,0x11
    80021cc6:	a1e50513          	addi	a0,a0,-1506 # 800326e0 <__func__.0+0x2f8>
    80021cca:	7fa0d0ef          	jal	8002f4c4 <printf>
    80021cce:	0003a797          	auipc	a5,0x3a
    80021cd2:	3437c783          	lbu	a5,835(a5) # 8005c011 <excpt+0x1>
    80021cd6:	00011597          	auipc	a1,0x11
    80021cda:	9e258593          	addi	a1,a1,-1566 # 800326b8 <__func__.0+0x2d0>
    80021cde:	cf89                	beqz	a5,80021cf8 <mix_instruction_1+0x13e>
    80021ce0:	6498                	ld	a4,8(s1)
    80021ce2:	4789                	li	a5,2
    80021ce4:	00011597          	auipc	a1,0x11
    80021ce8:	9c458593          	addi	a1,a1,-1596 # 800326a8 <__func__.0+0x2c0>
    80021cec:	00f70663          	beq	a4,a5,80021cf8 <mix_instruction_1+0x13e>
    80021cf0:	00011597          	auipc	a1,0x11
    80021cf4:	9c858593          	addi	a1,a1,-1592 # 800326b8 <__func__.0+0x2d0>
    80021cf8:	00011517          	auipc	a0,0x11
    80021cfc:	a0050513          	addi	a0,a0,-1536 # 800326f8 <__func__.0+0x310>
    80021d00:	7c40d0ef          	jal	8002f4c4 <printf>
    80021d04:	0003a797          	auipc	a5,0x3a
    80021d08:	30d7c783          	lbu	a5,781(a5) # 8005c011 <excpt+0x1>
    80021d0c:	c789                	beqz	a5,80021d16 <mix_instruction_1+0x15c>
    80021d0e:	6498                	ld	a4,8(s1)
    80021d10:	4789                	li	a5,2
    80021d12:	00f70c63          	beq	a4,a5,80021d2a <mix_instruction_1+0x170>
    80021d16:	00011517          	auipc	a0,0x11
    80021d1a:	9ea50513          	addi	a0,a0,-1558 # 80032700 <__func__.0+0x318>
    80021d1e:	7a60d0ef          	jal	8002f4c4 <printf>
    80021d22:	02900513          	li	a0,41
    80021d26:	48c0c0ef          	jal	8002e1b2 <putchar>
    80021d2a:	4529                	li	a0,10
    80021d2c:	4860c0ef          	jal	8002e1b2 <putchar>
    80021d30:	c801                	beqz	s0,80021d40 <mix_instruction_1+0x186>
    80021d32:	0003a797          	auipc	a5,0x3a
    80021d36:	2df7c783          	lbu	a5,735(a5) # 8005c011 <excpt+0x1>
    80021d3a:	4401                	li	s0,0
    80021d3c:	040794e3          	bnez	a5,80022584 <mix_instruction_1+0x9ca>
    //     excpt.cause == CAUSE_ILI
    // ); 
    
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80021d40:	4511                	li	a0,4
    80021d42:	9d2df0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80021d46:	004007b7          	lui	a5,0x400
    80021d4a:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80021d4e:	002007b7          	lui	a5,0x200
    80021d52:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    80021d56:	4501                	li	a0,0
    80021d58:	9bcdf0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80021d5c:	8bcdf0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile(
    80021d60:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80021d64:	08c00593          	li	a1,140
    80021d68:	00012617          	auipc	a2,0x12
    80021d6c:	aa860613          	addi	a2,a2,-1368 # 80033810 <__func__.0+0x1428>
    80021d70:	00011517          	auipc	a0,0x11
    80021d74:	97050513          	addi	a0,a0,-1680 # 800326e0 <__func__.0+0x2f8>
    80021d78:	74c0d0ef          	jal	8002f4c4 <printf>
    80021d7c:	0003a797          	auipc	a5,0x3a
    80021d80:	2957c783          	lbu	a5,661(a5) # 8005c011 <excpt+0x1>
    80021d84:	00011597          	auipc	a1,0x11
    80021d88:	93458593          	addi	a1,a1,-1740 # 800326b8 <__func__.0+0x2d0>
    80021d8c:	cf89                	beqz	a5,80021da6 <mix_instruction_1+0x1ec>
    80021d8e:	6498                	ld	a4,8(s1)
    80021d90:	47d9                	li	a5,22
    80021d92:	00011597          	auipc	a1,0x11
    80021d96:	91658593          	addi	a1,a1,-1770 # 800326a8 <__func__.0+0x2c0>
    80021d9a:	00f70663          	beq	a4,a5,80021da6 <mix_instruction_1+0x1ec>
    80021d9e:	00011597          	auipc	a1,0x11
    80021da2:	91a58593          	addi	a1,a1,-1766 # 800326b8 <__func__.0+0x2d0>
    80021da6:	00011517          	auipc	a0,0x11
    80021daa:	95250513          	addi	a0,a0,-1710 # 800326f8 <__func__.0+0x310>
    80021dae:	7160d0ef          	jal	8002f4c4 <printf>
    80021db2:	0003a797          	auipc	a5,0x3a
    80021db6:	25f7c783          	lbu	a5,607(a5) # 8005c011 <excpt+0x1>
    80021dba:	c789                	beqz	a5,80021dc4 <mix_instruction_1+0x20a>
    80021dbc:	6498                	ld	a4,8(s1)
    80021dbe:	47d9                	li	a5,22
    80021dc0:	00f70c63          	beq	a4,a5,80021dd8 <mix_instruction_1+0x21e>
    80021dc4:	00011517          	auipc	a0,0x11
    80021dc8:	93c50513          	addi	a0,a0,-1732 # 80032700 <__func__.0+0x318>
    80021dcc:	6f80d0ef          	jal	8002f4c4 <printf>
    80021dd0:	02900513          	li	a0,41
    80021dd4:	3de0c0ef          	jal	8002e1b2 <putchar>
    80021dd8:	4529                	li	a0,10
    80021dda:	3d80c0ef          	jal	8002e1b2 <putchar>
    80021dde:	c801                	beqz	s0,80021dee <mix_instruction_1+0x234>
    80021de0:	0003a797          	auipc	a5,0x3a
    80021de4:	2317c783          	lbu	a5,561(a5) # 8005c011 <excpt+0x1>
    80021de8:	4401                	li	s0,0
    80021dea:	78079763          	bnez	a5,80022578 <mix_instruction_1+0x9be>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80021dee:	4511                	li	a0,4
    80021df0:	924df0ef          	jal	80000f14 <goto_priv>
    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    hspt_init();
    80021df4:	ff8de0ef          	jal	800005ec <hspt_init>
    hpt_init(); 
    80021df8:	bd9de0ef          	jal	800009d0 <hpt_init>
    vspt_init();
    80021dfc:	98dde0ef          	jal	80000788 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80021e00:	450d                	li	a0,3
    80021e02:	912df0ef          	jal	80000f14 <goto_priv>

    set_prev_priv(PRIV_VU);
    80021e06:	4501                	li	a0,0
    80021e08:	82cdf0ef          	jal	80000e34 <set_prev_priv>
    *((volatile uint64_t*) addr) = val;
    80021e0c:	0001d917          	auipc	s2,0x1d
    80021e10:	21490913          	addi	s2,s2,532 # 8003f020 <__func__.0+0xcc38>
    TEST_SETUP_EXCEPT();
    80021e14:	804df0ef          	jal	80000e18 <test_setup_except_function>
    80021e18:	00093683          	ld	a3,0(s2)
    80021e1c:	44019737          	lui	a4,0x44019
    asm volatile(
    80021e20:	000807b7          	lui	a5,0x80
    80021e24:	0706                	slli	a4,a4,0x1
    80021e26:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80021e28:	e314                	sd	a3,0(a4)
    80021e2a:	07b6                	slli	a5,a5,0xd
    80021e2c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80021e30:	08c00593          	li	a1,140
    80021e34:	00011617          	auipc	a2,0x11
    80021e38:	26c60613          	addi	a2,a2,620 # 800330a0 <__func__.0+0xcb8>
    80021e3c:	00011517          	auipc	a0,0x11
    80021e40:	8a450513          	addi	a0,a0,-1884 # 800326e0 <__func__.0+0x2f8>
    80021e44:	6800d0ef          	jal	8002f4c4 <printf>
    80021e48:	0003a797          	auipc	a5,0x3a
    80021e4c:	1c97c783          	lbu	a5,457(a5) # 8005c011 <excpt+0x1>
    80021e50:	00011597          	auipc	a1,0x11
    80021e54:	86858593          	addi	a1,a1,-1944 # 800326b8 <__func__.0+0x2d0>
    80021e58:	e789                	bnez	a5,80021e62 <mix_instruction_1+0x2a8>
    80021e5a:	00011597          	auipc	a1,0x11
    80021e5e:	84e58593          	addi	a1,a1,-1970 # 800326a8 <__func__.0+0x2c0>
    80021e62:	00011517          	auipc	a0,0x11
    80021e66:	89650513          	addi	a0,a0,-1898 # 800326f8 <__func__.0+0x310>
    80021e6a:	65a0d0ef          	jal	8002f4c4 <printf>
    80021e6e:	0003a797          	auipc	a5,0x3a
    80021e72:	1a37c783          	lbu	a5,419(a5) # 8005c011 <excpt+0x1>
    80021e76:	76079563          	bnez	a5,800225e0 <mix_instruction_1+0xa26>
    80021e7a:	4529                	li	a0,10
    80021e7c:	3360c0ef          	jal	8002e1b2 <putchar>
    80021e80:	c419                	beqz	s0,80021e8e <mix_instruction_1+0x2d4>
    80021e82:	0003a417          	auipc	s0,0x3a
    80021e86:	18f44403          	lbu	s0,399(s0) # 8005c011 <excpt+0x1>
    80021e8a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    80021e8e:	4509                	li	a0,2
    80021e90:	fa5de0ef          	jal	80000e34 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80021e94:	f85de0ef          	jal	80000e18 <test_setup_except_function>
    80021e98:	00093683          	ld	a3,0(s2)
    80021e9c:	44019737          	lui	a4,0x44019
    80021ea0:	000807b7          	lui	a5,0x80
    80021ea4:	0706                	slli	a4,a4,0x1
    80021ea6:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80021ea8:	e314                	sd	a3,0(a4)
    80021eaa:	07b6                	slli	a5,a5,0xd
    80021eac:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80021eb0:	08c00593          	li	a1,140
    80021eb4:	00011617          	auipc	a2,0x11
    80021eb8:	21c60613          	addi	a2,a2,540 # 800330d0 <__func__.0+0xce8>
    80021ebc:	00011517          	auipc	a0,0x11
    80021ec0:	82450513          	addi	a0,a0,-2012 # 800326e0 <__func__.0+0x2f8>
    80021ec4:	6000d0ef          	jal	8002f4c4 <printf>
    80021ec8:	0003a797          	auipc	a5,0x3a
    80021ecc:	1497c783          	lbu	a5,329(a5) # 8005c011 <excpt+0x1>
    80021ed0:	00010597          	auipc	a1,0x10
    80021ed4:	7e858593          	addi	a1,a1,2024 # 800326b8 <__func__.0+0x2d0>
    80021ed8:	cf89                	beqz	a5,80021ef2 <mix_instruction_1+0x338>
    80021eda:	6498                	ld	a4,8(s1)
    80021edc:	47b5                	li	a5,13
    80021ede:	00010597          	auipc	a1,0x10
    80021ee2:	7ca58593          	addi	a1,a1,1994 # 800326a8 <__func__.0+0x2c0>
    80021ee6:	00f70663          	beq	a4,a5,80021ef2 <mix_instruction_1+0x338>
    80021eea:	00010597          	auipc	a1,0x10
    80021eee:	7ce58593          	addi	a1,a1,1998 # 800326b8 <__func__.0+0x2d0>
    80021ef2:	00011517          	auipc	a0,0x11
    80021ef6:	80650513          	addi	a0,a0,-2042 # 800326f8 <__func__.0+0x310>
    80021efa:	5ca0d0ef          	jal	8002f4c4 <printf>
    80021efe:	0003a797          	auipc	a5,0x3a
    80021f02:	1137c783          	lbu	a5,275(a5) # 8005c011 <excpt+0x1>
    80021f06:	c789                	beqz	a5,80021f10 <mix_instruction_1+0x356>
    80021f08:	6498                	ld	a4,8(s1)
    80021f0a:	47b5                	li	a5,13
    80021f0c:	00f70c63          	beq	a4,a5,80021f24 <mix_instruction_1+0x36a>
    80021f10:	00010517          	auipc	a0,0x10
    80021f14:	7f050513          	addi	a0,a0,2032 # 80032700 <__func__.0+0x318>
    80021f18:	5ac0d0ef          	jal	8002f4c4 <printf>
    80021f1c:	02900513          	li	a0,41
    80021f20:	2920c0ef          	jal	8002e1b2 <putchar>
    80021f24:	4529                	li	a0,10
    80021f26:	28c0c0ef          	jal	8002e1b2 <putchar>
    80021f2a:	c801                	beqz	s0,80021f3a <mix_instruction_1+0x380>
    80021f2c:	0003a797          	auipc	a5,0x3a
    80021f30:	0e57c783          	lbu	a5,229(a5) # 8005c011 <excpt+0x1>
    80021f34:	4401                	li	s0,0
    80021f36:	66079263          	bnez	a5,8002259a <mix_instruction_1+0x9e0>


//----------------------------------------------------------------------


    goto_priv(PRIV_M);     
    80021f3a:	4511                	li	a0,4
    80021f3c:	fd9de0ef          	jal	80000f14 <goto_priv>

    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80021f40:	000407b7          	lui	a5,0x40
    80021f44:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80021f48:	450d                	li	a0,3
    80021f4a:	fcbde0ef          	jal	80000f14 <goto_priv>

    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80021f4e:	ecbde0ef          	jal	80000e18 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80021f52:	37ab77b7          	lui	a5,0x37ab7
    80021f56:	00080737          	lui	a4,0x80
    80021f5a:	078a                	slli	a5,a5,0x2
    80021f5c:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80021f5e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80021f62:	0736                	slli	a4,a4,0xd
    80021f64:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80021f68:	08c00593          	li	a1,140
    80021f6c:	00016617          	auipc	a2,0x16
    80021f70:	d5c60613          	addi	a2,a2,-676 # 80037cc8 <__func__.0+0x58e0>
    80021f74:	00010517          	auipc	a0,0x10
    80021f78:	76c50513          	addi	a0,a0,1900 # 800326e0 <__func__.0+0x2f8>
    80021f7c:	5480d0ef          	jal	8002f4c4 <printf>
    80021f80:	0003a797          	auipc	a5,0x3a
    80021f84:	0917c783          	lbu	a5,145(a5) # 8005c011 <excpt+0x1>
    80021f88:	00010597          	auipc	a1,0x10
    80021f8c:	73058593          	addi	a1,a1,1840 # 800326b8 <__func__.0+0x2d0>
    80021f90:	cf89                	beqz	a5,80021faa <mix_instruction_1+0x3f0>
    80021f92:	6498                	ld	a4,8(s1)
    80021f94:	47bd                	li	a5,15
    80021f96:	00010597          	auipc	a1,0x10
    80021f9a:	71258593          	addi	a1,a1,1810 # 800326a8 <__func__.0+0x2c0>
    80021f9e:	00f70663          	beq	a4,a5,80021faa <mix_instruction_1+0x3f0>
    80021fa2:	00010597          	auipc	a1,0x10
    80021fa6:	71658593          	addi	a1,a1,1814 # 800326b8 <__func__.0+0x2d0>
    80021faa:	00010517          	auipc	a0,0x10
    80021fae:	74e50513          	addi	a0,a0,1870 # 800326f8 <__func__.0+0x310>
    80021fb2:	5120d0ef          	jal	8002f4c4 <printf>
    80021fb6:	0003a797          	auipc	a5,0x3a
    80021fba:	05b7c783          	lbu	a5,91(a5) # 8005c011 <excpt+0x1>
    80021fbe:	c789                	beqz	a5,80021fc8 <mix_instruction_1+0x40e>
    80021fc0:	6498                	ld	a4,8(s1)
    80021fc2:	47bd                	li	a5,15
    80021fc4:	00f70c63          	beq	a4,a5,80021fdc <mix_instruction_1+0x422>
    80021fc8:	00010517          	auipc	a0,0x10
    80021fcc:	73850513          	addi	a0,a0,1848 # 80032700 <__func__.0+0x318>
    80021fd0:	4f40d0ef          	jal	8002f4c4 <printf>
    80021fd4:	02900513          	li	a0,41
    80021fd8:	1da0c0ef          	jal	8002e1b2 <putchar>
    80021fdc:	4529                	li	a0,10
    80021fde:	1d40c0ef          	jal	8002e1b2 <putchar>
    80021fe2:	c801                	beqz	s0,80021ff2 <mix_instruction_1+0x438>
    80021fe4:	0003a797          	auipc	a5,0x3a
    80021fe8:	02d7c783          	lbu	a5,45(a5) # 8005c011 <excpt+0x1>
    80021fec:	4401                	li	s0,0
    80021fee:	5a079b63          	bnez	a5,800225a4 <mix_instruction_1+0x9ea>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80021ff2:	4511                	li	a0,4
    80021ff4:	f21de0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80021ff8:	57fd                	li	a5,-1
    80021ffa:	03f79713          	slli	a4,a5,0x3f
    80021ffe:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    80022002:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80022006:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    8002200a:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    8002200e:	64402973          	csrr	s2,hip
    80022012:	00011617          	auipc	a2,0x11
    80022016:	b9660613          	addi	a2,a2,-1130 # 80032ba8 <__func__.0+0x7c0>
    8002201a:	08c00593          	li	a1,140
    8002201e:	00010517          	auipc	a0,0x10
    80022022:	6c250513          	addi	a0,a0,1730 # 800326e0 <__func__.0+0x2f8>
    80022026:	4991                	li	s3,4
    80022028:	49c0d0ef          	jal	8002f4c4 <printf>
    8002202c:	59390163          	beq	s2,s3,800225ae <mix_instruction_1+0x9f4>
    80022030:	00010597          	auipc	a1,0x10
    80022034:	68858593          	addi	a1,a1,1672 # 800326b8 <__func__.0+0x2d0>
    80022038:	00010517          	auipc	a0,0x10
    8002203c:	6c050513          	addi	a0,a0,1728 # 800326f8 <__func__.0+0x310>
    80022040:	4840d0ef          	jal	8002f4c4 <printf>
    80022044:	00010517          	auipc	a0,0x10
    80022048:	6bc50513          	addi	a0,a0,1724 # 80032700 <__func__.0+0x318>
    8002204c:	4780d0ef          	jal	8002f4c4 <printf>
    80022050:	86ce                	mv	a3,s3
    80022052:	864a                	mv	a2,s2
    80022054:	02d00593          	li	a1,45
    80022058:	00011517          	auipc	a0,0x11
    8002205c:	b5850513          	addi	a0,a0,-1192 # 80032bb0 <__func__.0+0x7c8>
    80022060:	4640d0ef          	jal	8002f4c4 <printf>
    80022064:	02900513          	li	a0,41
    80022068:	14a0c0ef          	jal	8002e1b2 <putchar>
    8002206c:	4529                	li	a0,10
    8002206e:	1440c0ef          	jal	8002e1b2 <putchar>
    80022072:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    80022074:	14402973          	csrr	s2,sip
    80022078:	00011617          	auipc	a2,0x11
    8002207c:	b5060613          	addi	a2,a2,-1200 # 80032bc8 <__func__.0+0x7e0>
    80022080:	08c00593          	li	a1,140
    80022084:	00010517          	auipc	a0,0x10
    80022088:	65c50513          	addi	a0,a0,1628 # 800326e0 <__func__.0+0x2f8>
    8002208c:	22200993          	li	s3,546
    80022090:	4340d0ef          	jal	8002f4c4 <printf>
    80022094:	4b390e63          	beq	s2,s3,80022550 <mix_instruction_1+0x996>
    80022098:	00010597          	auipc	a1,0x10
    8002209c:	62058593          	addi	a1,a1,1568 # 800326b8 <__func__.0+0x2d0>
    800220a0:	00010517          	auipc	a0,0x10
    800220a4:	65850513          	addi	a0,a0,1624 # 800326f8 <__func__.0+0x310>
    800220a8:	41c0d0ef          	jal	8002f4c4 <printf>
    800220ac:	00010517          	auipc	a0,0x10
    800220b0:	65450513          	addi	a0,a0,1620 # 80032700 <__func__.0+0x318>
    800220b4:	4100d0ef          	jal	8002f4c4 <printf>
    800220b8:	86ce                	mv	a3,s3
    800220ba:	864a                	mv	a2,s2
    800220bc:	02d00593          	li	a1,45
    800220c0:	00011517          	auipc	a0,0x11
    800220c4:	af050513          	addi	a0,a0,-1296 # 80032bb0 <__func__.0+0x7c8>
    800220c8:	3fc0d0ef          	jal	8002f4c4 <printf>
    800220cc:	02900513          	li	a0,41
    800220d0:	0e20c0ef          	jal	8002e1b2 <putchar>
    800220d4:	4529                	li	a0,10
    800220d6:	0dc0c0ef          	jal	8002e1b2 <putchar>
    800220da:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    800220dc:	24402973          	csrr	s2,vsip
    800220e0:	00011617          	auipc	a2,0x11
    800220e4:	ab860613          	addi	a2,a2,-1352 # 80032b98 <__func__.0+0x7b0>
    800220e8:	08c00593          	li	a1,140
    800220ec:	00010517          	auipc	a0,0x10
    800220f0:	5f450513          	addi	a0,a0,1524 # 800326e0 <__func__.0+0x2f8>
    800220f4:	4989                	li	s3,2
    800220f6:	3ce0d0ef          	jal	8002f4c4 <printf>
    800220fa:	43390d63          	beq	s2,s3,80022534 <mix_instruction_1+0x97a>
    800220fe:	00010597          	auipc	a1,0x10
    80022102:	5ba58593          	addi	a1,a1,1466 # 800326b8 <__func__.0+0x2d0>
    80022106:	00010517          	auipc	a0,0x10
    8002210a:	5f250513          	addi	a0,a0,1522 # 800326f8 <__func__.0+0x310>
    8002210e:	3b60d0ef          	jal	8002f4c4 <printf>
    80022112:	00010517          	auipc	a0,0x10
    80022116:	5ee50513          	addi	a0,a0,1518 # 80032700 <__func__.0+0x318>
    8002211a:	3aa0d0ef          	jal	8002f4c4 <printf>
    8002211e:	86ce                	mv	a3,s3
    80022120:	864a                	mv	a2,s2
    80022122:	02d00593          	li	a1,45
    80022126:	00011517          	auipc	a0,0x11
    8002212a:	a8a50513          	addi	a0,a0,-1398 # 80032bb0 <__func__.0+0x7c8>
    8002212e:	3960d0ef          	jal	8002f4c4 <printf>
    80022132:	02900513          	li	a0,41
    80022136:	07c0c0ef          	jal	8002e1b2 <putchar>
    8002213a:	4529                	li	a0,10
    8002213c:	0760c0ef          	jal	8002e1b2 <putchar>
    80022140:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80022142:	4509                	li	a0,2
    80022144:	dd1de0ef          	jal	80000f14 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80022148:	14402973          	csrr	s2,sip
    8002214c:	00011617          	auipc	a2,0x11
    80022150:	a8460613          	addi	a2,a2,-1404 # 80032bd0 <__func__.0+0x7e8>
    80022154:	08c00593          	li	a1,140
    80022158:	00010517          	auipc	a0,0x10
    8002215c:	58850513          	addi	a0,a0,1416 # 800326e0 <__func__.0+0x2f8>
    80022160:	4989                	li	s3,2
    80022162:	3620d0ef          	jal	8002f4c4 <printf>
    80022166:	3b390963          	beq	s2,s3,80022518 <mix_instruction_1+0x95e>
    8002216a:	00010597          	auipc	a1,0x10
    8002216e:	54e58593          	addi	a1,a1,1358 # 800326b8 <__func__.0+0x2d0>
    80022172:	00010517          	auipc	a0,0x10
    80022176:	58650513          	addi	a0,a0,1414 # 800326f8 <__func__.0+0x310>
    8002217a:	34a0d0ef          	jal	8002f4c4 <printf>
    8002217e:	00010517          	auipc	a0,0x10
    80022182:	58250513          	addi	a0,a0,1410 # 80032700 <__func__.0+0x318>
    80022186:	33e0d0ef          	jal	8002f4c4 <printf>
    8002218a:	86ce                	mv	a3,s3
    8002218c:	864a                	mv	a2,s2
    8002218e:	02d00593          	li	a1,45
    80022192:	00011517          	auipc	a0,0x11
    80022196:	a1e50513          	addi	a0,a0,-1506 # 80032bb0 <__func__.0+0x7c8>
    8002219a:	32a0d0ef          	jal	8002f4c4 <printf>
    8002219e:	02900513          	li	a0,41
    800221a2:	0100c0ef          	jal	8002e1b2 <putchar>
    800221a6:	4529                	li	a0,10
    800221a8:	00a0c0ef          	jal	8002e1b2 <putchar>
    800221ac:	4401                	li	s0,0
    goto_priv(PRIV_M);
    800221ae:	4511                	li	a0,4
    800221b0:	d65de0ef          	jal	80000f14 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    800221b4:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    800221b8:	64402973          	csrr	s2,hip
    800221bc:	00011617          	auipc	a2,0x11
    800221c0:	9ec60613          	addi	a2,a2,-1556 # 80032ba8 <__func__.0+0x7c0>
    800221c4:	08c00593          	li	a1,140
    800221c8:	00010517          	auipc	a0,0x10
    800221cc:	51850513          	addi	a0,a0,1304 # 800326e0 <__func__.0+0x2f8>
    800221d0:	2f40d0ef          	jal	8002f4c4 <printf>
    800221d4:	32090463          	beqz	s2,800224fc <mix_instruction_1+0x942>
    800221d8:	00010597          	auipc	a1,0x10
    800221dc:	4e058593          	addi	a1,a1,1248 # 800326b8 <__func__.0+0x2d0>
    800221e0:	00010517          	auipc	a0,0x10
    800221e4:	51850513          	addi	a0,a0,1304 # 800326f8 <__func__.0+0x310>
    800221e8:	2dc0d0ef          	jal	8002f4c4 <printf>
    800221ec:	00010517          	auipc	a0,0x10
    800221f0:	51450513          	addi	a0,a0,1300 # 80032700 <__func__.0+0x318>
    800221f4:	2d00d0ef          	jal	8002f4c4 <printf>
    800221f8:	864a                	mv	a2,s2
    800221fa:	4681                	li	a3,0
    800221fc:	02d00593          	li	a1,45
    80022200:	00011517          	auipc	a0,0x11
    80022204:	9b050513          	addi	a0,a0,-1616 # 80032bb0 <__func__.0+0x7c8>
    80022208:	2bc0d0ef          	jal	8002f4c4 <printf>
    8002220c:	02900513          	li	a0,41
    80022210:	7a30b0ef          	jal	8002e1b2 <putchar>
    80022214:	4529                	li	a0,10
    80022216:	79d0b0ef          	jal	8002e1b2 <putchar>
    8002221a:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    8002221c:	14402973          	csrr	s2,sip
    80022220:	00011617          	auipc	a2,0x11
    80022224:	9a860613          	addi	a2,a2,-1624 # 80032bc8 <__func__.0+0x7e0>
    80022228:	08c00593          	li	a1,140
    8002222c:	00010517          	auipc	a0,0x10
    80022230:	4b450513          	addi	a0,a0,1204 # 800326e0 <__func__.0+0x2f8>
    80022234:	2900d0ef          	jal	8002f4c4 <printf>
    80022238:	2a090463          	beqz	s2,800224e0 <mix_instruction_1+0x926>
    8002223c:	00010597          	auipc	a1,0x10
    80022240:	47c58593          	addi	a1,a1,1148 # 800326b8 <__func__.0+0x2d0>
    80022244:	00010517          	auipc	a0,0x10
    80022248:	4b450513          	addi	a0,a0,1204 # 800326f8 <__func__.0+0x310>
    8002224c:	2780d0ef          	jal	8002f4c4 <printf>
    80022250:	00010517          	auipc	a0,0x10
    80022254:	4b050513          	addi	a0,a0,1200 # 80032700 <__func__.0+0x318>
    80022258:	26c0d0ef          	jal	8002f4c4 <printf>
    8002225c:	864a                	mv	a2,s2
    8002225e:	4681                	li	a3,0
    80022260:	02d00593          	li	a1,45
    80022264:	00011517          	auipc	a0,0x11
    80022268:	94c50513          	addi	a0,a0,-1716 # 80032bb0 <__func__.0+0x7c8>
    8002226c:	2580d0ef          	jal	8002f4c4 <printf>
    80022270:	02900513          	li	a0,41
    80022274:	73f0b0ef          	jal	8002e1b2 <putchar>
    80022278:	4529                	li	a0,10
    8002227a:	7390b0ef          	jal	8002e1b2 <putchar>
    8002227e:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80022280:	24402973          	csrr	s2,vsip
    80022284:	00011617          	auipc	a2,0x11
    80022288:	91460613          	addi	a2,a2,-1772 # 80032b98 <__func__.0+0x7b0>
    8002228c:	08c00593          	li	a1,140
    80022290:	00010517          	auipc	a0,0x10
    80022294:	45050513          	addi	a0,a0,1104 # 800326e0 <__func__.0+0x2f8>
    80022298:	22c0d0ef          	jal	8002f4c4 <printf>
    8002229c:	22090463          	beqz	s2,800224c4 <mix_instruction_1+0x90a>
    800222a0:	00010597          	auipc	a1,0x10
    800222a4:	41858593          	addi	a1,a1,1048 # 800326b8 <__func__.0+0x2d0>
    800222a8:	00010517          	auipc	a0,0x10
    800222ac:	45050513          	addi	a0,a0,1104 # 800326f8 <__func__.0+0x310>
    800222b0:	2140d0ef          	jal	8002f4c4 <printf>
    800222b4:	00010517          	auipc	a0,0x10
    800222b8:	44c50513          	addi	a0,a0,1100 # 80032700 <__func__.0+0x318>
    800222bc:	2080d0ef          	jal	8002f4c4 <printf>
    800222c0:	864a                	mv	a2,s2
    800222c2:	4681                	li	a3,0
    800222c4:	02d00593          	li	a1,45
    800222c8:	00011517          	auipc	a0,0x11
    800222cc:	8e850513          	addi	a0,a0,-1816 # 80032bb0 <__func__.0+0x7c8>
    800222d0:	1f40d0ef          	jal	8002f4c4 <printf>
    800222d4:	02900513          	li	a0,41
    800222d8:	6db0b0ef          	jal	8002e1b2 <putchar>
    800222dc:	4529                	li	a0,10
    800222de:	6d50b0ef          	jal	8002e1b2 <putchar>
    800222e2:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    800222e4:	4509                	li	a0,2
    800222e6:	c2fde0ef          	jal	80000f14 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800222ea:	14402973          	csrr	s2,sip
    800222ee:	00011617          	auipc	a2,0x11
    800222f2:	8e260613          	addi	a2,a2,-1822 # 80032bd0 <__func__.0+0x7e8>
    800222f6:	08c00593          	li	a1,140
    800222fa:	00010517          	auipc	a0,0x10
    800222fe:	3e650513          	addi	a0,a0,998 # 800326e0 <__func__.0+0x2f8>
    80022302:	1c20d0ef          	jal	8002f4c4 <printf>
    80022306:	1a090163          	beqz	s2,800224a8 <mix_instruction_1+0x8ee>
    8002230a:	00010597          	auipc	a1,0x10
    8002230e:	3ae58593          	addi	a1,a1,942 # 800326b8 <__func__.0+0x2d0>
    80022312:	00010517          	auipc	a0,0x10
    80022316:	3e650513          	addi	a0,a0,998 # 800326f8 <__func__.0+0x310>
    8002231a:	1aa0d0ef          	jal	8002f4c4 <printf>
    8002231e:	00010517          	auipc	a0,0x10
    80022322:	3e250513          	addi	a0,a0,994 # 80032700 <__func__.0+0x318>
    80022326:	19e0d0ef          	jal	8002f4c4 <printf>
    8002232a:	864a                	mv	a2,s2
    8002232c:	4681                	li	a3,0
    8002232e:	02d00593          	li	a1,45
    80022332:	00011517          	auipc	a0,0x11
    80022336:	87e50513          	addi	a0,a0,-1922 # 80032bb0 <__func__.0+0x7c8>
    8002233a:	18a0d0ef          	jal	8002f4c4 <printf>
    8002233e:	02900513          	li	a0,41
    80022342:	6710b0ef          	jal	8002e1b2 <putchar>
    80022346:	4529                	li	a0,10
    80022348:	66b0b0ef          	jal	8002e1b2 <putchar>
    8002234c:	4401                	li	s0,0
    goto_priv(PRIV_M);   
    8002234e:	4511                	li	a0,4
    80022350:	bc5de0ef          	jal	80000f14 <goto_priv>


//----------------------------------------------------------------------
    //执行取指指令二级地址翻译阶段时，pte.x=0
    goto_priv(PRIV_VS);
    80022354:	4509                	li	a0,2
    80022356:	bbfde0ef          	jal	80000f14 <goto_priv>
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    8002235a:	abfde0ef          	jal	80000e18 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    8002235e:	400137b7          	lui	a5,0x40013
    80022362:	078a                	slli	a5,a5,0x2
    80022364:	00000297          	auipc	t0,0x0
    80022368:	00c28293          	addi	t0,t0,12 # 80022370 <mix_instruction_1+0x7b6>
    8002236c:	0254bc23          	sd	t0,56(s1)
    80022370:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80022372:	08c00593          	li	a1,140
    80022376:	00016617          	auipc	a2,0x16
    8002237a:	7d260613          	addi	a2,a2,2002 # 80038b48 <__func__.0+0x6760>
    8002237e:	00010517          	auipc	a0,0x10
    80022382:	36250513          	addi	a0,a0,866 # 800326e0 <__func__.0+0x2f8>
    80022386:	13e0d0ef          	jal	8002f4c4 <printf>
    8002238a:	0003a797          	auipc	a5,0x3a
    8002238e:	c877c783          	lbu	a5,-889(a5) # 8005c011 <excpt+0x1>
    80022392:	00010597          	auipc	a1,0x10
    80022396:	32658593          	addi	a1,a1,806 # 800326b8 <__func__.0+0x2d0>
    8002239a:	cf89                	beqz	a5,800223b4 <mix_instruction_1+0x7fa>
    8002239c:	6498                	ld	a4,8(s1)
    8002239e:	47d1                	li	a5,20
    800223a0:	00010597          	auipc	a1,0x10
    800223a4:	30858593          	addi	a1,a1,776 # 800326a8 <__func__.0+0x2c0>
    800223a8:	00f70663          	beq	a4,a5,800223b4 <mix_instruction_1+0x7fa>
    800223ac:	00010597          	auipc	a1,0x10
    800223b0:	30c58593          	addi	a1,a1,780 # 800326b8 <__func__.0+0x2d0>
    800223b4:	00010517          	auipc	a0,0x10
    800223b8:	34450513          	addi	a0,a0,836 # 800326f8 <__func__.0+0x310>
    800223bc:	1080d0ef          	jal	8002f4c4 <printf>
    800223c0:	0003a797          	auipc	a5,0x3a
    800223c4:	c517c783          	lbu	a5,-943(a5) # 8005c011 <excpt+0x1>
    800223c8:	c789                	beqz	a5,800223d2 <mix_instruction_1+0x818>
    800223ca:	6498                	ld	a4,8(s1)
    800223cc:	47d1                	li	a5,20
    800223ce:	00f70c63          	beq	a4,a5,800223e6 <mix_instruction_1+0x82c>
    800223d2:	00010517          	auipc	a0,0x10
    800223d6:	32e50513          	addi	a0,a0,814 # 80032700 <__func__.0+0x318>
    800223da:	0ea0d0ef          	jal	8002f4c4 <printf>
    800223de:	02900513          	li	a0,41
    800223e2:	5d10b0ef          	jal	8002e1b2 <putchar>
    800223e6:	4529                	li	a0,10
    800223e8:	5cb0b0ef          	jal	8002e1b2 <putchar>
    800223ec:	c801                	beqz	s0,800223fc <mix_instruction_1+0x842>
    800223ee:	0003a797          	auipc	a5,0x3a
    800223f2:	c237c783          	lbu	a5,-989(a5) # 8005c011 <excpt+0x1>
    800223f6:	4401                	li	s0,0
    800223f8:	18079c63          	bnez	a5,80022590 <mix_instruction_1+0x9d6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );
//----------------------------------------------------------------------
    TEST_SETUP_EXCEPT();
    800223fc:	a1dde0ef          	jal	80000e18 <test_setup_except_function>
    
    
    goto_priv(PRIV_HS);     
    80022400:	450d                	li	a0,3
    80022402:	b13de0ef          	jal	80000f14 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    80022406:	a13de0ef          	jal	80000e18 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8002240a:	001007b7          	lui	a5,0x100
    8002240e:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    80022412:	07b2                	slli	a5,a5,0xc
    80022414:	0785                	addi	a5,a5,1
    80022416:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    8002241a:	08c00593          	li	a1,140
    8002241e:	00013617          	auipc	a2,0x13
    80022422:	3a260613          	addi	a2,a2,930 # 800357c0 <__func__.0+0x33d8>
    80022426:	00010517          	auipc	a0,0x10
    8002242a:	2ba50513          	addi	a0,a0,698 # 800326e0 <__func__.0+0x2f8>
    8002242e:	0960d0ef          	jal	8002f4c4 <printf>
    80022432:	0003a797          	auipc	a5,0x3a
    80022436:	bdf7c783          	lbu	a5,-1057(a5) # 8005c011 <excpt+0x1>
    8002243a:	00010597          	auipc	a1,0x10
    8002243e:	27e58593          	addi	a1,a1,638 # 800326b8 <__func__.0+0x2d0>
    80022442:	e789                	bnez	a5,8002244c <mix_instruction_1+0x892>
    80022444:	00010597          	auipc	a1,0x10
    80022448:	26458593          	addi	a1,a1,612 # 800326a8 <__func__.0+0x2c0>
    8002244c:	00010517          	auipc	a0,0x10
    80022450:	2ac50513          	addi	a0,a0,684 # 800326f8 <__func__.0+0x310>
    80022454:	0700d0ef          	jal	8002f4c4 <printf>
    80022458:	0003a797          	auipc	a5,0x3a
    8002245c:	bb97c783          	lbu	a5,-1095(a5) # 8005c011 <excpt+0x1>
    80022460:	16079563          	bnez	a5,800225ca <mix_instruction_1+0xa10>
    80022464:	4529                	li	a0,10
    80022466:	54d0b0ef          	jal	8002e1b2 <putchar>
    8002246a:	c419                	beqz	s0,80022478 <mix_instruction_1+0x8be>
    8002246c:	0003a797          	auipc	a5,0x3a
    80022470:	ba57c783          	lbu	a5,-1115(a5) # 8005c011 <excpt+0x1>
    80022474:	0e078c63          	beqz	a5,8002256c <mix_instruction_1+0x9b2>
    80022478:	4401                	li	s0,0
        excpt.triggered == false
    );
//----------------------------------------------------------------------

    TEST_END();
    8002247a:	00010597          	auipc	a1,0x10
    8002247e:	23e58593          	addi	a1,a1,574 # 800326b8 <__func__.0+0x2d0>
    80022482:	00010517          	auipc	a0,0x10
    80022486:	2de50513          	addi	a0,a0,734 # 80032760 <__func__.0+0x378>
    8002248a:	03a0d0ef          	jal	8002f4c4 <printf>
    8002248e:	4511                	li	a0,4
    80022490:	a85de0ef          	jal	80000f14 <goto_priv>
    80022494:	ae2df0ef          	jal	80001776 <reset_state>

    80022498:	70a2                	ld	ra,40(sp)
    8002249a:	8522                	mv	a0,s0
    8002249c:	7402                	ld	s0,32(sp)
    8002249e:	64e2                	ld	s1,24(sp)
    800224a0:	6942                	ld	s2,16(sp)
    800224a2:	69a2                	ld	s3,8(sp)
    800224a4:	6145                	addi	sp,sp,48
    800224a6:	8082                	ret
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800224a8:	00010597          	auipc	a1,0x10
    800224ac:	20058593          	addi	a1,a1,512 # 800326a8 <__func__.0+0x2c0>
    800224b0:	00010517          	auipc	a0,0x10
    800224b4:	24850513          	addi	a0,a0,584 # 800326f8 <__func__.0+0x310>
    800224b8:	00c0d0ef          	jal	8002f4c4 <printf>
    800224bc:	4529                	li	a0,10
    800224be:	4f50b0ef          	jal	8002e1b2 <putchar>
    800224c2:	b571                	j	8002234e <mix_instruction_1+0x794>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    800224c4:	00010597          	auipc	a1,0x10
    800224c8:	1e458593          	addi	a1,a1,484 # 800326a8 <__func__.0+0x2c0>
    800224cc:	00010517          	auipc	a0,0x10
    800224d0:	22c50513          	addi	a0,a0,556 # 800326f8 <__func__.0+0x310>
    800224d4:	7f10c0ef          	jal	8002f4c4 <printf>
    800224d8:	4529                	li	a0,10
    800224da:	4d90b0ef          	jal	8002e1b2 <putchar>
    800224de:	b519                	j	800222e4 <mix_instruction_1+0x72a>
    check_csr_rd("sip", sip, 0x0);
    800224e0:	00010597          	auipc	a1,0x10
    800224e4:	1c858593          	addi	a1,a1,456 # 800326a8 <__func__.0+0x2c0>
    800224e8:	00010517          	auipc	a0,0x10
    800224ec:	21050513          	addi	a0,a0,528 # 800326f8 <__func__.0+0x310>
    800224f0:	7d50c0ef          	jal	8002f4c4 <printf>
    800224f4:	4529                	li	a0,10
    800224f6:	4bd0b0ef          	jal	8002e1b2 <putchar>
    800224fa:	b359                	j	80022280 <mix_instruction_1+0x6c6>
    check_csr_rd("hip", CSR_HIP, 0x0);
    800224fc:	00010597          	auipc	a1,0x10
    80022500:	1ac58593          	addi	a1,a1,428 # 800326a8 <__func__.0+0x2c0>
    80022504:	00010517          	auipc	a0,0x10
    80022508:	1f450513          	addi	a0,a0,500 # 800326f8 <__func__.0+0x310>
    8002250c:	7b90c0ef          	jal	8002f4c4 <printf>
    80022510:	4529                	li	a0,10
    80022512:	4a10b0ef          	jal	8002e1b2 <putchar>
    80022516:	b319                	j	8002221c <mix_instruction_1+0x662>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80022518:	00010597          	auipc	a1,0x10
    8002251c:	19058593          	addi	a1,a1,400 # 800326a8 <__func__.0+0x2c0>
    80022520:	00010517          	auipc	a0,0x10
    80022524:	1d850513          	addi	a0,a0,472 # 800326f8 <__func__.0+0x310>
    80022528:	79d0c0ef          	jal	8002f4c4 <printf>
    8002252c:	4529                	li	a0,10
    8002252e:	4850b0ef          	jal	8002e1b2 <putchar>
    80022532:	b9b5                	j	800221ae <mix_instruction_1+0x5f4>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80022534:	00010597          	auipc	a1,0x10
    80022538:	17458593          	addi	a1,a1,372 # 800326a8 <__func__.0+0x2c0>
    8002253c:	00010517          	auipc	a0,0x10
    80022540:	1bc50513          	addi	a0,a0,444 # 800326f8 <__func__.0+0x310>
    80022544:	7810c0ef          	jal	8002f4c4 <printf>
    80022548:	4529                	li	a0,10
    8002254a:	4690b0ef          	jal	8002e1b2 <putchar>
    8002254e:	bed5                	j	80022142 <mix_instruction_1+0x588>
    check_csr_rd("sip", sip, 0x222);    
    80022550:	00010597          	auipc	a1,0x10
    80022554:	15858593          	addi	a1,a1,344 # 800326a8 <__func__.0+0x2c0>
    80022558:	00010517          	auipc	a0,0x10
    8002255c:	1a050513          	addi	a0,a0,416 # 800326f8 <__func__.0+0x310>
    80022560:	7650c0ef          	jal	8002f4c4 <printf>
    80022564:	4529                	li	a0,10
    80022566:	44d0b0ef          	jal	8002e1b2 <putchar>
    8002256a:	be8d                	j	800220dc <mix_instruction_1+0x522>
    TEST_ASSERT("load byte address is not aligned successful",         
    8002256c:	4405                	li	s0,1
    TEST_END();
    8002256e:	00010597          	auipc	a1,0x10
    80022572:	13a58593          	addi	a1,a1,314 # 800326a8 <__func__.0+0x2c0>
    80022576:	b731                	j	80022482 <mix_instruction_1+0x8c8>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80022578:	6480                	ld	s0,8(s1)
    8002257a:	1429                	addi	s0,s0,-22
    8002257c:	00143413          	seqz	s0,s0
    80022580:	86fff06f          	j	80021dee <mix_instruction_1+0x234>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    80022584:	6480                	ld	s0,8(s1)
    80022586:	1479                	addi	s0,s0,-2
    80022588:	00143413          	seqz	s0,s0
    8002258c:	fb4ff06f          	j	80021d40 <mix_instruction_1+0x186>
    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80022590:	6480                	ld	s0,8(s1)
    80022592:	1431                	addi	s0,s0,-20
    80022594:	00143413          	seqz	s0,s0
    80022598:	b595                	j	800223fc <mix_instruction_1+0x842>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8002259a:	6480                	ld	s0,8(s1)
    8002259c:	144d                	addi	s0,s0,-13
    8002259e:	00143413          	seqz	s0,s0
    800225a2:	ba61                	j	80021f3a <mix_instruction_1+0x380>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800225a4:	6480                	ld	s0,8(s1)
    800225a6:	1445                	addi	s0,s0,-15
    800225a8:	00143413          	seqz	s0,s0
    800225ac:	b499                	j	80021ff2 <mix_instruction_1+0x438>
    check_csr_rd("hip", CSR_HIP, 0x4);
    800225ae:	00010597          	auipc	a1,0x10
    800225b2:	0fa58593          	addi	a1,a1,250 # 800326a8 <__func__.0+0x2c0>
    800225b6:	00010517          	auipc	a0,0x10
    800225ba:	14250513          	addi	a0,a0,322 # 800326f8 <__func__.0+0x310>
    800225be:	7070c0ef          	jal	8002f4c4 <printf>
    800225c2:	4529                	li	a0,10
    800225c4:	3ef0b0ef          	jal	8002e1b2 <putchar>
    800225c8:	b475                	j	80022074 <mix_instruction_1+0x4ba>
    TEST_ASSERT("load byte address is not aligned successful",         
    800225ca:	00010517          	auipc	a0,0x10
    800225ce:	13650513          	addi	a0,a0,310 # 80032700 <__func__.0+0x318>
    800225d2:	6f30c0ef          	jal	8002f4c4 <printf>
    800225d6:	02900513          	li	a0,41
    800225da:	3d90b0ef          	jal	8002e1b2 <putchar>
    800225de:	b559                	j	80022464 <mix_instruction_1+0x8aa>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800225e0:	00010517          	auipc	a0,0x10
    800225e4:	12050513          	addi	a0,a0,288 # 80032700 <__func__.0+0x318>
    800225e8:	6dd0c0ef          	jal	8002f4c4 <printf>
    800225ec:	02900513          	li	a0,41
    800225f0:	3c30b0ef          	jal	8002e1b2 <putchar>
    800225f4:	887ff06f          	j	80021e7a <mix_instruction_1+0x2c0>

00000000800225f8 <ebreak_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool ebreak_tests_1() {
    800225f8:	1101                	addi	sp,sp,-32

    TEST_START();
    800225fa:	0000f597          	auipc	a1,0xf
    800225fe:	48658593          	addi	a1,a1,1158 # 80031a80 <__func__.4>
    80022602:	00010517          	auipc	a0,0x10
    80022606:	0c650513          	addi	a0,a0,198 # 800326c8 <__func__.0+0x2e0>
bool ebreak_tests_1() {
    8002260a:	ec06                	sd	ra,24(sp)
    8002260c:	e822                	sd	s0,16(sp)
    8002260e:	e426                	sd	s1,8(sp)
    TEST_START();
    80022610:	6b50c0ef          	jal	8002f4c4 <printf>
    80022614:	4529                	li	a0,10
    80022616:	39d0b0ef          	jal	8002e1b2 <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_M);
    8002261a:	4511                	li	a0,4
    8002261c:	8f9de0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022620:	ff8de0ef          	jal	80000e18 <test_setup_except_function>
    asm volatile ("ebreak");
    80022624:	9002                	ebreak
    
    ebreak();

    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    80022626:	08c00593          	li	a1,140
    8002262a:	00018617          	auipc	a2,0x18
    8002262e:	71660613          	addi	a2,a2,1814 # 8003ad40 <__func__.0+0x8958>
    80022632:	00010517          	auipc	a0,0x10
    80022636:	0ae50513          	addi	a0,a0,174 # 800326e0 <__func__.0+0x2f8>
    8002263a:	68b0c0ef          	jal	8002f4c4 <printf>
    8002263e:	0003a797          	auipc	a5,0x3a
    80022642:	9d37c783          	lbu	a5,-1581(a5) # 8005c011 <excpt+0x1>
    80022646:	0003a497          	auipc	s1,0x3a
    8002264a:	9ca48493          	addi	s1,s1,-1590 # 8005c010 <excpt>
    8002264e:	00010597          	auipc	a1,0x10
    80022652:	06a58593          	addi	a1,a1,106 # 800326b8 <__func__.0+0x2d0>
    80022656:	cf89                	beqz	a5,80022670 <ebreak_tests_1+0x78>
    80022658:	6498                	ld	a4,8(s1)
    8002265a:	478d                	li	a5,3
    8002265c:	00010597          	auipc	a1,0x10
    80022660:	04c58593          	addi	a1,a1,76 # 800326a8 <__func__.0+0x2c0>
    80022664:	00f70663          	beq	a4,a5,80022670 <ebreak_tests_1+0x78>
    80022668:	00010597          	auipc	a1,0x10
    8002266c:	05058593          	addi	a1,a1,80 # 800326b8 <__func__.0+0x2d0>
    80022670:	00010517          	auipc	a0,0x10
    80022674:	08850513          	addi	a0,a0,136 # 800326f8 <__func__.0+0x310>
    80022678:	64d0c0ef          	jal	8002f4c4 <printf>
    8002267c:	0003a797          	auipc	a5,0x3a
    80022680:	9957c783          	lbu	a5,-1643(a5) # 8005c011 <excpt+0x1>
    80022684:	c789                	beqz	a5,8002268e <ebreak_tests_1+0x96>
    80022686:	6498                	ld	a4,8(s1)
    80022688:	478d                	li	a5,3
    8002268a:	00f70c63          	beq	a4,a5,800226a2 <ebreak_tests_1+0xaa>
    8002268e:	00010517          	auipc	a0,0x10
    80022692:	07250513          	addi	a0,a0,114 # 80032700 <__func__.0+0x318>
    80022696:	62f0c0ef          	jal	8002f4c4 <printf>
    8002269a:	02900513          	li	a0,41
    8002269e:	3150b0ef          	jal	8002e1b2 <putchar>
    800226a2:	4529                	li	a0,10
    800226a4:	30f0b0ef          	jal	8002e1b2 <putchar>
    800226a8:	0003a417          	auipc	s0,0x3a
    800226ac:	96944403          	lbu	s0,-1687(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800226b0:	00010597          	auipc	a1,0x10
    800226b4:	00858593          	addi	a1,a1,8 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    800226b8:	cc11                	beqz	s0,800226d4 <ebreak_tests_1+0xdc>
    800226ba:	6498                	ld	a4,8(s1)
    800226bc:	478d                	li	a5,3
    TEST_END();
    800226be:	00010597          	auipc	a1,0x10
    800226c2:	fea58593          	addi	a1,a1,-22 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    800226c6:	00f70763          	beq	a4,a5,800226d4 <ebreak_tests_1+0xdc>
    800226ca:	4401                	li	s0,0
    TEST_END();
    800226cc:	00010597          	auipc	a1,0x10
    800226d0:	fec58593          	addi	a1,a1,-20 # 800326b8 <__func__.0+0x2d0>
    800226d4:	00010517          	auipc	a0,0x10
    800226d8:	08c50513          	addi	a0,a0,140 # 80032760 <__func__.0+0x378>
    800226dc:	5e90c0ef          	jal	8002f4c4 <printf>
    800226e0:	4511                	li	a0,4
    800226e2:	833de0ef          	jal	80000f14 <goto_priv>
    800226e6:	890df0ef          	jal	80001776 <reset_state>

}
    800226ea:	60e2                	ld	ra,24(sp)
    800226ec:	8522                	mv	a0,s0
    800226ee:	6442                	ld	s0,16(sp)
    800226f0:	64a2                	ld	s1,8(sp)
    800226f2:	6105                	addi	sp,sp,32
    800226f4:	8082                	ret

00000000800226f6 <ebreak_tests_2>:

bool ebreak_tests_2() {
    800226f6:	1101                	addi	sp,sp,-32

    TEST_START();
    800226f8:	0000f597          	auipc	a1,0xf
    800226fc:	39858593          	addi	a1,a1,920 # 80031a90 <__func__.3>
    80022700:	00010517          	auipc	a0,0x10
    80022704:	fc850513          	addi	a0,a0,-56 # 800326c8 <__func__.0+0x2e0>
bool ebreak_tests_2() {
    80022708:	ec06                	sd	ra,24(sp)
    8002270a:	e822                	sd	s0,16(sp)
    8002270c:	e426                	sd	s1,8(sp)
    TEST_START();
    8002270e:	5b70c0ef          	jal	8002f4c4 <printf>
    80022712:	4529                	li	a0,10
    80022714:	29f0b0ef          	jal	8002e1b2 <putchar>

    //vs模式下执行ebreak指令
    goto_priv(PRIV_VS);
    80022718:	4509                	li	a0,2
    8002271a:	ffade0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002271e:	efade0ef          	jal	80000e18 <test_setup_except_function>
    80022722:	9002                	ebreak

    ebreak();

    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    80022724:	08c00593          	li	a1,140
    80022728:	00018617          	auipc	a2,0x18
    8002272c:	64060613          	addi	a2,a2,1600 # 8003ad68 <__func__.0+0x8980>
    80022730:	00010517          	auipc	a0,0x10
    80022734:	fb050513          	addi	a0,a0,-80 # 800326e0 <__func__.0+0x2f8>
    80022738:	58d0c0ef          	jal	8002f4c4 <printf>
    8002273c:	0003a797          	auipc	a5,0x3a
    80022740:	8d57c783          	lbu	a5,-1835(a5) # 8005c011 <excpt+0x1>
    80022744:	0003a497          	auipc	s1,0x3a
    80022748:	8cc48493          	addi	s1,s1,-1844 # 8005c010 <excpt>
    8002274c:	00010597          	auipc	a1,0x10
    80022750:	f6c58593          	addi	a1,a1,-148 # 800326b8 <__func__.0+0x2d0>
    80022754:	cf89                	beqz	a5,8002276e <ebreak_tests_2+0x78>
    80022756:	6498                	ld	a4,8(s1)
    80022758:	478d                	li	a5,3
    8002275a:	00010597          	auipc	a1,0x10
    8002275e:	f4e58593          	addi	a1,a1,-178 # 800326a8 <__func__.0+0x2c0>
    80022762:	00f70663          	beq	a4,a5,8002276e <ebreak_tests_2+0x78>
    80022766:	00010597          	auipc	a1,0x10
    8002276a:	f5258593          	addi	a1,a1,-174 # 800326b8 <__func__.0+0x2d0>
    8002276e:	00010517          	auipc	a0,0x10
    80022772:	f8a50513          	addi	a0,a0,-118 # 800326f8 <__func__.0+0x310>
    80022776:	54f0c0ef          	jal	8002f4c4 <printf>
    8002277a:	0003a797          	auipc	a5,0x3a
    8002277e:	8977c783          	lbu	a5,-1897(a5) # 8005c011 <excpt+0x1>
    80022782:	c789                	beqz	a5,8002278c <ebreak_tests_2+0x96>
    80022784:	6498                	ld	a4,8(s1)
    80022786:	478d                	li	a5,3
    80022788:	00f70c63          	beq	a4,a5,800227a0 <ebreak_tests_2+0xaa>
    8002278c:	00010517          	auipc	a0,0x10
    80022790:	f7450513          	addi	a0,a0,-140 # 80032700 <__func__.0+0x318>
    80022794:	5310c0ef          	jal	8002f4c4 <printf>
    80022798:	02900513          	li	a0,41
    8002279c:	2170b0ef          	jal	8002e1b2 <putchar>
    800227a0:	4529                	li	a0,10
    800227a2:	2110b0ef          	jal	8002e1b2 <putchar>
    800227a6:	0003a417          	auipc	s0,0x3a
    800227aa:	86b44403          	lbu	s0,-1941(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800227ae:	00010597          	auipc	a1,0x10
    800227b2:	f0a58593          	addi	a1,a1,-246 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    800227b6:	cc11                	beqz	s0,800227d2 <ebreak_tests_2+0xdc>
    800227b8:	6498                	ld	a4,8(s1)
    800227ba:	478d                	li	a5,3
    TEST_END();
    800227bc:	00010597          	auipc	a1,0x10
    800227c0:	eec58593          	addi	a1,a1,-276 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    800227c4:	00f70763          	beq	a4,a5,800227d2 <ebreak_tests_2+0xdc>
    800227c8:	4401                	li	s0,0
    TEST_END();
    800227ca:	00010597          	auipc	a1,0x10
    800227ce:	eee58593          	addi	a1,a1,-274 # 800326b8 <__func__.0+0x2d0>
    800227d2:	00010517          	auipc	a0,0x10
    800227d6:	f8e50513          	addi	a0,a0,-114 # 80032760 <__func__.0+0x378>
    800227da:	4eb0c0ef          	jal	8002f4c4 <printf>
    800227de:	4511                	li	a0,4
    800227e0:	f34de0ef          	jal	80000f14 <goto_priv>
    800227e4:	f93de0ef          	jal	80001776 <reset_state>

}
    800227e8:	60e2                	ld	ra,24(sp)
    800227ea:	8522                	mv	a0,s0
    800227ec:	6442                	ld	s0,16(sp)
    800227ee:	64a2                	ld	s1,8(sp)
    800227f0:	6105                	addi	sp,sp,32
    800227f2:	8082                	ret

00000000800227f4 <ebreak_tests_3>:

bool ebreak_tests_3() {
    800227f4:	1101                	addi	sp,sp,-32

    TEST_START();
    800227f6:	0000f597          	auipc	a1,0xf
    800227fa:	2aa58593          	addi	a1,a1,682 # 80031aa0 <__func__.2>
    800227fe:	00010517          	auipc	a0,0x10
    80022802:	eca50513          	addi	a0,a0,-310 # 800326c8 <__func__.0+0x2e0>
bool ebreak_tests_3() {
    80022806:	ec06                	sd	ra,24(sp)
    80022808:	e822                	sd	s0,16(sp)
    8002280a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002280c:	4b90c0ef          	jal	8002f4c4 <printf>
    80022810:	4529                	li	a0,10
    80022812:	1a10b0ef          	jal	8002e1b2 <putchar>

    //HS模式下执行ebreak指令
    goto_priv(PRIV_HS);
    80022816:	450d                	li	a0,3
    80022818:	efcde0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002281c:	dfcde0ef          	jal	80000e18 <test_setup_except_function>
    80022820:	9002                	ebreak

    ebreak();

    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    80022822:	08c00593          	li	a1,140
    80022826:	00018617          	auipc	a2,0x18
    8002282a:	56a60613          	addi	a2,a2,1386 # 8003ad90 <__func__.0+0x89a8>
    8002282e:	00010517          	auipc	a0,0x10
    80022832:	eb250513          	addi	a0,a0,-334 # 800326e0 <__func__.0+0x2f8>
    80022836:	48f0c0ef          	jal	8002f4c4 <printf>
    8002283a:	00039797          	auipc	a5,0x39
    8002283e:	7d77c783          	lbu	a5,2007(a5) # 8005c011 <excpt+0x1>
    80022842:	00039497          	auipc	s1,0x39
    80022846:	7ce48493          	addi	s1,s1,1998 # 8005c010 <excpt>
    8002284a:	00010597          	auipc	a1,0x10
    8002284e:	e6e58593          	addi	a1,a1,-402 # 800326b8 <__func__.0+0x2d0>
    80022852:	cf89                	beqz	a5,8002286c <ebreak_tests_3+0x78>
    80022854:	6498                	ld	a4,8(s1)
    80022856:	478d                	li	a5,3
    80022858:	00010597          	auipc	a1,0x10
    8002285c:	e5058593          	addi	a1,a1,-432 # 800326a8 <__func__.0+0x2c0>
    80022860:	00f70663          	beq	a4,a5,8002286c <ebreak_tests_3+0x78>
    80022864:	00010597          	auipc	a1,0x10
    80022868:	e5458593          	addi	a1,a1,-428 # 800326b8 <__func__.0+0x2d0>
    8002286c:	00010517          	auipc	a0,0x10
    80022870:	e8c50513          	addi	a0,a0,-372 # 800326f8 <__func__.0+0x310>
    80022874:	4510c0ef          	jal	8002f4c4 <printf>
    80022878:	00039797          	auipc	a5,0x39
    8002287c:	7997c783          	lbu	a5,1945(a5) # 8005c011 <excpt+0x1>
    80022880:	c789                	beqz	a5,8002288a <ebreak_tests_3+0x96>
    80022882:	6498                	ld	a4,8(s1)
    80022884:	478d                	li	a5,3
    80022886:	00f70c63          	beq	a4,a5,8002289e <ebreak_tests_3+0xaa>
    8002288a:	00010517          	auipc	a0,0x10
    8002288e:	e7650513          	addi	a0,a0,-394 # 80032700 <__func__.0+0x318>
    80022892:	4330c0ef          	jal	8002f4c4 <printf>
    80022896:	02900513          	li	a0,41
    8002289a:	1190b0ef          	jal	8002e1b2 <putchar>
    8002289e:	4529                	li	a0,10
    800228a0:	1130b0ef          	jal	8002e1b2 <putchar>
    800228a4:	00039417          	auipc	s0,0x39
    800228a8:	76d44403          	lbu	s0,1901(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800228ac:	00010597          	auipc	a1,0x10
    800228b0:	e0c58593          	addi	a1,a1,-500 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    800228b4:	cc11                	beqz	s0,800228d0 <ebreak_tests_3+0xdc>
    800228b6:	6498                	ld	a4,8(s1)
    800228b8:	478d                	li	a5,3
    TEST_END();
    800228ba:	00010597          	auipc	a1,0x10
    800228be:	dee58593          	addi	a1,a1,-530 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    800228c2:	00f70763          	beq	a4,a5,800228d0 <ebreak_tests_3+0xdc>
    800228c6:	4401                	li	s0,0
    TEST_END();
    800228c8:	00010597          	auipc	a1,0x10
    800228cc:	df058593          	addi	a1,a1,-528 # 800326b8 <__func__.0+0x2d0>
    800228d0:	00010517          	auipc	a0,0x10
    800228d4:	e9050513          	addi	a0,a0,-368 # 80032760 <__func__.0+0x378>
    800228d8:	3ed0c0ef          	jal	8002f4c4 <printf>
    800228dc:	4511                	li	a0,4
    800228de:	e36de0ef          	jal	80000f14 <goto_priv>
    800228e2:	e95de0ef          	jal	80001776 <reset_state>

}
    800228e6:	60e2                	ld	ra,24(sp)
    800228e8:	8522                	mv	a0,s0
    800228ea:	6442                	ld	s0,16(sp)
    800228ec:	64a2                	ld	s1,8(sp)
    800228ee:	6105                	addi	sp,sp,32
    800228f0:	8082                	ret

00000000800228f2 <ebreak_tests_4>:

bool ebreak_tests_4() {
    800228f2:	1101                	addi	sp,sp,-32

    TEST_START();
    800228f4:	0000f597          	auipc	a1,0xf
    800228f8:	1bc58593          	addi	a1,a1,444 # 80031ab0 <__func__.1>
    800228fc:	00010517          	auipc	a0,0x10
    80022900:	dcc50513          	addi	a0,a0,-564 # 800326c8 <__func__.0+0x2e0>
bool ebreak_tests_4() {
    80022904:	ec06                	sd	ra,24(sp)
    80022906:	e822                	sd	s0,16(sp)
    80022908:	e426                	sd	s1,8(sp)
    TEST_START();
    8002290a:	3bb0c0ef          	jal	8002f4c4 <printf>
    8002290e:	4529                	li	a0,10
    80022910:	0a30b0ef          	jal	8002e1b2 <putchar>

    //HU模式下执行ebreak指令
    goto_priv(PRIV_HU);
    80022914:	4505                	li	a0,1
    80022916:	dfede0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002291a:	cfede0ef          	jal	80000e18 <test_setup_except_function>
    8002291e:	9002                	ebreak

    ebreak();

    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    80022920:	08c00593          	li	a1,140
    80022924:	00018617          	auipc	a2,0x18
    80022928:	49460613          	addi	a2,a2,1172 # 8003adb8 <__func__.0+0x89d0>
    8002292c:	00010517          	auipc	a0,0x10
    80022930:	db450513          	addi	a0,a0,-588 # 800326e0 <__func__.0+0x2f8>
    80022934:	3910c0ef          	jal	8002f4c4 <printf>
    80022938:	00039797          	auipc	a5,0x39
    8002293c:	6d97c783          	lbu	a5,1753(a5) # 8005c011 <excpt+0x1>
    80022940:	00039497          	auipc	s1,0x39
    80022944:	6d048493          	addi	s1,s1,1744 # 8005c010 <excpt>
    80022948:	00010597          	auipc	a1,0x10
    8002294c:	d7058593          	addi	a1,a1,-656 # 800326b8 <__func__.0+0x2d0>
    80022950:	cf89                	beqz	a5,8002296a <ebreak_tests_4+0x78>
    80022952:	6498                	ld	a4,8(s1)
    80022954:	478d                	li	a5,3
    80022956:	00010597          	auipc	a1,0x10
    8002295a:	d5258593          	addi	a1,a1,-686 # 800326a8 <__func__.0+0x2c0>
    8002295e:	00f70663          	beq	a4,a5,8002296a <ebreak_tests_4+0x78>
    80022962:	00010597          	auipc	a1,0x10
    80022966:	d5658593          	addi	a1,a1,-682 # 800326b8 <__func__.0+0x2d0>
    8002296a:	00010517          	auipc	a0,0x10
    8002296e:	d8e50513          	addi	a0,a0,-626 # 800326f8 <__func__.0+0x310>
    80022972:	3530c0ef          	jal	8002f4c4 <printf>
    80022976:	00039797          	auipc	a5,0x39
    8002297a:	69b7c783          	lbu	a5,1691(a5) # 8005c011 <excpt+0x1>
    8002297e:	c789                	beqz	a5,80022988 <ebreak_tests_4+0x96>
    80022980:	6498                	ld	a4,8(s1)
    80022982:	478d                	li	a5,3
    80022984:	00f70c63          	beq	a4,a5,8002299c <ebreak_tests_4+0xaa>
    80022988:	00010517          	auipc	a0,0x10
    8002298c:	d7850513          	addi	a0,a0,-648 # 80032700 <__func__.0+0x318>
    80022990:	3350c0ef          	jal	8002f4c4 <printf>
    80022994:	02900513          	li	a0,41
    80022998:	01b0b0ef          	jal	8002e1b2 <putchar>
    8002299c:	4529                	li	a0,10
    8002299e:	0150b0ef          	jal	8002e1b2 <putchar>
    800229a2:	00039417          	auipc	s0,0x39
    800229a6:	66f44403          	lbu	s0,1647(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800229aa:	00010597          	auipc	a1,0x10
    800229ae:	d0e58593          	addi	a1,a1,-754 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    800229b2:	cc11                	beqz	s0,800229ce <ebreak_tests_4+0xdc>
    800229b4:	6498                	ld	a4,8(s1)
    800229b6:	478d                	li	a5,3
    TEST_END();
    800229b8:	00010597          	auipc	a1,0x10
    800229bc:	cf058593          	addi	a1,a1,-784 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    800229c0:	00f70763          	beq	a4,a5,800229ce <ebreak_tests_4+0xdc>
    800229c4:	4401                	li	s0,0
    TEST_END();
    800229c6:	00010597          	auipc	a1,0x10
    800229ca:	cf258593          	addi	a1,a1,-782 # 800326b8 <__func__.0+0x2d0>
    800229ce:	00010517          	auipc	a0,0x10
    800229d2:	d9250513          	addi	a0,a0,-622 # 80032760 <__func__.0+0x378>
    800229d6:	2ef0c0ef          	jal	8002f4c4 <printf>
    800229da:	4511                	li	a0,4
    800229dc:	d38de0ef          	jal	80000f14 <goto_priv>
    800229e0:	d97de0ef          	jal	80001776 <reset_state>

}
    800229e4:	60e2                	ld	ra,24(sp)
    800229e6:	8522                	mv	a0,s0
    800229e8:	6442                	ld	s0,16(sp)
    800229ea:	64a2                	ld	s1,8(sp)
    800229ec:	6105                	addi	sp,sp,32
    800229ee:	8082                	ret

00000000800229f0 <ebreak_tests_5>:

bool ebreak_tests_5() {
    800229f0:	1101                	addi	sp,sp,-32

    TEST_START();
    800229f2:	0000f597          	auipc	a1,0xf
    800229f6:	0ce58593          	addi	a1,a1,206 # 80031ac0 <__func__.0>
    800229fa:	00010517          	auipc	a0,0x10
    800229fe:	cce50513          	addi	a0,a0,-818 # 800326c8 <__func__.0+0x2e0>
bool ebreak_tests_5() {
    80022a02:	ec06                	sd	ra,24(sp)
    80022a04:	e822                	sd	s0,16(sp)
    80022a06:	e426                	sd	s1,8(sp)
    TEST_START();
    80022a08:	2bd0c0ef          	jal	8002f4c4 <printf>
    80022a0c:	4529                	li	a0,10
    80022a0e:	7a40b0ef          	jal	8002e1b2 <putchar>

    //VU模式下执行ebreak指令
    goto_priv(PRIV_VU);
    80022a12:	4501                	li	a0,0
    80022a14:	d00de0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022a18:	c00de0ef          	jal	80000e18 <test_setup_except_function>
    80022a1c:	9002                	ebreak

    ebreak();

    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80022a1e:	08c00593          	li	a1,140
    80022a22:	00018617          	auipc	a2,0x18
    80022a26:	3be60613          	addi	a2,a2,958 # 8003ade0 <__func__.0+0x89f8>
    80022a2a:	00010517          	auipc	a0,0x10
    80022a2e:	cb650513          	addi	a0,a0,-842 # 800326e0 <__func__.0+0x2f8>
    80022a32:	2930c0ef          	jal	8002f4c4 <printf>
    80022a36:	00039797          	auipc	a5,0x39
    80022a3a:	5db7c783          	lbu	a5,1499(a5) # 8005c011 <excpt+0x1>
    80022a3e:	00039497          	auipc	s1,0x39
    80022a42:	5d248493          	addi	s1,s1,1490 # 8005c010 <excpt>
    80022a46:	00010597          	auipc	a1,0x10
    80022a4a:	c7258593          	addi	a1,a1,-910 # 800326b8 <__func__.0+0x2d0>
    80022a4e:	cf89                	beqz	a5,80022a68 <ebreak_tests_5+0x78>
    80022a50:	6498                	ld	a4,8(s1)
    80022a52:	478d                	li	a5,3
    80022a54:	00010597          	auipc	a1,0x10
    80022a58:	c5458593          	addi	a1,a1,-940 # 800326a8 <__func__.0+0x2c0>
    80022a5c:	00f70663          	beq	a4,a5,80022a68 <ebreak_tests_5+0x78>
    80022a60:	00010597          	auipc	a1,0x10
    80022a64:	c5858593          	addi	a1,a1,-936 # 800326b8 <__func__.0+0x2d0>
    80022a68:	00010517          	auipc	a0,0x10
    80022a6c:	c9050513          	addi	a0,a0,-880 # 800326f8 <__func__.0+0x310>
    80022a70:	2550c0ef          	jal	8002f4c4 <printf>
    80022a74:	00039797          	auipc	a5,0x39
    80022a78:	59d7c783          	lbu	a5,1437(a5) # 8005c011 <excpt+0x1>
    80022a7c:	c789                	beqz	a5,80022a86 <ebreak_tests_5+0x96>
    80022a7e:	6498                	ld	a4,8(s1)
    80022a80:	478d                	li	a5,3
    80022a82:	00f70c63          	beq	a4,a5,80022a9a <ebreak_tests_5+0xaa>
    80022a86:	00010517          	auipc	a0,0x10
    80022a8a:	c7a50513          	addi	a0,a0,-902 # 80032700 <__func__.0+0x318>
    80022a8e:	2370c0ef          	jal	8002f4c4 <printf>
    80022a92:	02900513          	li	a0,41
    80022a96:	71c0b0ef          	jal	8002e1b2 <putchar>
    80022a9a:	4529                	li	a0,10
    80022a9c:	7160b0ef          	jal	8002e1b2 <putchar>
    80022aa0:	00039417          	auipc	s0,0x39
    80022aa4:	57144403          	lbu	s0,1393(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    80022aa8:	00010597          	auipc	a1,0x10
    80022aac:	c1058593          	addi	a1,a1,-1008 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80022ab0:	cc11                	beqz	s0,80022acc <ebreak_tests_5+0xdc>
    80022ab2:	6498                	ld	a4,8(s1)
    80022ab4:	478d                	li	a5,3
    TEST_END();
    80022ab6:	00010597          	auipc	a1,0x10
    80022aba:	bf258593          	addi	a1,a1,-1038 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80022abe:	00f70763          	beq	a4,a5,80022acc <ebreak_tests_5+0xdc>
    80022ac2:	4401                	li	s0,0
    TEST_END();
    80022ac4:	00010597          	auipc	a1,0x10
    80022ac8:	bf458593          	addi	a1,a1,-1036 # 800326b8 <__func__.0+0x2d0>
    80022acc:	00010517          	auipc	a0,0x10
    80022ad0:	c9450513          	addi	a0,a0,-876 # 80032760 <__func__.0+0x378>
    80022ad4:	1f10c0ef          	jal	8002f4c4 <printf>
    80022ad8:	4511                	li	a0,4
    80022ada:	c3ade0ef          	jal	80000f14 <goto_priv>
    80022ade:	c99de0ef          	jal	80001776 <reset_state>

    80022ae2:	60e2                	ld	ra,24(sp)
    80022ae4:	8522                	mv	a0,s0
    80022ae6:	6442                	ld	s0,16(sp)
    80022ae8:	64a2                	ld	s1,8(sp)
    80022aea:	6105                	addi	sp,sp,32
    80022aec:	8082                	ret

0000000080022aee <stateen_C_test_1>:
#include <rvh_test.h>


bool stateen_C_test_1(){
    80022aee:	1101                	addi	sp,sp,-32

    TEST_START();
    80022af0:	0000f597          	auipc	a1,0xf
    80022af4:	fe058593          	addi	a1,a1,-32 # 80031ad0 <__func__.36>
    80022af8:	00010517          	auipc	a0,0x10
    80022afc:	bd050513          	addi	a0,a0,-1072 # 800326c8 <__func__.0+0x2e0>
bool stateen_C_test_1(){
    80022b00:	ec06                	sd	ra,24(sp)
    80022b02:	e822                	sd	s0,16(sp)
    80022b04:	e426                	sd	s1,8(sp)
    TEST_START();
    80022b06:	1bf0c0ef          	jal	8002f4c4 <printf>
    80022b0a:	4529                	li	a0,10
    80022b0c:	6a60b0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80022b10:	4511                	li	a0,4
    80022b12:	c02de0ef          	jal	80000f14 <goto_priv>
    //当mstateen.C=0,hu mode 不可访问自定义寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022b16:	30c0f073          	csrci	mstateen0,1

    goto_priv(PRIV_HU);
    80022b1a:	4505                	li	a0,1
    80022b1c:	bf8de0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022b20:	af8de0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(0X5C2);
    80022b24:	5c2027f3          	csrr	a5,0x5c2

    excpt_info();
    80022b28:	d32de0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022b2c:	08c00593          	li	a1,140
    80022b30:	00018617          	auipc	a2,0x18
    80022b34:	2d860613          	addi	a2,a2,728 # 8003ae08 <__func__.0+0x8a20>
    80022b38:	00010517          	auipc	a0,0x10
    80022b3c:	ba850513          	addi	a0,a0,-1112 # 800326e0 <__func__.0+0x2f8>
    80022b40:	1850c0ef          	jal	8002f4c4 <printf>
    80022b44:	00039797          	auipc	a5,0x39
    80022b48:	4cd7c783          	lbu	a5,1229(a5) # 8005c011 <excpt+0x1>
    80022b4c:	00039497          	auipc	s1,0x39
    80022b50:	4c448493          	addi	s1,s1,1220 # 8005c010 <excpt>
    80022b54:	00010597          	auipc	a1,0x10
    80022b58:	b6458593          	addi	a1,a1,-1180 # 800326b8 <__func__.0+0x2d0>
    80022b5c:	cf89                	beqz	a5,80022b76 <stateen_C_test_1+0x88>
    80022b5e:	6498                	ld	a4,8(s1)
    80022b60:	4789                	li	a5,2
    80022b62:	00010597          	auipc	a1,0x10
    80022b66:	b4658593          	addi	a1,a1,-1210 # 800326a8 <__func__.0+0x2c0>
    80022b6a:	00f70663          	beq	a4,a5,80022b76 <stateen_C_test_1+0x88>
    80022b6e:	00010597          	auipc	a1,0x10
    80022b72:	b4a58593          	addi	a1,a1,-1206 # 800326b8 <__func__.0+0x2d0>
    80022b76:	00010517          	auipc	a0,0x10
    80022b7a:	b8250513          	addi	a0,a0,-1150 # 800326f8 <__func__.0+0x310>
    80022b7e:	1470c0ef          	jal	8002f4c4 <printf>
    80022b82:	00039797          	auipc	a5,0x39
    80022b86:	48f7c783          	lbu	a5,1167(a5) # 8005c011 <excpt+0x1>
    80022b8a:	c789                	beqz	a5,80022b94 <stateen_C_test_1+0xa6>
    80022b8c:	6498                	ld	a4,8(s1)
    80022b8e:	4789                	li	a5,2
    80022b90:	00f70c63          	beq	a4,a5,80022ba8 <stateen_C_test_1+0xba>
    80022b94:	00010517          	auipc	a0,0x10
    80022b98:	b6c50513          	addi	a0,a0,-1172 # 80032700 <__func__.0+0x318>
    80022b9c:	1290c0ef          	jal	8002f4c4 <printf>
    80022ba0:	02900513          	li	a0,41
    80022ba4:	60e0b0ef          	jal	8002e1b2 <putchar>
    80022ba8:	4529                	li	a0,10
    80022baa:	6080b0ef          	jal	8002e1b2 <putchar>
    80022bae:	00039417          	auipc	s0,0x39
    80022bb2:	46344403          	lbu	s0,1123(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80022bb6:	00010597          	auipc	a1,0x10
    80022bba:	b0258593          	addi	a1,a1,-1278 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022bbe:	cc11                	beqz	s0,80022bda <stateen_C_test_1+0xec>
    80022bc0:	6498                	ld	a4,8(s1)
    80022bc2:	4789                	li	a5,2
    TEST_END();
    80022bc4:	00010597          	auipc	a1,0x10
    80022bc8:	ae458593          	addi	a1,a1,-1308 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022bcc:	00f70763          	beq	a4,a5,80022bda <stateen_C_test_1+0xec>
    80022bd0:	4401                	li	s0,0
    TEST_END();
    80022bd2:	00010597          	auipc	a1,0x10
    80022bd6:	ae658593          	addi	a1,a1,-1306 # 800326b8 <__func__.0+0x2d0>
    80022bda:	00010517          	auipc	a0,0x10
    80022bde:	b8650513          	addi	a0,a0,-1146 # 80032760 <__func__.0+0x378>
    80022be2:	0e30c0ef          	jal	8002f4c4 <printf>
    80022be6:	4511                	li	a0,4
    80022be8:	b2cde0ef          	jal	80000f14 <goto_priv>
    80022bec:	b8bde0ef          	jal	80001776 <reset_state>

}
    80022bf0:	60e2                	ld	ra,24(sp)
    80022bf2:	8522                	mv	a0,s0
    80022bf4:	6442                	ld	s0,16(sp)
    80022bf6:	64a2                	ld	s1,8(sp)
    80022bf8:	6105                	addi	sp,sp,32
    80022bfa:	8082                	ret

0000000080022bfc <stateen_C_test_2>:

bool stateen_C_test_2(){
    80022bfc:	1101                	addi	sp,sp,-32

    TEST_START();
    80022bfe:	0000f597          	auipc	a1,0xf
    80022c02:	eea58593          	addi	a1,a1,-278 # 80031ae8 <__func__.35>
    80022c06:	00010517          	auipc	a0,0x10
    80022c0a:	ac250513          	addi	a0,a0,-1342 # 800326c8 <__func__.0+0x2e0>
bool stateen_C_test_2(){
    80022c0e:	ec06                	sd	ra,24(sp)
    80022c10:	e822                	sd	s0,16(sp)
    80022c12:	e426                	sd	s1,8(sp)
    TEST_START();
    80022c14:	0b10c0ef          	jal	8002f4c4 <printf>
    80022c18:	4529                	li	a0,10
    80022c1a:	5980b0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80022c1e:	4511                	li	a0,4
    80022c20:	af4de0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022c24:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022c28:	60c0f073          	csrci	hstateen0,1

    //当mstateen.C=1,hstateen.C=0,v=1时不可访问自定义寄存器
    goto_priv(PRIV_VU);
    80022c2c:	4501                	li	a0,0
    80022c2e:	ae6de0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022c32:	9e6de0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(0X5C3);
    80022c36:	5c3027f3          	csrr	a5,0x5c3

    excpt_info();
    80022c3a:	c20de0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022c3e:	08c00593          	li	a1,140
    80022c42:	00018617          	auipc	a2,0x18
    80022c46:	21660613          	addi	a2,a2,534 # 8003ae58 <__func__.0+0x8a70>
    80022c4a:	00010517          	auipc	a0,0x10
    80022c4e:	a9650513          	addi	a0,a0,-1386 # 800326e0 <__func__.0+0x2f8>
    80022c52:	0730c0ef          	jal	8002f4c4 <printf>
    80022c56:	00039797          	auipc	a5,0x39
    80022c5a:	3bb7c783          	lbu	a5,955(a5) # 8005c011 <excpt+0x1>
    80022c5e:	00039497          	auipc	s1,0x39
    80022c62:	3b248493          	addi	s1,s1,946 # 8005c010 <excpt>
    80022c66:	00010597          	auipc	a1,0x10
    80022c6a:	a5258593          	addi	a1,a1,-1454 # 800326b8 <__func__.0+0x2d0>
    80022c6e:	cf89                	beqz	a5,80022c88 <stateen_C_test_2+0x8c>
    80022c70:	6498                	ld	a4,8(s1)
    80022c72:	47d9                	li	a5,22
    80022c74:	00010597          	auipc	a1,0x10
    80022c78:	a3458593          	addi	a1,a1,-1484 # 800326a8 <__func__.0+0x2c0>
    80022c7c:	00f70663          	beq	a4,a5,80022c88 <stateen_C_test_2+0x8c>
    80022c80:	00010597          	auipc	a1,0x10
    80022c84:	a3858593          	addi	a1,a1,-1480 # 800326b8 <__func__.0+0x2d0>
    80022c88:	00010517          	auipc	a0,0x10
    80022c8c:	a7050513          	addi	a0,a0,-1424 # 800326f8 <__func__.0+0x310>
    80022c90:	0350c0ef          	jal	8002f4c4 <printf>
    80022c94:	00039797          	auipc	a5,0x39
    80022c98:	37d7c783          	lbu	a5,893(a5) # 8005c011 <excpt+0x1>
    80022c9c:	c789                	beqz	a5,80022ca6 <stateen_C_test_2+0xaa>
    80022c9e:	6498                	ld	a4,8(s1)
    80022ca0:	47d9                	li	a5,22
    80022ca2:	00f70c63          	beq	a4,a5,80022cba <stateen_C_test_2+0xbe>
    80022ca6:	00010517          	auipc	a0,0x10
    80022caa:	a5a50513          	addi	a0,a0,-1446 # 80032700 <__func__.0+0x318>
    80022cae:	0170c0ef          	jal	8002f4c4 <printf>
    80022cb2:	02900513          	li	a0,41
    80022cb6:	4fc0b0ef          	jal	8002e1b2 <putchar>
    80022cba:	4529                	li	a0,10
    80022cbc:	4f60b0ef          	jal	8002e1b2 <putchar>
    80022cc0:	00039417          	auipc	s0,0x39
    80022cc4:	35144403          	lbu	s0,849(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80022cc8:	00010597          	auipc	a1,0x10
    80022ccc:	9f058593          	addi	a1,a1,-1552 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022cd0:	cc11                	beqz	s0,80022cec <stateen_C_test_2+0xf0>
    80022cd2:	6498                	ld	a4,8(s1)
    80022cd4:	47d9                	li	a5,22
    TEST_END();
    80022cd6:	00010597          	auipc	a1,0x10
    80022cda:	9d258593          	addi	a1,a1,-1582 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022cde:	00f70763          	beq	a4,a5,80022cec <stateen_C_test_2+0xf0>
    80022ce2:	4401                	li	s0,0
    TEST_END();
    80022ce4:	00010597          	auipc	a1,0x10
    80022ce8:	9d458593          	addi	a1,a1,-1580 # 800326b8 <__func__.0+0x2d0>
    80022cec:	00010517          	auipc	a0,0x10
    80022cf0:	a7450513          	addi	a0,a0,-1420 # 80032760 <__func__.0+0x378>
    80022cf4:	7d00c0ef          	jal	8002f4c4 <printf>
    80022cf8:	4511                	li	a0,4
    80022cfa:	a1ade0ef          	jal	80000f14 <goto_priv>
    80022cfe:	a79de0ef          	jal	80001776 <reset_state>

}
    80022d02:	60e2                	ld	ra,24(sp)
    80022d04:	8522                	mv	a0,s0
    80022d06:	6442                	ld	s0,16(sp)
    80022d08:	64a2                	ld	s1,8(sp)
    80022d0a:	6105                	addi	sp,sp,32
    80022d0c:	8082                	ret

0000000080022d0e <stateen_C_test_3>:

bool stateen_C_test_3(){
    80022d0e:	1141                	addi	sp,sp,-16

    //当mstateen.C=0,m mode 可访问自定义寄存器

    TEST_START();
    80022d10:	0000f597          	auipc	a1,0xf
    80022d14:	df058593          	addi	a1,a1,-528 # 80031b00 <__func__.34>
    80022d18:	00010517          	auipc	a0,0x10
    80022d1c:	9b050513          	addi	a0,a0,-1616 # 800326c8 <__func__.0+0x2e0>
bool stateen_C_test_3(){
    80022d20:	e406                	sd	ra,8(sp)
    80022d22:	e022                	sd	s0,0(sp)
    TEST_START();
    80022d24:	7a00c0ef          	jal	8002f4c4 <printf>
    80022d28:	4529                	li	a0,10
    80022d2a:	4880b0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80022d2e:	4511                	li	a0,4
    80022d30:	9e4de0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022d34:	30c0f073          	csrci	mstateen0,1
    goto_priv(PRIV_M);
    80022d38:	4511                	li	a0,4
    80022d3a:	9dade0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022d3e:	8dade0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(0X5C1);
    80022d42:	5c1027f3          	csrr	a5,0x5c1

    excpt_info();
    80022d46:	b14de0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022d4a:	08c00593          	li	a1,140
    80022d4e:	00018617          	auipc	a2,0x18
    80022d52:	15a60613          	addi	a2,a2,346 # 8003aea8 <__func__.0+0x8ac0>
    80022d56:	00010517          	auipc	a0,0x10
    80022d5a:	98a50513          	addi	a0,a0,-1654 # 800326e0 <__func__.0+0x2f8>
    80022d5e:	7660c0ef          	jal	8002f4c4 <printf>
    80022d62:	00039797          	auipc	a5,0x39
    80022d66:	2af7c783          	lbu	a5,687(a5) # 8005c011 <excpt+0x1>
    80022d6a:	00010597          	auipc	a1,0x10
    80022d6e:	93e58593          	addi	a1,a1,-1730 # 800326a8 <__func__.0+0x2c0>
    80022d72:	c789                	beqz	a5,80022d7c <stateen_C_test_3+0x6e>
    80022d74:	00010597          	auipc	a1,0x10
    80022d78:	94458593          	addi	a1,a1,-1724 # 800326b8 <__func__.0+0x2d0>
    80022d7c:	00010517          	auipc	a0,0x10
    80022d80:	97c50513          	addi	a0,a0,-1668 # 800326f8 <__func__.0+0x310>
    80022d84:	7400c0ef          	jal	8002f4c4 <printf>
    80022d88:	00039797          	auipc	a5,0x39
    80022d8c:	2897c783          	lbu	a5,649(a5) # 8005c011 <excpt+0x1>
    80022d90:	e7a1                	bnez	a5,80022dd8 <stateen_C_test_3+0xca>
    80022d92:	4529                	li	a0,10
    80022d94:	41e0b0ef          	jal	8002e1b2 <putchar>
    80022d98:	00039797          	auipc	a5,0x39
    80022d9c:	2797c783          	lbu	a5,633(a5) # 8005c011 <excpt+0x1>
    80022da0:	e795                	bnez	a5,80022dcc <stateen_C_test_3+0xbe>
    80022da2:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80022da4:	00010597          	auipc	a1,0x10
    80022da8:	90458593          	addi	a1,a1,-1788 # 800326a8 <__func__.0+0x2c0>
    80022dac:	00010517          	auipc	a0,0x10
    80022db0:	9b450513          	addi	a0,a0,-1612 # 80032760 <__func__.0+0x378>
    80022db4:	7100c0ef          	jal	8002f4c4 <printf>
    80022db8:	4511                	li	a0,4
    80022dba:	95ade0ef          	jal	80000f14 <goto_priv>
    80022dbe:	9b9de0ef          	jal	80001776 <reset_state>

}
    80022dc2:	60a2                	ld	ra,8(sp)
    80022dc4:	8522                	mv	a0,s0
    80022dc6:	6402                	ld	s0,0(sp)
    80022dc8:	0141                	addi	sp,sp,16
    80022dca:	8082                	ret
    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022dcc:	4401                	li	s0,0
    TEST_END();
    80022dce:	00010597          	auipc	a1,0x10
    80022dd2:	8ea58593          	addi	a1,a1,-1814 # 800326b8 <__func__.0+0x2d0>
    80022dd6:	bfd9                	j	80022dac <stateen_C_test_3+0x9e>
    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022dd8:	00010517          	auipc	a0,0x10
    80022ddc:	92850513          	addi	a0,a0,-1752 # 80032700 <__func__.0+0x318>
    80022de0:	6e40c0ef          	jal	8002f4c4 <printf>
    80022de4:	02900513          	li	a0,41
    80022de8:	3ca0b0ef          	jal	8002e1b2 <putchar>
    80022dec:	b75d                	j	80022d92 <stateen_C_test_3+0x84>

0000000080022dee <stateen_C_test_4>:

bool stateen_C_test_4(){
    80022dee:	1101                	addi	sp,sp,-32

    //当mstateen.C=1,hstateen.C=0,v=1时不可访问自定义寄存器

    TEST_START();
    80022df0:	0000f597          	auipc	a1,0xf
    80022df4:	d2858593          	addi	a1,a1,-728 # 80031b18 <__func__.33>
    80022df8:	00010517          	auipc	a0,0x10
    80022dfc:	8d050513          	addi	a0,a0,-1840 # 800326c8 <__func__.0+0x2e0>
bool stateen_C_test_4(){
    80022e00:	ec06                	sd	ra,24(sp)
    80022e02:	e822                	sd	s0,16(sp)
    80022e04:	e426                	sd	s1,8(sp)
    TEST_START();
    80022e06:	6be0c0ef          	jal	8002f4c4 <printf>
    80022e0a:	4529                	li	a0,10
    80022e0c:	3a60b0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80022e10:	4511                	li	a0,4
    80022e12:	902de0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022e16:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022e1a:	60c0f073          	csrci	hstateen0,1
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80022e1e:	30c025f3          	csrr	a1,mstateen0
    80022e22:	00018517          	auipc	a0,0x18
    80022e26:	0c650513          	addi	a0,a0,198 # 8003aee8 <__func__.0+0x8b00>
    80022e2a:	69a0c0ef          	jal	8002f4c4 <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80022e2e:	60c025f3          	csrr	a1,hstateen0
    80022e32:	00018517          	auipc	a0,0x18
    80022e36:	0c650513          	addi	a0,a0,198 # 8003aef8 <__func__.0+0x8b10>
    80022e3a:	68a0c0ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);
    80022e3e:	4509                	li	a0,2
    80022e40:	8d4de0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022e44:	fd5dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(0X5C4);
    80022e48:	5c4027f3          	csrr	a5,0x5c4

    excpt_info();
    80022e4c:	a0ede0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022e50:	08c00593          	li	a1,140
    80022e54:	00018617          	auipc	a2,0x18
    80022e58:	0b460613          	addi	a2,a2,180 # 8003af08 <__func__.0+0x8b20>
    80022e5c:	00010517          	auipc	a0,0x10
    80022e60:	88450513          	addi	a0,a0,-1916 # 800326e0 <__func__.0+0x2f8>
    80022e64:	6600c0ef          	jal	8002f4c4 <printf>
    80022e68:	00039797          	auipc	a5,0x39
    80022e6c:	1a97c783          	lbu	a5,425(a5) # 8005c011 <excpt+0x1>
    80022e70:	00039497          	auipc	s1,0x39
    80022e74:	1a048493          	addi	s1,s1,416 # 8005c010 <excpt>
    80022e78:	00010597          	auipc	a1,0x10
    80022e7c:	84058593          	addi	a1,a1,-1984 # 800326b8 <__func__.0+0x2d0>
    80022e80:	cf89                	beqz	a5,80022e9a <stateen_C_test_4+0xac>
    80022e82:	6498                	ld	a4,8(s1)
    80022e84:	47d9                	li	a5,22
    80022e86:	00010597          	auipc	a1,0x10
    80022e8a:	82258593          	addi	a1,a1,-2014 # 800326a8 <__func__.0+0x2c0>
    80022e8e:	00f70663          	beq	a4,a5,80022e9a <stateen_C_test_4+0xac>
    80022e92:	00010597          	auipc	a1,0x10
    80022e96:	82658593          	addi	a1,a1,-2010 # 800326b8 <__func__.0+0x2d0>
    80022e9a:	00010517          	auipc	a0,0x10
    80022e9e:	85e50513          	addi	a0,a0,-1954 # 800326f8 <__func__.0+0x310>
    80022ea2:	6220c0ef          	jal	8002f4c4 <printf>
    80022ea6:	00039797          	auipc	a5,0x39
    80022eaa:	16b7c783          	lbu	a5,363(a5) # 8005c011 <excpt+0x1>
    80022eae:	c789                	beqz	a5,80022eb8 <stateen_C_test_4+0xca>
    80022eb0:	6498                	ld	a4,8(s1)
    80022eb2:	47d9                	li	a5,22
    80022eb4:	00f70c63          	beq	a4,a5,80022ecc <stateen_C_test_4+0xde>
    80022eb8:	00010517          	auipc	a0,0x10
    80022ebc:	84850513          	addi	a0,a0,-1976 # 80032700 <__func__.0+0x318>
    80022ec0:	6040c0ef          	jal	8002f4c4 <printf>
    80022ec4:	02900513          	li	a0,41
    80022ec8:	2ea0b0ef          	jal	8002e1b2 <putchar>
    80022ecc:	4529                	li	a0,10
    80022ece:	2e40b0ef          	jal	8002e1b2 <putchar>
    80022ed2:	00039417          	auipc	s0,0x39
    80022ed6:	13f44403          	lbu	s0,319(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80022eda:	0000f597          	auipc	a1,0xf
    80022ede:	7de58593          	addi	a1,a1,2014 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022ee2:	cc11                	beqz	s0,80022efe <stateen_C_test_4+0x110>
    80022ee4:	6498                	ld	a4,8(s1)
    80022ee6:	47d9                	li	a5,22
    TEST_END();
    80022ee8:	0000f597          	auipc	a1,0xf
    80022eec:	7c058593          	addi	a1,a1,1984 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022ef0:	00f70763          	beq	a4,a5,80022efe <stateen_C_test_4+0x110>
    80022ef4:	4401                	li	s0,0
    TEST_END();
    80022ef6:	0000f597          	auipc	a1,0xf
    80022efa:	7c258593          	addi	a1,a1,1986 # 800326b8 <__func__.0+0x2d0>
    80022efe:	00010517          	auipc	a0,0x10
    80022f02:	86250513          	addi	a0,a0,-1950 # 80032760 <__func__.0+0x378>
    80022f06:	5be0c0ef          	jal	8002f4c4 <printf>
    80022f0a:	4511                	li	a0,4
    80022f0c:	808de0ef          	jal	80000f14 <goto_priv>
    80022f10:	867de0ef          	jal	80001776 <reset_state>

}
    80022f14:	60e2                	ld	ra,24(sp)
    80022f16:	8522                	mv	a0,s0
    80022f18:	6442                	ld	s0,16(sp)
    80022f1a:	64a2                	ld	s1,8(sp)
    80022f1c:	6105                	addi	sp,sp,32
    80022f1e:	8082                	ret

0000000080022f20 <stateen_C_test_5>:

bool stateen_C_test_5(){
    80022f20:	1101                	addi	sp,sp,-32

    //当mstateen.C=0,hs mode 不可访问自定义寄存器

    TEST_START();
    80022f22:	0000f597          	auipc	a1,0xf
    80022f26:	c0e58593          	addi	a1,a1,-1010 # 80031b30 <__func__.32>
    80022f2a:	0000f517          	auipc	a0,0xf
    80022f2e:	79e50513          	addi	a0,a0,1950 # 800326c8 <__func__.0+0x2e0>
bool stateen_C_test_5(){
    80022f32:	ec06                	sd	ra,24(sp)
    80022f34:	e822                	sd	s0,16(sp)
    80022f36:	e426                	sd	s1,8(sp)
    TEST_START();
    80022f38:	58c0c0ef          	jal	8002f4c4 <printf>
    80022f3c:	4529                	li	a0,10
    80022f3e:	2740b0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80022f42:	4511                	li	a0,4
    80022f44:	fd1dd0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022f48:	30c0f073          	csrci	mstateen0,1

    goto_priv(PRIV_HS);
    80022f4c:	450d                	li	a0,3
    80022f4e:	fc7dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022f52:	ec7dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(0X5C0);
    80022f56:	5c0027f3          	csrr	a5,0x5c0

    excpt_info();
    80022f5a:	900de0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022f5e:	08c00593          	li	a1,140
    80022f62:	00018617          	auipc	a2,0x18
    80022f66:	ff660613          	addi	a2,a2,-10 # 8003af58 <__func__.0+0x8b70>
    80022f6a:	0000f517          	auipc	a0,0xf
    80022f6e:	77650513          	addi	a0,a0,1910 # 800326e0 <__func__.0+0x2f8>
    80022f72:	5520c0ef          	jal	8002f4c4 <printf>
    80022f76:	00039797          	auipc	a5,0x39
    80022f7a:	09b7c783          	lbu	a5,155(a5) # 8005c011 <excpt+0x1>
    80022f7e:	00039497          	auipc	s1,0x39
    80022f82:	09248493          	addi	s1,s1,146 # 8005c010 <excpt>
    80022f86:	0000f597          	auipc	a1,0xf
    80022f8a:	73258593          	addi	a1,a1,1842 # 800326b8 <__func__.0+0x2d0>
    80022f8e:	cf89                	beqz	a5,80022fa8 <stateen_C_test_5+0x88>
    80022f90:	6498                	ld	a4,8(s1)
    80022f92:	4789                	li	a5,2
    80022f94:	0000f597          	auipc	a1,0xf
    80022f98:	71458593          	addi	a1,a1,1812 # 800326a8 <__func__.0+0x2c0>
    80022f9c:	00f70663          	beq	a4,a5,80022fa8 <stateen_C_test_5+0x88>
    80022fa0:	0000f597          	auipc	a1,0xf
    80022fa4:	71858593          	addi	a1,a1,1816 # 800326b8 <__func__.0+0x2d0>
    80022fa8:	0000f517          	auipc	a0,0xf
    80022fac:	75050513          	addi	a0,a0,1872 # 800326f8 <__func__.0+0x310>
    80022fb0:	5140c0ef          	jal	8002f4c4 <printf>
    80022fb4:	00039797          	auipc	a5,0x39
    80022fb8:	05d7c783          	lbu	a5,93(a5) # 8005c011 <excpt+0x1>
    80022fbc:	c789                	beqz	a5,80022fc6 <stateen_C_test_5+0xa6>
    80022fbe:	6498                	ld	a4,8(s1)
    80022fc0:	4789                	li	a5,2
    80022fc2:	00f70c63          	beq	a4,a5,80022fda <stateen_C_test_5+0xba>
    80022fc6:	0000f517          	auipc	a0,0xf
    80022fca:	73a50513          	addi	a0,a0,1850 # 80032700 <__func__.0+0x318>
    80022fce:	4f60c0ef          	jal	8002f4c4 <printf>
    80022fd2:	02900513          	li	a0,41
    80022fd6:	1dc0b0ef          	jal	8002e1b2 <putchar>
    80022fda:	4529                	li	a0,10
    80022fdc:	1d60b0ef          	jal	8002e1b2 <putchar>
    80022fe0:	00039417          	auipc	s0,0x39
    80022fe4:	03144403          	lbu	s0,49(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80022fe8:	0000f597          	auipc	a1,0xf
    80022fec:	6d058593          	addi	a1,a1,1744 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022ff0:	cc11                	beqz	s0,8002300c <stateen_C_test_5+0xec>
    80022ff2:	6498                	ld	a4,8(s1)
    80022ff4:	4789                	li	a5,2
    TEST_END();
    80022ff6:	0000f597          	auipc	a1,0xf
    80022ffa:	6b258593          	addi	a1,a1,1714 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022ffe:	00f70763          	beq	a4,a5,8002300c <stateen_C_test_5+0xec>
    80023002:	4401                	li	s0,0
    TEST_END();
    80023004:	0000f597          	auipc	a1,0xf
    80023008:	6b458593          	addi	a1,a1,1716 # 800326b8 <__func__.0+0x2d0>
    8002300c:	0000f517          	auipc	a0,0xf
    80023010:	75450513          	addi	a0,a0,1876 # 80032760 <__func__.0+0x378>
    80023014:	4b00c0ef          	jal	8002f4c4 <printf>
    80023018:	4511                	li	a0,4
    8002301a:	efbdd0ef          	jal	80000f14 <goto_priv>
    8002301e:	f58de0ef          	jal	80001776 <reset_state>

}
    80023022:	60e2                	ld	ra,24(sp)
    80023024:	8522                	mv	a0,s0
    80023026:	6442                	ld	s0,16(sp)
    80023028:	64a2                	ld	s1,8(sp)
    8002302a:	6105                	addi	sp,sp,32
    8002302c:	8082                	ret

000000008002302e <stateen_C_test_6>:


bool stateen_C_test_6(){
    8002302e:	1141                	addi	sp,sp,-16

    TEST_START();
    80023030:	0000f597          	auipc	a1,0xf
    80023034:	b1858593          	addi	a1,a1,-1256 # 80031b48 <__func__.31>
    80023038:	0000f517          	auipc	a0,0xf
    8002303c:	69050513          	addi	a0,a0,1680 # 800326c8 <__func__.0+0x2e0>
bool stateen_C_test_6(){
    80023040:	e406                	sd	ra,8(sp)
    80023042:	e022                	sd	s0,0(sp)
    TEST_START();
    80023044:	4800c0ef          	jal	8002f4c4 <printf>
    80023048:	4529                	li	a0,10
    8002304a:	1680b0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    8002304e:	4511                	li	a0,4
    80023050:	ec5dd0ef          	jal	80000f14 <goto_priv>
    //当mstateen.C=1,v=0时,可访问自定义寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80023054:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80023058:	60c0f073          	csrci	hstateen0,1

    goto_priv(PRIV_HS);
    8002305c:	450d                	li	a0,3
    8002305e:	eb7dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023062:	db7dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(0X5C0);
    80023066:	5c0027f3          	csrr	a5,0x5c0

    excpt_info();
    8002306a:	ff1dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    8002306e:	08c00593          	li	a1,140
    80023072:	00018617          	auipc	a2,0x18
    80023076:	f3660613          	addi	a2,a2,-202 # 8003afa8 <__func__.0+0x8bc0>
    8002307a:	0000f517          	auipc	a0,0xf
    8002307e:	66650513          	addi	a0,a0,1638 # 800326e0 <__func__.0+0x2f8>
    80023082:	4420c0ef          	jal	8002f4c4 <printf>
    80023086:	00039797          	auipc	a5,0x39
    8002308a:	f8b7c783          	lbu	a5,-117(a5) # 8005c011 <excpt+0x1>
    8002308e:	0000f597          	auipc	a1,0xf
    80023092:	61a58593          	addi	a1,a1,1562 # 800326a8 <__func__.0+0x2c0>
    80023096:	c789                	beqz	a5,800230a0 <stateen_C_test_6+0x72>
    80023098:	0000f597          	auipc	a1,0xf
    8002309c:	62058593          	addi	a1,a1,1568 # 800326b8 <__func__.0+0x2d0>
    800230a0:	0000f517          	auipc	a0,0xf
    800230a4:	65850513          	addi	a0,a0,1624 # 800326f8 <__func__.0+0x310>
    800230a8:	41c0c0ef          	jal	8002f4c4 <printf>
    800230ac:	00039797          	auipc	a5,0x39
    800230b0:	f657c783          	lbu	a5,-155(a5) # 8005c011 <excpt+0x1>
    800230b4:	e7e9                	bnez	a5,8002317e <stateen_C_test_6+0x150>
    800230b6:	4529                	li	a0,10
    800230b8:	0fa0b0ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    ); 

#endif

    goto_priv(PRIV_M);
    800230bc:	4511                	li	a0,4
    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    800230be:	00039417          	auipc	s0,0x39
    800230c2:	f5344403          	lbu	s0,-173(s0) # 8005c011 <excpt+0x1>
    goto_priv(PRIV_M);
    800230c6:	e4fdd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800230ca:	d4fdd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(0X5C3);
    800230ce:	5c3027f3          	csrr	a5,0x5c3

    excpt_info();
    800230d2:	f89dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    800230d6:	08c00593          	li	a1,140
    800230da:	00018617          	auipc	a2,0x18
    800230de:	f1e60613          	addi	a2,a2,-226 # 8003aff8 <__func__.0+0x8c10>
    800230e2:	0000f517          	auipc	a0,0xf
    800230e6:	5fe50513          	addi	a0,a0,1534 # 800326e0 <__func__.0+0x2f8>
    800230ea:	3da0c0ef          	jal	8002f4c4 <printf>
    800230ee:	00039797          	auipc	a5,0x39
    800230f2:	f237c783          	lbu	a5,-221(a5) # 8005c011 <excpt+0x1>
    800230f6:	0000f597          	auipc	a1,0xf
    800230fa:	5c258593          	addi	a1,a1,1474 # 800326b8 <__func__.0+0x2d0>
    800230fe:	e789                	bnez	a5,80023108 <stateen_C_test_6+0xda>
    80023100:	0000f597          	auipc	a1,0xf
    80023104:	5a858593          	addi	a1,a1,1448 # 800326a8 <__func__.0+0x2c0>
    80023108:	0000f517          	auipc	a0,0xf
    8002310c:	5f050513          	addi	a0,a0,1520 # 800326f8 <__func__.0+0x310>
    80023110:	3b40c0ef          	jal	8002f4c4 <printf>
    80023114:	00039797          	auipc	a5,0x39
    80023118:	efd7c783          	lbu	a5,-259(a5) # 8005c011 <excpt+0x1>
    8002311c:	e7b1                	bnez	a5,80023168 <stateen_C_test_6+0x13a>
    8002311e:	4529                	li	a0,10
    80023120:	0920b0ef          	jal	8002e1b2 <putchar>
    80023124:	e815                	bnez	s0,80023158 <stateen_C_test_6+0x12a>
    80023126:	00039797          	auipc	a5,0x39
    8002312a:	eeb7c783          	lbu	a5,-277(a5) # 8005c011 <excpt+0x1>
    8002312e:	c79d                	beqz	a5,8002315c <stateen_C_test_6+0x12e>
        excpt.triggered == false
    ); 

    TEST_END();
    80023130:	0000f597          	auipc	a1,0xf
    80023134:	58858593          	addi	a1,a1,1416 # 800326b8 <__func__.0+0x2d0>
    80023138:	0000f517          	auipc	a0,0xf
    8002313c:	62850513          	addi	a0,a0,1576 # 80032760 <__func__.0+0x378>
    80023140:	3840c0ef          	jal	8002f4c4 <printf>
    80023144:	4511                	li	a0,4
    80023146:	dcfdd0ef          	jal	80000f14 <goto_priv>
    8002314a:	e2cde0ef          	jal	80001776 <reset_state>

}
    8002314e:	60a2                	ld	ra,8(sp)
    80023150:	8522                	mv	a0,s0
    80023152:	6402                	ld	s0,0(sp)
    80023154:	0141                	addi	sp,sp,16
    80023156:	8082                	ret
    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    80023158:	4401                	li	s0,0
    8002315a:	bfd9                	j	80023130 <stateen_C_test_6+0x102>
    8002315c:	4405                	li	s0,1
    TEST_END();
    8002315e:	0000f597          	auipc	a1,0xf
    80023162:	54a58593          	addi	a1,a1,1354 # 800326a8 <__func__.0+0x2c0>
    80023166:	bfc9                	j	80023138 <stateen_C_test_6+0x10a>
    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    80023168:	0000f517          	auipc	a0,0xf
    8002316c:	59850513          	addi	a0,a0,1432 # 80032700 <__func__.0+0x318>
    80023170:	3540c0ef          	jal	8002f4c4 <printf>
    80023174:	02900513          	li	a0,41
    80023178:	03a0b0ef          	jal	8002e1b2 <putchar>
    8002317c:	b74d                	j	8002311e <stateen_C_test_6+0xf0>
    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    8002317e:	0000f517          	auipc	a0,0xf
    80023182:	58250513          	addi	a0,a0,1410 # 80032700 <__func__.0+0x318>
    80023186:	33e0c0ef          	jal	8002f4c4 <printf>
    8002318a:	02900513          	li	a0,41
    8002318e:	0240b0ef          	jal	8002e1b2 <putchar>
    80023192:	b715                	j	800230b6 <stateen_C_test_6+0x88>

0000000080023194 <stateen_C_test_7>:


bool stateen_C_test_7(){
    80023194:	1141                	addi	sp,sp,-16

    TEST_START();
    80023196:	0000f597          	auipc	a1,0xf
    8002319a:	9ca58593          	addi	a1,a1,-1590 # 80031b60 <__func__.30>
    8002319e:	0000f517          	auipc	a0,0xf
    800231a2:	52a50513          	addi	a0,a0,1322 # 800326c8 <__func__.0+0x2e0>
bool stateen_C_test_7(){
    800231a6:	e406                	sd	ra,8(sp)
    800231a8:	e022                	sd	s0,0(sp)
    TEST_START();
    800231aa:	31a0c0ef          	jal	8002f4c4 <printf>
    800231ae:	4529                	li	a0,10
    800231b0:	0020b0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    800231b4:	4511                	li	a0,4
    800231b6:	d5fdd0ef          	jal	80000f14 <goto_priv>
    //当mstateen.C=1 hstateen.C=1,v=1 时可访问自定义寄存器(vs,vu自定义寄存器是哪些)
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    800231ba:	30c0e073          	csrsi	mstateen0,1
    CSRS(CSR_HSTATEEN0 , MSTATEEN_C);
    800231be:	60c0e073          	csrsi	hstateen0,1

    goto_priv(PRIV_VS);
    800231c2:	4509                	li	a0,2
    800231c4:	d51dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800231c8:	c51dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(0X5C1);
    800231cc:	5c1027f3          	csrr	a5,0x5c1

    excpt_info();
    800231d0:	e8bdd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800231d4:	08c00593          	li	a1,140
    800231d8:	00018617          	auipc	a2,0x18
    800231dc:	e7060613          	addi	a2,a2,-400 # 8003b048 <__func__.0+0x8c60>
    800231e0:	0000f517          	auipc	a0,0xf
    800231e4:	50050513          	addi	a0,a0,1280 # 800326e0 <__func__.0+0x2f8>
    800231e8:	2dc0c0ef          	jal	8002f4c4 <printf>
    800231ec:	00039797          	auipc	a5,0x39
    800231f0:	e257c783          	lbu	a5,-475(a5) # 8005c011 <excpt+0x1>
    800231f4:	0000f597          	auipc	a1,0xf
    800231f8:	4b458593          	addi	a1,a1,1204 # 800326a8 <__func__.0+0x2c0>
    800231fc:	c789                	beqz	a5,80023206 <stateen_C_test_7+0x72>
    800231fe:	0000f597          	auipc	a1,0xf
    80023202:	4ba58593          	addi	a1,a1,1210 # 800326b8 <__func__.0+0x2d0>
    80023206:	0000f517          	auipc	a0,0xf
    8002320a:	4f250513          	addi	a0,a0,1266 # 800326f8 <__func__.0+0x310>
    8002320e:	2b60c0ef          	jal	8002f4c4 <printf>
    80023212:	00039797          	auipc	a5,0x39
    80023216:	dff7c783          	lbu	a5,-513(a5) # 8005c011 <excpt+0x1>
    8002321a:	e7e9                	bnez	a5,800232e4 <stateen_C_test_7+0x150>
    8002321c:	4529                	li	a0,10
    8002321e:	7950a0ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80023222:	4501                	li	a0,0
    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    80023224:	00039417          	auipc	s0,0x39
    80023228:	ded44403          	lbu	s0,-531(s0) # 8005c011 <excpt+0x1>
    goto_priv(PRIV_VU);
    8002322c:	ce9dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023230:	be9dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(0X5C2);
    80023234:	5c2027f3          	csrr	a5,0x5c2

    excpt_info();
    80023238:	e23dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    8002323c:	08c00593          	li	a1,140
    80023240:	00018617          	auipc	a2,0x18
    80023244:	e5860613          	addi	a2,a2,-424 # 8003b098 <__func__.0+0x8cb0>
    80023248:	0000f517          	auipc	a0,0xf
    8002324c:	49850513          	addi	a0,a0,1176 # 800326e0 <__func__.0+0x2f8>
    80023250:	2740c0ef          	jal	8002f4c4 <printf>
    80023254:	00039797          	auipc	a5,0x39
    80023258:	dbd7c783          	lbu	a5,-579(a5) # 8005c011 <excpt+0x1>
    8002325c:	0000f597          	auipc	a1,0xf
    80023260:	45c58593          	addi	a1,a1,1116 # 800326b8 <__func__.0+0x2d0>
    80023264:	e789                	bnez	a5,8002326e <stateen_C_test_7+0xda>
    80023266:	0000f597          	auipc	a1,0xf
    8002326a:	44258593          	addi	a1,a1,1090 # 800326a8 <__func__.0+0x2c0>
    8002326e:	0000f517          	auipc	a0,0xf
    80023272:	48a50513          	addi	a0,a0,1162 # 800326f8 <__func__.0+0x310>
    80023276:	24e0c0ef          	jal	8002f4c4 <printf>
    8002327a:	00039797          	auipc	a5,0x39
    8002327e:	d977c783          	lbu	a5,-617(a5) # 8005c011 <excpt+0x1>
    80023282:	e7b1                	bnez	a5,800232ce <stateen_C_test_7+0x13a>
    80023284:	4529                	li	a0,10
    80023286:	72d0a0ef          	jal	8002e1b2 <putchar>
    8002328a:	e815                	bnez	s0,800232be <stateen_C_test_7+0x12a>
    8002328c:	00039797          	auipc	a5,0x39
    80023290:	d857c783          	lbu	a5,-635(a5) # 8005c011 <excpt+0x1>
    80023294:	c79d                	beqz	a5,800232c2 <stateen_C_test_7+0x12e>
        excpt.triggered == false
    ); 
    TEST_END();
    80023296:	0000f597          	auipc	a1,0xf
    8002329a:	42258593          	addi	a1,a1,1058 # 800326b8 <__func__.0+0x2d0>
    8002329e:	0000f517          	auipc	a0,0xf
    800232a2:	4c250513          	addi	a0,a0,1218 # 80032760 <__func__.0+0x378>
    800232a6:	21e0c0ef          	jal	8002f4c4 <printf>
    800232aa:	4511                	li	a0,4
    800232ac:	c69dd0ef          	jal	80000f14 <goto_priv>
    800232b0:	cc6de0ef          	jal	80001776 <reset_state>
}
    800232b4:	60a2                	ld	ra,8(sp)
    800232b6:	8522                	mv	a0,s0
    800232b8:	6402                	ld	s0,0(sp)
    800232ba:	0141                	addi	sp,sp,16
    800232bc:	8082                	ret
    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800232be:	4401                	li	s0,0
    800232c0:	bfd9                	j	80023296 <stateen_C_test_7+0x102>
    800232c2:	4405                	li	s0,1
    TEST_END();
    800232c4:	0000f597          	auipc	a1,0xf
    800232c8:	3e458593          	addi	a1,a1,996 # 800326a8 <__func__.0+0x2c0>
    800232cc:	bfc9                	j	8002329e <stateen_C_test_7+0x10a>
    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800232ce:	0000f517          	auipc	a0,0xf
    800232d2:	43250513          	addi	a0,a0,1074 # 80032700 <__func__.0+0x318>
    800232d6:	1ee0c0ef          	jal	8002f4c4 <printf>
    800232da:	02900513          	li	a0,41
    800232de:	6d50a0ef          	jal	8002e1b2 <putchar>
    800232e2:	b74d                	j	80023284 <stateen_C_test_7+0xf0>
    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800232e4:	0000f517          	auipc	a0,0xf
    800232e8:	41c50513          	addi	a0,a0,1052 # 80032700 <__func__.0+0x318>
    800232ec:	1d80c0ef          	jal	8002f4c4 <printf>
    800232f0:	02900513          	li	a0,41
    800232f4:	6bf0a0ef          	jal	8002e1b2 <putchar>
    800232f8:	b715                	j	8002321c <stateen_C_test_7+0x88>

00000000800232fa <stateen_IMSIC_test_1>:

//----



bool stateen_IMSIC_test_1(){
    800232fa:	1101                	addi	sp,sp,-32

    TEST_START();
    800232fc:	0000f597          	auipc	a1,0xf
    80023300:	87c58593          	addi	a1,a1,-1924 # 80031b78 <__func__.29>
    80023304:	0000f517          	auipc	a0,0xf
    80023308:	3c450513          	addi	a0,a0,964 # 800326c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_1(){
    8002330c:	ec06                	sd	ra,24(sp)
    8002330e:	e822                	sd	s0,16(sp)
    80023310:	e426                	sd	s1,8(sp)
    TEST_START();
    80023312:	1b20c0ef          	jal	8002f4c4 <printf>
    80023316:	4529                	li	a0,10
    80023318:	69b0a0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    8002331c:	4511                	li	a0,4
    8002331e:	bf7dd0ef          	jal	80000f14 <goto_priv>
    //当mstateen.IMSIC=0,hu mode 不可访问stopei、vstopei寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023322:	4785                	li	a5,1
    80023324:	17ea                	slli	a5,a5,0x3a
    80023326:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    8002332a:	4505                	li	a0,1
    8002332c:	be9dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023330:	ae9dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023334:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023338:	d23dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("HU mode accesss stopei register cause to illegal except when mstateen.imsic=0",
    8002333c:	08c00593          	li	a1,140
    80023340:	00018617          	auipc	a2,0x18
    80023344:	da860613          	addi	a2,a2,-600 # 8003b0e8 <__func__.0+0x8d00>
    80023348:	0000f517          	auipc	a0,0xf
    8002334c:	39850513          	addi	a0,a0,920 # 800326e0 <__func__.0+0x2f8>
    80023350:	1740c0ef          	jal	8002f4c4 <printf>
    80023354:	00039797          	auipc	a5,0x39
    80023358:	cbd7c783          	lbu	a5,-835(a5) # 8005c011 <excpt+0x1>
    8002335c:	00039497          	auipc	s1,0x39
    80023360:	cb448493          	addi	s1,s1,-844 # 8005c010 <excpt>
    80023364:	0000f597          	auipc	a1,0xf
    80023368:	35458593          	addi	a1,a1,852 # 800326b8 <__func__.0+0x2d0>
    8002336c:	cf89                	beqz	a5,80023386 <stateen_IMSIC_test_1+0x8c>
    8002336e:	6498                	ld	a4,8(s1)
    80023370:	4789                	li	a5,2
    80023372:	0000f597          	auipc	a1,0xf
    80023376:	33658593          	addi	a1,a1,822 # 800326a8 <__func__.0+0x2c0>
    8002337a:	00f70663          	beq	a4,a5,80023386 <stateen_IMSIC_test_1+0x8c>
    8002337e:	0000f597          	auipc	a1,0xf
    80023382:	33a58593          	addi	a1,a1,826 # 800326b8 <__func__.0+0x2d0>
    80023386:	0000f517          	auipc	a0,0xf
    8002338a:	37250513          	addi	a0,a0,882 # 800326f8 <__func__.0+0x310>
    8002338e:	1360c0ef          	jal	8002f4c4 <printf>
    80023392:	00039797          	auipc	a5,0x39
    80023396:	c7f7c783          	lbu	a5,-897(a5) # 8005c011 <excpt+0x1>
    8002339a:	c789                	beqz	a5,800233a4 <stateen_IMSIC_test_1+0xaa>
    8002339c:	6498                	ld	a4,8(s1)
    8002339e:	4789                	li	a5,2
    800233a0:	00f70c63          	beq	a4,a5,800233b8 <stateen_IMSIC_test_1+0xbe>
    800233a4:	0000f517          	auipc	a0,0xf
    800233a8:	35c50513          	addi	a0,a0,860 # 80032700 <__func__.0+0x318>
    800233ac:	1180c0ef          	jal	8002f4c4 <printf>
    800233b0:	02900513          	li	a0,41
    800233b4:	5ff0a0ef          	jal	8002e1b2 <putchar>
    800233b8:	4529                	li	a0,10
    800233ba:	5f90a0ef          	jal	8002e1b2 <putchar>
    800233be:	00039797          	auipc	a5,0x39
    800233c2:	c537c783          	lbu	a5,-941(a5) # 8005c011 <excpt+0x1>
    800233c6:	4401                	li	s0,0
    800233c8:	c789                	beqz	a5,800233d2 <stateen_IMSIC_test_1+0xd8>
    800233ca:	6480                	ld	s0,8(s1)
    800233cc:	1479                	addi	s0,s0,-2
    800233ce:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    800233d2:	4505                	li	a0,1
    800233d4:	b41dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800233d8:	a41dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800233dc:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800233e0:	c7bdd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    800233e4:	08c00593          	li	a1,140
    800233e8:	00018617          	auipc	a2,0x18
    800233ec:	d5060613          	addi	a2,a2,-688 # 8003b138 <__func__.0+0x8d50>
    800233f0:	0000f517          	auipc	a0,0xf
    800233f4:	2f050513          	addi	a0,a0,752 # 800326e0 <__func__.0+0x2f8>
    800233f8:	0cc0c0ef          	jal	8002f4c4 <printf>
    800233fc:	00039797          	auipc	a5,0x39
    80023400:	c157c783          	lbu	a5,-1003(a5) # 8005c011 <excpt+0x1>
    80023404:	0000f597          	auipc	a1,0xf
    80023408:	2b458593          	addi	a1,a1,692 # 800326b8 <__func__.0+0x2d0>
    8002340c:	cf89                	beqz	a5,80023426 <stateen_IMSIC_test_1+0x12c>
    8002340e:	6498                	ld	a4,8(s1)
    80023410:	4789                	li	a5,2
    80023412:	0000f597          	auipc	a1,0xf
    80023416:	29658593          	addi	a1,a1,662 # 800326a8 <__func__.0+0x2c0>
    8002341a:	00f70663          	beq	a4,a5,80023426 <stateen_IMSIC_test_1+0x12c>
    8002341e:	0000f597          	auipc	a1,0xf
    80023422:	29a58593          	addi	a1,a1,666 # 800326b8 <__func__.0+0x2d0>
    80023426:	0000f517          	auipc	a0,0xf
    8002342a:	2d250513          	addi	a0,a0,722 # 800326f8 <__func__.0+0x310>
    8002342e:	0960c0ef          	jal	8002f4c4 <printf>
    80023432:	00039797          	auipc	a5,0x39
    80023436:	bdf7c783          	lbu	a5,-1057(a5) # 8005c011 <excpt+0x1>
    8002343a:	c789                	beqz	a5,80023444 <stateen_IMSIC_test_1+0x14a>
    8002343c:	6498                	ld	a4,8(s1)
    8002343e:	4789                	li	a5,2
    80023440:	00f70c63          	beq	a4,a5,80023458 <stateen_IMSIC_test_1+0x15e>
    80023444:	0000f517          	auipc	a0,0xf
    80023448:	2bc50513          	addi	a0,a0,700 # 80032700 <__func__.0+0x318>
    8002344c:	0780c0ef          	jal	8002f4c4 <printf>
    80023450:	02900513          	li	a0,41
    80023454:	55f0a0ef          	jal	8002e1b2 <putchar>
    80023458:	4529                	li	a0,10
    8002345a:	5590a0ef          	jal	8002e1b2 <putchar>
    8002345e:	c015                	beqz	s0,80023482 <stateen_IMSIC_test_1+0x188>
    80023460:	00039417          	auipc	s0,0x39
    80023464:	bb144403          	lbu	s0,-1103(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80023468:	0000f597          	auipc	a1,0xf
    8002346c:	25058593          	addi	a1,a1,592 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023470:	cc11                	beqz	s0,8002348c <stateen_IMSIC_test_1+0x192>
    80023472:	6498                	ld	a4,8(s1)
    80023474:	4789                	li	a5,2
    TEST_END();
    80023476:	0000f597          	auipc	a1,0xf
    8002347a:	23258593          	addi	a1,a1,562 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    8002347e:	00f70763          	beq	a4,a5,8002348c <stateen_IMSIC_test_1+0x192>
    80023482:	4401                	li	s0,0
    TEST_END();
    80023484:	0000f597          	auipc	a1,0xf
    80023488:	23458593          	addi	a1,a1,564 # 800326b8 <__func__.0+0x2d0>
    8002348c:	0000f517          	auipc	a0,0xf
    80023490:	2d450513          	addi	a0,a0,724 # 80032760 <__func__.0+0x378>
    80023494:	0300c0ef          	jal	8002f4c4 <printf>
    80023498:	4511                	li	a0,4
    8002349a:	a7bdd0ef          	jal	80000f14 <goto_priv>
    8002349e:	ad8de0ef          	jal	80001776 <reset_state>

}
    800234a2:	60e2                	ld	ra,24(sp)
    800234a4:	8522                	mv	a0,s0
    800234a6:	6442                	ld	s0,16(sp)
    800234a8:	64a2                	ld	s1,8(sp)
    800234aa:	6105                	addi	sp,sp,32
    800234ac:	8082                	ret

00000000800234ae <stateen_IMSIC_test_2>:

bool stateen_IMSIC_test_2(){
    800234ae:	1101                	addi	sp,sp,-32

    TEST_START();
    800234b0:	0000e597          	auipc	a1,0xe
    800234b4:	6e058593          	addi	a1,a1,1760 # 80031b90 <__func__.28>
    800234b8:	0000f517          	auipc	a0,0xf
    800234bc:	21050513          	addi	a0,a0,528 # 800326c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_2(){
    800234c0:	ec06                	sd	ra,24(sp)
    800234c2:	e822                	sd	s0,16(sp)
    800234c4:	e426                	sd	s1,8(sp)
    TEST_START();
    800234c6:	7ff0b0ef          	jal	8002f4c4 <printf>
    800234ca:	4529                	li	a0,10
    800234cc:	4e70a0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    800234d0:	4511                	li	a0,4
    800234d2:	a43dd0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800234d6:	4785                	li	a5,1
    800234d8:	17ea                	slli	a5,a5,0x3a
    800234da:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    800234de:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.IMSIC=1,hstateen.IMSIC=0,v=1时,不可访问stopei、vstopei寄存器
    goto_priv(PRIV_VU);
    800234e2:	4501                	li	a0,0
    800234e4:	a31dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800234e8:	931dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800234ec:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800234f0:	b6bdd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("VU mode accesss stopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800234f4:	08c00593          	li	a1,140
    800234f8:	00018617          	auipc	a2,0x18
    800234fc:	c9060613          	addi	a2,a2,-880 # 8003b188 <__func__.0+0x8da0>
    80023500:	0000f517          	auipc	a0,0xf
    80023504:	1e050513          	addi	a0,a0,480 # 800326e0 <__func__.0+0x2f8>
    80023508:	7bd0b0ef          	jal	8002f4c4 <printf>
    8002350c:	00039797          	auipc	a5,0x39
    80023510:	b057c783          	lbu	a5,-1275(a5) # 8005c011 <excpt+0x1>
    80023514:	00039497          	auipc	s1,0x39
    80023518:	afc48493          	addi	s1,s1,-1284 # 8005c010 <excpt>
    8002351c:	0000f597          	auipc	a1,0xf
    80023520:	19c58593          	addi	a1,a1,412 # 800326b8 <__func__.0+0x2d0>
    80023524:	cf89                	beqz	a5,8002353e <stateen_IMSIC_test_2+0x90>
    80023526:	6498                	ld	a4,8(s1)
    80023528:	47d9                	li	a5,22
    8002352a:	0000f597          	auipc	a1,0xf
    8002352e:	17e58593          	addi	a1,a1,382 # 800326a8 <__func__.0+0x2c0>
    80023532:	00f70663          	beq	a4,a5,8002353e <stateen_IMSIC_test_2+0x90>
    80023536:	0000f597          	auipc	a1,0xf
    8002353a:	18258593          	addi	a1,a1,386 # 800326b8 <__func__.0+0x2d0>
    8002353e:	0000f517          	auipc	a0,0xf
    80023542:	1ba50513          	addi	a0,a0,442 # 800326f8 <__func__.0+0x310>
    80023546:	77f0b0ef          	jal	8002f4c4 <printf>
    8002354a:	00039797          	auipc	a5,0x39
    8002354e:	ac77c783          	lbu	a5,-1337(a5) # 8005c011 <excpt+0x1>
    80023552:	c789                	beqz	a5,8002355c <stateen_IMSIC_test_2+0xae>
    80023554:	6498                	ld	a4,8(s1)
    80023556:	47d9                	li	a5,22
    80023558:	00f70c63          	beq	a4,a5,80023570 <stateen_IMSIC_test_2+0xc2>
    8002355c:	0000f517          	auipc	a0,0xf
    80023560:	1a450513          	addi	a0,a0,420 # 80032700 <__func__.0+0x318>
    80023564:	7610b0ef          	jal	8002f4c4 <printf>
    80023568:	02900513          	li	a0,41
    8002356c:	4470a0ef          	jal	8002e1b2 <putchar>
    80023570:	4529                	li	a0,10
    80023572:	4410a0ef          	jal	8002e1b2 <putchar>
    80023576:	00039797          	auipc	a5,0x39
    8002357a:	a9b7c783          	lbu	a5,-1381(a5) # 8005c011 <excpt+0x1>
    8002357e:	4401                	li	s0,0
    80023580:	c789                	beqz	a5,8002358a <stateen_IMSIC_test_2+0xdc>
    80023582:	6480                	ld	s0,8(s1)
    80023584:	1429                	addi	s0,s0,-22
    80023586:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8002358a:	4501                	li	a0,0
    8002358c:	989dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023590:	889dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023594:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023598:	ac3dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    8002359c:	08c00593          	li	a1,140
    800235a0:	00018617          	auipc	a2,0x18
    800235a4:	c4060613          	addi	a2,a2,-960 # 8003b1e0 <__func__.0+0x8df8>
    800235a8:	0000f517          	auipc	a0,0xf
    800235ac:	13850513          	addi	a0,a0,312 # 800326e0 <__func__.0+0x2f8>
    800235b0:	7150b0ef          	jal	8002f4c4 <printf>
    800235b4:	00039797          	auipc	a5,0x39
    800235b8:	a5d7c783          	lbu	a5,-1443(a5) # 8005c011 <excpt+0x1>
    800235bc:	0000f597          	auipc	a1,0xf
    800235c0:	0fc58593          	addi	a1,a1,252 # 800326b8 <__func__.0+0x2d0>
    800235c4:	cf89                	beqz	a5,800235de <stateen_IMSIC_test_2+0x130>
    800235c6:	6498                	ld	a4,8(s1)
    800235c8:	47d9                	li	a5,22
    800235ca:	0000f597          	auipc	a1,0xf
    800235ce:	0de58593          	addi	a1,a1,222 # 800326a8 <__func__.0+0x2c0>
    800235d2:	00f70663          	beq	a4,a5,800235de <stateen_IMSIC_test_2+0x130>
    800235d6:	0000f597          	auipc	a1,0xf
    800235da:	0e258593          	addi	a1,a1,226 # 800326b8 <__func__.0+0x2d0>
    800235de:	0000f517          	auipc	a0,0xf
    800235e2:	11a50513          	addi	a0,a0,282 # 800326f8 <__func__.0+0x310>
    800235e6:	6df0b0ef          	jal	8002f4c4 <printf>
    800235ea:	00039797          	auipc	a5,0x39
    800235ee:	a277c783          	lbu	a5,-1497(a5) # 8005c011 <excpt+0x1>
    800235f2:	c789                	beqz	a5,800235fc <stateen_IMSIC_test_2+0x14e>
    800235f4:	6498                	ld	a4,8(s1)
    800235f6:	47d9                	li	a5,22
    800235f8:	00f70c63          	beq	a4,a5,80023610 <stateen_IMSIC_test_2+0x162>
    800235fc:	0000f517          	auipc	a0,0xf
    80023600:	10450513          	addi	a0,a0,260 # 80032700 <__func__.0+0x318>
    80023604:	6c10b0ef          	jal	8002f4c4 <printf>
    80023608:	02900513          	li	a0,41
    8002360c:	3a70a0ef          	jal	8002e1b2 <putchar>
    80023610:	4529                	li	a0,10
    80023612:	3a10a0ef          	jal	8002e1b2 <putchar>
    80023616:	c015                	beqz	s0,8002363a <stateen_IMSIC_test_2+0x18c>
    80023618:	00039417          	auipc	s0,0x39
    8002361c:	9f944403          	lbu	s0,-1543(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80023620:	0000f597          	auipc	a1,0xf
    80023624:	09858593          	addi	a1,a1,152 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023628:	cc11                	beqz	s0,80023644 <stateen_IMSIC_test_2+0x196>
    8002362a:	6498                	ld	a4,8(s1)
    8002362c:	47d9                	li	a5,22
    TEST_END();
    8002362e:	0000f597          	auipc	a1,0xf
    80023632:	07a58593          	addi	a1,a1,122 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023636:	00f70763          	beq	a4,a5,80023644 <stateen_IMSIC_test_2+0x196>
    8002363a:	4401                	li	s0,0
    TEST_END();
    8002363c:	0000f597          	auipc	a1,0xf
    80023640:	07c58593          	addi	a1,a1,124 # 800326b8 <__func__.0+0x2d0>
    80023644:	0000f517          	auipc	a0,0xf
    80023648:	11c50513          	addi	a0,a0,284 # 80032760 <__func__.0+0x378>
    8002364c:	6790b0ef          	jal	8002f4c4 <printf>
    80023650:	4511                	li	a0,4
    80023652:	8c3dd0ef          	jal	80000f14 <goto_priv>
    80023656:	920de0ef          	jal	80001776 <reset_state>

}
    8002365a:	60e2                	ld	ra,24(sp)
    8002365c:	8522                	mv	a0,s0
    8002365e:	6442                	ld	s0,16(sp)
    80023660:	64a2                	ld	s1,8(sp)
    80023662:	6105                	addi	sp,sp,32
    80023664:	8082                	ret

0000000080023666 <stateen_IMSIC_test_3>:

bool stateen_IMSIC_test_3(){
    80023666:	1141                	addi	sp,sp,-16

    //当mstateen.IMSIC=0,m mode 可访问stopei、vstopei寄存器

    TEST_START();
    80023668:	0000e597          	auipc	a1,0xe
    8002366c:	54058593          	addi	a1,a1,1344 # 80031ba8 <__func__.27>
    80023670:	0000f517          	auipc	a0,0xf
    80023674:	05850513          	addi	a0,a0,88 # 800326c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_3(){
    80023678:	e406                	sd	ra,8(sp)
    8002367a:	e022                	sd	s0,0(sp)
    TEST_START();
    8002367c:	6490b0ef          	jal	8002f4c4 <printf>
    80023680:	4529                	li	a0,10
    80023682:	3310a0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80023686:	4511                	li	a0,4
    80023688:	88ddd0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    8002368c:	4785                	li	a5,1
    8002368e:	17ea                	slli	a5,a5,0x3a
    80023690:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    80023694:	4511                	li	a0,4
    80023696:	87fdd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002369a:	f7edd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    8002369e:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800236a2:	9b9dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    800236a6:	08c00593          	li	a1,140
    800236aa:	00018617          	auipc	a2,0x18
    800236ae:	b8e60613          	addi	a2,a2,-1138 # 8003b238 <__func__.0+0x8e50>
    800236b2:	0000f517          	auipc	a0,0xf
    800236b6:	02e50513          	addi	a0,a0,46 # 800326e0 <__func__.0+0x2f8>
    800236ba:	60b0b0ef          	jal	8002f4c4 <printf>
    800236be:	00039797          	auipc	a5,0x39
    800236c2:	9537c783          	lbu	a5,-1709(a5) # 8005c011 <excpt+0x1>
    800236c6:	0000f597          	auipc	a1,0xf
    800236ca:	fe258593          	addi	a1,a1,-30 # 800326a8 <__func__.0+0x2c0>
    800236ce:	c789                	beqz	a5,800236d8 <stateen_IMSIC_test_3+0x72>
    800236d0:	0000f597          	auipc	a1,0xf
    800236d4:	fe858593          	addi	a1,a1,-24 # 800326b8 <__func__.0+0x2d0>
    800236d8:	0000f517          	auipc	a0,0xf
    800236dc:	02050513          	addi	a0,a0,32 # 800326f8 <__func__.0+0x310>
    800236e0:	5e50b0ef          	jal	8002f4c4 <printf>
    800236e4:	00039797          	auipc	a5,0x39
    800236e8:	92d7c783          	lbu	a5,-1747(a5) # 8005c011 <excpt+0x1>
    800236ec:	e7e9                	bnez	a5,800237b6 <stateen_IMSIC_test_3+0x150>
    800236ee:	4529                	li	a0,10
    800236f0:	2c30a0ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800236f4:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    800236f6:	00039417          	auipc	s0,0x39
    800236fa:	91b44403          	lbu	s0,-1765(s0) # 8005c011 <excpt+0x1>
    goto_priv(PRIV_M);
    800236fe:	817dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023702:	f16dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023706:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    8002370a:	951dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    8002370e:	08c00593          	li	a1,140
    80023712:	00018617          	auipc	a2,0x18
    80023716:	b6660613          	addi	a2,a2,-1178 # 8003b278 <__func__.0+0x8e90>
    8002371a:	0000f517          	auipc	a0,0xf
    8002371e:	fc650513          	addi	a0,a0,-58 # 800326e0 <__func__.0+0x2f8>
    80023722:	5a30b0ef          	jal	8002f4c4 <printf>
    80023726:	00039797          	auipc	a5,0x39
    8002372a:	8eb7c783          	lbu	a5,-1813(a5) # 8005c011 <excpt+0x1>
    8002372e:	0000f597          	auipc	a1,0xf
    80023732:	f8a58593          	addi	a1,a1,-118 # 800326b8 <__func__.0+0x2d0>
    80023736:	e789                	bnez	a5,80023740 <stateen_IMSIC_test_3+0xda>
    80023738:	0000f597          	auipc	a1,0xf
    8002373c:	f7058593          	addi	a1,a1,-144 # 800326a8 <__func__.0+0x2c0>
    80023740:	0000f517          	auipc	a0,0xf
    80023744:	fb850513          	addi	a0,a0,-72 # 800326f8 <__func__.0+0x310>
    80023748:	57d0b0ef          	jal	8002f4c4 <printf>
    8002374c:	00039797          	auipc	a5,0x39
    80023750:	8c57c783          	lbu	a5,-1851(a5) # 8005c011 <excpt+0x1>
    80023754:	e7b1                	bnez	a5,800237a0 <stateen_IMSIC_test_3+0x13a>
    80023756:	4529                	li	a0,10
    80023758:	25b0a0ef          	jal	8002e1b2 <putchar>
    8002375c:	e815                	bnez	s0,80023790 <stateen_IMSIC_test_3+0x12a>
    8002375e:	00039797          	auipc	a5,0x39
    80023762:	8b37c783          	lbu	a5,-1869(a5) # 8005c011 <excpt+0x1>
    80023766:	c79d                	beqz	a5,80023794 <stateen_IMSIC_test_3+0x12e>
        excpt.triggered == false
    ); 
    TEST_END();
    80023768:	0000f597          	auipc	a1,0xf
    8002376c:	f5058593          	addi	a1,a1,-176 # 800326b8 <__func__.0+0x2d0>
    80023770:	0000f517          	auipc	a0,0xf
    80023774:	ff050513          	addi	a0,a0,-16 # 80032760 <__func__.0+0x378>
    80023778:	54d0b0ef          	jal	8002f4c4 <printf>
    8002377c:	4511                	li	a0,4
    8002377e:	f96dd0ef          	jal	80000f14 <goto_priv>
    80023782:	ff5dd0ef          	jal	80001776 <reset_state>

}
    80023786:	60a2                	ld	ra,8(sp)
    80023788:	8522                	mv	a0,s0
    8002378a:	6402                	ld	s0,0(sp)
    8002378c:	0141                	addi	sp,sp,16
    8002378e:	8082                	ret
    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    80023790:	4401                	li	s0,0
    80023792:	bfd9                	j	80023768 <stateen_IMSIC_test_3+0x102>
    80023794:	4405                	li	s0,1
    TEST_END();
    80023796:	0000f597          	auipc	a1,0xf
    8002379a:	f1258593          	addi	a1,a1,-238 # 800326a8 <__func__.0+0x2c0>
    8002379e:	bfc9                	j	80023770 <stateen_IMSIC_test_3+0x10a>
    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    800237a0:	0000f517          	auipc	a0,0xf
    800237a4:	f6050513          	addi	a0,a0,-160 # 80032700 <__func__.0+0x318>
    800237a8:	51d0b0ef          	jal	8002f4c4 <printf>
    800237ac:	02900513          	li	a0,41
    800237b0:	2030a0ef          	jal	8002e1b2 <putchar>
    800237b4:	b74d                	j	80023756 <stateen_IMSIC_test_3+0xf0>
    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    800237b6:	0000f517          	auipc	a0,0xf
    800237ba:	f4a50513          	addi	a0,a0,-182 # 80032700 <__func__.0+0x318>
    800237be:	5070b0ef          	jal	8002f4c4 <printf>
    800237c2:	02900513          	li	a0,41
    800237c6:	1ed0a0ef          	jal	8002e1b2 <putchar>
    800237ca:	b715                	j	800236ee <stateen_IMSIC_test_3+0x88>

00000000800237cc <stateen_IMSIC_test_4>:

bool stateen_IMSIC_test_4(){
    800237cc:	1101                	addi	sp,sp,-32

    //当mstateen.IMSIC=1,hstateen.IMSIC=0,v=1时不可访问stopei、vstopei寄存器

    TEST_START();
    800237ce:	0000e597          	auipc	a1,0xe
    800237d2:	3f258593          	addi	a1,a1,1010 # 80031bc0 <__func__.26>
    800237d6:	0000f517          	auipc	a0,0xf
    800237da:	ef250513          	addi	a0,a0,-270 # 800326c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_4(){
    800237de:	ec06                	sd	ra,24(sp)
    800237e0:	e822                	sd	s0,16(sp)
    800237e2:	e426                	sd	s1,8(sp)
    TEST_START();
    800237e4:	4e10b0ef          	jal	8002f4c4 <printf>
    800237e8:	4529                	li	a0,10
    800237ea:	1c90a0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    800237ee:	4511                	li	a0,4
    800237f0:	f24dd0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800237f4:	4785                	li	a5,1
    800237f6:	17ea                	slli	a5,a5,0x3a
    800237f8:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    800237fc:	60c7b073          	csrc	hstateen0,a5

    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80023800:	30c025f3          	csrr	a1,mstateen0
    80023804:	00017517          	auipc	a0,0x17
    80023808:	6e450513          	addi	a0,a0,1764 # 8003aee8 <__func__.0+0x8b00>
    8002380c:	4b90b0ef          	jal	8002f4c4 <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80023810:	60c025f3          	csrr	a1,hstateen0
    80023814:	00017517          	auipc	a0,0x17
    80023818:	6e450513          	addi	a0,a0,1764 # 8003aef8 <__func__.0+0x8b10>
    8002381c:	4a90b0ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);
    80023820:	4509                	li	a0,2
    80023822:	ef2dd0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80023826:	df2dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    8002382a:	15c027f3          	csrr	a5,stopei

    excpt_info();
    8002382e:	82ddd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss stopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023832:	08c00593          	li	a1,140
    80023836:	00018617          	auipc	a2,0x18
    8002383a:	a8260613          	addi	a2,a2,-1406 # 8003b2b8 <__func__.0+0x8ed0>
    8002383e:	0000f517          	auipc	a0,0xf
    80023842:	ea250513          	addi	a0,a0,-350 # 800326e0 <__func__.0+0x2f8>
    80023846:	47f0b0ef          	jal	8002f4c4 <printf>
    8002384a:	00038797          	auipc	a5,0x38
    8002384e:	7c77c783          	lbu	a5,1991(a5) # 8005c011 <excpt+0x1>
    80023852:	00038497          	auipc	s1,0x38
    80023856:	7be48493          	addi	s1,s1,1982 # 8005c010 <excpt>
    8002385a:	0000f597          	auipc	a1,0xf
    8002385e:	e5e58593          	addi	a1,a1,-418 # 800326b8 <__func__.0+0x2d0>
    80023862:	cf89                	beqz	a5,8002387c <stateen_IMSIC_test_4+0xb0>
    80023864:	6498                	ld	a4,8(s1)
    80023866:	47d9                	li	a5,22
    80023868:	0000f597          	auipc	a1,0xf
    8002386c:	e4058593          	addi	a1,a1,-448 # 800326a8 <__func__.0+0x2c0>
    80023870:	00f70663          	beq	a4,a5,8002387c <stateen_IMSIC_test_4+0xb0>
    80023874:	0000f597          	auipc	a1,0xf
    80023878:	e4458593          	addi	a1,a1,-444 # 800326b8 <__func__.0+0x2d0>
    8002387c:	0000f517          	auipc	a0,0xf
    80023880:	e7c50513          	addi	a0,a0,-388 # 800326f8 <__func__.0+0x310>
    80023884:	4410b0ef          	jal	8002f4c4 <printf>
    80023888:	00038797          	auipc	a5,0x38
    8002388c:	7897c783          	lbu	a5,1929(a5) # 8005c011 <excpt+0x1>
    80023890:	c789                	beqz	a5,8002389a <stateen_IMSIC_test_4+0xce>
    80023892:	6498                	ld	a4,8(s1)
    80023894:	47d9                	li	a5,22
    80023896:	00f70c63          	beq	a4,a5,800238ae <stateen_IMSIC_test_4+0xe2>
    8002389a:	0000f517          	auipc	a0,0xf
    8002389e:	e6650513          	addi	a0,a0,-410 # 80032700 <__func__.0+0x318>
    800238a2:	4230b0ef          	jal	8002f4c4 <printf>
    800238a6:	02900513          	li	a0,41
    800238aa:	1090a0ef          	jal	8002e1b2 <putchar>
    800238ae:	4529                	li	a0,10
    800238b0:	1030a0ef          	jal	8002e1b2 <putchar>
    800238b4:	00038797          	auipc	a5,0x38
    800238b8:	75d7c783          	lbu	a5,1885(a5) # 8005c011 <excpt+0x1>
    800238bc:	4401                	li	s0,0
    800238be:	c789                	beqz	a5,800238c8 <stateen_IMSIC_test_4+0xfc>
    800238c0:	6480                	ld	s0,8(s1)
    800238c2:	1429                	addi	s0,s0,-22
    800238c4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800238c8:	4509                	li	a0,2
    800238ca:	e4add0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    800238ce:	d4add0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800238d2:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800238d6:	f84dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800238da:	08c00593          	li	a1,140
    800238de:	00018617          	auipc	a2,0x18
    800238e2:	a3260613          	addi	a2,a2,-1486 # 8003b310 <__func__.0+0x8f28>
    800238e6:	0000f517          	auipc	a0,0xf
    800238ea:	dfa50513          	addi	a0,a0,-518 # 800326e0 <__func__.0+0x2f8>
    800238ee:	3d70b0ef          	jal	8002f4c4 <printf>
    800238f2:	00038797          	auipc	a5,0x38
    800238f6:	71f7c783          	lbu	a5,1823(a5) # 8005c011 <excpt+0x1>
    800238fa:	0000f597          	auipc	a1,0xf
    800238fe:	dbe58593          	addi	a1,a1,-578 # 800326b8 <__func__.0+0x2d0>
    80023902:	cf89                	beqz	a5,8002391c <stateen_IMSIC_test_4+0x150>
    80023904:	6498                	ld	a4,8(s1)
    80023906:	47d9                	li	a5,22
    80023908:	0000f597          	auipc	a1,0xf
    8002390c:	da058593          	addi	a1,a1,-608 # 800326a8 <__func__.0+0x2c0>
    80023910:	00f70663          	beq	a4,a5,8002391c <stateen_IMSIC_test_4+0x150>
    80023914:	0000f597          	auipc	a1,0xf
    80023918:	da458593          	addi	a1,a1,-604 # 800326b8 <__func__.0+0x2d0>
    8002391c:	0000f517          	auipc	a0,0xf
    80023920:	ddc50513          	addi	a0,a0,-548 # 800326f8 <__func__.0+0x310>
    80023924:	3a10b0ef          	jal	8002f4c4 <printf>
    80023928:	00038797          	auipc	a5,0x38
    8002392c:	6e97c783          	lbu	a5,1769(a5) # 8005c011 <excpt+0x1>
    80023930:	c789                	beqz	a5,8002393a <stateen_IMSIC_test_4+0x16e>
    80023932:	6498                	ld	a4,8(s1)
    80023934:	47d9                	li	a5,22
    80023936:	00f70c63          	beq	a4,a5,8002394e <stateen_IMSIC_test_4+0x182>
    8002393a:	0000f517          	auipc	a0,0xf
    8002393e:	dc650513          	addi	a0,a0,-570 # 80032700 <__func__.0+0x318>
    80023942:	3830b0ef          	jal	8002f4c4 <printf>
    80023946:	02900513          	li	a0,41
    8002394a:	0690a0ef          	jal	8002e1b2 <putchar>
    8002394e:	4529                	li	a0,10
    80023950:	0630a0ef          	jal	8002e1b2 <putchar>
    80023954:	c015                	beqz	s0,80023978 <stateen_IMSIC_test_4+0x1ac>
    80023956:	00038417          	auipc	s0,0x38
    8002395a:	6bb44403          	lbu	s0,1723(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    8002395e:	0000f597          	auipc	a1,0xf
    80023962:	d5a58593          	addi	a1,a1,-678 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023966:	cc11                	beqz	s0,80023982 <stateen_IMSIC_test_4+0x1b6>
    80023968:	6498                	ld	a4,8(s1)
    8002396a:	47d9                	li	a5,22
    TEST_END();
    8002396c:	0000f597          	auipc	a1,0xf
    80023970:	d3c58593          	addi	a1,a1,-708 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023974:	00f70763          	beq	a4,a5,80023982 <stateen_IMSIC_test_4+0x1b6>
    80023978:	4401                	li	s0,0
    TEST_END();
    8002397a:	0000f597          	auipc	a1,0xf
    8002397e:	d3e58593          	addi	a1,a1,-706 # 800326b8 <__func__.0+0x2d0>
    80023982:	0000f517          	auipc	a0,0xf
    80023986:	dde50513          	addi	a0,a0,-546 # 80032760 <__func__.0+0x378>
    8002398a:	33b0b0ef          	jal	8002f4c4 <printf>
    8002398e:	4511                	li	a0,4
    80023990:	d84dd0ef          	jal	80000f14 <goto_priv>
    80023994:	de3dd0ef          	jal	80001776 <reset_state>

}
    80023998:	60e2                	ld	ra,24(sp)
    8002399a:	8522                	mv	a0,s0
    8002399c:	6442                	ld	s0,16(sp)
    8002399e:	64a2                	ld	s1,8(sp)
    800239a0:	6105                	addi	sp,sp,32
    800239a2:	8082                	ret

00000000800239a4 <stateen_IMSIC_test_5>:

bool stateen_IMSIC_test_5(){
    800239a4:	1101                	addi	sp,sp,-32

    //当mstateen.IMSIC=0,hs mode 不可访问stopei、vstopei寄存器

    TEST_START();
    800239a6:	0000e597          	auipc	a1,0xe
    800239aa:	23258593          	addi	a1,a1,562 # 80031bd8 <__func__.25>
    800239ae:	0000f517          	auipc	a0,0xf
    800239b2:	d1a50513          	addi	a0,a0,-742 # 800326c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_5(){
    800239b6:	ec06                	sd	ra,24(sp)
    800239b8:	e822                	sd	s0,16(sp)
    800239ba:	e426                	sd	s1,8(sp)
    TEST_START();
    800239bc:	3090b0ef          	jal	8002f4c4 <printf>
    800239c0:	4529                	li	a0,10
    800239c2:	7f00a0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    800239c6:	4511                	li	a0,4
    800239c8:	d4cdd0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800239cc:	4785                	li	a5,1
    800239ce:	17ea                	slli	a5,a5,0x3a
    800239d0:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_HS);
    800239d4:	450d                	li	a0,3
    800239d6:	d3edd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800239da:	c3edd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800239de:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800239e2:	e78dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss stopei register cause to illegal except when mstateen.imsic=0",
    800239e6:	08c00593          	li	a1,140
    800239ea:	00018617          	auipc	a2,0x18
    800239ee:	97e60613          	addi	a2,a2,-1666 # 8003b368 <__func__.0+0x8f80>
    800239f2:	0000f517          	auipc	a0,0xf
    800239f6:	cee50513          	addi	a0,a0,-786 # 800326e0 <__func__.0+0x2f8>
    800239fa:	2cb0b0ef          	jal	8002f4c4 <printf>
    800239fe:	00038797          	auipc	a5,0x38
    80023a02:	6137c783          	lbu	a5,1555(a5) # 8005c011 <excpt+0x1>
    80023a06:	00038497          	auipc	s1,0x38
    80023a0a:	60a48493          	addi	s1,s1,1546 # 8005c010 <excpt>
    80023a0e:	0000f597          	auipc	a1,0xf
    80023a12:	caa58593          	addi	a1,a1,-854 # 800326b8 <__func__.0+0x2d0>
    80023a16:	cf89                	beqz	a5,80023a30 <stateen_IMSIC_test_5+0x8c>
    80023a18:	6498                	ld	a4,8(s1)
    80023a1a:	4789                	li	a5,2
    80023a1c:	0000f597          	auipc	a1,0xf
    80023a20:	c8c58593          	addi	a1,a1,-884 # 800326a8 <__func__.0+0x2c0>
    80023a24:	00f70663          	beq	a4,a5,80023a30 <stateen_IMSIC_test_5+0x8c>
    80023a28:	0000f597          	auipc	a1,0xf
    80023a2c:	c9058593          	addi	a1,a1,-880 # 800326b8 <__func__.0+0x2d0>
    80023a30:	0000f517          	auipc	a0,0xf
    80023a34:	cc850513          	addi	a0,a0,-824 # 800326f8 <__func__.0+0x310>
    80023a38:	28d0b0ef          	jal	8002f4c4 <printf>
    80023a3c:	00038797          	auipc	a5,0x38
    80023a40:	5d57c783          	lbu	a5,1493(a5) # 8005c011 <excpt+0x1>
    80023a44:	c789                	beqz	a5,80023a4e <stateen_IMSIC_test_5+0xaa>
    80023a46:	6498                	ld	a4,8(s1)
    80023a48:	4789                	li	a5,2
    80023a4a:	00f70c63          	beq	a4,a5,80023a62 <stateen_IMSIC_test_5+0xbe>
    80023a4e:	0000f517          	auipc	a0,0xf
    80023a52:	cb250513          	addi	a0,a0,-846 # 80032700 <__func__.0+0x318>
    80023a56:	26f0b0ef          	jal	8002f4c4 <printf>
    80023a5a:	02900513          	li	a0,41
    80023a5e:	7540a0ef          	jal	8002e1b2 <putchar>
    80023a62:	4529                	li	a0,10
    80023a64:	74e0a0ef          	jal	8002e1b2 <putchar>
    80023a68:	00038797          	auipc	a5,0x38
    80023a6c:	5a97c783          	lbu	a5,1449(a5) # 8005c011 <excpt+0x1>
    80023a70:	4401                	li	s0,0
    80023a72:	c789                	beqz	a5,80023a7c <stateen_IMSIC_test_5+0xd8>
    80023a74:	6480                	ld	s0,8(s1)
    80023a76:	1479                	addi	s0,s0,-2
    80023a78:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80023a7c:	450d                	li	a0,3
    80023a7e:	c96dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023a82:	b96dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023a86:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023a8a:	dd0dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023a8e:	08c00593          	li	a1,140
    80023a92:	00018617          	auipc	a2,0x18
    80023a96:	92660613          	addi	a2,a2,-1754 # 8003b3b8 <__func__.0+0x8fd0>
    80023a9a:	0000f517          	auipc	a0,0xf
    80023a9e:	c4650513          	addi	a0,a0,-954 # 800326e0 <__func__.0+0x2f8>
    80023aa2:	2230b0ef          	jal	8002f4c4 <printf>
    80023aa6:	00038797          	auipc	a5,0x38
    80023aaa:	56b7c783          	lbu	a5,1387(a5) # 8005c011 <excpt+0x1>
    80023aae:	0000f597          	auipc	a1,0xf
    80023ab2:	c0a58593          	addi	a1,a1,-1014 # 800326b8 <__func__.0+0x2d0>
    80023ab6:	cf89                	beqz	a5,80023ad0 <stateen_IMSIC_test_5+0x12c>
    80023ab8:	6498                	ld	a4,8(s1)
    80023aba:	4789                	li	a5,2
    80023abc:	0000f597          	auipc	a1,0xf
    80023ac0:	bec58593          	addi	a1,a1,-1044 # 800326a8 <__func__.0+0x2c0>
    80023ac4:	00f70663          	beq	a4,a5,80023ad0 <stateen_IMSIC_test_5+0x12c>
    80023ac8:	0000f597          	auipc	a1,0xf
    80023acc:	bf058593          	addi	a1,a1,-1040 # 800326b8 <__func__.0+0x2d0>
    80023ad0:	0000f517          	auipc	a0,0xf
    80023ad4:	c2850513          	addi	a0,a0,-984 # 800326f8 <__func__.0+0x310>
    80023ad8:	1ed0b0ef          	jal	8002f4c4 <printf>
    80023adc:	00038797          	auipc	a5,0x38
    80023ae0:	5357c783          	lbu	a5,1333(a5) # 8005c011 <excpt+0x1>
    80023ae4:	c789                	beqz	a5,80023aee <stateen_IMSIC_test_5+0x14a>
    80023ae6:	6498                	ld	a4,8(s1)
    80023ae8:	4789                	li	a5,2
    80023aea:	00f70c63          	beq	a4,a5,80023b02 <stateen_IMSIC_test_5+0x15e>
    80023aee:	0000f517          	auipc	a0,0xf
    80023af2:	c1250513          	addi	a0,a0,-1006 # 80032700 <__func__.0+0x318>
    80023af6:	1cf0b0ef          	jal	8002f4c4 <printf>
    80023afa:	02900513          	li	a0,41
    80023afe:	6b40a0ef          	jal	8002e1b2 <putchar>
    80023b02:	4529                	li	a0,10
    80023b04:	6ae0a0ef          	jal	8002e1b2 <putchar>
    80023b08:	c015                	beqz	s0,80023b2c <stateen_IMSIC_test_5+0x188>
    80023b0a:	00038417          	auipc	s0,0x38
    80023b0e:	50744403          	lbu	s0,1287(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80023b12:	0000f597          	auipc	a1,0xf
    80023b16:	ba658593          	addi	a1,a1,-1114 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023b1a:	cc11                	beqz	s0,80023b36 <stateen_IMSIC_test_5+0x192>
    80023b1c:	6498                	ld	a4,8(s1)
    80023b1e:	4789                	li	a5,2
    TEST_END();
    80023b20:	0000f597          	auipc	a1,0xf
    80023b24:	b8858593          	addi	a1,a1,-1144 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023b28:	00f70763          	beq	a4,a5,80023b36 <stateen_IMSIC_test_5+0x192>
    80023b2c:	4401                	li	s0,0
    TEST_END();
    80023b2e:	0000f597          	auipc	a1,0xf
    80023b32:	b8a58593          	addi	a1,a1,-1142 # 800326b8 <__func__.0+0x2d0>
    80023b36:	0000f517          	auipc	a0,0xf
    80023b3a:	c2a50513          	addi	a0,a0,-982 # 80032760 <__func__.0+0x378>
    80023b3e:	1870b0ef          	jal	8002f4c4 <printf>
    80023b42:	4511                	li	a0,4
    80023b44:	bd0dd0ef          	jal	80000f14 <goto_priv>
    80023b48:	c2fdd0ef          	jal	80001776 <reset_state>

}
    80023b4c:	60e2                	ld	ra,24(sp)
    80023b4e:	8522                	mv	a0,s0
    80023b50:	6442                	ld	s0,16(sp)
    80023b52:	64a2                	ld	s1,8(sp)
    80023b54:	6105                	addi	sp,sp,32
    80023b56:	8082                	ret

0000000080023b58 <stateen_IMSIC_test_6>:


bool stateen_IMSIC_test_6(){
    80023b58:	1101                	addi	sp,sp,-32

    TEST_START();
    80023b5a:	0000e597          	auipc	a1,0xe
    80023b5e:	09658593          	addi	a1,a1,150 # 80031bf0 <__func__.24>
    80023b62:	0000f517          	auipc	a0,0xf
    80023b66:	b6650513          	addi	a0,a0,-1178 # 800326c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_6(){
    80023b6a:	ec06                	sd	ra,24(sp)
    80023b6c:	e822                	sd	s0,16(sp)
    80023b6e:	e426                	sd	s1,8(sp)
    TEST_START();
    80023b70:	1550b0ef          	jal	8002f4c4 <printf>
    80023b74:	4529                	li	a0,10
    80023b76:	63c0a0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80023b7a:	4511                	li	a0,4
    80023b7c:	b98dd0ef          	jal	80000f14 <goto_priv>
    //当mstateen.IMSIC=1,v=0时,可访问stopei、vstopei寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023b80:	4785                	li	a5,1
    80023b82:	17ea                	slli	a5,a5,0x3a
    80023b84:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    80023b88:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80023b8c:	450d                	li	a0,3
    80023b8e:	b86dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023b92:	a86dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023b96:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023b9a:	cc0dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss stopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023b9e:	08c00593          	li	a1,140
    80023ba2:	00018617          	auipc	a2,0x18
    80023ba6:	86660613          	addi	a2,a2,-1946 # 8003b408 <__func__.0+0x9020>
    80023baa:	0000f517          	auipc	a0,0xf
    80023bae:	b3650513          	addi	a0,a0,-1226 # 800326e0 <__func__.0+0x2f8>
    80023bb2:	1130b0ef          	jal	8002f4c4 <printf>
    80023bb6:	00038797          	auipc	a5,0x38
    80023bba:	45b7c783          	lbu	a5,1115(a5) # 8005c011 <excpt+0x1>
    80023bbe:	0000f597          	auipc	a1,0xf
    80023bc2:	aea58593          	addi	a1,a1,-1302 # 800326a8 <__func__.0+0x2c0>
    80023bc6:	c789                	beqz	a5,80023bd0 <stateen_IMSIC_test_6+0x78>
    80023bc8:	0000f597          	auipc	a1,0xf
    80023bcc:	af058593          	addi	a1,a1,-1296 # 800326b8 <__func__.0+0x2d0>
    80023bd0:	0000f517          	auipc	a0,0xf
    80023bd4:	b2850513          	addi	a0,a0,-1240 # 800326f8 <__func__.0+0x310>
    80023bd8:	0ed0b0ef          	jal	8002f4c4 <printf>
    80023bdc:	00038797          	auipc	a5,0x38
    80023be0:	4357c783          	lbu	a5,1077(a5) # 8005c011 <excpt+0x1>
    80023be4:	2c079e63          	bnez	a5,80023ec0 <stateen_IMSIC_test_6+0x368>
    80023be8:	4529                	li	a0,10
    80023bea:	5c80a0ef          	jal	8002e1b2 <putchar>
    80023bee:	00038497          	auipc	s1,0x38
    80023bf2:	4234c483          	lbu	s1,1059(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_VSTOPEI);
    80023bf6:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023bfa:	c60dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss vstopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023bfe:	08c00593          	li	a1,140
    80023c02:	00018617          	auipc	a2,0x18
    80023c06:	85e60613          	addi	a2,a2,-1954 # 8003b460 <__func__.0+0x9078>
    80023c0a:	0000f517          	auipc	a0,0xf
    80023c0e:	ad650513          	addi	a0,a0,-1322 # 800326e0 <__func__.0+0x2f8>
    80023c12:	0b30b0ef          	jal	8002f4c4 <printf>
    80023c16:	00038797          	auipc	a5,0x38
    80023c1a:	3fb7c783          	lbu	a5,1019(a5) # 8005c011 <excpt+0x1>
    80023c1e:	0000f597          	auipc	a1,0xf
    80023c22:	a9a58593          	addi	a1,a1,-1382 # 800326b8 <__func__.0+0x2d0>
    80023c26:	e789                	bnez	a5,80023c30 <stateen_IMSIC_test_6+0xd8>
    80023c28:	0000f597          	auipc	a1,0xf
    80023c2c:	a8058593          	addi	a1,a1,-1408 # 800326a8 <__func__.0+0x2c0>
    80023c30:	0000f517          	auipc	a0,0xf
    80023c34:	ac850513          	addi	a0,a0,-1336 # 800326f8 <__func__.0+0x310>
    80023c38:	08d0b0ef          	jal	8002f4c4 <printf>
    80023c3c:	00038797          	auipc	a5,0x38
    80023c40:	3d57c783          	lbu	a5,981(a5) # 8005c011 <excpt+0x1>
    80023c44:	26079363          	bnez	a5,80023eaa <stateen_IMSIC_test_6+0x352>
    80023c48:	4529                	li	a0,10
    80023c4a:	5680a0ef          	jal	8002e1b2 <putchar>
    80023c4e:	4401                	li	s0,0
    80023c50:	e499                	bnez	s1,80023c5e <stateen_IMSIC_test_6+0x106>
    80023c52:	00038417          	auipc	s0,0x38
    80023c56:	3bf44403          	lbu	s0,959(s0) # 8005c011 <excpt+0x1>
    80023c5a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80023c5e:	4505                	li	a0,1
    80023c60:	ab4dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023c64:	9b4dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023c68:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023c6c:	beedd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode accesss stopei register successful when mstateen.imsic=1  hstateen.imsic=0 sstateen.imsic=0 ",
    80023c70:	08c00593          	li	a1,140
    80023c74:	00018617          	auipc	a2,0x18
    80023c78:	84460613          	addi	a2,a2,-1980 # 8003b4b8 <__func__.0+0x90d0>
    80023c7c:	0000f517          	auipc	a0,0xf
    80023c80:	a6450513          	addi	a0,a0,-1436 # 800326e0 <__func__.0+0x2f8>
    80023c84:	0410b0ef          	jal	8002f4c4 <printf>
    80023c88:	00038797          	auipc	a5,0x38
    80023c8c:	3897c783          	lbu	a5,905(a5) # 8005c011 <excpt+0x1>
    80023c90:	0000f597          	auipc	a1,0xf
    80023c94:	a2858593          	addi	a1,a1,-1496 # 800326b8 <__func__.0+0x2d0>
    80023c98:	e789                	bnez	a5,80023ca2 <stateen_IMSIC_test_6+0x14a>
    80023c9a:	0000f597          	auipc	a1,0xf
    80023c9e:	a0e58593          	addi	a1,a1,-1522 # 800326a8 <__func__.0+0x2c0>
    80023ca2:	0000f517          	auipc	a0,0xf
    80023ca6:	a5650513          	addi	a0,a0,-1450 # 800326f8 <__func__.0+0x310>
    80023caa:	01b0b0ef          	jal	8002f4c4 <printf>
    80023cae:	00038797          	auipc	a5,0x38
    80023cb2:	3637c783          	lbu	a5,867(a5) # 8005c011 <excpt+0x1>
    80023cb6:	1c079f63          	bnez	a5,80023e94 <stateen_IMSIC_test_6+0x33c>
    80023cba:	4529                	li	a0,10
    80023cbc:	4f60a0ef          	jal	8002e1b2 <putchar>
    80023cc0:	c419                	beqz	s0,80023cce <stateen_IMSIC_test_6+0x176>
    80023cc2:	00038417          	auipc	s0,0x38
    80023cc6:	34f44403          	lbu	s0,847(s0) # 8005c011 <excpt+0x1>
    80023cca:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80023cce:	4505                	li	a0,1
    80023cd0:	a44dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023cd4:	944dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023cd8:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023cdc:	b7edd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0 sstateen.imsic=0",
    80023ce0:	08c00593          	li	a1,140
    80023ce4:	00018617          	auipc	a2,0x18
    80023ce8:	83c60613          	addi	a2,a2,-1988 # 8003b520 <__func__.0+0x9138>
    80023cec:	0000f517          	auipc	a0,0xf
    80023cf0:	9f450513          	addi	a0,a0,-1548 # 800326e0 <__func__.0+0x2f8>
    80023cf4:	7d00b0ef          	jal	8002f4c4 <printf>
    80023cf8:	00038797          	auipc	a5,0x38
    80023cfc:	3197c783          	lbu	a5,793(a5) # 8005c011 <excpt+0x1>
    80023d00:	0000f597          	auipc	a1,0xf
    80023d04:	9b858593          	addi	a1,a1,-1608 # 800326b8 <__func__.0+0x2d0>
    80023d08:	e789                	bnez	a5,80023d12 <stateen_IMSIC_test_6+0x1ba>
    80023d0a:	0000f597          	auipc	a1,0xf
    80023d0e:	99e58593          	addi	a1,a1,-1634 # 800326a8 <__func__.0+0x2c0>
    80023d12:	0000f517          	auipc	a0,0xf
    80023d16:	9e650513          	addi	a0,a0,-1562 # 800326f8 <__func__.0+0x310>
    80023d1a:	7aa0b0ef          	jal	8002f4c4 <printf>
    80023d1e:	00038797          	auipc	a5,0x38
    80023d22:	2f37c783          	lbu	a5,755(a5) # 8005c011 <excpt+0x1>
    80023d26:	14079c63          	bnez	a5,80023e7e <stateen_IMSIC_test_6+0x326>
    80023d2a:	4529                	li	a0,10
    80023d2c:	4860a0ef          	jal	8002e1b2 <putchar>
    80023d30:	c419                	beqz	s0,80023d3e <stateen_IMSIC_test_6+0x1e6>
    80023d32:	00038417          	auipc	s0,0x38
    80023d36:	2df44403          	lbu	s0,735(s0) # 8005c011 <excpt+0x1>
    80023d3a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80023d3e:	4511                	li	a0,4
    80023d40:	9d4dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023d44:	8d4dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023d48:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023d4c:	b0edd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023d50:	08c00593          	li	a1,140
    80023d54:	00018617          	auipc	a2,0x18
    80023d58:	83460613          	addi	a2,a2,-1996 # 8003b588 <__func__.0+0x91a0>
    80023d5c:	0000f517          	auipc	a0,0xf
    80023d60:	98450513          	addi	a0,a0,-1660 # 800326e0 <__func__.0+0x2f8>
    80023d64:	7600b0ef          	jal	8002f4c4 <printf>
    80023d68:	00038797          	auipc	a5,0x38
    80023d6c:	2a97c783          	lbu	a5,681(a5) # 8005c011 <excpt+0x1>
    80023d70:	0000f597          	auipc	a1,0xf
    80023d74:	94858593          	addi	a1,a1,-1720 # 800326b8 <__func__.0+0x2d0>
    80023d78:	e789                	bnez	a5,80023d82 <stateen_IMSIC_test_6+0x22a>
    80023d7a:	0000f597          	auipc	a1,0xf
    80023d7e:	92e58593          	addi	a1,a1,-1746 # 800326a8 <__func__.0+0x2c0>
    80023d82:	0000f517          	auipc	a0,0xf
    80023d86:	97650513          	addi	a0,a0,-1674 # 800326f8 <__func__.0+0x310>
    80023d8a:	73a0b0ef          	jal	8002f4c4 <printf>
    80023d8e:	00038797          	auipc	a5,0x38
    80023d92:	2837c783          	lbu	a5,643(a5) # 8005c011 <excpt+0x1>
    80023d96:	0c079963          	bnez	a5,80023e68 <stateen_IMSIC_test_6+0x310>
    80023d9a:	4529                	li	a0,10
    80023d9c:	4160a0ef          	jal	8002e1b2 <putchar>
    80023da0:	c419                	beqz	s0,80023dae <stateen_IMSIC_test_6+0x256>
    80023da2:	00038417          	auipc	s0,0x38
    80023da6:	26f44403          	lbu	s0,623(s0) # 8005c011 <excpt+0x1>
    80023daa:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80023dae:	4511                	li	a0,4
    80023db0:	964dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023db4:	864dd0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023db8:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023dbc:	a9edd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023dc0:	08c00593          	li	a1,140
    80023dc4:	00018617          	auipc	a2,0x18
    80023dc8:	81c60613          	addi	a2,a2,-2020 # 8003b5e0 <__func__.0+0x91f8>
    80023dcc:	0000f517          	auipc	a0,0xf
    80023dd0:	91450513          	addi	a0,a0,-1772 # 800326e0 <__func__.0+0x2f8>
    80023dd4:	6f00b0ef          	jal	8002f4c4 <printf>
    80023dd8:	00038797          	auipc	a5,0x38
    80023ddc:	2397c783          	lbu	a5,569(a5) # 8005c011 <excpt+0x1>
    80023de0:	0000f597          	auipc	a1,0xf
    80023de4:	8d858593          	addi	a1,a1,-1832 # 800326b8 <__func__.0+0x2d0>
    80023de8:	e789                	bnez	a5,80023df2 <stateen_IMSIC_test_6+0x29a>
    80023dea:	0000f597          	auipc	a1,0xf
    80023dee:	8be58593          	addi	a1,a1,-1858 # 800326a8 <__func__.0+0x2c0>
    80023df2:	0000f517          	auipc	a0,0xf
    80023df6:	90650513          	addi	a0,a0,-1786 # 800326f8 <__func__.0+0x310>
    80023dfa:	6ca0b0ef          	jal	8002f4c4 <printf>
    80023dfe:	00038797          	auipc	a5,0x38
    80023e02:	2137c783          	lbu	a5,531(a5) # 8005c011 <excpt+0x1>
    80023e06:	e7b1                	bnez	a5,80023e52 <stateen_IMSIC_test_6+0x2fa>
    80023e08:	4529                	li	a0,10
    80023e0a:	3a80a0ef          	jal	8002e1b2 <putchar>
    80023e0e:	c411                	beqz	s0,80023e1a <stateen_IMSIC_test_6+0x2c2>
    80023e10:	00038797          	auipc	a5,0x38
    80023e14:	2017c783          	lbu	a5,513(a5) # 8005c011 <excpt+0x1>
    80023e18:	c79d                	beqz	a5,80023e46 <stateen_IMSIC_test_6+0x2ee>
    80023e1a:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80023e1c:	0000f597          	auipc	a1,0xf
    80023e20:	89c58593          	addi	a1,a1,-1892 # 800326b8 <__func__.0+0x2d0>
    80023e24:	0000f517          	auipc	a0,0xf
    80023e28:	93c50513          	addi	a0,a0,-1732 # 80032760 <__func__.0+0x378>
    80023e2c:	6980b0ef          	jal	8002f4c4 <printf>
    80023e30:	4511                	li	a0,4
    80023e32:	8e2dd0ef          	jal	80000f14 <goto_priv>
    80023e36:	941dd0ef          	jal	80001776 <reset_state>

}
    80023e3a:	60e2                	ld	ra,24(sp)
    80023e3c:	8522                	mv	a0,s0
    80023e3e:	6442                	ld	s0,16(sp)
    80023e40:	64a2                	ld	s1,8(sp)
    80023e42:	6105                	addi	sp,sp,32
    80023e44:	8082                	ret
    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023e46:	4405                	li	s0,1
    TEST_END();
    80023e48:	0000f597          	auipc	a1,0xf
    80023e4c:	86058593          	addi	a1,a1,-1952 # 800326a8 <__func__.0+0x2c0>
    80023e50:	bfd1                	j	80023e24 <stateen_IMSIC_test_6+0x2cc>
    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023e52:	0000f517          	auipc	a0,0xf
    80023e56:	8ae50513          	addi	a0,a0,-1874 # 80032700 <__func__.0+0x318>
    80023e5a:	66a0b0ef          	jal	8002f4c4 <printf>
    80023e5e:	02900513          	li	a0,41
    80023e62:	3500a0ef          	jal	8002e1b2 <putchar>
    80023e66:	b74d                	j	80023e08 <stateen_IMSIC_test_6+0x2b0>
    TEST_ASSERT("m mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023e68:	0000f517          	auipc	a0,0xf
    80023e6c:	89850513          	addi	a0,a0,-1896 # 80032700 <__func__.0+0x318>
    80023e70:	6540b0ef          	jal	8002f4c4 <printf>
    80023e74:	02900513          	li	a0,41
    80023e78:	33a0a0ef          	jal	8002e1b2 <putchar>
    80023e7c:	bf39                	j	80023d9a <stateen_IMSIC_test_6+0x242>
    TEST_ASSERT("hu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0 sstateen.imsic=0",
    80023e7e:	0000f517          	auipc	a0,0xf
    80023e82:	88250513          	addi	a0,a0,-1918 # 80032700 <__func__.0+0x318>
    80023e86:	63e0b0ef          	jal	8002f4c4 <printf>
    80023e8a:	02900513          	li	a0,41
    80023e8e:	3240a0ef          	jal	8002e1b2 <putchar>
    80023e92:	bd61                	j	80023d2a <stateen_IMSIC_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss stopei register successful when mstateen.imsic=1  hstateen.imsic=0 sstateen.imsic=0 ",
    80023e94:	0000f517          	auipc	a0,0xf
    80023e98:	86c50513          	addi	a0,a0,-1940 # 80032700 <__func__.0+0x318>
    80023e9c:	6280b0ef          	jal	8002f4c4 <printf>
    80023ea0:	02900513          	li	a0,41
    80023ea4:	30e0a0ef          	jal	8002e1b2 <putchar>
    80023ea8:	bd09                	j	80023cba <stateen_IMSIC_test_6+0x162>
    TEST_ASSERT("hs mode accesss vstopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023eaa:	0000f517          	auipc	a0,0xf
    80023eae:	85650513          	addi	a0,a0,-1962 # 80032700 <__func__.0+0x318>
    80023eb2:	6120b0ef          	jal	8002f4c4 <printf>
    80023eb6:	02900513          	li	a0,41
    80023eba:	2f80a0ef          	jal	8002e1b2 <putchar>
    80023ebe:	b369                	j	80023c48 <stateen_IMSIC_test_6+0xf0>
    TEST_ASSERT("hs mode accesss stopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023ec0:	0000f517          	auipc	a0,0xf
    80023ec4:	84050513          	addi	a0,a0,-1984 # 80032700 <__func__.0+0x318>
    80023ec8:	5fc0b0ef          	jal	8002f4c4 <printf>
    80023ecc:	02900513          	li	a0,41
    80023ed0:	2e20a0ef          	jal	8002e1b2 <putchar>
    80023ed4:	bb11                	j	80023be8 <stateen_IMSIC_test_6+0x90>

0000000080023ed6 <stateen_IMSIC_test_7>:


bool stateen_IMSIC_test_7(){
    80023ed6:	1101                	addi	sp,sp,-32

    TEST_START();
    80023ed8:	0000e597          	auipc	a1,0xe
    80023edc:	d3058593          	addi	a1,a1,-720 # 80031c08 <__func__.23>
    80023ee0:	0000e517          	auipc	a0,0xe
    80023ee4:	7e850513          	addi	a0,a0,2024 # 800326c8 <__func__.0+0x2e0>
bool stateen_IMSIC_test_7(){
    80023ee8:	ec06                	sd	ra,24(sp)
    80023eea:	e822                	sd	s0,16(sp)
    80023eec:	e426                	sd	s1,8(sp)
    TEST_START();
    80023eee:	5d60b0ef          	jal	8002f4c4 <printf>
    80023ef2:	4529                	li	a0,10
    80023ef4:	2be0a0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80023ef8:	4511                	li	a0,4
    80023efa:	81add0ef          	jal	80000f14 <goto_priv>
    //当mstateen.IMSIC=1 hstateen.IMSIC=1,v=1 时可访问stopei、vstopei寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023efe:	4785                	li	a5,1
    80023f00:	17ea                	slli	a5,a5,0x3a
    80023f02:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    80023f06:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    80023f0a:	4509                	li	a0,2
    80023f0c:	808dd0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023f10:	f09dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023f14:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023f18:	942dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f1c:	08c00593          	li	a1,140
    80023f20:	00017617          	auipc	a2,0x17
    80023f24:	71860613          	addi	a2,a2,1816 # 8003b638 <__func__.0+0x9250>
    80023f28:	0000e517          	auipc	a0,0xe
    80023f2c:	7b850513          	addi	a0,a0,1976 # 800326e0 <__func__.0+0x2f8>
    80023f30:	5940b0ef          	jal	8002f4c4 <printf>
    80023f34:	00038797          	auipc	a5,0x38
    80023f38:	0dd7c783          	lbu	a5,221(a5) # 8005c011 <excpt+0x1>
    80023f3c:	0000e597          	auipc	a1,0xe
    80023f40:	76c58593          	addi	a1,a1,1900 # 800326a8 <__func__.0+0x2c0>
    80023f44:	c789                	beqz	a5,80023f4e <stateen_IMSIC_test_7+0x78>
    80023f46:	0000e597          	auipc	a1,0xe
    80023f4a:	77258593          	addi	a1,a1,1906 # 800326b8 <__func__.0+0x2d0>
    80023f4e:	0000e517          	auipc	a0,0xe
    80023f52:	7aa50513          	addi	a0,a0,1962 # 800326f8 <__func__.0+0x310>
    80023f56:	56e0b0ef          	jal	8002f4c4 <printf>
    80023f5a:	00038797          	auipc	a5,0x38
    80023f5e:	0b77c783          	lbu	a5,183(a5) # 8005c011 <excpt+0x1>
    80023f62:	1c079d63          	bnez	a5,8002413c <stateen_IMSIC_test_7+0x266>
    80023f66:	4529                	li	a0,10
    80023f68:	24a0a0ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80023f6c:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f6e:	00038497          	auipc	s1,0x38
    80023f72:	0a34c483          	lbu	s1,163(s1) # 8005c011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80023f76:	f9fdc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023f7a:	e9fdc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023f7e:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023f82:	8d8dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f86:	08c00593          	li	a1,140
    80023f8a:	00017617          	auipc	a2,0x17
    80023f8e:	70660613          	addi	a2,a2,1798 # 8003b690 <__func__.0+0x92a8>
    80023f92:	0000e517          	auipc	a0,0xe
    80023f96:	74e50513          	addi	a0,a0,1870 # 800326e0 <__func__.0+0x2f8>
    80023f9a:	52a0b0ef          	jal	8002f4c4 <printf>
    80023f9e:	00038797          	auipc	a5,0x38
    80023fa2:	0737c783          	lbu	a5,115(a5) # 8005c011 <excpt+0x1>
    80023fa6:	0000e597          	auipc	a1,0xe
    80023faa:	71258593          	addi	a1,a1,1810 # 800326b8 <__func__.0+0x2d0>
    80023fae:	e789                	bnez	a5,80023fb8 <stateen_IMSIC_test_7+0xe2>
    80023fb0:	0000e597          	auipc	a1,0xe
    80023fb4:	6f858593          	addi	a1,a1,1784 # 800326a8 <__func__.0+0x2c0>
    80023fb8:	0000e517          	auipc	a0,0xe
    80023fbc:	74050513          	addi	a0,a0,1856 # 800326f8 <__func__.0+0x310>
    80023fc0:	5040b0ef          	jal	8002f4c4 <printf>
    80023fc4:	00038797          	auipc	a5,0x38
    80023fc8:	04d7c783          	lbu	a5,77(a5) # 8005c011 <excpt+0x1>
    80023fcc:	14079d63          	bnez	a5,80024126 <stateen_IMSIC_test_7+0x250>
    80023fd0:	4529                	li	a0,10
    80023fd2:	1e00a0ef          	jal	8002e1b2 <putchar>
    80023fd6:	4401                	li	s0,0
    80023fd8:	e499                	bnez	s1,80023fe6 <stateen_IMSIC_test_7+0x110>
    80023fda:	00038417          	auipc	s0,0x38
    80023fde:	03744403          	lbu	s0,55(s0) # 8005c011 <excpt+0x1>
    80023fe2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80023fe6:	4501                	li	a0,0
    80023fe8:	f2ddc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023fec:	e2ddc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023ff0:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023ff4:	866dd0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vu mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023ff8:	08c00593          	li	a1,140
    80023ffc:	00017617          	auipc	a2,0x17
    80024000:	6ec60613          	addi	a2,a2,1772 # 8003b6e8 <__func__.0+0x9300>
    80024004:	0000e517          	auipc	a0,0xe
    80024008:	6dc50513          	addi	a0,a0,1756 # 800326e0 <__func__.0+0x2f8>
    8002400c:	4b80b0ef          	jal	8002f4c4 <printf>
    80024010:	00038797          	auipc	a5,0x38
    80024014:	0017c783          	lbu	a5,1(a5) # 8005c011 <excpt+0x1>
    80024018:	0000e597          	auipc	a1,0xe
    8002401c:	6a058593          	addi	a1,a1,1696 # 800326b8 <__func__.0+0x2d0>
    80024020:	e789                	bnez	a5,8002402a <stateen_IMSIC_test_7+0x154>
    80024022:	0000e597          	auipc	a1,0xe
    80024026:	68658593          	addi	a1,a1,1670 # 800326a8 <__func__.0+0x2c0>
    8002402a:	0000e517          	auipc	a0,0xe
    8002402e:	6ce50513          	addi	a0,a0,1742 # 800326f8 <__func__.0+0x310>
    80024032:	4920b0ef          	jal	8002f4c4 <printf>
    80024036:	00038797          	auipc	a5,0x38
    8002403a:	fdb7c783          	lbu	a5,-37(a5) # 8005c011 <excpt+0x1>
    8002403e:	0c079963          	bnez	a5,80024110 <stateen_IMSIC_test_7+0x23a>
    80024042:	4529                	li	a0,10
    80024044:	16e0a0ef          	jal	8002e1b2 <putchar>
    80024048:	c419                	beqz	s0,80024056 <stateen_IMSIC_test_7+0x180>
    8002404a:	00038417          	auipc	s0,0x38
    8002404e:	fc744403          	lbu	s0,-57(s0) # 8005c011 <excpt+0x1>
    80024052:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80024056:	4501                	li	a0,0
    80024058:	ebddc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002405c:	dbddc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80024060:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80024064:	ff7dc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80024068:	08c00593          	li	a1,140
    8002406c:	00017617          	auipc	a2,0x17
    80024070:	6d460613          	addi	a2,a2,1748 # 8003b740 <__func__.0+0x9358>
    80024074:	0000e517          	auipc	a0,0xe
    80024078:	66c50513          	addi	a0,a0,1644 # 800326e0 <__func__.0+0x2f8>
    8002407c:	4480b0ef          	jal	8002f4c4 <printf>
    80024080:	00038797          	auipc	a5,0x38
    80024084:	f917c783          	lbu	a5,-111(a5) # 8005c011 <excpt+0x1>
    80024088:	0000e597          	auipc	a1,0xe
    8002408c:	63058593          	addi	a1,a1,1584 # 800326b8 <__func__.0+0x2d0>
    80024090:	e789                	bnez	a5,8002409a <stateen_IMSIC_test_7+0x1c4>
    80024092:	0000e597          	auipc	a1,0xe
    80024096:	61658593          	addi	a1,a1,1558 # 800326a8 <__func__.0+0x2c0>
    8002409a:	0000e517          	auipc	a0,0xe
    8002409e:	65e50513          	addi	a0,a0,1630 # 800326f8 <__func__.0+0x310>
    800240a2:	4220b0ef          	jal	8002f4c4 <printf>
    800240a6:	00038797          	auipc	a5,0x38
    800240aa:	f6b7c783          	lbu	a5,-149(a5) # 8005c011 <excpt+0x1>
    800240ae:	e7b1                	bnez	a5,800240fa <stateen_IMSIC_test_7+0x224>
    800240b0:	4529                	li	a0,10
    800240b2:	1000a0ef          	jal	8002e1b2 <putchar>
    800240b6:	c411                	beqz	s0,800240c2 <stateen_IMSIC_test_7+0x1ec>
    800240b8:	00038797          	auipc	a5,0x38
    800240bc:	f597c783          	lbu	a5,-167(a5) # 8005c011 <excpt+0x1>
    800240c0:	c79d                	beqz	a5,800240ee <stateen_IMSIC_test_7+0x218>
    800240c2:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    800240c4:	0000e597          	auipc	a1,0xe
    800240c8:	5f458593          	addi	a1,a1,1524 # 800326b8 <__func__.0+0x2d0>
    800240cc:	0000e517          	auipc	a0,0xe
    800240d0:	69450513          	addi	a0,a0,1684 # 80032760 <__func__.0+0x378>
    800240d4:	3f00b0ef          	jal	8002f4c4 <printf>
    800240d8:	4511                	li	a0,4
    800240da:	e3bdc0ef          	jal	80000f14 <goto_priv>
    800240de:	e98dd0ef          	jal	80001776 <reset_state>
}
    800240e2:	60e2                	ld	ra,24(sp)
    800240e4:	8522                	mv	a0,s0
    800240e6:	6442                	ld	s0,16(sp)
    800240e8:	64a2                	ld	s1,8(sp)
    800240ea:	6105                	addi	sp,sp,32
    800240ec:	8082                	ret
    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    800240ee:	4405                	li	s0,1
    TEST_END();
    800240f0:	0000e597          	auipc	a1,0xe
    800240f4:	5b858593          	addi	a1,a1,1464 # 800326a8 <__func__.0+0x2c0>
    800240f8:	bfd1                	j	800240cc <stateen_IMSIC_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    800240fa:	0000e517          	auipc	a0,0xe
    800240fe:	60650513          	addi	a0,a0,1542 # 80032700 <__func__.0+0x318>
    80024102:	3c20b0ef          	jal	8002f4c4 <printf>
    80024106:	02900513          	li	a0,41
    8002410a:	0a80a0ef          	jal	8002e1b2 <putchar>
    8002410e:	b74d                	j	800240b0 <stateen_IMSIC_test_7+0x1da>
    TEST_ASSERT("vu mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80024110:	0000e517          	auipc	a0,0xe
    80024114:	5f050513          	addi	a0,a0,1520 # 80032700 <__func__.0+0x318>
    80024118:	3ac0b0ef          	jal	8002f4c4 <printf>
    8002411c:	02900513          	li	a0,41
    80024120:	0920a0ef          	jal	8002e1b2 <putchar>
    80024124:	bf39                	j	80024042 <stateen_IMSIC_test_7+0x16c>
    TEST_ASSERT("vs mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80024126:	0000e517          	auipc	a0,0xe
    8002412a:	5da50513          	addi	a0,a0,1498 # 80032700 <__func__.0+0x318>
    8002412e:	3960b0ef          	jal	8002f4c4 <printf>
    80024132:	02900513          	li	a0,41
    80024136:	07c0a0ef          	jal	8002e1b2 <putchar>
    8002413a:	bd59                	j	80023fd0 <stateen_IMSIC_test_7+0xfa>
    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    8002413c:	0000e517          	auipc	a0,0xe
    80024140:	5c450513          	addi	a0,a0,1476 # 80032700 <__func__.0+0x318>
    80024144:	3800b0ef          	jal	8002f4c4 <printf>
    80024148:	02900513          	li	a0,41
    8002414c:	0660a0ef          	jal	8002e1b2 <putchar>
    80024150:	bd19                	j	80023f66 <stateen_IMSIC_test_7+0x90>

0000000080024152 <stateen_AIA_test_1>:



//--

bool stateen_AIA_test_1(){
    80024152:	1101                	addi	sp,sp,-32

    TEST_START();
    80024154:	0000e597          	auipc	a1,0xe
    80024158:	acc58593          	addi	a1,a1,-1332 # 80031c20 <__func__.22>
    8002415c:	0000e517          	auipc	a0,0xe
    80024160:	56c50513          	addi	a0,a0,1388 # 800326c8 <__func__.0+0x2e0>
bool stateen_AIA_test_1(){
    80024164:	ec06                	sd	ra,24(sp)
    80024166:	e822                	sd	s0,16(sp)
    80024168:	e426                	sd	s1,8(sp)
    TEST_START();
    8002416a:	35a0b0ef          	jal	8002f4c4 <printf>
    8002416e:	4529                	li	a0,10
    80024170:	0420a0ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80024174:	4511                	li	a0,4
    80024176:	d9fdc0ef          	jal	80000f14 <goto_priv>
    //当mstateen.AIA=0,hu mode 不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    8002417a:	4785                	li	a5,1
    8002417c:	17ee                	slli	a5,a5,0x3b
    8002417e:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80024182:	4505                	li	a0,1
    80024184:	d91dc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024188:	c91dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    8002418c:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024190:	ecbdc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("HU mode accesss hvien register cause to illegal except when mstateen.aia=0",
    80024194:	08c00593          	li	a1,140
    80024198:	00017617          	auipc	a2,0x17
    8002419c:	60060613          	addi	a2,a2,1536 # 8003b798 <__func__.0+0x93b0>
    800241a0:	0000e517          	auipc	a0,0xe
    800241a4:	54050513          	addi	a0,a0,1344 # 800326e0 <__func__.0+0x2f8>
    800241a8:	31c0b0ef          	jal	8002f4c4 <printf>
    800241ac:	00038797          	auipc	a5,0x38
    800241b0:	e657c783          	lbu	a5,-411(a5) # 8005c011 <excpt+0x1>
    800241b4:	00038497          	auipc	s1,0x38
    800241b8:	e5c48493          	addi	s1,s1,-420 # 8005c010 <excpt>
    800241bc:	0000e597          	auipc	a1,0xe
    800241c0:	4fc58593          	addi	a1,a1,1276 # 800326b8 <__func__.0+0x2d0>
    800241c4:	cf89                	beqz	a5,800241de <stateen_AIA_test_1+0x8c>
    800241c6:	6498                	ld	a4,8(s1)
    800241c8:	4789                	li	a5,2
    800241ca:	0000e597          	auipc	a1,0xe
    800241ce:	4de58593          	addi	a1,a1,1246 # 800326a8 <__func__.0+0x2c0>
    800241d2:	00f70663          	beq	a4,a5,800241de <stateen_AIA_test_1+0x8c>
    800241d6:	0000e597          	auipc	a1,0xe
    800241da:	4e258593          	addi	a1,a1,1250 # 800326b8 <__func__.0+0x2d0>
    800241de:	0000e517          	auipc	a0,0xe
    800241e2:	51a50513          	addi	a0,a0,1306 # 800326f8 <__func__.0+0x310>
    800241e6:	2de0b0ef          	jal	8002f4c4 <printf>
    800241ea:	00038797          	auipc	a5,0x38
    800241ee:	e277c783          	lbu	a5,-473(a5) # 8005c011 <excpt+0x1>
    800241f2:	c789                	beqz	a5,800241fc <stateen_AIA_test_1+0xaa>
    800241f4:	6498                	ld	a4,8(s1)
    800241f6:	4789                	li	a5,2
    800241f8:	00f70c63          	beq	a4,a5,80024210 <stateen_AIA_test_1+0xbe>
    800241fc:	0000e517          	auipc	a0,0xe
    80024200:	50450513          	addi	a0,a0,1284 # 80032700 <__func__.0+0x318>
    80024204:	2c00b0ef          	jal	8002f4c4 <printf>
    80024208:	02900513          	li	a0,41
    8002420c:	7a7090ef          	jal	8002e1b2 <putchar>
    80024210:	4529                	li	a0,10
    80024212:	7a1090ef          	jal	8002e1b2 <putchar>
    80024216:	00038797          	auipc	a5,0x38
    8002421a:	dfb7c783          	lbu	a5,-517(a5) # 8005c011 <excpt+0x1>
    8002421e:	4401                	li	s0,0
    80024220:	c789                	beqz	a5,8002422a <stateen_AIA_test_1+0xd8>
    80024222:	6480                	ld	s0,8(s1)
    80024224:	1479                	addi	s0,s0,-2
    80024226:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    8002422a:	4505                	li	a0,1
    8002422c:	ce9dc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024230:	be9dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024234:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024238:	e23dc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("HU mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    8002423c:	08c00593          	li	a1,140
    80024240:	00017617          	auipc	a2,0x17
    80024244:	5a860613          	addi	a2,a2,1448 # 8003b7e8 <__func__.0+0x9400>
    80024248:	0000e517          	auipc	a0,0xe
    8002424c:	49850513          	addi	a0,a0,1176 # 800326e0 <__func__.0+0x2f8>
    80024250:	2740b0ef          	jal	8002f4c4 <printf>
    80024254:	00038797          	auipc	a5,0x38
    80024258:	dbd7c783          	lbu	a5,-579(a5) # 8005c011 <excpt+0x1>
    8002425c:	0000e597          	auipc	a1,0xe
    80024260:	45c58593          	addi	a1,a1,1116 # 800326b8 <__func__.0+0x2d0>
    80024264:	cf89                	beqz	a5,8002427e <stateen_AIA_test_1+0x12c>
    80024266:	6498                	ld	a4,8(s1)
    80024268:	4789                	li	a5,2
    8002426a:	0000e597          	auipc	a1,0xe
    8002426e:	43e58593          	addi	a1,a1,1086 # 800326a8 <__func__.0+0x2c0>
    80024272:	00f70663          	beq	a4,a5,8002427e <stateen_AIA_test_1+0x12c>
    80024276:	0000e597          	auipc	a1,0xe
    8002427a:	44258593          	addi	a1,a1,1090 # 800326b8 <__func__.0+0x2d0>
    8002427e:	0000e517          	auipc	a0,0xe
    80024282:	47a50513          	addi	a0,a0,1146 # 800326f8 <__func__.0+0x310>
    80024286:	23e0b0ef          	jal	8002f4c4 <printf>
    8002428a:	00038797          	auipc	a5,0x38
    8002428e:	d877c783          	lbu	a5,-633(a5) # 8005c011 <excpt+0x1>
    80024292:	c789                	beqz	a5,8002429c <stateen_AIA_test_1+0x14a>
    80024294:	6498                	ld	a4,8(s1)
    80024296:	4789                	li	a5,2
    80024298:	00f70c63          	beq	a4,a5,800242b0 <stateen_AIA_test_1+0x15e>
    8002429c:	0000e517          	auipc	a0,0xe
    800242a0:	46450513          	addi	a0,a0,1124 # 80032700 <__func__.0+0x318>
    800242a4:	2200b0ef          	jal	8002f4c4 <printf>
    800242a8:	02900513          	li	a0,41
    800242ac:	707090ef          	jal	8002e1b2 <putchar>
    800242b0:	4529                	li	a0,10
    800242b2:	701090ef          	jal	8002e1b2 <putchar>
    800242b6:	c801                	beqz	s0,800242c6 <stateen_AIA_test_1+0x174>
    800242b8:	00038797          	auipc	a5,0x38
    800242bc:	d597c783          	lbu	a5,-679(a5) # 8005c011 <excpt+0x1>
    800242c0:	4401                	li	s0,0
    800242c2:	18079363          	bnez	a5,80024448 <stateen_AIA_test_1+0x2f6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    800242c6:	4505                	li	a0,1
    800242c8:	c4ddc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800242cc:	b4ddc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPI);
    800242d0:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800242d4:	d87dc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("HU mode accesss stopi register cause to illegal except when mstateen.aia=0",
    800242d8:	08c00593          	li	a1,140
    800242dc:	00017617          	auipc	a2,0x17
    800242e0:	55c60613          	addi	a2,a2,1372 # 8003b838 <__func__.0+0x9450>
    800242e4:	0000e517          	auipc	a0,0xe
    800242e8:	3fc50513          	addi	a0,a0,1020 # 800326e0 <__func__.0+0x2f8>
    800242ec:	1d80b0ef          	jal	8002f4c4 <printf>
    800242f0:	00038797          	auipc	a5,0x38
    800242f4:	d217c783          	lbu	a5,-735(a5) # 8005c011 <excpt+0x1>
    800242f8:	0000e597          	auipc	a1,0xe
    800242fc:	3c058593          	addi	a1,a1,960 # 800326b8 <__func__.0+0x2d0>
    80024300:	cf89                	beqz	a5,8002431a <stateen_AIA_test_1+0x1c8>
    80024302:	6498                	ld	a4,8(s1)
    80024304:	4789                	li	a5,2
    80024306:	0000e597          	auipc	a1,0xe
    8002430a:	3a258593          	addi	a1,a1,930 # 800326a8 <__func__.0+0x2c0>
    8002430e:	00f70663          	beq	a4,a5,8002431a <stateen_AIA_test_1+0x1c8>
    80024312:	0000e597          	auipc	a1,0xe
    80024316:	3a658593          	addi	a1,a1,934 # 800326b8 <__func__.0+0x2d0>
    8002431a:	0000e517          	auipc	a0,0xe
    8002431e:	3de50513          	addi	a0,a0,990 # 800326f8 <__func__.0+0x310>
    80024322:	1a20b0ef          	jal	8002f4c4 <printf>
    80024326:	00038797          	auipc	a5,0x38
    8002432a:	ceb7c783          	lbu	a5,-789(a5) # 8005c011 <excpt+0x1>
    8002432e:	c789                	beqz	a5,80024338 <stateen_AIA_test_1+0x1e6>
    80024330:	6498                	ld	a4,8(s1)
    80024332:	4789                	li	a5,2
    80024334:	00f70c63          	beq	a4,a5,8002434c <stateen_AIA_test_1+0x1fa>
    80024338:	0000e517          	auipc	a0,0xe
    8002433c:	3c850513          	addi	a0,a0,968 # 80032700 <__func__.0+0x318>
    80024340:	1840b0ef          	jal	8002f4c4 <printf>
    80024344:	02900513          	li	a0,41
    80024348:	66b090ef          	jal	8002e1b2 <putchar>
    8002434c:	4529                	li	a0,10
    8002434e:	665090ef          	jal	8002e1b2 <putchar>
    80024352:	c801                	beqz	s0,80024362 <stateen_AIA_test_1+0x210>
    80024354:	00038797          	auipc	a5,0x38
    80024358:	cbd7c783          	lbu	a5,-835(a5) # 8005c011 <excpt+0x1>
    8002435c:	4401                	li	s0,0
    8002435e:	0e079063          	bnez	a5,8002443e <stateen_AIA_test_1+0x2ec>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80024362:	4505                	li	a0,1
    80024364:	bb1dc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024368:	ab1dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    8002436c:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024370:	cebdc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    80024374:	08c00593          	li	a1,140
    80024378:	00017617          	auipc	a2,0x17
    8002437c:	51060613          	addi	a2,a2,1296 # 8003b888 <__func__.0+0x94a0>
    80024380:	0000e517          	auipc	a0,0xe
    80024384:	36050513          	addi	a0,a0,864 # 800326e0 <__func__.0+0x2f8>
    80024388:	13c0b0ef          	jal	8002f4c4 <printf>
    8002438c:	00038797          	auipc	a5,0x38
    80024390:	c857c783          	lbu	a5,-891(a5) # 8005c011 <excpt+0x1>
    80024394:	0000e597          	auipc	a1,0xe
    80024398:	32458593          	addi	a1,a1,804 # 800326b8 <__func__.0+0x2d0>
    8002439c:	cf89                	beqz	a5,800243b6 <stateen_AIA_test_1+0x264>
    8002439e:	6498                	ld	a4,8(s1)
    800243a0:	4789                	li	a5,2
    800243a2:	0000e597          	auipc	a1,0xe
    800243a6:	30658593          	addi	a1,a1,774 # 800326a8 <__func__.0+0x2c0>
    800243aa:	00f70663          	beq	a4,a5,800243b6 <stateen_AIA_test_1+0x264>
    800243ae:	0000e597          	auipc	a1,0xe
    800243b2:	30a58593          	addi	a1,a1,778 # 800326b8 <__func__.0+0x2d0>
    800243b6:	0000e517          	auipc	a0,0xe
    800243ba:	34250513          	addi	a0,a0,834 # 800326f8 <__func__.0+0x310>
    800243be:	1060b0ef          	jal	8002f4c4 <printf>
    800243c2:	00038797          	auipc	a5,0x38
    800243c6:	c4f7c783          	lbu	a5,-945(a5) # 8005c011 <excpt+0x1>
    800243ca:	c789                	beqz	a5,800243d4 <stateen_AIA_test_1+0x282>
    800243cc:	6498                	ld	a4,8(s1)
    800243ce:	4789                	li	a5,2
    800243d0:	00f70c63          	beq	a4,a5,800243e8 <stateen_AIA_test_1+0x296>
    800243d4:	0000e517          	auipc	a0,0xe
    800243d8:	32c50513          	addi	a0,a0,812 # 80032700 <__func__.0+0x318>
    800243dc:	0e80b0ef          	jal	8002f4c4 <printf>
    800243e0:	02900513          	li	a0,41
    800243e4:	5cf090ef          	jal	8002e1b2 <putchar>
    800243e8:	4529                	li	a0,10
    800243ea:	5c9090ef          	jal	8002e1b2 <putchar>
    800243ee:	c015                	beqz	s0,80024412 <stateen_AIA_test_1+0x2c0>
    800243f0:	00038417          	auipc	s0,0x38
    800243f4:	c2144403          	lbu	s0,-991(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800243f8:	0000e597          	auipc	a1,0xe
    800243fc:	2c058593          	addi	a1,a1,704 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    80024400:	cc11                	beqz	s0,8002441c <stateen_AIA_test_1+0x2ca>
    80024402:	6498                	ld	a4,8(s1)
    80024404:	4789                	li	a5,2
    TEST_END();
    80024406:	0000e597          	auipc	a1,0xe
    8002440a:	2a258593          	addi	a1,a1,674 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    8002440e:	00f70763          	beq	a4,a5,8002441c <stateen_AIA_test_1+0x2ca>
    80024412:	4401                	li	s0,0
    TEST_END();
    80024414:	0000e597          	auipc	a1,0xe
    80024418:	2a458593          	addi	a1,a1,676 # 800326b8 <__func__.0+0x2d0>
    8002441c:	0000e517          	auipc	a0,0xe
    80024420:	34450513          	addi	a0,a0,836 # 80032760 <__func__.0+0x378>
    80024424:	0a00b0ef          	jal	8002f4c4 <printf>
    80024428:	4511                	li	a0,4
    8002442a:	aebdc0ef          	jal	80000f14 <goto_priv>
    8002442e:	b48dd0ef          	jal	80001776 <reset_state>

}
    80024432:	60e2                	ld	ra,24(sp)
    80024434:	8522                	mv	a0,s0
    80024436:	6442                	ld	s0,16(sp)
    80024438:	64a2                	ld	s1,8(sp)
    8002443a:	6105                	addi	sp,sp,32
    8002443c:	8082                	ret
    TEST_ASSERT("HU mode accesss stopi register cause to illegal except when mstateen.aia=0",
    8002443e:	6480                	ld	s0,8(s1)
    80024440:	1479                	addi	s0,s0,-2
    80024442:	00143413          	seqz	s0,s0
    80024446:	bf31                	j	80024362 <stateen_AIA_test_1+0x210>
    TEST_ASSERT("HU mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024448:	6480                	ld	s0,8(s1)
    8002444a:	1479                	addi	s0,s0,-2
    8002444c:	00143413          	seqz	s0,s0
    80024450:	bd9d                	j	800242c6 <stateen_AIA_test_1+0x174>

0000000080024452 <stateen_AIA_test_2>:

bool stateen_AIA_test_2(){
    80024452:	1101                	addi	sp,sp,-32

    TEST_START();
    80024454:	0000d597          	auipc	a1,0xd
    80024458:	7e458593          	addi	a1,a1,2020 # 80031c38 <__func__.21>
    8002445c:	0000e517          	auipc	a0,0xe
    80024460:	26c50513          	addi	a0,a0,620 # 800326c8 <__func__.0+0x2e0>
bool stateen_AIA_test_2(){
    80024464:	ec06                	sd	ra,24(sp)
    80024466:	e822                	sd	s0,16(sp)
    80024468:	e426                	sd	s1,8(sp)
    TEST_START();
    8002446a:	05a0b0ef          	jal	8002f4c4 <printf>
    8002446e:	4529                	li	a0,10
    80024470:	543090ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80024474:	4511                	li	a0,4
    80024476:	a9fdc0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    8002447a:	4785                	li	a5,1
    8002447c:	17ee                	slli	a5,a5,0x3b
    8002447e:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    80024482:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.AIA=1,hstateen.AIA=0,v=1时,不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    goto_priv(PRIV_VU);
    80024486:	4501                	li	a0,0
    80024488:	a8ddc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002448c:	98ddc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024490:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024494:	bc7dc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("VU mode accesss hvien register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024498:	08c00593          	li	a1,140
    8002449c:	00017617          	auipc	a2,0x17
    800244a0:	43c60613          	addi	a2,a2,1084 # 8003b8d8 <__func__.0+0x94f0>
    800244a4:	0000e517          	auipc	a0,0xe
    800244a8:	23c50513          	addi	a0,a0,572 # 800326e0 <__func__.0+0x2f8>
    800244ac:	0180b0ef          	jal	8002f4c4 <printf>
    800244b0:	00038797          	auipc	a5,0x38
    800244b4:	b617c783          	lbu	a5,-1183(a5) # 8005c011 <excpt+0x1>
    800244b8:	00038497          	auipc	s1,0x38
    800244bc:	b5848493          	addi	s1,s1,-1192 # 8005c010 <excpt>
    800244c0:	0000e597          	auipc	a1,0xe
    800244c4:	1f858593          	addi	a1,a1,504 # 800326b8 <__func__.0+0x2d0>
    800244c8:	cf89                	beqz	a5,800244e2 <stateen_AIA_test_2+0x90>
    800244ca:	6498                	ld	a4,8(s1)
    800244cc:	47d9                	li	a5,22
    800244ce:	0000e597          	auipc	a1,0xe
    800244d2:	1da58593          	addi	a1,a1,474 # 800326a8 <__func__.0+0x2c0>
    800244d6:	00f70663          	beq	a4,a5,800244e2 <stateen_AIA_test_2+0x90>
    800244da:	0000e597          	auipc	a1,0xe
    800244de:	1de58593          	addi	a1,a1,478 # 800326b8 <__func__.0+0x2d0>
    800244e2:	0000e517          	auipc	a0,0xe
    800244e6:	21650513          	addi	a0,a0,534 # 800326f8 <__func__.0+0x310>
    800244ea:	7db0a0ef          	jal	8002f4c4 <printf>
    800244ee:	00038797          	auipc	a5,0x38
    800244f2:	b237c783          	lbu	a5,-1245(a5) # 8005c011 <excpt+0x1>
    800244f6:	c789                	beqz	a5,80024500 <stateen_AIA_test_2+0xae>
    800244f8:	6498                	ld	a4,8(s1)
    800244fa:	47d9                	li	a5,22
    800244fc:	00f70c63          	beq	a4,a5,80024514 <stateen_AIA_test_2+0xc2>
    80024500:	0000e517          	auipc	a0,0xe
    80024504:	20050513          	addi	a0,a0,512 # 80032700 <__func__.0+0x318>
    80024508:	7bd0a0ef          	jal	8002f4c4 <printf>
    8002450c:	02900513          	li	a0,41
    80024510:	4a3090ef          	jal	8002e1b2 <putchar>
    80024514:	4529                	li	a0,10
    80024516:	49d090ef          	jal	8002e1b2 <putchar>
    8002451a:	00038797          	auipc	a5,0x38
    8002451e:	af77c783          	lbu	a5,-1289(a5) # 8005c011 <excpt+0x1>
    80024522:	4401                	li	s0,0
    80024524:	c789                	beqz	a5,8002452e <stateen_AIA_test_2+0xdc>
    80024526:	6480                	ld	s0,8(s1)
    80024528:	1429                	addi	s0,s0,-22
    8002452a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8002452e:	4501                	li	a0,0
    80024530:	9e5dc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024534:	8e5dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024538:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002453c:	b1fdc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("VU mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024540:	08c00593          	li	a1,140
    80024544:	00017617          	auipc	a2,0x17
    80024548:	3e460613          	addi	a2,a2,996 # 8003b928 <__func__.0+0x9540>
    8002454c:	0000e517          	auipc	a0,0xe
    80024550:	19450513          	addi	a0,a0,404 # 800326e0 <__func__.0+0x2f8>
    80024554:	7710a0ef          	jal	8002f4c4 <printf>
    80024558:	00038797          	auipc	a5,0x38
    8002455c:	ab97c783          	lbu	a5,-1351(a5) # 8005c011 <excpt+0x1>
    80024560:	0000e597          	auipc	a1,0xe
    80024564:	15858593          	addi	a1,a1,344 # 800326b8 <__func__.0+0x2d0>
    80024568:	cf89                	beqz	a5,80024582 <stateen_AIA_test_2+0x130>
    8002456a:	6498                	ld	a4,8(s1)
    8002456c:	47d9                	li	a5,22
    8002456e:	0000e597          	auipc	a1,0xe
    80024572:	13a58593          	addi	a1,a1,314 # 800326a8 <__func__.0+0x2c0>
    80024576:	00f70663          	beq	a4,a5,80024582 <stateen_AIA_test_2+0x130>
    8002457a:	0000e597          	auipc	a1,0xe
    8002457e:	13e58593          	addi	a1,a1,318 # 800326b8 <__func__.0+0x2d0>
    80024582:	0000e517          	auipc	a0,0xe
    80024586:	17650513          	addi	a0,a0,374 # 800326f8 <__func__.0+0x310>
    8002458a:	73b0a0ef          	jal	8002f4c4 <printf>
    8002458e:	00038797          	auipc	a5,0x38
    80024592:	a837c783          	lbu	a5,-1405(a5) # 8005c011 <excpt+0x1>
    80024596:	c789                	beqz	a5,800245a0 <stateen_AIA_test_2+0x14e>
    80024598:	6498                	ld	a4,8(s1)
    8002459a:	47d9                	li	a5,22
    8002459c:	00f70c63          	beq	a4,a5,800245b4 <stateen_AIA_test_2+0x162>
    800245a0:	0000e517          	auipc	a0,0xe
    800245a4:	16050513          	addi	a0,a0,352 # 80032700 <__func__.0+0x318>
    800245a8:	71d0a0ef          	jal	8002f4c4 <printf>
    800245ac:	02900513          	li	a0,41
    800245b0:	403090ef          	jal	8002e1b2 <putchar>
    800245b4:	4529                	li	a0,10
    800245b6:	3fd090ef          	jal	8002e1b2 <putchar>
    800245ba:	c801                	beqz	s0,800245ca <stateen_AIA_test_2+0x178>
    800245bc:	00038797          	auipc	a5,0x38
    800245c0:	a557c783          	lbu	a5,-1451(a5) # 8005c011 <excpt+0x1>
    800245c4:	4401                	li	s0,0
    800245c6:	18079363          	bnez	a5,8002474c <stateen_AIA_test_2+0x2fa>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    800245ca:	4501                	li	a0,0
    800245cc:	949dc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800245d0:	849dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPI);
    800245d4:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800245d8:	a83dc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("VU mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800245dc:	08c00593          	li	a1,140
    800245e0:	00017617          	auipc	a2,0x17
    800245e4:	3a060613          	addi	a2,a2,928 # 8003b980 <__func__.0+0x9598>
    800245e8:	0000e517          	auipc	a0,0xe
    800245ec:	0f850513          	addi	a0,a0,248 # 800326e0 <__func__.0+0x2f8>
    800245f0:	6d50a0ef          	jal	8002f4c4 <printf>
    800245f4:	00038797          	auipc	a5,0x38
    800245f8:	a1d7c783          	lbu	a5,-1507(a5) # 8005c011 <excpt+0x1>
    800245fc:	0000e597          	auipc	a1,0xe
    80024600:	0bc58593          	addi	a1,a1,188 # 800326b8 <__func__.0+0x2d0>
    80024604:	cf89                	beqz	a5,8002461e <stateen_AIA_test_2+0x1cc>
    80024606:	6498                	ld	a4,8(s1)
    80024608:	47d9                	li	a5,22
    8002460a:	0000e597          	auipc	a1,0xe
    8002460e:	09e58593          	addi	a1,a1,158 # 800326a8 <__func__.0+0x2c0>
    80024612:	00f70663          	beq	a4,a5,8002461e <stateen_AIA_test_2+0x1cc>
    80024616:	0000e597          	auipc	a1,0xe
    8002461a:	0a258593          	addi	a1,a1,162 # 800326b8 <__func__.0+0x2d0>
    8002461e:	0000e517          	auipc	a0,0xe
    80024622:	0da50513          	addi	a0,a0,218 # 800326f8 <__func__.0+0x310>
    80024626:	69f0a0ef          	jal	8002f4c4 <printf>
    8002462a:	00038797          	auipc	a5,0x38
    8002462e:	9e77c783          	lbu	a5,-1561(a5) # 8005c011 <excpt+0x1>
    80024632:	c789                	beqz	a5,8002463c <stateen_AIA_test_2+0x1ea>
    80024634:	6498                	ld	a4,8(s1)
    80024636:	47d9                	li	a5,22
    80024638:	00f70c63          	beq	a4,a5,80024650 <stateen_AIA_test_2+0x1fe>
    8002463c:	0000e517          	auipc	a0,0xe
    80024640:	0c450513          	addi	a0,a0,196 # 80032700 <__func__.0+0x318>
    80024644:	6810a0ef          	jal	8002f4c4 <printf>
    80024648:	02900513          	li	a0,41
    8002464c:	367090ef          	jal	8002e1b2 <putchar>
    80024650:	4529                	li	a0,10
    80024652:	361090ef          	jal	8002e1b2 <putchar>
    80024656:	c801                	beqz	s0,80024666 <stateen_AIA_test_2+0x214>
    80024658:	00038797          	auipc	a5,0x38
    8002465c:	9b97c783          	lbu	a5,-1607(a5) # 8005c011 <excpt+0x1>
    80024660:	4401                	li	s0,0
    80024662:	0e079063          	bnez	a5,80024742 <stateen_AIA_test_2+0x2f0>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80024666:	4501                	li	a0,0
    80024668:	8addc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002466c:	facdc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024670:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024674:	9e7dc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024678:	08c00593          	li	a1,140
    8002467c:	00017617          	auipc	a2,0x17
    80024680:	35460613          	addi	a2,a2,852 # 8003b9d0 <__func__.0+0x95e8>
    80024684:	0000e517          	auipc	a0,0xe
    80024688:	05c50513          	addi	a0,a0,92 # 800326e0 <__func__.0+0x2f8>
    8002468c:	6390a0ef          	jal	8002f4c4 <printf>
    80024690:	00038797          	auipc	a5,0x38
    80024694:	9817c783          	lbu	a5,-1663(a5) # 8005c011 <excpt+0x1>
    80024698:	0000e597          	auipc	a1,0xe
    8002469c:	02058593          	addi	a1,a1,32 # 800326b8 <__func__.0+0x2d0>
    800246a0:	cf89                	beqz	a5,800246ba <stateen_AIA_test_2+0x268>
    800246a2:	6498                	ld	a4,8(s1)
    800246a4:	47d9                	li	a5,22
    800246a6:	0000e597          	auipc	a1,0xe
    800246aa:	00258593          	addi	a1,a1,2 # 800326a8 <__func__.0+0x2c0>
    800246ae:	00f70663          	beq	a4,a5,800246ba <stateen_AIA_test_2+0x268>
    800246b2:	0000e597          	auipc	a1,0xe
    800246b6:	00658593          	addi	a1,a1,6 # 800326b8 <__func__.0+0x2d0>
    800246ba:	0000e517          	auipc	a0,0xe
    800246be:	03e50513          	addi	a0,a0,62 # 800326f8 <__func__.0+0x310>
    800246c2:	6030a0ef          	jal	8002f4c4 <printf>
    800246c6:	00038797          	auipc	a5,0x38
    800246ca:	94b7c783          	lbu	a5,-1717(a5) # 8005c011 <excpt+0x1>
    800246ce:	c789                	beqz	a5,800246d8 <stateen_AIA_test_2+0x286>
    800246d0:	6498                	ld	a4,8(s1)
    800246d2:	47d9                	li	a5,22
    800246d4:	00f70c63          	beq	a4,a5,800246ec <stateen_AIA_test_2+0x29a>
    800246d8:	0000e517          	auipc	a0,0xe
    800246dc:	02850513          	addi	a0,a0,40 # 80032700 <__func__.0+0x318>
    800246e0:	5e50a0ef          	jal	8002f4c4 <printf>
    800246e4:	02900513          	li	a0,41
    800246e8:	2cb090ef          	jal	8002e1b2 <putchar>
    800246ec:	4529                	li	a0,10
    800246ee:	2c5090ef          	jal	8002e1b2 <putchar>
    800246f2:	c015                	beqz	s0,80024716 <stateen_AIA_test_2+0x2c4>
    800246f4:	00038417          	auipc	s0,0x38
    800246f8:	91d44403          	lbu	s0,-1763(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    800246fc:	0000e597          	auipc	a1,0xe
    80024700:	fbc58593          	addi	a1,a1,-68 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024704:	cc11                	beqz	s0,80024720 <stateen_AIA_test_2+0x2ce>
    80024706:	6498                	ld	a4,8(s1)
    80024708:	47d9                	li	a5,22
    TEST_END();
    8002470a:	0000e597          	auipc	a1,0xe
    8002470e:	f9e58593          	addi	a1,a1,-98 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024712:	00f70763          	beq	a4,a5,80024720 <stateen_AIA_test_2+0x2ce>
    80024716:	4401                	li	s0,0
    TEST_END();
    80024718:	0000e597          	auipc	a1,0xe
    8002471c:	fa058593          	addi	a1,a1,-96 # 800326b8 <__func__.0+0x2d0>
    80024720:	0000e517          	auipc	a0,0xe
    80024724:	04050513          	addi	a0,a0,64 # 80032760 <__func__.0+0x378>
    80024728:	59d0a0ef          	jal	8002f4c4 <printf>
    8002472c:	4511                	li	a0,4
    8002472e:	fe6dc0ef          	jal	80000f14 <goto_priv>
    80024732:	844dd0ef          	jal	80001776 <reset_state>

}
    80024736:	60e2                	ld	ra,24(sp)
    80024738:	8522                	mv	a0,s0
    8002473a:	6442                	ld	s0,16(sp)
    8002473c:	64a2                	ld	s1,8(sp)
    8002473e:	6105                	addi	sp,sp,32
    80024740:	8082                	ret
    TEST_ASSERT("VU mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024742:	6480                	ld	s0,8(s1)
    80024744:	1429                	addi	s0,s0,-22
    80024746:	00143413          	seqz	s0,s0
    8002474a:	bf31                	j	80024666 <stateen_AIA_test_2+0x214>
    TEST_ASSERT("VU mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    8002474c:	6480                	ld	s0,8(s1)
    8002474e:	1429                	addi	s0,s0,-22
    80024750:	00143413          	seqz	s0,s0
    80024754:	bd9d                	j	800245ca <stateen_AIA_test_2+0x178>

0000000080024756 <stateen_AIA_test_3>:

bool stateen_AIA_test_3(){
    80024756:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=0,m mode 可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    80024758:	0000d597          	auipc	a1,0xd
    8002475c:	4f858593          	addi	a1,a1,1272 # 80031c50 <__func__.20>
    80024760:	0000e517          	auipc	a0,0xe
    80024764:	f6850513          	addi	a0,a0,-152 # 800326c8 <__func__.0+0x2e0>
bool stateen_AIA_test_3(){
    80024768:	ec06                	sd	ra,24(sp)
    8002476a:	e822                	sd	s0,16(sp)
    8002476c:	e426                	sd	s1,8(sp)
    TEST_START();
    8002476e:	5570a0ef          	jal	8002f4c4 <printf>
    80024772:	4529                	li	a0,10
    80024774:	23f090ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80024778:	4511                	li	a0,4
    8002477a:	f9adc0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    8002477e:	4785                	li	a5,1
    80024780:	17ee                	slli	a5,a5,0x3b
    80024782:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    80024786:	4511                	li	a0,4
    80024788:	f8cdc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002478c:	e8cdc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024790:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024794:	8c7dc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    80024798:	08c00593          	li	a1,140
    8002479c:	00017617          	auipc	a2,0x17
    800247a0:	28c60613          	addi	a2,a2,652 # 8003ba28 <__func__.0+0x9640>
    800247a4:	0000e517          	auipc	a0,0xe
    800247a8:	f3c50513          	addi	a0,a0,-196 # 800326e0 <__func__.0+0x2f8>
    800247ac:	5190a0ef          	jal	8002f4c4 <printf>
    800247b0:	00038797          	auipc	a5,0x38
    800247b4:	8617c783          	lbu	a5,-1951(a5) # 8005c011 <excpt+0x1>
    800247b8:	0000e597          	auipc	a1,0xe
    800247bc:	ef058593          	addi	a1,a1,-272 # 800326a8 <__func__.0+0x2c0>
    800247c0:	c789                	beqz	a5,800247ca <stateen_AIA_test_3+0x74>
    800247c2:	0000e597          	auipc	a1,0xe
    800247c6:	ef658593          	addi	a1,a1,-266 # 800326b8 <__func__.0+0x2d0>
    800247ca:	0000e517          	auipc	a0,0xe
    800247ce:	f2e50513          	addi	a0,a0,-210 # 800326f8 <__func__.0+0x310>
    800247d2:	4f30a0ef          	jal	8002f4c4 <printf>
    800247d6:	00038797          	auipc	a5,0x38
    800247da:	83b7c783          	lbu	a5,-1989(a5) # 8005c011 <excpt+0x1>
    800247de:	1c079d63          	bnez	a5,800249b8 <stateen_AIA_test_3+0x262>
    800247e2:	4529                	li	a0,10
    800247e4:	1cf090ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800247e8:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    800247ea:	00038497          	auipc	s1,0x38
    800247ee:	8274c483          	lbu	s1,-2009(s1) # 8005c011 <excpt+0x1>
    goto_priv(PRIV_M);
    800247f2:	f22dc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800247f6:	e22dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    800247fa:	608027f3          	csrr	a5,hvien

    excpt_info();
    800247fe:	85ddc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss hvictl register success  when mstateen.aia=0",
    80024802:	08c00593          	li	a1,140
    80024806:	00017617          	auipc	a2,0x17
    8002480a:	26260613          	addi	a2,a2,610 # 8003ba68 <__func__.0+0x9680>
    8002480e:	0000e517          	auipc	a0,0xe
    80024812:	ed250513          	addi	a0,a0,-302 # 800326e0 <__func__.0+0x2f8>
    80024816:	4af0a0ef          	jal	8002f4c4 <printf>
    8002481a:	00037797          	auipc	a5,0x37
    8002481e:	7f77c783          	lbu	a5,2039(a5) # 8005c011 <excpt+0x1>
    80024822:	0000e597          	auipc	a1,0xe
    80024826:	e9658593          	addi	a1,a1,-362 # 800326b8 <__func__.0+0x2d0>
    8002482a:	e789                	bnez	a5,80024834 <stateen_AIA_test_3+0xde>
    8002482c:	0000e597          	auipc	a1,0xe
    80024830:	e7c58593          	addi	a1,a1,-388 # 800326a8 <__func__.0+0x2c0>
    80024834:	0000e517          	auipc	a0,0xe
    80024838:	ec450513          	addi	a0,a0,-316 # 800326f8 <__func__.0+0x310>
    8002483c:	4890a0ef          	jal	8002f4c4 <printf>
    80024840:	00037797          	auipc	a5,0x37
    80024844:	7d17c783          	lbu	a5,2001(a5) # 8005c011 <excpt+0x1>
    80024848:	14079d63          	bnez	a5,800249a2 <stateen_AIA_test_3+0x24c>
    8002484c:	4529                	li	a0,10
    8002484e:	165090ef          	jal	8002e1b2 <putchar>
    80024852:	4401                	li	s0,0
    80024854:	e499                	bnez	s1,80024862 <stateen_AIA_test_3+0x10c>
    80024856:	00037417          	auipc	s0,0x37
    8002485a:	7bb44403          	lbu	s0,1979(s0) # 8005c011 <excpt+0x1>
    8002485e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80024862:	4511                	li	a0,4
    80024864:	eb0dc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024868:	db0dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002486c:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024870:	feadc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss stopi register success  when mstateen.aia=0",
    80024874:	08c00593          	li	a1,140
    80024878:	00017617          	auipc	a2,0x17
    8002487c:	23060613          	addi	a2,a2,560 # 8003baa8 <__func__.0+0x96c0>
    80024880:	0000e517          	auipc	a0,0xe
    80024884:	e6050513          	addi	a0,a0,-416 # 800326e0 <__func__.0+0x2f8>
    80024888:	43d0a0ef          	jal	8002f4c4 <printf>
    8002488c:	00037797          	auipc	a5,0x37
    80024890:	7857c783          	lbu	a5,1925(a5) # 8005c011 <excpt+0x1>
    80024894:	0000e597          	auipc	a1,0xe
    80024898:	e2458593          	addi	a1,a1,-476 # 800326b8 <__func__.0+0x2d0>
    8002489c:	e789                	bnez	a5,800248a6 <stateen_AIA_test_3+0x150>
    8002489e:	0000e597          	auipc	a1,0xe
    800248a2:	e0a58593          	addi	a1,a1,-502 # 800326a8 <__func__.0+0x2c0>
    800248a6:	0000e517          	auipc	a0,0xe
    800248aa:	e5250513          	addi	a0,a0,-430 # 800326f8 <__func__.0+0x310>
    800248ae:	4170a0ef          	jal	8002f4c4 <printf>
    800248b2:	00037797          	auipc	a5,0x37
    800248b6:	75f7c783          	lbu	a5,1887(a5) # 8005c011 <excpt+0x1>
    800248ba:	0c079963          	bnez	a5,8002498c <stateen_AIA_test_3+0x236>
    800248be:	4529                	li	a0,10
    800248c0:	0f3090ef          	jal	8002e1b2 <putchar>
    800248c4:	c419                	beqz	s0,800248d2 <stateen_AIA_test_3+0x17c>
    800248c6:	00037417          	auipc	s0,0x37
    800248ca:	74b44403          	lbu	s0,1867(s0) # 8005c011 <excpt+0x1>
    800248ce:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800248d2:	4511                	li	a0,4
    800248d4:	e40dc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800248d8:	d40dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800248dc:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800248e0:	f7adc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    800248e4:	08c00593          	li	a1,140
    800248e8:	00017617          	auipc	a2,0x17
    800248ec:	20060613          	addi	a2,a2,512 # 8003bae8 <__func__.0+0x9700>
    800248f0:	0000e517          	auipc	a0,0xe
    800248f4:	df050513          	addi	a0,a0,-528 # 800326e0 <__func__.0+0x2f8>
    800248f8:	3cd0a0ef          	jal	8002f4c4 <printf>
    800248fc:	00037797          	auipc	a5,0x37
    80024900:	7157c783          	lbu	a5,1813(a5) # 8005c011 <excpt+0x1>
    80024904:	0000e597          	auipc	a1,0xe
    80024908:	db458593          	addi	a1,a1,-588 # 800326b8 <__func__.0+0x2d0>
    8002490c:	e789                	bnez	a5,80024916 <stateen_AIA_test_3+0x1c0>
    8002490e:	0000e597          	auipc	a1,0xe
    80024912:	d9a58593          	addi	a1,a1,-614 # 800326a8 <__func__.0+0x2c0>
    80024916:	0000e517          	auipc	a0,0xe
    8002491a:	de250513          	addi	a0,a0,-542 # 800326f8 <__func__.0+0x310>
    8002491e:	3a70a0ef          	jal	8002f4c4 <printf>
    80024922:	00037797          	auipc	a5,0x37
    80024926:	6ef7c783          	lbu	a5,1775(a5) # 8005c011 <excpt+0x1>
    8002492a:	e7b1                	bnez	a5,80024976 <stateen_AIA_test_3+0x220>
    8002492c:	4529                	li	a0,10
    8002492e:	085090ef          	jal	8002e1b2 <putchar>
    80024932:	c411                	beqz	s0,8002493e <stateen_AIA_test_3+0x1e8>
    80024934:	00037797          	auipc	a5,0x37
    80024938:	6dd7c783          	lbu	a5,1757(a5) # 8005c011 <excpt+0x1>
    8002493c:	c79d                	beqz	a5,8002496a <stateen_AIA_test_3+0x214>
    8002493e:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80024940:	0000e597          	auipc	a1,0xe
    80024944:	d7858593          	addi	a1,a1,-648 # 800326b8 <__func__.0+0x2d0>
    80024948:	0000e517          	auipc	a0,0xe
    8002494c:	e1850513          	addi	a0,a0,-488 # 80032760 <__func__.0+0x378>
    80024950:	3750a0ef          	jal	8002f4c4 <printf>
    80024954:	4511                	li	a0,4
    80024956:	dbedc0ef          	jal	80000f14 <goto_priv>
    8002495a:	e1ddc0ef          	jal	80001776 <reset_state>

}
    8002495e:	60e2                	ld	ra,24(sp)
    80024960:	8522                	mv	a0,s0
    80024962:	6442                	ld	s0,16(sp)
    80024964:	64a2                	ld	s1,8(sp)
    80024966:	6105                	addi	sp,sp,32
    80024968:	8082                	ret
    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    8002496a:	4405                	li	s0,1
    TEST_END();
    8002496c:	0000e597          	auipc	a1,0xe
    80024970:	d3c58593          	addi	a1,a1,-708 # 800326a8 <__func__.0+0x2c0>
    80024974:	bfd1                	j	80024948 <stateen_AIA_test_3+0x1f2>
    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    80024976:	0000e517          	auipc	a0,0xe
    8002497a:	d8a50513          	addi	a0,a0,-630 # 80032700 <__func__.0+0x318>
    8002497e:	3470a0ef          	jal	8002f4c4 <printf>
    80024982:	02900513          	li	a0,41
    80024986:	02d090ef          	jal	8002e1b2 <putchar>
    8002498a:	b74d                	j	8002492c <stateen_AIA_test_3+0x1d6>
    TEST_ASSERT("m mode accesss stopi register success  when mstateen.aia=0",
    8002498c:	0000e517          	auipc	a0,0xe
    80024990:	d7450513          	addi	a0,a0,-652 # 80032700 <__func__.0+0x318>
    80024994:	3310a0ef          	jal	8002f4c4 <printf>
    80024998:	02900513          	li	a0,41
    8002499c:	017090ef          	jal	8002e1b2 <putchar>
    800249a0:	bf39                	j	800248be <stateen_AIA_test_3+0x168>
    TEST_ASSERT("m mode accesss hvictl register success  when mstateen.aia=0",
    800249a2:	0000e517          	auipc	a0,0xe
    800249a6:	d5e50513          	addi	a0,a0,-674 # 80032700 <__func__.0+0x318>
    800249aa:	31b0a0ef          	jal	8002f4c4 <printf>
    800249ae:	02900513          	li	a0,41
    800249b2:	001090ef          	jal	8002e1b2 <putchar>
    800249b6:	bd59                	j	8002484c <stateen_AIA_test_3+0xf6>
    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    800249b8:	0000e517          	auipc	a0,0xe
    800249bc:	d4850513          	addi	a0,a0,-696 # 80032700 <__func__.0+0x318>
    800249c0:	3050a0ef          	jal	8002f4c4 <printf>
    800249c4:	02900513          	li	a0,41
    800249c8:	7ea090ef          	jal	8002e1b2 <putchar>
    800249cc:	bd19                	j	800247e2 <stateen_AIA_test_3+0x8c>

00000000800249ce <stateen_AIA_test_4>:


bool stateen_AIA_test_4(){
    800249ce:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=1,hstateen.AIA=0,v=1时不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    800249d0:	0000d597          	auipc	a1,0xd
    800249d4:	29858593          	addi	a1,a1,664 # 80031c68 <__func__.19>
    800249d8:	0000e517          	auipc	a0,0xe
    800249dc:	cf050513          	addi	a0,a0,-784 # 800326c8 <__func__.0+0x2e0>
bool stateen_AIA_test_4(){
    800249e0:	ec06                	sd	ra,24(sp)
    800249e2:	e822                	sd	s0,16(sp)
    800249e4:	e426                	sd	s1,8(sp)
    TEST_START();
    800249e6:	2df0a0ef          	jal	8002f4c4 <printf>
    800249ea:	4529                	li	a0,10
    800249ec:	7c6090ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    800249f0:	4511                	li	a0,4
    800249f2:	d22dc0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    800249f6:	4785                	li	a5,1
    800249f8:	17ee                	slli	a5,a5,0x3b
    800249fa:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    800249fe:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80024a02:	30c025f3          	csrr	a1,mstateen0
    80024a06:	00016517          	auipc	a0,0x16
    80024a0a:	4e250513          	addi	a0,a0,1250 # 8003aee8 <__func__.0+0x8b00>
    80024a0e:	2b70a0ef          	jal	8002f4c4 <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80024a12:	60c025f3          	csrr	a1,hstateen0
    80024a16:	00016517          	auipc	a0,0x16
    80024a1a:	4e250513          	addi	a0,a0,1250 # 8003aef8 <__func__.0+0x8b10>
    80024a1e:	2a70a0ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);
    80024a22:	4509                	li	a0,2
    80024a24:	cf0dc0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024a28:	bf0dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024a2c:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024a30:	e2adc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss hvien register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024a34:	08c00593          	li	a1,140
    80024a38:	00017617          	auipc	a2,0x17
    80024a3c:	0f060613          	addi	a2,a2,240 # 8003bb28 <__func__.0+0x9740>
    80024a40:	0000e517          	auipc	a0,0xe
    80024a44:	ca050513          	addi	a0,a0,-864 # 800326e0 <__func__.0+0x2f8>
    80024a48:	27d0a0ef          	jal	8002f4c4 <printf>
    80024a4c:	00037797          	auipc	a5,0x37
    80024a50:	5c57c783          	lbu	a5,1477(a5) # 8005c011 <excpt+0x1>
    80024a54:	00037497          	auipc	s1,0x37
    80024a58:	5bc48493          	addi	s1,s1,1468 # 8005c010 <excpt>
    80024a5c:	0000e597          	auipc	a1,0xe
    80024a60:	c5c58593          	addi	a1,a1,-932 # 800326b8 <__func__.0+0x2d0>
    80024a64:	cf89                	beqz	a5,80024a7e <stateen_AIA_test_4+0xb0>
    80024a66:	6498                	ld	a4,8(s1)
    80024a68:	47d9                	li	a5,22
    80024a6a:	0000e597          	auipc	a1,0xe
    80024a6e:	c3e58593          	addi	a1,a1,-962 # 800326a8 <__func__.0+0x2c0>
    80024a72:	00f70663          	beq	a4,a5,80024a7e <stateen_AIA_test_4+0xb0>
    80024a76:	0000e597          	auipc	a1,0xe
    80024a7a:	c4258593          	addi	a1,a1,-958 # 800326b8 <__func__.0+0x2d0>
    80024a7e:	0000e517          	auipc	a0,0xe
    80024a82:	c7a50513          	addi	a0,a0,-902 # 800326f8 <__func__.0+0x310>
    80024a86:	23f0a0ef          	jal	8002f4c4 <printf>
    80024a8a:	00037797          	auipc	a5,0x37
    80024a8e:	5877c783          	lbu	a5,1415(a5) # 8005c011 <excpt+0x1>
    80024a92:	c789                	beqz	a5,80024a9c <stateen_AIA_test_4+0xce>
    80024a94:	6498                	ld	a4,8(s1)
    80024a96:	47d9                	li	a5,22
    80024a98:	00f70c63          	beq	a4,a5,80024ab0 <stateen_AIA_test_4+0xe2>
    80024a9c:	0000e517          	auipc	a0,0xe
    80024aa0:	c6450513          	addi	a0,a0,-924 # 80032700 <__func__.0+0x318>
    80024aa4:	2210a0ef          	jal	8002f4c4 <printf>
    80024aa8:	02900513          	li	a0,41
    80024aac:	706090ef          	jal	8002e1b2 <putchar>
    80024ab0:	4529                	li	a0,10
    80024ab2:	700090ef          	jal	8002e1b2 <putchar>
    80024ab6:	00037797          	auipc	a5,0x37
    80024aba:	55b7c783          	lbu	a5,1371(a5) # 8005c011 <excpt+0x1>
    80024abe:	4401                	li	s0,0
    80024ac0:	c789                	beqz	a5,80024aca <stateen_AIA_test_4+0xfc>
    80024ac2:	6480                	ld	s0,8(s1)
    80024ac4:	1429                	addi	s0,s0,-22
    80024ac6:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024aca:	4509                	li	a0,2
    80024acc:	c48dc0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024ad0:	b48dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024ad4:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024ad8:	d82dc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024adc:	08c00593          	li	a1,140
    80024ae0:	00017617          	auipc	a2,0x17
    80024ae4:	09860613          	addi	a2,a2,152 # 8003bb78 <__func__.0+0x9790>
    80024ae8:	0000e517          	auipc	a0,0xe
    80024aec:	bf850513          	addi	a0,a0,-1032 # 800326e0 <__func__.0+0x2f8>
    80024af0:	1d50a0ef          	jal	8002f4c4 <printf>
    80024af4:	00037797          	auipc	a5,0x37
    80024af8:	51d7c783          	lbu	a5,1309(a5) # 8005c011 <excpt+0x1>
    80024afc:	0000e597          	auipc	a1,0xe
    80024b00:	bbc58593          	addi	a1,a1,-1092 # 800326b8 <__func__.0+0x2d0>
    80024b04:	cf89                	beqz	a5,80024b1e <stateen_AIA_test_4+0x150>
    80024b06:	6498                	ld	a4,8(s1)
    80024b08:	47d9                	li	a5,22
    80024b0a:	0000e597          	auipc	a1,0xe
    80024b0e:	b9e58593          	addi	a1,a1,-1122 # 800326a8 <__func__.0+0x2c0>
    80024b12:	00f70663          	beq	a4,a5,80024b1e <stateen_AIA_test_4+0x150>
    80024b16:	0000e597          	auipc	a1,0xe
    80024b1a:	ba258593          	addi	a1,a1,-1118 # 800326b8 <__func__.0+0x2d0>
    80024b1e:	0000e517          	auipc	a0,0xe
    80024b22:	bda50513          	addi	a0,a0,-1062 # 800326f8 <__func__.0+0x310>
    80024b26:	19f0a0ef          	jal	8002f4c4 <printf>
    80024b2a:	00037797          	auipc	a5,0x37
    80024b2e:	4e77c783          	lbu	a5,1255(a5) # 8005c011 <excpt+0x1>
    80024b32:	c789                	beqz	a5,80024b3c <stateen_AIA_test_4+0x16e>
    80024b34:	6498                	ld	a4,8(s1)
    80024b36:	47d9                	li	a5,22
    80024b38:	00f70c63          	beq	a4,a5,80024b50 <stateen_AIA_test_4+0x182>
    80024b3c:	0000e517          	auipc	a0,0xe
    80024b40:	bc450513          	addi	a0,a0,-1084 # 80032700 <__func__.0+0x318>
    80024b44:	1810a0ef          	jal	8002f4c4 <printf>
    80024b48:	02900513          	li	a0,41
    80024b4c:	666090ef          	jal	8002e1b2 <putchar>
    80024b50:	4529                	li	a0,10
    80024b52:	660090ef          	jal	8002e1b2 <putchar>
    80024b56:	c801                	beqz	s0,80024b66 <stateen_AIA_test_4+0x198>
    80024b58:	00037797          	auipc	a5,0x37
    80024b5c:	4b97c783          	lbu	a5,1209(a5) # 8005c011 <excpt+0x1>
    80024b60:	4401                	li	s0,0
    80024b62:	18079363          	bnez	a5,80024ce8 <stateen_AIA_test_4+0x31a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024b66:	4509                	li	a0,2
    80024b68:	bacdc0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024b6c:	aacdc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPI);
    80024b70:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024b74:	ce6dc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024b78:	08c00593          	li	a1,140
    80024b7c:	00017617          	auipc	a2,0x17
    80024b80:	05460613          	addi	a2,a2,84 # 8003bbd0 <__func__.0+0x97e8>
    80024b84:	0000e517          	auipc	a0,0xe
    80024b88:	b5c50513          	addi	a0,a0,-1188 # 800326e0 <__func__.0+0x2f8>
    80024b8c:	1390a0ef          	jal	8002f4c4 <printf>
    80024b90:	00037797          	auipc	a5,0x37
    80024b94:	4817c783          	lbu	a5,1153(a5) # 8005c011 <excpt+0x1>
    80024b98:	0000e597          	auipc	a1,0xe
    80024b9c:	b2058593          	addi	a1,a1,-1248 # 800326b8 <__func__.0+0x2d0>
    80024ba0:	cf89                	beqz	a5,80024bba <stateen_AIA_test_4+0x1ec>
    80024ba2:	6498                	ld	a4,8(s1)
    80024ba4:	47d9                	li	a5,22
    80024ba6:	0000e597          	auipc	a1,0xe
    80024baa:	b0258593          	addi	a1,a1,-1278 # 800326a8 <__func__.0+0x2c0>
    80024bae:	00f70663          	beq	a4,a5,80024bba <stateen_AIA_test_4+0x1ec>
    80024bb2:	0000e597          	auipc	a1,0xe
    80024bb6:	b0658593          	addi	a1,a1,-1274 # 800326b8 <__func__.0+0x2d0>
    80024bba:	0000e517          	auipc	a0,0xe
    80024bbe:	b3e50513          	addi	a0,a0,-1218 # 800326f8 <__func__.0+0x310>
    80024bc2:	1030a0ef          	jal	8002f4c4 <printf>
    80024bc6:	00037797          	auipc	a5,0x37
    80024bca:	44b7c783          	lbu	a5,1099(a5) # 8005c011 <excpt+0x1>
    80024bce:	c789                	beqz	a5,80024bd8 <stateen_AIA_test_4+0x20a>
    80024bd0:	6498                	ld	a4,8(s1)
    80024bd2:	47d9                	li	a5,22
    80024bd4:	00f70c63          	beq	a4,a5,80024bec <stateen_AIA_test_4+0x21e>
    80024bd8:	0000e517          	auipc	a0,0xe
    80024bdc:	b2850513          	addi	a0,a0,-1240 # 80032700 <__func__.0+0x318>
    80024be0:	0e50a0ef          	jal	8002f4c4 <printf>
    80024be4:	02900513          	li	a0,41
    80024be8:	5ca090ef          	jal	8002e1b2 <putchar>
    80024bec:	4529                	li	a0,10
    80024bee:	5c4090ef          	jal	8002e1b2 <putchar>
    80024bf2:	c801                	beqz	s0,80024c02 <stateen_AIA_test_4+0x234>
    80024bf4:	00037797          	auipc	a5,0x37
    80024bf8:	41d7c783          	lbu	a5,1053(a5) # 8005c011 <excpt+0x1>
    80024bfc:	4401                	li	s0,0
    80024bfe:	0e079063          	bnez	a5,80024cde <stateen_AIA_test_4+0x310>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024c02:	4509                	li	a0,2
    80024c04:	b10dc0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024c08:	a10dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024c0c:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024c10:	c4adc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024c14:	08c00593          	li	a1,140
    80024c18:	00017617          	auipc	a2,0x17
    80024c1c:	00860613          	addi	a2,a2,8 # 8003bc20 <__func__.0+0x9838>
    80024c20:	0000e517          	auipc	a0,0xe
    80024c24:	ac050513          	addi	a0,a0,-1344 # 800326e0 <__func__.0+0x2f8>
    80024c28:	09d0a0ef          	jal	8002f4c4 <printf>
    80024c2c:	00037797          	auipc	a5,0x37
    80024c30:	3e57c783          	lbu	a5,997(a5) # 8005c011 <excpt+0x1>
    80024c34:	0000e597          	auipc	a1,0xe
    80024c38:	a8458593          	addi	a1,a1,-1404 # 800326b8 <__func__.0+0x2d0>
    80024c3c:	cf89                	beqz	a5,80024c56 <stateen_AIA_test_4+0x288>
    80024c3e:	6498                	ld	a4,8(s1)
    80024c40:	47d9                	li	a5,22
    80024c42:	0000e597          	auipc	a1,0xe
    80024c46:	a6658593          	addi	a1,a1,-1434 # 800326a8 <__func__.0+0x2c0>
    80024c4a:	00f70663          	beq	a4,a5,80024c56 <stateen_AIA_test_4+0x288>
    80024c4e:	0000e597          	auipc	a1,0xe
    80024c52:	a6a58593          	addi	a1,a1,-1430 # 800326b8 <__func__.0+0x2d0>
    80024c56:	0000e517          	auipc	a0,0xe
    80024c5a:	aa250513          	addi	a0,a0,-1374 # 800326f8 <__func__.0+0x310>
    80024c5e:	0670a0ef          	jal	8002f4c4 <printf>
    80024c62:	00037797          	auipc	a5,0x37
    80024c66:	3af7c783          	lbu	a5,943(a5) # 8005c011 <excpt+0x1>
    80024c6a:	c789                	beqz	a5,80024c74 <stateen_AIA_test_4+0x2a6>
    80024c6c:	6498                	ld	a4,8(s1)
    80024c6e:	47d9                	li	a5,22
    80024c70:	00f70c63          	beq	a4,a5,80024c88 <stateen_AIA_test_4+0x2ba>
    80024c74:	0000e517          	auipc	a0,0xe
    80024c78:	a8c50513          	addi	a0,a0,-1396 # 80032700 <__func__.0+0x318>
    80024c7c:	0490a0ef          	jal	8002f4c4 <printf>
    80024c80:	02900513          	li	a0,41
    80024c84:	52e090ef          	jal	8002e1b2 <putchar>
    80024c88:	4529                	li	a0,10
    80024c8a:	528090ef          	jal	8002e1b2 <putchar>
    80024c8e:	c015                	beqz	s0,80024cb2 <stateen_AIA_test_4+0x2e4>
    80024c90:	00037417          	auipc	s0,0x37
    80024c94:	38144403          	lbu	s0,897(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80024c98:	0000e597          	auipc	a1,0xe
    80024c9c:	a2058593          	addi	a1,a1,-1504 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024ca0:	cc11                	beqz	s0,80024cbc <stateen_AIA_test_4+0x2ee>
    80024ca2:	6498                	ld	a4,8(s1)
    80024ca4:	47d9                	li	a5,22
    TEST_END();
    80024ca6:	0000e597          	auipc	a1,0xe
    80024caa:	a0258593          	addi	a1,a1,-1534 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024cae:	00f70763          	beq	a4,a5,80024cbc <stateen_AIA_test_4+0x2ee>
    80024cb2:	4401                	li	s0,0
    TEST_END();
    80024cb4:	0000e597          	auipc	a1,0xe
    80024cb8:	a0458593          	addi	a1,a1,-1532 # 800326b8 <__func__.0+0x2d0>
    80024cbc:	0000e517          	auipc	a0,0xe
    80024cc0:	aa450513          	addi	a0,a0,-1372 # 80032760 <__func__.0+0x378>
    80024cc4:	0010a0ef          	jal	8002f4c4 <printf>
    80024cc8:	4511                	li	a0,4
    80024cca:	a4adc0ef          	jal	80000f14 <goto_priv>
    80024cce:	aa9dc0ef          	jal	80001776 <reset_state>

}
    80024cd2:	60e2                	ld	ra,24(sp)
    80024cd4:	8522                	mv	a0,s0
    80024cd6:	6442                	ld	s0,16(sp)
    80024cd8:	64a2                	ld	s1,8(sp)
    80024cda:	6105                	addi	sp,sp,32
    80024cdc:	8082                	ret
    TEST_ASSERT("vs mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024cde:	6480                	ld	s0,8(s1)
    80024ce0:	1429                	addi	s0,s0,-22
    80024ce2:	00143413          	seqz	s0,s0
    80024ce6:	bf31                	j	80024c02 <stateen_AIA_test_4+0x234>
    TEST_ASSERT("vs mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024ce8:	6480                	ld	s0,8(s1)
    80024cea:	1429                	addi	s0,s0,-22
    80024cec:	00143413          	seqz	s0,s0
    80024cf0:	bd9d                	j	80024b66 <stateen_AIA_test_4+0x198>

0000000080024cf2 <stateen_AIA_test_5>:

bool stateen_AIA_test_5(){
    80024cf2:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=0,hs mode 不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    80024cf4:	0000d597          	auipc	a1,0xd
    80024cf8:	f8c58593          	addi	a1,a1,-116 # 80031c80 <__func__.18>
    80024cfc:	0000e517          	auipc	a0,0xe
    80024d00:	9cc50513          	addi	a0,a0,-1588 # 800326c8 <__func__.0+0x2e0>
bool stateen_AIA_test_5(){
    80024d04:	ec06                	sd	ra,24(sp)
    80024d06:	e822                	sd	s0,16(sp)
    80024d08:	e426                	sd	s1,8(sp)
    TEST_START();
    80024d0a:	7ba0a0ef          	jal	8002f4c4 <printf>
    80024d0e:	4529                	li	a0,10
    80024d10:	4a2090ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80024d14:	4511                	li	a0,4
    80024d16:	9fedc0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024d1a:	4785                	li	a5,1
    80024d1c:	17ee                	slli	a5,a5,0x3b
    80024d1e:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    80024d22:	450d                	li	a0,3
    80024d24:	9f0dc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024d28:	8f0dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024d2c:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024d30:	b2adc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss hvien register cause to illegal except when mstateen.aia=0",
    80024d34:	08c00593          	li	a1,140
    80024d38:	00017617          	auipc	a2,0x17
    80024d3c:	f4060613          	addi	a2,a2,-192 # 8003bc78 <__func__.0+0x9890>
    80024d40:	0000e517          	auipc	a0,0xe
    80024d44:	9a050513          	addi	a0,a0,-1632 # 800326e0 <__func__.0+0x2f8>
    80024d48:	77c0a0ef          	jal	8002f4c4 <printf>
    80024d4c:	00037797          	auipc	a5,0x37
    80024d50:	2c57c783          	lbu	a5,709(a5) # 8005c011 <excpt+0x1>
    80024d54:	00037497          	auipc	s1,0x37
    80024d58:	2bc48493          	addi	s1,s1,700 # 8005c010 <excpt>
    80024d5c:	0000e597          	auipc	a1,0xe
    80024d60:	95c58593          	addi	a1,a1,-1700 # 800326b8 <__func__.0+0x2d0>
    80024d64:	cf89                	beqz	a5,80024d7e <stateen_AIA_test_5+0x8c>
    80024d66:	6498                	ld	a4,8(s1)
    80024d68:	4789                	li	a5,2
    80024d6a:	0000e597          	auipc	a1,0xe
    80024d6e:	93e58593          	addi	a1,a1,-1730 # 800326a8 <__func__.0+0x2c0>
    80024d72:	00f70663          	beq	a4,a5,80024d7e <stateen_AIA_test_5+0x8c>
    80024d76:	0000e597          	auipc	a1,0xe
    80024d7a:	94258593          	addi	a1,a1,-1726 # 800326b8 <__func__.0+0x2d0>
    80024d7e:	0000e517          	auipc	a0,0xe
    80024d82:	97a50513          	addi	a0,a0,-1670 # 800326f8 <__func__.0+0x310>
    80024d86:	73e0a0ef          	jal	8002f4c4 <printf>
    80024d8a:	00037797          	auipc	a5,0x37
    80024d8e:	2877c783          	lbu	a5,647(a5) # 8005c011 <excpt+0x1>
    80024d92:	c789                	beqz	a5,80024d9c <stateen_AIA_test_5+0xaa>
    80024d94:	6498                	ld	a4,8(s1)
    80024d96:	4789                	li	a5,2
    80024d98:	00f70c63          	beq	a4,a5,80024db0 <stateen_AIA_test_5+0xbe>
    80024d9c:	0000e517          	auipc	a0,0xe
    80024da0:	96450513          	addi	a0,a0,-1692 # 80032700 <__func__.0+0x318>
    80024da4:	7200a0ef          	jal	8002f4c4 <printf>
    80024da8:	02900513          	li	a0,41
    80024dac:	406090ef          	jal	8002e1b2 <putchar>
    80024db0:	4529                	li	a0,10
    80024db2:	400090ef          	jal	8002e1b2 <putchar>
    80024db6:	00037797          	auipc	a5,0x37
    80024dba:	25b7c783          	lbu	a5,603(a5) # 8005c011 <excpt+0x1>
    80024dbe:	4401                	li	s0,0
    80024dc0:	c789                	beqz	a5,80024dca <stateen_AIA_test_5+0xd8>
    80024dc2:	6480                	ld	s0,8(s1)
    80024dc4:	1479                	addi	s0,s0,-2
    80024dc6:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024dca:	450d                	li	a0,3
    80024dcc:	948dc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024dd0:	848dc0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024dd4:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024dd8:	a82dc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024ddc:	08c00593          	li	a1,140
    80024de0:	00017617          	auipc	a2,0x17
    80024de4:	ee860613          	addi	a2,a2,-280 # 8003bcc8 <__func__.0+0x98e0>
    80024de8:	0000e517          	auipc	a0,0xe
    80024dec:	8f850513          	addi	a0,a0,-1800 # 800326e0 <__func__.0+0x2f8>
    80024df0:	6d40a0ef          	jal	8002f4c4 <printf>
    80024df4:	00037797          	auipc	a5,0x37
    80024df8:	21d7c783          	lbu	a5,541(a5) # 8005c011 <excpt+0x1>
    80024dfc:	0000e597          	auipc	a1,0xe
    80024e00:	8bc58593          	addi	a1,a1,-1860 # 800326b8 <__func__.0+0x2d0>
    80024e04:	cf89                	beqz	a5,80024e1e <stateen_AIA_test_5+0x12c>
    80024e06:	6498                	ld	a4,8(s1)
    80024e08:	4789                	li	a5,2
    80024e0a:	0000e597          	auipc	a1,0xe
    80024e0e:	89e58593          	addi	a1,a1,-1890 # 800326a8 <__func__.0+0x2c0>
    80024e12:	00f70663          	beq	a4,a5,80024e1e <stateen_AIA_test_5+0x12c>
    80024e16:	0000e597          	auipc	a1,0xe
    80024e1a:	8a258593          	addi	a1,a1,-1886 # 800326b8 <__func__.0+0x2d0>
    80024e1e:	0000e517          	auipc	a0,0xe
    80024e22:	8da50513          	addi	a0,a0,-1830 # 800326f8 <__func__.0+0x310>
    80024e26:	69e0a0ef          	jal	8002f4c4 <printf>
    80024e2a:	00037797          	auipc	a5,0x37
    80024e2e:	1e77c783          	lbu	a5,487(a5) # 8005c011 <excpt+0x1>
    80024e32:	c789                	beqz	a5,80024e3c <stateen_AIA_test_5+0x14a>
    80024e34:	6498                	ld	a4,8(s1)
    80024e36:	4789                	li	a5,2
    80024e38:	00f70c63          	beq	a4,a5,80024e50 <stateen_AIA_test_5+0x15e>
    80024e3c:	0000e517          	auipc	a0,0xe
    80024e40:	8c450513          	addi	a0,a0,-1852 # 80032700 <__func__.0+0x318>
    80024e44:	6800a0ef          	jal	8002f4c4 <printf>
    80024e48:	02900513          	li	a0,41
    80024e4c:	366090ef          	jal	8002e1b2 <putchar>
    80024e50:	4529                	li	a0,10
    80024e52:	360090ef          	jal	8002e1b2 <putchar>
    80024e56:	c801                	beqz	s0,80024e66 <stateen_AIA_test_5+0x174>
    80024e58:	00037797          	auipc	a5,0x37
    80024e5c:	1b97c783          	lbu	a5,441(a5) # 8005c011 <excpt+0x1>
    80024e60:	4401                	li	s0,0
    80024e62:	18079363          	bnez	a5,80024fe8 <stateen_AIA_test_5+0x2f6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024e66:	450d                	li	a0,3
    80024e68:	8acdc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024e6c:	faddb0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPI);
    80024e70:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024e74:	9e6dc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss stopi register cause to illegal except when mstateen.aia=0",
    80024e78:	08c00593          	li	a1,140
    80024e7c:	00017617          	auipc	a2,0x17
    80024e80:	e9c60613          	addi	a2,a2,-356 # 8003bd18 <__func__.0+0x9930>
    80024e84:	0000e517          	auipc	a0,0xe
    80024e88:	85c50513          	addi	a0,a0,-1956 # 800326e0 <__func__.0+0x2f8>
    80024e8c:	6380a0ef          	jal	8002f4c4 <printf>
    80024e90:	00037797          	auipc	a5,0x37
    80024e94:	1817c783          	lbu	a5,385(a5) # 8005c011 <excpt+0x1>
    80024e98:	0000e597          	auipc	a1,0xe
    80024e9c:	82058593          	addi	a1,a1,-2016 # 800326b8 <__func__.0+0x2d0>
    80024ea0:	cf89                	beqz	a5,80024eba <stateen_AIA_test_5+0x1c8>
    80024ea2:	6498                	ld	a4,8(s1)
    80024ea4:	4789                	li	a5,2
    80024ea6:	0000e597          	auipc	a1,0xe
    80024eaa:	80258593          	addi	a1,a1,-2046 # 800326a8 <__func__.0+0x2c0>
    80024eae:	00f70663          	beq	a4,a5,80024eba <stateen_AIA_test_5+0x1c8>
    80024eb2:	0000e597          	auipc	a1,0xe
    80024eb6:	80658593          	addi	a1,a1,-2042 # 800326b8 <__func__.0+0x2d0>
    80024eba:	0000e517          	auipc	a0,0xe
    80024ebe:	83e50513          	addi	a0,a0,-1986 # 800326f8 <__func__.0+0x310>
    80024ec2:	6020a0ef          	jal	8002f4c4 <printf>
    80024ec6:	00037797          	auipc	a5,0x37
    80024eca:	14b7c783          	lbu	a5,331(a5) # 8005c011 <excpt+0x1>
    80024ece:	c789                	beqz	a5,80024ed8 <stateen_AIA_test_5+0x1e6>
    80024ed0:	6498                	ld	a4,8(s1)
    80024ed2:	4789                	li	a5,2
    80024ed4:	00f70c63          	beq	a4,a5,80024eec <stateen_AIA_test_5+0x1fa>
    80024ed8:	0000e517          	auipc	a0,0xe
    80024edc:	82850513          	addi	a0,a0,-2008 # 80032700 <__func__.0+0x318>
    80024ee0:	5e40a0ef          	jal	8002f4c4 <printf>
    80024ee4:	02900513          	li	a0,41
    80024ee8:	2ca090ef          	jal	8002e1b2 <putchar>
    80024eec:	4529                	li	a0,10
    80024eee:	2c4090ef          	jal	8002e1b2 <putchar>
    80024ef2:	c801                	beqz	s0,80024f02 <stateen_AIA_test_5+0x210>
    80024ef4:	00037797          	auipc	a5,0x37
    80024ef8:	11d7c783          	lbu	a5,285(a5) # 8005c011 <excpt+0x1>
    80024efc:	4401                	li	s0,0
    80024efe:	0e079063          	bnez	a5,80024fde <stateen_AIA_test_5+0x2ec>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024f02:	450d                	li	a0,3
    80024f04:	810dc0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024f08:	f11db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024f0c:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024f10:	94adc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024f14:	08c00593          	li	a1,140
    80024f18:	00017617          	auipc	a2,0x17
    80024f1c:	e5060613          	addi	a2,a2,-432 # 8003bd68 <__func__.0+0x9980>
    80024f20:	0000d517          	auipc	a0,0xd
    80024f24:	7c050513          	addi	a0,a0,1984 # 800326e0 <__func__.0+0x2f8>
    80024f28:	59c0a0ef          	jal	8002f4c4 <printf>
    80024f2c:	00037797          	auipc	a5,0x37
    80024f30:	0e57c783          	lbu	a5,229(a5) # 8005c011 <excpt+0x1>
    80024f34:	0000d597          	auipc	a1,0xd
    80024f38:	78458593          	addi	a1,a1,1924 # 800326b8 <__func__.0+0x2d0>
    80024f3c:	cf89                	beqz	a5,80024f56 <stateen_AIA_test_5+0x264>
    80024f3e:	6498                	ld	a4,8(s1)
    80024f40:	4789                	li	a5,2
    80024f42:	0000d597          	auipc	a1,0xd
    80024f46:	76658593          	addi	a1,a1,1894 # 800326a8 <__func__.0+0x2c0>
    80024f4a:	00f70663          	beq	a4,a5,80024f56 <stateen_AIA_test_5+0x264>
    80024f4e:	0000d597          	auipc	a1,0xd
    80024f52:	76a58593          	addi	a1,a1,1898 # 800326b8 <__func__.0+0x2d0>
    80024f56:	0000d517          	auipc	a0,0xd
    80024f5a:	7a250513          	addi	a0,a0,1954 # 800326f8 <__func__.0+0x310>
    80024f5e:	5660a0ef          	jal	8002f4c4 <printf>
    80024f62:	00037797          	auipc	a5,0x37
    80024f66:	0af7c783          	lbu	a5,175(a5) # 8005c011 <excpt+0x1>
    80024f6a:	c789                	beqz	a5,80024f74 <stateen_AIA_test_5+0x282>
    80024f6c:	6498                	ld	a4,8(s1)
    80024f6e:	4789                	li	a5,2
    80024f70:	00f70c63          	beq	a4,a5,80024f88 <stateen_AIA_test_5+0x296>
    80024f74:	0000d517          	auipc	a0,0xd
    80024f78:	78c50513          	addi	a0,a0,1932 # 80032700 <__func__.0+0x318>
    80024f7c:	5480a0ef          	jal	8002f4c4 <printf>
    80024f80:	02900513          	li	a0,41
    80024f84:	22e090ef          	jal	8002e1b2 <putchar>
    80024f88:	4529                	li	a0,10
    80024f8a:	228090ef          	jal	8002e1b2 <putchar>
    80024f8e:	c015                	beqz	s0,80024fb2 <stateen_AIA_test_5+0x2c0>
    80024f90:	00037417          	auipc	s0,0x37
    80024f94:	08144403          	lbu	s0,129(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80024f98:	0000d597          	auipc	a1,0xd
    80024f9c:	72058593          	addi	a1,a1,1824 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024fa0:	cc11                	beqz	s0,80024fbc <stateen_AIA_test_5+0x2ca>
    80024fa2:	6498                	ld	a4,8(s1)
    80024fa4:	4789                	li	a5,2
    TEST_END();
    80024fa6:	0000d597          	auipc	a1,0xd
    80024faa:	70258593          	addi	a1,a1,1794 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024fae:	00f70763          	beq	a4,a5,80024fbc <stateen_AIA_test_5+0x2ca>
    80024fb2:	4401                	li	s0,0
    TEST_END();
    80024fb4:	0000d597          	auipc	a1,0xd
    80024fb8:	70458593          	addi	a1,a1,1796 # 800326b8 <__func__.0+0x2d0>
    80024fbc:	0000d517          	auipc	a0,0xd
    80024fc0:	7a450513          	addi	a0,a0,1956 # 80032760 <__func__.0+0x378>
    80024fc4:	5000a0ef          	jal	8002f4c4 <printf>
    80024fc8:	4511                	li	a0,4
    80024fca:	f4bdb0ef          	jal	80000f14 <goto_priv>
    80024fce:	fa8dc0ef          	jal	80001776 <reset_state>

}
    80024fd2:	60e2                	ld	ra,24(sp)
    80024fd4:	8522                	mv	a0,s0
    80024fd6:	6442                	ld	s0,16(sp)
    80024fd8:	64a2                	ld	s1,8(sp)
    80024fda:	6105                	addi	sp,sp,32
    80024fdc:	8082                	ret
    TEST_ASSERT("hs mode accesss stopi register cause to illegal except when mstateen.aia=0",
    80024fde:	6480                	ld	s0,8(s1)
    80024fe0:	1479                	addi	s0,s0,-2
    80024fe2:	00143413          	seqz	s0,s0
    80024fe6:	bf31                	j	80024f02 <stateen_AIA_test_5+0x210>
    TEST_ASSERT("hs mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024fe8:	6480                	ld	s0,8(s1)
    80024fea:	1479                	addi	s0,s0,-2
    80024fec:	00143413          	seqz	s0,s0
    80024ff0:	bd9d                	j	80024e66 <stateen_AIA_test_5+0x174>

0000000080024ff2 <stateen_AIA_test_6>:


bool stateen_AIA_test_6(){
    80024ff2:	1101                	addi	sp,sp,-32

    TEST_START();
    80024ff4:	0000d597          	auipc	a1,0xd
    80024ff8:	ca458593          	addi	a1,a1,-860 # 80031c98 <__func__.17>
    80024ffc:	0000d517          	auipc	a0,0xd
    80025000:	6cc50513          	addi	a0,a0,1740 # 800326c8 <__func__.0+0x2e0>
bool stateen_AIA_test_6(){
    80025004:	ec06                	sd	ra,24(sp)
    80025006:	e822                	sd	s0,16(sp)
    80025008:	e426                	sd	s1,8(sp)
    TEST_START();
    8002500a:	4ba0a0ef          	jal	8002f4c4 <printf>
    8002500e:	4529                	li	a0,10
    80025010:	1a2090ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80025014:	4511                	li	a0,4
    80025016:	effdb0ef          	jal	80000f14 <goto_priv>
    //当mstateen.AIA=1,v=0时,可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    8002501a:	4785                	li	a5,1
    8002501c:	17ee                	slli	a5,a5,0x3b
    8002501e:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    80025022:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80025026:	450d                	li	a0,3
    80025028:	eeddb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002502c:	deddb0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80025030:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025034:	826dc0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss hvien register successful when  mstateen.aia=1 hstateen.aia=0",
    80025038:	08c00593          	li	a1,140
    8002503c:	00017617          	auipc	a2,0x17
    80025040:	d7c60613          	addi	a2,a2,-644 # 8003bdb8 <__func__.0+0x99d0>
    80025044:	0000d517          	auipc	a0,0xd
    80025048:	69c50513          	addi	a0,a0,1692 # 800326e0 <__func__.0+0x2f8>
    8002504c:	4780a0ef          	jal	8002f4c4 <printf>
    80025050:	00037797          	auipc	a5,0x37
    80025054:	fc17c783          	lbu	a5,-63(a5) # 8005c011 <excpt+0x1>
    80025058:	0000d597          	auipc	a1,0xd
    8002505c:	65058593          	addi	a1,a1,1616 # 800326a8 <__func__.0+0x2c0>
    80025060:	c789                	beqz	a5,8002506a <stateen_AIA_test_6+0x78>
    80025062:	0000d597          	auipc	a1,0xd
    80025066:	65658593          	addi	a1,a1,1622 # 800326b8 <__func__.0+0x2d0>
    8002506a:	0000d517          	auipc	a0,0xd
    8002506e:	68e50513          	addi	a0,a0,1678 # 800326f8 <__func__.0+0x310>
    80025072:	4520a0ef          	jal	8002f4c4 <printf>
    80025076:	00037797          	auipc	a5,0x37
    8002507a:	f9b7c783          	lbu	a5,-101(a5) # 8005c011 <excpt+0x1>
    8002507e:	5e079b63          	bnez	a5,80025674 <stateen_AIA_test_6+0x682>
    80025082:	4529                	li	a0,10
    80025084:	12e090ef          	jal	8002e1b2 <putchar>
    80025088:	00037497          	auipc	s1,0x37
    8002508c:	f894c483          	lbu	s1,-119(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_HVICTL);
    80025090:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025094:	fc7db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss hvictl register successful when  mstateen.aia=1 hstateen.aia=0",
    80025098:	08c00593          	li	a1,140
    8002509c:	00017617          	auipc	a2,0x17
    800250a0:	d6c60613          	addi	a2,a2,-660 # 8003be08 <__func__.0+0x9a20>
    800250a4:	0000d517          	auipc	a0,0xd
    800250a8:	63c50513          	addi	a0,a0,1596 # 800326e0 <__func__.0+0x2f8>
    800250ac:	4180a0ef          	jal	8002f4c4 <printf>
    800250b0:	00037797          	auipc	a5,0x37
    800250b4:	f617c783          	lbu	a5,-159(a5) # 8005c011 <excpt+0x1>
    800250b8:	0000d597          	auipc	a1,0xd
    800250bc:	60058593          	addi	a1,a1,1536 # 800326b8 <__func__.0+0x2d0>
    800250c0:	e789                	bnez	a5,800250ca <stateen_AIA_test_6+0xd8>
    800250c2:	0000d597          	auipc	a1,0xd
    800250c6:	5e658593          	addi	a1,a1,1510 # 800326a8 <__func__.0+0x2c0>
    800250ca:	0000d517          	auipc	a0,0xd
    800250ce:	62e50513          	addi	a0,a0,1582 # 800326f8 <__func__.0+0x310>
    800250d2:	3f20a0ef          	jal	8002f4c4 <printf>
    800250d6:	00037797          	auipc	a5,0x37
    800250da:	f3b7c783          	lbu	a5,-197(a5) # 8005c011 <excpt+0x1>
    800250de:	58079063          	bnez	a5,8002565e <stateen_AIA_test_6+0x66c>
    800250e2:	4529                	li	a0,10
    800250e4:	0ce090ef          	jal	8002e1b2 <putchar>
    800250e8:	4401                	li	s0,0
    800250ea:	e499                	bnez	s1,800250f8 <stateen_AIA_test_6+0x106>
    800250ec:	00037417          	auipc	s0,0x37
    800250f0:	f2544403          	lbu	s0,-219(s0) # 8005c011 <excpt+0x1>
    800250f4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    800250f8:	4505                	li	a0,1
    800250fa:	e1bdb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800250fe:	d1bdb0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80025102:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025106:	f55db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    8002510a:	08c00593          	li	a1,140
    8002510e:	00017617          	auipc	a2,0x17
    80025112:	d4a60613          	addi	a2,a2,-694 # 8003be58 <__func__.0+0x9a70>
    80025116:	0000d517          	auipc	a0,0xd
    8002511a:	5ca50513          	addi	a0,a0,1482 # 800326e0 <__func__.0+0x2f8>
    8002511e:	3a60a0ef          	jal	8002f4c4 <printf>
    80025122:	00037797          	auipc	a5,0x37
    80025126:	eef7c783          	lbu	a5,-273(a5) # 8005c011 <excpt+0x1>
    8002512a:	0000d597          	auipc	a1,0xd
    8002512e:	58e58593          	addi	a1,a1,1422 # 800326b8 <__func__.0+0x2d0>
    80025132:	e789                	bnez	a5,8002513c <stateen_AIA_test_6+0x14a>
    80025134:	0000d597          	auipc	a1,0xd
    80025138:	57458593          	addi	a1,a1,1396 # 800326a8 <__func__.0+0x2c0>
    8002513c:	0000d517          	auipc	a0,0xd
    80025140:	5bc50513          	addi	a0,a0,1468 # 800326f8 <__func__.0+0x310>
    80025144:	3800a0ef          	jal	8002f4c4 <printf>
    80025148:	00037797          	auipc	a5,0x37
    8002514c:	ec97c783          	lbu	a5,-311(a5) # 8005c011 <excpt+0x1>
    80025150:	4e079c63          	bnez	a5,80025648 <stateen_AIA_test_6+0x656>
    80025154:	4529                	li	a0,10
    80025156:	05c090ef          	jal	8002e1b2 <putchar>
    8002515a:	c419                	beqz	s0,80025168 <stateen_AIA_test_6+0x176>
    8002515c:	00037417          	auipc	s0,0x37
    80025160:	eb544403          	lbu	s0,-331(s0) # 8005c011 <excpt+0x1>
    80025164:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025168:	4505                	li	a0,1
    8002516a:	dabdb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002516e:	cabdb0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025172:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025176:	ee5db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    8002517a:	08c00593          	li	a1,140
    8002517e:	00017617          	auipc	a2,0x17
    80025182:	d2a60613          	addi	a2,a2,-726 # 8003bea8 <__func__.0+0x9ac0>
    80025186:	0000d517          	auipc	a0,0xd
    8002518a:	55a50513          	addi	a0,a0,1370 # 800326e0 <__func__.0+0x2f8>
    8002518e:	3360a0ef          	jal	8002f4c4 <printf>
    80025192:	00037797          	auipc	a5,0x37
    80025196:	e7f7c783          	lbu	a5,-385(a5) # 8005c011 <excpt+0x1>
    8002519a:	0000d597          	auipc	a1,0xd
    8002519e:	51e58593          	addi	a1,a1,1310 # 800326b8 <__func__.0+0x2d0>
    800251a2:	e789                	bnez	a5,800251ac <stateen_AIA_test_6+0x1ba>
    800251a4:	0000d597          	auipc	a1,0xd
    800251a8:	50458593          	addi	a1,a1,1284 # 800326a8 <__func__.0+0x2c0>
    800251ac:	0000d517          	auipc	a0,0xd
    800251b0:	54c50513          	addi	a0,a0,1356 # 800326f8 <__func__.0+0x310>
    800251b4:	3100a0ef          	jal	8002f4c4 <printf>
    800251b8:	00037797          	auipc	a5,0x37
    800251bc:	e597c783          	lbu	a5,-423(a5) # 8005c011 <excpt+0x1>
    800251c0:	46079963          	bnez	a5,80025632 <stateen_AIA_test_6+0x640>
    800251c4:	4529                	li	a0,10
    800251c6:	7ed080ef          	jal	8002e1b2 <putchar>
    800251ca:	c419                	beqz	s0,800251d8 <stateen_AIA_test_6+0x1e6>
    800251cc:	00037417          	auipc	s0,0x37
    800251d0:	e4544403          	lbu	s0,-443(s0) # 8005c011 <excpt+0x1>
    800251d4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    800251d8:	4511                	li	a0,4
    800251da:	d3bdb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800251de:	c3bdb0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800251e2:	608027f3          	csrr	a5,hvien

    excpt_info();
    800251e6:	e75db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    800251ea:	08c00593          	li	a1,140
    800251ee:	00017617          	auipc	a2,0x17
    800251f2:	d0a60613          	addi	a2,a2,-758 # 8003bef8 <__func__.0+0x9b10>
    800251f6:	0000d517          	auipc	a0,0xd
    800251fa:	4ea50513          	addi	a0,a0,1258 # 800326e0 <__func__.0+0x2f8>
    800251fe:	2c60a0ef          	jal	8002f4c4 <printf>
    80025202:	00037797          	auipc	a5,0x37
    80025206:	e0f7c783          	lbu	a5,-497(a5) # 8005c011 <excpt+0x1>
    8002520a:	0000d597          	auipc	a1,0xd
    8002520e:	4ae58593          	addi	a1,a1,1198 # 800326b8 <__func__.0+0x2d0>
    80025212:	e789                	bnez	a5,8002521c <stateen_AIA_test_6+0x22a>
    80025214:	0000d597          	auipc	a1,0xd
    80025218:	49458593          	addi	a1,a1,1172 # 800326a8 <__func__.0+0x2c0>
    8002521c:	0000d517          	auipc	a0,0xd
    80025220:	4dc50513          	addi	a0,a0,1244 # 800326f8 <__func__.0+0x310>
    80025224:	2a00a0ef          	jal	8002f4c4 <printf>
    80025228:	00037797          	auipc	a5,0x37
    8002522c:	de97c783          	lbu	a5,-535(a5) # 8005c011 <excpt+0x1>
    80025230:	3e079663          	bnez	a5,8002561c <stateen_AIA_test_6+0x62a>
    80025234:	4529                	li	a0,10
    80025236:	77d080ef          	jal	8002e1b2 <putchar>
    8002523a:	c419                	beqz	s0,80025248 <stateen_AIA_test_6+0x256>
    8002523c:	00037417          	auipc	s0,0x37
    80025240:	dd544403          	lbu	s0,-555(s0) # 8005c011 <excpt+0x1>
    80025244:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80025248:	4511                	li	a0,4
    8002524a:	ccbdb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002524e:	bcbdb0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025252:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025256:	e05db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    8002525a:	08c00593          	li	a1,140
    8002525e:	00017617          	auipc	a2,0x17
    80025262:	cea60613          	addi	a2,a2,-790 # 8003bf48 <__func__.0+0x9b60>
    80025266:	0000d517          	auipc	a0,0xd
    8002526a:	47a50513          	addi	a0,a0,1146 # 800326e0 <__func__.0+0x2f8>
    8002526e:	2560a0ef          	jal	8002f4c4 <printf>
    80025272:	00037797          	auipc	a5,0x37
    80025276:	d9f7c783          	lbu	a5,-609(a5) # 8005c011 <excpt+0x1>
    8002527a:	0000d597          	auipc	a1,0xd
    8002527e:	43e58593          	addi	a1,a1,1086 # 800326b8 <__func__.0+0x2d0>
    80025282:	e789                	bnez	a5,8002528c <stateen_AIA_test_6+0x29a>
    80025284:	0000d597          	auipc	a1,0xd
    80025288:	42458593          	addi	a1,a1,1060 # 800326a8 <__func__.0+0x2c0>
    8002528c:	0000d517          	auipc	a0,0xd
    80025290:	46c50513          	addi	a0,a0,1132 # 800326f8 <__func__.0+0x310>
    80025294:	2300a0ef          	jal	8002f4c4 <printf>
    80025298:	00037797          	auipc	a5,0x37
    8002529c:	d797c783          	lbu	a5,-647(a5) # 8005c011 <excpt+0x1>
    800252a0:	36079363          	bnez	a5,80025606 <stateen_AIA_test_6+0x614>
    800252a4:	4529                	li	a0,10
    800252a6:	70d080ef          	jal	8002e1b2 <putchar>
    800252aa:	c419                	beqz	s0,800252b8 <stateen_AIA_test_6+0x2c6>
    800252ac:	00037417          	auipc	s0,0x37
    800252b0:	d6544403          	lbu	s0,-667(s0) # 8005c011 <excpt+0x1>
    800252b4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    800252b8:	450d                	li	a0,3
    800252ba:	c5bdb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800252be:	b5bdb0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPI);
    800252c2:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800252c6:	d95db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss stopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800252ca:	08c00593          	li	a1,140
    800252ce:	00017617          	auipc	a2,0x17
    800252d2:	cca60613          	addi	a2,a2,-822 # 8003bf98 <__func__.0+0x9bb0>
    800252d6:	0000d517          	auipc	a0,0xd
    800252da:	40a50513          	addi	a0,a0,1034 # 800326e0 <__func__.0+0x2f8>
    800252de:	1e60a0ef          	jal	8002f4c4 <printf>
    800252e2:	00037797          	auipc	a5,0x37
    800252e6:	d2f7c783          	lbu	a5,-721(a5) # 8005c011 <excpt+0x1>
    800252ea:	0000d597          	auipc	a1,0xd
    800252ee:	3ce58593          	addi	a1,a1,974 # 800326b8 <__func__.0+0x2d0>
    800252f2:	e789                	bnez	a5,800252fc <stateen_AIA_test_6+0x30a>
    800252f4:	0000d597          	auipc	a1,0xd
    800252f8:	3b458593          	addi	a1,a1,948 # 800326a8 <__func__.0+0x2c0>
    800252fc:	0000d517          	auipc	a0,0xd
    80025300:	3fc50513          	addi	a0,a0,1020 # 800326f8 <__func__.0+0x310>
    80025304:	1c00a0ef          	jal	8002f4c4 <printf>
    80025308:	00037797          	auipc	a5,0x37
    8002530c:	d097c783          	lbu	a5,-759(a5) # 8005c011 <excpt+0x1>
    80025310:	2e079063          	bnez	a5,800255f0 <stateen_AIA_test_6+0x5fe>
    80025314:	4529                	li	a0,10
    80025316:	69d080ef          	jal	8002e1b2 <putchar>
    8002531a:	c419                	beqz	s0,80025328 <stateen_AIA_test_6+0x336>
    8002531c:	00037417          	auipc	s0,0x37
    80025320:	cf544403          	lbu	s0,-779(s0) # 8005c011 <excpt+0x1>
    80025324:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    CSRR(CSR_VSTOPI);
    80025328:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    8002532c:	d2fdb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss vstopi register successful when  mstateen.aia=1 hstateen.aia=0",
    80025330:	08c00593          	li	a1,140
    80025334:	00017617          	auipc	a2,0x17
    80025338:	cb460613          	addi	a2,a2,-844 # 8003bfe8 <__func__.0+0x9c00>
    8002533c:	0000d517          	auipc	a0,0xd
    80025340:	3a450513          	addi	a0,a0,932 # 800326e0 <__func__.0+0x2f8>
    80025344:	1800a0ef          	jal	8002f4c4 <printf>
    80025348:	00037797          	auipc	a5,0x37
    8002534c:	cc97c783          	lbu	a5,-823(a5) # 8005c011 <excpt+0x1>
    80025350:	0000d597          	auipc	a1,0xd
    80025354:	36858593          	addi	a1,a1,872 # 800326b8 <__func__.0+0x2d0>
    80025358:	e789                	bnez	a5,80025362 <stateen_AIA_test_6+0x370>
    8002535a:	0000d597          	auipc	a1,0xd
    8002535e:	34e58593          	addi	a1,a1,846 # 800326a8 <__func__.0+0x2c0>
    80025362:	0000d517          	auipc	a0,0xd
    80025366:	39650513          	addi	a0,a0,918 # 800326f8 <__func__.0+0x310>
    8002536a:	15a0a0ef          	jal	8002f4c4 <printf>
    8002536e:	00037797          	auipc	a5,0x37
    80025372:	ca37c783          	lbu	a5,-861(a5) # 8005c011 <excpt+0x1>
    80025376:	26079263          	bnez	a5,800255da <stateen_AIA_test_6+0x5e8>
    8002537a:	4529                	li	a0,10
    8002537c:	637080ef          	jal	8002e1b2 <putchar>
    80025380:	c419                	beqz	s0,8002538e <stateen_AIA_test_6+0x39c>
    80025382:	00037417          	auipc	s0,0x37
    80025386:	c8f44403          	lbu	s0,-881(s0) # 8005c011 <excpt+0x1>
    8002538a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    8002538e:	4505                	li	a0,1
    80025390:	b85db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025394:	a85db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPI);
    80025398:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002539c:	cbfdb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    800253a0:	08c00593          	li	a1,140
    800253a4:	00017617          	auipc	a2,0x17
    800253a8:	c9460613          	addi	a2,a2,-876 # 8003c038 <__func__.0+0x9c50>
    800253ac:	0000d517          	auipc	a0,0xd
    800253b0:	33450513          	addi	a0,a0,820 # 800326e0 <__func__.0+0x2f8>
    800253b4:	1100a0ef          	jal	8002f4c4 <printf>
    800253b8:	00037797          	auipc	a5,0x37
    800253bc:	c597c783          	lbu	a5,-935(a5) # 8005c011 <excpt+0x1>
    800253c0:	0000d597          	auipc	a1,0xd
    800253c4:	2f858593          	addi	a1,a1,760 # 800326b8 <__func__.0+0x2d0>
    800253c8:	e789                	bnez	a5,800253d2 <stateen_AIA_test_6+0x3e0>
    800253ca:	0000d597          	auipc	a1,0xd
    800253ce:	2de58593          	addi	a1,a1,734 # 800326a8 <__func__.0+0x2c0>
    800253d2:	0000d517          	auipc	a0,0xd
    800253d6:	32650513          	addi	a0,a0,806 # 800326f8 <__func__.0+0x310>
    800253da:	0ea0a0ef          	jal	8002f4c4 <printf>
    800253de:	00037797          	auipc	a5,0x37
    800253e2:	c337c783          	lbu	a5,-973(a5) # 8005c011 <excpt+0x1>
    800253e6:	1c079f63          	bnez	a5,800255c4 <stateen_AIA_test_6+0x5d2>
    800253ea:	4529                	li	a0,10
    800253ec:	5c7080ef          	jal	8002e1b2 <putchar>
    800253f0:	c419                	beqz	s0,800253fe <stateen_AIA_test_6+0x40c>
    800253f2:	00037417          	auipc	s0,0x37
    800253f6:	c1f44403          	lbu	s0,-993(s0) # 8005c011 <excpt+0x1>
    800253fa:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    800253fe:	4505                	li	a0,1
    80025400:	b15db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025404:	a15db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80025408:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    8002540c:	c4fdb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025410:	08c00593          	li	a1,140
    80025414:	00017617          	auipc	a2,0x17
    80025418:	c7460613          	addi	a2,a2,-908 # 8003c088 <__func__.0+0x9ca0>
    8002541c:	0000d517          	auipc	a0,0xd
    80025420:	2c450513          	addi	a0,a0,708 # 800326e0 <__func__.0+0x2f8>
    80025424:	0a00a0ef          	jal	8002f4c4 <printf>
    80025428:	00037797          	auipc	a5,0x37
    8002542c:	be97c783          	lbu	a5,-1047(a5) # 8005c011 <excpt+0x1>
    80025430:	0000d597          	auipc	a1,0xd
    80025434:	28858593          	addi	a1,a1,648 # 800326b8 <__func__.0+0x2d0>
    80025438:	e789                	bnez	a5,80025442 <stateen_AIA_test_6+0x450>
    8002543a:	0000d597          	auipc	a1,0xd
    8002543e:	26e58593          	addi	a1,a1,622 # 800326a8 <__func__.0+0x2c0>
    80025442:	0000d517          	auipc	a0,0xd
    80025446:	2b650513          	addi	a0,a0,694 # 800326f8 <__func__.0+0x310>
    8002544a:	07a0a0ef          	jal	8002f4c4 <printf>
    8002544e:	00037797          	auipc	a5,0x37
    80025452:	bc37c783          	lbu	a5,-1085(a5) # 8005c011 <excpt+0x1>
    80025456:	14079c63          	bnez	a5,800255ae <stateen_AIA_test_6+0x5bc>
    8002545a:	4529                	li	a0,10
    8002545c:	557080ef          	jal	8002e1b2 <putchar>
    80025460:	c419                	beqz	s0,8002546e <stateen_AIA_test_6+0x47c>
    80025462:	00037417          	auipc	s0,0x37
    80025466:	baf44403          	lbu	s0,-1105(s0) # 8005c011 <excpt+0x1>
    8002546a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    8002546e:	4511                	li	a0,4
    80025470:	aa5db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025474:	9a5db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPI);
    80025478:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002547c:	bdfdb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025480:	08c00593          	li	a1,140
    80025484:	00017617          	auipc	a2,0x17
    80025488:	c5460613          	addi	a2,a2,-940 # 8003c0d8 <__func__.0+0x9cf0>
    8002548c:	0000d517          	auipc	a0,0xd
    80025490:	25450513          	addi	a0,a0,596 # 800326e0 <__func__.0+0x2f8>
    80025494:	0300a0ef          	jal	8002f4c4 <printf>
    80025498:	00037797          	auipc	a5,0x37
    8002549c:	b797c783          	lbu	a5,-1159(a5) # 8005c011 <excpt+0x1>
    800254a0:	0000d597          	auipc	a1,0xd
    800254a4:	21858593          	addi	a1,a1,536 # 800326b8 <__func__.0+0x2d0>
    800254a8:	e789                	bnez	a5,800254b2 <stateen_AIA_test_6+0x4c0>
    800254aa:	0000d597          	auipc	a1,0xd
    800254ae:	1fe58593          	addi	a1,a1,510 # 800326a8 <__func__.0+0x2c0>
    800254b2:	0000d517          	auipc	a0,0xd
    800254b6:	24650513          	addi	a0,a0,582 # 800326f8 <__func__.0+0x310>
    800254ba:	00a0a0ef          	jal	8002f4c4 <printf>
    800254be:	00037797          	auipc	a5,0x37
    800254c2:	b537c783          	lbu	a5,-1197(a5) # 8005c011 <excpt+0x1>
    800254c6:	0c079963          	bnez	a5,80025598 <stateen_AIA_test_6+0x5a6>
    800254ca:	4529                	li	a0,10
    800254cc:	4e7080ef          	jal	8002e1b2 <putchar>
    800254d0:	c419                	beqz	s0,800254de <stateen_AIA_test_6+0x4ec>
    800254d2:	00037417          	auipc	s0,0x37
    800254d6:	b3f44403          	lbu	s0,-1217(s0) # 8005c011 <excpt+0x1>
    800254da:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800254de:	4511                	li	a0,4
    800254e0:	a35db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800254e4:	935db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800254e8:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800254ec:	b6fdb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    800254f0:	08c00593          	li	a1,140
    800254f4:	00017617          	auipc	a2,0x17
    800254f8:	c3460613          	addi	a2,a2,-972 # 8003c128 <__func__.0+0x9d40>
    800254fc:	0000d517          	auipc	a0,0xd
    80025500:	1e450513          	addi	a0,a0,484 # 800326e0 <__func__.0+0x2f8>
    80025504:	7c1090ef          	jal	8002f4c4 <printf>
    80025508:	00037797          	auipc	a5,0x37
    8002550c:	b097c783          	lbu	a5,-1271(a5) # 8005c011 <excpt+0x1>
    80025510:	0000d597          	auipc	a1,0xd
    80025514:	1a858593          	addi	a1,a1,424 # 800326b8 <__func__.0+0x2d0>
    80025518:	e789                	bnez	a5,80025522 <stateen_AIA_test_6+0x530>
    8002551a:	0000d597          	auipc	a1,0xd
    8002551e:	18e58593          	addi	a1,a1,398 # 800326a8 <__func__.0+0x2c0>
    80025522:	0000d517          	auipc	a0,0xd
    80025526:	1d650513          	addi	a0,a0,470 # 800326f8 <__func__.0+0x310>
    8002552a:	79b090ef          	jal	8002f4c4 <printf>
    8002552e:	00037797          	auipc	a5,0x37
    80025532:	ae37c783          	lbu	a5,-1309(a5) # 8005c011 <excpt+0x1>
    80025536:	e7b1                	bnez	a5,80025582 <stateen_AIA_test_6+0x590>
    80025538:	4529                	li	a0,10
    8002553a:	479080ef          	jal	8002e1b2 <putchar>
    8002553e:	c411                	beqz	s0,8002554a <stateen_AIA_test_6+0x558>
    80025540:	00037797          	auipc	a5,0x37
    80025544:	ad17c783          	lbu	a5,-1327(a5) # 8005c011 <excpt+0x1>
    80025548:	c79d                	beqz	a5,80025576 <stateen_AIA_test_6+0x584>
    8002554a:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    8002554c:	0000d597          	auipc	a1,0xd
    80025550:	16c58593          	addi	a1,a1,364 # 800326b8 <__func__.0+0x2d0>
    80025554:	0000d517          	auipc	a0,0xd
    80025558:	20c50513          	addi	a0,a0,524 # 80032760 <__func__.0+0x378>
    8002555c:	769090ef          	jal	8002f4c4 <printf>
    80025560:	4511                	li	a0,4
    80025562:	9b3db0ef          	jal	80000f14 <goto_priv>
    80025566:	a10dc0ef          	jal	80001776 <reset_state>

}
    8002556a:	60e2                	ld	ra,24(sp)
    8002556c:	8522                	mv	a0,s0
    8002556e:	6442                	ld	s0,16(sp)
    80025570:	64a2                	ld	s1,8(sp)
    80025572:	6105                	addi	sp,sp,32
    80025574:	8082                	ret
    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025576:	4405                	li	s0,1
    TEST_END();
    80025578:	0000d597          	auipc	a1,0xd
    8002557c:	13058593          	addi	a1,a1,304 # 800326a8 <__func__.0+0x2c0>
    80025580:	bfd1                	j	80025554 <stateen_AIA_test_6+0x562>
    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025582:	0000d517          	auipc	a0,0xd
    80025586:	17e50513          	addi	a0,a0,382 # 80032700 <__func__.0+0x318>
    8002558a:	73b090ef          	jal	8002f4c4 <printf>
    8002558e:	02900513          	li	a0,41
    80025592:	421080ef          	jal	8002e1b2 <putchar>
    80025596:	b74d                	j	80025538 <stateen_AIA_test_6+0x546>
    TEST_ASSERT("m mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025598:	0000d517          	auipc	a0,0xd
    8002559c:	16850513          	addi	a0,a0,360 # 80032700 <__func__.0+0x318>
    800255a0:	725090ef          	jal	8002f4c4 <printf>
    800255a4:	02900513          	li	a0,41
    800255a8:	40b080ef          	jal	8002e1b2 <putchar>
    800255ac:	bf39                	j	800254ca <stateen_AIA_test_6+0x4d8>
    TEST_ASSERT("hu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    800255ae:	0000d517          	auipc	a0,0xd
    800255b2:	15250513          	addi	a0,a0,338 # 80032700 <__func__.0+0x318>
    800255b6:	70f090ef          	jal	8002f4c4 <printf>
    800255ba:	02900513          	li	a0,41
    800255be:	3f5080ef          	jal	8002e1b2 <putchar>
    800255c2:	bd61                	j	8002545a <stateen_AIA_test_6+0x468>
    TEST_ASSERT("hu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    800255c4:	0000d517          	auipc	a0,0xd
    800255c8:	13c50513          	addi	a0,a0,316 # 80032700 <__func__.0+0x318>
    800255cc:	6f9090ef          	jal	8002f4c4 <printf>
    800255d0:	02900513          	li	a0,41
    800255d4:	3df080ef          	jal	8002e1b2 <putchar>
    800255d8:	bd09                	j	800253ea <stateen_AIA_test_6+0x3f8>
    TEST_ASSERT("hs mode accesss vstopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800255da:	0000d517          	auipc	a0,0xd
    800255de:	12650513          	addi	a0,a0,294 # 80032700 <__func__.0+0x318>
    800255e2:	6e3090ef          	jal	8002f4c4 <printf>
    800255e6:	02900513          	li	a0,41
    800255ea:	3c9080ef          	jal	8002e1b2 <putchar>
    800255ee:	b371                	j	8002537a <stateen_AIA_test_6+0x388>
    TEST_ASSERT("hs mode accesss stopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800255f0:	0000d517          	auipc	a0,0xd
    800255f4:	11050513          	addi	a0,a0,272 # 80032700 <__func__.0+0x318>
    800255f8:	6cd090ef          	jal	8002f4c4 <printf>
    800255fc:	02900513          	li	a0,41
    80025600:	3b3080ef          	jal	8002e1b2 <putchar>
    80025604:	bb01                	j	80025314 <stateen_AIA_test_6+0x322>
    TEST_ASSERT("m mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    80025606:	0000d517          	auipc	a0,0xd
    8002560a:	0fa50513          	addi	a0,a0,250 # 80032700 <__func__.0+0x318>
    8002560e:	6b7090ef          	jal	8002f4c4 <printf>
    80025612:	02900513          	li	a0,41
    80025616:	39d080ef          	jal	8002e1b2 <putchar>
    8002561a:	b169                	j	800252a4 <stateen_AIA_test_6+0x2b2>
    TEST_ASSERT("m mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    8002561c:	0000d517          	auipc	a0,0xd
    80025620:	0e450513          	addi	a0,a0,228 # 80032700 <__func__.0+0x318>
    80025624:	6a1090ef          	jal	8002f4c4 <printf>
    80025628:	02900513          	li	a0,41
    8002562c:	387080ef          	jal	8002e1b2 <putchar>
    80025630:	b111                	j	80025234 <stateen_AIA_test_6+0x242>
    TEST_ASSERT("hu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    80025632:	0000d517          	auipc	a0,0xd
    80025636:	0ce50513          	addi	a0,a0,206 # 80032700 <__func__.0+0x318>
    8002563a:	68b090ef          	jal	8002f4c4 <printf>
    8002563e:	02900513          	li	a0,41
    80025642:	371080ef          	jal	8002e1b2 <putchar>
    80025646:	bebd                	j	800251c4 <stateen_AIA_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    80025648:	0000d517          	auipc	a0,0xd
    8002564c:	0b850513          	addi	a0,a0,184 # 80032700 <__func__.0+0x318>
    80025650:	675090ef          	jal	8002f4c4 <printf>
    80025654:	02900513          	li	a0,41
    80025658:	35b080ef          	jal	8002e1b2 <putchar>
    8002565c:	bce5                	j	80025154 <stateen_AIA_test_6+0x162>
    TEST_ASSERT("hs mode accesss hvictl register successful when  mstateen.aia=1 hstateen.aia=0",
    8002565e:	0000d517          	auipc	a0,0xd
    80025662:	0a250513          	addi	a0,a0,162 # 80032700 <__func__.0+0x318>
    80025666:	65f090ef          	jal	8002f4c4 <printf>
    8002566a:	02900513          	li	a0,41
    8002566e:	345080ef          	jal	8002e1b2 <putchar>
    80025672:	bc85                	j	800250e2 <stateen_AIA_test_6+0xf0>
    TEST_ASSERT("hs mode accesss hvien register successful when  mstateen.aia=1 hstateen.aia=0",
    80025674:	0000d517          	auipc	a0,0xd
    80025678:	08c50513          	addi	a0,a0,140 # 80032700 <__func__.0+0x318>
    8002567c:	649090ef          	jal	8002f4c4 <printf>
    80025680:	02900513          	li	a0,41
    80025684:	32f080ef          	jal	8002e1b2 <putchar>
    80025688:	baed                	j	80025082 <stateen_AIA_test_6+0x90>

000000008002568a <stateen_AIA_test_7>:


bool stateen_AIA_test_7(){
    8002568a:	1101                	addi	sp,sp,-32

    TEST_START();
    8002568c:	0000c597          	auipc	a1,0xc
    80025690:	62458593          	addi	a1,a1,1572 # 80031cb0 <__func__.16>
    80025694:	0000d517          	auipc	a0,0xd
    80025698:	03450513          	addi	a0,a0,52 # 800326c8 <__func__.0+0x2e0>
bool stateen_AIA_test_7(){
    8002569c:	ec06                	sd	ra,24(sp)
    8002569e:	e822                	sd	s0,16(sp)
    800256a0:	e426                	sd	s1,8(sp)
    TEST_START();
    800256a2:	623090ef          	jal	8002f4c4 <printf>
    800256a6:	4529                	li	a0,10
    800256a8:	30b080ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    800256ac:	4511                	li	a0,4
    800256ae:	867db0ef          	jal	80000f14 <goto_priv>
    //当mstateen.AIA=1 hstateen.AIA=1,v=1 时可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    800256b2:	4785                	li	a5,1
    800256b4:	17ee                	slli	a5,a5,0x3b
    800256b6:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_AIA);
    800256ba:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    800256be:	4509                	li	a0,2
    800256c0:	855db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800256c4:	f54db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800256c8:	608027f3          	csrr	a5,hvien

    excpt_info();
    800256cc:	98fdb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800256d0:	08c00593          	li	a1,140
    800256d4:	00017617          	auipc	a2,0x17
    800256d8:	aa460613          	addi	a2,a2,-1372 # 8003c178 <__func__.0+0x9d90>
    800256dc:	0000d517          	auipc	a0,0xd
    800256e0:	00450513          	addi	a0,a0,4 # 800326e0 <__func__.0+0x2f8>
    800256e4:	5e1090ef          	jal	8002f4c4 <printf>
    800256e8:	00037797          	auipc	a5,0x37
    800256ec:	9297c783          	lbu	a5,-1751(a5) # 8005c011 <excpt+0x1>
    800256f0:	0000d597          	auipc	a1,0xd
    800256f4:	fb858593          	addi	a1,a1,-72 # 800326a8 <__func__.0+0x2c0>
    800256f8:	c789                	beqz	a5,80025702 <stateen_AIA_test_7+0x78>
    800256fa:	0000d597          	auipc	a1,0xd
    800256fe:	fbe58593          	addi	a1,a1,-66 # 800326b8 <__func__.0+0x2d0>
    80025702:	0000d517          	auipc	a0,0xd
    80025706:	ff650513          	addi	a0,a0,-10 # 800326f8 <__func__.0+0x310>
    8002570a:	5bb090ef          	jal	8002f4c4 <printf>
    8002570e:	00037797          	auipc	a5,0x37
    80025712:	9037c783          	lbu	a5,-1789(a5) # 8005c011 <excpt+0x1>
    80025716:	3e079963          	bnez	a5,80025b08 <stateen_AIA_test_7+0x47e>
    8002571a:	4529                	li	a0,10
    8002571c:	297080ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80025720:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    80025722:	00037497          	auipc	s1,0x37
    80025726:	8ef4c483          	lbu	s1,-1809(s1) # 8005c011 <excpt+0x1>
    goto_priv(PRIV_VS);
    8002572a:	feadb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002572e:	eeadb0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025732:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025736:	925db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    8002573a:	08c00593          	li	a1,140
    8002573e:	00017617          	auipc	a2,0x17
    80025742:	a8a60613          	addi	a2,a2,-1398 # 8003c1c8 <__func__.0+0x9de0>
    80025746:	0000d517          	auipc	a0,0xd
    8002574a:	f9a50513          	addi	a0,a0,-102 # 800326e0 <__func__.0+0x2f8>
    8002574e:	577090ef          	jal	8002f4c4 <printf>
    80025752:	00037797          	auipc	a5,0x37
    80025756:	8bf7c783          	lbu	a5,-1857(a5) # 8005c011 <excpt+0x1>
    8002575a:	0000d597          	auipc	a1,0xd
    8002575e:	f5e58593          	addi	a1,a1,-162 # 800326b8 <__func__.0+0x2d0>
    80025762:	e789                	bnez	a5,8002576c <stateen_AIA_test_7+0xe2>
    80025764:	0000d597          	auipc	a1,0xd
    80025768:	f4458593          	addi	a1,a1,-188 # 800326a8 <__func__.0+0x2c0>
    8002576c:	0000d517          	auipc	a0,0xd
    80025770:	f8c50513          	addi	a0,a0,-116 # 800326f8 <__func__.0+0x310>
    80025774:	551090ef          	jal	8002f4c4 <printf>
    80025778:	00037797          	auipc	a5,0x37
    8002577c:	8997c783          	lbu	a5,-1895(a5) # 8005c011 <excpt+0x1>
    80025780:	36079963          	bnez	a5,80025af2 <stateen_AIA_test_7+0x468>
    80025784:	4529                	li	a0,10
    80025786:	22d080ef          	jal	8002e1b2 <putchar>
    8002578a:	4401                	li	s0,0
    8002578c:	e499                	bnez	s1,8002579a <stateen_AIA_test_7+0x110>
    8002578e:	00037417          	auipc	s0,0x37
    80025792:	88344403          	lbu	s0,-1917(s0) # 8005c011 <excpt+0x1>
    80025796:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    8002579a:	4501                	li	a0,0
    8002579c:	f78db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800257a0:	e78db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800257a4:	608027f3          	csrr	a5,hvien

    excpt_info();
    800257a8:	8b3db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800257ac:	08c00593          	li	a1,140
    800257b0:	00017617          	auipc	a2,0x17
    800257b4:	a6860613          	addi	a2,a2,-1432 # 8003c218 <__func__.0+0x9e30>
    800257b8:	0000d517          	auipc	a0,0xd
    800257bc:	f2850513          	addi	a0,a0,-216 # 800326e0 <__func__.0+0x2f8>
    800257c0:	505090ef          	jal	8002f4c4 <printf>
    800257c4:	00037797          	auipc	a5,0x37
    800257c8:	84d7c783          	lbu	a5,-1971(a5) # 8005c011 <excpt+0x1>
    800257cc:	0000d597          	auipc	a1,0xd
    800257d0:	eec58593          	addi	a1,a1,-276 # 800326b8 <__func__.0+0x2d0>
    800257d4:	e789                	bnez	a5,800257de <stateen_AIA_test_7+0x154>
    800257d6:	0000d597          	auipc	a1,0xd
    800257da:	ed258593          	addi	a1,a1,-302 # 800326a8 <__func__.0+0x2c0>
    800257de:	0000d517          	auipc	a0,0xd
    800257e2:	f1a50513          	addi	a0,a0,-230 # 800326f8 <__func__.0+0x310>
    800257e6:	4df090ef          	jal	8002f4c4 <printf>
    800257ea:	00037797          	auipc	a5,0x37
    800257ee:	8277c783          	lbu	a5,-2009(a5) # 8005c011 <excpt+0x1>
    800257f2:	2e079563          	bnez	a5,80025adc <stateen_AIA_test_7+0x452>
    800257f6:	4529                	li	a0,10
    800257f8:	1bb080ef          	jal	8002e1b2 <putchar>
    800257fc:	c419                	beqz	s0,8002580a <stateen_AIA_test_7+0x180>
    800257fe:	00037417          	auipc	s0,0x37
    80025802:	81344403          	lbu	s0,-2029(s0) # 8005c011 <excpt+0x1>
    80025806:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    8002580a:	4501                	li	a0,0
    8002580c:	f08db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025810:	e08db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025814:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025818:	843db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    8002581c:	08c00593          	li	a1,140
    80025820:	00017617          	auipc	a2,0x17
    80025824:	a4860613          	addi	a2,a2,-1464 # 8003c268 <__func__.0+0x9e80>
    80025828:	0000d517          	auipc	a0,0xd
    8002582c:	eb850513          	addi	a0,a0,-328 # 800326e0 <__func__.0+0x2f8>
    80025830:	495090ef          	jal	8002f4c4 <printf>
    80025834:	00036797          	auipc	a5,0x36
    80025838:	7dd7c783          	lbu	a5,2013(a5) # 8005c011 <excpt+0x1>
    8002583c:	0000d597          	auipc	a1,0xd
    80025840:	e7c58593          	addi	a1,a1,-388 # 800326b8 <__func__.0+0x2d0>
    80025844:	e789                	bnez	a5,8002584e <stateen_AIA_test_7+0x1c4>
    80025846:	0000d597          	auipc	a1,0xd
    8002584a:	e6258593          	addi	a1,a1,-414 # 800326a8 <__func__.0+0x2c0>
    8002584e:	0000d517          	auipc	a0,0xd
    80025852:	eaa50513          	addi	a0,a0,-342 # 800326f8 <__func__.0+0x310>
    80025856:	46f090ef          	jal	8002f4c4 <printf>
    8002585a:	00036797          	auipc	a5,0x36
    8002585e:	7b77c783          	lbu	a5,1975(a5) # 8005c011 <excpt+0x1>
    80025862:	26079263          	bnez	a5,80025ac6 <stateen_AIA_test_7+0x43c>
    80025866:	4529                	li	a0,10
    80025868:	14b080ef          	jal	8002e1b2 <putchar>
    8002586c:	c419                	beqz	s0,8002587a <stateen_AIA_test_7+0x1f0>
    8002586e:	00036417          	auipc	s0,0x36
    80025872:	7a344403          	lbu	s0,1955(s0) # 8005c011 <excpt+0x1>
    80025876:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    8002587a:	4509                	li	a0,2
    8002587c:	e98db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025880:	d98db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPI);
    80025884:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80025888:	fd2db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    8002588c:	08c00593          	li	a1,140
    80025890:	00017617          	auipc	a2,0x17
    80025894:	a2860613          	addi	a2,a2,-1496 # 8003c2b8 <__func__.0+0x9ed0>
    80025898:	0000d517          	auipc	a0,0xd
    8002589c:	e4850513          	addi	a0,a0,-440 # 800326e0 <__func__.0+0x2f8>
    800258a0:	425090ef          	jal	8002f4c4 <printf>
    800258a4:	00036797          	auipc	a5,0x36
    800258a8:	76d7c783          	lbu	a5,1901(a5) # 8005c011 <excpt+0x1>
    800258ac:	0000d597          	auipc	a1,0xd
    800258b0:	e0c58593          	addi	a1,a1,-500 # 800326b8 <__func__.0+0x2d0>
    800258b4:	e789                	bnez	a5,800258be <stateen_AIA_test_7+0x234>
    800258b6:	0000d597          	auipc	a1,0xd
    800258ba:	df258593          	addi	a1,a1,-526 # 800326a8 <__func__.0+0x2c0>
    800258be:	0000d517          	auipc	a0,0xd
    800258c2:	e3a50513          	addi	a0,a0,-454 # 800326f8 <__func__.0+0x310>
    800258c6:	3ff090ef          	jal	8002f4c4 <printf>
    800258ca:	00036797          	auipc	a5,0x36
    800258ce:	7477c783          	lbu	a5,1863(a5) # 8005c011 <excpt+0x1>
    800258d2:	1c079f63          	bnez	a5,80025ab0 <stateen_AIA_test_7+0x426>
    800258d6:	4529                	li	a0,10
    800258d8:	0db080ef          	jal	8002e1b2 <putchar>
    800258dc:	c419                	beqz	s0,800258ea <stateen_AIA_test_7+0x260>
    800258de:	00036417          	auipc	s0,0x36
    800258e2:	73344403          	lbu	s0,1843(s0) # 8005c011 <excpt+0x1>
    800258e6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    800258ea:	4509                	li	a0,2
    800258ec:	e28db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800258f0:	d28db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800258f4:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800258f8:	f62db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    800258fc:	08c00593          	li	a1,140
    80025900:	00017617          	auipc	a2,0x17
    80025904:	a0860613          	addi	a2,a2,-1528 # 8003c308 <__func__.0+0x9f20>
    80025908:	0000d517          	auipc	a0,0xd
    8002590c:	dd850513          	addi	a0,a0,-552 # 800326e0 <__func__.0+0x2f8>
    80025910:	3b5090ef          	jal	8002f4c4 <printf>
    80025914:	00036797          	auipc	a5,0x36
    80025918:	6fd7c783          	lbu	a5,1789(a5) # 8005c011 <excpt+0x1>
    8002591c:	0000d597          	auipc	a1,0xd
    80025920:	d9c58593          	addi	a1,a1,-612 # 800326b8 <__func__.0+0x2d0>
    80025924:	e789                	bnez	a5,8002592e <stateen_AIA_test_7+0x2a4>
    80025926:	0000d597          	auipc	a1,0xd
    8002592a:	d8258593          	addi	a1,a1,-638 # 800326a8 <__func__.0+0x2c0>
    8002592e:	0000d517          	auipc	a0,0xd
    80025932:	dca50513          	addi	a0,a0,-566 # 800326f8 <__func__.0+0x310>
    80025936:	38f090ef          	jal	8002f4c4 <printf>
    8002593a:	00036797          	auipc	a5,0x36
    8002593e:	6d77c783          	lbu	a5,1751(a5) # 8005c011 <excpt+0x1>
    80025942:	14079c63          	bnez	a5,80025a9a <stateen_AIA_test_7+0x410>
    80025946:	4529                	li	a0,10
    80025948:	06b080ef          	jal	8002e1b2 <putchar>
    8002594c:	c419                	beqz	s0,8002595a <stateen_AIA_test_7+0x2d0>
    8002594e:	00036417          	auipc	s0,0x36
    80025952:	6c344403          	lbu	s0,1731(s0) # 8005c011 <excpt+0x1>
    80025956:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    8002595a:	4501                	li	a0,0
    8002595c:	db8db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025960:	cb8db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_STOPI);
    80025964:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80025968:	ef2db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    8002596c:	08c00593          	li	a1,140
    80025970:	00017617          	auipc	a2,0x17
    80025974:	9e860613          	addi	a2,a2,-1560 # 8003c358 <__func__.0+0x9f70>
    80025978:	0000d517          	auipc	a0,0xd
    8002597c:	d6850513          	addi	a0,a0,-664 # 800326e0 <__func__.0+0x2f8>
    80025980:	345090ef          	jal	8002f4c4 <printf>
    80025984:	00036797          	auipc	a5,0x36
    80025988:	68d7c783          	lbu	a5,1677(a5) # 8005c011 <excpt+0x1>
    8002598c:	0000d597          	auipc	a1,0xd
    80025990:	d2c58593          	addi	a1,a1,-724 # 800326b8 <__func__.0+0x2d0>
    80025994:	e789                	bnez	a5,8002599e <stateen_AIA_test_7+0x314>
    80025996:	0000d597          	auipc	a1,0xd
    8002599a:	d1258593          	addi	a1,a1,-750 # 800326a8 <__func__.0+0x2c0>
    8002599e:	0000d517          	auipc	a0,0xd
    800259a2:	d5a50513          	addi	a0,a0,-678 # 800326f8 <__func__.0+0x310>
    800259a6:	31f090ef          	jal	8002f4c4 <printf>
    800259aa:	00036797          	auipc	a5,0x36
    800259ae:	6677c783          	lbu	a5,1639(a5) # 8005c011 <excpt+0x1>
    800259b2:	0c079963          	bnez	a5,80025a84 <stateen_AIA_test_7+0x3fa>
    800259b6:	4529                	li	a0,10
    800259b8:	7fa080ef          	jal	8002e1b2 <putchar>
    800259bc:	c419                	beqz	s0,800259ca <stateen_AIA_test_7+0x340>
    800259be:	00036417          	auipc	s0,0x36
    800259c2:	65344403          	lbu	s0,1619(s0) # 8005c011 <excpt+0x1>
    800259c6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    800259ca:	4501                	li	a0,0
    800259cc:	d48db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800259d0:	c48db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800259d4:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800259d8:	e82db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    800259dc:	08c00593          	li	a1,140
    800259e0:	00017617          	auipc	a2,0x17
    800259e4:	9c860613          	addi	a2,a2,-1592 # 8003c3a8 <__func__.0+0x9fc0>
    800259e8:	0000d517          	auipc	a0,0xd
    800259ec:	cf850513          	addi	a0,a0,-776 # 800326e0 <__func__.0+0x2f8>
    800259f0:	2d5090ef          	jal	8002f4c4 <printf>
    800259f4:	00036797          	auipc	a5,0x36
    800259f8:	61d7c783          	lbu	a5,1565(a5) # 8005c011 <excpt+0x1>
    800259fc:	0000d597          	auipc	a1,0xd
    80025a00:	cbc58593          	addi	a1,a1,-836 # 800326b8 <__func__.0+0x2d0>
    80025a04:	e789                	bnez	a5,80025a0e <stateen_AIA_test_7+0x384>
    80025a06:	0000d597          	auipc	a1,0xd
    80025a0a:	ca258593          	addi	a1,a1,-862 # 800326a8 <__func__.0+0x2c0>
    80025a0e:	0000d517          	auipc	a0,0xd
    80025a12:	cea50513          	addi	a0,a0,-790 # 800326f8 <__func__.0+0x310>
    80025a16:	2af090ef          	jal	8002f4c4 <printf>
    80025a1a:	00036797          	auipc	a5,0x36
    80025a1e:	5f77c783          	lbu	a5,1527(a5) # 8005c011 <excpt+0x1>
    80025a22:	e7b1                	bnez	a5,80025a6e <stateen_AIA_test_7+0x3e4>
    80025a24:	4529                	li	a0,10
    80025a26:	78c080ef          	jal	8002e1b2 <putchar>
    80025a2a:	c411                	beqz	s0,80025a36 <stateen_AIA_test_7+0x3ac>
    80025a2c:	00036797          	auipc	a5,0x36
    80025a30:	5e57c783          	lbu	a5,1509(a5) # 8005c011 <excpt+0x1>
    80025a34:	c79d                	beqz	a5,80025a62 <stateen_AIA_test_7+0x3d8>
    80025a36:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80025a38:	0000d597          	auipc	a1,0xd
    80025a3c:	c8058593          	addi	a1,a1,-896 # 800326b8 <__func__.0+0x2d0>
    80025a40:	0000d517          	auipc	a0,0xd
    80025a44:	d2050513          	addi	a0,a0,-736 # 80032760 <__func__.0+0x378>
    80025a48:	27d090ef          	jal	8002f4c4 <printf>
    80025a4c:	4511                	li	a0,4
    80025a4e:	cc6db0ef          	jal	80000f14 <goto_priv>
    80025a52:	d25db0ef          	jal	80001776 <reset_state>
}
    80025a56:	60e2                	ld	ra,24(sp)
    80025a58:	8522                	mv	a0,s0
    80025a5a:	6442                	ld	s0,16(sp)
    80025a5c:	64a2                	ld	s1,8(sp)
    80025a5e:	6105                	addi	sp,sp,32
    80025a60:	8082                	ret
    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025a62:	4405                	li	s0,1
    TEST_END();
    80025a64:	0000d597          	auipc	a1,0xd
    80025a68:	c4458593          	addi	a1,a1,-956 # 800326a8 <__func__.0+0x2c0>
    80025a6c:	bfd1                	j	80025a40 <stateen_AIA_test_7+0x3b6>
    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025a6e:	0000d517          	auipc	a0,0xd
    80025a72:	c9250513          	addi	a0,a0,-878 # 80032700 <__func__.0+0x318>
    80025a76:	24f090ef          	jal	8002f4c4 <printf>
    80025a7a:	02900513          	li	a0,41
    80025a7e:	734080ef          	jal	8002e1b2 <putchar>
    80025a82:	b74d                	j	80025a24 <stateen_AIA_test_7+0x39a>
    TEST_ASSERT("vu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025a84:	0000d517          	auipc	a0,0xd
    80025a88:	c7c50513          	addi	a0,a0,-900 # 80032700 <__func__.0+0x318>
    80025a8c:	239090ef          	jal	8002f4c4 <printf>
    80025a90:	02900513          	li	a0,41
    80025a94:	71e080ef          	jal	8002e1b2 <putchar>
    80025a98:	bf39                	j	800259b6 <stateen_AIA_test_7+0x32c>
    TEST_ASSERT("vs mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025a9a:	0000d517          	auipc	a0,0xd
    80025a9e:	c6650513          	addi	a0,a0,-922 # 80032700 <__func__.0+0x318>
    80025aa2:	223090ef          	jal	8002f4c4 <printf>
    80025aa6:	02900513          	li	a0,41
    80025aaa:	708080ef          	jal	8002e1b2 <putchar>
    80025aae:	bd61                	j	80025946 <stateen_AIA_test_7+0x2bc>
    TEST_ASSERT("vs mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025ab0:	0000d517          	auipc	a0,0xd
    80025ab4:	c5050513          	addi	a0,a0,-944 # 80032700 <__func__.0+0x318>
    80025ab8:	20d090ef          	jal	8002f4c4 <printf>
    80025abc:	02900513          	li	a0,41
    80025ac0:	6f2080ef          	jal	8002e1b2 <putchar>
    80025ac4:	bd09                	j	800258d6 <stateen_AIA_test_7+0x24c>
    TEST_ASSERT("vu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    80025ac6:	0000d517          	auipc	a0,0xd
    80025aca:	c3a50513          	addi	a0,a0,-966 # 80032700 <__func__.0+0x318>
    80025ace:	1f7090ef          	jal	8002f4c4 <printf>
    80025ad2:	02900513          	li	a0,41
    80025ad6:	6dc080ef          	jal	8002e1b2 <putchar>
    80025ada:	b371                	j	80025866 <stateen_AIA_test_7+0x1dc>
    TEST_ASSERT("vu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    80025adc:	0000d517          	auipc	a0,0xd
    80025ae0:	c2450513          	addi	a0,a0,-988 # 80032700 <__func__.0+0x318>
    80025ae4:	1e1090ef          	jal	8002f4c4 <printf>
    80025ae8:	02900513          	li	a0,41
    80025aec:	6c6080ef          	jal	8002e1b2 <putchar>
    80025af0:	b319                	j	800257f6 <stateen_AIA_test_7+0x16c>
    TEST_ASSERT("vs mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    80025af2:	0000d517          	auipc	a0,0xd
    80025af6:	c0e50513          	addi	a0,a0,-1010 # 80032700 <__func__.0+0x318>
    80025afa:	1cb090ef          	jal	8002f4c4 <printf>
    80025afe:	02900513          	li	a0,41
    80025b02:	6b0080ef          	jal	8002e1b2 <putchar>
    80025b06:	b9bd                	j	80025784 <stateen_AIA_test_7+0xfa>
    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    80025b08:	0000d517          	auipc	a0,0xd
    80025b0c:	bf850513          	addi	a0,a0,-1032 # 80032700 <__func__.0+0x318>
    80025b10:	1b5090ef          	jal	8002f4c4 <printf>
    80025b14:	02900513          	li	a0,41
    80025b18:	69a080ef          	jal	8002e1b2 <putchar>
    80025b1c:	befd                	j	8002571a <stateen_AIA_test_7+0x90>

0000000080025b1e <stateen_CSRIND_test>:



//mstateen.csrind 和 hstateen.csrind 在xiangshan中默认为1，且RO
bool stateen_CSRIND_test(){
    80025b1e:	1101                	addi	sp,sp,-32

    TEST_START();
    80025b20:	0000c597          	auipc	a1,0xc
    80025b24:	1a858593          	addi	a1,a1,424 # 80031cc8 <__func__.15>
    80025b28:	0000d517          	auipc	a0,0xd
    80025b2c:	ba050513          	addi	a0,a0,-1120 # 800326c8 <__func__.0+0x2e0>
bool stateen_CSRIND_test(){
    80025b30:	ec06                	sd	ra,24(sp)
    80025b32:	e822                	sd	s0,16(sp)
    80025b34:	e426                	sd	s1,8(sp)
    TEST_START();
    80025b36:	18f090ef          	jal	8002f4c4 <printf>
    80025b3a:	4529                	li	a0,10
    80025b3c:	676080ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80025b40:	4511                	li	a0,4
    80025b42:	bd2db0ef          	jal	80000f14 <goto_priv>
    //当mstateen.CSRIND=1 hstateen.CSRIND=1,v=1 时可访问iselect，ireg等寄存器

    goto_priv(PRIV_VS);
    80025b46:	4509                	li	a0,2
    80025b48:	bccdb0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025b4c:	accdb0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025b50:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025b54:	d06db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025b58:	08c00593          	li	a1,140
    80025b5c:	00017617          	auipc	a2,0x17
    80025b60:	89c60613          	addi	a2,a2,-1892 # 8003c3f8 <__func__.0+0xa010>
    80025b64:	0000d517          	auipc	a0,0xd
    80025b68:	b7c50513          	addi	a0,a0,-1156 # 800326e0 <__func__.0+0x2f8>
    80025b6c:	159090ef          	jal	8002f4c4 <printf>
    80025b70:	00036797          	auipc	a5,0x36
    80025b74:	4a17c783          	lbu	a5,1185(a5) # 8005c011 <excpt+0x1>
    80025b78:	0000d597          	auipc	a1,0xd
    80025b7c:	b3058593          	addi	a1,a1,-1232 # 800326a8 <__func__.0+0x2c0>
    80025b80:	c789                	beqz	a5,80025b8a <stateen_CSRIND_test+0x6c>
    80025b82:	0000d597          	auipc	a1,0xd
    80025b86:	b3658593          	addi	a1,a1,-1226 # 800326b8 <__func__.0+0x2d0>
    80025b8a:	0000d517          	auipc	a0,0xd
    80025b8e:	b6e50513          	addi	a0,a0,-1170 # 800326f8 <__func__.0+0x310>
    80025b92:	133090ef          	jal	8002f4c4 <printf>
    80025b96:	00036797          	auipc	a5,0x36
    80025b9a:	47b7c783          	lbu	a5,1147(a5) # 8005c011 <excpt+0x1>
    80025b9e:	3e079963          	bnez	a5,80025f90 <stateen_CSRIND_test+0x472>
    80025ba2:	4529                	li	a0,10
    80025ba4:	60e080ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80025ba8:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025baa:	00036497          	auipc	s1,0x36
    80025bae:	4674c483          	lbu	s1,1127(s1) # 8005c011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80025bb2:	b62db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025bb6:	a62db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025bba:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025bbe:	c9cdb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025bc2:	08c00593          	li	a1,140
    80025bc6:	00017617          	auipc	a2,0x17
    80025bca:	88a60613          	addi	a2,a2,-1910 # 8003c450 <__func__.0+0xa068>
    80025bce:	0000d517          	auipc	a0,0xd
    80025bd2:	b1250513          	addi	a0,a0,-1262 # 800326e0 <__func__.0+0x2f8>
    80025bd6:	0ef090ef          	jal	8002f4c4 <printf>
    80025bda:	00036797          	auipc	a5,0x36
    80025bde:	4377c783          	lbu	a5,1079(a5) # 8005c011 <excpt+0x1>
    80025be2:	0000d597          	auipc	a1,0xd
    80025be6:	ad658593          	addi	a1,a1,-1322 # 800326b8 <__func__.0+0x2d0>
    80025bea:	e789                	bnez	a5,80025bf4 <stateen_CSRIND_test+0xd6>
    80025bec:	0000d597          	auipc	a1,0xd
    80025bf0:	abc58593          	addi	a1,a1,-1348 # 800326a8 <__func__.0+0x2c0>
    80025bf4:	0000d517          	auipc	a0,0xd
    80025bf8:	b0450513          	addi	a0,a0,-1276 # 800326f8 <__func__.0+0x310>
    80025bfc:	0c9090ef          	jal	8002f4c4 <printf>
    80025c00:	00036797          	auipc	a5,0x36
    80025c04:	4117c783          	lbu	a5,1041(a5) # 8005c011 <excpt+0x1>
    80025c08:	36079963          	bnez	a5,80025f7a <stateen_CSRIND_test+0x45c>
    80025c0c:	4529                	li	a0,10
    80025c0e:	5a4080ef          	jal	8002e1b2 <putchar>
    80025c12:	4401                	li	s0,0
    80025c14:	e499                	bnez	s1,80025c22 <stateen_CSRIND_test+0x104>
    80025c16:	00036417          	auipc	s0,0x36
    80025c1a:	3fb44403          	lbu	s0,1019(s0) # 8005c011 <excpt+0x1>
    80025c1e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    80025c22:	450d                	li	a0,3
    80025c24:	af0db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025c28:	9f0db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025c2c:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025c30:	c2adb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025c34:	08c00593          	li	a1,140
    80025c38:	00017617          	auipc	a2,0x17
    80025c3c:	87060613          	addi	a2,a2,-1936 # 8003c4a8 <__func__.0+0xa0c0>
    80025c40:	0000d517          	auipc	a0,0xd
    80025c44:	aa050513          	addi	a0,a0,-1376 # 800326e0 <__func__.0+0x2f8>
    80025c48:	07d090ef          	jal	8002f4c4 <printf>
    80025c4c:	00036797          	auipc	a5,0x36
    80025c50:	3c57c783          	lbu	a5,965(a5) # 8005c011 <excpt+0x1>
    80025c54:	0000d597          	auipc	a1,0xd
    80025c58:	a6458593          	addi	a1,a1,-1436 # 800326b8 <__func__.0+0x2d0>
    80025c5c:	e789                	bnez	a5,80025c66 <stateen_CSRIND_test+0x148>
    80025c5e:	0000d597          	auipc	a1,0xd
    80025c62:	a4a58593          	addi	a1,a1,-1462 # 800326a8 <__func__.0+0x2c0>
    80025c66:	0000d517          	auipc	a0,0xd
    80025c6a:	a9250513          	addi	a0,a0,-1390 # 800326f8 <__func__.0+0x310>
    80025c6e:	057090ef          	jal	8002f4c4 <printf>
    80025c72:	00036797          	auipc	a5,0x36
    80025c76:	39f7c783          	lbu	a5,927(a5) # 8005c011 <excpt+0x1>
    80025c7a:	2e079563          	bnez	a5,80025f64 <stateen_CSRIND_test+0x446>
    80025c7e:	4529                	li	a0,10
    80025c80:	532080ef          	jal	8002e1b2 <putchar>
    80025c84:	c419                	beqz	s0,80025c92 <stateen_CSRIND_test+0x174>
    80025c86:	00036417          	auipc	s0,0x36
    80025c8a:	38b44403          	lbu	s0,907(s0) # 8005c011 <excpt+0x1>
    80025c8e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HS);
    80025c92:	450d                	li	a0,3
    80025c94:	a80db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025c98:	980db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025c9c:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025ca0:	bbadb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025ca4:	08c00593          	li	a1,140
    80025ca8:	00017617          	auipc	a2,0x17
    80025cac:	85860613          	addi	a2,a2,-1960 # 8003c500 <__func__.0+0xa118>
    80025cb0:	0000d517          	auipc	a0,0xd
    80025cb4:	a3050513          	addi	a0,a0,-1488 # 800326e0 <__func__.0+0x2f8>
    80025cb8:	00d090ef          	jal	8002f4c4 <printf>
    80025cbc:	00036797          	auipc	a5,0x36
    80025cc0:	3557c783          	lbu	a5,853(a5) # 8005c011 <excpt+0x1>
    80025cc4:	0000d597          	auipc	a1,0xd
    80025cc8:	9f458593          	addi	a1,a1,-1548 # 800326b8 <__func__.0+0x2d0>
    80025ccc:	e789                	bnez	a5,80025cd6 <stateen_CSRIND_test+0x1b8>
    80025cce:	0000d597          	auipc	a1,0xd
    80025cd2:	9da58593          	addi	a1,a1,-1574 # 800326a8 <__func__.0+0x2c0>
    80025cd6:	0000d517          	auipc	a0,0xd
    80025cda:	a2250513          	addi	a0,a0,-1502 # 800326f8 <__func__.0+0x310>
    80025cde:	7e6090ef          	jal	8002f4c4 <printf>
    80025ce2:	00036797          	auipc	a5,0x36
    80025ce6:	32f7c783          	lbu	a5,815(a5) # 8005c011 <excpt+0x1>
    80025cea:	26079263          	bnez	a5,80025f4e <stateen_CSRIND_test+0x430>
    80025cee:	4529                	li	a0,10
    80025cf0:	4c2080ef          	jal	8002e1b2 <putchar>
    80025cf4:	c419                	beqz	s0,80025d02 <stateen_CSRIND_test+0x1e4>
    80025cf6:	00036417          	auipc	s0,0x36
    80025cfa:	31b44403          	lbu	s0,795(s0) # 8005c011 <excpt+0x1>
    80025cfe:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025d02:	4505                	li	a0,1
    80025d04:	a10db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025d08:	910db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025d0c:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025d10:	b4adb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d14:	08c00593          	li	a1,140
    80025d18:	00017617          	auipc	a2,0x17
    80025d1c:	84060613          	addi	a2,a2,-1984 # 8003c558 <__func__.0+0xa170>
    80025d20:	0000d517          	auipc	a0,0xd
    80025d24:	9c050513          	addi	a0,a0,-1600 # 800326e0 <__func__.0+0x2f8>
    80025d28:	79c090ef          	jal	8002f4c4 <printf>
    80025d2c:	00036797          	auipc	a5,0x36
    80025d30:	2e57c783          	lbu	a5,741(a5) # 8005c011 <excpt+0x1>
    80025d34:	0000d597          	auipc	a1,0xd
    80025d38:	98458593          	addi	a1,a1,-1660 # 800326b8 <__func__.0+0x2d0>
    80025d3c:	e789                	bnez	a5,80025d46 <stateen_CSRIND_test+0x228>
    80025d3e:	0000d597          	auipc	a1,0xd
    80025d42:	96a58593          	addi	a1,a1,-1686 # 800326a8 <__func__.0+0x2c0>
    80025d46:	0000d517          	auipc	a0,0xd
    80025d4a:	9b250513          	addi	a0,a0,-1614 # 800326f8 <__func__.0+0x310>
    80025d4e:	776090ef          	jal	8002f4c4 <printf>
    80025d52:	00036797          	auipc	a5,0x36
    80025d56:	2bf7c783          	lbu	a5,703(a5) # 8005c011 <excpt+0x1>
    80025d5a:	1c079f63          	bnez	a5,80025f38 <stateen_CSRIND_test+0x41a>
    80025d5e:	4529                	li	a0,10
    80025d60:	452080ef          	jal	8002e1b2 <putchar>
    80025d64:	c419                	beqz	s0,80025d72 <stateen_CSRIND_test+0x254>
    80025d66:	00036417          	auipc	s0,0x36
    80025d6a:	2ab44403          	lbu	s0,683(s0) # 8005c011 <excpt+0x1>
    80025d6e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025d72:	4505                	li	a0,1
    80025d74:	9a0db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025d78:	8a0db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025d7c:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025d80:	adadb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d84:	08c00593          	li	a1,140
    80025d88:	00017617          	auipc	a2,0x17
    80025d8c:	82860613          	addi	a2,a2,-2008 # 8003c5b0 <__func__.0+0xa1c8>
    80025d90:	0000d517          	auipc	a0,0xd
    80025d94:	95050513          	addi	a0,a0,-1712 # 800326e0 <__func__.0+0x2f8>
    80025d98:	72c090ef          	jal	8002f4c4 <printf>
    80025d9c:	00036797          	auipc	a5,0x36
    80025da0:	2757c783          	lbu	a5,629(a5) # 8005c011 <excpt+0x1>
    80025da4:	0000d597          	auipc	a1,0xd
    80025da8:	91458593          	addi	a1,a1,-1772 # 800326b8 <__func__.0+0x2d0>
    80025dac:	e789                	bnez	a5,80025db6 <stateen_CSRIND_test+0x298>
    80025dae:	0000d597          	auipc	a1,0xd
    80025db2:	8fa58593          	addi	a1,a1,-1798 # 800326a8 <__func__.0+0x2c0>
    80025db6:	0000d517          	auipc	a0,0xd
    80025dba:	94250513          	addi	a0,a0,-1726 # 800326f8 <__func__.0+0x310>
    80025dbe:	706090ef          	jal	8002f4c4 <printf>
    80025dc2:	00036797          	auipc	a5,0x36
    80025dc6:	24f7c783          	lbu	a5,591(a5) # 8005c011 <excpt+0x1>
    80025dca:	14079c63          	bnez	a5,80025f22 <stateen_CSRIND_test+0x404>
    80025dce:	4529                	li	a0,10
    80025dd0:	3e2080ef          	jal	8002e1b2 <putchar>
    80025dd4:	c419                	beqz	s0,80025de2 <stateen_CSRIND_test+0x2c4>
    80025dd6:	00036417          	auipc	s0,0x36
    80025dda:	23b44403          	lbu	s0,571(s0) # 8005c011 <excpt+0x1>
    80025dde:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80025de2:	4511                	li	a0,4
    80025de4:	930db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025de8:	830db0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025dec:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025df0:	a6adb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025df4:	08c00593          	li	a1,140
    80025df8:	00017617          	auipc	a2,0x17
    80025dfc:	81060613          	addi	a2,a2,-2032 # 8003c608 <__func__.0+0xa220>
    80025e00:	0000d517          	auipc	a0,0xd
    80025e04:	8e050513          	addi	a0,a0,-1824 # 800326e0 <__func__.0+0x2f8>
    80025e08:	6bc090ef          	jal	8002f4c4 <printf>
    80025e0c:	00036797          	auipc	a5,0x36
    80025e10:	2057c783          	lbu	a5,517(a5) # 8005c011 <excpt+0x1>
    80025e14:	0000d597          	auipc	a1,0xd
    80025e18:	8a458593          	addi	a1,a1,-1884 # 800326b8 <__func__.0+0x2d0>
    80025e1c:	e789                	bnez	a5,80025e26 <stateen_CSRIND_test+0x308>
    80025e1e:	0000d597          	auipc	a1,0xd
    80025e22:	88a58593          	addi	a1,a1,-1910 # 800326a8 <__func__.0+0x2c0>
    80025e26:	0000d517          	auipc	a0,0xd
    80025e2a:	8d250513          	addi	a0,a0,-1838 # 800326f8 <__func__.0+0x310>
    80025e2e:	696090ef          	jal	8002f4c4 <printf>
    80025e32:	00036797          	auipc	a5,0x36
    80025e36:	1df7c783          	lbu	a5,479(a5) # 8005c011 <excpt+0x1>
    80025e3a:	0c079963          	bnez	a5,80025f0c <stateen_CSRIND_test+0x3ee>
    80025e3e:	4529                	li	a0,10
    80025e40:	372080ef          	jal	8002e1b2 <putchar>
    80025e44:	c419                	beqz	s0,80025e52 <stateen_CSRIND_test+0x334>
    80025e46:	00036417          	auipc	s0,0x36
    80025e4a:	1cb44403          	lbu	s0,459(s0) # 8005c011 <excpt+0x1>
    80025e4e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80025e52:	4511                	li	a0,4
    80025e54:	8c0db0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025e58:	fc1da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025e5c:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025e60:	9fadb0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025e64:	08c00593          	li	a1,140
    80025e68:	00016617          	auipc	a2,0x16
    80025e6c:	7f860613          	addi	a2,a2,2040 # 8003c660 <__func__.0+0xa278>
    80025e70:	0000d517          	auipc	a0,0xd
    80025e74:	87050513          	addi	a0,a0,-1936 # 800326e0 <__func__.0+0x2f8>
    80025e78:	64c090ef          	jal	8002f4c4 <printf>
    80025e7c:	00036797          	auipc	a5,0x36
    80025e80:	1957c783          	lbu	a5,405(a5) # 8005c011 <excpt+0x1>
    80025e84:	0000d597          	auipc	a1,0xd
    80025e88:	83458593          	addi	a1,a1,-1996 # 800326b8 <__func__.0+0x2d0>
    80025e8c:	e789                	bnez	a5,80025e96 <stateen_CSRIND_test+0x378>
    80025e8e:	0000d597          	auipc	a1,0xd
    80025e92:	81a58593          	addi	a1,a1,-2022 # 800326a8 <__func__.0+0x2c0>
    80025e96:	0000d517          	auipc	a0,0xd
    80025e9a:	86250513          	addi	a0,a0,-1950 # 800326f8 <__func__.0+0x310>
    80025e9e:	626090ef          	jal	8002f4c4 <printf>
    80025ea2:	00036797          	auipc	a5,0x36
    80025ea6:	16f7c783          	lbu	a5,367(a5) # 8005c011 <excpt+0x1>
    80025eaa:	e7b1                	bnez	a5,80025ef6 <stateen_CSRIND_test+0x3d8>
    80025eac:	4529                	li	a0,10
    80025eae:	304080ef          	jal	8002e1b2 <putchar>
    80025eb2:	c411                	beqz	s0,80025ebe <stateen_CSRIND_test+0x3a0>
    80025eb4:	00036797          	auipc	a5,0x36
    80025eb8:	15d7c783          	lbu	a5,349(a5) # 8005c011 <excpt+0x1>
    80025ebc:	c79d                	beqz	a5,80025eea <stateen_CSRIND_test+0x3cc>
    80025ebe:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80025ec0:	0000c597          	auipc	a1,0xc
    80025ec4:	7f858593          	addi	a1,a1,2040 # 800326b8 <__func__.0+0x2d0>
    80025ec8:	0000d517          	auipc	a0,0xd
    80025ecc:	89850513          	addi	a0,a0,-1896 # 80032760 <__func__.0+0x378>
    80025ed0:	5f4090ef          	jal	8002f4c4 <printf>
    80025ed4:	4511                	li	a0,4
    80025ed6:	83edb0ef          	jal	80000f14 <goto_priv>
    80025eda:	89ddb0ef          	jal	80001776 <reset_state>
}
    80025ede:	60e2                	ld	ra,24(sp)
    80025ee0:	8522                	mv	a0,s0
    80025ee2:	6442                	ld	s0,16(sp)
    80025ee4:	64a2                	ld	s1,8(sp)
    80025ee6:	6105                	addi	sp,sp,32
    80025ee8:	8082                	ret
    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025eea:	4405                	li	s0,1
    TEST_END();
    80025eec:	0000c597          	auipc	a1,0xc
    80025ef0:	7bc58593          	addi	a1,a1,1980 # 800326a8 <__func__.0+0x2c0>
    80025ef4:	bfd1                	j	80025ec8 <stateen_CSRIND_test+0x3aa>
    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025ef6:	0000d517          	auipc	a0,0xd
    80025efa:	80a50513          	addi	a0,a0,-2038 # 80032700 <__func__.0+0x318>
    80025efe:	5c6090ef          	jal	8002f4c4 <printf>
    80025f02:	02900513          	li	a0,41
    80025f06:	2ac080ef          	jal	8002e1b2 <putchar>
    80025f0a:	b74d                	j	80025eac <stateen_CSRIND_test+0x38e>
    TEST_ASSERT("m mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f0c:	0000c517          	auipc	a0,0xc
    80025f10:	7f450513          	addi	a0,a0,2036 # 80032700 <__func__.0+0x318>
    80025f14:	5b0090ef          	jal	8002f4c4 <printf>
    80025f18:	02900513          	li	a0,41
    80025f1c:	296080ef          	jal	8002e1b2 <putchar>
    80025f20:	bf39                	j	80025e3e <stateen_CSRIND_test+0x320>
    TEST_ASSERT("hu mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f22:	0000c517          	auipc	a0,0xc
    80025f26:	7de50513          	addi	a0,a0,2014 # 80032700 <__func__.0+0x318>
    80025f2a:	59a090ef          	jal	8002f4c4 <printf>
    80025f2e:	02900513          	li	a0,41
    80025f32:	280080ef          	jal	8002e1b2 <putchar>
    80025f36:	bd61                	j	80025dce <stateen_CSRIND_test+0x2b0>
    TEST_ASSERT("hu mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f38:	0000c517          	auipc	a0,0xc
    80025f3c:	7c850513          	addi	a0,a0,1992 # 80032700 <__func__.0+0x318>
    80025f40:	584090ef          	jal	8002f4c4 <printf>
    80025f44:	02900513          	li	a0,41
    80025f48:	26a080ef          	jal	8002e1b2 <putchar>
    80025f4c:	bd09                	j	80025d5e <stateen_CSRIND_test+0x240>
    TEST_ASSERT("hs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f4e:	0000c517          	auipc	a0,0xc
    80025f52:	7b250513          	addi	a0,a0,1970 # 80032700 <__func__.0+0x318>
    80025f56:	56e090ef          	jal	8002f4c4 <printf>
    80025f5a:	02900513          	li	a0,41
    80025f5e:	254080ef          	jal	8002e1b2 <putchar>
    80025f62:	b371                	j	80025cee <stateen_CSRIND_test+0x1d0>
    TEST_ASSERT("hs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f64:	0000c517          	auipc	a0,0xc
    80025f68:	79c50513          	addi	a0,a0,1948 # 80032700 <__func__.0+0x318>
    80025f6c:	558090ef          	jal	8002f4c4 <printf>
    80025f70:	02900513          	li	a0,41
    80025f74:	23e080ef          	jal	8002e1b2 <putchar>
    80025f78:	b319                	j	80025c7e <stateen_CSRIND_test+0x160>
    TEST_ASSERT("vs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f7a:	0000c517          	auipc	a0,0xc
    80025f7e:	78650513          	addi	a0,a0,1926 # 80032700 <__func__.0+0x318>
    80025f82:	542090ef          	jal	8002f4c4 <printf>
    80025f86:	02900513          	li	a0,41
    80025f8a:	228080ef          	jal	8002e1b2 <putchar>
    80025f8e:	b9bd                	j	80025c0c <stateen_CSRIND_test+0xee>
    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f90:	0000c517          	auipc	a0,0xc
    80025f94:	77050513          	addi	a0,a0,1904 # 80032700 <__func__.0+0x318>
    80025f98:	52c090ef          	jal	8002f4c4 <printf>
    80025f9c:	02900513          	li	a0,41
    80025fa0:	212080ef          	jal	8002e1b2 <putchar>
    80025fa4:	befd                	j	80025ba2 <stateen_CSRIND_test+0x84>

0000000080025fa6 <stateen_ENVCFG_test_1>:

// ----------


bool stateen_ENVCFG_test_1(){
    80025fa6:	1101                	addi	sp,sp,-32

    TEST_START();
    80025fa8:	0000c597          	auipc	a1,0xc
    80025fac:	d3858593          	addi	a1,a1,-712 # 80031ce0 <__func__.14>
    80025fb0:	0000c517          	auipc	a0,0xc
    80025fb4:	71850513          	addi	a0,a0,1816 # 800326c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_1(){
    80025fb8:	ec06                	sd	ra,24(sp)
    80025fba:	e822                	sd	s0,16(sp)
    80025fbc:	e426                	sd	s1,8(sp)
    TEST_START();
    80025fbe:	506090ef          	jal	8002f4c4 <printf>
    80025fc2:	4529                	li	a0,10
    80025fc4:	1ee080ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80025fc8:	4511                	li	a0,4
    80025fca:	f4bda0ef          	jal	80000f14 <goto_priv>
    //当mstateen.ENVCFG=0,hu mode 不可访问Henvcfg和Senvcfg寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80025fce:	4785                	li	a5,1
    80025fd0:	17fa                	slli	a5,a5,0x3e
    80025fd2:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80025fd6:	4505                	li	a0,1
    80025fd8:	f3dda0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025fdc:	e3dda0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80025fe0:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80025fe4:	876db0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("HU mode accesss envcfg register cause to illegal except when mstateen.envcfg=0",
    80025fe8:	08c00593          	li	a1,140
    80025fec:	00016617          	auipc	a2,0x16
    80025ff0:	6cc60613          	addi	a2,a2,1740 # 8003c6b8 <__func__.0+0xa2d0>
    80025ff4:	0000c517          	auipc	a0,0xc
    80025ff8:	6ec50513          	addi	a0,a0,1772 # 800326e0 <__func__.0+0x2f8>
    80025ffc:	4c8090ef          	jal	8002f4c4 <printf>
    80026000:	00036797          	auipc	a5,0x36
    80026004:	0117c783          	lbu	a5,17(a5) # 8005c011 <excpt+0x1>
    80026008:	00036497          	auipc	s1,0x36
    8002600c:	00848493          	addi	s1,s1,8 # 8005c010 <excpt>
    80026010:	0000c597          	auipc	a1,0xc
    80026014:	6a858593          	addi	a1,a1,1704 # 800326b8 <__func__.0+0x2d0>
    80026018:	cf89                	beqz	a5,80026032 <stateen_ENVCFG_test_1+0x8c>
    8002601a:	6498                	ld	a4,8(s1)
    8002601c:	4789                	li	a5,2
    8002601e:	0000c597          	auipc	a1,0xc
    80026022:	68a58593          	addi	a1,a1,1674 # 800326a8 <__func__.0+0x2c0>
    80026026:	00f70663          	beq	a4,a5,80026032 <stateen_ENVCFG_test_1+0x8c>
    8002602a:	0000c597          	auipc	a1,0xc
    8002602e:	68e58593          	addi	a1,a1,1678 # 800326b8 <__func__.0+0x2d0>
    80026032:	0000c517          	auipc	a0,0xc
    80026036:	6c650513          	addi	a0,a0,1734 # 800326f8 <__func__.0+0x310>
    8002603a:	48a090ef          	jal	8002f4c4 <printf>
    8002603e:	00036797          	auipc	a5,0x36
    80026042:	fd37c783          	lbu	a5,-45(a5) # 8005c011 <excpt+0x1>
    80026046:	c789                	beqz	a5,80026050 <stateen_ENVCFG_test_1+0xaa>
    80026048:	6498                	ld	a4,8(s1)
    8002604a:	4789                	li	a5,2
    8002604c:	00f70c63          	beq	a4,a5,80026064 <stateen_ENVCFG_test_1+0xbe>
    80026050:	0000c517          	auipc	a0,0xc
    80026054:	6b050513          	addi	a0,a0,1712 # 80032700 <__func__.0+0x318>
    80026058:	46c090ef          	jal	8002f4c4 <printf>
    8002605c:	02900513          	li	a0,41
    80026060:	152080ef          	jal	8002e1b2 <putchar>
    80026064:	4529                	li	a0,10
    80026066:	14c080ef          	jal	8002e1b2 <putchar>
    8002606a:	00036797          	auipc	a5,0x36
    8002606e:	fa77c783          	lbu	a5,-89(a5) # 8005c011 <excpt+0x1>
    80026072:	4401                	li	s0,0
    80026074:	c789                	beqz	a5,8002607e <stateen_ENVCFG_test_1+0xd8>
    80026076:	6480                	ld	s0,8(s1)
    80026078:	1479                	addi	s0,s0,-2
    8002607a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    8002607e:	4505                	li	a0,1
    80026080:	e95da0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026084:	d95da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026088:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    8002608c:	fcfda0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80026090:	08c00593          	li	a1,140
    80026094:	00016617          	auipc	a2,0x16
    80026098:	67460613          	addi	a2,a2,1652 # 8003c708 <__func__.0+0xa320>
    8002609c:	0000c517          	auipc	a0,0xc
    800260a0:	64450513          	addi	a0,a0,1604 # 800326e0 <__func__.0+0x2f8>
    800260a4:	420090ef          	jal	8002f4c4 <printf>
    800260a8:	00036797          	auipc	a5,0x36
    800260ac:	f697c783          	lbu	a5,-151(a5) # 8005c011 <excpt+0x1>
    800260b0:	0000c597          	auipc	a1,0xc
    800260b4:	60858593          	addi	a1,a1,1544 # 800326b8 <__func__.0+0x2d0>
    800260b8:	cf89                	beqz	a5,800260d2 <stateen_ENVCFG_test_1+0x12c>
    800260ba:	6498                	ld	a4,8(s1)
    800260bc:	4789                	li	a5,2
    800260be:	0000c597          	auipc	a1,0xc
    800260c2:	5ea58593          	addi	a1,a1,1514 # 800326a8 <__func__.0+0x2c0>
    800260c6:	00f70663          	beq	a4,a5,800260d2 <stateen_ENVCFG_test_1+0x12c>
    800260ca:	0000c597          	auipc	a1,0xc
    800260ce:	5ee58593          	addi	a1,a1,1518 # 800326b8 <__func__.0+0x2d0>
    800260d2:	0000c517          	auipc	a0,0xc
    800260d6:	62650513          	addi	a0,a0,1574 # 800326f8 <__func__.0+0x310>
    800260da:	3ea090ef          	jal	8002f4c4 <printf>
    800260de:	00036797          	auipc	a5,0x36
    800260e2:	f337c783          	lbu	a5,-205(a5) # 8005c011 <excpt+0x1>
    800260e6:	c789                	beqz	a5,800260f0 <stateen_ENVCFG_test_1+0x14a>
    800260e8:	6498                	ld	a4,8(s1)
    800260ea:	4789                	li	a5,2
    800260ec:	00f70c63          	beq	a4,a5,80026104 <stateen_ENVCFG_test_1+0x15e>
    800260f0:	0000c517          	auipc	a0,0xc
    800260f4:	61050513          	addi	a0,a0,1552 # 80032700 <__func__.0+0x318>
    800260f8:	3cc090ef          	jal	8002f4c4 <printf>
    800260fc:	02900513          	li	a0,41
    80026100:	0b2080ef          	jal	8002e1b2 <putchar>
    80026104:	4529                	li	a0,10
    80026106:	0ac080ef          	jal	8002e1b2 <putchar>
    8002610a:	c015                	beqz	s0,8002612e <stateen_ENVCFG_test_1+0x188>
    8002610c:	00036417          	auipc	s0,0x36
    80026110:	f0544403          	lbu	s0,-251(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80026114:	0000c597          	auipc	a1,0xc
    80026118:	5a458593          	addi	a1,a1,1444 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    8002611c:	cc11                	beqz	s0,80026138 <stateen_ENVCFG_test_1+0x192>
    8002611e:	6498                	ld	a4,8(s1)
    80026120:	4789                	li	a5,2
    TEST_END();
    80026122:	0000c597          	auipc	a1,0xc
    80026126:	58658593          	addi	a1,a1,1414 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    8002612a:	00f70763          	beq	a4,a5,80026138 <stateen_ENVCFG_test_1+0x192>
    8002612e:	4401                	li	s0,0
    TEST_END();
    80026130:	0000c597          	auipc	a1,0xc
    80026134:	58858593          	addi	a1,a1,1416 # 800326b8 <__func__.0+0x2d0>
    80026138:	0000c517          	auipc	a0,0xc
    8002613c:	62850513          	addi	a0,a0,1576 # 80032760 <__func__.0+0x378>
    80026140:	384090ef          	jal	8002f4c4 <printf>
    80026144:	4511                	li	a0,4
    80026146:	dcfda0ef          	jal	80000f14 <goto_priv>
    8002614a:	e2cdb0ef          	jal	80001776 <reset_state>

}
    8002614e:	60e2                	ld	ra,24(sp)
    80026150:	8522                	mv	a0,s0
    80026152:	6442                	ld	s0,16(sp)
    80026154:	64a2                	ld	s1,8(sp)
    80026156:	6105                	addi	sp,sp,32
    80026158:	8082                	ret

000000008002615a <stateen_ENVCFG_test_2>:

bool stateen_ENVCFG_test_2(){
    8002615a:	1101                	addi	sp,sp,-32

    TEST_START();
    8002615c:	0000c597          	auipc	a1,0xc
    80026160:	b9c58593          	addi	a1,a1,-1124 # 80031cf8 <__func__.13>
    80026164:	0000c517          	auipc	a0,0xc
    80026168:	56450513          	addi	a0,a0,1380 # 800326c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_2(){
    8002616c:	ec06                	sd	ra,24(sp)
    8002616e:	e822                	sd	s0,16(sp)
    80026170:	e426                	sd	s1,8(sp)
    TEST_START();
    80026172:	352090ef          	jal	8002f4c4 <printf>
    80026176:	4529                	li	a0,10
    80026178:	03a080ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    8002617c:	4511                	li	a0,4
    8002617e:	d97da0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026182:	4785                	li	a5,1
    80026184:	17fa                	slli	a5,a5,0x3e
    80026186:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    8002618a:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.ENVCFG=1,hstateen.ENVCFG=0,v=1时,不可访问Henvcfg和Senvcfg寄存器
    goto_priv(PRIV_VU);
    8002618e:	4501                	li	a0,0
    80026190:	d85da0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026194:	c85da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026198:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    8002619c:	ebfda0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("VU mode accesss henvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800261a0:	08c00593          	li	a1,140
    800261a4:	00016617          	auipc	a2,0x16
    800261a8:	5b460613          	addi	a2,a2,1460 # 8003c758 <__func__.0+0xa370>
    800261ac:	0000c517          	auipc	a0,0xc
    800261b0:	53450513          	addi	a0,a0,1332 # 800326e0 <__func__.0+0x2f8>
    800261b4:	310090ef          	jal	8002f4c4 <printf>
    800261b8:	00036797          	auipc	a5,0x36
    800261bc:	e597c783          	lbu	a5,-423(a5) # 8005c011 <excpt+0x1>
    800261c0:	00036497          	auipc	s1,0x36
    800261c4:	e5048493          	addi	s1,s1,-432 # 8005c010 <excpt>
    800261c8:	0000c597          	auipc	a1,0xc
    800261cc:	4f058593          	addi	a1,a1,1264 # 800326b8 <__func__.0+0x2d0>
    800261d0:	cf89                	beqz	a5,800261ea <stateen_ENVCFG_test_2+0x90>
    800261d2:	6498                	ld	a4,8(s1)
    800261d4:	47d9                	li	a5,22
    800261d6:	0000c597          	auipc	a1,0xc
    800261da:	4d258593          	addi	a1,a1,1234 # 800326a8 <__func__.0+0x2c0>
    800261de:	00f70663          	beq	a4,a5,800261ea <stateen_ENVCFG_test_2+0x90>
    800261e2:	0000c597          	auipc	a1,0xc
    800261e6:	4d658593          	addi	a1,a1,1238 # 800326b8 <__func__.0+0x2d0>
    800261ea:	0000c517          	auipc	a0,0xc
    800261ee:	50e50513          	addi	a0,a0,1294 # 800326f8 <__func__.0+0x310>
    800261f2:	2d2090ef          	jal	8002f4c4 <printf>
    800261f6:	00036797          	auipc	a5,0x36
    800261fa:	e1b7c783          	lbu	a5,-485(a5) # 8005c011 <excpt+0x1>
    800261fe:	c789                	beqz	a5,80026208 <stateen_ENVCFG_test_2+0xae>
    80026200:	6498                	ld	a4,8(s1)
    80026202:	47d9                	li	a5,22
    80026204:	00f70c63          	beq	a4,a5,8002621c <stateen_ENVCFG_test_2+0xc2>
    80026208:	0000c517          	auipc	a0,0xc
    8002620c:	4f850513          	addi	a0,a0,1272 # 80032700 <__func__.0+0x318>
    80026210:	2b4090ef          	jal	8002f4c4 <printf>
    80026214:	02900513          	li	a0,41
    80026218:	79b070ef          	jal	8002e1b2 <putchar>
    8002621c:	4529                	li	a0,10
    8002621e:	795070ef          	jal	8002e1b2 <putchar>
    80026222:	00036797          	auipc	a5,0x36
    80026226:	def7c783          	lbu	a5,-529(a5) # 8005c011 <excpt+0x1>
    8002622a:	4401                	li	s0,0
    8002622c:	c789                	beqz	a5,80026236 <stateen_ENVCFG_test_2+0xdc>
    8002622e:	6480                	ld	s0,8(s1)
    80026230:	1429                	addi	s0,s0,-22
    80026232:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80026236:	4501                	li	a0,0
    80026238:	cddda0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002623c:	bddda0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026240:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026244:	e17da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026248:	08c00593          	li	a1,140
    8002624c:	00016617          	auipc	a2,0x16
    80026250:	56460613          	addi	a2,a2,1380 # 8003c7b0 <__func__.0+0xa3c8>
    80026254:	0000c517          	auipc	a0,0xc
    80026258:	48c50513          	addi	a0,a0,1164 # 800326e0 <__func__.0+0x2f8>
    8002625c:	268090ef          	jal	8002f4c4 <printf>
    80026260:	00036797          	auipc	a5,0x36
    80026264:	db17c783          	lbu	a5,-591(a5) # 8005c011 <excpt+0x1>
    80026268:	0000c597          	auipc	a1,0xc
    8002626c:	45058593          	addi	a1,a1,1104 # 800326b8 <__func__.0+0x2d0>
    80026270:	cf89                	beqz	a5,8002628a <stateen_ENVCFG_test_2+0x130>
    80026272:	6498                	ld	a4,8(s1)
    80026274:	47d9                	li	a5,22
    80026276:	0000c597          	auipc	a1,0xc
    8002627a:	43258593          	addi	a1,a1,1074 # 800326a8 <__func__.0+0x2c0>
    8002627e:	00f70663          	beq	a4,a5,8002628a <stateen_ENVCFG_test_2+0x130>
    80026282:	0000c597          	auipc	a1,0xc
    80026286:	43658593          	addi	a1,a1,1078 # 800326b8 <__func__.0+0x2d0>
    8002628a:	0000c517          	auipc	a0,0xc
    8002628e:	46e50513          	addi	a0,a0,1134 # 800326f8 <__func__.0+0x310>
    80026292:	232090ef          	jal	8002f4c4 <printf>
    80026296:	00036797          	auipc	a5,0x36
    8002629a:	d7b7c783          	lbu	a5,-645(a5) # 8005c011 <excpt+0x1>
    8002629e:	c789                	beqz	a5,800262a8 <stateen_ENVCFG_test_2+0x14e>
    800262a0:	6498                	ld	a4,8(s1)
    800262a2:	47d9                	li	a5,22
    800262a4:	00f70c63          	beq	a4,a5,800262bc <stateen_ENVCFG_test_2+0x162>
    800262a8:	0000c517          	auipc	a0,0xc
    800262ac:	45850513          	addi	a0,a0,1112 # 80032700 <__func__.0+0x318>
    800262b0:	214090ef          	jal	8002f4c4 <printf>
    800262b4:	02900513          	li	a0,41
    800262b8:	6fb070ef          	jal	8002e1b2 <putchar>
    800262bc:	4529                	li	a0,10
    800262be:	6f5070ef          	jal	8002e1b2 <putchar>
    800262c2:	c015                	beqz	s0,800262e6 <stateen_ENVCFG_test_2+0x18c>
    800262c4:	00036417          	auipc	s0,0x36
    800262c8:	d4d44403          	lbu	s0,-691(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    800262cc:	0000c597          	auipc	a1,0xc
    800262d0:	3ec58593          	addi	a1,a1,1004 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800262d4:	cc11                	beqz	s0,800262f0 <stateen_ENVCFG_test_2+0x196>
    800262d6:	6498                	ld	a4,8(s1)
    800262d8:	47d9                	li	a5,22
    TEST_END();
    800262da:	0000c597          	auipc	a1,0xc
    800262de:	3ce58593          	addi	a1,a1,974 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800262e2:	00f70763          	beq	a4,a5,800262f0 <stateen_ENVCFG_test_2+0x196>
    800262e6:	4401                	li	s0,0
    TEST_END();
    800262e8:	0000c597          	auipc	a1,0xc
    800262ec:	3d058593          	addi	a1,a1,976 # 800326b8 <__func__.0+0x2d0>
    800262f0:	0000c517          	auipc	a0,0xc
    800262f4:	47050513          	addi	a0,a0,1136 # 80032760 <__func__.0+0x378>
    800262f8:	1cc090ef          	jal	8002f4c4 <printf>
    800262fc:	4511                	li	a0,4
    800262fe:	c17da0ef          	jal	80000f14 <goto_priv>
    80026302:	c74db0ef          	jal	80001776 <reset_state>

}
    80026306:	60e2                	ld	ra,24(sp)
    80026308:	8522                	mv	a0,s0
    8002630a:	6442                	ld	s0,16(sp)
    8002630c:	64a2                	ld	s1,8(sp)
    8002630e:	6105                	addi	sp,sp,32
    80026310:	8082                	ret

0000000080026312 <stateen_ENVCFG_test_3>:

bool stateen_ENVCFG_test_3(){
    80026312:	1141                	addi	sp,sp,-16

    //当mstateen.ENVCFG=0,m mode 可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    80026314:	0000c597          	auipc	a1,0xc
    80026318:	9fc58593          	addi	a1,a1,-1540 # 80031d10 <__func__.12>
    8002631c:	0000c517          	auipc	a0,0xc
    80026320:	3ac50513          	addi	a0,a0,940 # 800326c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_3(){
    80026324:	e406                	sd	ra,8(sp)
    80026326:	e022                	sd	s0,0(sp)
    TEST_START();
    80026328:	19c090ef          	jal	8002f4c4 <printf>
    8002632c:	4529                	li	a0,10
    8002632e:	685070ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80026332:	4511                	li	a0,4
    80026334:	be1da0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026338:	4785                	li	a5,1
    8002633a:	17fa                	slli	a5,a5,0x3e
    8002633c:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    80026340:	4511                	li	a0,4
    80026342:	bd3da0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026346:	ad3da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    8002634a:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    8002634e:	d0dda0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    80026352:	08c00593          	li	a1,140
    80026356:	00016617          	auipc	a2,0x16
    8002635a:	4b260613          	addi	a2,a2,1202 # 8003c808 <__func__.0+0xa420>
    8002635e:	0000c517          	auipc	a0,0xc
    80026362:	38250513          	addi	a0,a0,898 # 800326e0 <__func__.0+0x2f8>
    80026366:	15e090ef          	jal	8002f4c4 <printf>
    8002636a:	00036797          	auipc	a5,0x36
    8002636e:	ca77c783          	lbu	a5,-857(a5) # 8005c011 <excpt+0x1>
    80026372:	0000c597          	auipc	a1,0xc
    80026376:	33658593          	addi	a1,a1,822 # 800326a8 <__func__.0+0x2c0>
    8002637a:	c789                	beqz	a5,80026384 <stateen_ENVCFG_test_3+0x72>
    8002637c:	0000c597          	auipc	a1,0xc
    80026380:	33c58593          	addi	a1,a1,828 # 800326b8 <__func__.0+0x2d0>
    80026384:	0000c517          	auipc	a0,0xc
    80026388:	37450513          	addi	a0,a0,884 # 800326f8 <__func__.0+0x310>
    8002638c:	138090ef          	jal	8002f4c4 <printf>
    80026390:	00036797          	auipc	a5,0x36
    80026394:	c817c783          	lbu	a5,-895(a5) # 8005c011 <excpt+0x1>
    80026398:	e7e9                	bnez	a5,80026462 <stateen_ENVCFG_test_3+0x150>
    8002639a:	4529                	li	a0,10
    8002639c:	617070ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800263a0:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    800263a2:	00036417          	auipc	s0,0x36
    800263a6:	c6f44403          	lbu	s0,-913(s0) # 8005c011 <excpt+0x1>
    goto_priv(PRIV_M);
    800263aa:	b6bda0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800263ae:	a6bda0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    800263b2:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    800263b6:	ca5da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    800263ba:	08c00593          	li	a1,140
    800263be:	00016617          	auipc	a2,0x16
    800263c2:	48a60613          	addi	a2,a2,1162 # 8003c848 <__func__.0+0xa460>
    800263c6:	0000c517          	auipc	a0,0xc
    800263ca:	31a50513          	addi	a0,a0,794 # 800326e0 <__func__.0+0x2f8>
    800263ce:	0f6090ef          	jal	8002f4c4 <printf>
    800263d2:	00036797          	auipc	a5,0x36
    800263d6:	c3f7c783          	lbu	a5,-961(a5) # 8005c011 <excpt+0x1>
    800263da:	0000c597          	auipc	a1,0xc
    800263de:	2de58593          	addi	a1,a1,734 # 800326b8 <__func__.0+0x2d0>
    800263e2:	e789                	bnez	a5,800263ec <stateen_ENVCFG_test_3+0xda>
    800263e4:	0000c597          	auipc	a1,0xc
    800263e8:	2c458593          	addi	a1,a1,708 # 800326a8 <__func__.0+0x2c0>
    800263ec:	0000c517          	auipc	a0,0xc
    800263f0:	30c50513          	addi	a0,a0,780 # 800326f8 <__func__.0+0x310>
    800263f4:	0d0090ef          	jal	8002f4c4 <printf>
    800263f8:	00036797          	auipc	a5,0x36
    800263fc:	c197c783          	lbu	a5,-999(a5) # 8005c011 <excpt+0x1>
    80026400:	e7b1                	bnez	a5,8002644c <stateen_ENVCFG_test_3+0x13a>
    80026402:	4529                	li	a0,10
    80026404:	5af070ef          	jal	8002e1b2 <putchar>
    80026408:	e815                	bnez	s0,8002643c <stateen_ENVCFG_test_3+0x12a>
    8002640a:	00036797          	auipc	a5,0x36
    8002640e:	c077c783          	lbu	a5,-1017(a5) # 8005c011 <excpt+0x1>
    80026412:	c79d                	beqz	a5,80026440 <stateen_ENVCFG_test_3+0x12e>
        excpt.triggered == false
    ); 



    TEST_END();
    80026414:	0000c597          	auipc	a1,0xc
    80026418:	2a458593          	addi	a1,a1,676 # 800326b8 <__func__.0+0x2d0>
    8002641c:	0000c517          	auipc	a0,0xc
    80026420:	34450513          	addi	a0,a0,836 # 80032760 <__func__.0+0x378>
    80026424:	0a0090ef          	jal	8002f4c4 <printf>
    80026428:	4511                	li	a0,4
    8002642a:	aebda0ef          	jal	80000f14 <goto_priv>
    8002642e:	b48db0ef          	jal	80001776 <reset_state>

}
    80026432:	60a2                	ld	ra,8(sp)
    80026434:	8522                	mv	a0,s0
    80026436:	6402                	ld	s0,0(sp)
    80026438:	0141                	addi	sp,sp,16
    8002643a:	8082                	ret
    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    8002643c:	4401                	li	s0,0
    8002643e:	bfd9                	j	80026414 <stateen_ENVCFG_test_3+0x102>
    80026440:	4405                	li	s0,1
    TEST_END();
    80026442:	0000c597          	auipc	a1,0xc
    80026446:	26658593          	addi	a1,a1,614 # 800326a8 <__func__.0+0x2c0>
    8002644a:	bfc9                	j	8002641c <stateen_ENVCFG_test_3+0x10a>
    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    8002644c:	0000c517          	auipc	a0,0xc
    80026450:	2b450513          	addi	a0,a0,692 # 80032700 <__func__.0+0x318>
    80026454:	070090ef          	jal	8002f4c4 <printf>
    80026458:	02900513          	li	a0,41
    8002645c:	557070ef          	jal	8002e1b2 <putchar>
    80026460:	b74d                	j	80026402 <stateen_ENVCFG_test_3+0xf0>
    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    80026462:	0000c517          	auipc	a0,0xc
    80026466:	29e50513          	addi	a0,a0,670 # 80032700 <__func__.0+0x318>
    8002646a:	05a090ef          	jal	8002f4c4 <printf>
    8002646e:	02900513          	li	a0,41
    80026472:	541070ef          	jal	8002e1b2 <putchar>
    80026476:	b715                	j	8002639a <stateen_ENVCFG_test_3+0x88>

0000000080026478 <stateen_ENVCFG_test_4>:


bool stateen_ENVCFG_test_4(){
    80026478:	1101                	addi	sp,sp,-32

    //当mstateen.ENVCFG=1,hstateen.ENVCFG=0,v=1时不可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    8002647a:	0000c597          	auipc	a1,0xc
    8002647e:	8ae58593          	addi	a1,a1,-1874 # 80031d28 <__func__.11>
    80026482:	0000c517          	auipc	a0,0xc
    80026486:	24650513          	addi	a0,a0,582 # 800326c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_4(){
    8002648a:	ec06                	sd	ra,24(sp)
    8002648c:	e822                	sd	s0,16(sp)
    8002648e:	e426                	sd	s1,8(sp)
    TEST_START();
    80026490:	034090ef          	jal	8002f4c4 <printf>
    80026494:	4529                	li	a0,10
    80026496:	51d070ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    8002649a:	4511                	li	a0,4
    8002649c:	a79da0ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    800264a0:	4785                	li	a5,1
    800264a2:	17fa                	slli	a5,a5,0x3e
    800264a4:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    800264a8:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    800264ac:	30c025f3          	csrr	a1,mstateen0
    800264b0:	00015517          	auipc	a0,0x15
    800264b4:	a3850513          	addi	a0,a0,-1480 # 8003aee8 <__func__.0+0x8b00>
    800264b8:	00c090ef          	jal	8002f4c4 <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    800264bc:	60c025f3          	csrr	a1,hstateen0
    800264c0:	00015517          	auipc	a0,0x15
    800264c4:	a3850513          	addi	a0,a0,-1480 # 8003aef8 <__func__.0+0x8b10>
    800264c8:	7fd080ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);
    800264cc:	4509                	li	a0,2
    800264ce:	a47da0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    800264d2:	947da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    800264d6:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800264da:	b81da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss henvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800264de:	08c00593          	li	a1,140
    800264e2:	00016617          	auipc	a2,0x16
    800264e6:	3a660613          	addi	a2,a2,934 # 8003c888 <__func__.0+0xa4a0>
    800264ea:	0000c517          	auipc	a0,0xc
    800264ee:	1f650513          	addi	a0,a0,502 # 800326e0 <__func__.0+0x2f8>
    800264f2:	7d3080ef          	jal	8002f4c4 <printf>
    800264f6:	00036797          	auipc	a5,0x36
    800264fa:	b1b7c783          	lbu	a5,-1253(a5) # 8005c011 <excpt+0x1>
    800264fe:	00036497          	auipc	s1,0x36
    80026502:	b1248493          	addi	s1,s1,-1262 # 8005c010 <excpt>
    80026506:	0000c597          	auipc	a1,0xc
    8002650a:	1b258593          	addi	a1,a1,434 # 800326b8 <__func__.0+0x2d0>
    8002650e:	cf89                	beqz	a5,80026528 <stateen_ENVCFG_test_4+0xb0>
    80026510:	6498                	ld	a4,8(s1)
    80026512:	47d9                	li	a5,22
    80026514:	0000c597          	auipc	a1,0xc
    80026518:	19458593          	addi	a1,a1,404 # 800326a8 <__func__.0+0x2c0>
    8002651c:	00f70663          	beq	a4,a5,80026528 <stateen_ENVCFG_test_4+0xb0>
    80026520:	0000c597          	auipc	a1,0xc
    80026524:	19858593          	addi	a1,a1,408 # 800326b8 <__func__.0+0x2d0>
    80026528:	0000c517          	auipc	a0,0xc
    8002652c:	1d050513          	addi	a0,a0,464 # 800326f8 <__func__.0+0x310>
    80026530:	795080ef          	jal	8002f4c4 <printf>
    80026534:	00036797          	auipc	a5,0x36
    80026538:	add7c783          	lbu	a5,-1315(a5) # 8005c011 <excpt+0x1>
    8002653c:	c789                	beqz	a5,80026546 <stateen_ENVCFG_test_4+0xce>
    8002653e:	6498                	ld	a4,8(s1)
    80026540:	47d9                	li	a5,22
    80026542:	00f70c63          	beq	a4,a5,8002655a <stateen_ENVCFG_test_4+0xe2>
    80026546:	0000c517          	auipc	a0,0xc
    8002654a:	1ba50513          	addi	a0,a0,442 # 80032700 <__func__.0+0x318>
    8002654e:	777080ef          	jal	8002f4c4 <printf>
    80026552:	02900513          	li	a0,41
    80026556:	45d070ef          	jal	8002e1b2 <putchar>
    8002655a:	4529                	li	a0,10
    8002655c:	457070ef          	jal	8002e1b2 <putchar>
    80026560:	00036797          	auipc	a5,0x36
    80026564:	ab17c783          	lbu	a5,-1359(a5) # 8005c011 <excpt+0x1>
    80026568:	4401                	li	s0,0
    8002656a:	c789                	beqz	a5,80026574 <stateen_ENVCFG_test_4+0xfc>
    8002656c:	6480                	ld	s0,8(s1)
    8002656e:	1429                	addi	s0,s0,-22
    80026570:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80026574:	4509                	li	a0,2
    80026576:	99fda0ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002657a:	89fda0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    8002657e:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026582:	ad9da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026586:	08c00593          	li	a1,140
    8002658a:	00016617          	auipc	a2,0x16
    8002658e:	35660613          	addi	a2,a2,854 # 8003c8e0 <__func__.0+0xa4f8>
    80026592:	0000c517          	auipc	a0,0xc
    80026596:	14e50513          	addi	a0,a0,334 # 800326e0 <__func__.0+0x2f8>
    8002659a:	72b080ef          	jal	8002f4c4 <printf>
    8002659e:	00036797          	auipc	a5,0x36
    800265a2:	a737c783          	lbu	a5,-1421(a5) # 8005c011 <excpt+0x1>
    800265a6:	0000c597          	auipc	a1,0xc
    800265aa:	11258593          	addi	a1,a1,274 # 800326b8 <__func__.0+0x2d0>
    800265ae:	cf89                	beqz	a5,800265c8 <stateen_ENVCFG_test_4+0x150>
    800265b0:	6498                	ld	a4,8(s1)
    800265b2:	47d9                	li	a5,22
    800265b4:	0000c597          	auipc	a1,0xc
    800265b8:	0f458593          	addi	a1,a1,244 # 800326a8 <__func__.0+0x2c0>
    800265bc:	00f70663          	beq	a4,a5,800265c8 <stateen_ENVCFG_test_4+0x150>
    800265c0:	0000c597          	auipc	a1,0xc
    800265c4:	0f858593          	addi	a1,a1,248 # 800326b8 <__func__.0+0x2d0>
    800265c8:	0000c517          	auipc	a0,0xc
    800265cc:	13050513          	addi	a0,a0,304 # 800326f8 <__func__.0+0x310>
    800265d0:	6f5080ef          	jal	8002f4c4 <printf>
    800265d4:	00036797          	auipc	a5,0x36
    800265d8:	a3d7c783          	lbu	a5,-1475(a5) # 8005c011 <excpt+0x1>
    800265dc:	c789                	beqz	a5,800265e6 <stateen_ENVCFG_test_4+0x16e>
    800265de:	6498                	ld	a4,8(s1)
    800265e0:	47d9                	li	a5,22
    800265e2:	00f70c63          	beq	a4,a5,800265fa <stateen_ENVCFG_test_4+0x182>
    800265e6:	0000c517          	auipc	a0,0xc
    800265ea:	11a50513          	addi	a0,a0,282 # 80032700 <__func__.0+0x318>
    800265ee:	6d7080ef          	jal	8002f4c4 <printf>
    800265f2:	02900513          	li	a0,41
    800265f6:	3bd070ef          	jal	8002e1b2 <putchar>
    800265fa:	4529                	li	a0,10
    800265fc:	3b7070ef          	jal	8002e1b2 <putchar>
    80026600:	c015                	beqz	s0,80026624 <stateen_ENVCFG_test_4+0x1ac>
    80026602:	00036417          	auipc	s0,0x36
    80026606:	a0f44403          	lbu	s0,-1521(s0) # 8005c011 <excpt+0x1>
        excpt.cause == CAUSE_VRTI
    ); 



    TEST_END();
    8002660a:	0000c597          	auipc	a1,0xc
    8002660e:	0ae58593          	addi	a1,a1,174 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026612:	cc11                	beqz	s0,8002662e <stateen_ENVCFG_test_4+0x1b6>
    80026614:	6498                	ld	a4,8(s1)
    80026616:	47d9                	li	a5,22
    TEST_END();
    80026618:	0000c597          	auipc	a1,0xc
    8002661c:	09058593          	addi	a1,a1,144 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026620:	00f70763          	beq	a4,a5,8002662e <stateen_ENVCFG_test_4+0x1b6>
    80026624:	4401                	li	s0,0
    TEST_END();
    80026626:	0000c597          	auipc	a1,0xc
    8002662a:	09258593          	addi	a1,a1,146 # 800326b8 <__func__.0+0x2d0>
    8002662e:	0000c517          	auipc	a0,0xc
    80026632:	13250513          	addi	a0,a0,306 # 80032760 <__func__.0+0x378>
    80026636:	68f080ef          	jal	8002f4c4 <printf>
    8002663a:	4511                	li	a0,4
    8002663c:	8d9da0ef          	jal	80000f14 <goto_priv>
    80026640:	936db0ef          	jal	80001776 <reset_state>

}
    80026644:	60e2                	ld	ra,24(sp)
    80026646:	8522                	mv	a0,s0
    80026648:	6442                	ld	s0,16(sp)
    8002664a:	64a2                	ld	s1,8(sp)
    8002664c:	6105                	addi	sp,sp,32
    8002664e:	8082                	ret

0000000080026650 <stateen_ENVCFG_test_5>:

bool stateen_ENVCFG_test_5(){
    80026650:	1101                	addi	sp,sp,-32

    //当mstateen.ENVCFG=0,hs mode 不可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    80026652:	0000b597          	auipc	a1,0xb
    80026656:	6ee58593          	addi	a1,a1,1774 # 80031d40 <__func__.10>
    8002665a:	0000c517          	auipc	a0,0xc
    8002665e:	06e50513          	addi	a0,a0,110 # 800326c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_5(){
    80026662:	ec06                	sd	ra,24(sp)
    80026664:	e822                	sd	s0,16(sp)
    80026666:	e426                	sd	s1,8(sp)
    TEST_START();
    80026668:	65d080ef          	jal	8002f4c4 <printf>
    8002666c:	4529                	li	a0,10
    8002666e:	345070ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80026672:	4511                	li	a0,4
    80026674:	8a1da0ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026678:	4785                	li	a5,1
    8002667a:	17fa                	slli	a5,a5,0x3e
    8002667c:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    80026680:	450d                	li	a0,3
    80026682:	893da0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026686:	f92da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    8002668a:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    8002668e:	9cdda0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss henvcfg register cause to illegal except when mstateen.envcfg=0",
    80026692:	08c00593          	li	a1,140
    80026696:	00016617          	auipc	a2,0x16
    8002669a:	2a260613          	addi	a2,a2,674 # 8003c938 <__func__.0+0xa550>
    8002669e:	0000c517          	auipc	a0,0xc
    800266a2:	04250513          	addi	a0,a0,66 # 800326e0 <__func__.0+0x2f8>
    800266a6:	61f080ef          	jal	8002f4c4 <printf>
    800266aa:	00036797          	auipc	a5,0x36
    800266ae:	9677c783          	lbu	a5,-1689(a5) # 8005c011 <excpt+0x1>
    800266b2:	00036497          	auipc	s1,0x36
    800266b6:	95e48493          	addi	s1,s1,-1698 # 8005c010 <excpt>
    800266ba:	0000c597          	auipc	a1,0xc
    800266be:	ffe58593          	addi	a1,a1,-2 # 800326b8 <__func__.0+0x2d0>
    800266c2:	cf89                	beqz	a5,800266dc <stateen_ENVCFG_test_5+0x8c>
    800266c4:	6498                	ld	a4,8(s1)
    800266c6:	4789                	li	a5,2
    800266c8:	0000c597          	auipc	a1,0xc
    800266cc:	fe058593          	addi	a1,a1,-32 # 800326a8 <__func__.0+0x2c0>
    800266d0:	00f70663          	beq	a4,a5,800266dc <stateen_ENVCFG_test_5+0x8c>
    800266d4:	0000c597          	auipc	a1,0xc
    800266d8:	fe458593          	addi	a1,a1,-28 # 800326b8 <__func__.0+0x2d0>
    800266dc:	0000c517          	auipc	a0,0xc
    800266e0:	01c50513          	addi	a0,a0,28 # 800326f8 <__func__.0+0x310>
    800266e4:	5e1080ef          	jal	8002f4c4 <printf>
    800266e8:	00036797          	auipc	a5,0x36
    800266ec:	9297c783          	lbu	a5,-1751(a5) # 8005c011 <excpt+0x1>
    800266f0:	c789                	beqz	a5,800266fa <stateen_ENVCFG_test_5+0xaa>
    800266f2:	6498                	ld	a4,8(s1)
    800266f4:	4789                	li	a5,2
    800266f6:	00f70c63          	beq	a4,a5,8002670e <stateen_ENVCFG_test_5+0xbe>
    800266fa:	0000c517          	auipc	a0,0xc
    800266fe:	00650513          	addi	a0,a0,6 # 80032700 <__func__.0+0x318>
    80026702:	5c3080ef          	jal	8002f4c4 <printf>
    80026706:	02900513          	li	a0,41
    8002670a:	2a9070ef          	jal	8002e1b2 <putchar>
    8002670e:	4529                	li	a0,10
    80026710:	2a3070ef          	jal	8002e1b2 <putchar>
    80026714:	00036797          	auipc	a5,0x36
    80026718:	8fd7c783          	lbu	a5,-1795(a5) # 8005c011 <excpt+0x1>
    8002671c:	4401                	li	s0,0
    8002671e:	c789                	beqz	a5,80026728 <stateen_ENVCFG_test_5+0xd8>
    80026720:	6480                	ld	s0,8(s1)
    80026722:	1479                	addi	s0,s0,-2
    80026724:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80026728:	450d                	li	a0,3
    8002672a:	feada0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002672e:	eeada0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026732:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026736:	925da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    8002673a:	08c00593          	li	a1,140
    8002673e:	00016617          	auipc	a2,0x16
    80026742:	24a60613          	addi	a2,a2,586 # 8003c988 <__func__.0+0xa5a0>
    80026746:	0000c517          	auipc	a0,0xc
    8002674a:	f9a50513          	addi	a0,a0,-102 # 800326e0 <__func__.0+0x2f8>
    8002674e:	577080ef          	jal	8002f4c4 <printf>
    80026752:	00036797          	auipc	a5,0x36
    80026756:	8bf7c783          	lbu	a5,-1857(a5) # 8005c011 <excpt+0x1>
    8002675a:	0000c597          	auipc	a1,0xc
    8002675e:	f5e58593          	addi	a1,a1,-162 # 800326b8 <__func__.0+0x2d0>
    80026762:	cf89                	beqz	a5,8002677c <stateen_ENVCFG_test_5+0x12c>
    80026764:	6498                	ld	a4,8(s1)
    80026766:	4789                	li	a5,2
    80026768:	0000c597          	auipc	a1,0xc
    8002676c:	f4058593          	addi	a1,a1,-192 # 800326a8 <__func__.0+0x2c0>
    80026770:	00f70663          	beq	a4,a5,8002677c <stateen_ENVCFG_test_5+0x12c>
    80026774:	0000c597          	auipc	a1,0xc
    80026778:	f4458593          	addi	a1,a1,-188 # 800326b8 <__func__.0+0x2d0>
    8002677c:	0000c517          	auipc	a0,0xc
    80026780:	f7c50513          	addi	a0,a0,-132 # 800326f8 <__func__.0+0x310>
    80026784:	541080ef          	jal	8002f4c4 <printf>
    80026788:	00036797          	auipc	a5,0x36
    8002678c:	8897c783          	lbu	a5,-1911(a5) # 8005c011 <excpt+0x1>
    80026790:	c789                	beqz	a5,8002679a <stateen_ENVCFG_test_5+0x14a>
    80026792:	6498                	ld	a4,8(s1)
    80026794:	4789                	li	a5,2
    80026796:	00f70c63          	beq	a4,a5,800267ae <stateen_ENVCFG_test_5+0x15e>
    8002679a:	0000c517          	auipc	a0,0xc
    8002679e:	f6650513          	addi	a0,a0,-154 # 80032700 <__func__.0+0x318>
    800267a2:	523080ef          	jal	8002f4c4 <printf>
    800267a6:	02900513          	li	a0,41
    800267aa:	209070ef          	jal	8002e1b2 <putchar>
    800267ae:	4529                	li	a0,10
    800267b0:	203070ef          	jal	8002e1b2 <putchar>
    800267b4:	c015                	beqz	s0,800267d8 <stateen_ENVCFG_test_5+0x188>
    800267b6:	00036417          	auipc	s0,0x36
    800267ba:	85b44403          	lbu	s0,-1957(s0) # 8005c011 <excpt+0x1>
        excpt.cause == CAUSE_ILI
    ); 



    TEST_END();
    800267be:	0000c597          	auipc	a1,0xc
    800267c2:	efa58593          	addi	a1,a1,-262 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    800267c6:	cc11                	beqz	s0,800267e2 <stateen_ENVCFG_test_5+0x192>
    800267c8:	6498                	ld	a4,8(s1)
    800267ca:	4789                	li	a5,2
    TEST_END();
    800267cc:	0000c597          	auipc	a1,0xc
    800267d0:	edc58593          	addi	a1,a1,-292 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    800267d4:	00f70763          	beq	a4,a5,800267e2 <stateen_ENVCFG_test_5+0x192>
    800267d8:	4401                	li	s0,0
    TEST_END();
    800267da:	0000c597          	auipc	a1,0xc
    800267de:	ede58593          	addi	a1,a1,-290 # 800326b8 <__func__.0+0x2d0>
    800267e2:	0000c517          	auipc	a0,0xc
    800267e6:	f7e50513          	addi	a0,a0,-130 # 80032760 <__func__.0+0x378>
    800267ea:	4db080ef          	jal	8002f4c4 <printf>
    800267ee:	4511                	li	a0,4
    800267f0:	f24da0ef          	jal	80000f14 <goto_priv>
    800267f4:	f83da0ef          	jal	80001776 <reset_state>

}
    800267f8:	60e2                	ld	ra,24(sp)
    800267fa:	8522                	mv	a0,s0
    800267fc:	6442                	ld	s0,16(sp)
    800267fe:	64a2                	ld	s1,8(sp)
    80026800:	6105                	addi	sp,sp,32
    80026802:	8082                	ret

0000000080026804 <stateen_ENVCFG_test_6>:


bool stateen_ENVCFG_test_6(){
    80026804:	1101                	addi	sp,sp,-32

    TEST_START();
    80026806:	0000b597          	auipc	a1,0xb
    8002680a:	55258593          	addi	a1,a1,1362 # 80031d58 <__func__.9>
    8002680e:	0000c517          	auipc	a0,0xc
    80026812:	eba50513          	addi	a0,a0,-326 # 800326c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_6(){
    80026816:	ec06                	sd	ra,24(sp)
    80026818:	e822                	sd	s0,16(sp)
    8002681a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002681c:	4a9080ef          	jal	8002f4c4 <printf>
    80026820:	4529                	li	a0,10
    80026822:	191070ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80026826:	4511                	li	a0,4
    80026828:	eecda0ef          	jal	80000f14 <goto_priv>
    //当mstateen.ENVCFG=1,v=0时,可访问Henvcfg和Senvcfg寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    8002682c:	4785                	li	a5,1
    8002682e:	17fa                	slli	a5,a5,0x3e
    80026830:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    80026834:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80026838:	450d                	li	a0,3
    8002683a:	edada0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002683e:	ddada0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026842:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026846:	815da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss henvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    8002684a:	08c00593          	li	a1,140
    8002684e:	00016617          	auipc	a2,0x16
    80026852:	18a60613          	addi	a2,a2,394 # 8003c9d8 <__func__.0+0xa5f0>
    80026856:	0000c517          	auipc	a0,0xc
    8002685a:	e8a50513          	addi	a0,a0,-374 # 800326e0 <__func__.0+0x2f8>
    8002685e:	467080ef          	jal	8002f4c4 <printf>
    80026862:	00035797          	auipc	a5,0x35
    80026866:	7af7c783          	lbu	a5,1967(a5) # 8005c011 <excpt+0x1>
    8002686a:	0000c597          	auipc	a1,0xc
    8002686e:	e3e58593          	addi	a1,a1,-450 # 800326a8 <__func__.0+0x2c0>
    80026872:	c789                	beqz	a5,8002687c <stateen_ENVCFG_test_6+0x78>
    80026874:	0000c597          	auipc	a1,0xc
    80026878:	e4458593          	addi	a1,a1,-444 # 800326b8 <__func__.0+0x2d0>
    8002687c:	0000c517          	auipc	a0,0xc
    80026880:	e7c50513          	addi	a0,a0,-388 # 800326f8 <__func__.0+0x310>
    80026884:	441080ef          	jal	8002f4c4 <printf>
    80026888:	00035797          	auipc	a5,0x35
    8002688c:	7897c783          	lbu	a5,1929(a5) # 8005c011 <excpt+0x1>
    80026890:	2c079e63          	bnez	a5,80026b6c <stateen_ENVCFG_test_6+0x368>
    80026894:	4529                	li	a0,10
    80026896:	11d070ef          	jal	8002e1b2 <putchar>
    8002689a:	00035497          	auipc	s1,0x35
    8002689e:	7774c483          	lbu	s1,1911(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SENVCFG);
    800268a2:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    800268a6:	fb4da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss senvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    800268aa:	08c00593          	li	a1,140
    800268ae:	00016617          	auipc	a2,0x16
    800268b2:	18260613          	addi	a2,a2,386 # 8003ca30 <__func__.0+0xa648>
    800268b6:	0000c517          	auipc	a0,0xc
    800268ba:	e2a50513          	addi	a0,a0,-470 # 800326e0 <__func__.0+0x2f8>
    800268be:	407080ef          	jal	8002f4c4 <printf>
    800268c2:	00035797          	auipc	a5,0x35
    800268c6:	74f7c783          	lbu	a5,1871(a5) # 8005c011 <excpt+0x1>
    800268ca:	0000c597          	auipc	a1,0xc
    800268ce:	dee58593          	addi	a1,a1,-530 # 800326b8 <__func__.0+0x2d0>
    800268d2:	e789                	bnez	a5,800268dc <stateen_ENVCFG_test_6+0xd8>
    800268d4:	0000c597          	auipc	a1,0xc
    800268d8:	dd458593          	addi	a1,a1,-556 # 800326a8 <__func__.0+0x2c0>
    800268dc:	0000c517          	auipc	a0,0xc
    800268e0:	e1c50513          	addi	a0,a0,-484 # 800326f8 <__func__.0+0x310>
    800268e4:	3e1080ef          	jal	8002f4c4 <printf>
    800268e8:	00035797          	auipc	a5,0x35
    800268ec:	7297c783          	lbu	a5,1833(a5) # 8005c011 <excpt+0x1>
    800268f0:	26079363          	bnez	a5,80026b56 <stateen_ENVCFG_test_6+0x352>
    800268f4:	4529                	li	a0,10
    800268f6:	0bd070ef          	jal	8002e1b2 <putchar>
    800268fa:	4401                	li	s0,0
    800268fc:	e499                	bnez	s1,8002690a <stateen_ENVCFG_test_6+0x106>
    800268fe:	00035417          	auipc	s0,0x35
    80026902:	71344403          	lbu	s0,1811(s0) # 8005c011 <excpt+0x1>
    80026906:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    8002690a:	4505                	li	a0,1
    8002690c:	e08da0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026910:	d08da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026914:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026918:	f42da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    8002691c:	08c00593          	li	a1,140
    80026920:	00016617          	auipc	a2,0x16
    80026924:	16860613          	addi	a2,a2,360 # 8003ca88 <__func__.0+0xa6a0>
    80026928:	0000c517          	auipc	a0,0xc
    8002692c:	db850513          	addi	a0,a0,-584 # 800326e0 <__func__.0+0x2f8>
    80026930:	395080ef          	jal	8002f4c4 <printf>
    80026934:	00035797          	auipc	a5,0x35
    80026938:	6dd7c783          	lbu	a5,1757(a5) # 8005c011 <excpt+0x1>
    8002693c:	0000c597          	auipc	a1,0xc
    80026940:	d7c58593          	addi	a1,a1,-644 # 800326b8 <__func__.0+0x2d0>
    80026944:	e789                	bnez	a5,8002694e <stateen_ENVCFG_test_6+0x14a>
    80026946:	0000c597          	auipc	a1,0xc
    8002694a:	d6258593          	addi	a1,a1,-670 # 800326a8 <__func__.0+0x2c0>
    8002694e:	0000c517          	auipc	a0,0xc
    80026952:	daa50513          	addi	a0,a0,-598 # 800326f8 <__func__.0+0x310>
    80026956:	36f080ef          	jal	8002f4c4 <printf>
    8002695a:	00035797          	auipc	a5,0x35
    8002695e:	6b77c783          	lbu	a5,1719(a5) # 8005c011 <excpt+0x1>
    80026962:	1c079f63          	bnez	a5,80026b40 <stateen_ENVCFG_test_6+0x33c>
    80026966:	4529                	li	a0,10
    80026968:	04b070ef          	jal	8002e1b2 <putchar>
    8002696c:	c419                	beqz	s0,8002697a <stateen_ENVCFG_test_6+0x176>
    8002696e:	00035417          	auipc	s0,0x35
    80026972:	6a344403          	lbu	s0,1699(s0) # 8005c011 <excpt+0x1>
    80026976:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    8002697a:	4505                	li	a0,1
    8002697c:	d98da0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026980:	c98da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026984:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026988:	ed2da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    8002698c:	08c00593          	li	a1,140
    80026990:	00016617          	auipc	a2,0x16
    80026994:	15060613          	addi	a2,a2,336 # 8003cae0 <__func__.0+0xa6f8>
    80026998:	0000c517          	auipc	a0,0xc
    8002699c:	d4850513          	addi	a0,a0,-696 # 800326e0 <__func__.0+0x2f8>
    800269a0:	325080ef          	jal	8002f4c4 <printf>
    800269a4:	00035797          	auipc	a5,0x35
    800269a8:	66d7c783          	lbu	a5,1645(a5) # 8005c011 <excpt+0x1>
    800269ac:	0000c597          	auipc	a1,0xc
    800269b0:	d0c58593          	addi	a1,a1,-756 # 800326b8 <__func__.0+0x2d0>
    800269b4:	e789                	bnez	a5,800269be <stateen_ENVCFG_test_6+0x1ba>
    800269b6:	0000c597          	auipc	a1,0xc
    800269ba:	cf258593          	addi	a1,a1,-782 # 800326a8 <__func__.0+0x2c0>
    800269be:	0000c517          	auipc	a0,0xc
    800269c2:	d3a50513          	addi	a0,a0,-710 # 800326f8 <__func__.0+0x310>
    800269c6:	2ff080ef          	jal	8002f4c4 <printf>
    800269ca:	00035797          	auipc	a5,0x35
    800269ce:	6477c783          	lbu	a5,1607(a5) # 8005c011 <excpt+0x1>
    800269d2:	14079c63          	bnez	a5,80026b2a <stateen_ENVCFG_test_6+0x326>
    800269d6:	4529                	li	a0,10
    800269d8:	7da070ef          	jal	8002e1b2 <putchar>
    800269dc:	c419                	beqz	s0,800269ea <stateen_ENVCFG_test_6+0x1e6>
    800269de:	00035417          	auipc	s0,0x35
    800269e2:	63344403          	lbu	s0,1587(s0) # 8005c011 <excpt+0x1>
    800269e6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    800269ea:	4511                	li	a0,4
    800269ec:	d28da0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800269f0:	c28da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    800269f4:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800269f8:	e62da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800269fc:	08c00593          	li	a1,140
    80026a00:	00016617          	auipc	a2,0x16
    80026a04:	13860613          	addi	a2,a2,312 # 8003cb38 <__func__.0+0xa750>
    80026a08:	0000c517          	auipc	a0,0xc
    80026a0c:	cd850513          	addi	a0,a0,-808 # 800326e0 <__func__.0+0x2f8>
    80026a10:	2b5080ef          	jal	8002f4c4 <printf>
    80026a14:	00035797          	auipc	a5,0x35
    80026a18:	5fd7c783          	lbu	a5,1533(a5) # 8005c011 <excpt+0x1>
    80026a1c:	0000c597          	auipc	a1,0xc
    80026a20:	c9c58593          	addi	a1,a1,-868 # 800326b8 <__func__.0+0x2d0>
    80026a24:	e789                	bnez	a5,80026a2e <stateen_ENVCFG_test_6+0x22a>
    80026a26:	0000c597          	auipc	a1,0xc
    80026a2a:	c8258593          	addi	a1,a1,-894 # 800326a8 <__func__.0+0x2c0>
    80026a2e:	0000c517          	auipc	a0,0xc
    80026a32:	cca50513          	addi	a0,a0,-822 # 800326f8 <__func__.0+0x310>
    80026a36:	28f080ef          	jal	8002f4c4 <printf>
    80026a3a:	00035797          	auipc	a5,0x35
    80026a3e:	5d77c783          	lbu	a5,1495(a5) # 8005c011 <excpt+0x1>
    80026a42:	0c079963          	bnez	a5,80026b14 <stateen_ENVCFG_test_6+0x310>
    80026a46:	4529                	li	a0,10
    80026a48:	76a070ef          	jal	8002e1b2 <putchar>
    80026a4c:	c419                	beqz	s0,80026a5a <stateen_ENVCFG_test_6+0x256>
    80026a4e:	00035417          	auipc	s0,0x35
    80026a52:	5c344403          	lbu	s0,1475(s0) # 8005c011 <excpt+0x1>
    80026a56:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80026a5a:	4511                	li	a0,4
    80026a5c:	cb8da0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026a60:	bb8da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026a64:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026a68:	df2da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026a6c:	08c00593          	li	a1,140
    80026a70:	00016617          	auipc	a2,0x16
    80026a74:	12060613          	addi	a2,a2,288 # 8003cb90 <__func__.0+0xa7a8>
    80026a78:	0000c517          	auipc	a0,0xc
    80026a7c:	c6850513          	addi	a0,a0,-920 # 800326e0 <__func__.0+0x2f8>
    80026a80:	245080ef          	jal	8002f4c4 <printf>
    80026a84:	00035797          	auipc	a5,0x35
    80026a88:	58d7c783          	lbu	a5,1421(a5) # 8005c011 <excpt+0x1>
    80026a8c:	0000c597          	auipc	a1,0xc
    80026a90:	c2c58593          	addi	a1,a1,-980 # 800326b8 <__func__.0+0x2d0>
    80026a94:	e789                	bnez	a5,80026a9e <stateen_ENVCFG_test_6+0x29a>
    80026a96:	0000c597          	auipc	a1,0xc
    80026a9a:	c1258593          	addi	a1,a1,-1006 # 800326a8 <__func__.0+0x2c0>
    80026a9e:	0000c517          	auipc	a0,0xc
    80026aa2:	c5a50513          	addi	a0,a0,-934 # 800326f8 <__func__.0+0x310>
    80026aa6:	21f080ef          	jal	8002f4c4 <printf>
    80026aaa:	00035797          	auipc	a5,0x35
    80026aae:	5677c783          	lbu	a5,1383(a5) # 8005c011 <excpt+0x1>
    80026ab2:	e7b1                	bnez	a5,80026afe <stateen_ENVCFG_test_6+0x2fa>
    80026ab4:	4529                	li	a0,10
    80026ab6:	6fc070ef          	jal	8002e1b2 <putchar>
    80026aba:	c411                	beqz	s0,80026ac6 <stateen_ENVCFG_test_6+0x2c2>
    80026abc:	00035797          	auipc	a5,0x35
    80026ac0:	5557c783          	lbu	a5,1365(a5) # 8005c011 <excpt+0x1>
    80026ac4:	c79d                	beqz	a5,80026af2 <stateen_ENVCFG_test_6+0x2ee>
    80026ac6:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    80026ac8:	0000c597          	auipc	a1,0xc
    80026acc:	bf058593          	addi	a1,a1,-1040 # 800326b8 <__func__.0+0x2d0>
    80026ad0:	0000c517          	auipc	a0,0xc
    80026ad4:	c9050513          	addi	a0,a0,-880 # 80032760 <__func__.0+0x378>
    80026ad8:	1ed080ef          	jal	8002f4c4 <printf>
    80026adc:	4511                	li	a0,4
    80026ade:	c36da0ef          	jal	80000f14 <goto_priv>
    80026ae2:	c95da0ef          	jal	80001776 <reset_state>

}
    80026ae6:	60e2                	ld	ra,24(sp)
    80026ae8:	8522                	mv	a0,s0
    80026aea:	6442                	ld	s0,16(sp)
    80026aec:	64a2                	ld	s1,8(sp)
    80026aee:	6105                	addi	sp,sp,32
    80026af0:	8082                	ret
    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026af2:	4405                	li	s0,1
    TEST_END();
    80026af4:	0000c597          	auipc	a1,0xc
    80026af8:	bb458593          	addi	a1,a1,-1100 # 800326a8 <__func__.0+0x2c0>
    80026afc:	bfd1                	j	80026ad0 <stateen_ENVCFG_test_6+0x2cc>
    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026afe:	0000c517          	auipc	a0,0xc
    80026b02:	c0250513          	addi	a0,a0,-1022 # 80032700 <__func__.0+0x318>
    80026b06:	1bf080ef          	jal	8002f4c4 <printf>
    80026b0a:	02900513          	li	a0,41
    80026b0e:	6a4070ef          	jal	8002e1b2 <putchar>
    80026b12:	b74d                	j	80026ab4 <stateen_ENVCFG_test_6+0x2b0>
    TEST_ASSERT("m mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026b14:	0000c517          	auipc	a0,0xc
    80026b18:	bec50513          	addi	a0,a0,-1044 # 80032700 <__func__.0+0x318>
    80026b1c:	1a9080ef          	jal	8002f4c4 <printf>
    80026b20:	02900513          	li	a0,41
    80026b24:	68e070ef          	jal	8002e1b2 <putchar>
    80026b28:	bf39                	j	80026a46 <stateen_ENVCFG_test_6+0x242>
    TEST_ASSERT("hu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026b2a:	0000c517          	auipc	a0,0xc
    80026b2e:	bd650513          	addi	a0,a0,-1066 # 80032700 <__func__.0+0x318>
    80026b32:	193080ef          	jal	8002f4c4 <printf>
    80026b36:	02900513          	li	a0,41
    80026b3a:	678070ef          	jal	8002e1b2 <putchar>
    80026b3e:	bd61                	j	800269d6 <stateen_ENVCFG_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026b40:	0000c517          	auipc	a0,0xc
    80026b44:	bc050513          	addi	a0,a0,-1088 # 80032700 <__func__.0+0x318>
    80026b48:	17d080ef          	jal	8002f4c4 <printf>
    80026b4c:	02900513          	li	a0,41
    80026b50:	662070ef          	jal	8002e1b2 <putchar>
    80026b54:	bd09                	j	80026966 <stateen_ENVCFG_test_6+0x162>
    TEST_ASSERT("hs mode accesss senvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026b56:	0000c517          	auipc	a0,0xc
    80026b5a:	baa50513          	addi	a0,a0,-1110 # 80032700 <__func__.0+0x318>
    80026b5e:	167080ef          	jal	8002f4c4 <printf>
    80026b62:	02900513          	li	a0,41
    80026b66:	64c070ef          	jal	8002e1b2 <putchar>
    80026b6a:	b369                	j	800268f4 <stateen_ENVCFG_test_6+0xf0>
    TEST_ASSERT("hs mode accesss henvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026b6c:	0000c517          	auipc	a0,0xc
    80026b70:	b9450513          	addi	a0,a0,-1132 # 80032700 <__func__.0+0x318>
    80026b74:	151080ef          	jal	8002f4c4 <printf>
    80026b78:	02900513          	li	a0,41
    80026b7c:	636070ef          	jal	8002e1b2 <putchar>
    80026b80:	bb11                	j	80026894 <stateen_ENVCFG_test_6+0x90>

0000000080026b82 <stateen_ENVCFG_test_7>:


bool stateen_ENVCFG_test_7(){
    80026b82:	1101                	addi	sp,sp,-32

    TEST_START();
    80026b84:	0000b597          	auipc	a1,0xb
    80026b88:	1ec58593          	addi	a1,a1,492 # 80031d70 <__func__.8>
    80026b8c:	0000c517          	auipc	a0,0xc
    80026b90:	b3c50513          	addi	a0,a0,-1220 # 800326c8 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_7(){
    80026b94:	ec06                	sd	ra,24(sp)
    80026b96:	e822                	sd	s0,16(sp)
    80026b98:	e426                	sd	s1,8(sp)
    TEST_START();
    80026b9a:	12b080ef          	jal	8002f4c4 <printf>
    80026b9e:	4529                	li	a0,10
    80026ba0:	612070ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80026ba4:	4511                	li	a0,4
    80026ba6:	b6eda0ef          	jal	80000f14 <goto_priv>
    //当mstateen.ENVCFG=1 hstateen.ENVCFG=1,v=1 时可访问Henvcfg和Senvcfg寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026baa:	4785                	li	a5,1
    80026bac:	17fa                	slli	a5,a5,0x3e
    80026bae:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    80026bb2:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    80026bb6:	4509                	li	a0,2
    80026bb8:	b5cda0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026bbc:	a5cda0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026bc0:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026bc4:	c96da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026bc8:	08c00593          	li	a1,140
    80026bcc:	00016617          	auipc	a2,0x16
    80026bd0:	01c60613          	addi	a2,a2,28 # 8003cbe8 <__func__.0+0xa800>
    80026bd4:	0000c517          	auipc	a0,0xc
    80026bd8:	b0c50513          	addi	a0,a0,-1268 # 800326e0 <__func__.0+0x2f8>
    80026bdc:	0e9080ef          	jal	8002f4c4 <printf>
    80026be0:	00035797          	auipc	a5,0x35
    80026be4:	4317c783          	lbu	a5,1073(a5) # 8005c011 <excpt+0x1>
    80026be8:	0000c597          	auipc	a1,0xc
    80026bec:	ac058593          	addi	a1,a1,-1344 # 800326a8 <__func__.0+0x2c0>
    80026bf0:	c789                	beqz	a5,80026bfa <stateen_ENVCFG_test_7+0x78>
    80026bf2:	0000c597          	auipc	a1,0xc
    80026bf6:	ac658593          	addi	a1,a1,-1338 # 800326b8 <__func__.0+0x2d0>
    80026bfa:	0000c517          	auipc	a0,0xc
    80026bfe:	afe50513          	addi	a0,a0,-1282 # 800326f8 <__func__.0+0x310>
    80026c02:	0c3080ef          	jal	8002f4c4 <printf>
    80026c06:	00035797          	auipc	a5,0x35
    80026c0a:	40b7c783          	lbu	a5,1035(a5) # 8005c011 <excpt+0x1>
    80026c0e:	1c079d63          	bnez	a5,80026de8 <stateen_ENVCFG_test_7+0x266>
    80026c12:	4529                	li	a0,10
    80026c14:	59e070ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80026c18:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026c1a:	00035497          	auipc	s1,0x35
    80026c1e:	3f74c483          	lbu	s1,1015(s1) # 8005c011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80026c22:	af2da0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026c26:	9f2da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026c2a:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026c2e:	c2cda0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026c32:	08c00593          	li	a1,140
    80026c36:	00016617          	auipc	a2,0x16
    80026c3a:	00a60613          	addi	a2,a2,10 # 8003cc40 <__func__.0+0xa858>
    80026c3e:	0000c517          	auipc	a0,0xc
    80026c42:	aa250513          	addi	a0,a0,-1374 # 800326e0 <__func__.0+0x2f8>
    80026c46:	07f080ef          	jal	8002f4c4 <printf>
    80026c4a:	00035797          	auipc	a5,0x35
    80026c4e:	3c77c783          	lbu	a5,967(a5) # 8005c011 <excpt+0x1>
    80026c52:	0000c597          	auipc	a1,0xc
    80026c56:	a6658593          	addi	a1,a1,-1434 # 800326b8 <__func__.0+0x2d0>
    80026c5a:	e789                	bnez	a5,80026c64 <stateen_ENVCFG_test_7+0xe2>
    80026c5c:	0000c597          	auipc	a1,0xc
    80026c60:	a4c58593          	addi	a1,a1,-1460 # 800326a8 <__func__.0+0x2c0>
    80026c64:	0000c517          	auipc	a0,0xc
    80026c68:	a9450513          	addi	a0,a0,-1388 # 800326f8 <__func__.0+0x310>
    80026c6c:	059080ef          	jal	8002f4c4 <printf>
    80026c70:	00035797          	auipc	a5,0x35
    80026c74:	3a17c783          	lbu	a5,929(a5) # 8005c011 <excpt+0x1>
    80026c78:	14079d63          	bnez	a5,80026dd2 <stateen_ENVCFG_test_7+0x250>
    80026c7c:	4529                	li	a0,10
    80026c7e:	534070ef          	jal	8002e1b2 <putchar>
    80026c82:	4401                	li	s0,0
    80026c84:	e499                	bnez	s1,80026c92 <stateen_ENVCFG_test_7+0x110>
    80026c86:	00035417          	auipc	s0,0x35
    80026c8a:	38b44403          	lbu	s0,907(s0) # 8005c011 <excpt+0x1>
    80026c8e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80026c92:	4501                	li	a0,0
    80026c94:	a80da0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026c98:	980da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026c9c:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026ca0:	bbada0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026ca4:	08c00593          	li	a1,140
    80026ca8:	00016617          	auipc	a2,0x16
    80026cac:	ff060613          	addi	a2,a2,-16 # 8003cc98 <__func__.0+0xa8b0>
    80026cb0:	0000c517          	auipc	a0,0xc
    80026cb4:	a3050513          	addi	a0,a0,-1488 # 800326e0 <__func__.0+0x2f8>
    80026cb8:	00d080ef          	jal	8002f4c4 <printf>
    80026cbc:	00035797          	auipc	a5,0x35
    80026cc0:	3557c783          	lbu	a5,853(a5) # 8005c011 <excpt+0x1>
    80026cc4:	0000c597          	auipc	a1,0xc
    80026cc8:	9f458593          	addi	a1,a1,-1548 # 800326b8 <__func__.0+0x2d0>
    80026ccc:	e789                	bnez	a5,80026cd6 <stateen_ENVCFG_test_7+0x154>
    80026cce:	0000c597          	auipc	a1,0xc
    80026cd2:	9da58593          	addi	a1,a1,-1574 # 800326a8 <__func__.0+0x2c0>
    80026cd6:	0000c517          	auipc	a0,0xc
    80026cda:	a2250513          	addi	a0,a0,-1502 # 800326f8 <__func__.0+0x310>
    80026cde:	7e6080ef          	jal	8002f4c4 <printf>
    80026ce2:	00035797          	auipc	a5,0x35
    80026ce6:	32f7c783          	lbu	a5,815(a5) # 8005c011 <excpt+0x1>
    80026cea:	0c079963          	bnez	a5,80026dbc <stateen_ENVCFG_test_7+0x23a>
    80026cee:	4529                	li	a0,10
    80026cf0:	4c2070ef          	jal	8002e1b2 <putchar>
    80026cf4:	c419                	beqz	s0,80026d02 <stateen_ENVCFG_test_7+0x180>
    80026cf6:	00035417          	auipc	s0,0x35
    80026cfa:	31b44403          	lbu	s0,795(s0) # 8005c011 <excpt+0x1>
    80026cfe:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80026d02:	4501                	li	a0,0
    80026d04:	a10da0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026d08:	910da0ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026d0c:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026d10:	b4ada0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026d14:	08c00593          	li	a1,140
    80026d18:	00016617          	auipc	a2,0x16
    80026d1c:	fd860613          	addi	a2,a2,-40 # 8003ccf0 <__func__.0+0xa908>
    80026d20:	0000c517          	auipc	a0,0xc
    80026d24:	9c050513          	addi	a0,a0,-1600 # 800326e0 <__func__.0+0x2f8>
    80026d28:	79c080ef          	jal	8002f4c4 <printf>
    80026d2c:	00035797          	auipc	a5,0x35
    80026d30:	2e57c783          	lbu	a5,741(a5) # 8005c011 <excpt+0x1>
    80026d34:	0000c597          	auipc	a1,0xc
    80026d38:	98458593          	addi	a1,a1,-1660 # 800326b8 <__func__.0+0x2d0>
    80026d3c:	e789                	bnez	a5,80026d46 <stateen_ENVCFG_test_7+0x1c4>
    80026d3e:	0000c597          	auipc	a1,0xc
    80026d42:	96a58593          	addi	a1,a1,-1686 # 800326a8 <__func__.0+0x2c0>
    80026d46:	0000c517          	auipc	a0,0xc
    80026d4a:	9b250513          	addi	a0,a0,-1614 # 800326f8 <__func__.0+0x310>
    80026d4e:	776080ef          	jal	8002f4c4 <printf>
    80026d52:	00035797          	auipc	a5,0x35
    80026d56:	2bf7c783          	lbu	a5,703(a5) # 8005c011 <excpt+0x1>
    80026d5a:	e7b1                	bnez	a5,80026da6 <stateen_ENVCFG_test_7+0x224>
    80026d5c:	4529                	li	a0,10
    80026d5e:	454070ef          	jal	8002e1b2 <putchar>
    80026d62:	c411                	beqz	s0,80026d6e <stateen_ENVCFG_test_7+0x1ec>
    80026d64:	00035797          	auipc	a5,0x35
    80026d68:	2ad7c783          	lbu	a5,685(a5) # 8005c011 <excpt+0x1>
    80026d6c:	c79d                	beqz	a5,80026d9a <stateen_ENVCFG_test_7+0x218>
    80026d6e:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80026d70:	0000c597          	auipc	a1,0xc
    80026d74:	94858593          	addi	a1,a1,-1720 # 800326b8 <__func__.0+0x2d0>
    80026d78:	0000c517          	auipc	a0,0xc
    80026d7c:	9e850513          	addi	a0,a0,-1560 # 80032760 <__func__.0+0x378>
    80026d80:	744080ef          	jal	8002f4c4 <printf>
    80026d84:	4511                	li	a0,4
    80026d86:	98eda0ef          	jal	80000f14 <goto_priv>
    80026d8a:	9edda0ef          	jal	80001776 <reset_state>
}
    80026d8e:	60e2                	ld	ra,24(sp)
    80026d90:	8522                	mv	a0,s0
    80026d92:	6442                	ld	s0,16(sp)
    80026d94:	64a2                	ld	s1,8(sp)
    80026d96:	6105                	addi	sp,sp,32
    80026d98:	8082                	ret
    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026d9a:	4405                	li	s0,1
    TEST_END();
    80026d9c:	0000c597          	auipc	a1,0xc
    80026da0:	90c58593          	addi	a1,a1,-1780 # 800326a8 <__func__.0+0x2c0>
    80026da4:	bfd1                	j	80026d78 <stateen_ENVCFG_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026da6:	0000c517          	auipc	a0,0xc
    80026daa:	95a50513          	addi	a0,a0,-1702 # 80032700 <__func__.0+0x318>
    80026dae:	716080ef          	jal	8002f4c4 <printf>
    80026db2:	02900513          	li	a0,41
    80026db6:	3fc070ef          	jal	8002e1b2 <putchar>
    80026dba:	b74d                	j	80026d5c <stateen_ENVCFG_test_7+0x1da>
    TEST_ASSERT("vu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026dbc:	0000c517          	auipc	a0,0xc
    80026dc0:	94450513          	addi	a0,a0,-1724 # 80032700 <__func__.0+0x318>
    80026dc4:	700080ef          	jal	8002f4c4 <printf>
    80026dc8:	02900513          	li	a0,41
    80026dcc:	3e6070ef          	jal	8002e1b2 <putchar>
    80026dd0:	bf39                	j	80026cee <stateen_ENVCFG_test_7+0x16c>
    TEST_ASSERT("vs mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026dd2:	0000c517          	auipc	a0,0xc
    80026dd6:	92e50513          	addi	a0,a0,-1746 # 80032700 <__func__.0+0x318>
    80026dda:	6ea080ef          	jal	8002f4c4 <printf>
    80026dde:	02900513          	li	a0,41
    80026de2:	3d0070ef          	jal	8002e1b2 <putchar>
    80026de6:	bd59                	j	80026c7c <stateen_ENVCFG_test_7+0xfa>
    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026de8:	0000c517          	auipc	a0,0xc
    80026dec:	91850513          	addi	a0,a0,-1768 # 80032700 <__func__.0+0x318>
    80026df0:	6d4080ef          	jal	8002f4c4 <printf>
    80026df4:	02900513          	li	a0,41
    80026df8:	3ba070ef          	jal	8002e1b2 <putchar>
    80026dfc:	bd19                	j	80026c12 <stateen_ENVCFG_test_7+0x90>

0000000080026dfe <stateen_SE0_test_1>:
// -------------




bool stateen_SE0_test_1(){
    80026dfe:	1101                	addi	sp,sp,-32

    TEST_START();
    80026e00:	0000b597          	auipc	a1,0xb
    80026e04:	f8858593          	addi	a1,a1,-120 # 80031d88 <__func__.7>
    80026e08:	0000c517          	auipc	a0,0xc
    80026e0c:	8c050513          	addi	a0,a0,-1856 # 800326c8 <__func__.0+0x2e0>
bool stateen_SE0_test_1(){
    80026e10:	ec06                	sd	ra,24(sp)
    80026e12:	e822                	sd	s0,16(sp)
    80026e14:	e426                	sd	s1,8(sp)
    TEST_START();
    80026e16:	6ae080ef          	jal	8002f4c4 <printf>
    80026e1a:	4529                	li	a0,10
    80026e1c:	396070ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80026e20:	4511                	li	a0,4
    80026e22:	8f2da0ef          	jal	80000f14 <goto_priv>
    //当mstateen.SE0=0,hu mode 不可访问Hstateen0和Sstateen0寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80026e26:	57fd                	li	a5,-1
    80026e28:	17fe                	slli	a5,a5,0x3f
    80026e2a:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80026e2e:	4505                	li	a0,1
    80026e30:	8e4da0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026e34:	fe5d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80026e38:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80026e3c:	a1eda0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("HU mode accesss hstateen0 register cause to illegal except when mstateen.SE0=0",
    80026e40:	08c00593          	li	a1,140
    80026e44:	00016617          	auipc	a2,0x16
    80026e48:	f0460613          	addi	a2,a2,-252 # 8003cd48 <__func__.0+0xa960>
    80026e4c:	0000c517          	auipc	a0,0xc
    80026e50:	89450513          	addi	a0,a0,-1900 # 800326e0 <__func__.0+0x2f8>
    80026e54:	670080ef          	jal	8002f4c4 <printf>
    80026e58:	00035797          	auipc	a5,0x35
    80026e5c:	1b97c783          	lbu	a5,441(a5) # 8005c011 <excpt+0x1>
    80026e60:	00035497          	auipc	s1,0x35
    80026e64:	1b048493          	addi	s1,s1,432 # 8005c010 <excpt>
    80026e68:	0000c597          	auipc	a1,0xc
    80026e6c:	85058593          	addi	a1,a1,-1968 # 800326b8 <__func__.0+0x2d0>
    80026e70:	cf89                	beqz	a5,80026e8a <stateen_SE0_test_1+0x8c>
    80026e72:	6498                	ld	a4,8(s1)
    80026e74:	4789                	li	a5,2
    80026e76:	0000c597          	auipc	a1,0xc
    80026e7a:	83258593          	addi	a1,a1,-1998 # 800326a8 <__func__.0+0x2c0>
    80026e7e:	00f70663          	beq	a4,a5,80026e8a <stateen_SE0_test_1+0x8c>
    80026e82:	0000c597          	auipc	a1,0xc
    80026e86:	83658593          	addi	a1,a1,-1994 # 800326b8 <__func__.0+0x2d0>
    80026e8a:	0000c517          	auipc	a0,0xc
    80026e8e:	86e50513          	addi	a0,a0,-1938 # 800326f8 <__func__.0+0x310>
    80026e92:	632080ef          	jal	8002f4c4 <printf>
    80026e96:	00035797          	auipc	a5,0x35
    80026e9a:	17b7c783          	lbu	a5,379(a5) # 8005c011 <excpt+0x1>
    80026e9e:	c789                	beqz	a5,80026ea8 <stateen_SE0_test_1+0xaa>
    80026ea0:	6498                	ld	a4,8(s1)
    80026ea2:	4789                	li	a5,2
    80026ea4:	00f70c63          	beq	a4,a5,80026ebc <stateen_SE0_test_1+0xbe>
    80026ea8:	0000c517          	auipc	a0,0xc
    80026eac:	85850513          	addi	a0,a0,-1960 # 80032700 <__func__.0+0x318>
    80026eb0:	614080ef          	jal	8002f4c4 <printf>
    80026eb4:	02900513          	li	a0,41
    80026eb8:	2fa070ef          	jal	8002e1b2 <putchar>
    80026ebc:	4529                	li	a0,10
    80026ebe:	2f4070ef          	jal	8002e1b2 <putchar>
    80026ec2:	00035797          	auipc	a5,0x35
    80026ec6:	14f7c783          	lbu	a5,335(a5) # 8005c011 <excpt+0x1>
    80026eca:	4401                	li	s0,0
    80026ecc:	c789                	beqz	a5,80026ed6 <stateen_SE0_test_1+0xd8>
    80026ece:	6480                	ld	s0,8(s1)
    80026ed0:	1479                	addi	s0,s0,-2
    80026ed2:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80026ed6:	4505                	li	a0,1
    80026ed8:	83cda0ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026edc:	f3dd90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80026ee0:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80026ee4:	976da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026ee8:	08c00593          	li	a1,140
    80026eec:	00016617          	auipc	a2,0x16
    80026ef0:	eac60613          	addi	a2,a2,-340 # 8003cd98 <__func__.0+0xa9b0>
    80026ef4:	0000b517          	auipc	a0,0xb
    80026ef8:	7ec50513          	addi	a0,a0,2028 # 800326e0 <__func__.0+0x2f8>
    80026efc:	5c8080ef          	jal	8002f4c4 <printf>
    80026f00:	00035797          	auipc	a5,0x35
    80026f04:	1117c783          	lbu	a5,273(a5) # 8005c011 <excpt+0x1>
    80026f08:	0000b597          	auipc	a1,0xb
    80026f0c:	7b058593          	addi	a1,a1,1968 # 800326b8 <__func__.0+0x2d0>
    80026f10:	cf89                	beqz	a5,80026f2a <stateen_SE0_test_1+0x12c>
    80026f12:	6498                	ld	a4,8(s1)
    80026f14:	4789                	li	a5,2
    80026f16:	0000b597          	auipc	a1,0xb
    80026f1a:	79258593          	addi	a1,a1,1938 # 800326a8 <__func__.0+0x2c0>
    80026f1e:	00f70663          	beq	a4,a5,80026f2a <stateen_SE0_test_1+0x12c>
    80026f22:	0000b597          	auipc	a1,0xb
    80026f26:	79658593          	addi	a1,a1,1942 # 800326b8 <__func__.0+0x2d0>
    80026f2a:	0000b517          	auipc	a0,0xb
    80026f2e:	7ce50513          	addi	a0,a0,1998 # 800326f8 <__func__.0+0x310>
    80026f32:	592080ef          	jal	8002f4c4 <printf>
    80026f36:	00035797          	auipc	a5,0x35
    80026f3a:	0db7c783          	lbu	a5,219(a5) # 8005c011 <excpt+0x1>
    80026f3e:	c789                	beqz	a5,80026f48 <stateen_SE0_test_1+0x14a>
    80026f40:	6498                	ld	a4,8(s1)
    80026f42:	4789                	li	a5,2
    80026f44:	00f70c63          	beq	a4,a5,80026f5c <stateen_SE0_test_1+0x15e>
    80026f48:	0000b517          	auipc	a0,0xb
    80026f4c:	7b850513          	addi	a0,a0,1976 # 80032700 <__func__.0+0x318>
    80026f50:	574080ef          	jal	8002f4c4 <printf>
    80026f54:	02900513          	li	a0,41
    80026f58:	25a070ef          	jal	8002e1b2 <putchar>
    80026f5c:	4529                	li	a0,10
    80026f5e:	254070ef          	jal	8002e1b2 <putchar>
    80026f62:	c015                	beqz	s0,80026f86 <stateen_SE0_test_1+0x188>
    80026f64:	00035417          	auipc	s0,0x35
    80026f68:	0ad44403          	lbu	s0,173(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80026f6c:	0000b597          	auipc	a1,0xb
    80026f70:	74c58593          	addi	a1,a1,1868 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026f74:	cc11                	beqz	s0,80026f90 <stateen_SE0_test_1+0x192>
    80026f76:	6498                	ld	a4,8(s1)
    80026f78:	4789                	li	a5,2
    TEST_END();
    80026f7a:	0000b597          	auipc	a1,0xb
    80026f7e:	72e58593          	addi	a1,a1,1838 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026f82:	00f70763          	beq	a4,a5,80026f90 <stateen_SE0_test_1+0x192>
    80026f86:	4401                	li	s0,0
    TEST_END();
    80026f88:	0000b597          	auipc	a1,0xb
    80026f8c:	73058593          	addi	a1,a1,1840 # 800326b8 <__func__.0+0x2d0>
    80026f90:	0000b517          	auipc	a0,0xb
    80026f94:	7d050513          	addi	a0,a0,2000 # 80032760 <__func__.0+0x378>
    80026f98:	52c080ef          	jal	8002f4c4 <printf>
    80026f9c:	4511                	li	a0,4
    80026f9e:	f77d90ef          	jal	80000f14 <goto_priv>
    80026fa2:	fd4da0ef          	jal	80001776 <reset_state>

}
    80026fa6:	60e2                	ld	ra,24(sp)
    80026fa8:	8522                	mv	a0,s0
    80026faa:	6442                	ld	s0,16(sp)
    80026fac:	64a2                	ld	s1,8(sp)
    80026fae:	6105                	addi	sp,sp,32
    80026fb0:	8082                	ret

0000000080026fb2 <stateen_SE0_test_2>:

bool stateen_SE0_test_2(){
    80026fb2:	1101                	addi	sp,sp,-32

    TEST_START();
    80026fb4:	0000b597          	auipc	a1,0xb
    80026fb8:	dec58593          	addi	a1,a1,-532 # 80031da0 <__func__.6>
    80026fbc:	0000b517          	auipc	a0,0xb
    80026fc0:	70c50513          	addi	a0,a0,1804 # 800326c8 <__func__.0+0x2e0>
bool stateen_SE0_test_2(){
    80026fc4:	ec06                	sd	ra,24(sp)
    80026fc6:	e822                	sd	s0,16(sp)
    80026fc8:	e426                	sd	s1,8(sp)
    TEST_START();
    80026fca:	4fa080ef          	jal	8002f4c4 <printf>
    80026fce:	4529                	li	a0,10
    80026fd0:	1e2070ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80026fd4:	4511                	li	a0,4
    80026fd6:	f3fd90ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80026fda:	57fd                	li	a5,-1
    80026fdc:	17fe                	slli	a5,a5,0x3f
    80026fde:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80026fe2:	60c7a073          	csrs	hstateen0,a5

    //当mstateen.SE0=1,hstateen.SE0=0,v=1时,不可访问Hstateen0和Sstateen0寄存器
    goto_priv(PRIV_VU);
    80026fe6:	4501                	li	a0,0
    80026fe8:	f2dd90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026fec:	e2dd90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80026ff0:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80026ff4:	866da0ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("VU mode access hstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80026ff8:	08c00593          	li	a1,140
    80026ffc:	00016617          	auipc	a2,0x16
    80027000:	dec60613          	addi	a2,a2,-532 # 8003cde8 <__func__.0+0xaa00>
    80027004:	0000b517          	auipc	a0,0xb
    80027008:	6dc50513          	addi	a0,a0,1756 # 800326e0 <__func__.0+0x2f8>
    8002700c:	4b8080ef          	jal	8002f4c4 <printf>
    80027010:	00035797          	auipc	a5,0x35
    80027014:	0017c783          	lbu	a5,1(a5) # 8005c011 <excpt+0x1>
    80027018:	00035497          	auipc	s1,0x35
    8002701c:	ff848493          	addi	s1,s1,-8 # 8005c010 <excpt>
    80027020:	0000b597          	auipc	a1,0xb
    80027024:	69858593          	addi	a1,a1,1688 # 800326b8 <__func__.0+0x2d0>
    80027028:	cf89                	beqz	a5,80027042 <stateen_SE0_test_2+0x90>
    8002702a:	6498                	ld	a4,8(s1)
    8002702c:	47d9                	li	a5,22
    8002702e:	0000b597          	auipc	a1,0xb
    80027032:	67a58593          	addi	a1,a1,1658 # 800326a8 <__func__.0+0x2c0>
    80027036:	00f70663          	beq	a4,a5,80027042 <stateen_SE0_test_2+0x90>
    8002703a:	0000b597          	auipc	a1,0xb
    8002703e:	67e58593          	addi	a1,a1,1662 # 800326b8 <__func__.0+0x2d0>
    80027042:	0000b517          	auipc	a0,0xb
    80027046:	6b650513          	addi	a0,a0,1718 # 800326f8 <__func__.0+0x310>
    8002704a:	47a080ef          	jal	8002f4c4 <printf>
    8002704e:	00035797          	auipc	a5,0x35
    80027052:	fc37c783          	lbu	a5,-61(a5) # 8005c011 <excpt+0x1>
    80027056:	c789                	beqz	a5,80027060 <stateen_SE0_test_2+0xae>
    80027058:	6498                	ld	a4,8(s1)
    8002705a:	47d9                	li	a5,22
    8002705c:	00f70c63          	beq	a4,a5,80027074 <stateen_SE0_test_2+0xc2>
    80027060:	0000b517          	auipc	a0,0xb
    80027064:	6a050513          	addi	a0,a0,1696 # 80032700 <__func__.0+0x318>
    80027068:	45c080ef          	jal	8002f4c4 <printf>
    8002706c:	02900513          	li	a0,41
    80027070:	142070ef          	jal	8002e1b2 <putchar>
    80027074:	4529                	li	a0,10
    80027076:	13c070ef          	jal	8002e1b2 <putchar>
    8002707a:	00035797          	auipc	a5,0x35
    8002707e:	f977c783          	lbu	a5,-105(a5) # 8005c011 <excpt+0x1>
    80027082:	4401                	li	s0,0
    80027084:	c789                	beqz	a5,8002708e <stateen_SE0_test_2+0xdc>
    80027086:	6480                	ld	s0,8(s1)
    80027088:	1429                	addi	s0,s0,-22
    8002708a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8002708e:	4501                	li	a0,0
    80027090:	e85d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027094:	d85d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027098:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    8002709c:	fbfd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    800270a0:	08c00593          	li	a1,140
    800270a4:	00016617          	auipc	a2,0x16
    800270a8:	d9c60613          	addi	a2,a2,-612 # 8003ce40 <__func__.0+0xaa58>
    800270ac:	0000b517          	auipc	a0,0xb
    800270b0:	63450513          	addi	a0,a0,1588 # 800326e0 <__func__.0+0x2f8>
    800270b4:	410080ef          	jal	8002f4c4 <printf>
    800270b8:	00035797          	auipc	a5,0x35
    800270bc:	f597c783          	lbu	a5,-167(a5) # 8005c011 <excpt+0x1>
    800270c0:	0000b597          	auipc	a1,0xb
    800270c4:	5f858593          	addi	a1,a1,1528 # 800326b8 <__func__.0+0x2d0>
    800270c8:	cf89                	beqz	a5,800270e2 <stateen_SE0_test_2+0x130>
    800270ca:	6498                	ld	a4,8(s1)
    800270cc:	47d9                	li	a5,22
    800270ce:	0000b597          	auipc	a1,0xb
    800270d2:	5da58593          	addi	a1,a1,1498 # 800326a8 <__func__.0+0x2c0>
    800270d6:	00f70663          	beq	a4,a5,800270e2 <stateen_SE0_test_2+0x130>
    800270da:	0000b597          	auipc	a1,0xb
    800270de:	5de58593          	addi	a1,a1,1502 # 800326b8 <__func__.0+0x2d0>
    800270e2:	0000b517          	auipc	a0,0xb
    800270e6:	61650513          	addi	a0,a0,1558 # 800326f8 <__func__.0+0x310>
    800270ea:	3da080ef          	jal	8002f4c4 <printf>
    800270ee:	00035797          	auipc	a5,0x35
    800270f2:	f237c783          	lbu	a5,-221(a5) # 8005c011 <excpt+0x1>
    800270f6:	c789                	beqz	a5,80027100 <stateen_SE0_test_2+0x14e>
    800270f8:	6498                	ld	a4,8(s1)
    800270fa:	47d9                	li	a5,22
    800270fc:	00f70c63          	beq	a4,a5,80027114 <stateen_SE0_test_2+0x162>
    80027100:	0000b517          	auipc	a0,0xb
    80027104:	60050513          	addi	a0,a0,1536 # 80032700 <__func__.0+0x318>
    80027108:	3bc080ef          	jal	8002f4c4 <printf>
    8002710c:	02900513          	li	a0,41
    80027110:	0a2070ef          	jal	8002e1b2 <putchar>
    80027114:	4529                	li	a0,10
    80027116:	09c070ef          	jal	8002e1b2 <putchar>
    8002711a:	c015                	beqz	s0,8002713e <stateen_SE0_test_2+0x18c>
    8002711c:	00035417          	auipc	s0,0x35
    80027120:	ef544403          	lbu	s0,-267(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80027124:	0000b597          	auipc	a1,0xb
    80027128:	59458593          	addi	a1,a1,1428 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    8002712c:	cc11                	beqz	s0,80027148 <stateen_SE0_test_2+0x196>
    8002712e:	6498                	ld	a4,8(s1)
    80027130:	47d9                	li	a5,22
    TEST_END();
    80027132:	0000b597          	auipc	a1,0xb
    80027136:	57658593          	addi	a1,a1,1398 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    8002713a:	00f70763          	beq	a4,a5,80027148 <stateen_SE0_test_2+0x196>
    8002713e:	4401                	li	s0,0
    TEST_END();
    80027140:	0000b597          	auipc	a1,0xb
    80027144:	57858593          	addi	a1,a1,1400 # 800326b8 <__func__.0+0x2d0>
    80027148:	0000b517          	auipc	a0,0xb
    8002714c:	61850513          	addi	a0,a0,1560 # 80032760 <__func__.0+0x378>
    80027150:	374080ef          	jal	8002f4c4 <printf>
    80027154:	4511                	li	a0,4
    80027156:	dbfd90ef          	jal	80000f14 <goto_priv>
    8002715a:	e1cda0ef          	jal	80001776 <reset_state>

}
    8002715e:	60e2                	ld	ra,24(sp)
    80027160:	8522                	mv	a0,s0
    80027162:	6442                	ld	s0,16(sp)
    80027164:	64a2                	ld	s1,8(sp)
    80027166:	6105                	addi	sp,sp,32
    80027168:	8082                	ret

000000008002716a <stateen_SE0_test_3>:

bool stateen_SE0_test_3(){
    8002716a:	1141                	addi	sp,sp,-16

    //当mstateen.SE0=0,m mode 可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    8002716c:	0000b597          	auipc	a1,0xb
    80027170:	c4c58593          	addi	a1,a1,-948 # 80031db8 <__func__.5>
    80027174:	0000b517          	auipc	a0,0xb
    80027178:	55450513          	addi	a0,a0,1364 # 800326c8 <__func__.0+0x2e0>
bool stateen_SE0_test_3(){
    8002717c:	e406                	sd	ra,8(sp)
    8002717e:	e022                	sd	s0,0(sp)
    TEST_START();
    80027180:	344080ef          	jal	8002f4c4 <printf>
    80027184:	4529                	li	a0,10
    80027186:	02c070ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    8002718a:	4511                	li	a0,4
    8002718c:	d89d90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027190:	57fd                	li	a5,-1
    80027192:	17fe                	slli	a5,a5,0x3f
    80027194:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    80027198:	4511                	li	a0,4
    8002719a:	d7bd90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002719e:	c7bd90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800271a2:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800271a6:	eb5d90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    800271aa:	08c00593          	li	a1,140
    800271ae:	00016617          	auipc	a2,0x16
    800271b2:	cea60613          	addi	a2,a2,-790 # 8003ce98 <__func__.0+0xaab0>
    800271b6:	0000b517          	auipc	a0,0xb
    800271ba:	52a50513          	addi	a0,a0,1322 # 800326e0 <__func__.0+0x2f8>
    800271be:	306080ef          	jal	8002f4c4 <printf>
    800271c2:	00035797          	auipc	a5,0x35
    800271c6:	e4f7c783          	lbu	a5,-433(a5) # 8005c011 <excpt+0x1>
    800271ca:	0000b597          	auipc	a1,0xb
    800271ce:	4de58593          	addi	a1,a1,1246 # 800326a8 <__func__.0+0x2c0>
    800271d2:	c789                	beqz	a5,800271dc <stateen_SE0_test_3+0x72>
    800271d4:	0000b597          	auipc	a1,0xb
    800271d8:	4e458593          	addi	a1,a1,1252 # 800326b8 <__func__.0+0x2d0>
    800271dc:	0000b517          	auipc	a0,0xb
    800271e0:	51c50513          	addi	a0,a0,1308 # 800326f8 <__func__.0+0x310>
    800271e4:	2e0080ef          	jal	8002f4c4 <printf>
    800271e8:	00035797          	auipc	a5,0x35
    800271ec:	e297c783          	lbu	a5,-471(a5) # 8005c011 <excpt+0x1>
    800271f0:	e7e9                	bnez	a5,800272ba <stateen_SE0_test_3+0x150>
    800271f2:	4529                	li	a0,10
    800271f4:	7bf060ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800271f8:	4511                	li	a0,4
    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    800271fa:	00035417          	auipc	s0,0x35
    800271fe:	e1744403          	lbu	s0,-489(s0) # 8005c011 <excpt+0x1>
    goto_priv(PRIV_M);
    80027202:	d13d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027206:	c13d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    8002720a:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    8002720e:	e4dd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    80027212:	08c00593          	li	a1,140
    80027216:	00016617          	auipc	a2,0x16
    8002721a:	cc260613          	addi	a2,a2,-830 # 8003ced8 <__func__.0+0xaaf0>
    8002721e:	0000b517          	auipc	a0,0xb
    80027222:	4c250513          	addi	a0,a0,1218 # 800326e0 <__func__.0+0x2f8>
    80027226:	29e080ef          	jal	8002f4c4 <printf>
    8002722a:	00035797          	auipc	a5,0x35
    8002722e:	de77c783          	lbu	a5,-537(a5) # 8005c011 <excpt+0x1>
    80027232:	0000b597          	auipc	a1,0xb
    80027236:	48658593          	addi	a1,a1,1158 # 800326b8 <__func__.0+0x2d0>
    8002723a:	e789                	bnez	a5,80027244 <stateen_SE0_test_3+0xda>
    8002723c:	0000b597          	auipc	a1,0xb
    80027240:	46c58593          	addi	a1,a1,1132 # 800326a8 <__func__.0+0x2c0>
    80027244:	0000b517          	auipc	a0,0xb
    80027248:	4b450513          	addi	a0,a0,1204 # 800326f8 <__func__.0+0x310>
    8002724c:	278080ef          	jal	8002f4c4 <printf>
    80027250:	00035797          	auipc	a5,0x35
    80027254:	dc17c783          	lbu	a5,-575(a5) # 8005c011 <excpt+0x1>
    80027258:	e7b1                	bnez	a5,800272a4 <stateen_SE0_test_3+0x13a>
    8002725a:	4529                	li	a0,10
    8002725c:	757060ef          	jal	8002e1b2 <putchar>
    80027260:	e815                	bnez	s0,80027294 <stateen_SE0_test_3+0x12a>
    80027262:	00035797          	auipc	a5,0x35
    80027266:	daf7c783          	lbu	a5,-593(a5) # 8005c011 <excpt+0x1>
    8002726a:	c79d                	beqz	a5,80027298 <stateen_SE0_test_3+0x12e>
        excpt.triggered == false
    ); 



    TEST_END();
    8002726c:	0000b597          	auipc	a1,0xb
    80027270:	44c58593          	addi	a1,a1,1100 # 800326b8 <__func__.0+0x2d0>
    80027274:	0000b517          	auipc	a0,0xb
    80027278:	4ec50513          	addi	a0,a0,1260 # 80032760 <__func__.0+0x378>
    8002727c:	248080ef          	jal	8002f4c4 <printf>
    80027280:	4511                	li	a0,4
    80027282:	c93d90ef          	jal	80000f14 <goto_priv>
    80027286:	cf0da0ef          	jal	80001776 <reset_state>

}
    8002728a:	60a2                	ld	ra,8(sp)
    8002728c:	8522                	mv	a0,s0
    8002728e:	6402                	ld	s0,0(sp)
    80027290:	0141                	addi	sp,sp,16
    80027292:	8082                	ret
    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    80027294:	4401                	li	s0,0
    80027296:	bfd9                	j	8002726c <stateen_SE0_test_3+0x102>
    80027298:	4405                	li	s0,1
    TEST_END();
    8002729a:	0000b597          	auipc	a1,0xb
    8002729e:	40e58593          	addi	a1,a1,1038 # 800326a8 <__func__.0+0x2c0>
    800272a2:	bfc9                	j	80027274 <stateen_SE0_test_3+0x10a>
    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    800272a4:	0000b517          	auipc	a0,0xb
    800272a8:	45c50513          	addi	a0,a0,1116 # 80032700 <__func__.0+0x318>
    800272ac:	218080ef          	jal	8002f4c4 <printf>
    800272b0:	02900513          	li	a0,41
    800272b4:	6ff060ef          	jal	8002e1b2 <putchar>
    800272b8:	b74d                	j	8002725a <stateen_SE0_test_3+0xf0>
    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    800272ba:	0000b517          	auipc	a0,0xb
    800272be:	44650513          	addi	a0,a0,1094 # 80032700 <__func__.0+0x318>
    800272c2:	202080ef          	jal	8002f4c4 <printf>
    800272c6:	02900513          	li	a0,41
    800272ca:	6e9060ef          	jal	8002e1b2 <putchar>
    800272ce:	b715                	j	800271f2 <stateen_SE0_test_3+0x88>

00000000800272d0 <stateen_SE0_test_4>:


bool stateen_SE0_test_4(){
    800272d0:	1101                	addi	sp,sp,-32

    //当mstateen.SE0=1,hstateen.SE0=0,v=1时不可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    800272d2:	0000b597          	auipc	a1,0xb
    800272d6:	afe58593          	addi	a1,a1,-1282 # 80031dd0 <__func__.4>
    800272da:	0000b517          	auipc	a0,0xb
    800272de:	3ee50513          	addi	a0,a0,1006 # 800326c8 <__func__.0+0x2e0>
bool stateen_SE0_test_4(){
    800272e2:	ec06                	sd	ra,24(sp)
    800272e4:	e822                	sd	s0,16(sp)
    800272e6:	e426                	sd	s1,8(sp)
    TEST_START();
    800272e8:	1dc080ef          	jal	8002f4c4 <printf>
    800272ec:	4529                	li	a0,10
    800272ee:	6c5060ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    800272f2:	4511                	li	a0,4
    800272f4:	c21d90ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    800272f8:	57fd                	li	a5,-1
    800272fa:	17fe                	slli	a5,a5,0x3f
    800272fc:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80027300:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80027304:	30c025f3          	csrr	a1,mstateen0
    80027308:	00014517          	auipc	a0,0x14
    8002730c:	be050513          	addi	a0,a0,-1056 # 8003aee8 <__func__.0+0x8b00>
    80027310:	1b4080ef          	jal	8002f4c4 <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80027314:	60c025f3          	csrr	a1,hstateen0
    80027318:	00014517          	auipc	a0,0x14
    8002731c:	be050513          	addi	a0,a0,-1056 # 8003aef8 <__func__.0+0x8b10>
    80027320:	1a4080ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);
    80027324:	4509                	li	a0,2
    80027326:	befd90ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002732a:	aefd90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    8002732e:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027332:	d29d90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80027336:	08c00593          	li	a1,140
    8002733a:	00016617          	auipc	a2,0x16
    8002733e:	bde60613          	addi	a2,a2,-1058 # 8003cf18 <__func__.0+0xab30>
    80027342:	0000b517          	auipc	a0,0xb
    80027346:	39e50513          	addi	a0,a0,926 # 800326e0 <__func__.0+0x2f8>
    8002734a:	17a080ef          	jal	8002f4c4 <printf>
    8002734e:	00035797          	auipc	a5,0x35
    80027352:	cc37c783          	lbu	a5,-829(a5) # 8005c011 <excpt+0x1>
    80027356:	00035497          	auipc	s1,0x35
    8002735a:	cba48493          	addi	s1,s1,-838 # 8005c010 <excpt>
    8002735e:	0000b597          	auipc	a1,0xb
    80027362:	35a58593          	addi	a1,a1,858 # 800326b8 <__func__.0+0x2d0>
    80027366:	cf89                	beqz	a5,80027380 <stateen_SE0_test_4+0xb0>
    80027368:	6498                	ld	a4,8(s1)
    8002736a:	47d9                	li	a5,22
    8002736c:	0000b597          	auipc	a1,0xb
    80027370:	33c58593          	addi	a1,a1,828 # 800326a8 <__func__.0+0x2c0>
    80027374:	00f70663          	beq	a4,a5,80027380 <stateen_SE0_test_4+0xb0>
    80027378:	0000b597          	auipc	a1,0xb
    8002737c:	34058593          	addi	a1,a1,832 # 800326b8 <__func__.0+0x2d0>
    80027380:	0000b517          	auipc	a0,0xb
    80027384:	37850513          	addi	a0,a0,888 # 800326f8 <__func__.0+0x310>
    80027388:	13c080ef          	jal	8002f4c4 <printf>
    8002738c:	00035797          	auipc	a5,0x35
    80027390:	c857c783          	lbu	a5,-891(a5) # 8005c011 <excpt+0x1>
    80027394:	c789                	beqz	a5,8002739e <stateen_SE0_test_4+0xce>
    80027396:	6498                	ld	a4,8(s1)
    80027398:	47d9                	li	a5,22
    8002739a:	00f70c63          	beq	a4,a5,800273b2 <stateen_SE0_test_4+0xe2>
    8002739e:	0000b517          	auipc	a0,0xb
    800273a2:	36250513          	addi	a0,a0,866 # 80032700 <__func__.0+0x318>
    800273a6:	11e080ef          	jal	8002f4c4 <printf>
    800273aa:	02900513          	li	a0,41
    800273ae:	605060ef          	jal	8002e1b2 <putchar>
    800273b2:	4529                	li	a0,10
    800273b4:	5ff060ef          	jal	8002e1b2 <putchar>
    800273b8:	00035797          	auipc	a5,0x35
    800273bc:	c597c783          	lbu	a5,-935(a5) # 8005c011 <excpt+0x1>
    800273c0:	4401                	li	s0,0
    800273c2:	c789                	beqz	a5,800273cc <stateen_SE0_test_4+0xfc>
    800273c4:	6480                	ld	s0,8(s1)
    800273c6:	1429                	addi	s0,s0,-22
    800273c8:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800273cc:	4509                	li	a0,2
    800273ce:	b47d90ef          	jal	80000f14 <goto_priv>

    TEST_SETUP_EXCEPT();
    800273d2:	a47d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800273d6:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800273da:	c81d90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    800273de:	08c00593          	li	a1,140
    800273e2:	00016617          	auipc	a2,0x16
    800273e6:	b8e60613          	addi	a2,a2,-1138 # 8003cf70 <__func__.0+0xab88>
    800273ea:	0000b517          	auipc	a0,0xb
    800273ee:	2f650513          	addi	a0,a0,758 # 800326e0 <__func__.0+0x2f8>
    800273f2:	0d2080ef          	jal	8002f4c4 <printf>
    800273f6:	00035797          	auipc	a5,0x35
    800273fa:	c1b7c783          	lbu	a5,-997(a5) # 8005c011 <excpt+0x1>
    800273fe:	0000b597          	auipc	a1,0xb
    80027402:	2ba58593          	addi	a1,a1,698 # 800326b8 <__func__.0+0x2d0>
    80027406:	cf89                	beqz	a5,80027420 <stateen_SE0_test_4+0x150>
    80027408:	6498                	ld	a4,8(s1)
    8002740a:	47d9                	li	a5,22
    8002740c:	0000b597          	auipc	a1,0xb
    80027410:	29c58593          	addi	a1,a1,668 # 800326a8 <__func__.0+0x2c0>
    80027414:	00f70663          	beq	a4,a5,80027420 <stateen_SE0_test_4+0x150>
    80027418:	0000b597          	auipc	a1,0xb
    8002741c:	2a058593          	addi	a1,a1,672 # 800326b8 <__func__.0+0x2d0>
    80027420:	0000b517          	auipc	a0,0xb
    80027424:	2d850513          	addi	a0,a0,728 # 800326f8 <__func__.0+0x310>
    80027428:	09c080ef          	jal	8002f4c4 <printf>
    8002742c:	00035797          	auipc	a5,0x35
    80027430:	be57c783          	lbu	a5,-1051(a5) # 8005c011 <excpt+0x1>
    80027434:	c789                	beqz	a5,8002743e <stateen_SE0_test_4+0x16e>
    80027436:	6498                	ld	a4,8(s1)
    80027438:	47d9                	li	a5,22
    8002743a:	00f70c63          	beq	a4,a5,80027452 <stateen_SE0_test_4+0x182>
    8002743e:	0000b517          	auipc	a0,0xb
    80027442:	2c250513          	addi	a0,a0,706 # 80032700 <__func__.0+0x318>
    80027446:	07e080ef          	jal	8002f4c4 <printf>
    8002744a:	02900513          	li	a0,41
    8002744e:	565060ef          	jal	8002e1b2 <putchar>
    80027452:	4529                	li	a0,10
    80027454:	55f060ef          	jal	8002e1b2 <putchar>
    80027458:	c015                	beqz	s0,8002747c <stateen_SE0_test_4+0x1ac>
    8002745a:	00035417          	auipc	s0,0x35
    8002745e:	bb744403          	lbu	s0,-1097(s0) # 8005c011 <excpt+0x1>
        excpt.cause == CAUSE_VRTI
    ); 



    TEST_END();
    80027462:	0000b597          	auipc	a1,0xb
    80027466:	25658593          	addi	a1,a1,598 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    8002746a:	cc11                	beqz	s0,80027486 <stateen_SE0_test_4+0x1b6>
    8002746c:	6498                	ld	a4,8(s1)
    8002746e:	47d9                	li	a5,22
    TEST_END();
    80027470:	0000b597          	auipc	a1,0xb
    80027474:	23858593          	addi	a1,a1,568 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80027478:	00f70763          	beq	a4,a5,80027486 <stateen_SE0_test_4+0x1b6>
    8002747c:	4401                	li	s0,0
    TEST_END();
    8002747e:	0000b597          	auipc	a1,0xb
    80027482:	23a58593          	addi	a1,a1,570 # 800326b8 <__func__.0+0x2d0>
    80027486:	0000b517          	auipc	a0,0xb
    8002748a:	2da50513          	addi	a0,a0,730 # 80032760 <__func__.0+0x378>
    8002748e:	036080ef          	jal	8002f4c4 <printf>
    80027492:	4511                	li	a0,4
    80027494:	a81d90ef          	jal	80000f14 <goto_priv>
    80027498:	adeda0ef          	jal	80001776 <reset_state>

}
    8002749c:	60e2                	ld	ra,24(sp)
    8002749e:	8522                	mv	a0,s0
    800274a0:	6442                	ld	s0,16(sp)
    800274a2:	64a2                	ld	s1,8(sp)
    800274a4:	6105                	addi	sp,sp,32
    800274a6:	8082                	ret

00000000800274a8 <stateen_SE0_test_5>:

bool stateen_SE0_test_5(){
    800274a8:	1101                	addi	sp,sp,-32

    //当mstateen.SE0=0,hs mode 不可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    800274aa:	0000b597          	auipc	a1,0xb
    800274ae:	93e58593          	addi	a1,a1,-1730 # 80031de8 <__func__.3>
    800274b2:	0000b517          	auipc	a0,0xb
    800274b6:	21650513          	addi	a0,a0,534 # 800326c8 <__func__.0+0x2e0>
bool stateen_SE0_test_5(){
    800274ba:	ec06                	sd	ra,24(sp)
    800274bc:	e822                	sd	s0,16(sp)
    800274be:	e426                	sd	s1,8(sp)
    TEST_START();
    800274c0:	004080ef          	jal	8002f4c4 <printf>
    800274c4:	4529                	li	a0,10
    800274c6:	4ed060ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    800274ca:	4511                	li	a0,4
    800274cc:	a49d90ef          	jal	80000f14 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    800274d0:	57fd                	li	a5,-1
    800274d2:	17fe                	slli	a5,a5,0x3f
    800274d4:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    800274d8:	450d                	li	a0,3
    800274da:	a3bd90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800274de:	93bd90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800274e2:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800274e6:	b75d90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register cause to illegal except when mstateen.SE0=0",
    800274ea:	08c00593          	li	a1,140
    800274ee:	00016617          	auipc	a2,0x16
    800274f2:	ada60613          	addi	a2,a2,-1318 # 8003cfc8 <__func__.0+0xabe0>
    800274f6:	0000b517          	auipc	a0,0xb
    800274fa:	1ea50513          	addi	a0,a0,490 # 800326e0 <__func__.0+0x2f8>
    800274fe:	7c7070ef          	jal	8002f4c4 <printf>
    80027502:	00035797          	auipc	a5,0x35
    80027506:	b0f7c783          	lbu	a5,-1265(a5) # 8005c011 <excpt+0x1>
    8002750a:	00035497          	auipc	s1,0x35
    8002750e:	b0648493          	addi	s1,s1,-1274 # 8005c010 <excpt>
    80027512:	0000b597          	auipc	a1,0xb
    80027516:	1a658593          	addi	a1,a1,422 # 800326b8 <__func__.0+0x2d0>
    8002751a:	cf89                	beqz	a5,80027534 <stateen_SE0_test_5+0x8c>
    8002751c:	6498                	ld	a4,8(s1)
    8002751e:	4789                	li	a5,2
    80027520:	0000b597          	auipc	a1,0xb
    80027524:	18858593          	addi	a1,a1,392 # 800326a8 <__func__.0+0x2c0>
    80027528:	00f70663          	beq	a4,a5,80027534 <stateen_SE0_test_5+0x8c>
    8002752c:	0000b597          	auipc	a1,0xb
    80027530:	18c58593          	addi	a1,a1,396 # 800326b8 <__func__.0+0x2d0>
    80027534:	0000b517          	auipc	a0,0xb
    80027538:	1c450513          	addi	a0,a0,452 # 800326f8 <__func__.0+0x310>
    8002753c:	789070ef          	jal	8002f4c4 <printf>
    80027540:	00035797          	auipc	a5,0x35
    80027544:	ad17c783          	lbu	a5,-1327(a5) # 8005c011 <excpt+0x1>
    80027548:	c789                	beqz	a5,80027552 <stateen_SE0_test_5+0xaa>
    8002754a:	6498                	ld	a4,8(s1)
    8002754c:	4789                	li	a5,2
    8002754e:	00f70c63          	beq	a4,a5,80027566 <stateen_SE0_test_5+0xbe>
    80027552:	0000b517          	auipc	a0,0xb
    80027556:	1ae50513          	addi	a0,a0,430 # 80032700 <__func__.0+0x318>
    8002755a:	76b070ef          	jal	8002f4c4 <printf>
    8002755e:	02900513          	li	a0,41
    80027562:	451060ef          	jal	8002e1b2 <putchar>
    80027566:	4529                	li	a0,10
    80027568:	44b060ef          	jal	8002e1b2 <putchar>
    8002756c:	00035797          	auipc	a5,0x35
    80027570:	aa57c783          	lbu	a5,-1371(a5) # 8005c011 <excpt+0x1>
    80027574:	4401                	li	s0,0
    80027576:	c789                	beqz	a5,80027580 <stateen_SE0_test_5+0xd8>
    80027578:	6480                	ld	s0,8(s1)
    8002757a:	1479                	addi	s0,s0,-2
    8002757c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80027580:	450d                	li	a0,3
    80027582:	993d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027586:	893d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    8002758a:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    8002758e:	acdd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80027592:	08c00593          	li	a1,140
    80027596:	00016617          	auipc	a2,0x16
    8002759a:	a8260613          	addi	a2,a2,-1406 # 8003d018 <__func__.0+0xac30>
    8002759e:	0000b517          	auipc	a0,0xb
    800275a2:	14250513          	addi	a0,a0,322 # 800326e0 <__func__.0+0x2f8>
    800275a6:	71f070ef          	jal	8002f4c4 <printf>
    800275aa:	00035797          	auipc	a5,0x35
    800275ae:	a677c783          	lbu	a5,-1433(a5) # 8005c011 <excpt+0x1>
    800275b2:	0000b597          	auipc	a1,0xb
    800275b6:	10658593          	addi	a1,a1,262 # 800326b8 <__func__.0+0x2d0>
    800275ba:	cf89                	beqz	a5,800275d4 <stateen_SE0_test_5+0x12c>
    800275bc:	6498                	ld	a4,8(s1)
    800275be:	4789                	li	a5,2
    800275c0:	0000b597          	auipc	a1,0xb
    800275c4:	0e858593          	addi	a1,a1,232 # 800326a8 <__func__.0+0x2c0>
    800275c8:	00f70663          	beq	a4,a5,800275d4 <stateen_SE0_test_5+0x12c>
    800275cc:	0000b597          	auipc	a1,0xb
    800275d0:	0ec58593          	addi	a1,a1,236 # 800326b8 <__func__.0+0x2d0>
    800275d4:	0000b517          	auipc	a0,0xb
    800275d8:	12450513          	addi	a0,a0,292 # 800326f8 <__func__.0+0x310>
    800275dc:	6e9070ef          	jal	8002f4c4 <printf>
    800275e0:	00035797          	auipc	a5,0x35
    800275e4:	a317c783          	lbu	a5,-1487(a5) # 8005c011 <excpt+0x1>
    800275e8:	c789                	beqz	a5,800275f2 <stateen_SE0_test_5+0x14a>
    800275ea:	6498                	ld	a4,8(s1)
    800275ec:	4789                	li	a5,2
    800275ee:	00f70c63          	beq	a4,a5,80027606 <stateen_SE0_test_5+0x15e>
    800275f2:	0000b517          	auipc	a0,0xb
    800275f6:	10e50513          	addi	a0,a0,270 # 80032700 <__func__.0+0x318>
    800275fa:	6cb070ef          	jal	8002f4c4 <printf>
    800275fe:	02900513          	li	a0,41
    80027602:	3b1060ef          	jal	8002e1b2 <putchar>
    80027606:	4529                	li	a0,10
    80027608:	3ab060ef          	jal	8002e1b2 <putchar>
    8002760c:	c015                	beqz	s0,80027630 <stateen_SE0_test_5+0x188>
    8002760e:	00035417          	auipc	s0,0x35
    80027612:	a0344403          	lbu	s0,-1533(s0) # 8005c011 <excpt+0x1>
        excpt.cause == CAUSE_ILI
    ); 



    TEST_END();
    80027616:	0000b597          	auipc	a1,0xb
    8002761a:	0a258593          	addi	a1,a1,162 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    8002761e:	cc11                	beqz	s0,8002763a <stateen_SE0_test_5+0x192>
    80027620:	6498                	ld	a4,8(s1)
    80027622:	4789                	li	a5,2
    TEST_END();
    80027624:	0000b597          	auipc	a1,0xb
    80027628:	08458593          	addi	a1,a1,132 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    8002762c:	00f70763          	beq	a4,a5,8002763a <stateen_SE0_test_5+0x192>
    80027630:	4401                	li	s0,0
    TEST_END();
    80027632:	0000b597          	auipc	a1,0xb
    80027636:	08658593          	addi	a1,a1,134 # 800326b8 <__func__.0+0x2d0>
    8002763a:	0000b517          	auipc	a0,0xb
    8002763e:	12650513          	addi	a0,a0,294 # 80032760 <__func__.0+0x378>
    80027642:	683070ef          	jal	8002f4c4 <printf>
    80027646:	4511                	li	a0,4
    80027648:	8cdd90ef          	jal	80000f14 <goto_priv>
    8002764c:	92ada0ef          	jal	80001776 <reset_state>

}
    80027650:	60e2                	ld	ra,24(sp)
    80027652:	8522                	mv	a0,s0
    80027654:	6442                	ld	s0,16(sp)
    80027656:	64a2                	ld	s1,8(sp)
    80027658:	6105                	addi	sp,sp,32
    8002765a:	8082                	ret

000000008002765c <stateen_SE0_test_6>:


bool stateen_SE0_test_6(){
    8002765c:	1101                	addi	sp,sp,-32

    TEST_START();
    8002765e:	0000a597          	auipc	a1,0xa
    80027662:	7a258593          	addi	a1,a1,1954 # 80031e00 <__func__.2>
    80027666:	0000b517          	auipc	a0,0xb
    8002766a:	06250513          	addi	a0,a0,98 # 800326c8 <__func__.0+0x2e0>
bool stateen_SE0_test_6(){
    8002766e:	ec06                	sd	ra,24(sp)
    80027670:	e822                	sd	s0,16(sp)
    80027672:	e426                	sd	s1,8(sp)
    TEST_START();
    80027674:	651070ef          	jal	8002f4c4 <printf>
    80027678:	4529                	li	a0,10
    8002767a:	339060ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    8002767e:	4511                	li	a0,4
    80027680:	895d90ef          	jal	80000f14 <goto_priv>
    //当mstateen.SE0=1,v=0时,可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027684:	57fd                	li	a5,-1
    80027686:	17fe                	slli	a5,a5,0x3f
    80027688:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_SE0);
    8002768c:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80027690:	450d                	li	a0,3
    80027692:	883d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027696:	f82d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    8002769a:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    8002769e:	9bdd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    800276a2:	08c00593          	li	a1,140
    800276a6:	00016617          	auipc	a2,0x16
    800276aa:	9c260613          	addi	a2,a2,-1598 # 8003d068 <__func__.0+0xac80>
    800276ae:	0000b517          	auipc	a0,0xb
    800276b2:	03250513          	addi	a0,a0,50 # 800326e0 <__func__.0+0x2f8>
    800276b6:	60f070ef          	jal	8002f4c4 <printf>
    800276ba:	00035797          	auipc	a5,0x35
    800276be:	9577c783          	lbu	a5,-1705(a5) # 8005c011 <excpt+0x1>
    800276c2:	0000b597          	auipc	a1,0xb
    800276c6:	fe658593          	addi	a1,a1,-26 # 800326a8 <__func__.0+0x2c0>
    800276ca:	c789                	beqz	a5,800276d4 <stateen_SE0_test_6+0x78>
    800276cc:	0000b597          	auipc	a1,0xb
    800276d0:	fec58593          	addi	a1,a1,-20 # 800326b8 <__func__.0+0x2d0>
    800276d4:	0000b517          	auipc	a0,0xb
    800276d8:	02450513          	addi	a0,a0,36 # 800326f8 <__func__.0+0x310>
    800276dc:	5e9070ef          	jal	8002f4c4 <printf>
    800276e0:	00035797          	auipc	a5,0x35
    800276e4:	9317c783          	lbu	a5,-1743(a5) # 8005c011 <excpt+0x1>
    800276e8:	2c079e63          	bnez	a5,800279c4 <stateen_SE0_test_6+0x368>
    800276ec:	4529                	li	a0,10
    800276ee:	2c5060ef          	jal	8002e1b2 <putchar>
    800276f2:	00035497          	auipc	s1,0x35
    800276f6:	91f4c483          	lbu	s1,-1761(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SSTATEEN0);
    800276fa:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800276fe:	95dd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    80027702:	08c00593          	li	a1,140
    80027706:	00016617          	auipc	a2,0x16
    8002770a:	9ba60613          	addi	a2,a2,-1606 # 8003d0c0 <__func__.0+0xacd8>
    8002770e:	0000b517          	auipc	a0,0xb
    80027712:	fd250513          	addi	a0,a0,-46 # 800326e0 <__func__.0+0x2f8>
    80027716:	5af070ef          	jal	8002f4c4 <printf>
    8002771a:	00035797          	auipc	a5,0x35
    8002771e:	8f77c783          	lbu	a5,-1801(a5) # 8005c011 <excpt+0x1>
    80027722:	0000b597          	auipc	a1,0xb
    80027726:	f9658593          	addi	a1,a1,-106 # 800326b8 <__func__.0+0x2d0>
    8002772a:	e789                	bnez	a5,80027734 <stateen_SE0_test_6+0xd8>
    8002772c:	0000b597          	auipc	a1,0xb
    80027730:	f7c58593          	addi	a1,a1,-132 # 800326a8 <__func__.0+0x2c0>
    80027734:	0000b517          	auipc	a0,0xb
    80027738:	fc450513          	addi	a0,a0,-60 # 800326f8 <__func__.0+0x310>
    8002773c:	589070ef          	jal	8002f4c4 <printf>
    80027740:	00035797          	auipc	a5,0x35
    80027744:	8d17c783          	lbu	a5,-1839(a5) # 8005c011 <excpt+0x1>
    80027748:	26079363          	bnez	a5,800279ae <stateen_SE0_test_6+0x352>
    8002774c:	4529                	li	a0,10
    8002774e:	265060ef          	jal	8002e1b2 <putchar>
    80027752:	4401                	li	s0,0
    80027754:	e499                	bnez	s1,80027762 <stateen_SE0_test_6+0x106>
    80027756:	00035417          	auipc	s0,0x35
    8002775a:	8bb44403          	lbu	s0,-1861(s0) # 8005c011 <excpt+0x1>
    8002775e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80027762:	4505                	li	a0,1
    80027764:	fb0d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027768:	eb0d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    8002776c:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027770:	8ebd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027774:	08c00593          	li	a1,140
    80027778:	00016617          	auipc	a2,0x16
    8002777c:	9a060613          	addi	a2,a2,-1632 # 8003d118 <__func__.0+0xad30>
    80027780:	0000b517          	auipc	a0,0xb
    80027784:	f6050513          	addi	a0,a0,-160 # 800326e0 <__func__.0+0x2f8>
    80027788:	53d070ef          	jal	8002f4c4 <printf>
    8002778c:	00035797          	auipc	a5,0x35
    80027790:	8857c783          	lbu	a5,-1915(a5) # 8005c011 <excpt+0x1>
    80027794:	0000b597          	auipc	a1,0xb
    80027798:	f2458593          	addi	a1,a1,-220 # 800326b8 <__func__.0+0x2d0>
    8002779c:	e789                	bnez	a5,800277a6 <stateen_SE0_test_6+0x14a>
    8002779e:	0000b597          	auipc	a1,0xb
    800277a2:	f0a58593          	addi	a1,a1,-246 # 800326a8 <__func__.0+0x2c0>
    800277a6:	0000b517          	auipc	a0,0xb
    800277aa:	f5250513          	addi	a0,a0,-174 # 800326f8 <__func__.0+0x310>
    800277ae:	517070ef          	jal	8002f4c4 <printf>
    800277b2:	00035797          	auipc	a5,0x35
    800277b6:	85f7c783          	lbu	a5,-1953(a5) # 8005c011 <excpt+0x1>
    800277ba:	1c079f63          	bnez	a5,80027998 <stateen_SE0_test_6+0x33c>
    800277be:	4529                	li	a0,10
    800277c0:	1f3060ef          	jal	8002e1b2 <putchar>
    800277c4:	c419                	beqz	s0,800277d2 <stateen_SE0_test_6+0x176>
    800277c6:	00035417          	auipc	s0,0x35
    800277ca:	84b44403          	lbu	s0,-1973(s0) # 8005c011 <excpt+0x1>
    800277ce:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    800277d2:	4505                	li	a0,1
    800277d4:	f40d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800277d8:	e40d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800277dc:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800277e0:	87bd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    800277e4:	08c00593          	li	a1,140
    800277e8:	00016617          	auipc	a2,0x16
    800277ec:	98060613          	addi	a2,a2,-1664 # 8003d168 <__func__.0+0xad80>
    800277f0:	0000b517          	auipc	a0,0xb
    800277f4:	ef050513          	addi	a0,a0,-272 # 800326e0 <__func__.0+0x2f8>
    800277f8:	4cd070ef          	jal	8002f4c4 <printf>
    800277fc:	00035797          	auipc	a5,0x35
    80027800:	8157c783          	lbu	a5,-2027(a5) # 8005c011 <excpt+0x1>
    80027804:	0000b597          	auipc	a1,0xb
    80027808:	eb458593          	addi	a1,a1,-332 # 800326b8 <__func__.0+0x2d0>
    8002780c:	e789                	bnez	a5,80027816 <stateen_SE0_test_6+0x1ba>
    8002780e:	0000b597          	auipc	a1,0xb
    80027812:	e9a58593          	addi	a1,a1,-358 # 800326a8 <__func__.0+0x2c0>
    80027816:	0000b517          	auipc	a0,0xb
    8002781a:	ee250513          	addi	a0,a0,-286 # 800326f8 <__func__.0+0x310>
    8002781e:	4a7070ef          	jal	8002f4c4 <printf>
    80027822:	00034797          	auipc	a5,0x34
    80027826:	7ef7c783          	lbu	a5,2031(a5) # 8005c011 <excpt+0x1>
    8002782a:	14079c63          	bnez	a5,80027982 <stateen_SE0_test_6+0x326>
    8002782e:	4529                	li	a0,10
    80027830:	183060ef          	jal	8002e1b2 <putchar>
    80027834:	c419                	beqz	s0,80027842 <stateen_SE0_test_6+0x1e6>
    80027836:	00034417          	auipc	s0,0x34
    8002783a:	7db44403          	lbu	s0,2011(s0) # 8005c011 <excpt+0x1>
    8002783e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80027842:	4511                	li	a0,4
    80027844:	ed0d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027848:	dd0d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    8002784c:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027850:	80bd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027854:	08c00593          	li	a1,140
    80027858:	00016617          	auipc	a2,0x16
    8002785c:	96860613          	addi	a2,a2,-1688 # 8003d1c0 <__func__.0+0xadd8>
    80027860:	0000b517          	auipc	a0,0xb
    80027864:	e8050513          	addi	a0,a0,-384 # 800326e0 <__func__.0+0x2f8>
    80027868:	45d070ef          	jal	8002f4c4 <printf>
    8002786c:	00034797          	auipc	a5,0x34
    80027870:	7a57c783          	lbu	a5,1957(a5) # 8005c011 <excpt+0x1>
    80027874:	0000b597          	auipc	a1,0xb
    80027878:	e4458593          	addi	a1,a1,-444 # 800326b8 <__func__.0+0x2d0>
    8002787c:	e789                	bnez	a5,80027886 <stateen_SE0_test_6+0x22a>
    8002787e:	0000b597          	auipc	a1,0xb
    80027882:	e2a58593          	addi	a1,a1,-470 # 800326a8 <__func__.0+0x2c0>
    80027886:	0000b517          	auipc	a0,0xb
    8002788a:	e7250513          	addi	a0,a0,-398 # 800326f8 <__func__.0+0x310>
    8002788e:	437070ef          	jal	8002f4c4 <printf>
    80027892:	00034797          	auipc	a5,0x34
    80027896:	77f7c783          	lbu	a5,1919(a5) # 8005c011 <excpt+0x1>
    8002789a:	0c079963          	bnez	a5,8002796c <stateen_SE0_test_6+0x310>
    8002789e:	4529                	li	a0,10
    800278a0:	113060ef          	jal	8002e1b2 <putchar>
    800278a4:	c419                	beqz	s0,800278b2 <stateen_SE0_test_6+0x256>
    800278a6:	00034417          	auipc	s0,0x34
    800278aa:	76b44403          	lbu	s0,1899(s0) # 8005c011 <excpt+0x1>
    800278ae:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800278b2:	4511                	li	a0,4
    800278b4:	e60d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800278b8:	d60d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800278bc:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800278c0:	f9ad90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    800278c4:	08c00593          	li	a1,140
    800278c8:	00016617          	auipc	a2,0x16
    800278cc:	94860613          	addi	a2,a2,-1720 # 8003d210 <__func__.0+0xae28>
    800278d0:	0000b517          	auipc	a0,0xb
    800278d4:	e1050513          	addi	a0,a0,-496 # 800326e0 <__func__.0+0x2f8>
    800278d8:	3ed070ef          	jal	8002f4c4 <printf>
    800278dc:	00034797          	auipc	a5,0x34
    800278e0:	7357c783          	lbu	a5,1845(a5) # 8005c011 <excpt+0x1>
    800278e4:	0000b597          	auipc	a1,0xb
    800278e8:	dd458593          	addi	a1,a1,-556 # 800326b8 <__func__.0+0x2d0>
    800278ec:	e789                	bnez	a5,800278f6 <stateen_SE0_test_6+0x29a>
    800278ee:	0000b597          	auipc	a1,0xb
    800278f2:	dba58593          	addi	a1,a1,-582 # 800326a8 <__func__.0+0x2c0>
    800278f6:	0000b517          	auipc	a0,0xb
    800278fa:	e0250513          	addi	a0,a0,-510 # 800326f8 <__func__.0+0x310>
    800278fe:	3c7070ef          	jal	8002f4c4 <printf>
    80027902:	00034797          	auipc	a5,0x34
    80027906:	70f7c783          	lbu	a5,1807(a5) # 8005c011 <excpt+0x1>
    8002790a:	e7b1                	bnez	a5,80027956 <stateen_SE0_test_6+0x2fa>
    8002790c:	4529                	li	a0,10
    8002790e:	0a5060ef          	jal	8002e1b2 <putchar>
    80027912:	c411                	beqz	s0,8002791e <stateen_SE0_test_6+0x2c2>
    80027914:	00034797          	auipc	a5,0x34
    80027918:	6fd7c783          	lbu	a5,1789(a5) # 8005c011 <excpt+0x1>
    8002791c:	c79d                	beqz	a5,8002794a <stateen_SE0_test_6+0x2ee>
    8002791e:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    80027920:	0000b597          	auipc	a1,0xb
    80027924:	d9858593          	addi	a1,a1,-616 # 800326b8 <__func__.0+0x2d0>
    80027928:	0000b517          	auipc	a0,0xb
    8002792c:	e3850513          	addi	a0,a0,-456 # 80032760 <__func__.0+0x378>
    80027930:	395070ef          	jal	8002f4c4 <printf>
    80027934:	4511                	li	a0,4
    80027936:	dded90ef          	jal	80000f14 <goto_priv>
    8002793a:	e3dd90ef          	jal	80001776 <reset_state>

}
    8002793e:	60e2                	ld	ra,24(sp)
    80027940:	8522                	mv	a0,s0
    80027942:	6442                	ld	s0,16(sp)
    80027944:	64a2                	ld	s1,8(sp)
    80027946:	6105                	addi	sp,sp,32
    80027948:	8082                	ret
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002794a:	4405                	li	s0,1
    TEST_END();
    8002794c:	0000b597          	auipc	a1,0xb
    80027950:	d5c58593          	addi	a1,a1,-676 # 800326a8 <__func__.0+0x2c0>
    80027954:	bfd1                	j	80027928 <stateen_SE0_test_6+0x2cc>
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027956:	0000b517          	auipc	a0,0xb
    8002795a:	daa50513          	addi	a0,a0,-598 # 80032700 <__func__.0+0x318>
    8002795e:	367070ef          	jal	8002f4c4 <printf>
    80027962:	02900513          	li	a0,41
    80027966:	04d060ef          	jal	8002e1b2 <putchar>
    8002796a:	b74d                	j	8002790c <stateen_SE0_test_6+0x2b0>
    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002796c:	0000b517          	auipc	a0,0xb
    80027970:	d9450513          	addi	a0,a0,-620 # 80032700 <__func__.0+0x318>
    80027974:	351070ef          	jal	8002f4c4 <printf>
    80027978:	02900513          	li	a0,41
    8002797c:	037060ef          	jal	8002e1b2 <putchar>
    80027980:	bf39                	j	8002789e <stateen_SE0_test_6+0x242>
    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027982:	0000b517          	auipc	a0,0xb
    80027986:	d7e50513          	addi	a0,a0,-642 # 80032700 <__func__.0+0x318>
    8002798a:	33b070ef          	jal	8002f4c4 <printf>
    8002798e:	02900513          	li	a0,41
    80027992:	021060ef          	jal	8002e1b2 <putchar>
    80027996:	bd61                	j	8002782e <stateen_SE0_test_6+0x1d2>
    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027998:	0000b517          	auipc	a0,0xb
    8002799c:	d6850513          	addi	a0,a0,-664 # 80032700 <__func__.0+0x318>
    800279a0:	325070ef          	jal	8002f4c4 <printf>
    800279a4:	02900513          	li	a0,41
    800279a8:	00b060ef          	jal	8002e1b2 <putchar>
    800279ac:	bd09                	j	800277be <stateen_SE0_test_6+0x162>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    800279ae:	0000b517          	auipc	a0,0xb
    800279b2:	d5250513          	addi	a0,a0,-686 # 80032700 <__func__.0+0x318>
    800279b6:	30f070ef          	jal	8002f4c4 <printf>
    800279ba:	02900513          	li	a0,41
    800279be:	7f4060ef          	jal	8002e1b2 <putchar>
    800279c2:	b369                	j	8002774c <stateen_SE0_test_6+0xf0>
    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    800279c4:	0000b517          	auipc	a0,0xb
    800279c8:	d3c50513          	addi	a0,a0,-708 # 80032700 <__func__.0+0x318>
    800279cc:	2f9070ef          	jal	8002f4c4 <printf>
    800279d0:	02900513          	li	a0,41
    800279d4:	7de060ef          	jal	8002e1b2 <putchar>
    800279d8:	bb11                	j	800276ec <stateen_SE0_test_6+0x90>

00000000800279da <stateen_SE0_test_7>:


bool stateen_SE0_test_7(){
    800279da:	1101                	addi	sp,sp,-32

    TEST_START();
    800279dc:	0000a597          	auipc	a1,0xa
    800279e0:	43c58593          	addi	a1,a1,1084 # 80031e18 <__func__.1>
    800279e4:	0000b517          	auipc	a0,0xb
    800279e8:	ce450513          	addi	a0,a0,-796 # 800326c8 <__func__.0+0x2e0>
bool stateen_SE0_test_7(){
    800279ec:	ec06                	sd	ra,24(sp)
    800279ee:	e822                	sd	s0,16(sp)
    800279f0:	e426                	sd	s1,8(sp)
    TEST_START();
    800279f2:	2d3070ef          	jal	8002f4c4 <printf>
    800279f6:	4529                	li	a0,10
    800279f8:	7ba060ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    800279fc:	4511                	li	a0,4
    800279fe:	d16d90ef          	jal	80000f14 <goto_priv>
    //当mstateen.SE0=1 hstateen.SE0=1,v=1 时可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027a02:	57fd                	li	a5,-1
    80027a04:	17fe                	slli	a5,a5,0x3f
    80027a06:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80027a0a:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    80027a0e:	4509                	li	a0,2
    80027a10:	d04d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027a14:	c04d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027a18:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027a1c:	e3ed90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a20:	08c00593          	li	a1,140
    80027a24:	00016617          	auipc	a2,0x16
    80027a28:	83c60613          	addi	a2,a2,-1988 # 8003d260 <__func__.0+0xae78>
    80027a2c:	0000b517          	auipc	a0,0xb
    80027a30:	cb450513          	addi	a0,a0,-844 # 800326e0 <__func__.0+0x2f8>
    80027a34:	291070ef          	jal	8002f4c4 <printf>
    80027a38:	00034797          	auipc	a5,0x34
    80027a3c:	5d97c783          	lbu	a5,1497(a5) # 8005c011 <excpt+0x1>
    80027a40:	0000b597          	auipc	a1,0xb
    80027a44:	c6858593          	addi	a1,a1,-920 # 800326a8 <__func__.0+0x2c0>
    80027a48:	c789                	beqz	a5,80027a52 <stateen_SE0_test_7+0x78>
    80027a4a:	0000b597          	auipc	a1,0xb
    80027a4e:	c6e58593          	addi	a1,a1,-914 # 800326b8 <__func__.0+0x2d0>
    80027a52:	0000b517          	auipc	a0,0xb
    80027a56:	ca650513          	addi	a0,a0,-858 # 800326f8 <__func__.0+0x310>
    80027a5a:	26b070ef          	jal	8002f4c4 <printf>
    80027a5e:	00034797          	auipc	a5,0x34
    80027a62:	5b37c783          	lbu	a5,1459(a5) # 8005c011 <excpt+0x1>
    80027a66:	1c079d63          	bnez	a5,80027c40 <stateen_SE0_test_7+0x266>
    80027a6a:	4529                	li	a0,10
    80027a6c:	746060ef          	jal	8002e1b2 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80027a70:	4509                	li	a0,2
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a72:	00034497          	auipc	s1,0x34
    80027a76:	59f4c483          	lbu	s1,1439(s1) # 8005c011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80027a7a:	c9ad90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027a7e:	b9ad90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027a82:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027a86:	dd4d90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a8a:	08c00593          	li	a1,140
    80027a8e:	00016617          	auipc	a2,0x16
    80027a92:	82260613          	addi	a2,a2,-2014 # 8003d2b0 <__func__.0+0xaec8>
    80027a96:	0000b517          	auipc	a0,0xb
    80027a9a:	c4a50513          	addi	a0,a0,-950 # 800326e0 <__func__.0+0x2f8>
    80027a9e:	227070ef          	jal	8002f4c4 <printf>
    80027aa2:	00034797          	auipc	a5,0x34
    80027aa6:	56f7c783          	lbu	a5,1391(a5) # 8005c011 <excpt+0x1>
    80027aaa:	0000b597          	auipc	a1,0xb
    80027aae:	c0e58593          	addi	a1,a1,-1010 # 800326b8 <__func__.0+0x2d0>
    80027ab2:	e789                	bnez	a5,80027abc <stateen_SE0_test_7+0xe2>
    80027ab4:	0000b597          	auipc	a1,0xb
    80027ab8:	bf458593          	addi	a1,a1,-1036 # 800326a8 <__func__.0+0x2c0>
    80027abc:	0000b517          	auipc	a0,0xb
    80027ac0:	c3c50513          	addi	a0,a0,-964 # 800326f8 <__func__.0+0x310>
    80027ac4:	201070ef          	jal	8002f4c4 <printf>
    80027ac8:	00034797          	auipc	a5,0x34
    80027acc:	5497c783          	lbu	a5,1353(a5) # 8005c011 <excpt+0x1>
    80027ad0:	14079d63          	bnez	a5,80027c2a <stateen_SE0_test_7+0x250>
    80027ad4:	4529                	li	a0,10
    80027ad6:	6dc060ef          	jal	8002e1b2 <putchar>
    80027ada:	4401                	li	s0,0
    80027adc:	e499                	bnez	s1,80027aea <stateen_SE0_test_7+0x110>
    80027ade:	00034417          	auipc	s0,0x34
    80027ae2:	53344403          	lbu	s0,1331(s0) # 8005c011 <excpt+0x1>
    80027ae6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80027aea:	4501                	li	a0,0
    80027aec:	c28d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027af0:	b28d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027af4:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027af8:	d62d90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027afc:	08c00593          	li	a1,140
    80027b00:	00016617          	auipc	a2,0x16
    80027b04:	80860613          	addi	a2,a2,-2040 # 8003d308 <__func__.0+0xaf20>
    80027b08:	0000b517          	auipc	a0,0xb
    80027b0c:	bd850513          	addi	a0,a0,-1064 # 800326e0 <__func__.0+0x2f8>
    80027b10:	1b5070ef          	jal	8002f4c4 <printf>
    80027b14:	00034797          	auipc	a5,0x34
    80027b18:	4fd7c783          	lbu	a5,1277(a5) # 8005c011 <excpt+0x1>
    80027b1c:	0000b597          	auipc	a1,0xb
    80027b20:	b9c58593          	addi	a1,a1,-1124 # 800326b8 <__func__.0+0x2d0>
    80027b24:	e789                	bnez	a5,80027b2e <stateen_SE0_test_7+0x154>
    80027b26:	0000b597          	auipc	a1,0xb
    80027b2a:	b8258593          	addi	a1,a1,-1150 # 800326a8 <__func__.0+0x2c0>
    80027b2e:	0000b517          	auipc	a0,0xb
    80027b32:	bca50513          	addi	a0,a0,-1078 # 800326f8 <__func__.0+0x310>
    80027b36:	18f070ef          	jal	8002f4c4 <printf>
    80027b3a:	00034797          	auipc	a5,0x34
    80027b3e:	4d77c783          	lbu	a5,1239(a5) # 8005c011 <excpt+0x1>
    80027b42:	0c079963          	bnez	a5,80027c14 <stateen_SE0_test_7+0x23a>
    80027b46:	4529                	li	a0,10
    80027b48:	66a060ef          	jal	8002e1b2 <putchar>
    80027b4c:	c419                	beqz	s0,80027b5a <stateen_SE0_test_7+0x180>
    80027b4e:	00034417          	auipc	s0,0x34
    80027b52:	4c344403          	lbu	s0,1219(s0) # 8005c011 <excpt+0x1>
    80027b56:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80027b5a:	4501                	li	a0,0
    80027b5c:	bb8d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027b60:	ab8d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027b64:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027b68:	cf2d90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027b6c:	08c00593          	li	a1,140
    80027b70:	00015617          	auipc	a2,0x15
    80027b74:	7e860613          	addi	a2,a2,2024 # 8003d358 <__func__.0+0xaf70>
    80027b78:	0000b517          	auipc	a0,0xb
    80027b7c:	b6850513          	addi	a0,a0,-1176 # 800326e0 <__func__.0+0x2f8>
    80027b80:	145070ef          	jal	8002f4c4 <printf>
    80027b84:	00034797          	auipc	a5,0x34
    80027b88:	48d7c783          	lbu	a5,1165(a5) # 8005c011 <excpt+0x1>
    80027b8c:	0000b597          	auipc	a1,0xb
    80027b90:	b2c58593          	addi	a1,a1,-1236 # 800326b8 <__func__.0+0x2d0>
    80027b94:	e789                	bnez	a5,80027b9e <stateen_SE0_test_7+0x1c4>
    80027b96:	0000b597          	auipc	a1,0xb
    80027b9a:	b1258593          	addi	a1,a1,-1262 # 800326a8 <__func__.0+0x2c0>
    80027b9e:	0000b517          	auipc	a0,0xb
    80027ba2:	b5a50513          	addi	a0,a0,-1190 # 800326f8 <__func__.0+0x310>
    80027ba6:	11f070ef          	jal	8002f4c4 <printf>
    80027baa:	00034797          	auipc	a5,0x34
    80027bae:	4677c783          	lbu	a5,1127(a5) # 8005c011 <excpt+0x1>
    80027bb2:	e7b1                	bnez	a5,80027bfe <stateen_SE0_test_7+0x224>
    80027bb4:	4529                	li	a0,10
    80027bb6:	5fc060ef          	jal	8002e1b2 <putchar>
    80027bba:	c411                	beqz	s0,80027bc6 <stateen_SE0_test_7+0x1ec>
    80027bbc:	00034797          	auipc	a5,0x34
    80027bc0:	4557c783          	lbu	a5,1109(a5) # 8005c011 <excpt+0x1>
    80027bc4:	c79d                	beqz	a5,80027bf2 <stateen_SE0_test_7+0x218>
    80027bc6:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80027bc8:	0000b597          	auipc	a1,0xb
    80027bcc:	af058593          	addi	a1,a1,-1296 # 800326b8 <__func__.0+0x2d0>
    80027bd0:	0000b517          	auipc	a0,0xb
    80027bd4:	b9050513          	addi	a0,a0,-1136 # 80032760 <__func__.0+0x378>
    80027bd8:	0ed070ef          	jal	8002f4c4 <printf>
    80027bdc:	4511                	li	a0,4
    80027bde:	b36d90ef          	jal	80000f14 <goto_priv>
    80027be2:	b95d90ef          	jal	80001776 <reset_state>
}
    80027be6:	60e2                	ld	ra,24(sp)
    80027be8:	8522                	mv	a0,s0
    80027bea:	6442                	ld	s0,16(sp)
    80027bec:	64a2                	ld	s1,8(sp)
    80027bee:	6105                	addi	sp,sp,32
    80027bf0:	8082                	ret
    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027bf2:	4405                	li	s0,1
    TEST_END();
    80027bf4:	0000b597          	auipc	a1,0xb
    80027bf8:	ab458593          	addi	a1,a1,-1356 # 800326a8 <__func__.0+0x2c0>
    80027bfc:	bfd1                	j	80027bd0 <stateen_SE0_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027bfe:	0000b517          	auipc	a0,0xb
    80027c02:	b0250513          	addi	a0,a0,-1278 # 80032700 <__func__.0+0x318>
    80027c06:	0bf070ef          	jal	8002f4c4 <printf>
    80027c0a:	02900513          	li	a0,41
    80027c0e:	5a4060ef          	jal	8002e1b2 <putchar>
    80027c12:	b74d                	j	80027bb4 <stateen_SE0_test_7+0x1da>
    TEST_ASSERT("vu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027c14:	0000b517          	auipc	a0,0xb
    80027c18:	aec50513          	addi	a0,a0,-1300 # 80032700 <__func__.0+0x318>
    80027c1c:	0a9070ef          	jal	8002f4c4 <printf>
    80027c20:	02900513          	li	a0,41
    80027c24:	58e060ef          	jal	8002e1b2 <putchar>
    80027c28:	bf39                	j	80027b46 <stateen_SE0_test_7+0x16c>
    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027c2a:	0000b517          	auipc	a0,0xb
    80027c2e:	ad650513          	addi	a0,a0,-1322 # 80032700 <__func__.0+0x318>
    80027c32:	093070ef          	jal	8002f4c4 <printf>
    80027c36:	02900513          	li	a0,41
    80027c3a:	578060ef          	jal	8002e1b2 <putchar>
    80027c3e:	bd59                	j	80027ad4 <stateen_SE0_test_7+0xfa>
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027c40:	0000b517          	auipc	a0,0xb
    80027c44:	ac050513          	addi	a0,a0,-1344 # 80032700 <__func__.0+0x318>
    80027c48:	07d070ef          	jal	8002f4c4 <printf>
    80027c4c:	02900513          	li	a0,41
    80027c50:	562060ef          	jal	8002e1b2 <putchar>
    80027c54:	bd19                	j	80027a6a <stateen_SE0_test_7+0x90>

0000000080027c56 <stateen_SE0_test_8>:




bool stateen_SE0_test_8(){
    80027c56:	1101                	addi	sp,sp,-32

    TEST_START();
    80027c58:	0000a597          	auipc	a1,0xa
    80027c5c:	1d858593          	addi	a1,a1,472 # 80031e30 <__func__.0>
    80027c60:	0000b517          	auipc	a0,0xb
    80027c64:	a6850513          	addi	a0,a0,-1432 # 800326c8 <__func__.0+0x2e0>
bool stateen_SE0_test_8(){
    80027c68:	ec06                	sd	ra,24(sp)
    80027c6a:	e822                	sd	s0,16(sp)
    80027c6c:	e426                	sd	s1,8(sp)
    TEST_START();
    80027c6e:	057070ef          	jal	8002f4c4 <printf>
    80027c72:	4529                	li	a0,10
    80027c74:	53e060ef          	jal	8002e1b2 <putchar>
    
    goto_priv(PRIV_M);
    80027c78:	4511                	li	a0,4
    80027c7a:	a9ad90ef          	jal	80000f14 <goto_priv>
    //当mstateen.SE0=1,v=0时,可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027c7e:	57fd                	li	a5,-1
    80027c80:	17fe                	slli	a5,a5,0x3f
    80027c82:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80027c86:	60c7a073          	csrs	hstateen0,a5
    CSRS(CSR_SSTATEEN0 , MSTATEEN_SE0);
    80027c8a:	10c7a073          	csrs	sstateen0,a5

    goto_priv(PRIV_HS);
    80027c8e:	450d                	li	a0,3
    80027c90:	a84d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027c94:	984d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027c98:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027c9c:	bbed90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80027ca0:	08c00593          	li	a1,140
    80027ca4:	00015617          	auipc	a2,0x15
    80027ca8:	70c60613          	addi	a2,a2,1804 # 8003d3b0 <__func__.0+0xafc8>
    80027cac:	0000b517          	auipc	a0,0xb
    80027cb0:	a3450513          	addi	a0,a0,-1484 # 800326e0 <__func__.0+0x2f8>
    80027cb4:	011070ef          	jal	8002f4c4 <printf>
    80027cb8:	00034797          	auipc	a5,0x34
    80027cbc:	3597c783          	lbu	a5,857(a5) # 8005c011 <excpt+0x1>
    80027cc0:	0000b597          	auipc	a1,0xb
    80027cc4:	9e858593          	addi	a1,a1,-1560 # 800326a8 <__func__.0+0x2c0>
    80027cc8:	c789                	beqz	a5,80027cd2 <stateen_SE0_test_8+0x7c>
    80027cca:	0000b597          	auipc	a1,0xb
    80027cce:	9ee58593          	addi	a1,a1,-1554 # 800326b8 <__func__.0+0x2d0>
    80027cd2:	0000b517          	auipc	a0,0xb
    80027cd6:	a2650513          	addi	a0,a0,-1498 # 800326f8 <__func__.0+0x310>
    80027cda:	7ea070ef          	jal	8002f4c4 <printf>
    80027cde:	00034797          	auipc	a5,0x34
    80027ce2:	3337c783          	lbu	a5,819(a5) # 8005c011 <excpt+0x1>
    80027ce6:	4e079a63          	bnez	a5,800281da <stateen_SE0_test_8+0x584>
    80027cea:	4529                	li	a0,10
    80027cec:	4c6060ef          	jal	8002e1b2 <putchar>
    80027cf0:	00034497          	auipc	s1,0x34
    80027cf4:	3214c483          	lbu	s1,801(s1) # 8005c011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SSTATEEN0);
    80027cf8:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027cfc:	b5ed90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80027d00:	08c00593          	li	a1,140
    80027d04:	00015617          	auipc	a2,0x15
    80027d08:	70460613          	addi	a2,a2,1796 # 8003d408 <__func__.0+0xb020>
    80027d0c:	0000b517          	auipc	a0,0xb
    80027d10:	9d450513          	addi	a0,a0,-1580 # 800326e0 <__func__.0+0x2f8>
    80027d14:	7b0070ef          	jal	8002f4c4 <printf>
    80027d18:	00034797          	auipc	a5,0x34
    80027d1c:	2f97c783          	lbu	a5,761(a5) # 8005c011 <excpt+0x1>
    80027d20:	0000b597          	auipc	a1,0xb
    80027d24:	99858593          	addi	a1,a1,-1640 # 800326b8 <__func__.0+0x2d0>
    80027d28:	e789                	bnez	a5,80027d32 <stateen_SE0_test_8+0xdc>
    80027d2a:	0000b597          	auipc	a1,0xb
    80027d2e:	97e58593          	addi	a1,a1,-1666 # 800326a8 <__func__.0+0x2c0>
    80027d32:	0000b517          	auipc	a0,0xb
    80027d36:	9c650513          	addi	a0,a0,-1594 # 800326f8 <__func__.0+0x310>
    80027d3a:	78a070ef          	jal	8002f4c4 <printf>
    80027d3e:	00034797          	auipc	a5,0x34
    80027d42:	2d37c783          	lbu	a5,723(a5) # 8005c011 <excpt+0x1>
    80027d46:	46079f63          	bnez	a5,800281c4 <stateen_SE0_test_8+0x56e>
    80027d4a:	4529                	li	a0,10
    80027d4c:	466060ef          	jal	8002e1b2 <putchar>
    80027d50:	4401                	li	s0,0
    80027d52:	e499                	bnez	s1,80027d60 <stateen_SE0_test_8+0x10a>
    80027d54:	00034417          	auipc	s0,0x34
    80027d58:	2bd44403          	lbu	s0,701(s0) # 8005c011 <excpt+0x1>
    80027d5c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80027d60:	4505                	li	a0,1
    80027d62:	9b2d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027d66:	8b2d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027d6a:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027d6e:	aecd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027d72:	08c00593          	li	a1,140
    80027d76:	00015617          	auipc	a2,0x15
    80027d7a:	6ea60613          	addi	a2,a2,1770 # 8003d460 <__func__.0+0xb078>
    80027d7e:	0000b517          	auipc	a0,0xb
    80027d82:	96250513          	addi	a0,a0,-1694 # 800326e0 <__func__.0+0x2f8>
    80027d86:	73e070ef          	jal	8002f4c4 <printf>
    80027d8a:	00034797          	auipc	a5,0x34
    80027d8e:	2877c783          	lbu	a5,647(a5) # 8005c011 <excpt+0x1>
    80027d92:	0000b597          	auipc	a1,0xb
    80027d96:	92658593          	addi	a1,a1,-1754 # 800326b8 <__func__.0+0x2d0>
    80027d9a:	e789                	bnez	a5,80027da4 <stateen_SE0_test_8+0x14e>
    80027d9c:	0000b597          	auipc	a1,0xb
    80027da0:	90c58593          	addi	a1,a1,-1780 # 800326a8 <__func__.0+0x2c0>
    80027da4:	0000b517          	auipc	a0,0xb
    80027da8:	95450513          	addi	a0,a0,-1708 # 800326f8 <__func__.0+0x310>
    80027dac:	718070ef          	jal	8002f4c4 <printf>
    80027db0:	00034797          	auipc	a5,0x34
    80027db4:	2617c783          	lbu	a5,609(a5) # 8005c011 <excpt+0x1>
    80027db8:	3e079b63          	bnez	a5,800281ae <stateen_SE0_test_8+0x558>
    80027dbc:	4529                	li	a0,10
    80027dbe:	3f4060ef          	jal	8002e1b2 <putchar>
    80027dc2:	c419                	beqz	s0,80027dd0 <stateen_SE0_test_8+0x17a>
    80027dc4:	00034417          	auipc	s0,0x34
    80027dc8:	24d44403          	lbu	s0,589(s0) # 8005c011 <excpt+0x1>
    80027dcc:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80027dd0:	4505                	li	a0,1
    80027dd2:	942d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027dd6:	842d90ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027dda:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027dde:	a7cd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027de2:	08c00593          	li	a1,140
    80027de6:	00015617          	auipc	a2,0x15
    80027dea:	6ca60613          	addi	a2,a2,1738 # 8003d4b0 <__func__.0+0xb0c8>
    80027dee:	0000b517          	auipc	a0,0xb
    80027df2:	8f250513          	addi	a0,a0,-1806 # 800326e0 <__func__.0+0x2f8>
    80027df6:	6ce070ef          	jal	8002f4c4 <printf>
    80027dfa:	00034797          	auipc	a5,0x34
    80027dfe:	2177c783          	lbu	a5,535(a5) # 8005c011 <excpt+0x1>
    80027e02:	0000b597          	auipc	a1,0xb
    80027e06:	8b658593          	addi	a1,a1,-1866 # 800326b8 <__func__.0+0x2d0>
    80027e0a:	e789                	bnez	a5,80027e14 <stateen_SE0_test_8+0x1be>
    80027e0c:	0000b597          	auipc	a1,0xb
    80027e10:	89c58593          	addi	a1,a1,-1892 # 800326a8 <__func__.0+0x2c0>
    80027e14:	0000b517          	auipc	a0,0xb
    80027e18:	8e450513          	addi	a0,a0,-1820 # 800326f8 <__func__.0+0x310>
    80027e1c:	6a8070ef          	jal	8002f4c4 <printf>
    80027e20:	00034797          	auipc	a5,0x34
    80027e24:	1f17c783          	lbu	a5,497(a5) # 8005c011 <excpt+0x1>
    80027e28:	36079863          	bnez	a5,80028198 <stateen_SE0_test_8+0x542>
    80027e2c:	4529                	li	a0,10
    80027e2e:	384060ef          	jal	8002e1b2 <putchar>
    80027e32:	c419                	beqz	s0,80027e40 <stateen_SE0_test_8+0x1ea>
    80027e34:	00034417          	auipc	s0,0x34
    80027e38:	1dd44403          	lbu	s0,477(s0) # 8005c011 <excpt+0x1>
    80027e3c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80027e40:	4511                	li	a0,4
    80027e42:	8d2d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027e46:	fd3d80ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027e4a:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027e4e:	a0cd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027e52:	08c00593          	li	a1,140
    80027e56:	00015617          	auipc	a2,0x15
    80027e5a:	6b260613          	addi	a2,a2,1714 # 8003d508 <__func__.0+0xb120>
    80027e5e:	0000b517          	auipc	a0,0xb
    80027e62:	88250513          	addi	a0,a0,-1918 # 800326e0 <__func__.0+0x2f8>
    80027e66:	65e070ef          	jal	8002f4c4 <printf>
    80027e6a:	00034797          	auipc	a5,0x34
    80027e6e:	1a77c783          	lbu	a5,423(a5) # 8005c011 <excpt+0x1>
    80027e72:	0000b597          	auipc	a1,0xb
    80027e76:	84658593          	addi	a1,a1,-1978 # 800326b8 <__func__.0+0x2d0>
    80027e7a:	e789                	bnez	a5,80027e84 <stateen_SE0_test_8+0x22e>
    80027e7c:	0000b597          	auipc	a1,0xb
    80027e80:	82c58593          	addi	a1,a1,-2004 # 800326a8 <__func__.0+0x2c0>
    80027e84:	0000b517          	auipc	a0,0xb
    80027e88:	87450513          	addi	a0,a0,-1932 # 800326f8 <__func__.0+0x310>
    80027e8c:	638070ef          	jal	8002f4c4 <printf>
    80027e90:	00034797          	auipc	a5,0x34
    80027e94:	1817c783          	lbu	a5,385(a5) # 8005c011 <excpt+0x1>
    80027e98:	2e079563          	bnez	a5,80028182 <stateen_SE0_test_8+0x52c>
    80027e9c:	4529                	li	a0,10
    80027e9e:	314060ef          	jal	8002e1b2 <putchar>
    80027ea2:	c419                	beqz	s0,80027eb0 <stateen_SE0_test_8+0x25a>
    80027ea4:	00034417          	auipc	s0,0x34
    80027ea8:	16d44403          	lbu	s0,365(s0) # 8005c011 <excpt+0x1>
    80027eac:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80027eb0:	4511                	li	a0,4
    80027eb2:	862d90ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027eb6:	f63d80ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027eba:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027ebe:	99cd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ec2:	08c00593          	li	a1,140
    80027ec6:	00015617          	auipc	a2,0x15
    80027eca:	69260613          	addi	a2,a2,1682 # 8003d558 <__func__.0+0xb170>
    80027ece:	0000b517          	auipc	a0,0xb
    80027ed2:	81250513          	addi	a0,a0,-2030 # 800326e0 <__func__.0+0x2f8>
    80027ed6:	5ee070ef          	jal	8002f4c4 <printf>
    80027eda:	00034797          	auipc	a5,0x34
    80027ede:	1377c783          	lbu	a5,311(a5) # 8005c011 <excpt+0x1>
    80027ee2:	0000a597          	auipc	a1,0xa
    80027ee6:	7d658593          	addi	a1,a1,2006 # 800326b8 <__func__.0+0x2d0>
    80027eea:	e789                	bnez	a5,80027ef4 <stateen_SE0_test_8+0x29e>
    80027eec:	0000a597          	auipc	a1,0xa
    80027ef0:	7bc58593          	addi	a1,a1,1980 # 800326a8 <__func__.0+0x2c0>
    80027ef4:	0000b517          	auipc	a0,0xb
    80027ef8:	80450513          	addi	a0,a0,-2044 # 800326f8 <__func__.0+0x310>
    80027efc:	5c8070ef          	jal	8002f4c4 <printf>
    80027f00:	00034797          	auipc	a5,0x34
    80027f04:	1117c783          	lbu	a5,273(a5) # 8005c011 <excpt+0x1>
    80027f08:	26079263          	bnez	a5,8002816c <stateen_SE0_test_8+0x516>
    80027f0c:	4529                	li	a0,10
    80027f0e:	2a4060ef          	jal	8002e1b2 <putchar>
    80027f12:	c419                	beqz	s0,80027f20 <stateen_SE0_test_8+0x2ca>
    80027f14:	00034417          	auipc	s0,0x34
    80027f18:	0fd44403          	lbu	s0,253(s0) # 8005c011 <excpt+0x1>
    80027f1c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VS);
    80027f20:	4509                	li	a0,2
    80027f22:	ff3d80ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027f26:	ef3d80ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027f2a:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027f2e:	92cd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027f32:	08c00593          	li	a1,140
    80027f36:	00015617          	auipc	a2,0x15
    80027f3a:	32a60613          	addi	a2,a2,810 # 8003d260 <__func__.0+0xae78>
    80027f3e:	0000a517          	auipc	a0,0xa
    80027f42:	7a250513          	addi	a0,a0,1954 # 800326e0 <__func__.0+0x2f8>
    80027f46:	57e070ef          	jal	8002f4c4 <printf>
    80027f4a:	00034797          	auipc	a5,0x34
    80027f4e:	0c77c783          	lbu	a5,199(a5) # 8005c011 <excpt+0x1>
    80027f52:	0000a597          	auipc	a1,0xa
    80027f56:	76658593          	addi	a1,a1,1894 # 800326b8 <__func__.0+0x2d0>
    80027f5a:	e789                	bnez	a5,80027f64 <stateen_SE0_test_8+0x30e>
    80027f5c:	0000a597          	auipc	a1,0xa
    80027f60:	74c58593          	addi	a1,a1,1868 # 800326a8 <__func__.0+0x2c0>
    80027f64:	0000a517          	auipc	a0,0xa
    80027f68:	79450513          	addi	a0,a0,1940 # 800326f8 <__func__.0+0x310>
    80027f6c:	558070ef          	jal	8002f4c4 <printf>
    80027f70:	00034797          	auipc	a5,0x34
    80027f74:	0a17c783          	lbu	a5,161(a5) # 8005c011 <excpt+0x1>
    80027f78:	1c079f63          	bnez	a5,80028156 <stateen_SE0_test_8+0x500>
    80027f7c:	4529                	li	a0,10
    80027f7e:	234060ef          	jal	8002e1b2 <putchar>
    80027f82:	c419                	beqz	s0,80027f90 <stateen_SE0_test_8+0x33a>
    80027f84:	00034417          	auipc	s0,0x34
    80027f88:	08d44403          	lbu	s0,141(s0) # 8005c011 <excpt+0x1>
    80027f8c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80027f90:	4509                	li	a0,2
    80027f92:	f83d80ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027f96:	e83d80ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027f9a:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027f9e:	8bcd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027fa2:	08c00593          	li	a1,140
    80027fa6:	00015617          	auipc	a2,0x15
    80027faa:	30a60613          	addi	a2,a2,778 # 8003d2b0 <__func__.0+0xaec8>
    80027fae:	0000a517          	auipc	a0,0xa
    80027fb2:	73250513          	addi	a0,a0,1842 # 800326e0 <__func__.0+0x2f8>
    80027fb6:	50e070ef          	jal	8002f4c4 <printf>
    80027fba:	00034797          	auipc	a5,0x34
    80027fbe:	0577c783          	lbu	a5,87(a5) # 8005c011 <excpt+0x1>
    80027fc2:	0000a597          	auipc	a1,0xa
    80027fc6:	6f658593          	addi	a1,a1,1782 # 800326b8 <__func__.0+0x2d0>
    80027fca:	e789                	bnez	a5,80027fd4 <stateen_SE0_test_8+0x37e>
    80027fcc:	0000a597          	auipc	a1,0xa
    80027fd0:	6dc58593          	addi	a1,a1,1756 # 800326a8 <__func__.0+0x2c0>
    80027fd4:	0000a517          	auipc	a0,0xa
    80027fd8:	72450513          	addi	a0,a0,1828 # 800326f8 <__func__.0+0x310>
    80027fdc:	4e8070ef          	jal	8002f4c4 <printf>
    80027fe0:	00034797          	auipc	a5,0x34
    80027fe4:	0317c783          	lbu	a5,49(a5) # 8005c011 <excpt+0x1>
    80027fe8:	14079c63          	bnez	a5,80028140 <stateen_SE0_test_8+0x4ea>
    80027fec:	4529                	li	a0,10
    80027fee:	1c4060ef          	jal	8002e1b2 <putchar>
    80027ff2:	c419                	beqz	s0,80028000 <stateen_SE0_test_8+0x3aa>
    80027ff4:	00034417          	auipc	s0,0x34
    80027ff8:	01d44403          	lbu	s0,29(s0) # 8005c011 <excpt+0x1>
    80027ffc:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    80028000:	450d                	li	a0,3
    80028002:	f13d80ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80028006:	e13d80ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    8002800a:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    8002800e:	84cd90ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028012:	08c00593          	li	a1,140
    80028016:	00015617          	auipc	a2,0x15
    8002801a:	59260613          	addi	a2,a2,1426 # 8003d5a8 <__func__.0+0xb1c0>
    8002801e:	0000a517          	auipc	a0,0xa
    80028022:	6c250513          	addi	a0,a0,1730 # 800326e0 <__func__.0+0x2f8>
    80028026:	49e070ef          	jal	8002f4c4 <printf>
    8002802a:	00034797          	auipc	a5,0x34
    8002802e:	fe77c783          	lbu	a5,-25(a5) # 8005c011 <excpt+0x1>
    80028032:	0000a597          	auipc	a1,0xa
    80028036:	68658593          	addi	a1,a1,1670 # 800326b8 <__func__.0+0x2d0>
    8002803a:	e789                	bnez	a5,80028044 <stateen_SE0_test_8+0x3ee>
    8002803c:	0000a597          	auipc	a1,0xa
    80028040:	66c58593          	addi	a1,a1,1644 # 800326a8 <__func__.0+0x2c0>
    80028044:	0000a517          	auipc	a0,0xa
    80028048:	6b450513          	addi	a0,a0,1716 # 800326f8 <__func__.0+0x310>
    8002804c:	478070ef          	jal	8002f4c4 <printf>
    80028050:	00034797          	auipc	a5,0x34
    80028054:	fc17c783          	lbu	a5,-63(a5) # 8005c011 <excpt+0x1>
    80028058:	0c079963          	bnez	a5,8002812a <stateen_SE0_test_8+0x4d4>
    8002805c:	4529                	li	a0,10
    8002805e:	154060ef          	jal	8002e1b2 <putchar>
    80028062:	c419                	beqz	s0,80028070 <stateen_SE0_test_8+0x41a>
    80028064:	00034417          	auipc	s0,0x34
    80028068:	fad44403          	lbu	s0,-83(s0) # 8005c011 <excpt+0x1>
    8002806c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HS);
    80028070:	450d                	li	a0,3
    80028072:	ea3d80ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80028076:	da3d80ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    8002807a:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    8002807e:	fddd80ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028082:	08c00593          	li	a1,140
    80028086:	00015617          	auipc	a2,0x15
    8002808a:	57260613          	addi	a2,a2,1394 # 8003d5f8 <__func__.0+0xb210>
    8002808e:	0000a517          	auipc	a0,0xa
    80028092:	65250513          	addi	a0,a0,1618 # 800326e0 <__func__.0+0x2f8>
    80028096:	42e070ef          	jal	8002f4c4 <printf>
    8002809a:	00034797          	auipc	a5,0x34
    8002809e:	f777c783          	lbu	a5,-137(a5) # 8005c011 <excpt+0x1>
    800280a2:	0000a597          	auipc	a1,0xa
    800280a6:	61658593          	addi	a1,a1,1558 # 800326b8 <__func__.0+0x2d0>
    800280aa:	e789                	bnez	a5,800280b4 <stateen_SE0_test_8+0x45e>
    800280ac:	0000a597          	auipc	a1,0xa
    800280b0:	5fc58593          	addi	a1,a1,1532 # 800326a8 <__func__.0+0x2c0>
    800280b4:	0000a517          	auipc	a0,0xa
    800280b8:	64450513          	addi	a0,a0,1604 # 800326f8 <__func__.0+0x310>
    800280bc:	408070ef          	jal	8002f4c4 <printf>
    800280c0:	00034797          	auipc	a5,0x34
    800280c4:	f517c783          	lbu	a5,-175(a5) # 8005c011 <excpt+0x1>
    800280c8:	e7b1                	bnez	a5,80028114 <stateen_SE0_test_8+0x4be>
    800280ca:	4529                	li	a0,10
    800280cc:	0e6060ef          	jal	8002e1b2 <putchar>
    800280d0:	c411                	beqz	s0,800280dc <stateen_SE0_test_8+0x486>
    800280d2:	00034797          	auipc	a5,0x34
    800280d6:	f3f7c783          	lbu	a5,-193(a5) # 8005c011 <excpt+0x1>
    800280da:	c79d                	beqz	a5,80028108 <stateen_SE0_test_8+0x4b2>
    800280dc:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    800280de:	0000a597          	auipc	a1,0xa
    800280e2:	5da58593          	addi	a1,a1,1498 # 800326b8 <__func__.0+0x2d0>
    800280e6:	0000a517          	auipc	a0,0xa
    800280ea:	67a50513          	addi	a0,a0,1658 # 80032760 <__func__.0+0x378>
    800280ee:	3d6070ef          	jal	8002f4c4 <printf>
    800280f2:	4511                	li	a0,4
    800280f4:	e21d80ef          	jal	80000f14 <goto_priv>
    800280f8:	e7ed90ef          	jal	80001776 <reset_state>

    800280fc:	60e2                	ld	ra,24(sp)
    800280fe:	8522                	mv	a0,s0
    80028100:	6442                	ld	s0,16(sp)
    80028102:	64a2                	ld	s1,8(sp)
    80028104:	6105                	addi	sp,sp,32
    80028106:	8082                	ret
    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028108:	4405                	li	s0,1
    TEST_END();
    8002810a:	0000a597          	auipc	a1,0xa
    8002810e:	59e58593          	addi	a1,a1,1438 # 800326a8 <__func__.0+0x2c0>
    80028112:	bfd1                	j	800280e6 <stateen_SE0_test_8+0x490>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028114:	0000a517          	auipc	a0,0xa
    80028118:	5ec50513          	addi	a0,a0,1516 # 80032700 <__func__.0+0x318>
    8002811c:	3a8070ef          	jal	8002f4c4 <printf>
    80028120:	02900513          	li	a0,41
    80028124:	08e060ef          	jal	8002e1b2 <putchar>
    80028128:	b74d                	j	800280ca <stateen_SE0_test_8+0x474>
    TEST_ASSERT("hs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002812a:	0000a517          	auipc	a0,0xa
    8002812e:	5d650513          	addi	a0,a0,1494 # 80032700 <__func__.0+0x318>
    80028132:	392070ef          	jal	8002f4c4 <printf>
    80028136:	02900513          	li	a0,41
    8002813a:	078060ef          	jal	8002e1b2 <putchar>
    8002813e:	bf39                	j	8002805c <stateen_SE0_test_8+0x406>
    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028140:	0000a517          	auipc	a0,0xa
    80028144:	5c050513          	addi	a0,a0,1472 # 80032700 <__func__.0+0x318>
    80028148:	37c070ef          	jal	8002f4c4 <printf>
    8002814c:	02900513          	li	a0,41
    80028150:	062060ef          	jal	8002e1b2 <putchar>
    80028154:	bd61                	j	80027fec <stateen_SE0_test_8+0x396>
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028156:	0000a517          	auipc	a0,0xa
    8002815a:	5aa50513          	addi	a0,a0,1450 # 80032700 <__func__.0+0x318>
    8002815e:	366070ef          	jal	8002f4c4 <printf>
    80028162:	02900513          	li	a0,41
    80028166:	04c060ef          	jal	8002e1b2 <putchar>
    8002816a:	bd09                	j	80027f7c <stateen_SE0_test_8+0x326>
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002816c:	0000a517          	auipc	a0,0xa
    80028170:	59450513          	addi	a0,a0,1428 # 80032700 <__func__.0+0x318>
    80028174:	350070ef          	jal	8002f4c4 <printf>
    80028178:	02900513          	li	a0,41
    8002817c:	036060ef          	jal	8002e1b2 <putchar>
    80028180:	b371                	j	80027f0c <stateen_SE0_test_8+0x2b6>
    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028182:	0000a517          	auipc	a0,0xa
    80028186:	57e50513          	addi	a0,a0,1406 # 80032700 <__func__.0+0x318>
    8002818a:	33a070ef          	jal	8002f4c4 <printf>
    8002818e:	02900513          	li	a0,41
    80028192:	020060ef          	jal	8002e1b2 <putchar>
    80028196:	b319                	j	80027e9c <stateen_SE0_test_8+0x246>
    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028198:	0000a517          	auipc	a0,0xa
    8002819c:	56850513          	addi	a0,a0,1384 # 80032700 <__func__.0+0x318>
    800281a0:	324070ef          	jal	8002f4c4 <printf>
    800281a4:	02900513          	li	a0,41
    800281a8:	00a060ef          	jal	8002e1b2 <putchar>
    800281ac:	b141                	j	80027e2c <stateen_SE0_test_8+0x1d6>
    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    800281ae:	0000a517          	auipc	a0,0xa
    800281b2:	55250513          	addi	a0,a0,1362 # 80032700 <__func__.0+0x318>
    800281b6:	30e070ef          	jal	8002f4c4 <printf>
    800281ba:	02900513          	li	a0,41
    800281be:	7f5050ef          	jal	8002e1b2 <putchar>
    800281c2:	beed                	j	80027dbc <stateen_SE0_test_8+0x166>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    800281c4:	0000a517          	auipc	a0,0xa
    800281c8:	53c50513          	addi	a0,a0,1340 # 80032700 <__func__.0+0x318>
    800281cc:	2f8070ef          	jal	8002f4c4 <printf>
    800281d0:	02900513          	li	a0,41
    800281d4:	7df050ef          	jal	8002e1b2 <putchar>
    800281d8:	be8d                	j	80027d4a <stateen_SE0_test_8+0xf4>
    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    800281da:	0000a517          	auipc	a0,0xa
    800281de:	52650513          	addi	a0,a0,1318 # 80032700 <__func__.0+0x318>
    800281e2:	2e2070ef          	jal	8002f4c4 <printf>
    800281e6:	02900513          	li	a0,41
    800281ea:	7c9050ef          	jal	8002e1b2 <putchar>
    800281ee:	bcf5                	j	80027cea <stateen_SE0_test_8+0x94>

00000000800281f0 <vec_vle_vse_func>:
#include <rvh_test.h>

bool vec_vle_vse_func(){
    800281f0:	7179                	addi	sp,sp,-48
    TEST_START();
    800281f2:	0000a597          	auipc	a1,0xa
    800281f6:	c5658593          	addi	a1,a1,-938 # 80031e48 <__func__.24>
    800281fa:	0000a517          	auipc	a0,0xa
    800281fe:	4ce50513          	addi	a0,a0,1230 # 800326c8 <__func__.0+0x2e0>
bool vec_vle_vse_func(){
    80028202:	f406                	sd	ra,40(sp)
    80028204:	f022                	sd	s0,32(sp)
    80028206:	ec26                	sd	s1,24(sp)
    80028208:	e84a                	sd	s2,16(sp)
    TEST_START();
    8002820a:	2ba070ef          	jal	8002f4c4 <printf>
    8002820e:	4529                	li	a0,10
    80028210:	7a3050ef          	jal	8002e1b2 <putchar>

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=1
    80028214:	20000793          	li	a5,512
    80028218:	3007a073          	csrs	mstatus,a5

    uint8_t src8[8] = {1, 2, 3, 4, 5, 6, 7, 8}; 
    8002821c:	00015717          	auipc	a4,0x15
    80028220:	45c73703          	ld	a4,1116(a4) # 8003d678 <__func__.0+0xb290>
    uint8_t dest8[8] = {0}; 
    80028224:	e402                	sd	zero,8(sp)
            : "t0", "memory" /* Clobbered registers */ \
        ); \
    }

// 定义具体的加载和存储指令函数（固定使用 v6 寄存器,其它v指令同固定）
LOAD_VECTOR_TO_REGISTER(vle8_to_v6, "vle8.v", uint8_t, 8);
    80028226:	4421                	li	s0,8
    uint8_t src8[8] = {1, 2, 3, 4, 5, 6, 7, 8}; 
    80028228:	e03a                	sd	a4,0(sp)
    8002822a:	04100493          	li	s1,65
    8002822e:	809472d7          	vsetvl	t0,s0,s1
    80028232:	02010307          	vle8.v	v6,(sp)

    int vl = 8;  // 向量长度

    // 调用向量加载和存储函数
    vle8_to_v6(src8, vl);
    excpt_info();
    80028236:	e25d80ef          	jal	8000105a <excpt_info>
LOAD_VECTOR_TO_REGISTER(vle16_to_v6, "vle16.v", uint16_t, 16);
LOAD_VECTOR_TO_REGISTER(vle32_to_v6, "vle32.v", uint32_t, 32);
LOAD_VECTOR_TO_REGISTER(vle64_to_v6, "vle64.v", uint64_t, 64);

STORE_VECTOR_FROM_REGISTER(vse8_from_v6, "vse8.v", uint8_t, 8);
    8002823a:	003c                	addi	a5,sp,8
    8002823c:	809472d7          	vsetvl	t0,s0,s1
    80028240:	02078327          	vse8.v	v6,(a5)
    vse8_from_v6(dest8, vl);

    
    // 打印结果以验证
    printf("After vle8_v:\n");
    80028244:	00015517          	auipc	a0,0x15
    80028248:	40c50513          	addi	a0,a0,1036 # 8003d650 <__func__.0+0xb268>
    8002824c:	6b5060ef          	jal	8002f100 <puts>
    for (int i = 0; i < 8; i++) {
    80028250:	0024                	addi	s1,sp,8
    80028252:	4401                	li	s0,0
    80028254:	4921                	li	s2,8
        printf("dest8[%d] = %u  ", i, dest8[i]);
    80028256:	0004c603          	lbu	a2,0(s1)
    8002825a:	85a2                	mv	a1,s0
    8002825c:	00015517          	auipc	a0,0x15
    80028260:	40450513          	addi	a0,a0,1028 # 8003d660 <__func__.0+0xb278>
    for (int i = 0; i < 8; i++) {
    80028264:	2405                	addiw	s0,s0,1
        printf("dest8[%d] = %u  ", i, dest8[i]);
    80028266:	25e070ef          	jal	8002f4c4 <printf>
    for (int i = 0; i < 8; i++) {
    8002826a:	0485                	addi	s1,s1,1
    8002826c:	ff2415e3          	bne	s0,s2,80028256 <vec_vle_vse_func+0x66>
    }
    printf("\n");
    80028270:	4529                	li	a0,10
    80028272:	741050ef          	jal	8002e1b2 <putchar>


    TEST_END();
    80028276:	0000a597          	auipc	a1,0xa
    8002827a:	43258593          	addi	a1,a1,1074 # 800326a8 <__func__.0+0x2c0>
    8002827e:	0000a517          	auipc	a0,0xa
    80028282:	4e250513          	addi	a0,a0,1250 # 80032760 <__func__.0+0x378>
    80028286:	23e070ef          	jal	8002f4c4 <printf>
    8002828a:	4511                	li	a0,4
    8002828c:	c89d80ef          	jal	80000f14 <goto_priv>
    80028290:	ce6d90ef          	jal	80001776 <reset_state>
}
    80028294:	70a2                	ld	ra,40(sp)
    80028296:	7402                	ld	s0,32(sp)
    80028298:	64e2                	ld	s1,24(sp)
    8002829a:	6942                	ld	s2,16(sp)
    8002829c:	4505                	li	a0,1
    8002829e:	6145                	addi	sp,sp,48
    800282a0:	8082                	ret

00000000800282a2 <vec_test_1>:



bool vec_test_1(){
    800282a2:	1101                	addi	sp,sp,-32
    
    TEST_START();
    800282a4:	0000a597          	auipc	a1,0xa
    800282a8:	bbc58593          	addi	a1,a1,-1092 # 80031e60 <__func__.23>
    800282ac:	0000a517          	auipc	a0,0xa
    800282b0:	41c50513          	addi	a0,a0,1052 # 800326c8 <__func__.0+0x2e0>
bool vec_test_1(){
    800282b4:	ec06                	sd	ra,24(sp)
    800282b6:	e822                	sd	s0,16(sp)
    800282b8:	e426                	sd	s1,8(sp)
    TEST_START();
    800282ba:	20a070ef          	jal	8002f4c4 <printf>
    800282be:	4529                	li	a0,10
    800282c0:	6f3050ef          	jal	8002e1b2 <putchar>
    // 当 mstatus.VS 被设置为 Off 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    800282c4:	20000713          	li	a4,512
    800282c8:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800282cc:	40000793          	li	a5,1024
    800282d0:	3007b073          	csrc	mstatus,a5

static inline void set_vcpop_conditions(int vl, int sew, int lmull, int v0_init, int v2_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;

    asm volatile (
    800282d4:	46a1                	li	a3,8
    800282d6:	4645                	li	a2,17
    800282d8:	80c6f2d7          	vsetvl	t0,a3,a2
    800282dc:	5e00b057          	vmv.v.i	v0,1
    800282e0:	5e00b157          	vmv.v.i	v2,1
    int v2_init = 1;     // 初始化 v2 的值为全 1

    // 设置 vcpop.m 的执行条件
    set_vcpop_conditions(vl, sew, lmull, v0_init, v2_init);

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800282e4:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800282e8:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    800282ec:	b2dd80ef          	jal	80000e18 <test_setup_except_function>
    // 执行 vcpop.m 指令并返回结果
    uint32_t result = execute_vcpop_v2();
    800282f0:	402827d7          	vcpop.m	a5,v2,v0.t

    excpt_info();
    800282f4:	d67d80ef          	jal	8000105a <excpt_info>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    800282f8:	08c00593          	li	a1,140
    800282fc:	00015617          	auipc	a2,0x15
    80028300:	38c60613          	addi	a2,a2,908 # 8003d688 <__func__.0+0xb2a0>
    80028304:	0000a517          	auipc	a0,0xa
    80028308:	3dc50513          	addi	a0,a0,988 # 800326e0 <__func__.0+0x2f8>
    8002830c:	1b8070ef          	jal	8002f4c4 <printf>
    80028310:	00034797          	auipc	a5,0x34
    80028314:	d017c783          	lbu	a5,-767(a5) # 8005c011 <excpt+0x1>
    80028318:	00034497          	auipc	s1,0x34
    8002831c:	cf848493          	addi	s1,s1,-776 # 8005c010 <excpt>
    80028320:	0000a597          	auipc	a1,0xa
    80028324:	39858593          	addi	a1,a1,920 # 800326b8 <__func__.0+0x2d0>
    80028328:	cf89                	beqz	a5,80028342 <vec_test_1+0xa0>
    8002832a:	6498                	ld	a4,8(s1)
    8002832c:	4789                	li	a5,2
    8002832e:	0000a597          	auipc	a1,0xa
    80028332:	37a58593          	addi	a1,a1,890 # 800326a8 <__func__.0+0x2c0>
    80028336:	00f70663          	beq	a4,a5,80028342 <vec_test_1+0xa0>
    8002833a:	0000a597          	auipc	a1,0xa
    8002833e:	37e58593          	addi	a1,a1,894 # 800326b8 <__func__.0+0x2d0>
    80028342:	0000a517          	auipc	a0,0xa
    80028346:	3b650513          	addi	a0,a0,950 # 800326f8 <__func__.0+0x310>
    8002834a:	17a070ef          	jal	8002f4c4 <printf>
    8002834e:	00034797          	auipc	a5,0x34
    80028352:	cc37c783          	lbu	a5,-829(a5) # 8005c011 <excpt+0x1>
    80028356:	c789                	beqz	a5,80028360 <vec_test_1+0xbe>
    80028358:	6498                	ld	a4,8(s1)
    8002835a:	4789                	li	a5,2
    8002835c:	00f70c63          	beq	a4,a5,80028374 <vec_test_1+0xd2>
    80028360:	0000a517          	auipc	a0,0xa
    80028364:	3a050513          	addi	a0,a0,928 # 80032700 <__func__.0+0x318>
    80028368:	15c070ef          	jal	8002f4c4 <printf>
    8002836c:	02900513          	li	a0,41
    80028370:	643050ef          	jal	8002e1b2 <putchar>
    80028374:	4529                	li	a0,10
    80028376:	63d050ef          	jal	8002e1b2 <putchar>
    8002837a:	00034417          	auipc	s0,0x34
    8002837e:	c9744403          	lbu	s0,-873(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028382:	0000a597          	auipc	a1,0xa
    80028386:	33658593          	addi	a1,a1,822 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    8002838a:	cc11                	beqz	s0,800283a6 <vec_test_1+0x104>
    8002838c:	6498                	ld	a4,8(s1)
    8002838e:	4789                	li	a5,2
    TEST_END();
    80028390:	0000a597          	auipc	a1,0xa
    80028394:	31858593          	addi	a1,a1,792 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    80028398:	00f70763          	beq	a4,a5,800283a6 <vec_test_1+0x104>
    8002839c:	4401                	li	s0,0
    TEST_END();
    8002839e:	0000a597          	auipc	a1,0xa
    800283a2:	31a58593          	addi	a1,a1,794 # 800326b8 <__func__.0+0x2d0>
    800283a6:	0000a517          	auipc	a0,0xa
    800283aa:	3ba50513          	addi	a0,a0,954 # 80032760 <__func__.0+0x378>
    800283ae:	116070ef          	jal	8002f4c4 <printf>
    800283b2:	4511                	li	a0,4
    800283b4:	b61d80ef          	jal	80000f14 <goto_priv>
    800283b8:	bbed90ef          	jal	80001776 <reset_state>
}
    800283bc:	60e2                	ld	ra,24(sp)
    800283be:	8522                	mv	a0,s0
    800283c0:	6442                	ld	s0,16(sp)
    800283c2:	64a2                	ld	s1,8(sp)
    800283c4:	6105                	addi	sp,sp,32
    800283c6:	8082                	ret

00000000800283c8 <vec_test_2>:

bool vec_test_2(){
    800283c8:	1101                	addi	sp,sp,-32

    TEST_START();
    800283ca:	0000a597          	auipc	a1,0xa
    800283ce:	aa658593          	addi	a1,a1,-1370 # 80031e70 <__func__.22>
    800283d2:	0000a517          	auipc	a0,0xa
    800283d6:	2f650513          	addi	a0,a0,758 # 800326c8 <__func__.0+0x2e0>
bool vec_test_2(){
    800283da:	ec06                	sd	ra,24(sp)
    800283dc:	e822                	sd	s0,16(sp)
    800283de:	e426                	sd	s1,8(sp)
    TEST_START();
    800283e0:	0e4070ef          	jal	8002f4c4 <printf>
    800283e4:	4529                	li	a0,10
    800283e6:	5cd050ef          	jal	8002e1b2 <putchar>
    // 当 mstatus.VS 被设置为 Off 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800283ea:	20000793          	li	a5,512
    800283ee:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800283f2:	40000793          	li	a5,1024
    800283f6:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    800283fa:	a1fd80ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VSTART);
    800283fe:	008027f3          	csrr	a5,vstart
    excpt_info();
    80028402:	c59d80ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    80028406:	08c00593          	li	a1,140
    8002840a:	00015617          	auipc	a2,0x15
    8002840e:	2ce60613          	addi	a2,a2,718 # 8003d6d8 <__func__.0+0xb2f0>
    80028412:	0000a517          	auipc	a0,0xa
    80028416:	2ce50513          	addi	a0,a0,718 # 800326e0 <__func__.0+0x2f8>
    8002841a:	0aa070ef          	jal	8002f4c4 <printf>
    8002841e:	00034797          	auipc	a5,0x34
    80028422:	bf37c783          	lbu	a5,-1037(a5) # 8005c011 <excpt+0x1>
    80028426:	00034497          	auipc	s1,0x34
    8002842a:	bea48493          	addi	s1,s1,-1046 # 8005c010 <excpt>
    8002842e:	0000a597          	auipc	a1,0xa
    80028432:	28a58593          	addi	a1,a1,650 # 800326b8 <__func__.0+0x2d0>
    80028436:	cf89                	beqz	a5,80028450 <vec_test_2+0x88>
    80028438:	6498                	ld	a4,8(s1)
    8002843a:	4789                	li	a5,2
    8002843c:	0000a597          	auipc	a1,0xa
    80028440:	26c58593          	addi	a1,a1,620 # 800326a8 <__func__.0+0x2c0>
    80028444:	00f70663          	beq	a4,a5,80028450 <vec_test_2+0x88>
    80028448:	0000a597          	auipc	a1,0xa
    8002844c:	27058593          	addi	a1,a1,624 # 800326b8 <__func__.0+0x2d0>
    80028450:	0000a517          	auipc	a0,0xa
    80028454:	2a850513          	addi	a0,a0,680 # 800326f8 <__func__.0+0x310>
    80028458:	06c070ef          	jal	8002f4c4 <printf>
    8002845c:	00034797          	auipc	a5,0x34
    80028460:	bb57c783          	lbu	a5,-1099(a5) # 8005c011 <excpt+0x1>
    80028464:	c789                	beqz	a5,8002846e <vec_test_2+0xa6>
    80028466:	6498                	ld	a4,8(s1)
    80028468:	4789                	li	a5,2
    8002846a:	00f70c63          	beq	a4,a5,80028482 <vec_test_2+0xba>
    8002846e:	0000a517          	auipc	a0,0xa
    80028472:	29250513          	addi	a0,a0,658 # 80032700 <__func__.0+0x318>
    80028476:	04e070ef          	jal	8002f4c4 <printf>
    8002847a:	02900513          	li	a0,41
    8002847e:	535050ef          	jal	8002e1b2 <putchar>
    80028482:	4529                	li	a0,10
    80028484:	52f050ef          	jal	8002e1b2 <putchar>
    80028488:	00034417          	auipc	s0,0x34
    8002848c:	b8944403          	lbu	s0,-1143(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028490:	0000a597          	auipc	a1,0xa
    80028494:	22858593          	addi	a1,a1,552 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    80028498:	cc11                	beqz	s0,800284b4 <vec_test_2+0xec>
    8002849a:	6498                	ld	a4,8(s1)
    8002849c:	4789                	li	a5,2
    TEST_END();
    8002849e:	0000a597          	auipc	a1,0xa
    800284a2:	20a58593          	addi	a1,a1,522 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    800284a6:	00f70763          	beq	a4,a5,800284b4 <vec_test_2+0xec>
    800284aa:	4401                	li	s0,0
    TEST_END();
    800284ac:	0000a597          	auipc	a1,0xa
    800284b0:	20c58593          	addi	a1,a1,524 # 800326b8 <__func__.0+0x2d0>
    800284b4:	0000a517          	auipc	a0,0xa
    800284b8:	2ac50513          	addi	a0,a0,684 # 80032760 <__func__.0+0x378>
    800284bc:	008070ef          	jal	8002f4c4 <printf>
    800284c0:	4511                	li	a0,4
    800284c2:	a53d80ef          	jal	80000f14 <goto_priv>
    800284c6:	ab0d90ef          	jal	80001776 <reset_state>
}
    800284ca:	60e2                	ld	ra,24(sp)
    800284cc:	8522                	mv	a0,s0
    800284ce:	6442                	ld	s0,16(sp)
    800284d0:	64a2                	ld	s1,8(sp)
    800284d2:	6105                	addi	sp,sp,32
    800284d4:	8082                	ret

00000000800284d6 <vec_test_3>:


bool vec_test_3(){             
    800284d6:	1101                	addi	sp,sp,-32

    TEST_START();
    800284d8:	0000a597          	auipc	a1,0xa
    800284dc:	9a858593          	addi	a1,a1,-1624 # 80031e80 <__func__.21>
    800284e0:	0000a517          	auipc	a0,0xa
    800284e4:	1e850513          	addi	a0,a0,488 # 800326c8 <__func__.0+0x2e0>
bool vec_test_3(){             
    800284e8:	ec06                	sd	ra,24(sp)
    800284ea:	e822                	sd	s0,16(sp)
    800284ec:	e426                	sd	s1,8(sp)
    TEST_START();
    800284ee:	7d7060ef          	jal	8002f4c4 <printf>
    800284f2:	4529                	li	a0,10
    800284f4:	4bf050ef          	jal	8002e1b2 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS!=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800284f8:	20000713          	li	a4,512
    800284fc:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028500:	40000793          	li	a5,1024
    80028504:	3007a073          	csrs	mstatus,a5
    asm volatile (
    80028508:	4689                	li	a3,2
    8002850a:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    8002850e:	5e00b057          	vmv.v.i	v0,1
    80028512:	5e003257          	vmv.v.i	v4,0
    80028516:	5e00b357          	vmv.v.i	v6,1
    int vs2_init = 1;    // 初始化 v6（源数据）为 1

    // 设置 vredsum.vs 的执行条件
    set_vredsum_vs_conditions(sew, lmull, vl, vs1_init, vs2_init);

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    8002851a:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    8002851e:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    80028522:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    80028526:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    8002852a:	4509                	li	a0,2
    8002852c:	9e9d80ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80028530:	8e9d80ef          	jal	80000e18 <test_setup_except_function>
    asm volatile (
    80028534:	00222157          	vredsum.vs	v2,v2,v4,v0.t
    execute_vredsum_vs();           // 执行 vredsum.vs 指令并获取结果
    excpt_info();
    80028538:	b23d80ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    8002853c:	08c00593          	li	a1,140
    80028540:	00015617          	auipc	a2,0x15
    80028544:	1e060613          	addi	a2,a2,480 # 8003d720 <__func__.0+0xb338>
    80028548:	0000a517          	auipc	a0,0xa
    8002854c:	19850513          	addi	a0,a0,408 # 800326e0 <__func__.0+0x2f8>
    80028550:	775060ef          	jal	8002f4c4 <printf>
    80028554:	00034797          	auipc	a5,0x34
    80028558:	abd7c783          	lbu	a5,-1347(a5) # 8005c011 <excpt+0x1>
    8002855c:	00034497          	auipc	s1,0x34
    80028560:	ab448493          	addi	s1,s1,-1356 # 8005c010 <excpt>
    80028564:	0000a597          	auipc	a1,0xa
    80028568:	15458593          	addi	a1,a1,340 # 800326b8 <__func__.0+0x2d0>
    8002856c:	cf89                	beqz	a5,80028586 <vec_test_3+0xb0>
    8002856e:	6498                	ld	a4,8(s1)
    80028570:	4789                	li	a5,2
    80028572:	0000a597          	auipc	a1,0xa
    80028576:	13658593          	addi	a1,a1,310 # 800326a8 <__func__.0+0x2c0>
    8002857a:	00f70663          	beq	a4,a5,80028586 <vec_test_3+0xb0>
    8002857e:	0000a597          	auipc	a1,0xa
    80028582:	13a58593          	addi	a1,a1,314 # 800326b8 <__func__.0+0x2d0>
    80028586:	0000a517          	auipc	a0,0xa
    8002858a:	17250513          	addi	a0,a0,370 # 800326f8 <__func__.0+0x310>
    8002858e:	737060ef          	jal	8002f4c4 <printf>
    80028592:	00034797          	auipc	a5,0x34
    80028596:	a7f7c783          	lbu	a5,-1409(a5) # 8005c011 <excpt+0x1>
    8002859a:	c789                	beqz	a5,800285a4 <vec_test_3+0xce>
    8002859c:	6498                	ld	a4,8(s1)
    8002859e:	4789                	li	a5,2
    800285a0:	00f70c63          	beq	a4,a5,800285b8 <vec_test_3+0xe2>
    800285a4:	0000a517          	auipc	a0,0xa
    800285a8:	15c50513          	addi	a0,a0,348 # 80032700 <__func__.0+0x318>
    800285ac:	719060ef          	jal	8002f4c4 <printf>
    800285b0:	02900513          	li	a0,41
    800285b4:	3ff050ef          	jal	8002e1b2 <putchar>
    800285b8:	4529                	li	a0,10
    800285ba:	3f9050ef          	jal	8002e1b2 <putchar>
    800285be:	00034417          	auipc	s0,0x34
    800285c2:	a5344403          	lbu	s0,-1453(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    800285c6:	0000a597          	auipc	a1,0xa
    800285ca:	0f258593          	addi	a1,a1,242 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    800285ce:	cc11                	beqz	s0,800285ea <vec_test_3+0x114>
    800285d0:	6498                	ld	a4,8(s1)
    800285d2:	4789                	li	a5,2
    TEST_END();
    800285d4:	0000a597          	auipc	a1,0xa
    800285d8:	0d458593          	addi	a1,a1,212 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    800285dc:	00f70763          	beq	a4,a5,800285ea <vec_test_3+0x114>
    800285e0:	4401                	li	s0,0
    TEST_END();
    800285e2:	0000a597          	auipc	a1,0xa
    800285e6:	0d658593          	addi	a1,a1,214 # 800326b8 <__func__.0+0x2d0>
    800285ea:	0000a517          	auipc	a0,0xa
    800285ee:	17650513          	addi	a0,a0,374 # 80032760 <__func__.0+0x378>
    800285f2:	6d3060ef          	jal	8002f4c4 <printf>
    800285f6:	4511                	li	a0,4
    800285f8:	91dd80ef          	jal	80000f14 <goto_priv>
    800285fc:	97ad90ef          	jal	80001776 <reset_state>
}
    80028600:	60e2                	ld	ra,24(sp)
    80028602:	8522                	mv	a0,s0
    80028604:	6442                	ld	s0,16(sp)
    80028606:	64a2                	ld	s1,8(sp)
    80028608:	6105                	addi	sp,sp,32
    8002860a:	8082                	ret

000000008002860c <vec_test_4>:


bool vec_test_4(){
    8002860c:	1101                	addi	sp,sp,-32

    TEST_START();
    8002860e:	0000a597          	auipc	a1,0xa
    80028612:	88258593          	addi	a1,a1,-1918 # 80031e90 <__func__.20>
    80028616:	0000a517          	auipc	a0,0xa
    8002861a:	0b250513          	addi	a0,a0,178 # 800326c8 <__func__.0+0x2e0>
bool vec_test_4(){
    8002861e:	ec06                	sd	ra,24(sp)
    80028620:	e822                	sd	s0,16(sp)
    80028622:	e426                	sd	s1,8(sp)
    TEST_START();
    80028624:	6a1060ef          	jal	8002f4c4 <printf>
    80028628:	4529                	li	a0,10
    8002862a:	389050ef          	jal	8002e1b2 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS!=OFF 时，尝试访问向量 CSR 

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=!0
    8002862e:	20000713          	li	a4,512
    80028632:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028636:	40000793          	li	a5,1024
    8002863a:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    8002863e:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    80028642:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80028646:	4509                	li	a0,2
    80028648:	8cdd80ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002864c:	fccd80ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VTYPE);
    80028650:	c21027f3          	csrr	a5,vtype
    excpt_info();
    80028654:	a07d80ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    80028658:	08c00593          	li	a1,140
    8002865c:	00015617          	auipc	a2,0x15
    80028660:	12460613          	addi	a2,a2,292 # 8003d780 <__func__.0+0xb398>
    80028664:	0000a517          	auipc	a0,0xa
    80028668:	07c50513          	addi	a0,a0,124 # 800326e0 <__func__.0+0x2f8>
    8002866c:	659060ef          	jal	8002f4c4 <printf>
    80028670:	00034797          	auipc	a5,0x34
    80028674:	9a17c783          	lbu	a5,-1631(a5) # 8005c011 <excpt+0x1>
    80028678:	00034497          	auipc	s1,0x34
    8002867c:	99848493          	addi	s1,s1,-1640 # 8005c010 <excpt>
    80028680:	0000a597          	auipc	a1,0xa
    80028684:	03858593          	addi	a1,a1,56 # 800326b8 <__func__.0+0x2d0>
    80028688:	cf89                	beqz	a5,800286a2 <vec_test_4+0x96>
    8002868a:	6498                	ld	a4,8(s1)
    8002868c:	4789                	li	a5,2
    8002868e:	0000a597          	auipc	a1,0xa
    80028692:	01a58593          	addi	a1,a1,26 # 800326a8 <__func__.0+0x2c0>
    80028696:	00f70663          	beq	a4,a5,800286a2 <vec_test_4+0x96>
    8002869a:	0000a597          	auipc	a1,0xa
    8002869e:	01e58593          	addi	a1,a1,30 # 800326b8 <__func__.0+0x2d0>
    800286a2:	0000a517          	auipc	a0,0xa
    800286a6:	05650513          	addi	a0,a0,86 # 800326f8 <__func__.0+0x310>
    800286aa:	61b060ef          	jal	8002f4c4 <printf>
    800286ae:	00034797          	auipc	a5,0x34
    800286b2:	9637c783          	lbu	a5,-1693(a5) # 8005c011 <excpt+0x1>
    800286b6:	c789                	beqz	a5,800286c0 <vec_test_4+0xb4>
    800286b8:	6498                	ld	a4,8(s1)
    800286ba:	4789                	li	a5,2
    800286bc:	00f70c63          	beq	a4,a5,800286d4 <vec_test_4+0xc8>
    800286c0:	0000a517          	auipc	a0,0xa
    800286c4:	04050513          	addi	a0,a0,64 # 80032700 <__func__.0+0x318>
    800286c8:	5fd060ef          	jal	8002f4c4 <printf>
    800286cc:	02900513          	li	a0,41
    800286d0:	2e3050ef          	jal	8002e1b2 <putchar>
    800286d4:	4529                	li	a0,10
    800286d6:	2dd050ef          	jal	8002e1b2 <putchar>
    800286da:	00034417          	auipc	s0,0x34
    800286de:	93744403          	lbu	s0,-1737(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    800286e2:	0000a597          	auipc	a1,0xa
    800286e6:	fd658593          	addi	a1,a1,-42 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    800286ea:	cc11                	beqz	s0,80028706 <vec_test_4+0xfa>
    800286ec:	6498                	ld	a4,8(s1)
    800286ee:	4789                	li	a5,2
    TEST_END();
    800286f0:	0000a597          	auipc	a1,0xa
    800286f4:	fb858593          	addi	a1,a1,-72 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    800286f8:	00f70763          	beq	a4,a5,80028706 <vec_test_4+0xfa>
    800286fc:	4401                	li	s0,0
    TEST_END();
    800286fe:	0000a597          	auipc	a1,0xa
    80028702:	fba58593          	addi	a1,a1,-70 # 800326b8 <__func__.0+0x2d0>
    80028706:	0000a517          	auipc	a0,0xa
    8002870a:	05a50513          	addi	a0,a0,90 # 80032760 <__func__.0+0x378>
    8002870e:	5b7060ef          	jal	8002f4c4 <printf>
    80028712:	4511                	li	a0,4
    80028714:	801d80ef          	jal	80000f14 <goto_priv>
    80028718:	85ed90ef          	jal	80001776 <reset_state>
}
    8002871c:	60e2                	ld	ra,24(sp)
    8002871e:	8522                	mv	a0,s0
    80028720:	6442                	ld	s0,16(sp)
    80028722:	64a2                	ld	s1,8(sp)
    80028724:	6105                	addi	sp,sp,32
    80028726:	8082                	ret

0000000080028728 <vec_test_5>:

bool vec_test_5(){          
    80028728:	1101                	addi	sp,sp,-32

    TEST_START();
    8002872a:	00009597          	auipc	a1,0x9
    8002872e:	77658593          	addi	a1,a1,1910 # 80031ea0 <__func__.19>
    80028732:	0000a517          	auipc	a0,0xa
    80028736:	f9650513          	addi	a0,a0,-106 # 800326c8 <__func__.0+0x2e0>
bool vec_test_5(){          
    8002873a:	ec06                	sd	ra,24(sp)
    8002873c:	e426                	sd	s1,8(sp)
    8002873e:	e822                	sd	s0,16(sp)
    TEST_START();
    80028740:	585060ef          	jal	8002f4c4 <printf>
    80028744:	4529                	li	a0,10
    80028746:	26d050ef          	jal	8002e1b2 <putchar>
    // 当 V=1 时，vsstatus.VS!=OFF && mstatus.VS=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    8002874a:	20000493          	li	s1,512
    8002874e:	3004a073          	csrs	mstatus,s1
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028752:	40000413          	li	s0,1024
    80028756:	30042073          	csrs	mstatus,s0
    int lmull = 1;     // LMUL = 1
    int vl = 2;        // 向量长度（处理 2 个元素）
    int v0_init = 1;   // 初始化 v0 的值为 1
    int v4_init = 2;   // 初始化 v4 的值为 2

    TEST_SETUP_EXCEPT();
    8002875a:	ebed80ef          	jal	80000e18 <test_setup_except_function>
// 设置 vfirst.m 执行条件
static inline void set_vfirst_m_conditions(int sew, int lmull, int vl, int v0_init, int v4_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    8002875e:	4785                	li	a5,1
    80028760:	4749                	li	a4,18
    80028762:	80e7f2d7          	vsetvl	t0,a5,a4
    80028766:	5e00b057          	vmv.v.i	v0,1
    8002876a:	5e013257          	vmv.v.i	v4,2

    // 设置 vfirst.m 的执行条件
    set_vfirst_m_conditions(vl, sew, lmull, v0_init, v4_init);
    excpt_info();
    8002876e:	8edd80ef          	jal	8000105a <excpt_info>

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028772:	3004b073          	csrc	mstatus,s1
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028776:	30043073          	csrc	mstatus,s0
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    8002877a:	2004a073          	csrs	vsstatus,s1
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    8002877e:	20043073          	csrc	vsstatus,s0

    goto_priv(PRIV_VS);
    80028782:	4509                	li	a0,2
    80028784:	f90d80ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80028788:	e90d80ef          	jal	80000e18 <test_setup_except_function>
    EXECUTE_VFIRST_M_V3();
    8002878c:	4038a7d7          	vfirst.m	a5,v3,v0.t
    excpt_info();
    80028790:	8cbd80ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    80028794:	08c00593          	li	a1,140
    80028798:	00015617          	auipc	a2,0x15
    8002879c:	04860613          	addi	a2,a2,72 # 8003d7e0 <__func__.0+0xb3f8>
    800287a0:	0000a517          	auipc	a0,0xa
    800287a4:	f4050513          	addi	a0,a0,-192 # 800326e0 <__func__.0+0x2f8>
    800287a8:	51d060ef          	jal	8002f4c4 <printf>
    800287ac:	00034797          	auipc	a5,0x34
    800287b0:	8657c783          	lbu	a5,-1947(a5) # 8005c011 <excpt+0x1>
    800287b4:	00034497          	auipc	s1,0x34
    800287b8:	85c48493          	addi	s1,s1,-1956 # 8005c010 <excpt>
    800287bc:	0000a597          	auipc	a1,0xa
    800287c0:	efc58593          	addi	a1,a1,-260 # 800326b8 <__func__.0+0x2d0>
    800287c4:	cf89                	beqz	a5,800287de <vec_test_5+0xb6>
    800287c6:	6498                	ld	a4,8(s1)
    800287c8:	4789                	li	a5,2
    800287ca:	0000a597          	auipc	a1,0xa
    800287ce:	ede58593          	addi	a1,a1,-290 # 800326a8 <__func__.0+0x2c0>
    800287d2:	00f70663          	beq	a4,a5,800287de <vec_test_5+0xb6>
    800287d6:	0000a597          	auipc	a1,0xa
    800287da:	ee258593          	addi	a1,a1,-286 # 800326b8 <__func__.0+0x2d0>
    800287de:	0000a517          	auipc	a0,0xa
    800287e2:	f1a50513          	addi	a0,a0,-230 # 800326f8 <__func__.0+0x310>
    800287e6:	4df060ef          	jal	8002f4c4 <printf>
    800287ea:	00034797          	auipc	a5,0x34
    800287ee:	8277c783          	lbu	a5,-2009(a5) # 8005c011 <excpt+0x1>
    800287f2:	c789                	beqz	a5,800287fc <vec_test_5+0xd4>
    800287f4:	6498                	ld	a4,8(s1)
    800287f6:	4789                	li	a5,2
    800287f8:	00f70c63          	beq	a4,a5,80028810 <vec_test_5+0xe8>
    800287fc:	0000a517          	auipc	a0,0xa
    80028800:	f0450513          	addi	a0,a0,-252 # 80032700 <__func__.0+0x318>
    80028804:	4c1060ef          	jal	8002f4c4 <printf>
    80028808:	02900513          	li	a0,41
    8002880c:	1a7050ef          	jal	8002e1b2 <putchar>
    80028810:	4529                	li	a0,10
    80028812:	1a1050ef          	jal	8002e1b2 <putchar>
    80028816:	00033417          	auipc	s0,0x33
    8002881a:	7fb44403          	lbu	s0,2043(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    8002881e:	0000a597          	auipc	a1,0xa
    80028822:	e9a58593          	addi	a1,a1,-358 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    80028826:	cc11                	beqz	s0,80028842 <vec_test_5+0x11a>
    80028828:	6498                	ld	a4,8(s1)
    8002882a:	4789                	li	a5,2
    TEST_END();
    8002882c:	0000a597          	auipc	a1,0xa
    80028830:	e7c58593          	addi	a1,a1,-388 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    80028834:	00f70763          	beq	a4,a5,80028842 <vec_test_5+0x11a>
    80028838:	4401                	li	s0,0
    TEST_END();
    8002883a:	0000a597          	auipc	a1,0xa
    8002883e:	e7e58593          	addi	a1,a1,-386 # 800326b8 <__func__.0+0x2d0>
    80028842:	0000a517          	auipc	a0,0xa
    80028846:	f1e50513          	addi	a0,a0,-226 # 80032760 <__func__.0+0x378>
    8002884a:	47b060ef          	jal	8002f4c4 <printf>
    8002884e:	4511                	li	a0,4
    80028850:	ec4d80ef          	jal	80000f14 <goto_priv>
    80028854:	f23d80ef          	jal	80001776 <reset_state>
}
    80028858:	60e2                	ld	ra,24(sp)
    8002885a:	8522                	mv	a0,s0
    8002885c:	6442                	ld	s0,16(sp)
    8002885e:	64a2                	ld	s1,8(sp)
    80028860:	6105                	addi	sp,sp,32
    80028862:	8082                	ret

0000000080028864 <vec_test_6>:


bool vec_test_6(){
    80028864:	1101                	addi	sp,sp,-32

    TEST_START();
    80028866:	00009597          	auipc	a1,0x9
    8002886a:	64a58593          	addi	a1,a1,1610 # 80031eb0 <__func__.18>
    8002886e:	0000a517          	auipc	a0,0xa
    80028872:	e5a50513          	addi	a0,a0,-422 # 800326c8 <__func__.0+0x2e0>
bool vec_test_6(){
    80028876:	ec06                	sd	ra,24(sp)
    80028878:	e822                	sd	s0,16(sp)
    8002887a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002887c:	449060ef          	jal	8002f4c4 <printf>
    80028880:	4529                	li	a0,10
    80028882:	131050ef          	jal	8002e1b2 <putchar>
    // 当 V=1 时，vsstatus.VS!=OFF && mstatus.VS=OFF 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028886:	20000713          	li	a4,512
    8002888a:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    8002888e:	40000793          	li	a5,1024
    80028892:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    80028896:	20072073          	csrs	vsstatus,a4
    CSRS(CSR_VSSTATUS, 1ULL << 10); 
    8002889a:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    8002889e:	4509                	li	a0,2
    800288a0:	e74d80ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800288a4:	d74d80ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VXSAT);
    800288a8:	009027f3          	csrr	a5,vxsat
    excpt_info();
    800288ac:	faed80ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    800288b0:	08c00593          	li	a1,140
    800288b4:	00015617          	auipc	a2,0x15
    800288b8:	f8c60613          	addi	a2,a2,-116 # 8003d840 <__func__.0+0xb458>
    800288bc:	0000a517          	auipc	a0,0xa
    800288c0:	e2450513          	addi	a0,a0,-476 # 800326e0 <__func__.0+0x2f8>
    800288c4:	401060ef          	jal	8002f4c4 <printf>
    800288c8:	00033797          	auipc	a5,0x33
    800288cc:	7497c783          	lbu	a5,1865(a5) # 8005c011 <excpt+0x1>
    800288d0:	00033497          	auipc	s1,0x33
    800288d4:	74048493          	addi	s1,s1,1856 # 8005c010 <excpt>
    800288d8:	0000a597          	auipc	a1,0xa
    800288dc:	de058593          	addi	a1,a1,-544 # 800326b8 <__func__.0+0x2d0>
    800288e0:	cf89                	beqz	a5,800288fa <vec_test_6+0x96>
    800288e2:	6498                	ld	a4,8(s1)
    800288e4:	4789                	li	a5,2
    800288e6:	0000a597          	auipc	a1,0xa
    800288ea:	dc258593          	addi	a1,a1,-574 # 800326a8 <__func__.0+0x2c0>
    800288ee:	00f70663          	beq	a4,a5,800288fa <vec_test_6+0x96>
    800288f2:	0000a597          	auipc	a1,0xa
    800288f6:	dc658593          	addi	a1,a1,-570 # 800326b8 <__func__.0+0x2d0>
    800288fa:	0000a517          	auipc	a0,0xa
    800288fe:	dfe50513          	addi	a0,a0,-514 # 800326f8 <__func__.0+0x310>
    80028902:	3c3060ef          	jal	8002f4c4 <printf>
    80028906:	00033797          	auipc	a5,0x33
    8002890a:	70b7c783          	lbu	a5,1803(a5) # 8005c011 <excpt+0x1>
    8002890e:	c789                	beqz	a5,80028918 <vec_test_6+0xb4>
    80028910:	6498                	ld	a4,8(s1)
    80028912:	4789                	li	a5,2
    80028914:	00f70c63          	beq	a4,a5,8002892c <vec_test_6+0xc8>
    80028918:	0000a517          	auipc	a0,0xa
    8002891c:	de850513          	addi	a0,a0,-536 # 80032700 <__func__.0+0x318>
    80028920:	3a5060ef          	jal	8002f4c4 <printf>
    80028924:	02900513          	li	a0,41
    80028928:	08b050ef          	jal	8002e1b2 <putchar>
    8002892c:	4529                	li	a0,10
    8002892e:	085050ef          	jal	8002e1b2 <putchar>
    80028932:	00033417          	auipc	s0,0x33
    80028936:	6df44403          	lbu	s0,1759(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    8002893a:	0000a597          	auipc	a1,0xa
    8002893e:	d7e58593          	addi	a1,a1,-642 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    80028942:	cc11                	beqz	s0,8002895e <vec_test_6+0xfa>
    80028944:	6498                	ld	a4,8(s1)
    80028946:	4789                	li	a5,2
    TEST_END();
    80028948:	0000a597          	auipc	a1,0xa
    8002894c:	d6058593          	addi	a1,a1,-672 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    80028950:	00f70763          	beq	a4,a5,8002895e <vec_test_6+0xfa>
    80028954:	4401                	li	s0,0
    TEST_END();
    80028956:	0000a597          	auipc	a1,0xa
    8002895a:	d6258593          	addi	a1,a1,-670 # 800326b8 <__func__.0+0x2d0>
    8002895e:	0000a517          	auipc	a0,0xa
    80028962:	e0250513          	addi	a0,a0,-510 # 80032760 <__func__.0+0x378>
    80028966:	35f060ef          	jal	8002f4c4 <printf>
    8002896a:	4511                	li	a0,4
    8002896c:	da8d80ef          	jal	80000f14 <goto_priv>
    80028970:	e07d80ef          	jal	80001776 <reset_state>
}
    80028974:	60e2                	ld	ra,24(sp)
    80028976:	8522                	mv	a0,s0
    80028978:	6442                	ld	s0,16(sp)
    8002897a:	64a2                	ld	s1,8(sp)
    8002897c:	6105                	addi	sp,sp,32
    8002897e:	8082                	ret

0000000080028980 <vec_test_7>:

bool vec_test_7(){
    80028980:	1101                	addi	sp,sp,-32

    TEST_START();
    80028982:	00009597          	auipc	a1,0x9
    80028986:	53e58593          	addi	a1,a1,1342 # 80031ec0 <__func__.17>
    8002898a:	0000a517          	auipc	a0,0xa
    8002898e:	d3e50513          	addi	a0,a0,-706 # 800326c8 <__func__.0+0x2e0>
bool vec_test_7(){
    80028992:	ec06                	sd	ra,24(sp)
    80028994:	e822                	sd	s0,16(sp)
    80028996:	e426                	sd	s1,8(sp)
    TEST_START();
    80028998:	32d060ef          	jal	8002f4c4 <printf>
    8002899c:	4529                	li	a0,10
    8002899e:	015050ef          	jal	8002e1b2 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800289a2:	20000713          	li	a4,512
    800289a6:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800289aa:	40000793          	li	a5,1024
    800289ae:	3007a073          	csrs	mstatus,a5
// 设置执行 vmsbf.m 指令条件，包括向量长度、掩码寄存器和源寄存器
static inline void set_vmsbfm_conditions(int vl, int sew, int lmull, int v0_init, int v4_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;

    asm volatile (
    800289b2:	46a1                	li	a3,8
    800289b4:	4645                	li	a2,17
    800289b6:	80c6f2d7          	vsetvl	t0,a3,a2
    800289ba:	5e00b057          	vmv.v.i	v0,1
    800289be:	5e003257          	vmv.v.i	v4,0
    int v4_init = 0;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    set_vmsbfm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800289c2:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800289c6:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    800289ca:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    800289ce:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800289d2:	4509                	li	a0,2
    800289d4:	d40d80ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    800289d8:	c40d80ef          	jal	80000e18 <test_setup_except_function>
    );
}

// 执行 vmsbf.m 指令
static inline void execute_vmsbf_m() {
    asm volatile (
    800289dc:	5040a1d7          	vmsbf.m	v3,v4,v0.t

    // 执行 vmsbf.m 指令
    execute_vmsbf_m();
    excpt_info();
    800289e0:	e7ad80ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    800289e4:	08c00593          	li	a1,140
    800289e8:	00015617          	auipc	a2,0x15
    800289ec:	eb860613          	addi	a2,a2,-328 # 8003d8a0 <__func__.0+0xb4b8>
    800289f0:	0000a517          	auipc	a0,0xa
    800289f4:	cf050513          	addi	a0,a0,-784 # 800326e0 <__func__.0+0x2f8>
    800289f8:	2cd060ef          	jal	8002f4c4 <printf>
    800289fc:	00033797          	auipc	a5,0x33
    80028a00:	6157c783          	lbu	a5,1557(a5) # 8005c011 <excpt+0x1>
    80028a04:	00033497          	auipc	s1,0x33
    80028a08:	60c48493          	addi	s1,s1,1548 # 8005c010 <excpt>
    80028a0c:	0000a597          	auipc	a1,0xa
    80028a10:	cac58593          	addi	a1,a1,-852 # 800326b8 <__func__.0+0x2d0>
    80028a14:	cf89                	beqz	a5,80028a2e <vec_test_7+0xae>
    80028a16:	6498                	ld	a4,8(s1)
    80028a18:	4789                	li	a5,2
    80028a1a:	0000a597          	auipc	a1,0xa
    80028a1e:	c8e58593          	addi	a1,a1,-882 # 800326a8 <__func__.0+0x2c0>
    80028a22:	00f70663          	beq	a4,a5,80028a2e <vec_test_7+0xae>
    80028a26:	0000a597          	auipc	a1,0xa
    80028a2a:	c9258593          	addi	a1,a1,-878 # 800326b8 <__func__.0+0x2d0>
    80028a2e:	0000a517          	auipc	a0,0xa
    80028a32:	cca50513          	addi	a0,a0,-822 # 800326f8 <__func__.0+0x310>
    80028a36:	28f060ef          	jal	8002f4c4 <printf>
    80028a3a:	00033797          	auipc	a5,0x33
    80028a3e:	5d77c783          	lbu	a5,1495(a5) # 8005c011 <excpt+0x1>
    80028a42:	c789                	beqz	a5,80028a4c <vec_test_7+0xcc>
    80028a44:	6498                	ld	a4,8(s1)
    80028a46:	4789                	li	a5,2
    80028a48:	00f70c63          	beq	a4,a5,80028a60 <vec_test_7+0xe0>
    80028a4c:	0000a517          	auipc	a0,0xa
    80028a50:	cb450513          	addi	a0,a0,-844 # 80032700 <__func__.0+0x318>
    80028a54:	271060ef          	jal	8002f4c4 <printf>
    80028a58:	02900513          	li	a0,41
    80028a5c:	756050ef          	jal	8002e1b2 <putchar>
    80028a60:	4529                	li	a0,10
    80028a62:	750050ef          	jal	8002e1b2 <putchar>
    80028a66:	00033417          	auipc	s0,0x33
    80028a6a:	5ab44403          	lbu	s0,1451(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028a6e:	0000a597          	auipc	a1,0xa
    80028a72:	c4a58593          	addi	a1,a1,-950 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028a76:	cc11                	beqz	s0,80028a92 <vec_test_7+0x112>
    80028a78:	6498                	ld	a4,8(s1)
    80028a7a:	4789                	li	a5,2
    TEST_END();
    80028a7c:	0000a597          	auipc	a1,0xa
    80028a80:	c2c58593          	addi	a1,a1,-980 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028a84:	00f70763          	beq	a4,a5,80028a92 <vec_test_7+0x112>
    80028a88:	4401                	li	s0,0
    TEST_END();
    80028a8a:	0000a597          	auipc	a1,0xa
    80028a8e:	c2e58593          	addi	a1,a1,-978 # 800326b8 <__func__.0+0x2d0>
    80028a92:	0000a517          	auipc	a0,0xa
    80028a96:	cce50513          	addi	a0,a0,-818 # 80032760 <__func__.0+0x378>
    80028a9a:	22b060ef          	jal	8002f4c4 <printf>
    80028a9e:	4511                	li	a0,4
    80028aa0:	c74d80ef          	jal	80000f14 <goto_priv>
    80028aa4:	cd3d80ef          	jal	80001776 <reset_state>
}
    80028aa8:	60e2                	ld	ra,24(sp)
    80028aaa:	8522                	mv	a0,s0
    80028aac:	6442                	ld	s0,16(sp)
    80028aae:	64a2                	ld	s1,8(sp)
    80028ab0:	6105                	addi	sp,sp,32
    80028ab2:	8082                	ret

0000000080028ab4 <vec_test_8>:


bool vec_test_8(){
    80028ab4:	1101                	addi	sp,sp,-32

    TEST_START();
    80028ab6:	00009597          	auipc	a1,0x9
    80028aba:	41a58593          	addi	a1,a1,1050 # 80031ed0 <__func__.16>
    80028abe:	0000a517          	auipc	a0,0xa
    80028ac2:	c0a50513          	addi	a0,a0,-1014 # 800326c8 <__func__.0+0x2e0>
bool vec_test_8(){
    80028ac6:	ec06                	sd	ra,24(sp)
    80028ac8:	e822                	sd	s0,16(sp)
    80028aca:	e426                	sd	s1,8(sp)
    TEST_START();
    80028acc:	1f9060ef          	jal	8002f4c4 <printf>
    80028ad0:	4529                	li	a0,10
    80028ad2:	6e0050ef          	jal	8002e1b2 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS=OFF 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028ad6:	20000713          	li	a4,512
    80028ada:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028ade:	40000793          	li	a5,1024
    80028ae2:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    80028ae6:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    80028aea:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80028aee:	4509                	li	a0,2
    80028af0:	c24d80ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    80028af4:	b24d80ef          	jal	80000e18 <test_setup_except_function>
    CSRR(CSR_VXRM);
    80028af8:	00a027f3          	csrr	a5,vxrm
    excpt_info();
    80028afc:	d5ed80ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028b00:	08c00593          	li	a1,140
    80028b04:	00015617          	auipc	a2,0x15
    80028b08:	dfc60613          	addi	a2,a2,-516 # 8003d900 <__func__.0+0xb518>
    80028b0c:	0000a517          	auipc	a0,0xa
    80028b10:	bd450513          	addi	a0,a0,-1068 # 800326e0 <__func__.0+0x2f8>
    80028b14:	1b1060ef          	jal	8002f4c4 <printf>
    80028b18:	00033797          	auipc	a5,0x33
    80028b1c:	4f97c783          	lbu	a5,1273(a5) # 8005c011 <excpt+0x1>
    80028b20:	00033497          	auipc	s1,0x33
    80028b24:	4f048493          	addi	s1,s1,1264 # 8005c010 <excpt>
    80028b28:	0000a597          	auipc	a1,0xa
    80028b2c:	b9058593          	addi	a1,a1,-1136 # 800326b8 <__func__.0+0x2d0>
    80028b30:	cf89                	beqz	a5,80028b4a <vec_test_8+0x96>
    80028b32:	6498                	ld	a4,8(s1)
    80028b34:	4789                	li	a5,2
    80028b36:	0000a597          	auipc	a1,0xa
    80028b3a:	b7258593          	addi	a1,a1,-1166 # 800326a8 <__func__.0+0x2c0>
    80028b3e:	00f70663          	beq	a4,a5,80028b4a <vec_test_8+0x96>
    80028b42:	0000a597          	auipc	a1,0xa
    80028b46:	b7658593          	addi	a1,a1,-1162 # 800326b8 <__func__.0+0x2d0>
    80028b4a:	0000a517          	auipc	a0,0xa
    80028b4e:	bae50513          	addi	a0,a0,-1106 # 800326f8 <__func__.0+0x310>
    80028b52:	173060ef          	jal	8002f4c4 <printf>
    80028b56:	00033797          	auipc	a5,0x33
    80028b5a:	4bb7c783          	lbu	a5,1211(a5) # 8005c011 <excpt+0x1>
    80028b5e:	c789                	beqz	a5,80028b68 <vec_test_8+0xb4>
    80028b60:	6498                	ld	a4,8(s1)
    80028b62:	4789                	li	a5,2
    80028b64:	00f70c63          	beq	a4,a5,80028b7c <vec_test_8+0xc8>
    80028b68:	0000a517          	auipc	a0,0xa
    80028b6c:	b9850513          	addi	a0,a0,-1128 # 80032700 <__func__.0+0x318>
    80028b70:	155060ef          	jal	8002f4c4 <printf>
    80028b74:	02900513          	li	a0,41
    80028b78:	63a050ef          	jal	8002e1b2 <putchar>
    80028b7c:	4529                	li	a0,10
    80028b7e:	634050ef          	jal	8002e1b2 <putchar>
    80028b82:	00033417          	auipc	s0,0x33
    80028b86:	48f44403          	lbu	s0,1167(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028b8a:	0000a597          	auipc	a1,0xa
    80028b8e:	b2e58593          	addi	a1,a1,-1234 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028b92:	cc11                	beqz	s0,80028bae <vec_test_8+0xfa>
    80028b94:	6498                	ld	a4,8(s1)
    80028b96:	4789                	li	a5,2
    TEST_END();
    80028b98:	0000a597          	auipc	a1,0xa
    80028b9c:	b1058593          	addi	a1,a1,-1264 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028ba0:	00f70763          	beq	a4,a5,80028bae <vec_test_8+0xfa>
    80028ba4:	4401                	li	s0,0
    TEST_END();
    80028ba6:	0000a597          	auipc	a1,0xa
    80028baa:	b1258593          	addi	a1,a1,-1262 # 800326b8 <__func__.0+0x2d0>
    80028bae:	0000a517          	auipc	a0,0xa
    80028bb2:	bb250513          	addi	a0,a0,-1102 # 80032760 <__func__.0+0x378>
    80028bb6:	10f060ef          	jal	8002f4c4 <printf>
    80028bba:	4511                	li	a0,4
    80028bbc:	b58d80ef          	jal	80000f14 <goto_priv>
    80028bc0:	bb7d80ef          	jal	80001776 <reset_state>
}
    80028bc4:	60e2                	ld	ra,24(sp)
    80028bc6:	8522                	mv	a0,s0
    80028bc8:	6442                	ld	s0,16(sp)
    80028bca:	64a2                	ld	s1,8(sp)
    80028bcc:	6105                	addi	sp,sp,32
    80028bce:	8082                	ret

0000000080028bd0 <vec_test_9>:


bool vec_test_9(){
    80028bd0:	1101                	addi	sp,sp,-32

    TEST_START();
    80028bd2:	00009597          	auipc	a1,0x9
    80028bd6:	30e58593          	addi	a1,a1,782 # 80031ee0 <__func__.15>
    80028bda:	0000a517          	auipc	a0,0xa
    80028bde:	aee50513          	addi	a0,a0,-1298 # 800326c8 <__func__.0+0x2e0>
bool vec_test_9(){
    80028be2:	ec06                	sd	ra,24(sp)
    80028be4:	e822                	sd	s0,16(sp)
    80028be6:	e426                	sd	s1,8(sp)
    TEST_START();
    80028be8:	0dd060ef          	jal	8002f4c4 <printf>
    80028bec:	4529                	li	a0,10
    80028bee:	5c4050ef          	jal	8002e1b2 <putchar>
    // 如果vstart超出界限，建议实现陷阱
    /*
    向量配置的最大长度 VLMAX。这个值取决于向量长度寄存器（vl）、元素宽度（SEW）、和向量组乘数（LMUL）。
    (该测试用例只是简单弄个大的数来测试)
    */
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    80028bf2:	20000793          	li	a5,512
    80028bf6:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10);      
    80028bfa:	40000793          	li	a5,1024
    80028bfe:	3007b073          	csrc	mstatus,a5
// 设置 vadd 执行条件
static inline void set_vadd_conditions(int sew, int lmull, int vl, int v0_init, int v4_init, int v6_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80028c02:	47a1                	li	a5,8
    80028c04:	0117f2d7          	vsetvli	t0,a5,e32,m2,tu,mu
    80028c08:	5e00b057          	vmv.v.i	v0,1
    80028c0c:	5e01b257          	vmv.v.i	v4,3
    80028c10:	5e02b357          	vmv.v.i	v6,5
    int v6_init = 5;    // 初始化 v6 的值为 5

    // 设置 vadd 的执行条件
    set_vadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRW(CSR_VSTART,(uint64_t)-1);
    80028c14:	57fd                	li	a5,-1
    80028c16:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80028c1a:	008025f3          	csrr	a1,vstart
    80028c1e:	00015517          	auipc	a0,0x15
    80028c22:	d4250513          	addi	a0,a0,-702 # 8003d960 <__func__.0+0xb578>
    80028c26:	09f060ef          	jal	8002f4c4 <printf>
    TEST_SETUP_EXCEPT();
    80028c2a:	9eed80ef          	jal	80000e18 <test_setup_except_function>



// 执行 vadd.vv 指令
static inline void execute_vadd_vv() {
    asm volatile (
    80028c2e:	02430457          	vadd.vv	v8,v4,v6
    
    // 执行 vadd.vv 指令
    execute_vadd_vv();

    excpt_info();
    80028c32:	c28d80ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028c36:	08c00593          	li	a1,140
    80028c3a:	00015617          	auipc	a2,0x15
    80028c3e:	d3660613          	addi	a2,a2,-714 # 8003d970 <__func__.0+0xb588>
    80028c42:	0000a517          	auipc	a0,0xa
    80028c46:	a9e50513          	addi	a0,a0,-1378 # 800326e0 <__func__.0+0x2f8>
    80028c4a:	07b060ef          	jal	8002f4c4 <printf>
    80028c4e:	00033797          	auipc	a5,0x33
    80028c52:	3c37c783          	lbu	a5,963(a5) # 8005c011 <excpt+0x1>
    80028c56:	00033497          	auipc	s1,0x33
    80028c5a:	3ba48493          	addi	s1,s1,954 # 8005c010 <excpt>
    80028c5e:	0000a597          	auipc	a1,0xa
    80028c62:	a5a58593          	addi	a1,a1,-1446 # 800326b8 <__func__.0+0x2d0>
    80028c66:	cf89                	beqz	a5,80028c80 <vec_test_9+0xb0>
    80028c68:	6498                	ld	a4,8(s1)
    80028c6a:	4789                	li	a5,2
    80028c6c:	0000a597          	auipc	a1,0xa
    80028c70:	a3c58593          	addi	a1,a1,-1476 # 800326a8 <__func__.0+0x2c0>
    80028c74:	00f70663          	beq	a4,a5,80028c80 <vec_test_9+0xb0>
    80028c78:	0000a597          	auipc	a1,0xa
    80028c7c:	a4058593          	addi	a1,a1,-1472 # 800326b8 <__func__.0+0x2d0>
    80028c80:	0000a517          	auipc	a0,0xa
    80028c84:	a7850513          	addi	a0,a0,-1416 # 800326f8 <__func__.0+0x310>
    80028c88:	03d060ef          	jal	8002f4c4 <printf>
    80028c8c:	00033797          	auipc	a5,0x33
    80028c90:	3857c783          	lbu	a5,901(a5) # 8005c011 <excpt+0x1>
    80028c94:	c789                	beqz	a5,80028c9e <vec_test_9+0xce>
    80028c96:	6498                	ld	a4,8(s1)
    80028c98:	4789                	li	a5,2
    80028c9a:	00f70c63          	beq	a4,a5,80028cb2 <vec_test_9+0xe2>
    80028c9e:	0000a517          	auipc	a0,0xa
    80028ca2:	a6250513          	addi	a0,a0,-1438 # 80032700 <__func__.0+0x318>
    80028ca6:	01f060ef          	jal	8002f4c4 <printf>
    80028caa:	02900513          	li	a0,41
    80028cae:	504050ef          	jal	8002e1b2 <putchar>
    80028cb2:	4529                	li	a0,10
    80028cb4:	4fe050ef          	jal	8002e1b2 <putchar>
    80028cb8:	00033417          	auipc	s0,0x33
    80028cbc:	35944403          	lbu	s0,857(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028cc0:	0000a597          	auipc	a1,0xa
    80028cc4:	9f858593          	addi	a1,a1,-1544 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028cc8:	cc11                	beqz	s0,80028ce4 <vec_test_9+0x114>
    80028cca:	6498                	ld	a4,8(s1)
    80028ccc:	4789                	li	a5,2
    TEST_END();
    80028cce:	0000a597          	auipc	a1,0xa
    80028cd2:	9da58593          	addi	a1,a1,-1574 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028cd6:	00f70763          	beq	a4,a5,80028ce4 <vec_test_9+0x114>
    80028cda:	4401                	li	s0,0
    TEST_END();
    80028cdc:	0000a597          	auipc	a1,0xa
    80028ce0:	9dc58593          	addi	a1,a1,-1572 # 800326b8 <__func__.0+0x2d0>
    80028ce4:	0000a517          	auipc	a0,0xa
    80028ce8:	a7c50513          	addi	a0,a0,-1412 # 80032760 <__func__.0+0x378>
    80028cec:	7d8060ef          	jal	8002f4c4 <printf>
    80028cf0:	4511                	li	a0,4
    80028cf2:	a22d80ef          	jal	80000f14 <goto_priv>
    80028cf6:	a81d80ef          	jal	80001776 <reset_state>
}
    80028cfa:	60e2                	ld	ra,24(sp)
    80028cfc:	8522                	mv	a0,s0
    80028cfe:	6442                	ld	s0,16(sp)
    80028d00:	64a2                	ld	s1,8(sp)
    80028d02:	6105                	addi	sp,sp,32
    80028d04:	8082                	ret

0000000080028d06 <vec_test_10>:


bool vec_test_10(){
    80028d06:	1141                	addi	sp,sp,-16

    TEST_START();
    80028d08:	00009597          	auipc	a1,0x9
    80028d0c:	1e858593          	addi	a1,a1,488 # 80031ef0 <__func__.14>
    80028d10:	0000a517          	auipc	a0,0xa
    80028d14:	9b850513          	addi	a0,a0,-1608 # 800326c8 <__func__.0+0x2e0>
bool vec_test_10(){
    80028d18:	e406                	sd	ra,8(sp)
    TEST_START();
    80028d1a:	7aa060ef          	jal	8002f4c4 <printf>
    80028d1e:	4529                	li	a0,10
    80028d20:	492050ef          	jal	8002e1b2 <putchar>
    //当尝试执行某个向量指令时，如果 vstart 的值是该实现在使用相同 vtype 设置执行该指令时不可能产生的


    TEST_END();
    80028d24:	0000a597          	auipc	a1,0xa
    80028d28:	98458593          	addi	a1,a1,-1660 # 800326a8 <__func__.0+0x2c0>
    80028d2c:	0000a517          	auipc	a0,0xa
    80028d30:	a3450513          	addi	a0,a0,-1484 # 80032760 <__func__.0+0x378>
    80028d34:	790060ef          	jal	8002f4c4 <printf>
    80028d38:	4511                	li	a0,4
    80028d3a:	9dad80ef          	jal	80000f14 <goto_priv>
    80028d3e:	a39d80ef          	jal	80001776 <reset_state>

}
    80028d42:	60a2                	ld	ra,8(sp)
    80028d44:	4505                	li	a0,1
    80028d46:	0141                	addi	sp,sp,16
    80028d48:	8082                	ret

0000000080028d4a <vec_test_11>:


bool vec_test_11(){
    80028d4a:	1101                	addi	sp,sp,-32

    TEST_START();
    80028d4c:	00009597          	auipc	a1,0x9
    80028d50:	1b458593          	addi	a1,a1,436 # 80031f00 <__func__.13>
    80028d54:	0000a517          	auipc	a0,0xa
    80028d58:	97450513          	addi	a0,a0,-1676 # 800326c8 <__func__.0+0x2e0>
bool vec_test_11(){
    80028d5c:	ec06                	sd	ra,24(sp)
    80028d5e:	e822                	sd	s0,16(sp)
    80028d60:	e426                	sd	s1,8(sp)
    TEST_START();
    80028d62:	762060ef          	jal	8002f4c4 <printf>
    80028d66:	4529                	li	a0,10
    80028d68:	44a050ef          	jal	8002e1b2 <putchar>
    //如果 vill 位被设置位1，执行依赖 vtype 的向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028d6c:	20000793          	li	a5,512
    80028d70:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028d74:	40000793          	li	a5,1024
    80028d78:	3007a073          	csrs	mstatus,a5
    int lmull = 1;     // LMUL = 1
    int v0_init = 1;   // 初始化掩码寄存器 v0 的值为 1（全 1）
    int v4_init = 3;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    printf("vtype=%llx\n",CSRR(CSR_VTYPE));
    80028d7c:	c21025f3          	csrr	a1,vtype
    80028d80:	00015517          	auipc	a0,0x15
    80028d84:	c3050513          	addi	a0,a0,-976 # 8003d9b0 <__func__.0+0xb5c8>
    80028d88:	73c060ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    80028d8c:	88cd80ef          	jal	80000e18 <test_setup_except_function>
    asm volatile (
    80028d90:	5040a1d7          	vmsbf.m	v3,v4,v0.t
    execute_vmsbf_m(); 
    excpt_info();
    80028d94:	ac6d80ef          	jal	8000105a <excpt_info>
    
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028d98:	08c00593          	li	a1,140
    80028d9c:	00015617          	auipc	a2,0x15
    80028da0:	c2460613          	addi	a2,a2,-988 # 8003d9c0 <__func__.0+0xb5d8>
    80028da4:	0000a517          	auipc	a0,0xa
    80028da8:	93c50513          	addi	a0,a0,-1732 # 800326e0 <__func__.0+0x2f8>
    80028dac:	718060ef          	jal	8002f4c4 <printf>
    80028db0:	00033797          	auipc	a5,0x33
    80028db4:	2617c783          	lbu	a5,609(a5) # 8005c011 <excpt+0x1>
    80028db8:	00033497          	auipc	s1,0x33
    80028dbc:	25848493          	addi	s1,s1,600 # 8005c010 <excpt>
    80028dc0:	0000a597          	auipc	a1,0xa
    80028dc4:	8f858593          	addi	a1,a1,-1800 # 800326b8 <__func__.0+0x2d0>
    80028dc8:	cf89                	beqz	a5,80028de2 <vec_test_11+0x98>
    80028dca:	6498                	ld	a4,8(s1)
    80028dcc:	4789                	li	a5,2
    80028dce:	0000a597          	auipc	a1,0xa
    80028dd2:	8da58593          	addi	a1,a1,-1830 # 800326a8 <__func__.0+0x2c0>
    80028dd6:	00f70663          	beq	a4,a5,80028de2 <vec_test_11+0x98>
    80028dda:	0000a597          	auipc	a1,0xa
    80028dde:	8de58593          	addi	a1,a1,-1826 # 800326b8 <__func__.0+0x2d0>
    80028de2:	0000a517          	auipc	a0,0xa
    80028de6:	91650513          	addi	a0,a0,-1770 # 800326f8 <__func__.0+0x310>
    80028dea:	6da060ef          	jal	8002f4c4 <printf>
    80028dee:	00033797          	auipc	a5,0x33
    80028df2:	2237c783          	lbu	a5,547(a5) # 8005c011 <excpt+0x1>
    80028df6:	c789                	beqz	a5,80028e00 <vec_test_11+0xb6>
    80028df8:	6498                	ld	a4,8(s1)
    80028dfa:	4789                	li	a5,2
    80028dfc:	00f70c63          	beq	a4,a5,80028e14 <vec_test_11+0xca>
    80028e00:	0000a517          	auipc	a0,0xa
    80028e04:	90050513          	addi	a0,a0,-1792 # 80032700 <__func__.0+0x318>
    80028e08:	6bc060ef          	jal	8002f4c4 <printf>
    80028e0c:	02900513          	li	a0,41
    80028e10:	3a2050ef          	jal	8002e1b2 <putchar>
    80028e14:	4529                	li	a0,10
    80028e16:	39c050ef          	jal	8002e1b2 <putchar>
    80028e1a:	00033417          	auipc	s0,0x33
    80028e1e:	1f744403          	lbu	s0,503(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80028e22:	0000a597          	auipc	a1,0xa
    80028e26:	89658593          	addi	a1,a1,-1898 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028e2a:	cc11                	beqz	s0,80028e46 <vec_test_11+0xfc>
    80028e2c:	6498                	ld	a4,8(s1)
    80028e2e:	4789                	li	a5,2
    TEST_END();
    80028e30:	0000a597          	auipc	a1,0xa
    80028e34:	87858593          	addi	a1,a1,-1928 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028e38:	00f70763          	beq	a4,a5,80028e46 <vec_test_11+0xfc>
    80028e3c:	4401                	li	s0,0
    TEST_END();
    80028e3e:	0000a597          	auipc	a1,0xa
    80028e42:	87a58593          	addi	a1,a1,-1926 # 800326b8 <__func__.0+0x2d0>
    80028e46:	0000a517          	auipc	a0,0xa
    80028e4a:	91a50513          	addi	a0,a0,-1766 # 80032760 <__func__.0+0x378>
    80028e4e:	676060ef          	jal	8002f4c4 <printf>
    80028e52:	4511                	li	a0,4
    80028e54:	8c0d80ef          	jal	80000f14 <goto_priv>
    80028e58:	91fd80ef          	jal	80001776 <reset_state>

}
    80028e5c:	60e2                	ld	ra,24(sp)
    80028e5e:	8522                	mv	a0,s0
    80028e60:	6442                	ld	s0,16(sp)
    80028e62:	64a2                	ld	s1,8(sp)
    80028e64:	6105                	addi	sp,sp,32
    80028e66:	8082                	ret

0000000080028e68 <vec_test_12>:

bool vec_test_12(){
    80028e68:	1141                	addi	sp,sp,-16

    TEST_START();
    80028e6a:	00009597          	auipc	a1,0x9
    80028e6e:	0a658593          	addi	a1,a1,166 # 80031f10 <__func__.12>
    80028e72:	0000a517          	auipc	a0,0xa
    80028e76:	85650513          	addi	a0,a0,-1962 # 800326c8 <__func__.0+0x2e0>
bool vec_test_12(){
    80028e7a:	e406                	sd	ra,8(sp)
    TEST_START();
    80028e7c:	648060ef          	jal	8002f4c4 <printf>
    80028e80:	4529                	li	a0,10
    80028e82:	330050ef          	jal	8002e1b2 <putchar>
    //实现必须提供与所有受支持的 SEW 设置对应的 EEW 向量加载和存储。设置 EEW 宽度不受支持，执行向量加载/存储编码
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028e86:	20000793          	li	a5,512
    80028e8a:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028e8e:	40000793          	li	a5,1024
    80028e92:	3007b073          	csrc	mstatus,a5

    // set_vtype_with_invalid_eew();       //环境不支持设置



    TEST_END();
    80028e96:	0000a597          	auipc	a1,0xa
    80028e9a:	81258593          	addi	a1,a1,-2030 # 800326a8 <__func__.0+0x2c0>
    80028e9e:	0000a517          	auipc	a0,0xa
    80028ea2:	8c250513          	addi	a0,a0,-1854 # 80032760 <__func__.0+0x378>
    80028ea6:	61e060ef          	jal	8002f4c4 <printf>
    80028eaa:	4511                	li	a0,4
    80028eac:	868d80ef          	jal	80000f14 <goto_priv>
    80028eb0:	8c7d80ef          	jal	80001776 <reset_state>

}
    80028eb4:	60a2                	ld	ra,8(sp)
    80028eb6:	4505                	li	a0,1
    80028eb8:	0141                	addi	sp,sp,16
    80028eba:	8082                	ret

0000000080028ebc <vec_test_13>:

bool vec_test_13(){
    80028ebc:	1141                	addi	sp,sp,-16

    TEST_START();
    80028ebe:	00009597          	auipc	a1,0x9
    80028ec2:	06258593          	addi	a1,a1,98 # 80031f20 <__func__.11>
    80028ec6:	0000a517          	auipc	a0,0xa
    80028eca:	80250513          	addi	a0,a0,-2046 # 800326c8 <__func__.0+0x2e0>
bool vec_test_13(){
    80028ece:	e406                	sd	ra,8(sp)
    TEST_START();
    80028ed0:	5f4060ef          	jal	8002f4c4 <printf>
    80028ed4:	4529                	li	a0,10
    80028ed6:	2dc050ef          	jal	8002e1b2 <putchar>
    //设置不支持的 EEW 值，执行 vl<nf>r 指令

    TEST_END();
    80028eda:	00009597          	auipc	a1,0x9
    80028ede:	7ce58593          	addi	a1,a1,1998 # 800326a8 <__func__.0+0x2c0>
    80028ee2:	0000a517          	auipc	a0,0xa
    80028ee6:	87e50513          	addi	a0,a0,-1922 # 80032760 <__func__.0+0x378>
    80028eea:	5da060ef          	jal	8002f4c4 <printf>
    80028eee:	4511                	li	a0,4
    80028ef0:	824d80ef          	jal	80000f14 <goto_priv>
    80028ef4:	883d80ef          	jal	80001776 <reset_state>

}
    80028ef8:	60a2                	ld	ra,8(sp)
    80028efa:	4505                	li	a0,1
    80028efc:	0141                	addi	sp,sp,16
    80028efe:	8082                	ret

0000000080028f00 <vec_test_14>:



bool vec_test_14(){
    80028f00:	1101                	addi	sp,sp,-32

    TEST_START();
    80028f02:	00009597          	auipc	a1,0x9
    80028f06:	02e58593          	addi	a1,a1,46 # 80031f30 <__func__.10>
    80028f0a:	00009517          	auipc	a0,0x9
    80028f0e:	7be50513          	addi	a0,a0,1982 # 800326c8 <__func__.0+0x2e0>
bool vec_test_14(){
    80028f12:	ec06                	sd	ra,24(sp)
    80028f14:	e822                	sd	s0,16(sp)
    80028f16:	e426                	sd	s1,8(sp)
    TEST_START();
    80028f18:	5ac060ef          	jal	8002f4c4 <printf>
    80028f1c:	4529                	li	a0,10
    80028f1e:	294050ef          	jal	8002e1b2 <putchar>
    //浮点单元状态字段 mstatus.FS 被设置为 Off，任何尝试执行向量浮点指令
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028f22:	20000793          	li	a5,512
    80028f26:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028f2a:	40000793          	li	a5,1024
    80028f2e:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    80028f32:	6709                	lui	a4,0x2
    80028f34:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028f38:	6791                	lui	a5,0x4
    80028f3a:	3007b073          	csrc	mstatus,a5
// 设置向量浮点加法指令的执行条件
static inline void set_vfadd_conditions(int sew, int lmull, int vl, float v0_init, float v4_init, float v6_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80028f3e:	00016617          	auipc	a2,0x16
    80028f42:	0fa62787          	flw	fa5,250(a2) # 8003f038 <__func__.0+0xcc50>
    80028f46:	00016617          	auipc	a2,0x16
    80028f4a:	0f662707          	flw	fa4,246(a2) # 8003f03c <__func__.0+0xcc54>
    80028f4e:	00016617          	auipc	a2,0x16
    80028f52:	0f262687          	flw	fa3,242(a2) # 8003f040 <__func__.0+0xcc58>
    80028f56:	46a1                	li	a3,8
    80028f58:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    80028f5c:	5e07d057          	vfmv.v.f	v0,fa5
    80028f60:	5e075257          	vfmv.v.f	v4,fa4
    80028f64:	5e06d357          	vfmv.v.f	v6,fa3
    float v6_init = 2.0; // 初始化 v6 的值为 2.0

    // 设置 vfadd 执行条件
    set_vfadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRC(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs = 0
    80028f68:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028f6c:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    80028f70:	ea9d70ef          	jal	80000e18 <test_setup_except_function>
    );
}

// 执行向量浮点加法指令
static inline void execute_vfadd() {
    asm volatile (
    80028f74:	02431457          	vfadd.vv	v8,v4,v6
    // 执行 vfadd 指令
    execute_vfadd();

    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80028f78:	08c00593          	li	a1,140
    80028f7c:	00015617          	auipc	a2,0x15
    80028f80:	a8460613          	addi	a2,a2,-1404 # 8003da00 <__func__.0+0xb618>
    80028f84:	00009517          	auipc	a0,0x9
    80028f88:	75c50513          	addi	a0,a0,1884 # 800326e0 <__func__.0+0x2f8>
    80028f8c:	538060ef          	jal	8002f4c4 <printf>
    80028f90:	00033797          	auipc	a5,0x33
    80028f94:	0817c783          	lbu	a5,129(a5) # 8005c011 <excpt+0x1>
    80028f98:	00033497          	auipc	s1,0x33
    80028f9c:	07848493          	addi	s1,s1,120 # 8005c010 <excpt>
    80028fa0:	00009597          	auipc	a1,0x9
    80028fa4:	71858593          	addi	a1,a1,1816 # 800326b8 <__func__.0+0x2d0>
    80028fa8:	cf89                	beqz	a5,80028fc2 <vec_test_14+0xc2>
    80028faa:	6498                	ld	a4,8(s1)
    80028fac:	4789                	li	a5,2
    80028fae:	00009597          	auipc	a1,0x9
    80028fb2:	6fa58593          	addi	a1,a1,1786 # 800326a8 <__func__.0+0x2c0>
    80028fb6:	00f70663          	beq	a4,a5,80028fc2 <vec_test_14+0xc2>
    80028fba:	00009597          	auipc	a1,0x9
    80028fbe:	6fe58593          	addi	a1,a1,1790 # 800326b8 <__func__.0+0x2d0>
    80028fc2:	00009517          	auipc	a0,0x9
    80028fc6:	73650513          	addi	a0,a0,1846 # 800326f8 <__func__.0+0x310>
    80028fca:	4fa060ef          	jal	8002f4c4 <printf>
    80028fce:	00033797          	auipc	a5,0x33
    80028fd2:	0437c783          	lbu	a5,67(a5) # 8005c011 <excpt+0x1>
    80028fd6:	c789                	beqz	a5,80028fe0 <vec_test_14+0xe0>
    80028fd8:	6498                	ld	a4,8(s1)
    80028fda:	4789                	li	a5,2
    80028fdc:	00f70c63          	beq	a4,a5,80028ff4 <vec_test_14+0xf4>
    80028fe0:	00009517          	auipc	a0,0x9
    80028fe4:	72050513          	addi	a0,a0,1824 # 80032700 <__func__.0+0x318>
    80028fe8:	4dc060ef          	jal	8002f4c4 <printf>
    80028fec:	02900513          	li	a0,41
    80028ff0:	1c2050ef          	jal	8002e1b2 <putchar>
    80028ff4:	4529                	li	a0,10
    80028ff6:	1bc050ef          	jal	8002e1b2 <putchar>
    80028ffa:	00033417          	auipc	s0,0x33
    80028ffe:	01744403          	lbu	s0,23(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029002:	00009597          	auipc	a1,0x9
    80029006:	6b658593          	addi	a1,a1,1718 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    8002900a:	cc11                	beqz	s0,80029026 <vec_test_14+0x126>
    8002900c:	6498                	ld	a4,8(s1)
    8002900e:	4789                	li	a5,2
    TEST_END();
    80029010:	00009597          	auipc	a1,0x9
    80029014:	69858593          	addi	a1,a1,1688 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80029018:	00f70763          	beq	a4,a5,80029026 <vec_test_14+0x126>
    8002901c:	4401                	li	s0,0
    TEST_END();
    8002901e:	00009597          	auipc	a1,0x9
    80029022:	69a58593          	addi	a1,a1,1690 # 800326b8 <__func__.0+0x2d0>
    80029026:	00009517          	auipc	a0,0x9
    8002902a:	73a50513          	addi	a0,a0,1850 # 80032760 <__func__.0+0x378>
    8002902e:	496060ef          	jal	8002f4c4 <printf>
    80029032:	4511                	li	a0,4
    80029034:	ee1d70ef          	jal	80000f14 <goto_priv>
    80029038:	f3ed80ef          	jal	80001776 <reset_state>

}
    8002903c:	60e2                	ld	ra,24(sp)
    8002903e:	8522                	mv	a0,s0
    80029040:	6442                	ld	s0,16(sp)
    80029042:	64a2                	ld	s1,8(sp)
    80029044:	6105                	addi	sp,sp,32
    80029046:	8082                	ret

0000000080029048 <vec_test_15>:


bool vec_test_15(){
    80029048:	1101                	addi	sp,sp,-32

    TEST_START();
    8002904a:	00009597          	auipc	a1,0x9
    8002904e:	ef658593          	addi	a1,a1,-266 # 80031f40 <__func__.9>
    80029052:	00009517          	auipc	a0,0x9
    80029056:	67650513          	addi	a0,a0,1654 # 800326c8 <__func__.0+0x2e0>
bool vec_test_15(){
    8002905a:	ec06                	sd	ra,24(sp)
    8002905c:	e822                	sd	s0,16(sp)
    8002905e:	e426                	sd	s1,8(sp)
    TEST_START();
    80029060:	464060ef          	jal	8002f4c4 <printf>
    80029064:	4529                	li	a0,10
    80029066:	14c050ef          	jal	8002e1b2 <putchar>
    //如果实现了虚拟化扩展且 V=1，如果 vsstatus.FS 或 mstatus.FS 被设置为 Off，任何尝试执行向量浮点指令的操作
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    8002906a:	20000793          	li	a5,512
    8002906e:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80029072:	40000793          	li	a5,1024
    80029076:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    8002907a:	6709                	lui	a4,0x2
    8002907c:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80029080:	6791                	lui	a5,0x4
    80029082:	3007b073          	csrc	mstatus,a5
    asm volatile (
    80029086:	00016617          	auipc	a2,0x16
    8002908a:	fb262787          	flw	fa5,-78(a2) # 8003f038 <__func__.0+0xcc50>
    8002908e:	00016617          	auipc	a2,0x16
    80029092:	fae62707          	flw	fa4,-82(a2) # 8003f03c <__func__.0+0xcc54>
    80029096:	00016617          	auipc	a2,0x16
    8002909a:	faa62687          	flw	fa3,-86(a2) # 8003f040 <__func__.0+0xcc58>
    8002909e:	46a1                	li	a3,8
    800290a0:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    800290a4:	5e07d057          	vfmv.v.f	v0,fa5
    800290a8:	5e075257          	vfmv.v.f	v4,fa4
    800290ac:	5e06d357          	vfmv.v.f	v6,fa3
    float v6_init = 2.0; // 初始化 v6 的值为 2.0

    // 设置 vfadd 执行条件
    set_vfadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    800290b0:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 14); 
    800290b4:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 13);      //设置vsstatus.fs = 0
    800290b8:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 14); 
    800290bc:	2007b073          	csrc	vsstatus,a5

    TEST_SETUP_EXCEPT();
    800290c0:	d59d70ef          	jal	80000e18 <test_setup_except_function>
    // 执行 vfadd 指令
    goto_priv(PRIV_VU);
    800290c4:	4501                	li	a0,0
    800290c6:	e4fd70ef          	jal	80000f14 <goto_priv>
    asm volatile (
    800290ca:	02431457          	vfadd.vv	v8,v4,v6
    execute_vfadd();
    excpt_info();
    800290ce:	f8dd70ef          	jal	8000105a <excpt_info>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    800290d2:	08c00593          	li	a1,140
    800290d6:	00015617          	auipc	a2,0x15
    800290da:	96a60613          	addi	a2,a2,-1686 # 8003da40 <__func__.0+0xb658>
    800290de:	00009517          	auipc	a0,0x9
    800290e2:	60250513          	addi	a0,a0,1538 # 800326e0 <__func__.0+0x2f8>
    800290e6:	3de060ef          	jal	8002f4c4 <printf>
    800290ea:	00033797          	auipc	a5,0x33
    800290ee:	f277c783          	lbu	a5,-217(a5) # 8005c011 <excpt+0x1>
    800290f2:	00033497          	auipc	s1,0x33
    800290f6:	f1e48493          	addi	s1,s1,-226 # 8005c010 <excpt>
    800290fa:	00009597          	auipc	a1,0x9
    800290fe:	5be58593          	addi	a1,a1,1470 # 800326b8 <__func__.0+0x2d0>
    80029102:	cf89                	beqz	a5,8002911c <vec_test_15+0xd4>
    80029104:	6498                	ld	a4,8(s1)
    80029106:	4789                	li	a5,2
    80029108:	00009597          	auipc	a1,0x9
    8002910c:	5a058593          	addi	a1,a1,1440 # 800326a8 <__func__.0+0x2c0>
    80029110:	00f70663          	beq	a4,a5,8002911c <vec_test_15+0xd4>
    80029114:	00009597          	auipc	a1,0x9
    80029118:	5a458593          	addi	a1,a1,1444 # 800326b8 <__func__.0+0x2d0>
    8002911c:	00009517          	auipc	a0,0x9
    80029120:	5dc50513          	addi	a0,a0,1500 # 800326f8 <__func__.0+0x310>
    80029124:	3a0060ef          	jal	8002f4c4 <printf>
    80029128:	00033797          	auipc	a5,0x33
    8002912c:	ee97c783          	lbu	a5,-279(a5) # 8005c011 <excpt+0x1>
    80029130:	c789                	beqz	a5,8002913a <vec_test_15+0xf2>
    80029132:	6498                	ld	a4,8(s1)
    80029134:	4789                	li	a5,2
    80029136:	00f70c63          	beq	a4,a5,8002914e <vec_test_15+0x106>
    8002913a:	00009517          	auipc	a0,0x9
    8002913e:	5c650513          	addi	a0,a0,1478 # 80032700 <__func__.0+0x318>
    80029142:	382060ef          	jal	8002f4c4 <printf>
    80029146:	02900513          	li	a0,41
    8002914a:	068050ef          	jal	8002e1b2 <putchar>
    8002914e:	4529                	li	a0,10
    80029150:	062050ef          	jal	8002e1b2 <putchar>
    80029154:	00033417          	auipc	s0,0x33
    80029158:	ebd44403          	lbu	s0,-323(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002915c:	00009597          	auipc	a1,0x9
    80029160:	55c58593          	addi	a1,a1,1372 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    80029164:	cc11                	beqz	s0,80029180 <vec_test_15+0x138>
    80029166:	6498                	ld	a4,8(s1)
    80029168:	4789                	li	a5,2
    TEST_END();
    8002916a:	00009597          	auipc	a1,0x9
    8002916e:	53e58593          	addi	a1,a1,1342 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    80029172:	00f70763          	beq	a4,a5,80029180 <vec_test_15+0x138>
    80029176:	4401                	li	s0,0
    TEST_END();
    80029178:	00009597          	auipc	a1,0x9
    8002917c:	54058593          	addi	a1,a1,1344 # 800326b8 <__func__.0+0x2d0>
    80029180:	00009517          	auipc	a0,0x9
    80029184:	5e050513          	addi	a0,a0,1504 # 80032760 <__func__.0+0x378>
    80029188:	33c060ef          	jal	8002f4c4 <printf>
    8002918c:	4511                	li	a0,4
    8002918e:	d87d70ef          	jal	80000f14 <goto_priv>
    80029192:	de4d80ef          	jal	80001776 <reset_state>

}
    80029196:	60e2                	ld	ra,24(sp)
    80029198:	8522                	mv	a0,s0
    8002919a:	6442                	ld	s0,16(sp)
    8002919c:	64a2                	ld	s1,8(sp)
    8002919e:	6105                	addi	sp,sp,32
    800291a0:	8082                	ret

00000000800291a2 <vec_test_16>:





bool vec_test_16(){
    800291a2:	1101                	addi	sp,sp,-32

    TEST_START();
    800291a4:	00009597          	auipc	a1,0x9
    800291a8:	dac58593          	addi	a1,a1,-596 # 80031f50 <__func__.8>
    800291ac:	00009517          	auipc	a0,0x9
    800291b0:	51c50513          	addi	a0,a0,1308 # 800326c8 <__func__.0+0x2e0>
bool vec_test_16(){
    800291b4:	ec06                	sd	ra,24(sp)
    800291b6:	e822                	sd	s0,16(sp)
    800291b8:	e426                	sd	s1,8(sp)
    TEST_START();
    800291ba:	30a060ef          	jal	8002f4c4 <printf>
    800291be:	4529                	li	a0,10
    800291c0:	7f3040ef          	jal	8002e1b2 <putchar>
    //如果 vstart 非零，执行vector reduction instructions操作


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800291c4:	20000793          	li	a5,512
    800291c8:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800291cc:	40000793          	li	a5,1024
    800291d0:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800291d4:	4789                	li	a5,2
    800291d6:	0117f2d7          	vsetvli	t0,a5,e32,m2,tu,mu
    800291da:	5e00b057          	vmv.v.i	v0,1
    800291de:	5e003257          	vmv.v.i	v4,0
    800291e2:	5e00b357          	vmv.v.i	v6,1
    int vs2_init = 1;    // 初始化 v6（源数据）为 1


    // 设置 vredsum.vs 的执行条件
    set_vredsum_vs_conditions(sew, lmull, vl, vs1_init, vs2_init);
    excpt_info();
    800291e6:	e75d70ef          	jal	8000105a <excpt_info>

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800291ea:	57fd                	li	a5,-1
    800291ec:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800291f0:	008025f3          	csrr	a1,vstart
    800291f4:	00014517          	auipc	a0,0x14
    800291f8:	76c50513          	addi	a0,a0,1900 # 8003d960 <__func__.0+0xb578>
    800291fc:	2c8060ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    80029200:	c19d70ef          	jal	80000e18 <test_setup_except_function>
    asm volatile (
    80029204:	00222157          	vredsum.vs	v2,v2,v4,v0.t
    execute_vredsum_vs();           // 执行 vredsum.vs 指令并获取结果
    excpt_info();
    80029208:	e53d70ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    8002920c:	08c00593          	li	a1,140
    80029210:	00015617          	auipc	a2,0x15
    80029214:	88060613          	addi	a2,a2,-1920 # 8003da90 <__func__.0+0xb6a8>
    80029218:	00009517          	auipc	a0,0x9
    8002921c:	4c850513          	addi	a0,a0,1224 # 800326e0 <__func__.0+0x2f8>
    80029220:	2a4060ef          	jal	8002f4c4 <printf>
    80029224:	00033797          	auipc	a5,0x33
    80029228:	ded7c783          	lbu	a5,-531(a5) # 8005c011 <excpt+0x1>
    8002922c:	00033497          	auipc	s1,0x33
    80029230:	de448493          	addi	s1,s1,-540 # 8005c010 <excpt>
    80029234:	00009597          	auipc	a1,0x9
    80029238:	48458593          	addi	a1,a1,1156 # 800326b8 <__func__.0+0x2d0>
    8002923c:	cf89                	beqz	a5,80029256 <vec_test_16+0xb4>
    8002923e:	6498                	ld	a4,8(s1)
    80029240:	4789                	li	a5,2
    80029242:	00009597          	auipc	a1,0x9
    80029246:	46658593          	addi	a1,a1,1126 # 800326a8 <__func__.0+0x2c0>
    8002924a:	00f70663          	beq	a4,a5,80029256 <vec_test_16+0xb4>
    8002924e:	00009597          	auipc	a1,0x9
    80029252:	46a58593          	addi	a1,a1,1130 # 800326b8 <__func__.0+0x2d0>
    80029256:	00009517          	auipc	a0,0x9
    8002925a:	4a250513          	addi	a0,a0,1186 # 800326f8 <__func__.0+0x310>
    8002925e:	266060ef          	jal	8002f4c4 <printf>
    80029262:	00033797          	auipc	a5,0x33
    80029266:	daf7c783          	lbu	a5,-593(a5) # 8005c011 <excpt+0x1>
    8002926a:	c789                	beqz	a5,80029274 <vec_test_16+0xd2>
    8002926c:	6498                	ld	a4,8(s1)
    8002926e:	4789                	li	a5,2
    80029270:	00f70c63          	beq	a4,a5,80029288 <vec_test_16+0xe6>
    80029274:	00009517          	auipc	a0,0x9
    80029278:	48c50513          	addi	a0,a0,1164 # 80032700 <__func__.0+0x318>
    8002927c:	248060ef          	jal	8002f4c4 <printf>
    80029280:	02900513          	li	a0,41
    80029284:	72f040ef          	jal	8002e1b2 <putchar>
    80029288:	4529                	li	a0,10
    8002928a:	729040ef          	jal	8002e1b2 <putchar>
    8002928e:	00033417          	auipc	s0,0x33
    80029292:	d8344403          	lbu	s0,-637(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029296:	00009597          	auipc	a1,0x9
    8002929a:	42258593          	addi	a1,a1,1058 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    8002929e:	cc11                	beqz	s0,800292ba <vec_test_16+0x118>
    800292a0:	6498                	ld	a4,8(s1)
    800292a2:	4789                	li	a5,2
    TEST_END();
    800292a4:	00009597          	auipc	a1,0x9
    800292a8:	40458593          	addi	a1,a1,1028 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    800292ac:	00f70763          	beq	a4,a5,800292ba <vec_test_16+0x118>
    800292b0:	4401                	li	s0,0
    TEST_END();
    800292b2:	00009597          	auipc	a1,0x9
    800292b6:	40658593          	addi	a1,a1,1030 # 800326b8 <__func__.0+0x2d0>
    800292ba:	00009517          	auipc	a0,0x9
    800292be:	4a650513          	addi	a0,a0,1190 # 80032760 <__func__.0+0x378>
    800292c2:	202060ef          	jal	8002f4c4 <printf>
    800292c6:	4511                	li	a0,4
    800292c8:	c4dd70ef          	jal	80000f14 <goto_priv>
    800292cc:	caad80ef          	jal	80001776 <reset_state>

}
    800292d0:	60e2                	ld	ra,24(sp)
    800292d2:	8522                	mv	a0,s0
    800292d4:	6442                	ld	s0,16(sp)
    800292d6:	64a2                	ld	s1,8(sp)
    800292d8:	6105                	addi	sp,sp,32
    800292da:	8082                	ret

00000000800292dc <vec_test_17>:



bool vec_test_17(){
    800292dc:	1101                	addi	sp,sp,-32

    TEST_START();
    800292de:	00009597          	auipc	a1,0x9
    800292e2:	c8258593          	addi	a1,a1,-894 # 80031f60 <__func__.7>
    800292e6:	00009517          	auipc	a0,0x9
    800292ea:	3e250513          	addi	a0,a0,994 # 800326c8 <__func__.0+0x2e0>
bool vec_test_17(){
    800292ee:	ec06                	sd	ra,24(sp)
    800292f0:	e822                	sd	s0,16(sp)
    800292f2:	e426                	sd	s1,8(sp)
    TEST_START();
    800292f4:	1d0060ef          	jal	8002f4c4 <printf>
    800292f8:	4529                	li	a0,10
    800292fa:	6b9040ef          	jal	8002e1b2 <putchar>
    //如果 vstart 非零，执行vcpop.m指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800292fe:	20000793          	li	a5,512
    80029302:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029306:	40000793          	li	a5,1024
    8002930a:	3007a073          	csrs	mstatus,a5
    asm volatile (
    8002930e:	47a1                	li	a5,8
    80029310:	4745                	li	a4,17
    80029312:	80e7f2d7          	vsetvl	t0,a5,a4
    80029316:	5e00b057          	vmv.v.i	v0,1
    8002931a:	5e00b157          	vmv.v.i	v2,1
    int v2_init = 1;     // 初始化 v2 的值为全 1

    // 设置 vcpop.m 的执行条件
    set_vcpop_conditions(vl, sew, lmull, v0_init, v2_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    8002931e:	57fd                	li	a5,-1
    80029320:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029324:	008025f3          	csrr	a1,vstart
    80029328:	00014517          	auipc	a0,0x14
    8002932c:	63850513          	addi	a0,a0,1592 # 8003d960 <__func__.0+0xb578>
    80029330:	194060ef          	jal	8002f4c4 <printf>

    // 执行 vcpop.m 指令并返回结果
    TEST_SETUP_EXCEPT();
    80029334:	ae5d70ef          	jal	80000e18 <test_setup_except_function>
    uint32_t result = execute_vcpop_v2();
    80029338:	402827d7          	vcpop.m	a5,v2,v0.t

    excpt_info();
    8002933c:	d1fd70ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    80029340:	08c00593          	li	a1,140
    80029344:	00014617          	auipc	a2,0x14
    80029348:	78c60613          	addi	a2,a2,1932 # 8003dad0 <__func__.0+0xb6e8>
    8002934c:	00009517          	auipc	a0,0x9
    80029350:	39450513          	addi	a0,a0,916 # 800326e0 <__func__.0+0x2f8>
    80029354:	170060ef          	jal	8002f4c4 <printf>
    80029358:	00033797          	auipc	a5,0x33
    8002935c:	cb97c783          	lbu	a5,-839(a5) # 8005c011 <excpt+0x1>
    80029360:	00033497          	auipc	s1,0x33
    80029364:	cb048493          	addi	s1,s1,-848 # 8005c010 <excpt>
    80029368:	00009597          	auipc	a1,0x9
    8002936c:	35058593          	addi	a1,a1,848 # 800326b8 <__func__.0+0x2d0>
    80029370:	cf89                	beqz	a5,8002938a <vec_test_17+0xae>
    80029372:	6498                	ld	a4,8(s1)
    80029374:	4789                	li	a5,2
    80029376:	00009597          	auipc	a1,0x9
    8002937a:	33258593          	addi	a1,a1,818 # 800326a8 <__func__.0+0x2c0>
    8002937e:	00f70663          	beq	a4,a5,8002938a <vec_test_17+0xae>
    80029382:	00009597          	auipc	a1,0x9
    80029386:	33658593          	addi	a1,a1,822 # 800326b8 <__func__.0+0x2d0>
    8002938a:	00009517          	auipc	a0,0x9
    8002938e:	36e50513          	addi	a0,a0,878 # 800326f8 <__func__.0+0x310>
    80029392:	132060ef          	jal	8002f4c4 <printf>
    80029396:	00033797          	auipc	a5,0x33
    8002939a:	c7b7c783          	lbu	a5,-901(a5) # 8005c011 <excpt+0x1>
    8002939e:	c789                	beqz	a5,800293a8 <vec_test_17+0xcc>
    800293a0:	6498                	ld	a4,8(s1)
    800293a2:	4789                	li	a5,2
    800293a4:	00f70c63          	beq	a4,a5,800293bc <vec_test_17+0xe0>
    800293a8:	00009517          	auipc	a0,0x9
    800293ac:	35850513          	addi	a0,a0,856 # 80032700 <__func__.0+0x318>
    800293b0:	114060ef          	jal	8002f4c4 <printf>
    800293b4:	02900513          	li	a0,41
    800293b8:	5fb040ef          	jal	8002e1b2 <putchar>
    800293bc:	4529                	li	a0,10
    800293be:	5f5040ef          	jal	8002e1b2 <putchar>
    800293c2:	00033417          	auipc	s0,0x33
    800293c6:	c4f44403          	lbu	s0,-945(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800293ca:	00009597          	auipc	a1,0x9
    800293ce:	2ee58593          	addi	a1,a1,750 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    800293d2:	cc11                	beqz	s0,800293ee <vec_test_17+0x112>
    800293d4:	6498                	ld	a4,8(s1)
    800293d6:	4789                	li	a5,2
    TEST_END();
    800293d8:	00009597          	auipc	a1,0x9
    800293dc:	2d058593          	addi	a1,a1,720 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    800293e0:	00f70763          	beq	a4,a5,800293ee <vec_test_17+0x112>
    800293e4:	4401                	li	s0,0
    TEST_END();
    800293e6:	00009597          	auipc	a1,0x9
    800293ea:	2d258593          	addi	a1,a1,722 # 800326b8 <__func__.0+0x2d0>
    800293ee:	00009517          	auipc	a0,0x9
    800293f2:	37250513          	addi	a0,a0,882 # 80032760 <__func__.0+0x378>
    800293f6:	0ce060ef          	jal	8002f4c4 <printf>
    800293fa:	4511                	li	a0,4
    800293fc:	b19d70ef          	jal	80000f14 <goto_priv>
    80029400:	b76d80ef          	jal	80001776 <reset_state>

}
    80029404:	60e2                	ld	ra,24(sp)
    80029406:	8522                	mv	a0,s0
    80029408:	6442                	ld	s0,16(sp)
    8002940a:	64a2                	ld	s1,8(sp)
    8002940c:	6105                	addi	sp,sp,32
    8002940e:	8082                	ret

0000000080029410 <vec_test_18>:



bool vec_test_18(){
    80029410:	1101                	addi	sp,sp,-32

    TEST_START();
    80029412:	00009597          	auipc	a1,0x9
    80029416:	b5e58593          	addi	a1,a1,-1186 # 80031f70 <__func__.6>
    8002941a:	00009517          	auipc	a0,0x9
    8002941e:	2ae50513          	addi	a0,a0,686 # 800326c8 <__func__.0+0x2e0>
bool vec_test_18(){
    80029422:	ec06                	sd	ra,24(sp)
    80029424:	e822                	sd	s0,16(sp)
    80029426:	e426                	sd	s1,8(sp)
    TEST_START();
    80029428:	09c060ef          	jal	8002f4c4 <printf>
    8002942c:	4529                	li	a0,10
    8002942e:	585040ef          	jal	8002e1b2 <putchar>
    //如果 vstart 非零，执行vfirst指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029432:	20000793          	li	a5,512
    80029436:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    8002943a:	40000793          	li	a5,1024
    8002943e:	3007a073          	csrs	mstatus,a5
    int lmull = 1;     // LMUL = 1
    int vl = 2;        // 向量长度（处理 2 个元素）
    int v0_init = 1;   // 初始化 v0 的值为 1
    int v4_init = 2;   // 初始化 v4 的值为 2

    TEST_SETUP_EXCEPT();
    80029442:	9d7d70ef          	jal	80000e18 <test_setup_except_function>
    asm volatile (
    80029446:	4785                	li	a5,1
    80029448:	4749                	li	a4,18
    8002944a:	80e7f2d7          	vsetvl	t0,a5,a4
    8002944e:	5e00b057          	vmv.v.i	v0,1
    80029452:	5e013257          	vmv.v.i	v4,2

    // 设置 vfirst.m 的执行条件
    set_vfirst_m_conditions(vl, sew, lmull, v0_init, v4_init);
    excpt_info();
    80029456:	c05d70ef          	jal	8000105a <excpt_info>

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    8002945a:	57fd                	li	a5,-1
    8002945c:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029460:	008025f3          	csrr	a1,vstart
    80029464:	00014517          	auipc	a0,0x14
    80029468:	4fc50513          	addi	a0,a0,1276 # 8003d960 <__func__.0+0xb578>
    8002946c:	058060ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    80029470:	9a9d70ef          	jal	80000e18 <test_setup_except_function>
    EXECUTE_VFIRST_M_V3();
    80029474:	4038a7d7          	vfirst.m	a5,v3,v0.t
    excpt_info();
    80029478:	be3d70ef          	jal	8000105a <excpt_info>


    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    8002947c:	08c00593          	li	a1,140
    80029480:	00014617          	auipc	a2,0x14
    80029484:	69060613          	addi	a2,a2,1680 # 8003db10 <__func__.0+0xb728>
    80029488:	00009517          	auipc	a0,0x9
    8002948c:	25850513          	addi	a0,a0,600 # 800326e0 <__func__.0+0x2f8>
    80029490:	034060ef          	jal	8002f4c4 <printf>
    80029494:	00033797          	auipc	a5,0x33
    80029498:	b7d7c783          	lbu	a5,-1155(a5) # 8005c011 <excpt+0x1>
    8002949c:	00033497          	auipc	s1,0x33
    800294a0:	b7448493          	addi	s1,s1,-1164 # 8005c010 <excpt>
    800294a4:	00009597          	auipc	a1,0x9
    800294a8:	21458593          	addi	a1,a1,532 # 800326b8 <__func__.0+0x2d0>
    800294ac:	cf89                	beqz	a5,800294c6 <vec_test_18+0xb6>
    800294ae:	6498                	ld	a4,8(s1)
    800294b0:	4789                	li	a5,2
    800294b2:	00009597          	auipc	a1,0x9
    800294b6:	1f658593          	addi	a1,a1,502 # 800326a8 <__func__.0+0x2c0>
    800294ba:	00f70663          	beq	a4,a5,800294c6 <vec_test_18+0xb6>
    800294be:	00009597          	auipc	a1,0x9
    800294c2:	1fa58593          	addi	a1,a1,506 # 800326b8 <__func__.0+0x2d0>
    800294c6:	00009517          	auipc	a0,0x9
    800294ca:	23250513          	addi	a0,a0,562 # 800326f8 <__func__.0+0x310>
    800294ce:	7f7050ef          	jal	8002f4c4 <printf>
    800294d2:	00033797          	auipc	a5,0x33
    800294d6:	b3f7c783          	lbu	a5,-1217(a5) # 8005c011 <excpt+0x1>
    800294da:	c789                	beqz	a5,800294e4 <vec_test_18+0xd4>
    800294dc:	6498                	ld	a4,8(s1)
    800294de:	4789                	li	a5,2
    800294e0:	00f70c63          	beq	a4,a5,800294f8 <vec_test_18+0xe8>
    800294e4:	00009517          	auipc	a0,0x9
    800294e8:	21c50513          	addi	a0,a0,540 # 80032700 <__func__.0+0x318>
    800294ec:	7d9050ef          	jal	8002f4c4 <printf>
    800294f0:	02900513          	li	a0,41
    800294f4:	4bf040ef          	jal	8002e1b2 <putchar>
    800294f8:	4529                	li	a0,10
    800294fa:	4b9040ef          	jal	8002e1b2 <putchar>
    800294fe:	00033417          	auipc	s0,0x33
    80029502:	b1344403          	lbu	s0,-1261(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029506:	00009597          	auipc	a1,0x9
    8002950a:	1b258593          	addi	a1,a1,434 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    8002950e:	cc11                	beqz	s0,8002952a <vec_test_18+0x11a>
    80029510:	6498                	ld	a4,8(s1)
    80029512:	4789                	li	a5,2
    TEST_END();
    80029514:	00009597          	auipc	a1,0x9
    80029518:	19458593          	addi	a1,a1,404 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    8002951c:	00f70763          	beq	a4,a5,8002952a <vec_test_18+0x11a>
    80029520:	4401                	li	s0,0
    TEST_END();
    80029522:	00009597          	auipc	a1,0x9
    80029526:	19658593          	addi	a1,a1,406 # 800326b8 <__func__.0+0x2d0>
    8002952a:	00009517          	auipc	a0,0x9
    8002952e:	23650513          	addi	a0,a0,566 # 80032760 <__func__.0+0x378>
    80029532:	793050ef          	jal	8002f4c4 <printf>
    80029536:	4511                	li	a0,4
    80029538:	9ddd70ef          	jal	80000f14 <goto_priv>
    8002953c:	a3ad80ef          	jal	80001776 <reset_state>

}
    80029540:	60e2                	ld	ra,24(sp)
    80029542:	8522                	mv	a0,s0
    80029544:	6442                	ld	s0,16(sp)
    80029546:	64a2                	ld	s1,8(sp)
    80029548:	6105                	addi	sp,sp,32
    8002954a:	8082                	ret

000000008002954c <vec_test_19>:

bool vec_test_19(){
    8002954c:	1101                	addi	sp,sp,-32

    TEST_START();
    8002954e:	00009597          	auipc	a1,0x9
    80029552:	a3258593          	addi	a1,a1,-1486 # 80031f80 <__func__.5>
    80029556:	00009517          	auipc	a0,0x9
    8002955a:	17250513          	addi	a0,a0,370 # 800326c8 <__func__.0+0x2e0>
bool vec_test_19(){
    8002955e:	ec06                	sd	ra,24(sp)
    80029560:	e822                	sd	s0,16(sp)
    80029562:	e426                	sd	s1,8(sp)
    TEST_START();
    80029564:	761050ef          	jal	8002f4c4 <printf>
    80029568:	4529                	li	a0,10
    8002956a:	449040ef          	jal	8002e1b2 <putchar>
    //如果 vstart 非零，执行vmsbf指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    8002956e:	20000793          	li	a5,512
    80029572:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029576:	40000793          	li	a5,1024
    8002957a:	3007a073          	csrs	mstatus,a5
    asm volatile (
    8002957e:	47a1                	li	a5,8
    80029580:	4745                	li	a4,17
    80029582:	80e7f2d7          	vsetvl	t0,a5,a4
    80029586:	5e00b057          	vmv.v.i	v0,1
    8002958a:	5e003257          	vmv.v.i	v4,0
    int v4_init = 0;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    set_vmsbfm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    8002958e:	57fd                	li	a5,-1
    80029590:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029594:	008025f3          	csrr	a1,vstart
    80029598:	00014517          	auipc	a0,0x14
    8002959c:	3c850513          	addi	a0,a0,968 # 8003d960 <__func__.0+0xb578>
    800295a0:	725050ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    800295a4:	875d70ef          	jal	80000e18 <test_setup_except_function>
    asm volatile (
    800295a8:	5040a1d7          	vmsbf.m	v3,v4,v0.t
    // 执行 vmsbf.m 指令
    execute_vmsbf_m();
    excpt_info();
    800295ac:	aafd70ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    800295b0:	08c00593          	li	a1,140
    800295b4:	00014617          	auipc	a2,0x14
    800295b8:	59c60613          	addi	a2,a2,1436 # 8003db50 <__func__.0+0xb768>
    800295bc:	00009517          	auipc	a0,0x9
    800295c0:	12450513          	addi	a0,a0,292 # 800326e0 <__func__.0+0x2f8>
    800295c4:	701050ef          	jal	8002f4c4 <printf>
    800295c8:	00033797          	auipc	a5,0x33
    800295cc:	a497c783          	lbu	a5,-1463(a5) # 8005c011 <excpt+0x1>
    800295d0:	00033497          	auipc	s1,0x33
    800295d4:	a4048493          	addi	s1,s1,-1472 # 8005c010 <excpt>
    800295d8:	00009597          	auipc	a1,0x9
    800295dc:	0e058593          	addi	a1,a1,224 # 800326b8 <__func__.0+0x2d0>
    800295e0:	cf89                	beqz	a5,800295fa <vec_test_19+0xae>
    800295e2:	6498                	ld	a4,8(s1)
    800295e4:	4789                	li	a5,2
    800295e6:	00009597          	auipc	a1,0x9
    800295ea:	0c258593          	addi	a1,a1,194 # 800326a8 <__func__.0+0x2c0>
    800295ee:	00f70663          	beq	a4,a5,800295fa <vec_test_19+0xae>
    800295f2:	00009597          	auipc	a1,0x9
    800295f6:	0c658593          	addi	a1,a1,198 # 800326b8 <__func__.0+0x2d0>
    800295fa:	00009517          	auipc	a0,0x9
    800295fe:	0fe50513          	addi	a0,a0,254 # 800326f8 <__func__.0+0x310>
    80029602:	6c3050ef          	jal	8002f4c4 <printf>
    80029606:	00033797          	auipc	a5,0x33
    8002960a:	a0b7c783          	lbu	a5,-1525(a5) # 8005c011 <excpt+0x1>
    8002960e:	c789                	beqz	a5,80029618 <vec_test_19+0xcc>
    80029610:	6498                	ld	a4,8(s1)
    80029612:	4789                	li	a5,2
    80029614:	00f70c63          	beq	a4,a5,8002962c <vec_test_19+0xe0>
    80029618:	00009517          	auipc	a0,0x9
    8002961c:	0e850513          	addi	a0,a0,232 # 80032700 <__func__.0+0x318>
    80029620:	6a5050ef          	jal	8002f4c4 <printf>
    80029624:	02900513          	li	a0,41
    80029628:	38b040ef          	jal	8002e1b2 <putchar>
    8002962c:	4529                	li	a0,10
    8002962e:	385040ef          	jal	8002e1b2 <putchar>
    80029632:	00033417          	auipc	s0,0x33
    80029636:	9df44403          	lbu	s0,-1569(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002963a:	00009597          	auipc	a1,0x9
    8002963e:	07e58593          	addi	a1,a1,126 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    80029642:	cc11                	beqz	s0,8002965e <vec_test_19+0x112>
    80029644:	6498                	ld	a4,8(s1)
    80029646:	4789                	li	a5,2
    TEST_END();
    80029648:	00009597          	auipc	a1,0x9
    8002964c:	06058593          	addi	a1,a1,96 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    80029650:	00f70763          	beq	a4,a5,8002965e <vec_test_19+0x112>
    80029654:	4401                	li	s0,0
    TEST_END();
    80029656:	00009597          	auipc	a1,0x9
    8002965a:	06258593          	addi	a1,a1,98 # 800326b8 <__func__.0+0x2d0>
    8002965e:	00009517          	auipc	a0,0x9
    80029662:	10250513          	addi	a0,a0,258 # 80032760 <__func__.0+0x378>
    80029666:	65f050ef          	jal	8002f4c4 <printf>
    8002966a:	4511                	li	a0,4
    8002966c:	8a9d70ef          	jal	80000f14 <goto_priv>
    80029670:	906d80ef          	jal	80001776 <reset_state>

}
    80029674:	60e2                	ld	ra,24(sp)
    80029676:	8522                	mv	a0,s0
    80029678:	6442                	ld	s0,16(sp)
    8002967a:	64a2                	ld	s1,8(sp)
    8002967c:	6105                	addi	sp,sp,32
    8002967e:	8082                	ret

0000000080029680 <vec_test_20>:

bool vec_test_20(){
    80029680:	1101                	addi	sp,sp,-32

    TEST_START();
    80029682:	00009597          	auipc	a1,0x9
    80029686:	90e58593          	addi	a1,a1,-1778 # 80031f90 <__func__.4>
    8002968a:	00009517          	auipc	a0,0x9
    8002968e:	03e50513          	addi	a0,a0,62 # 800326c8 <__func__.0+0x2e0>
bool vec_test_20(){
    80029692:	ec06                	sd	ra,24(sp)
    80029694:	e822                	sd	s0,16(sp)
    80029696:	e426                	sd	s1,8(sp)
    TEST_START();
    80029698:	62d050ef          	jal	8002f4c4 <printf>
    8002969c:	4529                	li	a0,10
    8002969e:	315040ef          	jal	8002e1b2 <putchar>
    //如果 vstart 非零，执行vmsif指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800296a2:	20000793          	li	a5,512
    800296a6:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800296aa:	40000793          	li	a5,1024
    800296ae:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800296b2:	47a1                	li	a5,8
    800296b4:	4745                	li	a4,17
    800296b6:	80e7f2d7          	vsetvl	t0,a5,a4
    800296ba:	5e00b057          	vmv.v.i	v0,1
    800296be:	5e01b257          	vmv.v.i	v4,3
    int v4_init = 3;    // 初始化 v4 的值为 3

    // 设置 vmsif.m 的执行条件
    set_vmsifm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800296c2:	57fd                	li	a5,-1
    800296c4:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800296c8:	008025f3          	csrr	a1,vstart
    800296cc:	00014517          	auipc	a0,0x14
    800296d0:	29450513          	addi	a0,a0,660 # 8003d960 <__func__.0+0xb578>
    800296d4:	5f1050ef          	jal	8002f4c4 <printf>

    // 执行 vmsif.m 指令
    TEST_SETUP_EXCEPT();
    800296d8:	f40d70ef          	jal	80000e18 <test_setup_except_function>
    asm volatile (
    800296dc:	5041a2d7          	vmsif.m	v5,v4,v0.t
    execute_vmsif_m();
    excpt_info();
    800296e0:	97bd70ef          	jal	8000105a <excpt_info>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800296e4:	08c00593          	li	a1,140
    800296e8:	00014617          	auipc	a2,0x14
    800296ec:	4a860613          	addi	a2,a2,1192 # 8003db90 <__func__.0+0xb7a8>
    800296f0:	00009517          	auipc	a0,0x9
    800296f4:	ff050513          	addi	a0,a0,-16 # 800326e0 <__func__.0+0x2f8>
    800296f8:	5cd050ef          	jal	8002f4c4 <printf>
    800296fc:	00033797          	auipc	a5,0x33
    80029700:	9157c783          	lbu	a5,-1771(a5) # 8005c011 <excpt+0x1>
    80029704:	00033497          	auipc	s1,0x33
    80029708:	90c48493          	addi	s1,s1,-1780 # 8005c010 <excpt>
    8002970c:	00009597          	auipc	a1,0x9
    80029710:	fac58593          	addi	a1,a1,-84 # 800326b8 <__func__.0+0x2d0>
    80029714:	cf89                	beqz	a5,8002972e <vec_test_20+0xae>
    80029716:	6498                	ld	a4,8(s1)
    80029718:	4789                	li	a5,2
    8002971a:	00009597          	auipc	a1,0x9
    8002971e:	f8e58593          	addi	a1,a1,-114 # 800326a8 <__func__.0+0x2c0>
    80029722:	00f70663          	beq	a4,a5,8002972e <vec_test_20+0xae>
    80029726:	00009597          	auipc	a1,0x9
    8002972a:	f9258593          	addi	a1,a1,-110 # 800326b8 <__func__.0+0x2d0>
    8002972e:	00009517          	auipc	a0,0x9
    80029732:	fca50513          	addi	a0,a0,-54 # 800326f8 <__func__.0+0x310>
    80029736:	58f050ef          	jal	8002f4c4 <printf>
    8002973a:	00033797          	auipc	a5,0x33
    8002973e:	8d77c783          	lbu	a5,-1833(a5) # 8005c011 <excpt+0x1>
    80029742:	c789                	beqz	a5,8002974c <vec_test_20+0xcc>
    80029744:	6498                	ld	a4,8(s1)
    80029746:	4789                	li	a5,2
    80029748:	00f70c63          	beq	a4,a5,80029760 <vec_test_20+0xe0>
    8002974c:	00009517          	auipc	a0,0x9
    80029750:	fb450513          	addi	a0,a0,-76 # 80032700 <__func__.0+0x318>
    80029754:	571050ef          	jal	8002f4c4 <printf>
    80029758:	02900513          	li	a0,41
    8002975c:	257040ef          	jal	8002e1b2 <putchar>
    80029760:	4529                	li	a0,10
    80029762:	251040ef          	jal	8002e1b2 <putchar>
    80029766:	00033417          	auipc	s0,0x33
    8002976a:	8ab44403          	lbu	s0,-1877(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002976e:	00009597          	auipc	a1,0x9
    80029772:	f4a58593          	addi	a1,a1,-182 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    80029776:	cc11                	beqz	s0,80029792 <vec_test_20+0x112>
    80029778:	6498                	ld	a4,8(s1)
    8002977a:	4789                	li	a5,2
    TEST_END();
    8002977c:	00009597          	auipc	a1,0x9
    80029780:	f2c58593          	addi	a1,a1,-212 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    80029784:	00f70763          	beq	a4,a5,80029792 <vec_test_20+0x112>
    80029788:	4401                	li	s0,0
    TEST_END();
    8002978a:	00009597          	auipc	a1,0x9
    8002978e:	f2e58593          	addi	a1,a1,-210 # 800326b8 <__func__.0+0x2d0>
    80029792:	00009517          	auipc	a0,0x9
    80029796:	fce50513          	addi	a0,a0,-50 # 80032760 <__func__.0+0x378>
    8002979a:	52b050ef          	jal	8002f4c4 <printf>
    8002979e:	4511                	li	a0,4
    800297a0:	f74d70ef          	jal	80000f14 <goto_priv>
    800297a4:	fd3d70ef          	jal	80001776 <reset_state>

}
    800297a8:	60e2                	ld	ra,24(sp)
    800297aa:	8522                	mv	a0,s0
    800297ac:	6442                	ld	s0,16(sp)
    800297ae:	64a2                	ld	s1,8(sp)
    800297b0:	6105                	addi	sp,sp,32
    800297b2:	8082                	ret

00000000800297b4 <vec_test_21>:

bool vec_test_21(){
    800297b4:	1101                	addi	sp,sp,-32

    TEST_START();
    800297b6:	00008597          	auipc	a1,0x8
    800297ba:	7ea58593          	addi	a1,a1,2026 # 80031fa0 <__func__.3>
    800297be:	00009517          	auipc	a0,0x9
    800297c2:	f0a50513          	addi	a0,a0,-246 # 800326c8 <__func__.0+0x2e0>
bool vec_test_21(){
    800297c6:	ec06                	sd	ra,24(sp)
    800297c8:	e822                	sd	s0,16(sp)
    800297ca:	e426                	sd	s1,8(sp)
    TEST_START();
    800297cc:	4f9050ef          	jal	8002f4c4 <printf>
    800297d0:	4529                	li	a0,10
    800297d2:	1e1040ef          	jal	8002e1b2 <putchar>
    //如果 vstart 非零，执行vmsof指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800297d6:	20000793          	li	a5,512
    800297da:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800297de:	40000793          	li	a5,1024
    800297e2:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800297e6:	47a1                	li	a5,8
    800297e8:	4745                	li	a4,17
    800297ea:	80e7f2d7          	vsetvl	t0,a5,a4
    800297ee:	5e00b057          	vmv.v.i	v0,1
    800297f2:	5e01b257          	vmv.v.i	v4,3
    int v4_init = 3;    // 初始化 v4 的值为 3

    // 设置 vmsof.m 的执行条件
    set_vmsofm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800297f6:	57fd                	li	a5,-1
    800297f8:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800297fc:	008025f3          	csrr	a1,vstart
    80029800:	00014517          	auipc	a0,0x14
    80029804:	16050513          	addi	a0,a0,352 # 8003d960 <__func__.0+0xb578>
    80029808:	4bd050ef          	jal	8002f4c4 <printf>

    // 执行 vmsof.m 指令
    TEST_SETUP_EXCEPT();
    8002980c:	e0cd70ef          	jal	80000e18 <test_setup_except_function>
    asm volatile (
    80029810:	504122d7          	vmsof.m	v5,v4,v0.t
    execute_vmsof_m();
    excpt_info();
    80029814:	847d70ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    80029818:	08c00593          	li	a1,140
    8002981c:	00014617          	auipc	a2,0x14
    80029820:	37460613          	addi	a2,a2,884 # 8003db90 <__func__.0+0xb7a8>
    80029824:	00009517          	auipc	a0,0x9
    80029828:	ebc50513          	addi	a0,a0,-324 # 800326e0 <__func__.0+0x2f8>
    8002982c:	499050ef          	jal	8002f4c4 <printf>
    80029830:	00032797          	auipc	a5,0x32
    80029834:	7e17c783          	lbu	a5,2017(a5) # 8005c011 <excpt+0x1>
    80029838:	00032497          	auipc	s1,0x32
    8002983c:	7d848493          	addi	s1,s1,2008 # 8005c010 <excpt>
    80029840:	00009597          	auipc	a1,0x9
    80029844:	e7858593          	addi	a1,a1,-392 # 800326b8 <__func__.0+0x2d0>
    80029848:	cf89                	beqz	a5,80029862 <vec_test_21+0xae>
    8002984a:	6498                	ld	a4,8(s1)
    8002984c:	4789                	li	a5,2
    8002984e:	00009597          	auipc	a1,0x9
    80029852:	e5a58593          	addi	a1,a1,-422 # 800326a8 <__func__.0+0x2c0>
    80029856:	00f70663          	beq	a4,a5,80029862 <vec_test_21+0xae>
    8002985a:	00009597          	auipc	a1,0x9
    8002985e:	e5e58593          	addi	a1,a1,-418 # 800326b8 <__func__.0+0x2d0>
    80029862:	00009517          	auipc	a0,0x9
    80029866:	e9650513          	addi	a0,a0,-362 # 800326f8 <__func__.0+0x310>
    8002986a:	45b050ef          	jal	8002f4c4 <printf>
    8002986e:	00032797          	auipc	a5,0x32
    80029872:	7a37c783          	lbu	a5,1955(a5) # 8005c011 <excpt+0x1>
    80029876:	c789                	beqz	a5,80029880 <vec_test_21+0xcc>
    80029878:	6498                	ld	a4,8(s1)
    8002987a:	4789                	li	a5,2
    8002987c:	00f70c63          	beq	a4,a5,80029894 <vec_test_21+0xe0>
    80029880:	00009517          	auipc	a0,0x9
    80029884:	e8050513          	addi	a0,a0,-384 # 80032700 <__func__.0+0x318>
    80029888:	43d050ef          	jal	8002f4c4 <printf>
    8002988c:	02900513          	li	a0,41
    80029890:	123040ef          	jal	8002e1b2 <putchar>
    80029894:	4529                	li	a0,10
    80029896:	11d040ef          	jal	8002e1b2 <putchar>
    8002989a:	00032417          	auipc	s0,0x32
    8002989e:	77744403          	lbu	s0,1911(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800298a2:	00009597          	auipc	a1,0x9
    800298a6:	e1658593          	addi	a1,a1,-490 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800298aa:	cc11                	beqz	s0,800298c6 <vec_test_21+0x112>
    800298ac:	6498                	ld	a4,8(s1)
    800298ae:	4789                	li	a5,2
    TEST_END();
    800298b0:	00009597          	auipc	a1,0x9
    800298b4:	df858593          	addi	a1,a1,-520 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800298b8:	00f70763          	beq	a4,a5,800298c6 <vec_test_21+0x112>
    800298bc:	4401                	li	s0,0
    TEST_END();
    800298be:	00009597          	auipc	a1,0x9
    800298c2:	dfa58593          	addi	a1,a1,-518 # 800326b8 <__func__.0+0x2d0>
    800298c6:	00009517          	auipc	a0,0x9
    800298ca:	e9a50513          	addi	a0,a0,-358 # 80032760 <__func__.0+0x378>
    800298ce:	3f7050ef          	jal	8002f4c4 <printf>
    800298d2:	4511                	li	a0,4
    800298d4:	e40d70ef          	jal	80000f14 <goto_priv>
    800298d8:	e9fd70ef          	jal	80001776 <reset_state>

}
    800298dc:	60e2                	ld	ra,24(sp)
    800298de:	8522                	mv	a0,s0
    800298e0:	6442                	ld	s0,16(sp)
    800298e2:	64a2                	ld	s1,8(sp)
    800298e4:	6105                	addi	sp,sp,32
    800298e6:	8082                	ret

00000000800298e8 <vec_test_22>:

bool vec_test_22(){
    800298e8:	1101                	addi	sp,sp,-32

    TEST_START();
    800298ea:	00008597          	auipc	a1,0x8
    800298ee:	6c658593          	addi	a1,a1,1734 # 80031fb0 <__func__.2>
    800298f2:	00009517          	auipc	a0,0x9
    800298f6:	dd650513          	addi	a0,a0,-554 # 800326c8 <__func__.0+0x2e0>
bool vec_test_22(){
    800298fa:	ec06                	sd	ra,24(sp)
    800298fc:	e822                	sd	s0,16(sp)
    800298fe:	e426                	sd	s1,8(sp)
    TEST_START();
    80029900:	3c5050ef          	jal	8002f4c4 <printf>
    80029904:	4529                	li	a0,10
    80029906:	0ad040ef          	jal	8002e1b2 <putchar>
    //如果 vstart 非零，执行viota.m 指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    8002990a:	20000793          	li	a5,512
    8002990e:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029912:	40000793          	li	a5,1024
    80029916:	3007a073          	csrs	mstatus,a5
// 设置 viota.m 执行条件
static inline void set_viota_m_conditions(int vl, int sew, int lmull, int v0_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    8002991a:	47a1                	li	a5,8
    8002991c:	4745                	li	a4,17
    8002991e:	80e7f2d7          	vsetvl	t0,a5,a4
    80029922:	5e00b057          	vmv.v.i	v0,1
    int v0_init = 1;    // 初始化 v0 的值为 1（全1）

    // 设置 viota.m 的执行条件
    set_viota_m_conditions(vl, sew, lmull, v0_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    80029926:	57fd                	li	a5,-1
    80029928:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    8002992c:	008025f3          	csrr	a1,vstart
    80029930:	00014517          	auipc	a0,0x14
    80029934:	03050513          	addi	a0,a0,48 # 8003d960 <__func__.0+0xb578>
    80029938:	38d050ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002993c:	cdcd70ef          	jal	80000e18 <test_setup_except_function>
    );
}

// 执行 viota.m 指令
static inline void execute_viota_m() {
    asm volatile (
    80029940:	52082357          	viota.m	v6,v0
    // 执行 viota.m 指令
    execute_viota_m();

    excpt_info();
    80029944:	f16d70ef          	jal	8000105a <excpt_info>



    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    80029948:	08c00593          	li	a1,140
    8002994c:	00014617          	auipc	a2,0x14
    80029950:	28460613          	addi	a2,a2,644 # 8003dbd0 <__func__.0+0xb7e8>
    80029954:	00009517          	auipc	a0,0x9
    80029958:	d8c50513          	addi	a0,a0,-628 # 800326e0 <__func__.0+0x2f8>
    8002995c:	369050ef          	jal	8002f4c4 <printf>
    80029960:	00032797          	auipc	a5,0x32
    80029964:	6b17c783          	lbu	a5,1713(a5) # 8005c011 <excpt+0x1>
    80029968:	00032497          	auipc	s1,0x32
    8002996c:	6a848493          	addi	s1,s1,1704 # 8005c010 <excpt>
    80029970:	00009597          	auipc	a1,0x9
    80029974:	d4858593          	addi	a1,a1,-696 # 800326b8 <__func__.0+0x2d0>
    80029978:	cf89                	beqz	a5,80029992 <vec_test_22+0xaa>
    8002997a:	6498                	ld	a4,8(s1)
    8002997c:	4789                	li	a5,2
    8002997e:	00009597          	auipc	a1,0x9
    80029982:	d2a58593          	addi	a1,a1,-726 # 800326a8 <__func__.0+0x2c0>
    80029986:	00f70663          	beq	a4,a5,80029992 <vec_test_22+0xaa>
    8002998a:	00009597          	auipc	a1,0x9
    8002998e:	d2e58593          	addi	a1,a1,-722 # 800326b8 <__func__.0+0x2d0>
    80029992:	00009517          	auipc	a0,0x9
    80029996:	d6650513          	addi	a0,a0,-666 # 800326f8 <__func__.0+0x310>
    8002999a:	32b050ef          	jal	8002f4c4 <printf>
    8002999e:	00032797          	auipc	a5,0x32
    800299a2:	6737c783          	lbu	a5,1651(a5) # 8005c011 <excpt+0x1>
    800299a6:	c789                	beqz	a5,800299b0 <vec_test_22+0xc8>
    800299a8:	6498                	ld	a4,8(s1)
    800299aa:	4789                	li	a5,2
    800299ac:	00f70c63          	beq	a4,a5,800299c4 <vec_test_22+0xdc>
    800299b0:	00009517          	auipc	a0,0x9
    800299b4:	d5050513          	addi	a0,a0,-688 # 80032700 <__func__.0+0x318>
    800299b8:	30d050ef          	jal	8002f4c4 <printf>
    800299bc:	02900513          	li	a0,41
    800299c0:	7f2040ef          	jal	8002e1b2 <putchar>
    800299c4:	4529                	li	a0,10
    800299c6:	7ec040ef          	jal	8002e1b2 <putchar>
    800299ca:	00032417          	auipc	s0,0x32
    800299ce:	64744403          	lbu	s0,1607(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800299d2:	00009597          	auipc	a1,0x9
    800299d6:	ce658593          	addi	a1,a1,-794 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    800299da:	cc11                	beqz	s0,800299f6 <vec_test_22+0x10e>
    800299dc:	6498                	ld	a4,8(s1)
    800299de:	4789                	li	a5,2
    TEST_END();
    800299e0:	00009597          	auipc	a1,0x9
    800299e4:	cc858593          	addi	a1,a1,-824 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    800299e8:	00f70763          	beq	a4,a5,800299f6 <vec_test_22+0x10e>
    800299ec:	4401                	li	s0,0
    TEST_END();
    800299ee:	00009597          	auipc	a1,0x9
    800299f2:	cca58593          	addi	a1,a1,-822 # 800326b8 <__func__.0+0x2d0>
    800299f6:	00009517          	auipc	a0,0x9
    800299fa:	d6a50513          	addi	a0,a0,-662 # 80032760 <__func__.0+0x378>
    800299fe:	2c7050ef          	jal	8002f4c4 <printf>
    80029a02:	4511                	li	a0,4
    80029a04:	d10d70ef          	jal	80000f14 <goto_priv>
    80029a08:	d6fd70ef          	jal	80001776 <reset_state>

}
    80029a0c:	60e2                	ld	ra,24(sp)
    80029a0e:	8522                	mv	a0,s0
    80029a10:	6442                	ld	s0,16(sp)
    80029a12:	64a2                	ld	s1,8(sp)
    80029a14:	6105                	addi	sp,sp,32
    80029a16:	8082                	ret

0000000080029a18 <vec_test_23>:



bool vec_test_23(){
    80029a18:	1101                	addi	sp,sp,-32

    TEST_START();
    80029a1a:	00008597          	auipc	a1,0x8
    80029a1e:	5a658593          	addi	a1,a1,1446 # 80031fc0 <__func__.1>
    80029a22:	00009517          	auipc	a0,0x9
    80029a26:	ca650513          	addi	a0,a0,-858 # 800326c8 <__func__.0+0x2e0>
bool vec_test_23(){
    80029a2a:	ec06                	sd	ra,24(sp)
    80029a2c:	e822                	sd	s0,16(sp)
    80029a2e:	e426                	sd	s1,8(sp)
    TEST_START();
    80029a30:	295050ef          	jal	8002f4c4 <printf>
    80029a34:	4529                	li	a0,10
    80029a36:	77c040ef          	jal	8002e1b2 <putchar>
    //如果 vstart 非零，执行vcompress 指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029a3a:	20000793          	li	a5,512
    80029a3e:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029a42:	40000793          	li	a5,1024
    80029a46:	3007a073          	csrs	mstatus,a5
// 设置 vcompress 执行条件
static inline void set_vcompress_conditions(int vl, int sew, int lmull, int v0_init, int v4_init, int v8_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80029a4a:	47a1                	li	a5,8
    80029a4c:	4745                	li	a4,17
    80029a4e:	80e7f2d7          	vsetvl	t0,a5,a4
    80029a52:	5e00b057          	vmv.v.i	v0,1
    80029a56:	5e01b257          	vmv.v.i	v4,3
    80029a5a:	5e003457          	vmv.v.i	v8,0
    int v8_init = 0;    // 初始化 v8 的值为 0

    // 设置 vcompress 的执行条件
    set_vcompress_conditions(vl, sew, lmull, v0_init, v4_init, v8_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    80029a5e:	57fd                	li	a5,-1
    80029a60:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029a64:	008025f3          	csrr	a1,vstart
    80029a68:	00014517          	auipc	a0,0x14
    80029a6c:	ef850513          	addi	a0,a0,-264 # 8003d960 <__func__.0+0xb578>
    80029a70:	255050ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    80029a74:	ba4d70ef          	jal	80000e18 <test_setup_except_function>
    );
}

// 执行 vcompress 指令
static inline void execute_vcompress() {
    asm volatile (
    80029a78:	5e402457          	vcompress.vm	v8,v4,v0
    // 执行 vcompress 指令
    execute_vcompress();
    excpt_info();
    80029a7c:	dded70ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029a80:	08c00593          	li	a1,140
    80029a84:	00014617          	auipc	a2,0x14
    80029a88:	18c60613          	addi	a2,a2,396 # 8003dc10 <__func__.0+0xb828>
    80029a8c:	00009517          	auipc	a0,0x9
    80029a90:	c5450513          	addi	a0,a0,-940 # 800326e0 <__func__.0+0x2f8>
    80029a94:	231050ef          	jal	8002f4c4 <printf>
    80029a98:	00032797          	auipc	a5,0x32
    80029a9c:	5797c783          	lbu	a5,1401(a5) # 8005c011 <excpt+0x1>
    80029aa0:	00032497          	auipc	s1,0x32
    80029aa4:	57048493          	addi	s1,s1,1392 # 8005c010 <excpt>
    80029aa8:	00009597          	auipc	a1,0x9
    80029aac:	c1058593          	addi	a1,a1,-1008 # 800326b8 <__func__.0+0x2d0>
    80029ab0:	cf89                	beqz	a5,80029aca <vec_test_23+0xb2>
    80029ab2:	6498                	ld	a4,8(s1)
    80029ab4:	4789                	li	a5,2
    80029ab6:	00009597          	auipc	a1,0x9
    80029aba:	bf258593          	addi	a1,a1,-1038 # 800326a8 <__func__.0+0x2c0>
    80029abe:	00f70663          	beq	a4,a5,80029aca <vec_test_23+0xb2>
    80029ac2:	00009597          	auipc	a1,0x9
    80029ac6:	bf658593          	addi	a1,a1,-1034 # 800326b8 <__func__.0+0x2d0>
    80029aca:	00009517          	auipc	a0,0x9
    80029ace:	c2e50513          	addi	a0,a0,-978 # 800326f8 <__func__.0+0x310>
    80029ad2:	1f3050ef          	jal	8002f4c4 <printf>
    80029ad6:	00032797          	auipc	a5,0x32
    80029ada:	53b7c783          	lbu	a5,1339(a5) # 8005c011 <excpt+0x1>
    80029ade:	c789                	beqz	a5,80029ae8 <vec_test_23+0xd0>
    80029ae0:	6498                	ld	a4,8(s1)
    80029ae2:	4789                	li	a5,2
    80029ae4:	00f70c63          	beq	a4,a5,80029afc <vec_test_23+0xe4>
    80029ae8:	00009517          	auipc	a0,0x9
    80029aec:	c1850513          	addi	a0,a0,-1000 # 80032700 <__func__.0+0x318>
    80029af0:	1d5050ef          	jal	8002f4c4 <printf>
    80029af4:	02900513          	li	a0,41
    80029af8:	6ba040ef          	jal	8002e1b2 <putchar>
    80029afc:	4529                	li	a0,10
    80029afe:	6b4040ef          	jal	8002e1b2 <putchar>
    80029b02:	00032417          	auipc	s0,0x32
    80029b06:	50f44403          	lbu	s0,1295(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029b0a:	00009597          	auipc	a1,0x9
    80029b0e:	bae58593          	addi	a1,a1,-1106 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029b12:	cc11                	beqz	s0,80029b2e <vec_test_23+0x116>
    80029b14:	6498                	ld	a4,8(s1)
    80029b16:	4789                	li	a5,2
    TEST_END();
    80029b18:	00009597          	auipc	a1,0x9
    80029b1c:	b9058593          	addi	a1,a1,-1136 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029b20:	00f70763          	beq	a4,a5,80029b2e <vec_test_23+0x116>
    80029b24:	4401                	li	s0,0
    TEST_END();
    80029b26:	00009597          	auipc	a1,0x9
    80029b2a:	b9258593          	addi	a1,a1,-1134 # 800326b8 <__func__.0+0x2d0>
    80029b2e:	00009517          	auipc	a0,0x9
    80029b32:	c3250513          	addi	a0,a0,-974 # 80032760 <__func__.0+0x378>
    80029b36:	18f050ef          	jal	8002f4c4 <printf>
    80029b3a:	4511                	li	a0,4
    80029b3c:	bd8d70ef          	jal	80000f14 <goto_priv>
    80029b40:	c37d70ef          	jal	80001776 <reset_state>

}
    80029b44:	60e2                	ld	ra,24(sp)
    80029b46:	8522                	mv	a0,s0
    80029b48:	6442                	ld	s0,16(sp)
    80029b4a:	64a2                	ld	s1,8(sp)
    80029b4c:	6105                	addi	sp,sp,32
    80029b4e:	8082                	ret

0000000080029b50 <vec_test_24>:



bool vec_test_24(){
    80029b50:	1101                	addi	sp,sp,-32

    TEST_START();
    80029b52:	00008597          	auipc	a1,0x8
    80029b56:	47e58593          	addi	a1,a1,1150 # 80031fd0 <__func__.0>
    80029b5a:	00009517          	auipc	a0,0x9
    80029b5e:	b6e50513          	addi	a0,a0,-1170 # 800326c8 <__func__.0+0x2e0>
bool vec_test_24(){
    80029b62:	ec06                	sd	ra,24(sp)
    80029b64:	e822                	sd	s0,16(sp)
    80029b66:	e426                	sd	s1,8(sp)
    TEST_START();
    80029b68:	15d050ef          	jal	8002f4c4 <printf>
    80029b6c:	4529                	li	a0,10
    80029b6e:	644040ef          	jal	8002e1b2 <putchar>
    //当执行一个向量指令时，如设置 EGS > VLMAX


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029b72:	20000793          	li	a5,512
    80029b76:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029b7a:	40000793          	li	a5,1024
    80029b7e:	3007a073          	csrs	mstatus,a5
    int vl = 32;       // 向量长

    // 计算 VLMAX
    int vlen = 128;     // 硬件的向量寄存器长度（128 位）
    int vlmax = (vlen / sew) * lmull;
    printf("Calculated VLMAX: %d elements\n", vlmax);
    80029b82:	10000593          	li	a1,256
    80029b86:	00014517          	auipc	a0,0x14
    80029b8a:	0ca50513          	addi	a0,a0,202 # 8003dc50 <__func__.0+0xb868>
    80029b8e:	137050ef          	jal	8002f4c4 <printf>

    // 设置 EGS > VLMAX 的执行条件
    // set_egs_greater_vlmax_conditions(vl, sew, lmull);

    excpt_info();
    80029b92:	cc8d70ef          	jal	8000105a <excpt_info>

    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029b96:	08c00593          	li	a1,140
    80029b9a:	00014617          	auipc	a2,0x14
    80029b9e:	07660613          	addi	a2,a2,118 # 8003dc10 <__func__.0+0xb828>
    80029ba2:	00009517          	auipc	a0,0x9
    80029ba6:	b3e50513          	addi	a0,a0,-1218 # 800326e0 <__func__.0+0x2f8>
    80029baa:	11b050ef          	jal	8002f4c4 <printf>
    80029bae:	00032797          	auipc	a5,0x32
    80029bb2:	4637c783          	lbu	a5,1123(a5) # 8005c011 <excpt+0x1>
    80029bb6:	00032497          	auipc	s1,0x32
    80029bba:	45a48493          	addi	s1,s1,1114 # 8005c010 <excpt>
    80029bbe:	00009597          	auipc	a1,0x9
    80029bc2:	afa58593          	addi	a1,a1,-1286 # 800326b8 <__func__.0+0x2d0>
    80029bc6:	cf89                	beqz	a5,80029be0 <vec_test_24+0x90>
    80029bc8:	6498                	ld	a4,8(s1)
    80029bca:	4789                	li	a5,2
    80029bcc:	00009597          	auipc	a1,0x9
    80029bd0:	adc58593          	addi	a1,a1,-1316 # 800326a8 <__func__.0+0x2c0>
    80029bd4:	00f70663          	beq	a4,a5,80029be0 <vec_test_24+0x90>
    80029bd8:	00009597          	auipc	a1,0x9
    80029bdc:	ae058593          	addi	a1,a1,-1312 # 800326b8 <__func__.0+0x2d0>
    80029be0:	00009517          	auipc	a0,0x9
    80029be4:	b1850513          	addi	a0,a0,-1256 # 800326f8 <__func__.0+0x310>
    80029be8:	0dd050ef          	jal	8002f4c4 <printf>
    80029bec:	00032797          	auipc	a5,0x32
    80029bf0:	4257c783          	lbu	a5,1061(a5) # 8005c011 <excpt+0x1>
    80029bf4:	c789                	beqz	a5,80029bfe <vec_test_24+0xae>
    80029bf6:	6498                	ld	a4,8(s1)
    80029bf8:	4789                	li	a5,2
    80029bfa:	00f70c63          	beq	a4,a5,80029c12 <vec_test_24+0xc2>
    80029bfe:	00009517          	auipc	a0,0x9
    80029c02:	b0250513          	addi	a0,a0,-1278 # 80032700 <__func__.0+0x318>
    80029c06:	0bf050ef          	jal	8002f4c4 <printf>
    80029c0a:	02900513          	li	a0,41
    80029c0e:	5a4040ef          	jal	8002e1b2 <putchar>
    80029c12:	4529                	li	a0,10
    80029c14:	59e040ef          	jal	8002e1b2 <putchar>
    80029c18:	00032417          	auipc	s0,0x32
    80029c1c:	3f944403          	lbu	s0,1017(s0) # 8005c011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029c20:	00009597          	auipc	a1,0x9
    80029c24:	a9858593          	addi	a1,a1,-1384 # 800326b8 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029c28:	cc11                	beqz	s0,80029c44 <vec_test_24+0xf4>
    80029c2a:	6498                	ld	a4,8(s1)
    80029c2c:	4789                	li	a5,2
    TEST_END();
    80029c2e:	00009597          	auipc	a1,0x9
    80029c32:	a7a58593          	addi	a1,a1,-1414 # 800326a8 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029c36:	00f70763          	beq	a4,a5,80029c44 <vec_test_24+0xf4>
    80029c3a:	4401                	li	s0,0
    TEST_END();
    80029c3c:	00009597          	auipc	a1,0x9
    80029c40:	a7c58593          	addi	a1,a1,-1412 # 800326b8 <__func__.0+0x2d0>
    80029c44:	00009517          	auipc	a0,0x9
    80029c48:	b1c50513          	addi	a0,a0,-1252 # 80032760 <__func__.0+0x378>
    80029c4c:	079050ef          	jal	8002f4c4 <printf>
    80029c50:	4511                	li	a0,4
    80029c52:	ac2d70ef          	jal	80000f14 <goto_priv>
    80029c56:	b21d70ef          	jal	80001776 <reset_state>

}
    80029c5a:	60e2                	ld	ra,24(sp)
    80029c5c:	8522                	mv	a0,s0
    80029c5e:	6442                	ld	s0,16(sp)
    80029c60:	64a2                	ld	s1,8(sp)
    80029c62:	6105                	addi	sp,sp,32
    80029c64:	8082                	ret

0000000080029c66 <m_test_entry_two_1>:
        TEST_SETUP_EXCEPT(); \
        mode##handler(); \
    }\


HANDLE_INTERRUPT(m,1)
    80029c66:	1141                	addi	sp,sp,-16
    80029c68:	00014597          	auipc	a1,0x14
    80029c6c:	00858593          	addi	a1,a1,8 # 8003dc70 <__func__.0+0xb888>
    80029c70:	4605                	li	a2,1
    80029c72:	00014517          	auipc	a0,0x14
    80029c76:	00650513          	addi	a0,a0,6 # 8003dc78 <__func__.0+0xb890>
    80029c7a:	e406                	sd	ra,8(sp)
    80029c7c:	049050ef          	jal	8002f4c4 <printf>
    80029c80:	00032597          	auipc	a1,0x32
    80029c84:	4585a583          	lw	a1,1112(a1) # 8005c0d8 <trap>
    80029c88:	4785                	li	a5,1
    80029c8a:	00f58b63          	beq	a1,a5,80029ca0 <m_test_entry_two_1+0x3a>
    80029c8e:	4789                	li	a5,2
    80029c90:	04f58363          	beq	a1,a5,80029cd6 <m_test_entry_two_1+0x70>
    80029c94:	984d70ef          	jal	80000e18 <test_setup_except_function>
    80029c98:	60a2                	ld	ra,8(sp)
    80029c9a:	0141                	addi	sp,sp,16
    80029c9c:	decd706f          	j	80001288 <mhandler>
    80029ca0:	00014517          	auipc	a0,0x14
    80029ca4:	00850513          	addi	a0,a0,8 # 8003dca8 <__func__.0+0xb8c0>
    80029ca8:	01d050ef          	jal	8002f4c4 <printf>
    80029cac:	4785                	li	a5,1
    80029cae:	00032717          	auipc	a4,0x32
    80029cb2:	42072523          	sw	zero,1066(a4) # 8005c0d8 <trap>
    80029cb6:	17aa                	slli	a5,a5,0x2a
    80029cb8:	3007b073          	csrc	mstatus,a5
    80029cbc:	30046073          	csrsi	mstatus,8
    80029cc0:	30416073          	csrsi	mie,2
    80029cc4:	34416073          	csrsi	mip,2
    80029cc8:	00032597          	auipc	a1,0x32
    80029ccc:	4105a583          	lw	a1,1040(a1) # 8005c0d8 <trap>
    80029cd0:	4789                	li	a5,2
    80029cd2:	fcf591e3          	bne	a1,a5,80029c94 <m_test_entry_two_1+0x2e>
    80029cd6:	4585                	li	a1,1
    80029cd8:	00014517          	auipc	a0,0x14
    80029cdc:	ff850513          	addi	a0,a0,-8 # 8003dcd0 <__func__.0+0xb8e8>
    80029ce0:	7e4050ef          	jal	8002f4c4 <printf>
    80029ce4:	6785                	lui	a5,0x1
    80029ce6:	00032717          	auipc	a4,0x32
    80029cea:	3e072923          	sw	zero,1010(a4) # 8005c0d8 <trap>
    80029cee:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029cf0:	f1579073          	csrw	0xf15,a5
    80029cf4:	924d70ef          	jal	80000e18 <test_setup_except_function>
    80029cf8:	60a2                	ld	ra,8(sp)
    80029cfa:	0141                	addi	sp,sp,16
    80029cfc:	d8cd706f          	j	80001288 <mhandler>

0000000080029d00 <m_test_entry_two_2>:
HANDLE_INTERRUPT(m,2)
    80029d00:	1141                	addi	sp,sp,-16
    80029d02:	00014597          	auipc	a1,0x14
    80029d06:	f6e58593          	addi	a1,a1,-146 # 8003dc70 <__func__.0+0xb888>
    80029d0a:	4609                	li	a2,2
    80029d0c:	00014517          	auipc	a0,0x14
    80029d10:	f6c50513          	addi	a0,a0,-148 # 8003dc78 <__func__.0+0xb890>
    80029d14:	e406                	sd	ra,8(sp)
    80029d16:	7ae050ef          	jal	8002f4c4 <printf>
    80029d1a:	00032597          	auipc	a1,0x32
    80029d1e:	3be5a583          	lw	a1,958(a1) # 8005c0d8 <trap>
    80029d22:	4785                	li	a5,1
    80029d24:	00f58b63          	beq	a1,a5,80029d3a <m_test_entry_two_2+0x3a>
    80029d28:	4789                	li	a5,2
    80029d2a:	04f58463          	beq	a1,a5,80029d72 <m_test_entry_two_2+0x72>
    80029d2e:	8ead70ef          	jal	80000e18 <test_setup_except_function>
    80029d32:	60a2                	ld	ra,8(sp)
    80029d34:	0141                	addi	sp,sp,16
    80029d36:	d52d706f          	j	80001288 <mhandler>
    80029d3a:	4589                	li	a1,2
    80029d3c:	00014517          	auipc	a0,0x14
    80029d40:	f6c50513          	addi	a0,a0,-148 # 8003dca8 <__func__.0+0xb8c0>
    80029d44:	780050ef          	jal	8002f4c4 <printf>
    80029d48:	4785                	li	a5,1
    80029d4a:	00032717          	auipc	a4,0x32
    80029d4e:	38072723          	sw	zero,910(a4) # 8005c0d8 <trap>
    80029d52:	17aa                	slli	a5,a5,0x2a
    80029d54:	3007b073          	csrc	mstatus,a5
    80029d58:	30046073          	csrsi	mstatus,8
    80029d5c:	30416073          	csrsi	mie,2
    80029d60:	34416073          	csrsi	mip,2
    80029d64:	00032597          	auipc	a1,0x32
    80029d68:	3745a583          	lw	a1,884(a1) # 8005c0d8 <trap>
    80029d6c:	4789                	li	a5,2
    80029d6e:	fcf590e3          	bne	a1,a5,80029d2e <m_test_entry_two_2+0x2e>
    80029d72:	00014517          	auipc	a0,0x14
    80029d76:	f5e50513          	addi	a0,a0,-162 # 8003dcd0 <__func__.0+0xb8e8>
    80029d7a:	74a050ef          	jal	8002f4c4 <printf>
    80029d7e:	6785                	lui	a5,0x1
    80029d80:	00032717          	auipc	a4,0x32
    80029d84:	34072c23          	sw	zero,856(a4) # 8005c0d8 <trap>
    80029d88:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029d8a:	f1579073          	csrw	0xf15,a5
    80029d8e:	88ad70ef          	jal	80000e18 <test_setup_except_function>
    80029d92:	60a2                	ld	ra,8(sp)
    80029d94:	0141                	addi	sp,sp,16
    80029d96:	cf2d706f          	j	80001288 <mhandler>

0000000080029d9a <m_test_entry_two_3>:
HANDLE_INTERRUPT(m,3)
    80029d9a:	1141                	addi	sp,sp,-16
    80029d9c:	460d                	li	a2,3
    80029d9e:	00014597          	auipc	a1,0x14
    80029da2:	ed258593          	addi	a1,a1,-302 # 8003dc70 <__func__.0+0xb888>
    80029da6:	00014517          	auipc	a0,0x14
    80029daa:	ed250513          	addi	a0,a0,-302 # 8003dc78 <__func__.0+0xb890>
    80029dae:	e406                	sd	ra,8(sp)
    80029db0:	714050ef          	jal	8002f4c4 <printf>
    80029db4:	00032797          	auipc	a5,0x32
    80029db8:	3247a783          	lw	a5,804(a5) # 8005c0d8 <trap>
    80029dbc:	4705                	li	a4,1
    80029dbe:	00e78b63          	beq	a5,a4,80029dd4 <m_test_entry_two_3+0x3a>
    80029dc2:	4709                	li	a4,2
    80029dc4:	04e78463          	beq	a5,a4,80029e0c <m_test_entry_two_3+0x72>
    80029dc8:	850d70ef          	jal	80000e18 <test_setup_except_function>
    80029dcc:	60a2                	ld	ra,8(sp)
    80029dce:	0141                	addi	sp,sp,16
    80029dd0:	cb8d706f          	j	80001288 <mhandler>
    80029dd4:	458d                	li	a1,3
    80029dd6:	00014517          	auipc	a0,0x14
    80029dda:	ed250513          	addi	a0,a0,-302 # 8003dca8 <__func__.0+0xb8c0>
    80029dde:	6e6050ef          	jal	8002f4c4 <printf>
    80029de2:	4785                	li	a5,1
    80029de4:	00032717          	auipc	a4,0x32
    80029de8:	2e072a23          	sw	zero,756(a4) # 8005c0d8 <trap>
    80029dec:	17aa                	slli	a5,a5,0x2a
    80029dee:	3007b073          	csrc	mstatus,a5
    80029df2:	30046073          	csrsi	mstatus,8
    80029df6:	30416073          	csrsi	mie,2
    80029dfa:	34416073          	csrsi	mip,2
    80029dfe:	00032797          	auipc	a5,0x32
    80029e02:	2da7a783          	lw	a5,730(a5) # 8005c0d8 <trap>
    80029e06:	4709                	li	a4,2
    80029e08:	fce790e3          	bne	a5,a4,80029dc8 <m_test_entry_two_3+0x2e>
    80029e0c:	458d                	li	a1,3
    80029e0e:	00014517          	auipc	a0,0x14
    80029e12:	ec250513          	addi	a0,a0,-318 # 8003dcd0 <__func__.0+0xb8e8>
    80029e16:	6ae050ef          	jal	8002f4c4 <printf>
    80029e1a:	6785                	lui	a5,0x1
    80029e1c:	00032717          	auipc	a4,0x32
    80029e20:	2a072e23          	sw	zero,700(a4) # 8005c0d8 <trap>
    80029e24:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029e26:	f1579073          	csrw	0xf15,a5
    80029e2a:	fefd60ef          	jal	80000e18 <test_setup_except_function>
    80029e2e:	60a2                	ld	ra,8(sp)
    80029e30:	0141                	addi	sp,sp,16
    80029e32:	c56d706f          	j	80001288 <mhandler>

0000000080029e36 <m_test_entry_two_4>:
HANDLE_INTERRUPT(m,4)
    80029e36:	1141                	addi	sp,sp,-16
    80029e38:	4611                	li	a2,4
    80029e3a:	00014597          	auipc	a1,0x14
    80029e3e:	e3658593          	addi	a1,a1,-458 # 8003dc70 <__func__.0+0xb888>
    80029e42:	00014517          	auipc	a0,0x14
    80029e46:	e3650513          	addi	a0,a0,-458 # 8003dc78 <__func__.0+0xb890>
    80029e4a:	e406                	sd	ra,8(sp)
    80029e4c:	678050ef          	jal	8002f4c4 <printf>
    80029e50:	00032797          	auipc	a5,0x32
    80029e54:	2887a783          	lw	a5,648(a5) # 8005c0d8 <trap>
    80029e58:	4705                	li	a4,1
    80029e5a:	00e78b63          	beq	a5,a4,80029e70 <m_test_entry_two_4+0x3a>
    80029e5e:	4709                	li	a4,2
    80029e60:	04e78463          	beq	a5,a4,80029ea8 <m_test_entry_two_4+0x72>
    80029e64:	fb5d60ef          	jal	80000e18 <test_setup_except_function>
    80029e68:	60a2                	ld	ra,8(sp)
    80029e6a:	0141                	addi	sp,sp,16
    80029e6c:	c1cd706f          	j	80001288 <mhandler>
    80029e70:	4591                	li	a1,4
    80029e72:	00014517          	auipc	a0,0x14
    80029e76:	e3650513          	addi	a0,a0,-458 # 8003dca8 <__func__.0+0xb8c0>
    80029e7a:	64a050ef          	jal	8002f4c4 <printf>
    80029e7e:	4785                	li	a5,1
    80029e80:	00032717          	auipc	a4,0x32
    80029e84:	24072c23          	sw	zero,600(a4) # 8005c0d8 <trap>
    80029e88:	17aa                	slli	a5,a5,0x2a
    80029e8a:	3007b073          	csrc	mstatus,a5
    80029e8e:	30046073          	csrsi	mstatus,8
    80029e92:	30416073          	csrsi	mie,2
    80029e96:	34416073          	csrsi	mip,2
    80029e9a:	00032797          	auipc	a5,0x32
    80029e9e:	23e7a783          	lw	a5,574(a5) # 8005c0d8 <trap>
    80029ea2:	4709                	li	a4,2
    80029ea4:	fce790e3          	bne	a5,a4,80029e64 <m_test_entry_two_4+0x2e>
    80029ea8:	4591                	li	a1,4
    80029eaa:	00014517          	auipc	a0,0x14
    80029eae:	e2650513          	addi	a0,a0,-474 # 8003dcd0 <__func__.0+0xb8e8>
    80029eb2:	612050ef          	jal	8002f4c4 <printf>
    80029eb6:	6785                	lui	a5,0x1
    80029eb8:	00032717          	auipc	a4,0x32
    80029ebc:	22072023          	sw	zero,544(a4) # 8005c0d8 <trap>
    80029ec0:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029ec2:	f1579073          	csrw	0xf15,a5
    80029ec6:	f53d60ef          	jal	80000e18 <test_setup_except_function>
    80029eca:	60a2                	ld	ra,8(sp)
    80029ecc:	0141                	addi	sp,sp,16
    80029ece:	bbad706f          	j	80001288 <mhandler>

0000000080029ed2 <m_test_entry_two_5>:
HANDLE_INTERRUPT(m,5)
    80029ed2:	1141                	addi	sp,sp,-16
    80029ed4:	4615                	li	a2,5
    80029ed6:	00014597          	auipc	a1,0x14
    80029eda:	d9a58593          	addi	a1,a1,-614 # 8003dc70 <__func__.0+0xb888>
    80029ede:	00014517          	auipc	a0,0x14
    80029ee2:	d9a50513          	addi	a0,a0,-614 # 8003dc78 <__func__.0+0xb890>
    80029ee6:	e406                	sd	ra,8(sp)
    80029ee8:	5dc050ef          	jal	8002f4c4 <printf>
    80029eec:	00032797          	auipc	a5,0x32
    80029ef0:	1ec7a783          	lw	a5,492(a5) # 8005c0d8 <trap>
    80029ef4:	4705                	li	a4,1
    80029ef6:	00e78b63          	beq	a5,a4,80029f0c <m_test_entry_two_5+0x3a>
    80029efa:	4709                	li	a4,2
    80029efc:	04e78463          	beq	a5,a4,80029f44 <m_test_entry_two_5+0x72>
    80029f00:	f19d60ef          	jal	80000e18 <test_setup_except_function>
    80029f04:	60a2                	ld	ra,8(sp)
    80029f06:	0141                	addi	sp,sp,16
    80029f08:	b80d706f          	j	80001288 <mhandler>
    80029f0c:	4595                	li	a1,5
    80029f0e:	00014517          	auipc	a0,0x14
    80029f12:	d9a50513          	addi	a0,a0,-614 # 8003dca8 <__func__.0+0xb8c0>
    80029f16:	5ae050ef          	jal	8002f4c4 <printf>
    80029f1a:	4785                	li	a5,1
    80029f1c:	00032717          	auipc	a4,0x32
    80029f20:	1a072e23          	sw	zero,444(a4) # 8005c0d8 <trap>
    80029f24:	17aa                	slli	a5,a5,0x2a
    80029f26:	3007b073          	csrc	mstatus,a5
    80029f2a:	30046073          	csrsi	mstatus,8
    80029f2e:	30416073          	csrsi	mie,2
    80029f32:	34416073          	csrsi	mip,2
    80029f36:	00032797          	auipc	a5,0x32
    80029f3a:	1a27a783          	lw	a5,418(a5) # 8005c0d8 <trap>
    80029f3e:	4709                	li	a4,2
    80029f40:	fce790e3          	bne	a5,a4,80029f00 <m_test_entry_two_5+0x2e>
    80029f44:	4595                	li	a1,5
    80029f46:	00014517          	auipc	a0,0x14
    80029f4a:	d8a50513          	addi	a0,a0,-630 # 8003dcd0 <__func__.0+0xb8e8>
    80029f4e:	576050ef          	jal	8002f4c4 <printf>
    80029f52:	6785                	lui	a5,0x1
    80029f54:	00032717          	auipc	a4,0x32
    80029f58:	18072223          	sw	zero,388(a4) # 8005c0d8 <trap>
    80029f5c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029f5e:	f1579073          	csrw	0xf15,a5
    80029f62:	eb7d60ef          	jal	80000e18 <test_setup_except_function>
    80029f66:	60a2                	ld	ra,8(sp)
    80029f68:	0141                	addi	sp,sp,16
    80029f6a:	b1ed706f          	j	80001288 <mhandler>

0000000080029f6e <m_test_entry_two_6>:
HANDLE_INTERRUPT(m,6)
    80029f6e:	1141                	addi	sp,sp,-16
    80029f70:	4619                	li	a2,6
    80029f72:	00014597          	auipc	a1,0x14
    80029f76:	cfe58593          	addi	a1,a1,-770 # 8003dc70 <__func__.0+0xb888>
    80029f7a:	00014517          	auipc	a0,0x14
    80029f7e:	cfe50513          	addi	a0,a0,-770 # 8003dc78 <__func__.0+0xb890>
    80029f82:	e406                	sd	ra,8(sp)
    80029f84:	540050ef          	jal	8002f4c4 <printf>
    80029f88:	00032797          	auipc	a5,0x32
    80029f8c:	1507a783          	lw	a5,336(a5) # 8005c0d8 <trap>
    80029f90:	4705                	li	a4,1
    80029f92:	00e78b63          	beq	a5,a4,80029fa8 <m_test_entry_two_6+0x3a>
    80029f96:	4709                	li	a4,2
    80029f98:	04e78463          	beq	a5,a4,80029fe0 <m_test_entry_two_6+0x72>
    80029f9c:	e7dd60ef          	jal	80000e18 <test_setup_except_function>
    80029fa0:	60a2                	ld	ra,8(sp)
    80029fa2:	0141                	addi	sp,sp,16
    80029fa4:	ae4d706f          	j	80001288 <mhandler>
    80029fa8:	4599                	li	a1,6
    80029faa:	00014517          	auipc	a0,0x14
    80029fae:	cfe50513          	addi	a0,a0,-770 # 8003dca8 <__func__.0+0xb8c0>
    80029fb2:	512050ef          	jal	8002f4c4 <printf>
    80029fb6:	4785                	li	a5,1
    80029fb8:	00032717          	auipc	a4,0x32
    80029fbc:	12072023          	sw	zero,288(a4) # 8005c0d8 <trap>
    80029fc0:	17aa                	slli	a5,a5,0x2a
    80029fc2:	3007b073          	csrc	mstatus,a5
    80029fc6:	30046073          	csrsi	mstatus,8
    80029fca:	30416073          	csrsi	mie,2
    80029fce:	34416073          	csrsi	mip,2
    80029fd2:	00032797          	auipc	a5,0x32
    80029fd6:	1067a783          	lw	a5,262(a5) # 8005c0d8 <trap>
    80029fda:	4709                	li	a4,2
    80029fdc:	fce790e3          	bne	a5,a4,80029f9c <m_test_entry_two_6+0x2e>
    80029fe0:	4599                	li	a1,6
    80029fe2:	00014517          	auipc	a0,0x14
    80029fe6:	cee50513          	addi	a0,a0,-786 # 8003dcd0 <__func__.0+0xb8e8>
    80029fea:	4da050ef          	jal	8002f4c4 <printf>
    80029fee:	6785                	lui	a5,0x1
    80029ff0:	00032717          	auipc	a4,0x32
    80029ff4:	0e072423          	sw	zero,232(a4) # 8005c0d8 <trap>
    80029ff8:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029ffa:	f1579073          	csrw	0xf15,a5
    80029ffe:	e1bd60ef          	jal	80000e18 <test_setup_except_function>
    8002a002:	60a2                	ld	ra,8(sp)
    8002a004:	0141                	addi	sp,sp,16
    8002a006:	a82d706f          	j	80001288 <mhandler>

000000008002a00a <m_test_entry_two_7>:
HANDLE_INTERRUPT(m,7)
    8002a00a:	1141                	addi	sp,sp,-16
    8002a00c:	461d                	li	a2,7
    8002a00e:	00014597          	auipc	a1,0x14
    8002a012:	c6258593          	addi	a1,a1,-926 # 8003dc70 <__func__.0+0xb888>
    8002a016:	00014517          	auipc	a0,0x14
    8002a01a:	c6250513          	addi	a0,a0,-926 # 8003dc78 <__func__.0+0xb890>
    8002a01e:	e406                	sd	ra,8(sp)
    8002a020:	4a4050ef          	jal	8002f4c4 <printf>
    8002a024:	00032797          	auipc	a5,0x32
    8002a028:	0b47a783          	lw	a5,180(a5) # 8005c0d8 <trap>
    8002a02c:	4705                	li	a4,1
    8002a02e:	00e78b63          	beq	a5,a4,8002a044 <m_test_entry_two_7+0x3a>
    8002a032:	4709                	li	a4,2
    8002a034:	04e78463          	beq	a5,a4,8002a07c <m_test_entry_two_7+0x72>
    8002a038:	de1d60ef          	jal	80000e18 <test_setup_except_function>
    8002a03c:	60a2                	ld	ra,8(sp)
    8002a03e:	0141                	addi	sp,sp,16
    8002a040:	a48d706f          	j	80001288 <mhandler>
    8002a044:	459d                	li	a1,7
    8002a046:	00014517          	auipc	a0,0x14
    8002a04a:	c6250513          	addi	a0,a0,-926 # 8003dca8 <__func__.0+0xb8c0>
    8002a04e:	476050ef          	jal	8002f4c4 <printf>
    8002a052:	4785                	li	a5,1
    8002a054:	00032717          	auipc	a4,0x32
    8002a058:	08072223          	sw	zero,132(a4) # 8005c0d8 <trap>
    8002a05c:	17aa                	slli	a5,a5,0x2a
    8002a05e:	3007b073          	csrc	mstatus,a5
    8002a062:	30046073          	csrsi	mstatus,8
    8002a066:	30416073          	csrsi	mie,2
    8002a06a:	34416073          	csrsi	mip,2
    8002a06e:	00032797          	auipc	a5,0x32
    8002a072:	06a7a783          	lw	a5,106(a5) # 8005c0d8 <trap>
    8002a076:	4709                	li	a4,2
    8002a078:	fce790e3          	bne	a5,a4,8002a038 <m_test_entry_two_7+0x2e>
    8002a07c:	459d                	li	a1,7
    8002a07e:	00014517          	auipc	a0,0x14
    8002a082:	c5250513          	addi	a0,a0,-942 # 8003dcd0 <__func__.0+0xb8e8>
    8002a086:	43e050ef          	jal	8002f4c4 <printf>
    8002a08a:	6785                	lui	a5,0x1
    8002a08c:	00032717          	auipc	a4,0x32
    8002a090:	04072623          	sw	zero,76(a4) # 8005c0d8 <trap>
    8002a094:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a096:	f1579073          	csrw	0xf15,a5
    8002a09a:	d7fd60ef          	jal	80000e18 <test_setup_except_function>
    8002a09e:	60a2                	ld	ra,8(sp)
    8002a0a0:	0141                	addi	sp,sp,16
    8002a0a2:	9e6d706f          	j	80001288 <mhandler>

000000008002a0a6 <m_test_entry_two_8>:
HANDLE_INTERRUPT(m,8)
    8002a0a6:	1141                	addi	sp,sp,-16
    8002a0a8:	4621                	li	a2,8
    8002a0aa:	00014597          	auipc	a1,0x14
    8002a0ae:	bc658593          	addi	a1,a1,-1082 # 8003dc70 <__func__.0+0xb888>
    8002a0b2:	00014517          	auipc	a0,0x14
    8002a0b6:	bc650513          	addi	a0,a0,-1082 # 8003dc78 <__func__.0+0xb890>
    8002a0ba:	e406                	sd	ra,8(sp)
    8002a0bc:	408050ef          	jal	8002f4c4 <printf>
    8002a0c0:	00032797          	auipc	a5,0x32
    8002a0c4:	0187a783          	lw	a5,24(a5) # 8005c0d8 <trap>
    8002a0c8:	4705                	li	a4,1
    8002a0ca:	00e78b63          	beq	a5,a4,8002a0e0 <m_test_entry_two_8+0x3a>
    8002a0ce:	4709                	li	a4,2
    8002a0d0:	04e78463          	beq	a5,a4,8002a118 <m_test_entry_two_8+0x72>
    8002a0d4:	d45d60ef          	jal	80000e18 <test_setup_except_function>
    8002a0d8:	60a2                	ld	ra,8(sp)
    8002a0da:	0141                	addi	sp,sp,16
    8002a0dc:	9acd706f          	j	80001288 <mhandler>
    8002a0e0:	45a1                	li	a1,8
    8002a0e2:	00014517          	auipc	a0,0x14
    8002a0e6:	bc650513          	addi	a0,a0,-1082 # 8003dca8 <__func__.0+0xb8c0>
    8002a0ea:	3da050ef          	jal	8002f4c4 <printf>
    8002a0ee:	4785                	li	a5,1
    8002a0f0:	00032717          	auipc	a4,0x32
    8002a0f4:	fe072423          	sw	zero,-24(a4) # 8005c0d8 <trap>
    8002a0f8:	17aa                	slli	a5,a5,0x2a
    8002a0fa:	3007b073          	csrc	mstatus,a5
    8002a0fe:	30046073          	csrsi	mstatus,8
    8002a102:	30416073          	csrsi	mie,2
    8002a106:	34416073          	csrsi	mip,2
    8002a10a:	00032797          	auipc	a5,0x32
    8002a10e:	fce7a783          	lw	a5,-50(a5) # 8005c0d8 <trap>
    8002a112:	4709                	li	a4,2
    8002a114:	fce790e3          	bne	a5,a4,8002a0d4 <m_test_entry_two_8+0x2e>
    8002a118:	45a1                	li	a1,8
    8002a11a:	00014517          	auipc	a0,0x14
    8002a11e:	bb650513          	addi	a0,a0,-1098 # 8003dcd0 <__func__.0+0xb8e8>
    8002a122:	3a2050ef          	jal	8002f4c4 <printf>
    8002a126:	6785                	lui	a5,0x1
    8002a128:	00032717          	auipc	a4,0x32
    8002a12c:	fa072823          	sw	zero,-80(a4) # 8005c0d8 <trap>
    8002a130:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a132:	f1579073          	csrw	0xf15,a5
    8002a136:	ce3d60ef          	jal	80000e18 <test_setup_except_function>
    8002a13a:	60a2                	ld	ra,8(sp)
    8002a13c:	0141                	addi	sp,sp,16
    8002a13e:	94ad706f          	j	80001288 <mhandler>

000000008002a142 <hs_test_entry_two_1>:

HANDLE_INTERRUPT(hs,1)
    8002a142:	1141                	addi	sp,sp,-16
    8002a144:	00014597          	auipc	a1,0x14
    8002a148:	bb458593          	addi	a1,a1,-1100 # 8003dcf8 <__func__.0+0xb910>
    8002a14c:	4605                	li	a2,1
    8002a14e:	00014517          	auipc	a0,0x14
    8002a152:	b2a50513          	addi	a0,a0,-1238 # 8003dc78 <__func__.0+0xb890>
    8002a156:	e406                	sd	ra,8(sp)
    8002a158:	36c050ef          	jal	8002f4c4 <printf>
    8002a15c:	00032597          	auipc	a1,0x32
    8002a160:	f7c5a583          	lw	a1,-132(a1) # 8005c0d8 <trap>
    8002a164:	4785                	li	a5,1
    8002a166:	00f58b63          	beq	a1,a5,8002a17c <hs_test_entry_two_1+0x3a>
    8002a16a:	4789                	li	a5,2
    8002a16c:	02f58563          	beq	a1,a5,8002a196 <hs_test_entry_two_1+0x54>
    8002a170:	ca9d60ef          	jal	80000e18 <test_setup_except_function>
    8002a174:	60a2                	ld	ra,8(sp)
    8002a176:	0141                	addi	sp,sp,16
    8002a178:	a5ad706f          	j	800013d2 <hshandler>
    8002a17c:	00014517          	auipc	a0,0x14
    8002a180:	b2c50513          	addi	a0,a0,-1236 # 8003dca8 <__func__.0+0xb8c0>
    8002a184:	340050ef          	jal	8002f4c4 <printf>
    8002a188:	00032597          	auipc	a1,0x32
    8002a18c:	f505a583          	lw	a1,-176(a1) # 8005c0d8 <trap>
    8002a190:	4789                	li	a5,2
    8002a192:	fcf59fe3          	bne	a1,a5,8002a170 <hs_test_entry_two_1+0x2e>
    8002a196:	4585                	li	a1,1
    8002a198:	00014517          	auipc	a0,0x14
    8002a19c:	b3850513          	addi	a0,a0,-1224 # 8003dcd0 <__func__.0+0xb8e8>
    8002a1a0:	324050ef          	jal	8002f4c4 <printf>
    8002a1a4:	6785                	lui	a5,0x1
    8002a1a6:	00032717          	auipc	a4,0x32
    8002a1aa:	f2072923          	sw	zero,-206(a4) # 8005c0d8 <trap>
    8002a1ae:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a1b0:	f1579073          	csrw	0xf15,a5
    8002a1b4:	c65d60ef          	jal	80000e18 <test_setup_except_function>
    8002a1b8:	60a2                	ld	ra,8(sp)
    8002a1ba:	0141                	addi	sp,sp,16
    8002a1bc:	a16d706f          	j	800013d2 <hshandler>

000000008002a1c0 <hs_test_entry_two_2>:
HANDLE_INTERRUPT(hs,2)
    8002a1c0:	1141                	addi	sp,sp,-16
    8002a1c2:	00014597          	auipc	a1,0x14
    8002a1c6:	b3658593          	addi	a1,a1,-1226 # 8003dcf8 <__func__.0+0xb910>
    8002a1ca:	4609                	li	a2,2
    8002a1cc:	00014517          	auipc	a0,0x14
    8002a1d0:	aac50513          	addi	a0,a0,-1364 # 8003dc78 <__func__.0+0xb890>
    8002a1d4:	e406                	sd	ra,8(sp)
    8002a1d6:	2ee050ef          	jal	8002f4c4 <printf>
    8002a1da:	00032597          	auipc	a1,0x32
    8002a1de:	efe5a583          	lw	a1,-258(a1) # 8005c0d8 <trap>
    8002a1e2:	4785                	li	a5,1
    8002a1e4:	00f58b63          	beq	a1,a5,8002a1fa <hs_test_entry_two_2+0x3a>
    8002a1e8:	4789                	li	a5,2
    8002a1ea:	02f58663          	beq	a1,a5,8002a216 <hs_test_entry_two_2+0x56>
    8002a1ee:	c2bd60ef          	jal	80000e18 <test_setup_except_function>
    8002a1f2:	60a2                	ld	ra,8(sp)
    8002a1f4:	0141                	addi	sp,sp,16
    8002a1f6:	9dcd706f          	j	800013d2 <hshandler>
    8002a1fa:	4589                	li	a1,2
    8002a1fc:	00014517          	auipc	a0,0x14
    8002a200:	aac50513          	addi	a0,a0,-1364 # 8003dca8 <__func__.0+0xb8c0>
    8002a204:	2c0050ef          	jal	8002f4c4 <printf>
    8002a208:	00032597          	auipc	a1,0x32
    8002a20c:	ed05a583          	lw	a1,-304(a1) # 8005c0d8 <trap>
    8002a210:	4789                	li	a5,2
    8002a212:	fcf59ee3          	bne	a1,a5,8002a1ee <hs_test_entry_two_2+0x2e>
    8002a216:	00014517          	auipc	a0,0x14
    8002a21a:	aba50513          	addi	a0,a0,-1350 # 8003dcd0 <__func__.0+0xb8e8>
    8002a21e:	2a6050ef          	jal	8002f4c4 <printf>
    8002a222:	6785                	lui	a5,0x1
    8002a224:	00032717          	auipc	a4,0x32
    8002a228:	ea072a23          	sw	zero,-332(a4) # 8005c0d8 <trap>
    8002a22c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a22e:	f1579073          	csrw	0xf15,a5
    8002a232:	be7d60ef          	jal	80000e18 <test_setup_except_function>
    8002a236:	60a2                	ld	ra,8(sp)
    8002a238:	0141                	addi	sp,sp,16
    8002a23a:	998d706f          	j	800013d2 <hshandler>

000000008002a23e <hs_test_entry_two_3>:
HANDLE_INTERRUPT(hs,3)
    8002a23e:	1141                	addi	sp,sp,-16
    8002a240:	460d                	li	a2,3
    8002a242:	00014597          	auipc	a1,0x14
    8002a246:	ab658593          	addi	a1,a1,-1354 # 8003dcf8 <__func__.0+0xb910>
    8002a24a:	00014517          	auipc	a0,0x14
    8002a24e:	a2e50513          	addi	a0,a0,-1490 # 8003dc78 <__func__.0+0xb890>
    8002a252:	e406                	sd	ra,8(sp)
    8002a254:	270050ef          	jal	8002f4c4 <printf>
    8002a258:	00032797          	auipc	a5,0x32
    8002a25c:	e807a783          	lw	a5,-384(a5) # 8005c0d8 <trap>
    8002a260:	4705                	li	a4,1
    8002a262:	00e78b63          	beq	a5,a4,8002a278 <hs_test_entry_two_3+0x3a>
    8002a266:	4709                	li	a4,2
    8002a268:	02e78663          	beq	a5,a4,8002a294 <hs_test_entry_two_3+0x56>
    8002a26c:	badd60ef          	jal	80000e18 <test_setup_except_function>
    8002a270:	60a2                	ld	ra,8(sp)
    8002a272:	0141                	addi	sp,sp,16
    8002a274:	95ed706f          	j	800013d2 <hshandler>
    8002a278:	458d                	li	a1,3
    8002a27a:	00014517          	auipc	a0,0x14
    8002a27e:	a2e50513          	addi	a0,a0,-1490 # 8003dca8 <__func__.0+0xb8c0>
    8002a282:	242050ef          	jal	8002f4c4 <printf>
    8002a286:	00032797          	auipc	a5,0x32
    8002a28a:	e527a783          	lw	a5,-430(a5) # 8005c0d8 <trap>
    8002a28e:	4709                	li	a4,2
    8002a290:	fce79ee3          	bne	a5,a4,8002a26c <hs_test_entry_two_3+0x2e>
    8002a294:	458d                	li	a1,3
    8002a296:	00014517          	auipc	a0,0x14
    8002a29a:	a3a50513          	addi	a0,a0,-1478 # 8003dcd0 <__func__.0+0xb8e8>
    8002a29e:	226050ef          	jal	8002f4c4 <printf>
    8002a2a2:	6785                	lui	a5,0x1
    8002a2a4:	00032717          	auipc	a4,0x32
    8002a2a8:	e2072a23          	sw	zero,-460(a4) # 8005c0d8 <trap>
    8002a2ac:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a2ae:	f1579073          	csrw	0xf15,a5
    8002a2b2:	b67d60ef          	jal	80000e18 <test_setup_except_function>
    8002a2b6:	60a2                	ld	ra,8(sp)
    8002a2b8:	0141                	addi	sp,sp,16
    8002a2ba:	918d706f          	j	800013d2 <hshandler>

000000008002a2be <hs_test_entry_two_4>:
HANDLE_INTERRUPT(hs,4)
    8002a2be:	1141                	addi	sp,sp,-16
    8002a2c0:	4611                	li	a2,4
    8002a2c2:	00014597          	auipc	a1,0x14
    8002a2c6:	a3658593          	addi	a1,a1,-1482 # 8003dcf8 <__func__.0+0xb910>
    8002a2ca:	00014517          	auipc	a0,0x14
    8002a2ce:	9ae50513          	addi	a0,a0,-1618 # 8003dc78 <__func__.0+0xb890>
    8002a2d2:	e406                	sd	ra,8(sp)
    8002a2d4:	1f0050ef          	jal	8002f4c4 <printf>
    8002a2d8:	00032797          	auipc	a5,0x32
    8002a2dc:	e007a783          	lw	a5,-512(a5) # 8005c0d8 <trap>
    8002a2e0:	4705                	li	a4,1
    8002a2e2:	00e78b63          	beq	a5,a4,8002a2f8 <hs_test_entry_two_4+0x3a>
    8002a2e6:	4709                	li	a4,2
    8002a2e8:	02e78663          	beq	a5,a4,8002a314 <hs_test_entry_two_4+0x56>
    8002a2ec:	b2dd60ef          	jal	80000e18 <test_setup_except_function>
    8002a2f0:	60a2                	ld	ra,8(sp)
    8002a2f2:	0141                	addi	sp,sp,16
    8002a2f4:	8ded706f          	j	800013d2 <hshandler>
    8002a2f8:	4591                	li	a1,4
    8002a2fa:	00014517          	auipc	a0,0x14
    8002a2fe:	9ae50513          	addi	a0,a0,-1618 # 8003dca8 <__func__.0+0xb8c0>
    8002a302:	1c2050ef          	jal	8002f4c4 <printf>
    8002a306:	00032797          	auipc	a5,0x32
    8002a30a:	dd27a783          	lw	a5,-558(a5) # 8005c0d8 <trap>
    8002a30e:	4709                	li	a4,2
    8002a310:	fce79ee3          	bne	a5,a4,8002a2ec <hs_test_entry_two_4+0x2e>
    8002a314:	4591                	li	a1,4
    8002a316:	00014517          	auipc	a0,0x14
    8002a31a:	9ba50513          	addi	a0,a0,-1606 # 8003dcd0 <__func__.0+0xb8e8>
    8002a31e:	1a6050ef          	jal	8002f4c4 <printf>
    8002a322:	6785                	lui	a5,0x1
    8002a324:	00032717          	auipc	a4,0x32
    8002a328:	da072a23          	sw	zero,-588(a4) # 8005c0d8 <trap>
    8002a32c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a32e:	f1579073          	csrw	0xf15,a5
    8002a332:	ae7d60ef          	jal	80000e18 <test_setup_except_function>
    8002a336:	60a2                	ld	ra,8(sp)
    8002a338:	0141                	addi	sp,sp,16
    8002a33a:	898d706f          	j	800013d2 <hshandler>

000000008002a33e <hs_test_entry_two_5>:
HANDLE_INTERRUPT(hs,5)
    8002a33e:	1141                	addi	sp,sp,-16
    8002a340:	4615                	li	a2,5
    8002a342:	00014597          	auipc	a1,0x14
    8002a346:	9b658593          	addi	a1,a1,-1610 # 8003dcf8 <__func__.0+0xb910>
    8002a34a:	00014517          	auipc	a0,0x14
    8002a34e:	92e50513          	addi	a0,a0,-1746 # 8003dc78 <__func__.0+0xb890>
    8002a352:	e406                	sd	ra,8(sp)
    8002a354:	170050ef          	jal	8002f4c4 <printf>
    8002a358:	00032797          	auipc	a5,0x32
    8002a35c:	d807a783          	lw	a5,-640(a5) # 8005c0d8 <trap>
    8002a360:	4705                	li	a4,1
    8002a362:	00e78b63          	beq	a5,a4,8002a378 <hs_test_entry_two_5+0x3a>
    8002a366:	4709                	li	a4,2
    8002a368:	02e78663          	beq	a5,a4,8002a394 <hs_test_entry_two_5+0x56>
    8002a36c:	aadd60ef          	jal	80000e18 <test_setup_except_function>
    8002a370:	60a2                	ld	ra,8(sp)
    8002a372:	0141                	addi	sp,sp,16
    8002a374:	85ed706f          	j	800013d2 <hshandler>
    8002a378:	4595                	li	a1,5
    8002a37a:	00014517          	auipc	a0,0x14
    8002a37e:	92e50513          	addi	a0,a0,-1746 # 8003dca8 <__func__.0+0xb8c0>
    8002a382:	142050ef          	jal	8002f4c4 <printf>
    8002a386:	00032797          	auipc	a5,0x32
    8002a38a:	d527a783          	lw	a5,-686(a5) # 8005c0d8 <trap>
    8002a38e:	4709                	li	a4,2
    8002a390:	fce79ee3          	bne	a5,a4,8002a36c <hs_test_entry_two_5+0x2e>
    8002a394:	4595                	li	a1,5
    8002a396:	00014517          	auipc	a0,0x14
    8002a39a:	93a50513          	addi	a0,a0,-1734 # 8003dcd0 <__func__.0+0xb8e8>
    8002a39e:	126050ef          	jal	8002f4c4 <printf>
    8002a3a2:	6785                	lui	a5,0x1
    8002a3a4:	00032717          	auipc	a4,0x32
    8002a3a8:	d2072a23          	sw	zero,-716(a4) # 8005c0d8 <trap>
    8002a3ac:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a3ae:	f1579073          	csrw	0xf15,a5
    8002a3b2:	a67d60ef          	jal	80000e18 <test_setup_except_function>
    8002a3b6:	60a2                	ld	ra,8(sp)
    8002a3b8:	0141                	addi	sp,sp,16
    8002a3ba:	818d706f          	j	800013d2 <hshandler>

000000008002a3be <hs_test_entry_two_6>:
HANDLE_INTERRUPT(hs,6)
    8002a3be:	1141                	addi	sp,sp,-16
    8002a3c0:	4619                	li	a2,6
    8002a3c2:	00014597          	auipc	a1,0x14
    8002a3c6:	93658593          	addi	a1,a1,-1738 # 8003dcf8 <__func__.0+0xb910>
    8002a3ca:	00014517          	auipc	a0,0x14
    8002a3ce:	8ae50513          	addi	a0,a0,-1874 # 8003dc78 <__func__.0+0xb890>
    8002a3d2:	e406                	sd	ra,8(sp)
    8002a3d4:	0f0050ef          	jal	8002f4c4 <printf>
    8002a3d8:	00032797          	auipc	a5,0x32
    8002a3dc:	d007a783          	lw	a5,-768(a5) # 8005c0d8 <trap>
    8002a3e0:	4705                	li	a4,1
    8002a3e2:	00e78b63          	beq	a5,a4,8002a3f8 <hs_test_entry_two_6+0x3a>
    8002a3e6:	4709                	li	a4,2
    8002a3e8:	02e78663          	beq	a5,a4,8002a414 <hs_test_entry_two_6+0x56>
    8002a3ec:	a2dd60ef          	jal	80000e18 <test_setup_except_function>
    8002a3f0:	60a2                	ld	ra,8(sp)
    8002a3f2:	0141                	addi	sp,sp,16
    8002a3f4:	fdfd606f          	j	800013d2 <hshandler>
    8002a3f8:	4599                	li	a1,6
    8002a3fa:	00014517          	auipc	a0,0x14
    8002a3fe:	8ae50513          	addi	a0,a0,-1874 # 8003dca8 <__func__.0+0xb8c0>
    8002a402:	0c2050ef          	jal	8002f4c4 <printf>
    8002a406:	00032797          	auipc	a5,0x32
    8002a40a:	cd27a783          	lw	a5,-814(a5) # 8005c0d8 <trap>
    8002a40e:	4709                	li	a4,2
    8002a410:	fce79ee3          	bne	a5,a4,8002a3ec <hs_test_entry_two_6+0x2e>
    8002a414:	4599                	li	a1,6
    8002a416:	00014517          	auipc	a0,0x14
    8002a41a:	8ba50513          	addi	a0,a0,-1862 # 8003dcd0 <__func__.0+0xb8e8>
    8002a41e:	0a6050ef          	jal	8002f4c4 <printf>
    8002a422:	6785                	lui	a5,0x1
    8002a424:	00032717          	auipc	a4,0x32
    8002a428:	ca072a23          	sw	zero,-844(a4) # 8005c0d8 <trap>
    8002a42c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a42e:	f1579073          	csrw	0xf15,a5
    8002a432:	9e7d60ef          	jal	80000e18 <test_setup_except_function>
    8002a436:	60a2                	ld	ra,8(sp)
    8002a438:	0141                	addi	sp,sp,16
    8002a43a:	f99d606f          	j	800013d2 <hshandler>

000000008002a43e <hs_test_entry_two_7>:
HANDLE_INTERRUPT(hs,7)
    8002a43e:	1141                	addi	sp,sp,-16
    8002a440:	461d                	li	a2,7
    8002a442:	00014597          	auipc	a1,0x14
    8002a446:	8b658593          	addi	a1,a1,-1866 # 8003dcf8 <__func__.0+0xb910>
    8002a44a:	00014517          	auipc	a0,0x14
    8002a44e:	82e50513          	addi	a0,a0,-2002 # 8003dc78 <__func__.0+0xb890>
    8002a452:	e406                	sd	ra,8(sp)
    8002a454:	070050ef          	jal	8002f4c4 <printf>
    8002a458:	00032797          	auipc	a5,0x32
    8002a45c:	c807a783          	lw	a5,-896(a5) # 8005c0d8 <trap>
    8002a460:	4705                	li	a4,1
    8002a462:	00e78b63          	beq	a5,a4,8002a478 <hs_test_entry_two_7+0x3a>
    8002a466:	4709                	li	a4,2
    8002a468:	02e78663          	beq	a5,a4,8002a494 <hs_test_entry_two_7+0x56>
    8002a46c:	9add60ef          	jal	80000e18 <test_setup_except_function>
    8002a470:	60a2                	ld	ra,8(sp)
    8002a472:	0141                	addi	sp,sp,16
    8002a474:	f5fd606f          	j	800013d2 <hshandler>
    8002a478:	459d                	li	a1,7
    8002a47a:	00014517          	auipc	a0,0x14
    8002a47e:	82e50513          	addi	a0,a0,-2002 # 8003dca8 <__func__.0+0xb8c0>
    8002a482:	042050ef          	jal	8002f4c4 <printf>
    8002a486:	00032797          	auipc	a5,0x32
    8002a48a:	c527a783          	lw	a5,-942(a5) # 8005c0d8 <trap>
    8002a48e:	4709                	li	a4,2
    8002a490:	fce79ee3          	bne	a5,a4,8002a46c <hs_test_entry_two_7+0x2e>
    8002a494:	459d                	li	a1,7
    8002a496:	00014517          	auipc	a0,0x14
    8002a49a:	83a50513          	addi	a0,a0,-1990 # 8003dcd0 <__func__.0+0xb8e8>
    8002a49e:	026050ef          	jal	8002f4c4 <printf>
    8002a4a2:	6785                	lui	a5,0x1
    8002a4a4:	00032717          	auipc	a4,0x32
    8002a4a8:	c2072a23          	sw	zero,-972(a4) # 8005c0d8 <trap>
    8002a4ac:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a4ae:	f1579073          	csrw	0xf15,a5
    8002a4b2:	967d60ef          	jal	80000e18 <test_setup_except_function>
    8002a4b6:	60a2                	ld	ra,8(sp)
    8002a4b8:	0141                	addi	sp,sp,16
    8002a4ba:	f19d606f          	j	800013d2 <hshandler>

000000008002a4be <hs_test_entry_two_8>:
HANDLE_INTERRUPT(hs,8)
    8002a4be:	1141                	addi	sp,sp,-16
    8002a4c0:	4621                	li	a2,8
    8002a4c2:	00014597          	auipc	a1,0x14
    8002a4c6:	83658593          	addi	a1,a1,-1994 # 8003dcf8 <__func__.0+0xb910>
    8002a4ca:	00013517          	auipc	a0,0x13
    8002a4ce:	7ae50513          	addi	a0,a0,1966 # 8003dc78 <__func__.0+0xb890>
    8002a4d2:	e406                	sd	ra,8(sp)
    8002a4d4:	7f1040ef          	jal	8002f4c4 <printf>
    8002a4d8:	00032797          	auipc	a5,0x32
    8002a4dc:	c007a783          	lw	a5,-1024(a5) # 8005c0d8 <trap>
    8002a4e0:	4705                	li	a4,1
    8002a4e2:	00e78b63          	beq	a5,a4,8002a4f8 <hs_test_entry_two_8+0x3a>
    8002a4e6:	4709                	li	a4,2
    8002a4e8:	02e78663          	beq	a5,a4,8002a514 <hs_test_entry_two_8+0x56>
    8002a4ec:	92dd60ef          	jal	80000e18 <test_setup_except_function>
    8002a4f0:	60a2                	ld	ra,8(sp)
    8002a4f2:	0141                	addi	sp,sp,16
    8002a4f4:	edfd606f          	j	800013d2 <hshandler>
    8002a4f8:	45a1                	li	a1,8
    8002a4fa:	00013517          	auipc	a0,0x13
    8002a4fe:	7ae50513          	addi	a0,a0,1966 # 8003dca8 <__func__.0+0xb8c0>
    8002a502:	7c3040ef          	jal	8002f4c4 <printf>
    8002a506:	00032797          	auipc	a5,0x32
    8002a50a:	bd27a783          	lw	a5,-1070(a5) # 8005c0d8 <trap>
    8002a50e:	4709                	li	a4,2
    8002a510:	fce79ee3          	bne	a5,a4,8002a4ec <hs_test_entry_two_8+0x2e>
    8002a514:	45a1                	li	a1,8
    8002a516:	00013517          	auipc	a0,0x13
    8002a51a:	7ba50513          	addi	a0,a0,1978 # 8003dcd0 <__func__.0+0xb8e8>
    8002a51e:	7a7040ef          	jal	8002f4c4 <printf>
    8002a522:	6785                	lui	a5,0x1
    8002a524:	00032717          	auipc	a4,0x32
    8002a528:	ba072a23          	sw	zero,-1100(a4) # 8005c0d8 <trap>
    8002a52c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a52e:	f1579073          	csrw	0xf15,a5
    8002a532:	8e7d60ef          	jal	80000e18 <test_setup_except_function>
    8002a536:	60a2                	ld	ra,8(sp)
    8002a538:	0141                	addi	sp,sp,16
    8002a53a:	e99d606f          	j	800013d2 <hshandler>

000000008002a53e <vs_test_entry_two_1>:

HANDLE_INTERRUPT(vs,1)
    8002a53e:	1141                	addi	sp,sp,-16
    8002a540:	00013597          	auipc	a1,0x13
    8002a544:	7c058593          	addi	a1,a1,1984 # 8003dd00 <__func__.0+0xb918>
    8002a548:	4605                	li	a2,1
    8002a54a:	00013517          	auipc	a0,0x13
    8002a54e:	72e50513          	addi	a0,a0,1838 # 8003dc78 <__func__.0+0xb890>
    8002a552:	e406                	sd	ra,8(sp)
    8002a554:	771040ef          	jal	8002f4c4 <printf>
    8002a558:	00032597          	auipc	a1,0x32
    8002a55c:	b805a583          	lw	a1,-1152(a1) # 8005c0d8 <trap>
    8002a560:	4785                	li	a5,1
    8002a562:	00f58b63          	beq	a1,a5,8002a578 <vs_test_entry_two_1+0x3a>
    8002a566:	4789                	li	a5,2
    8002a568:	02f58563          	beq	a1,a5,8002a592 <vs_test_entry_two_1+0x54>
    8002a56c:	8add60ef          	jal	80000e18 <test_setup_except_function>
    8002a570:	60a2                	ld	ra,8(sp)
    8002a572:	0141                	addi	sp,sp,16
    8002a574:	fbbd606f          	j	8000152e <vshandler>
    8002a578:	00013517          	auipc	a0,0x13
    8002a57c:	73050513          	addi	a0,a0,1840 # 8003dca8 <__func__.0+0xb8c0>
    8002a580:	745040ef          	jal	8002f4c4 <printf>
    8002a584:	00032597          	auipc	a1,0x32
    8002a588:	b545a583          	lw	a1,-1196(a1) # 8005c0d8 <trap>
    8002a58c:	4789                	li	a5,2
    8002a58e:	fcf59fe3          	bne	a1,a5,8002a56c <vs_test_entry_two_1+0x2e>
    8002a592:	4585                	li	a1,1
    8002a594:	00013517          	auipc	a0,0x13
    8002a598:	73c50513          	addi	a0,a0,1852 # 8003dcd0 <__func__.0+0xb8e8>
    8002a59c:	729040ef          	jal	8002f4c4 <printf>
    8002a5a0:	6785                	lui	a5,0x1
    8002a5a2:	00032717          	auipc	a4,0x32
    8002a5a6:	b2072b23          	sw	zero,-1226(a4) # 8005c0d8 <trap>
    8002a5aa:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a5ac:	f1579073          	csrw	0xf15,a5
    8002a5b0:	869d60ef          	jal	80000e18 <test_setup_except_function>
    8002a5b4:	60a2                	ld	ra,8(sp)
    8002a5b6:	0141                	addi	sp,sp,16
    8002a5b8:	f77d606f          	j	8000152e <vshandler>

000000008002a5bc <vs_test_entry_two_2>:
HANDLE_INTERRUPT(vs,2)
    8002a5bc:	1141                	addi	sp,sp,-16
    8002a5be:	00013597          	auipc	a1,0x13
    8002a5c2:	74258593          	addi	a1,a1,1858 # 8003dd00 <__func__.0+0xb918>
    8002a5c6:	4609                	li	a2,2
    8002a5c8:	00013517          	auipc	a0,0x13
    8002a5cc:	6b050513          	addi	a0,a0,1712 # 8003dc78 <__func__.0+0xb890>
    8002a5d0:	e406                	sd	ra,8(sp)
    8002a5d2:	6f3040ef          	jal	8002f4c4 <printf>
    8002a5d6:	00032597          	auipc	a1,0x32
    8002a5da:	b025a583          	lw	a1,-1278(a1) # 8005c0d8 <trap>
    8002a5de:	4785                	li	a5,1
    8002a5e0:	00f58b63          	beq	a1,a5,8002a5f6 <vs_test_entry_two_2+0x3a>
    8002a5e4:	4789                	li	a5,2
    8002a5e6:	02f58663          	beq	a1,a5,8002a612 <vs_test_entry_two_2+0x56>
    8002a5ea:	82fd60ef          	jal	80000e18 <test_setup_except_function>
    8002a5ee:	60a2                	ld	ra,8(sp)
    8002a5f0:	0141                	addi	sp,sp,16
    8002a5f2:	f3dd606f          	j	8000152e <vshandler>
    8002a5f6:	4589                	li	a1,2
    8002a5f8:	00013517          	auipc	a0,0x13
    8002a5fc:	6b050513          	addi	a0,a0,1712 # 8003dca8 <__func__.0+0xb8c0>
    8002a600:	6c5040ef          	jal	8002f4c4 <printf>
    8002a604:	00032597          	auipc	a1,0x32
    8002a608:	ad45a583          	lw	a1,-1324(a1) # 8005c0d8 <trap>
    8002a60c:	4789                	li	a5,2
    8002a60e:	fcf59ee3          	bne	a1,a5,8002a5ea <vs_test_entry_two_2+0x2e>
    8002a612:	00013517          	auipc	a0,0x13
    8002a616:	6be50513          	addi	a0,a0,1726 # 8003dcd0 <__func__.0+0xb8e8>
    8002a61a:	6ab040ef          	jal	8002f4c4 <printf>
    8002a61e:	6785                	lui	a5,0x1
    8002a620:	00032717          	auipc	a4,0x32
    8002a624:	aa072c23          	sw	zero,-1352(a4) # 8005c0d8 <trap>
    8002a628:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a62a:	f1579073          	csrw	0xf15,a5
    8002a62e:	fead60ef          	jal	80000e18 <test_setup_except_function>
    8002a632:	60a2                	ld	ra,8(sp)
    8002a634:	0141                	addi	sp,sp,16
    8002a636:	ef9d606f          	j	8000152e <vshandler>

000000008002a63a <vs_test_entry_two_3>:
HANDLE_INTERRUPT(vs,3)
    8002a63a:	1141                	addi	sp,sp,-16
    8002a63c:	460d                	li	a2,3
    8002a63e:	00013597          	auipc	a1,0x13
    8002a642:	6c258593          	addi	a1,a1,1730 # 8003dd00 <__func__.0+0xb918>
    8002a646:	00013517          	auipc	a0,0x13
    8002a64a:	63250513          	addi	a0,a0,1586 # 8003dc78 <__func__.0+0xb890>
    8002a64e:	e406                	sd	ra,8(sp)
    8002a650:	675040ef          	jal	8002f4c4 <printf>
    8002a654:	00032797          	auipc	a5,0x32
    8002a658:	a847a783          	lw	a5,-1404(a5) # 8005c0d8 <trap>
    8002a65c:	4705                	li	a4,1
    8002a65e:	00e78b63          	beq	a5,a4,8002a674 <vs_test_entry_two_3+0x3a>
    8002a662:	4709                	li	a4,2
    8002a664:	02e78663          	beq	a5,a4,8002a690 <vs_test_entry_two_3+0x56>
    8002a668:	fb0d60ef          	jal	80000e18 <test_setup_except_function>
    8002a66c:	60a2                	ld	ra,8(sp)
    8002a66e:	0141                	addi	sp,sp,16
    8002a670:	ebfd606f          	j	8000152e <vshandler>
    8002a674:	458d                	li	a1,3
    8002a676:	00013517          	auipc	a0,0x13
    8002a67a:	63250513          	addi	a0,a0,1586 # 8003dca8 <__func__.0+0xb8c0>
    8002a67e:	647040ef          	jal	8002f4c4 <printf>
    8002a682:	00032797          	auipc	a5,0x32
    8002a686:	a567a783          	lw	a5,-1450(a5) # 8005c0d8 <trap>
    8002a68a:	4709                	li	a4,2
    8002a68c:	fce79ee3          	bne	a5,a4,8002a668 <vs_test_entry_two_3+0x2e>
    8002a690:	458d                	li	a1,3
    8002a692:	00013517          	auipc	a0,0x13
    8002a696:	63e50513          	addi	a0,a0,1598 # 8003dcd0 <__func__.0+0xb8e8>
    8002a69a:	62b040ef          	jal	8002f4c4 <printf>
    8002a69e:	6785                	lui	a5,0x1
    8002a6a0:	00032717          	auipc	a4,0x32
    8002a6a4:	a2072c23          	sw	zero,-1480(a4) # 8005c0d8 <trap>
    8002a6a8:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a6aa:	f1579073          	csrw	0xf15,a5
    8002a6ae:	f6ad60ef          	jal	80000e18 <test_setup_except_function>
    8002a6b2:	60a2                	ld	ra,8(sp)
    8002a6b4:	0141                	addi	sp,sp,16
    8002a6b6:	e79d606f          	j	8000152e <vshandler>

000000008002a6ba <vs_test_entry_two_4>:
HANDLE_INTERRUPT(vs,4)
    8002a6ba:	1141                	addi	sp,sp,-16
    8002a6bc:	4611                	li	a2,4
    8002a6be:	00013597          	auipc	a1,0x13
    8002a6c2:	64258593          	addi	a1,a1,1602 # 8003dd00 <__func__.0+0xb918>
    8002a6c6:	00013517          	auipc	a0,0x13
    8002a6ca:	5b250513          	addi	a0,a0,1458 # 8003dc78 <__func__.0+0xb890>
    8002a6ce:	e406                	sd	ra,8(sp)
    8002a6d0:	5f5040ef          	jal	8002f4c4 <printf>
    8002a6d4:	00032797          	auipc	a5,0x32
    8002a6d8:	a047a783          	lw	a5,-1532(a5) # 8005c0d8 <trap>
    8002a6dc:	4705                	li	a4,1
    8002a6de:	00e78b63          	beq	a5,a4,8002a6f4 <vs_test_entry_two_4+0x3a>
    8002a6e2:	4709                	li	a4,2
    8002a6e4:	02e78663          	beq	a5,a4,8002a710 <vs_test_entry_two_4+0x56>
    8002a6e8:	f30d60ef          	jal	80000e18 <test_setup_except_function>
    8002a6ec:	60a2                	ld	ra,8(sp)
    8002a6ee:	0141                	addi	sp,sp,16
    8002a6f0:	e3fd606f          	j	8000152e <vshandler>
    8002a6f4:	4591                	li	a1,4
    8002a6f6:	00013517          	auipc	a0,0x13
    8002a6fa:	5b250513          	addi	a0,a0,1458 # 8003dca8 <__func__.0+0xb8c0>
    8002a6fe:	5c7040ef          	jal	8002f4c4 <printf>
    8002a702:	00032797          	auipc	a5,0x32
    8002a706:	9d67a783          	lw	a5,-1578(a5) # 8005c0d8 <trap>
    8002a70a:	4709                	li	a4,2
    8002a70c:	fce79ee3          	bne	a5,a4,8002a6e8 <vs_test_entry_two_4+0x2e>
    8002a710:	4591                	li	a1,4
    8002a712:	00013517          	auipc	a0,0x13
    8002a716:	5be50513          	addi	a0,a0,1470 # 8003dcd0 <__func__.0+0xb8e8>
    8002a71a:	5ab040ef          	jal	8002f4c4 <printf>
    8002a71e:	6785                	lui	a5,0x1
    8002a720:	00032717          	auipc	a4,0x32
    8002a724:	9a072c23          	sw	zero,-1608(a4) # 8005c0d8 <trap>
    8002a728:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a72a:	f1579073          	csrw	0xf15,a5
    8002a72e:	eead60ef          	jal	80000e18 <test_setup_except_function>
    8002a732:	60a2                	ld	ra,8(sp)
    8002a734:	0141                	addi	sp,sp,16
    8002a736:	df9d606f          	j	8000152e <vshandler>

000000008002a73a <vs_test_entry_two_5>:
HANDLE_INTERRUPT(vs,5)
    8002a73a:	1141                	addi	sp,sp,-16
    8002a73c:	4615                	li	a2,5
    8002a73e:	00013597          	auipc	a1,0x13
    8002a742:	5c258593          	addi	a1,a1,1474 # 8003dd00 <__func__.0+0xb918>
    8002a746:	00013517          	auipc	a0,0x13
    8002a74a:	53250513          	addi	a0,a0,1330 # 8003dc78 <__func__.0+0xb890>
    8002a74e:	e406                	sd	ra,8(sp)
    8002a750:	575040ef          	jal	8002f4c4 <printf>
    8002a754:	00032797          	auipc	a5,0x32
    8002a758:	9847a783          	lw	a5,-1660(a5) # 8005c0d8 <trap>
    8002a75c:	4705                	li	a4,1
    8002a75e:	00e78b63          	beq	a5,a4,8002a774 <vs_test_entry_two_5+0x3a>
    8002a762:	4709                	li	a4,2
    8002a764:	02e78663          	beq	a5,a4,8002a790 <vs_test_entry_two_5+0x56>
    8002a768:	eb0d60ef          	jal	80000e18 <test_setup_except_function>
    8002a76c:	60a2                	ld	ra,8(sp)
    8002a76e:	0141                	addi	sp,sp,16
    8002a770:	dbfd606f          	j	8000152e <vshandler>
    8002a774:	4595                	li	a1,5
    8002a776:	00013517          	auipc	a0,0x13
    8002a77a:	53250513          	addi	a0,a0,1330 # 8003dca8 <__func__.0+0xb8c0>
    8002a77e:	547040ef          	jal	8002f4c4 <printf>
    8002a782:	00032797          	auipc	a5,0x32
    8002a786:	9567a783          	lw	a5,-1706(a5) # 8005c0d8 <trap>
    8002a78a:	4709                	li	a4,2
    8002a78c:	fce79ee3          	bne	a5,a4,8002a768 <vs_test_entry_two_5+0x2e>
    8002a790:	4595                	li	a1,5
    8002a792:	00013517          	auipc	a0,0x13
    8002a796:	53e50513          	addi	a0,a0,1342 # 8003dcd0 <__func__.0+0xb8e8>
    8002a79a:	52b040ef          	jal	8002f4c4 <printf>
    8002a79e:	6785                	lui	a5,0x1
    8002a7a0:	00032717          	auipc	a4,0x32
    8002a7a4:	92072c23          	sw	zero,-1736(a4) # 8005c0d8 <trap>
    8002a7a8:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a7aa:	f1579073          	csrw	0xf15,a5
    8002a7ae:	e6ad60ef          	jal	80000e18 <test_setup_except_function>
    8002a7b2:	60a2                	ld	ra,8(sp)
    8002a7b4:	0141                	addi	sp,sp,16
    8002a7b6:	d79d606f          	j	8000152e <vshandler>

000000008002a7ba <vs_test_entry_two_6>:
HANDLE_INTERRUPT(vs,6)
    8002a7ba:	1141                	addi	sp,sp,-16
    8002a7bc:	4619                	li	a2,6
    8002a7be:	00013597          	auipc	a1,0x13
    8002a7c2:	54258593          	addi	a1,a1,1346 # 8003dd00 <__func__.0+0xb918>
    8002a7c6:	00013517          	auipc	a0,0x13
    8002a7ca:	4b250513          	addi	a0,a0,1202 # 8003dc78 <__func__.0+0xb890>
    8002a7ce:	e406                	sd	ra,8(sp)
    8002a7d0:	4f5040ef          	jal	8002f4c4 <printf>
    8002a7d4:	00032797          	auipc	a5,0x32
    8002a7d8:	9047a783          	lw	a5,-1788(a5) # 8005c0d8 <trap>
    8002a7dc:	4705                	li	a4,1
    8002a7de:	00e78b63          	beq	a5,a4,8002a7f4 <vs_test_entry_two_6+0x3a>
    8002a7e2:	4709                	li	a4,2
    8002a7e4:	02e78663          	beq	a5,a4,8002a810 <vs_test_entry_two_6+0x56>
    8002a7e8:	e30d60ef          	jal	80000e18 <test_setup_except_function>
    8002a7ec:	60a2                	ld	ra,8(sp)
    8002a7ee:	0141                	addi	sp,sp,16
    8002a7f0:	d3fd606f          	j	8000152e <vshandler>
    8002a7f4:	4599                	li	a1,6
    8002a7f6:	00013517          	auipc	a0,0x13
    8002a7fa:	4b250513          	addi	a0,a0,1202 # 8003dca8 <__func__.0+0xb8c0>
    8002a7fe:	4c7040ef          	jal	8002f4c4 <printf>
    8002a802:	00032797          	auipc	a5,0x32
    8002a806:	8d67a783          	lw	a5,-1834(a5) # 8005c0d8 <trap>
    8002a80a:	4709                	li	a4,2
    8002a80c:	fce79ee3          	bne	a5,a4,8002a7e8 <vs_test_entry_two_6+0x2e>
    8002a810:	4599                	li	a1,6
    8002a812:	00013517          	auipc	a0,0x13
    8002a816:	4be50513          	addi	a0,a0,1214 # 8003dcd0 <__func__.0+0xb8e8>
    8002a81a:	4ab040ef          	jal	8002f4c4 <printf>
    8002a81e:	6785                	lui	a5,0x1
    8002a820:	00032717          	auipc	a4,0x32
    8002a824:	8a072c23          	sw	zero,-1864(a4) # 8005c0d8 <trap>
    8002a828:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a82a:	f1579073          	csrw	0xf15,a5
    8002a82e:	dead60ef          	jal	80000e18 <test_setup_except_function>
    8002a832:	60a2                	ld	ra,8(sp)
    8002a834:	0141                	addi	sp,sp,16
    8002a836:	cf9d606f          	j	8000152e <vshandler>

000000008002a83a <vs_test_entry_two_7>:
HANDLE_INTERRUPT(vs,7)
    8002a83a:	1141                	addi	sp,sp,-16
    8002a83c:	461d                	li	a2,7
    8002a83e:	00013597          	auipc	a1,0x13
    8002a842:	4c258593          	addi	a1,a1,1218 # 8003dd00 <__func__.0+0xb918>
    8002a846:	00013517          	auipc	a0,0x13
    8002a84a:	43250513          	addi	a0,a0,1074 # 8003dc78 <__func__.0+0xb890>
    8002a84e:	e406                	sd	ra,8(sp)
    8002a850:	475040ef          	jal	8002f4c4 <printf>
    8002a854:	00032797          	auipc	a5,0x32
    8002a858:	8847a783          	lw	a5,-1916(a5) # 8005c0d8 <trap>
    8002a85c:	4705                	li	a4,1
    8002a85e:	00e78b63          	beq	a5,a4,8002a874 <vs_test_entry_two_7+0x3a>
    8002a862:	4709                	li	a4,2
    8002a864:	02e78663          	beq	a5,a4,8002a890 <vs_test_entry_two_7+0x56>
    8002a868:	db0d60ef          	jal	80000e18 <test_setup_except_function>
    8002a86c:	60a2                	ld	ra,8(sp)
    8002a86e:	0141                	addi	sp,sp,16
    8002a870:	cbfd606f          	j	8000152e <vshandler>
    8002a874:	459d                	li	a1,7
    8002a876:	00013517          	auipc	a0,0x13
    8002a87a:	43250513          	addi	a0,a0,1074 # 8003dca8 <__func__.0+0xb8c0>
    8002a87e:	447040ef          	jal	8002f4c4 <printf>
    8002a882:	00032797          	auipc	a5,0x32
    8002a886:	8567a783          	lw	a5,-1962(a5) # 8005c0d8 <trap>
    8002a88a:	4709                	li	a4,2
    8002a88c:	fce79ee3          	bne	a5,a4,8002a868 <vs_test_entry_two_7+0x2e>
    8002a890:	459d                	li	a1,7
    8002a892:	00013517          	auipc	a0,0x13
    8002a896:	43e50513          	addi	a0,a0,1086 # 8003dcd0 <__func__.0+0xb8e8>
    8002a89a:	42b040ef          	jal	8002f4c4 <printf>
    8002a89e:	6785                	lui	a5,0x1
    8002a8a0:	00032717          	auipc	a4,0x32
    8002a8a4:	82072c23          	sw	zero,-1992(a4) # 8005c0d8 <trap>
    8002a8a8:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a8aa:	f1579073          	csrw	0xf15,a5
    8002a8ae:	d6ad60ef          	jal	80000e18 <test_setup_except_function>
    8002a8b2:	60a2                	ld	ra,8(sp)
    8002a8b4:	0141                	addi	sp,sp,16
    8002a8b6:	c79d606f          	j	8000152e <vshandler>

000000008002a8ba <vs_test_entry_two_8>:
HANDLE_INTERRUPT(vs,8)
    8002a8ba:	1141                	addi	sp,sp,-16
    8002a8bc:	4621                	li	a2,8
    8002a8be:	00013597          	auipc	a1,0x13
    8002a8c2:	44258593          	addi	a1,a1,1090 # 8003dd00 <__func__.0+0xb918>
    8002a8c6:	00013517          	auipc	a0,0x13
    8002a8ca:	3b250513          	addi	a0,a0,946 # 8003dc78 <__func__.0+0xb890>
    8002a8ce:	e406                	sd	ra,8(sp)
    8002a8d0:	3f5040ef          	jal	8002f4c4 <printf>
    8002a8d4:	00032797          	auipc	a5,0x32
    8002a8d8:	8047a783          	lw	a5,-2044(a5) # 8005c0d8 <trap>
    8002a8dc:	4705                	li	a4,1
    8002a8de:	00e78b63          	beq	a5,a4,8002a8f4 <vs_test_entry_two_8+0x3a>
    8002a8e2:	4709                	li	a4,2
    8002a8e4:	02e78663          	beq	a5,a4,8002a910 <vs_test_entry_two_8+0x56>
    8002a8e8:	d30d60ef          	jal	80000e18 <test_setup_except_function>
    8002a8ec:	60a2                	ld	ra,8(sp)
    8002a8ee:	0141                	addi	sp,sp,16
    8002a8f0:	c3fd606f          	j	8000152e <vshandler>
    8002a8f4:	45a1                	li	a1,8
    8002a8f6:	00013517          	auipc	a0,0x13
    8002a8fa:	3b250513          	addi	a0,a0,946 # 8003dca8 <__func__.0+0xb8c0>
    8002a8fe:	3c7040ef          	jal	8002f4c4 <printf>
    8002a902:	00031797          	auipc	a5,0x31
    8002a906:	7d67a783          	lw	a5,2006(a5) # 8005c0d8 <trap>
    8002a90a:	4709                	li	a4,2
    8002a90c:	fce79ee3          	bne	a5,a4,8002a8e8 <vs_test_entry_two_8+0x2e>
    8002a910:	45a1                	li	a1,8
    8002a912:	00013517          	auipc	a0,0x13
    8002a916:	3be50513          	addi	a0,a0,958 # 8003dcd0 <__func__.0+0xb8e8>
    8002a91a:	3ab040ef          	jal	8002f4c4 <printf>
    8002a91e:	6785                	lui	a5,0x1
    8002a920:	00031717          	auipc	a4,0x31
    8002a924:	7a072c23          	sw	zero,1976(a4) # 8005c0d8 <trap>
    8002a928:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a92a:	f1579073          	csrw	0xf15,a5
    8002a92e:	cead60ef          	jal	80000e18 <test_setup_except_function>
    8002a932:	60a2                	ld	ra,8(sp)
    8002a934:	0141                	addi	sp,sp,16
    8002a936:	bf9d606f          	j	8000152e <vshandler>

000000008002a93a <m_test_entry_two_0>:


void m_test_entry_two_0() { 
    8002a93a:	1141                	addi	sp,sp,-16
    8002a93c:	e406                	sd	ra,8(sp)
    8002a93e:	e022                	sd	s0,0(sp)
    TEST_SETUP_EXCEPT();
    8002a940:	cd8d60ef          	jal	80000e18 <test_setup_except_function>

    printf("进入mtvec指向入口(异常)\n");
    8002a944:	00013517          	auipc	a0,0x13
    8002a948:	3c450513          	addi	a0,a0,964 # 8003dd08 <__func__.0+0xb920>
    8002a94c:	7b4040ef          	jal	8002f100 <puts>

    if (trap == 1) { 
    8002a950:	00031797          	auipc	a5,0x31
    8002a954:	7887a783          	lw	a5,1928(a5) # 8005c0d8 <trap>
    8002a958:	4705                	li	a4,1
    8002a95a:	00031417          	auipc	s0,0x31
    8002a95e:	77e40413          	addi	s0,s0,1918 # 8005c0d8 <trap>
    8002a962:	0ee78263          	beq	a5,a4,8002aa46 <m_test_entry_two_0+0x10c>
        CSRS(mie, 1ULL << 1);
        CSRS(mip, MIP_SSIP);

    }  

    if (trap == 2) { 
    8002a966:	4709                	li	a4,2
    8002a968:	0ae78c63          	beq	a5,a4,8002aa20 <m_test_entry_two_0+0xe6>
        trap = 0; 
        printf("mhandler中发生异常\n");
        CSRW(CSR_MCONFIGPTR,0xfff); 
    }  

    if (trap == 3) {        //供m_double_trap_3测试使用
    8002a96c:	470d                	li	a4,3
    8002a96e:	04e78263          	beq	a5,a4,8002a9b2 <m_test_entry_two_0+0x78>
        TEST_ASSERT("当 MDT 位已为0,通过显式的CSR写操作将 MIE 位设置为1",
            (CSRR(CSR_MSTATUS) & MSTATUS_MIE) != 0
        ); 
    }

    if (trap == 4) {        //供m_double_trap_4和5测试使用
    8002a972:	4711                	li	a4,4
    8002a974:	00e78c63          	beq	a5,a4,8002a98c <m_test_entry_two_0+0x52>
        trap = 0;
        bool check1 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) != 0);
        if (check1 == true)  trap = -1;
    }

    if (trap == 5) {        //供s_double_trap_3测试使用
    8002a978:	4715                	li	a4,5
    8002a97a:	0ee78f63          	beq	a5,a4,8002aa78 <m_test_entry_two_0+0x13e>
        CSRS(CSR_MSTATUS, MSTATUS_SIE);
        TEST_ASSERT("当 SDT 位已为0,通过显式的CSR写操作将 SIE 位设置为1",
            (CSRR(CSR_MSTATUS) & MSTATUS_SIE) != 0
        ); 
    }
    TEST_SETUP_EXCEPT();
    8002a97e:	c9ad60ef          	jal	80000e18 <test_setup_except_function>
    mhandler();
}
    8002a982:	6402                	ld	s0,0(sp)
    8002a984:	60a2                	ld	ra,8(sp)
    8002a986:	0141                	addi	sp,sp,16
    mhandler();
    8002a988:	901d606f          	j	80001288 <mhandler>
        trap = 0;
    8002a98c:	00031797          	auipc	a5,0x31
    8002a990:	7407a623          	sw	zero,1868(a5) # 8005c0d8 <trap>
        bool check1 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) != 0);
    8002a994:	300027f3          	csrr	a5,mstatus
        if (check1 == true)  trap = -1;
    8002a998:	01579713          	slli	a4,a5,0x15
    8002a99c:	14075663          	bgez	a4,8002aae8 <m_test_entry_two_0+0x1ae>
    8002a9a0:	57fd                	li	a5,-1
    8002a9a2:	c01c                	sw	a5,0(s0)
    TEST_SETUP_EXCEPT();
    8002a9a4:	c74d60ef          	jal	80000e18 <test_setup_except_function>
}
    8002a9a8:	6402                	ld	s0,0(sp)
    8002a9aa:	60a2                	ld	ra,8(sp)
    8002a9ac:	0141                	addi	sp,sp,16
    mhandler();
    8002a9ae:	8dbd606f          	j	80001288 <mhandler>
        CSRC(CSR_MSTATUS, MSTATUS_MDT);
    8002a9b2:	4785                	li	a5,1
        trap = 0;
    8002a9b4:	00031717          	auipc	a4,0x31
    8002a9b8:	72072223          	sw	zero,1828(a4) # 8005c0d8 <trap>
        CSRC(CSR_MSTATUS, MSTATUS_MDT);
    8002a9bc:	17aa                	slli	a5,a5,0x2a
    8002a9be:	3007b073          	csrc	mstatus,a5
        CSRS(CSR_MSTATUS, MSTATUS_MIE);
    8002a9c2:	30046073          	csrsi	mstatus,8
        TEST_ASSERT("当 MDT 位已为0,通过显式的CSR写操作将 MIE 位设置为1",
    8002a9c6:	00013617          	auipc	a2,0x13
    8002a9ca:	39a60613          	addi	a2,a2,922 # 8003dd60 <__func__.0+0xb978>
    8002a9ce:	08c00593          	li	a1,140
    8002a9d2:	00008517          	auipc	a0,0x8
    8002a9d6:	d0e50513          	addi	a0,a0,-754 # 800326e0 <__func__.0+0x2f8>
    8002a9da:	2eb040ef          	jal	8002f4c4 <printf>
    8002a9de:	300027f3          	csrr	a5,mstatus
    8002a9e2:	8ba1                	andi	a5,a5,8
    8002a9e4:	00008597          	auipc	a1,0x8
    8002a9e8:	cd458593          	addi	a1,a1,-812 # 800326b8 <__func__.0+0x2d0>
    8002a9ec:	c789                	beqz	a5,8002a9f6 <m_test_entry_two_0+0xbc>
    8002a9ee:	00008597          	auipc	a1,0x8
    8002a9f2:	cba58593          	addi	a1,a1,-838 # 800326a8 <__func__.0+0x2c0>
    8002a9f6:	00008517          	auipc	a0,0x8
    8002a9fa:	d0250513          	addi	a0,a0,-766 # 800326f8 <__func__.0+0x310>
    8002a9fe:	2c7040ef          	jal	8002f4c4 <printf>
    8002aa02:	300027f3          	csrr	a5,mstatus
    8002aa06:	8ba1                	andi	a5,a5,8
    8002aa08:	10078063          	beqz	a5,8002ab08 <m_test_entry_two_0+0x1ce>
    8002aa0c:	4529                	li	a0,10
    8002aa0e:	7a4030ef          	jal	8002e1b2 <putchar>
    8002aa12:	300027f3          	csrr	a5,mstatus
    if (trap == 4) {        //供m_double_trap_4和5测试使用
    8002aa16:	00031797          	auipc	a5,0x31
    8002aa1a:	6c27a783          	lw	a5,1730(a5) # 8005c0d8 <trap>
    8002aa1e:	bf91                	j	8002a972 <m_test_entry_two_0+0x38>
        printf("mhandler中发生异常\n");
    8002aa20:	00013517          	auipc	a0,0x13
    8002aa24:	32850513          	addi	a0,a0,808 # 8003dd48 <__func__.0+0xb960>
        trap = 0; 
    8002aa28:	00031797          	auipc	a5,0x31
    8002aa2c:	6a07a823          	sw	zero,1712(a5) # 8005c0d8 <trap>
        printf("mhandler中发生异常\n");
    8002aa30:	6d0040ef          	jal	8002f100 <puts>
        CSRW(CSR_MCONFIGPTR,0xfff); 
    8002aa34:	6785                	lui	a5,0x1
    8002aa36:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002aa38:	f1579073          	csrw	0xf15,a5
    if (trap == 3) {        //供m_double_trap_3测试使用
    8002aa3c:	00031797          	auipc	a5,0x31
    8002aa40:	69c7a783          	lw	a5,1692(a5) # 8005c0d8 <trap>
    8002aa44:	b725                	j	8002a96c <m_test_entry_two_0+0x32>
        printf("mhandler中发生软件中断\n"); 
    8002aa46:	00013517          	auipc	a0,0x13
    8002aa4a:	2e250513          	addi	a0,a0,738 # 8003dd28 <__func__.0+0xb940>
        trap = 0; 
    8002aa4e:	00031797          	auipc	a5,0x31
    8002aa52:	6807a523          	sw	zero,1674(a5) # 8005c0d8 <trap>
        printf("mhandler中发生软件中断\n"); 
    8002aa56:	6aa040ef          	jal	8002f100 <puts>
        CSRC(CSR_MSTATUS , MSTATUS_MDT);
    8002aa5a:	4785                	li	a5,1
    8002aa5c:	17aa                	slli	a5,a5,0x2a
    8002aa5e:	3007b073          	csrc	mstatus,a5
        CSRS(CSR_MSTATUS , MSTATUS_MIE);
    8002aa62:	30046073          	csrsi	mstatus,8
        CSRS(mie, 1ULL << 1);
    8002aa66:	30416073          	csrsi	mie,2
        CSRS(mip, MIP_SSIP);
    8002aa6a:	34416073          	csrsi	mip,2
    if (trap == 2) { 
    8002aa6e:	00031797          	auipc	a5,0x31
    8002aa72:	66a7a783          	lw	a5,1642(a5) # 8005c0d8 <trap>
    8002aa76:	bdc5                	j	8002a966 <m_test_entry_two_0+0x2c>
        trap = 0;
    8002aa78:	00031797          	auipc	a5,0x31
    8002aa7c:	6607a023          	sw	zero,1632(a5) # 8005c0d8 <trap>
        CSRC(CSR_SSTATUS, SSTATUS_SDT);
    8002aa80:	010007b7          	lui	a5,0x1000
    8002aa84:	1007b073          	csrc	sstatus,a5
        CSRS(CSR_MSTATUS, MSTATUS_SIE);
    8002aa88:	30016073          	csrsi	mstatus,2
        TEST_ASSERT("当 SDT 位已为0,通过显式的CSR写操作将 SIE 位设置为1",
    8002aa8c:	00013617          	auipc	a2,0x13
    8002aa90:	31c60613          	addi	a2,a2,796 # 8003dda8 <__func__.0+0xb9c0>
    8002aa94:	08c00593          	li	a1,140
    8002aa98:	00008517          	auipc	a0,0x8
    8002aa9c:	c4850513          	addi	a0,a0,-952 # 800326e0 <__func__.0+0x2f8>
    8002aaa0:	225040ef          	jal	8002f4c4 <printf>
    8002aaa4:	300027f3          	csrr	a5,mstatus
    8002aaa8:	8b89                	andi	a5,a5,2
    8002aaaa:	00008597          	auipc	a1,0x8
    8002aaae:	c0e58593          	addi	a1,a1,-1010 # 800326b8 <__func__.0+0x2d0>
    8002aab2:	c789                	beqz	a5,8002aabc <m_test_entry_two_0+0x182>
    8002aab4:	00008597          	auipc	a1,0x8
    8002aab8:	bf458593          	addi	a1,a1,-1036 # 800326a8 <__func__.0+0x2c0>
    8002aabc:	00008517          	auipc	a0,0x8
    8002aac0:	c3c50513          	addi	a0,a0,-964 # 800326f8 <__func__.0+0x310>
    8002aac4:	201040ef          	jal	8002f4c4 <printf>
    8002aac8:	300027f3          	csrr	a5,mstatus
    8002aacc:	8b89                	andi	a5,a5,2
    8002aace:	c395                	beqz	a5,8002aaf2 <m_test_entry_two_0+0x1b8>
    8002aad0:	4529                	li	a0,10
    8002aad2:	6e0030ef          	jal	8002e1b2 <putchar>
    8002aad6:	300027f3          	csrr	a5,mstatus
    TEST_SETUP_EXCEPT();
    8002aada:	b3ed60ef          	jal	80000e18 <test_setup_except_function>
}
    8002aade:	6402                	ld	s0,0(sp)
    8002aae0:	60a2                	ld	ra,8(sp)
    8002aae2:	0141                	addi	sp,sp,16
    mhandler();
    8002aae4:	fa4d606f          	j	80001288 <mhandler>
    if (trap == 5) {        //供s_double_trap_3测试使用
    8002aae8:	00031797          	auipc	a5,0x31
    8002aaec:	5f07a783          	lw	a5,1520(a5) # 8005c0d8 <trap>
    8002aaf0:	b561                	j	8002a978 <m_test_entry_two_0+0x3e>
        TEST_ASSERT("当 SDT 位已为0,通过显式的CSR写操作将 SIE 位设置为1",
    8002aaf2:	00008517          	auipc	a0,0x8
    8002aaf6:	c0e50513          	addi	a0,a0,-1010 # 80032700 <__func__.0+0x318>
    8002aafa:	1cb040ef          	jal	8002f4c4 <printf>
    8002aafe:	02900513          	li	a0,41
    8002ab02:	6b0030ef          	jal	8002e1b2 <putchar>
    8002ab06:	b7e9                	j	8002aad0 <m_test_entry_two_0+0x196>
        TEST_ASSERT("当 MDT 位已为0,通过显式的CSR写操作将 MIE 位设置为1",
    8002ab08:	00008517          	auipc	a0,0x8
    8002ab0c:	bf850513          	addi	a0,a0,-1032 # 80032700 <__func__.0+0x318>
    8002ab10:	1b5040ef          	jal	8002f4c4 <printf>
    8002ab14:	02900513          	li	a0,41
    8002ab18:	69a030ef          	jal	8002e1b2 <putchar>
    8002ab1c:	bdc5                	j	8002aa0c <m_test_entry_two_0+0xd2>

000000008002ab1e <hs_test_entry_two_0>:
void hs_test_entry_two_0() { 
    8002ab1e:	1141                	addi	sp,sp,-16
    printf("进入stvec指向入口(异常)\n");     
    8002ab20:	00013517          	auipc	a0,0x13
    8002ab24:	2d050513          	addi	a0,a0,720 # 8003ddf0 <__func__.0+0xba08>
void hs_test_entry_two_0() { 
    8002ab28:	e022                	sd	s0,0(sp)
    8002ab2a:	e406                	sd	ra,8(sp)
    printf("进入stvec指向入口(异常)\n");     
    8002ab2c:	5d4040ef          	jal	8002f100 <puts>

    if (trap == 2) { 
    8002ab30:	00031797          	auipc	a5,0x31
    8002ab34:	5a87a783          	lw	a5,1448(a5) # 8005c0d8 <trap>
    8002ab38:	4709                	li	a4,2
    8002ab3a:	00031417          	auipc	s0,0x31
    8002ab3e:	59e40413          	addi	s0,s0,1438 # 8005c0d8 <trap>
    8002ab42:	02e78b63          	beq	a5,a4,8002ab78 <hs_test_entry_two_0+0x5a>
        printf("hshandler中发生异常\n");
        CSRW(CSR_MCONFIGPTR,0xfff); 
        TEST_SETUP_EXCEPT();
    }  

    if (trap == 4) {        //供s_double_trap_4测试使用
    8002ab46:	4711                	li	a4,4
    8002ab48:	00e78763          	beq	a5,a4,8002ab56 <hs_test_entry_two_0+0x38>
        trap = 0;
        bool check1 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) != 0);
        if (check1 == true)  trap = -1;
    }
    hshandler();
}
    8002ab4c:	6402                	ld	s0,0(sp)
    8002ab4e:	60a2                	ld	ra,8(sp)
    8002ab50:	0141                	addi	sp,sp,16
    hshandler();
    8002ab52:	881d606f          	j	800013d2 <hshandler>
        trap = 0;
    8002ab56:	00031797          	auipc	a5,0x31
    8002ab5a:	5807a123          	sw	zero,1410(a5) # 8005c0d8 <trap>
        bool check1 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) != 0);
    8002ab5e:	100027f3          	csrr	a5,sstatus
        if (check1 == true)  trap = -1;
    8002ab62:	02779713          	slli	a4,a5,0x27
    8002ab66:	fe0753e3          	bgez	a4,8002ab4c <hs_test_entry_two_0+0x2e>
    8002ab6a:	57fd                	li	a5,-1
    8002ab6c:	c01c                	sw	a5,0(s0)
}
    8002ab6e:	6402                	ld	s0,0(sp)
    8002ab70:	60a2                	ld	ra,8(sp)
    8002ab72:	0141                	addi	sp,sp,16
    hshandler();
    8002ab74:	85fd606f          	j	800013d2 <hshandler>
        printf("hshandler中发生异常\n");
    8002ab78:	00013517          	auipc	a0,0x13
    8002ab7c:	29850513          	addi	a0,a0,664 # 8003de10 <__func__.0+0xba28>
        trap = 0; 
    8002ab80:	00031797          	auipc	a5,0x31
    8002ab84:	5407ac23          	sw	zero,1368(a5) # 8005c0d8 <trap>
        printf("hshandler中发生异常\n");
    8002ab88:	578040ef          	jal	8002f100 <puts>
        CSRW(CSR_MCONFIGPTR,0xfff); 
    8002ab8c:	6785                	lui	a5,0x1
    8002ab8e:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002ab90:	f1579073          	csrw	0xf15,a5
        TEST_SETUP_EXCEPT();
    8002ab94:	a84d60ef          	jal	80000e18 <test_setup_except_function>
    if (trap == 4) {        //供s_double_trap_4测试使用
    8002ab98:	00031797          	auipc	a5,0x31
    8002ab9c:	5407a783          	lw	a5,1344(a5) # 8005c0d8 <trap>
    8002aba0:	b75d                	j	8002ab46 <hs_test_entry_two_0+0x28>

000000008002aba2 <vs_test_entry_two_0>:
void vs_test_entry_two_0() { 
    8002aba2:	1141                	addi	sp,sp,-16
    printf("进入vstvec指向入口(异常)\n"); 
    8002aba4:	00013517          	auipc	a0,0x13
    8002aba8:	28c50513          	addi	a0,a0,652 # 8003de30 <__func__.0+0xba48>
void vs_test_entry_two_0() { 
    8002abac:	e406                	sd	ra,8(sp)
    printf("进入vstvec指向入口(异常)\n"); 
    8002abae:	552040ef          	jal	8002f100 <puts>
    vshandler();
}
    8002abb2:	60a2                	ld	ra,8(sp)
    8002abb4:	0141                	addi	sp,sp,16
    vshandler();
    8002abb6:	979d606f          	j	8000152e <vshandler>

000000008002abba <mtvec_test_1>:



//-------------------------------xtvec_test_begin-------------------------------------

bool mtvec_test_1() {
    8002abba:	1141                	addi	sp,sp,-16

    //m模式下，当mtvec.mode=vectored，未开启中断代理，发生2号软件中断  
    TEST_START();
    8002abbc:	00007597          	auipc	a1,0x7
    8002abc0:	42458593          	addi	a1,a1,1060 # 80031fe0 <__func__.57>
    8002abc4:	00008517          	auipc	a0,0x8
    8002abc8:	b0450513          	addi	a0,a0,-1276 # 800326c8 <__func__.0+0x2e0>
bool mtvec_test_1() {
    8002abcc:	e406                	sd	ra,8(sp)
    TEST_START();
    8002abce:	0f7040ef          	jal	8002f4c4 <printf>
    8002abd2:	4529                	li	a0,10
    8002abd4:	5de030ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002abd8:	4511                	li	a0,4
    8002abda:	b3ad60ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,(1ULL << 3));
    8002abde:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,(1ULL << 1));
    8002abe2:	30016073          	csrsi	mstatus,2

    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002abe6:	300025f3          	csrr	a1,mstatus
    8002abea:	00013517          	auipc	a0,0x13
    8002abee:	26e50513          	addi	a0,a0,622 # 8003de58 <__func__.0+0xba70>
    8002abf2:	0d3040ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 1);
    8002abf6:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002abfa:	00005797          	auipc	a5,0x5
    8002abfe:	17a78793          	addi	a5,a5,378 # 8002fd74 <vs_test_entry>
    8002ac02:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002ac06:	00005797          	auipc	a5,0x5
    8002ac0a:	ee678793          	addi	a5,a5,-282 # 8002faec <hs_test_entry>
    8002ac0e:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002ac12:	00005797          	auipc	a5,0x5
    8002ac16:	c5278793          	addi	a5,a5,-942 # 8002f864 <m_test_entry>
    8002ac1a:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002ac1e:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002ac22:	305025f3          	csrr	a1,mtvec
    8002ac26:	00013517          	auipc	a0,0x13
    8002ac2a:	24250513          	addi	a0,a0,578 # 8003de68 <__func__.0+0xba80>
    8002ac2e:	097040ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002ac32:	9e6d60ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002ac36:	00013517          	auipc	a0,0x13
    8002ac3a:	24250513          	addi	a0,a0,578 # 8003de78 <__func__.0+0xba90>
    8002ac3e:	087040ef          	jal	8002f4c4 <printf>
    CSRS(mip, 1ULL << 1);
    8002ac42:	34416073          	csrsi	mip,2

    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断",
    8002ac46:	08c00593          	li	a1,140
    8002ac4a:	00013617          	auipc	a2,0x13
    8002ac4e:	23e60613          	addi	a2,a2,574 # 8003de88 <__func__.0+0xbaa0>
    8002ac52:	00008517          	auipc	a0,0x8
    8002ac56:	a8e50513          	addi	a0,a0,-1394 # 800326e0 <__func__.0+0x2f8>
    8002ac5a:	06b040ef          	jal	8002f4c4 <printf>
    8002ac5e:	00031797          	auipc	a5,0x31
    8002ac62:	3b37c783          	lbu	a5,947(a5) # 8005c011 <excpt+0x1>
    8002ac66:	00008597          	auipc	a1,0x8
    8002ac6a:	a4258593          	addi	a1,a1,-1470 # 800326a8 <__func__.0+0x2c0>
    8002ac6e:	e789                	bnez	a5,8002ac78 <mtvec_test_1+0xbe>
    8002ac70:	00008597          	auipc	a1,0x8
    8002ac74:	a4858593          	addi	a1,a1,-1464 # 800326b8 <__func__.0+0x2d0>
    8002ac78:	00008517          	auipc	a0,0x8
    8002ac7c:	a8050513          	addi	a0,a0,-1408 # 800326f8 <__func__.0+0x310>
    8002ac80:	045040ef          	jal	8002f4c4 <printf>
    8002ac84:	00031797          	auipc	a5,0x31
    8002ac88:	38d7c783          	lbu	a5,909(a5) # 8005c011 <excpt+0x1>
    8002ac8c:	c799                	beqz	a5,8002ac9a <mtvec_test_1+0xe0>
    8002ac8e:	4529                	li	a0,10
    8002ac90:	522030ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002ac94:	60a2                	ld	ra,8(sp)
    8002ac96:	0141                	addi	sp,sp,16
    8002ac98:	8082                	ret
    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断",
    8002ac9a:	00008517          	auipc	a0,0x8
    8002ac9e:	a6650513          	addi	a0,a0,-1434 # 80032700 <__func__.0+0x318>
    8002aca2:	023040ef          	jal	8002f4c4 <printf>
    8002aca6:	02900513          	li	a0,41
    8002acaa:	508030ef          	jal	8002e1b2 <putchar>
    8002acae:	4529                	li	a0,10
    8002acb0:	502030ef          	jal	8002e1b2 <putchar>
}
    8002acb4:	60a2                	ld	ra,8(sp)
    8002acb6:	0141                	addi	sp,sp,16
    8002acb8:	8082                	ret

000000008002acba <mtvec_test_2>:

bool mtvec_test_2() {
    8002acba:	1141                	addi	sp,sp,-16

    TEST_START();
    8002acbc:	00007597          	auipc	a1,0x7
    8002acc0:	33458593          	addi	a1,a1,820 # 80031ff0 <__func__.56>
    8002acc4:	00008517          	auipc	a0,0x8
    8002acc8:	a0450513          	addi	a0,a0,-1532 # 800326c8 <__func__.0+0x2e0>
bool mtvec_test_2() {
    8002accc:	e406                	sd	ra,8(sp)
    TEST_START();
    8002acce:	7f6040ef          	jal	8002f4c4 <printf>
    8002acd2:	4529                	li	a0,10
    8002acd4:	4de030ef          	jal	8002e1b2 <putchar>

    //m模式下，当mtvec.mode=vectored，未开启异常代理，发生异常  

    goto_priv(PRIV_M);
    8002acd8:	4511                	li	a0,4
    8002acda:	a3ad60ef          	jal	80000f14 <goto_priv>
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002acde:	300025f3          	csrr	a1,mstatus
    8002ace2:	00013517          	auipc	a0,0x13
    8002ace6:	17650513          	addi	a0,a0,374 # 8003de58 <__func__.0+0xba70>
    8002acea:	7da040ef          	jal	8002f4c4 <printf>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002acee:	00005797          	auipc	a5,0x5
    8002acf2:	08678793          	addi	a5,a5,134 # 8002fd74 <vs_test_entry>
    8002acf6:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002acfa:	00005797          	auipc	a5,0x5
    8002acfe:	df278793          	addi	a5,a5,-526 # 8002faec <hs_test_entry>
    8002ad02:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002ad06:	00005797          	auipc	a5,0x5
    8002ad0a:	b5e78793          	addi	a5,a5,-1186 # 8002f864 <m_test_entry>
    8002ad0e:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002ad12:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002ad16:	305025f3          	csrr	a1,mtvec
    8002ad1a:	00013517          	auipc	a0,0x13
    8002ad1e:	14e50513          	addi	a0,a0,334 # 8003de68 <__func__.0+0xba80>
    8002ad22:	7a2040ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002ad26:	8f2d60ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002ad2a:	00013517          	auipc	a0,0x13
    8002ad2e:	14e50513          	addi	a0,a0,334 # 8003de78 <__func__.0+0xba90>
    8002ad32:	792040ef          	jal	8002f4c4 <printf>
    CSRW(CSR_MCONFIGPTR,0xfff);     //访问只读csr
    8002ad36:	6785                	lui	a5,0x1
    8002ad38:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002ad3a:	f1579073          	csrw	0xf15,a5

    TEST_ASSERT("m模式下,mtvec.mode=vectored,未开启异常代理,产生异常",
    8002ad3e:	08c00593          	li	a1,140
    8002ad42:	00013617          	auipc	a2,0x13
    8002ad46:	19660613          	addi	a2,a2,406 # 8003ded8 <__func__.0+0xbaf0>
    8002ad4a:	00008517          	auipc	a0,0x8
    8002ad4e:	99650513          	addi	a0,a0,-1642 # 800326e0 <__func__.0+0x2f8>
    8002ad52:	772040ef          	jal	8002f4c4 <printf>
    8002ad56:	00031797          	auipc	a5,0x31
    8002ad5a:	2bb7c783          	lbu	a5,699(a5) # 8005c011 <excpt+0x1>
    8002ad5e:	00008597          	auipc	a1,0x8
    8002ad62:	94a58593          	addi	a1,a1,-1718 # 800326a8 <__func__.0+0x2c0>
    8002ad66:	e789                	bnez	a5,8002ad70 <mtvec_test_2+0xb6>
    8002ad68:	00008597          	auipc	a1,0x8
    8002ad6c:	95058593          	addi	a1,a1,-1712 # 800326b8 <__func__.0+0x2d0>
    8002ad70:	00008517          	auipc	a0,0x8
    8002ad74:	98850513          	addi	a0,a0,-1656 # 800326f8 <__func__.0+0x310>
    8002ad78:	74c040ef          	jal	8002f4c4 <printf>
    8002ad7c:	00031797          	auipc	a5,0x31
    8002ad80:	2957c783          	lbu	a5,661(a5) # 8005c011 <excpt+0x1>
    8002ad84:	c799                	beqz	a5,8002ad92 <mtvec_test_2+0xd8>
    8002ad86:	4529                	li	a0,10
    8002ad88:	42a030ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002ad8c:	60a2                	ld	ra,8(sp)
    8002ad8e:	0141                	addi	sp,sp,16
    8002ad90:	8082                	ret
    TEST_ASSERT("m模式下,mtvec.mode=vectored,未开启异常代理,产生异常",
    8002ad92:	00008517          	auipc	a0,0x8
    8002ad96:	96e50513          	addi	a0,a0,-1682 # 80032700 <__func__.0+0x318>
    8002ad9a:	72a040ef          	jal	8002f4c4 <printf>
    8002ad9e:	02900513          	li	a0,41
    8002ada2:	410030ef          	jal	8002e1b2 <putchar>
    8002ada6:	4529                	li	a0,10
    8002ada8:	40a030ef          	jal	8002e1b2 <putchar>
}
    8002adac:	60a2                	ld	ra,8(sp)
    8002adae:	0141                	addi	sp,sp,16
    8002adb0:	8082                	ret

000000008002adb2 <mtvec_test_3>:

bool mtvec_test_3() {
    8002adb2:	1141                	addi	sp,sp,-16

    TEST_START();
    8002adb4:	00007597          	auipc	a1,0x7
    8002adb8:	24c58593          	addi	a1,a1,588 # 80032000 <__func__.55>
    8002adbc:	00008517          	auipc	a0,0x8
    8002adc0:	90c50513          	addi	a0,a0,-1780 # 800326c8 <__func__.0+0x2e0>
bool mtvec_test_3() {
    8002adc4:	e406                	sd	ra,8(sp)
    TEST_START();
    8002adc6:	6fe040ef          	jal	8002f4c4 <printf>
    8002adca:	4529                	li	a0,10
    8002adcc:	3e6030ef          	jal	8002e1b2 <putchar>

    //HS模式下，当mtvec.mode=vectored，未开启异常代理，发生异常  

    goto_priv(PRIV_M);
    8002add0:	4511                	li	a0,4
    8002add2:	942d60ef          	jal	80000f14 <goto_priv>
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002add6:	300025f3          	csrr	a1,mstatus
    8002adda:	00013517          	auipc	a0,0x13
    8002adde:	07e50513          	addi	a0,a0,126 # 8003de58 <__func__.0+0xba70>
    8002ade2:	6e2040ef          	jal	8002f4c4 <printf>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002ade6:	00005797          	auipc	a5,0x5
    8002adea:	f8e78793          	addi	a5,a5,-114 # 8002fd74 <vs_test_entry>
    8002adee:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002adf2:	00005797          	auipc	a5,0x5
    8002adf6:	cfa78793          	addi	a5,a5,-774 # 8002faec <hs_test_entry>
    8002adfa:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002adfe:	00005797          	auipc	a5,0x5
    8002ae02:	a6678793          	addi	a5,a5,-1434 # 8002f864 <m_test_entry>
    8002ae06:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002ae0a:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002ae0e:	305025f3          	csrr	a1,mtvec
    8002ae12:	00013517          	auipc	a0,0x13
    8002ae16:	05650513          	addi	a0,a0,86 # 8003de68 <__func__.0+0xba80>
    8002ae1a:	6aa040ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002ae1e:	ffbd50ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_HS);
    8002ae22:	450d                	li	a0,3
    8002ae24:	8f0d60ef          	jal	80000f14 <goto_priv>
    printf("入口：");
    8002ae28:	00013517          	auipc	a0,0x13
    8002ae2c:	05050513          	addi	a0,a0,80 # 8003de78 <__func__.0+0xba90>
    8002ae30:	694040ef          	jal	8002f4c4 <printf>
    CSRR(CSR_MSTATUS);  
    8002ae34:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("HS模式下,mtvec.mode=vectored,未开启异常代理,产生异常",
    8002ae38:	08c00593          	li	a1,140
    8002ae3c:	00013617          	auipc	a2,0x13
    8002ae40:	0e460613          	addi	a2,a2,228 # 8003df20 <__func__.0+0xbb38>
    8002ae44:	00008517          	auipc	a0,0x8
    8002ae48:	89c50513          	addi	a0,a0,-1892 # 800326e0 <__func__.0+0x2f8>
    8002ae4c:	678040ef          	jal	8002f4c4 <printf>
    8002ae50:	00031797          	auipc	a5,0x31
    8002ae54:	1c17c783          	lbu	a5,449(a5) # 8005c011 <excpt+0x1>
    8002ae58:	00008597          	auipc	a1,0x8
    8002ae5c:	85058593          	addi	a1,a1,-1968 # 800326a8 <__func__.0+0x2c0>
    8002ae60:	e789                	bnez	a5,8002ae6a <mtvec_test_3+0xb8>
    8002ae62:	00008597          	auipc	a1,0x8
    8002ae66:	85658593          	addi	a1,a1,-1962 # 800326b8 <__func__.0+0x2d0>
    8002ae6a:	00008517          	auipc	a0,0x8
    8002ae6e:	88e50513          	addi	a0,a0,-1906 # 800326f8 <__func__.0+0x310>
    8002ae72:	652040ef          	jal	8002f4c4 <printf>
    8002ae76:	00031797          	auipc	a5,0x31
    8002ae7a:	19b7c783          	lbu	a5,411(a5) # 8005c011 <excpt+0x1>
    8002ae7e:	c799                	beqz	a5,8002ae8c <mtvec_test_3+0xda>
    8002ae80:	4529                	li	a0,10
    8002ae82:	330030ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002ae86:	60a2                	ld	ra,8(sp)
    8002ae88:	0141                	addi	sp,sp,16
    8002ae8a:	8082                	ret
    TEST_ASSERT("HS模式下,mtvec.mode=vectored,未开启异常代理,产生异常",
    8002ae8c:	00008517          	auipc	a0,0x8
    8002ae90:	87450513          	addi	a0,a0,-1932 # 80032700 <__func__.0+0x318>
    8002ae94:	630040ef          	jal	8002f4c4 <printf>
    8002ae98:	02900513          	li	a0,41
    8002ae9c:	316030ef          	jal	8002e1b2 <putchar>
    8002aea0:	4529                	li	a0,10
    8002aea2:	310030ef          	jal	8002e1b2 <putchar>
}
    8002aea6:	60a2                	ld	ra,8(sp)
    8002aea8:	0141                	addi	sp,sp,16
    8002aeaa:	8082                	ret

000000008002aeac <mtvec_test_4>:

bool mtvec_test_4() {
    8002aeac:	1141                	addi	sp,sp,-16

    TEST_START();
    8002aeae:	00007597          	auipc	a1,0x7
    8002aeb2:	16258593          	addi	a1,a1,354 # 80032010 <__func__.54>
    8002aeb6:	00008517          	auipc	a0,0x8
    8002aeba:	81250513          	addi	a0,a0,-2030 # 800326c8 <__func__.0+0x2e0>
bool mtvec_test_4() {
    8002aebe:	e406                	sd	ra,8(sp)
    TEST_START();
    8002aec0:	604040ef          	jal	8002f4c4 <printf>
    8002aec4:	4529                	li	a0,10
    8002aec6:	2ec030ef          	jal	8002e1b2 <putchar>

    //HU模式下，当mtvec.mode=vectored，未开启异常代理，发生异常  

    goto_priv(PRIV_M);
    8002aeca:	4511                	li	a0,4
    8002aecc:	848d60ef          	jal	80000f14 <goto_priv>
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002aed0:	300025f3          	csrr	a1,mstatus
    8002aed4:	00013517          	auipc	a0,0x13
    8002aed8:	f8450513          	addi	a0,a0,-124 # 8003de58 <__func__.0+0xba70>
    8002aedc:	5e8040ef          	jal	8002f4c4 <printf>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002aee0:	00005797          	auipc	a5,0x5
    8002aee4:	e9478793          	addi	a5,a5,-364 # 8002fd74 <vs_test_entry>
    8002aee8:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002aeec:	00005797          	auipc	a5,0x5
    8002aef0:	c0078793          	addi	a5,a5,-1024 # 8002faec <hs_test_entry>
    8002aef4:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002aef8:	00005797          	auipc	a5,0x5
    8002aefc:	96c78793          	addi	a5,a5,-1684 # 8002f864 <m_test_entry>
    8002af00:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002af04:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002af08:	305025f3          	csrr	a1,mtvec
    8002af0c:	00013517          	auipc	a0,0x13
    8002af10:	f5c50513          	addi	a0,a0,-164 # 8003de68 <__func__.0+0xba80>
    8002af14:	5b0040ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_HU);
    8002af18:	4505                	li	a0,1
    8002af1a:	ffbd50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002af1e:	efbd50ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002af22:	00013517          	auipc	a0,0x13
    8002af26:	f5650513          	addi	a0,a0,-170 # 8003de78 <__func__.0+0xba90>
    8002af2a:	59a040ef          	jal	8002f4c4 <printf>
    asm volatile(
    8002af2e:	22000073          	.insn	4, 0x22000073
    hfence_vvma();

    TEST_ASSERT("HU模式下,mtvec.mode=vectored,未开启异常代理,产生异常",
    8002af32:	08c00593          	li	a1,140
    8002af36:	00013617          	auipc	a2,0x13
    8002af3a:	03260613          	addi	a2,a2,50 # 8003df68 <__func__.0+0xbb80>
    8002af3e:	00007517          	auipc	a0,0x7
    8002af42:	7a250513          	addi	a0,a0,1954 # 800326e0 <__func__.0+0x2f8>
    8002af46:	57e040ef          	jal	8002f4c4 <printf>
    8002af4a:	00031797          	auipc	a5,0x31
    8002af4e:	0c77c783          	lbu	a5,199(a5) # 8005c011 <excpt+0x1>
    8002af52:	00007597          	auipc	a1,0x7
    8002af56:	75658593          	addi	a1,a1,1878 # 800326a8 <__func__.0+0x2c0>
    8002af5a:	e789                	bnez	a5,8002af64 <mtvec_test_4+0xb8>
    8002af5c:	00007597          	auipc	a1,0x7
    8002af60:	75c58593          	addi	a1,a1,1884 # 800326b8 <__func__.0+0x2d0>
    8002af64:	00007517          	auipc	a0,0x7
    8002af68:	79450513          	addi	a0,a0,1940 # 800326f8 <__func__.0+0x310>
    8002af6c:	558040ef          	jal	8002f4c4 <printf>
    8002af70:	00031797          	auipc	a5,0x31
    8002af74:	0a17c783          	lbu	a5,161(a5) # 8005c011 <excpt+0x1>
    8002af78:	c799                	beqz	a5,8002af86 <mtvec_test_4+0xda>
    8002af7a:	4529                	li	a0,10
    8002af7c:	236030ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002af80:	60a2                	ld	ra,8(sp)
    8002af82:	0141                	addi	sp,sp,16
    8002af84:	8082                	ret
    TEST_ASSERT("HU模式下,mtvec.mode=vectored,未开启异常代理,产生异常",
    8002af86:	00007517          	auipc	a0,0x7
    8002af8a:	77a50513          	addi	a0,a0,1914 # 80032700 <__func__.0+0x318>
    8002af8e:	536040ef          	jal	8002f4c4 <printf>
    8002af92:	02900513          	li	a0,41
    8002af96:	21c030ef          	jal	8002e1b2 <putchar>
    8002af9a:	4529                	li	a0,10
    8002af9c:	216030ef          	jal	8002e1b2 <putchar>
}
    8002afa0:	60a2                	ld	ra,8(sp)
    8002afa2:	0141                	addi	sp,sp,16
    8002afa4:	8082                	ret

000000008002afa6 <mtvec_test_5>:

bool mtvec_test_5() {
    8002afa6:	1141                	addi	sp,sp,-16

    TEST_START();
    8002afa8:	00007597          	auipc	a1,0x7
    8002afac:	07858593          	addi	a1,a1,120 # 80032020 <__func__.53>
    8002afb0:	00007517          	auipc	a0,0x7
    8002afb4:	71850513          	addi	a0,a0,1816 # 800326c8 <__func__.0+0x2e0>
bool mtvec_test_5() {
    8002afb8:	e406                	sd	ra,8(sp)
    TEST_START();
    8002afba:	50a040ef          	jal	8002f4c4 <printf>
    8002afbe:	4529                	li	a0,10
    8002afc0:	1f2030ef          	jal	8002e1b2 <putchar>

    //VS模式下，当mtvec.mode=vectored，未开启异常代理，发生异常  

    goto_priv(PRIV_M);
    8002afc4:	4511                	li	a0,4
    8002afc6:	f4fd50ef          	jal	80000f14 <goto_priv>
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002afca:	300025f3          	csrr	a1,mstatus
    8002afce:	00013517          	auipc	a0,0x13
    8002afd2:	e8a50513          	addi	a0,a0,-374 # 8003de58 <__func__.0+0xba70>
    8002afd6:	4ee040ef          	jal	8002f4c4 <printf>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002afda:	00005797          	auipc	a5,0x5
    8002afde:	d9a78793          	addi	a5,a5,-614 # 8002fd74 <vs_test_entry>
    8002afe2:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002afe6:	00005797          	auipc	a5,0x5
    8002afea:	b0678793          	addi	a5,a5,-1274 # 8002faec <hs_test_entry>
    8002afee:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002aff2:	00005797          	auipc	a5,0x5
    8002aff6:	87278793          	addi	a5,a5,-1934 # 8002f864 <m_test_entry>
    8002affa:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002affe:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002b002:	305025f3          	csrr	a1,mtvec
    8002b006:	00013517          	auipc	a0,0x13
    8002b00a:	e6250513          	addi	a0,a0,-414 # 8003de68 <__func__.0+0xba80>
    8002b00e:	4b6040ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);
    8002b012:	4509                	li	a0,2
    8002b014:	f01d50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002b018:	e01d50ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002b01c:	00013517          	auipc	a0,0x13
    8002b020:	e5c50513          	addi	a0,a0,-420 # 8003de78 <__func__.0+0xba90>
    8002b024:	4a0040ef          	jal	8002f4c4 <printf>
    8002b028:	22000073          	.insn	4, 0x22000073
    hfence_vvma();

    TEST_ASSERT("VS模式下,mtvec.mode=vectored,未开启异常代理,产生异常",
    8002b02c:	08c00593          	li	a1,140
    8002b030:	00013617          	auipc	a2,0x13
    8002b034:	f8060613          	addi	a2,a2,-128 # 8003dfb0 <__func__.0+0xbbc8>
    8002b038:	00007517          	auipc	a0,0x7
    8002b03c:	6a850513          	addi	a0,a0,1704 # 800326e0 <__func__.0+0x2f8>
    8002b040:	484040ef          	jal	8002f4c4 <printf>
    8002b044:	00031797          	auipc	a5,0x31
    8002b048:	fcd7c783          	lbu	a5,-51(a5) # 8005c011 <excpt+0x1>
    8002b04c:	00007597          	auipc	a1,0x7
    8002b050:	65c58593          	addi	a1,a1,1628 # 800326a8 <__func__.0+0x2c0>
    8002b054:	e789                	bnez	a5,8002b05e <mtvec_test_5+0xb8>
    8002b056:	00007597          	auipc	a1,0x7
    8002b05a:	66258593          	addi	a1,a1,1634 # 800326b8 <__func__.0+0x2d0>
    8002b05e:	00007517          	auipc	a0,0x7
    8002b062:	69a50513          	addi	a0,a0,1690 # 800326f8 <__func__.0+0x310>
    8002b066:	45e040ef          	jal	8002f4c4 <printf>
    8002b06a:	00031797          	auipc	a5,0x31
    8002b06e:	fa77c783          	lbu	a5,-89(a5) # 8005c011 <excpt+0x1>
    8002b072:	c799                	beqz	a5,8002b080 <mtvec_test_5+0xda>
    8002b074:	4529                	li	a0,10
    8002b076:	13c030ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002b07a:	60a2                	ld	ra,8(sp)
    8002b07c:	0141                	addi	sp,sp,16
    8002b07e:	8082                	ret
    TEST_ASSERT("VS模式下,mtvec.mode=vectored,未开启异常代理,产生异常",
    8002b080:	00007517          	auipc	a0,0x7
    8002b084:	68050513          	addi	a0,a0,1664 # 80032700 <__func__.0+0x318>
    8002b088:	43c040ef          	jal	8002f4c4 <printf>
    8002b08c:	02900513          	li	a0,41
    8002b090:	122030ef          	jal	8002e1b2 <putchar>
    8002b094:	4529                	li	a0,10
    8002b096:	11c030ef          	jal	8002e1b2 <putchar>
}
    8002b09a:	60a2                	ld	ra,8(sp)
    8002b09c:	0141                	addi	sp,sp,16
    8002b09e:	8082                	ret

000000008002b0a0 <mtvec_test_6>:

bool mtvec_test_6() {
    8002b0a0:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b0a2:	00007597          	auipc	a1,0x7
    8002b0a6:	f8e58593          	addi	a1,a1,-114 # 80032030 <__func__.52>
    8002b0aa:	00007517          	auipc	a0,0x7
    8002b0ae:	61e50513          	addi	a0,a0,1566 # 800326c8 <__func__.0+0x2e0>
bool mtvec_test_6() {
    8002b0b2:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b0b4:	410040ef          	jal	8002f4c4 <printf>
    8002b0b8:	4529                	li	a0,10
    8002b0ba:	0f8030ef          	jal	8002e1b2 <putchar>

    //VU模式下，当mtvec.mode=vectored，未开启异常代理，发生异常  

    goto_priv(PRIV_M);
    8002b0be:	4511                	li	a0,4
    8002b0c0:	e55d50ef          	jal	80000f14 <goto_priv>
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002b0c4:	300025f3          	csrr	a1,mstatus
    8002b0c8:	00013517          	auipc	a0,0x13
    8002b0cc:	d9050513          	addi	a0,a0,-624 # 8003de58 <__func__.0+0xba70>
    8002b0d0:	3f4040ef          	jal	8002f4c4 <printf>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b0d4:	00005797          	auipc	a5,0x5
    8002b0d8:	ca078793          	addi	a5,a5,-864 # 8002fd74 <vs_test_entry>
    8002b0dc:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b0e0:	00005797          	auipc	a5,0x5
    8002b0e4:	a0c78793          	addi	a5,a5,-1524 # 8002faec <hs_test_entry>
    8002b0e8:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002b0ec:	00004797          	auipc	a5,0x4
    8002b0f0:	77878793          	addi	a5,a5,1912 # 8002f864 <m_test_entry>
    8002b0f4:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002b0f8:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002b0fc:	305025f3          	csrr	a1,mtvec
    8002b100:	00013517          	auipc	a0,0x13
    8002b104:	d6850513          	addi	a0,a0,-664 # 8003de68 <__func__.0+0xba80>
    8002b108:	3bc040ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002b10c:	d0dd50ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_VU);
    8002b110:	4501                	li	a0,0
    8002b112:	e03d50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002b116:	d03d50ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002b11a:	00013517          	auipc	a0,0x13
    8002b11e:	d5e50513          	addi	a0,a0,-674 # 8003de78 <__func__.0+0xba90>
    8002b122:	3a2040ef          	jal	8002f4c4 <printf>
    asm volatile(
    8002b126:	62000073          	.insn	4, 0x62000073
    hfence_gvma();

    TEST_ASSERT("VU模式下,mtvec.mode=vectored,未开启异常代理,产生异常",
    8002b12a:	08c00593          	li	a1,140
    8002b12e:	00013617          	auipc	a2,0x13
    8002b132:	eca60613          	addi	a2,a2,-310 # 8003dff8 <__func__.0+0xbc10>
    8002b136:	00007517          	auipc	a0,0x7
    8002b13a:	5aa50513          	addi	a0,a0,1450 # 800326e0 <__func__.0+0x2f8>
    8002b13e:	386040ef          	jal	8002f4c4 <printf>
    8002b142:	00031797          	auipc	a5,0x31
    8002b146:	ecf7c783          	lbu	a5,-305(a5) # 8005c011 <excpt+0x1>
    8002b14a:	00007597          	auipc	a1,0x7
    8002b14e:	55e58593          	addi	a1,a1,1374 # 800326a8 <__func__.0+0x2c0>
    8002b152:	e789                	bnez	a5,8002b15c <mtvec_test_6+0xbc>
    8002b154:	00007597          	auipc	a1,0x7
    8002b158:	56458593          	addi	a1,a1,1380 # 800326b8 <__func__.0+0x2d0>
    8002b15c:	00007517          	auipc	a0,0x7
    8002b160:	59c50513          	addi	a0,a0,1436 # 800326f8 <__func__.0+0x310>
    8002b164:	360040ef          	jal	8002f4c4 <printf>
    8002b168:	00031797          	auipc	a5,0x31
    8002b16c:	ea97c783          	lbu	a5,-343(a5) # 8005c011 <excpt+0x1>
    8002b170:	c799                	beqz	a5,8002b17e <mtvec_test_6+0xde>
    8002b172:	4529                	li	a0,10
    8002b174:	03e030ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002b178:	60a2                	ld	ra,8(sp)
    8002b17a:	0141                	addi	sp,sp,16
    8002b17c:	8082                	ret
    TEST_ASSERT("VU模式下,mtvec.mode=vectored,未开启异常代理,产生异常",
    8002b17e:	00007517          	auipc	a0,0x7
    8002b182:	58250513          	addi	a0,a0,1410 # 80032700 <__func__.0+0x318>
    8002b186:	33e040ef          	jal	8002f4c4 <printf>
    8002b18a:	02900513          	li	a0,41
    8002b18e:	024030ef          	jal	8002e1b2 <putchar>
    8002b192:	4529                	li	a0,10
    8002b194:	01e030ef          	jal	8002e1b2 <putchar>
}
    8002b198:	60a2                	ld	ra,8(sp)
    8002b19a:	0141                	addi	sp,sp,16
    8002b19c:	8082                	ret

000000008002b19e <mtvec_test_7>:

bool mtvec_test_7() {
    8002b19e:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b1a0:	00007597          	auipc	a1,0x7
    8002b1a4:	ea058593          	addi	a1,a1,-352 # 80032040 <__func__.51>
    8002b1a8:	00007517          	auipc	a0,0x7
    8002b1ac:	52050513          	addi	a0,a0,1312 # 800326c8 <__func__.0+0x2e0>
bool mtvec_test_7() {
    8002b1b0:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b1b2:	312040ef          	jal	8002f4c4 <printf>
    8002b1b6:	4529                	li	a0,10
    8002b1b8:	7fb020ef          	jal	8002e1b2 <putchar>

    //HS模式下，当mtvec.mode=vectored，未开启中断代理，发生中断  

    goto_priv(PRIV_M);
    8002b1bc:	4511                	li	a0,4
    8002b1be:	d57d50ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002b1c2:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002b1c6:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002b1ca:	10016073          	csrsi	sstatus,2
    CSRC(CSR_MIDELEG,1ULL << 1);
    8002b1ce:	30317073          	csrci	mideleg,2
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002b1d2:	300025f3          	csrr	a1,mstatus
    8002b1d6:	00013517          	auipc	a0,0x13
    8002b1da:	c8250513          	addi	a0,a0,-894 # 8003de58 <__func__.0+0xba70>
    8002b1de:	2e6040ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002b1e2:	c37d50ef          	jal	80000e18 <test_setup_except_function>
    CSRS(CSR_MVIEN,1ULL << 1);
    8002b1e6:	30816073          	csrsi	mvien,2
    excpt_info();
    8002b1ea:	e71d50ef          	jal	8000105a <excpt_info>

    CSRS(mie, 1ULL << 1);
    8002b1ee:	30416073          	csrsi	mie,2

    // CSRS(sie, 1ULL << 1);
    printf("sie=%llx \n",CSRR(sie));
    8002b1f2:	104025f3          	csrr	a1,sie
    8002b1f6:	00013517          	auipc	a0,0x13
    8002b1fa:	e4a50513          	addi	a0,a0,-438 # 8003e040 <__func__.0+0xbc58>
    8002b1fe:	2c6040ef          	jal	8002f4c4 <printf>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b202:	00005797          	auipc	a5,0x5
    8002b206:	b7278793          	addi	a5,a5,-1166 # 8002fd74 <vs_test_entry>
    8002b20a:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b20e:	00005797          	auipc	a5,0x5
    8002b212:	8de78793          	addi	a5,a5,-1826 # 8002faec <hs_test_entry>
    8002b216:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002b21a:	00004797          	auipc	a5,0x4
    8002b21e:	64a78793          	addi	a5,a5,1610 # 8002f864 <m_test_entry>
    8002b222:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002b226:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002b22a:	305025f3          	csrr	a1,mtvec
    8002b22e:	00013517          	auipc	a0,0x13
    8002b232:	c3a50513          	addi	a0,a0,-966 # 8003de68 <__func__.0+0xba80>
    8002b236:	28e040ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002b23a:	bdfd50ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_HS);
    8002b23e:	450d                	li	a0,3
    8002b240:	cd5d50ef          	jal	80000f14 <goto_priv>
    printf("入口：");
    8002b244:	00013517          	auipc	a0,0x13
    8002b248:	c3450513          	addi	a0,a0,-972 # 8003de78 <__func__.0+0xba90>
    8002b24c:	278040ef          	jal	8002f4c4 <printf>
    CSRS(sip, 1ULL << 1);
    8002b250:	14416073          	csrsi	sip,2
    
    TEST_ASSERT("HS模式下,mtvec.mode=vectored,未开启中断代理,产生2号软件中断",
    8002b254:	08c00593          	li	a1,140
    8002b258:	00013617          	auipc	a2,0x13
    8002b25c:	df860613          	addi	a2,a2,-520 # 8003e050 <__func__.0+0xbc68>
    8002b260:	00007517          	auipc	a0,0x7
    8002b264:	48050513          	addi	a0,a0,1152 # 800326e0 <__func__.0+0x2f8>
    8002b268:	25c040ef          	jal	8002f4c4 <printf>
    8002b26c:	00031797          	auipc	a5,0x31
    8002b270:	da57c783          	lbu	a5,-603(a5) # 8005c011 <excpt+0x1>
    8002b274:	00007597          	auipc	a1,0x7
    8002b278:	43458593          	addi	a1,a1,1076 # 800326a8 <__func__.0+0x2c0>
    8002b27c:	e789                	bnez	a5,8002b286 <mtvec_test_7+0xe8>
    8002b27e:	00007597          	auipc	a1,0x7
    8002b282:	43a58593          	addi	a1,a1,1082 # 800326b8 <__func__.0+0x2d0>
    8002b286:	00007517          	auipc	a0,0x7
    8002b28a:	47250513          	addi	a0,a0,1138 # 800326f8 <__func__.0+0x310>
    8002b28e:	236040ef          	jal	8002f4c4 <printf>
    8002b292:	00031797          	auipc	a5,0x31
    8002b296:	d7f7c783          	lbu	a5,-641(a5) # 8005c011 <excpt+0x1>
    8002b29a:	c799                	beqz	a5,8002b2a8 <mtvec_test_7+0x10a>
    8002b29c:	4529                	li	a0,10
    8002b29e:	715020ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002b2a2:	60a2                	ld	ra,8(sp)
    8002b2a4:	0141                	addi	sp,sp,16
    8002b2a6:	8082                	ret
    TEST_ASSERT("HS模式下,mtvec.mode=vectored,未开启中断代理,产生2号软件中断",
    8002b2a8:	00007517          	auipc	a0,0x7
    8002b2ac:	45850513          	addi	a0,a0,1112 # 80032700 <__func__.0+0x318>
    8002b2b0:	214040ef          	jal	8002f4c4 <printf>
    8002b2b4:	02900513          	li	a0,41
    8002b2b8:	6fb020ef          	jal	8002e1b2 <putchar>
    8002b2bc:	4529                	li	a0,10
    8002b2be:	6f5020ef          	jal	8002e1b2 <putchar>
}
    8002b2c2:	60a2                	ld	ra,8(sp)
    8002b2c4:	0141                	addi	sp,sp,16
    8002b2c6:	8082                	ret

000000008002b2c8 <stvec_test_1>:
//     // TEST_END();
// }



bool stvec_test_1() {
    8002b2c8:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b2ca:	00007597          	auipc	a1,0x7
    8002b2ce:	d8658593          	addi	a1,a1,-634 # 80032050 <__func__.50>
    8002b2d2:	00007517          	auipc	a0,0x7
    8002b2d6:	3f650513          	addi	a0,a0,1014 # 800326c8 <__func__.0+0x2e0>
bool stvec_test_1() {
    8002b2da:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b2dc:	1e8040ef          	jal	8002f4c4 <printf>
    8002b2e0:	4529                	li	a0,10
    8002b2e2:	6d1020ef          	jal	8002e1b2 <putchar>

    //hs模式下，开启了mideleg中断代理，关闭了hideleg中断代理，发生2号软件中断  

    goto_priv(PRIV_M);
    8002b2e6:	4511                	li	a0,4
    8002b2e8:	c2dd50ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002b2ec:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002b2f0:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002b2f4:	10016073          	csrsi	sstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002b2f8:	30316073          	csrsi	mideleg,2
    CSRS(CSR_HIDELEG,1ULL << 1);
    8002b2fc:	60316073          	csrsi	hideleg,2
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002b300:	300025f3          	csrr	a1,mstatus
    8002b304:	00013517          	auipc	a0,0x13
    8002b308:	b5450513          	addi	a0,a0,-1196 # 8003de58 <__func__.0+0xba70>
    8002b30c:	1b8040ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 1);
    8002b310:	30416073          	csrsi	mie,2
    CSRS(sie, 1ULL << 1);
    8002b314:	10416073          	csrsi	sie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b318:	00005797          	auipc	a5,0x5
    8002b31c:	a5c78793          	addi	a5,a5,-1444 # 8002fd74 <vs_test_entry>
    8002b320:	20579073          	csrw	vstvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002b324:	00004797          	auipc	a5,0x4
    8002b328:	54078793          	addi	a5,a5,1344 # 8002f864 <m_test_entry>
    8002b32c:	30579073          	csrw	mtvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b330:	00004797          	auipc	a5,0x4
    8002b334:	7bc78793          	addi	a5,a5,1980 # 8002faec <hs_test_entry>
    8002b338:	10579073          	csrw	stvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002b33c:	1050e073          	csrsi	stvec,1
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002b340:	105025f3          	csrr	a1,stvec
    8002b344:	00013517          	auipc	a0,0x13
    8002b348:	d5c50513          	addi	a0,a0,-676 # 8003e0a0 <__func__.0+0xbcb8>
    8002b34c:	178040ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002b350:	ac9d50ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_HS);
    8002b354:	450d                	li	a0,3
    8002b356:	bbfd50ef          	jal	80000f14 <goto_priv>
    printf("入口：");
    8002b35a:	00013517          	auipc	a0,0x13
    8002b35e:	b1e50513          	addi	a0,a0,-1250 # 8003de78 <__func__.0+0xba90>
    8002b362:	162040ef          	jal	8002f4c4 <printf>
    CSRS(sip, 1ULL << 1);
    8002b366:	14416073          	csrsi	sip,2
    
    TEST_ASSERT("HS模式下,mtvec.mode=vectored,mideleg=1,hideleg=0,产生2号软件中断",
    8002b36a:	08c00593          	li	a1,140
    8002b36e:	00013617          	auipc	a2,0x13
    8002b372:	d4260613          	addi	a2,a2,-702 # 8003e0b0 <__func__.0+0xbcc8>
    8002b376:	00007517          	auipc	a0,0x7
    8002b37a:	36a50513          	addi	a0,a0,874 # 800326e0 <__func__.0+0x2f8>
    8002b37e:	146040ef          	jal	8002f4c4 <printf>
    8002b382:	00031797          	auipc	a5,0x31
    8002b386:	c8f7c783          	lbu	a5,-881(a5) # 8005c011 <excpt+0x1>
    8002b38a:	00007597          	auipc	a1,0x7
    8002b38e:	31e58593          	addi	a1,a1,798 # 800326a8 <__func__.0+0x2c0>
    8002b392:	e789                	bnez	a5,8002b39c <stvec_test_1+0xd4>
    8002b394:	00007597          	auipc	a1,0x7
    8002b398:	32458593          	addi	a1,a1,804 # 800326b8 <__func__.0+0x2d0>
    8002b39c:	00007517          	auipc	a0,0x7
    8002b3a0:	35c50513          	addi	a0,a0,860 # 800326f8 <__func__.0+0x310>
    8002b3a4:	120040ef          	jal	8002f4c4 <printf>
    8002b3a8:	00031797          	auipc	a5,0x31
    8002b3ac:	c697c783          	lbu	a5,-919(a5) # 8005c011 <excpt+0x1>
    8002b3b0:	c799                	beqz	a5,8002b3be <stvec_test_1+0xf6>
    8002b3b2:	4529                	li	a0,10
    8002b3b4:	5ff020ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002b3b8:	60a2                	ld	ra,8(sp)
    8002b3ba:	0141                	addi	sp,sp,16
    8002b3bc:	8082                	ret
    TEST_ASSERT("HS模式下,mtvec.mode=vectored,mideleg=1,hideleg=0,产生2号软件中断",
    8002b3be:	00007517          	auipc	a0,0x7
    8002b3c2:	34250513          	addi	a0,a0,834 # 80032700 <__func__.0+0x318>
    8002b3c6:	0fe040ef          	jal	8002f4c4 <printf>
    8002b3ca:	02900513          	li	a0,41
    8002b3ce:	5e5020ef          	jal	8002e1b2 <putchar>
    8002b3d2:	4529                	li	a0,10
    8002b3d4:	5df020ef          	jal	8002e1b2 <putchar>
}
    8002b3d8:	60a2                	ld	ra,8(sp)
    8002b3da:	0141                	addi	sp,sp,16
    8002b3dc:	8082                	ret

000000008002b3de <stvec_test_2>:

bool stvec_test_2() {
    8002b3de:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b3e0:	00007597          	auipc	a1,0x7
    8002b3e4:	c8058593          	addi	a1,a1,-896 # 80032060 <__func__.49>
    8002b3e8:	00007517          	auipc	a0,0x7
    8002b3ec:	2e050513          	addi	a0,a0,736 # 800326c8 <__func__.0+0x2e0>
bool stvec_test_2() {
    8002b3f0:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b3f2:	0d2040ef          	jal	8002f4c4 <printf>
    8002b3f6:	4529                	li	a0,10
    8002b3f8:	5bb020ef          	jal	8002e1b2 <putchar>

    //HS模式下，开启了medeleg代理，关闭hedeleg异常代理，发生异常

    goto_priv(PRIV_M);
    8002b3fc:	4511                	li	a0,4
    8002b3fe:	b17d50ef          	jal	80000f14 <goto_priv>

    CSRS(CSR_MEDELEG,1ULL << 21);
    8002b402:	002007b7          	lui	a5,0x200
    8002b406:	3027a073          	csrs	medeleg,a5

    CSRW(CSR_MTVEC,m_test_entry);
    8002b40a:	00004797          	auipc	a5,0x4
    8002b40e:	45a78793          	addi	a5,a5,1114 # 8002f864 <m_test_entry>
    8002b412:	30579073          	csrw	mtvec,a5
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b416:	00005797          	auipc	a5,0x5
    8002b41a:	95e78793          	addi	a5,a5,-1698 # 8002fd74 <vs_test_entry>
    8002b41e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b422:	00004797          	auipc	a5,0x4
    8002b426:	6ca78793          	addi	a5,a5,1738 # 8002faec <hs_test_entry>
    8002b42a:	10579073          	csrw	stvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002b42e:	1050e073          	csrsi	stvec,1
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002b432:	105025f3          	csrr	a1,stvec
    8002b436:	00013517          	auipc	a0,0x13
    8002b43a:	c6a50513          	addi	a0,a0,-918 # 8003e0a0 <__func__.0+0xbcb8>
    8002b43e:	086040ef          	jal	8002f4c4 <printf>


    goto_priv(PRIV_HS);
    8002b442:	450d                	li	a0,3
    8002b444:	ad1d50ef          	jal	80000f14 <goto_priv>
    hspt_init();
    8002b448:	9a4d50ef          	jal	800005ec <hspt_init>
    hpt_init();
    8002b44c:	d84d50ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8002b450:	b38d50ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8002b454:	450d                	li	a0,3
    8002b456:	abfd50ef          	jal	80000f14 <goto_priv>
    set_prev_priv(PRIV_VS);
    8002b45a:	4509                	li	a0,2
    8002b45c:	9d9d50ef          	jal	80000e34 <set_prev_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8002b460:	9b9d50ef          	jal	80000e18 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8002b464:	000807b7          	lui	a5,0x80
    8002b468:	1007b073          	csrc	sstatus,a5
    printf("入口：");
    8002b46c:	00013517          	auipc	a0,0x13
    8002b470:	a0c50513          	addi	a0,a0,-1524 # 8003de78 <__func__.0+0xba90>
    8002b474:	050040ef          	jal	8002f4c4 <printf>
    asm volatile(
    8002b478:	001007b7          	lui	a5,0x100
    8002b47c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8002b480:	07b2                	slli	a5,a5,0xc
    8002b482:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("HS模式下,mtvec.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b486:	08c00593          	li	a1,140
    8002b48a:	00013617          	auipc	a2,0x13
    8002b48e:	c7660613          	addi	a2,a2,-906 # 8003e100 <__func__.0+0xbd18>
    8002b492:	00007517          	auipc	a0,0x7
    8002b496:	24e50513          	addi	a0,a0,590 # 800326e0 <__func__.0+0x2f8>
    8002b49a:	02a040ef          	jal	8002f4c4 <printf>
    8002b49e:	00031797          	auipc	a5,0x31
    8002b4a2:	b737c783          	lbu	a5,-1165(a5) # 8005c011 <excpt+0x1>
    8002b4a6:	00007597          	auipc	a1,0x7
    8002b4aa:	20258593          	addi	a1,a1,514 # 800326a8 <__func__.0+0x2c0>
    8002b4ae:	e789                	bnez	a5,8002b4b8 <stvec_test_2+0xda>
    8002b4b0:	00007597          	auipc	a1,0x7
    8002b4b4:	20858593          	addi	a1,a1,520 # 800326b8 <__func__.0+0x2d0>
    8002b4b8:	00007517          	auipc	a0,0x7
    8002b4bc:	24050513          	addi	a0,a0,576 # 800326f8 <__func__.0+0x310>
    8002b4c0:	004040ef          	jal	8002f4c4 <printf>
    8002b4c4:	00031797          	auipc	a5,0x31
    8002b4c8:	b4d7c783          	lbu	a5,-1203(a5) # 8005c011 <excpt+0x1>
    8002b4cc:	c799                	beqz	a5,8002b4da <stvec_test_2+0xfc>
    8002b4ce:	4529                	li	a0,10
    8002b4d0:	4e3020ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    );
    
}
    8002b4d4:	60a2                	ld	ra,8(sp)
    8002b4d6:	0141                	addi	sp,sp,16
    8002b4d8:	8082                	ret
    TEST_ASSERT("HS模式下,mtvec.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b4da:	00007517          	auipc	a0,0x7
    8002b4de:	22650513          	addi	a0,a0,550 # 80032700 <__func__.0+0x318>
    8002b4e2:	7e3030ef          	jal	8002f4c4 <printf>
    8002b4e6:	02900513          	li	a0,41
    8002b4ea:	4c9020ef          	jal	8002e1b2 <putchar>
    8002b4ee:	4529                	li	a0,10
    8002b4f0:	4c3020ef          	jal	8002e1b2 <putchar>
}
    8002b4f4:	60a2                	ld	ra,8(sp)
    8002b4f6:	0141                	addi	sp,sp,16
    8002b4f8:	8082                	ret

000000008002b4fa <stvec_test_3>:

bool stvec_test_3() {
    8002b4fa:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b4fc:	00007597          	auipc	a1,0x7
    8002b500:	b7458593          	addi	a1,a1,-1164 # 80032070 <__func__.47>
    8002b504:	00007517          	auipc	a0,0x7
    8002b508:	1c450513          	addi	a0,a0,452 # 800326c8 <__func__.0+0x2e0>
bool stvec_test_3() {
    8002b50c:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b50e:	7b7030ef          	jal	8002f4c4 <printf>
    8002b512:	4529                	li	a0,10
    8002b514:	49f020ef          	jal	8002e1b2 <putchar>

    //HU模式下，开启了medeleg代理，关闭hedeleg异常代理，发生异常

    goto_priv(PRIV_M);
    8002b518:	4511                	li	a0,4
    8002b51a:	9fbd50ef          	jal	80000f14 <goto_priv>

    CSRS(CSR_MEDELEG,1ULL << 2);
    8002b51e:	30226073          	csrsi	medeleg,4

    CSRW(CSR_MTVEC,m_test_entry);
    8002b522:	00004797          	auipc	a5,0x4
    8002b526:	34278793          	addi	a5,a5,834 # 8002f864 <m_test_entry>
    8002b52a:	30579073          	csrw	mtvec,a5
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b52e:	00005797          	auipc	a5,0x5
    8002b532:	84678793          	addi	a5,a5,-1978 # 8002fd74 <vs_test_entry>
    8002b536:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b53a:	00004797          	auipc	a5,0x4
    8002b53e:	5b278793          	addi	a5,a5,1458 # 8002faec <hs_test_entry>
    8002b542:	10579073          	csrw	stvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002b546:	1050e073          	csrsi	stvec,1
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002b54a:	105025f3          	csrr	a1,stvec
    8002b54e:	00013517          	auipc	a0,0x13
    8002b552:	b5250513          	addi	a0,a0,-1198 # 8003e0a0 <__func__.0+0xbcb8>
    8002b556:	76f030ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_HU);
    8002b55a:	4505                	li	a0,1
    8002b55c:	9b9d50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();      
    8002b560:	8b9d50ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002b564:	00013517          	auipc	a0,0x13
    8002b568:	91450513          	addi	a0,a0,-1772 # 8003de78 <__func__.0+0xba90>
    8002b56c:	759030ef          	jal	8002f4c4 <printf>
    CSRR(CSR_MSTATUS);
    8002b570:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("HU模式下,mtvec.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b574:	08c00593          	li	a1,140
    8002b578:	00013617          	auipc	a2,0x13
    8002b57c:	bd060613          	addi	a2,a2,-1072 # 8003e148 <__func__.0+0xbd60>
    8002b580:	00007517          	auipc	a0,0x7
    8002b584:	16050513          	addi	a0,a0,352 # 800326e0 <__func__.0+0x2f8>
    8002b588:	73d030ef          	jal	8002f4c4 <printf>
    8002b58c:	00031797          	auipc	a5,0x31
    8002b590:	a857c783          	lbu	a5,-1403(a5) # 8005c011 <excpt+0x1>
    8002b594:	00007597          	auipc	a1,0x7
    8002b598:	11458593          	addi	a1,a1,276 # 800326a8 <__func__.0+0x2c0>
    8002b59c:	e789                	bnez	a5,8002b5a6 <stvec_test_3+0xac>
    8002b59e:	00007597          	auipc	a1,0x7
    8002b5a2:	11a58593          	addi	a1,a1,282 # 800326b8 <__func__.0+0x2d0>
    8002b5a6:	00007517          	auipc	a0,0x7
    8002b5aa:	15250513          	addi	a0,a0,338 # 800326f8 <__func__.0+0x310>
    8002b5ae:	717030ef          	jal	8002f4c4 <printf>
    8002b5b2:	00031797          	auipc	a5,0x31
    8002b5b6:	a5f7c783          	lbu	a5,-1441(a5) # 8005c011 <excpt+0x1>
    8002b5ba:	c799                	beqz	a5,8002b5c8 <stvec_test_3+0xce>
    8002b5bc:	4529                	li	a0,10
    8002b5be:	3f5020ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    );
}
    8002b5c2:	60a2                	ld	ra,8(sp)
    8002b5c4:	0141                	addi	sp,sp,16
    8002b5c6:	8082                	ret
    TEST_ASSERT("HU模式下,mtvec.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b5c8:	00007517          	auipc	a0,0x7
    8002b5cc:	13850513          	addi	a0,a0,312 # 80032700 <__func__.0+0x318>
    8002b5d0:	6f5030ef          	jal	8002f4c4 <printf>
    8002b5d4:	02900513          	li	a0,41
    8002b5d8:	3db020ef          	jal	8002e1b2 <putchar>
    8002b5dc:	4529                	li	a0,10
    8002b5de:	3d5020ef          	jal	8002e1b2 <putchar>
}
    8002b5e2:	60a2                	ld	ra,8(sp)
    8002b5e4:	0141                	addi	sp,sp,16
    8002b5e6:	8082                	ret

000000008002b5e8 <stvec_test_4>:

bool stvec_test_4() {
    8002b5e8:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b5ea:	00007597          	auipc	a1,0x7
    8002b5ee:	a9658593          	addi	a1,a1,-1386 # 80032080 <__func__.46>
    8002b5f2:	00007517          	auipc	a0,0x7
    8002b5f6:	0d650513          	addi	a0,a0,214 # 800326c8 <__func__.0+0x2e0>
bool stvec_test_4() {
    8002b5fa:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b5fc:	6c9030ef          	jal	8002f4c4 <printf>
    8002b600:	4529                	li	a0,10
    8002b602:	3b1020ef          	jal	8002e1b2 <putchar>

    //VS模式下，开启了medeleg代理，关闭hedeleg异常代理，发生异常

    goto_priv(PRIV_M);
    8002b606:	4511                	li	a0,4
    8002b608:	90dd50ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    8002b60c:	001007b7          	lui	a5,0x100
    8002b610:	6007a073          	csrs	hstatus,a5

    CSRS(CSR_MEDELEG,1ULL << 22);
    8002b614:	004007b7          	lui	a5,0x400
    8002b618:	3027a073          	csrs	medeleg,a5

    CSRW(CSR_MTVEC,m_test_entry);
    8002b61c:	00004797          	auipc	a5,0x4
    8002b620:	24878793          	addi	a5,a5,584 # 8002f864 <m_test_entry>
    8002b624:	30579073          	csrw	mtvec,a5
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b628:	00004797          	auipc	a5,0x4
    8002b62c:	74c78793          	addi	a5,a5,1868 # 8002fd74 <vs_test_entry>
    8002b630:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b634:	00004797          	auipc	a5,0x4
    8002b638:	4b878793          	addi	a5,a5,1208 # 8002faec <hs_test_entry>
    8002b63c:	10579073          	csrw	stvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002b640:	1050e073          	csrsi	stvec,1
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002b644:	105025f3          	csrr	a1,stvec
    8002b648:	00013517          	auipc	a0,0x13
    8002b64c:	a5850513          	addi	a0,a0,-1448 # 8003e0a0 <__func__.0+0xbcb8>
    8002b650:	675030ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);
    8002b654:	4509                	li	a0,2
    8002b656:	8bfd50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002b65a:	fbed50ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002b65e:	00013517          	auipc	a0,0x13
    8002b662:	81a50513          	addi	a0,a0,-2022 # 8003de78 <__func__.0+0xba90>
    8002b666:	65f030ef          	jal	8002f4c4 <printf>
    asm volatile(
    8002b66a:	12000073          	sfence.vma
    sfence_vma();
    
    TEST_ASSERT("VS模式下,mtvec.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b66e:	08c00593          	li	a1,140
    8002b672:	00013617          	auipc	a2,0x13
    8002b676:	b1e60613          	addi	a2,a2,-1250 # 8003e190 <__func__.0+0xbda8>
    8002b67a:	00007517          	auipc	a0,0x7
    8002b67e:	06650513          	addi	a0,a0,102 # 800326e0 <__func__.0+0x2f8>
    8002b682:	643030ef          	jal	8002f4c4 <printf>
    8002b686:	00031797          	auipc	a5,0x31
    8002b68a:	98b7c783          	lbu	a5,-1653(a5) # 8005c011 <excpt+0x1>
    8002b68e:	00007597          	auipc	a1,0x7
    8002b692:	01a58593          	addi	a1,a1,26 # 800326a8 <__func__.0+0x2c0>
    8002b696:	e789                	bnez	a5,8002b6a0 <stvec_test_4+0xb8>
    8002b698:	00007597          	auipc	a1,0x7
    8002b69c:	02058593          	addi	a1,a1,32 # 800326b8 <__func__.0+0x2d0>
    8002b6a0:	00007517          	auipc	a0,0x7
    8002b6a4:	05850513          	addi	a0,a0,88 # 800326f8 <__func__.0+0x310>
    8002b6a8:	61d030ef          	jal	8002f4c4 <printf>
    8002b6ac:	00031797          	auipc	a5,0x31
    8002b6b0:	9657c783          	lbu	a5,-1691(a5) # 8005c011 <excpt+0x1>
    8002b6b4:	c799                	beqz	a5,8002b6c2 <stvec_test_4+0xda>
    8002b6b6:	4529                	li	a0,10
    8002b6b8:	2fb020ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    );
}
    8002b6bc:	60a2                	ld	ra,8(sp)
    8002b6be:	0141                	addi	sp,sp,16
    8002b6c0:	8082                	ret
    TEST_ASSERT("VS模式下,mtvec.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b6c2:	00007517          	auipc	a0,0x7
    8002b6c6:	03e50513          	addi	a0,a0,62 # 80032700 <__func__.0+0x318>
    8002b6ca:	5fb030ef          	jal	8002f4c4 <printf>
    8002b6ce:	02900513          	li	a0,41
    8002b6d2:	2e1020ef          	jal	8002e1b2 <putchar>
    8002b6d6:	4529                	li	a0,10
    8002b6d8:	2db020ef          	jal	8002e1b2 <putchar>
}
    8002b6dc:	60a2                	ld	ra,8(sp)
    8002b6de:	0141                	addi	sp,sp,16
    8002b6e0:	8082                	ret

000000008002b6e2 <stvec_test_5>:

bool stvec_test_5() {
    8002b6e2:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b6e4:	00007597          	auipc	a1,0x7
    8002b6e8:	9ac58593          	addi	a1,a1,-1620 # 80032090 <__func__.45>
    8002b6ec:	00007517          	auipc	a0,0x7
    8002b6f0:	fdc50513          	addi	a0,a0,-36 # 800326c8 <__func__.0+0x2e0>
bool stvec_test_5() {
    8002b6f4:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b6f6:	5cf030ef          	jal	8002f4c4 <printf>
    8002b6fa:	4529                	li	a0,10
    8002b6fc:	2b7020ef          	jal	8002e1b2 <putchar>

    //VU模式下，开启了medeleg代理，关闭hedeleg异常代理，发生异常

    goto_priv(PRIV_M);
    8002b700:	4511                	li	a0,4
    8002b702:	813d50ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    8002b706:	001007b7          	lui	a5,0x100
    8002b70a:	6007a073          	csrs	hstatus,a5

    CSRS(CSR_MEDELEG,1ULL << 22);
    8002b70e:	004007b7          	lui	a5,0x400
    8002b712:	3027a073          	csrs	medeleg,a5

    CSRW(CSR_MTVEC,m_test_entry);
    8002b716:	00004797          	auipc	a5,0x4
    8002b71a:	14e78793          	addi	a5,a5,334 # 8002f864 <m_test_entry>
    8002b71e:	30579073          	csrw	mtvec,a5
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b722:	00004797          	auipc	a5,0x4
    8002b726:	65278793          	addi	a5,a5,1618 # 8002fd74 <vs_test_entry>
    8002b72a:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b72e:	00004797          	auipc	a5,0x4
    8002b732:	3be78793          	addi	a5,a5,958 # 8002faec <hs_test_entry>
    8002b736:	10579073          	csrw	stvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002b73a:	1050e073          	csrsi	stvec,1
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002b73e:	105025f3          	csrr	a1,stvec
    8002b742:	00013517          	auipc	a0,0x13
    8002b746:	95e50513          	addi	a0,a0,-1698 # 8003e0a0 <__func__.0+0xbcb8>
    8002b74a:	57b030ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VU);
    8002b74e:	4501                	li	a0,0
    8002b750:	fc4d50ef          	jal	80000f14 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002b754:	ec4d50ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002b758:	00012517          	auipc	a0,0x12
    8002b75c:	72050513          	addi	a0,a0,1824 # 8003de78 <__func__.0+0xba90>
    8002b760:	565030ef          	jal	8002f4c4 <printf>
    asm volatile(
    8002b764:	4781                	li	a5,0
    8002b766:	6007c7f3          	.insn	4, 0x6007c7f3
    uint64_t tmp = hlvb(0);
    
    TEST_ASSERT("VU模式下,mtvec.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b76a:	08c00593          	li	a1,140
    8002b76e:	00013617          	auipc	a2,0x13
    8002b772:	a6a60613          	addi	a2,a2,-1430 # 8003e1d8 <__func__.0+0xbdf0>
    8002b776:	00007517          	auipc	a0,0x7
    8002b77a:	f6a50513          	addi	a0,a0,-150 # 800326e0 <__func__.0+0x2f8>
    8002b77e:	547030ef          	jal	8002f4c4 <printf>
    8002b782:	00031797          	auipc	a5,0x31
    8002b786:	88f7c783          	lbu	a5,-1905(a5) # 8005c011 <excpt+0x1>
    8002b78a:	00007597          	auipc	a1,0x7
    8002b78e:	f1e58593          	addi	a1,a1,-226 # 800326a8 <__func__.0+0x2c0>
    8002b792:	e789                	bnez	a5,8002b79c <stvec_test_5+0xba>
    8002b794:	00007597          	auipc	a1,0x7
    8002b798:	f2458593          	addi	a1,a1,-220 # 800326b8 <__func__.0+0x2d0>
    8002b79c:	00007517          	auipc	a0,0x7
    8002b7a0:	f5c50513          	addi	a0,a0,-164 # 800326f8 <__func__.0+0x310>
    8002b7a4:	521030ef          	jal	8002f4c4 <printf>
    8002b7a8:	00031797          	auipc	a5,0x31
    8002b7ac:	8697c783          	lbu	a5,-1943(a5) # 8005c011 <excpt+0x1>
    8002b7b0:	c799                	beqz	a5,8002b7be <stvec_test_5+0xdc>
    8002b7b2:	4529                	li	a0,10
    8002b7b4:	1ff020ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    );
}
    8002b7b8:	60a2                	ld	ra,8(sp)
    8002b7ba:	0141                	addi	sp,sp,16
    8002b7bc:	8082                	ret
    TEST_ASSERT("VU模式下,mtvec.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b7be:	00007517          	auipc	a0,0x7
    8002b7c2:	f4250513          	addi	a0,a0,-190 # 80032700 <__func__.0+0x318>
    8002b7c6:	4ff030ef          	jal	8002f4c4 <printf>
    8002b7ca:	02900513          	li	a0,41
    8002b7ce:	1e5020ef          	jal	8002e1b2 <putchar>
    8002b7d2:	4529                	li	a0,10
    8002b7d4:	1df020ef          	jal	8002e1b2 <putchar>
}
    8002b7d8:	60a2                	ld	ra,8(sp)
    8002b7da:	0141                	addi	sp,sp,16
    8002b7dc:	8082                	ret

000000008002b7de <vstvec_test_1>:




bool vstvec_test_1() {
    8002b7de:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b7e0:	00007597          	auipc	a1,0x7
    8002b7e4:	8c058593          	addi	a1,a1,-1856 # 800320a0 <__func__.44>
    8002b7e8:	00007517          	auipc	a0,0x7
    8002b7ec:	ee050513          	addi	a0,a0,-288 # 800326c8 <__func__.0+0x2e0>
bool vstvec_test_1() {
    8002b7f0:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b7f2:	4d3030ef          	jal	8002f4c4 <printf>
    8002b7f6:	4529                	li	a0,10
    8002b7f8:	1bb020ef          	jal	8002e1b2 <putchar>

    //vs模式下，当vstvec.mode=vectored，开启了mideleg和hideleg中断代理,,发生2号软件中断  

    goto_priv(PRIV_M);
    8002b7fc:	4511                	li	a0,4
    8002b7fe:	f16d50ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002b802:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002b806:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002b80a:	10016073          	csrsi	sstatus,2
    CSRS(CSR_VSSTATUS,1ULL << 1);
    8002b80e:	20016073          	csrsi	vsstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002b812:	30316073          	csrsi	mideleg,2
    CSRS(CSR_MIDELEG,1ULL << 2);
    8002b816:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIDELEG,1ULL << 2);
    8002b81a:	60326073          	csrsi	hideleg,4
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002b81e:	300025f3          	csrr	a1,mstatus
    8002b822:	00012517          	auipc	a0,0x12
    8002b826:	63650513          	addi	a0,a0,1590 # 8003de58 <__func__.0+0xba70>
    8002b82a:	49b030ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 3);
    8002b82e:	30446073          	csrsi	mie,8
    CSRS(sie, 1ULL << 1);
    8002b832:	10416073          	csrsi	sie,2
    CSRS(vsie, 1ULL << 1);
    8002b836:	20416073          	csrsi	vsie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b83a:	00004797          	auipc	a5,0x4
    8002b83e:	53a78793          	addi	a5,a5,1338 # 8002fd74 <vs_test_entry>
    8002b842:	20579073          	csrw	vstvec,a5
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002b846:	205025f3          	csrr	a1,vstvec
    8002b84a:	00013517          	auipc	a0,0x13
    8002b84e:	9d650513          	addi	a0,a0,-1578 # 8003e220 <__func__.0+0xbe38>
    8002b852:	473030ef          	jal	8002f4c4 <printf>
    CSRS(CSR_VSTVEC , 1ULL << 0);
    8002b856:	2050e073          	csrsi	vstvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002b85a:	205025f3          	csrr	a1,vstvec
    8002b85e:	00013517          	auipc	a0,0x13
    8002b862:	9c250513          	addi	a0,a0,-1598 # 8003e220 <__func__.0+0xbe38>
    8002b866:	45f030ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002b86a:	daed50ef          	jal	80000e18 <test_setup_except_function>
    CSRS(hip, 1ULL << 2);       //当hideleg=1，hvip.VSSIP是hip.VSSIP的别名
    8002b86e:	64426073          	csrsi	hip,4
    printf("入口：");
    8002b872:	00012517          	auipc	a0,0x12
    8002b876:	60650513          	addi	a0,a0,1542 # 8003de78 <__func__.0+0xba90>
    8002b87a:	44b030ef          	jal	8002f4c4 <printf>
    goto_priv(PRIV_VS);
    8002b87e:	4509                	li	a0,2
    8002b880:	e94d50ef          	jal	80000f14 <goto_priv>

    TEST_ASSERT("vs模式下,mtvec.mode=vectored.,mideleg=1,hideleg=1,产生2号软件中断",
    8002b884:	08c00593          	li	a1,140
    8002b888:	00013617          	auipc	a2,0x13
    8002b88c:	9a860613          	addi	a2,a2,-1624 # 8003e230 <__func__.0+0xbe48>
    8002b890:	00007517          	auipc	a0,0x7
    8002b894:	e5050513          	addi	a0,a0,-432 # 800326e0 <__func__.0+0x2f8>
    8002b898:	42d030ef          	jal	8002f4c4 <printf>
    8002b89c:	00030797          	auipc	a5,0x30
    8002b8a0:	7757c783          	lbu	a5,1909(a5) # 8005c011 <excpt+0x1>
    8002b8a4:	00007597          	auipc	a1,0x7
    8002b8a8:	e0458593          	addi	a1,a1,-508 # 800326a8 <__func__.0+0x2c0>
    8002b8ac:	e789                	bnez	a5,8002b8b6 <vstvec_test_1+0xd8>
    8002b8ae:	00007597          	auipc	a1,0x7
    8002b8b2:	e0a58593          	addi	a1,a1,-502 # 800326b8 <__func__.0+0x2d0>
    8002b8b6:	00007517          	auipc	a0,0x7
    8002b8ba:	e4250513          	addi	a0,a0,-446 # 800326f8 <__func__.0+0x310>
    8002b8be:	407030ef          	jal	8002f4c4 <printf>
    8002b8c2:	00030797          	auipc	a5,0x30
    8002b8c6:	74f7c783          	lbu	a5,1871(a5) # 8005c011 <excpt+0x1>
    8002b8ca:	c799                	beqz	a5,8002b8d8 <vstvec_test_1+0xfa>
    8002b8cc:	4529                	li	a0,10
    8002b8ce:	0e5020ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
    

}
    8002b8d2:	60a2                	ld	ra,8(sp)
    8002b8d4:	0141                	addi	sp,sp,16
    8002b8d6:	8082                	ret
    TEST_ASSERT("vs模式下,mtvec.mode=vectored.,mideleg=1,hideleg=1,产生2号软件中断",
    8002b8d8:	00007517          	auipc	a0,0x7
    8002b8dc:	e2850513          	addi	a0,a0,-472 # 80032700 <__func__.0+0x318>
    8002b8e0:	3e5030ef          	jal	8002f4c4 <printf>
    8002b8e4:	02900513          	li	a0,41
    8002b8e8:	0cb020ef          	jal	8002e1b2 <putchar>
    8002b8ec:	4529                	li	a0,10
    8002b8ee:	0c5020ef          	jal	8002e1b2 <putchar>
}
    8002b8f2:	60a2                	ld	ra,8(sp)
    8002b8f4:	0141                	addi	sp,sp,16
    8002b8f6:	8082                	ret

000000008002b8f8 <vstvec_test_2>:

bool vstvec_test_2() {
    8002b8f8:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b8fa:	00006597          	auipc	a1,0x6
    8002b8fe:	7b658593          	addi	a1,a1,1974 # 800320b0 <__func__.43>
    8002b902:	00007517          	auipc	a0,0x7
    8002b906:	dc650513          	addi	a0,a0,-570 # 800326c8 <__func__.0+0x2e0>
bool vstvec_test_2() {
    8002b90a:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b90c:	3b9030ef          	jal	8002f4c4 <printf>
    8002b910:	4529                	li	a0,10
    8002b912:	0a1020ef          	jal	8002e1b2 <putchar>

    //VS模式下，开启了medeleg代理和hedeleg异常代理，发生异常

    goto_priv(PRIV_M);
    8002b916:	4511                	li	a0,4
    8002b918:	dfcd50ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    8002b91c:	001007b7          	lui	a5,0x100
    8002b920:	6007a073          	csrs	hstatus,a5

    CSRS(CSR_MEDELEG,1ULL << 13);
    8002b924:	6789                	lui	a5,0x2
    8002b926:	3027a073          	csrs	medeleg,a5
    CSRS(CSR_HEDELEG,1ULL << 13);
    8002b92a:	6027a073          	csrs	hedeleg,a5

    CSRW(CSR_MTVEC,m_test_entry);
    8002b92e:	00004797          	auipc	a5,0x4
    8002b932:	f3678793          	addi	a5,a5,-202 # 8002f864 <m_test_entry>
    8002b936:	30579073          	csrw	mtvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b93a:	00004797          	auipc	a5,0x4
    8002b93e:	1b278793          	addi	a5,a5,434 # 8002faec <hs_test_entry>
    8002b942:	10579073          	csrw	stvec,a5
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b946:	00004797          	auipc	a5,0x4
    8002b94a:	42e78793          	addi	a5,a5,1070 # 8002fd74 <vs_test_entry>
    8002b94e:	20579073          	csrw	vstvec,a5
    CSRS(CSR_VSTVEC , 1ULL << 0);
    8002b952:	2050e073          	csrsi	vstvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002b956:	205025f3          	csrr	a1,vstvec
    8002b95a:	00013517          	auipc	a0,0x13
    8002b95e:	8c650513          	addi	a0,a0,-1850 # 8003e220 <__func__.0+0xbe38>
    8002b962:	363030ef          	jal	8002f4c4 <printf>

    hspt_init();
    8002b966:	c87d40ef          	jal	800005ec <hspt_init>
    hpt_init();
    8002b96a:	866d50ef          	jal	800009d0 <hpt_init>
    vspt_init();
    8002b96e:	e1bd40ef          	jal	80000788 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8002b972:	4509                	li	a0,2
    8002b974:	da0d50ef          	jal	80000f14 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    8002b978:	ca0d50ef          	jal	80000e18 <test_setup_except_function>

    printf("VS模式下,mtvec.mode=vectored,medeleg=1,hedeleg=1,产生异常\n\n");
    8002b97c:	00013517          	auipc	a0,0x13
    8002b980:	90450513          	addi	a0,a0,-1788 # 8003e280 <__func__.0+0xbe98>
    8002b984:	77c030ef          	jal	8002f100 <puts>

    addr = hs_page_base(VSI_GI);
    printf("入口：");
    8002b988:	00012517          	auipc	a0,0x12
    8002b98c:	4f050513          	addi	a0,a0,1264 # 8003de78 <__func__.0+0xba90>
    8002b990:	335030ef          	jal	8002f4c4 <printf>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8002b994:	400197b7          	lui	a5,0x40019
    8002b998:	078a                	slli	a5,a5,0x2
    8002b99a:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>

    // TEST_ASSERT("VS模式下,mtvec.mode=vectored,medeleg=1,hedeleg=1,产生异常",
    //     excpt.triggered == true 
    // );

}
    8002b99e:	60a2                	ld	ra,8(sp)
    8002b9a0:	0141                	addi	sp,sp,16
    8002b9a2:	8082                	ret

000000008002b9a4 <vstvec_test_3>:

bool vstvec_test_3() {      //待修改
    8002b9a4:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b9a6:	00006597          	auipc	a1,0x6
    8002b9aa:	71a58593          	addi	a1,a1,1818 # 800320c0 <__func__.42>
    8002b9ae:	00007517          	auipc	a0,0x7
    8002b9b2:	d1a50513          	addi	a0,a0,-742 # 800326c8 <__func__.0+0x2e0>
bool vstvec_test_3() {      //待修改
    8002b9b6:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b9b8:	30d030ef          	jal	8002f4c4 <printf>
    8002b9bc:	4529                	li	a0,10
    8002b9be:	7f4020ef          	jal	8002e1b2 <putchar>

    //VU模式下，开启了medeleg代理和hedeleg异常代理，发生异常

    goto_priv(PRIV_M);
    8002b9c2:	4511                	li	a0,4
    8002b9c4:	d50d50ef          	jal	80000f14 <goto_priv>
    
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    8002b9c8:	001007b7          	lui	a5,0x100
    8002b9cc:	6007a073          	csrs	hstatus,a5

    CSRS(CSR_MEDELEG,1ULL << 22);
    8002b9d0:	004007b7          	lui	a5,0x400
    8002b9d4:	3027a073          	csrs	medeleg,a5
    CSRS(CSR_HEDELEG,1ULL << 22);
    8002b9d8:	6027a073          	csrs	hedeleg,a5
    CSRS(CSR_MEDELEG,1ULL << 2);
    8002b9dc:	30226073          	csrsi	medeleg,4
    CSRS(CSR_HEDELEG,1ULL << 2);
    8002b9e0:	60226073          	csrsi	hedeleg,4

    CSRW(CSR_MTVEC,m_test_entry);
    8002b9e4:	00004797          	auipc	a5,0x4
    8002b9e8:	e8078793          	addi	a5,a5,-384 # 8002f864 <m_test_entry>
    8002b9ec:	30579073          	csrw	mtvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b9f0:	00004797          	auipc	a5,0x4
    8002b9f4:	0fc78793          	addi	a5,a5,252 # 8002faec <hs_test_entry>
    8002b9f8:	10579073          	csrw	stvec,a5
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b9fc:	00004797          	auipc	a5,0x4
    8002ba00:	37878793          	addi	a5,a5,888 # 8002fd74 <vs_test_entry>
    8002ba04:	20579073          	csrw	vstvec,a5
    CSRS(CSR_VSTVEC , 1ULL << 0);
    8002ba08:	2050e073          	csrsi	vstvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002ba0c:	205025f3          	csrr	a1,vstvec
    8002ba10:	00013517          	auipc	a0,0x13
    8002ba14:	81050513          	addi	a0,a0,-2032 # 8003e220 <__func__.0+0xbe38>
    8002ba18:	2ad030ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VU);
    8002ba1c:	4501                	li	a0,0
    8002ba1e:	cf6d50ef          	jal	80000f14 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();     
    8002ba22:	bf6d50ef          	jal	80000e18 <test_setup_except_function>

    printf("VU模式下,mtvec.mode=vectored,medeleg=1,hedeleg=1,产生异常\n\n");
    8002ba26:	00013517          	auipc	a0,0x13
    8002ba2a:	8a250513          	addi	a0,a0,-1886 # 8003e2c8 <__func__.0+0xbee0>
    8002ba2e:	6d2030ef          	jal	8002f100 <puts>

    printf("入口：");   
    8002ba32:	00012517          	auipc	a0,0x12
    8002ba36:	44650513          	addi	a0,a0,1094 # 8003de78 <__func__.0+0xba90>
    8002ba3a:	28b030ef          	jal	8002f4c4 <printf>
    CSRR(CSR_MSTATUS);
    8002ba3e:	300027f3          	csrr	a5,mstatus

    // TEST_ASSERT("VU模式下,mtvec.mode=vectored,medeleg=1,hedeleg=1,产生异常",
    //     excpt.triggered == true 
    // );

}
    8002ba42:	60a2                	ld	ra,8(sp)
    8002ba44:	0141                	addi	sp,sp,16
    8002ba46:	8082                	ret

000000008002ba48 <vstvec_test_4>:



bool vstvec_test_4() {
    8002ba48:	1141                	addi	sp,sp,-16

    TEST_START();
    8002ba4a:	00006597          	auipc	a1,0x6
    8002ba4e:	68658593          	addi	a1,a1,1670 # 800320d0 <__func__.41>
    8002ba52:	00007517          	auipc	a0,0x7
    8002ba56:	c7650513          	addi	a0,a0,-906 # 800326c8 <__func__.0+0x2e0>
bool vstvec_test_4() {
    8002ba5a:	e406                	sd	ra,8(sp)
    TEST_START();
    8002ba5c:	269030ef          	jal	8002f4c4 <printf>
    8002ba60:	4529                	li	a0,10
    8002ba62:	750020ef          	jal	8002e1b2 <putchar>

    //vs模式下，当vstvec.mode=direct，开启了mideleg和hideleg中断代理,发生2号软件中断  

    goto_priv(PRIV_M);
    8002ba66:	4511                	li	a0,4
    8002ba68:	cacd50ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002ba6c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002ba70:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002ba74:	10016073          	csrsi	sstatus,2
    CSRS(CSR_VSSTATUS,1ULL << 1);
    8002ba78:	20016073          	csrsi	vsstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002ba7c:	30316073          	csrsi	mideleg,2
    CSRS(CSR_MIDELEG,1ULL << 2);
    8002ba80:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIDELEG,1ULL << 2);
    8002ba84:	60326073          	csrsi	hideleg,4
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002ba88:	300025f3          	csrr	a1,mstatus
    8002ba8c:	00012517          	auipc	a0,0x12
    8002ba90:	3cc50513          	addi	a0,a0,972 # 8003de58 <__func__.0+0xba70>
    8002ba94:	231030ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 3);
    8002ba98:	30446073          	csrsi	mie,8
    CSRS(sie, 1ULL << 1);
    8002ba9c:	10416073          	csrsi	sie,2
    CSRS(vsie, 1ULL << 1);
    8002baa0:	20416073          	csrsi	vsie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002baa4:	00004797          	auipc	a5,0x4
    8002baa8:	2d078793          	addi	a5,a5,720 # 8002fd74 <vs_test_entry>
    8002baac:	20579073          	csrw	vstvec,a5
    CSRC(CSR_VSTVEC , 1ULL << 0);
    8002bab0:	2050f073          	csrci	vstvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002bab4:	205025f3          	csrr	a1,vstvec
    8002bab8:	00012517          	auipc	a0,0x12
    8002babc:	76850513          	addi	a0,a0,1896 # 8003e220 <__func__.0+0xbe38>
    8002bac0:	205030ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002bac4:	b54d50ef          	jal	80000e18 <test_setup_except_function>
    CSRS(hip, 1ULL << 2);       //当hideleg=1，hvip.VSSIP是hip.VSSIP的别名
    8002bac8:	64426073          	csrsi	hip,4

    printf("Vs模式下,mtvec.mode=direct,medeleg=1,hedeleg=1,产生2号软件中断\n\n");
    8002bacc:	00013517          	auipc	a0,0x13
    8002bad0:	84450513          	addi	a0,a0,-1980 # 8003e310 <__func__.0+0xbf28>
    8002bad4:	62c030ef          	jal	8002f100 <puts>

    printf("入口：");
    8002bad8:	00012517          	auipc	a0,0x12
    8002badc:	3a050513          	addi	a0,a0,928 # 8003de78 <__func__.0+0xba90>
    8002bae0:	1e5030ef          	jal	8002f4c4 <printf>
    goto_priv(PRIV_VS);
    8002bae4:	4509                	li	a0,2
    8002bae6:	c2ed50ef          	jal	80000f14 <goto_priv>

    // TEST_ASSERT("vs模式下,mtvec.mode=direct.,mideleg=1,hideleg=1,产生2号软件中断",
    //     excpt.triggered == true 
    // );
}
    8002baea:	60a2                	ld	ra,8(sp)
    8002baec:	0141                	addi	sp,sp,16
    8002baee:	8082                	ret

000000008002baf0 <vstvec_test_5>:

bool vstvec_test_5() {
    8002baf0:	1141                	addi	sp,sp,-16

    TEST_START();
    8002baf2:	00006597          	auipc	a1,0x6
    8002baf6:	5ee58593          	addi	a1,a1,1518 # 800320e0 <__func__.40>
    8002bafa:	00007517          	auipc	a0,0x7
    8002bafe:	bce50513          	addi	a0,a0,-1074 # 800326c8 <__func__.0+0x2e0>
bool vstvec_test_5() {
    8002bb02:	e406                	sd	ra,8(sp)
    TEST_START();
    8002bb04:	1c1030ef          	jal	8002f4c4 <printf>
    8002bb08:	4529                	li	a0,10
    8002bb0a:	6a8020ef          	jal	8002e1b2 <putchar>

    //vu模式下，当vstvec.mode=direct，开启了mideleg和hideleg中断代理,,发生2号软件中断  

    goto_priv(PRIV_M);
    8002bb0e:	4511                	li	a0,4
    8002bb10:	c04d50ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002bb14:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002bb18:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002bb1c:	10016073          	csrsi	sstatus,2
    CSRS(CSR_VSSTATUS,1ULL << 1);
    8002bb20:	20016073          	csrsi	vsstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002bb24:	30316073          	csrsi	mideleg,2
    CSRS(CSR_MIDELEG,1ULL << 2);
    8002bb28:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIDELEG,1ULL << 2);
    8002bb2c:	60326073          	csrsi	hideleg,4
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002bb30:	300025f3          	csrr	a1,mstatus
    8002bb34:	00012517          	auipc	a0,0x12
    8002bb38:	32450513          	addi	a0,a0,804 # 8003de58 <__func__.0+0xba70>
    8002bb3c:	189030ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 3);
    8002bb40:	30446073          	csrsi	mie,8
    CSRS(sie, 1ULL << 1);
    8002bb44:	10416073          	csrsi	sie,2
    CSRS(vsie, 1ULL << 1);
    8002bb48:	20416073          	csrsi	vsie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002bb4c:	00004797          	auipc	a5,0x4
    8002bb50:	22878793          	addi	a5,a5,552 # 8002fd74 <vs_test_entry>
    8002bb54:	20579073          	csrw	vstvec,a5
    CSRC(CSR_VSTVEC , 1ULL << 0);
    8002bb58:	2050f073          	csrci	vstvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002bb5c:	205025f3          	csrr	a1,vstvec
    8002bb60:	00012517          	auipc	a0,0x12
    8002bb64:	6c050513          	addi	a0,a0,1728 # 8003e220 <__func__.0+0xbe38>
    8002bb68:	15d030ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002bb6c:	aacd50ef          	jal	80000e18 <test_setup_except_function>
    CSRS(hip, 1ULL << 2);       //当hideleg=1，hvip.VSSIP是hip.VSSIP的别名
    8002bb70:	64426073          	csrsi	hip,4

    printf("VU模式下,mtvec.mode=direct,medeleg=1,hedeleg=1,产生2号软件中断\n\n");
    8002bb74:	00012517          	auipc	a0,0x12
    8002bb78:	7ec50513          	addi	a0,a0,2028 # 8003e360 <__func__.0+0xbf78>
    8002bb7c:	584030ef          	jal	8002f100 <puts>

    printf("入口：");
    8002bb80:	00012517          	auipc	a0,0x12
    8002bb84:	2f850513          	addi	a0,a0,760 # 8003de78 <__func__.0+0xba90>
    8002bb88:	13d030ef          	jal	8002f4c4 <printf>
    goto_priv(PRIV_VU);
    8002bb8c:	4501                	li	a0,0
    8002bb8e:	b86d50ef          	jal	80000f14 <goto_priv>

    // TEST_ASSERT("vu模式下,mtvec.mode=direct.,mideleg=1,hideleg=1,产生2号软件中断",
    //     excpt.triggered == true 
    // );
}
    8002bb92:	60a2                	ld	ra,8(sp)
    8002bb94:	0141                	addi	sp,sp,16
    8002bb96:	8082                	ret

000000008002bb98 <vstvec_test_6>:

bool vstvec_test_6() {
    8002bb98:	1141                	addi	sp,sp,-16

    TEST_START();
    8002bb9a:	00006597          	auipc	a1,0x6
    8002bb9e:	55658593          	addi	a1,a1,1366 # 800320f0 <__func__.39>
    8002bba2:	00007517          	auipc	a0,0x7
    8002bba6:	b2650513          	addi	a0,a0,-1242 # 800326c8 <__func__.0+0x2e0>
bool vstvec_test_6() {
    8002bbaa:	e406                	sd	ra,8(sp)
    TEST_START();
    8002bbac:	119030ef          	jal	8002f4c4 <printf>
    8002bbb0:	4529                	li	a0,10
    8002bbb2:	600020ef          	jal	8002e1b2 <putchar>

    //vu模式下，当vstvec.mode=vectored，开启了mideleg和hideleg中断代理,,发生2号软件中断  

    goto_priv(PRIV_M);
    8002bbb6:	4511                	li	a0,4
    8002bbb8:	b5cd50ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002bbbc:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002bbc0:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002bbc4:	10016073          	csrsi	sstatus,2
    CSRS(CSR_VSSTATUS,1ULL << 1);
    8002bbc8:	20016073          	csrsi	vsstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002bbcc:	30316073          	csrsi	mideleg,2
    CSRS(CSR_MIDELEG,1ULL << 2);
    8002bbd0:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIDELEG,1ULL << 2);
    8002bbd4:	60326073          	csrsi	hideleg,4
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002bbd8:	300025f3          	csrr	a1,mstatus
    8002bbdc:	00012517          	auipc	a0,0x12
    8002bbe0:	27c50513          	addi	a0,a0,636 # 8003de58 <__func__.0+0xba70>
    8002bbe4:	0e1030ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 3);
    8002bbe8:	30446073          	csrsi	mie,8
    CSRS(sie, 1ULL << 1);
    8002bbec:	10416073          	csrsi	sie,2
    CSRS(vsie, 1ULL << 1);
    8002bbf0:	20416073          	csrsi	vsie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002bbf4:	00004797          	auipc	a5,0x4
    8002bbf8:	18078793          	addi	a5,a5,384 # 8002fd74 <vs_test_entry>
    8002bbfc:	20579073          	csrw	vstvec,a5
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002bc00:	205025f3          	csrr	a1,vstvec
    8002bc04:	00012517          	auipc	a0,0x12
    8002bc08:	61c50513          	addi	a0,a0,1564 # 8003e220 <__func__.0+0xbe38>
    8002bc0c:	0b9030ef          	jal	8002f4c4 <printf>
    CSRS(CSR_VSTVEC , 1ULL << 0);
    8002bc10:	2050e073          	csrsi	vstvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002bc14:	205025f3          	csrr	a1,vstvec
    8002bc18:	00012517          	auipc	a0,0x12
    8002bc1c:	60850513          	addi	a0,a0,1544 # 8003e220 <__func__.0+0xbe38>
    8002bc20:	0a5030ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002bc24:	9f4d50ef          	jal	80000e18 <test_setup_except_function>
    CSRS(hip, 1ULL << 2);       //当hideleg=1，hvip.VSSIP是hip.VSSIP的别名
    8002bc28:	64426073          	csrsi	hip,4
    printf("入口：");
    8002bc2c:	00012517          	auipc	a0,0x12
    8002bc30:	24c50513          	addi	a0,a0,588 # 8003de78 <__func__.0+0xba90>
    8002bc34:	091030ef          	jal	8002f4c4 <printf>
    goto_priv(PRIV_VU);
    8002bc38:	4501                	li	a0,0
    8002bc3a:	adad50ef          	jal	80000f14 <goto_priv>

    TEST_ASSERT("vu模式下,mtvec.mode=vectored.,mideleg=1,hideleg=1,产生2号软件中断",
    8002bc3e:	08c00593          	li	a1,140
    8002bc42:	00012617          	auipc	a2,0x12
    8002bc46:	76e60613          	addi	a2,a2,1902 # 8003e3b0 <__func__.0+0xbfc8>
    8002bc4a:	00007517          	auipc	a0,0x7
    8002bc4e:	a9650513          	addi	a0,a0,-1386 # 800326e0 <__func__.0+0x2f8>
    8002bc52:	073030ef          	jal	8002f4c4 <printf>
    8002bc56:	00030797          	auipc	a5,0x30
    8002bc5a:	3bb7c783          	lbu	a5,955(a5) # 8005c011 <excpt+0x1>
    8002bc5e:	00007597          	auipc	a1,0x7
    8002bc62:	a4a58593          	addi	a1,a1,-1462 # 800326a8 <__func__.0+0x2c0>
    8002bc66:	e789                	bnez	a5,8002bc70 <vstvec_test_6+0xd8>
    8002bc68:	00007597          	auipc	a1,0x7
    8002bc6c:	a5058593          	addi	a1,a1,-1456 # 800326b8 <__func__.0+0x2d0>
    8002bc70:	00007517          	auipc	a0,0x7
    8002bc74:	a8850513          	addi	a0,a0,-1400 # 800326f8 <__func__.0+0x310>
    8002bc78:	04d030ef          	jal	8002f4c4 <printf>
    8002bc7c:	00030797          	auipc	a5,0x30
    8002bc80:	3957c783          	lbu	a5,917(a5) # 8005c011 <excpt+0x1>
    8002bc84:	c799                	beqz	a5,8002bc92 <vstvec_test_6+0xfa>
    8002bc86:	4529                	li	a0,10
    8002bc88:	52a020ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    );
}
    8002bc8c:	60a2                	ld	ra,8(sp)
    8002bc8e:	0141                	addi	sp,sp,16
    8002bc90:	8082                	ret
    TEST_ASSERT("vu模式下,mtvec.mode=vectored.,mideleg=1,hideleg=1,产生2号软件中断",
    8002bc92:	00007517          	auipc	a0,0x7
    8002bc96:	a6e50513          	addi	a0,a0,-1426 # 80032700 <__func__.0+0x318>
    8002bc9a:	02b030ef          	jal	8002f4c4 <printf>
    8002bc9e:	02900513          	li	a0,41
    8002bca2:	510020ef          	jal	8002e1b2 <putchar>
    8002bca6:	4529                	li	a0,10
    8002bca8:	50a020ef          	jal	8002e1b2 <putchar>
}
    8002bcac:	60a2                	ld	ra,8(sp)
    8002bcae:	0141                	addi	sp,sp,16
    8002bcb0:	8082                	ret

000000008002bcb2 <mnret_test_1>:


bool mnret_test_1() {
    8002bcb2:	1141                	addi	sp,sp,-16
    //m模式下，当mtvec.mode=vectored，未开启中断代理，发生2号软件中断 ,执行mnret返回
    TEST_START();
    8002bcb4:	00006597          	auipc	a1,0x6
    8002bcb8:	44c58593          	addi	a1,a1,1100 # 80032100 <__func__.38>
    8002bcbc:	00007517          	auipc	a0,0x7
    8002bcc0:	a0c50513          	addi	a0,a0,-1524 # 800326c8 <__func__.0+0x2e0>
bool mnret_test_1() {
    8002bcc4:	e406                	sd	ra,8(sp)
    TEST_START();
    8002bcc6:	7fe030ef          	jal	8002f4c4 <printf>
    8002bcca:	4529                	li	a0,10
    8002bccc:	4e6020ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002bcd0:	4511                	li	a0,4
    8002bcd2:	a42d50ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,(1ULL << 3));
    8002bcd6:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,(1ULL << 1));
    8002bcda:	30016073          	csrsi	mstatus,2

    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002bcde:	300025f3          	csrr	a1,mstatus
    8002bce2:	00012517          	auipc	a0,0x12
    8002bce6:	17650513          	addi	a0,a0,374 # 8003de58 <__func__.0+0xba70>
    8002bcea:	7da030ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 1);
    8002bcee:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002bcf2:	00004797          	auipc	a5,0x4
    8002bcf6:	08278793          	addi	a5,a5,130 # 8002fd74 <vs_test_entry>
    8002bcfa:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002bcfe:	00004797          	auipc	a5,0x4
    8002bd02:	dee78793          	addi	a5,a5,-530 # 8002faec <hs_test_entry>
    8002bd06:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002bd0a:	00004797          	auipc	a5,0x4
    8002bd0e:	b5a78793          	addi	a5,a5,-1190 # 8002f864 <m_test_entry>
    8002bd12:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002bd16:	3050e073          	csrsi	mtvec,1


    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002bd1a:	305025f3          	csrr	a1,mtvec
    8002bd1e:	00012517          	auipc	a0,0x12
    8002bd22:	14a50513          	addi	a0,a0,330 # 8003de68 <__func__.0+0xba80>
    8002bd26:	79e030ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002bd2a:	8eed50ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002bd2e:	00012517          	auipc	a0,0x12
    8002bd32:	14a50513          	addi	a0,a0,330 # 8003de78 <__func__.0+0xba90>
    8002bd36:	78e030ef          	jal	8002f4c4 <printf>
    CSRS(mip, 1ULL << 1);
    8002bd3a:	34416073          	csrsi	mip,2

    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断,执行mnret返回",      //要修改xtvec_test_asm.S中的返回指令
    8002bd3e:	08c00593          	li	a1,140
    8002bd42:	00012617          	auipc	a2,0x12
    8002bd46:	6be60613          	addi	a2,a2,1726 # 8003e400 <__func__.0+0xc018>
    8002bd4a:	00007517          	auipc	a0,0x7
    8002bd4e:	99650513          	addi	a0,a0,-1642 # 800326e0 <__func__.0+0x2f8>
    8002bd52:	772030ef          	jal	8002f4c4 <printf>
    8002bd56:	00030797          	auipc	a5,0x30
    8002bd5a:	2bb7c783          	lbu	a5,699(a5) # 8005c011 <excpt+0x1>
    8002bd5e:	00007597          	auipc	a1,0x7
    8002bd62:	94a58593          	addi	a1,a1,-1718 # 800326a8 <__func__.0+0x2c0>
    8002bd66:	e789                	bnez	a5,8002bd70 <mnret_test_1+0xbe>
    8002bd68:	00007597          	auipc	a1,0x7
    8002bd6c:	95058593          	addi	a1,a1,-1712 # 800326b8 <__func__.0+0x2d0>
    8002bd70:	00007517          	auipc	a0,0x7
    8002bd74:	98850513          	addi	a0,a0,-1656 # 800326f8 <__func__.0+0x310>
    8002bd78:	74c030ef          	jal	8002f4c4 <printf>
    8002bd7c:	00030797          	auipc	a5,0x30
    8002bd80:	2957c783          	lbu	a5,661(a5) # 8005c011 <excpt+0x1>
    8002bd84:	c799                	beqz	a5,8002bd92 <mnret_test_1+0xe0>
    8002bd86:	4529                	li	a0,10
    8002bd88:	42a020ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002bd8c:	60a2                	ld	ra,8(sp)
    8002bd8e:	0141                	addi	sp,sp,16
    8002bd90:	8082                	ret
    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断,执行mnret返回",      //要修改xtvec_test_asm.S中的返回指令
    8002bd92:	00007517          	auipc	a0,0x7
    8002bd96:	96e50513          	addi	a0,a0,-1682 # 80032700 <__func__.0+0x318>
    8002bd9a:	72a030ef          	jal	8002f4c4 <printf>
    8002bd9e:	02900513          	li	a0,41
    8002bda2:	410020ef          	jal	8002e1b2 <putchar>
    8002bda6:	4529                	li	a0,10
    8002bda8:	40a020ef          	jal	8002e1b2 <putchar>
}
    8002bdac:	60a2                	ld	ra,8(sp)
    8002bdae:	0141                	addi	sp,sp,16
    8002bdb0:	8082                	ret

000000008002bdb2 <mnret_test_2>:

bool mnret_test_2() {
    8002bdb2:	1141                	addi	sp,sp,-16
    //m模式下，当mtvec.mode=vectored，mstatus.MDT=1,mnstatus.NMIE=1时，产生异常
    TEST_START();
    8002bdb4:	00006597          	auipc	a1,0x6
    8002bdb8:	35c58593          	addi	a1,a1,860 # 80032110 <__func__.37>
    8002bdbc:	00007517          	auipc	a0,0x7
    8002bdc0:	90c50513          	addi	a0,a0,-1780 # 800326c8 <__func__.0+0x2e0>
bool mnret_test_2() {
    8002bdc4:	e406                	sd	ra,8(sp)
    TEST_START();
    8002bdc6:	6fe030ef          	jal	8002f4c4 <printf>
    8002bdca:	4529                	li	a0,10
    8002bdcc:	3e6020ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002bdd0:	4511                	li	a0,4
    8002bdd2:	942d50ef          	jal	80000f14 <goto_priv>

    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002bdd6:	300025f3          	csrr	a1,mstatus
    8002bdda:	00012517          	auipc	a0,0x12
    8002bdde:	07e50513          	addi	a0,a0,126 # 8003de58 <__func__.0+0xba70>
    8002bde2:	6e2030ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 1);
    8002bde6:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002bdea:	00004797          	auipc	a5,0x4
    8002bdee:	f8a78793          	addi	a5,a5,-118 # 8002fd74 <vs_test_entry>
    8002bdf2:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002bdf6:	00004797          	auipc	a5,0x4
    8002bdfa:	cf678793          	addi	a5,a5,-778 # 8002faec <hs_test_entry>
    8002bdfe:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002be02:	00004797          	auipc	a5,0x4
    8002be06:	a6278793          	addi	a5,a5,-1438 # 8002f864 <m_test_entry>
    8002be0a:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002be0e:	3050e073          	csrsi	mtvec,1
    CSRS(CSR_MSTATUS , 1ULL << 42); 
    8002be12:	4785                	li	a5,1
    8002be14:	17aa                	slli	a5,a5,0x2a
    8002be16:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MNSTATUS , 1ULL << 3);
    8002be1a:	74446073          	csrsi	0x744,8


    printf("mstatus=%llx \n",CSRR(CSR_MSTATUS));
    8002be1e:	300025f3          	csrr	a1,mstatus
    8002be22:	00012517          	auipc	a0,0x12
    8002be26:	63e50513          	addi	a0,a0,1598 # 8003e460 <__func__.0+0xc078>
    8002be2a:	69a030ef          	jal	8002f4c4 <printf>
    printf("mnstatus=%llx \n",CSRR(CSR_MNSTATUS));
    8002be2e:	744025f3          	csrr	a1,0x744
    8002be32:	00012517          	auipc	a0,0x12
    8002be36:	63e50513          	addi	a0,a0,1598 # 8003e470 <__func__.0+0xc088>
    8002be3a:	68a030ef          	jal	8002f4c4 <printf>

    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002be3e:	305025f3          	csrr	a1,mtvec
    8002be42:	00012517          	auipc	a0,0x12
    8002be46:	02650513          	addi	a0,a0,38 # 8003de68 <__func__.0+0xba80>
    8002be4a:	67a030ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002be4e:	fcbd40ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002be52:	00012517          	auipc	a0,0x12
    8002be56:	02650513          	addi	a0,a0,38 # 8003de78 <__func__.0+0xba90>
    8002be5a:	66a030ef          	jal	8002f4c4 <printf>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002be5e:	6785                	lui	a5,0x1
    8002be60:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002be62:	f1579073          	csrw	0xf15,a5
    excpt_info();
    8002be66:	9f4d50ef          	jal	8000105a <excpt_info>
    TEST_ASSERT("m模式下,mtvec.mode=vectored,mstatus.MDT=1,mnstatus.NMIE=1时产生异常",      
    8002be6a:	08c00593          	li	a1,140
    8002be6e:	00012617          	auipc	a2,0x12
    8002be72:	61260613          	addi	a2,a2,1554 # 8003e480 <__func__.0+0xc098>
    8002be76:	00007517          	auipc	a0,0x7
    8002be7a:	86a50513          	addi	a0,a0,-1942 # 800326e0 <__func__.0+0x2f8>
    8002be7e:	646030ef          	jal	8002f4c4 <printf>
    8002be82:	00030797          	auipc	a5,0x30
    8002be86:	18f7c783          	lbu	a5,399(a5) # 8005c011 <excpt+0x1>
    8002be8a:	00007597          	auipc	a1,0x7
    8002be8e:	81e58593          	addi	a1,a1,-2018 # 800326a8 <__func__.0+0x2c0>
    8002be92:	e789                	bnez	a5,8002be9c <mnret_test_2+0xea>
    8002be94:	00007597          	auipc	a1,0x7
    8002be98:	82458593          	addi	a1,a1,-2012 # 800326b8 <__func__.0+0x2d0>
    8002be9c:	00007517          	auipc	a0,0x7
    8002bea0:	85c50513          	addi	a0,a0,-1956 # 800326f8 <__func__.0+0x310>
    8002bea4:	620030ef          	jal	8002f4c4 <printf>
    8002bea8:	00030797          	auipc	a5,0x30
    8002beac:	1697c783          	lbu	a5,361(a5) # 8005c011 <excpt+0x1>
    8002beb0:	c799                	beqz	a5,8002bebe <mnret_test_2+0x10c>
    8002beb2:	4529                	li	a0,10
    8002beb4:	2fe020ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002beb8:	60a2                	ld	ra,8(sp)
    8002beba:	0141                	addi	sp,sp,16
    8002bebc:	8082                	ret
    TEST_ASSERT("m模式下,mtvec.mode=vectored,mstatus.MDT=1,mnstatus.NMIE=1时产生异常",      
    8002bebe:	00007517          	auipc	a0,0x7
    8002bec2:	84250513          	addi	a0,a0,-1982 # 80032700 <__func__.0+0x318>
    8002bec6:	5fe030ef          	jal	8002f4c4 <printf>
    8002beca:	02900513          	li	a0,41
    8002bece:	2e4020ef          	jal	8002e1b2 <putchar>
    8002bed2:	4529                	li	a0,10
    8002bed4:	2de020ef          	jal	8002e1b2 <putchar>
}
    8002bed8:	60a2                	ld	ra,8(sp)
    8002beda:	0141                	addi	sp,sp,16
    8002bedc:	8082                	ret

000000008002bede <smrnmi_test_1>:



//-------------------------------smrnmi_test_begin-------------------------------------

bool smrnmi_test_1() {
    8002bede:	1141                	addi	sp,sp,-16
    //m模式下，当mtvec.mode=vectored，未开启中断代理，发生2号软件中断 ,执行mnret返回
    TEST_START();
    8002bee0:	00006597          	auipc	a1,0x6
    8002bee4:	24058593          	addi	a1,a1,576 # 80032120 <__func__.36>
    8002bee8:	00006517          	auipc	a0,0x6
    8002beec:	7e050513          	addi	a0,a0,2016 # 800326c8 <__func__.0+0x2e0>
bool smrnmi_test_1() {
    8002bef0:	e406                	sd	ra,8(sp)
    TEST_START();
    8002bef2:	5d2030ef          	jal	8002f4c4 <printf>
    8002bef6:	4529                	li	a0,10
    8002bef8:	2ba020ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002befc:	4511                	li	a0,4
    8002befe:	816d50ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MIE);
    8002bf02:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS, MSTATUS_SIE);
    8002bf06:	30016073          	csrsi	mstatus,2

    CSRS(mie, MIE_SSIE);
    8002bf0a:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002bf0e:	00004797          	auipc	a5,0x4
    8002bf12:	e6678793          	addi	a5,a5,-410 # 8002fd74 <vs_test_entry>
    8002bf16:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002bf1a:	00004797          	auipc	a5,0x4
    8002bf1e:	bd278793          	addi	a5,a5,-1070 # 8002faec <hs_test_entry>
    8002bf22:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002bf26:	00004797          	auipc	a5,0x4
    8002bf2a:	93e78793          	addi	a5,a5,-1730 # 8002f864 <m_test_entry>
    8002bf2e:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002bf32:	3050e073          	csrsi	mtvec,1


    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002bf36:	305025f3          	csrr	a1,mtvec
    8002bf3a:	00012517          	auipc	a0,0x12
    8002bf3e:	f2e50513          	addi	a0,a0,-210 # 8003de68 <__func__.0+0xba80>
    8002bf42:	582030ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002bf46:	ed3d40ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002bf4a:	00012517          	auipc	a0,0x12
    8002bf4e:	f2e50513          	addi	a0,a0,-210 # 8003de78 <__func__.0+0xba90>
    8002bf52:	572030ef          	jal	8002f4c4 <printf>
    CSRS(mip, 1ULL << 1);
    8002bf56:	34416073          	csrsi	mip,2

    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断,执行mnret返回",      
    8002bf5a:	08c00593          	li	a1,140
    8002bf5e:	00012617          	auipc	a2,0x12
    8002bf62:	4a260613          	addi	a2,a2,1186 # 8003e400 <__func__.0+0xc018>
    8002bf66:	00006517          	auipc	a0,0x6
    8002bf6a:	77a50513          	addi	a0,a0,1914 # 800326e0 <__func__.0+0x2f8>
    8002bf6e:	556030ef          	jal	8002f4c4 <printf>
    8002bf72:	00030797          	auipc	a5,0x30
    8002bf76:	09f7c783          	lbu	a5,159(a5) # 8005c011 <excpt+0x1>
    8002bf7a:	00006597          	auipc	a1,0x6
    8002bf7e:	72e58593          	addi	a1,a1,1838 # 800326a8 <__func__.0+0x2c0>
    8002bf82:	e789                	bnez	a5,8002bf8c <smrnmi_test_1+0xae>
    8002bf84:	00006597          	auipc	a1,0x6
    8002bf88:	73458593          	addi	a1,a1,1844 # 800326b8 <__func__.0+0x2d0>
    8002bf8c:	00006517          	auipc	a0,0x6
    8002bf90:	76c50513          	addi	a0,a0,1900 # 800326f8 <__func__.0+0x310>
    8002bf94:	530030ef          	jal	8002f4c4 <printf>
    8002bf98:	00030797          	auipc	a5,0x30
    8002bf9c:	0797c783          	lbu	a5,121(a5) # 8005c011 <excpt+0x1>
    8002bfa0:	c799                	beqz	a5,8002bfae <smrnmi_test_1+0xd0>
    8002bfa2:	4529                	li	a0,10
    8002bfa4:	20e020ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002bfa8:	60a2                	ld	ra,8(sp)
    8002bfaa:	0141                	addi	sp,sp,16
    8002bfac:	8082                	ret
    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断,执行mnret返回",      
    8002bfae:	00006517          	auipc	a0,0x6
    8002bfb2:	75250513          	addi	a0,a0,1874 # 80032700 <__func__.0+0x318>
    8002bfb6:	50e030ef          	jal	8002f4c4 <printf>
    8002bfba:	02900513          	li	a0,41
    8002bfbe:	1f4020ef          	jal	8002e1b2 <putchar>
    8002bfc2:	4529                	li	a0,10
    8002bfc4:	1ee020ef          	jal	8002e1b2 <putchar>
}
    8002bfc8:	60a2                	ld	ra,8(sp)
    8002bfca:	0141                	addi	sp,sp,16
    8002bfcc:	8082                	ret

000000008002bfce <smrnmi_test_2>:

bool smrnmi_test_2() {
    8002bfce:	1141                	addi	sp,sp,-16
    //m模式下，当mtvec.mode=vectored，mstatus.MDT=1,mnstatus.NMIE=1时，产生异常
    TEST_START();
    8002bfd0:	00006597          	auipc	a1,0x6
    8002bfd4:	16058593          	addi	a1,a1,352 # 80032130 <__func__.35>
    8002bfd8:	00006517          	auipc	a0,0x6
    8002bfdc:	6f050513          	addi	a0,a0,1776 # 800326c8 <__func__.0+0x2e0>
bool smrnmi_test_2() {
    8002bfe0:	e406                	sd	ra,8(sp)
    TEST_START();
    8002bfe2:	4e2030ef          	jal	8002f4c4 <printf>
    8002bfe6:	4529                	li	a0,10
    8002bfe8:	1ca020ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002bfec:	4511                	li	a0,4
    8002bfee:	f27d40ef          	jal	80000f14 <goto_priv>

    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002bff2:	300025f3          	csrr	a1,mstatus
    8002bff6:	00012517          	auipc	a0,0x12
    8002bffa:	e6250513          	addi	a0,a0,-414 # 8003de58 <__func__.0+0xba70>
    8002bffe:	4c6030ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 1);
    8002c002:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002c006:	00004797          	auipc	a5,0x4
    8002c00a:	d6e78793          	addi	a5,a5,-658 # 8002fd74 <vs_test_entry>
    8002c00e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002c012:	00004797          	auipc	a5,0x4
    8002c016:	ada78793          	addi	a5,a5,-1318 # 8002faec <hs_test_entry>
    8002c01a:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002c01e:	00004797          	auipc	a5,0x4
    8002c022:	84678793          	addi	a5,a5,-1978 # 8002f864 <m_test_entry>
    8002c026:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002c02a:	3050e073          	csrsi	mtvec,1
    CSRS(CSR_MSTATUS , 1ULL << 42); 
    8002c02e:	4785                	li	a5,1
    8002c030:	17aa                	slli	a5,a5,0x2a
    8002c032:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MNSTATUS , 1ULL << 3);
    8002c036:	74446073          	csrsi	0x744,8


    printf("mstatus=%llx \n",CSRR(CSR_MSTATUS));
    8002c03a:	300025f3          	csrr	a1,mstatus
    8002c03e:	00012517          	auipc	a0,0x12
    8002c042:	42250513          	addi	a0,a0,1058 # 8003e460 <__func__.0+0xc078>
    8002c046:	47e030ef          	jal	8002f4c4 <printf>
    printf("mnstatus=%llx \n",CSRR(CSR_MNSTATUS));
    8002c04a:	744025f3          	csrr	a1,0x744
    8002c04e:	00012517          	auipc	a0,0x12
    8002c052:	42250513          	addi	a0,a0,1058 # 8003e470 <__func__.0+0xc088>
    8002c056:	46e030ef          	jal	8002f4c4 <printf>

    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002c05a:	305025f3          	csrr	a1,mtvec
    8002c05e:	00012517          	auipc	a0,0x12
    8002c062:	e0a50513          	addi	a0,a0,-502 # 8003de68 <__func__.0+0xba80>
    8002c066:	45e030ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002c06a:	dafd40ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002c06e:	00012517          	auipc	a0,0x12
    8002c072:	e0a50513          	addi	a0,a0,-502 # 8003de78 <__func__.0+0xba90>
    8002c076:	44e030ef          	jal	8002f4c4 <printf>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002c07a:	6785                	lui	a5,0x1
    8002c07c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002c07e:	f1579073          	csrw	0xf15,a5
    excpt_info();
    8002c082:	fd9d40ef          	jal	8000105a <excpt_info>
    TEST_ASSERT("m模式下,mtvec.mode=vectored,mstatus.MDT=1,mnstatus.NMIE=1时产生异常",      
    8002c086:	08c00593          	li	a1,140
    8002c08a:	00012617          	auipc	a2,0x12
    8002c08e:	3f660613          	addi	a2,a2,1014 # 8003e480 <__func__.0+0xc098>
    8002c092:	00006517          	auipc	a0,0x6
    8002c096:	64e50513          	addi	a0,a0,1614 # 800326e0 <__func__.0+0x2f8>
    8002c09a:	42a030ef          	jal	8002f4c4 <printf>
    8002c09e:	00030797          	auipc	a5,0x30
    8002c0a2:	f737c783          	lbu	a5,-141(a5) # 8005c011 <excpt+0x1>
    8002c0a6:	00006597          	auipc	a1,0x6
    8002c0aa:	60258593          	addi	a1,a1,1538 # 800326a8 <__func__.0+0x2c0>
    8002c0ae:	e789                	bnez	a5,8002c0b8 <smrnmi_test_2+0xea>
    8002c0b0:	00006597          	auipc	a1,0x6
    8002c0b4:	60858593          	addi	a1,a1,1544 # 800326b8 <__func__.0+0x2d0>
    8002c0b8:	00006517          	auipc	a0,0x6
    8002c0bc:	64050513          	addi	a0,a0,1600 # 800326f8 <__func__.0+0x310>
    8002c0c0:	404030ef          	jal	8002f4c4 <printf>
    8002c0c4:	00030797          	auipc	a5,0x30
    8002c0c8:	f4d7c783          	lbu	a5,-179(a5) # 8005c011 <excpt+0x1>
    8002c0cc:	c799                	beqz	a5,8002c0da <smrnmi_test_2+0x10c>
    8002c0ce:	4529                	li	a0,10
    8002c0d0:	0e2020ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002c0d4:	60a2                	ld	ra,8(sp)
    8002c0d6:	0141                	addi	sp,sp,16
    8002c0d8:	8082                	ret
    TEST_ASSERT("m模式下,mtvec.mode=vectored,mstatus.MDT=1,mnstatus.NMIE=1时产生异常",      
    8002c0da:	00006517          	auipc	a0,0x6
    8002c0de:	62650513          	addi	a0,a0,1574 # 80032700 <__func__.0+0x318>
    8002c0e2:	3e2030ef          	jal	8002f4c4 <printf>
    8002c0e6:	02900513          	li	a0,41
    8002c0ea:	0c8020ef          	jal	8002e1b2 <putchar>
    8002c0ee:	4529                	li	a0,10
    8002c0f0:	0c2020ef          	jal	8002e1b2 <putchar>
}
    8002c0f4:	60a2                	ld	ra,8(sp)
    8002c0f6:	0141                	addi	sp,sp,16
    8002c0f8:	8082                	ret

000000008002c0fa <m_double_trap_1>:

//-------------------------------smrnmi_test_end-------------------------------------

//-------------------------------smdbltrp_test_begin-------------------------------------

bool m_double_trap_1() {
    8002c0fa:	1141                	addi	sp,sp,-16

    //显式CSR写 MDT 位为1时，MIE（机器中断使能）位被清除为0
    TEST_START();
    8002c0fc:	00006597          	auipc	a1,0x6
    8002c100:	04458593          	addi	a1,a1,68 # 80032140 <__func__.34>
    8002c104:	00006517          	auipc	a0,0x6
    8002c108:	5c450513          	addi	a0,a0,1476 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_1() {
    8002c10c:	e406                	sd	ra,8(sp)
    TEST_START();
    8002c10e:	3b6030ef          	jal	8002f4c4 <printf>
    8002c112:	4529                	li	a0,10
    8002c114:	09e020ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002c118:	4511                	li	a0,4
    8002c11a:	dfbd40ef          	jal	80000f14 <goto_priv>

    CSRS(CSR_MSTATUS, MSTATUS_MIE);
    8002c11e:	30046073          	csrsi	mstatus,8

    CSRS(CSR_MSTATUS, MSTATUS_MDT);
    8002c122:	4785                	li	a5,1
    8002c124:	17aa                	slli	a5,a5,0x2a
    8002c126:	3007a073          	csrs	mstatus,a5
    TEST_ASSERT("显式CSR写 MDT 位为1时，MIE（机器中断使能）位被清除为0",
    8002c12a:	00012617          	auipc	a2,0x12
    8002c12e:	3a660613          	addi	a2,a2,934 # 8003e4d0 <__func__.0+0xc0e8>
    8002c132:	08c00593          	li	a1,140
    8002c136:	00006517          	auipc	a0,0x6
    8002c13a:	5aa50513          	addi	a0,a0,1450 # 800326e0 <__func__.0+0x2f8>
    8002c13e:	386030ef          	jal	8002f4c4 <printf>
    8002c142:	300027f3          	csrr	a5,mstatus
    8002c146:	8ba1                	andi	a5,a5,8
    8002c148:	00006597          	auipc	a1,0x6
    8002c14c:	56058593          	addi	a1,a1,1376 # 800326a8 <__func__.0+0x2c0>
    8002c150:	c789                	beqz	a5,8002c15a <m_double_trap_1+0x60>
    8002c152:	00006597          	auipc	a1,0x6
    8002c156:	56658593          	addi	a1,a1,1382 # 800326b8 <__func__.0+0x2d0>
    8002c15a:	00006517          	auipc	a0,0x6
    8002c15e:	59e50513          	addi	a0,a0,1438 # 800326f8 <__func__.0+0x310>
    8002c162:	362030ef          	jal	8002f4c4 <printf>
    8002c166:	300027f3          	csrr	a5,mstatus
    8002c16a:	8ba1                	andi	a5,a5,8
    8002c16c:	eb89                	bnez	a5,8002c17e <m_double_trap_1+0x84>
    8002c16e:	4529                	li	a0,10
    8002c170:	042020ef          	jal	8002e1b2 <putchar>
    8002c174:	300027f3          	csrr	a5,mstatus
        (CSRR(CSR_MSTATUS) & MSTATUS_MIE) == 0
    ); 

}
    8002c178:	60a2                	ld	ra,8(sp)
    8002c17a:	0141                	addi	sp,sp,16
    8002c17c:	8082                	ret
    TEST_ASSERT("显式CSR写 MDT 位为1时，MIE（机器中断使能）位被清除为0",
    8002c17e:	00006517          	auipc	a0,0x6
    8002c182:	58250513          	addi	a0,a0,1410 # 80032700 <__func__.0+0x318>
    8002c186:	33e030ef          	jal	8002f4c4 <printf>
    8002c18a:	02900513          	li	a0,41
    8002c18e:	024020ef          	jal	8002e1b2 <putchar>
    8002c192:	4529                	li	a0,10
    8002c194:	01e020ef          	jal	8002e1b2 <putchar>
    8002c198:	300027f3          	csrr	a5,mstatus
}
    8002c19c:	60a2                	ld	ra,8(sp)
    8002c19e:	0141                	addi	sp,sp,16
    8002c1a0:	8082                	ret

000000008002c1a2 <m_double_trap_2>:



bool m_double_trap_2() {
    8002c1a2:	1141                	addi	sp,sp,-16

    //当 MDT 位已为0时，通过显式的CSR写操作将 MIE 位设置为1
    TEST_START();
    8002c1a4:	00006597          	auipc	a1,0x6
    8002c1a8:	fac58593          	addi	a1,a1,-84 # 80032150 <__func__.33>
    8002c1ac:	00006517          	auipc	a0,0x6
    8002c1b0:	51c50513          	addi	a0,a0,1308 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_2() {
    8002c1b4:	e406                	sd	ra,8(sp)
    TEST_START();
    8002c1b6:	30e030ef          	jal	8002f4c4 <printf>
    8002c1ba:	4529                	li	a0,10
    8002c1bc:	7f7010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002c1c0:	4511                	li	a0,4
    8002c1c2:	d53d40ef          	jal	80000f14 <goto_priv>

    CSRS(CSR_MSTATUS, MSTATUS_MIE);
    8002c1c6:	30046073          	csrsi	mstatus,8

    TEST_ASSERT("当 MDT 位已为0，通过显式的CSR写操作将 MIE 位设置为1",
    8002c1ca:	00012617          	auipc	a2,0x12
    8002c1ce:	35660613          	addi	a2,a2,854 # 8003e520 <__func__.0+0xc138>
    8002c1d2:	08c00593          	li	a1,140
    8002c1d6:	00006517          	auipc	a0,0x6
    8002c1da:	50a50513          	addi	a0,a0,1290 # 800326e0 <__func__.0+0x2f8>
    8002c1de:	2e6030ef          	jal	8002f4c4 <printf>
    8002c1e2:	300027f3          	csrr	a5,mstatus
    8002c1e6:	00006597          	auipc	a1,0x6
    8002c1ea:	4d258593          	addi	a1,a1,1234 # 800326b8 <__func__.0+0x2d0>
    8002c1ee:	00006517          	auipc	a0,0x6
    8002c1f2:	50a50513          	addi	a0,a0,1290 # 800326f8 <__func__.0+0x310>
    8002c1f6:	2ce030ef          	jal	8002f4c4 <printf>
    8002c1fa:	300027f3          	csrr	a5,mstatus
    8002c1fe:	00006517          	auipc	a0,0x6
    8002c202:	50250513          	addi	a0,a0,1282 # 80032700 <__func__.0+0x318>
    8002c206:	2be030ef          	jal	8002f4c4 <printf>
    8002c20a:	02900513          	li	a0,41
    8002c20e:	7a5010ef          	jal	8002e1b2 <putchar>
    8002c212:	4529                	li	a0,10
    8002c214:	79f010ef          	jal	8002e1b2 <putchar>
    8002c218:	300027f3          	csrr	a5,mstatus
        (CSRR(CSR_MSTATUS) & MSTATUS_MIE) == 1
    ); 

}
    8002c21c:	60a2                	ld	ra,8(sp)
    8002c21e:	0141                	addi	sp,sp,16
    8002c220:	8082                	ret

000000008002c222 <m_double_trap_3>:

bool m_double_trap_3() {
    8002c222:	1141                	addi	sp,sp,-16

    //当 MDT 位（对于RV64）在同一次写操作中被设置为0时，通过显式的CSR写操作将 MIE 位设置为1
    TEST_START();
    8002c224:	00006597          	auipc	a1,0x6
    8002c228:	f3c58593          	addi	a1,a1,-196 # 80032160 <__func__.32>
    8002c22c:	00006517          	auipc	a0,0x6
    8002c230:	49c50513          	addi	a0,a0,1180 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_3() {
    8002c234:	e406                	sd	ra,8(sp)
    TEST_START();
    8002c236:	28e030ef          	jal	8002f4c4 <printf>
    8002c23a:	4529                	li	a0,10
    8002c23c:	777010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002c240:	4511                	li	a0,4
    8002c242:	cd3d40ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002c246:	00004797          	auipc	a5,0x4
    8002c24a:	b2e78793          	addi	a5,a5,-1234 # 8002fd74 <vs_test_entry>
    8002c24e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002c252:	00004797          	auipc	a5,0x4
    8002c256:	89a78793          	addi	a5,a5,-1894 # 8002faec <hs_test_entry>
    8002c25a:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002c25e:	00003797          	auipc	a5,0x3
    8002c262:	60678793          	addi	a5,a5,1542 # 8002f864 <m_test_entry>
    8002c266:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002c26a:	3050e073          	csrsi	mtvec,1

    TEST_SETUP_EXCEPT();
    8002c26e:	babd40ef          	jal	80000e18 <test_setup_except_function>

    trap=3;
    8002c272:	470d                	li	a4,3
    CSRW(CSR_MCONFIGPTR,0xfff); //陷入异常使mdt为1
    8002c274:	6785                	lui	a5,0x1
    trap=3;
    8002c276:	00030697          	auipc	a3,0x30
    8002c27a:	e6e6a123          	sw	a4,-414(a3) # 8005c0d8 <trap>
    CSRW(CSR_MCONFIGPTR,0xfff); //陷入异常使mdt为1
    8002c27e:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002c280:	f1579073          	csrw	0xf15,a5

}
    8002c284:	60a2                	ld	ra,8(sp)
    8002c286:	0141                	addi	sp,sp,16
    8002c288:	8082                	ret

000000008002c28a <m_double_trap_4>:

bool m_double_trap_4() {
    8002c28a:	1141                	addi	sp,sp,-16

    //当在M模式下执行MRET指令时，MDT位被设置为0
    TEST_START();
    8002c28c:	00006597          	auipc	a1,0x6
    8002c290:	ee458593          	addi	a1,a1,-284 # 80032170 <__func__.31>
    8002c294:	00006517          	auipc	a0,0x6
    8002c298:	43450513          	addi	a0,a0,1076 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_4() {
    8002c29c:	e406                	sd	ra,8(sp)
    TEST_START();
    8002c29e:	226030ef          	jal	8002f4c4 <printf>
    8002c2a2:	4529                	li	a0,10
    8002c2a4:	70f010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002c2a8:	4511                	li	a0,4
    8002c2aa:	c6bd40ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002c2ae:	00004797          	auipc	a5,0x4
    8002c2b2:	ac678793          	addi	a5,a5,-1338 # 8002fd74 <vs_test_entry>
    8002c2b6:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002c2ba:	00004797          	auipc	a5,0x4
    8002c2be:	83278793          	addi	a5,a5,-1998 # 8002faec <hs_test_entry>
    8002c2c2:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002c2c6:	00003797          	auipc	a5,0x3
    8002c2ca:	59e78793          	addi	a5,a5,1438 # 8002f864 <m_test_entry>
    8002c2ce:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002c2d2:	3050e073          	csrsi	mtvec,1

    TEST_SETUP_EXCEPT();
    8002c2d6:	b43d40ef          	jal	80000e18 <test_setup_except_function>

    trap=4;
    8002c2da:	4711                	li	a4,4
    CSRW(CSR_MCONFIGPTR,0xfff); 
    8002c2dc:	6785                	lui	a5,0x1
    trap=4;
    8002c2de:	00030697          	auipc	a3,0x30
    8002c2e2:	dee6ad23          	sw	a4,-518(a3) # 8005c0d8 <trap>
    CSRW(CSR_MCONFIGPTR,0xfff); 
    8002c2e6:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002c2e8:	f1579073          	csrw	0xf15,a5

    bool check1,check2;

    if(trap == -1) check1 = true;
    8002c2ec:	00030717          	auipc	a4,0x30
    8002c2f0:	dec72703          	lw	a4,-532(a4) # 8005c0d8 <trap>
    8002c2f4:	57fd                	li	a5,-1
    8002c2f6:	04f70e63          	beq	a4,a5,8002c352 <m_double_trap_4+0xc8>
    else check1 = false;

    check2 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c2fa:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("当在M模式下执行MRET和SRET指令时，MDT位被设置为0",
    8002c2fe:	08c00593          	li	a1,140
    8002c302:	00012617          	auipc	a2,0x12
    8002c306:	26660613          	addi	a2,a2,614 # 8003e568 <__func__.0+0xc180>
    8002c30a:	00006517          	auipc	a0,0x6
    8002c30e:	3d650513          	addi	a0,a0,982 # 800326e0 <__func__.0+0x2f8>
    8002c312:	1b2030ef          	jal	8002f4c4 <printf>
    8002c316:	00006597          	auipc	a1,0x6
    8002c31a:	3a258593          	addi	a1,a1,930 # 800326b8 <__func__.0+0x2d0>
    8002c31e:	00006517          	auipc	a0,0x6
    8002c322:	3da50513          	addi	a0,a0,986 # 800326f8 <__func__.0+0x310>
    8002c326:	19e030ef          	jal	8002f4c4 <printf>
    8002c32a:	00006517          	auipc	a0,0x6
    8002c32e:	3d650513          	addi	a0,a0,982 # 80032700 <__func__.0+0x318>
    8002c332:	192030ef          	jal	8002f4c4 <printf>
    8002c336:	02900513          	li	a0,41
    8002c33a:	679010ef          	jal	8002e1b2 <putchar>
    8002c33e:	4529                	li	a0,10
    8002c340:	673010ef          	jal	8002e1b2 <putchar>
        check1 &&
        check2
    ); 
    trap = 0;
}
    8002c344:	60a2                	ld	ra,8(sp)
    trap = 0;
    8002c346:	00030797          	auipc	a5,0x30
    8002c34a:	d807a923          	sw	zero,-622(a5) # 8005c0d8 <trap>
}
    8002c34e:	0141                	addi	sp,sp,16
    8002c350:	8082                	ret
    check2 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c352:	e022                	sd	s0,0(sp)
    8002c354:	30002473          	csrr	s0,mstatus
    TEST_ASSERT("当在M模式下执行MRET和SRET指令时，MDT位被设置为0",
    8002c358:	00012617          	auipc	a2,0x12
    8002c35c:	21060613          	addi	a2,a2,528 # 8003e568 <__func__.0+0xc180>
    8002c360:	08c00593          	li	a1,140
    8002c364:	00006517          	auipc	a0,0x6
    8002c368:	37c50513          	addi	a0,a0,892 # 800326e0 <__func__.0+0x2f8>
    8002c36c:	158030ef          	jal	8002f4c4 <printf>
    8002c370:	01541793          	slli	a5,s0,0x15
    8002c374:	0207c763          	bltz	a5,8002c3a2 <m_double_trap_4+0x118>
    8002c378:	00006597          	auipc	a1,0x6
    8002c37c:	33058593          	addi	a1,a1,816 # 800326a8 <__func__.0+0x2c0>
    8002c380:	00006517          	auipc	a0,0x6
    8002c384:	37850513          	addi	a0,a0,888 # 800326f8 <__func__.0+0x310>
    8002c388:	13c030ef          	jal	8002f4c4 <printf>
    8002c38c:	4529                	li	a0,10
    8002c38e:	6402                	ld	s0,0(sp)
    8002c390:	623010ef          	jal	8002e1b2 <putchar>
}
    8002c394:	60a2                	ld	ra,8(sp)
    trap = 0;
    8002c396:	00030797          	auipc	a5,0x30
    8002c39a:	d407a123          	sw	zero,-702(a5) # 8005c0d8 <trap>
}
    8002c39e:	0141                	addi	sp,sp,16
    8002c3a0:	8082                	ret
    TEST_ASSERT("当在M模式下执行MRET和SRET指令时，MDT位被设置为0",
    8002c3a2:	00006597          	auipc	a1,0x6
    8002c3a6:	31658593          	addi	a1,a1,790 # 800326b8 <__func__.0+0x2d0>
    8002c3aa:	00006517          	auipc	a0,0x6
    8002c3ae:	34e50513          	addi	a0,a0,846 # 800326f8 <__func__.0+0x310>
    8002c3b2:	112030ef          	jal	8002f4c4 <printf>
    8002c3b6:	6402                	ld	s0,0(sp)
    8002c3b8:	bf8d                	j	8002c32a <m_double_trap_4+0xa0>

000000008002c3ba <m_double_trap_5>:

bool m_double_trap_5() {
    8002c3ba:	1101                	addi	sp,sp,-32

    //当执行MRET指令，返回新特权模式S时，MDT位被设置为0
    TEST_START();
    8002c3bc:	00006597          	auipc	a1,0x6
    8002c3c0:	dc458593          	addi	a1,a1,-572 # 80032180 <__func__.30>
    8002c3c4:	00006517          	auipc	a0,0x6
    8002c3c8:	30450513          	addi	a0,a0,772 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_5() {
    8002c3cc:	ec06                	sd	ra,24(sp)
    8002c3ce:	e822                	sd	s0,16(sp)
    8002c3d0:	e426                	sd	s1,8(sp)
    TEST_START();
    8002c3d2:	0f2030ef          	jal	8002f4c4 <printf>
    8002c3d6:	4529                	li	a0,10
    8002c3d8:	5db010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002c3dc:	4511                	li	a0,4
    8002c3de:	b37d40ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002c3e2:	00004797          	auipc	a5,0x4
    8002c3e6:	99278793          	addi	a5,a5,-1646 # 8002fd74 <vs_test_entry>
    8002c3ea:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002c3ee:	00003797          	auipc	a5,0x3
    8002c3f2:	6fe78793          	addi	a5,a5,1790 # 8002faec <hs_test_entry>
    8002c3f6:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002c3fa:	00003797          	auipc	a5,0x3
    8002c3fe:	46a78793          	addi	a5,a5,1130 # 8002f864 <m_test_entry>
    8002c402:	30579073          	csrw	mtvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002c406:	1050e073          	csrsi	stvec,1

    TEST_SETUP_EXCEPT();
    8002c40a:	a0fd40ef          	jal	80000e18 <test_setup_except_function>
    printf("%llx\n",CSRR(CSR_MEDELEG));
    8002c40e:	302025f3          	csrr	a1,medeleg
    8002c412:	0000d517          	auipc	a0,0xd
    8002c416:	8ee50513          	addi	a0,a0,-1810 # 80038d00 <__func__.0+0x6918>
    8002c41a:	0aa030ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_HS);    
    8002c41e:	450d                	li	a0,3

    trap=4;
    8002c420:	4411                	li	s0,4
    goto_priv(PRIV_HS);    
    8002c422:	af3d40ef          	jal	80000f14 <goto_priv>
    trap=4;
    8002c426:	00030797          	auipc	a5,0x30
    8002c42a:	ca87a923          	sw	s0,-846(a5) # 8005c0d8 <trap>
    TEST_SETUP_EXCEPT();
    8002c42e:	9ebd40ef          	jal	80000e18 <test_setup_except_function>

    CSRW(CSR_MCONFIGPTR,0xfff); 
    8002c432:	6785                	lui	a5,0x1
    8002c434:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002c436:	f1579073          	csrw	0xf15,a5
    bool check1,check2;

    if(trap == -1) check1 = true;
    else check1 = false;

    goto_priv(PRIV_M);
    8002c43a:	8522                	mv	a0,s0
    if(trap == -1) check1 = true;
    8002c43c:	00030417          	auipc	s0,0x30
    8002c440:	c9c42403          	lw	s0,-868(s0) # 8005c0d8 <trap>
    goto_priv(PRIV_M);
    8002c444:	ad1d40ef          	jal	80000f14 <goto_priv>

    check2 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c448:	300024f3          	csrr	s1,mstatus

    TEST_ASSERT("当执行MRET指令，返回新特权模式S时，MDT位被设置为0",
    8002c44c:	00012617          	auipc	a2,0x12
    8002c450:	16460613          	addi	a2,a2,356 # 8003e5b0 <__func__.0+0xc1c8>
    8002c454:	08c00593          	li	a1,140
    8002c458:	00006517          	auipc	a0,0x6
    8002c45c:	28850513          	addi	a0,a0,648 # 800326e0 <__func__.0+0x2f8>
    8002c460:	064030ef          	jal	8002f4c4 <printf>
    8002c464:	57fd                	li	a5,-1
    8002c466:	00f41663          	bne	s0,a5,8002c472 <m_double_trap_5+0xb8>
    8002c46a:	01549793          	slli	a5,s1,0x15
    8002c46e:	0407d263          	bgez	a5,8002c4b2 <m_double_trap_5+0xf8>
    8002c472:	00006597          	auipc	a1,0x6
    8002c476:	24658593          	addi	a1,a1,582 # 800326b8 <__func__.0+0x2d0>
    8002c47a:	00006517          	auipc	a0,0x6
    8002c47e:	27e50513          	addi	a0,a0,638 # 800326f8 <__func__.0+0x310>
    8002c482:	042030ef          	jal	8002f4c4 <printf>
    8002c486:	00006517          	auipc	a0,0x6
    8002c48a:	27a50513          	addi	a0,a0,634 # 80032700 <__func__.0+0x318>
    8002c48e:	036030ef          	jal	8002f4c4 <printf>
    8002c492:	02900513          	li	a0,41
    8002c496:	51d010ef          	jal	8002e1b2 <putchar>
    8002c49a:	4529                	li	a0,10
    8002c49c:	517010ef          	jal	8002e1b2 <putchar>
        check1 &&
        check2
    ); 
    trap = 0;
}
    8002c4a0:	60e2                	ld	ra,24(sp)
    8002c4a2:	6442                	ld	s0,16(sp)
    trap = 0;
    8002c4a4:	00030797          	auipc	a5,0x30
    8002c4a8:	c207aa23          	sw	zero,-972(a5) # 8005c0d8 <trap>
}
    8002c4ac:	64a2                	ld	s1,8(sp)
    8002c4ae:	6105                	addi	sp,sp,32
    8002c4b0:	8082                	ret
    TEST_ASSERT("当执行MRET指令，返回新特权模式S时，MDT位被设置为0",
    8002c4b2:	00006597          	auipc	a1,0x6
    8002c4b6:	1f658593          	addi	a1,a1,502 # 800326a8 <__func__.0+0x2c0>
    8002c4ba:	00006517          	auipc	a0,0x6
    8002c4be:	23e50513          	addi	a0,a0,574 # 800326f8 <__func__.0+0x310>
    8002c4c2:	002030ef          	jal	8002f4c4 <printf>
    8002c4c6:	bfd1                	j	8002c49a <m_double_trap_5+0xe0>

000000008002c4c8 <m_double_trap_6>:

bool m_double_trap_6() {
    8002c4c8:	1101                	addi	sp,sp,-32

    //当执行MNRET指令，返回新特权模式S时，MDT位被设置为0
    TEST_START();
    8002c4ca:	00006597          	auipc	a1,0x6
    8002c4ce:	cc658593          	addi	a1,a1,-826 # 80032190 <__func__.29>
    8002c4d2:	00006517          	auipc	a0,0x6
    8002c4d6:	1f650513          	addi	a0,a0,502 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_6() {
    8002c4da:	ec06                	sd	ra,24(sp)
    8002c4dc:	e822                	sd	s0,16(sp)
    8002c4de:	e426                	sd	s1,8(sp)
    TEST_START();
    8002c4e0:	7e5020ef          	jal	8002f4c4 <printf>
    8002c4e4:	4529                	li	a0,10
    8002c4e6:	4cd010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002c4ea:	4511                	li	a0,4
    8002c4ec:	a29d40ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002c4f0:	00004797          	auipc	a5,0x4
    8002c4f4:	88478793          	addi	a5,a5,-1916 # 8002fd74 <vs_test_entry>
    8002c4f8:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002c4fc:	00003797          	auipc	a5,0x3
    8002c500:	5f078793          	addi	a5,a5,1520 # 8002faec <hs_test_entry>
    8002c504:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002c508:	00003797          	auipc	a5,0x3
    8002c50c:	35c78793          	addi	a5,a5,860 # 8002f864 <m_test_entry>
    8002c510:	30579073          	csrw	mtvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002c514:	1050e073          	csrsi	stvec,1

    TEST_SETUP_EXCEPT();
    8002c518:	901d40ef          	jal	80000e18 <test_setup_except_function>

    goto_priv(PRIV_HS);    
    8002c51c:	450d                	li	a0,3

    trap=4;
    8002c51e:	4411                	li	s0,4
    goto_priv(PRIV_HS);    
    8002c520:	9f5d40ef          	jal	80000f14 <goto_priv>
    trap=4;
    8002c524:	00030797          	auipc	a5,0x30
    8002c528:	ba87aa23          	sw	s0,-1100(a5) # 8005c0d8 <trap>
    TEST_SETUP_EXCEPT();
    8002c52c:	8edd40ef          	jal	80000e18 <test_setup_except_function>

    CSRW(CSR_MCONFIGPTR,0xfff); 
    8002c530:	6785                	lui	a5,0x1
    8002c532:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002c534:	f1579073          	csrw	0xf15,a5
    bool check1,check2;

    if(trap == -1) check1 = true;
    else check1 = false;

    goto_priv(PRIV_M);
    8002c538:	8522                	mv	a0,s0
    if(trap == -1) check1 = true;
    8002c53a:	00030417          	auipc	s0,0x30
    8002c53e:	b9e42403          	lw	s0,-1122(s0) # 8005c0d8 <trap>
    goto_priv(PRIV_M);
    8002c542:	9d3d40ef          	jal	80000f14 <goto_priv>

    check2 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c546:	300024f3          	csrr	s1,mstatus

    TEST_ASSERT("当执行MNRET指令，返回新特权模式S时，MDT位被设置为0",   //需要改对应.S文件
    8002c54a:	00012617          	auipc	a2,0x12
    8002c54e:	0ae60613          	addi	a2,a2,174 # 8003e5f8 <__func__.0+0xc210>
    8002c552:	08c00593          	li	a1,140
    8002c556:	00006517          	auipc	a0,0x6
    8002c55a:	18a50513          	addi	a0,a0,394 # 800326e0 <__func__.0+0x2f8>
    8002c55e:	767020ef          	jal	8002f4c4 <printf>
    8002c562:	57fd                	li	a5,-1
    8002c564:	00f41663          	bne	s0,a5,8002c570 <m_double_trap_6+0xa8>
    8002c568:	01549793          	slli	a5,s1,0x15
    8002c56c:	0407d263          	bgez	a5,8002c5b0 <m_double_trap_6+0xe8>
    8002c570:	00006597          	auipc	a1,0x6
    8002c574:	14858593          	addi	a1,a1,328 # 800326b8 <__func__.0+0x2d0>
    8002c578:	00006517          	auipc	a0,0x6
    8002c57c:	18050513          	addi	a0,a0,384 # 800326f8 <__func__.0+0x310>
    8002c580:	745020ef          	jal	8002f4c4 <printf>
    8002c584:	00006517          	auipc	a0,0x6
    8002c588:	17c50513          	addi	a0,a0,380 # 80032700 <__func__.0+0x318>
    8002c58c:	739020ef          	jal	8002f4c4 <printf>
    8002c590:	02900513          	li	a0,41
    8002c594:	41f010ef          	jal	8002e1b2 <putchar>
    8002c598:	4529                	li	a0,10
    8002c59a:	419010ef          	jal	8002e1b2 <putchar>
        check1 &&
        check2
    ); 
    trap = 0;
}
    8002c59e:	60e2                	ld	ra,24(sp)
    8002c5a0:	6442                	ld	s0,16(sp)
    trap = 0;
    8002c5a2:	00030797          	auipc	a5,0x30
    8002c5a6:	b207ab23          	sw	zero,-1226(a5) # 8005c0d8 <trap>
}
    8002c5aa:	64a2                	ld	s1,8(sp)
    8002c5ac:	6105                	addi	sp,sp,32
    8002c5ae:	8082                	ret
    TEST_ASSERT("当执行MNRET指令，返回新特权模式S时，MDT位被设置为0",   //需要改对应.S文件
    8002c5b0:	00006597          	auipc	a1,0x6
    8002c5b4:	0f858593          	addi	a1,a1,248 # 800326a8 <__func__.0+0x2c0>
    8002c5b8:	00006517          	auipc	a0,0x6
    8002c5bc:	14050513          	addi	a0,a0,320 # 800326f8 <__func__.0+0x310>
    8002c5c0:	705020ef          	jal	8002f4c4 <printf>
    8002c5c4:	bfd1                	j	8002c598 <m_double_trap_6+0xd0>

000000008002c5c6 <m_double_trap_7>:

bool m_double_trap_7() {
    8002c5c6:	1101                	addi	sp,sp,-32

    //当执行MRET指令，返回新特权模式HU时，MDT位设置为0，sstatus.SDT=0
    TEST_START();
    8002c5c8:	00006597          	auipc	a1,0x6
    8002c5cc:	bd858593          	addi	a1,a1,-1064 # 800321a0 <__func__.28>
    8002c5d0:	00006517          	auipc	a0,0x6
    8002c5d4:	0f850513          	addi	a0,a0,248 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_7() {
    8002c5d8:	ec06                	sd	ra,24(sp)
    8002c5da:	e822                	sd	s0,16(sp)
    8002c5dc:	e426                	sd	s1,8(sp)
    8002c5de:	e04a                	sd	s2,0(sp)
    TEST_START();
    8002c5e0:	6e5020ef          	jal	8002f4c4 <printf>
    8002c5e4:	4529                	li	a0,10
    8002c5e6:	3cd010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002c5ea:	4511                	li	a0,4
    8002c5ec:	929d40ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002c5f0:	00003797          	auipc	a5,0x3
    8002c5f4:	78478793          	addi	a5,a5,1924 # 8002fd74 <vs_test_entry>
    8002c5f8:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002c5fc:	00003797          	auipc	a5,0x3
    8002c600:	4f078793          	addi	a5,a5,1264 # 8002faec <hs_test_entry>
    8002c604:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002c608:	00003797          	auipc	a5,0x3
    8002c60c:	25c78793          	addi	a5,a5,604 # 8002f864 <m_test_entry>
    8002c610:	30579073          	csrw	mtvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002c614:	1050e073          	csrsi	stvec,1

    TEST_SETUP_EXCEPT();
    8002c618:	801d40ef          	jal	80000e18 <test_setup_except_function>
    printf("%llx\n",CSRR(CSR_MEDELEG));
    8002c61c:	302025f3          	csrr	a1,medeleg
    8002c620:	0000c517          	auipc	a0,0xc
    8002c624:	6e050513          	addi	a0,a0,1760 # 80038d00 <__func__.0+0x6918>
    8002c628:	69d020ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_HU);    
    8002c62c:	4505                	li	a0,1

    trap=4;
    8002c62e:	4411                	li	s0,4
    goto_priv(PRIV_HU);    
    8002c630:	8e5d40ef          	jal	80000f14 <goto_priv>
    trap=4;
    8002c634:	00030797          	auipc	a5,0x30
    8002c638:	aa87a223          	sw	s0,-1372(a5) # 8005c0d8 <trap>
    TEST_SETUP_EXCEPT();
    8002c63c:	fdcd40ef          	jal	80000e18 <test_setup_except_function>

    CSRW(CSR_MCONFIGPTR,0xfff); 
    8002c640:	6785                	lui	a5,0x1
    8002c642:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002c644:	f1579073          	csrw	0xf15,a5

    if(trap == -1) check1 = true;
    else check1 = false;


    goto_priv(PRIV_M);
    8002c648:	8522                	mv	a0,s0
    if(trap == -1) check1 = true;
    8002c64a:	00030917          	auipc	s2,0x30
    8002c64e:	a8e92903          	lw	s2,-1394(s2) # 8005c0d8 <trap>
    goto_priv(PRIV_M);
    8002c652:	8c3d40ef          	jal	80000f14 <goto_priv>

    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002c656:	10002473          	csrr	s0,sstatus
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c65a:	300024f3          	csrr	s1,mstatus

    TEST_ASSERT("当执行MRET指令，返回新特权模式HU时，MDT位设置为0，sstatus.SDT=0",
    8002c65e:	00012617          	auipc	a2,0x12
    8002c662:	fe260613          	addi	a2,a2,-30 # 8003e640 <__func__.0+0xc258>
    8002c666:	08c00593          	li	a1,140
    8002c66a:	00006517          	auipc	a0,0x6
    8002c66e:	07650513          	addi	a0,a0,118 # 800326e0 <__func__.0+0x2f8>
    8002c672:	653020ef          	jal	8002f4c4 <printf>
    8002c676:	57fd                	li	a5,-1
    8002c678:	00f91a63          	bne	s2,a5,8002c68c <m_double_trap_7+0xc6>
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c67c:	4785                	li	a5,1
    8002c67e:	17aa                	slli	a5,a5,0x2a
    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002c680:	01000737          	lui	a4,0x1000
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c684:	8cfd                	and	s1,s1,a5
    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002c686:	8c79                	and	s0,s0,a4
    TEST_ASSERT("当执行MRET指令，返回新特权模式HU时，MDT位设置为0，sstatus.SDT=0",
    8002c688:	8c45                	or	s0,s0,s1
    8002c68a:	c031                	beqz	s0,8002c6ce <m_double_trap_7+0x108>
    8002c68c:	00006597          	auipc	a1,0x6
    8002c690:	02c58593          	addi	a1,a1,44 # 800326b8 <__func__.0+0x2d0>
    8002c694:	00006517          	auipc	a0,0x6
    8002c698:	06450513          	addi	a0,a0,100 # 800326f8 <__func__.0+0x310>
    8002c69c:	629020ef          	jal	8002f4c4 <printf>
    8002c6a0:	00006517          	auipc	a0,0x6
    8002c6a4:	06050513          	addi	a0,a0,96 # 80032700 <__func__.0+0x318>
    8002c6a8:	61d020ef          	jal	8002f4c4 <printf>
    8002c6ac:	02900513          	li	a0,41
    8002c6b0:	303010ef          	jal	8002e1b2 <putchar>
    8002c6b4:	4529                	li	a0,10
    8002c6b6:	2fd010ef          	jal	8002e1b2 <putchar>
        check1 &&
        check2 &&
        check3
    ); 
    trap = 0;
}
    8002c6ba:	60e2                	ld	ra,24(sp)
    8002c6bc:	6442                	ld	s0,16(sp)
    trap = 0;
    8002c6be:	00030797          	auipc	a5,0x30
    8002c6c2:	a007ad23          	sw	zero,-1510(a5) # 8005c0d8 <trap>
}
    8002c6c6:	64a2                	ld	s1,8(sp)
    8002c6c8:	6902                	ld	s2,0(sp)
    8002c6ca:	6105                	addi	sp,sp,32
    8002c6cc:	8082                	ret
    TEST_ASSERT("当执行MRET指令，返回新特权模式HU时，MDT位设置为0，sstatus.SDT=0",
    8002c6ce:	00006597          	auipc	a1,0x6
    8002c6d2:	fda58593          	addi	a1,a1,-38 # 800326a8 <__func__.0+0x2c0>
    8002c6d6:	00006517          	auipc	a0,0x6
    8002c6da:	02250513          	addi	a0,a0,34 # 800326f8 <__func__.0+0x310>
    8002c6de:	5e7020ef          	jal	8002f4c4 <printf>
    8002c6e2:	bfc9                	j	8002c6b4 <m_double_trap_7+0xee>

000000008002c6e4 <m_double_trap_8>:


bool m_double_trap_8() {
    8002c6e4:	1101                	addi	sp,sp,-32

    //当执行MNRET指令，返回新特权模式HU时，MDT位被设置为0，sstatus.SDT=0
    TEST_START();
    8002c6e6:	00006597          	auipc	a1,0x6
    8002c6ea:	aca58593          	addi	a1,a1,-1334 # 800321b0 <__func__.27>
    8002c6ee:	00006517          	auipc	a0,0x6
    8002c6f2:	fda50513          	addi	a0,a0,-38 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_8() {
    8002c6f6:	ec06                	sd	ra,24(sp)
    8002c6f8:	e822                	sd	s0,16(sp)
    8002c6fa:	e426                	sd	s1,8(sp)
    8002c6fc:	e04a                	sd	s2,0(sp)
    TEST_START();
    8002c6fe:	5c7020ef          	jal	8002f4c4 <printf>
    8002c702:	4529                	li	a0,10
    8002c704:	2af010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002c708:	4511                	li	a0,4
    8002c70a:	80bd40ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002c70e:	00003797          	auipc	a5,0x3
    8002c712:	66678793          	addi	a5,a5,1638 # 8002fd74 <vs_test_entry>
    8002c716:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002c71a:	00003797          	auipc	a5,0x3
    8002c71e:	3d278793          	addi	a5,a5,978 # 8002faec <hs_test_entry>
    8002c722:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002c726:	00003797          	auipc	a5,0x3
    8002c72a:	13e78793          	addi	a5,a5,318 # 8002f864 <m_test_entry>
    8002c72e:	30579073          	csrw	mtvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002c732:	1050e073          	csrsi	stvec,1

    TEST_SETUP_EXCEPT();
    8002c736:	ee2d40ef          	jal	80000e18 <test_setup_except_function>

    goto_priv(PRIV_HU);    
    8002c73a:	4505                	li	a0,1

    trap=4;
    8002c73c:	4411                	li	s0,4
    goto_priv(PRIV_HU);    
    8002c73e:	fd6d40ef          	jal	80000f14 <goto_priv>
    trap=4;
    8002c742:	00030797          	auipc	a5,0x30
    8002c746:	9887ab23          	sw	s0,-1642(a5) # 8005c0d8 <trap>
    TEST_SETUP_EXCEPT();
    8002c74a:	eced40ef          	jal	80000e18 <test_setup_except_function>

    CSRW(CSR_MCONFIGPTR,0xfff); 
    8002c74e:	6785                	lui	a5,0x1
    8002c750:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002c752:	f1579073          	csrw	0xf15,a5

    if(trap == -1) check1 = true;
    else check1 = false;


    goto_priv(PRIV_M);
    8002c756:	8522                	mv	a0,s0
    if(trap == -1) check1 = true;
    8002c758:	00030917          	auipc	s2,0x30
    8002c75c:	98092903          	lw	s2,-1664(s2) # 8005c0d8 <trap>
    goto_priv(PRIV_M);
    8002c760:	fb4d40ef          	jal	80000f14 <goto_priv>

    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002c764:	10002473          	csrr	s0,sstatus
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c768:	300024f3          	csrr	s1,mstatus

    TEST_ASSERT("当执行MNRET指令，返回新特权模式HU时，MDT位被设置为0，sstatus.SDT=0",   //需要改对应.S文件
    8002c76c:	00012617          	auipc	a2,0x12
    8002c770:	f2c60613          	addi	a2,a2,-212 # 8003e698 <__func__.0+0xc2b0>
    8002c774:	08c00593          	li	a1,140
    8002c778:	00006517          	auipc	a0,0x6
    8002c77c:	f6850513          	addi	a0,a0,-152 # 800326e0 <__func__.0+0x2f8>
    8002c780:	545020ef          	jal	8002f4c4 <printf>
    8002c784:	57fd                	li	a5,-1
    8002c786:	00f91a63          	bne	s2,a5,8002c79a <m_double_trap_8+0xb6>
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c78a:	4785                	li	a5,1
    8002c78c:	17aa                	slli	a5,a5,0x2a
    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002c78e:	01000737          	lui	a4,0x1000
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c792:	8cfd                	and	s1,s1,a5
    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002c794:	8c79                	and	s0,s0,a4
    TEST_ASSERT("当执行MNRET指令，返回新特权模式HU时，MDT位被设置为0，sstatus.SDT=0",   //需要改对应.S文件
    8002c796:	8c45                	or	s0,s0,s1
    8002c798:	c031                	beqz	s0,8002c7dc <m_double_trap_8+0xf8>
    8002c79a:	00006597          	auipc	a1,0x6
    8002c79e:	f1e58593          	addi	a1,a1,-226 # 800326b8 <__func__.0+0x2d0>
    8002c7a2:	00006517          	auipc	a0,0x6
    8002c7a6:	f5650513          	addi	a0,a0,-170 # 800326f8 <__func__.0+0x310>
    8002c7aa:	51b020ef          	jal	8002f4c4 <printf>
    8002c7ae:	00006517          	auipc	a0,0x6
    8002c7b2:	f5250513          	addi	a0,a0,-174 # 80032700 <__func__.0+0x318>
    8002c7b6:	50f020ef          	jal	8002f4c4 <printf>
    8002c7ba:	02900513          	li	a0,41
    8002c7be:	1f5010ef          	jal	8002e1b2 <putchar>
    8002c7c2:	4529                	li	a0,10
    8002c7c4:	1ef010ef          	jal	8002e1b2 <putchar>
        check1 &&
        check2 &&
        check3
    ); 
    trap = 0;
}
    8002c7c8:	60e2                	ld	ra,24(sp)
    8002c7ca:	6442                	ld	s0,16(sp)
    trap = 0;
    8002c7cc:	00030797          	auipc	a5,0x30
    8002c7d0:	9007a623          	sw	zero,-1780(a5) # 8005c0d8 <trap>
}
    8002c7d4:	64a2                	ld	s1,8(sp)
    8002c7d6:	6902                	ld	s2,0(sp)
    8002c7d8:	6105                	addi	sp,sp,32
    8002c7da:	8082                	ret
    TEST_ASSERT("当执行MNRET指令，返回新特权模式HU时，MDT位被设置为0，sstatus.SDT=0",   //需要改对应.S文件
    8002c7dc:	00006597          	auipc	a1,0x6
    8002c7e0:	ecc58593          	addi	a1,a1,-308 # 800326a8 <__func__.0+0x2c0>
    8002c7e4:	00006517          	auipc	a0,0x6
    8002c7e8:	f1450513          	addi	a0,a0,-236 # 800326f8 <__func__.0+0x310>
    8002c7ec:	4d9020ef          	jal	8002f4c4 <printf>
    8002c7f0:	bfc9                	j	8002c7c2 <m_double_trap_8+0xde>

000000008002c7f2 <m_double_trap_9>:

bool m_double_trap_9() {
    8002c7f2:	1101                	addi	sp,sp,-32

    //当执行MRET指令，返回新特权模式VS时，MDT位被设置为0，sstatus.SDT=0
    TEST_START();
    8002c7f4:	00006597          	auipc	a1,0x6
    8002c7f8:	9cc58593          	addi	a1,a1,-1588 # 800321c0 <__func__.26>
    8002c7fc:	00006517          	auipc	a0,0x6
    8002c800:	ecc50513          	addi	a0,a0,-308 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_9() {
    8002c804:	ec06                	sd	ra,24(sp)
    8002c806:	e822                	sd	s0,16(sp)
    8002c808:	e426                	sd	s1,8(sp)
    8002c80a:	e04a                	sd	s2,0(sp)
    TEST_START();
    8002c80c:	4b9020ef          	jal	8002f4c4 <printf>
    8002c810:	4529                	li	a0,10
    8002c812:	1a1010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002c816:	4511                	li	a0,4
    8002c818:	efcd40ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002c81c:	00003797          	auipc	a5,0x3
    8002c820:	55878793          	addi	a5,a5,1368 # 8002fd74 <vs_test_entry>
    8002c824:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002c828:	00003797          	auipc	a5,0x3
    8002c82c:	2c478793          	addi	a5,a5,708 # 8002faec <hs_test_entry>
    8002c830:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002c834:	00003797          	auipc	a5,0x3
    8002c838:	03078793          	addi	a5,a5,48 # 8002f864 <m_test_entry>
    8002c83c:	30579073          	csrw	mtvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002c840:	1050e073          	csrsi	stvec,1

    TEST_SETUP_EXCEPT();
    8002c844:	dd4d40ef          	jal	80000e18 <test_setup_except_function>
    printf("%llx\n",CSRR(CSR_MEDELEG));
    8002c848:	302025f3          	csrr	a1,medeleg
    8002c84c:	0000c517          	auipc	a0,0xc
    8002c850:	4b450513          	addi	a0,a0,1204 # 80038d00 <__func__.0+0x6918>
    8002c854:	471020ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);    
    8002c858:	4509                	li	a0,2

    trap=4;
    8002c85a:	4411                	li	s0,4
    goto_priv(PRIV_VS);    
    8002c85c:	eb8d40ef          	jal	80000f14 <goto_priv>
    trap=4;
    8002c860:	00030797          	auipc	a5,0x30
    8002c864:	8687ac23          	sw	s0,-1928(a5) # 8005c0d8 <trap>
    TEST_SETUP_EXCEPT();
    8002c868:	db0d40ef          	jal	80000e18 <test_setup_except_function>

    CSRW(CSR_MCONFIGPTR,0xfff); 
    8002c86c:	6785                	lui	a5,0x1
    8002c86e:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002c870:	f1579073          	csrw	0xf15,a5

    if(trap == -1) check1 = true;
    else check1 = false;


    goto_priv(PRIV_M);
    8002c874:	8522                	mv	a0,s0
    if(trap == -1) check1 = true;
    8002c876:	00030917          	auipc	s2,0x30
    8002c87a:	86292903          	lw	s2,-1950(s2) # 8005c0d8 <trap>
    goto_priv(PRIV_M);
    8002c87e:	e96d40ef          	jal	80000f14 <goto_priv>

    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002c882:	10002473          	csrr	s0,sstatus
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c886:	300024f3          	csrr	s1,mstatus

    TEST_ASSERT("当执行MRET指令，返回新特权模式VS时，MDT位被设置为0，sstatus.SDT=0",
    8002c88a:	00012617          	auipc	a2,0x12
    8002c88e:	e6660613          	addi	a2,a2,-410 # 8003e6f0 <__func__.0+0xc308>
    8002c892:	08c00593          	li	a1,140
    8002c896:	00006517          	auipc	a0,0x6
    8002c89a:	e4a50513          	addi	a0,a0,-438 # 800326e0 <__func__.0+0x2f8>
    8002c89e:	427020ef          	jal	8002f4c4 <printf>
    8002c8a2:	57fd                	li	a5,-1
    8002c8a4:	00f91a63          	bne	s2,a5,8002c8b8 <m_double_trap_9+0xc6>
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c8a8:	4785                	li	a5,1
    8002c8aa:	17aa                	slli	a5,a5,0x2a
    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002c8ac:	01000737          	lui	a4,0x1000
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c8b0:	8cfd                	and	s1,s1,a5
    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002c8b2:	8c79                	and	s0,s0,a4
    TEST_ASSERT("当执行MRET指令，返回新特权模式VS时，MDT位被设置为0，sstatus.SDT=0",
    8002c8b4:	8c45                	or	s0,s0,s1
    8002c8b6:	c031                	beqz	s0,8002c8fa <m_double_trap_9+0x108>
    8002c8b8:	00006597          	auipc	a1,0x6
    8002c8bc:	e0058593          	addi	a1,a1,-512 # 800326b8 <__func__.0+0x2d0>
    8002c8c0:	00006517          	auipc	a0,0x6
    8002c8c4:	e3850513          	addi	a0,a0,-456 # 800326f8 <__func__.0+0x310>
    8002c8c8:	3fd020ef          	jal	8002f4c4 <printf>
    8002c8cc:	00006517          	auipc	a0,0x6
    8002c8d0:	e3450513          	addi	a0,a0,-460 # 80032700 <__func__.0+0x318>
    8002c8d4:	3f1020ef          	jal	8002f4c4 <printf>
    8002c8d8:	02900513          	li	a0,41
    8002c8dc:	0d7010ef          	jal	8002e1b2 <putchar>
    8002c8e0:	4529                	li	a0,10
    8002c8e2:	0d1010ef          	jal	8002e1b2 <putchar>
        check1 &&
        check2 &&
        check3
    ); 
    trap = 0;
}
    8002c8e6:	60e2                	ld	ra,24(sp)
    8002c8e8:	6442                	ld	s0,16(sp)
    trap = 0;
    8002c8ea:	0002f797          	auipc	a5,0x2f
    8002c8ee:	7e07a723          	sw	zero,2030(a5) # 8005c0d8 <trap>
}
    8002c8f2:	64a2                	ld	s1,8(sp)
    8002c8f4:	6902                	ld	s2,0(sp)
    8002c8f6:	6105                	addi	sp,sp,32
    8002c8f8:	8082                	ret
    TEST_ASSERT("当执行MRET指令，返回新特权模式VS时，MDT位被设置为0，sstatus.SDT=0",
    8002c8fa:	00006597          	auipc	a1,0x6
    8002c8fe:	dae58593          	addi	a1,a1,-594 # 800326a8 <__func__.0+0x2c0>
    8002c902:	00006517          	auipc	a0,0x6
    8002c906:	df650513          	addi	a0,a0,-522 # 800326f8 <__func__.0+0x310>
    8002c90a:	3bb020ef          	jal	8002f4c4 <printf>
    8002c90e:	bfc9                	j	8002c8e0 <m_double_trap_9+0xee>

000000008002c910 <m_double_trap_10>:


bool m_double_trap_10() {
    8002c910:	1101                	addi	sp,sp,-32

    //当执行MNRET指令，返回新特权模式VS时，MDT位被设置为0
    TEST_START();
    8002c912:	00006597          	auipc	a1,0x6
    8002c916:	8be58593          	addi	a1,a1,-1858 # 800321d0 <__func__.25>
    8002c91a:	00006517          	auipc	a0,0x6
    8002c91e:	dae50513          	addi	a0,a0,-594 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_10() {
    8002c922:	ec06                	sd	ra,24(sp)
    8002c924:	e822                	sd	s0,16(sp)
    8002c926:	e426                	sd	s1,8(sp)
    8002c928:	e04a                	sd	s2,0(sp)
    TEST_START();
    8002c92a:	39b020ef          	jal	8002f4c4 <printf>
    8002c92e:	4529                	li	a0,10
    8002c930:	083010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002c934:	4511                	li	a0,4
    8002c936:	dded40ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002c93a:	00003797          	auipc	a5,0x3
    8002c93e:	43a78793          	addi	a5,a5,1082 # 8002fd74 <vs_test_entry>
    8002c942:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002c946:	00003797          	auipc	a5,0x3
    8002c94a:	1a678793          	addi	a5,a5,422 # 8002faec <hs_test_entry>
    8002c94e:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002c952:	00003797          	auipc	a5,0x3
    8002c956:	f1278793          	addi	a5,a5,-238 # 8002f864 <m_test_entry>
    8002c95a:	30579073          	csrw	mtvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002c95e:	1050e073          	csrsi	stvec,1

    TEST_SETUP_EXCEPT();
    8002c962:	cb6d40ef          	jal	80000e18 <test_setup_except_function>

    goto_priv(PRIV_VS);    
    8002c966:	4509                	li	a0,2

    trap=4;
    8002c968:	4411                	li	s0,4
    goto_priv(PRIV_VS);    
    8002c96a:	daad40ef          	jal	80000f14 <goto_priv>
    trap=4;
    8002c96e:	0002f797          	auipc	a5,0x2f
    8002c972:	7687a523          	sw	s0,1898(a5) # 8005c0d8 <trap>
    TEST_SETUP_EXCEPT();
    8002c976:	ca2d40ef          	jal	80000e18 <test_setup_except_function>

    CSRW(CSR_MCONFIGPTR,0xfff); 
    8002c97a:	6785                	lui	a5,0x1
    8002c97c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002c97e:	f1579073          	csrw	0xf15,a5

    if(trap == -1) check1 = true;
    else check1 = false;


    goto_priv(PRIV_M);
    8002c982:	8522                	mv	a0,s0
    if(trap == -1) check1 = true;
    8002c984:	0002f917          	auipc	s2,0x2f
    8002c988:	75492903          	lw	s2,1876(s2) # 8005c0d8 <trap>
    goto_priv(PRIV_M);
    8002c98c:	d88d40ef          	jal	80000f14 <goto_priv>

    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002c990:	10002473          	csrr	s0,sstatus
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c994:	300024f3          	csrr	s1,mstatus

    TEST_ASSERT("当执行MNRET指令，返回新特权模式VS时，MDT位被设置为0，sstatus.SDT=0",   //需要改对应.S文件
    8002c998:	00012617          	auipc	a2,0x12
    8002c99c:	db060613          	addi	a2,a2,-592 # 8003e748 <__func__.0+0xc360>
    8002c9a0:	08c00593          	li	a1,140
    8002c9a4:	00006517          	auipc	a0,0x6
    8002c9a8:	d3c50513          	addi	a0,a0,-708 # 800326e0 <__func__.0+0x2f8>
    8002c9ac:	319020ef          	jal	8002f4c4 <printf>
    8002c9b0:	57fd                	li	a5,-1
    8002c9b2:	00f91a63          	bne	s2,a5,8002c9c6 <m_double_trap_10+0xb6>
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c9b6:	4785                	li	a5,1
    8002c9b8:	17aa                	slli	a5,a5,0x2a
    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002c9ba:	01000737          	lui	a4,0x1000
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002c9be:	8cfd                	and	s1,s1,a5
    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002c9c0:	8c79                	and	s0,s0,a4
    TEST_ASSERT("当执行MNRET指令，返回新特权模式VS时，MDT位被设置为0，sstatus.SDT=0",   //需要改对应.S文件
    8002c9c2:	8c45                	or	s0,s0,s1
    8002c9c4:	c031                	beqz	s0,8002ca08 <m_double_trap_10+0xf8>
    8002c9c6:	00006597          	auipc	a1,0x6
    8002c9ca:	cf258593          	addi	a1,a1,-782 # 800326b8 <__func__.0+0x2d0>
    8002c9ce:	00006517          	auipc	a0,0x6
    8002c9d2:	d2a50513          	addi	a0,a0,-726 # 800326f8 <__func__.0+0x310>
    8002c9d6:	2ef020ef          	jal	8002f4c4 <printf>
    8002c9da:	00006517          	auipc	a0,0x6
    8002c9de:	d2650513          	addi	a0,a0,-730 # 80032700 <__func__.0+0x318>
    8002c9e2:	2e3020ef          	jal	8002f4c4 <printf>
    8002c9e6:	02900513          	li	a0,41
    8002c9ea:	7c8010ef          	jal	8002e1b2 <putchar>
    8002c9ee:	4529                	li	a0,10
    8002c9f0:	7c2010ef          	jal	8002e1b2 <putchar>
        check1 &&
        check2 &&
        check3
    ); 
    trap = 0;
}
    8002c9f4:	60e2                	ld	ra,24(sp)
    8002c9f6:	6442                	ld	s0,16(sp)
    trap = 0;
    8002c9f8:	0002f797          	auipc	a5,0x2f
    8002c9fc:	6e07a023          	sw	zero,1760(a5) # 8005c0d8 <trap>
}
    8002ca00:	64a2                	ld	s1,8(sp)
    8002ca02:	6902                	ld	s2,0(sp)
    8002ca04:	6105                	addi	sp,sp,32
    8002ca06:	8082                	ret
    TEST_ASSERT("当执行MNRET指令，返回新特权模式VS时，MDT位被设置为0，sstatus.SDT=0",   //需要改对应.S文件
    8002ca08:	00006597          	auipc	a1,0x6
    8002ca0c:	ca058593          	addi	a1,a1,-864 # 800326a8 <__func__.0+0x2c0>
    8002ca10:	00006517          	auipc	a0,0x6
    8002ca14:	ce850513          	addi	a0,a0,-792 # 800326f8 <__func__.0+0x310>
    8002ca18:	2ad020ef          	jal	8002f4c4 <printf>
    8002ca1c:	bfc9                	j	8002c9ee <m_double_trap_10+0xde>

000000008002ca1e <m_double_trap_11>:

bool m_double_trap_11() {
    8002ca1e:	1101                	addi	sp,sp,-32

    //当执行MRET指令，返回新特权模式VU时，MDT位被设置为0
    TEST_START();
    8002ca20:	00005597          	auipc	a1,0x5
    8002ca24:	7c858593          	addi	a1,a1,1992 # 800321e8 <__func__.24>
    8002ca28:	00006517          	auipc	a0,0x6
    8002ca2c:	ca050513          	addi	a0,a0,-864 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_11() {
    8002ca30:	ec06                	sd	ra,24(sp)
    8002ca32:	e822                	sd	s0,16(sp)
    8002ca34:	e426                	sd	s1,8(sp)
    TEST_START();
    8002ca36:	28f020ef          	jal	8002f4c4 <printf>
    8002ca3a:	4529                	li	a0,10
    8002ca3c:	776010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002ca40:	4511                	li	a0,4
    8002ca42:	cd2d40ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002ca46:	00003797          	auipc	a5,0x3
    8002ca4a:	32e78793          	addi	a5,a5,814 # 8002fd74 <vs_test_entry>
    8002ca4e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002ca52:	00003797          	auipc	a5,0x3
    8002ca56:	09a78793          	addi	a5,a5,154 # 8002faec <hs_test_entry>
    8002ca5a:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002ca5e:	00003797          	auipc	a5,0x3
    8002ca62:	e0678793          	addi	a5,a5,-506 # 8002f864 <m_test_entry>
    8002ca66:	30579073          	csrw	mtvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002ca6a:	1050e073          	csrsi	stvec,1

    TEST_SETUP_EXCEPT();
    8002ca6e:	baad40ef          	jal	80000e18 <test_setup_except_function>
    printf("%llx\n",CSRR(CSR_MEDELEG));
    8002ca72:	302025f3          	csrr	a1,medeleg
    8002ca76:	0000c517          	auipc	a0,0xc
    8002ca7a:	28a50513          	addi	a0,a0,650 # 80038d00 <__func__.0+0x6918>
    8002ca7e:	247020ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);    
    8002ca82:	4509                	li	a0,2

    trap=4;
    8002ca84:	4411                	li	s0,4
    goto_priv(PRIV_VS);    
    8002ca86:	c8ed40ef          	jal	80000f14 <goto_priv>
    trap=4;
    8002ca8a:	0002f797          	auipc	a5,0x2f
    8002ca8e:	6487a723          	sw	s0,1614(a5) # 8005c0d8 <trap>
    TEST_SETUP_EXCEPT();
    8002ca92:	b86d40ef          	jal	80000e18 <test_setup_except_function>

    CSRW(CSR_MCONFIGPTR,0xfff); 
    8002ca96:	6785                	lui	a5,0x1
    8002ca98:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002ca9a:	f1579073          	csrw	0xf15,a5

    if(trap == -1) check1 = true;
    else check1 = false;


    goto_priv(PRIV_M);
    8002ca9e:	8522                	mv	a0,s0
    if(trap == -1) check1 = true;
    8002caa0:	0002f417          	auipc	s0,0x2f
    8002caa4:	63842403          	lw	s0,1592(s0) # 8005c0d8 <trap>
    goto_priv(PRIV_M);
    8002caa8:	c6cd40ef          	jal	80000f14 <goto_priv>

    check3 = ((CSRR(CSR_VSSTATUS) & VSSTATUS_SDT) == 0);
    8002caac:	200027f3          	csrr	a5,vsstatus
    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002cab0:	100024f3          	csrr	s1,sstatus
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002cab4:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("当执行MRET指令，返回新特权模式VU时，MDT位被设置为0，sstatus.SDT=0，vsstatus.SDT=0",
    8002cab8:	00012617          	auipc	a2,0x12
    8002cabc:	ce860613          	addi	a2,a2,-792 # 8003e7a0 <__func__.0+0xc3b8>
    8002cac0:	08c00593          	li	a1,140
    8002cac4:	00006517          	auipc	a0,0x6
    8002cac8:	c1c50513          	addi	a0,a0,-996 # 800326e0 <__func__.0+0x2f8>
    8002cacc:	1f9020ef          	jal	8002f4c4 <printf>
    8002cad0:	57fd                	li	a5,-1
    8002cad2:	00f41663          	bne	s0,a5,8002cade <m_double_trap_11+0xc0>
    8002cad6:	02749793          	slli	a5,s1,0x27
    8002cada:	0407d263          	bgez	a5,8002cb1e <m_double_trap_11+0x100>
    8002cade:	00006597          	auipc	a1,0x6
    8002cae2:	bda58593          	addi	a1,a1,-1062 # 800326b8 <__func__.0+0x2d0>
    8002cae6:	00006517          	auipc	a0,0x6
    8002caea:	c1250513          	addi	a0,a0,-1006 # 800326f8 <__func__.0+0x310>
    8002caee:	1d7020ef          	jal	8002f4c4 <printf>
    8002caf2:	00006517          	auipc	a0,0x6
    8002caf6:	c0e50513          	addi	a0,a0,-1010 # 80032700 <__func__.0+0x318>
    8002cafa:	1cb020ef          	jal	8002f4c4 <printf>
    8002cafe:	02900513          	li	a0,41
    8002cb02:	6b0010ef          	jal	8002e1b2 <putchar>
    8002cb06:	4529                	li	a0,10
    8002cb08:	6aa010ef          	jal	8002e1b2 <putchar>
        check1 &&
        check2
    ); 
    trap = 0;
}
    8002cb0c:	60e2                	ld	ra,24(sp)
    8002cb0e:	6442                	ld	s0,16(sp)
    trap = 0;
    8002cb10:	0002f797          	auipc	a5,0x2f
    8002cb14:	5c07a423          	sw	zero,1480(a5) # 8005c0d8 <trap>
}
    8002cb18:	64a2                	ld	s1,8(sp)
    8002cb1a:	6105                	addi	sp,sp,32
    8002cb1c:	8082                	ret
    TEST_ASSERT("当执行MRET指令，返回新特权模式VU时，MDT位被设置为0，sstatus.SDT=0，vsstatus.SDT=0",
    8002cb1e:	00006597          	auipc	a1,0x6
    8002cb22:	b8a58593          	addi	a1,a1,-1142 # 800326a8 <__func__.0+0x2c0>
    8002cb26:	00006517          	auipc	a0,0x6
    8002cb2a:	bd250513          	addi	a0,a0,-1070 # 800326f8 <__func__.0+0x310>
    8002cb2e:	197020ef          	jal	8002f4c4 <printf>
    8002cb32:	bfd1                	j	8002cb06 <m_double_trap_11+0xe8>

000000008002cb34 <m_double_trap_12>:


bool m_double_trap_12() {
    8002cb34:	1101                	addi	sp,sp,-32

    //当执行MRET指令，返回新特权模式VU时，MDT位被设置为0
    TEST_START();
    8002cb36:	00005597          	auipc	a1,0x5
    8002cb3a:	6ca58593          	addi	a1,a1,1738 # 80032200 <__func__.23>
    8002cb3e:	00006517          	auipc	a0,0x6
    8002cb42:	b8a50513          	addi	a0,a0,-1142 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_12() {
    8002cb46:	ec06                	sd	ra,24(sp)
    8002cb48:	e822                	sd	s0,16(sp)
    8002cb4a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002cb4c:	179020ef          	jal	8002f4c4 <printf>
    8002cb50:	4529                	li	a0,10
    8002cb52:	660010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002cb56:	4511                	li	a0,4
    8002cb58:	bbcd40ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002cb5c:	00003797          	auipc	a5,0x3
    8002cb60:	21878793          	addi	a5,a5,536 # 8002fd74 <vs_test_entry>
    8002cb64:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002cb68:	00003797          	auipc	a5,0x3
    8002cb6c:	f8478793          	addi	a5,a5,-124 # 8002faec <hs_test_entry>
    8002cb70:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002cb74:	00003797          	auipc	a5,0x3
    8002cb78:	cf078793          	addi	a5,a5,-784 # 8002f864 <m_test_entry>
    8002cb7c:	30579073          	csrw	mtvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002cb80:	1050e073          	csrsi	stvec,1

    TEST_SETUP_EXCEPT();
    8002cb84:	a94d40ef          	jal	80000e18 <test_setup_except_function>
    printf("%llx\n",CSRR(CSR_MEDELEG));
    8002cb88:	302025f3          	csrr	a1,medeleg
    8002cb8c:	0000c517          	auipc	a0,0xc
    8002cb90:	17450513          	addi	a0,a0,372 # 80038d00 <__func__.0+0x6918>
    8002cb94:	131020ef          	jal	8002f4c4 <printf>

    goto_priv(PRIV_VS);    
    8002cb98:	4509                	li	a0,2

    trap=4;
    8002cb9a:	4411                	li	s0,4
    goto_priv(PRIV_VS);    
    8002cb9c:	b78d40ef          	jal	80000f14 <goto_priv>
    trap=4;
    8002cba0:	0002f797          	auipc	a5,0x2f
    8002cba4:	5287ac23          	sw	s0,1336(a5) # 8005c0d8 <trap>
    TEST_SETUP_EXCEPT();
    8002cba8:	a70d40ef          	jal	80000e18 <test_setup_except_function>

    CSRW(CSR_MCONFIGPTR,0xfff); 
    8002cbac:	6785                	lui	a5,0x1
    8002cbae:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002cbb0:	f1579073          	csrw	0xf15,a5

    if(trap == -1) check1 = true;
    else check1 = false;


    goto_priv(PRIV_M);
    8002cbb4:	8522                	mv	a0,s0
    if(trap == -1) check1 = true;
    8002cbb6:	0002f417          	auipc	s0,0x2f
    8002cbba:	52242403          	lw	s0,1314(s0) # 8005c0d8 <trap>
    goto_priv(PRIV_M);
    8002cbbe:	b56d40ef          	jal	80000f14 <goto_priv>

    check3 = ((CSRR(CSR_VSSTATUS) & VSSTATUS_SDT) == 0);
    8002cbc2:	200027f3          	csrr	a5,vsstatus
    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002cbc6:	100024f3          	csrr	s1,sstatus
    check3 = ((CSRR(CSR_MSTATUS) & MSTATUS_MDT) == 0);
    8002cbca:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("当执行MRET指令，返回新特权模式VU时，MDT位被设置为0，sstatus.SDT=0，vsstatus.SDT=0",    //需要改对应.S文件
    8002cbce:	00012617          	auipc	a2,0x12
    8002cbd2:	bd260613          	addi	a2,a2,-1070 # 8003e7a0 <__func__.0+0xc3b8>
    8002cbd6:	08c00593          	li	a1,140
    8002cbda:	00006517          	auipc	a0,0x6
    8002cbde:	b0650513          	addi	a0,a0,-1274 # 800326e0 <__func__.0+0x2f8>
    8002cbe2:	0e3020ef          	jal	8002f4c4 <printf>
    8002cbe6:	57fd                	li	a5,-1
    8002cbe8:	00f41663          	bne	s0,a5,8002cbf4 <m_double_trap_12+0xc0>
    8002cbec:	02749793          	slli	a5,s1,0x27
    8002cbf0:	0407d263          	bgez	a5,8002cc34 <m_double_trap_12+0x100>
    8002cbf4:	00006597          	auipc	a1,0x6
    8002cbf8:	ac458593          	addi	a1,a1,-1340 # 800326b8 <__func__.0+0x2d0>
    8002cbfc:	00006517          	auipc	a0,0x6
    8002cc00:	afc50513          	addi	a0,a0,-1284 # 800326f8 <__func__.0+0x310>
    8002cc04:	0c1020ef          	jal	8002f4c4 <printf>
    8002cc08:	00006517          	auipc	a0,0x6
    8002cc0c:	af850513          	addi	a0,a0,-1288 # 80032700 <__func__.0+0x318>
    8002cc10:	0b5020ef          	jal	8002f4c4 <printf>
    8002cc14:	02900513          	li	a0,41
    8002cc18:	59a010ef          	jal	8002e1b2 <putchar>
    8002cc1c:	4529                	li	a0,10
    8002cc1e:	594010ef          	jal	8002e1b2 <putchar>
        check1 &&
        check2
    ); 
    trap = 0;
}
    8002cc22:	60e2                	ld	ra,24(sp)
    8002cc24:	6442                	ld	s0,16(sp)
    trap = 0;
    8002cc26:	0002f797          	auipc	a5,0x2f
    8002cc2a:	4a07a923          	sw	zero,1202(a5) # 8005c0d8 <trap>
}
    8002cc2e:	64a2                	ld	s1,8(sp)
    8002cc30:	6105                	addi	sp,sp,32
    8002cc32:	8082                	ret
    TEST_ASSERT("当执行MRET指令，返回新特权模式VU时，MDT位被设置为0，sstatus.SDT=0，vsstatus.SDT=0",    //需要改对应.S文件
    8002cc34:	00006597          	auipc	a1,0x6
    8002cc38:	a7458593          	addi	a1,a1,-1420 # 800326a8 <__func__.0+0x2c0>
    8002cc3c:	00006517          	auipc	a0,0x6
    8002cc40:	abc50513          	addi	a0,a0,-1348 # 800326f8 <__func__.0+0x310>
    8002cc44:	081020ef          	jal	8002f4c4 <printf>
    8002cc48:	bfd1                	j	8002cc1c <m_double_trap_12+0xe8>

000000008002cc4a <m_double_trap_13>:



bool m_double_trap_13() {   
    8002cc4a:	1141                	addi	sp,sp,-16

    //m模式下，当mtvec.mode=vectored，未开启中断代理，发生2号软件中断，再产生异常，产生double trap  
    TEST_START();
    8002cc4c:	00005597          	auipc	a1,0x5
    8002cc50:	5cc58593          	addi	a1,a1,1484 # 80032218 <__func__.22>
    8002cc54:	00006517          	auipc	a0,0x6
    8002cc58:	a7450513          	addi	a0,a0,-1420 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_13() {   
    8002cc5c:	e406                	sd	ra,8(sp)
    TEST_START();
    8002cc5e:	067020ef          	jal	8002f4c4 <printf>
    8002cc62:	4529                	li	a0,10
    8002cc64:	54e010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002cc68:	4511                	li	a0,4
    8002cc6a:	aaad40ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MIE);
    8002cc6e:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS, MSTATUS_SIE);
    8002cc72:	30016073          	csrsi	mstatus,2

    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002cc76:	300025f3          	csrr	a1,mstatus
    8002cc7a:	00011517          	auipc	a0,0x11
    8002cc7e:	1de50513          	addi	a0,a0,478 # 8003de58 <__func__.0+0xba70>
    8002cc82:	043020ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 1);
    8002cc86:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002cc8a:	00003797          	auipc	a5,0x3
    8002cc8e:	0ea78793          	addi	a5,a5,234 # 8002fd74 <vs_test_entry>
    8002cc92:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002cc96:	00003797          	auipc	a5,0x3
    8002cc9a:	e5678793          	addi	a5,a5,-426 # 8002faec <hs_test_entry>
    8002cc9e:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002cca2:	00003797          	auipc	a5,0x3
    8002cca6:	bc278793          	addi	a5,a5,-1086 # 8002f864 <m_test_entry>
    8002ccaa:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002ccae:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002ccb2:	305025f3          	csrr	a1,mtvec
    8002ccb6:	00011517          	auipc	a0,0x11
    8002ccba:	1b250513          	addi	a0,a0,434 # 8003de68 <__func__.0+0xba80>
    8002ccbe:	007020ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002ccc2:	956d40ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002ccc6:	00011517          	auipc	a0,0x11
    8002ccca:	1b250513          	addi	a0,a0,434 # 8003de78 <__func__.0+0xba90>
    8002ccce:	7f6020ef          	jal	8002f4c4 <printf>
    trap = 2;
    8002ccd2:	4709                	li	a4,2
    double_trap_enabled = true;    //用来控制handler中的处理
    8002ccd4:	4785                	li	a5,1
    trap = 2;
    8002ccd6:	0002f697          	auipc	a3,0x2f
    8002ccda:	40e6a123          	sw	a4,1026(a3) # 8005c0d8 <trap>
    double_trap_enabled = true;    //用来控制handler中的处理
    8002ccde:	0002f717          	auipc	a4,0x2f
    8002cce2:	3ef70923          	sb	a5,1010(a4) # 8005c0d0 <double_trap_enabled>
    CSRS(mip, 1ULL << 1);
    8002cce6:	34416073          	csrsi	mip,2

    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断处理过程中产生一个非法指令异常",
    8002ccea:	08c00593          	li	a1,140
    8002ccee:	00012617          	auipc	a2,0x12
    8002ccf2:	b1a60613          	addi	a2,a2,-1254 # 8003e808 <__func__.0+0xc420>
    8002ccf6:	00006517          	auipc	a0,0x6
    8002ccfa:	9ea50513          	addi	a0,a0,-1558 # 800326e0 <__func__.0+0x2f8>
    8002ccfe:	7c6020ef          	jal	8002f4c4 <printf>
    8002cd02:	0002f797          	auipc	a5,0x2f
    8002cd06:	30f7c783          	lbu	a5,783(a5) # 8005c011 <excpt+0x1>
    8002cd0a:	00006597          	auipc	a1,0x6
    8002cd0e:	99e58593          	addi	a1,a1,-1634 # 800326a8 <__func__.0+0x2c0>
    8002cd12:	e789                	bnez	a5,8002cd1c <m_double_trap_13+0xd2>
    8002cd14:	00006597          	auipc	a1,0x6
    8002cd18:	9a458593          	addi	a1,a1,-1628 # 800326b8 <__func__.0+0x2d0>
    8002cd1c:	00006517          	auipc	a0,0x6
    8002cd20:	9dc50513          	addi	a0,a0,-1572 # 800326f8 <__func__.0+0x310>
    8002cd24:	7a0020ef          	jal	8002f4c4 <printf>
    8002cd28:	0002f797          	auipc	a5,0x2f
    8002cd2c:	2e97c783          	lbu	a5,745(a5) # 8005c011 <excpt+0x1>
    8002cd30:	c799                	beqz	a5,8002cd3e <m_double_trap_13+0xf4>
    8002cd32:	4529                	li	a0,10
    8002cd34:	47e010ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002cd38:	60a2                	ld	ra,8(sp)
    8002cd3a:	0141                	addi	sp,sp,16
    8002cd3c:	8082                	ret
    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断处理过程中产生一个非法指令异常",
    8002cd3e:	00006517          	auipc	a0,0x6
    8002cd42:	9c250513          	addi	a0,a0,-1598 # 80032700 <__func__.0+0x318>
    8002cd46:	77e020ef          	jal	8002f4c4 <printf>
    8002cd4a:	02900513          	li	a0,41
    8002cd4e:	464010ef          	jal	8002e1b2 <putchar>
    8002cd52:	4529                	li	a0,10
    8002cd54:	45e010ef          	jal	8002e1b2 <putchar>
}
    8002cd58:	60a2                	ld	ra,8(sp)
    8002cd5a:	0141                	addi	sp,sp,16
    8002cd5c:	8082                	ret

000000008002cd5e <m_double_trap_14>:

bool m_double_trap_14() {
    8002cd5e:	1141                	addi	sp,sp,-16

    //m模式下，当mtvec.mode=vectored，未开启中断代理，发生2号软件中断，再产生其他类型中断，产生double trap  
    TEST_START();
    8002cd60:	00005597          	auipc	a1,0x5
    8002cd64:	4d058593          	addi	a1,a1,1232 # 80032230 <__func__.21>
    8002cd68:	00006517          	auipc	a0,0x6
    8002cd6c:	96050513          	addi	a0,a0,-1696 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_14() {
    8002cd70:	e406                	sd	ra,8(sp)
    TEST_START();
    8002cd72:	752020ef          	jal	8002f4c4 <printf>
    8002cd76:	4529                	li	a0,10
    8002cd78:	43a010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002cd7c:	4511                	li	a0,4
    8002cd7e:	996d40ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MIE);
    8002cd82:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS, MSTATUS_SIE);
    8002cd86:	30016073          	csrsi	mstatus,2

    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002cd8a:	300025f3          	csrr	a1,mstatus
    8002cd8e:	00011517          	auipc	a0,0x11
    8002cd92:	0ca50513          	addi	a0,a0,202 # 8003de58 <__func__.0+0xba70>
    8002cd96:	72e020ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 1);
    8002cd9a:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002cd9e:	00003797          	auipc	a5,0x3
    8002cda2:	fd678793          	addi	a5,a5,-42 # 8002fd74 <vs_test_entry>
    8002cda6:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002cdaa:	00003797          	auipc	a5,0x3
    8002cdae:	d4278793          	addi	a5,a5,-702 # 8002faec <hs_test_entry>
    8002cdb2:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002cdb6:	00003797          	auipc	a5,0x3
    8002cdba:	aae78793          	addi	a5,a5,-1362 # 8002f864 <m_test_entry>
    8002cdbe:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002cdc2:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002cdc6:	305025f3          	csrr	a1,mtvec
    8002cdca:	00011517          	auipc	a0,0x11
    8002cdce:	09e50513          	addi	a0,a0,158 # 8003de68 <__func__.0+0xba80>
    8002cdd2:	6f2020ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002cdd6:	842d40ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002cdda:	00011517          	auipc	a0,0x11
    8002cdde:	09e50513          	addi	a0,a0,158 # 8003de78 <__func__.0+0xba90>
    8002cde2:	6e2020ef          	jal	8002f4c4 <printf>
    trap = 1;
    8002cde6:	4785                	li	a5,1
    8002cde8:	0002f717          	auipc	a4,0x2f
    8002cdec:	2ef72823          	sw	a5,752(a4) # 8005c0d8 <trap>
    double_trap_enabled = true;    //用来控制handler中的处理
    8002cdf0:	0002f717          	auipc	a4,0x2f
    8002cdf4:	2ef70023          	sb	a5,736(a4) # 8005c0d0 <double_trap_enabled>
    CSRS(mip, 1ULL << 1);
    8002cdf8:	34416073          	csrsi	mip,2

    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断处理过程中产生一个其他类型中断",
    8002cdfc:	08c00593          	li	a1,140
    8002ce00:	00012617          	auipc	a2,0x12
    8002ce04:	a8860613          	addi	a2,a2,-1400 # 8003e888 <__func__.0+0xc4a0>
    8002ce08:	00006517          	auipc	a0,0x6
    8002ce0c:	8d850513          	addi	a0,a0,-1832 # 800326e0 <__func__.0+0x2f8>
    8002ce10:	6b4020ef          	jal	8002f4c4 <printf>
    8002ce14:	0002f797          	auipc	a5,0x2f
    8002ce18:	1fd7c783          	lbu	a5,509(a5) # 8005c011 <excpt+0x1>
    8002ce1c:	00006597          	auipc	a1,0x6
    8002ce20:	88c58593          	addi	a1,a1,-1908 # 800326a8 <__func__.0+0x2c0>
    8002ce24:	e789                	bnez	a5,8002ce2e <m_double_trap_14+0xd0>
    8002ce26:	00006597          	auipc	a1,0x6
    8002ce2a:	89258593          	addi	a1,a1,-1902 # 800326b8 <__func__.0+0x2d0>
    8002ce2e:	00006517          	auipc	a0,0x6
    8002ce32:	8ca50513          	addi	a0,a0,-1846 # 800326f8 <__func__.0+0x310>
    8002ce36:	68e020ef          	jal	8002f4c4 <printf>
    8002ce3a:	0002f797          	auipc	a5,0x2f
    8002ce3e:	1d77c783          	lbu	a5,471(a5) # 8005c011 <excpt+0x1>
    8002ce42:	c799                	beqz	a5,8002ce50 <m_double_trap_14+0xf2>
    8002ce44:	4529                	li	a0,10
    8002ce46:	36c010ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002ce4a:	60a2                	ld	ra,8(sp)
    8002ce4c:	0141                	addi	sp,sp,16
    8002ce4e:	8082                	ret
    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断处理过程中产生一个其他类型中断",
    8002ce50:	00006517          	auipc	a0,0x6
    8002ce54:	8b050513          	addi	a0,a0,-1872 # 80032700 <__func__.0+0x318>
    8002ce58:	66c020ef          	jal	8002f4c4 <printf>
    8002ce5c:	02900513          	li	a0,41
    8002ce60:	352010ef          	jal	8002e1b2 <putchar>
    8002ce64:	4529                	li	a0,10
    8002ce66:	34c010ef          	jal	8002e1b2 <putchar>
}
    8002ce6a:	60a2                	ld	ra,8(sp)
    8002ce6c:	0141                	addi	sp,sp,16
    8002ce6e:	8082                	ret

000000008002ce70 <m_double_trap_15>:

bool m_double_trap_15() {
    8002ce70:	1141                	addi	sp,sp,-16

    //m模式下，当mtvec.mode=vectored，未开启异常代理，发生异常，再产生中断，产生double trap  
    TEST_START();
    8002ce72:	00005597          	auipc	a1,0x5
    8002ce76:	3d658593          	addi	a1,a1,982 # 80032248 <__func__.20>
    8002ce7a:	00006517          	auipc	a0,0x6
    8002ce7e:	84e50513          	addi	a0,a0,-1970 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_15() {
    8002ce82:	e406                	sd	ra,8(sp)
    TEST_START();
    8002ce84:	640020ef          	jal	8002f4c4 <printf>
    8002ce88:	4529                	li	a0,10
    8002ce8a:	328010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002ce8e:	4511                	li	a0,4
    8002ce90:	884d40ef          	jal	80000f14 <goto_priv>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002ce94:	00003797          	auipc	a5,0x3
    8002ce98:	ee078793          	addi	a5,a5,-288 # 8002fd74 <vs_test_entry>
    8002ce9c:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002cea0:	00003797          	auipc	a5,0x3
    8002cea4:	c4c78793          	addi	a5,a5,-948 # 8002faec <hs_test_entry>
    8002cea8:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002ceac:	00003797          	auipc	a5,0x3
    8002ceb0:	9b878793          	addi	a5,a5,-1608 # 8002f864 <m_test_entry>
    8002ceb4:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002ceb8:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002cebc:	305025f3          	csrr	a1,mtvec
    8002cec0:	00011517          	auipc	a0,0x11
    8002cec4:	fa850513          	addi	a0,a0,-88 # 8003de68 <__func__.0+0xba80>
    8002cec8:	5fc020ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002cecc:	f4dd30ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002ced0:	00011517          	auipc	a0,0x11
    8002ced4:	fa850513          	addi	a0,a0,-88 # 8003de78 <__func__.0+0xba90>
    8002ced8:	5ec020ef          	jal	8002f4c4 <printf>
    trap = 1;
    8002cedc:	4705                	li	a4,1
    double_trap_enabled = true;    //用来控制handler中的处理
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002cede:	6785                	lui	a5,0x1
    trap = 1;
    8002cee0:	0002f697          	auipc	a3,0x2f
    8002cee4:	1ee6ac23          	sw	a4,504(a3) # 8005c0d8 <trap>
    double_trap_enabled = true;    //用来控制handler中的处理
    8002cee8:	0002f697          	auipc	a3,0x2f
    8002ceec:	1ee68423          	sb	a4,488(a3) # 8005c0d0 <double_trap_enabled>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002cef0:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002cef2:	f1579073          	csrw	0xf15,a5

    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启异常代理,产生一个非法指令异常处理过程中产生2号软件中断",
    8002cef6:	08c00593          	li	a1,140
    8002cefa:	00012617          	auipc	a2,0x12
    8002cefe:	a0e60613          	addi	a2,a2,-1522 # 8003e908 <__func__.0+0xc520>
    8002cf02:	00005517          	auipc	a0,0x5
    8002cf06:	7de50513          	addi	a0,a0,2014 # 800326e0 <__func__.0+0x2f8>
    8002cf0a:	5ba020ef          	jal	8002f4c4 <printf>
    8002cf0e:	0002f797          	auipc	a5,0x2f
    8002cf12:	1037c783          	lbu	a5,259(a5) # 8005c011 <excpt+0x1>
    8002cf16:	00005597          	auipc	a1,0x5
    8002cf1a:	79258593          	addi	a1,a1,1938 # 800326a8 <__func__.0+0x2c0>
    8002cf1e:	e789                	bnez	a5,8002cf28 <m_double_trap_15+0xb8>
    8002cf20:	00005597          	auipc	a1,0x5
    8002cf24:	79858593          	addi	a1,a1,1944 # 800326b8 <__func__.0+0x2d0>
    8002cf28:	00005517          	auipc	a0,0x5
    8002cf2c:	7d050513          	addi	a0,a0,2000 # 800326f8 <__func__.0+0x310>
    8002cf30:	594020ef          	jal	8002f4c4 <printf>
    8002cf34:	0002f797          	auipc	a5,0x2f
    8002cf38:	0dd7c783          	lbu	a5,221(a5) # 8005c011 <excpt+0x1>
    8002cf3c:	c799                	beqz	a5,8002cf4a <m_double_trap_15+0xda>
    8002cf3e:	4529                	li	a0,10
    8002cf40:	272010ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002cf44:	60a2                	ld	ra,8(sp)
    8002cf46:	0141                	addi	sp,sp,16
    8002cf48:	8082                	ret
    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启异常代理,产生一个非法指令异常处理过程中产生2号软件中断",
    8002cf4a:	00005517          	auipc	a0,0x5
    8002cf4e:	7b650513          	addi	a0,a0,1974 # 80032700 <__func__.0+0x318>
    8002cf52:	572020ef          	jal	8002f4c4 <printf>
    8002cf56:	02900513          	li	a0,41
    8002cf5a:	258010ef          	jal	8002e1b2 <putchar>
    8002cf5e:	4529                	li	a0,10
    8002cf60:	252010ef          	jal	8002e1b2 <putchar>
}
    8002cf64:	60a2                	ld	ra,8(sp)
    8002cf66:	0141                	addi	sp,sp,16
    8002cf68:	8082                	ret

000000008002cf6a <m_double_trap_16>:

bool m_double_trap_16() {
    8002cf6a:	1141                	addi	sp,sp,-16

    //m模式下，当mtvec.mode=vectored，未开启异常代理，发生异常，再产生异常，产生double trap  
    TEST_START();
    8002cf6c:	00005597          	auipc	a1,0x5
    8002cf70:	2f458593          	addi	a1,a1,756 # 80032260 <__func__.19>
    8002cf74:	00005517          	auipc	a0,0x5
    8002cf78:	75450513          	addi	a0,a0,1876 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_16() {
    8002cf7c:	e406                	sd	ra,8(sp)
    TEST_START();
    8002cf7e:	546020ef          	jal	8002f4c4 <printf>
    8002cf82:	4529                	li	a0,10
    8002cf84:	22e010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002cf88:	4511                	li	a0,4
    8002cf8a:	f8bd30ef          	jal	80000f14 <goto_priv>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002cf8e:	00003797          	auipc	a5,0x3
    8002cf92:	de678793          	addi	a5,a5,-538 # 8002fd74 <vs_test_entry>
    8002cf96:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002cf9a:	00003797          	auipc	a5,0x3
    8002cf9e:	b5278793          	addi	a5,a5,-1198 # 8002faec <hs_test_entry>
    8002cfa2:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002cfa6:	00003797          	auipc	a5,0x3
    8002cfaa:	8be78793          	addi	a5,a5,-1858 # 8002f864 <m_test_entry>
    8002cfae:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002cfb2:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002cfb6:	305025f3          	csrr	a1,mtvec
    8002cfba:	00011517          	auipc	a0,0x11
    8002cfbe:	eae50513          	addi	a0,a0,-338 # 8003de68 <__func__.0+0xba80>
    8002cfc2:	502020ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002cfc6:	e53d30ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002cfca:	00011517          	auipc	a0,0x11
    8002cfce:	eae50513          	addi	a0,a0,-338 # 8003de78 <__func__.0+0xba90>
    8002cfd2:	4f2020ef          	jal	8002f4c4 <printf>
    trap = 2;
    8002cfd6:	4689                	li	a3,2
    double_trap_enabled = true;    //用来控制handler中的处理
    8002cfd8:	4705                	li	a4,1
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002cfda:	6785                	lui	a5,0x1
    trap = 2;
    8002cfdc:	0002f617          	auipc	a2,0x2f
    8002cfe0:	0ed62e23          	sw	a3,252(a2) # 8005c0d8 <trap>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002cfe4:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    double_trap_enabled = true;    //用来控制handler中的处理
    8002cfe6:	0002f697          	auipc	a3,0x2f
    8002cfea:	0ee68523          	sb	a4,234(a3) # 8005c0d0 <double_trap_enabled>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002cfee:	f1579073          	csrw	0xf15,a5

    TEST_ASSERT("m模式下,当mtvec.mode=vectored,未开启异常代理,发生异常,再产生异常,产生double trap",
    8002cff2:	08c00593          	li	a1,140
    8002cff6:	00012617          	auipc	a2,0x12
    8002cffa:	99260613          	addi	a2,a2,-1646 # 8003e988 <__func__.0+0xc5a0>
    8002cffe:	00005517          	auipc	a0,0x5
    8002d002:	6e250513          	addi	a0,a0,1762 # 800326e0 <__func__.0+0x2f8>
    8002d006:	4be020ef          	jal	8002f4c4 <printf>
    8002d00a:	0002f797          	auipc	a5,0x2f
    8002d00e:	0077c783          	lbu	a5,7(a5) # 8005c011 <excpt+0x1>
    8002d012:	00005597          	auipc	a1,0x5
    8002d016:	69658593          	addi	a1,a1,1686 # 800326a8 <__func__.0+0x2c0>
    8002d01a:	e789                	bnez	a5,8002d024 <m_double_trap_16+0xba>
    8002d01c:	00005597          	auipc	a1,0x5
    8002d020:	69c58593          	addi	a1,a1,1692 # 800326b8 <__func__.0+0x2d0>
    8002d024:	00005517          	auipc	a0,0x5
    8002d028:	6d450513          	addi	a0,a0,1748 # 800326f8 <__func__.0+0x310>
    8002d02c:	498020ef          	jal	8002f4c4 <printf>
    8002d030:	0002f797          	auipc	a5,0x2f
    8002d034:	fe17c783          	lbu	a5,-31(a5) # 8005c011 <excpt+0x1>
    8002d038:	c799                	beqz	a5,8002d046 <m_double_trap_16+0xdc>
    8002d03a:	4529                	li	a0,10
    8002d03c:	176010ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002d040:	60a2                	ld	ra,8(sp)
    8002d042:	0141                	addi	sp,sp,16
    8002d044:	8082                	ret
    TEST_ASSERT("m模式下,当mtvec.mode=vectored,未开启异常代理,发生异常,再产生异常,产生double trap",
    8002d046:	00005517          	auipc	a0,0x5
    8002d04a:	6ba50513          	addi	a0,a0,1722 # 80032700 <__func__.0+0x318>
    8002d04e:	476020ef          	jal	8002f4c4 <printf>
    8002d052:	02900513          	li	a0,41
    8002d056:	15c010ef          	jal	8002e1b2 <putchar>
    8002d05a:	4529                	li	a0,10
    8002d05c:	156010ef          	jal	8002e1b2 <putchar>
}
    8002d060:	60a2                	ld	ra,8(sp)
    8002d062:	0141                	addi	sp,sp,16
    8002d064:	8082                	ret

000000008002d066 <m_double_trap_17>:

bool m_double_trap_17() {
    8002d066:	1141                	addi	sp,sp,-16

    //当发生陷阱异常需进入 M-mode 时，若当前 MDT = 1 ,则视为 意外陷阱（Unexpected Trap），触发双陷阱处理机制。
    TEST_START();
    8002d068:	00005597          	auipc	a1,0x5
    8002d06c:	21058593          	addi	a1,a1,528 # 80032278 <__func__.18>
    8002d070:	00005517          	auipc	a0,0x5
    8002d074:	65850513          	addi	a0,a0,1624 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_17() {
    8002d078:	e406                	sd	ra,8(sp)
    TEST_START();
    8002d07a:	44a020ef          	jal	8002f4c4 <printf>
    8002d07e:	4529                	li	a0,10
    8002d080:	132010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002d084:	4511                	li	a0,4
    8002d086:	e8fd30ef          	jal	80000f14 <goto_priv>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002d08a:	00003797          	auipc	a5,0x3
    8002d08e:	cea78793          	addi	a5,a5,-790 # 8002fd74 <vs_test_entry>
    8002d092:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002d096:	00003797          	auipc	a5,0x3
    8002d09a:	a5678793          	addi	a5,a5,-1450 # 8002faec <hs_test_entry>
    8002d09e:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002d0a2:	00002797          	auipc	a5,0x2
    8002d0a6:	7c278793          	addi	a5,a5,1986 # 8002f864 <m_test_entry>
    8002d0aa:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002d0ae:	3050e073          	csrsi	mtvec,1
    CSRS(CSR_MSTATUS , MSTATUS_MDT);
    8002d0b2:	4785                	li	a5,1
    8002d0b4:	17aa                	slli	a5,a5,0x2a
    8002d0b6:	3007a073          	csrs	mstatus,a5
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002d0ba:	305025f3          	csrr	a1,mtvec
    8002d0be:	00011517          	auipc	a0,0x11
    8002d0c2:	daa50513          	addi	a0,a0,-598 # 8003de68 <__func__.0+0xba80>
    8002d0c6:	3fe020ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002d0ca:	d4fd30ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002d0ce:	00011517          	auipc	a0,0x11
    8002d0d2:	daa50513          	addi	a0,a0,-598 # 8003de78 <__func__.0+0xba90>
    8002d0d6:	3ee020ef          	jal	8002f4c4 <printf>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002d0da:	6785                	lui	a5,0x1
    8002d0dc:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002d0de:	f1579073          	csrw	0xf15,a5

    TEST_ASSERT("当发生异常需进入 M-mode 时，若当前 MDT = 1 ,结果发生unexpected trap",
    8002d0e2:	08c00593          	li	a1,140
    8002d0e6:	00012617          	auipc	a2,0x12
    8002d0ea:	90a60613          	addi	a2,a2,-1782 # 8003e9f0 <__func__.0+0xc608>
    8002d0ee:	00005517          	auipc	a0,0x5
    8002d0f2:	5f250513          	addi	a0,a0,1522 # 800326e0 <__func__.0+0x2f8>
    8002d0f6:	3ce020ef          	jal	8002f4c4 <printf>
    8002d0fa:	0002f797          	auipc	a5,0x2f
    8002d0fe:	f177c783          	lbu	a5,-233(a5) # 8005c011 <excpt+0x1>
    8002d102:	00005597          	auipc	a1,0x5
    8002d106:	5a658593          	addi	a1,a1,1446 # 800326a8 <__func__.0+0x2c0>
    8002d10a:	e789                	bnez	a5,8002d114 <m_double_trap_17+0xae>
    8002d10c:	00005597          	auipc	a1,0x5
    8002d110:	5ac58593          	addi	a1,a1,1452 # 800326b8 <__func__.0+0x2d0>
    8002d114:	00005517          	auipc	a0,0x5
    8002d118:	5e450513          	addi	a0,a0,1508 # 800326f8 <__func__.0+0x310>
    8002d11c:	3a8020ef          	jal	8002f4c4 <printf>
    8002d120:	0002f797          	auipc	a5,0x2f
    8002d124:	ef17c783          	lbu	a5,-271(a5) # 8005c011 <excpt+0x1>
    8002d128:	c799                	beqz	a5,8002d136 <m_double_trap_17+0xd0>
    8002d12a:	4529                	li	a0,10
    8002d12c:	086010ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002d130:	60a2                	ld	ra,8(sp)
    8002d132:	0141                	addi	sp,sp,16
    8002d134:	8082                	ret
    TEST_ASSERT("当发生异常需进入 M-mode 时，若当前 MDT = 1 ,结果发生unexpected trap",
    8002d136:	00005517          	auipc	a0,0x5
    8002d13a:	5ca50513          	addi	a0,a0,1482 # 80032700 <__func__.0+0x318>
    8002d13e:	386020ef          	jal	8002f4c4 <printf>
    8002d142:	02900513          	li	a0,41
    8002d146:	06c010ef          	jal	8002e1b2 <putchar>
    8002d14a:	4529                	li	a0,10
    8002d14c:	066010ef          	jal	8002e1b2 <putchar>
}
    8002d150:	60a2                	ld	ra,8(sp)
    8002d152:	0141                	addi	sp,sp,16
    8002d154:	8082                	ret

000000008002d156 <m_double_trap_18>:


bool m_double_trap_18() {
    8002d156:	1141                	addi	sp,sp,-16

    //当发生陷阱中断需进入 M-mode 时，若当前 MDT = 1 ,则视为 意外陷阱（Unexpected Trap），触发双陷阱处理机制。
    TEST_START();
    8002d158:	00005597          	auipc	a1,0x5
    8002d15c:	13858593          	addi	a1,a1,312 # 80032290 <__func__.17>
    8002d160:	00005517          	auipc	a0,0x5
    8002d164:	56850513          	addi	a0,a0,1384 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_18() {
    8002d168:	e406                	sd	ra,8(sp)
    TEST_START();
    8002d16a:	35a020ef          	jal	8002f4c4 <printf>
    8002d16e:	4529                	li	a0,10
    8002d170:	042010ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002d174:	4511                	li	a0,4
    8002d176:	d9fd30ef          	jal	80000f14 <goto_priv>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002d17a:	00003797          	auipc	a5,0x3
    8002d17e:	bfa78793          	addi	a5,a5,-1030 # 8002fd74 <vs_test_entry>
    8002d182:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002d186:	00003797          	auipc	a5,0x3
    8002d18a:	96678793          	addi	a5,a5,-1690 # 8002faec <hs_test_entry>
    8002d18e:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002d192:	00002797          	auipc	a5,0x2
    8002d196:	6d278793          	addi	a5,a5,1746 # 8002f864 <m_test_entry>
    8002d19a:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002d19e:	3050e073          	csrsi	mtvec,1
    CSRS(CSR_MSTATUS, MSTATUS_MIE);
    8002d1a2:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS, MSTATUS_SIE);
    8002d1a6:	30016073          	csrsi	mstatus,2
    CSRS(CSR_MSTATUS , MSTATUS_MDT);
    8002d1aa:	4785                	li	a5,1
    8002d1ac:	17aa                	slli	a5,a5,0x2a
    8002d1ae:	3007a073          	csrs	mstatus,a5

    CSRS(mie, 1ULL << 1);
    8002d1b2:	30416073          	csrsi	mie,2
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002d1b6:	305025f3          	csrr	a1,mtvec
    8002d1ba:	00011517          	auipc	a0,0x11
    8002d1be:	cae50513          	addi	a0,a0,-850 # 8003de68 <__func__.0+0xba80>
    8002d1c2:	302020ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002d1c6:	c53d30ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002d1ca:	00011517          	auipc	a0,0x11
    8002d1ce:	cae50513          	addi	a0,a0,-850 # 8003de78 <__func__.0+0xba90>
    8002d1d2:	2f2020ef          	jal	8002f4c4 <printf>
    CSRS(mip, 1ULL << 1);
    8002d1d6:	34416073          	csrsi	mip,2

    TEST_ASSERT("当发生中断需进入 M-mode 时，若当前 MDT = 1 ,结果发生unexpected trap",
    8002d1da:	08c00593          	li	a1,140
    8002d1de:	00012617          	auipc	a2,0x12
    8002d1e2:	86a60613          	addi	a2,a2,-1942 # 8003ea48 <__func__.0+0xc660>
    8002d1e6:	00005517          	auipc	a0,0x5
    8002d1ea:	4fa50513          	addi	a0,a0,1274 # 800326e0 <__func__.0+0x2f8>
    8002d1ee:	2d6020ef          	jal	8002f4c4 <printf>
    8002d1f2:	0002f797          	auipc	a5,0x2f
    8002d1f6:	e1f7c783          	lbu	a5,-481(a5) # 8005c011 <excpt+0x1>
    8002d1fa:	00005597          	auipc	a1,0x5
    8002d1fe:	4ae58593          	addi	a1,a1,1198 # 800326a8 <__func__.0+0x2c0>
    8002d202:	e789                	bnez	a5,8002d20c <m_double_trap_18+0xb6>
    8002d204:	00005597          	auipc	a1,0x5
    8002d208:	4b458593          	addi	a1,a1,1204 # 800326b8 <__func__.0+0x2d0>
    8002d20c:	00005517          	auipc	a0,0x5
    8002d210:	4ec50513          	addi	a0,a0,1260 # 800326f8 <__func__.0+0x310>
    8002d214:	2b0020ef          	jal	8002f4c4 <printf>
    8002d218:	0002f797          	auipc	a5,0x2f
    8002d21c:	df97c783          	lbu	a5,-519(a5) # 8005c011 <excpt+0x1>
    8002d220:	c799                	beqz	a5,8002d22e <m_double_trap_18+0xd8>
    8002d222:	4529                	li	a0,10
    8002d224:	78f000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002d228:	60a2                	ld	ra,8(sp)
    8002d22a:	0141                	addi	sp,sp,16
    8002d22c:	8082                	ret
    TEST_ASSERT("当发生中断需进入 M-mode 时，若当前 MDT = 1 ,结果发生unexpected trap",
    8002d22e:	00005517          	auipc	a0,0x5
    8002d232:	4d250513          	addi	a0,a0,1234 # 80032700 <__func__.0+0x318>
    8002d236:	28e020ef          	jal	8002f4c4 <printf>
    8002d23a:	02900513          	li	a0,41
    8002d23e:	775000ef          	jal	8002e1b2 <putchar>
    8002d242:	4529                	li	a0,10
    8002d244:	76f000ef          	jal	8002e1b2 <putchar>
}
    8002d248:	60a2                	ld	ra,8(sp)
    8002d24a:	0141                	addi	sp,sp,16
    8002d24c:	8082                	ret

000000008002d24e <m_double_trap_19>:


bool m_double_trap_19() {
    8002d24e:	1141                	addi	sp,sp,-16

    //实现smrnmi扩展(才有RNMI)，若在 M-mode 中执行且 mnstatus.NMIE = 0，任何陷阱均视为unexpected trap
    TEST_START();
    8002d250:	00005597          	auipc	a1,0x5
    8002d254:	05858593          	addi	a1,a1,88 # 800322a8 <__func__.16>
    8002d258:	00005517          	auipc	a0,0x5
    8002d25c:	47050513          	addi	a0,a0,1136 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_19() {
    8002d260:	e406                	sd	ra,8(sp)
    TEST_START();
    8002d262:	262020ef          	jal	8002f4c4 <printf>
    8002d266:	4529                	li	a0,10
    8002d268:	74b000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002d26c:	4511                	li	a0,4
    8002d26e:	ca7d30ef          	jal	80000f14 <goto_priv>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002d272:	00003797          	auipc	a5,0x3
    8002d276:	b0278793          	addi	a5,a5,-1278 # 8002fd74 <vs_test_entry>
    8002d27a:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002d27e:	00003797          	auipc	a5,0x3
    8002d282:	86e78793          	addi	a5,a5,-1938 # 8002faec <hs_test_entry>
    8002d286:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002d28a:	00002797          	auipc	a5,0x2
    8002d28e:	5da78793          	addi	a5,a5,1498 # 8002f864 <m_test_entry>
    8002d292:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002d296:	3050e073          	csrsi	mtvec,1
    CSRS(CSR_MSTATUS, MSTATUS_MIE);
    8002d29a:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS, MSTATUS_SIE);
    8002d29e:	30016073          	csrsi	mstatus,2
    CSRC(CSR_MNSTATUS , MNSTATUS_NMIE);
    8002d2a2:	74447073          	csrci	0x744,8
    CSRS(mie, 1ULL << 1);
    8002d2a6:	30416073          	csrsi	mie,2
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002d2aa:	305025f3          	csrr	a1,mtvec
    8002d2ae:	00011517          	auipc	a0,0x11
    8002d2b2:	bba50513          	addi	a0,a0,-1094 # 8003de68 <__func__.0+0xba80>
    8002d2b6:	20e020ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002d2ba:	b5fd30ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002d2be:	00011517          	auipc	a0,0x11
    8002d2c2:	bba50513          	addi	a0,a0,-1094 # 8003de78 <__func__.0+0xba90>
    8002d2c6:	1fe020ef          	jal	8002f4c4 <printf>
    CSRS(mip, 1ULL << 1);
    8002d2ca:	34416073          	csrsi	mip,2

    TEST_ASSERT("实现smrnmi扩展,若在 M-mode 中执行且 mnstatus.NMIE = 0,中断视为unexpected trap",
    8002d2ce:	08c00593          	li	a1,140
    8002d2d2:	00011617          	auipc	a2,0x11
    8002d2d6:	7ce60613          	addi	a2,a2,1998 # 8003eaa0 <__func__.0+0xc6b8>
    8002d2da:	00005517          	auipc	a0,0x5
    8002d2de:	40650513          	addi	a0,a0,1030 # 800326e0 <__func__.0+0x2f8>
    8002d2e2:	1e2020ef          	jal	8002f4c4 <printf>
    8002d2e6:	0002f797          	auipc	a5,0x2f
    8002d2ea:	d2b7c783          	lbu	a5,-725(a5) # 8005c011 <excpt+0x1>
    8002d2ee:	00005597          	auipc	a1,0x5
    8002d2f2:	3ba58593          	addi	a1,a1,954 # 800326a8 <__func__.0+0x2c0>
    8002d2f6:	e789                	bnez	a5,8002d300 <m_double_trap_19+0xb2>
    8002d2f8:	00005597          	auipc	a1,0x5
    8002d2fc:	3c058593          	addi	a1,a1,960 # 800326b8 <__func__.0+0x2d0>
    8002d300:	00005517          	auipc	a0,0x5
    8002d304:	3f850513          	addi	a0,a0,1016 # 800326f8 <__func__.0+0x310>
    8002d308:	1bc020ef          	jal	8002f4c4 <printf>
    8002d30c:	0002f797          	auipc	a5,0x2f
    8002d310:	d057c783          	lbu	a5,-763(a5) # 8005c011 <excpt+0x1>
    8002d314:	c799                	beqz	a5,8002d322 <m_double_trap_19+0xd4>
    8002d316:	4529                	li	a0,10
    8002d318:	69b000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002d31c:	60a2                	ld	ra,8(sp)
    8002d31e:	0141                	addi	sp,sp,16
    8002d320:	8082                	ret
    TEST_ASSERT("实现smrnmi扩展,若在 M-mode 中执行且 mnstatus.NMIE = 0,中断视为unexpected trap",
    8002d322:	00005517          	auipc	a0,0x5
    8002d326:	3de50513          	addi	a0,a0,990 # 80032700 <__func__.0+0x318>
    8002d32a:	19a020ef          	jal	8002f4c4 <printf>
    8002d32e:	02900513          	li	a0,41
    8002d332:	681000ef          	jal	8002e1b2 <putchar>
    8002d336:	4529                	li	a0,10
    8002d338:	67b000ef          	jal	8002e1b2 <putchar>
}
    8002d33c:	60a2                	ld	ra,8(sp)
    8002d33e:	0141                	addi	sp,sp,16
    8002d340:	8082                	ret

000000008002d342 <m_double_trap_20>:

bool m_double_trap_20() {
    8002d342:	1141                	addi	sp,sp,-16

    //实现smrnmi扩展(才有RNMI)，若在 M-mode 中执行且 mnstatus.NMIE = 0，任何陷阱均视为unexpected trap
    TEST_START();
    8002d344:	00005597          	auipc	a1,0x5
    8002d348:	f7c58593          	addi	a1,a1,-132 # 800322c0 <__func__.15>
    8002d34c:	00005517          	auipc	a0,0x5
    8002d350:	37c50513          	addi	a0,a0,892 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_20() {
    8002d354:	e406                	sd	ra,8(sp)
    TEST_START();
    8002d356:	16e020ef          	jal	8002f4c4 <printf>
    8002d35a:	4529                	li	a0,10
    8002d35c:	657000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002d360:	4511                	li	a0,4
    8002d362:	bb3d30ef          	jal	80000f14 <goto_priv>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002d366:	00003797          	auipc	a5,0x3
    8002d36a:	a0e78793          	addi	a5,a5,-1522 # 8002fd74 <vs_test_entry>
    8002d36e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002d372:	00002797          	auipc	a5,0x2
    8002d376:	77a78793          	addi	a5,a5,1914 # 8002faec <hs_test_entry>
    8002d37a:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002d37e:	00002797          	auipc	a5,0x2
    8002d382:	4e678793          	addi	a5,a5,1254 # 8002f864 <m_test_entry>
    8002d386:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002d38a:	3050e073          	csrsi	mtvec,1
    CSRC(CSR_MNSTATUS , MNSTATUS_NMIE);
    8002d38e:	74447073          	csrci	0x744,8
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002d392:	305025f3          	csrr	a1,mtvec
    8002d396:	00011517          	auipc	a0,0x11
    8002d39a:	ad250513          	addi	a0,a0,-1326 # 8003de68 <__func__.0+0xba80>
    8002d39e:	126020ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002d3a2:	a77d30ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002d3a6:	00011517          	auipc	a0,0x11
    8002d3aa:	ad250513          	addi	a0,a0,-1326 # 8003de78 <__func__.0+0xba90>
    8002d3ae:	116020ef          	jal	8002f4c4 <printf>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002d3b2:	6785                	lui	a5,0x1
    8002d3b4:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002d3b6:	f1579073          	csrw	0xf15,a5

    TEST_ASSERT("实现smrnmi扩展,若在 M-mode 中执行且 mnstatus.NMIE = 0,异常视为unexpected trap",
    8002d3ba:	08c00593          	li	a1,140
    8002d3be:	00011617          	auipc	a2,0x11
    8002d3c2:	74260613          	addi	a2,a2,1858 # 8003eb00 <__func__.0+0xc718>
    8002d3c6:	00005517          	auipc	a0,0x5
    8002d3ca:	31a50513          	addi	a0,a0,794 # 800326e0 <__func__.0+0x2f8>
    8002d3ce:	0f6020ef          	jal	8002f4c4 <printf>
    8002d3d2:	0002f797          	auipc	a5,0x2f
    8002d3d6:	c3f7c783          	lbu	a5,-961(a5) # 8005c011 <excpt+0x1>
    8002d3da:	00005597          	auipc	a1,0x5
    8002d3de:	2ce58593          	addi	a1,a1,718 # 800326a8 <__func__.0+0x2c0>
    8002d3e2:	e789                	bnez	a5,8002d3ec <m_double_trap_20+0xaa>
    8002d3e4:	00005597          	auipc	a1,0x5
    8002d3e8:	2d458593          	addi	a1,a1,724 # 800326b8 <__func__.0+0x2d0>
    8002d3ec:	00005517          	auipc	a0,0x5
    8002d3f0:	30c50513          	addi	a0,a0,780 # 800326f8 <__func__.0+0x310>
    8002d3f4:	0d0020ef          	jal	8002f4c4 <printf>
    8002d3f8:	0002f797          	auipc	a5,0x2f
    8002d3fc:	c197c783          	lbu	a5,-999(a5) # 8005c011 <excpt+0x1>
    8002d400:	c799                	beqz	a5,8002d40e <m_double_trap_20+0xcc>
    8002d402:	4529                	li	a0,10
    8002d404:	5af000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002d408:	60a2                	ld	ra,8(sp)
    8002d40a:	0141                	addi	sp,sp,16
    8002d40c:	8082                	ret
    TEST_ASSERT("实现smrnmi扩展,若在 M-mode 中执行且 mnstatus.NMIE = 0,异常视为unexpected trap",
    8002d40e:	00005517          	auipc	a0,0x5
    8002d412:	2f250513          	addi	a0,a0,754 # 80032700 <__func__.0+0x318>
    8002d416:	0ae020ef          	jal	8002f4c4 <printf>
    8002d41a:	02900513          	li	a0,41
    8002d41e:	595000ef          	jal	8002e1b2 <putchar>
    8002d422:	4529                	li	a0,10
    8002d424:	58f000ef          	jal	8002e1b2 <putchar>
}
    8002d428:	60a2                	ld	ra,8(sp)
    8002d42a:	0141                	addi	sp,sp,16
    8002d42c:	8082                	ret

000000008002d42e <m_double_trap_21>:

bool m_double_trap_21() {
    8002d42e:	1141                	addi	sp,sp,-16

    //实现 Smrnmi 扩展且 mnstatus.NMIE = 1,发生 unexpected trap,硬件跳转到 RNMI 处理程序
    TEST_START();
    8002d430:	00005597          	auipc	a1,0x5
    8002d434:	ea858593          	addi	a1,a1,-344 # 800322d8 <__func__.14>
    8002d438:	00005517          	auipc	a0,0x5
    8002d43c:	29050513          	addi	a0,a0,656 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_21() {
    8002d440:	e406                	sd	ra,8(sp)
    TEST_START();
    8002d442:	082020ef          	jal	8002f4c4 <printf>
    8002d446:	4529                	li	a0,10
    8002d448:	56b000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002d44c:	4511                	li	a0,4
    8002d44e:	ac7d30ef          	jal	80000f14 <goto_priv>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002d452:	00003797          	auipc	a5,0x3
    8002d456:	92278793          	addi	a5,a5,-1758 # 8002fd74 <vs_test_entry>
    8002d45a:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002d45e:	00002797          	auipc	a5,0x2
    8002d462:	68e78793          	addi	a5,a5,1678 # 8002faec <hs_test_entry>
    8002d466:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002d46a:	00002797          	auipc	a5,0x2
    8002d46e:	3fa78793          	addi	a5,a5,1018 # 8002f864 <m_test_entry>
    8002d472:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002d476:	3050e073          	csrsi	mtvec,1
    CSRS(CSR_MSTATUS , MSTATUS_MDT);
    8002d47a:	4785                	li	a5,1
    8002d47c:	17aa                	slli	a5,a5,0x2a
    8002d47e:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MNSTATUS , MNSTATUS_NMIE);
    8002d482:	74446073          	csrsi	0x744,8
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002d486:	305025f3          	csrr	a1,mtvec
    8002d48a:	00011517          	auipc	a0,0x11
    8002d48e:	9de50513          	addi	a0,a0,-1570 # 8003de68 <__func__.0+0xba80>
    8002d492:	032020ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002d496:	983d30ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002d49a:	00011517          	auipc	a0,0x11
    8002d49e:	9de50513          	addi	a0,a0,-1570 # 8003de78 <__func__.0+0xba90>
    8002d4a2:	022020ef          	jal	8002f4c4 <printf>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002d4a6:	6785                	lui	a5,0x1
    8002d4a8:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002d4aa:	f1579073          	csrw	0xf15,a5

    TEST_ASSERT("实现 Smrnmi 扩展且 mnstatus.NMIE = 1,发生 unexpected trap,硬件跳转到 RNMI 处理程序",
    8002d4ae:	08c00593          	li	a1,140
    8002d4b2:	00011617          	auipc	a2,0x11
    8002d4b6:	6ae60613          	addi	a2,a2,1710 # 8003eb60 <__func__.0+0xc778>
    8002d4ba:	00005517          	auipc	a0,0x5
    8002d4be:	22650513          	addi	a0,a0,550 # 800326e0 <__func__.0+0x2f8>
    8002d4c2:	002020ef          	jal	8002f4c4 <printf>
    8002d4c6:	0002f797          	auipc	a5,0x2f
    8002d4ca:	b4b7c783          	lbu	a5,-1205(a5) # 8005c011 <excpt+0x1>
    8002d4ce:	00005597          	auipc	a1,0x5
    8002d4d2:	1da58593          	addi	a1,a1,474 # 800326a8 <__func__.0+0x2c0>
    8002d4d6:	e789                	bnez	a5,8002d4e0 <m_double_trap_21+0xb2>
    8002d4d8:	00005597          	auipc	a1,0x5
    8002d4dc:	1e058593          	addi	a1,a1,480 # 800326b8 <__func__.0+0x2d0>
    8002d4e0:	00005517          	auipc	a0,0x5
    8002d4e4:	21850513          	addi	a0,a0,536 # 800326f8 <__func__.0+0x310>
    8002d4e8:	7dd010ef          	jal	8002f4c4 <printf>
    8002d4ec:	0002f797          	auipc	a5,0x2f
    8002d4f0:	b257c783          	lbu	a5,-1243(a5) # 8005c011 <excpt+0x1>
    8002d4f4:	c799                	beqz	a5,8002d502 <m_double_trap_21+0xd4>
    8002d4f6:	4529                	li	a0,10
    8002d4f8:	4bb000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002d4fc:	60a2                	ld	ra,8(sp)
    8002d4fe:	0141                	addi	sp,sp,16
    8002d500:	8082                	ret
    TEST_ASSERT("实现 Smrnmi 扩展且 mnstatus.NMIE = 1,发生 unexpected trap,硬件跳转到 RNMI 处理程序",
    8002d502:	00005517          	auipc	a0,0x5
    8002d506:	1fe50513          	addi	a0,a0,510 # 80032700 <__func__.0+0x318>
    8002d50a:	7bb010ef          	jal	8002f4c4 <printf>
    8002d50e:	02900513          	li	a0,41
    8002d512:	4a1000ef          	jal	8002e1b2 <putchar>
    8002d516:	4529                	li	a0,10
    8002d518:	49b000ef          	jal	8002e1b2 <putchar>
}
    8002d51c:	60a2                	ld	ra,8(sp)
    8002d51e:	0141                	addi	sp,sp,16
    8002d520:	8082                	ret

000000008002d522 <m_double_trap_122>:





bool m_double_trap_122() {    
    8002d522:	1141                	addi	sp,sp,-16

    TEST_START();
    8002d524:	00005597          	auipc	a1,0x5
    8002d528:	dcc58593          	addi	a1,a1,-564 # 800322f0 <__func__.13>
    8002d52c:	00005517          	auipc	a0,0x5
    8002d530:	19c50513          	addi	a0,a0,412 # 800326c8 <__func__.0+0x2e0>
bool m_double_trap_122() {    
    8002d534:	e406                	sd	ra,8(sp)
    TEST_START();
    8002d536:	78f010ef          	jal	8002f4c4 <printf>
    8002d53a:	4529                	li	a0,10
    8002d53c:	477000ef          	jal	8002e1b2 <putchar>

    //HS模式下，当mtvec.mode=vectored，未开启中断代理，发生中断后发生double trap  

    goto_priv(PRIV_M);
    8002d540:	4511                	li	a0,4
    8002d542:	9d3d30ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002d546:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002d54a:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002d54e:	10016073          	csrsi	sstatus,2
    CSRC(CSR_MIDELEG,1ULL << 1);
    8002d552:	30317073          	csrci	mideleg,2
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002d556:	300025f3          	csrr	a1,mstatus
    8002d55a:	00011517          	auipc	a0,0x11
    8002d55e:	8fe50513          	addi	a0,a0,-1794 # 8003de58 <__func__.0+0xba70>
    8002d562:	763010ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 1);
    8002d566:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002d56a:	00003797          	auipc	a5,0x3
    8002d56e:	80a78793          	addi	a5,a5,-2038 # 8002fd74 <vs_test_entry>
    8002d572:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002d576:	00002797          	auipc	a5,0x2
    8002d57a:	57678793          	addi	a5,a5,1398 # 8002faec <hs_test_entry>
    8002d57e:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002d582:	00002797          	auipc	a5,0x2
    8002d586:	2e278793          	addi	a5,a5,738 # 8002f864 <m_test_entry>
    8002d58a:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002d58e:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002d592:	305025f3          	csrr	a1,mtvec
    8002d596:	00011517          	auipc	a0,0x11
    8002d59a:	8d250513          	addi	a0,a0,-1838 # 8003de68 <__func__.0+0xba80>
    8002d59e:	727010ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002d5a2:	877d30ef          	jal	80000e18 <test_setup_except_function>
    goto_priv(PRIV_HS);
    8002d5a6:	450d                	li	a0,3
    8002d5a8:	96dd30ef          	jal	80000f14 <goto_priv>
    printf("入口：");
    8002d5ac:	00011517          	auipc	a0,0x11
    8002d5b0:	8cc50513          	addi	a0,a0,-1844 # 8003de78 <__func__.0+0xba90>
    8002d5b4:	711010ef          	jal	8002f4c4 <printf>
    trap = 2;
    8002d5b8:	4709                	li	a4,2
    double_trap_enabled = true;    //用来控制handler中的处理
    8002d5ba:	4785                	li	a5,1
    trap = 2;
    8002d5bc:	0002f697          	auipc	a3,0x2f
    8002d5c0:	b0e6ae23          	sw	a4,-1252(a3) # 8005c0d8 <trap>
    double_trap_enabled = true;    //用来控制handler中的处理
    8002d5c4:	0002f717          	auipc	a4,0x2f
    8002d5c8:	b0f70623          	sb	a5,-1268(a4) # 8005c0d0 <double_trap_enabled>

    CSRS(sip, 1ULL << 1);
    8002d5cc:	14416073          	csrsi	sip,2
    
    TEST_ASSERT("HS模式下,mtvec.mode=vectored,未开启中断代理,产生2号软件中断,发生double trap",
    8002d5d0:	08c00593          	li	a1,140
    8002d5d4:	00011617          	auipc	a2,0x11
    8002d5d8:	5f460613          	addi	a2,a2,1524 # 8003ebc8 <__func__.0+0xc7e0>
    8002d5dc:	00005517          	auipc	a0,0x5
    8002d5e0:	10450513          	addi	a0,a0,260 # 800326e0 <__func__.0+0x2f8>
    8002d5e4:	6e1010ef          	jal	8002f4c4 <printf>
    8002d5e8:	0002f797          	auipc	a5,0x2f
    8002d5ec:	a297c783          	lbu	a5,-1495(a5) # 8005c011 <excpt+0x1>
    8002d5f0:	00005597          	auipc	a1,0x5
    8002d5f4:	0b858593          	addi	a1,a1,184 # 800326a8 <__func__.0+0x2c0>
    8002d5f8:	e789                	bnez	a5,8002d602 <m_double_trap_122+0xe0>
    8002d5fa:	00005597          	auipc	a1,0x5
    8002d5fe:	0be58593          	addi	a1,a1,190 # 800326b8 <__func__.0+0x2d0>
    8002d602:	00005517          	auipc	a0,0x5
    8002d606:	0f650513          	addi	a0,a0,246 # 800326f8 <__func__.0+0x310>
    8002d60a:	6bb010ef          	jal	8002f4c4 <printf>
    8002d60e:	0002f797          	auipc	a5,0x2f
    8002d612:	a037c783          	lbu	a5,-1533(a5) # 8005c011 <excpt+0x1>
    8002d616:	c799                	beqz	a5,8002d624 <m_double_trap_122+0x102>
    8002d618:	4529                	li	a0,10
    8002d61a:	399000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002d61e:	60a2                	ld	ra,8(sp)
    8002d620:	0141                	addi	sp,sp,16
    8002d622:	8082                	ret
    TEST_ASSERT("HS模式下,mtvec.mode=vectored,未开启中断代理,产生2号软件中断,发生double trap",
    8002d624:	00005517          	auipc	a0,0x5
    8002d628:	0dc50513          	addi	a0,a0,220 # 80032700 <__func__.0+0x318>
    8002d62c:	699010ef          	jal	8002f4c4 <printf>
    8002d630:	02900513          	li	a0,41
    8002d634:	37f000ef          	jal	8002e1b2 <putchar>
    8002d638:	4529                	li	a0,10
    8002d63a:	379000ef          	jal	8002e1b2 <putchar>
}
    8002d63e:	60a2                	ld	ra,8(sp)
    8002d640:	0141                	addi	sp,sp,16
    8002d642:	8082                	ret

000000008002d644 <s_double_trap_1>:
//-------------------------------smdbltrp_test_end-------------------------------------

//-------------------------------ssdbltrp_test_begin-------------------------------------


bool s_double_trap_1() {
    8002d644:	1141                	addi	sp,sp,-16

    //显式CSR写 MDT 位为1时，MIE（机器中断使能）位被清除为0
    TEST_START();
    8002d646:	00005597          	auipc	a1,0x5
    8002d64a:	cc258593          	addi	a1,a1,-830 # 80032308 <__func__.12>
    8002d64e:	00005517          	auipc	a0,0x5
    8002d652:	07a50513          	addi	a0,a0,122 # 800326c8 <__func__.0+0x2e0>
bool s_double_trap_1() {
    8002d656:	e406                	sd	ra,8(sp)
    TEST_START();
    8002d658:	66d010ef          	jal	8002f4c4 <printf>
    8002d65c:	4529                	li	a0,10
    8002d65e:	355000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002d662:	4511                	li	a0,4
    8002d664:	8b1d30ef          	jal	80000f14 <goto_priv>

    CSRS(CSR_MSTATUS, MSTATUS_SIE);
    8002d668:	30016073          	csrsi	mstatus,2

    CSRS(CSR_SSTATUS, SSTATUS_SDT);
    8002d66c:	010007b7          	lui	a5,0x1000
    8002d670:	1007a073          	csrs	sstatus,a5
    TEST_ASSERT("显式CSR写 SDT 位为1时,SIE(监管模式中断使能)位被清除为0",
    8002d674:	00011617          	auipc	a2,0x11
    8002d678:	5b460613          	addi	a2,a2,1460 # 8003ec28 <__func__.0+0xc840>
    8002d67c:	08c00593          	li	a1,140
    8002d680:	00005517          	auipc	a0,0x5
    8002d684:	06050513          	addi	a0,a0,96 # 800326e0 <__func__.0+0x2f8>
    8002d688:	63d010ef          	jal	8002f4c4 <printf>
    8002d68c:	300027f3          	csrr	a5,mstatus
    8002d690:	8b89                	andi	a5,a5,2
    8002d692:	00005597          	auipc	a1,0x5
    8002d696:	01658593          	addi	a1,a1,22 # 800326a8 <__func__.0+0x2c0>
    8002d69a:	c789                	beqz	a5,8002d6a4 <s_double_trap_1+0x60>
    8002d69c:	00005597          	auipc	a1,0x5
    8002d6a0:	01c58593          	addi	a1,a1,28 # 800326b8 <__func__.0+0x2d0>
    8002d6a4:	00005517          	auipc	a0,0x5
    8002d6a8:	05450513          	addi	a0,a0,84 # 800326f8 <__func__.0+0x310>
    8002d6ac:	619010ef          	jal	8002f4c4 <printf>
    8002d6b0:	300027f3          	csrr	a5,mstatus
    8002d6b4:	8b89                	andi	a5,a5,2
    8002d6b6:	eb89                	bnez	a5,8002d6c8 <s_double_trap_1+0x84>
    8002d6b8:	4529                	li	a0,10
    8002d6ba:	2f9000ef          	jal	8002e1b2 <putchar>
    8002d6be:	300027f3          	csrr	a5,mstatus
        (CSRR(CSR_MSTATUS) & MSTATUS_SIE) == 0
    ); 

}
    8002d6c2:	60a2                	ld	ra,8(sp)
    8002d6c4:	0141                	addi	sp,sp,16
    8002d6c6:	8082                	ret
    TEST_ASSERT("显式CSR写 SDT 位为1时,SIE(监管模式中断使能)位被清除为0",
    8002d6c8:	00005517          	auipc	a0,0x5
    8002d6cc:	03850513          	addi	a0,a0,56 # 80032700 <__func__.0+0x318>
    8002d6d0:	5f5010ef          	jal	8002f4c4 <printf>
    8002d6d4:	02900513          	li	a0,41
    8002d6d8:	2db000ef          	jal	8002e1b2 <putchar>
    8002d6dc:	4529                	li	a0,10
    8002d6de:	2d5000ef          	jal	8002e1b2 <putchar>
    8002d6e2:	300027f3          	csrr	a5,mstatus
}
    8002d6e6:	60a2                	ld	ra,8(sp)
    8002d6e8:	0141                	addi	sp,sp,16
    8002d6ea:	8082                	ret

000000008002d6ec <s_double_trap_2>:

bool s_double_trap_2() {
    8002d6ec:	1141                	addi	sp,sp,-16

    //当 SDT 位已为0,通过显式的CSR写操作将 SIE 位设置为1
    TEST_START();
    8002d6ee:	00005597          	auipc	a1,0x5
    8002d6f2:	c2a58593          	addi	a1,a1,-982 # 80032318 <__func__.11>
    8002d6f6:	00005517          	auipc	a0,0x5
    8002d6fa:	fd250513          	addi	a0,a0,-46 # 800326c8 <__func__.0+0x2e0>
bool s_double_trap_2() {
    8002d6fe:	e406                	sd	ra,8(sp)
    TEST_START();
    8002d700:	5c5010ef          	jal	8002f4c4 <printf>
    8002d704:	4529                	li	a0,10
    8002d706:	2ad000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002d70a:	4511                	li	a0,4
    8002d70c:	809d30ef          	jal	80000f14 <goto_priv>

    CSRS(CSR_MSTATUS, MSTATUS_SIE);
    8002d710:	30016073          	csrsi	mstatus,2

    TEST_ASSERT("当 SDT 位已为0,通过显式的CSR写操作将 SIE 位设置为1",
    8002d714:	00010617          	auipc	a2,0x10
    8002d718:	69460613          	addi	a2,a2,1684 # 8003dda8 <__func__.0+0xb9c0>
    8002d71c:	08c00593          	li	a1,140
    8002d720:	00005517          	auipc	a0,0x5
    8002d724:	fc050513          	addi	a0,a0,-64 # 800326e0 <__func__.0+0x2f8>
    8002d728:	59d010ef          	jal	8002f4c4 <printf>
    8002d72c:	300027f3          	csrr	a5,mstatus
    8002d730:	00005597          	auipc	a1,0x5
    8002d734:	f8858593          	addi	a1,a1,-120 # 800326b8 <__func__.0+0x2d0>
    8002d738:	00005517          	auipc	a0,0x5
    8002d73c:	fc050513          	addi	a0,a0,-64 # 800326f8 <__func__.0+0x310>
    8002d740:	585010ef          	jal	8002f4c4 <printf>
    8002d744:	300027f3          	csrr	a5,mstatus
    8002d748:	00005517          	auipc	a0,0x5
    8002d74c:	fb850513          	addi	a0,a0,-72 # 80032700 <__func__.0+0x318>
    8002d750:	575010ef          	jal	8002f4c4 <printf>
    8002d754:	02900513          	li	a0,41
    8002d758:	25b000ef          	jal	8002e1b2 <putchar>
    8002d75c:	4529                	li	a0,10
    8002d75e:	255000ef          	jal	8002e1b2 <putchar>
    8002d762:	300027f3          	csrr	a5,mstatus
        (CSRR(CSR_MSTATUS) & MSTATUS_SIE) == 1
    ); 

}
    8002d766:	60a2                	ld	ra,8(sp)
    8002d768:	0141                	addi	sp,sp,16
    8002d76a:	8082                	ret

000000008002d76c <s_double_trap_3>:

bool s_double_trap_3() {
    8002d76c:	1141                	addi	sp,sp,-16

    //当 MDT 位（对于RV64）在同一次写操作中被设置为0时，通过显式的CSR写操作将 MIE 位设置为1
    TEST_START();
    8002d76e:	00005597          	auipc	a1,0x5
    8002d772:	bba58593          	addi	a1,a1,-1094 # 80032328 <__func__.10>
    8002d776:	00005517          	auipc	a0,0x5
    8002d77a:	f5250513          	addi	a0,a0,-174 # 800326c8 <__func__.0+0x2e0>
bool s_double_trap_3() {
    8002d77e:	e406                	sd	ra,8(sp)
    TEST_START();
    8002d780:	545010ef          	jal	8002f4c4 <printf>
    8002d784:	4529                	li	a0,10
    8002d786:	22d000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002d78a:	4511                	li	a0,4
    8002d78c:	f88d30ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002d790:	00002797          	auipc	a5,0x2
    8002d794:	5e478793          	addi	a5,a5,1508 # 8002fd74 <vs_test_entry>
    8002d798:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002d79c:	00002797          	auipc	a5,0x2
    8002d7a0:	35078793          	addi	a5,a5,848 # 8002faec <hs_test_entry>
    8002d7a4:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002d7a8:	00002797          	auipc	a5,0x2
    8002d7ac:	0bc78793          	addi	a5,a5,188 # 8002f864 <m_test_entry>
    8002d7b0:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002d7b4:	3050e073          	csrsi	mtvec,1

    TEST_SETUP_EXCEPT();
    8002d7b8:	e60d30ef          	jal	80000e18 <test_setup_except_function>

    trap=5;
    8002d7bc:	4715                	li	a4,5
    CSRW(CSR_MCONFIGPTR,0xfff); //陷入异常使sdt为1
    8002d7be:	6785                	lui	a5,0x1
    trap=5;
    8002d7c0:	0002f697          	auipc	a3,0x2f
    8002d7c4:	90e6ac23          	sw	a4,-1768(a3) # 8005c0d8 <trap>
    CSRW(CSR_MCONFIGPTR,0xfff); //陷入异常使sdt为1
    8002d7c8:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002d7ca:	f1579073          	csrw	0xf15,a5

}
    8002d7ce:	60a2                	ld	ra,8(sp)
    8002d7d0:	0141                	addi	sp,sp,16
    8002d7d2:	8082                	ret

000000008002d7d4 <s_double_trap_4>:

bool s_double_trap_4() {
    8002d7d4:	1101                	addi	sp,sp,-32

    //当在HS模式下执行SRET指令时，SDT位被设置为0
    TEST_START();
    8002d7d6:	00005597          	auipc	a1,0x5
    8002d7da:	b6258593          	addi	a1,a1,-1182 # 80032338 <__func__.9>
    8002d7de:	00005517          	auipc	a0,0x5
    8002d7e2:	eea50513          	addi	a0,a0,-278 # 800326c8 <__func__.0+0x2e0>
bool s_double_trap_4() {
    8002d7e6:	ec06                	sd	ra,24(sp)
    8002d7e8:	e822                	sd	s0,16(sp)
    8002d7ea:	e426                	sd	s1,8(sp)
    8002d7ec:	e04a                	sd	s2,0(sp)
    TEST_START();
    8002d7ee:	4d7010ef          	jal	8002f4c4 <printf>
    8002d7f2:	4529                	li	a0,10
    8002d7f4:	1bf000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002d7f8:	4511                	li	a0,4
    8002d7fa:	f1ad30ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002d7fe:	00002797          	auipc	a5,0x2
    8002d802:	57678793          	addi	a5,a5,1398 # 8002fd74 <vs_test_entry>
    8002d806:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002d80a:	00002797          	auipc	a5,0x2
    8002d80e:	2e278793          	addi	a5,a5,738 # 8002faec <hs_test_entry>
    8002d812:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002d816:	00002797          	auipc	a5,0x2
    8002d81a:	04e78793          	addi	a5,a5,78 # 8002f864 <m_test_entry>
    8002d81e:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002d822:	3050e073          	csrsi	mtvec,1

    printf("menvcfg=%llx\n",CSRR(CSR_MENVCFG));
    8002d826:	30a025f3          	csrr	a1,0x30a
    8002d82a:	00011517          	auipc	a0,0x11
    8002d82e:	44e50513          	addi	a0,a0,1102 # 8003ec78 <__func__.0+0xc890>
    8002d832:	493010ef          	jal	8002f4c4 <printf>
    TEST_SETUP_EXCEPT();
    8002d836:	de2d30ef          	jal	80000e18 <test_setup_except_function>

    trap=4;
    8002d83a:	4791                	li	a5,4
    goto_priv(PRIV_HS);
    8002d83c:	450d                	li	a0,3
    trap=4;
    8002d83e:	0002f717          	auipc	a4,0x2f
    8002d842:	88f72d23          	sw	a5,-1894(a4) # 8005c0d8 <trap>
    goto_priv(PRIV_HS);
    8002d846:	eced30ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff); 
    8002d84a:	6785                	lui	a5,0x1
    8002d84c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002d84e:	f1579073          	csrw	0xf15,a5

    bool check1,check2;

    if(trap == -1) check1 = true;
    8002d852:	0002f497          	auipc	s1,0x2f
    8002d856:	8864a483          	lw	s1,-1914(s1) # 8005c0d8 <trap>
    else check1 = false;

    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002d85a:	10002473          	csrr	s0,sstatus
    if(trap == -1) check1 = true;
    8002d85e:	00148593          	addi	a1,s1,1
    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002d862:	010007b7          	lui	a5,0x1000
    printf("%d\n",check1);
    8002d866:	0015b593          	seqz	a1,a1
    8002d86a:	00006517          	auipc	a0,0x6
    8002d86e:	9de50513          	addi	a0,a0,-1570 # 80033248 <__func__.0+0xe60>
    check2 = ((CSRR(CSR_SSTATUS) & SSTATUS_SDT) == 0);
    8002d872:	8c7d                	and	s0,s0,a5
    printf("%d\n",check1);
    8002d874:	451010ef          	jal	8002f4c4 <printf>
    printf("%d\n",check2);
    8002d878:	00143593          	seqz	a1,s0
    8002d87c:	00006517          	auipc	a0,0x6
    8002d880:	9cc50513          	addi	a0,a0,-1588 # 80033248 <__func__.0+0xe60>
    8002d884:	441010ef          	jal	8002f4c4 <printf>
    if(trap == -1) check1 = true;
    8002d888:	597d                	li	s2,-1


    TEST_ASSERT("当在HS模式下执行SRET指令时,SDT位被设置为0",
    8002d88a:	00011617          	auipc	a2,0x11
    8002d88e:	3fe60613          	addi	a2,a2,1022 # 8003ec88 <__func__.0+0xc8a0>
    8002d892:	08c00593          	li	a1,140
    8002d896:	00005517          	auipc	a0,0x5
    8002d89a:	e4a50513          	addi	a0,a0,-438 # 800326e0 <__func__.0+0x2f8>
    8002d89e:	427010ef          	jal	8002f4c4 <printf>
    8002d8a2:	01249363          	bne	s1,s2,8002d8a8 <s_double_trap_4+0xd4>
    8002d8a6:	c031                	beqz	s0,8002d8ea <s_double_trap_4+0x116>
    8002d8a8:	00005597          	auipc	a1,0x5
    8002d8ac:	e1058593          	addi	a1,a1,-496 # 800326b8 <__func__.0+0x2d0>
    8002d8b0:	00005517          	auipc	a0,0x5
    8002d8b4:	e4850513          	addi	a0,a0,-440 # 800326f8 <__func__.0+0x310>
    8002d8b8:	40d010ef          	jal	8002f4c4 <printf>
    8002d8bc:	00005517          	auipc	a0,0x5
    8002d8c0:	e4450513          	addi	a0,a0,-444 # 80032700 <__func__.0+0x318>
    8002d8c4:	401010ef          	jal	8002f4c4 <printf>
    8002d8c8:	02900513          	li	a0,41
    8002d8cc:	0e7000ef          	jal	8002e1b2 <putchar>
    8002d8d0:	4529                	li	a0,10
    8002d8d2:	0e1000ef          	jal	8002e1b2 <putchar>
        check1 &&
        check2
    ); 
    trap = 0;
}
    8002d8d6:	60e2                	ld	ra,24(sp)
    8002d8d8:	6442                	ld	s0,16(sp)
    trap = 0;
    8002d8da:	0002e797          	auipc	a5,0x2e
    8002d8de:	7e07af23          	sw	zero,2046(a5) # 8005c0d8 <trap>
}
    8002d8e2:	64a2                	ld	s1,8(sp)
    8002d8e4:	6902                	ld	s2,0(sp)
    8002d8e6:	6105                	addi	sp,sp,32
    8002d8e8:	8082                	ret
    TEST_ASSERT("当在HS模式下执行SRET指令时,SDT位被设置为0",
    8002d8ea:	00005597          	auipc	a1,0x5
    8002d8ee:	dbe58593          	addi	a1,a1,-578 # 800326a8 <__func__.0+0x2c0>
    8002d8f2:	00005517          	auipc	a0,0x5
    8002d8f6:	e0650513          	addi	a0,a0,-506 # 800326f8 <__func__.0+0x310>
    8002d8fa:	3cb010ef          	jal	8002f4c4 <printf>
    8002d8fe:	bfc9                	j	8002d8d0 <s_double_trap_4+0xfc>

000000008002d900 <s_double_trap_5>:

bool s_double_trap_5() {   
    8002d900:	1141                	addi	sp,sp,-16

    //S/U模式下发生中断（非NMI），不开代理，trap到M模式，再发生异常，MDT/SDT=1，使用RNMI处理程序，执行MNRET指令
    TEST_START();
    8002d902:	00005597          	auipc	a1,0x5
    8002d906:	a4658593          	addi	a1,a1,-1466 # 80032348 <__func__.8>
    8002d90a:	00005517          	auipc	a0,0x5
    8002d90e:	dbe50513          	addi	a0,a0,-578 # 800326c8 <__func__.0+0x2e0>
bool s_double_trap_5() {   
    8002d912:	e406                	sd	ra,8(sp)
    TEST_START();
    8002d914:	3b1010ef          	jal	8002f4c4 <printf>
    8002d918:	4529                	li	a0,10
    8002d91a:	099000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002d91e:	4511                	li	a0,4
    8002d920:	df4d30ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MIE);
    8002d924:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS, MSTATUS_SIE);
    8002d928:	30016073          	csrsi	mstatus,2


    CSRS(mie, 1ULL << 1);
    8002d92c:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002d930:	00002797          	auipc	a5,0x2
    8002d934:	44478793          	addi	a5,a5,1092 # 8002fd74 <vs_test_entry>
    8002d938:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002d93c:	00002797          	auipc	a5,0x2
    8002d940:	1b078793          	addi	a5,a5,432 # 8002faec <hs_test_entry>
    8002d944:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002d948:	00002797          	auipc	a5,0x2
    8002d94c:	f1c78793          	addi	a5,a5,-228 # 8002f864 <m_test_entry>
    8002d950:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002d954:	3050e073          	csrsi	mtvec,1

    TEST_SETUP_EXCEPT();
    8002d958:	cc0d30ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002d95c:	00010517          	auipc	a0,0x10
    8002d960:	51c50513          	addi	a0,a0,1308 # 8003de78 <__func__.0+0xba90>
    8002d964:	361010ef          	jal	8002f4c4 <printf>
    trap = 2;
    8002d968:	4709                	li	a4,2
    double_trap_enabled = true;    //用来控制handler中的处理
    8002d96a:	4785                	li	a5,1

    goto_priv(PRIV_HS);
    8002d96c:	450d                	li	a0,3
    trap = 2;
    8002d96e:	0002e697          	auipc	a3,0x2e
    8002d972:	76e6a523          	sw	a4,1898(a3) # 8005c0d8 <trap>
    double_trap_enabled = true;    //用来控制handler中的处理
    8002d976:	0002e717          	auipc	a4,0x2e
    8002d97a:	74f70d23          	sb	a5,1882(a4) # 8005c0d0 <double_trap_enabled>
    goto_priv(PRIV_HS);
    8002d97e:	d96d30ef          	jal	80000f14 <goto_priv>
    CSRS(sip, 1ULL << 1);
    8002d982:	14416073          	csrsi	sip,2

    TEST_ASSERT("s模式下,mtvec.mode=vectored.未开启中断代理,产生2号supervisor软件中断处理过程中产生一个非法指令异常",
    8002d986:	08c00593          	li	a1,140
    8002d98a:	00011617          	auipc	a2,0x11
    8002d98e:	33e60613          	addi	a2,a2,830 # 8003ecc8 <__func__.0+0xc8e0>
    8002d992:	00005517          	auipc	a0,0x5
    8002d996:	d4e50513          	addi	a0,a0,-690 # 800326e0 <__func__.0+0x2f8>
    8002d99a:	32b010ef          	jal	8002f4c4 <printf>
    8002d99e:	0002e797          	auipc	a5,0x2e
    8002d9a2:	6737c783          	lbu	a5,1651(a5) # 8005c011 <excpt+0x1>
    8002d9a6:	00005597          	auipc	a1,0x5
    8002d9aa:	d0258593          	addi	a1,a1,-766 # 800326a8 <__func__.0+0x2c0>
    8002d9ae:	e789                	bnez	a5,8002d9b8 <s_double_trap_5+0xb8>
    8002d9b0:	00005597          	auipc	a1,0x5
    8002d9b4:	d0858593          	addi	a1,a1,-760 # 800326b8 <__func__.0+0x2d0>
    8002d9b8:	00005517          	auipc	a0,0x5
    8002d9bc:	d4050513          	addi	a0,a0,-704 # 800326f8 <__func__.0+0x310>
    8002d9c0:	305010ef          	jal	8002f4c4 <printf>
    8002d9c4:	0002e797          	auipc	a5,0x2e
    8002d9c8:	64d7c783          	lbu	a5,1613(a5) # 8005c011 <excpt+0x1>
    8002d9cc:	c799                	beqz	a5,8002d9da <s_double_trap_5+0xda>
    8002d9ce:	4529                	li	a0,10
    8002d9d0:	7e2000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002d9d4:	60a2                	ld	ra,8(sp)
    8002d9d6:	0141                	addi	sp,sp,16
    8002d9d8:	8082                	ret
    TEST_ASSERT("s模式下,mtvec.mode=vectored.未开启中断代理,产生2号supervisor软件中断处理过程中产生一个非法指令异常",
    8002d9da:	00005517          	auipc	a0,0x5
    8002d9de:	d2650513          	addi	a0,a0,-730 # 80032700 <__func__.0+0x318>
    8002d9e2:	2e3010ef          	jal	8002f4c4 <printf>
    8002d9e6:	02900513          	li	a0,41
    8002d9ea:	7c8000ef          	jal	8002e1b2 <putchar>
    8002d9ee:	4529                	li	a0,10
    8002d9f0:	7c2000ef          	jal	8002e1b2 <putchar>
}
    8002d9f4:	60a2                	ld	ra,8(sp)
    8002d9f6:	0141                	addi	sp,sp,16
    8002d9f8:	8082                	ret

000000008002d9fa <s_double_trap_7>:

bool s_double_trap_7() {   
    8002d9fa:	1141                	addi	sp,sp,-16

    //S/U模式下发生中断（非NMI），不开代理，trap到M模式，发生M模式中断
    TEST_START();
    8002d9fc:	00005597          	auipc	a1,0x5
    8002da00:	95c58593          	addi	a1,a1,-1700 # 80032358 <__func__.7>
    8002da04:	00005517          	auipc	a0,0x5
    8002da08:	cc450513          	addi	a0,a0,-828 # 800326c8 <__func__.0+0x2e0>
bool s_double_trap_7() {   
    8002da0c:	e406                	sd	ra,8(sp)
    TEST_START();
    8002da0e:	2b7010ef          	jal	8002f4c4 <printf>
    8002da12:	4529                	li	a0,10
    8002da14:	79e000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002da18:	4511                	li	a0,4
    8002da1a:	cfad30ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MIE);
    8002da1e:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS, MSTATUS_SIE);
    8002da22:	30016073          	csrsi	mstatus,2


    CSRS(mie, 1ULL << 1);
    8002da26:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002da2a:	00002797          	auipc	a5,0x2
    8002da2e:	34a78793          	addi	a5,a5,842 # 8002fd74 <vs_test_entry>
    8002da32:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002da36:	00002797          	auipc	a5,0x2
    8002da3a:	0b678793          	addi	a5,a5,182 # 8002faec <hs_test_entry>
    8002da3e:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002da42:	00002797          	auipc	a5,0x2
    8002da46:	e2278793          	addi	a5,a5,-478 # 8002f864 <m_test_entry>
    8002da4a:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002da4e:	3050e073          	csrsi	mtvec,1

    TEST_SETUP_EXCEPT();
    8002da52:	bc6d30ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002da56:	00010517          	auipc	a0,0x10
    8002da5a:	42250513          	addi	a0,a0,1058 # 8003de78 <__func__.0+0xba90>
    8002da5e:	267010ef          	jal	8002f4c4 <printf>
    trap = 1;
    8002da62:	4785                	li	a5,1
    double_trap_enabled = true;    //用来控制handler中的处理

    goto_priv(PRIV_HS);
    8002da64:	450d                	li	a0,3
    trap = 1;
    8002da66:	0002e717          	auipc	a4,0x2e
    8002da6a:	66f72923          	sw	a5,1650(a4) # 8005c0d8 <trap>
    double_trap_enabled = true;    //用来控制handler中的处理
    8002da6e:	0002e717          	auipc	a4,0x2e
    8002da72:	66f70123          	sb	a5,1634(a4) # 8005c0d0 <double_trap_enabled>
    goto_priv(PRIV_HS);
    8002da76:	c9ed30ef          	jal	80000f14 <goto_priv>
    CSRS(sip, 1ULL << 1);
    8002da7a:	14416073          	csrsi	sip,2

    TEST_ASSERT("S/U模式下发生2号supervisor软件中断(非NMI),不开代理,trap到M模式,发生M模式中断",
    8002da7e:	08c00593          	li	a1,140
    8002da82:	00011617          	auipc	a2,0x11
    8002da86:	2ce60613          	addi	a2,a2,718 # 8003ed50 <__func__.0+0xc968>
    8002da8a:	00005517          	auipc	a0,0x5
    8002da8e:	c5650513          	addi	a0,a0,-938 # 800326e0 <__func__.0+0x2f8>
    8002da92:	233010ef          	jal	8002f4c4 <printf>
    8002da96:	0002e797          	auipc	a5,0x2e
    8002da9a:	57b7c783          	lbu	a5,1403(a5) # 8005c011 <excpt+0x1>
    8002da9e:	00005597          	auipc	a1,0x5
    8002daa2:	c0a58593          	addi	a1,a1,-1014 # 800326a8 <__func__.0+0x2c0>
    8002daa6:	e789                	bnez	a5,8002dab0 <s_double_trap_7+0xb6>
    8002daa8:	00005597          	auipc	a1,0x5
    8002daac:	c1058593          	addi	a1,a1,-1008 # 800326b8 <__func__.0+0x2d0>
    8002dab0:	00005517          	auipc	a0,0x5
    8002dab4:	c4850513          	addi	a0,a0,-952 # 800326f8 <__func__.0+0x310>
    8002dab8:	20d010ef          	jal	8002f4c4 <printf>
    8002dabc:	0002e797          	auipc	a5,0x2e
    8002dac0:	5557c783          	lbu	a5,1365(a5) # 8005c011 <excpt+0x1>
    8002dac4:	c799                	beqz	a5,8002dad2 <s_double_trap_7+0xd8>
    8002dac6:	4529                	li	a0,10
    8002dac8:	6ea000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002dacc:	60a2                	ld	ra,8(sp)
    8002dace:	0141                	addi	sp,sp,16
    8002dad0:	8082                	ret
    TEST_ASSERT("S/U模式下发生2号supervisor软件中断(非NMI),不开代理,trap到M模式,发生M模式中断",
    8002dad2:	00005517          	auipc	a0,0x5
    8002dad6:	c2e50513          	addi	a0,a0,-978 # 80032700 <__func__.0+0x318>
    8002dada:	1eb010ef          	jal	8002f4c4 <printf>
    8002dade:	02900513          	li	a0,41
    8002dae2:	6d0000ef          	jal	8002e1b2 <putchar>
    8002dae6:	4529                	li	a0,10
    8002dae8:	6ca000ef          	jal	8002e1b2 <putchar>
}
    8002daec:	60a2                	ld	ra,8(sp)
    8002daee:	0141                	addi	sp,sp,16
    8002daf0:	8082                	ret

000000008002daf2 <s_double_trap_8>:


bool s_double_trap_8() {
    8002daf2:	1141                	addi	sp,sp,-16

    //s/u模式下，当mtvec.mode=vectored，未开启异常代理，发生异常，再产生中断，产生double trap  
    TEST_START();
    8002daf4:	00005597          	auipc	a1,0x5
    8002daf8:	87458593          	addi	a1,a1,-1932 # 80032368 <__func__.6>
    8002dafc:	00005517          	auipc	a0,0x5
    8002db00:	bcc50513          	addi	a0,a0,-1076 # 800326c8 <__func__.0+0x2e0>
bool s_double_trap_8() {
    8002db04:	e406                	sd	ra,8(sp)
    TEST_START();
    8002db06:	1bf010ef          	jal	8002f4c4 <printf>
    8002db0a:	4529                	li	a0,10
    8002db0c:	6a6000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002db10:	4511                	li	a0,4
    8002db12:	c02d30ef          	jal	80000f14 <goto_priv>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002db16:	00002797          	auipc	a5,0x2
    8002db1a:	25e78793          	addi	a5,a5,606 # 8002fd74 <vs_test_entry>
    8002db1e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002db22:	00002797          	auipc	a5,0x2
    8002db26:	fca78793          	addi	a5,a5,-54 # 8002faec <hs_test_entry>
    8002db2a:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002db2e:	00002797          	auipc	a5,0x2
    8002db32:	d3678793          	addi	a5,a5,-714 # 8002f864 <m_test_entry>
    8002db36:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002db3a:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002db3e:	305025f3          	csrr	a1,mtvec
    8002db42:	00010517          	auipc	a0,0x10
    8002db46:	32650513          	addi	a0,a0,806 # 8003de68 <__func__.0+0xba80>
    8002db4a:	17b010ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002db4e:	acad30ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002db52:	00010517          	auipc	a0,0x10
    8002db56:	32650513          	addi	a0,a0,806 # 8003de78 <__func__.0+0xba90>
    8002db5a:	16b010ef          	jal	8002f4c4 <printf>
    trap = 1;
    8002db5e:	4785                	li	a5,1
    double_trap_enabled = true;    //用来控制handler中的处理
    goto_priv(PRIV_HS);
    8002db60:	450d                	li	a0,3
    trap = 1;
    8002db62:	0002e717          	auipc	a4,0x2e
    8002db66:	56f72b23          	sw	a5,1398(a4) # 8005c0d8 <trap>
    double_trap_enabled = true;    //用来控制handler中的处理
    8002db6a:	0002e717          	auipc	a4,0x2e
    8002db6e:	56f70323          	sb	a5,1382(a4) # 8005c0d0 <double_trap_enabled>
    goto_priv(PRIV_HS);
    8002db72:	ba2d30ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002db76:	6785                	lui	a5,0x1
    8002db78:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002db7a:	f1579073          	csrw	0xf15,a5

    TEST_ASSERT("s模式下,mtvec.mode=vectored.未开启异常代理,产生一个非法指令异常处理过程中产生2号软件中断",
    8002db7e:	08c00593          	li	a1,140
    8002db82:	00011617          	auipc	a2,0x11
    8002db86:	23660613          	addi	a2,a2,566 # 8003edb8 <__func__.0+0xc9d0>
    8002db8a:	00005517          	auipc	a0,0x5
    8002db8e:	b5650513          	addi	a0,a0,-1194 # 800326e0 <__func__.0+0x2f8>
    8002db92:	133010ef          	jal	8002f4c4 <printf>
    8002db96:	0002e797          	auipc	a5,0x2e
    8002db9a:	47b7c783          	lbu	a5,1147(a5) # 8005c011 <excpt+0x1>
    8002db9e:	00005597          	auipc	a1,0x5
    8002dba2:	b0a58593          	addi	a1,a1,-1270 # 800326a8 <__func__.0+0x2c0>
    8002dba6:	e789                	bnez	a5,8002dbb0 <s_double_trap_8+0xbe>
    8002dba8:	00005597          	auipc	a1,0x5
    8002dbac:	b1058593          	addi	a1,a1,-1264 # 800326b8 <__func__.0+0x2d0>
    8002dbb0:	00005517          	auipc	a0,0x5
    8002dbb4:	b4850513          	addi	a0,a0,-1208 # 800326f8 <__func__.0+0x310>
    8002dbb8:	10d010ef          	jal	8002f4c4 <printf>
    8002dbbc:	0002e797          	auipc	a5,0x2e
    8002dbc0:	4557c783          	lbu	a5,1109(a5) # 8005c011 <excpt+0x1>
    8002dbc4:	c799                	beqz	a5,8002dbd2 <s_double_trap_8+0xe0>
    8002dbc6:	4529                	li	a0,10
    8002dbc8:	5ea000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002dbcc:	60a2                	ld	ra,8(sp)
    8002dbce:	0141                	addi	sp,sp,16
    8002dbd0:	8082                	ret
    TEST_ASSERT("s模式下,mtvec.mode=vectored.未开启异常代理,产生一个非法指令异常处理过程中产生2号软件中断",
    8002dbd2:	00005517          	auipc	a0,0x5
    8002dbd6:	b2e50513          	addi	a0,a0,-1234 # 80032700 <__func__.0+0x318>
    8002dbda:	0eb010ef          	jal	8002f4c4 <printf>
    8002dbde:	02900513          	li	a0,41
    8002dbe2:	5d0000ef          	jal	8002e1b2 <putchar>
    8002dbe6:	4529                	li	a0,10
    8002dbe8:	5ca000ef          	jal	8002e1b2 <putchar>
}
    8002dbec:	60a2                	ld	ra,8(sp)
    8002dbee:	0141                	addi	sp,sp,16
    8002dbf0:	8082                	ret

000000008002dbf2 <s_double_trap_9>:

bool s_double_trap_9() {
    8002dbf2:	1141                	addi	sp,sp,-16

    //u模式下，当mtvec.mode=vectored，未开启异常代理，发生异常，再产生中断，产生double trap  
    TEST_START();
    8002dbf4:	00004597          	auipc	a1,0x4
    8002dbf8:	78458593          	addi	a1,a1,1924 # 80032378 <__func__.5>
    8002dbfc:	00005517          	auipc	a0,0x5
    8002dc00:	acc50513          	addi	a0,a0,-1332 # 800326c8 <__func__.0+0x2e0>
bool s_double_trap_9() {
    8002dc04:	e406                	sd	ra,8(sp)
    TEST_START();
    8002dc06:	0bf010ef          	jal	8002f4c4 <printf>
    8002dc0a:	4529                	li	a0,10
    8002dc0c:	5a6000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002dc10:	4511                	li	a0,4
    8002dc12:	b02d30ef          	jal	80000f14 <goto_priv>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002dc16:	00002797          	auipc	a5,0x2
    8002dc1a:	15e78793          	addi	a5,a5,350 # 8002fd74 <vs_test_entry>
    8002dc1e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002dc22:	00002797          	auipc	a5,0x2
    8002dc26:	eca78793          	addi	a5,a5,-310 # 8002faec <hs_test_entry>
    8002dc2a:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002dc2e:	00002797          	auipc	a5,0x2
    8002dc32:	c3678793          	addi	a5,a5,-970 # 8002f864 <m_test_entry>
    8002dc36:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002dc3a:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002dc3e:	305025f3          	csrr	a1,mtvec
    8002dc42:	00010517          	auipc	a0,0x10
    8002dc46:	22650513          	addi	a0,a0,550 # 8003de68 <__func__.0+0xba80>
    8002dc4a:	07b010ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002dc4e:	9cad30ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002dc52:	00010517          	auipc	a0,0x10
    8002dc56:	22650513          	addi	a0,a0,550 # 8003de78 <__func__.0+0xba90>
    8002dc5a:	06b010ef          	jal	8002f4c4 <printf>
    trap = 1;
    8002dc5e:	4785                	li	a5,1
    double_trap_enabled = true;    //用来控制handler中的处理
    goto_priv(PRIV_HU);
    8002dc60:	853e                	mv	a0,a5
    trap = 1;
    8002dc62:	0002e717          	auipc	a4,0x2e
    8002dc66:	46f72b23          	sw	a5,1142(a4) # 8005c0d8 <trap>
    double_trap_enabled = true;    //用来控制handler中的处理
    8002dc6a:	0002e717          	auipc	a4,0x2e
    8002dc6e:	46f70323          	sb	a5,1126(a4) # 8005c0d0 <double_trap_enabled>
    goto_priv(PRIV_HU);
    8002dc72:	aa2d30ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002dc76:	6785                	lui	a5,0x1
    8002dc78:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002dc7a:	f1579073          	csrw	0xf15,a5

    TEST_ASSERT("u模式下,mtvec.mode=vectored.未开启异常代理,产生一个非法指令异常处理过程中产生2号软件中断",
    8002dc7e:	08c00593          	li	a1,140
    8002dc82:	00011617          	auipc	a2,0x11
    8002dc86:	1b660613          	addi	a2,a2,438 # 8003ee38 <__func__.0+0xca50>
    8002dc8a:	00005517          	auipc	a0,0x5
    8002dc8e:	a5650513          	addi	a0,a0,-1450 # 800326e0 <__func__.0+0x2f8>
    8002dc92:	033010ef          	jal	8002f4c4 <printf>
    8002dc96:	0002e797          	auipc	a5,0x2e
    8002dc9a:	37b7c783          	lbu	a5,891(a5) # 8005c011 <excpt+0x1>
    8002dc9e:	00005597          	auipc	a1,0x5
    8002dca2:	a0a58593          	addi	a1,a1,-1526 # 800326a8 <__func__.0+0x2c0>
    8002dca6:	e789                	bnez	a5,8002dcb0 <s_double_trap_9+0xbe>
    8002dca8:	00005597          	auipc	a1,0x5
    8002dcac:	a1058593          	addi	a1,a1,-1520 # 800326b8 <__func__.0+0x2d0>
    8002dcb0:	00005517          	auipc	a0,0x5
    8002dcb4:	a4850513          	addi	a0,a0,-1464 # 800326f8 <__func__.0+0x310>
    8002dcb8:	00d010ef          	jal	8002f4c4 <printf>
    8002dcbc:	0002e797          	auipc	a5,0x2e
    8002dcc0:	3557c783          	lbu	a5,853(a5) # 8005c011 <excpt+0x1>
    8002dcc4:	c799                	beqz	a5,8002dcd2 <s_double_trap_9+0xe0>
    8002dcc6:	4529                	li	a0,10
    8002dcc8:	4ea000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002dccc:	60a2                	ld	ra,8(sp)
    8002dcce:	0141                	addi	sp,sp,16
    8002dcd0:	8082                	ret
    TEST_ASSERT("u模式下,mtvec.mode=vectored.未开启异常代理,产生一个非法指令异常处理过程中产生2号软件中断",
    8002dcd2:	00005517          	auipc	a0,0x5
    8002dcd6:	a2e50513          	addi	a0,a0,-1490 # 80032700 <__func__.0+0x318>
    8002dcda:	7ea010ef          	jal	8002f4c4 <printf>
    8002dcde:	02900513          	li	a0,41
    8002dce2:	4d0000ef          	jal	8002e1b2 <putchar>
    8002dce6:	4529                	li	a0,10
    8002dce8:	4ca000ef          	jal	8002e1b2 <putchar>
}
    8002dcec:	60a2                	ld	ra,8(sp)
    8002dcee:	0141                	addi	sp,sp,16
    8002dcf0:	8082                	ret

000000008002dcf2 <s_double_trap_10>:

bool s_double_trap_10() {
    8002dcf2:	1141                	addi	sp,sp,-16

    //S模式下发生异常，不开代理，trap到M模式，在进入陷阱处理的早期阶段发生异常
    TEST_START();
    8002dcf4:	00004597          	auipc	a1,0x4
    8002dcf8:	69458593          	addi	a1,a1,1684 # 80032388 <__func__.4>
    8002dcfc:	00005517          	auipc	a0,0x5
    8002dd00:	9cc50513          	addi	a0,a0,-1588 # 800326c8 <__func__.0+0x2e0>
bool s_double_trap_10() {
    8002dd04:	e406                	sd	ra,8(sp)
    TEST_START();
    8002dd06:	7be010ef          	jal	8002f4c4 <printf>
    8002dd0a:	4529                	li	a0,10
    8002dd0c:	4a6000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002dd10:	4511                	li	a0,4
    8002dd12:	a02d30ef          	jal	80000f14 <goto_priv>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002dd16:	00002797          	auipc	a5,0x2
    8002dd1a:	05e78793          	addi	a5,a5,94 # 8002fd74 <vs_test_entry>
    8002dd1e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002dd22:	00002797          	auipc	a5,0x2
    8002dd26:	dca78793          	addi	a5,a5,-566 # 8002faec <hs_test_entry>
    8002dd2a:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002dd2e:	00002797          	auipc	a5,0x2
    8002dd32:	b3678793          	addi	a5,a5,-1226 # 8002f864 <m_test_entry>
    8002dd36:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002dd3a:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002dd3e:	305025f3          	csrr	a1,mtvec
    8002dd42:	00010517          	auipc	a0,0x10
    8002dd46:	12650513          	addi	a0,a0,294 # 8003de68 <__func__.0+0xba80>
    8002dd4a:	77a010ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002dd4e:	8cad30ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002dd52:	00010517          	auipc	a0,0x10
    8002dd56:	12650513          	addi	a0,a0,294 # 8003de78 <__func__.0+0xba90>
    8002dd5a:	76a010ef          	jal	8002f4c4 <printf>
    trap = 2;
    8002dd5e:	4709                	li	a4,2
    double_trap_enabled = true;    //用来控制handler中的处理
    8002dd60:	4785                	li	a5,1
    goto_priv(PRIV_HS);
    8002dd62:	450d                	li	a0,3
    trap = 2;
    8002dd64:	0002e697          	auipc	a3,0x2e
    8002dd68:	36e6aa23          	sw	a4,884(a3) # 8005c0d8 <trap>
    double_trap_enabled = true;    //用来控制handler中的处理
    8002dd6c:	0002e717          	auipc	a4,0x2e
    8002dd70:	36f70223          	sb	a5,868(a4) # 8005c0d0 <double_trap_enabled>
    goto_priv(PRIV_HS);
    8002dd74:	9a0d30ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002dd78:	6785                	lui	a5,0x1
    8002dd7a:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002dd7c:	f1579073          	csrw	0xf15,a5

    TEST_ASSERT("s模式下,当mtvec.mode=vectored,未开启异常代理,发生异常,再产生异常,产生double trap",
    8002dd80:	08c00593          	li	a1,140
    8002dd84:	00011617          	auipc	a2,0x11
    8002dd88:	13460613          	addi	a2,a2,308 # 8003eeb8 <__func__.0+0xcad0>
    8002dd8c:	00005517          	auipc	a0,0x5
    8002dd90:	95450513          	addi	a0,a0,-1708 # 800326e0 <__func__.0+0x2f8>
    8002dd94:	730010ef          	jal	8002f4c4 <printf>
    8002dd98:	0002e797          	auipc	a5,0x2e
    8002dd9c:	2797c783          	lbu	a5,633(a5) # 8005c011 <excpt+0x1>
    8002dda0:	00005597          	auipc	a1,0x5
    8002dda4:	90858593          	addi	a1,a1,-1784 # 800326a8 <__func__.0+0x2c0>
    8002dda8:	e789                	bnez	a5,8002ddb2 <s_double_trap_10+0xc0>
    8002ddaa:	00005597          	auipc	a1,0x5
    8002ddae:	90e58593          	addi	a1,a1,-1778 # 800326b8 <__func__.0+0x2d0>
    8002ddb2:	00005517          	auipc	a0,0x5
    8002ddb6:	94650513          	addi	a0,a0,-1722 # 800326f8 <__func__.0+0x310>
    8002ddba:	70a010ef          	jal	8002f4c4 <printf>
    8002ddbe:	0002e797          	auipc	a5,0x2e
    8002ddc2:	2537c783          	lbu	a5,595(a5) # 8005c011 <excpt+0x1>
    8002ddc6:	c799                	beqz	a5,8002ddd4 <s_double_trap_10+0xe2>
    8002ddc8:	4529                	li	a0,10
    8002ddca:	3e8000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002ddce:	60a2                	ld	ra,8(sp)
    8002ddd0:	0141                	addi	sp,sp,16
    8002ddd2:	8082                	ret
    TEST_ASSERT("s模式下,当mtvec.mode=vectored,未开启异常代理,发生异常,再产生异常,产生double trap",
    8002ddd4:	00005517          	auipc	a0,0x5
    8002ddd8:	92c50513          	addi	a0,a0,-1748 # 80032700 <__func__.0+0x318>
    8002dddc:	6e8010ef          	jal	8002f4c4 <printf>
    8002dde0:	02900513          	li	a0,41
    8002dde4:	3ce000ef          	jal	8002e1b2 <putchar>
    8002dde8:	4529                	li	a0,10
    8002ddea:	3c8000ef          	jal	8002e1b2 <putchar>
}
    8002ddee:	60a2                	ld	ra,8(sp)
    8002ddf0:	0141                	addi	sp,sp,16
    8002ddf2:	8082                	ret

000000008002ddf4 <s_double_trap_11>:

bool s_double_trap_11() {
    8002ddf4:	1141                	addi	sp,sp,-16

    //U模式下发生异常，不开代理，trap到M模式，在进入陷阱处理的早期阶段发生异常
    TEST_START();
    8002ddf6:	00004597          	auipc	a1,0x4
    8002ddfa:	5aa58593          	addi	a1,a1,1450 # 800323a0 <__func__.3>
    8002ddfe:	00005517          	auipc	a0,0x5
    8002de02:	8ca50513          	addi	a0,a0,-1846 # 800326c8 <__func__.0+0x2e0>
bool s_double_trap_11() {
    8002de06:	e406                	sd	ra,8(sp)
    TEST_START();
    8002de08:	6bc010ef          	jal	8002f4c4 <printf>
    8002de0c:	4529                	li	a0,10
    8002de0e:	3a4000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002de12:	4511                	li	a0,4
    8002de14:	900d30ef          	jal	80000f14 <goto_priv>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002de18:	00002797          	auipc	a5,0x2
    8002de1c:	f5c78793          	addi	a5,a5,-164 # 8002fd74 <vs_test_entry>
    8002de20:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002de24:	00002797          	auipc	a5,0x2
    8002de28:	cc878793          	addi	a5,a5,-824 # 8002faec <hs_test_entry>
    8002de2c:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002de30:	00002797          	auipc	a5,0x2
    8002de34:	a3478793          	addi	a5,a5,-1484 # 8002f864 <m_test_entry>
    8002de38:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002de3c:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002de40:	305025f3          	csrr	a1,mtvec
    8002de44:	00010517          	auipc	a0,0x10
    8002de48:	02450513          	addi	a0,a0,36 # 8003de68 <__func__.0+0xba80>
    8002de4c:	678010ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002de50:	fc9d20ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002de54:	00010517          	auipc	a0,0x10
    8002de58:	02450513          	addi	a0,a0,36 # 8003de78 <__func__.0+0xba90>
    8002de5c:	668010ef          	jal	8002f4c4 <printf>
    trap = 2;
    double_trap_enabled = true;    //用来控制handler中的处理
    8002de60:	4785                	li	a5,1
    goto_priv(PRIV_HU);
    8002de62:	853e                	mv	a0,a5
    trap = 2;
    8002de64:	4709                	li	a4,2
    double_trap_enabled = true;    //用来控制handler中的处理
    8002de66:	0002e697          	auipc	a3,0x2e
    8002de6a:	26f68523          	sb	a5,618(a3) # 8005c0d0 <double_trap_enabled>
    trap = 2;
    8002de6e:	0002e797          	auipc	a5,0x2e
    8002de72:	26e7a523          	sw	a4,618(a5) # 8005c0d8 <trap>
    goto_priv(PRIV_HU);
    8002de76:	89ed30ef          	jal	80000f14 <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002de7a:	6785                	lui	a5,0x1
    8002de7c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002de7e:	f1579073          	csrw	0xf15,a5

    TEST_ASSERT("u模式下,当mtvec.mode=vectored,未开启异常代理,发生异常,再产生异常,产生double trap",
    8002de82:	08c00593          	li	a1,140
    8002de86:	00011617          	auipc	a2,0x11
    8002de8a:	09a60613          	addi	a2,a2,154 # 8003ef20 <__func__.0+0xcb38>
    8002de8e:	00005517          	auipc	a0,0x5
    8002de92:	85250513          	addi	a0,a0,-1966 # 800326e0 <__func__.0+0x2f8>
    8002de96:	62e010ef          	jal	8002f4c4 <printf>
    8002de9a:	0002e797          	auipc	a5,0x2e
    8002de9e:	1777c783          	lbu	a5,375(a5) # 8005c011 <excpt+0x1>
    8002dea2:	00005597          	auipc	a1,0x5
    8002dea6:	80658593          	addi	a1,a1,-2042 # 800326a8 <__func__.0+0x2c0>
    8002deaa:	e789                	bnez	a5,8002deb4 <s_double_trap_11+0xc0>
    8002deac:	00005597          	auipc	a1,0x5
    8002deb0:	80c58593          	addi	a1,a1,-2036 # 800326b8 <__func__.0+0x2d0>
    8002deb4:	00005517          	auipc	a0,0x5
    8002deb8:	84450513          	addi	a0,a0,-1980 # 800326f8 <__func__.0+0x310>
    8002debc:	608010ef          	jal	8002f4c4 <printf>
    8002dec0:	0002e797          	auipc	a5,0x2e
    8002dec4:	1517c783          	lbu	a5,337(a5) # 8005c011 <excpt+0x1>
    8002dec8:	c799                	beqz	a5,8002ded6 <s_double_trap_11+0xe2>
    8002deca:	4529                	li	a0,10
    8002decc:	2e6000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002ded0:	60a2                	ld	ra,8(sp)
    8002ded2:	0141                	addi	sp,sp,16
    8002ded4:	8082                	ret
    TEST_ASSERT("u模式下,当mtvec.mode=vectored,未开启异常代理,发生异常,再产生异常,产生double trap",
    8002ded6:	00005517          	auipc	a0,0x5
    8002deda:	82a50513          	addi	a0,a0,-2006 # 80032700 <__func__.0+0x318>
    8002dede:	5e6010ef          	jal	8002f4c4 <printf>
    8002dee2:	02900513          	li	a0,41
    8002dee6:	2cc000ef          	jal	8002e1b2 <putchar>
    8002deea:	4529                	li	a0,10
    8002deec:	2c6000ef          	jal	8002e1b2 <putchar>
}
    8002def0:	60a2                	ld	ra,8(sp)
    8002def2:	0141                	addi	sp,sp,16
    8002def4:	8082                	ret

000000008002def6 <s_double_trap_66>:

bool s_double_trap_66() {       //nemu和spike不一致，可测
    8002def6:	1141                	addi	sp,sp,-16

    //m模式下，当mtvec.mode=vectored，未开启中断代理，发生2号软件中断，再产生异常，产生double trap  
    TEST_START();
    8002def8:	00004597          	auipc	a1,0x4
    8002defc:	4c058593          	addi	a1,a1,1216 # 800323b8 <__func__.2>
    8002df00:	00004517          	auipc	a0,0x4
    8002df04:	7c850513          	addi	a0,a0,1992 # 800326c8 <__func__.0+0x2e0>
bool s_double_trap_66() {       //nemu和spike不一致，可测
    8002df08:	e406                	sd	ra,8(sp)
    TEST_START();
    8002df0a:	5ba010ef          	jal	8002f4c4 <printf>
    8002df0e:	4529                	li	a0,10
    8002df10:	2a2000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002df14:	4511                	li	a0,4
    8002df16:	fffd20ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MIE);
    8002df1a:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS, MSTATUS_SIE);
    8002df1e:	30016073          	csrsi	mstatus,2

    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002df22:	300025f3          	csrr	a1,mstatus
    8002df26:	00010517          	auipc	a0,0x10
    8002df2a:	f3250513          	addi	a0,a0,-206 # 8003de58 <__func__.0+0xba70>
    8002df2e:	596010ef          	jal	8002f4c4 <printf>

    CSRS(mie, 1ULL << 1);
    8002df32:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002df36:	00002797          	auipc	a5,0x2
    8002df3a:	e3e78793          	addi	a5,a5,-450 # 8002fd74 <vs_test_entry>
    8002df3e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002df42:	00002797          	auipc	a5,0x2
    8002df46:	baa78793          	addi	a5,a5,-1110 # 8002faec <hs_test_entry>
    8002df4a:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002df4e:	00002797          	auipc	a5,0x2
    8002df52:	91678793          	addi	a5,a5,-1770 # 8002f864 <m_test_entry>
    8002df56:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002df5a:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002df5e:	305025f3          	csrr	a1,mtvec
    8002df62:	00010517          	auipc	a0,0x10
    8002df66:	f0650513          	addi	a0,a0,-250 # 8003de68 <__func__.0+0xba80>
    8002df6a:	55a010ef          	jal	8002f4c4 <printf>

    TEST_SETUP_EXCEPT();
    8002df6e:	eabd20ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002df72:	00010517          	auipc	a0,0x10
    8002df76:	f0650513          	addi	a0,a0,-250 # 8003de78 <__func__.0+0xba90>
    8002df7a:	54a010ef          	jal	8002f4c4 <printf>
    trap = 2;
    8002df7e:	4789                	li	a5,2
    8002df80:	0002e717          	auipc	a4,0x2e
    8002df84:	14f72c23          	sw	a5,344(a4) # 8005c0d8 <trap>
    CSRS(mip, 1ULL << 1);
    8002df88:	3447a073          	csrs	mip,a5

    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断处理过程中产生一个非法指令异常",
    8002df8c:	08c00593          	li	a1,140
    8002df90:	00011617          	auipc	a2,0x11
    8002df94:	87860613          	addi	a2,a2,-1928 # 8003e808 <__func__.0+0xc420>
    8002df98:	00004517          	auipc	a0,0x4
    8002df9c:	74850513          	addi	a0,a0,1864 # 800326e0 <__func__.0+0x2f8>
    8002dfa0:	524010ef          	jal	8002f4c4 <printf>
    8002dfa4:	0002e797          	auipc	a5,0x2e
    8002dfa8:	06d7c783          	lbu	a5,109(a5) # 8005c011 <excpt+0x1>
    8002dfac:	00004597          	auipc	a1,0x4
    8002dfb0:	6fc58593          	addi	a1,a1,1788 # 800326a8 <__func__.0+0x2c0>
    8002dfb4:	e789                	bnez	a5,8002dfbe <s_double_trap_66+0xc8>
    8002dfb6:	00004597          	auipc	a1,0x4
    8002dfba:	70258593          	addi	a1,a1,1794 # 800326b8 <__func__.0+0x2d0>
    8002dfbe:	00004517          	auipc	a0,0x4
    8002dfc2:	73a50513          	addi	a0,a0,1850 # 800326f8 <__func__.0+0x310>
    8002dfc6:	4fe010ef          	jal	8002f4c4 <printf>
    8002dfca:	0002e797          	auipc	a5,0x2e
    8002dfce:	0477c783          	lbu	a5,71(a5) # 8005c011 <excpt+0x1>
    8002dfd2:	c799                	beqz	a5,8002dfe0 <s_double_trap_66+0xea>
    8002dfd4:	4529                	li	a0,10
    8002dfd6:	1dc000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002dfda:	60a2                	ld	ra,8(sp)
    8002dfdc:	0141                	addi	sp,sp,16
    8002dfde:	8082                	ret
    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断处理过程中产生一个非法指令异常",
    8002dfe0:	00004517          	auipc	a0,0x4
    8002dfe4:	72050513          	addi	a0,a0,1824 # 80032700 <__func__.0+0x318>
    8002dfe8:	4dc010ef          	jal	8002f4c4 <printf>
    8002dfec:	02900513          	li	a0,41
    8002dff0:	1c2000ef          	jal	8002e1b2 <putchar>
    8002dff4:	4529                	li	a0,10
    8002dff6:	1bc000ef          	jal	8002e1b2 <putchar>
}
    8002dffa:	60a2                	ld	ra,8(sp)
    8002dffc:	0141                	addi	sp,sp,16
    8002dffe:	8082                	ret

000000008002e000 <s_double_trap_12>:


bool s_double_trap_12() {   
    8002e000:	1141                	addi	sp,sp,-16

    //S/U模式下发生中断（非NMI），开代理，trap到HS模式，SDT=1，在进入陷阱处理的早期阶段发生异常
    TEST_START();
    8002e002:	00004597          	auipc	a1,0x4
    8002e006:	3ce58593          	addi	a1,a1,974 # 800323d0 <__func__.1>
    8002e00a:	00004517          	auipc	a0,0x4
    8002e00e:	6be50513          	addi	a0,a0,1726 # 800326c8 <__func__.0+0x2e0>
bool s_double_trap_12() {   
    8002e012:	e406                	sd	ra,8(sp)
    TEST_START();
    8002e014:	4b0010ef          	jal	8002f4c4 <printf>
    8002e018:	4529                	li	a0,10
    8002e01a:	198000ef          	jal	8002e1b2 <putchar>

    goto_priv(PRIV_M);
    8002e01e:	4511                	li	a0,4
    8002e020:	ef5d20ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MIE);
    8002e024:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS, MSTATUS_SIE);
    8002e028:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002e02c:	10016073          	csrsi	sstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002e030:	30316073          	csrsi	mideleg,2
    CSRS(CSR_HIDELEG,1ULL << 1);
    8002e034:	60316073          	csrsi	hideleg,2

    CSRS(mie, 1ULL << 1);
    8002e038:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002e03c:	00002797          	auipc	a5,0x2
    8002e040:	d3878793          	addi	a5,a5,-712 # 8002fd74 <vs_test_entry>
    8002e044:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002e048:	00002797          	auipc	a5,0x2
    8002e04c:	aa478793          	addi	a5,a5,-1372 # 8002faec <hs_test_entry>
    8002e050:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002e054:	00002797          	auipc	a5,0x2
    8002e058:	81078793          	addi	a5,a5,-2032 # 8002f864 <m_test_entry>
    8002e05c:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002e060:	3050e073          	csrsi	mtvec,1

    TEST_SETUP_EXCEPT();
    8002e064:	db5d20ef          	jal	80000e18 <test_setup_except_function>
    printf("入口：");
    8002e068:	00010517          	auipc	a0,0x10
    8002e06c:	e1050513          	addi	a0,a0,-496 # 8003de78 <__func__.0+0xba90>
    8002e070:	454010ef          	jal	8002f4c4 <printf>
    trap = 2;
    8002e074:	4709                	li	a4,2
    double_trap_enabled = true;    //用来控制handler中的处理
    8002e076:	4785                	li	a5,1

    goto_priv(PRIV_HS);
    8002e078:	450d                	li	a0,3
    trap = 2;
    8002e07a:	0002e697          	auipc	a3,0x2e
    8002e07e:	04e6af23          	sw	a4,94(a3) # 8005c0d8 <trap>
    double_trap_enabled = true;    //用来控制handler中的处理
    8002e082:	0002e717          	auipc	a4,0x2e
    8002e086:	04f70723          	sb	a5,78(a4) # 8005c0d0 <double_trap_enabled>
    goto_priv(PRIV_HS);
    8002e08a:	e8bd20ef          	jal	80000f14 <goto_priv>
    CSRS(sip, 1ULL << 1);
    8002e08e:	14416073          	csrsi	sip,2

    TEST_ASSERT("s模式下,mtvec.mode=vectored.未开启中断代理,产生2号supervisor软件中断处理过程中产生一个非法指令异常",
    8002e092:	08c00593          	li	a1,140
    8002e096:	00011617          	auipc	a2,0x11
    8002e09a:	c3260613          	addi	a2,a2,-974 # 8003ecc8 <__func__.0+0xc8e0>
    8002e09e:	00004517          	auipc	a0,0x4
    8002e0a2:	64250513          	addi	a0,a0,1602 # 800326e0 <__func__.0+0x2f8>
    8002e0a6:	41e010ef          	jal	8002f4c4 <printf>
    8002e0aa:	0002e797          	auipc	a5,0x2e
    8002e0ae:	f677c783          	lbu	a5,-153(a5) # 8005c011 <excpt+0x1>
    8002e0b2:	00004597          	auipc	a1,0x4
    8002e0b6:	5f658593          	addi	a1,a1,1526 # 800326a8 <__func__.0+0x2c0>
    8002e0ba:	e789                	bnez	a5,8002e0c4 <s_double_trap_12+0xc4>
    8002e0bc:	00004597          	auipc	a1,0x4
    8002e0c0:	5fc58593          	addi	a1,a1,1532 # 800326b8 <__func__.0+0x2d0>
    8002e0c4:	00004517          	auipc	a0,0x4
    8002e0c8:	63450513          	addi	a0,a0,1588 # 800326f8 <__func__.0+0x310>
    8002e0cc:	3f8010ef          	jal	8002f4c4 <printf>
    8002e0d0:	0002e797          	auipc	a5,0x2e
    8002e0d4:	f417c783          	lbu	a5,-191(a5) # 8005c011 <excpt+0x1>
    8002e0d8:	c799                	beqz	a5,8002e0e6 <s_double_trap_12+0xe6>
    8002e0da:	4529                	li	a0,10
    8002e0dc:	0d6000ef          	jal	8002e1b2 <putchar>
        excpt.triggered == true 
    ); 
}
    8002e0e0:	60a2                	ld	ra,8(sp)
    8002e0e2:	0141                	addi	sp,sp,16
    8002e0e4:	8082                	ret
    TEST_ASSERT("s模式下,mtvec.mode=vectored.未开启中断代理,产生2号supervisor软件中断处理过程中产生一个非法指令异常",
    8002e0e6:	00004517          	auipc	a0,0x4
    8002e0ea:	61a50513          	addi	a0,a0,1562 # 80032700 <__func__.0+0x318>
    8002e0ee:	3d6010ef          	jal	8002f4c4 <printf>
    8002e0f2:	02900513          	li	a0,41
    8002e0f6:	0bc000ef          	jal	8002e1b2 <putchar>
    8002e0fa:	4529                	li	a0,10
    8002e0fc:	0b6000ef          	jal	8002e1b2 <putchar>
}
    8002e100:	60a2                	ld	ra,8(sp)
    8002e102:	0141                	addi	sp,sp,16
    8002e104:	8082                	ret

000000008002e106 <rnnmi_handler>:




bool rnnmi_handler() {    
    8002e106:	1141                	addi	sp,sp,-16

    //mnstatus.NMIE is 1、mstatus.mdt=1时，trap到m模式
    TEST_START();
    8002e108:	00004597          	auipc	a1,0x4
    8002e10c:	2e058593          	addi	a1,a1,736 # 800323e8 <__func__.0>
    8002e110:	00004517          	auipc	a0,0x4
    8002e114:	5b850513          	addi	a0,a0,1464 # 800326c8 <__func__.0+0x2e0>
bool rnnmi_handler() {    
    8002e118:	e406                	sd	ra,8(sp)
    TEST_START();
    8002e11a:	3aa010ef          	jal	8002f4c4 <printf>
    8002e11e:	4529                	li	a0,10
    8002e120:	092000ef          	jal	8002e1b2 <putchar>
    goto_priv(PRIV_M);
    8002e124:	4511                	li	a0,4
    8002e126:	defd20ef          	jal	80000f14 <goto_priv>
    CSRS(CSR_MNSTATUS,1ULL << 3);
    8002e12a:	74446073          	csrsi	0x744,8
    CSRS(CSR_MSTATUS,1ULL << 42);
    8002e12e:	4785                	li	a5,1
    8002e130:	17aa                	slli	a5,a5,0x2a
    8002e132:	3007a073          	csrs	mstatus,a5

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002e136:	00002797          	auipc	a5,0x2
    8002e13a:	c3e78793          	addi	a5,a5,-962 # 8002fd74 <vs_test_entry>
    8002e13e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002e142:	00001797          	auipc	a5,0x1
    8002e146:	72278793          	addi	a5,a5,1826 # 8002f864 <m_test_entry>
    8002e14a:	30579073          	csrw	mtvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002e14e:	00002797          	auipc	a5,0x2
    8002e152:	99e78793          	addi	a5,a5,-1634 # 8002faec <hs_test_entry>
    8002e156:	10579073          	csrw	stvec,a5
    printf("mnstatus.NMIE is 1、mstatus.mdt=1时，trap到m模式，预期进入rnnmi处理程序（检查mnepc和mncause）\n");
    8002e15a:	00011517          	auipc	a0,0x11
    8002e15e:	e2e50513          	addi	a0,a0,-466 # 8003ef88 <__func__.0+0xcba0>
    8002e162:	79f000ef          	jal	8002f100 <puts>
    printf("入口：");
    8002e166:	00010517          	auipc	a0,0x10
    8002e16a:	d1250513          	addi	a0,a0,-750 # 8003de78 <__func__.0+0xba90>
    8002e16e:	356010ef          	jal	8002f4c4 <printf>
    TEST_SETUP_EXCEPT();
    8002e172:	ca7d20ef          	jal	80000e18 <test_setup_except_function>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002e176:	6785                	lui	a5,0x1
    8002e178:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002e17a:	f1579073          	csrw	0xf15,a5
    printf("mnepc=%llx\n",CSRR(CSR_MNEPC));
    8002e17e:	741025f3          	csrr	a1,0x741
    8002e182:	0000b517          	auipc	a0,0xb
    8002e186:	70e50513          	addi	a0,a0,1806 # 80039890 <__func__.0+0x74a8>
    8002e18a:	33a010ef          	jal	8002f4c4 <printf>
    printf("mncause=%llx\n",CSRR(CSR_MNCAUSE));
    8002e18e:	742025f3          	csrr	a1,0x742
    8002e192:	0000b517          	auipc	a0,0xb
    8002e196:	6ee50513          	addi	a0,a0,1774 # 80039880 <__func__.0+0x7498>
    8002e19a:	32a010ef          	jal	8002f4c4 <printf>

}
    8002e19e:	60a2                	ld	ra,8(sp)
    8002e1a0:	0141                	addi	sp,sp,16
    8002e1a2:	8082                	ret

000000008002e1a4 <sprintf_putch.0>:
  va_start(ap, fmt);

  void sprintf_putch(int ch, void** data)
  {
    char** pstr = (char**)data;
    **pstr = ch;
    8002e1a4:	619c                	ld	a5,0(a1)
    8002e1a6:	00a78023          	sb	a0,0(a5)
    (*pstr)++;
    8002e1aa:	619c                	ld	a5,0(a1)
    8002e1ac:	0785                	addi	a5,a5,1
    8002e1ae:	e19c                	sd	a5,0(a1)
  }
    8002e1b0:	8082                	ret

000000008002e1b2 <putchar>:
  buf[buflen++] = ch;
    8002e1b2:	0002e797          	auipc	a5,0x2e
    8002e1b6:	f2a7a783          	lw	a5,-214(a5) # 8005c0dc <buflen.2>
    8002e1ba:	0002e697          	auipc	a3,0x2e
    8002e1be:	ec668693          	addi	a3,a3,-314 # 8005c080 <buf.1>
{
    8002e1c2:	7159                	addi	sp,sp,-112
  buf[buflen++] = ch;
    8002e1c4:	00f68733          	add	a4,a3,a5
    8002e1c8:	2785                	addiw	a5,a5,1
    8002e1ca:	00a70023          	sb	a0,0(a4)
    8002e1ce:	0002e717          	auipc	a4,0x2e
    8002e1d2:	f0f72723          	sw	a5,-242(a4) # 8005c0dc <buflen.2>
{
    8002e1d6:	03f10713          	addi	a4,sp,63
  if (ch == '\n' || buflen == sizeof(buf))
    8002e1da:	4629                	li	a2,10
{
    8002e1dc:	fc077713          	andi	a4,a4,-64
  if (ch == '\n' || buflen == sizeof(buf))
    8002e1e0:	00c50963          	beq	a0,a2,8002e1f2 <putchar+0x40>
    8002e1e4:	04000613          	li	a2,64
    8002e1e8:	00c78563          	beq	a5,a2,8002e1f2 <putchar+0x40>
}
    8002e1ec:	4501                	li	a0,0
    8002e1ee:	6165                	addi	sp,sp,112
    8002e1f0:	8082                	ret
  magic_mem[0] = which;
    8002e1f2:	04000613          	li	a2,64
    8002e1f6:	e310                	sd	a2,0(a4)
  magic_mem[1] = arg0;
    8002e1f8:	4605                	li	a2,1
    8002e1fa:	e710                	sd	a2,8(a4)
  magic_mem[2] = arg1;
    8002e1fc:	eb14                	sd	a3,16(a4)
  magic_mem[3] = arg2;
    8002e1fe:	ef1c                	sd	a5,24(a4)
  __sync_synchronize();
    8002e200:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002e204:	00014697          	auipc	a3,0x14
    8002e208:	e3c68693          	addi	a3,a3,-452 # 80042040 <fromhost>
    8002e20c:	00014797          	auipc	a5,0x14
    8002e210:	dee7ba23          	sd	a4,-524(a5) # 80042000 <tohost>
  while (fromhost == 0)
    8002e214:	629c                	ld	a5,0(a3)
    8002e216:	dffd                	beqz	a5,8002e214 <putchar+0x62>
  fromhost = 0;
    8002e218:	00014797          	auipc	a5,0x14
    8002e21c:	e207b423          	sd	zero,-472(a5) # 80042040 <fromhost>
  __sync_synchronize();
    8002e220:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002e224:	631c                	ld	a5,0(a4)
}
    8002e226:	4501                	li	a0,0
    buflen = 0;
    8002e228:	0002e797          	auipc	a5,0x2e
    8002e22c:	ea07aa23          	sw	zero,-332(a5) # 8005c0dc <buflen.2>
}
    8002e230:	6165                	addi	sp,sp,112
    8002e232:	8082                	ret

000000008002e234 <vprintfmt.constprop.0>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    8002e234:	716d                	addi	sp,sp,-272
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002e236:	02500313          	li	t1,37
    switch (ch = *(unsigned char *) fmt++) {
    8002e23a:	05500e93          	li	t4,85
    8002e23e:	00004e17          	auipc	t3,0x4
    8002e242:	1bae0e13          	addi	t3,t3,442 # 800323f8 <__func__.0+0x10>
    8002e246:	a809                	j	8002e258 <vprintfmt.constprop.0+0x24>
      if (ch == '\0')
    8002e248:	c729                	beqz	a4,8002e292 <vprintfmt.constprop.0+0x5e>
    **pstr = ch;
    8002e24a:	6118                	ld	a4,0(a0)
      fmt++;
    8002e24c:	0585                	addi	a1,a1,1
    **pstr = ch;
    8002e24e:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    8002e252:	611c                	ld	a5,0(a0)
    8002e254:	0785                	addi	a5,a5,1
    8002e256:	e11c                	sd	a5,0(a0)
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002e258:	0005c783          	lbu	a5,0(a1)
    8002e25c:	0007871b          	sext.w	a4,a5
    8002e260:	fe6794e3          	bne	a5,t1,8002e248 <vprintfmt.constprop.0+0x14>
    switch (ch = *(unsigned char *) fmt++) {
    8002e264:	0015c803          	lbu	a6,1(a1)
    fmt++;
    8002e268:	00158893          	addi	a7,a1,1
    precision = -1;
    8002e26c:	577d                	li	a4,-1
    fmt++;
    8002e26e:	86c6                	mv	a3,a7
    width = -1;
    8002e270:	8fba                	mv	t6,a4
    padc = ' ';
    8002e272:	02000293          	li	t0,32
    lflag = 0;
    8002e276:	4f01                	li	t5,0
    switch (ch = *(unsigned char *) fmt++) {
    8002e278:	fdd8079b          	addiw	a5,a6,-35
    8002e27c:	0ff7f793          	zext.b	a5,a5
    8002e280:	00168593          	addi	a1,a3,1
    8002e284:	02fee563          	bltu	t4,a5,8002e2ae <vprintfmt.constprop.0+0x7a>
    8002e288:	078a                	slli	a5,a5,0x2
    8002e28a:	97f2                	add	a5,a5,t3
    8002e28c:	439c                	lw	a5,0(a5)
    8002e28e:	97f2                	add	a5,a5,t3
    8002e290:	8782                	jr	a5
}
    8002e292:	6151                	addi	sp,sp,272
    8002e294:	8082                	ret
      padc = '0';
    8002e296:	82c2                	mv	t0,a6
      goto reswitch;
    8002e298:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    8002e29c:	86ae                	mv	a3,a1
    8002e29e:	00168593          	addi	a1,a3,1
    8002e2a2:	fdd8079b          	addiw	a5,a6,-35
    8002e2a6:	0ff7f793          	zext.b	a5,a5
    8002e2aa:	fcfeffe3          	bgeu	t4,a5,8002e288 <vprintfmt.constprop.0+0x54>
    **pstr = ch;
    8002e2ae:	611c                	ld	a5,0(a0)
    8002e2b0:	02500713          	li	a4,37
      fmt = last_fmt;
    8002e2b4:	85c6                	mv	a1,a7
    **pstr = ch;
    8002e2b6:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002e2ba:	611c                	ld	a5,0(a0)
    8002e2bc:	0785                	addi	a5,a5,1
    8002e2be:	e11c                	sd	a5,0(a0)
  }
    8002e2c0:	bf61                	j	8002e258 <vprintfmt.constprop.0+0x24>
    8002e2c2:	e622                	sd	s0,264(sp)
        precision = precision * 10 + ch - '0';
    8002e2c4:	fd08071b          	addiw	a4,a6,-48
        ch = *fmt;
    8002e2c8:	0016c803          	lbu	a6,1(a3)
        if (ch < '0' || ch > '9')
    8002e2cc:	4425                	li	s0,9
    switch (ch = *(unsigned char *) fmt++) {
    8002e2ce:	86ae                	mv	a3,a1
        if (ch < '0' || ch > '9')
    8002e2d0:	fd08079b          	addiw	a5,a6,-48
        ch = *fmt;
    8002e2d4:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    8002e2d8:	02f46463          	bltu	s0,a5,8002e300 <vprintfmt.constprop.0+0xcc>
        precision = precision * 10 + ch - '0';
    8002e2dc:	0027179b          	slliw	a5,a4,0x2
        ch = *fmt;
    8002e2e0:	0016c803          	lbu	a6,1(a3)
        precision = precision * 10 + ch - '0';
    8002e2e4:	9fb9                	addw	a5,a5,a4
    8002e2e6:	0017979b          	slliw	a5,a5,0x1
    8002e2ea:	007787bb          	addw	a5,a5,t2
        if (ch < '0' || ch > '9')
    8002e2ee:	fd08059b          	addiw	a1,a6,-48
      for (precision = 0; ; ++fmt) {
    8002e2f2:	0685                	addi	a3,a3,1
        precision = precision * 10 + ch - '0';
    8002e2f4:	fd07871b          	addiw	a4,a5,-48
        ch = *fmt;
    8002e2f8:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    8002e2fc:	feb470e3          	bgeu	s0,a1,8002e2dc <vprintfmt.constprop.0+0xa8>
    switch (ch = *(unsigned char *) fmt++) {
    8002e300:	6432                	ld	s0,264(sp)
      if (width < 0)
    8002e302:	f60fdbe3          	bgez	t6,8002e278 <vprintfmt.constprop.0+0x44>
        width = precision, precision = -1;
    8002e306:	8fba                	mv	t6,a4
    8002e308:	577d                	li	a4,-1
    8002e30a:	b7bd                	j	8002e278 <vprintfmt.constprop.0+0x44>
        ch = *fmt;
    8002e30c:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    8002e310:	86ae                	mv	a3,a1
      goto reswitch;
    8002e312:	b79d                	j	8002e278 <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    8002e314:	611c                	ld	a5,0(a0)
    8002e316:	02500713          	li	a4,37
    8002e31a:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002e31e:	611c                	ld	a5,0(a0)
    8002e320:	0785                	addi	a5,a5,1
    8002e322:	e11c                	sd	a5,0(a0)
  }
    8002e324:	bf15                	j	8002e258 <vprintfmt.constprop.0+0x24>
        ch = *fmt;
    8002e326:	0016c803          	lbu	a6,1(a3)
      precision = va_arg(ap, int);
    8002e32a:	4218                	lw	a4,0(a2)
    switch (ch = *(unsigned char *) fmt++) {
    8002e32c:	86ae                	mv	a3,a1
      precision = va_arg(ap, int);
    8002e32e:	0621                	addi	a2,a2,8
      goto process_precision;
    8002e330:	bfc9                	j	8002e302 <vprintfmt.constprop.0+0xce>
    **pstr = ch;
    8002e332:	611c                	ld	a5,0(a0)
    8002e334:	03000693          	li	a3,48
    8002e338:	07800713          	li	a4,120
    8002e33c:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    8002e340:	611c                	ld	a5,0(a0)
    8002e342:	4841                	li	a6,16
    8002e344:	00860693          	addi	a3,a2,8
    8002e348:	00178893          	addi	a7,a5,1
    8002e34c:	01153023          	sd	a7,0(a0)
    **pstr = ch;
    8002e350:	00e780a3          	sb	a4,1(a5)
    (*pstr)++;
    8002e354:	611c                	ld	a5,0(a0)
    8002e356:	0785                	addi	a5,a5,1
    8002e358:	e11c                	sd	a5,0(a0)
    return va_arg(*ap, unsigned long);
    8002e35a:	6218                	ld	a4,0(a2)
    8002e35c:	8636                	mv	a2,a3
    digs[pos++] = num % base;
    8002e35e:	03077f33          	remu	t5,a4,a6
    8002e362:	00410893          	addi	a7,sp,4
    8002e366:	4685                	li	a3,1
    8002e368:	c07a                	sw	t5,0(sp)
    if (num < base)
    8002e36a:	1b076c63          	bltu	a4,a6,8002e522 <vprintfmt.constprop.0+0x2ee>
    num /= base;
    8002e36e:	03075733          	divu	a4,a4,a6
    digs[pos++] = num % base;
    8002e372:	83b6                	mv	t2,a3
    if (num < base)
    8002e374:	0891                	addi	a7,a7,4
    digs[pos++] = num % base;
    8002e376:	2685                	addiw	a3,a3,1
    8002e378:	03077f33          	remu	t5,a4,a6
    8002e37c:	ffe8ae23          	sw	t5,-4(a7)
    if (num < base)
    8002e380:	ff0777e3          	bgeu	a4,a6,8002e36e <vprintfmt.constprop.0+0x13a>
  while (width-- > pos)
    8002e384:	ffff871b          	addiw	a4,t6,-1
    8002e388:	fff6881b          	addiw	a6,a3,-1
    8002e38c:	01f6da63          	bge	a3,t6,8002e3a0 <vprintfmt.constprop.0+0x16c>
    **pstr = ch;
    8002e390:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    8002e394:	611c                	ld	a5,0(a0)
  while (width-- > pos)
    8002e396:	377d                	addiw	a4,a4,-1
    (*pstr)++;
    8002e398:	0785                	addi	a5,a5,1
    8002e39a:	e11c                	sd	a5,0(a0)
  while (width-- > pos)
    8002e39c:	ff071ae3          	bne	a4,a6,8002e390 <vprintfmt.constprop.0+0x15c>
  while (pos-- > 0)
    8002e3a0:	038a                	slli	t2,t2,0x2
    8002e3a2:	007106b3          	add	a3,sp,t2
    8002e3a6:	ffc10893          	addi	a7,sp,-4
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002e3aa:	4825                	li	a6,9
    8002e3ac:	a819                	j	8002e3c2 <vprintfmt.constprop.0+0x18e>
    8002e3ae:	0577071b          	addiw	a4,a4,87
    **pstr = ch;
    8002e3b2:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002e3b6:	611c                	ld	a5,0(a0)
  while (pos-- > 0)
    8002e3b8:	16f1                	addi	a3,a3,-4
    (*pstr)++;
    8002e3ba:	0785                	addi	a5,a5,1
    8002e3bc:	e11c                	sd	a5,0(a0)
  while (pos-- > 0)
    8002e3be:	e8d88de3          	beq	a7,a3,8002e258 <vprintfmt.constprop.0+0x24>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002e3c2:	4298                	lw	a4,0(a3)
    8002e3c4:	fee865e3          	bltu	a6,a4,8002e3ae <vprintfmt.constprop.0+0x17a>
    8002e3c8:	0307071b          	addiw	a4,a4,48
    8002e3cc:	b7dd                	j	8002e3b2 <vprintfmt.constprop.0+0x17e>
  if (lflag >= 2)
    8002e3ce:	4785                	li	a5,1
      precision = va_arg(ap, int);
    8002e3d0:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    8002e3d4:	01e7c463          	blt	a5,t5,8002e3dc <vprintfmt.constprop.0+0x1a8>
  else if (lflag)
    8002e3d8:	140f0763          	beqz	t5,8002e526 <vprintfmt.constprop.0+0x2f2>
    return va_arg(*ap, long);
    8002e3dc:	6218                	ld	a4,0(a2)
    **pstr = ch;
    8002e3de:	611c                	ld	a5,0(a0)
      if ((long long) num < 0) {
    8002e3e0:	14074963          	bltz	a4,8002e532 <vprintfmt.constprop.0+0x2fe>
      num = getint(&ap, lflag);
    8002e3e4:	8636                	mv	a2,a3
    8002e3e6:	4829                	li	a6,10
    8002e3e8:	bf9d                	j	8002e35e <vprintfmt.constprop.0+0x12a>
        ch = *fmt;
    8002e3ea:	0016c803          	lbu	a6,1(a3)
      lflag++;
    8002e3ee:	2f05                	addiw	t5,t5,1
    switch (ch = *(unsigned char *) fmt++) {
    8002e3f0:	86ae                	mv	a3,a1
      goto reswitch;
    8002e3f2:	b559                	j	8002e278 <vprintfmt.constprop.0+0x44>
    switch (ch = *(unsigned char *) fmt++) {
    8002e3f4:	4841                	li	a6,16
  if (lflag >= 2)
    8002e3f6:	4705                	li	a4,1
    **pstr = ch;
    8002e3f8:	611c                	ld	a5,0(a0)
      precision = va_arg(ap, int);
    8002e3fa:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    8002e3fe:	f5e74ee3          	blt	a4,t5,8002e35a <vprintfmt.constprop.0+0x126>
  else if (lflag)
    8002e402:	f40f1ce3          	bnez	t5,8002e35a <vprintfmt.constprop.0+0x126>
    return va_arg(*ap, unsigned int);
    8002e406:	00066703          	lwu	a4,0(a2)
    8002e40a:	8636                	mv	a2,a3
    8002e40c:	bf89                	j	8002e35e <vprintfmt.constprop.0+0x12a>
      if ((p = va_arg(ap, char *)) == NULL)
    8002e40e:	6214                	ld	a3,0(a2)
    8002e410:	ca99                	beqz	a3,8002e426 <vprintfmt.constprop.0+0x1f2>
      if (width > 0 && padc != '-')
    8002e412:	07f05663          	blez	t6,8002e47e <vprintfmt.constprop.0+0x24a>
    8002e416:	02d00793          	li	a5,45
    8002e41a:	02f29863          	bne	t0,a5,8002e44a <vprintfmt.constprop.0+0x216>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002e41e:	0006c783          	lbu	a5,0(a3)
    8002e422:	e3ad                	bnez	a5,8002e484 <vprintfmt.constprop.0+0x250>
    8002e424:	a879                	j	8002e4c2 <vprintfmt.constprop.0+0x28e>
        p = "(null)";
    8002e426:	00011697          	auipc	a3,0x11
    8002e42a:	bda68693          	addi	a3,a3,-1062 # 8003f000 <__func__.0+0xcc18>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002e42e:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    8002e432:	05f05963          	blez	t6,8002e484 <vprintfmt.constprop.0+0x250>
    8002e436:	02d00813          	li	a6,45
        p = "(null)";
    8002e43a:	00011697          	auipc	a3,0x11
    8002e43e:	bc668693          	addi	a3,a3,-1082 # 8003f000 <__func__.0+0xcc18>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002e442:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    8002e446:	03028f63          	beq	t0,a6,8002e484 <vprintfmt.constprop.0+0x250>
  const char *p = s;
    8002e44a:	87b6                	mv	a5,a3
  while (n-- && *p)
    8002e44c:	00e688b3          	add	a7,a3,a4
    8002e450:	e709                	bnez	a4,8002e45a <vprintfmt.constprop.0+0x226>
    8002e452:	a829                	j	8002e46c <vprintfmt.constprop.0+0x238>
    p++;
    8002e454:	0785                	addi	a5,a5,1
  while (n-- && *p)
    8002e456:	01178663          	beq	a5,a7,8002e462 <vprintfmt.constprop.0+0x22e>
    8002e45a:	0007c803          	lbu	a6,0(a5)
    8002e45e:	fe081be3          	bnez	a6,8002e454 <vprintfmt.constprop.0+0x220>
  return p - s;
    8002e462:	8f95                	sub	a5,a5,a3
        for (width -= strnlen(p, precision); width > 0; width--)
    8002e464:	40ff8fbb          	subw	t6,t6,a5
    8002e468:	01f05b63          	blez	t6,8002e47e <vprintfmt.constprop.0+0x24a>
    **pstr = ch;
    8002e46c:	611c                	ld	a5,0(a0)
    8002e46e:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    8002e472:	611c                	ld	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002e474:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    8002e476:	0785                	addi	a5,a5,1
    8002e478:	e11c                	sd	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002e47a:	fe0f9ae3          	bnez	t6,8002e46e <vprintfmt.constprop.0+0x23a>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002e47e:	0006c783          	lbu	a5,0(a3)
    8002e482:	cbb9                	beqz	a5,8002e4d8 <vprintfmt.constprop.0+0x2a4>
    8002e484:	58fd                	li	a7,-1
    8002e486:	04075b63          	bgez	a4,8002e4dc <vprintfmt.constprop.0+0x2a8>
    **pstr = ch;
    8002e48a:	6118                	ld	a4,0(a0)
        p++;
    8002e48c:	00168813          	addi	a6,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002e490:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    8002e492:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    8002e496:	611c                	ld	a5,0(a0)
    8002e498:	8742                	mv	a4,a6
    8002e49a:	0785                	addi	a5,a5,1
    8002e49c:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002e49e:	0016c683          	lbu	a3,1(a3)
    8002e4a2:	ce91                	beqz	a3,8002e4be <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    8002e4a4:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    8002e4a8:	611c                	ld	a5,0(a0)
        p++;
    8002e4aa:	0705                	addi	a4,a4,1
    (*pstr)++;
    8002e4ac:	0785                	addi	a5,a5,1
    8002e4ae:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002e4b0:	00074683          	lbu	a3,0(a4)
    8002e4b4:	fae5                	bnez	a3,8002e4a4 <vprintfmt.constprop.0+0x270>
    8002e4b6:	40e8083b          	subw	a6,a6,a4
    8002e4ba:	01f80fbb          	addw	t6,a6,t6
      for (; width > 0; width--)
    8002e4be:	01f05d63          	blez	t6,8002e4d8 <vprintfmt.constprop.0+0x2a4>
    **pstr = ch;
    8002e4c2:	611c                	ld	a5,0(a0)
    8002e4c4:	02000713          	li	a4,32
    8002e4c8:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002e4cc:	611c                	ld	a5,0(a0)
      for (; width > 0; width--)
    8002e4ce:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    8002e4d0:	0785                	addi	a5,a5,1
    8002e4d2:	e11c                	sd	a5,0(a0)
      for (; width > 0; width--)
    8002e4d4:	fe0f9ae3          	bnez	t6,8002e4c8 <vprintfmt.constprop.0+0x294>
      if ((p = va_arg(ap, char *)) == NULL)
    8002e4d8:	0621                	addi	a2,a2,8
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002e4da:	bbbd                	j	8002e258 <vprintfmt.constprop.0+0x24>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002e4dc:	377d                	addiw	a4,a4,-1
    8002e4de:	ff1700e3          	beq	a4,a7,8002e4be <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    8002e4e2:	00053803          	ld	a6,0(a0)
        p++;
    8002e4e6:	0685                	addi	a3,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002e4e8:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    8002e4ea:	00f80023          	sb	a5,0(a6)
    (*pstr)++;
    8002e4ee:	611c                	ld	a5,0(a0)
    8002e4f0:	0785                	addi	a5,a5,1
    8002e4f2:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002e4f4:	0006c783          	lbu	a5,0(a3)
    8002e4f8:	f3f5                	bnez	a5,8002e4dc <vprintfmt.constprop.0+0x2a8>
    8002e4fa:	b7d1                	j	8002e4be <vprintfmt.constprop.0+0x28a>
      if (width < 0)
    8002e4fc:	87fe                	mv	a5,t6
    8002e4fe:	000fd363          	bgez	t6,8002e504 <vprintfmt.constprop.0+0x2d0>
    8002e502:	4781                	li	a5,0
        ch = *fmt;
    8002e504:	0016c803          	lbu	a6,1(a3)
      if (width < 0)
    8002e508:	00078f9b          	sext.w	t6,a5
    switch (ch = *(unsigned char *) fmt++) {
    8002e50c:	86ae                	mv	a3,a1
      goto reswitch;
    8002e50e:	b3ad                	j	8002e278 <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    8002e510:	611c                	ld	a5,0(a0)
    8002e512:	4218                	lw	a4,0(a2)
      putch(va_arg(ap, int), putdat);
    8002e514:	0621                	addi	a2,a2,8
    **pstr = ch;
    8002e516:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002e51a:	611c                	ld	a5,0(a0)
    8002e51c:	0785                	addi	a5,a5,1
    8002e51e:	e11c                	sd	a5,0(a0)
  }
    8002e520:	bb25                	j	8002e258 <vprintfmt.constprop.0+0x24>
    if (num < base)
    8002e522:	4381                	li	t2,0
    8002e524:	b585                	j	8002e384 <vprintfmt.constprop.0+0x150>
    return va_arg(*ap, int);
    8002e526:	4218                	lw	a4,0(a2)
    8002e528:	bd5d                	j	8002e3de <vprintfmt.constprop.0+0x1aa>
    switch (ch = *(unsigned char *) fmt++) {
    8002e52a:	4829                	li	a6,10
    8002e52c:	b5e9                	j	8002e3f6 <vprintfmt.constprop.0+0x1c2>
    8002e52e:	4821                	li	a6,8
    8002e530:	b5d9                	j	8002e3f6 <vprintfmt.constprop.0+0x1c2>
    **pstr = ch;
    8002e532:	02d00613          	li	a2,45
    8002e536:	00c78023          	sb	a2,0(a5)
    (*pstr)++;
    8002e53a:	611c                	ld	a5,0(a0)
        num = -(long long) num;
    8002e53c:	40e00733          	neg	a4,a4
    8002e540:	8636                	mv	a2,a3
    (*pstr)++;
    8002e542:	0785                	addi	a5,a5,1
    8002e544:	e11c                	sd	a5,0(a0)
        num = -(long long) num;
    8002e546:	4829                	li	a6,10
    8002e548:	bd19                	j	8002e35e <vprintfmt.constprop.0+0x12a>

000000008002e54a <vprintfmt.constprop.1>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    8002e54a:	b6010113          	addi	sp,sp,-1184
    8002e54e:	14f10713          	addi	a4,sp,335
    8002e552:	fc077713          	andi	a4,a4,-64
    8002e556:	45b13023          	sd	s11,1088(sp)
    8002e55a:	83ae                	mv	t2,a1
    8002e55c:	48813c23          	sd	s0,1176(sp)
    8002e560:	48913823          	sd	s1,1168(sp)
    8002e564:	49213423          	sd	s2,1160(sp)
    8002e568:	49313023          	sd	s3,1152(sp)
    8002e56c:	47413c23          	sd	s4,1144(sp)
    8002e570:	47513823          	sd	s5,1136(sp)
    8002e574:	47613423          	sd	s6,1128(sp)
  tohost = (uintptr_t)magic_mem;
    8002e578:	2c070f13          	addi	t5,a4,704
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002e57c:	02500593          	li	a1,37
  buf[buflen++] = ch;
    8002e580:	0002e897          	auipc	a7,0x2e
    8002e584:	b5c88893          	addi	a7,a7,-1188 # 8005c0dc <buflen.2>
    8002e588:	0002e697          	auipc	a3,0x2e
    8002e58c:	af868693          	addi	a3,a3,-1288 # 8005c080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002e590:	4829                	li	a6,10
  magic_mem[0] = which;
    8002e592:	04000613          	li	a2,64
  magic_mem[1] = arg0;
    8002e596:	4e85                	li	t4,1
  tohost = (uintptr_t)magic_mem;
    8002e598:	00014e17          	auipc	t3,0x14
    8002e59c:	a68e0e13          	addi	t3,t3,-1432 # 80042000 <tohost>
    8002e5a0:	00014797          	auipc	a5,0x14
    8002e5a4:	aa078793          	addi	a5,a5,-1376 # 80042040 <fromhost>
    switch (ch = *(unsigned char *) fmt++) {
    8002e5a8:	00004d97          	auipc	s11,0x4
    8002e5ac:	fa8d8d93          	addi	s11,s11,-88 # 80032550 <__func__.0+0x168>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002e5b0:	00054f83          	lbu	t6,0(a0)
    8002e5b4:	000f841b          	sext.w	s0,t6
    8002e5b8:	06bf8563          	beq	t6,a1,8002e622 <vprintfmt.constprop.1+0xd8>
      if (ch == '\0')
    8002e5bc:	cc49                	beqz	s0,8002e656 <vprintfmt.constprop.1+0x10c>
  buf[buflen++] = ch;
    8002e5be:	0002e317          	auipc	t1,0x2e
    8002e5c2:	b1e32303          	lw	t1,-1250(t1) # 8005c0dc <buflen.2>
      fmt++;
    8002e5c6:	0505                	addi	a0,a0,1
  buf[buflen++] = ch;
    8002e5c8:	0013029b          	addiw	t0,t1,1
    8002e5cc:	9336                	add	t1,t1,a3
    8002e5ce:	0058a023          	sw	t0,0(a7)
    8002e5d2:	01f30023          	sb	t6,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002e5d6:	01040463          	beq	s0,a6,8002e5de <vprintfmt.constprop.1+0x94>
    8002e5da:	fcc29be3          	bne	t0,a2,8002e5b0 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002e5de:	2cc73023          	sd	a2,704(a4)
  magic_mem[1] = arg0;
    8002e5e2:	2dd73423          	sd	t4,712(a4)
  magic_mem[2] = arg1;
    8002e5e6:	2cd73823          	sd	a3,720(a4)
  magic_mem[3] = arg2;
    8002e5ea:	2c573c23          	sd	t0,728(a4)
  __sync_synchronize();
    8002e5ee:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002e5f2:	01ee3023          	sd	t5,0(t3)
  while (fromhost == 0)
    8002e5f6:	0007b303          	ld	t1,0(a5)
    8002e5fa:	fe030ee3          	beqz	t1,8002e5f6 <vprintfmt.constprop.1+0xac>
  fromhost = 0;
    8002e5fe:	00014317          	auipc	t1,0x14
    8002e602:	a4033123          	sd	zero,-1470(t1) # 80042040 <fromhost>
  __sync_synchronize();
    8002e606:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002e60a:	2c073303          	ld	t1,704(a4)
    buflen = 0;
    8002e60e:	0002e317          	auipc	t1,0x2e
    8002e612:	ac032723          	sw	zero,-1330(t1) # 8005c0dc <buflen.2>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002e616:	00054f83          	lbu	t6,0(a0)
    8002e61a:	000f841b          	sext.w	s0,t6
    8002e61e:	f8bf9fe3          	bne	t6,a1,8002e5bc <vprintfmt.constprop.1+0x72>
    switch (ch = *(unsigned char *) fmt++) {
    8002e622:	00154483          	lbu	s1,1(a0)
    fmt++;
    8002e626:	00150a13          	addi	s4,a0,1
    precision = -1;
    8002e62a:	537d                	li	t1,-1
    fmt++;
    8002e62c:	8452                	mv	s0,s4
    width = -1;
    8002e62e:	8f9a                	mv	t6,t1
    padc = ' ';
    8002e630:	02000a93          	li	s5,32
    lflag = 0;
    8002e634:	4901                	li	s2,0
    switch (ch = *(unsigned char *) fmt++) {
    8002e636:	05500993          	li	s3,85
    8002e63a:	fdd4829b          	addiw	t0,s1,-35
    8002e63e:	0ff2f293          	zext.b	t0,t0
    8002e642:	00140513          	addi	a0,s0,1
    8002e646:	0459e763          	bltu	s3,t0,8002e694 <vprintfmt.constprop.1+0x14a>
    8002e64a:	028a                	slli	t0,t0,0x2
    8002e64c:	92ee                	add	t0,t0,s11
    8002e64e:	0002ab03          	lw	s6,0(t0)
    8002e652:	9b6e                	add	s6,s6,s11
    8002e654:	8b02                	jr	s6
}
    8002e656:	49813403          	ld	s0,1176(sp)
    8002e65a:	49013483          	ld	s1,1168(sp)
    8002e65e:	48813903          	ld	s2,1160(sp)
    8002e662:	48013983          	ld	s3,1152(sp)
    8002e666:	47813a03          	ld	s4,1144(sp)
    8002e66a:	47013a83          	ld	s5,1136(sp)
    8002e66e:	46813b03          	ld	s6,1128(sp)
    8002e672:	44013d83          	ld	s11,1088(sp)
    8002e676:	4a010113          	addi	sp,sp,1184
    8002e67a:	8082                	ret
      padc = '0';
    8002e67c:	8aa6                	mv	s5,s1
      goto reswitch;
    8002e67e:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    8002e682:	842a                	mv	s0,a0
    8002e684:	00140513          	addi	a0,s0,1
    8002e688:	fdd4829b          	addiw	t0,s1,-35
    8002e68c:	0ff2f293          	zext.b	t0,t0
    8002e690:	fa59fde3          	bgeu	s3,t0,8002e64a <vprintfmt.constprop.1+0x100>
  buf[buflen++] = ch;
    8002e694:	0002e317          	auipc	t1,0x2e
    8002e698:	a4832303          	lw	t1,-1464(t1) # 8005c0dc <buflen.2>
    8002e69c:	0002ef97          	auipc	t6,0x2e
    8002e6a0:	9e4f8f93          	addi	t6,t6,-1564 # 8005c080 <buf.1>
    8002e6a4:	02500293          	li	t0,37
    8002e6a8:	0013051b          	addiw	a0,t1,1
    8002e6ac:	937e                	add	t1,t1,t6
    8002e6ae:	00530023          	sb	t0,0(t1)
    8002e6b2:	0002e417          	auipc	s0,0x2e
    8002e6b6:	a2a42523          	sw	a0,-1494(s0) # 8005c0dc <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002e6ba:	04000313          	li	t1,64
    8002e6be:	56650f63          	beq	a0,t1,8002ec3c <vprintfmt.constprop.1+0x6f2>
      fmt = last_fmt;
    8002e6c2:	8552                	mv	a0,s4
    8002e6c4:	b5f5                	j	8002e5b0 <vprintfmt.constprop.1+0x66>
    8002e6c6:	47713023          	sd	s7,1120(sp)
        precision = precision * 10 + ch - '0';
    8002e6ca:	fd04831b          	addiw	t1,s1,-48
        ch = *fmt;
    8002e6ce:	00144483          	lbu	s1,1(s0)
        if (ch < '0' || ch > '9')
    8002e6d2:	4ba5                	li	s7,9
    8002e6d4:	fd04841b          	addiw	s0,s1,-48
        ch = *fmt;
    8002e6d8:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    8002e6dc:	088befe3          	bltu	s7,s0,8002ef7a <vprintfmt.constprop.1+0xa30>
    switch (ch = *(unsigned char *) fmt++) {
    8002e6e0:	842a                	mv	s0,a0
        precision = precision * 10 + ch - '0';
    8002e6e2:	0023151b          	slliw	a0,t1,0x2
        ch = *fmt;
    8002e6e6:	00144483          	lbu	s1,1(s0)
        precision = precision * 10 + ch - '0';
    8002e6ea:	0065053b          	addw	a0,a0,t1
    8002e6ee:	0015151b          	slliw	a0,a0,0x1
    8002e6f2:	0055053b          	addw	a0,a0,t0
        if (ch < '0' || ch > '9')
    8002e6f6:	fd048b1b          	addiw	s6,s1,-48
      for (precision = 0; ; ++fmt) {
    8002e6fa:	0405                	addi	s0,s0,1
        precision = precision * 10 + ch - '0';
    8002e6fc:	fd05031b          	addiw	t1,a0,-48
        ch = *fmt;
    8002e700:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    8002e704:	fd6bffe3          	bgeu	s7,s6,8002e6e2 <vprintfmt.constprop.1+0x198>
    switch (ch = *(unsigned char *) fmt++) {
    8002e708:	46013b83          	ld	s7,1120(sp)
      if (width < 0)
    8002e70c:	f20fd7e3          	bgez	t6,8002e63a <vprintfmt.constprop.1+0xf0>
        width = precision, precision = -1;
    8002e710:	8f9a                	mv	t6,t1
    8002e712:	537d                	li	t1,-1
    8002e714:	b71d                	j	8002e63a <vprintfmt.constprop.1+0xf0>
        ch = *fmt;
    8002e716:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    8002e71a:	842a                	mv	s0,a0
      goto reswitch;
    8002e71c:	bf39                	j	8002e63a <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8002e71e:	0002ef97          	auipc	t6,0x2e
    8002e722:	9befaf83          	lw	t6,-1602(t6) # 8005c0dc <buflen.2>
    8002e726:	0002e297          	auipc	t0,0x2e
    8002e72a:	95a28293          	addi	t0,t0,-1702 # 8005c080 <buf.1>
    8002e72e:	02500413          	li	s0,37
    8002e732:	001f831b          	addiw	t1,t6,1
    8002e736:	9f96                	add	t6,t6,t0
    8002e738:	008f8023          	sb	s0,0(t6)
    8002e73c:	0002e497          	auipc	s1,0x2e
    8002e740:	9a64a023          	sw	t1,-1632(s1) # 8005c0dc <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002e744:	04000f93          	li	t6,64
    8002e748:	e7f314e3          	bne	t1,t6,8002e5b0 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002e74c:	04673023          	sd	t1,64(a4)
  magic_mem[1] = arg0;
    8002e750:	4f85                	li	t6,1
    8002e752:	05f73423          	sd	t6,72(a4)
  magic_mem[2] = arg1;
    8002e756:	04573823          	sd	t0,80(a4)
  magic_mem[3] = arg2;
    8002e75a:	04673c23          	sd	t1,88(a4)
  __sync_synchronize();
    8002e75e:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002e762:	04070313          	addi	t1,a4,64
    8002e766:	00014f97          	auipc	t6,0x14
    8002e76a:	886fbd23          	sd	t1,-1894(t6) # 80042000 <tohost>
  while (fromhost == 0)
    8002e76e:	00014317          	auipc	t1,0x14
    8002e772:	8d230313          	addi	t1,t1,-1838 # 80042040 <fromhost>
    8002e776:	00033f83          	ld	t6,0(t1)
    8002e77a:	fe0f8ee3          	beqz	t6,8002e776 <vprintfmt.constprop.1+0x22c>
  fromhost = 0;
    8002e77e:	00014317          	auipc	t1,0x14
    8002e782:	8c033123          	sd	zero,-1854(t1) # 80042040 <fromhost>
  __sync_synchronize();
    8002e786:	0330000f          	fence	rw,rw
    buflen = 0;
    8002e78a:	0002e317          	auipc	t1,0x2e
    8002e78e:	94032923          	sw	zero,-1710(t1) # 8005c0dc <buflen.2>
  return magic_mem[0];
    8002e792:	04073303          	ld	t1,64(a4)
    buflen = 0;
    8002e796:	bd29                	j	8002e5b0 <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    8002e798:	00144483          	lbu	s1,1(s0)
      precision = va_arg(ap, int);
    8002e79c:	0003a303          	lw	t1,0(t2)
    switch (ch = *(unsigned char *) fmt++) {
    8002e7a0:	842a                	mv	s0,a0
      precision = va_arg(ap, int);
    8002e7a2:	03a1                	addi	t2,t2,8
      goto process_precision;
    8002e7a4:	b7a5                	j	8002e70c <vprintfmt.constprop.1+0x1c2>
  buf[buflen++] = ch;
    8002e7a6:	0002e317          	auipc	t1,0x2e
    8002e7aa:	93632303          	lw	t1,-1738(t1) # 8005c0dc <buflen.2>
    8002e7ae:	0002e917          	auipc	s2,0x2e
    8002e7b2:	8d290913          	addi	s2,s2,-1838 # 8005c080 <buf.1>
    8002e7b6:	47713023          	sd	s7,1120(sp)
    8002e7ba:	45813c23          	sd	s8,1112(sp)
    8002e7be:	45913823          	sd	s9,1104(sp)
    8002e7c2:	45a13423          	sd	s10,1096(sp)
    8002e7c6:	00690433          	add	s0,s2,t1
    8002e7ca:	0002e997          	auipc	s3,0x2e
    8002e7ce:	91298993          	addi	s3,s3,-1774 # 8005c0dc <buflen.2>
    8002e7d2:	0013029b          	addiw	t0,t1,1
    8002e7d6:	03000493          	li	s1,48
    8002e7da:	00940023          	sb	s1,0(s0)
    8002e7de:	0059a023          	sw	t0,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002e7e2:	04000413          	li	s0,64
    8002e7e6:	62828d63          	beq	t0,s0,8002ee20 <vprintfmt.constprop.1+0x8d6>
  buf[buflen++] = ch;
    8002e7ea:	2309                	addiw	t1,t1,2
    8002e7ec:	92ca                	add	t0,t0,s2
    8002e7ee:	07800493          	li	s1,120
    8002e7f2:	0069a023          	sw	t1,0(s3)
    8002e7f6:	00928023          	sb	s1,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002e7fa:	42831a63          	bne	t1,s0,8002ec2e <vprintfmt.constprop.1+0x6e4>
  magic_mem[0] = which;
    8002e7fe:	10673023          	sd	t1,256(a4)
  magic_mem[1] = arg0;
    8002e802:	4285                	li	t0,1
    8002e804:	10573423          	sd	t0,264(a4)
  magic_mem[2] = arg1;
    8002e808:	11273823          	sd	s2,272(a4)
  magic_mem[3] = arg2;
    8002e80c:	10673c23          	sd	t1,280(a4)
  __sync_synchronize();
    8002e810:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002e814:	10070313          	addi	t1,a4,256
    8002e818:	00013297          	auipc	t0,0x13
    8002e81c:	7e62b423          	sd	t1,2024(t0) # 80042000 <tohost>
  while (fromhost == 0)
    8002e820:	00014317          	auipc	t1,0x14
    8002e824:	82030313          	addi	t1,t1,-2016 # 80042040 <fromhost>
    8002e828:	00033283          	ld	t0,0(t1)
    8002e82c:	fe028ee3          	beqz	t0,8002e828 <vprintfmt.constprop.1+0x2de>
  fromhost = 0;
    8002e830:	00014317          	auipc	t1,0x14
    8002e834:	80033823          	sd	zero,-2032(t1) # 80042040 <fromhost>
  __sync_synchronize();
    8002e838:	0330000f          	fence	rw,rw
    buflen = 0;
    8002e83c:	0002e317          	auipc	t1,0x2e
    8002e840:	8a032023          	sw	zero,-1888(t1) # 8005c0dc <buflen.2>
  return magic_mem[0];
    8002e844:	10073303          	ld	t1,256(a4)
  else if (lflag)
    8002e848:	00838493          	addi	s1,t2,8
    buflen = 0;
    8002e84c:	4301                	li	t1,0
    8002e84e:	4441                	li	s0,16
    8002e850:	a6d5                	j	8002ec34 <vprintfmt.constprop.1+0x6ea>
    8002e852:	47713023          	sd	s7,1120(sp)
    8002e856:	45813c23          	sd	s8,1112(sp)
    8002e85a:	45913823          	sd	s9,1104(sp)
    8002e85e:	45a13423          	sd	s10,1096(sp)
  if (lflag >= 2)
    8002e862:	4305                	li	t1,1
      precision = va_arg(ap, int);
    8002e864:	00838413          	addi	s0,t2,8
  if (lflag >= 2)
    8002e868:	01234463          	blt	t1,s2,8002e870 <vprintfmt.constprop.1+0x326>
  else if (lflag)
    8002e86c:	3a090e63          	beqz	s2,8002ec28 <vprintfmt.constprop.1+0x6de>
    return va_arg(*ap, long);
    8002e870:	0003b283          	ld	t0,0(t2)
  buf[buflen++] = ch;
    8002e874:	0002e317          	auipc	t1,0x2e
    8002e878:	86832303          	lw	t1,-1944(t1) # 8005c0dc <buflen.2>
    8002e87c:	0002e997          	auipc	s3,0x2e
    8002e880:	86098993          	addi	s3,s3,-1952 # 8005c0dc <buflen.2>
      if ((long long) num < 0) {
    8002e884:	5402cd63          	bltz	t0,8002edde <vprintfmt.constprop.1+0x894>
      num = getint(&ap, lflag);
    8002e888:	83a2                	mv	t2,s0
    8002e88a:	0002d917          	auipc	s2,0x2d
    8002e88e:	7f690913          	addi	s2,s2,2038 # 8005c080 <buf.1>
    8002e892:	4429                	li	s0,10
    digs[pos++] = num % base;
    8002e894:	0282fb33          	remu	s6,t0,s0
    8002e898:	01410a13          	addi	s4,sp,20
    8002e89c:	4485                	li	s1,1
    8002e89e:	c85a                	sw	s6,16(sp)
    if (num < base)
    8002e8a0:	3682e263          	bltu	t0,s0,8002ec04 <vprintfmt.constprop.1+0x6ba>
    num /= base;
    8002e8a4:	0282d2b3          	divu	t0,t0,s0
    digs[pos++] = num % base;
    8002e8a8:	8ba6                	mv	s7,s1
    if (num < base)
    8002e8aa:	0a11                	addi	s4,s4,4
    digs[pos++] = num % base;
    8002e8ac:	2485                	addiw	s1,s1,1
    8002e8ae:	0282fb33          	remu	s6,t0,s0
    8002e8b2:	ff6a2e23          	sw	s6,-4(s4)
    if (num < base)
    8002e8b6:	fe82f7e3          	bgeu	t0,s0,8002e8a4 <vprintfmt.constprop.1+0x35a>
  while (width-- > pos)
    8002e8ba:	ffff829b          	addiw	t0,t6,-1
    8002e8be:	fff48a1b          	addiw	s4,s1,-1
    8002e8c2:	09f4d463          	bge	s1,t6,8002e94a <vprintfmt.constprop.1+0x400>
  if (ch == '\n' || buflen == sizeof(buf))
    8002e8c6:	04000413          	li	s0,64
  magic_mem[1] = arg0;
    8002e8ca:	4c05                	li	s8,1
  tohost = (uintptr_t)magic_mem;
    8002e8cc:	0c070b13          	addi	s6,a4,192
    8002e8d0:	00013497          	auipc	s1,0x13
    8002e8d4:	73048493          	addi	s1,s1,1840 # 80042000 <tohost>
    8002e8d8:	00013f97          	auipc	t6,0x13
    8002e8dc:	768f8f93          	addi	t6,t6,1896 # 80042040 <fromhost>
  buf[buflen++] = ch;
    8002e8e0:	4c89                	li	s9,2
    8002e8e2:	00130d1b          	addiw	s10,t1,1
    8002e8e6:	934a                	add	t1,t1,s2
    8002e8e8:	01a9a023          	sw	s10,0(s3)
    8002e8ec:	01530023          	sb	s5,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002e8f0:	2e8d1863          	bne	s10,s0,8002ebe0 <vprintfmt.constprop.1+0x696>
  magic_mem[0] = which;
    8002e8f4:	e360                	sd	s0,192(a4)
  magic_mem[1] = arg0;
    8002e8f6:	0d873423          	sd	s8,200(a4)
  magic_mem[2] = arg1;
    8002e8fa:	0d273823          	sd	s2,208(a4)
  magic_mem[3] = arg2;
    8002e8fe:	ef60                	sd	s0,216(a4)
  __sync_synchronize();
    8002e900:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002e904:	0164b023          	sd	s6,0(s1)
  while (fromhost == 0)
    8002e908:	000fb303          	ld	t1,0(t6)
    8002e90c:	fe030ee3          	beqz	t1,8002e908 <vprintfmt.constprop.1+0x3be>
  fromhost = 0;
    8002e910:	00013317          	auipc	t1,0x13
    8002e914:	72033823          	sd	zero,1840(t1) # 80042040 <fromhost>
  __sync_synchronize();
    8002e918:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002e91c:	0c073303          	ld	t1,192(a4)
    buflen = 0;
    8002e920:	0002d317          	auipc	t1,0x2d
    8002e924:	7a032e23          	sw	zero,1980(t1) # 8005c0dc <buflen.2>
  while (width-- > pos)
    8002e928:	fff2831b          	addiw	t1,t0,-1
    8002e92c:	2b430c63          	beq	t1,s4,8002ebe4 <vprintfmt.constprop.1+0x69a>
  buf[buflen++] = ch;
    8002e930:	01590023          	sb	s5,0(s2)
  while (width-- > pos)
    8002e934:	32f9                	addiw	t0,t0,-2
    8002e936:	2a5a0963          	beq	s4,t0,8002ebe8 <vprintfmt.constprop.1+0x69e>
  buf[buflen++] = ch;
    8002e93a:	0199a023          	sw	s9,0(s3)
    8002e93e:	015900a3          	sb	s5,1(s2)
    8002e942:	4309                	li	t1,2
  while (width-- > pos)
    8002e944:	32fd                	addiw	t0,t0,-1
    8002e946:	f85a1ee3          	bne	s4,t0,8002e8e2 <vprintfmt.constprop.1+0x398>
  while (pos-- > 0)
    8002e94a:	0b8a                	slli	s7,s7,0x2
    8002e94c:	0800                	addi	s0,sp,16
    8002e94e:	945e                	add	s0,s0,s7
    8002e950:	00c10a93          	addi	s5,sp,12
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002e954:	4a25                	li	s4,9
  magic_mem[0] = which;
    8002e956:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    8002e95a:	4c85                	li	s9,1
  tohost = (uintptr_t)magic_mem;
    8002e95c:	08070c13          	addi	s8,a4,128
    8002e960:	00013b97          	auipc	s7,0x13
    8002e964:	6a0b8b93          	addi	s7,s7,1696 # 80042000 <tohost>
    8002e968:	00013297          	auipc	t0,0x13
    8002e96c:	6d828293          	addi	t0,t0,1752 # 80042040 <fromhost>
  if (ch == '\n' || buflen == sizeof(buf))
    8002e970:	4b29                	li	s6,10
    8002e972:	a831                	j	8002e98e <vprintfmt.constprop.1+0x444>
  buf[buflen++] = ch;
    8002e974:	934a                	add	t1,t1,s2
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002e976:	030f8f9b          	addiw	t6,t6,48
  buf[buflen++] = ch;
    8002e97a:	01f30023          	sb	t6,0(t1)
    8002e97e:	01a9a023          	sw	s10,0(s3)
    8002e982:	836a                	mv	t1,s10
  if (ch == '\n' || buflen == sizeof(buf))
    8002e984:	029d0463          	beq	s10,s1,8002e9ac <vprintfmt.constprop.1+0x462>
  while (pos-- > 0)
    8002e988:	1471                	addi	s0,s0,-4
    8002e98a:	068a8063          	beq	s5,s0,8002e9ea <vprintfmt.constprop.1+0x4a0>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002e98e:	00042f83          	lw	t6,0(s0)
  buf[buflen++] = ch;
    8002e992:	00130d1b          	addiw	s10,t1,1
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002e996:	fdfa7fe3          	bgeu	s4,t6,8002e974 <vprintfmt.constprop.1+0x42a>
    8002e99a:	057f8f9b          	addiw	t6,t6,87
  buf[buflen++] = ch;
    8002e99e:	934a                	add	t1,t1,s2
    8002e9a0:	01f30023          	sb	t6,0(t1)
    8002e9a4:	01a9a023          	sw	s10,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002e9a8:	fd6f9de3          	bne	t6,s6,8002e982 <vprintfmt.constprop.1+0x438>
  magic_mem[0] = which;
    8002e9ac:	e344                	sd	s1,128(a4)
  magic_mem[1] = arg0;
    8002e9ae:	09973423          	sd	s9,136(a4)
  magic_mem[2] = arg1;
    8002e9b2:	09273823          	sd	s2,144(a4)
  magic_mem[3] = arg2;
    8002e9b6:	09a73c23          	sd	s10,152(a4)
  __sync_synchronize();
    8002e9ba:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002e9be:	018bb023          	sd	s8,0(s7)
  while (fromhost == 0)
    8002e9c2:	0002b303          	ld	t1,0(t0)
    8002e9c6:	fe030ee3          	beqz	t1,8002e9c2 <vprintfmt.constprop.1+0x478>
  fromhost = 0;
    8002e9ca:	00013317          	auipc	t1,0x13
    8002e9ce:	66033b23          	sd	zero,1654(t1) # 80042040 <fromhost>
  __sync_synchronize();
    8002e9d2:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002e9d6:	08073303          	ld	t1,128(a4)
  while (pos-- > 0)
    8002e9da:	1471                	addi	s0,s0,-4
    buflen = 0;
    8002e9dc:	0002d317          	auipc	t1,0x2d
    8002e9e0:	70032023          	sw	zero,1792(t1) # 8005c0dc <buflen.2>
    8002e9e4:	4301                	li	t1,0
  while (pos-- > 0)
    8002e9e6:	fa8a94e3          	bne	s5,s0,8002e98e <vprintfmt.constprop.1+0x444>
    8002e9ea:	46013b83          	ld	s7,1120(sp)
    8002e9ee:	45813c03          	ld	s8,1112(sp)
    8002e9f2:	45013c83          	ld	s9,1104(sp)
    8002e9f6:	44813d03          	ld	s10,1096(sp)
    8002e9fa:	be5d                	j	8002e5b0 <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    8002e9fc:	00144483          	lbu	s1,1(s0)
      lflag++;
    8002ea00:	2905                	addiw	s2,s2,1
    switch (ch = *(unsigned char *) fmt++) {
    8002ea02:	842a                	mv	s0,a0
      goto reswitch;
    8002ea04:	b91d                	j	8002e63a <vprintfmt.constprop.1+0xf0>
    8002ea06:	47713023          	sd	s7,1120(sp)
    8002ea0a:	45813c23          	sd	s8,1112(sp)
    8002ea0e:	45913823          	sd	s9,1104(sp)
    8002ea12:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    8002ea16:	4441                	li	s0,16
  if (lflag >= 2)
    8002ea18:	4285                	li	t0,1
  buf[buflen++] = ch;
    8002ea1a:	0002d317          	auipc	t1,0x2d
    8002ea1e:	6c232303          	lw	t1,1730(t1) # 8005c0dc <buflen.2>
      precision = va_arg(ap, int);
    8002ea22:	00838493          	addi	s1,t2,8
  if (lflag >= 2)
    8002ea26:	1d22c363          	blt	t0,s2,8002ebec <vprintfmt.constprop.1+0x6a2>
  else if (lflag)
    8002ea2a:	3e091263          	bnez	s2,8002ee0e <vprintfmt.constprop.1+0x8c4>
    return va_arg(*ap, unsigned int);
    8002ea2e:	0003e283          	lwu	t0,0(t2)
    8002ea32:	0002d997          	auipc	s3,0x2d
    8002ea36:	6aa98993          	addi	s3,s3,1706 # 8005c0dc <buflen.2>
    8002ea3a:	83a6                	mv	t2,s1
    8002ea3c:	0002d917          	auipc	s2,0x2d
    8002ea40:	64490913          	addi	s2,s2,1604 # 8005c080 <buf.1>
    8002ea44:	bd81                	j	8002e894 <vprintfmt.constprop.1+0x34a>
      if ((p = va_arg(ap, char *)) == NULL)
    8002ea46:	0003b483          	ld	s1,0(t2)
    8002ea4a:	47713023          	sd	s7,1120(sp)
    8002ea4e:	45813c23          	sd	s8,1112(sp)
    8002ea52:	45913823          	sd	s9,1104(sp)
    8002ea56:	45a13423          	sd	s10,1096(sp)
    8002ea5a:	42048463          	beqz	s1,8002ee82 <vprintfmt.constprop.1+0x938>
      if (width > 0 && padc != '-')
    8002ea5e:	1bf05563          	blez	t6,8002ec08 <vprintfmt.constprop.1+0x6be>
    8002ea62:	02d00293          	li	t0,45
    8002ea66:	445a9063          	bne	s5,t0,8002eea6 <vprintfmt.constprop.1+0x95c>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ea6a:	0004c283          	lbu	t0,0(s1)
    8002ea6e:	0002899b          	sext.w	s3,t0
    8002ea72:	2c028363          	beqz	t0,8002ed38 <vprintfmt.constprop.1+0x7ee>
  tohost = (uintptr_t)magic_mem;
    8002ea76:	20070413          	addi	s0,a4,512
    8002ea7a:	e422                	sd	s0,8(sp)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ea7c:	5d7d                	li	s10,-1
  buf[buflen++] = ch;
    8002ea7e:	0002db97          	auipc	s7,0x2d
    8002ea82:	65eb8b93          	addi	s7,s7,1630 # 8005c0dc <buflen.2>
    8002ea86:	0002db17          	auipc	s6,0x2d
    8002ea8a:	5fab0b13          	addi	s6,s6,1530 # 8005c080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002ea8e:	4ca9                	li	s9,10
  magic_mem[0] = which;
    8002ea90:	04000c13          	li	s8,64
    8002ea94:	00013917          	auipc	s2,0x13
    8002ea98:	5ac90913          	addi	s2,s2,1452 # 80042040 <fromhost>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ea9c:	04034263          	bltz	t1,8002eae0 <vprintfmt.constprop.1+0x596>
    8002eaa0:	fff30a9b          	addiw	s5,t1,-1
    8002eaa4:	29aa8863          	beq	s5,s10,8002ed34 <vprintfmt.constprop.1+0x7ea>
  buf[buflen++] = ch;
    8002eaa8:	0002d417          	auipc	s0,0x2d
    8002eaac:	63442403          	lw	s0,1588(s0) # 8005c0dc <buflen.2>
    8002eab0:	00140a1b          	addiw	s4,s0,1
    8002eab4:	945a                	add	s0,s0,s6
    8002eab6:	014ba023          	sw	s4,0(s7)
    8002eaba:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002eabe:	03998f63          	beq	s3,s9,8002eafc <vprintfmt.constprop.1+0x5b2>
    8002eac2:	038a0d63          	beq	s4,s8,8002eafc <vprintfmt.constprop.1+0x5b2>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002eac6:	0014c283          	lbu	t0,1(s1)
        p++;
    8002eaca:	0485                	addi	s1,s1,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002eacc:	3ffd                	addiw	t6,t6,-1
    8002eace:	0002899b          	sext.w	s3,t0
    8002ead2:	26028163          	beqz	t0,8002ed34 <vprintfmt.constprop.1+0x7ea>
    8002ead6:	1c034863          	bltz	t1,8002eca6 <vprintfmt.constprop.1+0x75c>
    8002eada:	8356                	mv	t1,s5
    8002eadc:	fc0352e3          	bgez	t1,8002eaa0 <vprintfmt.constprop.1+0x556>
  buf[buflen++] = ch;
    8002eae0:	0002d417          	auipc	s0,0x2d
    8002eae4:	5fc42403          	lw	s0,1532(s0) # 8005c0dc <buflen.2>
    8002eae8:	8a9a                	mv	s5,t1
    8002eaea:	00140a1b          	addiw	s4,s0,1
    8002eaee:	945a                	add	s0,s0,s6
    8002eaf0:	014ba023          	sw	s4,0(s7)
    8002eaf4:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002eaf8:	fd9995e3          	bne	s3,s9,8002eac2 <vprintfmt.constprop.1+0x578>
  magic_mem[0] = which;
    8002eafc:	21873023          	sd	s8,512(a4)
  magic_mem[1] = arg0;
    8002eb00:	4405                	li	s0,1
    8002eb02:	20873423          	sd	s0,520(a4)
  magic_mem[2] = arg1;
    8002eb06:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    8002eb0a:	21473c23          	sd	s4,536(a4)
  __sync_synchronize();
    8002eb0e:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002eb12:	62a2                	ld	t0,8(sp)
    8002eb14:	00013417          	auipc	s0,0x13
    8002eb18:	4ec40413          	addi	s0,s0,1260 # 80042000 <tohost>
    8002eb1c:	00543023          	sd	t0,0(s0)
  while (fromhost == 0)
    8002eb20:	00093283          	ld	t0,0(s2)
    8002eb24:	fe028ee3          	beqz	t0,8002eb20 <vprintfmt.constprop.1+0x5d6>
  fromhost = 0;
    8002eb28:	00013297          	auipc	t0,0x13
    8002eb2c:	5002bc23          	sd	zero,1304(t0) # 80042040 <fromhost>
  __sync_synchronize();
    8002eb30:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002eb34:	20073283          	ld	t0,512(a4)
    buflen = 0;
    8002eb38:	0002d297          	auipc	t0,0x2d
    8002eb3c:	5a02a223          	sw	zero,1444(t0) # 8005c0dc <buflen.2>
    8002eb40:	b759                	j	8002eac6 <vprintfmt.constprop.1+0x57c>
      if (width < 0)
    8002eb42:	82fe                	mv	t0,t6
    8002eb44:	000fd363          	bgez	t6,8002eb4a <vprintfmt.constprop.1+0x600>
    8002eb48:	4281                	li	t0,0
        ch = *fmt;
    8002eb4a:	00144483          	lbu	s1,1(s0)
      if (width < 0)
    8002eb4e:	00028f9b          	sext.w	t6,t0
    switch (ch = *(unsigned char *) fmt++) {
    8002eb52:	842a                	mv	s0,a0
      goto reswitch;
    8002eb54:	b4dd                	j	8002e63a <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8002eb56:	0002d317          	auipc	t1,0x2d
    8002eb5a:	58632303          	lw	t1,1414(t1) # 8005c0dc <buflen.2>
      putch(va_arg(ap, int), putdat);
    8002eb5e:	0003a283          	lw	t0,0(t2)
  buf[buflen++] = ch;
    8002eb62:	0002d917          	auipc	s2,0x2d
    8002eb66:	51e90913          	addi	s2,s2,1310 # 8005c080 <buf.1>
    8002eb6a:	00130f9b          	addiw	t6,t1,1
    8002eb6e:	934a                	add	t1,t1,s2
    8002eb70:	00530023          	sb	t0,0(t1)
    8002eb74:	0002d417          	auipc	s0,0x2d
    8002eb78:	57f42423          	sw	t6,1384(s0) # 8005c0dc <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002eb7c:	4329                	li	t1,10
    8002eb7e:	00628863          	beq	t0,t1,8002eb8e <vprintfmt.constprop.1+0x644>
    8002eb82:	04000313          	li	t1,64
    8002eb86:	006f8463          	beq	t6,t1,8002eb8e <vprintfmt.constprop.1+0x644>
      putch(va_arg(ap, int), putdat);
    8002eb8a:	03a1                	addi	t2,t2,8
    8002eb8c:	b415                	j	8002e5b0 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002eb8e:	04000313          	li	t1,64
    8002eb92:	28673023          	sd	t1,640(a4)
  magic_mem[1] = arg0;
    8002eb96:	4305                	li	t1,1
    8002eb98:	28673423          	sd	t1,648(a4)
  magic_mem[2] = arg1;
    8002eb9c:	29273823          	sd	s2,656(a4)
  magic_mem[3] = arg2;
    8002eba0:	29f73c23          	sd	t6,664(a4)
  __sync_synchronize();
    8002eba4:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002eba8:	28070313          	addi	t1,a4,640
    8002ebac:	00013f97          	auipc	t6,0x13
    8002ebb0:	446fba23          	sd	t1,1108(t6) # 80042000 <tohost>
  while (fromhost == 0)
    8002ebb4:	00013317          	auipc	t1,0x13
    8002ebb8:	48c30313          	addi	t1,t1,1164 # 80042040 <fromhost>
    8002ebbc:	00033f83          	ld	t6,0(t1)
    8002ebc0:	fe0f8ee3          	beqz	t6,8002ebbc <vprintfmt.constprop.1+0x672>
  fromhost = 0;
    8002ebc4:	00013317          	auipc	t1,0x13
    8002ebc8:	46033e23          	sd	zero,1148(t1) # 80042040 <fromhost>
  __sync_synchronize();
    8002ebcc:	0330000f          	fence	rw,rw
    buflen = 0;
    8002ebd0:	0002d317          	auipc	t1,0x2d
    8002ebd4:	50032623          	sw	zero,1292(t1) # 8005c0dc <buflen.2>
  return magic_mem[0];
    8002ebd8:	28073303          	ld	t1,640(a4)
      putch(va_arg(ap, int), putdat);
    8002ebdc:	03a1                	addi	t2,t2,8
    8002ebde:	bac9                	j	8002e5b0 <vprintfmt.constprop.1+0x66>
    8002ebe0:	836a                	mv	t1,s10
    8002ebe2:	b38d                	j	8002e944 <vprintfmt.constprop.1+0x3fa>
  while (width-- > pos)
    8002ebe4:	4301                	li	t1,0
    8002ebe6:	b395                	j	8002e94a <vprintfmt.constprop.1+0x400>
  buf[buflen++] = ch;
    8002ebe8:	4305                	li	t1,1
    8002ebea:	b385                	j	8002e94a <vprintfmt.constprop.1+0x400>
    return va_arg(*ap, unsigned long long);
    8002ebec:	0003b283          	ld	t0,0(t2)
    8002ebf0:	0002d997          	auipc	s3,0x2d
    8002ebf4:	4ec98993          	addi	s3,s3,1260 # 8005c0dc <buflen.2>
    8002ebf8:	83a6                	mv	t2,s1
    8002ebfa:	0002d917          	auipc	s2,0x2d
    8002ebfe:	48690913          	addi	s2,s2,1158 # 8005c080 <buf.1>
    8002ec02:	b949                	j	8002e894 <vprintfmt.constprop.1+0x34a>
    if (num < base)
    8002ec04:	4b81                	li	s7,0
    8002ec06:	b955                	j	8002e8ba <vprintfmt.constprop.1+0x370>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ec08:	0004c283          	lbu	t0,0(s1)
    8002ec0c:	0002899b          	sext.w	s3,t0
    8002ec10:	e60293e3          	bnez	t0,8002ea76 <vprintfmt.constprop.1+0x52c>
    8002ec14:	46013b83          	ld	s7,1120(sp)
    8002ec18:	45813c03          	ld	s8,1112(sp)
    8002ec1c:	45013c83          	ld	s9,1104(sp)
    8002ec20:	44813d03          	ld	s10,1096(sp)
      if ((p = va_arg(ap, char *)) == NULL)
    8002ec24:	03a1                	addi	t2,t2,8
    8002ec26:	b269                	j	8002e5b0 <vprintfmt.constprop.1+0x66>
    return va_arg(*ap, int);
    8002ec28:	0003a283          	lw	t0,0(t2)
    8002ec2c:	b1a1                	j	8002e874 <vprintfmt.constprop.1+0x32a>
    8002ec2e:	4441                	li	s0,16
    8002ec30:	00838493          	addi	s1,t2,8
    return va_arg(*ap, unsigned long);
    8002ec34:	0003b283          	ld	t0,0(t2)
    8002ec38:	83a6                	mv	t2,s1
    8002ec3a:	b9a9                	j	8002e894 <vprintfmt.constprop.1+0x34a>
  magic_mem[0] = which;
    8002ec3c:	e308                	sd	a0,0(a4)
  magic_mem[1] = arg0;
    8002ec3e:	4305                	li	t1,1
    8002ec40:	00673423          	sd	t1,8(a4)
  magic_mem[2] = arg1;
    8002ec44:	01f73823          	sd	t6,16(a4)
  magic_mem[3] = arg2;
    8002ec48:	ef08                	sd	a0,24(a4)
  __sync_synchronize();
    8002ec4a:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ec4e:	00013317          	auipc	t1,0x13
    8002ec52:	3f230313          	addi	t1,t1,1010 # 80042040 <fromhost>
    8002ec56:	00013517          	auipc	a0,0x13
    8002ec5a:	3ae53523          	sd	a4,938(a0) # 80042000 <tohost>
  while (fromhost == 0)
    8002ec5e:	00033503          	ld	a0,0(t1)
    8002ec62:	dd75                	beqz	a0,8002ec5e <vprintfmt.constprop.1+0x714>
  fromhost = 0;
    8002ec64:	00013517          	auipc	a0,0x13
    8002ec68:	3c053e23          	sd	zero,988(a0) # 80042040 <fromhost>
  __sync_synchronize();
    8002ec6c:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002ec70:	6308                	ld	a0,0(a4)
    buflen = 0;
    8002ec72:	0002d517          	auipc	a0,0x2d
    8002ec76:	46052523          	sw	zero,1130(a0) # 8005c0dc <buflen.2>
      fmt = last_fmt;
    8002ec7a:	8552                	mv	a0,s4
    8002ec7c:	ba15                	j	8002e5b0 <vprintfmt.constprop.1+0x66>
    8002ec7e:	47713023          	sd	s7,1120(sp)
    8002ec82:	45813c23          	sd	s8,1112(sp)
    8002ec86:	45913823          	sd	s9,1104(sp)
    8002ec8a:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    8002ec8e:	4429                	li	s0,10
    8002ec90:	b361                	j	8002ea18 <vprintfmt.constprop.1+0x4ce>
    8002ec92:	47713023          	sd	s7,1120(sp)
    8002ec96:	45813c23          	sd	s8,1112(sp)
    8002ec9a:	45913823          	sd	s9,1104(sp)
    8002ec9e:	45a13423          	sd	s10,1096(sp)
    8002eca2:	4421                	li	s0,8
    8002eca4:	bb95                	j	8002ea18 <vprintfmt.constprop.1+0x4ce>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002eca6:	8926                	mv	s2,s1
  if (ch == '\n' || buflen == sizeof(buf))
    8002eca8:	4a29                	li	s4,10
    8002ecaa:	04000a93          	li	s5,64
    8002ecae:	a801                	j	8002ecbe <vprintfmt.constprop.1+0x774>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ecb0:	00194283          	lbu	t0,1(s2)
        p++;
    8002ecb4:	0905                	addi	s2,s2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ecb6:	0002899b          	sext.w	s3,t0
    8002ecba:	06028963          	beqz	t0,8002ed2c <vprintfmt.constprop.1+0x7e2>
  buf[buflen++] = ch;
    8002ecbe:	0002d317          	auipc	t1,0x2d
    8002ecc2:	41e32303          	lw	t1,1054(t1) # 8005c0dc <buflen.2>
    8002ecc6:	0013041b          	addiw	s0,t1,1
    8002ecca:	935a                	add	t1,t1,s6
    8002eccc:	008ba023          	sw	s0,0(s7)
    8002ecd0:	00530023          	sb	t0,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002ecd4:	01498463          	beq	s3,s4,8002ecdc <vprintfmt.constprop.1+0x792>
    8002ecd8:	fd541ce3          	bne	s0,s5,8002ecb0 <vprintfmt.constprop.1+0x766>
  magic_mem[0] = which;
    8002ecdc:	04000313          	li	t1,64
    8002ece0:	20673023          	sd	t1,512(a4)
  magic_mem[1] = arg0;
    8002ece4:	4305                	li	t1,1
    8002ece6:	20673423          	sd	t1,520(a4)
  magic_mem[2] = arg1;
    8002ecea:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    8002ecee:	20873c23          	sd	s0,536(a4)
  __sync_synchronize();
    8002ecf2:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ecf6:	20070313          	addi	t1,a4,512
    8002ecfa:	00013297          	auipc	t0,0x13
    8002ecfe:	3062b323          	sd	t1,774(t0) # 80042000 <tohost>
  while (fromhost == 0)
    8002ed02:	00013297          	auipc	t0,0x13
    8002ed06:	33e28293          	addi	t0,t0,830 # 80042040 <fromhost>
    8002ed0a:	0002b303          	ld	t1,0(t0)
    8002ed0e:	fe030ee3          	beqz	t1,8002ed0a <vprintfmt.constprop.1+0x7c0>
  fromhost = 0;
    8002ed12:	00013317          	auipc	t1,0x13
    8002ed16:	32033723          	sd	zero,814(t1) # 80042040 <fromhost>
  __sync_synchronize();
    8002ed1a:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002ed1e:	20073303          	ld	t1,512(a4)
    buflen = 0;
    8002ed22:	0002d317          	auipc	t1,0x2d
    8002ed26:	3a032d23          	sw	zero,954(t1) # 8005c0dc <buflen.2>
    8002ed2a:	b759                	j	8002ecb0 <vprintfmt.constprop.1+0x766>
    8002ed2c:	009f8fbb          	addw	t6,t6,s1
    8002ed30:	412f8fbb          	subw	t6,t6,s2
      for (; width > 0; width--)
    8002ed34:	eff050e3          	blez	t6,8002ec14 <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    8002ed38:	0002d317          	auipc	t1,0x2d
    8002ed3c:	3a432303          	lw	t1,932(t1) # 8005c0dc <buflen.2>
    8002ed40:	0002d997          	auipc	s3,0x2d
    8002ed44:	39c98993          	addi	s3,s3,924 # 8005c0dc <buflen.2>
    8002ed48:	0002d917          	auipc	s2,0x2d
    8002ed4c:	33890913          	addi	s2,s2,824 # 8005c080 <buf.1>
    8002ed50:	02000a13          	li	s4,32
  if (ch == '\n' || buflen == sizeof(buf))
    8002ed54:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    8002ed58:	4a85                	li	s5,1
  tohost = (uintptr_t)magic_mem;
    8002ed5a:	1c070b93          	addi	s7,a4,448
    8002ed5e:	00013b17          	auipc	s6,0x13
    8002ed62:	2a2b0b13          	addi	s6,s6,674 # 80042000 <tohost>
    8002ed66:	00013297          	auipc	t0,0x13
    8002ed6a:	2da28293          	addi	t0,t0,730 # 80042040 <fromhost>
  buf[buflen++] = ch;
    8002ed6e:	4c09                	li	s8,2
    8002ed70:	0013041b          	addiw	s0,t1,1
    8002ed74:	934a                	add	t1,t1,s2
    8002ed76:	0089a023          	sw	s0,0(s3)
    8002ed7a:	01430023          	sb	s4,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002ed7e:	04941e63          	bne	s0,s1,8002edda <vprintfmt.constprop.1+0x890>
  magic_mem[0] = which;
    8002ed82:	1c973023          	sd	s1,448(a4)
  magic_mem[1] = arg0;
    8002ed86:	1d573423          	sd	s5,456(a4)
  magic_mem[2] = arg1;
    8002ed8a:	1d273823          	sd	s2,464(a4)
  magic_mem[3] = arg2;
    8002ed8e:	1c973c23          	sd	s1,472(a4)
  __sync_synchronize();
    8002ed92:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ed96:	017b3023          	sd	s7,0(s6)
  while (fromhost == 0)
    8002ed9a:	0002b303          	ld	t1,0(t0)
    8002ed9e:	fe030ee3          	beqz	t1,8002ed9a <vprintfmt.constprop.1+0x850>
  fromhost = 0;
    8002eda2:	00013317          	auipc	t1,0x13
    8002eda6:	28033f23          	sd	zero,670(t1) # 80042040 <fromhost>
  __sync_synchronize();
    8002edaa:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002edae:	1c073303          	ld	t1,448(a4)
      for (; width > 0; width--)
    8002edb2:	ffff831b          	addiw	t1,t6,-1
    8002edb6:	0c030163          	beqz	t1,8002ee78 <vprintfmt.constprop.1+0x92e>
  buf[buflen++] = ch;
    8002edba:	0159a023          	sw	s5,0(s3)
    8002edbe:	01490023          	sb	s4,0(s2)
      for (; width > 0; width--)
    8002edc2:	3ff9                	addiw	t6,t6,-2
    8002edc4:	e40f88e3          	beqz	t6,8002ec14 <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    8002edc8:	0189a023          	sw	s8,0(s3)
    8002edcc:	014900a3          	sb	s4,1(s2)
    8002edd0:	4309                	li	t1,2
      for (; width > 0; width--)
    8002edd2:	3ffd                	addiw	t6,t6,-1
    8002edd4:	f80f9ee3          	bnez	t6,8002ed70 <vprintfmt.constprop.1+0x826>
    8002edd8:	bd35                	j	8002ec14 <vprintfmt.constprop.1+0x6ca>
    8002edda:	8322                	mv	t1,s0
    8002eddc:	bfdd                	j	8002edd2 <vprintfmt.constprop.1+0x888>
  buf[buflen++] = ch;
    8002edde:	0002d917          	auipc	s2,0x2d
    8002ede2:	2a290913          	addi	s2,s2,674 # 8005c080 <buf.1>
    8002ede6:	006904b3          	add	s1,s2,t1
    8002edea:	0013039b          	addiw	t2,t1,1
    8002edee:	02d00313          	li	t1,45
    8002edf2:	00648023          	sb	t1,0(s1)
    8002edf6:	0079a023          	sw	t2,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002edfa:	04000493          	li	s1,64
  buf[buflen++] = ch;
    8002edfe:	831e                	mv	t1,t2
  if (ch == '\n' || buflen == sizeof(buf))
    8002ee00:	18938263          	beq	t2,s1,8002ef84 <vprintfmt.constprop.1+0xa3a>
        num = -(long long) num;
    8002ee04:	83a2                	mv	t2,s0
    8002ee06:	405002b3          	neg	t0,t0
    8002ee0a:	4429                	li	s0,10
    8002ee0c:	b461                	j	8002e894 <vprintfmt.constprop.1+0x34a>
    8002ee0e:	0002d997          	auipc	s3,0x2d
    8002ee12:	2ce98993          	addi	s3,s3,718 # 8005c0dc <buflen.2>
    8002ee16:	0002d917          	auipc	s2,0x2d
    8002ee1a:	26a90913          	addi	s2,s2,618 # 8005c080 <buf.1>
    8002ee1e:	bd19                	j	8002ec34 <vprintfmt.constprop.1+0x6ea>
  magic_mem[0] = which;
    8002ee20:	14573023          	sd	t0,320(a4)
  magic_mem[1] = arg0;
    8002ee24:	4305                	li	t1,1
    8002ee26:	14673423          	sd	t1,328(a4)
  magic_mem[2] = arg1;
    8002ee2a:	15273823          	sd	s2,336(a4)
  magic_mem[3] = arg2;
    8002ee2e:	14573c23          	sd	t0,344(a4)
  __sync_synchronize();
    8002ee32:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ee36:	14070313          	addi	t1,a4,320
    8002ee3a:	00013297          	auipc	t0,0x13
    8002ee3e:	1c62b323          	sd	t1,454(t0) # 80042000 <tohost>
  while (fromhost == 0)
    8002ee42:	00013317          	auipc	t1,0x13
    8002ee46:	1fe30313          	addi	t1,t1,510 # 80042040 <fromhost>
    8002ee4a:	00033283          	ld	t0,0(t1)
    8002ee4e:	fe028ee3          	beqz	t0,8002ee4a <vprintfmt.constprop.1+0x900>
  fromhost = 0;
    8002ee52:	00013317          	auipc	t1,0x13
    8002ee56:	1e033723          	sd	zero,494(t1) # 80042040 <fromhost>
  __sync_synchronize();
    8002ee5a:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002ee5e:	14073403          	ld	s0,320(a4)
  buf[buflen++] = ch;
    8002ee62:	07800293          	li	t0,120
    8002ee66:	4305                	li	t1,1
    8002ee68:	00590023          	sb	t0,0(s2)
    8002ee6c:	0069a023          	sw	t1,0(s3)
    8002ee70:	00838493          	addi	s1,t2,8
    8002ee74:	4441                	li	s0,16
    8002ee76:	bb7d                	j	8002ec34 <vprintfmt.constprop.1+0x6ea>
    buflen = 0;
    8002ee78:	0002d317          	auipc	t1,0x2d
    8002ee7c:	26032223          	sw	zero,612(t1) # 8005c0dc <buflen.2>
    8002ee80:	bb51                	j	8002ec14 <vprintfmt.constprop.1+0x6ca>
      if (width > 0 && padc != '-')
    8002ee82:	01f05663          	blez	t6,8002ee8e <vprintfmt.constprop.1+0x944>
    8002ee86:	02d00293          	li	t0,45
    8002ee8a:	005a9a63          	bne	s5,t0,8002ee9e <vprintfmt.constprop.1+0x954>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ee8e:	02800293          	li	t0,40
    8002ee92:	8996                	mv	s3,t0
        p = "(null)";
    8002ee94:	00010497          	auipc	s1,0x10
    8002ee98:	16c48493          	addi	s1,s1,364 # 8003f000 <__func__.0+0xcc18>
    8002ee9c:	bee9                	j	8002ea76 <vprintfmt.constprop.1+0x52c>
    8002ee9e:	00010497          	auipc	s1,0x10
    8002eea2:	16248493          	addi	s1,s1,354 # 8003f000 <__func__.0+0xcc18>
  const char *p = s;
    8002eea6:	82a6                	mv	t0,s1
  while (n-- && *p)
    8002eea8:	00648933          	add	s2,s1,t1
    8002eeac:	00031663          	bnez	t1,8002eeb8 <vprintfmt.constprop.1+0x96e>
    8002eeb0:	a829                	j	8002eeca <vprintfmt.constprop.1+0x980>
    p++;
    8002eeb2:	0285                	addi	t0,t0,1
  while (n-- && *p)
    8002eeb4:	01228563          	beq	t0,s2,8002eebe <vprintfmt.constprop.1+0x974>
    8002eeb8:	0002c403          	lbu	s0,0(t0)
    8002eebc:	f87d                	bnez	s0,8002eeb2 <vprintfmt.constprop.1+0x968>
  return p - s;
    8002eebe:	409282b3          	sub	t0,t0,s1
        for (width -= strnlen(p, precision); width > 0; width--)
    8002eec2:	405f8fbb          	subw	t6,t6,t0
    8002eec6:	d5f051e3          	blez	t6,8002ec08 <vprintfmt.constprop.1+0x6be>
  buf[buflen++] = ch;
    8002eeca:	0002d297          	auipc	t0,0x2d
    8002eece:	2122a283          	lw	t0,530(t0) # 8005c0dc <buflen.2>
    8002eed2:	0002d997          	auipc	s3,0x2d
    8002eed6:	20a98993          	addi	s3,s3,522 # 8005c0dc <buflen.2>
    8002eeda:	0002d917          	auipc	s2,0x2d
    8002eede:	1a690913          	addi	s2,s2,422 # 8005c080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002eee2:	04000a13          	li	s4,64
  magic_mem[1] = arg0;
    8002eee6:	4b05                	li	s6,1
  tohost = (uintptr_t)magic_mem;
    8002eee8:	24070c93          	addi	s9,a4,576
    8002eeec:	00013c17          	auipc	s8,0x13
    8002eef0:	114c0c13          	addi	s8,s8,276 # 80042000 <tohost>
    8002eef4:	00013417          	auipc	s0,0x13
    8002eef8:	14c40413          	addi	s0,s0,332 # 80042040 <fromhost>
  buf[buflen++] = ch;
    8002eefc:	4b89                	li	s7,2
    8002eefe:	00128d1b          	addiw	s10,t0,1
    8002ef02:	92ca                	add	t0,t0,s2
    8002ef04:	01a9a023          	sw	s10,0(s3)
    8002ef08:	01528023          	sb	s5,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002ef0c:	074d1563          	bne	s10,s4,8002ef76 <vprintfmt.constprop.1+0xa2c>
  magic_mem[0] = which;
    8002ef10:	25473023          	sd	s4,576(a4)
  magic_mem[1] = arg0;
    8002ef14:	25673423          	sd	s6,584(a4)
  magic_mem[2] = arg1;
    8002ef18:	25273823          	sd	s2,592(a4)
  magic_mem[3] = arg2;
    8002ef1c:	25473c23          	sd	s4,600(a4)
  __sync_synchronize();
    8002ef20:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ef24:	019c3023          	sd	s9,0(s8)
  while (fromhost == 0)
    8002ef28:	00043283          	ld	t0,0(s0)
    8002ef2c:	fe028ee3          	beqz	t0,8002ef28 <vprintfmt.constprop.1+0x9de>
  fromhost = 0;
    8002ef30:	00013297          	auipc	t0,0x13
    8002ef34:	1002b823          	sd	zero,272(t0) # 80042040 <fromhost>
  __sync_synchronize();
    8002ef38:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002ef3c:	24073283          	ld	t0,576(a4)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002ef40:	ffff829b          	addiw	t0,t6,-1
    8002ef44:	08028763          	beqz	t0,8002efd2 <vprintfmt.constprop.1+0xa88>
  buf[buflen++] = ch;
    8002ef48:	0169a023          	sw	s6,0(s3)
    8002ef4c:	01590023          	sb	s5,0(s2)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002ef50:	3ff9                	addiw	t6,t6,-2
    8002ef52:	000f8a63          	beqz	t6,8002ef66 <vprintfmt.constprop.1+0xa1c>
  buf[buflen++] = ch;
    8002ef56:	0179a023          	sw	s7,0(s3)
    8002ef5a:	015900a3          	sb	s5,1(s2)
    8002ef5e:	4289                	li	t0,2
        for (width -= strnlen(p, precision); width > 0; width--)
    8002ef60:	3ffd                	addiw	t6,t6,-1
    8002ef62:	f80f9ee3          	bnez	t6,8002eefe <vprintfmt.constprop.1+0x9b4>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ef66:	0004c283          	lbu	t0,0(s1)
    8002ef6a:	0002899b          	sext.w	s3,t0
    8002ef6e:	ca0283e3          	beqz	t0,8002ec14 <vprintfmt.constprop.1+0x6ca>
    8002ef72:	4f81                	li	t6,0
    8002ef74:	b609                	j	8002ea76 <vprintfmt.constprop.1+0x52c>
    8002ef76:	82ea                	mv	t0,s10
    8002ef78:	b7e5                	j	8002ef60 <vprintfmt.constprop.1+0xa16>
    switch (ch = *(unsigned char *) fmt++) {
    8002ef7a:	46013b83          	ld	s7,1120(sp)
    8002ef7e:	842a                	mv	s0,a0
    8002ef80:	f8cff06f          	j	8002e70c <vprintfmt.constprop.1+0x1c2>
  magic_mem[0] = which;
    8002ef84:	18773023          	sd	t2,384(a4)
  magic_mem[1] = arg0;
    8002ef88:	4305                	li	t1,1
    8002ef8a:	18673423          	sd	t1,392(a4)
  magic_mem[2] = arg1;
    8002ef8e:	19273823          	sd	s2,400(a4)
  magic_mem[3] = arg2;
    8002ef92:	18773c23          	sd	t2,408(a4)
  __sync_synchronize();
    8002ef96:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ef9a:	18070313          	addi	t1,a4,384
    8002ef9e:	00013397          	auipc	t2,0x13
    8002efa2:	0663b123          	sd	t1,98(t2) # 80042000 <tohost>
  while (fromhost == 0)
    8002efa6:	00013317          	auipc	t1,0x13
    8002efaa:	09a30313          	addi	t1,t1,154 # 80042040 <fromhost>
    8002efae:	00033383          	ld	t2,0(t1)
    8002efb2:	fe038ee3          	beqz	t2,8002efae <vprintfmt.constprop.1+0xa64>
  fromhost = 0;
    8002efb6:	00013317          	auipc	t1,0x13
    8002efba:	08033523          	sd	zero,138(t1) # 80042040 <fromhost>
  __sync_synchronize();
    8002efbe:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002efc2:	18073303          	ld	t1,384(a4)
    buflen = 0;
    8002efc6:	0002d317          	auipc	t1,0x2d
    8002efca:	10032b23          	sw	zero,278(t1) # 8005c0dc <buflen.2>
    8002efce:	4301                	li	t1,0
    8002efd0:	bd15                	j	8002ee04 <vprintfmt.constprop.1+0x8ba>
    8002efd2:	0002df97          	auipc	t6,0x2d
    8002efd6:	100fa523          	sw	zero,266(t6) # 8005c0dc <buflen.2>
    8002efda:	b771                	j	8002ef66 <vprintfmt.constprop.1+0xa1c>

000000008002efdc <strlen>:
  while (*p)
    8002efdc:	00054783          	lbu	a5,0(a0)
    8002efe0:	c78d                	beqz	a5,8002f00a <strlen+0x2e>
    8002efe2:	4701                	li	a4,0
    8002efe4:	00150793          	addi	a5,a0,1
    8002efe8:	0c0076d7          	vsetvli	a3,zero,e8,m1,ta,ma
    8002efec:	97ba                	add	a5,a5,a4
    8002efee:	03078087          	vle8ff.v	v1,(a5)
    8002eff2:	621030d7          	vmseq.vi	v1,v1,0
    8002eff6:	c2002773          	csrr	a4,vl
    8002effa:	4218a657          	vfirst.m	a2,v1
    8002effe:	fe0645e3          	bltz	a2,8002efe8 <strlen+0xc>
    8002f002:	97b2                	add	a5,a5,a2
  return p - s;
    8002f004:	40a78533          	sub	a0,a5,a0
    8002f008:	8082                	ret
  while (*p)
    8002f00a:	4501                	li	a0,0
}
    8002f00c:	8082                	ret

000000008002f00e <strnlen>:
  while (n-- && *p)
    8002f00e:	00b506b3          	add	a3,a0,a1
  const char *p = s;
    8002f012:	87aa                	mv	a5,a0
  while (n-- && *p)
    8002f014:	e589                	bnez	a1,8002f01e <strnlen+0x10>
    8002f016:	a811                	j	8002f02a <strnlen+0x1c>
    p++;
    8002f018:	0785                	addi	a5,a5,1
  while (n-- && *p)
    8002f01a:	00d78563          	beq	a5,a3,8002f024 <strnlen+0x16>
    8002f01e:	0007c703          	lbu	a4,0(a5)
    8002f022:	fb7d                	bnez	a4,8002f018 <strnlen+0xa>
  return p - s;
    8002f024:	40a78533          	sub	a0,a5,a0
}
    8002f028:	8082                	ret
  while (n-- && *p)
    8002f02a:	4501                	li	a0,0
    8002f02c:	8082                	ret

000000008002f02e <setStats>:
  READ_CTR(mcycle);
    8002f02e:	b0002773          	csrr	a4,mcycle
    8002f032:	0002d797          	auipc	a5,0x2d
    8002f036:	04e78793          	addi	a5,a5,78 # 8005c080 <buf.1>
    8002f03a:	c511                	beqz	a0,8002f046 <setStats+0x18>
    8002f03c:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8002f03e:	b0202773          	csrr	a4,minstret
    8002f042:	e7b8                	sd	a4,72(a5)
}
    8002f044:	8082                	ret
  READ_CTR(mcycle);
    8002f046:	63b4                	ld	a3,64(a5)
    8002f048:	8f15                	sub	a4,a4,a3
    8002f04a:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8002f04c:	b0202773          	csrr	a4,minstret
    8002f050:	67b4                	ld	a3,72(a5)
    8002f052:	8f15                	sub	a4,a4,a3
    8002f054:	e7b8                	sd	a4,72(a5)
}
    8002f056:	8082                	ret

000000008002f058 <tohost_exit>:
  tohost = (code << 1) | 1;
    8002f058:	00151793          	slli	a5,a0,0x1
    8002f05c:	0017e793          	ori	a5,a5,1
    8002f060:	00013717          	auipc	a4,0x13
    8002f064:	faf73023          	sd	a5,-96(a4) # 80042000 <tohost>
  while (1);
    8002f068:	a001                	j	8002f068 <tohost_exit+0x10>

000000008002f06a <handle_trap>:
  tohost = (code << 1) | 1;
    8002f06a:	6785                	lui	a5,0x1
    8002f06c:	a7378793          	addi	a5,a5,-1421 # a73 <_test_table_size+0xa72>
    8002f070:	00013717          	auipc	a4,0x13
    8002f074:	f8f73823          	sd	a5,-112(a4) # 80042000 <tohost>
  while (1);
    8002f078:	a001                	j	8002f078 <handle_trap+0xe>

000000008002f07a <exit>:
{
    8002f07a:	1141                	addi	sp,sp,-16
    8002f07c:	e406                	sd	ra,8(sp)
  tohost_exit(code);
    8002f07e:	fdbff0ef          	jal	8002f058 <tohost_exit>

000000008002f082 <abort>:
  tohost = (code << 1) | 1;
    8002f082:	10d00793          	li	a5,269
    8002f086:	00013717          	auipc	a4,0x13
    8002f08a:	f6f73d23          	sd	a5,-134(a4) # 80042000 <tohost>
  while (1);
    8002f08e:	a001                	j	8002f08e <abort+0xc>

000000008002f090 <printstr>:
  while (*p)
    8002f090:	00054783          	lbu	a5,0(a0)
{
    8002f094:	7159                	addi	sp,sp,-112
    8002f096:	03f10693          	addi	a3,sp,63
    8002f09a:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002f09e:	cfb9                	beqz	a5,8002f0fc <printstr+0x6c>
    8002f0a0:	4701                	li	a4,0
    8002f0a2:	00150793          	addi	a5,a0,1
    8002f0a6:	0c007657          	vsetvli	a2,zero,e8,m1,ta,ma
    8002f0aa:	97ba                	add	a5,a5,a4
    8002f0ac:	03078087          	vle8ff.v	v1,(a5)
    8002f0b0:	621030d7          	vmseq.vi	v1,v1,0
    8002f0b4:	c2002773          	csrr	a4,vl
    8002f0b8:	4218a5d7          	vfirst.m	a1,v1
    8002f0bc:	fe05c5e3          	bltz	a1,8002f0a6 <printstr+0x16>
    8002f0c0:	97ae                	add	a5,a5,a1
  return p - s;
    8002f0c2:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8002f0c4:	04000713          	li	a4,64
    8002f0c8:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8002f0ca:	4705                	li	a4,1
    8002f0cc:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8002f0ce:	ea88                	sd	a0,16(a3)
  magic_mem[3] = arg2;
    8002f0d0:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8002f0d2:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002f0d6:	00013717          	auipc	a4,0x13
    8002f0da:	f6a70713          	addi	a4,a4,-150 # 80042040 <fromhost>
    8002f0de:	00013797          	auipc	a5,0x13
    8002f0e2:	f2d7b123          	sd	a3,-222(a5) # 80042000 <tohost>
  while (fromhost == 0)
    8002f0e6:	631c                	ld	a5,0(a4)
    8002f0e8:	dffd                	beqz	a5,8002f0e6 <printstr+0x56>
  fromhost = 0;
    8002f0ea:	00013797          	auipc	a5,0x13
    8002f0ee:	f407bb23          	sd	zero,-170(a5) # 80042040 <fromhost>
  __sync_synchronize();
    8002f0f2:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002f0f6:	629c                	ld	a5,0(a3)
}
    8002f0f8:	6165                	addi	sp,sp,112
    8002f0fa:	8082                	ret
  while (*p)
    8002f0fc:	4781                	li	a5,0
    8002f0fe:	b7d9                	j	8002f0c4 <printstr+0x34>

000000008002f100 <puts>:
    8002f100:	00054783          	lbu	a5,0(a0)
{
    8002f104:	7171                	addi	sp,sp,-176
    8002f106:	03f10693          	addi	a3,sp,63
    8002f10a:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002f10e:	cfdd                	beqz	a5,8002f1cc <puts+0xcc>
    8002f110:	4601                	li	a2,0
    8002f112:	00150793          	addi	a5,a0,1
    8002f116:	0c007757          	vsetvli	a4,zero,e8,m1,ta,ma
    8002f11a:	97b2                	add	a5,a5,a2
    8002f11c:	03078087          	vle8ff.v	v1,(a5)
    8002f120:	621030d7          	vmseq.vi	v1,v1,0
    8002f124:	c2002673          	csrr	a2,vl
    8002f128:	4218a5d7          	vfirst.m	a1,v1
    8002f12c:	fe05c5e3          	bltz	a1,8002f116 <puts+0x16>
    8002f130:	97ae                	add	a5,a5,a1
  return p - s;
    8002f132:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8002f134:	04000713          	li	a4,64
    8002f138:	e2b8                	sd	a4,64(a3)
  magic_mem[1] = arg0;
    8002f13a:	4705                	li	a4,1
    8002f13c:	e6b8                	sd	a4,72(a3)
  magic_mem[2] = arg1;
    8002f13e:	eaa8                	sd	a0,80(a3)
  magic_mem[3] = arg2;
    8002f140:	eebc                	sd	a5,88(a3)
  __sync_synchronize();
    8002f142:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002f146:	00013617          	auipc	a2,0x13
    8002f14a:	eba60613          	addi	a2,a2,-326 # 80042000 <tohost>
    8002f14e:	04068793          	addi	a5,a3,64
    8002f152:	e21c                	sd	a5,0(a2)
  while (fromhost == 0)
    8002f154:	00013797          	auipc	a5,0x13
    8002f158:	eec78793          	addi	a5,a5,-276 # 80042040 <fromhost>
    8002f15c:	6398                	ld	a4,0(a5)
    8002f15e:	df7d                	beqz	a4,8002f15c <puts+0x5c>
  fromhost = 0;
    8002f160:	00013717          	auipc	a4,0x13
    8002f164:	ee073023          	sd	zero,-288(a4) # 80042040 <fromhost>
  __sync_synchronize();
    8002f168:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002f16c:	62b8                	ld	a4,64(a3)
  magic_mem[0] = which;
    8002f16e:	04000593          	li	a1,64
    8002f172:	e28c                	sd	a1,0(a3)
  magic_mem[1] = arg0;
    8002f174:	4705                	li	a4,1
    8002f176:	e698                	sd	a4,8(a3)
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    8002f178:	00006597          	auipc	a1,0x6
    8002f17c:	42858593          	addi	a1,a1,1064 # 800355a0 <__func__.0+0x31b8>
  magic_mem[2] = arg1;
    8002f180:	ea8c                	sd	a1,16(a3)
  magic_mem[3] = arg2;
    8002f182:	ee98                	sd	a4,24(a3)
  __sync_synchronize();
    8002f184:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002f188:	e214                	sd	a3,0(a2)
  while (fromhost == 0)
    8002f18a:	6398                	ld	a4,0(a5)
    8002f18c:	df7d                	beqz	a4,8002f18a <puts+0x8a>
  fromhost = 0;
    8002f18e:	00013797          	auipc	a5,0x13
    8002f192:	ea07b923          	sd	zero,-334(a5) # 80042040 <fromhost>
  __sync_synchronize();
    8002f196:	0330000f          	fence	rw,rw
  while (*p)
    8002f19a:	00054783          	lbu	a5,0(a0)
  return magic_mem[0];
    8002f19e:	6298                	ld	a4,0(a3)
  while (*p)
    8002f1a0:	cb85                	beqz	a5,8002f1d0 <puts+0xd0>
    8002f1a2:	4681                	li	a3,0
    8002f1a4:	00150793          	addi	a5,a0,1
    8002f1a8:	0c007757          	vsetvli	a4,zero,e8,m1,ta,ma
    8002f1ac:	97b6                	add	a5,a5,a3
    8002f1ae:	03078087          	vle8ff.v	v1,(a5)
    8002f1b2:	621030d7          	vmseq.vi	v1,v1,0
    8002f1b6:	c20026f3          	csrr	a3,vl
    8002f1ba:	4218a657          	vfirst.m	a2,v1
    8002f1be:	fe0645e3          	bltz	a2,8002f1a8 <puts+0xa8>
    8002f1c2:	97b2                	add	a5,a5,a2
  return strlen(s);
    8002f1c4:	40a7853b          	subw	a0,a5,a0
}
    8002f1c8:	614d                	addi	sp,sp,176
    8002f1ca:	8082                	ret
  while (*p)
    8002f1cc:	4781                	li	a5,0
    8002f1ce:	b79d                	j	8002f134 <puts+0x34>
    8002f1d0:	4501                	li	a0,0
}
    8002f1d2:	614d                	addi	sp,sp,176
    8002f1d4:	8082                	ret

000000008002f1d6 <thread_entry>:
  while (cid != 0);
    8002f1d6:	e111                	bnez	a0,8002f1da <thread_entry+0x4>
}
    8002f1d8:	8082                	ret
  while (cid != 0);
    8002f1da:	a001                	j	8002f1da <thread_entry+0x4>

000000008002f1dc <printhex>:
  for (i = 0; i < 16; i++)
    8002f1dc:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    8002f1e0:	5208a157          	vid.v	v2
    8002f1e4:	5e0540d7          	vmv.v.x	v1,a0
    8002f1e8:	96213157          	vsll.vi	v2,v2,2
    8002f1ec:	03800613          	li	a2,56
    8002f1f0:	03000793          	li	a5,48
    8002f1f4:	a21100d7          	vsrl.vv	v1,v1,v2
    8002f1f8:	02000693          	li	a3,32
    8002f1fc:	02800713          	li	a4,40
    8002f200:	a2164157          	vsrl.vx	v2,v1,a2
    8002f204:	a217c857          	vsrl.vx	v16,v1,a5
    8002f208:	a216c457          	vsrl.vx	v8,v1,a3
    8002f20c:	a21747d7          	vsrl.vx	v15,v1,a4
    8002f210:	a21433d7          	vsrl.vi	v7,v1,8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002f214:	a2183357          	vsrl.vi	v6,v1,16
    8002f218:	a21c32d7          	vsrl.vi	v5,v1,24
    8002f21c:	0d707057          	vsetvli	zero,zero,e32,mf2,ta,ma
    8002f220:	b22044d7          	vncvt.x.x.w	v9,v2
    8002f224:	b21046d7          	vncvt.x.x.w	v13,v1
    8002f228:	b2704657          	vncvt.x.x.w	v12,v7
    8002f22c:	b26045d7          	vncvt.x.x.w	v11,v6
    8002f230:	b2504557          	vncvt.x.x.w	v10,v5
    8002f234:	b2804257          	vncvt.x.x.w	v4,v8
    8002f238:	b2f041d7          	vncvt.x.x.w	v3,v15
    8002f23c:	b3004757          	vncvt.x.x.w	v14,v16
    8002f240:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002f244:	b29044d7          	vncvt.x.x.w	v9,v9
    8002f248:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f24c:	2627b157          	vand.vi	v2,v2,15
    8002f250:	2617b0d7          	vand.vi	v1,v1,15
    8002f254:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002f258:	b2d046d7          	vncvt.x.x.w	v13,v13
    8002f25c:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f260:	2677b3d7          	vand.vi	v7,v7,15
    8002f264:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002f268:	b2c04657          	vncvt.x.x.w	v12,v12
    8002f26c:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f270:	2667b357          	vand.vi	v6,v6,15
    8002f274:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002f278:	b2b045d7          	vncvt.x.x.w	v11,v11
    8002f27c:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f280:	2657b2d7          	vand.vi	v5,v5,15
    8002f284:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002f288:	b2a04557          	vncvt.x.x.w	v10,v10
    8002f28c:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f290:	2687b457          	vand.vi	v8,v8,15
    8002f294:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002f298:	b2404257          	vncvt.x.x.w	v4,v4
    8002f29c:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f2a0:	26f7b7d7          	vand.vi	v15,v15,15
    8002f2a4:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002f2a8:	b23041d7          	vncvt.x.x.w	v3,v3
    8002f2ac:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f2b0:	2707b8d7          	vand.vi	v17,v16,15
    8002f2b4:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002f2b8:	b2e04757          	vncvt.x.x.w	v14,v14
    8002f2bc:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002f2c0:	b29044d7          	vncvt.x.x.w	v9,v9
    8002f2c4:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f2c8:	7224b057          	vmsleu.vi	v0,v2,9
    8002f2cc:	05700713          	li	a4,87
    8002f2d0:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002f2d4:	5e074157          	vmv.v.x	v2,a4
    8002f2d8:	5e07c9d7          	vmv.v.x	v19,a5
    8002f2dc:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f2e0:	7214b0d7          	vmsleu.vi	v1,v1,9
    8002f2e4:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002f2e8:	b2d046d7          	vncvt.x.x.w	v13,v13
    8002f2ec:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f2f0:	7274b3d7          	vmsleu.vi	v7,v7,9
    8002f2f4:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002f2f8:	b2c04657          	vncvt.x.x.w	v12,v12
    8002f2fc:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f300:	7264b357          	vmsleu.vi	v6,v6,9
    8002f304:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002f308:	b2b045d7          	vncvt.x.x.w	v11,v11
    8002f30c:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f310:	7254b2d7          	vmsleu.vi	v5,v5,9
    8002f314:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002f318:	b2a04557          	vncvt.x.x.w	v10,v10
    8002f31c:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f320:	7284b457          	vmsleu.vi	v8,v8,9
    8002f324:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002f328:	b2404257          	vncvt.x.x.w	v4,v4
    8002f32c:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f330:	72f4b7d7          	vmsleu.vi	v15,v15,9
    8002f334:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002f338:	b23041d7          	vncvt.x.x.w	v3,v3
    8002f33c:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002f340:	7314b8d7          	vmsleu.vi	v17,v17,9
    8002f344:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002f348:	9f303957          	vmv1r.v	v18,v19
    8002f34c:	9f303b57          	vmv1r.v	v22,v19
    8002f350:	9f303bd7          	vmv1r.v	v23,v19
    8002f354:	9f303857          	vmv1r.v	v16,v19
    8002f358:	9f303c57          	vmv1r.v	v24,v19
    8002f35c:	9f303ad7          	vmv1r.v	v21,v19
    8002f360:	9f303a57          	vmv1r.v	v20,v19
    8002f364:	5c2989d7          	vmerge.vvm	v19,v2,v19,v0
    8002f368:	9e103057          	vmv1r.v	v0,v1
    8002f36c:	b2e04757          	vncvt.x.x.w	v14,v14
    8002f370:	2697b4d7          	vand.vi	v9,v9,15
    8002f374:	5c290957          	vmerge.vvm	v18,v2,v18,v0
    8002f378:	9e703057          	vmv1r.v	v0,v7
    8002f37c:	26d7b6d7          	vand.vi	v13,v13,15
    8002f380:	26c7b657          	vand.vi	v12,v12,15
    8002f384:	5c2b0b57          	vmerge.vvm	v22,v2,v22,v0
    8002f388:	9e603057          	vmv1r.v	v0,v6
    8002f38c:	26b7b5d7          	vand.vi	v11,v11,15
    8002f390:	26a7b557          	vand.vi	v10,v10,15
    8002f394:	5c2b8bd7          	vmerge.vvm	v23,v2,v23,v0
    8002f398:	9e503057          	vmv1r.v	v0,v5
    8002f39c:	2647b257          	vand.vi	v4,v4,15
    8002f3a0:	26e7b2d7          	vand.vi	v5,v14,15
    8002f3a4:	5c280857          	vmerge.vvm	v16,v2,v16,v0
    8002f3a8:	9e803057          	vmv1r.v	v0,v8
    8002f3ac:	2637b1d7          	vand.vi	v3,v3,15
    8002f3b0:	5208a0d7          	vid.v	v1
    8002f3b4:	5c2c0c57          	vmerge.vvm	v24,v2,v24,v0
    8002f3b8:	9ef03057          	vmv1r.v	v0,v15
    8002f3bc:	0e10b0d7          	vrsub.vi	v1,v1,1
    8002f3c0:	02998357          	vadd.vv	v6,v9,v19
    8002f3c4:	5c2a8ad7          	vmerge.vvm	v21,v2,v21,v0
    8002f3c8:	9f103057          	vmv1r.v	v0,v17
    8002f3cc:	02cb0657          	vadd.vv	v12,v12,v22
    8002f3d0:	024c0257          	vadd.vv	v4,v4,v24
    8002f3d4:	5c2a0157          	vmerge.vvm	v2,v2,v20,v0
    8002f3d8:	023a81d7          	vadd.vv	v3,v3,v21
    8002f3dc:	02d906d7          	vadd.vv	v13,v13,v18
    8002f3e0:	025102d7          	vadd.vv	v5,v5,v2
    8002f3e4:	02bb85d7          	vadd.vv	v11,v11,v23
    8002f3e8:	02a80557          	vadd.vv	v10,v10,v16
    8002f3ec:	32c08757          	vrgather.vv	v14,v12,v1
    8002f3f0:	32408457          	vrgather.vv	v8,v4,v1
    8002f3f4:	323083d7          	vrgather.vv	v7,v3,v1
    8002f3f8:	32b08657          	vrgather.vv	v12,v11,v1
    8002f3fc:	32a084d7          	vrgather.vv	v9,v10,v1
    8002f400:	32508257          	vrgather.vv	v4,v5,v1
    8002f404:	326081d7          	vrgather.vv	v3,v6,v1
    8002f408:	32d08157          	vrgather.vv	v2,v13,v1
{
    8002f40c:	7175                	addi	sp,sp,-144
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002f40e:	00a10693          	addi	a3,sp,10
  while (*p)
    8002f412:	3e60b7d7          	vslidedown.vi	v15,v6,1
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002f416:	01210893          	addi	a7,sp,18
    8002f41a:	01010813          	addi	a6,sp,16
    8002f41e:	00e10513          	addi	a0,sp,14
    8002f422:	006c                	addi	a1,sp,12
    8002f424:	0030                	addi	a2,sp,8
    8002f426:	01610713          	addi	a4,sp,22
    8002f42a:	01410313          	addi	t1,sp,20
    8002f42e:	02068227          	vse8.v	v4,(a3)
    8002f432:	02030727          	vse8.v	v14,(t1)
    8002f436:	02088627          	vse8.v	v12,(a7)
    8002f43a:	020804a7          	vse8.v	v9,(a6)
    8002f43e:	02050427          	vse8.v	v8,(a0)
    8002f442:	020583a7          	vse8.v	v7,(a1)
    8002f446:	020601a7          	vse8.v	v3,(a2)
    8002f44a:	02070127          	vse8.v	v2,(a4)
  while (*p)
    8002f44e:	42f027d7          	vmv.x.s	a5,v15
{
    8002f452:	05f10693          	addi	a3,sp,95
  str[16] = 0;
    8002f456:	00010c23          	sb	zero,24(sp)
  while (*p)
    8002f45a:	0ff7f793          	zext.b	a5,a5
{
    8002f45e:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002f462:	cfb9                	beqz	a5,8002f4c0 <printhex+0x2e4>
    8002f464:	4701                	li	a4,0
    8002f466:	00910793          	addi	a5,sp,9
    8002f46a:	0c0075d7          	vsetvli	a1,zero,e8,m1,ta,ma
    8002f46e:	97ba                	add	a5,a5,a4
    8002f470:	03078087          	vle8ff.v	v1,(a5)
    8002f474:	621030d7          	vmseq.vi	v1,v1,0
    8002f478:	c2002773          	csrr	a4,vl
    8002f47c:	4218a557          	vfirst.m	a0,v1
    8002f480:	fe0545e3          	bltz	a0,8002f46a <printhex+0x28e>
    8002f484:	97aa                	add	a5,a5,a0
  return p - s;
    8002f486:	8f91                	sub	a5,a5,a2
  magic_mem[0] = which;
    8002f488:	04000713          	li	a4,64
    8002f48c:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8002f48e:	4705                	li	a4,1
    8002f490:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8002f492:	ea90                	sd	a2,16(a3)
  magic_mem[3] = arg2;
    8002f494:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8002f496:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002f49a:	00013717          	auipc	a4,0x13
    8002f49e:	ba670713          	addi	a4,a4,-1114 # 80042040 <fromhost>
    8002f4a2:	00013797          	auipc	a5,0x13
    8002f4a6:	b4d7bf23          	sd	a3,-1186(a5) # 80042000 <tohost>
  while (fromhost == 0)
    8002f4aa:	631c                	ld	a5,0(a4)
    8002f4ac:	dffd                	beqz	a5,8002f4aa <printhex+0x2ce>
  fromhost = 0;
    8002f4ae:	00013797          	auipc	a5,0x13
    8002f4b2:	b807b923          	sd	zero,-1134(a5) # 80042040 <fromhost>
  __sync_synchronize();
    8002f4b6:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002f4ba:	629c                	ld	a5,0(a3)
}
    8002f4bc:	6149                	addi	sp,sp,144
    8002f4be:	8082                	ret
  while (*p)
    8002f4c0:	4781                	li	a5,0
    8002f4c2:	b7d9                	j	8002f488 <printhex+0x2ac>

000000008002f4c4 <printf>:
{
    8002f4c4:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    8002f4c6:	02810313          	addi	t1,sp,40
{
    8002f4ca:	f42e                	sd	a1,40(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8002f4cc:	859a                	mv	a1,t1
{
    8002f4ce:	ec06                	sd	ra,24(sp)
    8002f4d0:	f832                	sd	a2,48(sp)
    8002f4d2:	fc36                	sd	a3,56(sp)
    8002f4d4:	e0ba                	sd	a4,64(sp)
    8002f4d6:	e4be                	sd	a5,72(sp)
    8002f4d8:	e8c2                	sd	a6,80(sp)
    8002f4da:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8002f4dc:	e41a                	sd	t1,8(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8002f4de:	86cff0ef          	jal	8002e54a <vprintfmt.constprop.1>
}
    8002f4e2:	60e2                	ld	ra,24(sp)
    8002f4e4:	4501                	li	a0,0
    8002f4e6:	6125                	addi	sp,sp,96
    8002f4e8:	8082                	ret

000000008002f4ea <sprintf>:
{
    8002f4ea:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    8002f4ec:	03010313          	addi	t1,sp,48
{
    8002f4f0:	f022                	sd	s0,32(sp)
    8002f4f2:	e42a                	sd	a0,8(sp)
    8002f4f4:	f832                	sd	a2,48(sp)
  char* str0 = str;
    8002f4f6:	842a                	mv	s0,a0

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8002f4f8:	861a                	mv	a2,t1
    8002f4fa:	0028                	addi	a0,sp,8
{
    8002f4fc:	f406                	sd	ra,40(sp)
    8002f4fe:	fc36                	sd	a3,56(sp)
    8002f500:	e0ba                	sd	a4,64(sp)
    8002f502:	e4be                	sd	a5,72(sp)
    8002f504:	e8c2                	sd	a6,80(sp)
    8002f506:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8002f508:	ec1a                	sd	t1,24(sp)
  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8002f50a:	d2bfe0ef          	jal	8002e234 <vprintfmt.constprop.0>
  *str = 0;
    8002f50e:	6522                	ld	a0,8(sp)
    8002f510:	00050023          	sb	zero,0(a0)

  va_end(ap);
  return str - str0;
}
    8002f514:	70a2                	ld	ra,40(sp)
    8002f516:	9d01                	subw	a0,a0,s0
    8002f518:	7402                	ld	s0,32(sp)
    8002f51a:	6125                	addi	sp,sp,96
    8002f51c:	8082                	ret

000000008002f51e <memcpy>:

void* memcpy(void* dest, const void* src, size_t len)
{
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002f51e:	00c5e7b3          	or	a5,a1,a2
    8002f522:	8fc9                	or	a5,a5,a0
    8002f524:	8b9d                	andi	a5,a5,7
    while (d < (uintptr_t*)(dest + len))
      *d++ = *s++;
  } else {
    const char* s = src;
    char *d = dest;
    while (d < (char*)(dest + len))
    8002f526:	00c506b3          	add	a3,a0,a2
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002f52a:	cb85                	beqz	a5,8002f55a <memcpy+0x3c>
    while (d < (char*)(dest + len))
    8002f52c:	08d57363          	bgeu	a0,a3,8002f5b2 <memcpy+0x94>
    8002f530:	00158793          	addi	a5,a1,1
    8002f534:	c2202773          	csrr	a4,vlenb
    8002f538:	40f506b3          	sub	a3,a0,a5
    8002f53c:	1779                	addi	a4,a4,-2
    8002f53e:	04d77e63          	bgeu	a4,a3,8002f59a <memcpy+0x7c>
    8002f542:	872a                	mv	a4,a0
    8002f544:	0c0677d7          	vsetvli	a5,a2,e8,m1,ta,ma
      *d++ = *s++;
    8002f548:	02058087          	vle8.v	v1,(a1)
    while (d < (char*)(dest + len))
    8002f54c:	8e1d                	sub	a2,a2,a5
    8002f54e:	95be                	add	a1,a1,a5
      *d++ = *s++;
    8002f550:	020700a7          	vse8.v	v1,(a4)
    while (d < (char*)(dest + len))
    8002f554:	973e                	add	a4,a4,a5
    8002f556:	f67d                	bnez	a2,8002f544 <memcpy+0x26>
    8002f558:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    8002f55a:	04d57b63          	bgeu	a0,a3,8002f5b0 <memcpy+0x92>
    8002f55e:	167d                	addi	a2,a2,-1
    8002f560:	04700793          	li	a5,71
    8002f564:	00858713          	addi	a4,a1,8
    8002f568:	04c7f663          	bgeu	a5,a2,8002f5b4 <memcpy+0x96>
    8002f56c:	c22027f3          	csrr	a5,vlenb
    8002f570:	40e50833          	sub	a6,a0,a4
    8002f574:	17c1                	addi	a5,a5,-16
    8002f576:	0307ff63          	bgeu	a5,a6,8002f5b4 <memcpy+0x96>
    8002f57a:	820d                	srli	a2,a2,0x3
    8002f57c:	0605                	addi	a2,a2,1
    8002f57e:	872a                	mv	a4,a0
    8002f580:	0c5677d7          	vsetvli	a5,a2,e8,mf8,ta,ma
      *d++ = *s++;
    8002f584:	0205f087          	vle64.v	v1,(a1)
    8002f588:	00379693          	slli	a3,a5,0x3
    while (d < (uintptr_t*)(dest + len))
    8002f58c:	8e1d                	sub	a2,a2,a5
    8002f58e:	95b6                	add	a1,a1,a3
      *d++ = *s++;
    8002f590:	020770a7          	vse64.v	v1,(a4)
    while (d < (uintptr_t*)(dest + len))
    8002f594:	9736                	add	a4,a4,a3
    8002f596:	f66d                	bnez	a2,8002f580 <memcpy+0x62>
    8002f598:	8082                	ret
    8002f59a:	95b2                	add	a1,a1,a2
    char *d = dest;
    8002f59c:	872a                	mv	a4,a0
    8002f59e:	a011                	j	8002f5a2 <memcpy+0x84>
    8002f5a0:	0785                	addi	a5,a5,1
      *d++ = *s++;
    8002f5a2:	fff7c683          	lbu	a3,-1(a5)
    8002f5a6:	0705                	addi	a4,a4,1
    8002f5a8:	fed70fa3          	sb	a3,-1(a4)
    while (d < (char*)(dest + len))
    8002f5ac:	fef59ae3          	bne	a1,a5,8002f5a0 <memcpy+0x82>
  }
  return dest;
}
    8002f5b0:	8082                	ret
    8002f5b2:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    8002f5b4:	87aa                	mv	a5,a0
      *d++ = *s++;
    8002f5b6:	ff873603          	ld	a2,-8(a4)
    8002f5ba:	07a1                	addi	a5,a5,8
    8002f5bc:	0721                	addi	a4,a4,8
    8002f5be:	fec7bc23          	sd	a2,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    8002f5c2:	fed7eae3          	bltu	a5,a3,8002f5b6 <memcpy+0x98>
}
    8002f5c6:	8082                	ret

000000008002f5c8 <memset>:

void* memset(void* dest, int byte, size_t len)
{
    8002f5c8:	1141                	addi	sp,sp,-16
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002f5ca:	00c566b3          	or	a3,a0,a2
{
    8002f5ce:	e022                	sd	s0,0(sp)
    8002f5d0:	e406                	sd	ra,8(sp)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002f5d2:	8a9d                	andi	a3,a3,7
{
    8002f5d4:	842a                	mv	s0,a0
    uintptr_t *d = dest;
    while (d < (uintptr_t*)(dest + len))
      *d++ = word;
  } else {
    char *d = dest;
    while (d < (char*)(dest + len))
    8002f5d6:	00c50833          	add	a6,a0,a2
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002f5da:	ce81                	beqz	a3,8002f5f2 <memset+0x2a>
    while (d < (char*)(dest + len))
    8002f5dc:	01057663          	bgeu	a0,a6,8002f5e8 <memset+0x20>
      *d++ = byte;
    8002f5e0:	0ff5f593          	zext.b	a1,a1
    8002f5e4:	fe5ff0ef          	jal	8002f5c8 <memset>
  }
  return dest;
}
    8002f5e8:	60a2                	ld	ra,8(sp)
    8002f5ea:	8522                	mv	a0,s0
    8002f5ec:	6402                	ld	s0,0(sp)
    8002f5ee:	0141                	addi	sp,sp,16
    8002f5f0:	8082                	ret
    word |= word << 16 << 16;
    8002f5f2:	8732                	mv	a4,a2
    8002f5f4:	01010637          	lui	a2,0x1010
    8002f5f8:	10160613          	addi	a2,a2,257 # 1010101 <STACK_SIZE+0xf10101>
    8002f5fc:	87aa                	mv	a5,a0
    8002f5fe:	02061513          	slli	a0,a2,0x20
    uintptr_t word = byte & 0xFF;
    8002f602:	0ff5f593          	zext.b	a1,a1
    8002f606:	9532                	add	a0,a0,a2
    8002f608:	02a585b3          	mul	a1,a1,a0
    while (d < (uintptr_t*)(dest + len))
    8002f60c:	fd047ee3          	bgeu	s0,a6,8002f5e8 <memset+0x20>
    8002f610:	177d                	addi	a4,a4,-1
    8002f612:	00375613          	srli	a2,a4,0x3
    8002f616:	451d                	li	a0,7
    8002f618:	0605                	addi	a2,a2,1
    8002f61a:	02e57463          	bgeu	a0,a4,8002f642 <memset+0x7a>
    8002f61e:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    8002f622:	00165713          	srli	a4,a2,0x1
    8002f626:	5e05c0d7          	vmv.v.x	v1,a1
    8002f62a:	0712                	slli	a4,a4,0x4
    8002f62c:	9722                	add	a4,a4,s0
      *d++ = word;
    8002f62e:	0207f0a7          	vse64.v	v1,(a5)
    while (d < (uintptr_t*)(dest + len))
    8002f632:	07c1                	addi	a5,a5,16
    8002f634:	fef71de3          	bne	a4,a5,8002f62e <memset+0x66>
    8002f638:	00167793          	andi	a5,a2,1
    8002f63c:	d7d5                	beqz	a5,8002f5e8 <memset+0x20>
    8002f63e:	ffe67693          	andi	a3,a2,-2
    8002f642:	8e15                	sub	a2,a2,a3
    8002f644:	0d867057          	vsetvli	zero,a2,e64,m1,ta,ma
      *d++ = word;
    8002f648:	5e05c0d7          	vmv.v.x	v1,a1
    8002f64c:	068e                	slli	a3,a3,0x3
    8002f64e:	96a2                	add	a3,a3,s0
    8002f650:	0206f0a7          	vse64.v	v1,(a3)
}
    8002f654:	60a2                	ld	ra,8(sp)
    8002f656:	8522                	mv	a0,s0
    8002f658:	6402                	ld	s0,0(sp)
    8002f65a:	0141                	addi	sp,sp,16
    8002f65c:	8082                	ret

000000008002f65e <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    8002f65e:	00054783          	lbu	a5,0(a0)
    8002f662:	0505                	addi	a0,a0,1
    c2 = *s2++;
    8002f664:	0585                	addi	a1,a1,1
    8002f666:	fff5c703          	lbu	a4,-1(a1)
  } while (c1 != 0 && c1 == c2);
    8002f66a:	c799                	beqz	a5,8002f678 <strcmp+0x1a>
    8002f66c:	fee789e3          	beq	a5,a4,8002f65e <strcmp>

  return c1 - c2;
    8002f670:	0007851b          	sext.w	a0,a5
}
    8002f674:	9d19                	subw	a0,a0,a4
    8002f676:	8082                	ret
    8002f678:	4501                	li	a0,0
  return c1 - c2;
    8002f67a:	bfed                	j	8002f674 <strcmp+0x16>

000000008002f67c <strcpy>:

char* strcpy(char* dest, const char* src)
{
  char* d = dest;
    8002f67c:	87aa                	mv	a5,a0
  while ((*d++ = *src++))
    8002f67e:	0005c703          	lbu	a4,0(a1)
    8002f682:	0585                	addi	a1,a1,1
    8002f684:	0785                	addi	a5,a5,1
    8002f686:	fee78fa3          	sb	a4,-1(a5)
    8002f68a:	fb75                	bnez	a4,8002f67e <strcpy+0x2>
    ;
  return dest;
}
    8002f68c:	8082                	ret

000000008002f68e <atol>:
long atol(const char* str)
{
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    8002f68e:	00054683          	lbu	a3,0(a0)
    8002f692:	02000713          	li	a4,32
{
    8002f696:	87aa                	mv	a5,a0
  while (*str == ' ')
    8002f698:	00e69863          	bne	a3,a4,8002f6a8 <atol+0x1a>
    8002f69c:	8736                	mv	a4,a3
    8002f69e:	0017c683          	lbu	a3,1(a5)
    str++;
    8002f6a2:	0785                	addi	a5,a5,1
  while (*str == ' ')
    8002f6a4:	fee68de3          	beq	a3,a4,8002f69e <atol+0x10>

  if (*str == '-' || *str == '+') {
    8002f6a8:	02d00713          	li	a4,45
    8002f6ac:	02e68f63          	beq	a3,a4,8002f6ea <atol+0x5c>
    8002f6b0:	02b00713          	li	a4,43
    8002f6b4:	02e68563          	beq	a3,a4,8002f6de <atol+0x50>
  int sign = 0;
    8002f6b8:	4581                	li	a1,0
    sign = *str == '-';
    str++;
  }

  while (*str) {
    8002f6ba:	ce8d                	beqz	a3,8002f6f4 <atol+0x66>
  int sign = 0;
    8002f6bc:	4501                	li	a0,0
    res *= 10;
    res += *str++ - '0';
    8002f6be:	0785                	addi	a5,a5,1
    8002f6c0:	fd06861b          	addiw	a2,a3,-48
    res *= 10;
    8002f6c4:	00251713          	slli	a4,a0,0x2
  while (*str) {
    8002f6c8:	0007c683          	lbu	a3,0(a5)
    res *= 10;
    8002f6cc:	972a                	add	a4,a4,a0
    8002f6ce:	0706                	slli	a4,a4,0x1
    res += *str++ - '0';
    8002f6d0:	00e60533          	add	a0,a2,a4
  while (*str) {
    8002f6d4:	f6ed                	bnez	a3,8002f6be <atol+0x30>
  }

  return sign ? -res : res;
    8002f6d6:	c185                	beqz	a1,8002f6f6 <atol+0x68>
    8002f6d8:	40a00533          	neg	a0,a0
    8002f6dc:	8082                	ret
  while (*str) {
    8002f6de:	0017c683          	lbu	a3,1(a5)
    str++;
    8002f6e2:	0785                	addi	a5,a5,1
  while (*str) {
    8002f6e4:	ca81                	beqz	a3,8002f6f4 <atol+0x66>
    sign = *str == '-';
    8002f6e6:	4581                	li	a1,0
    8002f6e8:	bfd1                	j	8002f6bc <atol+0x2e>
  while (*str) {
    8002f6ea:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    8002f6ee:	4585                	li	a1,1
    str++;
    8002f6f0:	97ae                	add	a5,a5,a1
  while (*str) {
    8002f6f2:	f6e9                	bnez	a3,8002f6bc <atol+0x2e>
  return sign ? -res : res;
    8002f6f4:	4501                	li	a0,0
}
    8002f6f6:	8082                	ret

000000008002f6f8 <_init>:

void _init(){

    8002f6f8:	8082                	ret
	...

000000008002f6fc <mhandler_entry>:
.endm

.balign 0x4
.global mhandler_entry
mhandler_entry:
    SAVE_CONTEXT
    8002f6fc:	f0810113          	addi	sp,sp,-248
    8002f700:	e006                	sd	ra,0(sp)
    8002f702:	e80e                	sd	gp,16(sp)
    8002f704:	ec12                	sd	tp,24(sp)
    8002f706:	f016                	sd	t0,32(sp)
    8002f708:	f41a                	sd	t1,40(sp)
    8002f70a:	f81e                	sd	t2,48(sp)
    8002f70c:	fc22                	sd	s0,56(sp)
    8002f70e:	e0a6                	sd	s1,64(sp)
    8002f710:	e4aa                	sd	a0,72(sp)
    8002f712:	e8ae                	sd	a1,80(sp)
    8002f714:	ecb2                	sd	a2,88(sp)
    8002f716:	f0b6                	sd	a3,96(sp)
    8002f718:	f4ba                	sd	a4,104(sp)
    8002f71a:	f8be                	sd	a5,112(sp)
    8002f71c:	fcc2                	sd	a6,120(sp)
    8002f71e:	e146                	sd	a7,128(sp)
    8002f720:	e54a                	sd	s2,136(sp)
    8002f722:	e94e                	sd	s3,144(sp)
    8002f724:	ed52                	sd	s4,152(sp)
    8002f726:	f156                	sd	s5,160(sp)
    8002f728:	f55a                	sd	s6,168(sp)
    8002f72a:	f95e                	sd	s7,176(sp)
    8002f72c:	fd62                	sd	s8,184(sp)
    8002f72e:	e1e6                	sd	s9,192(sp)
    8002f730:	e5ea                	sd	s10,200(sp)
    8002f732:	e9ee                	sd	s11,208(sp)
    8002f734:	edf2                	sd	t3,216(sp)
    8002f736:	f1f6                	sd	t4,224(sp)
    8002f738:	f5fa                	sd	t5,232(sp)
    8002f73a:	f5fe                	sd	t6,232(sp)
    jal mhandler
    8002f73c:	b4dd10ef          	jal	80001288 <mhandler>
    j _return
    8002f740:	a849                	j	8002f7d2 <_return>
    8002f742:	0001                	nop

000000008002f744 <hshandler_entry>:

.balign 0x4
.global hshandler_entry
hshandler_entry:
    SAVE_CONTEXT
    8002f744:	f0810113          	addi	sp,sp,-248
    8002f748:	e006                	sd	ra,0(sp)
    8002f74a:	e80e                	sd	gp,16(sp)
    8002f74c:	ec12                	sd	tp,24(sp)
    8002f74e:	f016                	sd	t0,32(sp)
    8002f750:	f41a                	sd	t1,40(sp)
    8002f752:	f81e                	sd	t2,48(sp)
    8002f754:	fc22                	sd	s0,56(sp)
    8002f756:	e0a6                	sd	s1,64(sp)
    8002f758:	e4aa                	sd	a0,72(sp)
    8002f75a:	e8ae                	sd	a1,80(sp)
    8002f75c:	ecb2                	sd	a2,88(sp)
    8002f75e:	f0b6                	sd	a3,96(sp)
    8002f760:	f4ba                	sd	a4,104(sp)
    8002f762:	f8be                	sd	a5,112(sp)
    8002f764:	fcc2                	sd	a6,120(sp)
    8002f766:	e146                	sd	a7,128(sp)
    8002f768:	e54a                	sd	s2,136(sp)
    8002f76a:	e94e                	sd	s3,144(sp)
    8002f76c:	ed52                	sd	s4,152(sp)
    8002f76e:	f156                	sd	s5,160(sp)
    8002f770:	f55a                	sd	s6,168(sp)
    8002f772:	f95e                	sd	s7,176(sp)
    8002f774:	fd62                	sd	s8,184(sp)
    8002f776:	e1e6                	sd	s9,192(sp)
    8002f778:	e5ea                	sd	s10,200(sp)
    8002f77a:	e9ee                	sd	s11,208(sp)
    8002f77c:	edf2                	sd	t3,216(sp)
    8002f77e:	f1f6                	sd	t4,224(sp)
    8002f780:	f5fa                	sd	t5,232(sp)
    8002f782:	f5fe                	sd	t6,232(sp)
    jal hshandler
    8002f784:	c4fd10ef          	jal	800013d2 <hshandler>
    j _return
    8002f788:	a0a9                	j	8002f7d2 <_return>
    8002f78a:	0001                	nop

000000008002f78c <vshandler_entry>:

.balign 0x4
.global vshandler_entry
vshandler_entry:
    SAVE_CONTEXT
    8002f78c:	f0810113          	addi	sp,sp,-248
    8002f790:	e006                	sd	ra,0(sp)
    8002f792:	e80e                	sd	gp,16(sp)
    8002f794:	ec12                	sd	tp,24(sp)
    8002f796:	f016                	sd	t0,32(sp)
    8002f798:	f41a                	sd	t1,40(sp)
    8002f79a:	f81e                	sd	t2,48(sp)
    8002f79c:	fc22                	sd	s0,56(sp)
    8002f79e:	e0a6                	sd	s1,64(sp)
    8002f7a0:	e4aa                	sd	a0,72(sp)
    8002f7a2:	e8ae                	sd	a1,80(sp)
    8002f7a4:	ecb2                	sd	a2,88(sp)
    8002f7a6:	f0b6                	sd	a3,96(sp)
    8002f7a8:	f4ba                	sd	a4,104(sp)
    8002f7aa:	f8be                	sd	a5,112(sp)
    8002f7ac:	fcc2                	sd	a6,120(sp)
    8002f7ae:	e146                	sd	a7,128(sp)
    8002f7b0:	e54a                	sd	s2,136(sp)
    8002f7b2:	e94e                	sd	s3,144(sp)
    8002f7b4:	ed52                	sd	s4,152(sp)
    8002f7b6:	f156                	sd	s5,160(sp)
    8002f7b8:	f55a                	sd	s6,168(sp)
    8002f7ba:	f95e                	sd	s7,176(sp)
    8002f7bc:	fd62                	sd	s8,184(sp)
    8002f7be:	e1e6                	sd	s9,192(sp)
    8002f7c0:	e5ea                	sd	s10,200(sp)
    8002f7c2:	e9ee                	sd	s11,208(sp)
    8002f7c4:	edf2                	sd	t3,216(sp)
    8002f7c6:	f1f6                	sd	t4,224(sp)
    8002f7c8:	f5fa                	sd	t5,232(sp)
    8002f7ca:	f5fe                	sd	t6,232(sp)
    jal vshandler
    8002f7cc:	d63d10ef          	jal	8000152e <vshandler>
    j _return
    8002f7d0:	a009                	j	8002f7d2 <_return>

000000008002f7d2 <_return>:
    
_return:
    li t0, 4 //make sure PRIV_M is 4
    8002f7d2:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    8002f7d4:	04550563          	beq	a0,t0,8002f81e <_return_from_m>

000000008002f7d8 <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    8002f7d8:	6082                	ld	ra,0(sp)
    8002f7da:	61c2                	ld	gp,16(sp)
    8002f7dc:	6262                	ld	tp,24(sp)
    8002f7de:	7282                	ld	t0,32(sp)
    8002f7e0:	7322                	ld	t1,40(sp)
    8002f7e2:	73c2                	ld	t2,48(sp)
    8002f7e4:	7462                	ld	s0,56(sp)
    8002f7e6:	6486                	ld	s1,64(sp)
    8002f7e8:	6526                	ld	a0,72(sp)
    8002f7ea:	65c6                	ld	a1,80(sp)
    8002f7ec:	6666                	ld	a2,88(sp)
    8002f7ee:	7686                	ld	a3,96(sp)
    8002f7f0:	7726                	ld	a4,104(sp)
    8002f7f2:	77c6                	ld	a5,112(sp)
    8002f7f4:	7866                	ld	a6,120(sp)
    8002f7f6:	688a                	ld	a7,128(sp)
    8002f7f8:	692a                	ld	s2,136(sp)
    8002f7fa:	69ca                	ld	s3,144(sp)
    8002f7fc:	6a6a                	ld	s4,152(sp)
    8002f7fe:	7a8a                	ld	s5,160(sp)
    8002f800:	7b2a                	ld	s6,168(sp)
    8002f802:	7bca                	ld	s7,176(sp)
    8002f804:	7c6a                	ld	s8,184(sp)
    8002f806:	6c8e                	ld	s9,192(sp)
    8002f808:	6d2e                	ld	s10,200(sp)
    8002f80a:	6dce                	ld	s11,208(sp)
    8002f80c:	6e6e                	ld	t3,216(sp)
    8002f80e:	7e8e                	ld	t4,224(sp)
    8002f810:	7f2e                	ld	t5,232(sp)
    8002f812:	7fce                	ld	t6,240(sp)
    8002f814:	0f810113          	addi	sp,sp,248
    sret
    8002f818:	10200073          	sret
    j   .
    8002f81c:	a001                	j	8002f81c <_return_from_s+0x44>

000000008002f81e <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    8002f81e:	6082                	ld	ra,0(sp)
    8002f820:	61c2                	ld	gp,16(sp)
    8002f822:	6262                	ld	tp,24(sp)
    8002f824:	7282                	ld	t0,32(sp)
    8002f826:	7322                	ld	t1,40(sp)
    8002f828:	73c2                	ld	t2,48(sp)
    8002f82a:	7462                	ld	s0,56(sp)
    8002f82c:	6486                	ld	s1,64(sp)
    8002f82e:	6526                	ld	a0,72(sp)
    8002f830:	65c6                	ld	a1,80(sp)
    8002f832:	6666                	ld	a2,88(sp)
    8002f834:	7686                	ld	a3,96(sp)
    8002f836:	7726                	ld	a4,104(sp)
    8002f838:	77c6                	ld	a5,112(sp)
    8002f83a:	7866                	ld	a6,120(sp)
    8002f83c:	688a                	ld	a7,128(sp)
    8002f83e:	692a                	ld	s2,136(sp)
    8002f840:	69ca                	ld	s3,144(sp)
    8002f842:	6a6a                	ld	s4,152(sp)
    8002f844:	7a8a                	ld	s5,160(sp)
    8002f846:	7b2a                	ld	s6,168(sp)
    8002f848:	7bca                	ld	s7,176(sp)
    8002f84a:	7c6a                	ld	s8,184(sp)
    8002f84c:	6c8e                	ld	s9,192(sp)
    8002f84e:	6d2e                	ld	s10,200(sp)
    8002f850:	6dce                	ld	s11,208(sp)
    8002f852:	6e6e                	ld	t3,216(sp)
    8002f854:	7e8e                	ld	t4,224(sp)
    8002f856:	7f2e                	ld	t5,232(sp)
    8002f858:	7fce                	ld	t6,240(sp)
    8002f85a:	0f810113          	addi	sp,sp,248
    mret
    8002f85e:	30200073          	mret
	...

000000008002f864 <m_test_entry>:

.balign 0x4
.global m_test_entry
m_test_entry:
    .balign 4
    j mhandler_0
    8002f864:	a809                	j	8002f876 <mhandler_0>
    j mhandler_1
    8002f866:	a899                	j	8002f8bc <mhandler_1>
    j mhandler_2
    8002f868:	a869                	j	8002f902 <mhandler_2>
    j mhandler_3
    8002f86a:	a8f9                	j	8002f948 <mhandler_3>
    j mhandler_4
    8002f86c:	a20d                	j	8002f98e <mhandler_4>
    j mhandler_5
    8002f86e:	a29d                	j	8002f9d4 <mhandler_5>
    j mhandler_6
    8002f870:	a26d                	j	8002fa1a <mhandler_6>
    j mhandler_7
    8002f872:	a2fd                	j	8002fa60 <mhandler_7>
    j mhandler_8
    8002f874:	ac0d                	j	8002faa6 <mhandler_8>

000000008002f876 <mhandler_0>:

mhandler_0:
    SAVE_CONTEXT
    8002f876:	f0810113          	addi	sp,sp,-248
    8002f87a:	e006                	sd	ra,0(sp)
    8002f87c:	e80e                	sd	gp,16(sp)
    8002f87e:	ec12                	sd	tp,24(sp)
    8002f880:	f016                	sd	t0,32(sp)
    8002f882:	f41a                	sd	t1,40(sp)
    8002f884:	f81e                	sd	t2,48(sp)
    8002f886:	fc22                	sd	s0,56(sp)
    8002f888:	e0a6                	sd	s1,64(sp)
    8002f88a:	e4aa                	sd	a0,72(sp)
    8002f88c:	e8ae                	sd	a1,80(sp)
    8002f88e:	ecb2                	sd	a2,88(sp)
    8002f890:	f0b6                	sd	a3,96(sp)
    8002f892:	f4ba                	sd	a4,104(sp)
    8002f894:	f8be                	sd	a5,112(sp)
    8002f896:	fcc2                	sd	a6,120(sp)
    8002f898:	e146                	sd	a7,128(sp)
    8002f89a:	e54a                	sd	s2,136(sp)
    8002f89c:	e94e                	sd	s3,144(sp)
    8002f89e:	ed52                	sd	s4,152(sp)
    8002f8a0:	f156                	sd	s5,160(sp)
    8002f8a2:	f55a                	sd	s6,168(sp)
    8002f8a4:	f95e                	sd	s7,176(sp)
    8002f8a6:	fd62                	sd	s8,184(sp)
    8002f8a8:	e1e6                	sd	s9,192(sp)
    8002f8aa:	e5ea                	sd	s10,200(sp)
    8002f8ac:	e9ee                	sd	s11,208(sp)
    8002f8ae:	edf2                	sd	t3,216(sp)
    8002f8b0:	f1f6                	sd	t4,224(sp)
    8002f8b2:	f5fa                	sd	t5,232(sp)
    8002f8b4:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_0
    8002f8b6:	884fb0ef          	jal	8002a93a <m_test_entry_two_0>
    j _mnreturn
    8002f8ba:	a789                	j	8002fffc <_mnreturn>

000000008002f8bc <mhandler_1>:

mhandler_1:
    SAVE_CONTEXT
    8002f8bc:	f0810113          	addi	sp,sp,-248
    8002f8c0:	e006                	sd	ra,0(sp)
    8002f8c2:	e80e                	sd	gp,16(sp)
    8002f8c4:	ec12                	sd	tp,24(sp)
    8002f8c6:	f016                	sd	t0,32(sp)
    8002f8c8:	f41a                	sd	t1,40(sp)
    8002f8ca:	f81e                	sd	t2,48(sp)
    8002f8cc:	fc22                	sd	s0,56(sp)
    8002f8ce:	e0a6                	sd	s1,64(sp)
    8002f8d0:	e4aa                	sd	a0,72(sp)
    8002f8d2:	e8ae                	sd	a1,80(sp)
    8002f8d4:	ecb2                	sd	a2,88(sp)
    8002f8d6:	f0b6                	sd	a3,96(sp)
    8002f8d8:	f4ba                	sd	a4,104(sp)
    8002f8da:	f8be                	sd	a5,112(sp)
    8002f8dc:	fcc2                	sd	a6,120(sp)
    8002f8de:	e146                	sd	a7,128(sp)
    8002f8e0:	e54a                	sd	s2,136(sp)
    8002f8e2:	e94e                	sd	s3,144(sp)
    8002f8e4:	ed52                	sd	s4,152(sp)
    8002f8e6:	f156                	sd	s5,160(sp)
    8002f8e8:	f55a                	sd	s6,168(sp)
    8002f8ea:	f95e                	sd	s7,176(sp)
    8002f8ec:	fd62                	sd	s8,184(sp)
    8002f8ee:	e1e6                	sd	s9,192(sp)
    8002f8f0:	e5ea                	sd	s10,200(sp)
    8002f8f2:	e9ee                	sd	s11,208(sp)
    8002f8f4:	edf2                	sd	t3,216(sp)
    8002f8f6:	f1f6                	sd	t4,224(sp)
    8002f8f8:	f5fa                	sd	t5,232(sp)
    8002f8fa:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_1
    8002f8fc:	b6afa0ef          	jal	80029c66 <m_test_entry_two_1>
    j _mnreturn
    8002f900:	adf5                	j	8002fffc <_mnreturn>

000000008002f902 <mhandler_2>:

mhandler_2:
    SAVE_CONTEXT
    8002f902:	f0810113          	addi	sp,sp,-248
    8002f906:	e006                	sd	ra,0(sp)
    8002f908:	e80e                	sd	gp,16(sp)
    8002f90a:	ec12                	sd	tp,24(sp)
    8002f90c:	f016                	sd	t0,32(sp)
    8002f90e:	f41a                	sd	t1,40(sp)
    8002f910:	f81e                	sd	t2,48(sp)
    8002f912:	fc22                	sd	s0,56(sp)
    8002f914:	e0a6                	sd	s1,64(sp)
    8002f916:	e4aa                	sd	a0,72(sp)
    8002f918:	e8ae                	sd	a1,80(sp)
    8002f91a:	ecb2                	sd	a2,88(sp)
    8002f91c:	f0b6                	sd	a3,96(sp)
    8002f91e:	f4ba                	sd	a4,104(sp)
    8002f920:	f8be                	sd	a5,112(sp)
    8002f922:	fcc2                	sd	a6,120(sp)
    8002f924:	e146                	sd	a7,128(sp)
    8002f926:	e54a                	sd	s2,136(sp)
    8002f928:	e94e                	sd	s3,144(sp)
    8002f92a:	ed52                	sd	s4,152(sp)
    8002f92c:	f156                	sd	s5,160(sp)
    8002f92e:	f55a                	sd	s6,168(sp)
    8002f930:	f95e                	sd	s7,176(sp)
    8002f932:	fd62                	sd	s8,184(sp)
    8002f934:	e1e6                	sd	s9,192(sp)
    8002f936:	e5ea                	sd	s10,200(sp)
    8002f938:	e9ee                	sd	s11,208(sp)
    8002f93a:	edf2                	sd	t3,216(sp)
    8002f93c:	f1f6                	sd	t4,224(sp)
    8002f93e:	f5fa                	sd	t5,232(sp)
    8002f940:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_2
    8002f942:	bbefa0ef          	jal	80029d00 <m_test_entry_two_2>
    j _mnreturn
    8002f946:	ad5d                	j	8002fffc <_mnreturn>

000000008002f948 <mhandler_3>:

mhandler_3:
    SAVE_CONTEXT
    8002f948:	f0810113          	addi	sp,sp,-248
    8002f94c:	e006                	sd	ra,0(sp)
    8002f94e:	e80e                	sd	gp,16(sp)
    8002f950:	ec12                	sd	tp,24(sp)
    8002f952:	f016                	sd	t0,32(sp)
    8002f954:	f41a                	sd	t1,40(sp)
    8002f956:	f81e                	sd	t2,48(sp)
    8002f958:	fc22                	sd	s0,56(sp)
    8002f95a:	e0a6                	sd	s1,64(sp)
    8002f95c:	e4aa                	sd	a0,72(sp)
    8002f95e:	e8ae                	sd	a1,80(sp)
    8002f960:	ecb2                	sd	a2,88(sp)
    8002f962:	f0b6                	sd	a3,96(sp)
    8002f964:	f4ba                	sd	a4,104(sp)
    8002f966:	f8be                	sd	a5,112(sp)
    8002f968:	fcc2                	sd	a6,120(sp)
    8002f96a:	e146                	sd	a7,128(sp)
    8002f96c:	e54a                	sd	s2,136(sp)
    8002f96e:	e94e                	sd	s3,144(sp)
    8002f970:	ed52                	sd	s4,152(sp)
    8002f972:	f156                	sd	s5,160(sp)
    8002f974:	f55a                	sd	s6,168(sp)
    8002f976:	f95e                	sd	s7,176(sp)
    8002f978:	fd62                	sd	s8,184(sp)
    8002f97a:	e1e6                	sd	s9,192(sp)
    8002f97c:	e5ea                	sd	s10,200(sp)
    8002f97e:	e9ee                	sd	s11,208(sp)
    8002f980:	edf2                	sd	t3,216(sp)
    8002f982:	f1f6                	sd	t4,224(sp)
    8002f984:	f5fa                	sd	t5,232(sp)
    8002f986:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_3
    8002f988:	c12fa0ef          	jal	80029d9a <m_test_entry_two_3>
    j _mnreturn
    8002f98c:	ad85                	j	8002fffc <_mnreturn>

000000008002f98e <mhandler_4>:

mhandler_4:
    SAVE_CONTEXT
    8002f98e:	f0810113          	addi	sp,sp,-248
    8002f992:	e006                	sd	ra,0(sp)
    8002f994:	e80e                	sd	gp,16(sp)
    8002f996:	ec12                	sd	tp,24(sp)
    8002f998:	f016                	sd	t0,32(sp)
    8002f99a:	f41a                	sd	t1,40(sp)
    8002f99c:	f81e                	sd	t2,48(sp)
    8002f99e:	fc22                	sd	s0,56(sp)
    8002f9a0:	e0a6                	sd	s1,64(sp)
    8002f9a2:	e4aa                	sd	a0,72(sp)
    8002f9a4:	e8ae                	sd	a1,80(sp)
    8002f9a6:	ecb2                	sd	a2,88(sp)
    8002f9a8:	f0b6                	sd	a3,96(sp)
    8002f9aa:	f4ba                	sd	a4,104(sp)
    8002f9ac:	f8be                	sd	a5,112(sp)
    8002f9ae:	fcc2                	sd	a6,120(sp)
    8002f9b0:	e146                	sd	a7,128(sp)
    8002f9b2:	e54a                	sd	s2,136(sp)
    8002f9b4:	e94e                	sd	s3,144(sp)
    8002f9b6:	ed52                	sd	s4,152(sp)
    8002f9b8:	f156                	sd	s5,160(sp)
    8002f9ba:	f55a                	sd	s6,168(sp)
    8002f9bc:	f95e                	sd	s7,176(sp)
    8002f9be:	fd62                	sd	s8,184(sp)
    8002f9c0:	e1e6                	sd	s9,192(sp)
    8002f9c2:	e5ea                	sd	s10,200(sp)
    8002f9c4:	e9ee                	sd	s11,208(sp)
    8002f9c6:	edf2                	sd	t3,216(sp)
    8002f9c8:	f1f6                	sd	t4,224(sp)
    8002f9ca:	f5fa                	sd	t5,232(sp)
    8002f9cc:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_4
    8002f9ce:	c68fa0ef          	jal	80029e36 <m_test_entry_two_4>
    j _mnreturn
    8002f9d2:	a52d                	j	8002fffc <_mnreturn>

000000008002f9d4 <mhandler_5>:

mhandler_5:
    SAVE_CONTEXT
    8002f9d4:	f0810113          	addi	sp,sp,-248
    8002f9d8:	e006                	sd	ra,0(sp)
    8002f9da:	e80e                	sd	gp,16(sp)
    8002f9dc:	ec12                	sd	tp,24(sp)
    8002f9de:	f016                	sd	t0,32(sp)
    8002f9e0:	f41a                	sd	t1,40(sp)
    8002f9e2:	f81e                	sd	t2,48(sp)
    8002f9e4:	fc22                	sd	s0,56(sp)
    8002f9e6:	e0a6                	sd	s1,64(sp)
    8002f9e8:	e4aa                	sd	a0,72(sp)
    8002f9ea:	e8ae                	sd	a1,80(sp)
    8002f9ec:	ecb2                	sd	a2,88(sp)
    8002f9ee:	f0b6                	sd	a3,96(sp)
    8002f9f0:	f4ba                	sd	a4,104(sp)
    8002f9f2:	f8be                	sd	a5,112(sp)
    8002f9f4:	fcc2                	sd	a6,120(sp)
    8002f9f6:	e146                	sd	a7,128(sp)
    8002f9f8:	e54a                	sd	s2,136(sp)
    8002f9fa:	e94e                	sd	s3,144(sp)
    8002f9fc:	ed52                	sd	s4,152(sp)
    8002f9fe:	f156                	sd	s5,160(sp)
    8002fa00:	f55a                	sd	s6,168(sp)
    8002fa02:	f95e                	sd	s7,176(sp)
    8002fa04:	fd62                	sd	s8,184(sp)
    8002fa06:	e1e6                	sd	s9,192(sp)
    8002fa08:	e5ea                	sd	s10,200(sp)
    8002fa0a:	e9ee                	sd	s11,208(sp)
    8002fa0c:	edf2                	sd	t3,216(sp)
    8002fa0e:	f1f6                	sd	t4,224(sp)
    8002fa10:	f5fa                	sd	t5,232(sp)
    8002fa12:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_5
    8002fa14:	cbefa0ef          	jal	80029ed2 <m_test_entry_two_5>
    j _mnreturn
    8002fa18:	a3d5                	j	8002fffc <_mnreturn>

000000008002fa1a <mhandler_6>:

mhandler_6:
    SAVE_CONTEXT
    8002fa1a:	f0810113          	addi	sp,sp,-248
    8002fa1e:	e006                	sd	ra,0(sp)
    8002fa20:	e80e                	sd	gp,16(sp)
    8002fa22:	ec12                	sd	tp,24(sp)
    8002fa24:	f016                	sd	t0,32(sp)
    8002fa26:	f41a                	sd	t1,40(sp)
    8002fa28:	f81e                	sd	t2,48(sp)
    8002fa2a:	fc22                	sd	s0,56(sp)
    8002fa2c:	e0a6                	sd	s1,64(sp)
    8002fa2e:	e4aa                	sd	a0,72(sp)
    8002fa30:	e8ae                	sd	a1,80(sp)
    8002fa32:	ecb2                	sd	a2,88(sp)
    8002fa34:	f0b6                	sd	a3,96(sp)
    8002fa36:	f4ba                	sd	a4,104(sp)
    8002fa38:	f8be                	sd	a5,112(sp)
    8002fa3a:	fcc2                	sd	a6,120(sp)
    8002fa3c:	e146                	sd	a7,128(sp)
    8002fa3e:	e54a                	sd	s2,136(sp)
    8002fa40:	e94e                	sd	s3,144(sp)
    8002fa42:	ed52                	sd	s4,152(sp)
    8002fa44:	f156                	sd	s5,160(sp)
    8002fa46:	f55a                	sd	s6,168(sp)
    8002fa48:	f95e                	sd	s7,176(sp)
    8002fa4a:	fd62                	sd	s8,184(sp)
    8002fa4c:	e1e6                	sd	s9,192(sp)
    8002fa4e:	e5ea                	sd	s10,200(sp)
    8002fa50:	e9ee                	sd	s11,208(sp)
    8002fa52:	edf2                	sd	t3,216(sp)
    8002fa54:	f1f6                	sd	t4,224(sp)
    8002fa56:	f5fa                	sd	t5,232(sp)
    8002fa58:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_6
    8002fa5a:	d14fa0ef          	jal	80029f6e <m_test_entry_two_6>
    j _mnreturn
    8002fa5e:	ab79                	j	8002fffc <_mnreturn>

000000008002fa60 <mhandler_7>:

mhandler_7:
    SAVE_CONTEXT
    8002fa60:	f0810113          	addi	sp,sp,-248
    8002fa64:	e006                	sd	ra,0(sp)
    8002fa66:	e80e                	sd	gp,16(sp)
    8002fa68:	ec12                	sd	tp,24(sp)
    8002fa6a:	f016                	sd	t0,32(sp)
    8002fa6c:	f41a                	sd	t1,40(sp)
    8002fa6e:	f81e                	sd	t2,48(sp)
    8002fa70:	fc22                	sd	s0,56(sp)
    8002fa72:	e0a6                	sd	s1,64(sp)
    8002fa74:	e4aa                	sd	a0,72(sp)
    8002fa76:	e8ae                	sd	a1,80(sp)
    8002fa78:	ecb2                	sd	a2,88(sp)
    8002fa7a:	f0b6                	sd	a3,96(sp)
    8002fa7c:	f4ba                	sd	a4,104(sp)
    8002fa7e:	f8be                	sd	a5,112(sp)
    8002fa80:	fcc2                	sd	a6,120(sp)
    8002fa82:	e146                	sd	a7,128(sp)
    8002fa84:	e54a                	sd	s2,136(sp)
    8002fa86:	e94e                	sd	s3,144(sp)
    8002fa88:	ed52                	sd	s4,152(sp)
    8002fa8a:	f156                	sd	s5,160(sp)
    8002fa8c:	f55a                	sd	s6,168(sp)
    8002fa8e:	f95e                	sd	s7,176(sp)
    8002fa90:	fd62                	sd	s8,184(sp)
    8002fa92:	e1e6                	sd	s9,192(sp)
    8002fa94:	e5ea                	sd	s10,200(sp)
    8002fa96:	e9ee                	sd	s11,208(sp)
    8002fa98:	edf2                	sd	t3,216(sp)
    8002fa9a:	f1f6                	sd	t4,224(sp)
    8002fa9c:	f5fa                	sd	t5,232(sp)
    8002fa9e:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_7
    8002faa0:	d6afa0ef          	jal	8002a00a <m_test_entry_two_7>
    j _mnreturn
    8002faa4:	aba1                	j	8002fffc <_mnreturn>

000000008002faa6 <mhandler_8>:
    
mhandler_8:
    SAVE_CONTEXT
    8002faa6:	f0810113          	addi	sp,sp,-248
    8002faaa:	e006                	sd	ra,0(sp)
    8002faac:	e80e                	sd	gp,16(sp)
    8002faae:	ec12                	sd	tp,24(sp)
    8002fab0:	f016                	sd	t0,32(sp)
    8002fab2:	f41a                	sd	t1,40(sp)
    8002fab4:	f81e                	sd	t2,48(sp)
    8002fab6:	fc22                	sd	s0,56(sp)
    8002fab8:	e0a6                	sd	s1,64(sp)
    8002faba:	e4aa                	sd	a0,72(sp)
    8002fabc:	e8ae                	sd	a1,80(sp)
    8002fabe:	ecb2                	sd	a2,88(sp)
    8002fac0:	f0b6                	sd	a3,96(sp)
    8002fac2:	f4ba                	sd	a4,104(sp)
    8002fac4:	f8be                	sd	a5,112(sp)
    8002fac6:	fcc2                	sd	a6,120(sp)
    8002fac8:	e146                	sd	a7,128(sp)
    8002faca:	e54a                	sd	s2,136(sp)
    8002facc:	e94e                	sd	s3,144(sp)
    8002face:	ed52                	sd	s4,152(sp)
    8002fad0:	f156                	sd	s5,160(sp)
    8002fad2:	f55a                	sd	s6,168(sp)
    8002fad4:	f95e                	sd	s7,176(sp)
    8002fad6:	fd62                	sd	s8,184(sp)
    8002fad8:	e1e6                	sd	s9,192(sp)
    8002fada:	e5ea                	sd	s10,200(sp)
    8002fadc:	e9ee                	sd	s11,208(sp)
    8002fade:	edf2                	sd	t3,216(sp)
    8002fae0:	f1f6                	sd	t4,224(sp)
    8002fae2:	f5fa                	sd	t5,232(sp)
    8002fae4:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_8
    8002fae6:	dc0fa0ef          	jal	8002a0a6 <m_test_entry_two_8>
    j _mnreturn
    8002faea:	ab09                	j	8002fffc <_mnreturn>

000000008002faec <hs_test_entry>:

.balign 0x4
.global hs_test_entry
hs_test_entry:
    .balign 4
    j hshandler_0
    8002faec:	a809                	j	8002fafe <hshandler_0>
    j hshandler_1
    8002faee:	a899                	j	8002fb44 <hshandler_1>
    j hshandler_2
    8002faf0:	a869                	j	8002fb8a <hshandler_2>
    j hshandler_3
    8002faf2:	a8f9                	j	8002fbd0 <hshandler_3>
    j hshandler_4
    8002faf4:	a20d                	j	8002fc16 <hshandler_4>
    j hshandler_5
    8002faf6:	a29d                	j	8002fc5c <hshandler_5>
    j hshandler_6
    8002faf8:	a26d                	j	8002fca2 <hshandler_6>
    j hshandler_7
    8002fafa:	a2fd                	j	8002fce8 <hshandler_7>
    j hshandler_8
    8002fafc:	ac0d                	j	8002fd2e <hshandler_8>

000000008002fafe <hshandler_0>:

hshandler_0:
    SAVE_CONTEXT
    8002fafe:	f0810113          	addi	sp,sp,-248
    8002fb02:	e006                	sd	ra,0(sp)
    8002fb04:	e80e                	sd	gp,16(sp)
    8002fb06:	ec12                	sd	tp,24(sp)
    8002fb08:	f016                	sd	t0,32(sp)
    8002fb0a:	f41a                	sd	t1,40(sp)
    8002fb0c:	f81e                	sd	t2,48(sp)
    8002fb0e:	fc22                	sd	s0,56(sp)
    8002fb10:	e0a6                	sd	s1,64(sp)
    8002fb12:	e4aa                	sd	a0,72(sp)
    8002fb14:	e8ae                	sd	a1,80(sp)
    8002fb16:	ecb2                	sd	a2,88(sp)
    8002fb18:	f0b6                	sd	a3,96(sp)
    8002fb1a:	f4ba                	sd	a4,104(sp)
    8002fb1c:	f8be                	sd	a5,112(sp)
    8002fb1e:	fcc2                	sd	a6,120(sp)
    8002fb20:	e146                	sd	a7,128(sp)
    8002fb22:	e54a                	sd	s2,136(sp)
    8002fb24:	e94e                	sd	s3,144(sp)
    8002fb26:	ed52                	sd	s4,152(sp)
    8002fb28:	f156                	sd	s5,160(sp)
    8002fb2a:	f55a                	sd	s6,168(sp)
    8002fb2c:	f95e                	sd	s7,176(sp)
    8002fb2e:	fd62                	sd	s8,184(sp)
    8002fb30:	e1e6                	sd	s9,192(sp)
    8002fb32:	e5ea                	sd	s10,200(sp)
    8002fb34:	e9ee                	sd	s11,208(sp)
    8002fb36:	edf2                	sd	t3,216(sp)
    8002fb38:	f1f6                	sd	t4,224(sp)
    8002fb3a:	f5fa                	sd	t5,232(sp)
    8002fb3c:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_0
    8002fb3e:	fe1fa0ef          	jal	8002ab1e <hs_test_entry_two_0>
    j _return
    8002fb42:	a339                	j	80030050 <_return>

000000008002fb44 <hshandler_1>:

hshandler_1:
    SAVE_CONTEXT
    8002fb44:	f0810113          	addi	sp,sp,-248
    8002fb48:	e006                	sd	ra,0(sp)
    8002fb4a:	e80e                	sd	gp,16(sp)
    8002fb4c:	ec12                	sd	tp,24(sp)
    8002fb4e:	f016                	sd	t0,32(sp)
    8002fb50:	f41a                	sd	t1,40(sp)
    8002fb52:	f81e                	sd	t2,48(sp)
    8002fb54:	fc22                	sd	s0,56(sp)
    8002fb56:	e0a6                	sd	s1,64(sp)
    8002fb58:	e4aa                	sd	a0,72(sp)
    8002fb5a:	e8ae                	sd	a1,80(sp)
    8002fb5c:	ecb2                	sd	a2,88(sp)
    8002fb5e:	f0b6                	sd	a3,96(sp)
    8002fb60:	f4ba                	sd	a4,104(sp)
    8002fb62:	f8be                	sd	a5,112(sp)
    8002fb64:	fcc2                	sd	a6,120(sp)
    8002fb66:	e146                	sd	a7,128(sp)
    8002fb68:	e54a                	sd	s2,136(sp)
    8002fb6a:	e94e                	sd	s3,144(sp)
    8002fb6c:	ed52                	sd	s4,152(sp)
    8002fb6e:	f156                	sd	s5,160(sp)
    8002fb70:	f55a                	sd	s6,168(sp)
    8002fb72:	f95e                	sd	s7,176(sp)
    8002fb74:	fd62                	sd	s8,184(sp)
    8002fb76:	e1e6                	sd	s9,192(sp)
    8002fb78:	e5ea                	sd	s10,200(sp)
    8002fb7a:	e9ee                	sd	s11,208(sp)
    8002fb7c:	edf2                	sd	t3,216(sp)
    8002fb7e:	f1f6                	sd	t4,224(sp)
    8002fb80:	f5fa                	sd	t5,232(sp)
    8002fb82:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_1
    8002fb84:	dbefa0ef          	jal	8002a142 <hs_test_entry_two_1>
    j _return
    8002fb88:	a1e1                	j	80030050 <_return>

000000008002fb8a <hshandler_2>:

hshandler_2:
    SAVE_CONTEXT
    8002fb8a:	f0810113          	addi	sp,sp,-248
    8002fb8e:	e006                	sd	ra,0(sp)
    8002fb90:	e80e                	sd	gp,16(sp)
    8002fb92:	ec12                	sd	tp,24(sp)
    8002fb94:	f016                	sd	t0,32(sp)
    8002fb96:	f41a                	sd	t1,40(sp)
    8002fb98:	f81e                	sd	t2,48(sp)
    8002fb9a:	fc22                	sd	s0,56(sp)
    8002fb9c:	e0a6                	sd	s1,64(sp)
    8002fb9e:	e4aa                	sd	a0,72(sp)
    8002fba0:	e8ae                	sd	a1,80(sp)
    8002fba2:	ecb2                	sd	a2,88(sp)
    8002fba4:	f0b6                	sd	a3,96(sp)
    8002fba6:	f4ba                	sd	a4,104(sp)
    8002fba8:	f8be                	sd	a5,112(sp)
    8002fbaa:	fcc2                	sd	a6,120(sp)
    8002fbac:	e146                	sd	a7,128(sp)
    8002fbae:	e54a                	sd	s2,136(sp)
    8002fbb0:	e94e                	sd	s3,144(sp)
    8002fbb2:	ed52                	sd	s4,152(sp)
    8002fbb4:	f156                	sd	s5,160(sp)
    8002fbb6:	f55a                	sd	s6,168(sp)
    8002fbb8:	f95e                	sd	s7,176(sp)
    8002fbba:	fd62                	sd	s8,184(sp)
    8002fbbc:	e1e6                	sd	s9,192(sp)
    8002fbbe:	e5ea                	sd	s10,200(sp)
    8002fbc0:	e9ee                	sd	s11,208(sp)
    8002fbc2:	edf2                	sd	t3,216(sp)
    8002fbc4:	f1f6                	sd	t4,224(sp)
    8002fbc6:	f5fa                	sd	t5,232(sp)
    8002fbc8:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_2
    8002fbca:	df6fa0ef          	jal	8002a1c0 <hs_test_entry_two_2>
    j _return
    8002fbce:	a149                	j	80030050 <_return>

000000008002fbd0 <hshandler_3>:

hshandler_3:
    SAVE_CONTEXT
    8002fbd0:	f0810113          	addi	sp,sp,-248
    8002fbd4:	e006                	sd	ra,0(sp)
    8002fbd6:	e80e                	sd	gp,16(sp)
    8002fbd8:	ec12                	sd	tp,24(sp)
    8002fbda:	f016                	sd	t0,32(sp)
    8002fbdc:	f41a                	sd	t1,40(sp)
    8002fbde:	f81e                	sd	t2,48(sp)
    8002fbe0:	fc22                	sd	s0,56(sp)
    8002fbe2:	e0a6                	sd	s1,64(sp)
    8002fbe4:	e4aa                	sd	a0,72(sp)
    8002fbe6:	e8ae                	sd	a1,80(sp)
    8002fbe8:	ecb2                	sd	a2,88(sp)
    8002fbea:	f0b6                	sd	a3,96(sp)
    8002fbec:	f4ba                	sd	a4,104(sp)
    8002fbee:	f8be                	sd	a5,112(sp)
    8002fbf0:	fcc2                	sd	a6,120(sp)
    8002fbf2:	e146                	sd	a7,128(sp)
    8002fbf4:	e54a                	sd	s2,136(sp)
    8002fbf6:	e94e                	sd	s3,144(sp)
    8002fbf8:	ed52                	sd	s4,152(sp)
    8002fbfa:	f156                	sd	s5,160(sp)
    8002fbfc:	f55a                	sd	s6,168(sp)
    8002fbfe:	f95e                	sd	s7,176(sp)
    8002fc00:	fd62                	sd	s8,184(sp)
    8002fc02:	e1e6                	sd	s9,192(sp)
    8002fc04:	e5ea                	sd	s10,200(sp)
    8002fc06:	e9ee                	sd	s11,208(sp)
    8002fc08:	edf2                	sd	t3,216(sp)
    8002fc0a:	f1f6                	sd	t4,224(sp)
    8002fc0c:	f5fa                	sd	t5,232(sp)
    8002fc0e:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_3
    8002fc10:	e2efa0ef          	jal	8002a23e <hs_test_entry_two_3>
    j _return
    8002fc14:	a935                	j	80030050 <_return>

000000008002fc16 <hshandler_4>:

hshandler_4:
    SAVE_CONTEXT
    8002fc16:	f0810113          	addi	sp,sp,-248
    8002fc1a:	e006                	sd	ra,0(sp)
    8002fc1c:	e80e                	sd	gp,16(sp)
    8002fc1e:	ec12                	sd	tp,24(sp)
    8002fc20:	f016                	sd	t0,32(sp)
    8002fc22:	f41a                	sd	t1,40(sp)
    8002fc24:	f81e                	sd	t2,48(sp)
    8002fc26:	fc22                	sd	s0,56(sp)
    8002fc28:	e0a6                	sd	s1,64(sp)
    8002fc2a:	e4aa                	sd	a0,72(sp)
    8002fc2c:	e8ae                	sd	a1,80(sp)
    8002fc2e:	ecb2                	sd	a2,88(sp)
    8002fc30:	f0b6                	sd	a3,96(sp)
    8002fc32:	f4ba                	sd	a4,104(sp)
    8002fc34:	f8be                	sd	a5,112(sp)
    8002fc36:	fcc2                	sd	a6,120(sp)
    8002fc38:	e146                	sd	a7,128(sp)
    8002fc3a:	e54a                	sd	s2,136(sp)
    8002fc3c:	e94e                	sd	s3,144(sp)
    8002fc3e:	ed52                	sd	s4,152(sp)
    8002fc40:	f156                	sd	s5,160(sp)
    8002fc42:	f55a                	sd	s6,168(sp)
    8002fc44:	f95e                	sd	s7,176(sp)
    8002fc46:	fd62                	sd	s8,184(sp)
    8002fc48:	e1e6                	sd	s9,192(sp)
    8002fc4a:	e5ea                	sd	s10,200(sp)
    8002fc4c:	e9ee                	sd	s11,208(sp)
    8002fc4e:	edf2                	sd	t3,216(sp)
    8002fc50:	f1f6                	sd	t4,224(sp)
    8002fc52:	f5fa                	sd	t5,232(sp)
    8002fc54:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_4
    8002fc56:	e68fa0ef          	jal	8002a2be <hs_test_entry_two_4>
    j _return
    8002fc5a:	aedd                	j	80030050 <_return>

000000008002fc5c <hshandler_5>:

hshandler_5:
    SAVE_CONTEXT
    8002fc5c:	f0810113          	addi	sp,sp,-248
    8002fc60:	e006                	sd	ra,0(sp)
    8002fc62:	e80e                	sd	gp,16(sp)
    8002fc64:	ec12                	sd	tp,24(sp)
    8002fc66:	f016                	sd	t0,32(sp)
    8002fc68:	f41a                	sd	t1,40(sp)
    8002fc6a:	f81e                	sd	t2,48(sp)
    8002fc6c:	fc22                	sd	s0,56(sp)
    8002fc6e:	e0a6                	sd	s1,64(sp)
    8002fc70:	e4aa                	sd	a0,72(sp)
    8002fc72:	e8ae                	sd	a1,80(sp)
    8002fc74:	ecb2                	sd	a2,88(sp)
    8002fc76:	f0b6                	sd	a3,96(sp)
    8002fc78:	f4ba                	sd	a4,104(sp)
    8002fc7a:	f8be                	sd	a5,112(sp)
    8002fc7c:	fcc2                	sd	a6,120(sp)
    8002fc7e:	e146                	sd	a7,128(sp)
    8002fc80:	e54a                	sd	s2,136(sp)
    8002fc82:	e94e                	sd	s3,144(sp)
    8002fc84:	ed52                	sd	s4,152(sp)
    8002fc86:	f156                	sd	s5,160(sp)
    8002fc88:	f55a                	sd	s6,168(sp)
    8002fc8a:	f95e                	sd	s7,176(sp)
    8002fc8c:	fd62                	sd	s8,184(sp)
    8002fc8e:	e1e6                	sd	s9,192(sp)
    8002fc90:	e5ea                	sd	s10,200(sp)
    8002fc92:	e9ee                	sd	s11,208(sp)
    8002fc94:	edf2                	sd	t3,216(sp)
    8002fc96:	f1f6                	sd	t4,224(sp)
    8002fc98:	f5fa                	sd	t5,232(sp)
    8002fc9a:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_5
    8002fc9c:	ea2fa0ef          	jal	8002a33e <hs_test_entry_two_5>
    j _return
    8002fca0:	ae45                	j	80030050 <_return>

000000008002fca2 <hshandler_6>:

hshandler_6:
    SAVE_CONTEXT
    8002fca2:	f0810113          	addi	sp,sp,-248
    8002fca6:	e006                	sd	ra,0(sp)
    8002fca8:	e80e                	sd	gp,16(sp)
    8002fcaa:	ec12                	sd	tp,24(sp)
    8002fcac:	f016                	sd	t0,32(sp)
    8002fcae:	f41a                	sd	t1,40(sp)
    8002fcb0:	f81e                	sd	t2,48(sp)
    8002fcb2:	fc22                	sd	s0,56(sp)
    8002fcb4:	e0a6                	sd	s1,64(sp)
    8002fcb6:	e4aa                	sd	a0,72(sp)
    8002fcb8:	e8ae                	sd	a1,80(sp)
    8002fcba:	ecb2                	sd	a2,88(sp)
    8002fcbc:	f0b6                	sd	a3,96(sp)
    8002fcbe:	f4ba                	sd	a4,104(sp)
    8002fcc0:	f8be                	sd	a5,112(sp)
    8002fcc2:	fcc2                	sd	a6,120(sp)
    8002fcc4:	e146                	sd	a7,128(sp)
    8002fcc6:	e54a                	sd	s2,136(sp)
    8002fcc8:	e94e                	sd	s3,144(sp)
    8002fcca:	ed52                	sd	s4,152(sp)
    8002fccc:	f156                	sd	s5,160(sp)
    8002fcce:	f55a                	sd	s6,168(sp)
    8002fcd0:	f95e                	sd	s7,176(sp)
    8002fcd2:	fd62                	sd	s8,184(sp)
    8002fcd4:	e1e6                	sd	s9,192(sp)
    8002fcd6:	e5ea                	sd	s10,200(sp)
    8002fcd8:	e9ee                	sd	s11,208(sp)
    8002fcda:	edf2                	sd	t3,216(sp)
    8002fcdc:	f1f6                	sd	t4,224(sp)
    8002fcde:	f5fa                	sd	t5,232(sp)
    8002fce0:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_6
    8002fce2:	edcfa0ef          	jal	8002a3be <hs_test_entry_two_6>
    j _return
    8002fce6:	a6ad                	j	80030050 <_return>

000000008002fce8 <hshandler_7>:

hshandler_7:
    SAVE_CONTEXT
    8002fce8:	f0810113          	addi	sp,sp,-248
    8002fcec:	e006                	sd	ra,0(sp)
    8002fcee:	e80e                	sd	gp,16(sp)
    8002fcf0:	ec12                	sd	tp,24(sp)
    8002fcf2:	f016                	sd	t0,32(sp)
    8002fcf4:	f41a                	sd	t1,40(sp)
    8002fcf6:	f81e                	sd	t2,48(sp)
    8002fcf8:	fc22                	sd	s0,56(sp)
    8002fcfa:	e0a6                	sd	s1,64(sp)
    8002fcfc:	e4aa                	sd	a0,72(sp)
    8002fcfe:	e8ae                	sd	a1,80(sp)
    8002fd00:	ecb2                	sd	a2,88(sp)
    8002fd02:	f0b6                	sd	a3,96(sp)
    8002fd04:	f4ba                	sd	a4,104(sp)
    8002fd06:	f8be                	sd	a5,112(sp)
    8002fd08:	fcc2                	sd	a6,120(sp)
    8002fd0a:	e146                	sd	a7,128(sp)
    8002fd0c:	e54a                	sd	s2,136(sp)
    8002fd0e:	e94e                	sd	s3,144(sp)
    8002fd10:	ed52                	sd	s4,152(sp)
    8002fd12:	f156                	sd	s5,160(sp)
    8002fd14:	f55a                	sd	s6,168(sp)
    8002fd16:	f95e                	sd	s7,176(sp)
    8002fd18:	fd62                	sd	s8,184(sp)
    8002fd1a:	e1e6                	sd	s9,192(sp)
    8002fd1c:	e5ea                	sd	s10,200(sp)
    8002fd1e:	e9ee                	sd	s11,208(sp)
    8002fd20:	edf2                	sd	t3,216(sp)
    8002fd22:	f1f6                	sd	t4,224(sp)
    8002fd24:	f5fa                	sd	t5,232(sp)
    8002fd26:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_7
    8002fd28:	f16fa0ef          	jal	8002a43e <hs_test_entry_two_7>
    j _return
    8002fd2c:	a615                	j	80030050 <_return>

000000008002fd2e <hshandler_8>:
    
hshandler_8:
    SAVE_CONTEXT
    8002fd2e:	f0810113          	addi	sp,sp,-248
    8002fd32:	e006                	sd	ra,0(sp)
    8002fd34:	e80e                	sd	gp,16(sp)
    8002fd36:	ec12                	sd	tp,24(sp)
    8002fd38:	f016                	sd	t0,32(sp)
    8002fd3a:	f41a                	sd	t1,40(sp)
    8002fd3c:	f81e                	sd	t2,48(sp)
    8002fd3e:	fc22                	sd	s0,56(sp)
    8002fd40:	e0a6                	sd	s1,64(sp)
    8002fd42:	e4aa                	sd	a0,72(sp)
    8002fd44:	e8ae                	sd	a1,80(sp)
    8002fd46:	ecb2                	sd	a2,88(sp)
    8002fd48:	f0b6                	sd	a3,96(sp)
    8002fd4a:	f4ba                	sd	a4,104(sp)
    8002fd4c:	f8be                	sd	a5,112(sp)
    8002fd4e:	fcc2                	sd	a6,120(sp)
    8002fd50:	e146                	sd	a7,128(sp)
    8002fd52:	e54a                	sd	s2,136(sp)
    8002fd54:	e94e                	sd	s3,144(sp)
    8002fd56:	ed52                	sd	s4,152(sp)
    8002fd58:	f156                	sd	s5,160(sp)
    8002fd5a:	f55a                	sd	s6,168(sp)
    8002fd5c:	f95e                	sd	s7,176(sp)
    8002fd5e:	fd62                	sd	s8,184(sp)
    8002fd60:	e1e6                	sd	s9,192(sp)
    8002fd62:	e5ea                	sd	s10,200(sp)
    8002fd64:	e9ee                	sd	s11,208(sp)
    8002fd66:	edf2                	sd	t3,216(sp)
    8002fd68:	f1f6                	sd	t4,224(sp)
    8002fd6a:	f5fa                	sd	t5,232(sp)
    8002fd6c:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_8
    8002fd6e:	f50fa0ef          	jal	8002a4be <hs_test_entry_two_8>
    j _return
    8002fd72:	acf9                	j	80030050 <_return>

000000008002fd74 <vs_test_entry>:

.balign 0x4
.global vs_test_entry
vs_test_entry:
    .balign 4
    j vshandler_0
    8002fd74:	a809                	j	8002fd86 <vshandler_0>
    j vshandler_1
    8002fd76:	a899                	j	8002fdcc <vshandler_1>
    j vshandler_2
    8002fd78:	a869                	j	8002fe12 <vshandler_2>
    j vshandler_3
    8002fd7a:	a8f9                	j	8002fe58 <vshandler_3>
    j vshandler_4
    8002fd7c:	a20d                	j	8002fe9e <vshandler_4>
    j vshandler_5
    8002fd7e:	a29d                	j	8002fee4 <vshandler_5>
    j vshandler_6
    8002fd80:	a26d                	j	8002ff2a <vshandler_6>
    j vshandler_7
    8002fd82:	a2fd                	j	8002ff70 <vshandler_7>
    j vshandler_8
    8002fd84:	ac0d                	j	8002ffb6 <vshandler_8>

000000008002fd86 <vshandler_0>:

vshandler_0:
    SAVE_CONTEXT
    8002fd86:	f0810113          	addi	sp,sp,-248
    8002fd8a:	e006                	sd	ra,0(sp)
    8002fd8c:	e80e                	sd	gp,16(sp)
    8002fd8e:	ec12                	sd	tp,24(sp)
    8002fd90:	f016                	sd	t0,32(sp)
    8002fd92:	f41a                	sd	t1,40(sp)
    8002fd94:	f81e                	sd	t2,48(sp)
    8002fd96:	fc22                	sd	s0,56(sp)
    8002fd98:	e0a6                	sd	s1,64(sp)
    8002fd9a:	e4aa                	sd	a0,72(sp)
    8002fd9c:	e8ae                	sd	a1,80(sp)
    8002fd9e:	ecb2                	sd	a2,88(sp)
    8002fda0:	f0b6                	sd	a3,96(sp)
    8002fda2:	f4ba                	sd	a4,104(sp)
    8002fda4:	f8be                	sd	a5,112(sp)
    8002fda6:	fcc2                	sd	a6,120(sp)
    8002fda8:	e146                	sd	a7,128(sp)
    8002fdaa:	e54a                	sd	s2,136(sp)
    8002fdac:	e94e                	sd	s3,144(sp)
    8002fdae:	ed52                	sd	s4,152(sp)
    8002fdb0:	f156                	sd	s5,160(sp)
    8002fdb2:	f55a                	sd	s6,168(sp)
    8002fdb4:	f95e                	sd	s7,176(sp)
    8002fdb6:	fd62                	sd	s8,184(sp)
    8002fdb8:	e1e6                	sd	s9,192(sp)
    8002fdba:	e5ea                	sd	s10,200(sp)
    8002fdbc:	e9ee                	sd	s11,208(sp)
    8002fdbe:	edf2                	sd	t3,216(sp)
    8002fdc0:	f1f6                	sd	t4,224(sp)
    8002fdc2:	f5fa                	sd	t5,232(sp)
    8002fdc4:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_0
    8002fdc6:	dddfa0ef          	jal	8002aba2 <vs_test_entry_two_0>
    j _return
    8002fdca:	a459                	j	80030050 <_return>

000000008002fdcc <vshandler_1>:

vshandler_1:
    SAVE_CONTEXT
    8002fdcc:	f0810113          	addi	sp,sp,-248
    8002fdd0:	e006                	sd	ra,0(sp)
    8002fdd2:	e80e                	sd	gp,16(sp)
    8002fdd4:	ec12                	sd	tp,24(sp)
    8002fdd6:	f016                	sd	t0,32(sp)
    8002fdd8:	f41a                	sd	t1,40(sp)
    8002fdda:	f81e                	sd	t2,48(sp)
    8002fddc:	fc22                	sd	s0,56(sp)
    8002fdde:	e0a6                	sd	s1,64(sp)
    8002fde0:	e4aa                	sd	a0,72(sp)
    8002fde2:	e8ae                	sd	a1,80(sp)
    8002fde4:	ecb2                	sd	a2,88(sp)
    8002fde6:	f0b6                	sd	a3,96(sp)
    8002fde8:	f4ba                	sd	a4,104(sp)
    8002fdea:	f8be                	sd	a5,112(sp)
    8002fdec:	fcc2                	sd	a6,120(sp)
    8002fdee:	e146                	sd	a7,128(sp)
    8002fdf0:	e54a                	sd	s2,136(sp)
    8002fdf2:	e94e                	sd	s3,144(sp)
    8002fdf4:	ed52                	sd	s4,152(sp)
    8002fdf6:	f156                	sd	s5,160(sp)
    8002fdf8:	f55a                	sd	s6,168(sp)
    8002fdfa:	f95e                	sd	s7,176(sp)
    8002fdfc:	fd62                	sd	s8,184(sp)
    8002fdfe:	e1e6                	sd	s9,192(sp)
    8002fe00:	e5ea                	sd	s10,200(sp)
    8002fe02:	e9ee                	sd	s11,208(sp)
    8002fe04:	edf2                	sd	t3,216(sp)
    8002fe06:	f1f6                	sd	t4,224(sp)
    8002fe08:	f5fa                	sd	t5,232(sp)
    8002fe0a:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_1
    8002fe0c:	f32fa0ef          	jal	8002a53e <vs_test_entry_two_1>
    j _return
    8002fe10:	a481                	j	80030050 <_return>

000000008002fe12 <vshandler_2>:

vshandler_2:
    SAVE_CONTEXT
    8002fe12:	f0810113          	addi	sp,sp,-248
    8002fe16:	e006                	sd	ra,0(sp)
    8002fe18:	e80e                	sd	gp,16(sp)
    8002fe1a:	ec12                	sd	tp,24(sp)
    8002fe1c:	f016                	sd	t0,32(sp)
    8002fe1e:	f41a                	sd	t1,40(sp)
    8002fe20:	f81e                	sd	t2,48(sp)
    8002fe22:	fc22                	sd	s0,56(sp)
    8002fe24:	e0a6                	sd	s1,64(sp)
    8002fe26:	e4aa                	sd	a0,72(sp)
    8002fe28:	e8ae                	sd	a1,80(sp)
    8002fe2a:	ecb2                	sd	a2,88(sp)
    8002fe2c:	f0b6                	sd	a3,96(sp)
    8002fe2e:	f4ba                	sd	a4,104(sp)
    8002fe30:	f8be                	sd	a5,112(sp)
    8002fe32:	fcc2                	sd	a6,120(sp)
    8002fe34:	e146                	sd	a7,128(sp)
    8002fe36:	e54a                	sd	s2,136(sp)
    8002fe38:	e94e                	sd	s3,144(sp)
    8002fe3a:	ed52                	sd	s4,152(sp)
    8002fe3c:	f156                	sd	s5,160(sp)
    8002fe3e:	f55a                	sd	s6,168(sp)
    8002fe40:	f95e                	sd	s7,176(sp)
    8002fe42:	fd62                	sd	s8,184(sp)
    8002fe44:	e1e6                	sd	s9,192(sp)
    8002fe46:	e5ea                	sd	s10,200(sp)
    8002fe48:	e9ee                	sd	s11,208(sp)
    8002fe4a:	edf2                	sd	t3,216(sp)
    8002fe4c:	f1f6                	sd	t4,224(sp)
    8002fe4e:	f5fa                	sd	t5,232(sp)
    8002fe50:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_2
    8002fe52:	f6afa0ef          	jal	8002a5bc <vs_test_entry_two_2>
    j _return
    8002fe56:	aaed                	j	80030050 <_return>

000000008002fe58 <vshandler_3>:

vshandler_3:
    SAVE_CONTEXT
    8002fe58:	f0810113          	addi	sp,sp,-248
    8002fe5c:	e006                	sd	ra,0(sp)
    8002fe5e:	e80e                	sd	gp,16(sp)
    8002fe60:	ec12                	sd	tp,24(sp)
    8002fe62:	f016                	sd	t0,32(sp)
    8002fe64:	f41a                	sd	t1,40(sp)
    8002fe66:	f81e                	sd	t2,48(sp)
    8002fe68:	fc22                	sd	s0,56(sp)
    8002fe6a:	e0a6                	sd	s1,64(sp)
    8002fe6c:	e4aa                	sd	a0,72(sp)
    8002fe6e:	e8ae                	sd	a1,80(sp)
    8002fe70:	ecb2                	sd	a2,88(sp)
    8002fe72:	f0b6                	sd	a3,96(sp)
    8002fe74:	f4ba                	sd	a4,104(sp)
    8002fe76:	f8be                	sd	a5,112(sp)
    8002fe78:	fcc2                	sd	a6,120(sp)
    8002fe7a:	e146                	sd	a7,128(sp)
    8002fe7c:	e54a                	sd	s2,136(sp)
    8002fe7e:	e94e                	sd	s3,144(sp)
    8002fe80:	ed52                	sd	s4,152(sp)
    8002fe82:	f156                	sd	s5,160(sp)
    8002fe84:	f55a                	sd	s6,168(sp)
    8002fe86:	f95e                	sd	s7,176(sp)
    8002fe88:	fd62                	sd	s8,184(sp)
    8002fe8a:	e1e6                	sd	s9,192(sp)
    8002fe8c:	e5ea                	sd	s10,200(sp)
    8002fe8e:	e9ee                	sd	s11,208(sp)
    8002fe90:	edf2                	sd	t3,216(sp)
    8002fe92:	f1f6                	sd	t4,224(sp)
    8002fe94:	f5fa                	sd	t5,232(sp)
    8002fe96:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_3
    8002fe98:	fa2fa0ef          	jal	8002a63a <vs_test_entry_two_3>
    j _return
    8002fe9c:	aa55                	j	80030050 <_return>

000000008002fe9e <vshandler_4>:

vshandler_4:
    SAVE_CONTEXT
    8002fe9e:	f0810113          	addi	sp,sp,-248
    8002fea2:	e006                	sd	ra,0(sp)
    8002fea4:	e80e                	sd	gp,16(sp)
    8002fea6:	ec12                	sd	tp,24(sp)
    8002fea8:	f016                	sd	t0,32(sp)
    8002feaa:	f41a                	sd	t1,40(sp)
    8002feac:	f81e                	sd	t2,48(sp)
    8002feae:	fc22                	sd	s0,56(sp)
    8002feb0:	e0a6                	sd	s1,64(sp)
    8002feb2:	e4aa                	sd	a0,72(sp)
    8002feb4:	e8ae                	sd	a1,80(sp)
    8002feb6:	ecb2                	sd	a2,88(sp)
    8002feb8:	f0b6                	sd	a3,96(sp)
    8002feba:	f4ba                	sd	a4,104(sp)
    8002febc:	f8be                	sd	a5,112(sp)
    8002febe:	fcc2                	sd	a6,120(sp)
    8002fec0:	e146                	sd	a7,128(sp)
    8002fec2:	e54a                	sd	s2,136(sp)
    8002fec4:	e94e                	sd	s3,144(sp)
    8002fec6:	ed52                	sd	s4,152(sp)
    8002fec8:	f156                	sd	s5,160(sp)
    8002feca:	f55a                	sd	s6,168(sp)
    8002fecc:	f95e                	sd	s7,176(sp)
    8002fece:	fd62                	sd	s8,184(sp)
    8002fed0:	e1e6                	sd	s9,192(sp)
    8002fed2:	e5ea                	sd	s10,200(sp)
    8002fed4:	e9ee                	sd	s11,208(sp)
    8002fed6:	edf2                	sd	t3,216(sp)
    8002fed8:	f1f6                	sd	t4,224(sp)
    8002feda:	f5fa                	sd	t5,232(sp)
    8002fedc:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_4
    8002fede:	fdcfa0ef          	jal	8002a6ba <vs_test_entry_two_4>
    j _return
    8002fee2:	a2bd                	j	80030050 <_return>

000000008002fee4 <vshandler_5>:

vshandler_5:
    SAVE_CONTEXT
    8002fee4:	f0810113          	addi	sp,sp,-248
    8002fee8:	e006                	sd	ra,0(sp)
    8002feea:	e80e                	sd	gp,16(sp)
    8002feec:	ec12                	sd	tp,24(sp)
    8002feee:	f016                	sd	t0,32(sp)
    8002fef0:	f41a                	sd	t1,40(sp)
    8002fef2:	f81e                	sd	t2,48(sp)
    8002fef4:	fc22                	sd	s0,56(sp)
    8002fef6:	e0a6                	sd	s1,64(sp)
    8002fef8:	e4aa                	sd	a0,72(sp)
    8002fefa:	e8ae                	sd	a1,80(sp)
    8002fefc:	ecb2                	sd	a2,88(sp)
    8002fefe:	f0b6                	sd	a3,96(sp)
    8002ff00:	f4ba                	sd	a4,104(sp)
    8002ff02:	f8be                	sd	a5,112(sp)
    8002ff04:	fcc2                	sd	a6,120(sp)
    8002ff06:	e146                	sd	a7,128(sp)
    8002ff08:	e54a                	sd	s2,136(sp)
    8002ff0a:	e94e                	sd	s3,144(sp)
    8002ff0c:	ed52                	sd	s4,152(sp)
    8002ff0e:	f156                	sd	s5,160(sp)
    8002ff10:	f55a                	sd	s6,168(sp)
    8002ff12:	f95e                	sd	s7,176(sp)
    8002ff14:	fd62                	sd	s8,184(sp)
    8002ff16:	e1e6                	sd	s9,192(sp)
    8002ff18:	e5ea                	sd	s10,200(sp)
    8002ff1a:	e9ee                	sd	s11,208(sp)
    8002ff1c:	edf2                	sd	t3,216(sp)
    8002ff1e:	f1f6                	sd	t4,224(sp)
    8002ff20:	f5fa                	sd	t5,232(sp)
    8002ff22:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_5
    8002ff24:	817fa0ef          	jal	8002a73a <vs_test_entry_two_5>
    j _return
    8002ff28:	a225                	j	80030050 <_return>

000000008002ff2a <vshandler_6>:

vshandler_6:
    SAVE_CONTEXT
    8002ff2a:	f0810113          	addi	sp,sp,-248
    8002ff2e:	e006                	sd	ra,0(sp)
    8002ff30:	e80e                	sd	gp,16(sp)
    8002ff32:	ec12                	sd	tp,24(sp)
    8002ff34:	f016                	sd	t0,32(sp)
    8002ff36:	f41a                	sd	t1,40(sp)
    8002ff38:	f81e                	sd	t2,48(sp)
    8002ff3a:	fc22                	sd	s0,56(sp)
    8002ff3c:	e0a6                	sd	s1,64(sp)
    8002ff3e:	e4aa                	sd	a0,72(sp)
    8002ff40:	e8ae                	sd	a1,80(sp)
    8002ff42:	ecb2                	sd	a2,88(sp)
    8002ff44:	f0b6                	sd	a3,96(sp)
    8002ff46:	f4ba                	sd	a4,104(sp)
    8002ff48:	f8be                	sd	a5,112(sp)
    8002ff4a:	fcc2                	sd	a6,120(sp)
    8002ff4c:	e146                	sd	a7,128(sp)
    8002ff4e:	e54a                	sd	s2,136(sp)
    8002ff50:	e94e                	sd	s3,144(sp)
    8002ff52:	ed52                	sd	s4,152(sp)
    8002ff54:	f156                	sd	s5,160(sp)
    8002ff56:	f55a                	sd	s6,168(sp)
    8002ff58:	f95e                	sd	s7,176(sp)
    8002ff5a:	fd62                	sd	s8,184(sp)
    8002ff5c:	e1e6                	sd	s9,192(sp)
    8002ff5e:	e5ea                	sd	s10,200(sp)
    8002ff60:	e9ee                	sd	s11,208(sp)
    8002ff62:	edf2                	sd	t3,216(sp)
    8002ff64:	f1f6                	sd	t4,224(sp)
    8002ff66:	f5fa                	sd	t5,232(sp)
    8002ff68:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_6
    8002ff6a:	851fa0ef          	jal	8002a7ba <vs_test_entry_two_6>
    j _return
    8002ff6e:	a0cd                	j	80030050 <_return>

000000008002ff70 <vshandler_7>:

vshandler_7:
    SAVE_CONTEXT
    8002ff70:	f0810113          	addi	sp,sp,-248
    8002ff74:	e006                	sd	ra,0(sp)
    8002ff76:	e80e                	sd	gp,16(sp)
    8002ff78:	ec12                	sd	tp,24(sp)
    8002ff7a:	f016                	sd	t0,32(sp)
    8002ff7c:	f41a                	sd	t1,40(sp)
    8002ff7e:	f81e                	sd	t2,48(sp)
    8002ff80:	fc22                	sd	s0,56(sp)
    8002ff82:	e0a6                	sd	s1,64(sp)
    8002ff84:	e4aa                	sd	a0,72(sp)
    8002ff86:	e8ae                	sd	a1,80(sp)
    8002ff88:	ecb2                	sd	a2,88(sp)
    8002ff8a:	f0b6                	sd	a3,96(sp)
    8002ff8c:	f4ba                	sd	a4,104(sp)
    8002ff8e:	f8be                	sd	a5,112(sp)
    8002ff90:	fcc2                	sd	a6,120(sp)
    8002ff92:	e146                	sd	a7,128(sp)
    8002ff94:	e54a                	sd	s2,136(sp)
    8002ff96:	e94e                	sd	s3,144(sp)
    8002ff98:	ed52                	sd	s4,152(sp)
    8002ff9a:	f156                	sd	s5,160(sp)
    8002ff9c:	f55a                	sd	s6,168(sp)
    8002ff9e:	f95e                	sd	s7,176(sp)
    8002ffa0:	fd62                	sd	s8,184(sp)
    8002ffa2:	e1e6                	sd	s9,192(sp)
    8002ffa4:	e5ea                	sd	s10,200(sp)
    8002ffa6:	e9ee                	sd	s11,208(sp)
    8002ffa8:	edf2                	sd	t3,216(sp)
    8002ffaa:	f1f6                	sd	t4,224(sp)
    8002ffac:	f5fa                	sd	t5,232(sp)
    8002ffae:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_7
    8002ffb0:	88bfa0ef          	jal	8002a83a <vs_test_entry_two_7>
    j _return
    8002ffb4:	a871                	j	80030050 <_return>

000000008002ffb6 <vshandler_8>:
    
vshandler_8:
    SAVE_CONTEXT
    8002ffb6:	f0810113          	addi	sp,sp,-248
    8002ffba:	e006                	sd	ra,0(sp)
    8002ffbc:	e80e                	sd	gp,16(sp)
    8002ffbe:	ec12                	sd	tp,24(sp)
    8002ffc0:	f016                	sd	t0,32(sp)
    8002ffc2:	f41a                	sd	t1,40(sp)
    8002ffc4:	f81e                	sd	t2,48(sp)
    8002ffc6:	fc22                	sd	s0,56(sp)
    8002ffc8:	e0a6                	sd	s1,64(sp)
    8002ffca:	e4aa                	sd	a0,72(sp)
    8002ffcc:	e8ae                	sd	a1,80(sp)
    8002ffce:	ecb2                	sd	a2,88(sp)
    8002ffd0:	f0b6                	sd	a3,96(sp)
    8002ffd2:	f4ba                	sd	a4,104(sp)
    8002ffd4:	f8be                	sd	a5,112(sp)
    8002ffd6:	fcc2                	sd	a6,120(sp)
    8002ffd8:	e146                	sd	a7,128(sp)
    8002ffda:	e54a                	sd	s2,136(sp)
    8002ffdc:	e94e                	sd	s3,144(sp)
    8002ffde:	ed52                	sd	s4,152(sp)
    8002ffe0:	f156                	sd	s5,160(sp)
    8002ffe2:	f55a                	sd	s6,168(sp)
    8002ffe4:	f95e                	sd	s7,176(sp)
    8002ffe6:	fd62                	sd	s8,184(sp)
    8002ffe8:	e1e6                	sd	s9,192(sp)
    8002ffea:	e5ea                	sd	s10,200(sp)
    8002ffec:	e9ee                	sd	s11,208(sp)
    8002ffee:	edf2                	sd	t3,216(sp)
    8002fff0:	f1f6                	sd	t4,224(sp)
    8002fff2:	f5fa                	sd	t5,232(sp)
    8002fff4:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_8
    8002fff6:	8c5fa0ef          	jal	8002a8ba <vs_test_entry_two_8>
    j _return
    8002fffa:	a899                	j	80030050 <_return>

000000008002fffc <_mnreturn>:
    

_mnreturn:
    csrr    t1, 0x744
    8002fffc:	74402373          	csrr	t1,0x744
    srli    t1, t1, 3
    80030000:	00335313          	srli	t1,t1,0x3
    andi    t1, t1, 1       //读出mnstatus的第三位
    80030004:	00137313          	andi	t1,t1,1
    bnez    t1, _first_return
    80030008:	04031563          	bnez	t1,80030052 <_first_return>
    RESTORE_CONTEXT
    8003000c:	6082                	ld	ra,0(sp)
    8003000e:	61c2                	ld	gp,16(sp)
    80030010:	6262                	ld	tp,24(sp)
    80030012:	7282                	ld	t0,32(sp)
    80030014:	7322                	ld	t1,40(sp)
    80030016:	73c2                	ld	t2,48(sp)
    80030018:	7462                	ld	s0,56(sp)
    8003001a:	6486                	ld	s1,64(sp)
    8003001c:	6526                	ld	a0,72(sp)
    8003001e:	65c6                	ld	a1,80(sp)
    80030020:	6666                	ld	a2,88(sp)
    80030022:	7686                	ld	a3,96(sp)
    80030024:	7726                	ld	a4,104(sp)
    80030026:	77c6                	ld	a5,112(sp)
    80030028:	7866                	ld	a6,120(sp)
    8003002a:	688a                	ld	a7,128(sp)
    8003002c:	692a                	ld	s2,136(sp)
    8003002e:	69ca                	ld	s3,144(sp)
    80030030:	6a6a                	ld	s4,152(sp)
    80030032:	7a8a                	ld	s5,160(sp)
    80030034:	7b2a                	ld	s6,168(sp)
    80030036:	7bca                	ld	s7,176(sp)
    80030038:	7c6a                	ld	s8,184(sp)
    8003003a:	6c8e                	ld	s9,192(sp)
    8003003c:	6d2e                	ld	s10,200(sp)
    8003003e:	6dce                	ld	s11,208(sp)
    80030040:	6e6e                	ld	t3,216(sp)
    80030042:	7e8e                	ld	t4,224(sp)
    80030044:	7f2e                	ld	t5,232(sp)
    80030046:	7fce                	ld	t6,240(sp)
    80030048:	0f810113          	addi	sp,sp,248
    8003004c:	70200073          	.word	0x70200073

0000000080030050 <_return>:
    .word   0x70200073      //mnret

_return:    //目前代理到hs和vs还没写好代码支持doubletrap的mnret返回
    j _first_return     
    80030050:	a009                	j	80030052 <_first_return>

0000000080030052 <_first_return>:


_first_return:
    li t0, 4 //make sure PRIV_M is 4
    80030052:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    80030054:	04550563          	beq	a0,t0,8003009e <_return_from_m>

0000000080030058 <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    80030058:	6082                	ld	ra,0(sp)
    8003005a:	61c2                	ld	gp,16(sp)
    8003005c:	6262                	ld	tp,24(sp)
    8003005e:	7282                	ld	t0,32(sp)
    80030060:	7322                	ld	t1,40(sp)
    80030062:	73c2                	ld	t2,48(sp)
    80030064:	7462                	ld	s0,56(sp)
    80030066:	6486                	ld	s1,64(sp)
    80030068:	6526                	ld	a0,72(sp)
    8003006a:	65c6                	ld	a1,80(sp)
    8003006c:	6666                	ld	a2,88(sp)
    8003006e:	7686                	ld	a3,96(sp)
    80030070:	7726                	ld	a4,104(sp)
    80030072:	77c6                	ld	a5,112(sp)
    80030074:	7866                	ld	a6,120(sp)
    80030076:	688a                	ld	a7,128(sp)
    80030078:	692a                	ld	s2,136(sp)
    8003007a:	69ca                	ld	s3,144(sp)
    8003007c:	6a6a                	ld	s4,152(sp)
    8003007e:	7a8a                	ld	s5,160(sp)
    80030080:	7b2a                	ld	s6,168(sp)
    80030082:	7bca                	ld	s7,176(sp)
    80030084:	7c6a                	ld	s8,184(sp)
    80030086:	6c8e                	ld	s9,192(sp)
    80030088:	6d2e                	ld	s10,200(sp)
    8003008a:	6dce                	ld	s11,208(sp)
    8003008c:	6e6e                	ld	t3,216(sp)
    8003008e:	7e8e                	ld	t4,224(sp)
    80030090:	7f2e                	ld	t5,232(sp)
    80030092:	7fce                	ld	t6,240(sp)
    80030094:	0f810113          	addi	sp,sp,248
    sret
    80030098:	10200073          	sret
    j   .
    8003009c:	a001                	j	8003009c <_return_from_s+0x44>

000000008003009e <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    8003009e:	6082                	ld	ra,0(sp)
    800300a0:	61c2                	ld	gp,16(sp)
    800300a2:	6262                	ld	tp,24(sp)
    800300a4:	7282                	ld	t0,32(sp)
    800300a6:	7322                	ld	t1,40(sp)
    800300a8:	73c2                	ld	t2,48(sp)
    800300aa:	7462                	ld	s0,56(sp)
    800300ac:	6486                	ld	s1,64(sp)
    800300ae:	6526                	ld	a0,72(sp)
    800300b0:	65c6                	ld	a1,80(sp)
    800300b2:	6666                	ld	a2,88(sp)
    800300b4:	7686                	ld	a3,96(sp)
    800300b6:	7726                	ld	a4,104(sp)
    800300b8:	77c6                	ld	a5,112(sp)
    800300ba:	7866                	ld	a6,120(sp)
    800300bc:	688a                	ld	a7,128(sp)
    800300be:	692a                	ld	s2,136(sp)
    800300c0:	69ca                	ld	s3,144(sp)
    800300c2:	6a6a                	ld	s4,152(sp)
    800300c4:	7a8a                	ld	s5,160(sp)
    800300c6:	7b2a                	ld	s6,168(sp)
    800300c8:	7bca                	ld	s7,176(sp)
    800300ca:	7c6a                	ld	s8,184(sp)
    800300cc:	6c8e                	ld	s9,192(sp)
    800300ce:	6d2e                	ld	s10,200(sp)
    800300d0:	6dce                	ld	s11,208(sp)
    800300d2:	6e6e                	ld	t3,216(sp)
    800300d4:	7e8e                	ld	t4,224(sp)
    800300d6:	7f2e                	ld	t5,232(sp)
    800300d8:	7fce                	ld	t6,240(sp)
    800300da:	0f810113          	addi	sp,sp,248
    mret
    800300de:	30200073          	mret
	...

Disassembly of section .text.startup:

00000000800300e4 <main>:


void main(){
    800300e4:	1101                	addi	sp,sp,-32

    INFO("risc-v hypervisor extension tests");
    800300e6:	00002517          	auipc	a0,0x2
    800300ea:	6ca50513          	addi	a0,a0,1738 # 800327b0 <__func__.0+0x3c8>
void main(){
    800300ee:	ec06                	sd	ra,24(sp)
    800300f0:	e822                	sd	s0,16(sp)
    800300f2:	e426                	sd	s1,8(sp)
    800300f4:	e04a                	sd	s2,0(sp)
    INFO("risc-v hypervisor extension tests");
    800300f6:	bceff0ef          	jal	8002f4c4 <printf>
    800300fa:	4529                	li	a0,10
    800300fc:	8b6fe0ef          	jal	8002e1b2 <putchar>
    // printf("%f\n",CSRR(CSR_SSCRATCH));
    if(check_misa_h()){
    80030100:	c0cd00ef          	jal	8000050c <check_misa_h>
    80030104:	c539                	beqz	a0,80030152 <main+0x6e>
        reset_state();
    80030106:	e70d10ef          	jal	80001776 <reset_state>
        for(int i = 0; i < test_table_size; i++){
    8003010a:	00011497          	auipc	s1,0x11
    8003010e:	f4e48493          	addi	s1,s1,-178 # 80041058 <test_table_size>
    80030112:	609c                	ld	a5,0(s1)
    80030114:	4401                	li	s0,0
    80030116:	00011917          	auipc	s2,0x11
    8003011a:	f4a90913          	addi	s2,s2,-182 # 80041060 <test_table>
    8003011e:	cf91                	beqz	a5,8003013a <main+0x56>
            reset_state();
    80030120:	e56d10ef          	jal	80001776 <reset_state>
            test_table[i]();
    80030124:	00093783          	ld	a5,0(s2)
    80030128:	00341713          	slli	a4,s0,0x3
        for(int i = 0; i < test_table_size; i++){
    8003012c:	0405                	addi	s0,s0,1
            test_table[i]();
    8003012e:	97ba                	add	a5,a5,a4
    80030130:	639c                	ld	a5,0(a5)
    80030132:	9782                	jalr	a5
        for(int i = 0; i < test_table_size; i++){
    80030134:	609c                	ld	a5,0(s1)
    80030136:	fef465e3          	bltu	s0,a5,80030120 <main+0x3c>
            
    }else{
        printf("hypervisor extension is not supported!\n");
    }

    INFO("end");
    8003013a:	00002517          	auipc	a0,0x2
    8003013e:	6c650513          	addi	a0,a0,1734 # 80032800 <__func__.0+0x418>
    80030142:	b82ff0ef          	jal	8002f4c4 <printf>
    80030146:	4529                	li	a0,10
    80030148:	86afe0ef          	jal	8002e1b2 <putchar>
    exit(0);
    8003014c:	4501                	li	a0,0
    8003014e:	f2dfe0ef          	jal	8002f07a <exit>
        printf("hypervisor extension is not supported!\n");
    80030152:	00002517          	auipc	a0,0x2
    80030156:	68650513          	addi	a0,a0,1670 # 800327d8 <__func__.0+0x3f0>
    8003015a:	fa7fe0ef          	jal	8002f100 <puts>
    8003015e:	bff1                	j	8003013a <main+0x56>
{
    80030160:	1141                	addi	sp,sp,-16
  printstr("Implement main(), foo!\n");
    80030162:	0000f517          	auipc	a0,0xf
    80030166:	ea650513          	addi	a0,a0,-346 # 8003f008 <__func__.0+0xcc20>
{
    8003016a:	e406                	sd	ra,8(sp)
  printstr("Implement main(), foo!\n");
    8003016c:	f25fe0ef          	jal	8002f090 <printstr>
}
    80030170:	60a2                	ld	ra,8(sp)
    80030172:	557d                	li	a0,-1
    80030174:	0141                	addi	sp,sp,16
    80030176:	8082                	ret
