
build/spike/rvh_test.elf:     file format elf64-littleriscv


Disassembly of section .boot:

0000000080000000 <_boot>:

.section .boot, "ax" 
.globl _boot
_boot:
    bnez a0, .
    80000000:	e101                	bnez	a0,80000000 <_boot>
    csrwi    sscratch, 0xf
    80000002:	1407d073          	csrwi	sscratch,15
    /* Initialize stack pointer */
    la sp, __stack_top
    80000006:	002ff117          	auipc	sp,0x2ff
    8000000a:	ffa10113          	addi	sp,sp,-6 # 802ff000 <__stack_top>

    /* Clear bss */ 
    la a0, __bss_start
    8000000e:	0003f517          	auipc	a0,0x3f
    80000012:	ff250513          	addi	a0,a0,-14 # 8003f000 <__bss_start>
    la a1, __bss_end
    80000016:	00058597          	auipc	a1,0x58
    8000001a:	0c258593          	addi	a1,a1,194 # 800580d8 <__bss_end>
    bgeu a0, a1, 2f
    8000001e:	00b57763          	bgeu	a0,a1,8000002c <_boot+0x2c>
1:
    sw zero, (a0)
    80000022:	00052023          	sw	zero,0(a0)
    addi a0, a0, 4
    80000026:	0511                	addi	a0,a0,4
    bltu a0, a1, 1b
    80000028:	feb56de3          	bltu	a0,a1,80000022 <_boot+0x22>
2:
    call _init
    8000002c:	2942d0ef          	jal	8002d2c0 <_init>
    call main
    80000030:	4792d0ef          	jal	8002dca8 <main>
    li a0, 0
    80000034:	4501                	li	a0,0
    call exit
    80000036:	40d2c0ef          	jal	8002cc42 <exit>
    j .
    8000003a:	a001                	j	8000003a <_boot+0x3a>

Disassembly of section .text:

000000008000003c <check_csr_field_spec>:
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <rvh_test.h>

bool check_csr_field_spec(){
    8000003c:	7179                	addi	sp,sp,-48

    TEST_START();
    8000003e:	0002e597          	auipc	a1,0x2e
    80000042:	d0258593          	addi	a1,a1,-766 # 8002dd40 <__func__.1>
    80000046:	00030517          	auipc	a0,0x30
    8000004a:	f9250513          	addi	a0,a0,-110 # 8002ffd8 <__func__.0+0x2e8>
bool check_csr_field_spec(){
    8000004e:	f406                	sd	ra,40(sp)
    80000050:	f022                	sd	s0,32(sp)
    80000052:	ec26                	sd	s1,24(sp)
    80000054:	e84a                	sd	s2,16(sp)
    80000056:	e44e                	sd	s3,8(sp)
    80000058:	e052                	sd	s4,0(sp)
    TEST_START();
    8000005a:	0322d0ef          	jal	8002d08c <printf>
    8000005e:	4529                	li	a0,10
    80000060:	51b2b0ef          	jal	8002bd7a <putchar>

    /* this assumes machine mode */
    //check_csr_wrrd("mstatus", mstatus, (uint64_t) -1, 0x800000ca007e79aaULL);
    //check_csr_wrrd("mideleg", mideleg, (uint64_t) -1, 0x1666);
    //check_csr_wrrd("medeleg", medeleg, (uint64_t) -1, 0xb15d);
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    80000064:	30302973          	csrr	s2,mideleg
    80000068:	30305073          	csrwi	mideleg,0
    8000006c:	30302473          	csrr	s0,mideleg
    80000070:	00030617          	auipc	a2,0x30
    80000074:	f7860613          	addi	a2,a2,-136 # 8002ffe8 <__func__.0+0x2f8>
    80000078:	08200593          	li	a1,130
    8000007c:	00030517          	auipc	a0,0x30
    80000080:	f7450513          	addi	a0,a0,-140 # 8002fff0 <__func__.0+0x300>
    80000084:	44400493          	li	s1,1092
    80000088:	0042d0ef          	jal	8002d08c <printf>
    8000008c:	46940163          	beq	s0,s1,800004ee <check_csr_field_spec+0x4b2>
    80000090:	00030597          	auipc	a1,0x30
    80000094:	f3858593          	addi	a1,a1,-200 # 8002ffc8 <__func__.0+0x2d8>
    80000098:	00030517          	auipc	a0,0x30
    8000009c:	f7050513          	addi	a0,a0,-144 # 80030008 <__func__.0+0x318>
    800000a0:	7ed2c0ef          	jal	8002d08c <printf>
    800000a4:	00030517          	auipc	a0,0x30
    800000a8:	f6c50513          	addi	a0,a0,-148 # 80030010 <__func__.0+0x320>
    800000ac:	7e12c0ef          	jal	8002d08c <printf>
    800000b0:	8622                	mv	a2,s0
    800000b2:	86a6                	mv	a3,s1
    800000b4:	4581                	li	a1,0
    800000b6:	00030517          	auipc	a0,0x30
    800000ba:	f6250513          	addi	a0,a0,-158 # 80030018 <__func__.0+0x328>
    800000be:	7cf2c0ef          	jal	8002d08c <printf>
    800000c2:	02900513          	li	a0,41
    800000c6:	4b52b0ef          	jal	8002bd7a <putchar>
    800000ca:	4529                	li	a0,10
    800000cc:	4af2b0ef          	jal	8002bd7a <putchar>
    800000d0:	4401                	li	s0,0
    800000d2:	30391073          	csrw	mideleg,s2
    //check_csr_wrrd("mip", mip, (uint64_t) -1, 0x6e6);
    //check_csr_wrrd("mie", mie, (uint64_t) -1, 0x1eee);
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    800000d6:	34a029f3          	csrr	s3,0x34a
    800000da:	54fd                	li	s1,-1
    800000dc:	34a49073          	csrw	0x34a,s1
    800000e0:	34a02973          	csrr	s2,0x34a
    800000e4:	00030617          	auipc	a2,0x30
    800000e8:	f4c60613          	addi	a2,a2,-180 # 80030030 <__func__.0+0x340>
    800000ec:	08200593          	li	a1,130
    800000f0:	00030517          	auipc	a0,0x30
    800000f4:	f0050513          	addi	a0,a0,-256 # 8002fff0 <__func__.0+0x300>
    800000f8:	7952c0ef          	jal	8002d08c <printf>
    800000fc:	30990f63          	beq	s2,s1,8000041a <check_csr_field_spec+0x3de>
    80000100:	00030597          	auipc	a1,0x30
    80000104:	ec858593          	addi	a1,a1,-312 # 8002ffc8 <__func__.0+0x2d8>
    80000108:	00030517          	auipc	a0,0x30
    8000010c:	f0050513          	addi	a0,a0,-256 # 80030008 <__func__.0+0x318>
    80000110:	77d2c0ef          	jal	8002d08c <printf>
    80000114:	00030517          	auipc	a0,0x30
    80000118:	efc50513          	addi	a0,a0,-260 # 80030010 <__func__.0+0x320>
    8000011c:	7712c0ef          	jal	8002d08c <printf>
    80000120:	86a6                	mv	a3,s1
    80000122:	864a                	mv	a2,s2
    80000124:	85a6                	mv	a1,s1
    80000126:	00030517          	auipc	a0,0x30
    8000012a:	ef250513          	addi	a0,a0,-270 # 80030018 <__func__.0+0x328>
    8000012e:	75f2c0ef          	jal	8002d08c <printf>
    80000132:	02900513          	li	a0,41
    80000136:	4452b0ef          	jal	8002bd7a <putchar>
    8000013a:	4529                	li	a0,10
    8000013c:	43f2b0ef          	jal	8002bd7a <putchar>
    80000140:	4401                	li	s0,0
    80000142:	34a99073          	csrw	0x34a,s3
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    80000146:	34b029f3          	csrr	s3,0x34b
    8000014a:	54fd                	li	s1,-1
    8000014c:	34b49073          	csrw	0x34b,s1
    80000150:	34b02973          	csrr	s2,0x34b
    80000154:	00030617          	auipc	a2,0x30
    80000158:	ee460613          	addi	a2,a2,-284 # 80030038 <__func__.0+0x348>
    8000015c:	08200593          	li	a1,130
    80000160:	00030517          	auipc	a0,0x30
    80000164:	e9050513          	addi	a0,a0,-368 # 8002fff0 <__func__.0+0x300>
    80000168:	7252c0ef          	jal	8002d08c <printf>
    8000016c:	36990363          	beq	s2,s1,800004d2 <check_csr_field_spec+0x496>
    80000170:	00030597          	auipc	a1,0x30
    80000174:	e5858593          	addi	a1,a1,-424 # 8002ffc8 <__func__.0+0x2d8>
    80000178:	00030517          	auipc	a0,0x30
    8000017c:	e9050513          	addi	a0,a0,-368 # 80030008 <__func__.0+0x318>
    80000180:	70d2c0ef          	jal	8002d08c <printf>
    80000184:	00030517          	auipc	a0,0x30
    80000188:	e8c50513          	addi	a0,a0,-372 # 80030010 <__func__.0+0x320>
    8000018c:	7012c0ef          	jal	8002d08c <printf>
    80000190:	86a6                	mv	a3,s1
    80000192:	864a                	mv	a2,s2
    80000194:	85a6                	mv	a1,s1
    80000196:	00030517          	auipc	a0,0x30
    8000019a:	e8250513          	addi	a0,a0,-382 # 80030018 <__func__.0+0x328>
    8000019e:	6ef2c0ef          	jal	8002d08c <printf>
    800001a2:	02900513          	li	a0,41
    800001a6:	3d52b0ef          	jal	8002bd7a <putchar>
    800001aa:	4529                	li	a0,10
    800001ac:	3cf2b0ef          	jal	8002bd7a <putchar>
    800001b0:	4401                	li	s0,0
    800001b2:	34b99073          	csrw	0x34b,s3
    //check_csr_wrrd("hstatus", CSR_HSTATUS, (uint64_t) -1, 0x30053f3e0);
    //check_csr_wrrd("hideleg", CSR_HIDELEG, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hedeleg", CSR_HEDELEG, (uint64_t) -1, 0xb1ff);
    //check_csr_wrrd("hvip", CSR_HVIP, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hip", CSR_HIP, (uint64_t) -1, 0x4);
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800001b6:	60402a73          	csrr	s4,hie
    800001ba:	54fd                	li	s1,-1
    800001bc:	60449073          	csrw	hie,s1
    800001c0:	60402973          	csrr	s2,hie
    800001c4:	00030617          	auipc	a2,0x30
    800001c8:	e7c60613          	addi	a2,a2,-388 # 80030040 <__func__.0+0x350>
    800001cc:	08200593          	li	a1,130
    800001d0:	00030517          	auipc	a0,0x30
    800001d4:	e2050513          	addi	a0,a0,-480 # 8002fff0 <__func__.0+0x300>
    800001d8:	44400993          	li	s3,1092
    800001dc:	6b12c0ef          	jal	8002d08c <printf>
    800001e0:	2d390b63          	beq	s2,s3,800004b6 <check_csr_field_spec+0x47a>
    800001e4:	00030597          	auipc	a1,0x30
    800001e8:	de458593          	addi	a1,a1,-540 # 8002ffc8 <__func__.0+0x2d8>
    800001ec:	00030517          	auipc	a0,0x30
    800001f0:	e1c50513          	addi	a0,a0,-484 # 80030008 <__func__.0+0x318>
    800001f4:	6992c0ef          	jal	8002d08c <printf>
    800001f8:	00030517          	auipc	a0,0x30
    800001fc:	e1850513          	addi	a0,a0,-488 # 80030010 <__func__.0+0x320>
    80000200:	68d2c0ef          	jal	8002d08c <printf>
    80000204:	86ce                	mv	a3,s3
    80000206:	864a                	mv	a2,s2
    80000208:	85a6                	mv	a1,s1
    8000020a:	00030517          	auipc	a0,0x30
    8000020e:	e0e50513          	addi	a0,a0,-498 # 80030018 <__func__.0+0x328>
    80000212:	67b2c0ef          	jal	8002d08c <printf>
    80000216:	02900513          	li	a0,41
    8000021a:	3612b0ef          	jal	8002bd7a <putchar>
    8000021e:	4529                	li	a0,10
    80000220:	35b2b0ef          	jal	8002bd7a <putchar>
    80000224:	4401                	li	s0,0
    80000226:	604a1073          	csrw	hie,s4
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000022a:	643029f3          	csrr	s3,htval
    8000022e:	54fd                	li	s1,-1
    80000230:	64349073          	csrw	htval,s1
    80000234:	64302973          	csrr	s2,htval
    80000238:	00030617          	auipc	a2,0x30
    8000023c:	e1060613          	addi	a2,a2,-496 # 80030048 <__func__.0+0x358>
    80000240:	08200593          	li	a1,130
    80000244:	00030517          	auipc	a0,0x30
    80000248:	dac50513          	addi	a0,a0,-596 # 8002fff0 <__func__.0+0x300>
    8000024c:	6412c0ef          	jal	8002d08c <printf>
    80000250:	24990563          	beq	s2,s1,8000049a <check_csr_field_spec+0x45e>
    80000254:	00030597          	auipc	a1,0x30
    80000258:	d7458593          	addi	a1,a1,-652 # 8002ffc8 <__func__.0+0x2d8>
    8000025c:	00030517          	auipc	a0,0x30
    80000260:	dac50513          	addi	a0,a0,-596 # 80030008 <__func__.0+0x318>
    80000264:	6292c0ef          	jal	8002d08c <printf>
    80000268:	00030517          	auipc	a0,0x30
    8000026c:	da850513          	addi	a0,a0,-600 # 80030010 <__func__.0+0x320>
    80000270:	61d2c0ef          	jal	8002d08c <printf>
    80000274:	86a6                	mv	a3,s1
    80000276:	864a                	mv	a2,s2
    80000278:	85a6                	mv	a1,s1
    8000027a:	00030517          	auipc	a0,0x30
    8000027e:	d9e50513          	addi	a0,a0,-610 # 80030018 <__func__.0+0x328>
    80000282:	60b2c0ef          	jal	8002d08c <printf>
    80000286:	02900513          	li	a0,41
    8000028a:	2f12b0ef          	jal	8002bd7a <putchar>
    8000028e:	4529                	li	a0,10
    80000290:	2eb2b0ef          	jal	8002bd7a <putchar>
    80000294:	4401                	li	s0,0
    80000296:	64399073          	csrw	htval,s3
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000029a:	64a029f3          	csrr	s3,htinst
    8000029e:	54fd                	li	s1,-1
    800002a0:	64a49073          	csrw	htinst,s1
    800002a4:	64a02973          	csrr	s2,htinst
    800002a8:	00030617          	auipc	a2,0x30
    800002ac:	da860613          	addi	a2,a2,-600 # 80030050 <__func__.0+0x360>
    800002b0:	08200593          	li	a1,130
    800002b4:	00030517          	auipc	a0,0x30
    800002b8:	d3c50513          	addi	a0,a0,-708 # 8002fff0 <__func__.0+0x300>
    800002bc:	5d12c0ef          	jal	8002d08c <printf>
    800002c0:	1a990f63          	beq	s2,s1,8000047e <check_csr_field_spec+0x442>
    800002c4:	00030597          	auipc	a1,0x30
    800002c8:	d0458593          	addi	a1,a1,-764 # 8002ffc8 <__func__.0+0x2d8>
    800002cc:	00030517          	auipc	a0,0x30
    800002d0:	d3c50513          	addi	a0,a0,-708 # 80030008 <__func__.0+0x318>
    800002d4:	5b92c0ef          	jal	8002d08c <printf>
    800002d8:	00030517          	auipc	a0,0x30
    800002dc:	d3850513          	addi	a0,a0,-712 # 80030010 <__func__.0+0x320>
    800002e0:	5ad2c0ef          	jal	8002d08c <printf>
    800002e4:	86a6                	mv	a3,s1
    800002e6:	864a                	mv	a2,s2
    800002e8:	85a6                	mv	a1,s1
    800002ea:	00030517          	auipc	a0,0x30
    800002ee:	d2e50513          	addi	a0,a0,-722 # 80030018 <__func__.0+0x328>
    800002f2:	59b2c0ef          	jal	8002d08c <printf>
    800002f6:	02900513          	li	a0,41
    800002fa:	2812b0ef          	jal	8002bd7a <putchar>
    800002fe:	4529                	li	a0,10
    80000300:	27b2b0ef          	jal	8002bd7a <putchar>
    80000304:	4401                	li	s0,0
    80000306:	64a99073          	csrw	htinst,s3
    //check_csr_wrrd("hgatp", CSR_HGATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);
    //check_csr_wrrd("vsstatus", CSR_VSSTATUS, (uint64_t) -1, 0x80000000000c6122ULL);
    //check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vstvec", CSR_VSTVEC, (uint64_t) -1, 0xffffffffffffff01ULL);
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    8000030a:	240029f3          	csrr	s3,vsscratch
    8000030e:	54fd                	li	s1,-1
    80000310:	24049073          	csrw	vsscratch,s1
    80000314:	24002973          	csrr	s2,vsscratch
    80000318:	00030617          	auipc	a2,0x30
    8000031c:	d4060613          	addi	a2,a2,-704 # 80030058 <__func__.0+0x368>
    80000320:	08200593          	li	a1,130
    80000324:	00030517          	auipc	a0,0x30
    80000328:	ccc50513          	addi	a0,a0,-820 # 8002fff0 <__func__.0+0x300>
    8000032c:	5612c0ef          	jal	8002d08c <printf>
    80000330:	12990963          	beq	s2,s1,80000462 <check_csr_field_spec+0x426>
    80000334:	00030597          	auipc	a1,0x30
    80000338:	c9458593          	addi	a1,a1,-876 # 8002ffc8 <__func__.0+0x2d8>
    8000033c:	00030517          	auipc	a0,0x30
    80000340:	ccc50513          	addi	a0,a0,-820 # 80030008 <__func__.0+0x318>
    80000344:	5492c0ef          	jal	8002d08c <printf>
    80000348:	00030517          	auipc	a0,0x30
    8000034c:	cc850513          	addi	a0,a0,-824 # 80030010 <__func__.0+0x320>
    80000350:	53d2c0ef          	jal	8002d08c <printf>
    80000354:	86a6                	mv	a3,s1
    80000356:	864a                	mv	a2,s2
    80000358:	85a6                	mv	a1,s1
    8000035a:	00030517          	auipc	a0,0x30
    8000035e:	cbe50513          	addi	a0,a0,-834 # 80030018 <__func__.0+0x328>
    80000362:	52b2c0ef          	jal	8002d08c <printf>
    80000366:	02900513          	li	a0,41
    8000036a:	2112b0ef          	jal	8002bd7a <putchar>
    8000036e:	4529                	li	a0,10
    80000370:	20b2b0ef          	jal	8002bd7a <putchar>
    80000374:	4401                	li	s0,0
    80000376:	24099073          	csrw	vsscratch,s3
    //check_csr_wrrd("vsepc", CSR_VSEPC, (uint64_t) -1, 0xfffffffffffffffeULL);
    //check_csr_wrrd("vscause", CSR_VSCAUSE, (uint64_t) -1, 0x800000000000001fULL);
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    8000037a:	243029f3          	csrr	s3,vstval
    8000037e:	54fd                	li	s1,-1
    80000380:	24349073          	csrw	vstval,s1
    80000384:	24302973          	csrr	s2,vstval
    80000388:	00030617          	auipc	a2,0x30
    8000038c:	ce060613          	addi	a2,a2,-800 # 80030068 <__func__.0+0x378>
    80000390:	08200593          	li	a1,130
    80000394:	00030517          	auipc	a0,0x30
    80000398:	c5c50513          	addi	a0,a0,-932 # 8002fff0 <__func__.0+0x300>
    8000039c:	4f12c0ef          	jal	8002d08c <printf>
    800003a0:	08990b63          	beq	s2,s1,80000436 <check_csr_field_spec+0x3fa>
    800003a4:	00030597          	auipc	a1,0x30
    800003a8:	c2458593          	addi	a1,a1,-988 # 8002ffc8 <__func__.0+0x2d8>
    800003ac:	00030517          	auipc	a0,0x30
    800003b0:	c5c50513          	addi	a0,a0,-932 # 80030008 <__func__.0+0x318>
    800003b4:	4d92c0ef          	jal	8002d08c <printf>
    800003b8:	00030517          	auipc	a0,0x30
    800003bc:	c5850513          	addi	a0,a0,-936 # 80030010 <__func__.0+0x320>
    800003c0:	4cd2c0ef          	jal	8002d08c <printf>
    800003c4:	86a6                	mv	a3,s1
    800003c6:	864a                	mv	a2,s2
    800003c8:	85a6                	mv	a1,s1
    800003ca:	00030517          	auipc	a0,0x30
    800003ce:	c4e50513          	addi	a0,a0,-946 # 80030018 <__func__.0+0x328>
    800003d2:	4bb2c0ef          	jal	8002d08c <printf>
    800003d6:	02900513          	li	a0,41
    800003da:	1a12b0ef          	jal	8002bd7a <putchar>
    800003de:	4529                	li	a0,10
    800003e0:	19b2b0ef          	jal	8002bd7a <putchar>
    800003e4:	24399073          	csrw	vstval,s3
    800003e8:	4401                	li	s0,0
    //check_csr_wrrd("vsatp", CSR_VSATP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsatp", CSR_VSATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);

    TEST_END();
    800003ea:	00030597          	auipc	a1,0x30
    800003ee:	bde58593          	addi	a1,a1,-1058 # 8002ffc8 <__func__.0+0x2d8>
    800003f2:	00030517          	auipc	a0,0x30
    800003f6:	c7e50513          	addi	a0,a0,-898 # 80030070 <__func__.0+0x380>
    800003fa:	4932c0ef          	jal	8002d08c <printf>
    800003fe:	4511                	li	a0,4
    80000400:	309000ef          	jal	80000f08 <goto_priv>
    80000404:	4ce010ef          	jal	800018d2 <reset_state>
}
    80000408:	70a2                	ld	ra,40(sp)
    8000040a:	8522                	mv	a0,s0
    8000040c:	7402                	ld	s0,32(sp)
    8000040e:	64e2                	ld	s1,24(sp)
    80000410:	6942                	ld	s2,16(sp)
    80000412:	69a2                	ld	s3,8(sp)
    80000414:	6a02                	ld	s4,0(sp)
    80000416:	6145                	addi	sp,sp,48
    80000418:	8082                	ret
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    8000041a:	00030597          	auipc	a1,0x30
    8000041e:	b9e58593          	addi	a1,a1,-1122 # 8002ffb8 <__func__.0+0x2c8>
    80000422:	00030517          	auipc	a0,0x30
    80000426:	be650513          	addi	a0,a0,-1050 # 80030008 <__func__.0+0x318>
    8000042a:	4632c0ef          	jal	8002d08c <printf>
    8000042e:	4529                	li	a0,10
    80000430:	14b2b0ef          	jal	8002bd7a <putchar>
    80000434:	b339                	j	80000142 <check_csr_field_spec+0x106>
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    80000436:	00030597          	auipc	a1,0x30
    8000043a:	b8258593          	addi	a1,a1,-1150 # 8002ffb8 <__func__.0+0x2c8>
    8000043e:	00030517          	auipc	a0,0x30
    80000442:	bca50513          	addi	a0,a0,-1078 # 80030008 <__func__.0+0x318>
    80000446:	4472c0ef          	jal	8002d08c <printf>
    8000044a:	4529                	li	a0,10
    8000044c:	12f2b0ef          	jal	8002bd7a <putchar>
    80000450:	d851                	beqz	s0,800003e4 <check_csr_field_spec+0x3a8>
    80000452:	24399073          	csrw	vstval,s3
    80000456:	4405                	li	s0,1
    TEST_END();
    80000458:	00030597          	auipc	a1,0x30
    8000045c:	b6058593          	addi	a1,a1,-1184 # 8002ffb8 <__func__.0+0x2c8>
    80000460:	bf49                	j	800003f2 <check_csr_field_spec+0x3b6>
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    80000462:	00030597          	auipc	a1,0x30
    80000466:	b5658593          	addi	a1,a1,-1194 # 8002ffb8 <__func__.0+0x2c8>
    8000046a:	00030517          	auipc	a0,0x30
    8000046e:	b9e50513          	addi	a0,a0,-1122 # 80030008 <__func__.0+0x318>
    80000472:	41b2c0ef          	jal	8002d08c <printf>
    80000476:	4529                	li	a0,10
    80000478:	1032b0ef          	jal	8002bd7a <putchar>
    8000047c:	bded                	j	80000376 <check_csr_field_spec+0x33a>
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000047e:	00030597          	auipc	a1,0x30
    80000482:	b3a58593          	addi	a1,a1,-1222 # 8002ffb8 <__func__.0+0x2c8>
    80000486:	00030517          	auipc	a0,0x30
    8000048a:	b8250513          	addi	a0,a0,-1150 # 80030008 <__func__.0+0x318>
    8000048e:	3ff2c0ef          	jal	8002d08c <printf>
    80000492:	4529                	li	a0,10
    80000494:	0e72b0ef          	jal	8002bd7a <putchar>
    80000498:	b5bd                	j	80000306 <check_csr_field_spec+0x2ca>
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000049a:	00030597          	auipc	a1,0x30
    8000049e:	b1e58593          	addi	a1,a1,-1250 # 8002ffb8 <__func__.0+0x2c8>
    800004a2:	00030517          	auipc	a0,0x30
    800004a6:	b6650513          	addi	a0,a0,-1178 # 80030008 <__func__.0+0x318>
    800004aa:	3e32c0ef          	jal	8002d08c <printf>
    800004ae:	4529                	li	a0,10
    800004b0:	0cb2b0ef          	jal	8002bd7a <putchar>
    800004b4:	b3cd                	j	80000296 <check_csr_field_spec+0x25a>
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800004b6:	00030597          	auipc	a1,0x30
    800004ba:	b0258593          	addi	a1,a1,-1278 # 8002ffb8 <__func__.0+0x2c8>
    800004be:	00030517          	auipc	a0,0x30
    800004c2:	b4a50513          	addi	a0,a0,-1206 # 80030008 <__func__.0+0x318>
    800004c6:	3c72c0ef          	jal	8002d08c <printf>
    800004ca:	4529                	li	a0,10
    800004cc:	0af2b0ef          	jal	8002bd7a <putchar>
    800004d0:	bb99                	j	80000226 <check_csr_field_spec+0x1ea>
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    800004d2:	00030597          	auipc	a1,0x30
    800004d6:	ae658593          	addi	a1,a1,-1306 # 8002ffb8 <__func__.0+0x2c8>
    800004da:	00030517          	auipc	a0,0x30
    800004de:	b2e50513          	addi	a0,a0,-1234 # 80030008 <__func__.0+0x318>
    800004e2:	3ab2c0ef          	jal	8002d08c <printf>
    800004e6:	4529                	li	a0,10
    800004e8:	0932b0ef          	jal	8002bd7a <putchar>
    800004ec:	b1d9                	j	800001b2 <check_csr_field_spec+0x176>
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    800004ee:	00030597          	auipc	a1,0x30
    800004f2:	aca58593          	addi	a1,a1,-1334 # 8002ffb8 <__func__.0+0x2c8>
    800004f6:	00030517          	auipc	a0,0x30
    800004fa:	b1250513          	addi	a0,a0,-1262 # 80030008 <__func__.0+0x318>
    800004fe:	38f2c0ef          	jal	8002d08c <printf>
    80000502:	4529                	li	a0,10
    80000504:	0772b0ef          	jal	8002bd7a <putchar>
    80000508:	4405                	li	s0,1
    8000050a:	b6e1                	j	800000d2 <check_csr_field_spec+0x96>

000000008000050c <check_misa_h>:

bool check_misa_h(){
    8000050c:	1141                	addi	sp,sp,-16

    TEST_START();
    8000050e:	0002e597          	auipc	a1,0x2e
    80000512:	84a58593          	addi	a1,a1,-1974 # 8002dd58 <__func__.0>
    80000516:	00030517          	auipc	a0,0x30
    8000051a:	ac250513          	addi	a0,a0,-1342 # 8002ffd8 <__func__.0+0x2e8>
bool check_misa_h(){
    8000051e:	e406                	sd	ra,8(sp)
    80000520:	e022                	sd	s0,0(sp)
    TEST_START();
    80000522:	36b2c0ef          	jal	8002d08c <printf>
    80000526:	4529                	li	a0,10
    80000528:	0532b0ef          	jal	8002bd7a <putchar>

    uint64_t misa = CSRR(misa);
    8000052c:	301027f3          	csrr	a5,misa
    CSRS(misa, (1ULL << 7));
    80000530:	08000793          	li	a5,128
    80000534:	3017a073          	csrs	misa,a5

    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000538:	30102473          	csrr	s0,misa
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000053c:	00030617          	auipc	a2,0x30
    80000540:	b3c60613          	addi	a2,a2,-1220 # 80030078 <__func__.0+0x388>
    80000544:	08200593          	li	a1,130
    80000548:	00030517          	auipc	a0,0x30
    8000054c:	aa850513          	addi	a0,a0,-1368 # 8002fff0 <__func__.0+0x300>
    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000550:	08047413          	andi	s0,s0,128
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    80000554:	3392c0ef          	jal	8002d08c <printf>
    80000558:	c031                	beqz	s0,8000059c <check_misa_h+0x90>
    8000055a:	00030597          	auipc	a1,0x30
    8000055e:	a5e58593          	addi	a1,a1,-1442 # 8002ffb8 <__func__.0+0x2c8>
    80000562:	00030517          	auipc	a0,0x30
    80000566:	aa650513          	addi	a0,a0,-1370 # 80030008 <__func__.0+0x318>
    8000056a:	3232c0ef          	jal	8002d08c <printf>
    8000056e:	4529                	li	a0,10
    80000570:	00b2b0ef          	jal	8002bd7a <putchar>
    //     VERBOSE("misa h bit is hardwired");
    // }

    // CSRW(misa, misa);

    TEST_END();
    80000574:	00030597          	auipc	a1,0x30
    80000578:	a4458593          	addi	a1,a1,-1468 # 8002ffb8 <__func__.0+0x2c8>
    8000057c:	00030517          	auipc	a0,0x30
    80000580:	af450513          	addi	a0,a0,-1292 # 80030070 <__func__.0+0x380>
    80000584:	3092c0ef          	jal	8002d08c <printf>
    80000588:	4511                	li	a0,4
    8000058a:	17f000ef          	jal	80000f08 <goto_priv>
    8000058e:	344010ef          	jal	800018d2 <reset_state>
}
    80000592:	60a2                	ld	ra,8(sp)
    80000594:	6402                	ld	s0,0(sp)
    TEST_END();
    80000596:	4505                	li	a0,1
}
    80000598:	0141                	addi	sp,sp,16
    8000059a:	8082                	ret
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000059c:	00030597          	auipc	a1,0x30
    800005a0:	a2c58593          	addi	a1,a1,-1492 # 8002ffc8 <__func__.0+0x2d8>
    800005a4:	00030517          	auipc	a0,0x30
    800005a8:	a6450513          	addi	a0,a0,-1436 # 80030008 <__func__.0+0x318>
    800005ac:	2e12c0ef          	jal	8002d08c <printf>
    800005b0:	00030517          	auipc	a0,0x30
    800005b4:	a6050513          	addi	a0,a0,-1440 # 80030010 <__func__.0+0x320>
    800005b8:	2d52c0ef          	jal	8002d08c <printf>
    800005bc:	00030517          	auipc	a0,0x30
    800005c0:	adc50513          	addi	a0,a0,-1316 # 80030098 <__func__.0+0x3a8>
    800005c4:	2c92c0ef          	jal	8002d08c <printf>
    800005c8:	02900513          	li	a0,41
    800005cc:	7ae2b0ef          	jal	8002bd7a <putchar>
    800005d0:	4529                	li	a0,10
    800005d2:	7a82b0ef          	jal	8002bd7a <putchar>
}
    800005d6:	60a2                	ld	ra,8(sp)
    800005d8:	6402                	ld	s0,0(sp)
        return false;
    800005da:	4501                	li	a0,0
}
    800005dc:	0141                	addi	sp,sp,16
    800005de:	8082                	ret

00000000800005e0 <hspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    }

    hspt[1][4] = 
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005e0:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    800005e4:	00055797          	auipc	a5,0x55
    800005e8:	a1c78793          	addi	a5,a5,-1508 # 80055000 <hspt+0x2000>
    800005ec:	5e07c157          	vmv.v.x	v2,a5
    800005f0:	00056517          	auipc	a0,0x56
    800005f4:	a1050513          	addi	a0,a0,-1520 # 80056000 <hspt+0x3000>
        hspt[1][i] = 
    800005f8:	5208a0d7          	vid.v	v1
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005fc:	3e256157          	vslide1down.vx	v2,v2,a0
        PTE_V | (((uintptr_t)&hspt[3][0]) >> 2);
    hspt[2][0] = 
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);

    for(int i = 0; i < 4; i++){
        hspt[3][i] = 
    80000600:	9619b1d7          	vsll.vi	v3,v1,19
        hspt[1][i] = 
    80000604:	961e30d7          	vsll.vi	v1,v1,28
    80000608:	0cf00593          	li	a1,207
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000060c:	a2213157          	vsrl.vi	v2,v2,2
        hspt[1][i] = 
    80000610:	200007b7          	lui	a5,0x20000
        hspt[3][i] = 
    80000614:	0d8076d7          	vsetvli	a3,zero,e64,m1,ta,ma
        hspt[1][i] = 
    80000618:	97ae                	add	a5,a5,a1
        hspt[3][i] = 
    8000061a:	5208a257          	vid.v	v4
    8000061e:	40000637          	lui	a2,0x40000
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    80000622:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
        hspt[3][i] = 
    80000626:	40100737          	lui	a4,0x40100
        hspt[1][i] = 
    8000062a:	0215c2d7          	vadd.vx	v5,v1,a1
        hspt[3][i] = 
    8000062e:	0cf70713          	addi	a4,a4,207 # 401000cf <STACK_SIZE+0x400000cf>
        hspt[1][i] = 
    80000632:	0217c0d7          	vadd.vx	v1,v1,a5
        hspt[3][i] = 
    80000636:	0cf60613          	addi	a2,a2,207 # 400000cf <STACK_SIZE+0x3ff000cf>
    8000063a:	02364357          	vadd.vx	v6,v3,a2
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000063e:	2a20b157          	vor.vi	v2,v2,1
        hspt[3][i] = 
    80000642:	023741d7          	vadd.vx	v3,v3,a4
    80000646:	0d8076d7          	vsetvli	a3,zero,e64,m1,ta,ma
    8000064a:	96463257          	vsll.vi	v4,v4,12
        hspt[1][i] = 
    8000064e:	00054897          	auipc	a7,0x54
    80000652:	9c288893          	addi	a7,a7,-1598 # 80054010 <hspt+0x1010>
    hspt[1][4] = 
    80000656:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
        hspt[1][i] = 
    8000065a:	0208f0a7          	vse64.v	v1,(a7)
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    8000065e:	00054797          	auipc	a5,0x54
    80000662:	9a278793          	addi	a5,a5,-1630 # 80054000 <hspt+0x1000>
    hspt[1][4] = 
    80000666:	00054e17          	auipc	t3,0x54
    8000066a:	9bae0e13          	addi	t3,t3,-1606 # 80054020 <hspt+0x1020>
        hspt[3][i] = 
    8000066e:	00056317          	auipc	t1,0x56
    80000672:	9a230313          	addi	t1,t1,-1630 # 80056010 <hspt+0x3010>
    80000676:	02057327          	vse64.v	v6,(a0)
        hspt[1][i] = 
    8000067a:	0207f2a7          	vse64.v	v5,(a5)
    hspt[1][4] = 
    8000067e:	020e7127          	vse64.v	v2,(t3)
        hspt[3][i] = 
    80000682:	020371a7          	vse64.v	v3,(t1)
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);
    80000686:	00057717          	auipc	a4,0x57
    8000068a:	97a70713          	addi	a4,a4,-1670 # 80057000 <hspt+0x4000>
        hspt[3][i] = 
    8000068e:	0d8076d7          	vsetvli	a3,zero,e64,m1,ta,ma
    80000692:	0c000813          	li	a6,192
    80000696:	45c5                	li	a1,17
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    80000698:	8389                	srli	a5,a5,0x2
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);
    8000069a:	00275693          	srli	a3,a4,0x2
    8000069e:	5e084357          	vmv.v.x	v6,a6
        hspt[3][i] = 
    800006a2:	05ee                	slli	a1,a1,0x1b
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800006a4:	0017e793          	ori	a5,a5,1
        PTE_V | (((uintptr_t)&hspt[4][0]) >> 2);
    800006a8:	0016e693          	ori	a3,a3,1
    hspt[0][0] =
    800006ac:	00053897          	auipc	a7,0x53
    800006b0:	95488893          	addi	a7,a7,-1708 # 80053000 <hspt>
        hspt[3][i] = 
    800006b4:	0245c257          	vadd.vx	v4,v4,a1
    hspt[0][0] =
    800006b8:	00f8b023          	sd	a5,0(a7)
        hspt[3][i] = 
    800006bc:	0003b597          	auipc	a1,0x3b
    800006c0:	76458593          	addi	a1,a1,1892 # 8003be20 <test_page_perm_table>
    hspt[2][0] = 
    800006c4:	00055797          	auipc	a5,0x55
    800006c8:	92d7be23          	sd	a3,-1732(a5) # 80055000 <hspt+0x2000>
        hspt[3][i] = 
    800006cc:	1ff00693          	li	a3,511
    800006d0:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
    }

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        hspt[4][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
    800006d4:	2205f107          	vlseg2e64.v	v2,(a1)
        hspt[4][i] = (addr >> 2) | PTE_AD |
    800006d8:	a24130d7          	vsrl.vi	v1,v4,2
    800006dc:	00c79513          	slli	a0,a5,0xc
    800006e0:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800006e4:	5e0542d7          	vmv.v.x	v5,a0
    800006e8:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800006ec:	00479813          	slli	a6,a5,0x4
    800006f0:	00379513          	slli	a0,a5,0x3
    800006f4:	8e9d                	sub	a3,a3,a5
    800006f6:	95c2                	add	a1,a1,a6
        hspt[4][i] = (addr >> 2) | PTE_AD |
    800006f8:	2a610157          	vor.vv	v2,v6,v2
    800006fc:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000700:	02428257          	vadd.vv	v4,v4,v5
    80000704:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000708:	2a1100d7          	vor.vv	v1,v1,v2
    8000070c:	020770a7          	vse64.v	v1,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000710:	972a                	add	a4,a4,a0
    80000712:	fedd                	bnez	a3,800006d0 <hspt_init+0xf0>
        hspt[4][i] = (addr >> 2) | PTE_AD |
    80000714:	0003d717          	auipc	a4,0x3d
    80000718:	6fc73703          	ld	a4,1788(a4) # 8003de10 <test_page_perm_table+0x1ff0>
        addr += PAGE_SIZE;
    }


    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    8000071c:	0003d797          	auipc	a5,0x3d
    80000720:	7087a783          	lw	a5,1800(a5) # 8003de24 <curr_priv>
        hspt[4][i] = (addr >> 2) | PTE_AD |
    80000724:	220806b7          	lui	a3,0x22080
    80000728:	cc068693          	addi	a3,a3,-832 # 2207fcc0 <STACK_SIZE+0x21f7fcc0>
    8000072c:	8f55                	or	a4,a4,a3
    8000072e:	00058697          	auipc	a3,0x58
    80000732:	8ce6b523          	sd	a4,-1846(a3) # 80057ff8 <hspt+0x4ff8>
    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000736:	37f5                	addiw	a5,a5,-3
    80000738:	4705                	li	a4,1
    8000073a:	00f76a63          	bltu	a4,a5,8000074e <hspt_init+0x16e>
        uintptr_t satp = (((uintptr_t)hspt) >> 12) | (0x9ULL << 60);
    8000073e:	5765                	li	a4,-7
    80000740:	00c8d793          	srli	a5,a7,0xc
    80000744:	1772                	slli	a4,a4,0x3c
    80000746:	8fd9                	or	a5,a5,a4
        CSRW(satp, satp);
    80000748:	18079073          	csrw	satp,a5
    } else {
        ERROR("trying to set hs level satp from lower privilege");
    8000074c:	8082                	ret
void hspt_init(){
    8000074e:	1141                	addi	sp,sp,-16
        ERROR("trying to set hs level satp from lower privilege");
    80000750:	00030517          	auipc	a0,0x30
    80000754:	9c850513          	addi	a0,a0,-1592 # 80030118 <__func__.0+0x428>
void hspt_init(){
    80000758:	e406                	sd	ra,8(sp)
        ERROR("trying to set hs level satp from lower privilege");
    8000075a:	1332c0ef          	jal	8002d08c <printf>
    8000075e:	1bd00613          	li	a2,445
    80000762:	0002d597          	auipc	a1,0x2d
    80000766:	60658593          	addi	a1,a1,1542 # 8002dd68 <__func__.2>
    8000076a:	00030517          	auipc	a0,0x30
    8000076e:	9f650513          	addi	a0,a0,-1546 # 80030160 <__func__.0+0x470>
    80000772:	11b2c0ef          	jal	8002d08c <printf>
    80000776:	4501                	li	a0,0
    80000778:	4ca2c0ef          	jal	8002cc42 <exit>

000000008000077c <vspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    }

    vspt[1][4] = 
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    8000077c:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    80000780:	0004e797          	auipc	a5,0x4e
    80000784:	88078793          	addi	a5,a5,-1920 # 8004e000 <vspt+0x2000>
    80000788:	5e07c0d7          	vmv.v.x	v1,a5
void vspt_init(){
    8000078c:	1101                	addi	sp,sp,-32
    8000078e:	e822                	sd	s0,16(sp)
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    80000790:	0004f417          	auipc	s0,0x4f
    80000794:	87040413          	addi	s0,s0,-1936 # 8004f000 <vspt+0x3000>
    80000798:	3e1460d7          	vslide1down.vx	v1,v1,s0
        vspt[1][i] = 
    8000079c:	5208a157          	vid.v	v2
    800007a0:	0cf00713          	li	a4,207
    800007a4:	962e3157          	vsll.vi	v2,v2,28
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    800007a8:	a21130d7          	vsrl.vi	v1,v1,2
        vspt[1][i] = 
    800007ac:	200007b7          	lui	a5,0x20000
    800007b0:	97ba                	add	a5,a5,a4
    800007b2:	022741d7          	vadd.vx	v3,v2,a4
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    800007b6:	2a10b0d7          	vor.vi	v1,v1,1
        vspt[1][i] = 
    800007ba:	0227c157          	vadd.vx	v2,v2,a5
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800007be:	0004d717          	auipc	a4,0x4d
    800007c2:	84270713          	addi	a4,a4,-1982 # 8004d000 <vspt+0x1000>
    vspt[1][5] = 
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    vspt[1][6] = 
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    800007c6:	00050517          	auipc	a0,0x50
    800007ca:	83a50513          	addi	a0,a0,-1990 # 80050000 <vspt+0x4000>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800007ce:	00275793          	srli	a5,a4,0x2
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    800007d2:	00255693          	srli	a3,a0,0x2
void vspt_init(){
    800007d6:	e426                	sd	s1,8(sp)
    800007d8:	ec06                	sd	ra,24(sp)
    vspt[1][4] = 
    800007da:	0004d897          	auipc	a7,0x4d
    800007de:	84688893          	addi	a7,a7,-1978 # 8004d020 <vspt+0x1020>
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    800007e2:	0016e693          	ori	a3,a3,1
        vspt[1][i] = 
    800007e6:	0004d817          	auipc	a6,0x4d
    800007ea:	82a80813          	addi	a6,a6,-2006 # 8004d010 <vspt+0x1010>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800007ee:	0017e793          	ori	a5,a5,1
    vspt[0][0] = 
    800007f2:	0004c497          	auipc	s1,0x4c
    800007f6:	80e48493          	addi	s1,s1,-2034 # 8004c000 <vspt>
    
    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) vspt[4][i] = 0;
    800007fa:	6605                	lui	a2,0x1
    800007fc:	4581                	li	a1,0
        vspt[1][i] = 
    800007fe:	020771a7          	vse64.v	v3,(a4)
    80000802:	02087127          	vse64.v	v2,(a6)
    vspt[1][6] = 
    80000806:	fb14                	sd	a3,48(a4)
    vspt[1][4] = 
    80000808:	0208f0a7          	vse64.v	v1,(a7)
    vspt[0][0] = 
    8000080c:	e09c                	sd	a5,0(s1)
    for(int i = 0; i < 512; i++) vspt[4][i] = 0;
    8000080e:	1832c0ef          	jal	8002d190 <memset>
    80000812:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000816:	5208a157          	vid.v	v2
    8000081a:	4705                	li	a4,1
    8000081c:	962ab157          	vsll.vi	v2,v2,21
    80000820:	1702                	slli	a4,a4,0x20
    80000822:	0cf00693          	li	a3,207
    80000826:	02274157          	vadd.vx	v2,v2,a4
    8000082a:	5e06c2d7          	vmv.v.x	v5,a3
    8000082e:	8722                	mv	a4,s0
    80000830:	20000693          	li	a3,512
    80000834:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        addr +=  SUPERPAGE_SIZE(2);
    }

    addr = 4 * SUPERPAGE_SIZE(1);                                        
    for(int i = 0; i < 512; i++){
        vspt[3][i] = (addr >> 2) |
    80000838:	a22130d7          	vsrl.vi	v1,v2,2
    8000083c:	01579613          	slli	a2,a5,0x15
    80000840:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000844:	5e0641d7          	vmv.v.x	v3,a2
             PTE_V | PTE_AD | PTE_RWX;  
    80000848:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    8000084c:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000850:	00379613          	slli	a2,a5,0x3
    80000854:	8e9d                	sub	a3,a3,a5
        vspt[3][i] = (addr >> 2) |
    80000856:	020770a7          	vse64.v	v1,(a4)
    8000085a:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    8000085e:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000862:	9732                	add	a4,a4,a2
    80000864:	fae1                	bnez	a3,80000834 <vspt_init+0xb8>
        addr +=  SUPERPAGE_SIZE(2);
    }  

    vspt[2][0] = 
    80000866:	5208a257          	vid.v	v4
    8000086a:	4605                	li	a2,1
    8000086c:	96463257          	vsll.vi	v4,v4,12
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000870:	00050717          	auipc	a4,0x50
    80000874:	79070713          	addi	a4,a4,1936 # 80051000 <vspt+0x5000>
    vspt[2][0] = 
    80000878:	1602                	slli	a2,a2,0x20
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    8000087a:	00275793          	srli	a5,a4,0x2
    vspt[2][0] = 
    8000087e:	02464257          	vadd.vx	v4,v4,a2
    80000882:	0c000593          	li	a1,192
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000886:	0017e793          	ori	a5,a5,1
    vspt[2][0] = 
    8000088a:	0004d317          	auipc	t1,0x4d
    8000088e:	77630313          	addi	t1,t1,1910 # 8004e000 <vspt+0x2000>
    80000892:	5e05c3d7          	vmv.v.x	v7,a1
    80000896:	00f33023          	sd	a5,0(t1)
    8000089a:	1ff00693          	li	a3,511
    8000089e:	0003b597          	auipc	a1,0x3b
    800008a2:	58258593          	addi	a1,a1,1410 # 8003be20 <test_page_perm_table>
    800008a6:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = TEST_VPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        vspt[5][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
    800008aa:	2205f107          	vlseg2e64.v	v2,(a1)
        vspt[5][i] = (addr >> 2) | PTE_AD |
    800008ae:	a24130d7          	vsrl.vi	v1,v4,2
    800008b2:	00c79513          	slli	a0,a5,0xc
    800008b6:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800008ba:	5e054357          	vmv.v.x	v6,a0
    800008be:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008c2:	00479813          	slli	a6,a5,0x4
    800008c6:	00379513          	slli	a0,a5,0x3
    800008ca:	8e9d                	sub	a3,a3,a5
    800008cc:	95c2                	add	a1,a1,a6
        vspt[5][i] = (addr >> 2) | PTE_AD |
    800008ce:	2a710157          	vor.vv	v2,v7,v2
    800008d2:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800008d6:	02430257          	vadd.vv	v4,v4,v6
    800008da:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    800008de:	2a208157          	vor.vv	v2,v2,v1
    800008e2:	02077127          	vse64.v	v2,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008e6:	972a                	add	a4,a4,a0
    800008e8:	fedd                	bnez	a3,800008a6 <vspt_init+0x12a>
        addr +=  PAGE_SIZE;
    }

    vspt[2][1] = 
    800008ea:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    800008ee:	5208a157          	vid.v	v2
        vspt[5][i] = (addr >> 2) | PTE_AD |
    800008f2:	0003d697          	auipc	a3,0x3d
    800008f6:	51e6b683          	ld	a3,1310(a3) # 8003de10 <test_page_perm_table+0x1ff0>
    vspt[2][1] = 
    800008fa:	96263157          	vsll.vi	v2,v2,12
    800008fe:	008015b7          	lui	a1,0x801
        vspt[5][i] = (addr >> 2) | PTE_AD |
    80000902:	00051717          	auipc	a4,0x51
    80000906:	6fe70713          	addi	a4,a4,1790 # 80052000 <vspt+0x6000>
    8000090a:	40080637          	lui	a2,0x40080
    vspt[2][1] = 
    8000090e:	05a6                	slli	a1,a1,0x9
        vspt[5][i] = (addr >> 2) | PTE_AD |
    80000910:	cc060613          	addi	a2,a2,-832 # 4007fcc0 <STACK_SIZE+0x3ff7fcc0>
        PTE_V | (((uintptr_t)&vspt[6][0]) >> 2);
    80000914:	00275793          	srli	a5,a4,0x2
    vspt[2][1] = 
    80000918:	0225c157          	vadd.vx	v2,v2,a1
        vspt[5][i] = (addr >> 2) | PTE_AD |
    8000091c:	8ed1                	or	a3,a3,a2
        PTE_V | (((uintptr_t)&vspt[6][0]) >> 2);
    8000091e:	0017e793          	ori	a5,a5,1
        vspt[5][i] = (addr >> 2) | PTE_AD |
    80000922:	fed73c23          	sd	a3,-8(a4)
    vspt[2][1] = 
    80000926:	00f33423          	sd	a5,8(t1)
    8000092a:	20000693          	li	a3,512
    8000092e:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = 4 * SUPERPAGE_SIZE(1) + SUPERPAGE_SIZE(2);
    for(int i = 0; i < 512; i++){
        vspt[6][i] = (addr >> 2) | 
    80000932:	a22130d7          	vsrl.vi	v1,v2,2
    80000936:	00c79613          	slli	a2,a5,0xc
    8000093a:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    8000093e:	5e0641d7          	vmv.v.x	v3,a2
            PTE_V | PTE_AD | PTE_RWX; 
    80000942:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000946:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    8000094a:	00379613          	slli	a2,a5,0x3
    8000094e:	8e9d                	sub	a3,a3,a5
        vspt[6][i] = (addr >> 2) | 
    80000950:	020770a7          	vse64.v	v1,(a4)
    80000954:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000958:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    8000095c:	9732                	add	a4,a4,a2
    8000095e:	fae1                	bnez	a3,8000092e <vspt_init+0x1b2>
        addr +=  PAGE_SIZE;
    }  

    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x9ULL << 60);
    if(curr_priv == PRIV_VS){
    80000960:	0003d717          	auipc	a4,0x3d
    80000964:	4c472703          	lw	a4,1220(a4) # 8003de24 <curr_priv>
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x9ULL << 60);
    80000968:	57e5                	li	a5,-7
    8000096a:	80b1                	srli	s1,s1,0xc
    8000096c:	17f2                	slli	a5,a5,0x3c
    if(curr_priv == PRIV_VS){
    8000096e:	4689                	li	a3,2
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x9ULL << 60);
    80000970:	8cdd                	or	s1,s1,a5
    if(curr_priv == PRIV_VS){
    80000972:	04d70263          	beq	a4,a3,800009b6 <vspt_init+0x23a>
        CSRW(satp, satp);
    } else if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000976:	3775                	addiw	a4,a4,-3
    80000978:	4785                	li	a5,1
    8000097a:	00e7e963          	bltu	a5,a4,8000098c <vspt_init+0x210>
        CSRW(CSR_VSATP, satp);
    8000097e:	28049073          	csrw	vsatp,s1
    } else {
        ERROR("");
    }

}
    80000982:	60e2                	ld	ra,24(sp)
    80000984:	6442                	ld	s0,16(sp)
    80000986:	64a2                	ld	s1,8(sp)
    80000988:	6105                	addi	sp,sp,32
    8000098a:	8082                	ret
        ERROR("");
    8000098c:	0002f517          	auipc	a0,0x2f
    80000990:	7e450513          	addi	a0,a0,2020 # 80030170 <__func__.0+0x480>
    80000994:	6f82c0ef          	jal	8002d08c <printf>
    80000998:	20100613          	li	a2,513
    8000099c:	0002d597          	auipc	a1,0x2d
    800009a0:	3dc58593          	addi	a1,a1,988 # 8002dd78 <__func__.1>
    800009a4:	0002f517          	auipc	a0,0x2f
    800009a8:	7bc50513          	addi	a0,a0,1980 # 80030160 <__func__.0+0x470>
    800009ac:	6e02c0ef          	jal	8002d08c <printf>
    800009b0:	4501                	li	a0,0
    800009b2:	2902c0ef          	jal	8002cc42 <exit>
        CSRW(satp, satp);
    800009b6:	18049073          	csrw	satp,s1
}
    800009ba:	60e2                	ld	ra,24(sp)
    800009bc:	6442                	ld	s0,16(sp)
    800009be:	64a2                	ld	s1,8(sp)
    800009c0:	6105                	addi	sp,sp,32
    800009c2:	8082                	ret

00000000800009c4 <hpt_init>:

pte_t hpt_root[PAGE_SIZE*4/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE*4)));
pte_t hpt[7][PAGE_SIZE/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE)));

void hpt_init(){
    800009c4:	1101                	addi	sp,sp,-32
    800009c6:	e822                	sd	s0,16(sp)

    for(int i = 0; i < 2048; i++){
        hpt_root[i] = 0;
    800009c8:	00047417          	auipc	s0,0x47
    800009cc:	63840413          	addi	s0,s0,1592 # 80048000 <hpt_root>
    800009d0:	6611                	lui	a2,0x4
    800009d2:	4581                	li	a1,0
    800009d4:	8522                	mv	a0,s0
void hpt_init(){
    800009d6:	ec06                	sd	ra,24(sp)
    800009d8:	e426                	sd	s1,8(sp)
        hpt_root[i] = 0;
    800009da:	7b62c0ef          	jal	8002d190 <memset>

    hpt[1][4] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);

    hpt[0][0] = 
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    800009de:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    800009e2:	00042797          	auipc	a5,0x42
    800009e6:	61e78793          	addi	a5,a5,1566 # 80043000 <hpt+0x3000>
    800009ea:	5e07c0d7          	vmv.v.x	v1,a5
    800009ee:	00043797          	auipc	a5,0x43
    800009f2:	61278793          	addi	a5,a5,1554 # 80044000 <hpt+0x4000>
        hpt[1][i] = 
    800009f6:	5208a157          	vid.v	v2
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    800009fa:	3e17e0d7          	vslide1down.vx	v1,v1,a5
        hpt[1][i] = 
    800009fe:	962e3157          	vsll.vi	v2,v2,28
    80000a02:	0df00713          	li	a4,223
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    80000a06:	a21130d7          	vsrl.vi	v1,v1,2
        hpt[1][i] = 
    80000a0a:	200007b7          	lui	a5,0x20000
    80000a0e:	97ba                	add	a5,a5,a4
    80000a10:	022741d7          	vadd.vx	v3,v2,a4
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000a14:	0003f897          	auipc	a7,0x3f
    80000a18:	5ec88893          	addi	a7,a7,1516 # 80040000 <hpt>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a1c:	00040717          	auipc	a4,0x40
    80000a20:	5e470713          	addi	a4,a4,1508 # 80041000 <hpt+0x1000>
        hpt[1][i] = 
    80000a24:	0227c157          	vadd.vx	v2,v2,a5
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    80000a28:	2a10b0d7          	vor.vi	v1,v1,1
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000a2c:	00041497          	auipc	s1,0x41
    80000a30:	5d448493          	addi	s1,s1,1492 # 80042000 <hpt+0x2000>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a34:	00275793          	srli	a5,a4,0x2
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000a38:	0028d813          	srli	a6,a7,0x2
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000a3c:	0024d693          	srli	a3,s1,0x2
    80000a40:	0016e693          	ori	a3,a3,1
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a44:	0017e793          	ori	a5,a5,1
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000a48:	00186813          	ori	a6,a6,1
        hpt[1][i] = 
    80000a4c:	00040317          	auipc	t1,0x40
    80000a50:	5c430313          	addi	t1,t1,1476 # 80041010 <hpt+0x1010>

    hpt[0][1] = 
        PTE_V | (((uintptr_t)&hpt[4][0]) >> 2);

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) hpt[3][i] = 0;
    80000a54:	6605                	lui	a2,0x1
    80000a56:	4581                	li	a1,0
    80000a58:	00042517          	auipc	a0,0x42
    80000a5c:	5a850513          	addi	a0,a0,1448 # 80043000 <hpt+0x3000>
        hpt[1][i] = 
    80000a60:	020771a7          	vse64.v	v3,(a4)
    hpt[1][4] = 
    80000a64:	f314                	sd	a3,32(a4)
        hpt[1][i] = 
    80000a66:	02037127          	vse64.v	v2,(t1)
    hpt[0][0] = 
    80000a6a:	0208f0a7          	vse64.v	v1,(a7)
    hpt_root[2047] =
    80000a6e:	0004b717          	auipc	a4,0x4b
    80000a72:	58f73523          	sd	a5,1418(a4) # 8004bff8 <hpt_root+0x3ff8>
    hpt_root[MEM_BASE/SUPERPAGE_SIZE(1)] =
    80000a76:	01043823          	sd	a6,16(s0)
    hpt_root[0] =
    80000a7a:	e01c                	sd	a5,0(s0)
    for(int i = 0; i < 512; i++) hpt[3][i] = 0;
    80000a7c:	7142c0ef          	jal	8002d190 <memset>
    80000a80:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000a84:	5208a157          	vid.v	v2
    80000a88:	4705                	li	a4,1
    80000a8a:	962ab157          	vsll.vi	v2,v2,21
    80000a8e:	077e                	slli	a4,a4,0x1f
    80000a90:	0df00693          	li	a3,223
    80000a94:	00042517          	auipc	a0,0x42
    80000a98:	56c50513          	addi	a0,a0,1388 # 80043000 <hpt+0x3000>
    80000a9c:	02274157          	vadd.vx	v2,v2,a4
    80000aa0:	5e06c2d7          	vmv.v.x	v5,a3
    80000aa4:	04000713          	li	a4,64
    80000aa8:	86aa                	mv	a3,a0
    80000aaa:	0d8777d7          	vsetvli	a5,a4,e64,m1,ta,ma
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(2)/2; i++){
        hpt[3][i] = 
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
    80000aae:	a22130d7          	vsrl.vi	v1,v2,2
    80000ab2:	01579613          	slli	a2,a5,0x15
    80000ab6:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000aba:	5e0641d7          	vmv.v.x	v3,a2
    80000abe:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000ac2:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(2)/2; i++){
    80000ac6:	00379613          	slli	a2,a5,0x3
    80000aca:	8f1d                	sub	a4,a4,a5
        hpt[3][i] = 
    80000acc:	0206f0a7          	vse64.v	v1,(a3)
    80000ad0:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000ad4:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(2)/2; i++){
    80000ad8:	96b2                	add	a3,a3,a2
    80000ada:	fb61                	bnez	a4,80000aaa <hpt_init+0xe6>
    80000adc:	5208a157          	vid.v	v2
    80000ae0:	47c5                	li	a5,17
    80000ae2:	962ab157          	vsll.vi	v2,v2,21
    80000ae6:	07ee                	slli	a5,a5,0x1b
    80000ae8:	20000693          	li	a3,512
    80000aec:	0227c157          	vadd.vx	v2,v2,a5
    80000af0:	00043717          	auipc	a4,0x43
    80000af4:	51070713          	addi	a4,a4,1296 # 80044000 <hpt+0x4000>
    80000af8:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        addr +=  SUPERPAGE_SIZE(2);
    }    

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
        hpt[4][i] = (addr >> 2) |
    80000afc:	a22130d7          	vsrl.vi	v1,v2,2
    80000b00:	01579613          	slli	a2,a5,0x15
    80000b04:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000b08:	5e0641d7          	vmv.v.x	v3,a2
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
    80000b0c:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000b10:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000b14:	00379613          	slli	a2,a5,0x3
    80000b18:	8e9d                	sub	a3,a3,a5
        hpt[4][i] = (addr >> 2) |
    80000b1a:	020770a7          	vse64.v	v1,(a4)
    80000b1e:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000b22:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000b26:	9732                	add	a4,a4,a2
    80000b28:	fae1                	bnez	a3,80000af8 <hpt_init+0x134>
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);

    hpt[2][1] = 
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);

    hpt[2][511] = 
    80000b2a:	5208a257          	vid.v	v4
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);
    80000b2e:	00044717          	auipc	a4,0x44
    80000b32:	4d270713          	addi	a4,a4,1234 # 80045000 <hpt+0x5000>
    hpt[2][511] = 
    80000b36:	96463257          	vsll.vi	v4,v4,12
        PTE_V | (((uintptr_t)&hpt[6][0]) >> 2);
    80000b3a:	00045317          	auipc	t1,0x45
    80000b3e:	4c630313          	addi	t1,t1,1222 # 80046000 <hpt+0x6000>
    80000b42:	0c000813          	li	a6,192
    hpt[2][511] = 
    80000b46:	45c5                	li	a1,17
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);
    80000b48:	00275793          	srli	a5,a4,0x2
        PTE_V | (((uintptr_t)&hpt[6][0]) >> 2);
    80000b4c:	00235693          	srli	a3,t1,0x2
    80000b50:	5e0843d7          	vmv.v.x	v7,a6
    hpt[2][511] = 
    80000b54:	05ee                	slli	a1,a1,0x1b
        PTE_V | (((uintptr_t)&hpt[5][0]) >> 2);
    80000b56:	0017e793          	ori	a5,a5,1
        PTE_V | (((uintptr_t)&hpt[6][0]) >> 2);
    80000b5a:	0016e693          	ori	a3,a3,1
    hpt[2][511] = 
    80000b5e:	0245c257          	vadd.vx	v4,v4,a1
    80000b62:	fed53c23          	sd	a3,-8(a0)
    hpt[2][0] = 
    80000b66:	e09c                	sd	a5,0(s1)
    hpt[2][1] = 
    80000b68:	e49c                	sd	a5,8(s1)
    hpt[2][511] = 
    80000b6a:	1ff00693          	li	a3,511
    80000b6e:	0003b597          	auipc	a1,0x3b
    80000b72:	2ba58593          	addi	a1,a1,698 # 8003be28 <test_page_perm_table+0x8>
    80000b76:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        hpt[5][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].h; 
    80000b7a:	2205f107          	vlseg2e64.v	v2,(a1)
        hpt[5][i] = (addr >> 2) | PTE_AD |
    80000b7e:	a24130d7          	vsrl.vi	v1,v4,2
    80000b82:	00c79513          	slli	a0,a5,0xc
    80000b86:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000b8a:	5e054357          	vmv.v.x	v6,a0
    80000b8e:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000b92:	00479813          	slli	a6,a5,0x4
    80000b96:	00379513          	slli	a0,a5,0x3
    80000b9a:	8e9d                	sub	a3,a3,a5
    80000b9c:	95c2                	add	a1,a1,a6
        hpt[5][i] = (addr >> 2) | PTE_AD |
    80000b9e:	2a710157          	vor.vv	v2,v7,v2
    80000ba2:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000ba6:	02430257          	vadd.vv	v4,v4,v6
    80000baa:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000bae:	2a208157          	vor.vv	v2,v2,v1
    80000bb2:	02077127          	vse64.v	v2,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000bb6:	972a                	add	a4,a4,a0
    80000bb8:	fedd                	bnez	a3,80000b76 <hpt_init+0x1b2>
        hpt[5][i] = (addr >> 2) | PTE_AD |
    80000bba:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000bbe:	5208a157          	vid.v	v2
    80000bc2:	0003d797          	auipc	a5,0x3d
    80000bc6:	2567b783          	ld	a5,598(a5) # 8003de18 <test_page_perm_table+0x1ff8>
    80000bca:	96263157          	vsll.vi	v2,v2,12
    80000bce:	22080737          	lui	a4,0x22080
    80000bd2:	cc070713          	addi	a4,a4,-832 # 2207fcc0 <STACK_SIZE+0x21f7fcc0>
    80000bd6:	46c5                	li	a3,17
    80000bd8:	06ee                	slli	a3,a3,0x1b
    80000bda:	8fd9                	or	a5,a5,a4
    80000bdc:	0226c157          	vadd.vx	v2,v2,a3
    80000be0:	fef33c23          	sd	a5,-8(t1)
    80000be4:	20000693          	li	a3,512
    80000be8:	00045717          	auipc	a4,0x45
    80000bec:	41870713          	addi	a4,a4,1048 # 80046000 <hpt+0x6000>
    80000bf0:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        addr +=  PAGE_SIZE;
    }

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
        hpt[6][i] = (addr >> 2) | 
    80000bf4:	a22130d7          	vsrl.vi	v1,v2,2
    80000bf8:	00c79613          	slli	a2,a5,0xc
    80000bfc:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000c00:	5e0641d7          	vmv.v.x	v3,a2
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
    80000c04:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000c08:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000c0c:	00379613          	slli	a2,a5,0x3
    80000c10:	8e9d                	sub	a3,a3,a5
        hpt[6][i] = (addr >> 2) | 
    80000c12:	020770a7          	vse64.v	v1,(a4)
    80000c16:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000c1a:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000c1e:	9732                	add	a4,a4,a2
    80000c20:	fae1                	bnez	a3,80000bf0 <hpt_init+0x22c>
        addr +=  PAGE_SIZE;
    }  

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000c22:	0003d797          	auipc	a5,0x3d
    80000c26:	2027a783          	lw	a5,514(a5) # 8003de24 <curr_priv>
    80000c2a:	4705                	li	a4,1
    80000c2c:	37f5                	addiw	a5,a5,-3
    80000c2e:	00f76e63          	bltu	a4,a5,80000c4a <hpt_init+0x286>
        uintptr_t hsatp = (((uintptr_t)hpt_root) >> 12) | (0x9ULL << 60);
    80000c32:	5765                	li	a4,-7
    80000c34:	00c45793          	srli	a5,s0,0xc
    80000c38:	1772                	slli	a4,a4,0x3c
    80000c3a:	8fd9                	or	a5,a5,a4
        CSRW(CSR_HGATP, hsatp);
    80000c3c:	68079073          	csrw	hgatp,a5
    } else {
        ERROR("trying to set hs hgatp from lower privilege");
    }

}
    80000c40:	60e2                	ld	ra,24(sp)
    80000c42:	6442                	ld	s0,16(sp)
    80000c44:	64a2                	ld	s1,8(sp)
    80000c46:	6105                	addi	sp,sp,32
    80000c48:	8082                	ret
        ERROR("trying to set hs hgatp from lower privilege");
    80000c4a:	0002f517          	auipc	a0,0x2f
    80000c4e:	53e50513          	addi	a0,a0,1342 # 80030188 <__func__.0+0x498>
    80000c52:	43a2c0ef          	jal	8002d08c <printf>
    80000c56:	25400613          	li	a2,596
    80000c5a:	0002d597          	auipc	a1,0x2d
    80000c5e:	12e58593          	addi	a1,a1,302 # 8002dd88 <__func__.0>
    80000c62:	0002f517          	auipc	a0,0x2f
    80000c66:	4fe50513          	addi	a0,a0,1278 # 80030160 <__func__.0+0x470>
    80000c6a:	4222c0ef          	jal	8002d08c <printf>
    80000c6e:	4501                	li	a0,0
    80000c70:	7d32b0ef          	jal	8002cc42 <exit>

0000000080000c74 <page_table_add_vs_AD>:

void page_table_add_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000c74:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c78:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000c7c:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c80:	0003b617          	auipc	a2,0x3b
    80000c84:	1a060613          	addi	a2,a2,416 # 8003be20 <test_page_perm_table>
    addr = 0x88000000 + i*0x1000;
    80000c88:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c8a:	962e                	add	a2,a2,a1

    addr = 0x100000000 + i*0x1000;
    80000c8c:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c8e:	6210                	ld	a2,0(a2)
    addr = 0x100000000 + i*0x1000;
    80000c90:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    80000c92:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    80000c94:	9736                	add	a4,a4,a3
    addr = 0x88000000 + i*0x1000;
    80000c96:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c98:	40050593          	addi	a1,a0,1024
    80000c9c:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c9e:	8309                	srli	a4,a4,0x2
    80000ca0:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000ca4:	8fd1                	or	a5,a5,a2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000ca6:	8f51                	or	a4,a4,a2
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000ca8:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000caa:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cac:	00052617          	auipc	a2,0x52
    80000cb0:	35460613          	addi	a2,a2,852 # 80053000 <hspt>
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cb4:	0004b697          	auipc	a3,0x4b
    80000cb8:	34c68693          	addi	a3,a3,844 # 8004c000 <vspt>
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cbc:	0c07e793          	ori	a5,a5,192
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc0:	0c076713          	ori	a4,a4,192
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc4:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc6:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cc8:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000cca:	e298                	sd	a4,0(a3)
}
    80000ccc:	8082                	ret

0000000080000cce <page_table_del_vs_AD>:

void page_table_del_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000cce:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cd2:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000cd6:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cda:	0003b617          	auipc	a2,0x3b
    80000cde:	14660613          	addi	a2,a2,326 # 8003be20 <test_page_perm_table>
    80000ce2:	962e                	add	a2,a2,a1
    addr = 0x88000000 + i*0x1000;
    80000ce4:	9fb9                	addw	a5,a5,a4

    addr = 0x100000000 + i*0x1000;
    80000ce6:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000ce8:	00063803          	ld	a6,0(a2)
    addr = 0x100000000 + i*0x1000;
    80000cec:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    80000cee:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    80000cf0:	9736                	add	a4,a4,a3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cf2:	40050593          	addi	a1,a0,1024
    addr = 0x88000000 + i*0x1000;
    80000cf6:	9381                	srli	a5,a5,0x20
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cf8:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cfc:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000cfe:	8309                	srli	a4,a4,0x2
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d00:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d02:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d04:	00052617          	auipc	a2,0x52
    80000d08:	2fc60613          	addi	a2,a2,764 # 80053000 <hspt>
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d0c:	0004b697          	auipc	a3,0x4b
    80000d10:	2f468693          	addi	a3,a3,756 # 8004c000 <vspt>
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d14:	0107e7b3          	or	a5,a5,a6
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d18:	01076733          	or	a4,a4,a6
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d1c:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d1e:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d20:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000d22:	e298                	sd	a4,0(a3)
}
    80000d24:	8082                	ret

0000000080000d26 <page_table_add_h_AD>:


void page_table_add_h_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000d26:	00c5171b          	slliw	a4,a0,0xc
    80000d2a:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000d2e:	00451693          	slli	a3,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000d32:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000d34:	0003b717          	auipc	a4,0x3b
    80000d38:	0ec70713          	addi	a4,a4,236 # 8003be20 <test_page_perm_table>
    80000d3c:	9736                	add	a4,a4,a3
    80000d3e:	6714                	ld	a3,8(a4)
    addr = 0x88000000 + i*0x1000;
    80000d40:	1782                	slli	a5,a5,0x20
    80000d42:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000d44:	40050513          	addi	a0,a0,1024
    80000d48:	8389                	srli	a5,a5,0x2
    80000d4a:	050e                	slli	a0,a0,0x3
    80000d4c:	00052717          	auipc	a4,0x52
    80000d50:	2b470713          	addi	a4,a4,692 # 80053000 <hspt>
    80000d54:	8fd5                	or	a5,a5,a3
    80000d56:	972a                	add	a4,a4,a0
    80000d58:	e31c                	sd	a5,0(a4)
}
    80000d5a:	8082                	ret

0000000080000d5c <page_table_del_h_AD>:

void page_table_del_h_AD(int i){
    80000d5c:	00c5171b          	slliw	a4,a0,0xc
    80000d60:	880007b7          	lui	a5,0x88000
    80000d64:	00451693          	slli	a3,a0,0x4
    80000d68:	9fb9                	addw	a5,a5,a4
    80000d6a:	0003b717          	auipc	a4,0x3b
    80000d6e:	0b670713          	addi	a4,a4,182 # 8003be20 <test_page_perm_table>
    80000d72:	9736                	add	a4,a4,a3
    80000d74:	6714                	ld	a3,8(a4)
    80000d76:	1782                	slli	a5,a5,0x20
    80000d78:	9381                	srli	a5,a5,0x20
    80000d7a:	40050513          	addi	a0,a0,1024
    80000d7e:	8389                	srli	a5,a5,0x2
    80000d80:	050e                	slli	a0,a0,0x3
    80000d82:	00052717          	auipc	a4,0x52
    80000d86:	27e70713          	addi	a4,a4,638 # 80053000 <hspt>
    80000d8a:	8fd5                	or	a5,a5,a3
    80000d8c:	972a                	add	a4,a4,a0
    80000d8e:	e31c                	sd	a5,0(a4)
    80000d90:	8082                	ret

0000000080000d92 <hspt_switch>:
    addr = 0x88000000 + i*0x1000;
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
}

void hspt_switch(){
    pte_t temp = hspt[4][SWITCH1];
    80000d92:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    hspt[4][SWITCH1] = hspt[4][SWITCH2];
    80000d96:	00056797          	auipc	a5,0x56
    80000d9a:	5ca78793          	addi	a5,a5,1482 # 80057360 <hspt+0x4360>
    80000d9e:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = hspt[4][SWITCH1];
    80000da2:	5208a0d7          	vid.v	v1
    80000da6:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000daa:	32308157          	vrgather.vv	v2,v3,v1
    hspt[4][SWITCH1] = hspt[4][SWITCH2];
    80000dae:	0207f127          	vse64.v	v2,(a5)
    hspt[4][SWITCH2] = temp;
}
    80000db2:	8082                	ret

0000000080000db4 <vspt_switch>:

void vspt_switch(){
    pte_t temp = vspt[5][SWITCH1];
    80000db4:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    vspt[5][SWITCH1] = vspt[5][SWITCH2];
    80000db8:	00050797          	auipc	a5,0x50
    80000dbc:	5a878793          	addi	a5,a5,1448 # 80051360 <vspt+0x5360>
    80000dc0:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = vspt[5][SWITCH1];
    80000dc4:	5208a0d7          	vid.v	v1
    80000dc8:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000dcc:	32308157          	vrgather.vv	v2,v3,v1
    vspt[5][SWITCH1] = vspt[5][SWITCH2];
    80000dd0:	0207f127          	vse64.v	v2,(a5)
    vspt[5][SWITCH2] = temp;
}
    80000dd4:	8082                	ret

0000000080000dd6 <hpt_switch>:

void hpt_switch(){
    pte_t temp = hpt[5][SWITCH1];
    80000dd6:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    hpt[5][SWITCH1] = hpt[5][SWITCH2];
    80000dda:	00044797          	auipc	a5,0x44
    80000dde:	58678793          	addi	a5,a5,1414 # 80045360 <hpt+0x5360>
    80000de2:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = hpt[5][SWITCH1];
    80000de6:	5208a0d7          	vid.v	v1
    80000dea:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000dee:	32308157          	vrgather.vv	v2,v3,v1
    hpt[5][SWITCH1] = hpt[5][SWITCH2];
    80000df2:	0207f127          	vse64.v	v2,(a5)
    hpt[5][SWITCH2] = temp;
}
    80000df6:	8082                	ret

0000000080000df8 <ecall>:

uint64_t ecall_args[2];

uint64_t ecall(uint64_t a0, uint64_t a1)
{
    ecall_args[0] = a0;
    80000df8:	00057797          	auipc	a5,0x57
    80000dfc:	20878793          	addi	a5,a5,520 # 80058000 <ecall_args>
    80000e00:	e388                	sd	a0,0(a5)
    ecall_args[1] = a1;
    80000e02:	e78c                	sd	a1,8(a5)

    asm volatile("ecall" ::: "memory");
    80000e04:	00000073          	ecall
    return ecall_args[0];

}
    80000e08:	6388                	ld	a0,0(a5)
    80000e0a:	8082                	ret

0000000080000e0c <test_setup_except_function>:

//v扩展时防止被编译成向量指令干扰测试环境
#ifdef __riscv_vector
__attribute__((target("arch=rv64imac_zicsr")))
void test_setup_except_function() {
    __sync_synchronize();
    80000e0c:	0330000f          	fence	rw,rw
    excpt.testing = true;
    80000e10:	00057797          	auipc	a5,0x57
    80000e14:	1f078793          	addi	a5,a5,496 # 80058000 <ecall_args>
    80000e18:	4705                	li	a4,1
    excpt.triggered = false;
    excpt.fault_inst = 0;
    80000e1a:	0407b423          	sd	zero,72(a5)
    excpt.testing = true;
    80000e1e:	00e79823          	sh	a4,16(a5)
    __sync_synchronize();
    80000e22:	0330000f          	fence	rw,rw
    DEBUG("setting up exception test");
}
    80000e26:	8082                	ret

0000000080000e28 <set_prev_priv>:
    return priv == PRIV_VU || priv == PRIV_HU;
}

void set_prev_priv(int priv){

    switch(curr_priv){
    80000e28:	0003d797          	auipc	a5,0x3d
    80000e2c:	ffc7a783          	lw	a5,-4(a5) # 8003de24 <curr_priv>
    80000e30:	470d                	li	a4,3
    80000e32:	06e78963          	beq	a5,a4,80000ea4 <set_prev_priv+0x7c>
    80000e36:	4711                	li	a4,4
    80000e38:	04e78163          	beq	a5,a4,80000e7a <set_prev_priv+0x52>
    80000e3c:	4709                	li	a4,2
    80000e3e:	08e78863          	beq	a5,a4,80000ece <set_prev_priv+0xa6>
void set_prev_priv(int priv){
    80000e42:	1141                	addi	sp,sp,-16
        case PRIV_VS: {
            uint64_t temp = CSRR(sstatus);
            CSRC(sstatus, 0x1ULL << 8);
        }
        break;
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000e44:	85aa                	mv	a1,a0
    80000e46:	0002d617          	auipc	a2,0x2d
    80000e4a:	f5260613          	addi	a2,a2,-174 # 8002dd98 <__func__.6>
    80000e4e:	0002f517          	auipc	a0,0x2f
    80000e52:	37a50513          	addi	a0,a0,890 # 800301c8 <__func__.0+0x4d8>
void set_prev_priv(int priv){
    80000e56:	e406                	sd	ra,8(sp)
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000e58:	2342c0ef          	jal	8002d08c <printf>
    80000e5c:	04b00613          	li	a2,75
    80000e60:	0002d597          	auipc	a1,0x2d
    80000e64:	f3858593          	addi	a1,a1,-200 # 8002dd98 <__func__.6>
    80000e68:	0002f517          	auipc	a0,0x2f
    80000e6c:	2f850513          	addi	a0,a0,760 # 80030160 <__func__.0+0x470>
    80000e70:	21c2c0ef          	jal	8002d08c <printf>
    80000e74:	4501                	li	a0,0
    80000e76:	5cd2b0ef          	jal	8002cc42 <exit>
            uint64_t temp = CSRR(mstatus);
    80000e7a:	30002773          	csrr	a4,mstatus
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000e7e:	fc0007b7          	lui	a5,0xfc000
    80000e82:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80000e84:	07b6                	slli	a5,a5,0xd
    80000e86:	7ff78793          	addi	a5,a5,2047
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000e8a:	ffe5069b          	addiw	a3,a0,-2
    80000e8e:	4605                	li	a2,1
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000e90:	8ff9                	and	a5,a5,a4
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000e92:	06d67363          	bgeu	a2,a3,80000ef8 <set_prev_priv+0xd0>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000e96:	e501                	bnez	a0,80000e9e <set_prev_priv+0x76>
    80000e98:	4705                	li	a4,1
    80000e9a:	171e                	slli	a4,a4,0x27
    80000e9c:	8fd9                	or	a5,a5,a4
            CSRW(mstatus, temp);
    80000e9e:	30079073          	csrw	mstatus,a5
        break;
    80000ea2:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000ea4:	100027f3          	csrr	a5,sstatus
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000ea8:	4705                	li	a4,1
    80000eaa:	ffe5069b          	addiw	a3,a0,-2
    80000eae:	02d77763          	bgeu	a4,a3,80000edc <set_prev_priv+0xb4>
            temp &= ~(0x1ULL << 8);
    80000eb2:	eff7f793          	andi	a5,a5,-257
            CSRW(sstatus, temp);
    80000eb6:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000eba:	600027f3          	csrr	a5,hstatus
            temp &= ~(0x3ULL << 7);
    80000ebe:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000ec2:	e119                	bnez	a0,80000ec8 <set_prev_priv+0xa0>
    80000ec4:	0807e793          	ori	a5,a5,128
            CSRW(CSR_HSTATUS, temp);
    80000ec8:	60079073          	csrw	hstatus,a5
        break;
    80000ecc:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000ece:	100027f3          	csrr	a5,sstatus
            CSRC(sstatus, 0x1ULL << 8);
    80000ed2:	10000793          	li	a5,256
    80000ed6:	1007b073          	csrc	sstatus,a5
        break;
    80000eda:	8082                	ret
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000edc:	1007e793          	ori	a5,a5,256
            CSRW(sstatus, temp);
    80000ee0:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000ee4:	600027f3          	csrr	a5,hstatus
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000ee8:	4709                	li	a4,2
            temp &= ~(0x3ULL << 7);
    80000eea:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000eee:	fce51de3          	bne	a0,a4,80000ec8 <set_prev_priv+0xa0>
    80000ef2:	1007e793          	ori	a5,a5,256
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000ef6:	b7f9                	j	80000ec4 <set_prev_priv+0x9c>
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000ef8:	6705                	lui	a4,0x1
    80000efa:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000efe:	4689                	li	a3,2
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000f00:	8fd9                	or	a5,a5,a4
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000f02:	f8d50be3          	beq	a0,a3,80000e98 <set_prev_priv+0x70>
    80000f06:	bf61                	j	80000e9e <set_prev_priv+0x76>

0000000080000f08 <goto_priv>:
    curr_priv = priv;

}


void goto_priv(int target_priv){
    80000f08:	1101                	addi	sp,sp,-32
    80000f0a:	e822                	sd	s0,16(sp)
    80000f0c:	ec06                	sd	ra,24(sp)
    80000f0e:	e426                	sd	s1,8(sp)

    static bool on_going = false;

    DEBUG("goto_priv: real = %s, target = %s, curr = %s",  priv_strs[real_priv], priv_strs[target_priv], priv_strs[curr_priv]);

    if(is_user(target_priv) && is_user(curr_priv)) {
    80000f10:	4785                	li	a5,1
void goto_priv(int target_priv){
    80000f12:	842a                	mv	s0,a0
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000f14:	02a7f963          	bgeu	a5,a0,80000f46 <goto_priv+0x3e>
        goto_priv(PRIV_M);
    }

    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000f18:	0003d797          	auipc	a5,0x3d
    80000f1c:	f087a783          	lw	a5,-248(a5) # 8003de20 <real_priv>
    80000f20:	0003d497          	auipc	s1,0x3d
    80000f24:	f0448493          	addi	s1,s1,-252 # 8003de24 <curr_priv>
    80000f28:	00a78963          	beq	a5,a0,80000f3a <goto_priv+0x32>
    80000f2c:	4791                	li	a5,4
    80000f2e:	0003d497          	auipc	s1,0x3d
    80000f32:	ef648493          	addi	s1,s1,-266 # 8003de24 <curr_priv>
    80000f36:	06a7d363          	bge	a5,a0,80000f9c <goto_priv+0x94>
        if(on_going)
            VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        curr_priv = target_priv;
    80000f3a:	c080                	sw	s0,0(s1)
        VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        lower_priv(target_priv);
    }

}
    80000f3c:	60e2                	ld	ra,24(sp)
    80000f3e:	6442                	ld	s0,16(sp)
    80000f40:	64a2                	ld	s1,8(sp)
    80000f42:	6105                	addi	sp,sp,32
    80000f44:	8082                	ret
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000f46:	0003d717          	auipc	a4,0x3d
    80000f4a:	ede72703          	lw	a4,-290(a4) # 8003de24 <curr_priv>
    80000f4e:	0003d497          	auipc	s1,0x3d
    80000f52:	ed648493          	addi	s1,s1,-298 # 8003de24 <curr_priv>
    80000f56:	0ae7f863          	bgeu	a5,a4,80001006 <goto_priv+0xfe>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000f5a:	0003d797          	auipc	a5,0x3d
    80000f5e:	ec67a783          	lw	a5,-314(a5) # 8003de20 <real_priv>
    80000f62:	fca78ce3          	beq	a5,a0,80000f3a <goto_priv+0x32>
    if(curr_priv == PRIV_VS && priv == PRIV_HU){
    80000f66:	4789                	li	a5,2
    80000f68:	06f71063          	bne	a4,a5,80000fc8 <goto_priv+0xc0>
    80000f6c:	4785                	li	a5,1
    80000f6e:	04f41d63          	bne	s0,a5,80000fc8 <goto_priv+0xc0>
        ERROR("trying to go from vs to hu");
    80000f72:	0002f517          	auipc	a0,0x2f
    80000f76:	28650513          	addi	a0,a0,646 # 800301f8 <__func__.0+0x508>
    80000f7a:	1122c0ef          	jal	8002d08c <printf>
    80000f7e:	05a00613          	li	a2,90
        ERROR("cant lower priv from u");
    80000f82:	0002d597          	auipc	a1,0x2d
    80000f86:	e2658593          	addi	a1,a1,-474 # 8002dda8 <__func__.4>
    80000f8a:	0002f517          	auipc	a0,0x2f
    80000f8e:	1d650513          	addi	a0,a0,470 # 80030160 <__func__.0+0x470>
    80000f92:	0fa2c0ef          	jal	8002d08c <printf>
    80000f96:	4501                	li	a0,0
    80000f98:	4ab2b0ef          	jal	8002cc42 <exit>
    if(target_priv > curr_priv){
    80000f9c:	0003d797          	auipc	a5,0x3d
    80000fa0:	e887a783          	lw	a5,-376(a5) # 8003de24 <curr_priv>
    80000fa4:	02a7f063          	bgeu	a5,a0,80000fc4 <goto_priv+0xbc>
    ecall_args[0] = a0;
    80000fa8:	00057797          	auipc	a5,0x57
    80000fac:	05878793          	addi	a5,a5,88 # 80058000 <ecall_args>
    80000fb0:	4705                	li	a4,1
        ecall(ECALL_GOTO_PRIV, target_priv);
    80000fb2:	e780                	sd	s0,8(a5)
    ecall_args[0] = a0;
    80000fb4:	e398                	sd	a4,0(a5)
    asm volatile("ecall" ::: "memory");
    80000fb6:	00000073          	ecall
}
    80000fba:	60e2                	ld	ra,24(sp)
    80000fbc:	6442                	ld	s0,16(sp)
    80000fbe:	64a2                	ld	s1,8(sp)
    80000fc0:	6105                	addi	sp,sp,32
    80000fc2:	8082                	ret
    if(priv == curr_priv) 
    80000fc4:	f6f50ce3          	beq	a0,a5,80000f3c <goto_priv+0x34>
    set_prev_priv(priv);
    80000fc8:	8522                	mv	a0,s0
    80000fca:	e5fff0ef          	jal	80000e28 <set_prev_priv>
    if(curr_priv == PRIV_M) {
    80000fce:	0003d797          	auipc	a5,0x3d
    80000fd2:	e567a783          	lw	a5,-426(a5) # 8003de24 <curr_priv>
    real_priv = priv;
    80000fd6:	0003d717          	auipc	a4,0x3d
    80000fda:	e4872523          	sw	s0,-438(a4) # 8003de20 <real_priv>
    if(curr_priv == PRIV_M) {
    80000fde:	4711                	li	a4,4
    80000fe0:	04e78e63          	beq	a5,a4,8000103c <goto_priv+0x134>
    } else if(curr_priv == PRIV_VS || curr_priv == PRIV_HS){
    80000fe4:	37f9                	addiw	a5,a5,-2
    80000fe6:	4705                	li	a4,1
    80000fe8:	04f76163          	bltu	a4,a5,8000102a <goto_priv+0x122>
        asm volatile(
    80000fec:	00000297          	auipc	t0,0x0
    80000ff0:	01028293          	addi	t0,t0,16 # 80000ffc <goto_priv+0xf4>
    80000ff4:	14129073          	csrw	sepc,t0
    80000ff8:	10200073          	sret
    curr_priv = priv;
    80000ffc:	0003d797          	auipc	a5,0x3d
    80001000:	e287a423          	sw	s0,-472(a5) # 8003de24 <curr_priv>
    80001004:	bf25                	j	80000f3c <goto_priv+0x34>
        goto_priv(PRIV_M);
    80001006:	4511                	li	a0,4
    80001008:	f01ff0ef          	jal	80000f08 <goto_priv>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    8000100c:	0003d797          	auipc	a5,0x3d
    80001010:	e147a783          	lw	a5,-492(a5) # 8003de20 <real_priv>
    80001014:	f28783e3          	beq	a5,s0,80000f3a <goto_priv+0x32>
    if(target_priv > curr_priv){
    80001018:	0003d717          	auipc	a4,0x3d
    8000101c:	e0c72703          	lw	a4,-500(a4) # 8003de24 <curr_priv>
    80001020:	f88764e3          	bltu	a4,s0,80000fa8 <goto_priv+0xa0>
    if(priv == curr_priv) 
    80001024:	f0870ce3          	beq	a4,s0,80000f3c <goto_priv+0x34>
    80001028:	bf3d                	j	80000f66 <goto_priv+0x5e>
        ERROR("cant lower priv from u");
    8000102a:	0002f517          	auipc	a0,0x2f
    8000102e:	1fe50513          	addi	a0,a0,510 # 80030228 <__func__.0+0x538>
    80001032:	05a2c0ef          	jal	8002d08c <printf>
    80001036:	07200613          	li	a2,114
    8000103a:	b7a1                	j	80000f82 <goto_priv+0x7a>
        asm volatile(
    8000103c:	00000297          	auipc	t0,0x0
    80001040:	01028293          	addi	t0,t0,16 # 8000104c <goto_priv+0x144>
    80001044:	34129073          	csrw	mepc,t0
    80001048:	30200073          	mret
    8000104c:	bf45                	j	80000ffc <goto_priv+0xf4>

000000008000104e <excpt_info>:
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    else return epc + 2;
}

void excpt_info(){
    const char* x = excpt.triggered ? "是" : "否";
    8000104e:	00057797          	auipc	a5,0x57
    80001052:	fc37c783          	lbu	a5,-61(a5) # 80058011 <excpt+0x1>
void excpt_info(){
    80001056:	1141                	addi	sp,sp,-16
    80001058:	e406                	sd	ra,8(sp)
    const char* x = excpt.triggered ? "是" : "否";
    8000105a:	0002f597          	auipc	a1,0x2f
    8000105e:	1f658593          	addi	a1,a1,502 # 80030250 <__func__.0+0x560>
    80001062:	e789                	bnez	a5,8000106c <excpt_info+0x1e>
    80001064:	0002f597          	auipc	a1,0x2f
    80001068:	1f458593          	addi	a1,a1,500 # 80030258 <__func__.0+0x568>
    printf("异常触发：%s\n",x);
    8000106c:	0002f517          	auipc	a0,0x2f
    80001070:	1f450513          	addi	a0,a0,500 # 80030260 <__func__.0+0x570>
    80001074:	0182c0ef          	jal	8002d08c <printf>
    printf("异常原因：%d\n",excpt.cause);
}
    80001078:	60a2                	ld	ra,8(sp)
    printf("异常原因：%d\n",excpt.cause);
    8000107a:	00057597          	auipc	a1,0x57
    8000107e:	f9e5b583          	ld	a1,-98(a1) # 80058018 <excpt+0x8>
    80001082:	0002f517          	auipc	a0,0x2f
    80001086:	1f650513          	addi	a0,a0,502 # 80030278 <__func__.0+0x588>
}
    8000108a:	0141                	addi	sp,sp,16
    printf("异常原因：%d\n",excpt.cause);
    8000108c:	0002c06f          	j	8002d08c <printf>

0000000080001090 <mhandler>:
        break;\
    }\
    return from_priv;\
}

uint64_t mhandler(){
    80001090:	715d                	addi	sp,sp,-80
    80001092:	f44e                	sd	s3,40(sp)
    80001094:	e486                	sd	ra,72(sp)
    80001096:	e0a2                	sd	s0,64(sp)
    80001098:	fc26                	sd	s1,56(sp)
    8000109a:	f84a                	sd	s2,48(sp)
    8000109c:	f052                	sd	s4,32(sp)
    8000109e:	ec56                	sd	s5,24(sp)
    800010a0:	e85a                	sd	s6,16(sp)
    800010a2:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_M;
    800010a4:	0003d997          	auipc	s3,0x3d
    800010a8:	d7c98993          	addi	s3,s3,-644 # 8003de20 <real_priv>
    800010ac:	4791                	li	a5,4
    800010ae:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(mcause);
    800010b2:	342024f3          	csrr	s1,mcause
    uint64_t epc = CSRR(mepc);
    800010b6:	34102973          	csrr	s2,mepc
    800010ba:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(mtval);
    800010bc:	34302bf3          	csrr	s7,mtval
    uint64_t tval2 = CSRR(CSR_MTVAL2);
    800010c0:	34b02af3          	csrr	s5,0x34b
    uint64_t tinst= CSRR(CSR_MTINST);
    800010c4:	34a02b73          	csrr	s6,0x34a
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    800010c8:	478d                	li	a5,3
    800010ca:	ff848713          	addi	a4,s1,-8
    800010ce:	16e7e663          	bltu	a5,a4,8000123a <mhandler+0x1aa>
    DEBUG("mtinst = 0x%lx", tinst);
    DEBUG("mpp = 0x%lx", (CSRR(mstatus) >> 11) & 0x3);
    DEBUG("mpv = 0x%lx", (CSRR(mstatus) >> 39) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
    800010d2:	00057417          	auipc	s0,0x57
    800010d6:	f2e40413          	addi	s0,s0,-210 # 80058000 <ecall_args>
    800010da:	6018                	ld	a4,0(s0)
    800010dc:	4785                	li	a5,1
    800010de:	20f70463          	beq	a4,a5,800012e6 <mhandler+0x256>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    800010e2:	00057797          	auipc	a5,0x57
    800010e6:	f2e7c783          	lbu	a5,-210(a5) # 80058010 <excpt>
    800010ea:	c3cd                	beqz	a5,8000118c <mhandler+0xfc>

    if(cause & (1ULL << 63)){
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    }

    excpt.triggered = true;
    800010ec:	4705                	li	a4,1
    excpt.priv = PRIV_M;
    800010ee:	4791                	li	a5,4
    excpt.cause = cause;
    800010f0:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    800010f2:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    800010f6:	03743423          	sd	s7,40(s0)
    excpt.tinst = tinst;
    800010fa:	03643823          	sd	s6,48(s0)
    excpt.tval2 = tval2;
    800010fe:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80001102:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_M;
    80001106:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    80001108:	300027f3          	csrr	a5,mstatus
    8000110c:	9399                	srli	a5,a5,0x26
    8000110e:	8ff9                	and	a5,a5,a4
    80001110:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(mstatus) >> 39) & 0x1);
    80001114:	300027f3          	csrr	a5,mstatus
    80001118:	939d                	srli	a5,a5,0x27
    8000111a:	8ff9                	and	a5,a5,a4
    8000111c:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80001120:	00057797          	auipc	a5,0x57
    80001124:	ee078823          	sb	zero,-272(a5) # 80058010 <excpt>
    if(is_inst_fault(cause)){
    80001128:	47d1                	li	a5,20
    8000112a:	0097ed63          	bltu	a5,s1,80001144 <mhandler+0xb4>
    8000112e:	001017b7          	lui	a5,0x101
    80001132:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80001134:	0097d7b3          	srl	a5,a5,s1
    80001138:	8ff9                	and	a5,a5,a4
    8000113a:	c789                	beqz	a5,80001144 <mhandler+0xb4>
        if(excpt.fault_inst != 0){ 
    8000113c:	04843a03          	ld	s4,72(s0)
    80001140:	100a0e63          	beqz	s4,8000125c <mhandler+0x1cc>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80001144:	0003d797          	auipc	a5,0x3d
    80001148:	ce07a783          	lw	a5,-800(a5) # 8003de24 <curr_priv>
    unsigned temp_priv = real_priv;
    8000114c:	0003d517          	auipc	a0,0x3d
    80001150:	cd452503          	lw	a0,-812(a0) # 8003de20 <real_priv>
    excpt.fault_inst = 0;
    80001154:	00057717          	auipc	a4,0x57
    80001158:	ee073a23          	sd	zero,-268(a4) # 80058048 <excpt+0x38>
    real_priv = curr_priv;
    8000115c:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001160:	478d                	li	a5,3
    80001162:	04f50a63          	beq	a0,a5,800011b6 <mhandler+0x126>
    80001166:	4791                	li	a5,4
    80001168:	10f50c63          	beq	a0,a5,80001280 <mhandler+0x1f0>
    8000116c:	4789                	li	a5,2
    8000116e:	06f50263          	beq	a0,a5,800011d2 <mhandler+0x142>
}
    80001172:	60a6                	ld	ra,72(sp)
    80001174:	6406                	ld	s0,64(sp)
    80001176:	1502                	slli	a0,a0,0x20
    80001178:	74e2                	ld	s1,56(sp)
    8000117a:	7942                	ld	s2,48(sp)
    8000117c:	79a2                	ld	s3,40(sp)
    8000117e:	7a02                	ld	s4,32(sp)
    80001180:	6ae2                	ld	s5,24(sp)
    80001182:	6b42                	ld	s6,16(sp)
    80001184:	6ba2                	ld	s7,8(sp)
    80001186:	9101                	srli	a0,a0,0x20
    80001188:	6161                	addi	sp,sp,80
    8000118a:	8082                	ret
        ERROR("untested exception!");
    8000118c:	0002f517          	auipc	a0,0x2f
    80001190:	10450513          	addi	a0,a0,260 # 80030290 <__func__.0+0x5a0>
    80001194:	6f92b0ef          	jal	8002d08c <printf>
    80001198:	11200613          	li	a2,274
            ERROR("instruction fault without return address");
    8000119c:	0002d597          	auipc	a1,0x2d
    800011a0:	c1c58593          	addi	a1,a1,-996 # 8002ddb8 <__func__.3>
    800011a4:	0002f517          	auipc	a0,0x2f
    800011a8:	fbc50513          	addi	a0,a0,-68 # 80030160 <__func__.0+0x470>
    800011ac:	6e12b0ef          	jal	8002d08c <printf>
    800011b0:	4501                	li	a0,0
    800011b2:	2912b0ef          	jal	8002cc42 <exit>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800011b6:	600026f3          	csrr	a3,hstatus
    800011ba:	0003d797          	auipc	a5,0x3d
    800011be:	c6a7a783          	lw	a5,-918(a5) # 8003de24 <curr_priv>
    800011c2:	0806e713          	ori	a4,a3,128
    800011c6:	9bf5                	andi	a5,a5,-3
    800011c8:	c399                	beqz	a5,800011ce <mhandler+0x13e>
    800011ca:	f7f6f713          	andi	a4,a3,-129
    800011ce:	60071073          	csrw	hstatus,a4
    800011d2:	100027f3          	csrr	a5,sstatus
    800011d6:	0003d717          	auipc	a4,0x3d
    800011da:	c4e72703          	lw	a4,-946(a4) # 8003de24 <curr_priv>
    800011de:	4685                	li	a3,1
    800011e0:	edf7f793          	andi	a5,a5,-289
    800011e4:	3779                	addiw	a4,a4,-2
    800011e6:	08e6f463          	bgeu	a3,a4,8000126e <mhandler+0x1de>
    800011ea:	10079073          	csrw	sstatus,a5
    800011ee:	744027f3          	csrr	a5,0x744
    800011f2:	8ba1                	andi	a5,a5,8
    800011f4:	c385                	beqz	a5,80001214 <mhandler+0x184>
    800011f6:	f604cee3          	bltz	s1,80001172 <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011fa:	000a5783          	lhu	a5,0(s4)
    800011fe:	468d                	li	a3,3
    else return epc + 2;
    80001200:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001204:	8ff5                	and	a5,a5,a3
    80001206:	00d79463          	bne	a5,a3,8000120e <mhandler+0x17e>
    8000120a:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000120e:	14171073          	csrw	sepc,a4
    80001212:	b785                	j	80001172 <mhandler+0xe2>
    80001214:	742027f3          	csrr	a5,0x742
    80001218:	f407cde3          	bltz	a5,80001172 <mhandler+0xe2>
    8000121c:	74102773          	csrr	a4,0x741
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001220:	00075783          	lhu	a5,0(a4)
    80001224:	460d                	li	a2,3
    else return epc + 2;
    80001226:	00270693          	addi	a3,a4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000122a:	8ff1                	and	a5,a5,a2
    8000122c:	00c79463          	bne	a5,a2,80001234 <mhandler+0x1a4>
    80001230:	00470693          	addi	a3,a4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001234:	74169073          	csrw	0x741,a3
    80001238:	bf2d                	j	80001172 <mhandler+0xe2>
    } else if(!excpt.testing){
    8000123a:	00057797          	auipc	a5,0x57
    8000123e:	dd67c783          	lbu	a5,-554(a5) # 80058010 <excpt>
    80001242:	d7a9                	beqz	a5,8000118c <mhandler+0xfc>
    if(cause & (1ULL << 63)){
    80001244:	0004d763          	bgez	s1,80001252 <mhandler+0x1c2>
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    80001248:	4785                	li	a5,1
    8000124a:	009797b3          	sll	a5,a5,s1
    8000124e:	3447b073          	csrc	mip,a5
    80001252:	00057417          	auipc	s0,0x57
    80001256:	dae40413          	addi	s0,s0,-594 # 80058000 <ecall_args>
    8000125a:	bd49                	j	800010ec <mhandler+0x5c>
            ERROR("instruction fault without return address");
    8000125c:	0002f517          	auipc	a0,0x2f
    80001260:	05c50513          	addi	a0,a0,92 # 800302b8 <__func__.0+0x5c8>
    80001264:	6292b0ef          	jal	8002d08c <printf>
    80001268:	12800613          	li	a2,296
    8000126c:	bf05                	j	8000119c <mhandler+0x10c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000126e:	1007e793          	ori	a5,a5,256
    80001272:	10079073          	csrw	sstatus,a5
    80001276:	744027f3          	csrr	a5,0x744
    8000127a:	8ba1                	andi	a5,a5,8
    8000127c:	ffad                	bnez	a5,800011f6 <mhandler+0x166>
    8000127e:	bf59                	j	80001214 <mhandler+0x184>
    80001280:	30002773          	csrr	a4,mstatus
    80001284:	fc0007b7          	lui	a5,0xfc000
    80001288:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    8000128a:	0003d697          	auipc	a3,0x3d
    8000128e:	b9a6a683          	lw	a3,-1126(a3) # 8003de24 <curr_priv>
    80001292:	07b6                	slli	a5,a5,0xd
    80001294:	77f78793          	addi	a5,a5,1919
    80001298:	8ff9                	and	a5,a5,a4
    8000129a:	04a68a63          	beq	a3,a0,800012ee <mhandler+0x25e>
    8000129e:	ffe6871b          	addiw	a4,a3,-2
    800012a2:	4605                	li	a2,1
    800012a4:	04e66a63          	bltu	a2,a4,800012f8 <mhandler+0x268>
    800012a8:	6705                	lui	a4,0x1
    800012aa:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    800012ae:	4609                	li	a2,2
    800012b0:	8fd9                	or	a5,a5,a4
    800012b2:	00c69563          	bne	a3,a2,800012bc <mhandler+0x22c>
    800012b6:	4705                	li	a4,1
    800012b8:	171e                	slli	a4,a4,0x27
    800012ba:	8fd9                	or	a5,a5,a4
    800012bc:	30079073          	csrw	mstatus,a5
    800012c0:	744027f3          	csrr	a5,0x744
    800012c4:	8ba1                	andi	a5,a5,8
    800012c6:	d7b9                	beqz	a5,80001214 <mhandler+0x184>
    800012c8:	ea04c5e3          	bltz	s1,80001172 <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800012cc:	000a5783          	lhu	a5,0(s4)
    800012d0:	468d                	li	a3,3
    else return epc + 2;
    800012d2:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800012d6:	8ff5                	and	a5,a5,a3
    800012d8:	00d79463          	bne	a5,a3,800012e0 <mhandler+0x250>
    800012dc:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800012e0:	34171073          	csrw	mepc,a4
    800012e4:	b579                	j	80001172 <mhandler+0xe2>
        goto_priv(ecall_args[1]); 
    800012e6:	4408                	lw	a0,8(s0)
    800012e8:	c21ff0ef          	jal	80000f08 <goto_priv>
    if(cause & (1ULL << 63)){
    800012ec:	b501                	j	800010ec <mhandler+0x5c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800012ee:	6709                	lui	a4,0x2
    800012f0:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    800012f4:	8fd9                	or	a5,a5,a4
    800012f6:	b7d9                	j	800012bc <mhandler+0x22c>
    800012f8:	dedd                	beqz	a3,800012b6 <mhandler+0x226>
    800012fa:	b7c9                	j	800012bc <mhandler+0x22c>

00000000800012fc <hshandler>:
uint64_t hshandler(){
    800012fc:	715d                	addi	sp,sp,-80
    800012fe:	f44e                	sd	s3,40(sp)
    80001300:	e486                	sd	ra,72(sp)
    80001302:	e0a2                	sd	s0,64(sp)
    80001304:	fc26                	sd	s1,56(sp)
    80001306:	f84a                	sd	s2,48(sp)
    80001308:	f052                	sd	s4,32(sp)
    8000130a:	ec56                	sd	s5,24(sp)
    8000130c:	e85a                	sd	s6,16(sp)
    8000130e:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_HS;
    80001310:	0003d997          	auipc	s3,0x3d
    80001314:	b1098993          	addi	s3,s3,-1264 # 8003de20 <real_priv>
    80001318:	478d                	li	a5,3
    8000131a:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(scause);
    8000131e:	142024f3          	csrr	s1,scause
    uint64_t epc = CSRR(sepc);
    80001322:	14102973          	csrr	s2,sepc
    80001326:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(stval);
    80001328:	14302bf3          	csrr	s7,stval
    uint64_t htval = CSRR(CSR_HTVAL);
    8000132c:	64302af3          	csrr	s5,htval
    uint64_t htinst = CSRR(CSR_HTINST);
    80001330:	64a02b73          	csrr	s6,htinst
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80001334:	ff848713          	addi	a4,s1,-8
    80001338:	02e7ef63          	bltu	a5,a4,80001376 <hshandler+0x7a>
    DEBUG("spv = 0x%lx", (CSRR(CSR_HSTATUS) >> 7) & 0x1);
    DEBUG("spvp = 0x%lx", (CSRR(CSR_HSTATUS) >> 8) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);


    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){ 
    8000133c:	00057417          	auipc	s0,0x57
    80001340:	cc440413          	addi	s0,s0,-828 # 80058000 <ecall_args>
    80001344:	6018                	ld	a4,0(s0)
    80001346:	4785                	li	a5,1
    80001348:	14f70563          	beq	a4,a5,80001492 <hshandler+0x196>
        goto_priv(ecall_args[1]); 
    } else if(is_ecall(cause)) {
        ERROR("unknown ecall"); 
    8000134c:	0002f517          	auipc	a0,0x2f
    80001350:	fac50513          	addi	a0,a0,-84 # 800302f8 <__func__.0+0x608>
    80001354:	5392b0ef          	jal	8002d08c <printf>
    80001358:	14800613          	li	a2,328
    } else if(!excpt.testing){
        ERROR("untested exception!");
    8000135c:	0002d597          	auipc	a1,0x2d
    80001360:	a6c58593          	addi	a1,a1,-1428 # 8002ddc8 <__func__.2>
    80001364:	0002f517          	auipc	a0,0x2f
    80001368:	dfc50513          	addi	a0,a0,-516 # 80030160 <__func__.0+0x470>
    8000136c:	5212b0ef          	jal	8002d08c <printf>
    80001370:	4501                	li	a0,0
    80001372:	0d12b0ef          	jal	8002cc42 <exit>
    } else if(!excpt.testing){
    80001376:	00057797          	auipc	a5,0x57
    8000137a:	c9a7c783          	lbu	a5,-870(a5) # 80058010 <excpt>
    8000137e:	10078163          	beqz	a5,80001480 <hshandler+0x184>
    }
    
    if(cause & (1ULL << 63)){
    80001382:	0004d963          	bgez	s1,80001394 <hshandler+0x98>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    80001386:	4785                	li	a5,1
    80001388:	009797b3          	sll	a5,a5,s1
    8000138c:	1447b073          	csrc	sip,a5
        //CSRC(CSR_HVIP, 1ULL << (cause &  ~(1ULL << 63)));
        CSRC(CSR_HIP, 1ULL << (cause &  ~(1ULL << 63)));
    80001390:	6447b073          	csrc	hip,a5
    80001394:	00057417          	auipc	s0,0x57
    80001398:	c6c40413          	addi	s0,s0,-916 # 80058000 <ecall_args>
    }

    excpt.triggered = true;
    8000139c:	4705                	li	a4,1
    excpt.priv = PRIV_HS;
    8000139e:	478d                	li	a5,3
    excpt.cause = cause;
    800013a0:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    800013a2:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    800013a6:	03743423          	sd	s7,40(s0)
    excpt.tinst = htinst;
    800013aa:	03643823          	sd	s6,48(s0)
    excpt.tval2 = htval;
    800013ae:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    800013b2:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_HS;
    800013b6:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);
    800013b8:	600027f3          	csrr	a5,hstatus
    800013bc:	8399                	srli	a5,a5,0x6
    800013be:	8ff9                	and	a5,a5,a4
    800013c0:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(CSR_HSTATUS) >> 7) & 0x1);
    800013c4:	600027f3          	csrr	a5,hstatus
    800013c8:	839d                	srli	a5,a5,0x7
    800013ca:	8ff9                	and	a5,a5,a4
    800013cc:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    800013d0:	00057797          	auipc	a5,0x57
    800013d4:	c4078023          	sb	zero,-960(a5) # 80058010 <excpt>
    if(is_inst_fault(cause)){
    800013d8:	47d1                	li	a5,20
    800013da:	0097ed63          	bltu	a5,s1,800013f4 <hshandler+0xf8>
    800013de:	001017b7          	lui	a5,0x101
    800013e2:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    800013e4:	0097d7b3          	srl	a5,a5,s1
    800013e8:	8ff9                	and	a5,a5,a4
    800013ea:	c789                	beqz	a5,800013f4 <hshandler+0xf8>
        if(excpt.fault_inst != 0){ 
    800013ec:	04843a03          	ld	s4,72(s0)
    800013f0:	0c0a0663          	beqz	s4,800014bc <hshandler+0x1c0>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    800013f4:	0003d797          	auipc	a5,0x3d
    800013f8:	a307a783          	lw	a5,-1488(a5) # 8003de24 <curr_priv>
    unsigned temp_priv = real_priv;
    800013fc:	0003d517          	auipc	a0,0x3d
    80001400:	a2452503          	lw	a0,-1500(a0) # 8003de20 <real_priv>
    excpt.fault_inst = 0;
    80001404:	00057717          	auipc	a4,0x57
    80001408:	c4073223          	sd	zero,-956(a4) # 80058048 <excpt+0x38>
    real_priv = curr_priv;
    8000140c:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001410:	478d                	li	a5,3
    80001412:	12f50163          	beq	a0,a5,80001534 <hshandler+0x238>
    80001416:	4791                	li	a5,4
    80001418:	0af50b63          	beq	a0,a5,800014ce <hshandler+0x1d2>
    8000141c:	4789                	li	a5,2
    8000141e:	04f51463          	bne	a0,a5,80001466 <hshandler+0x16a>
    80001422:	100027f3          	csrr	a5,sstatus
    80001426:	0003d717          	auipc	a4,0x3d
    8000142a:	9fe72703          	lw	a4,-1538(a4) # 8003de24 <curr_priv>
    8000142e:	4685                	li	a3,1
    80001430:	edf7f793          	andi	a5,a5,-289
    80001434:	3779                	addiw	a4,a4,-2
    80001436:	00e6e463          	bltu	a3,a4,8000143e <hshandler+0x142>
    8000143a:	1007e793          	ori	a5,a5,256
    8000143e:	10079073          	csrw	sstatus,a5
    80001442:	744027f3          	csrr	a5,0x744
    80001446:	8ba1                	andi	a5,a5,8
    80001448:	cba9                	beqz	a5,8000149a <hshandler+0x19e>
    8000144a:	0004ce63          	bltz	s1,80001466 <hshandler+0x16a>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000144e:	000a5783          	lhu	a5,0(s4)
    80001452:	468d                	li	a3,3
    else return epc + 2;
    80001454:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001458:	8ff5                	and	a5,a5,a3
    8000145a:	00d79463          	bne	a5,a3,80001462 <hshandler+0x166>
    8000145e:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001462:	14171073          	csrw	sepc,a4
}
    80001466:	60a6                	ld	ra,72(sp)
    80001468:	6406                	ld	s0,64(sp)
    8000146a:	1502                	slli	a0,a0,0x20
    8000146c:	74e2                	ld	s1,56(sp)
    8000146e:	7942                	ld	s2,48(sp)
    80001470:	79a2                	ld	s3,40(sp)
    80001472:	7a02                	ld	s4,32(sp)
    80001474:	6ae2                	ld	s5,24(sp)
    80001476:	6b42                	ld	s6,16(sp)
    80001478:	6ba2                	ld	s7,8(sp)
    8000147a:	9101                	srli	a0,a0,0x20
    8000147c:	6161                	addi	sp,sp,80
    8000147e:	8082                	ret
        ERROR("untested exception!");
    80001480:	0002f517          	auipc	a0,0x2f
    80001484:	e1050513          	addi	a0,a0,-496 # 80030290 <__func__.0+0x5a0>
    80001488:	4052b0ef          	jal	8002d08c <printf>
    8000148c:	14a00613          	li	a2,330
    80001490:	b5f1                	j	8000135c <hshandler+0x60>
        goto_priv(ecall_args[1]); 
    80001492:	4408                	lw	a0,8(s0)
    80001494:	a75ff0ef          	jal	80000f08 <goto_priv>
    if(cause & (1ULL << 63)){
    80001498:	b711                	j	8000139c <hshandler+0xa0>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000149a:	742027f3          	csrr	a5,0x742
    8000149e:	fc07c4e3          	bltz	a5,80001466 <hshandler+0x16a>
    800014a2:	74102773          	csrr	a4,0x741
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800014a6:	00075783          	lhu	a5,0(a4)
    800014aa:	460d                	li	a2,3
    else return epc + 2;
    800014ac:	00270693          	addi	a3,a4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800014b0:	8ff1                	and	a5,a5,a2
    800014b2:	0ac78663          	beq	a5,a2,8000155e <hshandler+0x262>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800014b6:	74169073          	csrw	0x741,a3
    800014ba:	b775                	j	80001466 <hshandler+0x16a>
            ERROR("instruction fault without return address");
    800014bc:	0002f517          	auipc	a0,0x2f
    800014c0:	dfc50513          	addi	a0,a0,-516 # 800302b8 <__func__.0+0x5c8>
    800014c4:	3c92b0ef          	jal	8002d08c <printf>
    800014c8:	16200613          	li	a2,354
    800014cc:	bd41                	j	8000135c <hshandler+0x60>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800014ce:	30002773          	csrr	a4,mstatus
    800014d2:	fc0007b7          	lui	a5,0xfc000
    800014d6:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    800014d8:	0003d697          	auipc	a3,0x3d
    800014dc:	94c6a683          	lw	a3,-1716(a3) # 8003de24 <curr_priv>
    800014e0:	07b6                	slli	a5,a5,0xd
    800014e2:	77f78793          	addi	a5,a5,1919
    800014e6:	8ff9                	and	a5,a5,a4
    800014e8:	06a68663          	beq	a3,a0,80001554 <hshandler+0x258>
    800014ec:	ffe6871b          	addiw	a4,a3,-2
    800014f0:	4605                	li	a2,1
    800014f2:	06e66963          	bltu	a2,a4,80001564 <hshandler+0x268>
    800014f6:	6705                	lui	a4,0x1
    800014f8:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    800014fc:	4609                	li	a2,2
    800014fe:	8fd9                	or	a5,a5,a4
    80001500:	00c69563          	bne	a3,a2,8000150a <hshandler+0x20e>
    80001504:	4705                	li	a4,1
    80001506:	171e                	slli	a4,a4,0x27
    80001508:	8fd9                	or	a5,a5,a4
    8000150a:	30079073          	csrw	mstatus,a5
    8000150e:	744027f3          	csrr	a5,0x744
    80001512:	8ba1                	andi	a5,a5,8
    80001514:	d3d9                	beqz	a5,8000149a <hshandler+0x19e>
    80001516:	f404c8e3          	bltz	s1,80001466 <hshandler+0x16a>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000151a:	000a5783          	lhu	a5,0(s4)
    8000151e:	468d                	li	a3,3
    else return epc + 2;
    80001520:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001524:	8ff5                	and	a5,a5,a3
    80001526:	00d79463          	bne	a5,a3,8000152e <hshandler+0x232>
    8000152a:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000152e:	34171073          	csrw	mepc,a4
    80001532:	bf15                	j	80001466 <hshandler+0x16a>
    80001534:	600026f3          	csrr	a3,hstatus
    80001538:	0003d797          	auipc	a5,0x3d
    8000153c:	8ec7a783          	lw	a5,-1812(a5) # 8003de24 <curr_priv>
    80001540:	0806e713          	ori	a4,a3,128
    80001544:	9bf5                	andi	a5,a5,-3
    80001546:	e781                	bnez	a5,8000154e <hshandler+0x252>
    80001548:	60071073          	csrw	hstatus,a4
    8000154c:	bdd9                	j	80001422 <hshandler+0x126>
    8000154e:	f7f6f713          	andi	a4,a3,-129
    80001552:	bfdd                	j	80001548 <hshandler+0x24c>
    80001554:	6709                	lui	a4,0x2
    80001556:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    8000155a:	8fd9                	or	a5,a5,a4
    8000155c:	b77d                	j	8000150a <hshandler+0x20e>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000155e:	00470693          	addi	a3,a4,4
    80001562:	bf91                	j	800014b6 <hshandler+0x1ba>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001564:	d2c5                	beqz	a3,80001504 <hshandler+0x208>
    80001566:	b755                	j	8000150a <hshandler+0x20e>

0000000080001568 <vshandler>:

uint64_t vshandler(){
    80001568:	7139                	addi	sp,sp,-64
    8000156a:	f426                	sd	s1,40(sp)
    8000156c:	fc06                	sd	ra,56(sp)
    8000156e:	f822                	sd	s0,48(sp)
    80001570:	f04a                	sd	s2,32(sp)
    80001572:	ec4e                	sd	s3,24(sp)
    80001574:	e852                	sd	s4,16(sp)
    80001576:	e456                	sd	s5,8(sp)

    real_priv = PRIV_VS;
    80001578:	0003d497          	auipc	s1,0x3d
    8000157c:	8a848493          	addi	s1,s1,-1880 # 8003de20 <real_priv>
    80001580:	4709                	li	a4,2
    80001582:	c098                	sw	a4,0(s1)

    uint64_t cause = CSRR(scause);
    80001584:	14202473          	csrr	s0,scause
    uint64_t epc = CSRR(sepc);
    80001588:	141029f3          	csrr	s3,sepc
    8000158c:	894e                	mv	s2,s3
    uint64_t tval = CSRR(stval);
    8000158e:	14302a73          	csrr	s4,stval
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80001592:	478d                	li	a5,3
    80001594:	ff840693          	addi	a3,s0,-8
    80001598:	04d7e663          	bltu	a5,a3,800015e4 <vshandler+0x7c>
    VERBOSE("virtual supervisor handler (scause = 0x%llx)", cause);
    DEBUG("scause = 0x%llx", cause);
    DEBUG("sepc = 0x%lx", epc);
    DEBUG("stval = 0x%lx", tval);
    
    if(is_ecall(cause) && ecall_args[0] ==ECALL_GOTO_PRIV ){
    8000159c:	00057a97          	auipc	s5,0x57
    800015a0:	a64a8a93          	addi	s5,s5,-1436 # 80058000 <ecall_args>
    800015a4:	000ab703          	ld	a4,0(s5)
    800015a8:	4785                	li	a5,1
    800015aa:	20f70363          	beq	a4,a5,800017b0 <vshandler+0x248>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    800015ae:	00057797          	auipc	a5,0x57
    800015b2:	a627c783          	lbu	a5,-1438(a5) # 80058010 <excpt>
    800015b6:	20079163          	bnez	a5,800017b8 <vshandler+0x250>
        ERROR("untested exception!");
    800015ba:	0002f517          	auipc	a0,0x2f
    800015be:	cd650513          	addi	a0,a0,-810 # 80030290 <__func__.0+0x5a0>
    800015c2:	2cb2b0ef          	jal	8002d08c <printf>
    800015c6:	17b00613          	li	a2,379
    excpt.epc = epc;
    excpt.tval = tval;
    excpt.testing = false;
    if(is_inst_fault(cause)){
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
        else ERROR("instruction fault without return address");
    800015ca:	0002d597          	auipc	a1,0x2d
    800015ce:	80e58593          	addi	a1,a1,-2034 # 8002ddd8 <__func__.1>
    800015d2:	0002f517          	auipc	a0,0x2f
    800015d6:	b8e50513          	addi	a0,a0,-1138 # 80030160 <__func__.0+0x470>
    800015da:	2b32b0ef          	jal	8002d08c <printf>
    800015de:	4501                	li	a0,0
    800015e0:	6622b0ef          	jal	8002cc42 <exit>
    } else if(!excpt.testing){
    800015e4:	00057697          	auipc	a3,0x57
    800015e8:	a2c6c683          	lbu	a3,-1492(a3) # 80058010 <excpt>
    800015ec:	00057797          	auipc	a5,0x57
    800015f0:	a1478793          	addi	a5,a5,-1516 # 80058000 <ecall_args>
    800015f4:	d2f9                	beqz	a3,800015ba <vshandler+0x52>
    if(cause & (1ULL << 63)){
    800015f6:	0e045a63          	bgez	s0,800016ea <vshandler+0x182>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    800015fa:	4685                	li	a3,1
    800015fc:	008696b3          	sll	a3,a3,s0
    80001600:	1446b073          	csrc	sip,a3
    excpt.testing = false;
    80001604:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    80001608:	5208a0d7          	vid.v	v1
    8000160c:	00057697          	auipc	a3,0x57
    80001610:	a0468693          	addi	a3,a3,-1532 # 80058010 <excpt>
    80001614:	020680a7          	vse8.v	v1,(a3)
    excpt.priv = PRIV_VS;
    80001618:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    8000161a:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    8000161c:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    80001620:	0347b423          	sd	s4,40(a5)
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80001624:	0003d797          	auipc	a5,0x3d
    80001628:	8007a783          	lw	a5,-2048(a5) # 8003de24 <curr_priv>
    unsigned temp_priv = real_priv;
    8000162c:	0003c517          	auipc	a0,0x3c
    80001630:	7f452503          	lw	a0,2036(a0) # 8003de20 <real_priv>
    excpt.fault_inst = 0;
    80001634:	00057717          	auipc	a4,0x57
    80001638:	a0073a23          	sd	zero,-1516(a4) # 80058048 <excpt+0x38>
    real_priv = curr_priv;
    8000163c:	c09c                	sw	a5,0(s1)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000163e:	478d                	li	a5,3
    80001640:	02f50363          	beq	a0,a5,80001666 <vshandler+0xfe>
    80001644:	4791                	li	a5,4
    80001646:	10f50263          	beq	a0,a5,8000174a <vshandler+0x1e2>
    8000164a:	4789                	li	a5,2
    8000164c:	02f50b63          	beq	a0,a5,80001682 <vshandler+0x11a>
}
    80001650:	70e2                	ld	ra,56(sp)
    80001652:	7442                	ld	s0,48(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001654:	1502                	slli	a0,a0,0x20
}
    80001656:	74a2                	ld	s1,40(sp)
    80001658:	7902                	ld	s2,32(sp)
    8000165a:	69e2                	ld	s3,24(sp)
    8000165c:	6a42                	ld	s4,16(sp)
    8000165e:	6aa2                	ld	s5,8(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001660:	9101                	srli	a0,a0,0x20
}
    80001662:	6121                	addi	sp,sp,64
    80001664:	8082                	ret
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001666:	600026f3          	csrr	a3,hstatus
    8000166a:	0003c797          	auipc	a5,0x3c
    8000166e:	7ba7a783          	lw	a5,1978(a5) # 8003de24 <curr_priv>
    80001672:	0806e713          	ori	a4,a3,128
    80001676:	9bf5                	andi	a5,a5,-3
    80001678:	c399                	beqz	a5,8000167e <vshandler+0x116>
    8000167a:	f7f6f713          	andi	a4,a3,-129
    8000167e:	60071073          	csrw	hstatus,a4
    80001682:	100027f3          	csrr	a5,sstatus
    80001686:	0003c717          	auipc	a4,0x3c
    8000168a:	79e72703          	lw	a4,1950(a4) # 8003de24 <curr_priv>
    8000168e:	4685                	li	a3,1
    80001690:	edf7f793          	andi	a5,a5,-289
    80001694:	3779                	addiw	a4,a4,-2
    80001696:	0ae6f163          	bgeu	a3,a4,80001738 <vshandler+0x1d0>
    8000169a:	10079073          	csrw	sstatus,a5
    8000169e:	744027f3          	csrr	a5,0x744
    800016a2:	8ba1                	andi	a5,a5,8
    800016a4:	c385                	beqz	a5,800016c4 <vshandler+0x15c>
    800016a6:	fa0445e3          	bltz	s0,80001650 <vshandler+0xe8>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800016aa:	00095783          	lhu	a5,0(s2)
    800016ae:	468d                	li	a3,3
    else return epc + 2;
    800016b0:	00290713          	addi	a4,s2,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800016b4:	8ff5                	and	a5,a5,a3
    800016b6:	00d79463          	bne	a5,a3,800016be <vshandler+0x156>
    800016ba:	00490713          	addi	a4,s2,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800016be:	14171073          	csrw	sepc,a4
    800016c2:	b779                	j	80001650 <vshandler+0xe8>
    800016c4:	742027f3          	csrr	a5,0x742
    800016c8:	f807c4e3          	bltz	a5,80001650 <vshandler+0xe8>
    800016cc:	74102773          	csrr	a4,0x741
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800016d0:	00075783          	lhu	a5,0(a4)
    800016d4:	460d                	li	a2,3
    else return epc + 2;
    800016d6:	00270693          	addi	a3,a4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800016da:	8ff1                	and	a5,a5,a2
    800016dc:	00c79463          	bne	a5,a2,800016e4 <vshandler+0x17c>
    800016e0:	00470693          	addi	a3,a4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800016e4:	74169073          	csrw	0x741,a3
    800016e8:	b7a5                	j	80001650 <vshandler+0xe8>
    excpt.testing = false;
    800016ea:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    800016ee:	5208a0d7          	vid.v	v1
    800016f2:	00057697          	auipc	a3,0x57
    800016f6:	91e68693          	addi	a3,a3,-1762 # 80058010 <excpt>
    800016fa:	020680a7          	vse8.v	v1,(a3)
    excpt.priv = PRIV_VS;
    800016fe:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    80001700:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    80001702:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    80001706:	0347b423          	sd	s4,40(a5)
    if(is_inst_fault(cause)){
    8000170a:	4751                	li	a4,20
    8000170c:	f0876ce3          	bltu	a4,s0,80001624 <vshandler+0xbc>
    80001710:	00101737          	lui	a4,0x101
    80001714:	070d                	addi	a4,a4,3 # 101003 <STACK_SIZE+0x1003>
    80001716:	00875733          	srl	a4,a4,s0
    8000171a:	8b05                	andi	a4,a4,1
    8000171c:	d701                	beqz	a4,80001624 <vshandler+0xbc>
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
    8000171e:	0487b903          	ld	s2,72(a5)
    80001722:	f00911e3          	bnez	s2,80001624 <vshandler+0xbc>
        else ERROR("instruction fault without return address");
    80001726:	0002f517          	auipc	a0,0x2f
    8000172a:	b9250513          	addi	a0,a0,-1134 # 800302b8 <__func__.0+0x5c8>
    8000172e:	15f2b0ef          	jal	8002d08c <printf>
    80001732:	18a00613          	li	a2,394
    80001736:	bd51                	j	800015ca <vshandler+0x62>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001738:	1007e793          	ori	a5,a5,256
    8000173c:	10079073          	csrw	sstatus,a5
    80001740:	744027f3          	csrr	a5,0x744
    80001744:	8ba1                	andi	a5,a5,8
    80001746:	f3a5                	bnez	a5,800016a6 <vshandler+0x13e>
    80001748:	bfb5                	j	800016c4 <vshandler+0x15c>
    8000174a:	30002773          	csrr	a4,mstatus
    8000174e:	fc0007b7          	lui	a5,0xfc000
    80001752:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80001754:	0003c697          	auipc	a3,0x3c
    80001758:	6d06a683          	lw	a3,1744(a3) # 8003de24 <curr_priv>
    8000175c:	07b6                	slli	a5,a5,0xd
    8000175e:	77f78793          	addi	a5,a5,1919
    80001762:	8ff9                	and	a5,a5,a4
    80001764:	06a68e63          	beq	a3,a0,800017e0 <vshandler+0x278>
    80001768:	ffe6871b          	addiw	a4,a3,-2
    8000176c:	4605                	li	a2,1
    8000176e:	06e66e63          	bltu	a2,a4,800017ea <vshandler+0x282>
    80001772:	6705                	lui	a4,0x1
    80001774:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80001778:	4609                	li	a2,2
    8000177a:	8fd9                	or	a5,a5,a4
    8000177c:	00c69563          	bne	a3,a2,80001786 <vshandler+0x21e>
    80001780:	4705                	li	a4,1
    80001782:	171e                	slli	a4,a4,0x27
    80001784:	8fd9                	or	a5,a5,a4
    80001786:	30079073          	csrw	mstatus,a5
    8000178a:	744027f3          	csrr	a5,0x744
    8000178e:	8ba1                	andi	a5,a5,8
    80001790:	db95                	beqz	a5,800016c4 <vshandler+0x15c>
    80001792:	ea044fe3          	bltz	s0,80001650 <vshandler+0xe8>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001796:	00095783          	lhu	a5,0(s2)
    8000179a:	468d                	li	a3,3
    else return epc + 2;
    8000179c:	00290713          	addi	a4,s2,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800017a0:	8ff5                	and	a5,a5,a3
    800017a2:	00d79463          	bne	a5,a3,800017aa <vshandler+0x242>
    800017a6:	00490713          	addi	a4,s2,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800017aa:	34171073          	csrw	mepc,a4
    800017ae:	b54d                	j	80001650 <vshandler+0xe8>
        goto_priv(ecall_args[1]); 
    800017b0:	008aa503          	lw	a0,8(s5)
    800017b4:	f54ff0ef          	jal	80000f08 <goto_priv>
    excpt.testing = false;
    800017b8:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    800017bc:	5208a0d7          	vid.v	v1
    800017c0:	00057717          	auipc	a4,0x57
    800017c4:	85070713          	addi	a4,a4,-1968 # 80058010 <excpt>
    excpt.priv = PRIV_VS;
    800017c8:	4789                	li	a5,2
    excpt.testing = false;
    800017ca:	020700a7          	vse8.v	v1,(a4)
    excpt.cause = cause;
    800017ce:	008abc23          	sd	s0,24(s5)
    excpt.epc = epc;
    800017d2:	033ab023          	sd	s3,32(s5)
    excpt.tval = tval;
    800017d6:	034ab423          	sd	s4,40(s5)
    excpt.priv = PRIV_VS;
    800017da:	00faaa23          	sw	a5,20(s5)
    if(is_inst_fault(cause)){
    800017de:	b599                	j	80001624 <vshandler+0xbc>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800017e0:	6709                	lui	a4,0x2
    800017e2:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    800017e6:	8fd9                	or	a5,a5,a4
    800017e8:	bf79                	j	80001786 <vshandler+0x21e>
    800017ea:	dad9                	beqz	a3,80001780 <vshandler+0x218>
    800017ec:	bf69                	j	80001786 <vshandler+0x21e>

00000000800017ee <expand_compressed_instruction>:

uint32_t expand_compressed_instruction(uint16_t ins) {
    800017ee:	1141                	addi	sp,sp,-16
    800017f0:	e406                	sd	ra,8(sp)

    if(!INS_COMPRESSED(ins)) {
    800017f2:	00357713          	andi	a4,a0,3
    800017f6:	478d                	li	a5,3
    800017f8:	04f70763          	beq	a4,a5,80001846 <expand_compressed_instruction+0x58>
        ERROR("trying to expand non-compressed instruction");
    }

    if(INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins) || INS_MATCH_C_SW(ins) || INS_MATCH_C_SD(ins)){
    800017fc:	77f9                	lui	a5,0xffffe
    800017fe:	078d                	addi	a5,a5,3 # ffffffffffffe003 <__stack_top+0xffffffff7fcff003>
    80001800:	8fe9                	and	a5,a5,a0
    80001802:	6711                	lui	a4,0x4
    80001804:	85aa                	mv	a1,a0
    80001806:	08e78963          	beq	a5,a4,80001898 <expand_compressed_instruction+0xaa>
    8000180a:	6719                	lui	a4,0x6
    8000180c:	04e78663          	beq	a5,a4,80001858 <expand_compressed_instruction+0x6a>
    80001810:	6731                	lui	a4,0xc
    80001812:	0ae78b63          	beq	a5,a4,800018c8 <expand_compressed_instruction+0xda>
    80001816:	6739                	lui	a4,0xe
    80001818:	0ae78363          	beq	a5,a4,800018be <expand_compressed_instruction+0xd0>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) & 0x1 << 6 |
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) >> 1 & 0x1 << 2;
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    } else {
        ERROR("expansion not implemented for target compressed instruction: 0x%x", ins);
    8000181c:	0002f517          	auipc	a0,0x2f
    80001820:	b3c50513          	addi	a0,a0,-1220 # 80030358 <__func__.0+0x668>
    80001824:	0692b0ef          	jal	8002d08c <printf>
    80001828:	1a900613          	li	a2,425
    8000182c:	0002c597          	auipc	a1,0x2c
    80001830:	5bc58593          	addi	a1,a1,1468 # 8002dde8 <__func__.0>
    80001834:	0002f517          	auipc	a0,0x2f
    80001838:	92c50513          	addi	a0,a0,-1748 # 80030160 <__func__.0+0x470>
    8000183c:	0512b0ef          	jal	8002d08c <printf>
    80001840:	4501                	li	a0,0
    80001842:	4002b0ef          	jal	8002cc42 <exit>
        ERROR("trying to expand non-compressed instruction");
    80001846:	0002f517          	auipc	a0,0x2f
    8000184a:	ad250513          	addi	a0,a0,-1326 # 80030318 <__func__.0+0x628>
    8000184e:	03f2b0ef          	jal	8002d08c <printf>
    80001852:	19600613          	li	a2,406
    80001856:	bfd9                	j	8000182c <expand_compressed_instruction+0x3e>
            (is_load ? MATCH_LD : MATCH_SD):
    80001858:	668d                	lui	a3,0x3
    8000185a:	068d                	addi	a3,a3,3 # 3003 <_test_table_size+0x3002>
        bool is_load = INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins); 
    8000185c:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    8000185e:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001862:	0075d713          	srli	a4,a1,0x7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001866:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001868:	8b1d                	andi	a4,a4,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    8000186a:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000186c:	2721                	addiw	a4,a4,8 # e008 <_test_table_size+0xe007>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) << 6 :
    8000186e:	0055d613          	srli	a2,a1,0x5
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    80001872:	0606                	slli	a2,a2,0x1
    80001874:	0196161b          	slliw	a2,a2,0x19
    80001878:	0e0005b7          	lui	a1,0xe000
    8000187c:	8e6d                	and	a2,a2,a1
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    8000187e:	45d1                	li	a1,20
    80001880:	c111                	beqz	a0,80001884 <expand_compressed_instruction+0x96>
    80001882:	459d                	li	a1,7
    }

}
    80001884:	60a2                	ld	ra,8(sp)
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    80001886:	00f7171b          	slliw	a4,a4,0xf
    8000188a:	8ed1                	or	a3,a3,a2
    8000188c:	8f55                	or	a4,a4,a3
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    8000188e:	00b7953b          	sllw	a0,a5,a1
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    80001892:	8d59                	or	a0,a0,a4
}
    80001894:	0141                	addi	sp,sp,16
    80001896:	8082                	ret
            (is_load ? MATCH_LD : MATCH_SD):
    80001898:	6689                	lui	a3,0x2
    8000189a:	068d                	addi	a3,a3,3 # 2003 <_test_table_size+0x2002>
    8000189c:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    8000189e:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800018a2:	0075d713          	srli	a4,a1,0x7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    800018a6:	00a5d813          	srli	a6,a1,0xa
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800018aa:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800018ac:	8b1d                	andi	a4,a4,7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    800018ae:	00787813          	andi	a6,a6,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800018b2:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800018b4:	2721                	addiw	a4,a4,8
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    800018b6:	4601                	li	a2,0
    800018b8:	fc0803e3          	beqz	a6,8000187e <expand_compressed_instruction+0x90>
    800018bc:	bf4d                	j	8000186e <expand_compressed_instruction+0x80>
            (is_load ? MATCH_LD : MATCH_SD):
    800018be:	668d                	lui	a3,0x3
    800018c0:	02368693          	addi	a3,a3,35 # 3023 <_test_table_size+0x3022>
    800018c4:	4501                	li	a0,0
    800018c6:	bf61                	j	8000185e <expand_compressed_instruction+0x70>
    800018c8:	6689                	lui	a3,0x2
    800018ca:	02368693          	addi	a3,a3,35 # 2023 <_test_table_size+0x2022>
    800018ce:	4501                	li	a0,0
    800018d0:	b7f9                	j	8000189e <expand_compressed_instruction+0xb0>

00000000800018d2 <reset_state>:

extern void hshandler_entry();
extern void mhandler_entry();
extern void vshandler_entry();
    
void reset_state(){
    800018d2:	1141                	addi	sp,sp,-16

    goto_priv(PRIV_M);
    800018d4:	4511                	li	a0,4
void reset_state(){
    800018d6:	e406                	sd	ra,8(sp)
    goto_priv(PRIV_M);
    800018d8:	e30ff0ef          	jal	80000f08 <goto_priv>
    CSRW(mstatus, 0ULL);
    800018dc:	30005073          	csrwi	mstatus,0
    //CSRW(mtvec, 0ULL);
    CSRW(medeleg, 0ULL);
    800018e0:	30205073          	csrwi	medeleg,0
    CSRW(mideleg, 0ULL);
    800018e4:	30305073          	csrwi	mideleg,0
    CSRW(mip, 0ULL);
    800018e8:	34405073          	csrwi	mip,0
    CSRW(mie, 0ULL);
    800018ec:	30405073          	csrwi	mie,0
    //CSRW(mtime, 0ULL); 
    //CSRW(mtimecmp, 0ULL); 
    CSRW(mscratch, 0ULL);
    800018f0:	34005073          	csrwi	mscratch,0
    CSRW(mepc, 0ULL);
    800018f4:	34105073          	csrwi	mepc,0
    CSRW(mtval, 0ULL);
    800018f8:	34305073          	csrwi	mtval,0
    CSRW(CSR_MTINST, 0ULL);
    800018fc:	34a05073          	csrwi	0x34a,0
    CSRW(CSR_MTVAL2, 0ULL);
    80001900:	34b05073          	csrwi	0x34b,0
    //what about pmp register?
    CSRW(sstatus, 0ULL);
    80001904:	10005073          	csrwi	sstatus,0
    //CSRW(stvec, 0ULL);
    CSRW(sip, 0ULL);
    80001908:	14405073          	csrwi	sip,0
    CSRW(sie, 0ULL);
    8000190c:	10405073          	csrwi	sie,0
    CSRW(sscratch, 0ULL);
    80001910:	14005073          	csrwi	sscratch,0
    CSRW(sepc, 0ULL);
    80001914:	14105073          	csrwi	sepc,0
    CSRW(scause, 0ULL);
    80001918:	14205073          	csrwi	scause,0
    CSRW(stval, 0ULL);
    8000191c:	14305073          	csrwi	stval,0
    CSRW(satp, 0ULL);
    80001920:	18005073          	csrwi	satp,0
    CSRW(CSR_HSTATUS, 0ULL);
    80001924:	60005073          	csrwi	hstatus,0
    CSRW(CSR_HIDELEG, 0ULL);
    80001928:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG, 0ULL);
    8000192c:	60205073          	csrwi	hedeleg,0
    CSRW(CSR_HVIP, 0ULL);
    80001930:	64505073          	csrwi	hvip,0
    CSRW(CSR_HIP, 0ULL);
    80001934:	64405073          	csrwi	hip,0
    CSRW(CSR_HIE, 0ULL);  
    80001938:	60405073          	csrwi	hie,0
    CSRW(CSR_HTVAL, 0ULL);
    8000193c:	64305073          	csrwi	htval,0
    CSRW(CSR_HTINST, 0ULL);
    80001940:	64a05073          	csrwi	htinst,0
    CSRW(CSR_HGATP, 0ULL);
    80001944:	68005073          	csrwi	hgatp,0
    CSRW(CSR_VSSTATUS, 0ULL);
    80001948:	20005073          	csrwi	vsstatus,0
    CSRW(CSR_VSIP, 0ULL);
    8000194c:	24405073          	csrwi	vsip,0
    CSRW(CSR_VSIE, 0ULL);
    80001950:	20405073          	csrwi	vsie,0
    //CSRW(CSR_VSTVEC, 0ULL);
    CSRW(CSR_VSSCRATCH, 0ULL);
    80001954:	24005073          	csrwi	vsscratch,0
    CSRW(CSR_VSEPC, 0ULL);
    80001958:	24105073          	csrwi	vsepc,0
    CSRW(CSR_VSCAUSE, 0ULL);
    8000195c:	24205073          	csrwi	vscause,0
    CSRW(CSR_VSTVAL, 0ULL);
    80001960:	24305073          	csrwi	vstval,0
    CSRW(CSR_VSATP, 0ULL);  
    80001964:	28005073          	csrwi	vsatp,0

    CSRW(mtvec, mhandler_entry);
    80001968:	0002c797          	auipc	a5,0x2c
    8000196c:	95c78793          	addi	a5,a5,-1700 # 8002d2c4 <mhandler_entry>
    80001970:	30579073          	csrw	mtvec,a5
    CSRS(medeleg, (1ULL << 8) | (1ULL << 10));
    80001974:	50000793          	li	a5,1280
    80001978:	3027a073          	csrs	medeleg,a5
    // full access to physical memory to other modes
    CSRW(pmpcfg0, 0xf);
    8000197c:	3a07d073          	csrwi	pmpcfg0,15
    CSRW(pmpaddr0, (uint64_t) -1);
    80001980:	57fd                	li	a5,-1
    80001982:	3b079073          	csrw	pmpaddr0,a5

    CSRW(stvec, hshandler_entry);
    80001986:	0002c797          	auipc	a5,0x2c
    8000198a:	98678793          	addi	a5,a5,-1658 # 8002d30c <hshandler_entry>
    8000198e:	10579073          	csrw	stvec,a5
    CSRS(CSR_HEDELEG, (1ULL << 8));
    80001992:	10000793          	li	a5,256
    80001996:	6027a073          	csrs	hedeleg,a5

    CSRW(CSR_VSTVEC, vshandler_entry);
    8000199a:	0002c797          	auipc	a5,0x2c
    8000199e:	9ba78793          	addi	a5,a5,-1606 # 8002d354 <vshandler_entry>
    800019a2:	20579073          	csrw	vstvec,a5

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    800019a6:	20000713          	li	a4,512
    800019aa:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800019ae:	40000793          	li	a5,1024
    800019b2:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    800019b6:	20072073          	csrs	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    800019ba:	2007b073          	csrc	vsstatus,a5
// }



static inline void sfence(){
    asm volatile ("sfence.vma \n\t");
    800019be:	12000073          	sfence.vma
        ".insn r 0x73, 0x0, 0x31, x0, x0, x0\n\t"
        ::: "memory");
}

static inline void hfence_vvma() {
    asm volatile(
    800019c2:	22000073          	.insn	4, 0x22000073
    asm volatile(
    800019c6:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
}
    800019ca:	60a2                	ld	ra,8(sp)
    800019cc:	0141                	addi	sp,sp,16
    800019ce:	8082                	ret

00000000800019d0 <random_m_instruction>:
#include <instructions.h> 
#include <csrs.h>

void random_m_instruction(){    

    int rand1=CSRR(CSR_TIME);  
    800019d0:	c01027f3          	rdtime	a5
    int rand2=CSRR(CSR_CYCLE);    
    800019d4:	c00026f3          	rdcycle	a3
    int num0=rand1+rand2;   
    int num=num0%10;
    800019d8:	66666737          	lui	a4,0x66666
    int num0=rand1+rand2;   
    800019dc:	9fb5                	addw	a5,a5,a3
    int num=num0%10;
    800019de:	66770713          	addi	a4,a4,1639 # 66666667 <STACK_SIZE+0x66566667>
    800019e2:	02e78733          	mul	a4,a5,a4
    800019e6:	41f7d69b          	sraiw	a3,a5,0x1f

    switch (num)    //注意负数
    800019ea:	4625                	li	a2,9
    int num=num0%10;
    800019ec:	9709                	srai	a4,a4,0x22
    800019ee:	9f15                	subw	a4,a4,a3
    800019f0:	0027169b          	slliw	a3,a4,0x2
    800019f4:	9f35                	addw	a4,a4,a3
    800019f6:	0017171b          	slliw	a4,a4,0x1
    800019fa:	9f99                	subw	a5,a5,a4
    switch (num)    //注意负数
    800019fc:	08f66a63          	bltu	a2,a5,80001a90 <random_m_instruction+0xc0>
    80001a00:	02079713          	slli	a4,a5,0x20
    80001a04:	01e75793          	srli	a5,a4,0x1e
    80001a08:	0002c717          	auipc	a4,0x2c
    80001a0c:	40070713          	addi	a4,a4,1024 # 8002de08 <__func__.0+0x20>
    80001a10:	97ba                	add	a5,a5,a4
    80001a12:	439c                	lw	a5,0(a5)
    80001a14:	97ba                	add	a5,a5,a4
    80001a16:	8782                	jr	a5
        break;
    case 7:
        printf("这是7号指令\n");
        break;
    case 8:
        printf("这是8号指令\n");
    80001a18:	0002f517          	auipc	a0,0x2f
    80001a1c:	a5850513          	addi	a0,a0,-1448 # 80030470 <__func__.0+0x780>
    80001a20:	2a82b06f          	j	8002ccc8 <puts>
        break;
    case 9:
        printf("这是9号指令\n");
    80001a24:	0002f517          	auipc	a0,0x2f
    80001a28:	a6450513          	addi	a0,a0,-1436 # 80030488 <__func__.0+0x798>
    80001a2c:	29c2b06f          	j	8002ccc8 <puts>
        printf("这是0号指令\n");
    80001a30:	0002f517          	auipc	a0,0x2f
    80001a34:	98050513          	addi	a0,a0,-1664 # 800303b0 <__func__.0+0x6c0>
    80001a38:	2902b06f          	j	8002ccc8 <puts>
        printf("这是1号指令\n");
    80001a3c:	0002f517          	auipc	a0,0x2f
    80001a40:	98c50513          	addi	a0,a0,-1652 # 800303c8 <__func__.0+0x6d8>
    80001a44:	2842b06f          	j	8002ccc8 <puts>
        printf("这是2号指令\n");
    80001a48:	0002f517          	auipc	a0,0x2f
    80001a4c:	99850513          	addi	a0,a0,-1640 # 800303e0 <__func__.0+0x6f0>
    80001a50:	2782b06f          	j	8002ccc8 <puts>
        printf("这是3号指令\n");
    80001a54:	0002f517          	auipc	a0,0x2f
    80001a58:	9a450513          	addi	a0,a0,-1628 # 800303f8 <__func__.0+0x708>
    80001a5c:	26c2b06f          	j	8002ccc8 <puts>
        printf("这是4号指令\n");
    80001a60:	0002f517          	auipc	a0,0x2f
    80001a64:	9b050513          	addi	a0,a0,-1616 # 80030410 <__func__.0+0x720>
    80001a68:	2602b06f          	j	8002ccc8 <puts>
        printf("这是5号指令\n");
    80001a6c:	0002f517          	auipc	a0,0x2f
    80001a70:	9bc50513          	addi	a0,a0,-1604 # 80030428 <__func__.0+0x738>
    80001a74:	2542b06f          	j	8002ccc8 <puts>
        printf("这是6号指令\n");
    80001a78:	0002f517          	auipc	a0,0x2f
    80001a7c:	9c850513          	addi	a0,a0,-1592 # 80030440 <__func__.0+0x750>
    80001a80:	2482b06f          	j	8002ccc8 <puts>
        printf("这是7号指令\n");
    80001a84:	0002f517          	auipc	a0,0x2f
    80001a88:	9d450513          	addi	a0,a0,-1580 # 80030458 <__func__.0+0x768>
    80001a8c:	23c2b06f          	j	8002ccc8 <puts>
        break;

    default:
        break;
    }
    80001a90:	8082                	ret

0000000080001a92 <check_xip_regs_1>:
#include <rvh_test.h>

bool check_xip_regs_1(){
    80001a92:	7179                	addi	sp,sp,-48

    TEST_START();
    80001a94:	0002c597          	auipc	a1,0x2c
    80001a98:	39c58593          	addi	a1,a1,924 # 8002de30 <__func__.3>
    80001a9c:	0002e517          	auipc	a0,0x2e
    80001aa0:	53c50513          	addi	a0,a0,1340 # 8002ffd8 <__func__.0+0x2e8>
bool check_xip_regs_1(){
    80001aa4:	f406                	sd	ra,40(sp)
    80001aa6:	f022                	sd	s0,32(sp)
    80001aa8:	ec26                	sd	s1,24(sp)
    80001aaa:	e84a                	sd	s2,16(sp)
    80001aac:	e44e                	sd	s3,8(sp)
    80001aae:	e052                	sd	s4,0(sp)
    TEST_START();
    80001ab0:	5dc2b0ef          	jal	8002d08c <printf>
    80001ab4:	4529                	li	a0,10
    80001ab6:	2c42a0ef          	jal	8002bd7a <putchar>

    CSRW(mideleg, 0);
    80001aba:	30305073          	csrwi	mideleg,0

    int64_t mtime_mask = ~((int64_t)0x80);

    CSRW(mideleg, (uint64_t)-1);
    80001abe:	547d                	li	s0,-1
    80001ac0:	30341073          	csrw	mideleg,s0
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001ac4:	60341073          	csrw	hideleg,s0
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2002);
    80001ac8:	244029f3          	csrr	s3,vsip
    80001acc:	24441073          	csrw	vsip,s0
    80001ad0:	24402973          	csrr	s2,vsip
    80001ad4:	6489                	lui	s1,0x2
    80001ad6:	0002f617          	auipc	a2,0x2f
    80001ada:	9ca60613          	addi	a2,a2,-1590 # 800304a0 <__func__.0+0x7b0>
    80001ade:	08200593          	li	a1,130
    80001ae2:	0002e517          	auipc	a0,0x2e
    80001ae6:	50e50513          	addi	a0,a0,1294 # 8002fff0 <__func__.0+0x300>
    80001aea:	0489                	addi	s1,s1,2 # 2002 <_test_table_size+0x2001>
    80001aec:	5a02b0ef          	jal	8002d08c <printf>
    80001af0:	10990f63          	beq	s2,s1,80001c0e <check_xip_regs_1+0x17c>
    80001af4:	0002e597          	auipc	a1,0x2e
    80001af8:	4d458593          	addi	a1,a1,1236 # 8002ffc8 <__func__.0+0x2d8>
    80001afc:	0002e517          	auipc	a0,0x2e
    80001b00:	50c50513          	addi	a0,a0,1292 # 80030008 <__func__.0+0x318>
    80001b04:	5882b0ef          	jal	8002d08c <printf>
    80001b08:	0002e517          	auipc	a0,0x2e
    80001b0c:	50850513          	addi	a0,a0,1288 # 80030010 <__func__.0+0x320>
    80001b10:	57c2b0ef          	jal	8002d08c <printf>
    80001b14:	86a6                	mv	a3,s1
    80001b16:	864a                	mv	a2,s2
    80001b18:	85a2                	mv	a1,s0
    80001b1a:	0002e517          	auipc	a0,0x2e
    80001b1e:	4fe50513          	addi	a0,a0,1278 # 80030018 <__func__.0+0x328>
    80001b22:	56a2b0ef          	jal	8002d08c <printf>
    80001b26:	02900513          	li	a0,41
    80001b2a:	2502a0ef          	jal	8002bd7a <putchar>
    80001b2e:	4529                	li	a0,10
    80001b30:	24a2a0ef          	jal	8002bd7a <putchar>
    80001b34:	4a01                	li	s4,0
    80001b36:	24499073          	csrw	vsip,s3
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    80001b3a:	204029f3          	csrr	s3,vsie
    80001b3e:	54fd                	li	s1,-1
    80001b40:	20449073          	csrw	vsie,s1
    80001b44:	20402973          	csrr	s2,vsie
    80001b48:	6409                	lui	s0,0x2
    80001b4a:	0002f617          	auipc	a2,0x2f
    80001b4e:	95e60613          	addi	a2,a2,-1698 # 800304a8 <__func__.0+0x7b8>
    80001b52:	08200593          	li	a1,130
    80001b56:	0002e517          	auipc	a0,0x2e
    80001b5a:	49a50513          	addi	a0,a0,1178 # 8002fff0 <__func__.0+0x300>
    80001b5e:	22240413          	addi	s0,s0,546 # 2222 <_test_table_size+0x2221>
    80001b62:	52a2b0ef          	jal	8002d08c <printf>
    80001b66:	06890d63          	beq	s2,s0,80001be0 <check_xip_regs_1+0x14e>
    80001b6a:	0002e597          	auipc	a1,0x2e
    80001b6e:	45e58593          	addi	a1,a1,1118 # 8002ffc8 <__func__.0+0x2d8>
    80001b72:	0002e517          	auipc	a0,0x2e
    80001b76:	49650513          	addi	a0,a0,1174 # 80030008 <__func__.0+0x318>
    80001b7a:	5122b0ef          	jal	8002d08c <printf>
    80001b7e:	0002e517          	auipc	a0,0x2e
    80001b82:	49250513          	addi	a0,a0,1170 # 80030010 <__func__.0+0x320>
    80001b86:	5062b0ef          	jal	8002d08c <printf>
    80001b8a:	86a2                	mv	a3,s0
    80001b8c:	864a                	mv	a2,s2
    80001b8e:	85a6                	mv	a1,s1
    80001b90:	0002e517          	auipc	a0,0x2e
    80001b94:	48850513          	addi	a0,a0,1160 # 80030018 <__func__.0+0x328>
    80001b98:	4f42b0ef          	jal	8002d08c <printf>
    80001b9c:	02900513          	li	a0,41
    80001ba0:	1da2a0ef          	jal	8002bd7a <putchar>
    80001ba4:	4529                	li	a0,10
    80001ba6:	1d42a0ef          	jal	8002bd7a <putchar>
    80001baa:	20499073          	csrw	vsie,s3
    80001bae:	4401                	li	s0,0
    
    TEST_END();
    80001bb0:	0002e597          	auipc	a1,0x2e
    80001bb4:	41858593          	addi	a1,a1,1048 # 8002ffc8 <__func__.0+0x2d8>
    80001bb8:	0002e517          	auipc	a0,0x2e
    80001bbc:	4b850513          	addi	a0,a0,1208 # 80030070 <__func__.0+0x380>
    80001bc0:	4cc2b0ef          	jal	8002d08c <printf>
    80001bc4:	4511                	li	a0,4
    80001bc6:	b42ff0ef          	jal	80000f08 <goto_priv>
    80001bca:	d09ff0ef          	jal	800018d2 <reset_state>
}
    80001bce:	70a2                	ld	ra,40(sp)
    80001bd0:	8522                	mv	a0,s0
    80001bd2:	7402                	ld	s0,32(sp)
    80001bd4:	64e2                	ld	s1,24(sp)
    80001bd6:	6942                	ld	s2,16(sp)
    80001bd8:	69a2                	ld	s3,8(sp)
    80001bda:	6a02                	ld	s4,0(sp)
    80001bdc:	6145                	addi	sp,sp,48
    80001bde:	8082                	ret
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    80001be0:	0002e597          	auipc	a1,0x2e
    80001be4:	3d858593          	addi	a1,a1,984 # 8002ffb8 <__func__.0+0x2c8>
    80001be8:	0002e517          	auipc	a0,0x2e
    80001bec:	42050513          	addi	a0,a0,1056 # 80030008 <__func__.0+0x318>
    80001bf0:	49c2b0ef          	jal	8002d08c <printf>
    80001bf4:	4529                	li	a0,10
    80001bf6:	1842a0ef          	jal	8002bd7a <putchar>
    80001bfa:	fa0a08e3          	beqz	s4,80001baa <check_xip_regs_1+0x118>
    80001bfe:	20499073          	csrw	vsie,s3
    80001c02:	4405                	li	s0,1
    TEST_END();
    80001c04:	0002e597          	auipc	a1,0x2e
    80001c08:	3b458593          	addi	a1,a1,948 # 8002ffb8 <__func__.0+0x2c8>
    80001c0c:	b775                	j	80001bb8 <check_xip_regs_1+0x126>
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2002);
    80001c0e:	0002e597          	auipc	a1,0x2e
    80001c12:	3aa58593          	addi	a1,a1,938 # 8002ffb8 <__func__.0+0x2c8>
    80001c16:	0002e517          	auipc	a0,0x2e
    80001c1a:	3f250513          	addi	a0,a0,1010 # 80030008 <__func__.0+0x318>
    80001c1e:	46e2b0ef          	jal	8002d08c <printf>
    80001c22:	4529                	li	a0,10
    80001c24:	1562a0ef          	jal	8002bd7a <putchar>
    80001c28:	4a05                	li	s4,1
    80001c2a:	b731                	j	80001b36 <check_xip_regs_1+0xa4>

0000000080001c2c <check_xip_regs_2>:

bool check_xip_regs_2(){
    80001c2c:	1101                	addi	sp,sp,-32

    TEST_START();
    80001c2e:	0002c597          	auipc	a1,0x2c
    80001c32:	21a58593          	addi	a1,a1,538 # 8002de48 <__func__.2>
    80001c36:	0002e517          	auipc	a0,0x2e
    80001c3a:	3a250513          	addi	a0,a0,930 # 8002ffd8 <__func__.0+0x2e8>
bool check_xip_regs_2(){
    80001c3e:	ec06                	sd	ra,24(sp)
    80001c40:	e822                	sd	s0,16(sp)
    80001c42:	e426                	sd	s1,8(sp)
    80001c44:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001c46:	4462b0ef          	jal	8002d08c <printf>
    80001c4a:	4529                	li	a0,10
    80001c4c:	12e2a0ef          	jal	8002bd7a <putchar>

    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80001c50:	57fd                	li	a5,-1
    80001c52:	03f79713          	slli	a4,a5,0x3f
    80001c56:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    80001c5a:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001c5e:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    80001c62:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001c66:	64402473          	csrr	s0,hip
    80001c6a:	0002f617          	auipc	a2,0x2f
    80001c6e:	84660613          	addi	a2,a2,-1978 # 800304b0 <__func__.0+0x7c0>
    80001c72:	08200593          	li	a1,130
    80001c76:	0002e517          	auipc	a0,0x2e
    80001c7a:	37a50513          	addi	a0,a0,890 # 8002fff0 <__func__.0+0x300>
    80001c7e:	4491                	li	s1,4
    80001c80:	40c2b0ef          	jal	8002d08c <printf>
    80001c84:	46940763          	beq	s0,s1,800020f2 <check_xip_regs_2+0x4c6>
    80001c88:	0002e597          	auipc	a1,0x2e
    80001c8c:	34058593          	addi	a1,a1,832 # 8002ffc8 <__func__.0+0x2d8>
    80001c90:	0002e517          	auipc	a0,0x2e
    80001c94:	37850513          	addi	a0,a0,888 # 80030008 <__func__.0+0x318>
    80001c98:	3f42b0ef          	jal	8002d08c <printf>
    80001c9c:	0002e517          	auipc	a0,0x2e
    80001ca0:	37450513          	addi	a0,a0,884 # 80030010 <__func__.0+0x320>
    80001ca4:	3e82b0ef          	jal	8002d08c <printf>
    80001ca8:	8622                	mv	a2,s0
    80001caa:	86a6                	mv	a3,s1
    80001cac:	02d00593          	li	a1,45
    80001cb0:	0002f517          	auipc	a0,0x2f
    80001cb4:	80850513          	addi	a0,a0,-2040 # 800304b8 <__func__.0+0x7c8>
    80001cb8:	3d42b0ef          	jal	8002d08c <printf>
    80001cbc:	02900513          	li	a0,41
    80001cc0:	0ba2a0ef          	jal	8002bd7a <putchar>
    80001cc4:	4529                	li	a0,10
    80001cc6:	0b42a0ef          	jal	8002bd7a <putchar>
    80001cca:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x2222);    
    80001ccc:	14402973          	csrr	s2,sip
    80001cd0:	6489                	lui	s1,0x2
    80001cd2:	0002e617          	auipc	a2,0x2e
    80001cd6:	7fe60613          	addi	a2,a2,2046 # 800304d0 <__func__.0+0x7e0>
    80001cda:	08200593          	li	a1,130
    80001cde:	0002e517          	auipc	a0,0x2e
    80001ce2:	31250513          	addi	a0,a0,786 # 8002fff0 <__func__.0+0x300>
    80001ce6:	22248493          	addi	s1,s1,546 # 2222 <_test_table_size+0x2221>
    80001cea:	3a22b0ef          	jal	8002d08c <printf>
    80001cee:	3a990863          	beq	s2,s1,8000209e <check_xip_regs_2+0x472>
    80001cf2:	0002e597          	auipc	a1,0x2e
    80001cf6:	2d658593          	addi	a1,a1,726 # 8002ffc8 <__func__.0+0x2d8>
    80001cfa:	0002e517          	auipc	a0,0x2e
    80001cfe:	30e50513          	addi	a0,a0,782 # 80030008 <__func__.0+0x318>
    80001d02:	38a2b0ef          	jal	8002d08c <printf>
    80001d06:	0002e517          	auipc	a0,0x2e
    80001d0a:	30a50513          	addi	a0,a0,778 # 80030010 <__func__.0+0x320>
    80001d0e:	37e2b0ef          	jal	8002d08c <printf>
    80001d12:	86a6                	mv	a3,s1
    80001d14:	864a                	mv	a2,s2
    80001d16:	02d00593          	li	a1,45
    80001d1a:	0002e517          	auipc	a0,0x2e
    80001d1e:	79e50513          	addi	a0,a0,1950 # 800304b8 <__func__.0+0x7c8>
    80001d22:	36a2b0ef          	jal	8002d08c <printf>
    80001d26:	02900513          	li	a0,41
    80001d2a:	0502a0ef          	jal	8002bd7a <putchar>
    80001d2e:	4529                	li	a0,10
    80001d30:	04a2a0ef          	jal	8002bd7a <putchar>
    80001d34:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2002);
    80001d36:	24402973          	csrr	s2,vsip
    80001d3a:	6489                	lui	s1,0x2
    80001d3c:	0002e617          	auipc	a2,0x2e
    80001d40:	76460613          	addi	a2,a2,1892 # 800304a0 <__func__.0+0x7b0>
    80001d44:	08200593          	li	a1,130
    80001d48:	0002e517          	auipc	a0,0x2e
    80001d4c:	2a850513          	addi	a0,a0,680 # 8002fff0 <__func__.0+0x300>
    80001d50:	0489                	addi	s1,s1,2 # 2002 <_test_table_size+0x2001>
    80001d52:	33a2b0ef          	jal	8002d08c <printf>
    80001d56:	38990063          	beq	s2,s1,800020d6 <check_xip_regs_2+0x4aa>
    80001d5a:	0002e597          	auipc	a1,0x2e
    80001d5e:	26e58593          	addi	a1,a1,622 # 8002ffc8 <__func__.0+0x2d8>
    80001d62:	0002e517          	auipc	a0,0x2e
    80001d66:	2a650513          	addi	a0,a0,678 # 80030008 <__func__.0+0x318>
    80001d6a:	3222b0ef          	jal	8002d08c <printf>
    80001d6e:	0002e517          	auipc	a0,0x2e
    80001d72:	2a250513          	addi	a0,a0,674 # 80030010 <__func__.0+0x320>
    80001d76:	3162b0ef          	jal	8002d08c <printf>
    80001d7a:	86a6                	mv	a3,s1
    80001d7c:	864a                	mv	a2,s2
    80001d7e:	02d00593          	li	a1,45
    80001d82:	0002e517          	auipc	a0,0x2e
    80001d86:	73650513          	addi	a0,a0,1846 # 800304b8 <__func__.0+0x7c8>
    80001d8a:	3022b0ef          	jal	8002d08c <printf>
    80001d8e:	02900513          	li	a0,41
    80001d92:	7e9290ef          	jal	8002bd7a <putchar>
    80001d96:	4529                	li	a0,10
    80001d98:	7e3290ef          	jal	8002bd7a <putchar>
    80001d9c:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001d9e:	4509                	li	a0,2
    80001da0:	968ff0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2002);
    80001da4:	14402973          	csrr	s2,sip
    80001da8:	6489                	lui	s1,0x2
    80001daa:	0002e617          	auipc	a2,0x2e
    80001dae:	72e60613          	addi	a2,a2,1838 # 800304d8 <__func__.0+0x7e8>
    80001db2:	08200593          	li	a1,130
    80001db6:	0002e517          	auipc	a0,0x2e
    80001dba:	23a50513          	addi	a0,a0,570 # 8002fff0 <__func__.0+0x300>
    80001dbe:	0489                	addi	s1,s1,2 # 2002 <_test_table_size+0x2001>
    80001dc0:	2cc2b0ef          	jal	8002d08c <printf>
    80001dc4:	2e990b63          	beq	s2,s1,800020ba <check_xip_regs_2+0x48e>
    80001dc8:	0002e597          	auipc	a1,0x2e
    80001dcc:	20058593          	addi	a1,a1,512 # 8002ffc8 <__func__.0+0x2d8>
    80001dd0:	0002e517          	auipc	a0,0x2e
    80001dd4:	23850513          	addi	a0,a0,568 # 80030008 <__func__.0+0x318>
    80001dd8:	2b42b0ef          	jal	8002d08c <printf>
    80001ddc:	0002e517          	auipc	a0,0x2e
    80001de0:	23450513          	addi	a0,a0,564 # 80030010 <__func__.0+0x320>
    80001de4:	2a82b0ef          	jal	8002d08c <printf>
    80001de8:	86a6                	mv	a3,s1
    80001dea:	864a                	mv	a2,s2
    80001dec:	02d00593          	li	a1,45
    80001df0:	0002e517          	auipc	a0,0x2e
    80001df4:	6c850513          	addi	a0,a0,1736 # 800304b8 <__func__.0+0x7c8>
    80001df8:	2942b0ef          	jal	8002d08c <printf>
    80001dfc:	02900513          	li	a0,41
    80001e00:	77b290ef          	jal	8002bd7a <putchar>
    80001e04:	4529                	li	a0,10
    80001e06:	775290ef          	jal	8002bd7a <putchar>
    80001e0a:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80001e0c:	4511                	li	a0,4
    80001e0e:	8faff0ef          	jal	80000f08 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    80001e12:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001e16:	644024f3          	csrr	s1,hip
    80001e1a:	0002e617          	auipc	a2,0x2e
    80001e1e:	69660613          	addi	a2,a2,1686 # 800304b0 <__func__.0+0x7c0>
    80001e22:	08200593          	li	a1,130
    80001e26:	0002e517          	auipc	a0,0x2e
    80001e2a:	1ca50513          	addi	a0,a0,458 # 8002fff0 <__func__.0+0x300>
    80001e2e:	25e2b0ef          	jal	8002d08c <printf>
    80001e32:	1a048663          	beqz	s1,80001fde <check_xip_regs_2+0x3b2>
    80001e36:	0002e597          	auipc	a1,0x2e
    80001e3a:	19258593          	addi	a1,a1,402 # 8002ffc8 <__func__.0+0x2d8>
    80001e3e:	0002e517          	auipc	a0,0x2e
    80001e42:	1ca50513          	addi	a0,a0,458 # 80030008 <__func__.0+0x318>
    80001e46:	2462b0ef          	jal	8002d08c <printf>
    80001e4a:	0002e517          	auipc	a0,0x2e
    80001e4e:	1c650513          	addi	a0,a0,454 # 80030010 <__func__.0+0x320>
    80001e52:	23a2b0ef          	jal	8002d08c <printf>
    80001e56:	8626                	mv	a2,s1
    80001e58:	4681                	li	a3,0
    80001e5a:	02d00593          	li	a1,45
    80001e5e:	0002e517          	auipc	a0,0x2e
    80001e62:	65a50513          	addi	a0,a0,1626 # 800304b8 <__func__.0+0x7c8>
    80001e66:	2262b0ef          	jal	8002d08c <printf>
    80001e6a:	02900513          	li	a0,41
    80001e6e:	70d290ef          	jal	8002bd7a <putchar>
    80001e72:	4529                	li	a0,10
    80001e74:	707290ef          	jal	8002bd7a <putchar>
    80001e78:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001e7a:	144024f3          	csrr	s1,sip
    80001e7e:	0002e617          	auipc	a2,0x2e
    80001e82:	65260613          	addi	a2,a2,1618 # 800304d0 <__func__.0+0x7e0>
    80001e86:	08200593          	li	a1,130
    80001e8a:	0002e517          	auipc	a0,0x2e
    80001e8e:	16650513          	addi	a0,a0,358 # 8002fff0 <__func__.0+0x300>
    80001e92:	1fa2b0ef          	jal	8002d08c <printf>
    80001e96:	18048163          	beqz	s1,80002018 <check_xip_regs_2+0x3ec>
    80001e9a:	0002e597          	auipc	a1,0x2e
    80001e9e:	12e58593          	addi	a1,a1,302 # 8002ffc8 <__func__.0+0x2d8>
    80001ea2:	0002e517          	auipc	a0,0x2e
    80001ea6:	16650513          	addi	a0,a0,358 # 80030008 <__func__.0+0x318>
    80001eaa:	1e22b0ef          	jal	8002d08c <printf>
    80001eae:	0002e517          	auipc	a0,0x2e
    80001eb2:	16250513          	addi	a0,a0,354 # 80030010 <__func__.0+0x320>
    80001eb6:	1d62b0ef          	jal	8002d08c <printf>
    80001eba:	8626                	mv	a2,s1
    80001ebc:	4681                	li	a3,0
    80001ebe:	02d00593          	li	a1,45
    80001ec2:	0002e517          	auipc	a0,0x2e
    80001ec6:	5f650513          	addi	a0,a0,1526 # 800304b8 <__func__.0+0x7c8>
    80001eca:	1c22b0ef          	jal	8002d08c <printf>
    80001ece:	02900513          	li	a0,41
    80001ed2:	6a9290ef          	jal	8002bd7a <putchar>
    80001ed6:	4529                	li	a0,10
    80001ed8:	6a3290ef          	jal	8002bd7a <putchar>
    80001edc:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001ede:	244024f3          	csrr	s1,vsip
    80001ee2:	0002e617          	auipc	a2,0x2e
    80001ee6:	5be60613          	addi	a2,a2,1470 # 800304a0 <__func__.0+0x7b0>
    80001eea:	08200593          	li	a1,130
    80001eee:	0002e517          	auipc	a0,0x2e
    80001ef2:	10250513          	addi	a0,a0,258 # 8002fff0 <__func__.0+0x300>
    80001ef6:	1962b0ef          	jal	8002d08c <printf>
    80001efa:	14048c63          	beqz	s1,80002052 <check_xip_regs_2+0x426>
    80001efe:	0002e597          	auipc	a1,0x2e
    80001f02:	0ca58593          	addi	a1,a1,202 # 8002ffc8 <__func__.0+0x2d8>
    80001f06:	0002e517          	auipc	a0,0x2e
    80001f0a:	10250513          	addi	a0,a0,258 # 80030008 <__func__.0+0x318>
    80001f0e:	17e2b0ef          	jal	8002d08c <printf>
    80001f12:	0002e517          	auipc	a0,0x2e
    80001f16:	0fe50513          	addi	a0,a0,254 # 80030010 <__func__.0+0x320>
    80001f1a:	1722b0ef          	jal	8002d08c <printf>
    80001f1e:	8626                	mv	a2,s1
    80001f20:	4681                	li	a3,0
    80001f22:	02d00593          	li	a1,45
    80001f26:	0002e517          	auipc	a0,0x2e
    80001f2a:	59250513          	addi	a0,a0,1426 # 800304b8 <__func__.0+0x7c8>
    80001f2e:	15e2b0ef          	jal	8002d08c <printf>
    80001f32:	02900513          	li	a0,41
    80001f36:	645290ef          	jal	8002bd7a <putchar>
    80001f3a:	4529                	li	a0,10
    80001f3c:	63f290ef          	jal	8002bd7a <putchar>
    80001f40:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001f42:	4509                	li	a0,2
    80001f44:	fc5fe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001f48:	144024f3          	csrr	s1,sip
    80001f4c:	0002e617          	auipc	a2,0x2e
    80001f50:	58c60613          	addi	a2,a2,1420 # 800304d8 <__func__.0+0x7e8>
    80001f54:	08200593          	li	a1,130
    80001f58:	0002e517          	auipc	a0,0x2e
    80001f5c:	09850513          	addi	a0,a0,152 # 8002fff0 <__func__.0+0x300>
    80001f60:	12c2b0ef          	jal	8002d08c <printf>
    80001f64:	10048563          	beqz	s1,8000206e <check_xip_regs_2+0x442>
    80001f68:	0002e597          	auipc	a1,0x2e
    80001f6c:	06058593          	addi	a1,a1,96 # 8002ffc8 <__func__.0+0x2d8>
    80001f70:	0002e517          	auipc	a0,0x2e
    80001f74:	09850513          	addi	a0,a0,152 # 80030008 <__func__.0+0x318>
    80001f78:	1142b0ef          	jal	8002d08c <printf>
    80001f7c:	0002e517          	auipc	a0,0x2e
    80001f80:	09450513          	addi	a0,a0,148 # 80030010 <__func__.0+0x320>
    80001f84:	1082b0ef          	jal	8002d08c <printf>
    80001f88:	8626                	mv	a2,s1
    80001f8a:	4681                	li	a3,0
    80001f8c:	02d00593          	li	a1,45
    80001f90:	0002e517          	auipc	a0,0x2e
    80001f94:	52850513          	addi	a0,a0,1320 # 800304b8 <__func__.0+0x7c8>
    80001f98:	0f42b0ef          	jal	8002d08c <printf>
    80001f9c:	02900513          	li	a0,41
    80001fa0:	5db290ef          	jal	8002bd7a <putchar>
    80001fa4:	4529                	li	a0,10
    80001fa6:	5d5290ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);   
    80001faa:	4511                	li	a0,4
    80001fac:	f5dfe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001fb0:	4401                	li	s0,0

    TEST_END();
    80001fb2:	0002e597          	auipc	a1,0x2e
    80001fb6:	01658593          	addi	a1,a1,22 # 8002ffc8 <__func__.0+0x2d8>
    80001fba:	0002e517          	auipc	a0,0x2e
    80001fbe:	0b650513          	addi	a0,a0,182 # 80030070 <__func__.0+0x380>
    80001fc2:	0ca2b0ef          	jal	8002d08c <printf>
    80001fc6:	4511                	li	a0,4
    80001fc8:	f41fe0ef          	jal	80000f08 <goto_priv>
    80001fcc:	907ff0ef          	jal	800018d2 <reset_state>
}
    80001fd0:	60e2                	ld	ra,24(sp)
    80001fd2:	8522                	mv	a0,s0
    80001fd4:	6442                	ld	s0,16(sp)
    80001fd6:	64a2                	ld	s1,8(sp)
    80001fd8:	6902                	ld	s2,0(sp)
    80001fda:	6105                	addi	sp,sp,32
    80001fdc:	8082                	ret
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001fde:	0002e597          	auipc	a1,0x2e
    80001fe2:	fda58593          	addi	a1,a1,-38 # 8002ffb8 <__func__.0+0x2c8>
    80001fe6:	0002e517          	auipc	a0,0x2e
    80001fea:	02250513          	addi	a0,a0,34 # 80030008 <__func__.0+0x318>
    80001fee:	09e2b0ef          	jal	8002d08c <printf>
    80001ff2:	4529                	li	a0,10
    80001ff4:	587290ef          	jal	8002bd7a <putchar>
    check_csr_rd("sip", sip, 0x0);
    80001ff8:	144024f3          	csrr	s1,sip
    80001ffc:	0002e617          	auipc	a2,0x2e
    80002000:	4d460613          	addi	a2,a2,1236 # 800304d0 <__func__.0+0x7e0>
    80002004:	08200593          	li	a1,130
    80002008:	0002e517          	auipc	a0,0x2e
    8000200c:	fe850513          	addi	a0,a0,-24 # 8002fff0 <__func__.0+0x300>
    80002010:	07c2b0ef          	jal	8002d08c <printf>
    80002014:	e80493e3          	bnez	s1,80001e9a <check_xip_regs_2+0x26e>
    80002018:	0002e597          	auipc	a1,0x2e
    8000201c:	fa058593          	addi	a1,a1,-96 # 8002ffb8 <__func__.0+0x2c8>
    80002020:	0002e517          	auipc	a0,0x2e
    80002024:	fe850513          	addi	a0,a0,-24 # 80030008 <__func__.0+0x318>
    80002028:	0642b0ef          	jal	8002d08c <printf>
    8000202c:	4529                	li	a0,10
    8000202e:	54d290ef          	jal	8002bd7a <putchar>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80002032:	244024f3          	csrr	s1,vsip
    80002036:	0002e617          	auipc	a2,0x2e
    8000203a:	46a60613          	addi	a2,a2,1130 # 800304a0 <__func__.0+0x7b0>
    8000203e:	08200593          	li	a1,130
    80002042:	0002e517          	auipc	a0,0x2e
    80002046:	fae50513          	addi	a0,a0,-82 # 8002fff0 <__func__.0+0x300>
    8000204a:	0422b0ef          	jal	8002d08c <printf>
    8000204e:	ea0498e3          	bnez	s1,80001efe <check_xip_regs_2+0x2d2>
    80002052:	0002e597          	auipc	a1,0x2e
    80002056:	f6658593          	addi	a1,a1,-154 # 8002ffb8 <__func__.0+0x2c8>
    8000205a:	0002e517          	auipc	a0,0x2e
    8000205e:	fae50513          	addi	a0,a0,-82 # 80030008 <__func__.0+0x318>
    80002062:	02a2b0ef          	jal	8002d08c <printf>
    80002066:	4529                	li	a0,10
    80002068:	513290ef          	jal	8002bd7a <putchar>
    8000206c:	bdd9                	j	80001f42 <check_xip_regs_2+0x316>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8000206e:	0002e597          	auipc	a1,0x2e
    80002072:	f4a58593          	addi	a1,a1,-182 # 8002ffb8 <__func__.0+0x2c8>
    80002076:	0002e517          	auipc	a0,0x2e
    8000207a:	f9250513          	addi	a0,a0,-110 # 80030008 <__func__.0+0x318>
    8000207e:	00e2b0ef          	jal	8002d08c <printf>
    80002082:	4529                	li	a0,10
    80002084:	4f7290ef          	jal	8002bd7a <putchar>
    80002088:	f20401e3          	beqz	s0,80001faa <check_xip_regs_2+0x37e>
    goto_priv(PRIV_M);   
    8000208c:	4511                	li	a0,4
    8000208e:	e7bfe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002092:	4405                	li	s0,1
    TEST_END();
    80002094:	0002e597          	auipc	a1,0x2e
    80002098:	f2458593          	addi	a1,a1,-220 # 8002ffb8 <__func__.0+0x2c8>
    8000209c:	bf39                	j	80001fba <check_xip_regs_2+0x38e>
    check_csr_rd("sip", sip, 0x2222);    
    8000209e:	0002e597          	auipc	a1,0x2e
    800020a2:	f1a58593          	addi	a1,a1,-230 # 8002ffb8 <__func__.0+0x2c8>
    800020a6:	0002e517          	auipc	a0,0x2e
    800020aa:	f6250513          	addi	a0,a0,-158 # 80030008 <__func__.0+0x318>
    800020ae:	7df2a0ef          	jal	8002d08c <printf>
    800020b2:	4529                	li	a0,10
    800020b4:	4c7290ef          	jal	8002bd7a <putchar>
    800020b8:	b9bd                	j	80001d36 <check_xip_regs_2+0x10a>
    check_csr_rd("sip (vs perspective)", sip, 0x2002);
    800020ba:	0002e597          	auipc	a1,0x2e
    800020be:	efe58593          	addi	a1,a1,-258 # 8002ffb8 <__func__.0+0x2c8>
    800020c2:	0002e517          	auipc	a0,0x2e
    800020c6:	f4650513          	addi	a0,a0,-186 # 80030008 <__func__.0+0x318>
    800020ca:	7c32a0ef          	jal	8002d08c <printf>
    800020ce:	4529                	li	a0,10
    800020d0:	4ab290ef          	jal	8002bd7a <putchar>
    800020d4:	bb25                	j	80001e0c <check_xip_regs_2+0x1e0>
    check_csr_rd("vsip", CSR_VSIP, 0x2002);
    800020d6:	0002e597          	auipc	a1,0x2e
    800020da:	ee258593          	addi	a1,a1,-286 # 8002ffb8 <__func__.0+0x2c8>
    800020de:	0002e517          	auipc	a0,0x2e
    800020e2:	f2a50513          	addi	a0,a0,-214 # 80030008 <__func__.0+0x318>
    800020e6:	7a72a0ef          	jal	8002d08c <printf>
    800020ea:	4529                	li	a0,10
    800020ec:	48f290ef          	jal	8002bd7a <putchar>
    800020f0:	b17d                	j	80001d9e <check_xip_regs_2+0x172>
    check_csr_rd("hip", CSR_HIP, 0x4);
    800020f2:	0002e597          	auipc	a1,0x2e
    800020f6:	ec658593          	addi	a1,a1,-314 # 8002ffb8 <__func__.0+0x2c8>
    800020fa:	0002e517          	auipc	a0,0x2e
    800020fe:	f0e50513          	addi	a0,a0,-242 # 80030008 <__func__.0+0x318>
    80002102:	78b2a0ef          	jal	8002d08c <printf>
    80002106:	4529                	li	a0,10
    80002108:	473290ef          	jal	8002bd7a <putchar>
    8000210c:	4405                	li	s0,1
    8000210e:	be7d                	j	80001ccc <check_xip_regs_2+0xa0>

0000000080002110 <check_xip_regs_3>:

bool check_xip_regs_3(){
    80002110:	1101                	addi	sp,sp,-32

    TEST_START();
    80002112:	0002c597          	auipc	a1,0x2c
    80002116:	d4e58593          	addi	a1,a1,-690 # 8002de60 <__func__.1>
    8000211a:	0002e517          	auipc	a0,0x2e
    8000211e:	ebe50513          	addi	a0,a0,-322 # 8002ffd8 <__func__.0+0x2e8>
bool check_xip_regs_3(){
    80002122:	ec06                	sd	ra,24(sp)
    80002124:	e822                	sd	s0,16(sp)
    80002126:	e426                	sd	s1,8(sp)
    80002128:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000212a:	7632a0ef          	jal	8002d08c <printf>
    8000212e:	4529                	li	a0,10
    80002130:	44b290ef          	jal	8002bd7a <putchar>

    CSRW(mideleg, (uint64_t)-1);
    80002134:	57fd                	li	a5,-1
    80002136:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    8000213a:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)-1);
    8000213e:	64579073          	csrw	hvip,a5
    check_csr_rd("hvip", CSR_HVIP, 0x2444);
    80002142:	645024f3          	csrr	s1,hvip
    80002146:	6409                	lui	s0,0x2
    80002148:	0002e617          	auipc	a2,0x2e
    8000214c:	3a860613          	addi	a2,a2,936 # 800304f0 <__func__.0+0x800>
    80002150:	08200593          	li	a1,130
    80002154:	0002e517          	auipc	a0,0x2e
    80002158:	e9c50513          	addi	a0,a0,-356 # 8002fff0 <__func__.0+0x300>
    8000215c:	44440413          	addi	s0,s0,1092 # 2444 <_test_table_size+0x2443>
    80002160:	72d2a0ef          	jal	8002d08c <printf>
    80002164:	4a848663          	beq	s1,s0,80002610 <check_xip_regs_3+0x500>
    80002168:	0002e597          	auipc	a1,0x2e
    8000216c:	e6058593          	addi	a1,a1,-416 # 8002ffc8 <__func__.0+0x2d8>
    80002170:	0002e517          	auipc	a0,0x2e
    80002174:	e9850513          	addi	a0,a0,-360 # 80030008 <__func__.0+0x318>
    80002178:	7152a0ef          	jal	8002d08c <printf>
    8000217c:	0002e517          	auipc	a0,0x2e
    80002180:	e9450513          	addi	a0,a0,-364 # 80030010 <__func__.0+0x320>
    80002184:	7092a0ef          	jal	8002d08c <printf>
    80002188:	86a2                	mv	a3,s0
    8000218a:	8626                	mv	a2,s1
    8000218c:	02d00593          	li	a1,45
    80002190:	0002e517          	auipc	a0,0x2e
    80002194:	32850513          	addi	a0,a0,808 # 800304b8 <__func__.0+0x7c8>
    80002198:	6f52a0ef          	jal	8002d08c <printf>
    8000219c:	02900513          	li	a0,41
    800021a0:	3db290ef          	jal	8002bd7a <putchar>
    800021a4:	4529                	li	a0,10
    800021a6:	3d5290ef          	jal	8002bd7a <putchar>
    800021aa:	4401                	li	s0,0
    check_csr_rd("hip", CSR_HIP, 0x444);
    800021ac:	644024f3          	csrr	s1,hip
    800021b0:	0002e617          	auipc	a2,0x2e
    800021b4:	30060613          	addi	a2,a2,768 # 800304b0 <__func__.0+0x7c0>
    800021b8:	08200593          	li	a1,130
    800021bc:	0002e517          	auipc	a0,0x2e
    800021c0:	e3450513          	addi	a0,a0,-460 # 8002fff0 <__func__.0+0x300>
    800021c4:	44400913          	li	s2,1092
    800021c8:	6c52a0ef          	jal	8002d08c <printf>
    800021cc:	3f248863          	beq	s1,s2,800025bc <check_xip_regs_3+0x4ac>
    800021d0:	0002e597          	auipc	a1,0x2e
    800021d4:	df858593          	addi	a1,a1,-520 # 8002ffc8 <__func__.0+0x2d8>
    800021d8:	0002e517          	auipc	a0,0x2e
    800021dc:	e3050513          	addi	a0,a0,-464 # 80030008 <__func__.0+0x318>
    800021e0:	6ad2a0ef          	jal	8002d08c <printf>
    800021e4:	0002e517          	auipc	a0,0x2e
    800021e8:	e2c50513          	addi	a0,a0,-468 # 80030010 <__func__.0+0x320>
    800021ec:	6a12a0ef          	jal	8002d08c <printf>
    800021f0:	86ca                	mv	a3,s2
    800021f2:	8626                	mv	a2,s1
    800021f4:	02d00593          	li	a1,45
    800021f8:	0002e517          	auipc	a0,0x2e
    800021fc:	2c050513          	addi	a0,a0,704 # 800304b8 <__func__.0+0x7c8>
    80002200:	68d2a0ef          	jal	8002d08c <printf>
    80002204:	02900513          	li	a0,41
    80002208:	373290ef          	jal	8002bd7a <putchar>
    8000220c:	4529                	li	a0,10
    8000220e:	36d290ef          	jal	8002bd7a <putchar>
    80002212:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80002214:	144024f3          	csrr	s1,sip
    80002218:	0002e617          	auipc	a2,0x2e
    8000221c:	2b860613          	addi	a2,a2,696 # 800304d0 <__func__.0+0x7e0>
    80002220:	08200593          	li	a1,130
    80002224:	0002e517          	auipc	a0,0x2e
    80002228:	dcc50513          	addi	a0,a0,-564 # 8002fff0 <__func__.0+0x300>
    8000222c:	6612a0ef          	jal	8002d08c <printf>
    80002230:	2e048763          	beqz	s1,8000251e <check_xip_regs_3+0x40e>
    80002234:	0002e597          	auipc	a1,0x2e
    80002238:	d9458593          	addi	a1,a1,-620 # 8002ffc8 <__func__.0+0x2d8>
    8000223c:	0002e517          	auipc	a0,0x2e
    80002240:	dcc50513          	addi	a0,a0,-564 # 80030008 <__func__.0+0x318>
    80002244:	6492a0ef          	jal	8002d08c <printf>
    80002248:	0002e517          	auipc	a0,0x2e
    8000224c:	dc850513          	addi	a0,a0,-568 # 80030010 <__func__.0+0x320>
    80002250:	63d2a0ef          	jal	8002d08c <printf>
    80002254:	8626                	mv	a2,s1
    80002256:	4681                	li	a3,0
    80002258:	02d00593          	li	a1,45
    8000225c:	0002e517          	auipc	a0,0x2e
    80002260:	25c50513          	addi	a0,a0,604 # 800304b8 <__func__.0+0x7c8>
    80002264:	6292a0ef          	jal	8002d08c <printf>
    80002268:	02900513          	li	a0,41
    8000226c:	30f290ef          	jal	8002bd7a <putchar>
    80002270:	4529                	li	a0,10
    80002272:	309290ef          	jal	8002bd7a <putchar>
    80002276:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x444, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    80002278:	244024f3          	csrr	s1,vsip
    8000227c:	0002e617          	auipc	a2,0x2e
    80002280:	22460613          	addi	a2,a2,548 # 800304a0 <__func__.0+0x7b0>
    80002284:	08200593          	li	a1,130
    80002288:	0002e517          	auipc	a0,0x2e
    8000228c:	d6850513          	addi	a0,a0,-664 # 8002fff0 <__func__.0+0x300>
    80002290:	22200913          	li	s2,546
    80002294:	5f92a0ef          	jal	8002d08c <printf>
    80002298:	35248e63          	beq	s1,s2,800025f4 <check_xip_regs_3+0x4e4>
    8000229c:	0002e597          	auipc	a1,0x2e
    800022a0:	d2c58593          	addi	a1,a1,-724 # 8002ffc8 <__func__.0+0x2d8>
    800022a4:	0002e517          	auipc	a0,0x2e
    800022a8:	d6450513          	addi	a0,a0,-668 # 80030008 <__func__.0+0x318>
    800022ac:	5e12a0ef          	jal	8002d08c <printf>
    800022b0:	0002e517          	auipc	a0,0x2e
    800022b4:	d6050513          	addi	a0,a0,-672 # 80030010 <__func__.0+0x320>
    800022b8:	5d52a0ef          	jal	8002d08c <printf>
    800022bc:	86ca                	mv	a3,s2
    800022be:	8626                	mv	a2,s1
    800022c0:	02d00593          	li	a1,45
    800022c4:	0002e517          	auipc	a0,0x2e
    800022c8:	1f450513          	addi	a0,a0,500 # 800304b8 <__func__.0+0x7c8>
    800022cc:	5c12a0ef          	jal	8002d08c <printf>
    800022d0:	02900513          	li	a0,41
    800022d4:	2a7290ef          	jal	8002bd7a <putchar>
    800022d8:	4529                	li	a0,10
    800022da:	2a1290ef          	jal	8002bd7a <putchar>
    800022de:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    800022e0:	4509                	li	a0,2
    800022e2:	c27fe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    800022e6:	144024f3          	csrr	s1,sip
    800022ea:	0002e617          	auipc	a2,0x2e
    800022ee:	1ee60613          	addi	a2,a2,494 # 800304d8 <__func__.0+0x7e8>
    800022f2:	08200593          	li	a1,130
    800022f6:	0002e517          	auipc	a0,0x2e
    800022fa:	cfa50513          	addi	a0,a0,-774 # 8002fff0 <__func__.0+0x300>
    800022fe:	22200913          	li	s2,546
    80002302:	58b2a0ef          	jal	8002d08c <printf>
    80002306:	2d248963          	beq	s1,s2,800025d8 <check_xip_regs_3+0x4c8>
    8000230a:	0002e597          	auipc	a1,0x2e
    8000230e:	cbe58593          	addi	a1,a1,-834 # 8002ffc8 <__func__.0+0x2d8>
    80002312:	0002e517          	auipc	a0,0x2e
    80002316:	cf650513          	addi	a0,a0,-778 # 80030008 <__func__.0+0x318>
    8000231a:	5732a0ef          	jal	8002d08c <printf>
    8000231e:	0002e517          	auipc	a0,0x2e
    80002322:	cf250513          	addi	a0,a0,-782 # 80030010 <__func__.0+0x320>
    80002326:	5672a0ef          	jal	8002d08c <printf>
    8000232a:	86ca                	mv	a3,s2
    8000232c:	8626                	mv	a2,s1
    8000232e:	02d00593          	li	a1,45
    80002332:	0002e517          	auipc	a0,0x2e
    80002336:	18650513          	addi	a0,a0,390 # 800304b8 <__func__.0+0x7c8>
    8000233a:	5532a0ef          	jal	8002d08c <printf>
    8000233e:	02900513          	li	a0,41
    80002342:	239290ef          	jal	8002bd7a <putchar>
    80002346:	4529                	li	a0,10
    80002348:	233290ef          	jal	8002bd7a <putchar>
    8000234c:	4401                	li	s0,0
    goto_priv(PRIV_M);
    8000234e:	4511                	li	a0,4
    80002350:	bb9fe0ef          	jal	80000f08 <goto_priv>

    VERBOSE("clearing all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)0);
    80002354:	64505073          	csrwi	hvip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80002358:	644024f3          	csrr	s1,hip
    8000235c:	0002e617          	auipc	a2,0x2e
    80002360:	15460613          	addi	a2,a2,340 # 800304b0 <__func__.0+0x7c0>
    80002364:	08200593          	li	a1,130
    80002368:	0002e517          	auipc	a0,0x2e
    8000236c:	c8850513          	addi	a0,a0,-888 # 8002fff0 <__func__.0+0x300>
    80002370:	51d2a0ef          	jal	8002d08c <printf>
    80002374:	22048663          	beqz	s1,800025a0 <check_xip_regs_3+0x490>
    80002378:	0002e597          	auipc	a1,0x2e
    8000237c:	c5058593          	addi	a1,a1,-944 # 8002ffc8 <__func__.0+0x2d8>
    80002380:	0002e517          	auipc	a0,0x2e
    80002384:	c8850513          	addi	a0,a0,-888 # 80030008 <__func__.0+0x318>
    80002388:	5052a0ef          	jal	8002d08c <printf>
    8000238c:	0002e517          	auipc	a0,0x2e
    80002390:	c8450513          	addi	a0,a0,-892 # 80030010 <__func__.0+0x320>
    80002394:	4f92a0ef          	jal	8002d08c <printf>
    80002398:	8626                	mv	a2,s1
    8000239a:	4681                	li	a3,0
    8000239c:	02d00593          	li	a1,45
    800023a0:	0002e517          	auipc	a0,0x2e
    800023a4:	11850513          	addi	a0,a0,280 # 800304b8 <__func__.0+0x7c8>
    800023a8:	4e52a0ef          	jal	8002d08c <printf>
    800023ac:	02900513          	li	a0,41
    800023b0:	1cb290ef          	jal	8002bd7a <putchar>
    800023b4:	4529                	li	a0,10
    800023b6:	1c5290ef          	jal	8002bd7a <putchar>
    800023ba:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    800023bc:	144024f3          	csrr	s1,sip
    800023c0:	0002e617          	auipc	a2,0x2e
    800023c4:	11060613          	addi	a2,a2,272 # 800304d0 <__func__.0+0x7e0>
    800023c8:	08200593          	li	a1,130
    800023cc:	0002e517          	auipc	a0,0x2e
    800023d0:	c2450513          	addi	a0,a0,-988 # 8002fff0 <__func__.0+0x300>
    800023d4:	4b92a0ef          	jal	8002d08c <printf>
    800023d8:	1a048663          	beqz	s1,80002584 <check_xip_regs_3+0x474>
    800023dc:	0002e597          	auipc	a1,0x2e
    800023e0:	bec58593          	addi	a1,a1,-1044 # 8002ffc8 <__func__.0+0x2d8>
    800023e4:	0002e517          	auipc	a0,0x2e
    800023e8:	c2450513          	addi	a0,a0,-988 # 80030008 <__func__.0+0x318>
    800023ec:	4a12a0ef          	jal	8002d08c <printf>
    800023f0:	0002e517          	auipc	a0,0x2e
    800023f4:	c2050513          	addi	a0,a0,-992 # 80030010 <__func__.0+0x320>
    800023f8:	4952a0ef          	jal	8002d08c <printf>
    800023fc:	8626                	mv	a2,s1
    800023fe:	4681                	li	a3,0
    80002400:	02d00593          	li	a1,45
    80002404:	0002e517          	auipc	a0,0x2e
    80002408:	0b450513          	addi	a0,a0,180 # 800304b8 <__func__.0+0x7c8>
    8000240c:	4812a0ef          	jal	8002d08c <printf>
    80002410:	02900513          	li	a0,41
    80002414:	167290ef          	jal	8002bd7a <putchar>
    80002418:	4529                	li	a0,10
    8000241a:	161290ef          	jal	8002bd7a <putchar>
    8000241e:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80002420:	244024f3          	csrr	s1,vsip
    80002424:	0002e617          	auipc	a2,0x2e
    80002428:	07c60613          	addi	a2,a2,124 # 800304a0 <__func__.0+0x7b0>
    8000242c:	08200593          	li	a1,130
    80002430:	0002e517          	auipc	a0,0x2e
    80002434:	bc050513          	addi	a0,a0,-1088 # 8002fff0 <__func__.0+0x300>
    80002438:	4552a0ef          	jal	8002d08c <printf>
    8000243c:	12048663          	beqz	s1,80002568 <check_xip_regs_3+0x458>
    80002440:	0002e597          	auipc	a1,0x2e
    80002444:	b8858593          	addi	a1,a1,-1144 # 8002ffc8 <__func__.0+0x2d8>
    80002448:	0002e517          	auipc	a0,0x2e
    8000244c:	bc050513          	addi	a0,a0,-1088 # 80030008 <__func__.0+0x318>
    80002450:	43d2a0ef          	jal	8002d08c <printf>
    80002454:	0002e517          	auipc	a0,0x2e
    80002458:	bbc50513          	addi	a0,a0,-1092 # 80030010 <__func__.0+0x320>
    8000245c:	4312a0ef          	jal	8002d08c <printf>
    80002460:	8626                	mv	a2,s1
    80002462:	4681                	li	a3,0
    80002464:	02d00593          	li	a1,45
    80002468:	0002e517          	auipc	a0,0x2e
    8000246c:	05050513          	addi	a0,a0,80 # 800304b8 <__func__.0+0x7c8>
    80002470:	41d2a0ef          	jal	8002d08c <printf>
    80002474:	02900513          	li	a0,41
    80002478:	103290ef          	jal	8002bd7a <putchar>
    8000247c:	4529                	li	a0,10
    8000247e:	0fd290ef          	jal	8002bd7a <putchar>
    80002482:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80002484:	4509                	li	a0,2
    80002486:	a83fe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8000248a:	144024f3          	csrr	s1,sip
    8000248e:	0002e617          	auipc	a2,0x2e
    80002492:	04a60613          	addi	a2,a2,74 # 800304d8 <__func__.0+0x7e8>
    80002496:	08200593          	li	a1,130
    8000249a:	0002e517          	auipc	a0,0x2e
    8000249e:	b5650513          	addi	a0,a0,-1194 # 8002fff0 <__func__.0+0x300>
    800024a2:	3eb2a0ef          	jal	8002d08c <printf>
    800024a6:	c8d1                	beqz	s1,8000253a <check_xip_regs_3+0x42a>
    800024a8:	0002e597          	auipc	a1,0x2e
    800024ac:	b2058593          	addi	a1,a1,-1248 # 8002ffc8 <__func__.0+0x2d8>
    800024b0:	0002e517          	auipc	a0,0x2e
    800024b4:	b5850513          	addi	a0,a0,-1192 # 80030008 <__func__.0+0x318>
    800024b8:	3d52a0ef          	jal	8002d08c <printf>
    800024bc:	0002e517          	auipc	a0,0x2e
    800024c0:	b5450513          	addi	a0,a0,-1196 # 80030010 <__func__.0+0x320>
    800024c4:	3c92a0ef          	jal	8002d08c <printf>
    800024c8:	8626                	mv	a2,s1
    800024ca:	4681                	li	a3,0
    800024cc:	02d00593          	li	a1,45
    800024d0:	0002e517          	auipc	a0,0x2e
    800024d4:	fe850513          	addi	a0,a0,-24 # 800304b8 <__func__.0+0x7c8>
    800024d8:	3b52a0ef          	jal	8002d08c <printf>
    800024dc:	02900513          	li	a0,41
    800024e0:	09b290ef          	jal	8002bd7a <putchar>
    800024e4:	4529                	li	a0,10
    800024e6:	095290ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    800024ea:	4511                	li	a0,4
    800024ec:	a1dfe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800024f0:	4401                	li	s0,0

    TEST_END();
    800024f2:	0002e597          	auipc	a1,0x2e
    800024f6:	ad658593          	addi	a1,a1,-1322 # 8002ffc8 <__func__.0+0x2d8>
    800024fa:	0002e517          	auipc	a0,0x2e
    800024fe:	b7650513          	addi	a0,a0,-1162 # 80030070 <__func__.0+0x380>
    80002502:	38b2a0ef          	jal	8002d08c <printf>
    80002506:	4511                	li	a0,4
    80002508:	a01fe0ef          	jal	80000f08 <goto_priv>
    8000250c:	bc6ff0ef          	jal	800018d2 <reset_state>
}
    80002510:	60e2                	ld	ra,24(sp)
    80002512:	8522                	mv	a0,s0
    80002514:	6442                	ld	s0,16(sp)
    80002516:	64a2                	ld	s1,8(sp)
    80002518:	6902                	ld	s2,0(sp)
    8000251a:	6105                	addi	sp,sp,32
    8000251c:	8082                	ret
    check_csr_rd("sip", sip, 0x0);
    8000251e:	0002e597          	auipc	a1,0x2e
    80002522:	a9a58593          	addi	a1,a1,-1382 # 8002ffb8 <__func__.0+0x2c8>
    80002526:	0002e517          	auipc	a0,0x2e
    8000252a:	ae250513          	addi	a0,a0,-1310 # 80030008 <__func__.0+0x318>
    8000252e:	35f2a0ef          	jal	8002d08c <printf>
    80002532:	4529                	li	a0,10
    80002534:	047290ef          	jal	8002bd7a <putchar>
    80002538:	b381                	j	80002278 <check_xip_regs_3+0x168>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8000253a:	0002e597          	auipc	a1,0x2e
    8000253e:	a7e58593          	addi	a1,a1,-1410 # 8002ffb8 <__func__.0+0x2c8>
    80002542:	0002e517          	auipc	a0,0x2e
    80002546:	ac650513          	addi	a0,a0,-1338 # 80030008 <__func__.0+0x318>
    8000254a:	3432a0ef          	jal	8002d08c <printf>
    8000254e:	4529                	li	a0,10
    80002550:	02b290ef          	jal	8002bd7a <putchar>
    80002554:	d859                	beqz	s0,800024ea <check_xip_regs_3+0x3da>
    goto_priv(PRIV_M);
    80002556:	4511                	li	a0,4
    80002558:	9b1fe0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8000255c:	4405                	li	s0,1
    TEST_END();
    8000255e:	0002e597          	auipc	a1,0x2e
    80002562:	a5a58593          	addi	a1,a1,-1446 # 8002ffb8 <__func__.0+0x2c8>
    80002566:	bf51                	j	800024fa <check_xip_regs_3+0x3ea>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80002568:	0002e597          	auipc	a1,0x2e
    8000256c:	a5058593          	addi	a1,a1,-1456 # 8002ffb8 <__func__.0+0x2c8>
    80002570:	0002e517          	auipc	a0,0x2e
    80002574:	a9850513          	addi	a0,a0,-1384 # 80030008 <__func__.0+0x318>
    80002578:	3152a0ef          	jal	8002d08c <printf>
    8000257c:	4529                	li	a0,10
    8000257e:	7fc290ef          	jal	8002bd7a <putchar>
    80002582:	b709                	j	80002484 <check_xip_regs_3+0x374>
    check_csr_rd("sip", sip, 0x0);
    80002584:	0002e597          	auipc	a1,0x2e
    80002588:	a3458593          	addi	a1,a1,-1484 # 8002ffb8 <__func__.0+0x2c8>
    8000258c:	0002e517          	auipc	a0,0x2e
    80002590:	a7c50513          	addi	a0,a0,-1412 # 80030008 <__func__.0+0x318>
    80002594:	2f92a0ef          	jal	8002d08c <printf>
    80002598:	4529                	li	a0,10
    8000259a:	7e0290ef          	jal	8002bd7a <putchar>
    8000259e:	b549                	j	80002420 <check_xip_regs_3+0x310>
    check_csr_rd("hip", CSR_HIP, 0x0);
    800025a0:	0002e597          	auipc	a1,0x2e
    800025a4:	a1858593          	addi	a1,a1,-1512 # 8002ffb8 <__func__.0+0x2c8>
    800025a8:	0002e517          	auipc	a0,0x2e
    800025ac:	a6050513          	addi	a0,a0,-1440 # 80030008 <__func__.0+0x318>
    800025b0:	2dd2a0ef          	jal	8002d08c <printf>
    800025b4:	4529                	li	a0,10
    800025b6:	7c4290ef          	jal	8002bd7a <putchar>
    800025ba:	b509                	j	800023bc <check_xip_regs_3+0x2ac>
    check_csr_rd("hip", CSR_HIP, 0x444);
    800025bc:	0002e597          	auipc	a1,0x2e
    800025c0:	9fc58593          	addi	a1,a1,-1540 # 8002ffb8 <__func__.0+0x2c8>
    800025c4:	0002e517          	auipc	a0,0x2e
    800025c8:	a4450513          	addi	a0,a0,-1468 # 80030008 <__func__.0+0x318>
    800025cc:	2c12a0ef          	jal	8002d08c <printf>
    800025d0:	4529                	li	a0,10
    800025d2:	7a8290ef          	jal	8002bd7a <putchar>
    800025d6:	b93d                	j	80002214 <check_xip_regs_3+0x104>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    800025d8:	0002e597          	auipc	a1,0x2e
    800025dc:	9e058593          	addi	a1,a1,-1568 # 8002ffb8 <__func__.0+0x2c8>
    800025e0:	0002e517          	auipc	a0,0x2e
    800025e4:	a2850513          	addi	a0,a0,-1496 # 80030008 <__func__.0+0x318>
    800025e8:	2a52a0ef          	jal	8002d08c <printf>
    800025ec:	4529                	li	a0,10
    800025ee:	78c290ef          	jal	8002bd7a <putchar>
    800025f2:	bbb1                	j	8000234e <check_xip_regs_3+0x23e>
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    800025f4:	0002e597          	auipc	a1,0x2e
    800025f8:	9c458593          	addi	a1,a1,-1596 # 8002ffb8 <__func__.0+0x2c8>
    800025fc:	0002e517          	auipc	a0,0x2e
    80002600:	a0c50513          	addi	a0,a0,-1524 # 80030008 <__func__.0+0x318>
    80002604:	2892a0ef          	jal	8002d08c <printf>
    80002608:	4529                	li	a0,10
    8000260a:	770290ef          	jal	8002bd7a <putchar>
    8000260e:	b9c9                	j	800022e0 <check_xip_regs_3+0x1d0>
    check_csr_rd("hvip", CSR_HVIP, 0x2444);
    80002610:	0002e597          	auipc	a1,0x2e
    80002614:	9a858593          	addi	a1,a1,-1624 # 8002ffb8 <__func__.0+0x2c8>
    80002618:	0002e517          	auipc	a0,0x2e
    8000261c:	9f050513          	addi	a0,a0,-1552 # 80030008 <__func__.0+0x318>
    80002620:	26d2a0ef          	jal	8002d08c <printf>
    80002624:	4529                	li	a0,10
    80002626:	754290ef          	jal	8002bd7a <putchar>
    8000262a:	4405                	li	s0,1
    8000262c:	b641                	j	800021ac <check_xip_regs_3+0x9c>

000000008000262e <interrupt_tests>:

bool interrupt_tests(){
    8000262e:	1101                	addi	sp,sp,-32

    TEST_START();
    80002630:	0002c597          	auipc	a1,0x2c
    80002634:	84858593          	addi	a1,a1,-1976 # 8002de78 <__func__.0>
    80002638:	0002e517          	auipc	a0,0x2e
    8000263c:	9a050513          	addi	a0,a0,-1632 # 8002ffd8 <__func__.0+0x2e8>
bool interrupt_tests(){
    80002640:	ec06                	sd	ra,24(sp)
    80002642:	e822                	sd	s0,16(sp)
    80002644:	e426                	sd	s1,8(sp)
    TEST_START();
    80002646:	2472a0ef          	jal	8002d08c <printf>
    8000264a:	4529                	li	a0,10
    8000264c:	72e290ef          	jal	8002bd7a <putchar>
    /**
     * Test trigerring VSSI without delegating it. 
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    
    goto_priv(PRIV_HS);
    80002650:	450d                	li	a0,3
    80002652:	8b7fe0ef          	jal	80000f08 <goto_priv>
    CSRC(sstatus, SSTATUS_SPIE_BIT | SSTATUS_SIE_BIT); 
    80002656:	02200793          	li	a5,34
    8000265a:	1007b073          	csrc	sstatus,a5
    CSRS(CSR_HIE, 0x4);
    8000265e:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0x4);
    80002662:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    80002666:	fa6fe0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VS);
    8000266a:	4509                	li	a0,2
    8000266c:	89dfe0ef          	jal	80000f08 <goto_priv>
    //CSRS(sstatus, SSTATUS_SIE_BIT);
    TEST_ASSERT("vs sw irq with no delegation", 
    80002670:	08200593          	li	a1,130
    80002674:	0002e617          	auipc	a2,0x2e
    80002678:	e8460613          	addi	a2,a2,-380 # 800304f8 <__func__.0+0x808>
    8000267c:	0002e517          	auipc	a0,0x2e
    80002680:	97450513          	addi	a0,a0,-1676 # 8002fff0 <__func__.0+0x300>
    80002684:	2092a0ef          	jal	8002d08c <printf>
    80002688:	00056797          	auipc	a5,0x56
    8000268c:	9897c783          	lbu	a5,-1655(a5) # 80058011 <excpt+0x1>
    80002690:	00056417          	auipc	s0,0x56
    80002694:	98040413          	addi	s0,s0,-1664 # 80058010 <excpt>
    80002698:	0002e597          	auipc	a1,0x2e
    8000269c:	93058593          	addi	a1,a1,-1744 # 8002ffc8 <__func__.0+0x2d8>
    800026a0:	c799                	beqz	a5,800026ae <interrupt_tests+0x80>
    800026a2:	57fd                	li	a5,-1
    800026a4:	6418                	ld	a4,8(s0)
    800026a6:	17fe                	slli	a5,a5,0x3f
    800026a8:	0789                	addi	a5,a5,2
    800026aa:	16f70863          	beq	a4,a5,8000281a <interrupt_tests+0x1ec>
    800026ae:	0002e517          	auipc	a0,0x2e
    800026b2:	95a50513          	addi	a0,a0,-1702 # 80030008 <__func__.0+0x318>
    800026b6:	1d72a0ef          	jal	8002d08c <printf>
    800026ba:	00056797          	auipc	a5,0x56
    800026be:	9577c783          	lbu	a5,-1705(a5) # 80058011 <excpt+0x1>
    800026c2:	c799                	beqz	a5,800026d0 <interrupt_tests+0xa2>
    800026c4:	57fd                	li	a5,-1
    800026c6:	6418                	ld	a4,8(s0)
    800026c8:	17fe                	slli	a5,a5,0x3f
    800026ca:	0789                	addi	a5,a5,2
    800026cc:	12f70f63          	beq	a4,a5,8000280a <interrupt_tests+0x1dc>
    800026d0:	0002e517          	auipc	a0,0x2e
    800026d4:	94050513          	addi	a0,a0,-1728 # 80030010 <__func__.0+0x320>
    800026d8:	1b52a0ef          	jal	8002d08c <printf>
    800026dc:	02900513          	li	a0,41
    800026e0:	69a290ef          	jal	8002bd7a <putchar>
    800026e4:	4529                	li	a0,10
    800026e6:	694290ef          	jal	8002bd7a <putchar>
    800026ea:	00056797          	auipc	a5,0x56
    800026ee:	9277c783          	lbu	a5,-1753(a5) # 80058011 <excpt+0x1>
    800026f2:	4481                	li	s1,0
    800026f4:	c799                	beqz	a5,80002702 <interrupt_tests+0xd4>
    800026f6:	57fd                	li	a5,-1
    800026f8:	6418                	ld	a4,8(s0)
    800026fa:	17fe                	slli	a5,a5,0x3f
    800026fc:	0789                	addi	a5,a5,2
    800026fe:	12f70e63          	beq	a4,a5,8000283a <interrupt_tests+0x20c>
   
    /**
     * Test trigerring VSSI and delegating it. Should trap to VS with cause SSI.
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    goto_priv(PRIV_HS);
    80002702:	450d                	li	a0,3
    80002704:	805fe0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIDELEG, 0x4);
    80002708:	60326073          	csrsi	hideleg,4
    CSRS(CSR_HIP, 0x4);
    8000270c:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    80002710:	efcfe0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VS);
    80002714:	4509                	li	a0,2
    80002716:	ff2fe0ef          	jal	80000f08 <goto_priv>
    CSRS(sie, 0x2);
    8000271a:	10416073          	csrsi	sie,2
    CSRS(sstatus, 0x2);
    8000271e:	10016073          	csrsi	sstatus,2
    TEST_ASSERT("vs sw irq with delegation", 
    80002722:	08200593          	li	a1,130
    80002726:	0002e617          	auipc	a2,0x2e
    8000272a:	df260613          	addi	a2,a2,-526 # 80030518 <__func__.0+0x828>
    8000272e:	0002e517          	auipc	a0,0x2e
    80002732:	8c250513          	addi	a0,a0,-1854 # 8002fff0 <__func__.0+0x300>
    80002736:	1572a0ef          	jal	8002d08c <printf>
    8000273a:	00056797          	auipc	a5,0x56
    8000273e:	8d77c783          	lbu	a5,-1833(a5) # 80058011 <excpt+0x1>
    80002742:	0002e597          	auipc	a1,0x2e
    80002746:	88658593          	addi	a1,a1,-1914 # 8002ffc8 <__func__.0+0x2d8>
    8000274a:	c799                	beqz	a5,80002758 <interrupt_tests+0x12a>
    8000274c:	57fd                	li	a5,-1
    8000274e:	6418                	ld	a4,8(s0)
    80002750:	17fe                	slli	a5,a5,0x3f
    80002752:	0785                	addi	a5,a5,1
    80002754:	0ef70b63          	beq	a4,a5,8000284a <interrupt_tests+0x21c>
    80002758:	0002e517          	auipc	a0,0x2e
    8000275c:	8b050513          	addi	a0,a0,-1872 # 80030008 <__func__.0+0x318>
    80002760:	12d2a0ef          	jal	8002d08c <printf>
    80002764:	00056797          	auipc	a5,0x56
    80002768:	8ad7c783          	lbu	a5,-1875(a5) # 80058011 <excpt+0x1>
    8000276c:	c799                	beqz	a5,8000277a <interrupt_tests+0x14c>
    8000276e:	57fd                	li	a5,-1
    80002770:	6418                	ld	a4,8(s0)
    80002772:	17fe                	slli	a5,a5,0x3f
    80002774:	0785                	addi	a5,a5,1
    80002776:	08f70263          	beq	a4,a5,800027fa <interrupt_tests+0x1cc>
    8000277a:	0002e517          	auipc	a0,0x2e
    8000277e:	89650513          	addi	a0,a0,-1898 # 80030010 <__func__.0+0x320>
    80002782:	10b2a0ef          	jal	8002d08c <printf>
    80002786:	02900513          	li	a0,41
    8000278a:	5f0290ef          	jal	8002bd7a <putchar>
    8000278e:	4529                	li	a0,10
    80002790:	5ea290ef          	jal	8002bd7a <putchar>
    80002794:	cca9                	beqz	s1,800027ee <interrupt_tests+0x1c0>
    80002796:	00056497          	auipc	s1,0x56
    8000279a:	87b4c483          	lbu	s1,-1925(s1) # 80058011 <excpt+0x1>


    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    

    TEST_END();
    8000279e:	0002e597          	auipc	a1,0x2e
    800027a2:	82a58593          	addi	a1,a1,-2006 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs sw irq with delegation", 
    800027a6:	c881                	beqz	s1,800027b6 <interrupt_tests+0x188>
    800027a8:	57fd                	li	a5,-1
    800027aa:	6418                	ld	a4,8(s0)
    800027ac:	17fe                	slli	a5,a5,0x3f
    800027ae:	0785                	addi	a5,a5,1
    800027b0:	02f70463          	beq	a4,a5,800027d8 <interrupt_tests+0x1aa>
    800027b4:	4481                	li	s1,0
    TEST_END();
    800027b6:	0002e517          	auipc	a0,0x2e
    800027ba:	8ba50513          	addi	a0,a0,-1862 # 80030070 <__func__.0+0x380>
    800027be:	0cf2a0ef          	jal	8002d08c <printf>
    800027c2:	4511                	li	a0,4
    800027c4:	f44fe0ef          	jal	80000f08 <goto_priv>
    800027c8:	90aff0ef          	jal	800018d2 <reset_state>
}
    800027cc:	60e2                	ld	ra,24(sp)
    800027ce:	6442                	ld	s0,16(sp)
    800027d0:	8526                	mv	a0,s1
    800027d2:	64a2                	ld	s1,8(sp)
    800027d4:	6105                	addi	sp,sp,32
    800027d6:	8082                	ret
    TEST_ASSERT("vs sw irq with delegation", 
    800027d8:	00056717          	auipc	a4,0x56
    800027dc:	83c72703          	lw	a4,-1988(a4) # 80058014 <excpt+0x4>
    800027e0:	4789                	li	a5,2
    TEST_END();
    800027e2:	0002d597          	auipc	a1,0x2d
    800027e6:	7d658593          	addi	a1,a1,2006 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs sw irq with delegation", 
    800027ea:	fcf706e3          	beq	a4,a5,800027b6 <interrupt_tests+0x188>
    800027ee:	4481                	li	s1,0
    TEST_END();
    800027f0:	0002d597          	auipc	a1,0x2d
    800027f4:	7d858593          	addi	a1,a1,2008 # 8002ffc8 <__func__.0+0x2d8>
    800027f8:	bf7d                	j	800027b6 <interrupt_tests+0x188>
    TEST_ASSERT("vs sw irq with delegation", 
    800027fa:	00056717          	auipc	a4,0x56
    800027fe:	81a72703          	lw	a4,-2022(a4) # 80058014 <excpt+0x4>
    80002802:	4789                	li	a5,2
    80002804:	f6f71be3          	bne	a4,a5,8000277a <interrupt_tests+0x14c>
    80002808:	b759                	j	8000278e <interrupt_tests+0x160>
    TEST_ASSERT("vs sw irq with no delegation", 
    8000280a:	00056717          	auipc	a4,0x56
    8000280e:	80a72703          	lw	a4,-2038(a4) # 80058014 <excpt+0x4>
    80002812:	478d                	li	a5,3
    80002814:	eaf71ee3          	bne	a4,a5,800026d0 <interrupt_tests+0xa2>
    80002818:	b5f1                	j	800026e4 <interrupt_tests+0xb6>
    8000281a:	00055717          	auipc	a4,0x55
    8000281e:	7fa72703          	lw	a4,2042(a4) # 80058014 <excpt+0x4>
    80002822:	478d                	li	a5,3
    80002824:	0002d597          	auipc	a1,0x2d
    80002828:	79458593          	addi	a1,a1,1940 # 8002ffb8 <__func__.0+0x2c8>
    8000282c:	e8f701e3          	beq	a4,a5,800026ae <interrupt_tests+0x80>
    80002830:	0002d597          	auipc	a1,0x2d
    80002834:	79858593          	addi	a1,a1,1944 # 8002ffc8 <__func__.0+0x2d8>
    80002838:	bd9d                	j	800026ae <interrupt_tests+0x80>
    8000283a:	00055497          	auipc	s1,0x55
    8000283e:	7da4a483          	lw	s1,2010(s1) # 80058014 <excpt+0x4>
    80002842:	14f5                	addi	s1,s1,-3
    80002844:	0014b493          	seqz	s1,s1
    80002848:	bd6d                	j	80002702 <interrupt_tests+0xd4>
    TEST_ASSERT("vs sw irq with delegation", 
    8000284a:	00055717          	auipc	a4,0x55
    8000284e:	7ca72703          	lw	a4,1994(a4) # 80058014 <excpt+0x4>
    80002852:	4789                	li	a5,2
    80002854:	0002d597          	auipc	a1,0x2d
    80002858:	76458593          	addi	a1,a1,1892 # 8002ffb8 <__func__.0+0x2c8>
    8000285c:	eef70ee3          	beq	a4,a5,80002758 <interrupt_tests+0x12a>
    80002860:	0002d597          	auipc	a1,0x2d
    80002864:	76858593          	addi	a1,a1,1896 # 8002ffc8 <__func__.0+0x2d8>
    80002868:	bdc5                	j	80002758 <interrupt_tests+0x12a>

000000008000286a <two_stage_translation_1>:

static inline void touch(uintptr_t addr){
    touchwrite(addr);
}

bool two_stage_translation_1(){
    8000286a:	7139                	addi	sp,sp,-64
    
    TEST_START();
    8000286c:	0002b597          	auipc	a1,0x2b
    80002870:	61c58593          	addi	a1,a1,1564 # 8002de88 <__func__.20>
    80002874:	0002d517          	auipc	a0,0x2d
    80002878:	76450513          	addi	a0,a0,1892 # 8002ffd8 <__func__.0+0x2e8>
bool two_stage_translation_1(){
    8000287c:	fc06                	sd	ra,56(sp)
    8000287e:	f822                	sd	s0,48(sp)
    80002880:	f426                	sd	s1,40(sp)
    80002882:	f04a                	sd	s2,32(sp)
    80002884:	ec4e                	sd	s3,24(sp)
    TEST_START();
    80002886:	0072a0ef          	jal	8002d08c <printf>
    8000288a:	4529                	li	a0,10
    8000288c:	4ee290ef          	jal	8002bd7a <putchar>
static inline uint8_t read8(uintptr_t addr){
    return *((volatile uint8_t*) addr);    
}

static inline void write64(uintptr_t addr, uint64_t val){
    *((volatile uint64_t*) addr) = val;
    80002890:	2201b737          	lui	a4,0x2201b
    80002894:	000887b7          	lui	a5,0x88
    80002898:	070a                	slli	a4,a4,0x2
    8000289a:	44c5                	li	s1,17
    8000289c:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    800028a0:	e304                	sd	s1,0(a4)
    800028a2:	07b2                	slli	a5,a5,0xc
    800028a4:	02200913          	li	s2,34
    800028a8:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    800028ac:	450d                	li	a0,3
    800028ae:	e5afe0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800028b2:	d2ffd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800028b6:	90efe0ef          	jal	800009c4 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    800028ba:	ec3fd0ef          	jal	8000077c <vspt_init>
    return *((volatile uint64_t*) addr);
    800028be:	4001b737          	lui	a4,0x4001b
    800028c2:	070a                	slli	a4,a4,0x2
    800028c4:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800028c8:	001007b7          	lui	a5,0x100
    800028cc:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800028d0:	07b2                	slli	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    800028d2:	0002e617          	auipc	a2,0x2e
    800028d6:	c6660613          	addi	a2,a2,-922 # 80030538 <__func__.0+0x848>
    800028da:	08200593          	li	a1,130
    800028de:	0002d517          	auipc	a0,0x2d
    800028e2:	71250513          	addi	a0,a0,1810 # 8002fff0 <__func__.0+0x300>
    800028e6:	6380                	ld	s0,0(a5)
    800028e8:	7a42a0ef          	jal	8002d08c <printf>
    800028ec:	3a998963          	beq	s3,s1,80002c9e <two_stage_translation_1+0x434>
    800028f0:	0002d597          	auipc	a1,0x2d
    800028f4:	6d858593          	addi	a1,a1,1752 # 8002ffc8 <__func__.0+0x2d8>
    800028f8:	0002d517          	auipc	a0,0x2d
    800028fc:	71050513          	addi	a0,a0,1808 # 80030008 <__func__.0+0x318>
    80002900:	78c2a0ef          	jal	8002d08c <printf>
    80002904:	0002d517          	auipc	a0,0x2d
    80002908:	70c50513          	addi	a0,a0,1804 # 80030010 <__func__.0+0x320>
    8000290c:	7802a0ef          	jal	8002d08c <printf>
    80002910:	02900513          	li	a0,41
    80002914:	466290ef          	jal	8002bd7a <putchar>
    80002918:	4529                	li	a0,10
    8000291a:	460290ef          	jal	8002bd7a <putchar>
    8000291e:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    80002920:	450d                	li	a0,3
    80002922:	de6fe0ef          	jal	80000f08 <goto_priv>
    hpt_switch();
    80002926:	cb0fe0ef          	jal	80000dd6 <hpt_switch>
    asm volatile(
    8000292a:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8000292e:	62000073          	.insn	4, 0x62000073
    hfence();
    goto_priv(PRIV_VS);
    80002932:	4509                	li	a0,2
    80002934:	dd4fe0ef          	jal	80000f08 <goto_priv>
    80002938:	001007b7          	lui	a5,0x100
    8000293c:	4001b737          	lui	a4,0x4001b
    80002940:	070a                	slli	a4,a4,0x2
    80002942:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002946:	07b2                	slli	a5,a5,0xc
    80002948:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    8000294c:	0002e617          	auipc	a2,0x2e
    80002950:	c0460613          	addi	a2,a2,-1020 # 80030550 <__func__.0+0x860>
    80002954:	08200593          	li	a1,130
    80002958:	0002d517          	auipc	a0,0x2d
    8000295c:	69850513          	addi	a0,a0,1688 # 8002fff0 <__func__.0+0x300>
    80002960:	6384                	ld	s1,0(a5)
    80002962:	72a2a0ef          	jal	8002d08c <printf>
    80002966:	02200793          	li	a5,34
    8000296a:	2ef90a63          	beq	s2,a5,80002c5e <two_stage_translation_1+0x3f4>
    8000296e:	0002d597          	auipc	a1,0x2d
    80002972:	65a58593          	addi	a1,a1,1626 # 8002ffc8 <__func__.0+0x2d8>
    80002976:	0002d517          	auipc	a0,0x2d
    8000297a:	69250513          	addi	a0,a0,1682 # 80030008 <__func__.0+0x318>
    8000297e:	70e2a0ef          	jal	8002d08c <printf>
    80002982:	0002d517          	auipc	a0,0x2d
    80002986:	68e50513          	addi	a0,a0,1678 # 80030010 <__func__.0+0x320>
    8000298a:	7022a0ef          	jal	8002d08c <printf>
    8000298e:	02900513          	li	a0,41
    80002992:	3e8290ef          	jal	8002bd7a <putchar>
    80002996:	4529                	li	a0,10
    80002998:	3e2290ef          	jal	8002bd7a <putchar>
    8000299c:	4401                	li	s0,0

    vspt_switch();
    8000299e:	c16fe0ef          	jal	80000db4 <vspt_switch>
    asm volatile ("sfence.vma \n\t");
    800029a2:	12000073          	sfence.vma
    800029a6:	001007b7          	lui	a5,0x100
    800029aa:	4001b737          	lui	a4,0x4001b
    800029ae:	070a                	slli	a4,a4,0x2
    800029b0:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800029b4:	07b2                	slli	a5,a5,0xc
    800029b6:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    sfence();
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    800029ba:	0002e617          	auipc	a2,0x2e
    800029be:	bce60613          	addi	a2,a2,-1074 # 80030588 <__func__.0+0x898>
    800029c2:	08200593          	li	a1,130
    800029c6:	0002d517          	auipc	a0,0x2d
    800029ca:	62a50513          	addi	a0,a0,1578 # 8002fff0 <__func__.0+0x300>
    800029ce:	6384                	ld	s1,0(a5)
    800029d0:	6bc2a0ef          	jal	8002d08c <printf>
    800029d4:	47c5                	li	a5,17
    800029d6:	32f90063          	beq	s2,a5,80002cf6 <two_stage_translation_1+0x48c>
    800029da:	0002d597          	auipc	a1,0x2d
    800029de:	5ee58593          	addi	a1,a1,1518 # 8002ffc8 <__func__.0+0x2d8>
    800029e2:	0002d517          	auipc	a0,0x2d
    800029e6:	62650513          	addi	a0,a0,1574 # 80030008 <__func__.0+0x318>
    800029ea:	6a22a0ef          	jal	8002d08c <printf>
    800029ee:	0002d517          	auipc	a0,0x2d
    800029f2:	62250513          	addi	a0,a0,1570 # 80030010 <__func__.0+0x320>
    800029f6:	6962a0ef          	jal	8002d08c <printf>
    800029fa:	02900513          	li	a0,41
    800029fe:	37c290ef          	jal	8002bd7a <putchar>
    80002a02:	4529                	li	a0,10
    80002a04:	376290ef          	jal	8002bd7a <putchar>
    80002a08:	4481                	li	s1,0

    goto_priv(PRIV_M); 
    80002a0a:	4511                	li	a0,4
    80002a0c:	cfcfe0ef          	jal	80000f08 <goto_priv>
    CSRS(medeleg, 1ull << CAUSE_LGPF);
    80002a10:	002007b7          	lui	a5,0x200
    80002a14:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_VS);
    80002a18:	4509                	li	a0,2
    80002a1a:	ceefe0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80002a1e:	beefe0ef          	jal	80000e0c <test_setup_except_function>
    80002a22:	001007b7          	lui	a5,0x100
    80002a26:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002a2a:	07b2                	slli	a5,a5,0xc
    80002a2c:	639c                	ld	a5,0(a5)
    read64(vs_page_base(VSRWX_GI));    
    TEST_ASSERT(
    80002a2e:	08200593          	li	a1,130
    80002a32:	0002e617          	auipc	a2,0x2e
    80002a36:	b8e60613          	addi	a2,a2,-1138 # 800305c0 <__func__.0+0x8d0>
    80002a3a:	0002d517          	auipc	a0,0x2d
    80002a3e:	5b650513          	addi	a0,a0,1462 # 8002fff0 <__func__.0+0x300>
    80002a42:	64a2a0ef          	jal	8002d08c <printf>
    80002a46:	00055797          	auipc	a5,0x55
    80002a4a:	5cb7c783          	lbu	a5,1483(a5) # 80058011 <excpt+0x1>
    80002a4e:	00055417          	auipc	s0,0x55
    80002a52:	5c240413          	addi	s0,s0,1474 # 80058010 <excpt>
    80002a56:	0002d597          	auipc	a1,0x2d
    80002a5a:	57258593          	addi	a1,a1,1394 # 8002ffc8 <__func__.0+0x2d8>
    80002a5e:	c789                	beqz	a5,80002a68 <two_stage_translation_1+0x1fe>
    80002a60:	6418                	ld	a4,8(s0)
    80002a62:	47d5                	li	a5,21
    80002a64:	3ef70963          	beq	a4,a5,80002e56 <two_stage_translation_1+0x5ec>
    80002a68:	0002d517          	auipc	a0,0x2d
    80002a6c:	5a050513          	addi	a0,a0,1440 # 80030008 <__func__.0+0x318>
    80002a70:	61c2a0ef          	jal	8002d08c <printf>
    80002a74:	00055797          	auipc	a5,0x55
    80002a78:	59d7c783          	lbu	a5,1437(a5) # 80058011 <excpt+0x1>
    80002a7c:	c789                	beqz	a5,80002a86 <two_stage_translation_1+0x21c>
    80002a7e:	6418                	ld	a4,8(s0)
    80002a80:	47d5                	li	a5,21
    80002a82:	2af70c63          	beq	a4,a5,80002d3a <two_stage_translation_1+0x4d0>
    80002a86:	0002d517          	auipc	a0,0x2d
    80002a8a:	58a50513          	addi	a0,a0,1418 # 80030010 <__func__.0+0x320>
    80002a8e:	5fe2a0ef          	jal	8002d08c <printf>
    80002a92:	02900513          	li	a0,41
    80002a96:	2e4290ef          	jal	8002bd7a <putchar>
    80002a9a:	4529                	li	a0,10
    80002a9c:	2de290ef          	jal	8002bd7a <putchar>
    80002aa0:	c899                	beqz	s1,80002ab6 <two_stage_translation_1+0x24c>
    80002aa2:	00055797          	auipc	a5,0x55
    80002aa6:	56f7c783          	lbu	a5,1391(a5) # 80058011 <excpt+0x1>
    80002aaa:	4481                	li	s1,0
    80002aac:	c789                	beqz	a5,80002ab6 <two_stage_translation_1+0x24c>
    80002aae:	6418                	ld	a4,8(s0)
    80002ab0:	47d5                	li	a5,21
    80002ab2:	32f70d63          	beq	a4,a5,80002dec <two_stage_translation_1+0x582>
        excpt.priv == PRIV_HS &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    TEST_SETUP_EXCEPT();
    80002ab6:	b56fe0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vs_page_base(VSRWX_GI)); 
    80002aba:	001007b7          	lui	a5,0x100
    80002abe:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002ac2:	07b2                	slli	a5,a5,0xc
    80002ac4:	00000297          	auipc	t0,0x0
    80002ac8:	00c28293          	addi	t0,t0,12 # 80002ad0 <two_stage_translation_1+0x266>
    80002acc:	02543c23          	sd	t0,56(s0)
    80002ad0:	8782                	jr	a5
    TEST_ASSERT(
    80002ad2:	08200593          	li	a1,130
    80002ad6:	0002e617          	auipc	a2,0x2e
    80002ada:	b1a60613          	addi	a2,a2,-1254 # 800305f0 <__func__.0+0x900>
    80002ade:	0002d517          	auipc	a0,0x2d
    80002ae2:	51250513          	addi	a0,a0,1298 # 8002fff0 <__func__.0+0x300>
    80002ae6:	5a62a0ef          	jal	8002d08c <printf>
    80002aea:	00055797          	auipc	a5,0x55
    80002aee:	5277c783          	lbu	a5,1319(a5) # 80058011 <excpt+0x1>
    80002af2:	0002d597          	auipc	a1,0x2d
    80002af6:	4d658593          	addi	a1,a1,1238 # 8002ffc8 <__func__.0+0x2d8>
    80002afa:	c789                	beqz	a5,80002b04 <two_stage_translation_1+0x29a>
    80002afc:	6418                	ld	a4,8(s0)
    80002afe:	47d1                	li	a5,20
    80002b00:	3af70e63          	beq	a4,a5,80002ebc <two_stage_translation_1+0x652>
    80002b04:	0002d517          	auipc	a0,0x2d
    80002b08:	50450513          	addi	a0,a0,1284 # 80030008 <__func__.0+0x318>
    80002b0c:	5802a0ef          	jal	8002d08c <printf>
    80002b10:	00055797          	auipc	a5,0x55
    80002b14:	5017c783          	lbu	a5,1281(a5) # 80058011 <excpt+0x1>
    80002b18:	c789                	beqz	a5,80002b22 <two_stage_translation_1+0x2b8>
    80002b1a:	6418                	ld	a4,8(s0)
    80002b1c:	47d1                	li	a5,20
    80002b1e:	24f70963          	beq	a4,a5,80002d70 <two_stage_translation_1+0x506>
    80002b22:	0002d517          	auipc	a0,0x2d
    80002b26:	4ee50513          	addi	a0,a0,1262 # 80030010 <__func__.0+0x320>
    80002b2a:	5622a0ef          	jal	8002d08c <printf>
    80002b2e:	02900513          	li	a0,41
    80002b32:	248290ef          	jal	8002bd7a <putchar>
    80002b36:	4529                	li	a0,10
    80002b38:	242290ef          	jal	8002bd7a <putchar>
    80002b3c:	c899                	beqz	s1,80002b52 <two_stage_translation_1+0x2e8>
    80002b3e:	00055797          	auipc	a5,0x55
    80002b42:	4d37c783          	lbu	a5,1235(a5) # 80058011 <excpt+0x1>
    80002b46:	4481                	li	s1,0
    80002b48:	c789                	beqz	a5,80002b52 <two_stage_translation_1+0x2e8>
    80002b4a:	6418                	ld	a4,8(s0)
    80002b4c:	47d1                	li	a5,20
    80002b4e:	26f70a63          	beq	a4,a5,80002dc2 <two_stage_translation_1+0x558>
        excpt.priv == PRIV_M  &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    goto_priv(PRIV_M);
    80002b52:	4511                	li	a0,4
    80002b54:	bb4fe0ef          	jal	80000f08 <goto_priv>
    CSRS(medeleg, 1 << CAUSE_LPF | 1 << CAUSE_LGPF);
    80002b58:	002027b7          	lui	a5,0x202
    80002b5c:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_HS); 
    80002b60:	450d                	li	a0,3
    80002b62:	ba6fe0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HEDELEG, 1 << CAUSE_LPF);
    80002b66:	6789                	lui	a5,0x2
    80002b68:	6027a073          	csrs	hedeleg,a5
    goto_priv(PRIV_VS);
    80002b6c:	4509                	li	a0,2
    80002b6e:	b9afe0ef          	jal	80000f08 <goto_priv>
    80002b72:	12000073          	sfence.vma
    sfence();
    TEST_SETUP_EXCEPT();
    80002b76:	a96fe0ef          	jal	80000e0c <test_setup_except_function>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    80002b7a:	400197b7          	lui	a5,0x40019
    80002b7e:	078a                	slli	a5,a5,0x2
    80002b80:	639c                	ld	a5,0(a5)
    touchread(vs_page_base(VSI_GI));    
    TEST_ASSERT(
    80002b82:	08200593          	li	a1,130
    80002b86:	0002e617          	auipc	a2,0x2e
    80002b8a:	aaa60613          	addi	a2,a2,-1366 # 80030630 <__func__.0+0x940>
    80002b8e:	0002d517          	auipc	a0,0x2d
    80002b92:	46250513          	addi	a0,a0,1122 # 8002fff0 <__func__.0+0x300>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    80002b96:	e43e                	sd	a5,8(sp)
    TEST_ASSERT(
    80002b98:	4f42a0ef          	jal	8002d08c <printf>
    80002b9c:	00055797          	auipc	a5,0x55
    80002ba0:	4757c783          	lbu	a5,1141(a5) # 80058011 <excpt+0x1>
    80002ba4:	0002d597          	auipc	a1,0x2d
    80002ba8:	42458593          	addi	a1,a1,1060 # 8002ffc8 <__func__.0+0x2d8>
    80002bac:	c789                	beqz	a5,80002bb6 <two_stage_translation_1+0x34c>
    80002bae:	6418                	ld	a4,8(s0)
    80002bb0:	47b5                	li	a5,13
    80002bb2:	2cf70f63          	beq	a4,a5,80002e90 <two_stage_translation_1+0x626>
    80002bb6:	0002d517          	auipc	a0,0x2d
    80002bba:	45250513          	addi	a0,a0,1106 # 80030008 <__func__.0+0x318>
    80002bbe:	4ce2a0ef          	jal	8002d08c <printf>
    80002bc2:	00055797          	auipc	a5,0x55
    80002bc6:	44f7c783          	lbu	a5,1103(a5) # 80058011 <excpt+0x1>
    80002bca:	c789                	beqz	a5,80002bd4 <two_stage_translation_1+0x36a>
    80002bcc:	6418                	ld	a4,8(s0)
    80002bce:	47b5                	li	a5,13
    80002bd0:	1cf70b63          	beq	a4,a5,80002da6 <two_stage_translation_1+0x53c>
    80002bd4:	0002d517          	auipc	a0,0x2d
    80002bd8:	43c50513          	addi	a0,a0,1084 # 80030010 <__func__.0+0x320>
    80002bdc:	4b02a0ef          	jal	8002d08c <printf>
    80002be0:	02900513          	li	a0,41
    80002be4:	196290ef          	jal	8002bd7a <putchar>
    80002be8:	4529                	li	a0,10
    80002bea:	190290ef          	jal	8002bd7a <putchar>
    80002bee:	c0b5                	beqz	s1,80002c52 <two_stage_translation_1+0x3e8>
    80002bf0:	00055497          	auipc	s1,0x55
    80002bf4:	4214c483          	lbu	s1,1057(s1) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_VS && 
        excpt.gva == false
    );

    TEST_END();
    80002bf8:	0002d597          	auipc	a1,0x2d
    80002bfc:	3d058593          	addi	a1,a1,976 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT(
    80002c00:	c491                	beqz	s1,80002c0c <two_stage_translation_1+0x3a2>
    80002c02:	6418                	ld	a4,8(s0)
    80002c04:	47b5                	li	a5,13
    80002c06:	02f70663          	beq	a4,a5,80002c32 <two_stage_translation_1+0x3c8>
    80002c0a:	4481                	li	s1,0
    TEST_END();
    80002c0c:	0002d517          	auipc	a0,0x2d
    80002c10:	46450513          	addi	a0,a0,1124 # 80030070 <__func__.0+0x380>
    80002c14:	4782a0ef          	jal	8002d08c <printf>
    80002c18:	4511                	li	a0,4
    80002c1a:	aeefe0ef          	jal	80000f08 <goto_priv>
    80002c1e:	cb5fe0ef          	jal	800018d2 <reset_state>
}
    80002c22:	70e2                	ld	ra,56(sp)
    80002c24:	7442                	ld	s0,48(sp)
    80002c26:	7902                	ld	s2,32(sp)
    80002c28:	69e2                	ld	s3,24(sp)
    80002c2a:	8526                	mv	a0,s1
    80002c2c:	74a2                	ld	s1,40(sp)
    80002c2e:	6121                	addi	sp,sp,64
    80002c30:	8082                	ret
    TEST_ASSERT(
    80002c32:	00055717          	auipc	a4,0x55
    80002c36:	3e272703          	lw	a4,994(a4) # 80058014 <excpt+0x4>
    80002c3a:	4789                	li	a5,2
    80002c3c:	fcf717e3          	bne	a4,a5,80002c0a <two_stage_translation_1+0x3a0>
    80002c40:	00055797          	auipc	a5,0x55
    80002c44:	4007c783          	lbu	a5,1024(a5) # 80058040 <excpt+0x30>
    TEST_END();
    80002c48:	0002d597          	auipc	a1,0x2d
    80002c4c:	37058593          	addi	a1,a1,880 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT(
    80002c50:	dfd5                	beqz	a5,80002c0c <two_stage_translation_1+0x3a2>
    80002c52:	4481                	li	s1,0
    TEST_END();
    80002c54:	0002d597          	auipc	a1,0x2d
    80002c58:	37458593          	addi	a1,a1,884 # 8002ffc8 <__func__.0+0x2d8>
    80002c5c:	bf45                	j	80002c0c <two_stage_translation_1+0x3a2>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002c5e:	47c5                	li	a5,17
    80002c60:	1cf48b63          	beq	s1,a5,80002e36 <two_stage_translation_1+0x5cc>
    80002c64:	0002d597          	auipc	a1,0x2d
    80002c68:	36458593          	addi	a1,a1,868 # 8002ffc8 <__func__.0+0x2d8>
    80002c6c:	0002d517          	auipc	a0,0x2d
    80002c70:	39c50513          	addi	a0,a0,924 # 80030008 <__func__.0+0x318>
    80002c74:	4182a0ef          	jal	8002d08c <printf>
    80002c78:	0002d517          	auipc	a0,0x2d
    80002c7c:	39850513          	addi	a0,a0,920 # 80030010 <__func__.0+0x320>
    80002c80:	40c2a0ef          	jal	8002d08c <printf>
    80002c84:	02900513          	li	a0,41
    80002c88:	0f2290ef          	jal	8002bd7a <putchar>
    80002c8c:	4529                	li	a0,10
    80002c8e:	0ec290ef          	jal	8002bd7a <putchar>
    80002c92:	d00405e3          	beqz	s0,8000299c <two_stage_translation_1+0x132>
    80002c96:	14bd                	addi	s1,s1,-17
    80002c98:	0014b413          	seqz	s0,s1
    80002c9c:	b309                	j	8000299e <two_stage_translation_1+0x134>
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002c9e:	03240e63          	beq	s0,s2,80002cda <two_stage_translation_1+0x470>
    80002ca2:	0002d597          	auipc	a1,0x2d
    80002ca6:	32658593          	addi	a1,a1,806 # 8002ffc8 <__func__.0+0x2d8>
    80002caa:	0002d517          	auipc	a0,0x2d
    80002cae:	35e50513          	addi	a0,a0,862 # 80030008 <__func__.0+0x318>
    80002cb2:	3da2a0ef          	jal	8002d08c <printf>
    80002cb6:	0002d517          	auipc	a0,0x2d
    80002cba:	35a50513          	addi	a0,a0,858 # 80030010 <__func__.0+0x320>
    80002cbe:	3ce2a0ef          	jal	8002d08c <printf>
    80002cc2:	02900513          	li	a0,41
    80002cc6:	0b4290ef          	jal	8002bd7a <putchar>
    80002cca:	4529                	li	a0,10
    80002ccc:	0ae290ef          	jal	8002bd7a <putchar>
    80002cd0:	fde40413          	addi	s0,s0,-34
    80002cd4:	00143413          	seqz	s0,s0
    80002cd8:	b1a1                	j	80002920 <two_stage_translation_1+0xb6>
    80002cda:	0002d597          	auipc	a1,0x2d
    80002cde:	2de58593          	addi	a1,a1,734 # 8002ffb8 <__func__.0+0x2c8>
    80002ce2:	0002d517          	auipc	a0,0x2d
    80002ce6:	32650513          	addi	a0,a0,806 # 80030008 <__func__.0+0x318>
    80002cea:	3a22a0ef          	jal	8002d08c <printf>
    80002cee:	4529                	li	a0,10
    80002cf0:	08a290ef          	jal	8002bd7a <putchar>
    80002cf4:	bff1                	j	80002cd0 <two_stage_translation_1+0x466>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002cf6:	02200793          	li	a5,34
    80002cfa:	10f48e63          	beq	s1,a5,80002e16 <two_stage_translation_1+0x5ac>
    80002cfe:	0002d597          	auipc	a1,0x2d
    80002d02:	2ca58593          	addi	a1,a1,714 # 8002ffc8 <__func__.0+0x2d8>
    80002d06:	0002d517          	auipc	a0,0x2d
    80002d0a:	30250513          	addi	a0,a0,770 # 80030008 <__func__.0+0x318>
    80002d0e:	37e2a0ef          	jal	8002d08c <printf>
    80002d12:	0002d517          	auipc	a0,0x2d
    80002d16:	2fe50513          	addi	a0,a0,766 # 80030010 <__func__.0+0x320>
    80002d1a:	3722a0ef          	jal	8002d08c <printf>
    80002d1e:	02900513          	li	a0,41
    80002d22:	058290ef          	jal	8002bd7a <putchar>
    80002d26:	4529                	li	a0,10
    80002d28:	052290ef          	jal	8002bd7a <putchar>
    80002d2c:	cc040ee3          	beqz	s0,80002a08 <two_stage_translation_1+0x19e>
    80002d30:	fde48493          	addi	s1,s1,-34
    80002d34:	0014b493          	seqz	s1,s1
    80002d38:	b9c9                	j	80002a0a <two_stage_translation_1+0x1a0>
    TEST_ASSERT(
    80002d3a:	7418                	ld	a4,40(s0)
    80002d3c:	400197b7          	lui	a5,0x40019
    80002d40:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002d44:	d4f711e3          	bne	a4,a5,80002a86 <two_stage_translation_1+0x21c>
    80002d48:	00055717          	auipc	a4,0x55
    80002d4c:	2cc72703          	lw	a4,716(a4) # 80058014 <excpt+0x4>
    80002d50:	478d                	li	a5,3
    80002d52:	d2f71ae3          	bne	a4,a5,80002a86 <two_stage_translation_1+0x21c>
    80002d56:	00055797          	auipc	a5,0x55
    80002d5a:	2ea7c783          	lbu	a5,746(a5) # 80058040 <excpt+0x30>
    80002d5e:	d20784e3          	beqz	a5,80002a86 <two_stage_translation_1+0x21c>
    80002d62:	00055797          	auipc	a5,0x55
    80002d66:	2df7c783          	lbu	a5,735(a5) # 80058041 <excpt+0x31>
    80002d6a:	d20798e3          	bnez	a5,80002a9a <two_stage_translation_1+0x230>
    80002d6e:	bb21                	j	80002a86 <two_stage_translation_1+0x21c>
    TEST_ASSERT(
    80002d70:	7418                	ld	a4,40(s0)
    80002d72:	400197b7          	lui	a5,0x40019
    80002d76:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002d7a:	daf714e3          	bne	a4,a5,80002b22 <two_stage_translation_1+0x2b8>
    80002d7e:	00055717          	auipc	a4,0x55
    80002d82:	29672703          	lw	a4,662(a4) # 80058014 <excpt+0x4>
    80002d86:	4791                	li	a5,4
    80002d88:	d8f71de3          	bne	a4,a5,80002b22 <two_stage_translation_1+0x2b8>
    80002d8c:	00055797          	auipc	a5,0x55
    80002d90:	2b47c783          	lbu	a5,692(a5) # 80058040 <excpt+0x30>
    80002d94:	d80787e3          	beqz	a5,80002b22 <two_stage_translation_1+0x2b8>
    80002d98:	00055797          	auipc	a5,0x55
    80002d9c:	2a97c783          	lbu	a5,681(a5) # 80058041 <excpt+0x31>
    80002da0:	d8079be3          	bnez	a5,80002b36 <two_stage_translation_1+0x2cc>
    80002da4:	bbbd                	j	80002b22 <two_stage_translation_1+0x2b8>
    TEST_ASSERT(
    80002da6:	00055717          	auipc	a4,0x55
    80002daa:	26e72703          	lw	a4,622(a4) # 80058014 <excpt+0x4>
    80002dae:	4789                	li	a5,2
    80002db0:	e2f712e3          	bne	a4,a5,80002bd4 <two_stage_translation_1+0x36a>
    80002db4:	00055797          	auipc	a5,0x55
    80002db8:	28c7c783          	lbu	a5,652(a5) # 80058040 <excpt+0x30>
    80002dbc:	e20786e3          	beqz	a5,80002be8 <two_stage_translation_1+0x37e>
    80002dc0:	bd11                	j	80002bd4 <two_stage_translation_1+0x36a>
    TEST_ASSERT(
    80002dc2:	7418                	ld	a4,40(s0)
    80002dc4:	400197b7          	lui	a5,0x40019
    80002dc8:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002dcc:	d8f713e3          	bne	a4,a5,80002b52 <two_stage_translation_1+0x2e8>
    80002dd0:	00055717          	auipc	a4,0x55
    80002dd4:	24472703          	lw	a4,580(a4) # 80058014 <excpt+0x4>
    80002dd8:	4791                	li	a5,4
    80002dda:	d6f71ce3          	bne	a4,a5,80002b52 <two_stage_translation_1+0x2e8>
    80002dde:	03045483          	lhu	s1,48(s0)
    80002de2:	eff48493          	addi	s1,s1,-257
    80002de6:	0014b493          	seqz	s1,s1
    80002dea:	b3a5                	j	80002b52 <two_stage_translation_1+0x2e8>
    TEST_ASSERT(
    80002dec:	7418                	ld	a4,40(s0)
    80002dee:	400197b7          	lui	a5,0x40019
    80002df2:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002df6:	ccf710e3          	bne	a4,a5,80002ab6 <two_stage_translation_1+0x24c>
    80002dfa:	00055717          	auipc	a4,0x55
    80002dfe:	21a72703          	lw	a4,538(a4) # 80058014 <excpt+0x4>
    80002e02:	478d                	li	a5,3
    80002e04:	caf719e3          	bne	a4,a5,80002ab6 <two_stage_translation_1+0x24c>
    80002e08:	03045483          	lhu	s1,48(s0)
    80002e0c:	eff48493          	addi	s1,s1,-257
    80002e10:	0014b493          	seqz	s1,s1
    80002e14:	b14d                	j	80002ab6 <two_stage_translation_1+0x24c>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002e16:	0002d597          	auipc	a1,0x2d
    80002e1a:	1a258593          	addi	a1,a1,418 # 8002ffb8 <__func__.0+0x2c8>
    80002e1e:	0002d517          	auipc	a0,0x2d
    80002e22:	1ea50513          	addi	a0,a0,490 # 80030008 <__func__.0+0x318>
    80002e26:	2662a0ef          	jal	8002d08c <printf>
    80002e2a:	4529                	li	a0,10
    80002e2c:	74f280ef          	jal	8002bd7a <putchar>
    80002e30:	bc040ce3          	beqz	s0,80002a08 <two_stage_translation_1+0x19e>
    80002e34:	bdf5                	j	80002d30 <two_stage_translation_1+0x4c6>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002e36:	0002d597          	auipc	a1,0x2d
    80002e3a:	18258593          	addi	a1,a1,386 # 8002ffb8 <__func__.0+0x2c8>
    80002e3e:	0002d517          	auipc	a0,0x2d
    80002e42:	1ca50513          	addi	a0,a0,458 # 80030008 <__func__.0+0x318>
    80002e46:	2462a0ef          	jal	8002d08c <printf>
    80002e4a:	4529                	li	a0,10
    80002e4c:	72f280ef          	jal	8002bd7a <putchar>
    80002e50:	b40406e3          	beqz	s0,8000299c <two_stage_translation_1+0x132>
    80002e54:	b589                	j	80002c96 <two_stage_translation_1+0x42c>
    TEST_ASSERT(
    80002e56:	7418                	ld	a4,40(s0)
    80002e58:	400197b7          	lui	a5,0x40019
    80002e5c:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002e60:	c0f714e3          	bne	a4,a5,80002a68 <two_stage_translation_1+0x1fe>
    80002e64:	00055717          	auipc	a4,0x55
    80002e68:	1b072703          	lw	a4,432(a4) # 80058014 <excpt+0x4>
    80002e6c:	478d                	li	a5,3
    80002e6e:	bef71de3          	bne	a4,a5,80002a68 <two_stage_translation_1+0x1fe>
    80002e72:	03045703          	lhu	a4,48(s0)
    80002e76:	10100793          	li	a5,257
    80002e7a:	0002d597          	auipc	a1,0x2d
    80002e7e:	13e58593          	addi	a1,a1,318 # 8002ffb8 <__func__.0+0x2c8>
    80002e82:	bef703e3          	beq	a4,a5,80002a68 <two_stage_translation_1+0x1fe>
    80002e86:	0002d597          	auipc	a1,0x2d
    80002e8a:	14258593          	addi	a1,a1,322 # 8002ffc8 <__func__.0+0x2d8>
    80002e8e:	bee9                	j	80002a68 <two_stage_translation_1+0x1fe>
    TEST_ASSERT(
    80002e90:	00055717          	auipc	a4,0x55
    80002e94:	18472703          	lw	a4,388(a4) # 80058014 <excpt+0x4>
    80002e98:	4789                	li	a5,2
    80002e9a:	d0f71ee3          	bne	a4,a5,80002bb6 <two_stage_translation_1+0x34c>
    80002e9e:	00055797          	auipc	a5,0x55
    80002ea2:	1a27c783          	lbu	a5,418(a5) # 80058040 <excpt+0x30>
    80002ea6:	0002d597          	auipc	a1,0x2d
    80002eaa:	11258593          	addi	a1,a1,274 # 8002ffb8 <__func__.0+0x2c8>
    80002eae:	d00784e3          	beqz	a5,80002bb6 <two_stage_translation_1+0x34c>
    80002eb2:	0002d597          	auipc	a1,0x2d
    80002eb6:	11658593          	addi	a1,a1,278 # 8002ffc8 <__func__.0+0x2d8>
    80002eba:	b9f5                	j	80002bb6 <two_stage_translation_1+0x34c>
    TEST_ASSERT(
    80002ebc:	7418                	ld	a4,40(s0)
    80002ebe:	400197b7          	lui	a5,0x40019
    80002ec2:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002ec6:	c2f71fe3          	bne	a4,a5,80002b04 <two_stage_translation_1+0x29a>
    80002eca:	00055717          	auipc	a4,0x55
    80002ece:	14a72703          	lw	a4,330(a4) # 80058014 <excpt+0x4>
    80002ed2:	4791                	li	a5,4
    80002ed4:	c2f718e3          	bne	a4,a5,80002b04 <two_stage_translation_1+0x29a>
    80002ed8:	03045703          	lhu	a4,48(s0)
    80002edc:	10100793          	li	a5,257
    80002ee0:	0002d597          	auipc	a1,0x2d
    80002ee4:	0d858593          	addi	a1,a1,216 # 8002ffb8 <__func__.0+0x2c8>
    80002ee8:	c0f70ee3          	beq	a4,a5,80002b04 <two_stage_translation_1+0x29a>
    80002eec:	0002d597          	auipc	a1,0x2d
    80002ef0:	0dc58593          	addi	a1,a1,220 # 8002ffc8 <__func__.0+0x2d8>
    80002ef4:	b901                	j	80002b04 <two_stage_translation_1+0x29a>

0000000080002ef6 <two_stage_translation_2>:

bool two_stage_translation_2(){
    80002ef6:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80002ef8:	0002b597          	auipc	a1,0x2b
    80002efc:	fa858593          	addi	a1,a1,-88 # 8002dea0 <__func__.17>
    80002f00:	0002d517          	auipc	a0,0x2d
    80002f04:	0d850513          	addi	a0,a0,216 # 8002ffd8 <__func__.0+0x2e8>
bool two_stage_translation_2(){
    80002f08:	f406                	sd	ra,40(sp)
    80002f0a:	f022                	sd	s0,32(sp)
    80002f0c:	ec26                	sd	s1,24(sp)
    80002f0e:	e84a                	sd	s2,16(sp)
    80002f10:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002f12:	17a2a0ef          	jal	8002d08c <printf>
    80002f16:	4529                	li	a0,10
    80002f18:	663280ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    80002f1c:	4511                	li	a0,4
    80002f1e:	febfd0ef          	jal	80000f08 <goto_priv>
    *((volatile uint64_t*) addr) = val;
    80002f22:	2201b737          	lui	a4,0x2201b
    80002f26:	000887b7          	lui	a5,0x88
    80002f2a:	070a                	slli	a4,a4,0x2
    80002f2c:	44c5                	li	s1,17
    80002f2e:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002f32:	e304                	sd	s1,0(a4)
    80002f34:	07b2                	slli	a5,a5,0xc
    80002f36:	02200913          	li	s2,34
    80002f3a:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002f3e:	450d                	li	a0,3
    80002f40:	fc9fd0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80002f44:	e9cfd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002f48:	a7dfd0ef          	jal	800009c4 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002f4c:	831fd0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_VS);
    80002f50:	4509                	li	a0,2
    80002f52:	fb7fd0ef          	jal	80000f08 <goto_priv>
    return *((volatile uint64_t*) addr);
    80002f56:	4001b737          	lui	a4,0x4001b
    80002f5a:	070a                	slli	a4,a4,0x2
    80002f5c:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002f60:	001007b7          	lui	a5,0x100
    80002f64:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002f68:	07b2                	slli	a5,a5,0xc
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002f6a:	0002d617          	auipc	a2,0x2d
    80002f6e:	5ce60613          	addi	a2,a2,1486 # 80030538 <__func__.0+0x848>
    80002f72:	08200593          	li	a1,130
    80002f76:	0002d517          	auipc	a0,0x2d
    80002f7a:	07a50513          	addi	a0,a0,122 # 8002fff0 <__func__.0+0x300>
    80002f7e:	6380                	ld	s0,0(a5)
    80002f80:	10c2a0ef          	jal	8002d08c <printf>
    80002f84:	0c998b63          	beq	s3,s1,8000305a <two_stage_translation_2+0x164>
    80002f88:	0002d597          	auipc	a1,0x2d
    80002f8c:	04058593          	addi	a1,a1,64 # 8002ffc8 <__func__.0+0x2d8>
    80002f90:	0002d517          	auipc	a0,0x2d
    80002f94:	07850513          	addi	a0,a0,120 # 80030008 <__func__.0+0x318>
    80002f98:	0f42a0ef          	jal	8002d08c <printf>
    80002f9c:	0002d517          	auipc	a0,0x2d
    80002fa0:	07450513          	addi	a0,a0,116 # 80030010 <__func__.0+0x320>
    80002fa4:	0e82a0ef          	jal	8002d08c <printf>
    80002fa8:	02900513          	li	a0,41
    80002fac:	5cf280ef          	jal	8002bd7a <putchar>
    80002fb0:	4529                	li	a0,10
    80002fb2:	5c9280ef          	jal	8002bd7a <putchar>
    80002fb6:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    80002fb8:	450d                	li	a0,3
    80002fba:	f4ffd0ef          	jal	80000f08 <goto_priv>
    hpt_switch();
    80002fbe:	e19fd0ef          	jal	80000dd6 <hpt_switch>
    goto_priv(PRIV_VS);
    80002fc2:	4509                	li	a0,2
    80002fc4:	f45fd0ef          	jal	80000f08 <goto_priv>
    80002fc8:	001007b7          	lui	a5,0x100
    80002fcc:	4001b737          	lui	a4,0x4001b
    80002fd0:	070a                	slli	a4,a4,0x2
    80002fd2:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002fd6:	07b2                	slli	a5,a5,0xc
    80002fd8:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002fda:	0002d617          	auipc	a2,0x2d
    80002fde:	68e60613          	addi	a2,a2,1678 # 80030668 <__func__.0+0x978>
    80002fe2:	08200593          	li	a1,130
    80002fe6:	0002d517          	auipc	a0,0x2d
    80002fea:	00a50513          	addi	a0,a0,10 # 8002fff0 <__func__.0+0x300>
    80002fee:	0007b903          	ld	s2,0(a5)
    80002ff2:	09a2a0ef          	jal	8002d08c <printf>
    80002ff6:	47c5                	li	a5,17
    80002ff8:	0af48d63          	beq	s1,a5,800030b2 <two_stage_translation_2+0x1bc>
    80002ffc:	0002d597          	auipc	a1,0x2d
    80003000:	fcc58593          	addi	a1,a1,-52 # 8002ffc8 <__func__.0+0x2d8>
    80003004:	0002d517          	auipc	a0,0x2d
    80003008:	00450513          	addi	a0,a0,4 # 80030008 <__func__.0+0x318>
    8000300c:	0802a0ef          	jal	8002d08c <printf>
    80003010:	0002d517          	auipc	a0,0x2d
    80003014:	00050513          	mv	a0,a0
    80003018:	0742a0ef          	jal	8002d08c <printf>
    8000301c:	02900513          	li	a0,41
    80003020:	55b280ef          	jal	8002bd7a <putchar>
    80003024:	4529                	li	a0,10
    80003026:	555280ef          	jal	8002bd7a <putchar>
    8000302a:	4401                	li	s0,0


    TEST_END();
    8000302c:	0002d597          	auipc	a1,0x2d
    80003030:	f9c58593          	addi	a1,a1,-100 # 8002ffc8 <__func__.0+0x2d8>
    80003034:	0002d517          	auipc	a0,0x2d
    80003038:	03c50513          	addi	a0,a0,60 # 80030070 <__func__.0+0x380>
    8000303c:	0502a0ef          	jal	8002d08c <printf>
    80003040:	4511                	li	a0,4
    80003042:	ec7fd0ef          	jal	80000f08 <goto_priv>
    80003046:	88dfe0ef          	jal	800018d2 <reset_state>
}
    8000304a:	70a2                	ld	ra,40(sp)
    8000304c:	8522                	mv	a0,s0
    8000304e:	7402                	ld	s0,32(sp)
    80003050:	64e2                	ld	s1,24(sp)
    80003052:	6942                	ld	s2,16(sp)
    80003054:	69a2                	ld	s3,8(sp)
    80003056:	6145                	addi	sp,sp,48
    80003058:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    8000305a:	03240e63          	beq	s0,s2,80003096 <two_stage_translation_2+0x1a0>
    8000305e:	0002d597          	auipc	a1,0x2d
    80003062:	f6a58593          	addi	a1,a1,-150 # 8002ffc8 <__func__.0+0x2d8>
    80003066:	0002d517          	auipc	a0,0x2d
    8000306a:	fa250513          	addi	a0,a0,-94 # 80030008 <__func__.0+0x318>
    8000306e:	01e2a0ef          	jal	8002d08c <printf>
    80003072:	0002d517          	auipc	a0,0x2d
    80003076:	f9e50513          	addi	a0,a0,-98 # 80030010 <__func__.0+0x320>
    8000307a:	0122a0ef          	jal	8002d08c <printf>
    8000307e:	02900513          	li	a0,41
    80003082:	4f9280ef          	jal	8002bd7a <putchar>
    80003086:	4529                	li	a0,10
    80003088:	4f3280ef          	jal	8002bd7a <putchar>
    8000308c:	fde40413          	addi	s0,s0,-34
    80003090:	00143413          	seqz	s0,s0
    80003094:	b715                	j	80002fb8 <two_stage_translation_2+0xc2>
    80003096:	0002d597          	auipc	a1,0x2d
    8000309a:	f2258593          	addi	a1,a1,-222 # 8002ffb8 <__func__.0+0x2c8>
    8000309e:	0002d517          	auipc	a0,0x2d
    800030a2:	f6a50513          	addi	a0,a0,-150 # 80030008 <__func__.0+0x318>
    800030a6:	7e7290ef          	jal	8002d08c <printf>
    800030aa:	4529                	li	a0,10
    800030ac:	4cf280ef          	jal	8002bd7a <putchar>
    800030b0:	bff1                	j	8000308c <two_stage_translation_2+0x196>
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    800030b2:	02200793          	li	a5,34
    800030b6:	f4f913e3          	bne	s2,a5,80002ffc <two_stage_translation_2+0x106>
    800030ba:	0002d597          	auipc	a1,0x2d
    800030be:	efe58593          	addi	a1,a1,-258 # 8002ffb8 <__func__.0+0x2c8>
    800030c2:	0002d517          	auipc	a0,0x2d
    800030c6:	f4650513          	addi	a0,a0,-186 # 80030008 <__func__.0+0x318>
    800030ca:	7c3290ef          	jal	8002d08c <printf>
    800030ce:	4529                	li	a0,10
    800030d0:	4ab280ef          	jal	8002bd7a <putchar>
    800030d4:	d839                	beqz	s0,8000302a <two_stage_translation_2+0x134>
    800030d6:	4405                	li	s0,1
    TEST_END();
    800030d8:	0002d597          	auipc	a1,0x2d
    800030dc:	ee058593          	addi	a1,a1,-288 # 8002ffb8 <__func__.0+0x2c8>
    800030e0:	bf91                	j	80003034 <two_stage_translation_2+0x13e>

00000000800030e2 <two_stage_translation_3>:

bool two_stage_translation_3(){
    800030e2:	7179                	addi	sp,sp,-48
    
    TEST_START();
    800030e4:	0002b597          	auipc	a1,0x2b
    800030e8:	dd458593          	addi	a1,a1,-556 # 8002deb8 <__func__.16>
    800030ec:	0002d517          	auipc	a0,0x2d
    800030f0:	eec50513          	addi	a0,a0,-276 # 8002ffd8 <__func__.0+0x2e8>
bool two_stage_translation_3(){
    800030f4:	f406                	sd	ra,40(sp)
    800030f6:	f022                	sd	s0,32(sp)
    800030f8:	ec26                	sd	s1,24(sp)
    800030fa:	e84a                	sd	s2,16(sp)
    800030fc:	e44e                	sd	s3,8(sp)
    TEST_START();
    800030fe:	78f290ef          	jal	8002d08c <printf>
    80003102:	4529                	li	a0,10
    80003104:	477280ef          	jal	8002bd7a <putchar>
    *((volatile uint64_t*) addr) = val;
    80003108:	2201b737          	lui	a4,0x2201b
    8000310c:	000887b7          	lui	a5,0x88
    80003110:	070a                	slli	a4,a4,0x2
    80003112:	44c5                	li	s1,17
    80003114:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80003118:	e304                	sd	s1,0(a4)
    8000311a:	07b2                	slli	a5,a5,0xc
    8000311c:	02200913          	li	s2,34
    80003120:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80003124:	450d                	li	a0,3
    80003126:	de3fd0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000312a:	cb6fd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000312e:	897fd0ef          	jal	800009c4 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80003132:	e4afd0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_VS);
    80003136:	4509                	li	a0,2
    80003138:	dd1fd0ef          	jal	80000f08 <goto_priv>
    return *((volatile uint64_t*) addr);
    8000313c:	4001b737          	lui	a4,0x4001b
    80003140:	070a                	slli	a4,a4,0x2
    80003142:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80003146:	001007b7          	lui	a5,0x100
    8000314a:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000314e:	07b2                	slli	a5,a5,0xc
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80003150:	0002d617          	auipc	a2,0x2d
    80003154:	3e860613          	addi	a2,a2,1000 # 80030538 <__func__.0+0x848>
    80003158:	08200593          	li	a1,130
    8000315c:	0002d517          	auipc	a0,0x2d
    80003160:	e9450513          	addi	a0,a0,-364 # 8002fff0 <__func__.0+0x300>
    80003164:	6380                	ld	s0,0(a5)
    80003166:	727290ef          	jal	8002d08c <printf>
    8000316a:	0c998863          	beq	s3,s1,8000323a <two_stage_translation_3+0x158>
    8000316e:	0002d597          	auipc	a1,0x2d
    80003172:	e5a58593          	addi	a1,a1,-422 # 8002ffc8 <__func__.0+0x2d8>
    80003176:	0002d517          	auipc	a0,0x2d
    8000317a:	e9250513          	addi	a0,a0,-366 # 80030008 <__func__.0+0x318>
    8000317e:	70f290ef          	jal	8002d08c <printf>
    80003182:	0002d517          	auipc	a0,0x2d
    80003186:	e8e50513          	addi	a0,a0,-370 # 80030010 <__func__.0+0x320>
    8000318a:	703290ef          	jal	8002d08c <printf>
    8000318e:	02900513          	li	a0,41
    80003192:	3e9280ef          	jal	8002bd7a <putchar>
    80003196:	4529                	li	a0,10
    80003198:	3e3280ef          	jal	8002bd7a <putchar>
    8000319c:	4401                	li	s0,0
    
    goto_priv(PRIV_VS);
    8000319e:	4509                	li	a0,2
    800031a0:	d69fd0ef          	jal	80000f08 <goto_priv>

    vspt_switch();
    800031a4:	c11fd0ef          	jal	80000db4 <vspt_switch>
    800031a8:	001007b7          	lui	a5,0x100
    800031ac:	4001b737          	lui	a4,0x4001b
    800031b0:	070a                	slli	a4,a4,0x2
    800031b2:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800031b6:	07b2                	slli	a5,a5,0xc
    800031b8:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    800031ba:	0002d617          	auipc	a2,0x2d
    800031be:	4fe60613          	addi	a2,a2,1278 # 800306b8 <__func__.0+0x9c8>
    800031c2:	08200593          	li	a1,130
    800031c6:	0002d517          	auipc	a0,0x2d
    800031ca:	e2a50513          	addi	a0,a0,-470 # 8002fff0 <__func__.0+0x300>
    800031ce:	0007b903          	ld	s2,0(a5)
    800031d2:	6bb290ef          	jal	8002d08c <printf>
    800031d6:	47c5                	li	a5,17
    800031d8:	0af48d63          	beq	s1,a5,80003292 <two_stage_translation_3+0x1b0>
    800031dc:	0002d597          	auipc	a1,0x2d
    800031e0:	dec58593          	addi	a1,a1,-532 # 8002ffc8 <__func__.0+0x2d8>
    800031e4:	0002d517          	auipc	a0,0x2d
    800031e8:	e2450513          	addi	a0,a0,-476 # 80030008 <__func__.0+0x318>
    800031ec:	6a1290ef          	jal	8002d08c <printf>
    800031f0:	0002d517          	auipc	a0,0x2d
    800031f4:	e2050513          	addi	a0,a0,-480 # 80030010 <__func__.0+0x320>
    800031f8:	695290ef          	jal	8002d08c <printf>
    800031fc:	02900513          	li	a0,41
    80003200:	37b280ef          	jal	8002bd7a <putchar>
    80003204:	4529                	li	a0,10
    80003206:	375280ef          	jal	8002bd7a <putchar>
    8000320a:	4401                	li	s0,0

    TEST_END();
    8000320c:	0002d597          	auipc	a1,0x2d
    80003210:	dbc58593          	addi	a1,a1,-580 # 8002ffc8 <__func__.0+0x2d8>
    80003214:	0002d517          	auipc	a0,0x2d
    80003218:	e5c50513          	addi	a0,a0,-420 # 80030070 <__func__.0+0x380>
    8000321c:	671290ef          	jal	8002d08c <printf>
    80003220:	4511                	li	a0,4
    80003222:	ce7fd0ef          	jal	80000f08 <goto_priv>
    80003226:	eacfe0ef          	jal	800018d2 <reset_state>
}
    8000322a:	70a2                	ld	ra,40(sp)
    8000322c:	8522                	mv	a0,s0
    8000322e:	7402                	ld	s0,32(sp)
    80003230:	64e2                	ld	s1,24(sp)
    80003232:	6942                	ld	s2,16(sp)
    80003234:	69a2                	ld	s3,8(sp)
    80003236:	6145                	addi	sp,sp,48
    80003238:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    8000323a:	03240e63          	beq	s0,s2,80003276 <two_stage_translation_3+0x194>
    8000323e:	0002d597          	auipc	a1,0x2d
    80003242:	d8a58593          	addi	a1,a1,-630 # 8002ffc8 <__func__.0+0x2d8>
    80003246:	0002d517          	auipc	a0,0x2d
    8000324a:	dc250513          	addi	a0,a0,-574 # 80030008 <__func__.0+0x318>
    8000324e:	63f290ef          	jal	8002d08c <printf>
    80003252:	0002d517          	auipc	a0,0x2d
    80003256:	dbe50513          	addi	a0,a0,-578 # 80030010 <__func__.0+0x320>
    8000325a:	633290ef          	jal	8002d08c <printf>
    8000325e:	02900513          	li	a0,41
    80003262:	319280ef          	jal	8002bd7a <putchar>
    80003266:	4529                	li	a0,10
    80003268:	313280ef          	jal	8002bd7a <putchar>
    8000326c:	fde40413          	addi	s0,s0,-34
    80003270:	00143413          	seqz	s0,s0
    80003274:	b72d                	j	8000319e <two_stage_translation_3+0xbc>
    80003276:	0002d597          	auipc	a1,0x2d
    8000327a:	d4258593          	addi	a1,a1,-702 # 8002ffb8 <__func__.0+0x2c8>
    8000327e:	0002d517          	auipc	a0,0x2d
    80003282:	d8a50513          	addi	a0,a0,-630 # 80030008 <__func__.0+0x318>
    80003286:	607290ef          	jal	8002d08c <printf>
    8000328a:	4529                	li	a0,10
    8000328c:	2ef280ef          	jal	8002bd7a <putchar>
    80003290:	bff1                	j	8000326c <two_stage_translation_3+0x18a>
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    80003292:	02200793          	li	a5,34
    80003296:	f4f913e3          	bne	s2,a5,800031dc <two_stage_translation_3+0xfa>
    8000329a:	0002d597          	auipc	a1,0x2d
    8000329e:	d1e58593          	addi	a1,a1,-738 # 8002ffb8 <__func__.0+0x2c8>
    800032a2:	0002d517          	auipc	a0,0x2d
    800032a6:	d6650513          	addi	a0,a0,-666 # 80030008 <__func__.0+0x318>
    800032aa:	5e3290ef          	jal	8002d08c <printf>
    800032ae:	4529                	li	a0,10
    800032b0:	2cb280ef          	jal	8002bd7a <putchar>
    800032b4:	d839                	beqz	s0,8000320a <two_stage_translation_3+0x128>
    800032b6:	4405                	li	s0,1
    TEST_END();
    800032b8:	0002d597          	auipc	a1,0x2d
    800032bc:	d0058593          	addi	a1,a1,-768 # 8002ffb8 <__func__.0+0x2c8>
    800032c0:	bf91                	j	80003214 <two_stage_translation_3+0x132>

00000000800032c2 <second_stage_only_translation>:

bool second_stage_only_translation(){
    800032c2:	7179                	addi	sp,sp,-48

    /**
     * Test only 2nd stage translation.
     */
    TEST_START();
    800032c4:	0002b597          	auipc	a1,0x2b
    800032c8:	c0c58593          	addi	a1,a1,-1012 # 8002ded0 <__func__.15>
    800032cc:	0002d517          	auipc	a0,0x2d
    800032d0:	d0c50513          	addi	a0,a0,-756 # 8002ffd8 <__func__.0+0x2e8>
bool second_stage_only_translation(){
    800032d4:	f406                	sd	ra,40(sp)
    800032d6:	f022                	sd	s0,32(sp)
    800032d8:	e84a                	sd	s2,16(sp)
    800032da:	ec26                	sd	s1,24(sp)
    800032dc:	e44e                	sd	s3,8(sp)
    800032de:	e052                	sd	s4,0(sp)
    TEST_START();
    800032e0:	5ad290ef          	jal	8002d08c <printf>
    800032e4:	4529                	li	a0,10
    800032e6:	295280ef          	jal	8002bd7a <putchar>
    *((volatile uint64_t*) addr) = val;
    800032ea:	2201b737          	lui	a4,0x2201b
    800032ee:	000887b7          	lui	a5,0x88
    800032f2:	070a                	slli	a4,a4,0x2
    800032f4:	4445                	li	s0,17
    800032f6:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    800032fa:	e300                	sd	s0,0(a4)
    800032fc:	07b2                	slli	a5,a5,0xc
    800032fe:	02200913          	li	s2,34
    80003302:	0127b023          	sd	s2,0(a5)
    uintptr_t vaddr2 = vs_page_base(SWITCH2);
    write64(addr1, 0x11);
    write64(addr2, 0x22);   


    CSRS(medeleg, (1 << CAUSE_LGPF) | (1 << CAUSE_SGPF));
    80003306:	00a007b7          	lui	a5,0xa00
    8000330a:	3027a073          	csrs	medeleg,a5

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    8000330e:	450d                	li	a0,3
    80003310:	bf9fd0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80003314:	accfd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80003318:	eacfd0ef          	jal	800009c4 <hpt_init>
    
    goto_priv(PRIV_VS);
    8000331c:	4509                	li	a0,2
    8000331e:	bebfd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80003322:	aebfd0ef          	jal	80000e0c <test_setup_except_function>
    return *((volatile uint64_t*) addr);
    80003326:	001007b7          	lui	a5,0x100
    8000332a:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000332e:	4001b737          	lui	a4,0x4001b
    80003332:	07b2                	slli	a5,a5,0xc
    80003334:	070a                	slli	a4,a4,0x2
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80003336:	0002d617          	auipc	a2,0x2d
    8000333a:	20260613          	addi	a2,a2,514 # 80030538 <__func__.0+0x848>
    8000333e:	08200593          	li	a1,130
    80003342:	0002d517          	auipc	a0,0x2d
    80003346:	cae50513          	addi	a0,a0,-850 # 8002fff0 <__func__.0+0x300>
    8000334a:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    8000334e:	0007ba03          	ld	s4,0(a5)
    80003352:	53b290ef          	jal	8002d08c <printf>
    80003356:	00055797          	auipc	a5,0x55
    8000335a:	cbb7c783          	lbu	a5,-837(a5) # 80058011 <excpt+0x1>
    8000335e:	00055497          	auipc	s1,0x55
    80003362:	cb248493          	addi	s1,s1,-846 # 80058010 <excpt>
    80003366:	ef91                	bnez	a5,80003382 <second_stage_only_translation+0xc0>
    80003368:	2a898663          	beq	s3,s0,80003614 <second_stage_only_translation+0x352>
    8000336c:	0002d597          	auipc	a1,0x2d
    80003370:	c5c58593          	addi	a1,a1,-932 # 8002ffc8 <__func__.0+0x2d8>
    80003374:	0002d517          	auipc	a0,0x2d
    80003378:	c9450513          	addi	a0,a0,-876 # 80030008 <__func__.0+0x318>
    8000337c:	511290ef          	jal	8002d08c <printf>
    80003380:	a01d                	j	800033a6 <second_stage_only_translation+0xe4>
    80003382:	0002d597          	auipc	a1,0x2d
    80003386:	c4658593          	addi	a1,a1,-954 # 8002ffc8 <__func__.0+0x2d8>
    8000338a:	0002d517          	auipc	a0,0x2d
    8000338e:	c7e50513          	addi	a0,a0,-898 # 80030008 <__func__.0+0x318>
    80003392:	4fb290ef          	jal	8002d08c <printf>
    80003396:	00055797          	auipc	a5,0x55
    8000339a:	c7b7c783          	lbu	a5,-901(a5) # 80058011 <excpt+0x1>
    8000339e:	2a079f63          	bnez	a5,8000365c <second_stage_only_translation+0x39a>
    800033a2:	32898f63          	beq	s3,s0,800036e0 <second_stage_only_translation+0x41e>
    800033a6:	0002d517          	auipc	a0,0x2d
    800033aa:	c6a50513          	addi	a0,a0,-918 # 80030010 <__func__.0+0x320>
    800033ae:	4df290ef          	jal	8002d08c <printf>
    800033b2:	02900513          	li	a0,41
    800033b6:	1c5280ef          	jal	8002bd7a <putchar>
    800033ba:	4529                	li	a0,10
    800033bc:	1bf280ef          	jal	8002bd7a <putchar>
    800033c0:	4401                	li	s0,0

    goto_priv(PRIV_HS);
    800033c2:	450d                	li	a0,3
    800033c4:	b45fd0ef          	jal	80000f08 <goto_priv>
    hpt_switch();       //在nemu中，执行read64没有变，执行hlvd变化了
    800033c8:	a0ffd0ef          	jal	80000dd6 <hpt_switch>
    asm volatile(
    800033cc:	22000073          	.insn	4, 0x22000073
    asm volatile(
    800033d0:	62000073          	.insn	4, 0x62000073
    hfence(); //l2tlb
    goto_priv(PRIV_VS);
    800033d4:	4509                	li	a0,2
    800033d6:	b33fd0ef          	jal	80000f08 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    800033da:	12000073          	sfence.vma
    sfence(); //l1tlb
    TEST_SETUP_EXCEPT();
    800033de:	a2ffd0ef          	jal	80000e0c <test_setup_except_function>
    800033e2:	001007b7          	lui	a5,0x100
    800033e6:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800033ea:	4001b737          	lui	a4,0x4001b
    800033ee:	07b2                	slli	a5,a5,0xc
    800033f0:	070a                	slli	a4,a4,0x2
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    800033f2:	0002d617          	auipc	a2,0x2d
    800033f6:	31660613          	addi	a2,a2,790 # 80030708 <__func__.0+0xa18>
    800033fa:	08200593          	li	a1,130
    800033fe:	0002d517          	auipc	a0,0x2d
    80003402:	bf250513          	addi	a0,a0,-1038 # 8002fff0 <__func__.0+0x300>
    80003406:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    8000340a:	0007b983          	ld	s3,0(a5)
    8000340e:	47f290ef          	jal	8002d08c <printf>
    80003412:	00055797          	auipc	a5,0x55
    80003416:	bff7c783          	lbu	a5,-1025(a5) # 80058011 <excpt+0x1>
    8000341a:	18079363          	bnez	a5,800035a0 <second_stage_only_translation+0x2de>
    8000341e:	02200793          	li	a5,34
    80003422:	28f90b63          	beq	s2,a5,800036b8 <second_stage_only_translation+0x3f6>
    80003426:	0002d597          	auipc	a1,0x2d
    8000342a:	ba258593          	addi	a1,a1,-1118 # 8002ffc8 <__func__.0+0x2d8>
    8000342e:	0002d517          	auipc	a0,0x2d
    80003432:	bda50513          	addi	a0,a0,-1062 # 80030008 <__func__.0+0x318>
    80003436:	457290ef          	jal	8002d08c <printf>
    8000343a:	0002d517          	auipc	a0,0x2d
    8000343e:	bd650513          	addi	a0,a0,-1066 # 80030010 <__func__.0+0x320>
    80003442:	44b290ef          	jal	8002d08c <printf>
    80003446:	02900513          	li	a0,41
    8000344a:	131280ef          	jal	8002bd7a <putchar>
    8000344e:	4529                	li	a0,10
    80003450:	12b280ef          	jal	8002bd7a <putchar>
    80003454:	c811                	beqz	s0,80003468 <second_stage_only_translation+0x1a6>
    80003456:	00055797          	auipc	a5,0x55
    8000345a:	bbb7c783          	lbu	a5,-1093(a5) # 80058011 <excpt+0x1>
    8000345e:	e789                	bnez	a5,80003468 <second_stage_only_translation+0x1a6>
    80003460:	02200793          	li	a5,34
    80003464:	18f90063          	beq	s2,a5,800035e4 <second_stage_only_translation+0x322>
    80003468:	4401                	li	s0,0

    TEST_SETUP_EXCEPT();
    8000346a:	9a3fd0ef          	jal	80000e0c <test_setup_except_function>
    8000346e:	001007b7          	lui	a5,0x100
    80003472:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80003476:	07b2                	slli	a5,a5,0xc
    80003478:	639c                	ld	a5,0(a5)
    (void) read64(vs_page_base(VSRWX_GI));  
    TEST_ASSERT(
    8000347a:	08200593          	li	a1,130
    8000347e:	0002d617          	auipc	a2,0x2d
    80003482:	2b260613          	addi	a2,a2,690 # 80030730 <__func__.0+0xa40>
    80003486:	0002d517          	auipc	a0,0x2d
    8000348a:	b6a50513          	addi	a0,a0,-1174 # 8002fff0 <__func__.0+0x300>
    8000348e:	3ff290ef          	jal	8002d08c <printf>
    80003492:	00055797          	auipc	a5,0x55
    80003496:	b7f7c783          	lbu	a5,-1153(a5) # 80058011 <excpt+0x1>
    8000349a:	0002d597          	auipc	a1,0x2d
    8000349e:	b2e58593          	addi	a1,a1,-1234 # 8002ffc8 <__func__.0+0x2d8>
    800034a2:	c789                	beqz	a5,800034ac <second_stage_only_translation+0x1ea>
    800034a4:	6498                	ld	a4,8(s1)
    800034a6:	47d5                	li	a5,21
    800034a8:	1ef70863          	beq	a4,a5,80003698 <second_stage_only_translation+0x3d6>
    800034ac:	0002d517          	auipc	a0,0x2d
    800034b0:	b5c50513          	addi	a0,a0,-1188 # 80030008 <__func__.0+0x318>
    800034b4:	3d9290ef          	jal	8002d08c <printf>
    800034b8:	00055797          	auipc	a5,0x55
    800034bc:	b597c783          	lbu	a5,-1191(a5) # 80058011 <excpt+0x1>
    800034c0:	c789                	beqz	a5,800034ca <second_stage_only_translation+0x208>
    800034c2:	6498                	ld	a4,8(s1)
    800034c4:	47d5                	li	a5,21
    800034c6:	12f70f63          	beq	a4,a5,80003604 <second_stage_only_translation+0x342>
    800034ca:	0002d517          	auipc	a0,0x2d
    800034ce:	b4650513          	addi	a0,a0,-1210 # 80030010 <__func__.0+0x320>
    800034d2:	3bb290ef          	jal	8002d08c <printf>
    800034d6:	02900513          	li	a0,41
    800034da:	0a1280ef          	jal	8002bd7a <putchar>
    800034de:	4529                	li	a0,10
    800034e0:	09b280ef          	jal	8002bd7a <putchar>
    800034e4:	c819                	beqz	s0,800034fa <second_stage_only_translation+0x238>
    800034e6:	00055797          	auipc	a5,0x55
    800034ea:	b2b7c783          	lbu	a5,-1237(a5) # 80058011 <excpt+0x1>
    800034ee:	4401                	li	s0,0
    800034f0:	c789                	beqz	a5,800034fa <second_stage_only_translation+0x238>
    800034f2:	6498                	ld	a4,8(s1)
    800034f4:	47d5                	li	a5,21
    800034f6:	18f70963          	beq	a4,a5,80003688 <second_stage_only_translation+0x3c6>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        excpt.priv == PRIV_HS
    );

    TEST_SETUP_EXCEPT();
    800034fa:	913fd0ef          	jal	80000e0c <test_setup_except_function>
    800034fe:	200007b7          	lui	a5,0x20000
    80003502:	17fd                	addi	a5,a5,-1 # 1fffffff <STACK_SIZE+0x1fefffff>
    80003504:	07b2                	slli	a5,a5,0xc
    80003506:	639c                	ld	a5,0(a5)
    read64(vs_page_base_limit(TOP));
    TEST_ASSERT(
    80003508:	08200593          	li	a1,130
    8000350c:	0002d617          	auipc	a2,0x2d
    80003510:	24c60613          	addi	a2,a2,588 # 80030758 <__func__.0+0xa68>
    80003514:	0002d517          	auipc	a0,0x2d
    80003518:	adc50513          	addi	a0,a0,-1316 # 8002fff0 <__func__.0+0x300>
    8000351c:	371290ef          	jal	8002d08c <printf>
    80003520:	00055797          	auipc	a5,0x55
    80003524:	af17c783          	lbu	a5,-1295(a5) # 80058011 <excpt+0x1>
    80003528:	0002d597          	auipc	a1,0x2d
    8000352c:	aa058593          	addi	a1,a1,-1376 # 8002ffc8 <__func__.0+0x2d8>
    80003530:	e789                	bnez	a5,8000353a <second_stage_only_translation+0x278>
    80003532:	0002d597          	auipc	a1,0x2d
    80003536:	a8658593          	addi	a1,a1,-1402 # 8002ffb8 <__func__.0+0x2c8>
    8000353a:	0002d517          	auipc	a0,0x2d
    8000353e:	ace50513          	addi	a0,a0,-1330 # 80030008 <__func__.0+0x318>
    80003542:	34b290ef          	jal	8002d08c <printf>
    80003546:	00055797          	auipc	a5,0x55
    8000354a:	acb7c783          	lbu	a5,-1333(a5) # 80058011 <excpt+0x1>
    8000354e:	e3c5                	bnez	a5,800035ee <second_stage_only_translation+0x32c>
    80003550:	4529                	li	a0,10
    80003552:	029280ef          	jal	8002bd7a <putchar>
    80003556:	cc1d                	beqz	s0,80003594 <second_stage_only_translation+0x2d2>
    80003558:	00055797          	auipc	a5,0x55
    8000355c:	ab97c783          	lbu	a5,-1351(a5) # 80058011 <excpt+0x1>
    80003560:	eb95                	bnez	a5,80003594 <second_stage_only_translation+0x2d2>
    80003562:	4405                	li	s0,1
    //     "access top of guest pa space with high bits =/= 0", 
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_LGPF
    // ); 

    TEST_END();
    80003564:	0002d597          	auipc	a1,0x2d
    80003568:	a5458593          	addi	a1,a1,-1452 # 8002ffb8 <__func__.0+0x2c8>
    8000356c:	0002d517          	auipc	a0,0x2d
    80003570:	b0450513          	addi	a0,a0,-1276 # 80030070 <__func__.0+0x380>
    80003574:	319290ef          	jal	8002d08c <printf>
    80003578:	4511                	li	a0,4
    8000357a:	98ffd0ef          	jal	80000f08 <goto_priv>
    8000357e:	b54fe0ef          	jal	800018d2 <reset_state>
}
    80003582:	70a2                	ld	ra,40(sp)
    80003584:	8522                	mv	a0,s0
    80003586:	7402                	ld	s0,32(sp)
    80003588:	64e2                	ld	s1,24(sp)
    8000358a:	6942                	ld	s2,16(sp)
    8000358c:	69a2                	ld	s3,8(sp)
    8000358e:	6a02                	ld	s4,0(sp)
    80003590:	6145                	addi	sp,sp,48
    80003592:	8082                	ret
    TEST_ASSERT(
    80003594:	4401                	li	s0,0
    TEST_END();
    80003596:	0002d597          	auipc	a1,0x2d
    8000359a:	a3258593          	addi	a1,a1,-1486 # 8002ffc8 <__func__.0+0x2d8>
    8000359e:	b7f9                	j	8000356c <second_stage_only_translation+0x2aa>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    800035a0:	0002d597          	auipc	a1,0x2d
    800035a4:	a2858593          	addi	a1,a1,-1496 # 8002ffc8 <__func__.0+0x2d8>
    800035a8:	0002d517          	auipc	a0,0x2d
    800035ac:	a6050513          	addi	a0,a0,-1440 # 80030008 <__func__.0+0x318>
    800035b0:	2dd290ef          	jal	8002d08c <printf>
    800035b4:	00055797          	auipc	a5,0x55
    800035b8:	a5d7c783          	lbu	a5,-1443(a5) # 80058011 <excpt+0x1>
    800035bc:	e6079fe3          	bnez	a5,8000343a <second_stage_only_translation+0x178>
    800035c0:	02200793          	li	a5,34
    800035c4:	e6f91be3          	bne	s2,a5,8000343a <second_stage_only_translation+0x178>
    800035c8:	47c5                	li	a5,17
    800035ca:	e6f998e3          	bne	s3,a5,8000343a <second_stage_only_translation+0x178>
    800035ce:	4529                	li	a0,10
    800035d0:	7aa280ef          	jal	8002bd7a <putchar>
    800035d4:	e8040ae3          	beqz	s0,80003468 <second_stage_only_translation+0x1a6>
    800035d8:	00055797          	auipc	a5,0x55
    800035dc:	a397c783          	lbu	a5,-1479(a5) # 80058011 <excpt+0x1>
    800035e0:	e80794e3          	bnez	a5,80003468 <second_stage_only_translation+0x1a6>
    800035e4:	fef98413          	addi	s0,s3,-17
    800035e8:	00143413          	seqz	s0,s0
    800035ec:	bdbd                	j	8000346a <second_stage_only_translation+0x1a8>
    TEST_ASSERT(
    800035ee:	0002d517          	auipc	a0,0x2d
    800035f2:	a2250513          	addi	a0,a0,-1502 # 80030010 <__func__.0+0x320>
    800035f6:	297290ef          	jal	8002d08c <printf>
    800035fa:	02900513          	li	a0,41
    800035fe:	77c280ef          	jal	8002bd7a <putchar>
    80003602:	b7b9                	j	80003550 <second_stage_only_translation+0x28e>
    TEST_ASSERT(
    80003604:	00055717          	auipc	a4,0x55
    80003608:	a1072703          	lw	a4,-1520(a4) # 80058014 <excpt+0x4>
    8000360c:	478d                	li	a5,3
    8000360e:	eaf71ee3          	bne	a4,a5,800034ca <second_stage_only_translation+0x208>
    80003612:	b5f1                	j	800034de <second_stage_only_translation+0x21c>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80003614:	0f2a0263          	beq	s4,s2,800036f8 <second_stage_only_translation+0x436>
    80003618:	0002d597          	auipc	a1,0x2d
    8000361c:	9b058593          	addi	a1,a1,-1616 # 8002ffc8 <__func__.0+0x2d8>
    80003620:	0002d517          	auipc	a0,0x2d
    80003624:	9e850513          	addi	a0,a0,-1560 # 80030008 <__func__.0+0x318>
    80003628:	265290ef          	jal	8002d08c <printf>
    8000362c:	0002d517          	auipc	a0,0x2d
    80003630:	9e450513          	addi	a0,a0,-1564 # 80030010 <__func__.0+0x320>
    80003634:	259290ef          	jal	8002d08c <printf>
    80003638:	02900513          	li	a0,41
    8000363c:	73e280ef          	jal	8002bd7a <putchar>
    80003640:	4529                	li	a0,10
    80003642:	738280ef          	jal	8002bd7a <putchar>
    80003646:	00055797          	auipc	a5,0x55
    8000364a:	9cb7c783          	lbu	a5,-1589(a5) # 80058011 <excpt+0x1>
    8000364e:	d60799e3          	bnez	a5,800033c0 <second_stage_only_translation+0xfe>
    80003652:	fdea0413          	addi	s0,s4,-34
    80003656:	00143413          	seqz	s0,s0
    8000365a:	b3a5                	j	800033c2 <second_stage_only_translation+0x100>
    8000365c:	0002d517          	auipc	a0,0x2d
    80003660:	9b450513          	addi	a0,a0,-1612 # 80030010 <__func__.0+0x320>
    80003664:	229290ef          	jal	8002d08c <printf>
    80003668:	02900513          	li	a0,41
    8000366c:	70e280ef          	jal	8002bd7a <putchar>
    80003670:	4529                	li	a0,10
    80003672:	708280ef          	jal	8002bd7a <putchar>
    80003676:	00055797          	auipc	a5,0x55
    8000367a:	99b7c783          	lbu	a5,-1637(a5) # 80058011 <excpt+0x1>
    8000367e:	d40791e3          	bnez	a5,800033c0 <second_stage_only_translation+0xfe>
    80003682:	fc8988e3          	beq	s3,s0,80003652 <second_stage_only_translation+0x390>
    80003686:	bb2d                	j	800033c0 <second_stage_only_translation+0xfe>
    TEST_ASSERT(
    80003688:	00055417          	auipc	s0,0x55
    8000368c:	98c42403          	lw	s0,-1652(s0) # 80058014 <excpt+0x4>
    80003690:	1475                	addi	s0,s0,-3
    80003692:	00143413          	seqz	s0,s0
    80003696:	b595                	j	800034fa <second_stage_only_translation+0x238>
    80003698:	00055717          	auipc	a4,0x55
    8000369c:	97c72703          	lw	a4,-1668(a4) # 80058014 <excpt+0x4>
    800036a0:	478d                	li	a5,3
    800036a2:	0002d597          	auipc	a1,0x2d
    800036a6:	91658593          	addi	a1,a1,-1770 # 8002ffb8 <__func__.0+0x2c8>
    800036aa:	e0f701e3          	beq	a4,a5,800034ac <second_stage_only_translation+0x1ea>
    800036ae:	0002d597          	auipc	a1,0x2d
    800036b2:	91a58593          	addi	a1,a1,-1766 # 8002ffc8 <__func__.0+0x2d8>
    800036b6:	bbdd                	j	800034ac <second_stage_only_translation+0x1ea>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    800036b8:	47c5                	li	a5,17
    800036ba:	d6f996e3          	bne	s3,a5,80003426 <second_stage_only_translation+0x164>
    800036be:	0002d597          	auipc	a1,0x2d
    800036c2:	8fa58593          	addi	a1,a1,-1798 # 8002ffb8 <__func__.0+0x2c8>
    800036c6:	0002d517          	auipc	a0,0x2d
    800036ca:	94250513          	addi	a0,a0,-1726 # 80030008 <__func__.0+0x318>
    800036ce:	1bf290ef          	jal	8002d08c <printf>
    800036d2:	00055797          	auipc	a5,0x55
    800036d6:	93f7c783          	lbu	a5,-1729(a5) # 80058011 <excpt+0x1>
    800036da:	ee078ae3          	beqz	a5,800035ce <second_stage_only_translation+0x30c>
    800036de:	bbb1                	j	8000343a <second_stage_only_translation+0x178>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    800036e0:	f52a16e3          	bne	s4,s2,8000362c <second_stage_only_translation+0x36a>
    800036e4:	4529                	li	a0,10
    800036e6:	694280ef          	jal	8002bd7a <putchar>
    800036ea:	00055417          	auipc	s0,0x55
    800036ee:	92744403          	lbu	s0,-1753(s0) # 80058011 <excpt+0x1>
    800036f2:	00144413          	xori	s0,s0,1
    800036f6:	b1f1                	j	800033c2 <second_stage_only_translation+0x100>
    800036f8:	0002d597          	auipc	a1,0x2d
    800036fc:	8c058593          	addi	a1,a1,-1856 # 8002ffb8 <__func__.0+0x2c8>
    80003700:	0002d517          	auipc	a0,0x2d
    80003704:	90850513          	addi	a0,a0,-1784 # 80030008 <__func__.0+0x318>
    80003708:	185290ef          	jal	8002d08c <printf>
    8000370c:	00055797          	auipc	a5,0x55
    80003710:	9057c783          	lbu	a5,-1787(a5) # 80058011 <excpt+0x1>
    80003714:	dbe1                	beqz	a5,800036e4 <second_stage_only_translation+0x422>
    80003716:	bf19                	j	8000362c <second_stage_only_translation+0x36a>

0000000080003718 <m_and_hs_using_vs_access_1>:
    );

}


bool m_and_hs_using_vs_access_1(){
    80003718:	7179                	addi	sp,sp,-48

    uint64_t val, valu;
    uintptr_t vaddr = vs_page_base(SCRATCHPAD);
    uintptr_t addr;

    TEST_START();
    8000371a:	0002a597          	auipc	a1,0x2a
    8000371e:	7d658593          	addi	a1,a1,2006 # 8002def0 <__func__.13>
    80003722:	0002d517          	auipc	a0,0x2d
    80003726:	8b650513          	addi	a0,a0,-1866 # 8002ffd8 <__func__.0+0x2e8>
bool m_and_hs_using_vs_access_1(){
    8000372a:	f406                	sd	ra,40(sp)
    8000372c:	ec26                	sd	s1,24(sp)
    8000372e:	f022                	sd	s0,32(sp)
    80003730:	e84a                	sd	s2,16(sp)
    80003732:	e44e                	sd	s3,8(sp)
    80003734:	e052                	sd	s4,0(sp)
    TEST_START();
    80003736:	157290ef          	jal	8002d08c <printf>
    8000373a:	4529                	li	a0,10
    8000373c:	63e280ef          	jal	8002bd7a <putchar>
    
    hspt_init();
    80003740:	ea1fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003744:	a80fd0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80003748:	834fd0ef          	jal	8000077c <vspt_init>

    TEST_SETUP_EXCEPT();
    8000374c:	ec0fd0ef          	jal	80000e0c <test_setup_except_function>
    if(curr_priv != PRIV_M){
    80003750:	0003a497          	auipc	s1,0x3a
    80003754:	6d44a483          	lw	s1,1748(s1) # 8003de24 <curr_priv>
    80003758:	4791                	li	a5,4
    8000375a:	02f48763          	beq	s1,a5,80003788 <m_and_hs_using_vs_access_1+0x70>
        ERROR("trying to write as mprv from low privilege");
    8000375e:	0002d517          	auipc	a0,0x2d
    80003762:	03250513          	addi	a0,a0,50 # 80030790 <__func__.0+0xaa0>
    80003766:	127290ef          	jal	8002d08c <printf>
    8000376a:	11100613          	li	a2,273
    8000376e:	0002a597          	auipc	a1,0x2a
    80003772:	7a258593          	addi	a1,a1,1954 # 8002df10 <__func__.12>
    80003776:	0002d517          	auipc	a0,0x2d
    8000377a:	9ea50513          	addi	a0,a0,-1558 # 80030160 <__func__.0+0x470>
    8000377e:	10f290ef          	jal	8002d08c <printf>
    80003782:	4501                	li	a0,0
    80003784:	4be290ef          	jal	8002cc42 <exit>
    asm volatile(
    80003788:	01108437          	lui	s0,0x1108
    8000378c:	ec140413          	addi	s0,s0,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80003790:	00100937          	lui	s2,0x100
    set_prev_priv(priv);
    80003794:	4509                	li	a0,2
    asm volatile(
    80003796:	0442                	slli	s0,s0,0x10
    80003798:	06b90913          	addi	s2,s2,107 # 10006b <STACK_SIZE+0x6b>
    set_prev_priv(priv);
    8000379c:	e8cfd0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    800037a0:	1439                	addi	s0,s0,-18
    800037a2:	0932                	slli	s2,s2,0xc
    800037a4:	000209b7          	lui	s3,0x20
    800037a8:	3009a073          	csrs	mstatus,s3
    800037ac:	00893023          	sd	s0,0(s2)
    800037b0:	3009b073          	csrc	mstatus,s3
    if(curr_priv != PRIV_M){
    800037b4:	0003a797          	auipc	a5,0x3a
    800037b8:	6707a783          	lw	a5,1648(a5) # 8003de24 <curr_priv>
    800037bc:	02978763          	beq	a5,s1,800037ea <m_and_hs_using_vs_access_1+0xd2>
        ERROR("trying to read as mprv from low privilege");
    800037c0:	0002d517          	auipc	a0,0x2d
    800037c4:	01050513          	addi	a0,a0,16 # 800307d0 <__func__.0+0xae0>
    800037c8:	0c5290ef          	jal	8002d08c <printf>
    800037cc:	0fe00613          	li	a2,254
    800037d0:	0002a597          	auipc	a1,0x2a
    800037d4:	75058593          	addi	a1,a1,1872 # 8002df20 <__func__.11>
    800037d8:	0002d517          	auipc	a0,0x2d
    800037dc:	98850513          	addi	a0,a0,-1656 # 80030160 <__func__.0+0x470>
    800037e0:	0ad290ef          	jal	8002d08c <printf>
    800037e4:	4501                	li	a0,0
    800037e6:	45c290ef          	jal	8002cc42 <exit>
    set_prev_priv(priv);
    800037ea:	4509                	li	a0,2
    800037ec:	e3cfd0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    800037f0:	3009a073          	csrs	mstatus,s3
    800037f4:	00093483          	ld	s1,0(s2)
    800037f8:	3009b073          	csrc	mstatus,s3
    write64_mprv(PRIV_VS, vaddr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine sets mprv to access vs space",
    800037fc:	0002d617          	auipc	a2,0x2d
    80003800:	01460613          	addi	a2,a2,20 # 80030810 <__func__.0+0xb20>
    80003804:	08200593          	li	a1,130
    80003808:	0002c517          	auipc	a0,0x2c
    8000380c:	7e850513          	addi	a0,a0,2024 # 8002fff0 <__func__.0+0x300>
    80003810:	07d290ef          	jal	8002d08c <printf>
    80003814:	00054797          	auipc	a5,0x54
    80003818:	7fd7c783          	lbu	a5,2045(a5) # 80058011 <excpt+0x1>
    8000381c:	2a079663          	bnez	a5,80003ac8 <m_and_hs_using_vs_access_1+0x3b0>
    80003820:	44848763          	beq	s1,s0,80003c6e <m_and_hs_using_vs_access_1+0x556>
    80003824:	0002c597          	auipc	a1,0x2c
    80003828:	7a458593          	addi	a1,a1,1956 # 8002ffc8 <__func__.0+0x2d8>
    8000382c:	0002c517          	auipc	a0,0x2c
    80003830:	7dc50513          	addi	a0,a0,2012 # 80030008 <__func__.0+0x318>
    80003834:	059290ef          	jal	8002d08c <printf>
    80003838:	0002c517          	auipc	a0,0x2c
    8000383c:	7d850513          	addi	a0,a0,2008 # 80030010 <__func__.0+0x320>
    80003840:	04d290ef          	jal	8002d08c <printf>
    80003844:	02900513          	li	a0,41
    80003848:	532280ef          	jal	8002bd7a <putchar>
    8000384c:	4529                	li	a0,10
    8000384e:	52c280ef          	jal	8002bd7a <putchar>
    80003852:	00054797          	auipc	a5,0x54
    80003856:	7bf7c783          	lbu	a5,1983(a5) # 80058011 <excpt+0x1>
    8000385a:	4901                	li	s2,0
    8000385c:	eb91                	bnez	a5,80003870 <m_and_hs_using_vs_access_1+0x158>
    8000385e:	011087b7          	lui	a5,0x1108
    80003862:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80003866:	07c2                	slli	a5,a5,0x10
    80003868:	17b9                	addi	a5,a5,-18
    8000386a:	8c9d                	sub	s1,s1,a5
    8000386c:	0014b913          	seqz	s2,s1
        excpt.triggered == false && val == 0x1107ec0ffee
    );

    //TODO: test mprv to access hs space

    goto_priv(PRIV_HS);
    80003870:	450d                	li	a0,3
    80003872:	e96fd0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80003876:	4509                	li	a0,2
    80003878:	db0fd0ef          	jal	80000e28 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    8000387c:	d90fd0ef          	jal	80000e0c <test_setup_except_function>
        :: "r"(value), "r"(addr): "memory");
    return value;
}

static inline uint64_t hsvd(uintptr_t addr, uint64_t value){
    asm volatile(
    80003880:	37ab74b7          	lui	s1,0x37ab7
    80003884:	001007b7          	lui	a5,0x100
    80003888:	048a                	slli	s1,s1,0x2
    8000388a:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    8000388e:	eef48493          	addi	s1,s1,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80003892:	07b2                	slli	a5,a5,0xc
    80003894:	6e97c073          	.insn	4, 0x6e97c073
    asm volatile(
    80003898:	6c07c473          	.insn	4, 0x6c07c473
    hsvd(vaddr, 0xdeadbeef);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd",
    8000389c:	0002d617          	auipc	a2,0x2d
    800038a0:	f9c60613          	addi	a2,a2,-100 # 80030838 <__func__.0+0xb48>
    800038a4:	08200593          	li	a1,130
    800038a8:	0002c517          	auipc	a0,0x2c
    800038ac:	74850513          	addi	a0,a0,1864 # 8002fff0 <__func__.0+0x300>
    800038b0:	7dc290ef          	jal	8002d08c <printf>
    800038b4:	00054797          	auipc	a5,0x54
    800038b8:	75d7c783          	lbu	a5,1885(a5) # 80058011 <excpt+0x1>
    800038bc:	24079263          	bnez	a5,80003b00 <m_and_hs_using_vs_access_1+0x3e8>
    800038c0:	3c940863          	beq	s0,s1,80003c90 <m_and_hs_using_vs_access_1+0x578>
    800038c4:	0002c597          	auipc	a1,0x2c
    800038c8:	70458593          	addi	a1,a1,1796 # 8002ffc8 <__func__.0+0x2d8>
    800038cc:	0002c517          	auipc	a0,0x2c
    800038d0:	73c50513          	addi	a0,a0,1852 # 80030008 <__func__.0+0x318>
    800038d4:	7b8290ef          	jal	8002d08c <printf>
    800038d8:	0002c517          	auipc	a0,0x2c
    800038dc:	73850513          	addi	a0,a0,1848 # 80030010 <__func__.0+0x320>
    800038e0:	7ac290ef          	jal	8002d08c <printf>
    800038e4:	02900513          	li	a0,41
    800038e8:	492280ef          	jal	8002bd7a <putchar>
    800038ec:	4529                	li	a0,10
    800038ee:	48c280ef          	jal	8002bd7a <putchar>
    800038f2:	32091563          	bnez	s2,80003c1c <m_and_hs_using_vs_access_1+0x504>
    800038f6:	4401                	li	s0,0
        excpt.triggered == false && val == 0xdeadbeef
    );

    TEST_SETUP_EXCEPT();
    800038f8:	d14fd0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800038fc:	001007b7          	lui	a5,0x100
    80003900:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003904:	07b2                	slli	a5,a5,0xc
    80003906:	0ff00913          	li	s2,255
    8000390a:	6327c073          	.insn	4, 0x6327c073
    asm volatile(
    8000390e:	6007c9f3          	.insn	4, 0x6007c9f3
    asm volatile(
    80003912:	6017c4f3          	.insn	4, 0x6017c4f3
    hsvb(vaddr, ((uint8_t)-1));
    val = hlvb(vaddr);
    valu = hlvbu(vaddr);
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003916:	0002d617          	auipc	a2,0x2d
    8000391a:	f2a60613          	addi	a2,a2,-214 # 80030840 <__func__.0+0xb50>
    8000391e:	08200593          	li	a1,130
    80003922:	0002c517          	auipc	a0,0x2c
    80003926:	6ce50513          	addi	a0,a0,1742 # 8002fff0 <__func__.0+0x300>
    8000392a:	762290ef          	jal	8002d08c <printf>
    8000392e:	00054797          	auipc	a5,0x54
    80003932:	6e37c783          	lbu	a5,1763(a5) # 80058011 <excpt+0x1>
    80003936:	28079e63          	bnez	a5,80003bd2 <m_and_hs_using_vs_access_1+0x4ba>
    8000393a:	57fd                	li	a5,-1
    8000393c:	30f98763          	beq	s3,a5,80003c4a <m_and_hs_using_vs_access_1+0x532>
    80003940:	0002c597          	auipc	a1,0x2c
    80003944:	68858593          	addi	a1,a1,1672 # 8002ffc8 <__func__.0+0x2d8>
    80003948:	0002c517          	auipc	a0,0x2c
    8000394c:	6c050513          	addi	a0,a0,1728 # 80030008 <__func__.0+0x318>
    80003950:	73c290ef          	jal	8002d08c <printf>
    80003954:	0002c517          	auipc	a0,0x2c
    80003958:	6bc50513          	addi	a0,a0,1724 # 80030010 <__func__.0+0x320>
    8000395c:	730290ef          	jal	8002d08c <printf>
    80003960:	02900513          	li	a0,41
    80003964:	416280ef          	jal	8002bd7a <putchar>
    80003968:	4529                	li	a0,10
    8000396a:	410280ef          	jal	8002bd7a <putchar>
    8000396e:	c419                	beqz	s0,8000397c <m_and_hs_using_vs_access_1+0x264>
    80003970:	00054797          	auipc	a5,0x54
    80003974:	6a17c783          	lbu	a5,1697(a5) # 80058011 <excpt+0x1>
    80003978:	2c078563          	beqz	a5,80003c42 <m_and_hs_using_vs_access_1+0x52a>
    8000397c:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint8_t)-1)
    );

    TEST_SETUP_EXCEPT();
    8000397e:	c8efd0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80003982:	001007b7          	lui	a5,0x100
    80003986:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    8000398a:	6941                	lui	s2,0x10
    8000398c:	07b2                	slli	a5,a5,0xc
    8000398e:	197d                	addi	s2,s2,-1 # ffff <_test_table_size+0xfffe>
    80003990:	6727c073          	.insn	4, 0x6727c073
    asm volatile(
    80003994:	6407c9f3          	.insn	4, 0x6407c9f3
    asm volatile(
    80003998:	6417c4f3          	.insn	4, 0x6417c4f3
    hsvh(vaddr, ((uint16_t)-1));
    val = hlvh(vaddr);
    valu = hlvhu(vaddr);
    TEST_ASSERT("hs hlvh vs hlvhu",
    8000399c:	0002d617          	auipc	a2,0x2d
    800039a0:	ebc60613          	addi	a2,a2,-324 # 80030858 <__func__.0+0xb68>
    800039a4:	08200593          	li	a1,130
    800039a8:	0002c517          	auipc	a0,0x2c
    800039ac:	64850513          	addi	a0,a0,1608 # 8002fff0 <__func__.0+0x300>
    800039b0:	6dc290ef          	jal	8002d08c <printf>
    800039b4:	00054797          	auipc	a5,0x54
    800039b8:	65d7c783          	lbu	a5,1629(a5) # 80058011 <excpt+0x1>
    800039bc:	1c079563          	bnez	a5,80003b86 <m_and_hs_using_vs_access_1+0x46e>
    800039c0:	57fd                	li	a5,-1
    800039c2:	30f98b63          	beq	s3,a5,80003cd8 <m_and_hs_using_vs_access_1+0x5c0>
    800039c6:	0002c597          	auipc	a1,0x2c
    800039ca:	60258593          	addi	a1,a1,1538 # 8002ffc8 <__func__.0+0x2d8>
    800039ce:	0002c517          	auipc	a0,0x2c
    800039d2:	63a50513          	addi	a0,a0,1594 # 80030008 <__func__.0+0x318>
    800039d6:	6b6290ef          	jal	8002d08c <printf>
    800039da:	0002c517          	auipc	a0,0x2c
    800039de:	63650513          	addi	a0,a0,1590 # 80030010 <__func__.0+0x320>
    800039e2:	6aa290ef          	jal	8002d08c <printf>
    800039e6:	02900513          	li	a0,41
    800039ea:	390280ef          	jal	8002bd7a <putchar>
    800039ee:	4529                	li	a0,10
    800039f0:	38a280ef          	jal	8002bd7a <putchar>
    800039f4:	c419                	beqz	s0,80003a02 <m_and_hs_using_vs_access_1+0x2ea>
    800039f6:	00054797          	auipc	a5,0x54
    800039fa:	61b7c783          	lbu	a5,1563(a5) # 80058011 <excpt+0x1>
    800039fe:	22078e63          	beqz	a5,80003c3a <m_and_hs_using_vs_access_1+0x522>
    80003a02:	4901                	li	s2,0
        excpt.triggered == false && val == (-1) && valu == ((uint16_t)-1)
    );

    TEST_SETUP_EXCEPT();
    80003a04:	c08fd0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80003a08:	001007b7          	lui	a5,0x100
    80003a0c:	54fd                	li	s1,-1
    80003a0e:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003a12:	07b2                	slli	a5,a5,0xc
    80003a14:	0204d993          	srli	s3,s1,0x20
    80003a18:	6b37c073          	.insn	4, 0x6b37c073
    asm volatile(
    80003a1c:	6807ca73          	.insn	4, 0x6807ca73
    asm volatile(
    80003a20:	6817c473          	.insn	4, 0x6817c473
    hsvw(vaddr, ((uint32_t)-1));
    val = hlvw(vaddr);
    valu = hlvwu(vaddr);
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003a24:	0002d617          	auipc	a2,0x2d
    80003a28:	e4c60613          	addi	a2,a2,-436 # 80030870 <__func__.0+0xb80>
    80003a2c:	08200593          	li	a1,130
    80003a30:	0002c517          	auipc	a0,0x2c
    80003a34:	5c050513          	addi	a0,a0,1472 # 8002fff0 <__func__.0+0x300>
    80003a38:	654290ef          	jal	8002d08c <printf>
    80003a3c:	00054797          	auipc	a5,0x54
    80003a40:	5d57c783          	lbu	a5,1493(a5) # 80058011 <excpt+0x1>
    80003a44:	0e079c63          	bnez	a5,80003b3c <m_and_hs_using_vs_access_1+0x424>
    80003a48:	269a0563          	beq	s4,s1,80003cb2 <m_and_hs_using_vs_access_1+0x59a>
    80003a4c:	0002c597          	auipc	a1,0x2c
    80003a50:	57c58593          	addi	a1,a1,1404 # 8002ffc8 <__func__.0+0x2d8>
    80003a54:	0002c517          	auipc	a0,0x2c
    80003a58:	5b450513          	addi	a0,a0,1460 # 80030008 <__func__.0+0x318>
    80003a5c:	630290ef          	jal	8002d08c <printf>
    80003a60:	0002c517          	auipc	a0,0x2c
    80003a64:	5b050513          	addi	a0,a0,1456 # 80030010 <__func__.0+0x320>
    80003a68:	624290ef          	jal	8002d08c <printf>
    80003a6c:	02900513          	li	a0,41
    80003a70:	30a280ef          	jal	8002bd7a <putchar>
    80003a74:	4529                	li	a0,10
    80003a76:	304280ef          	jal	8002bd7a <putchar>
    80003a7a:	00090e63          	beqz	s2,80003a96 <m_and_hs_using_vs_access_1+0x37e>
    80003a7e:	00054797          	auipc	a5,0x54
    80003a82:	5937c783          	lbu	a5,1427(a5) # 80058011 <excpt+0x1>
    80003a86:	eb81                	bnez	a5,80003a96 <m_and_hs_using_vs_access_1+0x37e>
    80003a88:	57fd                	li	a5,-1
    80003a8a:	00fa1663          	bne	s4,a5,80003a96 <m_and_hs_using_vs_access_1+0x37e>
    80003a8e:	020a5a13          	srli	s4,s4,0x20
    80003a92:	0f440463          	beq	s0,s4,80003b7a <m_and_hs_using_vs_access_1+0x462>
    80003a96:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint32_t)-1)
    );

    TEST_END();
    80003a98:	0002c597          	auipc	a1,0x2c
    80003a9c:	53058593          	addi	a1,a1,1328 # 8002ffc8 <__func__.0+0x2d8>
    80003aa0:	0002c517          	auipc	a0,0x2c
    80003aa4:	5d050513          	addi	a0,a0,1488 # 80030070 <__func__.0+0x380>
    80003aa8:	5e4290ef          	jal	8002d08c <printf>
    80003aac:	4511                	li	a0,4
    80003aae:	c5afd0ef          	jal	80000f08 <goto_priv>
    80003ab2:	e21fd0ef          	jal	800018d2 <reset_state>
}
    80003ab6:	70a2                	ld	ra,40(sp)
    80003ab8:	8522                	mv	a0,s0
    80003aba:	7402                	ld	s0,32(sp)
    80003abc:	64e2                	ld	s1,24(sp)
    80003abe:	6942                	ld	s2,16(sp)
    80003ac0:	69a2                	ld	s3,8(sp)
    80003ac2:	6a02                	ld	s4,0(sp)
    80003ac4:	6145                	addi	sp,sp,48
    80003ac6:	8082                	ret
    TEST_ASSERT("machine sets mprv to access vs space",
    80003ac8:	0002c597          	auipc	a1,0x2c
    80003acc:	50058593          	addi	a1,a1,1280 # 8002ffc8 <__func__.0+0x2d8>
    80003ad0:	0002c517          	auipc	a0,0x2c
    80003ad4:	53850513          	addi	a0,a0,1336 # 80030008 <__func__.0+0x318>
    80003ad8:	5b4290ef          	jal	8002d08c <printf>
    80003adc:	00054797          	auipc	a5,0x54
    80003ae0:	5357c783          	lbu	a5,1333(a5) # 80058011 <excpt+0x1>
    80003ae4:	d4079ae3          	bnez	a5,80003838 <m_and_hs_using_vs_access_1+0x120>
    80003ae8:	d48498e3          	bne	s1,s0,80003838 <m_and_hs_using_vs_access_1+0x120>
    80003aec:	4529                	li	a0,10
    80003aee:	28c280ef          	jal	8002bd7a <putchar>
    80003af2:	00054917          	auipc	s2,0x54
    80003af6:	51f94903          	lbu	s2,1311(s2) # 80058011 <excpt+0x1>
    80003afa:	00194913          	xori	s2,s2,1
    80003afe:	bb8d                	j	80003870 <m_and_hs_using_vs_access_1+0x158>
    TEST_ASSERT("hs hlvd",
    80003b00:	0002c597          	auipc	a1,0x2c
    80003b04:	4c858593          	addi	a1,a1,1224 # 8002ffc8 <__func__.0+0x2d8>
    80003b08:	0002c517          	auipc	a0,0x2c
    80003b0c:	50050513          	addi	a0,a0,1280 # 80030008 <__func__.0+0x318>
    80003b10:	57c290ef          	jal	8002d08c <printf>
    80003b14:	00054797          	auipc	a5,0x54
    80003b18:	4fd7c783          	lbu	a5,1277(a5) # 80058011 <excpt+0x1>
    80003b1c:	da079ee3          	bnez	a5,800038d8 <m_and_hs_using_vs_access_1+0x1c0>
    80003b20:	da941ce3          	bne	s0,s1,800038d8 <m_and_hs_using_vs_access_1+0x1c0>
    80003b24:	4529                	li	a0,10
    80003b26:	254280ef          	jal	8002bd7a <putchar>
    80003b2a:	dc0906e3          	beqz	s2,800038f6 <m_and_hs_using_vs_access_1+0x1de>
    80003b2e:	00054417          	auipc	s0,0x54
    80003b32:	4e344403          	lbu	s0,1251(s0) # 80058011 <excpt+0x1>
    80003b36:	00144413          	xori	s0,s0,1
    80003b3a:	bb7d                	j	800038f8 <m_and_hs_using_vs_access_1+0x1e0>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003b3c:	0002c597          	auipc	a1,0x2c
    80003b40:	48c58593          	addi	a1,a1,1164 # 8002ffc8 <__func__.0+0x2d8>
    80003b44:	0002c517          	auipc	a0,0x2c
    80003b48:	4c450513          	addi	a0,a0,1220 # 80030008 <__func__.0+0x318>
    80003b4c:	540290ef          	jal	8002d08c <printf>
    80003b50:	00054797          	auipc	a5,0x54
    80003b54:	4c17c783          	lbu	a5,1217(a5) # 80058011 <excpt+0x1>
    80003b58:	f00794e3          	bnez	a5,80003a60 <m_and_hs_using_vs_access_1+0x348>
    80003b5c:	f09a12e3          	bne	s4,s1,80003a60 <m_and_hs_using_vs_access_1+0x348>
    80003b60:	f13410e3          	bne	s0,s3,80003a60 <m_and_hs_using_vs_access_1+0x348>
    80003b64:	4529                	li	a0,10
    80003b66:	214280ef          	jal	8002bd7a <putchar>
    80003b6a:	f20906e3          	beqz	s2,80003a96 <m_and_hs_using_vs_access_1+0x37e>
    80003b6e:	00054797          	auipc	a5,0x54
    80003b72:	4a37c783          	lbu	a5,1187(a5) # 80058011 <excpt+0x1>
    80003b76:	f20790e3          	bnez	a5,80003a96 <m_and_hs_using_vs_access_1+0x37e>
    80003b7a:	4405                	li	s0,1
    TEST_END();
    80003b7c:	0002c597          	auipc	a1,0x2c
    80003b80:	43c58593          	addi	a1,a1,1084 # 8002ffb8 <__func__.0+0x2c8>
    80003b84:	bf31                	j	80003aa0 <m_and_hs_using_vs_access_1+0x388>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003b86:	0002c597          	auipc	a1,0x2c
    80003b8a:	44258593          	addi	a1,a1,1090 # 8002ffc8 <__func__.0+0x2d8>
    80003b8e:	0002c517          	auipc	a0,0x2c
    80003b92:	47a50513          	addi	a0,a0,1146 # 80030008 <__func__.0+0x318>
    80003b96:	4f6290ef          	jal	8002d08c <printf>
    80003b9a:	00054797          	auipc	a5,0x54
    80003b9e:	4777c783          	lbu	a5,1143(a5) # 80058011 <excpt+0x1>
    80003ba2:	e2079ce3          	bnez	a5,800039da <m_and_hs_using_vs_access_1+0x2c2>
    80003ba6:	57fd                	li	a5,-1
    80003ba8:	e2f999e3          	bne	s3,a5,800039da <m_and_hs_using_vs_access_1+0x2c2>
    80003bac:	e32497e3          	bne	s1,s2,800039da <m_and_hs_using_vs_access_1+0x2c2>
    80003bb0:	4529                	li	a0,10
    80003bb2:	1c8280ef          	jal	8002bd7a <putchar>
    80003bb6:	e40406e3          	beqz	s0,80003a02 <m_and_hs_using_vs_access_1+0x2ea>
    80003bba:	00054797          	auipc	a5,0x54
    80003bbe:	4577c783          	lbu	a5,1111(a5) # 80058011 <excpt+0x1>
    80003bc2:	e40790e3          	bnez	a5,80003a02 <m_and_hs_using_vs_access_1+0x2ea>
    80003bc6:	7941                	lui	s2,0xffff0
    80003bc8:	0905                	addi	s2,s2,1 # ffffffffffff0001 <__stack_top+0xffffffff7fcf1001>
    80003bca:	9926                	add	s2,s2,s1
    80003bcc:	00193913          	seqz	s2,s2
    80003bd0:	bd15                	j	80003a04 <m_and_hs_using_vs_access_1+0x2ec>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003bd2:	0002c597          	auipc	a1,0x2c
    80003bd6:	3f658593          	addi	a1,a1,1014 # 8002ffc8 <__func__.0+0x2d8>
    80003bda:	0002c517          	auipc	a0,0x2c
    80003bde:	42e50513          	addi	a0,a0,1070 # 80030008 <__func__.0+0x318>
    80003be2:	4aa290ef          	jal	8002d08c <printf>
    80003be6:	00054797          	auipc	a5,0x54
    80003bea:	42b7c783          	lbu	a5,1067(a5) # 80058011 <excpt+0x1>
    80003bee:	d60793e3          	bnez	a5,80003954 <m_and_hs_using_vs_access_1+0x23c>
    80003bf2:	57fd                	li	a5,-1
    80003bf4:	d6f990e3          	bne	s3,a5,80003954 <m_and_hs_using_vs_access_1+0x23c>
    80003bf8:	d5249ee3          	bne	s1,s2,80003954 <m_and_hs_using_vs_access_1+0x23c>
    80003bfc:	4529                	li	a0,10
    80003bfe:	17c280ef          	jal	8002bd7a <putchar>
    80003c02:	d6040de3          	beqz	s0,8000397c <m_and_hs_using_vs_access_1+0x264>
    80003c06:	00054797          	auipc	a5,0x54
    80003c0a:	40b7c783          	lbu	a5,1035(a5) # 80058011 <excpt+0x1>
    80003c0e:	d60797e3          	bnez	a5,8000397c <m_and_hs_using_vs_access_1+0x264>
    80003c12:	f0148793          	addi	a5,s1,-255
    80003c16:	0017b413          	seqz	s0,a5
    80003c1a:	b395                	j	8000397e <m_and_hs_using_vs_access_1+0x266>
    TEST_ASSERT("hs hlvd",
    80003c1c:	00054797          	auipc	a5,0x54
    80003c20:	3f57c783          	lbu	a5,1013(a5) # 80058011 <excpt+0x1>
    80003c24:	cc0799e3          	bnez	a5,800038f6 <m_and_hs_using_vs_access_1+0x1de>
    80003c28:	c85497b7          	lui	a5,0xc8549
    80003c2c:	078a                	slli	a5,a5,0x2
    80003c2e:	11178793          	addi	a5,a5,273 # ffffffffc8549111 <__stack_top+0xffffffff4824a111>
    80003c32:	943e                	add	s0,s0,a5
    80003c34:	00143413          	seqz	s0,s0
    80003c38:	b1c1                	j	800038f8 <m_and_hs_using_vs_access_1+0x1e0>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003c3a:	57fd                	li	a5,-1
    80003c3c:	dcf993e3          	bne	s3,a5,80003a02 <m_and_hs_using_vs_access_1+0x2ea>
    80003c40:	b759                	j	80003bc6 <m_and_hs_using_vs_access_1+0x4ae>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003c42:	57fd                	li	a5,-1
    80003c44:	d2f99ce3          	bne	s3,a5,8000397c <m_and_hs_using_vs_access_1+0x264>
    80003c48:	b7e9                	j	80003c12 <m_and_hs_using_vs_access_1+0x4fa>
    80003c4a:	cf249be3          	bne	s1,s2,80003940 <m_and_hs_using_vs_access_1+0x228>
    80003c4e:	0002c597          	auipc	a1,0x2c
    80003c52:	36a58593          	addi	a1,a1,874 # 8002ffb8 <__func__.0+0x2c8>
    80003c56:	0002c517          	auipc	a0,0x2c
    80003c5a:	3b250513          	addi	a0,a0,946 # 80030008 <__func__.0+0x318>
    80003c5e:	42e290ef          	jal	8002d08c <printf>
    80003c62:	00054797          	auipc	a5,0x54
    80003c66:	3af7c783          	lbu	a5,943(a5) # 80058011 <excpt+0x1>
    80003c6a:	dbc9                	beqz	a5,80003bfc <m_and_hs_using_vs_access_1+0x4e4>
    80003c6c:	b1e5                	j	80003954 <m_and_hs_using_vs_access_1+0x23c>
    TEST_ASSERT("machine sets mprv to access vs space",
    80003c6e:	0002c597          	auipc	a1,0x2c
    80003c72:	34a58593          	addi	a1,a1,842 # 8002ffb8 <__func__.0+0x2c8>
    80003c76:	0002c517          	auipc	a0,0x2c
    80003c7a:	39250513          	addi	a0,a0,914 # 80030008 <__func__.0+0x318>
    80003c7e:	40e290ef          	jal	8002d08c <printf>
    80003c82:	00054797          	auipc	a5,0x54
    80003c86:	38f7c783          	lbu	a5,911(a5) # 80058011 <excpt+0x1>
    80003c8a:	bc0781e3          	beqz	a5,8000384c <m_and_hs_using_vs_access_1+0x134>
    80003c8e:	b66d                	j	80003838 <m_and_hs_using_vs_access_1+0x120>
    TEST_ASSERT("hs hlvd",
    80003c90:	0002c597          	auipc	a1,0x2c
    80003c94:	32858593          	addi	a1,a1,808 # 8002ffb8 <__func__.0+0x2c8>
    80003c98:	0002c517          	auipc	a0,0x2c
    80003c9c:	37050513          	addi	a0,a0,880 # 80030008 <__func__.0+0x318>
    80003ca0:	3ec290ef          	jal	8002d08c <printf>
    80003ca4:	00054797          	auipc	a5,0x54
    80003ca8:	36d7c783          	lbu	a5,877(a5) # 80058011 <excpt+0x1>
    80003cac:	e6078ce3          	beqz	a5,80003b24 <m_and_hs_using_vs_access_1+0x40c>
    80003cb0:	b125                	j	800038d8 <m_and_hs_using_vs_access_1+0x1c0>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003cb2:	d9341de3          	bne	s0,s3,80003a4c <m_and_hs_using_vs_access_1+0x334>
    80003cb6:	0002c597          	auipc	a1,0x2c
    80003cba:	30258593          	addi	a1,a1,770 # 8002ffb8 <__func__.0+0x2c8>
    80003cbe:	0002c517          	auipc	a0,0x2c
    80003cc2:	34a50513          	addi	a0,a0,842 # 80030008 <__func__.0+0x318>
    80003cc6:	3c6290ef          	jal	8002d08c <printf>
    80003cca:	00054797          	auipc	a5,0x54
    80003cce:	3477c783          	lbu	a5,839(a5) # 80058011 <excpt+0x1>
    80003cd2:	e80789e3          	beqz	a5,80003b64 <m_and_hs_using_vs_access_1+0x44c>
    80003cd6:	b369                	j	80003a60 <m_and_hs_using_vs_access_1+0x348>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003cd8:	cf2497e3          	bne	s1,s2,800039c6 <m_and_hs_using_vs_access_1+0x2ae>
    80003cdc:	0002c597          	auipc	a1,0x2c
    80003ce0:	2dc58593          	addi	a1,a1,732 # 8002ffb8 <__func__.0+0x2c8>
    80003ce4:	0002c517          	auipc	a0,0x2c
    80003ce8:	32450513          	addi	a0,a0,804 # 80030008 <__func__.0+0x318>
    80003cec:	3a0290ef          	jal	8002d08c <printf>
    80003cf0:	00054797          	auipc	a5,0x54
    80003cf4:	3217c783          	lbu	a5,801(a5) # 80058011 <excpt+0x1>
    80003cf8:	ea078ce3          	beqz	a5,80003bb0 <m_and_hs_using_vs_access_1+0x498>
    80003cfc:	b9f9                	j	800039da <m_and_hs_using_vs_access_1+0x2c2>

0000000080003cfe <m_and_hs_using_vs_access_2>:
     * hlvx instruction but on a previous lui instruction. 
     * TODO: find out why
     */


bool m_and_hs_using_vs_access_2(){
    80003cfe:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003d00:	0002a597          	auipc	a1,0x2a
    80003d04:	23058593          	addi	a1,a1,560 # 8002df30 <__func__.10>
    80003d08:	0002c517          	auipc	a0,0x2c
    80003d0c:	2d050513          	addi	a0,a0,720 # 8002ffd8 <__func__.0+0x2e8>
bool m_and_hs_using_vs_access_2(){
    80003d10:	ec06                	sd	ra,24(sp)
    80003d12:	e822                	sd	s0,16(sp)
    80003d14:	e426                	sd	s1,8(sp)
    TEST_START();
    80003d16:	376290ef          	jal	8002d08c <printf>
    80003d1a:	4529                	li	a0,10
    80003d1c:	05e280ef          	jal	8002bd7a <putchar>
    
    hspt_init();
    80003d20:	8c1fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003d24:	ca1fc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80003d28:	a55fc0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_HS);
    80003d2c:	450d                	li	a0,3
    80003d2e:	9dafd0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80003d32:	4509                	li	a0,2
    80003d34:	8f4fd0ef          	jal	80000e28 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003d38:	8d4fd0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80003d3c:	200037b7          	lui	a5,0x20003
    80003d40:	078e                	slli	a5,a5,0x3
    80003d42:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSX_GUX));
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003d46:	08200593          	li	a1,130
    80003d4a:	0002d617          	auipc	a2,0x2d
    80003d4e:	b3e60613          	addi	a2,a2,-1218 # 80030888 <__func__.0+0xb98>
    80003d52:	0002c517          	auipc	a0,0x2c
    80003d56:	29e50513          	addi	a0,a0,670 # 8002fff0 <__func__.0+0x300>
    80003d5a:	332290ef          	jal	8002d08c <printf>
    80003d5e:	00054797          	auipc	a5,0x54
    80003d62:	2b37c783          	lbu	a5,691(a5) # 80058011 <excpt+0x1>
    80003d66:	0002c597          	auipc	a1,0x2c
    80003d6a:	25258593          	addi	a1,a1,594 # 8002ffb8 <__func__.0+0x2c8>
    80003d6e:	c789                	beqz	a5,80003d78 <m_and_hs_using_vs_access_2+0x7a>
    80003d70:	0002c597          	auipc	a1,0x2c
    80003d74:	25858593          	addi	a1,a1,600 # 8002ffc8 <__func__.0+0x2d8>
    80003d78:	0002c517          	auipc	a0,0x2c
    80003d7c:	29050513          	addi	a0,a0,656 # 80030008 <__func__.0+0x318>
    80003d80:	30c290ef          	jal	8002d08c <printf>
    80003d84:	00054797          	auipc	a5,0x54
    80003d88:	28d7c783          	lbu	a5,653(a5) # 80058011 <excpt+0x1>
    80003d8c:	24079d63          	bnez	a5,80003fe6 <m_and_hs_using_vs_access_2+0x2e8>
    80003d90:	4529                	li	a0,10
    80003d92:	7e9270ef          	jal	8002bd7a <putchar>
    80003d96:	00054497          	auipc	s1,0x54
    80003d9a:	27b4c483          	lbu	s1,635(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003d9e:	86efd0ef          	jal	80000e0c <test_setup_except_function>
    80003da2:	4785                	li	a5,1
    80003da4:	1782                	slli	a5,a5,0x20
    80003da6:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURWX));
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003daa:	08200593          	li	a1,130
    80003dae:	0002d617          	auipc	a2,0x2d
    80003db2:	b0260613          	addi	a2,a2,-1278 # 800308b0 <__func__.0+0xbc0>
    80003db6:	0002c517          	auipc	a0,0x2c
    80003dba:	23a50513          	addi	a0,a0,570 # 8002fff0 <__func__.0+0x300>
    80003dbe:	2ce290ef          	jal	8002d08c <printf>
    80003dc2:	00054797          	auipc	a5,0x54
    80003dc6:	24f7c783          	lbu	a5,591(a5) # 80058011 <excpt+0x1>
    80003dca:	0002c597          	auipc	a1,0x2c
    80003dce:	1fe58593          	addi	a1,a1,510 # 8002ffc8 <__func__.0+0x2d8>
    80003dd2:	e789                	bnez	a5,80003ddc <m_and_hs_using_vs_access_2+0xde>
    80003dd4:	0002c597          	auipc	a1,0x2c
    80003dd8:	1e458593          	addi	a1,a1,484 # 8002ffb8 <__func__.0+0x2c8>
    80003ddc:	0002c517          	auipc	a0,0x2c
    80003de0:	22c50513          	addi	a0,a0,556 # 80030008 <__func__.0+0x318>
    80003de4:	2a8290ef          	jal	8002d08c <printf>
    80003de8:	00054797          	auipc	a5,0x54
    80003dec:	2297c783          	lbu	a5,553(a5) # 80058011 <excpt+0x1>
    80003df0:	1e079063          	bnez	a5,80003fd0 <m_and_hs_using_vs_access_2+0x2d2>
    80003df4:	4529                	li	a0,10
    80003df6:	785270ef          	jal	8002bd7a <putchar>
    80003dfa:	4401                	li	s0,0
    80003dfc:	e499                	bnez	s1,80003e0a <m_and_hs_using_vs_access_2+0x10c>
    80003dfe:	00054417          	auipc	s0,0x54
    80003e02:	21344403          	lbu	s0,531(s0) # 80058011 <excpt+0x1>
    80003e06:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003e0a:	802fd0ef          	jal	80000e0c <test_setup_except_function>
    80003e0e:	001007b7          	lui	a5,0x100
    80003e12:	0785                	addi	a5,a5,1 # 100001 <STACK_SIZE+0x1>
    80003e14:	07b2                	slli	a5,a5,0xc
    80003e16:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURW));
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003e1a:	08200593          	li	a1,130
    80003e1e:	0002d617          	auipc	a2,0x2d
    80003e22:	ac260613          	addi	a2,a2,-1342 # 800308e0 <__func__.0+0xbf0>
    80003e26:	0002c517          	auipc	a0,0x2c
    80003e2a:	1ca50513          	addi	a0,a0,458 # 8002fff0 <__func__.0+0x300>
    80003e2e:	25e290ef          	jal	8002d08c <printf>
    80003e32:	00054797          	auipc	a5,0x54
    80003e36:	1df7c783          	lbu	a5,479(a5) # 80058011 <excpt+0x1>
    80003e3a:	00054497          	auipc	s1,0x54
    80003e3e:	1d648493          	addi	s1,s1,470 # 80058010 <excpt>
    80003e42:	0002c597          	auipc	a1,0x2c
    80003e46:	18658593          	addi	a1,a1,390 # 8002ffc8 <__func__.0+0x2d8>
    80003e4a:	c789                	beqz	a5,80003e54 <m_and_hs_using_vs_access_2+0x156>
    80003e4c:	6498                	ld	a4,8(s1)
    80003e4e:	47d5                	li	a5,21
    80003e50:	1cf70b63          	beq	a4,a5,80004026 <m_and_hs_using_vs_access_2+0x328>
    80003e54:	0002c517          	auipc	a0,0x2c
    80003e58:	1b450513          	addi	a0,a0,436 # 80030008 <__func__.0+0x318>
    80003e5c:	230290ef          	jal	8002d08c <printf>
    80003e60:	00054797          	auipc	a5,0x54
    80003e64:	1b17c783          	lbu	a5,433(a5) # 80058011 <excpt+0x1>
    80003e68:	c789                	beqz	a5,80003e72 <m_and_hs_using_vs_access_2+0x174>
    80003e6a:	6498                	ld	a4,8(s1)
    80003e6c:	47d5                	li	a5,21
    80003e6e:	14f70463          	beq	a4,a5,80003fb6 <m_and_hs_using_vs_access_2+0x2b8>
    80003e72:	0002c517          	auipc	a0,0x2c
    80003e76:	19e50513          	addi	a0,a0,414 # 80030010 <__func__.0+0x320>
    80003e7a:	212290ef          	jal	8002d08c <printf>
    80003e7e:	02900513          	li	a0,41
    80003e82:	6f9270ef          	jal	8002bd7a <putchar>
    80003e86:	4529                	li	a0,10
    80003e88:	6f3270ef          	jal	8002bd7a <putchar>
    80003e8c:	c801                	beqz	s0,80003e9c <m_and_hs_using_vs_access_2+0x19e>
    80003e8e:	00054797          	auipc	a5,0x54
    80003e92:	1837c783          	lbu	a5,387(a5) # 80058011 <excpt+0x1>
    80003e96:	4401                	li	s0,0
    80003e98:	0e079363          	bnez	a5,80003f7e <m_and_hs_using_vs_access_2+0x280>
        excpt.cause == CAUSE_LGPF && 
        excpt.gva == true &&
        excpt.xpv == false
    );

    TEST_SETUP_EXCEPT();
    80003e9c:	f71fc0ef          	jal	80000e0c <test_setup_except_function>
    80003ea0:	001007b7          	lui	a5,0x100
    80003ea4:	0795                	addi	a5,a5,5 # 100005 <STACK_SIZE+0x5>
    80003ea6:	07b2                	slli	a5,a5,0xc
    80003ea8:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRW_GURWX));
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003eac:	08200593          	li	a1,130
    80003eb0:	0002d617          	auipc	a2,0x2d
    80003eb4:	a6860613          	addi	a2,a2,-1432 # 80030918 <__func__.0+0xc28>
    80003eb8:	0002c517          	auipc	a0,0x2c
    80003ebc:	13850513          	addi	a0,a0,312 # 8002fff0 <__func__.0+0x300>
    80003ec0:	1cc290ef          	jal	8002d08c <printf>
    80003ec4:	00054797          	auipc	a5,0x54
    80003ec8:	14d7c783          	lbu	a5,333(a5) # 80058011 <excpt+0x1>
    80003ecc:	0002c597          	auipc	a1,0x2c
    80003ed0:	0fc58593          	addi	a1,a1,252 # 8002ffc8 <__func__.0+0x2d8>
    80003ed4:	c789                	beqz	a5,80003ede <m_and_hs_using_vs_access_2+0x1e0>
    80003ed6:	6498                	ld	a4,8(s1)
    80003ed8:	47b5                	li	a5,13
    80003eda:	12f70163          	beq	a4,a5,80003ffc <m_and_hs_using_vs_access_2+0x2fe>
    80003ede:	0002c517          	auipc	a0,0x2c
    80003ee2:	12a50513          	addi	a0,a0,298 # 80030008 <__func__.0+0x318>
    80003ee6:	1a6290ef          	jal	8002d08c <printf>
    80003eea:	00054797          	auipc	a5,0x54
    80003eee:	1277c783          	lbu	a5,295(a5) # 80058011 <excpt+0x1>
    80003ef2:	c789                	beqz	a5,80003efc <m_and_hs_using_vs_access_2+0x1fe>
    80003ef4:	6498                	ld	a4,8(s1)
    80003ef6:	47b5                	li	a5,13
    80003ef8:	0af70463          	beq	a4,a5,80003fa0 <m_and_hs_using_vs_access_2+0x2a2>
    80003efc:	0002c517          	auipc	a0,0x2c
    80003f00:	11450513          	addi	a0,a0,276 # 80030010 <__func__.0+0x320>
    80003f04:	188290ef          	jal	8002d08c <printf>
    80003f08:	02900513          	li	a0,41
    80003f0c:	66f270ef          	jal	8002bd7a <putchar>
    80003f10:	4529                	li	a0,10
    80003f12:	669270ef          	jal	8002bd7a <putchar>
    80003f16:	c411                	beqz	s0,80003f22 <m_and_hs_using_vs_access_2+0x224>
    80003f18:	00054797          	auipc	a5,0x54
    80003f1c:	0f97c783          	lbu	a5,249(a5) # 80058011 <excpt+0x1>
    80003f20:	e79d                	bnez	a5,80003f4e <m_and_hs_using_vs_access_2+0x250>
    80003f22:	4401                	li	s0,0
        excpt.gva == true &&
        excpt.xpv == false
    );

    
    TEST_END();
    80003f24:	0002c597          	auipc	a1,0x2c
    80003f28:	0a458593          	addi	a1,a1,164 # 8002ffc8 <__func__.0+0x2d8>
    80003f2c:	0002c517          	auipc	a0,0x2c
    80003f30:	14450513          	addi	a0,a0,324 # 80030070 <__func__.0+0x380>
    80003f34:	158290ef          	jal	8002d08c <printf>
    80003f38:	4511                	li	a0,4
    80003f3a:	fcffc0ef          	jal	80000f08 <goto_priv>
    80003f3e:	995fd0ef          	jal	800018d2 <reset_state>
}
    80003f42:	60e2                	ld	ra,24(sp)
    80003f44:	8522                	mv	a0,s0
    80003f46:	6442                	ld	s0,16(sp)
    80003f48:	64a2                	ld	s1,8(sp)
    80003f4a:	6105                	addi	sp,sp,32
    80003f4c:	8082                	ret
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003f4e:	6498                	ld	a4,8(s1)
    80003f50:	47b5                	li	a5,13
    80003f52:	4401                	li	s0,0
    TEST_END();
    80003f54:	0002c597          	auipc	a1,0x2c
    80003f58:	07458593          	addi	a1,a1,116 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003f5c:	fcf718e3          	bne	a4,a5,80003f2c <m_and_hs_using_vs_access_2+0x22e>
    80003f60:	00054417          	auipc	s0,0x54
    80003f64:	0e044403          	lbu	s0,224(s0) # 80058040 <excpt+0x30>
    80003f68:	d071                	beqz	s0,80003f2c <m_and_hs_using_vs_access_2+0x22e>
    80003f6a:	00054797          	auipc	a5,0x54
    80003f6e:	0d77c783          	lbu	a5,215(a5) # 80058041 <excpt+0x31>
    TEST_END();
    80003f72:	0002c597          	auipc	a1,0x2c
    80003f76:	04658593          	addi	a1,a1,70 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003f7a:	dbcd                	beqz	a5,80003f2c <m_and_hs_using_vs_access_2+0x22e>
    80003f7c:	b75d                	j	80003f22 <m_and_hs_using_vs_access_2+0x224>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003f7e:	6498                	ld	a4,8(s1)
    80003f80:	47d5                	li	a5,21
    80003f82:	f0f71de3          	bne	a4,a5,80003e9c <m_and_hs_using_vs_access_2+0x19e>
    80003f86:	00054797          	auipc	a5,0x54
    80003f8a:	0ba7c783          	lbu	a5,186(a5) # 80058040 <excpt+0x30>
    80003f8e:	f00787e3          	beqz	a5,80003e9c <m_and_hs_using_vs_access_2+0x19e>
    80003f92:	00054417          	auipc	s0,0x54
    80003f96:	0af44403          	lbu	s0,175(s0) # 80058041 <excpt+0x31>
    80003f9a:	00144413          	xori	s0,s0,1
    80003f9e:	bdfd                	j	80003e9c <m_and_hs_using_vs_access_2+0x19e>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003fa0:	00054797          	auipc	a5,0x54
    80003fa4:	0a07c783          	lbu	a5,160(a5) # 80058040 <excpt+0x30>
    80003fa8:	dbb1                	beqz	a5,80003efc <m_and_hs_using_vs_access_2+0x1fe>
    80003faa:	00054797          	auipc	a5,0x54
    80003fae:	0977c783          	lbu	a5,151(a5) # 80058041 <excpt+0x31>
    80003fb2:	dfb9                	beqz	a5,80003f10 <m_and_hs_using_vs_access_2+0x212>
    80003fb4:	b7a1                	j	80003efc <m_and_hs_using_vs_access_2+0x1fe>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003fb6:	00054797          	auipc	a5,0x54
    80003fba:	08a7c783          	lbu	a5,138(a5) # 80058040 <excpt+0x30>
    80003fbe:	ea078ae3          	beqz	a5,80003e72 <m_and_hs_using_vs_access_2+0x174>
    80003fc2:	00054797          	auipc	a5,0x54
    80003fc6:	07f7c783          	lbu	a5,127(a5) # 80058041 <excpt+0x31>
    80003fca:	ea078ee3          	beqz	a5,80003e86 <m_and_hs_using_vs_access_2+0x188>
    80003fce:	b555                	j	80003e72 <m_and_hs_using_vs_access_2+0x174>
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003fd0:	0002c517          	auipc	a0,0x2c
    80003fd4:	04050513          	addi	a0,a0,64 # 80030010 <__func__.0+0x320>
    80003fd8:	0b4290ef          	jal	8002d08c <printf>
    80003fdc:	02900513          	li	a0,41
    80003fe0:	59b270ef          	jal	8002bd7a <putchar>
    80003fe4:	bd01                	j	80003df4 <m_and_hs_using_vs_access_2+0xf6>
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003fe6:	0002c517          	auipc	a0,0x2c
    80003fea:	02a50513          	addi	a0,a0,42 # 80030010 <__func__.0+0x320>
    80003fee:	09e290ef          	jal	8002d08c <printf>
    80003ff2:	02900513          	li	a0,41
    80003ff6:	585270ef          	jal	8002bd7a <putchar>
    80003ffa:	bb59                	j	80003d90 <m_and_hs_using_vs_access_2+0x92>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003ffc:	00054797          	auipc	a5,0x54
    80004000:	0447c783          	lbu	a5,68(a5) # 80058040 <excpt+0x30>
    80004004:	ec078de3          	beqz	a5,80003ede <m_and_hs_using_vs_access_2+0x1e0>
    80004008:	00054797          	auipc	a5,0x54
    8000400c:	0397c783          	lbu	a5,57(a5) # 80058041 <excpt+0x31>
    80004010:	0002c597          	auipc	a1,0x2c
    80004014:	fa858593          	addi	a1,a1,-88 # 8002ffb8 <__func__.0+0x2c8>
    80004018:	ec0783e3          	beqz	a5,80003ede <m_and_hs_using_vs_access_2+0x1e0>
    8000401c:	0002c597          	auipc	a1,0x2c
    80004020:	fac58593          	addi	a1,a1,-84 # 8002ffc8 <__func__.0+0x2d8>
    80004024:	bd6d                	j	80003ede <m_and_hs_using_vs_access_2+0x1e0>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80004026:	00054797          	auipc	a5,0x54
    8000402a:	01a7c783          	lbu	a5,26(a5) # 80058040 <excpt+0x30>
    8000402e:	e20783e3          	beqz	a5,80003e54 <m_and_hs_using_vs_access_2+0x156>
    80004032:	00054797          	auipc	a5,0x54
    80004036:	00f7c783          	lbu	a5,15(a5) # 80058041 <excpt+0x31>
    8000403a:	0002c597          	auipc	a1,0x2c
    8000403e:	f7e58593          	addi	a1,a1,-130 # 8002ffb8 <__func__.0+0x2c8>
    80004042:	e00789e3          	beqz	a5,80003e54 <m_and_hs_using_vs_access_2+0x156>
    80004046:	0002c597          	auipc	a1,0x2c
    8000404a:	f8258593          	addi	a1,a1,-126 # 8002ffc8 <__func__.0+0x2d8>
    8000404e:	b519                	j	80003e54 <m_and_hs_using_vs_access_2+0x156>

0000000080004050 <m_and_hs_using_vs_access_3>:

bool m_and_hs_using_vs_access_3(){
    80004050:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004052:	0002a597          	auipc	a1,0x2a
    80004056:	efe58593          	addi	a1,a1,-258 # 8002df50 <__func__.9>
    8000405a:	0002c517          	auipc	a0,0x2c
    8000405e:	f7e50513          	addi	a0,a0,-130 # 8002ffd8 <__func__.0+0x2e8>
bool m_and_hs_using_vs_access_3(){
    80004062:	ec06                	sd	ra,24(sp)
    80004064:	e822                	sd	s0,16(sp)
    80004066:	e426                	sd	s1,8(sp)
    80004068:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000406a:	022290ef          	jal	8002d08c <printf>
    8000406e:	4529                	li	a0,10
    80004070:	50b270ef          	jal	8002bd7a <putchar>
    
    hspt_init();
    80004074:	d6cfc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004078:	94dfc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8000407c:	f00fc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_M);
    80004080:	4511                	li	a0,4
    80004082:	e87fc0ef          	jal	80000f08 <goto_priv>
    *((volatile uint64_t*) addr) = val;
    80004086:	00038417          	auipc	s0,0x38
    8000408a:	d6a40413          	addi	s0,s0,-662 # 8003bdf0 <__func__.0+0xc100>

    TEST_SETUP_EXCEPT();
    8000408e:	d7ffc0ef          	jal	80000e0c <test_setup_except_function>
    80004092:	6018                	ld	a4,0(s0)
    80004094:	440197b7          	lui	a5,0x44019
    80004098:	0786                	slli	a5,a5,0x1
    8000409a:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    8000409c:	0003a717          	auipc	a4,0x3a
    800040a0:	d8872703          	lw	a4,-632(a4) # 8003de24 <curr_priv>
    800040a4:	4791                	li	a5,4
    800040a6:	02f70763          	beq	a4,a5,800040d4 <m_and_hs_using_vs_access_3+0x84>
        ERROR("trying to read as mprv from low privilege");
    800040aa:	0002c517          	auipc	a0,0x2c
    800040ae:	72650513          	addi	a0,a0,1830 # 800307d0 <__func__.0+0xae0>
    800040b2:	7db280ef          	jal	8002d08c <printf>
    800040b6:	0fe00613          	li	a2,254
    800040ba:	0002a597          	auipc	a1,0x2a
    800040be:	e6658593          	addi	a1,a1,-410 # 8002df20 <__func__.11>
    800040c2:	0002c517          	auipc	a0,0x2c
    800040c6:	09e50513          	addi	a0,a0,158 # 80030160 <__func__.0+0x470>
    800040ca:	7c3280ef          	jal	8002d08c <printf>
    800040ce:	4501                	li	a0,0
    800040d0:	373280ef          	jal	8002cc42 <exit>
    set_prev_priv(priv);
    800040d4:	4509                	li	a0,2
    800040d6:	d53fc0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    800040da:	000807b7          	lui	a5,0x80
    800040de:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800040e0:	07b6                	slli	a5,a5,0xd
    800040e2:	00020737          	lui	a4,0x20
    800040e6:	30072073          	csrs	mstatus,a4
    800040ea:	6394                	ld	a3,0(a5)
    800040ec:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv vs access to vu leads to exception",
    800040f0:	08200593          	li	a1,130
    800040f4:	0002d617          	auipc	a2,0x2d
    800040f8:	85c60613          	addi	a2,a2,-1956 # 80030950 <__func__.0+0xc60>
    800040fc:	0002c517          	auipc	a0,0x2c
    80004100:	ef450513          	addi	a0,a0,-268 # 8002fff0 <__func__.0+0x300>
    80004104:	789280ef          	jal	8002d08c <printf>
    80004108:	00054797          	auipc	a5,0x54
    8000410c:	f097c783          	lbu	a5,-247(a5) # 80058011 <excpt+0x1>
    80004110:	00054917          	auipc	s2,0x54
    80004114:	f0090913          	addi	s2,s2,-256 # 80058010 <excpt>
    80004118:	0002c597          	auipc	a1,0x2c
    8000411c:	eb058593          	addi	a1,a1,-336 # 8002ffc8 <__func__.0+0x2d8>
    80004120:	cf91                	beqz	a5,8000413c <m_and_hs_using_vs_access_3+0xec>
    80004122:	00893703          	ld	a4,8(s2)
    80004126:	47b5                	li	a5,13
    80004128:	0002c597          	auipc	a1,0x2c
    8000412c:	e9058593          	addi	a1,a1,-368 # 8002ffb8 <__func__.0+0x2c8>
    80004130:	00f70663          	beq	a4,a5,8000413c <m_and_hs_using_vs_access_3+0xec>
    80004134:	0002c597          	auipc	a1,0x2c
    80004138:	e9458593          	addi	a1,a1,-364 # 8002ffc8 <__func__.0+0x2d8>
    8000413c:	0002c517          	auipc	a0,0x2c
    80004140:	ecc50513          	addi	a0,a0,-308 # 80030008 <__func__.0+0x318>
    80004144:	749280ef          	jal	8002d08c <printf>
    80004148:	00054797          	auipc	a5,0x54
    8000414c:	ec97c783          	lbu	a5,-311(a5) # 80058011 <excpt+0x1>
    80004150:	c791                	beqz	a5,8000415c <m_and_hs_using_vs_access_3+0x10c>
    80004152:	00893703          	ld	a4,8(s2)
    80004156:	47b5                	li	a5,13
    80004158:	00f70c63          	beq	a4,a5,80004170 <m_and_hs_using_vs_access_3+0x120>
    8000415c:	0002c517          	auipc	a0,0x2c
    80004160:	eb450513          	addi	a0,a0,-332 # 80030010 <__func__.0+0x320>
    80004164:	729280ef          	jal	8002d08c <printf>
    80004168:	02900513          	li	a0,41
    8000416c:	40f270ef          	jal	8002bd7a <putchar>
    80004170:	4529                	li	a0,10
    80004172:	409270ef          	jal	8002bd7a <putchar>
    80004176:	00054797          	auipc	a5,0x54
    8000417a:	e9b7c783          	lbu	a5,-357(a5) # 80058011 <excpt+0x1>
    8000417e:	4481                	li	s1,0
    80004180:	c791                	beqz	a5,8000418c <m_and_hs_using_vs_access_3+0x13c>
    80004182:	00893483          	ld	s1,8(s2)
    80004186:	14cd                	addi	s1,s1,-13
    80004188:	0014b493          	seqz	s1,s1
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF 
    );

    TEST_SETUP_EXCEPT();
    8000418c:	c81fc0ef          	jal	80000e0c <test_setup_except_function>
    80004190:	6018                	ld	a4,0(s0)
    80004192:	440197b7          	lui	a5,0x44019
    80004196:	0786                	slli	a5,a5,0x1
    80004198:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    8000419a:	0003a717          	auipc	a4,0x3a
    8000419e:	c8a72703          	lw	a4,-886(a4) # 8003de24 <curr_priv>
    800041a2:	4791                	li	a5,4
    800041a4:	f0f713e3          	bne	a4,a5,800040aa <m_and_hs_using_vs_access_3+0x5a>
    set_prev_priv(priv);
    800041a8:	4501                	li	a0,0
    800041aa:	c7ffc0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    800041ae:	000807b7          	lui	a5,0x80
    800041b2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800041b4:	07b6                	slli	a5,a5,0xd
    800041b6:	00020737          	lui	a4,0x20
    800041ba:	30072073          	csrs	mstatus,a4
    800041be:	6394                	ld	a3,0(a5)
    800041c0:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VU, vaddr);
    TEST_ASSERT("machine mprv vu access to vu successful",
    800041c4:	08200593          	li	a1,130
    800041c8:	0002c617          	auipc	a2,0x2c
    800041cc:	7b860613          	addi	a2,a2,1976 # 80030980 <__func__.0+0xc90>
    800041d0:	0002c517          	auipc	a0,0x2c
    800041d4:	e2050513          	addi	a0,a0,-480 # 8002fff0 <__func__.0+0x300>
    800041d8:	6b5280ef          	jal	8002d08c <printf>
    800041dc:	00054797          	auipc	a5,0x54
    800041e0:	e357c783          	lbu	a5,-459(a5) # 80058011 <excpt+0x1>
    800041e4:	0002c597          	auipc	a1,0x2c
    800041e8:	de458593          	addi	a1,a1,-540 # 8002ffc8 <__func__.0+0x2d8>
    800041ec:	e789                	bnez	a5,800041f6 <m_and_hs_using_vs_access_3+0x1a6>
    800041ee:	0002c597          	auipc	a1,0x2c
    800041f2:	dca58593          	addi	a1,a1,-566 # 8002ffb8 <__func__.0+0x2c8>
    800041f6:	0002c517          	auipc	a0,0x2c
    800041fa:	e1250513          	addi	a0,a0,-494 # 80030008 <__func__.0+0x318>
    800041fe:	68f280ef          	jal	8002d08c <printf>
    80004202:	00054797          	auipc	a5,0x54
    80004206:	e0f7c783          	lbu	a5,-497(a5) # 80058011 <excpt+0x1>
    8000420a:	e7b9                	bnez	a5,80004258 <m_and_hs_using_vs_access_3+0x208>
    8000420c:	4529                	li	a0,10
    8000420e:	36d270ef          	jal	8002bd7a <putchar>
    80004212:	c491                	beqz	s1,8000421e <m_and_hs_using_vs_access_3+0x1ce>
    80004214:	00054797          	auipc	a5,0x54
    80004218:	dfd7c783          	lbu	a5,-515(a5) # 80058011 <excpt+0x1>
    8000421c:	cb85                	beqz	a5,8000424c <m_and_hs_using_vs_access_3+0x1fc>
    8000421e:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80004220:	0002c597          	auipc	a1,0x2c
    80004224:	da858593          	addi	a1,a1,-600 # 8002ffc8 <__func__.0+0x2d8>
    80004228:	0002c517          	auipc	a0,0x2c
    8000422c:	e4850513          	addi	a0,a0,-440 # 80030070 <__func__.0+0x380>
    80004230:	65d280ef          	jal	8002d08c <printf>
    80004234:	4511                	li	a0,4
    80004236:	cd3fc0ef          	jal	80000f08 <goto_priv>
    8000423a:	e98fd0ef          	jal	800018d2 <reset_state>
}
    8000423e:	60e2                	ld	ra,24(sp)
    80004240:	8522                	mv	a0,s0
    80004242:	6442                	ld	s0,16(sp)
    80004244:	64a2                	ld	s1,8(sp)
    80004246:	6902                	ld	s2,0(sp)
    80004248:	6105                	addi	sp,sp,32
    8000424a:	8082                	ret
    TEST_ASSERT("machine mprv vu access to vu successful",
    8000424c:	4405                	li	s0,1
    TEST_END();
    8000424e:	0002c597          	auipc	a1,0x2c
    80004252:	d6a58593          	addi	a1,a1,-662 # 8002ffb8 <__func__.0+0x2c8>
    80004256:	bfc9                	j	80004228 <m_and_hs_using_vs_access_3+0x1d8>
    TEST_ASSERT("machine mprv vu access to vu successful",
    80004258:	0002c517          	auipc	a0,0x2c
    8000425c:	db850513          	addi	a0,a0,-584 # 80030010 <__func__.0+0x320>
    80004260:	62d280ef          	jal	8002d08c <printf>
    80004264:	02900513          	li	a0,41
    80004268:	313270ef          	jal	8002bd7a <putchar>
    8000426c:	b745                	j	8000420c <m_and_hs_using_vs_access_3+0x1bc>

000000008000426e <m_and_hs_using_vs_access_4>:

bool m_and_hs_using_vs_access_4(){
    8000426e:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004270:	0002a597          	auipc	a1,0x2a
    80004274:	d0058593          	addi	a1,a1,-768 # 8002df70 <__func__.8>
    80004278:	0002c517          	auipc	a0,0x2c
    8000427c:	d6050513          	addi	a0,a0,-672 # 8002ffd8 <__func__.0+0x2e8>
bool m_and_hs_using_vs_access_4(){
    80004280:	ec06                	sd	ra,24(sp)
    80004282:	e822                	sd	s0,16(sp)
    80004284:	e426                	sd	s1,8(sp)
    80004286:	e04a                	sd	s2,0(sp)
    TEST_START();
    80004288:	605280ef          	jal	8002d08c <printf>
    8000428c:	4529                	li	a0,10
    8000428e:	2ed270ef          	jal	8002bd7a <putchar>
    
    hspt_init();
    80004292:	b4efc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004296:	f2efc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8000429a:	ce2fc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    8000429e:	450d                	li	a0,3
    800042a0:	c69fc0ef          	jal	80000f08 <goto_priv>

    set_prev_priv(PRIV_VU);
    800042a4:	4501                	li	a0,0
    800042a6:	b83fc0ef          	jal	80000e28 <set_prev_priv>
    800042aa:	00038417          	auipc	s0,0x38
    800042ae:	b4640413          	addi	s0,s0,-1210 # 8003bdf0 <__func__.0+0xc100>
    TEST_SETUP_EXCEPT();
    800042b2:	b5bfc0ef          	jal	80000e0c <test_setup_except_function>
    800042b6:	6014                	ld	a3,0(s0)
    800042b8:	44019737          	lui	a4,0x44019
    asm volatile(
    800042bc:	000807b7          	lui	a5,0x80
    800042c0:	0706                	slli	a4,a4,0x1
    800042c2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800042c4:	e314                	sd	a3,0(a4)
    800042c6:	07b6                	slli	a5,a5,0xd
    800042c8:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800042cc:	08200593          	li	a1,130
    800042d0:	0002c617          	auipc	a2,0x2c
    800042d4:	6d860613          	addi	a2,a2,1752 # 800309a8 <__func__.0+0xcb8>
    800042d8:	0002c517          	auipc	a0,0x2c
    800042dc:	d1850513          	addi	a0,a0,-744 # 8002fff0 <__func__.0+0x300>
    800042e0:	5ad280ef          	jal	8002d08c <printf>
    800042e4:	00054797          	auipc	a5,0x54
    800042e8:	d2d7c783          	lbu	a5,-723(a5) # 80058011 <excpt+0x1>
    800042ec:	0002c597          	auipc	a1,0x2c
    800042f0:	ccc58593          	addi	a1,a1,-820 # 8002ffb8 <__func__.0+0x2c8>
    800042f4:	c789                	beqz	a5,800042fe <m_and_hs_using_vs_access_4+0x90>
    800042f6:	0002c597          	auipc	a1,0x2c
    800042fa:	cd258593          	addi	a1,a1,-814 # 8002ffc8 <__func__.0+0x2d8>
    800042fe:	0002c517          	auipc	a0,0x2c
    80004302:	d0a50513          	addi	a0,a0,-758 # 80030008 <__func__.0+0x318>
    80004306:	587280ef          	jal	8002d08c <printf>
    8000430a:	00054797          	auipc	a5,0x54
    8000430e:	d077c783          	lbu	a5,-761(a5) # 80058011 <excpt+0x1>
    80004312:	10079463          	bnez	a5,8000441a <m_and_hs_using_vs_access_4+0x1ac>
    80004316:	4529                	li	a0,10
    80004318:	263270ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    8000431c:	4509                	li	a0,2
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    8000431e:	00054917          	auipc	s2,0x54
    80004322:	cf394903          	lbu	s2,-781(s2) # 80058011 <excpt+0x1>
    set_prev_priv(PRIV_VS);
    80004326:	b03fc0ef          	jal	80000e28 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8000432a:	ae3fc0ef          	jal	80000e0c <test_setup_except_function>
    8000432e:	6014                	ld	a3,0(s0)
    80004330:	44019737          	lui	a4,0x44019
    80004334:	000807b7          	lui	a5,0x80
    80004338:	0706                	slli	a4,a4,0x1
    8000433a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    8000433c:	00054497          	auipc	s1,0x54
    80004340:	cd448493          	addi	s1,s1,-812 # 80058010 <excpt>
    80004344:	e314                	sd	a3,0(a4)
    80004346:	07b6                	slli	a5,a5,0xd
    80004348:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8000434c:	08200593          	li	a1,130
    80004350:	0002c617          	auipc	a2,0x2c
    80004354:	68860613          	addi	a2,a2,1672 # 800309d8 <__func__.0+0xce8>
    80004358:	0002c517          	auipc	a0,0x2c
    8000435c:	c9850513          	addi	a0,a0,-872 # 8002fff0 <__func__.0+0x300>
    80004360:	52d280ef          	jal	8002d08c <printf>
    80004364:	00054797          	auipc	a5,0x54
    80004368:	cad7c783          	lbu	a5,-851(a5) # 80058011 <excpt+0x1>
    8000436c:	0002c597          	auipc	a1,0x2c
    80004370:	c5c58593          	addi	a1,a1,-932 # 8002ffc8 <__func__.0+0x2d8>
    80004374:	cf89                	beqz	a5,8000438e <m_and_hs_using_vs_access_4+0x120>
    80004376:	6498                	ld	a4,8(s1)
    80004378:	47b5                	li	a5,13
    8000437a:	0002c597          	auipc	a1,0x2c
    8000437e:	c3e58593          	addi	a1,a1,-962 # 8002ffb8 <__func__.0+0x2c8>
    80004382:	00f70663          	beq	a4,a5,8000438e <m_and_hs_using_vs_access_4+0x120>
    80004386:	0002c597          	auipc	a1,0x2c
    8000438a:	c4258593          	addi	a1,a1,-958 # 8002ffc8 <__func__.0+0x2d8>
    8000438e:	0002c517          	auipc	a0,0x2c
    80004392:	c7a50513          	addi	a0,a0,-902 # 80030008 <__func__.0+0x318>
    80004396:	4f7280ef          	jal	8002d08c <printf>
    8000439a:	00054797          	auipc	a5,0x54
    8000439e:	c777c783          	lbu	a5,-905(a5) # 80058011 <excpt+0x1>
    800043a2:	c789                	beqz	a5,800043ac <m_and_hs_using_vs_access_4+0x13e>
    800043a4:	6498                	ld	a4,8(s1)
    800043a6:	47b5                	li	a5,13
    800043a8:	00f70c63          	beq	a4,a5,800043c0 <m_and_hs_using_vs_access_4+0x152>
    800043ac:	0002c517          	auipc	a0,0x2c
    800043b0:	c6450513          	addi	a0,a0,-924 # 80030010 <__func__.0+0x320>
    800043b4:	4d9280ef          	jal	8002d08c <printf>
    800043b8:	02900513          	li	a0,41
    800043bc:	1bf270ef          	jal	8002bd7a <putchar>
    800043c0:	4529                	li	a0,10
    800043c2:	1b9270ef          	jal	8002bd7a <putchar>
    800043c6:	02091363          	bnez	s2,800043ec <m_and_hs_using_vs_access_4+0x17e>
    800043ca:	00054417          	auipc	s0,0x54
    800043ce:	c4744403          	lbu	s0,-953(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800043d2:	0002c597          	auipc	a1,0x2c
    800043d6:	bf658593          	addi	a1,a1,-1034 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    800043da:	cc11                	beqz	s0,800043f6 <m_and_hs_using_vs_access_4+0x188>
    800043dc:	6498                	ld	a4,8(s1)
    800043de:	47b5                	li	a5,13
    TEST_END();
    800043e0:	0002c597          	auipc	a1,0x2c
    800043e4:	bd858593          	addi	a1,a1,-1064 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    800043e8:	00f70763          	beq	a4,a5,800043f6 <m_and_hs_using_vs_access_4+0x188>
    800043ec:	4401                	li	s0,0
    TEST_END();
    800043ee:	0002c597          	auipc	a1,0x2c
    800043f2:	bda58593          	addi	a1,a1,-1062 # 8002ffc8 <__func__.0+0x2d8>
    800043f6:	0002c517          	auipc	a0,0x2c
    800043fa:	c7a50513          	addi	a0,a0,-902 # 80030070 <__func__.0+0x380>
    800043fe:	48f280ef          	jal	8002d08c <printf>
    80004402:	4511                	li	a0,4
    80004404:	b05fc0ef          	jal	80000f08 <goto_priv>
    80004408:	ccafd0ef          	jal	800018d2 <reset_state>
}
    8000440c:	60e2                	ld	ra,24(sp)
    8000440e:	8522                	mv	a0,s0
    80004410:	6442                	ld	s0,16(sp)
    80004412:	64a2                	ld	s1,8(sp)
    80004414:	6902                	ld	s2,0(sp)
    80004416:	6105                	addi	sp,sp,32
    80004418:	8082                	ret
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    8000441a:	0002c517          	auipc	a0,0x2c
    8000441e:	bf650513          	addi	a0,a0,-1034 # 80030010 <__func__.0+0x320>
    80004422:	46b280ef          	jal	8002d08c <printf>
    80004426:	02900513          	li	a0,41
    8000442a:	151270ef          	jal	8002bd7a <putchar>
    8000442e:	b5e5                	j	80004316 <m_and_hs_using_vs_access_4+0xa8>

0000000080004430 <m_and_hs_using_vs_access_5>:

bool m_and_hs_using_vs_access_5(){
    80004430:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004432:	0002a597          	auipc	a1,0x2a
    80004436:	b5e58593          	addi	a1,a1,-1186 # 8002df90 <__func__.7>
    8000443a:	0002c517          	auipc	a0,0x2c
    8000443e:	b9e50513          	addi	a0,a0,-1122 # 8002ffd8 <__func__.0+0x2e8>
bool m_and_hs_using_vs_access_5(){
    80004442:	ec06                	sd	ra,24(sp)
    80004444:	e822                	sd	s0,16(sp)
    80004446:	e426                	sd	s1,8(sp)
    TEST_START();
    80004448:	445280ef          	jal	8002d08c <printf>
    8000444c:	4529                	li	a0,10
    8000444e:	12d270ef          	jal	8002bd7a <putchar>
    
    hspt_init();
    80004452:	98efc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004456:	d6efc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8000445a:	b22fc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);


    goto_priv(PRIV_M);
    8000445e:	4511                	li	a0,4
    80004460:	aa9fc0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80004464:	000407b7          	lui	a5,0x40
    80004468:	2007a073          	csrs	vsstatus,a5

    TEST_SETUP_EXCEPT();
    8000446c:	9a1fc0ef          	jal	80000e0c <test_setup_except_function>
    80004470:	00038417          	auipc	s0,0x38
    80004474:	98043403          	ld	s0,-1664(s0) # 8003bdf0 <__func__.0+0xc100>
    80004478:	440197b7          	lui	a5,0x44019
    if(curr_priv != PRIV_M){
    8000447c:	0003a717          	auipc	a4,0x3a
    80004480:	9a872703          	lw	a4,-1624(a4) # 8003de24 <curr_priv>
    80004484:	0786                	slli	a5,a5,0x1
    80004486:	e380                	sd	s0,0(a5)
    80004488:	4791                	li	a5,4
    8000448a:	02f70763          	beq	a4,a5,800044b8 <m_and_hs_using_vs_access_5+0x88>
        ERROR("trying to read as mprv from low privilege");
    8000448e:	0002c517          	auipc	a0,0x2c
    80004492:	34250513          	addi	a0,a0,834 # 800307d0 <__func__.0+0xae0>
    80004496:	3f7280ef          	jal	8002d08c <printf>
    8000449a:	0fe00613          	li	a2,254
    8000449e:	0002a597          	auipc	a1,0x2a
    800044a2:	a8258593          	addi	a1,a1,-1406 # 8002df20 <__func__.11>
    800044a6:	0002c517          	auipc	a0,0x2c
    800044aa:	cba50513          	addi	a0,a0,-838 # 80030160 <__func__.0+0x470>
    800044ae:	3df280ef          	jal	8002d08c <printf>
    800044b2:	4501                	li	a0,0
    800044b4:	78e280ef          	jal	8002cc42 <exit>
    set_prev_priv(priv);
    800044b8:	4509                	li	a0,2
    800044ba:	96ffc0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    800044be:	000807b7          	lui	a5,0x80
    800044c2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800044c4:	07b6                	slli	a5,a5,0xd
    800044c6:	00020737          	lui	a4,0x20
    800044ca:	30072073          	csrs	mstatus,a4
    800044ce:	6384                	ld	s1,0(a5)
    800044d0:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    800044d4:	0002c617          	auipc	a2,0x2c
    800044d8:	53c60613          	addi	a2,a2,1340 # 80030a10 <__func__.0+0xd20>
    800044dc:	08200593          	li	a1,130
    800044e0:	0002c517          	auipc	a0,0x2c
    800044e4:	b1050513          	addi	a0,a0,-1264 # 8002fff0 <__func__.0+0x300>
    800044e8:	3a5280ef          	jal	8002d08c <printf>
    800044ec:	00054797          	auipc	a5,0x54
    800044f0:	b257c783          	lbu	a5,-1243(a5) # 80058011 <excpt+0x1>
    800044f4:	c3d1                	beqz	a5,80004578 <m_and_hs_using_vs_access_5+0x148>
    800044f6:	0002c597          	auipc	a1,0x2c
    800044fa:	ad258593          	addi	a1,a1,-1326 # 8002ffc8 <__func__.0+0x2d8>
    800044fe:	0002c517          	auipc	a0,0x2c
    80004502:	b0a50513          	addi	a0,a0,-1270 # 80030008 <__func__.0+0x318>
    80004506:	387280ef          	jal	8002d08c <printf>
    8000450a:	00054797          	auipc	a5,0x54
    8000450e:	b077c783          	lbu	a5,-1273(a5) # 80058011 <excpt+0x1>
    80004512:	e399                	bnez	a5,80004518 <m_and_hs_using_vs_access_5+0xe8>
    80004514:	08848e63          	beq	s1,s0,800045b0 <m_and_hs_using_vs_access_5+0x180>
    80004518:	0002c517          	auipc	a0,0x2c
    8000451c:	af850513          	addi	a0,a0,-1288 # 80030010 <__func__.0+0x320>
    80004520:	36d280ef          	jal	8002d08c <printf>
    80004524:	02900513          	li	a0,41
    80004528:	053270ef          	jal	8002bd7a <putchar>
    8000452c:	4529                	li	a0,10
    8000452e:	04d270ef          	jal	8002bd7a <putchar>
    80004532:	00054797          	auipc	a5,0x54
    80004536:	adf7c783          	lbu	a5,-1313(a5) # 80058011 <excpt+0x1>
    8000453a:	eb89                	bnez	a5,8000454c <m_and_hs_using_vs_access_5+0x11c>
    8000453c:	011087b7          	lui	a5,0x1108
    80004540:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80004544:	07c2                	slli	a5,a5,0x10
    80004546:	17b9                	addi	a5,a5,-18
    80004548:	06f48c63          	beq	s1,a5,800045c0 <m_and_hs_using_vs_access_5+0x190>
    8000454c:	4401                	li	s0,0
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    TEST_END();
    8000454e:	0002c597          	auipc	a1,0x2c
    80004552:	a7a58593          	addi	a1,a1,-1414 # 8002ffc8 <__func__.0+0x2d8>
    80004556:	0002c517          	auipc	a0,0x2c
    8000455a:	b1a50513          	addi	a0,a0,-1254 # 80030070 <__func__.0+0x380>
    8000455e:	32f280ef          	jal	8002d08c <printf>
    80004562:	4511                	li	a0,4
    80004564:	9a5fc0ef          	jal	80000f08 <goto_priv>
    80004568:	b6afd0ef          	jal	800018d2 <reset_state>
}
    8000456c:	60e2                	ld	ra,24(sp)
    8000456e:	8522                	mv	a0,s0
    80004570:	6442                	ld	s0,16(sp)
    80004572:	64a2                	ld	s1,8(sp)
    80004574:	6105                	addi	sp,sp,32
    80004576:	8082                	ret
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    80004578:	00848d63          	beq	s1,s0,80004592 <m_and_hs_using_vs_access_5+0x162>
    8000457c:	0002c597          	auipc	a1,0x2c
    80004580:	a4c58593          	addi	a1,a1,-1460 # 8002ffc8 <__func__.0+0x2d8>
    80004584:	0002c517          	auipc	a0,0x2c
    80004588:	a8450513          	addi	a0,a0,-1404 # 80030008 <__func__.0+0x318>
    8000458c:	301280ef          	jal	8002d08c <printf>
    80004590:	b761                	j	80004518 <m_and_hs_using_vs_access_5+0xe8>
    80004592:	0002c597          	auipc	a1,0x2c
    80004596:	a2658593          	addi	a1,a1,-1498 # 8002ffb8 <__func__.0+0x2c8>
    8000459a:	0002c517          	auipc	a0,0x2c
    8000459e:	a6e50513          	addi	a0,a0,-1426 # 80030008 <__func__.0+0x318>
    800045a2:	2eb280ef          	jal	8002d08c <printf>
    800045a6:	00054797          	auipc	a5,0x54
    800045aa:	a6b7c783          	lbu	a5,-1429(a5) # 80058011 <excpt+0x1>
    800045ae:	f7ad                	bnez	a5,80004518 <m_and_hs_using_vs_access_5+0xe8>
    800045b0:	4529                	li	a0,10
    800045b2:	7c8270ef          	jal	8002bd7a <putchar>
    800045b6:	00054797          	auipc	a5,0x54
    800045ba:	a5b7c783          	lbu	a5,-1445(a5) # 80058011 <excpt+0x1>
    800045be:	f7d9                	bnez	a5,8000454c <m_and_hs_using_vs_access_5+0x11c>
    800045c0:	4405                	li	s0,1
    TEST_END();
    800045c2:	0002c597          	auipc	a1,0x2c
    800045c6:	9f658593          	addi	a1,a1,-1546 # 8002ffb8 <__func__.0+0x2c8>
    800045ca:	b771                	j	80004556 <m_and_hs_using_vs_access_5+0x126>

00000000800045cc <m_and_hs_using_vs_access_6>:

bool m_and_hs_using_vs_access_6(){
    800045cc:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800045ce:	0002a597          	auipc	a1,0x2a
    800045d2:	9e258593          	addi	a1,a1,-1566 # 8002dfb0 <__func__.6>
    800045d6:	0002c517          	auipc	a0,0x2c
    800045da:	a0250513          	addi	a0,a0,-1534 # 8002ffd8 <__func__.0+0x2e8>
bool m_and_hs_using_vs_access_6(){
    800045de:	ec06                	sd	ra,24(sp)
    800045e0:	e822                	sd	s0,16(sp)
    800045e2:	e426                	sd	s1,8(sp)
    TEST_START();
    800045e4:	2a9280ef          	jal	8002d08c <printf>
    800045e8:	4529                	li	a0,10
    800045ea:	790270ef          	jal	8002bd7a <putchar>
    
    hspt_init();
    800045ee:	ff3fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800045f2:	bd2fc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800045f6:	986fc0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800045fa:	000407b7          	lui	a5,0x40
    800045fe:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80004602:	450d                	li	a0,3
    80004604:	905fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004608:	4509                	li	a0,2
    8000460a:	81ffc0ef          	jal	80000e28 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    8000460e:	ffefc0ef          	jal	80000e0c <test_setup_except_function>
    80004612:	00037497          	auipc	s1,0x37
    80004616:	7de4b483          	ld	s1,2014(s1) # 8003bdf0 <__func__.0+0xc100>
    8000461a:	440197b7          	lui	a5,0x44019
    8000461e:	00080437          	lui	s0,0x80
    80004622:	0786                	slli	a5,a5,0x1
    80004624:	0465                	addi	s0,s0,25 # 80019 <_test_table_size+0x80018>
    80004626:	e384                	sd	s1,0(a5)
    80004628:	0436                	slli	s0,s0,0xd
    8000462a:	6c044473          	.insn	4, 0x6c044473
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000462e:	0002c617          	auipc	a2,0x2c
    80004632:	42a60613          	addi	a2,a2,1066 # 80030a58 <__func__.0+0xd68>
    80004636:	08200593          	li	a1,130
    8000463a:	0002c517          	auipc	a0,0x2c
    8000463e:	9b650513          	addi	a0,a0,-1610 # 8002fff0 <__func__.0+0x300>
    80004642:	24b280ef          	jal	8002d08c <printf>
    80004646:	00054797          	auipc	a5,0x54
    8000464a:	9cb7c783          	lbu	a5,-1589(a5) # 80058011 <excpt+0x1>
    8000464e:	e7a5                	bnez	a5,800046b6 <m_and_hs_using_vs_access_6+0xea>
    80004650:	0c940863          	beq	s0,s1,80004720 <m_and_hs_using_vs_access_6+0x154>
    80004654:	0002c597          	auipc	a1,0x2c
    80004658:	97458593          	addi	a1,a1,-1676 # 8002ffc8 <__func__.0+0x2d8>
    8000465c:	0002c517          	auipc	a0,0x2c
    80004660:	9ac50513          	addi	a0,a0,-1620 # 80030008 <__func__.0+0x318>
    80004664:	229280ef          	jal	8002d08c <printf>
    80004668:	0002c517          	auipc	a0,0x2c
    8000466c:	9a850513          	addi	a0,a0,-1624 # 80030010 <__func__.0+0x320>
    80004670:	21d280ef          	jal	8002d08c <printf>
    80004674:	02900513          	li	a0,41
    80004678:	702270ef          	jal	8002bd7a <putchar>
    8000467c:	4529                	li	a0,10
    8000467e:	6fc270ef          	jal	8002bd7a <putchar>
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80004682:	000407b7          	lui	a5,0x40
    80004686:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000468a:	4401                	li	s0,0

    TEST_END();
    8000468c:	0002c597          	auipc	a1,0x2c
    80004690:	93c58593          	addi	a1,a1,-1732 # 8002ffc8 <__func__.0+0x2d8>
    80004694:	0002c517          	auipc	a0,0x2c
    80004698:	9dc50513          	addi	a0,a0,-1572 # 80030070 <__func__.0+0x380>
    8000469c:	1f1280ef          	jal	8002d08c <printf>
    800046a0:	4511                	li	a0,4
    800046a2:	867fc0ef          	jal	80000f08 <goto_priv>
    800046a6:	a2cfd0ef          	jal	800018d2 <reset_state>
}
    800046aa:	60e2                	ld	ra,24(sp)
    800046ac:	8522                	mv	a0,s0
    800046ae:	6442                	ld	s0,16(sp)
    800046b0:	64a2                	ld	s1,8(sp)
    800046b2:	6105                	addi	sp,sp,32
    800046b4:	8082                	ret
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800046b6:	0002c597          	auipc	a1,0x2c
    800046ba:	91258593          	addi	a1,a1,-1774 # 8002ffc8 <__func__.0+0x2d8>
    800046be:	0002c517          	auipc	a0,0x2c
    800046c2:	94a50513          	addi	a0,a0,-1718 # 80030008 <__func__.0+0x318>
    800046c6:	1c7280ef          	jal	8002d08c <printf>
    800046ca:	00054797          	auipc	a5,0x54
    800046ce:	9477c783          	lbu	a5,-1721(a5) # 80058011 <excpt+0x1>
    800046d2:	e399                	bnez	a5,800046d8 <m_and_hs_using_vs_access_6+0x10c>
    800046d4:	06940563          	beq	s0,s1,8000473e <m_and_hs_using_vs_access_6+0x172>
    800046d8:	0002c517          	auipc	a0,0x2c
    800046dc:	93850513          	addi	a0,a0,-1736 # 80030010 <__func__.0+0x320>
    800046e0:	1ad280ef          	jal	8002d08c <printf>
    800046e4:	02900513          	li	a0,41
    800046e8:	692270ef          	jal	8002bd7a <putchar>
    800046ec:	4529                	li	a0,10
    800046ee:	68c270ef          	jal	8002bd7a <putchar>
    800046f2:	00054797          	auipc	a5,0x54
    800046f6:	91f7c783          	lbu	a5,-1761(a5) # 80058011 <excpt+0x1>
    800046fa:	f7c1                	bnez	a5,80004682 <m_and_hs_using_vs_access_6+0xb6>
    800046fc:	011087b7          	lui	a5,0x1108
    80004700:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80004704:	07c2                	slli	a5,a5,0x10
    80004706:	17b9                	addi	a5,a5,-18
    80004708:	f6f41de3          	bne	s0,a5,80004682 <m_and_hs_using_vs_access_6+0xb6>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8000470c:	000407b7          	lui	a5,0x40
    80004710:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004714:	4405                	li	s0,1
    TEST_END();
    80004716:	0002c597          	auipc	a1,0x2c
    8000471a:	8a258593          	addi	a1,a1,-1886 # 8002ffb8 <__func__.0+0x2c8>
    8000471e:	bf9d                	j	80004694 <m_and_hs_using_vs_access_6+0xc8>
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004720:	0002c597          	auipc	a1,0x2c
    80004724:	89858593          	addi	a1,a1,-1896 # 8002ffb8 <__func__.0+0x2c8>
    80004728:	0002c517          	auipc	a0,0x2c
    8000472c:	8e050513          	addi	a0,a0,-1824 # 80030008 <__func__.0+0x318>
    80004730:	15d280ef          	jal	8002d08c <printf>
    80004734:	00054797          	auipc	a5,0x54
    80004738:	8dd7c783          	lbu	a5,-1827(a5) # 80058011 <excpt+0x1>
    8000473c:	ffd1                	bnez	a5,800046d8 <m_and_hs_using_vs_access_6+0x10c>
    8000473e:	4529                	li	a0,10
    80004740:	63a270ef          	jal	8002bd7a <putchar>
    80004744:	00054797          	auipc	a5,0x54
    80004748:	8cd7c783          	lbu	a5,-1843(a5) # 80058011 <excpt+0x1>
    8000474c:	fb9d                	bnez	a5,80004682 <m_and_hs_using_vs_access_6+0xb6>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8000474e:	000407b7          	lui	a5,0x40
    80004752:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004756:	4405                	li	s0,1
    TEST_END();
    80004758:	0002c597          	auipc	a1,0x2c
    8000475c:	86058593          	addi	a1,a1,-1952 # 8002ffb8 <__func__.0+0x2c8>
    80004760:	bf15                	j	80004694 <m_and_hs_using_vs_access_6+0xc8>

0000000080004762 <m_and_hs_using_vs_access_7>:

bool m_and_hs_using_vs_access_7(){
    80004762:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004764:	0002a597          	auipc	a1,0x2a
    80004768:	86c58593          	addi	a1,a1,-1940 # 8002dfd0 <__func__.5>
    8000476c:	0002c517          	auipc	a0,0x2c
    80004770:	86c50513          	addi	a0,a0,-1940 # 8002ffd8 <__func__.0+0x2e8>
bool m_and_hs_using_vs_access_7(){
    80004774:	e406                	sd	ra,8(sp)
    80004776:	e022                	sd	s0,0(sp)
    TEST_START();
    80004778:	115280ef          	jal	8002d08c <printf>
    8000477c:	4529                	li	a0,10
    8000477e:	5fc270ef          	jal	8002bd7a <putchar>
    
    hspt_init();
    80004782:	e5ffb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004786:	a3efc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8000478a:	ff3fb0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSX_GUX);
    addr = phys_page_base(VSX_GUX);

    goto_priv(PRIV_HS);
    8000478e:	450d                	li	a0,3
    80004790:	f78fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004794:	4509                	li	a0,2
    80004796:	e92fc0ef          	jal	80000e28 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    8000479a:	e72fc0ef          	jal	80000e0c <test_setup_except_function>
    8000479e:	200037b7          	lui	a5,0x20003
    800047a2:	078e                	slli	a5,a5,0x3
    800047a4:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    800047a8:	08200593          	li	a1,130
    800047ac:	0002c617          	auipc	a2,0x2c
    800047b0:	2e460613          	addi	a2,a2,740 # 80030a90 <__func__.0+0xda0>
    800047b4:	0002c517          	auipc	a0,0x2c
    800047b8:	83c50513          	addi	a0,a0,-1988 # 8002fff0 <__func__.0+0x300>
    800047bc:	0d1280ef          	jal	8002d08c <printf>
    800047c0:	00054797          	auipc	a5,0x54
    800047c4:	8517c783          	lbu	a5,-1967(a5) # 80058011 <excpt+0x1>
    800047c8:	0002b597          	auipc	a1,0x2b
    800047cc:	7f058593          	addi	a1,a1,2032 # 8002ffb8 <__func__.0+0x2c8>
    800047d0:	e789                	bnez	a5,800047da <m_and_hs_using_vs_access_7+0x78>
    800047d2:	0002b597          	auipc	a1,0x2b
    800047d6:	7f658593          	addi	a1,a1,2038 # 8002ffc8 <__func__.0+0x2d8>
    800047da:	0002c517          	auipc	a0,0x2c
    800047de:	82e50513          	addi	a0,a0,-2002 # 80030008 <__func__.0+0x318>
    800047e2:	0ab280ef          	jal	8002d08c <printf>
    800047e6:	00054797          	auipc	a5,0x54
    800047ea:	82b7c783          	lbu	a5,-2005(a5) # 80058011 <excpt+0x1>
    800047ee:	0c078e63          	beqz	a5,800048ca <m_and_hs_using_vs_access_7+0x168>
    800047f2:	4529                	li	a0,10
    800047f4:	586270ef          	jal	8002bd7a <putchar>
    800047f8:	00054417          	auipc	s0,0x54
    800047fc:	81944403          	lbu	s0,-2023(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true
    );
    TEST_SETUP_EXCEPT();
    80004800:	e0cfc0ef          	jal	80000e0c <test_setup_except_function>
    CSRS(sstatus, SSTATUS_MXR);
    80004804:	000807b7          	lui	a5,0x80
    80004808:	1007a073          	csrs	sstatus,a5
    8000480c:	200037b7          	lui	a5,0x20003
    80004810:	078e                	slli	a5,a5,0x3
    80004812:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80004816:	08200593          	li	a1,130
    8000481a:	0002c617          	auipc	a2,0x2c
    8000481e:	2a660613          	addi	a2,a2,678 # 80030ac0 <__func__.0+0xdd0>
    80004822:	0002b517          	auipc	a0,0x2b
    80004826:	7ce50513          	addi	a0,a0,1998 # 8002fff0 <__func__.0+0x300>
    8000482a:	063280ef          	jal	8002d08c <printf>
    8000482e:	00053797          	auipc	a5,0x53
    80004832:	7e37c783          	lbu	a5,2019(a5) # 80058011 <excpt+0x1>
    80004836:	0002b597          	auipc	a1,0x2b
    8000483a:	79258593          	addi	a1,a1,1938 # 8002ffc8 <__func__.0+0x2d8>
    8000483e:	e789                	bnez	a5,80004848 <m_and_hs_using_vs_access_7+0xe6>
    80004840:	0002b597          	auipc	a1,0x2b
    80004844:	77858593          	addi	a1,a1,1912 # 8002ffb8 <__func__.0+0x2c8>
    80004848:	0002b517          	auipc	a0,0x2b
    8000484c:	7c050513          	addi	a0,a0,1984 # 80030008 <__func__.0+0x318>
    80004850:	03d280ef          	jal	8002d08c <printf>
    80004854:	00053797          	auipc	a5,0x53
    80004858:	7bd7c783          	lbu	a5,1981(a5) # 80058011 <excpt+0x1>
    8000485c:	efa1                	bnez	a5,800048b4 <m_and_hs_using_vs_access_7+0x152>
    8000485e:	4529                	li	a0,10
    80004860:	51a270ef          	jal	8002bd7a <putchar>
    80004864:	c411                	beqz	s0,80004870 <m_and_hs_using_vs_access_7+0x10e>
    80004866:	00053797          	auipc	a5,0x53
    8000486a:	7ab7c783          	lbu	a5,1963(a5) # 80058011 <excpt+0x1>
    8000486e:	cb95                	beqz	a5,800048a2 <m_and_hs_using_vs_access_7+0x140>
        excpt.triggered == false
    );
    CSRC(sstatus, SSTATUS_MXR);
    80004870:	000807b7          	lui	a5,0x80
    80004874:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80004878:	4401                	li	s0,0

        TEST_END();
    8000487a:	0002b597          	auipc	a1,0x2b
    8000487e:	74e58593          	addi	a1,a1,1870 # 8002ffc8 <__func__.0+0x2d8>
    80004882:	0002b517          	auipc	a0,0x2b
    80004886:	7ee50513          	addi	a0,a0,2030 # 80030070 <__func__.0+0x380>
    8000488a:	003280ef          	jal	8002d08c <printf>
    8000488e:	4511                	li	a0,4
    80004890:	e78fc0ef          	jal	80000f08 <goto_priv>
    80004894:	83efd0ef          	jal	800018d2 <reset_state>
}
    80004898:	60a2                	ld	ra,8(sp)
    8000489a:	8522                	mv	a0,s0
    8000489c:	6402                	ld	s0,0(sp)
    8000489e:	0141                	addi	sp,sp,16
    800048a0:	8082                	ret
    CSRC(sstatus, SSTATUS_MXR);
    800048a2:	000807b7          	lui	a5,0x80
    800048a6:	1007b073          	csrc	sstatus,a5
        TEST_END();
    800048aa:	0002b597          	auipc	a1,0x2b
    800048ae:	70e58593          	addi	a1,a1,1806 # 8002ffb8 <__func__.0+0x2c8>
    800048b2:	bfc1                	j	80004882 <m_and_hs_using_vs_access_7+0x120>
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    800048b4:	0002b517          	auipc	a0,0x2b
    800048b8:	75c50513          	addi	a0,a0,1884 # 80030010 <__func__.0+0x320>
    800048bc:	7d0280ef          	jal	8002d08c <printf>
    800048c0:	02900513          	li	a0,41
    800048c4:	4b6270ef          	jal	8002bd7a <putchar>
    800048c8:	bf59                	j	8000485e <m_and_hs_using_vs_access_7+0xfc>
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    800048ca:	0002b517          	auipc	a0,0x2b
    800048ce:	74650513          	addi	a0,a0,1862 # 80030010 <__func__.0+0x320>
    800048d2:	7ba280ef          	jal	8002d08c <printf>
    800048d6:	02900513          	li	a0,41
    800048da:	4a0270ef          	jal	8002bd7a <putchar>
    800048de:	bf11                	j	800047f2 <m_and_hs_using_vs_access_7+0x90>

00000000800048e0 <m_and_hs_using_vs_access_8>:

bool m_and_hs_using_vs_access_8(){
    800048e0:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800048e2:	00029597          	auipc	a1,0x29
    800048e6:	70e58593          	addi	a1,a1,1806 # 8002dff0 <__func__.4>
    800048ea:	0002b517          	auipc	a0,0x2b
    800048ee:	6ee50513          	addi	a0,a0,1774 # 8002ffd8 <__func__.0+0x2e8>
bool m_and_hs_using_vs_access_8(){
    800048f2:	ec06                	sd	ra,24(sp)
    800048f4:	e822                	sd	s0,16(sp)
    800048f6:	e426                	sd	s1,8(sp)
    TEST_START();
    800048f8:	794280ef          	jal	8002d08c <printf>
    800048fc:	4529                	li	a0,10
    800048fe:	47c270ef          	jal	8002bd7a <putchar>
    
    hspt_init();
    80004902:	cdffb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004906:	8befc0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8000490a:	e73fb0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSX_GUR);
    addr = phys_page_base(VSX_GUR);
    goto_priv(PRIV_HS);
    8000490e:	450d                	li	a0,3
    80004910:	df8fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004914:	4509                	li	a0,2
    80004916:	d12fc0ef          	jal	80000e28 <set_prev_priv>
    CSRW(sscratch, 0x1111111);
    8000491a:	011117b7          	lui	a5,0x1111
    8000491e:	1117879b          	addiw	a5,a5,273 # 1111111 <STACK_SIZE+0x1011111>
    80004922:	14079073          	csrw	sscratch,a5
    TEST_SETUP_EXCEPT();
    80004926:	ce6fc0ef          	jal	80000e0c <test_setup_except_function>
    8000492a:	001007b7          	lui	a5,0x100
    8000492e:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    80004930:	07b2                	slli	a5,a5,0xc
    80004932:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to load page fault",
    80004936:	08200593          	li	a1,130
    8000493a:	0002c617          	auipc	a2,0x2c
    8000493e:	1ae60613          	addi	a2,a2,430 # 80030ae8 <__func__.0+0xdf8>
    80004942:	0002b517          	auipc	a0,0x2b
    80004946:	6ae50513          	addi	a0,a0,1710 # 8002fff0 <__func__.0+0x300>
    8000494a:	742280ef          	jal	8002d08c <printf>
    8000494e:	00053797          	auipc	a5,0x53
    80004952:	6c37c783          	lbu	a5,1731(a5) # 80058011 <excpt+0x1>
    80004956:	00053497          	auipc	s1,0x53
    8000495a:	6ba48493          	addi	s1,s1,1722 # 80058010 <excpt>
    8000495e:	0002b597          	auipc	a1,0x2b
    80004962:	66a58593          	addi	a1,a1,1642 # 8002ffc8 <__func__.0+0x2d8>
    80004966:	cf89                	beqz	a5,80004980 <m_and_hs_using_vs_access_8+0xa0>
    80004968:	6498                	ld	a4,8(s1)
    8000496a:	47b5                	li	a5,13
    8000496c:	0002b597          	auipc	a1,0x2b
    80004970:	64c58593          	addi	a1,a1,1612 # 8002ffb8 <__func__.0+0x2c8>
    80004974:	00f70663          	beq	a4,a5,80004980 <m_and_hs_using_vs_access_8+0xa0>
    80004978:	0002b597          	auipc	a1,0x2b
    8000497c:	65058593          	addi	a1,a1,1616 # 8002ffc8 <__func__.0+0x2d8>
    80004980:	0002b517          	auipc	a0,0x2b
    80004984:	68850513          	addi	a0,a0,1672 # 80030008 <__func__.0+0x318>
    80004988:	704280ef          	jal	8002d08c <printf>
    8000498c:	00053797          	auipc	a5,0x53
    80004990:	6857c783          	lbu	a5,1669(a5) # 80058011 <excpt+0x1>
    80004994:	c789                	beqz	a5,8000499e <m_and_hs_using_vs_access_8+0xbe>
    80004996:	6498                	ld	a4,8(s1)
    80004998:	47b5                	li	a5,13
    8000499a:	00f70c63          	beq	a4,a5,800049b2 <m_and_hs_using_vs_access_8+0xd2>
    8000499e:	0002b517          	auipc	a0,0x2b
    800049a2:	67250513          	addi	a0,a0,1650 # 80030010 <__func__.0+0x320>
    800049a6:	6e6280ef          	jal	8002d08c <printf>
    800049aa:	02900513          	li	a0,41
    800049ae:	3cc270ef          	jal	8002bd7a <putchar>
    800049b2:	4529                	li	a0,10
    800049b4:	3c6270ef          	jal	8002bd7a <putchar>
    800049b8:	00053797          	auipc	a5,0x53
    800049bc:	6597c783          	lbu	a5,1625(a5) # 80058011 <excpt+0x1>
    800049c0:	4401                	li	s0,0
    800049c2:	c789                	beqz	a5,800049cc <m_and_hs_using_vs_access_8+0xec>
    800049c4:	6480                	ld	s0,8(s1)
    800049c6:	144d                	addi	s0,s0,-13
    800049c8:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    TEST_SETUP_EXCEPT();
    800049cc:	c40fc0ef          	jal	80000e0c <test_setup_except_function>
    CSRS(CSR_VSSTATUS, SSTATUS_MXR);
    800049d0:	000807b7          	lui	a5,0x80
    800049d4:	2007a073          	csrs	vsstatus,a5
    800049d8:	001007b7          	lui	a5,0x100
    800049dc:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    800049de:	07b2                	slli	a5,a5,0xc
    800049e0:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    800049e4:	08200593          	li	a1,130
    800049e8:	0002c617          	auipc	a2,0x2c
    800049ec:	13060613          	addi	a2,a2,304 # 80030b18 <__func__.0+0xe28>
    800049f0:	0002b517          	auipc	a0,0x2b
    800049f4:	60050513          	addi	a0,a0,1536 # 8002fff0 <__func__.0+0x300>
    800049f8:	694280ef          	jal	8002d08c <printf>
    800049fc:	00053797          	auipc	a5,0x53
    80004a00:	6157c783          	lbu	a5,1557(a5) # 80058011 <excpt+0x1>
    80004a04:	0002b597          	auipc	a1,0x2b
    80004a08:	5c458593          	addi	a1,a1,1476 # 8002ffc8 <__func__.0+0x2d8>
    80004a0c:	e789                	bnez	a5,80004a16 <m_and_hs_using_vs_access_8+0x136>
    80004a0e:	0002b597          	auipc	a1,0x2b
    80004a12:	5aa58593          	addi	a1,a1,1450 # 8002ffb8 <__func__.0+0x2c8>
    80004a16:	0002b517          	auipc	a0,0x2b
    80004a1a:	5f250513          	addi	a0,a0,1522 # 80030008 <__func__.0+0x318>
    80004a1e:	66e280ef          	jal	8002d08c <printf>
    80004a22:	00053797          	auipc	a5,0x53
    80004a26:	5ef7c783          	lbu	a5,1519(a5) # 80058011 <excpt+0x1>
    80004a2a:	e7b1                	bnez	a5,80004a76 <m_and_hs_using_vs_access_8+0x196>
    80004a2c:	4529                	li	a0,10
    80004a2e:	34c270ef          	jal	8002bd7a <putchar>
    80004a32:	c411                	beqz	s0,80004a3e <m_and_hs_using_vs_access_8+0x15e>
    80004a34:	00053797          	auipc	a5,0x53
    80004a38:	5dd7c783          	lbu	a5,1501(a5) # 80058011 <excpt+0x1>
    80004a3c:	c79d                	beqz	a5,80004a6a <m_and_hs_using_vs_access_8+0x18a>
    80004a3e:	4401                	li	s0,0
        excpt.triggered == false
    );


    TEST_END();
    80004a40:	0002b597          	auipc	a1,0x2b
    80004a44:	58858593          	addi	a1,a1,1416 # 8002ffc8 <__func__.0+0x2d8>
    80004a48:	0002b517          	auipc	a0,0x2b
    80004a4c:	62850513          	addi	a0,a0,1576 # 80030070 <__func__.0+0x380>
    80004a50:	63c280ef          	jal	8002d08c <printf>
    80004a54:	4511                	li	a0,4
    80004a56:	cb2fc0ef          	jal	80000f08 <goto_priv>
    80004a5a:	e79fc0ef          	jal	800018d2 <reset_state>
}
    80004a5e:	60e2                	ld	ra,24(sp)
    80004a60:	8522                	mv	a0,s0
    80004a62:	6442                	ld	s0,16(sp)
    80004a64:	64a2                	ld	s1,8(sp)
    80004a66:	6105                	addi	sp,sp,32
    80004a68:	8082                	ret
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80004a6a:	4405                	li	s0,1
    TEST_END();
    80004a6c:	0002b597          	auipc	a1,0x2b
    80004a70:	54c58593          	addi	a1,a1,1356 # 8002ffb8 <__func__.0+0x2c8>
    80004a74:	bfd1                	j	80004a48 <m_and_hs_using_vs_access_8+0x168>
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80004a76:	0002b517          	auipc	a0,0x2b
    80004a7a:	59a50513          	addi	a0,a0,1434 # 80030010 <__func__.0+0x320>
    80004a7e:	60e280ef          	jal	8002d08c <printf>
    80004a82:	02900513          	li	a0,41
    80004a86:	2f4270ef          	jal	8002bd7a <putchar>
    80004a8a:	b74d                	j	80004a2c <m_and_hs_using_vs_access_8+0x14c>

0000000080004a8c <m_and_hs_using_vs_access_9>:

bool m_and_hs_using_vs_access_9(){
    80004a8c:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004a8e:	00029597          	auipc	a1,0x29
    80004a92:	58258593          	addi	a1,a1,1410 # 8002e010 <__func__.3>
    80004a96:	0002b517          	auipc	a0,0x2b
    80004a9a:	54250513          	addi	a0,a0,1346 # 8002ffd8 <__func__.0+0x2e8>
bool m_and_hs_using_vs_access_9(){
    80004a9e:	ec06                	sd	ra,24(sp)
    80004aa0:	e822                	sd	s0,16(sp)
    80004aa2:	e426                	sd	s1,8(sp)
    TEST_START();
    80004aa4:	5e8280ef          	jal	8002d08c <printf>
    80004aa8:	4529                	li	a0,10
    80004aaa:	2d0270ef          	jal	8002bd7a <putchar>
    
    hspt_init();
    80004aae:	b33fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004ab2:	f13fb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004ab6:	cc7fb0ef          	jal	8000077c <vspt_init>
    
    reset_state();
    80004aba:	e19fc0ef          	jal	800018d2 <reset_state>
    goto_priv(PRIV_HS);
    80004abe:	450d                	li	a0,3
    80004ac0:	c48fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004ac4:	4509                	li	a0,2
    80004ac6:	b62fc0ef          	jal	80000e28 <set_prev_priv>
    hpt_init();
    80004aca:	efbfb0ef          	jal	800009c4 <hpt_init>
    
    vaddr = vs_page_base(VSI_GUR) ;
    TEST_SETUP_EXCEPT();
    80004ace:	b3efc0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80004ad2:	37ab77b7          	lui	a5,0x37ab7
    80004ad6:	00100737          	lui	a4,0x100
    80004ada:	078a                	slli	a5,a5,0x2
    80004adc:	06970713          	addi	a4,a4,105 # 100069 <STACK_SIZE+0x69>
    80004ae0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004ae4:	0732                	slli	a4,a4,0xc
    80004ae6:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80004aea:	00053417          	auipc	s0,0x53
    80004aee:	52640413          	addi	s0,s0,1318 # 80058010 <excpt>
    80004af2:	640c                	ld	a1,8(s0)
    80004af4:	0002c517          	auipc	a0,0x2c
    80004af8:	05c50513          	addi	a0,a0,92 # 80030b50 <__func__.0+0xe60>
    80004afc:	590280ef          	jal	8002d08c <printf>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004b00:	08200593          	li	a1,130
    80004b04:	0002c617          	auipc	a2,0x2c
    80004b08:	05460613          	addi	a2,a2,84 # 80030b58 <__func__.0+0xe68>
    80004b0c:	0002b517          	auipc	a0,0x2b
    80004b10:	4e450513          	addi	a0,a0,1252 # 8002fff0 <__func__.0+0x300>
    80004b14:	578280ef          	jal	8002d08c <printf>
    80004b18:	00053797          	auipc	a5,0x53
    80004b1c:	4f97c783          	lbu	a5,1273(a5) # 80058011 <excpt+0x1>
    80004b20:	0002b597          	auipc	a1,0x2b
    80004b24:	4a858593          	addi	a1,a1,1192 # 8002ffc8 <__func__.0+0x2d8>
    80004b28:	c789                	beqz	a5,80004b32 <m_and_hs_using_vs_access_9+0xa6>
    80004b2a:	6418                	ld	a4,8(s0)
    80004b2c:	47dd                	li	a5,23
    80004b2e:	12f70463          	beq	a4,a5,80004c56 <m_and_hs_using_vs_access_9+0x1ca>
    80004b32:	0002b517          	auipc	a0,0x2b
    80004b36:	4d650513          	addi	a0,a0,1238 # 80030008 <__func__.0+0x318>
    80004b3a:	552280ef          	jal	8002d08c <printf>
    80004b3e:	00053797          	auipc	a5,0x53
    80004b42:	4d37c783          	lbu	a5,1235(a5) # 80058011 <excpt+0x1>
    80004b46:	c789                	beqz	a5,80004b50 <m_and_hs_using_vs_access_9+0xc4>
    80004b48:	6418                	ld	a4,8(s0)
    80004b4a:	47dd                	li	a5,23
    80004b4c:	0ef70263          	beq	a4,a5,80004c30 <m_and_hs_using_vs_access_9+0x1a4>
    80004b50:	0002b517          	auipc	a0,0x2b
    80004b54:	4c050513          	addi	a0,a0,1216 # 80030010 <__func__.0+0x320>
    80004b58:	534280ef          	jal	8002d08c <printf>
    80004b5c:	02900513          	li	a0,41
    80004b60:	21a270ef          	jal	8002bd7a <putchar>
    80004b64:	4529                	li	a0,10
    80004b66:	214270ef          	jal	8002bd7a <putchar>
    80004b6a:	00053797          	auipc	a5,0x53
    80004b6e:	4a77c783          	lbu	a5,1191(a5) # 80058011 <excpt+0x1>
    80004b72:	4481                	li	s1,0
    80004b74:	c789                	beqz	a5,80004b7e <m_and_hs_using_vs_access_9+0xf2>
    80004b76:	6418                	ld	a4,8(s0)
    80004b78:	47dd                	li	a5,23
    80004b7a:	0ef70e63          	beq	a4,a5,80004c76 <m_and_hs_using_vs_access_9+0x1ea>
        excpt.cause == CAUSE_SGPF &&
        excpt.tval2 == vaddr >> 2
    );

    vaddr = vs_page_base(VSI_GUR);
    TEST_SETUP_EXCEPT();
    80004b7e:	a8efc0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80004b82:	001007b7          	lui	a5,0x100
    80004b86:	06978793          	addi	a5,a5,105 # 100069 <STACK_SIZE+0x69>
    80004b8a:	07b2                	slli	a5,a5,0xc
    80004b8c:	6007c7f3          	.insn	4, 0x6007c7f3
    val = hlvb(vaddr);
    printf("%d\n",excpt.cause);
    80004b90:	640c                	ld	a1,8(s0)
    80004b92:	0002c517          	auipc	a0,0x2c
    80004b96:	fbe50513          	addi	a0,a0,-66 # 80030b50 <__func__.0+0xe60>
    80004b9a:	4f2280ef          	jal	8002d08c <printf>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004b9e:	08200593          	li	a1,130
    80004ba2:	0002c617          	auipc	a2,0x2c
    80004ba6:	ff660613          	addi	a2,a2,-10 # 80030b98 <__func__.0+0xea8>
    80004baa:	0002b517          	auipc	a0,0x2b
    80004bae:	44650513          	addi	a0,a0,1094 # 8002fff0 <__func__.0+0x300>
    80004bb2:	4da280ef          	jal	8002d08c <printf>
    80004bb6:	00053797          	auipc	a5,0x53
    80004bba:	45b7c783          	lbu	a5,1115(a5) # 80058011 <excpt+0x1>
    80004bbe:	0002b597          	auipc	a1,0x2b
    80004bc2:	40a58593          	addi	a1,a1,1034 # 8002ffc8 <__func__.0+0x2d8>
    80004bc6:	e789                	bnez	a5,80004bd0 <m_and_hs_using_vs_access_9+0x144>
    80004bc8:	0002b597          	auipc	a1,0x2b
    80004bcc:	3f058593          	addi	a1,a1,1008 # 8002ffb8 <__func__.0+0x2c8>
    80004bd0:	0002b517          	auipc	a0,0x2b
    80004bd4:	43850513          	addi	a0,a0,1080 # 80030008 <__func__.0+0x318>
    80004bd8:	4b4280ef          	jal	8002d08c <printf>
    80004bdc:	00053797          	auipc	a5,0x53
    80004be0:	4357c783          	lbu	a5,1077(a5) # 80058011 <excpt+0x1>
    80004be4:	efb1                	bnez	a5,80004c40 <m_and_hs_using_vs_access_9+0x1b4>
    80004be6:	4529                	li	a0,10
    80004be8:	192270ef          	jal	8002bd7a <putchar>
    80004bec:	c491                	beqz	s1,80004bf8 <m_and_hs_using_vs_access_9+0x16c>
    80004bee:	00053797          	auipc	a5,0x53
    80004bf2:	4237c783          	lbu	a5,1059(a5) # 80058011 <excpt+0x1>
    80004bf6:	c79d                	beqz	a5,80004c24 <m_and_hs_using_vs_access_9+0x198>
    80004bf8:	4401                	li	s0,0
        excpt.triggered == false
    );
    
    TEST_END();
    80004bfa:	0002b597          	auipc	a1,0x2b
    80004bfe:	3ce58593          	addi	a1,a1,974 # 8002ffc8 <__func__.0+0x2d8>
    80004c02:	0002b517          	auipc	a0,0x2b
    80004c06:	46e50513          	addi	a0,a0,1134 # 80030070 <__func__.0+0x380>
    80004c0a:	482280ef          	jal	8002d08c <printf>
    80004c0e:	4511                	li	a0,4
    80004c10:	af8fc0ef          	jal	80000f08 <goto_priv>
    80004c14:	cbffc0ef          	jal	800018d2 <reset_state>
}
    80004c18:	60e2                	ld	ra,24(sp)
    80004c1a:	8522                	mv	a0,s0
    80004c1c:	6442                	ld	s0,16(sp)
    80004c1e:	64a2                	ld	s1,8(sp)
    80004c20:	6105                	addi	sp,sp,32
    80004c22:	8082                	ret
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004c24:	4405                	li	s0,1
    TEST_END();
    80004c26:	0002b597          	auipc	a1,0x2b
    80004c2a:	39258593          	addi	a1,a1,914 # 8002ffb8 <__func__.0+0x2c8>
    80004c2e:	bfd1                	j	80004c02 <m_and_hs_using_vs_access_9+0x176>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004c30:	7418                	ld	a4,40(s0)
    80004c32:	4001a7b7          	lui	a5,0x4001a
    80004c36:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004c3a:	f0f71be3          	bne	a4,a5,80004b50 <m_and_hs_using_vs_access_9+0xc4>
    80004c3e:	b71d                	j	80004b64 <m_and_hs_using_vs_access_9+0xd8>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004c40:	0002b517          	auipc	a0,0x2b
    80004c44:	3d050513          	addi	a0,a0,976 # 80030010 <__func__.0+0x320>
    80004c48:	444280ef          	jal	8002d08c <printf>
    80004c4c:	02900513          	li	a0,41
    80004c50:	12a270ef          	jal	8002bd7a <putchar>
    80004c54:	bf49                	j	80004be6 <m_and_hs_using_vs_access_9+0x15a>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004c56:	7418                	ld	a4,40(s0)
    80004c58:	4001a7b7          	lui	a5,0x4001a
    80004c5c:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004c60:	0002b597          	auipc	a1,0x2b
    80004c64:	35858593          	addi	a1,a1,856 # 8002ffb8 <__func__.0+0x2c8>
    80004c68:	ecf705e3          	beq	a4,a5,80004b32 <m_and_hs_using_vs_access_9+0xa6>
    80004c6c:	0002b597          	auipc	a1,0x2b
    80004c70:	35c58593          	addi	a1,a1,860 # 8002ffc8 <__func__.0+0x2d8>
    80004c74:	bd7d                	j	80004b32 <m_and_hs_using_vs_access_9+0xa6>
    80004c76:	7404                	ld	s1,40(s0)
    80004c78:	bffe67b7          	lui	a5,0xbffe6
    80004c7c:	c0078793          	addi	a5,a5,-1024 # ffffffffbffe5c00 <__stack_top+0xffffffff3fce6c00>
    80004c80:	94be                	add	s1,s1,a5
    80004c82:	0014b493          	seqz	s1,s1
    80004c86:	bde5                	j	80004b7e <m_and_hs_using_vs_access_9+0xf2>

0000000080004c88 <m_and_hs_using_vs_access_10>:

bool m_and_hs_using_vs_access_10(){
    80004c88:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004c8a:	00029597          	auipc	a1,0x29
    80004c8e:	3a658593          	addi	a1,a1,934 # 8002e030 <__func__.2>
    80004c92:	0002b517          	auipc	a0,0x2b
    80004c96:	34650513          	addi	a0,a0,838 # 8002ffd8 <__func__.0+0x2e8>
bool m_and_hs_using_vs_access_10(){
    80004c9a:	ec06                	sd	ra,24(sp)
    80004c9c:	e822                	sd	s0,16(sp)
    80004c9e:	e426                	sd	s1,8(sp)
    TEST_START();
    80004ca0:	3ec280ef          	jal	8002d08c <printf>
    80004ca4:	4529                	li	a0,10
    80004ca6:	0d4270ef          	jal	8002bd7a <putchar>
    
    hspt_init();
    80004caa:	937fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004cae:	d17fb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004cb2:	acbfb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_HS);
    80004cb6:	450d                	li	a0,3
    80004cb8:	a50fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004cbc:	4509                	li	a0,2
    80004cbe:	96afc0ef          	jal	80000e28 <set_prev_priv>

    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004cc2:	94afc0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(sscratch, 0x911);
    80004cc6:	6785                	lui	a5,0x1
    80004cc8:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004ccc:	14079073          	csrw	sscratch,a5
    80004cd0:	000807b7          	lui	a5,0x80
    80004cd4:	07a5                	addi	a5,a5,9 # 80009 <_test_table_size+0x80008>
    80004cd6:	07b6                	slli	a5,a5,0xd
    80004cd8:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004cdc:	08200593          	li	a1,130
    80004ce0:	0002c617          	auipc	a2,0x2c
    80004ce4:	ee060613          	addi	a2,a2,-288 # 80030bc0 <__func__.0+0xed0>
    80004ce8:	0002b517          	auipc	a0,0x2b
    80004cec:	30850513          	addi	a0,a0,776 # 8002fff0 <__func__.0+0x300>
    80004cf0:	39c280ef          	jal	8002d08c <printf>
    80004cf4:	00053797          	auipc	a5,0x53
    80004cf8:	31d7c783          	lbu	a5,797(a5) # 80058011 <excpt+0x1>
    80004cfc:	0002b597          	auipc	a1,0x2b
    80004d00:	2bc58593          	addi	a1,a1,700 # 8002ffb8 <__func__.0+0x2c8>
    80004d04:	c789                	beqz	a5,80004d0e <m_and_hs_using_vs_access_10+0x86>
    80004d06:	0002b597          	auipc	a1,0x2b
    80004d0a:	2c258593          	addi	a1,a1,706 # 8002ffc8 <__func__.0+0x2d8>
    80004d0e:	0002b517          	auipc	a0,0x2b
    80004d12:	2fa50513          	addi	a0,a0,762 # 80030008 <__func__.0+0x318>
    80004d16:	376280ef          	jal	8002d08c <printf>
    80004d1a:	00053797          	auipc	a5,0x53
    80004d1e:	2f77c783          	lbu	a5,759(a5) # 80058011 <excpt+0x1>
    80004d22:	10079663          	bnez	a5,80004e2e <m_and_hs_using_vs_access_10+0x1a6>
    80004d26:	4529                	li	a0,10
    80004d28:	052270ef          	jal	8002bd7a <putchar>
    80004d2c:	00053417          	auipc	s0,0x53
    80004d30:	2e544403          	lbu	s0,741(s0) # 80058011 <excpt+0x1>
        excpt.triggered == false
    );
    
    vspt_init();
    80004d34:	a49fb0ef          	jal	8000077c <vspt_init>
    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004d38:	8d4fc0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(sscratch, 0x911);      
    80004d3c:	6785                	lui	a5,0x1
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004d3e:	00053497          	auipc	s1,0x53
    80004d42:	2d248493          	addi	s1,s1,722 # 80058010 <excpt>
    CSRW(sscratch, 0x911);      
    80004d46:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004d4a:	14079073          	csrw	sscratch,a5
    asm volatile(
    80004d4e:	37ab77b7          	lui	a5,0x37ab7
    80004d52:	00080737          	lui	a4,0x80
    80004d56:	078a                	slli	a5,a5,0x2
    80004d58:	0725                	addi	a4,a4,9 # 80009 <_test_table_size+0x80008>
    80004d5a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004d5e:	0736                	slli	a4,a4,0xd
    80004d60:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004d64:	08200593          	li	a1,130
    80004d68:	0002c617          	auipc	a2,0x2c
    80004d6c:	e8860613          	addi	a2,a2,-376 # 80030bf0 <__func__.0+0xf00>
    80004d70:	0002b517          	auipc	a0,0x2b
    80004d74:	28050513          	addi	a0,a0,640 # 8002fff0 <__func__.0+0x300>
    80004d78:	314280ef          	jal	8002d08c <printf>
    80004d7c:	00053797          	auipc	a5,0x53
    80004d80:	2957c783          	lbu	a5,661(a5) # 80058011 <excpt+0x1>
    80004d84:	0002b597          	auipc	a1,0x2b
    80004d88:	24458593          	addi	a1,a1,580 # 8002ffc8 <__func__.0+0x2d8>
    80004d8c:	cf89                	beqz	a5,80004da6 <m_and_hs_using_vs_access_10+0x11e>
    80004d8e:	6498                	ld	a4,8(s1)
    80004d90:	47bd                	li	a5,15
    80004d92:	0002b597          	auipc	a1,0x2b
    80004d96:	22658593          	addi	a1,a1,550 # 8002ffb8 <__func__.0+0x2c8>
    80004d9a:	00f70663          	beq	a4,a5,80004da6 <m_and_hs_using_vs_access_10+0x11e>
    80004d9e:	0002b597          	auipc	a1,0x2b
    80004da2:	22a58593          	addi	a1,a1,554 # 8002ffc8 <__func__.0+0x2d8>
    80004da6:	0002b517          	auipc	a0,0x2b
    80004daa:	26250513          	addi	a0,a0,610 # 80030008 <__func__.0+0x318>
    80004dae:	2de280ef          	jal	8002d08c <printf>
    80004db2:	00053797          	auipc	a5,0x53
    80004db6:	25f7c783          	lbu	a5,607(a5) # 80058011 <excpt+0x1>
    80004dba:	c789                	beqz	a5,80004dc4 <m_and_hs_using_vs_access_10+0x13c>
    80004dbc:	6498                	ld	a4,8(s1)
    80004dbe:	47bd                	li	a5,15
    80004dc0:	00f70c63          	beq	a4,a5,80004dd8 <m_and_hs_using_vs_access_10+0x150>
    80004dc4:	0002b517          	auipc	a0,0x2b
    80004dc8:	24c50513          	addi	a0,a0,588 # 80030010 <__func__.0+0x320>
    80004dcc:	2c0280ef          	jal	8002d08c <printf>
    80004dd0:	02900513          	li	a0,41
    80004dd4:	7a7260ef          	jal	8002bd7a <putchar>
    80004dd8:	4529                	li	a0,10
    80004dda:	7a1260ef          	jal	8002bd7a <putchar>
    80004dde:	e015                	bnez	s0,80004e02 <m_and_hs_using_vs_access_10+0x17a>
    80004de0:	00053417          	auipc	s0,0x53
    80004de4:	23144403          	lbu	s0,561(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80004de8:	0002b597          	auipc	a1,0x2b
    80004dec:	1e058593          	addi	a1,a1,480 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004df0:	cc11                	beqz	s0,80004e0c <m_and_hs_using_vs_access_10+0x184>
    80004df2:	6498                	ld	a4,8(s1)
    80004df4:	47bd                	li	a5,15
    TEST_END();
    80004df6:	0002b597          	auipc	a1,0x2b
    80004dfa:	1c258593          	addi	a1,a1,450 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004dfe:	00f70763          	beq	a4,a5,80004e0c <m_and_hs_using_vs_access_10+0x184>
    80004e02:	4401                	li	s0,0
    TEST_END();
    80004e04:	0002b597          	auipc	a1,0x2b
    80004e08:	1c458593          	addi	a1,a1,452 # 8002ffc8 <__func__.0+0x2d8>
    80004e0c:	0002b517          	auipc	a0,0x2b
    80004e10:	26450513          	addi	a0,a0,612 # 80030070 <__func__.0+0x380>
    80004e14:	278280ef          	jal	8002d08c <printf>
    80004e18:	4511                	li	a0,4
    80004e1a:	8eefc0ef          	jal	80000f08 <goto_priv>
    80004e1e:	ab5fc0ef          	jal	800018d2 <reset_state>
}
    80004e22:	60e2                	ld	ra,24(sp)
    80004e24:	8522                	mv	a0,s0
    80004e26:	6442                	ld	s0,16(sp)
    80004e28:	64a2                	ld	s1,8(sp)
    80004e2a:	6105                	addi	sp,sp,32
    80004e2c:	8082                	ret
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004e2e:	0002b517          	auipc	a0,0x2b
    80004e32:	1e250513          	addi	a0,a0,482 # 80030010 <__func__.0+0x320>
    80004e36:	256280ef          	jal	8002d08c <printf>
    80004e3a:	02900513          	li	a0,41
    80004e3e:	73d260ef          	jal	8002bd7a <putchar>
    80004e42:	b5d5                	j	80004d26 <m_and_hs_using_vs_access_10+0x9e>

0000000080004e44 <m_and_hs_using_vs_access_11>:

bool m_and_hs_using_vs_access_11(){
    80004e44:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004e46:	00029597          	auipc	a1,0x29
    80004e4a:	20a58593          	addi	a1,a1,522 # 8002e050 <__func__.1>
    80004e4e:	0002b517          	auipc	a0,0x2b
    80004e52:	18a50513          	addi	a0,a0,394 # 8002ffd8 <__func__.0+0x2e8>
bool m_and_hs_using_vs_access_11(){
    80004e56:	ec06                	sd	ra,24(sp)
    80004e58:	e822                	sd	s0,16(sp)
    80004e5a:	e426                	sd	s1,8(sp)
    TEST_START();
    80004e5c:	230280ef          	jal	8002d08c <printf>
    80004e60:	4529                	li	a0,10
    80004e62:	719260ef          	jal	8002bd7a <putchar>
    
    hspt_init();
    80004e66:	f7afb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004e6a:	b5bfb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004e6e:	90ffb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_HS);
    80004e72:	450d                	li	a0,3
    80004e74:	894fc0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004e78:	4509                	li	a0,2
    80004e7a:	faffb0ef          	jal	80000e28 <set_prev_priv>


    vaddr = vs_page_base(VSRW_GI);
    TEST_SETUP_EXCEPT();
    80004e7e:	f8ffb0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(sscratch, 0x112);
    80004e82:	11200793          	li	a5,274
    80004e86:	14079073          	csrw	sscratch,a5
    80004e8a:	37ab77b7          	lui	a5,0x37ab7
    80004e8e:	00080737          	lui	a4,0x80
    80004e92:	078a                	slli	a5,a5,0x2
    80004e94:	03370713          	addi	a4,a4,51 # 80033 <_test_table_size+0x80032>
    80004e98:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004e9c:	0736                	slli	a4,a4,0xd
    80004e9e:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004ea2:	08200593          	li	a1,130
    80004ea6:	0002c617          	auipc	a2,0x2c
    80004eaa:	d8260613          	addi	a2,a2,-638 # 80030c28 <__func__.0+0xf38>
    80004eae:	0002b517          	auipc	a0,0x2b
    80004eb2:	14250513          	addi	a0,a0,322 # 8002fff0 <__func__.0+0x300>
    80004eb6:	1d6280ef          	jal	8002d08c <printf>
    80004eba:	00053797          	auipc	a5,0x53
    80004ebe:	1577c783          	lbu	a5,343(a5) # 80058011 <excpt+0x1>
    80004ec2:	00053497          	auipc	s1,0x53
    80004ec6:	14e48493          	addi	s1,s1,334 # 80058010 <excpt>
    80004eca:	0002b597          	auipc	a1,0x2b
    80004ece:	0fe58593          	addi	a1,a1,254 # 8002ffc8 <__func__.0+0x2d8>
    80004ed2:	cf89                	beqz	a5,80004eec <m_and_hs_using_vs_access_11+0xa8>
    80004ed4:	6498                	ld	a4,8(s1)
    80004ed6:	47dd                	li	a5,23
    80004ed8:	0002b597          	auipc	a1,0x2b
    80004edc:	0e058593          	addi	a1,a1,224 # 8002ffb8 <__func__.0+0x2c8>
    80004ee0:	00f70663          	beq	a4,a5,80004eec <m_and_hs_using_vs_access_11+0xa8>
    80004ee4:	0002b597          	auipc	a1,0x2b
    80004ee8:	0e458593          	addi	a1,a1,228 # 8002ffc8 <__func__.0+0x2d8>
    80004eec:	0002b517          	auipc	a0,0x2b
    80004ef0:	11c50513          	addi	a0,a0,284 # 80030008 <__func__.0+0x318>
    80004ef4:	198280ef          	jal	8002d08c <printf>
    80004ef8:	00053797          	auipc	a5,0x53
    80004efc:	1197c783          	lbu	a5,281(a5) # 80058011 <excpt+0x1>
    80004f00:	c789                	beqz	a5,80004f0a <m_and_hs_using_vs_access_11+0xc6>
    80004f02:	6498                	ld	a4,8(s1)
    80004f04:	47dd                	li	a5,23
    80004f06:	00f70c63          	beq	a4,a5,80004f1e <m_and_hs_using_vs_access_11+0xda>
    80004f0a:	0002b517          	auipc	a0,0x2b
    80004f0e:	10650513          	addi	a0,a0,262 # 80030010 <__func__.0+0x320>
    80004f12:	17a280ef          	jal	8002d08c <printf>
    80004f16:	02900513          	li	a0,41
    80004f1a:	661260ef          	jal	8002bd7a <putchar>
    80004f1e:	4529                	li	a0,10
    80004f20:	65b260ef          	jal	8002bd7a <putchar>
    80004f24:	00053417          	auipc	s0,0x53
    80004f28:	0ed44403          	lbu	s0,237(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80004f2c:	0002b597          	auipc	a1,0x2b
    80004f30:	09c58593          	addi	a1,a1,156 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004f34:	cc11                	beqz	s0,80004f50 <m_and_hs_using_vs_access_11+0x10c>
    80004f36:	6498                	ld	a4,8(s1)
    80004f38:	47dd                	li	a5,23
    TEST_END();
    80004f3a:	0002b597          	auipc	a1,0x2b
    80004f3e:	07e58593          	addi	a1,a1,126 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004f42:	00f70763          	beq	a4,a5,80004f50 <m_and_hs_using_vs_access_11+0x10c>
    80004f46:	4401                	li	s0,0
    TEST_END();
    80004f48:	0002b597          	auipc	a1,0x2b
    80004f4c:	08058593          	addi	a1,a1,128 # 8002ffc8 <__func__.0+0x2d8>
    80004f50:	0002b517          	auipc	a0,0x2b
    80004f54:	12050513          	addi	a0,a0,288 # 80030070 <__func__.0+0x380>
    80004f58:	134280ef          	jal	8002d08c <printf>
    80004f5c:	4511                	li	a0,4
    80004f5e:	fabfb0ef          	jal	80000f08 <goto_priv>
    80004f62:	971fc0ef          	jal	800018d2 <reset_state>
}
    80004f66:	60e2                	ld	ra,24(sp)
    80004f68:	8522                	mv	a0,s0
    80004f6a:	6442                	ld	s0,16(sp)
    80004f6c:	64a2                	ld	s1,8(sp)
    80004f6e:	6105                	addi	sp,sp,32
    80004f70:	8082                	ret

0000000080004f72 <m_and_hs_using_vs_access_12>:

bool m_and_hs_using_vs_access_12(){
    80004f72:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004f74:	00029597          	auipc	a1,0x29
    80004f78:	0fc58593          	addi	a1,a1,252 # 8002e070 <__func__.0>
    80004f7c:	0002b517          	auipc	a0,0x2b
    80004f80:	05c50513          	addi	a0,a0,92 # 8002ffd8 <__func__.0+0x2e8>
bool m_and_hs_using_vs_access_12(){
    80004f84:	e406                	sd	ra,8(sp)
    80004f86:	e022                	sd	s0,0(sp)
    TEST_START();
    80004f88:	104280ef          	jal	8002d08c <printf>
    80004f8c:	4529                	li	a0,10
    80004f8e:	5ed260ef          	jal	8002bd7a <putchar>
    
    hspt_init();
    80004f92:	e4efb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004f96:	a2ffb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80004f9a:	fe2fb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_HS);
    80004f9e:	450d                	li	a0,3
    80004fa0:	f69fb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004fa4:	4509                	li	a0,2
    80004fa6:	e83fb0ef          	jal	80000e28 <set_prev_priv>

    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80004faa:	e63fb0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(sscratch, 0x112);
    80004fae:	11200793          	li	a5,274
    80004fb2:	14079073          	csrw	sscratch,a5
    TEST_ASSERT("CSRW successfull int any condition",
    80004fb6:	08200593          	li	a1,130
    80004fba:	0002c617          	auipc	a2,0x2c
    80004fbe:	cae60613          	addi	a2,a2,-850 # 80030c68 <__func__.0+0xf78>
    80004fc2:	0002b517          	auipc	a0,0x2b
    80004fc6:	02e50513          	addi	a0,a0,46 # 8002fff0 <__func__.0+0x300>
    80004fca:	0c2280ef          	jal	8002d08c <printf>
    80004fce:	00053797          	auipc	a5,0x53
    80004fd2:	0437c783          	lbu	a5,67(a5) # 80058011 <excpt+0x1>
    80004fd6:	0002b597          	auipc	a1,0x2b
    80004fda:	fe258593          	addi	a1,a1,-30 # 8002ffb8 <__func__.0+0x2c8>
    80004fde:	c789                	beqz	a5,80004fe8 <m_and_hs_using_vs_access_12+0x76>
    80004fe0:	0002b597          	auipc	a1,0x2b
    80004fe4:	fe858593          	addi	a1,a1,-24 # 8002ffc8 <__func__.0+0x2d8>
    80004fe8:	0002b517          	auipc	a0,0x2b
    80004fec:	02050513          	addi	a0,a0,32 # 80030008 <__func__.0+0x318>
    80004ff0:	09c280ef          	jal	8002d08c <printf>
    80004ff4:	00053797          	auipc	a5,0x53
    80004ff8:	01d7c783          	lbu	a5,29(a5) # 80058011 <excpt+0x1>
    80004ffc:	e7a1                	bnez	a5,80005044 <m_and_hs_using_vs_access_12+0xd2>
    80004ffe:	4529                	li	a0,10
    80005000:	57b260ef          	jal	8002bd7a <putchar>
    80005004:	00053797          	auipc	a5,0x53
    80005008:	00d7c783          	lbu	a5,13(a5) # 80058011 <excpt+0x1>
    8000500c:	e795                	bnez	a5,80005038 <m_and_hs_using_vs_access_12+0xc6>
    8000500e:	4405                	li	s0,1
        excpt.triggered == false
    );
    


    TEST_END();
    80005010:	0002b597          	auipc	a1,0x2b
    80005014:	fa858593          	addi	a1,a1,-88 # 8002ffb8 <__func__.0+0x2c8>
    80005018:	0002b517          	auipc	a0,0x2b
    8000501c:	05850513          	addi	a0,a0,88 # 80030070 <__func__.0+0x380>
    80005020:	06c280ef          	jal	8002d08c <printf>
    80005024:	4511                	li	a0,4
    80005026:	ee3fb0ef          	jal	80000f08 <goto_priv>
    8000502a:	8a9fc0ef          	jal	800018d2 <reset_state>

}
    8000502e:	60a2                	ld	ra,8(sp)
    80005030:	8522                	mv	a0,s0
    80005032:	6402                	ld	s0,0(sp)
    80005034:	0141                	addi	sp,sp,16
    80005036:	8082                	ret
    TEST_ASSERT("CSRW successfull int any condition",
    80005038:	4401                	li	s0,0
    TEST_END();
    8000503a:	0002b597          	auipc	a1,0x2b
    8000503e:	f8e58593          	addi	a1,a1,-114 # 8002ffc8 <__func__.0+0x2d8>
    80005042:	bfd9                	j	80005018 <m_and_hs_using_vs_access_12+0xa6>
    TEST_ASSERT("CSRW successfull int any condition",
    80005044:	0002b517          	auipc	a0,0x2b
    80005048:	fcc50513          	addi	a0,a0,-52 # 80030010 <__func__.0+0x320>
    8000504c:	040280ef          	jal	8002d08c <printf>
    80005050:	02900513          	li	a0,41
    80005054:	527260ef          	jal	8002bd7a <putchar>
    80005058:	b75d                	j	80004ffe <m_and_hs_using_vs_access_12+0x8c>

000000008000505a <virtual_instruction_1>:
#include <rvh_test.h>
#include <page_tables.h> 


bool virtual_instruction_1() {
    8000505a:	1101                	addi	sp,sp,-32

    TEST_START();
    8000505c:	00029597          	auipc	a1,0x29
    80005060:	03458593          	addi	a1,a1,52 # 8002e090 <__func__.11>
    80005064:	0002b517          	auipc	a0,0x2b
    80005068:	f7450513          	addi	a0,a0,-140 # 8002ffd8 <__func__.0+0x2e8>
bool virtual_instruction_1() {
    8000506c:	ec06                	sd	ra,24(sp)
    8000506e:	e822                	sd	s0,16(sp)
    80005070:	e426                	sd	s1,8(sp)
    TEST_START();
    80005072:	01a280ef          	jal	8002d08c <printf>
    80005076:	4529                	li	a0,10
    80005078:	503260ef          	jal	8002bd7a <putchar>


    goto_priv(PRIV_VS);
    8000507c:	4509                	li	a0,2
    8000507e:	e8bfb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005082:	d8bfb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005086:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vs executing hfence.vvma leads to virtual instruction exception",
    8000508a:	08200593          	li	a1,130
    8000508e:	0002c617          	auipc	a2,0x2c
    80005092:	c0260613          	addi	a2,a2,-1022 # 80030c90 <__func__.0+0xfa0>
    80005096:	0002b517          	auipc	a0,0x2b
    8000509a:	f5a50513          	addi	a0,a0,-166 # 8002fff0 <__func__.0+0x300>
    8000509e:	7ef270ef          	jal	8002d08c <printf>
    800050a2:	00053797          	auipc	a5,0x53
    800050a6:	f6f7c783          	lbu	a5,-145(a5) # 80058011 <excpt+0x1>
    800050aa:	00053497          	auipc	s1,0x53
    800050ae:	f6648493          	addi	s1,s1,-154 # 80058010 <excpt>
    800050b2:	0002b597          	auipc	a1,0x2b
    800050b6:	f1658593          	addi	a1,a1,-234 # 8002ffc8 <__func__.0+0x2d8>
    800050ba:	cf89                	beqz	a5,800050d4 <virtual_instruction_1+0x7a>
    800050bc:	6498                	ld	a4,8(s1)
    800050be:	47d9                	li	a5,22
    800050c0:	0002b597          	auipc	a1,0x2b
    800050c4:	ef858593          	addi	a1,a1,-264 # 8002ffb8 <__func__.0+0x2c8>
    800050c8:	00f70663          	beq	a4,a5,800050d4 <virtual_instruction_1+0x7a>
    800050cc:	0002b597          	auipc	a1,0x2b
    800050d0:	efc58593          	addi	a1,a1,-260 # 8002ffc8 <__func__.0+0x2d8>
    800050d4:	0002b517          	auipc	a0,0x2b
    800050d8:	f3450513          	addi	a0,a0,-204 # 80030008 <__func__.0+0x318>
    800050dc:	7b1270ef          	jal	8002d08c <printf>
    800050e0:	00053797          	auipc	a5,0x53
    800050e4:	f317c783          	lbu	a5,-207(a5) # 80058011 <excpt+0x1>
    800050e8:	c789                	beqz	a5,800050f2 <virtual_instruction_1+0x98>
    800050ea:	6498                	ld	a4,8(s1)
    800050ec:	47d9                	li	a5,22
    800050ee:	00f70c63          	beq	a4,a5,80005106 <virtual_instruction_1+0xac>
    800050f2:	0002b517          	auipc	a0,0x2b
    800050f6:	f1e50513          	addi	a0,a0,-226 # 80030010 <__func__.0+0x320>
    800050fa:	793270ef          	jal	8002d08c <printf>
    800050fe:	02900513          	li	a0,41
    80005102:	479260ef          	jal	8002bd7a <putchar>
    80005106:	4529                	li	a0,10
    80005108:	473260ef          	jal	8002bd7a <putchar>
    8000510c:	00053797          	auipc	a5,0x53
    80005110:	f057c783          	lbu	a5,-251(a5) # 80058011 <excpt+0x1>
    80005114:	4401                	li	s0,0
    80005116:	c789                	beqz	a5,80005120 <virtual_instruction_1+0xc6>
    80005118:	6480                	ld	s0,8(s1)
    8000511a:	1429                	addi	s0,s0,-22
    8000511c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VS);
    80005120:	4509                	li	a0,2
    80005122:	de7fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005126:	ce7fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000512a:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    8000512e:	08200593          	li	a1,130
    80005132:	0002c617          	auipc	a2,0x2c
    80005136:	b9e60613          	addi	a2,a2,-1122 # 80030cd0 <__func__.0+0xfe0>
    8000513a:	0002b517          	auipc	a0,0x2b
    8000513e:	eb650513          	addi	a0,a0,-330 # 8002fff0 <__func__.0+0x300>
    80005142:	74b270ef          	jal	8002d08c <printf>
    80005146:	00053797          	auipc	a5,0x53
    8000514a:	ecb7c783          	lbu	a5,-309(a5) # 80058011 <excpt+0x1>
    8000514e:	0002b597          	auipc	a1,0x2b
    80005152:	e7a58593          	addi	a1,a1,-390 # 8002ffc8 <__func__.0+0x2d8>
    80005156:	cf89                	beqz	a5,80005170 <virtual_instruction_1+0x116>
    80005158:	6498                	ld	a4,8(s1)
    8000515a:	47d9                	li	a5,22
    8000515c:	0002b597          	auipc	a1,0x2b
    80005160:	e5c58593          	addi	a1,a1,-420 # 8002ffb8 <__func__.0+0x2c8>
    80005164:	00f70663          	beq	a4,a5,80005170 <virtual_instruction_1+0x116>
    80005168:	0002b597          	auipc	a1,0x2b
    8000516c:	e6058593          	addi	a1,a1,-416 # 8002ffc8 <__func__.0+0x2d8>
    80005170:	0002b517          	auipc	a0,0x2b
    80005174:	e9850513          	addi	a0,a0,-360 # 80030008 <__func__.0+0x318>
    80005178:	715270ef          	jal	8002d08c <printf>
    8000517c:	00053797          	auipc	a5,0x53
    80005180:	e957c783          	lbu	a5,-363(a5) # 80058011 <excpt+0x1>
    80005184:	c789                	beqz	a5,8000518e <virtual_instruction_1+0x134>
    80005186:	6498                	ld	a4,8(s1)
    80005188:	47d9                	li	a5,22
    8000518a:	00f70c63          	beq	a4,a5,800051a2 <virtual_instruction_1+0x148>
    8000518e:	0002b517          	auipc	a0,0x2b
    80005192:	e8250513          	addi	a0,a0,-382 # 80030010 <__func__.0+0x320>
    80005196:	6f7270ef          	jal	8002d08c <printf>
    8000519a:	02900513          	li	a0,41
    8000519e:	3dd260ef          	jal	8002bd7a <putchar>
    800051a2:	4529                	li	a0,10
    800051a4:	3d7260ef          	jal	8002bd7a <putchar>
    800051a8:	c801                	beqz	s0,800051b8 <virtual_instruction_1+0x15e>
    800051aa:	00053797          	auipc	a5,0x53
    800051ae:	e677c783          	lbu	a5,-409(a5) # 80058011 <excpt+0x1>
    800051b2:	4401                	li	s0,0
    800051b4:	18079663          	bnez	a5,80005340 <virtual_instruction_1+0x2e6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_M);  
    800051b8:	4511                	li	a0,4
    800051ba:	d4ffb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    800051be:	001007b7          	lui	a5,0x100
    800051c2:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    800051c6:	4509                	li	a0,2
    800051c8:	d41fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800051cc:	c41fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800051d0:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    800051d4:	08200593          	li	a1,130
    800051d8:	0002c617          	auipc	a2,0x2c
    800051dc:	b3860613          	addi	a2,a2,-1224 # 80030d10 <__func__.0+0x1020>
    800051e0:	0002b517          	auipc	a0,0x2b
    800051e4:	e1050513          	addi	a0,a0,-496 # 8002fff0 <__func__.0+0x300>
    800051e8:	6a5270ef          	jal	8002d08c <printf>
    800051ec:	00053797          	auipc	a5,0x53
    800051f0:	e257c783          	lbu	a5,-475(a5) # 80058011 <excpt+0x1>
    800051f4:	0002b597          	auipc	a1,0x2b
    800051f8:	dd458593          	addi	a1,a1,-556 # 8002ffc8 <__func__.0+0x2d8>
    800051fc:	cf89                	beqz	a5,80005216 <virtual_instruction_1+0x1bc>
    800051fe:	6498                	ld	a4,8(s1)
    80005200:	47d9                	li	a5,22
    80005202:	0002b597          	auipc	a1,0x2b
    80005206:	db658593          	addi	a1,a1,-586 # 8002ffb8 <__func__.0+0x2c8>
    8000520a:	00f70663          	beq	a4,a5,80005216 <virtual_instruction_1+0x1bc>
    8000520e:	0002b597          	auipc	a1,0x2b
    80005212:	dba58593          	addi	a1,a1,-582 # 8002ffc8 <__func__.0+0x2d8>
    80005216:	0002b517          	auipc	a0,0x2b
    8000521a:	df250513          	addi	a0,a0,-526 # 80030008 <__func__.0+0x318>
    8000521e:	66f270ef          	jal	8002d08c <printf>
    80005222:	00053797          	auipc	a5,0x53
    80005226:	def7c783          	lbu	a5,-529(a5) # 80058011 <excpt+0x1>
    8000522a:	c789                	beqz	a5,80005234 <virtual_instruction_1+0x1da>
    8000522c:	6498                	ld	a4,8(s1)
    8000522e:	47d9                	li	a5,22
    80005230:	00f70c63          	beq	a4,a5,80005248 <virtual_instruction_1+0x1ee>
    80005234:	0002b517          	auipc	a0,0x2b
    80005238:	ddc50513          	addi	a0,a0,-548 # 80030010 <__func__.0+0x320>
    8000523c:	651270ef          	jal	8002d08c <printf>
    80005240:	02900513          	li	a0,41
    80005244:	337260ef          	jal	8002bd7a <putchar>
    80005248:	4529                	li	a0,10
    8000524a:	331260ef          	jal	8002bd7a <putchar>
    8000524e:	c801                	beqz	s0,8000525e <virtual_instruction_1+0x204>
    80005250:	00053797          	auipc	a5,0x53
    80005254:	dc17c783          	lbu	a5,-575(a5) # 80058011 <excpt+0x1>
    80005258:	4401                	li	s0,0
    8000525a:	0c079e63          	bnez	a5,80005336 <virtual_instruction_1+0x2dc>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    8000525e:	4509                	li	a0,2
    80005260:	ca9fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005264:	ba9fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005268:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    8000526c:	08200593          	li	a1,130
    80005270:	0002c617          	auipc	a2,0x2c
    80005274:	af060613          	addi	a2,a2,-1296 # 80030d60 <__func__.0+0x1070>
    80005278:	0002b517          	auipc	a0,0x2b
    8000527c:	d7850513          	addi	a0,a0,-648 # 8002fff0 <__func__.0+0x300>
    80005280:	60d270ef          	jal	8002d08c <printf>
    80005284:	00053797          	auipc	a5,0x53
    80005288:	d8d7c783          	lbu	a5,-627(a5) # 80058011 <excpt+0x1>
    8000528c:	0002b597          	auipc	a1,0x2b
    80005290:	d3c58593          	addi	a1,a1,-708 # 8002ffc8 <__func__.0+0x2d8>
    80005294:	cf89                	beqz	a5,800052ae <virtual_instruction_1+0x254>
    80005296:	6498                	ld	a4,8(s1)
    80005298:	47d9                	li	a5,22
    8000529a:	0002b597          	auipc	a1,0x2b
    8000529e:	d1e58593          	addi	a1,a1,-738 # 8002ffb8 <__func__.0+0x2c8>
    800052a2:	00f70663          	beq	a4,a5,800052ae <virtual_instruction_1+0x254>
    800052a6:	0002b597          	auipc	a1,0x2b
    800052aa:	d2258593          	addi	a1,a1,-734 # 8002ffc8 <__func__.0+0x2d8>
    800052ae:	0002b517          	auipc	a0,0x2b
    800052b2:	d5a50513          	addi	a0,a0,-678 # 80030008 <__func__.0+0x318>
    800052b6:	5d7270ef          	jal	8002d08c <printf>
    800052ba:	00053797          	auipc	a5,0x53
    800052be:	d577c783          	lbu	a5,-681(a5) # 80058011 <excpt+0x1>
    800052c2:	c789                	beqz	a5,800052cc <virtual_instruction_1+0x272>
    800052c4:	6498                	ld	a4,8(s1)
    800052c6:	47d9                	li	a5,22
    800052c8:	00f70c63          	beq	a4,a5,800052e0 <virtual_instruction_1+0x286>
    800052cc:	0002b517          	auipc	a0,0x2b
    800052d0:	d4450513          	addi	a0,a0,-700 # 80030010 <__func__.0+0x320>
    800052d4:	5b9270ef          	jal	8002d08c <printf>
    800052d8:	02900513          	li	a0,41
    800052dc:	29f260ef          	jal	8002bd7a <putchar>
    800052e0:	4529                	li	a0,10
    800052e2:	299260ef          	jal	8002bd7a <putchar>
    800052e6:	c015                	beqz	s0,8000530a <virtual_instruction_1+0x2b0>
    800052e8:	00053417          	auipc	s0,0x53
    800052ec:	d2944403          	lbu	s0,-727(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    800052f0:	0002b597          	auipc	a1,0x2b
    800052f4:	cd858593          	addi	a1,a1,-808 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800052f8:	cc11                	beqz	s0,80005314 <virtual_instruction_1+0x2ba>
    800052fa:	6498                	ld	a4,8(s1)
    800052fc:	47d9                	li	a5,22
    TEST_END();
    800052fe:	0002b597          	auipc	a1,0x2b
    80005302:	cba58593          	addi	a1,a1,-838 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005306:	00f70763          	beq	a4,a5,80005314 <virtual_instruction_1+0x2ba>
    8000530a:	4401                	li	s0,0
    TEST_END();
    8000530c:	0002b597          	auipc	a1,0x2b
    80005310:	cbc58593          	addi	a1,a1,-836 # 8002ffc8 <__func__.0+0x2d8>
    80005314:	0002b517          	auipc	a0,0x2b
    80005318:	d5c50513          	addi	a0,a0,-676 # 80030070 <__func__.0+0x380>
    8000531c:	571270ef          	jal	8002d08c <printf>
    80005320:	4511                	li	a0,4
    80005322:	be7fb0ef          	jal	80000f08 <goto_priv>
    80005326:	dacfc0ef          	jal	800018d2 <reset_state>
}
    8000532a:	60e2                	ld	ra,24(sp)
    8000532c:	8522                	mv	a0,s0
    8000532e:	6442                	ld	s0,16(sp)
    80005330:	64a2                	ld	s1,8(sp)
    80005332:	6105                	addi	sp,sp,32
    80005334:	8082                	ret
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    80005336:	6480                	ld	s0,8(s1)
    80005338:	1429                	addi	s0,s0,-22
    8000533a:	00143413          	seqz	s0,s0
    8000533e:	b705                	j	8000525e <virtual_instruction_1+0x204>
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80005340:	6480                	ld	s0,8(s1)
    80005342:	1429                	addi	s0,s0,-22
    80005344:	00143413          	seqz	s0,s0
    80005348:	bd85                	j	800051b8 <virtual_instruction_1+0x15e>

000000008000534a <virtual_instruction_2>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_2() {
    8000534a:	7179                	addi	sp,sp,-48

    TEST_START();
    8000534c:	00029597          	auipc	a1,0x29
    80005350:	d5c58593          	addi	a1,a1,-676 # 8002e0a8 <__func__.10>
    80005354:	0002b517          	auipc	a0,0x2b
    80005358:	c8450513          	addi	a0,a0,-892 # 8002ffd8 <__func__.0+0x2e8>
bool virtual_instruction_2() {
    8000535c:	f406                	sd	ra,40(sp)
    8000535e:	f022                	sd	s0,32(sp)
    80005360:	ec26                	sd	s1,24(sp)
    TEST_START();
    80005362:	52b270ef          	jal	8002d08c <printf>
    80005366:	4529                	li	a0,10
    80005368:	213260ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_VS);
    8000536c:	4509                	li	a0,2
    8000536e:	b9bfb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005372:	a9bfb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005376:	4781                	li	a5,0
    80005378:	6c07c7f3          	.insn	4, 0x6c07c7f3
    volatile uint64_t tmp = hlvd(0);
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    8000537c:	08200593          	li	a1,130
    80005380:	0002c617          	auipc	a2,0x2c
    80005384:	a3060613          	addi	a2,a2,-1488 # 80030db0 <__func__.0+0x10c0>
    80005388:	0002b517          	auipc	a0,0x2b
    8000538c:	c6850513          	addi	a0,a0,-920 # 8002fff0 <__func__.0+0x300>
    volatile uint64_t tmp = hlvd(0);
    80005390:	e43e                	sd	a5,8(sp)
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    80005392:	4fb270ef          	jal	8002d08c <printf>
    80005396:	00053797          	auipc	a5,0x53
    8000539a:	c7b7c783          	lbu	a5,-901(a5) # 80058011 <excpt+0x1>
    8000539e:	00053497          	auipc	s1,0x53
    800053a2:	c7248493          	addi	s1,s1,-910 # 80058010 <excpt>
    800053a6:	0002b597          	auipc	a1,0x2b
    800053aa:	c2258593          	addi	a1,a1,-990 # 8002ffc8 <__func__.0+0x2d8>
    800053ae:	cf89                	beqz	a5,800053c8 <virtual_instruction_2+0x7e>
    800053b0:	6498                	ld	a4,8(s1)
    800053b2:	47d9                	li	a5,22
    800053b4:	0002b597          	auipc	a1,0x2b
    800053b8:	c0458593          	addi	a1,a1,-1020 # 8002ffb8 <__func__.0+0x2c8>
    800053bc:	00f70663          	beq	a4,a5,800053c8 <virtual_instruction_2+0x7e>
    800053c0:	0002b597          	auipc	a1,0x2b
    800053c4:	c0858593          	addi	a1,a1,-1016 # 8002ffc8 <__func__.0+0x2d8>
    800053c8:	0002b517          	auipc	a0,0x2b
    800053cc:	c4050513          	addi	a0,a0,-960 # 80030008 <__func__.0+0x318>
    800053d0:	4bd270ef          	jal	8002d08c <printf>
    800053d4:	00053797          	auipc	a5,0x53
    800053d8:	c3d7c783          	lbu	a5,-963(a5) # 80058011 <excpt+0x1>
    800053dc:	c789                	beqz	a5,800053e6 <virtual_instruction_2+0x9c>
    800053de:	6498                	ld	a4,8(s1)
    800053e0:	47d9                	li	a5,22
    800053e2:	00f70c63          	beq	a4,a5,800053fa <virtual_instruction_2+0xb0>
    800053e6:	0002b517          	auipc	a0,0x2b
    800053ea:	c2a50513          	addi	a0,a0,-982 # 80030010 <__func__.0+0x320>
    800053ee:	49f270ef          	jal	8002d08c <printf>
    800053f2:	02900513          	li	a0,41
    800053f6:	185260ef          	jal	8002bd7a <putchar>
    800053fa:	4529                	li	a0,10
    800053fc:	17f260ef          	jal	8002bd7a <putchar>
    80005400:	00053797          	auipc	a5,0x53
    80005404:	c117c783          	lbu	a5,-1007(a5) # 80058011 <excpt+0x1>
    80005408:	4401                	li	s0,0
    8000540a:	c789                	beqz	a5,80005414 <virtual_instruction_2+0xca>
    8000540c:	6480                	ld	s0,8(s1)
    8000540e:	1429                	addi	s0,s0,-22
    80005410:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80005414:	4509                	li	a0,2
    80005416:	af3fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000541a:	9f3fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000541e:	37ab77b7          	lui	a5,0x37ab7
    80005422:	078a                	slli	a5,a5,0x2
    80005424:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005428:	4701                	li	a4,0
    8000542a:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    8000542e:	08200593          	li	a1,130
    80005432:	0002c617          	auipc	a2,0x2c
    80005436:	9ae60613          	addi	a2,a2,-1618 # 80030de0 <__func__.0+0x10f0>
    8000543a:	0002b517          	auipc	a0,0x2b
    8000543e:	bb650513          	addi	a0,a0,-1098 # 8002fff0 <__func__.0+0x300>
    80005442:	44b270ef          	jal	8002d08c <printf>
    80005446:	00053797          	auipc	a5,0x53
    8000544a:	bcb7c783          	lbu	a5,-1077(a5) # 80058011 <excpt+0x1>
    8000544e:	0002b597          	auipc	a1,0x2b
    80005452:	b7a58593          	addi	a1,a1,-1158 # 8002ffc8 <__func__.0+0x2d8>
    80005456:	cf89                	beqz	a5,80005470 <virtual_instruction_2+0x126>
    80005458:	6498                	ld	a4,8(s1)
    8000545a:	47d9                	li	a5,22
    8000545c:	0002b597          	auipc	a1,0x2b
    80005460:	b5c58593          	addi	a1,a1,-1188 # 8002ffb8 <__func__.0+0x2c8>
    80005464:	00f70663          	beq	a4,a5,80005470 <virtual_instruction_2+0x126>
    80005468:	0002b597          	auipc	a1,0x2b
    8000546c:	b6058593          	addi	a1,a1,-1184 # 8002ffc8 <__func__.0+0x2d8>
    80005470:	0002b517          	auipc	a0,0x2b
    80005474:	b9850513          	addi	a0,a0,-1128 # 80030008 <__func__.0+0x318>
    80005478:	415270ef          	jal	8002d08c <printf>
    8000547c:	00053797          	auipc	a5,0x53
    80005480:	b957c783          	lbu	a5,-1131(a5) # 80058011 <excpt+0x1>
    80005484:	c789                	beqz	a5,8000548e <virtual_instruction_2+0x144>
    80005486:	6498                	ld	a4,8(s1)
    80005488:	47d9                	li	a5,22
    8000548a:	00f70c63          	beq	a4,a5,800054a2 <virtual_instruction_2+0x158>
    8000548e:	0002b517          	auipc	a0,0x2b
    80005492:	b8250513          	addi	a0,a0,-1150 # 80030010 <__func__.0+0x320>
    80005496:	3f7270ef          	jal	8002d08c <printf>
    8000549a:	02900513          	li	a0,41
    8000549e:	0dd260ef          	jal	8002bd7a <putchar>
    800054a2:	4529                	li	a0,10
    800054a4:	0d7260ef          	jal	8002bd7a <putchar>
    800054a8:	c015                	beqz	s0,800054cc <virtual_instruction_2+0x182>
    800054aa:	00053417          	auipc	s0,0x53
    800054ae:	b6744403          	lbu	s0,-1177(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    800054b2:	0002b597          	auipc	a1,0x2b
    800054b6:	b1658593          	addi	a1,a1,-1258 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    800054ba:	cc11                	beqz	s0,800054d6 <virtual_instruction_2+0x18c>
    800054bc:	6498                	ld	a4,8(s1)
    800054be:	47d9                	li	a5,22
    TEST_END();
    800054c0:	0002b597          	auipc	a1,0x2b
    800054c4:	af858593          	addi	a1,a1,-1288 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    800054c8:	00f70763          	beq	a4,a5,800054d6 <virtual_instruction_2+0x18c>
    800054cc:	4401                	li	s0,0
    TEST_END();
    800054ce:	0002b597          	auipc	a1,0x2b
    800054d2:	afa58593          	addi	a1,a1,-1286 # 8002ffc8 <__func__.0+0x2d8>
    800054d6:	0002b517          	auipc	a0,0x2b
    800054da:	b9a50513          	addi	a0,a0,-1126 # 80030070 <__func__.0+0x380>
    800054de:	3af270ef          	jal	8002d08c <printf>
    800054e2:	4511                	li	a0,4
    800054e4:	a25fb0ef          	jal	80000f08 <goto_priv>
    800054e8:	beafc0ef          	jal	800018d2 <reset_state>

}
    800054ec:	70a2                	ld	ra,40(sp)
    800054ee:	8522                	mv	a0,s0
    800054f0:	7402                	ld	s0,32(sp)
    800054f2:	64e2                	ld	s1,24(sp)
    800054f4:	6145                	addi	sp,sp,48
    800054f6:	8082                	ret

00000000800054f8 <virtual_instruction_3>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_3() {
    800054f8:	1101                	addi	sp,sp,-32

    TEST_START();
    800054fa:	00029597          	auipc	a1,0x29
    800054fe:	bc658593          	addi	a1,a1,-1082 # 8002e0c0 <__func__.9>
    80005502:	0002b517          	auipc	a0,0x2b
    80005506:	ad650513          	addi	a0,a0,-1322 # 8002ffd8 <__func__.0+0x2e8>
bool virtual_instruction_3() {
    8000550a:	ec06                	sd	ra,24(sp)
    8000550c:	e822                	sd	s0,16(sp)
    8000550e:	e426                	sd	s1,8(sp)
    TEST_START();
    80005510:	37d270ef          	jal	8002d08c <printf>
    80005514:	4529                	li	a0,10
    80005516:	065260ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8000551a:	4511                	li	a0,4
    8000551c:	9edfb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80005520:	004007b7          	lui	a5,0x400
    80005524:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80005528:	4509                	li	a0,2
    8000552a:	9dffb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000552e:	8dffb0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_SRET();
    80005532:	00000297          	auipc	t0,0x0
    80005536:	01028293          	addi	t0,t0,16 # 80005542 <virtual_instruction_3+0x4a>
    8000553a:	14129073          	csrw	sepc,t0
    8000553e:	10200073          	sret
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80005542:	08200593          	li	a1,130
    80005546:	0002c617          	auipc	a2,0x2c
    8000554a:	8ca60613          	addi	a2,a2,-1846 # 80030e10 <__func__.0+0x1120>
    8000554e:	0002b517          	auipc	a0,0x2b
    80005552:	aa250513          	addi	a0,a0,-1374 # 8002fff0 <__func__.0+0x300>
    80005556:	337270ef          	jal	8002d08c <printf>
    8000555a:	00053797          	auipc	a5,0x53
    8000555e:	ab77c783          	lbu	a5,-1353(a5) # 80058011 <excpt+0x1>
    80005562:	00053497          	auipc	s1,0x53
    80005566:	aae48493          	addi	s1,s1,-1362 # 80058010 <excpt>
    8000556a:	0002b597          	auipc	a1,0x2b
    8000556e:	a5e58593          	addi	a1,a1,-1442 # 8002ffc8 <__func__.0+0x2d8>
    80005572:	cf89                	beqz	a5,8000558c <virtual_instruction_3+0x94>
    80005574:	6498                	ld	a4,8(s1)
    80005576:	47d9                	li	a5,22
    80005578:	0002b597          	auipc	a1,0x2b
    8000557c:	a4058593          	addi	a1,a1,-1472 # 8002ffb8 <__func__.0+0x2c8>
    80005580:	00f70663          	beq	a4,a5,8000558c <virtual_instruction_3+0x94>
    80005584:	0002b597          	auipc	a1,0x2b
    80005588:	a4458593          	addi	a1,a1,-1468 # 8002ffc8 <__func__.0+0x2d8>
    8000558c:	0002b517          	auipc	a0,0x2b
    80005590:	a7c50513          	addi	a0,a0,-1412 # 80030008 <__func__.0+0x318>
    80005594:	2f9270ef          	jal	8002d08c <printf>
    80005598:	00053797          	auipc	a5,0x53
    8000559c:	a797c783          	lbu	a5,-1415(a5) # 80058011 <excpt+0x1>
    800055a0:	c789                	beqz	a5,800055aa <virtual_instruction_3+0xb2>
    800055a2:	6498                	ld	a4,8(s1)
    800055a4:	47d9                	li	a5,22
    800055a6:	00f70c63          	beq	a4,a5,800055be <virtual_instruction_3+0xc6>
    800055aa:	0002b517          	auipc	a0,0x2b
    800055ae:	a6650513          	addi	a0,a0,-1434 # 80030010 <__func__.0+0x320>
    800055b2:	2db270ef          	jal	8002d08c <printf>
    800055b6:	02900513          	li	a0,41
    800055ba:	7c0260ef          	jal	8002bd7a <putchar>
    800055be:	4529                	li	a0,10
    800055c0:	7ba260ef          	jal	8002bd7a <putchar>
    800055c4:	00053417          	auipc	s0,0x53
    800055c8:	a4d44403          	lbu	s0,-1459(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
    goto_priv(PRIV_M);
    800055cc:	4511                	li	a0,4
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    800055ce:	c409                	beqz	s0,800055d8 <virtual_instruction_3+0xe0>
    800055d0:	6498                	ld	a4,8(s1)
    800055d2:	47d9                	li	a5,22
    800055d4:	02f70e63          	beq	a4,a5,80005610 <virtual_instruction_3+0x118>
    goto_priv(PRIV_M);
    800055d8:	931fb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    800055dc:	004007b7          	lui	a5,0x400
    800055e0:	6007b073          	csrc	hstatus,a5
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    800055e4:	4401                	li	s0,0

    TEST_END();
    800055e6:	0002b597          	auipc	a1,0x2b
    800055ea:	9e258593          	addi	a1,a1,-1566 # 8002ffc8 <__func__.0+0x2d8>
    800055ee:	0002b517          	auipc	a0,0x2b
    800055f2:	a8250513          	addi	a0,a0,-1406 # 80030070 <__func__.0+0x380>
    800055f6:	297270ef          	jal	8002d08c <printf>
    800055fa:	4511                	li	a0,4
    800055fc:	90dfb0ef          	jal	80000f08 <goto_priv>
    80005600:	ad2fc0ef          	jal	800018d2 <reset_state>
}
    80005604:	60e2                	ld	ra,24(sp)
    80005606:	8522                	mv	a0,s0
    80005608:	6442                	ld	s0,16(sp)
    8000560a:	64a2                	ld	s1,8(sp)
    8000560c:	6105                	addi	sp,sp,32
    8000560e:	8082                	ret
    goto_priv(PRIV_M);
    80005610:	8f9fb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    80005614:	004007b7          	lui	a5,0x400
    80005618:	6007b073          	csrc	hstatus,a5
    TEST_END();
    8000561c:	0002b597          	auipc	a1,0x2b
    80005620:	99c58593          	addi	a1,a1,-1636 # 8002ffb8 <__func__.0+0x2c8>
    80005624:	b7e9                	j	800055ee <virtual_instruction_3+0xf6>

0000000080005626 <virtual_instruction_4>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_4() {
    80005626:	1101                	addi	sp,sp,-32

    TEST_START();
    80005628:	00029597          	auipc	a1,0x29
    8000562c:	ab058593          	addi	a1,a1,-1360 # 8002e0d8 <__func__.8>
    80005630:	0002b517          	auipc	a0,0x2b
    80005634:	9a850513          	addi	a0,a0,-1624 # 8002ffd8 <__func__.0+0x2e8>
bool virtual_instruction_4() {
    80005638:	ec06                	sd	ra,24(sp)
    8000563a:	e822                	sd	s0,16(sp)
    8000563c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000563e:	24f270ef          	jal	8002d08c <printf>
    80005642:	4529                	li	a0,10
    80005644:	736260ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    80005648:	4511                	li	a0,4
    8000564a:	8bffb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    8000564e:	001007b7          	lui	a5,0x100
    80005652:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80005656:	4509                	li	a0,2
    80005658:	8b1fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000565c:	fb0fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile ("sfence.vma \n\t");
    80005660:	12000073          	sfence.vma
    sfence();
    TEST_ASSERT("vs sfence leads to virtual instruction exception when vtvm set",
    80005664:	08200593          	li	a1,130
    80005668:	0002b617          	auipc	a2,0x2b
    8000566c:	7e860613          	addi	a2,a2,2024 # 80030e50 <__func__.0+0x1160>
    80005670:	0002b517          	auipc	a0,0x2b
    80005674:	98050513          	addi	a0,a0,-1664 # 8002fff0 <__func__.0+0x300>
    80005678:	215270ef          	jal	8002d08c <printf>
    8000567c:	00053797          	auipc	a5,0x53
    80005680:	9957c783          	lbu	a5,-1643(a5) # 80058011 <excpt+0x1>
    80005684:	00053497          	auipc	s1,0x53
    80005688:	98c48493          	addi	s1,s1,-1652 # 80058010 <excpt>
    8000568c:	0002b597          	auipc	a1,0x2b
    80005690:	93c58593          	addi	a1,a1,-1732 # 8002ffc8 <__func__.0+0x2d8>
    80005694:	cf89                	beqz	a5,800056ae <virtual_instruction_4+0x88>
    80005696:	6498                	ld	a4,8(s1)
    80005698:	47d9                	li	a5,22
    8000569a:	0002b597          	auipc	a1,0x2b
    8000569e:	91e58593          	addi	a1,a1,-1762 # 8002ffb8 <__func__.0+0x2c8>
    800056a2:	00f70663          	beq	a4,a5,800056ae <virtual_instruction_4+0x88>
    800056a6:	0002b597          	auipc	a1,0x2b
    800056aa:	92258593          	addi	a1,a1,-1758 # 8002ffc8 <__func__.0+0x2d8>
    800056ae:	0002b517          	auipc	a0,0x2b
    800056b2:	95a50513          	addi	a0,a0,-1702 # 80030008 <__func__.0+0x318>
    800056b6:	1d7270ef          	jal	8002d08c <printf>
    800056ba:	00053797          	auipc	a5,0x53
    800056be:	9577c783          	lbu	a5,-1705(a5) # 80058011 <excpt+0x1>
    800056c2:	c789                	beqz	a5,800056cc <virtual_instruction_4+0xa6>
    800056c4:	6498                	ld	a4,8(s1)
    800056c6:	47d9                	li	a5,22
    800056c8:	00f70c63          	beq	a4,a5,800056e0 <virtual_instruction_4+0xba>
    800056cc:	0002b517          	auipc	a0,0x2b
    800056d0:	94450513          	addi	a0,a0,-1724 # 80030010 <__func__.0+0x320>
    800056d4:	1b9270ef          	jal	8002d08c <printf>
    800056d8:	02900513          	li	a0,41
    800056dc:	69e260ef          	jal	8002bd7a <putchar>
    800056e0:	4529                	li	a0,10
    800056e2:	698260ef          	jal	8002bd7a <putchar>
    800056e6:	00053797          	auipc	a5,0x53
    800056ea:	92b7c783          	lbu	a5,-1749(a5) # 80058011 <excpt+0x1>
    800056ee:	4401                	li	s0,0
    800056f0:	c789                	beqz	a5,800056fa <virtual_instruction_4+0xd4>
    800056f2:	6480                	ld	s0,8(s1)
    800056f4:	1429                	addi	s0,s0,-22
    800056f6:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_SETUP_EXCEPT();
    800056fa:	f12fb0ef          	jal	80000e0c <test_setup_except_function>
    CSRW(satp, 0x0);
    800056fe:	18005073          	csrwi	satp,0
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    80005702:	08200593          	li	a1,130
    80005706:	0002b617          	auipc	a2,0x2b
    8000570a:	78a60613          	addi	a2,a2,1930 # 80030e90 <__func__.0+0x11a0>
    8000570e:	0002b517          	auipc	a0,0x2b
    80005712:	8e250513          	addi	a0,a0,-1822 # 8002fff0 <__func__.0+0x300>
    80005716:	177270ef          	jal	8002d08c <printf>
    8000571a:	00053797          	auipc	a5,0x53
    8000571e:	8f77c783          	lbu	a5,-1801(a5) # 80058011 <excpt+0x1>
    80005722:	0002b597          	auipc	a1,0x2b
    80005726:	8a658593          	addi	a1,a1,-1882 # 8002ffc8 <__func__.0+0x2d8>
    8000572a:	cf89                	beqz	a5,80005744 <virtual_instruction_4+0x11e>
    8000572c:	6498                	ld	a4,8(s1)
    8000572e:	47d9                	li	a5,22
    80005730:	0002b597          	auipc	a1,0x2b
    80005734:	88858593          	addi	a1,a1,-1912 # 8002ffb8 <__func__.0+0x2c8>
    80005738:	00f70663          	beq	a4,a5,80005744 <virtual_instruction_4+0x11e>
    8000573c:	0002b597          	auipc	a1,0x2b
    80005740:	88c58593          	addi	a1,a1,-1908 # 8002ffc8 <__func__.0+0x2d8>
    80005744:	0002b517          	auipc	a0,0x2b
    80005748:	8c450513          	addi	a0,a0,-1852 # 80030008 <__func__.0+0x318>
    8000574c:	141270ef          	jal	8002d08c <printf>
    80005750:	00053797          	auipc	a5,0x53
    80005754:	8c17c783          	lbu	a5,-1855(a5) # 80058011 <excpt+0x1>
    80005758:	c789                	beqz	a5,80005762 <virtual_instruction_4+0x13c>
    8000575a:	6498                	ld	a4,8(s1)
    8000575c:	47d9                	li	a5,22
    8000575e:	00f70c63          	beq	a4,a5,80005776 <virtual_instruction_4+0x150>
    80005762:	0002b517          	auipc	a0,0x2b
    80005766:	8ae50513          	addi	a0,a0,-1874 # 80030010 <__func__.0+0x320>
    8000576a:	123270ef          	jal	8002d08c <printf>
    8000576e:	02900513          	li	a0,41
    80005772:	608260ef          	jal	8002bd7a <putchar>
    80005776:	4529                	li	a0,10
    80005778:	602260ef          	jal	8002bd7a <putchar>
    8000577c:	c015                	beqz	s0,800057a0 <virtual_instruction_4+0x17a>
    8000577e:	00053417          	auipc	s0,0x53
    80005782:	89344403          	lbu	s0,-1901(s0) # 80058011 <excpt+0x1>
    // TEST_ASSERT("vs mode access h level low part leads to virtual instruction exception when mstatus_TVM=0",
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_VRTI
    // );      
    
    TEST_END();
    80005786:	0002b597          	auipc	a1,0x2b
    8000578a:	84258593          	addi	a1,a1,-1982 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    8000578e:	cc11                	beqz	s0,800057aa <virtual_instruction_4+0x184>
    80005790:	6498                	ld	a4,8(s1)
    80005792:	47d9                	li	a5,22
    TEST_END();
    80005794:	0002b597          	auipc	a1,0x2b
    80005798:	82458593          	addi	a1,a1,-2012 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    8000579c:	00f70763          	beq	a4,a5,800057aa <virtual_instruction_4+0x184>
    800057a0:	4401                	li	s0,0
    TEST_END();
    800057a2:	0002b597          	auipc	a1,0x2b
    800057a6:	82658593          	addi	a1,a1,-2010 # 8002ffc8 <__func__.0+0x2d8>
    800057aa:	0002b517          	auipc	a0,0x2b
    800057ae:	8c650513          	addi	a0,a0,-1850 # 80030070 <__func__.0+0x380>
    800057b2:	0db270ef          	jal	8002d08c <printf>
    800057b6:	4511                	li	a0,4
    800057b8:	f50fb0ef          	jal	80000f08 <goto_priv>
    800057bc:	916fc0ef          	jal	800018d2 <reset_state>
}
    800057c0:	60e2                	ld	ra,24(sp)
    800057c2:	8522                	mv	a0,s0
    800057c4:	6442                	ld	s0,16(sp)
    800057c6:	64a2                	ld	s1,8(sp)
    800057c8:	6105                	addi	sp,sp,32
    800057ca:	8082                	ret

00000000800057cc <virtual_instruction_5>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_5() {
    800057cc:	1101                	addi	sp,sp,-32

    TEST_START();
    800057ce:	00029597          	auipc	a1,0x29
    800057d2:	92258593          	addi	a1,a1,-1758 # 8002e0f0 <__func__.7>
    800057d6:	0002b517          	auipc	a0,0x2b
    800057da:	80250513          	addi	a0,a0,-2046 # 8002ffd8 <__func__.0+0x2e8>
bool virtual_instruction_5() {
    800057de:	ec06                	sd	ra,24(sp)
    800057e0:	e822                	sd	s0,16(sp)
    800057e2:	e426                	sd	s1,8(sp)
    TEST_START();
    800057e4:	0a9270ef          	jal	8002d08c <printf>
    800057e8:	4529                	li	a0,10
    800057ea:	590260ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    800057ee:	4511                	li	a0,4
    800057f0:	f18fb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    800057f4:	002007b7          	lui	a5,0x200
    800057f8:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    800057fc:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VS);
    80005800:	4509                	li	a0,2
    80005802:	f06fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005806:	e06fb0ef          	jal	80000e0c <test_setup_except_function>
    asm("wfi");
    8000580a:	10500073          	wfi
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000580e:	08200593          	li	a1,130
    80005812:	0002b617          	auipc	a2,0x2b
    80005816:	6c660613          	addi	a2,a2,1734 # 80030ed8 <__func__.0+0x11e8>
    8000581a:	0002a517          	auipc	a0,0x2a
    8000581e:	7d650513          	addi	a0,a0,2006 # 8002fff0 <__func__.0+0x300>
    80005822:	06b270ef          	jal	8002d08c <printf>
    80005826:	00052797          	auipc	a5,0x52
    8000582a:	7eb7c783          	lbu	a5,2027(a5) # 80058011 <excpt+0x1>
    8000582e:	00052497          	auipc	s1,0x52
    80005832:	7e248493          	addi	s1,s1,2018 # 80058010 <excpt>
    80005836:	0002a597          	auipc	a1,0x2a
    8000583a:	79258593          	addi	a1,a1,1938 # 8002ffc8 <__func__.0+0x2d8>
    8000583e:	cf89                	beqz	a5,80005858 <virtual_instruction_5+0x8c>
    80005840:	6498                	ld	a4,8(s1)
    80005842:	47d9                	li	a5,22
    80005844:	0002a597          	auipc	a1,0x2a
    80005848:	77458593          	addi	a1,a1,1908 # 8002ffb8 <__func__.0+0x2c8>
    8000584c:	00f70663          	beq	a4,a5,80005858 <virtual_instruction_5+0x8c>
    80005850:	0002a597          	auipc	a1,0x2a
    80005854:	77858593          	addi	a1,a1,1912 # 8002ffc8 <__func__.0+0x2d8>
    80005858:	0002a517          	auipc	a0,0x2a
    8000585c:	7b050513          	addi	a0,a0,1968 # 80030008 <__func__.0+0x318>
    80005860:	02d270ef          	jal	8002d08c <printf>
    80005864:	00052797          	auipc	a5,0x52
    80005868:	7ad7c783          	lbu	a5,1965(a5) # 80058011 <excpt+0x1>
    8000586c:	c789                	beqz	a5,80005876 <virtual_instruction_5+0xaa>
    8000586e:	6498                	ld	a4,8(s1)
    80005870:	47d9                	li	a5,22
    80005872:	00f70c63          	beq	a4,a5,8000588a <virtual_instruction_5+0xbe>
    80005876:	0002a517          	auipc	a0,0x2a
    8000587a:	79a50513          	addi	a0,a0,1946 # 80030010 <__func__.0+0x320>
    8000587e:	00f270ef          	jal	8002d08c <printf>
    80005882:	02900513          	li	a0,41
    80005886:	4f4260ef          	jal	8002bd7a <putchar>
    8000588a:	4529                	li	a0,10
    8000588c:	4ee260ef          	jal	8002bd7a <putchar>
    80005890:	00052417          	auipc	s0,0x52
    80005894:	78144403          	lbu	s0,1921(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    goto_priv(PRIV_M);
    80005898:	4511                	li	a0,4
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000589a:	c409                	beqz	s0,800058a4 <virtual_instruction_5+0xd8>
    8000589c:	6498                	ld	a4,8(s1)
    8000589e:	47d9                	li	a5,22
    800058a0:	04f70263          	beq	a4,a5,800058e4 <virtual_instruction_5+0x118>
    goto_priv(PRIV_M);
    800058a4:	e64fb0ef          	jal	80000f08 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    800058a8:	343025f3          	csrr	a1,mtval
    800058ac:	0002b517          	auipc	a0,0x2b
    800058b0:	67450513          	addi	a0,a0,1652 # 80030f20 <__func__.0+0x1230>
    800058b4:	7d8270ef          	jal	8002d08c <printf>
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800058b8:	4401                	li	s0,0

    TEST_END();
    800058ba:	0002a597          	auipc	a1,0x2a
    800058be:	70e58593          	addi	a1,a1,1806 # 8002ffc8 <__func__.0+0x2d8>
    800058c2:	0002a517          	auipc	a0,0x2a
    800058c6:	7ae50513          	addi	a0,a0,1966 # 80030070 <__func__.0+0x380>
    800058ca:	7c2270ef          	jal	8002d08c <printf>
    800058ce:	4511                	li	a0,4
    800058d0:	e38fb0ef          	jal	80000f08 <goto_priv>
    800058d4:	ffffb0ef          	jal	800018d2 <reset_state>
}
    800058d8:	60e2                	ld	ra,24(sp)
    800058da:	8522                	mv	a0,s0
    800058dc:	6442                	ld	s0,16(sp)
    800058de:	64a2                	ld	s1,8(sp)
    800058e0:	6105                	addi	sp,sp,32
    800058e2:	8082                	ret
    goto_priv(PRIV_M);
    800058e4:	e24fb0ef          	jal	80000f08 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    800058e8:	343025f3          	csrr	a1,mtval
    800058ec:	0002b517          	auipc	a0,0x2b
    800058f0:	63450513          	addi	a0,a0,1588 # 80030f20 <__func__.0+0x1230>
    800058f4:	798270ef          	jal	8002d08c <printf>
    TEST_END();
    800058f8:	0002a597          	auipc	a1,0x2a
    800058fc:	6c058593          	addi	a1,a1,1728 # 8002ffb8 <__func__.0+0x2c8>
    80005900:	b7c9                	j	800058c2 <virtual_instruction_5+0xf6>

0000000080005902 <virtual_instruction_6>:


bool virtual_instruction_6() {
    80005902:	1101                	addi	sp,sp,-32

    TEST_START();
    80005904:	00029597          	auipc	a1,0x29
    80005908:	80458593          	addi	a1,a1,-2044 # 8002e108 <__func__.6>
    8000590c:	0002a517          	auipc	a0,0x2a
    80005910:	6cc50513          	addi	a0,a0,1740 # 8002ffd8 <__func__.0+0x2e8>
bool virtual_instruction_6() {
    80005914:	ec06                	sd	ra,24(sp)
    80005916:	e822                	sd	s0,16(sp)
    80005918:	e426                	sd	s1,8(sp)
    TEST_START();
    8000591a:	772270ef          	jal	8002d08c <printf>
    8000591e:	4529                	li	a0,10
    80005920:	45a260ef          	jal	8002bd7a <putchar>

//vu-mode
    goto_priv(PRIV_VU);
    80005924:	4501                	li	a0,0
    80005926:	de2fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000592a:	ce2fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000592e:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vu executing hfence.vvma leads to virtual instruction exception",
    80005932:	08200593          	li	a1,130
    80005936:	0002b617          	auipc	a2,0x2b
    8000593a:	5f260613          	addi	a2,a2,1522 # 80030f28 <__func__.0+0x1238>
    8000593e:	0002a517          	auipc	a0,0x2a
    80005942:	6b250513          	addi	a0,a0,1714 # 8002fff0 <__func__.0+0x300>
    80005946:	746270ef          	jal	8002d08c <printf>
    8000594a:	00052797          	auipc	a5,0x52
    8000594e:	6c77c783          	lbu	a5,1735(a5) # 80058011 <excpt+0x1>
    80005952:	00052497          	auipc	s1,0x52
    80005956:	6be48493          	addi	s1,s1,1726 # 80058010 <excpt>
    8000595a:	0002a597          	auipc	a1,0x2a
    8000595e:	66e58593          	addi	a1,a1,1646 # 8002ffc8 <__func__.0+0x2d8>
    80005962:	cf89                	beqz	a5,8000597c <virtual_instruction_6+0x7a>
    80005964:	6498                	ld	a4,8(s1)
    80005966:	47d9                	li	a5,22
    80005968:	0002a597          	auipc	a1,0x2a
    8000596c:	65058593          	addi	a1,a1,1616 # 8002ffb8 <__func__.0+0x2c8>
    80005970:	00f70663          	beq	a4,a5,8000597c <virtual_instruction_6+0x7a>
    80005974:	0002a597          	auipc	a1,0x2a
    80005978:	65458593          	addi	a1,a1,1620 # 8002ffc8 <__func__.0+0x2d8>
    8000597c:	0002a517          	auipc	a0,0x2a
    80005980:	68c50513          	addi	a0,a0,1676 # 80030008 <__func__.0+0x318>
    80005984:	708270ef          	jal	8002d08c <printf>
    80005988:	00052797          	auipc	a5,0x52
    8000598c:	6897c783          	lbu	a5,1673(a5) # 80058011 <excpt+0x1>
    80005990:	c789                	beqz	a5,8000599a <virtual_instruction_6+0x98>
    80005992:	6498                	ld	a4,8(s1)
    80005994:	47d9                	li	a5,22
    80005996:	00f70c63          	beq	a4,a5,800059ae <virtual_instruction_6+0xac>
    8000599a:	0002a517          	auipc	a0,0x2a
    8000599e:	67650513          	addi	a0,a0,1654 # 80030010 <__func__.0+0x320>
    800059a2:	6ea270ef          	jal	8002d08c <printf>
    800059a6:	02900513          	li	a0,41
    800059aa:	3d0260ef          	jal	8002bd7a <putchar>
    800059ae:	4529                	li	a0,10
    800059b0:	3ca260ef          	jal	8002bd7a <putchar>
    800059b4:	00052797          	auipc	a5,0x52
    800059b8:	65d7c783          	lbu	a5,1629(a5) # 80058011 <excpt+0x1>
    800059bc:	4401                	li	s0,0
    800059be:	c789                	beqz	a5,800059c8 <virtual_instruction_6+0xc6>
    800059c0:	6480                	ld	s0,8(s1)
    800059c2:	1429                	addi	s0,s0,-22
    800059c4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VU);
    800059c8:	4501                	li	a0,0
    800059ca:	d3efb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800059ce:	c3efb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800059d2:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    800059d6:	08200593          	li	a1,130
    800059da:	0002b617          	auipc	a2,0x2b
    800059de:	58e60613          	addi	a2,a2,1422 # 80030f68 <__func__.0+0x1278>
    800059e2:	0002a517          	auipc	a0,0x2a
    800059e6:	60e50513          	addi	a0,a0,1550 # 8002fff0 <__func__.0+0x300>
    800059ea:	6a2270ef          	jal	8002d08c <printf>
    800059ee:	00052797          	auipc	a5,0x52
    800059f2:	6237c783          	lbu	a5,1571(a5) # 80058011 <excpt+0x1>
    800059f6:	0002a597          	auipc	a1,0x2a
    800059fa:	5d258593          	addi	a1,a1,1490 # 8002ffc8 <__func__.0+0x2d8>
    800059fe:	cf89                	beqz	a5,80005a18 <virtual_instruction_6+0x116>
    80005a00:	6498                	ld	a4,8(s1)
    80005a02:	47d9                	li	a5,22
    80005a04:	0002a597          	auipc	a1,0x2a
    80005a08:	5b458593          	addi	a1,a1,1460 # 8002ffb8 <__func__.0+0x2c8>
    80005a0c:	00f70663          	beq	a4,a5,80005a18 <virtual_instruction_6+0x116>
    80005a10:	0002a597          	auipc	a1,0x2a
    80005a14:	5b858593          	addi	a1,a1,1464 # 8002ffc8 <__func__.0+0x2d8>
    80005a18:	0002a517          	auipc	a0,0x2a
    80005a1c:	5f050513          	addi	a0,a0,1520 # 80030008 <__func__.0+0x318>
    80005a20:	66c270ef          	jal	8002d08c <printf>
    80005a24:	00052797          	auipc	a5,0x52
    80005a28:	5ed7c783          	lbu	a5,1517(a5) # 80058011 <excpt+0x1>
    80005a2c:	c789                	beqz	a5,80005a36 <virtual_instruction_6+0x134>
    80005a2e:	6498                	ld	a4,8(s1)
    80005a30:	47d9                	li	a5,22
    80005a32:	00f70c63          	beq	a4,a5,80005a4a <virtual_instruction_6+0x148>
    80005a36:	0002a517          	auipc	a0,0x2a
    80005a3a:	5da50513          	addi	a0,a0,1498 # 80030010 <__func__.0+0x320>
    80005a3e:	64e270ef          	jal	8002d08c <printf>
    80005a42:	02900513          	li	a0,41
    80005a46:	334260ef          	jal	8002bd7a <putchar>
    80005a4a:	4529                	li	a0,10
    80005a4c:	32e260ef          	jal	8002bd7a <putchar>
    80005a50:	c801                	beqz	s0,80005a60 <virtual_instruction_6+0x15e>
    80005a52:	00052797          	auipc	a5,0x52
    80005a56:	5bf7c783          	lbu	a5,1471(a5) # 80058011 <excpt+0x1>
    80005a5a:	4401                	li	s0,0
    80005a5c:	0c079e63          	bnez	a5,80005b38 <virtual_instruction_6+0x236>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    goto_priv(PRIV_VU);
    80005a60:	4501                	li	a0,0
    80005a62:	ca6fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005a66:	ba6fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005a6a:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005a6e:	08200593          	li	a1,130
    80005a72:	0002b617          	auipc	a2,0x2b
    80005a76:	53660613          	addi	a2,a2,1334 # 80030fa8 <__func__.0+0x12b8>
    80005a7a:	0002a517          	auipc	a0,0x2a
    80005a7e:	57650513          	addi	a0,a0,1398 # 8002fff0 <__func__.0+0x300>
    80005a82:	60a270ef          	jal	8002d08c <printf>
    80005a86:	00052797          	auipc	a5,0x52
    80005a8a:	58b7c783          	lbu	a5,1419(a5) # 80058011 <excpt+0x1>
    80005a8e:	0002a597          	auipc	a1,0x2a
    80005a92:	53a58593          	addi	a1,a1,1338 # 8002ffc8 <__func__.0+0x2d8>
    80005a96:	cf89                	beqz	a5,80005ab0 <virtual_instruction_6+0x1ae>
    80005a98:	6498                	ld	a4,8(s1)
    80005a9a:	47d9                	li	a5,22
    80005a9c:	0002a597          	auipc	a1,0x2a
    80005aa0:	51c58593          	addi	a1,a1,1308 # 8002ffb8 <__func__.0+0x2c8>
    80005aa4:	00f70663          	beq	a4,a5,80005ab0 <virtual_instruction_6+0x1ae>
    80005aa8:	0002a597          	auipc	a1,0x2a
    80005aac:	52058593          	addi	a1,a1,1312 # 8002ffc8 <__func__.0+0x2d8>
    80005ab0:	0002a517          	auipc	a0,0x2a
    80005ab4:	55850513          	addi	a0,a0,1368 # 80030008 <__func__.0+0x318>
    80005ab8:	5d4270ef          	jal	8002d08c <printf>
    80005abc:	00052797          	auipc	a5,0x52
    80005ac0:	5557c783          	lbu	a5,1365(a5) # 80058011 <excpt+0x1>
    80005ac4:	c789                	beqz	a5,80005ace <virtual_instruction_6+0x1cc>
    80005ac6:	6498                	ld	a4,8(s1)
    80005ac8:	47d9                	li	a5,22
    80005aca:	00f70c63          	beq	a4,a5,80005ae2 <virtual_instruction_6+0x1e0>
    80005ace:	0002a517          	auipc	a0,0x2a
    80005ad2:	54250513          	addi	a0,a0,1346 # 80030010 <__func__.0+0x320>
    80005ad6:	5b6270ef          	jal	8002d08c <printf>
    80005ada:	02900513          	li	a0,41
    80005ade:	29c260ef          	jal	8002bd7a <putchar>
    80005ae2:	4529                	li	a0,10
    80005ae4:	296260ef          	jal	8002bd7a <putchar>
    80005ae8:	c015                	beqz	s0,80005b0c <virtual_instruction_6+0x20a>
    80005aea:	00052417          	auipc	s0,0x52
    80005aee:	52744403          	lbu	s0,1319(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005af2:	0002a597          	auipc	a1,0x2a
    80005af6:	4d658593          	addi	a1,a1,1238 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005afa:	cc11                	beqz	s0,80005b16 <virtual_instruction_6+0x214>
    80005afc:	6498                	ld	a4,8(s1)
    80005afe:	47d9                	li	a5,22
    TEST_END();
    80005b00:	0002a597          	auipc	a1,0x2a
    80005b04:	4b858593          	addi	a1,a1,1208 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005b08:	00f70763          	beq	a4,a5,80005b16 <virtual_instruction_6+0x214>
    80005b0c:	4401                	li	s0,0
    TEST_END();
    80005b0e:	0002a597          	auipc	a1,0x2a
    80005b12:	4ba58593          	addi	a1,a1,1210 # 8002ffc8 <__func__.0+0x2d8>
    80005b16:	0002a517          	auipc	a0,0x2a
    80005b1a:	55a50513          	addi	a0,a0,1370 # 80030070 <__func__.0+0x380>
    80005b1e:	56e270ef          	jal	8002d08c <printf>
    80005b22:	4511                	li	a0,4
    80005b24:	be4fb0ef          	jal	80000f08 <goto_priv>
    80005b28:	dabfb0ef          	jal	800018d2 <reset_state>
}
    80005b2c:	60e2                	ld	ra,24(sp)
    80005b2e:	8522                	mv	a0,s0
    80005b30:	6442                	ld	s0,16(sp)
    80005b32:	64a2                	ld	s1,8(sp)
    80005b34:	6105                	addi	sp,sp,32
    80005b36:	8082                	ret
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    80005b38:	6480                	ld	s0,8(s1)
    80005b3a:	1429                	addi	s0,s0,-22
    80005b3c:	00143413          	seqz	s0,s0
    80005b40:	b705                	j	80005a60 <virtual_instruction_6+0x15e>

0000000080005b42 <virtual_instruction_7>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_7() {
    80005b42:	1101                	addi	sp,sp,-32

    TEST_START();
    80005b44:	00028597          	auipc	a1,0x28
    80005b48:	5dc58593          	addi	a1,a1,1500 # 8002e120 <__func__.5>
    80005b4c:	0002a517          	auipc	a0,0x2a
    80005b50:	48c50513          	addi	a0,a0,1164 # 8002ffd8 <__func__.0+0x2e8>
bool virtual_instruction_7() {
    80005b54:	ec06                	sd	ra,24(sp)
    80005b56:	e822                	sd	s0,16(sp)
    80005b58:	e426                	sd	s1,8(sp)
    TEST_START();
    80005b5a:	532270ef          	jal	8002d08c <printf>
    80005b5e:	4529                	li	a0,10
    80005b60:	21a260ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_VU);
    80005b64:	4501                	li	a0,0
    80005b66:	ba2fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005b6a:	aa2fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005b6e:	4781                	li	a5,0
    80005b70:	6007c7f3          	.insn	4, 0x6007c7f3
    uint64_t tmp = hlvb(0);

    TEST_ASSERT("vu hlvb leads to virtual instruction exception",
    80005b74:	08200593          	li	a1,130
    80005b78:	0002b617          	auipc	a2,0x2b
    80005b7c:	48060613          	addi	a2,a2,1152 # 80030ff8 <__func__.0+0x1308>
    80005b80:	0002a517          	auipc	a0,0x2a
    80005b84:	47050513          	addi	a0,a0,1136 # 8002fff0 <__func__.0+0x300>
    80005b88:	504270ef          	jal	8002d08c <printf>
    80005b8c:	00052797          	auipc	a5,0x52
    80005b90:	4857c783          	lbu	a5,1157(a5) # 80058011 <excpt+0x1>
    80005b94:	00052497          	auipc	s1,0x52
    80005b98:	47c48493          	addi	s1,s1,1148 # 80058010 <excpt>
    80005b9c:	0002a597          	auipc	a1,0x2a
    80005ba0:	42c58593          	addi	a1,a1,1068 # 8002ffc8 <__func__.0+0x2d8>
    80005ba4:	cf89                	beqz	a5,80005bbe <virtual_instruction_7+0x7c>
    80005ba6:	6498                	ld	a4,8(s1)
    80005ba8:	47d9                	li	a5,22
    80005baa:	0002a597          	auipc	a1,0x2a
    80005bae:	40e58593          	addi	a1,a1,1038 # 8002ffb8 <__func__.0+0x2c8>
    80005bb2:	00f70663          	beq	a4,a5,80005bbe <virtual_instruction_7+0x7c>
    80005bb6:	0002a597          	auipc	a1,0x2a
    80005bba:	41258593          	addi	a1,a1,1042 # 8002ffc8 <__func__.0+0x2d8>
    80005bbe:	0002a517          	auipc	a0,0x2a
    80005bc2:	44a50513          	addi	a0,a0,1098 # 80030008 <__func__.0+0x318>
    80005bc6:	4c6270ef          	jal	8002d08c <printf>
    80005bca:	00052797          	auipc	a5,0x52
    80005bce:	4477c783          	lbu	a5,1095(a5) # 80058011 <excpt+0x1>
    80005bd2:	c789                	beqz	a5,80005bdc <virtual_instruction_7+0x9a>
    80005bd4:	6498                	ld	a4,8(s1)
    80005bd6:	47d9                	li	a5,22
    80005bd8:	00f70c63          	beq	a4,a5,80005bf0 <virtual_instruction_7+0xae>
    80005bdc:	0002a517          	auipc	a0,0x2a
    80005be0:	43450513          	addi	a0,a0,1076 # 80030010 <__func__.0+0x320>
    80005be4:	4a8270ef          	jal	8002d08c <printf>
    80005be8:	02900513          	li	a0,41
    80005bec:	18e260ef          	jal	8002bd7a <putchar>
    80005bf0:	4529                	li	a0,10
    80005bf2:	188260ef          	jal	8002bd7a <putchar>
    80005bf6:	00052797          	auipc	a5,0x52
    80005bfa:	41b7c783          	lbu	a5,1051(a5) # 80058011 <excpt+0x1>
    80005bfe:	4401                	li	s0,0
    80005c00:	c789                	beqz	a5,80005c0a <virtual_instruction_7+0xc8>
    80005c02:	6480                	ld	s0,8(s1)
    80005c04:	1429                	addi	s0,s0,-22
    80005c06:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005c0a:	4501                	li	a0,0
    80005c0c:	afcfb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005c10:	9fcfb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005c14:	4781                	li	a5,0
    80005c16:	6017c7f3          	.insn	4, 0x6017c7f3
     tmp = hlvbu(0);

    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80005c1a:	08200593          	li	a1,130
    80005c1e:	0002b617          	auipc	a2,0x2b
    80005c22:	40a60613          	addi	a2,a2,1034 # 80031028 <__func__.0+0x1338>
    80005c26:	0002a517          	auipc	a0,0x2a
    80005c2a:	3ca50513          	addi	a0,a0,970 # 8002fff0 <__func__.0+0x300>
    80005c2e:	45e270ef          	jal	8002d08c <printf>
    80005c32:	00052797          	auipc	a5,0x52
    80005c36:	3df7c783          	lbu	a5,991(a5) # 80058011 <excpt+0x1>
    80005c3a:	0002a597          	auipc	a1,0x2a
    80005c3e:	38e58593          	addi	a1,a1,910 # 8002ffc8 <__func__.0+0x2d8>
    80005c42:	cf89                	beqz	a5,80005c5c <virtual_instruction_7+0x11a>
    80005c44:	6498                	ld	a4,8(s1)
    80005c46:	47d9                	li	a5,22
    80005c48:	0002a597          	auipc	a1,0x2a
    80005c4c:	37058593          	addi	a1,a1,880 # 8002ffb8 <__func__.0+0x2c8>
    80005c50:	00f70663          	beq	a4,a5,80005c5c <virtual_instruction_7+0x11a>
    80005c54:	0002a597          	auipc	a1,0x2a
    80005c58:	37458593          	addi	a1,a1,884 # 8002ffc8 <__func__.0+0x2d8>
    80005c5c:	0002a517          	auipc	a0,0x2a
    80005c60:	3ac50513          	addi	a0,a0,940 # 80030008 <__func__.0+0x318>
    80005c64:	428270ef          	jal	8002d08c <printf>
    80005c68:	00052797          	auipc	a5,0x52
    80005c6c:	3a97c783          	lbu	a5,937(a5) # 80058011 <excpt+0x1>
    80005c70:	c789                	beqz	a5,80005c7a <virtual_instruction_7+0x138>
    80005c72:	6498                	ld	a4,8(s1)
    80005c74:	47d9                	li	a5,22
    80005c76:	00f70c63          	beq	a4,a5,80005c8e <virtual_instruction_7+0x14c>
    80005c7a:	0002a517          	auipc	a0,0x2a
    80005c7e:	39650513          	addi	a0,a0,918 # 80030010 <__func__.0+0x320>
    80005c82:	40a270ef          	jal	8002d08c <printf>
    80005c86:	02900513          	li	a0,41
    80005c8a:	0f0260ef          	jal	8002bd7a <putchar>
    80005c8e:	4529                	li	a0,10
    80005c90:	0ea260ef          	jal	8002bd7a <putchar>
    80005c94:	c801                	beqz	s0,80005ca4 <virtual_instruction_7+0x162>
    80005c96:	00052797          	auipc	a5,0x52
    80005c9a:	37b7c783          	lbu	a5,891(a5) # 80058011 <excpt+0x1>
    80005c9e:	4401                	li	s0,0
    80005ca0:	4c079d63          	bnez	a5,8000617a <virtual_instruction_7+0x638>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005ca4:	4501                	li	a0,0
    80005ca6:	a62fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005caa:	962fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005cae:	4781                	li	a5,0
    80005cb0:	6407c7f3          	.insn	4, 0x6407c7f3
     tmp = hlvh(0);

    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80005cb4:	08200593          	li	a1,130
    80005cb8:	0002b617          	auipc	a2,0x2b
    80005cbc:	3a060613          	addi	a2,a2,928 # 80031058 <__func__.0+0x1368>
    80005cc0:	0002a517          	auipc	a0,0x2a
    80005cc4:	33050513          	addi	a0,a0,816 # 8002fff0 <__func__.0+0x300>
    80005cc8:	3c4270ef          	jal	8002d08c <printf>
    80005ccc:	00052797          	auipc	a5,0x52
    80005cd0:	3457c783          	lbu	a5,837(a5) # 80058011 <excpt+0x1>
    80005cd4:	0002a597          	auipc	a1,0x2a
    80005cd8:	2f458593          	addi	a1,a1,756 # 8002ffc8 <__func__.0+0x2d8>
    80005cdc:	cf89                	beqz	a5,80005cf6 <virtual_instruction_7+0x1b4>
    80005cde:	6498                	ld	a4,8(s1)
    80005ce0:	47d9                	li	a5,22
    80005ce2:	0002a597          	auipc	a1,0x2a
    80005ce6:	2d658593          	addi	a1,a1,726 # 8002ffb8 <__func__.0+0x2c8>
    80005cea:	00f70663          	beq	a4,a5,80005cf6 <virtual_instruction_7+0x1b4>
    80005cee:	0002a597          	auipc	a1,0x2a
    80005cf2:	2da58593          	addi	a1,a1,730 # 8002ffc8 <__func__.0+0x2d8>
    80005cf6:	0002a517          	auipc	a0,0x2a
    80005cfa:	31250513          	addi	a0,a0,786 # 80030008 <__func__.0+0x318>
    80005cfe:	38e270ef          	jal	8002d08c <printf>
    80005d02:	00052797          	auipc	a5,0x52
    80005d06:	30f7c783          	lbu	a5,783(a5) # 80058011 <excpt+0x1>
    80005d0a:	c789                	beqz	a5,80005d14 <virtual_instruction_7+0x1d2>
    80005d0c:	6498                	ld	a4,8(s1)
    80005d0e:	47d9                	li	a5,22
    80005d10:	00f70c63          	beq	a4,a5,80005d28 <virtual_instruction_7+0x1e6>
    80005d14:	0002a517          	auipc	a0,0x2a
    80005d18:	2fc50513          	addi	a0,a0,764 # 80030010 <__func__.0+0x320>
    80005d1c:	370270ef          	jal	8002d08c <printf>
    80005d20:	02900513          	li	a0,41
    80005d24:	056260ef          	jal	8002bd7a <putchar>
    80005d28:	4529                	li	a0,10
    80005d2a:	050260ef          	jal	8002bd7a <putchar>
    80005d2e:	c801                	beqz	s0,80005d3e <virtual_instruction_7+0x1fc>
    80005d30:	00052797          	auipc	a5,0x52
    80005d34:	2e17c783          	lbu	a5,737(a5) # 80058011 <excpt+0x1>
    80005d38:	4401                	li	s0,0
    80005d3a:	44079a63          	bnez	a5,8000618e <virtual_instruction_7+0x64c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005d3e:	4501                	li	a0,0
    80005d40:	9c8fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005d44:	8c8fb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005d48:	4781                	li	a5,0
    80005d4a:	6807c7f3          	.insn	4, 0x6807c7f3
     tmp = hlvw(0);

    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005d4e:	08200593          	li	a1,130
    80005d52:	0002b617          	auipc	a2,0x2b
    80005d56:	33660613          	addi	a2,a2,822 # 80031088 <__func__.0+0x1398>
    80005d5a:	0002a517          	auipc	a0,0x2a
    80005d5e:	29650513          	addi	a0,a0,662 # 8002fff0 <__func__.0+0x300>
    80005d62:	32a270ef          	jal	8002d08c <printf>
    80005d66:	00052797          	auipc	a5,0x52
    80005d6a:	2ab7c783          	lbu	a5,683(a5) # 80058011 <excpt+0x1>
    80005d6e:	0002a597          	auipc	a1,0x2a
    80005d72:	25a58593          	addi	a1,a1,602 # 8002ffc8 <__func__.0+0x2d8>
    80005d76:	cf89                	beqz	a5,80005d90 <virtual_instruction_7+0x24e>
    80005d78:	6498                	ld	a4,8(s1)
    80005d7a:	47d9                	li	a5,22
    80005d7c:	0002a597          	auipc	a1,0x2a
    80005d80:	23c58593          	addi	a1,a1,572 # 8002ffb8 <__func__.0+0x2c8>
    80005d84:	00f70663          	beq	a4,a5,80005d90 <virtual_instruction_7+0x24e>
    80005d88:	0002a597          	auipc	a1,0x2a
    80005d8c:	24058593          	addi	a1,a1,576 # 8002ffc8 <__func__.0+0x2d8>
    80005d90:	0002a517          	auipc	a0,0x2a
    80005d94:	27850513          	addi	a0,a0,632 # 80030008 <__func__.0+0x318>
    80005d98:	2f4270ef          	jal	8002d08c <printf>
    80005d9c:	00052797          	auipc	a5,0x52
    80005da0:	2757c783          	lbu	a5,629(a5) # 80058011 <excpt+0x1>
    80005da4:	c789                	beqz	a5,80005dae <virtual_instruction_7+0x26c>
    80005da6:	6498                	ld	a4,8(s1)
    80005da8:	47d9                	li	a5,22
    80005daa:	00f70c63          	beq	a4,a5,80005dc2 <virtual_instruction_7+0x280>
    80005dae:	0002a517          	auipc	a0,0x2a
    80005db2:	26250513          	addi	a0,a0,610 # 80030010 <__func__.0+0x320>
    80005db6:	2d6270ef          	jal	8002d08c <printf>
    80005dba:	02900513          	li	a0,41
    80005dbe:	7bd250ef          	jal	8002bd7a <putchar>
    80005dc2:	4529                	li	a0,10
    80005dc4:	7b7250ef          	jal	8002bd7a <putchar>
    80005dc8:	c801                	beqz	s0,80005dd8 <virtual_instruction_7+0x296>
    80005dca:	00052797          	auipc	a5,0x52
    80005dce:	2477c783          	lbu	a5,583(a5) # 80058011 <excpt+0x1>
    80005dd2:	4401                	li	s0,0
    80005dd4:	3a079863          	bnez	a5,80006184 <virtual_instruction_7+0x642>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005dd8:	4501                	li	a0,0
    80005dda:	92efb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005dde:	82efb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005de2:	4781                	li	a5,0
    80005de4:	6c07c7f3          	.insn	4, 0x6c07c7f3
     tmp = hlvd(0);

    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80005de8:	08200593          	li	a1,130
    80005dec:	0002b617          	auipc	a2,0x2b
    80005df0:	2cc60613          	addi	a2,a2,716 # 800310b8 <__func__.0+0x13c8>
    80005df4:	0002a517          	auipc	a0,0x2a
    80005df8:	1fc50513          	addi	a0,a0,508 # 8002fff0 <__func__.0+0x300>
    80005dfc:	290270ef          	jal	8002d08c <printf>
    80005e00:	00052797          	auipc	a5,0x52
    80005e04:	2117c783          	lbu	a5,529(a5) # 80058011 <excpt+0x1>
    80005e08:	0002a597          	auipc	a1,0x2a
    80005e0c:	1c058593          	addi	a1,a1,448 # 8002ffc8 <__func__.0+0x2d8>
    80005e10:	cf89                	beqz	a5,80005e2a <virtual_instruction_7+0x2e8>
    80005e12:	6498                	ld	a4,8(s1)
    80005e14:	47d9                	li	a5,22
    80005e16:	0002a597          	auipc	a1,0x2a
    80005e1a:	1a258593          	addi	a1,a1,418 # 8002ffb8 <__func__.0+0x2c8>
    80005e1e:	00f70663          	beq	a4,a5,80005e2a <virtual_instruction_7+0x2e8>
    80005e22:	0002a597          	auipc	a1,0x2a
    80005e26:	1a658593          	addi	a1,a1,422 # 8002ffc8 <__func__.0+0x2d8>
    80005e2a:	0002a517          	auipc	a0,0x2a
    80005e2e:	1de50513          	addi	a0,a0,478 # 80030008 <__func__.0+0x318>
    80005e32:	25a270ef          	jal	8002d08c <printf>
    80005e36:	00052797          	auipc	a5,0x52
    80005e3a:	1db7c783          	lbu	a5,475(a5) # 80058011 <excpt+0x1>
    80005e3e:	c789                	beqz	a5,80005e48 <virtual_instruction_7+0x306>
    80005e40:	6498                	ld	a4,8(s1)
    80005e42:	47d9                	li	a5,22
    80005e44:	00f70c63          	beq	a4,a5,80005e5c <virtual_instruction_7+0x31a>
    80005e48:	0002a517          	auipc	a0,0x2a
    80005e4c:	1c850513          	addi	a0,a0,456 # 80030010 <__func__.0+0x320>
    80005e50:	23c270ef          	jal	8002d08c <printf>
    80005e54:	02900513          	li	a0,41
    80005e58:	723250ef          	jal	8002bd7a <putchar>
    80005e5c:	4529                	li	a0,10
    80005e5e:	71d250ef          	jal	8002bd7a <putchar>
    80005e62:	c801                	beqz	s0,80005e72 <virtual_instruction_7+0x330>
    80005e64:	00052797          	auipc	a5,0x52
    80005e68:	1ad7c783          	lbu	a5,429(a5) # 80058011 <excpt+0x1>
    80005e6c:	4401                	li	s0,0
    80005e6e:	32079a63          	bnez	a5,800061a2 <virtual_instruction_7+0x660>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005e72:	4501                	li	a0,0
    80005e74:	894fb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005e78:	f95fa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005e7c:	37ab77b7          	lui	a5,0x37ab7
    80005e80:	078a                	slli	a5,a5,0x2
    80005e82:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005e86:	4701                	li	a4,0
    80005e88:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005e8c:	648c                	ld	a1,8(s1)
    80005e8e:	0002b517          	auipc	a0,0x2b
    80005e92:	cc250513          	addi	a0,a0,-830 # 80030b50 <__func__.0+0xe60>
    80005e96:	1f6270ef          	jal	8002d08c <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005e9a:	08200593          	li	a1,130
    80005e9e:	0002b617          	auipc	a2,0x2b
    80005ea2:	24a60613          	addi	a2,a2,586 # 800310e8 <__func__.0+0x13f8>
    80005ea6:	0002a517          	auipc	a0,0x2a
    80005eaa:	14a50513          	addi	a0,a0,330 # 8002fff0 <__func__.0+0x300>
    80005eae:	1de270ef          	jal	8002d08c <printf>
    80005eb2:	00052797          	auipc	a5,0x52
    80005eb6:	15f7c783          	lbu	a5,351(a5) # 80058011 <excpt+0x1>
    80005eba:	0002a597          	auipc	a1,0x2a
    80005ebe:	10e58593          	addi	a1,a1,270 # 8002ffc8 <__func__.0+0x2d8>
    80005ec2:	cf89                	beqz	a5,80005edc <virtual_instruction_7+0x39a>
    80005ec4:	6498                	ld	a4,8(s1)
    80005ec6:	47d9                	li	a5,22
    80005ec8:	0002a597          	auipc	a1,0x2a
    80005ecc:	0f058593          	addi	a1,a1,240 # 8002ffb8 <__func__.0+0x2c8>
    80005ed0:	00f70663          	beq	a4,a5,80005edc <virtual_instruction_7+0x39a>
    80005ed4:	0002a597          	auipc	a1,0x2a
    80005ed8:	0f458593          	addi	a1,a1,244 # 8002ffc8 <__func__.0+0x2d8>
    80005edc:	0002a517          	auipc	a0,0x2a
    80005ee0:	12c50513          	addi	a0,a0,300 # 80030008 <__func__.0+0x318>
    80005ee4:	1a8270ef          	jal	8002d08c <printf>
    80005ee8:	00052797          	auipc	a5,0x52
    80005eec:	1297c783          	lbu	a5,297(a5) # 80058011 <excpt+0x1>
    80005ef0:	c789                	beqz	a5,80005efa <virtual_instruction_7+0x3b8>
    80005ef2:	6498                	ld	a4,8(s1)
    80005ef4:	47d9                	li	a5,22
    80005ef6:	00f70c63          	beq	a4,a5,80005f0e <virtual_instruction_7+0x3cc>
    80005efa:	0002a517          	auipc	a0,0x2a
    80005efe:	11650513          	addi	a0,a0,278 # 80030010 <__func__.0+0x320>
    80005f02:	18a270ef          	jal	8002d08c <printf>
    80005f06:	02900513          	li	a0,41
    80005f0a:	671250ef          	jal	8002bd7a <putchar>
    80005f0e:	4529                	li	a0,10
    80005f10:	66b250ef          	jal	8002bd7a <putchar>
    80005f14:	c801                	beqz	s0,80005f24 <virtual_instruction_7+0x3e2>
    80005f16:	00052797          	auipc	a5,0x52
    80005f1a:	0fb7c783          	lbu	a5,251(a5) # 80058011 <excpt+0x1>
    80005f1e:	4401                	li	s0,0
    80005f20:	26079c63          	bnez	a5,80006198 <virtual_instruction_7+0x656>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005f24:	4501                	li	a0,0
    80005f26:	fe3fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005f2a:	ee3fa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005f2e:	37ab77b7          	lui	a5,0x37ab7
    80005f32:	078a                	slli	a5,a5,0x2
    80005f34:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005f38:	4701                	li	a4,0
    80005f3a:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005f3e:	648c                	ld	a1,8(s1)
    80005f40:	0002b517          	auipc	a0,0x2b
    80005f44:	c1050513          	addi	a0,a0,-1008 # 80030b50 <__func__.0+0xe60>
    80005f48:	144270ef          	jal	8002d08c <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005f4c:	08200593          	li	a1,130
    80005f50:	0002b617          	auipc	a2,0x2b
    80005f54:	19860613          	addi	a2,a2,408 # 800310e8 <__func__.0+0x13f8>
    80005f58:	0002a517          	auipc	a0,0x2a
    80005f5c:	09850513          	addi	a0,a0,152 # 8002fff0 <__func__.0+0x300>
    80005f60:	12c270ef          	jal	8002d08c <printf>
    80005f64:	00052797          	auipc	a5,0x52
    80005f68:	0ad7c783          	lbu	a5,173(a5) # 80058011 <excpt+0x1>
    80005f6c:	0002a597          	auipc	a1,0x2a
    80005f70:	05c58593          	addi	a1,a1,92 # 8002ffc8 <__func__.0+0x2d8>
    80005f74:	cf89                	beqz	a5,80005f8e <virtual_instruction_7+0x44c>
    80005f76:	6498                	ld	a4,8(s1)
    80005f78:	47d9                	li	a5,22
    80005f7a:	0002a597          	auipc	a1,0x2a
    80005f7e:	03e58593          	addi	a1,a1,62 # 8002ffb8 <__func__.0+0x2c8>
    80005f82:	00f70663          	beq	a4,a5,80005f8e <virtual_instruction_7+0x44c>
    80005f86:	0002a597          	auipc	a1,0x2a
    80005f8a:	04258593          	addi	a1,a1,66 # 8002ffc8 <__func__.0+0x2d8>
    80005f8e:	0002a517          	auipc	a0,0x2a
    80005f92:	07a50513          	addi	a0,a0,122 # 80030008 <__func__.0+0x318>
    80005f96:	0f6270ef          	jal	8002d08c <printf>
    80005f9a:	00052797          	auipc	a5,0x52
    80005f9e:	0777c783          	lbu	a5,119(a5) # 80058011 <excpt+0x1>
    80005fa2:	c789                	beqz	a5,80005fac <virtual_instruction_7+0x46a>
    80005fa4:	6498                	ld	a4,8(s1)
    80005fa6:	47d9                	li	a5,22
    80005fa8:	00f70c63          	beq	a4,a5,80005fc0 <virtual_instruction_7+0x47e>
    80005fac:	0002a517          	auipc	a0,0x2a
    80005fb0:	06450513          	addi	a0,a0,100 # 80030010 <__func__.0+0x320>
    80005fb4:	0d8270ef          	jal	8002d08c <printf>
    80005fb8:	02900513          	li	a0,41
    80005fbc:	5bf250ef          	jal	8002bd7a <putchar>
    80005fc0:	4529                	li	a0,10
    80005fc2:	5b9250ef          	jal	8002bd7a <putchar>
    80005fc6:	c801                	beqz	s0,80005fd6 <virtual_instruction_7+0x494>
    80005fc8:	00052797          	auipc	a5,0x52
    80005fcc:	0497c783          	lbu	a5,73(a5) # 80058011 <excpt+0x1>
    80005fd0:	4401                	li	s0,0
    80005fd2:	1e079263          	bnez	a5,800061b6 <virtual_instruction_7+0x674>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005fd6:	4501                	li	a0,0
    80005fd8:	f31fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005fdc:	e31fa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80005fe0:	37ab77b7          	lui	a5,0x37ab7
    80005fe4:	078a                	slli	a5,a5,0x2
    80005fe6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005fea:	4701                	li	a4,0
    80005fec:	6af74073          	.insn	4, 0x6af74073
    hsvw(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005ff0:	648c                	ld	a1,8(s1)
    80005ff2:	0002b517          	auipc	a0,0x2b
    80005ff6:	b5e50513          	addi	a0,a0,-1186 # 80030b50 <__func__.0+0xe60>
    80005ffa:	092270ef          	jal	8002d08c <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005ffe:	08200593          	li	a1,130
    80006002:	0002b617          	auipc	a2,0x2b
    80006006:	0e660613          	addi	a2,a2,230 # 800310e8 <__func__.0+0x13f8>
    8000600a:	0002a517          	auipc	a0,0x2a
    8000600e:	fe650513          	addi	a0,a0,-26 # 8002fff0 <__func__.0+0x300>
    80006012:	07a270ef          	jal	8002d08c <printf>
    80006016:	00052797          	auipc	a5,0x52
    8000601a:	ffb7c783          	lbu	a5,-5(a5) # 80058011 <excpt+0x1>
    8000601e:	0002a597          	auipc	a1,0x2a
    80006022:	faa58593          	addi	a1,a1,-86 # 8002ffc8 <__func__.0+0x2d8>
    80006026:	cf89                	beqz	a5,80006040 <virtual_instruction_7+0x4fe>
    80006028:	6498                	ld	a4,8(s1)
    8000602a:	47d9                	li	a5,22
    8000602c:	0002a597          	auipc	a1,0x2a
    80006030:	f8c58593          	addi	a1,a1,-116 # 8002ffb8 <__func__.0+0x2c8>
    80006034:	00f70663          	beq	a4,a5,80006040 <virtual_instruction_7+0x4fe>
    80006038:	0002a597          	auipc	a1,0x2a
    8000603c:	f9058593          	addi	a1,a1,-112 # 8002ffc8 <__func__.0+0x2d8>
    80006040:	0002a517          	auipc	a0,0x2a
    80006044:	fc850513          	addi	a0,a0,-56 # 80030008 <__func__.0+0x318>
    80006048:	044270ef          	jal	8002d08c <printf>
    8000604c:	00052797          	auipc	a5,0x52
    80006050:	fc57c783          	lbu	a5,-59(a5) # 80058011 <excpt+0x1>
    80006054:	c789                	beqz	a5,8000605e <virtual_instruction_7+0x51c>
    80006056:	6498                	ld	a4,8(s1)
    80006058:	47d9                	li	a5,22
    8000605a:	00f70c63          	beq	a4,a5,80006072 <virtual_instruction_7+0x530>
    8000605e:	0002a517          	auipc	a0,0x2a
    80006062:	fb250513          	addi	a0,a0,-78 # 80030010 <__func__.0+0x320>
    80006066:	026270ef          	jal	8002d08c <printf>
    8000606a:	02900513          	li	a0,41
    8000606e:	50d250ef          	jal	8002bd7a <putchar>
    80006072:	4529                	li	a0,10
    80006074:	507250ef          	jal	8002bd7a <putchar>
    80006078:	c801                	beqz	s0,80006088 <virtual_instruction_7+0x546>
    8000607a:	00052797          	auipc	a5,0x52
    8000607e:	f977c783          	lbu	a5,-105(a5) # 80058011 <excpt+0x1>
    80006082:	4401                	li	s0,0
    80006084:	12079463          	bnez	a5,800061ac <virtual_instruction_7+0x66a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80006088:	4501                	li	a0,0
    8000608a:	e7ffa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000608e:	d7ffa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80006092:	37ab77b7          	lui	a5,0x37ab7
    80006096:	078a                	slli	a5,a5,0x2
    80006098:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000609c:	4701                	li	a4,0
    8000609e:	66f74073          	.insn	4, 0x66f74073
    hsvh(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    800060a2:	648c                	ld	a1,8(s1)
    800060a4:	0002b517          	auipc	a0,0x2b
    800060a8:	aac50513          	addi	a0,a0,-1364 # 80030b50 <__func__.0+0xe60>
    800060ac:	7e1260ef          	jal	8002d08c <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800060b0:	08200593          	li	a1,130
    800060b4:	0002b617          	auipc	a2,0x2b
    800060b8:	03460613          	addi	a2,a2,52 # 800310e8 <__func__.0+0x13f8>
    800060bc:	0002a517          	auipc	a0,0x2a
    800060c0:	f3450513          	addi	a0,a0,-204 # 8002fff0 <__func__.0+0x300>
    800060c4:	7c9260ef          	jal	8002d08c <printf>
    800060c8:	00052797          	auipc	a5,0x52
    800060cc:	f497c783          	lbu	a5,-183(a5) # 80058011 <excpt+0x1>
    800060d0:	0002a597          	auipc	a1,0x2a
    800060d4:	ef858593          	addi	a1,a1,-264 # 8002ffc8 <__func__.0+0x2d8>
    800060d8:	cf89                	beqz	a5,800060f2 <virtual_instruction_7+0x5b0>
    800060da:	6498                	ld	a4,8(s1)
    800060dc:	47d9                	li	a5,22
    800060de:	0002a597          	auipc	a1,0x2a
    800060e2:	eda58593          	addi	a1,a1,-294 # 8002ffb8 <__func__.0+0x2c8>
    800060e6:	00f70663          	beq	a4,a5,800060f2 <virtual_instruction_7+0x5b0>
    800060ea:	0002a597          	auipc	a1,0x2a
    800060ee:	ede58593          	addi	a1,a1,-290 # 8002ffc8 <__func__.0+0x2d8>
    800060f2:	0002a517          	auipc	a0,0x2a
    800060f6:	f1650513          	addi	a0,a0,-234 # 80030008 <__func__.0+0x318>
    800060fa:	793260ef          	jal	8002d08c <printf>
    800060fe:	00052797          	auipc	a5,0x52
    80006102:	f137c783          	lbu	a5,-237(a5) # 80058011 <excpt+0x1>
    80006106:	c789                	beqz	a5,80006110 <virtual_instruction_7+0x5ce>
    80006108:	6498                	ld	a4,8(s1)
    8000610a:	47d9                	li	a5,22
    8000610c:	00f70c63          	beq	a4,a5,80006124 <virtual_instruction_7+0x5e2>
    80006110:	0002a517          	auipc	a0,0x2a
    80006114:	f0050513          	addi	a0,a0,-256 # 80030010 <__func__.0+0x320>
    80006118:	775260ef          	jal	8002d08c <printf>
    8000611c:	02900513          	li	a0,41
    80006120:	45b250ef          	jal	8002bd7a <putchar>
    80006124:	4529                	li	a0,10
    80006126:	455250ef          	jal	8002bd7a <putchar>
    8000612a:	c015                	beqz	s0,8000614e <virtual_instruction_7+0x60c>
    8000612c:	00052417          	auipc	s0,0x52
    80006130:	ee544403          	lbu	s0,-283(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    80006134:	0002a597          	auipc	a1,0x2a
    80006138:	e9458593          	addi	a1,a1,-364 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000613c:	cc11                	beqz	s0,80006158 <virtual_instruction_7+0x616>
    8000613e:	6498                	ld	a4,8(s1)
    80006140:	47d9                	li	a5,22
    TEST_END();
    80006142:	0002a597          	auipc	a1,0x2a
    80006146:	e7658593          	addi	a1,a1,-394 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000614a:	00f70763          	beq	a4,a5,80006158 <virtual_instruction_7+0x616>
    8000614e:	4401                	li	s0,0
    TEST_END();
    80006150:	0002a597          	auipc	a1,0x2a
    80006154:	e7858593          	addi	a1,a1,-392 # 8002ffc8 <__func__.0+0x2d8>
    80006158:	0002a517          	auipc	a0,0x2a
    8000615c:	f1850513          	addi	a0,a0,-232 # 80030070 <__func__.0+0x380>
    80006160:	72d260ef          	jal	8002d08c <printf>
    80006164:	4511                	li	a0,4
    80006166:	da3fa0ef          	jal	80000f08 <goto_priv>
    8000616a:	f68fb0ef          	jal	800018d2 <reset_state>
}
    8000616e:	60e2                	ld	ra,24(sp)
    80006170:	8522                	mv	a0,s0
    80006172:	6442                	ld	s0,16(sp)
    80006174:	64a2                	ld	s1,8(sp)
    80006176:	6105                	addi	sp,sp,32
    80006178:	8082                	ret
    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    8000617a:	6480                	ld	s0,8(s1)
    8000617c:	1429                	addi	s0,s0,-22
    8000617e:	00143413          	seqz	s0,s0
    80006182:	b60d                	j	80005ca4 <virtual_instruction_7+0x162>
    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80006184:	6480                	ld	s0,8(s1)
    80006186:	1429                	addi	s0,s0,-22
    80006188:	00143413          	seqz	s0,s0
    8000618c:	b1b1                	j	80005dd8 <virtual_instruction_7+0x296>
    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    8000618e:	6480                	ld	s0,8(s1)
    80006190:	1429                	addi	s0,s0,-22
    80006192:	00143413          	seqz	s0,s0
    80006196:	b665                	j	80005d3e <virtual_instruction_7+0x1fc>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006198:	6480                	ld	s0,8(s1)
    8000619a:	1429                	addi	s0,s0,-22
    8000619c:	00143413          	seqz	s0,s0
    800061a0:	b351                	j	80005f24 <virtual_instruction_7+0x3e2>
    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    800061a2:	6480                	ld	s0,8(s1)
    800061a4:	1429                	addi	s0,s0,-22
    800061a6:	00143413          	seqz	s0,s0
    800061aa:	b1e1                	j	80005e72 <virtual_instruction_7+0x330>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800061ac:	6480                	ld	s0,8(s1)
    800061ae:	1429                	addi	s0,s0,-22
    800061b0:	00143413          	seqz	s0,s0
    800061b4:	bdd1                	j	80006088 <virtual_instruction_7+0x546>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800061b6:	6480                	ld	s0,8(s1)
    800061b8:	1429                	addi	s0,s0,-22
    800061ba:	00143413          	seqz	s0,s0
    800061be:	bd21                	j	80005fd6 <virtual_instruction_7+0x494>

00000000800061c0 <virtual_instruction_8>:

    ////////////////////////////////////////////////////////////////////////
//在mstatus.TW=0  时执行WFI   (即使允许执行WFI指令),或者执行S级监管级指令 (SRET或者SFENCE)   , 引发虚拟异常(在虚拟用户模式下，软件不应该 由执行这些监管模式指令的权限)
bool virtual_instruction_8() {
    800061c0:	1101                	addi	sp,sp,-32

    TEST_START();
    800061c2:	00028597          	auipc	a1,0x28
    800061c6:	f7658593          	addi	a1,a1,-138 # 8002e138 <__func__.4>
    800061ca:	0002a517          	auipc	a0,0x2a
    800061ce:	e0e50513          	addi	a0,a0,-498 # 8002ffd8 <__func__.0+0x2e8>
bool virtual_instruction_8() {
    800061d2:	ec06                	sd	ra,24(sp)
    800061d4:	e822                	sd	s0,16(sp)
    800061d6:	e426                	sd	s1,8(sp)
    TEST_START();
    800061d8:	6b5260ef          	jal	8002d08c <printf>
    800061dc:	4529                	li	a0,10
    800061de:	39d250ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    800061e2:	4511                	li	a0,4
    800061e4:	d25fa0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    800061e8:	004007b7          	lui	a5,0x400
    800061ec:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    800061f0:	002007b7          	lui	a5,0x200
    800061f4:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    800061f8:	4501                	li	a0,0
    800061fa:	d0ffa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800061fe:	c0ffa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80006202:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80006206:	08200593          	li	a1,130
    8000620a:	0002b617          	auipc	a2,0x2b
    8000620e:	f0e60613          	addi	a2,a2,-242 # 80031118 <__func__.0+0x1428>
    80006212:	0002a517          	auipc	a0,0x2a
    80006216:	dde50513          	addi	a0,a0,-546 # 8002fff0 <__func__.0+0x300>
    8000621a:	673260ef          	jal	8002d08c <printf>
    8000621e:	00052797          	auipc	a5,0x52
    80006222:	df37c783          	lbu	a5,-525(a5) # 80058011 <excpt+0x1>
    80006226:	00052497          	auipc	s1,0x52
    8000622a:	dea48493          	addi	s1,s1,-534 # 80058010 <excpt>
    8000622e:	0002a597          	auipc	a1,0x2a
    80006232:	d9a58593          	addi	a1,a1,-614 # 8002ffc8 <__func__.0+0x2d8>
    80006236:	cf89                	beqz	a5,80006250 <virtual_instruction_8+0x90>
    80006238:	6498                	ld	a4,8(s1)
    8000623a:	47d9                	li	a5,22
    8000623c:	0002a597          	auipc	a1,0x2a
    80006240:	d7c58593          	addi	a1,a1,-644 # 8002ffb8 <__func__.0+0x2c8>
    80006244:	00f70663          	beq	a4,a5,80006250 <virtual_instruction_8+0x90>
    80006248:	0002a597          	auipc	a1,0x2a
    8000624c:	d8058593          	addi	a1,a1,-640 # 8002ffc8 <__func__.0+0x2d8>
    80006250:	0002a517          	auipc	a0,0x2a
    80006254:	db850513          	addi	a0,a0,-584 # 80030008 <__func__.0+0x318>
    80006258:	635260ef          	jal	8002d08c <printf>
    8000625c:	00052797          	auipc	a5,0x52
    80006260:	db57c783          	lbu	a5,-587(a5) # 80058011 <excpt+0x1>
    80006264:	c789                	beqz	a5,8000626e <virtual_instruction_8+0xae>
    80006266:	6498                	ld	a4,8(s1)
    80006268:	47d9                	li	a5,22
    8000626a:	00f70c63          	beq	a4,a5,80006282 <virtual_instruction_8+0xc2>
    8000626e:	0002a517          	auipc	a0,0x2a
    80006272:	da250513          	addi	a0,a0,-606 # 80030010 <__func__.0+0x320>
    80006276:	617260ef          	jal	8002d08c <printf>
    8000627a:	02900513          	li	a0,41
    8000627e:	2fd250ef          	jal	8002bd7a <putchar>
    80006282:	4529                	li	a0,10
    80006284:	2f7250ef          	jal	8002bd7a <putchar>
    80006288:	00052417          	auipc	s0,0x52
    8000628c:	d8944403          	lbu	s0,-631(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
 
    TEST_END();
    80006290:	0002a597          	auipc	a1,0x2a
    80006294:	d3858593          	addi	a1,a1,-712 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80006298:	cc11                	beqz	s0,800062b4 <virtual_instruction_8+0xf4>
    8000629a:	6498                	ld	a4,8(s1)
    8000629c:	47d9                	li	a5,22
    TEST_END();
    8000629e:	0002a597          	auipc	a1,0x2a
    800062a2:	d1a58593          	addi	a1,a1,-742 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    800062a6:	00f70763          	beq	a4,a5,800062b4 <virtual_instruction_8+0xf4>
    800062aa:	4401                	li	s0,0
    TEST_END();
    800062ac:	0002a597          	auipc	a1,0x2a
    800062b0:	d1c58593          	addi	a1,a1,-740 # 8002ffc8 <__func__.0+0x2d8>
    800062b4:	0002a517          	auipc	a0,0x2a
    800062b8:	dbc50513          	addi	a0,a0,-580 # 80030070 <__func__.0+0x380>
    800062bc:	5d1260ef          	jal	8002d08c <printf>
    800062c0:	4511                	li	a0,4
    800062c2:	c47fa0ef          	jal	80000f08 <goto_priv>
    800062c6:	e0cfb0ef          	jal	800018d2 <reset_state>
}
    800062ca:	60e2                	ld	ra,24(sp)
    800062cc:	8522                	mv	a0,s0
    800062ce:	6442                	ld	s0,16(sp)
    800062d0:	64a2                	ld	s1,8(sp)
    800062d2:	6105                	addi	sp,sp,32
    800062d4:	8082                	ret

00000000800062d6 <virtual_instruction_9>:
bool virtual_instruction_9() {
    800062d6:	1101                	addi	sp,sp,-32

    TEST_START();
    800062d8:	00028597          	auipc	a1,0x28
    800062dc:	e7858593          	addi	a1,a1,-392 # 8002e150 <__func__.3>
    800062e0:	0002a517          	auipc	a0,0x2a
    800062e4:	cf850513          	addi	a0,a0,-776 # 8002ffd8 <__func__.0+0x2e8>
bool virtual_instruction_9() {
    800062e8:	ec06                	sd	ra,24(sp)
    800062ea:	e822                	sd	s0,16(sp)
    800062ec:	e426                	sd	s1,8(sp)
    TEST_START();
    800062ee:	59f260ef          	jal	8002d08c <printf>
    800062f2:	4529                	li	a0,10
    800062f4:	287250ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    800062f8:	4511                	li	a0,4
    800062fa:	c0ffa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800062fe:	002007b7          	lui	a5,0x200
    80006302:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    80006306:	4501                	li	a0,0
    80006308:	c01fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000630c:	b01fa0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile ("sfence.vma \n\t");
    80006310:	12000073          	sfence.vma
    sfence();
    
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80006314:	08200593          	li	a1,130
    80006318:	0002b617          	auipc	a2,0x2b
    8000631c:	e4860613          	addi	a2,a2,-440 # 80031160 <__func__.0+0x1470>
    80006320:	0002a517          	auipc	a0,0x2a
    80006324:	cd050513          	addi	a0,a0,-816 # 8002fff0 <__func__.0+0x300>
    80006328:	565260ef          	jal	8002d08c <printf>
    8000632c:	00052797          	auipc	a5,0x52
    80006330:	ce57c783          	lbu	a5,-795(a5) # 80058011 <excpt+0x1>
    80006334:	00052497          	auipc	s1,0x52
    80006338:	cdc48493          	addi	s1,s1,-804 # 80058010 <excpt>
    8000633c:	0002a597          	auipc	a1,0x2a
    80006340:	c8c58593          	addi	a1,a1,-884 # 8002ffc8 <__func__.0+0x2d8>
    80006344:	cf89                	beqz	a5,8000635e <virtual_instruction_9+0x88>
    80006346:	6498                	ld	a4,8(s1)
    80006348:	47d9                	li	a5,22
    8000634a:	0002a597          	auipc	a1,0x2a
    8000634e:	c6e58593          	addi	a1,a1,-914 # 8002ffb8 <__func__.0+0x2c8>
    80006352:	00f70663          	beq	a4,a5,8000635e <virtual_instruction_9+0x88>
    80006356:	0002a597          	auipc	a1,0x2a
    8000635a:	c7258593          	addi	a1,a1,-910 # 8002ffc8 <__func__.0+0x2d8>
    8000635e:	0002a517          	auipc	a0,0x2a
    80006362:	caa50513          	addi	a0,a0,-854 # 80030008 <__func__.0+0x318>
    80006366:	527260ef          	jal	8002d08c <printf>
    8000636a:	00052797          	auipc	a5,0x52
    8000636e:	ca77c783          	lbu	a5,-857(a5) # 80058011 <excpt+0x1>
    80006372:	c789                	beqz	a5,8000637c <virtual_instruction_9+0xa6>
    80006374:	6498                	ld	a4,8(s1)
    80006376:	47d9                	li	a5,22
    80006378:	00f70c63          	beq	a4,a5,80006390 <virtual_instruction_9+0xba>
    8000637c:	0002a517          	auipc	a0,0x2a
    80006380:	c9450513          	addi	a0,a0,-876 # 80030010 <__func__.0+0x320>
    80006384:	509260ef          	jal	8002d08c <printf>
    80006388:	02900513          	li	a0,41
    8000638c:	1ef250ef          	jal	8002bd7a <putchar>
    80006390:	4529                	li	a0,10
    80006392:	1e9250ef          	jal	8002bd7a <putchar>
    80006396:	00052417          	auipc	s0,0x52
    8000639a:	c7b44403          	lbu	s0,-901(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    8000639e:	0002a597          	auipc	a1,0x2a
    800063a2:	c2a58593          	addi	a1,a1,-982 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    800063a6:	cc11                	beqz	s0,800063c2 <virtual_instruction_9+0xec>
    800063a8:	6498                	ld	a4,8(s1)
    800063aa:	47d9                	li	a5,22
    TEST_END();
    800063ac:	0002a597          	auipc	a1,0x2a
    800063b0:	c0c58593          	addi	a1,a1,-1012 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    800063b4:	00f70763          	beq	a4,a5,800063c2 <virtual_instruction_9+0xec>
    800063b8:	4401                	li	s0,0
    TEST_END();
    800063ba:	0002a597          	auipc	a1,0x2a
    800063be:	c0e58593          	addi	a1,a1,-1010 # 8002ffc8 <__func__.0+0x2d8>
    800063c2:	0002a517          	auipc	a0,0x2a
    800063c6:	cae50513          	addi	a0,a0,-850 # 80030070 <__func__.0+0x380>
    800063ca:	4c3260ef          	jal	8002d08c <printf>
    800063ce:	4511                	li	a0,4
    800063d0:	b39fa0ef          	jal	80000f08 <goto_priv>
    800063d4:	cfefb0ef          	jal	800018d2 <reset_state>
}
    800063d8:	60e2                	ld	ra,24(sp)
    800063da:	8522                	mv	a0,s0
    800063dc:	6442                	ld	s0,16(sp)
    800063de:	64a2                	ld	s1,8(sp)
    800063e0:	6105                	addi	sp,sp,32
    800063e2:	8082                	ret

00000000800063e4 <virtual_instruction_10>:
bool virtual_instruction_10() {
    800063e4:	1101                	addi	sp,sp,-32

    TEST_START();
    800063e6:	00028597          	auipc	a1,0x28
    800063ea:	d8258593          	addi	a1,a1,-638 # 8002e168 <__func__.2>
    800063ee:	0002a517          	auipc	a0,0x2a
    800063f2:	bea50513          	addi	a0,a0,-1046 # 8002ffd8 <__func__.0+0x2e8>
bool virtual_instruction_10() {
    800063f6:	ec06                	sd	ra,24(sp)
    800063f8:	e822                	sd	s0,16(sp)
    800063fa:	e426                	sd	s1,8(sp)
    TEST_START();
    800063fc:	491260ef          	jal	8002d08c <printf>
    80006400:	4529                	li	a0,10
    80006402:	179250ef          	jal	8002bd7a <putchar>


    goto_priv(PRIV_M);
    80006406:	4511                	li	a0,4
    80006408:	b01fa0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    8000640c:	002007b7          	lui	a5,0x200
    80006410:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80006414:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    80006418:	4501                	li	a0,0
    8000641a:	aeffa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000641e:	9effa0ef          	jal	80000e0c <test_setup_except_function>
        :: "r"(value), "r"(addr) : "memory");
    return value;
}

static inline void wfi() {
    asm ("wfi" ::: "memory");
    80006422:	10500073          	wfi
    wfi();
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80006426:	08200593          	li	a1,130
    8000642a:	0002b617          	auipc	a2,0x2b
    8000642e:	d7e60613          	addi	a2,a2,-642 # 800311a8 <__func__.0+0x14b8>
    80006432:	0002a517          	auipc	a0,0x2a
    80006436:	bbe50513          	addi	a0,a0,-1090 # 8002fff0 <__func__.0+0x300>
    8000643a:	453260ef          	jal	8002d08c <printf>
    8000643e:	00052797          	auipc	a5,0x52
    80006442:	bd37c783          	lbu	a5,-1069(a5) # 80058011 <excpt+0x1>
    80006446:	00052497          	auipc	s1,0x52
    8000644a:	bca48493          	addi	s1,s1,-1078 # 80058010 <excpt>
    8000644e:	0002a597          	auipc	a1,0x2a
    80006452:	b7a58593          	addi	a1,a1,-1158 # 8002ffc8 <__func__.0+0x2d8>
    80006456:	cf89                	beqz	a5,80006470 <virtual_instruction_10+0x8c>
    80006458:	6498                	ld	a4,8(s1)
    8000645a:	47d9                	li	a5,22
    8000645c:	0002a597          	auipc	a1,0x2a
    80006460:	b5c58593          	addi	a1,a1,-1188 # 8002ffb8 <__func__.0+0x2c8>
    80006464:	00f70663          	beq	a4,a5,80006470 <virtual_instruction_10+0x8c>
    80006468:	0002a597          	auipc	a1,0x2a
    8000646c:	b6058593          	addi	a1,a1,-1184 # 8002ffc8 <__func__.0+0x2d8>
    80006470:	0002a517          	auipc	a0,0x2a
    80006474:	b9850513          	addi	a0,a0,-1128 # 80030008 <__func__.0+0x318>
    80006478:	415260ef          	jal	8002d08c <printf>
    8000647c:	00052797          	auipc	a5,0x52
    80006480:	b957c783          	lbu	a5,-1131(a5) # 80058011 <excpt+0x1>
    80006484:	c789                	beqz	a5,8000648e <virtual_instruction_10+0xaa>
    80006486:	6498                	ld	a4,8(s1)
    80006488:	47d9                	li	a5,22
    8000648a:	00f70c63          	beq	a4,a5,800064a2 <virtual_instruction_10+0xbe>
    8000648e:	0002a517          	auipc	a0,0x2a
    80006492:	b8250513          	addi	a0,a0,-1150 # 80030010 <__func__.0+0x320>
    80006496:	3f7260ef          	jal	8002d08c <printf>
    8000649a:	02900513          	li	a0,41
    8000649e:	0dd250ef          	jal	8002bd7a <putchar>
    800064a2:	4529                	li	a0,10
    800064a4:	0d7250ef          	jal	8002bd7a <putchar>
    800064a8:	00052417          	auipc	s0,0x52
    800064ac:	b6944403          	lbu	s0,-1175(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    800064b0:	0002a597          	auipc	a1,0x2a
    800064b4:	b1858593          	addi	a1,a1,-1256 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800064b8:	cc11                	beqz	s0,800064d4 <virtual_instruction_10+0xf0>
    800064ba:	6498                	ld	a4,8(s1)
    800064bc:	47d9                	li	a5,22
    TEST_END();
    800064be:	0002a597          	auipc	a1,0x2a
    800064c2:	afa58593          	addi	a1,a1,-1286 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800064c6:	00f70763          	beq	a4,a5,800064d4 <virtual_instruction_10+0xf0>
    800064ca:	4401                	li	s0,0
    TEST_END();
    800064cc:	0002a597          	auipc	a1,0x2a
    800064d0:	afc58593          	addi	a1,a1,-1284 # 8002ffc8 <__func__.0+0x2d8>
    800064d4:	0002a517          	auipc	a0,0x2a
    800064d8:	b9c50513          	addi	a0,a0,-1124 # 80030070 <__func__.0+0x380>
    800064dc:	3b1260ef          	jal	8002d08c <printf>
    800064e0:	4511                	li	a0,4
    800064e2:	a27fa0ef          	jal	80000f08 <goto_priv>
    800064e6:	becfb0ef          	jal	800018d2 <reset_state>
}
    800064ea:	60e2                	ld	ra,24(sp)
    800064ec:	8522                	mv	a0,s0
    800064ee:	6442                	ld	s0,16(sp)
    800064f0:	64a2                	ld	s1,8(sp)
    800064f2:	6105                	addi	sp,sp,32
    800064f4:	8082                	ret

00000000800064f6 <virtual_instruction_11>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_11() {
    800064f6:	1101                	addi	sp,sp,-32

    TEST_START();    
    800064f8:	00028597          	auipc	a1,0x28
    800064fc:	c8858593          	addi	a1,a1,-888 # 8002e180 <__func__.1>
    80006500:	0002a517          	auipc	a0,0x2a
    80006504:	ad850513          	addi	a0,a0,-1320 # 8002ffd8 <__func__.0+0x2e8>
bool virtual_instruction_11() {
    80006508:	ec06                	sd	ra,24(sp)
    8000650a:	e822                	sd	s0,16(sp)
    8000650c:	e426                	sd	s1,8(sp)
    TEST_START();    
    8000650e:	37f260ef          	jal	8002d08c <printf>
    80006512:	4529                	li	a0,10
    80006514:	067250ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    80006518:	4511                	li	a0,4
    8000651a:	9effa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTVM);
    8000651e:	001007b7          	lui	a5,0x100
    80006522:	6007b073          	csrc	hstatus,a5
    CSRC(CSR_HSTATUS, MSTATUS_TVM);
    80006526:	6007b073          	csrc	hstatus,a5
    goto_priv(PRIV_VU);
    8000652a:	4501                	li	a0,0
    8000652c:	9ddfa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006530:	8ddfa0ef          	jal	80000e0c <test_setup_except_function>
    CSRS(CSR_VSIE,1ULL << 1);
    80006534:	20416073          	csrsi	vsie,2
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80006538:	08200593          	li	a1,130
    8000653c:	0002b617          	auipc	a2,0x2b
    80006540:	cb460613          	addi	a2,a2,-844 # 800311f0 <__func__.0+0x1500>
    80006544:	0002a517          	auipc	a0,0x2a
    80006548:	aac50513          	addi	a0,a0,-1364 # 8002fff0 <__func__.0+0x300>
    8000654c:	341260ef          	jal	8002d08c <printf>
    80006550:	00052797          	auipc	a5,0x52
    80006554:	ac17c783          	lbu	a5,-1343(a5) # 80058011 <excpt+0x1>
    80006558:	00052497          	auipc	s1,0x52
    8000655c:	ab848493          	addi	s1,s1,-1352 # 80058010 <excpt>
    80006560:	0002a597          	auipc	a1,0x2a
    80006564:	a6858593          	addi	a1,a1,-1432 # 8002ffc8 <__func__.0+0x2d8>
    80006568:	cf89                	beqz	a5,80006582 <virtual_instruction_11+0x8c>
    8000656a:	6498                	ld	a4,8(s1)
    8000656c:	47d9                	li	a5,22
    8000656e:	0002a597          	auipc	a1,0x2a
    80006572:	a4a58593          	addi	a1,a1,-1462 # 8002ffb8 <__func__.0+0x2c8>
    80006576:	00f70663          	beq	a4,a5,80006582 <virtual_instruction_11+0x8c>
    8000657a:	0002a597          	auipc	a1,0x2a
    8000657e:	a4e58593          	addi	a1,a1,-1458 # 8002ffc8 <__func__.0+0x2d8>
    80006582:	0002a517          	auipc	a0,0x2a
    80006586:	a8650513          	addi	a0,a0,-1402 # 80030008 <__func__.0+0x318>
    8000658a:	303260ef          	jal	8002d08c <printf>
    8000658e:	00052797          	auipc	a5,0x52
    80006592:	a837c783          	lbu	a5,-1405(a5) # 80058011 <excpt+0x1>
    80006596:	c789                	beqz	a5,800065a0 <virtual_instruction_11+0xaa>
    80006598:	6498                	ld	a4,8(s1)
    8000659a:	47d9                	li	a5,22
    8000659c:	00f70c63          	beq	a4,a5,800065b4 <virtual_instruction_11+0xbe>
    800065a0:	0002a517          	auipc	a0,0x2a
    800065a4:	a7050513          	addi	a0,a0,-1424 # 80030010 <__func__.0+0x320>
    800065a8:	2e5260ef          	jal	8002d08c <printf>
    800065ac:	02900513          	li	a0,41
    800065b0:	7ca250ef          	jal	8002bd7a <putchar>
    800065b4:	4529                	li	a0,10
    800065b6:	7c4250ef          	jal	8002bd7a <putchar>
    800065ba:	00052417          	auipc	s0,0x52
    800065be:	a5744403          	lbu	s0,-1449(s0) # 80058011 <excpt+0x1>
    //     excpt.cause == CAUSE_VRTI
    // );      



    TEST_END(); 
    800065c2:	0002a597          	auipc	a1,0x2a
    800065c6:	a0658593          	addi	a1,a1,-1530 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    800065ca:	cc11                	beqz	s0,800065e6 <virtual_instruction_11+0xf0>
    800065cc:	6498                	ld	a4,8(s1)
    800065ce:	47d9                	li	a5,22
    TEST_END(); 
    800065d0:	0002a597          	auipc	a1,0x2a
    800065d4:	9e858593          	addi	a1,a1,-1560 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    800065d8:	00f70763          	beq	a4,a5,800065e6 <virtual_instruction_11+0xf0>
    800065dc:	4401                	li	s0,0
    TEST_END(); 
    800065de:	0002a597          	auipc	a1,0x2a
    800065e2:	9ea58593          	addi	a1,a1,-1558 # 8002ffc8 <__func__.0+0x2d8>
    800065e6:	0002a517          	auipc	a0,0x2a
    800065ea:	a8a50513          	addi	a0,a0,-1398 # 80030070 <__func__.0+0x380>
    800065ee:	29f260ef          	jal	8002d08c <printf>
    800065f2:	4511                	li	a0,4
    800065f4:	915fa0ef          	jal	80000f08 <goto_priv>
    800065f8:	adafb0ef          	jal	800018d2 <reset_state>
}
    800065fc:	60e2                	ld	ra,24(sp)
    800065fe:	8522                	mv	a0,s0
    80006600:	6442                	ld	s0,16(sp)
    80006602:	64a2                	ld	s1,8(sp)
    80006604:	6105                	addi	sp,sp,32
    80006606:	8082                	ret

0000000080006608 <virtual_instruction_12>:

bool virtual_instruction_12() {
    80006608:	1101                	addi	sp,sp,-32

    TEST_START();
    8000660a:	00028597          	auipc	a1,0x28
    8000660e:	b8e58593          	addi	a1,a1,-1138 # 8002e198 <__func__.0>
    80006612:	0002a517          	auipc	a0,0x2a
    80006616:	9c650513          	addi	a0,a0,-1594 # 8002ffd8 <__func__.0+0x2e8>
bool virtual_instruction_12() {
    8000661a:	ec06                	sd	ra,24(sp)
    8000661c:	e822                	sd	s0,16(sp)
    8000661e:	e426                	sd	s1,8(sp)
    TEST_START();
    80006620:	26d260ef          	jal	8002d08c <printf>
    80006624:	4529                	li	a0,10
    80006626:	754250ef          	jal	8002bd7a <putchar>


    goto_priv(PRIV_VU);
    8000662a:	4501                	li	a0,0
    8000662c:	8ddfa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006630:	fdcfa0ef          	jal	80000e0c <test_setup_except_function>

    CSRR(CSR_SATP);
    80006634:	180027f3          	csrr	a5,satp
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    80006638:	08200593          	li	a1,130
    8000663c:	0002b617          	auipc	a2,0x2b
    80006640:	c1460613          	addi	a2,a2,-1004 # 80031250 <__func__.0+0x1560>
    80006644:	0002a517          	auipc	a0,0x2a
    80006648:	9ac50513          	addi	a0,a0,-1620 # 8002fff0 <__func__.0+0x300>
    8000664c:	241260ef          	jal	8002d08c <printf>
    80006650:	00052797          	auipc	a5,0x52
    80006654:	9c17c783          	lbu	a5,-1599(a5) # 80058011 <excpt+0x1>
    80006658:	00052497          	auipc	s1,0x52
    8000665c:	9b848493          	addi	s1,s1,-1608 # 80058010 <excpt>
    80006660:	0002a597          	auipc	a1,0x2a
    80006664:	96858593          	addi	a1,a1,-1688 # 8002ffc8 <__func__.0+0x2d8>
    80006668:	cf89                	beqz	a5,80006682 <virtual_instruction_12+0x7a>
    8000666a:	6498                	ld	a4,8(s1)
    8000666c:	47d9                	li	a5,22
    8000666e:	0002a597          	auipc	a1,0x2a
    80006672:	94a58593          	addi	a1,a1,-1718 # 8002ffb8 <__func__.0+0x2c8>
    80006676:	00f70663          	beq	a4,a5,80006682 <virtual_instruction_12+0x7a>
    8000667a:	0002a597          	auipc	a1,0x2a
    8000667e:	94e58593          	addi	a1,a1,-1714 # 8002ffc8 <__func__.0+0x2d8>
    80006682:	0002a517          	auipc	a0,0x2a
    80006686:	98650513          	addi	a0,a0,-1658 # 80030008 <__func__.0+0x318>
    8000668a:	203260ef          	jal	8002d08c <printf>
    8000668e:	00052797          	auipc	a5,0x52
    80006692:	9837c783          	lbu	a5,-1661(a5) # 80058011 <excpt+0x1>
    80006696:	c789                	beqz	a5,800066a0 <virtual_instruction_12+0x98>
    80006698:	6498                	ld	a4,8(s1)
    8000669a:	47d9                	li	a5,22
    8000669c:	00f70c63          	beq	a4,a5,800066b4 <virtual_instruction_12+0xac>
    800066a0:	0002a517          	auipc	a0,0x2a
    800066a4:	97050513          	addi	a0,a0,-1680 # 80030010 <__func__.0+0x320>
    800066a8:	1e5260ef          	jal	8002d08c <printf>
    800066ac:	02900513          	li	a0,41
    800066b0:	6ca250ef          	jal	8002bd7a <putchar>
    800066b4:	4529                	li	a0,10
    800066b6:	6c4250ef          	jal	8002bd7a <putchar>
    800066ba:	00052417          	auipc	s0,0x52
    800066be:	95744403          	lbu	s0,-1705(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    800066c2:	0002a597          	auipc	a1,0x2a
    800066c6:	90658593          	addi	a1,a1,-1786 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    800066ca:	cc11                	beqz	s0,800066e6 <virtual_instruction_12+0xde>
    800066cc:	6498                	ld	a4,8(s1)
    800066ce:	47d9                	li	a5,22
    TEST_END();
    800066d0:	0002a597          	auipc	a1,0x2a
    800066d4:	8e858593          	addi	a1,a1,-1816 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    800066d8:	00f70763          	beq	a4,a5,800066e6 <virtual_instruction_12+0xde>
    800066dc:	4401                	li	s0,0
    TEST_END();
    800066de:	0002a597          	auipc	a1,0x2a
    800066e2:	8ea58593          	addi	a1,a1,-1814 # 8002ffc8 <__func__.0+0x2d8>
    800066e6:	0002a517          	auipc	a0,0x2a
    800066ea:	98a50513          	addi	a0,a0,-1654 # 80030070 <__func__.0+0x380>
    800066ee:	19f260ef          	jal	8002d08c <printf>
    800066f2:	4511                	li	a0,4
    800066f4:	815fa0ef          	jal	80000f08 <goto_priv>
    800066f8:	9dafb0ef          	jal	800018d2 <reset_state>
}
    800066fc:	60e2                	ld	ra,24(sp)
    800066fe:	8522                	mv	a0,s0
    80006700:	6442                	ld	s0,16(sp)
    80006702:	64a2                	ld	s1,8(sp)
    80006704:	6105                	addi	sp,sp,32
    80006706:	8082                	ret

0000000080006708 <hfence_test>:
#include <rvh_test.h>
#include <page_tables.h> 

bool hfence_test() {
    80006708:	7179                	addi	sp,sp,-48

    TEST_START();
    8000670a:	00028597          	auipc	a1,0x28
    8000670e:	aa658593          	addi	a1,a1,-1370 # 8002e1b0 <__func__.2>
    80006712:	0002a517          	auipc	a0,0x2a
    80006716:	8c650513          	addi	a0,a0,-1850 # 8002ffd8 <__func__.0+0x2e8>
bool hfence_test() {
    8000671a:	f406                	sd	ra,40(sp)
    8000671c:	ec26                	sd	s1,24(sp)
    8000671e:	f022                	sd	s0,32(sp)
    80006720:	e84a                	sd	s2,16(sp)
    80006722:	e44e                	sd	s3,8(sp)
    TEST_START();
    80006724:	169260ef          	jal	8002d08c <printf>
    80006728:	4529                	li	a0,10
    8000672a:	650250ef          	jal	8002bd7a <putchar>
    8000672e:	00035617          	auipc	a2,0x35
    80006732:	6ca63603          	ld	a2,1738(a2) # 8003bdf8 <__func__.0+0xc108>
    80006736:	00035697          	auipc	a3,0x35
    8000673a:	6ca6b683          	ld	a3,1738(a3) # 8003be00 <__func__.0+0xc110>
    8000673e:	2201b737          	lui	a4,0x2201b
    80006742:	000887b7          	lui	a5,0x88
    80006746:	070a                	slli	a4,a4,0x2
    80006748:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    8000674c:	e310                	sd	a2,0(a4)
    8000674e:	07b2                	slli	a5,a5,0xc
    80006750:	e394                	sd	a3,0(a5)
    write64(phys_page_base(SWITCH1), 0x111111111);
    write64(phys_page_base(SWITCH2), 0x222222222);

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    80006752:	450d                	li	a0,3
    80006754:	fb4fa0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80006758:	4509                	li	a0,2
    asm volatile(
    8000675a:	4001b4b7          	lui	s1,0x4001b
    8000675e:	ecafa0ef          	jal	80000e28 <set_prev_priv>
    80006762:	048a                	slli	s1,s1,0x2
    hpt_init();
    80006764:	a60fa0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80006768:	814fa0ef          	jal	8000077c <vspt_init>
    8000676c:	6c04c9f3          	.insn	4, 0x6c04c9f3
    vaddr = vs_page_base(SWITCH1);

    val = hlvd(vaddr);
    cond = true;
    vspt_switch();
    80006770:	e44fa0ef          	jal	80000db4 <vspt_switch>
    80006774:	6c04c7f3          	.insn	4, 0x6c04c7f3
    asm volatile(
    80006778:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8000677c:	6c04c473          	.insn	4, 0x6c04c473
    cond = (hlvd(vaddr) == val);

    hfence_vvma();
    cond &= (hlvd(vaddr) != val);
    80006780:	41340433          	sub	s0,s0,s3
    cond = (hlvd(vaddr) == val);
    80006784:	413787b3          	sub	a5,a5,s3
    80006788:	0017b793          	seqz	a5,a5
    8000678c:	00803433          	snez	s0,s0
    80006790:	8c7d                	and	s0,s0,a5

    hpt_switch();
    80006792:	e44fa0ef          	jal	80000dd6 <hpt_switch>
    80006796:	6c04c973          	.insn	4, 0x6c04c973
    asm volatile(
    8000679a:	62000073          	.insn	4, 0x62000073
    asm volatile(
    8000679e:	6c04c4f3          	.insn	4, 0x6c04c4f3
    cond &= (hlvd(vaddr) != val);
    800067a2:	41390933          	sub	s2,s2,s3
    800067a6:	01203933          	snez	s2,s2

    hfence_gvma();
    cond &= (hlvd(vaddr) == val);

    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    800067aa:	0002b617          	auipc	a2,0x2b
    800067ae:	ae660613          	addi	a2,a2,-1306 # 80031290 <__func__.0+0x15a0>
    800067b2:	08200593          	li	a1,130
    800067b6:	0002a517          	auipc	a0,0x2a
    800067ba:	83a50513          	addi	a0,a0,-1990 # 8002fff0 <__func__.0+0x300>
    800067be:	01247433          	and	s0,s0,s2
    800067c2:	0cb260ef          	jal	8002d08c <printf>
    800067c6:	12040863          	beqz	s0,800068f6 <hfence_test+0x1ee>
    800067ca:	13349663          	bne	s1,s3,800068f6 <hfence_test+0x1ee>
    800067ce:	00029597          	auipc	a1,0x29
    800067d2:	7ea58593          	addi	a1,a1,2026 # 8002ffb8 <__func__.0+0x2c8>
    800067d6:	0002a517          	auipc	a0,0x2a
    800067da:	83250513          	addi	a0,a0,-1998 # 80030008 <__func__.0+0x318>
    800067de:	0af260ef          	jal	8002d08c <printf>
    800067e2:	4529                	li	a0,10
    800067e4:	596250ef          	jal	8002bd7a <putchar>
    800067e8:	4485                	li	s1,1

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    800067ea:	450d                	li	a0,3
    800067ec:	4001b437          	lui	s0,0x4001b
    800067f0:	f18fa0ef          	jal	80000f08 <goto_priv>
    800067f4:	040a                	slli	s0,s0,0x2
    800067f6:	6c044973          	.insn	4, 0x6c044973
    val = hlvd(vaddr);
    cond = true;
    hpt_switch();
    800067fa:	ddcfa0ef          	jal	80000dd6 <hpt_switch>
    asm volatile ("sfence.vma \n\t");
    800067fe:	12000073          	sfence.vma
    asm volatile(
    80006802:	6c044473          	.insn	4, 0x6c044473
    sfence();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    80006806:	0002b617          	auipc	a2,0x2b
    8000680a:	aba60613          	addi	a2,a2,-1350 # 800312c0 <__func__.0+0x15d0>
    8000680e:	08200593          	li	a1,130
    80006812:	00029517          	auipc	a0,0x29
    80006816:	7de50513          	addi	a0,a0,2014 # 8002fff0 <__func__.0+0x300>
    8000681a:	073260ef          	jal	8002d08c <printf>
    8000681e:	13240963          	beq	s0,s2,80006950 <hfence_test+0x248>
    80006822:	00029597          	auipc	a1,0x29
    80006826:	7a658593          	addi	a1,a1,1958 # 8002ffc8 <__func__.0+0x2d8>
    8000682a:	00029517          	auipc	a0,0x29
    8000682e:	7de50513          	addi	a0,a0,2014 # 80030008 <__func__.0+0x318>
    80006832:	05b260ef          	jal	8002d08c <printf>
    80006836:	00029517          	auipc	a0,0x29
    8000683a:	7da50513          	addi	a0,a0,2010 # 80030010 <__func__.0+0x320>
    8000683e:	04f260ef          	jal	8002d08c <printf>
    80006842:	02900513          	li	a0,41
    80006846:	534250ef          	jal	8002bd7a <putchar>
    8000684a:	4529                	li	a0,10
    8000684c:	52e250ef          	jal	8002bd7a <putchar>
    80006850:	4481                	li	s1,0
    return *((volatile uint64_t*) addr);
    80006852:	4001b437          	lui	s0,0x4001b

    //////////////////////////////////////////////////////////////////////  

    goto_priv(PRIV_HS);
    80006856:	450d                	li	a0,3
    80006858:	040a                	slli	s0,s0,0x2
    8000685a:	eaefa0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000685e:	d83f90ef          	jal	800005e0 <hspt_init>
    80006862:	00043903          	ld	s2,0(s0) # 4001b000 <STACK_SIZE+0x3ff1b000>
    vaddr = hs_page_base(SWITCH1);
    val = read64(vaddr);
    cond = true;

    hspt_switch();
    80006866:	d2cfa0ef          	jal	80000d92 <hspt_switch>
    goto_priv(PRIV_VS);
    8000686a:	4509                	li	a0,2
    8000686c:	e9cfa0ef          	jal	80000f08 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    80006870:	12000073          	sfence.vma
    sfence();
    goto_priv(PRIV_HS);
    80006874:	450d                	li	a0,3
    80006876:	e92fa0ef          	jal	80000f08 <goto_priv>
    8000687a:	6000                	ld	s0,0(s0)
    cond &= read64(vaddr) == val;
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    8000687c:	0002b617          	auipc	a2,0x2b
    80006880:	a7c60613          	addi	a2,a2,-1412 # 800312f8 <__func__.0+0x1608>
    80006884:	08200593          	li	a1,130
    80006888:	00029517          	auipc	a0,0x29
    8000688c:	76850513          	addi	a0,a0,1896 # 8002fff0 <__func__.0+0x300>
    80006890:	7fc260ef          	jal	8002d08c <printf>
    80006894:	09240a63          	beq	s0,s2,80006928 <hfence_test+0x220>
    80006898:	00029597          	auipc	a1,0x29
    8000689c:	73058593          	addi	a1,a1,1840 # 8002ffc8 <__func__.0+0x2d8>
    800068a0:	00029517          	auipc	a0,0x29
    800068a4:	76850513          	addi	a0,a0,1896 # 80030008 <__func__.0+0x318>
    800068a8:	7e4260ef          	jal	8002d08c <printf>
    800068ac:	00029517          	auipc	a0,0x29
    800068b0:	76450513          	addi	a0,a0,1892 # 80030010 <__func__.0+0x320>
    800068b4:	7d8260ef          	jal	8002d08c <printf>
    800068b8:	02900513          	li	a0,41
    800068bc:	4be250ef          	jal	8002bd7a <putchar>
    800068c0:	4529                	li	a0,10
    800068c2:	4b8250ef          	jal	8002bd7a <putchar>
    800068c6:	4401                	li	s0,0

    //////////////////////////////////////////////////////////////////////


    
    TEST_END();
    800068c8:	00029597          	auipc	a1,0x29
    800068cc:	70058593          	addi	a1,a1,1792 # 8002ffc8 <__func__.0+0x2d8>
    800068d0:	00029517          	auipc	a0,0x29
    800068d4:	7a050513          	addi	a0,a0,1952 # 80030070 <__func__.0+0x380>
    800068d8:	7b4260ef          	jal	8002d08c <printf>
    800068dc:	4511                	li	a0,4
    800068de:	e2afa0ef          	jal	80000f08 <goto_priv>
    800068e2:	ff1fa0ef          	jal	800018d2 <reset_state>
    800068e6:	70a2                	ld	ra,40(sp)
    800068e8:	8522                	mv	a0,s0
    800068ea:	7402                	ld	s0,32(sp)
    800068ec:	64e2                	ld	s1,24(sp)
    800068ee:	6942                	ld	s2,16(sp)
    800068f0:	69a2                	ld	s3,8(sp)
    800068f2:	6145                	addi	sp,sp,48
    800068f4:	8082                	ret
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    800068f6:	00029597          	auipc	a1,0x29
    800068fa:	6d258593          	addi	a1,a1,1746 # 8002ffc8 <__func__.0+0x2d8>
    800068fe:	00029517          	auipc	a0,0x29
    80006902:	70a50513          	addi	a0,a0,1802 # 80030008 <__func__.0+0x318>
    80006906:	786260ef          	jal	8002d08c <printf>
    8000690a:	00029517          	auipc	a0,0x29
    8000690e:	70650513          	addi	a0,a0,1798 # 80030010 <__func__.0+0x320>
    80006912:	77a260ef          	jal	8002d08c <printf>
    80006916:	02900513          	li	a0,41
    8000691a:	460250ef          	jal	8002bd7a <putchar>
    8000691e:	4529                	li	a0,10
    80006920:	45a250ef          	jal	8002bd7a <putchar>
    80006924:	4481                	li	s1,0
    80006926:	b5d1                	j	800067ea <hfence_test+0xe2>
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    80006928:	00029597          	auipc	a1,0x29
    8000692c:	69058593          	addi	a1,a1,1680 # 8002ffb8 <__func__.0+0x2c8>
    80006930:	00029517          	auipc	a0,0x29
    80006934:	6d850513          	addi	a0,a0,1752 # 80030008 <__func__.0+0x318>
    80006938:	754260ef          	jal	8002d08c <printf>
    8000693c:	4529                	li	a0,10
    8000693e:	43c250ef          	jal	8002bd7a <putchar>
    80006942:	d0d1                	beqz	s1,800068c6 <hfence_test+0x1be>
    80006944:	4405                	li	s0,1
    TEST_END();
    80006946:	00029597          	auipc	a1,0x29
    8000694a:	67258593          	addi	a1,a1,1650 # 8002ffb8 <__func__.0+0x2c8>
    8000694e:	b749                	j	800068d0 <hfence_test+0x1c8>
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    80006950:	00029597          	auipc	a1,0x29
    80006954:	66858593          	addi	a1,a1,1640 # 8002ffb8 <__func__.0+0x2c8>
    80006958:	00029517          	auipc	a0,0x29
    8000695c:	6b050513          	addi	a0,a0,1712 # 80030008 <__func__.0+0x318>
    80006960:	72c260ef          	jal	8002d08c <printf>
    80006964:	4529                	li	a0,10
    80006966:	414250ef          	jal	8002bd7a <putchar>
    8000696a:	b5e5                	j	80006852 <hfence_test+0x14a>

000000008000696c <wfi_exception_tests_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <stdio.h>

bool wfi_exception_tests_1() {
    8000696c:	1101                	addi	sp,sp,-32

    TEST_START();
    8000696e:	00028597          	auipc	a1,0x28
    80006972:	85258593          	addi	a1,a1,-1966 # 8002e1c0 <__func__.22>
    80006976:	00029517          	auipc	a0,0x29
    8000697a:	66250513          	addi	a0,a0,1634 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_1() {
    8000697e:	ec06                	sd	ra,24(sp)
    80006980:	e822                	sd	s0,16(sp)
    80006982:	e426                	sd	s1,8(sp)
    TEST_START();
    80006984:	708260ef          	jal	8002d08c <printf>
    80006988:	4529                	li	a0,10
    8000698a:	3f0250ef          	jal	8002bd7a <putchar>

    TEST_SETUP_EXCEPT();
    8000698e:	c7efa0ef          	jal	80000e0c <test_setup_except_function>

    //mstatus.TW=0时，在u模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006992:	4511                	li	a0,4
    80006994:	d74fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006998:	002007b7          	lui	a5,0x200
    8000699c:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    800069a0:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    800069a4:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800069a8:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    800069ac:	60205073          	csrwi	hedeleg,0
    CSRS(CSR_UIE, 0b0100);
    800069b0:	00426073          	csrsi	uie,4
    asm ("wfi" ::: "memory");
    800069b4:	10500073          	wfi
    wfi();

    goto_priv(PRIV_HU);
    800069b8:	4505                	li	a0,1
    800069ba:	d4efa0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800069be:	08200593          	li	a1,130
    800069c2:	0002b617          	auipc	a2,0x2b
    800069c6:	96e60613          	addi	a2,a2,-1682 # 80031330 <__func__.0+0x1640>
    800069ca:	00029517          	auipc	a0,0x29
    800069ce:	62650513          	addi	a0,a0,1574 # 8002fff0 <__func__.0+0x300>
    800069d2:	6ba260ef          	jal	8002d08c <printf>
    800069d6:	00051797          	auipc	a5,0x51
    800069da:	63b7c783          	lbu	a5,1595(a5) # 80058011 <excpt+0x1>
    800069de:	00051497          	auipc	s1,0x51
    800069e2:	63248493          	addi	s1,s1,1586 # 80058010 <excpt>
    800069e6:	00029597          	auipc	a1,0x29
    800069ea:	5e258593          	addi	a1,a1,1506 # 8002ffc8 <__func__.0+0x2d8>
    800069ee:	cf89                	beqz	a5,80006a08 <wfi_exception_tests_1+0x9c>
    800069f0:	6498                	ld	a4,8(s1)
    800069f2:	4789                	li	a5,2
    800069f4:	00029597          	auipc	a1,0x29
    800069f8:	5c458593          	addi	a1,a1,1476 # 8002ffb8 <__func__.0+0x2c8>
    800069fc:	00f70663          	beq	a4,a5,80006a08 <wfi_exception_tests_1+0x9c>
    80006a00:	00029597          	auipc	a1,0x29
    80006a04:	5c858593          	addi	a1,a1,1480 # 8002ffc8 <__func__.0+0x2d8>
    80006a08:	00029517          	auipc	a0,0x29
    80006a0c:	60050513          	addi	a0,a0,1536 # 80030008 <__func__.0+0x318>
    80006a10:	67c260ef          	jal	8002d08c <printf>
    80006a14:	00051797          	auipc	a5,0x51
    80006a18:	5fd7c783          	lbu	a5,1533(a5) # 80058011 <excpt+0x1>
    80006a1c:	c789                	beqz	a5,80006a26 <wfi_exception_tests_1+0xba>
    80006a1e:	6498                	ld	a4,8(s1)
    80006a20:	4789                	li	a5,2
    80006a22:	00f70c63          	beq	a4,a5,80006a3a <wfi_exception_tests_1+0xce>
    80006a26:	00029517          	auipc	a0,0x29
    80006a2a:	5ea50513          	addi	a0,a0,1514 # 80030010 <__func__.0+0x320>
    80006a2e:	65e260ef          	jal	8002d08c <printf>
    80006a32:	02900513          	li	a0,41
    80006a36:	344250ef          	jal	8002bd7a <putchar>
    80006a3a:	4529                	li	a0,10
    80006a3c:	33e250ef          	jal	8002bd7a <putchar>
    80006a40:	00051417          	auipc	s0,0x51
    80006a44:	5d144403          	lbu	s0,1489(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80006a48:	00029597          	auipc	a1,0x29
    80006a4c:	58058593          	addi	a1,a1,1408 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a50:	cc11                	beqz	s0,80006a6c <wfi_exception_tests_1+0x100>
    80006a52:	6498                	ld	a4,8(s1)
    80006a54:	4789                	li	a5,2
    TEST_END();
    80006a56:	00029597          	auipc	a1,0x29
    80006a5a:	56258593          	addi	a1,a1,1378 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a5e:	00f70763          	beq	a4,a5,80006a6c <wfi_exception_tests_1+0x100>
    80006a62:	4401                	li	s0,0
    TEST_END();
    80006a64:	00029597          	auipc	a1,0x29
    80006a68:	56458593          	addi	a1,a1,1380 # 8002ffc8 <__func__.0+0x2d8>
    80006a6c:	00029517          	auipc	a0,0x29
    80006a70:	60450513          	addi	a0,a0,1540 # 80030070 <__func__.0+0x380>
    80006a74:	618260ef          	jal	8002d08c <printf>
    80006a78:	4511                	li	a0,4
    80006a7a:	c8efa0ef          	jal	80000f08 <goto_priv>
    80006a7e:	e55fa0ef          	jal	800018d2 <reset_state>
}
    80006a82:	60e2                	ld	ra,24(sp)
    80006a84:	8522                	mv	a0,s0
    80006a86:	6442                	ld	s0,16(sp)
    80006a88:	64a2                	ld	s1,8(sp)
    80006a8a:	6105                	addi	sp,sp,32
    80006a8c:	8082                	ret

0000000080006a8e <wfi_exception_tests_2>:

bool wfi_exception_tests_2() {
    80006a8e:	1101                	addi	sp,sp,-32

    TEST_START();
    80006a90:	00027597          	auipc	a1,0x27
    80006a94:	74858593          	addi	a1,a1,1864 # 8002e1d8 <__func__.21>
    80006a98:	00029517          	auipc	a0,0x29
    80006a9c:	54050513          	addi	a0,a0,1344 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_2() {
    80006aa0:	ec06                	sd	ra,24(sp)
    80006aa2:	e822                	sd	s0,16(sp)
    80006aa4:	e426                	sd	s1,8(sp)
    TEST_START();
    80006aa6:	5e6260ef          	jal	8002d08c <printf>
    80006aaa:	4529                	li	a0,10
    80006aac:	2ce250ef          	jal	8002bd7a <putchar>

    TEST_SETUP_EXCEPT();
    80006ab0:	b5cfa0ef          	jal	80000e0c <test_setup_except_function>
    //mstatus.TW=0时，在VU模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006ab4:	4511                	li	a0,4
    80006ab6:	c52fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006aba:	002007b7          	lui	a5,0x200
    80006abe:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006ac2:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006ac6:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80006aca:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80006ace:	60205073          	csrwi	hedeleg,0
    TEST_SETUP_EXCEPT();
    80006ad2:	b3afa0ef          	jal	80000e0c <test_setup_except_function>
    CSRS(CSR_UIE, 0b0100);
    80006ad6:	00426073          	csrsi	uie,4
    80006ada:	10500073          	wfi
    wfi();

    goto_priv(PRIV_VU);
    80006ade:	4501                	li	a0,0
    80006ae0:	c28fa0ef          	jal	80000f08 <goto_priv>
    
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006ae4:	08200593          	li	a1,130
    80006ae8:	0002b617          	auipc	a2,0x2b
    80006aec:	8b860613          	addi	a2,a2,-1864 # 800313a0 <__func__.0+0x16b0>
    80006af0:	00029517          	auipc	a0,0x29
    80006af4:	50050513          	addi	a0,a0,1280 # 8002fff0 <__func__.0+0x300>
    80006af8:	594260ef          	jal	8002d08c <printf>
    80006afc:	00051797          	auipc	a5,0x51
    80006b00:	5157c783          	lbu	a5,1301(a5) # 80058011 <excpt+0x1>
    80006b04:	00051497          	auipc	s1,0x51
    80006b08:	50c48493          	addi	s1,s1,1292 # 80058010 <excpt>
    80006b0c:	00029597          	auipc	a1,0x29
    80006b10:	4bc58593          	addi	a1,a1,1212 # 8002ffc8 <__func__.0+0x2d8>
    80006b14:	cf89                	beqz	a5,80006b2e <wfi_exception_tests_2+0xa0>
    80006b16:	6498                	ld	a4,8(s1)
    80006b18:	4789                	li	a5,2
    80006b1a:	00029597          	auipc	a1,0x29
    80006b1e:	49e58593          	addi	a1,a1,1182 # 8002ffb8 <__func__.0+0x2c8>
    80006b22:	00f70663          	beq	a4,a5,80006b2e <wfi_exception_tests_2+0xa0>
    80006b26:	00029597          	auipc	a1,0x29
    80006b2a:	4a258593          	addi	a1,a1,1186 # 8002ffc8 <__func__.0+0x2d8>
    80006b2e:	00029517          	auipc	a0,0x29
    80006b32:	4da50513          	addi	a0,a0,1242 # 80030008 <__func__.0+0x318>
    80006b36:	556260ef          	jal	8002d08c <printf>
    80006b3a:	00051797          	auipc	a5,0x51
    80006b3e:	4d77c783          	lbu	a5,1239(a5) # 80058011 <excpt+0x1>
    80006b42:	c789                	beqz	a5,80006b4c <wfi_exception_tests_2+0xbe>
    80006b44:	6498                	ld	a4,8(s1)
    80006b46:	4789                	li	a5,2
    80006b48:	00f70c63          	beq	a4,a5,80006b60 <wfi_exception_tests_2+0xd2>
    80006b4c:	00029517          	auipc	a0,0x29
    80006b50:	4c450513          	addi	a0,a0,1220 # 80030010 <__func__.0+0x320>
    80006b54:	538260ef          	jal	8002d08c <printf>
    80006b58:	02900513          	li	a0,41
    80006b5c:	21e250ef          	jal	8002bd7a <putchar>
    80006b60:	4529                	li	a0,10
    80006b62:	218250ef          	jal	8002bd7a <putchar>
    80006b66:	00051417          	auipc	s0,0x51
    80006b6a:	4ab44403          	lbu	s0,1195(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    TEST_END();
    80006b6e:	00029597          	auipc	a1,0x29
    80006b72:	45a58593          	addi	a1,a1,1114 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b76:	cc11                	beqz	s0,80006b92 <wfi_exception_tests_2+0x104>
    80006b78:	6498                	ld	a4,8(s1)
    80006b7a:	4789                	li	a5,2
    TEST_END();
    80006b7c:	00029597          	auipc	a1,0x29
    80006b80:	43c58593          	addi	a1,a1,1084 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b84:	00f70763          	beq	a4,a5,80006b92 <wfi_exception_tests_2+0x104>
    80006b88:	4401                	li	s0,0
    TEST_END();
    80006b8a:	00029597          	auipc	a1,0x29
    80006b8e:	43e58593          	addi	a1,a1,1086 # 8002ffc8 <__func__.0+0x2d8>
    80006b92:	00029517          	auipc	a0,0x29
    80006b96:	4de50513          	addi	a0,a0,1246 # 80030070 <__func__.0+0x380>
    80006b9a:	4f2260ef          	jal	8002d08c <printf>
    80006b9e:	4511                	li	a0,4
    80006ba0:	b68fa0ef          	jal	80000f08 <goto_priv>
    80006ba4:	d2ffa0ef          	jal	800018d2 <reset_state>
}
    80006ba8:	60e2                	ld	ra,24(sp)
    80006baa:	8522                	mv	a0,s0
    80006bac:	6442                	ld	s0,16(sp)
    80006bae:	64a2                	ld	s1,8(sp)
    80006bb0:	6105                	addi	sp,sp,32
    80006bb2:	8082                	ret

0000000080006bb4 <wfi_exception_tests_3>:

bool wfi_exception_tests_3() {
    80006bb4:	1141                	addi	sp,sp,-16

    TEST_START();
    80006bb6:	00027597          	auipc	a1,0x27
    80006bba:	63a58593          	addi	a1,a1,1594 # 8002e1f0 <__func__.20>
    80006bbe:	00029517          	auipc	a0,0x29
    80006bc2:	41a50513          	addi	a0,a0,1050 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_3() {
    80006bc6:	e406                	sd	ra,8(sp)
    80006bc8:	e022                	sd	s0,0(sp)
    TEST_START();
    80006bca:	4c2260ef          	jal	8002d08c <printf>
    80006bce:	4529                	li	a0,10
    80006bd0:	1aa250ef          	jal	8002bd7a <putchar>

    TEST_SETUP_EXCEPT();
    80006bd4:	a38fa0ef          	jal	80000e0c <test_setup_except_function>
    /* Keep an interrupt pending so we don't get stuck when wfi succeeds */
    //mstatus.TW=0时，在m模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006bd8:	4511                	li	a0,4
    80006bda:	b2efa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006bde:	002007b7          	lui	a5,0x200
    80006be2:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006be6:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006bea:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006bee:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006bf2:	34426073          	csrsi	mip,4

    goto_priv(PRIV_M);
    80006bf6:	4511                	li	a0,4
    80006bf8:	b10fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006bfc:	a10fa0ef          	jal	80000e0c <test_setup_except_function>
    80006c00:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c04:	08200593          	li	a1,130
    80006c08:	0002b617          	auipc	a2,0x2b
    80006c0c:	80860613          	addi	a2,a2,-2040 # 80031410 <__func__.0+0x1720>
    80006c10:	00029517          	auipc	a0,0x29
    80006c14:	3e050513          	addi	a0,a0,992 # 8002fff0 <__func__.0+0x300>
    80006c18:	474260ef          	jal	8002d08c <printf>
    80006c1c:	00051797          	auipc	a5,0x51
    80006c20:	3f57c783          	lbu	a5,1013(a5) # 80058011 <excpt+0x1>
    80006c24:	00029597          	auipc	a1,0x29
    80006c28:	39458593          	addi	a1,a1,916 # 8002ffb8 <__func__.0+0x2c8>
    80006c2c:	c789                	beqz	a5,80006c36 <wfi_exception_tests_3+0x82>
    80006c2e:	00029597          	auipc	a1,0x29
    80006c32:	39a58593          	addi	a1,a1,922 # 8002ffc8 <__func__.0+0x2d8>
    80006c36:	00029517          	auipc	a0,0x29
    80006c3a:	3d250513          	addi	a0,a0,978 # 80030008 <__func__.0+0x318>
    80006c3e:	44e260ef          	jal	8002d08c <printf>
    80006c42:	00051797          	auipc	a5,0x51
    80006c46:	3cf7c783          	lbu	a5,975(a5) # 80058011 <excpt+0x1>
    80006c4a:	e7a1                	bnez	a5,80006c92 <wfi_exception_tests_3+0xde>
    80006c4c:	4529                	li	a0,10
    80006c4e:	12c250ef          	jal	8002bd7a <putchar>
    80006c52:	00051797          	auipc	a5,0x51
    80006c56:	3bf7c783          	lbu	a5,959(a5) # 80058011 <excpt+0x1>
    80006c5a:	e795                	bnez	a5,80006c86 <wfi_exception_tests_3+0xd2>
    80006c5c:	4405                	li	s0,1
        excpt.triggered == false
    );  

   
    TEST_END();
    80006c5e:	00029597          	auipc	a1,0x29
    80006c62:	35a58593          	addi	a1,a1,858 # 8002ffb8 <__func__.0+0x2c8>
    80006c66:	00029517          	auipc	a0,0x29
    80006c6a:	40a50513          	addi	a0,a0,1034 # 80030070 <__func__.0+0x380>
    80006c6e:	41e260ef          	jal	8002d08c <printf>
    80006c72:	4511                	li	a0,4
    80006c74:	a94fa0ef          	jal	80000f08 <goto_priv>
    80006c78:	c5bfa0ef          	jal	800018d2 <reset_state>
}
    80006c7c:	60a2                	ld	ra,8(sp)
    80006c7e:	8522                	mv	a0,s0
    80006c80:	6402                	ld	s0,0(sp)
    80006c82:	0141                	addi	sp,sp,16
    80006c84:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c86:	4401                	li	s0,0
    TEST_END();
    80006c88:	00029597          	auipc	a1,0x29
    80006c8c:	34058593          	addi	a1,a1,832 # 8002ffc8 <__func__.0+0x2d8>
    80006c90:	bfd9                	j	80006c66 <wfi_exception_tests_3+0xb2>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c92:	00029517          	auipc	a0,0x29
    80006c96:	37e50513          	addi	a0,a0,894 # 80030010 <__func__.0+0x320>
    80006c9a:	3f2260ef          	jal	8002d08c <printf>
    80006c9e:	02900513          	li	a0,41
    80006ca2:	0d8250ef          	jal	8002bd7a <putchar>
    80006ca6:	b75d                	j	80006c4c <wfi_exception_tests_3+0x98>

0000000080006ca8 <wfi_exception_tests_4>:

bool wfi_exception_tests_4() {
    80006ca8:	1141                	addi	sp,sp,-16

    TEST_START();
    80006caa:	00027597          	auipc	a1,0x27
    80006cae:	55e58593          	addi	a1,a1,1374 # 8002e208 <__func__.19>
    80006cb2:	00029517          	auipc	a0,0x29
    80006cb6:	32650513          	addi	a0,a0,806 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_4() {
    80006cba:	e406                	sd	ra,8(sp)
    80006cbc:	e022                	sd	s0,0(sp)
    TEST_START();
    80006cbe:	3ce260ef          	jal	8002d08c <printf>
    80006cc2:	4529                	li	a0,10
    80006cc4:	0b6250ef          	jal	8002bd7a <putchar>
    
    TEST_SETUP_EXCEPT();
    80006cc8:	944fa0ef          	jal	80000e0c <test_setup_except_function>

    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理没打开，执行wfi指令
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006ccc:	002007b7          	lui	a5,0x200
    80006cd0:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006cd4:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006cd8:	30305073          	csrwi	mideleg,0
    CSRS(CSR_HIE, 0b0100);
    80006cdc:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80006ce0:	64426073          	csrsi	hip,4

    goto_priv(PRIV_HS);
    80006ce4:	450d                	li	a0,3
    80006ce6:	a22fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006cea:	922fa0ef          	jal	80000e0c <test_setup_except_function>
    80006cee:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006cf2:	08200593          	li	a1,130
    80006cf6:	0002a617          	auipc	a2,0x2a
    80006cfa:	78a60613          	addi	a2,a2,1930 # 80031480 <__func__.0+0x1790>
    80006cfe:	00029517          	auipc	a0,0x29
    80006d02:	2f250513          	addi	a0,a0,754 # 8002fff0 <__func__.0+0x300>
    80006d06:	386260ef          	jal	8002d08c <printf>
    80006d0a:	00051797          	auipc	a5,0x51
    80006d0e:	3077c783          	lbu	a5,775(a5) # 80058011 <excpt+0x1>
    80006d12:	00029597          	auipc	a1,0x29
    80006d16:	2a658593          	addi	a1,a1,678 # 8002ffb8 <__func__.0+0x2c8>
    80006d1a:	c789                	beqz	a5,80006d24 <wfi_exception_tests_4+0x7c>
    80006d1c:	00029597          	auipc	a1,0x29
    80006d20:	2ac58593          	addi	a1,a1,684 # 8002ffc8 <__func__.0+0x2d8>
    80006d24:	00029517          	auipc	a0,0x29
    80006d28:	2e450513          	addi	a0,a0,740 # 80030008 <__func__.0+0x318>
    80006d2c:	360260ef          	jal	8002d08c <printf>
    80006d30:	00051797          	auipc	a5,0x51
    80006d34:	2e17c783          	lbu	a5,737(a5) # 80058011 <excpt+0x1>
    80006d38:	e7a1                	bnez	a5,80006d80 <wfi_exception_tests_4+0xd8>
    80006d3a:	4529                	li	a0,10
    80006d3c:	03e250ef          	jal	8002bd7a <putchar>
    80006d40:	00051797          	auipc	a5,0x51
    80006d44:	2d17c783          	lbu	a5,721(a5) # 80058011 <excpt+0x1>
    80006d48:	e795                	bnez	a5,80006d74 <wfi_exception_tests_4+0xcc>
    80006d4a:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006d4c:	00029597          	auipc	a1,0x29
    80006d50:	26c58593          	addi	a1,a1,620 # 8002ffb8 <__func__.0+0x2c8>
    80006d54:	00029517          	auipc	a0,0x29
    80006d58:	31c50513          	addi	a0,a0,796 # 80030070 <__func__.0+0x380>
    80006d5c:	330260ef          	jal	8002d08c <printf>
    80006d60:	4511                	li	a0,4
    80006d62:	9a6fa0ef          	jal	80000f08 <goto_priv>
    80006d66:	b6dfa0ef          	jal	800018d2 <reset_state>
}
    80006d6a:	60a2                	ld	ra,8(sp)
    80006d6c:	8522                	mv	a0,s0
    80006d6e:	6402                	ld	s0,0(sp)
    80006d70:	0141                	addi	sp,sp,16
    80006d72:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d74:	4401                	li	s0,0
    TEST_END();
    80006d76:	00029597          	auipc	a1,0x29
    80006d7a:	25258593          	addi	a1,a1,594 # 8002ffc8 <__func__.0+0x2d8>
    80006d7e:	bfd9                	j	80006d54 <wfi_exception_tests_4+0xac>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d80:	00029517          	auipc	a0,0x29
    80006d84:	29050513          	addi	a0,a0,656 # 80030010 <__func__.0+0x320>
    80006d88:	304260ef          	jal	8002d08c <printf>
    80006d8c:	02900513          	li	a0,41
    80006d90:	7eb240ef          	jal	8002bd7a <putchar>
    80006d94:	b75d                	j	80006d3a <wfi_exception_tests_4+0x92>

0000000080006d96 <wfi_exception_tests_5>:

bool wfi_exception_tests_5() {
    80006d96:	1141                	addi	sp,sp,-16

    TEST_START();
    80006d98:	00027597          	auipc	a1,0x27
    80006d9c:	48858593          	addi	a1,a1,1160 # 8002e220 <__func__.18>
    80006da0:	00029517          	auipc	a0,0x29
    80006da4:	23850513          	addi	a0,a0,568 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_5() {
    80006da8:	e406                	sd	ra,8(sp)
    80006daa:	e022                	sd	s0,0(sp)
    TEST_START();
    80006dac:	2e0260ef          	jal	8002d08c <printf>
    80006db0:	4529                	li	a0,10
    80006db2:	7c9240ef          	jal	8002bd7a <putchar>
    
    TEST_SETUP_EXCEPT();
    80006db6:	856fa0ef          	jal	80000e0c <test_setup_except_function>

    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006dba:	002007b7          	lui	a5,0x200
    80006dbe:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006dc2:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006dc6:	30305073          	csrwi	mideleg,0
    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理没打开，执行wfi指令

    goto_priv(PRIV_VS); //防止进入hs异常后不能直接进入m模式
    80006dca:	4509                	li	a0,2
    80006dcc:	93cfa0ef          	jal	80000f08 <goto_priv>
    goto_priv(PRIV_M); 
    80006dd0:	4511                	li	a0,4
    80006dd2:	936fa0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSIE, 0b0100);
    80006dd6:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006dda:	24426073          	csrsi	vsip,4

    goto_priv(PRIV_VS);
    80006dde:	4509                	li	a0,2
    80006de0:	928fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006de4:	828fa0ef          	jal	80000e0c <test_setup_except_function>
    80006de8:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006dec:	08200593          	li	a1,130
    80006df0:	0002a617          	auipc	a2,0x2a
    80006df4:	6f860613          	addi	a2,a2,1784 # 800314e8 <__func__.0+0x17f8>
    80006df8:	00029517          	auipc	a0,0x29
    80006dfc:	1f850513          	addi	a0,a0,504 # 8002fff0 <__func__.0+0x300>
    80006e00:	28c260ef          	jal	8002d08c <printf>
    80006e04:	00051797          	auipc	a5,0x51
    80006e08:	20d7c783          	lbu	a5,525(a5) # 80058011 <excpt+0x1>
    80006e0c:	00029597          	auipc	a1,0x29
    80006e10:	1ac58593          	addi	a1,a1,428 # 8002ffb8 <__func__.0+0x2c8>
    80006e14:	c789                	beqz	a5,80006e1e <wfi_exception_tests_5+0x88>
    80006e16:	00029597          	auipc	a1,0x29
    80006e1a:	1b258593          	addi	a1,a1,434 # 8002ffc8 <__func__.0+0x2d8>
    80006e1e:	00029517          	auipc	a0,0x29
    80006e22:	1ea50513          	addi	a0,a0,490 # 80030008 <__func__.0+0x318>
    80006e26:	266260ef          	jal	8002d08c <printf>
    80006e2a:	00051797          	auipc	a5,0x51
    80006e2e:	1e77c783          	lbu	a5,487(a5) # 80058011 <excpt+0x1>
    80006e32:	e7a1                	bnez	a5,80006e7a <wfi_exception_tests_5+0xe4>
    80006e34:	4529                	li	a0,10
    80006e36:	745240ef          	jal	8002bd7a <putchar>
    80006e3a:	00051797          	auipc	a5,0x51
    80006e3e:	1d77c783          	lbu	a5,471(a5) # 80058011 <excpt+0x1>
    80006e42:	e795                	bnez	a5,80006e6e <wfi_exception_tests_5+0xd8>
    80006e44:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006e46:	00029597          	auipc	a1,0x29
    80006e4a:	17258593          	addi	a1,a1,370 # 8002ffb8 <__func__.0+0x2c8>
    80006e4e:	00029517          	auipc	a0,0x29
    80006e52:	22250513          	addi	a0,a0,546 # 80030070 <__func__.0+0x380>
    80006e56:	236260ef          	jal	8002d08c <printf>
    80006e5a:	4511                	li	a0,4
    80006e5c:	8acfa0ef          	jal	80000f08 <goto_priv>
    80006e60:	a73fa0ef          	jal	800018d2 <reset_state>
}
    80006e64:	60a2                	ld	ra,8(sp)
    80006e66:	8522                	mv	a0,s0
    80006e68:	6402                	ld	s0,0(sp)
    80006e6a:	0141                	addi	sp,sp,16
    80006e6c:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006e6e:	4401                	li	s0,0
    TEST_END();
    80006e70:	00029597          	auipc	a1,0x29
    80006e74:	15858593          	addi	a1,a1,344 # 8002ffc8 <__func__.0+0x2d8>
    80006e78:	bfd9                	j	80006e4e <wfi_exception_tests_5+0xb8>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006e7a:	00029517          	auipc	a0,0x29
    80006e7e:	19650513          	addi	a0,a0,406 # 80030010 <__func__.0+0x320>
    80006e82:	20a260ef          	jal	8002d08c <printf>
    80006e86:	02900513          	li	a0,41
    80006e8a:	6f1240ef          	jal	8002bd7a <putchar>
    80006e8e:	b75d                	j	80006e34 <wfi_exception_tests_5+0x9e>

0000000080006e90 <wfi_exception_tests_6>:

bool wfi_exception_tests_6() {
    80006e90:	1141                	addi	sp,sp,-16

    TEST_START();
    80006e92:	00027597          	auipc	a1,0x27
    80006e96:	3a658593          	addi	a1,a1,934 # 8002e238 <__func__.17>
    80006e9a:	00029517          	auipc	a0,0x29
    80006e9e:	13e50513          	addi	a0,a0,318 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_6() {
    80006ea2:	e406                	sd	ra,8(sp)
    80006ea4:	e022                	sd	s0,0(sp)
    TEST_START();
    80006ea6:	1e6260ef          	jal	8002d08c <printf>
    80006eaa:	4529                	li	a0,10
    80006eac:	6cf240ef          	jal	8002bd7a <putchar>
    
    TEST_SETUP_EXCEPT();
    80006eb0:	f5df90ef          	jal	80000e0c <test_setup_except_function>
    
    goto_priv(PRIV_M);
    80006eb4:	4511                	li	a0,4
    80006eb6:	852fa0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006eba:	002007b7          	lui	a5,0x200
    80006ebe:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006ec2:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006ec6:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006eca:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006ece:	34426073          	csrsi	mip,4
    CSRS(mideleg, 0b0100);
    80006ed2:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_M);
    80006ed6:	4511                	li	a0,4
    80006ed8:	830fa0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006edc:	f31f90ef          	jal	80000e0c <test_setup_except_function>
    80006ee0:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006ee4:	08200593          	li	a1,130
    80006ee8:	0002a617          	auipc	a2,0x2a
    80006eec:	66860613          	addi	a2,a2,1640 # 80031550 <__func__.0+0x1860>
    80006ef0:	00029517          	auipc	a0,0x29
    80006ef4:	10050513          	addi	a0,a0,256 # 8002fff0 <__func__.0+0x300>
    80006ef8:	194260ef          	jal	8002d08c <printf>
    80006efc:	00051797          	auipc	a5,0x51
    80006f00:	1157c783          	lbu	a5,277(a5) # 80058011 <excpt+0x1>
    80006f04:	00029597          	auipc	a1,0x29
    80006f08:	0b458593          	addi	a1,a1,180 # 8002ffb8 <__func__.0+0x2c8>
    80006f0c:	c789                	beqz	a5,80006f16 <wfi_exception_tests_6+0x86>
    80006f0e:	00029597          	auipc	a1,0x29
    80006f12:	0ba58593          	addi	a1,a1,186 # 8002ffc8 <__func__.0+0x2d8>
    80006f16:	00029517          	auipc	a0,0x29
    80006f1a:	0f250513          	addi	a0,a0,242 # 80030008 <__func__.0+0x318>
    80006f1e:	16e260ef          	jal	8002d08c <printf>
    80006f22:	00051797          	auipc	a5,0x51
    80006f26:	0ef7c783          	lbu	a5,239(a5) # 80058011 <excpt+0x1>
    80006f2a:	e7a1                	bnez	a5,80006f72 <wfi_exception_tests_6+0xe2>
    80006f2c:	4529                	li	a0,10
    80006f2e:	64d240ef          	jal	8002bd7a <putchar>
    80006f32:	00051797          	auipc	a5,0x51
    80006f36:	0df7c783          	lbu	a5,223(a5) # 80058011 <excpt+0x1>
    80006f3a:	e795                	bnez	a5,80006f66 <wfi_exception_tests_6+0xd6>
    80006f3c:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    80006f3e:	00029597          	auipc	a1,0x29
    80006f42:	07a58593          	addi	a1,a1,122 # 8002ffb8 <__func__.0+0x2c8>
    80006f46:	00029517          	auipc	a0,0x29
    80006f4a:	12a50513          	addi	a0,a0,298 # 80030070 <__func__.0+0x380>
    80006f4e:	13e260ef          	jal	8002d08c <printf>
    80006f52:	4511                	li	a0,4
    80006f54:	fb5f90ef          	jal	80000f08 <goto_priv>
    80006f58:	97bfa0ef          	jal	800018d2 <reset_state>
}
    80006f5c:	60a2                	ld	ra,8(sp)
    80006f5e:	8522                	mv	a0,s0
    80006f60:	6402                	ld	s0,0(sp)
    80006f62:	0141                	addi	sp,sp,16
    80006f64:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006f66:	4401                	li	s0,0
    TEST_END();
    80006f68:	00029597          	auipc	a1,0x29
    80006f6c:	06058593          	addi	a1,a1,96 # 8002ffc8 <__func__.0+0x2d8>
    80006f70:	bfd9                	j	80006f46 <wfi_exception_tests_6+0xb6>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006f72:	00029517          	auipc	a0,0x29
    80006f76:	09e50513          	addi	a0,a0,158 # 80030010 <__func__.0+0x320>
    80006f7a:	112260ef          	jal	8002d08c <printf>
    80006f7e:	02900513          	li	a0,41
    80006f82:	5f9240ef          	jal	8002bd7a <putchar>
    80006f86:	b75d                	j	80006f2c <wfi_exception_tests_6+0x9c>

0000000080006f88 <wfi_exception_tests_7>:



bool wfi_exception_tests_7() {
    80006f88:	1141                	addi	sp,sp,-16

    TEST_START();
    80006f8a:	00027597          	auipc	a1,0x27
    80006f8e:	2c658593          	addi	a1,a1,710 # 8002e250 <__func__.16>
    80006f92:	00029517          	auipc	a0,0x29
    80006f96:	04650513          	addi	a0,a0,70 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_7() {
    80006f9a:	e406                	sd	ra,8(sp)
    80006f9c:	e022                	sd	s0,0(sp)
    TEST_START();
    80006f9e:	0ee260ef          	jal	8002d08c <printf>
    80006fa2:	4529                	li	a0,10
    80006fa4:	5d7240ef          	jal	8002bd7a <putchar>
    
    TEST_SETUP_EXCEPT();
    80006fa8:	e65f90ef          	jal	80000e0c <test_setup_except_function>

    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M); 
    80006fac:	4511                	li	a0,4
    80006fae:	f5bf90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006fb2:	002007b7          	lui	a5,0x200
    80006fb6:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSIE, 0b0100);
    80006fba:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006fbe:	24426073          	csrsi	vsip,4
    CSRS(mideleg, 0b0100);
    80006fc2:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_VS);
    80006fc6:	4509                	li	a0,2
    80006fc8:	f41f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006fcc:	e41f90ef          	jal	80000e0c <test_setup_except_function>
    80006fd0:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006fd4:	08200593          	li	a1,130
    80006fd8:	0002a617          	auipc	a2,0x2a
    80006fdc:	5e860613          	addi	a2,a2,1512 # 800315c0 <__func__.0+0x18d0>
    80006fe0:	00029517          	auipc	a0,0x29
    80006fe4:	01050513          	addi	a0,a0,16 # 8002fff0 <__func__.0+0x300>
    80006fe8:	0a4260ef          	jal	8002d08c <printf>
    80006fec:	00051797          	auipc	a5,0x51
    80006ff0:	0257c783          	lbu	a5,37(a5) # 80058011 <excpt+0x1>
    80006ff4:	00029597          	auipc	a1,0x29
    80006ff8:	fc458593          	addi	a1,a1,-60 # 8002ffb8 <__func__.0+0x2c8>
    80006ffc:	c789                	beqz	a5,80007006 <wfi_exception_tests_7+0x7e>
    80006ffe:	00029597          	auipc	a1,0x29
    80007002:	fca58593          	addi	a1,a1,-54 # 8002ffc8 <__func__.0+0x2d8>
    80007006:	00029517          	auipc	a0,0x29
    8000700a:	00250513          	addi	a0,a0,2 # 80030008 <__func__.0+0x318>
    8000700e:	07e260ef          	jal	8002d08c <printf>
    80007012:	00051797          	auipc	a5,0x51
    80007016:	fff7c783          	lbu	a5,-1(a5) # 80058011 <excpt+0x1>
    8000701a:	e7a1                	bnez	a5,80007062 <wfi_exception_tests_7+0xda>
    8000701c:	4529                	li	a0,10
    8000701e:	55d240ef          	jal	8002bd7a <putchar>
    80007022:	00051797          	auipc	a5,0x51
    80007026:	fef7c783          	lbu	a5,-17(a5) # 80058011 <excpt+0x1>
    8000702a:	e795                	bnez	a5,80007056 <wfi_exception_tests_7+0xce>
    8000702c:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    8000702e:	00029597          	auipc	a1,0x29
    80007032:	f8a58593          	addi	a1,a1,-118 # 8002ffb8 <__func__.0+0x2c8>
    80007036:	00029517          	auipc	a0,0x29
    8000703a:	03a50513          	addi	a0,a0,58 # 80030070 <__func__.0+0x380>
    8000703e:	04e260ef          	jal	8002d08c <printf>
    80007042:	4511                	li	a0,4
    80007044:	ec5f90ef          	jal	80000f08 <goto_priv>
    80007048:	88bfa0ef          	jal	800018d2 <reset_state>
}
    8000704c:	60a2                	ld	ra,8(sp)
    8000704e:	8522                	mv	a0,s0
    80007050:	6402                	ld	s0,0(sp)
    80007052:	0141                	addi	sp,sp,16
    80007054:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007056:	4401                	li	s0,0
    TEST_END();
    80007058:	00029597          	auipc	a1,0x29
    8000705c:	f7058593          	addi	a1,a1,-144 # 8002ffc8 <__func__.0+0x2d8>
    80007060:	bfd9                	j	80007036 <wfi_exception_tests_7+0xae>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007062:	00029517          	auipc	a0,0x29
    80007066:	fae50513          	addi	a0,a0,-82 # 80030010 <__func__.0+0x320>
    8000706a:	022260ef          	jal	8002d08c <printf>
    8000706e:	02900513          	li	a0,41
    80007072:	509240ef          	jal	8002bd7a <putchar>
    80007076:	b75d                	j	8000701c <wfi_exception_tests_7+0x94>

0000000080007078 <wfi_exception_tests_8>:

bool wfi_exception_tests_8() {
    80007078:	1141                	addi	sp,sp,-16

    TEST_START();
    8000707a:	00027597          	auipc	a1,0x27
    8000707e:	1ee58593          	addi	a1,a1,494 # 8002e268 <__func__.15>
    80007082:	00029517          	auipc	a0,0x29
    80007086:	f5650513          	addi	a0,a0,-170 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_8() {
    8000708a:	e406                	sd	ra,8(sp)
    8000708c:	e022                	sd	s0,0(sp)
    TEST_START();
    8000708e:	7ff250ef          	jal	8002d08c <printf>
    80007092:	4529                	li	a0,10
    80007094:	4e7240ef          	jal	8002bd7a <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断未被代理到低特权模式
    goto_priv(PRIV_M); 
    80007098:	4511                	li	a0,4
    8000709a:	e6ff90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000709e:	002007b7          	lui	a5,0x200
    800070a2:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    800070a6:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    800070aa:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_VS);
    800070ae:	4509                	li	a0,2
    800070b0:	e59f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800070b4:	d59f90ef          	jal	80000e0c <test_setup_except_function>
    800070b8:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800070bc:	08200593          	li	a1,130
    800070c0:	0002a617          	auipc	a2,0x2a
    800070c4:	56860613          	addi	a2,a2,1384 # 80031628 <__func__.0+0x1938>
    800070c8:	00029517          	auipc	a0,0x29
    800070cc:	f2850513          	addi	a0,a0,-216 # 8002fff0 <__func__.0+0x300>
    800070d0:	7bd250ef          	jal	8002d08c <printf>
    800070d4:	00051797          	auipc	a5,0x51
    800070d8:	f3d7c783          	lbu	a5,-195(a5) # 80058011 <excpt+0x1>
    800070dc:	00029597          	auipc	a1,0x29
    800070e0:	edc58593          	addi	a1,a1,-292 # 8002ffb8 <__func__.0+0x2c8>
    800070e4:	c789                	beqz	a5,800070ee <wfi_exception_tests_8+0x76>
    800070e6:	00029597          	auipc	a1,0x29
    800070ea:	ee258593          	addi	a1,a1,-286 # 8002ffc8 <__func__.0+0x2d8>
    800070ee:	00029517          	auipc	a0,0x29
    800070f2:	f1a50513          	addi	a0,a0,-230 # 80030008 <__func__.0+0x318>
    800070f6:	797250ef          	jal	8002d08c <printf>
    800070fa:	00051797          	auipc	a5,0x51
    800070fe:	f177c783          	lbu	a5,-233(a5) # 80058011 <excpt+0x1>
    80007102:	e7a1                	bnez	a5,8000714a <wfi_exception_tests_8+0xd2>
    80007104:	4529                	li	a0,10
    80007106:	475240ef          	jal	8002bd7a <putchar>
    8000710a:	00051797          	auipc	a5,0x51
    8000710e:	f077c783          	lbu	a5,-249(a5) # 80058011 <excpt+0x1>
    80007112:	e795                	bnez	a5,8000713e <wfi_exception_tests_8+0xc6>
    80007114:	4405                	li	s0,1
        excpt.triggered == false
    );  

    TEST_END();
    80007116:	00029597          	auipc	a1,0x29
    8000711a:	ea258593          	addi	a1,a1,-350 # 8002ffb8 <__func__.0+0x2c8>
    8000711e:	00029517          	auipc	a0,0x29
    80007122:	f5250513          	addi	a0,a0,-174 # 80030070 <__func__.0+0x380>
    80007126:	767250ef          	jal	8002d08c <printf>
    8000712a:	4511                	li	a0,4
    8000712c:	dddf90ef          	jal	80000f08 <goto_priv>
    80007130:	fa2fa0ef          	jal	800018d2 <reset_state>
}
    80007134:	60a2                	ld	ra,8(sp)
    80007136:	8522                	mv	a0,s0
    80007138:	6402                	ld	s0,0(sp)
    8000713a:	0141                	addi	sp,sp,16
    8000713c:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000713e:	4401                	li	s0,0
    TEST_END();
    80007140:	00029597          	auipc	a1,0x29
    80007144:	e8858593          	addi	a1,a1,-376 # 8002ffc8 <__func__.0+0x2d8>
    80007148:	bfd9                	j	8000711e <wfi_exception_tests_8+0xa6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000714a:	00029517          	auipc	a0,0x29
    8000714e:	ec650513          	addi	a0,a0,-314 # 80030010 <__func__.0+0x320>
    80007152:	73b250ef          	jal	8002d08c <printf>
    80007156:	02900513          	li	a0,41
    8000715a:	421240ef          	jal	8002bd7a <putchar>
    8000715e:	b75d                	j	80007104 <wfi_exception_tests_8+0x8c>

0000000080007160 <wfi_exception_tests_9>:

bool wfi_exception_tests_9() {
    80007160:	1141                	addi	sp,sp,-16

    TEST_START();
    80007162:	00027597          	auipc	a1,0x27
    80007166:	11e58593          	addi	a1,a1,286 # 8002e280 <__func__.14>
    8000716a:	00029517          	auipc	a0,0x29
    8000716e:	e6e50513          	addi	a0,a0,-402 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_9() {
    80007172:	e406                	sd	ra,8(sp)
    80007174:	e022                	sd	s0,0(sp)
    TEST_START();
    80007176:	717250ef          	jal	8002d08c <printf>
    8000717a:	4529                	li	a0,10
    8000717c:	3ff240ef          	jal	8002bd7a <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80007180:	4511                	li	a0,4
    80007182:	d87f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007186:	002007b7          	lui	a5,0x200
    8000718a:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    8000718e:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    80007192:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_HS);
    80007196:	450d                	li	a0,3
    80007198:	d71f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000719c:	c71f90ef          	jal	80000e0c <test_setup_except_function>
    800071a0:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800071a4:	08200593          	li	a1,130
    800071a8:	0002a617          	auipc	a2,0x2a
    800071ac:	48060613          	addi	a2,a2,1152 # 80031628 <__func__.0+0x1938>
    800071b0:	00029517          	auipc	a0,0x29
    800071b4:	e4050513          	addi	a0,a0,-448 # 8002fff0 <__func__.0+0x300>
    800071b8:	6d5250ef          	jal	8002d08c <printf>
    800071bc:	00051797          	auipc	a5,0x51
    800071c0:	e557c783          	lbu	a5,-427(a5) # 80058011 <excpt+0x1>
    800071c4:	00029597          	auipc	a1,0x29
    800071c8:	df458593          	addi	a1,a1,-524 # 8002ffb8 <__func__.0+0x2c8>
    800071cc:	c789                	beqz	a5,800071d6 <wfi_exception_tests_9+0x76>
    800071ce:	00029597          	auipc	a1,0x29
    800071d2:	dfa58593          	addi	a1,a1,-518 # 8002ffc8 <__func__.0+0x2d8>
    800071d6:	00029517          	auipc	a0,0x29
    800071da:	e3250513          	addi	a0,a0,-462 # 80030008 <__func__.0+0x318>
    800071de:	6af250ef          	jal	8002d08c <printf>
    800071e2:	00051797          	auipc	a5,0x51
    800071e6:	e2f7c783          	lbu	a5,-465(a5) # 80058011 <excpt+0x1>
    800071ea:	e7a1                	bnez	a5,80007232 <wfi_exception_tests_9+0xd2>
    800071ec:	4529                	li	a0,10
    800071ee:	38d240ef          	jal	8002bd7a <putchar>
    800071f2:	00051797          	auipc	a5,0x51
    800071f6:	e1f7c783          	lbu	a5,-481(a5) # 80058011 <excpt+0x1>
    800071fa:	e795                	bnez	a5,80007226 <wfi_exception_tests_9+0xc6>
    800071fc:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800071fe:	00029597          	auipc	a1,0x29
    80007202:	dba58593          	addi	a1,a1,-582 # 8002ffb8 <__func__.0+0x2c8>
    80007206:	00029517          	auipc	a0,0x29
    8000720a:	e6a50513          	addi	a0,a0,-406 # 80030070 <__func__.0+0x380>
    8000720e:	67f250ef          	jal	8002d08c <printf>
    80007212:	4511                	li	a0,4
    80007214:	cf5f90ef          	jal	80000f08 <goto_priv>
    80007218:	ebafa0ef          	jal	800018d2 <reset_state>
}
    8000721c:	60a2                	ld	ra,8(sp)
    8000721e:	8522                	mv	a0,s0
    80007220:	6402                	ld	s0,0(sp)
    80007222:	0141                	addi	sp,sp,16
    80007224:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007226:	4401                	li	s0,0
    TEST_END();
    80007228:	00029597          	auipc	a1,0x29
    8000722c:	da058593          	addi	a1,a1,-608 # 8002ffc8 <__func__.0+0x2d8>
    80007230:	bfd9                	j	80007206 <wfi_exception_tests_9+0xa6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007232:	00029517          	auipc	a0,0x29
    80007236:	dde50513          	addi	a0,a0,-546 # 80030010 <__func__.0+0x320>
    8000723a:	653250ef          	jal	8002d08c <printf>
    8000723e:	02900513          	li	a0,41
    80007242:	339240ef          	jal	8002bd7a <putchar>
    80007246:	b75d                	j	800071ec <wfi_exception_tests_9+0x8c>

0000000080007248 <wfi_exception_tests_10>:

bool wfi_exception_tests_10() {
    80007248:	1141                	addi	sp,sp,-16

    TEST_START();
    8000724a:	00027597          	auipc	a1,0x27
    8000724e:	04e58593          	addi	a1,a1,78 # 8002e298 <__func__.13>
    80007252:	00029517          	auipc	a0,0x29
    80007256:	d8650513          	addi	a0,a0,-634 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_10() {
    8000725a:	e406                	sd	ra,8(sp)
    8000725c:	e022                	sd	s0,0(sp)
    TEST_START();
    8000725e:	62f250ef          	jal	8002d08c <printf>
    80007262:	4529                	li	a0,10
    80007264:	317240ef          	jal	8002bd7a <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80007268:	4511                	li	a0,4
    8000726a:	c9ff90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000726e:	002007b7          	lui	a5,0x200
    80007272:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_MIE, 0x0);
    80007276:	30406073          	csrsi	mie,0
    CSRS(mideleg, 0x0);
    8000727a:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_M);
    8000727e:	4511                	li	a0,4
    80007280:	c89f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007284:	b89f90ef          	jal	80000e0c <test_setup_except_function>
    80007288:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000728c:	08200593          	li	a1,130
    80007290:	0002a617          	auipc	a2,0x2a
    80007294:	3e060613          	addi	a2,a2,992 # 80031670 <__func__.0+0x1980>
    80007298:	00029517          	auipc	a0,0x29
    8000729c:	d5850513          	addi	a0,a0,-680 # 8002fff0 <__func__.0+0x300>
    800072a0:	5ed250ef          	jal	8002d08c <printf>
    800072a4:	00051797          	auipc	a5,0x51
    800072a8:	d6d7c783          	lbu	a5,-659(a5) # 80058011 <excpt+0x1>
    800072ac:	00029597          	auipc	a1,0x29
    800072b0:	d0c58593          	addi	a1,a1,-756 # 8002ffb8 <__func__.0+0x2c8>
    800072b4:	c789                	beqz	a5,800072be <wfi_exception_tests_10+0x76>
    800072b6:	00029597          	auipc	a1,0x29
    800072ba:	d1258593          	addi	a1,a1,-750 # 8002ffc8 <__func__.0+0x2d8>
    800072be:	00029517          	auipc	a0,0x29
    800072c2:	d4a50513          	addi	a0,a0,-694 # 80030008 <__func__.0+0x318>
    800072c6:	5c7250ef          	jal	8002d08c <printf>
    800072ca:	00051797          	auipc	a5,0x51
    800072ce:	d477c783          	lbu	a5,-697(a5) # 80058011 <excpt+0x1>
    800072d2:	e7a1                	bnez	a5,8000731a <wfi_exception_tests_10+0xd2>
    800072d4:	4529                	li	a0,10
    800072d6:	2a5240ef          	jal	8002bd7a <putchar>
    800072da:	00051797          	auipc	a5,0x51
    800072de:	d377c783          	lbu	a5,-713(a5) # 80058011 <excpt+0x1>
    800072e2:	e795                	bnez	a5,8000730e <wfi_exception_tests_10+0xc6>
    800072e4:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800072e6:	00029597          	auipc	a1,0x29
    800072ea:	cd258593          	addi	a1,a1,-814 # 8002ffb8 <__func__.0+0x2c8>
    800072ee:	00029517          	auipc	a0,0x29
    800072f2:	d8250513          	addi	a0,a0,-638 # 80030070 <__func__.0+0x380>
    800072f6:	597250ef          	jal	8002d08c <printf>
    800072fa:	4511                	li	a0,4
    800072fc:	c0df90ef          	jal	80000f08 <goto_priv>
    80007300:	dd2fa0ef          	jal	800018d2 <reset_state>
}
    80007304:	60a2                	ld	ra,8(sp)
    80007306:	8522                	mv	a0,s0
    80007308:	6402                	ld	s0,0(sp)
    8000730a:	0141                	addi	sp,sp,16
    8000730c:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000730e:	4401                	li	s0,0
    TEST_END();
    80007310:	00029597          	auipc	a1,0x29
    80007314:	cb858593          	addi	a1,a1,-840 # 8002ffc8 <__func__.0+0x2d8>
    80007318:	bfd9                	j	800072ee <wfi_exception_tests_10+0xa6>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000731a:	00029517          	auipc	a0,0x29
    8000731e:	cf650513          	addi	a0,a0,-778 # 80030010 <__func__.0+0x320>
    80007322:	56b250ef          	jal	8002d08c <printf>
    80007326:	02900513          	li	a0,41
    8000732a:	251240ef          	jal	8002bd7a <putchar>
    8000732e:	b75d                	j	800072d4 <wfi_exception_tests_10+0x8c>

0000000080007330 <wfi_exception_tests_11>:

bool wfi_exception_tests_11() {
    80007330:	1141                	addi	sp,sp,-16

    TEST_START();
    80007332:	00027597          	auipc	a1,0x27
    80007336:	f7e58593          	addi	a1,a1,-130 # 8002e2b0 <__func__.12>
    8000733a:	00029517          	auipc	a0,0x29
    8000733e:	c9e50513          	addi	a0,a0,-866 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_11() {
    80007342:	e406                	sd	ra,8(sp)
    80007344:	e022                	sd	s0,0(sp)
    TEST_START();
    80007346:	547250ef          	jal	8002d08c <printf>
    8000734a:	4529                	li	a0,10
    8000734c:	22f240ef          	jal	8002bd7a <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断被代理到低特权模式
    goto_priv(PRIV_M); 
    80007350:	4511                	li	a0,4
    80007352:	bb7f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007356:	002007b7          	lui	a5,0x200
    8000735a:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    8000735e:	10405073          	csrwi	sie,0

    CSRW(mideleg, (uint64_t)-1);
    80007362:	57fd                	li	a5,-1
    80007364:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    80007368:	4509                	li	a0,2
    8000736a:	b9ff90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000736e:	a9ff90ef          	jal	80000e0c <test_setup_except_function>
    80007372:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007376:	08200593          	li	a1,130
    8000737a:	0002a617          	auipc	a2,0x2a
    8000737e:	33e60613          	addi	a2,a2,830 # 800316b8 <__func__.0+0x19c8>
    80007382:	00029517          	auipc	a0,0x29
    80007386:	c6e50513          	addi	a0,a0,-914 # 8002fff0 <__func__.0+0x300>
    8000738a:	503250ef          	jal	8002d08c <printf>
    8000738e:	00051797          	auipc	a5,0x51
    80007392:	c837c783          	lbu	a5,-893(a5) # 80058011 <excpt+0x1>
    80007396:	00029597          	auipc	a1,0x29
    8000739a:	c2258593          	addi	a1,a1,-990 # 8002ffb8 <__func__.0+0x2c8>
    8000739e:	c789                	beqz	a5,800073a8 <wfi_exception_tests_11+0x78>
    800073a0:	00029597          	auipc	a1,0x29
    800073a4:	c2858593          	addi	a1,a1,-984 # 8002ffc8 <__func__.0+0x2d8>
    800073a8:	00029517          	auipc	a0,0x29
    800073ac:	c6050513          	addi	a0,a0,-928 # 80030008 <__func__.0+0x318>
    800073b0:	4dd250ef          	jal	8002d08c <printf>
    800073b4:	00051797          	auipc	a5,0x51
    800073b8:	c5d7c783          	lbu	a5,-931(a5) # 80058011 <excpt+0x1>
    800073bc:	e7a1                	bnez	a5,80007404 <wfi_exception_tests_11+0xd4>
    800073be:	4529                	li	a0,10
    800073c0:	1bb240ef          	jal	8002bd7a <putchar>
    800073c4:	00051797          	auipc	a5,0x51
    800073c8:	c4d7c783          	lbu	a5,-947(a5) # 80058011 <excpt+0x1>
    800073cc:	e795                	bnez	a5,800073f8 <wfi_exception_tests_11+0xc8>
    800073ce:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800073d0:	00029597          	auipc	a1,0x29
    800073d4:	be858593          	addi	a1,a1,-1048 # 8002ffb8 <__func__.0+0x2c8>
    800073d8:	00029517          	auipc	a0,0x29
    800073dc:	c9850513          	addi	a0,a0,-872 # 80030070 <__func__.0+0x380>
    800073e0:	4ad250ef          	jal	8002d08c <printf>
    800073e4:	4511                	li	a0,4
    800073e6:	b23f90ef          	jal	80000f08 <goto_priv>
    800073ea:	ce8fa0ef          	jal	800018d2 <reset_state>
}
    800073ee:	60a2                	ld	ra,8(sp)
    800073f0:	8522                	mv	a0,s0
    800073f2:	6402                	ld	s0,0(sp)
    800073f4:	0141                	addi	sp,sp,16
    800073f6:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800073f8:	4401                	li	s0,0
    TEST_END();
    800073fa:	00029597          	auipc	a1,0x29
    800073fe:	bce58593          	addi	a1,a1,-1074 # 8002ffc8 <__func__.0+0x2d8>
    80007402:	bfd9                	j	800073d8 <wfi_exception_tests_11+0xa8>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007404:	00029517          	auipc	a0,0x29
    80007408:	c0c50513          	addi	a0,a0,-1012 # 80030010 <__func__.0+0x320>
    8000740c:	481250ef          	jal	8002d08c <printf>
    80007410:	02900513          	li	a0,41
    80007414:	167240ef          	jal	8002bd7a <putchar>
    80007418:	b75d                	j	800073be <wfi_exception_tests_11+0x8e>

000000008000741a <wfi_exception_tests_12>:

bool wfi_exception_tests_12() {
    8000741a:	1141                	addi	sp,sp,-16

    TEST_START();
    8000741c:	00027597          	auipc	a1,0x27
    80007420:	eac58593          	addi	a1,a1,-340 # 8002e2c8 <__func__.11>
    80007424:	00029517          	auipc	a0,0x29
    80007428:	bb450513          	addi	a0,a0,-1100 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_12() {
    8000742c:	e406                	sd	ra,8(sp)
    8000742e:	e022                	sd	s0,0(sp)
    TEST_START();
    80007430:	45d250ef          	jal	8002d08c <printf>
    80007434:	4529                	li	a0,10
    80007436:	145240ef          	jal	8002bd7a <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    8000743a:	4511                	li	a0,4
    8000743c:	acdf90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007440:	002007b7          	lui	a5,0x200
    80007444:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    80007448:	10405073          	csrwi	sie,0
    CSRW(mideleg, (uint64_t)-1);
    8000744c:	57fd                	li	a5,-1
    8000744e:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_HS);
    80007452:	450d                	li	a0,3
    80007454:	ab5f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007458:	9b5f90ef          	jal	80000e0c <test_setup_except_function>
    8000745c:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007460:	08200593          	li	a1,130
    80007464:	0002a617          	auipc	a2,0x2a
    80007468:	25460613          	addi	a2,a2,596 # 800316b8 <__func__.0+0x19c8>
    8000746c:	00029517          	auipc	a0,0x29
    80007470:	b8450513          	addi	a0,a0,-1148 # 8002fff0 <__func__.0+0x300>
    80007474:	419250ef          	jal	8002d08c <printf>
    80007478:	00051797          	auipc	a5,0x51
    8000747c:	b997c783          	lbu	a5,-1127(a5) # 80058011 <excpt+0x1>
    80007480:	00029597          	auipc	a1,0x29
    80007484:	b3858593          	addi	a1,a1,-1224 # 8002ffb8 <__func__.0+0x2c8>
    80007488:	c789                	beqz	a5,80007492 <wfi_exception_tests_12+0x78>
    8000748a:	00029597          	auipc	a1,0x29
    8000748e:	b3e58593          	addi	a1,a1,-1218 # 8002ffc8 <__func__.0+0x2d8>
    80007492:	00029517          	auipc	a0,0x29
    80007496:	b7650513          	addi	a0,a0,-1162 # 80030008 <__func__.0+0x318>
    8000749a:	3f3250ef          	jal	8002d08c <printf>
    8000749e:	00051797          	auipc	a5,0x51
    800074a2:	b737c783          	lbu	a5,-1165(a5) # 80058011 <excpt+0x1>
    800074a6:	e7a1                	bnez	a5,800074ee <wfi_exception_tests_12+0xd4>
    800074a8:	4529                	li	a0,10
    800074aa:	0d1240ef          	jal	8002bd7a <putchar>
    800074ae:	00051797          	auipc	a5,0x51
    800074b2:	b637c783          	lbu	a5,-1181(a5) # 80058011 <excpt+0x1>
    800074b6:	e795                	bnez	a5,800074e2 <wfi_exception_tests_12+0xc8>
    800074b8:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800074ba:	00029597          	auipc	a1,0x29
    800074be:	afe58593          	addi	a1,a1,-1282 # 8002ffb8 <__func__.0+0x2c8>
    800074c2:	00029517          	auipc	a0,0x29
    800074c6:	bae50513          	addi	a0,a0,-1106 # 80030070 <__func__.0+0x380>
    800074ca:	3c3250ef          	jal	8002d08c <printf>
    800074ce:	4511                	li	a0,4
    800074d0:	a39f90ef          	jal	80000f08 <goto_priv>
    800074d4:	bfefa0ef          	jal	800018d2 <reset_state>
}
    800074d8:	60a2                	ld	ra,8(sp)
    800074da:	8522                	mv	a0,s0
    800074dc:	6402                	ld	s0,0(sp)
    800074de:	0141                	addi	sp,sp,16
    800074e0:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800074e2:	4401                	li	s0,0
    TEST_END();
    800074e4:	00029597          	auipc	a1,0x29
    800074e8:	ae458593          	addi	a1,a1,-1308 # 8002ffc8 <__func__.0+0x2d8>
    800074ec:	bfd9                	j	800074c2 <wfi_exception_tests_12+0xa8>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800074ee:	00029517          	auipc	a0,0x29
    800074f2:	b2250513          	addi	a0,a0,-1246 # 80030010 <__func__.0+0x320>
    800074f6:	397250ef          	jal	8002d08c <printf>
    800074fa:	02900513          	li	a0,41
    800074fe:	07d240ef          	jal	8002bd7a <putchar>
    80007502:	b75d                	j	800074a8 <wfi_exception_tests_12+0x8e>

0000000080007504 <wfi_exception_tests_13>:

bool wfi_exception_tests_13() {
    80007504:	1141                	addi	sp,sp,-16

    TEST_START();
    80007506:	00027597          	auipc	a1,0x27
    8000750a:	dda58593          	addi	a1,a1,-550 # 8002e2e0 <__func__.10>
    8000750e:	00029517          	auipc	a0,0x29
    80007512:	aca50513          	addi	a0,a0,-1334 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_13() {
    80007516:	e406                	sd	ra,8(sp)
    80007518:	e022                	sd	s0,0(sp)
    TEST_START();
    8000751a:	373250ef          	jal	8002d08c <printf>
    8000751e:	4529                	li	a0,10
    80007520:	05b240ef          	jal	8002bd7a <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80007524:	4511                	li	a0,4
    80007526:	9e3f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000752a:	002007b7          	lui	a5,0x200
    8000752e:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_MIE, 0x0);
    80007532:	30405073          	csrwi	mie,0
    CSRW(mideleg, (uint64_t)-1);
    80007536:	57fd                	li	a5,-1
    80007538:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_M);
    8000753c:	4511                	li	a0,4
    8000753e:	9cbf90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007542:	8cbf90ef          	jal	80000e0c <test_setup_except_function>
    80007546:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000754a:	08200593          	li	a1,130
    8000754e:	0002a617          	auipc	a2,0x2a
    80007552:	1b260613          	addi	a2,a2,434 # 80031700 <__func__.0+0x1a10>
    80007556:	00029517          	auipc	a0,0x29
    8000755a:	a9a50513          	addi	a0,a0,-1382 # 8002fff0 <__func__.0+0x300>
    8000755e:	32f250ef          	jal	8002d08c <printf>
    80007562:	00051797          	auipc	a5,0x51
    80007566:	aaf7c783          	lbu	a5,-1361(a5) # 80058011 <excpt+0x1>
    8000756a:	00029597          	auipc	a1,0x29
    8000756e:	a4e58593          	addi	a1,a1,-1458 # 8002ffb8 <__func__.0+0x2c8>
    80007572:	c789                	beqz	a5,8000757c <wfi_exception_tests_13+0x78>
    80007574:	00029597          	auipc	a1,0x29
    80007578:	a5458593          	addi	a1,a1,-1452 # 8002ffc8 <__func__.0+0x2d8>
    8000757c:	00029517          	auipc	a0,0x29
    80007580:	a8c50513          	addi	a0,a0,-1396 # 80030008 <__func__.0+0x318>
    80007584:	309250ef          	jal	8002d08c <printf>
    80007588:	00051797          	auipc	a5,0x51
    8000758c:	a897c783          	lbu	a5,-1399(a5) # 80058011 <excpt+0x1>
    80007590:	e7a1                	bnez	a5,800075d8 <wfi_exception_tests_13+0xd4>
    80007592:	4529                	li	a0,10
    80007594:	7e6240ef          	jal	8002bd7a <putchar>
    80007598:	00051797          	auipc	a5,0x51
    8000759c:	a797c783          	lbu	a5,-1415(a5) # 80058011 <excpt+0x1>
    800075a0:	e795                	bnez	a5,800075cc <wfi_exception_tests_13+0xc8>
    800075a2:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800075a4:	00029597          	auipc	a1,0x29
    800075a8:	a1458593          	addi	a1,a1,-1516 # 8002ffb8 <__func__.0+0x2c8>
    800075ac:	00029517          	auipc	a0,0x29
    800075b0:	ac450513          	addi	a0,a0,-1340 # 80030070 <__func__.0+0x380>
    800075b4:	2d9250ef          	jal	8002d08c <printf>
    800075b8:	4511                	li	a0,4
    800075ba:	94ff90ef          	jal	80000f08 <goto_priv>
    800075be:	b14fa0ef          	jal	800018d2 <reset_state>
}
    800075c2:	60a2                	ld	ra,8(sp)
    800075c4:	8522                	mv	a0,s0
    800075c6:	6402                	ld	s0,0(sp)
    800075c8:	0141                	addi	sp,sp,16
    800075ca:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800075cc:	4401                	li	s0,0
    TEST_END();
    800075ce:	00029597          	auipc	a1,0x29
    800075d2:	9fa58593          	addi	a1,a1,-1542 # 8002ffc8 <__func__.0+0x2d8>
    800075d6:	bfd9                	j	800075ac <wfi_exception_tests_13+0xa8>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800075d8:	00029517          	auipc	a0,0x29
    800075dc:	a3850513          	addi	a0,a0,-1480 # 80030010 <__func__.0+0x320>
    800075e0:	2ad250ef          	jal	8002d08c <printf>
    800075e4:	02900513          	li	a0,41
    800075e8:	792240ef          	jal	8002bd7a <putchar>
    800075ec:	b75d                	j	80007592 <wfi_exception_tests_13+0x8e>

00000000800075ee <wfi_exception_tests_14>:

bool wfi_exception_tests_14() {
    800075ee:	1141                	addi	sp,sp,-16

    TEST_START();
    800075f0:	00027597          	auipc	a1,0x27
    800075f4:	d0858593          	addi	a1,a1,-760 # 8002e2f8 <__func__.9>
    800075f8:	00029517          	auipc	a0,0x29
    800075fc:	9e050513          	addi	a0,a0,-1568 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_14() {
    80007600:	e406                	sd	ra,8(sp)
    80007602:	e022                	sd	s0,0(sp)
    TEST_START();
    80007604:	289250ef          	jal	8002d08c <printf>
    80007608:	4529                	li	a0,10
    8000760a:	770240ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8000760e:	4511                	li	a0,4
    80007610:	8f9f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007614:	002007b7          	lui	a5,0x200
    80007618:	3007b073          	csrc	mstatus,a5
    CSRS(mideleg, 0b0100); 
    8000761c:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIE, 0b0100);
    80007620:	60426073          	csrsi	hie,4

    goto_priv(PRIV_VS);
    80007624:	4509                	li	a0,2
    80007626:	8e3f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000762a:	fe2f90ef          	jal	80000e0c <test_setup_except_function>
    8000762e:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007632:	08200593          	li	a1,130
    80007636:	0002a617          	auipc	a2,0x2a
    8000763a:	f8a60613          	addi	a2,a2,-118 # 800315c0 <__func__.0+0x18d0>
    8000763e:	00029517          	auipc	a0,0x29
    80007642:	9b250513          	addi	a0,a0,-1614 # 8002fff0 <__func__.0+0x300>
    80007646:	247250ef          	jal	8002d08c <printf>
    8000764a:	00051797          	auipc	a5,0x51
    8000764e:	9c77c783          	lbu	a5,-1593(a5) # 80058011 <excpt+0x1>
    80007652:	00029597          	auipc	a1,0x29
    80007656:	96658593          	addi	a1,a1,-1690 # 8002ffb8 <__func__.0+0x2c8>
    8000765a:	c789                	beqz	a5,80007664 <wfi_exception_tests_14+0x76>
    8000765c:	00029597          	auipc	a1,0x29
    80007660:	96c58593          	addi	a1,a1,-1684 # 8002ffc8 <__func__.0+0x2d8>
    80007664:	00029517          	auipc	a0,0x29
    80007668:	9a450513          	addi	a0,a0,-1628 # 80030008 <__func__.0+0x318>
    8000766c:	221250ef          	jal	8002d08c <printf>
    80007670:	00051797          	auipc	a5,0x51
    80007674:	9a17c783          	lbu	a5,-1631(a5) # 80058011 <excpt+0x1>
    80007678:	e7a1                	bnez	a5,800076c0 <wfi_exception_tests_14+0xd2>
    8000767a:	4529                	li	a0,10
    8000767c:	6fe240ef          	jal	8002bd7a <putchar>
    80007680:	00051797          	auipc	a5,0x51
    80007684:	9917c783          	lbu	a5,-1647(a5) # 80058011 <excpt+0x1>
    80007688:	e795                	bnez	a5,800076b4 <wfi_exception_tests_14+0xc6>
    8000768a:	4405                	li	s0,1
        excpt.triggered == false
    ); 
    
    TEST_END();
    8000768c:	00029597          	auipc	a1,0x29
    80007690:	92c58593          	addi	a1,a1,-1748 # 8002ffb8 <__func__.0+0x2c8>
    80007694:	00029517          	auipc	a0,0x29
    80007698:	9dc50513          	addi	a0,a0,-1572 # 80030070 <__func__.0+0x380>
    8000769c:	1f1250ef          	jal	8002d08c <printf>
    800076a0:	4511                	li	a0,4
    800076a2:	867f90ef          	jal	80000f08 <goto_priv>
    800076a6:	a2cfa0ef          	jal	800018d2 <reset_state>
}
    800076aa:	60a2                	ld	ra,8(sp)
    800076ac:	8522                	mv	a0,s0
    800076ae:	6402                	ld	s0,0(sp)
    800076b0:	0141                	addi	sp,sp,16
    800076b2:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800076b4:	4401                	li	s0,0
    TEST_END();
    800076b6:	00029597          	auipc	a1,0x29
    800076ba:	91258593          	addi	a1,a1,-1774 # 8002ffc8 <__func__.0+0x2d8>
    800076be:	bfd9                	j	80007694 <wfi_exception_tests_14+0xa6>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800076c0:	00029517          	auipc	a0,0x29
    800076c4:	95050513          	addi	a0,a0,-1712 # 80030010 <__func__.0+0x320>
    800076c8:	1c5250ef          	jal	8002d08c <printf>
    800076cc:	02900513          	li	a0,41
    800076d0:	6aa240ef          	jal	8002bd7a <putchar>
    800076d4:	b75d                	j	8000767a <wfi_exception_tests_14+0x8c>

00000000800076d6 <wfi_exception_tests_15>:



bool wfi_exception_tests_15() {
    800076d6:	1101                	addi	sp,sp,-32

    TEST_START();
    800076d8:	00027597          	auipc	a1,0x27
    800076dc:	c3858593          	addi	a1,a1,-968 # 8002e310 <__func__.8>
    800076e0:	00029517          	auipc	a0,0x29
    800076e4:	8f850513          	addi	a0,a0,-1800 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_15() {
    800076e8:	ec06                	sd	ra,24(sp)
    800076ea:	e822                	sd	s0,16(sp)
    800076ec:	e426                	sd	s1,8(sp)
    TEST_START();
    800076ee:	19f250ef          	jal	8002d08c <printf>
    800076f2:	4529                	li	a0,10
    800076f4:	686240ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    800076f8:	4511                	li	a0,4
    800076fa:	80ff90ef          	jal	80000f08 <goto_priv>
    CSRS(mstatus, MSTATUS_TW);
    800076fe:	002007b7          	lui	a5,0x200
    80007702:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80007706:	450d                	li	a0,3
    80007708:	801f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000770c:	f00f90ef          	jal	80000e0c <test_setup_except_function>
    80007710:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    80007714:	08200593          	li	a1,130
    80007718:	0002a617          	auipc	a2,0x2a
    8000771c:	03060613          	addi	a2,a2,48 # 80031748 <__func__.0+0x1a58>
    80007720:	00029517          	auipc	a0,0x29
    80007724:	8d050513          	addi	a0,a0,-1840 # 8002fff0 <__func__.0+0x300>
    80007728:	165250ef          	jal	8002d08c <printf>
    8000772c:	00051797          	auipc	a5,0x51
    80007730:	8e57c783          	lbu	a5,-1819(a5) # 80058011 <excpt+0x1>
    80007734:	00051497          	auipc	s1,0x51
    80007738:	8dc48493          	addi	s1,s1,-1828 # 80058010 <excpt>
    8000773c:	00029597          	auipc	a1,0x29
    80007740:	88c58593          	addi	a1,a1,-1908 # 8002ffc8 <__func__.0+0x2d8>
    80007744:	cf89                	beqz	a5,8000775e <wfi_exception_tests_15+0x88>
    80007746:	6498                	ld	a4,8(s1)
    80007748:	4789                	li	a5,2
    8000774a:	00029597          	auipc	a1,0x29
    8000774e:	86e58593          	addi	a1,a1,-1938 # 8002ffb8 <__func__.0+0x2c8>
    80007752:	00f70663          	beq	a4,a5,8000775e <wfi_exception_tests_15+0x88>
    80007756:	00029597          	auipc	a1,0x29
    8000775a:	87258593          	addi	a1,a1,-1934 # 8002ffc8 <__func__.0+0x2d8>
    8000775e:	00029517          	auipc	a0,0x29
    80007762:	8aa50513          	addi	a0,a0,-1878 # 80030008 <__func__.0+0x318>
    80007766:	127250ef          	jal	8002d08c <printf>
    8000776a:	00051797          	auipc	a5,0x51
    8000776e:	8a77c783          	lbu	a5,-1881(a5) # 80058011 <excpt+0x1>
    80007772:	c789                	beqz	a5,8000777c <wfi_exception_tests_15+0xa6>
    80007774:	6498                	ld	a4,8(s1)
    80007776:	4789                	li	a5,2
    80007778:	00f70c63          	beq	a4,a5,80007790 <wfi_exception_tests_15+0xba>
    8000777c:	00029517          	auipc	a0,0x29
    80007780:	89450513          	addi	a0,a0,-1900 # 80030010 <__func__.0+0x320>
    80007784:	109250ef          	jal	8002d08c <printf>
    80007788:	02900513          	li	a0,41
    8000778c:	5ee240ef          	jal	8002bd7a <putchar>
    80007790:	4529                	li	a0,10
    80007792:	5e8240ef          	jal	8002bd7a <putchar>
    80007796:	00051417          	auipc	s0,0x51
    8000779a:	87b44403          	lbu	s0,-1925(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8000779e:	00029597          	auipc	a1,0x29
    800077a2:	82a58593          	addi	a1,a1,-2006 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    800077a6:	cc11                	beqz	s0,800077c2 <wfi_exception_tests_15+0xec>
    800077a8:	6498                	ld	a4,8(s1)
    800077aa:	4789                	li	a5,2
    TEST_END();
    800077ac:	00029597          	auipc	a1,0x29
    800077b0:	80c58593          	addi	a1,a1,-2036 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    800077b4:	00f70763          	beq	a4,a5,800077c2 <wfi_exception_tests_15+0xec>
    800077b8:	4401                	li	s0,0
    TEST_END();
    800077ba:	00029597          	auipc	a1,0x29
    800077be:	80e58593          	addi	a1,a1,-2034 # 8002ffc8 <__func__.0+0x2d8>
    800077c2:	00029517          	auipc	a0,0x29
    800077c6:	8ae50513          	addi	a0,a0,-1874 # 80030070 <__func__.0+0x380>
    800077ca:	0c3250ef          	jal	8002d08c <printf>
    800077ce:	4511                	li	a0,4
    800077d0:	f38f90ef          	jal	80000f08 <goto_priv>
    800077d4:	8fefa0ef          	jal	800018d2 <reset_state>
}
    800077d8:	60e2                	ld	ra,24(sp)
    800077da:	8522                	mv	a0,s0
    800077dc:	6442                	ld	s0,16(sp)
    800077de:	64a2                	ld	s1,8(sp)
    800077e0:	6105                	addi	sp,sp,32
    800077e2:	8082                	ret

00000000800077e4 <wfi_exception_tests_16>:
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to vs.
     */


bool wfi_exception_tests_16() {
    800077e4:	1101                	addi	sp,sp,-32

    TEST_START();
    800077e6:	00027597          	auipc	a1,0x27
    800077ea:	b4258593          	addi	a1,a1,-1214 # 8002e328 <__func__.7>
    800077ee:	00028517          	auipc	a0,0x28
    800077f2:	7ea50513          	addi	a0,a0,2026 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_16() {
    800077f6:	ec06                	sd	ra,24(sp)
    800077f8:	e822                	sd	s0,16(sp)
    800077fa:	e426                	sd	s1,8(sp)
    TEST_START();
    800077fc:	091250ef          	jal	8002d08c <printf>
    80007800:	4529                	li	a0,10
    80007802:	578240ef          	jal	8002bd7a <putchar>
    CSRS(mstatus, MSTATUS_TW);
    80007806:	002007b7          	lui	a5,0x200
    8000780a:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HIDELEG, 0b0100);      
    8000780e:	60326073          	csrsi	hideleg,4
    CSRS(CSR_VSIE, 0b0010);           
    80007812:	20416073          	csrsi	vsie,2
    
    goto_priv(PRIV_VS);
    80007816:	4509                	li	a0,2
    80007818:	ef0f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000781c:	df0f90ef          	jal	80000e0c <test_setup_except_function>
    80007820:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007824:	08200593          	li	a1,130
    80007828:	0002a617          	auipc	a2,0x2a
    8000782c:	f6860613          	addi	a2,a2,-152 # 80031790 <__func__.0+0x1aa0>
    80007830:	00028517          	auipc	a0,0x28
    80007834:	7c050513          	addi	a0,a0,1984 # 8002fff0 <__func__.0+0x300>
    80007838:	055250ef          	jal	8002d08c <printf>
    8000783c:	00050797          	auipc	a5,0x50
    80007840:	7d57c783          	lbu	a5,2005(a5) # 80058011 <excpt+0x1>
    80007844:	00050497          	auipc	s1,0x50
    80007848:	7cc48493          	addi	s1,s1,1996 # 80058010 <excpt>
    8000784c:	00028597          	auipc	a1,0x28
    80007850:	77c58593          	addi	a1,a1,1916 # 8002ffc8 <__func__.0+0x2d8>
    80007854:	cf89                	beqz	a5,8000786e <wfi_exception_tests_16+0x8a>
    80007856:	6498                	ld	a4,8(s1)
    80007858:	4789                	li	a5,2
    8000785a:	00028597          	auipc	a1,0x28
    8000785e:	75e58593          	addi	a1,a1,1886 # 8002ffb8 <__func__.0+0x2c8>
    80007862:	00f70663          	beq	a4,a5,8000786e <wfi_exception_tests_16+0x8a>
    80007866:	00028597          	auipc	a1,0x28
    8000786a:	76258593          	addi	a1,a1,1890 # 8002ffc8 <__func__.0+0x2d8>
    8000786e:	00028517          	auipc	a0,0x28
    80007872:	79a50513          	addi	a0,a0,1946 # 80030008 <__func__.0+0x318>
    80007876:	017250ef          	jal	8002d08c <printf>
    8000787a:	00050797          	auipc	a5,0x50
    8000787e:	7977c783          	lbu	a5,1943(a5) # 80058011 <excpt+0x1>
    80007882:	c789                	beqz	a5,8000788c <wfi_exception_tests_16+0xa8>
    80007884:	6498                	ld	a4,8(s1)
    80007886:	4789                	li	a5,2
    80007888:	00f70c63          	beq	a4,a5,800078a0 <wfi_exception_tests_16+0xbc>
    8000788c:	00028517          	auipc	a0,0x28
    80007890:	78450513          	addi	a0,a0,1924 # 80030010 <__func__.0+0x320>
    80007894:	7f8250ef          	jal	8002d08c <printf>
    80007898:	02900513          	li	a0,41
    8000789c:	4de240ef          	jal	8002bd7a <putchar>
    800078a0:	4529                	li	a0,10
    800078a2:	4d8240ef          	jal	8002bd7a <putchar>
    800078a6:	00050417          	auipc	s0,0x50
    800078aa:	76b44403          	lbu	s0,1899(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    goto_priv(PRIV_M);
    800078ae:	4511                	li	a0,4
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    800078b0:	c409                	beqz	s0,800078ba <wfi_exception_tests_16+0xd6>
    800078b2:	6498                	ld	a4,8(s1)
    800078b4:	4789                	li	a5,2
    800078b6:	02f70e63          	beq	a4,a5,800078f2 <wfi_exception_tests_16+0x10e>
    goto_priv(PRIV_M);
    800078ba:	e4ef90ef          	jal	80000f08 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    800078be:	002007b7          	lui	a5,0x200
    800078c2:	3007b073          	csrc	mstatus,a5
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    800078c6:	4401                	li	s0,0
    TEST_END();
    800078c8:	00028597          	auipc	a1,0x28
    800078cc:	70058593          	addi	a1,a1,1792 # 8002ffc8 <__func__.0+0x2d8>
    800078d0:	00028517          	auipc	a0,0x28
    800078d4:	7a050513          	addi	a0,a0,1952 # 80030070 <__func__.0+0x380>
    800078d8:	7b4250ef          	jal	8002d08c <printf>
    800078dc:	4511                	li	a0,4
    800078de:	e2af90ef          	jal	80000f08 <goto_priv>
    800078e2:	ff1f90ef          	jal	800018d2 <reset_state>
}
    800078e6:	60e2                	ld	ra,24(sp)
    800078e8:	8522                	mv	a0,s0
    800078ea:	6442                	ld	s0,16(sp)
    800078ec:	64a2                	ld	s1,8(sp)
    800078ee:	6105                	addi	sp,sp,32
    800078f0:	8082                	ret
    goto_priv(PRIV_M);
    800078f2:	e16f90ef          	jal	80000f08 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    800078f6:	002007b7          	lui	a5,0x200
    800078fa:	3007b073          	csrc	mstatus,a5
    TEST_END();
    800078fe:	00028597          	auipc	a1,0x28
    80007902:	6ba58593          	addi	a1,a1,1722 # 8002ffb8 <__func__.0+0x2c8>
    80007906:	b7e9                	j	800078d0 <wfi_exception_tests_16+0xec>

0000000080007908 <wfi_exception_tests_17>:

bool wfi_exception_tests_17() {
    80007908:	1141                	addi	sp,sp,-16

    TEST_START();
    8000790a:	00027597          	auipc	a1,0x27
    8000790e:	a3658593          	addi	a1,a1,-1482 # 8002e340 <__func__.6>
    80007912:	00028517          	auipc	a0,0x28
    80007916:	6c650513          	addi	a0,a0,1734 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_17() {
    8000791a:	e406                	sd	ra,8(sp)
    8000791c:	e022                	sd	s0,0(sp)
    TEST_START();
    8000791e:	76e250ef          	jal	8002d08c <printf>
    80007922:	4529                	li	a0,10
    80007924:	456240ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    80007928:	4511                	li	a0,4
    8000792a:	ddef90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000792e:	002007b7          	lui	a5,0x200
    80007932:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_HSTATUS,HSTATUS_VTW);
    80007936:	6007b073          	csrc	hstatus,a5

    goto_priv(PRIV_VS);
    8000793a:	4509                	li	a0,2
    8000793c:	dccf90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007940:	cccf90ef          	jal	80000e0c <test_setup_except_function>
    80007944:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007948:	08200593          	li	a1,130
    8000794c:	0002a617          	auipc	a2,0x2a
    80007950:	e8c60613          	addi	a2,a2,-372 # 800317d8 <__func__.0+0x1ae8>
    80007954:	00028517          	auipc	a0,0x28
    80007958:	69c50513          	addi	a0,a0,1692 # 8002fff0 <__func__.0+0x300>
    8000795c:	730250ef          	jal	8002d08c <printf>
    80007960:	00050797          	auipc	a5,0x50
    80007964:	6b17c783          	lbu	a5,1713(a5) # 80058011 <excpt+0x1>
    80007968:	00028597          	auipc	a1,0x28
    8000796c:	65058593          	addi	a1,a1,1616 # 8002ffb8 <__func__.0+0x2c8>
    80007970:	c789                	beqz	a5,8000797a <wfi_exception_tests_17+0x72>
    80007972:	00028597          	auipc	a1,0x28
    80007976:	65658593          	addi	a1,a1,1622 # 8002ffc8 <__func__.0+0x2d8>
    8000797a:	00028517          	auipc	a0,0x28
    8000797e:	68e50513          	addi	a0,a0,1678 # 80030008 <__func__.0+0x318>
    80007982:	70a250ef          	jal	8002d08c <printf>
    80007986:	00050797          	auipc	a5,0x50
    8000798a:	68b7c783          	lbu	a5,1675(a5) # 80058011 <excpt+0x1>
    8000798e:	e7a1                	bnez	a5,800079d6 <wfi_exception_tests_17+0xce>
    80007990:	4529                	li	a0,10
    80007992:	3e8240ef          	jal	8002bd7a <putchar>
    80007996:	00050797          	auipc	a5,0x50
    8000799a:	67b7c783          	lbu	a5,1659(a5) # 80058011 <excpt+0x1>
    8000799e:	e795                	bnez	a5,800079ca <wfi_exception_tests_17+0xc2>
    800079a0:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800079a2:	00028597          	auipc	a1,0x28
    800079a6:	61658593          	addi	a1,a1,1558 # 8002ffb8 <__func__.0+0x2c8>
    800079aa:	00028517          	auipc	a0,0x28
    800079ae:	6c650513          	addi	a0,a0,1734 # 80030070 <__func__.0+0x380>
    800079b2:	6da250ef          	jal	8002d08c <printf>
    800079b6:	4511                	li	a0,4
    800079b8:	d50f90ef          	jal	80000f08 <goto_priv>
    800079bc:	f17f90ef          	jal	800018d2 <reset_state>
}
    800079c0:	60a2                	ld	ra,8(sp)
    800079c2:	8522                	mv	a0,s0
    800079c4:	6402                	ld	s0,0(sp)
    800079c6:	0141                	addi	sp,sp,16
    800079c8:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    800079ca:	4401                	li	s0,0
    TEST_END();
    800079cc:	00028597          	auipc	a1,0x28
    800079d0:	5fc58593          	addi	a1,a1,1532 # 8002ffc8 <__func__.0+0x2d8>
    800079d4:	bfd9                	j	800079aa <wfi_exception_tests_17+0xa2>
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    800079d6:	00028517          	auipc	a0,0x28
    800079da:	63a50513          	addi	a0,a0,1594 # 80030010 <__func__.0+0x320>
    800079de:	6ae250ef          	jal	8002d08c <printf>
    800079e2:	02900513          	li	a0,41
    800079e6:	394240ef          	jal	8002bd7a <putchar>
    800079ea:	b75d                	j	80007990 <wfi_exception_tests_17+0x88>

00000000800079ec <wfi_exception_tests_18>:


bool wfi_exception_tests_18() {
    800079ec:	1101                	addi	sp,sp,-32

    TEST_START();
    800079ee:	00027597          	auipc	a1,0x27
    800079f2:	96a58593          	addi	a1,a1,-1686 # 8002e358 <__func__.5>
    800079f6:	00028517          	auipc	a0,0x28
    800079fa:	5e250513          	addi	a0,a0,1506 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_18() {
    800079fe:	ec06                	sd	ra,24(sp)
    80007a00:	e822                	sd	s0,16(sp)
    80007a02:	e426                	sd	s1,8(sp)
    TEST_START();
    80007a04:	688250ef          	jal	8002d08c <printf>
    80007a08:	4529                	li	a0,10
    80007a0a:	370240ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    80007a0e:	4511                	li	a0,4
    80007a10:	cf8f90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);  
    80007a14:	002007b7          	lui	a5,0x200
    80007a18:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_VS);
    80007a1c:	4509                	li	a0,2
    80007a1e:	ceaf90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007a22:	beaf90ef          	jal	80000e0c <test_setup_except_function>
    80007a26:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007a2a:	08200593          	li	a1,130
    80007a2e:	0002a617          	auipc	a2,0x2a
    80007a32:	df260613          	addi	a2,a2,-526 # 80031820 <__func__.0+0x1b30>
    80007a36:	00028517          	auipc	a0,0x28
    80007a3a:	5ba50513          	addi	a0,a0,1466 # 8002fff0 <__func__.0+0x300>
    80007a3e:	64e250ef          	jal	8002d08c <printf>
    80007a42:	00050797          	auipc	a5,0x50
    80007a46:	5cf7c783          	lbu	a5,1487(a5) # 80058011 <excpt+0x1>
    80007a4a:	00050497          	auipc	s1,0x50
    80007a4e:	5c648493          	addi	s1,s1,1478 # 80058010 <excpt>
    80007a52:	00028597          	auipc	a1,0x28
    80007a56:	57658593          	addi	a1,a1,1398 # 8002ffc8 <__func__.0+0x2d8>
    80007a5a:	cf89                	beqz	a5,80007a74 <wfi_exception_tests_18+0x88>
    80007a5c:	6498                	ld	a4,8(s1)
    80007a5e:	47d9                	li	a5,22
    80007a60:	00028597          	auipc	a1,0x28
    80007a64:	55858593          	addi	a1,a1,1368 # 8002ffb8 <__func__.0+0x2c8>
    80007a68:	00f70663          	beq	a4,a5,80007a74 <wfi_exception_tests_18+0x88>
    80007a6c:	00028597          	auipc	a1,0x28
    80007a70:	55c58593          	addi	a1,a1,1372 # 8002ffc8 <__func__.0+0x2d8>
    80007a74:	00028517          	auipc	a0,0x28
    80007a78:	59450513          	addi	a0,a0,1428 # 80030008 <__func__.0+0x318>
    80007a7c:	610250ef          	jal	8002d08c <printf>
    80007a80:	00050797          	auipc	a5,0x50
    80007a84:	5917c783          	lbu	a5,1425(a5) # 80058011 <excpt+0x1>
    80007a88:	c789                	beqz	a5,80007a92 <wfi_exception_tests_18+0xa6>
    80007a8a:	6498                	ld	a4,8(s1)
    80007a8c:	47d9                	li	a5,22
    80007a8e:	00f70c63          	beq	a4,a5,80007aa6 <wfi_exception_tests_18+0xba>
    80007a92:	00028517          	auipc	a0,0x28
    80007a96:	57e50513          	addi	a0,a0,1406 # 80030010 <__func__.0+0x320>
    80007a9a:	5f2250ef          	jal	8002d08c <printf>
    80007a9e:	02900513          	li	a0,41
    80007aa2:	2d8240ef          	jal	8002bd7a <putchar>
    80007aa6:	4529                	li	a0,10
    80007aa8:	2d2240ef          	jal	8002bd7a <putchar>
    80007aac:	00050417          	auipc	s0,0x50
    80007ab0:	56544403          	lbu	s0,1381(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007ab4:	00028597          	auipc	a1,0x28
    80007ab8:	51458593          	addi	a1,a1,1300 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007abc:	cc11                	beqz	s0,80007ad8 <wfi_exception_tests_18+0xec>
    80007abe:	6498                	ld	a4,8(s1)
    80007ac0:	47d9                	li	a5,22
    TEST_END();
    80007ac2:	00028597          	auipc	a1,0x28
    80007ac6:	4f658593          	addi	a1,a1,1270 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007aca:	00f70763          	beq	a4,a5,80007ad8 <wfi_exception_tests_18+0xec>
    80007ace:	4401                	li	s0,0
    TEST_END();
    80007ad0:	00028597          	auipc	a1,0x28
    80007ad4:	4f858593          	addi	a1,a1,1272 # 8002ffc8 <__func__.0+0x2d8>
    80007ad8:	00028517          	auipc	a0,0x28
    80007adc:	59850513          	addi	a0,a0,1432 # 80030070 <__func__.0+0x380>
    80007ae0:	5ac250ef          	jal	8002d08c <printf>
    80007ae4:	4511                	li	a0,4
    80007ae6:	c22f90ef          	jal	80000f08 <goto_priv>
    80007aea:	de9f90ef          	jal	800018d2 <reset_state>
}
    80007aee:	60e2                	ld	ra,24(sp)
    80007af0:	8522                	mv	a0,s0
    80007af2:	6442                	ld	s0,16(sp)
    80007af4:	64a2                	ld	s1,8(sp)
    80007af6:	6105                	addi	sp,sp,32
    80007af8:	8082                	ret

0000000080007afa <wfi_exception_tests_19>:

bool wfi_exception_tests_19() {
    80007afa:	1101                	addi	sp,sp,-32

    TEST_START();
    80007afc:	00027597          	auipc	a1,0x27
    80007b00:	87458593          	addi	a1,a1,-1932 # 8002e370 <__func__.4>
    80007b04:	00028517          	auipc	a0,0x28
    80007b08:	4d450513          	addi	a0,a0,1236 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_19() {
    80007b0c:	ec06                	sd	ra,24(sp)
    80007b0e:	e822                	sd	s0,16(sp)
    80007b10:	e426                	sd	s1,8(sp)
    TEST_START();
    80007b12:	57a250ef          	jal	8002d08c <printf>
    80007b16:	4529                	li	a0,10
    80007b18:	262240ef          	jal	8002bd7a <putchar>
    //V=1&mstatus.TW=0 , hstatus.vtw=1时，在VS模式下执行WFI指令，并未在一个约定时间内产生中断
    goto_priv(PRIV_M);
    80007b1c:	4511                	li	a0,4
    80007b1e:	beaf90ef          	jal	80000f08 <goto_priv>

    CSRW(CSR_SIE, 0x0);
    80007b22:	10405073          	csrwi	sie,0
    CSRS(CSR_HSTATUS,HSTATUS_VTW);
    80007b26:	002007b7          	lui	a5,0x200
    80007b2a:	6007a073          	csrs	hstatus,a5
    CSRC(mstatus, MSTATUS_TW);
    80007b2e:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_VS);
    80007b32:	4509                	li	a0,2
    80007b34:	bd4f90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007b38:	ad4f90ef          	jal	80000e0c <test_setup_except_function>
    80007b3c:	10500073          	wfi
    wfi();
        printf("%d\n",excpt.cause);
    80007b40:	00050417          	auipc	s0,0x50
    80007b44:	4d040413          	addi	s0,s0,1232 # 80058010 <excpt>
    80007b48:	640c                	ld	a1,8(s0)
    80007b4a:	00029517          	auipc	a0,0x29
    80007b4e:	00650513          	addi	a0,a0,6 # 80030b50 <__func__.0+0xe60>
    80007b52:	53a250ef          	jal	8002d08c <printf>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007b56:	08200593          	li	a1,130
    80007b5a:	0002a617          	auipc	a2,0x2a
    80007b5e:	d0e60613          	addi	a2,a2,-754 # 80031868 <__func__.0+0x1b78>
    80007b62:	00028517          	auipc	a0,0x28
    80007b66:	48e50513          	addi	a0,a0,1166 # 8002fff0 <__func__.0+0x300>
    80007b6a:	522250ef          	jal	8002d08c <printf>
    80007b6e:	00050797          	auipc	a5,0x50
    80007b72:	4a37c783          	lbu	a5,1187(a5) # 80058011 <excpt+0x1>
    80007b76:	00028597          	auipc	a1,0x28
    80007b7a:	45258593          	addi	a1,a1,1106 # 8002ffc8 <__func__.0+0x2d8>
    80007b7e:	cf89                	beqz	a5,80007b98 <wfi_exception_tests_19+0x9e>
    80007b80:	6418                	ld	a4,8(s0)
    80007b82:	47d9                	li	a5,22
    80007b84:	00028597          	auipc	a1,0x28
    80007b88:	43458593          	addi	a1,a1,1076 # 8002ffb8 <__func__.0+0x2c8>
    80007b8c:	00f70663          	beq	a4,a5,80007b98 <wfi_exception_tests_19+0x9e>
    80007b90:	00028597          	auipc	a1,0x28
    80007b94:	43858593          	addi	a1,a1,1080 # 8002ffc8 <__func__.0+0x2d8>
    80007b98:	00028517          	auipc	a0,0x28
    80007b9c:	47050513          	addi	a0,a0,1136 # 80030008 <__func__.0+0x318>
    80007ba0:	4ec250ef          	jal	8002d08c <printf>
    80007ba4:	00050797          	auipc	a5,0x50
    80007ba8:	46d7c783          	lbu	a5,1133(a5) # 80058011 <excpt+0x1>
    80007bac:	c789                	beqz	a5,80007bb6 <wfi_exception_tests_19+0xbc>
    80007bae:	6418                	ld	a4,8(s0)
    80007bb0:	47d9                	li	a5,22
    80007bb2:	00f70c63          	beq	a4,a5,80007bca <wfi_exception_tests_19+0xd0>
    80007bb6:	00028517          	auipc	a0,0x28
    80007bba:	45a50513          	addi	a0,a0,1114 # 80030010 <__func__.0+0x320>
    80007bbe:	4ce250ef          	jal	8002d08c <printf>
    80007bc2:	02900513          	li	a0,41
    80007bc6:	1b4240ef          	jal	8002bd7a <putchar>
    80007bca:	4529                	li	a0,10
    80007bcc:	1ae240ef          	jal	8002bd7a <putchar>
    80007bd0:	00050497          	auipc	s1,0x50
    80007bd4:	4414c483          	lbu	s1,1089(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007bd8:	00028597          	auipc	a1,0x28
    80007bdc:	3f058593          	addi	a1,a1,1008 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007be0:	cc91                	beqz	s1,80007bfc <wfi_exception_tests_19+0x102>
    80007be2:	6418                	ld	a4,8(s0)
    80007be4:	47d9                	li	a5,22
    TEST_END();
    80007be6:	00028597          	auipc	a1,0x28
    80007bea:	3d258593          	addi	a1,a1,978 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007bee:	00f70763          	beq	a4,a5,80007bfc <wfi_exception_tests_19+0x102>
    80007bf2:	4481                	li	s1,0
    TEST_END();
    80007bf4:	00028597          	auipc	a1,0x28
    80007bf8:	3d458593          	addi	a1,a1,980 # 8002ffc8 <__func__.0+0x2d8>
    80007bfc:	00028517          	auipc	a0,0x28
    80007c00:	47450513          	addi	a0,a0,1140 # 80030070 <__func__.0+0x380>
    80007c04:	488250ef          	jal	8002d08c <printf>
    80007c08:	4511                	li	a0,4
    80007c0a:	afef90ef          	jal	80000f08 <goto_priv>
    80007c0e:	cc5f90ef          	jal	800018d2 <reset_state>
}
    80007c12:	60e2                	ld	ra,24(sp)
    80007c14:	6442                	ld	s0,16(sp)
    80007c16:	8526                	mv	a0,s1
    80007c18:	64a2                	ld	s1,8(sp)
    80007c1a:	6105                	addi	sp,sp,32
    80007c1c:	8082                	ret

0000000080007c1e <wfi_exception_tests_20>:





bool wfi_exception_tests_20() {
    80007c1e:	1141                	addi	sp,sp,-16

    TEST_START();
    80007c20:	00026597          	auipc	a1,0x26
    80007c24:	76858593          	addi	a1,a1,1896 # 8002e388 <__func__.3>
    80007c28:	00028517          	auipc	a0,0x28
    80007c2c:	3b050513          	addi	a0,a0,944 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_20() {
    80007c30:	e406                	sd	ra,8(sp)
    80007c32:	e022                	sd	s0,0(sp)
    TEST_START();
    80007c34:	458250ef          	jal	8002d08c <printf>
    80007c38:	4529                	li	a0,10
    80007c3a:	140240ef          	jal	8002bd7a <putchar>
    
    TEST_SETUP_EXCEPT();
    80007c3e:	9cef90ef          	jal	80000e0c <test_setup_except_function>
    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M);
    80007c42:	4511                	li	a0,4
    80007c44:	ac4f90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007c48:	002007b7          	lui	a5,0x200
    80007c4c:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_HIE, 0b0100);
    80007c50:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80007c54:	64426073          	csrsi	hip,4
    CSRS(mideleg, 0b0100);
    80007c58:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_HS);
    80007c5c:	450d                	li	a0,3
    80007c5e:	aaaf90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007c62:	9aaf90ef          	jal	80000e0c <test_setup_except_function>
    80007c66:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007c6a:	08200593          	li	a1,130
    80007c6e:	0002a617          	auipc	a2,0x2a
    80007c72:	c4260613          	addi	a2,a2,-958 # 800318b0 <__func__.0+0x1bc0>
    80007c76:	00028517          	auipc	a0,0x28
    80007c7a:	37a50513          	addi	a0,a0,890 # 8002fff0 <__func__.0+0x300>
    80007c7e:	40e250ef          	jal	8002d08c <printf>
    80007c82:	00050797          	auipc	a5,0x50
    80007c86:	38f7c783          	lbu	a5,911(a5) # 80058011 <excpt+0x1>
    80007c8a:	00028597          	auipc	a1,0x28
    80007c8e:	32e58593          	addi	a1,a1,814 # 8002ffb8 <__func__.0+0x2c8>
    80007c92:	c789                	beqz	a5,80007c9c <wfi_exception_tests_20+0x7e>
    80007c94:	00028597          	auipc	a1,0x28
    80007c98:	33458593          	addi	a1,a1,820 # 8002ffc8 <__func__.0+0x2d8>
    80007c9c:	00028517          	auipc	a0,0x28
    80007ca0:	36c50513          	addi	a0,a0,876 # 80030008 <__func__.0+0x318>
    80007ca4:	3e8250ef          	jal	8002d08c <printf>
    80007ca8:	00050797          	auipc	a5,0x50
    80007cac:	3697c783          	lbu	a5,873(a5) # 80058011 <excpt+0x1>
    80007cb0:	e7a1                	bnez	a5,80007cf8 <wfi_exception_tests_20+0xda>
    80007cb2:	4529                	li	a0,10
    80007cb4:	0c6240ef          	jal	8002bd7a <putchar>
    80007cb8:	00050797          	auipc	a5,0x50
    80007cbc:	3597c783          	lbu	a5,857(a5) # 80058011 <excpt+0x1>
    80007cc0:	e795                	bnez	a5,80007cec <wfi_exception_tests_20+0xce>
    80007cc2:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007cc4:	00028597          	auipc	a1,0x28
    80007cc8:	2f458593          	addi	a1,a1,756 # 8002ffb8 <__func__.0+0x2c8>
    80007ccc:	00028517          	auipc	a0,0x28
    80007cd0:	3a450513          	addi	a0,a0,932 # 80030070 <__func__.0+0x380>
    80007cd4:	3b8250ef          	jal	8002d08c <printf>
    80007cd8:	4511                	li	a0,4
    80007cda:	a2ef90ef          	jal	80000f08 <goto_priv>
    80007cde:	bf5f90ef          	jal	800018d2 <reset_state>
}
    80007ce2:	60a2                	ld	ra,8(sp)
    80007ce4:	8522                	mv	a0,s0
    80007ce6:	6402                	ld	s0,0(sp)
    80007ce8:	0141                	addi	sp,sp,16
    80007cea:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007cec:	4401                	li	s0,0
    TEST_END();
    80007cee:	00028597          	auipc	a1,0x28
    80007cf2:	2da58593          	addi	a1,a1,730 # 8002ffc8 <__func__.0+0x2d8>
    80007cf6:	bfd9                	j	80007ccc <wfi_exception_tests_20+0xae>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007cf8:	00028517          	auipc	a0,0x28
    80007cfc:	31850513          	addi	a0,a0,792 # 80030010 <__func__.0+0x320>
    80007d00:	38c250ef          	jal	8002d08c <printf>
    80007d04:	02900513          	li	a0,41
    80007d08:	072240ef          	jal	8002bd7a <putchar>
    80007d0c:	b75d                	j	80007cb2 <wfi_exception_tests_20+0x94>

0000000080007d0e <wfi_exception_tests_21>:



bool wfi_exception_tests_21() {
    80007d0e:	1101                	addi	sp,sp,-32

    TEST_START();
    80007d10:	00026597          	auipc	a1,0x26
    80007d14:	69058593          	addi	a1,a1,1680 # 8002e3a0 <__func__.2>
    80007d18:	00028517          	auipc	a0,0x28
    80007d1c:	2c050513          	addi	a0,a0,704 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_21() {
    80007d20:	ec06                	sd	ra,24(sp)
    80007d22:	e822                	sd	s0,16(sp)
    80007d24:	e426                	sd	s1,8(sp)
    TEST_START();
    80007d26:	366250ef          	jal	8002d08c <printf>
    80007d2a:	4529                	li	a0,10
    80007d2c:	04e240ef          	jal	8002bd7a <putchar>

    //V=0&mstatus.TW=1时，且实现了S/HS模式，在U模式下执行WFI指令，并在一个约定时间内产生中断,wfi指令被唤醒，且中断会发生在下一条指令上，xepc=pc+4
    TEST_SETUP_EXCEPT();
    80007d30:	8dcf90ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80007d34:	4511                	li	a0,4
    80007d36:	9d2f90ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_HIE, 0x2);
    80007d3a:	60415073          	csrwi	hie,2
    
    CSRS(mstatus, MSTATUS_TW);
    80007d3e:	002007b7          	lui	a5,0x200
    80007d42:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007d46:	4505                	li	a0,1
    80007d48:	9c0f90ef          	jal	80000f08 <goto_priv>
    80007d4c:	10500073          	wfi
    wfi();
    // CSRW(CSR_HIP,0x2);

    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007d50:	08200593          	li	a1,130
    80007d54:	0002a617          	auipc	a2,0x2a
    80007d58:	bc460613          	addi	a2,a2,-1084 # 80031918 <__func__.0+0x1c28>
    80007d5c:	00028517          	auipc	a0,0x28
    80007d60:	29450513          	addi	a0,a0,660 # 8002fff0 <__func__.0+0x300>
    80007d64:	328250ef          	jal	8002d08c <printf>
    80007d68:	00050797          	auipc	a5,0x50
    80007d6c:	2a97c783          	lbu	a5,681(a5) # 80058011 <excpt+0x1>
    80007d70:	00050497          	auipc	s1,0x50
    80007d74:	2a048493          	addi	s1,s1,672 # 80058010 <excpt>
    80007d78:	00028597          	auipc	a1,0x28
    80007d7c:	25058593          	addi	a1,a1,592 # 8002ffc8 <__func__.0+0x2d8>
    80007d80:	cf89                	beqz	a5,80007d9a <wfi_exception_tests_21+0x8c>
    80007d82:	6498                	ld	a4,8(s1)
    80007d84:	4789                	li	a5,2
    80007d86:	00028597          	auipc	a1,0x28
    80007d8a:	23258593          	addi	a1,a1,562 # 8002ffb8 <__func__.0+0x2c8>
    80007d8e:	00f70663          	beq	a4,a5,80007d9a <wfi_exception_tests_21+0x8c>
    80007d92:	00028597          	auipc	a1,0x28
    80007d96:	23658593          	addi	a1,a1,566 # 8002ffc8 <__func__.0+0x2d8>
    80007d9a:	00028517          	auipc	a0,0x28
    80007d9e:	26e50513          	addi	a0,a0,622 # 80030008 <__func__.0+0x318>
    80007da2:	2ea250ef          	jal	8002d08c <printf>
    80007da6:	00050797          	auipc	a5,0x50
    80007daa:	26b7c783          	lbu	a5,619(a5) # 80058011 <excpt+0x1>
    80007dae:	c789                	beqz	a5,80007db8 <wfi_exception_tests_21+0xaa>
    80007db0:	6498                	ld	a4,8(s1)
    80007db2:	4789                	li	a5,2
    80007db4:	00f70c63          	beq	a4,a5,80007dcc <wfi_exception_tests_21+0xbe>
    80007db8:	00028517          	auipc	a0,0x28
    80007dbc:	25850513          	addi	a0,a0,600 # 80030010 <__func__.0+0x320>
    80007dc0:	2cc250ef          	jal	8002d08c <printf>
    80007dc4:	02900513          	li	a0,41
    80007dc8:	7b3230ef          	jal	8002bd7a <putchar>
    80007dcc:	4529                	li	a0,10
    80007dce:	7ad230ef          	jal	8002bd7a <putchar>
    80007dd2:	00050417          	auipc	s0,0x50
    80007dd6:	23f44403          	lbu	s0,575(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007dda:	00028597          	auipc	a1,0x28
    80007dde:	1ee58593          	addi	a1,a1,494 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007de2:	cc11                	beqz	s0,80007dfe <wfi_exception_tests_21+0xf0>
    80007de4:	6498                	ld	a4,8(s1)
    80007de6:	4789                	li	a5,2
    TEST_END();
    80007de8:	00028597          	auipc	a1,0x28
    80007dec:	1d058593          	addi	a1,a1,464 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007df0:	00f70763          	beq	a4,a5,80007dfe <wfi_exception_tests_21+0xf0>
    80007df4:	4401                	li	s0,0
    TEST_END();
    80007df6:	00028597          	auipc	a1,0x28
    80007dfa:	1d258593          	addi	a1,a1,466 # 8002ffc8 <__func__.0+0x2d8>
    80007dfe:	00028517          	auipc	a0,0x28
    80007e02:	27250513          	addi	a0,a0,626 # 80030070 <__func__.0+0x380>
    80007e06:	286250ef          	jal	8002d08c <printf>
    80007e0a:	4511                	li	a0,4
    80007e0c:	8fcf90ef          	jal	80000f08 <goto_priv>
    80007e10:	ac3f90ef          	jal	800018d2 <reset_state>
}
    80007e14:	60e2                	ld	ra,24(sp)
    80007e16:	8522                	mv	a0,s0
    80007e18:	6442                	ld	s0,16(sp)
    80007e1a:	64a2                	ld	s1,8(sp)
    80007e1c:	6105                	addi	sp,sp,32
    80007e1e:	8082                	ret

0000000080007e20 <wfi_exception_tests_22>:


bool wfi_exception_tests_22() {
    80007e20:	1101                	addi	sp,sp,-32

    TEST_START();
    80007e22:	00026597          	auipc	a1,0x26
    80007e26:	59658593          	addi	a1,a1,1430 # 8002e3b8 <__func__.1>
    80007e2a:	00028517          	auipc	a0,0x28
    80007e2e:	1ae50513          	addi	a0,a0,430 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_22() {
    80007e32:	ec06                	sd	ra,24(sp)
    80007e34:	e822                	sd	s0,16(sp)
    80007e36:	e426                	sd	s1,8(sp)
    TEST_START();
    80007e38:	254250ef          	jal	8002d08c <printf>
    80007e3c:	4529                	li	a0,10
    80007e3e:	73d230ef          	jal	8002bd7a <putchar>

    //V=0&mstatus.TW=1时，如果实现了S/HS模式，在U模式下执行WFI指令，没有在一个约定时间内产生中断
    TEST_SETUP_EXCEPT();
    80007e42:	fcbf80ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80007e46:	4511                	li	a0,4
    80007e48:	8c0f90ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_HIE, 0);
    80007e4c:	60405073          	csrwi	hie,0
    CSRW(CSR_HIP,0);
    80007e50:	64405073          	csrwi	hip,0
    CSRS(mstatus, MSTATUS_TW);
    80007e54:	002007b7          	lui	a5,0x200
    80007e58:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007e5c:	4505                	li	a0,1
    80007e5e:	8aaf90ef          	jal	80000f08 <goto_priv>
    80007e62:	10500073          	wfi
    wfi();
    
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007e66:	08200593          	li	a1,130
    80007e6a:	0002a617          	auipc	a2,0x2a
    80007e6e:	aae60613          	addi	a2,a2,-1362 # 80031918 <__func__.0+0x1c28>
    80007e72:	00028517          	auipc	a0,0x28
    80007e76:	17e50513          	addi	a0,a0,382 # 8002fff0 <__func__.0+0x300>
    80007e7a:	212250ef          	jal	8002d08c <printf>
    80007e7e:	00050797          	auipc	a5,0x50
    80007e82:	1937c783          	lbu	a5,403(a5) # 80058011 <excpt+0x1>
    80007e86:	00050497          	auipc	s1,0x50
    80007e8a:	18a48493          	addi	s1,s1,394 # 80058010 <excpt>
    80007e8e:	00028597          	auipc	a1,0x28
    80007e92:	13a58593          	addi	a1,a1,314 # 8002ffc8 <__func__.0+0x2d8>
    80007e96:	cf89                	beqz	a5,80007eb0 <wfi_exception_tests_22+0x90>
    80007e98:	6498                	ld	a4,8(s1)
    80007e9a:	4789                	li	a5,2
    80007e9c:	00028597          	auipc	a1,0x28
    80007ea0:	11c58593          	addi	a1,a1,284 # 8002ffb8 <__func__.0+0x2c8>
    80007ea4:	00f70663          	beq	a4,a5,80007eb0 <wfi_exception_tests_22+0x90>
    80007ea8:	00028597          	auipc	a1,0x28
    80007eac:	12058593          	addi	a1,a1,288 # 8002ffc8 <__func__.0+0x2d8>
    80007eb0:	00028517          	auipc	a0,0x28
    80007eb4:	15850513          	addi	a0,a0,344 # 80030008 <__func__.0+0x318>
    80007eb8:	1d4250ef          	jal	8002d08c <printf>
    80007ebc:	00050797          	auipc	a5,0x50
    80007ec0:	1557c783          	lbu	a5,341(a5) # 80058011 <excpt+0x1>
    80007ec4:	c789                	beqz	a5,80007ece <wfi_exception_tests_22+0xae>
    80007ec6:	6498                	ld	a4,8(s1)
    80007ec8:	4789                	li	a5,2
    80007eca:	00f70c63          	beq	a4,a5,80007ee2 <wfi_exception_tests_22+0xc2>
    80007ece:	00028517          	auipc	a0,0x28
    80007ed2:	14250513          	addi	a0,a0,322 # 80030010 <__func__.0+0x320>
    80007ed6:	1b6250ef          	jal	8002d08c <printf>
    80007eda:	02900513          	li	a0,41
    80007ede:	69d230ef          	jal	8002bd7a <putchar>
    80007ee2:	4529                	li	a0,10
    80007ee4:	697230ef          	jal	8002bd7a <putchar>
    80007ee8:	00050417          	auipc	s0,0x50
    80007eec:	12944403          	lbu	s0,297(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007ef0:	00028597          	auipc	a1,0x28
    80007ef4:	0d858593          	addi	a1,a1,216 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007ef8:	cc11                	beqz	s0,80007f14 <wfi_exception_tests_22+0xf4>
    80007efa:	6498                	ld	a4,8(s1)
    80007efc:	4789                	li	a5,2
    TEST_END();
    80007efe:	00028597          	auipc	a1,0x28
    80007f02:	0ba58593          	addi	a1,a1,186 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007f06:	00f70763          	beq	a4,a5,80007f14 <wfi_exception_tests_22+0xf4>
    80007f0a:	4401                	li	s0,0
    TEST_END();
    80007f0c:	00028597          	auipc	a1,0x28
    80007f10:	0bc58593          	addi	a1,a1,188 # 8002ffc8 <__func__.0+0x2d8>
    80007f14:	00028517          	auipc	a0,0x28
    80007f18:	15c50513          	addi	a0,a0,348 # 80030070 <__func__.0+0x380>
    80007f1c:	170250ef          	jal	8002d08c <printf>
    80007f20:	4511                	li	a0,4
    80007f22:	fe7f80ef          	jal	80000f08 <goto_priv>
    80007f26:	9adf90ef          	jal	800018d2 <reset_state>
}
    80007f2a:	60e2                	ld	ra,24(sp)
    80007f2c:	8522                	mv	a0,s0
    80007f2e:	6442                	ld	s0,16(sp)
    80007f30:	64a2                	ld	s1,8(sp)
    80007f32:	6105                	addi	sp,sp,32
    80007f34:	8082                	ret

0000000080007f36 <wfi_exception_tests_23>:


bool wfi_exception_tests_23() {
    80007f36:	1141                	addi	sp,sp,-16

    TEST_START();
    80007f38:	00026597          	auipc	a1,0x26
    80007f3c:	49858593          	addi	a1,a1,1176 # 8002e3d0 <__func__.0>
    80007f40:	00028517          	auipc	a0,0x28
    80007f44:	09850513          	addi	a0,a0,152 # 8002ffd8 <__func__.0+0x2e8>
bool wfi_exception_tests_23() {
    80007f48:	e406                	sd	ra,8(sp)
    TEST_START();
    80007f4a:	142250ef          	jal	8002d08c <printf>
    80007f4e:	4529                	li	a0,10
    80007f50:	62b230ef          	jal	8002bd7a <putchar>



    TEST_END();
    80007f54:	00028597          	auipc	a1,0x28
    80007f58:	06458593          	addi	a1,a1,100 # 8002ffb8 <__func__.0+0x2c8>
    80007f5c:	00028517          	auipc	a0,0x28
    80007f60:	11450513          	addi	a0,a0,276 # 80030070 <__func__.0+0x380>
    80007f64:	128250ef          	jal	8002d08c <printf>
    80007f68:	4511                	li	a0,4
    80007f6a:	f9ff80ef          	jal	80000f08 <goto_priv>
    80007f6e:	965f90ef          	jal	800018d2 <reset_state>
}
    80007f72:	60a2                	ld	ra,8(sp)
    80007f74:	4505                	li	a0,1
    80007f76:	0141                	addi	sp,sp,16
    80007f78:	8082                	ret

0000000080007f7a <tinst_tests_pf>:
#define TINST_CHECK_COMPRESSED(CHECK) (excpt.tinst == 0 ||\
    excpt.tinst == CHECK(expand_compressed_instruction(read_instruction(excpt.epc)) & ~0b10ULL))



bool tinst_tests_pf(){
    80007f7a:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80007f7c:	00026597          	auipc	a1,0x26
    80007f80:	46c58593          	addi	a1,a1,1132 # 8002e3e8 <__func__.3>
    80007f84:	00028517          	auipc	a0,0x28
    80007f88:	05450513          	addi	a0,a0,84 # 8002ffd8 <__func__.0+0x2e8>
bool tinst_tests_pf(){
    80007f8c:	f406                	sd	ra,40(sp)
    80007f8e:	f022                	sd	s0,32(sp)
    80007f90:	ec26                	sd	s1,24(sp)
    80007f92:	e84a                	sd	s2,16(sp)
    80007f94:	e44e                	sd	s3,8(sp)
    TEST_START();
    80007f96:	0f6250ef          	jal	8002d08c <printf>
    80007f9a:	4529                	li	a0,10
    80007f9c:	5df230ef          	jal	8002bd7a <putchar>

    hspt_init();        
    80007fa0:	e40f80ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    80007fa4:	450d                	li	a0,3
    80007fa6:	f63f80ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    80007faa:	e63f80ef          	jal	80000e0c <test_setup_except_function>
            ".option pop\n\t" \
            : "=r"(value) : "r"(addr) : "memory"); \
        return value; \
    }

LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80007fae:	400197b7          	lui	a5,0x40019
    80007fb2:	078a                	slli	a5,a5,0x2
    80007fb4:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80007fb8:	0002a617          	auipc	a2,0x2a
    80007fbc:	9a860613          	addi	a2,a2,-1624 # 80031960 <__func__.0+0x1c70>
    80007fc0:	08200593          	li	a1,130
    80007fc4:	00028517          	auipc	a0,0x28
    80007fc8:	02c50513          	addi	a0,a0,44 # 8002fff0 <__func__.0+0x300>
    80007fcc:	0c0250ef          	jal	8002d08c <printf>
    80007fd0:	00050797          	auipc	a5,0x50
    80007fd4:	0417c783          	lbu	a5,65(a5) # 80058011 <excpt+0x1>
    80007fd8:	00050417          	auipc	s0,0x50
    80007fdc:	03840413          	addi	s0,s0,56 # 80058010 <excpt>
    80007fe0:	e399                	bnez	a5,80007fe6 <tinst_tests_pf+0x6c>
    80007fe2:	6000106f          	j	800095e2 <tinst_tests_pf+0x1668>
    80007fe6:	6418                	ld	a4,8(s0)
    80007fe8:	47b5                	li	a5,13
    80007fea:	00028597          	auipc	a1,0x28
    80007fee:	fde58593          	addi	a1,a1,-34 # 8002ffc8 <__func__.0+0x2d8>
    80007ff2:	00f71463          	bne	a4,a5,80007ffa <tinst_tests_pf+0x80>
    80007ff6:	5a40106f          	j	8000959a <tinst_tests_pf+0x1620>
    80007ffa:	00028517          	auipc	a0,0x28
    80007ffe:	00e50513          	addi	a0,a0,14 # 80030008 <__func__.0+0x318>
    80008002:	08a250ef          	jal	8002d08c <printf>
    80008006:	00050797          	auipc	a5,0x50
    8000800a:	00b7c783          	lbu	a5,11(a5) # 80058011 <excpt+0x1>
    8000800e:	c799                	beqz	a5,8000801c <tinst_tests_pf+0xa2>
    80008010:	6418                	ld	a4,8(s0)
    80008012:	47b5                	li	a5,13
    80008014:	00f71463          	bne	a4,a5,8000801c <tinst_tests_pf+0xa2>
    80008018:	6260106f          	j	8000963e <tinst_tests_pf+0x16c4>
    8000801c:	00028517          	auipc	a0,0x28
    80008020:	ff450513          	addi	a0,a0,-12 # 80030010 <__func__.0+0x320>
    80008024:	068250ef          	jal	8002d08c <printf>
    80008028:	02900513          	li	a0,41
    8000802c:	54f230ef          	jal	8002bd7a <putchar>
    80008030:	4529                	li	a0,10
    80008032:	549230ef          	jal	8002bd7a <putchar>
    80008036:	00050797          	auipc	a5,0x50
    8000803a:	fdb7c783          	lbu	a5,-37(a5) # 80058011 <excpt+0x1>
    8000803e:	c399                	beqz	a5,80008044 <tinst_tests_pf+0xca>
    80008040:	5ae0106f          	j	800095ee <tinst_tests_pf+0x1674>
    80008044:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008046:	dc7f80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    8000804a:	400197b7          	lui	a5,0x40019
    8000804e:	078a                	slli	a5,a5,0x2
    80008050:	0007c783          	lbu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80008054:	0002a617          	auipc	a2,0x2a
    80008058:	98c60613          	addi	a2,a2,-1652 # 800319e0 <__func__.0+0x1cf0>
    8000805c:	08200593          	li	a1,130
    80008060:	00028517          	auipc	a0,0x28
    80008064:	f9050513          	addi	a0,a0,-112 # 8002fff0 <__func__.0+0x300>
    80008068:	024250ef          	jal	8002d08c <printf>
    8000806c:	00050797          	auipc	a5,0x50
    80008070:	fa57c783          	lbu	a5,-91(a5) # 80058011 <excpt+0x1>
    80008074:	e399                	bnez	a5,8000807a <tinst_tests_pf+0x100>
    80008076:	64c0106f          	j	800096c2 <tinst_tests_pf+0x1748>
    8000807a:	6418                	ld	a4,8(s0)
    8000807c:	47b5                	li	a5,13
    8000807e:	00028597          	auipc	a1,0x28
    80008082:	f4a58593          	addi	a1,a1,-182 # 8002ffc8 <__func__.0+0x2d8>
    80008086:	00f71463          	bne	a4,a5,8000808e <tinst_tests_pf+0x114>
    8000808a:	5f00106f          	j	8000967a <tinst_tests_pf+0x1700>
    8000808e:	00028517          	auipc	a0,0x28
    80008092:	f7a50513          	addi	a0,a0,-134 # 80030008 <__func__.0+0x318>
    80008096:	7f7240ef          	jal	8002d08c <printf>
    8000809a:	00050797          	auipc	a5,0x50
    8000809e:	f777c783          	lbu	a5,-137(a5) # 80058011 <excpt+0x1>
    800080a2:	c799                	beqz	a5,800080b0 <tinst_tests_pf+0x136>
    800080a4:	6418                	ld	a4,8(s0)
    800080a6:	47b5                	li	a5,13
    800080a8:	00f71463          	bne	a4,a5,800080b0 <tinst_tests_pf+0x136>
    800080ac:	23d0106f          	j	80009ae8 <tinst_tests_pf+0x1b6e>
    800080b0:	00028517          	auipc	a0,0x28
    800080b4:	f6050513          	addi	a0,a0,-160 # 80030010 <__func__.0+0x320>
    800080b8:	7d5240ef          	jal	8002d08c <printf>
    800080bc:	02900513          	li	a0,41
    800080c0:	4bb230ef          	jal	8002bd7a <putchar>
    800080c4:	4529                	li	a0,10
    800080c6:	4b5230ef          	jal	8002bd7a <putchar>
    800080ca:	00090e63          	beqz	s2,800080e6 <tinst_tests_pf+0x16c>
    800080ce:	00050797          	auipc	a5,0x50
    800080d2:	f437c783          	lbu	a5,-189(a5) # 80058011 <excpt+0x1>
    800080d6:	c799                	beqz	a5,800080e4 <tinst_tests_pf+0x16a>
    800080d8:	6418                	ld	a4,8(s0)
    800080da:	47b5                	li	a5,13
    800080dc:	00f71463          	bne	a4,a5,800080e4 <tinst_tests_pf+0x16a>
    800080e0:	64d0106f          	j	80009f2c <tinst_tests_pf+0x1fb2>
    800080e4:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800080e6:	d27f80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    800080ea:	400197b7          	lui	a5,0x40019
    800080ee:	078a                	slli	a5,a5,0x2
    800080f0:	00079783          	lh	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    800080f4:	0002a617          	auipc	a2,0x2a
    800080f8:	92c60613          	addi	a2,a2,-1748 # 80031a20 <__func__.0+0x1d30>
    800080fc:	08200593          	li	a1,130
    80008100:	00028517          	auipc	a0,0x28
    80008104:	ef050513          	addi	a0,a0,-272 # 8002fff0 <__func__.0+0x300>
    80008108:	785240ef          	jal	8002d08c <printf>
    8000810c:	00050797          	auipc	a5,0x50
    80008110:	f057c783          	lbu	a5,-251(a5) # 80058011 <excpt+0x1>
    80008114:	e399                	bnez	a5,8000811a <tinst_tests_pf+0x1a0>
    80008116:	6000106f          	j	80009716 <tinst_tests_pf+0x179c>
    8000811a:	6418                	ld	a4,8(s0)
    8000811c:	47b5                	li	a5,13
    8000811e:	00028597          	auipc	a1,0x28
    80008122:	eaa58593          	addi	a1,a1,-342 # 8002ffc8 <__func__.0+0x2d8>
    80008126:	00f71463          	bne	a4,a5,8000812e <tinst_tests_pf+0x1b4>
    8000812a:	5a40106f          	j	800096ce <tinst_tests_pf+0x1754>
    8000812e:	00028517          	auipc	a0,0x28
    80008132:	eda50513          	addi	a0,a0,-294 # 80030008 <__func__.0+0x318>
    80008136:	757240ef          	jal	8002d08c <printf>
    8000813a:	00050797          	auipc	a5,0x50
    8000813e:	ed77c783          	lbu	a5,-297(a5) # 80058011 <excpt+0x1>
    80008142:	c799                	beqz	a5,80008150 <tinst_tests_pf+0x1d6>
    80008144:	6418                	ld	a4,8(s0)
    80008146:	47b5                	li	a5,13
    80008148:	00f71463          	bne	a4,a5,80008150 <tinst_tests_pf+0x1d6>
    8000814c:	6990106f          	j	80009fe4 <tinst_tests_pf+0x206a>
    80008150:	00028517          	auipc	a0,0x28
    80008154:	ec050513          	addi	a0,a0,-320 # 80030010 <__func__.0+0x320>
    80008158:	735240ef          	jal	8002d08c <printf>
    8000815c:	02900513          	li	a0,41
    80008160:	41b230ef          	jal	8002bd7a <putchar>
    80008164:	4529                	li	a0,10
    80008166:	415230ef          	jal	8002bd7a <putchar>
    8000816a:	00090e63          	beqz	s2,80008186 <tinst_tests_pf+0x20c>
    8000816e:	00050797          	auipc	a5,0x50
    80008172:	ea37c783          	lbu	a5,-349(a5) # 80058011 <excpt+0x1>
    80008176:	c799                	beqz	a5,80008184 <tinst_tests_pf+0x20a>
    80008178:	6418                	ld	a4,8(s0)
    8000817a:	47b5                	li	a5,13
    8000817c:	00f71463          	bne	a4,a5,80008184 <tinst_tests_pf+0x20a>
    80008180:	5eb0106f          	j	80009f6a <tinst_tests_pf+0x1ff0>
    80008184:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008186:	c87f80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    8000818a:	400197b7          	lui	a5,0x40019
    8000818e:	078a                	slli	a5,a5,0x2
    80008190:	0007d783          	lhu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80008194:	0002a617          	auipc	a2,0x2a
    80008198:	8cc60613          	addi	a2,a2,-1844 # 80031a60 <__func__.0+0x1d70>
    8000819c:	08200593          	li	a1,130
    800081a0:	00028517          	auipc	a0,0x28
    800081a4:	e5050513          	addi	a0,a0,-432 # 8002fff0 <__func__.0+0x300>
    800081a8:	6e5240ef          	jal	8002d08c <printf>
    800081ac:	00050797          	auipc	a5,0x50
    800081b0:	e657c783          	lbu	a5,-411(a5) # 80058011 <excpt+0x1>
    800081b4:	e399                	bnez	a5,800081ba <tinst_tests_pf+0x240>
    800081b6:	5b40106f          	j	8000976a <tinst_tests_pf+0x17f0>
    800081ba:	6418                	ld	a4,8(s0)
    800081bc:	47b5                	li	a5,13
    800081be:	00028597          	auipc	a1,0x28
    800081c2:	e0a58593          	addi	a1,a1,-502 # 8002ffc8 <__func__.0+0x2d8>
    800081c6:	00f71463          	bne	a4,a5,800081ce <tinst_tests_pf+0x254>
    800081ca:	5580106f          	j	80009722 <tinst_tests_pf+0x17a8>
    800081ce:	00028517          	auipc	a0,0x28
    800081d2:	e3a50513          	addi	a0,a0,-454 # 80030008 <__func__.0+0x318>
    800081d6:	6b7240ef          	jal	8002d08c <printf>
    800081da:	00050797          	auipc	a5,0x50
    800081de:	e377c783          	lbu	a5,-457(a5) # 80058011 <excpt+0x1>
    800081e2:	c799                	beqz	a5,800081f0 <tinst_tests_pf+0x276>
    800081e4:	6418                	ld	a4,8(s0)
    800081e6:	47b5                	li	a5,13
    800081e8:	00f71463          	bne	a4,a5,800081f0 <tinst_tests_pf+0x276>
    800081ec:	6990106f          	j	8000a084 <tinst_tests_pf+0x210a>
    800081f0:	00028517          	auipc	a0,0x28
    800081f4:	e2050513          	addi	a0,a0,-480 # 80030010 <__func__.0+0x320>
    800081f8:	695240ef          	jal	8002d08c <printf>
    800081fc:	02900513          	li	a0,41
    80008200:	37b230ef          	jal	8002bd7a <putchar>
    80008204:	4529                	li	a0,10
    80008206:	375230ef          	jal	8002bd7a <putchar>
    8000820a:	00090e63          	beqz	s2,80008226 <tinst_tests_pf+0x2ac>
    8000820e:	00050797          	auipc	a5,0x50
    80008212:	e037c783          	lbu	a5,-509(a5) # 80058011 <excpt+0x1>
    80008216:	c799                	beqz	a5,80008224 <tinst_tests_pf+0x2aa>
    80008218:	6418                	ld	a4,8(s0)
    8000821a:	47b5                	li	a5,13
    8000821c:	00f71463          	bne	a4,a5,80008224 <tinst_tests_pf+0x2aa>
    80008220:	5890106f          	j	80009fa8 <tinst_tests_pf+0x202e>
    80008224:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008226:	be7f80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000822a:	400197b7          	lui	a5,0x40019
    8000822e:	078a                	slli	a5,a5,0x2
    80008230:	0007a783          	lw	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80008234:	0002a617          	auipc	a2,0x2a
    80008238:	86c60613          	addi	a2,a2,-1940 # 80031aa0 <__func__.0+0x1db0>
    8000823c:	08200593          	li	a1,130
    80008240:	00028517          	auipc	a0,0x28
    80008244:	db050513          	addi	a0,a0,-592 # 8002fff0 <__func__.0+0x300>
    80008248:	645240ef          	jal	8002d08c <printf>
    8000824c:	00050797          	auipc	a5,0x50
    80008250:	dc57c783          	lbu	a5,-571(a5) # 80058011 <excpt+0x1>
    80008254:	e399                	bnez	a5,8000825a <tinst_tests_pf+0x2e0>
    80008256:	5680106f          	j	800097be <tinst_tests_pf+0x1844>
    8000825a:	6418                	ld	a4,8(s0)
    8000825c:	47b5                	li	a5,13
    8000825e:	00028597          	auipc	a1,0x28
    80008262:	d6a58593          	addi	a1,a1,-662 # 8002ffc8 <__func__.0+0x2d8>
    80008266:	00f71463          	bne	a4,a5,8000826e <tinst_tests_pf+0x2f4>
    8000826a:	50c0106f          	j	80009776 <tinst_tests_pf+0x17fc>
    8000826e:	00028517          	auipc	a0,0x28
    80008272:	d9a50513          	addi	a0,a0,-614 # 80030008 <__func__.0+0x318>
    80008276:	617240ef          	jal	8002d08c <printf>
    8000827a:	00050797          	auipc	a5,0x50
    8000827e:	d977c783          	lbu	a5,-617(a5) # 80058011 <excpt+0x1>
    80008282:	c799                	beqz	a5,80008290 <tinst_tests_pf+0x316>
    80008284:	6418                	ld	a4,8(s0)
    80008286:	47b5                	li	a5,13
    80008288:	00f71463          	bne	a4,a5,80008290 <tinst_tests_pf+0x316>
    8000828c:	68b0106f          	j	8000a116 <tinst_tests_pf+0x219c>
    80008290:	00028517          	auipc	a0,0x28
    80008294:	d8050513          	addi	a0,a0,-640 # 80030010 <__func__.0+0x320>
    80008298:	5f5240ef          	jal	8002d08c <printf>
    8000829c:	02900513          	li	a0,41
    800082a0:	2db230ef          	jal	8002bd7a <putchar>
    800082a4:	4529                	li	a0,10
    800082a6:	2d5230ef          	jal	8002bd7a <putchar>
    800082aa:	00090a63          	beqz	s2,800082be <tinst_tests_pf+0x344>
    800082ae:	00050797          	auipc	a5,0x50
    800082b2:	d637c783          	lbu	a5,-669(a5) # 80058011 <excpt+0x1>
    800082b6:	c399                	beqz	a5,800082bc <tinst_tests_pf+0x342>
    800082b8:	06d0106f          	j	80009b24 <tinst_tests_pf+0x1baa>
    800082bc:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800082be:	b4ff80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    800082c2:	400197b7          	lui	a5,0x40019
    800082c6:	078a                	slli	a5,a5,0x2
    800082c8:	0007e783          	lwu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    800082cc:	0002a617          	auipc	a2,0x2a
    800082d0:	81460613          	addi	a2,a2,-2028 # 80031ae0 <__func__.0+0x1df0>
    800082d4:	08200593          	li	a1,130
    800082d8:	00028517          	auipc	a0,0x28
    800082dc:	d1850513          	addi	a0,a0,-744 # 8002fff0 <__func__.0+0x300>
    800082e0:	5ad240ef          	jal	8002d08c <printf>
    800082e4:	00050797          	auipc	a5,0x50
    800082e8:	d2d7c783          	lbu	a5,-723(a5) # 80058011 <excpt+0x1>
    800082ec:	e399                	bnez	a5,800082f2 <tinst_tests_pf+0x378>
    800082ee:	5240106f          	j	80009812 <tinst_tests_pf+0x1898>
    800082f2:	6418                	ld	a4,8(s0)
    800082f4:	47b5                	li	a5,13
    800082f6:	00028597          	auipc	a1,0x28
    800082fa:	cd258593          	addi	a1,a1,-814 # 8002ffc8 <__func__.0+0x2d8>
    800082fe:	00f71463          	bne	a4,a5,80008306 <tinst_tests_pf+0x38c>
    80008302:	4c80106f          	j	800097ca <tinst_tests_pf+0x1850>
    80008306:	00028517          	auipc	a0,0x28
    8000830a:	d0250513          	addi	a0,a0,-766 # 80030008 <__func__.0+0x318>
    8000830e:	57f240ef          	jal	8002d08c <printf>
    80008312:	00050797          	auipc	a5,0x50
    80008316:	cff7c783          	lbu	a5,-769(a5) # 80058011 <excpt+0x1>
    8000831a:	c799                	beqz	a5,80008328 <tinst_tests_pf+0x3ae>
    8000831c:	6418                	ld	a4,8(s0)
    8000831e:	47b5                	li	a5,13
    80008320:	00f71463          	bne	a4,a5,80008328 <tinst_tests_pf+0x3ae>
    80008324:	6890106f          	j	8000a1ac <tinst_tests_pf+0x2232>
    80008328:	00028517          	auipc	a0,0x28
    8000832c:	ce850513          	addi	a0,a0,-792 # 80030010 <__func__.0+0x320>
    80008330:	55d240ef          	jal	8002d08c <printf>
    80008334:	02900513          	li	a0,41
    80008338:	243230ef          	jal	8002bd7a <putchar>
    8000833c:	4529                	li	a0,10
    8000833e:	23d230ef          	jal	8002bd7a <putchar>
    80008342:	00090a63          	beqz	s2,80008356 <tinst_tests_pf+0x3dc>
    80008346:	00050797          	auipc	a5,0x50
    8000834a:	ccb7c783          	lbu	a5,-821(a5) # 80058011 <excpt+0x1>
    8000834e:	c399                	beqz	a5,80008354 <tinst_tests_pf+0x3da>
    80008350:	0850106f          	j	80009bd4 <tinst_tests_pf+0x1c5a>
    80008354:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008356:	ab7f80ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000835a:	400197b7          	lui	a5,0x40019
    8000835e:	078a                	slli	a5,a5,0x2
    80008360:	0007b783          	ld	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80008364:	00029617          	auipc	a2,0x29
    80008368:	7bc60613          	addi	a2,a2,1980 # 80031b20 <__func__.0+0x1e30>
    8000836c:	08200593          	li	a1,130
    80008370:	00028517          	auipc	a0,0x28
    80008374:	c8050513          	addi	a0,a0,-896 # 8002fff0 <__func__.0+0x300>
    80008378:	515240ef          	jal	8002d08c <printf>
    8000837c:	00050797          	auipc	a5,0x50
    80008380:	c957c783          	lbu	a5,-875(a5) # 80058011 <excpt+0x1>
    80008384:	e399                	bnez	a5,8000838a <tinst_tests_pf+0x410>
    80008386:	4e00106f          	j	80009866 <tinst_tests_pf+0x18ec>
    8000838a:	6418                	ld	a4,8(s0)
    8000838c:	47b5                	li	a5,13
    8000838e:	00028597          	auipc	a1,0x28
    80008392:	c3a58593          	addi	a1,a1,-966 # 8002ffc8 <__func__.0+0x2d8>
    80008396:	00f71463          	bne	a4,a5,8000839e <tinst_tests_pf+0x424>
    8000839a:	4840106f          	j	8000981e <tinst_tests_pf+0x18a4>
    8000839e:	00028517          	auipc	a0,0x28
    800083a2:	c6a50513          	addi	a0,a0,-918 # 80030008 <__func__.0+0x318>
    800083a6:	4e7240ef          	jal	8002d08c <printf>
    800083aa:	00050797          	auipc	a5,0x50
    800083ae:	c677c783          	lbu	a5,-921(a5) # 80058011 <excpt+0x1>
    800083b2:	c799                	beqz	a5,800083c0 <tinst_tests_pf+0x446>
    800083b4:	6418                	ld	a4,8(s0)
    800083b6:	47b5                	li	a5,13
    800083b8:	00f71463          	bne	a4,a5,800083c0 <tinst_tests_pf+0x446>
    800083bc:	6870106f          	j	8000a242 <tinst_tests_pf+0x22c8>
    800083c0:	00028517          	auipc	a0,0x28
    800083c4:	c5050513          	addi	a0,a0,-944 # 80030010 <__func__.0+0x320>
    800083c8:	4c5240ef          	jal	8002d08c <printf>
    800083cc:	02900513          	li	a0,41
    800083d0:	1ab230ef          	jal	8002bd7a <putchar>
    800083d4:	4529                	li	a0,10
    800083d6:	1a5230ef          	jal	8002bd7a <putchar>
    800083da:	00090a63          	beqz	s2,800083ee <tinst_tests_pf+0x474>
    800083de:	00050797          	auipc	a5,0x50
    800083e2:	c337c783          	lbu	a5,-973(a5) # 80058011 <excpt+0x1>
    800083e6:	c399                	beqz	a5,800083ec <tinst_tests_pf+0x472>
    800083e8:	0370106f          	j	80009c1e <tinst_tests_pf+0x1ca4>
    800083ec:	4901                	li	s2,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    800083ee:	a1ff80ef          	jal	80000e0c <test_setup_except_function>
            ".option pop\n\t" \
            :: "r"(value), "r"(addr):  "memory" \
        ); \
    }

STORE_INSTRUCTION(sb, "sb", uint8_t);
    800083f2:	400197b7          	lui	a5,0x40019
    800083f6:	078a                	slli	a5,a5,0x2
    800083f8:	573d                	li	a4,-17
    800083fa:	00e78023          	sb	a4,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    800083fe:	00029617          	auipc	a2,0x29
    80008402:	76260613          	addi	a2,a2,1890 # 80031b60 <__func__.0+0x1e70>
    80008406:	08200593          	li	a1,130
    8000840a:	00028517          	auipc	a0,0x28
    8000840e:	be650513          	addi	a0,a0,-1050 # 8002fff0 <__func__.0+0x300>
    80008412:	47b240ef          	jal	8002d08c <printf>
    80008416:	00050797          	auipc	a5,0x50
    8000841a:	bfb7c783          	lbu	a5,-1029(a5) # 80058011 <excpt+0x1>
    8000841e:	e399                	bnez	a5,80008424 <tinst_tests_pf+0x4aa>
    80008420:	4a00106f          	j	800098c0 <tinst_tests_pf+0x1946>
    80008424:	6418                	ld	a4,8(s0)
    80008426:	47bd                	li	a5,15
    80008428:	00028597          	auipc	a1,0x28
    8000842c:	ba058593          	addi	a1,a1,-1120 # 8002ffc8 <__func__.0+0x2d8>
    80008430:	00f71463          	bne	a4,a5,80008438 <tinst_tests_pf+0x4be>
    80008434:	43e0106f          	j	80009872 <tinst_tests_pf+0x18f8>
    80008438:	00028517          	auipc	a0,0x28
    8000843c:	bd050513          	addi	a0,a0,-1072 # 80030008 <__func__.0+0x318>
    80008440:	44d240ef          	jal	8002d08c <printf>
    80008444:	00050797          	auipc	a5,0x50
    80008448:	bcd7c783          	lbu	a5,-1075(a5) # 80058011 <excpt+0x1>
    8000844c:	c799                	beqz	a5,8000845a <tinst_tests_pf+0x4e0>
    8000844e:	6418                	ld	a4,8(s0)
    80008450:	47bd                	li	a5,15
    80008452:	00f71463          	bne	a4,a5,8000845a <tinst_tests_pf+0x4e0>
    80008456:	6830106f          	j	8000a2d8 <tinst_tests_pf+0x235e>
    8000845a:	00028517          	auipc	a0,0x28
    8000845e:	bb650513          	addi	a0,a0,-1098 # 80030010 <__func__.0+0x320>
    80008462:	42b240ef          	jal	8002d08c <printf>
    80008466:	02900513          	li	a0,41
    8000846a:	111230ef          	jal	8002bd7a <putchar>
    8000846e:	4529                	li	a0,10
    80008470:	10b230ef          	jal	8002bd7a <putchar>
    80008474:	00090a63          	beqz	s2,80008488 <tinst_tests_pf+0x50e>
    80008478:	00050797          	auipc	a5,0x50
    8000847c:	b997c783          	lbu	a5,-1127(a5) # 80058011 <excpt+0x1>
    80008480:	c399                	beqz	a5,80008486 <tinst_tests_pf+0x50c>
    80008482:	7e60106f          	j	80009c68 <tinst_tests_pf+0x1cee>
    80008486:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008488:	985f80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000848c:	77f1                	lui	a5,0xffffc
    8000848e:	40019737          	lui	a4,0x40019
    80008492:	eef7879b          	addiw	a5,a5,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80008496:	070a                	slli	a4,a4,0x2
    80008498:	00f71023          	sh	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000849c:	00029617          	auipc	a2,0x29
    800084a0:	70460613          	addi	a2,a2,1796 # 80031ba0 <__func__.0+0x1eb0>
    800084a4:	08200593          	li	a1,130
    800084a8:	00028517          	auipc	a0,0x28
    800084ac:	b4850513          	addi	a0,a0,-1208 # 8002fff0 <__func__.0+0x300>
    800084b0:	3dd240ef          	jal	8002d08c <printf>
    800084b4:	00050797          	auipc	a5,0x50
    800084b8:	b5d7c783          	lbu	a5,-1187(a5) # 80058011 <excpt+0x1>
    800084bc:	e399                	bnez	a5,800084c2 <tinst_tests_pf+0x548>
    800084be:	45c0106f          	j	8000991a <tinst_tests_pf+0x19a0>
    800084c2:	6418                	ld	a4,8(s0)
    800084c4:	47bd                	li	a5,15
    800084c6:	00028597          	auipc	a1,0x28
    800084ca:	b0258593          	addi	a1,a1,-1278 # 8002ffc8 <__func__.0+0x2d8>
    800084ce:	00f71463          	bne	a4,a5,800084d6 <tinst_tests_pf+0x55c>
    800084d2:	3fa0106f          	j	800098cc <tinst_tests_pf+0x1952>
    800084d6:	00028517          	auipc	a0,0x28
    800084da:	b3250513          	addi	a0,a0,-1230 # 80030008 <__func__.0+0x318>
    800084de:	3af240ef          	jal	8002d08c <printf>
    800084e2:	00050797          	auipc	a5,0x50
    800084e6:	b2f7c783          	lbu	a5,-1233(a5) # 80058011 <excpt+0x1>
    800084ea:	c799                	beqz	a5,800084f8 <tinst_tests_pf+0x57e>
    800084ec:	6418                	ld	a4,8(s0)
    800084ee:	47bd                	li	a5,15
    800084f0:	00f71463          	bne	a4,a5,800084f8 <tinst_tests_pf+0x57e>
    800084f4:	6810106f          	j	8000a374 <tinst_tests_pf+0x23fa>
    800084f8:	00028517          	auipc	a0,0x28
    800084fc:	b1850513          	addi	a0,a0,-1256 # 80030010 <__func__.0+0x320>
    80008500:	38d240ef          	jal	8002d08c <printf>
    80008504:	02900513          	li	a0,41
    80008508:	073230ef          	jal	8002bd7a <putchar>
    8000850c:	4529                	li	a0,10
    8000850e:	06d230ef          	jal	8002bd7a <putchar>
    80008512:	00090a63          	beqz	s2,80008526 <tinst_tests_pf+0x5ac>
    80008516:	00050797          	auipc	a5,0x50
    8000851a:	afb7c783          	lbu	a5,-1285(a5) # 80058011 <excpt+0x1>
    8000851e:	c399                	beqz	a5,80008524 <tinst_tests_pf+0x5aa>
    80008520:	7960106f          	j	80009cb6 <tinst_tests_pf+0x1d3c>
    80008524:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008526:	8e7f80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000852a:	deadc7b7          	lui	a5,0xdeadc
    8000852e:	40019737          	lui	a4,0x40019
    80008532:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80008536:	070a                	slli	a4,a4,0x2
    80008538:	00f72023          	sw	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000853c:	00029617          	auipc	a2,0x29
    80008540:	6a460613          	addi	a2,a2,1700 # 80031be0 <__func__.0+0x1ef0>
    80008544:	08200593          	li	a1,130
    80008548:	00028517          	auipc	a0,0x28
    8000854c:	aa850513          	addi	a0,a0,-1368 # 8002fff0 <__func__.0+0x300>
    80008550:	33d240ef          	jal	8002d08c <printf>
    80008554:	00050797          	auipc	a5,0x50
    80008558:	abd7c783          	lbu	a5,-1347(a5) # 80058011 <excpt+0x1>
    8000855c:	e399                	bnez	a5,80008562 <tinst_tests_pf+0x5e8>
    8000855e:	4160106f          	j	80009974 <tinst_tests_pf+0x19fa>
    80008562:	6418                	ld	a4,8(s0)
    80008564:	47bd                	li	a5,15
    80008566:	00028597          	auipc	a1,0x28
    8000856a:	a6258593          	addi	a1,a1,-1438 # 8002ffc8 <__func__.0+0x2d8>
    8000856e:	00f71463          	bne	a4,a5,80008576 <tinst_tests_pf+0x5fc>
    80008572:	3b40106f          	j	80009926 <tinst_tests_pf+0x19ac>
    80008576:	00028517          	auipc	a0,0x28
    8000857a:	a9250513          	addi	a0,a0,-1390 # 80030008 <__func__.0+0x318>
    8000857e:	30f240ef          	jal	8002d08c <printf>
    80008582:	00050797          	auipc	a5,0x50
    80008586:	a8f7c783          	lbu	a5,-1393(a5) # 80058011 <excpt+0x1>
    8000858a:	c799                	beqz	a5,80008598 <tinst_tests_pf+0x61e>
    8000858c:	6418                	ld	a4,8(s0)
    8000858e:	47bd                	li	a5,15
    80008590:	00f71463          	bne	a4,a5,80008598 <tinst_tests_pf+0x61e>
    80008594:	67d0106f          	j	8000a410 <tinst_tests_pf+0x2496>
    80008598:	00028517          	auipc	a0,0x28
    8000859c:	a7850513          	addi	a0,a0,-1416 # 80030010 <__func__.0+0x320>
    800085a0:	2ed240ef          	jal	8002d08c <printf>
    800085a4:	02900513          	li	a0,41
    800085a8:	7d2230ef          	jal	8002bd7a <putchar>
    800085ac:	4529                	li	a0,10
    800085ae:	7cc230ef          	jal	8002bd7a <putchar>
    800085b2:	00090a63          	beqz	s2,800085c6 <tinst_tests_pf+0x64c>
    800085b6:	00050797          	auipc	a5,0x50
    800085ba:	a5b7c783          	lbu	a5,-1445(a5) # 80058011 <excpt+0x1>
    800085be:	c399                	beqz	a5,800085c4 <tinst_tests_pf+0x64a>
    800085c0:	7440106f          	j	80009d04 <tinst_tests_pf+0x1d8a>
    800085c4:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800085c6:	847f80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    800085ca:	37ab77b7          	lui	a5,0x37ab7
    800085ce:	078a                	slli	a5,a5,0x2
    800085d0:	40019737          	lui	a4,0x40019
    800085d4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800085d8:	070a                	slli	a4,a4,0x2
    800085da:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    800085de:	00029617          	auipc	a2,0x29
    800085e2:	64260613          	addi	a2,a2,1602 # 80031c20 <__func__.0+0x1f30>
    800085e6:	08200593          	li	a1,130
    800085ea:	00028517          	auipc	a0,0x28
    800085ee:	a0650513          	addi	a0,a0,-1530 # 8002fff0 <__func__.0+0x300>
    800085f2:	29b240ef          	jal	8002d08c <printf>
    800085f6:	00050797          	auipc	a5,0x50
    800085fa:	a1b7c783          	lbu	a5,-1509(a5) # 80058011 <excpt+0x1>
    800085fe:	e399                	bnez	a5,80008604 <tinst_tests_pf+0x68a>
    80008600:	3ce0106f          	j	800099ce <tinst_tests_pf+0x1a54>
    80008604:	6418                	ld	a4,8(s0)
    80008606:	47bd                	li	a5,15
    80008608:	00028597          	auipc	a1,0x28
    8000860c:	9c058593          	addi	a1,a1,-1600 # 8002ffc8 <__func__.0+0x2d8>
    80008610:	00f71463          	bne	a4,a5,80008618 <tinst_tests_pf+0x69e>
    80008614:	36c0106f          	j	80009980 <tinst_tests_pf+0x1a06>
    80008618:	00028517          	auipc	a0,0x28
    8000861c:	9f050513          	addi	a0,a0,-1552 # 80030008 <__func__.0+0x318>
    80008620:	26d240ef          	jal	8002d08c <printf>
    80008624:	00050797          	auipc	a5,0x50
    80008628:	9ed7c783          	lbu	a5,-1555(a5) # 80058011 <excpt+0x1>
    8000862c:	c799                	beqz	a5,8000863a <tinst_tests_pf+0x6c0>
    8000862e:	6418                	ld	a4,8(s0)
    80008630:	47bd                	li	a5,15
    80008632:	00f71463          	bne	a4,a5,8000863a <tinst_tests_pf+0x6c0>
    80008636:	6770106f          	j	8000a4ac <tinst_tests_pf+0x2532>
    8000863a:	00028517          	auipc	a0,0x28
    8000863e:	9d650513          	addi	a0,a0,-1578 # 80030010 <__func__.0+0x320>
    80008642:	24b240ef          	jal	8002d08c <printf>
    80008646:	02900513          	li	a0,41
    8000864a:	730230ef          	jal	8002bd7a <putchar>
    8000864e:	4529                	li	a0,10
    80008650:	72a230ef          	jal	8002bd7a <putchar>
    80008654:	00090a63          	beqz	s2,80008668 <tinst_tests_pf+0x6ee>
    80008658:	00050797          	auipc	a5,0x50
    8000865c:	9b97c783          	lbu	a5,-1607(a5) # 80058011 <excpt+0x1>
    80008660:	c399                	beqz	a5,80008666 <tinst_tests_pf+0x6ec>
    80008662:	6f00106f          	j	80009d52 <tinst_tests_pf+0x1dd8>
    80008666:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008668:	fa4f80ef          	jal	80000e0c <test_setup_except_function>
 * the asm extended chosen registers are part of the subset allowed
 * so we have to make sure.
 */

static inline uint64_t c_lw(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    8000866c:	40019537          	lui	a0,0x40019
    80008670:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    80008672:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80008674:	00029617          	auipc	a2,0x29
    80008678:	5ec60613          	addi	a2,a2,1516 # 80031c60 <__func__.0+0x1f70>
    8000867c:	08200593          	li	a1,130
    80008680:	00028517          	auipc	a0,0x28
    80008684:	97050513          	addi	a0,a0,-1680 # 8002fff0 <__func__.0+0x300>
    80008688:	205240ef          	jal	8002d08c <printf>
    8000868c:	00050797          	auipc	a5,0x50
    80008690:	9857c783          	lbu	a5,-1659(a5) # 80058011 <excpt+0x1>
    80008694:	c799                	beqz	a5,800086a2 <tinst_tests_pf+0x728>
    80008696:	6418                	ld	a4,8(s0)
    80008698:	47b5                	li	a5,13
    8000869a:	00f71463          	bne	a4,a5,800086a2 <tinst_tests_pf+0x728>
    8000869e:	7fe0106f          	j	80009e9c <tinst_tests_pf+0x1f22>
    800086a2:	00028597          	auipc	a1,0x28
    800086a6:	92658593          	addi	a1,a1,-1754 # 8002ffc8 <__func__.0+0x2d8>
    800086aa:	00028517          	auipc	a0,0x28
    800086ae:	95e50513          	addi	a0,a0,-1698 # 80030008 <__func__.0+0x318>
    800086b2:	1db240ef          	jal	8002d08c <printf>
    800086b6:	00050797          	auipc	a5,0x50
    800086ba:	95b7c783          	lbu	a5,-1701(a5) # 80058011 <excpt+0x1>
    800086be:	c799                	beqz	a5,800086cc <tinst_tests_pf+0x752>
    800086c0:	6418                	ld	a4,8(s0)
    800086c2:	47b5                	li	a5,13
    800086c4:	00f71463          	bne	a4,a5,800086cc <tinst_tests_pf+0x752>
    800086c8:	6810106f          	j	8000a548 <tinst_tests_pf+0x25ce>
    800086cc:	00028517          	auipc	a0,0x28
    800086d0:	94450513          	addi	a0,a0,-1724 # 80030010 <__func__.0+0x320>
    800086d4:	1b9240ef          	jal	8002d08c <printf>
    800086d8:	02900513          	li	a0,41
    800086dc:	69e230ef          	jal	8002bd7a <putchar>
    800086e0:	4529                	li	a0,10
    800086e2:	698230ef          	jal	8002bd7a <putchar>
    800086e6:	00090a63          	beqz	s2,800086fa <tinst_tests_pf+0x780>
    800086ea:	00050797          	auipc	a5,0x50
    800086ee:	9277c783          	lbu	a5,-1753(a5) # 80058011 <excpt+0x1>
    800086f2:	c399                	beqz	a5,800086f8 <tinst_tests_pf+0x77e>
    800086f4:	6ac0106f          	j	80009da0 <tinst_tests_pf+0x1e26>
    800086f8:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800086fa:	f12f80ef          	jal	80000e0c <test_setup_except_function>
    );
    return value;
}

static inline uint64_t c_ld(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    800086fe:	40019537          	lui	a0,0x40019
    80008702:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    80008704:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80008706:	00029617          	auipc	a2,0x29
    8000870a:	59a60613          	addi	a2,a2,1434 # 80031ca0 <__func__.0+0x1fb0>
        "c.ld    %0, 0(%1)\n\t"
        :"=r"(value): "r"(_addr) : "memory"
    );
    return value;
    8000870e:	84ae                	mv	s1,a1
    80008710:	00028517          	auipc	a0,0x28
    80008714:	8e050513          	addi	a0,a0,-1824 # 8002fff0 <__func__.0+0x300>
    80008718:	08200593          	li	a1,130
    8000871c:	171240ef          	jal	8002d08c <printf>
    80008720:	00050797          	auipc	a5,0x50
    80008724:	8f17c783          	lbu	a5,-1807(a5) # 80058011 <excpt+0x1>
    80008728:	c799                	beqz	a5,80008736 <tinst_tests_pf+0x7bc>
    8000872a:	6418                	ld	a4,8(s0)
    8000872c:	47b5                	li	a5,13
    8000872e:	00f71463          	bne	a4,a5,80008736 <tinst_tests_pf+0x7bc>
    80008732:	7be0106f          	j	80009ef0 <tinst_tests_pf+0x1f76>
    80008736:	00028597          	auipc	a1,0x28
    8000873a:	89258593          	addi	a1,a1,-1902 # 8002ffc8 <__func__.0+0x2d8>
    8000873e:	00028517          	auipc	a0,0x28
    80008742:	8ca50513          	addi	a0,a0,-1846 # 80030008 <__func__.0+0x318>
    80008746:	147240ef          	jal	8002d08c <printf>
    8000874a:	00050797          	auipc	a5,0x50
    8000874e:	8c77c783          	lbu	a5,-1849(a5) # 80058011 <excpt+0x1>
    80008752:	c799                	beqz	a5,80008760 <tinst_tests_pf+0x7e6>
    80008754:	6418                	ld	a4,8(s0)
    80008756:	47b5                	li	a5,13
    80008758:	00f71463          	bne	a4,a5,80008760 <tinst_tests_pf+0x7e6>
    8000875c:	6730106f          	j	8000a5ce <tinst_tests_pf+0x2654>
    80008760:	00028517          	auipc	a0,0x28
    80008764:	8b050513          	addi	a0,a0,-1872 # 80030010 <__func__.0+0x320>
    80008768:	125240ef          	jal	8002d08c <printf>
    8000876c:	02900513          	li	a0,41
    80008770:	60a230ef          	jal	8002bd7a <putchar>
    80008774:	4529                	li	a0,10
    80008776:	604230ef          	jal	8002bd7a <putchar>
    8000877a:	00090a63          	beqz	s2,8000878e <tinst_tests_pf+0x814>
    8000877e:	00050797          	auipc	a5,0x50
    80008782:	8937c783          	lbu	a5,-1901(a5) # 80058011 <excpt+0x1>
    80008786:	c399                	beqz	a5,8000878c <tinst_tests_pf+0x812>
    80008788:	6520106f          	j	80009dda <tinst_tests_pf+0x1e60>
    8000878c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000878e:	e7ef80ef          	jal	80000e0c <test_setup_except_function>
}

static inline void c_sw(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    80008792:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    80008796:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    80008798:	050a                	slli	a0,a0,0x2
    asm volatile(
    8000879a:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000879c:	00029617          	auipc	a2,0x29
    800087a0:	4c460613          	addi	a2,a2,1220 # 80031c60 <__func__.0+0x1f70>
    800087a4:	08200593          	li	a1,130
    800087a8:	00028517          	auipc	a0,0x28
    800087ac:	84850513          	addi	a0,a0,-1976 # 8002fff0 <__func__.0+0x300>
    800087b0:	0dd240ef          	jal	8002d08c <printf>
    800087b4:	00050797          	auipc	a5,0x50
    800087b8:	85d7c783          	lbu	a5,-1955(a5) # 80058011 <excpt+0x1>
    800087bc:	c799                	beqz	a5,800087ca <tinst_tests_pf+0x850>
    800087be:	6418                	ld	a4,8(s0)
    800087c0:	47bd                	li	a5,15
    800087c2:	00f71463          	bne	a4,a5,800087ca <tinst_tests_pf+0x850>
    800087c6:	73e0106f          	j	80009f04 <tinst_tests_pf+0x1f8a>
    800087ca:	00027597          	auipc	a1,0x27
    800087ce:	7fe58593          	addi	a1,a1,2046 # 8002ffc8 <__func__.0+0x2d8>
    800087d2:	00028517          	auipc	a0,0x28
    800087d6:	83650513          	addi	a0,a0,-1994 # 80030008 <__func__.0+0x318>
    800087da:	0b3240ef          	jal	8002d08c <printf>
    800087de:	00050797          	auipc	a5,0x50
    800087e2:	8337c783          	lbu	a5,-1997(a5) # 80058011 <excpt+0x1>
    800087e6:	c799                	beqz	a5,800087f4 <tinst_tests_pf+0x87a>
    800087e8:	6418                	ld	a4,8(s0)
    800087ea:	47bd                	li	a5,15
    800087ec:	00f71463          	bne	a4,a5,800087f4 <tinst_tests_pf+0x87a>
    800087f0:	6690106f          	j	8000a658 <tinst_tests_pf+0x26de>
    800087f4:	00028517          	auipc	a0,0x28
    800087f8:	81c50513          	addi	a0,a0,-2020 # 80030010 <__func__.0+0x320>
    800087fc:	091240ef          	jal	8002d08c <printf>
    80008800:	02900513          	li	a0,41
    80008804:	576230ef          	jal	8002bd7a <putchar>
    80008808:	4529                	li	a0,10
    8000880a:	570230ef          	jal	8002bd7a <putchar>
    8000880e:	00090e63          	beqz	s2,8000882a <tinst_tests_pf+0x8b0>
    80008812:	0004f797          	auipc	a5,0x4f
    80008816:	7ff7c783          	lbu	a5,2047(a5) # 80058011 <excpt+0x1>
    8000881a:	c799                	beqz	a5,80008828 <tinst_tests_pf+0x8ae>
    8000881c:	6418                	ld	a4,8(s0)
    8000881e:	47bd                	li	a5,15
    80008820:	00f71463          	bne	a4,a5,80008828 <tinst_tests_pf+0x8ae>
    80008824:	4920206f          	j	8000acb6 <tinst_tests_pf+0x2d3c>
    80008828:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000882a:	de2f80ef          	jal	80000e0c <test_setup_except_function>
        :: "r"(_value), "r"(_addr): "memory"
    );
}

static inline void c_sd(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    8000882e:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    80008832:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    80008834:	050a                	slli	a0,a0,0x2
    asm volatile(
    80008836:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    80008838:	00029617          	auipc	a2,0x29
    8000883c:	4a860613          	addi	a2,a2,1192 # 80031ce0 <__func__.0+0x1ff0>
    80008840:	08200593          	li	a1,130
    80008844:	00027517          	auipc	a0,0x27
    80008848:	7ac50513          	addi	a0,a0,1964 # 8002fff0 <__func__.0+0x300>
    8000884c:	041240ef          	jal	8002d08c <printf>
    80008850:	0004f797          	auipc	a5,0x4f
    80008854:	7c17c783          	lbu	a5,1985(a5) # 80058011 <excpt+0x1>
    80008858:	c799                	beqz	a5,80008866 <tinst_tests_pf+0x8ec>
    8000885a:	6418                	ld	a4,8(s0)
    8000885c:	47bd                	li	a5,15
    8000885e:	00f71463          	bne	a4,a5,80008866 <tinst_tests_pf+0x8ec>
    80008862:	6b60106f          	j	80009f18 <tinst_tests_pf+0x1f9e>
    80008866:	00027597          	auipc	a1,0x27
    8000886a:	76258593          	addi	a1,a1,1890 # 8002ffc8 <__func__.0+0x2d8>
    8000886e:	00027517          	auipc	a0,0x27
    80008872:	79a50513          	addi	a0,a0,1946 # 80030008 <__func__.0+0x318>
    80008876:	017240ef          	jal	8002d08c <printf>
    8000887a:	0004f797          	auipc	a5,0x4f
    8000887e:	7977c783          	lbu	a5,1943(a5) # 80058011 <excpt+0x1>
    80008882:	c799                	beqz	a5,80008890 <tinst_tests_pf+0x916>
    80008884:	6418                	ld	a4,8(s0)
    80008886:	47bd                	li	a5,15
    80008888:	00f71463          	bne	a4,a5,80008890 <tinst_tests_pf+0x916>
    8000888c:	65b0106f          	j	8000a6e6 <tinst_tests_pf+0x276c>
    80008890:	00027517          	auipc	a0,0x27
    80008894:	78050513          	addi	a0,a0,1920 # 80030010 <__func__.0+0x320>
    80008898:	7f4240ef          	jal	8002d08c <printf>
    8000889c:	02900513          	li	a0,41
    800088a0:	4da230ef          	jal	8002bd7a <putchar>
    800088a4:	4529                	li	a0,10
    800088a6:	4d4230ef          	jal	8002bd7a <putchar>
    800088aa:	00090e63          	beqz	s2,800088c6 <tinst_tests_pf+0x94c>
    800088ae:	0004f797          	auipc	a5,0x4f
    800088b2:	7637c783          	lbu	a5,1891(a5) # 80058011 <excpt+0x1>
    800088b6:	c799                	beqz	a5,800088c4 <tinst_tests_pf+0x94a>
    800088b8:	6418                	ld	a4,8(s0)
    800088ba:	47bd                	li	a5,15
    800088bc:	00f71463          	bne	a4,a5,800088c4 <tinst_tests_pf+0x94a>
    800088c0:	42c0206f          	j	8000acec <tinst_tests_pf+0x2d72>
    800088c4:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800088c6:	d46f80ef          	jal	80000e0c <test_setup_except_function>
    );
}

static inline uint32_t lr_w(uintptr_t addr){
    uint32_t value;
    asm volatile(
    800088ca:	400197b7          	lui	a5,0x40019
    800088ce:	078a                	slli	a5,a5,0x2
    800088d0:	1007a7af          	lr.w	a5,(a5)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    800088d4:	00029617          	auipc	a2,0x29
    800088d8:	44c60613          	addi	a2,a2,1100 # 80031d20 <__func__.0+0x2030>
    800088dc:	08200593          	li	a1,130
    800088e0:	00027517          	auipc	a0,0x27
    800088e4:	71050513          	addi	a0,a0,1808 # 8002fff0 <__func__.0+0x300>
    value = lr_w(vaddr_f);
    800088e8:	02079493          	slli	s1,a5,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    800088ec:	7a0240ef          	jal	8002d08c <printf>
    800088f0:	0004f797          	auipc	a5,0x4f
    800088f4:	7217c783          	lbu	a5,1825(a5) # 80058011 <excpt+0x1>
    value = lr_w(vaddr_f);
    800088f8:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    800088fa:	e399                	bnez	a5,80008900 <tinst_tests_pf+0x986>
    800088fc:	12c0106f          	j	80009a28 <tinst_tests_pf+0x1aae>
    80008900:	6418                	ld	a4,8(s0)
    80008902:	47b5                	li	a5,13
    80008904:	00027597          	auipc	a1,0x27
    80008908:	6c458593          	addi	a1,a1,1732 # 8002ffc8 <__func__.0+0x2d8>
    8000890c:	00f71463          	bne	a4,a5,80008914 <tinst_tests_pf+0x99a>
    80008910:	0ca0106f          	j	800099da <tinst_tests_pf+0x1a60>
    80008914:	00027517          	auipc	a0,0x27
    80008918:	6f450513          	addi	a0,a0,1780 # 80030008 <__func__.0+0x318>
    8000891c:	770240ef          	jal	8002d08c <printf>
    80008920:	0004f797          	auipc	a5,0x4f
    80008924:	6f17c783          	lbu	a5,1777(a5) # 80058011 <excpt+0x1>
    80008928:	c799                	beqz	a5,80008936 <tinst_tests_pf+0x9bc>
    8000892a:	6418                	ld	a4,8(s0)
    8000892c:	47b5                	li	a5,13
    8000892e:	00f71463          	bne	a4,a5,80008936 <tinst_tests_pf+0x9bc>
    80008932:	4e60106f          	j	80009e18 <tinst_tests_pf+0x1e9e>
    80008936:	00027517          	auipc	a0,0x27
    8000893a:	6da50513          	addi	a0,a0,1754 # 80030010 <__func__.0+0x320>
    8000893e:	74e240ef          	jal	8002d08c <printf>
    80008942:	02900513          	li	a0,41
    80008946:	434230ef          	jal	8002bd7a <putchar>
    8000894a:	4529                	li	a0,10
    8000894c:	42e230ef          	jal	8002bd7a <putchar>
    80008950:	00090e63          	beqz	s2,8000896c <tinst_tests_pf+0x9f2>
    80008954:	0004f797          	auipc	a5,0x4f
    80008958:	6bd7c783          	lbu	a5,1725(a5) # 80058011 <excpt+0x1>
    8000895c:	c799                	beqz	a5,8000896a <tinst_tests_pf+0x9f0>
    8000895e:	6418                	ld	a4,8(s0)
    80008960:	47b5                	li	a5,13
    80008962:	00f71463          	bne	a4,a5,8000896a <tinst_tests_pf+0x9f0>
    80008966:	3b80206f          	j	8000ad1e <tinst_tests_pf+0x2da4>
    8000896a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000896c:	ca0f80ef          	jal	80000e0c <test_setup_except_function>
    );
    return value;
}

static inline uint32_t sc_w(uintptr_t addr, uint64_t value){
    asm volatile(
    80008970:	40019737          	lui	a4,0x40019
    80008974:	87a6                	mv	a5,s1
    80008976:	070a                	slli	a4,a4,0x2
    80008978:	18f727af          	sc.w	a5,a5,(a4)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000897c:	00029617          	auipc	a2,0x29
    80008980:	3e460613          	addi	a2,a2,996 # 80031d60 <__func__.0+0x2070>
    80008984:	08200593          	li	a1,130
    80008988:	00027517          	auipc	a0,0x27
    8000898c:	66850513          	addi	a0,a0,1640 # 8002fff0 <__func__.0+0x300>
        "sc.w    %0, %0, 0(%1)\n\t"
        : "+r"(value) : "r"(addr): "memory"
    );
    return value;
    80008990:	0007849b          	sext.w	s1,a5
    80008994:	6f8240ef          	jal	8002d08c <printf>
    80008998:	0004f797          	auipc	a5,0x4f
    8000899c:	6797c783          	lbu	a5,1657(a5) # 80058011 <excpt+0x1>
    800089a0:	e399                	bnez	a5,800089a6 <tinst_tests_pf+0xa2c>
    800089a2:	0e00106f          	j	80009a82 <tinst_tests_pf+0x1b08>
    800089a6:	6418                	ld	a4,8(s0)
    800089a8:	47bd                	li	a5,15
    800089aa:	00027597          	auipc	a1,0x27
    800089ae:	61e58593          	addi	a1,a1,1566 # 8002ffc8 <__func__.0+0x2d8>
    800089b2:	00f71463          	bne	a4,a5,800089ba <tinst_tests_pf+0xa40>
    800089b6:	07e0106f          	j	80009a34 <tinst_tests_pf+0x1aba>
    800089ba:	00027517          	auipc	a0,0x27
    800089be:	64e50513          	addi	a0,a0,1614 # 80030008 <__func__.0+0x318>
    800089c2:	6ca240ef          	jal	8002d08c <printf>
    800089c6:	0004f797          	auipc	a5,0x4f
    800089ca:	64b7c783          	lbu	a5,1611(a5) # 80058011 <excpt+0x1>
    800089ce:	c799                	beqz	a5,800089dc <tinst_tests_pf+0xa62>
    800089d0:	6418                	ld	a4,8(s0)
    800089d2:	47bd                	li	a5,15
    800089d4:	00f71463          	bne	a4,a5,800089dc <tinst_tests_pf+0xa62>
    800089d8:	4820106f          	j	80009e5a <tinst_tests_pf+0x1ee0>
    800089dc:	00027517          	auipc	a0,0x27
    800089e0:	63450513          	addi	a0,a0,1588 # 80030010 <__func__.0+0x320>
    800089e4:	6a8240ef          	jal	8002d08c <printf>
    800089e8:	02900513          	li	a0,41
    800089ec:	38e230ef          	jal	8002bd7a <putchar>
    800089f0:	4529                	li	a0,10
    800089f2:	388230ef          	jal	8002bd7a <putchar>
    800089f6:	00090e63          	beqz	s2,80008a12 <tinst_tests_pf+0xa98>
    800089fa:	0004f797          	auipc	a5,0x4f
    800089fe:	6177c783          	lbu	a5,1559(a5) # 80058011 <excpt+0x1>
    80008a02:	c799                	beqz	a5,80008a10 <tinst_tests_pf+0xa96>
    80008a04:	6418                	ld	a4,8(s0)
    80008a06:	47bd                	li	a5,15
    80008a08:	00f71463          	bne	a4,a5,80008a10 <tinst_tests_pf+0xa96>
    80008a0c:	3540206f          	j	8000ad60 <tinst_tests_pf+0x2de6>
    80008a10:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008a12:	bfaf80ef          	jal	80000e0c <test_setup_except_function>
            : "+r"(value) : "r"(addr): "memory" \
        ); \
        return value; \
    }

AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    80008a16:	400197b7          	lui	a5,0x40019
    80008a1a:	078a                	slli	a5,a5,0x2
    80008a1c:	0897a4af          	amoswap.w	s1,s1,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80008a20:	00029617          	auipc	a2,0x29
    80008a24:	38060613          	addi	a2,a2,896 # 80031da0 <__func__.0+0x20b0>
    80008a28:	08200593          	li	a1,130
    80008a2c:	00027517          	auipc	a0,0x27
    80008a30:	5c450513          	addi	a0,a0,1476 # 8002fff0 <__func__.0+0x300>
    80008a34:	658240ef          	jal	8002d08c <printf>
    80008a38:	0004f797          	auipc	a5,0x4f
    80008a3c:	5d97c783          	lbu	a5,1497(a5) # 80058011 <excpt+0x1>
    80008a40:	e399                	bnez	a5,80008a46 <tinst_tests_pf+0xacc>
    80008a42:	09a0106f          	j	80009adc <tinst_tests_pf+0x1b62>
    80008a46:	6418                	ld	a4,8(s0)
    80008a48:	47bd                	li	a5,15
    80008a4a:	00027597          	auipc	a1,0x27
    80008a4e:	57e58593          	addi	a1,a1,1406 # 8002ffc8 <__func__.0+0x2d8>
    80008a52:	00f71463          	bne	a4,a5,80008a5a <tinst_tests_pf+0xae0>
    80008a56:	0380106f          	j	80009a8e <tinst_tests_pf+0x1b14>
    80008a5a:	00027517          	auipc	a0,0x27
    80008a5e:	5ae50513          	addi	a0,a0,1454 # 80030008 <__func__.0+0x318>
    80008a62:	62a240ef          	jal	8002d08c <printf>
    80008a66:	0004f797          	auipc	a5,0x4f
    80008a6a:	5ab7c783          	lbu	a5,1451(a5) # 80058011 <excpt+0x1>
    80008a6e:	c799                	beqz	a5,80008a7c <tinst_tests_pf+0xb02>
    80008a70:	6418                	ld	a4,8(s0)
    80008a72:	47bd                	li	a5,15
    80008a74:	00f71463          	bne	a4,a5,80008a7c <tinst_tests_pf+0xb02>
    80008a78:	4360106f          	j	80009eae <tinst_tests_pf+0x1f34>
    80008a7c:	00027517          	auipc	a0,0x27
    80008a80:	59450513          	addi	a0,a0,1428 # 80030010 <__func__.0+0x320>
    80008a84:	608240ef          	jal	8002d08c <printf>
    80008a88:	02900513          	li	a0,41
    80008a8c:	2ee230ef          	jal	8002bd7a <putchar>
    80008a90:	4529                	li	a0,10
    80008a92:	2e8230ef          	jal	8002bd7a <putchar>
    80008a96:	00090e63          	beqz	s2,80008ab2 <tinst_tests_pf+0xb38>
    80008a9a:	0004f797          	auipc	a5,0x4f
    80008a9e:	5777c783          	lbu	a5,1399(a5) # 80058011 <excpt+0x1>
    80008aa2:	c799                	beqz	a5,80008ab0 <tinst_tests_pf+0xb36>
    80008aa4:	6418                	ld	a4,8(s0)
    80008aa6:	47bd                	li	a5,15
    80008aa8:	00f71463          	bne	a4,a5,80008ab0 <tinst_tests_pf+0xb36>
    80008aac:	2f60206f          	j	8000ada2 <tinst_tests_pf+0x2e28>
    80008ab0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008ab2:	b5af80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80008ab6:	400197b7          	lui	a5,0x40019
    80008aba:	078a                	slli	a5,a5,0x2
    80008abc:	0097a4af          	amoadd.w	s1,s1,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80008ac0:	00029617          	auipc	a2,0x29
    80008ac4:	32060613          	addi	a2,a2,800 # 80031de0 <__func__.0+0x20f0>
    80008ac8:	08200593          	li	a1,130
    80008acc:	00027517          	auipc	a0,0x27
    80008ad0:	52450513          	addi	a0,a0,1316 # 8002fff0 <__func__.0+0x300>
    80008ad4:	5b8240ef          	jal	8002d08c <printf>
    80008ad8:	0004f797          	auipc	a5,0x4f
    80008adc:	5397c783          	lbu	a5,1337(a5) # 80058011 <excpt+0x1>
    80008ae0:	c399                	beqz	a5,80008ae6 <tinst_tests_pf+0xb6c>
    80008ae2:	08c0106f          	j	80009b6e <tinst_tests_pf+0x1bf4>
    80008ae6:	00027597          	auipc	a1,0x27
    80008aea:	4e258593          	addi	a1,a1,1250 # 8002ffc8 <__func__.0+0x2d8>
    80008aee:	00027517          	auipc	a0,0x27
    80008af2:	51a50513          	addi	a0,a0,1306 # 80030008 <__func__.0+0x318>
    80008af6:	596240ef          	jal	8002d08c <printf>
    80008afa:	0004f797          	auipc	a5,0x4f
    80008afe:	5177c783          	lbu	a5,1303(a5) # 80058011 <excpt+0x1>
    80008b02:	c799                	beqz	a5,80008b10 <tinst_tests_pf+0xb96>
    80008b04:	6418                	ld	a4,8(s0)
    80008b06:	47bd                	li	a5,15
    80008b08:	00f71463          	bne	a4,a5,80008b10 <tinst_tests_pf+0xb96>
    80008b0c:	5730106f          	j	8000a87e <tinst_tests_pf+0x2904>
    80008b10:	00027517          	auipc	a0,0x27
    80008b14:	50050513          	addi	a0,a0,1280 # 80030010 <__func__.0+0x320>
    80008b18:	574240ef          	jal	8002d08c <printf>
    80008b1c:	02900513          	li	a0,41
    80008b20:	25a230ef          	jal	8002bd7a <putchar>
    80008b24:	4529                	li	a0,10
    80008b26:	254230ef          	jal	8002bd7a <putchar>
    80008b2a:	00090e63          	beqz	s2,80008b46 <tinst_tests_pf+0xbcc>
    80008b2e:	0004f797          	auipc	a5,0x4f
    80008b32:	4e37c783          	lbu	a5,1251(a5) # 80058011 <excpt+0x1>
    80008b36:	c799                	beqz	a5,80008b44 <tinst_tests_pf+0xbca>
    80008b38:	6418                	ld	a4,8(s0)
    80008b3a:	47bd                	li	a5,15
    80008b3c:	00f71463          	bne	a4,a5,80008b44 <tinst_tests_pf+0xbca>
    80008b40:	2a40206f          	j	8000ade4 <tinst_tests_pf+0x2e6a>
    80008b44:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008b46:	ac6f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    80008b4a:	400197b7          	lui	a5,0x40019
    80008b4e:	078a                	slli	a5,a5,0x2
    80008b50:	2097a4af          	amoxor.w	s1,s1,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80008b54:	00029617          	auipc	a2,0x29
    80008b58:	2cc60613          	addi	a2,a2,716 # 80031e20 <__func__.0+0x2130>
    80008b5c:	08200593          	li	a1,130
    80008b60:	00027517          	auipc	a0,0x27
    80008b64:	49050513          	addi	a0,a0,1168 # 8002fff0 <__func__.0+0x300>
    80008b68:	524240ef          	jal	8002d08c <printf>
    80008b6c:	0004f797          	auipc	a5,0x4f
    80008b70:	4a57c783          	lbu	a5,1189(a5) # 80058011 <excpt+0x1>
    80008b74:	e399                	bnez	a5,80008b7a <tinst_tests_pf+0xc00>
    80008b76:	5020106f          	j	8000a078 <tinst_tests_pf+0x20fe>
    80008b7a:	6418                	ld	a4,8(s0)
    80008b7c:	47bd                	li	a5,15
    80008b7e:	00027597          	auipc	a1,0x27
    80008b82:	44a58593          	addi	a1,a1,1098 # 8002ffc8 <__func__.0+0x2d8>
    80008b86:	00f71463          	bne	a4,a5,80008b8e <tinst_tests_pf+0xc14>
    80008b8a:	4a20106f          	j	8000a02c <tinst_tests_pf+0x20b2>
    80008b8e:	00027517          	auipc	a0,0x27
    80008b92:	47a50513          	addi	a0,a0,1146 # 80030008 <__func__.0+0x318>
    80008b96:	4f6240ef          	jal	8002d08c <printf>
    80008b9a:	0004f797          	auipc	a5,0x4f
    80008b9e:	4777c783          	lbu	a5,1143(a5) # 80058011 <excpt+0x1>
    80008ba2:	c799                	beqz	a5,80008bb0 <tinst_tests_pf+0xc36>
    80008ba4:	6418                	ld	a4,8(s0)
    80008ba6:	47bd                	li	a5,15
    80008ba8:	00f71463          	bne	a4,a5,80008bb0 <tinst_tests_pf+0xc36>
    80008bac:	5150106f          	j	8000a8c0 <tinst_tests_pf+0x2946>
    80008bb0:	00027517          	auipc	a0,0x27
    80008bb4:	46050513          	addi	a0,a0,1120 # 80030010 <__func__.0+0x320>
    80008bb8:	4d4240ef          	jal	8002d08c <printf>
    80008bbc:	02900513          	li	a0,41
    80008bc0:	1ba230ef          	jal	8002bd7a <putchar>
    80008bc4:	4529                	li	a0,10
    80008bc6:	1b4230ef          	jal	8002bd7a <putchar>
    80008bca:	00090e63          	beqz	s2,80008be6 <tinst_tests_pf+0xc6c>
    80008bce:	0004f797          	auipc	a5,0x4f
    80008bd2:	4437c783          	lbu	a5,1091(a5) # 80058011 <excpt+0x1>
    80008bd6:	c799                	beqz	a5,80008be4 <tinst_tests_pf+0xc6a>
    80008bd8:	6418                	ld	a4,8(s0)
    80008bda:	47bd                	li	a5,15
    80008bdc:	00f71463          	bne	a4,a5,80008be4 <tinst_tests_pf+0xc6a>
    80008be0:	29e0206f          	j	8000ae7e <tinst_tests_pf+0x2f04>
    80008be4:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008be6:	a26f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    80008bea:	400197b7          	lui	a5,0x40019
    80008bee:	078a                	slli	a5,a5,0x2
    80008bf0:	6097a4af          	amoand.w	s1,s1,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80008bf4:	00029617          	auipc	a2,0x29
    80008bf8:	26c60613          	addi	a2,a2,620 # 80031e60 <__func__.0+0x2170>
    80008bfc:	08200593          	li	a1,130
    80008c00:	00027517          	auipc	a0,0x27
    80008c04:	3f050513          	addi	a0,a0,1008 # 8002fff0 <__func__.0+0x300>
    80008c08:	484240ef          	jal	8002d08c <printf>
    80008c0c:	0004f797          	auipc	a5,0x4f
    80008c10:	4057c783          	lbu	a5,1029(a5) # 80058011 <excpt+0x1>
    80008c14:	e399                	bnez	a5,80008c1a <tinst_tests_pf+0xca0>
    80008c16:	4f40106f          	j	8000a10a <tinst_tests_pf+0x2190>
    80008c1a:	6418                	ld	a4,8(s0)
    80008c1c:	47bd                	li	a5,15
    80008c1e:	00027597          	auipc	a1,0x27
    80008c22:	3aa58593          	addi	a1,a1,938 # 8002ffc8 <__func__.0+0x2d8>
    80008c26:	00f71463          	bne	a4,a5,80008c2e <tinst_tests_pf+0xcb4>
    80008c2a:	4940106f          	j	8000a0be <tinst_tests_pf+0x2144>
    80008c2e:	00027517          	auipc	a0,0x27
    80008c32:	3da50513          	addi	a0,a0,986 # 80030008 <__func__.0+0x318>
    80008c36:	456240ef          	jal	8002d08c <printf>
    80008c3a:	0004f797          	auipc	a5,0x4f
    80008c3e:	3d77c783          	lbu	a5,983(a5) # 80058011 <excpt+0x1>
    80008c42:	c799                	beqz	a5,80008c50 <tinst_tests_pf+0xcd6>
    80008c44:	6418                	ld	a4,8(s0)
    80008c46:	47bd                	li	a5,15
    80008c48:	00f71463          	bne	a4,a5,80008c50 <tinst_tests_pf+0xcd6>
    80008c4c:	4b70106f          	j	8000a902 <tinst_tests_pf+0x2988>
    80008c50:	00027517          	auipc	a0,0x27
    80008c54:	3c050513          	addi	a0,a0,960 # 80030010 <__func__.0+0x320>
    80008c58:	434240ef          	jal	8002d08c <printf>
    80008c5c:	02900513          	li	a0,41
    80008c60:	11a230ef          	jal	8002bd7a <putchar>
    80008c64:	4529                	li	a0,10
    80008c66:	114230ef          	jal	8002bd7a <putchar>
    80008c6a:	00090e63          	beqz	s2,80008c86 <tinst_tests_pf+0xd0c>
    80008c6e:	0004f797          	auipc	a5,0x4f
    80008c72:	3a37c783          	lbu	a5,931(a5) # 80058011 <excpt+0x1>
    80008c76:	c799                	beqz	a5,80008c84 <tinst_tests_pf+0xd0a>
    80008c78:	6418                	ld	a4,8(s0)
    80008c7a:	47bd                	li	a5,15
    80008c7c:	00f71463          	bne	a4,a5,80008c84 <tinst_tests_pf+0xd0a>
    80008c80:	2700206f          	j	8000aef0 <tinst_tests_pf+0x2f76>
    80008c84:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008c86:	986f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    80008c8a:	400197b7          	lui	a5,0x40019
    80008c8e:	078a                	slli	a5,a5,0x2
    80008c90:	4097a4af          	amoor.w	s1,s1,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80008c94:	00029617          	auipc	a2,0x29
    80008c98:	20c60613          	addi	a2,a2,524 # 80031ea0 <__func__.0+0x21b0>
    80008c9c:	08200593          	li	a1,130
    80008ca0:	00027517          	auipc	a0,0x27
    80008ca4:	35050513          	addi	a0,a0,848 # 8002fff0 <__func__.0+0x300>
    80008ca8:	3e4240ef          	jal	8002d08c <printf>
    80008cac:	0004f797          	auipc	a5,0x4f
    80008cb0:	3657c783          	lbu	a5,869(a5) # 80058011 <excpt+0x1>
    80008cb4:	e399                	bnez	a5,80008cba <tinst_tests_pf+0xd40>
    80008cb6:	4ea0106f          	j	8000a1a0 <tinst_tests_pf+0x2226>
    80008cba:	6418                	ld	a4,8(s0)
    80008cbc:	47bd                	li	a5,15
    80008cbe:	00027597          	auipc	a1,0x27
    80008cc2:	30a58593          	addi	a1,a1,778 # 8002ffc8 <__func__.0+0x2d8>
    80008cc6:	00f71463          	bne	a4,a5,80008cce <tinst_tests_pf+0xd54>
    80008cca:	4880106f          	j	8000a152 <tinst_tests_pf+0x21d8>
    80008cce:	00027517          	auipc	a0,0x27
    80008cd2:	33a50513          	addi	a0,a0,826 # 80030008 <__func__.0+0x318>
    80008cd6:	3b6240ef          	jal	8002d08c <printf>
    80008cda:	0004f797          	auipc	a5,0x4f
    80008cde:	3377c783          	lbu	a5,823(a5) # 80058011 <excpt+0x1>
    80008ce2:	c799                	beqz	a5,80008cf0 <tinst_tests_pf+0xd76>
    80008ce4:	6418                	ld	a4,8(s0)
    80008ce6:	47bd                	li	a5,15
    80008ce8:	00f71463          	bne	a4,a5,80008cf0 <tinst_tests_pf+0xd76>
    80008cec:	4590106f          	j	8000a944 <tinst_tests_pf+0x29ca>
    80008cf0:	00027517          	auipc	a0,0x27
    80008cf4:	32050513          	addi	a0,a0,800 # 80030010 <__func__.0+0x320>
    80008cf8:	394240ef          	jal	8002d08c <printf>
    80008cfc:	02900513          	li	a0,41
    80008d00:	07a230ef          	jal	8002bd7a <putchar>
    80008d04:	4529                	li	a0,10
    80008d06:	074230ef          	jal	8002bd7a <putchar>
    80008d0a:	00090e63          	beqz	s2,80008d26 <tinst_tests_pf+0xdac>
    80008d0e:	0004f797          	auipc	a5,0x4f
    80008d12:	3037c783          	lbu	a5,771(a5) # 80058011 <excpt+0x1>
    80008d16:	c799                	beqz	a5,80008d24 <tinst_tests_pf+0xdaa>
    80008d18:	6418                	ld	a4,8(s0)
    80008d1a:	47bd                	li	a5,15
    80008d1c:	00f71463          	bne	a4,a5,80008d24 <tinst_tests_pf+0xdaa>
    80008d20:	2420206f          	j	8000af62 <tinst_tests_pf+0x2fe8>
    80008d24:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008d26:	8e6f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    80008d2a:	400197b7          	lui	a5,0x40019
    80008d2e:	078a                	slli	a5,a5,0x2
    80008d30:	8097a4af          	amomin.w	s1,s1,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    80008d34:	00029617          	auipc	a2,0x29
    80008d38:	1ac60613          	addi	a2,a2,428 # 80031ee0 <__func__.0+0x21f0>
    80008d3c:	08200593          	li	a1,130
    80008d40:	00027517          	auipc	a0,0x27
    80008d44:	2b050513          	addi	a0,a0,688 # 8002fff0 <__func__.0+0x300>
    80008d48:	344240ef          	jal	8002d08c <printf>
    80008d4c:	0004f797          	auipc	a5,0x4f
    80008d50:	2c57c783          	lbu	a5,709(a5) # 80058011 <excpt+0x1>
    80008d54:	e399                	bnez	a5,80008d5a <tinst_tests_pf+0xde0>
    80008d56:	4e00106f          	j	8000a236 <tinst_tests_pf+0x22bc>
    80008d5a:	6418                	ld	a4,8(s0)
    80008d5c:	47bd                	li	a5,15
    80008d5e:	00027597          	auipc	a1,0x27
    80008d62:	26a58593          	addi	a1,a1,618 # 8002ffc8 <__func__.0+0x2d8>
    80008d66:	00f71463          	bne	a4,a5,80008d6e <tinst_tests_pf+0xdf4>
    80008d6a:	47e0106f          	j	8000a1e8 <tinst_tests_pf+0x226e>
    80008d6e:	00027517          	auipc	a0,0x27
    80008d72:	29a50513          	addi	a0,a0,666 # 80030008 <__func__.0+0x318>
    80008d76:	316240ef          	jal	8002d08c <printf>
    80008d7a:	0004f797          	auipc	a5,0x4f
    80008d7e:	2977c783          	lbu	a5,663(a5) # 80058011 <excpt+0x1>
    80008d82:	c799                	beqz	a5,80008d90 <tinst_tests_pf+0xe16>
    80008d84:	6418                	ld	a4,8(s0)
    80008d86:	47bd                	li	a5,15
    80008d88:	00f71463          	bne	a4,a5,80008d90 <tinst_tests_pf+0xe16>
    80008d8c:	3fb0106f          	j	8000a986 <tinst_tests_pf+0x2a0c>
    80008d90:	00027517          	auipc	a0,0x27
    80008d94:	28050513          	addi	a0,a0,640 # 80030010 <__func__.0+0x320>
    80008d98:	2f4240ef          	jal	8002d08c <printf>
    80008d9c:	02900513          	li	a0,41
    80008da0:	7db220ef          	jal	8002bd7a <putchar>
    80008da4:	4529                	li	a0,10
    80008da6:	7d5220ef          	jal	8002bd7a <putchar>
    80008daa:	00090e63          	beqz	s2,80008dc6 <tinst_tests_pf+0xe4c>
    80008dae:	0004f797          	auipc	a5,0x4f
    80008db2:	2637c783          	lbu	a5,611(a5) # 80058011 <excpt+0x1>
    80008db6:	c799                	beqz	a5,80008dc4 <tinst_tests_pf+0xe4a>
    80008db8:	6418                	ld	a4,8(s0)
    80008dba:	47bd                	li	a5,15
    80008dbc:	00f71463          	bne	a4,a5,80008dc4 <tinst_tests_pf+0xe4a>
    80008dc0:	1e40206f          	j	8000afa4 <tinst_tests_pf+0x302a>
    80008dc4:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008dc6:	846f80ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    80008dca:	400197b7          	lui	a5,0x40019
    80008dce:	078a                	slli	a5,a5,0x2
    80008dd0:	a097a4af          	amomax.w	s1,s1,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    80008dd4:	00029617          	auipc	a2,0x29
    80008dd8:	14c60613          	addi	a2,a2,332 # 80031f20 <__func__.0+0x2230>
    80008ddc:	08200593          	li	a1,130
    80008de0:	00027517          	auipc	a0,0x27
    80008de4:	21050513          	addi	a0,a0,528 # 8002fff0 <__func__.0+0x300>
    80008de8:	2a4240ef          	jal	8002d08c <printf>
    80008dec:	0004f797          	auipc	a5,0x4f
    80008df0:	2257c783          	lbu	a5,549(a5) # 80058011 <excpt+0x1>
    80008df4:	e399                	bnez	a5,80008dfa <tinst_tests_pf+0xe80>
    80008df6:	4d60106f          	j	8000a2cc <tinst_tests_pf+0x2352>
    80008dfa:	6418                	ld	a4,8(s0)
    80008dfc:	47bd                	li	a5,15
    80008dfe:	00027597          	auipc	a1,0x27
    80008e02:	1ca58593          	addi	a1,a1,458 # 8002ffc8 <__func__.0+0x2d8>
    80008e06:	00f71463          	bne	a4,a5,80008e0e <tinst_tests_pf+0xe94>
    80008e0a:	4740106f          	j	8000a27e <tinst_tests_pf+0x2304>
    80008e0e:	00027517          	auipc	a0,0x27
    80008e12:	1fa50513          	addi	a0,a0,506 # 80030008 <__func__.0+0x318>
    80008e16:	276240ef          	jal	8002d08c <printf>
    80008e1a:	0004f797          	auipc	a5,0x4f
    80008e1e:	1f77c783          	lbu	a5,503(a5) # 80058011 <excpt+0x1>
    80008e22:	c799                	beqz	a5,80008e30 <tinst_tests_pf+0xeb6>
    80008e24:	6418                	ld	a4,8(s0)
    80008e26:	47bd                	li	a5,15
    80008e28:	00f71463          	bne	a4,a5,80008e30 <tinst_tests_pf+0xeb6>
    80008e2c:	39d0106f          	j	8000a9c8 <tinst_tests_pf+0x2a4e>
    80008e30:	00027517          	auipc	a0,0x27
    80008e34:	1e050513          	addi	a0,a0,480 # 80030010 <__func__.0+0x320>
    80008e38:	254240ef          	jal	8002d08c <printf>
    80008e3c:	02900513          	li	a0,41
    80008e40:	73b220ef          	jal	8002bd7a <putchar>
    80008e44:	4529                	li	a0,10
    80008e46:	735220ef          	jal	8002bd7a <putchar>
    80008e4a:	00090e63          	beqz	s2,80008e66 <tinst_tests_pf+0xeec>
    80008e4e:	0004f797          	auipc	a5,0x4f
    80008e52:	1c37c783          	lbu	a5,451(a5) # 80058011 <excpt+0x1>
    80008e56:	c799                	beqz	a5,80008e64 <tinst_tests_pf+0xeea>
    80008e58:	6418                	ld	a4,8(s0)
    80008e5a:	47bd                	li	a5,15
    80008e5c:	00f71463          	bne	a4,a5,80008e64 <tinst_tests_pf+0xeea>
    80008e60:	1860206f          	j	8000afe6 <tinst_tests_pf+0x306c>
    80008e64:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008e66:	fa7f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    80008e6a:	400197b7          	lui	a5,0x40019
    80008e6e:	078a                	slli	a5,a5,0x2
    80008e70:	c097a4af          	amominu.w	s1,s1,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    80008e74:	00029617          	auipc	a2,0x29
    80008e78:	0ec60613          	addi	a2,a2,236 # 80031f60 <__func__.0+0x2270>
    80008e7c:	08200593          	li	a1,130
    80008e80:	00027517          	auipc	a0,0x27
    80008e84:	17050513          	addi	a0,a0,368 # 8002fff0 <__func__.0+0x300>
    80008e88:	204240ef          	jal	8002d08c <printf>
    80008e8c:	0004f797          	auipc	a5,0x4f
    80008e90:	1857c783          	lbu	a5,389(a5) # 80058011 <excpt+0x1>
    80008e94:	e399                	bnez	a5,80008e9a <tinst_tests_pf+0xf20>
    80008e96:	4d20106f          	j	8000a368 <tinst_tests_pf+0x23ee>
    80008e9a:	6418                	ld	a4,8(s0)
    80008e9c:	47bd                	li	a5,15
    80008e9e:	00027597          	auipc	a1,0x27
    80008ea2:	12a58593          	addi	a1,a1,298 # 8002ffc8 <__func__.0+0x2d8>
    80008ea6:	00f71463          	bne	a4,a5,80008eae <tinst_tests_pf+0xf34>
    80008eaa:	4700106f          	j	8000a31a <tinst_tests_pf+0x23a0>
    80008eae:	00027517          	auipc	a0,0x27
    80008eb2:	15a50513          	addi	a0,a0,346 # 80030008 <__func__.0+0x318>
    80008eb6:	1d6240ef          	jal	8002d08c <printf>
    80008eba:	0004f797          	auipc	a5,0x4f
    80008ebe:	1577c783          	lbu	a5,343(a5) # 80058011 <excpt+0x1>
    80008ec2:	c799                	beqz	a5,80008ed0 <tinst_tests_pf+0xf56>
    80008ec4:	6418                	ld	a4,8(s0)
    80008ec6:	47bd                	li	a5,15
    80008ec8:	00f71463          	bne	a4,a5,80008ed0 <tinst_tests_pf+0xf56>
    80008ecc:	33f0106f          	j	8000aa0a <tinst_tests_pf+0x2a90>
    80008ed0:	00027517          	auipc	a0,0x27
    80008ed4:	14050513          	addi	a0,a0,320 # 80030010 <__func__.0+0x320>
    80008ed8:	1b4240ef          	jal	8002d08c <printf>
    80008edc:	02900513          	li	a0,41
    80008ee0:	69b220ef          	jal	8002bd7a <putchar>
    80008ee4:	4529                	li	a0,10
    80008ee6:	695220ef          	jal	8002bd7a <putchar>
    80008eea:	00090e63          	beqz	s2,80008f06 <tinst_tests_pf+0xf8c>
    80008eee:	0004f797          	auipc	a5,0x4f
    80008ef2:	1237c783          	lbu	a5,291(a5) # 80058011 <excpt+0x1>
    80008ef6:	c799                	beqz	a5,80008f04 <tinst_tests_pf+0xf8a>
    80008ef8:	6418                	ld	a4,8(s0)
    80008efa:	47bd                	li	a5,15
    80008efc:	00f71463          	bne	a4,a5,80008f04 <tinst_tests_pf+0xf8a>
    80008f00:	12a0206f          	j	8000b02a <tinst_tests_pf+0x30b0>
    80008f04:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008f06:	f07f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    80008f0a:	400197b7          	lui	a5,0x40019
    80008f0e:	078a                	slli	a5,a5,0x2
    80008f10:	e097a4af          	amomaxu.w	s1,s1,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80008f14:	00029617          	auipc	a2,0x29
    80008f18:	08c60613          	addi	a2,a2,140 # 80031fa0 <__func__.0+0x22b0>
    80008f1c:	08200593          	li	a1,130
    80008f20:	00027517          	auipc	a0,0x27
    80008f24:	0d050513          	addi	a0,a0,208 # 8002fff0 <__func__.0+0x300>
    80008f28:	164240ef          	jal	8002d08c <printf>
    80008f2c:	0004f797          	auipc	a5,0x4f
    80008f30:	0e57c783          	lbu	a5,229(a5) # 80058011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    80008f34:	1482                	slli	s1,s1,0x20
    80008f36:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80008f38:	e399                	bnez	a5,80008f3e <tinst_tests_pf+0xfc4>
    80008f3a:	4ca0106f          	j	8000a404 <tinst_tests_pf+0x248a>
    80008f3e:	6418                	ld	a4,8(s0)
    80008f40:	47bd                	li	a5,15
    80008f42:	00027597          	auipc	a1,0x27
    80008f46:	08658593          	addi	a1,a1,134 # 8002ffc8 <__func__.0+0x2d8>
    80008f4a:	00f71463          	bne	a4,a5,80008f52 <tinst_tests_pf+0xfd8>
    80008f4e:	4680106f          	j	8000a3b6 <tinst_tests_pf+0x243c>
    80008f52:	00027517          	auipc	a0,0x27
    80008f56:	0b650513          	addi	a0,a0,182 # 80030008 <__func__.0+0x318>
    80008f5a:	132240ef          	jal	8002d08c <printf>
    80008f5e:	0004f797          	auipc	a5,0x4f
    80008f62:	0b37c783          	lbu	a5,179(a5) # 80058011 <excpt+0x1>
    80008f66:	c799                	beqz	a5,80008f74 <tinst_tests_pf+0xffa>
    80008f68:	6418                	ld	a4,8(s0)
    80008f6a:	47bd                	li	a5,15
    80008f6c:	00f71463          	bne	a4,a5,80008f74 <tinst_tests_pf+0xffa>
    80008f70:	2dd0106f          	j	8000aa4c <tinst_tests_pf+0x2ad2>
    80008f74:	00027517          	auipc	a0,0x27
    80008f78:	09c50513          	addi	a0,a0,156 # 80030010 <__func__.0+0x320>
    80008f7c:	110240ef          	jal	8002d08c <printf>
    80008f80:	02900513          	li	a0,41
    80008f84:	5f7220ef          	jal	8002bd7a <putchar>
    80008f88:	4529                	li	a0,10
    80008f8a:	5f1220ef          	jal	8002bd7a <putchar>
    80008f8e:	00090e63          	beqz	s2,80008faa <tinst_tests_pf+0x1030>
    80008f92:	0004f797          	auipc	a5,0x4f
    80008f96:	07f7c783          	lbu	a5,127(a5) # 80058011 <excpt+0x1>
    80008f9a:	c799                	beqz	a5,80008fa8 <tinst_tests_pf+0x102e>
    80008f9c:	6418                	ld	a4,8(s0)
    80008f9e:	47bd                	li	a5,15
    80008fa0:	00f71463          	bne	a4,a5,80008fa8 <tinst_tests_pf+0x102e>
    80008fa4:	0ca0206f          	j	8000b06e <tinst_tests_pf+0x30f4>
    80008fa8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008faa:	e63f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    80008fae:	400197b7          	lui	a5,0x40019
    80008fb2:	078a                	slli	a5,a5,0x2
    80008fb4:	0897b4af          	amoswap.d	s1,s1,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    80008fb8:	00029617          	auipc	a2,0x29
    80008fbc:	02860613          	addi	a2,a2,40 # 80031fe0 <__func__.0+0x22f0>
    80008fc0:	08200593          	li	a1,130
    80008fc4:	00027517          	auipc	a0,0x27
    80008fc8:	02c50513          	addi	a0,a0,44 # 8002fff0 <__func__.0+0x300>
    80008fcc:	0c0240ef          	jal	8002d08c <printf>
    80008fd0:	0004f797          	auipc	a5,0x4f
    80008fd4:	0417c783          	lbu	a5,65(a5) # 80058011 <excpt+0x1>
    80008fd8:	e399                	bnez	a5,80008fde <tinst_tests_pf+0x1064>
    80008fda:	4c60106f          	j	8000a4a0 <tinst_tests_pf+0x2526>
    80008fde:	6418                	ld	a4,8(s0)
    80008fe0:	47bd                	li	a5,15
    80008fe2:	00027597          	auipc	a1,0x27
    80008fe6:	fe658593          	addi	a1,a1,-26 # 8002ffc8 <__func__.0+0x2d8>
    80008fea:	00f71463          	bne	a4,a5,80008ff2 <tinst_tests_pf+0x1078>
    80008fee:	4640106f          	j	8000a452 <tinst_tests_pf+0x24d8>
    80008ff2:	00027517          	auipc	a0,0x27
    80008ff6:	01650513          	addi	a0,a0,22 # 80030008 <__func__.0+0x318>
    80008ffa:	092240ef          	jal	8002d08c <printf>
    80008ffe:	0004f797          	auipc	a5,0x4f
    80009002:	0137c783          	lbu	a5,19(a5) # 80058011 <excpt+0x1>
    80009006:	c799                	beqz	a5,80009014 <tinst_tests_pf+0x109a>
    80009008:	6418                	ld	a4,8(s0)
    8000900a:	47bd                	li	a5,15
    8000900c:	00f71463          	bne	a4,a5,80009014 <tinst_tests_pf+0x109a>
    80009010:	27f0106f          	j	8000aa8e <tinst_tests_pf+0x2b14>
    80009014:	00027517          	auipc	a0,0x27
    80009018:	ffc50513          	addi	a0,a0,-4 # 80030010 <__func__.0+0x320>
    8000901c:	070240ef          	jal	8002d08c <printf>
    80009020:	02900513          	li	a0,41
    80009024:	557220ef          	jal	8002bd7a <putchar>
    80009028:	4529                	li	a0,10
    8000902a:	551220ef          	jal	8002bd7a <putchar>
    8000902e:	00090e63          	beqz	s2,8000904a <tinst_tests_pf+0x10d0>
    80009032:	0004f797          	auipc	a5,0x4f
    80009036:	fdf7c783          	lbu	a5,-33(a5) # 80058011 <excpt+0x1>
    8000903a:	c799                	beqz	a5,80009048 <tinst_tests_pf+0x10ce>
    8000903c:	6418                	ld	a4,8(s0)
    8000903e:	47bd                	li	a5,15
    80009040:	00f71463          	bne	a4,a5,80009048 <tinst_tests_pf+0x10ce>
    80009044:	06e0206f          	j	8000b0b2 <tinst_tests_pf+0x3138>
    80009048:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000904a:	dc3f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8000904e:	400197b7          	lui	a5,0x40019
    80009052:	078a                	slli	a5,a5,0x2
    80009054:	0097b4af          	amoadd.d	s1,s1,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    80009058:	00029617          	auipc	a2,0x29
    8000905c:	fc860613          	addi	a2,a2,-56 # 80032020 <__func__.0+0x2330>
    80009060:	08200593          	li	a1,130
    80009064:	00027517          	auipc	a0,0x27
    80009068:	f8c50513          	addi	a0,a0,-116 # 8002fff0 <__func__.0+0x300>
    8000906c:	020240ef          	jal	8002d08c <printf>
    80009070:	0004f797          	auipc	a5,0x4f
    80009074:	fa17c783          	lbu	a5,-95(a5) # 80058011 <excpt+0x1>
    80009078:	e399                	bnez	a5,8000907e <tinst_tests_pf+0x1104>
    8000907a:	4c20106f          	j	8000a53c <tinst_tests_pf+0x25c2>
    8000907e:	6418                	ld	a4,8(s0)
    80009080:	47bd                	li	a5,15
    80009082:	00027597          	auipc	a1,0x27
    80009086:	f4658593          	addi	a1,a1,-186 # 8002ffc8 <__func__.0+0x2d8>
    8000908a:	00f71463          	bne	a4,a5,80009092 <tinst_tests_pf+0x1118>
    8000908e:	4600106f          	j	8000a4ee <tinst_tests_pf+0x2574>
    80009092:	00027517          	auipc	a0,0x27
    80009096:	f7650513          	addi	a0,a0,-138 # 80030008 <__func__.0+0x318>
    8000909a:	7f3230ef          	jal	8002d08c <printf>
    8000909e:	0004f797          	auipc	a5,0x4f
    800090a2:	f737c783          	lbu	a5,-141(a5) # 80058011 <excpt+0x1>
    800090a6:	c799                	beqz	a5,800090b4 <tinst_tests_pf+0x113a>
    800090a8:	6418                	ld	a4,8(s0)
    800090aa:	47bd                	li	a5,15
    800090ac:	00f71463          	bne	a4,a5,800090b4 <tinst_tests_pf+0x113a>
    800090b0:	2210106f          	j	8000aad0 <tinst_tests_pf+0x2b56>
    800090b4:	00027517          	auipc	a0,0x27
    800090b8:	f5c50513          	addi	a0,a0,-164 # 80030010 <__func__.0+0x320>
    800090bc:	7d1230ef          	jal	8002d08c <printf>
    800090c0:	02900513          	li	a0,41
    800090c4:	4b7220ef          	jal	8002bd7a <putchar>
    800090c8:	4529                	li	a0,10
    800090ca:	4b1220ef          	jal	8002bd7a <putchar>
    800090ce:	00090e63          	beqz	s2,800090ea <tinst_tests_pf+0x1170>
    800090d2:	0004f797          	auipc	a5,0x4f
    800090d6:	f3f7c783          	lbu	a5,-193(a5) # 80058011 <excpt+0x1>
    800090da:	c799                	beqz	a5,800090e8 <tinst_tests_pf+0x116e>
    800090dc:	6418                	ld	a4,8(s0)
    800090de:	47bd                	li	a5,15
    800090e0:	00f71463          	bne	a4,a5,800090e8 <tinst_tests_pf+0x116e>
    800090e4:	0120206f          	j	8000b0f6 <tinst_tests_pf+0x317c>
    800090e8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800090ea:	d23f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    800090ee:	400197b7          	lui	a5,0x40019
    800090f2:	078a                	slli	a5,a5,0x2
    800090f4:	2097b4af          	amoxor.d	s1,s1,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    800090f8:	00029617          	auipc	a2,0x29
    800090fc:	f6860613          	addi	a2,a2,-152 # 80032060 <__func__.0+0x2370>
    80009100:	08200593          	li	a1,130
    80009104:	00027517          	auipc	a0,0x27
    80009108:	eec50513          	addi	a0,a0,-276 # 8002fff0 <__func__.0+0x300>
    8000910c:	781230ef          	jal	8002d08c <printf>
    80009110:	0004f797          	auipc	a5,0x4f
    80009114:	f017c783          	lbu	a5,-255(a5) # 80058011 <excpt+0x1>
    80009118:	e399                	bnez	a5,8000911e <tinst_tests_pf+0x11a4>
    8000911a:	4a80106f          	j	8000a5c2 <tinst_tests_pf+0x2648>
    8000911e:	6418                	ld	a4,8(s0)
    80009120:	47bd                	li	a5,15
    80009122:	00027597          	auipc	a1,0x27
    80009126:	ea658593          	addi	a1,a1,-346 # 8002ffc8 <__func__.0+0x2d8>
    8000912a:	00f71463          	bne	a4,a5,80009132 <tinst_tests_pf+0x11b8>
    8000912e:	4460106f          	j	8000a574 <tinst_tests_pf+0x25fa>
    80009132:	00027517          	auipc	a0,0x27
    80009136:	ed650513          	addi	a0,a0,-298 # 80030008 <__func__.0+0x318>
    8000913a:	753230ef          	jal	8002d08c <printf>
    8000913e:	0004f797          	auipc	a5,0x4f
    80009142:	ed37c783          	lbu	a5,-301(a5) # 80058011 <excpt+0x1>
    80009146:	c799                	beqz	a5,80009154 <tinst_tests_pf+0x11da>
    80009148:	6418                	ld	a4,8(s0)
    8000914a:	47bd                	li	a5,15
    8000914c:	00f71463          	bne	a4,a5,80009154 <tinst_tests_pf+0x11da>
    80009150:	1c30106f          	j	8000ab12 <tinst_tests_pf+0x2b98>
    80009154:	00027517          	auipc	a0,0x27
    80009158:	ebc50513          	addi	a0,a0,-324 # 80030010 <__func__.0+0x320>
    8000915c:	731230ef          	jal	8002d08c <printf>
    80009160:	02900513          	li	a0,41
    80009164:	417220ef          	jal	8002bd7a <putchar>
    80009168:	4529                	li	a0,10
    8000916a:	411220ef          	jal	8002bd7a <putchar>
    8000916e:	00090e63          	beqz	s2,8000918a <tinst_tests_pf+0x1210>
    80009172:	0004f797          	auipc	a5,0x4f
    80009176:	e9f7c783          	lbu	a5,-353(a5) # 80058011 <excpt+0x1>
    8000917a:	c799                	beqz	a5,80009188 <tinst_tests_pf+0x120e>
    8000917c:	6418                	ld	a4,8(s0)
    8000917e:	47bd                	li	a5,15
    80009180:	00f71463          	bne	a4,a5,80009188 <tinst_tests_pf+0x120e>
    80009184:	7b70106f          	j	8000b13a <tinst_tests_pf+0x31c0>
    80009188:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000918a:	c83f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8000918e:	400197b7          	lui	a5,0x40019
    80009192:	078a                	slli	a5,a5,0x2
    80009194:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    80009198:	00029617          	auipc	a2,0x29
    8000919c:	f0860613          	addi	a2,a2,-248 # 800320a0 <__func__.0+0x23b0>
    800091a0:	08200593          	li	a1,130
    800091a4:	00027517          	auipc	a0,0x27
    800091a8:	e4c50513          	addi	a0,a0,-436 # 8002fff0 <__func__.0+0x300>
    800091ac:	6e1230ef          	jal	8002d08c <printf>
    800091b0:	0004f797          	auipc	a5,0x4f
    800091b4:	e617c783          	lbu	a5,-415(a5) # 80058011 <excpt+0x1>
    800091b8:	e399                	bnez	a5,800091be <tinst_tests_pf+0x1244>
    800091ba:	4920106f          	j	8000a64c <tinst_tests_pf+0x26d2>
    800091be:	6418                	ld	a4,8(s0)
    800091c0:	47bd                	li	a5,15
    800091c2:	00027597          	auipc	a1,0x27
    800091c6:	e0658593          	addi	a1,a1,-506 # 8002ffc8 <__func__.0+0x2d8>
    800091ca:	00f71463          	bne	a4,a5,800091d2 <tinst_tests_pf+0x1258>
    800091ce:	4300106f          	j	8000a5fe <tinst_tests_pf+0x2684>
    800091d2:	00027517          	auipc	a0,0x27
    800091d6:	e3650513          	addi	a0,a0,-458 # 80030008 <__func__.0+0x318>
    800091da:	6b3230ef          	jal	8002d08c <printf>
    800091de:	0004f797          	auipc	a5,0x4f
    800091e2:	e337c783          	lbu	a5,-461(a5) # 80058011 <excpt+0x1>
    800091e6:	c799                	beqz	a5,800091f4 <tinst_tests_pf+0x127a>
    800091e8:	6418                	ld	a4,8(s0)
    800091ea:	47bd                	li	a5,15
    800091ec:	00f71463          	bne	a4,a5,800091f4 <tinst_tests_pf+0x127a>
    800091f0:	7d30106f          	j	8000b1c2 <tinst_tests_pf+0x3248>
    800091f4:	00027517          	auipc	a0,0x27
    800091f8:	e1c50513          	addi	a0,a0,-484 # 80030010 <__func__.0+0x320>
    800091fc:	691230ef          	jal	8002d08c <printf>
    80009200:	02900513          	li	a0,41
    80009204:	377220ef          	jal	8002bd7a <putchar>
    80009208:	4529                	li	a0,10
    8000920a:	371220ef          	jal	8002bd7a <putchar>
    8000920e:	00090e63          	beqz	s2,8000922a <tinst_tests_pf+0x12b0>
    80009212:	0004f797          	auipc	a5,0x4f
    80009216:	dff7c783          	lbu	a5,-513(a5) # 80058011 <excpt+0x1>
    8000921a:	c799                	beqz	a5,80009228 <tinst_tests_pf+0x12ae>
    8000921c:	6418                	ld	a4,8(s0)
    8000921e:	47bd                	li	a5,15
    80009220:	00f71463          	bne	a4,a5,80009228 <tinst_tests_pf+0x12ae>
    80009224:	75b0106f          	j	8000b17e <tinst_tests_pf+0x3204>
    80009228:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000922a:	be3f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8000922e:	400197b7          	lui	a5,0x40019
    80009232:	078a                	slli	a5,a5,0x2
    80009234:	4097b4af          	amoor.d	s1,s1,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    80009238:	00029617          	auipc	a2,0x29
    8000923c:	ea860613          	addi	a2,a2,-344 # 800320e0 <__func__.0+0x23f0>
    80009240:	08200593          	li	a1,130
    80009244:	00027517          	auipc	a0,0x27
    80009248:	dac50513          	addi	a0,a0,-596 # 8002fff0 <__func__.0+0x300>
    8000924c:	641230ef          	jal	8002d08c <printf>
    80009250:	0004f797          	auipc	a5,0x4f
    80009254:	dc17c783          	lbu	a5,-575(a5) # 80058011 <excpt+0x1>
    80009258:	e399                	bnez	a5,8000925e <tinst_tests_pf+0x12e4>
    8000925a:	4800106f          	j	8000a6da <tinst_tests_pf+0x2760>
    8000925e:	6418                	ld	a4,8(s0)
    80009260:	47bd                	li	a5,15
    80009262:	00027597          	auipc	a1,0x27
    80009266:	d6658593          	addi	a1,a1,-666 # 8002ffc8 <__func__.0+0x2d8>
    8000926a:	00f71463          	bne	a4,a5,80009272 <tinst_tests_pf+0x12f8>
    8000926e:	41e0106f          	j	8000a68c <tinst_tests_pf+0x2712>
    80009272:	00027517          	auipc	a0,0x27
    80009276:	d9650513          	addi	a0,a0,-618 # 80030008 <__func__.0+0x318>
    8000927a:	613230ef          	jal	8002d08c <printf>
    8000927e:	0004f797          	auipc	a5,0x4f
    80009282:	d937c783          	lbu	a5,-621(a5) # 80058011 <excpt+0x1>
    80009286:	c799                	beqz	a5,80009294 <tinst_tests_pf+0x131a>
    80009288:	6418                	ld	a4,8(s0)
    8000928a:	47bd                	li	a5,15
    8000928c:	00f71463          	bne	a4,a5,80009294 <tinst_tests_pf+0x131a>
    80009290:	7770106f          	j	8000b206 <tinst_tests_pf+0x328c>
    80009294:	00027517          	auipc	a0,0x27
    80009298:	d7c50513          	addi	a0,a0,-644 # 80030010 <__func__.0+0x320>
    8000929c:	5f1230ef          	jal	8002d08c <printf>
    800092a0:	02900513          	li	a0,41
    800092a4:	2d7220ef          	jal	8002bd7a <putchar>
    800092a8:	4529                	li	a0,10
    800092aa:	2d1220ef          	jal	8002bd7a <putchar>
    800092ae:	00090a63          	beqz	s2,800092c2 <tinst_tests_pf+0x1348>
    800092b2:	0004f797          	auipc	a5,0x4f
    800092b6:	d5f7c783          	lbu	a5,-673(a5) # 80058011 <excpt+0x1>
    800092ba:	c399                	beqz	a5,800092c0 <tinst_tests_pf+0x1346>
    800092bc:	0990106f          	j	8000ab54 <tinst_tests_pf+0x2bda>
    800092c0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800092c2:	b4bf70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    800092c6:	400197b7          	lui	a5,0x40019
    800092ca:	078a                	slli	a5,a5,0x2
    800092cc:	8097b4af          	amomin.d	s1,s1,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    800092d0:	00029617          	auipc	a2,0x29
    800092d4:	e5060613          	addi	a2,a2,-432 # 80032120 <__func__.0+0x2430>
    800092d8:	08200593          	li	a1,130
    800092dc:	00027517          	auipc	a0,0x27
    800092e0:	d1450513          	addi	a0,a0,-748 # 8002fff0 <__func__.0+0x300>
    800092e4:	5a9230ef          	jal	8002d08c <printf>
    800092e8:	0004f797          	auipc	a5,0x4f
    800092ec:	d297c783          	lbu	a5,-727(a5) # 80058011 <excpt+0x1>
    800092f0:	e399                	bnez	a5,800092f6 <tinst_tests_pf+0x137c>
    800092f2:	4720106f          	j	8000a764 <tinst_tests_pf+0x27ea>
    800092f6:	6418                	ld	a4,8(s0)
    800092f8:	47bd                	li	a5,15
    800092fa:	00027597          	auipc	a1,0x27
    800092fe:	cce58593          	addi	a1,a1,-818 # 8002ffc8 <__func__.0+0x2d8>
    80009302:	00f71463          	bne	a4,a5,8000930a <tinst_tests_pf+0x1390>
    80009306:	4100106f          	j	8000a716 <tinst_tests_pf+0x279c>
    8000930a:	00027517          	auipc	a0,0x27
    8000930e:	cfe50513          	addi	a0,a0,-770 # 80030008 <__func__.0+0x318>
    80009312:	57b230ef          	jal	8002d08c <printf>
    80009316:	0004f797          	auipc	a5,0x4f
    8000931a:	cfb7c783          	lbu	a5,-773(a5) # 80058011 <excpt+0x1>
    8000931e:	c799                	beqz	a5,8000932c <tinst_tests_pf+0x13b2>
    80009320:	6418                	ld	a4,8(s0)
    80009322:	47bd                	li	a5,15
    80009324:	00f71463          	bne	a4,a5,8000932c <tinst_tests_pf+0x13b2>
    80009328:	7230106f          	j	8000b24a <tinst_tests_pf+0x32d0>
    8000932c:	00027517          	auipc	a0,0x27
    80009330:	ce450513          	addi	a0,a0,-796 # 80030010 <__func__.0+0x320>
    80009334:	559230ef          	jal	8002d08c <printf>
    80009338:	02900513          	li	a0,41
    8000933c:	23f220ef          	jal	8002bd7a <putchar>
    80009340:	4529                	li	a0,10
    80009342:	239220ef          	jal	8002bd7a <putchar>
    80009346:	00090a63          	beqz	s2,8000935a <tinst_tests_pf+0x13e0>
    8000934a:	0004f797          	auipc	a5,0x4f
    8000934e:	cc77c783          	lbu	a5,-825(a5) # 80058011 <excpt+0x1>
    80009352:	c399                	beqz	a5,80009358 <tinst_tests_pf+0x13de>
    80009354:	04f0106f          	j	8000aba2 <tinst_tests_pf+0x2c28>
    80009358:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000935a:	ab3f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8000935e:	400197b7          	lui	a5,0x40019
    80009362:	078a                	slli	a5,a5,0x2
    80009364:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    80009368:	00029617          	auipc	a2,0x29
    8000936c:	df860613          	addi	a2,a2,-520 # 80032160 <__func__.0+0x2470>
    80009370:	08200593          	li	a1,130
    80009374:	00027517          	auipc	a0,0x27
    80009378:	c7c50513          	addi	a0,a0,-900 # 8002fff0 <__func__.0+0x300>
    8000937c:	511230ef          	jal	8002d08c <printf>
    80009380:	0004f797          	auipc	a5,0x4f
    80009384:	c917c783          	lbu	a5,-879(a5) # 80058011 <excpt+0x1>
    80009388:	e399                	bnez	a5,8000938e <tinst_tests_pf+0x1414>
    8000938a:	4340106f          	j	8000a7be <tinst_tests_pf+0x2844>
    8000938e:	6418                	ld	a4,8(s0)
    80009390:	47bd                	li	a5,15
    80009392:	00027597          	auipc	a1,0x27
    80009396:	c3658593          	addi	a1,a1,-970 # 8002ffc8 <__func__.0+0x2d8>
    8000939a:	00f71463          	bne	a4,a5,800093a2 <tinst_tests_pf+0x1428>
    8000939e:	3d20106f          	j	8000a770 <tinst_tests_pf+0x27f6>
    800093a2:	00027517          	auipc	a0,0x27
    800093a6:	c6650513          	addi	a0,a0,-922 # 80030008 <__func__.0+0x318>
    800093aa:	4e3230ef          	jal	8002d08c <printf>
    800093ae:	0004f797          	auipc	a5,0x4f
    800093b2:	c637c783          	lbu	a5,-925(a5) # 80058011 <excpt+0x1>
    800093b6:	c799                	beqz	a5,800093c4 <tinst_tests_pf+0x144a>
    800093b8:	6418                	ld	a4,8(s0)
    800093ba:	47bd                	li	a5,15
    800093bc:	00f71463          	bne	a4,a5,800093c4 <tinst_tests_pf+0x144a>
    800093c0:	6cf0106f          	j	8000b28e <tinst_tests_pf+0x3314>
    800093c4:	00027517          	auipc	a0,0x27
    800093c8:	c4c50513          	addi	a0,a0,-948 # 80030010 <__func__.0+0x320>
    800093cc:	4c1230ef          	jal	8002d08c <printf>
    800093d0:	02900513          	li	a0,41
    800093d4:	1a7220ef          	jal	8002bd7a <putchar>
    800093d8:	4529                	li	a0,10
    800093da:	1a1220ef          	jal	8002bd7a <putchar>
    800093de:	00090a63          	beqz	s2,800093f2 <tinst_tests_pf+0x1478>
    800093e2:	0004f797          	auipc	a5,0x4f
    800093e6:	c2f7c783          	lbu	a5,-977(a5) # 80058011 <excpt+0x1>
    800093ea:	c399                	beqz	a5,800093f0 <tinst_tests_pf+0x1476>
    800093ec:	02f0106f          	j	8000ac1a <tinst_tests_pf+0x2ca0>
    800093f0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800093f2:	a1bf70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    800093f6:	400197b7          	lui	a5,0x40019
    800093fa:	078a                	slli	a5,a5,0x2
    800093fc:	c097b4af          	amominu.d	s1,s1,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    80009400:	00029617          	auipc	a2,0x29
    80009404:	da060613          	addi	a2,a2,-608 # 800321a0 <__func__.0+0x24b0>
    80009408:	08200593          	li	a1,130
    8000940c:	00027517          	auipc	a0,0x27
    80009410:	be450513          	addi	a0,a0,-1052 # 8002fff0 <__func__.0+0x300>
    80009414:	479230ef          	jal	8002d08c <printf>
    80009418:	0004f797          	auipc	a5,0x4f
    8000941c:	bf97c783          	lbu	a5,-1031(a5) # 80058011 <excpt+0x1>
    80009420:	e399                	bnez	a5,80009426 <tinst_tests_pf+0x14ac>
    80009422:	3f60106f          	j	8000a818 <tinst_tests_pf+0x289e>
    80009426:	6418                	ld	a4,8(s0)
    80009428:	47bd                	li	a5,15
    8000942a:	00027597          	auipc	a1,0x27
    8000942e:	b9e58593          	addi	a1,a1,-1122 # 8002ffc8 <__func__.0+0x2d8>
    80009432:	00f71463          	bne	a4,a5,8000943a <tinst_tests_pf+0x14c0>
    80009436:	3940106f          	j	8000a7ca <tinst_tests_pf+0x2850>
    8000943a:	00027517          	auipc	a0,0x27
    8000943e:	bce50513          	addi	a0,a0,-1074 # 80030008 <__func__.0+0x318>
    80009442:	44b230ef          	jal	8002d08c <printf>
    80009446:	0004f797          	auipc	a5,0x4f
    8000944a:	bcb7c783          	lbu	a5,-1077(a5) # 80058011 <excpt+0x1>
    8000944e:	c799                	beqz	a5,8000945c <tinst_tests_pf+0x14e2>
    80009450:	6418                	ld	a4,8(s0)
    80009452:	47bd                	li	a5,15
    80009454:	00f71463          	bne	a4,a5,8000945c <tinst_tests_pf+0x14e2>
    80009458:	67b0106f          	j	8000b2d2 <tinst_tests_pf+0x3358>
    8000945c:	00027517          	auipc	a0,0x27
    80009460:	bb450513          	addi	a0,a0,-1100 # 80030010 <__func__.0+0x320>
    80009464:	429230ef          	jal	8002d08c <printf>
    80009468:	02900513          	li	a0,41
    8000946c:	10f220ef          	jal	8002bd7a <putchar>
    80009470:	4529                	li	a0,10
    80009472:	109220ef          	jal	8002bd7a <putchar>
    80009476:	00090a63          	beqz	s2,8000948a <tinst_tests_pf+0x1510>
    8000947a:	0004f797          	auipc	a5,0x4f
    8000947e:	b977c783          	lbu	a5,-1129(a5) # 80058011 <excpt+0x1>
    80009482:	c399                	beqz	a5,80009488 <tinst_tests_pf+0x150e>
    80009484:	7e40106f          	j	8000ac68 <tinst_tests_pf+0x2cee>
    80009488:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000948a:	983f70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    8000948e:	400197b7          	lui	a5,0x40019
    80009492:	078a                	slli	a5,a5,0x2
    80009494:	e097b4af          	amomaxu.d	s1,s1,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80009498:	00029617          	auipc	a2,0x29
    8000949c:	d4860613          	addi	a2,a2,-696 # 800321e0 <__func__.0+0x24f0>
    800094a0:	08200593          	li	a1,130
    800094a4:	00027517          	auipc	a0,0x27
    800094a8:	b4c50513          	addi	a0,a0,-1204 # 8002fff0 <__func__.0+0x300>
    800094ac:	3e1230ef          	jal	8002d08c <printf>
    800094b0:	0004f797          	auipc	a5,0x4f
    800094b4:	b617c783          	lbu	a5,-1183(a5) # 80058011 <excpt+0x1>
    800094b8:	e399                	bnez	a5,800094be <tinst_tests_pf+0x1544>
    800094ba:	3b80106f          	j	8000a872 <tinst_tests_pf+0x28f8>
    800094be:	6418                	ld	a4,8(s0)
    800094c0:	47bd                	li	a5,15
    800094c2:	00027597          	auipc	a1,0x27
    800094c6:	b0658593          	addi	a1,a1,-1274 # 8002ffc8 <__func__.0+0x2d8>
    800094ca:	00f71463          	bne	a4,a5,800094d2 <tinst_tests_pf+0x1558>
    800094ce:	3560106f          	j	8000a824 <tinst_tests_pf+0x28aa>
    800094d2:	00027517          	auipc	a0,0x27
    800094d6:	b3650513          	addi	a0,a0,-1226 # 80030008 <__func__.0+0x318>
    800094da:	3b3230ef          	jal	8002d08c <printf>
    800094de:	0004f797          	auipc	a5,0x4f
    800094e2:	b337c783          	lbu	a5,-1229(a5) # 80058011 <excpt+0x1>
    800094e6:	c799                	beqz	a5,800094f4 <tinst_tests_pf+0x157a>
    800094e8:	6418                	ld	a4,8(s0)
    800094ea:	47bd                	li	a5,15
    800094ec:	00f71463          	bne	a4,a5,800094f4 <tinst_tests_pf+0x157a>
    800094f0:	6270106f          	j	8000b316 <tinst_tests_pf+0x339c>
    800094f4:	00027517          	auipc	a0,0x27
    800094f8:	b1c50513          	addi	a0,a0,-1252 # 80030010 <__func__.0+0x320>
    800094fc:	391230ef          	jal	8002d08c <printf>
    80009500:	02900513          	li	a0,41
    80009504:	077220ef          	jal	8002bd7a <putchar>
    80009508:	4529                	li	a0,10
    8000950a:	071220ef          	jal	8002bd7a <putchar>
    8000950e:	04090e63          	beqz	s2,8000956a <tinst_tests_pf+0x15f0>
    80009512:	0004f497          	auipc	s1,0x4f
    80009516:	aff4c483          	lbu	s1,-1281(s1) # 80058011 <excpt+0x1>
    8000951a:	c8a9                	beqz	s1,8000956c <tinst_tests_pf+0x15f2>
    8000951c:	6418                	ld	a4,8(s0)
    8000951e:	47bd                	li	a5,15
    80009520:	04f71563          	bne	a4,a5,8000956a <tinst_tests_pf+0x15f0>
    80009524:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    80009526:	00027597          	auipc	a1,0x27
    8000952a:	a9258593          	addi	a1,a1,-1390 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000952e:	c3b9                	beqz	a5,80009574 <tinst_tests_pf+0x15fa>
    80009530:	6814                	ld	a3,16(s0)

static inline uint32_t read_instruction(uintptr_t addr) {

    uint32_t instruction = 0;

    if((addr & 0b1) != 0) {
    80009532:	0016f713          	andi	a4,a3,1
    80009536:	2c0710e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    }

    instruction = *((uint16_t*)addr);
    8000953a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000953e:	460d                	li	a2,3
    80009540:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009544:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009546:	00c59763          	bne	a1,a2,80009554 <tinst_tests_pf+0x15da>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000954a:	0026d683          	lhu	a3,2(a3)
    8000954e:	0106969b          	slliw	a3,a3,0x10
    80009552:	8f55                	or	a4,a4,a3
    80009554:	1ffe16b7          	lui	a3,0x1ffe1
    80009558:	068e                	slli	a3,a3,0x3
    8000955a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000955c:	8f75                	and	a4,a4,a3
    TEST_END();
    8000955e:	00027597          	auipc	a1,0x27
    80009562:	a5a58593          	addi	a1,a1,-1446 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80009566:	00e78763          	beq	a5,a4,80009574 <tinst_tests_pf+0x15fa>
    8000956a:	4481                	li	s1,0
    TEST_END();
    8000956c:	00027597          	auipc	a1,0x27
    80009570:	a5c58593          	addi	a1,a1,-1444 # 8002ffc8 <__func__.0+0x2d8>
    80009574:	00027517          	auipc	a0,0x27
    80009578:	afc50513          	addi	a0,a0,-1284 # 80030070 <__func__.0+0x380>
    8000957c:	311230ef          	jal	8002d08c <printf>
    80009580:	4511                	li	a0,4
    80009582:	987f70ef          	jal	80000f08 <goto_priv>
    80009586:	b4cf80ef          	jal	800018d2 <reset_state>
}
    8000958a:	70a2                	ld	ra,40(sp)
    8000958c:	7402                	ld	s0,32(sp)
    8000958e:	6942                	ld	s2,16(sp)
    80009590:	69a2                	ld	s3,8(sp)
    80009592:	8526                	mv	a0,s1
    80009594:	64e2                	ld	s1,24(sp)
    80009596:	6145                	addi	sp,sp,48
    80009598:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    8000959a:	701c                	ld	a5,32(s0)
    8000959c:	00027597          	auipc	a1,0x27
    800095a0:	a1c58593          	addi	a1,a1,-1508 # 8002ffb8 <__func__.0+0x2c8>
    800095a4:	e399                	bnez	a5,800095aa <tinst_tests_pf+0x1630>
    800095a6:	a55fe06f          	j	80007ffa <tinst_tests_pf+0x80>
    800095aa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800095ac:	0016f713          	andi	a4,a3,1
    800095b0:	240713e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800095b4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800095b8:	460d                	li	a2,3
    800095ba:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800095be:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800095c0:	00c59763          	bne	a1,a2,800095ce <tinst_tests_pf+0x1654>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800095c4:	0026d683          	lhu	a3,2(a3)
    800095c8:	0106969b          	slliw	a3,a3,0x10
    800095cc:	8f55                	or	a4,a4,a3
    800095ce:	1746                	slli	a4,a4,0x31
    800095d0:	9345                	srli	a4,a4,0x31
    800095d2:	00027597          	auipc	a1,0x27
    800095d6:	9e658593          	addi	a1,a1,-1562 # 8002ffb8 <__func__.0+0x2c8>
    800095da:	00e79463          	bne	a5,a4,800095e2 <tinst_tests_pf+0x1668>
    800095de:	a1dfe06f          	j	80007ffa <tinst_tests_pf+0x80>
    800095e2:	00027597          	auipc	a1,0x27
    800095e6:	9e658593          	addi	a1,a1,-1562 # 8002ffc8 <__func__.0+0x2d8>
    800095ea:	a11fe06f          	j	80007ffa <tinst_tests_pf+0x80>
    800095ee:	6418                	ld	a4,8(s0)
    800095f0:	47b5                	li	a5,13
    800095f2:	4901                	li	s2,0
    800095f4:	00f70463          	beq	a4,a5,800095fc <tinst_tests_pf+0x1682>
    800095f8:	a4ffe06f          	j	80008046 <tinst_tests_pf+0xcc>
    800095fc:	7018                	ld	a4,32(s0)
    800095fe:	4905                	li	s2,1
    80009600:	e319                	bnez	a4,80009606 <tinst_tests_pf+0x168c>
    80009602:	a45fe06f          	j	80008046 <tinst_tests_pf+0xcc>
    80009606:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009608:	0126f7b3          	and	a5,a3,s2
    8000960c:	1e0795e3          	bnez	a5,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009610:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009614:	460d                	li	a2,3
    80009616:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000961a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000961c:	00c59763          	bne	a1,a2,8000962a <tinst_tests_pf+0x16b0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009620:	0026d683          	lhu	a3,2(a3)
    80009624:	0106969b          	slliw	a3,a3,0x10
    80009628:	8fd5                	or	a5,a5,a3
    8000962a:	03179913          	slli	s2,a5,0x31
    8000962e:	03195913          	srli	s2,s2,0x31
    80009632:	40e90933          	sub	s2,s2,a4
    80009636:	00193913          	seqz	s2,s2
    8000963a:	a0dfe06f          	j	80008046 <tinst_tests_pf+0xcc>
    8000963e:	701c                	ld	a5,32(s0)
    80009640:	e399                	bnez	a5,80009646 <tinst_tests_pf+0x16cc>
    80009642:	9effe06f          	j	80008030 <tinst_tests_pf+0xb6>
    80009646:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009648:	0016f713          	andi	a4,a3,1
    8000964c:	1a0715e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009650:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009654:	460d                	li	a2,3
    80009656:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000965a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000965c:	00c59763          	bne	a1,a2,8000966a <tinst_tests_pf+0x16f0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009660:	0026d683          	lhu	a3,2(a3)
    80009664:	0106969b          	slliw	a3,a3,0x10
    80009668:	8f55                	or	a4,a4,a3
    8000966a:	1746                	slli	a4,a4,0x31
    8000966c:	9345                	srli	a4,a4,0x31
    8000966e:	00e78463          	beq	a5,a4,80009676 <tinst_tests_pf+0x16fc>
    80009672:	9abfe06f          	j	8000801c <tinst_tests_pf+0xa2>
    80009676:	9bbfe06f          	j	80008030 <tinst_tests_pf+0xb6>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000967a:	701c                	ld	a5,32(s0)
    8000967c:	00027597          	auipc	a1,0x27
    80009680:	93c58593          	addi	a1,a1,-1732 # 8002ffb8 <__func__.0+0x2c8>
    80009684:	e399                	bnez	a5,8000968a <tinst_tests_pf+0x1710>
    80009686:	a09fe06f          	j	8000808e <tinst_tests_pf+0x114>
    8000968a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000968c:	0016f713          	andi	a4,a3,1
    80009690:	160713e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009694:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009698:	460d                	li	a2,3
    8000969a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000969e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800096a0:	00c59763          	bne	a1,a2,800096ae <tinst_tests_pf+0x1734>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800096a4:	0026d683          	lhu	a3,2(a3)
    800096a8:	0106969b          	slliw	a3,a3,0x10
    800096ac:	8f55                	or	a4,a4,a3
    800096ae:	1746                	slli	a4,a4,0x31
    800096b0:	9345                	srli	a4,a4,0x31
    800096b2:	00027597          	auipc	a1,0x27
    800096b6:	90658593          	addi	a1,a1,-1786 # 8002ffb8 <__func__.0+0x2c8>
    800096ba:	00e79463          	bne	a5,a4,800096c2 <tinst_tests_pf+0x1748>
    800096be:	9d1fe06f          	j	8000808e <tinst_tests_pf+0x114>
    800096c2:	00027597          	auipc	a1,0x27
    800096c6:	90658593          	addi	a1,a1,-1786 # 8002ffc8 <__func__.0+0x2d8>
    800096ca:	9c5fe06f          	j	8000808e <tinst_tests_pf+0x114>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    800096ce:	701c                	ld	a5,32(s0)
    800096d0:	00027597          	auipc	a1,0x27
    800096d4:	8e858593          	addi	a1,a1,-1816 # 8002ffb8 <__func__.0+0x2c8>
    800096d8:	e399                	bnez	a5,800096de <tinst_tests_pf+0x1764>
    800096da:	a55fe06f          	j	8000812e <tinst_tests_pf+0x1b4>
    800096de:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800096e0:	0016f713          	andi	a4,a3,1
    800096e4:	100719e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800096e8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800096ec:	460d                	li	a2,3
    800096ee:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800096f2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800096f4:	00c59763          	bne	a1,a2,80009702 <tinst_tests_pf+0x1788>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800096f8:	0026d683          	lhu	a3,2(a3)
    800096fc:	0106969b          	slliw	a3,a3,0x10
    80009700:	8f55                	or	a4,a4,a3
    80009702:	1746                	slli	a4,a4,0x31
    80009704:	9345                	srli	a4,a4,0x31
    80009706:	00027597          	auipc	a1,0x27
    8000970a:	8b258593          	addi	a1,a1,-1870 # 8002ffb8 <__func__.0+0x2c8>
    8000970e:	00e79463          	bne	a5,a4,80009716 <tinst_tests_pf+0x179c>
    80009712:	a1dfe06f          	j	8000812e <tinst_tests_pf+0x1b4>
    80009716:	00027597          	auipc	a1,0x27
    8000971a:	8b258593          	addi	a1,a1,-1870 # 8002ffc8 <__func__.0+0x2d8>
    8000971e:	a11fe06f          	j	8000812e <tinst_tests_pf+0x1b4>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009722:	701c                	ld	a5,32(s0)
    80009724:	00027597          	auipc	a1,0x27
    80009728:	89458593          	addi	a1,a1,-1900 # 8002ffb8 <__func__.0+0x2c8>
    8000972c:	e399                	bnez	a5,80009732 <tinst_tests_pf+0x17b8>
    8000972e:	aa1fe06f          	j	800081ce <tinst_tests_pf+0x254>
    80009732:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009734:	0016f713          	andi	a4,a3,1
    80009738:	0a071fe3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000973c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009740:	460d                	li	a2,3
    80009742:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009746:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009748:	00c59763          	bne	a1,a2,80009756 <tinst_tests_pf+0x17dc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000974c:	0026d683          	lhu	a3,2(a3)
    80009750:	0106969b          	slliw	a3,a3,0x10
    80009754:	8f55                	or	a4,a4,a3
    80009756:	1746                	slli	a4,a4,0x31
    80009758:	9345                	srli	a4,a4,0x31
    8000975a:	00027597          	auipc	a1,0x27
    8000975e:	85e58593          	addi	a1,a1,-1954 # 8002ffb8 <__func__.0+0x2c8>
    80009762:	00e79463          	bne	a5,a4,8000976a <tinst_tests_pf+0x17f0>
    80009766:	a69fe06f          	j	800081ce <tinst_tests_pf+0x254>
    8000976a:	00027597          	auipc	a1,0x27
    8000976e:	85e58593          	addi	a1,a1,-1954 # 8002ffc8 <__func__.0+0x2d8>
    80009772:	a5dfe06f          	j	800081ce <tinst_tests_pf+0x254>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80009776:	701c                	ld	a5,32(s0)
    80009778:	00027597          	auipc	a1,0x27
    8000977c:	84058593          	addi	a1,a1,-1984 # 8002ffb8 <__func__.0+0x2c8>
    80009780:	e399                	bnez	a5,80009786 <tinst_tests_pf+0x180c>
    80009782:	aedfe06f          	j	8000826e <tinst_tests_pf+0x2f4>
    80009786:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009788:	0016f713          	andi	a4,a3,1
    8000978c:	060715e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009790:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009794:	460d                	li	a2,3
    80009796:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000979a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000979c:	00c59763          	bne	a1,a2,800097aa <tinst_tests_pf+0x1830>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800097a0:	0026d683          	lhu	a3,2(a3)
    800097a4:	0106969b          	slliw	a3,a3,0x10
    800097a8:	8f55                	or	a4,a4,a3
    800097aa:	1746                	slli	a4,a4,0x31
    800097ac:	9345                	srli	a4,a4,0x31
    800097ae:	00027597          	auipc	a1,0x27
    800097b2:	80a58593          	addi	a1,a1,-2038 # 8002ffb8 <__func__.0+0x2c8>
    800097b6:	00e79463          	bne	a5,a4,800097be <tinst_tests_pf+0x1844>
    800097ba:	ab5fe06f          	j	8000826e <tinst_tests_pf+0x2f4>
    800097be:	00027597          	auipc	a1,0x27
    800097c2:	80a58593          	addi	a1,a1,-2038 # 8002ffc8 <__func__.0+0x2d8>
    800097c6:	aa9fe06f          	j	8000826e <tinst_tests_pf+0x2f4>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    800097ca:	701c                	ld	a5,32(s0)
    800097cc:	00026597          	auipc	a1,0x26
    800097d0:	7ec58593          	addi	a1,a1,2028 # 8002ffb8 <__func__.0+0x2c8>
    800097d4:	e399                	bnez	a5,800097da <tinst_tests_pf+0x1860>
    800097d6:	b31fe06f          	j	80008306 <tinst_tests_pf+0x38c>
    800097da:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800097dc:	0016f713          	andi	a4,a3,1
    800097e0:	00071be3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800097e4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800097e8:	460d                	li	a2,3
    800097ea:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800097ee:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800097f0:	00c59763          	bne	a1,a2,800097fe <tinst_tests_pf+0x1884>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800097f4:	0026d683          	lhu	a3,2(a3)
    800097f8:	0106969b          	slliw	a3,a3,0x10
    800097fc:	8f55                	or	a4,a4,a3
    800097fe:	1746                	slli	a4,a4,0x31
    80009800:	9345                	srli	a4,a4,0x31
    80009802:	00026597          	auipc	a1,0x26
    80009806:	7b658593          	addi	a1,a1,1974 # 8002ffb8 <__func__.0+0x2c8>
    8000980a:	00e79463          	bne	a5,a4,80009812 <tinst_tests_pf+0x1898>
    8000980e:	af9fe06f          	j	80008306 <tinst_tests_pf+0x38c>
    80009812:	00026597          	auipc	a1,0x26
    80009816:	7b658593          	addi	a1,a1,1974 # 8002ffc8 <__func__.0+0x2d8>
    8000981a:	aedfe06f          	j	80008306 <tinst_tests_pf+0x38c>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000981e:	701c                	ld	a5,32(s0)
    80009820:	00026597          	auipc	a1,0x26
    80009824:	79858593          	addi	a1,a1,1944 # 8002ffb8 <__func__.0+0x2c8>
    80009828:	e399                	bnez	a5,8000982e <tinst_tests_pf+0x18b4>
    8000982a:	b75fe06f          	j	8000839e <tinst_tests_pf+0x424>
    8000982e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009830:	0016f713          	andi	a4,a3,1
    80009834:	7c071163          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009838:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000983c:	460d                	li	a2,3
    8000983e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009842:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009844:	00c59763          	bne	a1,a2,80009852 <tinst_tests_pf+0x18d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009848:	0026d683          	lhu	a3,2(a3)
    8000984c:	0106969b          	slliw	a3,a3,0x10
    80009850:	8f55                	or	a4,a4,a3
    80009852:	1746                	slli	a4,a4,0x31
    80009854:	9345                	srli	a4,a4,0x31
    80009856:	00026597          	auipc	a1,0x26
    8000985a:	76258593          	addi	a1,a1,1890 # 8002ffb8 <__func__.0+0x2c8>
    8000985e:	00e79463          	bne	a5,a4,80009866 <tinst_tests_pf+0x18ec>
    80009862:	b3dfe06f          	j	8000839e <tinst_tests_pf+0x424>
    80009866:	00026597          	auipc	a1,0x26
    8000986a:	76258593          	addi	a1,a1,1890 # 8002ffc8 <__func__.0+0x2d8>
    8000986e:	b31fe06f          	j	8000839e <tinst_tests_pf+0x424>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009872:	701c                	ld	a5,32(s0)
    80009874:	00026597          	auipc	a1,0x26
    80009878:	74458593          	addi	a1,a1,1860 # 8002ffb8 <__func__.0+0x2c8>
    8000987c:	e399                	bnez	a5,80009882 <tinst_tests_pf+0x1908>
    8000987e:	bbbfe06f          	j	80008438 <tinst_tests_pf+0x4be>
    80009882:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009884:	0016f713          	andi	a4,a3,1
    80009888:	76071763          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000988c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009890:	460d                	li	a2,3
    80009892:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009896:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009898:	00c59763          	bne	a1,a2,800098a6 <tinst_tests_pf+0x192c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000989c:	0026d683          	lhu	a3,2(a3)
    800098a0:	0106969b          	slliw	a3,a3,0x10
    800098a4:	8f55                	or	a4,a4,a3
    800098a6:	01f076b7          	lui	a3,0x1f07
    800098aa:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    800098ae:	8f75                	and	a4,a4,a3
    800098b0:	00026597          	auipc	a1,0x26
    800098b4:	70858593          	addi	a1,a1,1800 # 8002ffb8 <__func__.0+0x2c8>
    800098b8:	00e79463          	bne	a5,a4,800098c0 <tinst_tests_pf+0x1946>
    800098bc:	b7dfe06f          	j	80008438 <tinst_tests_pf+0x4be>
    800098c0:	00026597          	auipc	a1,0x26
    800098c4:	70858593          	addi	a1,a1,1800 # 8002ffc8 <__func__.0+0x2d8>
    800098c8:	b71fe06f          	j	80008438 <tinst_tests_pf+0x4be>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    800098cc:	701c                	ld	a5,32(s0)
    800098ce:	00026597          	auipc	a1,0x26
    800098d2:	6ea58593          	addi	a1,a1,1770 # 8002ffb8 <__func__.0+0x2c8>
    800098d6:	e399                	bnez	a5,800098dc <tinst_tests_pf+0x1962>
    800098d8:	bfffe06f          	j	800084d6 <tinst_tests_pf+0x55c>
    800098dc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800098de:	0016f713          	andi	a4,a3,1
    800098e2:	70071a63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800098e6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800098ea:	460d                	li	a2,3
    800098ec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800098f0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800098f2:	00c59763          	bne	a1,a2,80009900 <tinst_tests_pf+0x1986>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800098f6:	0026d683          	lhu	a3,2(a3)
    800098fa:	0106969b          	slliw	a3,a3,0x10
    800098fe:	8f55                	or	a4,a4,a3
    80009900:	01f076b7          	lui	a3,0x1f07
    80009904:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009908:	8f75                	and	a4,a4,a3
    8000990a:	00026597          	auipc	a1,0x26
    8000990e:	6ae58593          	addi	a1,a1,1710 # 8002ffb8 <__func__.0+0x2c8>
    80009912:	00e79463          	bne	a5,a4,8000991a <tinst_tests_pf+0x19a0>
    80009916:	bc1fe06f          	j	800084d6 <tinst_tests_pf+0x55c>
    8000991a:	00026597          	auipc	a1,0x26
    8000991e:	6ae58593          	addi	a1,a1,1710 # 8002ffc8 <__func__.0+0x2d8>
    80009922:	bb5fe06f          	j	800084d6 <tinst_tests_pf+0x55c>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009926:	701c                	ld	a5,32(s0)
    80009928:	00026597          	auipc	a1,0x26
    8000992c:	69058593          	addi	a1,a1,1680 # 8002ffb8 <__func__.0+0x2c8>
    80009930:	e399                	bnez	a5,80009936 <tinst_tests_pf+0x19bc>
    80009932:	c45fe06f          	j	80008576 <tinst_tests_pf+0x5fc>
    80009936:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009938:	0016f713          	andi	a4,a3,1
    8000993c:	6a071d63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009940:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009944:	460d                	li	a2,3
    80009946:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000994a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000994c:	00c59763          	bne	a1,a2,8000995a <tinst_tests_pf+0x19e0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009950:	0026d683          	lhu	a3,2(a3)
    80009954:	0106969b          	slliw	a3,a3,0x10
    80009958:	8f55                	or	a4,a4,a3
    8000995a:	01f076b7          	lui	a3,0x1f07
    8000995e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009962:	8f75                	and	a4,a4,a3
    80009964:	00026597          	auipc	a1,0x26
    80009968:	65458593          	addi	a1,a1,1620 # 8002ffb8 <__func__.0+0x2c8>
    8000996c:	00e79463          	bne	a5,a4,80009974 <tinst_tests_pf+0x19fa>
    80009970:	c07fe06f          	j	80008576 <tinst_tests_pf+0x5fc>
    80009974:	00026597          	auipc	a1,0x26
    80009978:	65458593          	addi	a1,a1,1620 # 8002ffc8 <__func__.0+0x2d8>
    8000997c:	bfbfe06f          	j	80008576 <tinst_tests_pf+0x5fc>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009980:	701c                	ld	a5,32(s0)
    80009982:	00026597          	auipc	a1,0x26
    80009986:	63658593          	addi	a1,a1,1590 # 8002ffb8 <__func__.0+0x2c8>
    8000998a:	e399                	bnez	a5,80009990 <tinst_tests_pf+0x1a16>
    8000998c:	c8dfe06f          	j	80008618 <tinst_tests_pf+0x69e>
    80009990:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009992:	0016f713          	andi	a4,a3,1
    80009996:	66071063          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000999a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000999e:	460d                	li	a2,3
    800099a0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800099a4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800099a6:	00c59763          	bne	a1,a2,800099b4 <tinst_tests_pf+0x1a3a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800099aa:	0026d683          	lhu	a3,2(a3)
    800099ae:	0106969b          	slliw	a3,a3,0x10
    800099b2:	8f55                	or	a4,a4,a3
    800099b4:	01f076b7          	lui	a3,0x1f07
    800099b8:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    800099bc:	8f75                	and	a4,a4,a3
    800099be:	00026597          	auipc	a1,0x26
    800099c2:	5fa58593          	addi	a1,a1,1530 # 8002ffb8 <__func__.0+0x2c8>
    800099c6:	00e79463          	bne	a5,a4,800099ce <tinst_tests_pf+0x1a54>
    800099ca:	c4ffe06f          	j	80008618 <tinst_tests_pf+0x69e>
    800099ce:	00026597          	auipc	a1,0x26
    800099d2:	5fa58593          	addi	a1,a1,1530 # 8002ffc8 <__func__.0+0x2d8>
    800099d6:	c43fe06f          	j	80008618 <tinst_tests_pf+0x69e>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    800099da:	701c                	ld	a5,32(s0)
    800099dc:	00026597          	auipc	a1,0x26
    800099e0:	5dc58593          	addi	a1,a1,1500 # 8002ffb8 <__func__.0+0x2c8>
    800099e4:	e399                	bnez	a5,800099ea <tinst_tests_pf+0x1a70>
    800099e6:	f2ffe06f          	j	80008914 <tinst_tests_pf+0x99a>
    800099ea:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800099ec:	0016f713          	andi	a4,a3,1
    800099f0:	60071363          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800099f4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800099f8:	460d                	li	a2,3
    800099fa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800099fe:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a00:	00c59763          	bne	a1,a2,80009a0e <tinst_tests_pf+0x1a94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a04:	0026d683          	lhu	a3,2(a3)
    80009a08:	0106969b          	slliw	a3,a3,0x10
    80009a0c:	8f55                	or	a4,a4,a3
    80009a0e:	1ffe16b7          	lui	a3,0x1ffe1
    80009a12:	068e                	slli	a3,a3,0x3
    80009a14:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009a16:	8f75                	and	a4,a4,a3
    80009a18:	00026597          	auipc	a1,0x26
    80009a1c:	5a058593          	addi	a1,a1,1440 # 8002ffb8 <__func__.0+0x2c8>
    80009a20:	00e79463          	bne	a5,a4,80009a28 <tinst_tests_pf+0x1aae>
    80009a24:	ef1fe06f          	j	80008914 <tinst_tests_pf+0x99a>
    80009a28:	00026597          	auipc	a1,0x26
    80009a2c:	5a058593          	addi	a1,a1,1440 # 8002ffc8 <__func__.0+0x2d8>
    80009a30:	ee5fe06f          	j	80008914 <tinst_tests_pf+0x99a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80009a34:	701c                	ld	a5,32(s0)
    80009a36:	00026597          	auipc	a1,0x26
    80009a3a:	58258593          	addi	a1,a1,1410 # 8002ffb8 <__func__.0+0x2c8>
    80009a3e:	e399                	bnez	a5,80009a44 <tinst_tests_pf+0x1aca>
    80009a40:	f7bfe06f          	j	800089ba <tinst_tests_pf+0xa40>
    80009a44:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a46:	0016f713          	andi	a4,a3,1
    80009a4a:	5a071663          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009a4e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a52:	460d                	li	a2,3
    80009a54:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009a58:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a5a:	00c59763          	bne	a1,a2,80009a68 <tinst_tests_pf+0x1aee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a5e:	0026d683          	lhu	a3,2(a3)
    80009a62:	0106969b          	slliw	a3,a3,0x10
    80009a66:	8f55                	or	a4,a4,a3
    80009a68:	1ffe16b7          	lui	a3,0x1ffe1
    80009a6c:	068e                	slli	a3,a3,0x3
    80009a6e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009a70:	8f75                	and	a4,a4,a3
    80009a72:	00026597          	auipc	a1,0x26
    80009a76:	54658593          	addi	a1,a1,1350 # 8002ffb8 <__func__.0+0x2c8>
    80009a7a:	00e79463          	bne	a5,a4,80009a82 <tinst_tests_pf+0x1b08>
    80009a7e:	f3dfe06f          	j	800089ba <tinst_tests_pf+0xa40>
    80009a82:	00026597          	auipc	a1,0x26
    80009a86:	54658593          	addi	a1,a1,1350 # 8002ffc8 <__func__.0+0x2d8>
    80009a8a:	f31fe06f          	j	800089ba <tinst_tests_pf+0xa40>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009a8e:	701c                	ld	a5,32(s0)
    80009a90:	00026597          	auipc	a1,0x26
    80009a94:	52858593          	addi	a1,a1,1320 # 8002ffb8 <__func__.0+0x2c8>
    80009a98:	e399                	bnez	a5,80009a9e <tinst_tests_pf+0x1b24>
    80009a9a:	fc1fe06f          	j	80008a5a <tinst_tests_pf+0xae0>
    80009a9e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009aa0:	0016f713          	andi	a4,a3,1
    80009aa4:	54071963          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009aa8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009aac:	460d                	li	a2,3
    80009aae:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ab2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ab4:	00c59763          	bne	a1,a2,80009ac2 <tinst_tests_pf+0x1b48>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ab8:	0026d683          	lhu	a3,2(a3)
    80009abc:	0106969b          	slliw	a3,a3,0x10
    80009ac0:	8f55                	or	a4,a4,a3
    80009ac2:	1ffe16b7          	lui	a3,0x1ffe1
    80009ac6:	068e                	slli	a3,a3,0x3
    80009ac8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009aca:	8f75                	and	a4,a4,a3
    80009acc:	00026597          	auipc	a1,0x26
    80009ad0:	4ec58593          	addi	a1,a1,1260 # 8002ffb8 <__func__.0+0x2c8>
    80009ad4:	00e79463          	bne	a5,a4,80009adc <tinst_tests_pf+0x1b62>
    80009ad8:	f83fe06f          	j	80008a5a <tinst_tests_pf+0xae0>
    80009adc:	00026597          	auipc	a1,0x26
    80009ae0:	4ec58593          	addi	a1,a1,1260 # 8002ffc8 <__func__.0+0x2d8>
    80009ae4:	f77fe06f          	j	80008a5a <tinst_tests_pf+0xae0>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009ae8:	701c                	ld	a5,32(s0)
    80009aea:	e399                	bnez	a5,80009af0 <tinst_tests_pf+0x1b76>
    80009aec:	dd8fe06f          	j	800080c4 <tinst_tests_pf+0x14a>
    80009af0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009af2:	0016f713          	andi	a4,a3,1
    80009af6:	50071063          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009afa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009afe:	460d                	li	a2,3
    80009b00:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009b04:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b06:	00c59763          	bne	a1,a2,80009b14 <tinst_tests_pf+0x1b9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b0a:	0026d683          	lhu	a3,2(a3)
    80009b0e:	0106969b          	slliw	a3,a3,0x10
    80009b12:	8f55                	or	a4,a4,a3
    80009b14:	1746                	slli	a4,a4,0x31
    80009b16:	9345                	srli	a4,a4,0x31
    80009b18:	00e78463          	beq	a5,a4,80009b20 <tinst_tests_pf+0x1ba6>
    80009b1c:	d94fe06f          	j	800080b0 <tinst_tests_pf+0x136>
    80009b20:	da4fe06f          	j	800080c4 <tinst_tests_pf+0x14a>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80009b24:	6418                	ld	a4,8(s0)
    80009b26:	47b5                	li	a5,13
    80009b28:	00f70463          	beq	a4,a5,80009b30 <tinst_tests_pf+0x1bb6>
    80009b2c:	f90fe06f          	j	800082bc <tinst_tests_pf+0x342>
    80009b30:	7018                	ld	a4,32(s0)
    80009b32:	e319                	bnez	a4,80009b38 <tinst_tests_pf+0x1bbe>
    80009b34:	f8afe06f          	j	800082be <tinst_tests_pf+0x344>
    80009b38:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b3a:	0016f793          	andi	a5,a3,1
    80009b3e:	4a079c63          	bnez	a5,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009b42:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b46:	460d                	li	a2,3
    80009b48:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009b4c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009b4e:	00c59763          	bne	a1,a2,80009b5c <tinst_tests_pf+0x1be2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b52:	0026d683          	lhu	a3,2(a3)
    80009b56:	0106969b          	slliw	a3,a3,0x10
    80009b5a:	8fd5                	or	a5,a5,a3
    80009b5c:	17c6                	slli	a5,a5,0x31
    80009b5e:	0317d913          	srli	s2,a5,0x31
    80009b62:	40e90933          	sub	s2,s2,a4
    80009b66:	00193913          	seqz	s2,s2
    80009b6a:	f54fe06f          	j	800082be <tinst_tests_pf+0x344>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80009b6e:	6418                	ld	a4,8(s0)
    80009b70:	47bd                	li	a5,15
    80009b72:	00026597          	auipc	a1,0x26
    80009b76:	45658593          	addi	a1,a1,1110 # 8002ffc8 <__func__.0+0x2d8>
    80009b7a:	00f70463          	beq	a4,a5,80009b82 <tinst_tests_pf+0x1c08>
    80009b7e:	f71fe06f          	j	80008aee <tinst_tests_pf+0xb74>
    80009b82:	701c                	ld	a5,32(s0)
    80009b84:	00026597          	auipc	a1,0x26
    80009b88:	43458593          	addi	a1,a1,1076 # 8002ffb8 <__func__.0+0x2c8>
    80009b8c:	e399                	bnez	a5,80009b92 <tinst_tests_pf+0x1c18>
    80009b8e:	f61fe06f          	j	80008aee <tinst_tests_pf+0xb74>
    80009b92:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b94:	0016f713          	andi	a4,a3,1
    80009b98:	44071f63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009b9c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ba0:	460d                	li	a2,3
    80009ba2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ba6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ba8:	00c59763          	bne	a1,a2,80009bb6 <tinst_tests_pf+0x1c3c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009bac:	0026d683          	lhu	a3,2(a3)
    80009bb0:	0106969b          	slliw	a3,a3,0x10
    80009bb4:	8f55                	or	a4,a4,a3
    80009bb6:	1ffe16b7          	lui	a3,0x1ffe1
    80009bba:	068e                	slli	a3,a3,0x3
    80009bbc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009bbe:	8f75                	and	a4,a4,a3
    80009bc0:	00026597          	auipc	a1,0x26
    80009bc4:	3f858593          	addi	a1,a1,1016 # 8002ffb8 <__func__.0+0x2c8>
    80009bc8:	00e78463          	beq	a5,a4,80009bd0 <tinst_tests_pf+0x1c56>
    80009bcc:	f1bfe06f          	j	80008ae6 <tinst_tests_pf+0xb6c>
    80009bd0:	f1ffe06f          	j	80008aee <tinst_tests_pf+0xb74>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009bd4:	6418                	ld	a4,8(s0)
    80009bd6:	47b5                	li	a5,13
    80009bd8:	00f70463          	beq	a4,a5,80009be0 <tinst_tests_pf+0x1c66>
    80009bdc:	f78fe06f          	j	80008354 <tinst_tests_pf+0x3da>
    80009be0:	7018                	ld	a4,32(s0)
    80009be2:	e319                	bnez	a4,80009be8 <tinst_tests_pf+0x1c6e>
    80009be4:	f72fe06f          	j	80008356 <tinst_tests_pf+0x3dc>
    80009be8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009bea:	0016f793          	andi	a5,a3,1
    80009bee:	40079463          	bnez	a5,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009bf2:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009bf6:	460d                	li	a2,3
    80009bf8:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009bfc:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009bfe:	00c59763          	bne	a1,a2,80009c0c <tinst_tests_pf+0x1c92>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c02:	0026d683          	lhu	a3,2(a3)
    80009c06:	0106969b          	slliw	a3,a3,0x10
    80009c0a:	8fd5                	or	a5,a5,a3
    80009c0c:	17c6                	slli	a5,a5,0x31
    80009c0e:	0317d913          	srli	s2,a5,0x31
    80009c12:	40e90933          	sub	s2,s2,a4
    80009c16:	00193913          	seqz	s2,s2
    80009c1a:	f3cfe06f          	j	80008356 <tinst_tests_pf+0x3dc>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009c1e:	6418                	ld	a4,8(s0)
    80009c20:	47b5                	li	a5,13
    80009c22:	00f70463          	beq	a4,a5,80009c2a <tinst_tests_pf+0x1cb0>
    80009c26:	fc6fe06f          	j	800083ec <tinst_tests_pf+0x472>
    80009c2a:	7018                	ld	a4,32(s0)
    80009c2c:	e319                	bnez	a4,80009c32 <tinst_tests_pf+0x1cb8>
    80009c2e:	fc0fe06f          	j	800083ee <tinst_tests_pf+0x474>
    80009c32:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c34:	0016f793          	andi	a5,a3,1
    80009c38:	3a079f63          	bnez	a5,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009c3c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c40:	460d                	li	a2,3
    80009c42:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009c46:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009c48:	00c59763          	bne	a1,a2,80009c56 <tinst_tests_pf+0x1cdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c4c:	0026d683          	lhu	a3,2(a3)
    80009c50:	0106969b          	slliw	a3,a3,0x10
    80009c54:	8fd5                	or	a5,a5,a3
    80009c56:	17c6                	slli	a5,a5,0x31
    80009c58:	0317d913          	srli	s2,a5,0x31
    80009c5c:	40e90933          	sub	s2,s2,a4
    80009c60:	00193913          	seqz	s2,s2
    80009c64:	f8afe06f          	j	800083ee <tinst_tests_pf+0x474>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009c68:	6418                	ld	a4,8(s0)
    80009c6a:	47bd                	li	a5,15
    80009c6c:	00f70463          	beq	a4,a5,80009c74 <tinst_tests_pf+0x1cfa>
    80009c70:	817fe06f          	j	80008486 <tinst_tests_pf+0x50c>
    80009c74:	701c                	ld	a5,32(s0)
    80009c76:	e399                	bnez	a5,80009c7c <tinst_tests_pf+0x1d02>
    80009c78:	811fe06f          	j	80008488 <tinst_tests_pf+0x50e>
    80009c7c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c7e:	0016f713          	andi	a4,a3,1
    80009c82:	36071a63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009c86:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c8a:	460d                	li	a2,3
    80009c8c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009c90:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009c92:	00c59763          	bne	a1,a2,80009ca0 <tinst_tests_pf+0x1d26>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c96:	0026d683          	lhu	a3,2(a3)
    80009c9a:	0106969b          	slliw	a3,a3,0x10
    80009c9e:	8f55                	or	a4,a4,a3
    80009ca0:	01f076b7          	lui	a3,0x1f07
    80009ca4:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009ca8:	8f75                	and	a4,a4,a3
    80009caa:	40f70933          	sub	s2,a4,a5
    80009cae:	00193913          	seqz	s2,s2
    80009cb2:	fd6fe06f          	j	80008488 <tinst_tests_pf+0x50e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009cb6:	6418                	ld	a4,8(s0)
    80009cb8:	47bd                	li	a5,15
    80009cba:	00f70463          	beq	a4,a5,80009cc2 <tinst_tests_pf+0x1d48>
    80009cbe:	867fe06f          	j	80008524 <tinst_tests_pf+0x5aa>
    80009cc2:	701c                	ld	a5,32(s0)
    80009cc4:	e399                	bnez	a5,80009cca <tinst_tests_pf+0x1d50>
    80009cc6:	861fe06f          	j	80008526 <tinst_tests_pf+0x5ac>
    80009cca:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ccc:	0016f713          	andi	a4,a3,1
    80009cd0:	32071363          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009cd4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009cd8:	460d                	li	a2,3
    80009cda:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009cde:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ce0:	00c59763          	bne	a1,a2,80009cee <tinst_tests_pf+0x1d74>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ce4:	0026d683          	lhu	a3,2(a3)
    80009ce8:	0106969b          	slliw	a3,a3,0x10
    80009cec:	8f55                	or	a4,a4,a3
    80009cee:	01f076b7          	lui	a3,0x1f07
    80009cf2:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009cf6:	8f75                	and	a4,a4,a3
    80009cf8:	40f70933          	sub	s2,a4,a5
    80009cfc:	00193913          	seqz	s2,s2
    80009d00:	827fe06f          	j	80008526 <tinst_tests_pf+0x5ac>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009d04:	6418                	ld	a4,8(s0)
    80009d06:	47bd                	li	a5,15
    80009d08:	00f70463          	beq	a4,a5,80009d10 <tinst_tests_pf+0x1d96>
    80009d0c:	8b9fe06f          	j	800085c4 <tinst_tests_pf+0x64a>
    80009d10:	701c                	ld	a5,32(s0)
    80009d12:	e399                	bnez	a5,80009d18 <tinst_tests_pf+0x1d9e>
    80009d14:	8b3fe06f          	j	800085c6 <tinst_tests_pf+0x64c>
    80009d18:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d1a:	0016f713          	andi	a4,a3,1
    80009d1e:	2c071c63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009d22:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d26:	460d                	li	a2,3
    80009d28:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d2c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d2e:	00c59763          	bne	a1,a2,80009d3c <tinst_tests_pf+0x1dc2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d32:	0026d683          	lhu	a3,2(a3)
    80009d36:	0106969b          	slliw	a3,a3,0x10
    80009d3a:	8f55                	or	a4,a4,a3
    80009d3c:	01f076b7          	lui	a3,0x1f07
    80009d40:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009d44:	8f75                	and	a4,a4,a3
    80009d46:	40f70933          	sub	s2,a4,a5
    80009d4a:	00193913          	seqz	s2,s2
    80009d4e:	879fe06f          	j	800085c6 <tinst_tests_pf+0x64c>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009d52:	6418                	ld	a4,8(s0)
    80009d54:	47bd                	li	a5,15
    80009d56:	00f70463          	beq	a4,a5,80009d5e <tinst_tests_pf+0x1de4>
    80009d5a:	90dfe06f          	j	80008666 <tinst_tests_pf+0x6ec>
    80009d5e:	701c                	ld	a5,32(s0)
    80009d60:	e399                	bnez	a5,80009d66 <tinst_tests_pf+0x1dec>
    80009d62:	907fe06f          	j	80008668 <tinst_tests_pf+0x6ee>
    80009d66:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d68:	0016f713          	andi	a4,a3,1
    80009d6c:	28071563          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009d70:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d74:	460d                	li	a2,3
    80009d76:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d7a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d7c:	00c59763          	bne	a1,a2,80009d8a <tinst_tests_pf+0x1e10>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d80:	0026d683          	lhu	a3,2(a3)
    80009d84:	0106969b          	slliw	a3,a3,0x10
    80009d88:	8f55                	or	a4,a4,a3
    80009d8a:	01f076b7          	lui	a3,0x1f07
    80009d8e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009d92:	8f75                	and	a4,a4,a3
    80009d94:	40f70933          	sub	s2,a4,a5
    80009d98:	00193913          	seqz	s2,s2
    80009d9c:	8cdfe06f          	j	80008668 <tinst_tests_pf+0x6ee>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009da0:	6418                	ld	a4,8(s0)
    80009da2:	47b5                	li	a5,13
    80009da4:	00f70463          	beq	a4,a5,80009dac <tinst_tests_pf+0x1e32>
    80009da8:	951fe06f          	j	800086f8 <tinst_tests_pf+0x77e>
    80009dac:	7004                	ld	s1,32(s0)
    80009dae:	e099                	bnez	s1,80009db4 <tinst_tests_pf+0x1e3a>
    80009db0:	94bfe06f          	j	800086fa <tinst_tests_pf+0x780>
    80009db4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009db6:	0017f713          	andi	a4,a5,1
    80009dba:	22071e63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009dbe:	0007d503          	lhu	a0,0(a5)
    80009dc2:	a2df70ef          	jal	800017ee <expand_compressed_instruction>
    80009dc6:	67a1                	lui	a5,0x8
    80009dc8:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009dca:	00f57933          	and	s2,a0,a5
    80009dce:	40990933          	sub	s2,s2,s1
    80009dd2:	00193913          	seqz	s2,s2
    80009dd6:	925fe06f          	j	800086fa <tinst_tests_pf+0x780>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009dda:	6418                	ld	a4,8(s0)
    80009ddc:	47b5                	li	a5,13
    80009dde:	00f70463          	beq	a4,a5,80009de6 <tinst_tests_pf+0x1e6c>
    80009de2:	9abfe06f          	j	8000878c <tinst_tests_pf+0x812>
    80009de6:	02043983          	ld	s3,32(s0)
    80009dea:	00099463          	bnez	s3,80009df2 <tinst_tests_pf+0x1e78>
    80009dee:	9a1fe06f          	j	8000878e <tinst_tests_pf+0x814>
    80009df2:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009df4:	0017f713          	andi	a4,a5,1
    80009df8:	1e071f63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009dfc:	0007d503          	lhu	a0,0(a5)
    80009e00:	9eff70ef          	jal	800017ee <expand_compressed_instruction>
    80009e04:	67a1                	lui	a5,0x8
    80009e06:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009e08:	00f57933          	and	s2,a0,a5
    80009e0c:	41390933          	sub	s2,s2,s3
    80009e10:	00193913          	seqz	s2,s2
    80009e14:	97bfe06f          	j	8000878e <tinst_tests_pf+0x814>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80009e18:	701c                	ld	a5,32(s0)
    80009e1a:	e399                	bnez	a5,80009e20 <tinst_tests_pf+0x1ea6>
    80009e1c:	b2ffe06f          	j	8000894a <tinst_tests_pf+0x9d0>
    80009e20:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e22:	0016f713          	andi	a4,a3,1
    80009e26:	1c071863          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009e2a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e2e:	460d                	li	a2,3
    80009e30:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009e34:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009e36:	00c59763          	bne	a1,a2,80009e44 <tinst_tests_pf+0x1eca>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e3a:	0026d683          	lhu	a3,2(a3)
    80009e3e:	0106969b          	slliw	a3,a3,0x10
    80009e42:	8f55                	or	a4,a4,a3
    80009e44:	1ffe16b7          	lui	a3,0x1ffe1
    80009e48:	068e                	slli	a3,a3,0x3
    80009e4a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009e4c:	8f75                	and	a4,a4,a3
    80009e4e:	00e78463          	beq	a5,a4,80009e56 <tinst_tests_pf+0x1edc>
    80009e52:	ae5fe06f          	j	80008936 <tinst_tests_pf+0x9bc>
    80009e56:	af5fe06f          	j	8000894a <tinst_tests_pf+0x9d0>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80009e5a:	701c                	ld	a5,32(s0)
    80009e5c:	e399                	bnez	a5,80009e62 <tinst_tests_pf+0x1ee8>
    80009e5e:	b93fe06f          	j	800089f0 <tinst_tests_pf+0xa76>
    80009e62:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e64:	0016f713          	andi	a4,a3,1
    80009e68:	18071763          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009e6c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e70:	460d                	li	a2,3
    80009e72:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009e76:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009e78:	00c59763          	bne	a1,a2,80009e86 <tinst_tests_pf+0x1f0c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e7c:	0026d683          	lhu	a3,2(a3)
    80009e80:	0106969b          	slliw	a3,a3,0x10
    80009e84:	8f55                	or	a4,a4,a3
    80009e86:	1ffe16b7          	lui	a3,0x1ffe1
    80009e8a:	068e                	slli	a3,a3,0x3
    80009e8c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009e8e:	8f75                	and	a4,a4,a3
    80009e90:	00e78463          	beq	a5,a4,80009e98 <tinst_tests_pf+0x1f1e>
    80009e94:	b49fe06f          	j	800089dc <tinst_tests_pf+0xa62>
    80009e98:	b59fe06f          	j	800089f0 <tinst_tests_pf+0xa76>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009e9c:	7004                	ld	s1,32(s0)
    80009e9e:	780494e3          	bnez	s1,8000ae26 <tinst_tests_pf+0x2eac>
    80009ea2:	00026597          	auipc	a1,0x26
    80009ea6:	11658593          	addi	a1,a1,278 # 8002ffb8 <__func__.0+0x2c8>
    80009eaa:	801fe06f          	j	800086aa <tinst_tests_pf+0x730>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009eae:	701c                	ld	a5,32(s0)
    80009eb0:	e399                	bnez	a5,80009eb6 <tinst_tests_pf+0x1f3c>
    80009eb2:	bdffe06f          	j	80008a90 <tinst_tests_pf+0xb16>
    80009eb6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009eb8:	0016f713          	andi	a4,a3,1
    80009ebc:	12071d63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009ec0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ec4:	460d                	li	a2,3
    80009ec6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009eca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ecc:	00c59763          	bne	a1,a2,80009eda <tinst_tests_pf+0x1f60>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ed0:	0026d683          	lhu	a3,2(a3)
    80009ed4:	0106969b          	slliw	a3,a3,0x10
    80009ed8:	8f55                	or	a4,a4,a3
    80009eda:	1ffe16b7          	lui	a3,0x1ffe1
    80009ede:	068e                	slli	a3,a3,0x3
    80009ee0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009ee2:	8f75                	and	a4,a4,a3
    80009ee4:	00e78463          	beq	a5,a4,80009eec <tinst_tests_pf+0x1f72>
    80009ee8:	b95fe06f          	j	80008a7c <tinst_tests_pf+0xb02>
    80009eec:	ba5fe06f          	j	80008a90 <tinst_tests_pf+0xb16>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009ef0:	02043983          	ld	s3,32(s0)
    80009ef4:	74099fe3          	bnez	s3,8000ae52 <tinst_tests_pf+0x2ed8>
    80009ef8:	00026597          	auipc	a1,0x26
    80009efc:	0c058593          	addi	a1,a1,192 # 8002ffb8 <__func__.0+0x2c8>
    80009f00:	83ffe06f          	j	8000873e <tinst_tests_pf+0x7c4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009f04:	02043983          	ld	s3,32(s0)
    80009f08:	7a099ce3          	bnez	s3,8000aec0 <tinst_tests_pf+0x2f46>
    80009f0c:	00026597          	auipc	a1,0x26
    80009f10:	0ac58593          	addi	a1,a1,172 # 8002ffb8 <__func__.0+0x2c8>
    80009f14:	8bffe06f          	j	800087d2 <tinst_tests_pf+0x858>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    80009f18:	7004                	ld	s1,32(s0)
    80009f1a:	c099                	beqz	s1,80009f20 <tinst_tests_pf+0x1fa6>
    80009f1c:	0160106f          	j	8000af32 <tinst_tests_pf+0x2fb8>
    80009f20:	00026597          	auipc	a1,0x26
    80009f24:	09858593          	addi	a1,a1,152 # 8002ffb8 <__func__.0+0x2c8>
    80009f28:	947fe06f          	j	8000886e <tinst_tests_pf+0x8f4>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009f2c:	7018                	ld	a4,32(s0)
    80009f2e:	e319                	bnez	a4,80009f34 <tinst_tests_pf+0x1fba>
    80009f30:	9b6fe06f          	j	800080e6 <tinst_tests_pf+0x16c>
    80009f34:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f36:	0016f793          	andi	a5,a3,1
    80009f3a:	efd5                	bnez	a5,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009f3c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f40:	460d                	li	a2,3
    80009f42:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009f46:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009f48:	00c59763          	bne	a1,a2,80009f56 <tinst_tests_pf+0x1fdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f4c:	0026d683          	lhu	a3,2(a3)
    80009f50:	0106969b          	slliw	a3,a3,0x10
    80009f54:	8fd5                	or	a5,a5,a3
    80009f56:	03179913          	slli	s2,a5,0x31
    80009f5a:	03195913          	srli	s2,s2,0x31
    80009f5e:	40e90933          	sub	s2,s2,a4
    80009f62:	00193913          	seqz	s2,s2
    80009f66:	980fe06f          	j	800080e6 <tinst_tests_pf+0x16c>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009f6a:	7018                	ld	a4,32(s0)
    80009f6c:	e319                	bnez	a4,80009f72 <tinst_tests_pf+0x1ff8>
    80009f6e:	a18fe06f          	j	80008186 <tinst_tests_pf+0x20c>
    80009f72:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f74:	0016f793          	andi	a5,a3,1
    80009f78:	efbd                	bnez	a5,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009f7a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f7e:	460d                	li	a2,3
    80009f80:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009f84:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009f86:	00c59763          	bne	a1,a2,80009f94 <tinst_tests_pf+0x201a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f8a:	0026d683          	lhu	a3,2(a3)
    80009f8e:	0106969b          	slliw	a3,a3,0x10
    80009f92:	8fd5                	or	a5,a5,a3
    80009f94:	03179913          	slli	s2,a5,0x31
    80009f98:	03195913          	srli	s2,s2,0x31
    80009f9c:	40e90933          	sub	s2,s2,a4
    80009fa0:	00193913          	seqz	s2,s2
    80009fa4:	9e2fe06f          	j	80008186 <tinst_tests_pf+0x20c>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009fa8:	7018                	ld	a4,32(s0)
    80009faa:	e319                	bnez	a4,80009fb0 <tinst_tests_pf+0x2036>
    80009fac:	a7afe06f          	j	80008226 <tinst_tests_pf+0x2ac>
    80009fb0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009fb2:	0016f793          	andi	a5,a3,1
    80009fb6:	e3a1                	bnez	a5,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009fb8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009fbc:	460d                	li	a2,3
    80009fbe:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009fc2:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009fc4:	00c59763          	bne	a1,a2,80009fd2 <tinst_tests_pf+0x2058>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009fc8:	0026d683          	lhu	a3,2(a3)
    80009fcc:	0106969b          	slliw	a3,a3,0x10
    80009fd0:	8fd5                	or	a5,a5,a3
    80009fd2:	17c6                	slli	a5,a5,0x31
    80009fd4:	0317d913          	srli	s2,a5,0x31
    80009fd8:	40e90933          	sub	s2,s2,a4
    80009fdc:	00193913          	seqz	s2,s2
    80009fe0:	a46fe06f          	j	80008226 <tinst_tests_pf+0x2ac>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009fe4:	701c                	ld	a5,32(s0)
    80009fe6:	e399                	bnez	a5,80009fec <tinst_tests_pf+0x2072>
    80009fe8:	97cfe06f          	j	80008164 <tinst_tests_pf+0x1ea>
    80009fec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009fee:	0016f713          	andi	a4,a3,1
    80009ff2:	3e070fe3          	beqz	a4,8000abf0 <tinst_tests_pf+0x2c76>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    80009ff6:	12300613          	li	a2,291
    80009ffa:	00024597          	auipc	a1,0x24
    80009ffe:	3fe58593          	addi	a1,a1,1022 # 8002e3f8 <__func__.1>
    8000a002:	00028517          	auipc	a0,0x28
    8000a006:	99e50513          	addi	a0,a0,-1634 # 800319a0 <__func__.0+0x1cb0>
    8000a00a:	082230ef          	jal	8002d08c <printf>
    8000a00e:	12300613          	li	a2,291
    8000a012:	00024597          	auipc	a1,0x24
    8000a016:	3e658593          	addi	a1,a1,998 # 8002e3f8 <__func__.1>
    8000a01a:	00026517          	auipc	a0,0x26
    8000a01e:	14650513          	addi	a0,a0,326 # 80030160 <__func__.0+0x470>
    8000a022:	06a230ef          	jal	8002d08c <printf>
    8000a026:	4501                	li	a0,0
    8000a028:	41b220ef          	jal	8002cc42 <exit>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000a02c:	701c                	ld	a5,32(s0)
    8000a02e:	00026597          	auipc	a1,0x26
    8000a032:	f8a58593          	addi	a1,a1,-118 # 8002ffb8 <__func__.0+0x2c8>
    8000a036:	e399                	bnez	a5,8000a03c <tinst_tests_pf+0x20c2>
    8000a038:	b57fe06f          	j	80008b8e <tinst_tests_pf+0xc14>
    8000a03c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a03e:	0016f713          	andi	a4,a3,1
    8000a042:	fb55                	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a044:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a048:	460d                	li	a2,3
    8000a04a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a04e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a050:	00c59763          	bne	a1,a2,8000a05e <tinst_tests_pf+0x20e4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a054:	0026d683          	lhu	a3,2(a3)
    8000a058:	0106969b          	slliw	a3,a3,0x10
    8000a05c:	8f55                	or	a4,a4,a3
    8000a05e:	1ffe16b7          	lui	a3,0x1ffe1
    8000a062:	068e                	slli	a3,a3,0x3
    8000a064:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a066:	8f75                	and	a4,a4,a3
    8000a068:	00026597          	auipc	a1,0x26
    8000a06c:	f5058593          	addi	a1,a1,-176 # 8002ffb8 <__func__.0+0x2c8>
    8000a070:	00e79463          	bne	a5,a4,8000a078 <tinst_tests_pf+0x20fe>
    8000a074:	b1bfe06f          	j	80008b8e <tinst_tests_pf+0xc14>
    8000a078:	00026597          	auipc	a1,0x26
    8000a07c:	f5058593          	addi	a1,a1,-176 # 8002ffc8 <__func__.0+0x2d8>
    8000a080:	b0ffe06f          	j	80008b8e <tinst_tests_pf+0xc14>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    8000a084:	701c                	ld	a5,32(s0)
    8000a086:	e399                	bnez	a5,8000a08c <tinst_tests_pf+0x2112>
    8000a088:	97cfe06f          	j	80008204 <tinst_tests_pf+0x28a>
    8000a08c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a08e:	0016f713          	andi	a4,a3,1
    8000a092:	f335                	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a094:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a098:	460d                	li	a2,3
    8000a09a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a09e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a0a0:	00c59763          	bne	a1,a2,8000a0ae <tinst_tests_pf+0x2134>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a0a4:	0026d683          	lhu	a3,2(a3)
    8000a0a8:	0106969b          	slliw	a3,a3,0x10
    8000a0ac:	8f55                	or	a4,a4,a3
    8000a0ae:	1746                	slli	a4,a4,0x31
    8000a0b0:	9345                	srli	a4,a4,0x31
    8000a0b2:	00e78463          	beq	a5,a4,8000a0ba <tinst_tests_pf+0x2140>
    8000a0b6:	93afe06f          	j	800081f0 <tinst_tests_pf+0x276>
    8000a0ba:	94afe06f          	j	80008204 <tinst_tests_pf+0x28a>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a0be:	701c                	ld	a5,32(s0)
    8000a0c0:	00026597          	auipc	a1,0x26
    8000a0c4:	ef858593          	addi	a1,a1,-264 # 8002ffb8 <__func__.0+0x2c8>
    8000a0c8:	e399                	bnez	a5,8000a0ce <tinst_tests_pf+0x2154>
    8000a0ca:	b65fe06f          	j	80008c2e <tinst_tests_pf+0xcb4>
    8000a0ce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a0d0:	0016f713          	andi	a4,a3,1
    8000a0d4:	f30d                	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a0d6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a0da:	460d                	li	a2,3
    8000a0dc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a0e0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a0e2:	00c59763          	bne	a1,a2,8000a0f0 <tinst_tests_pf+0x2176>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a0e6:	0026d683          	lhu	a3,2(a3)
    8000a0ea:	0106969b          	slliw	a3,a3,0x10
    8000a0ee:	8f55                	or	a4,a4,a3
    8000a0f0:	1ffe16b7          	lui	a3,0x1ffe1
    8000a0f4:	068e                	slli	a3,a3,0x3
    8000a0f6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a0f8:	8f75                	and	a4,a4,a3
    8000a0fa:	00026597          	auipc	a1,0x26
    8000a0fe:	ebe58593          	addi	a1,a1,-322 # 8002ffb8 <__func__.0+0x2c8>
    8000a102:	00e79463          	bne	a5,a4,8000a10a <tinst_tests_pf+0x2190>
    8000a106:	b29fe06f          	j	80008c2e <tinst_tests_pf+0xcb4>
    8000a10a:	00026597          	auipc	a1,0x26
    8000a10e:	ebe58593          	addi	a1,a1,-322 # 8002ffc8 <__func__.0+0x2d8>
    8000a112:	b1dfe06f          	j	80008c2e <tinst_tests_pf+0xcb4>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    8000a116:	701c                	ld	a5,32(s0)
    8000a118:	e399                	bnez	a5,8000a11e <tinst_tests_pf+0x21a4>
    8000a11a:	98afe06f          	j	800082a4 <tinst_tests_pf+0x32a>
    8000a11e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a120:	0016f713          	andi	a4,a3,1
    8000a124:	ec0719e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a128:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a12c:	460d                	li	a2,3
    8000a12e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a132:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a134:	00c59763          	bne	a1,a2,8000a142 <tinst_tests_pf+0x21c8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a138:	0026d683          	lhu	a3,2(a3)
    8000a13c:	0106969b          	slliw	a3,a3,0x10
    8000a140:	8f55                	or	a4,a4,a3
    8000a142:	1746                	slli	a4,a4,0x31
    8000a144:	9345                	srli	a4,a4,0x31
    8000a146:	00e78463          	beq	a5,a4,8000a14e <tinst_tests_pf+0x21d4>
    8000a14a:	946fe06f          	j	80008290 <tinst_tests_pf+0x316>
    8000a14e:	956fe06f          	j	800082a4 <tinst_tests_pf+0x32a>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a152:	701c                	ld	a5,32(s0)
    8000a154:	00026597          	auipc	a1,0x26
    8000a158:	e6458593          	addi	a1,a1,-412 # 8002ffb8 <__func__.0+0x2c8>
    8000a15c:	e399                	bnez	a5,8000a162 <tinst_tests_pf+0x21e8>
    8000a15e:	b71fe06f          	j	80008cce <tinst_tests_pf+0xd54>
    8000a162:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a164:	0016f713          	andi	a4,a3,1
    8000a168:	e80717e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a16c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a170:	460d                	li	a2,3
    8000a172:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a176:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a178:	00c59763          	bne	a1,a2,8000a186 <tinst_tests_pf+0x220c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a17c:	0026d683          	lhu	a3,2(a3)
    8000a180:	0106969b          	slliw	a3,a3,0x10
    8000a184:	8f55                	or	a4,a4,a3
    8000a186:	1ffe16b7          	lui	a3,0x1ffe1
    8000a18a:	068e                	slli	a3,a3,0x3
    8000a18c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a18e:	8f75                	and	a4,a4,a3
    8000a190:	00026597          	auipc	a1,0x26
    8000a194:	e2858593          	addi	a1,a1,-472 # 8002ffb8 <__func__.0+0x2c8>
    8000a198:	00e79463          	bne	a5,a4,8000a1a0 <tinst_tests_pf+0x2226>
    8000a19c:	b33fe06f          	j	80008cce <tinst_tests_pf+0xd54>
    8000a1a0:	00026597          	auipc	a1,0x26
    8000a1a4:	e2858593          	addi	a1,a1,-472 # 8002ffc8 <__func__.0+0x2d8>
    8000a1a8:	b27fe06f          	j	80008cce <tinst_tests_pf+0xd54>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000a1ac:	701c                	ld	a5,32(s0)
    8000a1ae:	e399                	bnez	a5,8000a1b4 <tinst_tests_pf+0x223a>
    8000a1b0:	98cfe06f          	j	8000833c <tinst_tests_pf+0x3c2>
    8000a1b4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1b6:	0016f713          	andi	a4,a3,1
    8000a1ba:	e2071ee3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a1be:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1c2:	460d                	li	a2,3
    8000a1c4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a1c8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a1ca:	00c59763          	bne	a1,a2,8000a1d8 <tinst_tests_pf+0x225e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1ce:	0026d683          	lhu	a3,2(a3)
    8000a1d2:	0106969b          	slliw	a3,a3,0x10
    8000a1d6:	8f55                	or	a4,a4,a3
    8000a1d8:	1746                	slli	a4,a4,0x31
    8000a1da:	9345                	srli	a4,a4,0x31
    8000a1dc:	00e78463          	beq	a5,a4,8000a1e4 <tinst_tests_pf+0x226a>
    8000a1e0:	948fe06f          	j	80008328 <tinst_tests_pf+0x3ae>
    8000a1e4:	958fe06f          	j	8000833c <tinst_tests_pf+0x3c2>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a1e8:	701c                	ld	a5,32(s0)
    8000a1ea:	00026597          	auipc	a1,0x26
    8000a1ee:	dce58593          	addi	a1,a1,-562 # 8002ffb8 <__func__.0+0x2c8>
    8000a1f2:	e399                	bnez	a5,8000a1f8 <tinst_tests_pf+0x227e>
    8000a1f4:	b7bfe06f          	j	80008d6e <tinst_tests_pf+0xdf4>
    8000a1f8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1fa:	0016f713          	andi	a4,a3,1
    8000a1fe:	de071ce3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a202:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a206:	460d                	li	a2,3
    8000a208:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a20c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a20e:	00c59763          	bne	a1,a2,8000a21c <tinst_tests_pf+0x22a2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a212:	0026d683          	lhu	a3,2(a3)
    8000a216:	0106969b          	slliw	a3,a3,0x10
    8000a21a:	8f55                	or	a4,a4,a3
    8000a21c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a220:	068e                	slli	a3,a3,0x3
    8000a222:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a224:	8f75                	and	a4,a4,a3
    8000a226:	00026597          	auipc	a1,0x26
    8000a22a:	d9258593          	addi	a1,a1,-622 # 8002ffb8 <__func__.0+0x2c8>
    8000a22e:	00e79463          	bne	a5,a4,8000a236 <tinst_tests_pf+0x22bc>
    8000a232:	b3dfe06f          	j	80008d6e <tinst_tests_pf+0xdf4>
    8000a236:	00026597          	auipc	a1,0x26
    8000a23a:	d9258593          	addi	a1,a1,-622 # 8002ffc8 <__func__.0+0x2d8>
    8000a23e:	b31fe06f          	j	80008d6e <tinst_tests_pf+0xdf4>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000a242:	701c                	ld	a5,32(s0)
    8000a244:	e399                	bnez	a5,8000a24a <tinst_tests_pf+0x22d0>
    8000a246:	98efe06f          	j	800083d4 <tinst_tests_pf+0x45a>
    8000a24a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a24c:	0016f713          	andi	a4,a3,1
    8000a250:	da0713e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a254:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a258:	460d                	li	a2,3
    8000a25a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a25e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a260:	00c59763          	bne	a1,a2,8000a26e <tinst_tests_pf+0x22f4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a264:	0026d683          	lhu	a3,2(a3)
    8000a268:	0106969b          	slliw	a3,a3,0x10
    8000a26c:	8f55                	or	a4,a4,a3
    8000a26e:	1746                	slli	a4,a4,0x31
    8000a270:	9345                	srli	a4,a4,0x31
    8000a272:	00e78463          	beq	a5,a4,8000a27a <tinst_tests_pf+0x2300>
    8000a276:	94afe06f          	j	800083c0 <tinst_tests_pf+0x446>
    8000a27a:	95afe06f          	j	800083d4 <tinst_tests_pf+0x45a>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a27e:	701c                	ld	a5,32(s0)
    8000a280:	00026597          	auipc	a1,0x26
    8000a284:	d3858593          	addi	a1,a1,-712 # 8002ffb8 <__func__.0+0x2c8>
    8000a288:	e399                	bnez	a5,8000a28e <tinst_tests_pf+0x2314>
    8000a28a:	b85fe06f          	j	80008e0e <tinst_tests_pf+0xe94>
    8000a28e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a290:	0016f713          	andi	a4,a3,1
    8000a294:	d60711e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a298:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a29c:	460d                	li	a2,3
    8000a29e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a2a2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a2a4:	00c59763          	bne	a1,a2,8000a2b2 <tinst_tests_pf+0x2338>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a2a8:	0026d683          	lhu	a3,2(a3)
    8000a2ac:	0106969b          	slliw	a3,a3,0x10
    8000a2b0:	8f55                	or	a4,a4,a3
    8000a2b2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a2b6:	068e                	slli	a3,a3,0x3
    8000a2b8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a2ba:	8f75                	and	a4,a4,a3
    8000a2bc:	00026597          	auipc	a1,0x26
    8000a2c0:	cfc58593          	addi	a1,a1,-772 # 8002ffb8 <__func__.0+0x2c8>
    8000a2c4:	00e79463          	bne	a5,a4,8000a2cc <tinst_tests_pf+0x2352>
    8000a2c8:	b47fe06f          	j	80008e0e <tinst_tests_pf+0xe94>
    8000a2cc:	00026597          	auipc	a1,0x26
    8000a2d0:	cfc58593          	addi	a1,a1,-772 # 8002ffc8 <__func__.0+0x2d8>
    8000a2d4:	b3bfe06f          	j	80008e0e <tinst_tests_pf+0xe94>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000a2d8:	701c                	ld	a5,32(s0)
    8000a2da:	e399                	bnez	a5,8000a2e0 <tinst_tests_pf+0x2366>
    8000a2dc:	992fe06f          	j	8000846e <tinst_tests_pf+0x4f4>
    8000a2e0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a2e2:	0016f713          	andi	a4,a3,1
    8000a2e6:	d00718e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a2ea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a2ee:	460d                	li	a2,3
    8000a2f0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a2f4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a2f6:	00c59763          	bne	a1,a2,8000a304 <tinst_tests_pf+0x238a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a2fa:	0026d683          	lhu	a3,2(a3)
    8000a2fe:	0106969b          	slliw	a3,a3,0x10
    8000a302:	8f55                	or	a4,a4,a3
    8000a304:	01f076b7          	lui	a3,0x1f07
    8000a308:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a30c:	8f75                	and	a4,a4,a3
    8000a30e:	00e78463          	beq	a5,a4,8000a316 <tinst_tests_pf+0x239c>
    8000a312:	948fe06f          	j	8000845a <tinst_tests_pf+0x4e0>
    8000a316:	958fe06f          	j	8000846e <tinst_tests_pf+0x4f4>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a31a:	701c                	ld	a5,32(s0)
    8000a31c:	00026597          	auipc	a1,0x26
    8000a320:	c9c58593          	addi	a1,a1,-868 # 8002ffb8 <__func__.0+0x2c8>
    8000a324:	e399                	bnez	a5,8000a32a <tinst_tests_pf+0x23b0>
    8000a326:	b89fe06f          	j	80008eae <tinst_tests_pf+0xf34>
    8000a32a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a32c:	0016f713          	andi	a4,a3,1
    8000a330:	cc0713e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a334:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a338:	460d                	li	a2,3
    8000a33a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a33e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a340:	00c59763          	bne	a1,a2,8000a34e <tinst_tests_pf+0x23d4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a344:	0026d683          	lhu	a3,2(a3)
    8000a348:	0106969b          	slliw	a3,a3,0x10
    8000a34c:	8f55                	or	a4,a4,a3
    8000a34e:	1ffe16b7          	lui	a3,0x1ffe1
    8000a352:	068e                	slli	a3,a3,0x3
    8000a354:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a356:	8f75                	and	a4,a4,a3
    8000a358:	00026597          	auipc	a1,0x26
    8000a35c:	c6058593          	addi	a1,a1,-928 # 8002ffb8 <__func__.0+0x2c8>
    8000a360:	00e79463          	bne	a5,a4,8000a368 <tinst_tests_pf+0x23ee>
    8000a364:	b4bfe06f          	j	80008eae <tinst_tests_pf+0xf34>
    8000a368:	00026597          	auipc	a1,0x26
    8000a36c:	c6058593          	addi	a1,a1,-928 # 8002ffc8 <__func__.0+0x2d8>
    8000a370:	b3ffe06f          	j	80008eae <tinst_tests_pf+0xf34>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000a374:	701c                	ld	a5,32(s0)
    8000a376:	e399                	bnez	a5,8000a37c <tinst_tests_pf+0x2402>
    8000a378:	994fe06f          	j	8000850c <tinst_tests_pf+0x592>
    8000a37c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a37e:	0016f713          	andi	a4,a3,1
    8000a382:	c6071ae3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a386:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a38a:	460d                	li	a2,3
    8000a38c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a390:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a392:	00c59763          	bne	a1,a2,8000a3a0 <tinst_tests_pf+0x2426>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a396:	0026d683          	lhu	a3,2(a3)
    8000a39a:	0106969b          	slliw	a3,a3,0x10
    8000a39e:	8f55                	or	a4,a4,a3
    8000a3a0:	01f076b7          	lui	a3,0x1f07
    8000a3a4:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a3a8:	8f75                	and	a4,a4,a3
    8000a3aa:	00e78463          	beq	a5,a4,8000a3b2 <tinst_tests_pf+0x2438>
    8000a3ae:	94afe06f          	j	800084f8 <tinst_tests_pf+0x57e>
    8000a3b2:	95afe06f          	j	8000850c <tinst_tests_pf+0x592>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a3b6:	701c                	ld	a5,32(s0)
    8000a3b8:	00026597          	auipc	a1,0x26
    8000a3bc:	c0058593          	addi	a1,a1,-1024 # 8002ffb8 <__func__.0+0x2c8>
    8000a3c0:	e399                	bnez	a5,8000a3c6 <tinst_tests_pf+0x244c>
    8000a3c2:	b91fe06f          	j	80008f52 <tinst_tests_pf+0xfd8>
    8000a3c6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a3c8:	0016f713          	andi	a4,a3,1
    8000a3cc:	c20715e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a3d0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a3d4:	460d                	li	a2,3
    8000a3d6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a3da:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a3dc:	00c59763          	bne	a1,a2,8000a3ea <tinst_tests_pf+0x2470>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a3e0:	0026d683          	lhu	a3,2(a3)
    8000a3e4:	0106969b          	slliw	a3,a3,0x10
    8000a3e8:	8f55                	or	a4,a4,a3
    8000a3ea:	1ffe16b7          	lui	a3,0x1ffe1
    8000a3ee:	068e                	slli	a3,a3,0x3
    8000a3f0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a3f2:	8f75                	and	a4,a4,a3
    8000a3f4:	00026597          	auipc	a1,0x26
    8000a3f8:	bc458593          	addi	a1,a1,-1084 # 8002ffb8 <__func__.0+0x2c8>
    8000a3fc:	00e79463          	bne	a5,a4,8000a404 <tinst_tests_pf+0x248a>
    8000a400:	b53fe06f          	j	80008f52 <tinst_tests_pf+0xfd8>
    8000a404:	00026597          	auipc	a1,0x26
    8000a408:	bc458593          	addi	a1,a1,-1084 # 8002ffc8 <__func__.0+0x2d8>
    8000a40c:	b47fe06f          	j	80008f52 <tinst_tests_pf+0xfd8>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000a410:	701c                	ld	a5,32(s0)
    8000a412:	e399                	bnez	a5,8000a418 <tinst_tests_pf+0x249e>
    8000a414:	998fe06f          	j	800085ac <tinst_tests_pf+0x632>
    8000a418:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a41a:	0016f713          	andi	a4,a3,1
    8000a41e:	bc071ce3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a422:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a426:	460d                	li	a2,3
    8000a428:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a42c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a42e:	00c59763          	bne	a1,a2,8000a43c <tinst_tests_pf+0x24c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a432:	0026d683          	lhu	a3,2(a3)
    8000a436:	0106969b          	slliw	a3,a3,0x10
    8000a43a:	8f55                	or	a4,a4,a3
    8000a43c:	01f076b7          	lui	a3,0x1f07
    8000a440:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a444:	8f75                	and	a4,a4,a3
    8000a446:	00e78463          	beq	a5,a4,8000a44e <tinst_tests_pf+0x24d4>
    8000a44a:	94efe06f          	j	80008598 <tinst_tests_pf+0x61e>
    8000a44e:	95efe06f          	j	800085ac <tinst_tests_pf+0x632>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a452:	701c                	ld	a5,32(s0)
    8000a454:	00026597          	auipc	a1,0x26
    8000a458:	b6458593          	addi	a1,a1,-1180 # 8002ffb8 <__func__.0+0x2c8>
    8000a45c:	e399                	bnez	a5,8000a462 <tinst_tests_pf+0x24e8>
    8000a45e:	b95fe06f          	j	80008ff2 <tinst_tests_pf+0x1078>
    8000a462:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a464:	0016f713          	andi	a4,a3,1
    8000a468:	b80717e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a46c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a470:	460d                	li	a2,3
    8000a472:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a476:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a478:	00c59763          	bne	a1,a2,8000a486 <tinst_tests_pf+0x250c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a47c:	0026d683          	lhu	a3,2(a3)
    8000a480:	0106969b          	slliw	a3,a3,0x10
    8000a484:	8f55                	or	a4,a4,a3
    8000a486:	1ffe16b7          	lui	a3,0x1ffe1
    8000a48a:	068e                	slli	a3,a3,0x3
    8000a48c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a48e:	8f75                	and	a4,a4,a3
    8000a490:	00026597          	auipc	a1,0x26
    8000a494:	b2858593          	addi	a1,a1,-1240 # 8002ffb8 <__func__.0+0x2c8>
    8000a498:	00e79463          	bne	a5,a4,8000a4a0 <tinst_tests_pf+0x2526>
    8000a49c:	b57fe06f          	j	80008ff2 <tinst_tests_pf+0x1078>
    8000a4a0:	00026597          	auipc	a1,0x26
    8000a4a4:	b2858593          	addi	a1,a1,-1240 # 8002ffc8 <__func__.0+0x2d8>
    8000a4a8:	b4bfe06f          	j	80008ff2 <tinst_tests_pf+0x1078>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000a4ac:	701c                	ld	a5,32(s0)
    8000a4ae:	e399                	bnez	a5,8000a4b4 <tinst_tests_pf+0x253a>
    8000a4b0:	99efe06f          	j	8000864e <tinst_tests_pf+0x6d4>
    8000a4b4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4b6:	0016f713          	andi	a4,a3,1
    8000a4ba:	b2071ee3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a4be:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a4c2:	460d                	li	a2,3
    8000a4c4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a4c8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a4ca:	00c59763          	bne	a1,a2,8000a4d8 <tinst_tests_pf+0x255e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a4ce:	0026d683          	lhu	a3,2(a3)
    8000a4d2:	0106969b          	slliw	a3,a3,0x10
    8000a4d6:	8f55                	or	a4,a4,a3
    8000a4d8:	01f076b7          	lui	a3,0x1f07
    8000a4dc:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a4e0:	8f75                	and	a4,a4,a3
    8000a4e2:	00e78463          	beq	a5,a4,8000a4ea <tinst_tests_pf+0x2570>
    8000a4e6:	954fe06f          	j	8000863a <tinst_tests_pf+0x6c0>
    8000a4ea:	964fe06f          	j	8000864e <tinst_tests_pf+0x6d4>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a4ee:	701c                	ld	a5,32(s0)
    8000a4f0:	00026597          	auipc	a1,0x26
    8000a4f4:	ac858593          	addi	a1,a1,-1336 # 8002ffb8 <__func__.0+0x2c8>
    8000a4f8:	e399                	bnez	a5,8000a4fe <tinst_tests_pf+0x2584>
    8000a4fa:	b99fe06f          	j	80009092 <tinst_tests_pf+0x1118>
    8000a4fe:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a500:	0016f713          	andi	a4,a3,1
    8000a504:	ae0719e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a508:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a50c:	460d                	li	a2,3
    8000a50e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a512:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a514:	00c59763          	bne	a1,a2,8000a522 <tinst_tests_pf+0x25a8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a518:	0026d683          	lhu	a3,2(a3)
    8000a51c:	0106969b          	slliw	a3,a3,0x10
    8000a520:	8f55                	or	a4,a4,a3
    8000a522:	1ffe16b7          	lui	a3,0x1ffe1
    8000a526:	068e                	slli	a3,a3,0x3
    8000a528:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a52a:	8f75                	and	a4,a4,a3
    8000a52c:	00026597          	auipc	a1,0x26
    8000a530:	a8c58593          	addi	a1,a1,-1396 # 8002ffb8 <__func__.0+0x2c8>
    8000a534:	00e79463          	bne	a5,a4,8000a53c <tinst_tests_pf+0x25c2>
    8000a538:	b5bfe06f          	j	80009092 <tinst_tests_pf+0x1118>
    8000a53c:	00026597          	auipc	a1,0x26
    8000a540:	a8c58593          	addi	a1,a1,-1396 # 8002ffc8 <__func__.0+0x2d8>
    8000a544:	b4ffe06f          	j	80009092 <tinst_tests_pf+0x1118>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a548:	7004                	ld	s1,32(s0)
    8000a54a:	e099                	bnez	s1,8000a550 <tinst_tests_pf+0x25d6>
    8000a54c:	994fe06f          	j	800086e0 <tinst_tests_pf+0x766>
    8000a550:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a552:	0017f713          	andi	a4,a5,1
    8000a556:	aa0710e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a55a:	0007d503          	lhu	a0,0(a5)
    8000a55e:	a90f70ef          	jal	800017ee <expand_compressed_instruction>
    8000a562:	67a1                	lui	a5,0x8
    8000a564:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a566:	8d7d                	and	a0,a0,a5
    8000a568:	00a48463          	beq	s1,a0,8000a570 <tinst_tests_pf+0x25f6>
    8000a56c:	960fe06f          	j	800086cc <tinst_tests_pf+0x752>
    8000a570:	970fe06f          	j	800086e0 <tinst_tests_pf+0x766>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000a574:	701c                	ld	a5,32(s0)
    8000a576:	00026597          	auipc	a1,0x26
    8000a57a:	a4258593          	addi	a1,a1,-1470 # 8002ffb8 <__func__.0+0x2c8>
    8000a57e:	e399                	bnez	a5,8000a584 <tinst_tests_pf+0x260a>
    8000a580:	bb3fe06f          	j	80009132 <tinst_tests_pf+0x11b8>
    8000a584:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a586:	0016f713          	andi	a4,a3,1
    8000a58a:	a60716e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a58e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a592:	460d                	li	a2,3
    8000a594:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a598:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a59a:	00c59763          	bne	a1,a2,8000a5a8 <tinst_tests_pf+0x262e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a59e:	0026d683          	lhu	a3,2(a3)
    8000a5a2:	0106969b          	slliw	a3,a3,0x10
    8000a5a6:	8f55                	or	a4,a4,a3
    8000a5a8:	1ffe16b7          	lui	a3,0x1ffe1
    8000a5ac:	068e                	slli	a3,a3,0x3
    8000a5ae:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a5b0:	8f75                	and	a4,a4,a3
    8000a5b2:	00026597          	auipc	a1,0x26
    8000a5b6:	a0658593          	addi	a1,a1,-1530 # 8002ffb8 <__func__.0+0x2c8>
    8000a5ba:	00e79463          	bne	a5,a4,8000a5c2 <tinst_tests_pf+0x2648>
    8000a5be:	b75fe06f          	j	80009132 <tinst_tests_pf+0x11b8>
    8000a5c2:	00026597          	auipc	a1,0x26
    8000a5c6:	a0658593          	addi	a1,a1,-1530 # 8002ffc8 <__func__.0+0x2d8>
    8000a5ca:	b69fe06f          	j	80009132 <tinst_tests_pf+0x11b8>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a5ce:	02043983          	ld	s3,32(s0)
    8000a5d2:	00099463          	bnez	s3,8000a5da <tinst_tests_pf+0x2660>
    8000a5d6:	99efe06f          	j	80008774 <tinst_tests_pf+0x7fa>
    8000a5da:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a5dc:	0017f713          	andi	a4,a5,1
    8000a5e0:	a0071be3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a5e4:	0007d503          	lhu	a0,0(a5)
    8000a5e8:	a06f70ef          	jal	800017ee <expand_compressed_instruction>
    8000a5ec:	67a1                	lui	a5,0x8
    8000a5ee:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a5f0:	8d7d                	and	a0,a0,a5
    8000a5f2:	00a98463          	beq	s3,a0,8000a5fa <tinst_tests_pf+0x2680>
    8000a5f6:	96afe06f          	j	80008760 <tinst_tests_pf+0x7e6>
    8000a5fa:	97afe06f          	j	80008774 <tinst_tests_pf+0x7fa>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000a5fe:	701c                	ld	a5,32(s0)
    8000a600:	00026597          	auipc	a1,0x26
    8000a604:	9b858593          	addi	a1,a1,-1608 # 8002ffb8 <__func__.0+0x2c8>
    8000a608:	e399                	bnez	a5,8000a60e <tinst_tests_pf+0x2694>
    8000a60a:	bc9fe06f          	j	800091d2 <tinst_tests_pf+0x1258>
    8000a60e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a610:	0016f713          	andi	a4,a3,1
    8000a614:	9e0711e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a618:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a61c:	460d                	li	a2,3
    8000a61e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a622:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a624:	00c59763          	bne	a1,a2,8000a632 <tinst_tests_pf+0x26b8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a628:	0026d683          	lhu	a3,2(a3)
    8000a62c:	0106969b          	slliw	a3,a3,0x10
    8000a630:	8f55                	or	a4,a4,a3
    8000a632:	1ffe16b7          	lui	a3,0x1ffe1
    8000a636:	068e                	slli	a3,a3,0x3
    8000a638:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a63a:	8f75                	and	a4,a4,a3
    8000a63c:	00026597          	auipc	a1,0x26
    8000a640:	97c58593          	addi	a1,a1,-1668 # 8002ffb8 <__func__.0+0x2c8>
    8000a644:	00e79463          	bne	a5,a4,8000a64c <tinst_tests_pf+0x26d2>
    8000a648:	b8bfe06f          	j	800091d2 <tinst_tests_pf+0x1258>
    8000a64c:	00026597          	auipc	a1,0x26
    8000a650:	97c58593          	addi	a1,a1,-1668 # 8002ffc8 <__func__.0+0x2d8>
    8000a654:	b7ffe06f          	j	800091d2 <tinst_tests_pf+0x1258>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a658:	02043983          	ld	s3,32(s0)
    8000a65c:	00099463          	bnez	s3,8000a664 <tinst_tests_pf+0x26ea>
    8000a660:	9a8fe06f          	j	80008808 <tinst_tests_pf+0x88e>
    8000a664:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a666:	0017f713          	andi	a4,a5,1
    8000a66a:	980716e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a66e:	0007d503          	lhu	a0,0(a5)
    8000a672:	97cf70ef          	jal	800017ee <expand_compressed_instruction>
    8000a676:	01f077b7          	lui	a5,0x1f07
    8000a67a:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a67e:	8d7d                	and	a0,a0,a5
    8000a680:	00a98463          	beq	s3,a0,8000a688 <tinst_tests_pf+0x270e>
    8000a684:	970fe06f          	j	800087f4 <tinst_tests_pf+0x87a>
    8000a688:	980fe06f          	j	80008808 <tinst_tests_pf+0x88e>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000a68c:	701c                	ld	a5,32(s0)
    8000a68e:	00026597          	auipc	a1,0x26
    8000a692:	92a58593          	addi	a1,a1,-1750 # 8002ffb8 <__func__.0+0x2c8>
    8000a696:	e399                	bnez	a5,8000a69c <tinst_tests_pf+0x2722>
    8000a698:	bdbfe06f          	j	80009272 <tinst_tests_pf+0x12f8>
    8000a69c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a69e:	0016f713          	andi	a4,a3,1
    8000a6a2:	94071ae3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a6a6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a6aa:	460d                	li	a2,3
    8000a6ac:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a6b0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a6b2:	00c59763          	bne	a1,a2,8000a6c0 <tinst_tests_pf+0x2746>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a6b6:	0026d683          	lhu	a3,2(a3)
    8000a6ba:	0106969b          	slliw	a3,a3,0x10
    8000a6be:	8f55                	or	a4,a4,a3
    8000a6c0:	1ffe16b7          	lui	a3,0x1ffe1
    8000a6c4:	068e                	slli	a3,a3,0x3
    8000a6c6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a6c8:	8f75                	and	a4,a4,a3
    8000a6ca:	00026597          	auipc	a1,0x26
    8000a6ce:	8ee58593          	addi	a1,a1,-1810 # 8002ffb8 <__func__.0+0x2c8>
    8000a6d2:	00e79463          	bne	a5,a4,8000a6da <tinst_tests_pf+0x2760>
    8000a6d6:	b9dfe06f          	j	80009272 <tinst_tests_pf+0x12f8>
    8000a6da:	00026597          	auipc	a1,0x26
    8000a6de:	8ee58593          	addi	a1,a1,-1810 # 8002ffc8 <__func__.0+0x2d8>
    8000a6e2:	b91fe06f          	j	80009272 <tinst_tests_pf+0x12f8>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a6e6:	7004                	ld	s1,32(s0)
    8000a6e8:	e099                	bnez	s1,8000a6ee <tinst_tests_pf+0x2774>
    8000a6ea:	9bafe06f          	j	800088a4 <tinst_tests_pf+0x92a>
    8000a6ee:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a6f0:	0017f713          	andi	a4,a5,1
    8000a6f4:	900711e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a6f8:	0007d503          	lhu	a0,0(a5)
    8000a6fc:	8f2f70ef          	jal	800017ee <expand_compressed_instruction>
    8000a700:	01f077b7          	lui	a5,0x1f07
    8000a704:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a708:	8d7d                	and	a0,a0,a5
    8000a70a:	00a48463          	beq	s1,a0,8000a712 <tinst_tests_pf+0x2798>
    8000a70e:	982fe06f          	j	80008890 <tinst_tests_pf+0x916>
    8000a712:	992fe06f          	j	800088a4 <tinst_tests_pf+0x92a>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000a716:	701c                	ld	a5,32(s0)
    8000a718:	00026597          	auipc	a1,0x26
    8000a71c:	8a058593          	addi	a1,a1,-1888 # 8002ffb8 <__func__.0+0x2c8>
    8000a720:	e399                	bnez	a5,8000a726 <tinst_tests_pf+0x27ac>
    8000a722:	be9fe06f          	j	8000930a <tinst_tests_pf+0x1390>
    8000a726:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a728:	0016f713          	andi	a4,a3,1
    8000a72c:	8c0715e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a730:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a734:	460d                	li	a2,3
    8000a736:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a73a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a73c:	00c59763          	bne	a1,a2,8000a74a <tinst_tests_pf+0x27d0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a740:	0026d683          	lhu	a3,2(a3)
    8000a744:	0106969b          	slliw	a3,a3,0x10
    8000a748:	8f55                	or	a4,a4,a3
    8000a74a:	1ffe16b7          	lui	a3,0x1ffe1
    8000a74e:	068e                	slli	a3,a3,0x3
    8000a750:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a752:	8f75                	and	a4,a4,a3
    8000a754:	00026597          	auipc	a1,0x26
    8000a758:	86458593          	addi	a1,a1,-1948 # 8002ffb8 <__func__.0+0x2c8>
    8000a75c:	00e79463          	bne	a5,a4,8000a764 <tinst_tests_pf+0x27ea>
    8000a760:	babfe06f          	j	8000930a <tinst_tests_pf+0x1390>
    8000a764:	00026597          	auipc	a1,0x26
    8000a768:	86458593          	addi	a1,a1,-1948 # 8002ffc8 <__func__.0+0x2d8>
    8000a76c:	b9ffe06f          	j	8000930a <tinst_tests_pf+0x1390>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000a770:	701c                	ld	a5,32(s0)
    8000a772:	00026597          	auipc	a1,0x26
    8000a776:	84658593          	addi	a1,a1,-1978 # 8002ffb8 <__func__.0+0x2c8>
    8000a77a:	e399                	bnez	a5,8000a780 <tinst_tests_pf+0x2806>
    8000a77c:	c27fe06f          	j	800093a2 <tinst_tests_pf+0x1428>
    8000a780:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a782:	0016f713          	andi	a4,a3,1
    8000a786:	860718e3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a78a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a78e:	460d                	li	a2,3
    8000a790:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a794:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a796:	00c59763          	bne	a1,a2,8000a7a4 <tinst_tests_pf+0x282a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a79a:	0026d683          	lhu	a3,2(a3)
    8000a79e:	0106969b          	slliw	a3,a3,0x10
    8000a7a2:	8f55                	or	a4,a4,a3
    8000a7a4:	1ffe16b7          	lui	a3,0x1ffe1
    8000a7a8:	068e                	slli	a3,a3,0x3
    8000a7aa:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a7ac:	8f75                	and	a4,a4,a3
    8000a7ae:	00026597          	auipc	a1,0x26
    8000a7b2:	80a58593          	addi	a1,a1,-2038 # 8002ffb8 <__func__.0+0x2c8>
    8000a7b6:	00e79463          	bne	a5,a4,8000a7be <tinst_tests_pf+0x2844>
    8000a7ba:	be9fe06f          	j	800093a2 <tinst_tests_pf+0x1428>
    8000a7be:	00026597          	auipc	a1,0x26
    8000a7c2:	80a58593          	addi	a1,a1,-2038 # 8002ffc8 <__func__.0+0x2d8>
    8000a7c6:	bddfe06f          	j	800093a2 <tinst_tests_pf+0x1428>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000a7ca:	701c                	ld	a5,32(s0)
    8000a7cc:	00025597          	auipc	a1,0x25
    8000a7d0:	7ec58593          	addi	a1,a1,2028 # 8002ffb8 <__func__.0+0x2c8>
    8000a7d4:	e399                	bnez	a5,8000a7da <tinst_tests_pf+0x2860>
    8000a7d6:	c65fe06f          	j	8000943a <tinst_tests_pf+0x14c0>
    8000a7da:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a7dc:	0016f713          	andi	a4,a3,1
    8000a7e0:	80071be3          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a7e4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7e8:	460d                	li	a2,3
    8000a7ea:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a7ee:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a7f0:	00c59763          	bne	a1,a2,8000a7fe <tinst_tests_pf+0x2884>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7f4:	0026d683          	lhu	a3,2(a3)
    8000a7f8:	0106969b          	slliw	a3,a3,0x10
    8000a7fc:	8f55                	or	a4,a4,a3
    8000a7fe:	1ffe16b7          	lui	a3,0x1ffe1
    8000a802:	068e                	slli	a3,a3,0x3
    8000a804:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a806:	8f75                	and	a4,a4,a3
    8000a808:	00025597          	auipc	a1,0x25
    8000a80c:	7b058593          	addi	a1,a1,1968 # 8002ffb8 <__func__.0+0x2c8>
    8000a810:	00e79463          	bne	a5,a4,8000a818 <tinst_tests_pf+0x289e>
    8000a814:	c27fe06f          	j	8000943a <tinst_tests_pf+0x14c0>
    8000a818:	00025597          	auipc	a1,0x25
    8000a81c:	7b058593          	addi	a1,a1,1968 # 8002ffc8 <__func__.0+0x2d8>
    8000a820:	c1bfe06f          	j	8000943a <tinst_tests_pf+0x14c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000a824:	701c                	ld	a5,32(s0)
    8000a826:	00025597          	auipc	a1,0x25
    8000a82a:	79258593          	addi	a1,a1,1938 # 8002ffb8 <__func__.0+0x2c8>
    8000a82e:	e399                	bnez	a5,8000a834 <tinst_tests_pf+0x28ba>
    8000a830:	ca3fe06f          	j	800094d2 <tinst_tests_pf+0x1558>
    8000a834:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a836:	0016f713          	andi	a4,a3,1
    8000a83a:	fa071e63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a83e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a842:	460d                	li	a2,3
    8000a844:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a848:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a84a:	00c59763          	bne	a1,a2,8000a858 <tinst_tests_pf+0x28de>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a84e:	0026d683          	lhu	a3,2(a3)
    8000a852:	0106969b          	slliw	a3,a3,0x10
    8000a856:	8f55                	or	a4,a4,a3
    8000a858:	1ffe16b7          	lui	a3,0x1ffe1
    8000a85c:	068e                	slli	a3,a3,0x3
    8000a85e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a860:	8f75                	and	a4,a4,a3
    8000a862:	00025597          	auipc	a1,0x25
    8000a866:	75658593          	addi	a1,a1,1878 # 8002ffb8 <__func__.0+0x2c8>
    8000a86a:	00e79463          	bne	a5,a4,8000a872 <tinst_tests_pf+0x28f8>
    8000a86e:	c65fe06f          	j	800094d2 <tinst_tests_pf+0x1558>
    8000a872:	00025597          	auipc	a1,0x25
    8000a876:	75658593          	addi	a1,a1,1878 # 8002ffc8 <__func__.0+0x2d8>
    8000a87a:	c59fe06f          	j	800094d2 <tinst_tests_pf+0x1558>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000a87e:	701c                	ld	a5,32(s0)
    8000a880:	e399                	bnez	a5,8000a886 <tinst_tests_pf+0x290c>
    8000a882:	aa2fe06f          	j	80008b24 <tinst_tests_pf+0xbaa>
    8000a886:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a888:	0016f713          	andi	a4,a3,1
    8000a88c:	f6071563          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a890:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a894:	460d                	li	a2,3
    8000a896:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a89a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a89c:	00c59763          	bne	a1,a2,8000a8aa <tinst_tests_pf+0x2930>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a8a0:	0026d683          	lhu	a3,2(a3)
    8000a8a4:	0106969b          	slliw	a3,a3,0x10
    8000a8a8:	8f55                	or	a4,a4,a3
    8000a8aa:	1ffe16b7          	lui	a3,0x1ffe1
    8000a8ae:	068e                	slli	a3,a3,0x3
    8000a8b0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a8b2:	8f75                	and	a4,a4,a3
    8000a8b4:	00e78463          	beq	a5,a4,8000a8bc <tinst_tests_pf+0x2942>
    8000a8b8:	a58fe06f          	j	80008b10 <tinst_tests_pf+0xb96>
    8000a8bc:	a68fe06f          	j	80008b24 <tinst_tests_pf+0xbaa>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000a8c0:	701c                	ld	a5,32(s0)
    8000a8c2:	e399                	bnez	a5,8000a8c8 <tinst_tests_pf+0x294e>
    8000a8c4:	b00fe06f          	j	80008bc4 <tinst_tests_pf+0xc4a>
    8000a8c8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8ca:	0016f713          	andi	a4,a3,1
    8000a8ce:	f2071463          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a8d2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a8d6:	460d                	li	a2,3
    8000a8d8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a8dc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a8de:	00c59763          	bne	a1,a2,8000a8ec <tinst_tests_pf+0x2972>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a8e2:	0026d683          	lhu	a3,2(a3)
    8000a8e6:	0106969b          	slliw	a3,a3,0x10
    8000a8ea:	8f55                	or	a4,a4,a3
    8000a8ec:	1ffe16b7          	lui	a3,0x1ffe1
    8000a8f0:	068e                	slli	a3,a3,0x3
    8000a8f2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a8f4:	8f75                	and	a4,a4,a3
    8000a8f6:	00e78463          	beq	a5,a4,8000a8fe <tinst_tests_pf+0x2984>
    8000a8fa:	ab6fe06f          	j	80008bb0 <tinst_tests_pf+0xc36>
    8000a8fe:	ac6fe06f          	j	80008bc4 <tinst_tests_pf+0xc4a>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a902:	701c                	ld	a5,32(s0)
    8000a904:	e399                	bnez	a5,8000a90a <tinst_tests_pf+0x2990>
    8000a906:	b5efe06f          	j	80008c64 <tinst_tests_pf+0xcea>
    8000a90a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a90c:	0016f713          	andi	a4,a3,1
    8000a910:	ee071363          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a914:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a918:	460d                	li	a2,3
    8000a91a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a91e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a920:	00c59763          	bne	a1,a2,8000a92e <tinst_tests_pf+0x29b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a924:	0026d683          	lhu	a3,2(a3)
    8000a928:	0106969b          	slliw	a3,a3,0x10
    8000a92c:	8f55                	or	a4,a4,a3
    8000a92e:	1ffe16b7          	lui	a3,0x1ffe1
    8000a932:	068e                	slli	a3,a3,0x3
    8000a934:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a936:	8f75                	and	a4,a4,a3
    8000a938:	00e78463          	beq	a5,a4,8000a940 <tinst_tests_pf+0x29c6>
    8000a93c:	b14fe06f          	j	80008c50 <tinst_tests_pf+0xcd6>
    8000a940:	b24fe06f          	j	80008c64 <tinst_tests_pf+0xcea>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a944:	701c                	ld	a5,32(s0)
    8000a946:	e399                	bnez	a5,8000a94c <tinst_tests_pf+0x29d2>
    8000a948:	bbcfe06f          	j	80008d04 <tinst_tests_pf+0xd8a>
    8000a94c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a94e:	0016f713          	andi	a4,a3,1
    8000a952:	ea071263          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a956:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a95a:	460d                	li	a2,3
    8000a95c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a960:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a962:	00c59763          	bne	a1,a2,8000a970 <tinst_tests_pf+0x29f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a966:	0026d683          	lhu	a3,2(a3)
    8000a96a:	0106969b          	slliw	a3,a3,0x10
    8000a96e:	8f55                	or	a4,a4,a3
    8000a970:	1ffe16b7          	lui	a3,0x1ffe1
    8000a974:	068e                	slli	a3,a3,0x3
    8000a976:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a978:	8f75                	and	a4,a4,a3
    8000a97a:	00e78463          	beq	a5,a4,8000a982 <tinst_tests_pf+0x2a08>
    8000a97e:	b72fe06f          	j	80008cf0 <tinst_tests_pf+0xd76>
    8000a982:	b82fe06f          	j	80008d04 <tinst_tests_pf+0xd8a>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a986:	701c                	ld	a5,32(s0)
    8000a988:	e399                	bnez	a5,8000a98e <tinst_tests_pf+0x2a14>
    8000a98a:	c1afe06f          	j	80008da4 <tinst_tests_pf+0xe2a>
    8000a98e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a990:	0016f713          	andi	a4,a3,1
    8000a994:	e6071163          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a998:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a99c:	460d                	li	a2,3
    8000a99e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a9a2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a9a4:	00c59763          	bne	a1,a2,8000a9b2 <tinst_tests_pf+0x2a38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a9a8:	0026d683          	lhu	a3,2(a3)
    8000a9ac:	0106969b          	slliw	a3,a3,0x10
    8000a9b0:	8f55                	or	a4,a4,a3
    8000a9b2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a9b6:	068e                	slli	a3,a3,0x3
    8000a9b8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a9ba:	8f75                	and	a4,a4,a3
    8000a9bc:	00e78463          	beq	a5,a4,8000a9c4 <tinst_tests_pf+0x2a4a>
    8000a9c0:	bd0fe06f          	j	80008d90 <tinst_tests_pf+0xe16>
    8000a9c4:	be0fe06f          	j	80008da4 <tinst_tests_pf+0xe2a>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a9c8:	701c                	ld	a5,32(s0)
    8000a9ca:	e399                	bnez	a5,8000a9d0 <tinst_tests_pf+0x2a56>
    8000a9cc:	c78fe06f          	j	80008e44 <tinst_tests_pf+0xeca>
    8000a9d0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a9d2:	0016f713          	andi	a4,a3,1
    8000a9d6:	e2071063          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a9da:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9de:	460d                	li	a2,3
    8000a9e0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a9e4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a9e6:	00c59763          	bne	a1,a2,8000a9f4 <tinst_tests_pf+0x2a7a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a9ea:	0026d683          	lhu	a3,2(a3)
    8000a9ee:	0106969b          	slliw	a3,a3,0x10
    8000a9f2:	8f55                	or	a4,a4,a3
    8000a9f4:	1ffe16b7          	lui	a3,0x1ffe1
    8000a9f8:	068e                	slli	a3,a3,0x3
    8000a9fa:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a9fc:	8f75                	and	a4,a4,a3
    8000a9fe:	00e78463          	beq	a5,a4,8000aa06 <tinst_tests_pf+0x2a8c>
    8000aa02:	c2efe06f          	j	80008e30 <tinst_tests_pf+0xeb6>
    8000aa06:	c3efe06f          	j	80008e44 <tinst_tests_pf+0xeca>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000aa0a:	701c                	ld	a5,32(s0)
    8000aa0c:	e399                	bnez	a5,8000aa12 <tinst_tests_pf+0x2a98>
    8000aa0e:	cd6fe06f          	j	80008ee4 <tinst_tests_pf+0xf6a>
    8000aa12:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa14:	0016f713          	andi	a4,a3,1
    8000aa18:	dc071f63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aa1c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa20:	460d                	li	a2,3
    8000aa22:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa26:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa28:	00c59763          	bne	a1,a2,8000aa36 <tinst_tests_pf+0x2abc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa2c:	0026d683          	lhu	a3,2(a3)
    8000aa30:	0106969b          	slliw	a3,a3,0x10
    8000aa34:	8f55                	or	a4,a4,a3
    8000aa36:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa3a:	068e                	slli	a3,a3,0x3
    8000aa3c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa3e:	8f75                	and	a4,a4,a3
    8000aa40:	00e78463          	beq	a5,a4,8000aa48 <tinst_tests_pf+0x2ace>
    8000aa44:	c8cfe06f          	j	80008ed0 <tinst_tests_pf+0xf56>
    8000aa48:	c9cfe06f          	j	80008ee4 <tinst_tests_pf+0xf6a>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000aa4c:	701c                	ld	a5,32(s0)
    8000aa4e:	e399                	bnez	a5,8000aa54 <tinst_tests_pf+0x2ada>
    8000aa50:	d38fe06f          	j	80008f88 <tinst_tests_pf+0x100e>
    8000aa54:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa56:	0016f713          	andi	a4,a3,1
    8000aa5a:	d8071e63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aa5e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa62:	460d                	li	a2,3
    8000aa64:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa68:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa6a:	00c59763          	bne	a1,a2,8000aa78 <tinst_tests_pf+0x2afe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa6e:	0026d683          	lhu	a3,2(a3)
    8000aa72:	0106969b          	slliw	a3,a3,0x10
    8000aa76:	8f55                	or	a4,a4,a3
    8000aa78:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa7c:	068e                	slli	a3,a3,0x3
    8000aa7e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa80:	8f75                	and	a4,a4,a3
    8000aa82:	00e78463          	beq	a5,a4,8000aa8a <tinst_tests_pf+0x2b10>
    8000aa86:	ceefe06f          	j	80008f74 <tinst_tests_pf+0xffa>
    8000aa8a:	cfefe06f          	j	80008f88 <tinst_tests_pf+0x100e>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000aa8e:	701c                	ld	a5,32(s0)
    8000aa90:	e399                	bnez	a5,8000aa96 <tinst_tests_pf+0x2b1c>
    8000aa92:	d96fe06f          	j	80009028 <tinst_tests_pf+0x10ae>
    8000aa96:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa98:	0016f713          	andi	a4,a3,1
    8000aa9c:	d4071d63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aaa0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aaa4:	460d                	li	a2,3
    8000aaa6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aaaa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aaac:	00c59763          	bne	a1,a2,8000aaba <tinst_tests_pf+0x2b40>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aab0:	0026d683          	lhu	a3,2(a3)
    8000aab4:	0106969b          	slliw	a3,a3,0x10
    8000aab8:	8f55                	or	a4,a4,a3
    8000aaba:	1ffe16b7          	lui	a3,0x1ffe1
    8000aabe:	068e                	slli	a3,a3,0x3
    8000aac0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aac2:	8f75                	and	a4,a4,a3
    8000aac4:	00e78463          	beq	a5,a4,8000aacc <tinst_tests_pf+0x2b52>
    8000aac8:	d4cfe06f          	j	80009014 <tinst_tests_pf+0x109a>
    8000aacc:	d5cfe06f          	j	80009028 <tinst_tests_pf+0x10ae>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000aad0:	701c                	ld	a5,32(s0)
    8000aad2:	e399                	bnez	a5,8000aad8 <tinst_tests_pf+0x2b5e>
    8000aad4:	df4fe06f          	j	800090c8 <tinst_tests_pf+0x114e>
    8000aad8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aada:	0016f713          	andi	a4,a3,1
    8000aade:	d0071c63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aae2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aae6:	460d                	li	a2,3
    8000aae8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aaec:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aaee:	00c59763          	bne	a1,a2,8000aafc <tinst_tests_pf+0x2b82>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aaf2:	0026d683          	lhu	a3,2(a3)
    8000aaf6:	0106969b          	slliw	a3,a3,0x10
    8000aafa:	8f55                	or	a4,a4,a3
    8000aafc:	1ffe16b7          	lui	a3,0x1ffe1
    8000ab00:	068e                	slli	a3,a3,0x3
    8000ab02:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ab04:	8f75                	and	a4,a4,a3
    8000ab06:	00e78463          	beq	a5,a4,8000ab0e <tinst_tests_pf+0x2b94>
    8000ab0a:	daafe06f          	j	800090b4 <tinst_tests_pf+0x113a>
    8000ab0e:	dbafe06f          	j	800090c8 <tinst_tests_pf+0x114e>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000ab12:	701c                	ld	a5,32(s0)
    8000ab14:	e399                	bnez	a5,8000ab1a <tinst_tests_pf+0x2ba0>
    8000ab16:	e52fe06f          	j	80009168 <tinst_tests_pf+0x11ee>
    8000ab1a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab1c:	0016f713          	andi	a4,a3,1
    8000ab20:	cc071b63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ab24:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab28:	460d                	li	a2,3
    8000ab2a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab2e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab30:	00c59763          	bne	a1,a2,8000ab3e <tinst_tests_pf+0x2bc4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab34:	0026d683          	lhu	a3,2(a3)
    8000ab38:	0106969b          	slliw	a3,a3,0x10
    8000ab3c:	8f55                	or	a4,a4,a3
    8000ab3e:	1ffe16b7          	lui	a3,0x1ffe1
    8000ab42:	068e                	slli	a3,a3,0x3
    8000ab44:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ab46:	8f75                	and	a4,a4,a3
    8000ab48:	00e78463          	beq	a5,a4,8000ab50 <tinst_tests_pf+0x2bd6>
    8000ab4c:	e08fe06f          	j	80009154 <tinst_tests_pf+0x11da>
    8000ab50:	e18fe06f          	j	80009168 <tinst_tests_pf+0x11ee>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000ab54:	6418                	ld	a4,8(s0)
    8000ab56:	47bd                	li	a5,15
    8000ab58:	00f70463          	beq	a4,a5,8000ab60 <tinst_tests_pf+0x2be6>
    8000ab5c:	f64fe06f          	j	800092c0 <tinst_tests_pf+0x1346>
    8000ab60:	701c                	ld	a5,32(s0)
    8000ab62:	e399                	bnez	a5,8000ab68 <tinst_tests_pf+0x2bee>
    8000ab64:	f5efe06f          	j	800092c2 <tinst_tests_pf+0x1348>
    8000ab68:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab6a:	0016f713          	andi	a4,a3,1
    8000ab6e:	c8071463          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ab72:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab76:	460d                	li	a2,3
    8000ab78:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab7c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab7e:	00c59763          	bne	a1,a2,8000ab8c <tinst_tests_pf+0x2c12>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab82:	0026d683          	lhu	a3,2(a3)
    8000ab86:	0106969b          	slliw	a3,a3,0x10
    8000ab8a:	8f55                	or	a4,a4,a3
    8000ab8c:	1ffe16b7          	lui	a3,0x1ffe1
    8000ab90:	068e                	slli	a3,a3,0x3
    8000ab92:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ab94:	8f75                	and	a4,a4,a3
    8000ab96:	40f70933          	sub	s2,a4,a5
    8000ab9a:	00193913          	seqz	s2,s2
    8000ab9e:	f24fe06f          	j	800092c2 <tinst_tests_pf+0x1348>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000aba2:	6418                	ld	a4,8(s0)
    8000aba4:	47bd                	li	a5,15
    8000aba6:	00f70463          	beq	a4,a5,8000abae <tinst_tests_pf+0x2c34>
    8000abaa:	faefe06f          	j	80009358 <tinst_tests_pf+0x13de>
    8000abae:	701c                	ld	a5,32(s0)
    8000abb0:	e399                	bnez	a5,8000abb6 <tinst_tests_pf+0x2c3c>
    8000abb2:	fa8fe06f          	j	8000935a <tinst_tests_pf+0x13e0>
    8000abb6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000abb8:	0016f713          	andi	a4,a3,1
    8000abbc:	c2071d63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000abc0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000abc4:	460d                	li	a2,3
    8000abc6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000abca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000abcc:	00c59763          	bne	a1,a2,8000abda <tinst_tests_pf+0x2c60>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000abd0:	0026d683          	lhu	a3,2(a3)
    8000abd4:	0106969b          	slliw	a3,a3,0x10
    8000abd8:	8f55                	or	a4,a4,a3
    8000abda:	1ffe16b7          	lui	a3,0x1ffe1
    8000abde:	068e                	slli	a3,a3,0x3
    8000abe0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000abe2:	8f75                	and	a4,a4,a3
    8000abe4:	40f70933          	sub	s2,a4,a5
    8000abe8:	00193913          	seqz	s2,s2
    8000abec:	f6efe06f          	j	8000935a <tinst_tests_pf+0x13e0>
    instruction = *((uint16_t*)addr);
    8000abf0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000abf4:	460d                	li	a2,3
    8000abf6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000abfa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000abfc:	00c59763          	bne	a1,a2,8000ac0a <tinst_tests_pf+0x2c90>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac00:	0026d683          	lhu	a3,2(a3)
    8000ac04:	0106969b          	slliw	a3,a3,0x10
    8000ac08:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000ac0a:	1746                	slli	a4,a4,0x31
    8000ac0c:	9345                	srli	a4,a4,0x31
    8000ac0e:	00e78463          	beq	a5,a4,8000ac16 <tinst_tests_pf+0x2c9c>
    8000ac12:	d3efd06f          	j	80008150 <tinst_tests_pf+0x1d6>
    8000ac16:	d4efd06f          	j	80008164 <tinst_tests_pf+0x1ea>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000ac1a:	6418                	ld	a4,8(s0)
    8000ac1c:	47bd                	li	a5,15
    8000ac1e:	00f70463          	beq	a4,a5,8000ac26 <tinst_tests_pf+0x2cac>
    8000ac22:	fcefe06f          	j	800093f0 <tinst_tests_pf+0x1476>
    8000ac26:	701c                	ld	a5,32(s0)
    8000ac28:	e399                	bnez	a5,8000ac2e <tinst_tests_pf+0x2cb4>
    8000ac2a:	fc8fe06f          	j	800093f2 <tinst_tests_pf+0x1478>
    8000ac2e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac30:	0016f713          	andi	a4,a3,1
    8000ac34:	bc071163          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac38:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac3c:	460d                	li	a2,3
    8000ac3e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac42:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac44:	00c59763          	bne	a1,a2,8000ac52 <tinst_tests_pf+0x2cd8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac48:	0026d683          	lhu	a3,2(a3)
    8000ac4c:	0106969b          	slliw	a3,a3,0x10
    8000ac50:	8f55                	or	a4,a4,a3
    8000ac52:	1ffe16b7          	lui	a3,0x1ffe1
    8000ac56:	068e                	slli	a3,a3,0x3
    8000ac58:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ac5a:	8f75                	and	a4,a4,a3
    8000ac5c:	40f70933          	sub	s2,a4,a5
    8000ac60:	00193913          	seqz	s2,s2
    8000ac64:	f8efe06f          	j	800093f2 <tinst_tests_pf+0x1478>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000ac68:	6418                	ld	a4,8(s0)
    8000ac6a:	47bd                	li	a5,15
    8000ac6c:	00f70463          	beq	a4,a5,8000ac74 <tinst_tests_pf+0x2cfa>
    8000ac70:	819fe06f          	j	80009488 <tinst_tests_pf+0x150e>
    8000ac74:	701c                	ld	a5,32(s0)
    8000ac76:	e399                	bnez	a5,8000ac7c <tinst_tests_pf+0x2d02>
    8000ac78:	813fe06f          	j	8000948a <tinst_tests_pf+0x1510>
    8000ac7c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac7e:	0016f713          	andi	a4,a3,1
    8000ac82:	b6071a63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac86:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac8a:	460d                	li	a2,3
    8000ac8c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac90:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac92:	00c59763          	bne	a1,a2,8000aca0 <tinst_tests_pf+0x2d26>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac96:	0026d683          	lhu	a3,2(a3)
    8000ac9a:	0106969b          	slliw	a3,a3,0x10
    8000ac9e:	8f55                	or	a4,a4,a3
    8000aca0:	1ffe16b7          	lui	a3,0x1ffe1
    8000aca4:	068e                	slli	a3,a3,0x3
    8000aca6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aca8:	8f75                	and	a4,a4,a3
    8000acaa:	40f70933          	sub	s2,a4,a5
    8000acae:	00193913          	seqz	s2,s2
    8000acb2:	fd8fe06f          	j	8000948a <tinst_tests_pf+0x1510>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000acb6:	02043983          	ld	s3,32(s0)
    8000acba:	00099463          	bnez	s3,8000acc2 <tinst_tests_pf+0x2d48>
    8000acbe:	b6dfd06f          	j	8000882a <tinst_tests_pf+0x8b0>
    8000acc2:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000acc4:	0017f713          	andi	a4,a5,1
    8000acc8:	b2071763          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000accc:	0007d503          	lhu	a0,0(a5)
    8000acd0:	b1ff60ef          	jal	800017ee <expand_compressed_instruction>
    8000acd4:	01f077b7          	lui	a5,0x1f07
    8000acd8:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000acdc:	00f57933          	and	s2,a0,a5
    8000ace0:	41390933          	sub	s2,s2,s3
    8000ace4:	00193913          	seqz	s2,s2
    8000ace8:	b43fd06f          	j	8000882a <tinst_tests_pf+0x8b0>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000acec:	7004                	ld	s1,32(s0)
    8000acee:	e099                	bnez	s1,8000acf4 <tinst_tests_pf+0x2d7a>
    8000acf0:	bd7fd06f          	j	800088c6 <tinst_tests_pf+0x94c>
    8000acf4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000acf6:	0017f713          	andi	a4,a5,1
    8000acfa:	ae071e63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000acfe:	0007d503          	lhu	a0,0(a5)
    8000ad02:	aedf60ef          	jal	800017ee <expand_compressed_instruction>
    8000ad06:	01f077b7          	lui	a5,0x1f07
    8000ad0a:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ad0e:	00f57933          	and	s2,a0,a5
    8000ad12:	40990933          	sub	s2,s2,s1
    8000ad16:	00193913          	seqz	s2,s2
    8000ad1a:	badfd06f          	j	800088c6 <tinst_tests_pf+0x94c>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000ad1e:	701c                	ld	a5,32(s0)
    8000ad20:	e399                	bnez	a5,8000ad26 <tinst_tests_pf+0x2dac>
    8000ad22:	c4bfd06f          	j	8000896c <tinst_tests_pf+0x9f2>
    8000ad26:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad28:	0016f713          	andi	a4,a3,1
    8000ad2c:	ac071563          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad30:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad34:	460d                	li	a2,3
    8000ad36:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad3a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad3c:	00c59763          	bne	a1,a2,8000ad4a <tinst_tests_pf+0x2dd0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad40:	0026d683          	lhu	a3,2(a3)
    8000ad44:	0106969b          	slliw	a3,a3,0x10
    8000ad48:	8f55                	or	a4,a4,a3
    8000ad4a:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad4e:	068e                	slli	a3,a3,0x3
    8000ad50:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad52:	8f75                	and	a4,a4,a3
    8000ad54:	40f70933          	sub	s2,a4,a5
    8000ad58:	00193913          	seqz	s2,s2
    8000ad5c:	c11fd06f          	j	8000896c <tinst_tests_pf+0x9f2>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000ad60:	701c                	ld	a5,32(s0)
    8000ad62:	e399                	bnez	a5,8000ad68 <tinst_tests_pf+0x2dee>
    8000ad64:	caffd06f          	j	80008a12 <tinst_tests_pf+0xa98>
    8000ad68:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad6a:	0016f713          	andi	a4,a3,1
    8000ad6e:	a8071463          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad72:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad76:	460d                	li	a2,3
    8000ad78:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad7c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad7e:	00c59763          	bne	a1,a2,8000ad8c <tinst_tests_pf+0x2e12>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad82:	0026d683          	lhu	a3,2(a3)
    8000ad86:	0106969b          	slliw	a3,a3,0x10
    8000ad8a:	8f55                	or	a4,a4,a3
    8000ad8c:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad90:	068e                	slli	a3,a3,0x3
    8000ad92:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad94:	8f75                	and	a4,a4,a3
    8000ad96:	40f70933          	sub	s2,a4,a5
    8000ad9a:	00193913          	seqz	s2,s2
    8000ad9e:	c75fd06f          	j	80008a12 <tinst_tests_pf+0xa98>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000ada2:	701c                	ld	a5,32(s0)
    8000ada4:	e399                	bnez	a5,8000adaa <tinst_tests_pf+0x2e30>
    8000ada6:	d0dfd06f          	j	80008ab2 <tinst_tests_pf+0xb38>
    8000adaa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000adac:	0016f713          	andi	a4,a3,1
    8000adb0:	a4071363          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000adb4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000adb8:	460d                	li	a2,3
    8000adba:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000adbe:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000adc0:	00c59763          	bne	a1,a2,8000adce <tinst_tests_pf+0x2e54>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000adc4:	0026d683          	lhu	a3,2(a3)
    8000adc8:	0106969b          	slliw	a3,a3,0x10
    8000adcc:	8f55                	or	a4,a4,a3
    8000adce:	1ffe16b7          	lui	a3,0x1ffe1
    8000add2:	068e                	slli	a3,a3,0x3
    8000add4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000add6:	8f75                	and	a4,a4,a3
    8000add8:	40f70933          	sub	s2,a4,a5
    8000addc:	00193913          	seqz	s2,s2
    8000ade0:	cd3fd06f          	j	80008ab2 <tinst_tests_pf+0xb38>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000ade4:	701c                	ld	a5,32(s0)
    8000ade6:	e399                	bnez	a5,8000adec <tinst_tests_pf+0x2e72>
    8000ade8:	d5ffd06f          	j	80008b46 <tinst_tests_pf+0xbcc>
    8000adec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000adee:	0016f713          	andi	a4,a3,1
    8000adf2:	a0071263          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000adf6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000adfa:	460d                	li	a2,3
    8000adfc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae00:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae02:	00c59763          	bne	a1,a2,8000ae10 <tinst_tests_pf+0x2e96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae06:	0026d683          	lhu	a3,2(a3)
    8000ae0a:	0106969b          	slliw	a3,a3,0x10
    8000ae0e:	8f55                	or	a4,a4,a3
    8000ae10:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae14:	068e                	slli	a3,a3,0x3
    8000ae16:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae18:	8f75                	and	a4,a4,a3
    8000ae1a:	40f70933          	sub	s2,a4,a5
    8000ae1e:	00193913          	seqz	s2,s2
    8000ae22:	d25fd06f          	j	80008b46 <tinst_tests_pf+0xbcc>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ae26:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ae28:	0017f713          	andi	a4,a5,1
    8000ae2c:	9c071563          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae30:	0007d503          	lhu	a0,0(a5)
    8000ae34:	9bbf60ef          	jal	800017ee <expand_compressed_instruction>
    8000ae38:	67a1                	lui	a5,0x8
    8000ae3a:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000ae3c:	8d7d                	and	a0,a0,a5
    8000ae3e:	00a48463          	beq	s1,a0,8000ae46 <tinst_tests_pf+0x2ecc>
    8000ae42:	861fd06f          	j	800086a2 <tinst_tests_pf+0x728>
    8000ae46:	00025597          	auipc	a1,0x25
    8000ae4a:	17258593          	addi	a1,a1,370 # 8002ffb8 <__func__.0+0x2c8>
    8000ae4e:	85dfd06f          	j	800086aa <tinst_tests_pf+0x730>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000ae52:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ae54:	0017f713          	andi	a4,a5,1
    8000ae58:	98071f63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae5c:	0007d503          	lhu	a0,0(a5)
    8000ae60:	98ff60ef          	jal	800017ee <expand_compressed_instruction>
    8000ae64:	67a1                	lui	a5,0x8
    8000ae66:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000ae68:	8d7d                	and	a0,a0,a5
    8000ae6a:	00a98463          	beq	s3,a0,8000ae72 <tinst_tests_pf+0x2ef8>
    8000ae6e:	8c9fd06f          	j	80008736 <tinst_tests_pf+0x7bc>
    8000ae72:	00025597          	auipc	a1,0x25
    8000ae76:	14658593          	addi	a1,a1,326 # 8002ffb8 <__func__.0+0x2c8>
    8000ae7a:	8c5fd06f          	j	8000873e <tinst_tests_pf+0x7c4>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000ae7e:	701c                	ld	a5,32(s0)
    8000ae80:	e399                	bnez	a5,8000ae86 <tinst_tests_pf+0x2f0c>
    8000ae82:	d65fd06f          	j	80008be6 <tinst_tests_pf+0xc6c>
    8000ae86:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae88:	0016f713          	andi	a4,a3,1
    8000ae8c:	96071563          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae90:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae94:	460d                	li	a2,3
    8000ae96:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae9a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae9c:	00c59763          	bne	a1,a2,8000aeaa <tinst_tests_pf+0x2f30>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aea0:	0026d683          	lhu	a3,2(a3)
    8000aea4:	0106969b          	slliw	a3,a3,0x10
    8000aea8:	8f55                	or	a4,a4,a3
    8000aeaa:	1ffe16b7          	lui	a3,0x1ffe1
    8000aeae:	068e                	slli	a3,a3,0x3
    8000aeb0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aeb2:	8f75                	and	a4,a4,a3
    8000aeb4:	40f70933          	sub	s2,a4,a5
    8000aeb8:	00193913          	seqz	s2,s2
    8000aebc:	d2bfd06f          	j	80008be6 <tinst_tests_pf+0xc6c>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000aec0:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000aec2:	0017f713          	andi	a4,a5,1
    8000aec6:	92071863          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aeca:	0007d503          	lhu	a0,0(a5)
    8000aece:	921f60ef          	jal	800017ee <expand_compressed_instruction>
    8000aed2:	01f077b7          	lui	a5,0x1f07
    8000aed6:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000aeda:	8d7d                	and	a0,a0,a5
    8000aedc:	00a98463          	beq	s3,a0,8000aee4 <tinst_tests_pf+0x2f6a>
    8000aee0:	8ebfd06f          	j	800087ca <tinst_tests_pf+0x850>
    8000aee4:	00025597          	auipc	a1,0x25
    8000aee8:	0d458593          	addi	a1,a1,212 # 8002ffb8 <__func__.0+0x2c8>
    8000aeec:	8e7fd06f          	j	800087d2 <tinst_tests_pf+0x858>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000aef0:	701c                	ld	a5,32(s0)
    8000aef2:	e399                	bnez	a5,8000aef8 <tinst_tests_pf+0x2f7e>
    8000aef4:	d93fd06f          	j	80008c86 <tinst_tests_pf+0xd0c>
    8000aef8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aefa:	0016f713          	andi	a4,a3,1
    8000aefe:	8e071c63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af02:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af06:	460d                	li	a2,3
    8000af08:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af0c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af0e:	00c59763          	bne	a1,a2,8000af1c <tinst_tests_pf+0x2fa2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af12:	0026d683          	lhu	a3,2(a3)
    8000af16:	0106969b          	slliw	a3,a3,0x10
    8000af1a:	8f55                	or	a4,a4,a3
    8000af1c:	1ffe16b7          	lui	a3,0x1ffe1
    8000af20:	068e                	slli	a3,a3,0x3
    8000af22:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af24:	8f75                	and	a4,a4,a3
    8000af26:	40f70933          	sub	s2,a4,a5
    8000af2a:	00193913          	seqz	s2,s2
    8000af2e:	d59fd06f          	j	80008c86 <tinst_tests_pf+0xd0c>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000af32:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000af34:	0017f713          	andi	a4,a5,1
    8000af38:	8a071f63          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af3c:	0007d503          	lhu	a0,0(a5)
    8000af40:	8aff60ef          	jal	800017ee <expand_compressed_instruction>
    8000af44:	01f077b7          	lui	a5,0x1f07
    8000af48:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000af4c:	8d7d                	and	a0,a0,a5
    8000af4e:	00a48463          	beq	s1,a0,8000af56 <tinst_tests_pf+0x2fdc>
    8000af52:	915fd06f          	j	80008866 <tinst_tests_pf+0x8ec>
    8000af56:	00025597          	auipc	a1,0x25
    8000af5a:	06258593          	addi	a1,a1,98 # 8002ffb8 <__func__.0+0x2c8>
    8000af5e:	911fd06f          	j	8000886e <tinst_tests_pf+0x8f4>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000af62:	701c                	ld	a5,32(s0)
    8000af64:	e399                	bnez	a5,8000af6a <tinst_tests_pf+0x2ff0>
    8000af66:	dc1fd06f          	j	80008d26 <tinst_tests_pf+0xdac>
    8000af6a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af6c:	0016f713          	andi	a4,a3,1
    8000af70:	88071363          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af74:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af78:	460d                	li	a2,3
    8000af7a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af7e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af80:	00c59763          	bne	a1,a2,8000af8e <tinst_tests_pf+0x3014>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af84:	0026d683          	lhu	a3,2(a3)
    8000af88:	0106969b          	slliw	a3,a3,0x10
    8000af8c:	8f55                	or	a4,a4,a3
    8000af8e:	1ffe16b7          	lui	a3,0x1ffe1
    8000af92:	068e                	slli	a3,a3,0x3
    8000af94:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af96:	8f75                	and	a4,a4,a3
    8000af98:	40f70933          	sub	s2,a4,a5
    8000af9c:	00193913          	seqz	s2,s2
    8000afa0:	d87fd06f          	j	80008d26 <tinst_tests_pf+0xdac>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000afa4:	701c                	ld	a5,32(s0)
    8000afa6:	e399                	bnez	a5,8000afac <tinst_tests_pf+0x3032>
    8000afa8:	e1ffd06f          	j	80008dc6 <tinst_tests_pf+0xe4c>
    8000afac:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000afae:	0016f713          	andi	a4,a3,1
    8000afb2:	84071263          	bnez	a4,80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000afb6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000afba:	460d                	li	a2,3
    8000afbc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000afc0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000afc2:	00c59763          	bne	a1,a2,8000afd0 <tinst_tests_pf+0x3056>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000afc6:	0026d683          	lhu	a3,2(a3)
    8000afca:	0106969b          	slliw	a3,a3,0x10
    8000afce:	8f55                	or	a4,a4,a3
    8000afd0:	1ffe16b7          	lui	a3,0x1ffe1
    8000afd4:	068e                	slli	a3,a3,0x3
    8000afd6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000afd8:	8f75                	and	a4,a4,a3
    8000afda:	40f70933          	sub	s2,a4,a5
    8000afde:	00193913          	seqz	s2,s2
    8000afe2:	de5fd06f          	j	80008dc6 <tinst_tests_pf+0xe4c>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000afe6:	701c                	ld	a5,32(s0)
    8000afe8:	e399                	bnez	a5,8000afee <tinst_tests_pf+0x3074>
    8000afea:	e7dfd06f          	j	80008e66 <tinst_tests_pf+0xeec>
    8000afee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aff0:	0016f713          	andi	a4,a3,1
    8000aff4:	c319                	beqz	a4,8000affa <tinst_tests_pf+0x3080>
    8000aff6:	800ff06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000affa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000affe:	460d                	li	a2,3
    8000b000:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b004:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b006:	00c59763          	bne	a1,a2,8000b014 <tinst_tests_pf+0x309a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b00a:	0026d683          	lhu	a3,2(a3)
    8000b00e:	0106969b          	slliw	a3,a3,0x10
    8000b012:	8f55                	or	a4,a4,a3
    8000b014:	1ffe16b7          	lui	a3,0x1ffe1
    8000b018:	068e                	slli	a3,a3,0x3
    8000b01a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b01c:	8f75                	and	a4,a4,a3
    8000b01e:	40f70933          	sub	s2,a4,a5
    8000b022:	00193913          	seqz	s2,s2
    8000b026:	e41fd06f          	j	80008e66 <tinst_tests_pf+0xeec>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000b02a:	701c                	ld	a5,32(s0)
    8000b02c:	e399                	bnez	a5,8000b032 <tinst_tests_pf+0x30b8>
    8000b02e:	ed9fd06f          	j	80008f06 <tinst_tests_pf+0xf8c>
    8000b032:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b034:	0016f713          	andi	a4,a3,1
    8000b038:	c319                	beqz	a4,8000b03e <tinst_tests_pf+0x30c4>
    8000b03a:	fbdfe06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b03e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b042:	460d                	li	a2,3
    8000b044:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b048:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b04a:	00c59763          	bne	a1,a2,8000b058 <tinst_tests_pf+0x30de>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b04e:	0026d683          	lhu	a3,2(a3)
    8000b052:	0106969b          	slliw	a3,a3,0x10
    8000b056:	8f55                	or	a4,a4,a3
    8000b058:	1ffe16b7          	lui	a3,0x1ffe1
    8000b05c:	068e                	slli	a3,a3,0x3
    8000b05e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b060:	8f75                	and	a4,a4,a3
    8000b062:	40f70933          	sub	s2,a4,a5
    8000b066:	00193913          	seqz	s2,s2
    8000b06a:	e9dfd06f          	j	80008f06 <tinst_tests_pf+0xf8c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000b06e:	701c                	ld	a5,32(s0)
    8000b070:	e399                	bnez	a5,8000b076 <tinst_tests_pf+0x30fc>
    8000b072:	f39fd06f          	j	80008faa <tinst_tests_pf+0x1030>
    8000b076:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b078:	0016f713          	andi	a4,a3,1
    8000b07c:	c319                	beqz	a4,8000b082 <tinst_tests_pf+0x3108>
    8000b07e:	f79fe06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b082:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b086:	460d                	li	a2,3
    8000b088:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b08c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b08e:	00c59763          	bne	a1,a2,8000b09c <tinst_tests_pf+0x3122>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b092:	0026d683          	lhu	a3,2(a3)
    8000b096:	0106969b          	slliw	a3,a3,0x10
    8000b09a:	8f55                	or	a4,a4,a3
    8000b09c:	1ffe16b7          	lui	a3,0x1ffe1
    8000b0a0:	068e                	slli	a3,a3,0x3
    8000b0a2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b0a4:	8f75                	and	a4,a4,a3
    8000b0a6:	40f70933          	sub	s2,a4,a5
    8000b0aa:	00193913          	seqz	s2,s2
    8000b0ae:	efdfd06f          	j	80008faa <tinst_tests_pf+0x1030>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000b0b2:	701c                	ld	a5,32(s0)
    8000b0b4:	e399                	bnez	a5,8000b0ba <tinst_tests_pf+0x3140>
    8000b0b6:	f95fd06f          	j	8000904a <tinst_tests_pf+0x10d0>
    8000b0ba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b0bc:	0016f713          	andi	a4,a3,1
    8000b0c0:	c319                	beqz	a4,8000b0c6 <tinst_tests_pf+0x314c>
    8000b0c2:	f35fe06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b0c6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0ca:	460d                	li	a2,3
    8000b0cc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b0d0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b0d2:	00c59763          	bne	a1,a2,8000b0e0 <tinst_tests_pf+0x3166>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b0d6:	0026d683          	lhu	a3,2(a3)
    8000b0da:	0106969b          	slliw	a3,a3,0x10
    8000b0de:	8f55                	or	a4,a4,a3
    8000b0e0:	1ffe16b7          	lui	a3,0x1ffe1
    8000b0e4:	068e                	slli	a3,a3,0x3
    8000b0e6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b0e8:	8f75                	and	a4,a4,a3
    8000b0ea:	40f70933          	sub	s2,a4,a5
    8000b0ee:	00193913          	seqz	s2,s2
    8000b0f2:	f59fd06f          	j	8000904a <tinst_tests_pf+0x10d0>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000b0f6:	701c                	ld	a5,32(s0)
    8000b0f8:	e399                	bnez	a5,8000b0fe <tinst_tests_pf+0x3184>
    8000b0fa:	ff1fd06f          	j	800090ea <tinst_tests_pf+0x1170>
    8000b0fe:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b100:	0016f713          	andi	a4,a3,1
    8000b104:	c319                	beqz	a4,8000b10a <tinst_tests_pf+0x3190>
    8000b106:	ef1fe06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b10a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b10e:	460d                	li	a2,3
    8000b110:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b114:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b116:	00c59763          	bne	a1,a2,8000b124 <tinst_tests_pf+0x31aa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b11a:	0026d683          	lhu	a3,2(a3)
    8000b11e:	0106969b          	slliw	a3,a3,0x10
    8000b122:	8f55                	or	a4,a4,a3
    8000b124:	1ffe16b7          	lui	a3,0x1ffe1
    8000b128:	068e                	slli	a3,a3,0x3
    8000b12a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b12c:	8f75                	and	a4,a4,a3
    8000b12e:	40f70933          	sub	s2,a4,a5
    8000b132:	00193913          	seqz	s2,s2
    8000b136:	fb5fd06f          	j	800090ea <tinst_tests_pf+0x1170>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000b13a:	701c                	ld	a5,32(s0)
    8000b13c:	e399                	bnez	a5,8000b142 <tinst_tests_pf+0x31c8>
    8000b13e:	84cfe06f          	j	8000918a <tinst_tests_pf+0x1210>
    8000b142:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b144:	0016f713          	andi	a4,a3,1
    8000b148:	c319                	beqz	a4,8000b14e <tinst_tests_pf+0x31d4>
    8000b14a:	eadfe06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b14e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b152:	460d                	li	a2,3
    8000b154:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b158:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b15a:	00c59763          	bne	a1,a2,8000b168 <tinst_tests_pf+0x31ee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b15e:	0026d683          	lhu	a3,2(a3)
    8000b162:	0106969b          	slliw	a3,a3,0x10
    8000b166:	8f55                	or	a4,a4,a3
    8000b168:	1ffe16b7          	lui	a3,0x1ffe1
    8000b16c:	068e                	slli	a3,a3,0x3
    8000b16e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b170:	8f75                	and	a4,a4,a3
    8000b172:	40f70933          	sub	s2,a4,a5
    8000b176:	00193913          	seqz	s2,s2
    8000b17a:	810fe06f          	j	8000918a <tinst_tests_pf+0x1210>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000b17e:	701c                	ld	a5,32(s0)
    8000b180:	e399                	bnez	a5,8000b186 <tinst_tests_pf+0x320c>
    8000b182:	8a8fe06f          	j	8000922a <tinst_tests_pf+0x12b0>
    8000b186:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b188:	0016f713          	andi	a4,a3,1
    8000b18c:	c319                	beqz	a4,8000b192 <tinst_tests_pf+0x3218>
    8000b18e:	e69fe06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b192:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b196:	460d                	li	a2,3
    8000b198:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b19c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b19e:	00c59763          	bne	a1,a2,8000b1ac <tinst_tests_pf+0x3232>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b1a2:	0026d683          	lhu	a3,2(a3)
    8000b1a6:	0106969b          	slliw	a3,a3,0x10
    8000b1aa:	8f55                	or	a4,a4,a3
    8000b1ac:	1ffe16b7          	lui	a3,0x1ffe1
    8000b1b0:	068e                	slli	a3,a3,0x3
    8000b1b2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b1b4:	8f75                	and	a4,a4,a3
    8000b1b6:	40f70933          	sub	s2,a4,a5
    8000b1ba:	00193913          	seqz	s2,s2
    8000b1be:	86cfe06f          	j	8000922a <tinst_tests_pf+0x12b0>
    8000b1c2:	701c                	ld	a5,32(s0)
    8000b1c4:	e399                	bnez	a5,8000b1ca <tinst_tests_pf+0x3250>
    8000b1c6:	842fe06f          	j	80009208 <tinst_tests_pf+0x128e>
    8000b1ca:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b1cc:	0016f713          	andi	a4,a3,1
    8000b1d0:	c319                	beqz	a4,8000b1d6 <tinst_tests_pf+0x325c>
    8000b1d2:	e25fe06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b1d6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b1da:	460d                	li	a2,3
    8000b1dc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b1e0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b1e2:	00c59763          	bne	a1,a2,8000b1f0 <tinst_tests_pf+0x3276>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b1e6:	0026d683          	lhu	a3,2(a3)
    8000b1ea:	0106969b          	slliw	a3,a3,0x10
    8000b1ee:	8f55                	or	a4,a4,a3
    8000b1f0:	1ffe16b7          	lui	a3,0x1ffe1
    8000b1f4:	068e                	slli	a3,a3,0x3
    8000b1f6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b1f8:	8f75                	and	a4,a4,a3
    8000b1fa:	00e78463          	beq	a5,a4,8000b202 <tinst_tests_pf+0x3288>
    8000b1fe:	ff7fd06f          	j	800091f4 <tinst_tests_pf+0x127a>
    8000b202:	806fe06f          	j	80009208 <tinst_tests_pf+0x128e>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000b206:	701c                	ld	a5,32(s0)
    8000b208:	e399                	bnez	a5,8000b20e <tinst_tests_pf+0x3294>
    8000b20a:	89efe06f          	j	800092a8 <tinst_tests_pf+0x132e>
    8000b20e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b210:	0016f713          	andi	a4,a3,1
    8000b214:	c319                	beqz	a4,8000b21a <tinst_tests_pf+0x32a0>
    8000b216:	de1fe06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b21a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b21e:	460d                	li	a2,3
    8000b220:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b224:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b226:	00c59763          	bne	a1,a2,8000b234 <tinst_tests_pf+0x32ba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b22a:	0026d683          	lhu	a3,2(a3)
    8000b22e:	0106969b          	slliw	a3,a3,0x10
    8000b232:	8f55                	or	a4,a4,a3
    8000b234:	1ffe16b7          	lui	a3,0x1ffe1
    8000b238:	068e                	slli	a3,a3,0x3
    8000b23a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b23c:	8f75                	and	a4,a4,a3
    8000b23e:	00e78463          	beq	a5,a4,8000b246 <tinst_tests_pf+0x32cc>
    8000b242:	852fe06f          	j	80009294 <tinst_tests_pf+0x131a>
    8000b246:	862fe06f          	j	800092a8 <tinst_tests_pf+0x132e>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000b24a:	701c                	ld	a5,32(s0)
    8000b24c:	e399                	bnez	a5,8000b252 <tinst_tests_pf+0x32d8>
    8000b24e:	8f2fe06f          	j	80009340 <tinst_tests_pf+0x13c6>
    8000b252:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b254:	0016f713          	andi	a4,a3,1
    8000b258:	c319                	beqz	a4,8000b25e <tinst_tests_pf+0x32e4>
    8000b25a:	d9dfe06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b25e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b262:	460d                	li	a2,3
    8000b264:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b268:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b26a:	00c59763          	bne	a1,a2,8000b278 <tinst_tests_pf+0x32fe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b26e:	0026d683          	lhu	a3,2(a3)
    8000b272:	0106969b          	slliw	a3,a3,0x10
    8000b276:	8f55                	or	a4,a4,a3
    8000b278:	1ffe16b7          	lui	a3,0x1ffe1
    8000b27c:	068e                	slli	a3,a3,0x3
    8000b27e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b280:	8f75                	and	a4,a4,a3
    8000b282:	00e78463          	beq	a5,a4,8000b28a <tinst_tests_pf+0x3310>
    8000b286:	8a6fe06f          	j	8000932c <tinst_tests_pf+0x13b2>
    8000b28a:	8b6fe06f          	j	80009340 <tinst_tests_pf+0x13c6>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000b28e:	701c                	ld	a5,32(s0)
    8000b290:	e399                	bnez	a5,8000b296 <tinst_tests_pf+0x331c>
    8000b292:	946fe06f          	j	800093d8 <tinst_tests_pf+0x145e>
    8000b296:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b298:	0016f713          	andi	a4,a3,1
    8000b29c:	c319                	beqz	a4,8000b2a2 <tinst_tests_pf+0x3328>
    8000b29e:	d59fe06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b2a2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b2a6:	460d                	li	a2,3
    8000b2a8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b2ac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b2ae:	00c59763          	bne	a1,a2,8000b2bc <tinst_tests_pf+0x3342>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b2b2:	0026d683          	lhu	a3,2(a3)
    8000b2b6:	0106969b          	slliw	a3,a3,0x10
    8000b2ba:	8f55                	or	a4,a4,a3
    8000b2bc:	1ffe16b7          	lui	a3,0x1ffe1
    8000b2c0:	068e                	slli	a3,a3,0x3
    8000b2c2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b2c4:	8f75                	and	a4,a4,a3
    8000b2c6:	00e78463          	beq	a5,a4,8000b2ce <tinst_tests_pf+0x3354>
    8000b2ca:	8fafe06f          	j	800093c4 <tinst_tests_pf+0x144a>
    8000b2ce:	90afe06f          	j	800093d8 <tinst_tests_pf+0x145e>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000b2d2:	701c                	ld	a5,32(s0)
    8000b2d4:	e399                	bnez	a5,8000b2da <tinst_tests_pf+0x3360>
    8000b2d6:	99afe06f          	j	80009470 <tinst_tests_pf+0x14f6>
    8000b2da:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b2dc:	0016f713          	andi	a4,a3,1
    8000b2e0:	c319                	beqz	a4,8000b2e6 <tinst_tests_pf+0x336c>
    8000b2e2:	d15fe06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b2e6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b2ea:	460d                	li	a2,3
    8000b2ec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b2f0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b2f2:	00c59763          	bne	a1,a2,8000b300 <tinst_tests_pf+0x3386>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b2f6:	0026d683          	lhu	a3,2(a3)
    8000b2fa:	0106969b          	slliw	a3,a3,0x10
    8000b2fe:	8f55                	or	a4,a4,a3
    8000b300:	1ffe16b7          	lui	a3,0x1ffe1
    8000b304:	068e                	slli	a3,a3,0x3
    8000b306:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b308:	8f75                	and	a4,a4,a3
    8000b30a:	00e78463          	beq	a5,a4,8000b312 <tinst_tests_pf+0x3398>
    8000b30e:	94efe06f          	j	8000945c <tinst_tests_pf+0x14e2>
    8000b312:	95efe06f          	j	80009470 <tinst_tests_pf+0x14f6>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000b316:	701c                	ld	a5,32(s0)
    8000b318:	e399                	bnez	a5,8000b31e <tinst_tests_pf+0x33a4>
    8000b31a:	9eefe06f          	j	80009508 <tinst_tests_pf+0x158e>
    8000b31e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b320:	0016f713          	andi	a4,a3,1
    8000b324:	c319                	beqz	a4,8000b32a <tinst_tests_pf+0x33b0>
    8000b326:	cd1fe06f          	j	80009ff6 <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b32a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b32e:	460d                	li	a2,3
    8000b330:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b334:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b336:	00c59763          	bne	a1,a2,8000b344 <tinst_tests_pf+0x33ca>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b33a:	0026d683          	lhu	a3,2(a3)
    8000b33e:	0106969b          	slliw	a3,a3,0x10
    8000b342:	8f55                	or	a4,a4,a3
    8000b344:	1ffe16b7          	lui	a3,0x1ffe1
    8000b348:	068e                	slli	a3,a3,0x3
    8000b34a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b34c:	8f75                	and	a4,a4,a3
    8000b34e:	00e78463          	beq	a5,a4,8000b356 <tinst_tests_pf+0x33dc>
    8000b352:	9a2fe06f          	j	800094f4 <tinst_tests_pf+0x157a>
    8000b356:	9b2fe06f          	j	80009508 <tinst_tests_pf+0x158e>

000000008000b35a <tinst_tests_gpf>:

bool tinst_tests_gpf(){
    8000b35a:	7179                	addi	sp,sp,-48
    
    TEST_START();
    8000b35c:	00023597          	auipc	a1,0x23
    8000b360:	0b458593          	addi	a1,a1,180 # 8002e410 <__func__.0>
    8000b364:	00025517          	auipc	a0,0x25
    8000b368:	c7450513          	addi	a0,a0,-908 # 8002ffd8 <__func__.0+0x2e8>
bool tinst_tests_gpf(){
    8000b36c:	f406                	sd	ra,40(sp)
    8000b36e:	f022                	sd	s0,32(sp)
    8000b370:	ec26                	sd	s1,24(sp)
    8000b372:	e84a                	sd	s2,16(sp)
    8000b374:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000b376:	517210ef          	jal	8002d08c <printf>
    8000b37a:	4529                	li	a0,10
    8000b37c:	1ff200ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    8000b380:	450d                	li	a0,3
    8000b382:	b87f50ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000b386:	a5af50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b38a:	e3af50ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8000b38e:	beef50ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_VS);   
    8000b392:	4509                	li	a0,2
    8000b394:	b75f50ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GI);      
    printf("%llx\n",vaddr_f);
    8000b398:	001005b7          	lui	a1,0x100
    8000b39c:	06558593          	addi	a1,a1,101 # 100065 <STACK_SIZE+0x65>
    8000b3a0:	05b2                	slli	a1,a1,0xc
    8000b3a2:	0002b517          	auipc	a0,0x2b
    8000b3a6:	24e50513          	addi	a0,a0,590 # 800365f0 <__func__.0+0x6900>
    8000b3aa:	4e3210ef          	jal	8002d08c <printf>
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000b3ae:	a5ff50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000b3b2:	001007b7          	lui	a5,0x100
    8000b3b6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b3ba:	07b2                	slli	a5,a5,0xc
    8000b3bc:	00078783          	lb	a5,0(a5)
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);    
    printf("%llx\n",excpt.tinst);
    8000b3c0:	0004d417          	auipc	s0,0x4d
    8000b3c4:	c5040413          	addi	s0,s0,-944 # 80058010 <excpt>
    8000b3c8:	700c                	ld	a1,32(s0)
    8000b3ca:	0002b517          	auipc	a0,0x2b
    8000b3ce:	22650513          	addi	a0,a0,550 # 800365f0 <__func__.0+0x6900>
    8000b3d2:	4bb210ef          	jal	8002d08c <printf>
    printf("%llx\n",excpt.triggered);
    8000b3d6:	0004d597          	auipc	a1,0x4d
    8000b3da:	c3b5c583          	lbu	a1,-965(a1) # 80058011 <excpt+0x1>
    8000b3de:	0002b517          	auipc	a0,0x2b
    8000b3e2:	21250513          	addi	a0,a0,530 # 800365f0 <__func__.0+0x6900>
    8000b3e6:	4a7210ef          	jal	8002d08c <printf>
    printf("%llx\n",excpt.cause);
    8000b3ea:	640c                	ld	a1,8(s0)
    8000b3ec:	0002b517          	auipc	a0,0x2b
    8000b3f0:	20450513          	addi	a0,a0,516 # 800365f0 <__func__.0+0x6900>
    8000b3f4:	499210ef          	jal	8002d08c <printf>
    printf("%llx\n",excpt.tval2);
    8000b3f8:	740c                	ld	a1,40(s0)
    8000b3fa:	0002b517          	auipc	a0,0x2b
    8000b3fe:	1f650513          	addi	a0,a0,502 # 800365f0 <__func__.0+0x6900>
    8000b402:	48b210ef          	jal	8002d08c <printf>
    printf("%llx\n",excpt.tval);
    8000b406:	6c0c                	ld	a1,24(s0)
    8000b408:	0002b517          	auipc	a0,0x2b
    8000b40c:	1e850513          	addi	a0,a0,488 # 800365f0 <__func__.0+0x6900>
    8000b410:	47d210ef          	jal	8002d08c <printf>

    TEST_ASSERT("correct tinst when executing a lb which results in a lgpf",         
    8000b414:	08200593          	li	a1,130
    8000b418:	00027617          	auipc	a2,0x27
    8000b41c:	e0860613          	addi	a2,a2,-504 # 80032220 <__func__.0+0x2530>
    8000b420:	00025517          	auipc	a0,0x25
    8000b424:	bd050513          	addi	a0,a0,-1072 # 8002fff0 <__func__.0+0x300>
    8000b428:	465210ef          	jal	8002d08c <printf>
    8000b42c:	0004d797          	auipc	a5,0x4d
    8000b430:	be57c783          	lbu	a5,-1051(a5) # 80058011 <excpt+0x1>
    8000b434:	00025597          	auipc	a1,0x25
    8000b438:	b9458593          	addi	a1,a1,-1132 # 8002ffc8 <__func__.0+0x2d8>
    8000b43c:	cf89                	beqz	a5,8000b456 <tinst_tests_gpf+0xfc>
    8000b43e:	6418                	ld	a4,8(s0)
    8000b440:	47d5                	li	a5,21
    8000b442:	00025597          	auipc	a1,0x25
    8000b446:	b7658593          	addi	a1,a1,-1162 # 8002ffb8 <__func__.0+0x2c8>
    8000b44a:	00f70663          	beq	a4,a5,8000b456 <tinst_tests_gpf+0xfc>
    8000b44e:	00025597          	auipc	a1,0x25
    8000b452:	b7a58593          	addi	a1,a1,-1158 # 8002ffc8 <__func__.0+0x2d8>
    8000b456:	00025517          	auipc	a0,0x25
    8000b45a:	bb250513          	addi	a0,a0,-1102 # 80030008 <__func__.0+0x318>
    8000b45e:	42f210ef          	jal	8002d08c <printf>
    8000b462:	0004d797          	auipc	a5,0x4d
    8000b466:	baf7c783          	lbu	a5,-1105(a5) # 80058011 <excpt+0x1>
    8000b46a:	c789                	beqz	a5,8000b474 <tinst_tests_gpf+0x11a>
    8000b46c:	6418                	ld	a4,8(s0)
    8000b46e:	47d5                	li	a5,21
    8000b470:	00f70c63          	beq	a4,a5,8000b488 <tinst_tests_gpf+0x12e>
    8000b474:	00025517          	auipc	a0,0x25
    8000b478:	b9c50513          	addi	a0,a0,-1124 # 80030010 <__func__.0+0x320>
    8000b47c:	411210ef          	jal	8002d08c <printf>
    8000b480:	02900513          	li	a0,41
    8000b484:	0f7200ef          	jal	8002bd7a <putchar>
    8000b488:	4529                	li	a0,10
    8000b48a:	0f1200ef          	jal	8002bd7a <putchar>
    8000b48e:	0004d797          	auipc	a5,0x4d
    8000b492:	b837c783          	lbu	a5,-1149(a5) # 80058011 <excpt+0x1>
    8000b496:	4481                	li	s1,0
    8000b498:	c789                	beqz	a5,8000b4a2 <tinst_tests_gpf+0x148>
    8000b49a:	6404                	ld	s1,8(s0)
    8000b49c:	14ad                	addi	s1,s1,-21
    8000b49e:	0014b493          	seqz	s1,s1
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF 
    );

    TEST_SETUP_EXCEPT();
    8000b4a2:	96bf50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    8000b4a6:	001007b7          	lui	a5,0x100
    8000b4aa:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b4ae:	07b2                	slli	a5,a5,0xc
    8000b4b0:	0007c783          	lbu	a5,0(a5)
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000b4b4:	00027617          	auipc	a2,0x27
    8000b4b8:	dac60613          	addi	a2,a2,-596 # 80032260 <__func__.0+0x2570>
    8000b4bc:	08200593          	li	a1,130
    8000b4c0:	00025517          	auipc	a0,0x25
    8000b4c4:	b3050513          	addi	a0,a0,-1232 # 8002fff0 <__func__.0+0x300>
    8000b4c8:	3c5210ef          	jal	8002d08c <printf>
    8000b4cc:	0004d797          	auipc	a5,0x4d
    8000b4d0:	b457c783          	lbu	a5,-1211(a5) # 80058011 <excpt+0x1>
    8000b4d4:	e399                	bnez	a5,8000b4da <tinst_tests_gpf+0x180>
    8000b4d6:	59a0106f          	j	8000ca70 <tinst_tests_gpf+0x1716>
    8000b4da:	6418                	ld	a4,8(s0)
    8000b4dc:	47d5                	li	a5,21
    8000b4de:	00025597          	auipc	a1,0x25
    8000b4e2:	aea58593          	addi	a1,a1,-1302 # 8002ffc8 <__func__.0+0x2d8>
    8000b4e6:	00f71463          	bne	a4,a5,8000b4ee <tinst_tests_gpf+0x194>
    8000b4ea:	53e0106f          	j	8000ca28 <tinst_tests_gpf+0x16ce>
    8000b4ee:	00025517          	auipc	a0,0x25
    8000b4f2:	b1a50513          	addi	a0,a0,-1254 # 80030008 <__func__.0+0x318>
    8000b4f6:	397210ef          	jal	8002d08c <printf>
    8000b4fa:	0004d797          	auipc	a5,0x4d
    8000b4fe:	b177c783          	lbu	a5,-1257(a5) # 80058011 <excpt+0x1>
    8000b502:	c799                	beqz	a5,8000b510 <tinst_tests_gpf+0x1b6>
    8000b504:	6418                	ld	a4,8(s0)
    8000b506:	47d5                	li	a5,21
    8000b508:	00f71463          	bne	a4,a5,8000b510 <tinst_tests_gpf+0x1b6>
    8000b50c:	5d00106f          	j	8000cadc <tinst_tests_gpf+0x1782>
    8000b510:	00025517          	auipc	a0,0x25
    8000b514:	b0050513          	addi	a0,a0,-1280 # 80030010 <__func__.0+0x320>
    8000b518:	375210ef          	jal	8002d08c <printf>
    8000b51c:	02900513          	li	a0,41
    8000b520:	05b200ef          	jal	8002bd7a <putchar>
    8000b524:	4529                	li	a0,10
    8000b526:	055200ef          	jal	8002bd7a <putchar>
    8000b52a:	cc89                	beqz	s1,8000b544 <tinst_tests_gpf+0x1ea>
    8000b52c:	0004d797          	auipc	a5,0x4d
    8000b530:	ae57c783          	lbu	a5,-1307(a5) # 80058011 <excpt+0x1>
    8000b534:	c799                	beqz	a5,8000b542 <tinst_tests_gpf+0x1e8>
    8000b536:	6418                	ld	a4,8(s0)
    8000b538:	47d5                	li	a5,21
    8000b53a:	00f71463          	bne	a4,a5,8000b542 <tinst_tests_gpf+0x1e8>
    8000b53e:	71d0106f          	j	8000d45a <tinst_tests_gpf+0x2100>
    8000b542:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b544:	8c9f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000b548:	001007b7          	lui	a5,0x100
    8000b54c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b550:	07b2                	slli	a5,a5,0xc
    8000b552:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000b556:	00027617          	auipc	a2,0x27
    8000b55a:	d4a60613          	addi	a2,a2,-694 # 800322a0 <__func__.0+0x25b0>
    8000b55e:	08200593          	li	a1,130
    8000b562:	00025517          	auipc	a0,0x25
    8000b566:	a8e50513          	addi	a0,a0,-1394 # 8002fff0 <__func__.0+0x300>
    8000b56a:	323210ef          	jal	8002d08c <printf>
    8000b56e:	0004d797          	auipc	a5,0x4d
    8000b572:	aa37c783          	lbu	a5,-1373(a5) # 80058011 <excpt+0x1>
    8000b576:	c399                	beqz	a5,8000b57c <tinst_tests_gpf+0x222>
    8000b578:	5040106f          	j	8000ca7c <tinst_tests_gpf+0x1722>
    8000b57c:	00025597          	auipc	a1,0x25
    8000b580:	a4c58593          	addi	a1,a1,-1460 # 8002ffc8 <__func__.0+0x2d8>
    8000b584:	00025517          	auipc	a0,0x25
    8000b588:	a8450513          	addi	a0,a0,-1404 # 80030008 <__func__.0+0x318>
    8000b58c:	301210ef          	jal	8002d08c <printf>
    8000b590:	0004d797          	auipc	a5,0x4d
    8000b594:	a817c783          	lbu	a5,-1407(a5) # 80058011 <excpt+0x1>
    8000b598:	c799                	beqz	a5,8000b5a6 <tinst_tests_gpf+0x24c>
    8000b59a:	6418                	ld	a4,8(s0)
    8000b59c:	47d5                	li	a5,21
    8000b59e:	00f71463          	bne	a4,a5,8000b5a6 <tinst_tests_gpf+0x24c>
    8000b5a2:	1970106f          	j	8000cf38 <tinst_tests_gpf+0x1bde>
    8000b5a6:	00025517          	auipc	a0,0x25
    8000b5aa:	a6a50513          	addi	a0,a0,-1430 # 80030010 <__func__.0+0x320>
    8000b5ae:	2df210ef          	jal	8002d08c <printf>
    8000b5b2:	02900513          	li	a0,41
    8000b5b6:	7c4200ef          	jal	8002bd7a <putchar>
    8000b5ba:	4529                	li	a0,10
    8000b5bc:	7be200ef          	jal	8002bd7a <putchar>
    8000b5c0:	cc89                	beqz	s1,8000b5da <tinst_tests_gpf+0x280>
    8000b5c2:	0004d797          	auipc	a5,0x4d
    8000b5c6:	a4f7c783          	lbu	a5,-1457(a5) # 80058011 <excpt+0x1>
    8000b5ca:	c799                	beqz	a5,8000b5d8 <tinst_tests_gpf+0x27e>
    8000b5cc:	6418                	ld	a4,8(s0)
    8000b5ce:	47d5                	li	a5,21
    8000b5d0:	00f71463          	bne	a4,a5,8000b5d8 <tinst_tests_gpf+0x27e>
    8000b5d4:	6c10106f          	j	8000d494 <tinst_tests_gpf+0x213a>
    8000b5d8:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b5da:	833f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    8000b5de:	001007b7          	lui	a5,0x100
    8000b5e2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b5e6:	07b2                	slli	a5,a5,0xc
    8000b5e8:	0007d783          	lhu	a5,0(a5)
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000b5ec:	00027617          	auipc	a2,0x27
    8000b5f0:	cf460613          	addi	a2,a2,-780 # 800322e0 <__func__.0+0x25f0>
    8000b5f4:	08200593          	li	a1,130
    8000b5f8:	00025517          	auipc	a0,0x25
    8000b5fc:	9f850513          	addi	a0,a0,-1544 # 8002fff0 <__func__.0+0x300>
    8000b600:	28d210ef          	jal	8002d08c <printf>
    8000b604:	0004d797          	auipc	a5,0x4d
    8000b608:	a0d7c783          	lbu	a5,-1523(a5) # 80058011 <excpt+0x1>
    8000b60c:	e399                	bnez	a5,8000b612 <tinst_tests_gpf+0x2b8>
    8000b60e:	5520106f          	j	8000cb60 <tinst_tests_gpf+0x1806>
    8000b612:	6418                	ld	a4,8(s0)
    8000b614:	47d5                	li	a5,21
    8000b616:	00025597          	auipc	a1,0x25
    8000b61a:	9b258593          	addi	a1,a1,-1614 # 8002ffc8 <__func__.0+0x2d8>
    8000b61e:	00f71463          	bne	a4,a5,8000b626 <tinst_tests_gpf+0x2cc>
    8000b622:	4f60106f          	j	8000cb18 <tinst_tests_gpf+0x17be>
    8000b626:	00025517          	auipc	a0,0x25
    8000b62a:	9e250513          	addi	a0,a0,-1566 # 80030008 <__func__.0+0x318>
    8000b62e:	25f210ef          	jal	8002d08c <printf>
    8000b632:	0004d797          	auipc	a5,0x4d
    8000b636:	9df7c783          	lbu	a5,-1569(a5) # 80058011 <excpt+0x1>
    8000b63a:	c799                	beqz	a5,8000b648 <tinst_tests_gpf+0x2ee>
    8000b63c:	6418                	ld	a4,8(s0)
    8000b63e:	47d5                	li	a5,21
    8000b640:	00f71463          	bne	a4,a5,8000b648 <tinst_tests_gpf+0x2ee>
    8000b644:	1310106f          	j	8000cf74 <tinst_tests_gpf+0x1c1a>
    8000b648:	00025517          	auipc	a0,0x25
    8000b64c:	9c850513          	addi	a0,a0,-1592 # 80030010 <__func__.0+0x320>
    8000b650:	23d210ef          	jal	8002d08c <printf>
    8000b654:	02900513          	li	a0,41
    8000b658:	722200ef          	jal	8002bd7a <putchar>
    8000b65c:	4529                	li	a0,10
    8000b65e:	71c200ef          	jal	8002bd7a <putchar>
    8000b662:	cc89                	beqz	s1,8000b67c <tinst_tests_gpf+0x322>
    8000b664:	0004d797          	auipc	a5,0x4d
    8000b668:	9ad7c783          	lbu	a5,-1619(a5) # 80058011 <excpt+0x1>
    8000b66c:	c799                	beqz	a5,8000b67a <tinst_tests_gpf+0x320>
    8000b66e:	6418                	ld	a4,8(s0)
    8000b670:	47d5                	li	a5,21
    8000b672:	00f71463          	bne	a4,a5,8000b67a <tinst_tests_gpf+0x320>
    8000b676:	6590106f          	j	8000d4ce <tinst_tests_gpf+0x2174>
    8000b67a:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b67c:	f90f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000b680:	001007b7          	lui	a5,0x100
    8000b684:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b688:	07b2                	slli	a5,a5,0xc
    8000b68a:	0007a783          	lw	a5,0(a5)
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000b68e:	00027617          	auipc	a2,0x27
    8000b692:	c9260613          	addi	a2,a2,-878 # 80032320 <__func__.0+0x2630>
    8000b696:	08200593          	li	a1,130
    8000b69a:	00025517          	auipc	a0,0x25
    8000b69e:	95650513          	addi	a0,a0,-1706 # 8002fff0 <__func__.0+0x300>
    8000b6a2:	1eb210ef          	jal	8002d08c <printf>
    8000b6a6:	0004d797          	auipc	a5,0x4d
    8000b6aa:	96b7c783          	lbu	a5,-1685(a5) # 80058011 <excpt+0x1>
    8000b6ae:	e399                	bnez	a5,8000b6b4 <tinst_tests_gpf+0x35a>
    8000b6b0:	5040106f          	j	8000cbb4 <tinst_tests_gpf+0x185a>
    8000b6b4:	6418                	ld	a4,8(s0)
    8000b6b6:	47d5                	li	a5,21
    8000b6b8:	00025597          	auipc	a1,0x25
    8000b6bc:	91058593          	addi	a1,a1,-1776 # 8002ffc8 <__func__.0+0x2d8>
    8000b6c0:	00f71463          	bne	a4,a5,8000b6c8 <tinst_tests_gpf+0x36e>
    8000b6c4:	4a80106f          	j	8000cb6c <tinst_tests_gpf+0x1812>
    8000b6c8:	00025517          	auipc	a0,0x25
    8000b6cc:	94050513          	addi	a0,a0,-1728 # 80030008 <__func__.0+0x318>
    8000b6d0:	1bd210ef          	jal	8002d08c <printf>
    8000b6d4:	0004d797          	auipc	a5,0x4d
    8000b6d8:	93d7c783          	lbu	a5,-1731(a5) # 80058011 <excpt+0x1>
    8000b6dc:	c799                	beqz	a5,8000b6ea <tinst_tests_gpf+0x390>
    8000b6de:	6418                	ld	a4,8(s0)
    8000b6e0:	47d5                	li	a5,21
    8000b6e2:	00f71463          	bne	a4,a5,8000b6ea <tinst_tests_gpf+0x390>
    8000b6e6:	65d0106f          	j	8000d542 <tinst_tests_gpf+0x21e8>
    8000b6ea:	00025517          	auipc	a0,0x25
    8000b6ee:	92650513          	addi	a0,a0,-1754 # 80030010 <__func__.0+0x320>
    8000b6f2:	19b210ef          	jal	8002d08c <printf>
    8000b6f6:	02900513          	li	a0,41
    8000b6fa:	680200ef          	jal	8002bd7a <putchar>
    8000b6fe:	4529                	li	a0,10
    8000b700:	67a200ef          	jal	8002bd7a <putchar>
    8000b704:	cc89                	beqz	s1,8000b71e <tinst_tests_gpf+0x3c4>
    8000b706:	0004d797          	auipc	a5,0x4d
    8000b70a:	90b7c783          	lbu	a5,-1781(a5) # 80058011 <excpt+0x1>
    8000b70e:	c799                	beqz	a5,8000b71c <tinst_tests_gpf+0x3c2>
    8000b710:	6418                	ld	a4,8(s0)
    8000b712:	47d5                	li	a5,21
    8000b714:	00f71463          	bne	a4,a5,8000b71c <tinst_tests_gpf+0x3c2>
    8000b718:	5f10106f          	j	8000d508 <tinst_tests_gpf+0x21ae>
    8000b71c:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b71e:	eeef50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    8000b722:	001007b7          	lui	a5,0x100
    8000b726:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b72a:	07b2                	slli	a5,a5,0xc
    8000b72c:	0007e783          	lwu	a5,0(a5)
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000b730:	00027617          	auipc	a2,0x27
    8000b734:	c3060613          	addi	a2,a2,-976 # 80032360 <__func__.0+0x2670>
    8000b738:	08200593          	li	a1,130
    8000b73c:	00025517          	auipc	a0,0x25
    8000b740:	8b450513          	addi	a0,a0,-1868 # 8002fff0 <__func__.0+0x300>
    8000b744:	149210ef          	jal	8002d08c <printf>
    8000b748:	0004d797          	auipc	a5,0x4d
    8000b74c:	8c97c783          	lbu	a5,-1847(a5) # 80058011 <excpt+0x1>
    8000b750:	e399                	bnez	a5,8000b756 <tinst_tests_gpf+0x3fc>
    8000b752:	4b60106f          	j	8000cc08 <tinst_tests_gpf+0x18ae>
    8000b756:	6418                	ld	a4,8(s0)
    8000b758:	47d5                	li	a5,21
    8000b75a:	00025597          	auipc	a1,0x25
    8000b75e:	86e58593          	addi	a1,a1,-1938 # 8002ffc8 <__func__.0+0x2d8>
    8000b762:	00f71463          	bne	a4,a5,8000b76a <tinst_tests_gpf+0x410>
    8000b766:	45a0106f          	j	8000cbc0 <tinst_tests_gpf+0x1866>
    8000b76a:	00025517          	auipc	a0,0x25
    8000b76e:	89e50513          	addi	a0,a0,-1890 # 80030008 <__func__.0+0x318>
    8000b772:	11b210ef          	jal	8002d08c <printf>
    8000b776:	0004d797          	auipc	a5,0x4d
    8000b77a:	89b7c783          	lbu	a5,-1893(a5) # 80058011 <excpt+0x1>
    8000b77e:	c799                	beqz	a5,8000b78c <tinst_tests_gpf+0x432>
    8000b780:	6418                	ld	a4,8(s0)
    8000b782:	47d5                	li	a5,21
    8000b784:	00f71463          	bne	a4,a5,8000b78c <tinst_tests_gpf+0x432>
    8000b788:	65b0106f          	j	8000d5e2 <tinst_tests_gpf+0x2288>
    8000b78c:	00025517          	auipc	a0,0x25
    8000b790:	88450513          	addi	a0,a0,-1916 # 80030010 <__func__.0+0x320>
    8000b794:	0f9210ef          	jal	8002d08c <printf>
    8000b798:	02900513          	li	a0,41
    8000b79c:	5de200ef          	jal	8002bd7a <putchar>
    8000b7a0:	4529                	li	a0,10
    8000b7a2:	5d8200ef          	jal	8002bd7a <putchar>
    8000b7a6:	c889                	beqz	s1,8000b7b8 <tinst_tests_gpf+0x45e>
    8000b7a8:	0004d797          	auipc	a5,0x4d
    8000b7ac:	8697c783          	lbu	a5,-1943(a5) # 80058011 <excpt+0x1>
    8000b7b0:	c399                	beqz	a5,8000b7b6 <tinst_tests_gpf+0x45c>
    8000b7b2:	7fe0106f          	j	8000cfb0 <tinst_tests_gpf+0x1c56>
    8000b7b6:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b7b8:	e54f50ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000b7bc:	001007b7          	lui	a5,0x100
    8000b7c0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b7c4:	07b2                	slli	a5,a5,0xc
    8000b7c6:	0007b783          	ld	a5,0(a5)
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000b7ca:	00027617          	auipc	a2,0x27
    8000b7ce:	bd660613          	addi	a2,a2,-1066 # 800323a0 <__func__.0+0x26b0>
    8000b7d2:	08200593          	li	a1,130
    8000b7d6:	00025517          	auipc	a0,0x25
    8000b7da:	81a50513          	addi	a0,a0,-2022 # 8002fff0 <__func__.0+0x300>
    8000b7de:	0af210ef          	jal	8002d08c <printf>
    8000b7e2:	0004d797          	auipc	a5,0x4d
    8000b7e6:	82f7c783          	lbu	a5,-2001(a5) # 80058011 <excpt+0x1>
    8000b7ea:	e399                	bnez	a5,8000b7f0 <tinst_tests_gpf+0x496>
    8000b7ec:	4700106f          	j	8000cc5c <tinst_tests_gpf+0x1902>
    8000b7f0:	6418                	ld	a4,8(s0)
    8000b7f2:	47d5                	li	a5,21
    8000b7f4:	00024597          	auipc	a1,0x24
    8000b7f8:	7d458593          	addi	a1,a1,2004 # 8002ffc8 <__func__.0+0x2d8>
    8000b7fc:	00f71463          	bne	a4,a5,8000b804 <tinst_tests_gpf+0x4aa>
    8000b800:	4140106f          	j	8000cc14 <tinst_tests_gpf+0x18ba>
    8000b804:	00025517          	auipc	a0,0x25
    8000b808:	80450513          	addi	a0,a0,-2044 # 80030008 <__func__.0+0x318>
    8000b80c:	081210ef          	jal	8002d08c <printf>
    8000b810:	0004d797          	auipc	a5,0x4d
    8000b814:	8017c783          	lbu	a5,-2047(a5) # 80058011 <excpt+0x1>
    8000b818:	c799                	beqz	a5,8000b826 <tinst_tests_gpf+0x4cc>
    8000b81a:	6418                	ld	a4,8(s0)
    8000b81c:	47d5                	li	a5,21
    8000b81e:	00f71463          	bne	a4,a5,8000b826 <tinst_tests_gpf+0x4cc>
    8000b822:	6530106f          	j	8000d674 <tinst_tests_gpf+0x231a>
    8000b826:	00024517          	auipc	a0,0x24
    8000b82a:	7ea50513          	addi	a0,a0,2026 # 80030010 <__func__.0+0x320>
    8000b82e:	05f210ef          	jal	8002d08c <printf>
    8000b832:	02900513          	li	a0,41
    8000b836:	544200ef          	jal	8002bd7a <putchar>
    8000b83a:	4529                	li	a0,10
    8000b83c:	53e200ef          	jal	8002bd7a <putchar>
    8000b840:	c889                	beqz	s1,8000b852 <tinst_tests_gpf+0x4f8>
    8000b842:	0004c797          	auipc	a5,0x4c
    8000b846:	7cf7c783          	lbu	a5,1999(a5) # 80058011 <excpt+0x1>
    8000b84a:	c399                	beqz	a5,8000b850 <tinst_tests_gpf+0x4f6>
    8000b84c:	0130106f          	j	8000d05e <tinst_tests_gpf+0x1d04>
    8000b850:	4481                	li	s1,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    8000b852:	dbaf50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000b856:	001007b7          	lui	a5,0x100
    8000b85a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b85e:	07b2                	slli	a5,a5,0xc
    8000b860:	573d                	li	a4,-17
    8000b862:	00e78023          	sb	a4,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000b866:	00027617          	auipc	a2,0x27
    8000b86a:	b7a60613          	addi	a2,a2,-1158 # 800323e0 <__func__.0+0x26f0>
    8000b86e:	08200593          	li	a1,130
    8000b872:	00024517          	auipc	a0,0x24
    8000b876:	77e50513          	addi	a0,a0,1918 # 8002fff0 <__func__.0+0x300>
    8000b87a:	013210ef          	jal	8002d08c <printf>
    8000b87e:	0004c797          	auipc	a5,0x4c
    8000b882:	7937c783          	lbu	a5,1939(a5) # 80058011 <excpt+0x1>
    8000b886:	e399                	bnez	a5,8000b88c <tinst_tests_gpf+0x532>
    8000b888:	42e0106f          	j	8000ccb6 <tinst_tests_gpf+0x195c>
    8000b88c:	6418                	ld	a4,8(s0)
    8000b88e:	47dd                	li	a5,23
    8000b890:	00024597          	auipc	a1,0x24
    8000b894:	73858593          	addi	a1,a1,1848 # 8002ffc8 <__func__.0+0x2d8>
    8000b898:	00f71463          	bne	a4,a5,8000b8a0 <tinst_tests_gpf+0x546>
    8000b89c:	3cc0106f          	j	8000cc68 <tinst_tests_gpf+0x190e>
    8000b8a0:	00024517          	auipc	a0,0x24
    8000b8a4:	76850513          	addi	a0,a0,1896 # 80030008 <__func__.0+0x318>
    8000b8a8:	7e4210ef          	jal	8002d08c <printf>
    8000b8ac:	0004c797          	auipc	a5,0x4c
    8000b8b0:	7657c783          	lbu	a5,1893(a5) # 80058011 <excpt+0x1>
    8000b8b4:	c799                	beqz	a5,8000b8c2 <tinst_tests_gpf+0x568>
    8000b8b6:	6418                	ld	a4,8(s0)
    8000b8b8:	47dd                	li	a5,23
    8000b8ba:	00f71463          	bne	a4,a5,8000b8c2 <tinst_tests_gpf+0x568>
    8000b8be:	64d0106f          	j	8000d70a <tinst_tests_gpf+0x23b0>
    8000b8c2:	00024517          	auipc	a0,0x24
    8000b8c6:	74e50513          	addi	a0,a0,1870 # 80030010 <__func__.0+0x320>
    8000b8ca:	7c2210ef          	jal	8002d08c <printf>
    8000b8ce:	02900513          	li	a0,41
    8000b8d2:	4a8200ef          	jal	8002bd7a <putchar>
    8000b8d6:	4529                	li	a0,10
    8000b8d8:	4a2200ef          	jal	8002bd7a <putchar>
    8000b8dc:	c889                	beqz	s1,8000b8ee <tinst_tests_gpf+0x594>
    8000b8de:	0004c797          	auipc	a5,0x4c
    8000b8e2:	7337c783          	lbu	a5,1843(a5) # 80058011 <excpt+0x1>
    8000b8e6:	c399                	beqz	a5,8000b8ec <tinst_tests_gpf+0x592>
    8000b8e8:	0250106f          	j	8000d10c <tinst_tests_gpf+0x1db2>
    8000b8ec:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b8ee:	d1ef50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000b8f2:	001007b7          	lui	a5,0x100
    8000b8f6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b8fa:	7771                	lui	a4,0xffffc
    8000b8fc:	07b2                	slli	a5,a5,0xc
    8000b8fe:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8000b902:	00e79023          	sh	a4,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000b906:	00027617          	auipc	a2,0x27
    8000b90a:	b1a60613          	addi	a2,a2,-1254 # 80032420 <__func__.0+0x2730>
    8000b90e:	08200593          	li	a1,130
    8000b912:	00024517          	auipc	a0,0x24
    8000b916:	6de50513          	addi	a0,a0,1758 # 8002fff0 <__func__.0+0x300>
    8000b91a:	772210ef          	jal	8002d08c <printf>
    8000b91e:	0004c797          	auipc	a5,0x4c
    8000b922:	6f37c783          	lbu	a5,1779(a5) # 80058011 <excpt+0x1>
    8000b926:	e399                	bnez	a5,8000b92c <tinst_tests_gpf+0x5d2>
    8000b928:	3e80106f          	j	8000cd10 <tinst_tests_gpf+0x19b6>
    8000b92c:	6418                	ld	a4,8(s0)
    8000b92e:	47dd                	li	a5,23
    8000b930:	00024597          	auipc	a1,0x24
    8000b934:	69858593          	addi	a1,a1,1688 # 8002ffc8 <__func__.0+0x2d8>
    8000b938:	00f71463          	bne	a4,a5,8000b940 <tinst_tests_gpf+0x5e6>
    8000b93c:	3860106f          	j	8000ccc2 <tinst_tests_gpf+0x1968>
    8000b940:	00024517          	auipc	a0,0x24
    8000b944:	6c850513          	addi	a0,a0,1736 # 80030008 <__func__.0+0x318>
    8000b948:	744210ef          	jal	8002d08c <printf>
    8000b94c:	0004c797          	auipc	a5,0x4c
    8000b950:	6c57c783          	lbu	a5,1733(a5) # 80058011 <excpt+0x1>
    8000b954:	c799                	beqz	a5,8000b962 <tinst_tests_gpf+0x608>
    8000b956:	6418                	ld	a4,8(s0)
    8000b958:	47dd                	li	a5,23
    8000b95a:	00f71463          	bne	a4,a5,8000b962 <tinst_tests_gpf+0x608>
    8000b95e:	6490106f          	j	8000d7a6 <tinst_tests_gpf+0x244c>
    8000b962:	00024517          	auipc	a0,0x24
    8000b966:	6ae50513          	addi	a0,a0,1710 # 80030010 <__func__.0+0x320>
    8000b96a:	722210ef          	jal	8002d08c <printf>
    8000b96e:	02900513          	li	a0,41
    8000b972:	408200ef          	jal	8002bd7a <putchar>
    8000b976:	4529                	li	a0,10
    8000b978:	402200ef          	jal	8002bd7a <putchar>
    8000b97c:	c889                	beqz	s1,8000b98e <tinst_tests_gpf+0x634>
    8000b97e:	0004c797          	auipc	a5,0x4c
    8000b982:	6937c783          	lbu	a5,1683(a5) # 80058011 <excpt+0x1>
    8000b986:	c399                	beqz	a5,8000b98c <tinst_tests_gpf+0x632>
    8000b988:	7d20106f          	j	8000d15a <tinst_tests_gpf+0x1e00>
    8000b98c:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b98e:	c7ef50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000b992:	001007b7          	lui	a5,0x100
    8000b996:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b99a:	deadc737          	lui	a4,0xdeadc
    8000b99e:	07b2                	slli	a5,a5,0xc
    8000b9a0:	eef7071b          	addiw	a4,a4,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    8000b9a4:	00e7a023          	sw	a4,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000b9a8:	00027617          	auipc	a2,0x27
    8000b9ac:	ab860613          	addi	a2,a2,-1352 # 80032460 <__func__.0+0x2770>
    8000b9b0:	08200593          	li	a1,130
    8000b9b4:	00024517          	auipc	a0,0x24
    8000b9b8:	63c50513          	addi	a0,a0,1596 # 8002fff0 <__func__.0+0x300>
    8000b9bc:	6d0210ef          	jal	8002d08c <printf>
    8000b9c0:	0004c797          	auipc	a5,0x4c
    8000b9c4:	6517c783          	lbu	a5,1617(a5) # 80058011 <excpt+0x1>
    8000b9c8:	e399                	bnez	a5,8000b9ce <tinst_tests_gpf+0x674>
    8000b9ca:	3a00106f          	j	8000cd6a <tinst_tests_gpf+0x1a10>
    8000b9ce:	6418                	ld	a4,8(s0)
    8000b9d0:	47dd                	li	a5,23
    8000b9d2:	00024597          	auipc	a1,0x24
    8000b9d6:	5f658593          	addi	a1,a1,1526 # 8002ffc8 <__func__.0+0x2d8>
    8000b9da:	00f71463          	bne	a4,a5,8000b9e2 <tinst_tests_gpf+0x688>
    8000b9de:	33e0106f          	j	8000cd1c <tinst_tests_gpf+0x19c2>
    8000b9e2:	00024517          	auipc	a0,0x24
    8000b9e6:	62650513          	addi	a0,a0,1574 # 80030008 <__func__.0+0x318>
    8000b9ea:	6a2210ef          	jal	8002d08c <printf>
    8000b9ee:	0004c797          	auipc	a5,0x4c
    8000b9f2:	6237c783          	lbu	a5,1571(a5) # 80058011 <excpt+0x1>
    8000b9f6:	c799                	beqz	a5,8000ba04 <tinst_tests_gpf+0x6aa>
    8000b9f8:	6418                	ld	a4,8(s0)
    8000b9fa:	47dd                	li	a5,23
    8000b9fc:	00f71463          	bne	a4,a5,8000ba04 <tinst_tests_gpf+0x6aa>
    8000ba00:	6430106f          	j	8000d842 <tinst_tests_gpf+0x24e8>
    8000ba04:	00024517          	auipc	a0,0x24
    8000ba08:	60c50513          	addi	a0,a0,1548 # 80030010 <__func__.0+0x320>
    8000ba0c:	680210ef          	jal	8002d08c <printf>
    8000ba10:	02900513          	li	a0,41
    8000ba14:	366200ef          	jal	8002bd7a <putchar>
    8000ba18:	4529                	li	a0,10
    8000ba1a:	360200ef          	jal	8002bd7a <putchar>
    8000ba1e:	c889                	beqz	s1,8000ba30 <tinst_tests_gpf+0x6d6>
    8000ba20:	0004c797          	auipc	a5,0x4c
    8000ba24:	5f17c783          	lbu	a5,1521(a5) # 80058011 <excpt+0x1>
    8000ba28:	c399                	beqz	a5,8000ba2e <tinst_tests_gpf+0x6d4>
    8000ba2a:	77e0106f          	j	8000d1a8 <tinst_tests_gpf+0x1e4e>
    8000ba2e:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000ba30:	bdcf50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000ba34:	37ab77b7          	lui	a5,0x37ab7
    8000ba38:	00100737          	lui	a4,0x100
    8000ba3c:	078a                	slli	a5,a5,0x2
    8000ba3e:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8000ba42:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000ba46:	0732                	slli	a4,a4,0xc
    8000ba48:	00f73023          	sd	a5,0(a4)
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000ba4c:	00027617          	auipc	a2,0x27
    8000ba50:	a5460613          	addi	a2,a2,-1452 # 800324a0 <__func__.0+0x27b0>
    8000ba54:	08200593          	li	a1,130
    8000ba58:	00024517          	auipc	a0,0x24
    8000ba5c:	59850513          	addi	a0,a0,1432 # 8002fff0 <__func__.0+0x300>
    8000ba60:	62c210ef          	jal	8002d08c <printf>
    8000ba64:	0004c797          	auipc	a5,0x4c
    8000ba68:	5ad7c783          	lbu	a5,1453(a5) # 80058011 <excpt+0x1>
    8000ba6c:	e399                	bnez	a5,8000ba72 <tinst_tests_gpf+0x718>
    8000ba6e:	3560106f          	j	8000cdc4 <tinst_tests_gpf+0x1a6a>
    8000ba72:	6418                	ld	a4,8(s0)
    8000ba74:	47dd                	li	a5,23
    8000ba76:	00024597          	auipc	a1,0x24
    8000ba7a:	55258593          	addi	a1,a1,1362 # 8002ffc8 <__func__.0+0x2d8>
    8000ba7e:	00f71463          	bne	a4,a5,8000ba86 <tinst_tests_gpf+0x72c>
    8000ba82:	2f40106f          	j	8000cd76 <tinst_tests_gpf+0x1a1c>
    8000ba86:	00024517          	auipc	a0,0x24
    8000ba8a:	58250513          	addi	a0,a0,1410 # 80030008 <__func__.0+0x318>
    8000ba8e:	5fe210ef          	jal	8002d08c <printf>
    8000ba92:	0004c797          	auipc	a5,0x4c
    8000ba96:	57f7c783          	lbu	a5,1407(a5) # 80058011 <excpt+0x1>
    8000ba9a:	c799                	beqz	a5,8000baa8 <tinst_tests_gpf+0x74e>
    8000ba9c:	6418                	ld	a4,8(s0)
    8000ba9e:	47dd                	li	a5,23
    8000baa0:	00f71463          	bne	a4,a5,8000baa8 <tinst_tests_gpf+0x74e>
    8000baa4:	63b0106f          	j	8000d8de <tinst_tests_gpf+0x2584>
    8000baa8:	00024517          	auipc	a0,0x24
    8000baac:	56850513          	addi	a0,a0,1384 # 80030010 <__func__.0+0x320>
    8000bab0:	5dc210ef          	jal	8002d08c <printf>
    8000bab4:	02900513          	li	a0,41
    8000bab8:	2c2200ef          	jal	8002bd7a <putchar>
    8000babc:	4529                	li	a0,10
    8000babe:	2bc200ef          	jal	8002bd7a <putchar>
    8000bac2:	c889                	beqz	s1,8000bad4 <tinst_tests_gpf+0x77a>
    8000bac4:	0004c797          	auipc	a5,0x4c
    8000bac8:	54d7c783          	lbu	a5,1357(a5) # 80058011 <excpt+0x1>
    8000bacc:	c399                	beqz	a5,8000bad2 <tinst_tests_gpf+0x778>
    8000bace:	7280106f          	j	8000d1f6 <tinst_tests_gpf+0x1e9c>
    8000bad2:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bad4:	b38f50ef          	jal	80000e0c <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000bad8:	00100537          	lui	a0,0x100
    8000badc:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000bae0:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000bae2:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000bae4:	00027617          	auipc	a2,0x27
    8000bae8:	9fc60613          	addi	a2,a2,-1540 # 800324e0 <__func__.0+0x27f0>
    8000baec:	08200593          	li	a1,130
    8000baf0:	00024517          	auipc	a0,0x24
    8000baf4:	50050513          	addi	a0,a0,1280 # 8002fff0 <__func__.0+0x300>
    8000baf8:	594210ef          	jal	8002d08c <printf>
    8000bafc:	0004c797          	auipc	a5,0x4c
    8000bb00:	5157c783          	lbu	a5,1301(a5) # 80058011 <excpt+0x1>
    8000bb04:	c799                	beqz	a5,8000bb12 <tinst_tests_gpf+0x7b8>
    8000bb06:	6418                	ld	a4,8(s0)
    8000bb08:	47d5                	li	a5,21
    8000bb0a:	00f71463          	bne	a4,a5,8000bb12 <tinst_tests_gpf+0x7b8>
    8000bb0e:	0370106f          	j	8000d344 <tinst_tests_gpf+0x1fea>
    8000bb12:	00024597          	auipc	a1,0x24
    8000bb16:	4b658593          	addi	a1,a1,1206 # 8002ffc8 <__func__.0+0x2d8>
    8000bb1a:	00024517          	auipc	a0,0x24
    8000bb1e:	4ee50513          	addi	a0,a0,1262 # 80030008 <__func__.0+0x318>
    8000bb22:	56a210ef          	jal	8002d08c <printf>
    8000bb26:	0004c797          	auipc	a5,0x4c
    8000bb2a:	4eb7c783          	lbu	a5,1259(a5) # 80058011 <excpt+0x1>
    8000bb2e:	c799                	beqz	a5,8000bb3c <tinst_tests_gpf+0x7e2>
    8000bb30:	6418                	ld	a4,8(s0)
    8000bb32:	47d5                	li	a5,21
    8000bb34:	00f71463          	bne	a4,a5,8000bb3c <tinst_tests_gpf+0x7e2>
    8000bb38:	6430106f          	j	8000d97a <tinst_tests_gpf+0x2620>
    8000bb3c:	00024517          	auipc	a0,0x24
    8000bb40:	4d450513          	addi	a0,a0,1236 # 80030010 <__func__.0+0x320>
    8000bb44:	548210ef          	jal	8002d08c <printf>
    8000bb48:	02900513          	li	a0,41
    8000bb4c:	22e200ef          	jal	8002bd7a <putchar>
    8000bb50:	4529                	li	a0,10
    8000bb52:	228200ef          	jal	8002bd7a <putchar>
    8000bb56:	c889                	beqz	s1,8000bb68 <tinst_tests_gpf+0x80e>
    8000bb58:	0004c797          	auipc	a5,0x4c
    8000bb5c:	4b97c783          	lbu	a5,1209(a5) # 80058011 <excpt+0x1>
    8000bb60:	c399                	beqz	a5,8000bb66 <tinst_tests_gpf+0x80c>
    8000bb62:	6e20106f          	j	8000d244 <tinst_tests_gpf+0x1eea>
    8000bb66:	4481                	li	s1,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bb68:	aa4f50ef          	jal	80000e0c <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000bb6c:	00100537          	lui	a0,0x100
    8000bb70:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000bb74:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000bb76:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000bb78:	00027617          	auipc	a2,0x27
    8000bb7c:	9a860613          	addi	a2,a2,-1624 # 80032520 <__func__.0+0x2830>
    return value;
    8000bb80:	892e                	mv	s2,a1
    8000bb82:	00024517          	auipc	a0,0x24
    8000bb86:	46e50513          	addi	a0,a0,1134 # 8002fff0 <__func__.0+0x300>
    8000bb8a:	08200593          	li	a1,130
    8000bb8e:	4fe210ef          	jal	8002d08c <printf>
    8000bb92:	0004c797          	auipc	a5,0x4c
    8000bb96:	47f7c783          	lbu	a5,1151(a5) # 80058011 <excpt+0x1>
    8000bb9a:	c799                	beqz	a5,8000bba8 <tinst_tests_gpf+0x84e>
    8000bb9c:	6418                	ld	a4,8(s0)
    8000bb9e:	47d5                	li	a5,21
    8000bba0:	00f71463          	bne	a4,a5,8000bba8 <tinst_tests_gpf+0x84e>
    8000bba4:	7f60106f          	j	8000d39a <tinst_tests_gpf+0x2040>
    8000bba8:	00024597          	auipc	a1,0x24
    8000bbac:	42058593          	addi	a1,a1,1056 # 8002ffc8 <__func__.0+0x2d8>
    8000bbb0:	00024517          	auipc	a0,0x24
    8000bbb4:	45850513          	addi	a0,a0,1112 # 80030008 <__func__.0+0x318>
    8000bbb8:	4d4210ef          	jal	8002d08c <printf>
    8000bbbc:	0004c797          	auipc	a5,0x4c
    8000bbc0:	4557c783          	lbu	a5,1109(a5) # 80058011 <excpt+0x1>
    8000bbc4:	c799                	beqz	a5,8000bbd2 <tinst_tests_gpf+0x878>
    8000bbc6:	6418                	ld	a4,8(s0)
    8000bbc8:	47d5                	li	a5,21
    8000bbca:	00f71463          	bne	a4,a5,8000bbd2 <tinst_tests_gpf+0x878>
    8000bbce:	6370106f          	j	8000da04 <tinst_tests_gpf+0x26aa>
    8000bbd2:	00024517          	auipc	a0,0x24
    8000bbd6:	43e50513          	addi	a0,a0,1086 # 80030010 <__func__.0+0x320>
    8000bbda:	4b2210ef          	jal	8002d08c <printf>
    8000bbde:	02900513          	li	a0,41
    8000bbe2:	198200ef          	jal	8002bd7a <putchar>
    8000bbe6:	4529                	li	a0,10
    8000bbe8:	192200ef          	jal	8002bd7a <putchar>
    8000bbec:	c889                	beqz	s1,8000bbfe <tinst_tests_gpf+0x8a4>
    8000bbee:	0004c797          	auipc	a5,0x4c
    8000bbf2:	4237c783          	lbu	a5,1059(a5) # 80058011 <excpt+0x1>
    8000bbf6:	c399                	beqz	a5,8000bbfc <tinst_tests_gpf+0x8a2>
    8000bbf8:	68a0106f          	j	8000d282 <tinst_tests_gpf+0x1f28>
    8000bbfc:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bbfe:	a0ef50ef          	jal	80000e0c <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000bc02:	00100537          	lui	a0,0x100
    8000bc06:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000bc0a:	0532                	slli	a0,a0,0xc
    register uint64_t _value asm("a1") = value;
    8000bc0c:	85ca                	mv	a1,s2
    asm volatile(
    8000bc0e:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000bc10:	00027617          	auipc	a2,0x27
    8000bc14:	8d060613          	addi	a2,a2,-1840 # 800324e0 <__func__.0+0x27f0>
    8000bc18:	08200593          	li	a1,130
    8000bc1c:	00024517          	auipc	a0,0x24
    8000bc20:	3d450513          	addi	a0,a0,980 # 8002fff0 <__func__.0+0x300>
    8000bc24:	468210ef          	jal	8002d08c <printf>
    8000bc28:	0004c797          	auipc	a5,0x4c
    8000bc2c:	3e97c783          	lbu	a5,1001(a5) # 80058011 <excpt+0x1>
    8000bc30:	c799                	beqz	a5,8000bc3e <tinst_tests_gpf+0x8e4>
    8000bc32:	6418                	ld	a4,8(s0)
    8000bc34:	47dd                	li	a5,23
    8000bc36:	00f71463          	bne	a4,a5,8000bc3e <tinst_tests_gpf+0x8e4>
    8000bc3a:	7b60106f          	j	8000d3f0 <tinst_tests_gpf+0x2096>
    8000bc3e:	00024597          	auipc	a1,0x24
    8000bc42:	38a58593          	addi	a1,a1,906 # 8002ffc8 <__func__.0+0x2d8>
    8000bc46:	00024517          	auipc	a0,0x24
    8000bc4a:	3c250513          	addi	a0,a0,962 # 80030008 <__func__.0+0x318>
    8000bc4e:	43e210ef          	jal	8002d08c <printf>
    8000bc52:	0004c797          	auipc	a5,0x4c
    8000bc56:	3bf7c783          	lbu	a5,959(a5) # 80058011 <excpt+0x1>
    8000bc5a:	c799                	beqz	a5,8000bc68 <tinst_tests_gpf+0x90e>
    8000bc5c:	6418                	ld	a4,8(s0)
    8000bc5e:	47dd                	li	a5,23
    8000bc60:	00f71463          	bne	a4,a5,8000bc68 <tinst_tests_gpf+0x90e>
    8000bc64:	62b0106f          	j	8000da8e <tinst_tests_gpf+0x2734>
    8000bc68:	00024517          	auipc	a0,0x24
    8000bc6c:	3a850513          	addi	a0,a0,936 # 80030010 <__func__.0+0x320>
    8000bc70:	41c210ef          	jal	8002d08c <printf>
    8000bc74:	02900513          	li	a0,41
    8000bc78:	102200ef          	jal	8002bd7a <putchar>
    8000bc7c:	4529                	li	a0,10
    8000bc7e:	0fc200ef          	jal	8002bd7a <putchar>
    8000bc82:	c889                	beqz	s1,8000bc94 <tinst_tests_gpf+0x93a>
    8000bc84:	0004c797          	auipc	a5,0x4c
    8000bc88:	38d7c783          	lbu	a5,909(a5) # 80058011 <excpt+0x1>
    8000bc8c:	c399                	beqz	a5,8000bc92 <tinst_tests_gpf+0x938>
    8000bc8e:	6320106f          	j	8000d2c0 <tinst_tests_gpf+0x1f66>
    8000bc92:	4481                	li	s1,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bc94:	978f50ef          	jal	80000e0c <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000bc98:	00100537          	lui	a0,0x100
    8000bc9c:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    register uint64_t _value asm("a1") = value;
    8000bca0:	85ca                	mv	a1,s2
    register uint64_t _addr asm("a0") = addr;
    8000bca2:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000bca4:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000bca6:	00027617          	auipc	a2,0x27
    8000bcaa:	8ba60613          	addi	a2,a2,-1862 # 80032560 <__func__.0+0x2870>
    8000bcae:	08200593          	li	a1,130
    8000bcb2:	00024517          	auipc	a0,0x24
    8000bcb6:	33e50513          	addi	a0,a0,830 # 8002fff0 <__func__.0+0x300>
    8000bcba:	3d2210ef          	jal	8002d08c <printf>
    8000bcbe:	0004c797          	auipc	a5,0x4c
    8000bcc2:	3537c783          	lbu	a5,851(a5) # 80058011 <excpt+0x1>
    8000bcc6:	c799                	beqz	a5,8000bcd4 <tinst_tests_gpf+0x97a>
    8000bcc8:	6418                	ld	a4,8(s0)
    8000bcca:	47dd                	li	a5,23
    8000bccc:	00f71463          	bne	a4,a5,8000bcd4 <tinst_tests_gpf+0x97a>
    8000bcd0:	7760106f          	j	8000d446 <tinst_tests_gpf+0x20ec>
    8000bcd4:	00024597          	auipc	a1,0x24
    8000bcd8:	2f458593          	addi	a1,a1,756 # 8002ffc8 <__func__.0+0x2d8>
    8000bcdc:	00024517          	auipc	a0,0x24
    8000bce0:	32c50513          	addi	a0,a0,812 # 80030008 <__func__.0+0x318>
    8000bce4:	3a8210ef          	jal	8002d08c <printf>
    8000bce8:	0004c797          	auipc	a5,0x4c
    8000bcec:	3297c783          	lbu	a5,809(a5) # 80058011 <excpt+0x1>
    8000bcf0:	c799                	beqz	a5,8000bcfe <tinst_tests_gpf+0x9a4>
    8000bcf2:	6418                	ld	a4,8(s0)
    8000bcf4:	47dd                	li	a5,23
    8000bcf6:	00f71463          	bne	a4,a5,8000bcfe <tinst_tests_gpf+0x9a4>
    8000bcfa:	6230106f          	j	8000db1c <tinst_tests_gpf+0x27c2>
    8000bcfe:	00024517          	auipc	a0,0x24
    8000bd02:	31250513          	addi	a0,a0,786 # 80030010 <__func__.0+0x320>
    8000bd06:	386210ef          	jal	8002d08c <printf>
    8000bd0a:	02900513          	li	a0,41
    8000bd0e:	06c200ef          	jal	8002bd7a <putchar>
    8000bd12:	4529                	li	a0,10
    8000bd14:	066200ef          	jal	8002bd7a <putchar>
    8000bd18:	cc89                	beqz	s1,8000bd32 <tinst_tests_gpf+0x9d8>
    8000bd1a:	0004c797          	auipc	a5,0x4c
    8000bd1e:	2f77c783          	lbu	a5,759(a5) # 80058011 <excpt+0x1>
    8000bd22:	c799                	beqz	a5,8000bd30 <tinst_tests_gpf+0x9d6>
    8000bd24:	6418                	ld	a4,8(s0)
    8000bd26:	47dd                	li	a5,23
    8000bd28:	00f71463          	bne	a4,a5,8000bd30 <tinst_tests_gpf+0x9d6>
    8000bd2c:	3760206f          	j	8000e0a2 <tinst_tests_gpf+0x2d48>
    8000bd30:	4481                	li	s1,0
    asm volatile(
    8000bd32:	00100937          	lui	s2,0x100
    8000bd36:	06590913          	addi	s2,s2,101 # 100065 <STACK_SIZE+0x65>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bd3a:	8d2f50ef          	jal	80000e0c <test_setup_except_function>
    8000bd3e:	0932                	slli	s2,s2,0xc
    8000bd40:	1009292f          	lr.w	s2,(s2)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000bd44:	00027617          	auipc	a2,0x27
    8000bd48:	85c60613          	addi	a2,a2,-1956 # 800325a0 <__func__.0+0x28b0>
    8000bd4c:	08200593          	li	a1,130
    8000bd50:	00024517          	auipc	a0,0x24
    8000bd54:	2a050513          	addi	a0,a0,672 # 8002fff0 <__func__.0+0x300>
    8000bd58:	334210ef          	jal	8002d08c <printf>
    8000bd5c:	0004c797          	auipc	a5,0x4c
    8000bd60:	2b57c783          	lbu	a5,693(a5) # 80058011 <excpt+0x1>
    value = lr_w(vaddr_f);
    8000bd64:	1902                	slli	s2,s2,0x20
    8000bd66:	02095913          	srli	s2,s2,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000bd6a:	e399                	bnez	a5,8000bd70 <tinst_tests_gpf+0xa16>
    8000bd6c:	0b20106f          	j	8000ce1e <tinst_tests_gpf+0x1ac4>
    8000bd70:	6418                	ld	a4,8(s0)
    8000bd72:	47d5                	li	a5,21
    8000bd74:	00024597          	auipc	a1,0x24
    8000bd78:	25458593          	addi	a1,a1,596 # 8002ffc8 <__func__.0+0x2d8>
    8000bd7c:	00f71463          	bne	a4,a5,8000bd84 <tinst_tests_gpf+0xa2a>
    8000bd80:	0500106f          	j	8000cdd0 <tinst_tests_gpf+0x1a76>
    8000bd84:	00024517          	auipc	a0,0x24
    8000bd88:	28450513          	addi	a0,a0,644 # 80030008 <__func__.0+0x318>
    8000bd8c:	300210ef          	jal	8002d08c <printf>
    8000bd90:	0004c797          	auipc	a5,0x4c
    8000bd94:	2817c783          	lbu	a5,641(a5) # 80058011 <excpt+0x1>
    8000bd98:	c799                	beqz	a5,8000bda6 <tinst_tests_gpf+0xa4c>
    8000bd9a:	6418                	ld	a4,8(s0)
    8000bd9c:	47d5                	li	a5,21
    8000bd9e:	00f71463          	bne	a4,a5,8000bda6 <tinst_tests_gpf+0xa4c>
    8000bda2:	6090106f          	j	8000dbaa <tinst_tests_gpf+0x2850>
    8000bda6:	00024517          	auipc	a0,0x24
    8000bdaa:	26a50513          	addi	a0,a0,618 # 80030010 <__func__.0+0x320>
    8000bdae:	2de210ef          	jal	8002d08c <printf>
    8000bdb2:	02900513          	li	a0,41
    8000bdb6:	7c51f0ef          	jal	8002bd7a <putchar>
    8000bdba:	4529                	li	a0,10
    8000bdbc:	7bf1f0ef          	jal	8002bd7a <putchar>
    8000bdc0:	cc89                	beqz	s1,8000bdda <tinst_tests_gpf+0xa80>
    8000bdc2:	0004c797          	auipc	a5,0x4c
    8000bdc6:	24f7c783          	lbu	a5,591(a5) # 80058011 <excpt+0x1>
    8000bdca:	c799                	beqz	a5,8000bdd8 <tinst_tests_gpf+0xa7e>
    8000bdcc:	6418                	ld	a4,8(s0)
    8000bdce:	47d5                	li	a5,21
    8000bdd0:	00f71463          	bne	a4,a5,8000bdd8 <tinst_tests_gpf+0xa7e>
    8000bdd4:	3040206f          	j	8000e0d8 <tinst_tests_gpf+0x2d7e>
    8000bdd8:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bdda:	832f50ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000bdde:	001007b7          	lui	a5,0x100
    8000bde2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bde6:	07b2                	slli	a5,a5,0xc
    8000bde8:	1927a92f          	sc.w	s2,s2,(a5)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000bdec:	00026617          	auipc	a2,0x26
    8000bdf0:	7f460613          	addi	a2,a2,2036 # 800325e0 <__func__.0+0x28f0>
    8000bdf4:	08200593          	li	a1,130
    8000bdf8:	00024517          	auipc	a0,0x24
    8000bdfc:	1f850513          	addi	a0,a0,504 # 8002fff0 <__func__.0+0x300>
    8000be00:	28c210ef          	jal	8002d08c <printf>
    8000be04:	0004c797          	auipc	a5,0x4c
    8000be08:	20d7c783          	lbu	a5,525(a5) # 80058011 <excpt+0x1>
    return value;
    8000be0c:	2901                	sext.w	s2,s2
    8000be0e:	e399                	bnez	a5,8000be14 <tinst_tests_gpf+0xaba>
    8000be10:	0680106f          	j	8000ce78 <tinst_tests_gpf+0x1b1e>
    8000be14:	6418                	ld	a4,8(s0)
    8000be16:	47dd                	li	a5,23
    8000be18:	00024597          	auipc	a1,0x24
    8000be1c:	1b058593          	addi	a1,a1,432 # 8002ffc8 <__func__.0+0x2d8>
    8000be20:	00f71463          	bne	a4,a5,8000be28 <tinst_tests_gpf+0xace>
    8000be24:	0060106f          	j	8000ce2a <tinst_tests_gpf+0x1ad0>
    8000be28:	00024517          	auipc	a0,0x24
    8000be2c:	1e050513          	addi	a0,a0,480 # 80030008 <__func__.0+0x318>
    8000be30:	25c210ef          	jal	8002d08c <printf>
    8000be34:	0004c797          	auipc	a5,0x4c
    8000be38:	1dd7c783          	lbu	a5,477(a5) # 80058011 <excpt+0x1>
    8000be3c:	c799                	beqz	a5,8000be4a <tinst_tests_gpf+0xaf0>
    8000be3e:	6418                	ld	a4,8(s0)
    8000be40:	47dd                	li	a5,23
    8000be42:	00f71463          	bne	a4,a5,8000be4a <tinst_tests_gpf+0xaf0>
    8000be46:	4bc0106f          	j	8000d302 <tinst_tests_gpf+0x1fa8>
    8000be4a:	00024517          	auipc	a0,0x24
    8000be4e:	1c650513          	addi	a0,a0,454 # 80030010 <__func__.0+0x320>
    8000be52:	23a210ef          	jal	8002d08c <printf>
    8000be56:	02900513          	li	a0,41
    8000be5a:	7211f0ef          	jal	8002bd7a <putchar>
    8000be5e:	4529                	li	a0,10
    8000be60:	71b1f0ef          	jal	8002bd7a <putchar>
    8000be64:	cc89                	beqz	s1,8000be7e <tinst_tests_gpf+0xb24>
    8000be66:	0004c797          	auipc	a5,0x4c
    8000be6a:	1ab7c783          	lbu	a5,427(a5) # 80058011 <excpt+0x1>
    8000be6e:	c799                	beqz	a5,8000be7c <tinst_tests_gpf+0xb22>
    8000be70:	6418                	ld	a4,8(s0)
    8000be72:	47dd                	li	a5,23
    8000be74:	00f71463          	bne	a4,a5,8000be7c <tinst_tests_gpf+0xb22>
    8000be78:	2a20206f          	j	8000e11a <tinst_tests_gpf+0x2dc0>
    8000be7c:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000be7e:	f8ff40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    8000be82:	001007b7          	lui	a5,0x100
    8000be86:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000be8a:	07b2                	slli	a5,a5,0xc
    8000be8c:	0927a92f          	amoswap.w	s2,s2,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000be90:	00026617          	auipc	a2,0x26
    8000be94:	79060613          	addi	a2,a2,1936 # 80032620 <__func__.0+0x2930>
    8000be98:	08200593          	li	a1,130
    8000be9c:	00024517          	auipc	a0,0x24
    8000bea0:	15450513          	addi	a0,a0,340 # 8002fff0 <__func__.0+0x300>
    8000bea4:	1e8210ef          	jal	8002d08c <printf>
    8000bea8:	0004c797          	auipc	a5,0x4c
    8000beac:	1697c783          	lbu	a5,361(a5) # 80058011 <excpt+0x1>
    8000beb0:	e399                	bnez	a5,8000beb6 <tinst_tests_gpf+0xb5c>
    8000beb2:	0200106f          	j	8000ced2 <tinst_tests_gpf+0x1b78>
    8000beb6:	6418                	ld	a4,8(s0)
    8000beb8:	47dd                	li	a5,23
    8000beba:	00024597          	auipc	a1,0x24
    8000bebe:	10e58593          	addi	a1,a1,270 # 8002ffc8 <__func__.0+0x2d8>
    8000bec2:	00f71463          	bne	a4,a5,8000beca <tinst_tests_gpf+0xb70>
    8000bec6:	7bf0006f          	j	8000ce84 <tinst_tests_gpf+0x1b2a>
    8000beca:	00024517          	auipc	a0,0x24
    8000bece:	13e50513          	addi	a0,a0,318 # 80030008 <__func__.0+0x318>
    8000bed2:	1ba210ef          	jal	8002d08c <printf>
    8000bed6:	0004c797          	auipc	a5,0x4c
    8000beda:	13b7c783          	lbu	a5,315(a5) # 80058011 <excpt+0x1>
    8000bede:	c799                	beqz	a5,8000beec <tinst_tests_gpf+0xb92>
    8000bee0:	6418                	ld	a4,8(s0)
    8000bee2:	47dd                	li	a5,23
    8000bee4:	00f71463          	bne	a4,a5,8000beec <tinst_tests_gpf+0xb92>
    8000bee8:	4700106f          	j	8000d358 <tinst_tests_gpf+0x1ffe>
    8000beec:	00024517          	auipc	a0,0x24
    8000bef0:	12450513          	addi	a0,a0,292 # 80030010 <__func__.0+0x320>
    8000bef4:	198210ef          	jal	8002d08c <printf>
    8000bef8:	02900513          	li	a0,41
    8000befc:	67f1f0ef          	jal	8002bd7a <putchar>
    8000bf00:	4529                	li	a0,10
    8000bf02:	6791f0ef          	jal	8002bd7a <putchar>
    8000bf06:	cc89                	beqz	s1,8000bf20 <tinst_tests_gpf+0xbc6>
    8000bf08:	0004c797          	auipc	a5,0x4c
    8000bf0c:	1097c783          	lbu	a5,265(a5) # 80058011 <excpt+0x1>
    8000bf10:	c799                	beqz	a5,8000bf1e <tinst_tests_gpf+0xbc4>
    8000bf12:	6418                	ld	a4,8(s0)
    8000bf14:	47dd                	li	a5,23
    8000bf16:	00f71463          	bne	a4,a5,8000bf1e <tinst_tests_gpf+0xbc4>
    8000bf1a:	2420206f          	j	8000e15c <tinst_tests_gpf+0x2e02>
    8000bf1e:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bf20:	eedf40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8000bf24:	001007b7          	lui	a5,0x100
    8000bf28:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bf2c:	07b2                	slli	a5,a5,0xc
    8000bf2e:	0127a92f          	amoadd.w	s2,s2,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000bf32:	00026617          	auipc	a2,0x26
    8000bf36:	73660613          	addi	a2,a2,1846 # 80032668 <__func__.0+0x2978>
    8000bf3a:	08200593          	li	a1,130
    8000bf3e:	00024517          	auipc	a0,0x24
    8000bf42:	0b250513          	addi	a0,a0,178 # 8002fff0 <__func__.0+0x300>
    8000bf46:	146210ef          	jal	8002d08c <printf>
    8000bf4a:	0004c797          	auipc	a5,0x4c
    8000bf4e:	0c77c783          	lbu	a5,199(a5) # 80058011 <excpt+0x1>
    8000bf52:	e399                	bnez	a5,8000bf58 <tinst_tests_gpf+0xbfe>
    8000bf54:	7d90006f          	j	8000cf2c <tinst_tests_gpf+0x1bd2>
    8000bf58:	6418                	ld	a4,8(s0)
    8000bf5a:	47dd                	li	a5,23
    8000bf5c:	00024597          	auipc	a1,0x24
    8000bf60:	06c58593          	addi	a1,a1,108 # 8002ffc8 <__func__.0+0x2d8>
    8000bf64:	00f71463          	bne	a4,a5,8000bf6c <tinst_tests_gpf+0xc12>
    8000bf68:	7770006f          	j	8000cede <tinst_tests_gpf+0x1b84>
    8000bf6c:	00024517          	auipc	a0,0x24
    8000bf70:	09c50513          	addi	a0,a0,156 # 80030008 <__func__.0+0x318>
    8000bf74:	118210ef          	jal	8002d08c <printf>
    8000bf78:	0004c797          	auipc	a5,0x4c
    8000bf7c:	0997c783          	lbu	a5,153(a5) # 80058011 <excpt+0x1>
    8000bf80:	c799                	beqz	a5,8000bf8e <tinst_tests_gpf+0xc34>
    8000bf82:	6418                	ld	a4,8(s0)
    8000bf84:	47dd                	li	a5,23
    8000bf86:	00f71463          	bne	a4,a5,8000bf8e <tinst_tests_gpf+0xc34>
    8000bf8a:	4240106f          	j	8000d3ae <tinst_tests_gpf+0x2054>
    8000bf8e:	00024517          	auipc	a0,0x24
    8000bf92:	08250513          	addi	a0,a0,130 # 80030010 <__func__.0+0x320>
    8000bf96:	0f6210ef          	jal	8002d08c <printf>
    8000bf9a:	02900513          	li	a0,41
    8000bf9e:	5dd1f0ef          	jal	8002bd7a <putchar>
    8000bfa2:	4529                	li	a0,10
    8000bfa4:	5d71f0ef          	jal	8002bd7a <putchar>
    8000bfa8:	cc89                	beqz	s1,8000bfc2 <tinst_tests_gpf+0xc68>
    8000bfaa:	0004c797          	auipc	a5,0x4c
    8000bfae:	0677c783          	lbu	a5,103(a5) # 80058011 <excpt+0x1>
    8000bfb2:	c799                	beqz	a5,8000bfc0 <tinst_tests_gpf+0xc66>
    8000bfb4:	6418                	ld	a4,8(s0)
    8000bfb6:	47dd                	li	a5,23
    8000bfb8:	00f71463          	bne	a4,a5,8000bfc0 <tinst_tests_gpf+0xc66>
    8000bfbc:	20e0206f          	j	8000e1ca <tinst_tests_gpf+0x2e70>
    8000bfc0:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bfc2:	e4bf40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    8000bfc6:	001007b7          	lui	a5,0x100
    8000bfca:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bfce:	07b2                	slli	a5,a5,0xc
    8000bfd0:	2127a92f          	amoxor.w	s2,s2,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000bfd4:	00026617          	auipc	a2,0x26
    8000bfd8:	6d460613          	addi	a2,a2,1748 # 800326a8 <__func__.0+0x29b8>
    8000bfdc:	08200593          	li	a1,130
    8000bfe0:	00024517          	auipc	a0,0x24
    8000bfe4:	01050513          	addi	a0,a0,16 # 8002fff0 <__func__.0+0x300>
    8000bfe8:	0a4210ef          	jal	8002d08c <printf>
    8000bfec:	0004c797          	auipc	a5,0x4c
    8000bff0:	0257c783          	lbu	a5,37(a5) # 80058011 <excpt+0x1>
    8000bff4:	c399                	beqz	a5,8000bffa <tinst_tests_gpf+0xca0>
    8000bff6:	0020106f          	j	8000cff8 <tinst_tests_gpf+0x1c9e>
    8000bffa:	00024597          	auipc	a1,0x24
    8000bffe:	fce58593          	addi	a1,a1,-50 # 8002ffc8 <__func__.0+0x2d8>
    8000c002:	00024517          	auipc	a0,0x24
    8000c006:	00650513          	addi	a0,a0,6 # 80030008 <__func__.0+0x318>
    8000c00a:	082210ef          	jal	8002d08c <printf>
    8000c00e:	0004c797          	auipc	a5,0x4c
    8000c012:	0037c783          	lbu	a5,3(a5) # 80058011 <excpt+0x1>
    8000c016:	c799                	beqz	a5,8000c024 <tinst_tests_gpf+0xcca>
    8000c018:	6418                	ld	a4,8(s0)
    8000c01a:	47dd                	li	a5,23
    8000c01c:	00f71463          	bne	a4,a5,8000c024 <tinst_tests_gpf+0xcca>
    8000c020:	3e40106f          	j	8000d404 <tinst_tests_gpf+0x20aa>
    8000c024:	00024517          	auipc	a0,0x24
    8000c028:	fec50513          	addi	a0,a0,-20 # 80030010 <__func__.0+0x320>
    8000c02c:	060210ef          	jal	8002d08c <printf>
    8000c030:	02900513          	li	a0,41
    8000c034:	5471f0ef          	jal	8002bd7a <putchar>
    8000c038:	4529                	li	a0,10
    8000c03a:	5411f0ef          	jal	8002bd7a <putchar>
    8000c03e:	cc89                	beqz	s1,8000c058 <tinst_tests_gpf+0xcfe>
    8000c040:	0004c797          	auipc	a5,0x4c
    8000c044:	fd17c783          	lbu	a5,-47(a5) # 80058011 <excpt+0x1>
    8000c048:	c799                	beqz	a5,8000c056 <tinst_tests_gpf+0xcfc>
    8000c04a:	6418                	ld	a4,8(s0)
    8000c04c:	47dd                	li	a5,23
    8000c04e:	00f71463          	bne	a4,a5,8000c056 <tinst_tests_gpf+0xcfc>
    8000c052:	1e60206f          	j	8000e238 <tinst_tests_gpf+0x2ede>
    8000c056:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c058:	db5f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    8000c05c:	001007b7          	lui	a5,0x100
    8000c060:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c064:	07b2                	slli	a5,a5,0xc
    8000c066:	6127a92f          	amoand.w	s2,s2,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000c06a:	00026617          	auipc	a2,0x26
    8000c06e:	67e60613          	addi	a2,a2,1662 # 800326e8 <__func__.0+0x29f8>
    8000c072:	08200593          	li	a1,130
    8000c076:	00024517          	auipc	a0,0x24
    8000c07a:	f7a50513          	addi	a0,a0,-134 # 8002fff0 <__func__.0+0x300>
    8000c07e:	00e210ef          	jal	8002d08c <printf>
    8000c082:	0004c797          	auipc	a5,0x4c
    8000c086:	f8f7c783          	lbu	a5,-113(a5) # 80058011 <excpt+0x1>
    8000c08a:	c399                	beqz	a5,8000c090 <tinst_tests_gpf+0xd36>
    8000c08c:	01a0106f          	j	8000d0a6 <tinst_tests_gpf+0x1d4c>
    8000c090:	00024597          	auipc	a1,0x24
    8000c094:	f3858593          	addi	a1,a1,-200 # 8002ffc8 <__func__.0+0x2d8>
    8000c098:	00024517          	auipc	a0,0x24
    8000c09c:	f7050513          	addi	a0,a0,-144 # 80030008 <__func__.0+0x318>
    8000c0a0:	7ed200ef          	jal	8002d08c <printf>
    8000c0a4:	0004c797          	auipc	a5,0x4c
    8000c0a8:	f6d7c783          	lbu	a5,-147(a5) # 80058011 <excpt+0x1>
    8000c0ac:	c799                	beqz	a5,8000c0ba <tinst_tests_gpf+0xd60>
    8000c0ae:	6418                	ld	a4,8(s0)
    8000c0b0:	47dd                	li	a5,23
    8000c0b2:	00f71463          	bne	a4,a5,8000c0ba <tinst_tests_gpf+0xd60>
    8000c0b6:	4450106f          	j	8000dcfa <tinst_tests_gpf+0x29a0>
    8000c0ba:	00024517          	auipc	a0,0x24
    8000c0be:	f5650513          	addi	a0,a0,-170 # 80030010 <__func__.0+0x320>
    8000c0c2:	7cb200ef          	jal	8002d08c <printf>
    8000c0c6:	02900513          	li	a0,41
    8000c0ca:	4b11f0ef          	jal	8002bd7a <putchar>
    8000c0ce:	4529                	li	a0,10
    8000c0d0:	4ab1f0ef          	jal	8002bd7a <putchar>
    8000c0d4:	cc89                	beqz	s1,8000c0ee <tinst_tests_gpf+0xd94>
    8000c0d6:	0004c797          	auipc	a5,0x4c
    8000c0da:	f3b7c783          	lbu	a5,-197(a5) # 80058011 <excpt+0x1>
    8000c0de:	c799                	beqz	a5,8000c0ec <tinst_tests_gpf+0xd92>
    8000c0e0:	6418                	ld	a4,8(s0)
    8000c0e2:	47dd                	li	a5,23
    8000c0e4:	00f71463          	bne	a4,a5,8000c0ec <tinst_tests_gpf+0xd92>
    8000c0e8:	1920206f          	j	8000e27a <tinst_tests_gpf+0x2f20>
    8000c0ec:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c0ee:	d1ff40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    8000c0f2:	001007b7          	lui	a5,0x100
    8000c0f6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c0fa:	07b2                	slli	a5,a5,0xc
    8000c0fc:	4127a92f          	amoor.w	s2,s2,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000c100:	00026617          	auipc	a2,0x26
    8000c104:	62860613          	addi	a2,a2,1576 # 80032728 <__func__.0+0x2a38>
    8000c108:	08200593          	li	a1,130
    8000c10c:	00024517          	auipc	a0,0x24
    8000c110:	ee450513          	addi	a0,a0,-284 # 8002fff0 <__func__.0+0x300>
    8000c114:	779200ef          	jal	8002d08c <printf>
    8000c118:	0004c797          	auipc	a5,0x4c
    8000c11c:	ef97c783          	lbu	a5,-263(a5) # 80058011 <excpt+0x1>
    8000c120:	e399                	bnez	a5,8000c126 <tinst_tests_gpf+0xdcc>
    8000c122:	4b40106f          	j	8000d5d6 <tinst_tests_gpf+0x227c>
    8000c126:	6418                	ld	a4,8(s0)
    8000c128:	47dd                	li	a5,23
    8000c12a:	00024597          	auipc	a1,0x24
    8000c12e:	e9e58593          	addi	a1,a1,-354 # 8002ffc8 <__func__.0+0x2d8>
    8000c132:	00f71463          	bne	a4,a5,8000c13a <tinst_tests_gpf+0xde0>
    8000c136:	4540106f          	j	8000d58a <tinst_tests_gpf+0x2230>
    8000c13a:	00024517          	auipc	a0,0x24
    8000c13e:	ece50513          	addi	a0,a0,-306 # 80030008 <__func__.0+0x318>
    8000c142:	74b200ef          	jal	8002d08c <printf>
    8000c146:	0004c797          	auipc	a5,0x4c
    8000c14a:	ecb7c783          	lbu	a5,-309(a5) # 80058011 <excpt+0x1>
    8000c14e:	c799                	beqz	a5,8000c15c <tinst_tests_gpf+0xe02>
    8000c150:	6418                	ld	a4,8(s0)
    8000c152:	47dd                	li	a5,23
    8000c154:	00f71463          	bne	a4,a5,8000c15c <tinst_tests_gpf+0xe02>
    8000c158:	3e50106f          	j	8000dd3c <tinst_tests_gpf+0x29e2>
    8000c15c:	00024517          	auipc	a0,0x24
    8000c160:	eb450513          	addi	a0,a0,-332 # 80030010 <__func__.0+0x320>
    8000c164:	729200ef          	jal	8002d08c <printf>
    8000c168:	02900513          	li	a0,41
    8000c16c:	40f1f0ef          	jal	8002bd7a <putchar>
    8000c170:	4529                	li	a0,10
    8000c172:	4091f0ef          	jal	8002bd7a <putchar>
    8000c176:	cc89                	beqz	s1,8000c190 <tinst_tests_gpf+0xe36>
    8000c178:	0004c797          	auipc	a5,0x4c
    8000c17c:	e997c783          	lbu	a5,-359(a5) # 80058011 <excpt+0x1>
    8000c180:	c799                	beqz	a5,8000c18e <tinst_tests_gpf+0xe34>
    8000c182:	6418                	ld	a4,8(s0)
    8000c184:	47dd                	li	a5,23
    8000c186:	00f71463          	bne	a4,a5,8000c18e <tinst_tests_gpf+0xe34>
    8000c18a:	1620206f          	j	8000e2ec <tinst_tests_gpf+0x2f92>
    8000c18e:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c190:	c7df40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    8000c194:	001007b7          	lui	a5,0x100
    8000c198:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c19c:	07b2                	slli	a5,a5,0xc
    8000c19e:	8127a92f          	amomin.w	s2,s2,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000c1a2:	00026617          	auipc	a2,0x26
    8000c1a6:	5c660613          	addi	a2,a2,1478 # 80032768 <__func__.0+0x2a78>
    8000c1aa:	08200593          	li	a1,130
    8000c1ae:	00024517          	auipc	a0,0x24
    8000c1b2:	e4250513          	addi	a0,a0,-446 # 8002fff0 <__func__.0+0x300>
    8000c1b6:	6d7200ef          	jal	8002d08c <printf>
    8000c1ba:	0004c797          	auipc	a5,0x4c
    8000c1be:	e577c783          	lbu	a5,-425(a5) # 80058011 <excpt+0x1>
    8000c1c2:	e399                	bnez	a5,8000c1c8 <tinst_tests_gpf+0xe6e>
    8000c1c4:	4a40106f          	j	8000d668 <tinst_tests_gpf+0x230e>
    8000c1c8:	6418                	ld	a4,8(s0)
    8000c1ca:	47dd                	li	a5,23
    8000c1cc:	00024597          	auipc	a1,0x24
    8000c1d0:	dfc58593          	addi	a1,a1,-516 # 8002ffc8 <__func__.0+0x2d8>
    8000c1d4:	00f71463          	bne	a4,a5,8000c1dc <tinst_tests_gpf+0xe82>
    8000c1d8:	4440106f          	j	8000d61c <tinst_tests_gpf+0x22c2>
    8000c1dc:	00024517          	auipc	a0,0x24
    8000c1e0:	e2c50513          	addi	a0,a0,-468 # 80030008 <__func__.0+0x318>
    8000c1e4:	6a9200ef          	jal	8002d08c <printf>
    8000c1e8:	0004c797          	auipc	a5,0x4c
    8000c1ec:	e297c783          	lbu	a5,-471(a5) # 80058011 <excpt+0x1>
    8000c1f0:	c799                	beqz	a5,8000c1fe <tinst_tests_gpf+0xea4>
    8000c1f2:	6418                	ld	a4,8(s0)
    8000c1f4:	47dd                	li	a5,23
    8000c1f6:	00f71463          	bne	a4,a5,8000c1fe <tinst_tests_gpf+0xea4>
    8000c1fa:	3850106f          	j	8000dd7e <tinst_tests_gpf+0x2a24>
    8000c1fe:	00024517          	auipc	a0,0x24
    8000c202:	e1250513          	addi	a0,a0,-494 # 80030010 <__func__.0+0x320>
    8000c206:	687200ef          	jal	8002d08c <printf>
    8000c20a:	02900513          	li	a0,41
    8000c20e:	36d1f0ef          	jal	8002bd7a <putchar>
    8000c212:	4529                	li	a0,10
    8000c214:	3671f0ef          	jal	8002bd7a <putchar>
    8000c218:	cc89                	beqz	s1,8000c232 <tinst_tests_gpf+0xed8>
    8000c21a:	0004c797          	auipc	a5,0x4c
    8000c21e:	df77c783          	lbu	a5,-521(a5) # 80058011 <excpt+0x1>
    8000c222:	c799                	beqz	a5,8000c230 <tinst_tests_gpf+0xed6>
    8000c224:	6418                	ld	a4,8(s0)
    8000c226:	47dd                	li	a5,23
    8000c228:	00f71463          	bne	a4,a5,8000c230 <tinst_tests_gpf+0xed6>
    8000c22c:	1320206f          	j	8000e35e <tinst_tests_gpf+0x3004>
    8000c230:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c232:	bdbf40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    8000c236:	001007b7          	lui	a5,0x100
    8000c23a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c23e:	07b2                	slli	a5,a5,0xc
    8000c240:	a127a92f          	amomax.w	s2,s2,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000c244:	00026617          	auipc	a2,0x26
    8000c248:	56460613          	addi	a2,a2,1380 # 800327a8 <__func__.0+0x2ab8>
    8000c24c:	08200593          	li	a1,130
    8000c250:	00024517          	auipc	a0,0x24
    8000c254:	da050513          	addi	a0,a0,-608 # 8002fff0 <__func__.0+0x300>
    8000c258:	635200ef          	jal	8002d08c <printf>
    8000c25c:	0004c797          	auipc	a5,0x4c
    8000c260:	db57c783          	lbu	a5,-587(a5) # 80058011 <excpt+0x1>
    8000c264:	e399                	bnez	a5,8000c26a <tinst_tests_gpf+0xf10>
    8000c266:	4980106f          	j	8000d6fe <tinst_tests_gpf+0x23a4>
    8000c26a:	6418                	ld	a4,8(s0)
    8000c26c:	47dd                	li	a5,23
    8000c26e:	00024597          	auipc	a1,0x24
    8000c272:	d5a58593          	addi	a1,a1,-678 # 8002ffc8 <__func__.0+0x2d8>
    8000c276:	00f71463          	bne	a4,a5,8000c27e <tinst_tests_gpf+0xf24>
    8000c27a:	4360106f          	j	8000d6b0 <tinst_tests_gpf+0x2356>
    8000c27e:	00024517          	auipc	a0,0x24
    8000c282:	d8a50513          	addi	a0,a0,-630 # 80030008 <__func__.0+0x318>
    8000c286:	607200ef          	jal	8002d08c <printf>
    8000c28a:	0004c797          	auipc	a5,0x4c
    8000c28e:	d877c783          	lbu	a5,-633(a5) # 80058011 <excpt+0x1>
    8000c292:	c799                	beqz	a5,8000c2a0 <tinst_tests_gpf+0xf46>
    8000c294:	6418                	ld	a4,8(s0)
    8000c296:	47dd                	li	a5,23
    8000c298:	00f71463          	bne	a4,a5,8000c2a0 <tinst_tests_gpf+0xf46>
    8000c29c:	3250106f          	j	8000ddc0 <tinst_tests_gpf+0x2a66>
    8000c2a0:	00024517          	auipc	a0,0x24
    8000c2a4:	d7050513          	addi	a0,a0,-656 # 80030010 <__func__.0+0x320>
    8000c2a8:	5e5200ef          	jal	8002d08c <printf>
    8000c2ac:	02900513          	li	a0,41
    8000c2b0:	2cb1f0ef          	jal	8002bd7a <putchar>
    8000c2b4:	4529                	li	a0,10
    8000c2b6:	2c51f0ef          	jal	8002bd7a <putchar>
    8000c2ba:	cc89                	beqz	s1,8000c2d4 <tinst_tests_gpf+0xf7a>
    8000c2bc:	0004c797          	auipc	a5,0x4c
    8000c2c0:	d557c783          	lbu	a5,-683(a5) # 80058011 <excpt+0x1>
    8000c2c4:	c799                	beqz	a5,8000c2d2 <tinst_tests_gpf+0xf78>
    8000c2c6:	6418                	ld	a4,8(s0)
    8000c2c8:	47dd                	li	a5,23
    8000c2ca:	00f71463          	bne	a4,a5,8000c2d2 <tinst_tests_gpf+0xf78>
    8000c2ce:	0d20206f          	j	8000e3a0 <tinst_tests_gpf+0x3046>
    8000c2d2:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c2d4:	b39f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    8000c2d8:	001007b7          	lui	a5,0x100
    8000c2dc:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c2e0:	07b2                	slli	a5,a5,0xc
    8000c2e2:	c127a92f          	amominu.w	s2,s2,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000c2e6:	00026617          	auipc	a2,0x26
    8000c2ea:	50260613          	addi	a2,a2,1282 # 800327e8 <__func__.0+0x2af8>
    8000c2ee:	08200593          	li	a1,130
    8000c2f2:	00024517          	auipc	a0,0x24
    8000c2f6:	cfe50513          	addi	a0,a0,-770 # 8002fff0 <__func__.0+0x300>
    8000c2fa:	593200ef          	jal	8002d08c <printf>
    8000c2fe:	0004c797          	auipc	a5,0x4c
    8000c302:	d137c783          	lbu	a5,-749(a5) # 80058011 <excpt+0x1>
    8000c306:	e399                	bnez	a5,8000c30c <tinst_tests_gpf+0xfb2>
    8000c308:	4920106f          	j	8000d79a <tinst_tests_gpf+0x2440>
    8000c30c:	6418                	ld	a4,8(s0)
    8000c30e:	47dd                	li	a5,23
    8000c310:	00024597          	auipc	a1,0x24
    8000c314:	cb858593          	addi	a1,a1,-840 # 8002ffc8 <__func__.0+0x2d8>
    8000c318:	00f71463          	bne	a4,a5,8000c320 <tinst_tests_gpf+0xfc6>
    8000c31c:	4300106f          	j	8000d74c <tinst_tests_gpf+0x23f2>
    8000c320:	00024517          	auipc	a0,0x24
    8000c324:	ce850513          	addi	a0,a0,-792 # 80030008 <__func__.0+0x318>
    8000c328:	565200ef          	jal	8002d08c <printf>
    8000c32c:	0004c797          	auipc	a5,0x4c
    8000c330:	ce57c783          	lbu	a5,-795(a5) # 80058011 <excpt+0x1>
    8000c334:	c799                	beqz	a5,8000c342 <tinst_tests_gpf+0xfe8>
    8000c336:	6418                	ld	a4,8(s0)
    8000c338:	47dd                	li	a5,23
    8000c33a:	00f71463          	bne	a4,a5,8000c342 <tinst_tests_gpf+0xfe8>
    8000c33e:	2c50106f          	j	8000de02 <tinst_tests_gpf+0x2aa8>
    8000c342:	00024517          	auipc	a0,0x24
    8000c346:	cce50513          	addi	a0,a0,-818 # 80030010 <__func__.0+0x320>
    8000c34a:	543200ef          	jal	8002d08c <printf>
    8000c34e:	02900513          	li	a0,41
    8000c352:	2291f0ef          	jal	8002bd7a <putchar>
    8000c356:	4529                	li	a0,10
    8000c358:	2231f0ef          	jal	8002bd7a <putchar>
    8000c35c:	cc89                	beqz	s1,8000c376 <tinst_tests_gpf+0x101c>
    8000c35e:	0004c797          	auipc	a5,0x4c
    8000c362:	cb37c783          	lbu	a5,-845(a5) # 80058011 <excpt+0x1>
    8000c366:	c799                	beqz	a5,8000c374 <tinst_tests_gpf+0x101a>
    8000c368:	6418                	ld	a4,8(s0)
    8000c36a:	47dd                	li	a5,23
    8000c36c:	00f71463          	bne	a4,a5,8000c374 <tinst_tests_gpf+0x101a>
    8000c370:	0720206f          	j	8000e3e2 <tinst_tests_gpf+0x3088>
    8000c374:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c376:	a97f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    8000c37a:	001007b7          	lui	a5,0x100
    8000c37e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c382:	07b2                	slli	a5,a5,0xc
    8000c384:	e127a92f          	amomaxu.w	s2,s2,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000c388:	00026617          	auipc	a2,0x26
    8000c38c:	4a860613          	addi	a2,a2,1192 # 80032830 <__func__.0+0x2b40>
    8000c390:	08200593          	li	a1,130
    8000c394:	00024517          	auipc	a0,0x24
    8000c398:	c5c50513          	addi	a0,a0,-932 # 8002fff0 <__func__.0+0x300>
    8000c39c:	4f1200ef          	jal	8002d08c <printf>
    8000c3a0:	0004c797          	auipc	a5,0x4c
    8000c3a4:	c717c783          	lbu	a5,-911(a5) # 80058011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    8000c3a8:	1902                	slli	s2,s2,0x20
    8000c3aa:	02095913          	srli	s2,s2,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000c3ae:	e399                	bnez	a5,8000c3b4 <tinst_tests_gpf+0x105a>
    8000c3b0:	4860106f          	j	8000d836 <tinst_tests_gpf+0x24dc>
    8000c3b4:	6418                	ld	a4,8(s0)
    8000c3b6:	47dd                	li	a5,23
    8000c3b8:	00024597          	auipc	a1,0x24
    8000c3bc:	c1058593          	addi	a1,a1,-1008 # 8002ffc8 <__func__.0+0x2d8>
    8000c3c0:	00f71463          	bne	a4,a5,8000c3c8 <tinst_tests_gpf+0x106e>
    8000c3c4:	4240106f          	j	8000d7e8 <tinst_tests_gpf+0x248e>
    8000c3c8:	00024517          	auipc	a0,0x24
    8000c3cc:	c4050513          	addi	a0,a0,-960 # 80030008 <__func__.0+0x318>
    8000c3d0:	4bd200ef          	jal	8002d08c <printf>
    8000c3d4:	0004c797          	auipc	a5,0x4c
    8000c3d8:	c3d7c783          	lbu	a5,-963(a5) # 80058011 <excpt+0x1>
    8000c3dc:	c799                	beqz	a5,8000c3ea <tinst_tests_gpf+0x1090>
    8000c3de:	6418                	ld	a4,8(s0)
    8000c3e0:	47dd                	li	a5,23
    8000c3e2:	00f71463          	bne	a4,a5,8000c3ea <tinst_tests_gpf+0x1090>
    8000c3e6:	25f0106f          	j	8000de44 <tinst_tests_gpf+0x2aea>
    8000c3ea:	00024517          	auipc	a0,0x24
    8000c3ee:	c2650513          	addi	a0,a0,-986 # 80030010 <__func__.0+0x320>
    8000c3f2:	49b200ef          	jal	8002d08c <printf>
    8000c3f6:	02900513          	li	a0,41
    8000c3fa:	1811f0ef          	jal	8002bd7a <putchar>
    8000c3fe:	4529                	li	a0,10
    8000c400:	17b1f0ef          	jal	8002bd7a <putchar>
    8000c404:	cc89                	beqz	s1,8000c41e <tinst_tests_gpf+0x10c4>
    8000c406:	0004c797          	auipc	a5,0x4c
    8000c40a:	c0b7c783          	lbu	a5,-1013(a5) # 80058011 <excpt+0x1>
    8000c40e:	c799                	beqz	a5,8000c41c <tinst_tests_gpf+0x10c2>
    8000c410:	6418                	ld	a4,8(s0)
    8000c412:	47dd                	li	a5,23
    8000c414:	00f71463          	bne	a4,a5,8000c41c <tinst_tests_gpf+0x10c2>
    8000c418:	00c0206f          	j	8000e424 <tinst_tests_gpf+0x30ca>
    8000c41c:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c41e:	9eff40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    8000c422:	001007b7          	lui	a5,0x100
    8000c426:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c42a:	07b2                	slli	a5,a5,0xc
    8000c42c:	0927b92f          	amoswap.d	s2,s2,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000c430:	00026617          	auipc	a2,0x26
    8000c434:	44860613          	addi	a2,a2,1096 # 80032878 <__func__.0+0x2b88>
    8000c438:	08200593          	li	a1,130
    8000c43c:	00024517          	auipc	a0,0x24
    8000c440:	bb450513          	addi	a0,a0,-1100 # 8002fff0 <__func__.0+0x300>
    8000c444:	449200ef          	jal	8002d08c <printf>
    8000c448:	0004c797          	auipc	a5,0x4c
    8000c44c:	bc97c783          	lbu	a5,-1079(a5) # 80058011 <excpt+0x1>
    8000c450:	e399                	bnez	a5,8000c456 <tinst_tests_gpf+0x10fc>
    8000c452:	4800106f          	j	8000d8d2 <tinst_tests_gpf+0x2578>
    8000c456:	6418                	ld	a4,8(s0)
    8000c458:	47dd                	li	a5,23
    8000c45a:	00024597          	auipc	a1,0x24
    8000c45e:	b6e58593          	addi	a1,a1,-1170 # 8002ffc8 <__func__.0+0x2d8>
    8000c462:	00f71463          	bne	a4,a5,8000c46a <tinst_tests_gpf+0x1110>
    8000c466:	41e0106f          	j	8000d884 <tinst_tests_gpf+0x252a>
    8000c46a:	00024517          	auipc	a0,0x24
    8000c46e:	b9e50513          	addi	a0,a0,-1122 # 80030008 <__func__.0+0x318>
    8000c472:	41b200ef          	jal	8002d08c <printf>
    8000c476:	0004c797          	auipc	a5,0x4c
    8000c47a:	b9b7c783          	lbu	a5,-1125(a5) # 80058011 <excpt+0x1>
    8000c47e:	c799                	beqz	a5,8000c48c <tinst_tests_gpf+0x1132>
    8000c480:	6418                	ld	a4,8(s0)
    8000c482:	47dd                	li	a5,23
    8000c484:	00f71463          	bne	a4,a5,8000c48c <tinst_tests_gpf+0x1132>
    8000c488:	1ff0106f          	j	8000de86 <tinst_tests_gpf+0x2b2c>
    8000c48c:	00024517          	auipc	a0,0x24
    8000c490:	b8450513          	addi	a0,a0,-1148 # 80030010 <__func__.0+0x320>
    8000c494:	3f9200ef          	jal	8002d08c <printf>
    8000c498:	02900513          	li	a0,41
    8000c49c:	0df1f0ef          	jal	8002bd7a <putchar>
    8000c4a0:	4529                	li	a0,10
    8000c4a2:	0d91f0ef          	jal	8002bd7a <putchar>
    8000c4a6:	cc89                	beqz	s1,8000c4c0 <tinst_tests_gpf+0x1166>
    8000c4a8:	0004c797          	auipc	a5,0x4c
    8000c4ac:	b697c783          	lbu	a5,-1175(a5) # 80058011 <excpt+0x1>
    8000c4b0:	c799                	beqz	a5,8000c4be <tinst_tests_gpf+0x1164>
    8000c4b2:	6418                	ld	a4,8(s0)
    8000c4b4:	47dd                	li	a5,23
    8000c4b6:	00f71463          	bne	a4,a5,8000c4be <tinst_tests_gpf+0x1164>
    8000c4ba:	7ad0106f          	j	8000e466 <tinst_tests_gpf+0x310c>
    8000c4be:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c4c0:	94df40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8000c4c4:	001007b7          	lui	a5,0x100
    8000c4c8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c4cc:	07b2                	slli	a5,a5,0xc
    8000c4ce:	0127b92f          	amoadd.d	s2,s2,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000c4d2:	00026617          	auipc	a2,0x26
    8000c4d6:	3ee60613          	addi	a2,a2,1006 # 800328c0 <__func__.0+0x2bd0>
    8000c4da:	08200593          	li	a1,130
    8000c4de:	00024517          	auipc	a0,0x24
    8000c4e2:	b1250513          	addi	a0,a0,-1262 # 8002fff0 <__func__.0+0x300>
    8000c4e6:	3a7200ef          	jal	8002d08c <printf>
    8000c4ea:	0004c797          	auipc	a5,0x4c
    8000c4ee:	b277c783          	lbu	a5,-1241(a5) # 80058011 <excpt+0x1>
    8000c4f2:	e399                	bnez	a5,8000c4f8 <tinst_tests_gpf+0x119e>
    8000c4f4:	47a0106f          	j	8000d96e <tinst_tests_gpf+0x2614>
    8000c4f8:	6418                	ld	a4,8(s0)
    8000c4fa:	47dd                	li	a5,23
    8000c4fc:	00024597          	auipc	a1,0x24
    8000c500:	acc58593          	addi	a1,a1,-1332 # 8002ffc8 <__func__.0+0x2d8>
    8000c504:	00f71463          	bne	a4,a5,8000c50c <tinst_tests_gpf+0x11b2>
    8000c508:	4180106f          	j	8000d920 <tinst_tests_gpf+0x25c6>
    8000c50c:	00024517          	auipc	a0,0x24
    8000c510:	afc50513          	addi	a0,a0,-1284 # 80030008 <__func__.0+0x318>
    8000c514:	379200ef          	jal	8002d08c <printf>
    8000c518:	0004c797          	auipc	a5,0x4c
    8000c51c:	af97c783          	lbu	a5,-1287(a5) # 80058011 <excpt+0x1>
    8000c520:	c799                	beqz	a5,8000c52e <tinst_tests_gpf+0x11d4>
    8000c522:	6418                	ld	a4,8(s0)
    8000c524:	47dd                	li	a5,23
    8000c526:	00f71463          	bne	a4,a5,8000c52e <tinst_tests_gpf+0x11d4>
    8000c52a:	19f0106f          	j	8000dec8 <tinst_tests_gpf+0x2b6e>
    8000c52e:	00024517          	auipc	a0,0x24
    8000c532:	ae250513          	addi	a0,a0,-1310 # 80030010 <__func__.0+0x320>
    8000c536:	357200ef          	jal	8002d08c <printf>
    8000c53a:	02900513          	li	a0,41
    8000c53e:	03d1f0ef          	jal	8002bd7a <putchar>
    8000c542:	4529                	li	a0,10
    8000c544:	0371f0ef          	jal	8002bd7a <putchar>
    8000c548:	cc89                	beqz	s1,8000c562 <tinst_tests_gpf+0x1208>
    8000c54a:	0004c797          	auipc	a5,0x4c
    8000c54e:	ac77c783          	lbu	a5,-1337(a5) # 80058011 <excpt+0x1>
    8000c552:	c799                	beqz	a5,8000c560 <tinst_tests_gpf+0x1206>
    8000c554:	6418                	ld	a4,8(s0)
    8000c556:	47dd                	li	a5,23
    8000c558:	00f71463          	bne	a4,a5,8000c560 <tinst_tests_gpf+0x1206>
    8000c55c:	74d0106f          	j	8000e4a8 <tinst_tests_gpf+0x314e>
    8000c560:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c562:	8abf40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    8000c566:	001007b7          	lui	a5,0x100
    8000c56a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c56e:	07b2                	slli	a5,a5,0xc
    8000c570:	2127b92f          	amoxor.d	s2,s2,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000c574:	00026617          	auipc	a2,0x26
    8000c578:	38c60613          	addi	a2,a2,908 # 80032900 <__func__.0+0x2c10>
    8000c57c:	08200593          	li	a1,130
    8000c580:	00024517          	auipc	a0,0x24
    8000c584:	a7050513          	addi	a0,a0,-1424 # 8002fff0 <__func__.0+0x300>
    8000c588:	305200ef          	jal	8002d08c <printf>
    8000c58c:	0004c797          	auipc	a5,0x4c
    8000c590:	a857c783          	lbu	a5,-1403(a5) # 80058011 <excpt+0x1>
    8000c594:	e399                	bnez	a5,8000c59a <tinst_tests_gpf+0x1240>
    8000c596:	4620106f          	j	8000d9f8 <tinst_tests_gpf+0x269e>
    8000c59a:	6418                	ld	a4,8(s0)
    8000c59c:	47dd                	li	a5,23
    8000c59e:	00024597          	auipc	a1,0x24
    8000c5a2:	a2a58593          	addi	a1,a1,-1494 # 8002ffc8 <__func__.0+0x2d8>
    8000c5a6:	00f71463          	bne	a4,a5,8000c5ae <tinst_tests_gpf+0x1254>
    8000c5aa:	4000106f          	j	8000d9aa <tinst_tests_gpf+0x2650>
    8000c5ae:	00024517          	auipc	a0,0x24
    8000c5b2:	a5a50513          	addi	a0,a0,-1446 # 80030008 <__func__.0+0x318>
    8000c5b6:	2d7200ef          	jal	8002d08c <printf>
    8000c5ba:	0004c797          	auipc	a5,0x4c
    8000c5be:	a577c783          	lbu	a5,-1449(a5) # 80058011 <excpt+0x1>
    8000c5c2:	c799                	beqz	a5,8000c5d0 <tinst_tests_gpf+0x1276>
    8000c5c4:	6418                	ld	a4,8(s0)
    8000c5c6:	47dd                	li	a5,23
    8000c5c8:	00f71463          	bne	a4,a5,8000c5d0 <tinst_tests_gpf+0x1276>
    8000c5cc:	13f0106f          	j	8000df0a <tinst_tests_gpf+0x2bb0>
    8000c5d0:	00024517          	auipc	a0,0x24
    8000c5d4:	a4050513          	addi	a0,a0,-1472 # 80030010 <__func__.0+0x320>
    8000c5d8:	2b5200ef          	jal	8002d08c <printf>
    8000c5dc:	02900513          	li	a0,41
    8000c5e0:	79a1f0ef          	jal	8002bd7a <putchar>
    8000c5e4:	4529                	li	a0,10
    8000c5e6:	7941f0ef          	jal	8002bd7a <putchar>
    8000c5ea:	cc89                	beqz	s1,8000c604 <tinst_tests_gpf+0x12aa>
    8000c5ec:	0004c797          	auipc	a5,0x4c
    8000c5f0:	a257c783          	lbu	a5,-1499(a5) # 80058011 <excpt+0x1>
    8000c5f4:	c799                	beqz	a5,8000c602 <tinst_tests_gpf+0x12a8>
    8000c5f6:	6418                	ld	a4,8(s0)
    8000c5f8:	47dd                	li	a5,23
    8000c5fa:	00f71463          	bne	a4,a5,8000c602 <tinst_tests_gpf+0x12a8>
    8000c5fe:	6ed0106f          	j	8000e4ea <tinst_tests_gpf+0x3190>
    8000c602:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c604:	809f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8000c608:	001007b7          	lui	a5,0x100
    8000c60c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c610:	07b2                	slli	a5,a5,0xc
    8000c612:	6127b92f          	amoand.d	s2,s2,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000c616:	00026617          	auipc	a2,0x26
    8000c61a:	32a60613          	addi	a2,a2,810 # 80032940 <__func__.0+0x2c50>
    8000c61e:	08200593          	li	a1,130
    8000c622:	00024517          	auipc	a0,0x24
    8000c626:	9ce50513          	addi	a0,a0,-1586 # 8002fff0 <__func__.0+0x300>
    8000c62a:	263200ef          	jal	8002d08c <printf>
    8000c62e:	0004c797          	auipc	a5,0x4c
    8000c632:	9e37c783          	lbu	a5,-1565(a5) # 80058011 <excpt+0x1>
    8000c636:	e399                	bnez	a5,8000c63c <tinst_tests_gpf+0x12e2>
    8000c638:	44a0106f          	j	8000da82 <tinst_tests_gpf+0x2728>
    8000c63c:	6418                	ld	a4,8(s0)
    8000c63e:	47dd                	li	a5,23
    8000c640:	00024597          	auipc	a1,0x24
    8000c644:	98858593          	addi	a1,a1,-1656 # 8002ffc8 <__func__.0+0x2d8>
    8000c648:	00f71463          	bne	a4,a5,8000c650 <tinst_tests_gpf+0x12f6>
    8000c64c:	3e80106f          	j	8000da34 <tinst_tests_gpf+0x26da>
    8000c650:	00024517          	auipc	a0,0x24
    8000c654:	9b850513          	addi	a0,a0,-1608 # 80030008 <__func__.0+0x318>
    8000c658:	235200ef          	jal	8002d08c <printf>
    8000c65c:	0004c797          	auipc	a5,0x4c
    8000c660:	9b57c783          	lbu	a5,-1611(a5) # 80058011 <excpt+0x1>
    8000c664:	c799                	beqz	a5,8000c672 <tinst_tests_gpf+0x1318>
    8000c666:	6418                	ld	a4,8(s0)
    8000c668:	47dd                	li	a5,23
    8000c66a:	00f71463          	bne	a4,a5,8000c672 <tinst_tests_gpf+0x1318>
    8000c66e:	0df0106f          	j	8000df4c <tinst_tests_gpf+0x2bf2>
    8000c672:	00024517          	auipc	a0,0x24
    8000c676:	99e50513          	addi	a0,a0,-1634 # 80030010 <__func__.0+0x320>
    8000c67a:	213200ef          	jal	8002d08c <printf>
    8000c67e:	02900513          	li	a0,41
    8000c682:	6f81f0ef          	jal	8002bd7a <putchar>
    8000c686:	4529                	li	a0,10
    8000c688:	6f21f0ef          	jal	8002bd7a <putchar>
    8000c68c:	cc89                	beqz	s1,8000c6a6 <tinst_tests_gpf+0x134c>
    8000c68e:	0004c797          	auipc	a5,0x4c
    8000c692:	9837c783          	lbu	a5,-1661(a5) # 80058011 <excpt+0x1>
    8000c696:	c799                	beqz	a5,8000c6a4 <tinst_tests_gpf+0x134a>
    8000c698:	6418                	ld	a4,8(s0)
    8000c69a:	47dd                	li	a5,23
    8000c69c:	00f71463          	bne	a4,a5,8000c6a4 <tinst_tests_gpf+0x134a>
    8000c6a0:	68d0106f          	j	8000e52c <tinst_tests_gpf+0x31d2>
    8000c6a4:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c6a6:	f66f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8000c6aa:	001007b7          	lui	a5,0x100
    8000c6ae:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c6b2:	07b2                	slli	a5,a5,0xc
    8000c6b4:	4127b92f          	amoor.d	s2,s2,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000c6b8:	00026617          	auipc	a2,0x26
    8000c6bc:	2c860613          	addi	a2,a2,712 # 80032980 <__func__.0+0x2c90>
    8000c6c0:	08200593          	li	a1,130
    8000c6c4:	00024517          	auipc	a0,0x24
    8000c6c8:	92c50513          	addi	a0,a0,-1748 # 8002fff0 <__func__.0+0x300>
    8000c6cc:	1c1200ef          	jal	8002d08c <printf>
    8000c6d0:	0004c797          	auipc	a5,0x4c
    8000c6d4:	9417c783          	lbu	a5,-1727(a5) # 80058011 <excpt+0x1>
    8000c6d8:	e399                	bnez	a5,8000c6de <tinst_tests_gpf+0x1384>
    8000c6da:	4360106f          	j	8000db10 <tinst_tests_gpf+0x27b6>
    8000c6de:	6418                	ld	a4,8(s0)
    8000c6e0:	47dd                	li	a5,23
    8000c6e2:	00024597          	auipc	a1,0x24
    8000c6e6:	8e658593          	addi	a1,a1,-1818 # 8002ffc8 <__func__.0+0x2d8>
    8000c6ea:	00f71463          	bne	a4,a5,8000c6f2 <tinst_tests_gpf+0x1398>
    8000c6ee:	3d40106f          	j	8000dac2 <tinst_tests_gpf+0x2768>
    8000c6f2:	00024517          	auipc	a0,0x24
    8000c6f6:	91650513          	addi	a0,a0,-1770 # 80030008 <__func__.0+0x318>
    8000c6fa:	193200ef          	jal	8002d08c <printf>
    8000c6fe:	0004c797          	auipc	a5,0x4c
    8000c702:	9137c783          	lbu	a5,-1773(a5) # 80058011 <excpt+0x1>
    8000c706:	c799                	beqz	a5,8000c714 <tinst_tests_gpf+0x13ba>
    8000c708:	6418                	ld	a4,8(s0)
    8000c70a:	47dd                	li	a5,23
    8000c70c:	00f71463          	bne	a4,a5,8000c714 <tinst_tests_gpf+0x13ba>
    8000c710:	6a50106f          	j	8000e5b4 <tinst_tests_gpf+0x325a>
    8000c714:	00024517          	auipc	a0,0x24
    8000c718:	8fc50513          	addi	a0,a0,-1796 # 80030010 <__func__.0+0x320>
    8000c71c:	171200ef          	jal	8002d08c <printf>
    8000c720:	02900513          	li	a0,41
    8000c724:	6561f0ef          	jal	8002bd7a <putchar>
    8000c728:	4529                	li	a0,10
    8000c72a:	6501f0ef          	jal	8002bd7a <putchar>
    8000c72e:	cc89                	beqz	s1,8000c748 <tinst_tests_gpf+0x13ee>
    8000c730:	0004c797          	auipc	a5,0x4c
    8000c734:	8e17c783          	lbu	a5,-1823(a5) # 80058011 <excpt+0x1>
    8000c738:	c799                	beqz	a5,8000c746 <tinst_tests_gpf+0x13ec>
    8000c73a:	6418                	ld	a4,8(s0)
    8000c73c:	47dd                	li	a5,23
    8000c73e:	00f71463          	bne	a4,a5,8000c746 <tinst_tests_gpf+0x13ec>
    8000c742:	62f0106f          	j	8000e570 <tinst_tests_gpf+0x3216>
    8000c746:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c748:	ec4f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8000c74c:	001007b7          	lui	a5,0x100
    8000c750:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c754:	07b2                	slli	a5,a5,0xc
    8000c756:	8127b92f          	amomin.d	s2,s2,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000c75a:	00026617          	auipc	a2,0x26
    8000c75e:	26660613          	addi	a2,a2,614 # 800329c0 <__func__.0+0x2cd0>
    8000c762:	08200593          	li	a1,130
    8000c766:	00024517          	auipc	a0,0x24
    8000c76a:	88a50513          	addi	a0,a0,-1910 # 8002fff0 <__func__.0+0x300>
    8000c76e:	11f200ef          	jal	8002d08c <printf>
    8000c772:	0004c797          	auipc	a5,0x4c
    8000c776:	89f7c783          	lbu	a5,-1889(a5) # 80058011 <excpt+0x1>
    8000c77a:	e399                	bnez	a5,8000c780 <tinst_tests_gpf+0x1426>
    8000c77c:	4220106f          	j	8000db9e <tinst_tests_gpf+0x2844>
    8000c780:	6418                	ld	a4,8(s0)
    8000c782:	47dd                	li	a5,23
    8000c784:	00024597          	auipc	a1,0x24
    8000c788:	84458593          	addi	a1,a1,-1980 # 8002ffc8 <__func__.0+0x2d8>
    8000c78c:	00f71463          	bne	a4,a5,8000c794 <tinst_tests_gpf+0x143a>
    8000c790:	3c00106f          	j	8000db50 <tinst_tests_gpf+0x27f6>
    8000c794:	00024517          	auipc	a0,0x24
    8000c798:	87450513          	addi	a0,a0,-1932 # 80030008 <__func__.0+0x318>
    8000c79c:	0f1200ef          	jal	8002d08c <printf>
    8000c7a0:	0004c797          	auipc	a5,0x4c
    8000c7a4:	8717c783          	lbu	a5,-1935(a5) # 80058011 <excpt+0x1>
    8000c7a8:	c799                	beqz	a5,8000c7b6 <tinst_tests_gpf+0x145c>
    8000c7aa:	6418                	ld	a4,8(s0)
    8000c7ac:	47dd                	li	a5,23
    8000c7ae:	00f71463          	bne	a4,a5,8000c7b6 <tinst_tests_gpf+0x145c>
    8000c7b2:	6470106f          	j	8000e5f8 <tinst_tests_gpf+0x329e>
    8000c7b6:	00024517          	auipc	a0,0x24
    8000c7ba:	85a50513          	addi	a0,a0,-1958 # 80030010 <__func__.0+0x320>
    8000c7be:	0cf200ef          	jal	8002d08c <printf>
    8000c7c2:	02900513          	li	a0,41
    8000c7c6:	5b41f0ef          	jal	8002bd7a <putchar>
    8000c7ca:	4529                	li	a0,10
    8000c7cc:	5ae1f0ef          	jal	8002bd7a <putchar>
    8000c7d0:	c889                	beqz	s1,8000c7e2 <tinst_tests_gpf+0x1488>
    8000c7d2:	0004c797          	auipc	a5,0x4c
    8000c7d6:	83f7c783          	lbu	a5,-1985(a5) # 80058011 <excpt+0x1>
    8000c7da:	c399                	beqz	a5,8000c7e0 <tinst_tests_gpf+0x1486>
    8000c7dc:	7b20106f          	j	8000df8e <tinst_tests_gpf+0x2c34>
    8000c7e0:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c7e2:	e2af40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8000c7e6:	001007b7          	lui	a5,0x100
    8000c7ea:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c7ee:	07b2                	slli	a5,a5,0xc
    8000c7f0:	a127b92f          	amomax.d	s2,s2,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000c7f4:	00026617          	auipc	a2,0x26
    8000c7f8:	20c60613          	addi	a2,a2,524 # 80032a00 <__func__.0+0x2d10>
    8000c7fc:	08200593          	li	a1,130
    8000c800:	00023517          	auipc	a0,0x23
    8000c804:	7f050513          	addi	a0,a0,2032 # 8002fff0 <__func__.0+0x300>
    8000c808:	085200ef          	jal	8002d08c <printf>
    8000c80c:	0004c797          	auipc	a5,0x4c
    8000c810:	8057c783          	lbu	a5,-2043(a5) # 80058011 <excpt+0x1>
    8000c814:	e399                	bnez	a5,8000c81a <tinst_tests_gpf+0x14c0>
    8000c816:	4240106f          	j	8000dc3a <tinst_tests_gpf+0x28e0>
    8000c81a:	6418                	ld	a4,8(s0)
    8000c81c:	47dd                	li	a5,23
    8000c81e:	00023597          	auipc	a1,0x23
    8000c822:	7aa58593          	addi	a1,a1,1962 # 8002ffc8 <__func__.0+0x2d8>
    8000c826:	00f71463          	bne	a4,a5,8000c82e <tinst_tests_gpf+0x14d4>
    8000c82a:	3c20106f          	j	8000dbec <tinst_tests_gpf+0x2892>
    8000c82e:	00023517          	auipc	a0,0x23
    8000c832:	7da50513          	addi	a0,a0,2010 # 80030008 <__func__.0+0x318>
    8000c836:	057200ef          	jal	8002d08c <printf>
    8000c83a:	0004b797          	auipc	a5,0x4b
    8000c83e:	7d77c783          	lbu	a5,2007(a5) # 80058011 <excpt+0x1>
    8000c842:	c799                	beqz	a5,8000c850 <tinst_tests_gpf+0x14f6>
    8000c844:	6418                	ld	a4,8(s0)
    8000c846:	47dd                	li	a5,23
    8000c848:	00f71463          	bne	a4,a5,8000c850 <tinst_tests_gpf+0x14f6>
    8000c84c:	5f10106f          	j	8000e63c <tinst_tests_gpf+0x32e2>
    8000c850:	00023517          	auipc	a0,0x23
    8000c854:	7c050513          	addi	a0,a0,1984 # 80030010 <__func__.0+0x320>
    8000c858:	035200ef          	jal	8002d08c <printf>
    8000c85c:	02900513          	li	a0,41
    8000c860:	51a1f0ef          	jal	8002bd7a <putchar>
    8000c864:	4529                	li	a0,10
    8000c866:	5141f0ef          	jal	8002bd7a <putchar>
    8000c86a:	c889                	beqz	s1,8000c87c <tinst_tests_gpf+0x1522>
    8000c86c:	0004b797          	auipc	a5,0x4b
    8000c870:	7a57c783          	lbu	a5,1957(a5) # 80058011 <excpt+0x1>
    8000c874:	c399                	beqz	a5,8000c87a <tinst_tests_gpf+0x1520>
    8000c876:	7660106f          	j	8000dfdc <tinst_tests_gpf+0x2c82>
    8000c87a:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c87c:	d90f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8000c880:	001007b7          	lui	a5,0x100
    8000c884:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c888:	07b2                	slli	a5,a5,0xc
    8000c88a:	c127b92f          	amominu.d	s2,s2,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000c88e:	00026617          	auipc	a2,0x26
    8000c892:	1b260613          	addi	a2,a2,434 # 80032a40 <__func__.0+0x2d50>
    8000c896:	08200593          	li	a1,130
    8000c89a:	00023517          	auipc	a0,0x23
    8000c89e:	75650513          	addi	a0,a0,1878 # 8002fff0 <__func__.0+0x300>
    8000c8a2:	7ea200ef          	jal	8002d08c <printf>
    8000c8a6:	0004b797          	auipc	a5,0x4b
    8000c8aa:	76b7c783          	lbu	a5,1899(a5) # 80058011 <excpt+0x1>
    8000c8ae:	e399                	bnez	a5,8000c8b4 <tinst_tests_gpf+0x155a>
    8000c8b0:	3e40106f          	j	8000dc94 <tinst_tests_gpf+0x293a>
    8000c8b4:	6418                	ld	a4,8(s0)
    8000c8b6:	47dd                	li	a5,23
    8000c8b8:	00023597          	auipc	a1,0x23
    8000c8bc:	71058593          	addi	a1,a1,1808 # 8002ffc8 <__func__.0+0x2d8>
    8000c8c0:	00f71463          	bne	a4,a5,8000c8c8 <tinst_tests_gpf+0x156e>
    8000c8c4:	3820106f          	j	8000dc46 <tinst_tests_gpf+0x28ec>
    8000c8c8:	00023517          	auipc	a0,0x23
    8000c8cc:	74050513          	addi	a0,a0,1856 # 80030008 <__func__.0+0x318>
    8000c8d0:	7bc200ef          	jal	8002d08c <printf>
    8000c8d4:	0004b797          	auipc	a5,0x4b
    8000c8d8:	73d7c783          	lbu	a5,1853(a5) # 80058011 <excpt+0x1>
    8000c8dc:	c799                	beqz	a5,8000c8ea <tinst_tests_gpf+0x1590>
    8000c8de:	6418                	ld	a4,8(s0)
    8000c8e0:	47dd                	li	a5,23
    8000c8e2:	00f71463          	bne	a4,a5,8000c8ea <tinst_tests_gpf+0x1590>
    8000c8e6:	59b0106f          	j	8000e680 <tinst_tests_gpf+0x3326>
    8000c8ea:	00023517          	auipc	a0,0x23
    8000c8ee:	72650513          	addi	a0,a0,1830 # 80030010 <__func__.0+0x320>
    8000c8f2:	79a200ef          	jal	8002d08c <printf>
    8000c8f6:	02900513          	li	a0,41
    8000c8fa:	4801f0ef          	jal	8002bd7a <putchar>
    8000c8fe:	4529                	li	a0,10
    8000c900:	47a1f0ef          	jal	8002bd7a <putchar>
    8000c904:	c889                	beqz	s1,8000c916 <tinst_tests_gpf+0x15bc>
    8000c906:	0004b797          	auipc	a5,0x4b
    8000c90a:	70b7c783          	lbu	a5,1803(a5) # 80058011 <excpt+0x1>
    8000c90e:	c399                	beqz	a5,8000c914 <tinst_tests_gpf+0x15ba>
    8000c910:	71a0106f          	j	8000e02a <tinst_tests_gpf+0x2cd0>
    8000c914:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c916:	cf6f40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    8000c91a:	001007b7          	lui	a5,0x100
    8000c91e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c922:	07b2                	slli	a5,a5,0xc
    8000c924:	e127b92f          	amomaxu.d	s2,s2,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c928:	00026617          	auipc	a2,0x26
    8000c92c:	16060613          	addi	a2,a2,352 # 80032a88 <__func__.0+0x2d98>
    8000c930:	08200593          	li	a1,130
    8000c934:	00023517          	auipc	a0,0x23
    8000c938:	6bc50513          	addi	a0,a0,1724 # 8002fff0 <__func__.0+0x300>
    8000c93c:	750200ef          	jal	8002d08c <printf>
    8000c940:	0004b797          	auipc	a5,0x4b
    8000c944:	6d17c783          	lbu	a5,1745(a5) # 80058011 <excpt+0x1>
    8000c948:	e399                	bnez	a5,8000c94e <tinst_tests_gpf+0x15f4>
    8000c94a:	3a40106f          	j	8000dcee <tinst_tests_gpf+0x2994>
    8000c94e:	6418                	ld	a4,8(s0)
    8000c950:	47dd                	li	a5,23
    8000c952:	00023597          	auipc	a1,0x23
    8000c956:	67658593          	addi	a1,a1,1654 # 8002ffc8 <__func__.0+0x2d8>
    8000c95a:	00f71463          	bne	a4,a5,8000c962 <tinst_tests_gpf+0x1608>
    8000c95e:	3420106f          	j	8000dca0 <tinst_tests_gpf+0x2946>
    8000c962:	00023517          	auipc	a0,0x23
    8000c966:	6a650513          	addi	a0,a0,1702 # 80030008 <__func__.0+0x318>
    8000c96a:	722200ef          	jal	8002d08c <printf>
    8000c96e:	0004b797          	auipc	a5,0x4b
    8000c972:	6a37c783          	lbu	a5,1699(a5) # 80058011 <excpt+0x1>
    8000c976:	c799                	beqz	a5,8000c984 <tinst_tests_gpf+0x162a>
    8000c978:	6418                	ld	a4,8(s0)
    8000c97a:	47dd                	li	a5,23
    8000c97c:	00f71463          	bne	a4,a5,8000c984 <tinst_tests_gpf+0x162a>
    8000c980:	5450106f          	j	8000e6c4 <tinst_tests_gpf+0x336a>
    8000c984:	00023517          	auipc	a0,0x23
    8000c988:	68c50513          	addi	a0,a0,1676 # 80030010 <__func__.0+0x320>
    8000c98c:	700200ef          	jal	8002d08c <printf>
    8000c990:	02900513          	li	a0,41
    8000c994:	3e61f0ef          	jal	8002bd7a <putchar>
    8000c998:	4529                	li	a0,10
    8000c99a:	3e01f0ef          	jal	8002bd7a <putchar>
    8000c99e:	cca9                	beqz	s1,8000c9f8 <tinst_tests_gpf+0x169e>
    8000c9a0:	0004b497          	auipc	s1,0x4b
    8000c9a4:	6714c483          	lbu	s1,1649(s1) # 80058011 <excpt+0x1>
    8000c9a8:	c8a9                	beqz	s1,8000c9fa <tinst_tests_gpf+0x16a0>
    8000c9aa:	6418                	ld	a4,8(s0)
    8000c9ac:	47dd                	li	a5,23
    8000c9ae:	04f71563          	bne	a4,a5,8000c9f8 <tinst_tests_gpf+0x169e>
    8000c9b2:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    8000c9b4:	00023597          	auipc	a1,0x23
    8000c9b8:	60458593          	addi	a1,a1,1540 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c9bc:	c3b9                	beqz	a5,8000ca02 <tinst_tests_gpf+0x16a8>
    8000c9be:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c9c0:	0016f713          	andi	a4,a3,1
    8000c9c4:	380718e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c9c8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c9cc:	460d                	li	a2,3
    8000c9ce:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c9d2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c9d4:	00c59763          	bne	a1,a2,8000c9e2 <tinst_tests_gpf+0x1688>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c9d8:	0026d683          	lhu	a3,2(a3)
    8000c9dc:	0106969b          	slliw	a3,a3,0x10
    8000c9e0:	8f55                	or	a4,a4,a3
    8000c9e2:	1ffe16b7          	lui	a3,0x1ffe1
    8000c9e6:	068e                	slli	a3,a3,0x3
    8000c9e8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000c9ea:	8f75                	and	a4,a4,a3
    TEST_END();
    8000c9ec:	00023597          	auipc	a1,0x23
    8000c9f0:	5cc58593          	addi	a1,a1,1484 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c9f4:	00e78763          	beq	a5,a4,8000ca02 <tinst_tests_gpf+0x16a8>
    8000c9f8:	4481                	li	s1,0
    TEST_END();
    8000c9fa:	00023597          	auipc	a1,0x23
    8000c9fe:	5ce58593          	addi	a1,a1,1486 # 8002ffc8 <__func__.0+0x2d8>
    8000ca02:	00023517          	auipc	a0,0x23
    8000ca06:	66e50513          	addi	a0,a0,1646 # 80030070 <__func__.0+0x380>
    8000ca0a:	682200ef          	jal	8002d08c <printf>
    8000ca0e:	4511                	li	a0,4
    8000ca10:	cf8f40ef          	jal	80000f08 <goto_priv>
    8000ca14:	ebff40ef          	jal	800018d2 <reset_state>
}
    8000ca18:	70a2                	ld	ra,40(sp)
    8000ca1a:	7402                	ld	s0,32(sp)
    8000ca1c:	6942                	ld	s2,16(sp)
    8000ca1e:	69a2                	ld	s3,8(sp)
    8000ca20:	8526                	mv	a0,s1
    8000ca22:	64e2                	ld	s1,24(sp)
    8000ca24:	6145                	addi	sp,sp,48
    8000ca26:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000ca28:	701c                	ld	a5,32(s0)
    8000ca2a:	00023597          	auipc	a1,0x23
    8000ca2e:	58e58593          	addi	a1,a1,1422 # 8002ffb8 <__func__.0+0x2c8>
    8000ca32:	e399                	bnez	a5,8000ca38 <tinst_tests_gpf+0x16de>
    8000ca34:	abbfe06f          	j	8000b4ee <tinst_tests_gpf+0x194>
    8000ca38:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ca3a:	0016f713          	andi	a4,a3,1
    8000ca3e:	30071be3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ca42:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ca46:	460d                	li	a2,3
    8000ca48:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ca4c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ca4e:	00c59763          	bne	a1,a2,8000ca5c <tinst_tests_gpf+0x1702>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ca52:	0026d683          	lhu	a3,2(a3)
    8000ca56:	0106969b          	slliw	a3,a3,0x10
    8000ca5a:	8f55                	or	a4,a4,a3
    8000ca5c:	1746                	slli	a4,a4,0x31
    8000ca5e:	9345                	srli	a4,a4,0x31
    8000ca60:	00023597          	auipc	a1,0x23
    8000ca64:	55858593          	addi	a1,a1,1368 # 8002ffb8 <__func__.0+0x2c8>
    8000ca68:	00e79463          	bne	a5,a4,8000ca70 <tinst_tests_gpf+0x1716>
    8000ca6c:	a83fe06f          	j	8000b4ee <tinst_tests_gpf+0x194>
    8000ca70:	00023597          	auipc	a1,0x23
    8000ca74:	55858593          	addi	a1,a1,1368 # 8002ffc8 <__func__.0+0x2d8>
    8000ca78:	a77fe06f          	j	8000b4ee <tinst_tests_gpf+0x194>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000ca7c:	6418                	ld	a4,8(s0)
    8000ca7e:	47d5                	li	a5,21
    8000ca80:	00023597          	auipc	a1,0x23
    8000ca84:	54858593          	addi	a1,a1,1352 # 8002ffc8 <__func__.0+0x2d8>
    8000ca88:	00f70463          	beq	a4,a5,8000ca90 <tinst_tests_gpf+0x1736>
    8000ca8c:	af9fe06f          	j	8000b584 <tinst_tests_gpf+0x22a>
    8000ca90:	701c                	ld	a5,32(s0)
    8000ca92:	00023597          	auipc	a1,0x23
    8000ca96:	52658593          	addi	a1,a1,1318 # 8002ffb8 <__func__.0+0x2c8>
    8000ca9a:	e399                	bnez	a5,8000caa0 <tinst_tests_gpf+0x1746>
    8000ca9c:	ae9fe06f          	j	8000b584 <tinst_tests_gpf+0x22a>
    8000caa0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000caa2:	0016f713          	andi	a4,a3,1
    8000caa6:	2a0717e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000caaa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000caae:	460d                	li	a2,3
    8000cab0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cab4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cab6:	00c59763          	bne	a1,a2,8000cac4 <tinst_tests_gpf+0x176a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000caba:	0026d683          	lhu	a3,2(a3)
    8000cabe:	0106969b          	slliw	a3,a3,0x10
    8000cac2:	8f55                	or	a4,a4,a3
    8000cac4:	1746                	slli	a4,a4,0x31
    8000cac6:	9345                	srli	a4,a4,0x31
    8000cac8:	00023597          	auipc	a1,0x23
    8000cacc:	4f058593          	addi	a1,a1,1264 # 8002ffb8 <__func__.0+0x2c8>
    8000cad0:	00e78463          	beq	a5,a4,8000cad8 <tinst_tests_gpf+0x177e>
    8000cad4:	aa9fe06f          	j	8000b57c <tinst_tests_gpf+0x222>
    8000cad8:	aadfe06f          	j	8000b584 <tinst_tests_gpf+0x22a>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000cadc:	701c                	ld	a5,32(s0)
    8000cade:	e399                	bnez	a5,8000cae4 <tinst_tests_gpf+0x178a>
    8000cae0:	a45fe06f          	j	8000b524 <tinst_tests_gpf+0x1ca>
    8000cae4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cae6:	0016f713          	andi	a4,a3,1
    8000caea:	260715e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000caee:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000caf2:	460d                	li	a2,3
    8000caf4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000caf8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cafa:	00c59763          	bne	a1,a2,8000cb08 <tinst_tests_gpf+0x17ae>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cafe:	0026d683          	lhu	a3,2(a3)
    8000cb02:	0106969b          	slliw	a3,a3,0x10
    8000cb06:	8f55                	or	a4,a4,a3
    8000cb08:	1746                	slli	a4,a4,0x31
    8000cb0a:	9345                	srli	a4,a4,0x31
    8000cb0c:	00e78463          	beq	a5,a4,8000cb14 <tinst_tests_gpf+0x17ba>
    8000cb10:	a01fe06f          	j	8000b510 <tinst_tests_gpf+0x1b6>
    8000cb14:	a11fe06f          	j	8000b524 <tinst_tests_gpf+0x1ca>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000cb18:	701c                	ld	a5,32(s0)
    8000cb1a:	00023597          	auipc	a1,0x23
    8000cb1e:	49e58593          	addi	a1,a1,1182 # 8002ffb8 <__func__.0+0x2c8>
    8000cb22:	e399                	bnez	a5,8000cb28 <tinst_tests_gpf+0x17ce>
    8000cb24:	b03fe06f          	j	8000b626 <tinst_tests_gpf+0x2cc>
    8000cb28:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cb2a:	0016f713          	andi	a4,a3,1
    8000cb2e:	220713e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cb32:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cb36:	460d                	li	a2,3
    8000cb38:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cb3c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cb3e:	00c59763          	bne	a1,a2,8000cb4c <tinst_tests_gpf+0x17f2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cb42:	0026d683          	lhu	a3,2(a3)
    8000cb46:	0106969b          	slliw	a3,a3,0x10
    8000cb4a:	8f55                	or	a4,a4,a3
    8000cb4c:	1746                	slli	a4,a4,0x31
    8000cb4e:	9345                	srli	a4,a4,0x31
    8000cb50:	00023597          	auipc	a1,0x23
    8000cb54:	46858593          	addi	a1,a1,1128 # 8002ffb8 <__func__.0+0x2c8>
    8000cb58:	00e79463          	bne	a5,a4,8000cb60 <tinst_tests_gpf+0x1806>
    8000cb5c:	acbfe06f          	j	8000b626 <tinst_tests_gpf+0x2cc>
    8000cb60:	00023597          	auipc	a1,0x23
    8000cb64:	46858593          	addi	a1,a1,1128 # 8002ffc8 <__func__.0+0x2d8>
    8000cb68:	abffe06f          	j	8000b626 <tinst_tests_gpf+0x2cc>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000cb6c:	701c                	ld	a5,32(s0)
    8000cb6e:	00023597          	auipc	a1,0x23
    8000cb72:	44a58593          	addi	a1,a1,1098 # 8002ffb8 <__func__.0+0x2c8>
    8000cb76:	e399                	bnez	a5,8000cb7c <tinst_tests_gpf+0x1822>
    8000cb78:	b51fe06f          	j	8000b6c8 <tinst_tests_gpf+0x36e>
    8000cb7c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cb7e:	0016f713          	andi	a4,a3,1
    8000cb82:	1c0719e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cb86:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cb8a:	460d                	li	a2,3
    8000cb8c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cb90:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cb92:	00c59763          	bne	a1,a2,8000cba0 <tinst_tests_gpf+0x1846>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cb96:	0026d683          	lhu	a3,2(a3)
    8000cb9a:	0106969b          	slliw	a3,a3,0x10
    8000cb9e:	8f55                	or	a4,a4,a3
    8000cba0:	1746                	slli	a4,a4,0x31
    8000cba2:	9345                	srli	a4,a4,0x31
    8000cba4:	00023597          	auipc	a1,0x23
    8000cba8:	41458593          	addi	a1,a1,1044 # 8002ffb8 <__func__.0+0x2c8>
    8000cbac:	00e79463          	bne	a5,a4,8000cbb4 <tinst_tests_gpf+0x185a>
    8000cbb0:	b19fe06f          	j	8000b6c8 <tinst_tests_gpf+0x36e>
    8000cbb4:	00023597          	auipc	a1,0x23
    8000cbb8:	41458593          	addi	a1,a1,1044 # 8002ffc8 <__func__.0+0x2d8>
    8000cbbc:	b0dfe06f          	j	8000b6c8 <tinst_tests_gpf+0x36e>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000cbc0:	701c                	ld	a5,32(s0)
    8000cbc2:	00023597          	auipc	a1,0x23
    8000cbc6:	3f658593          	addi	a1,a1,1014 # 8002ffb8 <__func__.0+0x2c8>
    8000cbca:	e399                	bnez	a5,8000cbd0 <tinst_tests_gpf+0x1876>
    8000cbcc:	b9ffe06f          	j	8000b76a <tinst_tests_gpf+0x410>
    8000cbd0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cbd2:	0016f713          	andi	a4,a3,1
    8000cbd6:	16071fe3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cbda:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cbde:	460d                	li	a2,3
    8000cbe0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cbe4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cbe6:	00c59763          	bne	a1,a2,8000cbf4 <tinst_tests_gpf+0x189a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cbea:	0026d683          	lhu	a3,2(a3)
    8000cbee:	0106969b          	slliw	a3,a3,0x10
    8000cbf2:	8f55                	or	a4,a4,a3
    8000cbf4:	1746                	slli	a4,a4,0x31
    8000cbf6:	9345                	srli	a4,a4,0x31
    8000cbf8:	00023597          	auipc	a1,0x23
    8000cbfc:	3c058593          	addi	a1,a1,960 # 8002ffb8 <__func__.0+0x2c8>
    8000cc00:	00e79463          	bne	a5,a4,8000cc08 <tinst_tests_gpf+0x18ae>
    8000cc04:	b67fe06f          	j	8000b76a <tinst_tests_gpf+0x410>
    8000cc08:	00023597          	auipc	a1,0x23
    8000cc0c:	3c058593          	addi	a1,a1,960 # 8002ffc8 <__func__.0+0x2d8>
    8000cc10:	b5bfe06f          	j	8000b76a <tinst_tests_gpf+0x410>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000cc14:	701c                	ld	a5,32(s0)
    8000cc16:	00023597          	auipc	a1,0x23
    8000cc1a:	3a258593          	addi	a1,a1,930 # 8002ffb8 <__func__.0+0x2c8>
    8000cc1e:	e399                	bnez	a5,8000cc24 <tinst_tests_gpf+0x18ca>
    8000cc20:	be5fe06f          	j	8000b804 <tinst_tests_gpf+0x4aa>
    8000cc24:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cc26:	0016f713          	andi	a4,a3,1
    8000cc2a:	120715e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cc2e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cc32:	460d                	li	a2,3
    8000cc34:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cc38:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cc3a:	00c59763          	bne	a1,a2,8000cc48 <tinst_tests_gpf+0x18ee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cc3e:	0026d683          	lhu	a3,2(a3)
    8000cc42:	0106969b          	slliw	a3,a3,0x10
    8000cc46:	8f55                	or	a4,a4,a3
    8000cc48:	1746                	slli	a4,a4,0x31
    8000cc4a:	9345                	srli	a4,a4,0x31
    8000cc4c:	00023597          	auipc	a1,0x23
    8000cc50:	36c58593          	addi	a1,a1,876 # 8002ffb8 <__func__.0+0x2c8>
    8000cc54:	00e79463          	bne	a5,a4,8000cc5c <tinst_tests_gpf+0x1902>
    8000cc58:	badfe06f          	j	8000b804 <tinst_tests_gpf+0x4aa>
    8000cc5c:	00023597          	auipc	a1,0x23
    8000cc60:	36c58593          	addi	a1,a1,876 # 8002ffc8 <__func__.0+0x2d8>
    8000cc64:	ba1fe06f          	j	8000b804 <tinst_tests_gpf+0x4aa>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000cc68:	701c                	ld	a5,32(s0)
    8000cc6a:	00023597          	auipc	a1,0x23
    8000cc6e:	34e58593          	addi	a1,a1,846 # 8002ffb8 <__func__.0+0x2c8>
    8000cc72:	e399                	bnez	a5,8000cc78 <tinst_tests_gpf+0x191e>
    8000cc74:	c2dfe06f          	j	8000b8a0 <tinst_tests_gpf+0x546>
    8000cc78:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cc7a:	0016f713          	andi	a4,a3,1
    8000cc7e:	0c071be3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cc82:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cc86:	460d                	li	a2,3
    8000cc88:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cc8c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cc8e:	00c59763          	bne	a1,a2,8000cc9c <tinst_tests_gpf+0x1942>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cc92:	0026d683          	lhu	a3,2(a3)
    8000cc96:	0106969b          	slliw	a3,a3,0x10
    8000cc9a:	8f55                	or	a4,a4,a3
    8000cc9c:	01f076b7          	lui	a3,0x1f07
    8000cca0:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cca4:	8f75                	and	a4,a4,a3
    8000cca6:	00023597          	auipc	a1,0x23
    8000ccaa:	31258593          	addi	a1,a1,786 # 8002ffb8 <__func__.0+0x2c8>
    8000ccae:	00e79463          	bne	a5,a4,8000ccb6 <tinst_tests_gpf+0x195c>
    8000ccb2:	beffe06f          	j	8000b8a0 <tinst_tests_gpf+0x546>
    8000ccb6:	00023597          	auipc	a1,0x23
    8000ccba:	31258593          	addi	a1,a1,786 # 8002ffc8 <__func__.0+0x2d8>
    8000ccbe:	be3fe06f          	j	8000b8a0 <tinst_tests_gpf+0x546>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000ccc2:	701c                	ld	a5,32(s0)
    8000ccc4:	00023597          	auipc	a1,0x23
    8000ccc8:	2f458593          	addi	a1,a1,756 # 8002ffb8 <__func__.0+0x2c8>
    8000cccc:	e399                	bnez	a5,8000ccd2 <tinst_tests_gpf+0x1978>
    8000ccce:	c73fe06f          	j	8000b940 <tinst_tests_gpf+0x5e6>
    8000ccd2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ccd4:	0016f713          	andi	a4,a3,1
    8000ccd8:	06071ee3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ccdc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cce0:	460d                	li	a2,3
    8000cce2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cce6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cce8:	00c59763          	bne	a1,a2,8000ccf6 <tinst_tests_gpf+0x199c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ccec:	0026d683          	lhu	a3,2(a3)
    8000ccf0:	0106969b          	slliw	a3,a3,0x10
    8000ccf4:	8f55                	or	a4,a4,a3
    8000ccf6:	01f076b7          	lui	a3,0x1f07
    8000ccfa:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000ccfe:	8f75                	and	a4,a4,a3
    8000cd00:	00023597          	auipc	a1,0x23
    8000cd04:	2b858593          	addi	a1,a1,696 # 8002ffb8 <__func__.0+0x2c8>
    8000cd08:	00e79463          	bne	a5,a4,8000cd10 <tinst_tests_gpf+0x19b6>
    8000cd0c:	c35fe06f          	j	8000b940 <tinst_tests_gpf+0x5e6>
    8000cd10:	00023597          	auipc	a1,0x23
    8000cd14:	2b858593          	addi	a1,a1,696 # 8002ffc8 <__func__.0+0x2d8>
    8000cd18:	c29fe06f          	j	8000b940 <tinst_tests_gpf+0x5e6>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000cd1c:	701c                	ld	a5,32(s0)
    8000cd1e:	00023597          	auipc	a1,0x23
    8000cd22:	29a58593          	addi	a1,a1,666 # 8002ffb8 <__func__.0+0x2c8>
    8000cd26:	e399                	bnez	a5,8000cd2c <tinst_tests_gpf+0x19d2>
    8000cd28:	cbbfe06f          	j	8000b9e2 <tinst_tests_gpf+0x688>
    8000cd2c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cd2e:	0016f713          	andi	a4,a3,1
    8000cd32:	020711e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cd36:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cd3a:	460d                	li	a2,3
    8000cd3c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cd40:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cd42:	00c59763          	bne	a1,a2,8000cd50 <tinst_tests_gpf+0x19f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cd46:	0026d683          	lhu	a3,2(a3)
    8000cd4a:	0106969b          	slliw	a3,a3,0x10
    8000cd4e:	8f55                	or	a4,a4,a3
    8000cd50:	01f076b7          	lui	a3,0x1f07
    8000cd54:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cd58:	8f75                	and	a4,a4,a3
    8000cd5a:	00023597          	auipc	a1,0x23
    8000cd5e:	25e58593          	addi	a1,a1,606 # 8002ffb8 <__func__.0+0x2c8>
    8000cd62:	00e79463          	bne	a5,a4,8000cd6a <tinst_tests_gpf+0x1a10>
    8000cd66:	c7dfe06f          	j	8000b9e2 <tinst_tests_gpf+0x688>
    8000cd6a:	00023597          	auipc	a1,0x23
    8000cd6e:	25e58593          	addi	a1,a1,606 # 8002ffc8 <__func__.0+0x2d8>
    8000cd72:	c71fe06f          	j	8000b9e2 <tinst_tests_gpf+0x688>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000cd76:	701c                	ld	a5,32(s0)
    8000cd78:	00023597          	auipc	a1,0x23
    8000cd7c:	24058593          	addi	a1,a1,576 # 8002ffb8 <__func__.0+0x2c8>
    8000cd80:	e399                	bnez	a5,8000cd86 <tinst_tests_gpf+0x1a2c>
    8000cd82:	d05fe06f          	j	8000ba86 <tinst_tests_gpf+0x72c>
    8000cd86:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cd88:	0016f713          	andi	a4,a3,1
    8000cd8c:	7c071463          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cd90:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cd94:	460d                	li	a2,3
    8000cd96:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cd9a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cd9c:	00c59763          	bne	a1,a2,8000cdaa <tinst_tests_gpf+0x1a50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cda0:	0026d683          	lhu	a3,2(a3)
    8000cda4:	0106969b          	slliw	a3,a3,0x10
    8000cda8:	8f55                	or	a4,a4,a3
    8000cdaa:	01f076b7          	lui	a3,0x1f07
    8000cdae:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cdb2:	8f75                	and	a4,a4,a3
    8000cdb4:	00023597          	auipc	a1,0x23
    8000cdb8:	20458593          	addi	a1,a1,516 # 8002ffb8 <__func__.0+0x2c8>
    8000cdbc:	00e79463          	bne	a5,a4,8000cdc4 <tinst_tests_gpf+0x1a6a>
    8000cdc0:	cc7fe06f          	j	8000ba86 <tinst_tests_gpf+0x72c>
    8000cdc4:	00023597          	auipc	a1,0x23
    8000cdc8:	20458593          	addi	a1,a1,516 # 8002ffc8 <__func__.0+0x2d8>
    8000cdcc:	cbbfe06f          	j	8000ba86 <tinst_tests_gpf+0x72c>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000cdd0:	701c                	ld	a5,32(s0)
    8000cdd2:	00023597          	auipc	a1,0x23
    8000cdd6:	1e658593          	addi	a1,a1,486 # 8002ffb8 <__func__.0+0x2c8>
    8000cdda:	e399                	bnez	a5,8000cde0 <tinst_tests_gpf+0x1a86>
    8000cddc:	fa9fe06f          	j	8000bd84 <tinst_tests_gpf+0xa2a>
    8000cde0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cde2:	0016f713          	andi	a4,a3,1
    8000cde6:	76071763          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cdea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cdee:	460d                	li	a2,3
    8000cdf0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cdf4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cdf6:	00c59763          	bne	a1,a2,8000ce04 <tinst_tests_gpf+0x1aaa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cdfa:	0026d683          	lhu	a3,2(a3)
    8000cdfe:	0106969b          	slliw	a3,a3,0x10
    8000ce02:	8f55                	or	a4,a4,a3
    8000ce04:	1ffe16b7          	lui	a3,0x1ffe1
    8000ce08:	068e                	slli	a3,a3,0x3
    8000ce0a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ce0c:	8f75                	and	a4,a4,a3
    8000ce0e:	00023597          	auipc	a1,0x23
    8000ce12:	1aa58593          	addi	a1,a1,426 # 8002ffb8 <__func__.0+0x2c8>
    8000ce16:	00e79463          	bne	a5,a4,8000ce1e <tinst_tests_gpf+0x1ac4>
    8000ce1a:	f6bfe06f          	j	8000bd84 <tinst_tests_gpf+0xa2a>
    8000ce1e:	00023597          	auipc	a1,0x23
    8000ce22:	1aa58593          	addi	a1,a1,426 # 8002ffc8 <__func__.0+0x2d8>
    8000ce26:	f5ffe06f          	j	8000bd84 <tinst_tests_gpf+0xa2a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000ce2a:	701c                	ld	a5,32(s0)
    8000ce2c:	00023597          	auipc	a1,0x23
    8000ce30:	18c58593          	addi	a1,a1,396 # 8002ffb8 <__func__.0+0x2c8>
    8000ce34:	e399                	bnez	a5,8000ce3a <tinst_tests_gpf+0x1ae0>
    8000ce36:	ff3fe06f          	j	8000be28 <tinst_tests_gpf+0xace>
    8000ce3a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ce3c:	0016f713          	andi	a4,a3,1
    8000ce40:	70071a63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ce44:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ce48:	460d                	li	a2,3
    8000ce4a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ce4e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ce50:	00c59763          	bne	a1,a2,8000ce5e <tinst_tests_gpf+0x1b04>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ce54:	0026d683          	lhu	a3,2(a3)
    8000ce58:	0106969b          	slliw	a3,a3,0x10
    8000ce5c:	8f55                	or	a4,a4,a3
    8000ce5e:	1ffe16b7          	lui	a3,0x1ffe1
    8000ce62:	068e                	slli	a3,a3,0x3
    8000ce64:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ce66:	8f75                	and	a4,a4,a3
    8000ce68:	00023597          	auipc	a1,0x23
    8000ce6c:	15058593          	addi	a1,a1,336 # 8002ffb8 <__func__.0+0x2c8>
    8000ce70:	00e79463          	bne	a5,a4,8000ce78 <tinst_tests_gpf+0x1b1e>
    8000ce74:	fb5fe06f          	j	8000be28 <tinst_tests_gpf+0xace>
    8000ce78:	00023597          	auipc	a1,0x23
    8000ce7c:	15058593          	addi	a1,a1,336 # 8002ffc8 <__func__.0+0x2d8>
    8000ce80:	fa9fe06f          	j	8000be28 <tinst_tests_gpf+0xace>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000ce84:	701c                	ld	a5,32(s0)
    8000ce86:	00023597          	auipc	a1,0x23
    8000ce8a:	13258593          	addi	a1,a1,306 # 8002ffb8 <__func__.0+0x2c8>
    8000ce8e:	e399                	bnez	a5,8000ce94 <tinst_tests_gpf+0x1b3a>
    8000ce90:	83aff06f          	j	8000beca <tinst_tests_gpf+0xb70>
    8000ce94:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ce96:	0016f713          	andi	a4,a3,1
    8000ce9a:	6a071d63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ce9e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cea2:	460d                	li	a2,3
    8000cea4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cea8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ceaa:	00c59763          	bne	a1,a2,8000ceb8 <tinst_tests_gpf+0x1b5e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ceae:	0026d683          	lhu	a3,2(a3)
    8000ceb2:	0106969b          	slliw	a3,a3,0x10
    8000ceb6:	8f55                	or	a4,a4,a3
    8000ceb8:	1ffe16b7          	lui	a3,0x1ffe1
    8000cebc:	068e                	slli	a3,a3,0x3
    8000cebe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cec0:	8f75                	and	a4,a4,a3
    8000cec2:	00023597          	auipc	a1,0x23
    8000cec6:	0f658593          	addi	a1,a1,246 # 8002ffb8 <__func__.0+0x2c8>
    8000ceca:	00e79463          	bne	a5,a4,8000ced2 <tinst_tests_gpf+0x1b78>
    8000cece:	ffdfe06f          	j	8000beca <tinst_tests_gpf+0xb70>
    8000ced2:	00023597          	auipc	a1,0x23
    8000ced6:	0f658593          	addi	a1,a1,246 # 8002ffc8 <__func__.0+0x2d8>
    8000ceda:	ff1fe06f          	j	8000beca <tinst_tests_gpf+0xb70>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000cede:	701c                	ld	a5,32(s0)
    8000cee0:	00023597          	auipc	a1,0x23
    8000cee4:	0d858593          	addi	a1,a1,216 # 8002ffb8 <__func__.0+0x2c8>
    8000cee8:	e399                	bnez	a5,8000ceee <tinst_tests_gpf+0x1b94>
    8000ceea:	882ff06f          	j	8000bf6c <tinst_tests_gpf+0xc12>
    8000ceee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cef0:	0016f713          	andi	a4,a3,1
    8000cef4:	66071063          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cef8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cefc:	460d                	li	a2,3
    8000cefe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cf02:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cf04:	00c59763          	bne	a1,a2,8000cf12 <tinst_tests_gpf+0x1bb8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cf08:	0026d683          	lhu	a3,2(a3)
    8000cf0c:	0106969b          	slliw	a3,a3,0x10
    8000cf10:	8f55                	or	a4,a4,a3
    8000cf12:	1ffe16b7          	lui	a3,0x1ffe1
    8000cf16:	068e                	slli	a3,a3,0x3
    8000cf18:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cf1a:	8f75                	and	a4,a4,a3
    8000cf1c:	00023597          	auipc	a1,0x23
    8000cf20:	09c58593          	addi	a1,a1,156 # 8002ffb8 <__func__.0+0x2c8>
    8000cf24:	00e79463          	bne	a5,a4,8000cf2c <tinst_tests_gpf+0x1bd2>
    8000cf28:	844ff06f          	j	8000bf6c <tinst_tests_gpf+0xc12>
    8000cf2c:	00023597          	auipc	a1,0x23
    8000cf30:	09c58593          	addi	a1,a1,156 # 8002ffc8 <__func__.0+0x2d8>
    8000cf34:	838ff06f          	j	8000bf6c <tinst_tests_gpf+0xc12>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000cf38:	701c                	ld	a5,32(s0)
    8000cf3a:	e399                	bnez	a5,8000cf40 <tinst_tests_gpf+0x1be6>
    8000cf3c:	e7efe06f          	j	8000b5ba <tinst_tests_gpf+0x260>
    8000cf40:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cf42:	0016f713          	andi	a4,a3,1
    8000cf46:	60071763          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cf4a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cf4e:	460d                	li	a2,3
    8000cf50:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cf54:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cf56:	00c59763          	bne	a1,a2,8000cf64 <tinst_tests_gpf+0x1c0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cf5a:	0026d683          	lhu	a3,2(a3)
    8000cf5e:	0106969b          	slliw	a3,a3,0x10
    8000cf62:	8f55                	or	a4,a4,a3
    8000cf64:	1746                	slli	a4,a4,0x31
    8000cf66:	9345                	srli	a4,a4,0x31
    8000cf68:	00e78463          	beq	a5,a4,8000cf70 <tinst_tests_gpf+0x1c16>
    8000cf6c:	e3afe06f          	j	8000b5a6 <tinst_tests_gpf+0x24c>
    8000cf70:	e4afe06f          	j	8000b5ba <tinst_tests_gpf+0x260>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000cf74:	701c                	ld	a5,32(s0)
    8000cf76:	e399                	bnez	a5,8000cf7c <tinst_tests_gpf+0x1c22>
    8000cf78:	ee4fe06f          	j	8000b65c <tinst_tests_gpf+0x302>
    8000cf7c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cf7e:	0016f713          	andi	a4,a3,1
    8000cf82:	5c071963          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cf86:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cf8a:	460d                	li	a2,3
    8000cf8c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cf90:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cf92:	00c59763          	bne	a1,a2,8000cfa0 <tinst_tests_gpf+0x1c46>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cf96:	0026d683          	lhu	a3,2(a3)
    8000cf9a:	0106969b          	slliw	a3,a3,0x10
    8000cf9e:	8f55                	or	a4,a4,a3
    8000cfa0:	1746                	slli	a4,a4,0x31
    8000cfa2:	9345                	srli	a4,a4,0x31
    8000cfa4:	00e78463          	beq	a5,a4,8000cfac <tinst_tests_gpf+0x1c52>
    8000cfa8:	ea0fe06f          	j	8000b648 <tinst_tests_gpf+0x2ee>
    8000cfac:	eb0fe06f          	j	8000b65c <tinst_tests_gpf+0x302>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000cfb0:	6418                	ld	a4,8(s0)
    8000cfb2:	47d5                	li	a5,21
    8000cfb4:	00f70463          	beq	a4,a5,8000cfbc <tinst_tests_gpf+0x1c62>
    8000cfb8:	ffefe06f          	j	8000b7b6 <tinst_tests_gpf+0x45c>
    8000cfbc:	7018                	ld	a4,32(s0)
    8000cfbe:	e319                	bnez	a4,8000cfc4 <tinst_tests_gpf+0x1c6a>
    8000cfc0:	ff8fe06f          	j	8000b7b8 <tinst_tests_gpf+0x45e>
    8000cfc4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cfc6:	0016f793          	andi	a5,a3,1
    8000cfca:	58079563          	bnez	a5,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cfce:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cfd2:	460d                	li	a2,3
    8000cfd4:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000cfd8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000cfda:	00c59763          	bne	a1,a2,8000cfe8 <tinst_tests_gpf+0x1c8e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cfde:	0026d683          	lhu	a3,2(a3)
    8000cfe2:	0106969b          	slliw	a3,a3,0x10
    8000cfe6:	8fd5                	or	a5,a5,a3
    8000cfe8:	17c6                	slli	a5,a5,0x31
    8000cfea:	0317d493          	srli	s1,a5,0x31
    8000cfee:	8c99                	sub	s1,s1,a4
    8000cff0:	0014b493          	seqz	s1,s1
    8000cff4:	fc4fe06f          	j	8000b7b8 <tinst_tests_gpf+0x45e>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000cff8:	6418                	ld	a4,8(s0)
    8000cffa:	47dd                	li	a5,23
    8000cffc:	00023597          	auipc	a1,0x23
    8000d000:	fcc58593          	addi	a1,a1,-52 # 8002ffc8 <__func__.0+0x2d8>
    8000d004:	00f70463          	beq	a4,a5,8000d00c <tinst_tests_gpf+0x1cb2>
    8000d008:	ffbfe06f          	j	8000c002 <tinst_tests_gpf+0xca8>
    8000d00c:	701c                	ld	a5,32(s0)
    8000d00e:	00023597          	auipc	a1,0x23
    8000d012:	faa58593          	addi	a1,a1,-86 # 8002ffb8 <__func__.0+0x2c8>
    8000d016:	e399                	bnez	a5,8000d01c <tinst_tests_gpf+0x1cc2>
    8000d018:	febfe06f          	j	8000c002 <tinst_tests_gpf+0xca8>
    8000d01c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d01e:	0016f713          	andi	a4,a3,1
    8000d022:	52071963          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d026:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d02a:	460d                	li	a2,3
    8000d02c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d030:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d032:	00c59763          	bne	a1,a2,8000d040 <tinst_tests_gpf+0x1ce6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d036:	0026d683          	lhu	a3,2(a3)
    8000d03a:	0106969b          	slliw	a3,a3,0x10
    8000d03e:	8f55                	or	a4,a4,a3
    8000d040:	1ffe16b7          	lui	a3,0x1ffe1
    8000d044:	068e                	slli	a3,a3,0x3
    8000d046:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d048:	8f75                	and	a4,a4,a3
    8000d04a:	00023597          	auipc	a1,0x23
    8000d04e:	f6e58593          	addi	a1,a1,-146 # 8002ffb8 <__func__.0+0x2c8>
    8000d052:	00e78463          	beq	a5,a4,8000d05a <tinst_tests_gpf+0x1d00>
    8000d056:	fa5fe06f          	j	8000bffa <tinst_tests_gpf+0xca0>
    8000d05a:	fa9fe06f          	j	8000c002 <tinst_tests_gpf+0xca8>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000d05e:	6418                	ld	a4,8(s0)
    8000d060:	47d5                	li	a5,21
    8000d062:	00f70463          	beq	a4,a5,8000d06a <tinst_tests_gpf+0x1d10>
    8000d066:	feafe06f          	j	8000b850 <tinst_tests_gpf+0x4f6>
    8000d06a:	7018                	ld	a4,32(s0)
    8000d06c:	e319                	bnez	a4,8000d072 <tinst_tests_gpf+0x1d18>
    8000d06e:	fe4fe06f          	j	8000b852 <tinst_tests_gpf+0x4f8>
    8000d072:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d074:	0016f793          	andi	a5,a3,1
    8000d078:	4c079e63          	bnez	a5,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d07c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d080:	460d                	li	a2,3
    8000d082:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d086:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d088:	00c59763          	bne	a1,a2,8000d096 <tinst_tests_gpf+0x1d3c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d08c:	0026d683          	lhu	a3,2(a3)
    8000d090:	0106969b          	slliw	a3,a3,0x10
    8000d094:	8fd5                	or	a5,a5,a3
    8000d096:	17c6                	slli	a5,a5,0x31
    8000d098:	0317d493          	srli	s1,a5,0x31
    8000d09c:	8c99                	sub	s1,s1,a4
    8000d09e:	0014b493          	seqz	s1,s1
    8000d0a2:	fb0fe06f          	j	8000b852 <tinst_tests_gpf+0x4f8>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000d0a6:	6418                	ld	a4,8(s0)
    8000d0a8:	47dd                	li	a5,23
    8000d0aa:	00023597          	auipc	a1,0x23
    8000d0ae:	f1e58593          	addi	a1,a1,-226 # 8002ffc8 <__func__.0+0x2d8>
    8000d0b2:	00f70463          	beq	a4,a5,8000d0ba <tinst_tests_gpf+0x1d60>
    8000d0b6:	fe3fe06f          	j	8000c098 <tinst_tests_gpf+0xd3e>
    8000d0ba:	701c                	ld	a5,32(s0)
    8000d0bc:	00023597          	auipc	a1,0x23
    8000d0c0:	efc58593          	addi	a1,a1,-260 # 8002ffb8 <__func__.0+0x2c8>
    8000d0c4:	e399                	bnez	a5,8000d0ca <tinst_tests_gpf+0x1d70>
    8000d0c6:	fd3fe06f          	j	8000c098 <tinst_tests_gpf+0xd3e>
    8000d0ca:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d0cc:	0016f713          	andi	a4,a3,1
    8000d0d0:	48071263          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d0d4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d0d8:	460d                	li	a2,3
    8000d0da:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d0de:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d0e0:	00c59763          	bne	a1,a2,8000d0ee <tinst_tests_gpf+0x1d94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d0e4:	0026d683          	lhu	a3,2(a3)
    8000d0e8:	0106969b          	slliw	a3,a3,0x10
    8000d0ec:	8f55                	or	a4,a4,a3
    8000d0ee:	1ffe16b7          	lui	a3,0x1ffe1
    8000d0f2:	068e                	slli	a3,a3,0x3
    8000d0f4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d0f6:	8f75                	and	a4,a4,a3
    8000d0f8:	00023597          	auipc	a1,0x23
    8000d0fc:	ec058593          	addi	a1,a1,-320 # 8002ffb8 <__func__.0+0x2c8>
    8000d100:	00e78463          	beq	a5,a4,8000d108 <tinst_tests_gpf+0x1dae>
    8000d104:	f8dfe06f          	j	8000c090 <tinst_tests_gpf+0xd36>
    8000d108:	f91fe06f          	j	8000c098 <tinst_tests_gpf+0xd3e>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000d10c:	6418                	ld	a4,8(s0)
    8000d10e:	47dd                	li	a5,23
    8000d110:	00f70463          	beq	a4,a5,8000d118 <tinst_tests_gpf+0x1dbe>
    8000d114:	fd8fe06f          	j	8000b8ec <tinst_tests_gpf+0x592>
    8000d118:	701c                	ld	a5,32(s0)
    8000d11a:	e399                	bnez	a5,8000d120 <tinst_tests_gpf+0x1dc6>
    8000d11c:	fd2fe06f          	j	8000b8ee <tinst_tests_gpf+0x594>
    8000d120:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d122:	0016f713          	andi	a4,a3,1
    8000d126:	42071763          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d12a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d12e:	460d                	li	a2,3
    8000d130:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d134:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d136:	00c59763          	bne	a1,a2,8000d144 <tinst_tests_gpf+0x1dea>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d13a:	0026d683          	lhu	a3,2(a3)
    8000d13e:	0106969b          	slliw	a3,a3,0x10
    8000d142:	8f55                	or	a4,a4,a3
    8000d144:	01f076b7          	lui	a3,0x1f07
    8000d148:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d14c:	8f75                	and	a4,a4,a3
    8000d14e:	40f704b3          	sub	s1,a4,a5
    8000d152:	0014b493          	seqz	s1,s1
    8000d156:	f98fe06f          	j	8000b8ee <tinst_tests_gpf+0x594>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d15a:	6418                	ld	a4,8(s0)
    8000d15c:	47dd                	li	a5,23
    8000d15e:	00f70463          	beq	a4,a5,8000d166 <tinst_tests_gpf+0x1e0c>
    8000d162:	82bfe06f          	j	8000b98c <tinst_tests_gpf+0x632>
    8000d166:	701c                	ld	a5,32(s0)
    8000d168:	e399                	bnez	a5,8000d16e <tinst_tests_gpf+0x1e14>
    8000d16a:	825fe06f          	j	8000b98e <tinst_tests_gpf+0x634>
    8000d16e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d170:	0016f713          	andi	a4,a3,1
    8000d174:	3e071063          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d178:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d17c:	460d                	li	a2,3
    8000d17e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d182:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d184:	00c59763          	bne	a1,a2,8000d192 <tinst_tests_gpf+0x1e38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d188:	0026d683          	lhu	a3,2(a3)
    8000d18c:	0106969b          	slliw	a3,a3,0x10
    8000d190:	8f55                	or	a4,a4,a3
    8000d192:	01f076b7          	lui	a3,0x1f07
    8000d196:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d19a:	8f75                	and	a4,a4,a3
    8000d19c:	40f704b3          	sub	s1,a4,a5
    8000d1a0:	0014b493          	seqz	s1,s1
    8000d1a4:	feafe06f          	j	8000b98e <tinst_tests_gpf+0x634>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d1a8:	6418                	ld	a4,8(s0)
    8000d1aa:	47dd                	li	a5,23
    8000d1ac:	00f70463          	beq	a4,a5,8000d1b4 <tinst_tests_gpf+0x1e5a>
    8000d1b0:	87ffe06f          	j	8000ba2e <tinst_tests_gpf+0x6d4>
    8000d1b4:	701c                	ld	a5,32(s0)
    8000d1b6:	e399                	bnez	a5,8000d1bc <tinst_tests_gpf+0x1e62>
    8000d1b8:	879fe06f          	j	8000ba30 <tinst_tests_gpf+0x6d6>
    8000d1bc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d1be:	0016f713          	andi	a4,a3,1
    8000d1c2:	38071963          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d1c6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d1ca:	460d                	li	a2,3
    8000d1cc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d1d0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d1d2:	00c59763          	bne	a1,a2,8000d1e0 <tinst_tests_gpf+0x1e86>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d1d6:	0026d683          	lhu	a3,2(a3)
    8000d1da:	0106969b          	slliw	a3,a3,0x10
    8000d1de:	8f55                	or	a4,a4,a3
    8000d1e0:	01f076b7          	lui	a3,0x1f07
    8000d1e4:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d1e8:	8f75                	and	a4,a4,a3
    8000d1ea:	40f704b3          	sub	s1,a4,a5
    8000d1ee:	0014b493          	seqz	s1,s1
    8000d1f2:	83ffe06f          	j	8000ba30 <tinst_tests_gpf+0x6d6>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d1f6:	6418                	ld	a4,8(s0)
    8000d1f8:	47dd                	li	a5,23
    8000d1fa:	00f70463          	beq	a4,a5,8000d202 <tinst_tests_gpf+0x1ea8>
    8000d1fe:	8d5fe06f          	j	8000bad2 <tinst_tests_gpf+0x778>
    8000d202:	701c                	ld	a5,32(s0)
    8000d204:	e399                	bnez	a5,8000d20a <tinst_tests_gpf+0x1eb0>
    8000d206:	8cffe06f          	j	8000bad4 <tinst_tests_gpf+0x77a>
    8000d20a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d20c:	0016f713          	andi	a4,a3,1
    8000d210:	34071263          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d214:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d218:	460d                	li	a2,3
    8000d21a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d21e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d220:	00c59763          	bne	a1,a2,8000d22e <tinst_tests_gpf+0x1ed4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d224:	0026d683          	lhu	a3,2(a3)
    8000d228:	0106969b          	slliw	a3,a3,0x10
    8000d22c:	8f55                	or	a4,a4,a3
    8000d22e:	01f076b7          	lui	a3,0x1f07
    8000d232:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d236:	8f75                	and	a4,a4,a3
    8000d238:	40f704b3          	sub	s1,a4,a5
    8000d23c:	0014b493          	seqz	s1,s1
    8000d240:	895fe06f          	j	8000bad4 <tinst_tests_gpf+0x77a>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d244:	6418                	ld	a4,8(s0)
    8000d246:	47d5                	li	a5,21
    8000d248:	00f70463          	beq	a4,a5,8000d250 <tinst_tests_gpf+0x1ef6>
    8000d24c:	91bfe06f          	j	8000bb66 <tinst_tests_gpf+0x80c>
    8000d250:	02043903          	ld	s2,32(s0)
    8000d254:	00091463          	bnez	s2,8000d25c <tinst_tests_gpf+0x1f02>
    8000d258:	911fe06f          	j	8000bb68 <tinst_tests_gpf+0x80e>
    8000d25c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d25e:	0017f713          	andi	a4,a5,1
    8000d262:	2e071963          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d266:	0007d503          	lhu	a0,0(a5)
    8000d26a:	d84f40ef          	jal	800017ee <expand_compressed_instruction>
    8000d26e:	67a1                	lui	a5,0x8
    8000d270:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d272:	00f574b3          	and	s1,a0,a5
    8000d276:	412484b3          	sub	s1,s1,s2
    8000d27a:	0014b493          	seqz	s1,s1
    8000d27e:	8ebfe06f          	j	8000bb68 <tinst_tests_gpf+0x80e>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d282:	6418                	ld	a4,8(s0)
    8000d284:	47d5                	li	a5,21
    8000d286:	00f70463          	beq	a4,a5,8000d28e <tinst_tests_gpf+0x1f34>
    8000d28a:	973fe06f          	j	8000bbfc <tinst_tests_gpf+0x8a2>
    8000d28e:	02043983          	ld	s3,32(s0)
    8000d292:	00099463          	bnez	s3,8000d29a <tinst_tests_gpf+0x1f40>
    8000d296:	969fe06f          	j	8000bbfe <tinst_tests_gpf+0x8a4>
    8000d29a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d29c:	0017f713          	andi	a4,a5,1
    8000d2a0:	2a071a63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d2a4:	0007d503          	lhu	a0,0(a5)
    8000d2a8:	d46f40ef          	jal	800017ee <expand_compressed_instruction>
    8000d2ac:	67a1                	lui	a5,0x8
    8000d2ae:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d2b0:	00f574b3          	and	s1,a0,a5
    8000d2b4:	413484b3          	sub	s1,s1,s3
    8000d2b8:	0014b493          	seqz	s1,s1
    8000d2bc:	943fe06f          	j	8000bbfe <tinst_tests_gpf+0x8a4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d2c0:	6418                	ld	a4,8(s0)
    8000d2c2:	47dd                	li	a5,23
    8000d2c4:	00f70463          	beq	a4,a5,8000d2cc <tinst_tests_gpf+0x1f72>
    8000d2c8:	9cbfe06f          	j	8000bc92 <tinst_tests_gpf+0x938>
    8000d2cc:	02043983          	ld	s3,32(s0)
    8000d2d0:	00099463          	bnez	s3,8000d2d8 <tinst_tests_gpf+0x1f7e>
    8000d2d4:	9c1fe06f          	j	8000bc94 <tinst_tests_gpf+0x93a>
    8000d2d8:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d2da:	0017f713          	andi	a4,a5,1
    8000d2de:	26071b63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d2e2:	0007d503          	lhu	a0,0(a5)
    8000d2e6:	d08f40ef          	jal	800017ee <expand_compressed_instruction>
    8000d2ea:	01f077b7          	lui	a5,0x1f07
    8000d2ee:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000d2f2:	00f574b3          	and	s1,a0,a5
    8000d2f6:	413484b3          	sub	s1,s1,s3
    8000d2fa:	0014b493          	seqz	s1,s1
    8000d2fe:	997fe06f          	j	8000bc94 <tinst_tests_gpf+0x93a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000d302:	701c                	ld	a5,32(s0)
    8000d304:	e399                	bnez	a5,8000d30a <tinst_tests_gpf+0x1fb0>
    8000d306:	b59fe06f          	j	8000be5e <tinst_tests_gpf+0xb04>
    8000d30a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d30c:	0016f713          	andi	a4,a3,1
    8000d310:	24071263          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d314:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d318:	460d                	li	a2,3
    8000d31a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d31e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d320:	00c59763          	bne	a1,a2,8000d32e <tinst_tests_gpf+0x1fd4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d324:	0026d683          	lhu	a3,2(a3)
    8000d328:	0106969b          	slliw	a3,a3,0x10
    8000d32c:	8f55                	or	a4,a4,a3
    8000d32e:	1ffe16b7          	lui	a3,0x1ffe1
    8000d332:	068e                	slli	a3,a3,0x3
    8000d334:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d336:	8f75                	and	a4,a4,a3
    8000d338:	00e78463          	beq	a5,a4,8000d340 <tinst_tests_gpf+0x1fe6>
    8000d33c:	b0ffe06f          	j	8000be4a <tinst_tests_gpf+0xaf0>
    8000d340:	b1ffe06f          	j	8000be5e <tinst_tests_gpf+0xb04>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d344:	02043903          	ld	s2,32(s0)
    8000d348:	64091be3          	bnez	s2,8000e19e <tinst_tests_gpf+0x2e44>
    8000d34c:	00023597          	auipc	a1,0x23
    8000d350:	c6c58593          	addi	a1,a1,-916 # 8002ffb8 <__func__.0+0x2c8>
    8000d354:	fc6fe06f          	j	8000bb1a <tinst_tests_gpf+0x7c0>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000d358:	701c                	ld	a5,32(s0)
    8000d35a:	e399                	bnez	a5,8000d360 <tinst_tests_gpf+0x2006>
    8000d35c:	ba5fe06f          	j	8000bf00 <tinst_tests_gpf+0xba6>
    8000d360:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d362:	0016f713          	andi	a4,a3,1
    8000d366:	1e071763          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d36a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d36e:	460d                	li	a2,3
    8000d370:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d374:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d376:	00c59763          	bne	a1,a2,8000d384 <tinst_tests_gpf+0x202a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d37a:	0026d683          	lhu	a3,2(a3)
    8000d37e:	0106969b          	slliw	a3,a3,0x10
    8000d382:	8f55                	or	a4,a4,a3
    8000d384:	1ffe16b7          	lui	a3,0x1ffe1
    8000d388:	068e                	slli	a3,a3,0x3
    8000d38a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d38c:	8f75                	and	a4,a4,a3
    8000d38e:	00e78463          	beq	a5,a4,8000d396 <tinst_tests_gpf+0x203c>
    8000d392:	b5bfe06f          	j	8000beec <tinst_tests_gpf+0xb92>
    8000d396:	b6bfe06f          	j	8000bf00 <tinst_tests_gpf+0xba6>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d39a:	02043983          	ld	s3,32(s0)
    8000d39e:	660997e3          	bnez	s3,8000e20c <tinst_tests_gpf+0x2eb2>
    8000d3a2:	00023597          	auipc	a1,0x23
    8000d3a6:	c1658593          	addi	a1,a1,-1002 # 8002ffb8 <__func__.0+0x2c8>
    8000d3aa:	807fe06f          	j	8000bbb0 <tinst_tests_gpf+0x856>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000d3ae:	701c                	ld	a5,32(s0)
    8000d3b0:	e399                	bnez	a5,8000d3b6 <tinst_tests_gpf+0x205c>
    8000d3b2:	bf1fe06f          	j	8000bfa2 <tinst_tests_gpf+0xc48>
    8000d3b6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3b8:	0016f713          	andi	a4,a3,1
    8000d3bc:	18071c63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d3c0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d3c4:	460d                	li	a2,3
    8000d3c6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d3ca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d3cc:	00c59763          	bne	a1,a2,8000d3da <tinst_tests_gpf+0x2080>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d3d0:	0026d683          	lhu	a3,2(a3)
    8000d3d4:	0106969b          	slliw	a3,a3,0x10
    8000d3d8:	8f55                	or	a4,a4,a3
    8000d3da:	1ffe16b7          	lui	a3,0x1ffe1
    8000d3de:	068e                	slli	a3,a3,0x3
    8000d3e0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d3e2:	8f75                	and	a4,a4,a3
    8000d3e4:	00e78463          	beq	a5,a4,8000d3ec <tinst_tests_gpf+0x2092>
    8000d3e8:	ba7fe06f          	j	8000bf8e <tinst_tests_gpf+0xc34>
    8000d3ec:	bb7fe06f          	j	8000bfa2 <tinst_tests_gpf+0xc48>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d3f0:	02043983          	ld	s3,32(s0)
    8000d3f4:	6c0994e3          	bnez	s3,8000e2bc <tinst_tests_gpf+0x2f62>
    8000d3f8:	00023597          	auipc	a1,0x23
    8000d3fc:	bc058593          	addi	a1,a1,-1088 # 8002ffb8 <__func__.0+0x2c8>
    8000d400:	847fe06f          	j	8000bc46 <tinst_tests_gpf+0x8ec>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000d404:	701c                	ld	a5,32(s0)
    8000d406:	e399                	bnez	a5,8000d40c <tinst_tests_gpf+0x20b2>
    8000d408:	c31fe06f          	j	8000c038 <tinst_tests_gpf+0xcde>
    8000d40c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d40e:	0016f713          	andi	a4,a3,1
    8000d412:	14071163          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d416:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d41a:	460d                	li	a2,3
    8000d41c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d420:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d422:	00c59763          	bne	a1,a2,8000d430 <tinst_tests_gpf+0x20d6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d426:	0026d683          	lhu	a3,2(a3)
    8000d42a:	0106969b          	slliw	a3,a3,0x10
    8000d42e:	8f55                	or	a4,a4,a3
    8000d430:	1ffe16b7          	lui	a3,0x1ffe1
    8000d434:	068e                	slli	a3,a3,0x3
    8000d436:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d438:	8f75                	and	a4,a4,a3
    8000d43a:	00e78463          	beq	a5,a4,8000d442 <tinst_tests_gpf+0x20e8>
    8000d43e:	be7fe06f          	j	8000c024 <tinst_tests_gpf+0xcca>
    8000d442:	bf7fe06f          	j	8000c038 <tinst_tests_gpf+0xcde>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000d446:	02043903          	ld	s2,32(s0)
    8000d44a:	6e0912e3          	bnez	s2,8000e32e <tinst_tests_gpf+0x2fd4>
    8000d44e:	00023597          	auipc	a1,0x23
    8000d452:	b6a58593          	addi	a1,a1,-1174 # 8002ffb8 <__func__.0+0x2c8>
    8000d456:	887fe06f          	j	8000bcdc <tinst_tests_gpf+0x982>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000d45a:	7018                	ld	a4,32(s0)
    8000d45c:	e319                	bnez	a4,8000d462 <tinst_tests_gpf+0x2108>
    8000d45e:	8e6fe06f          	j	8000b544 <tinst_tests_gpf+0x1ea>
    8000d462:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d464:	0016f793          	andi	a5,a3,1
    8000d468:	e7f5                	bnez	a5,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d46a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d46e:	460d                	li	a2,3
    8000d470:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d474:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d476:	00c59763          	bne	a1,a2,8000d484 <tinst_tests_gpf+0x212a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d47a:	0026d683          	lhu	a3,2(a3)
    8000d47e:	0106969b          	slliw	a3,a3,0x10
    8000d482:	8fd5                	or	a5,a5,a3
    8000d484:	03179493          	slli	s1,a5,0x31
    8000d488:	90c5                	srli	s1,s1,0x31
    8000d48a:	8c99                	sub	s1,s1,a4
    8000d48c:	0014b493          	seqz	s1,s1
    8000d490:	8b4fe06f          	j	8000b544 <tinst_tests_gpf+0x1ea>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000d494:	7018                	ld	a4,32(s0)
    8000d496:	e319                	bnez	a4,8000d49c <tinst_tests_gpf+0x2142>
    8000d498:	942fe06f          	j	8000b5da <tinst_tests_gpf+0x280>
    8000d49c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d49e:	0016f793          	andi	a5,a3,1
    8000d4a2:	ebcd                	bnez	a5,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d4a4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d4a8:	460d                	li	a2,3
    8000d4aa:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d4ae:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d4b0:	00c59763          	bne	a1,a2,8000d4be <tinst_tests_gpf+0x2164>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d4b4:	0026d683          	lhu	a3,2(a3)
    8000d4b8:	0106969b          	slliw	a3,a3,0x10
    8000d4bc:	8fd5                	or	a5,a5,a3
    8000d4be:	03179493          	slli	s1,a5,0x31
    8000d4c2:	90c5                	srli	s1,s1,0x31
    8000d4c4:	8c99                	sub	s1,s1,a4
    8000d4c6:	0014b493          	seqz	s1,s1
    8000d4ca:	910fe06f          	j	8000b5da <tinst_tests_gpf+0x280>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000d4ce:	7018                	ld	a4,32(s0)
    8000d4d0:	e319                	bnez	a4,8000d4d6 <tinst_tests_gpf+0x217c>
    8000d4d2:	9aafe06f          	j	8000b67c <tinst_tests_gpf+0x322>
    8000d4d6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d4d8:	0016f793          	andi	a5,a3,1
    8000d4dc:	efa5                	bnez	a5,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d4de:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d4e2:	460d                	li	a2,3
    8000d4e4:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d4e8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d4ea:	00c59763          	bne	a1,a2,8000d4f8 <tinst_tests_gpf+0x219e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d4ee:	0026d683          	lhu	a3,2(a3)
    8000d4f2:	0106969b          	slliw	a3,a3,0x10
    8000d4f6:	8fd5                	or	a5,a5,a3
    8000d4f8:	03179493          	slli	s1,a5,0x31
    8000d4fc:	90c5                	srli	s1,s1,0x31
    8000d4fe:	8c99                	sub	s1,s1,a4
    8000d500:	0014b493          	seqz	s1,s1
    8000d504:	978fe06f          	j	8000b67c <tinst_tests_gpf+0x322>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000d508:	7018                	ld	a4,32(s0)
    8000d50a:	e319                	bnez	a4,8000d510 <tinst_tests_gpf+0x21b6>
    8000d50c:	a12fe06f          	j	8000b71e <tinst_tests_gpf+0x3c4>
    8000d510:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d512:	0016f793          	andi	a5,a3,1
    8000d516:	ef9d                	bnez	a5,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d518:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d51c:	460d                	li	a2,3
    8000d51e:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d522:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d524:	00c59763          	bne	a1,a2,8000d532 <tinst_tests_gpf+0x21d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d528:	0026d683          	lhu	a3,2(a3)
    8000d52c:	0106969b          	slliw	a3,a3,0x10
    8000d530:	8fd5                	or	a5,a5,a3
    8000d532:	17c6                	slli	a5,a5,0x31
    8000d534:	0317d493          	srli	s1,a5,0x31
    8000d538:	8c99                	sub	s1,s1,a4
    8000d53a:	0014b493          	seqz	s1,s1
    8000d53e:	9e0fe06f          	j	8000b71e <tinst_tests_gpf+0x3c4>
    8000d542:	701c                	ld	a5,32(s0)
    8000d544:	e399                	bnez	a5,8000d54a <tinst_tests_gpf+0x21f0>
    8000d546:	9b8fe06f          	j	8000b6fe <tinst_tests_gpf+0x3a4>
    8000d54a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d54c:	0016f713          	andi	a4,a3,1
    8000d550:	320704e3          	beqz	a4,8000e078 <tinst_tests_gpf+0x2d1e>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    8000d554:	12300613          	li	a2,291
    8000d558:	00021597          	auipc	a1,0x21
    8000d55c:	ea058593          	addi	a1,a1,-352 # 8002e3f8 <__func__.1>
    8000d560:	00024517          	auipc	a0,0x24
    8000d564:	44050513          	addi	a0,a0,1088 # 800319a0 <__func__.0+0x1cb0>
    8000d568:	3251f0ef          	jal	8002d08c <printf>
    8000d56c:	12300613          	li	a2,291
    8000d570:	00021597          	auipc	a1,0x21
    8000d574:	e8858593          	addi	a1,a1,-376 # 8002e3f8 <__func__.1>
    8000d578:	00023517          	auipc	a0,0x23
    8000d57c:	be850513          	addi	a0,a0,-1048 # 80030160 <__func__.0+0x470>
    8000d580:	30d1f0ef          	jal	8002d08c <printf>
    8000d584:	4501                	li	a0,0
    8000d586:	6bc1f0ef          	jal	8002cc42 <exit>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000d58a:	701c                	ld	a5,32(s0)
    8000d58c:	00023597          	auipc	a1,0x23
    8000d590:	a2c58593          	addi	a1,a1,-1492 # 8002ffb8 <__func__.0+0x2c8>
    8000d594:	e399                	bnez	a5,8000d59a <tinst_tests_gpf+0x2240>
    8000d596:	ba5fe06f          	j	8000c13a <tinst_tests_gpf+0xde0>
    8000d59a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d59c:	0016f713          	andi	a4,a3,1
    8000d5a0:	fb55                	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d5a2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d5a6:	460d                	li	a2,3
    8000d5a8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d5ac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d5ae:	00c59763          	bne	a1,a2,8000d5bc <tinst_tests_gpf+0x2262>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d5b2:	0026d683          	lhu	a3,2(a3)
    8000d5b6:	0106969b          	slliw	a3,a3,0x10
    8000d5ba:	8f55                	or	a4,a4,a3
    8000d5bc:	1ffe16b7          	lui	a3,0x1ffe1
    8000d5c0:	068e                	slli	a3,a3,0x3
    8000d5c2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d5c4:	8f75                	and	a4,a4,a3
    8000d5c6:	00023597          	auipc	a1,0x23
    8000d5ca:	9f258593          	addi	a1,a1,-1550 # 8002ffb8 <__func__.0+0x2c8>
    8000d5ce:	00e79463          	bne	a5,a4,8000d5d6 <tinst_tests_gpf+0x227c>
    8000d5d2:	b69fe06f          	j	8000c13a <tinst_tests_gpf+0xde0>
    8000d5d6:	00023597          	auipc	a1,0x23
    8000d5da:	9f258593          	addi	a1,a1,-1550 # 8002ffc8 <__func__.0+0x2d8>
    8000d5de:	b5dfe06f          	j	8000c13a <tinst_tests_gpf+0xde0>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000d5e2:	701c                	ld	a5,32(s0)
    8000d5e4:	e399                	bnez	a5,8000d5ea <tinst_tests_gpf+0x2290>
    8000d5e6:	9bafe06f          	j	8000b7a0 <tinst_tests_gpf+0x446>
    8000d5ea:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d5ec:	0016f713          	andi	a4,a3,1
    8000d5f0:	f335                	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d5f2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d5f6:	460d                	li	a2,3
    8000d5f8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d5fc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d5fe:	00c59763          	bne	a1,a2,8000d60c <tinst_tests_gpf+0x22b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d602:	0026d683          	lhu	a3,2(a3)
    8000d606:	0106969b          	slliw	a3,a3,0x10
    8000d60a:	8f55                	or	a4,a4,a3
    8000d60c:	1746                	slli	a4,a4,0x31
    8000d60e:	9345                	srli	a4,a4,0x31
    8000d610:	00e78463          	beq	a5,a4,8000d618 <tinst_tests_gpf+0x22be>
    8000d614:	978fe06f          	j	8000b78c <tinst_tests_gpf+0x432>
    8000d618:	988fe06f          	j	8000b7a0 <tinst_tests_gpf+0x446>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000d61c:	701c                	ld	a5,32(s0)
    8000d61e:	00023597          	auipc	a1,0x23
    8000d622:	99a58593          	addi	a1,a1,-1638 # 8002ffb8 <__func__.0+0x2c8>
    8000d626:	e399                	bnez	a5,8000d62c <tinst_tests_gpf+0x22d2>
    8000d628:	bb5fe06f          	j	8000c1dc <tinst_tests_gpf+0xe82>
    8000d62c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d62e:	0016f713          	andi	a4,a3,1
    8000d632:	f30d                	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d634:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d638:	460d                	li	a2,3
    8000d63a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d63e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d640:	00c59763          	bne	a1,a2,8000d64e <tinst_tests_gpf+0x22f4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d644:	0026d683          	lhu	a3,2(a3)
    8000d648:	0106969b          	slliw	a3,a3,0x10
    8000d64c:	8f55                	or	a4,a4,a3
    8000d64e:	1ffe16b7          	lui	a3,0x1ffe1
    8000d652:	068e                	slli	a3,a3,0x3
    8000d654:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d656:	8f75                	and	a4,a4,a3
    8000d658:	00023597          	auipc	a1,0x23
    8000d65c:	96058593          	addi	a1,a1,-1696 # 8002ffb8 <__func__.0+0x2c8>
    8000d660:	00e79463          	bne	a5,a4,8000d668 <tinst_tests_gpf+0x230e>
    8000d664:	b79fe06f          	j	8000c1dc <tinst_tests_gpf+0xe82>
    8000d668:	00023597          	auipc	a1,0x23
    8000d66c:	96058593          	addi	a1,a1,-1696 # 8002ffc8 <__func__.0+0x2d8>
    8000d670:	b6dfe06f          	j	8000c1dc <tinst_tests_gpf+0xe82>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000d674:	701c                	ld	a5,32(s0)
    8000d676:	e399                	bnez	a5,8000d67c <tinst_tests_gpf+0x2322>
    8000d678:	9c2fe06f          	j	8000b83a <tinst_tests_gpf+0x4e0>
    8000d67c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d67e:	0016f713          	andi	a4,a3,1
    8000d682:	ec0719e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d686:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d68a:	460d                	li	a2,3
    8000d68c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d690:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d692:	00c59763          	bne	a1,a2,8000d6a0 <tinst_tests_gpf+0x2346>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d696:	0026d683          	lhu	a3,2(a3)
    8000d69a:	0106969b          	slliw	a3,a3,0x10
    8000d69e:	8f55                	or	a4,a4,a3
    8000d6a0:	1746                	slli	a4,a4,0x31
    8000d6a2:	9345                	srli	a4,a4,0x31
    8000d6a4:	00e78463          	beq	a5,a4,8000d6ac <tinst_tests_gpf+0x2352>
    8000d6a8:	97efe06f          	j	8000b826 <tinst_tests_gpf+0x4cc>
    8000d6ac:	98efe06f          	j	8000b83a <tinst_tests_gpf+0x4e0>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000d6b0:	701c                	ld	a5,32(s0)
    8000d6b2:	00023597          	auipc	a1,0x23
    8000d6b6:	90658593          	addi	a1,a1,-1786 # 8002ffb8 <__func__.0+0x2c8>
    8000d6ba:	e399                	bnez	a5,8000d6c0 <tinst_tests_gpf+0x2366>
    8000d6bc:	bc3fe06f          	j	8000c27e <tinst_tests_gpf+0xf24>
    8000d6c0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d6c2:	0016f713          	andi	a4,a3,1
    8000d6c6:	e80717e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d6ca:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d6ce:	460d                	li	a2,3
    8000d6d0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d6d4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d6d6:	00c59763          	bne	a1,a2,8000d6e4 <tinst_tests_gpf+0x238a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d6da:	0026d683          	lhu	a3,2(a3)
    8000d6de:	0106969b          	slliw	a3,a3,0x10
    8000d6e2:	8f55                	or	a4,a4,a3
    8000d6e4:	1ffe16b7          	lui	a3,0x1ffe1
    8000d6e8:	068e                	slli	a3,a3,0x3
    8000d6ea:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d6ec:	8f75                	and	a4,a4,a3
    8000d6ee:	00023597          	auipc	a1,0x23
    8000d6f2:	8ca58593          	addi	a1,a1,-1846 # 8002ffb8 <__func__.0+0x2c8>
    8000d6f6:	00e79463          	bne	a5,a4,8000d6fe <tinst_tests_gpf+0x23a4>
    8000d6fa:	b85fe06f          	j	8000c27e <tinst_tests_gpf+0xf24>
    8000d6fe:	00023597          	auipc	a1,0x23
    8000d702:	8ca58593          	addi	a1,a1,-1846 # 8002ffc8 <__func__.0+0x2d8>
    8000d706:	b79fe06f          	j	8000c27e <tinst_tests_gpf+0xf24>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000d70a:	701c                	ld	a5,32(s0)
    8000d70c:	e399                	bnez	a5,8000d712 <tinst_tests_gpf+0x23b8>
    8000d70e:	9c8fe06f          	j	8000b8d6 <tinst_tests_gpf+0x57c>
    8000d712:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d714:	0016f713          	andi	a4,a3,1
    8000d718:	e2071ee3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d71c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d720:	460d                	li	a2,3
    8000d722:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d726:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d728:	00c59763          	bne	a1,a2,8000d736 <tinst_tests_gpf+0x23dc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d72c:	0026d683          	lhu	a3,2(a3)
    8000d730:	0106969b          	slliw	a3,a3,0x10
    8000d734:	8f55                	or	a4,a4,a3
    8000d736:	01f076b7          	lui	a3,0x1f07
    8000d73a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d73e:	8f75                	and	a4,a4,a3
    8000d740:	00e78463          	beq	a5,a4,8000d748 <tinst_tests_gpf+0x23ee>
    8000d744:	97efe06f          	j	8000b8c2 <tinst_tests_gpf+0x568>
    8000d748:	98efe06f          	j	8000b8d6 <tinst_tests_gpf+0x57c>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000d74c:	701c                	ld	a5,32(s0)
    8000d74e:	00023597          	auipc	a1,0x23
    8000d752:	86a58593          	addi	a1,a1,-1942 # 8002ffb8 <__func__.0+0x2c8>
    8000d756:	e399                	bnez	a5,8000d75c <tinst_tests_gpf+0x2402>
    8000d758:	bc9fe06f          	j	8000c320 <tinst_tests_gpf+0xfc6>
    8000d75c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d75e:	0016f713          	andi	a4,a3,1
    8000d762:	de0719e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d766:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d76a:	460d                	li	a2,3
    8000d76c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d770:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d772:	00c59763          	bne	a1,a2,8000d780 <tinst_tests_gpf+0x2426>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d776:	0026d683          	lhu	a3,2(a3)
    8000d77a:	0106969b          	slliw	a3,a3,0x10
    8000d77e:	8f55                	or	a4,a4,a3
    8000d780:	1ffe16b7          	lui	a3,0x1ffe1
    8000d784:	068e                	slli	a3,a3,0x3
    8000d786:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d788:	8f75                	and	a4,a4,a3
    8000d78a:	00023597          	auipc	a1,0x23
    8000d78e:	82e58593          	addi	a1,a1,-2002 # 8002ffb8 <__func__.0+0x2c8>
    8000d792:	00e79463          	bne	a5,a4,8000d79a <tinst_tests_gpf+0x2440>
    8000d796:	b8bfe06f          	j	8000c320 <tinst_tests_gpf+0xfc6>
    8000d79a:	00023597          	auipc	a1,0x23
    8000d79e:	82e58593          	addi	a1,a1,-2002 # 8002ffc8 <__func__.0+0x2d8>
    8000d7a2:	b7ffe06f          	j	8000c320 <tinst_tests_gpf+0xfc6>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d7a6:	701c                	ld	a5,32(s0)
    8000d7a8:	e399                	bnez	a5,8000d7ae <tinst_tests_gpf+0x2454>
    8000d7aa:	9ccfe06f          	j	8000b976 <tinst_tests_gpf+0x61c>
    8000d7ae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d7b0:	0016f713          	andi	a4,a3,1
    8000d7b4:	da0710e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d7b8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d7bc:	460d                	li	a2,3
    8000d7be:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d7c2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d7c4:	00c59763          	bne	a1,a2,8000d7d2 <tinst_tests_gpf+0x2478>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d7c8:	0026d683          	lhu	a3,2(a3)
    8000d7cc:	0106969b          	slliw	a3,a3,0x10
    8000d7d0:	8f55                	or	a4,a4,a3
    8000d7d2:	01f076b7          	lui	a3,0x1f07
    8000d7d6:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d7da:	8f75                	and	a4,a4,a3
    8000d7dc:	00e78463          	beq	a5,a4,8000d7e4 <tinst_tests_gpf+0x248a>
    8000d7e0:	982fe06f          	j	8000b962 <tinst_tests_gpf+0x608>
    8000d7e4:	992fe06f          	j	8000b976 <tinst_tests_gpf+0x61c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000d7e8:	701c                	ld	a5,32(s0)
    8000d7ea:	00022597          	auipc	a1,0x22
    8000d7ee:	7ce58593          	addi	a1,a1,1998 # 8002ffb8 <__func__.0+0x2c8>
    8000d7f2:	e399                	bnez	a5,8000d7f8 <tinst_tests_gpf+0x249e>
    8000d7f4:	bd5fe06f          	j	8000c3c8 <tinst_tests_gpf+0x106e>
    8000d7f8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d7fa:	0016f713          	andi	a4,a3,1
    8000d7fe:	d4071be3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d802:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d806:	460d                	li	a2,3
    8000d808:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d80c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d80e:	00c59763          	bne	a1,a2,8000d81c <tinst_tests_gpf+0x24c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d812:	0026d683          	lhu	a3,2(a3)
    8000d816:	0106969b          	slliw	a3,a3,0x10
    8000d81a:	8f55                	or	a4,a4,a3
    8000d81c:	1ffe16b7          	lui	a3,0x1ffe1
    8000d820:	068e                	slli	a3,a3,0x3
    8000d822:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d824:	8f75                	and	a4,a4,a3
    8000d826:	00022597          	auipc	a1,0x22
    8000d82a:	79258593          	addi	a1,a1,1938 # 8002ffb8 <__func__.0+0x2c8>
    8000d82e:	00e79463          	bne	a5,a4,8000d836 <tinst_tests_gpf+0x24dc>
    8000d832:	b97fe06f          	j	8000c3c8 <tinst_tests_gpf+0x106e>
    8000d836:	00022597          	auipc	a1,0x22
    8000d83a:	79258593          	addi	a1,a1,1938 # 8002ffc8 <__func__.0+0x2d8>
    8000d83e:	b8bfe06f          	j	8000c3c8 <tinst_tests_gpf+0x106e>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d842:	701c                	ld	a5,32(s0)
    8000d844:	e399                	bnez	a5,8000d84a <tinst_tests_gpf+0x24f0>
    8000d846:	9d2fe06f          	j	8000ba18 <tinst_tests_gpf+0x6be>
    8000d84a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d84c:	0016f713          	andi	a4,a3,1
    8000d850:	d00712e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d854:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d858:	460d                	li	a2,3
    8000d85a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d85e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d860:	00c59763          	bne	a1,a2,8000d86e <tinst_tests_gpf+0x2514>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d864:	0026d683          	lhu	a3,2(a3)
    8000d868:	0106969b          	slliw	a3,a3,0x10
    8000d86c:	8f55                	or	a4,a4,a3
    8000d86e:	01f076b7          	lui	a3,0x1f07
    8000d872:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d876:	8f75                	and	a4,a4,a3
    8000d878:	00e78463          	beq	a5,a4,8000d880 <tinst_tests_gpf+0x2526>
    8000d87c:	988fe06f          	j	8000ba04 <tinst_tests_gpf+0x6aa>
    8000d880:	998fe06f          	j	8000ba18 <tinst_tests_gpf+0x6be>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000d884:	701c                	ld	a5,32(s0)
    8000d886:	00022597          	auipc	a1,0x22
    8000d88a:	73258593          	addi	a1,a1,1842 # 8002ffb8 <__func__.0+0x2c8>
    8000d88e:	e399                	bnez	a5,8000d894 <tinst_tests_gpf+0x253a>
    8000d890:	bdbfe06f          	j	8000c46a <tinst_tests_gpf+0x1110>
    8000d894:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d896:	0016f713          	andi	a4,a3,1
    8000d89a:	ca071de3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d89e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d8a2:	460d                	li	a2,3
    8000d8a4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d8a8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d8aa:	00c59763          	bne	a1,a2,8000d8b8 <tinst_tests_gpf+0x255e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d8ae:	0026d683          	lhu	a3,2(a3)
    8000d8b2:	0106969b          	slliw	a3,a3,0x10
    8000d8b6:	8f55                	or	a4,a4,a3
    8000d8b8:	1ffe16b7          	lui	a3,0x1ffe1
    8000d8bc:	068e                	slli	a3,a3,0x3
    8000d8be:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d8c0:	8f75                	and	a4,a4,a3
    8000d8c2:	00022597          	auipc	a1,0x22
    8000d8c6:	6f658593          	addi	a1,a1,1782 # 8002ffb8 <__func__.0+0x2c8>
    8000d8ca:	00e79463          	bne	a5,a4,8000d8d2 <tinst_tests_gpf+0x2578>
    8000d8ce:	b9dfe06f          	j	8000c46a <tinst_tests_gpf+0x1110>
    8000d8d2:	00022597          	auipc	a1,0x22
    8000d8d6:	6f658593          	addi	a1,a1,1782 # 8002ffc8 <__func__.0+0x2d8>
    8000d8da:	b91fe06f          	j	8000c46a <tinst_tests_gpf+0x1110>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d8de:	701c                	ld	a5,32(s0)
    8000d8e0:	e399                	bnez	a5,8000d8e6 <tinst_tests_gpf+0x258c>
    8000d8e2:	9dafe06f          	j	8000babc <tinst_tests_gpf+0x762>
    8000d8e6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d8e8:	0016f713          	andi	a4,a3,1
    8000d8ec:	c60714e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d8f0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d8f4:	460d                	li	a2,3
    8000d8f6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d8fa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d8fc:	00c59763          	bne	a1,a2,8000d90a <tinst_tests_gpf+0x25b0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d900:	0026d683          	lhu	a3,2(a3)
    8000d904:	0106969b          	slliw	a3,a3,0x10
    8000d908:	8f55                	or	a4,a4,a3
    8000d90a:	01f076b7          	lui	a3,0x1f07
    8000d90e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d912:	8f75                	and	a4,a4,a3
    8000d914:	00e78463          	beq	a5,a4,8000d91c <tinst_tests_gpf+0x25c2>
    8000d918:	990fe06f          	j	8000baa8 <tinst_tests_gpf+0x74e>
    8000d91c:	9a0fe06f          	j	8000babc <tinst_tests_gpf+0x762>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000d920:	701c                	ld	a5,32(s0)
    8000d922:	00022597          	auipc	a1,0x22
    8000d926:	69658593          	addi	a1,a1,1686 # 8002ffb8 <__func__.0+0x2c8>
    8000d92a:	e399                	bnez	a5,8000d930 <tinst_tests_gpf+0x25d6>
    8000d92c:	be1fe06f          	j	8000c50c <tinst_tests_gpf+0x11b2>
    8000d930:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d932:	0016f713          	andi	a4,a3,1
    8000d936:	c0071fe3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d93a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d93e:	460d                	li	a2,3
    8000d940:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d944:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d946:	00c59763          	bne	a1,a2,8000d954 <tinst_tests_gpf+0x25fa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d94a:	0026d683          	lhu	a3,2(a3)
    8000d94e:	0106969b          	slliw	a3,a3,0x10
    8000d952:	8f55                	or	a4,a4,a3
    8000d954:	1ffe16b7          	lui	a3,0x1ffe1
    8000d958:	068e                	slli	a3,a3,0x3
    8000d95a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d95c:	8f75                	and	a4,a4,a3
    8000d95e:	00022597          	auipc	a1,0x22
    8000d962:	65a58593          	addi	a1,a1,1626 # 8002ffb8 <__func__.0+0x2c8>
    8000d966:	00e79463          	bne	a5,a4,8000d96e <tinst_tests_gpf+0x2614>
    8000d96a:	ba3fe06f          	j	8000c50c <tinst_tests_gpf+0x11b2>
    8000d96e:	00022597          	auipc	a1,0x22
    8000d972:	65a58593          	addi	a1,a1,1626 # 8002ffc8 <__func__.0+0x2d8>
    8000d976:	b97fe06f          	j	8000c50c <tinst_tests_gpf+0x11b2>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d97a:	02043903          	ld	s2,32(s0)
    8000d97e:	00091463          	bnez	s2,8000d986 <tinst_tests_gpf+0x262c>
    8000d982:	9cefe06f          	j	8000bb50 <tinst_tests_gpf+0x7f6>
    8000d986:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d988:	0017f713          	andi	a4,a5,1
    8000d98c:	bc0714e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d990:	0007d503          	lhu	a0,0(a5)
    8000d994:	e5bf30ef          	jal	800017ee <expand_compressed_instruction>
    8000d998:	67a1                	lui	a5,0x8
    8000d99a:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d99c:	8d7d                	and	a0,a0,a5
    8000d99e:	00a90463          	beq	s2,a0,8000d9a6 <tinst_tests_gpf+0x264c>
    8000d9a2:	99afe06f          	j	8000bb3c <tinst_tests_gpf+0x7e2>
    8000d9a6:	9aafe06f          	j	8000bb50 <tinst_tests_gpf+0x7f6>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000d9aa:	701c                	ld	a5,32(s0)
    8000d9ac:	00022597          	auipc	a1,0x22
    8000d9b0:	60c58593          	addi	a1,a1,1548 # 8002ffb8 <__func__.0+0x2c8>
    8000d9b4:	e399                	bnez	a5,8000d9ba <tinst_tests_gpf+0x2660>
    8000d9b6:	bf9fe06f          	j	8000c5ae <tinst_tests_gpf+0x1254>
    8000d9ba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d9bc:	0016f713          	andi	a4,a3,1
    8000d9c0:	b8071ae3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d9c4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d9c8:	460d                	li	a2,3
    8000d9ca:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d9ce:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d9d0:	00c59763          	bne	a1,a2,8000d9de <tinst_tests_gpf+0x2684>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d9d4:	0026d683          	lhu	a3,2(a3)
    8000d9d8:	0106969b          	slliw	a3,a3,0x10
    8000d9dc:	8f55                	or	a4,a4,a3
    8000d9de:	1ffe16b7          	lui	a3,0x1ffe1
    8000d9e2:	068e                	slli	a3,a3,0x3
    8000d9e4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d9e6:	8f75                	and	a4,a4,a3
    8000d9e8:	00022597          	auipc	a1,0x22
    8000d9ec:	5d058593          	addi	a1,a1,1488 # 8002ffb8 <__func__.0+0x2c8>
    8000d9f0:	00e79463          	bne	a5,a4,8000d9f8 <tinst_tests_gpf+0x269e>
    8000d9f4:	bbbfe06f          	j	8000c5ae <tinst_tests_gpf+0x1254>
    8000d9f8:	00022597          	auipc	a1,0x22
    8000d9fc:	5d058593          	addi	a1,a1,1488 # 8002ffc8 <__func__.0+0x2d8>
    8000da00:	baffe06f          	j	8000c5ae <tinst_tests_gpf+0x1254>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000da04:	02043983          	ld	s3,32(s0)
    8000da08:	00099463          	bnez	s3,8000da10 <tinst_tests_gpf+0x26b6>
    8000da0c:	9dafe06f          	j	8000bbe6 <tinst_tests_gpf+0x88c>
    8000da10:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000da12:	0017f713          	andi	a4,a5,1
    8000da16:	b2071fe3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000da1a:	0007d503          	lhu	a0,0(a5)
    8000da1e:	dd1f30ef          	jal	800017ee <expand_compressed_instruction>
    8000da22:	67a1                	lui	a5,0x8
    8000da24:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000da26:	8d7d                	and	a0,a0,a5
    8000da28:	00a98463          	beq	s3,a0,8000da30 <tinst_tests_gpf+0x26d6>
    8000da2c:	9a6fe06f          	j	8000bbd2 <tinst_tests_gpf+0x878>
    8000da30:	9b6fe06f          	j	8000bbe6 <tinst_tests_gpf+0x88c>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000da34:	701c                	ld	a5,32(s0)
    8000da36:	00022597          	auipc	a1,0x22
    8000da3a:	58258593          	addi	a1,a1,1410 # 8002ffb8 <__func__.0+0x2c8>
    8000da3e:	e399                	bnez	a5,8000da44 <tinst_tests_gpf+0x26ea>
    8000da40:	c11fe06f          	j	8000c650 <tinst_tests_gpf+0x12f6>
    8000da44:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000da46:	0016f713          	andi	a4,a3,1
    8000da4a:	b00715e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000da4e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000da52:	460d                	li	a2,3
    8000da54:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000da58:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000da5a:	00c59763          	bne	a1,a2,8000da68 <tinst_tests_gpf+0x270e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000da5e:	0026d683          	lhu	a3,2(a3)
    8000da62:	0106969b          	slliw	a3,a3,0x10
    8000da66:	8f55                	or	a4,a4,a3
    8000da68:	1ffe16b7          	lui	a3,0x1ffe1
    8000da6c:	068e                	slli	a3,a3,0x3
    8000da6e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000da70:	8f75                	and	a4,a4,a3
    8000da72:	00022597          	auipc	a1,0x22
    8000da76:	54658593          	addi	a1,a1,1350 # 8002ffb8 <__func__.0+0x2c8>
    8000da7a:	00e79463          	bne	a5,a4,8000da82 <tinst_tests_gpf+0x2728>
    8000da7e:	bd3fe06f          	j	8000c650 <tinst_tests_gpf+0x12f6>
    8000da82:	00022597          	auipc	a1,0x22
    8000da86:	54658593          	addi	a1,a1,1350 # 8002ffc8 <__func__.0+0x2d8>
    8000da8a:	bc7fe06f          	j	8000c650 <tinst_tests_gpf+0x12f6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000da8e:	02043983          	ld	s3,32(s0)
    8000da92:	00099463          	bnez	s3,8000da9a <tinst_tests_gpf+0x2740>
    8000da96:	9e6fe06f          	j	8000bc7c <tinst_tests_gpf+0x922>
    8000da9a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000da9c:	0017f713          	andi	a4,a5,1
    8000daa0:	aa071ae3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000daa4:	0007d503          	lhu	a0,0(a5)
    8000daa8:	d47f30ef          	jal	800017ee <expand_compressed_instruction>
    8000daac:	01f077b7          	lui	a5,0x1f07
    8000dab0:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000dab4:	8d7d                	and	a0,a0,a5
    8000dab6:	00a98463          	beq	s3,a0,8000dabe <tinst_tests_gpf+0x2764>
    8000daba:	9aefe06f          	j	8000bc68 <tinst_tests_gpf+0x90e>
    8000dabe:	9befe06f          	j	8000bc7c <tinst_tests_gpf+0x922>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000dac2:	701c                	ld	a5,32(s0)
    8000dac4:	00022597          	auipc	a1,0x22
    8000dac8:	4f458593          	addi	a1,a1,1268 # 8002ffb8 <__func__.0+0x2c8>
    8000dacc:	e399                	bnez	a5,8000dad2 <tinst_tests_gpf+0x2778>
    8000dace:	c25fe06f          	j	8000c6f2 <tinst_tests_gpf+0x1398>
    8000dad2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dad4:	0016f713          	andi	a4,a3,1
    8000dad8:	a6071ee3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dadc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dae0:	460d                	li	a2,3
    8000dae2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dae6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dae8:	00c59763          	bne	a1,a2,8000daf6 <tinst_tests_gpf+0x279c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000daec:	0026d683          	lhu	a3,2(a3)
    8000daf0:	0106969b          	slliw	a3,a3,0x10
    8000daf4:	8f55                	or	a4,a4,a3
    8000daf6:	1ffe16b7          	lui	a3,0x1ffe1
    8000dafa:	068e                	slli	a3,a3,0x3
    8000dafc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dafe:	8f75                	and	a4,a4,a3
    8000db00:	00022597          	auipc	a1,0x22
    8000db04:	4b858593          	addi	a1,a1,1208 # 8002ffb8 <__func__.0+0x2c8>
    8000db08:	00e79463          	bne	a5,a4,8000db10 <tinst_tests_gpf+0x27b6>
    8000db0c:	be7fe06f          	j	8000c6f2 <tinst_tests_gpf+0x1398>
    8000db10:	00022597          	auipc	a1,0x22
    8000db14:	4b858593          	addi	a1,a1,1208 # 8002ffc8 <__func__.0+0x2d8>
    8000db18:	bdbfe06f          	j	8000c6f2 <tinst_tests_gpf+0x1398>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000db1c:	02043903          	ld	s2,32(s0)
    8000db20:	00091463          	bnez	s2,8000db28 <tinst_tests_gpf+0x27ce>
    8000db24:	9eefe06f          	j	8000bd12 <tinst_tests_gpf+0x9b8>
    8000db28:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000db2a:	0017f713          	andi	a4,a5,1
    8000db2e:	a20713e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000db32:	0007d503          	lhu	a0,0(a5)
    8000db36:	cb9f30ef          	jal	800017ee <expand_compressed_instruction>
    8000db3a:	01f077b7          	lui	a5,0x1f07
    8000db3e:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000db42:	8d7d                	and	a0,a0,a5
    8000db44:	00a90463          	beq	s2,a0,8000db4c <tinst_tests_gpf+0x27f2>
    8000db48:	9b6fe06f          	j	8000bcfe <tinst_tests_gpf+0x9a4>
    8000db4c:	9c6fe06f          	j	8000bd12 <tinst_tests_gpf+0x9b8>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000db50:	701c                	ld	a5,32(s0)
    8000db52:	00022597          	auipc	a1,0x22
    8000db56:	46658593          	addi	a1,a1,1126 # 8002ffb8 <__func__.0+0x2c8>
    8000db5a:	e399                	bnez	a5,8000db60 <tinst_tests_gpf+0x2806>
    8000db5c:	c39fe06f          	j	8000c794 <tinst_tests_gpf+0x143a>
    8000db60:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000db62:	0016f713          	andi	a4,a3,1
    8000db66:	9e0717e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000db6a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db6e:	460d                	li	a2,3
    8000db70:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db74:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db76:	00c59763          	bne	a1,a2,8000db84 <tinst_tests_gpf+0x282a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db7a:	0026d683          	lhu	a3,2(a3)
    8000db7e:	0106969b          	slliw	a3,a3,0x10
    8000db82:	8f55                	or	a4,a4,a3
    8000db84:	1ffe16b7          	lui	a3,0x1ffe1
    8000db88:	068e                	slli	a3,a3,0x3
    8000db8a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db8c:	8f75                	and	a4,a4,a3
    8000db8e:	00022597          	auipc	a1,0x22
    8000db92:	42a58593          	addi	a1,a1,1066 # 8002ffb8 <__func__.0+0x2c8>
    8000db96:	00e79463          	bne	a5,a4,8000db9e <tinst_tests_gpf+0x2844>
    8000db9a:	bfbfe06f          	j	8000c794 <tinst_tests_gpf+0x143a>
    8000db9e:	00022597          	auipc	a1,0x22
    8000dba2:	42a58593          	addi	a1,a1,1066 # 8002ffc8 <__func__.0+0x2d8>
    8000dba6:	beffe06f          	j	8000c794 <tinst_tests_gpf+0x143a>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000dbaa:	701c                	ld	a5,32(s0)
    8000dbac:	e399                	bnez	a5,8000dbb2 <tinst_tests_gpf+0x2858>
    8000dbae:	a0cfe06f          	j	8000bdba <tinst_tests_gpf+0xa60>
    8000dbb2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dbb4:	0016f713          	andi	a4,a3,1
    8000dbb8:	98071ee3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dbbc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dbc0:	460d                	li	a2,3
    8000dbc2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dbc6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dbc8:	00c59763          	bne	a1,a2,8000dbd6 <tinst_tests_gpf+0x287c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dbcc:	0026d683          	lhu	a3,2(a3)
    8000dbd0:	0106969b          	slliw	a3,a3,0x10
    8000dbd4:	8f55                	or	a4,a4,a3
    8000dbd6:	1ffe16b7          	lui	a3,0x1ffe1
    8000dbda:	068e                	slli	a3,a3,0x3
    8000dbdc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dbde:	8f75                	and	a4,a4,a3
    8000dbe0:	00e78463          	beq	a5,a4,8000dbe8 <tinst_tests_gpf+0x288e>
    8000dbe4:	9c2fe06f          	j	8000bda6 <tinst_tests_gpf+0xa4c>
    8000dbe8:	9d2fe06f          	j	8000bdba <tinst_tests_gpf+0xa60>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000dbec:	701c                	ld	a5,32(s0)
    8000dbee:	00022597          	auipc	a1,0x22
    8000dbf2:	3ca58593          	addi	a1,a1,970 # 8002ffb8 <__func__.0+0x2c8>
    8000dbf6:	e399                	bnez	a5,8000dbfc <tinst_tests_gpf+0x28a2>
    8000dbf8:	c37fe06f          	j	8000c82e <tinst_tests_gpf+0x14d4>
    8000dbfc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dbfe:	0016f713          	andi	a4,a3,1
    8000dc02:	940719e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dc06:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc0a:	460d                	li	a2,3
    8000dc0c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dc10:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dc12:	00c59763          	bne	a1,a2,8000dc20 <tinst_tests_gpf+0x28c6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc16:	0026d683          	lhu	a3,2(a3)
    8000dc1a:	0106969b          	slliw	a3,a3,0x10
    8000dc1e:	8f55                	or	a4,a4,a3
    8000dc20:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc24:	068e                	slli	a3,a3,0x3
    8000dc26:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc28:	8f75                	and	a4,a4,a3
    8000dc2a:	00022597          	auipc	a1,0x22
    8000dc2e:	38e58593          	addi	a1,a1,910 # 8002ffb8 <__func__.0+0x2c8>
    8000dc32:	00e79463          	bne	a5,a4,8000dc3a <tinst_tests_gpf+0x28e0>
    8000dc36:	bf9fe06f          	j	8000c82e <tinst_tests_gpf+0x14d4>
    8000dc3a:	00022597          	auipc	a1,0x22
    8000dc3e:	38e58593          	addi	a1,a1,910 # 8002ffc8 <__func__.0+0x2d8>
    8000dc42:	bedfe06f          	j	8000c82e <tinst_tests_gpf+0x14d4>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000dc46:	701c                	ld	a5,32(s0)
    8000dc48:	00022597          	auipc	a1,0x22
    8000dc4c:	37058593          	addi	a1,a1,880 # 8002ffb8 <__func__.0+0x2c8>
    8000dc50:	e399                	bnez	a5,8000dc56 <tinst_tests_gpf+0x28fc>
    8000dc52:	c77fe06f          	j	8000c8c8 <tinst_tests_gpf+0x156e>
    8000dc56:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc58:	0016f713          	andi	a4,a3,1
    8000dc5c:	8e071ce3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dc60:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc64:	460d                	li	a2,3
    8000dc66:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dc6a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dc6c:	00c59763          	bne	a1,a2,8000dc7a <tinst_tests_gpf+0x2920>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc70:	0026d683          	lhu	a3,2(a3)
    8000dc74:	0106969b          	slliw	a3,a3,0x10
    8000dc78:	8f55                	or	a4,a4,a3
    8000dc7a:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc7e:	068e                	slli	a3,a3,0x3
    8000dc80:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc82:	8f75                	and	a4,a4,a3
    8000dc84:	00022597          	auipc	a1,0x22
    8000dc88:	33458593          	addi	a1,a1,820 # 8002ffb8 <__func__.0+0x2c8>
    8000dc8c:	00e79463          	bne	a5,a4,8000dc94 <tinst_tests_gpf+0x293a>
    8000dc90:	c39fe06f          	j	8000c8c8 <tinst_tests_gpf+0x156e>
    8000dc94:	00022597          	auipc	a1,0x22
    8000dc98:	33458593          	addi	a1,a1,820 # 8002ffc8 <__func__.0+0x2d8>
    8000dc9c:	c2dfe06f          	j	8000c8c8 <tinst_tests_gpf+0x156e>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000dca0:	701c                	ld	a5,32(s0)
    8000dca2:	00022597          	auipc	a1,0x22
    8000dca6:	31658593          	addi	a1,a1,790 # 8002ffb8 <__func__.0+0x2c8>
    8000dcaa:	e399                	bnez	a5,8000dcb0 <tinst_tests_gpf+0x2956>
    8000dcac:	cb7fe06f          	j	8000c962 <tinst_tests_gpf+0x1608>
    8000dcb0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dcb2:	0016f713          	andi	a4,a3,1
    8000dcb6:	88071fe3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dcba:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dcbe:	460d                	li	a2,3
    8000dcc0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dcc4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dcc6:	00c59763          	bne	a1,a2,8000dcd4 <tinst_tests_gpf+0x297a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dcca:	0026d683          	lhu	a3,2(a3)
    8000dcce:	0106969b          	slliw	a3,a3,0x10
    8000dcd2:	8f55                	or	a4,a4,a3
    8000dcd4:	1ffe16b7          	lui	a3,0x1ffe1
    8000dcd8:	068e                	slli	a3,a3,0x3
    8000dcda:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dcdc:	8f75                	and	a4,a4,a3
    8000dcde:	00022597          	auipc	a1,0x22
    8000dce2:	2da58593          	addi	a1,a1,730 # 8002ffb8 <__func__.0+0x2c8>
    8000dce6:	00e79463          	bne	a5,a4,8000dcee <tinst_tests_gpf+0x2994>
    8000dcea:	c79fe06f          	j	8000c962 <tinst_tests_gpf+0x1608>
    8000dcee:	00022597          	auipc	a1,0x22
    8000dcf2:	2da58593          	addi	a1,a1,730 # 8002ffc8 <__func__.0+0x2d8>
    8000dcf6:	c6dfe06f          	j	8000c962 <tinst_tests_gpf+0x1608>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000dcfa:	701c                	ld	a5,32(s0)
    8000dcfc:	e399                	bnez	a5,8000dd02 <tinst_tests_gpf+0x29a8>
    8000dcfe:	bd0fe06f          	j	8000c0ce <tinst_tests_gpf+0xd74>
    8000dd02:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd04:	0016f713          	andi	a4,a3,1
    8000dd08:	840716e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dd0c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd10:	460d                	li	a2,3
    8000dd12:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd16:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd18:	00c59763          	bne	a1,a2,8000dd26 <tinst_tests_gpf+0x29cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd1c:	0026d683          	lhu	a3,2(a3)
    8000dd20:	0106969b          	slliw	a3,a3,0x10
    8000dd24:	8f55                	or	a4,a4,a3
    8000dd26:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd2a:	068e                	slli	a3,a3,0x3
    8000dd2c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd2e:	8f75                	and	a4,a4,a3
    8000dd30:	00e78463          	beq	a5,a4,8000dd38 <tinst_tests_gpf+0x29de>
    8000dd34:	b86fe06f          	j	8000c0ba <tinst_tests_gpf+0xd60>
    8000dd38:	b96fe06f          	j	8000c0ce <tinst_tests_gpf+0xd74>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000dd3c:	701c                	ld	a5,32(s0)
    8000dd3e:	e399                	bnez	a5,8000dd44 <tinst_tests_gpf+0x29ea>
    8000dd40:	c30fe06f          	j	8000c170 <tinst_tests_gpf+0xe16>
    8000dd44:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd46:	0016f713          	andi	a4,a3,1
    8000dd4a:	800715e3          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dd4e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd52:	460d                	li	a2,3
    8000dd54:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd58:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd5a:	00c59763          	bne	a1,a2,8000dd68 <tinst_tests_gpf+0x2a0e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd5e:	0026d683          	lhu	a3,2(a3)
    8000dd62:	0106969b          	slliw	a3,a3,0x10
    8000dd66:	8f55                	or	a4,a4,a3
    8000dd68:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd6c:	068e                	slli	a3,a3,0x3
    8000dd6e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd70:	8f75                	and	a4,a4,a3
    8000dd72:	00e78463          	beq	a5,a4,8000dd7a <tinst_tests_gpf+0x2a20>
    8000dd76:	be6fe06f          	j	8000c15c <tinst_tests_gpf+0xe02>
    8000dd7a:	bf6fe06f          	j	8000c170 <tinst_tests_gpf+0xe16>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000dd7e:	701c                	ld	a5,32(s0)
    8000dd80:	e399                	bnez	a5,8000dd86 <tinst_tests_gpf+0x2a2c>
    8000dd82:	c90fe06f          	j	8000c212 <tinst_tests_gpf+0xeb8>
    8000dd86:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd88:	0016f713          	andi	a4,a3,1
    8000dd8c:	fc071463          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dd90:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd94:	460d                	li	a2,3
    8000dd96:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd9a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd9c:	00c59763          	bne	a1,a2,8000ddaa <tinst_tests_gpf+0x2a50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dda0:	0026d683          	lhu	a3,2(a3)
    8000dda4:	0106969b          	slliw	a3,a3,0x10
    8000dda8:	8f55                	or	a4,a4,a3
    8000ddaa:	1ffe16b7          	lui	a3,0x1ffe1
    8000ddae:	068e                	slli	a3,a3,0x3
    8000ddb0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ddb2:	8f75                	and	a4,a4,a3
    8000ddb4:	00e78463          	beq	a5,a4,8000ddbc <tinst_tests_gpf+0x2a62>
    8000ddb8:	c46fe06f          	j	8000c1fe <tinst_tests_gpf+0xea4>
    8000ddbc:	c56fe06f          	j	8000c212 <tinst_tests_gpf+0xeb8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000ddc0:	701c                	ld	a5,32(s0)
    8000ddc2:	e399                	bnez	a5,8000ddc8 <tinst_tests_gpf+0x2a6e>
    8000ddc4:	cf0fe06f          	j	8000c2b4 <tinst_tests_gpf+0xf5a>
    8000ddc8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ddca:	0016f713          	andi	a4,a3,1
    8000ddce:	f8071363          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ddd2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ddd6:	460d                	li	a2,3
    8000ddd8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dddc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ddde:	00c59763          	bne	a1,a2,8000ddec <tinst_tests_gpf+0x2a92>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dde2:	0026d683          	lhu	a3,2(a3)
    8000dde6:	0106969b          	slliw	a3,a3,0x10
    8000ddea:	8f55                	or	a4,a4,a3
    8000ddec:	1ffe16b7          	lui	a3,0x1ffe1
    8000ddf0:	068e                	slli	a3,a3,0x3
    8000ddf2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ddf4:	8f75                	and	a4,a4,a3
    8000ddf6:	00e78463          	beq	a5,a4,8000ddfe <tinst_tests_gpf+0x2aa4>
    8000ddfa:	ca6fe06f          	j	8000c2a0 <tinst_tests_gpf+0xf46>
    8000ddfe:	cb6fe06f          	j	8000c2b4 <tinst_tests_gpf+0xf5a>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000de02:	701c                	ld	a5,32(s0)
    8000de04:	e399                	bnez	a5,8000de0a <tinst_tests_gpf+0x2ab0>
    8000de06:	d50fe06f          	j	8000c356 <tinst_tests_gpf+0xffc>
    8000de0a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de0c:	0016f713          	andi	a4,a3,1
    8000de10:	f4071263          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000de14:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de18:	460d                	li	a2,3
    8000de1a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de1e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de20:	00c59763          	bne	a1,a2,8000de2e <tinst_tests_gpf+0x2ad4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de24:	0026d683          	lhu	a3,2(a3)
    8000de28:	0106969b          	slliw	a3,a3,0x10
    8000de2c:	8f55                	or	a4,a4,a3
    8000de2e:	1ffe16b7          	lui	a3,0x1ffe1
    8000de32:	068e                	slli	a3,a3,0x3
    8000de34:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de36:	8f75                	and	a4,a4,a3
    8000de38:	00e78463          	beq	a5,a4,8000de40 <tinst_tests_gpf+0x2ae6>
    8000de3c:	d06fe06f          	j	8000c342 <tinst_tests_gpf+0xfe8>
    8000de40:	d16fe06f          	j	8000c356 <tinst_tests_gpf+0xffc>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000de44:	701c                	ld	a5,32(s0)
    8000de46:	e399                	bnez	a5,8000de4c <tinst_tests_gpf+0x2af2>
    8000de48:	db6fe06f          	j	8000c3fe <tinst_tests_gpf+0x10a4>
    8000de4c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de4e:	0016f713          	andi	a4,a3,1
    8000de52:	f0071163          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000de56:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de5a:	460d                	li	a2,3
    8000de5c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de60:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de62:	00c59763          	bne	a1,a2,8000de70 <tinst_tests_gpf+0x2b16>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de66:	0026d683          	lhu	a3,2(a3)
    8000de6a:	0106969b          	slliw	a3,a3,0x10
    8000de6e:	8f55                	or	a4,a4,a3
    8000de70:	1ffe16b7          	lui	a3,0x1ffe1
    8000de74:	068e                	slli	a3,a3,0x3
    8000de76:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de78:	8f75                	and	a4,a4,a3
    8000de7a:	00e78463          	beq	a5,a4,8000de82 <tinst_tests_gpf+0x2b28>
    8000de7e:	d6cfe06f          	j	8000c3ea <tinst_tests_gpf+0x1090>
    8000de82:	d7cfe06f          	j	8000c3fe <tinst_tests_gpf+0x10a4>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000de86:	701c                	ld	a5,32(s0)
    8000de88:	e399                	bnez	a5,8000de8e <tinst_tests_gpf+0x2b34>
    8000de8a:	e16fe06f          	j	8000c4a0 <tinst_tests_gpf+0x1146>
    8000de8e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de90:	0016f713          	andi	a4,a3,1
    8000de94:	ec071063          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000de98:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de9c:	460d                	li	a2,3
    8000de9e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dea2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dea4:	00c59763          	bne	a1,a2,8000deb2 <tinst_tests_gpf+0x2b58>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dea8:	0026d683          	lhu	a3,2(a3)
    8000deac:	0106969b          	slliw	a3,a3,0x10
    8000deb0:	8f55                	or	a4,a4,a3
    8000deb2:	1ffe16b7          	lui	a3,0x1ffe1
    8000deb6:	068e                	slli	a3,a3,0x3
    8000deb8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000deba:	8f75                	and	a4,a4,a3
    8000debc:	00e78463          	beq	a5,a4,8000dec4 <tinst_tests_gpf+0x2b6a>
    8000dec0:	dccfe06f          	j	8000c48c <tinst_tests_gpf+0x1132>
    8000dec4:	ddcfe06f          	j	8000c4a0 <tinst_tests_gpf+0x1146>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000dec8:	701c                	ld	a5,32(s0)
    8000deca:	e399                	bnez	a5,8000ded0 <tinst_tests_gpf+0x2b76>
    8000decc:	e76fe06f          	j	8000c542 <tinst_tests_gpf+0x11e8>
    8000ded0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ded2:	0016f713          	andi	a4,a3,1
    8000ded6:	e6071f63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000deda:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dede:	460d                	li	a2,3
    8000dee0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dee4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dee6:	00c59763          	bne	a1,a2,8000def4 <tinst_tests_gpf+0x2b9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000deea:	0026d683          	lhu	a3,2(a3)
    8000deee:	0106969b          	slliw	a3,a3,0x10
    8000def2:	8f55                	or	a4,a4,a3
    8000def4:	1ffe16b7          	lui	a3,0x1ffe1
    8000def8:	068e                	slli	a3,a3,0x3
    8000defa:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000defc:	8f75                	and	a4,a4,a3
    8000defe:	00e78463          	beq	a5,a4,8000df06 <tinst_tests_gpf+0x2bac>
    8000df02:	e2cfe06f          	j	8000c52e <tinst_tests_gpf+0x11d4>
    8000df06:	e3cfe06f          	j	8000c542 <tinst_tests_gpf+0x11e8>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000df0a:	701c                	ld	a5,32(s0)
    8000df0c:	e399                	bnez	a5,8000df12 <tinst_tests_gpf+0x2bb8>
    8000df0e:	ed6fe06f          	j	8000c5e4 <tinst_tests_gpf+0x128a>
    8000df12:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000df14:	0016f713          	andi	a4,a3,1
    8000df18:	e2071e63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000df1c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df20:	460d                	li	a2,3
    8000df22:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df26:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df28:	00c59763          	bne	a1,a2,8000df36 <tinst_tests_gpf+0x2bdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df2c:	0026d683          	lhu	a3,2(a3)
    8000df30:	0106969b          	slliw	a3,a3,0x10
    8000df34:	8f55                	or	a4,a4,a3
    8000df36:	1ffe16b7          	lui	a3,0x1ffe1
    8000df3a:	068e                	slli	a3,a3,0x3
    8000df3c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000df3e:	8f75                	and	a4,a4,a3
    8000df40:	00e78463          	beq	a5,a4,8000df48 <tinst_tests_gpf+0x2bee>
    8000df44:	e8cfe06f          	j	8000c5d0 <tinst_tests_gpf+0x1276>
    8000df48:	e9cfe06f          	j	8000c5e4 <tinst_tests_gpf+0x128a>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000df4c:	701c                	ld	a5,32(s0)
    8000df4e:	e399                	bnez	a5,8000df54 <tinst_tests_gpf+0x2bfa>
    8000df50:	f36fe06f          	j	8000c686 <tinst_tests_gpf+0x132c>
    8000df54:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000df56:	0016f713          	andi	a4,a3,1
    8000df5a:	de071d63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000df5e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df62:	460d                	li	a2,3
    8000df64:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df68:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df6a:	00c59763          	bne	a1,a2,8000df78 <tinst_tests_gpf+0x2c1e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df6e:	0026d683          	lhu	a3,2(a3)
    8000df72:	0106969b          	slliw	a3,a3,0x10
    8000df76:	8f55                	or	a4,a4,a3
    8000df78:	1ffe16b7          	lui	a3,0x1ffe1
    8000df7c:	068e                	slli	a3,a3,0x3
    8000df7e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000df80:	8f75                	and	a4,a4,a3
    8000df82:	00e78463          	beq	a5,a4,8000df8a <tinst_tests_gpf+0x2c30>
    8000df86:	eecfe06f          	j	8000c672 <tinst_tests_gpf+0x1318>
    8000df8a:	efcfe06f          	j	8000c686 <tinst_tests_gpf+0x132c>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000df8e:	6418                	ld	a4,8(s0)
    8000df90:	47dd                	li	a5,23
    8000df92:	00f70463          	beq	a4,a5,8000df9a <tinst_tests_gpf+0x2c40>
    8000df96:	84bfe06f          	j	8000c7e0 <tinst_tests_gpf+0x1486>
    8000df9a:	701c                	ld	a5,32(s0)
    8000df9c:	e399                	bnez	a5,8000dfa2 <tinst_tests_gpf+0x2c48>
    8000df9e:	845fe06f          	j	8000c7e2 <tinst_tests_gpf+0x1488>
    8000dfa2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dfa4:	0016f713          	andi	a4,a3,1
    8000dfa8:	da071663          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dfac:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dfb0:	460d                	li	a2,3
    8000dfb2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dfb6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dfb8:	00c59763          	bne	a1,a2,8000dfc6 <tinst_tests_gpf+0x2c6c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dfbc:	0026d683          	lhu	a3,2(a3)
    8000dfc0:	0106969b          	slliw	a3,a3,0x10
    8000dfc4:	8f55                	or	a4,a4,a3
    8000dfc6:	1ffe16b7          	lui	a3,0x1ffe1
    8000dfca:	068e                	slli	a3,a3,0x3
    8000dfcc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dfce:	8f75                	and	a4,a4,a3
    8000dfd0:	40f704b3          	sub	s1,a4,a5
    8000dfd4:	0014b493          	seqz	s1,s1
    8000dfd8:	80bfe06f          	j	8000c7e2 <tinst_tests_gpf+0x1488>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000dfdc:	6418                	ld	a4,8(s0)
    8000dfde:	47dd                	li	a5,23
    8000dfe0:	00f70463          	beq	a4,a5,8000dfe8 <tinst_tests_gpf+0x2c8e>
    8000dfe4:	897fe06f          	j	8000c87a <tinst_tests_gpf+0x1520>
    8000dfe8:	701c                	ld	a5,32(s0)
    8000dfea:	e399                	bnez	a5,8000dff0 <tinst_tests_gpf+0x2c96>
    8000dfec:	891fe06f          	j	8000c87c <tinst_tests_gpf+0x1522>
    8000dff0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dff2:	0016f713          	andi	a4,a3,1
    8000dff6:	d4071f63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dffa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dffe:	460d                	li	a2,3
    8000e000:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e004:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e006:	00c59763          	bne	a1,a2,8000e014 <tinst_tests_gpf+0x2cba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e00a:	0026d683          	lhu	a3,2(a3)
    8000e00e:	0106969b          	slliw	a3,a3,0x10
    8000e012:	8f55                	or	a4,a4,a3
    8000e014:	1ffe16b7          	lui	a3,0x1ffe1
    8000e018:	068e                	slli	a3,a3,0x3
    8000e01a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e01c:	8f75                	and	a4,a4,a3
    8000e01e:	40f704b3          	sub	s1,a4,a5
    8000e022:	0014b493          	seqz	s1,s1
    8000e026:	857fe06f          	j	8000c87c <tinst_tests_gpf+0x1522>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000e02a:	6418                	ld	a4,8(s0)
    8000e02c:	47dd                	li	a5,23
    8000e02e:	00f70463          	beq	a4,a5,8000e036 <tinst_tests_gpf+0x2cdc>
    8000e032:	8e3fe06f          	j	8000c914 <tinst_tests_gpf+0x15ba>
    8000e036:	701c                	ld	a5,32(s0)
    8000e038:	e399                	bnez	a5,8000e03e <tinst_tests_gpf+0x2ce4>
    8000e03a:	8ddfe06f          	j	8000c916 <tinst_tests_gpf+0x15bc>
    8000e03e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e040:	0016f713          	andi	a4,a3,1
    8000e044:	d0071863          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e048:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e04c:	460d                	li	a2,3
    8000e04e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e052:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e054:	00c59763          	bne	a1,a2,8000e062 <tinst_tests_gpf+0x2d08>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e058:	0026d683          	lhu	a3,2(a3)
    8000e05c:	0106969b          	slliw	a3,a3,0x10
    8000e060:	8f55                	or	a4,a4,a3
    8000e062:	1ffe16b7          	lui	a3,0x1ffe1
    8000e066:	068e                	slli	a3,a3,0x3
    8000e068:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e06a:	8f75                	and	a4,a4,a3
    8000e06c:	40f704b3          	sub	s1,a4,a5
    8000e070:	0014b493          	seqz	s1,s1
    8000e074:	8a3fe06f          	j	8000c916 <tinst_tests_gpf+0x15bc>
    instruction = *((uint16_t*)addr);
    8000e078:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e07c:	460d                	li	a2,3
    8000e07e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e082:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e084:	00c59763          	bne	a1,a2,8000e092 <tinst_tests_gpf+0x2d38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e088:	0026d683          	lhu	a3,2(a3)
    8000e08c:	0106969b          	slliw	a3,a3,0x10
    8000e090:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000e092:	1746                	slli	a4,a4,0x31
    8000e094:	9345                	srli	a4,a4,0x31
    8000e096:	00e78463          	beq	a5,a4,8000e09e <tinst_tests_gpf+0x2d44>
    8000e09a:	e50fd06f          	j	8000b6ea <tinst_tests_gpf+0x390>
    8000e09e:	e60fd06f          	j	8000b6fe <tinst_tests_gpf+0x3a4>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000e0a2:	02043903          	ld	s2,32(s0)
    8000e0a6:	00091463          	bnez	s2,8000e0ae <tinst_tests_gpf+0x2d54>
    8000e0aa:	c89fd06f          	j	8000bd32 <tinst_tests_gpf+0x9d8>
    8000e0ae:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e0b0:	0017f713          	andi	a4,a5,1
    8000e0b4:	ca071063          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e0b8:	0007d503          	lhu	a0,0(a5)
    8000e0bc:	f32f30ef          	jal	800017ee <expand_compressed_instruction>
    8000e0c0:	01f077b7          	lui	a5,0x1f07
    8000e0c4:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e0c8:	00f574b3          	and	s1,a0,a5
    8000e0cc:	412484b3          	sub	s1,s1,s2
    8000e0d0:	0014b493          	seqz	s1,s1
    8000e0d4:	c5ffd06f          	j	8000bd32 <tinst_tests_gpf+0x9d8>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000e0d8:	701c                	ld	a5,32(s0)
    8000e0da:	e399                	bnez	a5,8000e0e0 <tinst_tests_gpf+0x2d86>
    8000e0dc:	cfffd06f          	j	8000bdda <tinst_tests_gpf+0xa80>
    8000e0e0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e0e2:	0016f713          	andi	a4,a3,1
    8000e0e6:	c6071763          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e0ea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e0ee:	460d                	li	a2,3
    8000e0f0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e0f4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e0f6:	00c59763          	bne	a1,a2,8000e104 <tinst_tests_gpf+0x2daa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e0fa:	0026d683          	lhu	a3,2(a3)
    8000e0fe:	0106969b          	slliw	a3,a3,0x10
    8000e102:	8f55                	or	a4,a4,a3
    8000e104:	1ffe16b7          	lui	a3,0x1ffe1
    8000e108:	068e                	slli	a3,a3,0x3
    8000e10a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e10c:	8f75                	and	a4,a4,a3
    8000e10e:	40f704b3          	sub	s1,a4,a5
    8000e112:	0014b493          	seqz	s1,s1
    8000e116:	cc5fd06f          	j	8000bdda <tinst_tests_gpf+0xa80>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000e11a:	701c                	ld	a5,32(s0)
    8000e11c:	e399                	bnez	a5,8000e122 <tinst_tests_gpf+0x2dc8>
    8000e11e:	d61fd06f          	j	8000be7e <tinst_tests_gpf+0xb24>
    8000e122:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e124:	0016f713          	andi	a4,a3,1
    8000e128:	c2071663          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e12c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e130:	460d                	li	a2,3
    8000e132:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e136:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e138:	00c59763          	bne	a1,a2,8000e146 <tinst_tests_gpf+0x2dec>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e13c:	0026d683          	lhu	a3,2(a3)
    8000e140:	0106969b          	slliw	a3,a3,0x10
    8000e144:	8f55                	or	a4,a4,a3
    8000e146:	1ffe16b7          	lui	a3,0x1ffe1
    8000e14a:	068e                	slli	a3,a3,0x3
    8000e14c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e14e:	8f75                	and	a4,a4,a3
    8000e150:	40f704b3          	sub	s1,a4,a5
    8000e154:	0014b493          	seqz	s1,s1
    8000e158:	d27fd06f          	j	8000be7e <tinst_tests_gpf+0xb24>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000e15c:	701c                	ld	a5,32(s0)
    8000e15e:	e399                	bnez	a5,8000e164 <tinst_tests_gpf+0x2e0a>
    8000e160:	dc1fd06f          	j	8000bf20 <tinst_tests_gpf+0xbc6>
    8000e164:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e166:	0016f713          	andi	a4,a3,1
    8000e16a:	be071563          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e16e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e172:	460d                	li	a2,3
    8000e174:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e178:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e17a:	00c59763          	bne	a1,a2,8000e188 <tinst_tests_gpf+0x2e2e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e17e:	0026d683          	lhu	a3,2(a3)
    8000e182:	0106969b          	slliw	a3,a3,0x10
    8000e186:	8f55                	or	a4,a4,a3
    8000e188:	1ffe16b7          	lui	a3,0x1ffe1
    8000e18c:	068e                	slli	a3,a3,0x3
    8000e18e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e190:	8f75                	and	a4,a4,a3
    8000e192:	40f704b3          	sub	s1,a4,a5
    8000e196:	0014b493          	seqz	s1,s1
    8000e19a:	d87fd06f          	j	8000bf20 <tinst_tests_gpf+0xbc6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e19e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e1a0:	0017f713          	andi	a4,a5,1
    8000e1a4:	ba071863          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e1a8:	0007d503          	lhu	a0,0(a5)
    8000e1ac:	e42f30ef          	jal	800017ee <expand_compressed_instruction>
    8000e1b0:	67a1                	lui	a5,0x8
    8000e1b2:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e1b4:	8d7d                	and	a0,a0,a5
    8000e1b6:	00a90463          	beq	s2,a0,8000e1be <tinst_tests_gpf+0x2e64>
    8000e1ba:	959fd06f          	j	8000bb12 <tinst_tests_gpf+0x7b8>
    8000e1be:	00022597          	auipc	a1,0x22
    8000e1c2:	dfa58593          	addi	a1,a1,-518 # 8002ffb8 <__func__.0+0x2c8>
    8000e1c6:	955fd06f          	j	8000bb1a <tinst_tests_gpf+0x7c0>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000e1ca:	701c                	ld	a5,32(s0)
    8000e1cc:	e399                	bnez	a5,8000e1d2 <tinst_tests_gpf+0x2e78>
    8000e1ce:	df5fd06f          	j	8000bfc2 <tinst_tests_gpf+0xc68>
    8000e1d2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e1d4:	0016f713          	andi	a4,a3,1
    8000e1d8:	b6071e63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e1dc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e1e0:	460d                	li	a2,3
    8000e1e2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e1e6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e1e8:	00c59763          	bne	a1,a2,8000e1f6 <tinst_tests_gpf+0x2e9c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e1ec:	0026d683          	lhu	a3,2(a3)
    8000e1f0:	0106969b          	slliw	a3,a3,0x10
    8000e1f4:	8f55                	or	a4,a4,a3
    8000e1f6:	1ffe16b7          	lui	a3,0x1ffe1
    8000e1fa:	068e                	slli	a3,a3,0x3
    8000e1fc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e1fe:	8f75                	and	a4,a4,a3
    8000e200:	40f704b3          	sub	s1,a4,a5
    8000e204:	0014b493          	seqz	s1,s1
    8000e208:	dbbfd06f          	j	8000bfc2 <tinst_tests_gpf+0xc68>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000e20c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e20e:	0017f713          	andi	a4,a5,1
    8000e212:	b4071163          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e216:	0007d503          	lhu	a0,0(a5)
    8000e21a:	dd4f30ef          	jal	800017ee <expand_compressed_instruction>
    8000e21e:	67a1                	lui	a5,0x8
    8000e220:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e222:	8d7d                	and	a0,a0,a5
    8000e224:	00a98463          	beq	s3,a0,8000e22c <tinst_tests_gpf+0x2ed2>
    8000e228:	981fd06f          	j	8000bba8 <tinst_tests_gpf+0x84e>
    8000e22c:	00022597          	auipc	a1,0x22
    8000e230:	d8c58593          	addi	a1,a1,-628 # 8002ffb8 <__func__.0+0x2c8>
    8000e234:	97dfd06f          	j	8000bbb0 <tinst_tests_gpf+0x856>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000e238:	701c                	ld	a5,32(s0)
    8000e23a:	e399                	bnez	a5,8000e240 <tinst_tests_gpf+0x2ee6>
    8000e23c:	e1dfd06f          	j	8000c058 <tinst_tests_gpf+0xcfe>
    8000e240:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e242:	0016f713          	andi	a4,a3,1
    8000e246:	b0071763          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e24a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e24e:	460d                	li	a2,3
    8000e250:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e254:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e256:	00c59763          	bne	a1,a2,8000e264 <tinst_tests_gpf+0x2f0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e25a:	0026d683          	lhu	a3,2(a3)
    8000e25e:	0106969b          	slliw	a3,a3,0x10
    8000e262:	8f55                	or	a4,a4,a3
    8000e264:	1ffe16b7          	lui	a3,0x1ffe1
    8000e268:	068e                	slli	a3,a3,0x3
    8000e26a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e26c:	8f75                	and	a4,a4,a3
    8000e26e:	40f704b3          	sub	s1,a4,a5
    8000e272:	0014b493          	seqz	s1,s1
    8000e276:	de3fd06f          	j	8000c058 <tinst_tests_gpf+0xcfe>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000e27a:	701c                	ld	a5,32(s0)
    8000e27c:	e399                	bnez	a5,8000e282 <tinst_tests_gpf+0x2f28>
    8000e27e:	e71fd06f          	j	8000c0ee <tinst_tests_gpf+0xd94>
    8000e282:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e284:	0016f713          	andi	a4,a3,1
    8000e288:	ac071663          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e28c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e290:	460d                	li	a2,3
    8000e292:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e296:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e298:	00c59763          	bne	a1,a2,8000e2a6 <tinst_tests_gpf+0x2f4c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e29c:	0026d683          	lhu	a3,2(a3)
    8000e2a0:	0106969b          	slliw	a3,a3,0x10
    8000e2a4:	8f55                	or	a4,a4,a3
    8000e2a6:	1ffe16b7          	lui	a3,0x1ffe1
    8000e2aa:	068e                	slli	a3,a3,0x3
    8000e2ac:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e2ae:	8f75                	and	a4,a4,a3
    8000e2b0:	40f704b3          	sub	s1,a4,a5
    8000e2b4:	0014b493          	seqz	s1,s1
    8000e2b8:	e37fd06f          	j	8000c0ee <tinst_tests_gpf+0xd94>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e2bc:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e2be:	0017f713          	andi	a4,a5,1
    8000e2c2:	a8071963          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e2c6:	0007d503          	lhu	a0,0(a5)
    8000e2ca:	d24f30ef          	jal	800017ee <expand_compressed_instruction>
    8000e2ce:	01f077b7          	lui	a5,0x1f07
    8000e2d2:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e2d6:	8d7d                	and	a0,a0,a5
    8000e2d8:	00a98463          	beq	s3,a0,8000e2e0 <tinst_tests_gpf+0x2f86>
    8000e2dc:	963fd06f          	j	8000bc3e <tinst_tests_gpf+0x8e4>
    8000e2e0:	00022597          	auipc	a1,0x22
    8000e2e4:	cd858593          	addi	a1,a1,-808 # 8002ffb8 <__func__.0+0x2c8>
    8000e2e8:	95ffd06f          	j	8000bc46 <tinst_tests_gpf+0x8ec>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000e2ec:	701c                	ld	a5,32(s0)
    8000e2ee:	e399                	bnez	a5,8000e2f4 <tinst_tests_gpf+0x2f9a>
    8000e2f0:	ea1fd06f          	j	8000c190 <tinst_tests_gpf+0xe36>
    8000e2f4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e2f6:	0016f713          	andi	a4,a3,1
    8000e2fa:	a4071d63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e2fe:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e302:	460d                	li	a2,3
    8000e304:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e308:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e30a:	00c59763          	bne	a1,a2,8000e318 <tinst_tests_gpf+0x2fbe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e30e:	0026d683          	lhu	a3,2(a3)
    8000e312:	0106969b          	slliw	a3,a3,0x10
    8000e316:	8f55                	or	a4,a4,a3
    8000e318:	1ffe16b7          	lui	a3,0x1ffe1
    8000e31c:	068e                	slli	a3,a3,0x3
    8000e31e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e320:	8f75                	and	a4,a4,a3
    8000e322:	40f704b3          	sub	s1,a4,a5
    8000e326:	0014b493          	seqz	s1,s1
    8000e32a:	e67fd06f          	j	8000c190 <tinst_tests_gpf+0xe36>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000e32e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e330:	0017f713          	andi	a4,a5,1
    8000e334:	a2071063          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e338:	0007d503          	lhu	a0,0(a5)
    8000e33c:	cb2f30ef          	jal	800017ee <expand_compressed_instruction>
    8000e340:	01f077b7          	lui	a5,0x1f07
    8000e344:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e348:	8d7d                	and	a0,a0,a5
    8000e34a:	00a90463          	beq	s2,a0,8000e352 <tinst_tests_gpf+0x2ff8>
    8000e34e:	987fd06f          	j	8000bcd4 <tinst_tests_gpf+0x97a>
    8000e352:	00022597          	auipc	a1,0x22
    8000e356:	c6658593          	addi	a1,a1,-922 # 8002ffb8 <__func__.0+0x2c8>
    8000e35a:	983fd06f          	j	8000bcdc <tinst_tests_gpf+0x982>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000e35e:	701c                	ld	a5,32(s0)
    8000e360:	e399                	bnez	a5,8000e366 <tinst_tests_gpf+0x300c>
    8000e362:	ed1fd06f          	j	8000c232 <tinst_tests_gpf+0xed8>
    8000e366:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e368:	0016f713          	andi	a4,a3,1
    8000e36c:	9e071463          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e370:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e374:	460d                	li	a2,3
    8000e376:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e37a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e37c:	00c59763          	bne	a1,a2,8000e38a <tinst_tests_gpf+0x3030>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e380:	0026d683          	lhu	a3,2(a3)
    8000e384:	0106969b          	slliw	a3,a3,0x10
    8000e388:	8f55                	or	a4,a4,a3
    8000e38a:	1ffe16b7          	lui	a3,0x1ffe1
    8000e38e:	068e                	slli	a3,a3,0x3
    8000e390:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e392:	8f75                	and	a4,a4,a3
    8000e394:	40f704b3          	sub	s1,a4,a5
    8000e398:	0014b493          	seqz	s1,s1
    8000e39c:	e97fd06f          	j	8000c232 <tinst_tests_gpf+0xed8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000e3a0:	701c                	ld	a5,32(s0)
    8000e3a2:	e399                	bnez	a5,8000e3a8 <tinst_tests_gpf+0x304e>
    8000e3a4:	f31fd06f          	j	8000c2d4 <tinst_tests_gpf+0xf7a>
    8000e3a8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e3aa:	0016f713          	andi	a4,a3,1
    8000e3ae:	9a071363          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e3b2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e3b6:	460d                	li	a2,3
    8000e3b8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e3bc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e3be:	00c59763          	bne	a1,a2,8000e3cc <tinst_tests_gpf+0x3072>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e3c2:	0026d683          	lhu	a3,2(a3)
    8000e3c6:	0106969b          	slliw	a3,a3,0x10
    8000e3ca:	8f55                	or	a4,a4,a3
    8000e3cc:	1ffe16b7          	lui	a3,0x1ffe1
    8000e3d0:	068e                	slli	a3,a3,0x3
    8000e3d2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e3d4:	8f75                	and	a4,a4,a3
    8000e3d6:	40f704b3          	sub	s1,a4,a5
    8000e3da:	0014b493          	seqz	s1,s1
    8000e3de:	ef7fd06f          	j	8000c2d4 <tinst_tests_gpf+0xf7a>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000e3e2:	701c                	ld	a5,32(s0)
    8000e3e4:	e399                	bnez	a5,8000e3ea <tinst_tests_gpf+0x3090>
    8000e3e6:	f91fd06f          	j	8000c376 <tinst_tests_gpf+0x101c>
    8000e3ea:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e3ec:	0016f713          	andi	a4,a3,1
    8000e3f0:	96071263          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e3f4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e3f8:	460d                	li	a2,3
    8000e3fa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e3fe:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e400:	00c59763          	bne	a1,a2,8000e40e <tinst_tests_gpf+0x30b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e404:	0026d683          	lhu	a3,2(a3)
    8000e408:	0106969b          	slliw	a3,a3,0x10
    8000e40c:	8f55                	or	a4,a4,a3
    8000e40e:	1ffe16b7          	lui	a3,0x1ffe1
    8000e412:	068e                	slli	a3,a3,0x3
    8000e414:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e416:	8f75                	and	a4,a4,a3
    8000e418:	40f704b3          	sub	s1,a4,a5
    8000e41c:	0014b493          	seqz	s1,s1
    8000e420:	f57fd06f          	j	8000c376 <tinst_tests_gpf+0x101c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000e424:	701c                	ld	a5,32(s0)
    8000e426:	e399                	bnez	a5,8000e42c <tinst_tests_gpf+0x30d2>
    8000e428:	ff7fd06f          	j	8000c41e <tinst_tests_gpf+0x10c4>
    8000e42c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e42e:	0016f713          	andi	a4,a3,1
    8000e432:	92071163          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e436:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e43a:	460d                	li	a2,3
    8000e43c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e440:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e442:	00c59763          	bne	a1,a2,8000e450 <tinst_tests_gpf+0x30f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e446:	0026d683          	lhu	a3,2(a3)
    8000e44a:	0106969b          	slliw	a3,a3,0x10
    8000e44e:	8f55                	or	a4,a4,a3
    8000e450:	1ffe16b7          	lui	a3,0x1ffe1
    8000e454:	068e                	slli	a3,a3,0x3
    8000e456:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e458:	8f75                	and	a4,a4,a3
    8000e45a:	40f704b3          	sub	s1,a4,a5
    8000e45e:	0014b493          	seqz	s1,s1
    8000e462:	fbdfd06f          	j	8000c41e <tinst_tests_gpf+0x10c4>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000e466:	701c                	ld	a5,32(s0)
    8000e468:	e399                	bnez	a5,8000e46e <tinst_tests_gpf+0x3114>
    8000e46a:	856fe06f          	j	8000c4c0 <tinst_tests_gpf+0x1166>
    8000e46e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e470:	0016f713          	andi	a4,a3,1
    8000e474:	8e071063          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e478:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e47c:	460d                	li	a2,3
    8000e47e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e482:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e484:	00c59763          	bne	a1,a2,8000e492 <tinst_tests_gpf+0x3138>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e488:	0026d683          	lhu	a3,2(a3)
    8000e48c:	0106969b          	slliw	a3,a3,0x10
    8000e490:	8f55                	or	a4,a4,a3
    8000e492:	1ffe16b7          	lui	a3,0x1ffe1
    8000e496:	068e                	slli	a3,a3,0x3
    8000e498:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e49a:	8f75                	and	a4,a4,a3
    8000e49c:	40f704b3          	sub	s1,a4,a5
    8000e4a0:	0014b493          	seqz	s1,s1
    8000e4a4:	81cfe06f          	j	8000c4c0 <tinst_tests_gpf+0x1166>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000e4a8:	701c                	ld	a5,32(s0)
    8000e4aa:	e399                	bnez	a5,8000e4b0 <tinst_tests_gpf+0x3156>
    8000e4ac:	8b6fe06f          	j	8000c562 <tinst_tests_gpf+0x1208>
    8000e4b0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e4b2:	0016f713          	andi	a4,a3,1
    8000e4b6:	88071f63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e4ba:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e4be:	460d                	li	a2,3
    8000e4c0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e4c4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e4c6:	00c59763          	bne	a1,a2,8000e4d4 <tinst_tests_gpf+0x317a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e4ca:	0026d683          	lhu	a3,2(a3)
    8000e4ce:	0106969b          	slliw	a3,a3,0x10
    8000e4d2:	8f55                	or	a4,a4,a3
    8000e4d4:	1ffe16b7          	lui	a3,0x1ffe1
    8000e4d8:	068e                	slli	a3,a3,0x3
    8000e4da:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e4dc:	8f75                	and	a4,a4,a3
    8000e4de:	40f704b3          	sub	s1,a4,a5
    8000e4e2:	0014b493          	seqz	s1,s1
    8000e4e6:	87cfe06f          	j	8000c562 <tinst_tests_gpf+0x1208>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000e4ea:	701c                	ld	a5,32(s0)
    8000e4ec:	e399                	bnez	a5,8000e4f2 <tinst_tests_gpf+0x3198>
    8000e4ee:	916fe06f          	j	8000c604 <tinst_tests_gpf+0x12aa>
    8000e4f2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e4f4:	0016f713          	andi	a4,a3,1
    8000e4f8:	84071e63          	bnez	a4,8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e4fc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e500:	460d                	li	a2,3
    8000e502:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e506:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e508:	00c59763          	bne	a1,a2,8000e516 <tinst_tests_gpf+0x31bc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e50c:	0026d683          	lhu	a3,2(a3)
    8000e510:	0106969b          	slliw	a3,a3,0x10
    8000e514:	8f55                	or	a4,a4,a3
    8000e516:	1ffe16b7          	lui	a3,0x1ffe1
    8000e51a:	068e                	slli	a3,a3,0x3
    8000e51c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e51e:	8f75                	and	a4,a4,a3
    8000e520:	40f704b3          	sub	s1,a4,a5
    8000e524:	0014b493          	seqz	s1,s1
    8000e528:	8dcfe06f          	j	8000c604 <tinst_tests_gpf+0x12aa>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000e52c:	701c                	ld	a5,32(s0)
    8000e52e:	e399                	bnez	a5,8000e534 <tinst_tests_gpf+0x31da>
    8000e530:	976fe06f          	j	8000c6a6 <tinst_tests_gpf+0x134c>
    8000e534:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e536:	0016f713          	andi	a4,a3,1
    8000e53a:	c319                	beqz	a4,8000e540 <tinst_tests_gpf+0x31e6>
    8000e53c:	818ff06f          	j	8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e540:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e544:	460d                	li	a2,3
    8000e546:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e54a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e54c:	00c59763          	bne	a1,a2,8000e55a <tinst_tests_gpf+0x3200>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e550:	0026d683          	lhu	a3,2(a3)
    8000e554:	0106969b          	slliw	a3,a3,0x10
    8000e558:	8f55                	or	a4,a4,a3
    8000e55a:	1ffe16b7          	lui	a3,0x1ffe1
    8000e55e:	068e                	slli	a3,a3,0x3
    8000e560:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e562:	8f75                	and	a4,a4,a3
    8000e564:	40f704b3          	sub	s1,a4,a5
    8000e568:	0014b493          	seqz	s1,s1
    8000e56c:	93afe06f          	j	8000c6a6 <tinst_tests_gpf+0x134c>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000e570:	701c                	ld	a5,32(s0)
    8000e572:	e399                	bnez	a5,8000e578 <tinst_tests_gpf+0x321e>
    8000e574:	9d4fe06f          	j	8000c748 <tinst_tests_gpf+0x13ee>
    8000e578:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e57a:	0016f713          	andi	a4,a3,1
    8000e57e:	c319                	beqz	a4,8000e584 <tinst_tests_gpf+0x322a>
    8000e580:	fd5fe06f          	j	8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e584:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e588:	460d                	li	a2,3
    8000e58a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e58e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e590:	00c59763          	bne	a1,a2,8000e59e <tinst_tests_gpf+0x3244>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e594:	0026d683          	lhu	a3,2(a3)
    8000e598:	0106969b          	slliw	a3,a3,0x10
    8000e59c:	8f55                	or	a4,a4,a3
    8000e59e:	1ffe16b7          	lui	a3,0x1ffe1
    8000e5a2:	068e                	slli	a3,a3,0x3
    8000e5a4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e5a6:	8f75                	and	a4,a4,a3
    8000e5a8:	40f704b3          	sub	s1,a4,a5
    8000e5ac:	0014b493          	seqz	s1,s1
    8000e5b0:	998fe06f          	j	8000c748 <tinst_tests_gpf+0x13ee>
    8000e5b4:	701c                	ld	a5,32(s0)
    8000e5b6:	e399                	bnez	a5,8000e5bc <tinst_tests_gpf+0x3262>
    8000e5b8:	970fe06f          	j	8000c728 <tinst_tests_gpf+0x13ce>
    8000e5bc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e5be:	0016f713          	andi	a4,a3,1
    8000e5c2:	c319                	beqz	a4,8000e5c8 <tinst_tests_gpf+0x326e>
    8000e5c4:	f91fe06f          	j	8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e5c8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e5cc:	460d                	li	a2,3
    8000e5ce:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e5d2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e5d4:	00c59763          	bne	a1,a2,8000e5e2 <tinst_tests_gpf+0x3288>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e5d8:	0026d683          	lhu	a3,2(a3)
    8000e5dc:	0106969b          	slliw	a3,a3,0x10
    8000e5e0:	8f55                	or	a4,a4,a3
    8000e5e2:	1ffe16b7          	lui	a3,0x1ffe1
    8000e5e6:	068e                	slli	a3,a3,0x3
    8000e5e8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e5ea:	8f75                	and	a4,a4,a3
    8000e5ec:	00e78463          	beq	a5,a4,8000e5f4 <tinst_tests_gpf+0x329a>
    8000e5f0:	924fe06f          	j	8000c714 <tinst_tests_gpf+0x13ba>
    8000e5f4:	934fe06f          	j	8000c728 <tinst_tests_gpf+0x13ce>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000e5f8:	701c                	ld	a5,32(s0)
    8000e5fa:	e399                	bnez	a5,8000e600 <tinst_tests_gpf+0x32a6>
    8000e5fc:	9cefe06f          	j	8000c7ca <tinst_tests_gpf+0x1470>
    8000e600:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e602:	0016f713          	andi	a4,a3,1
    8000e606:	c319                	beqz	a4,8000e60c <tinst_tests_gpf+0x32b2>
    8000e608:	f4dfe06f          	j	8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e60c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e610:	460d                	li	a2,3
    8000e612:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e616:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e618:	00c59763          	bne	a1,a2,8000e626 <tinst_tests_gpf+0x32cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e61c:	0026d683          	lhu	a3,2(a3)
    8000e620:	0106969b          	slliw	a3,a3,0x10
    8000e624:	8f55                	or	a4,a4,a3
    8000e626:	1ffe16b7          	lui	a3,0x1ffe1
    8000e62a:	068e                	slli	a3,a3,0x3
    8000e62c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e62e:	8f75                	and	a4,a4,a3
    8000e630:	00e78463          	beq	a5,a4,8000e638 <tinst_tests_gpf+0x32de>
    8000e634:	982fe06f          	j	8000c7b6 <tinst_tests_gpf+0x145c>
    8000e638:	992fe06f          	j	8000c7ca <tinst_tests_gpf+0x1470>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000e63c:	701c                	ld	a5,32(s0)
    8000e63e:	e399                	bnez	a5,8000e644 <tinst_tests_gpf+0x32ea>
    8000e640:	a24fe06f          	j	8000c864 <tinst_tests_gpf+0x150a>
    8000e644:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e646:	0016f713          	andi	a4,a3,1
    8000e64a:	c319                	beqz	a4,8000e650 <tinst_tests_gpf+0x32f6>
    8000e64c:	f09fe06f          	j	8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e650:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e654:	460d                	li	a2,3
    8000e656:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e65a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e65c:	00c59763          	bne	a1,a2,8000e66a <tinst_tests_gpf+0x3310>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e660:	0026d683          	lhu	a3,2(a3)
    8000e664:	0106969b          	slliw	a3,a3,0x10
    8000e668:	8f55                	or	a4,a4,a3
    8000e66a:	1ffe16b7          	lui	a3,0x1ffe1
    8000e66e:	068e                	slli	a3,a3,0x3
    8000e670:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e672:	8f75                	and	a4,a4,a3
    8000e674:	00e78463          	beq	a5,a4,8000e67c <tinst_tests_gpf+0x3322>
    8000e678:	9d8fe06f          	j	8000c850 <tinst_tests_gpf+0x14f6>
    8000e67c:	9e8fe06f          	j	8000c864 <tinst_tests_gpf+0x150a>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000e680:	701c                	ld	a5,32(s0)
    8000e682:	e399                	bnez	a5,8000e688 <tinst_tests_gpf+0x332e>
    8000e684:	a7afe06f          	j	8000c8fe <tinst_tests_gpf+0x15a4>
    8000e688:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e68a:	0016f713          	andi	a4,a3,1
    8000e68e:	c319                	beqz	a4,8000e694 <tinst_tests_gpf+0x333a>
    8000e690:	ec5fe06f          	j	8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e694:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e698:	460d                	li	a2,3
    8000e69a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e69e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e6a0:	00c59763          	bne	a1,a2,8000e6ae <tinst_tests_gpf+0x3354>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e6a4:	0026d683          	lhu	a3,2(a3)
    8000e6a8:	0106969b          	slliw	a3,a3,0x10
    8000e6ac:	8f55                	or	a4,a4,a3
    8000e6ae:	1ffe16b7          	lui	a3,0x1ffe1
    8000e6b2:	068e                	slli	a3,a3,0x3
    8000e6b4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e6b6:	8f75                	and	a4,a4,a3
    8000e6b8:	00e78463          	beq	a5,a4,8000e6c0 <tinst_tests_gpf+0x3366>
    8000e6bc:	a2efe06f          	j	8000c8ea <tinst_tests_gpf+0x1590>
    8000e6c0:	a3efe06f          	j	8000c8fe <tinst_tests_gpf+0x15a4>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000e6c4:	701c                	ld	a5,32(s0)
    8000e6c6:	e399                	bnez	a5,8000e6cc <tinst_tests_gpf+0x3372>
    8000e6c8:	ad0fe06f          	j	8000c998 <tinst_tests_gpf+0x163e>
    8000e6cc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e6ce:	0016f713          	andi	a4,a3,1
    8000e6d2:	c319                	beqz	a4,8000e6d8 <tinst_tests_gpf+0x337e>
    8000e6d4:	e81fe06f          	j	8000d554 <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e6d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e6dc:	460d                	li	a2,3
    8000e6de:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e6e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e6e4:	00c59763          	bne	a1,a2,8000e6f2 <tinst_tests_gpf+0x3398>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e6e8:	0026d683          	lhu	a3,2(a3)
    8000e6ec:	0106969b          	slliw	a3,a3,0x10
    8000e6f0:	8f55                	or	a4,a4,a3
    8000e6f2:	1ffe16b7          	lui	a3,0x1ffe1
    8000e6f6:	068e                	slli	a3,a3,0x3
    8000e6f8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e6fa:	8f75                	and	a4,a4,a3
    8000e6fc:	00e78463          	beq	a5,a4,8000e704 <tinst_tests_gpf+0x33aa>
    8000e700:	a84fe06f          	j	8000c984 <tinst_tests_gpf+0x162a>
    8000e704:	a94fe06f          	j	8000c998 <tinst_tests_gpf+0x163e>

000000008000e708 <priv_change_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h> 
bool priv_change_1(){
    8000e708:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000e70a:	00020597          	auipc	a1,0x20
    8000e70e:	d1658593          	addi	a1,a1,-746 # 8002e420 <__func__.16>
    8000e712:	00022517          	auipc	a0,0x22
    8000e716:	8c650513          	addi	a0,a0,-1850 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_1(){
    8000e71a:	ec06                	sd	ra,24(sp)
    8000e71c:	e822                	sd	s0,16(sp)
    8000e71e:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e720:	16d1e0ef          	jal	8002d08c <printf>
    8000e724:	4529                	li	a0,10
    8000e726:	6541d0ef          	jal	8002bd7a <putchar>


    goto_priv(PRIV_HS);
    8000e72a:	450d                	li	a0,3
    8000e72c:	fdcf20ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000e730:	eb1f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000e734:	a90f20ef          	jal	800009c4 <hpt_init>
    vspt_init(); 
    8000e738:	844f20ef          	jal	8000077c <vspt_init>

    //V=1，VS模式下发生异常，关闭代理，切换到M态处理异常，异常结束恢复到VS态
    goto_priv(PRIV_M);
    8000e73c:	4511                	li	a0,4
    8000e73e:	fcaf20ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,0);
    8000e742:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000e746:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000e74a:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000e74e:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VS);     
    8000e752:	4509                	li	a0,2
    8000e754:	fb4f20ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000e758:	eb4f20ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000e75c:	400197b7          	lui	a5,0x40019
    8000e760:	078a                	slli	a5,a5,0x2
    8000e762:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e766:	08200593          	li	a1,130
    8000e76a:	00024617          	auipc	a2,0x24
    8000e76e:	36660613          	addi	a2,a2,870 # 80032ad0 <__func__.0+0x2de0>
    8000e772:	00022517          	auipc	a0,0x22
    8000e776:	87e50513          	addi	a0,a0,-1922 # 8002fff0 <__func__.0+0x300>
    8000e77a:	1131e0ef          	jal	8002d08c <printf>
    8000e77e:	0004a797          	auipc	a5,0x4a
    8000e782:	8937c783          	lbu	a5,-1901(a5) # 80058011 <excpt+0x1>
    8000e786:	0004a497          	auipc	s1,0x4a
    8000e78a:	88a48493          	addi	s1,s1,-1910 # 80058010 <excpt>
    8000e78e:	00022597          	auipc	a1,0x22
    8000e792:	83a58593          	addi	a1,a1,-1990 # 8002ffc8 <__func__.0+0x2d8>
    8000e796:	c789                	beqz	a5,8000e7a0 <priv_change_1+0x98>
    8000e798:	6498                	ld	a4,8(s1)
    8000e79a:	47b5                	li	a5,13
    8000e79c:	0cf70463          	beq	a4,a5,8000e864 <priv_change_1+0x15c>
    8000e7a0:	00022517          	auipc	a0,0x22
    8000e7a4:	86850513          	addi	a0,a0,-1944 # 80030008 <__func__.0+0x318>
    8000e7a8:	0e51e0ef          	jal	8002d08c <printf>
    8000e7ac:	0004a797          	auipc	a5,0x4a
    8000e7b0:	8657c783          	lbu	a5,-1947(a5) # 80058011 <excpt+0x1>
    8000e7b4:	c789                	beqz	a5,8000e7be <priv_change_1+0xb6>
    8000e7b6:	6498                	ld	a4,8(s1)
    8000e7b8:	47b5                	li	a5,13
    8000e7ba:	04f70e63          	beq	a4,a5,8000e816 <priv_change_1+0x10e>
    8000e7be:	00022517          	auipc	a0,0x22
    8000e7c2:	85250513          	addi	a0,a0,-1966 # 80030010 <__func__.0+0x320>
    8000e7c6:	0c71e0ef          	jal	8002d08c <printf>
    8000e7ca:	02900513          	li	a0,41
    8000e7ce:	5ac1d0ef          	jal	8002bd7a <putchar>
    8000e7d2:	4529                	li	a0,10
    8000e7d4:	5a61d0ef          	jal	8002bd7a <putchar>
    8000e7d8:	0004a417          	auipc	s0,0x4a
    8000e7dc:	83944403          	lbu	s0,-1991(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000e7e0:	00021597          	auipc	a1,0x21
    8000e7e4:	7e858593          	addi	a1,a1,2024 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e7e8:	c411                	beqz	s0,8000e7f4 <priv_change_1+0xec>
    8000e7ea:	6498                	ld	a4,8(s1)
    8000e7ec:	47b5                	li	a5,13
    8000e7ee:	04f70363          	beq	a4,a5,8000e834 <priv_change_1+0x12c>
    8000e7f2:	4401                	li	s0,0
    TEST_END();
    8000e7f4:	00022517          	auipc	a0,0x22
    8000e7f8:	87c50513          	addi	a0,a0,-1924 # 80030070 <__func__.0+0x380>
    8000e7fc:	0911e0ef          	jal	8002d08c <printf>
    8000e800:	4511                	li	a0,4
    8000e802:	f06f20ef          	jal	80000f08 <goto_priv>
    8000e806:	8ccf30ef          	jal	800018d2 <reset_state>
}
    8000e80a:	60e2                	ld	ra,24(sp)
    8000e80c:	8522                	mv	a0,s0
    8000e80e:	6442                	ld	s0,16(sp)
    8000e810:	64a2                	ld	s1,8(sp)
    8000e812:	6105                	addi	sp,sp,32
    8000e814:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e816:	00049717          	auipc	a4,0x49
    8000e81a:	7fe72703          	lw	a4,2046(a4) # 80058014 <excpt+0x4>
    8000e81e:	4791                	li	a5,4
    8000e820:	f8f71fe3          	bne	a4,a5,8000e7be <priv_change_1+0xb6>
    8000e824:	0002f717          	auipc	a4,0x2f
    8000e828:	60072703          	lw	a4,1536(a4) # 8003de24 <curr_priv>
    8000e82c:	4789                	li	a5,2
    8000e82e:	f8f718e3          	bne	a4,a5,8000e7be <priv_change_1+0xb6>
    8000e832:	b745                	j	8000e7d2 <priv_change_1+0xca>
    8000e834:	00049717          	auipc	a4,0x49
    8000e838:	7e072703          	lw	a4,2016(a4) # 80058014 <excpt+0x4>
    8000e83c:	4791                	li	a5,4
    8000e83e:	faf71ae3          	bne	a4,a5,8000e7f2 <priv_change_1+0xea>
    8000e842:	0002f717          	auipc	a4,0x2f
    8000e846:	5e272703          	lw	a4,1506(a4) # 8003de24 <curr_priv>
    8000e84a:	4789                	li	a5,2
    TEST_END();
    8000e84c:	00021597          	auipc	a1,0x21
    8000e850:	76c58593          	addi	a1,a1,1900 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e854:	faf700e3          	beq	a4,a5,8000e7f4 <priv_change_1+0xec>
    8000e858:	4401                	li	s0,0
    TEST_END();
    8000e85a:	00021597          	auipc	a1,0x21
    8000e85e:	76e58593          	addi	a1,a1,1902 # 8002ffc8 <__func__.0+0x2d8>
    8000e862:	bf49                	j	8000e7f4 <priv_change_1+0xec>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e864:	00049717          	auipc	a4,0x49
    8000e868:	7b072703          	lw	a4,1968(a4) # 80058014 <excpt+0x4>
    8000e86c:	4791                	li	a5,4
    8000e86e:	f2f719e3          	bne	a4,a5,8000e7a0 <priv_change_1+0x98>
    8000e872:	0002f717          	auipc	a4,0x2f
    8000e876:	5b272703          	lw	a4,1458(a4) # 8003de24 <curr_priv>
    8000e87a:	4789                	li	a5,2
    8000e87c:	00021597          	auipc	a1,0x21
    8000e880:	73c58593          	addi	a1,a1,1852 # 8002ffb8 <__func__.0+0x2c8>
    8000e884:	f0f70ee3          	beq	a4,a5,8000e7a0 <priv_change_1+0x98>
    8000e888:	00021597          	auipc	a1,0x21
    8000e88c:	74058593          	addi	a1,a1,1856 # 8002ffc8 <__func__.0+0x2d8>
    8000e890:	bf01                	j	8000e7a0 <priv_change_1+0x98>

000000008000e892 <priv_change_2>:

bool priv_change_2(){
    8000e892:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000e894:	00020597          	auipc	a1,0x20
    8000e898:	b9c58593          	addi	a1,a1,-1124 # 8002e430 <__func__.14>
    8000e89c:	00021517          	auipc	a0,0x21
    8000e8a0:	73c50513          	addi	a0,a0,1852 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_2(){
    8000e8a4:	ec06                	sd	ra,24(sp)
    8000e8a6:	e822                	sd	s0,16(sp)
    8000e8a8:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e8aa:	7e21e0ef          	jal	8002d08c <printf>
    8000e8ae:	4529                	li	a0,10
    8000e8b0:	4ca1d0ef          	jal	8002bd7a <putchar>


    goto_priv(PRIV_HS);
    8000e8b4:	450d                	li	a0,3
    8000e8b6:	e52f20ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000e8ba:	d27f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000e8be:	906f20ef          	jal	800009c4 <hpt_init>
    vspt_init(); 
    8000e8c2:	ebbf10ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;
    //V=1，VS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000e8c6:	4511                	li	a0,4
    8000e8c8:	e40f20ef          	jal	80000f08 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000e8cc:	6789                	lui	a5,0x2
    8000e8ce:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_VS);     
    8000e8d2:	4509                	li	a0,2
    8000e8d4:	e34f20ef          	jal	80000f08 <goto_priv>

    vaddr_f = vs_page_base(VSI_GI);      
    value = 0xdeadbeef;
    
    TEST_SETUP_EXCEPT();        
    8000e8d8:	d34f20ef          	jal	80000e0c <test_setup_except_function>
    8000e8dc:	400197b7          	lui	a5,0x40019
    8000e8e0:	078a                	slli	a5,a5,0x2
    8000e8e2:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e8e6:	08200593          	li	a1,130
    8000e8ea:	00024617          	auipc	a2,0x24
    8000e8ee:	25660613          	addi	a2,a2,598 # 80032b40 <__func__.0+0x2e50>
    8000e8f2:	00021517          	auipc	a0,0x21
    8000e8f6:	6fe50513          	addi	a0,a0,1790 # 8002fff0 <__func__.0+0x300>
    8000e8fa:	7921e0ef          	jal	8002d08c <printf>
    8000e8fe:	00049797          	auipc	a5,0x49
    8000e902:	7137c783          	lbu	a5,1811(a5) # 80058011 <excpt+0x1>
    8000e906:	00049497          	auipc	s1,0x49
    8000e90a:	70a48493          	addi	s1,s1,1802 # 80058010 <excpt>
    8000e90e:	00021597          	auipc	a1,0x21
    8000e912:	6ba58593          	addi	a1,a1,1722 # 8002ffc8 <__func__.0+0x2d8>
    8000e916:	c789                	beqz	a5,8000e920 <priv_change_2+0x8e>
    8000e918:	6498                	ld	a4,8(s1)
    8000e91a:	47b5                	li	a5,13
    8000e91c:	0cf70463          	beq	a4,a5,8000e9e4 <priv_change_2+0x152>
    8000e920:	00021517          	auipc	a0,0x21
    8000e924:	6e850513          	addi	a0,a0,1768 # 80030008 <__func__.0+0x318>
    8000e928:	7641e0ef          	jal	8002d08c <printf>
    8000e92c:	00049797          	auipc	a5,0x49
    8000e930:	6e57c783          	lbu	a5,1765(a5) # 80058011 <excpt+0x1>
    8000e934:	c789                	beqz	a5,8000e93e <priv_change_2+0xac>
    8000e936:	6498                	ld	a4,8(s1)
    8000e938:	47b5                	li	a5,13
    8000e93a:	04f70e63          	beq	a4,a5,8000e996 <priv_change_2+0x104>
    8000e93e:	00021517          	auipc	a0,0x21
    8000e942:	6d250513          	addi	a0,a0,1746 # 80030010 <__func__.0+0x320>
    8000e946:	7461e0ef          	jal	8002d08c <printf>
    8000e94a:	02900513          	li	a0,41
    8000e94e:	42c1d0ef          	jal	8002bd7a <putchar>
    8000e952:	4529                	li	a0,10
    8000e954:	4261d0ef          	jal	8002bd7a <putchar>
    8000e958:	00049417          	auipc	s0,0x49
    8000e95c:	6b944403          	lbu	s0,1721(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );    

    TEST_END();
    8000e960:	00021597          	auipc	a1,0x21
    8000e964:	66858593          	addi	a1,a1,1640 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e968:	c411                	beqz	s0,8000e974 <priv_change_2+0xe2>
    8000e96a:	6498                	ld	a4,8(s1)
    8000e96c:	47b5                	li	a5,13
    8000e96e:	04f70363          	beq	a4,a5,8000e9b4 <priv_change_2+0x122>
    8000e972:	4401                	li	s0,0
    TEST_END();
    8000e974:	00021517          	auipc	a0,0x21
    8000e978:	6fc50513          	addi	a0,a0,1788 # 80030070 <__func__.0+0x380>
    8000e97c:	7101e0ef          	jal	8002d08c <printf>
    8000e980:	4511                	li	a0,4
    8000e982:	d86f20ef          	jal	80000f08 <goto_priv>
    8000e986:	f4df20ef          	jal	800018d2 <reset_state>
}
    8000e98a:	60e2                	ld	ra,24(sp)
    8000e98c:	8522                	mv	a0,s0
    8000e98e:	6442                	ld	s0,16(sp)
    8000e990:	64a2                	ld	s1,8(sp)
    8000e992:	6105                	addi	sp,sp,32
    8000e994:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e996:	00049717          	auipc	a4,0x49
    8000e99a:	67e72703          	lw	a4,1662(a4) # 80058014 <excpt+0x4>
    8000e99e:	4791                	li	a5,4
    8000e9a0:	f8f71fe3          	bne	a4,a5,8000e93e <priv_change_2+0xac>
    8000e9a4:	0002f717          	auipc	a4,0x2f
    8000e9a8:	48072703          	lw	a4,1152(a4) # 8003de24 <curr_priv>
    8000e9ac:	4789                	li	a5,2
    8000e9ae:	f8f718e3          	bne	a4,a5,8000e93e <priv_change_2+0xac>
    8000e9b2:	b745                	j	8000e952 <priv_change_2+0xc0>
    8000e9b4:	00049717          	auipc	a4,0x49
    8000e9b8:	66072703          	lw	a4,1632(a4) # 80058014 <excpt+0x4>
    8000e9bc:	4791                	li	a5,4
    8000e9be:	faf71ae3          	bne	a4,a5,8000e972 <priv_change_2+0xe0>
    8000e9c2:	0002f717          	auipc	a4,0x2f
    8000e9c6:	46272703          	lw	a4,1122(a4) # 8003de24 <curr_priv>
    8000e9ca:	4789                	li	a5,2
    TEST_END();
    8000e9cc:	00021597          	auipc	a1,0x21
    8000e9d0:	5ec58593          	addi	a1,a1,1516 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e9d4:	faf700e3          	beq	a4,a5,8000e974 <priv_change_2+0xe2>
    8000e9d8:	4401                	li	s0,0
    TEST_END();
    8000e9da:	00021597          	auipc	a1,0x21
    8000e9de:	5ee58593          	addi	a1,a1,1518 # 8002ffc8 <__func__.0+0x2d8>
    8000e9e2:	bf49                	j	8000e974 <priv_change_2+0xe2>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e9e4:	00049717          	auipc	a4,0x49
    8000e9e8:	63072703          	lw	a4,1584(a4) # 80058014 <excpt+0x4>
    8000e9ec:	4791                	li	a5,4
    8000e9ee:	f2f719e3          	bne	a4,a5,8000e920 <priv_change_2+0x8e>
    8000e9f2:	0002f717          	auipc	a4,0x2f
    8000e9f6:	43272703          	lw	a4,1074(a4) # 8003de24 <curr_priv>
    8000e9fa:	4789                	li	a5,2
    8000e9fc:	00021597          	auipc	a1,0x21
    8000ea00:	5bc58593          	addi	a1,a1,1468 # 8002ffb8 <__func__.0+0x2c8>
    8000ea04:	f0f70ee3          	beq	a4,a5,8000e920 <priv_change_2+0x8e>
    8000ea08:	00021597          	auipc	a1,0x21
    8000ea0c:	5c058593          	addi	a1,a1,1472 # 8002ffc8 <__func__.0+0x2d8>
    8000ea10:	bf01                	j	8000e920 <priv_change_2+0x8e>

000000008000ea12 <priv_change_3>:


bool priv_change_3(){
    8000ea12:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000ea14:	00020597          	auipc	a1,0x20
    8000ea18:	a2c58593          	addi	a1,a1,-1492 # 8002e440 <__func__.13>
    8000ea1c:	00021517          	auipc	a0,0x21
    8000ea20:	5bc50513          	addi	a0,a0,1468 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_3(){
    8000ea24:	e406                	sd	ra,8(sp)
    8000ea26:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ea28:	6641e0ef          	jal	8002d08c <printf>
    8000ea2c:	4529                	li	a0,10
    8000ea2e:	34c1d0ef          	jal	8002bd7a <putchar>


    goto_priv(PRIV_HS);
    8000ea32:	450d                	li	a0,3
    8000ea34:	cd4f20ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000ea38:	ba9f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000ea3c:	f89f10ef          	jal	800009c4 <hpt_init>
    vspt_init(); 
    8000ea40:	d3df10ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭代理，切换到M态处理异常，处理结束执行mret返回HS态
    TEST_SETUP_EXCEPT();  
    8000ea44:	bc8f20ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8000ea48:	4511                	li	a0,4
    8000ea4a:	cbef20ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,0);
    8000ea4e:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);
    8000ea52:	30305073          	csrwi	mideleg,0
    goto_priv(PRIV_HS);     
    8000ea56:	450d                	li	a0,3
    8000ea58:	cb0f20ef          	jal	80000f08 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000ea5c:	bb0f20ef          	jal	80000e0c <test_setup_except_function>
    8000ea60:	400197b7          	lui	a5,0x40019
    8000ea64:	078a                	slli	a5,a5,0x2
    8000ea66:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    //mret();
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ea6a:	08200593          	li	a1,130
    8000ea6e:	00024617          	auipc	a2,0x24
    8000ea72:	11260613          	addi	a2,a2,274 # 80032b80 <__func__.0+0x2e90>
    8000ea76:	00021517          	auipc	a0,0x21
    8000ea7a:	57a50513          	addi	a0,a0,1402 # 8002fff0 <__func__.0+0x300>
    8000ea7e:	60e1e0ef          	jal	8002d08c <printf>
    8000ea82:	00049797          	auipc	a5,0x49
    8000ea86:	58f7c783          	lbu	a5,1423(a5) # 80058011 <excpt+0x1>
    8000ea8a:	00021597          	auipc	a1,0x21
    8000ea8e:	53e58593          	addi	a1,a1,1342 # 8002ffc8 <__func__.0+0x2d8>
    8000ea92:	cb81                	beqz	a5,8000eaa2 <priv_change_3+0x90>
    8000ea94:	0002f717          	auipc	a4,0x2f
    8000ea98:	39072703          	lw	a4,912(a4) # 8003de24 <curr_priv>
    8000ea9c:	478d                	li	a5,3
    8000ea9e:	0af70b63          	beq	a4,a5,8000eb54 <priv_change_3+0x142>
    8000eaa2:	00021517          	auipc	a0,0x21
    8000eaa6:	56650513          	addi	a0,a0,1382 # 80030008 <__func__.0+0x318>
    8000eaaa:	5e21e0ef          	jal	8002d08c <printf>
    8000eaae:	00049797          	auipc	a5,0x49
    8000eab2:	5637c783          	lbu	a5,1379(a5) # 80058011 <excpt+0x1>
    8000eab6:	cb81                	beqz	a5,8000eac6 <priv_change_3+0xb4>
    8000eab8:	0002f717          	auipc	a4,0x2f
    8000eabc:	36c72703          	lw	a4,876(a4) # 8003de24 <curr_priv>
    8000eac0:	478d                	li	a5,3
    8000eac2:	06f70063          	beq	a4,a5,8000eb22 <priv_change_3+0x110>
    8000eac6:	00021517          	auipc	a0,0x21
    8000eaca:	54a50513          	addi	a0,a0,1354 # 80030010 <__func__.0+0x320>
    8000eace:	5be1e0ef          	jal	8002d08c <printf>
    8000ead2:	02900513          	li	a0,41
    8000ead6:	2a41d0ef          	jal	8002bd7a <putchar>
    8000eada:	4529                	li	a0,10
    8000eadc:	29e1d0ef          	jal	8002bd7a <putchar>
    8000eae0:	00049417          	auipc	s0,0x49
    8000eae4:	53144403          	lbu	s0,1329(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        curr_priv == PRIV_HS &&
        excpt.priv == PRIV_M
    ); 

    TEST_END();
    8000eae8:	00021597          	auipc	a1,0x21
    8000eaec:	4e058593          	addi	a1,a1,1248 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000eaf0:	c809                	beqz	s0,8000eb02 <priv_change_3+0xf0>
    8000eaf2:	0002f717          	auipc	a4,0x2f
    8000eaf6:	33272703          	lw	a4,818(a4) # 8003de24 <curr_priv>
    8000eafa:	478d                	li	a5,3
    8000eafc:	02f70b63          	beq	a4,a5,8000eb32 <priv_change_3+0x120>
    8000eb00:	4401                	li	s0,0
    TEST_END();
    8000eb02:	00021517          	auipc	a0,0x21
    8000eb06:	56e50513          	addi	a0,a0,1390 # 80030070 <__func__.0+0x380>
    8000eb0a:	5821e0ef          	jal	8002d08c <printf>
    8000eb0e:	4511                	li	a0,4
    8000eb10:	bf8f20ef          	jal	80000f08 <goto_priv>
    8000eb14:	dbff20ef          	jal	800018d2 <reset_state>
}
    8000eb18:	60a2                	ld	ra,8(sp)
    8000eb1a:	8522                	mv	a0,s0
    8000eb1c:	6402                	ld	s0,0(sp)
    8000eb1e:	0141                	addi	sp,sp,16
    8000eb20:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000eb22:	00049717          	auipc	a4,0x49
    8000eb26:	4f272703          	lw	a4,1266(a4) # 80058014 <excpt+0x4>
    8000eb2a:	4791                	li	a5,4
    8000eb2c:	f8f71de3          	bne	a4,a5,8000eac6 <priv_change_3+0xb4>
    8000eb30:	b76d                	j	8000eada <priv_change_3+0xc8>
    8000eb32:	00049717          	auipc	a4,0x49
    8000eb36:	4e272703          	lw	a4,1250(a4) # 80058014 <excpt+0x4>
    8000eb3a:	4791                	li	a5,4
    TEST_END();
    8000eb3c:	00021597          	auipc	a1,0x21
    8000eb40:	47c58593          	addi	a1,a1,1148 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000eb44:	faf70fe3          	beq	a4,a5,8000eb02 <priv_change_3+0xf0>
    8000eb48:	4401                	li	s0,0
    TEST_END();
    8000eb4a:	00021597          	auipc	a1,0x21
    8000eb4e:	47e58593          	addi	a1,a1,1150 # 8002ffc8 <__func__.0+0x2d8>
    8000eb52:	bf45                	j	8000eb02 <priv_change_3+0xf0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000eb54:	00049717          	auipc	a4,0x49
    8000eb58:	4c072703          	lw	a4,1216(a4) # 80058014 <excpt+0x4>
    8000eb5c:	4791                	li	a5,4
    8000eb5e:	00021597          	auipc	a1,0x21
    8000eb62:	45a58593          	addi	a1,a1,1114 # 8002ffb8 <__func__.0+0x2c8>
    8000eb66:	f2f70ee3          	beq	a4,a5,8000eaa2 <priv_change_3+0x90>
    8000eb6a:	00021597          	auipc	a1,0x21
    8000eb6e:	45e58593          	addi	a1,a1,1118 # 8002ffc8 <__func__.0+0x2d8>
    8000eb72:	bf05                	j	8000eaa2 <priv_change_3+0x90>

000000008000eb74 <priv_change_4>:

bool priv_change_4(){
    8000eb74:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000eb76:	00020597          	auipc	a1,0x20
    8000eb7a:	8da58593          	addi	a1,a1,-1830 # 8002e450 <__func__.12>
    8000eb7e:	00021517          	auipc	a0,0x21
    8000eb82:	45a50513          	addi	a0,a0,1114 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_4(){
    8000eb86:	ec06                	sd	ra,24(sp)
    8000eb88:	e822                	sd	s0,16(sp)
    8000eb8a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000eb8c:	5001e0ef          	jal	8002d08c <printf>
    8000eb90:	4529                	li	a0,10
    8000eb92:	1e81d0ef          	jal	8002bd7a <putchar>


    goto_priv(PRIV_HS);
    8000eb96:	450d                	li	a0,3
    8000eb98:	b70f20ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8000eb9c:	a45f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000eba0:	e25f10ef          	jal	800009c4 <hpt_init>
    vspt_init(); 
    8000eba4:	bd9f10ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000eba8:	4511                	li	a0,4
    8000ebaa:	b5ef20ef          	jal	80000f08 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000ebae:	6789                	lui	a5,0x2
    8000ebb0:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_HS);     
    8000ebb4:	450d                	li	a0,3
    8000ebb6:	b52f20ef          	jal	80000f08 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000ebba:	a52f20ef          	jal	80000e0c <test_setup_except_function>
    8000ebbe:	400197b7          	lui	a5,0x40019
    8000ebc2:	078a                	slli	a5,a5,0x2
    8000ebc4:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ebc8:	08200593          	li	a1,130
    8000ebcc:	00024617          	auipc	a2,0x24
    8000ebd0:	02460613          	addi	a2,a2,36 # 80032bf0 <__func__.0+0x2f00>
    8000ebd4:	00021517          	auipc	a0,0x21
    8000ebd8:	41c50513          	addi	a0,a0,1052 # 8002fff0 <__func__.0+0x300>
    8000ebdc:	4b01e0ef          	jal	8002d08c <printf>
    8000ebe0:	00049797          	auipc	a5,0x49
    8000ebe4:	4317c783          	lbu	a5,1073(a5) # 80058011 <excpt+0x1>
    8000ebe8:	00049497          	auipc	s1,0x49
    8000ebec:	42848493          	addi	s1,s1,1064 # 80058010 <excpt>
    8000ebf0:	00021597          	auipc	a1,0x21
    8000ebf4:	3d858593          	addi	a1,a1,984 # 8002ffc8 <__func__.0+0x2d8>
    8000ebf8:	c789                	beqz	a5,8000ec02 <priv_change_4+0x8e>
    8000ebfa:	6498                	ld	a4,8(s1)
    8000ebfc:	47b5                	li	a5,13
    8000ebfe:	0af70663          	beq	a4,a5,8000ecaa <priv_change_4+0x136>
    8000ec02:	00021517          	auipc	a0,0x21
    8000ec06:	40650513          	addi	a0,a0,1030 # 80030008 <__func__.0+0x318>
    8000ec0a:	4821e0ef          	jal	8002d08c <printf>
    8000ec0e:	00049797          	auipc	a5,0x49
    8000ec12:	4037c783          	lbu	a5,1027(a5) # 80058011 <excpt+0x1>
    8000ec16:	c789                	beqz	a5,8000ec20 <priv_change_4+0xac>
    8000ec18:	6498                	ld	a4,8(s1)
    8000ec1a:	47b5                	li	a5,13
    8000ec1c:	04f70e63          	beq	a4,a5,8000ec78 <priv_change_4+0x104>
    8000ec20:	00021517          	auipc	a0,0x21
    8000ec24:	3f050513          	addi	a0,a0,1008 # 80030010 <__func__.0+0x320>
    8000ec28:	4641e0ef          	jal	8002d08c <printf>
    8000ec2c:	02900513          	li	a0,41
    8000ec30:	14a1d0ef          	jal	8002bd7a <putchar>
    8000ec34:	4529                	li	a0,10
    8000ec36:	1441d0ef          	jal	8002bd7a <putchar>
    8000ec3a:	00049417          	auipc	s0,0x49
    8000ec3e:	3d744403          	lbu	s0,983(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        excpt.priv==PRIV_M
    );  
    
    TEST_END();
    8000ec42:	00021597          	auipc	a1,0x21
    8000ec46:	38658593          	addi	a1,a1,902 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ec4a:	c411                	beqz	s0,8000ec56 <priv_change_4+0xe2>
    8000ec4c:	6498                	ld	a4,8(s1)
    8000ec4e:	47b5                	li	a5,13
    8000ec50:	02f70c63          	beq	a4,a5,8000ec88 <priv_change_4+0x114>
    8000ec54:	4401                	li	s0,0
    TEST_END();
    8000ec56:	00021517          	auipc	a0,0x21
    8000ec5a:	41a50513          	addi	a0,a0,1050 # 80030070 <__func__.0+0x380>
    8000ec5e:	42e1e0ef          	jal	8002d08c <printf>
    8000ec62:	4511                	li	a0,4
    8000ec64:	aa4f20ef          	jal	80000f08 <goto_priv>
    8000ec68:	c6bf20ef          	jal	800018d2 <reset_state>
}
    8000ec6c:	60e2                	ld	ra,24(sp)
    8000ec6e:	8522                	mv	a0,s0
    8000ec70:	6442                	ld	s0,16(sp)
    8000ec72:	64a2                	ld	s1,8(sp)
    8000ec74:	6105                	addi	sp,sp,32
    8000ec76:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ec78:	00049717          	auipc	a4,0x49
    8000ec7c:	39c72703          	lw	a4,924(a4) # 80058014 <excpt+0x4>
    8000ec80:	4791                	li	a5,4
    8000ec82:	f8f71fe3          	bne	a4,a5,8000ec20 <priv_change_4+0xac>
    8000ec86:	b77d                	j	8000ec34 <priv_change_4+0xc0>
    8000ec88:	00049717          	auipc	a4,0x49
    8000ec8c:	38c72703          	lw	a4,908(a4) # 80058014 <excpt+0x4>
    8000ec90:	4791                	li	a5,4
    TEST_END();
    8000ec92:	00021597          	auipc	a1,0x21
    8000ec96:	32658593          	addi	a1,a1,806 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ec9a:	faf70ee3          	beq	a4,a5,8000ec56 <priv_change_4+0xe2>
    8000ec9e:	4401                	li	s0,0
    TEST_END();
    8000eca0:	00021597          	auipc	a1,0x21
    8000eca4:	32858593          	addi	a1,a1,808 # 8002ffc8 <__func__.0+0x2d8>
    8000eca8:	b77d                	j	8000ec56 <priv_change_4+0xe2>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ecaa:	00049717          	auipc	a4,0x49
    8000ecae:	36a72703          	lw	a4,874(a4) # 80058014 <excpt+0x4>
    8000ecb2:	4791                	li	a5,4
    8000ecb4:	00021597          	auipc	a1,0x21
    8000ecb8:	30458593          	addi	a1,a1,772 # 8002ffb8 <__func__.0+0x2c8>
    8000ecbc:	f4f703e3          	beq	a4,a5,8000ec02 <priv_change_4+0x8e>
    8000ecc0:	00021597          	auipc	a1,0x21
    8000ecc4:	30858593          	addi	a1,a1,776 # 8002ffc8 <__func__.0+0x2d8>
    8000ecc8:	bf2d                	j	8000ec02 <priv_change_4+0x8e>

000000008000ecca <priv_change_5>:

bool priv_change_5(){
    8000ecca:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000eccc:	0001f597          	auipc	a1,0x1f
    8000ecd0:	79458593          	addi	a1,a1,1940 # 8002e460 <__func__.11>
    8000ecd4:	00021517          	auipc	a0,0x21
    8000ecd8:	30450513          	addi	a0,a0,772 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_5(){
    8000ecdc:	e406                	sd	ra,8(sp)
    8000ecde:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ece0:	3ac1e0ef          	jal	8002d08c <printf>
    8000ece4:	4529                	li	a0,10
    8000ece6:	0941d0ef          	jal	8002bd7a <putchar>


    //V=0，M模式下发生异常，M态处理异常
    goto_priv(PRIV_M);
    8000ecea:	4511                	li	a0,4
    8000ecec:	a1cf20ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000ecf0:	be3f20ef          	jal	800018d2 <reset_state>
    CSRW(medeleg, 0); 
    8000ecf4:	30205073          	csrwi	medeleg,0

    TEST_SETUP_EXCEPT();       
    8000ecf8:	914f20ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8000ecfc:	00000073          	ecall
    ecall_1(); 
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ed00:	08200593          	li	a1,130
    8000ed04:	00024617          	auipc	a2,0x24
    8000ed08:	f2c60613          	addi	a2,a2,-212 # 80032c30 <__func__.0+0x2f40>
    8000ed0c:	00021517          	auipc	a0,0x21
    8000ed10:	2e450513          	addi	a0,a0,740 # 8002fff0 <__func__.0+0x300>
    8000ed14:	3781e0ef          	jal	8002d08c <printf>
    8000ed18:	00049417          	auipc	s0,0x49
    8000ed1c:	2f840413          	addi	s0,s0,760 # 80058010 <excpt>
    8000ed20:	6014                	ld	a3,0(s0)
    8000ed22:	f0001737          	lui	a4,0xf0001
    8000ed26:	0712                	slli	a4,a4,0x4
    8000ed28:	4785                	li	a5,1
    8000ed2a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ed2e:	178a                	slli	a5,a5,0x22
    8000ed30:	8f75                	and	a4,a4,a3
    8000ed32:	10078793          	addi	a5,a5,256
    8000ed36:	00021597          	auipc	a1,0x21
    8000ed3a:	28258593          	addi	a1,a1,642 # 8002ffb8 <__func__.0+0x2c8>
    8000ed3e:	00f70663          	beq	a4,a5,8000ed4a <priv_change_5+0x80>
    8000ed42:	00021597          	auipc	a1,0x21
    8000ed46:	28658593          	addi	a1,a1,646 # 8002ffc8 <__func__.0+0x2d8>
    8000ed4a:	00021517          	auipc	a0,0x21
    8000ed4e:	2be50513          	addi	a0,a0,702 # 80030008 <__func__.0+0x318>
    8000ed52:	33a1e0ef          	jal	8002d08c <printf>
    8000ed56:	00049797          	auipc	a5,0x49
    8000ed5a:	2bb7c783          	lbu	a5,699(a5) # 80058011 <excpt+0x1>
    8000ed5e:	cb81                	beqz	a5,8000ed6e <priv_change_5+0xa4>
    8000ed60:	00049717          	auipc	a4,0x49
    8000ed64:	2b472703          	lw	a4,692(a4) # 80058014 <excpt+0x4>
    8000ed68:	4791                	li	a5,4
    8000ed6a:	00f70c63          	beq	a4,a5,8000ed82 <priv_change_5+0xb8>
    8000ed6e:	00021517          	auipc	a0,0x21
    8000ed72:	2a250513          	addi	a0,a0,674 # 80030010 <__func__.0+0x320>
    8000ed76:	3161e0ef          	jal	8002d08c <printf>
    8000ed7a:	02900513          	li	a0,41
    8000ed7e:	7fd1c0ef          	jal	8002bd7a <putchar>
    8000ed82:	4529                	li	a0,10
    8000ed84:	7f71c0ef          	jal	8002bd7a <putchar>
    8000ed88:	6014                	ld	a3,0(s0)
    8000ed8a:	f0001737          	lui	a4,0xf0001
    8000ed8e:	0712                	slli	a4,a4,0x4
    8000ed90:	4785                	li	a5,1
    8000ed92:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ed96:	178a                	slli	a5,a5,0x22
    8000ed98:	8f75                	and	a4,a4,a3
    8000ed9a:	10078793          	addi	a5,a5,256
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    ); 
    
    printf("niuh");
    8000ed9e:	00024517          	auipc	a0,0x24
    8000eda2:	eca50513          	addi	a0,a0,-310 # 80032c68 <__func__.0+0x2f78>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000eda6:	02f70963          	beq	a4,a5,8000edd8 <priv_change_5+0x10e>
    printf("niuh");
    8000edaa:	2e21e0ef          	jal	8002d08c <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000edae:	4401                	li	s0,0

    TEST_END();
    8000edb0:	00021597          	auipc	a1,0x21
    8000edb4:	21858593          	addi	a1,a1,536 # 8002ffc8 <__func__.0+0x2d8>
    8000edb8:	00021517          	auipc	a0,0x21
    8000edbc:	2b850513          	addi	a0,a0,696 # 80030070 <__func__.0+0x380>
    8000edc0:	2cc1e0ef          	jal	8002d08c <printf>
    8000edc4:	4511                	li	a0,4
    8000edc6:	942f20ef          	jal	80000f08 <goto_priv>
    8000edca:	b09f20ef          	jal	800018d2 <reset_state>
}
    8000edce:	60a2                	ld	ra,8(sp)
    8000edd0:	8522                	mv	a0,s0
    8000edd2:	6402                	ld	s0,0(sp)
    8000edd4:	0141                	addi	sp,sp,16
    8000edd6:	8082                	ret
    printf("niuh");
    8000edd8:	2b41e0ef          	jal	8002d08c <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000eddc:	4405                	li	s0,1
    TEST_END();
    8000edde:	00021597          	auipc	a1,0x21
    8000ede2:	1da58593          	addi	a1,a1,474 # 8002ffb8 <__func__.0+0x2c8>
    8000ede6:	bfc9                	j	8000edb8 <priv_change_5+0xee>

000000008000ede8 <priv_change_6>:

bool priv_change_6(){
    8000ede8:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000edea:	0001f597          	auipc	a1,0x1f
    8000edee:	68658593          	addi	a1,a1,1670 # 8002e470 <__func__.10>
    8000edf2:	00021517          	auipc	a0,0x21
    8000edf6:	1e650513          	addi	a0,a0,486 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_6(){
    8000edfa:	e406                	sd	ra,8(sp)
    8000edfc:	e022                	sd	s0,0(sp)
    TEST_START();
    8000edfe:	28e1e0ef          	jal	8002d08c <printf>
    8000ee02:	4529                	li	a0,10
    8000ee04:	7771c0ef          	jal	8002bd7a <putchar>


    //V=0，U模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000ee08:	4511                	li	a0,4
    8000ee0a:	8fef20ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,0);         
    8000ee0e:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_HU); 
    8000ee12:	4505                	li	a0,1
    8000ee14:	8f4f20ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();      
    8000ee18:	ff5f10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000ee1c:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000ee20:	08200593          	li	a1,130
    8000ee24:	00024617          	auipc	a2,0x24
    8000ee28:	e4c60613          	addi	a2,a2,-436 # 80032c70 <__func__.0+0x2f80>
    8000ee2c:	00021517          	auipc	a0,0x21
    8000ee30:	1c450513          	addi	a0,a0,452 # 8002fff0 <__func__.0+0x300>
    8000ee34:	2581e0ef          	jal	8002d08c <printf>
    8000ee38:	00049417          	auipc	s0,0x49
    8000ee3c:	1d840413          	addi	s0,s0,472 # 80058010 <excpt>
    8000ee40:	6014                	ld	a3,0(s0)
    8000ee42:	f0001737          	lui	a4,0xf0001
    8000ee46:	0712                	slli	a4,a4,0x4
    8000ee48:	4785                	li	a5,1
    8000ee4a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ee4e:	178a                	slli	a5,a5,0x22
    8000ee50:	8f75                	and	a4,a4,a3
    8000ee52:	10078793          	addi	a5,a5,256
    8000ee56:	00021597          	auipc	a1,0x21
    8000ee5a:	16258593          	addi	a1,a1,354 # 8002ffb8 <__func__.0+0x2c8>
    8000ee5e:	00f70663          	beq	a4,a5,8000ee6a <priv_change_6+0x82>
    8000ee62:	00021597          	auipc	a1,0x21
    8000ee66:	16658593          	addi	a1,a1,358 # 8002ffc8 <__func__.0+0x2d8>
    8000ee6a:	00021517          	auipc	a0,0x21
    8000ee6e:	19e50513          	addi	a0,a0,414 # 80030008 <__func__.0+0x318>
    8000ee72:	21a1e0ef          	jal	8002d08c <printf>
    8000ee76:	00049797          	auipc	a5,0x49
    8000ee7a:	19b7c783          	lbu	a5,411(a5) # 80058011 <excpt+0x1>
    8000ee7e:	cb81                	beqz	a5,8000ee8e <priv_change_6+0xa6>
    8000ee80:	00049717          	auipc	a4,0x49
    8000ee84:	19472703          	lw	a4,404(a4) # 80058014 <excpt+0x4>
    8000ee88:	4791                	li	a5,4
    8000ee8a:	00f70c63          	beq	a4,a5,8000eea2 <priv_change_6+0xba>
    8000ee8e:	00021517          	auipc	a0,0x21
    8000ee92:	18250513          	addi	a0,a0,386 # 80030010 <__func__.0+0x320>
    8000ee96:	1f61e0ef          	jal	8002d08c <printf>
    8000ee9a:	02900513          	li	a0,41
    8000ee9e:	6dd1c0ef          	jal	8002bd7a <putchar>
    8000eea2:	4529                	li	a0,10
    8000eea4:	6d71c0ef          	jal	8002bd7a <putchar>
    8000eea8:	6014                	ld	a3,0(s0)
    8000eeaa:	f0001737          	lui	a4,0xf0001
    8000eeae:	0712                	slli	a4,a4,0x4
    8000eeb0:	4785                	li	a5,1
    8000eeb2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000eeb6:	178a                	slli	a5,a5,0x22
    8000eeb8:	8f75                	and	a4,a4,a3
    8000eeba:	10078793          	addi	a5,a5,256
    8000eebe:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );

    TEST_END();
    8000eec0:	00021597          	auipc	a1,0x21
    8000eec4:	10858593          	addi	a1,a1,264 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000eec8:	00f71763          	bne	a4,a5,8000eed6 <priv_change_6+0xee>
    8000eecc:	4405                	li	s0,1
    TEST_END();
    8000eece:	00021597          	auipc	a1,0x21
    8000eed2:	0ea58593          	addi	a1,a1,234 # 8002ffb8 <__func__.0+0x2c8>
    8000eed6:	00021517          	auipc	a0,0x21
    8000eeda:	19a50513          	addi	a0,a0,410 # 80030070 <__func__.0+0x380>
    8000eede:	1ae1e0ef          	jal	8002d08c <printf>
    8000eee2:	4511                	li	a0,4
    8000eee4:	824f20ef          	jal	80000f08 <goto_priv>
    8000eee8:	9ebf20ef          	jal	800018d2 <reset_state>
}
    8000eeec:	60a2                	ld	ra,8(sp)
    8000eeee:	8522                	mv	a0,s0
    8000eef0:	6402                	ld	s0,0(sp)
    8000eef2:	0141                	addi	sp,sp,16
    8000eef4:	8082                	ret

000000008000eef6 <priv_change_7>:

bool priv_change_7(){
    8000eef6:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000eef8:	0001f597          	auipc	a1,0x1f
    8000eefc:	58858593          	addi	a1,a1,1416 # 8002e480 <__func__.9>
    8000ef00:	00021517          	auipc	a0,0x21
    8000ef04:	0d850513          	addi	a0,a0,216 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_7(){
    8000ef08:	e406                	sd	ra,8(sp)
    8000ef0a:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ef0c:	1801e0ef          	jal	8002d08c <printf>
    8000ef10:	4529                	li	a0,10
    8000ef12:	6691c0ef          	jal	8002bd7a <putchar>


    //V=1，VU模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000ef16:	4511                	li	a0,4
    8000ef18:	ff1f10ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,0);      
    8000ef1c:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_VU);     
    8000ef20:	4501                	li	a0,0
    8000ef22:	fe7f10ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000ef26:	ee7f10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000ef2a:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000ef2e:	08200593          	li	a1,130
    8000ef32:	00024617          	auipc	a2,0x24
    8000ef36:	d7e60613          	addi	a2,a2,-642 # 80032cb0 <__func__.0+0x2fc0>
    8000ef3a:	00021517          	auipc	a0,0x21
    8000ef3e:	0b650513          	addi	a0,a0,182 # 8002fff0 <__func__.0+0x300>
    8000ef42:	14a1e0ef          	jal	8002d08c <printf>
    8000ef46:	00049417          	auipc	s0,0x49
    8000ef4a:	0ca40413          	addi	s0,s0,202 # 80058010 <excpt>
    8000ef4e:	6014                	ld	a3,0(s0)
    8000ef50:	f0001737          	lui	a4,0xf0001
    8000ef54:	0712                	slli	a4,a4,0x4
    8000ef56:	4785                	li	a5,1
    8000ef58:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ef5c:	178a                	slli	a5,a5,0x22
    8000ef5e:	8f75                	and	a4,a4,a3
    8000ef60:	10078793          	addi	a5,a5,256
    8000ef64:	00021597          	auipc	a1,0x21
    8000ef68:	05458593          	addi	a1,a1,84 # 8002ffb8 <__func__.0+0x2c8>
    8000ef6c:	00f70663          	beq	a4,a5,8000ef78 <priv_change_7+0x82>
    8000ef70:	00021597          	auipc	a1,0x21
    8000ef74:	05858593          	addi	a1,a1,88 # 8002ffc8 <__func__.0+0x2d8>
    8000ef78:	00021517          	auipc	a0,0x21
    8000ef7c:	09050513          	addi	a0,a0,144 # 80030008 <__func__.0+0x318>
    8000ef80:	10c1e0ef          	jal	8002d08c <printf>
    8000ef84:	00049797          	auipc	a5,0x49
    8000ef88:	08d7c783          	lbu	a5,141(a5) # 80058011 <excpt+0x1>
    8000ef8c:	cb81                	beqz	a5,8000ef9c <priv_change_7+0xa6>
    8000ef8e:	00049717          	auipc	a4,0x49
    8000ef92:	08672703          	lw	a4,134(a4) # 80058014 <excpt+0x4>
    8000ef96:	4791                	li	a5,4
    8000ef98:	00f70c63          	beq	a4,a5,8000efb0 <priv_change_7+0xba>
    8000ef9c:	00021517          	auipc	a0,0x21
    8000efa0:	07450513          	addi	a0,a0,116 # 80030010 <__func__.0+0x320>
    8000efa4:	0e81e0ef          	jal	8002d08c <printf>
    8000efa8:	02900513          	li	a0,41
    8000efac:	5cf1c0ef          	jal	8002bd7a <putchar>
    8000efb0:	4529                	li	a0,10
    8000efb2:	5c91c0ef          	jal	8002bd7a <putchar>
    8000efb6:	6014                	ld	a3,0(s0)
    8000efb8:	f0001737          	lui	a4,0xf0001
    8000efbc:	0712                	slli	a4,a4,0x4
    8000efbe:	4785                	li	a5,1
    8000efc0:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000efc4:	178a                	slli	a5,a5,0x22
    8000efc6:	8f75                	and	a4,a4,a3
    8000efc8:	10078793          	addi	a5,a5,256
    8000efcc:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );   


    TEST_END();
    8000efce:	00021597          	auipc	a1,0x21
    8000efd2:	ffa58593          	addi	a1,a1,-6 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000efd6:	00f71763          	bne	a4,a5,8000efe4 <priv_change_7+0xee>
    8000efda:	4405                	li	s0,1
    TEST_END();
    8000efdc:	00021597          	auipc	a1,0x21
    8000efe0:	fdc58593          	addi	a1,a1,-36 # 8002ffb8 <__func__.0+0x2c8>
    8000efe4:	00021517          	auipc	a0,0x21
    8000efe8:	08c50513          	addi	a0,a0,140 # 80030070 <__func__.0+0x380>
    8000efec:	0a01e0ef          	jal	8002d08c <printf>
    8000eff0:	4511                	li	a0,4
    8000eff2:	f17f10ef          	jal	80000f08 <goto_priv>
    8000eff6:	8ddf20ef          	jal	800018d2 <reset_state>
}
    8000effa:	60a2                	ld	ra,8(sp)
    8000effc:	8522                	mv	a0,s0
    8000effe:	6402                	ld	s0,0(sp)
    8000f000:	0141                	addi	sp,sp,16
    8000f002:	8082                	ret

000000008000f004 <priv_change_8>:

bool priv_change_8(){
    8000f004:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000f006:	0001f597          	auipc	a1,0x1f
    8000f00a:	48a58593          	addi	a1,a1,1162 # 8002e490 <__func__.8>
    8000f00e:	00021517          	auipc	a0,0x21
    8000f012:	fca50513          	addi	a0,a0,-54 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_8(){
    8000f016:	e406                	sd	ra,8(sp)
    8000f018:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f01a:	0721e0ef          	jal	8002d08c <printf>
    8000f01e:	4529                	li	a0,10
    8000f020:	55b1c0ef          	jal	8002bd7a <putchar>


    //V=1，VU模式下发生异常，关闭代理，切换到M态处理异常，异常结束执行mret恢复到VU态
    goto_priv(PRIV_M);
    8000f024:	4511                	li	a0,4
    8000f026:	ee3f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f02a:	8a9f20ef          	jal	800018d2 <reset_state>
    CSRW(medeleg,0);
    8000f02e:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000f032:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000f036:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f03a:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VU);     
    8000f03e:	4501                	li	a0,0
    8000f040:	ec9f10ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f044:	dc9f10ef          	jal	80000e0c <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000f048:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f04c:	08200593          	li	a1,130
    8000f050:	00024617          	auipc	a2,0x24
    8000f054:	ca060613          	addi	a2,a2,-864 # 80032cf0 <__func__.0+0x3000>
    8000f058:	00021517          	auipc	a0,0x21
    8000f05c:	f9850513          	addi	a0,a0,-104 # 8002fff0 <__func__.0+0x300>
    8000f060:	02c1e0ef          	jal	8002d08c <printf>
    8000f064:	00049417          	auipc	s0,0x49
    8000f068:	fac40413          	addi	s0,s0,-84 # 80058010 <excpt>
    8000f06c:	6014                	ld	a3,0(s0)
    8000f06e:	f0001737          	lui	a4,0xf0001
    8000f072:	0712                	slli	a4,a4,0x4
    8000f074:	4785                	li	a5,1
    8000f076:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f07a:	178a                	slli	a5,a5,0x22
    8000f07c:	8f75                	and	a4,a4,a3
    8000f07e:	10078793          	addi	a5,a5,256
    8000f082:	00021597          	auipc	a1,0x21
    8000f086:	f4658593          	addi	a1,a1,-186 # 8002ffc8 <__func__.0+0x2d8>
    8000f08a:	08f70963          	beq	a4,a5,8000f11c <priv_change_8+0x118>
    8000f08e:	00021517          	auipc	a0,0x21
    8000f092:	f7a50513          	addi	a0,a0,-134 # 80030008 <__func__.0+0x318>
    8000f096:	7f71d0ef          	jal	8002d08c <printf>
    8000f09a:	00049797          	auipc	a5,0x49
    8000f09e:	f777c783          	lbu	a5,-137(a5) # 80058011 <excpt+0x1>
    8000f0a2:	cb81                	beqz	a5,8000f0b2 <priv_change_8+0xae>
    8000f0a4:	00049717          	auipc	a4,0x49
    8000f0a8:	f7072703          	lw	a4,-144(a4) # 80058014 <excpt+0x4>
    8000f0ac:	4791                	li	a5,4
    8000f0ae:	06f70163          	beq	a4,a5,8000f110 <priv_change_8+0x10c>
    8000f0b2:	00021517          	auipc	a0,0x21
    8000f0b6:	f5e50513          	addi	a0,a0,-162 # 80030010 <__func__.0+0x320>
    8000f0ba:	7d31d0ef          	jal	8002d08c <printf>
    8000f0be:	02900513          	li	a0,41
    8000f0c2:	4b91c0ef          	jal	8002bd7a <putchar>
    8000f0c6:	4529                	li	a0,10
    8000f0c8:	4b31c0ef          	jal	8002bd7a <putchar>
    8000f0cc:	6014                	ld	a3,0(s0)
    8000f0ce:	f0001737          	lui	a4,0xf0001
    8000f0d2:	0712                	slli	a4,a4,0x4
    8000f0d4:	4785                	li	a5,1
    8000f0d6:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f0da:	178a                	slli	a5,a5,0x22
    8000f0dc:	8f75                	and	a4,a4,a3
    8000f0de:	10078793          	addi	a5,a5,256
    8000f0e2:	4401                	li	s0,0
        curr_priv == PRIV_VU
    );



    TEST_END();
    8000f0e4:	00021597          	auipc	a1,0x21
    8000f0e8:	ee458593          	addi	a1,a1,-284 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f0ec:	04f70663          	beq	a4,a5,8000f138 <priv_change_8+0x134>
    TEST_END();
    8000f0f0:	00021517          	auipc	a0,0x21
    8000f0f4:	f8050513          	addi	a0,a0,-128 # 80030070 <__func__.0+0x380>
    8000f0f8:	7951d0ef          	jal	8002d08c <printf>
    8000f0fc:	4511                	li	a0,4
    8000f0fe:	e0bf10ef          	jal	80000f08 <goto_priv>
    8000f102:	fd0f20ef          	jal	800018d2 <reset_state>
}
    8000f106:	60a2                	ld	ra,8(sp)
    8000f108:	8522                	mv	a0,s0
    8000f10a:	6402                	ld	s0,0(sp)
    8000f10c:	0141                	addi	sp,sp,16
    8000f10e:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f110:	0002f797          	auipc	a5,0x2f
    8000f114:	d147a783          	lw	a5,-748(a5) # 8003de24 <curr_priv>
    8000f118:	d7dd                	beqz	a5,8000f0c6 <priv_change_8+0xc2>
    8000f11a:	bf61                	j	8000f0b2 <priv_change_8+0xae>
    8000f11c:	0002f797          	auipc	a5,0x2f
    8000f120:	d087a783          	lw	a5,-760(a5) # 8003de24 <curr_priv>
    8000f124:	00021597          	auipc	a1,0x21
    8000f128:	e9458593          	addi	a1,a1,-364 # 8002ffb8 <__func__.0+0x2c8>
    8000f12c:	d3ad                	beqz	a5,8000f08e <priv_change_8+0x8a>
    8000f12e:	00021597          	auipc	a1,0x21
    8000f132:	e9a58593          	addi	a1,a1,-358 # 8002ffc8 <__func__.0+0x2d8>
    8000f136:	bfa1                	j	8000f08e <priv_change_8+0x8a>
    8000f138:	0002f797          	auipc	a5,0x2f
    8000f13c:	cec7a783          	lw	a5,-788(a5) # 8003de24 <curr_priv>
    8000f140:	fbc5                	bnez	a5,8000f0f0 <priv_change_8+0xec>
    8000f142:	4405                	li	s0,1
    TEST_END();
    8000f144:	00021597          	auipc	a1,0x21
    8000f148:	e7458593          	addi	a1,a1,-396 # 8002ffb8 <__func__.0+0x2c8>
    8000f14c:	b755                	j	8000f0f0 <priv_change_8+0xec>

000000008000f14e <priv_change_9>:
    /*
    当异常代理到了hs模式，那么处理的时候就会用hshandler处理。
    当想去m模式，会ecall，进入异常，但是去m模式需要mhandler才能过去，在hs模式下去处理这类异常是不行的，可是由于开启了异常代理，然后就一直循环执行hshandler出错。
    因此在开启异常代理后，不能在后面执行goto_priv(PRIV_M);否则会无限循环出错
    */
bool priv_change_9(){
    8000f14e:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f150:	0001f597          	auipc	a1,0x1f
    8000f154:	35058593          	addi	a1,a1,848 # 8002e4a0 <__func__.7>
    8000f158:	00021517          	auipc	a0,0x21
    8000f15c:	e8050513          	addi	a0,a0,-384 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_9(){
    8000f160:	e406                	sd	ra,8(sp)
    8000f162:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f164:	7291d0ef          	jal	8002d08c <printf>
    8000f168:	4529                	li	a0,10
    8000f16a:	4111c0ef          	jal	8002bd7a <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f16e:	4511                	li	a0,4
    8000f170:	d99f10ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000f174:	57fd                	li	a5,-1
    8000f176:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f17a:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f17e:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f182:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VU);     
    8000f186:	4501                	li	a0,0
    8000f188:	d81f10ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f18c:	c81f10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f190:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f194:	08200593          	li	a1,130
    8000f198:	00024617          	auipc	a2,0x24
    8000f19c:	bc860613          	addi	a2,a2,-1080 # 80032d60 <__func__.0+0x3070>
    8000f1a0:	00021517          	auipc	a0,0x21
    8000f1a4:	e5050513          	addi	a0,a0,-432 # 8002fff0 <__func__.0+0x300>
    8000f1a8:	6e51d0ef          	jal	8002d08c <printf>
    8000f1ac:	00049417          	auipc	s0,0x49
    8000f1b0:	e6440413          	addi	s0,s0,-412 # 80058010 <excpt>
    8000f1b4:	6014                	ld	a3,0(s0)
    8000f1b6:	f0001737          	lui	a4,0xf0001
    8000f1ba:	0712                	slli	a4,a4,0x4
    8000f1bc:	4785                	li	a5,1
    8000f1be:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f1c2:	1786                	slli	a5,a5,0x21
    8000f1c4:	8f75                	and	a4,a4,a3
    8000f1c6:	10078793          	addi	a5,a5,256
    8000f1ca:	00021597          	auipc	a1,0x21
    8000f1ce:	dfe58593          	addi	a1,a1,-514 # 8002ffc8 <__func__.0+0x2d8>
    8000f1d2:	08f70263          	beq	a4,a5,8000f256 <priv_change_9+0x108>
    8000f1d6:	00021517          	auipc	a0,0x21
    8000f1da:	e3250513          	addi	a0,a0,-462 # 80030008 <__func__.0+0x318>
    8000f1de:	6af1d0ef          	jal	8002d08c <printf>
    8000f1e2:	00049797          	auipc	a5,0x49
    8000f1e6:	e2f7c783          	lbu	a5,-465(a5) # 80058011 <excpt+0x1>
    8000f1ea:	cb81                	beqz	a5,8000f1fa <priv_change_9+0xac>
    8000f1ec:	00049717          	auipc	a4,0x49
    8000f1f0:	e2872703          	lw	a4,-472(a4) # 80058014 <excpt+0x4>
    8000f1f4:	4789                	li	a5,2
    8000f1f6:	04f70a63          	beq	a4,a5,8000f24a <priv_change_9+0xfc>
    8000f1fa:	00021517          	auipc	a0,0x21
    8000f1fe:	e1650513          	addi	a0,a0,-490 # 80030010 <__func__.0+0x320>
    8000f202:	68b1d0ef          	jal	8002d08c <printf>
    8000f206:	02900513          	li	a0,41
    8000f20a:	3711c0ef          	jal	8002bd7a <putchar>
    8000f20e:	4529                	li	a0,10
    8000f210:	36b1c0ef          	jal	8002bd7a <putchar>
    8000f214:	6014                	ld	a3,0(s0)
    8000f216:	f0001737          	lui	a4,0xf0001
    8000f21a:	0712                	slli	a4,a4,0x4
    8000f21c:	4785                	li	a5,1
    8000f21e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f222:	1786                	slli	a5,a5,0x21
    8000f224:	8f75                	and	a4,a4,a3
    8000f226:	10078793          	addi	a5,a5,256
        curr_priv == PRIV_VU
    );


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f22a:	00021597          	auipc	a1,0x21
    8000f22e:	d9e58593          	addi	a1,a1,-610 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f232:	04f70063          	beq	a4,a5,8000f272 <priv_change_9+0x124>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f236:	00021517          	auipc	a0,0x21
    8000f23a:	e3a50513          	addi	a0,a0,-454 # 80030070 <__func__.0+0x380>
    8000f23e:	64f1d0ef          	jal	8002d08c <printf>
    }
}
    8000f242:	60a2                	ld	ra,8(sp)
    8000f244:	6402                	ld	s0,0(sp)
    8000f246:	0141                	addi	sp,sp,16
    8000f248:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f24a:	0002f797          	auipc	a5,0x2f
    8000f24e:	bda7a783          	lw	a5,-1062(a5) # 8003de24 <curr_priv>
    8000f252:	dfd5                	beqz	a5,8000f20e <priv_change_9+0xc0>
    8000f254:	b75d                	j	8000f1fa <priv_change_9+0xac>
    8000f256:	0002f797          	auipc	a5,0x2f
    8000f25a:	bce7a783          	lw	a5,-1074(a5) # 8003de24 <curr_priv>
    8000f25e:	00021597          	auipc	a1,0x21
    8000f262:	d5a58593          	addi	a1,a1,-678 # 8002ffb8 <__func__.0+0x2c8>
    8000f266:	dba5                	beqz	a5,8000f1d6 <priv_change_9+0x88>
    8000f268:	00021597          	auipc	a1,0x21
    8000f26c:	d6058593          	addi	a1,a1,-672 # 8002ffc8 <__func__.0+0x2d8>
    8000f270:	b79d                	j	8000f1d6 <priv_change_9+0x88>
    8000f272:	0002f797          	auipc	a5,0x2f
    8000f276:	bb27a783          	lw	a5,-1102(a5) # 8003de24 <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f27a:	00021597          	auipc	a1,0x21
    8000f27e:	d3e58593          	addi	a1,a1,-706 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f282:	dbd5                	beqz	a5,8000f236 <priv_change_9+0xe8>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f284:	00021597          	auipc	a1,0x21
    8000f288:	d4458593          	addi	a1,a1,-700 # 8002ffc8 <__func__.0+0x2d8>
    8000f28c:	00021517          	auipc	a0,0x21
    8000f290:	de450513          	addi	a0,a0,-540 # 80030070 <__func__.0+0x380>
    8000f294:	5f91d0ef          	jal	8002d08c <printf>
}
    8000f298:	60a2                	ld	ra,8(sp)
    8000f29a:	6402                	ld	s0,0(sp)
    8000f29c:	0141                	addi	sp,sp,16
    8000f29e:	8082                	ret

000000008000f2a0 <priv_change_10>:


bool priv_change_10(){
    8000f2a0:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f2a2:	0001f597          	auipc	a1,0x1f
    8000f2a6:	20e58593          	addi	a1,a1,526 # 8002e4b0 <__func__.6>
    8000f2aa:	00021517          	auipc	a0,0x21
    8000f2ae:	d2e50513          	addi	a0,a0,-722 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_10(){
    8000f2b2:	e406                	sd	ra,8(sp)
    8000f2b4:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f2b6:	5d71d0ef          	jal	8002d08c <printf>
    8000f2ba:	4529                	li	a0,10
    8000f2bc:	2bf1c0ef          	jal	8002bd7a <putchar>


    //V=0，U模式下发生异常，打开代理medeleg/mideleg，切换到HS态处理异常，异常处理结束执行sret恢复到U态
    goto_priv(PRIV_M);
    8000f2c0:	4511                	li	a0,4
    8000f2c2:	c47f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f2c6:	e0cf20ef          	jal	800018d2 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f2ca:	57fd                	li	a5,-1
    8000f2cc:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f2d0:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f2d4:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f2d8:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HU);     
    8000f2dc:	4505                	li	a0,1
    8000f2de:	c2bf10ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f2e2:	b2bf10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f2e6:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f2ea:	08200593          	li	a1,130
    8000f2ee:	00024617          	auipc	a2,0x24
    8000f2f2:	ae260613          	addi	a2,a2,-1310 # 80032dd0 <__func__.0+0x30e0>
    8000f2f6:	00021517          	auipc	a0,0x21
    8000f2fa:	cfa50513          	addi	a0,a0,-774 # 8002fff0 <__func__.0+0x300>
    8000f2fe:	58f1d0ef          	jal	8002d08c <printf>
    8000f302:	00049417          	auipc	s0,0x49
    8000f306:	d0e40413          	addi	s0,s0,-754 # 80058010 <excpt>
    8000f30a:	6014                	ld	a3,0(s0)
    8000f30c:	f0001737          	lui	a4,0xf0001
    8000f310:	0712                	slli	a4,a4,0x4
    8000f312:	478d                	li	a5,3
    8000f314:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f318:	1782                	slli	a5,a5,0x20
    8000f31a:	8f75                	and	a4,a4,a3
    8000f31c:	10078793          	addi	a5,a5,256
    8000f320:	00021597          	auipc	a1,0x21
    8000f324:	ca858593          	addi	a1,a1,-856 # 8002ffc8 <__func__.0+0x2d8>
    8000f328:	08f70463          	beq	a4,a5,8000f3b0 <priv_change_10+0x110>
    8000f32c:	00021517          	auipc	a0,0x21
    8000f330:	cdc50513          	addi	a0,a0,-804 # 80030008 <__func__.0+0x318>
    8000f334:	5591d0ef          	jal	8002d08c <printf>
    8000f338:	00049797          	auipc	a5,0x49
    8000f33c:	cd97c783          	lbu	a5,-807(a5) # 80058011 <excpt+0x1>
    8000f340:	cb81                	beqz	a5,8000f350 <priv_change_10+0xb0>
    8000f342:	00049717          	auipc	a4,0x49
    8000f346:	cd272703          	lw	a4,-814(a4) # 80058014 <excpt+0x4>
    8000f34a:	478d                	li	a5,3
    8000f34c:	04f70a63          	beq	a4,a5,8000f3a0 <priv_change_10+0x100>
    8000f350:	00021517          	auipc	a0,0x21
    8000f354:	cc050513          	addi	a0,a0,-832 # 80030010 <__func__.0+0x320>
    8000f358:	5351d0ef          	jal	8002d08c <printf>
    8000f35c:	02900513          	li	a0,41
    8000f360:	21b1c0ef          	jal	8002bd7a <putchar>
    8000f364:	4529                	li	a0,10
    8000f366:	2151c0ef          	jal	8002bd7a <putchar>
    8000f36a:	6014                	ld	a3,0(s0)
    8000f36c:	f0001737          	lui	a4,0xf0001
    8000f370:	0712                	slli	a4,a4,0x4
    8000f372:	478d                	li	a5,3
    8000f374:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f378:	1782                	slli	a5,a5,0x20
    8000f37a:	8f75                	and	a4,a4,a3
    8000f37c:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_HU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f380:	00021597          	auipc	a1,0x21
    8000f384:	c4858593          	addi	a1,a1,-952 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f388:	04f70463          	beq	a4,a5,8000f3d0 <priv_change_10+0x130>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f38c:	00021517          	auipc	a0,0x21
    8000f390:	ce450513          	addi	a0,a0,-796 # 80030070 <__func__.0+0x380>
    8000f394:	4f91d0ef          	jal	8002d08c <printf>
    }
}
    8000f398:	60a2                	ld	ra,8(sp)
    8000f39a:	6402                	ld	s0,0(sp)
    8000f39c:	0141                	addi	sp,sp,16
    8000f39e:	8082                	ret
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f3a0:	0002f717          	auipc	a4,0x2f
    8000f3a4:	a8472703          	lw	a4,-1404(a4) # 8003de24 <curr_priv>
    8000f3a8:	4785                	li	a5,1
    8000f3aa:	faf713e3          	bne	a4,a5,8000f350 <priv_change_10+0xb0>
    8000f3ae:	bf5d                	j	8000f364 <priv_change_10+0xc4>
    8000f3b0:	0002f717          	auipc	a4,0x2f
    8000f3b4:	a7472703          	lw	a4,-1420(a4) # 8003de24 <curr_priv>
    8000f3b8:	4785                	li	a5,1
    8000f3ba:	00021597          	auipc	a1,0x21
    8000f3be:	bfe58593          	addi	a1,a1,-1026 # 8002ffb8 <__func__.0+0x2c8>
    8000f3c2:	f6f705e3          	beq	a4,a5,8000f32c <priv_change_10+0x8c>
    8000f3c6:	00021597          	auipc	a1,0x21
    8000f3ca:	c0258593          	addi	a1,a1,-1022 # 8002ffc8 <__func__.0+0x2d8>
    8000f3ce:	bfb9                	j	8000f32c <priv_change_10+0x8c>
    8000f3d0:	0002f717          	auipc	a4,0x2f
    8000f3d4:	a5472703          	lw	a4,-1452(a4) # 8003de24 <curr_priv>
    8000f3d8:	4785                	li	a5,1
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f3da:	00021597          	auipc	a1,0x21
    8000f3de:	bde58593          	addi	a1,a1,-1058 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f3e2:	faf705e3          	beq	a4,a5,8000f38c <priv_change_10+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f3e6:	00021597          	auipc	a1,0x21
    8000f3ea:	be258593          	addi	a1,a1,-1054 # 8002ffc8 <__func__.0+0x2d8>
    8000f3ee:	00021517          	auipc	a0,0x21
    8000f3f2:	c8250513          	addi	a0,a0,-894 # 80030070 <__func__.0+0x380>
    8000f3f6:	4971d0ef          	jal	8002d08c <printf>
}
    8000f3fa:	60a2                	ld	ra,8(sp)
    8000f3fc:	6402                	ld	s0,0(sp)
    8000f3fe:	0141                	addi	sp,sp,16
    8000f400:	8082                	ret

000000008000f402 <priv_change_11>:


bool priv_change_11(){
    8000f402:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f404:	0001f597          	auipc	a1,0x1f
    8000f408:	0bc58593          	addi	a1,a1,188 # 8002e4c0 <__func__.5>
    8000f40c:	00021517          	auipc	a0,0x21
    8000f410:	bcc50513          	addi	a0,a0,-1076 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_11(){
    8000f414:	e406                	sd	ra,8(sp)
    8000f416:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f418:	4751d0ef          	jal	8002d08c <printf>
    8000f41c:	4529                	li	a0,10
    8000f41e:	15d1c0ef          	jal	8002bd7a <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常
    goto_priv(PRIV_M);
    8000f422:	4511                	li	a0,4
    8000f424:	ae5f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f428:	caaf20ef          	jal	800018d2 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f42c:	57fd                	li	a5,-1
    8000f42e:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f432:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f436:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f43a:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VS);    
    8000f43e:	4509                	li	a0,2
    8000f440:	ac9f10ef          	jal	80000f08 <goto_priv>
    

    TEST_SETUP_EXCEPT();        
    8000f444:	9c9f10ef          	jal	80000e0c <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000f448:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f44c:	08200593          	li	a1,130
    8000f450:	00024617          	auipc	a2,0x24
    8000f454:	9f060613          	addi	a2,a2,-1552 # 80032e40 <__func__.0+0x3150>
    8000f458:	00021517          	auipc	a0,0x21
    8000f45c:	b9850513          	addi	a0,a0,-1128 # 8002fff0 <__func__.0+0x300>
    8000f460:	42d1d0ef          	jal	8002d08c <printf>
    8000f464:	00049417          	auipc	s0,0x49
    8000f468:	bac40413          	addi	s0,s0,-1108 # 80058010 <excpt>
    8000f46c:	6014                	ld	a3,0(s0)
    8000f46e:	f0001737          	lui	a4,0xf0001
    8000f472:	0712                	slli	a4,a4,0x4
    8000f474:	4785                	li	a5,1
    8000f476:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f47a:	1786                	slli	a5,a5,0x21
    8000f47c:	8f75                	and	a4,a4,a3
    8000f47e:	10078793          	addi	a5,a5,256
    8000f482:	00021597          	auipc	a1,0x21
    8000f486:	b3658593          	addi	a1,a1,-1226 # 8002ffb8 <__func__.0+0x2c8>
    8000f48a:	00f70663          	beq	a4,a5,8000f496 <priv_change_11+0x94>
    8000f48e:	00021597          	auipc	a1,0x21
    8000f492:	b3a58593          	addi	a1,a1,-1222 # 8002ffc8 <__func__.0+0x2d8>
    8000f496:	00021517          	auipc	a0,0x21
    8000f49a:	b7250513          	addi	a0,a0,-1166 # 80030008 <__func__.0+0x318>
    8000f49e:	3ef1d0ef          	jal	8002d08c <printf>
    8000f4a2:	00049797          	auipc	a5,0x49
    8000f4a6:	b6f7c783          	lbu	a5,-1169(a5) # 80058011 <excpt+0x1>
    8000f4aa:	cb81                	beqz	a5,8000f4ba <priv_change_11+0xb8>
    8000f4ac:	00049717          	auipc	a4,0x49
    8000f4b0:	b6872703          	lw	a4,-1176(a4) # 80058014 <excpt+0x4>
    8000f4b4:	4789                	li	a5,2
    8000f4b6:	00f70c63          	beq	a4,a5,8000f4ce <priv_change_11+0xcc>
    8000f4ba:	00021517          	auipc	a0,0x21
    8000f4be:	b5650513          	addi	a0,a0,-1194 # 80030010 <__func__.0+0x320>
    8000f4c2:	3cb1d0ef          	jal	8002d08c <printf>
    8000f4c6:	02900513          	li	a0,41
    8000f4ca:	0b11c0ef          	jal	8002bd7a <putchar>
    8000f4ce:	4529                	li	a0,10
    8000f4d0:	0ab1c0ef          	jal	8002bd7a <putchar>
    8000f4d4:	6014                	ld	a3,0(s0)
    8000f4d6:	f0001737          	lui	a4,0xf0001
    8000f4da:	0712                	slli	a4,a4,0x4
    8000f4dc:	4785                	li	a5,1
    8000f4de:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f4e2:	1786                	slli	a5,a5,0x21
    8000f4e4:	8f75                	and	a4,a4,a3
    8000f4e6:	10078793          	addi	a5,a5,256
        excpt.priv==PRIV_VS
    ); 


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f4ea:	00021597          	auipc	a1,0x21
    8000f4ee:	ade58593          	addi	a1,a1,-1314 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f4f2:	00f71663          	bne	a4,a5,8000f4fe <priv_change_11+0xfc>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f4f6:	00021597          	auipc	a1,0x21
    8000f4fa:	ac258593          	addi	a1,a1,-1342 # 8002ffb8 <__func__.0+0x2c8>
    8000f4fe:	00021517          	auipc	a0,0x21
    8000f502:	b7250513          	addi	a0,a0,-1166 # 80030070 <__func__.0+0x380>
    8000f506:	3871d0ef          	jal	8002d08c <printf>
    }
}
    8000f50a:	60a2                	ld	ra,8(sp)
    8000f50c:	6402                	ld	s0,0(sp)
    8000f50e:	0141                	addi	sp,sp,16
    8000f510:	8082                	ret

000000008000f512 <priv_change_12>:



bool priv_change_12(){
    8000f512:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f514:	0001f597          	auipc	a1,0x1f
    8000f518:	fbc58593          	addi	a1,a1,-68 # 8002e4d0 <__func__.4>
    8000f51c:	00021517          	auipc	a0,0x21
    8000f520:	abc50513          	addi	a0,a0,-1348 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_12(){
    8000f524:	e406                	sd	ra,8(sp)
    8000f526:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f528:	3651d0ef          	jal	8002d08c <printf>
    8000f52c:	4529                	li	a0,10
    8000f52e:	04d1c0ef          	jal	8002bd7a <putchar>



    //V=0，HS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常

    goto_priv(PRIV_M);     
    8000f532:	4511                	li	a0,4
    8000f534:	9d5f10ef          	jal	80000f08 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000f538:	57fd                	li	a5,-1
    8000f53a:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f53e:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f542:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f546:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HS);
    8000f54a:	450d                	li	a0,3
    8000f54c:	9bdf10ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000f550:	8bdf10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f554:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f558:	08200593          	li	a1,130
    8000f55c:	00024617          	auipc	a2,0x24
    8000f560:	93c60613          	addi	a2,a2,-1732 # 80032e98 <__func__.0+0x31a8>
    8000f564:	00021517          	auipc	a0,0x21
    8000f568:	a8c50513          	addi	a0,a0,-1396 # 8002fff0 <__func__.0+0x300>
    8000f56c:	3211d0ef          	jal	8002d08c <printf>
    8000f570:	00049417          	auipc	s0,0x49
    8000f574:	aa040413          	addi	s0,s0,-1376 # 80058010 <excpt>
    8000f578:	6014                	ld	a3,0(s0)
    8000f57a:	f0001737          	lui	a4,0xf0001
    8000f57e:	0712                	slli	a4,a4,0x4
    8000f580:	478d                	li	a5,3
    8000f582:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f586:	1782                	slli	a5,a5,0x20
    8000f588:	8f75                	and	a4,a4,a3
    8000f58a:	10078793          	addi	a5,a5,256
    8000f58e:	00021597          	auipc	a1,0x21
    8000f592:	a2a58593          	addi	a1,a1,-1494 # 8002ffb8 <__func__.0+0x2c8>
    8000f596:	00f70663          	beq	a4,a5,8000f5a2 <priv_change_12+0x90>
    8000f59a:	00021597          	auipc	a1,0x21
    8000f59e:	a2e58593          	addi	a1,a1,-1490 # 8002ffc8 <__func__.0+0x2d8>
    8000f5a2:	00021517          	auipc	a0,0x21
    8000f5a6:	a6650513          	addi	a0,a0,-1434 # 80030008 <__func__.0+0x318>
    8000f5aa:	2e31d0ef          	jal	8002d08c <printf>
    8000f5ae:	00049797          	auipc	a5,0x49
    8000f5b2:	a637c783          	lbu	a5,-1437(a5) # 80058011 <excpt+0x1>
    8000f5b6:	cb81                	beqz	a5,8000f5c6 <priv_change_12+0xb4>
    8000f5b8:	00049717          	auipc	a4,0x49
    8000f5bc:	a5c72703          	lw	a4,-1444(a4) # 80058014 <excpt+0x4>
    8000f5c0:	478d                	li	a5,3
    8000f5c2:	00f70c63          	beq	a4,a5,8000f5da <priv_change_12+0xc8>
    8000f5c6:	00021517          	auipc	a0,0x21
    8000f5ca:	a4a50513          	addi	a0,a0,-1462 # 80030010 <__func__.0+0x320>
    8000f5ce:	2bf1d0ef          	jal	8002d08c <printf>
    8000f5d2:	02900513          	li	a0,41
    8000f5d6:	7a41c0ef          	jal	8002bd7a <putchar>
    8000f5da:	4529                	li	a0,10
    8000f5dc:	79e1c0ef          	jal	8002bd7a <putchar>
    8000f5e0:	6014                	ld	a3,0(s0)
    8000f5e2:	f0001737          	lui	a4,0xf0001
    8000f5e6:	0712                	slli	a4,a4,0x4
    8000f5e8:	478d                	li	a5,3
    8000f5ea:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f5ee:	1782                	slli	a5,a5,0x20
    8000f5f0:	8f75                	and	a4,a4,a3
    8000f5f2:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS
    ); 


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f5f6:	00021597          	auipc	a1,0x21
    8000f5fa:	9d258593          	addi	a1,a1,-1582 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f5fe:	00f71663          	bne	a4,a5,8000f60a <priv_change_12+0xf8>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f602:	00021597          	auipc	a1,0x21
    8000f606:	9b658593          	addi	a1,a1,-1610 # 8002ffb8 <__func__.0+0x2c8>
    8000f60a:	00021517          	auipc	a0,0x21
    8000f60e:	a6650513          	addi	a0,a0,-1434 # 80030070 <__func__.0+0x380>
    8000f612:	27b1d0ef          	jal	8002d08c <printf>
    }

}
    8000f616:	60a2                	ld	ra,8(sp)
    8000f618:	6402                	ld	s0,0(sp)
    8000f61a:	0141                	addi	sp,sp,16
    8000f61c:	8082                	ret

000000008000f61e <priv_change_13>:

bool priv_change_13(){
    8000f61e:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f620:	0001f597          	auipc	a1,0x1f
    8000f624:	ec058593          	addi	a1,a1,-320 # 8002e4e0 <__func__.3>
    8000f628:	00021517          	auipc	a0,0x21
    8000f62c:	9b050513          	addi	a0,a0,-1616 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_13(){
    8000f630:	e406                	sd	ra,8(sp)
    8000f632:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f634:	2591d0ef          	jal	8002d08c <printf>
    8000f638:	4529                	li	a0,10
    8000f63a:	7401c0ef          	jal	8002bd7a <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f63e:	4511                	li	a0,4
    8000f640:	8c9f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f644:	a8ef20ef          	jal	800018d2 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f648:	57fd                	li	a5,-1
    8000f64a:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f64e:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f652:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f656:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();  
    8000f65a:	fb2f10ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VU);      
    8000f65e:	4501                	li	a0,0
    8000f660:	8a9f10ef          	jal	80000f08 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f664:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f668:	08200593          	li	a1,130
    8000f66c:	00024617          	auipc	a2,0x24
    8000f670:	88460613          	addi	a2,a2,-1916 # 80032ef0 <__func__.0+0x3200>
    8000f674:	00021517          	auipc	a0,0x21
    8000f678:	97c50513          	addi	a0,a0,-1668 # 8002fff0 <__func__.0+0x300>
    8000f67c:	2111d0ef          	jal	8002d08c <printf>
    8000f680:	00049417          	auipc	s0,0x49
    8000f684:	99040413          	addi	s0,s0,-1648 # 80058010 <excpt>
    8000f688:	6014                	ld	a3,0(s0)
    8000f68a:	f0001737          	lui	a4,0xf0001
    8000f68e:	0712                	slli	a4,a4,0x4
    8000f690:	478d                	li	a5,3
    8000f692:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f696:	1782                	slli	a5,a5,0x20
    8000f698:	8f75                	and	a4,a4,a3
    8000f69a:	10078793          	addi	a5,a5,256
    8000f69e:	00021597          	auipc	a1,0x21
    8000f6a2:	92a58593          	addi	a1,a1,-1750 # 8002ffc8 <__func__.0+0x2d8>
    8000f6a6:	08f70263          	beq	a4,a5,8000f72a <priv_change_13+0x10c>
    8000f6aa:	00021517          	auipc	a0,0x21
    8000f6ae:	95e50513          	addi	a0,a0,-1698 # 80030008 <__func__.0+0x318>
    8000f6b2:	1db1d0ef          	jal	8002d08c <printf>
    8000f6b6:	00049797          	auipc	a5,0x49
    8000f6ba:	95b7c783          	lbu	a5,-1701(a5) # 80058011 <excpt+0x1>
    8000f6be:	cb81                	beqz	a5,8000f6ce <priv_change_13+0xb0>
    8000f6c0:	00049717          	auipc	a4,0x49
    8000f6c4:	95472703          	lw	a4,-1708(a4) # 80058014 <excpt+0x4>
    8000f6c8:	478d                	li	a5,3
    8000f6ca:	04f70a63          	beq	a4,a5,8000f71e <priv_change_13+0x100>
    8000f6ce:	00021517          	auipc	a0,0x21
    8000f6d2:	94250513          	addi	a0,a0,-1726 # 80030010 <__func__.0+0x320>
    8000f6d6:	1b71d0ef          	jal	8002d08c <printf>
    8000f6da:	02900513          	li	a0,41
    8000f6de:	69c1c0ef          	jal	8002bd7a <putchar>
    8000f6e2:	4529                	li	a0,10
    8000f6e4:	6961c0ef          	jal	8002bd7a <putchar>
    8000f6e8:	6014                	ld	a3,0(s0)
    8000f6ea:	f0001737          	lui	a4,0xf0001
    8000f6ee:	0712                	slli	a4,a4,0x4
    8000f6f0:	478d                	li	a5,3
    8000f6f2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f6f6:	1782                	slli	a5,a5,0x20
    8000f6f8:	8f75                	and	a4,a4,a3
    8000f6fa:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f6fe:	00021597          	auipc	a1,0x21
    8000f702:	8ca58593          	addi	a1,a1,-1846 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f706:	04f70063          	beq	a4,a5,8000f746 <priv_change_13+0x128>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f70a:	00021517          	auipc	a0,0x21
    8000f70e:	96650513          	addi	a0,a0,-1690 # 80030070 <__func__.0+0x380>
    8000f712:	17b1d0ef          	jal	8002d08c <printf>
    }
}
    8000f716:	60a2                	ld	ra,8(sp)
    8000f718:	6402                	ld	s0,0(sp)
    8000f71a:	0141                	addi	sp,sp,16
    8000f71c:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f71e:	0002e797          	auipc	a5,0x2e
    8000f722:	7067a783          	lw	a5,1798(a5) # 8003de24 <curr_priv>
    8000f726:	dfd5                	beqz	a5,8000f6e2 <priv_change_13+0xc4>
    8000f728:	b75d                	j	8000f6ce <priv_change_13+0xb0>
    8000f72a:	0002e797          	auipc	a5,0x2e
    8000f72e:	6fa7a783          	lw	a5,1786(a5) # 8003de24 <curr_priv>
    8000f732:	00021597          	auipc	a1,0x21
    8000f736:	88658593          	addi	a1,a1,-1914 # 8002ffb8 <__func__.0+0x2c8>
    8000f73a:	dba5                	beqz	a5,8000f6aa <priv_change_13+0x8c>
    8000f73c:	00021597          	auipc	a1,0x21
    8000f740:	88c58593          	addi	a1,a1,-1908 # 8002ffc8 <__func__.0+0x2d8>
    8000f744:	b79d                	j	8000f6aa <priv_change_13+0x8c>
    8000f746:	0002e797          	auipc	a5,0x2e
    8000f74a:	6de7a783          	lw	a5,1758(a5) # 8003de24 <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f74e:	00021597          	auipc	a1,0x21
    8000f752:	86a58593          	addi	a1,a1,-1942 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f756:	dbd5                	beqz	a5,8000f70a <priv_change_13+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f758:	00021597          	auipc	a1,0x21
    8000f75c:	87058593          	addi	a1,a1,-1936 # 8002ffc8 <__func__.0+0x2d8>
    8000f760:	00021517          	auipc	a0,0x21
    8000f764:	91050513          	addi	a0,a0,-1776 # 80030070 <__func__.0+0x380>
    8000f768:	1251d0ef          	jal	8002d08c <printf>
}
    8000f76c:	60a2                	ld	ra,8(sp)
    8000f76e:	6402                	ld	s0,0(sp)
    8000f770:	0141                	addi	sp,sp,16
    8000f772:	8082                	ret

000000008000f774 <priv_change_14>:

bool priv_change_14(){
    8000f774:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f776:	0001f597          	auipc	a1,0x1f
    8000f77a:	d7a58593          	addi	a1,a1,-646 # 8002e4f0 <__func__.2>
    8000f77e:	00021517          	auipc	a0,0x21
    8000f782:	85a50513          	addi	a0,a0,-1958 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_14(){
    8000f786:	e406                	sd	ra,8(sp)
    8000f788:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f78a:	1031d0ef          	jal	8002d08c <printf>
    8000f78e:	4529                	li	a0,10
    8000f790:	5ea1c0ef          	jal	8002bd7a <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭理hedeleg/hideleg，切换到HS态处理异常，异常处理结束恢复执行sret到VU态
    goto_priv(PRIV_M);
    8000f794:	4511                	li	a0,4
    8000f796:	f72f10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f79a:	938f20ef          	jal	800018d2 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f79e:	57fd                	li	a5,-1
    8000f7a0:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f7a4:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f7a8:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f7ac:	60205073          	csrwi	hedeleg,0
    
    goto_priv(PRIV_VU);     
    8000f7b0:	4501                	li	a0,0
    8000f7b2:	f56f10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();        
    8000f7b6:	e56f10ef          	jal	80000e0c <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000f7ba:	30205073          	csrwi	medeleg,0

    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f7be:	08200593          	li	a1,130
    8000f7c2:	00023617          	auipc	a2,0x23
    8000f7c6:	79e60613          	addi	a2,a2,1950 # 80032f60 <__func__.0+0x3270>
    8000f7ca:	00021517          	auipc	a0,0x21
    8000f7ce:	82650513          	addi	a0,a0,-2010 # 8002fff0 <__func__.0+0x300>
    8000f7d2:	0bb1d0ef          	jal	8002d08c <printf>
    8000f7d6:	00049417          	auipc	s0,0x49
    8000f7da:	83a40413          	addi	s0,s0,-1990 # 80058010 <excpt>
    8000f7de:	6014                	ld	a3,0(s0)
    8000f7e0:	f0001737          	lui	a4,0xf0001
    8000f7e4:	0712                	slli	a4,a4,0x4
    8000f7e6:	478d                	li	a5,3
    8000f7e8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f7ec:	1782                	slli	a5,a5,0x20
    8000f7ee:	8f75                	and	a4,a4,a3
    8000f7f0:	10078793          	addi	a5,a5,256
    8000f7f4:	00020597          	auipc	a1,0x20
    8000f7f8:	7d458593          	addi	a1,a1,2004 # 8002ffc8 <__func__.0+0x2d8>
    8000f7fc:	08f70263          	beq	a4,a5,8000f880 <priv_change_14+0x10c>
    8000f800:	00021517          	auipc	a0,0x21
    8000f804:	80850513          	addi	a0,a0,-2040 # 80030008 <__func__.0+0x318>
    8000f808:	0851d0ef          	jal	8002d08c <printf>
    8000f80c:	00049797          	auipc	a5,0x49
    8000f810:	8057c783          	lbu	a5,-2043(a5) # 80058011 <excpt+0x1>
    8000f814:	cb81                	beqz	a5,8000f824 <priv_change_14+0xb0>
    8000f816:	00048717          	auipc	a4,0x48
    8000f81a:	7fe72703          	lw	a4,2046(a4) # 80058014 <excpt+0x4>
    8000f81e:	478d                	li	a5,3
    8000f820:	04f70a63          	beq	a4,a5,8000f874 <priv_change_14+0x100>
    8000f824:	00020517          	auipc	a0,0x20
    8000f828:	7ec50513          	addi	a0,a0,2028 # 80030010 <__func__.0+0x320>
    8000f82c:	0611d0ef          	jal	8002d08c <printf>
    8000f830:	02900513          	li	a0,41
    8000f834:	5461c0ef          	jal	8002bd7a <putchar>
    8000f838:	4529                	li	a0,10
    8000f83a:	5401c0ef          	jal	8002bd7a <putchar>
    8000f83e:	6014                	ld	a3,0(s0)
    8000f840:	f0001737          	lui	a4,0xf0001
    8000f844:	0712                	slli	a4,a4,0x4
    8000f846:	478d                	li	a5,3
    8000f848:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f84c:	1782                	slli	a5,a5,0x20
    8000f84e:	8f75                	and	a4,a4,a3
    8000f850:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f854:	00020597          	auipc	a1,0x20
    8000f858:	77458593          	addi	a1,a1,1908 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f85c:	04f70063          	beq	a4,a5,8000f89c <priv_change_14+0x128>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f860:	00021517          	auipc	a0,0x21
    8000f864:	81050513          	addi	a0,a0,-2032 # 80030070 <__func__.0+0x380>
    8000f868:	0251d0ef          	jal	8002d08c <printf>
    }

}
    8000f86c:	60a2                	ld	ra,8(sp)
    8000f86e:	6402                	ld	s0,0(sp)
    8000f870:	0141                	addi	sp,sp,16
    8000f872:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f874:	0002e797          	auipc	a5,0x2e
    8000f878:	5b07a783          	lw	a5,1456(a5) # 8003de24 <curr_priv>
    8000f87c:	dfd5                	beqz	a5,8000f838 <priv_change_14+0xc4>
    8000f87e:	b75d                	j	8000f824 <priv_change_14+0xb0>
    8000f880:	0002e797          	auipc	a5,0x2e
    8000f884:	5a47a783          	lw	a5,1444(a5) # 8003de24 <curr_priv>
    8000f888:	00020597          	auipc	a1,0x20
    8000f88c:	73058593          	addi	a1,a1,1840 # 8002ffb8 <__func__.0+0x2c8>
    8000f890:	dba5                	beqz	a5,8000f800 <priv_change_14+0x8c>
    8000f892:	00020597          	auipc	a1,0x20
    8000f896:	73658593          	addi	a1,a1,1846 # 8002ffc8 <__func__.0+0x2d8>
    8000f89a:	b79d                	j	8000f800 <priv_change_14+0x8c>
    8000f89c:	0002e797          	auipc	a5,0x2e
    8000f8a0:	5887a783          	lw	a5,1416(a5) # 8003de24 <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f8a4:	00020597          	auipc	a1,0x20
    8000f8a8:	71458593          	addi	a1,a1,1812 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f8ac:	dbd5                	beqz	a5,8000f860 <priv_change_14+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f8ae:	00020597          	auipc	a1,0x20
    8000f8b2:	71a58593          	addi	a1,a1,1818 # 8002ffc8 <__func__.0+0x2d8>
    8000f8b6:	00020517          	auipc	a0,0x20
    8000f8ba:	7ba50513          	addi	a0,a0,1978 # 80030070 <__func__.0+0x380>
    8000f8be:	7ce1d0ef          	jal	8002d08c <printf>
}
    8000f8c2:	60a2                	ld	ra,8(sp)
    8000f8c4:	6402                	ld	s0,0(sp)
    8000f8c6:	0141                	addi	sp,sp,16
    8000f8c8:	8082                	ret

000000008000f8ca <priv_change_15>:

bool priv_change_15(){
    8000f8ca:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f8cc:	0001f597          	auipc	a1,0x1f
    8000f8d0:	c3458593          	addi	a1,a1,-972 # 8002e500 <__func__.1>
    8000f8d4:	00020517          	auipc	a0,0x20
    8000f8d8:	70450513          	addi	a0,a0,1796 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_15(){
    8000f8dc:	e406                	sd	ra,8(sp)
    8000f8de:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f8e0:	7ac1d0ef          	jal	8002d08c <printf>
    8000f8e4:	4529                	li	a0,10
    8000f8e6:	4941c0ef          	jal	8002bd7a <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f8ea:	4511                	li	a0,4
    8000f8ec:	e1cf10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000f8f0:	fe3f10ef          	jal	800018d2 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f8f4:	57fd                	li	a5,-1
    8000f8f6:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f8fa:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f8fe:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f902:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();    
    8000f906:	d06f10ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VS);     
    8000f90a:	4509                	li	a0,2
    8000f90c:	dfcf10ef          	jal	80000f08 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f910:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f914:	08200593          	li	a1,130
    8000f918:	00023617          	auipc	a2,0x23
    8000f91c:	6b860613          	addi	a2,a2,1720 # 80032fd0 <__func__.0+0x32e0>
    8000f920:	00020517          	auipc	a0,0x20
    8000f924:	6d050513          	addi	a0,a0,1744 # 8002fff0 <__func__.0+0x300>
    8000f928:	7641d0ef          	jal	8002d08c <printf>
    8000f92c:	00048417          	auipc	s0,0x48
    8000f930:	6e440413          	addi	s0,s0,1764 # 80058010 <excpt>
    8000f934:	6014                	ld	a3,0(s0)
    8000f936:	f0001737          	lui	a4,0xf0001
    8000f93a:	0712                	slli	a4,a4,0x4
    8000f93c:	478d                	li	a5,3
    8000f93e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f942:	1782                	slli	a5,a5,0x20
    8000f944:	8f75                	and	a4,a4,a3
    8000f946:	10078793          	addi	a5,a5,256
    8000f94a:	00020597          	auipc	a1,0x20
    8000f94e:	67e58593          	addi	a1,a1,1662 # 8002ffc8 <__func__.0+0x2d8>
    8000f952:	08f70463          	beq	a4,a5,8000f9da <priv_change_15+0x110>
    8000f956:	00020517          	auipc	a0,0x20
    8000f95a:	6b250513          	addi	a0,a0,1714 # 80030008 <__func__.0+0x318>
    8000f95e:	72e1d0ef          	jal	8002d08c <printf>
    8000f962:	00048797          	auipc	a5,0x48
    8000f966:	6af7c783          	lbu	a5,1711(a5) # 80058011 <excpt+0x1>
    8000f96a:	cb81                	beqz	a5,8000f97a <priv_change_15+0xb0>
    8000f96c:	00048717          	auipc	a4,0x48
    8000f970:	6a872703          	lw	a4,1704(a4) # 80058014 <excpt+0x4>
    8000f974:	478d                	li	a5,3
    8000f976:	04f70a63          	beq	a4,a5,8000f9ca <priv_change_15+0x100>
    8000f97a:	00020517          	auipc	a0,0x20
    8000f97e:	69650513          	addi	a0,a0,1686 # 80030010 <__func__.0+0x320>
    8000f982:	70a1d0ef          	jal	8002d08c <printf>
    8000f986:	02900513          	li	a0,41
    8000f98a:	3f01c0ef          	jal	8002bd7a <putchar>
    8000f98e:	4529                	li	a0,10
    8000f990:	3ea1c0ef          	jal	8002bd7a <putchar>
    8000f994:	6014                	ld	a3,0(s0)
    8000f996:	f0001737          	lui	a4,0xf0001
    8000f99a:	0712                	slli	a4,a4,0x4
    8000f99c:	478d                	li	a5,3
    8000f99e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f9a2:	1782                	slli	a5,a5,0x20
    8000f9a4:	8f75                	and	a4,a4,a3
    8000f9a6:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VS
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f9aa:	00020597          	auipc	a1,0x20
    8000f9ae:	61e58593          	addi	a1,a1,1566 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f9b2:	04f70463          	beq	a4,a5,8000f9fa <priv_change_15+0x130>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f9b6:	00020517          	auipc	a0,0x20
    8000f9ba:	6ba50513          	addi	a0,a0,1722 # 80030070 <__func__.0+0x380>
    8000f9be:	6ce1d0ef          	jal	8002d08c <printf>
    }

}
    8000f9c2:	60a2                	ld	ra,8(sp)
    8000f9c4:	6402                	ld	s0,0(sp)
    8000f9c6:	0141                	addi	sp,sp,16
    8000f9c8:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f9ca:	0002e717          	auipc	a4,0x2e
    8000f9ce:	45a72703          	lw	a4,1114(a4) # 8003de24 <curr_priv>
    8000f9d2:	4789                	li	a5,2
    8000f9d4:	faf713e3          	bne	a4,a5,8000f97a <priv_change_15+0xb0>
    8000f9d8:	bf5d                	j	8000f98e <priv_change_15+0xc4>
    8000f9da:	0002e717          	auipc	a4,0x2e
    8000f9de:	44a72703          	lw	a4,1098(a4) # 8003de24 <curr_priv>
    8000f9e2:	4789                	li	a5,2
    8000f9e4:	00020597          	auipc	a1,0x20
    8000f9e8:	5d458593          	addi	a1,a1,1492 # 8002ffb8 <__func__.0+0x2c8>
    8000f9ec:	f6f705e3          	beq	a4,a5,8000f956 <priv_change_15+0x8c>
    8000f9f0:	00020597          	auipc	a1,0x20
    8000f9f4:	5d858593          	addi	a1,a1,1496 # 8002ffc8 <__func__.0+0x2d8>
    8000f9f8:	bfb9                	j	8000f956 <priv_change_15+0x8c>
    8000f9fa:	0002e717          	auipc	a4,0x2e
    8000f9fe:	42a72703          	lw	a4,1066(a4) # 8003de24 <curr_priv>
    8000fa02:	4789                	li	a5,2
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fa04:	00020597          	auipc	a1,0x20
    8000fa08:	5b458593          	addi	a1,a1,1460 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fa0c:	faf705e3          	beq	a4,a5,8000f9b6 <priv_change_15+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fa10:	00020597          	auipc	a1,0x20
    8000fa14:	5b858593          	addi	a1,a1,1464 # 8002ffc8 <__func__.0+0x2d8>
    8000fa18:	00020517          	auipc	a0,0x20
    8000fa1c:	65850513          	addi	a0,a0,1624 # 80030070 <__func__.0+0x380>
    8000fa20:	66c1d0ef          	jal	8002d08c <printf>
}
    8000fa24:	60a2                	ld	ra,8(sp)
    8000fa26:	6402                	ld	s0,0(sp)
    8000fa28:	0141                	addi	sp,sp,16
    8000fa2a:	8082                	ret

000000008000fa2c <priv_change_16>:

bool priv_change_16(){
    8000fa2c:	1141                	addi	sp,sp,-16
    TEST_START();
    8000fa2e:	0001f597          	auipc	a1,0x1f
    8000fa32:	ae258593          	addi	a1,a1,-1310 # 8002e510 <__func__.0>
    8000fa36:	00020517          	auipc	a0,0x20
    8000fa3a:	5a250513          	addi	a0,a0,1442 # 8002ffd8 <__func__.0+0x2e8>
bool priv_change_16(){
    8000fa3e:	e406                	sd	ra,8(sp)
    8000fa40:	e022                	sd	s0,0(sp)
    TEST_START();
    8000fa42:	64a1d0ef          	jal	8002d08c <printf>
    8000fa46:	4529                	li	a0,10
    8000fa48:	3321c0ef          	jal	8002bd7a <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000fa4c:	4511                	li	a0,4
    8000fa4e:	cbaf10ef          	jal	80000f08 <goto_priv>
    reset_state();
    8000fa52:	e81f10ef          	jal	800018d2 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000fa56:	57fd                	li	a5,-1
    8000fa58:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000fa5c:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000fa60:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000fa64:	60279073          	csrw	hedeleg,a5

    TEST_SETUP_EXCEPT();    
    8000fa68:	ba4f10ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VS);     
    8000fa6c:	4509                	li	a0,2
    8000fa6e:	c9af10ef          	jal	80000f08 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000fa72:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fa76:	08200593          	li	a1,130
    8000fa7a:	00023617          	auipc	a2,0x23
    8000fa7e:	5c660613          	addi	a2,a2,1478 # 80033040 <__func__.0+0x3350>
    8000fa82:	00020517          	auipc	a0,0x20
    8000fa86:	56e50513          	addi	a0,a0,1390 # 8002fff0 <__func__.0+0x300>
    8000fa8a:	6021d0ef          	jal	8002d08c <printf>
    8000fa8e:	00048417          	auipc	s0,0x48
    8000fa92:	58240413          	addi	s0,s0,1410 # 80058010 <excpt>
    8000fa96:	6014                	ld	a3,0(s0)
    8000fa98:	f0001737          	lui	a4,0xf0001
    8000fa9c:	0712                	slli	a4,a4,0x4
    8000fa9e:	4785                	li	a5,1
    8000faa0:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000faa4:	1786                	slli	a5,a5,0x21
    8000faa6:	8f75                	and	a4,a4,a3
    8000faa8:	10078793          	addi	a5,a5,256
    8000faac:	00020597          	auipc	a1,0x20
    8000fab0:	51c58593          	addi	a1,a1,1308 # 8002ffc8 <__func__.0+0x2d8>
    8000fab4:	08f70363          	beq	a4,a5,8000fb3a <priv_change_16+0x10e>
    8000fab8:	00020517          	auipc	a0,0x20
    8000fabc:	55050513          	addi	a0,a0,1360 # 80030008 <__func__.0+0x318>
    8000fac0:	5cc1d0ef          	jal	8002d08c <printf>
    8000fac4:	00048797          	auipc	a5,0x48
    8000fac8:	54d7c783          	lbu	a5,1357(a5) # 80058011 <excpt+0x1>
    8000facc:	cb81                	beqz	a5,8000fadc <priv_change_16+0xb0>
    8000face:	00048797          	auipc	a5,0x48
    8000fad2:	5467a783          	lw	a5,1350(a5) # 80058014 <excpt+0x4>
    8000fad6:	4709                	li	a4,2
    8000fad8:	04e78a63          	beq	a5,a4,8000fb2c <priv_change_16+0x100>
    8000fadc:	00020517          	auipc	a0,0x20
    8000fae0:	53450513          	addi	a0,a0,1332 # 80030010 <__func__.0+0x320>
    8000fae4:	5a81d0ef          	jal	8002d08c <printf>
    8000fae8:	02900513          	li	a0,41
    8000faec:	28e1c0ef          	jal	8002bd7a <putchar>
    8000faf0:	4529                	li	a0,10
    8000faf2:	2881c0ef          	jal	8002bd7a <putchar>
    8000faf6:	6014                	ld	a3,0(s0)
    8000faf8:	f0001737          	lui	a4,0xf0001
    8000fafc:	0712                	slli	a4,a4,0x4
    8000fafe:	4785                	li	a5,1
    8000fb00:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fb04:	1786                	slli	a5,a5,0x21
    8000fb06:	8f75                	and	a4,a4,a3
    8000fb08:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_VS &&
        curr_priv == PRIV_VS
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fb0c:	00020597          	auipc	a1,0x20
    8000fb10:	4bc58593          	addi	a1,a1,1212 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fb14:	04f70363          	beq	a4,a5,8000fb5a <priv_change_16+0x12e>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fb18:	00020517          	auipc	a0,0x20
    8000fb1c:	55850513          	addi	a0,a0,1368 # 80030070 <__func__.0+0x380>
    8000fb20:	56c1d0ef          	jal	8002d08c <printf>
    }

}
    8000fb24:	60a2                	ld	ra,8(sp)
    8000fb26:	6402                	ld	s0,0(sp)
    8000fb28:	0141                	addi	sp,sp,16
    8000fb2a:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fb2c:	0002e717          	auipc	a4,0x2e
    8000fb30:	2f872703          	lw	a4,760(a4) # 8003de24 <curr_priv>
    8000fb34:	faf714e3          	bne	a4,a5,8000fadc <priv_change_16+0xb0>
    8000fb38:	bf65                	j	8000faf0 <priv_change_16+0xc4>
    8000fb3a:	0002e717          	auipc	a4,0x2e
    8000fb3e:	2ea72703          	lw	a4,746(a4) # 8003de24 <curr_priv>
    8000fb42:	4789                	li	a5,2
    8000fb44:	00020597          	auipc	a1,0x20
    8000fb48:	47458593          	addi	a1,a1,1140 # 8002ffb8 <__func__.0+0x2c8>
    8000fb4c:	f6f706e3          	beq	a4,a5,8000fab8 <priv_change_16+0x8c>
    8000fb50:	00020597          	auipc	a1,0x20
    8000fb54:	47858593          	addi	a1,a1,1144 # 8002ffc8 <__func__.0+0x2d8>
    8000fb58:	b785                	j	8000fab8 <priv_change_16+0x8c>
    8000fb5a:	0002e717          	auipc	a4,0x2e
    8000fb5e:	2ca72703          	lw	a4,714(a4) # 8003de24 <curr_priv>
    8000fb62:	4789                	li	a5,2
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fb64:	00020597          	auipc	a1,0x20
    8000fb68:	45458593          	addi	a1,a1,1108 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fb6c:	faf706e3          	beq	a4,a5,8000fb18 <priv_change_16+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fb70:	00020597          	auipc	a1,0x20
    8000fb74:	45858593          	addi	a1,a1,1112 # 8002ffc8 <__func__.0+0x2d8>
    8000fb78:	00020517          	auipc	a0,0x20
    8000fb7c:	4f850513          	addi	a0,a0,1272 # 80030070 <__func__.0+0x380>
    8000fb80:	50c1d0ef          	jal	8002d08c <printf>
}
    8000fb84:	60a2                	ld	ra,8(sp)
    8000fb86:	6402                	ld	s0,0(sp)
    8000fb88:	0141                	addi	sp,sp,16
    8000fb8a:	8082                	ret

000000008000fb8c <addr_unaligned>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool addr_unaligned() {
    8000fb8c:	1101                	addi	sp,sp,-32

    TEST_START();
    8000fb8e:	0001f597          	auipc	a1,0x1f
    8000fb92:	99258593          	addi	a1,a1,-1646 # 8002e520 <__func__.1>
    8000fb96:	00020517          	auipc	a0,0x20
    8000fb9a:	44250513          	addi	a0,a0,1090 # 8002ffd8 <__func__.0+0x2e8>
bool addr_unaligned() {
    8000fb9e:	ec06                	sd	ra,24(sp)
    8000fba0:	e822                	sd	s0,16(sp)
    8000fba2:	e426                	sd	s1,8(sp)
    8000fba4:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000fba6:	4e61d0ef          	jal	8002d08c <printf>
    8000fbaa:	4529                	li	a0,10
    8000fbac:	1ce1c0ef          	jal	8002bd7a <putchar>

    TEST_SETUP_EXCEPT();
    8000fbb0:	a5cf10ef          	jal	80000e0c <test_setup_except_function>
    
    
    hspt_init();        
    8000fbb4:	a2df00ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    8000fbb8:	450d                	li	a0,3
    8000fbba:	b4ef10ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000fbbe:	a4ef10ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000fbc2:	001007b7          	lui	a5,0x100
    8000fbc6:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fbca:	07b2                	slli	a5,a5,0xc
    8000fbcc:	0785                	addi	a5,a5,1
    8000fbce:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    8000fbd2:	08200593          	li	a1,130
    8000fbd6:	00023617          	auipc	a2,0x23
    8000fbda:	4da60613          	addi	a2,a2,1242 # 800330b0 <__func__.0+0x33c0>
    8000fbde:	00020517          	auipc	a0,0x20
    8000fbe2:	41250513          	addi	a0,a0,1042 # 8002fff0 <__func__.0+0x300>
    8000fbe6:	4a61d0ef          	jal	8002d08c <printf>
    8000fbea:	00048797          	auipc	a5,0x48
    8000fbee:	4277c783          	lbu	a5,1063(a5) # 80058011 <excpt+0x1>
    8000fbf2:	00020597          	auipc	a1,0x20
    8000fbf6:	3c658593          	addi	a1,a1,966 # 8002ffb8 <__func__.0+0x2c8>
    8000fbfa:	c789                	beqz	a5,8000fc04 <addr_unaligned+0x78>
    8000fbfc:	00020597          	auipc	a1,0x20
    8000fc00:	3cc58593          	addi	a1,a1,972 # 8002ffc8 <__func__.0+0x2d8>
    8000fc04:	00020517          	auipc	a0,0x20
    8000fc08:	40450513          	addi	a0,a0,1028 # 80030008 <__func__.0+0x318>
    8000fc0c:	4801d0ef          	jal	8002d08c <printf>
    8000fc10:	00048797          	auipc	a5,0x48
    8000fc14:	4017c783          	lbu	a5,1025(a5) # 80058011 <excpt+0x1>
    8000fc18:	4c079c63          	bnez	a5,800100f0 <addr_unaligned+0x564>
    8000fc1c:	4529                	li	a0,10
    8000fc1e:	15c1c0ef          	jal	8002bd7a <putchar>
    8000fc22:	00048497          	auipc	s1,0x48
    8000fc26:	3ef4c483          	lbu	s1,1007(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    );

    //load half地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fc2a:	9e2f10ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000fc2e:	001007b7          	lui	a5,0x100
    8000fc32:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fc36:	07b2                	slli	a5,a5,0xc
    TEST_ASSERT("load byte address is not aligned successful",         
    8000fc38:	00048917          	auipc	s2,0x48
    8000fc3c:	3d890913          	addi	s2,s2,984 # 80058010 <excpt>
    8000fc40:	0785                	addi	a5,a5,1
    8000fc42:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000fc46:	08200593          	li	a1,130
    8000fc4a:	00023617          	auipc	a2,0x23
    8000fc4e:	49660613          	addi	a2,a2,1174 # 800330e0 <__func__.0+0x33f0>
    8000fc52:	00020517          	auipc	a0,0x20
    8000fc56:	39e50513          	addi	a0,a0,926 # 8002fff0 <__func__.0+0x300>
    8000fc5a:	4321d0ef          	jal	8002d08c <printf>
    8000fc5e:	00048797          	auipc	a5,0x48
    8000fc62:	3b37c783          	lbu	a5,947(a5) # 80058011 <excpt+0x1>
    8000fc66:	00020597          	auipc	a1,0x20
    8000fc6a:	36258593          	addi	a1,a1,866 # 8002ffc8 <__func__.0+0x2d8>
    8000fc6e:	cf91                	beqz	a5,8000fc8a <addr_unaligned+0xfe>
    8000fc70:	00893703          	ld	a4,8(s2)
    8000fc74:	4791                	li	a5,4
    8000fc76:	00020597          	auipc	a1,0x20
    8000fc7a:	34258593          	addi	a1,a1,834 # 8002ffb8 <__func__.0+0x2c8>
    8000fc7e:	00f70663          	beq	a4,a5,8000fc8a <addr_unaligned+0xfe>
    8000fc82:	00020597          	auipc	a1,0x20
    8000fc86:	34658593          	addi	a1,a1,838 # 8002ffc8 <__func__.0+0x2d8>
    8000fc8a:	00020517          	auipc	a0,0x20
    8000fc8e:	37e50513          	addi	a0,a0,894 # 80030008 <__func__.0+0x318>
    8000fc92:	3fa1d0ef          	jal	8002d08c <printf>
    8000fc96:	00048797          	auipc	a5,0x48
    8000fc9a:	37b7c783          	lbu	a5,891(a5) # 80058011 <excpt+0x1>
    8000fc9e:	c791                	beqz	a5,8000fcaa <addr_unaligned+0x11e>
    8000fca0:	00893703          	ld	a4,8(s2)
    8000fca4:	4791                	li	a5,4
    8000fca6:	00f70c63          	beq	a4,a5,8000fcbe <addr_unaligned+0x132>
    8000fcaa:	00020517          	auipc	a0,0x20
    8000fcae:	36650513          	addi	a0,a0,870 # 80030010 <__func__.0+0x320>
    8000fcb2:	3da1d0ef          	jal	8002d08c <printf>
    8000fcb6:	02900513          	li	a0,41
    8000fcba:	0c01c0ef          	jal	8002bd7a <putchar>
    8000fcbe:	4529                	li	a0,10
    8000fcc0:	0ba1c0ef          	jal	8002bd7a <putchar>
    8000fcc4:	4401                	li	s0,0
    8000fcc6:	e499                	bnez	s1,8000fcd4 <addr_unaligned+0x148>
    8000fcc8:	00048797          	auipc	a5,0x48
    8000fccc:	3497c783          	lbu	a5,841(a5) # 80058011 <excpt+0x1>
    8000fcd0:	3e079863          	bnez	a5,800100c0 <addr_unaligned+0x534>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );
    
    //load word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fcd4:	938f10ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000fcd8:	001007b7          	lui	a5,0x100
    8000fcdc:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fce0:	07b2                	slli	a5,a5,0xc
    8000fce2:	0785                	addi	a5,a5,1
    8000fce4:	0007a783          	lw	a5,0(a5)
    value = lw(vaddr_f);
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000fce8:	08200593          	li	a1,130
    8000fcec:	00023617          	auipc	a2,0x23
    8000fcf0:	42c60613          	addi	a2,a2,1068 # 80033118 <__func__.0+0x3428>
    8000fcf4:	00020517          	auipc	a0,0x20
    8000fcf8:	2fc50513          	addi	a0,a0,764 # 8002fff0 <__func__.0+0x300>
    8000fcfc:	3901d0ef          	jal	8002d08c <printf>
    8000fd00:	00048797          	auipc	a5,0x48
    8000fd04:	3117c783          	lbu	a5,785(a5) # 80058011 <excpt+0x1>
    8000fd08:	00020597          	auipc	a1,0x20
    8000fd0c:	2c058593          	addi	a1,a1,704 # 8002ffc8 <__func__.0+0x2d8>
    8000fd10:	cf91                	beqz	a5,8000fd2c <addr_unaligned+0x1a0>
    8000fd12:	00893703          	ld	a4,8(s2)
    8000fd16:	4791                	li	a5,4
    8000fd18:	00020597          	auipc	a1,0x20
    8000fd1c:	2a058593          	addi	a1,a1,672 # 8002ffb8 <__func__.0+0x2c8>
    8000fd20:	00f70663          	beq	a4,a5,8000fd2c <addr_unaligned+0x1a0>
    8000fd24:	00020597          	auipc	a1,0x20
    8000fd28:	2a458593          	addi	a1,a1,676 # 8002ffc8 <__func__.0+0x2d8>
    8000fd2c:	00020517          	auipc	a0,0x20
    8000fd30:	2dc50513          	addi	a0,a0,732 # 80030008 <__func__.0+0x318>
    8000fd34:	3581d0ef          	jal	8002d08c <printf>
    8000fd38:	00048797          	auipc	a5,0x48
    8000fd3c:	2d97c783          	lbu	a5,729(a5) # 80058011 <excpt+0x1>
    8000fd40:	c791                	beqz	a5,8000fd4c <addr_unaligned+0x1c0>
    8000fd42:	00893703          	ld	a4,8(s2)
    8000fd46:	4791                	li	a5,4
    8000fd48:	00f70c63          	beq	a4,a5,8000fd60 <addr_unaligned+0x1d4>
    8000fd4c:	00020517          	auipc	a0,0x20
    8000fd50:	2c450513          	addi	a0,a0,708 # 80030010 <__func__.0+0x320>
    8000fd54:	3381d0ef          	jal	8002d08c <printf>
    8000fd58:	02900513          	li	a0,41
    8000fd5c:	01e1c0ef          	jal	8002bd7a <putchar>
    8000fd60:	4529                	li	a0,10
    8000fd62:	0181c0ef          	jal	8002bd7a <putchar>
    8000fd66:	c801                	beqz	s0,8000fd76 <addr_unaligned+0x1ea>
    8000fd68:	00048797          	auipc	a5,0x48
    8000fd6c:	2a97c783          	lbu	a5,681(a5) # 80058011 <excpt+0x1>
    8000fd70:	4401                	li	s0,0
    8000fd72:	34079163          	bnez	a5,800100b4 <addr_unaligned+0x528>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000fd76:	001004b7          	lui	s1,0x100
    8000fd7a:	04b48493          	addi	s1,s1,75 # 10004b <STACK_SIZE+0x4b>
    8000fd7e:	04b2                	slli	s1,s1,0xc
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //load double word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fd80:	88cf10ef          	jal	80000e0c <test_setup_except_function>
    8000fd84:	0485                	addi	s1,s1,1
    8000fd86:	0004b483          	ld	s1,0(s1)
    value = ld(vaddr_f);
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000fd8a:	08200593          	li	a1,130
    8000fd8e:	00023617          	auipc	a2,0x23
    8000fd92:	3c260613          	addi	a2,a2,962 # 80033150 <__func__.0+0x3460>
    8000fd96:	00020517          	auipc	a0,0x20
    8000fd9a:	25a50513          	addi	a0,a0,602 # 8002fff0 <__func__.0+0x300>
    8000fd9e:	2ee1d0ef          	jal	8002d08c <printf>
    8000fda2:	00048797          	auipc	a5,0x48
    8000fda6:	26f7c783          	lbu	a5,623(a5) # 80058011 <excpt+0x1>
    8000fdaa:	00020597          	auipc	a1,0x20
    8000fdae:	21e58593          	addi	a1,a1,542 # 8002ffc8 <__func__.0+0x2d8>
    8000fdb2:	cf91                	beqz	a5,8000fdce <addr_unaligned+0x242>
    8000fdb4:	00893703          	ld	a4,8(s2)
    8000fdb8:	4791                	li	a5,4
    8000fdba:	00020597          	auipc	a1,0x20
    8000fdbe:	1fe58593          	addi	a1,a1,510 # 8002ffb8 <__func__.0+0x2c8>
    8000fdc2:	00f70663          	beq	a4,a5,8000fdce <addr_unaligned+0x242>
    8000fdc6:	00020597          	auipc	a1,0x20
    8000fdca:	20258593          	addi	a1,a1,514 # 8002ffc8 <__func__.0+0x2d8>
    8000fdce:	00020517          	auipc	a0,0x20
    8000fdd2:	23a50513          	addi	a0,a0,570 # 80030008 <__func__.0+0x318>
    8000fdd6:	2b61d0ef          	jal	8002d08c <printf>
    8000fdda:	00048797          	auipc	a5,0x48
    8000fdde:	2377c783          	lbu	a5,567(a5) # 80058011 <excpt+0x1>
    8000fde2:	c791                	beqz	a5,8000fdee <addr_unaligned+0x262>
    8000fde4:	00893703          	ld	a4,8(s2)
    8000fde8:	4791                	li	a5,4
    8000fdea:	00f70c63          	beq	a4,a5,8000fe02 <addr_unaligned+0x276>
    8000fdee:	00020517          	auipc	a0,0x20
    8000fdf2:	22250513          	addi	a0,a0,546 # 80030010 <__func__.0+0x320>
    8000fdf6:	2961d0ef          	jal	8002d08c <printf>
    8000fdfa:	02900513          	li	a0,41
    8000fdfe:	77d1b0ef          	jal	8002bd7a <putchar>
    8000fe02:	4529                	li	a0,10
    8000fe04:	7771b0ef          	jal	8002bd7a <putchar>
    8000fe08:	c801                	beqz	s0,8000fe18 <addr_unaligned+0x28c>
    8000fe0a:	00048797          	auipc	a5,0x48
    8000fe0e:	2077c783          	lbu	a5,519(a5) # 80058011 <excpt+0x1>
    8000fe12:	4401                	li	s0,0
    8000fe14:	2c079863          	bnez	a5,800100e4 <addr_unaligned+0x558>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //store byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000fe18:	ff5f00ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000fe1c:	001007b7          	lui	a5,0x100
    8000fe20:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fe24:	07b2                	slli	a5,a5,0xc
    8000fe26:	0785                	addi	a5,a5,1
    8000fe28:	00978023          	sb	s1,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("store byte address is not aligned successful",         
    8000fe2c:	08200593          	li	a1,130
    8000fe30:	00023617          	auipc	a2,0x23
    8000fe34:	35860613          	addi	a2,a2,856 # 80033188 <__func__.0+0x3498>
    8000fe38:	00020517          	auipc	a0,0x20
    8000fe3c:	1b850513          	addi	a0,a0,440 # 8002fff0 <__func__.0+0x300>
    8000fe40:	24c1d0ef          	jal	8002d08c <printf>
    8000fe44:	00048797          	auipc	a5,0x48
    8000fe48:	1cd7c783          	lbu	a5,461(a5) # 80058011 <excpt+0x1>
    8000fe4c:	00020597          	auipc	a1,0x20
    8000fe50:	17c58593          	addi	a1,a1,380 # 8002ffc8 <__func__.0+0x2d8>
    8000fe54:	e789                	bnez	a5,8000fe5e <addr_unaligned+0x2d2>
    8000fe56:	00020597          	auipc	a1,0x20
    8000fe5a:	16258593          	addi	a1,a1,354 # 8002ffb8 <__func__.0+0x2c8>
    8000fe5e:	00020517          	auipc	a0,0x20
    8000fe62:	1aa50513          	addi	a0,a0,426 # 80030008 <__func__.0+0x318>
    8000fe66:	2261d0ef          	jal	8002d08c <printf>
    8000fe6a:	00048797          	auipc	a5,0x48
    8000fe6e:	1a77c783          	lbu	a5,423(a5) # 80058011 <excpt+0x1>
    8000fe72:	28079a63          	bnez	a5,80010106 <addr_unaligned+0x57a>
    8000fe76:	4529                	li	a0,10
    8000fe78:	7031b0ef          	jal	8002bd7a <putchar>
    8000fe7c:	c419                	beqz	s0,8000fe8a <addr_unaligned+0x2fe>
    8000fe7e:	00048417          	auipc	s0,0x48
    8000fe82:	19344403          	lbu	s0,403(s0) # 80058011 <excpt+0x1>
    8000fe86:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //store half地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000fe8a:	f83f00ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000fe8e:	001007b7          	lui	a5,0x100
    8000fe92:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fe96:	07b2                	slli	a5,a5,0xc
    8000fe98:	0785                	addi	a5,a5,1
    8000fe9a:	00979023          	sh	s1,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000fe9e:	08200593          	li	a1,130
    8000fea2:	00023617          	auipc	a2,0x23
    8000fea6:	31660613          	addi	a2,a2,790 # 800331b8 <__func__.0+0x34c8>
    8000feaa:	00020517          	auipc	a0,0x20
    8000feae:	14650513          	addi	a0,a0,326 # 8002fff0 <__func__.0+0x300>
    8000feb2:	1da1d0ef          	jal	8002d08c <printf>
    8000feb6:	00048797          	auipc	a5,0x48
    8000feba:	15b7c783          	lbu	a5,347(a5) # 80058011 <excpt+0x1>
    8000febe:	00020597          	auipc	a1,0x20
    8000fec2:	10a58593          	addi	a1,a1,266 # 8002ffc8 <__func__.0+0x2d8>
    8000fec6:	cf91                	beqz	a5,8000fee2 <addr_unaligned+0x356>
    8000fec8:	00893703          	ld	a4,8(s2)
    8000fecc:	4799                	li	a5,6
    8000fece:	00020597          	auipc	a1,0x20
    8000fed2:	0ea58593          	addi	a1,a1,234 # 8002ffb8 <__func__.0+0x2c8>
    8000fed6:	00f70663          	beq	a4,a5,8000fee2 <addr_unaligned+0x356>
    8000feda:	00020597          	auipc	a1,0x20
    8000fede:	0ee58593          	addi	a1,a1,238 # 8002ffc8 <__func__.0+0x2d8>
    8000fee2:	00020517          	auipc	a0,0x20
    8000fee6:	12650513          	addi	a0,a0,294 # 80030008 <__func__.0+0x318>
    8000feea:	1a21d0ef          	jal	8002d08c <printf>
    8000feee:	00048797          	auipc	a5,0x48
    8000fef2:	1237c783          	lbu	a5,291(a5) # 80058011 <excpt+0x1>
    8000fef6:	c791                	beqz	a5,8000ff02 <addr_unaligned+0x376>
    8000fef8:	00893703          	ld	a4,8(s2)
    8000fefc:	4799                	li	a5,6
    8000fefe:	00f70c63          	beq	a4,a5,8000ff16 <addr_unaligned+0x38a>
    8000ff02:	00020517          	auipc	a0,0x20
    8000ff06:	10e50513          	addi	a0,a0,270 # 80030010 <__func__.0+0x320>
    8000ff0a:	1821d0ef          	jal	8002d08c <printf>
    8000ff0e:	02900513          	li	a0,41
    8000ff12:	6691b0ef          	jal	8002bd7a <putchar>
    8000ff16:	4529                	li	a0,10
    8000ff18:	6631b0ef          	jal	8002bd7a <putchar>
    8000ff1c:	c801                	beqz	s0,8000ff2c <addr_unaligned+0x3a0>
    8000ff1e:	00048797          	auipc	a5,0x48
    8000ff22:	0f37c783          	lbu	a5,243(a5) # 80058011 <excpt+0x1>
    8000ff26:	4401                	li	s0,0
    8000ff28:	1a079863          	bnez	a5,800100d8 <addr_unaligned+0x54c>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );
    
    //store word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000ff2c:	ee1f00ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000ff30:	001007b7          	lui	a5,0x100
    8000ff34:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000ff38:	07b2                	slli	a5,a5,0xc
    8000ff3a:	0785                	addi	a5,a5,1
    8000ff3c:	0097a023          	sw	s1,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000ff40:	08200593          	li	a1,130
    8000ff44:	00023617          	auipc	a2,0x23
    8000ff48:	2ac60613          	addi	a2,a2,684 # 800331f0 <__func__.0+0x3500>
    8000ff4c:	00020517          	auipc	a0,0x20
    8000ff50:	0a450513          	addi	a0,a0,164 # 8002fff0 <__func__.0+0x300>
    8000ff54:	1381d0ef          	jal	8002d08c <printf>
    8000ff58:	00048797          	auipc	a5,0x48
    8000ff5c:	0b97c783          	lbu	a5,185(a5) # 80058011 <excpt+0x1>
    8000ff60:	00020597          	auipc	a1,0x20
    8000ff64:	06858593          	addi	a1,a1,104 # 8002ffc8 <__func__.0+0x2d8>
    8000ff68:	cf91                	beqz	a5,8000ff84 <addr_unaligned+0x3f8>
    8000ff6a:	00893703          	ld	a4,8(s2)
    8000ff6e:	4799                	li	a5,6
    8000ff70:	00020597          	auipc	a1,0x20
    8000ff74:	04858593          	addi	a1,a1,72 # 8002ffb8 <__func__.0+0x2c8>
    8000ff78:	00f70663          	beq	a4,a5,8000ff84 <addr_unaligned+0x3f8>
    8000ff7c:	00020597          	auipc	a1,0x20
    8000ff80:	04c58593          	addi	a1,a1,76 # 8002ffc8 <__func__.0+0x2d8>
    8000ff84:	00020517          	auipc	a0,0x20
    8000ff88:	08450513          	addi	a0,a0,132 # 80030008 <__func__.0+0x318>
    8000ff8c:	1001d0ef          	jal	8002d08c <printf>
    8000ff90:	00048797          	auipc	a5,0x48
    8000ff94:	0817c783          	lbu	a5,129(a5) # 80058011 <excpt+0x1>
    8000ff98:	c791                	beqz	a5,8000ffa4 <addr_unaligned+0x418>
    8000ff9a:	00893703          	ld	a4,8(s2)
    8000ff9e:	4799                	li	a5,6
    8000ffa0:	00f70c63          	beq	a4,a5,8000ffb8 <addr_unaligned+0x42c>
    8000ffa4:	00020517          	auipc	a0,0x20
    8000ffa8:	06c50513          	addi	a0,a0,108 # 80030010 <__func__.0+0x320>
    8000ffac:	0e01d0ef          	jal	8002d08c <printf>
    8000ffb0:	02900513          	li	a0,41
    8000ffb4:	5c71b0ef          	jal	8002bd7a <putchar>
    8000ffb8:	4529                	li	a0,10
    8000ffba:	5c11b0ef          	jal	8002bd7a <putchar>
    8000ffbe:	c801                	beqz	s0,8000ffce <addr_unaligned+0x442>
    8000ffc0:	00048797          	auipc	a5,0x48
    8000ffc4:	0517c783          	lbu	a5,81(a5) # 80058011 <excpt+0x1>
    8000ffc8:	4401                	li	s0,0
    8000ffca:	10079163          	bnez	a5,800100cc <addr_unaligned+0x540>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    //store double word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000ffce:	e3ff00ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000ffd2:	001007b7          	lui	a5,0x100
    8000ffd6:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000ffda:	07b2                	slli	a5,a5,0xc
    8000ffdc:	0785                	addi	a5,a5,1
    8000ffde:	0097b023          	sd	s1,0(a5)
    sd(vaddr_f,value);
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000ffe2:	08200593          	li	a1,130
    8000ffe6:	00023617          	auipc	a2,0x23
    8000ffea:	24260613          	addi	a2,a2,578 # 80033228 <__func__.0+0x3538>
    8000ffee:	00020517          	auipc	a0,0x20
    8000fff2:	00250513          	addi	a0,a0,2 # 8002fff0 <__func__.0+0x300>
    8000fff6:	0961d0ef          	jal	8002d08c <printf>
    8000fffa:	00048797          	auipc	a5,0x48
    8000fffe:	0177c783          	lbu	a5,23(a5) # 80058011 <excpt+0x1>
    80010002:	00020597          	auipc	a1,0x20
    80010006:	fc658593          	addi	a1,a1,-58 # 8002ffc8 <__func__.0+0x2d8>
    8001000a:	cf91                	beqz	a5,80010026 <addr_unaligned+0x49a>
    8001000c:	00893703          	ld	a4,8(s2)
    80010010:	4799                	li	a5,6
    80010012:	00020597          	auipc	a1,0x20
    80010016:	fa658593          	addi	a1,a1,-90 # 8002ffb8 <__func__.0+0x2c8>
    8001001a:	00f70663          	beq	a4,a5,80010026 <addr_unaligned+0x49a>
    8001001e:	00020597          	auipc	a1,0x20
    80010022:	faa58593          	addi	a1,a1,-86 # 8002ffc8 <__func__.0+0x2d8>
    80010026:	00020517          	auipc	a0,0x20
    8001002a:	fe250513          	addi	a0,a0,-30 # 80030008 <__func__.0+0x318>
    8001002e:	05e1d0ef          	jal	8002d08c <printf>
    80010032:	00048797          	auipc	a5,0x48
    80010036:	fdf7c783          	lbu	a5,-33(a5) # 80058011 <excpt+0x1>
    8001003a:	c791                	beqz	a5,80010046 <addr_unaligned+0x4ba>
    8001003c:	00893703          	ld	a4,8(s2)
    80010040:	4799                	li	a5,6
    80010042:	00f70c63          	beq	a4,a5,8001005a <addr_unaligned+0x4ce>
    80010046:	00020517          	auipc	a0,0x20
    8001004a:	fca50513          	addi	a0,a0,-54 # 80030010 <__func__.0+0x320>
    8001004e:	03e1d0ef          	jal	8002d08c <printf>
    80010052:	02900513          	li	a0,41
    80010056:	5251b0ef          	jal	8002bd7a <putchar>
    8001005a:	4529                	li	a0,10
    8001005c:	51f1b0ef          	jal	8002bd7a <putchar>
    80010060:	c01d                	beqz	s0,80010086 <addr_unaligned+0x4fa>
    80010062:	00048417          	auipc	s0,0x48
    80010066:	faf44403          	lbu	s0,-81(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    TEST_END();
    8001006a:	00020597          	auipc	a1,0x20
    8001006e:	f5e58593          	addi	a1,a1,-162 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    80010072:	cc19                	beqz	s0,80010090 <addr_unaligned+0x504>
    80010074:	00893703          	ld	a4,8(s2)
    80010078:	4799                	li	a5,6
    TEST_END();
    8001007a:	00020597          	auipc	a1,0x20
    8001007e:	f3e58593          	addi	a1,a1,-194 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    80010082:	00f70763          	beq	a4,a5,80010090 <addr_unaligned+0x504>
    80010086:	4401                	li	s0,0
    TEST_END();
    80010088:	00020597          	auipc	a1,0x20
    8001008c:	f4058593          	addi	a1,a1,-192 # 8002ffc8 <__func__.0+0x2d8>
    80010090:	00020517          	auipc	a0,0x20
    80010094:	fe050513          	addi	a0,a0,-32 # 80030070 <__func__.0+0x380>
    80010098:	7f51c0ef          	jal	8002d08c <printf>
    8001009c:	4511                	li	a0,4
    8001009e:	e6bf00ef          	jal	80000f08 <goto_priv>
    800100a2:	831f10ef          	jal	800018d2 <reset_state>

    800100a6:	60e2                	ld	ra,24(sp)
    800100a8:	8522                	mv	a0,s0
    800100aa:	6442                	ld	s0,16(sp)
    800100ac:	64a2                	ld	s1,8(sp)
    800100ae:	6902                	ld	s2,0(sp)
    800100b0:	6105                	addi	sp,sp,32
    800100b2:	8082                	ret
    TEST_ASSERT("load word address is not aligned result in a lam",         
    800100b4:	00893403          	ld	s0,8(s2)
    800100b8:	1471                	addi	s0,s0,-4
    800100ba:	00143413          	seqz	s0,s0
    800100be:	b965                	j	8000fd76 <addr_unaligned+0x1ea>
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    800100c0:	00893403          	ld	s0,8(s2)
    800100c4:	1471                	addi	s0,s0,-4
    800100c6:	00143413          	seqz	s0,s0
    800100ca:	b129                	j	8000fcd4 <addr_unaligned+0x148>
    TEST_ASSERT("store word address is not aligned result in a sam",         
    800100cc:	00893403          	ld	s0,8(s2)
    800100d0:	1469                	addi	s0,s0,-6
    800100d2:	00143413          	seqz	s0,s0
    800100d6:	bde5                	j	8000ffce <addr_unaligned+0x442>
    TEST_ASSERT("store half address is not aligned result in a sam",         
    800100d8:	00893403          	ld	s0,8(s2)
    800100dc:	1469                	addi	s0,s0,-6
    800100de:	00143413          	seqz	s0,s0
    800100e2:	b5a9                	j	8000ff2c <addr_unaligned+0x3a0>
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    800100e4:	00893403          	ld	s0,8(s2)
    800100e8:	1471                	addi	s0,s0,-4
    800100ea:	00143413          	seqz	s0,s0
    800100ee:	b32d                	j	8000fe18 <addr_unaligned+0x28c>
    TEST_ASSERT("load byte address is not aligned successful",         
    800100f0:	00020517          	auipc	a0,0x20
    800100f4:	f2050513          	addi	a0,a0,-224 # 80030010 <__func__.0+0x320>
    800100f8:	7951c0ef          	jal	8002d08c <printf>
    800100fc:	02900513          	li	a0,41
    80010100:	47b1b0ef          	jal	8002bd7a <putchar>
    80010104:	be21                	j	8000fc1c <addr_unaligned+0x90>
    TEST_ASSERT("store byte address is not aligned successful",         
    80010106:	00020517          	auipc	a0,0x20
    8001010a:	f0a50513          	addi	a0,a0,-246 # 80030010 <__func__.0+0x320>
    8001010e:	77f1c0ef          	jal	8002d08c <printf>
    80010112:	02900513          	li	a0,41
    80010116:	4651b0ef          	jal	8002bd7a <putchar>
    8001011a:	bbb1                	j	8000fe76 <addr_unaligned+0x2ea>

000000008001011c <illegal_except_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool illegal_except_1() {
    8001011c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001011e:	0001e597          	auipc	a1,0x1e
    80010122:	41258593          	addi	a1,a1,1042 # 8002e530 <__func__.14>
    80010126:	00020517          	auipc	a0,0x20
    8001012a:	eb250513          	addi	a0,a0,-334 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_1() {
    8001012e:	ec06                	sd	ra,24(sp)
    80010130:	e822                	sd	s0,16(sp)
    80010132:	e426                	sd	s1,8(sp)
    TEST_START();
    80010134:	7591c0ef          	jal	8002d08c <printf>
    80010138:	4529                	li	a0,10
    8001013a:	4411b0ef          	jal	8002bd7a <putchar>

    TEST_SETUP_EXCEPT();
    8001013e:	ccff00ef          	jal	80000e0c <test_setup_except_function>
    // ); 
    // printf("%d",excpt.triggered);
    // printf("%d",excpt.cause);

    //当前权限满足最低CSR访问权限，CSR写行为，但访问的CSR只读
    goto_priv(PRIV_M);
    80010142:	4511                	li	a0,4
    80010144:	dc5f00ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    80010148:	6785                	lui	a5,0x1
    8001014a:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8001014c:	f1579073          	csrw	0xf15,a5
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    80010150:	08200593          	li	a1,130
    80010154:	00023617          	auipc	a2,0x23
    80010158:	11460613          	addi	a2,a2,276 # 80033268 <__func__.0+0x3578>
    8001015c:	00020517          	auipc	a0,0x20
    80010160:	e9450513          	addi	a0,a0,-364 # 8002fff0 <__func__.0+0x300>
    80010164:	7291c0ef          	jal	8002d08c <printf>
    80010168:	00048797          	auipc	a5,0x48
    8001016c:	ea97c783          	lbu	a5,-343(a5) # 80058011 <excpt+0x1>
    80010170:	00048497          	auipc	s1,0x48
    80010174:	ea048493          	addi	s1,s1,-352 # 80058010 <excpt>
    80010178:	00020597          	auipc	a1,0x20
    8001017c:	e5058593          	addi	a1,a1,-432 # 8002ffc8 <__func__.0+0x2d8>
    80010180:	cf89                	beqz	a5,8001019a <illegal_except_1+0x7e>
    80010182:	6498                	ld	a4,8(s1)
    80010184:	4789                	li	a5,2
    80010186:	00020597          	auipc	a1,0x20
    8001018a:	e3258593          	addi	a1,a1,-462 # 8002ffb8 <__func__.0+0x2c8>
    8001018e:	00f70663          	beq	a4,a5,8001019a <illegal_except_1+0x7e>
    80010192:	00020597          	auipc	a1,0x20
    80010196:	e3658593          	addi	a1,a1,-458 # 8002ffc8 <__func__.0+0x2d8>
    8001019a:	00020517          	auipc	a0,0x20
    8001019e:	e6e50513          	addi	a0,a0,-402 # 80030008 <__func__.0+0x318>
    800101a2:	6eb1c0ef          	jal	8002d08c <printf>
    800101a6:	00048797          	auipc	a5,0x48
    800101aa:	e6b7c783          	lbu	a5,-405(a5) # 80058011 <excpt+0x1>
    800101ae:	c789                	beqz	a5,800101b8 <illegal_except_1+0x9c>
    800101b0:	6498                	ld	a4,8(s1)
    800101b2:	4789                	li	a5,2
    800101b4:	00f70c63          	beq	a4,a5,800101cc <illegal_except_1+0xb0>
    800101b8:	00020517          	auipc	a0,0x20
    800101bc:	e5850513          	addi	a0,a0,-424 # 80030010 <__func__.0+0x320>
    800101c0:	6cd1c0ef          	jal	8002d08c <printf>
    800101c4:	02900513          	li	a0,41
    800101c8:	3b31b0ef          	jal	8002bd7a <putchar>
    800101cc:	4529                	li	a0,10
    800101ce:	3ad1b0ef          	jal	8002bd7a <putchar>
    800101d2:	00048797          	auipc	a5,0x48
    800101d6:	e3f7c783          	lbu	a5,-449(a5) # 80058011 <excpt+0x1>
    800101da:	4401                	li	s0,0
    800101dc:	c789                	beqz	a5,800101e6 <illegal_except_1+0xca>
    800101de:	6480                	ld	s0,8(s1)
    800101e0:	1479                	addi	s0,s0,-2
    800101e2:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_ILI 
    ); 


    //当前权限不满足最低CSR访问权限
    goto_priv(PRIV_HS);
    800101e6:	450d                	li	a0,3
    800101e8:	d21f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800101ec:	c21f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MIE);
    800101f0:	304027f3          	csrr	a5,mie
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    800101f4:	08200593          	li	a1,130
    800101f8:	00023617          	auipc	a2,0x23
    800101fc:	0b860613          	addi	a2,a2,184 # 800332b0 <__func__.0+0x35c0>
    80010200:	00020517          	auipc	a0,0x20
    80010204:	df050513          	addi	a0,a0,-528 # 8002fff0 <__func__.0+0x300>
    80010208:	6851c0ef          	jal	8002d08c <printf>
    8001020c:	00048797          	auipc	a5,0x48
    80010210:	e057c783          	lbu	a5,-507(a5) # 80058011 <excpt+0x1>
    80010214:	00020597          	auipc	a1,0x20
    80010218:	db458593          	addi	a1,a1,-588 # 8002ffc8 <__func__.0+0x2d8>
    8001021c:	cf89                	beqz	a5,80010236 <illegal_except_1+0x11a>
    8001021e:	6498                	ld	a4,8(s1)
    80010220:	4789                	li	a5,2
    80010222:	00020597          	auipc	a1,0x20
    80010226:	d9658593          	addi	a1,a1,-618 # 8002ffb8 <__func__.0+0x2c8>
    8001022a:	00f70663          	beq	a4,a5,80010236 <illegal_except_1+0x11a>
    8001022e:	00020597          	auipc	a1,0x20
    80010232:	d9a58593          	addi	a1,a1,-614 # 8002ffc8 <__func__.0+0x2d8>
    80010236:	00020517          	auipc	a0,0x20
    8001023a:	dd250513          	addi	a0,a0,-558 # 80030008 <__func__.0+0x318>
    8001023e:	64f1c0ef          	jal	8002d08c <printf>
    80010242:	00048797          	auipc	a5,0x48
    80010246:	dcf7c783          	lbu	a5,-561(a5) # 80058011 <excpt+0x1>
    8001024a:	c789                	beqz	a5,80010254 <illegal_except_1+0x138>
    8001024c:	6498                	ld	a4,8(s1)
    8001024e:	4789                	li	a5,2
    80010250:	00f70c63          	beq	a4,a5,80010268 <illegal_except_1+0x14c>
    80010254:	00020517          	auipc	a0,0x20
    80010258:	dbc50513          	addi	a0,a0,-580 # 80030010 <__func__.0+0x320>
    8001025c:	6311c0ef          	jal	8002d08c <printf>
    80010260:	02900513          	li	a0,41
    80010264:	3171b0ef          	jal	8002bd7a <putchar>
    80010268:	4529                	li	a0,10
    8001026a:	3111b0ef          	jal	8002bd7a <putchar>
    8001026e:	c015                	beqz	s0,80010292 <illegal_except_1+0x176>
    80010270:	00048417          	auipc	s0,0x48
    80010274:	da144403          	lbu	s0,-607(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010278:	00020597          	auipc	a1,0x20
    8001027c:	d5058593          	addi	a1,a1,-688 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    80010280:	cc11                	beqz	s0,8001029c <illegal_except_1+0x180>
    80010282:	6498                	ld	a4,8(s1)
    80010284:	4789                	li	a5,2
    TEST_END();
    80010286:	00020597          	auipc	a1,0x20
    8001028a:	d3258593          	addi	a1,a1,-718 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8001028e:	00f70763          	beq	a4,a5,8001029c <illegal_except_1+0x180>
    80010292:	4401                	li	s0,0
    TEST_END();
    80010294:	00020597          	auipc	a1,0x20
    80010298:	d3458593          	addi	a1,a1,-716 # 8002ffc8 <__func__.0+0x2d8>
    8001029c:	00020517          	auipc	a0,0x20
    800102a0:	dd450513          	addi	a0,a0,-556 # 80030070 <__func__.0+0x380>
    800102a4:	5e91c0ef          	jal	8002d08c <printf>
    800102a8:	4511                	li	a0,4
    800102aa:	c5ff00ef          	jal	80000f08 <goto_priv>
    800102ae:	e24f10ef          	jal	800018d2 <reset_state>

}
    800102b2:	60e2                	ld	ra,24(sp)
    800102b4:	8522                	mv	a0,s0
    800102b6:	6442                	ld	s0,16(sp)
    800102b8:	64a2                	ld	s1,8(sp)
    800102ba:	6105                	addi	sp,sp,32
    800102bc:	8082                	ret

00000000800102be <illegal_except_2>:

bool illegal_except_2() {
    800102be:	1101                	addi	sp,sp,-32

    TEST_START();
    800102c0:	0001e597          	auipc	a1,0x1e
    800102c4:	28858593          	addi	a1,a1,648 # 8002e548 <__func__.13>
    800102c8:	00020517          	auipc	a0,0x20
    800102cc:	d1050513          	addi	a0,a0,-752 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_2() {
    800102d0:	ec06                	sd	ra,24(sp)
    800102d2:	e822                	sd	s0,16(sp)
    800102d4:	e426                	sd	s1,8(sp)
    TEST_START();
    800102d6:	5b71c0ef          	jal	8002d08c <printf>
    800102da:	4529                	li	a0,10
    800102dc:	29f1b0ef          	jal	8002bd7a <putchar>


    //特殊情况，没有开启虚存，在S模式下访问Satp寄存器，但被sstatus.TVM拦截
    goto_priv(PRIV_M);
    800102e0:	4511                	li	a0,4
    800102e2:	c27f00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    800102e6:	001007b7          	lui	a5,0x100
    800102ea:	3007a073          	csrs	mstatus,a5
    CSRW(satp, 0x0);    //关闭虚存
    800102ee:	18005073          	csrwi	satp,0
    goto_priv(PRIV_HS);
    800102f2:	450d                	li	a0,3
    800102f4:	c15f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800102f8:	b15f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(satp);
    800102fc:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010300:	08200593          	li	a1,130
    80010304:	00023617          	auipc	a2,0x23
    80010308:	00460613          	addi	a2,a2,4 # 80033308 <__func__.0+0x3618>
    8001030c:	00020517          	auipc	a0,0x20
    80010310:	ce450513          	addi	a0,a0,-796 # 8002fff0 <__func__.0+0x300>
    80010314:	5791c0ef          	jal	8002d08c <printf>
    80010318:	00048797          	auipc	a5,0x48
    8001031c:	cf97c783          	lbu	a5,-775(a5) # 80058011 <excpt+0x1>
    80010320:	00048497          	auipc	s1,0x48
    80010324:	cf048493          	addi	s1,s1,-784 # 80058010 <excpt>
    80010328:	00020597          	auipc	a1,0x20
    8001032c:	ca058593          	addi	a1,a1,-864 # 8002ffc8 <__func__.0+0x2d8>
    80010330:	cf89                	beqz	a5,8001034a <illegal_except_2+0x8c>
    80010332:	6498                	ld	a4,8(s1)
    80010334:	4789                	li	a5,2
    80010336:	00020597          	auipc	a1,0x20
    8001033a:	c8258593          	addi	a1,a1,-894 # 8002ffb8 <__func__.0+0x2c8>
    8001033e:	00f70663          	beq	a4,a5,8001034a <illegal_except_2+0x8c>
    80010342:	00020597          	auipc	a1,0x20
    80010346:	c8658593          	addi	a1,a1,-890 # 8002ffc8 <__func__.0+0x2d8>
    8001034a:	00020517          	auipc	a0,0x20
    8001034e:	cbe50513          	addi	a0,a0,-834 # 80030008 <__func__.0+0x318>
    80010352:	53b1c0ef          	jal	8002d08c <printf>
    80010356:	00048797          	auipc	a5,0x48
    8001035a:	cbb7c783          	lbu	a5,-837(a5) # 80058011 <excpt+0x1>
    8001035e:	c789                	beqz	a5,80010368 <illegal_except_2+0xaa>
    80010360:	6498                	ld	a4,8(s1)
    80010362:	4789                	li	a5,2
    80010364:	00f70c63          	beq	a4,a5,8001037c <illegal_except_2+0xbe>
    80010368:	00020517          	auipc	a0,0x20
    8001036c:	ca850513          	addi	a0,a0,-856 # 80030010 <__func__.0+0x320>
    80010370:	51d1c0ef          	jal	8002d08c <printf>
    80010374:	02900513          	li	a0,41
    80010378:	2031b0ef          	jal	8002bd7a <putchar>
    8001037c:	4529                	li	a0,10
    8001037e:	1fd1b0ef          	jal	8002bd7a <putchar>
    80010382:	00048417          	auipc	s0,0x48
    80010386:	c8f44403          	lbu	s0,-881(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001038a:	00020597          	auipc	a1,0x20
    8001038e:	c3e58593          	addi	a1,a1,-962 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010392:	cc11                	beqz	s0,800103ae <illegal_except_2+0xf0>
    80010394:	6498                	ld	a4,8(s1)
    80010396:	4789                	li	a5,2
    TEST_END();
    80010398:	00020597          	auipc	a1,0x20
    8001039c:	c2058593          	addi	a1,a1,-992 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800103a0:	00f70763          	beq	a4,a5,800103ae <illegal_except_2+0xf0>
    800103a4:	4401                	li	s0,0
    TEST_END();
    800103a6:	00020597          	auipc	a1,0x20
    800103aa:	c2258593          	addi	a1,a1,-990 # 8002ffc8 <__func__.0+0x2d8>
    800103ae:	00020517          	auipc	a0,0x20
    800103b2:	cc250513          	addi	a0,a0,-830 # 80030070 <__func__.0+0x380>
    800103b6:	4d71c0ef          	jal	8002d08c <printf>
    800103ba:	4511                	li	a0,4
    800103bc:	b4df00ef          	jal	80000f08 <goto_priv>
    800103c0:	d12f10ef          	jal	800018d2 <reset_state>

}
    800103c4:	60e2                	ld	ra,24(sp)
    800103c6:	8522                	mv	a0,s0
    800103c8:	6442                	ld	s0,16(sp)
    800103ca:	64a2                	ld	s1,8(sp)
    800103cc:	6105                	addi	sp,sp,32
    800103ce:	8082                	ret

00000000800103d0 <illegal_except_3>:

bool illegal_except_3() {
    800103d0:	1101                	addi	sp,sp,-32

    TEST_START();
    800103d2:	0001e597          	auipc	a1,0x1e
    800103d6:	18e58593          	addi	a1,a1,398 # 8002e560 <__func__.12>
    800103da:	00020517          	auipc	a0,0x20
    800103de:	bfe50513          	addi	a0,a0,-1026 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_3() {
    800103e2:	ec06                	sd	ra,24(sp)
    800103e4:	e822                	sd	s0,16(sp)
    800103e6:	e426                	sd	s1,8(sp)
    TEST_START();
    800103e8:	4a51c0ef          	jal	8002d08c <printf>
    800103ec:	4529                	li	a0,10
    800103ee:	18d1b0ef          	jal	8002bd7a <putchar>

    TEST_SETUP_EXCEPT();
    800103f2:	a1bf00ef          	jal	80000e0c <test_setup_except_function>

    //执行CSR写指令尝试将非支持值写入WLRL字段时
    printf("%llx\n",CSRR(CSR_MCAUSE));
    800103f6:	342025f3          	csrr	a1,mcause
    800103fa:	00026517          	auipc	a0,0x26
    800103fe:	1f650513          	addi	a0,a0,502 # 800365f0 <__func__.0+0x6900>
    80010402:	48b1c0ef          	jal	8002d08c <printf>
    CSRW(CSR_MCAUSE,0xfffffffff);     //不支持的值写入将不会写入，没报错
    80010406:	57fd                	li	a5,-1
    80010408:	83f1                	srli	a5,a5,0x1c
    8001040a:	34279073          	csrw	mcause,a5
    printf("%llx\n",CSRR(CSR_MCAUSE));
    8001040e:	342025f3          	csrr	a1,mcause
    80010412:	00026517          	auipc	a0,0x26
    80010416:	1de50513          	addi	a0,a0,478 # 800365f0 <__func__.0+0x6900>
    8001041a:	4731c0ef          	jal	8002d08c <printf>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    8001041e:	08200593          	li	a1,130
    80010422:	00023617          	auipc	a2,0x23
    80010426:	f4660613          	addi	a2,a2,-186 # 80033368 <__func__.0+0x3678>
    8001042a:	00020517          	auipc	a0,0x20
    8001042e:	bc650513          	addi	a0,a0,-1082 # 8002fff0 <__func__.0+0x300>
    80010432:	45b1c0ef          	jal	8002d08c <printf>
    80010436:	00048797          	auipc	a5,0x48
    8001043a:	bdb7c783          	lbu	a5,-1061(a5) # 80058011 <excpt+0x1>
    8001043e:	00048497          	auipc	s1,0x48
    80010442:	bd248493          	addi	s1,s1,-1070 # 80058010 <excpt>
    80010446:	00020597          	auipc	a1,0x20
    8001044a:	b8258593          	addi	a1,a1,-1150 # 8002ffc8 <__func__.0+0x2d8>
    8001044e:	cf89                	beqz	a5,80010468 <illegal_except_3+0x98>
    80010450:	6498                	ld	a4,8(s1)
    80010452:	4789                	li	a5,2
    80010454:	00020597          	auipc	a1,0x20
    80010458:	b6458593          	addi	a1,a1,-1180 # 8002ffb8 <__func__.0+0x2c8>
    8001045c:	00f70663          	beq	a4,a5,80010468 <illegal_except_3+0x98>
    80010460:	00020597          	auipc	a1,0x20
    80010464:	b6858593          	addi	a1,a1,-1176 # 8002ffc8 <__func__.0+0x2d8>
    80010468:	00020517          	auipc	a0,0x20
    8001046c:	ba050513          	addi	a0,a0,-1120 # 80030008 <__func__.0+0x318>
    80010470:	41d1c0ef          	jal	8002d08c <printf>
    80010474:	00048797          	auipc	a5,0x48
    80010478:	b9d7c783          	lbu	a5,-1123(a5) # 80058011 <excpt+0x1>
    8001047c:	c789                	beqz	a5,80010486 <illegal_except_3+0xb6>
    8001047e:	6498                	ld	a4,8(s1)
    80010480:	4789                	li	a5,2
    80010482:	00f70c63          	beq	a4,a5,8001049a <illegal_except_3+0xca>
    80010486:	00020517          	auipc	a0,0x20
    8001048a:	b8a50513          	addi	a0,a0,-1142 # 80030010 <__func__.0+0x320>
    8001048e:	3ff1c0ef          	jal	8002d08c <printf>
    80010492:	02900513          	li	a0,41
    80010496:	0e51b0ef          	jal	8002bd7a <putchar>
    8001049a:	4529                	li	a0,10
    8001049c:	0df1b0ef          	jal	8002bd7a <putchar>
    800104a0:	00048417          	auipc	s0,0x48
    800104a4:	b7144403          	lbu	s0,-1167(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    800104a8:	00020597          	auipc	a1,0x20
    800104ac:	b2058593          	addi	a1,a1,-1248 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    800104b0:	cc11                	beqz	s0,800104cc <illegal_except_3+0xfc>
    800104b2:	6498                	ld	a4,8(s1)
    800104b4:	4789                	li	a5,2
    TEST_END();
    800104b6:	00020597          	auipc	a1,0x20
    800104ba:	b0258593          	addi	a1,a1,-1278 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    800104be:	00f70763          	beq	a4,a5,800104cc <illegal_except_3+0xfc>
    800104c2:	4401                	li	s0,0
    TEST_END();
    800104c4:	00020597          	auipc	a1,0x20
    800104c8:	b0458593          	addi	a1,a1,-1276 # 8002ffc8 <__func__.0+0x2d8>
    800104cc:	00020517          	auipc	a0,0x20
    800104d0:	ba450513          	addi	a0,a0,-1116 # 80030070 <__func__.0+0x380>
    800104d4:	3b91c0ef          	jal	8002d08c <printf>
    800104d8:	4511                	li	a0,4
    800104da:	a2ff00ef          	jal	80000f08 <goto_priv>
    800104de:	bf4f10ef          	jal	800018d2 <reset_state>
}
    800104e2:	60e2                	ld	ra,24(sp)
    800104e4:	8522                	mv	a0,s0
    800104e6:	6442                	ld	s0,16(sp)
    800104e8:	64a2                	ld	s1,8(sp)
    800104ea:	6105                	addi	sp,sp,32
    800104ec:	8082                	ret

00000000800104ee <illegal_except_4>:



bool illegal_except_4() {
    800104ee:	1101                	addi	sp,sp,-32

    TEST_START();
    800104f0:	0001e597          	auipc	a1,0x1e
    800104f4:	08858593          	addi	a1,a1,136 # 8002e578 <__func__.11>
    800104f8:	00020517          	auipc	a0,0x20
    800104fc:	ae050513          	addi	a0,a0,-1312 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_4() {
    80010500:	ec06                	sd	ra,24(sp)
    80010502:	e822                	sd	s0,16(sp)
    80010504:	e426                	sd	s1,8(sp)
    80010506:	e04a                	sd	s2,0(sp)
    TEST_START();
    80010508:	3851c0ef          	jal	8002d08c <printf>
    8001050c:	4529                	li	a0,10
    8001050e:	06d1b0ef          	jal	8002bd7a <putchar>

    //M模式下可以访问任何CSR
    goto_priv(PRIV_M);
    80010512:	4511                	li	a0,4
    80010514:	9f5f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010518:	8f5f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MCAUSE);
    8001051c:	342027f3          	csrr	a5,mcause
    CSRR(CSR_SCAUSE);
    80010520:	142027f3          	csrr	a5,scause
    CSRR(CSR_VSCAUSE);
    80010524:	242027f3          	csrr	a5,vscause
    TEST_ASSERT("m mode access any csr successful",
    80010528:	08200593          	li	a1,130
    8001052c:	00023617          	auipc	a2,0x23
    80010530:	e7c60613          	addi	a2,a2,-388 # 800333a8 <__func__.0+0x36b8>
    80010534:	00020517          	auipc	a0,0x20
    80010538:	abc50513          	addi	a0,a0,-1348 # 8002fff0 <__func__.0+0x300>
    8001053c:	3511c0ef          	jal	8002d08c <printf>
    80010540:	00048797          	auipc	a5,0x48
    80010544:	ad17c783          	lbu	a5,-1327(a5) # 80058011 <excpt+0x1>
    80010548:	00020597          	auipc	a1,0x20
    8001054c:	a7058593          	addi	a1,a1,-1424 # 8002ffb8 <__func__.0+0x2c8>
    80010550:	c789                	beqz	a5,8001055a <illegal_except_4+0x6c>
    80010552:	00020597          	auipc	a1,0x20
    80010556:	a7658593          	addi	a1,a1,-1418 # 8002ffc8 <__func__.0+0x2d8>
    8001055a:	00020517          	auipc	a0,0x20
    8001055e:	aae50513          	addi	a0,a0,-1362 # 80030008 <__func__.0+0x318>
    80010562:	32b1c0ef          	jal	8002d08c <printf>
    80010566:	00048797          	auipc	a5,0x48
    8001056a:	aab7c783          	lbu	a5,-1365(a5) # 80058011 <excpt+0x1>
    8001056e:	18079e63          	bnez	a5,8001070a <illegal_except_4+0x21c>
    80010572:	4529                	li	a0,10
    80010574:	0071b0ef          	jal	8002bd7a <putchar>
    80010578:	00048917          	auipc	s2,0x48
    8001057c:	a9994903          	lbu	s2,-1383(s2) # 80058011 <excpt+0x1>
        excpt.triggered == false
    ); 

    reset_state();
    80010580:	b52f10ef          	jal	800018d2 <reset_state>

    //尝试访问高特权级别的任何CSR
    goto_priv(PRIV_HS);
    80010584:	450d                	li	a0,3
    80010586:	983f00ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode access any csr successful",
    8001058a:	00048417          	auipc	s0,0x48
    8001058e:	a8640413          	addi	s0,s0,-1402 # 80058010 <excpt>
    TEST_SETUP_EXCEPT();
    80010592:	87bf00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MCAUSE);
    80010596:	342027f3          	csrr	a5,mcause
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    8001059a:	08200593          	li	a1,130
    8001059e:	00023617          	auipc	a2,0x23
    800105a2:	e3260613          	addi	a2,a2,-462 # 800333d0 <__func__.0+0x36e0>
    800105a6:	00020517          	auipc	a0,0x20
    800105aa:	a4a50513          	addi	a0,a0,-1462 # 8002fff0 <__func__.0+0x300>
    800105ae:	2df1c0ef          	jal	8002d08c <printf>
    800105b2:	00048797          	auipc	a5,0x48
    800105b6:	a5f7c783          	lbu	a5,-1441(a5) # 80058011 <excpt+0x1>
    800105ba:	00020597          	auipc	a1,0x20
    800105be:	a0e58593          	addi	a1,a1,-1522 # 8002ffc8 <__func__.0+0x2d8>
    800105c2:	cf89                	beqz	a5,800105dc <illegal_except_4+0xee>
    800105c4:	6418                	ld	a4,8(s0)
    800105c6:	4789                	li	a5,2
    800105c8:	00020597          	auipc	a1,0x20
    800105cc:	9f058593          	addi	a1,a1,-1552 # 8002ffb8 <__func__.0+0x2c8>
    800105d0:	00f70663          	beq	a4,a5,800105dc <illegal_except_4+0xee>
    800105d4:	00020597          	auipc	a1,0x20
    800105d8:	9f458593          	addi	a1,a1,-1548 # 8002ffc8 <__func__.0+0x2d8>
    800105dc:	00020517          	auipc	a0,0x20
    800105e0:	a2c50513          	addi	a0,a0,-1492 # 80030008 <__func__.0+0x318>
    800105e4:	2a91c0ef          	jal	8002d08c <printf>
    800105e8:	00048797          	auipc	a5,0x48
    800105ec:	a297c783          	lbu	a5,-1495(a5) # 80058011 <excpt+0x1>
    800105f0:	c789                	beqz	a5,800105fa <illegal_except_4+0x10c>
    800105f2:	6418                	ld	a4,8(s0)
    800105f4:	4789                	li	a5,2
    800105f6:	00f70c63          	beq	a4,a5,8001060e <illegal_except_4+0x120>
    800105fa:	00020517          	auipc	a0,0x20
    800105fe:	a1650513          	addi	a0,a0,-1514 # 80030010 <__func__.0+0x320>
    80010602:	28b1c0ef          	jal	8002d08c <printf>
    80010606:	02900513          	li	a0,41
    8001060a:	7701b0ef          	jal	8002bd7a <putchar>
    8001060e:	4529                	li	a0,10
    80010610:	76a1b0ef          	jal	8002bd7a <putchar>
    80010614:	4481                	li	s1,0
    80010616:	00091863          	bnez	s2,80010626 <illegal_except_4+0x138>
    8001061a:	00048797          	auipc	a5,0x48
    8001061e:	9f77c783          	lbu	a5,-1545(a5) # 80058011 <excpt+0x1>
    80010622:	0c079f63          	bnez	a5,80010700 <illegal_except_4+0x212>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    ); 

    goto_priv(PRIV_VS);
    80010626:	4509                	li	a0,2
    80010628:	8e1f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001062c:	fe0f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_MIDELEG);
    80010630:	303027f3          	csrr	a5,mideleg
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80010634:	08200593          	li	a1,130
    80010638:	00023617          	auipc	a2,0x23
    8001063c:	dd060613          	addi	a2,a2,-560 # 80033408 <__func__.0+0x3718>
    80010640:	00020517          	auipc	a0,0x20
    80010644:	9b050513          	addi	a0,a0,-1616 # 8002fff0 <__func__.0+0x300>
    80010648:	2451c0ef          	jal	8002d08c <printf>
    8001064c:	00048797          	auipc	a5,0x48
    80010650:	9c57c783          	lbu	a5,-1595(a5) # 80058011 <excpt+0x1>
    80010654:	00020597          	auipc	a1,0x20
    80010658:	97458593          	addi	a1,a1,-1676 # 8002ffc8 <__func__.0+0x2d8>
    8001065c:	cf89                	beqz	a5,80010676 <illegal_except_4+0x188>
    8001065e:	6418                	ld	a4,8(s0)
    80010660:	4789                	li	a5,2
    80010662:	00020597          	auipc	a1,0x20
    80010666:	95658593          	addi	a1,a1,-1706 # 8002ffb8 <__func__.0+0x2c8>
    8001066a:	00f70663          	beq	a4,a5,80010676 <illegal_except_4+0x188>
    8001066e:	00020597          	auipc	a1,0x20
    80010672:	95a58593          	addi	a1,a1,-1702 # 8002ffc8 <__func__.0+0x2d8>
    80010676:	00020517          	auipc	a0,0x20
    8001067a:	99250513          	addi	a0,a0,-1646 # 80030008 <__func__.0+0x318>
    8001067e:	20f1c0ef          	jal	8002d08c <printf>
    80010682:	00048797          	auipc	a5,0x48
    80010686:	98f7c783          	lbu	a5,-1649(a5) # 80058011 <excpt+0x1>
    8001068a:	c789                	beqz	a5,80010694 <illegal_except_4+0x1a6>
    8001068c:	6418                	ld	a4,8(s0)
    8001068e:	4789                	li	a5,2
    80010690:	00f70c63          	beq	a4,a5,800106a8 <illegal_except_4+0x1ba>
    80010694:	00020517          	auipc	a0,0x20
    80010698:	97c50513          	addi	a0,a0,-1668 # 80030010 <__func__.0+0x320>
    8001069c:	1f11c0ef          	jal	8002d08c <printf>
    800106a0:	02900513          	li	a0,41
    800106a4:	6d61b0ef          	jal	8002bd7a <putchar>
    800106a8:	4529                	li	a0,10
    800106aa:	6d01b0ef          	jal	8002bd7a <putchar>
    800106ae:	c095                	beqz	s1,800106d2 <illegal_except_4+0x1e4>
    800106b0:	00048497          	auipc	s1,0x48
    800106b4:	9614c483          	lbu	s1,-1695(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    );

    TEST_END();
    800106b8:	00020597          	auipc	a1,0x20
    800106bc:	91058593          	addi	a1,a1,-1776 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    800106c0:	cc91                	beqz	s1,800106dc <illegal_except_4+0x1ee>
    800106c2:	6418                	ld	a4,8(s0)
    800106c4:	4789                	li	a5,2
    TEST_END();
    800106c6:	00020597          	auipc	a1,0x20
    800106ca:	8f258593          	addi	a1,a1,-1806 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    800106ce:	00f70763          	beq	a4,a5,800106dc <illegal_except_4+0x1ee>
    800106d2:	4481                	li	s1,0
    TEST_END();
    800106d4:	00020597          	auipc	a1,0x20
    800106d8:	8f458593          	addi	a1,a1,-1804 # 8002ffc8 <__func__.0+0x2d8>
    800106dc:	00020517          	auipc	a0,0x20
    800106e0:	99450513          	addi	a0,a0,-1644 # 80030070 <__func__.0+0x380>
    800106e4:	1a91c0ef          	jal	8002d08c <printf>
    800106e8:	4511                	li	a0,4
    800106ea:	81ff00ef          	jal	80000f08 <goto_priv>
    800106ee:	9e4f10ef          	jal	800018d2 <reset_state>
}
    800106f2:	60e2                	ld	ra,24(sp)
    800106f4:	6442                	ld	s0,16(sp)
    800106f6:	6902                	ld	s2,0(sp)
    800106f8:	8526                	mv	a0,s1
    800106fa:	64a2                	ld	s1,8(sp)
    800106fc:	6105                	addi	sp,sp,32
    800106fe:	8082                	ret
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    80010700:	6404                	ld	s1,8(s0)
    80010702:	14f9                	addi	s1,s1,-2
    80010704:	0014b493          	seqz	s1,s1
    80010708:	bf39                	j	80010626 <illegal_except_4+0x138>
    TEST_ASSERT("m mode access any csr successful",
    8001070a:	00020517          	auipc	a0,0x20
    8001070e:	90650513          	addi	a0,a0,-1786 # 80030010 <__func__.0+0x320>
    80010712:	17b1c0ef          	jal	8002d08c <printf>
    80010716:	02900513          	li	a0,41
    8001071a:	6601b0ef          	jal	8002bd7a <putchar>
    8001071e:	bd91                	j	80010572 <illegal_except_4+0x84>

0000000080010720 <illegal_except_5>:
        excpt.cause==CAUSE_ILI
    );
*/


bool illegal_except_5() {
    80010720:	1101                	addi	sp,sp,-32

    TEST_START();
    80010722:	0001e597          	auipc	a1,0x1e
    80010726:	e6e58593          	addi	a1,a1,-402 # 8002e590 <__func__.10>
    8001072a:	00020517          	auipc	a0,0x20
    8001072e:	8ae50513          	addi	a0,a0,-1874 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_5() {
    80010732:	ec06                	sd	ra,24(sp)
    80010734:	e822                	sd	s0,16(sp)
    80010736:	e426                	sd	s1,8(sp)
    TEST_START();
    80010738:	1551c0ef          	jal	8002d08c <printf>
    8001073c:	4529                	li	a0,10
    8001073e:	63c1b0ef          	jal	8002bd7a <putchar>
    //TVM=1，在S模式下，读写satp 寄存器
    goto_priv(PRIV_M);
    80010742:	4511                	li	a0,4
    80010744:	fc4f00ef          	jal	80000f08 <goto_priv>
    CSRW(satp, 0x0);
    80010748:	18005073          	csrwi	satp,0
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8001074c:	001007b7          	lui	a5,0x100
    80010750:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010754:	450d                	li	a0,3
    80010756:	fb2f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001075a:	eb2f00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(satp);
    8001075e:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010762:	08200593          	li	a1,130
    80010766:	00023617          	auipc	a2,0x23
    8001076a:	ba260613          	addi	a2,a2,-1118 # 80033308 <__func__.0+0x3618>
    8001076e:	00020517          	auipc	a0,0x20
    80010772:	88250513          	addi	a0,a0,-1918 # 8002fff0 <__func__.0+0x300>
    80010776:	1171c0ef          	jal	8002d08c <printf>
    8001077a:	00048797          	auipc	a5,0x48
    8001077e:	8977c783          	lbu	a5,-1897(a5) # 80058011 <excpt+0x1>
    80010782:	00048497          	auipc	s1,0x48
    80010786:	88e48493          	addi	s1,s1,-1906 # 80058010 <excpt>
    8001078a:	00020597          	auipc	a1,0x20
    8001078e:	83e58593          	addi	a1,a1,-1986 # 8002ffc8 <__func__.0+0x2d8>
    80010792:	cf89                	beqz	a5,800107ac <illegal_except_5+0x8c>
    80010794:	6498                	ld	a4,8(s1)
    80010796:	4789                	li	a5,2
    80010798:	00020597          	auipc	a1,0x20
    8001079c:	82058593          	addi	a1,a1,-2016 # 8002ffb8 <__func__.0+0x2c8>
    800107a0:	00f70663          	beq	a4,a5,800107ac <illegal_except_5+0x8c>
    800107a4:	00020597          	auipc	a1,0x20
    800107a8:	82458593          	addi	a1,a1,-2012 # 8002ffc8 <__func__.0+0x2d8>
    800107ac:	00020517          	auipc	a0,0x20
    800107b0:	85c50513          	addi	a0,a0,-1956 # 80030008 <__func__.0+0x318>
    800107b4:	0d91c0ef          	jal	8002d08c <printf>
    800107b8:	00048797          	auipc	a5,0x48
    800107bc:	8597c783          	lbu	a5,-1959(a5) # 80058011 <excpt+0x1>
    800107c0:	c789                	beqz	a5,800107ca <illegal_except_5+0xaa>
    800107c2:	6498                	ld	a4,8(s1)
    800107c4:	4789                	li	a5,2
    800107c6:	00f70c63          	beq	a4,a5,800107de <illegal_except_5+0xbe>
    800107ca:	00020517          	auipc	a0,0x20
    800107ce:	84650513          	addi	a0,a0,-1978 # 80030010 <__func__.0+0x320>
    800107d2:	0bb1c0ef          	jal	8002d08c <printf>
    800107d6:	02900513          	li	a0,41
    800107da:	5a01b0ef          	jal	8002bd7a <putchar>
    800107de:	4529                	li	a0,10
    800107e0:	59a1b0ef          	jal	8002bd7a <putchar>
    800107e4:	00048417          	auipc	s0,0x48
    800107e8:	82d44403          	lbu	s0,-2003(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800107ec:	0001f597          	auipc	a1,0x1f
    800107f0:	7dc58593          	addi	a1,a1,2012 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800107f4:	cc11                	beqz	s0,80010810 <illegal_except_5+0xf0>
    800107f6:	6498                	ld	a4,8(s1)
    800107f8:	4789                	li	a5,2
    TEST_END();
    800107fa:	0001f597          	auipc	a1,0x1f
    800107fe:	7be58593          	addi	a1,a1,1982 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010802:	00f70763          	beq	a4,a5,80010810 <illegal_except_5+0xf0>
    80010806:	4401                	li	s0,0
    TEST_END();
    80010808:	0001f597          	auipc	a1,0x1f
    8001080c:	7c058593          	addi	a1,a1,1984 # 8002ffc8 <__func__.0+0x2d8>
    80010810:	00020517          	auipc	a0,0x20
    80010814:	86050513          	addi	a0,a0,-1952 # 80030070 <__func__.0+0x380>
    80010818:	0751c0ef          	jal	8002d08c <printf>
    8001081c:	4511                	li	a0,4
    8001081e:	eeaf00ef          	jal	80000f08 <goto_priv>
    80010822:	8b0f10ef          	jal	800018d2 <reset_state>
}
    80010826:	60e2                	ld	ra,24(sp)
    80010828:	8522                	mv	a0,s0
    8001082a:	6442                	ld	s0,16(sp)
    8001082c:	64a2                	ld	s1,8(sp)
    8001082e:	6105                	addi	sp,sp,32
    80010830:	8082                	ret

0000000080010832 <illegal_except_6>:

bool illegal_except_6() {
    80010832:	1101                	addi	sp,sp,-32

    TEST_START();
    80010834:	0001e597          	auipc	a1,0x1e
    80010838:	d7458593          	addi	a1,a1,-652 # 8002e5a8 <__func__.9>
    8001083c:	0001f517          	auipc	a0,0x1f
    80010840:	79c50513          	addi	a0,a0,1948 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_6() {
    80010844:	ec06                	sd	ra,24(sp)
    80010846:	e822                	sd	s0,16(sp)
    80010848:	e426                	sd	s1,8(sp)
    TEST_START();
    8001084a:	0431c0ef          	jal	8002d08c <printf>
    8001084e:	4529                	li	a0,10
    80010850:	52a1b0ef          	jal	8002bd7a <putchar>
    //当mstatus.TVM=1时，在HS模式下执行时尝试读取或写入hgatp
    goto_priv(PRIV_M);
    80010854:	4511                	li	a0,4
    80010856:	eb2f00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8001085a:	001007b7          	lui	a5,0x100
    8001085e:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010862:	450d                	li	a0,3
    80010864:	ea4f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010868:	da4f00ef          	jal	80000e0c <test_setup_except_function>
    CSRW(CSR_HGATP,(uint64_t)-1);         //没报错
    8001086c:	57fd                	li	a5,-1
    8001086e:	68079073          	csrw	hgatp,a5
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    80010872:	08200593          	li	a1,130
    80010876:	00023617          	auipc	a2,0x23
    8001087a:	bca60613          	addi	a2,a2,-1078 # 80033440 <__func__.0+0x3750>
    8001087e:	0001f517          	auipc	a0,0x1f
    80010882:	77250513          	addi	a0,a0,1906 # 8002fff0 <__func__.0+0x300>
    80010886:	0071c0ef          	jal	8002d08c <printf>
    8001088a:	00047797          	auipc	a5,0x47
    8001088e:	7877c783          	lbu	a5,1927(a5) # 80058011 <excpt+0x1>
    80010892:	00047497          	auipc	s1,0x47
    80010896:	77e48493          	addi	s1,s1,1918 # 80058010 <excpt>
    8001089a:	0001f597          	auipc	a1,0x1f
    8001089e:	72e58593          	addi	a1,a1,1838 # 8002ffc8 <__func__.0+0x2d8>
    800108a2:	cf89                	beqz	a5,800108bc <illegal_except_6+0x8a>
    800108a4:	6498                	ld	a4,8(s1)
    800108a6:	4789                	li	a5,2
    800108a8:	0001f597          	auipc	a1,0x1f
    800108ac:	71058593          	addi	a1,a1,1808 # 8002ffb8 <__func__.0+0x2c8>
    800108b0:	00f70663          	beq	a4,a5,800108bc <illegal_except_6+0x8a>
    800108b4:	0001f597          	auipc	a1,0x1f
    800108b8:	71458593          	addi	a1,a1,1812 # 8002ffc8 <__func__.0+0x2d8>
    800108bc:	0001f517          	auipc	a0,0x1f
    800108c0:	74c50513          	addi	a0,a0,1868 # 80030008 <__func__.0+0x318>
    800108c4:	7c81c0ef          	jal	8002d08c <printf>
    800108c8:	00047797          	auipc	a5,0x47
    800108cc:	7497c783          	lbu	a5,1865(a5) # 80058011 <excpt+0x1>
    800108d0:	c789                	beqz	a5,800108da <illegal_except_6+0xa8>
    800108d2:	6498                	ld	a4,8(s1)
    800108d4:	4789                	li	a5,2
    800108d6:	00f70c63          	beq	a4,a5,800108ee <illegal_except_6+0xbc>
    800108da:	0001f517          	auipc	a0,0x1f
    800108de:	73650513          	addi	a0,a0,1846 # 80030010 <__func__.0+0x320>
    800108e2:	7aa1c0ef          	jal	8002d08c <printf>
    800108e6:	02900513          	li	a0,41
    800108ea:	4901b0ef          	jal	8002bd7a <putchar>
    800108ee:	4529                	li	a0,10
    800108f0:	48a1b0ef          	jal	8002bd7a <putchar>
    800108f4:	00047417          	auipc	s0,0x47
    800108f8:	71d44403          	lbu	s0,1821(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800108fc:	0001f597          	auipc	a1,0x1f
    80010900:	6cc58593          	addi	a1,a1,1740 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    80010904:	cc11                	beqz	s0,80010920 <illegal_except_6+0xee>
    80010906:	6498                	ld	a4,8(s1)
    80010908:	4789                	li	a5,2
    TEST_END();
    8001090a:	0001f597          	auipc	a1,0x1f
    8001090e:	6ae58593          	addi	a1,a1,1710 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    80010912:	00f70763          	beq	a4,a5,80010920 <illegal_except_6+0xee>
    80010916:	4401                	li	s0,0
    TEST_END();
    80010918:	0001f597          	auipc	a1,0x1f
    8001091c:	6b058593          	addi	a1,a1,1712 # 8002ffc8 <__func__.0+0x2d8>
    80010920:	0001f517          	auipc	a0,0x1f
    80010924:	75050513          	addi	a0,a0,1872 # 80030070 <__func__.0+0x380>
    80010928:	7641c0ef          	jal	8002d08c <printf>
    8001092c:	4511                	li	a0,4
    8001092e:	ddaf00ef          	jal	80000f08 <goto_priv>
    80010932:	fa1f00ef          	jal	800018d2 <reset_state>
}
    80010936:	60e2                	ld	ra,24(sp)
    80010938:	8522                	mv	a0,s0
    8001093a:	6442                	ld	s0,16(sp)
    8001093c:	64a2                	ld	s1,8(sp)
    8001093e:	6105                	addi	sp,sp,32
    80010940:	8082                	ret

0000000080010942 <illegal_except_7>:

bool illegal_except_7() {
    80010942:	1101                	addi	sp,sp,-32

    TEST_START();
    80010944:	0001e597          	auipc	a1,0x1e
    80010948:	c7c58593          	addi	a1,a1,-900 # 8002e5c0 <__func__.8>
    8001094c:	0001f517          	auipc	a0,0x1f
    80010950:	68c50513          	addi	a0,a0,1676 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_7() {
    80010954:	ec06                	sd	ra,24(sp)
    80010956:	e822                	sd	s0,16(sp)
    80010958:	e426                	sd	s1,8(sp)
    TEST_START();
    8001095a:	7321c0ef          	jal	8002d08c <printf>
    8001095e:	4529                	li	a0,10
    80010960:	41a1b0ef          	jal	8002bd7a <putchar>

    //TVM=1，在S模式下，执行SFENCE.VMA或SINVAL.VMA指令
    goto_priv(PRIV_M);
    80010964:	4511                	li	a0,4
    80010966:	da2f00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8001096a:	001007b7          	lui	a5,0x100
    8001096e:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HSTATUS,HSTATUS_VTVM);
    80010972:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_HS); 
    80010976:	450d                	li	a0,3
    80010978:	d90f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001097c:	c90f00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010980:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("s mode sfence.vma leads to ili when tvm=1",
    80010984:	08200593          	li	a1,130
    80010988:	00023617          	auipc	a2,0x23
    8001098c:	b2060613          	addi	a2,a2,-1248 # 800334a8 <__func__.0+0x37b8>
    80010990:	0001f517          	auipc	a0,0x1f
    80010994:	66050513          	addi	a0,a0,1632 # 8002fff0 <__func__.0+0x300>
    80010998:	6f41c0ef          	jal	8002d08c <printf>
    8001099c:	00047797          	auipc	a5,0x47
    800109a0:	6757c783          	lbu	a5,1653(a5) # 80058011 <excpt+0x1>
    800109a4:	00047497          	auipc	s1,0x47
    800109a8:	66c48493          	addi	s1,s1,1644 # 80058010 <excpt>
    800109ac:	0001f597          	auipc	a1,0x1f
    800109b0:	61c58593          	addi	a1,a1,1564 # 8002ffc8 <__func__.0+0x2d8>
    800109b4:	cf89                	beqz	a5,800109ce <illegal_except_7+0x8c>
    800109b6:	6498                	ld	a4,8(s1)
    800109b8:	4789                	li	a5,2
    800109ba:	0001f597          	auipc	a1,0x1f
    800109be:	5fe58593          	addi	a1,a1,1534 # 8002ffb8 <__func__.0+0x2c8>
    800109c2:	00f70663          	beq	a4,a5,800109ce <illegal_except_7+0x8c>
    800109c6:	0001f597          	auipc	a1,0x1f
    800109ca:	60258593          	addi	a1,a1,1538 # 8002ffc8 <__func__.0+0x2d8>
    800109ce:	0001f517          	auipc	a0,0x1f
    800109d2:	63a50513          	addi	a0,a0,1594 # 80030008 <__func__.0+0x318>
    800109d6:	6b61c0ef          	jal	8002d08c <printf>
    800109da:	00047797          	auipc	a5,0x47
    800109de:	6377c783          	lbu	a5,1591(a5) # 80058011 <excpt+0x1>
    800109e2:	c789                	beqz	a5,800109ec <illegal_except_7+0xaa>
    800109e4:	6498                	ld	a4,8(s1)
    800109e6:	4789                	li	a5,2
    800109e8:	00f70c63          	beq	a4,a5,80010a00 <illegal_except_7+0xbe>
    800109ec:	0001f517          	auipc	a0,0x1f
    800109f0:	62450513          	addi	a0,a0,1572 # 80030010 <__func__.0+0x320>
    800109f4:	6981c0ef          	jal	8002d08c <printf>
    800109f8:	02900513          	li	a0,41
    800109fc:	37e1b0ef          	jal	8002bd7a <putchar>
    80010a00:	4529                	li	a0,10
    80010a02:	3781b0ef          	jal	8002bd7a <putchar>
    80010a06:	00047797          	auipc	a5,0x47
    80010a0a:	60b7c783          	lbu	a5,1547(a5) # 80058011 <excpt+0x1>
    80010a0e:	4401                	li	s0,0
    80010a10:	c789                	beqz	a5,80010a1a <illegal_except_7+0xd8>
    80010a12:	6480                	ld	s0,8(s1)
    80010a14:	1479                	addi	s0,s0,-2
    80010a16:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80010a1a:	450d                	li	a0,3
    80010a1c:	cecf00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010a20:	becf00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010a24:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    80010a28:	08200593          	li	a1,130
    80010a2c:	00023617          	auipc	a2,0x23
    80010a30:	aac60613          	addi	a2,a2,-1364 # 800334d8 <__func__.0+0x37e8>
    80010a34:	0001f517          	auipc	a0,0x1f
    80010a38:	5bc50513          	addi	a0,a0,1468 # 8002fff0 <__func__.0+0x300>
    80010a3c:	6501c0ef          	jal	8002d08c <printf>
    80010a40:	00047797          	auipc	a5,0x47
    80010a44:	5d17c783          	lbu	a5,1489(a5) # 80058011 <excpt+0x1>
    80010a48:	0001f597          	auipc	a1,0x1f
    80010a4c:	58058593          	addi	a1,a1,1408 # 8002ffc8 <__func__.0+0x2d8>
    80010a50:	cf89                	beqz	a5,80010a6a <illegal_except_7+0x128>
    80010a52:	6498                	ld	a4,8(s1)
    80010a54:	4789                	li	a5,2
    80010a56:	0001f597          	auipc	a1,0x1f
    80010a5a:	56258593          	addi	a1,a1,1378 # 8002ffb8 <__func__.0+0x2c8>
    80010a5e:	00f70663          	beq	a4,a5,80010a6a <illegal_except_7+0x128>
    80010a62:	0001f597          	auipc	a1,0x1f
    80010a66:	56658593          	addi	a1,a1,1382 # 8002ffc8 <__func__.0+0x2d8>
    80010a6a:	0001f517          	auipc	a0,0x1f
    80010a6e:	59e50513          	addi	a0,a0,1438 # 80030008 <__func__.0+0x318>
    80010a72:	61a1c0ef          	jal	8002d08c <printf>
    80010a76:	00047797          	auipc	a5,0x47
    80010a7a:	59b7c783          	lbu	a5,1435(a5) # 80058011 <excpt+0x1>
    80010a7e:	c789                	beqz	a5,80010a88 <illegal_except_7+0x146>
    80010a80:	6498                	ld	a4,8(s1)
    80010a82:	4789                	li	a5,2
    80010a84:	00f70c63          	beq	a4,a5,80010a9c <illegal_except_7+0x15a>
    80010a88:	0001f517          	auipc	a0,0x1f
    80010a8c:	58850513          	addi	a0,a0,1416 # 80030010 <__func__.0+0x320>
    80010a90:	5fc1c0ef          	jal	8002d08c <printf>
    80010a94:	02900513          	li	a0,41
    80010a98:	2e21b0ef          	jal	8002bd7a <putchar>
    80010a9c:	4529                	li	a0,10
    80010a9e:	2dc1b0ef          	jal	8002bd7a <putchar>
    80010aa2:	c015                	beqz	s0,80010ac6 <illegal_except_7+0x184>
    80010aa4:	00047417          	auipc	s0,0x47
    80010aa8:	56d44403          	lbu	s0,1389(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010aac:	0001f597          	auipc	a1,0x1f
    80010ab0:	51c58593          	addi	a1,a1,1308 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    80010ab4:	cc11                	beqz	s0,80010ad0 <illegal_except_7+0x18e>
    80010ab6:	6498                	ld	a4,8(s1)
    80010ab8:	4789                	li	a5,2
    TEST_END();
    80010aba:	0001f597          	auipc	a1,0x1f
    80010abe:	4fe58593          	addi	a1,a1,1278 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    80010ac2:	00f70763          	beq	a4,a5,80010ad0 <illegal_except_7+0x18e>
    80010ac6:	4401                	li	s0,0
    TEST_END();
    80010ac8:	0001f597          	auipc	a1,0x1f
    80010acc:	50058593          	addi	a1,a1,1280 # 8002ffc8 <__func__.0+0x2d8>
    80010ad0:	0001f517          	auipc	a0,0x1f
    80010ad4:	5a050513          	addi	a0,a0,1440 # 80030070 <__func__.0+0x380>
    80010ad8:	5b41c0ef          	jal	8002d08c <printf>
    80010adc:	4511                	li	a0,4
    80010ade:	c2af00ef          	jal	80000f08 <goto_priv>
    80010ae2:	df1f00ef          	jal	800018d2 <reset_state>
}
    80010ae6:	60e2                	ld	ra,24(sp)
    80010ae8:	8522                	mv	a0,s0
    80010aea:	6442                	ld	s0,16(sp)
    80010aec:	64a2                	ld	s1,8(sp)
    80010aee:	6105                	addi	sp,sp,32
    80010af0:	8082                	ret

0000000080010af2 <illegal_except_8>:


bool illegal_except_8() {
    80010af2:	1141                	addi	sp,sp,-16

    TEST_START();
    80010af4:	0001e597          	auipc	a1,0x1e
    80010af8:	ae458593          	addi	a1,a1,-1308 # 8002e5d8 <__func__.7>
    80010afc:	0001f517          	auipc	a0,0x1f
    80010b00:	4dc50513          	addi	a0,a0,1244 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_8() {
    80010b04:	e406                	sd	ra,8(sp)
    80010b06:	e022                	sd	s0,0(sp)
    TEST_START();
    80010b08:	5841c0ef          	jal	8002d08c <printf>
    80010b0c:	4529                	li	a0,10
    80010b0e:	26c1b0ef          	jal	8002bd7a <putchar>
    //M模式下（无论mstatus.TVM的值如何）执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010b12:	4511                	li	a0,4
    80010b14:	bf4f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010b18:	af4f00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010b1c:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("m mode hfence.gvma successful",
    80010b20:	08200593          	li	a1,130
    80010b24:	00023617          	auipc	a2,0x23
    80010b28:	9e460613          	addi	a2,a2,-1564 # 80033508 <__func__.0+0x3818>
    80010b2c:	0001f517          	auipc	a0,0x1f
    80010b30:	4c450513          	addi	a0,a0,1220 # 8002fff0 <__func__.0+0x300>
    80010b34:	5581c0ef          	jal	8002d08c <printf>
    80010b38:	00047797          	auipc	a5,0x47
    80010b3c:	4d97c783          	lbu	a5,1241(a5) # 80058011 <excpt+0x1>
    80010b40:	0001f597          	auipc	a1,0x1f
    80010b44:	47858593          	addi	a1,a1,1144 # 8002ffb8 <__func__.0+0x2c8>
    80010b48:	c789                	beqz	a5,80010b52 <illegal_except_8+0x60>
    80010b4a:	0001f597          	auipc	a1,0x1f
    80010b4e:	47e58593          	addi	a1,a1,1150 # 8002ffc8 <__func__.0+0x2d8>
    80010b52:	0001f517          	auipc	a0,0x1f
    80010b56:	4b650513          	addi	a0,a0,1206 # 80030008 <__func__.0+0x318>
    80010b5a:	5321c0ef          	jal	8002d08c <printf>
    80010b5e:	00047797          	auipc	a5,0x47
    80010b62:	4b37c783          	lbu	a5,1203(a5) # 80058011 <excpt+0x1>
    80010b66:	e7a1                	bnez	a5,80010bae <illegal_except_8+0xbc>
    80010b68:	4529                	li	a0,10
    80010b6a:	2101b0ef          	jal	8002bd7a <putchar>
    80010b6e:	00047797          	auipc	a5,0x47
    80010b72:	4a37c783          	lbu	a5,1187(a5) # 80058011 <excpt+0x1>
    80010b76:	e795                	bnez	a5,80010ba2 <illegal_except_8+0xb0>
    80010b78:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80010b7a:	0001f597          	auipc	a1,0x1f
    80010b7e:	43e58593          	addi	a1,a1,1086 # 8002ffb8 <__func__.0+0x2c8>
    80010b82:	0001f517          	auipc	a0,0x1f
    80010b86:	4ee50513          	addi	a0,a0,1262 # 80030070 <__func__.0+0x380>
    80010b8a:	5021c0ef          	jal	8002d08c <printf>
    80010b8e:	4511                	li	a0,4
    80010b90:	b78f00ef          	jal	80000f08 <goto_priv>
    80010b94:	d3ff00ef          	jal	800018d2 <reset_state>
}
    80010b98:	60a2                	ld	ra,8(sp)
    80010b9a:	8522                	mv	a0,s0
    80010b9c:	6402                	ld	s0,0(sp)
    80010b9e:	0141                	addi	sp,sp,16
    80010ba0:	8082                	ret
    TEST_ASSERT("m mode hfence.gvma successful",
    80010ba2:	4401                	li	s0,0
    TEST_END();
    80010ba4:	0001f597          	auipc	a1,0x1f
    80010ba8:	42458593          	addi	a1,a1,1060 # 8002ffc8 <__func__.0+0x2d8>
    80010bac:	bfd9                	j	80010b82 <illegal_except_8+0x90>
    TEST_ASSERT("m mode hfence.gvma successful",
    80010bae:	0001f517          	auipc	a0,0x1f
    80010bb2:	46250513          	addi	a0,a0,1122 # 80030010 <__func__.0+0x320>
    80010bb6:	4d61c0ef          	jal	8002d08c <printf>
    80010bba:	02900513          	li	a0,41
    80010bbe:	1bc1b0ef          	jal	8002bd7a <putchar>
    80010bc2:	b75d                	j	80010b68 <illegal_except_8+0x76>

0000000080010bc4 <illegal_except_9>:

bool illegal_except_9() {
    80010bc4:	1101                	addi	sp,sp,-32

    TEST_START();
    80010bc6:	0001e597          	auipc	a1,0x1e
    80010bca:	a2a58593          	addi	a1,a1,-1494 # 8002e5f0 <__func__.6>
    80010bce:	0001f517          	auipc	a0,0x1f
    80010bd2:	40a50513          	addi	a0,a0,1034 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_9() {
    80010bd6:	ec06                	sd	ra,24(sp)
    80010bd8:	e822                	sd	s0,16(sp)
    80010bda:	e426                	sd	s1,8(sp)
    TEST_START();
    80010bdc:	4b01c0ef          	jal	8002d08c <printf>
    80010be0:	4529                	li	a0,10
    80010be2:	1981b0ef          	jal	8002bd7a <putchar>
    //HS模式下mstatus.TVM=0时执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010be6:	4511                	li	a0,4
    80010be8:	b20f00ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TVM);
    80010bec:	001007b7          	lui	a5,0x100
    80010bf0:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    80010bf4:	450d                	li	a0,3
    80010bf6:	b12f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010bfa:	a12f00ef          	jal	80000e0c <test_setup_except_function>
    80010bfe:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010c02:	08200593          	li	a1,130
    80010c06:	00023617          	auipc	a2,0x23
    80010c0a:	92260613          	addi	a2,a2,-1758 # 80033528 <__func__.0+0x3838>
    80010c0e:	0001f517          	auipc	a0,0x1f
    80010c12:	3e250513          	addi	a0,a0,994 # 8002fff0 <__func__.0+0x300>
    80010c16:	4761c0ef          	jal	8002d08c <printf>
    80010c1a:	00047797          	auipc	a5,0x47
    80010c1e:	3f77c783          	lbu	a5,1015(a5) # 80058011 <excpt+0x1>
    80010c22:	0001f597          	auipc	a1,0x1f
    80010c26:	39658593          	addi	a1,a1,918 # 8002ffb8 <__func__.0+0x2c8>
    80010c2a:	c789                	beqz	a5,80010c34 <illegal_except_9+0x70>
    80010c2c:	0001f597          	auipc	a1,0x1f
    80010c30:	39c58593          	addi	a1,a1,924 # 8002ffc8 <__func__.0+0x2d8>
    80010c34:	0001f517          	auipc	a0,0x1f
    80010c38:	3d450513          	addi	a0,a0,980 # 80030008 <__func__.0+0x318>
    80010c3c:	4501c0ef          	jal	8002d08c <printf>
    80010c40:	00047797          	auipc	a5,0x47
    80010c44:	3d17c783          	lbu	a5,977(a5) # 80058011 <excpt+0x1>
    80010c48:	10079063          	bnez	a5,80010d48 <illegal_except_9+0x184>
    80010c4c:	4529                	li	a0,10
    80010c4e:	12c1b0ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    ); 

    //mstatus.TVM=1时，在HS模式下执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010c52:	4511                	li	a0,4
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010c54:	00047417          	auipc	s0,0x47
    80010c58:	3bd44403          	lbu	s0,957(s0) # 80058011 <excpt+0x1>
    goto_priv(PRIV_M);
    80010c5c:	aacf00ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010c60:	00047497          	auipc	s1,0x47
    80010c64:	3b048493          	addi	s1,s1,944 # 80058010 <excpt>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010c68:	001007b7          	lui	a5,0x100
    80010c6c:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010c70:	450d                	li	a0,3
    80010c72:	a96f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010c76:	996f00ef          	jal	80000e0c <test_setup_except_function>
    80010c7a:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010c7e:	08200593          	li	a1,130
    80010c82:	00023617          	auipc	a2,0x23
    80010c86:	8de60613          	addi	a2,a2,-1826 # 80033560 <__func__.0+0x3870>
    80010c8a:	0001f517          	auipc	a0,0x1f
    80010c8e:	36650513          	addi	a0,a0,870 # 8002fff0 <__func__.0+0x300>
    80010c92:	3fa1c0ef          	jal	8002d08c <printf>
    80010c96:	00047797          	auipc	a5,0x47
    80010c9a:	37b7c783          	lbu	a5,891(a5) # 80058011 <excpt+0x1>
    80010c9e:	0001f597          	auipc	a1,0x1f
    80010ca2:	32a58593          	addi	a1,a1,810 # 8002ffc8 <__func__.0+0x2d8>
    80010ca6:	cf89                	beqz	a5,80010cc0 <illegal_except_9+0xfc>
    80010ca8:	6498                	ld	a4,8(s1)
    80010caa:	4789                	li	a5,2
    80010cac:	0001f597          	auipc	a1,0x1f
    80010cb0:	30c58593          	addi	a1,a1,780 # 8002ffb8 <__func__.0+0x2c8>
    80010cb4:	00f70663          	beq	a4,a5,80010cc0 <illegal_except_9+0xfc>
    80010cb8:	0001f597          	auipc	a1,0x1f
    80010cbc:	31058593          	addi	a1,a1,784 # 8002ffc8 <__func__.0+0x2d8>
    80010cc0:	0001f517          	auipc	a0,0x1f
    80010cc4:	34850513          	addi	a0,a0,840 # 80030008 <__func__.0+0x318>
    80010cc8:	3c41c0ef          	jal	8002d08c <printf>
    80010ccc:	00047797          	auipc	a5,0x47
    80010cd0:	3457c783          	lbu	a5,837(a5) # 80058011 <excpt+0x1>
    80010cd4:	c789                	beqz	a5,80010cde <illegal_except_9+0x11a>
    80010cd6:	6498                	ld	a4,8(s1)
    80010cd8:	4789                	li	a5,2
    80010cda:	00f70c63          	beq	a4,a5,80010cf2 <illegal_except_9+0x12e>
    80010cde:	0001f517          	auipc	a0,0x1f
    80010ce2:	33250513          	addi	a0,a0,818 # 80030010 <__func__.0+0x320>
    80010ce6:	3a61c0ef          	jal	8002d08c <printf>
    80010cea:	02900513          	li	a0,41
    80010cee:	08c1b0ef          	jal	8002bd7a <putchar>
    80010cf2:	4529                	li	a0,10
    80010cf4:	0861b0ef          	jal	8002bd7a <putchar>
    80010cf8:	e015                	bnez	s0,80010d1c <illegal_except_9+0x158>
    80010cfa:	00047417          	auipc	s0,0x47
    80010cfe:	31744403          	lbu	s0,791(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010d02:	0001f597          	auipc	a1,0x1f
    80010d06:	2c658593          	addi	a1,a1,710 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010d0a:	cc11                	beqz	s0,80010d26 <illegal_except_9+0x162>
    80010d0c:	6498                	ld	a4,8(s1)
    80010d0e:	4789                	li	a5,2
    TEST_END();
    80010d10:	0001f597          	auipc	a1,0x1f
    80010d14:	2a858593          	addi	a1,a1,680 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010d18:	00f70763          	beq	a4,a5,80010d26 <illegal_except_9+0x162>
    80010d1c:	4401                	li	s0,0
    TEST_END();
    80010d1e:	0001f597          	auipc	a1,0x1f
    80010d22:	2aa58593          	addi	a1,a1,682 # 8002ffc8 <__func__.0+0x2d8>
    80010d26:	0001f517          	auipc	a0,0x1f
    80010d2a:	34a50513          	addi	a0,a0,842 # 80030070 <__func__.0+0x380>
    80010d2e:	35e1c0ef          	jal	8002d08c <printf>
    80010d32:	4511                	li	a0,4
    80010d34:	9d4f00ef          	jal	80000f08 <goto_priv>
    80010d38:	b9bf00ef          	jal	800018d2 <reset_state>
}
    80010d3c:	60e2                	ld	ra,24(sp)
    80010d3e:	8522                	mv	a0,s0
    80010d40:	6442                	ld	s0,16(sp)
    80010d42:	64a2                	ld	s1,8(sp)
    80010d44:	6105                	addi	sp,sp,32
    80010d46:	8082                	ret
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010d48:	0001f517          	auipc	a0,0x1f
    80010d4c:	2c850513          	addi	a0,a0,712 # 80030010 <__func__.0+0x320>
    80010d50:	33c1c0ef          	jal	8002d08c <printf>
    80010d54:	02900513          	li	a0,41
    80010d58:	0221b0ef          	jal	8002bd7a <putchar>
    80010d5c:	bdc5                	j	80010c4c <illegal_except_9+0x88>

0000000080010d5e <illegal_except_10>:

bool illegal_except_10() {
    80010d5e:	1101                	addi	sp,sp,-32

    TEST_START();
    80010d60:	0001e597          	auipc	a1,0x1e
    80010d64:	8a858593          	addi	a1,a1,-1880 # 8002e608 <__func__.5>
    80010d68:	0001f517          	auipc	a0,0x1f
    80010d6c:	27050513          	addi	a0,a0,624 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_10() {
    80010d70:	ec06                	sd	ra,24(sp)
    80010d72:	e822                	sd	s0,16(sp)
    80010d74:	e426                	sd	s1,8(sp)
    TEST_START();
    80010d76:	3161c0ef          	jal	8002d08c <printf>
    80010d7a:	4529                	li	a0,10
    80010d7c:	7ff1a0ef          	jal	8002bd7a <putchar>
    
    //mstatus.TVM=1，尝试在S模式或HS模式下执行SINVAL.VMA或HINVAL.GVMA
    goto_priv(PRIV_M);
    80010d80:	4511                	li	a0,4
    80010d82:	986f00ef          	jal	80000f08 <goto_priv>
    reset_state();
    80010d86:	b4df00ef          	jal	800018d2 <reset_state>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010d8a:	001007b7          	lui	a5,0x100
    80010d8e:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010d92:	450d                	li	a0,3
    80010d94:	974f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010d98:	874f00ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010d9c:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hs mode sinval.vma successful when mstatus.tvm=1",
    80010da0:	08200593          	li	a1,130
    80010da4:	00022617          	auipc	a2,0x22
    80010da8:	7f460613          	addi	a2,a2,2036 # 80033598 <__func__.0+0x38a8>
    80010dac:	0001f517          	auipc	a0,0x1f
    80010db0:	24450513          	addi	a0,a0,580 # 8002fff0 <__func__.0+0x300>
    80010db4:	2d81c0ef          	jal	8002d08c <printf>
    80010db8:	00047797          	auipc	a5,0x47
    80010dbc:	2597c783          	lbu	a5,601(a5) # 80058011 <excpt+0x1>
    80010dc0:	00047497          	auipc	s1,0x47
    80010dc4:	25048493          	addi	s1,s1,592 # 80058010 <excpt>
    80010dc8:	0001f597          	auipc	a1,0x1f
    80010dcc:	20058593          	addi	a1,a1,512 # 8002ffc8 <__func__.0+0x2d8>
    80010dd0:	cf89                	beqz	a5,80010dea <illegal_except_10+0x8c>
    80010dd2:	6498                	ld	a4,8(s1)
    80010dd4:	4789                	li	a5,2
    80010dd6:	0001f597          	auipc	a1,0x1f
    80010dda:	1e258593          	addi	a1,a1,482 # 8002ffb8 <__func__.0+0x2c8>
    80010dde:	00f70663          	beq	a4,a5,80010dea <illegal_except_10+0x8c>
    80010de2:	0001f597          	auipc	a1,0x1f
    80010de6:	1e658593          	addi	a1,a1,486 # 8002ffc8 <__func__.0+0x2d8>
    80010dea:	0001f517          	auipc	a0,0x1f
    80010dee:	21e50513          	addi	a0,a0,542 # 80030008 <__func__.0+0x318>
    80010df2:	29a1c0ef          	jal	8002d08c <printf>
    80010df6:	00047797          	auipc	a5,0x47
    80010dfa:	21b7c783          	lbu	a5,539(a5) # 80058011 <excpt+0x1>
    80010dfe:	c789                	beqz	a5,80010e08 <illegal_except_10+0xaa>
    80010e00:	6498                	ld	a4,8(s1)
    80010e02:	4789                	li	a5,2
    80010e04:	00f70c63          	beq	a4,a5,80010e1c <illegal_except_10+0xbe>
    80010e08:	0001f517          	auipc	a0,0x1f
    80010e0c:	20850513          	addi	a0,a0,520 # 80030010 <__func__.0+0x320>
    80010e10:	27c1c0ef          	jal	8002d08c <printf>
    80010e14:	02900513          	li	a0,41
    80010e18:	7631a0ef          	jal	8002bd7a <putchar>
    80010e1c:	4529                	li	a0,10
    80010e1e:	75d1a0ef          	jal	8002bd7a <putchar>
    80010e22:	00047797          	auipc	a5,0x47
    80010e26:	1ef7c783          	lbu	a5,495(a5) # 80058011 <excpt+0x1>
    80010e2a:	4401                	li	s0,0
    80010e2c:	c789                	beqz	a5,80010e36 <illegal_except_10+0xd8>
    80010e2e:	6480                	ld	s0,8(s1)
    80010e30:	1479                	addi	s0,s0,-2
    80010e32:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_M);
    80010e36:	4511                	li	a0,4
    80010e38:	8d0f00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010e3c:	001007b7          	lui	a5,0x100
    80010e40:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010e44:	450d                	li	a0,3
    80010e46:	8c2f00ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010e4a:	fc3ef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010e4e:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010e52:	08200593          	li	a1,130
    80010e56:	00022617          	auipc	a2,0x22
    80010e5a:	77a60613          	addi	a2,a2,1914 # 800335d0 <__func__.0+0x38e0>
    80010e5e:	0001f517          	auipc	a0,0x1f
    80010e62:	19250513          	addi	a0,a0,402 # 8002fff0 <__func__.0+0x300>
    80010e66:	2261c0ef          	jal	8002d08c <printf>
    80010e6a:	00047797          	auipc	a5,0x47
    80010e6e:	1a77c783          	lbu	a5,423(a5) # 80058011 <excpt+0x1>
    80010e72:	0001f597          	auipc	a1,0x1f
    80010e76:	15658593          	addi	a1,a1,342 # 8002ffc8 <__func__.0+0x2d8>
    80010e7a:	cf89                	beqz	a5,80010e94 <illegal_except_10+0x136>
    80010e7c:	6498                	ld	a4,8(s1)
    80010e7e:	4789                	li	a5,2
    80010e80:	0001f597          	auipc	a1,0x1f
    80010e84:	13858593          	addi	a1,a1,312 # 8002ffb8 <__func__.0+0x2c8>
    80010e88:	00f70663          	beq	a4,a5,80010e94 <illegal_except_10+0x136>
    80010e8c:	0001f597          	auipc	a1,0x1f
    80010e90:	13c58593          	addi	a1,a1,316 # 8002ffc8 <__func__.0+0x2d8>
    80010e94:	0001f517          	auipc	a0,0x1f
    80010e98:	17450513          	addi	a0,a0,372 # 80030008 <__func__.0+0x318>
    80010e9c:	1f01c0ef          	jal	8002d08c <printf>
    80010ea0:	00047797          	auipc	a5,0x47
    80010ea4:	1717c783          	lbu	a5,369(a5) # 80058011 <excpt+0x1>
    80010ea8:	c789                	beqz	a5,80010eb2 <illegal_except_10+0x154>
    80010eaa:	6498                	ld	a4,8(s1)
    80010eac:	4789                	li	a5,2
    80010eae:	00f70c63          	beq	a4,a5,80010ec6 <illegal_except_10+0x168>
    80010eb2:	0001f517          	auipc	a0,0x1f
    80010eb6:	15e50513          	addi	a0,a0,350 # 80030010 <__func__.0+0x320>
    80010eba:	1d21c0ef          	jal	8002d08c <printf>
    80010ebe:	02900513          	li	a0,41
    80010ec2:	6b91a0ef          	jal	8002bd7a <putchar>
    80010ec6:	4529                	li	a0,10
    80010ec8:	6b31a0ef          	jal	8002bd7a <putchar>
    80010ecc:	c015                	beqz	s0,80010ef0 <illegal_except_10+0x192>
    80010ece:	00047417          	auipc	s0,0x47
    80010ed2:	14344403          	lbu	s0,323(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010ed6:	0001f597          	auipc	a1,0x1f
    80010eda:	0f258593          	addi	a1,a1,242 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010ede:	cc11                	beqz	s0,80010efa <illegal_except_10+0x19c>
    80010ee0:	6498                	ld	a4,8(s1)
    80010ee2:	4789                	li	a5,2
    TEST_END();
    80010ee4:	0001f597          	auipc	a1,0x1f
    80010ee8:	0d458593          	addi	a1,a1,212 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010eec:	00f70763          	beq	a4,a5,80010efa <illegal_except_10+0x19c>
    80010ef0:	4401                	li	s0,0
    TEST_END();
    80010ef2:	0001f597          	auipc	a1,0x1f
    80010ef6:	0d658593          	addi	a1,a1,214 # 8002ffc8 <__func__.0+0x2d8>
    80010efa:	0001f517          	auipc	a0,0x1f
    80010efe:	17650513          	addi	a0,a0,374 # 80030070 <__func__.0+0x380>
    80010f02:	18a1c0ef          	jal	8002d08c <printf>
    80010f06:	4511                	li	a0,4
    80010f08:	800f00ef          	jal	80000f08 <goto_priv>
    80010f0c:	9c7f00ef          	jal	800018d2 <reset_state>
}
    80010f10:	60e2                	ld	ra,24(sp)
    80010f12:	8522                	mv	a0,s0
    80010f14:	6442                	ld	s0,16(sp)
    80010f16:	64a2                	ld	s1,8(sp)
    80010f18:	6105                	addi	sp,sp,32
    80010f1a:	8082                	ret

0000000080010f1c <illegal_except_11>:

bool illegal_except_11() {
    80010f1c:	1101                	addi	sp,sp,-32

    TEST_START();
    80010f1e:	0001d597          	auipc	a1,0x1d
    80010f22:	70258593          	addi	a1,a1,1794 # 8002e620 <__func__.4>
    80010f26:	0001f517          	auipc	a0,0x1f
    80010f2a:	0b250513          	addi	a0,a0,178 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_11() {
    80010f2e:	ec06                	sd	ra,24(sp)
    80010f30:	e822                	sd	s0,16(sp)
    80010f32:	e426                	sd	s1,8(sp)
    TEST_START();
    80010f34:	1581c0ef          	jal	8002d08c <printf>
    80010f38:	4529                	li	a0,10
    80010f3a:	6411a0ef          	jal	8002bd7a <putchar>

    //U模式下，执行HFENCE.VVMA或HFENCE.GVMA
    TEST_SETUP_EXCEPT();
    80010f3e:	ecfef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80010f42:	4511                	li	a0,4
    80010f44:	fc5ef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    80010f48:	98bf00ef          	jal	800018d2 <reset_state>
    goto_priv(PRIV_HU);
    80010f4c:	4505                	li	a0,1
    80010f4e:	fbbef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010f52:	ebbef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80010f56:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("hu mode hfence.vvma cause to illegal instruction interrupt",
    80010f5a:	08200593          	li	a1,130
    80010f5e:	00022617          	auipc	a2,0x22
    80010f62:	6aa60613          	addi	a2,a2,1706 # 80033608 <__func__.0+0x3918>
    80010f66:	0001f517          	auipc	a0,0x1f
    80010f6a:	08a50513          	addi	a0,a0,138 # 8002fff0 <__func__.0+0x300>
    80010f6e:	11e1c0ef          	jal	8002d08c <printf>
    80010f72:	00047797          	auipc	a5,0x47
    80010f76:	09f7c783          	lbu	a5,159(a5) # 80058011 <excpt+0x1>
    80010f7a:	00047497          	auipc	s1,0x47
    80010f7e:	09648493          	addi	s1,s1,150 # 80058010 <excpt>
    80010f82:	0001f597          	auipc	a1,0x1f
    80010f86:	04658593          	addi	a1,a1,70 # 8002ffc8 <__func__.0+0x2d8>
    80010f8a:	cf89                	beqz	a5,80010fa4 <illegal_except_11+0x88>
    80010f8c:	6498                	ld	a4,8(s1)
    80010f8e:	4789                	li	a5,2
    80010f90:	0001f597          	auipc	a1,0x1f
    80010f94:	02858593          	addi	a1,a1,40 # 8002ffb8 <__func__.0+0x2c8>
    80010f98:	00f70663          	beq	a4,a5,80010fa4 <illegal_except_11+0x88>
    80010f9c:	0001f597          	auipc	a1,0x1f
    80010fa0:	02c58593          	addi	a1,a1,44 # 8002ffc8 <__func__.0+0x2d8>
    80010fa4:	0001f517          	auipc	a0,0x1f
    80010fa8:	06450513          	addi	a0,a0,100 # 80030008 <__func__.0+0x318>
    80010fac:	0e01c0ef          	jal	8002d08c <printf>
    80010fb0:	00047797          	auipc	a5,0x47
    80010fb4:	0617c783          	lbu	a5,97(a5) # 80058011 <excpt+0x1>
    80010fb8:	c789                	beqz	a5,80010fc2 <illegal_except_11+0xa6>
    80010fba:	6498                	ld	a4,8(s1)
    80010fbc:	4789                	li	a5,2
    80010fbe:	00f70c63          	beq	a4,a5,80010fd6 <illegal_except_11+0xba>
    80010fc2:	0001f517          	auipc	a0,0x1f
    80010fc6:	04e50513          	addi	a0,a0,78 # 80030010 <__func__.0+0x320>
    80010fca:	0c21c0ef          	jal	8002d08c <printf>
    80010fce:	02900513          	li	a0,41
    80010fd2:	5a91a0ef          	jal	8002bd7a <putchar>
    80010fd6:	4529                	li	a0,10
    80010fd8:	5a31a0ef          	jal	8002bd7a <putchar>
    80010fdc:	00047797          	auipc	a5,0x47
    80010fe0:	0357c783          	lbu	a5,53(a5) # 80058011 <excpt+0x1>
    80010fe4:	4401                	li	s0,0
    80010fe6:	c789                	beqz	a5,80010ff0 <illegal_except_11+0xd4>
    80010fe8:	6480                	ld	s0,8(s1)
    80010fea:	1479                	addi	s0,s0,-2
    80010fec:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80010ff0:	e1def0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80010ff4:	4511                	li	a0,4
    80010ff6:	f13ef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    80010ffa:	8d9f00ef          	jal	800018d2 <reset_state>
    goto_priv(PRIV_HU);
    80010ffe:	4505                	li	a0,1
    80011000:	f09ef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011004:	e09ef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80011008:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8001100c:	08200593          	li	a1,130
    80011010:	00022617          	auipc	a2,0x22
    80011014:	63860613          	addi	a2,a2,1592 # 80033648 <__func__.0+0x3958>
    80011018:	0001f517          	auipc	a0,0x1f
    8001101c:	fd850513          	addi	a0,a0,-40 # 8002fff0 <__func__.0+0x300>
    80011020:	06c1c0ef          	jal	8002d08c <printf>
    80011024:	00047797          	auipc	a5,0x47
    80011028:	fed7c783          	lbu	a5,-19(a5) # 80058011 <excpt+0x1>
    8001102c:	0001f597          	auipc	a1,0x1f
    80011030:	f9c58593          	addi	a1,a1,-100 # 8002ffc8 <__func__.0+0x2d8>
    80011034:	cf89                	beqz	a5,8001104e <illegal_except_11+0x132>
    80011036:	6498                	ld	a4,8(s1)
    80011038:	4789                	li	a5,2
    8001103a:	0001f597          	auipc	a1,0x1f
    8001103e:	f7e58593          	addi	a1,a1,-130 # 8002ffb8 <__func__.0+0x2c8>
    80011042:	00f70663          	beq	a4,a5,8001104e <illegal_except_11+0x132>
    80011046:	0001f597          	auipc	a1,0x1f
    8001104a:	f8258593          	addi	a1,a1,-126 # 8002ffc8 <__func__.0+0x2d8>
    8001104e:	0001f517          	auipc	a0,0x1f
    80011052:	fba50513          	addi	a0,a0,-70 # 80030008 <__func__.0+0x318>
    80011056:	0361c0ef          	jal	8002d08c <printf>
    8001105a:	00047797          	auipc	a5,0x47
    8001105e:	fb77c783          	lbu	a5,-73(a5) # 80058011 <excpt+0x1>
    80011062:	c789                	beqz	a5,8001106c <illegal_except_11+0x150>
    80011064:	6498                	ld	a4,8(s1)
    80011066:	4789                	li	a5,2
    80011068:	00f70c63          	beq	a4,a5,80011080 <illegal_except_11+0x164>
    8001106c:	0001f517          	auipc	a0,0x1f
    80011070:	fa450513          	addi	a0,a0,-92 # 80030010 <__func__.0+0x320>
    80011074:	0181c0ef          	jal	8002d08c <printf>
    80011078:	02900513          	li	a0,41
    8001107c:	4ff1a0ef          	jal	8002bd7a <putchar>
    80011080:	4529                	li	a0,10
    80011082:	4f91a0ef          	jal	8002bd7a <putchar>
    80011086:	c015                	beqz	s0,800110aa <illegal_except_11+0x18e>
    80011088:	00047417          	auipc	s0,0x47
    8001108c:	f8944403          	lbu	s0,-119(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011090:	0001f597          	auipc	a1,0x1f
    80011094:	f3858593          	addi	a1,a1,-200 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80011098:	cc11                	beqz	s0,800110b4 <illegal_except_11+0x198>
    8001109a:	6498                	ld	a4,8(s1)
    8001109c:	4789                	li	a5,2
    TEST_END();
    8001109e:	0001f597          	auipc	a1,0x1f
    800110a2:	f1a58593          	addi	a1,a1,-230 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    800110a6:	00f70763          	beq	a4,a5,800110b4 <illegal_except_11+0x198>
    800110aa:	4401                	li	s0,0
    TEST_END();
    800110ac:	0001f597          	auipc	a1,0x1f
    800110b0:	f1c58593          	addi	a1,a1,-228 # 8002ffc8 <__func__.0+0x2d8>
    800110b4:	0001f517          	auipc	a0,0x1f
    800110b8:	fbc50513          	addi	a0,a0,-68 # 80030070 <__func__.0+0x380>
    800110bc:	7d11b0ef          	jal	8002d08c <printf>
    800110c0:	4511                	li	a0,4
    800110c2:	e47ef0ef          	jal	80000f08 <goto_priv>
    800110c6:	80df00ef          	jal	800018d2 <reset_state>
}
    800110ca:	60e2                	ld	ra,24(sp)
    800110cc:	8522                	mv	a0,s0
    800110ce:	6442                	ld	s0,16(sp)
    800110d0:	64a2                	ld	s1,8(sp)
    800110d2:	6105                	addi	sp,sp,32
    800110d4:	8082                	ret

00000000800110d6 <illegal_except_12>:

bool illegal_except_12() {
    800110d6:	1101                	addi	sp,sp,-32

    TEST_START();
    800110d8:	0001d597          	auipc	a1,0x1d
    800110dc:	56058593          	addi	a1,a1,1376 # 8002e638 <__func__.3>
    800110e0:	0001f517          	auipc	a0,0x1f
    800110e4:	ef850513          	addi	a0,a0,-264 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_12() {
    800110e8:	ec06                	sd	ra,24(sp)
    800110ea:	e822                	sd	s0,16(sp)
    800110ec:	e426                	sd	s1,8(sp)
    TEST_START();
    800110ee:	79f1b0ef          	jal	8002d08c <printf>
    800110f2:	4529                	li	a0,10
    800110f4:	4871a0ef          	jal	8002bd7a <putchar>

    //在U模式下执行SINVAL.VMA、HINVAL.VVMA和HINVAL.GVMA中的任何一条
    TEST_SETUP_EXCEPT();
    800110f8:	d15ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800110fc:	4511                	li	a0,4
    800110fe:	e0bef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    80011102:	fd0f00ef          	jal	800018d2 <reset_state>
    goto_priv(PRIV_HU);
    80011106:	4505                	li	a0,1
    80011108:	e01ef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001110c:	d01ef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80011110:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hu mode sinval.vma cause to illegal instruction interrupt",
    80011114:	08200593          	li	a1,130
    80011118:	00022617          	auipc	a2,0x22
    8001111c:	57060613          	addi	a2,a2,1392 # 80033688 <__func__.0+0x3998>
    80011120:	0001f517          	auipc	a0,0x1f
    80011124:	ed050513          	addi	a0,a0,-304 # 8002fff0 <__func__.0+0x300>
    80011128:	7651b0ef          	jal	8002d08c <printf>
    8001112c:	00047797          	auipc	a5,0x47
    80011130:	ee57c783          	lbu	a5,-283(a5) # 80058011 <excpt+0x1>
    80011134:	00047497          	auipc	s1,0x47
    80011138:	edc48493          	addi	s1,s1,-292 # 80058010 <excpt>
    8001113c:	0001f597          	auipc	a1,0x1f
    80011140:	e8c58593          	addi	a1,a1,-372 # 8002ffc8 <__func__.0+0x2d8>
    80011144:	cf89                	beqz	a5,8001115e <illegal_except_12+0x88>
    80011146:	6498                	ld	a4,8(s1)
    80011148:	4789                	li	a5,2
    8001114a:	0001f597          	auipc	a1,0x1f
    8001114e:	e6e58593          	addi	a1,a1,-402 # 8002ffb8 <__func__.0+0x2c8>
    80011152:	00f70663          	beq	a4,a5,8001115e <illegal_except_12+0x88>
    80011156:	0001f597          	auipc	a1,0x1f
    8001115a:	e7258593          	addi	a1,a1,-398 # 8002ffc8 <__func__.0+0x2d8>
    8001115e:	0001f517          	auipc	a0,0x1f
    80011162:	eaa50513          	addi	a0,a0,-342 # 80030008 <__func__.0+0x318>
    80011166:	7271b0ef          	jal	8002d08c <printf>
    8001116a:	00047797          	auipc	a5,0x47
    8001116e:	ea77c783          	lbu	a5,-345(a5) # 80058011 <excpt+0x1>
    80011172:	c789                	beqz	a5,8001117c <illegal_except_12+0xa6>
    80011174:	6498                	ld	a4,8(s1)
    80011176:	4789                	li	a5,2
    80011178:	00f70c63          	beq	a4,a5,80011190 <illegal_except_12+0xba>
    8001117c:	0001f517          	auipc	a0,0x1f
    80011180:	e9450513          	addi	a0,a0,-364 # 80030010 <__func__.0+0x320>
    80011184:	7091b0ef          	jal	8002d08c <printf>
    80011188:	02900513          	li	a0,41
    8001118c:	3ef1a0ef          	jal	8002bd7a <putchar>
    80011190:	4529                	li	a0,10
    80011192:	3e91a0ef          	jal	8002bd7a <putchar>
    80011196:	00047797          	auipc	a5,0x47
    8001119a:	e7b7c783          	lbu	a5,-389(a5) # 80058011 <excpt+0x1>
    8001119e:	4401                	li	s0,0
    800111a0:	c789                	beqz	a5,800111aa <illegal_except_12+0xd4>
    800111a2:	6480                	ld	s0,8(s1)
    800111a4:	1479                	addi	s0,s0,-2
    800111a6:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    800111aa:	c63ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800111ae:	4511                	li	a0,4
    800111b0:	d59ef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    800111b4:	f1ef00ef          	jal	800018d2 <reset_state>
    goto_priv(PRIV_HU);
    800111b8:	4505                	li	a0,1
    800111ba:	d4fef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800111be:	c4fef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800111c2:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    800111c6:	08200593          	li	a1,130
    800111ca:	00022617          	auipc	a2,0x22
    800111ce:	4fe60613          	addi	a2,a2,1278 # 800336c8 <__func__.0+0x39d8>
    800111d2:	0001f517          	auipc	a0,0x1f
    800111d6:	e1e50513          	addi	a0,a0,-482 # 8002fff0 <__func__.0+0x300>
    800111da:	6b31b0ef          	jal	8002d08c <printf>
    800111de:	00047797          	auipc	a5,0x47
    800111e2:	e337c783          	lbu	a5,-461(a5) # 80058011 <excpt+0x1>
    800111e6:	0001f597          	auipc	a1,0x1f
    800111ea:	de258593          	addi	a1,a1,-542 # 8002ffc8 <__func__.0+0x2d8>
    800111ee:	cf89                	beqz	a5,80011208 <illegal_except_12+0x132>
    800111f0:	6498                	ld	a4,8(s1)
    800111f2:	4789                	li	a5,2
    800111f4:	0001f597          	auipc	a1,0x1f
    800111f8:	dc458593          	addi	a1,a1,-572 # 8002ffb8 <__func__.0+0x2c8>
    800111fc:	00f70663          	beq	a4,a5,80011208 <illegal_except_12+0x132>
    80011200:	0001f597          	auipc	a1,0x1f
    80011204:	dc858593          	addi	a1,a1,-568 # 8002ffc8 <__func__.0+0x2d8>
    80011208:	0001f517          	auipc	a0,0x1f
    8001120c:	e0050513          	addi	a0,a0,-512 # 80030008 <__func__.0+0x318>
    80011210:	67d1b0ef          	jal	8002d08c <printf>
    80011214:	00047797          	auipc	a5,0x47
    80011218:	dfd7c783          	lbu	a5,-515(a5) # 80058011 <excpt+0x1>
    8001121c:	c789                	beqz	a5,80011226 <illegal_except_12+0x150>
    8001121e:	6498                	ld	a4,8(s1)
    80011220:	4789                	li	a5,2
    80011222:	00f70c63          	beq	a4,a5,8001123a <illegal_except_12+0x164>
    80011226:	0001f517          	auipc	a0,0x1f
    8001122a:	dea50513          	addi	a0,a0,-534 # 80030010 <__func__.0+0x320>
    8001122e:	65f1b0ef          	jal	8002d08c <printf>
    80011232:	02900513          	li	a0,41
    80011236:	3451a0ef          	jal	8002bd7a <putchar>
    8001123a:	4529                	li	a0,10
    8001123c:	33f1a0ef          	jal	8002bd7a <putchar>
    80011240:	c801                	beqz	s0,80011250 <illegal_except_12+0x17a>
    80011242:	00047797          	auipc	a5,0x47
    80011246:	dcf7c783          	lbu	a5,-561(a5) # 80058011 <excpt+0x1>
    8001124a:	4401                	li	s0,0
    8001124c:	0e079563          	bnez	a5,80011336 <illegal_except_12+0x260>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80011250:	bbdef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011254:	4511                	li	a0,4
    80011256:	cb3ef0ef          	jal	80000f08 <goto_priv>
    reset_state();
    8001125a:	e78f00ef          	jal	800018d2 <reset_state>
    goto_priv(PRIV_HU);
    8001125e:	4505                	li	a0,1
    80011260:	ca9ef0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011264:	ba9ef0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80011268:	26000073          	.insn	4, 0x26000073
    hinval_vvma();
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8001126c:	08200593          	li	a1,130
    80011270:	00022617          	auipc	a2,0x22
    80011274:	49860613          	addi	a2,a2,1176 # 80033708 <__func__.0+0x3a18>
    80011278:	0001f517          	auipc	a0,0x1f
    8001127c:	d7850513          	addi	a0,a0,-648 # 8002fff0 <__func__.0+0x300>
    80011280:	60d1b0ef          	jal	8002d08c <printf>
    80011284:	00047797          	auipc	a5,0x47
    80011288:	d8d7c783          	lbu	a5,-627(a5) # 80058011 <excpt+0x1>
    8001128c:	0001f597          	auipc	a1,0x1f
    80011290:	d3c58593          	addi	a1,a1,-708 # 8002ffc8 <__func__.0+0x2d8>
    80011294:	cf89                	beqz	a5,800112ae <illegal_except_12+0x1d8>
    80011296:	6498                	ld	a4,8(s1)
    80011298:	4789                	li	a5,2
    8001129a:	0001f597          	auipc	a1,0x1f
    8001129e:	d1e58593          	addi	a1,a1,-738 # 8002ffb8 <__func__.0+0x2c8>
    800112a2:	00f70663          	beq	a4,a5,800112ae <illegal_except_12+0x1d8>
    800112a6:	0001f597          	auipc	a1,0x1f
    800112aa:	d2258593          	addi	a1,a1,-734 # 8002ffc8 <__func__.0+0x2d8>
    800112ae:	0001f517          	auipc	a0,0x1f
    800112b2:	d5a50513          	addi	a0,a0,-678 # 80030008 <__func__.0+0x318>
    800112b6:	5d71b0ef          	jal	8002d08c <printf>
    800112ba:	00047797          	auipc	a5,0x47
    800112be:	d577c783          	lbu	a5,-681(a5) # 80058011 <excpt+0x1>
    800112c2:	c789                	beqz	a5,800112cc <illegal_except_12+0x1f6>
    800112c4:	6498                	ld	a4,8(s1)
    800112c6:	4789                	li	a5,2
    800112c8:	00f70c63          	beq	a4,a5,800112e0 <illegal_except_12+0x20a>
    800112cc:	0001f517          	auipc	a0,0x1f
    800112d0:	d4450513          	addi	a0,a0,-700 # 80030010 <__func__.0+0x320>
    800112d4:	5b91b0ef          	jal	8002d08c <printf>
    800112d8:	02900513          	li	a0,41
    800112dc:	29f1a0ef          	jal	8002bd7a <putchar>
    800112e0:	4529                	li	a0,10
    800112e2:	2991a0ef          	jal	8002bd7a <putchar>
    800112e6:	c015                	beqz	s0,8001130a <illegal_except_12+0x234>
    800112e8:	00047417          	auipc	s0,0x47
    800112ec:	d2944403          	lbu	s0,-727(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800112f0:	0001f597          	auipc	a1,0x1f
    800112f4:	cd858593          	addi	a1,a1,-808 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    800112f8:	cc11                	beqz	s0,80011314 <illegal_except_12+0x23e>
    800112fa:	6498                	ld	a4,8(s1)
    800112fc:	4789                	li	a5,2
    TEST_END();
    800112fe:	0001f597          	auipc	a1,0x1f
    80011302:	cba58593          	addi	a1,a1,-838 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    80011306:	00f70763          	beq	a4,a5,80011314 <illegal_except_12+0x23e>
    8001130a:	4401                	li	s0,0
    TEST_END();
    8001130c:	0001f597          	auipc	a1,0x1f
    80011310:	cbc58593          	addi	a1,a1,-836 # 8002ffc8 <__func__.0+0x2d8>
    80011314:	0001f517          	auipc	a0,0x1f
    80011318:	d5c50513          	addi	a0,a0,-676 # 80030070 <__func__.0+0x380>
    8001131c:	5711b0ef          	jal	8002d08c <printf>
    80011320:	4511                	li	a0,4
    80011322:	be7ef0ef          	jal	80000f08 <goto_priv>
    80011326:	dacf00ef          	jal	800018d2 <reset_state>
}
    8001132a:	60e2                	ld	ra,24(sp)
    8001132c:	8522                	mv	a0,s0
    8001132e:	6442                	ld	s0,16(sp)
    80011330:	64a2                	ld	s1,8(sp)
    80011332:	6105                	addi	sp,sp,32
    80011334:	8082                	ret
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    80011336:	6480                	ld	s0,8(s1)
    80011338:	1479                	addi	s0,s0,-2
    8001133a:	00143413          	seqz	s0,s0
    8001133e:	bf09                	j	80011250 <illegal_except_12+0x17a>

0000000080011340 <illegal_except_13>:


bool illegal_except_13() {
    80011340:	1101                	addi	sp,sp,-32

    TEST_START();
    80011342:	0001d597          	auipc	a1,0x1d
    80011346:	30e58593          	addi	a1,a1,782 # 8002e650 <__func__.2>
    8001134a:	0001f517          	auipc	a0,0x1f
    8001134e:	c8e50513          	addi	a0,a0,-882 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_13() {
    80011352:	ec06                	sd	ra,24(sp)
    80011354:	e822                	sd	s0,16(sp)
    80011356:	e426                	sd	s1,8(sp)
    TEST_START();
    80011358:	5351b0ef          	jal	8002d08c <printf>
    8001135c:	4529                	li	a0,10
    8001135e:	21d1a0ef          	jal	8002bd7a <putchar>
    //satp.MODE只读0，执行sfence.vma
    TEST_SETUP_EXCEPT();
    80011362:	aabef0ef          	jal	80000e0c <test_setup_except_function>

    goto_priv(PRIV_HS);
    80011366:	450d                	li	a0,3
    80011368:	ba1ef0ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_SATP,0ULL);
    8001136c:	18005073          	csrwi	satp,0
    asm volatile(
    80011370:	12000073          	sfence.vma
    sfence_vma();
    printf("%d",excpt.triggered);
    80011374:	00047597          	auipc	a1,0x47
    80011378:	c9d5c583          	lbu	a1,-867(a1) # 80058011 <excpt+0x1>
    8001137c:	00022517          	auipc	a0,0x22
    80011380:	3cc50513          	addi	a0,a0,972 # 80033748 <__func__.0+0x3a58>
    80011384:	00047497          	auipc	s1,0x47
    80011388:	c8c48493          	addi	s1,s1,-884 # 80058010 <excpt>
    8001138c:	5011b0ef          	jal	8002d08c <printf>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80011390:	08200593          	li	a1,130
    80011394:	00022617          	auipc	a2,0x22
    80011398:	3bc60613          	addi	a2,a2,956 # 80033750 <__func__.0+0x3a60>
    8001139c:	0001f517          	auipc	a0,0x1f
    800113a0:	c5450513          	addi	a0,a0,-940 # 8002fff0 <__func__.0+0x300>
    800113a4:	4e91b0ef          	jal	8002d08c <printf>
    800113a8:	00047797          	auipc	a5,0x47
    800113ac:	c697c783          	lbu	a5,-919(a5) # 80058011 <excpt+0x1>
    800113b0:	0001f597          	auipc	a1,0x1f
    800113b4:	c1858593          	addi	a1,a1,-1000 # 8002ffc8 <__func__.0+0x2d8>
    800113b8:	cf89                	beqz	a5,800113d2 <illegal_except_13+0x92>
    800113ba:	6498                	ld	a4,8(s1)
    800113bc:	4789                	li	a5,2
    800113be:	0001f597          	auipc	a1,0x1f
    800113c2:	bfa58593          	addi	a1,a1,-1030 # 8002ffb8 <__func__.0+0x2c8>
    800113c6:	00f70663          	beq	a4,a5,800113d2 <illegal_except_13+0x92>
    800113ca:	0001f597          	auipc	a1,0x1f
    800113ce:	bfe58593          	addi	a1,a1,-1026 # 8002ffc8 <__func__.0+0x2d8>
    800113d2:	0001f517          	auipc	a0,0x1f
    800113d6:	c3650513          	addi	a0,a0,-970 # 80030008 <__func__.0+0x318>
    800113da:	4b31b0ef          	jal	8002d08c <printf>
    800113de:	00047797          	auipc	a5,0x47
    800113e2:	c337c783          	lbu	a5,-973(a5) # 80058011 <excpt+0x1>
    800113e6:	c789                	beqz	a5,800113f0 <illegal_except_13+0xb0>
    800113e8:	6498                	ld	a4,8(s1)
    800113ea:	4789                	li	a5,2
    800113ec:	00f70c63          	beq	a4,a5,80011404 <illegal_except_13+0xc4>
    800113f0:	0001f517          	auipc	a0,0x1f
    800113f4:	c2050513          	addi	a0,a0,-992 # 80030010 <__func__.0+0x320>
    800113f8:	4951b0ef          	jal	8002d08c <printf>
    800113fc:	02900513          	li	a0,41
    80011400:	17b1a0ef          	jal	8002bd7a <putchar>
    80011404:	4529                	li	a0,10
    80011406:	1751a0ef          	jal	8002bd7a <putchar>
    8001140a:	00047417          	auipc	s0,0x47
    8001140e:	c0744403          	lbu	s0,-1017(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011412:	0001f597          	auipc	a1,0x1f
    80011416:	bb658593          	addi	a1,a1,-1098 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8001141a:	cc11                	beqz	s0,80011436 <illegal_except_13+0xf6>
    8001141c:	6498                	ld	a4,8(s1)
    8001141e:	4789                	li	a5,2
    TEST_END();
    80011420:	0001f597          	auipc	a1,0x1f
    80011424:	b9858593          	addi	a1,a1,-1128 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80011428:	00f70763          	beq	a4,a5,80011436 <illegal_except_13+0xf6>
    8001142c:	4401                	li	s0,0
    TEST_END();
    8001142e:	0001f597          	auipc	a1,0x1f
    80011432:	b9a58593          	addi	a1,a1,-1126 # 8002ffc8 <__func__.0+0x2d8>
    80011436:	0001f517          	auipc	a0,0x1f
    8001143a:	c3a50513          	addi	a0,a0,-966 # 80030070 <__func__.0+0x380>
    8001143e:	44f1b0ef          	jal	8002d08c <printf>
    80011442:	4511                	li	a0,4
    80011444:	ac5ef0ef          	jal	80000f08 <goto_priv>
    80011448:	c8af00ef          	jal	800018d2 <reset_state>
}
    8001144c:	60e2                	ld	ra,24(sp)
    8001144e:	8522                	mv	a0,s0
    80011450:	6442                	ld	s0,16(sp)
    80011452:	64a2                	ld	s1,8(sp)
    80011454:	6105                	addi	sp,sp,32
    80011456:	8082                	ret

0000000080011458 <illegal_except_14>:
    //扩展FS的状态设置为0时，尝试读取或者写入浮点对应的状态指令
    //扩展VS的状态设置为0时，尝试读取或者写入向量对应的状态指令
    //扩展XS的状态设置为0时，尝试读取或者写入其他扩展对应的状态指令
    //设置HU=0时，在U模式执行超级虚拟机指令

bool illegal_except_14() {
    80011458:	1101                	addi	sp,sp,-32

    TEST_START();
    8001145a:	0001d597          	auipc	a1,0x1d
    8001145e:	20e58593          	addi	a1,a1,526 # 8002e668 <__func__.1>
    80011462:	0001f517          	auipc	a0,0x1f
    80011466:	b7650513          	addi	a0,a0,-1162 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_14() {
    8001146a:	ec06                	sd	ra,24(sp)
    8001146c:	e822                	sd	s0,16(sp)
    8001146e:	e426                	sd	s1,8(sp)
    TEST_START();
    80011470:	41d1b0ef          	jal	8002d08c <printf>
    80011474:	4529                	li	a0,10
    80011476:	1051a0ef          	jal	8002bd7a <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001147a:	993ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001147e:	4511                	li	a0,4
    80011480:	a89ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    80011484:	004007b7          	lui	a5,0x400
    80011488:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001148c:	450d                	li	a0,3
    8001148e:	a7bef0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VU);
    80011492:	4501                	li	a0,0
    80011494:	995ef0ef          	jal	80000e28 <set_prev_priv>
    asm volatile(
    80011498:	10200073          	sret

    //TEST_EXEC_SRET();
    sret();

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001149c:	08200593          	li	a1,130
    800114a0:	00022617          	auipc	a2,0x22
    800114a4:	30060613          	addi	a2,a2,768 # 800337a0 <__func__.0+0x3ab0>
    800114a8:	0001f517          	auipc	a0,0x1f
    800114ac:	b4850513          	addi	a0,a0,-1208 # 8002fff0 <__func__.0+0x300>
    800114b0:	3dd1b0ef          	jal	8002d08c <printf>
    800114b4:	00047797          	auipc	a5,0x47
    800114b8:	b5d7c783          	lbu	a5,-1187(a5) # 80058011 <excpt+0x1>
    800114bc:	00047497          	auipc	s1,0x47
    800114c0:	b5448493          	addi	s1,s1,-1196 # 80058010 <excpt>
    800114c4:	0001f597          	auipc	a1,0x1f
    800114c8:	b0458593          	addi	a1,a1,-1276 # 8002ffc8 <__func__.0+0x2d8>
    800114cc:	cf89                	beqz	a5,800114e6 <illegal_except_14+0x8e>
    800114ce:	6498                	ld	a4,8(s1)
    800114d0:	4789                	li	a5,2
    800114d2:	0001f597          	auipc	a1,0x1f
    800114d6:	ae658593          	addi	a1,a1,-1306 # 8002ffb8 <__func__.0+0x2c8>
    800114da:	00f70663          	beq	a4,a5,800114e6 <illegal_except_14+0x8e>
    800114de:	0001f597          	auipc	a1,0x1f
    800114e2:	aea58593          	addi	a1,a1,-1302 # 8002ffc8 <__func__.0+0x2d8>
    800114e6:	0001f517          	auipc	a0,0x1f
    800114ea:	b2250513          	addi	a0,a0,-1246 # 80030008 <__func__.0+0x318>
    800114ee:	39f1b0ef          	jal	8002d08c <printf>
    800114f2:	00047797          	auipc	a5,0x47
    800114f6:	b1f7c783          	lbu	a5,-1249(a5) # 80058011 <excpt+0x1>
    800114fa:	c789                	beqz	a5,80011504 <illegal_except_14+0xac>
    800114fc:	6498                	ld	a4,8(s1)
    800114fe:	4789                	li	a5,2
    80011500:	00f70c63          	beq	a4,a5,80011518 <illegal_except_14+0xc0>
    80011504:	0001f517          	auipc	a0,0x1f
    80011508:	b0c50513          	addi	a0,a0,-1268 # 80030010 <__func__.0+0x320>
    8001150c:	3811b0ef          	jal	8002d08c <printf>
    80011510:	02900513          	li	a0,41
    80011514:	0671a0ef          	jal	8002bd7a <putchar>
    80011518:	4529                	li	a0,10
    8001151a:	0611a0ef          	jal	8002bd7a <putchar>
    8001151e:	00047417          	auipc	s0,0x47
    80011522:	af344403          	lbu	s0,-1293(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011526:	0001f597          	auipc	a1,0x1f
    8001152a:	aa258593          	addi	a1,a1,-1374 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001152e:	cc11                	beqz	s0,8001154a <illegal_except_14+0xf2>
    80011530:	6498                	ld	a4,8(s1)
    80011532:	4789                	li	a5,2
    TEST_END();
    80011534:	0001f597          	auipc	a1,0x1f
    80011538:	a8458593          	addi	a1,a1,-1404 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001153c:	00f70763          	beq	a4,a5,8001154a <illegal_except_14+0xf2>
    80011540:	4401                	li	s0,0
    TEST_END();
    80011542:	0001f597          	auipc	a1,0x1f
    80011546:	a8658593          	addi	a1,a1,-1402 # 8002ffc8 <__func__.0+0x2d8>
    8001154a:	0001f517          	auipc	a0,0x1f
    8001154e:	b2650513          	addi	a0,a0,-1242 # 80030070 <__func__.0+0x380>
    80011552:	33b1b0ef          	jal	8002d08c <printf>
    80011556:	4511                	li	a0,4
    80011558:	9b1ef0ef          	jal	80000f08 <goto_priv>
    8001155c:	b76f00ef          	jal	800018d2 <reset_state>

}
    80011560:	60e2                	ld	ra,24(sp)
    80011562:	8522                	mv	a0,s0
    80011564:	6442                	ld	s0,16(sp)
    80011566:	64a2                	ld	s1,8(sp)
    80011568:	6105                	addi	sp,sp,32
    8001156a:	8082                	ret

000000008001156c <illegal_except_15>:

bool illegal_except_15() {
    8001156c:	1141                	addi	sp,sp,-16

    TEST_START();
    8001156e:	0001d597          	auipc	a1,0x1d
    80011572:	11258593          	addi	a1,a1,274 # 8002e680 <__func__.0>
    80011576:	0001f517          	auipc	a0,0x1f
    8001157a:	a6250513          	addi	a0,a0,-1438 # 8002ffd8 <__func__.0+0x2e8>
bool illegal_except_15() {
    8001157e:	e406                	sd	ra,8(sp)
    80011580:	e022                	sd	s0,0(sp)
    TEST_START();
    80011582:	30b1b0ef          	jal	8002d08c <printf>
    80011586:	4529                	li	a0,10
    80011588:	7f21a0ef          	jal	8002bd7a <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001158c:	881ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011590:	4511                	li	a0,4
    80011592:	977ef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 22);    //TSR位
    80011596:	004007b7          	lui	a5,0x400
    8001159a:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    8001159e:	450d                	li	a0,3
    800115a0:	969ef0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800115a4:	4509                	li	a0,2
    800115a6:	883ef0ef          	jal	80000e28 <set_prev_priv>

    TEST_EXEC_SRET();
    800115aa:	00000297          	auipc	t0,0x0
    800115ae:	01028293          	addi	t0,t0,16 # 800115ba <illegal_except_15+0x4e>
    800115b2:	14129073          	csrw	sepc,t0
    800115b6:	10200073          	sret


    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    800115ba:	08200593          	li	a1,130
    800115be:	00022617          	auipc	a2,0x22
    800115c2:	21260613          	addi	a2,a2,530 # 800337d0 <__func__.0+0x3ae0>
    800115c6:	0001f517          	auipc	a0,0x1f
    800115ca:	a2a50513          	addi	a0,a0,-1494 # 8002fff0 <__func__.0+0x300>
    800115ce:	2bf1b0ef          	jal	8002d08c <printf>
    800115d2:	00047797          	auipc	a5,0x47
    800115d6:	a3f7c783          	lbu	a5,-1473(a5) # 80058011 <excpt+0x1>
    800115da:	0001f597          	auipc	a1,0x1f
    800115de:	9de58593          	addi	a1,a1,-1570 # 8002ffb8 <__func__.0+0x2c8>
    800115e2:	c789                	beqz	a5,800115ec <illegal_except_15+0x80>
    800115e4:	0001f597          	auipc	a1,0x1f
    800115e8:	9e458593          	addi	a1,a1,-1564 # 8002ffc8 <__func__.0+0x2d8>
    800115ec:	0001f517          	auipc	a0,0x1f
    800115f0:	a1c50513          	addi	a0,a0,-1508 # 80030008 <__func__.0+0x318>
    800115f4:	2991b0ef          	jal	8002d08c <printf>
    800115f8:	00047797          	auipc	a5,0x47
    800115fc:	a197c783          	lbu	a5,-1511(a5) # 80058011 <excpt+0x1>
    80011600:	e7a1                	bnez	a5,80011648 <illegal_except_15+0xdc>
    80011602:	4529                	li	a0,10
    80011604:	7761a0ef          	jal	8002bd7a <putchar>
    80011608:	00047797          	auipc	a5,0x47
    8001160c:	a097c783          	lbu	a5,-1527(a5) # 80058011 <excpt+0x1>
    80011610:	e795                	bnez	a5,8001163c <illegal_except_15+0xd0>
    80011612:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80011614:	0001f597          	auipc	a1,0x1f
    80011618:	9a458593          	addi	a1,a1,-1628 # 8002ffb8 <__func__.0+0x2c8>
    8001161c:	0001f517          	auipc	a0,0x1f
    80011620:	a5450513          	addi	a0,a0,-1452 # 80030070 <__func__.0+0x380>
    80011624:	2691b0ef          	jal	8002d08c <printf>
    80011628:	4511                	li	a0,4
    8001162a:	8dfef0ef          	jal	80000f08 <goto_priv>
    8001162e:	aa4f00ef          	jal	800018d2 <reset_state>

}
    80011632:	60a2                	ld	ra,8(sp)
    80011634:	8522                	mv	a0,s0
    80011636:	6402                	ld	s0,0(sp)
    80011638:	0141                	addi	sp,sp,16
    8001163a:	8082                	ret
    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    8001163c:	4401                	li	s0,0
    TEST_END();
    8001163e:	0001f597          	auipc	a1,0x1f
    80011642:	98a58593          	addi	a1,a1,-1654 # 8002ffc8 <__func__.0+0x2d8>
    80011646:	bfd9                	j	8001161c <illegal_except_15+0xb0>
    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    80011648:	0001f517          	auipc	a0,0x1f
    8001164c:	9c850513          	addi	a0,a0,-1592 # 80030010 <__func__.0+0x320>
    80011650:	23d1b0ef          	jal	8002d08c <printf>
    80011654:	02900513          	li	a0,41
    80011658:	7221a0ef          	jal	8002bd7a <putchar>
    8001165c:	b75d                	j	80011602 <illegal_except_15+0x96>

000000008001165e <external_interrupt_MEI>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool external_interrupt_MEI() {
    8001165e:	1101                	addi	sp,sp,-32

    TEST_START();
    80011660:	0001d597          	auipc	a1,0x1d
    80011664:	03858593          	addi	a1,a1,56 # 8002e698 <__func__.2>
    80011668:	0001f517          	auipc	a0,0x1f
    8001166c:	97050513          	addi	a0,a0,-1680 # 8002ffd8 <__func__.0+0x2e8>
bool external_interrupt_MEI() {
    80011670:	ec06                	sd	ra,24(sp)
    80011672:	e822                	sd	s0,16(sp)
    80011674:	e426                	sd	s1,8(sp)
    TEST_START();
    80011676:	2171b0ef          	jal	8002d08c <printf>
    8001167a:	4529                	li	a0,10
    8001167c:	6fe1a0ef          	jal	8002bd7a <putchar>

    TEST_SETUP_EXCEPT();
    80011680:	f8cef0ef          	jal	80000e0c <test_setup_except_function>

   
    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    goto_priv(PRIV_M);
    80011684:	4511                	li	a0,4
    80011686:	883ef0ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    8001168a:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8001168e:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);         
    80011692:	6785                	lui	a5,0x1
    80011694:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011698:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);     //p33 read-only  is set and cleared by a platform-specific interrupt controller
    8001169c:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    800116a0:	4511                	li	a0,4
    800116a2:	867ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    800116a6:	08200593          	li	a1,130
    800116aa:	00022617          	auipc	a2,0x22
    800116ae:	15660613          	addi	a2,a2,342 # 80033800 <__func__.0+0x3b10>
    800116b2:	0001f517          	auipc	a0,0x1f
    800116b6:	93e50513          	addi	a0,a0,-1730 # 8002fff0 <__func__.0+0x300>
    800116ba:	1d31b0ef          	jal	8002d08c <printf>
    800116be:	00047797          	auipc	a5,0x47
    800116c2:	9537c783          	lbu	a5,-1709(a5) # 80058011 <excpt+0x1>
    800116c6:	00047497          	auipc	s1,0x47
    800116ca:	94a48493          	addi	s1,s1,-1718 # 80058010 <excpt>
    800116ce:	0001f597          	auipc	a1,0x1f
    800116d2:	8fa58593          	addi	a1,a1,-1798 # 8002ffc8 <__func__.0+0x2d8>
    800116d6:	cf99                	beqz	a5,800116f4 <external_interrupt_MEI+0x96>
    800116d8:	57fd                	li	a5,-1
    800116da:	6498                	ld	a4,8(s1)
    800116dc:	17fe                	slli	a5,a5,0x3f
    800116de:	07ad                	addi	a5,a5,11
    800116e0:	0001f597          	auipc	a1,0x1f
    800116e4:	8d858593          	addi	a1,a1,-1832 # 8002ffb8 <__func__.0+0x2c8>
    800116e8:	00f70663          	beq	a4,a5,800116f4 <external_interrupt_MEI+0x96>
    800116ec:	0001f597          	auipc	a1,0x1f
    800116f0:	8dc58593          	addi	a1,a1,-1828 # 8002ffc8 <__func__.0+0x2d8>
    800116f4:	0001f517          	auipc	a0,0x1f
    800116f8:	91450513          	addi	a0,a0,-1772 # 80030008 <__func__.0+0x318>
    800116fc:	1911b0ef          	jal	8002d08c <printf>
    80011700:	00047797          	auipc	a5,0x47
    80011704:	9117c783          	lbu	a5,-1775(a5) # 80058011 <excpt+0x1>
    80011708:	c799                	beqz	a5,80011716 <external_interrupt_MEI+0xb8>
    8001170a:	57fd                	li	a5,-1
    8001170c:	6498                	ld	a4,8(s1)
    8001170e:	17fe                	slli	a5,a5,0x3f
    80011710:	07ad                	addi	a5,a5,11
    80011712:	00f70c63          	beq	a4,a5,8001172a <external_interrupt_MEI+0xcc>
    80011716:	0001f517          	auipc	a0,0x1f
    8001171a:	8fa50513          	addi	a0,a0,-1798 # 80030010 <__func__.0+0x320>
    8001171e:	16f1b0ef          	jal	8002d08c <printf>
    80011722:	02900513          	li	a0,41
    80011726:	6541a0ef          	jal	8002bd7a <putchar>
    8001172a:	4529                	li	a0,10
    8001172c:	64e1a0ef          	jal	8002bd7a <putchar>
    80011730:	00047797          	auipc	a5,0x47
    80011734:	8e17c783          	lbu	a5,-1823(a5) # 80058011 <excpt+0x1>
    80011738:	4401                	li	s0,0
    8001173a:	c799                	beqz	a5,80011748 <external_interrupt_MEI+0xea>
    8001173c:	6480                	ld	s0,8(s1)
    8001173e:	57ad                	li	a5,-21
    80011740:	8385                	srli	a5,a5,0x1
    80011742:	943e                	add	s0,s0,a5
    80011744:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0
    TEST_SETUP_EXCEPT();
    80011748:	ec4ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001174c:	4511                	li	a0,4
    8001174e:	fbaef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011752:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011756:	6785                	lui	a5,0x1
    80011758:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001175c:	3047b073          	csrc	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80011760:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    80011764:	4511                	li	a0,4
    80011766:	fa2ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8001176a:	08200593          	li	a1,130
    8001176e:	00022617          	auipc	a2,0x22
    80011772:	0f260613          	addi	a2,a2,242 # 80033860 <__func__.0+0x3b70>
    80011776:	0001f517          	auipc	a0,0x1f
    8001177a:	87a50513          	addi	a0,a0,-1926 # 8002fff0 <__func__.0+0x300>
    8001177e:	10f1b0ef          	jal	8002d08c <printf>
    80011782:	00047797          	auipc	a5,0x47
    80011786:	88f7c783          	lbu	a5,-1905(a5) # 80058011 <excpt+0x1>
    8001178a:	0001f597          	auipc	a1,0x1f
    8001178e:	83e58593          	addi	a1,a1,-1986 # 8002ffc8 <__func__.0+0x2d8>
    80011792:	e789                	bnez	a5,8001179c <external_interrupt_MEI+0x13e>
    80011794:	0001f597          	auipc	a1,0x1f
    80011798:	82458593          	addi	a1,a1,-2012 # 8002ffb8 <__func__.0+0x2c8>
    8001179c:	0001f517          	auipc	a0,0x1f
    800117a0:	86c50513          	addi	a0,a0,-1940 # 80030008 <__func__.0+0x318>
    800117a4:	0e91b0ef          	jal	8002d08c <printf>
    800117a8:	00047797          	auipc	a5,0x47
    800117ac:	8697c783          	lbu	a5,-1943(a5) # 80058011 <excpt+0x1>
    800117b0:	180796e3          	bnez	a5,8001213c <external_interrupt_MEI+0xade>
    800117b4:	4529                	li	a0,10
    800117b6:	5c41a0ef          	jal	8002bd7a <putchar>
    800117ba:	c419                	beqz	s0,800117c8 <external_interrupt_MEI+0x16a>
    800117bc:	00047417          	auipc	s0,0x47
    800117c0:	85544403          	lbu	s0,-1963(s0) # 80058011 <excpt+0x1>
    800117c4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1
    TEST_SETUP_EXCEPT();
    800117c8:	e44ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800117cc:	4511                	li	a0,4
    800117ce:	f3aef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800117d2:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800117d6:	6785                	lui	a5,0x1
    800117d8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800117dc:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    800117e0:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    800117e4:	4511                	li	a0,4
    800117e6:	f22ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    800117ea:	08200593          	li	a1,130
    800117ee:	00022617          	auipc	a2,0x22
    800117f2:	0ca60613          	addi	a2,a2,202 # 800338b8 <__func__.0+0x3bc8>
    800117f6:	0001e517          	auipc	a0,0x1e
    800117fa:	7fa50513          	addi	a0,a0,2042 # 8002fff0 <__func__.0+0x300>
    800117fe:	08f1b0ef          	jal	8002d08c <printf>
    80011802:	00047797          	auipc	a5,0x47
    80011806:	80f7c783          	lbu	a5,-2033(a5) # 80058011 <excpt+0x1>
    8001180a:	0001e597          	auipc	a1,0x1e
    8001180e:	7be58593          	addi	a1,a1,1982 # 8002ffc8 <__func__.0+0x2d8>
    80011812:	cf99                	beqz	a5,80011830 <external_interrupt_MEI+0x1d2>
    80011814:	57fd                	li	a5,-1
    80011816:	6498                	ld	a4,8(s1)
    80011818:	17fe                	slli	a5,a5,0x3f
    8001181a:	07ad                	addi	a5,a5,11
    8001181c:	0001e597          	auipc	a1,0x1e
    80011820:	79c58593          	addi	a1,a1,1948 # 8002ffb8 <__func__.0+0x2c8>
    80011824:	00f70663          	beq	a4,a5,80011830 <external_interrupt_MEI+0x1d2>
    80011828:	0001e597          	auipc	a1,0x1e
    8001182c:	7a058593          	addi	a1,a1,1952 # 8002ffc8 <__func__.0+0x2d8>
    80011830:	0001e517          	auipc	a0,0x1e
    80011834:	7d850513          	addi	a0,a0,2008 # 80030008 <__func__.0+0x318>
    80011838:	0551b0ef          	jal	8002d08c <printf>
    8001183c:	00046797          	auipc	a5,0x46
    80011840:	7d57c783          	lbu	a5,2005(a5) # 80058011 <excpt+0x1>
    80011844:	c799                	beqz	a5,80011852 <external_interrupt_MEI+0x1f4>
    80011846:	57fd                	li	a5,-1
    80011848:	6498                	ld	a4,8(s1)
    8001184a:	17fe                	slli	a5,a5,0x3f
    8001184c:	07ad                	addi	a5,a5,11
    8001184e:	00f70c63          	beq	a4,a5,80011866 <external_interrupt_MEI+0x208>
    80011852:	0001e517          	auipc	a0,0x1e
    80011856:	7be50513          	addi	a0,a0,1982 # 80030010 <__func__.0+0x320>
    8001185a:	0331b0ef          	jal	8002d08c <printf>
    8001185e:	02900513          	li	a0,41
    80011862:	5181a0ef          	jal	8002bd7a <putchar>
    80011866:	4529                	li	a0,10
    80011868:	5121a0ef          	jal	8002bd7a <putchar>
    8001186c:	c801                	beqz	s0,8001187c <external_interrupt_MEI+0x21e>
    8001186e:	00046797          	auipc	a5,0x46
    80011872:	7a37c783          	lbu	a5,1955(a5) # 80058011 <excpt+0x1>
    80011876:	4401                	li	s0,0
    80011878:	020792e3          	bnez	a5,8001209c <external_interrupt_MEI+0xa3e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=1
    TEST_SETUP_EXCEPT();
    8001187c:	d90ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011880:	4511                	li	a0,4
    80011882:	e86ef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80011886:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8001188a:	6785                	lui	a5,0x1
    8001188c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011890:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80011894:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    80011898:	4511                	li	a0,4
    8001189a:	e6eef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    8001189e:	08200593          	li	a1,130
    800118a2:	00022617          	auipc	a2,0x22
    800118a6:	07660613          	addi	a2,a2,118 # 80033918 <__func__.0+0x3c28>
    800118aa:	0001e517          	auipc	a0,0x1e
    800118ae:	74650513          	addi	a0,a0,1862 # 8002fff0 <__func__.0+0x300>
    800118b2:	7da1b0ef          	jal	8002d08c <printf>
    800118b6:	00046797          	auipc	a5,0x46
    800118ba:	75b7c783          	lbu	a5,1883(a5) # 80058011 <excpt+0x1>
    800118be:	0001e597          	auipc	a1,0x1e
    800118c2:	70a58593          	addi	a1,a1,1802 # 8002ffc8 <__func__.0+0x2d8>
    800118c6:	e789                	bnez	a5,800118d0 <external_interrupt_MEI+0x272>
    800118c8:	0001e597          	auipc	a1,0x1e
    800118cc:	6f058593          	addi	a1,a1,1776 # 8002ffb8 <__func__.0+0x2c8>
    800118d0:	0001e517          	auipc	a0,0x1e
    800118d4:	73850513          	addi	a0,a0,1848 # 80030008 <__func__.0+0x318>
    800118d8:	7b41b0ef          	jal	8002d08c <printf>
    800118dc:	00046797          	auipc	a5,0x46
    800118e0:	7357c783          	lbu	a5,1845(a5) # 80058011 <excpt+0x1>
    800118e4:	0c0796e3          	bnez	a5,800121b0 <external_interrupt_MEI+0xb52>
    800118e8:	4529                	li	a0,10
    800118ea:	4901a0ef          	jal	8002bd7a <putchar>
    800118ee:	c419                	beqz	s0,800118fc <external_interrupt_MEI+0x29e>
    800118f0:	00046417          	auipc	s0,0x46
    800118f4:	72144403          	lbu	s0,1825(s0) # 80058011 <excpt+0x1>
    800118f8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=0
    TEST_SETUP_EXCEPT();
    800118fc:	d10ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011900:	4511                	li	a0,4
    80011902:	e06ef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    80011906:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8001190a:	6785                	lui	a5,0x1
    8001190c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011910:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011914:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    80011918:	4511                	li	a0,4
    8001191a:	deeef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    8001191e:	08200593          	li	a1,130
    80011922:	00022617          	auipc	a2,0x22
    80011926:	04e60613          	addi	a2,a2,78 # 80033970 <__func__.0+0x3c80>
    8001192a:	0001e517          	auipc	a0,0x1e
    8001192e:	6c650513          	addi	a0,a0,1734 # 8002fff0 <__func__.0+0x300>
    80011932:	75a1b0ef          	jal	8002d08c <printf>
    80011936:	00046797          	auipc	a5,0x46
    8001193a:	6db7c783          	lbu	a5,1755(a5) # 80058011 <excpt+0x1>
    8001193e:	0001e597          	auipc	a1,0x1e
    80011942:	68a58593          	addi	a1,a1,1674 # 8002ffc8 <__func__.0+0x2d8>
    80011946:	e789                	bnez	a5,80011950 <external_interrupt_MEI+0x2f2>
    80011948:	0001e597          	auipc	a1,0x1e
    8001194c:	67058593          	addi	a1,a1,1648 # 8002ffb8 <__func__.0+0x2c8>
    80011950:	0001e517          	auipc	a0,0x1e
    80011954:	6b850513          	addi	a0,a0,1720 # 80030008 <__func__.0+0x318>
    80011958:	7341b0ef          	jal	8002d08c <printf>
    8001195c:	00046797          	auipc	a5,0x46
    80011960:	6b57c783          	lbu	a5,1717(a5) # 80058011 <excpt+0x1>
    80011964:	02079ae3          	bnez	a5,80012198 <external_interrupt_MEI+0xb3a>
    80011968:	4529                	li	a0,10
    8001196a:	4101a0ef          	jal	8002bd7a <putchar>
    8001196e:	c419                	beqz	s0,8001197c <external_interrupt_MEI+0x31e>
    80011970:	00046417          	auipc	s0,0x46
    80011974:	6a144403          	lbu	s0,1697(s0) # 80058011 <excpt+0x1>
    80011978:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=0，mie.MIE=0
    TEST_SETUP_EXCEPT();
    8001197c:	c90ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011980:	4511                	li	a0,4
    80011982:	d86ef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    80011986:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8001198a:	6785                	lui	a5,0x1
    8001198c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011990:	3047b073          	csrc	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011994:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    80011998:	4511                	li	a0,4
    8001199a:	d6eef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    8001199e:	08200593          	li	a1,130
    800119a2:	00022617          	auipc	a2,0x22
    800119a6:	02660613          	addi	a2,a2,38 # 800339c8 <__func__.0+0x3cd8>
    800119aa:	0001e517          	auipc	a0,0x1e
    800119ae:	64650513          	addi	a0,a0,1606 # 8002fff0 <__func__.0+0x300>
    800119b2:	6da1b0ef          	jal	8002d08c <printf>
    800119b6:	00046797          	auipc	a5,0x46
    800119ba:	65b7c783          	lbu	a5,1627(a5) # 80058011 <excpt+0x1>
    800119be:	0001e597          	auipc	a1,0x1e
    800119c2:	60a58593          	addi	a1,a1,1546 # 8002ffc8 <__func__.0+0x2d8>
    800119c6:	e789                	bnez	a5,800119d0 <external_interrupt_MEI+0x372>
    800119c8:	0001e597          	auipc	a1,0x1e
    800119cc:	5f058593          	addi	a1,a1,1520 # 8002ffb8 <__func__.0+0x2c8>
    800119d0:	0001e517          	auipc	a0,0x1e
    800119d4:	63850513          	addi	a0,a0,1592 # 80030008 <__func__.0+0x318>
    800119d8:	6b41b0ef          	jal	8002d08c <printf>
    800119dc:	00046797          	auipc	a5,0x46
    800119e0:	6357c783          	lbu	a5,1589(a5) # 80058011 <excpt+0x1>
    800119e4:	78079e63          	bnez	a5,80012180 <external_interrupt_MEI+0xb22>
    800119e8:	4529                	li	a0,10
    800119ea:	3901a0ef          	jal	8002bd7a <putchar>
    800119ee:	c419                	beqz	s0,800119fc <external_interrupt_MEI+0x39e>
    800119f0:	00046417          	auipc	s0,0x46
    800119f4:	62144403          	lbu	s0,1569(s0) # 80058011 <excpt+0x1>
    800119f8:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    800119fc:	c10ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011a00:	4511                	li	a0,4
    80011a02:	d06ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011a06:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011a0a:	6785                	lui	a5,0x1
    80011a0c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011a10:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80011a14:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_HS);
    80011a18:	450d                	li	a0,3
    80011a1a:	ceeef0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80011a1e:	08200593          	li	a1,130
    80011a22:	00022617          	auipc	a2,0x22
    80011a26:	ffe60613          	addi	a2,a2,-2 # 80033a20 <__func__.0+0x3d30>
    80011a2a:	0001e517          	auipc	a0,0x1e
    80011a2e:	5c650513          	addi	a0,a0,1478 # 8002fff0 <__func__.0+0x300>
    80011a32:	65a1b0ef          	jal	8002d08c <printf>
    80011a36:	6094                	ld	a3,0(s1)
    80011a38:	f0001737          	lui	a4,0xf0001
    80011a3c:	0712                	slli	a4,a4,0x4
    80011a3e:	4785                	li	a5,1
    80011a40:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011a44:	178a                	slli	a5,a5,0x22
    80011a46:	8f75                	and	a4,a4,a3
    80011a48:	10078793          	addi	a5,a5,256
    80011a4c:	0001e597          	auipc	a1,0x1e
    80011a50:	57c58593          	addi	a1,a1,1404 # 8002ffc8 <__func__.0+0x2d8>
    80011a54:	00f71663          	bne	a4,a5,80011a60 <external_interrupt_MEI+0x402>
    80011a58:	0001e597          	auipc	a1,0x1e
    80011a5c:	56058593          	addi	a1,a1,1376 # 8002ffb8 <__func__.0+0x2c8>
    80011a60:	0001e517          	auipc	a0,0x1e
    80011a64:	5a850513          	addi	a0,a0,1448 # 80030008 <__func__.0+0x318>
    80011a68:	6241b0ef          	jal	8002d08c <printf>
    80011a6c:	00046797          	auipc	a5,0x46
    80011a70:	5a57c783          	lbu	a5,1445(a5) # 80058011 <excpt+0x1>
    80011a74:	cb81                	beqz	a5,80011a84 <external_interrupt_MEI+0x426>
    80011a76:	00046717          	auipc	a4,0x46
    80011a7a:	59e72703          	lw	a4,1438(a4) # 80058014 <excpt+0x4>
    80011a7e:	4791                	li	a5,4
    80011a80:	00f70c63          	beq	a4,a5,80011a98 <external_interrupt_MEI+0x43a>
    80011a84:	0001e517          	auipc	a0,0x1e
    80011a88:	58c50513          	addi	a0,a0,1420 # 80030010 <__func__.0+0x320>
    80011a8c:	6001b0ef          	jal	8002d08c <printf>
    80011a90:	02900513          	li	a0,41
    80011a94:	2e61a0ef          	jal	8002bd7a <putchar>
    80011a98:	4529                	li	a0,10
    80011a9a:	2e01a0ef          	jal	8002bd7a <putchar>
    80011a9e:	cc19                	beqz	s0,80011abc <external_interrupt_MEI+0x45e>
    80011aa0:	6080                	ld	s0,0(s1)
    80011aa2:	f0001737          	lui	a4,0xf0001
    80011aa6:	0712                	slli	a4,a4,0x4
    80011aa8:	57fd                	li	a5,-1
    80011aaa:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011aae:	178a                	slli	a5,a5,0x22
    80011ab0:	8c79                	and	s0,s0,a4
    80011ab2:	f0078793          	addi	a5,a5,-256
    80011ab6:	943e                	add	s0,s0,a5
    80011ab8:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    80011abc:	b50ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011ac0:	4511                	li	a0,4
    80011ac2:	c46ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011ac6:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011aca:	6785                	lui	a5,0x1
    80011acc:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011ad0:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80011ad4:	577d                	li	a4,-1
    80011ad6:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    80011ada:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    80011ade:	450d                	li	a0,3
    80011ae0:	c28ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    80011ae4:	08200593          	li	a1,130
    80011ae8:	00022617          	auipc	a2,0x22
    80011aec:	f9060613          	addi	a2,a2,-112 # 80033a78 <__func__.0+0x3d88>
    80011af0:	0001e517          	auipc	a0,0x1e
    80011af4:	50050513          	addi	a0,a0,1280 # 8002fff0 <__func__.0+0x300>
    80011af8:	5941b0ef          	jal	8002d08c <printf>
    80011afc:	6094                	ld	a3,0(s1)
    80011afe:	f0001737          	lui	a4,0xf0001
    80011b02:	0712                	slli	a4,a4,0x4
    80011b04:	478d                	li	a5,3
    80011b06:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011b0a:	1782                	slli	a5,a5,0x20
    80011b0c:	8f75                	and	a4,a4,a3
    80011b0e:	10078793          	addi	a5,a5,256
    80011b12:	0001e597          	auipc	a1,0x1e
    80011b16:	4b658593          	addi	a1,a1,1206 # 8002ffc8 <__func__.0+0x2d8>
    80011b1a:	00f71663          	bne	a4,a5,80011b26 <external_interrupt_MEI+0x4c8>
    80011b1e:	0001e597          	auipc	a1,0x1e
    80011b22:	49a58593          	addi	a1,a1,1178 # 8002ffb8 <__func__.0+0x2c8>
    80011b26:	0001e517          	auipc	a0,0x1e
    80011b2a:	4e250513          	addi	a0,a0,1250 # 80030008 <__func__.0+0x318>
    80011b2e:	55e1b0ef          	jal	8002d08c <printf>
    80011b32:	00046797          	auipc	a5,0x46
    80011b36:	4df7c783          	lbu	a5,1247(a5) # 80058011 <excpt+0x1>
    80011b3a:	cb81                	beqz	a5,80011b4a <external_interrupt_MEI+0x4ec>
    80011b3c:	00046717          	auipc	a4,0x46
    80011b40:	4d872703          	lw	a4,1240(a4) # 80058014 <excpt+0x4>
    80011b44:	478d                	li	a5,3
    80011b46:	00f70c63          	beq	a4,a5,80011b5e <external_interrupt_MEI+0x500>
    80011b4a:	0001e517          	auipc	a0,0x1e
    80011b4e:	4c650513          	addi	a0,a0,1222 # 80030010 <__func__.0+0x320>
    80011b52:	53a1b0ef          	jal	8002d08c <printf>
    80011b56:	02900513          	li	a0,41
    80011b5a:	2201a0ef          	jal	8002bd7a <putchar>
    80011b5e:	4529                	li	a0,10
    80011b60:	21a1a0ef          	jal	8002bd7a <putchar>
    80011b64:	cc19                	beqz	s0,80011b82 <external_interrupt_MEI+0x524>
    80011b66:	6080                	ld	s0,0(s1)
    80011b68:	f0001737          	lui	a4,0xf0001
    80011b6c:	0712                	slli	a4,a4,0x4
    80011b6e:	57f5                	li	a5,-3
    80011b70:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011b74:	1782                	slli	a5,a5,0x20
    80011b76:	8c79                	and	s0,s0,a4
    80011b78:	f0078793          	addi	a5,a5,-256
    80011b7c:	943e                	add	s0,s0,a5
    80011b7e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    80011b82:	a8aef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011b86:	4511                	li	a0,4
    80011b88:	b80ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011b8c:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011b90:	6785                	lui	a5,0x1
    80011b92:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011b96:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    80011b9a:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80011b9e:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    80011ba2:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    80011ba6:	450d                	li	a0,3
    80011ba8:	b60ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80011bac:	08200593          	li	a1,130
    80011bb0:	00022617          	auipc	a2,0x22
    80011bb4:	f2060613          	addi	a2,a2,-224 # 80033ad0 <__func__.0+0x3de0>
    80011bb8:	0001e517          	auipc	a0,0x1e
    80011bbc:	43850513          	addi	a0,a0,1080 # 8002fff0 <__func__.0+0x300>
    80011bc0:	4cc1b0ef          	jal	8002d08c <printf>
    80011bc4:	00046797          	auipc	a5,0x46
    80011bc8:	44d7c783          	lbu	a5,1101(a5) # 80058011 <excpt+0x1>
    80011bcc:	0001e597          	auipc	a1,0x1e
    80011bd0:	3fc58593          	addi	a1,a1,1020 # 8002ffc8 <__func__.0+0x2d8>
    80011bd4:	e789                	bnez	a5,80011bde <external_interrupt_MEI+0x580>
    80011bd6:	0001e597          	auipc	a1,0x1e
    80011bda:	3e258593          	addi	a1,a1,994 # 8002ffb8 <__func__.0+0x2c8>
    80011bde:	0001e517          	auipc	a0,0x1e
    80011be2:	42a50513          	addi	a0,a0,1066 # 80030008 <__func__.0+0x318>
    80011be6:	4a61b0ef          	jal	8002d08c <printf>
    80011bea:	00046797          	auipc	a5,0x46
    80011bee:	4277c783          	lbu	a5,1063(a5) # 80058011 <excpt+0x1>
    80011bf2:	56079c63          	bnez	a5,8001216a <external_interrupt_MEI+0xb0c>
    80011bf6:	4529                	li	a0,10
    80011bf8:	1821a0ef          	jal	8002bd7a <putchar>
    80011bfc:	c419                	beqz	s0,80011c0a <external_interrupt_MEI+0x5ac>
    80011bfe:	00046417          	auipc	s0,0x46
    80011c02:	41344403          	lbu	s0,1043(s0) # 80058011 <excpt+0x1>
    80011c06:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    80011c0a:	a02ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011c0e:	4511                	li	a0,4
    80011c10:	af8ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011c14:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011c18:	6785                	lui	a5,0x1
    80011c1a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011c1e:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011c22:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    80011c26:	450d                	li	a0,3
    80011c28:	ae0ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011c2c:	08200593          	li	a1,130
    80011c30:	00022617          	auipc	a2,0x22
    80011c34:	ef860613          	addi	a2,a2,-264 # 80033b28 <__func__.0+0x3e38>
    80011c38:	0001e517          	auipc	a0,0x1e
    80011c3c:	3b850513          	addi	a0,a0,952 # 8002fff0 <__func__.0+0x300>
    80011c40:	44c1b0ef          	jal	8002d08c <printf>
    80011c44:	00046797          	auipc	a5,0x46
    80011c48:	3cd7c783          	lbu	a5,973(a5) # 80058011 <excpt+0x1>
    80011c4c:	0001e597          	auipc	a1,0x1e
    80011c50:	37c58593          	addi	a1,a1,892 # 8002ffc8 <__func__.0+0x2d8>
    80011c54:	c799                	beqz	a5,80011c62 <external_interrupt_MEI+0x604>
    80011c56:	57fd                	li	a5,-1
    80011c58:	6498                	ld	a4,8(s1)
    80011c5a:	17fe                	slli	a5,a5,0x3f
    80011c5c:	07ad                	addi	a5,a5,11
    80011c5e:	56f70563          	beq	a4,a5,800121c8 <external_interrupt_MEI+0xb6a>
    80011c62:	0001e517          	auipc	a0,0x1e
    80011c66:	3a650513          	addi	a0,a0,934 # 80030008 <__func__.0+0x318>
    80011c6a:	4221b0ef          	jal	8002d08c <printf>
    80011c6e:	00046797          	auipc	a5,0x46
    80011c72:	3a37c783          	lbu	a5,931(a5) # 80058011 <excpt+0x1>
    80011c76:	c799                	beqz	a5,80011c84 <external_interrupt_MEI+0x626>
    80011c78:	57fd                	li	a5,-1
    80011c7a:	6498                	ld	a4,8(s1)
    80011c7c:	17fe                	slli	a5,a5,0x3f
    80011c7e:	07ad                	addi	a5,a5,11
    80011c80:	48f70063          	beq	a4,a5,80012100 <external_interrupt_MEI+0xaa2>
    80011c84:	0001e517          	auipc	a0,0x1e
    80011c88:	38c50513          	addi	a0,a0,908 # 80030010 <__func__.0+0x320>
    80011c8c:	4001b0ef          	jal	8002d08c <printf>
    80011c90:	02900513          	li	a0,41
    80011c94:	0e61a0ef          	jal	8002bd7a <putchar>
    80011c98:	4529                	li	a0,10
    80011c9a:	0e01a0ef          	jal	8002bd7a <putchar>
    80011c9e:	c801                	beqz	s0,80011cae <external_interrupt_MEI+0x650>
    80011ca0:	00046797          	auipc	a5,0x46
    80011ca4:	3717c783          	lbu	a5,881(a5) # 80058011 <excpt+0x1>
    80011ca8:	4401                	li	s0,0
    80011caa:	42079563          	bnez	a5,800120d4 <external_interrupt_MEI+0xa76>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80011cae:	95eef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011cb2:	4511                	li	a0,4
    80011cb4:	a54ef0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80011cb8:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011cbc:	6785                	lui	a5,0x1
    80011cbe:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011cc2:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80011cc6:	577d                	li	a4,-1
    80011cc8:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1
    80011ccc:	30273073          	csrc	medeleg,a4
    );
    CSRC(CSR_MIP,MIP_MEIP);
    80011cd0:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    80011cd4:	450d                	li	a0,3
    80011cd6:	a32ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011cda:	08200593          	li	a1,130
    80011cde:	00022617          	auipc	a2,0x22
    80011ce2:	ea260613          	addi	a2,a2,-350 # 80033b80 <__func__.0+0x3e90>
    80011ce6:	0001e517          	auipc	a0,0x1e
    80011cea:	30a50513          	addi	a0,a0,778 # 8002fff0 <__func__.0+0x300>
    80011cee:	39e1b0ef          	jal	8002d08c <printf>
    80011cf2:	00046797          	auipc	a5,0x46
    80011cf6:	31f7c783          	lbu	a5,799(a5) # 80058011 <excpt+0x1>
    80011cfa:	0001e597          	auipc	a1,0x1e
    80011cfe:	2ce58593          	addi	a1,a1,718 # 8002ffc8 <__func__.0+0x2d8>
    80011d02:	e789                	bnez	a5,80011d0c <external_interrupt_MEI+0x6ae>
    80011d04:	0001e597          	auipc	a1,0x1e
    80011d08:	2b458593          	addi	a1,a1,692 # 8002ffb8 <__func__.0+0x2c8>
    80011d0c:	0001e517          	auipc	a0,0x1e
    80011d10:	2fc50513          	addi	a0,a0,764 # 80030008 <__func__.0+0x318>
    80011d14:	3781b0ef          	jal	8002d08c <printf>
    80011d18:	00046797          	auipc	a5,0x46
    80011d1c:	2f97c783          	lbu	a5,761(a5) # 80058011 <excpt+0x1>
    80011d20:	3e079863          	bnez	a5,80012110 <external_interrupt_MEI+0xab2>
    80011d24:	4529                	li	a0,10
    80011d26:	0541a0ef          	jal	8002bd7a <putchar>
    80011d2a:	c419                	beqz	s0,80011d38 <external_interrupt_MEI+0x6da>
    80011d2c:	00046417          	auipc	s0,0x46
    80011d30:	2e544403          	lbu	s0,741(s0) # 80058011 <excpt+0x1>
    80011d34:	00144413          	xori	s0,s0,1



//vs-mode下
    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    80011d38:	8d4ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011d3c:	4511                	li	a0,4
    80011d3e:	9caef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011d42:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011d46:	6785                	lui	a5,0x1
    80011d48:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011d4c:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80011d50:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_VS);
    80011d54:	4509                	li	a0,2
    80011d56:	9b2ef0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80011d5a:	08200593          	li	a1,130
    80011d5e:	00022617          	auipc	a2,0x22
    80011d62:	e7260613          	addi	a2,a2,-398 # 80033bd0 <__func__.0+0x3ee0>
    80011d66:	0001e517          	auipc	a0,0x1e
    80011d6a:	28a50513          	addi	a0,a0,650 # 8002fff0 <__func__.0+0x300>
    80011d6e:	31e1b0ef          	jal	8002d08c <printf>
    80011d72:	6094                	ld	a3,0(s1)
    80011d74:	f0001737          	lui	a4,0xf0001
    80011d78:	0712                	slli	a4,a4,0x4
    80011d7a:	4785                	li	a5,1
    80011d7c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011d80:	178a                	slli	a5,a5,0x22
    80011d82:	8f75                	and	a4,a4,a3
    80011d84:	10078793          	addi	a5,a5,256
    80011d88:	0001e597          	auipc	a1,0x1e
    80011d8c:	24058593          	addi	a1,a1,576 # 8002ffc8 <__func__.0+0x2d8>
    80011d90:	00f71663          	bne	a4,a5,80011d9c <external_interrupt_MEI+0x73e>
    80011d94:	0001e597          	auipc	a1,0x1e
    80011d98:	22458593          	addi	a1,a1,548 # 8002ffb8 <__func__.0+0x2c8>
    80011d9c:	0001e517          	auipc	a0,0x1e
    80011da0:	26c50513          	addi	a0,a0,620 # 80030008 <__func__.0+0x318>
    80011da4:	2e81b0ef          	jal	8002d08c <printf>
    80011da8:	00046797          	auipc	a5,0x46
    80011dac:	2697c783          	lbu	a5,617(a5) # 80058011 <excpt+0x1>
    80011db0:	cb81                	beqz	a5,80011dc0 <external_interrupt_MEI+0x762>
    80011db2:	00046717          	auipc	a4,0x46
    80011db6:	26272703          	lw	a4,610(a4) # 80058014 <excpt+0x4>
    80011dba:	4791                	li	a5,4
    80011dbc:	00f70c63          	beq	a4,a5,80011dd4 <external_interrupt_MEI+0x776>
    80011dc0:	0001e517          	auipc	a0,0x1e
    80011dc4:	25050513          	addi	a0,a0,592 # 80030010 <__func__.0+0x320>
    80011dc8:	2c41b0ef          	jal	8002d08c <printf>
    80011dcc:	02900513          	li	a0,41
    80011dd0:	7ab190ef          	jal	8002bd7a <putchar>
    80011dd4:	4529                	li	a0,10
    80011dd6:	7a5190ef          	jal	8002bd7a <putchar>
    80011dda:	cc19                	beqz	s0,80011df8 <external_interrupt_MEI+0x79a>
    80011ddc:	6080                	ld	s0,0(s1)
    80011dde:	f0001737          	lui	a4,0xf0001
    80011de2:	0712                	slli	a4,a4,0x4
    80011de4:	57fd                	li	a5,-1
    80011de6:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011dea:	178a                	slli	a5,a5,0x22
    80011dec:	8c79                	and	s0,s0,a4
    80011dee:	f0078793          	addi	a5,a5,-256
    80011df2:	943e                	add	s0,s0,a5
    80011df4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    80011df8:	814ef0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011dfc:	4511                	li	a0,4
    80011dfe:	90aef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011e02:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011e06:	6785                	lui	a5,0x1
    80011e08:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011e0c:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80011e10:	577d                	li	a4,-1
    80011e12:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    80011e16:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    80011e1a:	4509                	li	a0,2
    80011e1c:	8ecef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    80011e20:	08200593          	li	a1,130
    80011e24:	00022617          	auipc	a2,0x22
    80011e28:	e0c60613          	addi	a2,a2,-500 # 80033c30 <__func__.0+0x3f40>
    80011e2c:	0001e517          	auipc	a0,0x1e
    80011e30:	1c450513          	addi	a0,a0,452 # 8002fff0 <__func__.0+0x300>
    80011e34:	2581b0ef          	jal	8002d08c <printf>
    80011e38:	6094                	ld	a3,0(s1)
    80011e3a:	f0001737          	lui	a4,0xf0001
    80011e3e:	0712                	slli	a4,a4,0x4
    80011e40:	4785                	li	a5,1
    80011e42:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011e46:	1786                	slli	a5,a5,0x21
    80011e48:	8f75                	and	a4,a4,a3
    80011e4a:	10078793          	addi	a5,a5,256
    80011e4e:	0001e597          	auipc	a1,0x1e
    80011e52:	17a58593          	addi	a1,a1,378 # 8002ffc8 <__func__.0+0x2d8>
    80011e56:	00f71663          	bne	a4,a5,80011e62 <external_interrupt_MEI+0x804>
    80011e5a:	0001e597          	auipc	a1,0x1e
    80011e5e:	15e58593          	addi	a1,a1,350 # 8002ffb8 <__func__.0+0x2c8>
    80011e62:	0001e517          	auipc	a0,0x1e
    80011e66:	1a650513          	addi	a0,a0,422 # 80030008 <__func__.0+0x318>
    80011e6a:	2221b0ef          	jal	8002d08c <printf>
    80011e6e:	00046797          	auipc	a5,0x46
    80011e72:	1a37c783          	lbu	a5,419(a5) # 80058011 <excpt+0x1>
    80011e76:	cb81                	beqz	a5,80011e86 <external_interrupt_MEI+0x828>
    80011e78:	00046717          	auipc	a4,0x46
    80011e7c:	19c72703          	lw	a4,412(a4) # 80058014 <excpt+0x4>
    80011e80:	4789                	li	a5,2
    80011e82:	00f70c63          	beq	a4,a5,80011e9a <external_interrupt_MEI+0x83c>
    80011e86:	0001e517          	auipc	a0,0x1e
    80011e8a:	18a50513          	addi	a0,a0,394 # 80030010 <__func__.0+0x320>
    80011e8e:	1fe1b0ef          	jal	8002d08c <printf>
    80011e92:	02900513          	li	a0,41
    80011e96:	6e5190ef          	jal	8002bd7a <putchar>
    80011e9a:	4529                	li	a0,10
    80011e9c:	6df190ef          	jal	8002bd7a <putchar>
    80011ea0:	cc19                	beqz	s0,80011ebe <external_interrupt_MEI+0x860>
    80011ea2:	6080                	ld	s0,0(s1)
    80011ea4:	f0001737          	lui	a4,0xf0001
    80011ea8:	0712                	slli	a4,a4,0x4
    80011eaa:	57fd                	li	a5,-1
    80011eac:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011eb0:	1786                	slli	a5,a5,0x21
    80011eb2:	8c79                	and	s0,s0,a4
    80011eb4:	f0078793          	addi	a5,a5,-256
    80011eb8:	943e                	add	s0,s0,a5
    80011eba:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    80011ebe:	f4fee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011ec2:	4511                	li	a0,4
    80011ec4:	844ef0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011ec8:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011ecc:	6785                	lui	a5,0x1
    80011ece:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011ed2:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    80011ed6:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80011eda:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    80011ede:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    80011ee2:	4509                	li	a0,2
    80011ee4:	824ef0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80011ee8:	08200593          	li	a1,130
    80011eec:	00022617          	auipc	a2,0x22
    80011ef0:	da460613          	addi	a2,a2,-604 # 80033c90 <__func__.0+0x3fa0>
    80011ef4:	0001e517          	auipc	a0,0x1e
    80011ef8:	0fc50513          	addi	a0,a0,252 # 8002fff0 <__func__.0+0x300>
    80011efc:	1901b0ef          	jal	8002d08c <printf>
    80011f00:	00046797          	auipc	a5,0x46
    80011f04:	1117c783          	lbu	a5,273(a5) # 80058011 <excpt+0x1>
    80011f08:	0001e597          	auipc	a1,0x1e
    80011f0c:	0c058593          	addi	a1,a1,192 # 8002ffc8 <__func__.0+0x2d8>
    80011f10:	e789                	bnez	a5,80011f1a <external_interrupt_MEI+0x8bc>
    80011f12:	0001e597          	auipc	a1,0x1e
    80011f16:	0a658593          	addi	a1,a1,166 # 8002ffb8 <__func__.0+0x2c8>
    80011f1a:	0001e517          	auipc	a0,0x1e
    80011f1e:	0ee50513          	addi	a0,a0,238 # 80030008 <__func__.0+0x318>
    80011f22:	16a1b0ef          	jal	8002d08c <printf>
    80011f26:	00046797          	auipc	a5,0x46
    80011f2a:	0eb7c783          	lbu	a5,235(a5) # 80058011 <excpt+0x1>
    80011f2e:	1e079c63          	bnez	a5,80012126 <external_interrupt_MEI+0xac8>
    80011f32:	4529                	li	a0,10
    80011f34:	647190ef          	jal	8002bd7a <putchar>
    80011f38:	c419                	beqz	s0,80011f46 <external_interrupt_MEI+0x8e8>
    80011f3a:	00046417          	auipc	s0,0x46
    80011f3e:	0d744403          	lbu	s0,215(s0) # 80058011 <excpt+0x1>
    80011f42:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    80011f46:	ec7ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011f4a:	4511                	li	a0,4
    80011f4c:	fbdee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011f50:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011f54:	6785                	lui	a5,0x1
    80011f56:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011f5a:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011f5e:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    80011f62:	4509                	li	a0,2
    80011f64:	fa5ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011f68:	08200593          	li	a1,130
    80011f6c:	00022617          	auipc	a2,0x22
    80011f70:	d8460613          	addi	a2,a2,-636 # 80033cf0 <__func__.0+0x4000>
    80011f74:	0001e517          	auipc	a0,0x1e
    80011f78:	07c50513          	addi	a0,a0,124 # 8002fff0 <__func__.0+0x300>
    80011f7c:	1101b0ef          	jal	8002d08c <printf>
    80011f80:	00046797          	auipc	a5,0x46
    80011f84:	0917c783          	lbu	a5,145(a5) # 80058011 <excpt+0x1>
    80011f88:	0001e597          	auipc	a1,0x1e
    80011f8c:	04058593          	addi	a1,a1,64 # 8002ffc8 <__func__.0+0x2d8>
    80011f90:	c799                	beqz	a5,80011f9e <external_interrupt_MEI+0x940>
    80011f92:	57fd                	li	a5,-1
    80011f94:	6498                	ld	a4,8(s1)
    80011f96:	17fe                	slli	a5,a5,0x3f
    80011f98:	07ad                	addi	a5,a5,11
    80011f9a:	24f70763          	beq	a4,a5,800121e8 <external_interrupt_MEI+0xb8a>
    80011f9e:	0001e517          	auipc	a0,0x1e
    80011fa2:	06a50513          	addi	a0,a0,106 # 80030008 <__func__.0+0x318>
    80011fa6:	0e61b0ef          	jal	8002d08c <printf>
    80011faa:	00046797          	auipc	a5,0x46
    80011fae:	0677c783          	lbu	a5,103(a5) # 80058011 <excpt+0x1>
    80011fb2:	c799                	beqz	a5,80011fc0 <external_interrupt_MEI+0x962>
    80011fb4:	57fd                	li	a5,-1
    80011fb6:	6498                	ld	a4,8(s1)
    80011fb8:	17fe                	slli	a5,a5,0x3f
    80011fba:	07ad                	addi	a5,a5,11
    80011fbc:	12f70a63          	beq	a4,a5,800120f0 <external_interrupt_MEI+0xa92>
    80011fc0:	0001e517          	auipc	a0,0x1e
    80011fc4:	05050513          	addi	a0,a0,80 # 80030010 <__func__.0+0x320>
    80011fc8:	0c41b0ef          	jal	8002d08c <printf>
    80011fcc:	02900513          	li	a0,41
    80011fd0:	5ab190ef          	jal	8002bd7a <putchar>
    80011fd4:	4529                	li	a0,10
    80011fd6:	5a5190ef          	jal	8002bd7a <putchar>
    80011fda:	c419                	beqz	s0,80011fe8 <external_interrupt_MEI+0x98a>
    80011fdc:	00046797          	auipc	a5,0x46
    80011fe0:	0357c783          	lbu	a5,53(a5) # 80058011 <excpt+0x1>
    80011fe4:	4401                	li	s0,0
    80011fe6:	ebe9                	bnez	a5,800120b8 <external_interrupt_MEI+0xa5a>
        excpt.cause == CAUSE_MEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80011fe8:	e25ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80011fec:	4511                	li	a0,4
    80011fee:	f1bee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80011ff2:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011ff6:	6785                	lui	a5,0x1
    80011ff8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011ffc:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80012000:	577d                	li	a4,-1
    80012002:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1);
    80012006:	30273073          	csrc	medeleg,a4
    CSRC(CSR_MIP,MIP_MEIP);
    8001200a:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    8001200e:	4509                	li	a0,2
    80012010:	ef9ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012014:	08200593          	li	a1,130
    80012018:	00022617          	auipc	a2,0x22
    8001201c:	d3860613          	addi	a2,a2,-712 # 80033d50 <__func__.0+0x4060>
    80012020:	0001e517          	auipc	a0,0x1e
    80012024:	fd050513          	addi	a0,a0,-48 # 8002fff0 <__func__.0+0x300>
    80012028:	0641b0ef          	jal	8002d08c <printf>
    8001202c:	00046797          	auipc	a5,0x46
    80012030:	fe57c783          	lbu	a5,-27(a5) # 80058011 <excpt+0x1>
    80012034:	0001e597          	auipc	a1,0x1e
    80012038:	f9458593          	addi	a1,a1,-108 # 8002ffc8 <__func__.0+0x2d8>
    8001203c:	e789                	bnez	a5,80012046 <external_interrupt_MEI+0x9e8>
    8001203e:	0001e597          	auipc	a1,0x1e
    80012042:	f7a58593          	addi	a1,a1,-134 # 8002ffb8 <__func__.0+0x2c8>
    80012046:	0001e517          	auipc	a0,0x1e
    8001204a:	fc250513          	addi	a0,a0,-62 # 80030008 <__func__.0+0x318>
    8001204e:	03e1b0ef          	jal	8002d08c <printf>
    80012052:	00046797          	auipc	a5,0x46
    80012056:	fbf7c783          	lbu	a5,-65(a5) # 80058011 <excpt+0x1>
    8001205a:	0e079d63          	bnez	a5,80012154 <external_interrupt_MEI+0xaf6>
    8001205e:	4529                	li	a0,10
    80012060:	51b190ef          	jal	8002bd7a <putchar>
    80012064:	c411                	beqz	s0,80012070 <external_interrupt_MEI+0xa12>
    80012066:	00046797          	auipc	a5,0x46
    8001206a:	fab7c783          	lbu	a5,-85(a5) # 80058011 <excpt+0x1>
    8001206e:	cf9d                	beqz	a5,800120ac <external_interrupt_MEI+0xa4e>
    80012070:	4401                	li	s0,0
    //     excpt.cause == CAUSE_MEI &&
    //     excpt.priv == PRIV_HS
    // ); 


    TEST_END();
    80012072:	0001e597          	auipc	a1,0x1e
    80012076:	f5658593          	addi	a1,a1,-170 # 8002ffc8 <__func__.0+0x2d8>
    8001207a:	0001e517          	auipc	a0,0x1e
    8001207e:	ff650513          	addi	a0,a0,-10 # 80030070 <__func__.0+0x380>
    80012082:	00a1b0ef          	jal	8002d08c <printf>
    80012086:	4511                	li	a0,4
    80012088:	e81ee0ef          	jal	80000f08 <goto_priv>
    8001208c:	847ef0ef          	jal	800018d2 <reset_state>
}
    80012090:	60e2                	ld	ra,24(sp)
    80012092:	8522                	mv	a0,s0
    80012094:	6442                	ld	s0,16(sp)
    80012096:	64a2                	ld	s1,8(sp)
    80012098:	6105                	addi	sp,sp,32
    8001209a:	8082                	ret
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    8001209c:	6480                	ld	s0,8(s1)
    8001209e:	57ad                	li	a5,-21
    800120a0:	8385                	srli	a5,a5,0x1
    800120a2:	943e                	add	s0,s0,a5
    800120a4:	00143413          	seqz	s0,s0
    800120a8:	fd4ff06f          	j	8001187c <external_interrupt_MEI+0x21e>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    800120ac:	4405                	li	s0,1
    TEST_END();
    800120ae:	0001e597          	auipc	a1,0x1e
    800120b2:	f0a58593          	addi	a1,a1,-246 # 8002ffb8 <__func__.0+0x2c8>
    800120b6:	b7d1                	j	8001207a <external_interrupt_MEI+0xa1c>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    800120b8:	57fd                	li	a5,-1
    800120ba:	6498                	ld	a4,8(s1)
    800120bc:	17fe                	slli	a5,a5,0x3f
    800120be:	07ad                	addi	a5,a5,11
    800120c0:	f2f714e3          	bne	a4,a5,80011fe8 <external_interrupt_MEI+0x98a>
    800120c4:	00046417          	auipc	s0,0x46
    800120c8:	f5042403          	lw	s0,-176(s0) # 80058014 <excpt+0x4>
    800120cc:	1479                	addi	s0,s0,-2
    800120ce:	00143413          	seqz	s0,s0
    800120d2:	bf19                	j	80011fe8 <external_interrupt_MEI+0x98a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    800120d4:	57fd                	li	a5,-1
    800120d6:	6498                	ld	a4,8(s1)
    800120d8:	17fe                	slli	a5,a5,0x3f
    800120da:	07ad                	addi	a5,a5,11
    800120dc:	bcf719e3          	bne	a4,a5,80011cae <external_interrupt_MEI+0x650>
    800120e0:	00046417          	auipc	s0,0x46
    800120e4:	f3442403          	lw	s0,-204(s0) # 80058014 <excpt+0x4>
    800120e8:	1475                	addi	s0,s0,-3
    800120ea:	00143413          	seqz	s0,s0
    800120ee:	b6c1                	j	80011cae <external_interrupt_MEI+0x650>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    800120f0:	00046717          	auipc	a4,0x46
    800120f4:	f2472703          	lw	a4,-220(a4) # 80058014 <excpt+0x4>
    800120f8:	4789                	li	a5,2
    800120fa:	ecf713e3          	bne	a4,a5,80011fc0 <external_interrupt_MEI+0x962>
    800120fe:	bdd9                	j	80011fd4 <external_interrupt_MEI+0x976>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012100:	00046717          	auipc	a4,0x46
    80012104:	f1472703          	lw	a4,-236(a4) # 80058014 <excpt+0x4>
    80012108:	478d                	li	a5,3
    8001210a:	b6f71de3          	bne	a4,a5,80011c84 <external_interrupt_MEI+0x626>
    8001210e:	b669                	j	80011c98 <external_interrupt_MEI+0x63a>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012110:	0001e517          	auipc	a0,0x1e
    80012114:	f0050513          	addi	a0,a0,-256 # 80030010 <__func__.0+0x320>
    80012118:	7751a0ef          	jal	8002d08c <printf>
    8001211c:	02900513          	li	a0,41
    80012120:	45b190ef          	jal	8002bd7a <putchar>
    80012124:	b101                	j	80011d24 <external_interrupt_MEI+0x6c6>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80012126:	0001e517          	auipc	a0,0x1e
    8001212a:	eea50513          	addi	a0,a0,-278 # 80030010 <__func__.0+0x320>
    8001212e:	75f1a0ef          	jal	8002d08c <printf>
    80012132:	02900513          	li	a0,41
    80012136:	445190ef          	jal	8002bd7a <putchar>
    8001213a:	bbe5                	j	80011f32 <external_interrupt_MEI+0x8d4>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8001213c:	0001e517          	auipc	a0,0x1e
    80012140:	ed450513          	addi	a0,a0,-300 # 80030010 <__func__.0+0x320>
    80012144:	7491a0ef          	jal	8002d08c <printf>
    80012148:	02900513          	li	a0,41
    8001214c:	42f190ef          	jal	8002bd7a <putchar>
    80012150:	e64ff06f          	j	800117b4 <external_interrupt_MEI+0x156>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012154:	0001e517          	auipc	a0,0x1e
    80012158:	ebc50513          	addi	a0,a0,-324 # 80030010 <__func__.0+0x320>
    8001215c:	7311a0ef          	jal	8002d08c <printf>
    80012160:	02900513          	li	a0,41
    80012164:	417190ef          	jal	8002bd7a <putchar>
    80012168:	bddd                	j	8001205e <external_interrupt_MEI+0xa00>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8001216a:	0001e517          	auipc	a0,0x1e
    8001216e:	ea650513          	addi	a0,a0,-346 # 80030010 <__func__.0+0x320>
    80012172:	71b1a0ef          	jal	8002d08c <printf>
    80012176:	02900513          	li	a0,41
    8001217a:	401190ef          	jal	8002bd7a <putchar>
    8001217e:	bca5                	j	80011bf6 <external_interrupt_MEI+0x598>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    80012180:	0001e517          	auipc	a0,0x1e
    80012184:	e9050513          	addi	a0,a0,-368 # 80030010 <__func__.0+0x320>
    80012188:	7051a0ef          	jal	8002d08c <printf>
    8001218c:	02900513          	li	a0,41
    80012190:	3eb190ef          	jal	8002bd7a <putchar>
    80012194:	855ff06f          	j	800119e8 <external_interrupt_MEI+0x38a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    80012198:	0001e517          	auipc	a0,0x1e
    8001219c:	e7850513          	addi	a0,a0,-392 # 80030010 <__func__.0+0x320>
    800121a0:	6ed1a0ef          	jal	8002d08c <printf>
    800121a4:	02900513          	li	a0,41
    800121a8:	3d3190ef          	jal	8002bd7a <putchar>
    800121ac:	fbcff06f          	j	80011968 <external_interrupt_MEI+0x30a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    800121b0:	0001e517          	auipc	a0,0x1e
    800121b4:	e6050513          	addi	a0,a0,-416 # 80030010 <__func__.0+0x320>
    800121b8:	6d51a0ef          	jal	8002d08c <printf>
    800121bc:	02900513          	li	a0,41
    800121c0:	3bb190ef          	jal	8002bd7a <putchar>
    800121c4:	f24ff06f          	j	800118e8 <external_interrupt_MEI+0x28a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    800121c8:	00046717          	auipc	a4,0x46
    800121cc:	e4c72703          	lw	a4,-436(a4) # 80058014 <excpt+0x4>
    800121d0:	478d                	li	a5,3
    800121d2:	0001e597          	auipc	a1,0x1e
    800121d6:	de658593          	addi	a1,a1,-538 # 8002ffb8 <__func__.0+0x2c8>
    800121da:	a8f704e3          	beq	a4,a5,80011c62 <external_interrupt_MEI+0x604>
    800121de:	0001e597          	auipc	a1,0x1e
    800121e2:	dea58593          	addi	a1,a1,-534 # 8002ffc8 <__func__.0+0x2d8>
    800121e6:	bcb5                	j	80011c62 <external_interrupt_MEI+0x604>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    800121e8:	00046717          	auipc	a4,0x46
    800121ec:	e2c72703          	lw	a4,-468(a4) # 80058014 <excpt+0x4>
    800121f0:	4789                	li	a5,2
    800121f2:	0001e597          	auipc	a1,0x1e
    800121f6:	dc658593          	addi	a1,a1,-570 # 8002ffb8 <__func__.0+0x2c8>
    800121fa:	daf702e3          	beq	a4,a5,80011f9e <external_interrupt_MEI+0x940>
    800121fe:	0001e597          	auipc	a1,0x1e
    80012202:	dca58593          	addi	a1,a1,-566 # 8002ffc8 <__func__.0+0x2d8>
    80012206:	bb61                	j	80011f9e <external_interrupt_MEI+0x940>

0000000080012208 <external_interrupt_SEI>:


bool external_interrupt_SEI() {
    80012208:	1101                	addi	sp,sp,-32

    TEST_START();
    8001220a:	0001c597          	auipc	a1,0x1c
    8001220e:	4a658593          	addi	a1,a1,1190 # 8002e6b0 <__func__.1>
    80012212:	0001e517          	auipc	a0,0x1e
    80012216:	dc650513          	addi	a0,a0,-570 # 8002ffd8 <__func__.0+0x2e8>
bool external_interrupt_SEI() {
    8001221a:	ec06                	sd	ra,24(sp)
    8001221c:	e822                	sd	s0,16(sp)
    8001221e:	e426                	sd	s1,8(sp)
    TEST_START();
    80012220:	66d1a0ef          	jal	8002d08c <printf>
    80012224:	4529                	li	a0,10
    80012226:	355190ef          	jal	8002bd7a <putchar>

    TEST_SETUP_EXCEPT();
    8001222a:	be3ee0ef          	jal	80000e0c <test_setup_except_function>

   
    //HS模式下产生单bit外部中断，sstatus.sie=1，且mip，sie对应的SEIP、SEIE拉高
    goto_priv(PRIV_HS);
    8001222e:	450d                	li	a0,3
    80012230:	cd9ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     //sie位
    80012234:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    80012238:	20000793          	li	a5,512
    8001223c:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80012240:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    80012244:	450d                	li	a0,3
    80012246:	cc3ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001224a:	08200593          	li	a1,130
    8001224e:	00022617          	auipc	a2,0x22
    80012252:	b6260613          	addi	a2,a2,-1182 # 80033db0 <__func__.0+0x40c0>
    80012256:	0001e517          	auipc	a0,0x1e
    8001225a:	d9a50513          	addi	a0,a0,-614 # 8002fff0 <__func__.0+0x300>
    8001225e:	62f1a0ef          	jal	8002d08c <printf>
    80012262:	00046797          	auipc	a5,0x46
    80012266:	daf7c783          	lbu	a5,-593(a5) # 80058011 <excpt+0x1>
    8001226a:	00046497          	auipc	s1,0x46
    8001226e:	da648493          	addi	s1,s1,-602 # 80058010 <excpt>
    80012272:	0001e597          	auipc	a1,0x1e
    80012276:	d5658593          	addi	a1,a1,-682 # 8002ffc8 <__func__.0+0x2d8>
    8001227a:	c799                	beqz	a5,80012288 <external_interrupt_SEI+0x80>
    8001227c:	57fd                	li	a5,-1
    8001227e:	6498                	ld	a4,8(s1)
    80012280:	17fe                	slli	a5,a5,0x3f
    80012282:	07a5                	addi	a5,a5,9
    80012284:	74f70763          	beq	a4,a5,800129d2 <external_interrupt_SEI+0x7ca>
    80012288:	0001e517          	auipc	a0,0x1e
    8001228c:	d8050513          	addi	a0,a0,-640 # 80030008 <__func__.0+0x318>
    80012290:	5fd1a0ef          	jal	8002d08c <printf>
    80012294:	00046797          	auipc	a5,0x46
    80012298:	d7d7c783          	lbu	a5,-643(a5) # 80058011 <excpt+0x1>
    8001229c:	c799                	beqz	a5,800122aa <external_interrupt_SEI+0xa2>
    8001229e:	57fd                	li	a5,-1
    800122a0:	6498                	ld	a4,8(s1)
    800122a2:	17fe                	slli	a5,a5,0x3f
    800122a4:	07a5                	addi	a5,a5,9
    800122a6:	5ef70f63          	beq	a4,a5,800128a4 <external_interrupt_SEI+0x69c>
    800122aa:	0001e517          	auipc	a0,0x1e
    800122ae:	d6650513          	addi	a0,a0,-666 # 80030010 <__func__.0+0x320>
    800122b2:	5db1a0ef          	jal	8002d08c <printf>
    800122b6:	02900513          	li	a0,41
    800122ba:	2c1190ef          	jal	8002bd7a <putchar>
    800122be:	4529                	li	a0,10
    800122c0:	2bb190ef          	jal	8002bd7a <putchar>
    800122c4:	00046797          	auipc	a5,0x46
    800122c8:	d4d7c783          	lbu	a5,-691(a5) # 80058011 <excpt+0x1>
    800122cc:	4401                	li	s0,0
    800122ce:	c799                	beqz	a5,800122dc <external_interrupt_SEI+0xd4>
    800122d0:	57fd                	li	a5,-1
    800122d2:	6498                	ld	a4,8(s1)
    800122d4:	17fe                	slli	a5,a5,0x3f
    800122d6:	07a5                	addi	a5,a5,9
    800122d8:	6af70563          	beq	a4,a5,80012982 <external_interrupt_SEI+0x77a>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=1，sie.SEIE=0
    TEST_SETUP_EXCEPT();
    800122dc:	b31ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_HS);
    800122e0:	450d                	li	a0,3
    800122e2:	c27ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800122e6:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800122ea:	20000793          	li	a5,512
    800122ee:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    800122f2:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    800122f6:	450d                	li	a0,3
    800122f8:	c11ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800122fc:	08200593          	li	a1,130
    80012300:	00022617          	auipc	a2,0x22
    80012304:	b1060613          	addi	a2,a2,-1264 # 80033e10 <__func__.0+0x4120>
    80012308:	0001e517          	auipc	a0,0x1e
    8001230c:	ce850513          	addi	a0,a0,-792 # 8002fff0 <__func__.0+0x300>
    80012310:	57d1a0ef          	jal	8002d08c <printf>
    80012314:	00046797          	auipc	a5,0x46
    80012318:	cfd7c783          	lbu	a5,-771(a5) # 80058011 <excpt+0x1>
    8001231c:	0001e597          	auipc	a1,0x1e
    80012320:	cac58593          	addi	a1,a1,-852 # 8002ffc8 <__func__.0+0x2d8>
    80012324:	e789                	bnez	a5,8001232e <external_interrupt_SEI+0x126>
    80012326:	0001e597          	auipc	a1,0x1e
    8001232a:	c9258593          	addi	a1,a1,-878 # 8002ffb8 <__func__.0+0x2c8>
    8001232e:	0001e517          	auipc	a0,0x1e
    80012332:	cda50513          	addi	a0,a0,-806 # 80030008 <__func__.0+0x318>
    80012336:	5571a0ef          	jal	8002d08c <printf>
    8001233a:	00046797          	auipc	a5,0x46
    8001233e:	cd77c783          	lbu	a5,-809(a5) # 80058011 <excpt+0x1>
    80012342:	5a079f63          	bnez	a5,80012900 <external_interrupt_SEI+0x6f8>
    80012346:	4529                	li	a0,10
    80012348:	233190ef          	jal	8002bd7a <putchar>
    8001234c:	c419                	beqz	s0,8001235a <external_interrupt_SEI+0x152>
    8001234e:	00046417          	auipc	s0,0x46
    80012352:	cc344403          	lbu	s0,-829(s0) # 80058011 <excpt+0x1>
    80012356:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=0，sie.SEIE=1
    TEST_SETUP_EXCEPT();
    8001235a:	ab3ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001235e:	4511                	li	a0,4
    80012360:	ba9ee0ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    80012364:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012368:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8001236c:	20000793          	li	a5,512
    80012370:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012374:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    80012378:	450d                	li	a0,3
    8001237a:	b8fee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001237e:	08200593          	li	a1,130
    80012382:	00022617          	auipc	a2,0x22
    80012386:	ade60613          	addi	a2,a2,-1314 # 80033e60 <__func__.0+0x4170>
    8001238a:	0001e517          	auipc	a0,0x1e
    8001238e:	c6650513          	addi	a0,a0,-922 # 8002fff0 <__func__.0+0x300>
    80012392:	4fb1a0ef          	jal	8002d08c <printf>
    80012396:	00046797          	auipc	a5,0x46
    8001239a:	c7b7c783          	lbu	a5,-901(a5) # 80058011 <excpt+0x1>
    8001239e:	0001e597          	auipc	a1,0x1e
    800123a2:	c2a58593          	addi	a1,a1,-982 # 8002ffc8 <__func__.0+0x2d8>
    800123a6:	c799                	beqz	a5,800123b4 <external_interrupt_SEI+0x1ac>
    800123a8:	57fd                	li	a5,-1
    800123aa:	6498                	ld	a4,8(s1)
    800123ac:	17fe                	slli	a5,a5,0x3f
    800123ae:	07a5                	addi	a5,a5,9
    800123b0:	5ef70163          	beq	a4,a5,80012992 <external_interrupt_SEI+0x78a>
    800123b4:	0001e517          	auipc	a0,0x1e
    800123b8:	c5450513          	addi	a0,a0,-940 # 80030008 <__func__.0+0x318>
    800123bc:	4d11a0ef          	jal	8002d08c <printf>
    800123c0:	00046797          	auipc	a5,0x46
    800123c4:	c517c783          	lbu	a5,-943(a5) # 80058011 <excpt+0x1>
    800123c8:	c799                	beqz	a5,800123d6 <external_interrupt_SEI+0x1ce>
    800123ca:	57fd                	li	a5,-1
    800123cc:	6498                	ld	a4,8(s1)
    800123ce:	17fe                	slli	a5,a5,0x3f
    800123d0:	07a5                	addi	a5,a5,9
    800123d2:	4cf70163          	beq	a4,a5,80012894 <external_interrupt_SEI+0x68c>
    800123d6:	0001e517          	auipc	a0,0x1e
    800123da:	c3a50513          	addi	a0,a0,-966 # 80030010 <__func__.0+0x320>
    800123de:	4af1a0ef          	jal	8002d08c <printf>
    800123e2:	02900513          	li	a0,41
    800123e6:	195190ef          	jal	8002bd7a <putchar>
    800123ea:	4529                	li	a0,10
    800123ec:	18f190ef          	jal	8002bd7a <putchar>
    800123f0:	c801                	beqz	s0,80012400 <external_interrupt_SEI+0x1f8>
    800123f2:	00046797          	auipc	a5,0x46
    800123f6:	c1f7c783          	lbu	a5,-993(a5) # 80058011 <excpt+0x1>
    800123fa:	4401                	li	s0,0
    800123fc:	46079663          	bnez	a5,80012868 <external_interrupt_SEI+0x660>
    //     excpt.priv == PRIV_HS
    // ); 
    

    //HS模式下产生单bit外部中断，sstatus.mie=1，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    80012400:	a0dee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012404:	4511                	li	a0,4
    80012406:	b03ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1)     
    8001240a:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8001240e:	20000793          	li	a5,512
    80012412:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012416:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    8001241a:	450d                	li	a0,3
    8001241c:	aedee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    80012420:	08200593          	li	a1,130
    80012424:	00022617          	auipc	a2,0x22
    80012428:	a9c60613          	addi	a2,a2,-1380 # 80033ec0 <__func__.0+0x41d0>
    8001242c:	0001e517          	auipc	a0,0x1e
    80012430:	bc450513          	addi	a0,a0,-1084 # 8002fff0 <__func__.0+0x300>
    80012434:	4591a0ef          	jal	8002d08c <printf>
    80012438:	00046797          	auipc	a5,0x46
    8001243c:	bd97c783          	lbu	a5,-1063(a5) # 80058011 <excpt+0x1>
    80012440:	0001e597          	auipc	a1,0x1e
    80012444:	b8858593          	addi	a1,a1,-1144 # 8002ffc8 <__func__.0+0x2d8>
    80012448:	e789                	bnez	a5,80012452 <external_interrupt_SEI+0x24a>
    8001244a:	0001e597          	auipc	a1,0x1e
    8001244e:	b6e58593          	addi	a1,a1,-1170 # 8002ffb8 <__func__.0+0x2c8>
    80012452:	0001e517          	auipc	a0,0x1e
    80012456:	bb650513          	addi	a0,a0,-1098 # 80030008 <__func__.0+0x318>
    8001245a:	4331a0ef          	jal	8002d08c <printf>
    8001245e:	00046797          	auipc	a5,0x46
    80012462:	bb37c783          	lbu	a5,-1101(a5) # 80058011 <excpt+0x1>
    80012466:	48079263          	bnez	a5,800128ea <external_interrupt_SEI+0x6e2>
    8001246a:	4529                	li	a0,10
    8001246c:	10f190ef          	jal	8002bd7a <putchar>
    80012470:	c419                	beqz	s0,8001247e <external_interrupt_SEI+0x276>
    80012472:	00046417          	auipc	s0,0x46
    80012476:	b9f44403          	lbu	s0,-1121(s0) # 80058011 <excpt+0x1>
    8001247a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //HS模式下产生单bit外部中断，sstatus.sie=0，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    8001247e:	98fee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012482:	4511                	li	a0,4
    80012484:	a85ee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1)     
    80012488:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8001248c:	20000793          	li	a5,512
    80012490:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012494:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    80012498:	450d                	li	a0,3
    8001249a:	a6fee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    8001249e:	08200593          	li	a1,130
    800124a2:	00022617          	auipc	a2,0x22
    800124a6:	a6e60613          	addi	a2,a2,-1426 # 80033f10 <__func__.0+0x4220>
    800124aa:	0001e517          	auipc	a0,0x1e
    800124ae:	b4650513          	addi	a0,a0,-1210 # 8002fff0 <__func__.0+0x300>
    800124b2:	3db1a0ef          	jal	8002d08c <printf>
    800124b6:	00046797          	auipc	a5,0x46
    800124ba:	b5b7c783          	lbu	a5,-1189(a5) # 80058011 <excpt+0x1>
    800124be:	0001e597          	auipc	a1,0x1e
    800124c2:	b0a58593          	addi	a1,a1,-1270 # 8002ffc8 <__func__.0+0x2d8>
    800124c6:	e789                	bnez	a5,800124d0 <external_interrupt_SEI+0x2c8>
    800124c8:	0001e597          	auipc	a1,0x1e
    800124cc:	af058593          	addi	a1,a1,-1296 # 8002ffb8 <__func__.0+0x2c8>
    800124d0:	0001e517          	auipc	a0,0x1e
    800124d4:	b3850513          	addi	a0,a0,-1224 # 80030008 <__func__.0+0x318>
    800124d8:	3b51a0ef          	jal	8002d08c <printf>
    800124dc:	00046797          	auipc	a5,0x46
    800124e0:	b357c783          	lbu	a5,-1227(a5) # 80058011 <excpt+0x1>
    800124e4:	3e079863          	bnez	a5,800128d4 <external_interrupt_SEI+0x6cc>
    800124e8:	4529                	li	a0,10
    800124ea:	091190ef          	jal	8002bd7a <putchar>
    800124ee:	c419                	beqz	s0,800124fc <external_interrupt_SEI+0x2f4>
    800124f0:	00046417          	auipc	s0,0x46
    800124f4:	b2144403          	lbu	s0,-1247(s0) # 80058011 <excpt+0x1>
    800124f8:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //VS模式下产生单bit外部中断，sstatus.sie=1，且sip，sie对应的SEIP、SEIE拉高
    TEST_SETUP_EXCEPT();
    800124fc:	911ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012500:	4511                	li	a0,4
    80012502:	a07ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012506:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8001250a:	20000793          	li	a5,512
    8001250e:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80012512:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    80012516:	4509                	li	a0,2
    80012518:	9f1ee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001251c:	08200593          	li	a1,130
    80012520:	00022617          	auipc	a2,0x22
    80012524:	a4060613          	addi	a2,a2,-1472 # 80033f60 <__func__.0+0x4270>
    80012528:	0001e517          	auipc	a0,0x1e
    8001252c:	ac850513          	addi	a0,a0,-1336 # 8002fff0 <__func__.0+0x300>
    80012530:	35d1a0ef          	jal	8002d08c <printf>
    80012534:	00046797          	auipc	a5,0x46
    80012538:	add7c783          	lbu	a5,-1315(a5) # 80058011 <excpt+0x1>
    8001253c:	0001e597          	auipc	a1,0x1e
    80012540:	a8c58593          	addi	a1,a1,-1396 # 8002ffc8 <__func__.0+0x2d8>
    80012544:	c799                	beqz	a5,80012552 <external_interrupt_SEI+0x34a>
    80012546:	57fd                	li	a5,-1
    80012548:	6498                	ld	a4,8(s1)
    8001254a:	17fe                	slli	a5,a5,0x3f
    8001254c:	07a5                	addi	a5,a5,9
    8001254e:	40f70a63          	beq	a4,a5,80012962 <external_interrupt_SEI+0x75a>
    80012552:	0001e517          	auipc	a0,0x1e
    80012556:	ab650513          	addi	a0,a0,-1354 # 80030008 <__func__.0+0x318>
    8001255a:	3331a0ef          	jal	8002d08c <printf>
    8001255e:	00046797          	auipc	a5,0x46
    80012562:	ab37c783          	lbu	a5,-1357(a5) # 80058011 <excpt+0x1>
    80012566:	c799                	beqz	a5,80012574 <external_interrupt_SEI+0x36c>
    80012568:	57fd                	li	a5,-1
    8001256a:	6498                	ld	a4,8(s1)
    8001256c:	17fe                	slli	a5,a5,0x3f
    8001256e:	07a5                	addi	a5,a5,9
    80012570:	30f70a63          	beq	a4,a5,80012884 <external_interrupt_SEI+0x67c>
    80012574:	0001e517          	auipc	a0,0x1e
    80012578:	a9c50513          	addi	a0,a0,-1380 # 80030010 <__func__.0+0x320>
    8001257c:	3111a0ef          	jal	8002d08c <printf>
    80012580:	02900513          	li	a0,41
    80012584:	7f6190ef          	jal	8002bd7a <putchar>
    80012588:	4529                	li	a0,10
    8001258a:	7f0190ef          	jal	8002bd7a <putchar>
    8001258e:	c801                	beqz	s0,8001259e <external_interrupt_SEI+0x396>
    80012590:	00046797          	auipc	a5,0x46
    80012594:	a817c783          	lbu	a5,-1407(a5) # 80058011 <excpt+0x1>
    80012598:	4401                	li	s0,0
    8001259a:	2a079963          	bnez	a5,8001284c <external_interrupt_SEI+0x644>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=1，sie=0
    TEST_SETUP_EXCEPT();
    8001259e:	86fee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800125a2:	4511                	li	a0,4
    800125a4:	965ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800125a8:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800125ac:	20000793          	li	a5,512
    800125b0:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    800125b4:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    800125b8:	4509                	li	a0,2
    800125ba:	94fee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800125be:	08200593          	li	a1,130
    800125c2:	00022617          	auipc	a2,0x22
    800125c6:	9f660613          	addi	a2,a2,-1546 # 80033fb8 <__func__.0+0x42c8>
    800125ca:	0001e517          	auipc	a0,0x1e
    800125ce:	a2650513          	addi	a0,a0,-1498 # 8002fff0 <__func__.0+0x300>
    800125d2:	2bb1a0ef          	jal	8002d08c <printf>
    800125d6:	00046797          	auipc	a5,0x46
    800125da:	a3b7c783          	lbu	a5,-1477(a5) # 80058011 <excpt+0x1>
    800125de:	0001e597          	auipc	a1,0x1e
    800125e2:	9ea58593          	addi	a1,a1,-1558 # 8002ffc8 <__func__.0+0x2d8>
    800125e6:	c799                	beqz	a5,800125f4 <external_interrupt_SEI+0x3ec>
    800125e8:	57fd                	li	a5,-1
    800125ea:	6498                	ld	a4,8(s1)
    800125ec:	17fe                	slli	a5,a5,0x3f
    800125ee:	07a5                	addi	a5,a5,9
    800125f0:	34f70963          	beq	a4,a5,80012942 <external_interrupt_SEI+0x73a>
    800125f4:	0001e517          	auipc	a0,0x1e
    800125f8:	a1450513          	addi	a0,a0,-1516 # 80030008 <__func__.0+0x318>
    800125fc:	2911a0ef          	jal	8002d08c <printf>
    80012600:	00046797          	auipc	a5,0x46
    80012604:	a117c783          	lbu	a5,-1519(a5) # 80058011 <excpt+0x1>
    80012608:	c799                	beqz	a5,80012616 <external_interrupt_SEI+0x40e>
    8001260a:	57fd                	li	a5,-1
    8001260c:	6498                	ld	a4,8(s1)
    8001260e:	17fe                	slli	a5,a5,0x3f
    80012610:	07a5                	addi	a5,a5,9
    80012612:	2af70963          	beq	a4,a5,800128c4 <external_interrupt_SEI+0x6bc>
    80012616:	0001e517          	auipc	a0,0x1e
    8001261a:	9fa50513          	addi	a0,a0,-1542 # 80030010 <__func__.0+0x320>
    8001261e:	26f1a0ef          	jal	8002d08c <printf>
    80012622:	02900513          	li	a0,41
    80012626:	754190ef          	jal	8002bd7a <putchar>
    8001262a:	4529                	li	a0,10
    8001262c:	74e190ef          	jal	8002bd7a <putchar>
    80012630:	c801                	beqz	s0,80012640 <external_interrupt_SEI+0x438>
    80012632:	00046797          	auipc	a5,0x46
    80012636:	9df7c783          	lbu	a5,-1569(a5) # 80058011 <excpt+0x1>
    8001263a:	4401                	li	s0,0
    8001263c:	1e079a63          	bnez	a5,80012830 <external_interrupt_SEI+0x628>
        excpt.cause == CAUSE_SEI &&
        excpt.priv == PRIV_M
    ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=1
    TEST_SETUP_EXCEPT();
    80012640:	fccee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012644:	4511                	li	a0,4
    80012646:	8c3ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8001264a:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8001264e:	20000793          	li	a5,512
    80012652:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012656:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8001265a:	4509                	li	a0,2
    8001265c:	8adee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012660:	08200593          	li	a1,130
    80012664:	00022617          	auipc	a2,0x22
    80012668:	9ac60613          	addi	a2,a2,-1620 # 80034010 <__func__.0+0x4320>
    8001266c:	0001e517          	auipc	a0,0x1e
    80012670:	98450513          	addi	a0,a0,-1660 # 8002fff0 <__func__.0+0x300>
    80012674:	2191a0ef          	jal	8002d08c <printf>
    80012678:	00046797          	auipc	a5,0x46
    8001267c:	9997c783          	lbu	a5,-1639(a5) # 80058011 <excpt+0x1>
    80012680:	0001e597          	auipc	a1,0x1e
    80012684:	94858593          	addi	a1,a1,-1720 # 8002ffc8 <__func__.0+0x2d8>
    80012688:	c799                	beqz	a5,80012696 <external_interrupt_SEI+0x48e>
    8001268a:	57fd                	li	a5,-1
    8001268c:	6498                	ld	a4,8(s1)
    8001268e:	17fe                	slli	a5,a5,0x3f
    80012690:	07a5                	addi	a5,a5,9
    80012692:	32f70063          	beq	a4,a5,800129b2 <external_interrupt_SEI+0x7aa>
    80012696:	0001e517          	auipc	a0,0x1e
    8001269a:	97250513          	addi	a0,a0,-1678 # 80030008 <__func__.0+0x318>
    8001269e:	1ef1a0ef          	jal	8002d08c <printf>
    800126a2:	00046797          	auipc	a5,0x46
    800126a6:	96f7c783          	lbu	a5,-1681(a5) # 80058011 <excpt+0x1>
    800126aa:	c799                	beqz	a5,800126b8 <external_interrupt_SEI+0x4b0>
    800126ac:	57fd                	li	a5,-1
    800126ae:	6498                	ld	a4,8(s1)
    800126b0:	17fe                	slli	a5,a5,0x3f
    800126b2:	07a5                	addi	a5,a5,9
    800126b4:	20f70063          	beq	a4,a5,800128b4 <external_interrupt_SEI+0x6ac>
    800126b8:	0001e517          	auipc	a0,0x1e
    800126bc:	95850513          	addi	a0,a0,-1704 # 80030010 <__func__.0+0x320>
    800126c0:	1cd1a0ef          	jal	8002d08c <printf>
    800126c4:	02900513          	li	a0,41
    800126c8:	6b2190ef          	jal	8002bd7a <putchar>
    800126cc:	4529                	li	a0,10
    800126ce:	6ac190ef          	jal	8002bd7a <putchar>
    800126d2:	c801                	beqz	s0,800126e2 <external_interrupt_SEI+0x4da>
    800126d4:	00046797          	auipc	a5,0x46
    800126d8:	93d7c783          	lbu	a5,-1731(a5) # 80058011 <excpt+0x1>
    800126dc:	4401                	li	s0,0
    800126de:	12079b63          	bnez	a5,80012814 <external_interrupt_SEI+0x60c>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    800126e2:	f2aee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800126e6:	4511                	li	a0,4
    800126e8:	821ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800126ec:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800126f0:	20000793          	li	a5,512
    800126f4:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800126f8:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    800126fc:	4509                	li	a0,2
    800126fe:	80bee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80012702:	08200593          	li	a1,130
    80012706:	00022617          	auipc	a2,0x22
    8001270a:	96260613          	addi	a2,a2,-1694 # 80034068 <__func__.0+0x4378>
    8001270e:	0001e517          	auipc	a0,0x1e
    80012712:	8e250513          	addi	a0,a0,-1822 # 8002fff0 <__func__.0+0x300>
    80012716:	1771a0ef          	jal	8002d08c <printf>
    8001271a:	00046797          	auipc	a5,0x46
    8001271e:	8f77c783          	lbu	a5,-1801(a5) # 80058011 <excpt+0x1>
    80012722:	0001e597          	auipc	a1,0x1e
    80012726:	8a658593          	addi	a1,a1,-1882 # 8002ffc8 <__func__.0+0x2d8>
    8001272a:	e789                	bnez	a5,80012734 <external_interrupt_SEI+0x52c>
    8001272c:	0001e597          	auipc	a1,0x1e
    80012730:	88c58593          	addi	a1,a1,-1908 # 8002ffb8 <__func__.0+0x2c8>
    80012734:	0001e517          	auipc	a0,0x1e
    80012738:	8d450513          	addi	a0,a0,-1836 # 80030008 <__func__.0+0x318>
    8001273c:	1511a0ef          	jal	8002d08c <printf>
    80012740:	00046797          	auipc	a5,0x46
    80012744:	8d17c783          	lbu	a5,-1839(a5) # 80058011 <excpt+0x1>
    80012748:	1e079263          	bnez	a5,8001292c <external_interrupt_SEI+0x724>
    8001274c:	4529                	li	a0,10
    8001274e:	62c190ef          	jal	8002bd7a <putchar>
    80012752:	c419                	beqz	s0,80012760 <external_interrupt_SEI+0x558>
    80012754:	00046417          	auipc	s0,0x46
    80012758:	8bd44403          	lbu	s0,-1859(s0) # 80058011 <excpt+0x1>
    8001275c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=0，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    80012760:	eacee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012764:	4511                	li	a0,4
    80012766:	fa2ee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1);     
    8001276a:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8001276e:	20000793          	li	a5,512
    80012772:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012776:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8001277a:	4509                	li	a0,2
    8001277c:	f8cee0ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80012780:	08200593          	li	a1,130
    80012784:	00022617          	auipc	a2,0x22
    80012788:	8e460613          	addi	a2,a2,-1820 # 80034068 <__func__.0+0x4378>
    8001278c:	0001e517          	auipc	a0,0x1e
    80012790:	86450513          	addi	a0,a0,-1948 # 8002fff0 <__func__.0+0x300>
    80012794:	0f91a0ef          	jal	8002d08c <printf>
    80012798:	00046797          	auipc	a5,0x46
    8001279c:	8797c783          	lbu	a5,-1927(a5) # 80058011 <excpt+0x1>
    800127a0:	0001e597          	auipc	a1,0x1e
    800127a4:	82858593          	addi	a1,a1,-2008 # 8002ffc8 <__func__.0+0x2d8>
    800127a8:	e789                	bnez	a5,800127b2 <external_interrupt_SEI+0x5aa>
    800127aa:	0001e597          	auipc	a1,0x1e
    800127ae:	80e58593          	addi	a1,a1,-2034 # 8002ffb8 <__func__.0+0x2c8>
    800127b2:	0001e517          	auipc	a0,0x1e
    800127b6:	85650513          	addi	a0,a0,-1962 # 80030008 <__func__.0+0x318>
    800127ba:	0d31a0ef          	jal	8002d08c <printf>
    800127be:	00046797          	auipc	a5,0x46
    800127c2:	8537c783          	lbu	a5,-1965(a5) # 80058011 <excpt+0x1>
    800127c6:	14079863          	bnez	a5,80012916 <external_interrupt_SEI+0x70e>
    800127ca:	4529                	li	a0,10
    800127cc:	5ae190ef          	jal	8002bd7a <putchar>
    800127d0:	c411                	beqz	s0,800127dc <external_interrupt_SEI+0x5d4>
    800127d2:	00046797          	auipc	a5,0x46
    800127d6:	83f7c783          	lbu	a5,-1985(a5) # 80058011 <excpt+0x1>
    800127da:	c79d                	beqz	a5,80012808 <external_interrupt_SEI+0x600>
    800127dc:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    800127de:	0001d597          	auipc	a1,0x1d
    800127e2:	7ea58593          	addi	a1,a1,2026 # 8002ffc8 <__func__.0+0x2d8>
    800127e6:	0001e517          	auipc	a0,0x1e
    800127ea:	88a50513          	addi	a0,a0,-1910 # 80030070 <__func__.0+0x380>
    800127ee:	09f1a0ef          	jal	8002d08c <printf>
    800127f2:	4511                	li	a0,4
    800127f4:	f14ee0ef          	jal	80000f08 <goto_priv>
    800127f8:	8daef0ef          	jal	800018d2 <reset_state>
}
    800127fc:	60e2                	ld	ra,24(sp)
    800127fe:	8522                	mv	a0,s0
    80012800:	6442                	ld	s0,16(sp)
    80012802:	64a2                	ld	s1,8(sp)
    80012804:	6105                	addi	sp,sp,32
    80012806:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80012808:	4405                	li	s0,1
    TEST_END();
    8001280a:	0001d597          	auipc	a1,0x1d
    8001280e:	7ae58593          	addi	a1,a1,1966 # 8002ffb8 <__func__.0+0x2c8>
    80012812:	bfd1                	j	800127e6 <external_interrupt_SEI+0x5de>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012814:	57fd                	li	a5,-1
    80012816:	6498                	ld	a4,8(s1)
    80012818:	17fe                	slli	a5,a5,0x3f
    8001281a:	07a5                	addi	a5,a5,9
    8001281c:	ecf713e3          	bne	a4,a5,800126e2 <external_interrupt_SEI+0x4da>
    80012820:	00045417          	auipc	s0,0x45
    80012824:	7f442403          	lw	s0,2036(s0) # 80058014 <excpt+0x4>
    80012828:	1471                	addi	s0,s0,-4
    8001282a:	00143413          	seqz	s0,s0
    8001282e:	bd55                	j	800126e2 <external_interrupt_SEI+0x4da>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012830:	57fd                	li	a5,-1
    80012832:	6498                	ld	a4,8(s1)
    80012834:	17fe                	slli	a5,a5,0x3f
    80012836:	07a5                	addi	a5,a5,9
    80012838:	e0f714e3          	bne	a4,a5,80012640 <external_interrupt_SEI+0x438>
    8001283c:	00045417          	auipc	s0,0x45
    80012840:	7d842403          	lw	s0,2008(s0) # 80058014 <excpt+0x4>
    80012844:	1471                	addi	s0,s0,-4
    80012846:	00143413          	seqz	s0,s0
    8001284a:	bbdd                	j	80012640 <external_interrupt_SEI+0x438>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001284c:	57fd                	li	a5,-1
    8001284e:	6498                	ld	a4,8(s1)
    80012850:	17fe                	slli	a5,a5,0x3f
    80012852:	07a5                	addi	a5,a5,9
    80012854:	d4f715e3          	bne	a4,a5,8001259e <external_interrupt_SEI+0x396>
    80012858:	00045417          	auipc	s0,0x45
    8001285c:	7bc42403          	lw	s0,1980(s0) # 80058014 <excpt+0x4>
    80012860:	1471                	addi	s0,s0,-4
    80012862:	00143413          	seqz	s0,s0
    80012866:	bb25                	j	8001259e <external_interrupt_SEI+0x396>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012868:	57fd                	li	a5,-1
    8001286a:	6498                	ld	a4,8(s1)
    8001286c:	17fe                	slli	a5,a5,0x3f
    8001286e:	07a5                	addi	a5,a5,9
    80012870:	b8f718e3          	bne	a4,a5,80012400 <external_interrupt_SEI+0x1f8>
    80012874:	00045417          	auipc	s0,0x45
    80012878:	7a042403          	lw	s0,1952(s0) # 80058014 <excpt+0x4>
    8001287c:	1471                	addi	s0,s0,-4
    8001287e:	00143413          	seqz	s0,s0
    80012882:	bebd                	j	80012400 <external_interrupt_SEI+0x1f8>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80012884:	00045717          	auipc	a4,0x45
    80012888:	79072703          	lw	a4,1936(a4) # 80058014 <excpt+0x4>
    8001288c:	4791                	li	a5,4
    8001288e:	cef713e3          	bne	a4,a5,80012574 <external_interrupt_SEI+0x36c>
    80012892:	b9dd                	j	80012588 <external_interrupt_SEI+0x380>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012894:	00045717          	auipc	a4,0x45
    80012898:	78072703          	lw	a4,1920(a4) # 80058014 <excpt+0x4>
    8001289c:	4791                	li	a5,4
    8001289e:	b2f71ce3          	bne	a4,a5,800123d6 <external_interrupt_SEI+0x1ce>
    800128a2:	b6a1                	j	800123ea <external_interrupt_SEI+0x1e2>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800128a4:	00045717          	auipc	a4,0x45
    800128a8:	77072703          	lw	a4,1904(a4) # 80058014 <excpt+0x4>
    800128ac:	4791                	li	a5,4
    800128ae:	9ef71ee3          	bne	a4,a5,800122aa <external_interrupt_SEI+0xa2>
    800128b2:	b431                	j	800122be <external_interrupt_SEI+0xb6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800128b4:	00045717          	auipc	a4,0x45
    800128b8:	76072703          	lw	a4,1888(a4) # 80058014 <excpt+0x4>
    800128bc:	4791                	li	a5,4
    800128be:	def71de3          	bne	a4,a5,800126b8 <external_interrupt_SEI+0x4b0>
    800128c2:	b529                	j	800126cc <external_interrupt_SEI+0x4c4>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800128c4:	00045717          	auipc	a4,0x45
    800128c8:	75072703          	lw	a4,1872(a4) # 80058014 <excpt+0x4>
    800128cc:	4791                	li	a5,4
    800128ce:	d4f714e3          	bne	a4,a5,80012616 <external_interrupt_SEI+0x40e>
    800128d2:	bba1                	j	8001262a <external_interrupt_SEI+0x422>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    800128d4:	0001d517          	auipc	a0,0x1d
    800128d8:	73c50513          	addi	a0,a0,1852 # 80030010 <__func__.0+0x320>
    800128dc:	7b01a0ef          	jal	8002d08c <printf>
    800128e0:	02900513          	li	a0,41
    800128e4:	496190ef          	jal	8002bd7a <putchar>
    800128e8:	b101                	j	800124e8 <external_interrupt_SEI+0x2e0>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    800128ea:	0001d517          	auipc	a0,0x1d
    800128ee:	72650513          	addi	a0,a0,1830 # 80030010 <__func__.0+0x320>
    800128f2:	79a1a0ef          	jal	8002d08c <printf>
    800128f6:	02900513          	li	a0,41
    800128fa:	480190ef          	jal	8002bd7a <putchar>
    800128fe:	b6b5                	j	8001246a <external_interrupt_SEI+0x262>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012900:	0001d517          	auipc	a0,0x1d
    80012904:	71050513          	addi	a0,a0,1808 # 80030010 <__func__.0+0x320>
    80012908:	7841a0ef          	jal	8002d08c <printf>
    8001290c:	02900513          	li	a0,41
    80012910:	46a190ef          	jal	8002bd7a <putchar>
    80012914:	bc0d                	j	80012346 <external_interrupt_SEI+0x13e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80012916:	0001d517          	auipc	a0,0x1d
    8001291a:	6fa50513          	addi	a0,a0,1786 # 80030010 <__func__.0+0x320>
    8001291e:	76e1a0ef          	jal	8002d08c <printf>
    80012922:	02900513          	li	a0,41
    80012926:	454190ef          	jal	8002bd7a <putchar>
    8001292a:	b545                	j	800127ca <external_interrupt_SEI+0x5c2>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8001292c:	0001d517          	auipc	a0,0x1d
    80012930:	6e450513          	addi	a0,a0,1764 # 80030010 <__func__.0+0x320>
    80012934:	7581a0ef          	jal	8002d08c <printf>
    80012938:	02900513          	li	a0,41
    8001293c:	43e190ef          	jal	8002bd7a <putchar>
    80012940:	b531                	j	8001274c <external_interrupt_SEI+0x544>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012942:	00045717          	auipc	a4,0x45
    80012946:	6d272703          	lw	a4,1746(a4) # 80058014 <excpt+0x4>
    8001294a:	4791                	li	a5,4
    8001294c:	0001d597          	auipc	a1,0x1d
    80012950:	66c58593          	addi	a1,a1,1644 # 8002ffb8 <__func__.0+0x2c8>
    80012954:	caf700e3          	beq	a4,a5,800125f4 <external_interrupt_SEI+0x3ec>
    80012958:	0001d597          	auipc	a1,0x1d
    8001295c:	67058593          	addi	a1,a1,1648 # 8002ffc8 <__func__.0+0x2d8>
    80012960:	b951                	j	800125f4 <external_interrupt_SEI+0x3ec>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80012962:	00045717          	auipc	a4,0x45
    80012966:	6b272703          	lw	a4,1714(a4) # 80058014 <excpt+0x4>
    8001296a:	4791                	li	a5,4
    8001296c:	0001d597          	auipc	a1,0x1d
    80012970:	64c58593          	addi	a1,a1,1612 # 8002ffb8 <__func__.0+0x2c8>
    80012974:	bcf70fe3          	beq	a4,a5,80012552 <external_interrupt_SEI+0x34a>
    80012978:	0001d597          	auipc	a1,0x1d
    8001297c:	65058593          	addi	a1,a1,1616 # 8002ffc8 <__func__.0+0x2d8>
    80012980:	bec9                	j	80012552 <external_interrupt_SEI+0x34a>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80012982:	00045417          	auipc	s0,0x45
    80012986:	69242403          	lw	s0,1682(s0) # 80058014 <excpt+0x4>
    8001298a:	1471                	addi	s0,s0,-4
    8001298c:	00143413          	seqz	s0,s0
    80012990:	b2b1                	j	800122dc <external_interrupt_SEI+0xd4>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012992:	00045717          	auipc	a4,0x45
    80012996:	68272703          	lw	a4,1666(a4) # 80058014 <excpt+0x4>
    8001299a:	4791                	li	a5,4
    8001299c:	0001d597          	auipc	a1,0x1d
    800129a0:	61c58593          	addi	a1,a1,1564 # 8002ffb8 <__func__.0+0x2c8>
    800129a4:	a0f708e3          	beq	a4,a5,800123b4 <external_interrupt_SEI+0x1ac>
    800129a8:	0001d597          	auipc	a1,0x1d
    800129ac:	62058593          	addi	a1,a1,1568 # 8002ffc8 <__func__.0+0x2d8>
    800129b0:	b411                	j	800123b4 <external_interrupt_SEI+0x1ac>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800129b2:	00045717          	auipc	a4,0x45
    800129b6:	66272703          	lw	a4,1634(a4) # 80058014 <excpt+0x4>
    800129ba:	4791                	li	a5,4
    800129bc:	0001d597          	auipc	a1,0x1d
    800129c0:	5fc58593          	addi	a1,a1,1532 # 8002ffb8 <__func__.0+0x2c8>
    800129c4:	ccf709e3          	beq	a4,a5,80012696 <external_interrupt_SEI+0x48e>
    800129c8:	0001d597          	auipc	a1,0x1d
    800129cc:	60058593          	addi	a1,a1,1536 # 8002ffc8 <__func__.0+0x2d8>
    800129d0:	b1d9                	j	80012696 <external_interrupt_SEI+0x48e>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800129d2:	00045717          	auipc	a4,0x45
    800129d6:	64272703          	lw	a4,1602(a4) # 80058014 <excpt+0x4>
    800129da:	4791                	li	a5,4
    800129dc:	0001d597          	auipc	a1,0x1d
    800129e0:	5dc58593          	addi	a1,a1,1500 # 8002ffb8 <__func__.0+0x2c8>
    800129e4:	8af702e3          	beq	a4,a5,80012288 <external_interrupt_SEI+0x80>
    800129e8:	0001d597          	auipc	a1,0x1d
    800129ec:	5e058593          	addi	a1,a1,1504 # 8002ffc8 <__func__.0+0x2d8>
    800129f0:	899ff06f          	j	80012288 <external_interrupt_SEI+0x80>

00000000800129f4 <external_interrupt_VSEI>:

bool external_interrupt_VSEI() {
    800129f4:	1101                	addi	sp,sp,-32

    TEST_START();
    800129f6:	0001c597          	auipc	a1,0x1c
    800129fa:	cd258593          	addi	a1,a1,-814 # 8002e6c8 <__func__.0>
    800129fe:	0001d517          	auipc	a0,0x1d
    80012a02:	5da50513          	addi	a0,a0,1498 # 8002ffd8 <__func__.0+0x2e8>
bool external_interrupt_VSEI() {
    80012a06:	ec06                	sd	ra,24(sp)
    80012a08:	e822                	sd	s0,16(sp)
    80012a0a:	e426                	sd	s1,8(sp)
    TEST_START();
    80012a0c:	6801a0ef          	jal	8002d08c <printf>
    80012a10:	4529                	li	a0,10
    80012a12:	368190ef          	jal	8002bd7a <putchar>

    TEST_SETUP_EXCEPT();
    80012a16:	bf6ee0ef          	jal	80000e0c <test_setup_except_function>

   
    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高
    goto_priv(PRIV_M);
    80012a1a:	4511                	li	a0,4
    80012a1c:	cecee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012a20:	40000793          	li	a5,1024
    80012a24:	6047a073          	csrs	hie,a5
    CSRS(CSR_HIP,HIP_VSEIP);
    80012a28:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012a2c:	4509                	li	a0,2
    80012a2e:	cdaee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012a32:	08200593          	li	a1,130
    80012a36:	00021617          	auipc	a2,0x21
    80012a3a:	68260613          	addi	a2,a2,1666 # 800340b8 <__func__.0+0x43c8>
    80012a3e:	0001d517          	auipc	a0,0x1d
    80012a42:	5b250513          	addi	a0,a0,1458 # 8002fff0 <__func__.0+0x300>
    80012a46:	6461a0ef          	jal	8002d08c <printf>
    80012a4a:	00045797          	auipc	a5,0x45
    80012a4e:	5c77c783          	lbu	a5,1479(a5) # 80058011 <excpt+0x1>
    80012a52:	00045497          	auipc	s1,0x45
    80012a56:	5be48493          	addi	s1,s1,1470 # 80058010 <excpt>
    80012a5a:	0001d597          	auipc	a1,0x1d
    80012a5e:	56e58593          	addi	a1,a1,1390 # 8002ffc8 <__func__.0+0x2d8>
    80012a62:	c799                	beqz	a5,80012a70 <external_interrupt_VSEI+0x7c>
    80012a64:	57fd                	li	a5,-1
    80012a66:	6498                	ld	a4,8(s1)
    80012a68:	17fe                	slli	a5,a5,0x3f
    80012a6a:	07a9                	addi	a5,a5,10
    80012a6c:	62f70463          	beq	a4,a5,80013094 <external_interrupt_VSEI+0x6a0>
    80012a70:	0001d517          	auipc	a0,0x1d
    80012a74:	59850513          	addi	a0,a0,1432 # 80030008 <__func__.0+0x318>
    80012a78:	6141a0ef          	jal	8002d08c <printf>
    80012a7c:	00045797          	auipc	a5,0x45
    80012a80:	5957c783          	lbu	a5,1429(a5) # 80058011 <excpt+0x1>
    80012a84:	c799                	beqz	a5,80012a92 <external_interrupt_VSEI+0x9e>
    80012a86:	57fd                	li	a5,-1
    80012a88:	6498                	ld	a4,8(s1)
    80012a8a:	17fe                	slli	a5,a5,0x3f
    80012a8c:	07a9                	addi	a5,a5,10
    80012a8e:	54f70563          	beq	a4,a5,80012fd8 <external_interrupt_VSEI+0x5e4>
    80012a92:	0001d517          	auipc	a0,0x1d
    80012a96:	57e50513          	addi	a0,a0,1406 # 80030010 <__func__.0+0x320>
    80012a9a:	5f21a0ef          	jal	8002d08c <printf>
    80012a9e:	02900513          	li	a0,41
    80012aa2:	2d8190ef          	jal	8002bd7a <putchar>
    80012aa6:	4529                	li	a0,10
    80012aa8:	2d2190ef          	jal	8002bd7a <putchar>
    80012aac:	00045797          	auipc	a5,0x45
    80012ab0:	5657c783          	lbu	a5,1381(a5) # 80058011 <excpt+0x1>
    80012ab4:	4401                	li	s0,0
    80012ab6:	c799                	beqz	a5,80012ac4 <external_interrupt_VSEI+0xd0>
    80012ab8:	57fd                	li	a5,-1
    80012aba:	6498                	ld	a4,8(s1)
    80012abc:	17fe                	slli	a5,a5,0x3f
    80012abe:	07a9                	addi	a5,a5,10
    80012ac0:	5af70263          	beq	a4,a5,80013064 <external_interrupt_VSEI+0x670>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg
    TEST_SETUP_EXCEPT();
    80012ac4:	b48ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012ac8:	4511                	li	a0,4
    80012aca:	c3eee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012ace:	40000793          	li	a5,1024
    80012ad2:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    80012ad6:	577d                	li	a4,-1
    80012ad8:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012adc:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012ae0:	4509                	li	a0,2
    80012ae2:	c26ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80012ae6:	08200593          	li	a1,130
    80012aea:	00021617          	auipc	a2,0x21
    80012aee:	61e60613          	addi	a2,a2,1566 # 80034108 <__func__.0+0x4418>
    80012af2:	0001d517          	auipc	a0,0x1d
    80012af6:	4fe50513          	addi	a0,a0,1278 # 8002fff0 <__func__.0+0x300>
    80012afa:	5921a0ef          	jal	8002d08c <printf>
    80012afe:	00045797          	auipc	a5,0x45
    80012b02:	5137c783          	lbu	a5,1299(a5) # 80058011 <excpt+0x1>
    80012b06:	0001d597          	auipc	a1,0x1d
    80012b0a:	4c258593          	addi	a1,a1,1218 # 8002ffc8 <__func__.0+0x2d8>
    80012b0e:	c799                	beqz	a5,80012b1c <external_interrupt_VSEI+0x128>
    80012b10:	57fd                	li	a5,-1
    80012b12:	6498                	ld	a4,8(s1)
    80012b14:	17fe                	slli	a5,a5,0x3f
    80012b16:	07a9                	addi	a5,a5,10
    80012b18:	54f70e63          	beq	a4,a5,80013074 <external_interrupt_VSEI+0x680>
    80012b1c:	0001d517          	auipc	a0,0x1d
    80012b20:	4ec50513          	addi	a0,a0,1260 # 80030008 <__func__.0+0x318>
    80012b24:	5681a0ef          	jal	8002d08c <printf>
    80012b28:	00045797          	auipc	a5,0x45
    80012b2c:	4e97c783          	lbu	a5,1257(a5) # 80058011 <excpt+0x1>
    80012b30:	c799                	beqz	a5,80012b3e <external_interrupt_VSEI+0x14a>
    80012b32:	57fd                	li	a5,-1
    80012b34:	6498                	ld	a4,8(s1)
    80012b36:	17fe                	slli	a5,a5,0x3f
    80012b38:	07a9                	addi	a5,a5,10
    80012b3a:	46f70f63          	beq	a4,a5,80012fb8 <external_interrupt_VSEI+0x5c4>
    80012b3e:	0001d517          	auipc	a0,0x1d
    80012b42:	4d250513          	addi	a0,a0,1234 # 80030010 <__func__.0+0x320>
    80012b46:	5461a0ef          	jal	8002d08c <printf>
    80012b4a:	02900513          	li	a0,41
    80012b4e:	22c190ef          	jal	8002bd7a <putchar>
    80012b52:	4529                	li	a0,10
    80012b54:	226190ef          	jal	8002bd7a <putchar>
    80012b58:	c801                	beqz	s0,80012b68 <external_interrupt_VSEI+0x174>
    80012b5a:	00045797          	auipc	a5,0x45
    80012b5e:	4b77c783          	lbu	a5,1207(a5) # 80058011 <excpt+0x1>
    80012b62:	4401                	li	s0,0
    80012b64:	42079c63          	bnez	a5,80012f9c <external_interrupt_VSEI+0x5a8>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80012b68:	aa4ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012b6c:	4511                	li	a0,4
    80012b6e:	b9aee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012b72:	40000793          	li	a5,1024
    80012b76:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    80012b7a:	577d                	li	a4,-1
    80012b7c:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIDELEG,(uint64_t)-1);
    80012b80:	60372073          	csrs	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012b84:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012b88:	4509                	li	a0,2
    80012b8a:	b7eee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012b8e:	08200593          	li	a1,130
    80012b92:	00021617          	auipc	a2,0x21
    80012b96:	5d660613          	addi	a2,a2,1494 # 80034168 <__func__.0+0x4478>
    80012b9a:	0001d517          	auipc	a0,0x1d
    80012b9e:	45650513          	addi	a0,a0,1110 # 8002fff0 <__func__.0+0x300>
    80012ba2:	4ea1a0ef          	jal	8002d08c <printf>
    80012ba6:	00045797          	auipc	a5,0x45
    80012baa:	46b7c783          	lbu	a5,1131(a5) # 80058011 <excpt+0x1>
    80012bae:	0001d597          	auipc	a1,0x1d
    80012bb2:	41a58593          	addi	a1,a1,1050 # 8002ffc8 <__func__.0+0x2d8>
    80012bb6:	c799                	beqz	a5,80012bc4 <external_interrupt_VSEI+0x1d0>
    80012bb8:	57fd                	li	a5,-1
    80012bba:	6498                	ld	a4,8(s1)
    80012bbc:	17fe                	slli	a5,a5,0x3f
    80012bbe:	07a9                	addi	a5,a5,10
    80012bc0:	4ef70a63          	beq	a4,a5,800130b4 <external_interrupt_VSEI+0x6c0>
    80012bc4:	0001d517          	auipc	a0,0x1d
    80012bc8:	44450513          	addi	a0,a0,1092 # 80030008 <__func__.0+0x318>
    80012bcc:	4c01a0ef          	jal	8002d08c <printf>
    80012bd0:	00045797          	auipc	a5,0x45
    80012bd4:	4417c783          	lbu	a5,1089(a5) # 80058011 <excpt+0x1>
    80012bd8:	c799                	beqz	a5,80012be6 <external_interrupt_VSEI+0x1f2>
    80012bda:	57fd                	li	a5,-1
    80012bdc:	6498                	ld	a4,8(s1)
    80012bde:	17fe                	slli	a5,a5,0x3f
    80012be0:	07a9                	addi	a5,a5,10
    80012be2:	3ef70363          	beq	a4,a5,80012fc8 <external_interrupt_VSEI+0x5d4>
    80012be6:	0001d517          	auipc	a0,0x1d
    80012bea:	42a50513          	addi	a0,a0,1066 # 80030010 <__func__.0+0x320>
    80012bee:	49e1a0ef          	jal	8002d08c <printf>
    80012bf2:	02900513          	li	a0,41
    80012bf6:	184190ef          	jal	8002bd7a <putchar>
    80012bfa:	4529                	li	a0,10
    80012bfc:	17e190ef          	jal	8002bd7a <putchar>
    80012c00:	c801                	beqz	s0,80012c10 <external_interrupt_VSEI+0x21c>
    80012c02:	00045797          	auipc	a5,0x45
    80012c06:	40f7c783          	lbu	a5,1039(a5) # 80058011 <excpt+0x1>
    80012c0a:	4401                	li	s0,0
    80012c0c:	36079a63          	bnez	a5,80012f80 <external_interrupt_VSEI+0x58c>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=1，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    80012c10:	9fcee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012c14:	4511                	li	a0,4
    80012c16:	af2ee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80012c1a:	40000793          	li	a5,1024
    80012c1e:	6047b073          	csrc	hie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80012c22:	577d                	li	a4,-1
    80012c24:	30373073          	csrc	mideleg,a4
    CSRC(CSR_HIDELEG,(uint64_t)-1);
    80012c28:	60373073          	csrc	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012c2c:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012c30:	4509                	li	a0,2
    80012c32:	ad6ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80012c36:	08200593          	li	a1,130
    80012c3a:	00021617          	auipc	a2,0x21
    80012c3e:	59e60613          	addi	a2,a2,1438 # 800341d8 <__func__.0+0x44e8>
    80012c42:	0001d517          	auipc	a0,0x1d
    80012c46:	3ae50513          	addi	a0,a0,942 # 8002fff0 <__func__.0+0x300>
    80012c4a:	4421a0ef          	jal	8002d08c <printf>
    80012c4e:	00045797          	auipc	a5,0x45
    80012c52:	3c37c783          	lbu	a5,963(a5) # 80058011 <excpt+0x1>
    80012c56:	0001d597          	auipc	a1,0x1d
    80012c5a:	37258593          	addi	a1,a1,882 # 8002ffc8 <__func__.0+0x2d8>
    80012c5e:	e789                	bnez	a5,80012c68 <external_interrupt_VSEI+0x274>
    80012c60:	0001d597          	auipc	a1,0x1d
    80012c64:	35858593          	addi	a1,a1,856 # 8002ffb8 <__func__.0+0x2c8>
    80012c68:	0001d517          	auipc	a0,0x1d
    80012c6c:	3a050513          	addi	a0,a0,928 # 80030008 <__func__.0+0x318>
    80012c70:	41c1a0ef          	jal	8002d08c <printf>
    80012c74:	00045797          	auipc	a5,0x45
    80012c78:	39d7c783          	lbu	a5,925(a5) # 80058011 <excpt+0x1>
    80012c7c:	3a079963          	bnez	a5,8001302e <external_interrupt_VSEI+0x63a>
    80012c80:	4529                	li	a0,10
    80012c82:	0f8190ef          	jal	8002bd7a <putchar>
    80012c86:	c419                	beqz	s0,80012c94 <external_interrupt_VSEI+0x2a0>
    80012c88:	00045417          	auipc	s0,0x45
    80012c8c:	38944403          	lbu	s0,905(s0) # 80058011 <excpt+0x1>
    80012c90:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1
    TEST_SETUP_EXCEPT();
    80012c94:	978ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012c98:	4511                	li	a0,4
    80012c9a:	a6eee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012c9e:	40000793          	li	a5,1024
    80012ca2:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012ca6:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    80012caa:	4509                	li	a0,2
    80012cac:	a5cee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012cb0:	08200593          	li	a1,130
    80012cb4:	00021617          	auipc	a2,0x21
    80012cb8:	56460613          	addi	a2,a2,1380 # 80034218 <__func__.0+0x4528>
    80012cbc:	0001d517          	auipc	a0,0x1d
    80012cc0:	33450513          	addi	a0,a0,820 # 8002fff0 <__func__.0+0x300>
    80012cc4:	3c81a0ef          	jal	8002d08c <printf>
    80012cc8:	00045797          	auipc	a5,0x45
    80012ccc:	3497c783          	lbu	a5,841(a5) # 80058011 <excpt+0x1>
    80012cd0:	0001d597          	auipc	a1,0x1d
    80012cd4:	2f858593          	addi	a1,a1,760 # 8002ffc8 <__func__.0+0x2d8>
    80012cd8:	e799                	bnez	a5,80012ce6 <external_interrupt_VSEI+0x2f2>
    80012cda:	57fd                	li	a5,-1
    80012cdc:	6498                	ld	a4,8(s1)
    80012cde:	17fe                	slli	a5,a5,0x3f
    80012ce0:	07a9                	addi	a5,a5,10
    80012ce2:	40f70963          	beq	a4,a5,800130f4 <external_interrupt_VSEI+0x700>
    80012ce6:	0001d517          	auipc	a0,0x1d
    80012cea:	32250513          	addi	a0,a0,802 # 80030008 <__func__.0+0x318>
    80012cee:	39e1a0ef          	jal	8002d08c <printf>
    80012cf2:	00045797          	auipc	a5,0x45
    80012cf6:	31f7c783          	lbu	a5,799(a5) # 80058011 <excpt+0x1>
    80012cfa:	e799                	bnez	a5,80012d08 <external_interrupt_VSEI+0x314>
    80012cfc:	57fd                	li	a5,-1
    80012cfe:	6498                	ld	a4,8(s1)
    80012d00:	17fe                	slli	a5,a5,0x3f
    80012d02:	07a9                	addi	a5,a5,10
    80012d04:	2ef70263          	beq	a4,a5,80012fe8 <external_interrupt_VSEI+0x5f4>
    80012d08:	0001d517          	auipc	a0,0x1d
    80012d0c:	30850513          	addi	a0,a0,776 # 80030010 <__func__.0+0x320>
    80012d10:	37c1a0ef          	jal	8002d08c <printf>
    80012d14:	02900513          	li	a0,41
    80012d18:	062190ef          	jal	8002bd7a <putchar>
    80012d1c:	4529                	li	a0,10
    80012d1e:	05c190ef          	jal	8002bd7a <putchar>
    80012d22:	c801                	beqz	s0,80012d32 <external_interrupt_VSEI+0x33e>
    80012d24:	00045797          	auipc	a5,0x45
    80012d28:	2ed7c783          	lbu	a5,749(a5) # 80058011 <excpt+0x1>
    80012d2c:	4401                	li	s0,0
    80012d2e:	22078b63          	beqz	a5,80012f64 <external_interrupt_VSEI+0x570>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg
    TEST_SETUP_EXCEPT();
    80012d32:	8daee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012d36:	4511                	li	a0,4
    80012d38:	9d0ee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012d3c:	40000793          	li	a5,1024
    80012d40:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012d44:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80012d48:	57fd                	li	a5,-1
    80012d4a:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    80012d4e:	4509                	li	a0,2
    80012d50:	9b8ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012d54:	08200593          	li	a1,130
    80012d58:	00021617          	auipc	a2,0x21
    80012d5c:	51060613          	addi	a2,a2,1296 # 80034268 <__func__.0+0x4578>
    80012d60:	0001d517          	auipc	a0,0x1d
    80012d64:	29050513          	addi	a0,a0,656 # 8002fff0 <__func__.0+0x300>
    80012d68:	3241a0ef          	jal	8002d08c <printf>
    80012d6c:	00045797          	auipc	a5,0x45
    80012d70:	2a57c783          	lbu	a5,677(a5) # 80058011 <excpt+0x1>
    80012d74:	0001d597          	auipc	a1,0x1d
    80012d78:	25458593          	addi	a1,a1,596 # 8002ffc8 <__func__.0+0x2d8>
    80012d7c:	e799                	bnez	a5,80012d8a <external_interrupt_VSEI+0x396>
    80012d7e:	57fd                	li	a5,-1
    80012d80:	6498                	ld	a4,8(s1)
    80012d82:	17fe                	slli	a5,a5,0x3f
    80012d84:	07a9                	addi	a5,a5,10
    80012d86:	2af70f63          	beq	a4,a5,80013044 <external_interrupt_VSEI+0x650>
    80012d8a:	0001d517          	auipc	a0,0x1d
    80012d8e:	27e50513          	addi	a0,a0,638 # 80030008 <__func__.0+0x318>
    80012d92:	2fa1a0ef          	jal	8002d08c <printf>
    80012d96:	00045797          	auipc	a5,0x45
    80012d9a:	27b7c783          	lbu	a5,635(a5) # 80058011 <excpt+0x1>
    80012d9e:	e799                	bnez	a5,80012dac <external_interrupt_VSEI+0x3b8>
    80012da0:	57fd                	li	a5,-1
    80012da2:	6498                	ld	a4,8(s1)
    80012da4:	17fe                	slli	a5,a5,0x3f
    80012da6:	07a9                	addi	a5,a5,10
    80012da8:	26f70063          	beq	a4,a5,80013008 <external_interrupt_VSEI+0x614>
    80012dac:	0001d517          	auipc	a0,0x1d
    80012db0:	26450513          	addi	a0,a0,612 # 80030010 <__func__.0+0x320>
    80012db4:	2d81a0ef          	jal	8002d08c <printf>
    80012db8:	02900513          	li	a0,41
    80012dbc:	7bf180ef          	jal	8002bd7a <putchar>
    80012dc0:	4529                	li	a0,10
    80012dc2:	7b9180ef          	jal	8002bd7a <putchar>
    80012dc6:	c801                	beqz	s0,80012dd6 <external_interrupt_VSEI+0x3e2>
    80012dc8:	00045797          	auipc	a5,0x45
    80012dcc:	2497c783          	lbu	a5,585(a5) # 80058011 <excpt+0x1>
    80012dd0:	4401                	li	s0,0
    80012dd2:	16078b63          	beqz	a5,80012f48 <external_interrupt_VSEI+0x554>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80012dd6:	836ee0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012dda:	4511                	li	a0,4
    80012ddc:	92cee0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012de0:	40000793          	li	a5,1024
    80012de4:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012de8:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80012dec:	57fd                	li	a5,-1
    80012dee:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80012df2:	60379073          	csrw	hideleg,a5

    goto_priv(PRIV_VS);
    80012df6:	4509                	li	a0,2
    80012df8:	910ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012dfc:	08200593          	li	a1,130
    80012e00:	00021617          	auipc	a2,0x21
    80012e04:	4c860613          	addi	a2,a2,1224 # 800342c8 <__func__.0+0x45d8>
    80012e08:	0001d517          	auipc	a0,0x1d
    80012e0c:	1e850513          	addi	a0,a0,488 # 8002fff0 <__func__.0+0x300>
    80012e10:	27c1a0ef          	jal	8002d08c <printf>
    80012e14:	00045797          	auipc	a5,0x45
    80012e18:	1fd7c783          	lbu	a5,509(a5) # 80058011 <excpt+0x1>
    80012e1c:	0001d597          	auipc	a1,0x1d
    80012e20:	1ac58593          	addi	a1,a1,428 # 8002ffc8 <__func__.0+0x2d8>
    80012e24:	e799                	bnez	a5,80012e32 <external_interrupt_VSEI+0x43e>
    80012e26:	57fd                	li	a5,-1
    80012e28:	6498                	ld	a4,8(s1)
    80012e2a:	17fe                	slli	a5,a5,0x3f
    80012e2c:	07a9                	addi	a5,a5,10
    80012e2e:	2af70363          	beq	a4,a5,800130d4 <external_interrupt_VSEI+0x6e0>
    80012e32:	0001d517          	auipc	a0,0x1d
    80012e36:	1d650513          	addi	a0,a0,470 # 80030008 <__func__.0+0x318>
    80012e3a:	2521a0ef          	jal	8002d08c <printf>
    80012e3e:	00045797          	auipc	a5,0x45
    80012e42:	1d37c783          	lbu	a5,467(a5) # 80058011 <excpt+0x1>
    80012e46:	e799                	bnez	a5,80012e54 <external_interrupt_VSEI+0x460>
    80012e48:	57fd                	li	a5,-1
    80012e4a:	6498                	ld	a4,8(s1)
    80012e4c:	17fe                	slli	a5,a5,0x3f
    80012e4e:	07a9                	addi	a5,a5,10
    80012e50:	1af70463          	beq	a4,a5,80012ff8 <external_interrupt_VSEI+0x604>
    80012e54:	0001d517          	auipc	a0,0x1d
    80012e58:	1bc50513          	addi	a0,a0,444 # 80030010 <__func__.0+0x320>
    80012e5c:	2301a0ef          	jal	8002d08c <printf>
    80012e60:	02900513          	li	a0,41
    80012e64:	717180ef          	jal	8002bd7a <putchar>
    80012e68:	4529                	li	a0,10
    80012e6a:	711180ef          	jal	8002bd7a <putchar>
    80012e6e:	c419                	beqz	s0,80012e7c <external_interrupt_VSEI+0x488>
    80012e70:	00045797          	auipc	a5,0x45
    80012e74:	1a17c783          	lbu	a5,417(a5) # 80058011 <excpt+0x1>
    80012e78:	4401                	li	s0,0
    80012e7a:	cbcd                	beqz	a5,80012f2c <external_interrupt_VSEI+0x538>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    80012e7c:	f91ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80012e80:	4511                	li	a0,4
    80012e82:	886ee0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80012e86:	40000793          	li	a5,1024
    80012e8a:	6047b073          	csrc	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012e8e:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    80012e92:	4509                	li	a0,2
    80012e94:	874ee0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012e98:	08200593          	li	a1,130
    80012e9c:	00021617          	auipc	a2,0x21
    80012ea0:	49c60613          	addi	a2,a2,1180 # 80034338 <__func__.0+0x4648>
    80012ea4:	0001d517          	auipc	a0,0x1d
    80012ea8:	14c50513          	addi	a0,a0,332 # 8002fff0 <__func__.0+0x300>
    80012eac:	1e01a0ef          	jal	8002d08c <printf>
    80012eb0:	00045797          	auipc	a5,0x45
    80012eb4:	1617c783          	lbu	a5,353(a5) # 80058011 <excpt+0x1>
    80012eb8:	0001d597          	auipc	a1,0x1d
    80012ebc:	11058593          	addi	a1,a1,272 # 8002ffc8 <__func__.0+0x2d8>
    80012ec0:	e789                	bnez	a5,80012eca <external_interrupt_VSEI+0x4d6>
    80012ec2:	0001d597          	auipc	a1,0x1d
    80012ec6:	0f658593          	addi	a1,a1,246 # 8002ffb8 <__func__.0+0x2c8>
    80012eca:	0001d517          	auipc	a0,0x1d
    80012ece:	13e50513          	addi	a0,a0,318 # 80030008 <__func__.0+0x318>
    80012ed2:	1ba1a0ef          	jal	8002d08c <printf>
    80012ed6:	00045797          	auipc	a5,0x45
    80012eda:	13b7c783          	lbu	a5,315(a5) # 80058011 <excpt+0x1>
    80012ede:	12079d63          	bnez	a5,80013018 <external_interrupt_VSEI+0x624>
    80012ee2:	4529                	li	a0,10
    80012ee4:	697180ef          	jal	8002bd7a <putchar>
    80012ee8:	c411                	beqz	s0,80012ef4 <external_interrupt_VSEI+0x500>
    80012eea:	00045797          	auipc	a5,0x45
    80012eee:	1277c783          	lbu	a5,295(a5) # 80058011 <excpt+0x1>
    80012ef2:	c79d                	beqz	a5,80012f20 <external_interrupt_VSEI+0x52c>
    80012ef4:	4401                	li	s0,0





    TEST_END();
    80012ef6:	0001d597          	auipc	a1,0x1d
    80012efa:	0d258593          	addi	a1,a1,210 # 8002ffc8 <__func__.0+0x2d8>
    80012efe:	0001d517          	auipc	a0,0x1d
    80012f02:	17250513          	addi	a0,a0,370 # 80030070 <__func__.0+0x380>
    80012f06:	1861a0ef          	jal	8002d08c <printf>
    80012f0a:	4511                	li	a0,4
    80012f0c:	ffded0ef          	jal	80000f08 <goto_priv>
    80012f10:	9c3ee0ef          	jal	800018d2 <reset_state>
}
    80012f14:	60e2                	ld	ra,24(sp)
    80012f16:	8522                	mv	a0,s0
    80012f18:	6442                	ld	s0,16(sp)
    80012f1a:	64a2                	ld	s1,8(sp)
    80012f1c:	6105                	addi	sp,sp,32
    80012f1e:	8082                	ret
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012f20:	4405                	li	s0,1
    TEST_END();
    80012f22:	0001d597          	auipc	a1,0x1d
    80012f26:	09658593          	addi	a1,a1,150 # 8002ffb8 <__func__.0+0x2c8>
    80012f2a:	bfd1                	j	80012efe <external_interrupt_VSEI+0x50a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012f2c:	57fd                	li	a5,-1
    80012f2e:	6498                	ld	a4,8(s1)
    80012f30:	17fe                	slli	a5,a5,0x3f
    80012f32:	07a9                	addi	a5,a5,10
    80012f34:	f4f714e3          	bne	a4,a5,80012e7c <external_interrupt_VSEI+0x488>
    80012f38:	00045417          	auipc	s0,0x45
    80012f3c:	0dc42403          	lw	s0,220(s0) # 80058014 <excpt+0x4>
    80012f40:	1479                	addi	s0,s0,-2
    80012f42:	00143413          	seqz	s0,s0
    80012f46:	bf1d                	j	80012e7c <external_interrupt_VSEI+0x488>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012f48:	57fd                	li	a5,-1
    80012f4a:	6498                	ld	a4,8(s1)
    80012f4c:	17fe                	slli	a5,a5,0x3f
    80012f4e:	07a9                	addi	a5,a5,10
    80012f50:	e8f713e3          	bne	a4,a5,80012dd6 <external_interrupt_VSEI+0x3e2>
    80012f54:	00045417          	auipc	s0,0x45
    80012f58:	0c042403          	lw	s0,192(s0) # 80058014 <excpt+0x4>
    80012f5c:	1475                	addi	s0,s0,-3
    80012f5e:	00143413          	seqz	s0,s0
    80012f62:	bd95                	j	80012dd6 <external_interrupt_VSEI+0x3e2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012f64:	57fd                	li	a5,-1
    80012f66:	6498                	ld	a4,8(s1)
    80012f68:	17fe                	slli	a5,a5,0x3f
    80012f6a:	07a9                	addi	a5,a5,10
    80012f6c:	dcf713e3          	bne	a4,a5,80012d32 <external_interrupt_VSEI+0x33e>
    80012f70:	00045417          	auipc	s0,0x45
    80012f74:	0a442403          	lw	s0,164(s0) # 80058014 <excpt+0x4>
    80012f78:	1471                	addi	s0,s0,-4
    80012f7a:	00143413          	seqz	s0,s0
    80012f7e:	bb55                	j	80012d32 <external_interrupt_VSEI+0x33e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012f80:	57fd                	li	a5,-1
    80012f82:	6498                	ld	a4,8(s1)
    80012f84:	17fe                	slli	a5,a5,0x3f
    80012f86:	07a9                	addi	a5,a5,10
    80012f88:	c8f714e3          	bne	a4,a5,80012c10 <external_interrupt_VSEI+0x21c>
    80012f8c:	00045417          	auipc	s0,0x45
    80012f90:	08842403          	lw	s0,136(s0) # 80058014 <excpt+0x4>
    80012f94:	1479                	addi	s0,s0,-2
    80012f96:	00143413          	seqz	s0,s0
    80012f9a:	b99d                	j	80012c10 <external_interrupt_VSEI+0x21c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80012f9c:	57fd                	li	a5,-1
    80012f9e:	6498                	ld	a4,8(s1)
    80012fa0:	17fe                	slli	a5,a5,0x3f
    80012fa2:	07a9                	addi	a5,a5,10
    80012fa4:	bcf712e3          	bne	a4,a5,80012b68 <external_interrupt_VSEI+0x174>
    80012fa8:	00045417          	auipc	s0,0x45
    80012fac:	06c42403          	lw	s0,108(s0) # 80058014 <excpt+0x4>
    80012fb0:	1475                	addi	s0,s0,-3
    80012fb2:	00143413          	seqz	s0,s0
    80012fb6:	be4d                	j	80012b68 <external_interrupt_VSEI+0x174>
    80012fb8:	00045717          	auipc	a4,0x45
    80012fbc:	05c72703          	lw	a4,92(a4) # 80058014 <excpt+0x4>
    80012fc0:	478d                	li	a5,3
    80012fc2:	b6f71ee3          	bne	a4,a5,80012b3e <external_interrupt_VSEI+0x14a>
    80012fc6:	b671                	j	80012b52 <external_interrupt_VSEI+0x15e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012fc8:	00045717          	auipc	a4,0x45
    80012fcc:	04c72703          	lw	a4,76(a4) # 80058014 <excpt+0x4>
    80012fd0:	4789                	li	a5,2
    80012fd2:	c0f71ae3          	bne	a4,a5,80012be6 <external_interrupt_VSEI+0x1f2>
    80012fd6:	b115                	j	80012bfa <external_interrupt_VSEI+0x206>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012fd8:	00045717          	auipc	a4,0x45
    80012fdc:	03c72703          	lw	a4,60(a4) # 80058014 <excpt+0x4>
    80012fe0:	4791                	li	a5,4
    80012fe2:	aaf718e3          	bne	a4,a5,80012a92 <external_interrupt_VSEI+0x9e>
    80012fe6:	b4c1                	j	80012aa6 <external_interrupt_VSEI+0xb2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012fe8:	00045717          	auipc	a4,0x45
    80012fec:	02c72703          	lw	a4,44(a4) # 80058014 <excpt+0x4>
    80012ff0:	4791                	li	a5,4
    80012ff2:	d0f71be3          	bne	a4,a5,80012d08 <external_interrupt_VSEI+0x314>
    80012ff6:	b31d                	j	80012d1c <external_interrupt_VSEI+0x328>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012ff8:	00045717          	auipc	a4,0x45
    80012ffc:	01c72703          	lw	a4,28(a4) # 80058014 <excpt+0x4>
    80013000:	4789                	li	a5,2
    80013002:	e4f719e3          	bne	a4,a5,80012e54 <external_interrupt_VSEI+0x460>
    80013006:	b58d                	j	80012e68 <external_interrupt_VSEI+0x474>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80013008:	00045717          	auipc	a4,0x45
    8001300c:	00c72703          	lw	a4,12(a4) # 80058014 <excpt+0x4>
    80013010:	478d                	li	a5,3
    80013012:	d8f71de3          	bne	a4,a5,80012dac <external_interrupt_VSEI+0x3b8>
    80013016:	b36d                	j	80012dc0 <external_interrupt_VSEI+0x3cc>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80013018:	0001d517          	auipc	a0,0x1d
    8001301c:	ff850513          	addi	a0,a0,-8 # 80030010 <__func__.0+0x320>
    80013020:	06c1a0ef          	jal	8002d08c <printf>
    80013024:	02900513          	li	a0,41
    80013028:	553180ef          	jal	8002bd7a <putchar>
    8001302c:	bd5d                	j	80012ee2 <external_interrupt_VSEI+0x4ee>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    8001302e:	0001d517          	auipc	a0,0x1d
    80013032:	fe250513          	addi	a0,a0,-30 # 80030010 <__func__.0+0x320>
    80013036:	0561a0ef          	jal	8002d08c <printf>
    8001303a:	02900513          	li	a0,41
    8001303e:	53d180ef          	jal	8002bd7a <putchar>
    80013042:	b93d                	j	80012c80 <external_interrupt_VSEI+0x28c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80013044:	00045717          	auipc	a4,0x45
    80013048:	fd072703          	lw	a4,-48(a4) # 80058014 <excpt+0x4>
    8001304c:	478d                	li	a5,3
    8001304e:	0001d597          	auipc	a1,0x1d
    80013052:	f6a58593          	addi	a1,a1,-150 # 8002ffb8 <__func__.0+0x2c8>
    80013056:	d2f70ae3          	beq	a4,a5,80012d8a <external_interrupt_VSEI+0x396>
    8001305a:	0001d597          	auipc	a1,0x1d
    8001305e:	f6e58593          	addi	a1,a1,-146 # 8002ffc8 <__func__.0+0x2d8>
    80013062:	b325                	j	80012d8a <external_interrupt_VSEI+0x396>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80013064:	00045417          	auipc	s0,0x45
    80013068:	fb042403          	lw	s0,-80(s0) # 80058014 <excpt+0x4>
    8001306c:	1471                	addi	s0,s0,-4
    8001306e:	00143413          	seqz	s0,s0
    80013072:	bc89                	j	80012ac4 <external_interrupt_VSEI+0xd0>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80013074:	00045717          	auipc	a4,0x45
    80013078:	fa072703          	lw	a4,-96(a4) # 80058014 <excpt+0x4>
    8001307c:	478d                	li	a5,3
    8001307e:	0001d597          	auipc	a1,0x1d
    80013082:	f3a58593          	addi	a1,a1,-198 # 8002ffb8 <__func__.0+0x2c8>
    80013086:	a8f70be3          	beq	a4,a5,80012b1c <external_interrupt_VSEI+0x128>
    8001308a:	0001d597          	auipc	a1,0x1d
    8001308e:	f3e58593          	addi	a1,a1,-194 # 8002ffc8 <__func__.0+0x2d8>
    80013092:	b469                	j	80012b1c <external_interrupt_VSEI+0x128>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80013094:	00045717          	auipc	a4,0x45
    80013098:	f8072703          	lw	a4,-128(a4) # 80058014 <excpt+0x4>
    8001309c:	4791                	li	a5,4
    8001309e:	0001d597          	auipc	a1,0x1d
    800130a2:	f1a58593          	addi	a1,a1,-230 # 8002ffb8 <__func__.0+0x2c8>
    800130a6:	9cf705e3          	beq	a4,a5,80012a70 <external_interrupt_VSEI+0x7c>
    800130aa:	0001d597          	auipc	a1,0x1d
    800130ae:	f1e58593          	addi	a1,a1,-226 # 8002ffc8 <__func__.0+0x2d8>
    800130b2:	ba7d                	j	80012a70 <external_interrupt_VSEI+0x7c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    800130b4:	00045717          	auipc	a4,0x45
    800130b8:	f6072703          	lw	a4,-160(a4) # 80058014 <excpt+0x4>
    800130bc:	4789                	li	a5,2
    800130be:	0001d597          	auipc	a1,0x1d
    800130c2:	efa58593          	addi	a1,a1,-262 # 8002ffb8 <__func__.0+0x2c8>
    800130c6:	aef70fe3          	beq	a4,a5,80012bc4 <external_interrupt_VSEI+0x1d0>
    800130ca:	0001d597          	auipc	a1,0x1d
    800130ce:	efe58593          	addi	a1,a1,-258 # 8002ffc8 <__func__.0+0x2d8>
    800130d2:	bccd                	j	80012bc4 <external_interrupt_VSEI+0x1d0>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    800130d4:	00045717          	auipc	a4,0x45
    800130d8:	f4072703          	lw	a4,-192(a4) # 80058014 <excpt+0x4>
    800130dc:	4789                	li	a5,2
    800130de:	0001d597          	auipc	a1,0x1d
    800130e2:	eda58593          	addi	a1,a1,-294 # 8002ffb8 <__func__.0+0x2c8>
    800130e6:	d4f706e3          	beq	a4,a5,80012e32 <external_interrupt_VSEI+0x43e>
    800130ea:	0001d597          	auipc	a1,0x1d
    800130ee:	ede58593          	addi	a1,a1,-290 # 8002ffc8 <__func__.0+0x2d8>
    800130f2:	b381                	j	80012e32 <external_interrupt_VSEI+0x43e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    800130f4:	00045717          	auipc	a4,0x45
    800130f8:	f2072703          	lw	a4,-224(a4) # 80058014 <excpt+0x4>
    800130fc:	4791                	li	a5,4
    800130fe:	0001d597          	auipc	a1,0x1d
    80013102:	eba58593          	addi	a1,a1,-326 # 8002ffb8 <__func__.0+0x2c8>
    80013106:	bef700e3          	beq	a4,a5,80012ce6 <external_interrupt_VSEI+0x2f2>
    8001310a:	0001d597          	auipc	a1,0x1d
    8001310e:	ebe58593          	addi	a1,a1,-322 # 8002ffc8 <__func__.0+0x2d8>
    80013112:	bed1                	j	80012ce6 <external_interrupt_VSEI+0x2f2>

0000000080013114 <software_interrupt_msi>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool software_interrupt_msi() {
    80013114:	1101                	addi	sp,sp,-32

    TEST_START();
    80013116:	0001b597          	auipc	a1,0x1b
    8001311a:	5ca58593          	addi	a1,a1,1482 # 8002e6e0 <__func__.2>
    8001311e:	0001d517          	auipc	a0,0x1d
    80013122:	eba50513          	addi	a0,a0,-326 # 8002ffd8 <__func__.0+0x2e8>
bool software_interrupt_msi() {
    80013126:	ec06                	sd	ra,24(sp)
    80013128:	e822                	sd	s0,16(sp)
    8001312a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001312c:	761190ef          	jal	8002d08c <printf>
    80013130:	4529                	li	a0,10
    80013132:	449180ef          	jal	8002bd7a <putchar>

    TEST_SETUP_EXCEPT();
    80013136:	cd7ed0ef          	jal	80000e0c <test_setup_except_function>

   
    //M模式下产生软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高
    goto_priv(PRIV_M);
    8001313a:	4511                	li	a0,4
    8001313c:	dcded0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80013140:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013144:	30446073          	csrsi	mie,8
    CSRW(CSR_MIDELEG,0);
    80013148:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MIP,MIP_MSIP);     //read-only
    8001314c:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013150:	4511                	li	a0,4
    80013152:	db7ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013156:	08200593          	li	a1,130
    8001315a:	00021617          	auipc	a2,0x21
    8001315e:	22e60613          	addi	a2,a2,558 # 80034388 <__func__.0+0x4698>
    80013162:	0001d517          	auipc	a0,0x1d
    80013166:	e8e50513          	addi	a0,a0,-370 # 8002fff0 <__func__.0+0x300>
    8001316a:	723190ef          	jal	8002d08c <printf>
    8001316e:	00045797          	auipc	a5,0x45
    80013172:	ea37c783          	lbu	a5,-349(a5) # 80058011 <excpt+0x1>
    80013176:	00045497          	auipc	s1,0x45
    8001317a:	e9a48493          	addi	s1,s1,-358 # 80058010 <excpt>
    8001317e:	0001d597          	auipc	a1,0x1d
    80013182:	e4a58593          	addi	a1,a1,-438 # 8002ffc8 <__func__.0+0x2d8>
    80013186:	c799                	beqz	a5,80013194 <software_interrupt_msi+0x80>
    80013188:	57fd                	li	a5,-1
    8001318a:	6498                	ld	a4,8(s1)
    8001318c:	17fe                	slli	a5,a5,0x3f
    8001318e:	078d                	addi	a5,a5,3
    80013190:	4ef702e3          	beq	a4,a5,80013e74 <software_interrupt_msi+0xd60>
    80013194:	0001d517          	auipc	a0,0x1d
    80013198:	e7450513          	addi	a0,a0,-396 # 80030008 <__func__.0+0x318>
    8001319c:	6f1190ef          	jal	8002d08c <printf>
    800131a0:	00045797          	auipc	a5,0x45
    800131a4:	e717c783          	lbu	a5,-399(a5) # 80058011 <excpt+0x1>
    800131a8:	c799                	beqz	a5,800131b6 <software_interrupt_msi+0xa2>
    800131aa:	57fd                	li	a5,-1
    800131ac:	6498                	ld	a4,8(s1)
    800131ae:	17fe                	slli	a5,a5,0x3f
    800131b0:	078d                	addi	a5,a5,3
    800131b2:	34f700e3          	beq	a4,a5,80013cf2 <software_interrupt_msi+0xbde>
    800131b6:	0001d517          	auipc	a0,0x1d
    800131ba:	e5a50513          	addi	a0,a0,-422 # 80030010 <__func__.0+0x320>
    800131be:	6cf190ef          	jal	8002d08c <printf>
    800131c2:	02900513          	li	a0,41
    800131c6:	3b5180ef          	jal	8002bd7a <putchar>
    800131ca:	4529                	li	a0,10
    800131cc:	3af180ef          	jal	8002bd7a <putchar>
    800131d0:	00045797          	auipc	a5,0x45
    800131d4:	e417c783          	lbu	a5,-447(a5) # 80058011 <excpt+0x1>
    800131d8:	4401                	li	s0,0
    800131da:	c799                	beqz	a5,800131e8 <software_interrupt_msi+0xd4>
    800131dc:	57fd                	li	a5,-1
    800131de:	6498                	ld	a4,8(s1)
    800131e0:	17fe                	slli	a5,a5,0x3f
    800131e2:	078d                	addi	a5,a5,3
    800131e4:	56f70ce3          	beq	a4,a5,80013f5c <software_interrupt_msi+0xe48>
        excpt.priv == PRIV_M
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    800131e8:	c25ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800131ec:	4511                	li	a0,4
    800131ee:	d1bed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800131f2:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800131f6:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800131fa:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    800131fe:	4511                	li	a0,4
    80013200:	d09ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    80013204:	08200593          	li	a1,130
    80013208:	00021617          	auipc	a2,0x21
    8001320c:	1e060613          	addi	a2,a2,480 # 800343e8 <__func__.0+0x46f8>
    80013210:	0001d517          	auipc	a0,0x1d
    80013214:	de050513          	addi	a0,a0,-544 # 8002fff0 <__func__.0+0x300>
    80013218:	675190ef          	jal	8002d08c <printf>
    8001321c:	00045797          	auipc	a5,0x45
    80013220:	df57c783          	lbu	a5,-523(a5) # 80058011 <excpt+0x1>
    80013224:	0001d597          	auipc	a1,0x1d
    80013228:	da458593          	addi	a1,a1,-604 # 8002ffc8 <__func__.0+0x2d8>
    8001322c:	e789                	bnez	a5,80013236 <software_interrupt_msi+0x122>
    8001322e:	0001d597          	auipc	a1,0x1d
    80013232:	d8a58593          	addi	a1,a1,-630 # 8002ffb8 <__func__.0+0x2c8>
    80013236:	0001d517          	auipc	a0,0x1d
    8001323a:	dd250513          	addi	a0,a0,-558 # 80030008 <__func__.0+0x318>
    8001323e:	64f190ef          	jal	8002d08c <printf>
    80013242:	00045797          	auipc	a5,0x45
    80013246:	dcf7c783          	lbu	a5,-561(a5) # 80058011 <excpt+0x1>
    8001324a:	320797e3          	bnez	a5,80013d78 <software_interrupt_msi+0xc64>
    8001324e:	4529                	li	a0,10
    80013250:	32b180ef          	jal	8002bd7a <putchar>
    80013254:	c419                	beqz	s0,80013262 <software_interrupt_msi+0x14e>
    80013256:	00045417          	auipc	s0,0x45
    8001325a:	dbb44403          	lbu	s0,-581(s0) # 80058011 <excpt+0x1>
    8001325e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    80013262:	babed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013266:	4511                	li	a0,4
    80013268:	ca1ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8001326c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013270:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013274:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    80013278:	4511                	li	a0,4
    8001327a:	c8fed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    8001327e:	08200593          	li	a1,130
    80013282:	00021617          	auipc	a2,0x21
    80013286:	1be60613          	addi	a2,a2,446 # 80034440 <__func__.0+0x4750>
    8001328a:	0001d517          	auipc	a0,0x1d
    8001328e:	d6650513          	addi	a0,a0,-666 # 8002fff0 <__func__.0+0x300>
    80013292:	5fb190ef          	jal	8002d08c <printf>
    80013296:	00045797          	auipc	a5,0x45
    8001329a:	d7b7c783          	lbu	a5,-645(a5) # 80058011 <excpt+0x1>
    8001329e:	0001d597          	auipc	a1,0x1d
    800132a2:	d2a58593          	addi	a1,a1,-726 # 8002ffc8 <__func__.0+0x2d8>
    800132a6:	cf99                	beqz	a5,800132c4 <software_interrupt_msi+0x1b0>
    800132a8:	57fd                	li	a5,-1
    800132aa:	6498                	ld	a4,8(s1)
    800132ac:	17fe                	slli	a5,a5,0x3f
    800132ae:	078d                	addi	a5,a5,3
    800132b0:	0001d597          	auipc	a1,0x1d
    800132b4:	d0858593          	addi	a1,a1,-760 # 8002ffb8 <__func__.0+0x2c8>
    800132b8:	00f70663          	beq	a4,a5,800132c4 <software_interrupt_msi+0x1b0>
    800132bc:	0001d597          	auipc	a1,0x1d
    800132c0:	d0c58593          	addi	a1,a1,-756 # 8002ffc8 <__func__.0+0x2d8>
    800132c4:	0001d517          	auipc	a0,0x1d
    800132c8:	d4450513          	addi	a0,a0,-700 # 80030008 <__func__.0+0x318>
    800132cc:	5c1190ef          	jal	8002d08c <printf>
    800132d0:	00045797          	auipc	a5,0x45
    800132d4:	d417c783          	lbu	a5,-703(a5) # 80058011 <excpt+0x1>
    800132d8:	c799                	beqz	a5,800132e6 <software_interrupt_msi+0x1d2>
    800132da:	57fd                	li	a5,-1
    800132dc:	6498                	ld	a4,8(s1)
    800132de:	17fe                	slli	a5,a5,0x3f
    800132e0:	078d                	addi	a5,a5,3
    800132e2:	00f70c63          	beq	a4,a5,800132fa <software_interrupt_msi+0x1e6>
    800132e6:	0001d517          	auipc	a0,0x1d
    800132ea:	d2a50513          	addi	a0,a0,-726 # 80030010 <__func__.0+0x320>
    800132ee:	59f190ef          	jal	8002d08c <printf>
    800132f2:	02900513          	li	a0,41
    800132f6:	285180ef          	jal	8002bd7a <putchar>
    800132fa:	4529                	li	a0,10
    800132fc:	27f180ef          	jal	8002bd7a <putchar>
    80013300:	c801                	beqz	s0,80013310 <software_interrupt_msi+0x1fc>
    80013302:	00045797          	auipc	a5,0x45
    80013306:	d0f7c783          	lbu	a5,-753(a5) # 80058011 <excpt+0x1>
    8001330a:	4401                	li	s0,0
    8001330c:	1c0793e3          	bnez	a5,80013cd2 <software_interrupt_msi+0xbbe>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MSI
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    80013310:	afded0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013314:	4511                	li	a0,4
    80013316:	bf3ed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8001331a:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001331e:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013322:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013326:	4511                	li	a0,4
    80013328:	be1ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    8001332c:	08200593          	li	a1,130
    80013330:	00021617          	auipc	a2,0x21
    80013334:	17060613          	addi	a2,a2,368 # 800344a0 <__func__.0+0x47b0>
    80013338:	0001d517          	auipc	a0,0x1d
    8001333c:	cb850513          	addi	a0,a0,-840 # 8002fff0 <__func__.0+0x300>
    80013340:	54d190ef          	jal	8002d08c <printf>
    80013344:	00045797          	auipc	a5,0x45
    80013348:	ccd7c783          	lbu	a5,-819(a5) # 80058011 <excpt+0x1>
    8001334c:	0001d597          	auipc	a1,0x1d
    80013350:	c7c58593          	addi	a1,a1,-900 # 8002ffc8 <__func__.0+0x2d8>
    80013354:	e789                	bnez	a5,8001335e <software_interrupt_msi+0x24a>
    80013356:	0001d597          	auipc	a1,0x1d
    8001335a:	c6258593          	addi	a1,a1,-926 # 8002ffb8 <__func__.0+0x2c8>
    8001335e:	0001d517          	auipc	a0,0x1d
    80013362:	caa50513          	addi	a0,a0,-854 # 80030008 <__func__.0+0x318>
    80013366:	527190ef          	jal	8002d08c <printf>
    8001336a:	00045797          	auipc	a5,0x45
    8001336e:	ca77c783          	lbu	a5,-857(a5) # 80058011 <excpt+0x1>
    80013372:	22079ae3          	bnez	a5,80013da6 <software_interrupt_msi+0xc92>
    80013376:	4529                	li	a0,10
    80013378:	203180ef          	jal	8002bd7a <putchar>
    8001337c:	c419                	beqz	s0,8001338a <software_interrupt_msi+0x276>
    8001337e:	00045417          	auipc	s0,0x45
    80013382:	c9344403          	lbu	s0,-877(s0) # 80058011 <excpt+0x1>
    80013386:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    8001338a:	a83ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001338e:	4511                	li	a0,4
    80013390:	b79ed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80013394:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013398:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001339c:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    800133a0:	4511                	li	a0,4
    800133a2:	b67ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    800133a6:	08200593          	li	a1,130
    800133aa:	00021617          	auipc	a2,0x21
    800133ae:	14660613          	addi	a2,a2,326 # 800344f0 <__func__.0+0x4800>
    800133b2:	0001d517          	auipc	a0,0x1d
    800133b6:	c3e50513          	addi	a0,a0,-962 # 8002fff0 <__func__.0+0x300>
    800133ba:	4d3190ef          	jal	8002d08c <printf>
    800133be:	00045797          	auipc	a5,0x45
    800133c2:	c537c783          	lbu	a5,-941(a5) # 80058011 <excpt+0x1>
    800133c6:	0001d597          	auipc	a1,0x1d
    800133ca:	c0258593          	addi	a1,a1,-1022 # 8002ffc8 <__func__.0+0x2d8>
    800133ce:	e789                	bnez	a5,800133d8 <software_interrupt_msi+0x2c4>
    800133d0:	0001d597          	auipc	a1,0x1d
    800133d4:	be858593          	addi	a1,a1,-1048 # 8002ffb8 <__func__.0+0x2c8>
    800133d8:	0001d517          	auipc	a0,0x1d
    800133dc:	c3050513          	addi	a0,a0,-976 # 80030008 <__func__.0+0x318>
    800133e0:	4ad190ef          	jal	8002d08c <printf>
    800133e4:	00045797          	auipc	a5,0x45
    800133e8:	c2d7c783          	lbu	a5,-979(a5) # 80058011 <excpt+0x1>
    800133ec:	220797e3          	bnez	a5,80013e1a <software_interrupt_msi+0xd06>
    800133f0:	4529                	li	a0,10
    800133f2:	189180ef          	jal	8002bd7a <putchar>
    800133f6:	c419                	beqz	s0,80013404 <software_interrupt_msi+0x2f0>
    800133f8:	00045417          	auipc	s0,0x45
    800133fc:	c1944403          	lbu	s0,-999(s0) # 80058011 <excpt+0x1>
    80013400:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=0，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    80013404:	a09ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013408:	4511                	li	a0,4
    8001340a:	affed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8001340e:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013412:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013416:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    8001341a:	4511                	li	a0,4
    8001341c:	aeded0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    80013420:	08200593          	li	a1,130
    80013424:	00021617          	auipc	a2,0x21
    80013428:	11c60613          	addi	a2,a2,284 # 80034540 <__func__.0+0x4850>
    8001342c:	0001d517          	auipc	a0,0x1d
    80013430:	bc450513          	addi	a0,a0,-1084 # 8002fff0 <__func__.0+0x300>
    80013434:	459190ef          	jal	8002d08c <printf>
    80013438:	00045797          	auipc	a5,0x45
    8001343c:	bd97c783          	lbu	a5,-1063(a5) # 80058011 <excpt+0x1>
    80013440:	0001d597          	auipc	a1,0x1d
    80013444:	b8858593          	addi	a1,a1,-1144 # 8002ffc8 <__func__.0+0x2d8>
    80013448:	e789                	bnez	a5,80013452 <software_interrupt_msi+0x33e>
    8001344a:	0001d597          	auipc	a1,0x1d
    8001344e:	b6e58593          	addi	a1,a1,-1170 # 8002ffb8 <__func__.0+0x2c8>
    80013452:	0001d517          	auipc	a0,0x1d
    80013456:	bb650513          	addi	a0,a0,-1098 # 80030008 <__func__.0+0x318>
    8001345a:	433190ef          	jal	8002d08c <printf>
    8001345e:	00045797          	auipc	a5,0x45
    80013462:	bb37c783          	lbu	a5,-1101(a5) # 80058011 <excpt+0x1>
    80013466:	18079ee3          	bnez	a5,80013e02 <software_interrupt_msi+0xcee>
    8001346a:	4529                	li	a0,10
    8001346c:	10f180ef          	jal	8002bd7a <putchar>
    80013470:	c419                	beqz	s0,8001347e <software_interrupt_msi+0x36a>
    80013472:	00045417          	auipc	s0,0x45
    80013476:	b9f44403          	lbu	s0,-1121(s0) # 80058011 <excpt+0x1>
    8001347a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//HS mode 下

    TEST_SETUP_EXCEPT();
    8001347e:	98fed0ef          	jal	80000e0c <test_setup_except_function>
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    80013482:	4511                	li	a0,4
    80013484:	a85ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80013488:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001348c:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013490:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80013494:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013498:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    8001349c:	450d                	li	a0,3
    8001349e:	a6bed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800134a2:	08200593          	li	a1,130
    800134a6:	00021617          	auipc	a2,0x21
    800134aa:	0ea60613          	addi	a2,a2,234 # 80034590 <__func__.0+0x48a0>
    800134ae:	0001d517          	auipc	a0,0x1d
    800134b2:	b4250513          	addi	a0,a0,-1214 # 8002fff0 <__func__.0+0x300>
    800134b6:	3d7190ef          	jal	8002d08c <printf>
    800134ba:	00045797          	auipc	a5,0x45
    800134be:	b577c783          	lbu	a5,-1193(a5) # 80058011 <excpt+0x1>
    800134c2:	0001d597          	auipc	a1,0x1d
    800134c6:	b0658593          	addi	a1,a1,-1274 # 8002ffc8 <__func__.0+0x2d8>
    800134ca:	c799                	beqz	a5,800134d8 <software_interrupt_msi+0x3c4>
    800134cc:	57fd                	li	a5,-1
    800134ce:	6498                	ld	a4,8(s1)
    800134d0:	17fe                	slli	a5,a5,0x3f
    800134d2:	078d                	addi	a5,a5,3
    800134d4:	20f702e3          	beq	a4,a5,80013ed8 <software_interrupt_msi+0xdc4>
    800134d8:	0001d517          	auipc	a0,0x1d
    800134dc:	b3050513          	addi	a0,a0,-1232 # 80030008 <__func__.0+0x318>
    800134e0:	3ad190ef          	jal	8002d08c <printf>
    800134e4:	00045797          	auipc	a5,0x45
    800134e8:	b2d7c783          	lbu	a5,-1235(a5) # 80058011 <excpt+0x1>
    800134ec:	c799                	beqz	a5,800134fa <software_interrupt_msi+0x3e6>
    800134ee:	57fd                	li	a5,-1
    800134f0:	6498                	ld	a4,8(s1)
    800134f2:	17fe                	slli	a5,a5,0x3f
    800134f4:	078d                	addi	a5,a5,3
    800134f6:	04f700e3          	beq	a4,a5,80013d36 <software_interrupt_msi+0xc22>
    800134fa:	0001d517          	auipc	a0,0x1d
    800134fe:	b1650513          	addi	a0,a0,-1258 # 80030010 <__func__.0+0x320>
    80013502:	38b190ef          	jal	8002d08c <printf>
    80013506:	02900513          	li	a0,41
    8001350a:	071180ef          	jal	8002bd7a <putchar>
    8001350e:	4529                	li	a0,10
    80013510:	06b180ef          	jal	8002bd7a <putchar>
    80013514:	c801                	beqz	s0,80013524 <software_interrupt_msi+0x410>
    80013516:	00045797          	auipc	a5,0x45
    8001351a:	afb7c783          	lbu	a5,-1285(a5) # 80058011 <excpt+0x1>
    8001351e:	4401                	li	s0,0
    80013520:	78079a63          	bnez	a5,80013cb4 <software_interrupt_msi+0xba0>
        excpt.priv == PRIV_M
    ); 

    
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    80013524:	8e9ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013528:	4511                	li	a0,4
    8001352a:	9dfed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8001352e:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013532:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013536:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8001353a:	57fd                	li	a5,-1
    8001353c:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    80013540:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80013544:	450d                	li	a0,3
    80013546:	9c3ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8001354a:	08200593          	li	a1,130
    8001354e:	00021617          	auipc	a2,0x21
    80013552:	0a260613          	addi	a2,a2,162 # 800345f0 <__func__.0+0x4900>
    80013556:	0001d517          	auipc	a0,0x1d
    8001355a:	a9a50513          	addi	a0,a0,-1382 # 8002fff0 <__func__.0+0x300>
    8001355e:	32f190ef          	jal	8002d08c <printf>
    80013562:	00045797          	auipc	a5,0x45
    80013566:	aaf7c783          	lbu	a5,-1361(a5) # 80058011 <excpt+0x1>
    8001356a:	0001d597          	auipc	a1,0x1d
    8001356e:	a5e58593          	addi	a1,a1,-1442 # 8002ffc8 <__func__.0+0x2d8>
    80013572:	c799                	beqz	a5,80013580 <software_interrupt_msi+0x46c>
    80013574:	57fd                	li	a5,-1
    80013576:	6498                	ld	a4,8(s1)
    80013578:	17fe                	slli	a5,a5,0x3f
    8001357a:	078d                	addi	a5,a5,3
    8001357c:	16f70fe3          	beq	a4,a5,80013efa <software_interrupt_msi+0xde6>
    80013580:	0001d517          	auipc	a0,0x1d
    80013584:	a8850513          	addi	a0,a0,-1400 # 80030008 <__func__.0+0x318>
    80013588:	305190ef          	jal	8002d08c <printf>
    8001358c:	00045797          	auipc	a5,0x45
    80013590:	a857c783          	lbu	a5,-1403(a5) # 80058011 <excpt+0x1>
    80013594:	c799                	beqz	a5,800135a2 <software_interrupt_msi+0x48e>
    80013596:	57fd                	li	a5,-1
    80013598:	6498                	ld	a4,8(s1)
    8001359a:	17fe                	slli	a5,a5,0x3f
    8001359c:	078d                	addi	a5,a5,3
    8001359e:	78f70363          	beq	a4,a5,80013d24 <software_interrupt_msi+0xc10>
    800135a2:	0001d517          	auipc	a0,0x1d
    800135a6:	a6e50513          	addi	a0,a0,-1426 # 80030010 <__func__.0+0x320>
    800135aa:	2e3190ef          	jal	8002d08c <printf>
    800135ae:	02900513          	li	a0,41
    800135b2:	7c8180ef          	jal	8002bd7a <putchar>
    800135b6:	4529                	li	a0,10
    800135b8:	7c2180ef          	jal	8002bd7a <putchar>
    800135bc:	c801                	beqz	s0,800135cc <software_interrupt_msi+0x4b8>
    800135be:	00045797          	auipc	a5,0x45
    800135c2:	a537c783          	lbu	a5,-1453(a5) # 80058011 <excpt+0x1>
    800135c6:	4401                	li	s0,0
    800135c8:	6c079763          	bnez	a5,80013c96 <software_interrupt_msi+0xb82>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    800135cc:	841ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800135d0:	4511                	li	a0,4
    800135d2:	937ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800135d6:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800135da:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800135de:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    800135e2:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800135e6:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800135ea:	450d                	li	a0,3
    800135ec:	91ded0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    800135f0:	08200593          	li	a1,130
    800135f4:	00021617          	auipc	a2,0x21
    800135f8:	06c60613          	addi	a2,a2,108 # 80034660 <__func__.0+0x4970>
    800135fc:	0001d517          	auipc	a0,0x1d
    80013600:	9f450513          	addi	a0,a0,-1548 # 8002fff0 <__func__.0+0x300>
    80013604:	289190ef          	jal	8002d08c <printf>
    80013608:	00045797          	auipc	a5,0x45
    8001360c:	a097c783          	lbu	a5,-1527(a5) # 80058011 <excpt+0x1>
    80013610:	0001d597          	auipc	a1,0x1d
    80013614:	9b858593          	addi	a1,a1,-1608 # 8002ffc8 <__func__.0+0x2d8>
    80013618:	e789                	bnez	a5,80013622 <software_interrupt_msi+0x50e>
    8001361a:	0001d597          	auipc	a1,0x1d
    8001361e:	99e58593          	addi	a1,a1,-1634 # 8002ffb8 <__func__.0+0x2c8>
    80013622:	0001d517          	auipc	a0,0x1d
    80013626:	9e650513          	addi	a0,a0,-1562 # 80030008 <__func__.0+0x318>
    8001362a:	263190ef          	jal	8002d08c <printf>
    8001362e:	00045797          	auipc	a5,0x45
    80013632:	9e37c783          	lbu	a5,-1565(a5) # 80058011 <excpt+0x1>
    80013636:	7a079a63          	bnez	a5,80013dea <software_interrupt_msi+0xcd6>
    8001363a:	4529                	li	a0,10
    8001363c:	73e180ef          	jal	8002bd7a <putchar>
    80013640:	c419                	beqz	s0,8001364e <software_interrupt_msi+0x53a>
    80013642:	00045417          	auipc	s0,0x45
    80013646:	9cf44403          	lbu	s0,-1585(s0) # 80058011 <excpt+0x1>
    8001364a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8001364e:	fbeed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013652:	4511                	li	a0,4
    80013654:	8b5ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013658:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001365c:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013660:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80013664:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013668:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    8001366c:	450d                	li	a0,3
    8001366e:	89bed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013672:	08200593          	li	a1,130
    80013676:	00021617          	auipc	a2,0x21
    8001367a:	05260613          	addi	a2,a2,82 # 800346c8 <__func__.0+0x49d8>
    8001367e:	0001d517          	auipc	a0,0x1d
    80013682:	97250513          	addi	a0,a0,-1678 # 8002fff0 <__func__.0+0x300>
    80013686:	207190ef          	jal	8002d08c <printf>
    8001368a:	00045797          	auipc	a5,0x45
    8001368e:	9877c783          	lbu	a5,-1657(a5) # 80058011 <excpt+0x1>
    80013692:	0001d597          	auipc	a1,0x1d
    80013696:	93658593          	addi	a1,a1,-1738 # 8002ffc8 <__func__.0+0x2d8>
    8001369a:	c799                	beqz	a5,800136a8 <software_interrupt_msi+0x594>
    8001369c:	57fd                	li	a5,-1
    8001369e:	6498                	ld	a4,8(s1)
    800136a0:	17fe                	slli	a5,a5,0x3f
    800136a2:	078d                	addi	a5,a5,3
    800136a4:	7ef70963          	beq	a4,a5,80013e96 <software_interrupt_msi+0xd82>
    800136a8:	0001d517          	auipc	a0,0x1d
    800136ac:	96050513          	addi	a0,a0,-1696 # 80030008 <__func__.0+0x318>
    800136b0:	1dd190ef          	jal	8002d08c <printf>
    800136b4:	00045797          	auipc	a5,0x45
    800136b8:	95d7c783          	lbu	a5,-1699(a5) # 80058011 <excpt+0x1>
    800136bc:	c799                	beqz	a5,800136ca <software_interrupt_msi+0x5b6>
    800136be:	57fd                	li	a5,-1
    800136c0:	6498                	ld	a4,8(s1)
    800136c2:	17fe                	slli	a5,a5,0x3f
    800136c4:	078d                	addi	a5,a5,3
    800136c6:	68f70963          	beq	a4,a5,80013d58 <software_interrupt_msi+0xc44>
    800136ca:	0001d517          	auipc	a0,0x1d
    800136ce:	94650513          	addi	a0,a0,-1722 # 80030010 <__func__.0+0x320>
    800136d2:	1bb190ef          	jal	8002d08c <printf>
    800136d6:	02900513          	li	a0,41
    800136da:	6a0180ef          	jal	8002bd7a <putchar>
    800136de:	4529                	li	a0,10
    800136e0:	69a180ef          	jal	8002bd7a <putchar>
    800136e4:	c801                	beqz	s0,800136f4 <software_interrupt_msi+0x5e0>
    800136e6:	00045797          	auipc	a5,0x45
    800136ea:	92b7c783          	lbu	a5,-1749(a5) # 80058011 <excpt+0x1>
    800136ee:	4401                	li	s0,0
    800136f0:	58079563          	bnez	a5,80013c7a <software_interrupt_msi+0xb66>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    800136f4:	f18ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800136f8:	4511                	li	a0,4
    800136fa:	80fed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800136fe:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013702:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013706:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    8001370a:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    8001370e:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80013712:	450d                	li	a0,3
    80013714:	ff4ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013718:	08200593          	li	a1,130
    8001371c:	00021617          	auipc	a2,0x21
    80013720:	01c60613          	addi	a2,a2,28 # 80034738 <__func__.0+0x4a48>
    80013724:	0001d517          	auipc	a0,0x1d
    80013728:	8cc50513          	addi	a0,a0,-1844 # 8002fff0 <__func__.0+0x300>
    8001372c:	161190ef          	jal	8002d08c <printf>
    80013730:	00045797          	auipc	a5,0x45
    80013734:	8e17c783          	lbu	a5,-1823(a5) # 80058011 <excpt+0x1>
    80013738:	0001d597          	auipc	a1,0x1d
    8001373c:	89058593          	addi	a1,a1,-1904 # 8002ffc8 <__func__.0+0x2d8>
    80013740:	c799                	beqz	a5,8001374e <software_interrupt_msi+0x63a>
    80013742:	57fd                	li	a5,-1
    80013744:	6498                	ld	a4,8(s1)
    80013746:	17fe                	slli	a5,a5,0x3f
    80013748:	078d                	addi	a5,a5,3
    8001374a:	6ef70463          	beq	a4,a5,80013e32 <software_interrupt_msi+0xd1e>
    8001374e:	0001d517          	auipc	a0,0x1d
    80013752:	8ba50513          	addi	a0,a0,-1862 # 80030008 <__func__.0+0x318>
    80013756:	137190ef          	jal	8002d08c <printf>
    8001375a:	00045797          	auipc	a5,0x45
    8001375e:	8b77c783          	lbu	a5,-1865(a5) # 80058011 <excpt+0x1>
    80013762:	c799                	beqz	a5,80013770 <software_interrupt_msi+0x65c>
    80013764:	57fd                	li	a5,-1
    80013766:	6498                	ld	a4,8(s1)
    80013768:	17fe                	slli	a5,a5,0x3f
    8001376a:	078d                	addi	a5,a5,3
    8001376c:	5ef70e63          	beq	a4,a5,80013d68 <software_interrupt_msi+0xc54>
    80013770:	0001d517          	auipc	a0,0x1d
    80013774:	8a050513          	addi	a0,a0,-1888 # 80030010 <__func__.0+0x320>
    80013778:	115190ef          	jal	8002d08c <printf>
    8001377c:	02900513          	li	a0,41
    80013780:	5fa180ef          	jal	8002bd7a <putchar>
    80013784:	4529                	li	a0,10
    80013786:	5f4180ef          	jal	8002bd7a <putchar>
    8001378a:	c801                	beqz	s0,8001379a <software_interrupt_msi+0x686>
    8001378c:	00045797          	auipc	a5,0x45
    80013790:	8857c783          	lbu	a5,-1915(a5) # 80058011 <excpt+0x1>
    80013794:	4401                	li	s0,0
    80013796:	4c079463          	bnez	a5,80013c5e <software_interrupt_msi+0xb4a>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    8001379a:	e72ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001379e:	4511                	li	a0,4
    800137a0:	f68ed0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    800137a4:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800137a8:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800137ac:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    800137b0:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800137b4:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800137b8:	450d                	li	a0,3
    800137ba:	f4eed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    800137be:	08200593          	li	a1,130
    800137c2:	00021617          	auipc	a2,0x21
    800137c6:	fe660613          	addi	a2,a2,-26 # 800347a8 <__func__.0+0x4ab8>
    800137ca:	0001d517          	auipc	a0,0x1d
    800137ce:	82650513          	addi	a0,a0,-2010 # 8002fff0 <__func__.0+0x300>
    800137d2:	0bb190ef          	jal	8002d08c <printf>
    800137d6:	00045797          	auipc	a5,0x45
    800137da:	83b7c783          	lbu	a5,-1989(a5) # 80058011 <excpt+0x1>
    800137de:	0001c597          	auipc	a1,0x1c
    800137e2:	7ea58593          	addi	a1,a1,2026 # 8002ffc8 <__func__.0+0x2d8>
    800137e6:	e789                	bnez	a5,800137f0 <software_interrupt_msi+0x6dc>
    800137e8:	0001c597          	auipc	a1,0x1c
    800137ec:	7d058593          	addi	a1,a1,2000 # 8002ffb8 <__func__.0+0x2c8>
    800137f0:	0001d517          	auipc	a0,0x1d
    800137f4:	81850513          	addi	a0,a0,-2024 # 80030008 <__func__.0+0x318>
    800137f8:	095190ef          	jal	8002d08c <printf>
    800137fc:	00045797          	auipc	a5,0x45
    80013800:	8157c783          	lbu	a5,-2027(a5) # 80058011 <excpt+0x1>
    80013804:	5c079863          	bnez	a5,80013dd4 <software_interrupt_msi+0xcc0>
    80013808:	4529                	li	a0,10
    8001380a:	570180ef          	jal	8002bd7a <putchar>
    8001380e:	c419                	beqz	s0,8001381c <software_interrupt_msi+0x708>
    80013810:	00045417          	auipc	s0,0x45
    80013814:	80144403          	lbu	s0,-2047(s0) # 80058011 <excpt+0x1>
    80013818:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//vs mode 下

    TEST_SETUP_EXCEPT();
    8001381c:	df0ed0ef          	jal	80000e0c <test_setup_except_function>
    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    80013820:	4511                	li	a0,4
    80013822:	ee6ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80013826:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001382a:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001382e:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80013832:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013836:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    8001383a:	4509                	li	a0,2
    8001383c:	ecced0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013840:	08200593          	li	a1,130
    80013844:	00021617          	auipc	a2,0x21
    80013848:	fc460613          	addi	a2,a2,-60 # 80034808 <__func__.0+0x4b18>
    8001384c:	0001c517          	auipc	a0,0x1c
    80013850:	7a450513          	addi	a0,a0,1956 # 8002fff0 <__func__.0+0x300>
    80013854:	039190ef          	jal	8002d08c <printf>
    80013858:	00044797          	auipc	a5,0x44
    8001385c:	7b97c783          	lbu	a5,1977(a5) # 80058011 <excpt+0x1>
    80013860:	0001c597          	auipc	a1,0x1c
    80013864:	76858593          	addi	a1,a1,1896 # 8002ffc8 <__func__.0+0x2d8>
    80013868:	c799                	beqz	a5,80013876 <software_interrupt_msi+0x762>
    8001386a:	57fd                	li	a5,-1
    8001386c:	6498                	ld	a4,8(s1)
    8001386e:	17fe                	slli	a5,a5,0x3f
    80013870:	078d                	addi	a5,a5,3
    80013872:	64f70363          	beq	a4,a5,80013eb8 <software_interrupt_msi+0xda4>
    80013876:	0001c517          	auipc	a0,0x1c
    8001387a:	79250513          	addi	a0,a0,1938 # 80030008 <__func__.0+0x318>
    8001387e:	00f190ef          	jal	8002d08c <printf>
    80013882:	00044797          	auipc	a5,0x44
    80013886:	78f7c783          	lbu	a5,1935(a5) # 80058011 <excpt+0x1>
    8001388a:	c799                	beqz	a5,80013898 <software_interrupt_msi+0x784>
    8001388c:	57fd                	li	a5,-1
    8001388e:	6498                	ld	a4,8(s1)
    80013890:	17fe                	slli	a5,a5,0x3f
    80013892:	078d                	addi	a5,a5,3
    80013894:	4af70a63          	beq	a4,a5,80013d48 <software_interrupt_msi+0xc34>
    80013898:	0001c517          	auipc	a0,0x1c
    8001389c:	77850513          	addi	a0,a0,1912 # 80030010 <__func__.0+0x320>
    800138a0:	7ec190ef          	jal	8002d08c <printf>
    800138a4:	02900513          	li	a0,41
    800138a8:	4d2180ef          	jal	8002bd7a <putchar>
    800138ac:	4529                	li	a0,10
    800138ae:	4cc180ef          	jal	8002bd7a <putchar>
    800138b2:	c801                	beqz	s0,800138c2 <software_interrupt_msi+0x7ae>
    800138b4:	00044797          	auipc	a5,0x44
    800138b8:	75d7c783          	lbu	a5,1885(a5) # 80058011 <excpt+0x1>
    800138bc:	4401                	li	s0,0
    800138be:	38079263          	bnez	a5,80013c42 <software_interrupt_msi+0xb2e>
        excpt.priv == PRIV_M
    ); 


    //vs模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    800138c2:	d4aed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800138c6:	4511                	li	a0,4
    800138c8:	e40ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800138cc:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800138d0:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800138d4:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    800138d8:	57fd                	li	a5,-1
    800138da:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    800138de:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    800138e2:	4509                	li	a0,2
    800138e4:	e24ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800138e8:	08200593          	li	a1,130
    800138ec:	00021617          	auipc	a2,0x21
    800138f0:	f7c60613          	addi	a2,a2,-132 # 80034868 <__func__.0+0x4b78>
    800138f4:	0001c517          	auipc	a0,0x1c
    800138f8:	6fc50513          	addi	a0,a0,1788 # 8002fff0 <__func__.0+0x300>
    800138fc:	790190ef          	jal	8002d08c <printf>
    80013900:	00044797          	auipc	a5,0x44
    80013904:	7117c783          	lbu	a5,1809(a5) # 80058011 <excpt+0x1>
    80013908:	0001c597          	auipc	a1,0x1c
    8001390c:	6c058593          	addi	a1,a1,1728 # 8002ffc8 <__func__.0+0x2d8>
    80013910:	c799                	beqz	a5,8001391e <software_interrupt_msi+0x80a>
    80013912:	57fd                	li	a5,-1
    80013914:	6498                	ld	a4,8(s1)
    80013916:	17fe                	slli	a5,a5,0x3f
    80013918:	078d                	addi	a5,a5,3
    8001391a:	62f70163          	beq	a4,a5,80013f3c <software_interrupt_msi+0xe28>
    8001391e:	0001c517          	auipc	a0,0x1c
    80013922:	6ea50513          	addi	a0,a0,1770 # 80030008 <__func__.0+0x318>
    80013926:	766190ef          	jal	8002d08c <printf>
    8001392a:	00044797          	auipc	a5,0x44
    8001392e:	6e77c783          	lbu	a5,1767(a5) # 80058011 <excpt+0x1>
    80013932:	c799                	beqz	a5,80013940 <software_interrupt_msi+0x82c>
    80013934:	57fd                	li	a5,-1
    80013936:	6498                	ld	a4,8(s1)
    80013938:	17fe                	slli	a5,a5,0x3f
    8001393a:	078d                	addi	a5,a5,3
    8001393c:	3cf70463          	beq	a4,a5,80013d04 <software_interrupt_msi+0xbf0>
    80013940:	0001c517          	auipc	a0,0x1c
    80013944:	6d050513          	addi	a0,a0,1744 # 80030010 <__func__.0+0x320>
    80013948:	744190ef          	jal	8002d08c <printf>
    8001394c:	02900513          	li	a0,41
    80013950:	42a180ef          	jal	8002bd7a <putchar>
    80013954:	4529                	li	a0,10
    80013956:	424180ef          	jal	8002bd7a <putchar>
    8001395a:	c801                	beqz	s0,8001396a <software_interrupt_msi+0x856>
    8001395c:	00044797          	auipc	a5,0x44
    80013960:	6b57c783          	lbu	a5,1717(a5) # 80058011 <excpt+0x1>
    80013964:	4401                	li	s0,0
    80013966:	2c079063          	bnez	a5,80013c26 <software_interrupt_msi+0xb12>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    8001396a:	ca2ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001396e:	4511                	li	a0,4
    80013970:	d98ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013974:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013978:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001397c:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80013980:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013984:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013988:	4509                	li	a0,2
    8001398a:	d7eed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    8001398e:	08200593          	li	a1,130
    80013992:	00021617          	auipc	a2,0x21
    80013996:	f4660613          	addi	a2,a2,-186 # 800348d8 <__func__.0+0x4be8>
    8001399a:	0001c517          	auipc	a0,0x1c
    8001399e:	65650513          	addi	a0,a0,1622 # 8002fff0 <__func__.0+0x300>
    800139a2:	6ea190ef          	jal	8002d08c <printf>
    800139a6:	00044797          	auipc	a5,0x44
    800139aa:	66b7c783          	lbu	a5,1643(a5) # 80058011 <excpt+0x1>
    800139ae:	0001c597          	auipc	a1,0x1c
    800139b2:	61a58593          	addi	a1,a1,1562 # 8002ffc8 <__func__.0+0x2d8>
    800139b6:	e789                	bnez	a5,800139c0 <software_interrupt_msi+0x8ac>
    800139b8:	0001c597          	auipc	a1,0x1c
    800139bc:	60058593          	addi	a1,a1,1536 # 8002ffb8 <__func__.0+0x2c8>
    800139c0:	0001c517          	auipc	a0,0x1c
    800139c4:	64850513          	addi	a0,a0,1608 # 80030008 <__func__.0+0x318>
    800139c8:	6c4190ef          	jal	8002d08c <printf>
    800139cc:	00044797          	auipc	a5,0x44
    800139d0:	6457c783          	lbu	a5,1605(a5) # 80058011 <excpt+0x1>
    800139d4:	3a079e63          	bnez	a5,80013d90 <software_interrupt_msi+0xc7c>
    800139d8:	4529                	li	a0,10
    800139da:	3a0180ef          	jal	8002bd7a <putchar>
    800139de:	c419                	beqz	s0,800139ec <software_interrupt_msi+0x8d8>
    800139e0:	00044417          	auipc	s0,0x44
    800139e4:	63144403          	lbu	s0,1585(s0) # 80058011 <excpt+0x1>
    800139e8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    800139ec:	c20ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800139f0:	4511                	li	a0,4
    800139f2:	d16ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800139f6:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800139fa:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800139fe:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80013a02:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013a06:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013a0a:	4509                	li	a0,2
    80013a0c:	cfced0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013a10:	08200593          	li	a1,130
    80013a14:	00021617          	auipc	a2,0x21
    80013a18:	f2c60613          	addi	a2,a2,-212 # 80034940 <__func__.0+0x4c50>
    80013a1c:	0001c517          	auipc	a0,0x1c
    80013a20:	5d450513          	addi	a0,a0,1492 # 8002fff0 <__func__.0+0x300>
    80013a24:	668190ef          	jal	8002d08c <printf>
    80013a28:	00044797          	auipc	a5,0x44
    80013a2c:	5e97c783          	lbu	a5,1513(a5) # 80058011 <excpt+0x1>
    80013a30:	0001c597          	auipc	a1,0x1c
    80013a34:	59858593          	addi	a1,a1,1432 # 8002ffc8 <__func__.0+0x2d8>
    80013a38:	c799                	beqz	a5,80013a46 <software_interrupt_msi+0x932>
    80013a3a:	57fd                	li	a5,-1
    80013a3c:	6498                	ld	a4,8(s1)
    80013a3e:	17fe                	slli	a5,a5,0x3f
    80013a40:	078d                	addi	a5,a5,3
    80013a42:	40f70963          	beq	a4,a5,80013e54 <software_interrupt_msi+0xd40>
    80013a46:	0001c517          	auipc	a0,0x1c
    80013a4a:	5c250513          	addi	a0,a0,1474 # 80030008 <__func__.0+0x318>
    80013a4e:	63e190ef          	jal	8002d08c <printf>
    80013a52:	00044797          	auipc	a5,0x44
    80013a56:	5bf7c783          	lbu	a5,1471(a5) # 80058011 <excpt+0x1>
    80013a5a:	c799                	beqz	a5,80013a68 <software_interrupt_msi+0x954>
    80013a5c:	57fd                	li	a5,-1
    80013a5e:	6498                	ld	a4,8(s1)
    80013a60:	17fe                	slli	a5,a5,0x3f
    80013a62:	078d                	addi	a5,a5,3
    80013a64:	26f70f63          	beq	a4,a5,80013ce2 <software_interrupt_msi+0xbce>
    80013a68:	0001c517          	auipc	a0,0x1c
    80013a6c:	5a850513          	addi	a0,a0,1448 # 80030010 <__func__.0+0x320>
    80013a70:	61c190ef          	jal	8002d08c <printf>
    80013a74:	02900513          	li	a0,41
    80013a78:	302180ef          	jal	8002bd7a <putchar>
    80013a7c:	4529                	li	a0,10
    80013a7e:	2fc180ef          	jal	8002bd7a <putchar>
    80013a82:	c801                	beqz	s0,80013a92 <software_interrupt_msi+0x97e>
    80013a84:	00044797          	auipc	a5,0x44
    80013a88:	58d7c783          	lbu	a5,1421(a5) # 80058011 <excpt+0x1>
    80013a8c:	4401                	li	s0,0
    80013a8e:	16079e63          	bnez	a5,80013c0a <software_interrupt_msi+0xaf6>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80013a92:	b7aed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013a96:	4511                	li	a0,4
    80013a98:	c70ed0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013a9c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013aa0:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013aa4:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    80013aa8:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    80013aac:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013ab0:	4509                	li	a0,2
    80013ab2:	c56ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013ab6:	08200593          	li	a1,130
    80013aba:	00021617          	auipc	a2,0x21
    80013abe:	ef660613          	addi	a2,a2,-266 # 800349b0 <__func__.0+0x4cc0>
    80013ac2:	0001c517          	auipc	a0,0x1c
    80013ac6:	52e50513          	addi	a0,a0,1326 # 8002fff0 <__func__.0+0x300>
    80013aca:	5c2190ef          	jal	8002d08c <printf>
    80013ace:	00044797          	auipc	a5,0x44
    80013ad2:	5437c783          	lbu	a5,1347(a5) # 80058011 <excpt+0x1>
    80013ad6:	0001c597          	auipc	a1,0x1c
    80013ada:	4f258593          	addi	a1,a1,1266 # 8002ffc8 <__func__.0+0x2d8>
    80013ade:	c799                	beqz	a5,80013aec <software_interrupt_msi+0x9d8>
    80013ae0:	57fd                	li	a5,-1
    80013ae2:	6498                	ld	a4,8(s1)
    80013ae4:	17fe                	slli	a5,a5,0x3f
    80013ae6:	078d                	addi	a5,a5,3
    80013ae8:	42f70a63          	beq	a4,a5,80013f1c <software_interrupt_msi+0xe08>
    80013aec:	0001c517          	auipc	a0,0x1c
    80013af0:	51c50513          	addi	a0,a0,1308 # 80030008 <__func__.0+0x318>
    80013af4:	598190ef          	jal	8002d08c <printf>
    80013af8:	00044797          	auipc	a5,0x44
    80013afc:	5197c783          	lbu	a5,1305(a5) # 80058011 <excpt+0x1>
    80013b00:	c799                	beqz	a5,80013b0e <software_interrupt_msi+0x9fa>
    80013b02:	57fd                	li	a5,-1
    80013b04:	6498                	ld	a4,8(s1)
    80013b06:	17fe                	slli	a5,a5,0x3f
    80013b08:	078d                	addi	a5,a5,3
    80013b0a:	20f70563          	beq	a4,a5,80013d14 <software_interrupt_msi+0xc00>
    80013b0e:	0001c517          	auipc	a0,0x1c
    80013b12:	50250513          	addi	a0,a0,1282 # 80030010 <__func__.0+0x320>
    80013b16:	576190ef          	jal	8002d08c <printf>
    80013b1a:	02900513          	li	a0,41
    80013b1e:	25c180ef          	jal	8002bd7a <putchar>
    80013b22:	4529                	li	a0,10
    80013b24:	256180ef          	jal	8002bd7a <putchar>
    80013b28:	c419                	beqz	s0,80013b36 <software_interrupt_msi+0xa22>
    80013b2a:	00044797          	auipc	a5,0x44
    80013b2e:	4e77c783          	lbu	a5,1255(a5) # 80058011 <excpt+0x1>
    80013b32:	4401                	li	s0,0
    80013b34:	efcd                	bnez	a5,80013bee <software_interrupt_msi+0xada>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80013b36:	ad6ed0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80013b3a:	4511                	li	a0,4
    80013b3c:	bcced0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    80013b40:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013b44:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013b48:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80013b4c:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013b50:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013b54:	4509                	li	a0,2
    80013b56:	bb2ed0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013b5a:	08200593          	li	a1,130
    80013b5e:	00021617          	auipc	a2,0x21
    80013b62:	ec260613          	addi	a2,a2,-318 # 80034a20 <__func__.0+0x4d30>
    80013b66:	0001c517          	auipc	a0,0x1c
    80013b6a:	48a50513          	addi	a0,a0,1162 # 8002fff0 <__func__.0+0x300>
    80013b6e:	51e190ef          	jal	8002d08c <printf>
    80013b72:	00044797          	auipc	a5,0x44
    80013b76:	49f7c783          	lbu	a5,1183(a5) # 80058011 <excpt+0x1>
    80013b7a:	0001c597          	auipc	a1,0x1c
    80013b7e:	44e58593          	addi	a1,a1,1102 # 8002ffc8 <__func__.0+0x2d8>
    80013b82:	e789                	bnez	a5,80013b8c <software_interrupt_msi+0xa78>
    80013b84:	0001c597          	auipc	a1,0x1c
    80013b88:	43458593          	addi	a1,a1,1076 # 8002ffb8 <__func__.0+0x2c8>
    80013b8c:	0001c517          	auipc	a0,0x1c
    80013b90:	47c50513          	addi	a0,a0,1148 # 80030008 <__func__.0+0x318>
    80013b94:	4f8190ef          	jal	8002d08c <printf>
    80013b98:	00044797          	auipc	a5,0x44
    80013b9c:	4797c783          	lbu	a5,1145(a5) # 80058011 <excpt+0x1>
    80013ba0:	20079f63          	bnez	a5,80013dbe <software_interrupt_msi+0xcaa>
    80013ba4:	4529                	li	a0,10
    80013ba6:	1d4180ef          	jal	8002bd7a <putchar>
    80013baa:	c411                	beqz	s0,80013bb6 <software_interrupt_msi+0xaa2>
    80013bac:	00044797          	auipc	a5,0x44
    80013bb0:	4657c783          	lbu	a5,1125(a5) # 80058011 <excpt+0x1>
    80013bb4:	c79d                	beqz	a5,80013be2 <software_interrupt_msi+0xace>
    80013bb6:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80013bb8:	0001c597          	auipc	a1,0x1c
    80013bbc:	41058593          	addi	a1,a1,1040 # 8002ffc8 <__func__.0+0x2d8>
    80013bc0:	0001c517          	auipc	a0,0x1c
    80013bc4:	4b050513          	addi	a0,a0,1200 # 80030070 <__func__.0+0x380>
    80013bc8:	4c4190ef          	jal	8002d08c <printf>
    80013bcc:	4511                	li	a0,4
    80013bce:	b3aed0ef          	jal	80000f08 <goto_priv>
    80013bd2:	d01ed0ef          	jal	800018d2 <reset_state>
}
    80013bd6:	60e2                	ld	ra,24(sp)
    80013bd8:	8522                	mv	a0,s0
    80013bda:	6442                	ld	s0,16(sp)
    80013bdc:	64a2                	ld	s1,8(sp)
    80013bde:	6105                	addi	sp,sp,32
    80013be0:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013be2:	4405                	li	s0,1
    TEST_END();
    80013be4:	0001c597          	auipc	a1,0x1c
    80013be8:	3d458593          	addi	a1,a1,980 # 8002ffb8 <__func__.0+0x2c8>
    80013bec:	bfd1                	j	80013bc0 <software_interrupt_msi+0xaac>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013bee:	57fd                	li	a5,-1
    80013bf0:	6498                	ld	a4,8(s1)
    80013bf2:	17fe                	slli	a5,a5,0x3f
    80013bf4:	078d                	addi	a5,a5,3
    80013bf6:	f4f710e3          	bne	a4,a5,80013b36 <software_interrupt_msi+0xa22>
    80013bfa:	00044417          	auipc	s0,0x44
    80013bfe:	41a42403          	lw	s0,1050(s0) # 80058014 <excpt+0x4>
    80013c02:	1475                	addi	s0,s0,-3
    80013c04:	00143413          	seqz	s0,s0
    80013c08:	b73d                	j	80013b36 <software_interrupt_msi+0xa22>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013c0a:	57fd                	li	a5,-1
    80013c0c:	6498                	ld	a4,8(s1)
    80013c0e:	17fe                	slli	a5,a5,0x3f
    80013c10:	078d                	addi	a5,a5,3
    80013c12:	e8f710e3          	bne	a4,a5,80013a92 <software_interrupt_msi+0x97e>
    80013c16:	00044417          	auipc	s0,0x44
    80013c1a:	3fe42403          	lw	s0,1022(s0) # 80058014 <excpt+0x4>
    80013c1e:	1471                	addi	s0,s0,-4
    80013c20:	00143413          	seqz	s0,s0
    80013c24:	b5bd                	j	80013a92 <software_interrupt_msi+0x97e>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013c26:	57fd                	li	a5,-1
    80013c28:	6498                	ld	a4,8(s1)
    80013c2a:	17fe                	slli	a5,a5,0x3f
    80013c2c:	078d                	addi	a5,a5,3
    80013c2e:	d2f71ee3          	bne	a4,a5,8001396a <software_interrupt_msi+0x856>
    80013c32:	00044417          	auipc	s0,0x44
    80013c36:	3e242403          	lw	s0,994(s0) # 80058014 <excpt+0x4>
    80013c3a:	1475                	addi	s0,s0,-3
    80013c3c:	00143413          	seqz	s0,s0
    80013c40:	b32d                	j	8001396a <software_interrupt_msi+0x856>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013c42:	57fd                	li	a5,-1
    80013c44:	6498                	ld	a4,8(s1)
    80013c46:	17fe                	slli	a5,a5,0x3f
    80013c48:	078d                	addi	a5,a5,3
    80013c4a:	c6f71ce3          	bne	a4,a5,800138c2 <software_interrupt_msi+0x7ae>
    80013c4e:	00044417          	auipc	s0,0x44
    80013c52:	3c642403          	lw	s0,966(s0) # 80058014 <excpt+0x4>
    80013c56:	1471                	addi	s0,s0,-4
    80013c58:	00143413          	seqz	s0,s0
    80013c5c:	b19d                	j	800138c2 <software_interrupt_msi+0x7ae>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013c5e:	57fd                	li	a5,-1
    80013c60:	6498                	ld	a4,8(s1)
    80013c62:	17fe                	slli	a5,a5,0x3f
    80013c64:	078d                	addi	a5,a5,3
    80013c66:	b2f71ae3          	bne	a4,a5,8001379a <software_interrupt_msi+0x686>
    80013c6a:	00044417          	auipc	s0,0x44
    80013c6e:	3aa42403          	lw	s0,938(s0) # 80058014 <excpt+0x4>
    80013c72:	1475                	addi	s0,s0,-3
    80013c74:	00143413          	seqz	s0,s0
    80013c78:	b60d                	j	8001379a <software_interrupt_msi+0x686>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013c7a:	57fd                	li	a5,-1
    80013c7c:	6498                	ld	a4,8(s1)
    80013c7e:	17fe                	slli	a5,a5,0x3f
    80013c80:	078d                	addi	a5,a5,3
    80013c82:	a6f719e3          	bne	a4,a5,800136f4 <software_interrupt_msi+0x5e0>
    80013c86:	00044417          	auipc	s0,0x44
    80013c8a:	38e42403          	lw	s0,910(s0) # 80058014 <excpt+0x4>
    80013c8e:	1471                	addi	s0,s0,-4
    80013c90:	00143413          	seqz	s0,s0
    80013c94:	b485                	j	800136f4 <software_interrupt_msi+0x5e0>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013c96:	57fd                	li	a5,-1
    80013c98:	6498                	ld	a4,8(s1)
    80013c9a:	17fe                	slli	a5,a5,0x3f
    80013c9c:	078d                	addi	a5,a5,3
    80013c9e:	92f717e3          	bne	a4,a5,800135cc <software_interrupt_msi+0x4b8>
    80013ca2:	00044417          	auipc	s0,0x44
    80013ca6:	37242403          	lw	s0,882(s0) # 80058014 <excpt+0x4>
    80013caa:	1475                	addi	s0,s0,-3
    80013cac:	00143413          	seqz	s0,s0
    80013cb0:	91dff06f          	j	800135cc <software_interrupt_msi+0x4b8>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013cb4:	57fd                	li	a5,-1
    80013cb6:	6498                	ld	a4,8(s1)
    80013cb8:	17fe                	slli	a5,a5,0x3f
    80013cba:	078d                	addi	a5,a5,3
    80013cbc:	86f714e3          	bne	a4,a5,80013524 <software_interrupt_msi+0x410>
    80013cc0:	00044417          	auipc	s0,0x44
    80013cc4:	35442403          	lw	s0,852(s0) # 80058014 <excpt+0x4>
    80013cc8:	1471                	addi	s0,s0,-4
    80013cca:	00143413          	seqz	s0,s0
    80013cce:	857ff06f          	j	80013524 <software_interrupt_msi+0x410>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    80013cd2:	6480                	ld	s0,8(s1)
    80013cd4:	57ed                	li	a5,-5
    80013cd6:	8385                	srli	a5,a5,0x1
    80013cd8:	943e                	add	s0,s0,a5
    80013cda:	00143413          	seqz	s0,s0
    80013cde:	e32ff06f          	j	80013310 <software_interrupt_msi+0x1fc>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013ce2:	00044717          	auipc	a4,0x44
    80013ce6:	33272703          	lw	a4,818(a4) # 80058014 <excpt+0x4>
    80013cea:	4791                	li	a5,4
    80013cec:	d6f71ee3          	bne	a4,a5,80013a68 <software_interrupt_msi+0x954>
    80013cf0:	b371                	j	80013a7c <software_interrupt_msi+0x968>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013cf2:	00044717          	auipc	a4,0x44
    80013cf6:	32272703          	lw	a4,802(a4) # 80058014 <excpt+0x4>
    80013cfa:	4791                	li	a5,4
    80013cfc:	caf71d63          	bne	a4,a5,800131b6 <software_interrupt_msi+0xa2>
    80013d00:	ccaff06f          	j	800131ca <software_interrupt_msi+0xb6>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013d04:	00044717          	auipc	a4,0x44
    80013d08:	31072703          	lw	a4,784(a4) # 80058014 <excpt+0x4>
    80013d0c:	478d                	li	a5,3
    80013d0e:	c2f719e3          	bne	a4,a5,80013940 <software_interrupt_msi+0x82c>
    80013d12:	b189                	j	80013954 <software_interrupt_msi+0x840>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013d14:	00044717          	auipc	a4,0x44
    80013d18:	30072703          	lw	a4,768(a4) # 80058014 <excpt+0x4>
    80013d1c:	478d                	li	a5,3
    80013d1e:	def718e3          	bne	a4,a5,80013b0e <software_interrupt_msi+0x9fa>
    80013d22:	b501                	j	80013b22 <software_interrupt_msi+0xa0e>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013d24:	00044717          	auipc	a4,0x44
    80013d28:	2f072703          	lw	a4,752(a4) # 80058014 <excpt+0x4>
    80013d2c:	478d                	li	a5,3
    80013d2e:	86f71ae3          	bne	a4,a5,800135a2 <software_interrupt_msi+0x48e>
    80013d32:	885ff06f          	j	800135b6 <software_interrupt_msi+0x4a2>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013d36:	00044717          	auipc	a4,0x44
    80013d3a:	2de72703          	lw	a4,734(a4) # 80058014 <excpt+0x4>
    80013d3e:	4791                	li	a5,4
    80013d40:	faf71d63          	bne	a4,a5,800134fa <software_interrupt_msi+0x3e6>
    80013d44:	fcaff06f          	j	8001350e <software_interrupt_msi+0x3fa>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013d48:	00044717          	auipc	a4,0x44
    80013d4c:	2cc72703          	lw	a4,716(a4) # 80058014 <excpt+0x4>
    80013d50:	4791                	li	a5,4
    80013d52:	b4f713e3          	bne	a4,a5,80013898 <software_interrupt_msi+0x784>
    80013d56:	be99                	j	800138ac <software_interrupt_msi+0x798>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013d58:	00044717          	auipc	a4,0x44
    80013d5c:	2bc72703          	lw	a4,700(a4) # 80058014 <excpt+0x4>
    80013d60:	4791                	li	a5,4
    80013d62:	96f714e3          	bne	a4,a5,800136ca <software_interrupt_msi+0x5b6>
    80013d66:	baa5                	j	800136de <software_interrupt_msi+0x5ca>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013d68:	00044717          	auipc	a4,0x44
    80013d6c:	2ac72703          	lw	a4,684(a4) # 80058014 <excpt+0x4>
    80013d70:	478d                	li	a5,3
    80013d72:	9ef71fe3          	bne	a4,a5,80013770 <software_interrupt_msi+0x65c>
    80013d76:	b439                	j	80013784 <software_interrupt_msi+0x670>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    80013d78:	0001c517          	auipc	a0,0x1c
    80013d7c:	29850513          	addi	a0,a0,664 # 80030010 <__func__.0+0x320>
    80013d80:	30c190ef          	jal	8002d08c <printf>
    80013d84:	02900513          	li	a0,41
    80013d88:	7f3170ef          	jal	8002bd7a <putchar>
    80013d8c:	cc2ff06f          	j	8001324e <software_interrupt_msi+0x13a>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013d90:	0001c517          	auipc	a0,0x1c
    80013d94:	28050513          	addi	a0,a0,640 # 80030010 <__func__.0+0x320>
    80013d98:	2f4190ef          	jal	8002d08c <printf>
    80013d9c:	02900513          	li	a0,41
    80013da0:	7db170ef          	jal	8002bd7a <putchar>
    80013da4:	b915                	j	800139d8 <software_interrupt_msi+0x8c4>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80013da6:	0001c517          	auipc	a0,0x1c
    80013daa:	26a50513          	addi	a0,a0,618 # 80030010 <__func__.0+0x320>
    80013dae:	2de190ef          	jal	8002d08c <printf>
    80013db2:	02900513          	li	a0,41
    80013db6:	7c5170ef          	jal	8002bd7a <putchar>
    80013dba:	dbcff06f          	j	80013376 <software_interrupt_msi+0x262>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013dbe:	0001c517          	auipc	a0,0x1c
    80013dc2:	25250513          	addi	a0,a0,594 # 80030010 <__func__.0+0x320>
    80013dc6:	2c6190ef          	jal	8002d08c <printf>
    80013dca:	02900513          	li	a0,41
    80013dce:	7ad170ef          	jal	8002bd7a <putchar>
    80013dd2:	bbc9                	j	80013ba4 <software_interrupt_msi+0xa90>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013dd4:	0001c517          	auipc	a0,0x1c
    80013dd8:	23c50513          	addi	a0,a0,572 # 80030010 <__func__.0+0x320>
    80013ddc:	2b0190ef          	jal	8002d08c <printf>
    80013de0:	02900513          	li	a0,41
    80013de4:	797170ef          	jal	8002bd7a <putchar>
    80013de8:	b405                	j	80013808 <software_interrupt_msi+0x6f4>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013dea:	0001c517          	auipc	a0,0x1c
    80013dee:	22650513          	addi	a0,a0,550 # 80030010 <__func__.0+0x320>
    80013df2:	29a190ef          	jal	8002d08c <printf>
    80013df6:	02900513          	li	a0,41
    80013dfa:	781170ef          	jal	8002bd7a <putchar>
    80013dfe:	83dff06f          	j	8001363a <software_interrupt_msi+0x526>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    80013e02:	0001c517          	auipc	a0,0x1c
    80013e06:	20e50513          	addi	a0,a0,526 # 80030010 <__func__.0+0x320>
    80013e0a:	282190ef          	jal	8002d08c <printf>
    80013e0e:	02900513          	li	a0,41
    80013e12:	769170ef          	jal	8002bd7a <putchar>
    80013e16:	e54ff06f          	j	8001346a <software_interrupt_msi+0x356>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    80013e1a:	0001c517          	auipc	a0,0x1c
    80013e1e:	1f650513          	addi	a0,a0,502 # 80030010 <__func__.0+0x320>
    80013e22:	26a190ef          	jal	8002d08c <printf>
    80013e26:	02900513          	li	a0,41
    80013e2a:	751170ef          	jal	8002bd7a <putchar>
    80013e2e:	dc2ff06f          	j	800133f0 <software_interrupt_msi+0x2dc>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013e32:	00044717          	auipc	a4,0x44
    80013e36:	1e272703          	lw	a4,482(a4) # 80058014 <excpt+0x4>
    80013e3a:	478d                	li	a5,3
    80013e3c:	0001c597          	auipc	a1,0x1c
    80013e40:	17c58593          	addi	a1,a1,380 # 8002ffb8 <__func__.0+0x2c8>
    80013e44:	90f705e3          	beq	a4,a5,8001374e <software_interrupt_msi+0x63a>
    80013e48:	0001c597          	auipc	a1,0x1c
    80013e4c:	18058593          	addi	a1,a1,384 # 8002ffc8 <__func__.0+0x2d8>
    80013e50:	8ffff06f          	j	8001374e <software_interrupt_msi+0x63a>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013e54:	00044717          	auipc	a4,0x44
    80013e58:	1c072703          	lw	a4,448(a4) # 80058014 <excpt+0x4>
    80013e5c:	4791                	li	a5,4
    80013e5e:	0001c597          	auipc	a1,0x1c
    80013e62:	15a58593          	addi	a1,a1,346 # 8002ffb8 <__func__.0+0x2c8>
    80013e66:	bef700e3          	beq	a4,a5,80013a46 <software_interrupt_msi+0x932>
    80013e6a:	0001c597          	auipc	a1,0x1c
    80013e6e:	15e58593          	addi	a1,a1,350 # 8002ffc8 <__func__.0+0x2d8>
    80013e72:	bed1                	j	80013a46 <software_interrupt_msi+0x932>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013e74:	00044717          	auipc	a4,0x44
    80013e78:	1a072703          	lw	a4,416(a4) # 80058014 <excpt+0x4>
    80013e7c:	4791                	li	a5,4
    80013e7e:	0001c597          	auipc	a1,0x1c
    80013e82:	13a58593          	addi	a1,a1,314 # 8002ffb8 <__func__.0+0x2c8>
    80013e86:	b0f70763          	beq	a4,a5,80013194 <software_interrupt_msi+0x80>
    80013e8a:	0001c597          	auipc	a1,0x1c
    80013e8e:	13e58593          	addi	a1,a1,318 # 8002ffc8 <__func__.0+0x2d8>
    80013e92:	b02ff06f          	j	80013194 <software_interrupt_msi+0x80>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013e96:	00044717          	auipc	a4,0x44
    80013e9a:	17e72703          	lw	a4,382(a4) # 80058014 <excpt+0x4>
    80013e9e:	4791                	li	a5,4
    80013ea0:	0001c597          	auipc	a1,0x1c
    80013ea4:	11858593          	addi	a1,a1,280 # 8002ffb8 <__func__.0+0x2c8>
    80013ea8:	80f700e3          	beq	a4,a5,800136a8 <software_interrupt_msi+0x594>
    80013eac:	0001c597          	auipc	a1,0x1c
    80013eb0:	11c58593          	addi	a1,a1,284 # 8002ffc8 <__func__.0+0x2d8>
    80013eb4:	ff4ff06f          	j	800136a8 <software_interrupt_msi+0x594>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013eb8:	00044717          	auipc	a4,0x44
    80013ebc:	15c72703          	lw	a4,348(a4) # 80058014 <excpt+0x4>
    80013ec0:	4791                	li	a5,4
    80013ec2:	0001c597          	auipc	a1,0x1c
    80013ec6:	0f658593          	addi	a1,a1,246 # 8002ffb8 <__func__.0+0x2c8>
    80013eca:	9af706e3          	beq	a4,a5,80013876 <software_interrupt_msi+0x762>
    80013ece:	0001c597          	auipc	a1,0x1c
    80013ed2:	0fa58593          	addi	a1,a1,250 # 8002ffc8 <__func__.0+0x2d8>
    80013ed6:	b245                	j	80013876 <software_interrupt_msi+0x762>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013ed8:	00044717          	auipc	a4,0x44
    80013edc:	13c72703          	lw	a4,316(a4) # 80058014 <excpt+0x4>
    80013ee0:	4791                	li	a5,4
    80013ee2:	0001c597          	auipc	a1,0x1c
    80013ee6:	0d658593          	addi	a1,a1,214 # 8002ffb8 <__func__.0+0x2c8>
    80013eea:	def70763          	beq	a4,a5,800134d8 <software_interrupt_msi+0x3c4>
    80013eee:	0001c597          	auipc	a1,0x1c
    80013ef2:	0da58593          	addi	a1,a1,218 # 8002ffc8 <__func__.0+0x2d8>
    80013ef6:	de2ff06f          	j	800134d8 <software_interrupt_msi+0x3c4>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013efa:	00044717          	auipc	a4,0x44
    80013efe:	11a72703          	lw	a4,282(a4) # 80058014 <excpt+0x4>
    80013f02:	478d                	li	a5,3
    80013f04:	0001c597          	auipc	a1,0x1c
    80013f08:	0b458593          	addi	a1,a1,180 # 8002ffb8 <__func__.0+0x2c8>
    80013f0c:	e6f70a63          	beq	a4,a5,80013580 <software_interrupt_msi+0x46c>
    80013f10:	0001c597          	auipc	a1,0x1c
    80013f14:	0b858593          	addi	a1,a1,184 # 8002ffc8 <__func__.0+0x2d8>
    80013f18:	e68ff06f          	j	80013580 <software_interrupt_msi+0x46c>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013f1c:	00044717          	auipc	a4,0x44
    80013f20:	0f872703          	lw	a4,248(a4) # 80058014 <excpt+0x4>
    80013f24:	478d                	li	a5,3
    80013f26:	0001c597          	auipc	a1,0x1c
    80013f2a:	09258593          	addi	a1,a1,146 # 8002ffb8 <__func__.0+0x2c8>
    80013f2e:	baf70fe3          	beq	a4,a5,80013aec <software_interrupt_msi+0x9d8>
    80013f32:	0001c597          	auipc	a1,0x1c
    80013f36:	09658593          	addi	a1,a1,150 # 8002ffc8 <__func__.0+0x2d8>
    80013f3a:	be4d                	j	80013aec <software_interrupt_msi+0x9d8>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013f3c:	00044717          	auipc	a4,0x44
    80013f40:	0d872703          	lw	a4,216(a4) # 80058014 <excpt+0x4>
    80013f44:	478d                	li	a5,3
    80013f46:	0001c597          	auipc	a1,0x1c
    80013f4a:	07258593          	addi	a1,a1,114 # 8002ffb8 <__func__.0+0x2c8>
    80013f4e:	9cf708e3          	beq	a4,a5,8001391e <software_interrupt_msi+0x80a>
    80013f52:	0001c597          	auipc	a1,0x1c
    80013f56:	07658593          	addi	a1,a1,118 # 8002ffc8 <__func__.0+0x2d8>
    80013f5a:	b2d1                	j	8001391e <software_interrupt_msi+0x80a>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013f5c:	00044417          	auipc	s0,0x44
    80013f60:	0b842403          	lw	s0,184(s0) # 80058014 <excpt+0x4>
    80013f64:	1471                	addi	s0,s0,-4
    80013f66:	00143413          	seqz	s0,s0
    80013f6a:	a7eff06f          	j	800131e8 <software_interrupt_msi+0xd4>

0000000080013f6e <software_interrupt_ssi>:



bool software_interrupt_ssi() {
    80013f6e:	1101                	addi	sp,sp,-32

    TEST_START();
    80013f70:	0001a597          	auipc	a1,0x1a
    80013f74:	78858593          	addi	a1,a1,1928 # 8002e6f8 <__func__.1>
    80013f78:	0001c517          	auipc	a0,0x1c
    80013f7c:	06050513          	addi	a0,a0,96 # 8002ffd8 <__func__.0+0x2e8>
bool software_interrupt_ssi() {
    80013f80:	ec06                	sd	ra,24(sp)
    80013f82:	e822                	sd	s0,16(sp)
    80013f84:	e426                	sd	s1,8(sp)
    TEST_START();
    80013f86:	106190ef          	jal	8002d08c <printf>
    80013f8a:	4529                	li	a0,10
    80013f8c:	5ef170ef          	jal	8002bd7a <putchar>

    TEST_SETUP_EXCEPT();
    80013f90:	e7dec0ef          	jal	80000e0c <test_setup_except_function>

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    goto_priv(PRIV_M);
    80013f94:	4511                	li	a0,4
    80013f96:	f73ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80013f9a:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    80013f9e:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    80013fa2:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80013fa6:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80013faa:	450d                	li	a0,3
    80013fac:	f5dec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80013fb0:	08200593          	li	a1,130
    80013fb4:	00021617          	auipc	a2,0x21
    80013fb8:	acc60613          	addi	a2,a2,-1332 # 80034a80 <__func__.0+0x4d90>
    80013fbc:	0001c517          	auipc	a0,0x1c
    80013fc0:	03450513          	addi	a0,a0,52 # 8002fff0 <__func__.0+0x300>
    80013fc4:	0c8190ef          	jal	8002d08c <printf>
    80013fc8:	00044797          	auipc	a5,0x44
    80013fcc:	0497c783          	lbu	a5,73(a5) # 80058011 <excpt+0x1>
    80013fd0:	00044497          	auipc	s1,0x44
    80013fd4:	04048493          	addi	s1,s1,64 # 80058010 <excpt>
    80013fd8:	0001c597          	auipc	a1,0x1c
    80013fdc:	ff058593          	addi	a1,a1,-16 # 8002ffc8 <__func__.0+0x2d8>
    80013fe0:	c799                	beqz	a5,80013fee <software_interrupt_ssi+0x80>
    80013fe2:	57fd                	li	a5,-1
    80013fe4:	6498                	ld	a4,8(s1)
    80013fe6:	17fe                	slli	a5,a5,0x3f
    80013fe8:	0785                	addi	a5,a5,1
    80013fea:	26f706e3          	beq	a4,a5,80014a56 <software_interrupt_ssi+0xae8>
    80013fee:	0001c517          	auipc	a0,0x1c
    80013ff2:	01a50513          	addi	a0,a0,26 # 80030008 <__func__.0+0x318>
    80013ff6:	096190ef          	jal	8002d08c <printf>
    80013ffa:	00044797          	auipc	a5,0x44
    80013ffe:	0177c783          	lbu	a5,23(a5) # 80058011 <excpt+0x1>
    80014002:	c799                	beqz	a5,80014010 <software_interrupt_ssi+0xa2>
    80014004:	57fd                	li	a5,-1
    80014006:	6498                	ld	a4,8(s1)
    80014008:	17fe                	slli	a5,a5,0x3f
    8001400a:	0785                	addi	a5,a5,1
    8001400c:	08f70de3          	beq	a4,a5,800148a6 <software_interrupt_ssi+0x938>
    80014010:	0001c517          	auipc	a0,0x1c
    80014014:	00050513          	mv	a0,a0
    80014018:	074190ef          	jal	8002d08c <printf>
    8001401c:	02900513          	li	a0,41
    80014020:	55b170ef          	jal	8002bd7a <putchar>
    80014024:	4529                	li	a0,10
    80014026:	555170ef          	jal	8002bd7a <putchar>
    8001402a:	00044797          	auipc	a5,0x44
    8001402e:	fe77c783          	lbu	a5,-25(a5) # 80058011 <excpt+0x1>
    80014032:	4401                	li	s0,0
    80014034:	c799                	beqz	a5,80014042 <software_interrupt_ssi+0xd4>
    80014036:	57fd                	li	a5,-1
    80014038:	6498                	ld	a4,8(s1)
    8001403a:	17fe                	slli	a5,a5,0x3f
    8001403c:	0785                	addi	a5,a5,1
    8001403e:	18f701e3          	beq	a4,a5,800149c0 <software_interrupt_ssi+0xa52>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80014042:	dcbec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014046:	4511                	li	a0,4
    80014048:	ec1ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001404c:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80014050:	57fd                	li	a5,-1
    80014052:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80014056:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    8001405a:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    8001405e:	450d                	li	a0,3
    80014060:	ea9ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014064:	08200593          	li	a1,130
    80014068:	00021617          	auipc	a2,0x21
    8001406c:	a8860613          	addi	a2,a2,-1400 # 80034af0 <__func__.0+0x4e00>
    80014070:	0001c517          	auipc	a0,0x1c
    80014074:	f8050513          	addi	a0,a0,-128 # 8002fff0 <__func__.0+0x300>
    80014078:	014190ef          	jal	8002d08c <printf>
    8001407c:	00044797          	auipc	a5,0x44
    80014080:	f957c783          	lbu	a5,-107(a5) # 80058011 <excpt+0x1>
    80014084:	0001c597          	auipc	a1,0x1c
    80014088:	f4458593          	addi	a1,a1,-188 # 8002ffc8 <__func__.0+0x2d8>
    8001408c:	c799                	beqz	a5,8001409a <software_interrupt_ssi+0x12c>
    8001408e:	57fd                	li	a5,-1
    80014090:	6498                	ld	a4,8(s1)
    80014092:	17fe                	slli	a5,a5,0x3f
    80014094:	0785                	addi	a5,a5,1
    80014096:	12f70ee3          	beq	a4,a5,800149d2 <software_interrupt_ssi+0xa64>
    8001409a:	0001c517          	auipc	a0,0x1c
    8001409e:	f6e50513          	addi	a0,a0,-146 # 80030008 <__func__.0+0x318>
    800140a2:	7eb180ef          	jal	8002d08c <printf>
    800140a6:	00044797          	auipc	a5,0x44
    800140aa:	f6b7c783          	lbu	a5,-149(a5) # 80058011 <excpt+0x1>
    800140ae:	c799                	beqz	a5,800140bc <software_interrupt_ssi+0x14e>
    800140b0:	57fd                	li	a5,-1
    800140b2:	6498                	ld	a4,8(s1)
    800140b4:	17fe                	slli	a5,a5,0x3f
    800140b6:	0785                	addi	a5,a5,1
    800140b8:	7cf70e63          	beq	a4,a5,80014894 <software_interrupt_ssi+0x926>
    800140bc:	0001c517          	auipc	a0,0x1c
    800140c0:	f5450513          	addi	a0,a0,-172 # 80030010 <__func__.0+0x320>
    800140c4:	7c9180ef          	jal	8002d08c <printf>
    800140c8:	02900513          	li	a0,41
    800140cc:	4af170ef          	jal	8002bd7a <putchar>
    800140d0:	4529                	li	a0,10
    800140d2:	4a9170ef          	jal	8002bd7a <putchar>
    800140d6:	c801                	beqz	s0,800140e6 <software_interrupt_ssi+0x178>
    800140d8:	00044797          	auipc	a5,0x44
    800140dc:	f397c783          	lbu	a5,-199(a5) # 80058011 <excpt+0x1>
    800140e0:	4401                	li	s0,0
    800140e2:	78079a63          	bnez	a5,80014876 <software_interrupt_ssi+0x908>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800140e6:	d27ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800140ea:	4511                	li	a0,4
    800140ec:	e1dec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800140f0:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800140f4:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    800140f8:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    800140fc:	450d                	li	a0,3
    800140fe:	e0bec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80014102:	08200593          	li	a1,130
    80014106:	00021617          	auipc	a2,0x21
    8001410a:	a5a60613          	addi	a2,a2,-1446 # 80034b60 <__func__.0+0x4e70>
    8001410e:	0001c517          	auipc	a0,0x1c
    80014112:	ee250513          	addi	a0,a0,-286 # 8002fff0 <__func__.0+0x300>
    80014116:	777180ef          	jal	8002d08c <printf>
    8001411a:	00044797          	auipc	a5,0x44
    8001411e:	ef77c783          	lbu	a5,-265(a5) # 80058011 <excpt+0x1>
    80014122:	0001c597          	auipc	a1,0x1c
    80014126:	ea658593          	addi	a1,a1,-346 # 8002ffc8 <__func__.0+0x2d8>
    8001412a:	e789                	bnez	a5,80014134 <software_interrupt_ssi+0x1c6>
    8001412c:	0001c597          	auipc	a1,0x1c
    80014130:	e8c58593          	addi	a1,a1,-372 # 8002ffb8 <__func__.0+0x2c8>
    80014134:	0001c517          	auipc	a0,0x1c
    80014138:	ed450513          	addi	a0,a0,-300 # 80030008 <__func__.0+0x318>
    8001413c:	751180ef          	jal	8002d08c <printf>
    80014140:	00044797          	auipc	a5,0x44
    80014144:	ed17c783          	lbu	a5,-303(a5) # 80058011 <excpt+0x1>
    80014148:	7e079463          	bnez	a5,80014930 <software_interrupt_ssi+0x9c2>
    8001414c:	4529                	li	a0,10
    8001414e:	42d170ef          	jal	8002bd7a <putchar>
    80014152:	c419                	beqz	s0,80014160 <software_interrupt_ssi+0x1f2>
    80014154:	00044417          	auipc	s0,0x44
    80014158:	ebd44403          	lbu	s0,-323(s0) # 80058011 <excpt+0x1>
    8001415c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    80014160:	cadec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014164:	4511                	li	a0,4
    80014166:	da3ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001416a:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    8001416e:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    80014172:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014176:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    8001417a:	450d                	li	a0,3
    8001417c:	d8dec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014180:	08200593          	li	a1,130
    80014184:	00021617          	auipc	a2,0x21
    80014188:	a3460613          	addi	a2,a2,-1484 # 80034bb8 <__func__.0+0x4ec8>
    8001418c:	0001c517          	auipc	a0,0x1c
    80014190:	e6450513          	addi	a0,a0,-412 # 8002fff0 <__func__.0+0x300>
    80014194:	6f9180ef          	jal	8002d08c <printf>
    80014198:	00044797          	auipc	a5,0x44
    8001419c:	e797c783          	lbu	a5,-391(a5) # 80058011 <excpt+0x1>
    800141a0:	0001c597          	auipc	a1,0x1c
    800141a4:	e2858593          	addi	a1,a1,-472 # 8002ffc8 <__func__.0+0x2d8>
    800141a8:	c799                	beqz	a5,800141b6 <software_interrupt_ssi+0x248>
    800141aa:	57fd                	li	a5,-1
    800141ac:	6498                	ld	a4,8(s1)
    800141ae:	17fe                	slli	a5,a5,0x3f
    800141b0:	0785                	addi	a5,a5,1
    800141b2:	04f701e3          	beq	a4,a5,800149f4 <software_interrupt_ssi+0xa86>
    800141b6:	0001c517          	auipc	a0,0x1c
    800141ba:	e5250513          	addi	a0,a0,-430 # 80030008 <__func__.0+0x318>
    800141be:	6cf180ef          	jal	8002d08c <printf>
    800141c2:	00044797          	auipc	a5,0x44
    800141c6:	e4f7c783          	lbu	a5,-433(a5) # 80058011 <excpt+0x1>
    800141ca:	c799                	beqz	a5,800141d8 <software_interrupt_ssi+0x26a>
    800141cc:	57fd                	li	a5,-1
    800141ce:	6498                	ld	a4,8(s1)
    800141d0:	17fe                	slli	a5,a5,0x3f
    800141d2:	0785                	addi	a5,a5,1
    800141d4:	70f70a63          	beq	a4,a5,800148e8 <software_interrupt_ssi+0x97a>
    800141d8:	0001c517          	auipc	a0,0x1c
    800141dc:	e3850513          	addi	a0,a0,-456 # 80030010 <__func__.0+0x320>
    800141e0:	6ad180ef          	jal	8002d08c <printf>
    800141e4:	02900513          	li	a0,41
    800141e8:	393170ef          	jal	8002bd7a <putchar>
    800141ec:	4529                	li	a0,10
    800141ee:	38d170ef          	jal	8002bd7a <putchar>
    800141f2:	c801                	beqz	s0,80014202 <software_interrupt_ssi+0x294>
    800141f4:	00044797          	auipc	a5,0x44
    800141f8:	e1d7c783          	lbu	a5,-483(a5) # 80058011 <excpt+0x1>
    800141fc:	4401                	li	s0,0
    800141fe:	64079e63          	bnez	a5,8001485a <software_interrupt_ssi+0x8ec>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    80014202:	c0bec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014206:	4511                	li	a0,4
    80014208:	d01ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001420c:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80014210:	57fd                	li	a5,-1
    80014212:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80014216:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    8001421a:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    8001421e:	450d                	li	a0,3
    80014220:	ce9ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014224:	08200593          	li	a1,130
    80014228:	00021617          	auipc	a2,0x21
    8001422c:	a0060613          	addi	a2,a2,-1536 # 80034c28 <__func__.0+0x4f38>
    80014230:	0001c517          	auipc	a0,0x1c
    80014234:	dc050513          	addi	a0,a0,-576 # 8002fff0 <__func__.0+0x300>
    80014238:	655180ef          	jal	8002d08c <printf>
    8001423c:	00044797          	auipc	a5,0x44
    80014240:	dd57c783          	lbu	a5,-555(a5) # 80058011 <excpt+0x1>
    80014244:	0001c597          	auipc	a1,0x1c
    80014248:	d8458593          	addi	a1,a1,-636 # 8002ffc8 <__func__.0+0x2d8>
    8001424c:	c799                	beqz	a5,8001425a <software_interrupt_ssi+0x2ec>
    8001424e:	57fd                	li	a5,-1
    80014250:	6498                	ld	a4,8(s1)
    80014252:	17fe                	slli	a5,a5,0x3f
    80014254:	0785                	addi	a5,a5,1
    80014256:	02f701e3          	beq	a4,a5,80014a78 <software_interrupt_ssi+0xb0a>
    8001425a:	0001c517          	auipc	a0,0x1c
    8001425e:	dae50513          	addi	a0,a0,-594 # 80030008 <__func__.0+0x318>
    80014262:	62b180ef          	jal	8002d08c <printf>
    80014266:	00044797          	auipc	a5,0x44
    8001426a:	dab7c783          	lbu	a5,-597(a5) # 80058011 <excpt+0x1>
    8001426e:	c799                	beqz	a5,8001427c <software_interrupt_ssi+0x30e>
    80014270:	57fd                	li	a5,-1
    80014272:	6498                	ld	a4,8(s1)
    80014274:	17fe                	slli	a5,a5,0x3f
    80014276:	0785                	addi	a5,a5,1
    80014278:	68f70163          	beq	a4,a5,800148fa <software_interrupt_ssi+0x98c>
    8001427c:	0001c517          	auipc	a0,0x1c
    80014280:	d9450513          	addi	a0,a0,-620 # 80030010 <__func__.0+0x320>
    80014284:	609180ef          	jal	8002d08c <printf>
    80014288:	02900513          	li	a0,41
    8001428c:	2ef170ef          	jal	8002bd7a <putchar>
    80014290:	4529                	li	a0,10
    80014292:	2e9170ef          	jal	8002bd7a <putchar>
    80014296:	c801                	beqz	s0,800142a6 <software_interrupt_ssi+0x338>
    80014298:	00044797          	auipc	a5,0x44
    8001429c:	d797c783          	lbu	a5,-647(a5) # 80058011 <excpt+0x1>
    800142a0:	4401                	li	s0,0
    800142a2:	58079e63          	bnez	a5,8001483e <software_interrupt_ssi+0x8d0>
        excpt.priv == PRIV_HS
    );


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800142a6:	b67ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800142aa:	4511                	li	a0,4
    800142ac:	c5dec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800142b0:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800142b4:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800142b8:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    800142bc:	450d                	li	a0,3
    800142be:	c4bec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    800142c2:	08200593          	li	a1,130
    800142c6:	00021617          	auipc	a2,0x21
    800142ca:	9c260613          	addi	a2,a2,-1598 # 80034c88 <__func__.0+0x4f98>
    800142ce:	0001c517          	auipc	a0,0x1c
    800142d2:	d2250513          	addi	a0,a0,-734 # 8002fff0 <__func__.0+0x300>
    800142d6:	5b7180ef          	jal	8002d08c <printf>
    800142da:	00044797          	auipc	a5,0x44
    800142de:	d377c783          	lbu	a5,-713(a5) # 80058011 <excpt+0x1>
    800142e2:	0001c597          	auipc	a1,0x1c
    800142e6:	ce658593          	addi	a1,a1,-794 # 8002ffc8 <__func__.0+0x2d8>
    800142ea:	e789                	bnez	a5,800142f4 <software_interrupt_ssi+0x386>
    800142ec:	0001c597          	auipc	a1,0x1c
    800142f0:	ccc58593          	addi	a1,a1,-820 # 8002ffb8 <__func__.0+0x2c8>
    800142f4:	0001c517          	auipc	a0,0x1c
    800142f8:	d1450513          	addi	a0,a0,-748 # 80030008 <__func__.0+0x318>
    800142fc:	591180ef          	jal	8002d08c <printf>
    80014300:	00044797          	auipc	a5,0x44
    80014304:	d117c783          	lbu	a5,-751(a5) # 80058011 <excpt+0x1>
    80014308:	64079b63          	bnez	a5,8001495e <software_interrupt_ssi+0x9f0>
    8001430c:	4529                	li	a0,10
    8001430e:	26d170ef          	jal	8002bd7a <putchar>
    80014312:	c419                	beqz	s0,80014320 <software_interrupt_ssi+0x3b2>
    80014314:	00044417          	auipc	s0,0x44
    80014318:	cfd44403          	lbu	s0,-771(s0) # 80058011 <excpt+0x1>
    8001431c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80014320:	aedec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014324:	4511                	li	a0,4
    80014326:	be3ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001432a:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001432e:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014332:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80014336:	450d                	li	a0,3
    80014338:	bd1ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001433c:	08200593          	li	a1,130
    80014340:	00021617          	auipc	a2,0x21
    80014344:	99860613          	addi	a2,a2,-1640 # 80034cd8 <__func__.0+0x4fe8>
    80014348:	0001c517          	auipc	a0,0x1c
    8001434c:	ca850513          	addi	a0,a0,-856 # 8002fff0 <__func__.0+0x300>
    80014350:	53d180ef          	jal	8002d08c <printf>
    80014354:	00044797          	auipc	a5,0x44
    80014358:	cbd7c783          	lbu	a5,-835(a5) # 80058011 <excpt+0x1>
    8001435c:	0001c597          	auipc	a1,0x1c
    80014360:	c6c58593          	addi	a1,a1,-916 # 8002ffc8 <__func__.0+0x2d8>
    80014364:	e789                	bnez	a5,8001436e <software_interrupt_ssi+0x400>
    80014366:	0001c597          	auipc	a1,0x1c
    8001436a:	c5258593          	addi	a1,a1,-942 # 8002ffb8 <__func__.0+0x2c8>
    8001436e:	0001c517          	auipc	a0,0x1c
    80014372:	c9a50513          	addi	a0,a0,-870 # 80030008 <__func__.0+0x318>
    80014376:	517180ef          	jal	8002d08c <printf>
    8001437a:	00044797          	auipc	a5,0x44
    8001437e:	c977c783          	lbu	a5,-873(a5) # 80058011 <excpt+0x1>
    80014382:	5c079363          	bnez	a5,80014948 <software_interrupt_ssi+0x9da>
    80014386:	4529                	li	a0,10
    80014388:	1f3170ef          	jal	8002bd7a <putchar>
    8001438c:	c419                	beqz	s0,8001439a <software_interrupt_ssi+0x42c>
    8001438e:	00044417          	auipc	s0,0x44
    80014392:	c8344403          	lbu	s0,-893(s0) # 80058011 <excpt+0x1>
    80014396:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

//VS-mode下

    TEST_SETUP_EXCEPT();
    8001439a:	a73ec0ef          	jal	80000e0c <test_setup_except_function>
    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    TEST_SETUP_EXCEPT();
    8001439e:	a6fec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800143a2:	4511                	li	a0,4
    800143a4:	b65ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    800143a8:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    800143ac:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    800143b0:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    800143b4:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    800143b8:	4509                	li	a0,2
    800143ba:	b4fec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800143be:	08200593          	li	a1,130
    800143c2:	00021617          	auipc	a2,0x21
    800143c6:	96660613          	addi	a2,a2,-1690 # 80034d28 <__func__.0+0x5038>
    800143ca:	0001c517          	auipc	a0,0x1c
    800143ce:	c2650513          	addi	a0,a0,-986 # 8002fff0 <__func__.0+0x300>
    800143d2:	4bb180ef          	jal	8002d08c <printf>
    800143d6:	00044797          	auipc	a5,0x44
    800143da:	c3b7c783          	lbu	a5,-965(a5) # 80058011 <excpt+0x1>
    800143de:	0001c597          	auipc	a1,0x1c
    800143e2:	bea58593          	addi	a1,a1,-1046 # 8002ffc8 <__func__.0+0x2d8>
    800143e6:	c799                	beqz	a5,800143f4 <software_interrupt_ssi+0x486>
    800143e8:	57fd                	li	a5,-1
    800143ea:	6498                	ld	a4,8(s1)
    800143ec:	17fe                	slli	a5,a5,0x3f
    800143ee:	0785                	addi	a5,a5,1
    800143f0:	6af70563          	beq	a4,a5,80014a9a <software_interrupt_ssi+0xb2c>
    800143f4:	0001c517          	auipc	a0,0x1c
    800143f8:	c1450513          	addi	a0,a0,-1004 # 80030008 <__func__.0+0x318>
    800143fc:	491180ef          	jal	8002d08c <printf>
    80014400:	00044797          	auipc	a5,0x44
    80014404:	c117c783          	lbu	a5,-1007(a5) # 80058011 <excpt+0x1>
    80014408:	c799                	beqz	a5,80014416 <software_interrupt_ssi+0x4a8>
    8001440a:	57fd                	li	a5,-1
    8001440c:	6498                	ld	a4,8(s1)
    8001440e:	17fe                	slli	a5,a5,0x3f
    80014410:	0785                	addi	a5,a5,1
    80014412:	4af70363          	beq	a4,a5,800148b8 <software_interrupt_ssi+0x94a>
    80014416:	0001c517          	auipc	a0,0x1c
    8001441a:	bfa50513          	addi	a0,a0,-1030 # 80030010 <__func__.0+0x320>
    8001441e:	46f180ef          	jal	8002d08c <printf>
    80014422:	02900513          	li	a0,41
    80014426:	155170ef          	jal	8002bd7a <putchar>
    8001442a:	4529                	li	a0,10
    8001442c:	14f170ef          	jal	8002bd7a <putchar>
    80014430:	c801                	beqz	s0,80014440 <software_interrupt_ssi+0x4d2>
    80014432:	00044797          	auipc	a5,0x44
    80014436:	bdf7c783          	lbu	a5,-1057(a5) # 80058011 <excpt+0x1>
    8001443a:	4401                	li	s0,0
    8001443c:	3e079363          	bnez	a5,80014822 <software_interrupt_ssi+0x8b4>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80014440:	9cdec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014444:	4511                	li	a0,4
    80014446:	ac3ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001444a:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    8001444e:	57fd                	li	a5,-1
    80014450:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80014454:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80014458:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    8001445c:	4509                	li	a0,2
    8001445e:	aabec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014462:	08200593          	li	a1,130
    80014466:	00021617          	auipc	a2,0x21
    8001446a:	93260613          	addi	a2,a2,-1742 # 80034d98 <__func__.0+0x50a8>
    8001446e:	0001c517          	auipc	a0,0x1c
    80014472:	b8250513          	addi	a0,a0,-1150 # 8002fff0 <__func__.0+0x300>
    80014476:	417180ef          	jal	8002d08c <printf>
    8001447a:	00044797          	auipc	a5,0x44
    8001447e:	b977c783          	lbu	a5,-1129(a5) # 80058011 <excpt+0x1>
    80014482:	0001c597          	auipc	a1,0x1c
    80014486:	b4658593          	addi	a1,a1,-1210 # 8002ffc8 <__func__.0+0x2d8>
    8001448a:	c799                	beqz	a5,80014498 <software_interrupt_ssi+0x52a>
    8001448c:	57fd                	li	a5,-1
    8001448e:	6498                	ld	a4,8(s1)
    80014490:	17fe                	slli	a5,a5,0x3f
    80014492:	0785                	addi	a5,a5,1
    80014494:	5af70163          	beq	a4,a5,80014a36 <software_interrupt_ssi+0xac8>
    80014498:	0001c517          	auipc	a0,0x1c
    8001449c:	b7050513          	addi	a0,a0,-1168 # 80030008 <__func__.0+0x318>
    800144a0:	3ed180ef          	jal	8002d08c <printf>
    800144a4:	00044797          	auipc	a5,0x44
    800144a8:	b6d7c783          	lbu	a5,-1171(a5) # 80058011 <excpt+0x1>
    800144ac:	c799                	beqz	a5,800144ba <software_interrupt_ssi+0x54c>
    800144ae:	57fd                	li	a5,-1
    800144b0:	6498                	ld	a4,8(s1)
    800144b2:	17fe                	slli	a5,a5,0x3f
    800144b4:	0785                	addi	a5,a5,1
    800144b6:	40f70963          	beq	a4,a5,800148c8 <software_interrupt_ssi+0x95a>
    800144ba:	0001c517          	auipc	a0,0x1c
    800144be:	b5650513          	addi	a0,a0,-1194 # 80030010 <__func__.0+0x320>
    800144c2:	3cb180ef          	jal	8002d08c <printf>
    800144c6:	02900513          	li	a0,41
    800144ca:	0b1170ef          	jal	8002bd7a <putchar>
    800144ce:	4529                	li	a0,10
    800144d0:	0ab170ef          	jal	8002bd7a <putchar>
    800144d4:	c801                	beqz	s0,800144e4 <software_interrupt_ssi+0x576>
    800144d6:	00044797          	auipc	a5,0x44
    800144da:	b3b7c783          	lbu	a5,-1221(a5) # 80058011 <excpt+0x1>
    800144de:	4401                	li	s0,0
    800144e0:	32079363          	bnez	a5,80014806 <software_interrupt_ssi+0x898>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800144e4:	929ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800144e8:	4511                	li	a0,4
    800144ea:	a1fec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800144ee:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800144f2:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    800144f6:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    800144fa:	4509                	li	a0,2
    800144fc:	a0dec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80014500:	08200593          	li	a1,130
    80014504:	00021617          	auipc	a2,0x21
    80014508:	90460613          	addi	a2,a2,-1788 # 80034e08 <__func__.0+0x5118>
    8001450c:	0001c517          	auipc	a0,0x1c
    80014510:	ae450513          	addi	a0,a0,-1308 # 8002fff0 <__func__.0+0x300>
    80014514:	379180ef          	jal	8002d08c <printf>
    80014518:	00044797          	auipc	a5,0x44
    8001451c:	af97c783          	lbu	a5,-1287(a5) # 80058011 <excpt+0x1>
    80014520:	0001c597          	auipc	a1,0x1c
    80014524:	aa858593          	addi	a1,a1,-1368 # 8002ffc8 <__func__.0+0x2d8>
    80014528:	e789                	bnez	a5,80014532 <software_interrupt_ssi+0x5c4>
    8001452a:	0001c597          	auipc	a1,0x1c
    8001452e:	a8e58593          	addi	a1,a1,-1394 # 8002ffb8 <__func__.0+0x2c8>
    80014532:	0001c517          	auipc	a0,0x1c
    80014536:	ad650513          	addi	a0,a0,-1322 # 80030008 <__func__.0+0x318>
    8001453a:	353180ef          	jal	8002d08c <printf>
    8001453e:	00044797          	auipc	a5,0x44
    80014542:	ad37c783          	lbu	a5,-1325(a5) # 80058011 <excpt+0x1>
    80014546:	3c079a63          	bnez	a5,8001491a <software_interrupt_ssi+0x9ac>
    8001454a:	4529                	li	a0,10
    8001454c:	02f170ef          	jal	8002bd7a <putchar>
    80014550:	c419                	beqz	s0,8001455e <software_interrupt_ssi+0x5f0>
    80014552:	00044417          	auipc	s0,0x44
    80014556:	abf44403          	lbu	s0,-1345(s0) # 80058011 <excpt+0x1>
    8001455a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    8001455e:	8afec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014562:	4511                	li	a0,4
    80014564:	9a5ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014568:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    8001456c:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    80014570:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014574:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80014578:	4509                	li	a0,2
    8001457a:	98fec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001457e:	08200593          	li	a1,130
    80014582:	00021617          	auipc	a2,0x21
    80014586:	8de60613          	addi	a2,a2,-1826 # 80034e60 <__func__.0+0x5170>
    8001458a:	0001c517          	auipc	a0,0x1c
    8001458e:	a6650513          	addi	a0,a0,-1434 # 8002fff0 <__func__.0+0x300>
    80014592:	2fb180ef          	jal	8002d08c <printf>
    80014596:	00044797          	auipc	a5,0x44
    8001459a:	a7b7c783          	lbu	a5,-1413(a5) # 80058011 <excpt+0x1>
    8001459e:	0001c597          	auipc	a1,0x1c
    800145a2:	a2a58593          	addi	a1,a1,-1494 # 8002ffc8 <__func__.0+0x2d8>
    800145a6:	c799                	beqz	a5,800145b4 <software_interrupt_ssi+0x646>
    800145a8:	57fd                	li	a5,-1
    800145aa:	6498                	ld	a4,8(s1)
    800145ac:	17fe                	slli	a5,a5,0x3f
    800145ae:	0785                	addi	a5,a5,1
    800145b0:	3ef70863          	beq	a4,a5,800149a0 <software_interrupt_ssi+0xa32>
    800145b4:	0001c517          	auipc	a0,0x1c
    800145b8:	a5450513          	addi	a0,a0,-1452 # 80030008 <__func__.0+0x318>
    800145bc:	2d1180ef          	jal	8002d08c <printf>
    800145c0:	00044797          	auipc	a5,0x44
    800145c4:	a517c783          	lbu	a5,-1455(a5) # 80058011 <excpt+0x1>
    800145c8:	c799                	beqz	a5,800145d6 <software_interrupt_ssi+0x668>
    800145ca:	57fd                	li	a5,-1
    800145cc:	6498                	ld	a4,8(s1)
    800145ce:	17fe                	slli	a5,a5,0x3f
    800145d0:	0785                	addi	a5,a5,1
    800145d2:	32f70c63          	beq	a4,a5,8001490a <software_interrupt_ssi+0x99c>
    800145d6:	0001c517          	auipc	a0,0x1c
    800145da:	a3a50513          	addi	a0,a0,-1478 # 80030010 <__func__.0+0x320>
    800145de:	2af180ef          	jal	8002d08c <printf>
    800145e2:	02900513          	li	a0,41
    800145e6:	794170ef          	jal	8002bd7a <putchar>
    800145ea:	4529                	li	a0,10
    800145ec:	78e170ef          	jal	8002bd7a <putchar>
    800145f0:	c801                	beqz	s0,80014600 <software_interrupt_ssi+0x692>
    800145f2:	00044797          	auipc	a5,0x44
    800145f6:	a1f7c783          	lbu	a5,-1505(a5) # 80058011 <excpt+0x1>
    800145fa:	4401                	li	s0,0
    800145fc:	1e079763          	bnez	a5,800147ea <software_interrupt_ssi+0x87c>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    80014600:	80dec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014604:	4511                	li	a0,4
    80014606:	903ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001460a:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    8001460e:	57fd                	li	a5,-1
    80014610:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80014614:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014618:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    8001461c:	4509                	li	a0,2
    8001461e:	8ebec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014622:	08200593          	li	a1,130
    80014626:	00021617          	auipc	a2,0x21
    8001462a:	8aa60613          	addi	a2,a2,-1878 # 80034ed0 <__func__.0+0x51e0>
    8001462e:	0001c517          	auipc	a0,0x1c
    80014632:	9c250513          	addi	a0,a0,-1598 # 8002fff0 <__func__.0+0x300>
    80014636:	257180ef          	jal	8002d08c <printf>
    8001463a:	00044797          	auipc	a5,0x44
    8001463e:	9d77c783          	lbu	a5,-1577(a5) # 80058011 <excpt+0x1>
    80014642:	0001c597          	auipc	a1,0x1c
    80014646:	98658593          	addi	a1,a1,-1658 # 8002ffc8 <__func__.0+0x2d8>
    8001464a:	c799                	beqz	a5,80014658 <software_interrupt_ssi+0x6ea>
    8001464c:	57fd                	li	a5,-1
    8001464e:	6498                	ld	a4,8(s1)
    80014650:	17fe                	slli	a5,a5,0x3f
    80014652:	0785                	addi	a5,a5,1
    80014654:	3cf70163          	beq	a4,a5,80014a16 <software_interrupt_ssi+0xaa8>
    80014658:	0001c517          	auipc	a0,0x1c
    8001465c:	9b050513          	addi	a0,a0,-1616 # 80030008 <__func__.0+0x318>
    80014660:	22d180ef          	jal	8002d08c <printf>
    80014664:	00044797          	auipc	a5,0x44
    80014668:	9ad7c783          	lbu	a5,-1619(a5) # 80058011 <excpt+0x1>
    8001466c:	c799                	beqz	a5,8001467a <software_interrupt_ssi+0x70c>
    8001466e:	57fd                	li	a5,-1
    80014670:	6498                	ld	a4,8(s1)
    80014672:	17fe                	slli	a5,a5,0x3f
    80014674:	0785                	addi	a5,a5,1
    80014676:	26f70163          	beq	a4,a5,800148d8 <software_interrupt_ssi+0x96a>
    8001467a:	0001c517          	auipc	a0,0x1c
    8001467e:	99650513          	addi	a0,a0,-1642 # 80030010 <__func__.0+0x320>
    80014682:	20b180ef          	jal	8002d08c <printf>
    80014686:	02900513          	li	a0,41
    8001468a:	6f0170ef          	jal	8002bd7a <putchar>
    8001468e:	4529                	li	a0,10
    80014690:	6ea170ef          	jal	8002bd7a <putchar>
    80014694:	c801                	beqz	s0,800146a4 <software_interrupt_ssi+0x736>
    80014696:	00044797          	auipc	a5,0x44
    8001469a:	97b7c783          	lbu	a5,-1669(a5) # 80058011 <excpt+0x1>
    8001469e:	4401                	li	s0,0
    800146a0:	12079763          	bnez	a5,800147ce <software_interrupt_ssi+0x860>
        excpt.priv == PRIV_HS
    );


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800146a4:	f68ec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    800146a8:	4511                	li	a0,4
    800146aa:	85fec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800146ae:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800146b2:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800146b6:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    800146ba:	4509                	li	a0,2
    800146bc:	84dec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    800146c0:	08200593          	li	a1,130
    800146c4:	00021617          	auipc	a2,0x21
    800146c8:	86c60613          	addi	a2,a2,-1940 # 80034f30 <__func__.0+0x5240>
    800146cc:	0001c517          	auipc	a0,0x1c
    800146d0:	92450513          	addi	a0,a0,-1756 # 8002fff0 <__func__.0+0x300>
    800146d4:	1b9180ef          	jal	8002d08c <printf>
    800146d8:	00044797          	auipc	a5,0x44
    800146dc:	9397c783          	lbu	a5,-1735(a5) # 80058011 <excpt+0x1>
    800146e0:	0001c597          	auipc	a1,0x1c
    800146e4:	8e858593          	addi	a1,a1,-1816 # 8002ffc8 <__func__.0+0x2d8>
    800146e8:	e789                	bnez	a5,800146f2 <software_interrupt_ssi+0x784>
    800146ea:	0001c597          	auipc	a1,0x1c
    800146ee:	8ce58593          	addi	a1,a1,-1842 # 8002ffb8 <__func__.0+0x2c8>
    800146f2:	0001c517          	auipc	a0,0x1c
    800146f6:	91650513          	addi	a0,a0,-1770 # 80030008 <__func__.0+0x318>
    800146fa:	193180ef          	jal	8002d08c <printf>
    800146fe:	00044797          	auipc	a5,0x44
    80014702:	9137c783          	lbu	a5,-1773(a5) # 80058011 <excpt+0x1>
    80014706:	28079263          	bnez	a5,8001498a <software_interrupt_ssi+0xa1c>
    8001470a:	4529                	li	a0,10
    8001470c:	66e170ef          	jal	8002bd7a <putchar>
    80014710:	c419                	beqz	s0,8001471e <software_interrupt_ssi+0x7b0>
    80014712:	00044417          	auipc	s0,0x44
    80014716:	8ff44403          	lbu	s0,-1793(s0) # 80058011 <excpt+0x1>
    8001471a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001471e:	eeeec0ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    80014722:	4511                	li	a0,4
    80014724:	fe4ec0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014728:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001472c:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014730:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80014734:	4509                	li	a0,2
    80014736:	fd2ec0ef          	jal	80000f08 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001473a:	08200593          	li	a1,130
    8001473e:	00021617          	auipc	a2,0x21
    80014742:	84260613          	addi	a2,a2,-1982 # 80034f80 <__func__.0+0x5290>
    80014746:	0001c517          	auipc	a0,0x1c
    8001474a:	8aa50513          	addi	a0,a0,-1878 # 8002fff0 <__func__.0+0x300>
    8001474e:	13f180ef          	jal	8002d08c <printf>
    80014752:	00044797          	auipc	a5,0x44
    80014756:	8bf7c783          	lbu	a5,-1857(a5) # 80058011 <excpt+0x1>
    8001475a:	0001c597          	auipc	a1,0x1c
    8001475e:	86e58593          	addi	a1,a1,-1938 # 8002ffc8 <__func__.0+0x2d8>
    80014762:	e789                	bnez	a5,8001476c <software_interrupt_ssi+0x7fe>
    80014764:	0001c597          	auipc	a1,0x1c
    80014768:	85458593          	addi	a1,a1,-1964 # 8002ffb8 <__func__.0+0x2c8>
    8001476c:	0001c517          	auipc	a0,0x1c
    80014770:	89c50513          	addi	a0,a0,-1892 # 80030008 <__func__.0+0x318>
    80014774:	119180ef          	jal	8002d08c <printf>
    80014778:	00044797          	auipc	a5,0x44
    8001477c:	8997c783          	lbu	a5,-1895(a5) # 80058011 <excpt+0x1>
    80014780:	1e079a63          	bnez	a5,80014974 <software_interrupt_ssi+0xa06>
    80014784:	4529                	li	a0,10
    80014786:	5f4170ef          	jal	8002bd7a <putchar>
    8001478a:	c411                	beqz	s0,80014796 <software_interrupt_ssi+0x828>
    8001478c:	00044797          	auipc	a5,0x44
    80014790:	8857c783          	lbu	a5,-1915(a5) # 80058011 <excpt+0x1>
    80014794:	c79d                	beqz	a5,800147c2 <software_interrupt_ssi+0x854>
    80014796:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80014798:	0001c597          	auipc	a1,0x1c
    8001479c:	83058593          	addi	a1,a1,-2000 # 8002ffc8 <__func__.0+0x2d8>
    800147a0:	0001c517          	auipc	a0,0x1c
    800147a4:	8d050513          	addi	a0,a0,-1840 # 80030070 <__func__.0+0x380>
    800147a8:	0e5180ef          	jal	8002d08c <printf>
    800147ac:	4511                	li	a0,4
    800147ae:	f5aec0ef          	jal	80000f08 <goto_priv>
    800147b2:	920ed0ef          	jal	800018d2 <reset_state>
}
    800147b6:	60e2                	ld	ra,24(sp)
    800147b8:	8522                	mv	a0,s0
    800147ba:	6442                	ld	s0,16(sp)
    800147bc:	64a2                	ld	s1,8(sp)
    800147be:	6105                	addi	sp,sp,32
    800147c0:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    800147c2:	4405                	li	s0,1
    TEST_END();
    800147c4:	0001b597          	auipc	a1,0x1b
    800147c8:	7f458593          	addi	a1,a1,2036 # 8002ffb8 <__func__.0+0x2c8>
    800147cc:	bfd1                	j	800147a0 <software_interrupt_ssi+0x832>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800147ce:	57fd                	li	a5,-1
    800147d0:	6498                	ld	a4,8(s1)
    800147d2:	17fe                	slli	a5,a5,0x3f
    800147d4:	0785                	addi	a5,a5,1
    800147d6:	ecf717e3          	bne	a4,a5,800146a4 <software_interrupt_ssi+0x736>
    800147da:	00044417          	auipc	s0,0x44
    800147de:	83a42403          	lw	s0,-1990(s0) # 80058014 <excpt+0x4>
    800147e2:	1475                	addi	s0,s0,-3
    800147e4:	00143413          	seqz	s0,s0
    800147e8:	bd75                	j	800146a4 <software_interrupt_ssi+0x736>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800147ea:	57fd                	li	a5,-1
    800147ec:	6498                	ld	a4,8(s1)
    800147ee:	17fe                	slli	a5,a5,0x3f
    800147f0:	0785                	addi	a5,a5,1
    800147f2:	e0f717e3          	bne	a4,a5,80014600 <software_interrupt_ssi+0x692>
    800147f6:	00044417          	auipc	s0,0x44
    800147fa:	81e42403          	lw	s0,-2018(s0) # 80058014 <excpt+0x4>
    800147fe:	1471                	addi	s0,s0,-4
    80014800:	00143413          	seqz	s0,s0
    80014804:	bbf5                	j	80014600 <software_interrupt_ssi+0x692>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014806:	57fd                	li	a5,-1
    80014808:	6498                	ld	a4,8(s1)
    8001480a:	17fe                	slli	a5,a5,0x3f
    8001480c:	0785                	addi	a5,a5,1
    8001480e:	ccf71be3          	bne	a4,a5,800144e4 <software_interrupt_ssi+0x576>
    80014812:	00044417          	auipc	s0,0x44
    80014816:	80242403          	lw	s0,-2046(s0) # 80058014 <excpt+0x4>
    8001481a:	1475                	addi	s0,s0,-3
    8001481c:	00143413          	seqz	s0,s0
    80014820:	b1d1                	j	800144e4 <software_interrupt_ssi+0x576>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014822:	57fd                	li	a5,-1
    80014824:	6498                	ld	a4,8(s1)
    80014826:	17fe                	slli	a5,a5,0x3f
    80014828:	0785                	addi	a5,a5,1
    8001482a:	c0f71be3          	bne	a4,a5,80014440 <software_interrupt_ssi+0x4d2>
    8001482e:	00043417          	auipc	s0,0x43
    80014832:	7e642403          	lw	s0,2022(s0) # 80058014 <excpt+0x4>
    80014836:	1471                	addi	s0,s0,-4
    80014838:	00143413          	seqz	s0,s0
    8001483c:	b111                	j	80014440 <software_interrupt_ssi+0x4d2>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    8001483e:	57fd                	li	a5,-1
    80014840:	6498                	ld	a4,8(s1)
    80014842:	17fe                	slli	a5,a5,0x3f
    80014844:	0785                	addi	a5,a5,1
    80014846:	a6f710e3          	bne	a4,a5,800142a6 <software_interrupt_ssi+0x338>
    8001484a:	00043417          	auipc	s0,0x43
    8001484e:	7ca42403          	lw	s0,1994(s0) # 80058014 <excpt+0x4>
    80014852:	1475                	addi	s0,s0,-3
    80014854:	00143413          	seqz	s0,s0
    80014858:	b4b9                	j	800142a6 <software_interrupt_ssi+0x338>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001485a:	57fd                	li	a5,-1
    8001485c:	6498                	ld	a4,8(s1)
    8001485e:	17fe                	slli	a5,a5,0x3f
    80014860:	0785                	addi	a5,a5,1
    80014862:	9af710e3          	bne	a4,a5,80014202 <software_interrupt_ssi+0x294>
    80014866:	00043417          	auipc	s0,0x43
    8001486a:	7ae42403          	lw	s0,1966(s0) # 80058014 <excpt+0x4>
    8001486e:	1471                	addi	s0,s0,-4
    80014870:	00143413          	seqz	s0,s0
    80014874:	b279                	j	80014202 <software_interrupt_ssi+0x294>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014876:	57fd                	li	a5,-1
    80014878:	6498                	ld	a4,8(s1)
    8001487a:	17fe                	slli	a5,a5,0x3f
    8001487c:	0785                	addi	a5,a5,1
    8001487e:	86f714e3          	bne	a4,a5,800140e6 <software_interrupt_ssi+0x178>
    80014882:	00043417          	auipc	s0,0x43
    80014886:	79242403          	lw	s0,1938(s0) # 80058014 <excpt+0x4>
    8001488a:	1475                	addi	s0,s0,-3
    8001488c:	00143413          	seqz	s0,s0
    80014890:	857ff06f          	j	800140e6 <software_interrupt_ssi+0x178>
    80014894:	00043717          	auipc	a4,0x43
    80014898:	78072703          	lw	a4,1920(a4) # 80058014 <excpt+0x4>
    8001489c:	478d                	li	a5,3
    8001489e:	80f71fe3          	bne	a4,a5,800140bc <software_interrupt_ssi+0x14e>
    800148a2:	82fff06f          	j	800140d0 <software_interrupt_ssi+0x162>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800148a6:	00043717          	auipc	a4,0x43
    800148aa:	76e72703          	lw	a4,1902(a4) # 80058014 <excpt+0x4>
    800148ae:	4791                	li	a5,4
    800148b0:	f6f71063          	bne	a4,a5,80014010 <software_interrupt_ssi+0xa2>
    800148b4:	f70ff06f          	j	80014024 <software_interrupt_ssi+0xb6>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800148b8:	00043717          	auipc	a4,0x43
    800148bc:	75c72703          	lw	a4,1884(a4) # 80058014 <excpt+0x4>
    800148c0:	4791                	li	a5,4
    800148c2:	b4f71ae3          	bne	a4,a5,80014416 <software_interrupt_ssi+0x4a8>
    800148c6:	b695                	j	8001442a <software_interrupt_ssi+0x4bc>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800148c8:	00043717          	auipc	a4,0x43
    800148cc:	74c72703          	lw	a4,1868(a4) # 80058014 <excpt+0x4>
    800148d0:	478d                	li	a5,3
    800148d2:	bef714e3          	bne	a4,a5,800144ba <software_interrupt_ssi+0x54c>
    800148d6:	bee5                	j	800144ce <software_interrupt_ssi+0x560>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800148d8:	00043717          	auipc	a4,0x43
    800148dc:	73c72703          	lw	a4,1852(a4) # 80058014 <excpt+0x4>
    800148e0:	478d                	li	a5,3
    800148e2:	d8f71ce3          	bne	a4,a5,8001467a <software_interrupt_ssi+0x70c>
    800148e6:	b365                	j	8001468e <software_interrupt_ssi+0x720>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800148e8:	00043717          	auipc	a4,0x43
    800148ec:	72c72703          	lw	a4,1836(a4) # 80058014 <excpt+0x4>
    800148f0:	4791                	li	a5,4
    800148f2:	8ef713e3          	bne	a4,a5,800141d8 <software_interrupt_ssi+0x26a>
    800148f6:	8f7ff06f          	j	800141ec <software_interrupt_ssi+0x27e>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800148fa:	00043717          	auipc	a4,0x43
    800148fe:	71a72703          	lw	a4,1818(a4) # 80058014 <excpt+0x4>
    80014902:	478d                	li	a5,3
    80014904:	96f71ce3          	bne	a4,a5,8001427c <software_interrupt_ssi+0x30e>
    80014908:	b261                	j	80014290 <software_interrupt_ssi+0x322>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001490a:	00043717          	auipc	a4,0x43
    8001490e:	70a72703          	lw	a4,1802(a4) # 80058014 <excpt+0x4>
    80014912:	4791                	li	a5,4
    80014914:	ccf711e3          	bne	a4,a5,800145d6 <software_interrupt_ssi+0x668>
    80014918:	b9c9                	j	800145ea <software_interrupt_ssi+0x67c>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    8001491a:	0001b517          	auipc	a0,0x1b
    8001491e:	6f650513          	addi	a0,a0,1782 # 80030010 <__func__.0+0x320>
    80014922:	76a180ef          	jal	8002d08c <printf>
    80014926:	02900513          	li	a0,41
    8001492a:	450170ef          	jal	8002bd7a <putchar>
    8001492e:	b931                	j	8001454a <software_interrupt_ssi+0x5dc>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80014930:	0001b517          	auipc	a0,0x1b
    80014934:	6e050513          	addi	a0,a0,1760 # 80030010 <__func__.0+0x320>
    80014938:	754180ef          	jal	8002d08c <printf>
    8001493c:	02900513          	li	a0,41
    80014940:	43a170ef          	jal	8002bd7a <putchar>
    80014944:	809ff06f          	j	8001414c <software_interrupt_ssi+0x1de>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80014948:	0001b517          	auipc	a0,0x1b
    8001494c:	6c850513          	addi	a0,a0,1736 # 80030010 <__func__.0+0x320>
    80014950:	73c180ef          	jal	8002d08c <printf>
    80014954:	02900513          	li	a0,41
    80014958:	422170ef          	jal	8002bd7a <putchar>
    8001495c:	b42d                	j	80014386 <software_interrupt_ssi+0x418>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    8001495e:	0001b517          	auipc	a0,0x1b
    80014962:	6b250513          	addi	a0,a0,1714 # 80030010 <__func__.0+0x320>
    80014966:	726180ef          	jal	8002d08c <printf>
    8001496a:	02900513          	li	a0,41
    8001496e:	40c170ef          	jal	8002bd7a <putchar>
    80014972:	ba69                	j	8001430c <software_interrupt_ssi+0x39e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80014974:	0001b517          	auipc	a0,0x1b
    80014978:	69c50513          	addi	a0,a0,1692 # 80030010 <__func__.0+0x320>
    8001497c:	710180ef          	jal	8002d08c <printf>
    80014980:	02900513          	li	a0,41
    80014984:	3f6170ef          	jal	8002bd7a <putchar>
    80014988:	bbf5                	j	80014784 <software_interrupt_ssi+0x816>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    8001498a:	0001b517          	auipc	a0,0x1b
    8001498e:	68650513          	addi	a0,a0,1670 # 80030010 <__func__.0+0x320>
    80014992:	6fa180ef          	jal	8002d08c <printf>
    80014996:	02900513          	li	a0,41
    8001499a:	3e0170ef          	jal	8002bd7a <putchar>
    8001499e:	b3b5                	j	8001470a <software_interrupt_ssi+0x79c>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800149a0:	00043717          	auipc	a4,0x43
    800149a4:	67472703          	lw	a4,1652(a4) # 80058014 <excpt+0x4>
    800149a8:	4791                	li	a5,4
    800149aa:	0001b597          	auipc	a1,0x1b
    800149ae:	60e58593          	addi	a1,a1,1550 # 8002ffb8 <__func__.0+0x2c8>
    800149b2:	c0f701e3          	beq	a4,a5,800145b4 <software_interrupt_ssi+0x646>
    800149b6:	0001b597          	auipc	a1,0x1b
    800149ba:	61258593          	addi	a1,a1,1554 # 8002ffc8 <__func__.0+0x2d8>
    800149be:	bedd                	j	800145b4 <software_interrupt_ssi+0x646>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800149c0:	00043417          	auipc	s0,0x43
    800149c4:	65442403          	lw	s0,1620(s0) # 80058014 <excpt+0x4>
    800149c8:	1471                	addi	s0,s0,-4
    800149ca:	00143413          	seqz	s0,s0
    800149ce:	e74ff06f          	j	80014042 <software_interrupt_ssi+0xd4>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800149d2:	00043717          	auipc	a4,0x43
    800149d6:	64272703          	lw	a4,1602(a4) # 80058014 <excpt+0x4>
    800149da:	478d                	li	a5,3
    800149dc:	0001b597          	auipc	a1,0x1b
    800149e0:	5dc58593          	addi	a1,a1,1500 # 8002ffb8 <__func__.0+0x2c8>
    800149e4:	eaf70b63          	beq	a4,a5,8001409a <software_interrupt_ssi+0x12c>
    800149e8:	0001b597          	auipc	a1,0x1b
    800149ec:	5e058593          	addi	a1,a1,1504 # 8002ffc8 <__func__.0+0x2d8>
    800149f0:	eaaff06f          	j	8001409a <software_interrupt_ssi+0x12c>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800149f4:	00043717          	auipc	a4,0x43
    800149f8:	62072703          	lw	a4,1568(a4) # 80058014 <excpt+0x4>
    800149fc:	4791                	li	a5,4
    800149fe:	0001b597          	auipc	a1,0x1b
    80014a02:	5ba58593          	addi	a1,a1,1466 # 8002ffb8 <__func__.0+0x2c8>
    80014a06:	faf70863          	beq	a4,a5,800141b6 <software_interrupt_ssi+0x248>
    80014a0a:	0001b597          	auipc	a1,0x1b
    80014a0e:	5be58593          	addi	a1,a1,1470 # 8002ffc8 <__func__.0+0x2d8>
    80014a12:	fa4ff06f          	j	800141b6 <software_interrupt_ssi+0x248>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014a16:	00043717          	auipc	a4,0x43
    80014a1a:	5fe72703          	lw	a4,1534(a4) # 80058014 <excpt+0x4>
    80014a1e:	478d                	li	a5,3
    80014a20:	0001b597          	auipc	a1,0x1b
    80014a24:	59858593          	addi	a1,a1,1432 # 8002ffb8 <__func__.0+0x2c8>
    80014a28:	c2f708e3          	beq	a4,a5,80014658 <software_interrupt_ssi+0x6ea>
    80014a2c:	0001b597          	auipc	a1,0x1b
    80014a30:	59c58593          	addi	a1,a1,1436 # 8002ffc8 <__func__.0+0x2d8>
    80014a34:	b115                	j	80014658 <software_interrupt_ssi+0x6ea>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014a36:	00043717          	auipc	a4,0x43
    80014a3a:	5de72703          	lw	a4,1502(a4) # 80058014 <excpt+0x4>
    80014a3e:	478d                	li	a5,3
    80014a40:	0001b597          	auipc	a1,0x1b
    80014a44:	57858593          	addi	a1,a1,1400 # 8002ffb8 <__func__.0+0x2c8>
    80014a48:	a4f708e3          	beq	a4,a5,80014498 <software_interrupt_ssi+0x52a>
    80014a4c:	0001b597          	auipc	a1,0x1b
    80014a50:	57c58593          	addi	a1,a1,1404 # 8002ffc8 <__func__.0+0x2d8>
    80014a54:	b491                	j	80014498 <software_interrupt_ssi+0x52a>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014a56:	00043717          	auipc	a4,0x43
    80014a5a:	5be72703          	lw	a4,1470(a4) # 80058014 <excpt+0x4>
    80014a5e:	4791                	li	a5,4
    80014a60:	0001b597          	auipc	a1,0x1b
    80014a64:	55858593          	addi	a1,a1,1368 # 8002ffb8 <__func__.0+0x2c8>
    80014a68:	d8f70363          	beq	a4,a5,80013fee <software_interrupt_ssi+0x80>
    80014a6c:	0001b597          	auipc	a1,0x1b
    80014a70:	55c58593          	addi	a1,a1,1372 # 8002ffc8 <__func__.0+0x2d8>
    80014a74:	d7aff06f          	j	80013fee <software_interrupt_ssi+0x80>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014a78:	00043717          	auipc	a4,0x43
    80014a7c:	59c72703          	lw	a4,1436(a4) # 80058014 <excpt+0x4>
    80014a80:	478d                	li	a5,3
    80014a82:	0001b597          	auipc	a1,0x1b
    80014a86:	53658593          	addi	a1,a1,1334 # 8002ffb8 <__func__.0+0x2c8>
    80014a8a:	fcf70863          	beq	a4,a5,8001425a <software_interrupt_ssi+0x2ec>
    80014a8e:	0001b597          	auipc	a1,0x1b
    80014a92:	53a58593          	addi	a1,a1,1338 # 8002ffc8 <__func__.0+0x2d8>
    80014a96:	fc4ff06f          	j	8001425a <software_interrupt_ssi+0x2ec>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014a9a:	00043717          	auipc	a4,0x43
    80014a9e:	57a72703          	lw	a4,1402(a4) # 80058014 <excpt+0x4>
    80014aa2:	4791                	li	a5,4
    80014aa4:	0001b597          	auipc	a1,0x1b
    80014aa8:	51458593          	addi	a1,a1,1300 # 8002ffb8 <__func__.0+0x2c8>
    80014aac:	94f704e3          	beq	a4,a5,800143f4 <software_interrupt_ssi+0x486>
    80014ab0:	0001b597          	auipc	a1,0x1b
    80014ab4:	51858593          	addi	a1,a1,1304 # 8002ffc8 <__func__.0+0x2d8>
    80014ab8:	ba35                	j	800143f4 <software_interrupt_ssi+0x486>

0000000080014aba <software_interrupt_vssi>:


bool software_interrupt_vssi() {
    80014aba:	1141                	addi	sp,sp,-16

    TEST_START();
    80014abc:	0001a597          	auipc	a1,0x1a
    80014ac0:	c5458593          	addi	a1,a1,-940 # 8002e710 <__func__.0>
    80014ac4:	0001b517          	auipc	a0,0x1b
    80014ac8:	51450513          	addi	a0,a0,1300 # 8002ffd8 <__func__.0+0x2e8>
bool software_interrupt_vssi() {
    80014acc:	e406                	sd	ra,8(sp)
    TEST_START();
    80014ace:	5be180ef          	jal	8002d08c <printf>
    80014ad2:	4529                	li	a0,10
    80014ad4:	2a6170ef          	jal	8002bd7a <putchar>

    TEST_SETUP_EXCEPT();
    80014ad8:	b34ec0ef          	jal	80000e0c <test_setup_except_function>

    TEST_END();
    80014adc:	0001b597          	auipc	a1,0x1b
    80014ae0:	4dc58593          	addi	a1,a1,1244 # 8002ffb8 <__func__.0+0x2c8>
    80014ae4:	0001b517          	auipc	a0,0x1b
    80014ae8:	58c50513          	addi	a0,a0,1420 # 80030070 <__func__.0+0x380>
    80014aec:	5a0180ef          	jal	8002d08c <printf>
    80014af0:	4511                	li	a0,4
    80014af2:	c16ec0ef          	jal	80000f08 <goto_priv>
    80014af6:	dddec0ef          	jal	800018d2 <reset_state>


    80014afa:	60a2                	ld	ra,8(sp)
    80014afc:	4505                	li	a0,1
    80014afe:	0141                	addi	sp,sp,16
    80014b00:	8082                	ret

0000000080014b02 <instruction_page_fault_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool instruction_page_fault_1(){
    80014b02:	1101                	addi	sp,sp,-32

    TEST_START();
    80014b04:	0001a597          	auipc	a1,0x1a
    80014b08:	c2458593          	addi	a1,a1,-988 # 8002e728 <__func__.26>
    80014b0c:	0001b517          	auipc	a0,0x1b
    80014b10:	4cc50513          	addi	a0,a0,1228 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_page_fault_1(){
    80014b14:	ec06                	sd	ra,24(sp)
    80014b16:	e822                	sd	s0,16(sp)
    80014b18:	e426                	sd	s1,8(sp)
    TEST_START();
    80014b1a:	572180ef          	jal	8002d08c <printf>
    80014b1e:	4529                	li	a0,10
    80014b20:	25a170ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80014b24:	450d                	li	a0,3
    80014b26:	be2ec0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80014b2a:	ab7eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014b2e:	e97eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80014b32:	c4beb0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_HS);
    80014b36:	450d                	li	a0,3
    80014b38:	bd0ec0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80014b3c:	4509                	li	a0,2
    80014b3e:	aeaec0ef          	jal	80000e28 <set_prev_priv>

    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80014b42:	acaec0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014b46:	400197b7          	lui	a5,0x40019
    80014b4a:	078a                	slli	a5,a5,0x2
    80014b4c:	00043417          	auipc	s0,0x43
    80014b50:	4c440413          	addi	s0,s0,1220 # 80058010 <excpt>
    80014b54:	00000297          	auipc	t0,0x0
    80014b58:	00c28293          	addi	t0,t0,12 # 80014b60 <instruction_page_fault_1+0x5e>
    80014b5c:	02543c23          	sd	t0,56(s0)
    80014b60:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.v=0 leads to IPF",
    80014b62:	08200593          	li	a1,130
    80014b66:	00020617          	auipc	a2,0x20
    80014b6a:	46a60613          	addi	a2,a2,1130 # 80034fd0 <__func__.0+0x52e0>
    80014b6e:	0001b517          	auipc	a0,0x1b
    80014b72:	48250513          	addi	a0,a0,1154 # 8002fff0 <__func__.0+0x300>
    80014b76:	516180ef          	jal	8002d08c <printf>
    80014b7a:	00043797          	auipc	a5,0x43
    80014b7e:	4977c783          	lbu	a5,1175(a5) # 80058011 <excpt+0x1>
    80014b82:	0001b597          	auipc	a1,0x1b
    80014b86:	44658593          	addi	a1,a1,1094 # 8002ffc8 <__func__.0+0x2d8>
    80014b8a:	cf89                	beqz	a5,80014ba4 <instruction_page_fault_1+0xa2>
    80014b8c:	6418                	ld	a4,8(s0)
    80014b8e:	47b1                	li	a5,12
    80014b90:	0001b597          	auipc	a1,0x1b
    80014b94:	42858593          	addi	a1,a1,1064 # 8002ffb8 <__func__.0+0x2c8>
    80014b98:	00f70663          	beq	a4,a5,80014ba4 <instruction_page_fault_1+0xa2>
    80014b9c:	0001b597          	auipc	a1,0x1b
    80014ba0:	42c58593          	addi	a1,a1,1068 # 8002ffc8 <__func__.0+0x2d8>
    80014ba4:	0001b517          	auipc	a0,0x1b
    80014ba8:	46450513          	addi	a0,a0,1124 # 80030008 <__func__.0+0x318>
    80014bac:	4e0180ef          	jal	8002d08c <printf>
    80014bb0:	00043797          	auipc	a5,0x43
    80014bb4:	4617c783          	lbu	a5,1121(a5) # 80058011 <excpt+0x1>
    80014bb8:	c789                	beqz	a5,80014bc2 <instruction_page_fault_1+0xc0>
    80014bba:	6418                	ld	a4,8(s0)
    80014bbc:	47b1                	li	a5,12
    80014bbe:	00f70c63          	beq	a4,a5,80014bd6 <instruction_page_fault_1+0xd4>
    80014bc2:	0001b517          	auipc	a0,0x1b
    80014bc6:	44e50513          	addi	a0,a0,1102 # 80030010 <__func__.0+0x320>
    80014bca:	4c2180ef          	jal	8002d08c <printf>
    80014bce:	02900513          	li	a0,41
    80014bd2:	1a8170ef          	jal	8002bd7a <putchar>
    80014bd6:	4529                	li	a0,10
    80014bd8:	1a2170ef          	jal	8002bd7a <putchar>
    80014bdc:	00043797          	auipc	a5,0x43
    80014be0:	4357c783          	lbu	a5,1077(a5) # 80058011 <excpt+0x1>
    80014be4:	4481                	li	s1,0
    80014be6:	c789                	beqz	a5,80014bf0 <instruction_page_fault_1+0xee>
    80014be8:	6404                	ld	s1,8(s0)
    80014bea:	14d1                	addi	s1,s1,-12
    80014bec:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80014bf0:	a1cec0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014bf4:	001007b7          	lui	a5,0x100
    80014bf8:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80014bfc:	07b2                	slli	a5,a5,0xc
    80014bfe:	00000297          	auipc	t0,0x0
    80014c02:	00c28293          	addi	t0,t0,12 # 80014c0a <instruction_page_fault_1+0x108>
    80014c06:	02543c23          	sd	t0,56(s0)
    80014c0a:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014c0c:	08200593          	li	a1,130
    80014c10:	00020617          	auipc	a2,0x20
    80014c14:	3f860613          	addi	a2,a2,1016 # 80035008 <__func__.0+0x5318>
    80014c18:	0001b517          	auipc	a0,0x1b
    80014c1c:	3d850513          	addi	a0,a0,984 # 8002fff0 <__func__.0+0x300>
    80014c20:	46c180ef          	jal	8002d08c <printf>
    80014c24:	00043797          	auipc	a5,0x43
    80014c28:	3ed7c783          	lbu	a5,1005(a5) # 80058011 <excpt+0x1>
    80014c2c:	0001b597          	auipc	a1,0x1b
    80014c30:	39c58593          	addi	a1,a1,924 # 8002ffc8 <__func__.0+0x2d8>
    80014c34:	cf89                	beqz	a5,80014c4e <instruction_page_fault_1+0x14c>
    80014c36:	6418                	ld	a4,8(s0)
    80014c38:	47b1                	li	a5,12
    80014c3a:	0001b597          	auipc	a1,0x1b
    80014c3e:	37e58593          	addi	a1,a1,894 # 8002ffb8 <__func__.0+0x2c8>
    80014c42:	00f70663          	beq	a4,a5,80014c4e <instruction_page_fault_1+0x14c>
    80014c46:	0001b597          	auipc	a1,0x1b
    80014c4a:	38258593          	addi	a1,a1,898 # 8002ffc8 <__func__.0+0x2d8>
    80014c4e:	0001b517          	auipc	a0,0x1b
    80014c52:	3ba50513          	addi	a0,a0,954 # 80030008 <__func__.0+0x318>
    80014c56:	436180ef          	jal	8002d08c <printf>
    80014c5a:	00043797          	auipc	a5,0x43
    80014c5e:	3b77c783          	lbu	a5,951(a5) # 80058011 <excpt+0x1>
    80014c62:	c789                	beqz	a5,80014c6c <instruction_page_fault_1+0x16a>
    80014c64:	6418                	ld	a4,8(s0)
    80014c66:	47b1                	li	a5,12
    80014c68:	00f70c63          	beq	a4,a5,80014c80 <instruction_page_fault_1+0x17e>
    80014c6c:	0001b517          	auipc	a0,0x1b
    80014c70:	3a450513          	addi	a0,a0,932 # 80030010 <__func__.0+0x320>
    80014c74:	418180ef          	jal	8002d08c <printf>
    80014c78:	02900513          	li	a0,41
    80014c7c:	0fe170ef          	jal	8002bd7a <putchar>
    80014c80:	4529                	li	a0,10
    80014c82:	0f8170ef          	jal	8002bd7a <putchar>
    80014c86:	c095                	beqz	s1,80014caa <instruction_page_fault_1+0x1a8>
    80014c88:	00043497          	auipc	s1,0x43
    80014c8c:	3894c483          	lbu	s1,905(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014c90:	0001b597          	auipc	a1,0x1b
    80014c94:	33858593          	addi	a1,a1,824 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014c98:	cc91                	beqz	s1,80014cb4 <instruction_page_fault_1+0x1b2>
    80014c9a:	6418                	ld	a4,8(s0)
    80014c9c:	47b1                	li	a5,12
    TEST_END();
    80014c9e:	0001b597          	auipc	a1,0x1b
    80014ca2:	31a58593          	addi	a1,a1,794 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014ca6:	00f70763          	beq	a4,a5,80014cb4 <instruction_page_fault_1+0x1b2>
    80014caa:	4481                	li	s1,0
    TEST_END();
    80014cac:	0001b597          	auipc	a1,0x1b
    80014cb0:	31c58593          	addi	a1,a1,796 # 8002ffc8 <__func__.0+0x2d8>
    80014cb4:	0001b517          	auipc	a0,0x1b
    80014cb8:	3bc50513          	addi	a0,a0,956 # 80030070 <__func__.0+0x380>
    80014cbc:	3d0180ef          	jal	8002d08c <printf>
    80014cc0:	4511                	li	a0,4
    80014cc2:	a46ec0ef          	jal	80000f08 <goto_priv>
    80014cc6:	c0dec0ef          	jal	800018d2 <reset_state>
}
    80014cca:	60e2                	ld	ra,24(sp)
    80014ccc:	6442                	ld	s0,16(sp)
    80014cce:	8526                	mv	a0,s1
    80014cd0:	64a2                	ld	s1,8(sp)
    80014cd2:	6105                	addi	sp,sp,32
    80014cd4:	8082                	ret

0000000080014cd6 <instruction_page_fault_2>:

bool instruction_page_fault_2(){
    80014cd6:	1101                	addi	sp,sp,-32

    TEST_START();
    80014cd8:	0001a597          	auipc	a1,0x1a
    80014cdc:	a7058593          	addi	a1,a1,-1424 # 8002e748 <__func__.24>
    80014ce0:	0001b517          	auipc	a0,0x1b
    80014ce4:	2f850513          	addi	a0,a0,760 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_page_fault_2(){
    80014ce8:	ec06                	sd	ra,24(sp)
    80014cea:	e822                	sd	s0,16(sp)
    80014cec:	e426                	sd	s1,8(sp)
    TEST_START();
    80014cee:	39e180ef          	jal	8002d08c <printf>
    80014cf2:	4529                	li	a0,10
    80014cf4:	086170ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80014cf8:	450d                	li	a0,3
    80014cfa:	a0eec0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80014cfe:	8e3eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014d02:	cc3eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80014d06:	a77eb0ef          	jal	8000077c <vspt_init>


    goto_priv(PRIV_HS);
    80014d0a:	450d                	li	a0,3
    80014d0c:	9fcec0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，在HS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80014d10:	8fcec0ef          	jal	80000e0c <test_setup_except_function>
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80014d14:	000807b7          	lui	a5,0x80
    80014d18:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014d1a:	07b6                	slli	a5,a5,0xd
    80014d1c:	00043417          	auipc	s0,0x43
    80014d20:	2f440413          	addi	s0,s0,756 # 80058010 <excpt>
    80014d24:	00000297          	auipc	t0,0x0
    80014d28:	00c28293          	addi	t0,t0,12 # 80014d30 <instruction_page_fault_2+0x5a>
    80014d2c:	02543c23          	sd	t0,56(s0)
    80014d30:	8782                	jr	a5
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014d32:	08200593          	li	a1,130
    80014d36:	00020617          	auipc	a2,0x20
    80014d3a:	30a60613          	addi	a2,a2,778 # 80035040 <__func__.0+0x5350>
    80014d3e:	0001b517          	auipc	a0,0x1b
    80014d42:	2b250513          	addi	a0,a0,690 # 8002fff0 <__func__.0+0x300>
    80014d46:	346180ef          	jal	8002d08c <printf>
    80014d4a:	00043797          	auipc	a5,0x43
    80014d4e:	2c77c783          	lbu	a5,711(a5) # 80058011 <excpt+0x1>
    80014d52:	0001b597          	auipc	a1,0x1b
    80014d56:	27658593          	addi	a1,a1,630 # 8002ffc8 <__func__.0+0x2d8>
    80014d5a:	cf89                	beqz	a5,80014d74 <instruction_page_fault_2+0x9e>
    80014d5c:	6418                	ld	a4,8(s0)
    80014d5e:	47b1                	li	a5,12
    80014d60:	0001b597          	auipc	a1,0x1b
    80014d64:	25858593          	addi	a1,a1,600 # 8002ffb8 <__func__.0+0x2c8>
    80014d68:	00f70663          	beq	a4,a5,80014d74 <instruction_page_fault_2+0x9e>
    80014d6c:	0001b597          	auipc	a1,0x1b
    80014d70:	25c58593          	addi	a1,a1,604 # 8002ffc8 <__func__.0+0x2d8>
    80014d74:	0001b517          	auipc	a0,0x1b
    80014d78:	29450513          	addi	a0,a0,660 # 80030008 <__func__.0+0x318>
    80014d7c:	310180ef          	jal	8002d08c <printf>
    80014d80:	00043797          	auipc	a5,0x43
    80014d84:	2917c783          	lbu	a5,657(a5) # 80058011 <excpt+0x1>
    80014d88:	c789                	beqz	a5,80014d92 <instruction_page_fault_2+0xbc>
    80014d8a:	6418                	ld	a4,8(s0)
    80014d8c:	47b1                	li	a5,12
    80014d8e:	00f70c63          	beq	a4,a5,80014da6 <instruction_page_fault_2+0xd0>
    80014d92:	0001b517          	auipc	a0,0x1b
    80014d96:	27e50513          	addi	a0,a0,638 # 80030010 <__func__.0+0x320>
    80014d9a:	2f2180ef          	jal	8002d08c <printf>
    80014d9e:	02900513          	li	a0,41
    80014da2:	7d9160ef          	jal	8002bd7a <putchar>
    80014da6:	4529                	li	a0,10
    80014da8:	7d3160ef          	jal	8002bd7a <putchar>
    80014dac:	00043497          	auipc	s1,0x43
    80014db0:	2654c483          	lbu	s1,613(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014db4:	0001b597          	auipc	a1,0x1b
    80014db8:	21458593          	addi	a1,a1,532 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014dbc:	cc91                	beqz	s1,80014dd8 <instruction_page_fault_2+0x102>
    80014dbe:	6418                	ld	a4,8(s0)
    80014dc0:	47b1                	li	a5,12
    TEST_END();
    80014dc2:	0001b597          	auipc	a1,0x1b
    80014dc6:	1f658593          	addi	a1,a1,502 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014dca:	00f70763          	beq	a4,a5,80014dd8 <instruction_page_fault_2+0x102>
    80014dce:	4481                	li	s1,0
    TEST_END();
    80014dd0:	0001b597          	auipc	a1,0x1b
    80014dd4:	1f858593          	addi	a1,a1,504 # 8002ffc8 <__func__.0+0x2d8>
    80014dd8:	0001b517          	auipc	a0,0x1b
    80014ddc:	29850513          	addi	a0,a0,664 # 80030070 <__func__.0+0x380>
    80014de0:	2ac180ef          	jal	8002d08c <printf>
    80014de4:	4511                	li	a0,4
    80014de6:	922ec0ef          	jal	80000f08 <goto_priv>
    80014dea:	ae9ec0ef          	jal	800018d2 <reset_state>
}
    80014dee:	60e2                	ld	ra,24(sp)
    80014df0:	6442                	ld	s0,16(sp)
    80014df2:	8526                	mv	a0,s1
    80014df4:	64a2                	ld	s1,8(sp)
    80014df6:	6105                	addi	sp,sp,32
    80014df8:	8082                	ret

0000000080014dfa <instruction_page_fault_3>:



bool instruction_page_fault_3(){
    80014dfa:	1101                	addi	sp,sp,-32

    TEST_START();
    80014dfc:	0001a597          	auipc	a1,0x1a
    80014e00:	96c58593          	addi	a1,a1,-1684 # 8002e768 <__func__.23>
    80014e04:	0001b517          	auipc	a0,0x1b
    80014e08:	1d450513          	addi	a0,a0,468 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_page_fault_3(){
    80014e0c:	ec06                	sd	ra,24(sp)
    80014e0e:	e822                	sd	s0,16(sp)
    80014e10:	e426                	sd	s1,8(sp)
    TEST_START();
    80014e12:	27a180ef          	jal	8002d08c <printf>
    80014e16:	4529                	li	a0,10
    80014e18:	763160ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80014e1c:	450d                	li	a0,3
    80014e1e:	8eaec0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80014e22:	fbeeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014e26:	b9feb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80014e2a:	953eb0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80014e2e:	4509                	li	a0,2
    80014e30:	8d8ec0ef          	jal	80000f08 <goto_priv>


    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80014e34:	fd9eb0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014e38:	400197b7          	lui	a5,0x40019
    80014e3c:	078a                	slli	a5,a5,0x2
    80014e3e:	00043417          	auipc	s0,0x43
    80014e42:	1d240413          	addi	s0,s0,466 # 80058010 <excpt>
    80014e46:	00000297          	auipc	t0,0x0
    80014e4a:	00c28293          	addi	t0,t0,12 # 80014e52 <instruction_page_fault_3+0x58>
    80014e4e:	02543c23          	sd	t0,56(s0)
    80014e52:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.v=0 leads to IPF",
    80014e54:	08200593          	li	a1,130
    80014e58:	00020617          	auipc	a2,0x20
    80014e5c:	22060613          	addi	a2,a2,544 # 80035078 <__func__.0+0x5388>
    80014e60:	0001b517          	auipc	a0,0x1b
    80014e64:	19050513          	addi	a0,a0,400 # 8002fff0 <__func__.0+0x300>
    80014e68:	224180ef          	jal	8002d08c <printf>
    80014e6c:	00043797          	auipc	a5,0x43
    80014e70:	1a57c783          	lbu	a5,421(a5) # 80058011 <excpt+0x1>
    80014e74:	0001b597          	auipc	a1,0x1b
    80014e78:	15458593          	addi	a1,a1,340 # 8002ffc8 <__func__.0+0x2d8>
    80014e7c:	cf89                	beqz	a5,80014e96 <instruction_page_fault_3+0x9c>
    80014e7e:	6418                	ld	a4,8(s0)
    80014e80:	47b1                	li	a5,12
    80014e82:	0001b597          	auipc	a1,0x1b
    80014e86:	13658593          	addi	a1,a1,310 # 8002ffb8 <__func__.0+0x2c8>
    80014e8a:	00f70663          	beq	a4,a5,80014e96 <instruction_page_fault_3+0x9c>
    80014e8e:	0001b597          	auipc	a1,0x1b
    80014e92:	13a58593          	addi	a1,a1,314 # 8002ffc8 <__func__.0+0x2d8>
    80014e96:	0001b517          	auipc	a0,0x1b
    80014e9a:	17250513          	addi	a0,a0,370 # 80030008 <__func__.0+0x318>
    80014e9e:	1ee180ef          	jal	8002d08c <printf>
    80014ea2:	00043797          	auipc	a5,0x43
    80014ea6:	16f7c783          	lbu	a5,367(a5) # 80058011 <excpt+0x1>
    80014eaa:	c789                	beqz	a5,80014eb4 <instruction_page_fault_3+0xba>
    80014eac:	6418                	ld	a4,8(s0)
    80014eae:	47b1                	li	a5,12
    80014eb0:	00f70c63          	beq	a4,a5,80014ec8 <instruction_page_fault_3+0xce>
    80014eb4:	0001b517          	auipc	a0,0x1b
    80014eb8:	15c50513          	addi	a0,a0,348 # 80030010 <__func__.0+0x320>
    80014ebc:	1d0180ef          	jal	8002d08c <printf>
    80014ec0:	02900513          	li	a0,41
    80014ec4:	6b7160ef          	jal	8002bd7a <putchar>
    80014ec8:	4529                	li	a0,10
    80014eca:	6b1160ef          	jal	8002bd7a <putchar>
    80014ece:	00043797          	auipc	a5,0x43
    80014ed2:	1437c783          	lbu	a5,323(a5) # 80058011 <excpt+0x1>
    80014ed6:	4481                	li	s1,0
    80014ed8:	c789                	beqz	a5,80014ee2 <instruction_page_fault_3+0xe8>
    80014eda:	6404                	ld	s1,8(s0)
    80014edc:	14d1                	addi	s1,s1,-12
    80014ede:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80014ee2:	f2beb0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014ee6:	001007b7          	lui	a5,0x100
    80014eea:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80014eee:	07b2                	slli	a5,a5,0xc
    80014ef0:	00000297          	auipc	t0,0x0
    80014ef4:	00c28293          	addi	t0,t0,12 # 80014efc <instruction_page_fault_3+0x102>
    80014ef8:	02543c23          	sd	t0,56(s0)
    80014efc:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014efe:	08200593          	li	a1,130
    80014f02:	00020617          	auipc	a2,0x20
    80014f06:	1ae60613          	addi	a2,a2,430 # 800350b0 <__func__.0+0x53c0>
    80014f0a:	0001b517          	auipc	a0,0x1b
    80014f0e:	0e650513          	addi	a0,a0,230 # 8002fff0 <__func__.0+0x300>
    80014f12:	17a180ef          	jal	8002d08c <printf>
    80014f16:	00043797          	auipc	a5,0x43
    80014f1a:	0fb7c783          	lbu	a5,251(a5) # 80058011 <excpt+0x1>
    80014f1e:	0001b597          	auipc	a1,0x1b
    80014f22:	0aa58593          	addi	a1,a1,170 # 8002ffc8 <__func__.0+0x2d8>
    80014f26:	cf89                	beqz	a5,80014f40 <instruction_page_fault_3+0x146>
    80014f28:	6418                	ld	a4,8(s0)
    80014f2a:	47b1                	li	a5,12
    80014f2c:	0001b597          	auipc	a1,0x1b
    80014f30:	08c58593          	addi	a1,a1,140 # 8002ffb8 <__func__.0+0x2c8>
    80014f34:	00f70663          	beq	a4,a5,80014f40 <instruction_page_fault_3+0x146>
    80014f38:	0001b597          	auipc	a1,0x1b
    80014f3c:	09058593          	addi	a1,a1,144 # 8002ffc8 <__func__.0+0x2d8>
    80014f40:	0001b517          	auipc	a0,0x1b
    80014f44:	0c850513          	addi	a0,a0,200 # 80030008 <__func__.0+0x318>
    80014f48:	144180ef          	jal	8002d08c <printf>
    80014f4c:	00043797          	auipc	a5,0x43
    80014f50:	0c57c783          	lbu	a5,197(a5) # 80058011 <excpt+0x1>
    80014f54:	c789                	beqz	a5,80014f5e <instruction_page_fault_3+0x164>
    80014f56:	6418                	ld	a4,8(s0)
    80014f58:	47b1                	li	a5,12
    80014f5a:	00f70c63          	beq	a4,a5,80014f72 <instruction_page_fault_3+0x178>
    80014f5e:	0001b517          	auipc	a0,0x1b
    80014f62:	0b250513          	addi	a0,a0,178 # 80030010 <__func__.0+0x320>
    80014f66:	126180ef          	jal	8002d08c <printf>
    80014f6a:	02900513          	li	a0,41
    80014f6e:	60d160ef          	jal	8002bd7a <putchar>
    80014f72:	4529                	li	a0,10
    80014f74:	607160ef          	jal	8002bd7a <putchar>
    80014f78:	c095                	beqz	s1,80014f9c <instruction_page_fault_3+0x1a2>
    80014f7a:	00043497          	auipc	s1,0x43
    80014f7e:	0974c483          	lbu	s1,151(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014f82:	0001b597          	auipc	a1,0x1b
    80014f86:	04658593          	addi	a1,a1,70 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014f8a:	cc91                	beqz	s1,80014fa6 <instruction_page_fault_3+0x1ac>
    80014f8c:	6418                	ld	a4,8(s0)
    80014f8e:	47b1                	li	a5,12
    TEST_END();
    80014f90:	0001b597          	auipc	a1,0x1b
    80014f94:	02858593          	addi	a1,a1,40 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014f98:	00f70763          	beq	a4,a5,80014fa6 <instruction_page_fault_3+0x1ac>
    80014f9c:	4481                	li	s1,0
    TEST_END();
    80014f9e:	0001b597          	auipc	a1,0x1b
    80014fa2:	02a58593          	addi	a1,a1,42 # 8002ffc8 <__func__.0+0x2d8>
    80014fa6:	0001b517          	auipc	a0,0x1b
    80014faa:	0ca50513          	addi	a0,a0,202 # 80030070 <__func__.0+0x380>
    80014fae:	0de180ef          	jal	8002d08c <printf>
    80014fb2:	4511                	li	a0,4
    80014fb4:	f55eb0ef          	jal	80000f08 <goto_priv>
    80014fb8:	91bec0ef          	jal	800018d2 <reset_state>
}
    80014fbc:	60e2                	ld	ra,24(sp)
    80014fbe:	6442                	ld	s0,16(sp)
    80014fc0:	8526                	mv	a0,s1
    80014fc2:	64a2                	ld	s1,8(sp)
    80014fc4:	6105                	addi	sp,sp,32
    80014fc6:	8082                	ret

0000000080014fc8 <instruction_page_fault_4>:

bool instruction_page_fault_4(){
    80014fc8:	1101                	addi	sp,sp,-32

    TEST_START();
    80014fca:	00019597          	auipc	a1,0x19
    80014fce:	7be58593          	addi	a1,a1,1982 # 8002e788 <__func__.22>
    80014fd2:	0001b517          	auipc	a0,0x1b
    80014fd6:	00650513          	addi	a0,a0,6 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_page_fault_4(){
    80014fda:	ec06                	sd	ra,24(sp)
    80014fdc:	e822                	sd	s0,16(sp)
    80014fde:	e426                	sd	s1,8(sp)
    TEST_START();
    80014fe0:	0ac180ef          	jal	8002d08c <printf>
    80014fe4:	4529                	li	a0,10
    80014fe6:	595160ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80014fea:	450d                	li	a0,3
    80014fec:	f1deb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80014ff0:	df0eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014ff4:	9d1eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80014ff8:	f84eb0ef          	jal	8000077c <vspt_init>


    goto_priv(PRIV_VS);
    80014ffc:	4509                	li	a0,2
    80014ffe:	f0beb0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，在VS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015002:	e0beb0ef          	jal	80000e0c <test_setup_except_function>
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80015006:	000807b7          	lui	a5,0x80
    8001500a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001500c:	07b6                	slli	a5,a5,0xd
    8001500e:	00043417          	auipc	s0,0x43
    80015012:	00240413          	addi	s0,s0,2 # 80058010 <excpt>
    80015016:	00000297          	auipc	t0,0x0
    8001501a:	00c28293          	addi	t0,t0,12 # 80015022 <instruction_page_fault_4+0x5a>
    8001501e:	02543c23          	sd	t0,56(s0)
    80015022:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80015024:	08200593          	li	a1,130
    80015028:	00020617          	auipc	a2,0x20
    8001502c:	0c060613          	addi	a2,a2,192 # 800350e8 <__func__.0+0x53f8>
    80015030:	0001b517          	auipc	a0,0x1b
    80015034:	fc050513          	addi	a0,a0,-64 # 8002fff0 <__func__.0+0x300>
    80015038:	054180ef          	jal	8002d08c <printf>
    8001503c:	00043797          	auipc	a5,0x43
    80015040:	fd57c783          	lbu	a5,-43(a5) # 80058011 <excpt+0x1>
    80015044:	0001b597          	auipc	a1,0x1b
    80015048:	f8458593          	addi	a1,a1,-124 # 8002ffc8 <__func__.0+0x2d8>
    8001504c:	cf89                	beqz	a5,80015066 <instruction_page_fault_4+0x9e>
    8001504e:	6418                	ld	a4,8(s0)
    80015050:	47b1                	li	a5,12
    80015052:	0001b597          	auipc	a1,0x1b
    80015056:	f6658593          	addi	a1,a1,-154 # 8002ffb8 <__func__.0+0x2c8>
    8001505a:	00f70663          	beq	a4,a5,80015066 <instruction_page_fault_4+0x9e>
    8001505e:	0001b597          	auipc	a1,0x1b
    80015062:	f6a58593          	addi	a1,a1,-150 # 8002ffc8 <__func__.0+0x2d8>
    80015066:	0001b517          	auipc	a0,0x1b
    8001506a:	fa250513          	addi	a0,a0,-94 # 80030008 <__func__.0+0x318>
    8001506e:	01e180ef          	jal	8002d08c <printf>
    80015072:	00043797          	auipc	a5,0x43
    80015076:	f9f7c783          	lbu	a5,-97(a5) # 80058011 <excpt+0x1>
    8001507a:	c789                	beqz	a5,80015084 <instruction_page_fault_4+0xbc>
    8001507c:	6418                	ld	a4,8(s0)
    8001507e:	47b1                	li	a5,12
    80015080:	00f70c63          	beq	a4,a5,80015098 <instruction_page_fault_4+0xd0>
    80015084:	0001b517          	auipc	a0,0x1b
    80015088:	f8c50513          	addi	a0,a0,-116 # 80030010 <__func__.0+0x320>
    8001508c:	000180ef          	jal	8002d08c <printf>
    80015090:	02900513          	li	a0,41
    80015094:	4e7160ef          	jal	8002bd7a <putchar>
    80015098:	4529                	li	a0,10
    8001509a:	4e1160ef          	jal	8002bd7a <putchar>
    8001509e:	00043497          	auipc	s1,0x43
    800150a2:	f734c483          	lbu	s1,-141(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    800150a6:	0001b597          	auipc	a1,0x1b
    800150aa:	f2258593          	addi	a1,a1,-222 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    800150ae:	cc91                	beqz	s1,800150ca <instruction_page_fault_4+0x102>
    800150b0:	6418                	ld	a4,8(s0)
    800150b2:	47b1                	li	a5,12
    TEST_END();
    800150b4:	0001b597          	auipc	a1,0x1b
    800150b8:	f0458593          	addi	a1,a1,-252 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    800150bc:	00f70763          	beq	a4,a5,800150ca <instruction_page_fault_4+0x102>
    800150c0:	4481                	li	s1,0
    TEST_END();
    800150c2:	0001b597          	auipc	a1,0x1b
    800150c6:	f0658593          	addi	a1,a1,-250 # 8002ffc8 <__func__.0+0x2d8>
    800150ca:	0001b517          	auipc	a0,0x1b
    800150ce:	fa650513          	addi	a0,a0,-90 # 80030070 <__func__.0+0x380>
    800150d2:	7bb170ef          	jal	8002d08c <printf>
    800150d6:	4511                	li	a0,4
    800150d8:	e31eb0ef          	jal	80000f08 <goto_priv>
    800150dc:	ff6ec0ef          	jal	800018d2 <reset_state>
}
    800150e0:	60e2                	ld	ra,24(sp)
    800150e2:	6442                	ld	s0,16(sp)
    800150e4:	8526                	mv	a0,s1
    800150e6:	64a2                	ld	s1,8(sp)
    800150e8:	6105                	addi	sp,sp,32
    800150ea:	8082                	ret

00000000800150ec <load_page_fault_1>:

bool load_page_fault_1(){
    800150ec:	1101                	addi	sp,sp,-32

    TEST_START();
    800150ee:	00019597          	auipc	a1,0x19
    800150f2:	6ba58593          	addi	a1,a1,1722 # 8002e7a8 <__func__.21>
    800150f6:	0001b517          	auipc	a0,0x1b
    800150fa:	ee250513          	addi	a0,a0,-286 # 8002ffd8 <__func__.0+0x2e8>
bool load_page_fault_1(){
    800150fe:	ec06                	sd	ra,24(sp)
    80015100:	e822                	sd	s0,16(sp)
    80015102:	e426                	sd	s1,8(sp)
    TEST_START();
    80015104:	789170ef          	jal	8002d08c <printf>
    80015108:	4529                	li	a0,10
    8001510a:	471160ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS); 
    8001510e:	450d                	li	a0,3
    80015110:	df9eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015114:	ccceb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015118:	8adeb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001511c:	e60eb0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80015120:	450d                	li	a0,3
    80015122:	de7eb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015126:	4509                	li	a0,2
    80015128:	d01eb0ef          	jal	80000e28 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    8001512c:	ce1eb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015130:	400197b7          	lui	a5,0x40019
    80015134:	078a                	slli	a5,a5,0x2
    80015136:	6007c7f3          	.insn	4, 0x6007c7f3

    addr = hs_page_base(VSI_GI);
    hlvb(addr);
    TEST_ASSERT("hs mode load when pte.v=0 leads to LPF",
    8001513a:	08200593          	li	a1,130
    8001513e:	00020617          	auipc	a2,0x20
    80015142:	fe260613          	addi	a2,a2,-30 # 80035120 <__func__.0+0x5430>
    80015146:	0001b517          	auipc	a0,0x1b
    8001514a:	eaa50513          	addi	a0,a0,-342 # 8002fff0 <__func__.0+0x300>
    8001514e:	73f170ef          	jal	8002d08c <printf>
    80015152:	00043797          	auipc	a5,0x43
    80015156:	ebf7c783          	lbu	a5,-321(a5) # 80058011 <excpt+0x1>
    8001515a:	00043497          	auipc	s1,0x43
    8001515e:	eb648493          	addi	s1,s1,-330 # 80058010 <excpt>
    80015162:	0001b597          	auipc	a1,0x1b
    80015166:	e6658593          	addi	a1,a1,-410 # 8002ffc8 <__func__.0+0x2d8>
    8001516a:	cf89                	beqz	a5,80015184 <load_page_fault_1+0x98>
    8001516c:	6498                	ld	a4,8(s1)
    8001516e:	47b5                	li	a5,13
    80015170:	0001b597          	auipc	a1,0x1b
    80015174:	e4858593          	addi	a1,a1,-440 # 8002ffb8 <__func__.0+0x2c8>
    80015178:	00f70663          	beq	a4,a5,80015184 <load_page_fault_1+0x98>
    8001517c:	0001b597          	auipc	a1,0x1b
    80015180:	e4c58593          	addi	a1,a1,-436 # 8002ffc8 <__func__.0+0x2d8>
    80015184:	0001b517          	auipc	a0,0x1b
    80015188:	e8450513          	addi	a0,a0,-380 # 80030008 <__func__.0+0x318>
    8001518c:	701170ef          	jal	8002d08c <printf>
    80015190:	00043797          	auipc	a5,0x43
    80015194:	e817c783          	lbu	a5,-383(a5) # 80058011 <excpt+0x1>
    80015198:	c789                	beqz	a5,800151a2 <load_page_fault_1+0xb6>
    8001519a:	6498                	ld	a4,8(s1)
    8001519c:	47b5                	li	a5,13
    8001519e:	00f70c63          	beq	a4,a5,800151b6 <load_page_fault_1+0xca>
    800151a2:	0001b517          	auipc	a0,0x1b
    800151a6:	e6e50513          	addi	a0,a0,-402 # 80030010 <__func__.0+0x320>
    800151aa:	6e3170ef          	jal	8002d08c <printf>
    800151ae:	02900513          	li	a0,41
    800151b2:	3c9160ef          	jal	8002bd7a <putchar>
    800151b6:	4529                	li	a0,10
    800151b8:	3c3160ef          	jal	8002bd7a <putchar>
    800151bc:	00043797          	auipc	a5,0x43
    800151c0:	e557c783          	lbu	a5,-427(a5) # 80058011 <excpt+0x1>
    800151c4:	4401                	li	s0,0
    800151c6:	c789                	beqz	a5,800151d0 <load_page_fault_1+0xe4>
    800151c8:	6480                	ld	s0,8(s1)
    800151ca:	144d                	addi	s0,s0,-13
    800151cc:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LPF
    );


    //执行hlvd指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    800151d0:	c3deb0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800151d4:	000807b7          	lui	a5,0x80
    800151d8:	1007b073          	csrc	sstatus,a5
    asm volatile(
    800151dc:	001007b7          	lui	a5,0x100
    800151e0:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    800151e4:	07b2                	slli	a5,a5,0xc
    800151e6:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800151ea:	08200593          	li	a1,130
    800151ee:	00020617          	auipc	a2,0x20
    800151f2:	f5a60613          	addi	a2,a2,-166 # 80035148 <__func__.0+0x5458>
    800151f6:	0001b517          	auipc	a0,0x1b
    800151fa:	dfa50513          	addi	a0,a0,-518 # 8002fff0 <__func__.0+0x300>
    800151fe:	68f170ef          	jal	8002d08c <printf>
    80015202:	00043797          	auipc	a5,0x43
    80015206:	e0f7c783          	lbu	a5,-497(a5) # 80058011 <excpt+0x1>
    8001520a:	0001b597          	auipc	a1,0x1b
    8001520e:	dbe58593          	addi	a1,a1,-578 # 8002ffc8 <__func__.0+0x2d8>
    80015212:	cf89                	beqz	a5,8001522c <load_page_fault_1+0x140>
    80015214:	6498                	ld	a4,8(s1)
    80015216:	47b5                	li	a5,13
    80015218:	0001b597          	auipc	a1,0x1b
    8001521c:	da058593          	addi	a1,a1,-608 # 8002ffb8 <__func__.0+0x2c8>
    80015220:	00f70663          	beq	a4,a5,8001522c <load_page_fault_1+0x140>
    80015224:	0001b597          	auipc	a1,0x1b
    80015228:	da458593          	addi	a1,a1,-604 # 8002ffc8 <__func__.0+0x2d8>
    8001522c:	0001b517          	auipc	a0,0x1b
    80015230:	ddc50513          	addi	a0,a0,-548 # 80030008 <__func__.0+0x318>
    80015234:	659170ef          	jal	8002d08c <printf>
    80015238:	00043797          	auipc	a5,0x43
    8001523c:	dd97c783          	lbu	a5,-551(a5) # 80058011 <excpt+0x1>
    80015240:	c789                	beqz	a5,8001524a <load_page_fault_1+0x15e>
    80015242:	6498                	ld	a4,8(s1)
    80015244:	47b5                	li	a5,13
    80015246:	00f70c63          	beq	a4,a5,8001525e <load_page_fault_1+0x172>
    8001524a:	0001b517          	auipc	a0,0x1b
    8001524e:	dc650513          	addi	a0,a0,-570 # 80030010 <__func__.0+0x320>
    80015252:	63b170ef          	jal	8002d08c <printf>
    80015256:	02900513          	li	a0,41
    8001525a:	321160ef          	jal	8002bd7a <putchar>
    8001525e:	4529                	li	a0,10
    80015260:	31b160ef          	jal	8002bd7a <putchar>
    80015264:	c801                	beqz	s0,80015274 <load_page_fault_1+0x188>
    80015266:	00043797          	auipc	a5,0x43
    8001526a:	dab7c783          	lbu	a5,-597(a5) # 80058011 <excpt+0x1>
    8001526e:	4401                	li	s0,0
    80015270:	0c079e63          	bnez	a5,8001534c <load_page_fault_1+0x260>
        excpt.cause == CAUSE_LPF
    );

    //执行hlvd指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_HS);
    80015274:	450d                	li	a0,3
    80015276:	c93eb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001527a:	b93eb0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001527e:	000807b7          	lui	a5,0x80
    80015282:	1007a073          	csrs	sstatus,a5
    80015286:	001007b7          	lui	a5,0x100
    8001528a:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001528c:	07b2                	slli	a5,a5,0xc
    8001528e:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80015292:	08200593          	li	a1,130
    80015296:	00020617          	auipc	a2,0x20
    8001529a:	ef260613          	addi	a2,a2,-270 # 80035188 <__func__.0+0x5498>
    8001529e:	0001b517          	auipc	a0,0x1b
    800152a2:	d5250513          	addi	a0,a0,-686 # 8002fff0 <__func__.0+0x300>
    800152a6:	5e7170ef          	jal	8002d08c <printf>
    800152aa:	00043797          	auipc	a5,0x43
    800152ae:	d677c783          	lbu	a5,-665(a5) # 80058011 <excpt+0x1>
    800152b2:	0001b597          	auipc	a1,0x1b
    800152b6:	d1658593          	addi	a1,a1,-746 # 8002ffc8 <__func__.0+0x2d8>
    800152ba:	cf89                	beqz	a5,800152d4 <load_page_fault_1+0x1e8>
    800152bc:	6498                	ld	a4,8(s1)
    800152be:	47b5                	li	a5,13
    800152c0:	0001b597          	auipc	a1,0x1b
    800152c4:	cf858593          	addi	a1,a1,-776 # 8002ffb8 <__func__.0+0x2c8>
    800152c8:	00f70663          	beq	a4,a5,800152d4 <load_page_fault_1+0x1e8>
    800152cc:	0001b597          	auipc	a1,0x1b
    800152d0:	cfc58593          	addi	a1,a1,-772 # 8002ffc8 <__func__.0+0x2d8>
    800152d4:	0001b517          	auipc	a0,0x1b
    800152d8:	d3450513          	addi	a0,a0,-716 # 80030008 <__func__.0+0x318>
    800152dc:	5b1170ef          	jal	8002d08c <printf>
    800152e0:	00043797          	auipc	a5,0x43
    800152e4:	d317c783          	lbu	a5,-719(a5) # 80058011 <excpt+0x1>
    800152e8:	c789                	beqz	a5,800152f2 <load_page_fault_1+0x206>
    800152ea:	6498                	ld	a4,8(s1)
    800152ec:	47b5                	li	a5,13
    800152ee:	00f70c63          	beq	a4,a5,80015306 <load_page_fault_1+0x21a>
    800152f2:	0001b517          	auipc	a0,0x1b
    800152f6:	d1e50513          	addi	a0,a0,-738 # 80030010 <__func__.0+0x320>
    800152fa:	593170ef          	jal	8002d08c <printf>
    800152fe:	02900513          	li	a0,41
    80015302:	279160ef          	jal	8002bd7a <putchar>
    80015306:	4529                	li	a0,10
    80015308:	273160ef          	jal	8002bd7a <putchar>
    8001530c:	c411                	beqz	s0,80015318 <load_page_fault_1+0x22c>
    8001530e:	00043417          	auipc	s0,0x43
    80015312:	d0344403          	lbu	s0,-765(s0) # 80058011 <excpt+0x1>
    80015316:	e021                	bnez	s0,80015356 <load_page_fault_1+0x26a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015318:	000807b7          	lui	a5,0x80
    8001531c:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80015320:	4401                	li	s0,0

    TEST_END();
    80015322:	0001b597          	auipc	a1,0x1b
    80015326:	ca658593          	addi	a1,a1,-858 # 8002ffc8 <__func__.0+0x2d8>
    8001532a:	0001b517          	auipc	a0,0x1b
    8001532e:	d4650513          	addi	a0,a0,-698 # 80030070 <__func__.0+0x380>
    80015332:	55b170ef          	jal	8002d08c <printf>
    80015336:	4511                	li	a0,4
    80015338:	bd1eb0ef          	jal	80000f08 <goto_priv>
    8001533c:	d96ec0ef          	jal	800018d2 <reset_state>

}
    80015340:	60e2                	ld	ra,24(sp)
    80015342:	8522                	mv	a0,s0
    80015344:	6442                	ld	s0,16(sp)
    80015346:	64a2                	ld	s1,8(sp)
    80015348:	6105                	addi	sp,sp,32
    8001534a:	8082                	ret
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    8001534c:	6480                	ld	s0,8(s1)
    8001534e:	144d                	addi	s0,s0,-13
    80015350:	00143413          	seqz	s0,s0
    80015354:	b705                	j	80015274 <load_page_fault_1+0x188>
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80015356:	6498                	ld	a4,8(s1)
    80015358:	47b5                	li	a5,13
    8001535a:	faf71fe3          	bne	a4,a5,80015318 <load_page_fault_1+0x22c>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001535e:	000807b7          	lui	a5,0x80
    80015362:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80015366:	0001b597          	auipc	a1,0x1b
    8001536a:	c5258593          	addi	a1,a1,-942 # 8002ffb8 <__func__.0+0x2c8>
    8001536e:	bf75                	j	8001532a <load_page_fault_1+0x23e>

0000000080015370 <load_page_fault_2>:

bool load_page_fault_2(){
    80015370:	1101                	addi	sp,sp,-32

    TEST_START();
    80015372:	00019597          	auipc	a1,0x19
    80015376:	44e58593          	addi	a1,a1,1102 # 8002e7c0 <__func__.20>
    8001537a:	0001b517          	auipc	a0,0x1b
    8001537e:	c5e50513          	addi	a0,a0,-930 # 8002ffd8 <__func__.0+0x2e8>
bool load_page_fault_2(){
    80015382:	ec06                	sd	ra,24(sp)
    80015384:	e822                	sd	s0,16(sp)
    80015386:	e426                	sd	s1,8(sp)
    TEST_START();
    80015388:	505170ef          	jal	8002d08c <printf>
    8001538c:	4529                	li	a0,10
    8001538e:	1ed160ef          	jal	8002bd7a <putchar>


    goto_priv(PRIV_HS);
    80015392:	450d                	li	a0,3
    80015394:	b75eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015398:	a48eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001539c:	e28eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800153a0:	bdceb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800153a4:	4511                	li	a0,4
    800153a6:	b63eb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800153aa:	000407b7          	lui	a5,0x40
    800153ae:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    800153b2:	450d                	li	a0,3
    800153b4:	b55eb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800153b8:	4509                	li	a0,2
    800153ba:	a6feb0ef          	jal	80000e28 <set_prev_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800153be:	a4feb0ef          	jal	80000e0c <test_setup_except_function>
    800153c2:	000807b7          	lui	a5,0x80
    800153c6:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800153c8:	07b6                	slli	a5,a5,0xd
    800153ca:	6c07c7f3          	.insn	4, 0x6c07c7f3
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    hlvd(addr);
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    800153ce:	08200593          	li	a1,130
    800153d2:	00020617          	auipc	a2,0x20
    800153d6:	dfe60613          	addi	a2,a2,-514 # 800351d0 <__func__.0+0x54e0>
    800153da:	0001b517          	auipc	a0,0x1b
    800153de:	c1650513          	addi	a0,a0,-1002 # 8002fff0 <__func__.0+0x300>
    800153e2:	4ab170ef          	jal	8002d08c <printf>
    800153e6:	00043797          	auipc	a5,0x43
    800153ea:	c2b7c783          	lbu	a5,-981(a5) # 80058011 <excpt+0x1>
    800153ee:	00043497          	auipc	s1,0x43
    800153f2:	c2248493          	addi	s1,s1,-990 # 80058010 <excpt>
    800153f6:	0001b597          	auipc	a1,0x1b
    800153fa:	bd258593          	addi	a1,a1,-1070 # 8002ffc8 <__func__.0+0x2d8>
    800153fe:	cf89                	beqz	a5,80015418 <load_page_fault_2+0xa8>
    80015400:	6498                	ld	a4,8(s1)
    80015402:	47b5                	li	a5,13
    80015404:	0001b597          	auipc	a1,0x1b
    80015408:	bb458593          	addi	a1,a1,-1100 # 8002ffb8 <__func__.0+0x2c8>
    8001540c:	00f70663          	beq	a4,a5,80015418 <load_page_fault_2+0xa8>
    80015410:	0001b597          	auipc	a1,0x1b
    80015414:	bb858593          	addi	a1,a1,-1096 # 8002ffc8 <__func__.0+0x2d8>
    80015418:	0001b517          	auipc	a0,0x1b
    8001541c:	bf050513          	addi	a0,a0,-1040 # 80030008 <__func__.0+0x318>
    80015420:	46d170ef          	jal	8002d08c <printf>
    80015424:	00043797          	auipc	a5,0x43
    80015428:	bed7c783          	lbu	a5,-1043(a5) # 80058011 <excpt+0x1>
    8001542c:	c789                	beqz	a5,80015436 <load_page_fault_2+0xc6>
    8001542e:	6498                	ld	a4,8(s1)
    80015430:	47b5                	li	a5,13
    80015432:	00f70c63          	beq	a4,a5,8001544a <load_page_fault_2+0xda>
    80015436:	0001b517          	auipc	a0,0x1b
    8001543a:	bda50513          	addi	a0,a0,-1062 # 80030010 <__func__.0+0x320>
    8001543e:	44f170ef          	jal	8002d08c <printf>
    80015442:	02900513          	li	a0,41
    80015446:	135160ef          	jal	8002bd7a <putchar>
    8001544a:	4529                	li	a0,10
    8001544c:	12f160ef          	jal	8002bd7a <putchar>
    80015450:	00043417          	auipc	s0,0x43
    80015454:	bc144403          	lbu	s0,-1087(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80015458:	0001b597          	auipc	a1,0x1b
    8001545c:	b7058593          	addi	a1,a1,-1168 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80015460:	cc11                	beqz	s0,8001547c <load_page_fault_2+0x10c>
    80015462:	6498                	ld	a4,8(s1)
    80015464:	47b5                	li	a5,13
    TEST_END();
    80015466:	0001b597          	auipc	a1,0x1b
    8001546a:	b5258593          	addi	a1,a1,-1198 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    8001546e:	00f70763          	beq	a4,a5,8001547c <load_page_fault_2+0x10c>
    80015472:	4401                	li	s0,0
    TEST_END();
    80015474:	0001b597          	auipc	a1,0x1b
    80015478:	b5458593          	addi	a1,a1,-1196 # 8002ffc8 <__func__.0+0x2d8>
    8001547c:	0001b517          	auipc	a0,0x1b
    80015480:	bf450513          	addi	a0,a0,-1036 # 80030070 <__func__.0+0x380>
    80015484:	409170ef          	jal	8002d08c <printf>
    80015488:	4511                	li	a0,4
    8001548a:	a7feb0ef          	jal	80000f08 <goto_priv>
    8001548e:	c44ec0ef          	jal	800018d2 <reset_state>
}
    80015492:	60e2                	ld	ra,24(sp)
    80015494:	8522                	mv	a0,s0
    80015496:	6442                	ld	s0,16(sp)
    80015498:	64a2                	ld	s1,8(sp)
    8001549a:	6105                	addi	sp,sp,32
    8001549c:	8082                	ret

000000008001549e <load_page_fault_3>:

bool load_page_fault_3(){
    8001549e:	1141                	addi	sp,sp,-16

    TEST_START();
    800154a0:	00019597          	auipc	a1,0x19
    800154a4:	33858593          	addi	a1,a1,824 # 8002e7d8 <__func__.19>
    800154a8:	0001b517          	auipc	a0,0x1b
    800154ac:	b3050513          	addi	a0,a0,-1232 # 8002ffd8 <__func__.0+0x2e8>
bool load_page_fault_3(){
    800154b0:	e406                	sd	ra,8(sp)
    800154b2:	e022                	sd	s0,0(sp)
    TEST_START();
    800154b4:	3d9170ef          	jal	8002d08c <printf>
    800154b8:	4529                	li	a0,10
    800154ba:	0c1160ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800154be:	450d                	li	a0,3
    800154c0:	a49eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800154c4:	91ceb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800154c8:	cfceb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800154cc:	ab0eb0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800154d0:	4511                	li	a0,4
    800154d2:	a37eb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800154d6:	000407b7          	lui	a5,0x40
    800154da:	2007a073          	csrs	vsstatus,a5

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    800154de:	450d                	li	a0,3
    800154e0:	a29eb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800154e4:	4509                	li	a0,2
    800154e6:	943eb0ef          	jal	80000e28 <set_prev_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    800154ea:	923eb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800154ee:	000807b7          	lui	a5,0x80
    800154f2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800154f4:	07b6                	slli	a5,a5,0xd
    800154f6:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(addr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800154fa:	08200593          	li	a1,130
    800154fe:	00020617          	auipc	a2,0x20
    80015502:	d1260613          	addi	a2,a2,-750 # 80035210 <__func__.0+0x5520>
    80015506:	0001b517          	auipc	a0,0x1b
    8001550a:	aea50513          	addi	a0,a0,-1302 # 8002fff0 <__func__.0+0x300>
    8001550e:	37f170ef          	jal	8002d08c <printf>
    80015512:	00043797          	auipc	a5,0x43
    80015516:	aff7c783          	lbu	a5,-1281(a5) # 80058011 <excpt+0x1>
    8001551a:	0001b597          	auipc	a1,0x1b
    8001551e:	a9e58593          	addi	a1,a1,-1378 # 8002ffb8 <__func__.0+0x2c8>
    80015522:	c789                	beqz	a5,8001552c <load_page_fault_3+0x8e>
    80015524:	0001b597          	auipc	a1,0x1b
    80015528:	aa458593          	addi	a1,a1,-1372 # 8002ffc8 <__func__.0+0x2d8>
    8001552c:	0001b517          	auipc	a0,0x1b
    80015530:	adc50513          	addi	a0,a0,-1316 # 80030008 <__func__.0+0x318>
    80015534:	359170ef          	jal	8002d08c <printf>
    80015538:	00043797          	auipc	a5,0x43
    8001553c:	ad97c783          	lbu	a5,-1319(a5) # 80058011 <excpt+0x1>
    80015540:	e7a1                	bnez	a5,80015588 <load_page_fault_3+0xea>
    80015542:	4529                	li	a0,10
    80015544:	037160ef          	jal	8002bd7a <putchar>
    80015548:	00043797          	auipc	a5,0x43
    8001554c:	ac97c783          	lbu	a5,-1335(a5) # 80058011 <excpt+0x1>
    80015550:	e795                	bnez	a5,8001557c <load_page_fault_3+0xde>
    80015552:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015554:	0001b597          	auipc	a1,0x1b
    80015558:	a6458593          	addi	a1,a1,-1436 # 8002ffb8 <__func__.0+0x2c8>
    8001555c:	0001b517          	auipc	a0,0x1b
    80015560:	b1450513          	addi	a0,a0,-1260 # 80030070 <__func__.0+0x380>
    80015564:	329170ef          	jal	8002d08c <printf>
    80015568:	4511                	li	a0,4
    8001556a:	99feb0ef          	jal	80000f08 <goto_priv>
    8001556e:	b64ec0ef          	jal	800018d2 <reset_state>
}
    80015572:	60a2                	ld	ra,8(sp)
    80015574:	8522                	mv	a0,s0
    80015576:	6402                	ld	s0,0(sp)
    80015578:	0141                	addi	sp,sp,16
    8001557a:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001557c:	4401                	li	s0,0
    TEST_END();
    8001557e:	0001b597          	auipc	a1,0x1b
    80015582:	a4a58593          	addi	a1,a1,-1462 # 8002ffc8 <__func__.0+0x2d8>
    80015586:	bfd9                	j	8001555c <load_page_fault_3+0xbe>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80015588:	0001b517          	auipc	a0,0x1b
    8001558c:	a8850513          	addi	a0,a0,-1400 # 80030010 <__func__.0+0x320>
    80015590:	2fd170ef          	jal	8002d08c <printf>
    80015594:	02900513          	li	a0,41
    80015598:	7e2160ef          	jal	8002bd7a <putchar>
    8001559c:	b75d                	j	80015542 <load_page_fault_3+0xa4>

000000008001559e <load_page_fault_4>:


bool load_page_fault_4(){
    8001559e:	1101                	addi	sp,sp,-32

    TEST_START();
    800155a0:	00019597          	auipc	a1,0x19
    800155a4:	25058593          	addi	a1,a1,592 # 8002e7f0 <__func__.18>
    800155a8:	0001b517          	auipc	a0,0x1b
    800155ac:	a3050513          	addi	a0,a0,-1488 # 8002ffd8 <__func__.0+0x2e8>
bool load_page_fault_4(){
    800155b0:	ec06                	sd	ra,24(sp)
    800155b2:	e822                	sd	s0,16(sp)
    800155b4:	e426                	sd	s1,8(sp)
    TEST_START();
    800155b6:	2d7170ef          	jal	8002d08c <printf>
    800155ba:	4529                	li	a0,10
    800155bc:	7be160ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS); 
    800155c0:	450d                	li	a0,3
    800155c2:	947eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800155c6:	81aeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800155ca:	bfaeb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800155ce:	9aeeb0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800155d2:	4509                	li	a0,2
    800155d4:	935eb0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    800155d8:	835eb0ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    800155dc:	400197b7          	lui	a5,0x40019
    800155e0:	078a                	slli	a5,a5,0x2
    800155e2:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    lb(addr);
    TEST_ASSERT("vs mode lb when pte.v=0 leads to LPF",
    800155e6:	08200593          	li	a1,130
    800155ea:	00020617          	auipc	a2,0x20
    800155ee:	c5e60613          	addi	a2,a2,-930 # 80035248 <__func__.0+0x5558>
    800155f2:	0001b517          	auipc	a0,0x1b
    800155f6:	9fe50513          	addi	a0,a0,-1538 # 8002fff0 <__func__.0+0x300>
    800155fa:	293170ef          	jal	8002d08c <printf>
    800155fe:	00043797          	auipc	a5,0x43
    80015602:	a137c783          	lbu	a5,-1517(a5) # 80058011 <excpt+0x1>
    80015606:	00043497          	auipc	s1,0x43
    8001560a:	a0a48493          	addi	s1,s1,-1526 # 80058010 <excpt>
    8001560e:	0001b597          	auipc	a1,0x1b
    80015612:	9ba58593          	addi	a1,a1,-1606 # 8002ffc8 <__func__.0+0x2d8>
    80015616:	cf89                	beqz	a5,80015630 <load_page_fault_4+0x92>
    80015618:	6498                	ld	a4,8(s1)
    8001561a:	47b5                	li	a5,13
    8001561c:	0001b597          	auipc	a1,0x1b
    80015620:	99c58593          	addi	a1,a1,-1636 # 8002ffb8 <__func__.0+0x2c8>
    80015624:	00f70663          	beq	a4,a5,80015630 <load_page_fault_4+0x92>
    80015628:	0001b597          	auipc	a1,0x1b
    8001562c:	9a058593          	addi	a1,a1,-1632 # 8002ffc8 <__func__.0+0x2d8>
    80015630:	0001b517          	auipc	a0,0x1b
    80015634:	9d850513          	addi	a0,a0,-1576 # 80030008 <__func__.0+0x318>
    80015638:	255170ef          	jal	8002d08c <printf>
    8001563c:	00043797          	auipc	a5,0x43
    80015640:	9d57c783          	lbu	a5,-1579(a5) # 80058011 <excpt+0x1>
    80015644:	c789                	beqz	a5,8001564e <load_page_fault_4+0xb0>
    80015646:	6498                	ld	a4,8(s1)
    80015648:	47b5                	li	a5,13
    8001564a:	00f70c63          	beq	a4,a5,80015662 <load_page_fault_4+0xc4>
    8001564e:	0001b517          	auipc	a0,0x1b
    80015652:	9c250513          	addi	a0,a0,-1598 # 80030010 <__func__.0+0x320>
    80015656:	237170ef          	jal	8002d08c <printf>
    8001565a:	02900513          	li	a0,41
    8001565e:	71c160ef          	jal	8002bd7a <putchar>
    80015662:	4529                	li	a0,10
    80015664:	716160ef          	jal	8002bd7a <putchar>
    80015668:	00043797          	auipc	a5,0x43
    8001566c:	9a97c783          	lbu	a5,-1623(a5) # 80058011 <excpt+0x1>
    80015670:	4401                	li	s0,0
    80015672:	c789                	beqz	a5,8001567c <load_page_fault_4+0xde>
    80015674:	6480                	ld	s0,8(s1)
    80015676:	144d                	addi	s0,s0,-13
    80015678:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LPF
    );


    //执行ld令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    8001567c:	f90eb0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015680:	000807b7          	lui	a5,0x80
    80015684:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80015688:	001007b7          	lui	a5,0x100
    8001568c:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80015690:	07b2                	slli	a5,a5,0xc
    80015692:	0007b783          	ld	a5,0(a5)
    ld(addr);   
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80015696:	08200593          	li	a1,130
    8001569a:	00020617          	auipc	a2,0x20
    8001569e:	bd660613          	addi	a2,a2,-1066 # 80035270 <__func__.0+0x5580>
    800156a2:	0001b517          	auipc	a0,0x1b
    800156a6:	94e50513          	addi	a0,a0,-1714 # 8002fff0 <__func__.0+0x300>
    800156aa:	1e3170ef          	jal	8002d08c <printf>
    800156ae:	00043797          	auipc	a5,0x43
    800156b2:	9637c783          	lbu	a5,-1693(a5) # 80058011 <excpt+0x1>
    800156b6:	0001b597          	auipc	a1,0x1b
    800156ba:	91258593          	addi	a1,a1,-1774 # 8002ffc8 <__func__.0+0x2d8>
    800156be:	cf89                	beqz	a5,800156d8 <load_page_fault_4+0x13a>
    800156c0:	6498                	ld	a4,8(s1)
    800156c2:	47b5                	li	a5,13
    800156c4:	0001b597          	auipc	a1,0x1b
    800156c8:	8f458593          	addi	a1,a1,-1804 # 8002ffb8 <__func__.0+0x2c8>
    800156cc:	00f70663          	beq	a4,a5,800156d8 <load_page_fault_4+0x13a>
    800156d0:	0001b597          	auipc	a1,0x1b
    800156d4:	8f858593          	addi	a1,a1,-1800 # 8002ffc8 <__func__.0+0x2d8>
    800156d8:	0001b517          	auipc	a0,0x1b
    800156dc:	93050513          	addi	a0,a0,-1744 # 80030008 <__func__.0+0x318>
    800156e0:	1ad170ef          	jal	8002d08c <printf>
    800156e4:	00043797          	auipc	a5,0x43
    800156e8:	92d7c783          	lbu	a5,-1747(a5) # 80058011 <excpt+0x1>
    800156ec:	c789                	beqz	a5,800156f6 <load_page_fault_4+0x158>
    800156ee:	6498                	ld	a4,8(s1)
    800156f0:	47b5                	li	a5,13
    800156f2:	00f70c63          	beq	a4,a5,8001570a <load_page_fault_4+0x16c>
    800156f6:	0001b517          	auipc	a0,0x1b
    800156fa:	91a50513          	addi	a0,a0,-1766 # 80030010 <__func__.0+0x320>
    800156fe:	18f170ef          	jal	8002d08c <printf>
    80015702:	02900513          	li	a0,41
    80015706:	674160ef          	jal	8002bd7a <putchar>
    8001570a:	4529                	li	a0,10
    8001570c:	66e160ef          	jal	8002bd7a <putchar>
    80015710:	c801                	beqz	s0,80015720 <load_page_fault_4+0x182>
    80015712:	00043797          	auipc	a5,0x43
    80015716:	8ff7c783          	lbu	a5,-1793(a5) # 80058011 <excpt+0x1>
    8001571a:	4401                	li	s0,0
    8001571c:	0c079e63          	bnez	a5,800157f8 <load_page_fault_4+0x25a>
        excpt.cause == CAUSE_LPF
    );

    //执行lh指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_VS);
    80015720:	4509                	li	a0,2
    80015722:	fe6eb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80015726:	ee6eb0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001572a:	000807b7          	lui	a5,0x80
    8001572e:	1007a073          	csrs	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80015732:	001007b7          	lui	a5,0x100
    80015736:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80015738:	07b2                	slli	a5,a5,0xc
    8001573a:	00079783          	lh	a5,0(a5)
    lh(addr);
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001573e:	08200593          	li	a1,130
    80015742:	00020617          	auipc	a2,0x20
    80015746:	b6660613          	addi	a2,a2,-1178 # 800352a8 <__func__.0+0x55b8>
    8001574a:	0001b517          	auipc	a0,0x1b
    8001574e:	8a650513          	addi	a0,a0,-1882 # 8002fff0 <__func__.0+0x300>
    80015752:	13b170ef          	jal	8002d08c <printf>
    80015756:	00043797          	auipc	a5,0x43
    8001575a:	8bb7c783          	lbu	a5,-1861(a5) # 80058011 <excpt+0x1>
    8001575e:	0001b597          	auipc	a1,0x1b
    80015762:	86a58593          	addi	a1,a1,-1942 # 8002ffc8 <__func__.0+0x2d8>
    80015766:	cf89                	beqz	a5,80015780 <load_page_fault_4+0x1e2>
    80015768:	6498                	ld	a4,8(s1)
    8001576a:	47b5                	li	a5,13
    8001576c:	0001b597          	auipc	a1,0x1b
    80015770:	84c58593          	addi	a1,a1,-1972 # 8002ffb8 <__func__.0+0x2c8>
    80015774:	00f70663          	beq	a4,a5,80015780 <load_page_fault_4+0x1e2>
    80015778:	0001b597          	auipc	a1,0x1b
    8001577c:	85058593          	addi	a1,a1,-1968 # 8002ffc8 <__func__.0+0x2d8>
    80015780:	0001b517          	auipc	a0,0x1b
    80015784:	88850513          	addi	a0,a0,-1912 # 80030008 <__func__.0+0x318>
    80015788:	105170ef          	jal	8002d08c <printf>
    8001578c:	00043797          	auipc	a5,0x43
    80015790:	8857c783          	lbu	a5,-1915(a5) # 80058011 <excpt+0x1>
    80015794:	c789                	beqz	a5,8001579e <load_page_fault_4+0x200>
    80015796:	6498                	ld	a4,8(s1)
    80015798:	47b5                	li	a5,13
    8001579a:	00f70c63          	beq	a4,a5,800157b2 <load_page_fault_4+0x214>
    8001579e:	0001b517          	auipc	a0,0x1b
    800157a2:	87250513          	addi	a0,a0,-1934 # 80030010 <__func__.0+0x320>
    800157a6:	0e7170ef          	jal	8002d08c <printf>
    800157aa:	02900513          	li	a0,41
    800157ae:	5cc160ef          	jal	8002bd7a <putchar>
    800157b2:	4529                	li	a0,10
    800157b4:	5c6160ef          	jal	8002bd7a <putchar>
    800157b8:	c411                	beqz	s0,800157c4 <load_page_fault_4+0x226>
    800157ba:	00043417          	auipc	s0,0x43
    800157be:	85744403          	lbu	s0,-1961(s0) # 80058011 <excpt+0x1>
    800157c2:	e021                	bnez	s0,80015802 <load_page_fault_4+0x264>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800157c4:	000807b7          	lui	a5,0x80
    800157c8:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800157cc:	4401                	li	s0,0

    TEST_END();
    800157ce:	0001a597          	auipc	a1,0x1a
    800157d2:	7fa58593          	addi	a1,a1,2042 # 8002ffc8 <__func__.0+0x2d8>
    800157d6:	0001b517          	auipc	a0,0x1b
    800157da:	89a50513          	addi	a0,a0,-1894 # 80030070 <__func__.0+0x380>
    800157de:	0af170ef          	jal	8002d08c <printf>
    800157e2:	4511                	li	a0,4
    800157e4:	f24eb0ef          	jal	80000f08 <goto_priv>
    800157e8:	8eaec0ef          	jal	800018d2 <reset_state>

}
    800157ec:	60e2                	ld	ra,24(sp)
    800157ee:	8522                	mv	a0,s0
    800157f0:	6442                	ld	s0,16(sp)
    800157f2:	64a2                	ld	s1,8(sp)
    800157f4:	6105                	addi	sp,sp,32
    800157f6:	8082                	ret
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800157f8:	6480                	ld	s0,8(s1)
    800157fa:	144d                	addi	s0,s0,-13
    800157fc:	00143413          	seqz	s0,s0
    80015800:	b705                	j	80015720 <load_page_fault_4+0x182>
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80015802:	6498                	ld	a4,8(s1)
    80015804:	47b5                	li	a5,13
    80015806:	faf71fe3          	bne	a4,a5,800157c4 <load_page_fault_4+0x226>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001580a:	000807b7          	lui	a5,0x80
    8001580e:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80015812:	0001a597          	auipc	a1,0x1a
    80015816:	7a658593          	addi	a1,a1,1958 # 8002ffb8 <__func__.0+0x2c8>
    8001581a:	bf75                	j	800157d6 <load_page_fault_4+0x238>

000000008001581c <load_page_fault_5>:

bool load_page_fault_5(){
    8001581c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001581e:	00019597          	auipc	a1,0x19
    80015822:	fea58593          	addi	a1,a1,-22 # 8002e808 <__func__.17>
    80015826:	0001a517          	auipc	a0,0x1a
    8001582a:	7b250513          	addi	a0,a0,1970 # 8002ffd8 <__func__.0+0x2e8>
bool load_page_fault_5(){
    8001582e:	ec06                	sd	ra,24(sp)
    80015830:	e822                	sd	s0,16(sp)
    80015832:	e426                	sd	s1,8(sp)
    TEST_START();
    80015834:	059170ef          	jal	8002d08c <printf>
    80015838:	4529                	li	a0,10
    8001583a:	540160ef          	jal	8002bd7a <putchar>


    goto_priv(PRIV_HS);
    8001583e:	450d                	li	a0,3
    80015840:	ec8eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015844:	d9dea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015848:	97ceb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001584c:	f31ea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80015850:	4511                	li	a0,4
    80015852:	eb6eb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80015856:	000407b7          	lui	a5,0x40
    8001585a:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    8001585e:	4509                	li	a0,2
    80015860:	ea8eb0ef          	jal	80000f08 <goto_priv>

    //执行lbu指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015864:	da8eb0ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80015868:	000807b7          	lui	a5,0x80
    8001586c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001586e:	07b6                	slli	a5,a5,0xd
    80015870:	0007c783          	lbu	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    lbu(addr);
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80015874:	08200593          	li	a1,130
    80015878:	00020617          	auipc	a2,0x20
    8001587c:	a7860613          	addi	a2,a2,-1416 # 800352f0 <__func__.0+0x5600>
    80015880:	0001a517          	auipc	a0,0x1a
    80015884:	77050513          	addi	a0,a0,1904 # 8002fff0 <__func__.0+0x300>
    80015888:	005170ef          	jal	8002d08c <printf>
    8001588c:	00042797          	auipc	a5,0x42
    80015890:	7857c783          	lbu	a5,1925(a5) # 80058011 <excpt+0x1>
    80015894:	00042497          	auipc	s1,0x42
    80015898:	77c48493          	addi	s1,s1,1916 # 80058010 <excpt>
    8001589c:	0001a597          	auipc	a1,0x1a
    800158a0:	72c58593          	addi	a1,a1,1836 # 8002ffc8 <__func__.0+0x2d8>
    800158a4:	cf89                	beqz	a5,800158be <load_page_fault_5+0xa2>
    800158a6:	6498                	ld	a4,8(s1)
    800158a8:	47b5                	li	a5,13
    800158aa:	0001a597          	auipc	a1,0x1a
    800158ae:	70e58593          	addi	a1,a1,1806 # 8002ffb8 <__func__.0+0x2c8>
    800158b2:	00f70663          	beq	a4,a5,800158be <load_page_fault_5+0xa2>
    800158b6:	0001a597          	auipc	a1,0x1a
    800158ba:	71258593          	addi	a1,a1,1810 # 8002ffc8 <__func__.0+0x2d8>
    800158be:	0001a517          	auipc	a0,0x1a
    800158c2:	74a50513          	addi	a0,a0,1866 # 80030008 <__func__.0+0x318>
    800158c6:	7c6170ef          	jal	8002d08c <printf>
    800158ca:	00042797          	auipc	a5,0x42
    800158ce:	7477c783          	lbu	a5,1863(a5) # 80058011 <excpt+0x1>
    800158d2:	c789                	beqz	a5,800158dc <load_page_fault_5+0xc0>
    800158d4:	6498                	ld	a4,8(s1)
    800158d6:	47b5                	li	a5,13
    800158d8:	00f70c63          	beq	a4,a5,800158f0 <load_page_fault_5+0xd4>
    800158dc:	0001a517          	auipc	a0,0x1a
    800158e0:	73450513          	addi	a0,a0,1844 # 80030010 <__func__.0+0x320>
    800158e4:	7a8170ef          	jal	8002d08c <printf>
    800158e8:	02900513          	li	a0,41
    800158ec:	48e160ef          	jal	8002bd7a <putchar>
    800158f0:	4529                	li	a0,10
    800158f2:	488160ef          	jal	8002bd7a <putchar>
    800158f6:	00042417          	auipc	s0,0x42
    800158fa:	71b44403          	lbu	s0,1819(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800158fe:	0001a597          	auipc	a1,0x1a
    80015902:	6ca58593          	addi	a1,a1,1738 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80015906:	cc11                	beqz	s0,80015922 <load_page_fault_5+0x106>
    80015908:	6498                	ld	a4,8(s1)
    8001590a:	47b5                	li	a5,13
    TEST_END();
    8001590c:	0001a597          	auipc	a1,0x1a
    80015910:	6ac58593          	addi	a1,a1,1708 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80015914:	00f70763          	beq	a4,a5,80015922 <load_page_fault_5+0x106>
    80015918:	4401                	li	s0,0
    TEST_END();
    8001591a:	0001a597          	auipc	a1,0x1a
    8001591e:	6ae58593          	addi	a1,a1,1710 # 8002ffc8 <__func__.0+0x2d8>
    80015922:	0001a517          	auipc	a0,0x1a
    80015926:	74e50513          	addi	a0,a0,1870 # 80030070 <__func__.0+0x380>
    8001592a:	762170ef          	jal	8002d08c <printf>
    8001592e:	4511                	li	a0,4
    80015930:	dd8eb0ef          	jal	80000f08 <goto_priv>
    80015934:	f9feb0ef          	jal	800018d2 <reset_state>
}
    80015938:	60e2                	ld	ra,24(sp)
    8001593a:	8522                	mv	a0,s0
    8001593c:	6442                	ld	s0,16(sp)
    8001593e:	64a2                	ld	s1,8(sp)
    80015940:	6105                	addi	sp,sp,32
    80015942:	8082                	ret

0000000080015944 <load_page_fault_6>:

bool load_page_fault_6(){
    80015944:	1141                	addi	sp,sp,-16

    TEST_START();
    80015946:	00019597          	auipc	a1,0x19
    8001594a:	eda58593          	addi	a1,a1,-294 # 8002e820 <__func__.16>
    8001594e:	0001a517          	auipc	a0,0x1a
    80015952:	68a50513          	addi	a0,a0,1674 # 8002ffd8 <__func__.0+0x2e8>
bool load_page_fault_6(){
    80015956:	e406                	sd	ra,8(sp)
    80015958:	e022                	sd	s0,0(sp)
    TEST_START();
    8001595a:	732170ef          	jal	8002d08c <printf>
    8001595e:	4529                	li	a0,10
    80015960:	41a160ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80015964:	450d                	li	a0,3
    80015966:	da2eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001596a:	c77ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001596e:	856eb0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015972:	e0bea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80015976:	4511                	li	a0,4
    80015978:	d90eb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001597c:	000407b7          	lui	a5,0x40
    80015980:	2007a073          	csrs	vsstatus,a5

    //执行lbu指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_VS);
    80015984:	4509                	li	a0,2
    80015986:	d82eb0ef          	jal	80000f08 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    8001598a:	c82eb0ef          	jal	80000e0c <test_setup_except_function>
    8001598e:	000807b7          	lui	a5,0x80
    80015992:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015994:	07b6                	slli	a5,a5,0xd
    80015996:	0007c783          	lbu	a5,0(a5)
    lbu(addr);

    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    8001599a:	08200593          	li	a1,130
    8001599e:	00020617          	auipc	a2,0x20
    800159a2:	99260613          	addi	a2,a2,-1646 # 80035330 <__func__.0+0x5640>
    800159a6:	0001a517          	auipc	a0,0x1a
    800159aa:	64a50513          	addi	a0,a0,1610 # 8002fff0 <__func__.0+0x300>
    800159ae:	6de170ef          	jal	8002d08c <printf>
    800159b2:	00042797          	auipc	a5,0x42
    800159b6:	65f7c783          	lbu	a5,1631(a5) # 80058011 <excpt+0x1>
    800159ba:	0001a597          	auipc	a1,0x1a
    800159be:	5fe58593          	addi	a1,a1,1534 # 8002ffb8 <__func__.0+0x2c8>
    800159c2:	c789                	beqz	a5,800159cc <load_page_fault_6+0x88>
    800159c4:	0001a597          	auipc	a1,0x1a
    800159c8:	60458593          	addi	a1,a1,1540 # 8002ffc8 <__func__.0+0x2d8>
    800159cc:	0001a517          	auipc	a0,0x1a
    800159d0:	63c50513          	addi	a0,a0,1596 # 80030008 <__func__.0+0x318>
    800159d4:	6b8170ef          	jal	8002d08c <printf>
    800159d8:	00042797          	auipc	a5,0x42
    800159dc:	6397c783          	lbu	a5,1593(a5) # 80058011 <excpt+0x1>
    800159e0:	e7a1                	bnez	a5,80015a28 <load_page_fault_6+0xe4>
    800159e2:	4529                	li	a0,10
    800159e4:	396160ef          	jal	8002bd7a <putchar>
    800159e8:	00042797          	auipc	a5,0x42
    800159ec:	6297c783          	lbu	a5,1577(a5) # 80058011 <excpt+0x1>
    800159f0:	e795                	bnez	a5,80015a1c <load_page_fault_6+0xd8>
    800159f2:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    800159f4:	0001a597          	auipc	a1,0x1a
    800159f8:	5c458593          	addi	a1,a1,1476 # 8002ffb8 <__func__.0+0x2c8>
    800159fc:	0001a517          	auipc	a0,0x1a
    80015a00:	67450513          	addi	a0,a0,1652 # 80030070 <__func__.0+0x380>
    80015a04:	688170ef          	jal	8002d08c <printf>
    80015a08:	4511                	li	a0,4
    80015a0a:	cfeeb0ef          	jal	80000f08 <goto_priv>
    80015a0e:	ec5eb0ef          	jal	800018d2 <reset_state>
}
    80015a12:	60a2                	ld	ra,8(sp)
    80015a14:	8522                	mv	a0,s0
    80015a16:	6402                	ld	s0,0(sp)
    80015a18:	0141                	addi	sp,sp,16
    80015a1a:	8082                	ret
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80015a1c:	4401                	li	s0,0
    TEST_END();
    80015a1e:	0001a597          	auipc	a1,0x1a
    80015a22:	5aa58593          	addi	a1,a1,1450 # 8002ffc8 <__func__.0+0x2d8>
    80015a26:	bfd9                	j	800159fc <load_page_fault_6+0xb8>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80015a28:	0001a517          	auipc	a0,0x1a
    80015a2c:	5e850513          	addi	a0,a0,1512 # 80030010 <__func__.0+0x320>
    80015a30:	65c170ef          	jal	8002d08c <printf>
    80015a34:	02900513          	li	a0,41
    80015a38:	342160ef          	jal	8002bd7a <putchar>
    80015a3c:	b75d                	j	800159e2 <load_page_fault_6+0x9e>

0000000080015a3e <load_page_fault_7>:


bool load_page_fault_7(){
    80015a3e:	1101                	addi	sp,sp,-32

    TEST_START();
    80015a40:	00019597          	auipc	a1,0x19
    80015a44:	df858593          	addi	a1,a1,-520 # 8002e838 <__func__.15>
    80015a48:	0001a517          	auipc	a0,0x1a
    80015a4c:	59050513          	addi	a0,a0,1424 # 8002ffd8 <__func__.0+0x2e8>
bool load_page_fault_7(){
    80015a50:	ec06                	sd	ra,24(sp)
    80015a52:	e822                	sd	s0,16(sp)
    80015a54:	e426                	sd	s1,8(sp)
    TEST_START();
    80015a56:	636170ef          	jal	8002d08c <printf>
    80015a5a:	4529                	li	a0,10
    80015a5c:	31e160ef          	jal	8002bd7a <putchar>


    goto_priv(PRIV_HS);
    80015a60:	450d                	li	a0,3
    80015a62:	ca6eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015a66:	b7bea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015a6a:	f5bea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015a6e:	d0fea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80015a72:	4511                	li	a0,4
    80015a74:	c94eb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80015a78:	000407b7          	lui	a5,0x40
    80015a7c:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80015a80:	450d                	li	a0,3
    80015a82:	c86eb0ef          	jal	80000f08 <goto_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015a86:	b86eb0ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80015a8a:	000807b7          	lui	a5,0x80
    80015a8e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015a90:	07b6                	slli	a5,a5,0xd
    80015a92:	0007b783          	ld	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    ld(addr);
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80015a96:	08200593          	li	a1,130
    80015a9a:	00020617          	auipc	a2,0x20
    80015a9e:	8ce60613          	addi	a2,a2,-1842 # 80035368 <__func__.0+0x5678>
    80015aa2:	0001a517          	auipc	a0,0x1a
    80015aa6:	54e50513          	addi	a0,a0,1358 # 8002fff0 <__func__.0+0x300>
    80015aaa:	5e2170ef          	jal	8002d08c <printf>
    80015aae:	00042797          	auipc	a5,0x42
    80015ab2:	5637c783          	lbu	a5,1379(a5) # 80058011 <excpt+0x1>
    80015ab6:	00042497          	auipc	s1,0x42
    80015aba:	55a48493          	addi	s1,s1,1370 # 80058010 <excpt>
    80015abe:	0001a597          	auipc	a1,0x1a
    80015ac2:	50a58593          	addi	a1,a1,1290 # 8002ffc8 <__func__.0+0x2d8>
    80015ac6:	cf89                	beqz	a5,80015ae0 <load_page_fault_7+0xa2>
    80015ac8:	6498                	ld	a4,8(s1)
    80015aca:	47b5                	li	a5,13
    80015acc:	0001a597          	auipc	a1,0x1a
    80015ad0:	4ec58593          	addi	a1,a1,1260 # 8002ffb8 <__func__.0+0x2c8>
    80015ad4:	00f70663          	beq	a4,a5,80015ae0 <load_page_fault_7+0xa2>
    80015ad8:	0001a597          	auipc	a1,0x1a
    80015adc:	4f058593          	addi	a1,a1,1264 # 8002ffc8 <__func__.0+0x2d8>
    80015ae0:	0001a517          	auipc	a0,0x1a
    80015ae4:	52850513          	addi	a0,a0,1320 # 80030008 <__func__.0+0x318>
    80015ae8:	5a4170ef          	jal	8002d08c <printf>
    80015aec:	00042797          	auipc	a5,0x42
    80015af0:	5257c783          	lbu	a5,1317(a5) # 80058011 <excpt+0x1>
    80015af4:	c789                	beqz	a5,80015afe <load_page_fault_7+0xc0>
    80015af6:	6498                	ld	a4,8(s1)
    80015af8:	47b5                	li	a5,13
    80015afa:	00f70c63          	beq	a4,a5,80015b12 <load_page_fault_7+0xd4>
    80015afe:	0001a517          	auipc	a0,0x1a
    80015b02:	51250513          	addi	a0,a0,1298 # 80030010 <__func__.0+0x320>
    80015b06:	586170ef          	jal	8002d08c <printf>
    80015b0a:	02900513          	li	a0,41
    80015b0e:	26c160ef          	jal	8002bd7a <putchar>
    80015b12:	4529                	li	a0,10
    80015b14:	266160ef          	jal	8002bd7a <putchar>
    80015b18:	00042417          	auipc	s0,0x42
    80015b1c:	4f944403          	lbu	s0,1273(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80015b20:	0001a597          	auipc	a1,0x1a
    80015b24:	4a858593          	addi	a1,a1,1192 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80015b28:	cc11                	beqz	s0,80015b44 <load_page_fault_7+0x106>
    80015b2a:	6498                	ld	a4,8(s1)
    80015b2c:	47b5                	li	a5,13
    TEST_END();
    80015b2e:	0001a597          	auipc	a1,0x1a
    80015b32:	48a58593          	addi	a1,a1,1162 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80015b36:	00f70763          	beq	a4,a5,80015b44 <load_page_fault_7+0x106>
    80015b3a:	4401                	li	s0,0
    TEST_END();
    80015b3c:	0001a597          	auipc	a1,0x1a
    80015b40:	48c58593          	addi	a1,a1,1164 # 8002ffc8 <__func__.0+0x2d8>
    80015b44:	0001a517          	auipc	a0,0x1a
    80015b48:	52c50513          	addi	a0,a0,1324 # 80030070 <__func__.0+0x380>
    80015b4c:	540170ef          	jal	8002d08c <printf>
    80015b50:	4511                	li	a0,4
    80015b52:	bb6eb0ef          	jal	80000f08 <goto_priv>
    80015b56:	d7deb0ef          	jal	800018d2 <reset_state>
}
    80015b5a:	60e2                	ld	ra,24(sp)
    80015b5c:	8522                	mv	a0,s0
    80015b5e:	6442                	ld	s0,16(sp)
    80015b60:	64a2                	ld	s1,8(sp)
    80015b62:	6105                	addi	sp,sp,32
    80015b64:	8082                	ret

0000000080015b66 <load_page_fault_8>:

bool load_page_fault_8(){
    80015b66:	1141                	addi	sp,sp,-16

    TEST_START();
    80015b68:	00019597          	auipc	a1,0x19
    80015b6c:	ce858593          	addi	a1,a1,-792 # 8002e850 <__func__.14>
    80015b70:	0001a517          	auipc	a0,0x1a
    80015b74:	46850513          	addi	a0,a0,1128 # 8002ffd8 <__func__.0+0x2e8>
bool load_page_fault_8(){
    80015b78:	e406                	sd	ra,8(sp)
    80015b7a:	e022                	sd	s0,0(sp)
    TEST_START();
    80015b7c:	510170ef          	jal	8002d08c <printf>
    80015b80:	4529                	li	a0,10
    80015b82:	1f8160ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80015b86:	450d                	li	a0,3
    80015b88:	b80eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015b8c:	a55ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015b90:	e35ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015b94:	be9ea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80015b98:	4511                	li	a0,4
    80015b9a:	b6eeb0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80015b9e:	000407b7          	lui	a5,0x40
    80015ba2:	3007a073          	csrs	mstatus,a5

    //执行ld指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80015ba6:	450d                	li	a0,3
    80015ba8:	b60eb0ef          	jal	80000f08 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80015bac:	a60eb0ef          	jal	80000e0c <test_setup_except_function>
    80015bb0:	000807b7          	lui	a5,0x80
    80015bb4:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015bb6:	07b6                	slli	a5,a5,0xd
    80015bb8:	0007b783          	ld	a5,0(a5)
    ld(addr);

    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015bbc:	08200593          	li	a1,130
    80015bc0:	0001f617          	auipc	a2,0x1f
    80015bc4:	7e060613          	addi	a2,a2,2016 # 800353a0 <__func__.0+0x56b0>
    80015bc8:	0001a517          	auipc	a0,0x1a
    80015bcc:	42850513          	addi	a0,a0,1064 # 8002fff0 <__func__.0+0x300>
    80015bd0:	4bc170ef          	jal	8002d08c <printf>
    80015bd4:	00042797          	auipc	a5,0x42
    80015bd8:	43d7c783          	lbu	a5,1085(a5) # 80058011 <excpt+0x1>
    80015bdc:	0001a597          	auipc	a1,0x1a
    80015be0:	3dc58593          	addi	a1,a1,988 # 8002ffb8 <__func__.0+0x2c8>
    80015be4:	c789                	beqz	a5,80015bee <load_page_fault_8+0x88>
    80015be6:	0001a597          	auipc	a1,0x1a
    80015bea:	3e258593          	addi	a1,a1,994 # 8002ffc8 <__func__.0+0x2d8>
    80015bee:	0001a517          	auipc	a0,0x1a
    80015bf2:	41a50513          	addi	a0,a0,1050 # 80030008 <__func__.0+0x318>
    80015bf6:	496170ef          	jal	8002d08c <printf>
    80015bfa:	00042797          	auipc	a5,0x42
    80015bfe:	4177c783          	lbu	a5,1047(a5) # 80058011 <excpt+0x1>
    80015c02:	e7a1                	bnez	a5,80015c4a <load_page_fault_8+0xe4>
    80015c04:	4529                	li	a0,10
    80015c06:	174160ef          	jal	8002bd7a <putchar>
    80015c0a:	00042797          	auipc	a5,0x42
    80015c0e:	4077c783          	lbu	a5,1031(a5) # 80058011 <excpt+0x1>
    80015c12:	e795                	bnez	a5,80015c3e <load_page_fault_8+0xd8>
    80015c14:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015c16:	0001a597          	auipc	a1,0x1a
    80015c1a:	3a258593          	addi	a1,a1,930 # 8002ffb8 <__func__.0+0x2c8>
    80015c1e:	0001a517          	auipc	a0,0x1a
    80015c22:	45250513          	addi	a0,a0,1106 # 80030070 <__func__.0+0x380>
    80015c26:	466170ef          	jal	8002d08c <printf>
    80015c2a:	4511                	li	a0,4
    80015c2c:	adceb0ef          	jal	80000f08 <goto_priv>
    80015c30:	ca3eb0ef          	jal	800018d2 <reset_state>
}
    80015c34:	60a2                	ld	ra,8(sp)
    80015c36:	8522                	mv	a0,s0
    80015c38:	6402                	ld	s0,0(sp)
    80015c3a:	0141                	addi	sp,sp,16
    80015c3c:	8082                	ret
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015c3e:	4401                	li	s0,0
    TEST_END();
    80015c40:	0001a597          	auipc	a1,0x1a
    80015c44:	38858593          	addi	a1,a1,904 # 8002ffc8 <__func__.0+0x2d8>
    80015c48:	bfd9                	j	80015c1e <load_page_fault_8+0xb8>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015c4a:	0001a517          	auipc	a0,0x1a
    80015c4e:	3c650513          	addi	a0,a0,966 # 80030010 <__func__.0+0x320>
    80015c52:	43a170ef          	jal	8002d08c <printf>
    80015c56:	02900513          	li	a0,41
    80015c5a:	120160ef          	jal	8002bd7a <putchar>
    80015c5e:	b75d                	j	80015c04 <load_page_fault_8+0x9e>

0000000080015c60 <store_page_fault_1>:





bool store_page_fault_1(){
    80015c60:	1101                	addi	sp,sp,-32

    TEST_START();
    80015c62:	00019597          	auipc	a1,0x19
    80015c66:	c0658593          	addi	a1,a1,-1018 # 8002e868 <__func__.13>
    80015c6a:	0001a517          	auipc	a0,0x1a
    80015c6e:	36e50513          	addi	a0,a0,878 # 8002ffd8 <__func__.0+0x2e8>
bool store_page_fault_1(){
    80015c72:	ec06                	sd	ra,24(sp)
    80015c74:	e822                	sd	s0,16(sp)
    80015c76:	e426                	sd	s1,8(sp)
    TEST_START();
    80015c78:	414170ef          	jal	8002d08c <printf>
    80015c7c:	4529                	li	a0,10
    80015c7e:	0fc160ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80015c82:	450d                	li	a0,3
    80015c84:	a84eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015c88:	959ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015c8c:	d39ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015c90:	aedea0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80015c94:	450d                	li	a0,3
    80015c96:	a72eb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015c9a:	4509                	li	a0,2
    80015c9c:	98ceb0ef          	jal	80000e28 <set_prev_priv>

    //执行store指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80015ca0:	96ceb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015ca4:	37ab77b7          	lui	a5,0x37ab7
    80015ca8:	078a                	slli	a5,a5,0x2
    80015caa:	40019737          	lui	a4,0x40019
    80015cae:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015cb2:	070a                	slli	a4,a4,0x2
    80015cb4:	6ef74073          	.insn	4, 0x6ef74073

    addr = hs_page_base(VSI_GI);
    hsvd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when pte.v=0 leads to LPF",
    80015cb8:	08200593          	li	a1,130
    80015cbc:	0001f617          	auipc	a2,0x1f
    80015cc0:	71c60613          	addi	a2,a2,1820 # 800353d8 <__func__.0+0x56e8>
    80015cc4:	0001a517          	auipc	a0,0x1a
    80015cc8:	32c50513          	addi	a0,a0,812 # 8002fff0 <__func__.0+0x300>
    80015ccc:	3c0170ef          	jal	8002d08c <printf>
    80015cd0:	00042797          	auipc	a5,0x42
    80015cd4:	3417c783          	lbu	a5,833(a5) # 80058011 <excpt+0x1>
    80015cd8:	00042497          	auipc	s1,0x42
    80015cdc:	33848493          	addi	s1,s1,824 # 80058010 <excpt>
    80015ce0:	0001a597          	auipc	a1,0x1a
    80015ce4:	2e858593          	addi	a1,a1,744 # 8002ffc8 <__func__.0+0x2d8>
    80015ce8:	cf89                	beqz	a5,80015d02 <store_page_fault_1+0xa2>
    80015cea:	6498                	ld	a4,8(s1)
    80015cec:	47bd                	li	a5,15
    80015cee:	0001a597          	auipc	a1,0x1a
    80015cf2:	2ca58593          	addi	a1,a1,714 # 8002ffb8 <__func__.0+0x2c8>
    80015cf6:	00f70663          	beq	a4,a5,80015d02 <store_page_fault_1+0xa2>
    80015cfa:	0001a597          	auipc	a1,0x1a
    80015cfe:	2ce58593          	addi	a1,a1,718 # 8002ffc8 <__func__.0+0x2d8>
    80015d02:	0001a517          	auipc	a0,0x1a
    80015d06:	30650513          	addi	a0,a0,774 # 80030008 <__func__.0+0x318>
    80015d0a:	382170ef          	jal	8002d08c <printf>
    80015d0e:	00042797          	auipc	a5,0x42
    80015d12:	3037c783          	lbu	a5,771(a5) # 80058011 <excpt+0x1>
    80015d16:	c789                	beqz	a5,80015d20 <store_page_fault_1+0xc0>
    80015d18:	6498                	ld	a4,8(s1)
    80015d1a:	47bd                	li	a5,15
    80015d1c:	00f70c63          	beq	a4,a5,80015d34 <store_page_fault_1+0xd4>
    80015d20:	0001a517          	auipc	a0,0x1a
    80015d24:	2f050513          	addi	a0,a0,752 # 80030010 <__func__.0+0x320>
    80015d28:	364170ef          	jal	8002d08c <printf>
    80015d2c:	02900513          	li	a0,41
    80015d30:	04a160ef          	jal	8002bd7a <putchar>
    80015d34:	4529                	li	a0,10
    80015d36:	044160ef          	jal	8002bd7a <putchar>
    80015d3a:	00042797          	auipc	a5,0x42
    80015d3e:	2d77c783          	lbu	a5,727(a5) # 80058011 <excpt+0x1>
    80015d42:	4401                	li	s0,0
    80015d44:	c789                	beqz	a5,80015d4e <store_page_fault_1+0xee>
    80015d46:	6480                	ld	s0,8(s1)
    80015d48:	1445                	addi	s0,s0,-15
    80015d4a:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行store指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80015d4e:	8beeb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015d52:	37ab77b7          	lui	a5,0x37ab7
    80015d56:	00100737          	lui	a4,0x100
    80015d5a:	078a                	slli	a5,a5,0x2
    80015d5c:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    80015d60:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015d64:	0732                	slli	a4,a4,0xc
    80015d66:	62f74073          	.insn	4, 0x62f74073
    addr = hs_page_base(VSRX_GRWX);

    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80015d6a:	08200593          	li	a1,130
    80015d6e:	0001f617          	auipc	a2,0x1f
    80015d72:	69260613          	addi	a2,a2,1682 # 80035400 <__func__.0+0x5710>
    80015d76:	0001a517          	auipc	a0,0x1a
    80015d7a:	27a50513          	addi	a0,a0,634 # 8002fff0 <__func__.0+0x300>
    80015d7e:	30e170ef          	jal	8002d08c <printf>
    80015d82:	00042797          	auipc	a5,0x42
    80015d86:	28f7c783          	lbu	a5,655(a5) # 80058011 <excpt+0x1>
    80015d8a:	0001a597          	auipc	a1,0x1a
    80015d8e:	23e58593          	addi	a1,a1,574 # 8002ffc8 <__func__.0+0x2d8>
    80015d92:	cf89                	beqz	a5,80015dac <store_page_fault_1+0x14c>
    80015d94:	6498                	ld	a4,8(s1)
    80015d96:	47bd                	li	a5,15
    80015d98:	0001a597          	auipc	a1,0x1a
    80015d9c:	22058593          	addi	a1,a1,544 # 8002ffb8 <__func__.0+0x2c8>
    80015da0:	00f70663          	beq	a4,a5,80015dac <store_page_fault_1+0x14c>
    80015da4:	0001a597          	auipc	a1,0x1a
    80015da8:	22458593          	addi	a1,a1,548 # 8002ffc8 <__func__.0+0x2d8>
    80015dac:	0001a517          	auipc	a0,0x1a
    80015db0:	25c50513          	addi	a0,a0,604 # 80030008 <__func__.0+0x318>
    80015db4:	2d8170ef          	jal	8002d08c <printf>
    80015db8:	00042797          	auipc	a5,0x42
    80015dbc:	2597c783          	lbu	a5,601(a5) # 80058011 <excpt+0x1>
    80015dc0:	c789                	beqz	a5,80015dca <store_page_fault_1+0x16a>
    80015dc2:	6498                	ld	a4,8(s1)
    80015dc4:	47bd                	li	a5,15
    80015dc6:	00f70c63          	beq	a4,a5,80015dde <store_page_fault_1+0x17e>
    80015dca:	0001a517          	auipc	a0,0x1a
    80015dce:	24650513          	addi	a0,a0,582 # 80030010 <__func__.0+0x320>
    80015dd2:	2ba170ef          	jal	8002d08c <printf>
    80015dd6:	02900513          	li	a0,41
    80015dda:	7a1150ef          	jal	8002bd7a <putchar>
    80015dde:	4529                	li	a0,10
    80015de0:	79b150ef          	jal	8002bd7a <putchar>
    80015de4:	c419                	beqz	s0,80015df2 <store_page_fault_1+0x192>
    80015de6:	00042797          	auipc	a5,0x42
    80015dea:	22b7c783          	lbu	a5,555(a5) # 80058011 <excpt+0x1>
    80015dee:	4401                	li	s0,0
    80015df0:	e7dd                	bnez	a5,80015e9e <store_page_fault_1+0x23e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行store指令时，pte.w=1
    TEST_SETUP_EXCEPT();
    80015df2:	81aeb0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015df6:	37ab77b7          	lui	a5,0x37ab7
    80015dfa:	00080737          	lui	a4,0x80
    80015dfe:	078a                	slli	a5,a5,0x2
    80015e00:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    80015e02:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015e06:	0736                	slli	a4,a4,0xd
    80015e08:	66f74073          	.insn	4, 0x66f74073
    addr = hs_page_base(VSRW_GURW);

    hsvh(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015e0c:	08200593          	li	a1,130
    80015e10:	0001f617          	auipc	a2,0x1f
    80015e14:	62060613          	addi	a2,a2,1568 # 80035430 <__func__.0+0x5740>
    80015e18:	0001a517          	auipc	a0,0x1a
    80015e1c:	1d850513          	addi	a0,a0,472 # 8002fff0 <__func__.0+0x300>
    80015e20:	26c170ef          	jal	8002d08c <printf>
    80015e24:	00042797          	auipc	a5,0x42
    80015e28:	1ed7c783          	lbu	a5,493(a5) # 80058011 <excpt+0x1>
    80015e2c:	0001a597          	auipc	a1,0x1a
    80015e30:	19c58593          	addi	a1,a1,412 # 8002ffc8 <__func__.0+0x2d8>
    80015e34:	e789                	bnez	a5,80015e3e <store_page_fault_1+0x1de>
    80015e36:	0001a597          	auipc	a1,0x1a
    80015e3a:	18258593          	addi	a1,a1,386 # 8002ffb8 <__func__.0+0x2c8>
    80015e3e:	0001a517          	auipc	a0,0x1a
    80015e42:	1ca50513          	addi	a0,a0,458 # 80030008 <__func__.0+0x318>
    80015e46:	246170ef          	jal	8002d08c <printf>
    80015e4a:	00042797          	auipc	a5,0x42
    80015e4e:	1c77c783          	lbu	a5,455(a5) # 80058011 <excpt+0x1>
    80015e52:	ebb9                	bnez	a5,80015ea8 <store_page_fault_1+0x248>
    80015e54:	4529                	li	a0,10
    80015e56:	725150ef          	jal	8002bd7a <putchar>
    80015e5a:	c411                	beqz	s0,80015e66 <store_page_fault_1+0x206>
    80015e5c:	00042797          	auipc	a5,0x42
    80015e60:	1b57c783          	lbu	a5,437(a5) # 80058011 <excpt+0x1>
    80015e64:	c79d                	beqz	a5,80015e92 <store_page_fault_1+0x232>
    80015e66:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80015e68:	0001a597          	auipc	a1,0x1a
    80015e6c:	16058593          	addi	a1,a1,352 # 8002ffc8 <__func__.0+0x2d8>
    80015e70:	0001a517          	auipc	a0,0x1a
    80015e74:	20050513          	addi	a0,a0,512 # 80030070 <__func__.0+0x380>
    80015e78:	214170ef          	jal	8002d08c <printf>
    80015e7c:	4511                	li	a0,4
    80015e7e:	88aeb0ef          	jal	80000f08 <goto_priv>
    80015e82:	a51eb0ef          	jal	800018d2 <reset_state>
}
    80015e86:	60e2                	ld	ra,24(sp)
    80015e88:	8522                	mv	a0,s0
    80015e8a:	6442                	ld	s0,16(sp)
    80015e8c:	64a2                	ld	s1,8(sp)
    80015e8e:	6105                	addi	sp,sp,32
    80015e90:	8082                	ret
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015e92:	4405                	li	s0,1
    TEST_END();
    80015e94:	0001a597          	auipc	a1,0x1a
    80015e98:	12458593          	addi	a1,a1,292 # 8002ffb8 <__func__.0+0x2c8>
    80015e9c:	bfd1                	j	80015e70 <store_page_fault_1+0x210>
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80015e9e:	6480                	ld	s0,8(s1)
    80015ea0:	1445                	addi	s0,s0,-15
    80015ea2:	00143413          	seqz	s0,s0
    80015ea6:	b7b1                	j	80015df2 <store_page_fault_1+0x192>
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015ea8:	0001a517          	auipc	a0,0x1a
    80015eac:	16850513          	addi	a0,a0,360 # 80030010 <__func__.0+0x320>
    80015eb0:	1dc170ef          	jal	8002d08c <printf>
    80015eb4:	02900513          	li	a0,41
    80015eb8:	6c3150ef          	jal	8002bd7a <putchar>
    80015ebc:	bf61                	j	80015e54 <store_page_fault_1+0x1f4>

0000000080015ebe <store_page_fault_2>:

bool store_page_fault_2(){
    80015ebe:	1101                	addi	sp,sp,-32

    TEST_START();
    80015ec0:	00019597          	auipc	a1,0x19
    80015ec4:	9c058593          	addi	a1,a1,-1600 # 8002e880 <__func__.12>
    80015ec8:	0001a517          	auipc	a0,0x1a
    80015ecc:	11050513          	addi	a0,a0,272 # 8002ffd8 <__func__.0+0x2e8>
bool store_page_fault_2(){
    80015ed0:	ec06                	sd	ra,24(sp)
    80015ed2:	e822                	sd	s0,16(sp)
    80015ed4:	e426                	sd	s1,8(sp)
    TEST_START();
    80015ed6:	1b6170ef          	jal	8002d08c <printf>
    80015eda:	4529                	li	a0,10
    80015edc:	69f150ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80015ee0:	450d                	li	a0,3
    80015ee2:	826eb0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80015ee6:	efaea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015eea:	adbea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80015eee:	88fea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80015ef2:	4511                	li	a0,4
    80015ef4:	814eb0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80015ef8:	000407b7          	lui	a5,0x40
    80015efc:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80015f00:	450d                	li	a0,3
    80015f02:	806eb0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015f06:	4509                	li	a0,2
    80015f08:	f21ea0ef          	jal	80000e28 <set_prev_priv>
    //执行hsvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015f0c:	f01ea0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80015f10:	37ab77b7          	lui	a5,0x37ab7
    80015f14:	00080737          	lui	a4,0x80
    80015f18:	078a                	slli	a5,a5,0x2
    80015f1a:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80015f1c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015f20:	0736                	slli	a4,a4,0xd
    80015f22:	6ef74073          	.insn	4, 0x6ef74073
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    hsvd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015f26:	08200593          	li	a1,130
    80015f2a:	0001f617          	auipc	a2,0x1f
    80015f2e:	52e60613          	addi	a2,a2,1326 # 80035458 <__func__.0+0x5768>
    80015f32:	0001a517          	auipc	a0,0x1a
    80015f36:	0be50513          	addi	a0,a0,190 # 8002fff0 <__func__.0+0x300>
    80015f3a:	152170ef          	jal	8002d08c <printf>
    80015f3e:	00042797          	auipc	a5,0x42
    80015f42:	0d37c783          	lbu	a5,211(a5) # 80058011 <excpt+0x1>
    80015f46:	00042497          	auipc	s1,0x42
    80015f4a:	0ca48493          	addi	s1,s1,202 # 80058010 <excpt>
    80015f4e:	0001a597          	auipc	a1,0x1a
    80015f52:	07a58593          	addi	a1,a1,122 # 8002ffc8 <__func__.0+0x2d8>
    80015f56:	cf89                	beqz	a5,80015f70 <store_page_fault_2+0xb2>
    80015f58:	6498                	ld	a4,8(s1)
    80015f5a:	47bd                	li	a5,15
    80015f5c:	0001a597          	auipc	a1,0x1a
    80015f60:	05c58593          	addi	a1,a1,92 # 8002ffb8 <__func__.0+0x2c8>
    80015f64:	00f70663          	beq	a4,a5,80015f70 <store_page_fault_2+0xb2>
    80015f68:	0001a597          	auipc	a1,0x1a
    80015f6c:	06058593          	addi	a1,a1,96 # 8002ffc8 <__func__.0+0x2d8>
    80015f70:	0001a517          	auipc	a0,0x1a
    80015f74:	09850513          	addi	a0,a0,152 # 80030008 <__func__.0+0x318>
    80015f78:	114170ef          	jal	8002d08c <printf>
    80015f7c:	00042797          	auipc	a5,0x42
    80015f80:	0957c783          	lbu	a5,149(a5) # 80058011 <excpt+0x1>
    80015f84:	c789                	beqz	a5,80015f8e <store_page_fault_2+0xd0>
    80015f86:	6498                	ld	a4,8(s1)
    80015f88:	47bd                	li	a5,15
    80015f8a:	00f70c63          	beq	a4,a5,80015fa2 <store_page_fault_2+0xe4>
    80015f8e:	0001a517          	auipc	a0,0x1a
    80015f92:	08250513          	addi	a0,a0,130 # 80030010 <__func__.0+0x320>
    80015f96:	0f6170ef          	jal	8002d08c <printf>
    80015f9a:	02900513          	li	a0,41
    80015f9e:	5dd150ef          	jal	8002bd7a <putchar>
    80015fa2:	4529                	li	a0,10
    80015fa4:	5d7150ef          	jal	8002bd7a <putchar>
    80015fa8:	00042417          	auipc	s0,0x42
    80015fac:	06944403          	lbu	s0,105(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80015fb0:	0001a597          	auipc	a1,0x1a
    80015fb4:	01858593          	addi	a1,a1,24 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015fb8:	cc11                	beqz	s0,80015fd4 <store_page_fault_2+0x116>
    80015fba:	6498                	ld	a4,8(s1)
    80015fbc:	47bd                	li	a5,15
    TEST_END();
    80015fbe:	0001a597          	auipc	a1,0x1a
    80015fc2:	ffa58593          	addi	a1,a1,-6 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015fc6:	00f70763          	beq	a4,a5,80015fd4 <store_page_fault_2+0x116>
    80015fca:	4401                	li	s0,0
    TEST_END();
    80015fcc:	0001a597          	auipc	a1,0x1a
    80015fd0:	ffc58593          	addi	a1,a1,-4 # 8002ffc8 <__func__.0+0x2d8>
    80015fd4:	0001a517          	auipc	a0,0x1a
    80015fd8:	09c50513          	addi	a0,a0,156 # 80030070 <__func__.0+0x380>
    80015fdc:	0b0170ef          	jal	8002d08c <printf>
    80015fe0:	4511                	li	a0,4
    80015fe2:	f27ea0ef          	jal	80000f08 <goto_priv>
    80015fe6:	8edeb0ef          	jal	800018d2 <reset_state>
}
    80015fea:	60e2                	ld	ra,24(sp)
    80015fec:	8522                	mv	a0,s0
    80015fee:	6442                	ld	s0,16(sp)
    80015ff0:	64a2                	ld	s1,8(sp)
    80015ff2:	6105                	addi	sp,sp,32
    80015ff4:	8082                	ret

0000000080015ff6 <store_page_fault_3>:

bool store_page_fault_3(){
    80015ff6:	1141                	addi	sp,sp,-16

    TEST_START();
    80015ff8:	00019597          	auipc	a1,0x19
    80015ffc:	8a058593          	addi	a1,a1,-1888 # 8002e898 <__func__.11>
    80016000:	0001a517          	auipc	a0,0x1a
    80016004:	fd850513          	addi	a0,a0,-40 # 8002ffd8 <__func__.0+0x2e8>
bool store_page_fault_3(){
    80016008:	e406                	sd	ra,8(sp)
    8001600a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001600c:	080170ef          	jal	8002d08c <printf>
    80016010:	4529                	li	a0,10
    80016012:	569150ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80016016:	450d                	li	a0,3
    80016018:	ef1ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001601c:	dc4ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016020:	9a5ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016024:	f58ea0ef          	jal	8000077c <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016028:	4511                	li	a0,4
    8001602a:	edfea0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001602e:	000407b7          	lui	a5,0x40
    80016032:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80016036:	450d                	li	a0,3
    80016038:	ed1ea0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001603c:	4509                	li	a0,2
    8001603e:	debea0ef          	jal	80000e28 <set_prev_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80016042:	dcbea0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80016046:	37ab77b7          	lui	a5,0x37ab7
    8001604a:	00080737          	lui	a4,0x80
    8001604e:	078a                	slli	a5,a5,0x2
    80016050:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016052:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016056:	0736                	slli	a4,a4,0xd
    80016058:	62f74073          	.insn	4, 0x62f74073
    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    8001605c:	08200593          	li	a1,130
    80016060:	0001f617          	auipc	a2,0x1f
    80016064:	43860613          	addi	a2,a2,1080 # 80035498 <__func__.0+0x57a8>
    80016068:	0001a517          	auipc	a0,0x1a
    8001606c:	f8850513          	addi	a0,a0,-120 # 8002fff0 <__func__.0+0x300>
    80016070:	01c170ef          	jal	8002d08c <printf>
    80016074:	00042797          	auipc	a5,0x42
    80016078:	f9d7c783          	lbu	a5,-99(a5) # 80058011 <excpt+0x1>
    8001607c:	0001a597          	auipc	a1,0x1a
    80016080:	f3c58593          	addi	a1,a1,-196 # 8002ffb8 <__func__.0+0x2c8>
    80016084:	c789                	beqz	a5,8001608e <store_page_fault_3+0x98>
    80016086:	0001a597          	auipc	a1,0x1a
    8001608a:	f4258593          	addi	a1,a1,-190 # 8002ffc8 <__func__.0+0x2d8>
    8001608e:	0001a517          	auipc	a0,0x1a
    80016092:	f7a50513          	addi	a0,a0,-134 # 80030008 <__func__.0+0x318>
    80016096:	7f7160ef          	jal	8002d08c <printf>
    8001609a:	00042797          	auipc	a5,0x42
    8001609e:	f777c783          	lbu	a5,-137(a5) # 80058011 <excpt+0x1>
    800160a2:	e7a1                	bnez	a5,800160ea <store_page_fault_3+0xf4>
    800160a4:	4529                	li	a0,10
    800160a6:	4d5150ef          	jal	8002bd7a <putchar>
    800160aa:	00042797          	auipc	a5,0x42
    800160ae:	f677c783          	lbu	a5,-153(a5) # 80058011 <excpt+0x1>
    800160b2:	e795                	bnez	a5,800160de <store_page_fault_3+0xe8>
    800160b4:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800160b6:	0001a597          	auipc	a1,0x1a
    800160ba:	f0258593          	addi	a1,a1,-254 # 8002ffb8 <__func__.0+0x2c8>
    800160be:	0001a517          	auipc	a0,0x1a
    800160c2:	fb250513          	addi	a0,a0,-78 # 80030070 <__func__.0+0x380>
    800160c6:	7c7160ef          	jal	8002d08c <printf>
    800160ca:	4511                	li	a0,4
    800160cc:	e3dea0ef          	jal	80000f08 <goto_priv>
    800160d0:	803eb0ef          	jal	800018d2 <reset_state>
}
    800160d4:	60a2                	ld	ra,8(sp)
    800160d6:	8522                	mv	a0,s0
    800160d8:	6402                	ld	s0,0(sp)
    800160da:	0141                	addi	sp,sp,16
    800160dc:	8082                	ret
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    800160de:	4401                	li	s0,0
    TEST_END();
    800160e0:	0001a597          	auipc	a1,0x1a
    800160e4:	ee858593          	addi	a1,a1,-280 # 8002ffc8 <__func__.0+0x2d8>
    800160e8:	bfd9                	j	800160be <store_page_fault_3+0xc8>
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    800160ea:	0001a517          	auipc	a0,0x1a
    800160ee:	f2650513          	addi	a0,a0,-218 # 80030010 <__func__.0+0x320>
    800160f2:	79b160ef          	jal	8002d08c <printf>
    800160f6:	02900513          	li	a0,41
    800160fa:	481150ef          	jal	8002bd7a <putchar>
    800160fe:	b75d                	j	800160a4 <store_page_fault_3+0xae>

0000000080016100 <store_page_fault_4>:


bool store_page_fault_4(){
    80016100:	1101                	addi	sp,sp,-32

    TEST_START();
    80016102:	00018597          	auipc	a1,0x18
    80016106:	7ae58593          	addi	a1,a1,1966 # 8002e8b0 <__func__.10>
    8001610a:	0001a517          	auipc	a0,0x1a
    8001610e:	ece50513          	addi	a0,a0,-306 # 8002ffd8 <__func__.0+0x2e8>
bool store_page_fault_4(){
    80016112:	ec06                	sd	ra,24(sp)
    80016114:	e822                	sd	s0,16(sp)
    80016116:	e426                	sd	s1,8(sp)
    TEST_START();
    80016118:	775160ef          	jal	8002d08c <printf>
    8001611c:	4529                	li	a0,10
    8001611e:	45d150ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80016122:	450d                	li	a0,3
    80016124:	de5ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016128:	cb8ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001612c:	899ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016130:	e4cea0ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80016134:	4509                	li	a0,2
    80016136:	dd3ea0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    8001613a:	cd3ea0ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001613e:	37ab77b7          	lui	a5,0x37ab7
    80016142:	078a                	slli	a5,a5,0x2
    80016144:	40019737          	lui	a4,0x40019
    80016148:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001614c:	070a                	slli	a4,a4,0x2
    8001614e:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.v=0 leads to LPF",
    80016152:	08200593          	li	a1,130
    80016156:	0001f617          	auipc	a2,0x1f
    8001615a:	37a60613          	addi	a2,a2,890 # 800354d0 <__func__.0+0x57e0>
    8001615e:	0001a517          	auipc	a0,0x1a
    80016162:	e9250513          	addi	a0,a0,-366 # 8002fff0 <__func__.0+0x300>
    80016166:	727160ef          	jal	8002d08c <printf>
    8001616a:	00042797          	auipc	a5,0x42
    8001616e:	ea77c783          	lbu	a5,-345(a5) # 80058011 <excpt+0x1>
    80016172:	00042497          	auipc	s1,0x42
    80016176:	e9e48493          	addi	s1,s1,-354 # 80058010 <excpt>
    8001617a:	0001a597          	auipc	a1,0x1a
    8001617e:	e4e58593          	addi	a1,a1,-434 # 8002ffc8 <__func__.0+0x2d8>
    80016182:	cf89                	beqz	a5,8001619c <store_page_fault_4+0x9c>
    80016184:	6498                	ld	a4,8(s1)
    80016186:	47bd                	li	a5,15
    80016188:	0001a597          	auipc	a1,0x1a
    8001618c:	e3058593          	addi	a1,a1,-464 # 8002ffb8 <__func__.0+0x2c8>
    80016190:	00f70663          	beq	a4,a5,8001619c <store_page_fault_4+0x9c>
    80016194:	0001a597          	auipc	a1,0x1a
    80016198:	e3458593          	addi	a1,a1,-460 # 8002ffc8 <__func__.0+0x2d8>
    8001619c:	0001a517          	auipc	a0,0x1a
    800161a0:	e6c50513          	addi	a0,a0,-404 # 80030008 <__func__.0+0x318>
    800161a4:	6e9160ef          	jal	8002d08c <printf>
    800161a8:	00042797          	auipc	a5,0x42
    800161ac:	e697c783          	lbu	a5,-407(a5) # 80058011 <excpt+0x1>
    800161b0:	c789                	beqz	a5,800161ba <store_page_fault_4+0xba>
    800161b2:	6498                	ld	a4,8(s1)
    800161b4:	47bd                	li	a5,15
    800161b6:	00f70c63          	beq	a4,a5,800161ce <store_page_fault_4+0xce>
    800161ba:	0001a517          	auipc	a0,0x1a
    800161be:	e5650513          	addi	a0,a0,-426 # 80030010 <__func__.0+0x320>
    800161c2:	6cb160ef          	jal	8002d08c <printf>
    800161c6:	02900513          	li	a0,41
    800161ca:	3b1150ef          	jal	8002bd7a <putchar>
    800161ce:	4529                	li	a0,10
    800161d0:	3ab150ef          	jal	8002bd7a <putchar>
    800161d4:	00042797          	auipc	a5,0x42
    800161d8:	e3d7c783          	lbu	a5,-451(a5) # 80058011 <excpt+0x1>
    800161dc:	4401                	li	s0,0
    800161de:	c789                	beqz	a5,800161e8 <store_page_fault_4+0xe8>
    800161e0:	6480                	ld	s0,8(s1)
    800161e2:	1445                	addi	s0,s0,-15
    800161e4:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行sd指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    800161e8:	c25ea0ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSRX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800161ec:	000807b7          	lui	a5,0x80
    800161f0:	1007b073          	csrc	sstatus,a5
    800161f4:	37ab77b7          	lui	a5,0x37ab7
    800161f8:	00100737          	lui	a4,0x100
    800161fc:	078a                	slli	a5,a5,0x2
    800161fe:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    80016202:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016206:	0732                	slli	a4,a4,0xc
    80016208:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    8001620c:	08200593          	li	a1,130
    80016210:	0001f617          	auipc	a2,0x1f
    80016214:	2e860613          	addi	a2,a2,744 # 800354f8 <__func__.0+0x5808>
    80016218:	0001a517          	auipc	a0,0x1a
    8001621c:	dd850513          	addi	a0,a0,-552 # 8002fff0 <__func__.0+0x300>
    80016220:	66d160ef          	jal	8002d08c <printf>
    80016224:	00042797          	auipc	a5,0x42
    80016228:	ded7c783          	lbu	a5,-531(a5) # 80058011 <excpt+0x1>
    8001622c:	0001a597          	auipc	a1,0x1a
    80016230:	d9c58593          	addi	a1,a1,-612 # 8002ffc8 <__func__.0+0x2d8>
    80016234:	cf89                	beqz	a5,8001624e <store_page_fault_4+0x14e>
    80016236:	6498                	ld	a4,8(s1)
    80016238:	47bd                	li	a5,15
    8001623a:	0001a597          	auipc	a1,0x1a
    8001623e:	d7e58593          	addi	a1,a1,-642 # 8002ffb8 <__func__.0+0x2c8>
    80016242:	00f70663          	beq	a4,a5,8001624e <store_page_fault_4+0x14e>
    80016246:	0001a597          	auipc	a1,0x1a
    8001624a:	d8258593          	addi	a1,a1,-638 # 8002ffc8 <__func__.0+0x2d8>
    8001624e:	0001a517          	auipc	a0,0x1a
    80016252:	dba50513          	addi	a0,a0,-582 # 80030008 <__func__.0+0x318>
    80016256:	637160ef          	jal	8002d08c <printf>
    8001625a:	00042797          	auipc	a5,0x42
    8001625e:	db77c783          	lbu	a5,-585(a5) # 80058011 <excpt+0x1>
    80016262:	c789                	beqz	a5,8001626c <store_page_fault_4+0x16c>
    80016264:	6498                	ld	a4,8(s1)
    80016266:	47bd                	li	a5,15
    80016268:	00f70c63          	beq	a4,a5,80016280 <store_page_fault_4+0x180>
    8001626c:	0001a517          	auipc	a0,0x1a
    80016270:	da450513          	addi	a0,a0,-604 # 80030010 <__func__.0+0x320>
    80016274:	619160ef          	jal	8002d08c <printf>
    80016278:	02900513          	li	a0,41
    8001627c:	2ff150ef          	jal	8002bd7a <putchar>
    80016280:	4529                	li	a0,10
    80016282:	2f9150ef          	jal	8002bd7a <putchar>
    80016286:	c419                	beqz	s0,80016294 <store_page_fault_4+0x194>
    80016288:	00042797          	auipc	a5,0x42
    8001628c:	d897c783          	lbu	a5,-631(a5) # 80058011 <excpt+0x1>
    80016290:	4401                	li	s0,0
    80016292:	e7dd                	bnez	a5,80016340 <store_page_fault_4+0x240>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行sd指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80016294:	b79ea0ef          	jal	80000e0c <test_setup_except_function>
    80016298:	37ab77b7          	lui	a5,0x37ab7
    8001629c:	00080737          	lui	a4,0x80
    800162a0:	078a                	slli	a5,a5,0x2
    800162a2:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    800162a4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800162a8:	0736                	slli	a4,a4,0xd
    800162aa:	00f73023          	sd	a5,0(a4)
    addr = hs_page_base(VSRW_GURW);

    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    800162ae:	08200593          	li	a1,130
    800162b2:	0001f617          	auipc	a2,0x1f
    800162b6:	26e60613          	addi	a2,a2,622 # 80035520 <__func__.0+0x5830>
    800162ba:	0001a517          	auipc	a0,0x1a
    800162be:	d3650513          	addi	a0,a0,-714 # 8002fff0 <__func__.0+0x300>
    800162c2:	5cb160ef          	jal	8002d08c <printf>
    800162c6:	00042797          	auipc	a5,0x42
    800162ca:	d4b7c783          	lbu	a5,-693(a5) # 80058011 <excpt+0x1>
    800162ce:	0001a597          	auipc	a1,0x1a
    800162d2:	cfa58593          	addi	a1,a1,-774 # 8002ffc8 <__func__.0+0x2d8>
    800162d6:	e789                	bnez	a5,800162e0 <store_page_fault_4+0x1e0>
    800162d8:	0001a597          	auipc	a1,0x1a
    800162dc:	ce058593          	addi	a1,a1,-800 # 8002ffb8 <__func__.0+0x2c8>
    800162e0:	0001a517          	auipc	a0,0x1a
    800162e4:	d2850513          	addi	a0,a0,-728 # 80030008 <__func__.0+0x318>
    800162e8:	5a5160ef          	jal	8002d08c <printf>
    800162ec:	00042797          	auipc	a5,0x42
    800162f0:	d257c783          	lbu	a5,-731(a5) # 80058011 <excpt+0x1>
    800162f4:	ebb9                	bnez	a5,8001634a <store_page_fault_4+0x24a>
    800162f6:	4529                	li	a0,10
    800162f8:	283150ef          	jal	8002bd7a <putchar>
    800162fc:	c411                	beqz	s0,80016308 <store_page_fault_4+0x208>
    800162fe:	00042797          	auipc	a5,0x42
    80016302:	d137c783          	lbu	a5,-749(a5) # 80058011 <excpt+0x1>
    80016306:	c79d                	beqz	a5,80016334 <store_page_fault_4+0x234>
    80016308:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    8001630a:	0001a597          	auipc	a1,0x1a
    8001630e:	cbe58593          	addi	a1,a1,-834 # 8002ffc8 <__func__.0+0x2d8>
    80016312:	0001a517          	auipc	a0,0x1a
    80016316:	d5e50513          	addi	a0,a0,-674 # 80030070 <__func__.0+0x380>
    8001631a:	573160ef          	jal	8002d08c <printf>
    8001631e:	4511                	li	a0,4
    80016320:	be9ea0ef          	jal	80000f08 <goto_priv>
    80016324:	daeeb0ef          	jal	800018d2 <reset_state>
}
    80016328:	60e2                	ld	ra,24(sp)
    8001632a:	8522                	mv	a0,s0
    8001632c:	6442                	ld	s0,16(sp)
    8001632e:	64a2                	ld	s1,8(sp)
    80016330:	6105                	addi	sp,sp,32
    80016332:	8082                	ret
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    80016334:	4405                	li	s0,1
    TEST_END();
    80016336:	0001a597          	auipc	a1,0x1a
    8001633a:	c8258593          	addi	a1,a1,-894 # 8002ffb8 <__func__.0+0x2c8>
    8001633e:	bfd1                	j	80016312 <store_page_fault_4+0x212>
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    80016340:	6480                	ld	s0,8(s1)
    80016342:	1445                	addi	s0,s0,-15
    80016344:	00143413          	seqz	s0,s0
    80016348:	b7b1                	j	80016294 <store_page_fault_4+0x194>
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    8001634a:	0001a517          	auipc	a0,0x1a
    8001634e:	cc650513          	addi	a0,a0,-826 # 80030010 <__func__.0+0x320>
    80016352:	53b160ef          	jal	8002d08c <printf>
    80016356:	02900513          	li	a0,41
    8001635a:	221150ef          	jal	8002bd7a <putchar>
    8001635e:	bf61                	j	800162f6 <store_page_fault_4+0x1f6>

0000000080016360 <store_page_fault_5>:

bool store_page_fault_5(){
    80016360:	1101                	addi	sp,sp,-32

    TEST_START();
    80016362:	00018597          	auipc	a1,0x18
    80016366:	56658593          	addi	a1,a1,1382 # 8002e8c8 <__func__.9>
    8001636a:	0001a517          	auipc	a0,0x1a
    8001636e:	c6e50513          	addi	a0,a0,-914 # 8002ffd8 <__func__.0+0x2e8>
bool store_page_fault_5(){
    80016372:	ec06                	sd	ra,24(sp)
    80016374:	e822                	sd	s0,16(sp)
    80016376:	e426                	sd	s1,8(sp)
    TEST_START();
    80016378:	515160ef          	jal	8002d08c <printf>
    8001637c:	4529                	li	a0,10
    8001637e:	1fd150ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80016382:	450d                	li	a0,3
    80016384:	b85ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016388:	a58ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001638c:	e38ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016390:	becea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80016394:	4511                	li	a0,4
    80016396:	b73ea0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001639a:	000407b7          	lui	a5,0x40
    8001639e:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800163a2:	4509                	li	a0,2
    800163a4:	b65ea0ef          	jal	80000f08 <goto_priv>
    //执行sd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800163a8:	a65ea0ef          	jal	80000e0c <test_setup_except_function>
    800163ac:	37ab77b7          	lui	a5,0x37ab7
    800163b0:	00080737          	lui	a4,0x80
    800163b4:	078a                	slli	a5,a5,0x2
    800163b6:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800163b8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800163bc:	0736                	slli	a4,a4,0xd
    800163be:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    800163c2:	08200593          	li	a1,130
    800163c6:	0001f617          	auipc	a2,0x1f
    800163ca:	18260613          	addi	a2,a2,386 # 80035548 <__func__.0+0x5858>
    800163ce:	0001a517          	auipc	a0,0x1a
    800163d2:	c2250513          	addi	a0,a0,-990 # 8002fff0 <__func__.0+0x300>
    800163d6:	4b7160ef          	jal	8002d08c <printf>
    800163da:	00042797          	auipc	a5,0x42
    800163de:	c377c783          	lbu	a5,-969(a5) # 80058011 <excpt+0x1>
    800163e2:	00042497          	auipc	s1,0x42
    800163e6:	c2e48493          	addi	s1,s1,-978 # 80058010 <excpt>
    800163ea:	0001a597          	auipc	a1,0x1a
    800163ee:	bde58593          	addi	a1,a1,-1058 # 8002ffc8 <__func__.0+0x2d8>
    800163f2:	cf89                	beqz	a5,8001640c <store_page_fault_5+0xac>
    800163f4:	6498                	ld	a4,8(s1)
    800163f6:	47bd                	li	a5,15
    800163f8:	0001a597          	auipc	a1,0x1a
    800163fc:	bc058593          	addi	a1,a1,-1088 # 8002ffb8 <__func__.0+0x2c8>
    80016400:	00f70663          	beq	a4,a5,8001640c <store_page_fault_5+0xac>
    80016404:	0001a597          	auipc	a1,0x1a
    80016408:	bc458593          	addi	a1,a1,-1084 # 8002ffc8 <__func__.0+0x2d8>
    8001640c:	0001a517          	auipc	a0,0x1a
    80016410:	bfc50513          	addi	a0,a0,-1028 # 80030008 <__func__.0+0x318>
    80016414:	479160ef          	jal	8002d08c <printf>
    80016418:	00042797          	auipc	a5,0x42
    8001641c:	bf97c783          	lbu	a5,-1031(a5) # 80058011 <excpt+0x1>
    80016420:	c789                	beqz	a5,8001642a <store_page_fault_5+0xca>
    80016422:	6498                	ld	a4,8(s1)
    80016424:	47bd                	li	a5,15
    80016426:	00f70c63          	beq	a4,a5,8001643e <store_page_fault_5+0xde>
    8001642a:	0001a517          	auipc	a0,0x1a
    8001642e:	be650513          	addi	a0,a0,-1050 # 80030010 <__func__.0+0x320>
    80016432:	45b160ef          	jal	8002d08c <printf>
    80016436:	02900513          	li	a0,41
    8001643a:	141150ef          	jal	8002bd7a <putchar>
    8001643e:	4529                	li	a0,10
    80016440:	13b150ef          	jal	8002bd7a <putchar>
    80016444:	00042417          	auipc	s0,0x42
    80016448:	bcd44403          	lbu	s0,-1075(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    8001644c:	0001a597          	auipc	a1,0x1a
    80016450:	b7c58593          	addi	a1,a1,-1156 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80016454:	cc11                	beqz	s0,80016470 <store_page_fault_5+0x110>
    80016456:	6498                	ld	a4,8(s1)
    80016458:	47bd                	li	a5,15
    TEST_END();
    8001645a:	0001a597          	auipc	a1,0x1a
    8001645e:	b5e58593          	addi	a1,a1,-1186 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80016462:	00f70763          	beq	a4,a5,80016470 <store_page_fault_5+0x110>
    80016466:	4401                	li	s0,0
    TEST_END();
    80016468:	0001a597          	auipc	a1,0x1a
    8001646c:	b6058593          	addi	a1,a1,-1184 # 8002ffc8 <__func__.0+0x2d8>
    80016470:	0001a517          	auipc	a0,0x1a
    80016474:	c0050513          	addi	a0,a0,-1024 # 80030070 <__func__.0+0x380>
    80016478:	415160ef          	jal	8002d08c <printf>
    8001647c:	4511                	li	a0,4
    8001647e:	a8bea0ef          	jal	80000f08 <goto_priv>
    80016482:	c50eb0ef          	jal	800018d2 <reset_state>
}
    80016486:	60e2                	ld	ra,24(sp)
    80016488:	8522                	mv	a0,s0
    8001648a:	6442                	ld	s0,16(sp)
    8001648c:	64a2                	ld	s1,8(sp)
    8001648e:	6105                	addi	sp,sp,32
    80016490:	8082                	ret

0000000080016492 <store_page_fault_6>:

bool store_page_fault_6(){
    80016492:	1141                	addi	sp,sp,-16

    TEST_START();
    80016494:	00018597          	auipc	a1,0x18
    80016498:	44c58593          	addi	a1,a1,1100 # 8002e8e0 <__func__.8>
    8001649c:	0001a517          	auipc	a0,0x1a
    800164a0:	b3c50513          	addi	a0,a0,-1220 # 8002ffd8 <__func__.0+0x2e8>
bool store_page_fault_6(){
    800164a4:	e406                	sd	ra,8(sp)
    800164a6:	e022                	sd	s0,0(sp)
    TEST_START();
    800164a8:	3e5160ef          	jal	8002d08c <printf>
    800164ac:	4529                	li	a0,10
    800164ae:	0cd150ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800164b2:	450d                	li	a0,3
    800164b4:	a55ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800164b8:	928ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800164bc:	d08ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800164c0:	abcea0ef          	jal	8000077c <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    800164c4:	4511                	li	a0,4
    800164c6:	a43ea0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800164ca:	000407b7          	lui	a5,0x40
    800164ce:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    800164d2:	4509                	li	a0,2
    800164d4:	a35ea0ef          	jal	80000f08 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800164d8:	935ea0ef          	jal	80000e0c <test_setup_except_function>
    800164dc:	37ab77b7          	lui	a5,0x37ab7
    800164e0:	00080737          	lui	a4,0x80
    800164e4:	078a                	slli	a5,a5,0x2
    800164e6:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800164e8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800164ec:	0736                	slli	a4,a4,0xd
    800164ee:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    800164f2:	08200593          	li	a1,130
    800164f6:	0001f617          	auipc	a2,0x1f
    800164fa:	08a60613          	addi	a2,a2,138 # 80035580 <__func__.0+0x5890>
    800164fe:	0001a517          	auipc	a0,0x1a
    80016502:	af250513          	addi	a0,a0,-1294 # 8002fff0 <__func__.0+0x300>
    80016506:	387160ef          	jal	8002d08c <printf>
    8001650a:	00042797          	auipc	a5,0x42
    8001650e:	b077c783          	lbu	a5,-1273(a5) # 80058011 <excpt+0x1>
    80016512:	0001a597          	auipc	a1,0x1a
    80016516:	aa658593          	addi	a1,a1,-1370 # 8002ffb8 <__func__.0+0x2c8>
    8001651a:	c789                	beqz	a5,80016524 <store_page_fault_6+0x92>
    8001651c:	0001a597          	auipc	a1,0x1a
    80016520:	aac58593          	addi	a1,a1,-1364 # 8002ffc8 <__func__.0+0x2d8>
    80016524:	0001a517          	auipc	a0,0x1a
    80016528:	ae450513          	addi	a0,a0,-1308 # 80030008 <__func__.0+0x318>
    8001652c:	361160ef          	jal	8002d08c <printf>
    80016530:	00042797          	auipc	a5,0x42
    80016534:	ae17c783          	lbu	a5,-1311(a5) # 80058011 <excpt+0x1>
    80016538:	e7a1                	bnez	a5,80016580 <store_page_fault_6+0xee>
    8001653a:	4529                	li	a0,10
    8001653c:	03f150ef          	jal	8002bd7a <putchar>
    80016540:	00042797          	auipc	a5,0x42
    80016544:	ad17c783          	lbu	a5,-1327(a5) # 80058011 <excpt+0x1>
    80016548:	e795                	bnez	a5,80016574 <store_page_fault_6+0xe2>
    8001654a:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001654c:	0001a597          	auipc	a1,0x1a
    80016550:	a6c58593          	addi	a1,a1,-1428 # 8002ffb8 <__func__.0+0x2c8>
    80016554:	0001a517          	auipc	a0,0x1a
    80016558:	b1c50513          	addi	a0,a0,-1252 # 80030070 <__func__.0+0x380>
    8001655c:	331160ef          	jal	8002d08c <printf>
    80016560:	4511                	li	a0,4
    80016562:	9a7ea0ef          	jal	80000f08 <goto_priv>
    80016566:	b6ceb0ef          	jal	800018d2 <reset_state>
}
    8001656a:	60a2                	ld	ra,8(sp)
    8001656c:	8522                	mv	a0,s0
    8001656e:	6402                	ld	s0,0(sp)
    80016570:	0141                	addi	sp,sp,16
    80016572:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80016574:	4401                	li	s0,0
    TEST_END();
    80016576:	0001a597          	auipc	a1,0x1a
    8001657a:	a5258593          	addi	a1,a1,-1454 # 8002ffc8 <__func__.0+0x2d8>
    8001657e:	bfd9                	j	80016554 <store_page_fault_6+0xc2>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80016580:	0001a517          	auipc	a0,0x1a
    80016584:	a9050513          	addi	a0,a0,-1392 # 80030010 <__func__.0+0x320>
    80016588:	305160ef          	jal	8002d08c <printf>
    8001658c:	02900513          	li	a0,41
    80016590:	7ea150ef          	jal	8002bd7a <putchar>
    80016594:	b75d                	j	8001653a <store_page_fault_6+0xa8>

0000000080016596 <store_page_fault_7>:

bool store_page_fault_7(){
    80016596:	1101                	addi	sp,sp,-32

    TEST_START();
    80016598:	00018597          	auipc	a1,0x18
    8001659c:	36058593          	addi	a1,a1,864 # 8002e8f8 <__func__.7>
    800165a0:	0001a517          	auipc	a0,0x1a
    800165a4:	a3850513          	addi	a0,a0,-1480 # 8002ffd8 <__func__.0+0x2e8>
bool store_page_fault_7(){
    800165a8:	ec06                	sd	ra,24(sp)
    800165aa:	e822                	sd	s0,16(sp)
    800165ac:	e426                	sd	s1,8(sp)
    TEST_START();
    800165ae:	2df160ef          	jal	8002d08c <printf>
    800165b2:	4529                	li	a0,10
    800165b4:	7c6150ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800165b8:	450d                	li	a0,3
    800165ba:	94fea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800165be:	822ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800165c2:	c02ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800165c6:	9b6ea0ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800165ca:	4511                	li	a0,4
    800165cc:	93dea0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    800165d0:	000407b7          	lui	a5,0x40
    800165d4:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800165d8:	450d                	li	a0,3
    800165da:	92fea0ef          	jal	80000f08 <goto_priv>
    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800165de:	82fea0ef          	jal	80000e0c <test_setup_except_function>
    800165e2:	37ab77b7          	lui	a5,0x37ab7
    800165e6:	00080737          	lui	a4,0x80
    800165ea:	078a                	slli	a5,a5,0x2
    800165ec:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800165ee:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800165f2:	0736                	slli	a4,a4,0xd
    800165f4:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800165f8:	08200593          	li	a1,130
    800165fc:	0001f617          	auipc	a2,0x1f
    80016600:	fbc60613          	addi	a2,a2,-68 # 800355b8 <__func__.0+0x58c8>
    80016604:	0001a517          	auipc	a0,0x1a
    80016608:	9ec50513          	addi	a0,a0,-1556 # 8002fff0 <__func__.0+0x300>
    8001660c:	281160ef          	jal	8002d08c <printf>
    80016610:	00042797          	auipc	a5,0x42
    80016614:	a017c783          	lbu	a5,-1535(a5) # 80058011 <excpt+0x1>
    80016618:	00042497          	auipc	s1,0x42
    8001661c:	9f848493          	addi	s1,s1,-1544 # 80058010 <excpt>
    80016620:	0001a597          	auipc	a1,0x1a
    80016624:	9a858593          	addi	a1,a1,-1624 # 8002ffc8 <__func__.0+0x2d8>
    80016628:	cf89                	beqz	a5,80016642 <store_page_fault_7+0xac>
    8001662a:	6498                	ld	a4,8(s1)
    8001662c:	47bd                	li	a5,15
    8001662e:	0001a597          	auipc	a1,0x1a
    80016632:	98a58593          	addi	a1,a1,-1654 # 8002ffb8 <__func__.0+0x2c8>
    80016636:	00f70663          	beq	a4,a5,80016642 <store_page_fault_7+0xac>
    8001663a:	0001a597          	auipc	a1,0x1a
    8001663e:	98e58593          	addi	a1,a1,-1650 # 8002ffc8 <__func__.0+0x2d8>
    80016642:	0001a517          	auipc	a0,0x1a
    80016646:	9c650513          	addi	a0,a0,-1594 # 80030008 <__func__.0+0x318>
    8001664a:	243160ef          	jal	8002d08c <printf>
    8001664e:	00042797          	auipc	a5,0x42
    80016652:	9c37c783          	lbu	a5,-1597(a5) # 80058011 <excpt+0x1>
    80016656:	c789                	beqz	a5,80016660 <store_page_fault_7+0xca>
    80016658:	6498                	ld	a4,8(s1)
    8001665a:	47bd                	li	a5,15
    8001665c:	00f70c63          	beq	a4,a5,80016674 <store_page_fault_7+0xde>
    80016660:	0001a517          	auipc	a0,0x1a
    80016664:	9b050513          	addi	a0,a0,-1616 # 80030010 <__func__.0+0x320>
    80016668:	225160ef          	jal	8002d08c <printf>
    8001666c:	02900513          	li	a0,41
    80016670:	70a150ef          	jal	8002bd7a <putchar>
    80016674:	4529                	li	a0,10
    80016676:	704150ef          	jal	8002bd7a <putchar>
    8001667a:	00042417          	auipc	s0,0x42
    8001667e:	99744403          	lbu	s0,-1641(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80016682:	0001a597          	auipc	a1,0x1a
    80016686:	94658593          	addi	a1,a1,-1722 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    8001668a:	cc11                	beqz	s0,800166a6 <store_page_fault_7+0x110>
    8001668c:	6498                	ld	a4,8(s1)
    8001668e:	47bd                	li	a5,15
    TEST_END();
    80016690:	0001a597          	auipc	a1,0x1a
    80016694:	92858593          	addi	a1,a1,-1752 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80016698:	00f70763          	beq	a4,a5,800166a6 <store_page_fault_7+0x110>
    8001669c:	4401                	li	s0,0
    TEST_END();
    8001669e:	0001a597          	auipc	a1,0x1a
    800166a2:	92a58593          	addi	a1,a1,-1750 # 8002ffc8 <__func__.0+0x2d8>
    800166a6:	0001a517          	auipc	a0,0x1a
    800166aa:	9ca50513          	addi	a0,a0,-1590 # 80030070 <__func__.0+0x380>
    800166ae:	1df160ef          	jal	8002d08c <printf>
    800166b2:	4511                	li	a0,4
    800166b4:	855ea0ef          	jal	80000f08 <goto_priv>
    800166b8:	a1aeb0ef          	jal	800018d2 <reset_state>
}
    800166bc:	60e2                	ld	ra,24(sp)
    800166be:	8522                	mv	a0,s0
    800166c0:	6442                	ld	s0,16(sp)
    800166c2:	64a2                	ld	s1,8(sp)
    800166c4:	6105                	addi	sp,sp,32
    800166c6:	8082                	ret

00000000800166c8 <store_page_fault_8>:

bool store_page_fault_8(){
    800166c8:	1141                	addi	sp,sp,-16

    TEST_START();
    800166ca:	00018597          	auipc	a1,0x18
    800166ce:	24658593          	addi	a1,a1,582 # 8002e910 <__func__.6>
    800166d2:	0001a517          	auipc	a0,0x1a
    800166d6:	90650513          	addi	a0,a0,-1786 # 8002ffd8 <__func__.0+0x2e8>
bool store_page_fault_8(){
    800166da:	e406                	sd	ra,8(sp)
    800166dc:	e022                	sd	s0,0(sp)
    TEST_START();
    800166de:	1af160ef          	jal	8002d08c <printf>
    800166e2:	4529                	li	a0,10
    800166e4:	696150ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800166e8:	450d                	li	a0,3
    800166ea:	81fea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800166ee:	ef3e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800166f2:	ad2ea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800166f6:	886ea0ef          	jal	8000077c <vspt_init>


    //执行sd指令时，设置了msstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    800166fa:	4511                	li	a0,4
    800166fc:	80dea0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80016700:	000407b7          	lui	a5,0x40
    80016704:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80016708:	450d                	li	a0,3
    8001670a:	ffeea0ef          	jal	80000f08 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001670e:	efeea0ef          	jal	80000e0c <test_setup_except_function>
    80016712:	37ab77b7          	lui	a5,0x37ab7
    80016716:	00080737          	lui	a4,0x80
    8001671a:	078a                	slli	a5,a5,0x2
    8001671c:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001671e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016722:	0736                	slli	a4,a4,0xd
    80016724:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80016728:	08200593          	li	a1,130
    8001672c:	0001f617          	auipc	a2,0x1f
    80016730:	ec460613          	addi	a2,a2,-316 # 800355f0 <__func__.0+0x5900>
    80016734:	0001a517          	auipc	a0,0x1a
    80016738:	8bc50513          	addi	a0,a0,-1860 # 8002fff0 <__func__.0+0x300>
    8001673c:	151160ef          	jal	8002d08c <printf>
    80016740:	00042797          	auipc	a5,0x42
    80016744:	8d17c783          	lbu	a5,-1839(a5) # 80058011 <excpt+0x1>
    80016748:	0001a597          	auipc	a1,0x1a
    8001674c:	87058593          	addi	a1,a1,-1936 # 8002ffb8 <__func__.0+0x2c8>
    80016750:	c789                	beqz	a5,8001675a <store_page_fault_8+0x92>
    80016752:	0001a597          	auipc	a1,0x1a
    80016756:	87658593          	addi	a1,a1,-1930 # 8002ffc8 <__func__.0+0x2d8>
    8001675a:	0001a517          	auipc	a0,0x1a
    8001675e:	8ae50513          	addi	a0,a0,-1874 # 80030008 <__func__.0+0x318>
    80016762:	12b160ef          	jal	8002d08c <printf>
    80016766:	00042797          	auipc	a5,0x42
    8001676a:	8ab7c783          	lbu	a5,-1877(a5) # 80058011 <excpt+0x1>
    8001676e:	e7a1                	bnez	a5,800167b6 <store_page_fault_8+0xee>
    80016770:	4529                	li	a0,10
    80016772:	608150ef          	jal	8002bd7a <putchar>
    80016776:	00042797          	auipc	a5,0x42
    8001677a:	89b7c783          	lbu	a5,-1893(a5) # 80058011 <excpt+0x1>
    8001677e:	e795                	bnez	a5,800167aa <store_page_fault_8+0xe2>
    80016780:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016782:	0001a597          	auipc	a1,0x1a
    80016786:	83658593          	addi	a1,a1,-1994 # 8002ffb8 <__func__.0+0x2c8>
    8001678a:	0001a517          	auipc	a0,0x1a
    8001678e:	8e650513          	addi	a0,a0,-1818 # 80030070 <__func__.0+0x380>
    80016792:	0fb160ef          	jal	8002d08c <printf>
    80016796:	4511                	li	a0,4
    80016798:	f70ea0ef          	jal	80000f08 <goto_priv>
    8001679c:	936eb0ef          	jal	800018d2 <reset_state>
}
    800167a0:	60a2                	ld	ra,8(sp)
    800167a2:	8522                	mv	a0,s0
    800167a4:	6402                	ld	s0,0(sp)
    800167a6:	0141                	addi	sp,sp,16
    800167a8:	8082                	ret
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    800167aa:	4401                	li	s0,0
    TEST_END();
    800167ac:	0001a597          	auipc	a1,0x1a
    800167b0:	81c58593          	addi	a1,a1,-2020 # 8002ffc8 <__func__.0+0x2d8>
    800167b4:	bfd9                	j	8001678a <store_page_fault_8+0xc2>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    800167b6:	0001a517          	auipc	a0,0x1a
    800167ba:	85a50513          	addi	a0,a0,-1958 # 80030010 <__func__.0+0x320>
    800167be:	0cf160ef          	jal	8002d08c <printf>
    800167c2:	02900513          	li	a0,41
    800167c6:	5b4150ef          	jal	8002bd7a <putchar>
    800167ca:	b75d                	j	80016770 <store_page_fault_8+0xa8>

00000000800167cc <amo_page_fault_1>:





bool amo_page_fault_1(){
    800167cc:	1101                	addi	sp,sp,-32

    TEST_START();
    800167ce:	00018597          	auipc	a1,0x18
    800167d2:	15a58593          	addi	a1,a1,346 # 8002e928 <__func__.5>
    800167d6:	0001a517          	auipc	a0,0x1a
    800167da:	80250513          	addi	a0,a0,-2046 # 8002ffd8 <__func__.0+0x2e8>
bool amo_page_fault_1(){
    800167de:	ec06                	sd	ra,24(sp)
    800167e0:	e822                	sd	s0,16(sp)
    800167e2:	e426                	sd	s1,8(sp)
    800167e4:	e04a                	sd	s2,0(sp)
    TEST_START();
    800167e6:	0a7160ef          	jal	8002d08c <printf>
    800167ea:	4529                	li	a0,10
    800167ec:	58e150ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800167f0:	450d                	li	a0,3
    800167f2:	f16ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800167f6:	debe90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800167fa:	9caea0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800167fe:	f7fe90ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_HS);
    80016802:	450d                	li	a0,3
    80016804:	f04ea0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80016808:	4509                	li	a0,2
    8001680a:	e1eea0ef          	jal	80000e28 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    8001680e:	dfeea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80016812:	deadc7b7          	lui	a5,0xdeadc
    80016816:	40019737          	lui	a4,0x40019
    8001681a:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    8001681e:	070a                	slli	a4,a4,0x2
    80016820:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016824:	08200593          	li	a1,130
    80016828:	0001f617          	auipc	a2,0x1f
    8001682c:	e0060613          	addi	a2,a2,-512 # 80035628 <__func__.0+0x5938>
    80016830:	00019517          	auipc	a0,0x19
    80016834:	7c050513          	addi	a0,a0,1984 # 8002fff0 <__func__.0+0x300>
    value = amoadd_w(addr,value);
    80016838:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    8001683c:	051160ef          	jal	8002d08c <printf>
    80016840:	00041797          	auipc	a5,0x41
    80016844:	7d17c783          	lbu	a5,2001(a5) # 80058011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80016848:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    8001684a:	00041917          	auipc	s2,0x41
    8001684e:	7c690913          	addi	s2,s2,1990 # 80058010 <excpt>
    80016852:	00019597          	auipc	a1,0x19
    80016856:	77658593          	addi	a1,a1,1910 # 8002ffc8 <__func__.0+0x2d8>
    8001685a:	cf91                	beqz	a5,80016876 <amo_page_fault_1+0xaa>
    8001685c:	00893703          	ld	a4,8(s2)
    80016860:	47bd                	li	a5,15
    80016862:	00019597          	auipc	a1,0x19
    80016866:	75658593          	addi	a1,a1,1878 # 8002ffb8 <__func__.0+0x2c8>
    8001686a:	00f70663          	beq	a4,a5,80016876 <amo_page_fault_1+0xaa>
    8001686e:	00019597          	auipc	a1,0x19
    80016872:	75a58593          	addi	a1,a1,1882 # 8002ffc8 <__func__.0+0x2d8>
    80016876:	00019517          	auipc	a0,0x19
    8001687a:	79250513          	addi	a0,a0,1938 # 80030008 <__func__.0+0x318>
    8001687e:	00f160ef          	jal	8002d08c <printf>
    80016882:	00041797          	auipc	a5,0x41
    80016886:	78f7c783          	lbu	a5,1935(a5) # 80058011 <excpt+0x1>
    8001688a:	c791                	beqz	a5,80016896 <amo_page_fault_1+0xca>
    8001688c:	00893703          	ld	a4,8(s2)
    80016890:	47bd                	li	a5,15
    80016892:	00f70c63          	beq	a4,a5,800168aa <amo_page_fault_1+0xde>
    80016896:	00019517          	auipc	a0,0x19
    8001689a:	77a50513          	addi	a0,a0,1914 # 80030010 <__func__.0+0x320>
    8001689e:	7ee160ef          	jal	8002d08c <printf>
    800168a2:	02900513          	li	a0,41
    800168a6:	4d4150ef          	jal	8002bd7a <putchar>
    800168aa:	4529                	li	a0,10
    800168ac:	4ce150ef          	jal	8002bd7a <putchar>
    800168b0:	00041797          	auipc	a5,0x41
    800168b4:	7617c783          	lbu	a5,1889(a5) # 80058011 <excpt+0x1>
    800168b8:	4481                	li	s1,0
    800168ba:	c791                	beqz	a5,800168c6 <amo_page_fault_1+0xfa>
    800168bc:	00893483          	ld	s1,8(s2)
    800168c0:	14c5                	addi	s1,s1,-15
    800168c2:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    800168c6:	d46ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    800168ca:	001007b7          	lui	a5,0x100
    800168ce:	05578793          	addi	a5,a5,85 # 100055 <STACK_SIZE+0x55>
    800168d2:	07b2                	slli	a5,a5,0xc
    800168d4:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GRWX);

    value = amoand_d(addr,value);
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    800168d8:	08200593          	li	a1,130
    800168dc:	0001f617          	auipc	a2,0x1f
    800168e0:	d8460613          	addi	a2,a2,-636 # 80035660 <__func__.0+0x5970>
    800168e4:	00019517          	auipc	a0,0x19
    800168e8:	70c50513          	addi	a0,a0,1804 # 8002fff0 <__func__.0+0x300>
    800168ec:	7a0160ef          	jal	8002d08c <printf>
    800168f0:	00041797          	auipc	a5,0x41
    800168f4:	7217c783          	lbu	a5,1825(a5) # 80058011 <excpt+0x1>
    800168f8:	00019597          	auipc	a1,0x19
    800168fc:	6d058593          	addi	a1,a1,1744 # 8002ffc8 <__func__.0+0x2d8>
    80016900:	cf91                	beqz	a5,8001691c <amo_page_fault_1+0x150>
    80016902:	00893703          	ld	a4,8(s2)
    80016906:	47bd                	li	a5,15
    80016908:	00019597          	auipc	a1,0x19
    8001690c:	6b058593          	addi	a1,a1,1712 # 8002ffb8 <__func__.0+0x2c8>
    80016910:	00f70663          	beq	a4,a5,8001691c <amo_page_fault_1+0x150>
    80016914:	00019597          	auipc	a1,0x19
    80016918:	6b458593          	addi	a1,a1,1716 # 8002ffc8 <__func__.0+0x2d8>
    8001691c:	00019517          	auipc	a0,0x19
    80016920:	6ec50513          	addi	a0,a0,1772 # 80030008 <__func__.0+0x318>
    80016924:	768160ef          	jal	8002d08c <printf>
    80016928:	00041797          	auipc	a5,0x41
    8001692c:	6e97c783          	lbu	a5,1769(a5) # 80058011 <excpt+0x1>
    80016930:	c791                	beqz	a5,8001693c <amo_page_fault_1+0x170>
    80016932:	00893703          	ld	a4,8(s2)
    80016936:	47bd                	li	a5,15
    80016938:	00f70c63          	beq	a4,a5,80016950 <amo_page_fault_1+0x184>
    8001693c:	00019517          	auipc	a0,0x19
    80016940:	6d450513          	addi	a0,a0,1748 # 80030010 <__func__.0+0x320>
    80016944:	748160ef          	jal	8002d08c <printf>
    80016948:	02900513          	li	a0,41
    8001694c:	42e150ef          	jal	8002bd7a <putchar>
    80016950:	4529                	li	a0,10
    80016952:	428150ef          	jal	8002bd7a <putchar>
    80016956:	c499                	beqz	s1,80016964 <amo_page_fault_1+0x198>
    80016958:	00041797          	auipc	a5,0x41
    8001695c:	6b97c783          	lbu	a5,1721(a5) # 80058011 <excpt+0x1>
    80016960:	4481                	li	s1,0
    80016962:	e3cd                	bnez	a5,80016a04 <amo_page_fault_1+0x238>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80016964:	ca8ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80016968:	4785                	li	a5,1
    8001696a:	1782                	slli	a5,a5,0x20
    8001696c:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    80016970:	08200593          	li	a1,130
    80016974:	0001f617          	auipc	a2,0x1f
    80016978:	d2460613          	addi	a2,a2,-732 # 80035698 <__func__.0+0x59a8>
    8001697c:	00019517          	auipc	a0,0x19
    80016980:	67450513          	addi	a0,a0,1652 # 8002fff0 <__func__.0+0x300>
    80016984:	708160ef          	jal	8002d08c <printf>
    80016988:	00041797          	auipc	a5,0x41
    8001698c:	6897c783          	lbu	a5,1673(a5) # 80058011 <excpt+0x1>
    80016990:	00019597          	auipc	a1,0x19
    80016994:	63858593          	addi	a1,a1,1592 # 8002ffc8 <__func__.0+0x2d8>
    80016998:	e789                	bnez	a5,800169a2 <amo_page_fault_1+0x1d6>
    8001699a:	00019597          	auipc	a1,0x19
    8001699e:	61e58593          	addi	a1,a1,1566 # 8002ffb8 <__func__.0+0x2c8>
    800169a2:	00019517          	auipc	a0,0x19
    800169a6:	66650513          	addi	a0,a0,1638 # 80030008 <__func__.0+0x318>
    800169aa:	6e2160ef          	jal	8002d08c <printf>
    800169ae:	00041797          	auipc	a5,0x41
    800169b2:	6637c783          	lbu	a5,1635(a5) # 80058011 <excpt+0x1>
    800169b6:	efa9                	bnez	a5,80016a10 <amo_page_fault_1+0x244>
    800169b8:	4529                	li	a0,10
    800169ba:	3c0150ef          	jal	8002bd7a <putchar>
    800169be:	c491                	beqz	s1,800169ca <amo_page_fault_1+0x1fe>
    800169c0:	00041797          	auipc	a5,0x41
    800169c4:	6517c783          	lbu	a5,1617(a5) # 80058011 <excpt+0x1>
    800169c8:	cb85                	beqz	a5,800169f8 <amo_page_fault_1+0x22c>
    800169ca:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    800169cc:	00019597          	auipc	a1,0x19
    800169d0:	5fc58593          	addi	a1,a1,1532 # 8002ffc8 <__func__.0+0x2d8>
    800169d4:	00019517          	auipc	a0,0x19
    800169d8:	69c50513          	addi	a0,a0,1692 # 80030070 <__func__.0+0x380>
    800169dc:	6b0160ef          	jal	8002d08c <printf>
    800169e0:	4511                	li	a0,4
    800169e2:	d26ea0ef          	jal	80000f08 <goto_priv>
    800169e6:	eedea0ef          	jal	800018d2 <reset_state>
}
    800169ea:	60e2                	ld	ra,24(sp)
    800169ec:	8522                	mv	a0,s0
    800169ee:	6442                	ld	s0,16(sp)
    800169f0:	64a2                	ld	s1,8(sp)
    800169f2:	6902                	ld	s2,0(sp)
    800169f4:	6105                	addi	sp,sp,32
    800169f6:	8082                	ret
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    800169f8:	4405                	li	s0,1
    TEST_END();
    800169fa:	00019597          	auipc	a1,0x19
    800169fe:	5be58593          	addi	a1,a1,1470 # 8002ffb8 <__func__.0+0x2c8>
    80016a02:	bfc9                	j	800169d4 <amo_page_fault_1+0x208>
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    80016a04:	00893483          	ld	s1,8(s2)
    80016a08:	14c5                	addi	s1,s1,-15
    80016a0a:	0014b493          	seqz	s1,s1
    80016a0e:	bf99                	j	80016964 <amo_page_fault_1+0x198>
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    80016a10:	00019517          	auipc	a0,0x19
    80016a14:	60050513          	addi	a0,a0,1536 # 80030010 <__func__.0+0x320>
    80016a18:	674160ef          	jal	8002d08c <printf>
    80016a1c:	02900513          	li	a0,41
    80016a20:	35a150ef          	jal	8002bd7a <putchar>
    80016a24:	bf51                	j	800169b8 <amo_page_fault_1+0x1ec>

0000000080016a26 <amo_page_fault_2>:

bool amo_page_fault_2(){
    80016a26:	1101                	addi	sp,sp,-32

    TEST_START();
    80016a28:	00018597          	auipc	a1,0x18
    80016a2c:	f1858593          	addi	a1,a1,-232 # 8002e940 <__func__.4>
    80016a30:	00019517          	auipc	a0,0x19
    80016a34:	5a850513          	addi	a0,a0,1448 # 8002ffd8 <__func__.0+0x2e8>
bool amo_page_fault_2(){
    80016a38:	ec06                	sd	ra,24(sp)
    80016a3a:	e822                	sd	s0,16(sp)
    80016a3c:	e426                	sd	s1,8(sp)
    TEST_START();
    80016a3e:	64e160ef          	jal	8002d08c <printf>
    80016a42:	4529                	li	a0,10
    80016a44:	336150ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80016a48:	450d                	li	a0,3
    80016a4a:	cbeea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016a4e:	b93e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016a52:	f73e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016a56:	d27e90ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80016a5a:	4511                	li	a0,4
    80016a5c:	cacea0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80016a60:	000407b7          	lui	a5,0x40
    80016a64:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80016a68:	450d                	li	a0,3
    80016a6a:	c9eea0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);    
    80016a6e:	4509                	li	a0,2
    80016a70:	bb8ea0ef          	jal	80000e28 <set_prev_priv>
    //执行amomin_d指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    80016a74:	b98ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80016a78:	000807b7          	lui	a5,0x80
    80016a7c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016a7e:	4701                	li	a4,0
    80016a80:	07b6                	slli	a5,a5,0xd
    80016a82:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80016a86:	08200593          	li	a1,130
    80016a8a:	0001f617          	auipc	a2,0x1f
    80016a8e:	c4660613          	addi	a2,a2,-954 # 800356d0 <__func__.0+0x59e0>
    80016a92:	00019517          	auipc	a0,0x19
    80016a96:	55e50513          	addi	a0,a0,1374 # 8002fff0 <__func__.0+0x300>
    80016a9a:	5f2160ef          	jal	8002d08c <printf>
    80016a9e:	00041797          	auipc	a5,0x41
    80016aa2:	5737c783          	lbu	a5,1395(a5) # 80058011 <excpt+0x1>
    80016aa6:	00041497          	auipc	s1,0x41
    80016aaa:	56a48493          	addi	s1,s1,1386 # 80058010 <excpt>
    80016aae:	00019597          	auipc	a1,0x19
    80016ab2:	51a58593          	addi	a1,a1,1306 # 8002ffc8 <__func__.0+0x2d8>
    80016ab6:	cf89                	beqz	a5,80016ad0 <amo_page_fault_2+0xaa>
    80016ab8:	6498                	ld	a4,8(s1)
    80016aba:	47bd                	li	a5,15
    80016abc:	00019597          	auipc	a1,0x19
    80016ac0:	4fc58593          	addi	a1,a1,1276 # 8002ffb8 <__func__.0+0x2c8>
    80016ac4:	00f70663          	beq	a4,a5,80016ad0 <amo_page_fault_2+0xaa>
    80016ac8:	00019597          	auipc	a1,0x19
    80016acc:	50058593          	addi	a1,a1,1280 # 8002ffc8 <__func__.0+0x2d8>
    80016ad0:	00019517          	auipc	a0,0x19
    80016ad4:	53850513          	addi	a0,a0,1336 # 80030008 <__func__.0+0x318>
    80016ad8:	5b4160ef          	jal	8002d08c <printf>
    80016adc:	00041797          	auipc	a5,0x41
    80016ae0:	5357c783          	lbu	a5,1333(a5) # 80058011 <excpt+0x1>
    80016ae4:	c789                	beqz	a5,80016aee <amo_page_fault_2+0xc8>
    80016ae6:	6498                	ld	a4,8(s1)
    80016ae8:	47bd                	li	a5,15
    80016aea:	00f70c63          	beq	a4,a5,80016b02 <amo_page_fault_2+0xdc>
    80016aee:	00019517          	auipc	a0,0x19
    80016af2:	52250513          	addi	a0,a0,1314 # 80030010 <__func__.0+0x320>
    80016af6:	596160ef          	jal	8002d08c <printf>
    80016afa:	02900513          	li	a0,41
    80016afe:	27c150ef          	jal	8002bd7a <putchar>
    80016b02:	4529                	li	a0,10
    80016b04:	276150ef          	jal	8002bd7a <putchar>
    80016b08:	00041417          	auipc	s0,0x41
    80016b0c:	50944403          	lbu	s0,1289(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80016b10:	00019597          	auipc	a1,0x19
    80016b14:	4b858593          	addi	a1,a1,1208 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80016b18:	cc11                	beqz	s0,80016b34 <amo_page_fault_2+0x10e>
    80016b1a:	6498                	ld	a4,8(s1)
    80016b1c:	47bd                	li	a5,15
    TEST_END();
    80016b1e:	00019597          	auipc	a1,0x19
    80016b22:	49a58593          	addi	a1,a1,1178 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80016b26:	00f70763          	beq	a4,a5,80016b34 <amo_page_fault_2+0x10e>
    80016b2a:	4401                	li	s0,0
    TEST_END();
    80016b2c:	00019597          	auipc	a1,0x19
    80016b30:	49c58593          	addi	a1,a1,1180 # 8002ffc8 <__func__.0+0x2d8>
    80016b34:	00019517          	auipc	a0,0x19
    80016b38:	53c50513          	addi	a0,a0,1340 # 80030070 <__func__.0+0x380>
    80016b3c:	550160ef          	jal	8002d08c <printf>
    80016b40:	4511                	li	a0,4
    80016b42:	bc6ea0ef          	jal	80000f08 <goto_priv>
    80016b46:	d8dea0ef          	jal	800018d2 <reset_state>
}
    80016b4a:	60e2                	ld	ra,24(sp)
    80016b4c:	8522                	mv	a0,s0
    80016b4e:	6442                	ld	s0,16(sp)
    80016b50:	64a2                	ld	s1,8(sp)
    80016b52:	6105                	addi	sp,sp,32
    80016b54:	8082                	ret

0000000080016b56 <amo_page_fault_3>:

bool amo_page_fault_3(){
    80016b56:	1141                	addi	sp,sp,-16

    TEST_START();
    80016b58:	00018597          	auipc	a1,0x18
    80016b5c:	e0058593          	addi	a1,a1,-512 # 8002e958 <__func__.3>
    80016b60:	00019517          	auipc	a0,0x19
    80016b64:	47850513          	addi	a0,a0,1144 # 8002ffd8 <__func__.0+0x2e8>
bool amo_page_fault_3(){
    80016b68:	e406                	sd	ra,8(sp)
    80016b6a:	e022                	sd	s0,0(sp)
    TEST_START();
    80016b6c:	520160ef          	jal	8002d08c <printf>
    80016b70:	4529                	li	a0,10
    80016b72:	208150ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80016b76:	450d                	li	a0,3
    80016b78:	b90ea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016b7c:	a65e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016b80:	e45e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016b84:	bf9e90ef          	jal	8000077c <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016b88:	4511                	li	a0,4
    80016b8a:	b7eea0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80016b8e:	000407b7          	lui	a5,0x40
    80016b92:	3007a073          	csrs	mstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80016b96:	450d                	li	a0,3
    80016b98:	b70ea0ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);   
    80016b9c:	4509                	li	a0,2
    80016b9e:	a8aea0ef          	jal	80000e28 <set_prev_priv>
    
    TEST_SETUP_EXCEPT();
    80016ba2:	a6aea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80016ba6:	000807b7          	lui	a5,0x80
    80016baa:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016bac:	4701                	li	a4,0
    80016bae:	07b6                	slli	a5,a5,0xd
    80016bb0:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016bb4:	08200593          	li	a1,130
    80016bb8:	0001f617          	auipc	a2,0x1f
    80016bbc:	b6060613          	addi	a2,a2,-1184 # 80035718 <__func__.0+0x5a28>
    80016bc0:	00019517          	auipc	a0,0x19
    80016bc4:	43050513          	addi	a0,a0,1072 # 8002fff0 <__func__.0+0x300>
    80016bc8:	4c4160ef          	jal	8002d08c <printf>
    80016bcc:	00041797          	auipc	a5,0x41
    80016bd0:	4457c783          	lbu	a5,1093(a5) # 80058011 <excpt+0x1>
    80016bd4:	00019597          	auipc	a1,0x19
    80016bd8:	3e458593          	addi	a1,a1,996 # 8002ffb8 <__func__.0+0x2c8>
    80016bdc:	c789                	beqz	a5,80016be6 <amo_page_fault_3+0x90>
    80016bde:	00019597          	auipc	a1,0x19
    80016be2:	3ea58593          	addi	a1,a1,1002 # 8002ffc8 <__func__.0+0x2d8>
    80016be6:	00019517          	auipc	a0,0x19
    80016bea:	42250513          	addi	a0,a0,1058 # 80030008 <__func__.0+0x318>
    80016bee:	49e160ef          	jal	8002d08c <printf>
    80016bf2:	00041797          	auipc	a5,0x41
    80016bf6:	41f7c783          	lbu	a5,1055(a5) # 80058011 <excpt+0x1>
    80016bfa:	e7a1                	bnez	a5,80016c42 <amo_page_fault_3+0xec>
    80016bfc:	4529                	li	a0,10
    80016bfe:	17c150ef          	jal	8002bd7a <putchar>
    80016c02:	00041797          	auipc	a5,0x41
    80016c06:	40f7c783          	lbu	a5,1039(a5) # 80058011 <excpt+0x1>
    80016c0a:	e795                	bnez	a5,80016c36 <amo_page_fault_3+0xe0>
    80016c0c:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016c0e:	00019597          	auipc	a1,0x19
    80016c12:	3aa58593          	addi	a1,a1,938 # 8002ffb8 <__func__.0+0x2c8>
    80016c16:	00019517          	auipc	a0,0x19
    80016c1a:	45a50513          	addi	a0,a0,1114 # 80030070 <__func__.0+0x380>
    80016c1e:	46e160ef          	jal	8002d08c <printf>
    80016c22:	4511                	li	a0,4
    80016c24:	ae4ea0ef          	jal	80000f08 <goto_priv>
    80016c28:	cabea0ef          	jal	800018d2 <reset_state>
}
    80016c2c:	60a2                	ld	ra,8(sp)
    80016c2e:	8522                	mv	a0,s0
    80016c30:	6402                	ld	s0,0(sp)
    80016c32:	0141                	addi	sp,sp,16
    80016c34:	8082                	ret
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016c36:	4401                	li	s0,0
    TEST_END();
    80016c38:	00019597          	auipc	a1,0x19
    80016c3c:	39058593          	addi	a1,a1,912 # 8002ffc8 <__func__.0+0x2d8>
    80016c40:	bfd9                	j	80016c16 <amo_page_fault_3+0xc0>
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016c42:	00019517          	auipc	a0,0x19
    80016c46:	3ce50513          	addi	a0,a0,974 # 80030010 <__func__.0+0x320>
    80016c4a:	442160ef          	jal	8002d08c <printf>
    80016c4e:	02900513          	li	a0,41
    80016c52:	128150ef          	jal	8002bd7a <putchar>
    80016c56:	b75d                	j	80016bfc <amo_page_fault_3+0xa6>

0000000080016c58 <amo_page_fault_4>:

bool amo_page_fault_4(){
    80016c58:	1101                	addi	sp,sp,-32

    TEST_START();
    80016c5a:	00018597          	auipc	a1,0x18
    80016c5e:	d1658593          	addi	a1,a1,-746 # 8002e970 <__func__.2>
    80016c62:	00019517          	auipc	a0,0x19
    80016c66:	37650513          	addi	a0,a0,886 # 8002ffd8 <__func__.0+0x2e8>
bool amo_page_fault_4(){
    80016c6a:	ec06                	sd	ra,24(sp)
    80016c6c:	e822                	sd	s0,16(sp)
    80016c6e:	e426                	sd	s1,8(sp)
    80016c70:	e04a                	sd	s2,0(sp)
    TEST_START();
    80016c72:	41a160ef          	jal	8002d08c <printf>
    80016c76:	4529                	li	a0,10
    80016c78:	102150ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80016c7c:	450d                	li	a0,3
    80016c7e:	a8aea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016c82:	95fe90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016c86:	d3fe90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016c8a:	af3e90ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80016c8e:	4509                	li	a0,2
    80016c90:	a78ea0ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80016c94:	978ea0ef          	jal	80000e0c <test_setup_except_function>
    80016c98:	deadc7b7          	lui	a5,0xdeadc
    80016c9c:	40019737          	lui	a4,0x40019
    80016ca0:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80016ca4:	070a                	slli	a4,a4,0x2
    80016ca6:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016caa:	08200593          	li	a1,130
    80016cae:	0001f617          	auipc	a2,0x1f
    80016cb2:	ab260613          	addi	a2,a2,-1358 # 80035760 <__func__.0+0x5a70>
    80016cb6:	00019517          	auipc	a0,0x19
    80016cba:	33a50513          	addi	a0,a0,826 # 8002fff0 <__func__.0+0x300>
    value = amoadd_w(addr,value);
    80016cbe:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016cc2:	3ca160ef          	jal	8002d08c <printf>
    80016cc6:	00041797          	auipc	a5,0x41
    80016cca:	34b7c783          	lbu	a5,843(a5) # 80058011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80016cce:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016cd0:	00041917          	auipc	s2,0x41
    80016cd4:	34090913          	addi	s2,s2,832 # 80058010 <excpt>
    80016cd8:	00019597          	auipc	a1,0x19
    80016cdc:	2f058593          	addi	a1,a1,752 # 8002ffc8 <__func__.0+0x2d8>
    80016ce0:	cf91                	beqz	a5,80016cfc <amo_page_fault_4+0xa4>
    80016ce2:	00893703          	ld	a4,8(s2)
    80016ce6:	47bd                	li	a5,15
    80016ce8:	00019597          	auipc	a1,0x19
    80016cec:	2d058593          	addi	a1,a1,720 # 8002ffb8 <__func__.0+0x2c8>
    80016cf0:	00f70663          	beq	a4,a5,80016cfc <amo_page_fault_4+0xa4>
    80016cf4:	00019597          	auipc	a1,0x19
    80016cf8:	2d458593          	addi	a1,a1,724 # 8002ffc8 <__func__.0+0x2d8>
    80016cfc:	00019517          	auipc	a0,0x19
    80016d00:	30c50513          	addi	a0,a0,780 # 80030008 <__func__.0+0x318>
    80016d04:	388160ef          	jal	8002d08c <printf>
    80016d08:	00041797          	auipc	a5,0x41
    80016d0c:	3097c783          	lbu	a5,777(a5) # 80058011 <excpt+0x1>
    80016d10:	c791                	beqz	a5,80016d1c <amo_page_fault_4+0xc4>
    80016d12:	00893703          	ld	a4,8(s2)
    80016d16:	47bd                	li	a5,15
    80016d18:	00f70c63          	beq	a4,a5,80016d30 <amo_page_fault_4+0xd8>
    80016d1c:	00019517          	auipc	a0,0x19
    80016d20:	2f450513          	addi	a0,a0,756 # 80030010 <__func__.0+0x320>
    80016d24:	368160ef          	jal	8002d08c <printf>
    80016d28:	02900513          	li	a0,41
    80016d2c:	04e150ef          	jal	8002bd7a <putchar>
    80016d30:	4529                	li	a0,10
    80016d32:	048150ef          	jal	8002bd7a <putchar>
    80016d36:	00041797          	auipc	a5,0x41
    80016d3a:	2db7c783          	lbu	a5,731(a5) # 80058011 <excpt+0x1>
    80016d3e:	4481                	li	s1,0
    80016d40:	c791                	beqz	a5,80016d4c <amo_page_fault_4+0xf4>
    80016d42:	00893483          	ld	s1,8(s2)
    80016d46:	14c5                	addi	s1,s1,-15
    80016d48:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80016d4c:	8c0ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80016d50:	000807b7          	lui	a5,0x80
    80016d54:	0795                	addi	a5,a5,5 # 80005 <_test_table_size+0x80004>
    80016d56:	07b6                	slli	a5,a5,0xd
    80016d58:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GURWX);

    value = amoand_d(addr,value);

    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80016d5c:	08200593          	li	a1,130
    80016d60:	0001f617          	auipc	a2,0x1f
    80016d64:	a3860613          	addi	a2,a2,-1480 # 80035798 <__func__.0+0x5aa8>
    80016d68:	00019517          	auipc	a0,0x19
    80016d6c:	28850513          	addi	a0,a0,648 # 8002fff0 <__func__.0+0x300>
    80016d70:	31c160ef          	jal	8002d08c <printf>
    80016d74:	00041797          	auipc	a5,0x41
    80016d78:	29d7c783          	lbu	a5,669(a5) # 80058011 <excpt+0x1>
    80016d7c:	00019597          	auipc	a1,0x19
    80016d80:	24c58593          	addi	a1,a1,588 # 8002ffc8 <__func__.0+0x2d8>
    80016d84:	cf91                	beqz	a5,80016da0 <amo_page_fault_4+0x148>
    80016d86:	00893703          	ld	a4,8(s2)
    80016d8a:	47bd                	li	a5,15
    80016d8c:	00019597          	auipc	a1,0x19
    80016d90:	22c58593          	addi	a1,a1,556 # 8002ffb8 <__func__.0+0x2c8>
    80016d94:	00f70663          	beq	a4,a5,80016da0 <amo_page_fault_4+0x148>
    80016d98:	00019597          	auipc	a1,0x19
    80016d9c:	23058593          	addi	a1,a1,560 # 8002ffc8 <__func__.0+0x2d8>
    80016da0:	00019517          	auipc	a0,0x19
    80016da4:	26850513          	addi	a0,a0,616 # 80030008 <__func__.0+0x318>
    80016da8:	2e4160ef          	jal	8002d08c <printf>
    80016dac:	00041797          	auipc	a5,0x41
    80016db0:	2657c783          	lbu	a5,613(a5) # 80058011 <excpt+0x1>
    80016db4:	c791                	beqz	a5,80016dc0 <amo_page_fault_4+0x168>
    80016db6:	00893703          	ld	a4,8(s2)
    80016dba:	47bd                	li	a5,15
    80016dbc:	00f70c63          	beq	a4,a5,80016dd4 <amo_page_fault_4+0x17c>
    80016dc0:	00019517          	auipc	a0,0x19
    80016dc4:	25050513          	addi	a0,a0,592 # 80030010 <__func__.0+0x320>
    80016dc8:	2c4160ef          	jal	8002d08c <printf>
    80016dcc:	02900513          	li	a0,41
    80016dd0:	7ab140ef          	jal	8002bd7a <putchar>
    80016dd4:	4529                	li	a0,10
    80016dd6:	7a5140ef          	jal	8002bd7a <putchar>
    80016dda:	c499                	beqz	s1,80016de8 <amo_page_fault_4+0x190>
    80016ddc:	00041797          	auipc	a5,0x41
    80016de0:	2357c783          	lbu	a5,565(a5) # 80058011 <excpt+0x1>
    80016de4:	4481                	li	s1,0
    80016de6:	e3cd                	bnez	a5,80016e88 <amo_page_fault_4+0x230>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80016de8:	824ea0ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80016dec:	4785                	li	a5,1
    80016dee:	1782                	slli	a5,a5,0x20
    80016df0:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016df4:	08200593          	li	a1,130
    80016df8:	0001f617          	auipc	a2,0x1f
    80016dfc:	9d060613          	addi	a2,a2,-1584 # 800357c8 <__func__.0+0x5ad8>
    80016e00:	00019517          	auipc	a0,0x19
    80016e04:	1f050513          	addi	a0,a0,496 # 8002fff0 <__func__.0+0x300>
    80016e08:	284160ef          	jal	8002d08c <printf>
    80016e0c:	00041797          	auipc	a5,0x41
    80016e10:	2057c783          	lbu	a5,517(a5) # 80058011 <excpt+0x1>
    80016e14:	00019597          	auipc	a1,0x19
    80016e18:	1b458593          	addi	a1,a1,436 # 8002ffc8 <__func__.0+0x2d8>
    80016e1c:	e789                	bnez	a5,80016e26 <amo_page_fault_4+0x1ce>
    80016e1e:	00019597          	auipc	a1,0x19
    80016e22:	19a58593          	addi	a1,a1,410 # 8002ffb8 <__func__.0+0x2c8>
    80016e26:	00019517          	auipc	a0,0x19
    80016e2a:	1e250513          	addi	a0,a0,482 # 80030008 <__func__.0+0x318>
    80016e2e:	25e160ef          	jal	8002d08c <printf>
    80016e32:	00041797          	auipc	a5,0x41
    80016e36:	1df7c783          	lbu	a5,479(a5) # 80058011 <excpt+0x1>
    80016e3a:	efa9                	bnez	a5,80016e94 <amo_page_fault_4+0x23c>
    80016e3c:	4529                	li	a0,10
    80016e3e:	73d140ef          	jal	8002bd7a <putchar>
    80016e42:	c491                	beqz	s1,80016e4e <amo_page_fault_4+0x1f6>
    80016e44:	00041797          	auipc	a5,0x41
    80016e48:	1cd7c783          	lbu	a5,461(a5) # 80058011 <excpt+0x1>
    80016e4c:	cb85                	beqz	a5,80016e7c <amo_page_fault_4+0x224>
    80016e4e:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80016e50:	00019597          	auipc	a1,0x19
    80016e54:	17858593          	addi	a1,a1,376 # 8002ffc8 <__func__.0+0x2d8>
    80016e58:	00019517          	auipc	a0,0x19
    80016e5c:	21850513          	addi	a0,a0,536 # 80030070 <__func__.0+0x380>
    80016e60:	22c160ef          	jal	8002d08c <printf>
    80016e64:	4511                	li	a0,4
    80016e66:	8a2ea0ef          	jal	80000f08 <goto_priv>
    80016e6a:	a69ea0ef          	jal	800018d2 <reset_state>
}
    80016e6e:	60e2                	ld	ra,24(sp)
    80016e70:	8522                	mv	a0,s0
    80016e72:	6442                	ld	s0,16(sp)
    80016e74:	64a2                	ld	s1,8(sp)
    80016e76:	6902                	ld	s2,0(sp)
    80016e78:	6105                	addi	sp,sp,32
    80016e7a:	8082                	ret
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016e7c:	4405                	li	s0,1
    TEST_END();
    80016e7e:	00019597          	auipc	a1,0x19
    80016e82:	13a58593          	addi	a1,a1,314 # 8002ffb8 <__func__.0+0x2c8>
    80016e86:	bfc9                	j	80016e58 <amo_page_fault_4+0x200>
    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80016e88:	00893483          	ld	s1,8(s2)
    80016e8c:	14c5                	addi	s1,s1,-15
    80016e8e:	0014b493          	seqz	s1,s1
    80016e92:	bf99                	j	80016de8 <amo_page_fault_4+0x190>
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016e94:	00019517          	auipc	a0,0x19
    80016e98:	17c50513          	addi	a0,a0,380 # 80030010 <__func__.0+0x320>
    80016e9c:	1f0160ef          	jal	8002d08c <printf>
    80016ea0:	02900513          	li	a0,41
    80016ea4:	6d7140ef          	jal	8002bd7a <putchar>
    80016ea8:	bf51                	j	80016e3c <amo_page_fault_4+0x1e4>

0000000080016eaa <amo_page_fault_5>:

bool amo_page_fault_5(){
    80016eaa:	1101                	addi	sp,sp,-32

    TEST_START();
    80016eac:	00018597          	auipc	a1,0x18
    80016eb0:	adc58593          	addi	a1,a1,-1316 # 8002e988 <__func__.1>
    80016eb4:	00019517          	auipc	a0,0x19
    80016eb8:	12450513          	addi	a0,a0,292 # 8002ffd8 <__func__.0+0x2e8>
bool amo_page_fault_5(){
    80016ebc:	ec06                	sd	ra,24(sp)
    80016ebe:	e822                	sd	s0,16(sp)
    80016ec0:	e426                	sd	s1,8(sp)
    TEST_START();
    80016ec2:	1ca160ef          	jal	8002d08c <printf>
    80016ec6:	4529                	li	a0,10
    80016ec8:	6b3140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80016ecc:	450d                	li	a0,3
    80016ece:	83aea0ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016ed2:	f0ee90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016ed6:	aefe90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80016eda:	8a3e90ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80016ede:	4511                	li	a0,4
    80016ee0:	828ea0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80016ee4:	000407b7          	lui	a5,0x40
    80016ee8:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80016eec:	4509                	li	a0,2
    80016eee:	81aea0ef          	jal	80000f08 <goto_priv>
   
    //执行amomin_d指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    80016ef2:	f1be90ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80016ef6:	000807b7          	lui	a5,0x80
    80016efa:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016efc:	4701                	li	a4,0
    80016efe:	07b6                	slli	a5,a5,0xd
    80016f00:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016f04:	08200593          	li	a1,130
    80016f08:	0001f617          	auipc	a2,0x1f
    80016f0c:	8f860613          	addi	a2,a2,-1800 # 80035800 <__func__.0+0x5b10>
    80016f10:	00019517          	auipc	a0,0x19
    80016f14:	0e050513          	addi	a0,a0,224 # 8002fff0 <__func__.0+0x300>
    80016f18:	174160ef          	jal	8002d08c <printf>
    80016f1c:	00041797          	auipc	a5,0x41
    80016f20:	0f57c783          	lbu	a5,245(a5) # 80058011 <excpt+0x1>
    80016f24:	00041497          	auipc	s1,0x41
    80016f28:	0ec48493          	addi	s1,s1,236 # 80058010 <excpt>
    80016f2c:	00019597          	auipc	a1,0x19
    80016f30:	09c58593          	addi	a1,a1,156 # 8002ffc8 <__func__.0+0x2d8>
    80016f34:	cf89                	beqz	a5,80016f4e <amo_page_fault_5+0xa4>
    80016f36:	6498                	ld	a4,8(s1)
    80016f38:	47bd                	li	a5,15
    80016f3a:	00019597          	auipc	a1,0x19
    80016f3e:	07e58593          	addi	a1,a1,126 # 8002ffb8 <__func__.0+0x2c8>
    80016f42:	00f70663          	beq	a4,a5,80016f4e <amo_page_fault_5+0xa4>
    80016f46:	00019597          	auipc	a1,0x19
    80016f4a:	08258593          	addi	a1,a1,130 # 8002ffc8 <__func__.0+0x2d8>
    80016f4e:	00019517          	auipc	a0,0x19
    80016f52:	0ba50513          	addi	a0,a0,186 # 80030008 <__func__.0+0x318>
    80016f56:	136160ef          	jal	8002d08c <printf>
    80016f5a:	00041797          	auipc	a5,0x41
    80016f5e:	0b77c783          	lbu	a5,183(a5) # 80058011 <excpt+0x1>
    80016f62:	c789                	beqz	a5,80016f6c <amo_page_fault_5+0xc2>
    80016f64:	6498                	ld	a4,8(s1)
    80016f66:	47bd                	li	a5,15
    80016f68:	00f70c63          	beq	a4,a5,80016f80 <amo_page_fault_5+0xd6>
    80016f6c:	00019517          	auipc	a0,0x19
    80016f70:	0a450513          	addi	a0,a0,164 # 80030010 <__func__.0+0x320>
    80016f74:	118160ef          	jal	8002d08c <printf>
    80016f78:	02900513          	li	a0,41
    80016f7c:	5ff140ef          	jal	8002bd7a <putchar>
    80016f80:	4529                	li	a0,10
    80016f82:	5f9140ef          	jal	8002bd7a <putchar>
    80016f86:	00041417          	auipc	s0,0x41
    80016f8a:	08b44403          	lbu	s0,139(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80016f8e:	00019597          	auipc	a1,0x19
    80016f92:	03a58593          	addi	a1,a1,58 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016f96:	cc11                	beqz	s0,80016fb2 <amo_page_fault_5+0x108>
    80016f98:	6498                	ld	a4,8(s1)
    80016f9a:	47bd                	li	a5,15
    TEST_END();
    80016f9c:	00019597          	auipc	a1,0x19
    80016fa0:	01c58593          	addi	a1,a1,28 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016fa4:	00f70763          	beq	a4,a5,80016fb2 <amo_page_fault_5+0x108>
    80016fa8:	4401                	li	s0,0
    TEST_END();
    80016faa:	00019597          	auipc	a1,0x19
    80016fae:	01e58593          	addi	a1,a1,30 # 8002ffc8 <__func__.0+0x2d8>
    80016fb2:	00019517          	auipc	a0,0x19
    80016fb6:	0be50513          	addi	a0,a0,190 # 80030070 <__func__.0+0x380>
    80016fba:	0d2160ef          	jal	8002d08c <printf>
    80016fbe:	4511                	li	a0,4
    80016fc0:	f49e90ef          	jal	80000f08 <goto_priv>
    80016fc4:	90fea0ef          	jal	800018d2 <reset_state>
}
    80016fc8:	60e2                	ld	ra,24(sp)
    80016fca:	8522                	mv	a0,s0
    80016fcc:	6442                	ld	s0,16(sp)
    80016fce:	64a2                	ld	s1,8(sp)
    80016fd0:	6105                	addi	sp,sp,32
    80016fd2:	8082                	ret

0000000080016fd4 <amo_page_fault_6>:

bool amo_page_fault_6(){
    80016fd4:	1141                	addi	sp,sp,-16

    TEST_START();
    80016fd6:	00018597          	auipc	a1,0x18
    80016fda:	9ca58593          	addi	a1,a1,-1590 # 8002e9a0 <__func__.0>
    80016fde:	00019517          	auipc	a0,0x19
    80016fe2:	ffa50513          	addi	a0,a0,-6 # 8002ffd8 <__func__.0+0x2e8>
bool amo_page_fault_6(){
    80016fe6:	e406                	sd	ra,8(sp)
    80016fe8:	e022                	sd	s0,0(sp)
    TEST_START();
    80016fea:	0a2160ef          	jal	8002d08c <printf>
    80016fee:	4529                	li	a0,10
    80016ff0:	58b140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80016ff4:	450d                	li	a0,3
    80016ff6:	f13e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80016ffa:	de6e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016ffe:	9c7e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017002:	f7ae90ef          	jal	8000077c <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80017006:	4511                	li	a0,4
    80017008:	f01e90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001700c:	000407b7          	lui	a5,0x40
    80017010:	2007a073          	csrs	vsstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_VS);   
    80017014:	4509                	li	a0,2
    80017016:	ef3e90ef          	jal	80000f08 <goto_priv>
    
    TEST_SETUP_EXCEPT();
    8001701a:	df3e90ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8001701e:	000807b7          	lui	a5,0x80
    80017022:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017024:	4701                	li	a4,0
    80017026:	07b6                	slli	a5,a5,0xd
    80017028:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    8001702c:	08200593          	li	a1,130
    80017030:	0001f617          	auipc	a2,0x1f
    80017034:	82060613          	addi	a2,a2,-2016 # 80035850 <__func__.0+0x5b60>
    80017038:	00019517          	auipc	a0,0x19
    8001703c:	fb850513          	addi	a0,a0,-72 # 8002fff0 <__func__.0+0x300>
    80017040:	04c160ef          	jal	8002d08c <printf>
    80017044:	00041797          	auipc	a5,0x41
    80017048:	fcd7c783          	lbu	a5,-51(a5) # 80058011 <excpt+0x1>
    8001704c:	00019597          	auipc	a1,0x19
    80017050:	f6c58593          	addi	a1,a1,-148 # 8002ffb8 <__func__.0+0x2c8>
    80017054:	c789                	beqz	a5,8001705e <amo_page_fault_6+0x8a>
    80017056:	00019597          	auipc	a1,0x19
    8001705a:	f7258593          	addi	a1,a1,-142 # 8002ffc8 <__func__.0+0x2d8>
    8001705e:	00019517          	auipc	a0,0x19
    80017062:	faa50513          	addi	a0,a0,-86 # 80030008 <__func__.0+0x318>
    80017066:	026160ef          	jal	8002d08c <printf>
    8001706a:	00041797          	auipc	a5,0x41
    8001706e:	fa77c783          	lbu	a5,-89(a5) # 80058011 <excpt+0x1>
    80017072:	e7a1                	bnez	a5,800170ba <amo_page_fault_6+0xe6>
    80017074:	4529                	li	a0,10
    80017076:	505140ef          	jal	8002bd7a <putchar>
    8001707a:	00041797          	auipc	a5,0x41
    8001707e:	f977c783          	lbu	a5,-105(a5) # 80058011 <excpt+0x1>
    80017082:	e795                	bnez	a5,800170ae <amo_page_fault_6+0xda>
    80017084:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017086:	00019597          	auipc	a1,0x19
    8001708a:	f3258593          	addi	a1,a1,-206 # 8002ffb8 <__func__.0+0x2c8>
    8001708e:	00019517          	auipc	a0,0x19
    80017092:	fe250513          	addi	a0,a0,-30 # 80030070 <__func__.0+0x380>
    80017096:	7f7150ef          	jal	8002d08c <printf>
    8001709a:	4511                	li	a0,4
    8001709c:	e6de90ef          	jal	80000f08 <goto_priv>
    800170a0:	833ea0ef          	jal	800018d2 <reset_state>
}
    800170a4:	60a2                	ld	ra,8(sp)
    800170a6:	8522                	mv	a0,s0
    800170a8:	6402                	ld	s0,0(sp)
    800170aa:	0141                	addi	sp,sp,16
    800170ac:	8082                	ret
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    800170ae:	4401                	li	s0,0
    TEST_END();
    800170b0:	00019597          	auipc	a1,0x19
    800170b4:	f1858593          	addi	a1,a1,-232 # 8002ffc8 <__func__.0+0x2d8>
    800170b8:	bfd9                	j	8001708e <amo_page_fault_6+0xba>
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    800170ba:	00019517          	auipc	a0,0x19
    800170be:	f5650513          	addi	a0,a0,-170 # 80030010 <__func__.0+0x320>
    800170c2:	7cb150ef          	jal	8002d08c <printf>
    800170c6:	02900513          	li	a0,41
    800170ca:	4b1140ef          	jal	8002bd7a <putchar>
    800170ce:	b75d                	j	80017074 <amo_page_fault_6+0xa0>

00000000800170d0 <load_guest_page_fault_1>:
 #include <rvh_test.h>
#include <page_tables.h>

bool load_guest_page_fault_1(){
    800170d0:	1101                	addi	sp,sp,-32

    TEST_START();
    800170d2:	00018597          	auipc	a1,0x18
    800170d6:	8e658593          	addi	a1,a1,-1818 # 8002e9b8 <__func__.37>
    800170da:	00019517          	auipc	a0,0x19
    800170de:	efe50513          	addi	a0,a0,-258 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_1(){
    800170e2:	ec06                	sd	ra,24(sp)
    800170e4:	e822                	sd	s0,16(sp)
    800170e6:	e426                	sd	s1,8(sp)
    TEST_START();
    800170e8:	7a5150ef          	jal	8002d08c <printf>
    800170ec:	4529                	li	a0,10
    800170ee:	48d140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800170f2:	450d                	li	a0,3
    800170f4:	e15e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800170f8:	ce8e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800170fc:	8c9e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017100:	e7ce90ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80017104:	450d                	li	a0,3
    80017106:	e03e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001710a:	4509                	li	a0,2
    8001710c:	d1de90ef          	jal	80000e28 <set_prev_priv>

    //执行取指相关指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80017110:	cfde90ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80017114:	001007b7          	lui	a5,0x100
    80017118:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001711c:	07b2                	slli	a5,a5,0xc
    8001711e:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = hs_page_base(VSRWX_GI);
    hlvd(vaddr);
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017122:	08200593          	li	a1,130
    80017126:	0001e617          	auipc	a2,0x1e
    8001712a:	77260613          	addi	a2,a2,1906 # 80035898 <__func__.0+0x5ba8>
    8001712e:	00019517          	auipc	a0,0x19
    80017132:	ec250513          	addi	a0,a0,-318 # 8002fff0 <__func__.0+0x300>
    80017136:	757150ef          	jal	8002d08c <printf>
    8001713a:	00041797          	auipc	a5,0x41
    8001713e:	ed77c783          	lbu	a5,-297(a5) # 80058011 <excpt+0x1>
    80017142:	00041497          	auipc	s1,0x41
    80017146:	ece48493          	addi	s1,s1,-306 # 80058010 <excpt>
    8001714a:	00019597          	auipc	a1,0x19
    8001714e:	e7e58593          	addi	a1,a1,-386 # 8002ffc8 <__func__.0+0x2d8>
    80017152:	cf89                	beqz	a5,8001716c <load_guest_page_fault_1+0x9c>
    80017154:	6498                	ld	a4,8(s1)
    80017156:	47d5                	li	a5,21
    80017158:	00019597          	auipc	a1,0x19
    8001715c:	e6058593          	addi	a1,a1,-416 # 8002ffb8 <__func__.0+0x2c8>
    80017160:	00f70663          	beq	a4,a5,8001716c <load_guest_page_fault_1+0x9c>
    80017164:	00019597          	auipc	a1,0x19
    80017168:	e6458593          	addi	a1,a1,-412 # 8002ffc8 <__func__.0+0x2d8>
    8001716c:	00019517          	auipc	a0,0x19
    80017170:	e9c50513          	addi	a0,a0,-356 # 80030008 <__func__.0+0x318>
    80017174:	719150ef          	jal	8002d08c <printf>
    80017178:	00041797          	auipc	a5,0x41
    8001717c:	e997c783          	lbu	a5,-359(a5) # 80058011 <excpt+0x1>
    80017180:	c789                	beqz	a5,8001718a <load_guest_page_fault_1+0xba>
    80017182:	6498                	ld	a4,8(s1)
    80017184:	47d5                	li	a5,21
    80017186:	00f70c63          	beq	a4,a5,8001719e <load_guest_page_fault_1+0xce>
    8001718a:	00019517          	auipc	a0,0x19
    8001718e:	e8650513          	addi	a0,a0,-378 # 80030010 <__func__.0+0x320>
    80017192:	6fb150ef          	jal	8002d08c <printf>
    80017196:	02900513          	li	a0,41
    8001719a:	3e1140ef          	jal	8002bd7a <putchar>
    8001719e:	4529                	li	a0,10
    800171a0:	3db140ef          	jal	8002bd7a <putchar>
    800171a4:	00041797          	auipc	a5,0x41
    800171a8:	e6d7c783          	lbu	a5,-403(a5) # 80058011 <excpt+0x1>
    800171ac:	4401                	li	s0,0
    800171ae:	c789                	beqz	a5,800171b8 <load_guest_page_fault_1+0xe8>
    800171b0:	6480                	ld	s0,8(s1)
    800171b2:	142d                	addi	s0,s0,-21
    800171b4:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LGPF
    );


    //执行hlvb指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    800171b8:	c55e90ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    800171bc:	001007b7          	lui	a5,0x100
    800171c0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800171c4:	07b2                	slli	a5,a5,0xc
    800171c6:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSRWX_GI);

    hlvb(vaddr);   
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800171ca:	08200593          	li	a1,130
    800171ce:	0001e617          	auipc	a2,0x1e
    800171d2:	71a60613          	addi	a2,a2,1818 # 800358e8 <__func__.0+0x5bf8>
    800171d6:	00019517          	auipc	a0,0x19
    800171da:	e1a50513          	addi	a0,a0,-486 # 8002fff0 <__func__.0+0x300>
    800171de:	6af150ef          	jal	8002d08c <printf>
    800171e2:	00041797          	auipc	a5,0x41
    800171e6:	e2f7c783          	lbu	a5,-465(a5) # 80058011 <excpt+0x1>
    800171ea:	00019597          	auipc	a1,0x19
    800171ee:	dde58593          	addi	a1,a1,-546 # 8002ffc8 <__func__.0+0x2d8>
    800171f2:	cf89                	beqz	a5,8001720c <load_guest_page_fault_1+0x13c>
    800171f4:	6498                	ld	a4,8(s1)
    800171f6:	47d5                	li	a5,21
    800171f8:	00019597          	auipc	a1,0x19
    800171fc:	dc058593          	addi	a1,a1,-576 # 8002ffb8 <__func__.0+0x2c8>
    80017200:	00f70663          	beq	a4,a5,8001720c <load_guest_page_fault_1+0x13c>
    80017204:	00019597          	auipc	a1,0x19
    80017208:	dc458593          	addi	a1,a1,-572 # 8002ffc8 <__func__.0+0x2d8>
    8001720c:	00019517          	auipc	a0,0x19
    80017210:	dfc50513          	addi	a0,a0,-516 # 80030008 <__func__.0+0x318>
    80017214:	679150ef          	jal	8002d08c <printf>
    80017218:	00041797          	auipc	a5,0x41
    8001721c:	df97c783          	lbu	a5,-519(a5) # 80058011 <excpt+0x1>
    80017220:	c789                	beqz	a5,8001722a <load_guest_page_fault_1+0x15a>
    80017222:	6498                	ld	a4,8(s1)
    80017224:	47d5                	li	a5,21
    80017226:	00f70c63          	beq	a4,a5,8001723e <load_guest_page_fault_1+0x16e>
    8001722a:	00019517          	auipc	a0,0x19
    8001722e:	de650513          	addi	a0,a0,-538 # 80030010 <__func__.0+0x320>
    80017232:	65b150ef          	jal	8002d08c <printf>
    80017236:	02900513          	li	a0,41
    8001723a:	341140ef          	jal	8002bd7a <putchar>
    8001723e:	4529                	li	a0,10
    80017240:	33b140ef          	jal	8002bd7a <putchar>
    80017244:	c015                	beqz	s0,80017268 <load_guest_page_fault_1+0x198>
    80017246:	00041417          	auipc	s0,0x41
    8001724a:	dcb44403          	lbu	s0,-565(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001724e:	00019597          	auipc	a1,0x19
    80017252:	d7a58593          	addi	a1,a1,-646 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80017256:	cc11                	beqz	s0,80017272 <load_guest_page_fault_1+0x1a2>
    80017258:	6498                	ld	a4,8(s1)
    8001725a:	47d5                	li	a5,21
    TEST_END();
    8001725c:	00019597          	auipc	a1,0x19
    80017260:	d5c58593          	addi	a1,a1,-676 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80017264:	00f70763          	beq	a4,a5,80017272 <load_guest_page_fault_1+0x1a2>
    80017268:	4401                	li	s0,0
    TEST_END();
    8001726a:	00019597          	auipc	a1,0x19
    8001726e:	d5e58593          	addi	a1,a1,-674 # 8002ffc8 <__func__.0+0x2d8>
    80017272:	00019517          	auipc	a0,0x19
    80017276:	dfe50513          	addi	a0,a0,-514 # 80030070 <__func__.0+0x380>
    8001727a:	613150ef          	jal	8002d08c <printf>
    8001727e:	4511                	li	a0,4
    80017280:	c89e90ef          	jal	80000f08 <goto_priv>
    80017284:	e4eea0ef          	jal	800018d2 <reset_state>
}
    80017288:	60e2                	ld	ra,24(sp)
    8001728a:	8522                	mv	a0,s0
    8001728c:	6442                	ld	s0,16(sp)
    8001728e:	64a2                	ld	s1,8(sp)
    80017290:	6105                	addi	sp,sp,32
    80017292:	8082                	ret

0000000080017294 <load_guest_page_fault_2>:

bool load_guest_page_fault_2(){
    80017294:	1101                	addi	sp,sp,-32

    TEST_START();
    80017296:	00017597          	auipc	a1,0x17
    8001729a:	73a58593          	addi	a1,a1,1850 # 8002e9d0 <__func__.35>
    8001729e:	00019517          	auipc	a0,0x19
    800172a2:	d3a50513          	addi	a0,a0,-710 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_2(){
    800172a6:	ec06                	sd	ra,24(sp)
    800172a8:	e822                	sd	s0,16(sp)
    800172aa:	e426                	sd	s1,8(sp)
    TEST_START();
    800172ac:	5e1150ef          	jal	8002d08c <printf>
    800172b0:	4529                	li	a0,10
    800172b2:	2c9140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800172b6:	450d                	li	a0,3
    800172b8:	c51e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800172bc:	b24e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800172c0:	f04e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800172c4:	cb8e90ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800172c8:	450d                	li	a0,3
    800172ca:	c3fe90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800172ce:	4509                	li	a0,2
    800172d0:	b59e90ef          	jal	80000e28 <set_prev_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800172d4:	b39e90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800172d8:	000807b7          	lui	a5,0x80
    800172dc:	1007b073          	csrc	sstatus,a5
    asm volatile(
    800172e0:	001007b7          	lui	a5,0x100
    800172e4:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800172e8:	07b2                	slli	a5,a5,0xc
    800172ea:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800172ee:	08200593          	li	a1,130
    800172f2:	0001e617          	auipc	a2,0x1e
    800172f6:	65660613          	addi	a2,a2,1622 # 80035948 <__func__.0+0x5c58>
    800172fa:	00019517          	auipc	a0,0x19
    800172fe:	cf650513          	addi	a0,a0,-778 # 8002fff0 <__func__.0+0x300>
    80017302:	58b150ef          	jal	8002d08c <printf>
    80017306:	00041797          	auipc	a5,0x41
    8001730a:	d0b7c783          	lbu	a5,-757(a5) # 80058011 <excpt+0x1>
    8001730e:	00041497          	auipc	s1,0x41
    80017312:	d0248493          	addi	s1,s1,-766 # 80058010 <excpt>
    80017316:	00019597          	auipc	a1,0x19
    8001731a:	cb258593          	addi	a1,a1,-846 # 8002ffc8 <__func__.0+0x2d8>
    8001731e:	cf89                	beqz	a5,80017338 <load_guest_page_fault_2+0xa4>
    80017320:	6498                	ld	a4,8(s1)
    80017322:	47d5                	li	a5,21
    80017324:	00019597          	auipc	a1,0x19
    80017328:	c9458593          	addi	a1,a1,-876 # 8002ffb8 <__func__.0+0x2c8>
    8001732c:	00f70663          	beq	a4,a5,80017338 <load_guest_page_fault_2+0xa4>
    80017330:	00019597          	auipc	a1,0x19
    80017334:	c9858593          	addi	a1,a1,-872 # 8002ffc8 <__func__.0+0x2d8>
    80017338:	00019517          	auipc	a0,0x19
    8001733c:	cd050513          	addi	a0,a0,-816 # 80030008 <__func__.0+0x318>
    80017340:	54d150ef          	jal	8002d08c <printf>
    80017344:	00041797          	auipc	a5,0x41
    80017348:	ccd7c783          	lbu	a5,-819(a5) # 80058011 <excpt+0x1>
    8001734c:	c789                	beqz	a5,80017356 <load_guest_page_fault_2+0xc2>
    8001734e:	6498                	ld	a4,8(s1)
    80017350:	47d5                	li	a5,21
    80017352:	00f70c63          	beq	a4,a5,8001736a <load_guest_page_fault_2+0xd6>
    80017356:	00019517          	auipc	a0,0x19
    8001735a:	cba50513          	addi	a0,a0,-838 # 80030010 <__func__.0+0x320>
    8001735e:	52f150ef          	jal	8002d08c <printf>
    80017362:	02900513          	li	a0,41
    80017366:	215140ef          	jal	8002bd7a <putchar>
    8001736a:	4529                	li	a0,10
    8001736c:	20f140ef          	jal	8002bd7a <putchar>
    80017370:	00041417          	auipc	s0,0x41
    80017374:	ca144403          	lbu	s0,-863(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80017378:	00019597          	auipc	a1,0x19
    8001737c:	c5058593          	addi	a1,a1,-944 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017380:	cc11                	beqz	s0,8001739c <load_guest_page_fault_2+0x108>
    80017382:	6498                	ld	a4,8(s1)
    80017384:	47d5                	li	a5,21
    TEST_END();
    80017386:	00019597          	auipc	a1,0x19
    8001738a:	c3258593          	addi	a1,a1,-974 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    8001738e:	00f70763          	beq	a4,a5,8001739c <load_guest_page_fault_2+0x108>
    80017392:	4401                	li	s0,0
    TEST_END();
    80017394:	00019597          	auipc	a1,0x19
    80017398:	c3458593          	addi	a1,a1,-972 # 8002ffc8 <__func__.0+0x2d8>
    8001739c:	00019517          	auipc	a0,0x19
    800173a0:	cd450513          	addi	a0,a0,-812 # 80030070 <__func__.0+0x380>
    800173a4:	4e9150ef          	jal	8002d08c <printf>
    800173a8:	4511                	li	a0,4
    800173aa:	b5fe90ef          	jal	80000f08 <goto_priv>
    800173ae:	d24ea0ef          	jal	800018d2 <reset_state>
}
    800173b2:	60e2                	ld	ra,24(sp)
    800173b4:	8522                	mv	a0,s0
    800173b6:	6442                	ld	s0,16(sp)
    800173b8:	64a2                	ld	s1,8(sp)
    800173ba:	6105                	addi	sp,sp,32
    800173bc:	8082                	ret

00000000800173be <load_guest_page_fault_3>:

bool load_guest_page_fault_3(){
    800173be:	1101                	addi	sp,sp,-32

    TEST_START();
    800173c0:	00017597          	auipc	a1,0x17
    800173c4:	62858593          	addi	a1,a1,1576 # 8002e9e8 <__func__.34>
    800173c8:	00019517          	auipc	a0,0x19
    800173cc:	c1050513          	addi	a0,a0,-1008 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_3(){
    800173d0:	ec06                	sd	ra,24(sp)
    800173d2:	e822                	sd	s0,16(sp)
    800173d4:	e426                	sd	s1,8(sp)
    TEST_START();
    800173d6:	4b7150ef          	jal	8002d08c <printf>
    800173da:	4529                	li	a0,10
    800173dc:	19f140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800173e0:	450d                	li	a0,3
    800173e2:	b27e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800173e6:	9fae90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800173ea:	ddae90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800173ee:	b8ee90ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800173f2:	450d                	li	a0,3
    800173f4:	b15e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800173f8:	4509                	li	a0,2
    800173fa:	a2fe90ef          	jal	80000e28 <set_prev_priv>
    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800173fe:	a0fe90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80017402:	000807b7          	lui	a5,0x80
    80017406:	1007a073          	csrs	sstatus,a5
    8001740a:	001007b7          	lui	a5,0x100
    8001740e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017412:	07b2                	slli	a5,a5,0xc
    80017414:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017418:	08200593          	li	a1,130
    8001741c:	0001e617          	auipc	a2,0x1e
    80017420:	58c60613          	addi	a2,a2,1420 # 800359a8 <__func__.0+0x5cb8>
    80017424:	00019517          	auipc	a0,0x19
    80017428:	bcc50513          	addi	a0,a0,-1076 # 8002fff0 <__func__.0+0x300>
    8001742c:	461150ef          	jal	8002d08c <printf>
    80017430:	00041797          	auipc	a5,0x41
    80017434:	be17c783          	lbu	a5,-1055(a5) # 80058011 <excpt+0x1>
    80017438:	00041497          	auipc	s1,0x41
    8001743c:	bd848493          	addi	s1,s1,-1064 # 80058010 <excpt>
    80017440:	00019597          	auipc	a1,0x19
    80017444:	b8858593          	addi	a1,a1,-1144 # 8002ffc8 <__func__.0+0x2d8>
    80017448:	cf89                	beqz	a5,80017462 <load_guest_page_fault_3+0xa4>
    8001744a:	6498                	ld	a4,8(s1)
    8001744c:	47d5                	li	a5,21
    8001744e:	00019597          	auipc	a1,0x19
    80017452:	b6a58593          	addi	a1,a1,-1174 # 8002ffb8 <__func__.0+0x2c8>
    80017456:	00f70663          	beq	a4,a5,80017462 <load_guest_page_fault_3+0xa4>
    8001745a:	00019597          	auipc	a1,0x19
    8001745e:	b6e58593          	addi	a1,a1,-1170 # 8002ffc8 <__func__.0+0x2d8>
    80017462:	00019517          	auipc	a0,0x19
    80017466:	ba650513          	addi	a0,a0,-1114 # 80030008 <__func__.0+0x318>
    8001746a:	423150ef          	jal	8002d08c <printf>
    8001746e:	00041797          	auipc	a5,0x41
    80017472:	ba37c783          	lbu	a5,-1117(a5) # 80058011 <excpt+0x1>
    80017476:	c789                	beqz	a5,80017480 <load_guest_page_fault_3+0xc2>
    80017478:	6498                	ld	a4,8(s1)
    8001747a:	47d5                	li	a5,21
    8001747c:	00f70c63          	beq	a4,a5,80017494 <load_guest_page_fault_3+0xd6>
    80017480:	00019517          	auipc	a0,0x19
    80017484:	b9050513          	addi	a0,a0,-1136 # 80030010 <__func__.0+0x320>
    80017488:	405150ef          	jal	8002d08c <printf>
    8001748c:	02900513          	li	a0,41
    80017490:	0eb140ef          	jal	8002bd7a <putchar>
    80017494:	4529                	li	a0,10
    80017496:	0e5140ef          	jal	8002bd7a <putchar>
    8001749a:	00041417          	auipc	s0,0x41
    8001749e:	b7744403          	lbu	s0,-1161(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    800174a2:	00019597          	auipc	a1,0x19
    800174a6:	b2658593          	addi	a1,a1,-1242 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800174aa:	cc11                	beqz	s0,800174c6 <load_guest_page_fault_3+0x108>
    800174ac:	6498                	ld	a4,8(s1)
    800174ae:	47d5                	li	a5,21
    TEST_END();
    800174b0:	00019597          	auipc	a1,0x19
    800174b4:	b0858593          	addi	a1,a1,-1272 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800174b8:	00f70763          	beq	a4,a5,800174c6 <load_guest_page_fault_3+0x108>
    800174bc:	4401                	li	s0,0
    TEST_END();
    800174be:	00019597          	auipc	a1,0x19
    800174c2:	b0a58593          	addi	a1,a1,-1270 # 8002ffc8 <__func__.0+0x2d8>
    800174c6:	00019517          	auipc	a0,0x19
    800174ca:	baa50513          	addi	a0,a0,-1110 # 80030070 <__func__.0+0x380>
    800174ce:	3bf150ef          	jal	8002d08c <printf>
    800174d2:	4511                	li	a0,4
    800174d4:	a35e90ef          	jal	80000f08 <goto_priv>
    800174d8:	bfaea0ef          	jal	800018d2 <reset_state>
}
    800174dc:	60e2                	ld	ra,24(sp)
    800174de:	8522                	mv	a0,s0
    800174e0:	6442                	ld	s0,16(sp)
    800174e2:	64a2                	ld	s1,8(sp)
    800174e4:	6105                	addi	sp,sp,32
    800174e6:	8082                	ret

00000000800174e8 <load_guest_page_fault_4>:

bool load_guest_page_fault_4(){
    800174e8:	1101                	addi	sp,sp,-32

    TEST_START();
    800174ea:	00017597          	auipc	a1,0x17
    800174ee:	51658593          	addi	a1,a1,1302 # 8002ea00 <__func__.33>
    800174f2:	00019517          	auipc	a0,0x19
    800174f6:	ae650513          	addi	a0,a0,-1306 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_4(){
    800174fa:	ec06                	sd	ra,24(sp)
    800174fc:	e822                	sd	s0,16(sp)
    800174fe:	e426                	sd	s1,8(sp)
    TEST_START();
    80017500:	38d150ef          	jal	8002d08c <printf>
    80017504:	4529                	li	a0,10
    80017506:	075140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    8001750a:	450d                	li	a0,3
    8001750c:	9fde90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017510:	8d0e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017514:	cb0e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017518:	a64e90ef          	jal	8000077c <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    8001751c:	4511                	li	a0,4
    8001751e:	9ebe90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80017522:	000407b7          	lui	a5,0x40
    80017526:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_HS);
    8001752a:	450d                	li	a0,3
    8001752c:	9dde90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017530:	4509                	li	a0,2
    80017532:	8f7e90ef          	jal	80000e28 <set_prev_priv>
    //执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80017536:	8d7e90ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8001753a:	000807b7          	lui	a5,0x80
    8001753e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017540:	07b6                	slli	a5,a5,0xd
    80017542:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSURWX_GURWX);


    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80017546:	08200593          	li	a1,130
    8001754a:	0001e617          	auipc	a2,0x1e
    8001754e:	4ce60613          	addi	a2,a2,1230 # 80035a18 <__func__.0+0x5d28>
    80017552:	00019517          	auipc	a0,0x19
    80017556:	a9e50513          	addi	a0,a0,-1378 # 8002fff0 <__func__.0+0x300>
    8001755a:	333150ef          	jal	8002d08c <printf>
    8001755e:	00041797          	auipc	a5,0x41
    80017562:	ab37c783          	lbu	a5,-1357(a5) # 80058011 <excpt+0x1>
    80017566:	00041497          	auipc	s1,0x41
    8001756a:	aaa48493          	addi	s1,s1,-1366 # 80058010 <excpt>
    8001756e:	00019597          	auipc	a1,0x19
    80017572:	a5a58593          	addi	a1,a1,-1446 # 8002ffc8 <__func__.0+0x2d8>
    80017576:	cf89                	beqz	a5,80017590 <load_guest_page_fault_4+0xa8>
    80017578:	6498                	ld	a4,8(s1)
    8001757a:	47b5                	li	a5,13
    8001757c:	00019597          	auipc	a1,0x19
    80017580:	a3c58593          	addi	a1,a1,-1476 # 8002ffb8 <__func__.0+0x2c8>
    80017584:	00f70663          	beq	a4,a5,80017590 <load_guest_page_fault_4+0xa8>
    80017588:	00019597          	auipc	a1,0x19
    8001758c:	a4058593          	addi	a1,a1,-1472 # 8002ffc8 <__func__.0+0x2d8>
    80017590:	00019517          	auipc	a0,0x19
    80017594:	a7850513          	addi	a0,a0,-1416 # 80030008 <__func__.0+0x318>
    80017598:	2f5150ef          	jal	8002d08c <printf>
    8001759c:	00041797          	auipc	a5,0x41
    800175a0:	a757c783          	lbu	a5,-1419(a5) # 80058011 <excpt+0x1>
    800175a4:	c789                	beqz	a5,800175ae <load_guest_page_fault_4+0xc6>
    800175a6:	6498                	ld	a4,8(s1)
    800175a8:	47b5                	li	a5,13
    800175aa:	00f70c63          	beq	a4,a5,800175c2 <load_guest_page_fault_4+0xda>
    800175ae:	00019517          	auipc	a0,0x19
    800175b2:	a6250513          	addi	a0,a0,-1438 # 80030010 <__func__.0+0x320>
    800175b6:	2d7150ef          	jal	8002d08c <printf>
    800175ba:	02900513          	li	a0,41
    800175be:	7bc140ef          	jal	8002bd7a <putchar>
    800175c2:	4529                	li	a0,10
    800175c4:	7b6140ef          	jal	8002bd7a <putchar>
    800175c8:	00041417          	auipc	s0,0x41
    800175cc:	a4944403          	lbu	s0,-1463(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800175d0:	00019597          	auipc	a1,0x19
    800175d4:	9f858593          	addi	a1,a1,-1544 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    800175d8:	cc11                	beqz	s0,800175f4 <load_guest_page_fault_4+0x10c>
    800175da:	6498                	ld	a4,8(s1)
    800175dc:	47b5                	li	a5,13
    TEST_END();
    800175de:	00019597          	auipc	a1,0x19
    800175e2:	9da58593          	addi	a1,a1,-1574 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    800175e6:	00f70763          	beq	a4,a5,800175f4 <load_guest_page_fault_4+0x10c>
    800175ea:	4401                	li	s0,0
    TEST_END();
    800175ec:	00019597          	auipc	a1,0x19
    800175f0:	9dc58593          	addi	a1,a1,-1572 # 8002ffc8 <__func__.0+0x2d8>
    800175f4:	00019517          	auipc	a0,0x19
    800175f8:	a7c50513          	addi	a0,a0,-1412 # 80030070 <__func__.0+0x380>
    800175fc:	291150ef          	jal	8002d08c <printf>
    80017600:	4511                	li	a0,4
    80017602:	907e90ef          	jal	80000f08 <goto_priv>
    80017606:	accea0ef          	jal	800018d2 <reset_state>
}
    8001760a:	60e2                	ld	ra,24(sp)
    8001760c:	8522                	mv	a0,s0
    8001760e:	6442                	ld	s0,16(sp)
    80017610:	64a2                	ld	s1,8(sp)
    80017612:	6105                	addi	sp,sp,32
    80017614:	8082                	ret

0000000080017616 <load_guest_page_fault_5>:

bool load_guest_page_fault_5(){
    80017616:	1141                	addi	sp,sp,-16

    TEST_START();
    80017618:	00017597          	auipc	a1,0x17
    8001761c:	40058593          	addi	a1,a1,1024 # 8002ea18 <__func__.32>
    80017620:	00019517          	auipc	a0,0x19
    80017624:	9b850513          	addi	a0,a0,-1608 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_5(){
    80017628:	e406                	sd	ra,8(sp)
    8001762a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001762c:	261150ef          	jal	8002d08c <printf>
    80017630:	4529                	li	a0,10
    80017632:	748140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80017636:	450d                	li	a0,3
    80017638:	8d1e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001763c:	fa5e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017640:	b84e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017644:	938e90ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017648:	4511                	li	a0,4
    8001764a:	8bfe90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001764e:	000407b7          	lui	a5,0x40
    80017652:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80017656:	450d                	li	a0,3
    80017658:	8b1e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001765c:	4509                	li	a0,2
    8001765e:	fcae90ef          	jal	80000e28 <set_prev_priv>

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80017662:	faae90ef          	jal	80000e0c <test_setup_except_function>
    80017666:	000807b7          	lui	a5,0x80
    8001766a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001766c:	07b6                	slli	a5,a5,0xd
    8001766e:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80017672:	08200593          	li	a1,130
    80017676:	0001e617          	auipc	a2,0x1e
    8001767a:	b9a60613          	addi	a2,a2,-1126 # 80035210 <__func__.0+0x5520>
    8001767e:	00019517          	auipc	a0,0x19
    80017682:	97250513          	addi	a0,a0,-1678 # 8002fff0 <__func__.0+0x300>
    80017686:	207150ef          	jal	8002d08c <printf>
    8001768a:	00041797          	auipc	a5,0x41
    8001768e:	9877c783          	lbu	a5,-1657(a5) # 80058011 <excpt+0x1>
    80017692:	00019597          	auipc	a1,0x19
    80017696:	92658593          	addi	a1,a1,-1754 # 8002ffb8 <__func__.0+0x2c8>
    8001769a:	c789                	beqz	a5,800176a4 <load_guest_page_fault_5+0x8e>
    8001769c:	00019597          	auipc	a1,0x19
    800176a0:	92c58593          	addi	a1,a1,-1748 # 8002ffc8 <__func__.0+0x2d8>
    800176a4:	00019517          	auipc	a0,0x19
    800176a8:	96450513          	addi	a0,a0,-1692 # 80030008 <__func__.0+0x318>
    800176ac:	1e1150ef          	jal	8002d08c <printf>
    800176b0:	00041797          	auipc	a5,0x41
    800176b4:	9617c783          	lbu	a5,-1695(a5) # 80058011 <excpt+0x1>
    800176b8:	e7a1                	bnez	a5,80017700 <load_guest_page_fault_5+0xea>
    800176ba:	4529                	li	a0,10
    800176bc:	6be140ef          	jal	8002bd7a <putchar>
    800176c0:	00041797          	auipc	a5,0x41
    800176c4:	9517c783          	lbu	a5,-1711(a5) # 80058011 <excpt+0x1>
    800176c8:	e795                	bnez	a5,800176f4 <load_guest_page_fault_5+0xde>
    800176ca:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800176cc:	00019597          	auipc	a1,0x19
    800176d0:	8ec58593          	addi	a1,a1,-1812 # 8002ffb8 <__func__.0+0x2c8>
    800176d4:	00019517          	auipc	a0,0x19
    800176d8:	99c50513          	addi	a0,a0,-1636 # 80030070 <__func__.0+0x380>
    800176dc:	1b1150ef          	jal	8002d08c <printf>
    800176e0:	4511                	li	a0,4
    800176e2:	827e90ef          	jal	80000f08 <goto_priv>
    800176e6:	9ecea0ef          	jal	800018d2 <reset_state>
}
    800176ea:	60a2                	ld	ra,8(sp)
    800176ec:	8522                	mv	a0,s0
    800176ee:	6402                	ld	s0,0(sp)
    800176f0:	0141                	addi	sp,sp,16
    800176f2:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800176f4:	4401                	li	s0,0
    TEST_END();
    800176f6:	00019597          	auipc	a1,0x19
    800176fa:	8d258593          	addi	a1,a1,-1838 # 8002ffc8 <__func__.0+0x2d8>
    800176fe:	bfd9                	j	800176d4 <load_guest_page_fault_5+0xbe>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80017700:	00019517          	auipc	a0,0x19
    80017704:	91050513          	addi	a0,a0,-1776 # 80030010 <__func__.0+0x320>
    80017708:	185150ef          	jal	8002d08c <printf>
    8001770c:	02900513          	li	a0,41
    80017710:	66a140ef          	jal	8002bd7a <putchar>
    80017714:	b75d                	j	800176ba <load_guest_page_fault_5+0xa4>

0000000080017716 <load_guest_page_fault_6>:

bool load_guest_page_fault_6(){
    80017716:	1101                	addi	sp,sp,-32

    TEST_START();
    80017718:	00017597          	auipc	a1,0x17
    8001771c:	31858593          	addi	a1,a1,792 # 8002ea30 <__func__.31>
    80017720:	00019517          	auipc	a0,0x19
    80017724:	8b850513          	addi	a0,a0,-1864 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_6(){
    80017728:	ec06                	sd	ra,24(sp)
    8001772a:	e822                	sd	s0,16(sp)
    8001772c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001772e:	15f150ef          	jal	8002d08c <printf>
    80017732:	4529                	li	a0,10
    80017734:	646140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80017738:	450d                	li	a0,3
    8001773a:	fcee90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001773e:	ea3e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017742:	a82e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017746:	836e90ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001774a:	4509                	li	a0,2
    8001774c:	fbce90ef          	jal	80000f08 <goto_priv>

    //执行lb指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80017750:	ebce90ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80017754:	001007b7          	lui	a5,0x100
    80017758:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001775c:	07b2                	slli	a5,a5,0xc
    8001775e:	00078783          	lb	a5,0(a5)

    vaddr = hs_page_base(VSRWX_GI);
    lb(vaddr);
    TEST_ASSERT("vs mode lb when the second-stage address translation pte.v=0 leads to LGPF",
    80017762:	08200593          	li	a1,130
    80017766:	0001e617          	auipc	a2,0x1e
    8001776a:	2f260613          	addi	a2,a2,754 # 80035a58 <__func__.0+0x5d68>
    8001776e:	00019517          	auipc	a0,0x19
    80017772:	88250513          	addi	a0,a0,-1918 # 8002fff0 <__func__.0+0x300>
    80017776:	117150ef          	jal	8002d08c <printf>
    8001777a:	00041797          	auipc	a5,0x41
    8001777e:	8977c783          	lbu	a5,-1897(a5) # 80058011 <excpt+0x1>
    80017782:	00041497          	auipc	s1,0x41
    80017786:	88e48493          	addi	s1,s1,-1906 # 80058010 <excpt>
    8001778a:	00019597          	auipc	a1,0x19
    8001778e:	83e58593          	addi	a1,a1,-1986 # 8002ffc8 <__func__.0+0x2d8>
    80017792:	cf89                	beqz	a5,800177ac <load_guest_page_fault_6+0x96>
    80017794:	6498                	ld	a4,8(s1)
    80017796:	47d5                	li	a5,21
    80017798:	00019597          	auipc	a1,0x19
    8001779c:	82058593          	addi	a1,a1,-2016 # 8002ffb8 <__func__.0+0x2c8>
    800177a0:	00f70663          	beq	a4,a5,800177ac <load_guest_page_fault_6+0x96>
    800177a4:	00019597          	auipc	a1,0x19
    800177a8:	82458593          	addi	a1,a1,-2012 # 8002ffc8 <__func__.0+0x2d8>
    800177ac:	00019517          	auipc	a0,0x19
    800177b0:	85c50513          	addi	a0,a0,-1956 # 80030008 <__func__.0+0x318>
    800177b4:	0d9150ef          	jal	8002d08c <printf>
    800177b8:	00041797          	auipc	a5,0x41
    800177bc:	8597c783          	lbu	a5,-1959(a5) # 80058011 <excpt+0x1>
    800177c0:	c789                	beqz	a5,800177ca <load_guest_page_fault_6+0xb4>
    800177c2:	6498                	ld	a4,8(s1)
    800177c4:	47d5                	li	a5,21
    800177c6:	00f70c63          	beq	a4,a5,800177de <load_guest_page_fault_6+0xc8>
    800177ca:	00019517          	auipc	a0,0x19
    800177ce:	84650513          	addi	a0,a0,-1978 # 80030010 <__func__.0+0x320>
    800177d2:	0bb150ef          	jal	8002d08c <printf>
    800177d6:	02900513          	li	a0,41
    800177da:	5a0140ef          	jal	8002bd7a <putchar>
    800177de:	4529                	li	a0,10
    800177e0:	59a140ef          	jal	8002bd7a <putchar>
    800177e4:	00041797          	auipc	a5,0x41
    800177e8:	82d7c783          	lbu	a5,-2003(a5) # 80058011 <excpt+0x1>
    800177ec:	4401                	li	s0,0
    800177ee:	c789                	beqz	a5,800177f8 <load_guest_page_fault_6+0xe2>
    800177f0:	6480                	ld	s0,8(s1)
    800177f2:	142d                	addi	s0,s0,-21
    800177f4:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LGPF
    );


    //执行ld指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    800177f8:	e14e90ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800177fc:	001007b7          	lui	a5,0x100
    80017800:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017804:	07b2                	slli	a5,a5,0xc
    80017806:	0007b783          	ld	a5,0(a5)
    vaddr = hs_page_base(VSRWX_GI);

    ld(vaddr);   
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001780a:	08200593          	li	a1,130
    8001780e:	0001e617          	auipc	a2,0x1e
    80017812:	29a60613          	addi	a2,a2,666 # 80035aa8 <__func__.0+0x5db8>
    80017816:	00018517          	auipc	a0,0x18
    8001781a:	7da50513          	addi	a0,a0,2010 # 8002fff0 <__func__.0+0x300>
    8001781e:	06f150ef          	jal	8002d08c <printf>
    80017822:	00040797          	auipc	a5,0x40
    80017826:	7ef7c783          	lbu	a5,2031(a5) # 80058011 <excpt+0x1>
    8001782a:	00018597          	auipc	a1,0x18
    8001782e:	79e58593          	addi	a1,a1,1950 # 8002ffc8 <__func__.0+0x2d8>
    80017832:	cf89                	beqz	a5,8001784c <load_guest_page_fault_6+0x136>
    80017834:	6498                	ld	a4,8(s1)
    80017836:	47d5                	li	a5,21
    80017838:	00018597          	auipc	a1,0x18
    8001783c:	78058593          	addi	a1,a1,1920 # 8002ffb8 <__func__.0+0x2c8>
    80017840:	00f70663          	beq	a4,a5,8001784c <load_guest_page_fault_6+0x136>
    80017844:	00018597          	auipc	a1,0x18
    80017848:	78458593          	addi	a1,a1,1924 # 8002ffc8 <__func__.0+0x2d8>
    8001784c:	00018517          	auipc	a0,0x18
    80017850:	7bc50513          	addi	a0,a0,1980 # 80030008 <__func__.0+0x318>
    80017854:	039150ef          	jal	8002d08c <printf>
    80017858:	00040797          	auipc	a5,0x40
    8001785c:	7b97c783          	lbu	a5,1977(a5) # 80058011 <excpt+0x1>
    80017860:	c789                	beqz	a5,8001786a <load_guest_page_fault_6+0x154>
    80017862:	6498                	ld	a4,8(s1)
    80017864:	47d5                	li	a5,21
    80017866:	00f70c63          	beq	a4,a5,8001787e <load_guest_page_fault_6+0x168>
    8001786a:	00018517          	auipc	a0,0x18
    8001786e:	7a650513          	addi	a0,a0,1958 # 80030010 <__func__.0+0x320>
    80017872:	01b150ef          	jal	8002d08c <printf>
    80017876:	02900513          	li	a0,41
    8001787a:	500140ef          	jal	8002bd7a <putchar>
    8001787e:	4529                	li	a0,10
    80017880:	4fa140ef          	jal	8002bd7a <putchar>
    80017884:	c015                	beqz	s0,800178a8 <load_guest_page_fault_6+0x192>
    80017886:	00040417          	auipc	s0,0x40
    8001788a:	78b44403          	lbu	s0,1931(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001788e:	00018597          	auipc	a1,0x18
    80017892:	73a58593          	addi	a1,a1,1850 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80017896:	cc11                	beqz	s0,800178b2 <load_guest_page_fault_6+0x19c>
    80017898:	6498                	ld	a4,8(s1)
    8001789a:	47d5                	li	a5,21
    TEST_END();
    8001789c:	00018597          	auipc	a1,0x18
    800178a0:	71c58593          	addi	a1,a1,1820 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800178a4:	00f70763          	beq	a4,a5,800178b2 <load_guest_page_fault_6+0x19c>
    800178a8:	4401                	li	s0,0
    TEST_END();
    800178aa:	00018597          	auipc	a1,0x18
    800178ae:	71e58593          	addi	a1,a1,1822 # 8002ffc8 <__func__.0+0x2d8>
    800178b2:	00018517          	auipc	a0,0x18
    800178b6:	7be50513          	addi	a0,a0,1982 # 80030070 <__func__.0+0x380>
    800178ba:	7d2150ef          	jal	8002d08c <printf>
    800178be:	4511                	li	a0,4
    800178c0:	e48e90ef          	jal	80000f08 <goto_priv>
    800178c4:	80eea0ef          	jal	800018d2 <reset_state>
}
    800178c8:	60e2                	ld	ra,24(sp)
    800178ca:	8522                	mv	a0,s0
    800178cc:	6442                	ld	s0,16(sp)
    800178ce:	64a2                	ld	s1,8(sp)
    800178d0:	6105                	addi	sp,sp,32
    800178d2:	8082                	ret

00000000800178d4 <load_guest_page_fault_7>:

bool load_guest_page_fault_7(){
    800178d4:	1101                	addi	sp,sp,-32

    TEST_START();
    800178d6:	00017597          	auipc	a1,0x17
    800178da:	17258593          	addi	a1,a1,370 # 8002ea48 <__func__.30>
    800178de:	00018517          	auipc	a0,0x18
    800178e2:	6fa50513          	addi	a0,a0,1786 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_7(){
    800178e6:	ec06                	sd	ra,24(sp)
    800178e8:	e822                	sd	s0,16(sp)
    800178ea:	e426                	sd	s1,8(sp)
    TEST_START();
    800178ec:	7a0150ef          	jal	8002d08c <printf>
    800178f0:	4529                	li	a0,10
    800178f2:	488140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800178f6:	450d                	li	a0,3
    800178f8:	e10e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800178fc:	ce5e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017900:	8c4e90ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017904:	e79e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80017908:	4509                	li	a0,2
    8001790a:	dfee90ef          	jal	80000f08 <goto_priv>

    //执行lh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001790e:	cfee90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80017912:	000807b7          	lui	a5,0x80
    80017916:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8001791a:	001007b7          	lui	a5,0x100
    8001791e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017922:	07b2                	slli	a5,a5,0xc
    80017924:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017928:	08200593          	li	a1,130
    8001792c:	0001e617          	auipc	a2,0x1e
    80017930:	1d460613          	addi	a2,a2,468 # 80035b00 <__func__.0+0x5e10>
    80017934:	00018517          	auipc	a0,0x18
    80017938:	6bc50513          	addi	a0,a0,1724 # 8002fff0 <__func__.0+0x300>
    8001793c:	750150ef          	jal	8002d08c <printf>
    80017940:	00040797          	auipc	a5,0x40
    80017944:	6d17c783          	lbu	a5,1745(a5) # 80058011 <excpt+0x1>
    80017948:	00040497          	auipc	s1,0x40
    8001794c:	6c848493          	addi	s1,s1,1736 # 80058010 <excpt>
    80017950:	00018597          	auipc	a1,0x18
    80017954:	67858593          	addi	a1,a1,1656 # 8002ffc8 <__func__.0+0x2d8>
    80017958:	cf89                	beqz	a5,80017972 <load_guest_page_fault_7+0x9e>
    8001795a:	6498                	ld	a4,8(s1)
    8001795c:	47d5                	li	a5,21
    8001795e:	00018597          	auipc	a1,0x18
    80017962:	65a58593          	addi	a1,a1,1626 # 8002ffb8 <__func__.0+0x2c8>
    80017966:	00f70663          	beq	a4,a5,80017972 <load_guest_page_fault_7+0x9e>
    8001796a:	00018597          	auipc	a1,0x18
    8001796e:	65e58593          	addi	a1,a1,1630 # 8002ffc8 <__func__.0+0x2d8>
    80017972:	00018517          	auipc	a0,0x18
    80017976:	69650513          	addi	a0,a0,1686 # 80030008 <__func__.0+0x318>
    8001797a:	712150ef          	jal	8002d08c <printf>
    8001797e:	00040797          	auipc	a5,0x40
    80017982:	6937c783          	lbu	a5,1683(a5) # 80058011 <excpt+0x1>
    80017986:	c789                	beqz	a5,80017990 <load_guest_page_fault_7+0xbc>
    80017988:	6498                	ld	a4,8(s1)
    8001798a:	47d5                	li	a5,21
    8001798c:	00f70c63          	beq	a4,a5,800179a4 <load_guest_page_fault_7+0xd0>
    80017990:	00018517          	auipc	a0,0x18
    80017994:	68050513          	addi	a0,a0,1664 # 80030010 <__func__.0+0x320>
    80017998:	6f4150ef          	jal	8002d08c <printf>
    8001799c:	02900513          	li	a0,41
    800179a0:	3da140ef          	jal	8002bd7a <putchar>
    800179a4:	4529                	li	a0,10
    800179a6:	3d4140ef          	jal	8002bd7a <putchar>
    800179aa:	00040417          	auipc	s0,0x40
    800179ae:	66744403          	lbu	s0,1639(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800179b2:	00018597          	auipc	a1,0x18
    800179b6:	61658593          	addi	a1,a1,1558 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800179ba:	cc11                	beqz	s0,800179d6 <load_guest_page_fault_7+0x102>
    800179bc:	6498                	ld	a4,8(s1)
    800179be:	47d5                	li	a5,21
    TEST_END();
    800179c0:	00018597          	auipc	a1,0x18
    800179c4:	5f858593          	addi	a1,a1,1528 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800179c8:	00f70763          	beq	a4,a5,800179d6 <load_guest_page_fault_7+0x102>
    800179cc:	4401                	li	s0,0
    TEST_END();
    800179ce:	00018597          	auipc	a1,0x18
    800179d2:	5fa58593          	addi	a1,a1,1530 # 8002ffc8 <__func__.0+0x2d8>
    800179d6:	00018517          	auipc	a0,0x18
    800179da:	69a50513          	addi	a0,a0,1690 # 80030070 <__func__.0+0x380>
    800179de:	6ae150ef          	jal	8002d08c <printf>
    800179e2:	4511                	li	a0,4
    800179e4:	d24e90ef          	jal	80000f08 <goto_priv>
    800179e8:	eebe90ef          	jal	800018d2 <reset_state>
}
    800179ec:	60e2                	ld	ra,24(sp)
    800179ee:	8522                	mv	a0,s0
    800179f0:	6442                	ld	s0,16(sp)
    800179f2:	64a2                	ld	s1,8(sp)
    800179f4:	6105                	addi	sp,sp,32
    800179f6:	8082                	ret

00000000800179f8 <load_guest_page_fault_8>:

bool load_guest_page_fault_8(){
    800179f8:	1101                	addi	sp,sp,-32

    TEST_START();
    800179fa:	00017597          	auipc	a1,0x17
    800179fe:	06658593          	addi	a1,a1,102 # 8002ea60 <__func__.29>
    80017a02:	00018517          	auipc	a0,0x18
    80017a06:	5d650513          	addi	a0,a0,1494 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_8(){
    80017a0a:	ec06                	sd	ra,24(sp)
    80017a0c:	e822                	sd	s0,16(sp)
    80017a0e:	e426                	sd	s1,8(sp)
    TEST_START();
    80017a10:	67c150ef          	jal	8002d08c <printf>
    80017a14:	4529                	li	a0,10
    80017a16:	364140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80017a1a:	450d                	li	a0,3
    80017a1c:	cece90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017a20:	bc1e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017a24:	fa1e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017a28:	d55e80ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80017a2c:	4509                	li	a0,2
    80017a2e:	cdae90ef          	jal	80000f08 <goto_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80017a32:	bdae90ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80017a36:	000807b7          	lui	a5,0x80
    80017a3a:	1007a073          	csrs	sstatus,a5
    80017a3e:	001007b7          	lui	a5,0x100
    80017a42:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017a46:	07b2                	slli	a5,a5,0xc
    80017a48:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017a4c:	08200593          	li	a1,130
    80017a50:	0001e617          	auipc	a2,0x1e
    80017a54:	11060613          	addi	a2,a2,272 # 80035b60 <__func__.0+0x5e70>
    80017a58:	00018517          	auipc	a0,0x18
    80017a5c:	59850513          	addi	a0,a0,1432 # 8002fff0 <__func__.0+0x300>
    80017a60:	62c150ef          	jal	8002d08c <printf>
    80017a64:	00040797          	auipc	a5,0x40
    80017a68:	5ad7c783          	lbu	a5,1453(a5) # 80058011 <excpt+0x1>
    80017a6c:	00040497          	auipc	s1,0x40
    80017a70:	5a448493          	addi	s1,s1,1444 # 80058010 <excpt>
    80017a74:	00018597          	auipc	a1,0x18
    80017a78:	55458593          	addi	a1,a1,1364 # 8002ffc8 <__func__.0+0x2d8>
    80017a7c:	cf89                	beqz	a5,80017a96 <load_guest_page_fault_8+0x9e>
    80017a7e:	6498                	ld	a4,8(s1)
    80017a80:	47d5                	li	a5,21
    80017a82:	00018597          	auipc	a1,0x18
    80017a86:	53658593          	addi	a1,a1,1334 # 8002ffb8 <__func__.0+0x2c8>
    80017a8a:	00f70663          	beq	a4,a5,80017a96 <load_guest_page_fault_8+0x9e>
    80017a8e:	00018597          	auipc	a1,0x18
    80017a92:	53a58593          	addi	a1,a1,1338 # 8002ffc8 <__func__.0+0x2d8>
    80017a96:	00018517          	auipc	a0,0x18
    80017a9a:	57250513          	addi	a0,a0,1394 # 80030008 <__func__.0+0x318>
    80017a9e:	5ee150ef          	jal	8002d08c <printf>
    80017aa2:	00040797          	auipc	a5,0x40
    80017aa6:	56f7c783          	lbu	a5,1391(a5) # 80058011 <excpt+0x1>
    80017aaa:	c789                	beqz	a5,80017ab4 <load_guest_page_fault_8+0xbc>
    80017aac:	6498                	ld	a4,8(s1)
    80017aae:	47d5                	li	a5,21
    80017ab0:	00f70c63          	beq	a4,a5,80017ac8 <load_guest_page_fault_8+0xd0>
    80017ab4:	00018517          	auipc	a0,0x18
    80017ab8:	55c50513          	addi	a0,a0,1372 # 80030010 <__func__.0+0x320>
    80017abc:	5d0150ef          	jal	8002d08c <printf>
    80017ac0:	02900513          	li	a0,41
    80017ac4:	2b6140ef          	jal	8002bd7a <putchar>
    80017ac8:	4529                	li	a0,10
    80017aca:	2b0140ef          	jal	8002bd7a <putchar>
    80017ace:	00040417          	auipc	s0,0x40
    80017ad2:	54344403          	lbu	s0,1347(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80017ad6:	00018597          	auipc	a1,0x18
    80017ada:	4f258593          	addi	a1,a1,1266 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017ade:	cc11                	beqz	s0,80017afa <load_guest_page_fault_8+0x102>
    80017ae0:	6498                	ld	a4,8(s1)
    80017ae2:	47d5                	li	a5,21
    TEST_END();
    80017ae4:	00018597          	auipc	a1,0x18
    80017ae8:	4d458593          	addi	a1,a1,1236 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017aec:	00f70763          	beq	a4,a5,80017afa <load_guest_page_fault_8+0x102>
    80017af0:	4401                	li	s0,0
    TEST_END();
    80017af2:	00018597          	auipc	a1,0x18
    80017af6:	4d658593          	addi	a1,a1,1238 # 8002ffc8 <__func__.0+0x2d8>
    80017afa:	00018517          	auipc	a0,0x18
    80017afe:	57650513          	addi	a0,a0,1398 # 80030070 <__func__.0+0x380>
    80017b02:	58a150ef          	jal	8002d08c <printf>
    80017b06:	4511                	li	a0,4
    80017b08:	c00e90ef          	jal	80000f08 <goto_priv>
    80017b0c:	dc7e90ef          	jal	800018d2 <reset_state>
}
    80017b10:	60e2                	ld	ra,24(sp)
    80017b12:	8522                	mv	a0,s0
    80017b14:	6442                	ld	s0,16(sp)
    80017b16:	64a2                	ld	s1,8(sp)
    80017b18:	6105                	addi	sp,sp,32
    80017b1a:	8082                	ret

0000000080017b1c <load_guest_page_fault_9>:

bool load_guest_page_fault_9(){
    80017b1c:	1101                	addi	sp,sp,-32

    TEST_START();
    80017b1e:	00017597          	auipc	a1,0x17
    80017b22:	f5a58593          	addi	a1,a1,-166 # 8002ea78 <__func__.28>
    80017b26:	00018517          	auipc	a0,0x18
    80017b2a:	4b250513          	addi	a0,a0,1202 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_9(){
    80017b2e:	ec06                	sd	ra,24(sp)
    80017b30:	e822                	sd	s0,16(sp)
    80017b32:	e426                	sd	s1,8(sp)
    TEST_START();
    80017b34:	558150ef          	jal	8002d08c <printf>
    80017b38:	4529                	li	a0,10
    80017b3a:	240140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80017b3e:	450d                	li	a0,3
    80017b40:	bc8e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017b44:	a9de80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017b48:	e7de80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017b4c:	c31e80ef          	jal	8000077c <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80017b50:	4511                	li	a0,4
    80017b52:	bb6e90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80017b56:	000407b7          	lui	a5,0x40
    80017b5a:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_VS);
    80017b5e:	4509                	li	a0,2
    80017b60:	ba8e90ef          	jal	80000f08 <goto_priv>
    //执行lb指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80017b64:	aa8e90ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80017b68:	000807b7          	lui	a5,0x80
    80017b6c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017b6e:	07b6                	slli	a5,a5,0xd
    80017b70:	00078783          	lb	a5,0(a5)
    vaddr = hs_page_base(VSURWX_GURWX);


    lb(vaddr)  ;
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017b74:	08200593          	li	a1,130
    80017b78:	0001e617          	auipc	a2,0x1e
    80017b7c:	05860613          	addi	a2,a2,88 # 80035bd0 <__func__.0+0x5ee0>
    80017b80:	00018517          	auipc	a0,0x18
    80017b84:	47050513          	addi	a0,a0,1136 # 8002fff0 <__func__.0+0x300>
    80017b88:	504150ef          	jal	8002d08c <printf>
    80017b8c:	00040797          	auipc	a5,0x40
    80017b90:	4857c783          	lbu	a5,1157(a5) # 80058011 <excpt+0x1>
    80017b94:	00040497          	auipc	s1,0x40
    80017b98:	47c48493          	addi	s1,s1,1148 # 80058010 <excpt>
    80017b9c:	00018597          	auipc	a1,0x18
    80017ba0:	42c58593          	addi	a1,a1,1068 # 8002ffc8 <__func__.0+0x2d8>
    80017ba4:	cf89                	beqz	a5,80017bbe <load_guest_page_fault_9+0xa2>
    80017ba6:	6498                	ld	a4,8(s1)
    80017ba8:	47b5                	li	a5,13
    80017baa:	00018597          	auipc	a1,0x18
    80017bae:	40e58593          	addi	a1,a1,1038 # 8002ffb8 <__func__.0+0x2c8>
    80017bb2:	00f70663          	beq	a4,a5,80017bbe <load_guest_page_fault_9+0xa2>
    80017bb6:	00018597          	auipc	a1,0x18
    80017bba:	41258593          	addi	a1,a1,1042 # 8002ffc8 <__func__.0+0x2d8>
    80017bbe:	00018517          	auipc	a0,0x18
    80017bc2:	44a50513          	addi	a0,a0,1098 # 80030008 <__func__.0+0x318>
    80017bc6:	4c6150ef          	jal	8002d08c <printf>
    80017bca:	00040797          	auipc	a5,0x40
    80017bce:	4477c783          	lbu	a5,1095(a5) # 80058011 <excpt+0x1>
    80017bd2:	c789                	beqz	a5,80017bdc <load_guest_page_fault_9+0xc0>
    80017bd4:	6498                	ld	a4,8(s1)
    80017bd6:	47b5                	li	a5,13
    80017bd8:	00f70c63          	beq	a4,a5,80017bf0 <load_guest_page_fault_9+0xd4>
    80017bdc:	00018517          	auipc	a0,0x18
    80017be0:	43450513          	addi	a0,a0,1076 # 80030010 <__func__.0+0x320>
    80017be4:	4a8150ef          	jal	8002d08c <printf>
    80017be8:	02900513          	li	a0,41
    80017bec:	18e140ef          	jal	8002bd7a <putchar>
    80017bf0:	4529                	li	a0,10
    80017bf2:	188140ef          	jal	8002bd7a <putchar>
    80017bf6:	00040417          	auipc	s0,0x40
    80017bfa:	41b44403          	lbu	s0,1051(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80017bfe:	00018597          	auipc	a1,0x18
    80017c02:	3ca58593          	addi	a1,a1,970 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017c06:	cc11                	beqz	s0,80017c22 <load_guest_page_fault_9+0x106>
    80017c08:	6498                	ld	a4,8(s1)
    80017c0a:	47b5                	li	a5,13
    TEST_END();
    80017c0c:	00018597          	auipc	a1,0x18
    80017c10:	3ac58593          	addi	a1,a1,940 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017c14:	00f70763          	beq	a4,a5,80017c22 <load_guest_page_fault_9+0x106>
    80017c18:	4401                	li	s0,0
    TEST_END();
    80017c1a:	00018597          	auipc	a1,0x18
    80017c1e:	3ae58593          	addi	a1,a1,942 # 8002ffc8 <__func__.0+0x2d8>
    80017c22:	00018517          	auipc	a0,0x18
    80017c26:	44e50513          	addi	a0,a0,1102 # 80030070 <__func__.0+0x380>
    80017c2a:	462150ef          	jal	8002d08c <printf>
    80017c2e:	4511                	li	a0,4
    80017c30:	ad8e90ef          	jal	80000f08 <goto_priv>
    80017c34:	c9fe90ef          	jal	800018d2 <reset_state>
}
    80017c38:	60e2                	ld	ra,24(sp)
    80017c3a:	8522                	mv	a0,s0
    80017c3c:	6442                	ld	s0,16(sp)
    80017c3e:	64a2                	ld	s1,8(sp)
    80017c40:	6105                	addi	sp,sp,32
    80017c42:	8082                	ret

0000000080017c44 <load_guest_page_fault_10>:

bool load_guest_page_fault_10(){
    80017c44:	1141                	addi	sp,sp,-16

    TEST_START();
    80017c46:	00017597          	auipc	a1,0x17
    80017c4a:	e4a58593          	addi	a1,a1,-438 # 8002ea90 <__func__.27>
    80017c4e:	00018517          	auipc	a0,0x18
    80017c52:	38a50513          	addi	a0,a0,906 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_10(){
    80017c56:	e406                	sd	ra,8(sp)
    80017c58:	e022                	sd	s0,0(sp)
    TEST_START();
    80017c5a:	432150ef          	jal	8002d08c <printf>
    80017c5e:	4529                	li	a0,10
    80017c60:	11a140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80017c64:	450d                	li	a0,3
    80017c66:	aa2e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017c6a:	977e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017c6e:	d57e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017c72:	b0be80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017c76:	4511                	li	a0,4
    80017c78:	a90e90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80017c7c:	000407b7          	lui	a5,0x40
    80017c80:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80017c84:	4509                	li	a0,2
    80017c86:	a82e90ef          	jal	80000f08 <goto_priv>

    //执行lb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80017c8a:	982e90ef          	jal	80000e0c <test_setup_except_function>
    80017c8e:	000807b7          	lui	a5,0x80
    80017c92:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017c94:	07b6                	slli	a5,a5,0xd
    80017c96:	00078783          	lb	a5,0(a5)
    lb(vaddr);

    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017c9a:	08200593          	li	a1,130
    80017c9e:	0001e617          	auipc	a2,0x1e
    80017ca2:	f6a60613          	addi	a2,a2,-150 # 80035c08 <__func__.0+0x5f18>
    80017ca6:	00018517          	auipc	a0,0x18
    80017caa:	34a50513          	addi	a0,a0,842 # 8002fff0 <__func__.0+0x300>
    80017cae:	3de150ef          	jal	8002d08c <printf>
    80017cb2:	00040797          	auipc	a5,0x40
    80017cb6:	35f7c783          	lbu	a5,863(a5) # 80058011 <excpt+0x1>
    80017cba:	00018597          	auipc	a1,0x18
    80017cbe:	2fe58593          	addi	a1,a1,766 # 8002ffb8 <__func__.0+0x2c8>
    80017cc2:	c789                	beqz	a5,80017ccc <load_guest_page_fault_10+0x88>
    80017cc4:	00018597          	auipc	a1,0x18
    80017cc8:	30458593          	addi	a1,a1,772 # 8002ffc8 <__func__.0+0x2d8>
    80017ccc:	00018517          	auipc	a0,0x18
    80017cd0:	33c50513          	addi	a0,a0,828 # 80030008 <__func__.0+0x318>
    80017cd4:	3b8150ef          	jal	8002d08c <printf>
    80017cd8:	00040797          	auipc	a5,0x40
    80017cdc:	3397c783          	lbu	a5,825(a5) # 80058011 <excpt+0x1>
    80017ce0:	e7a1                	bnez	a5,80017d28 <load_guest_page_fault_10+0xe4>
    80017ce2:	4529                	li	a0,10
    80017ce4:	096140ef          	jal	8002bd7a <putchar>
    80017ce8:	00040797          	auipc	a5,0x40
    80017cec:	3297c783          	lbu	a5,809(a5) # 80058011 <excpt+0x1>
    80017cf0:	e795                	bnez	a5,80017d1c <load_guest_page_fault_10+0xd8>
    80017cf2:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017cf4:	00018597          	auipc	a1,0x18
    80017cf8:	2c458593          	addi	a1,a1,708 # 8002ffb8 <__func__.0+0x2c8>
    80017cfc:	00018517          	auipc	a0,0x18
    80017d00:	37450513          	addi	a0,a0,884 # 80030070 <__func__.0+0x380>
    80017d04:	388150ef          	jal	8002d08c <printf>
    80017d08:	4511                	li	a0,4
    80017d0a:	9fee90ef          	jal	80000f08 <goto_priv>
    80017d0e:	bc5e90ef          	jal	800018d2 <reset_state>
}
    80017d12:	60a2                	ld	ra,8(sp)
    80017d14:	8522                	mv	a0,s0
    80017d16:	6402                	ld	s0,0(sp)
    80017d18:	0141                	addi	sp,sp,16
    80017d1a:	8082                	ret
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017d1c:	4401                	li	s0,0
    TEST_END();
    80017d1e:	00018597          	auipc	a1,0x18
    80017d22:	2aa58593          	addi	a1,a1,682 # 8002ffc8 <__func__.0+0x2d8>
    80017d26:	bfd9                	j	80017cfc <load_guest_page_fault_10+0xb8>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017d28:	00018517          	auipc	a0,0x18
    80017d2c:	2e850513          	addi	a0,a0,744 # 80030010 <__func__.0+0x320>
    80017d30:	35c150ef          	jal	8002d08c <printf>
    80017d34:	02900513          	li	a0,41
    80017d38:	042140ef          	jal	8002bd7a <putchar>
    80017d3c:	b75d                	j	80017ce2 <load_guest_page_fault_10+0x9e>

0000000080017d3e <load_guest_page_fault_11>:



bool load_guest_page_fault_11(){
    80017d3e:	1101                	addi	sp,sp,-32

    TEST_START();
    80017d40:	00017597          	auipc	a1,0x17
    80017d44:	d7058593          	addi	a1,a1,-656 # 8002eab0 <__func__.26>
    80017d48:	00018517          	auipc	a0,0x18
    80017d4c:	29050513          	addi	a0,a0,656 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_11(){
    80017d50:	ec06                	sd	ra,24(sp)
    80017d52:	e822                	sd	s0,16(sp)
    80017d54:	e426                	sd	s1,8(sp)
    TEST_START();
    80017d56:	336150ef          	jal	8002d08c <printf>
    80017d5a:	4529                	li	a0,10
    80017d5c:	01e140ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80017d60:	450d                	li	a0,3
    80017d62:	9a6e90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017d66:	87be80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017d6a:	c5be80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017d6e:	a0fe80ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017d72:	4511                	li	a0,4
    80017d74:	994e90ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017d78:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017d7c:	450d                	li	a0,3
    80017d7e:	98ae90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017d82:	4509                	li	a0,2
    80017d84:	8a4e90ef          	jal	80000e28 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80017d88:	884e90ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80017d8c:	400197b7          	lui	a5,0x40019
    80017d90:	078a                	slli	a5,a5,0x2
    80017d92:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = vs_page_base(VSI_GI);
    hlvd(vaddr);

    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017d96:	08200593          	li	a1,130
    80017d9a:	0001e617          	auipc	a2,0x1e
    80017d9e:	afe60613          	addi	a2,a2,-1282 # 80035898 <__func__.0+0x5ba8>
    80017da2:	00018517          	auipc	a0,0x18
    80017da6:	24e50513          	addi	a0,a0,590 # 8002fff0 <__func__.0+0x300>
    80017daa:	2e2150ef          	jal	8002d08c <printf>
    80017dae:	00040797          	auipc	a5,0x40
    80017db2:	2637c783          	lbu	a5,611(a5) # 80058011 <excpt+0x1>
    80017db6:	00040497          	auipc	s1,0x40
    80017dba:	25a48493          	addi	s1,s1,602 # 80058010 <excpt>
    80017dbe:	00018597          	auipc	a1,0x18
    80017dc2:	20a58593          	addi	a1,a1,522 # 8002ffc8 <__func__.0+0x2d8>
    80017dc6:	cf89                	beqz	a5,80017de0 <load_guest_page_fault_11+0xa2>
    80017dc8:	6498                	ld	a4,8(s1)
    80017dca:	47d5                	li	a5,21
    80017dcc:	00018597          	auipc	a1,0x18
    80017dd0:	1ec58593          	addi	a1,a1,492 # 8002ffb8 <__func__.0+0x2c8>
    80017dd4:	00f70663          	beq	a4,a5,80017de0 <load_guest_page_fault_11+0xa2>
    80017dd8:	00018597          	auipc	a1,0x18
    80017ddc:	1f058593          	addi	a1,a1,496 # 8002ffc8 <__func__.0+0x2d8>
    80017de0:	00018517          	auipc	a0,0x18
    80017de4:	22850513          	addi	a0,a0,552 # 80030008 <__func__.0+0x318>
    80017de8:	2a4150ef          	jal	8002d08c <printf>
    80017dec:	00040797          	auipc	a5,0x40
    80017df0:	2257c783          	lbu	a5,549(a5) # 80058011 <excpt+0x1>
    80017df4:	c789                	beqz	a5,80017dfe <load_guest_page_fault_11+0xc0>
    80017df6:	6498                	ld	a4,8(s1)
    80017df8:	47d5                	li	a5,21
    80017dfa:	00f70c63          	beq	a4,a5,80017e12 <load_guest_page_fault_11+0xd4>
    80017dfe:	00018517          	auipc	a0,0x18
    80017e02:	21250513          	addi	a0,a0,530 # 80030010 <__func__.0+0x320>
    80017e06:	286150ef          	jal	8002d08c <printf>
    80017e0a:	02900513          	li	a0,41
    80017e0e:	76d130ef          	jal	8002bd7a <putchar>
    80017e12:	4529                	li	a0,10
    80017e14:	767130ef          	jal	8002bd7a <putchar>
    80017e18:	00040417          	auipc	s0,0x40
    80017e1c:	1f944403          	lbu	s0,505(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_LGPF
    );



    TEST_END();
    80017e20:	00018597          	auipc	a1,0x18
    80017e24:	1a858593          	addi	a1,a1,424 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017e28:	cc11                	beqz	s0,80017e44 <load_guest_page_fault_11+0x106>
    80017e2a:	6498                	ld	a4,8(s1)
    80017e2c:	47d5                	li	a5,21
    TEST_END();
    80017e2e:	00018597          	auipc	a1,0x18
    80017e32:	18a58593          	addi	a1,a1,394 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017e36:	00f70763          	beq	a4,a5,80017e44 <load_guest_page_fault_11+0x106>
    80017e3a:	4401                	li	s0,0
    TEST_END();
    80017e3c:	00018597          	auipc	a1,0x18
    80017e40:	18c58593          	addi	a1,a1,396 # 8002ffc8 <__func__.0+0x2d8>
    80017e44:	00018517          	auipc	a0,0x18
    80017e48:	22c50513          	addi	a0,a0,556 # 80030070 <__func__.0+0x380>
    80017e4c:	240150ef          	jal	8002d08c <printf>
    80017e50:	4511                	li	a0,4
    80017e52:	8b6e90ef          	jal	80000f08 <goto_priv>
    80017e56:	a7de90ef          	jal	800018d2 <reset_state>
}
    80017e5a:	60e2                	ld	ra,24(sp)
    80017e5c:	8522                	mv	a0,s0
    80017e5e:	6442                	ld	s0,16(sp)
    80017e60:	64a2                	ld	s1,8(sp)
    80017e62:	6105                	addi	sp,sp,32
    80017e64:	8082                	ret

0000000080017e66 <load_guest_page_fault_12>:

bool load_guest_page_fault_12(){
    80017e66:	1101                	addi	sp,sp,-32

    TEST_START();
    80017e68:	00017597          	auipc	a1,0x17
    80017e6c:	c6858593          	addi	a1,a1,-920 # 8002ead0 <__func__.25>
    80017e70:	00018517          	auipc	a0,0x18
    80017e74:	16850513          	addi	a0,a0,360 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_12(){
    80017e78:	ec06                	sd	ra,24(sp)
    80017e7a:	e822                	sd	s0,16(sp)
    80017e7c:	e426                	sd	s1,8(sp)
    TEST_START();
    80017e7e:	20e150ef          	jal	8002d08c <printf>
    80017e82:	4529                	li	a0,10
    80017e84:	6f7130ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80017e88:	450d                	li	a0,3
    80017e8a:	87ee90ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017e8e:	f52e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017e92:	b33e80ef          	jal	800009c4 <hpt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017e96:	4511                	li	a0,4
    80017e98:	870e90ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017e9c:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017ea0:	450d                	li	a0,3
    80017ea2:	866e90ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017ea6:	4509                	li	a0,2
    80017ea8:	f81e80ef          	jal	80000e28 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80017eac:	f61e80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = vs_page_base(VSI_GUX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80017eb0:	000807b7          	lui	a5,0x80
    80017eb4:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80017eb8:	2000d5b7          	lui	a1,0x2000d
    80017ebc:	058e                	slli	a1,a1,0x3
    80017ebe:	6405c7f3          	.insn	4, 0x6405c7f3
    hlvh(vaddr);

    printf("%llx\n",vaddr);
    80017ec2:	0001e517          	auipc	a0,0x1e
    80017ec6:	72e50513          	addi	a0,a0,1838 # 800365f0 <__func__.0+0x6900>
    80017eca:	1c2150ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.cause);
    80017ece:	00040417          	auipc	s0,0x40
    80017ed2:	14240413          	addi	s0,s0,322 # 80058010 <excpt>
    80017ed6:	640c                	ld	a1,8(s0)
    80017ed8:	00019517          	auipc	a0,0x19
    80017edc:	c7850513          	addi	a0,a0,-904 # 80030b50 <__func__.0+0xe60>
    80017ee0:	1ac150ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.triggered);
    80017ee4:	00040597          	auipc	a1,0x40
    80017ee8:	12d5c583          	lbu	a1,301(a1) # 80058011 <excpt+0x1>
    80017eec:	00019517          	auipc	a0,0x19
    80017ef0:	c6450513          	addi	a0,a0,-924 # 80030b50 <__func__.0+0xe60>
    80017ef4:	198150ef          	jal	8002d08c <printf>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017ef8:	08200593          	li	a1,130
    80017efc:	0001e617          	auipc	a2,0x1e
    80017f00:	a4c60613          	addi	a2,a2,-1460 # 80035948 <__func__.0+0x5c58>
    80017f04:	00018517          	auipc	a0,0x18
    80017f08:	0ec50513          	addi	a0,a0,236 # 8002fff0 <__func__.0+0x300>
    80017f0c:	180150ef          	jal	8002d08c <printf>
    80017f10:	00040797          	auipc	a5,0x40
    80017f14:	1017c783          	lbu	a5,257(a5) # 80058011 <excpt+0x1>
    80017f18:	00018597          	auipc	a1,0x18
    80017f1c:	0b058593          	addi	a1,a1,176 # 8002ffc8 <__func__.0+0x2d8>
    80017f20:	cf89                	beqz	a5,80017f3a <load_guest_page_fault_12+0xd4>
    80017f22:	6418                	ld	a4,8(s0)
    80017f24:	47d5                	li	a5,21
    80017f26:	00018597          	auipc	a1,0x18
    80017f2a:	09258593          	addi	a1,a1,146 # 8002ffb8 <__func__.0+0x2c8>
    80017f2e:	00f70663          	beq	a4,a5,80017f3a <load_guest_page_fault_12+0xd4>
    80017f32:	00018597          	auipc	a1,0x18
    80017f36:	09658593          	addi	a1,a1,150 # 8002ffc8 <__func__.0+0x2d8>
    80017f3a:	00018517          	auipc	a0,0x18
    80017f3e:	0ce50513          	addi	a0,a0,206 # 80030008 <__func__.0+0x318>
    80017f42:	14a150ef          	jal	8002d08c <printf>
    80017f46:	00040797          	auipc	a5,0x40
    80017f4a:	0cb7c783          	lbu	a5,203(a5) # 80058011 <excpt+0x1>
    80017f4e:	c789                	beqz	a5,80017f58 <load_guest_page_fault_12+0xf2>
    80017f50:	6418                	ld	a4,8(s0)
    80017f52:	47d5                	li	a5,21
    80017f54:	00f70c63          	beq	a4,a5,80017f6c <load_guest_page_fault_12+0x106>
    80017f58:	00018517          	auipc	a0,0x18
    80017f5c:	0b850513          	addi	a0,a0,184 # 80030010 <__func__.0+0x320>
    80017f60:	12c150ef          	jal	8002d08c <printf>
    80017f64:	02900513          	li	a0,41
    80017f68:	613130ef          	jal	8002bd7a <putchar>
    80017f6c:	4529                	li	a0,10
    80017f6e:	60d130ef          	jal	8002bd7a <putchar>
    80017f72:	00040497          	auipc	s1,0x40
    80017f76:	09f4c483          	lbu	s1,159(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80017f7a:	00018597          	auipc	a1,0x18
    80017f7e:	04e58593          	addi	a1,a1,78 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017f82:	cc91                	beqz	s1,80017f9e <load_guest_page_fault_12+0x138>
    80017f84:	6418                	ld	a4,8(s0)
    80017f86:	47d5                	li	a5,21
    TEST_END();
    80017f88:	00018597          	auipc	a1,0x18
    80017f8c:	03058593          	addi	a1,a1,48 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017f90:	00f70763          	beq	a4,a5,80017f9e <load_guest_page_fault_12+0x138>
    80017f94:	4481                	li	s1,0
    TEST_END();
    80017f96:	00018597          	auipc	a1,0x18
    80017f9a:	03258593          	addi	a1,a1,50 # 8002ffc8 <__func__.0+0x2d8>
    80017f9e:	00018517          	auipc	a0,0x18
    80017fa2:	0d250513          	addi	a0,a0,210 # 80030070 <__func__.0+0x380>
    80017fa6:	0e6150ef          	jal	8002d08c <printf>
    80017faa:	4511                	li	a0,4
    80017fac:	f5de80ef          	jal	80000f08 <goto_priv>
    80017fb0:	923e90ef          	jal	800018d2 <reset_state>
}
    80017fb4:	60e2                	ld	ra,24(sp)
    80017fb6:	6442                	ld	s0,16(sp)
    80017fb8:	8526                	mv	a0,s1
    80017fba:	64a2                	ld	s1,8(sp)
    80017fbc:	6105                	addi	sp,sp,32
    80017fbe:	8082                	ret

0000000080017fc0 <load_guest_page_fault_13>:

bool load_guest_page_fault_13(){
    80017fc0:	1101                	addi	sp,sp,-32

    TEST_START();
    80017fc2:	00017597          	auipc	a1,0x17
    80017fc6:	b2e58593          	addi	a1,a1,-1234 # 8002eaf0 <__func__.24>
    80017fca:	00018517          	auipc	a0,0x18
    80017fce:	00e50513          	addi	a0,a0,14 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_13(){
    80017fd2:	ec06                	sd	ra,24(sp)
    80017fd4:	e822                	sd	s0,16(sp)
    80017fd6:	e426                	sd	s1,8(sp)
    TEST_START();
    80017fd8:	0b4150ef          	jal	8002d08c <printf>
    80017fdc:	4529                	li	a0,10
    80017fde:	59d130ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80017fe2:	450d                	li	a0,3
    80017fe4:	f25e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80017fe8:	df8e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017fec:	9d9e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80017ff0:	f8ce80ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017ff4:	4511                	li	a0,4
    80017ff6:	f13e80ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017ffa:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017ffe:	450d                	li	a0,3
    80018000:	f09e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018004:	4509                	li	a0,2
    80018006:	e23e80ef          	jal	80000e28 <set_prev_priv>
    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    8001800a:	e03e80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = vs_page_base(VSI_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001800e:	000807b7          	lui	a5,0x80
    80018012:	1007a073          	csrs	sstatus,a5
    80018016:	400197b7          	lui	a5,0x40019
    8001801a:	078a                	slli	a5,a5,0x2
    8001801c:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80018020:	08200593          	li	a1,130
    80018024:	0001e617          	auipc	a2,0x1e
    80018028:	98460613          	addi	a2,a2,-1660 # 800359a8 <__func__.0+0x5cb8>
    8001802c:	00018517          	auipc	a0,0x18
    80018030:	fc450513          	addi	a0,a0,-60 # 8002fff0 <__func__.0+0x300>
    80018034:	058150ef          	jal	8002d08c <printf>
    80018038:	00040797          	auipc	a5,0x40
    8001803c:	fd97c783          	lbu	a5,-39(a5) # 80058011 <excpt+0x1>
    80018040:	00040497          	auipc	s1,0x40
    80018044:	fd048493          	addi	s1,s1,-48 # 80058010 <excpt>
    80018048:	00018597          	auipc	a1,0x18
    8001804c:	f8058593          	addi	a1,a1,-128 # 8002ffc8 <__func__.0+0x2d8>
    80018050:	cf89                	beqz	a5,8001806a <load_guest_page_fault_13+0xaa>
    80018052:	6498                	ld	a4,8(s1)
    80018054:	47d5                	li	a5,21
    80018056:	00018597          	auipc	a1,0x18
    8001805a:	f6258593          	addi	a1,a1,-158 # 8002ffb8 <__func__.0+0x2c8>
    8001805e:	00f70663          	beq	a4,a5,8001806a <load_guest_page_fault_13+0xaa>
    80018062:	00018597          	auipc	a1,0x18
    80018066:	f6658593          	addi	a1,a1,-154 # 8002ffc8 <__func__.0+0x2d8>
    8001806a:	00018517          	auipc	a0,0x18
    8001806e:	f9e50513          	addi	a0,a0,-98 # 80030008 <__func__.0+0x318>
    80018072:	01a150ef          	jal	8002d08c <printf>
    80018076:	00040797          	auipc	a5,0x40
    8001807a:	f9b7c783          	lbu	a5,-101(a5) # 80058011 <excpt+0x1>
    8001807e:	c789                	beqz	a5,80018088 <load_guest_page_fault_13+0xc8>
    80018080:	6498                	ld	a4,8(s1)
    80018082:	47d5                	li	a5,21
    80018084:	00f70c63          	beq	a4,a5,8001809c <load_guest_page_fault_13+0xdc>
    80018088:	00018517          	auipc	a0,0x18
    8001808c:	f8850513          	addi	a0,a0,-120 # 80030010 <__func__.0+0x320>
    80018090:	7fd140ef          	jal	8002d08c <printf>
    80018094:	02900513          	li	a0,41
    80018098:	4e3130ef          	jal	8002bd7a <putchar>
    8001809c:	4529                	li	a0,10
    8001809e:	4dd130ef          	jal	8002bd7a <putchar>
    800180a2:	00040417          	auipc	s0,0x40
    800180a6:	f6f44403          	lbu	s0,-145(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    800180aa:	00018597          	auipc	a1,0x18
    800180ae:	f1e58593          	addi	a1,a1,-226 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800180b2:	cc11                	beqz	s0,800180ce <load_guest_page_fault_13+0x10e>
    800180b4:	6498                	ld	a4,8(s1)
    800180b6:	47d5                	li	a5,21
    TEST_END();
    800180b8:	00018597          	auipc	a1,0x18
    800180bc:	f0058593          	addi	a1,a1,-256 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800180c0:	00f70763          	beq	a4,a5,800180ce <load_guest_page_fault_13+0x10e>
    800180c4:	4401                	li	s0,0
    TEST_END();
    800180c6:	00018597          	auipc	a1,0x18
    800180ca:	f0258593          	addi	a1,a1,-254 # 8002ffc8 <__func__.0+0x2d8>
    800180ce:	00018517          	auipc	a0,0x18
    800180d2:	fa250513          	addi	a0,a0,-94 # 80030070 <__func__.0+0x380>
    800180d6:	7b7140ef          	jal	8002d08c <printf>
    800180da:	4511                	li	a0,4
    800180dc:	e2de80ef          	jal	80000f08 <goto_priv>
    800180e0:	ff2e90ef          	jal	800018d2 <reset_state>
}
    800180e4:	60e2                	ld	ra,24(sp)
    800180e6:	8522                	mv	a0,s0
    800180e8:	6442                	ld	s0,16(sp)
    800180ea:	64a2                	ld	s1,8(sp)
    800180ec:	6105                	addi	sp,sp,32
    800180ee:	8082                	ret

00000000800180f0 <load_guest_page_fault_14>:

bool load_guest_page_fault_14(){
    800180f0:	1101                	addi	sp,sp,-32

    TEST_START();
    800180f2:	00017597          	auipc	a1,0x17
    800180f6:	a1e58593          	addi	a1,a1,-1506 # 8002eb10 <__func__.23>
    800180fa:	00018517          	auipc	a0,0x18
    800180fe:	ede50513          	addi	a0,a0,-290 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_14(){
    80018102:	ec06                	sd	ra,24(sp)
    80018104:	e822                	sd	s0,16(sp)
    80018106:	e426                	sd	s1,8(sp)
    TEST_START();
    80018108:	785140ef          	jal	8002d08c <printf>
    8001810c:	4529                	li	a0,10
    8001810e:	46d130ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80018112:	450d                	li	a0,3
    80018114:	df5e80ef          	jal	80000f08 <goto_priv>
    hpt_init();
    80018118:	8ade80ef          	jal	800009c4 <hpt_init>
    hspt_init();
    8001811c:	cc4e80ef          	jal	800005e0 <hspt_init>
    vspt_init();
    80018120:	e5ce80ef          	jal	8000077c <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80018124:	4511                	li	a0,4
    80018126:	de3e80ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001812a:	000407b7          	lui	a5,0x40
    8001812e:	2007b073          	csrc	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    80018132:	28005073          	csrwi	vsatp,0
    
    goto_priv(PRIV_HS);
    80018136:	450d                	li	a0,3
    80018138:	dd1e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001813c:	4509                	li	a0,2
    8001813e:	cebe80ef          	jal	80000e28 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80018142:	ccbe80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80018146:	001007b7          	lui	a5,0x100
    8001814a:	06778793          	addi	a5,a5,103 # 100067 <STACK_SIZE+0x67>
    8001814e:	07b2                	slli	a5,a5,0xc
    80018150:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = vs_page_base(VSI_GURWX);


    hlvb(vaddr);
    printf("%d\n",excpt.cause);
    80018154:	00040417          	auipc	s0,0x40
    80018158:	ebc40413          	addi	s0,s0,-324 # 80058010 <excpt>
    8001815c:	640c                	ld	a1,8(s0)
    8001815e:	00019517          	auipc	a0,0x19
    80018162:	9f250513          	addi	a0,a0,-1550 # 80030b50 <__func__.0+0xe60>
    80018166:	727140ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.triggered);
    8001816a:	00040597          	auipc	a1,0x40
    8001816e:	ea75c583          	lbu	a1,-345(a1) # 80058011 <excpt+0x1>
    80018172:	00019517          	auipc	a0,0x19
    80018176:	9de50513          	addi	a0,a0,-1570 # 80030b50 <__func__.0+0xe60>
    8001817a:	713140ef          	jal	8002d08c <printf>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    8001817e:	08200593          	li	a1,130
    80018182:	0001e617          	auipc	a2,0x1e
    80018186:	abe60613          	addi	a2,a2,-1346 # 80035c40 <__func__.0+0x5f50>
    8001818a:	00018517          	auipc	a0,0x18
    8001818e:	e6650513          	addi	a0,a0,-410 # 8002fff0 <__func__.0+0x300>
    80018192:	6fb140ef          	jal	8002d08c <printf>
    80018196:	00040797          	auipc	a5,0x40
    8001819a:	e7b7c783          	lbu	a5,-389(a5) # 80058011 <excpt+0x1>
    8001819e:	00018597          	auipc	a1,0x18
    800181a2:	e2a58593          	addi	a1,a1,-470 # 8002ffc8 <__func__.0+0x2d8>
    800181a6:	cf89                	beqz	a5,800181c0 <load_guest_page_fault_14+0xd0>
    800181a8:	6418                	ld	a4,8(s0)
    800181aa:	47d5                	li	a5,21
    800181ac:	00018597          	auipc	a1,0x18
    800181b0:	e0c58593          	addi	a1,a1,-500 # 8002ffb8 <__func__.0+0x2c8>
    800181b4:	00f70663          	beq	a4,a5,800181c0 <load_guest_page_fault_14+0xd0>
    800181b8:	00018597          	auipc	a1,0x18
    800181bc:	e1058593          	addi	a1,a1,-496 # 8002ffc8 <__func__.0+0x2d8>
    800181c0:	00018517          	auipc	a0,0x18
    800181c4:	e4850513          	addi	a0,a0,-440 # 80030008 <__func__.0+0x318>
    800181c8:	6c5140ef          	jal	8002d08c <printf>
    800181cc:	00040797          	auipc	a5,0x40
    800181d0:	e457c783          	lbu	a5,-443(a5) # 80058011 <excpt+0x1>
    800181d4:	c789                	beqz	a5,800181de <load_guest_page_fault_14+0xee>
    800181d6:	6418                	ld	a4,8(s0)
    800181d8:	47d5                	li	a5,21
    800181da:	00f70c63          	beq	a4,a5,800181f2 <load_guest_page_fault_14+0x102>
    800181de:	00018517          	auipc	a0,0x18
    800181e2:	e3250513          	addi	a0,a0,-462 # 80030010 <__func__.0+0x320>
    800181e6:	6a7140ef          	jal	8002d08c <printf>
    800181ea:	02900513          	li	a0,41
    800181ee:	38d130ef          	jal	8002bd7a <putchar>
    800181f2:	4529                	li	a0,10
    800181f4:	387130ef          	jal	8002bd7a <putchar>
    800181f8:	00040497          	auipc	s1,0x40
    800181fc:	e194c483          	lbu	s1,-487(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80018200:	00018597          	auipc	a1,0x18
    80018204:	dc858593          	addi	a1,a1,-568 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80018208:	cc91                	beqz	s1,80018224 <load_guest_page_fault_14+0x134>
    8001820a:	6418                	ld	a4,8(s0)
    8001820c:	47d5                	li	a5,21
    TEST_END();
    8001820e:	00018597          	auipc	a1,0x18
    80018212:	daa58593          	addi	a1,a1,-598 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80018216:	00f70763          	beq	a4,a5,80018224 <load_guest_page_fault_14+0x134>
    8001821a:	4481                	li	s1,0
    TEST_END();
    8001821c:	00018597          	auipc	a1,0x18
    80018220:	dac58593          	addi	a1,a1,-596 # 8002ffc8 <__func__.0+0x2d8>
    80018224:	00018517          	auipc	a0,0x18
    80018228:	e4c50513          	addi	a0,a0,-436 # 80030070 <__func__.0+0x380>
    8001822c:	661140ef          	jal	8002d08c <printf>
    80018230:	4511                	li	a0,4
    80018232:	cd7e80ef          	jal	80000f08 <goto_priv>
    80018236:	e9ce90ef          	jal	800018d2 <reset_state>
}
    8001823a:	60e2                	ld	ra,24(sp)
    8001823c:	6442                	ld	s0,16(sp)
    8001823e:	8526                	mv	a0,s1
    80018240:	64a2                	ld	s1,8(sp)
    80018242:	6105                	addi	sp,sp,32
    80018244:	8082                	ret

0000000080018246 <load_guest_page_fault_15>:

bool load_guest_page_fault_15(){
    80018246:	1141                	addi	sp,sp,-16

    TEST_START();
    80018248:	00017597          	auipc	a1,0x17
    8001824c:	8e858593          	addi	a1,a1,-1816 # 8002eb30 <__func__.22>
    80018250:	00018517          	auipc	a0,0x18
    80018254:	d8850513          	addi	a0,a0,-632 # 8002ffd8 <__func__.0+0x2e8>
bool load_guest_page_fault_15(){
    80018258:	e406                	sd	ra,8(sp)
    8001825a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001825c:	631140ef          	jal	8002d08c <printf>
    80018260:	4529                	li	a0,10
    80018262:	319130ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80018266:	450d                	li	a0,3
    80018268:	ca1e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001826c:	b74e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018270:	f54e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018274:	d08e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80018278:	4511                	li	a0,4
    8001827a:	c8fe80ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001827e:	000407b7          	lui	a5,0x40
    80018282:	2007a073          	csrs	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    80018286:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    8001828a:	450d                	li	a0,3
    8001828c:	c7de80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018290:	4509                	li	a0,2
    80018292:	b97e80ef          	jal	80000e28 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = vs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80018296:	b77e80ef          	jal	80000e0c <test_setup_except_function>
    8001829a:	000807b7          	lui	a5,0x80
    8001829e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800182a0:	07b6                	slli	a5,a5,0xd
    800182a2:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800182a6:	08200593          	li	a1,130
    800182aa:	0001d617          	auipc	a2,0x1d
    800182ae:	f6660613          	addi	a2,a2,-154 # 80035210 <__func__.0+0x5520>
    800182b2:	00018517          	auipc	a0,0x18
    800182b6:	d3e50513          	addi	a0,a0,-706 # 8002fff0 <__func__.0+0x300>
    800182ba:	5d3140ef          	jal	8002d08c <printf>
    800182be:	00040797          	auipc	a5,0x40
    800182c2:	d537c783          	lbu	a5,-685(a5) # 80058011 <excpt+0x1>
    800182c6:	00018597          	auipc	a1,0x18
    800182ca:	cf258593          	addi	a1,a1,-782 # 8002ffb8 <__func__.0+0x2c8>
    800182ce:	c789                	beqz	a5,800182d8 <load_guest_page_fault_15+0x92>
    800182d0:	00018597          	auipc	a1,0x18
    800182d4:	cf858593          	addi	a1,a1,-776 # 8002ffc8 <__func__.0+0x2d8>
    800182d8:	00018517          	auipc	a0,0x18
    800182dc:	d3050513          	addi	a0,a0,-720 # 80030008 <__func__.0+0x318>
    800182e0:	5ad140ef          	jal	8002d08c <printf>
    800182e4:	00040797          	auipc	a5,0x40
    800182e8:	d2d7c783          	lbu	a5,-723(a5) # 80058011 <excpt+0x1>
    800182ec:	e7a1                	bnez	a5,80018334 <load_guest_page_fault_15+0xee>
    800182ee:	4529                	li	a0,10
    800182f0:	28b130ef          	jal	8002bd7a <putchar>
    800182f4:	00040797          	auipc	a5,0x40
    800182f8:	d1d7c783          	lbu	a5,-739(a5) # 80058011 <excpt+0x1>
    800182fc:	e795                	bnez	a5,80018328 <load_guest_page_fault_15+0xe2>
    800182fe:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80018300:	00018597          	auipc	a1,0x18
    80018304:	cb858593          	addi	a1,a1,-840 # 8002ffb8 <__func__.0+0x2c8>
    80018308:	00018517          	auipc	a0,0x18
    8001830c:	d6850513          	addi	a0,a0,-664 # 80030070 <__func__.0+0x380>
    80018310:	57d140ef          	jal	8002d08c <printf>
    80018314:	4511                	li	a0,4
    80018316:	bf3e80ef          	jal	80000f08 <goto_priv>
    8001831a:	db8e90ef          	jal	800018d2 <reset_state>
}
    8001831e:	60a2                	ld	ra,8(sp)
    80018320:	8522                	mv	a0,s0
    80018322:	6402                	ld	s0,0(sp)
    80018324:	0141                	addi	sp,sp,16
    80018326:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80018328:	4401                	li	s0,0
    TEST_END();
    8001832a:	00018597          	auipc	a1,0x18
    8001832e:	c9e58593          	addi	a1,a1,-866 # 8002ffc8 <__func__.0+0x2d8>
    80018332:	bfd9                	j	80018308 <load_guest_page_fault_15+0xc2>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80018334:	00018517          	auipc	a0,0x18
    80018338:	cdc50513          	addi	a0,a0,-804 # 80030010 <__func__.0+0x320>
    8001833c:	551140ef          	jal	8002d08c <printf>
    80018340:	02900513          	li	a0,41
    80018344:	237130ef          	jal	8002bd7a <putchar>
    80018348:	b75d                	j	800182ee <load_guest_page_fault_15+0xa8>

000000008001834a <store_guest_page_fault_1>:



bool store_guest_page_fault_1(){
    8001834a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001834c:	00017597          	auipc	a1,0x17
    80018350:	80458593          	addi	a1,a1,-2044 # 8002eb50 <__func__.21>
    80018354:	00018517          	auipc	a0,0x18
    80018358:	c8450513          	addi	a0,a0,-892 # 8002ffd8 <__func__.0+0x2e8>
bool store_guest_page_fault_1(){
    8001835c:	ec06                	sd	ra,24(sp)
    8001835e:	e822                	sd	s0,16(sp)
    80018360:	e426                	sd	s1,8(sp)
    TEST_START();
    80018362:	52b140ef          	jal	8002d08c <printf>
    80018366:	4529                	li	a0,10
    80018368:	213130ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    8001836c:	450d                	li	a0,3
    8001836e:	b9be80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018372:	a6ee80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018376:	e4ee80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001837a:	c02e80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001837e:	450d                	li	a0,3
    80018380:	b89e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018384:	4509                	li	a0,2
    80018386:	aa3e80ef          	jal	80000e28 <set_prev_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    8001838a:	a83e80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    8001838e:	37ab77b7          	lui	a5,0x37ab7
    80018392:	00100737          	lui	a4,0x100
    80018396:	078a                	slli	a5,a5,0x2
    80018398:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001839c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800183a0:	0732                	slli	a4,a4,0xc
    800183a2:	6ef74073          	.insn	4, 0x6ef74073

    vaddr = hs_page_base(VSRWX_GI);
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.v=0 leads to SGPF",
    800183a6:	08200593          	li	a1,130
    800183aa:	0001e617          	auipc	a2,0x1e
    800183ae:	8d660613          	addi	a2,a2,-1834 # 80035c80 <__func__.0+0x5f90>
    800183b2:	00018517          	auipc	a0,0x18
    800183b6:	c3e50513          	addi	a0,a0,-962 # 8002fff0 <__func__.0+0x300>
    800183ba:	4d3140ef          	jal	8002d08c <printf>
    800183be:	00040797          	auipc	a5,0x40
    800183c2:	c537c783          	lbu	a5,-941(a5) # 80058011 <excpt+0x1>
    800183c6:	00040497          	auipc	s1,0x40
    800183ca:	c4a48493          	addi	s1,s1,-950 # 80058010 <excpt>
    800183ce:	00018597          	auipc	a1,0x18
    800183d2:	bfa58593          	addi	a1,a1,-1030 # 8002ffc8 <__func__.0+0x2d8>
    800183d6:	cf89                	beqz	a5,800183f0 <store_guest_page_fault_1+0xa6>
    800183d8:	6498                	ld	a4,8(s1)
    800183da:	47dd                	li	a5,23
    800183dc:	00018597          	auipc	a1,0x18
    800183e0:	bdc58593          	addi	a1,a1,-1060 # 8002ffb8 <__func__.0+0x2c8>
    800183e4:	00f70663          	beq	a4,a5,800183f0 <store_guest_page_fault_1+0xa6>
    800183e8:	00018597          	auipc	a1,0x18
    800183ec:	be058593          	addi	a1,a1,-1056 # 8002ffc8 <__func__.0+0x2d8>
    800183f0:	00018517          	auipc	a0,0x18
    800183f4:	c1850513          	addi	a0,a0,-1000 # 80030008 <__func__.0+0x318>
    800183f8:	495140ef          	jal	8002d08c <printf>
    800183fc:	00040797          	auipc	a5,0x40
    80018400:	c157c783          	lbu	a5,-1003(a5) # 80058011 <excpt+0x1>
    80018404:	c789                	beqz	a5,8001840e <store_guest_page_fault_1+0xc4>
    80018406:	6498                	ld	a4,8(s1)
    80018408:	47dd                	li	a5,23
    8001840a:	00f70c63          	beq	a4,a5,80018422 <store_guest_page_fault_1+0xd8>
    8001840e:	00018517          	auipc	a0,0x18
    80018412:	c0250513          	addi	a0,a0,-1022 # 80030010 <__func__.0+0x320>
    80018416:	477140ef          	jal	8002d08c <printf>
    8001841a:	02900513          	li	a0,41
    8001841e:	15d130ef          	jal	8002bd7a <putchar>
    80018422:	4529                	li	a0,10
    80018424:	157130ef          	jal	8002bd7a <putchar>
    80018428:	00040797          	auipc	a5,0x40
    8001842c:	be97c783          	lbu	a5,-1047(a5) # 80058011 <excpt+0x1>
    80018430:	4401                	li	s0,0
    80018432:	c789                	beqz	a5,8001843c <store_guest_page_fault_1+0xf2>
    80018434:	6480                	ld	s0,8(s1)
    80018436:	1425                	addi	s0,s0,-23
    80018438:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    8001843c:	9d1e80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80018440:	001007b7          	lui	a5,0x100
    80018444:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018448:	6731                	lui	a4,0xc
    8001844a:	07b2                	slli	a5,a5,0xc
    8001844c:	eef70713          	addi	a4,a4,-273 # beef <_test_table_size+0xbeee>
    80018450:	66e7c073          	.insn	4, 0x66e7c073
    addr = hs_page_base(VSRWX_GI);

    hsvh(addr,0xbeef);   
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018454:	08200593          	li	a1,130
    80018458:	0001e617          	auipc	a2,0x1e
    8001845c:	87860613          	addi	a2,a2,-1928 # 80035cd0 <__func__.0+0x5fe0>
    80018460:	00018517          	auipc	a0,0x18
    80018464:	b9050513          	addi	a0,a0,-1136 # 8002fff0 <__func__.0+0x300>
    80018468:	425140ef          	jal	8002d08c <printf>
    8001846c:	00040797          	auipc	a5,0x40
    80018470:	ba57c783          	lbu	a5,-1115(a5) # 80058011 <excpt+0x1>
    80018474:	00018597          	auipc	a1,0x18
    80018478:	b5458593          	addi	a1,a1,-1196 # 8002ffc8 <__func__.0+0x2d8>
    8001847c:	cf89                	beqz	a5,80018496 <store_guest_page_fault_1+0x14c>
    8001847e:	6498                	ld	a4,8(s1)
    80018480:	47dd                	li	a5,23
    80018482:	00018597          	auipc	a1,0x18
    80018486:	b3658593          	addi	a1,a1,-1226 # 8002ffb8 <__func__.0+0x2c8>
    8001848a:	00f70663          	beq	a4,a5,80018496 <store_guest_page_fault_1+0x14c>
    8001848e:	00018597          	auipc	a1,0x18
    80018492:	b3a58593          	addi	a1,a1,-1222 # 8002ffc8 <__func__.0+0x2d8>
    80018496:	00018517          	auipc	a0,0x18
    8001849a:	b7250513          	addi	a0,a0,-1166 # 80030008 <__func__.0+0x318>
    8001849e:	3ef140ef          	jal	8002d08c <printf>
    800184a2:	00040797          	auipc	a5,0x40
    800184a6:	b6f7c783          	lbu	a5,-1169(a5) # 80058011 <excpt+0x1>
    800184aa:	c789                	beqz	a5,800184b4 <store_guest_page_fault_1+0x16a>
    800184ac:	6498                	ld	a4,8(s1)
    800184ae:	47dd                	li	a5,23
    800184b0:	00f70c63          	beq	a4,a5,800184c8 <store_guest_page_fault_1+0x17e>
    800184b4:	00018517          	auipc	a0,0x18
    800184b8:	b5c50513          	addi	a0,a0,-1188 # 80030010 <__func__.0+0x320>
    800184bc:	3d1140ef          	jal	8002d08c <printf>
    800184c0:	02900513          	li	a0,41
    800184c4:	0b7130ef          	jal	8002bd7a <putchar>
    800184c8:	4529                	li	a0,10
    800184ca:	0b1130ef          	jal	8002bd7a <putchar>
    800184ce:	c015                	beqz	s0,800184f2 <store_guest_page_fault_1+0x1a8>
    800184d0:	00040417          	auipc	s0,0x40
    800184d4:	b4144403          	lbu	s0,-1215(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800184d8:	00018597          	auipc	a1,0x18
    800184dc:	af058593          	addi	a1,a1,-1296 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800184e0:	cc11                	beqz	s0,800184fc <store_guest_page_fault_1+0x1b2>
    800184e2:	6498                	ld	a4,8(s1)
    800184e4:	47dd                	li	a5,23
    TEST_END();
    800184e6:	00018597          	auipc	a1,0x18
    800184ea:	ad258593          	addi	a1,a1,-1326 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800184ee:	00f70763          	beq	a4,a5,800184fc <store_guest_page_fault_1+0x1b2>
    800184f2:	4401                	li	s0,0
    TEST_END();
    800184f4:	00018597          	auipc	a1,0x18
    800184f8:	ad458593          	addi	a1,a1,-1324 # 8002ffc8 <__func__.0+0x2d8>
    800184fc:	00018517          	auipc	a0,0x18
    80018500:	b7450513          	addi	a0,a0,-1164 # 80030070 <__func__.0+0x380>
    80018504:	389140ef          	jal	8002d08c <printf>
    80018508:	4511                	li	a0,4
    8001850a:	9ffe80ef          	jal	80000f08 <goto_priv>
    8001850e:	bc4e90ef          	jal	800018d2 <reset_state>

}
    80018512:	60e2                	ld	ra,24(sp)
    80018514:	8522                	mv	a0,s0
    80018516:	6442                	ld	s0,16(sp)
    80018518:	64a2                	ld	s1,8(sp)
    8001851a:	6105                	addi	sp,sp,32
    8001851c:	8082                	ret

000000008001851e <store_guest_page_fault_2>:

bool store_guest_page_fault_2(){
    8001851e:	1101                	addi	sp,sp,-32

    TEST_START();
    80018520:	00016597          	auipc	a1,0x16
    80018524:	65058593          	addi	a1,a1,1616 # 8002eb70 <__func__.20>
    80018528:	00018517          	auipc	a0,0x18
    8001852c:	ab050513          	addi	a0,a0,-1360 # 8002ffd8 <__func__.0+0x2e8>
bool store_guest_page_fault_2(){
    80018530:	ec06                	sd	ra,24(sp)
    80018532:	e822                	sd	s0,16(sp)
    80018534:	e426                	sd	s1,8(sp)
    TEST_START();
    80018536:	357140ef          	jal	8002d08c <printf>
    8001853a:	4529                	li	a0,10
    8001853c:	03f130ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80018540:	450d                	li	a0,3
    80018542:	9c7e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018546:	89ae80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001854a:	c7ae80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001854e:	a2ee80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80018552:	450d                	li	a0,3
    80018554:	9b5e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018558:	4509                	li	a0,2
    8001855a:	8cfe80ef          	jal	80000e28 <set_prev_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001855e:	8afe80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018562:	000807b7          	lui	a5,0x80
    80018566:	1007b073          	csrc	sstatus,a5
    asm volatile(
    8001856a:	37ab77b7          	lui	a5,0x37ab7
    8001856e:	00100737          	lui	a4,0x100
    80018572:	078a                	slli	a5,a5,0x2
    80018574:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018578:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001857c:	0732                	slli	a4,a4,0xc
    8001857e:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018582:	08200593          	li	a1,130
    80018586:	0001d617          	auipc	a2,0x1d
    8001858a:	7aa60613          	addi	a2,a2,1962 # 80035d30 <__func__.0+0x6040>
    8001858e:	00018517          	auipc	a0,0x18
    80018592:	a6250513          	addi	a0,a0,-1438 # 8002fff0 <__func__.0+0x300>
    80018596:	2f7140ef          	jal	8002d08c <printf>
    8001859a:	00040797          	auipc	a5,0x40
    8001859e:	a777c783          	lbu	a5,-1417(a5) # 80058011 <excpt+0x1>
    800185a2:	00040497          	auipc	s1,0x40
    800185a6:	a6e48493          	addi	s1,s1,-1426 # 80058010 <excpt>
    800185aa:	00018597          	auipc	a1,0x18
    800185ae:	a1e58593          	addi	a1,a1,-1506 # 8002ffc8 <__func__.0+0x2d8>
    800185b2:	cf89                	beqz	a5,800185cc <store_guest_page_fault_2+0xae>
    800185b4:	6498                	ld	a4,8(s1)
    800185b6:	47dd                	li	a5,23
    800185b8:	00018597          	auipc	a1,0x18
    800185bc:	a0058593          	addi	a1,a1,-1536 # 8002ffb8 <__func__.0+0x2c8>
    800185c0:	00f70663          	beq	a4,a5,800185cc <store_guest_page_fault_2+0xae>
    800185c4:	00018597          	auipc	a1,0x18
    800185c8:	a0458593          	addi	a1,a1,-1532 # 8002ffc8 <__func__.0+0x2d8>
    800185cc:	00018517          	auipc	a0,0x18
    800185d0:	a3c50513          	addi	a0,a0,-1476 # 80030008 <__func__.0+0x318>
    800185d4:	2b9140ef          	jal	8002d08c <printf>
    800185d8:	00040797          	auipc	a5,0x40
    800185dc:	a397c783          	lbu	a5,-1479(a5) # 80058011 <excpt+0x1>
    800185e0:	c789                	beqz	a5,800185ea <store_guest_page_fault_2+0xcc>
    800185e2:	6498                	ld	a4,8(s1)
    800185e4:	47dd                	li	a5,23
    800185e6:	00f70c63          	beq	a4,a5,800185fe <store_guest_page_fault_2+0xe0>
    800185ea:	00018517          	auipc	a0,0x18
    800185ee:	a2650513          	addi	a0,a0,-1498 # 80030010 <__func__.0+0x320>
    800185f2:	29b140ef          	jal	8002d08c <printf>
    800185f6:	02900513          	li	a0,41
    800185fa:	780130ef          	jal	8002bd7a <putchar>
    800185fe:	4529                	li	a0,10
    80018600:	77a130ef          	jal	8002bd7a <putchar>
    80018604:	00040417          	auipc	s0,0x40
    80018608:	a0d44403          	lbu	s0,-1523(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001860c:	00018597          	auipc	a1,0x18
    80018610:	9bc58593          	addi	a1,a1,-1604 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018614:	cc11                	beqz	s0,80018630 <store_guest_page_fault_2+0x112>
    80018616:	6498                	ld	a4,8(s1)
    80018618:	47dd                	li	a5,23
    TEST_END();
    8001861a:	00018597          	auipc	a1,0x18
    8001861e:	99e58593          	addi	a1,a1,-1634 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018622:	00f70763          	beq	a4,a5,80018630 <store_guest_page_fault_2+0x112>
    80018626:	4401                	li	s0,0
    TEST_END();
    80018628:	00018597          	auipc	a1,0x18
    8001862c:	9a058593          	addi	a1,a1,-1632 # 8002ffc8 <__func__.0+0x2d8>
    80018630:	00018517          	auipc	a0,0x18
    80018634:	a4050513          	addi	a0,a0,-1472 # 80030070 <__func__.0+0x380>
    80018638:	255140ef          	jal	8002d08c <printf>
    8001863c:	4511                	li	a0,4
    8001863e:	8cbe80ef          	jal	80000f08 <goto_priv>
    80018642:	a90e90ef          	jal	800018d2 <reset_state>
}
    80018646:	60e2                	ld	ra,24(sp)
    80018648:	8522                	mv	a0,s0
    8001864a:	6442                	ld	s0,16(sp)
    8001864c:	64a2                	ld	s1,8(sp)
    8001864e:	6105                	addi	sp,sp,32
    80018650:	8082                	ret

0000000080018652 <store_guest_page_fault_3>:

bool store_guest_page_fault_3(){
    80018652:	1101                	addi	sp,sp,-32

    TEST_START();
    80018654:	00016597          	auipc	a1,0x16
    80018658:	53c58593          	addi	a1,a1,1340 # 8002eb90 <__func__.19>
    8001865c:	00018517          	auipc	a0,0x18
    80018660:	97c50513          	addi	a0,a0,-1668 # 8002ffd8 <__func__.0+0x2e8>
bool store_guest_page_fault_3(){
    80018664:	ec06                	sd	ra,24(sp)
    80018666:	e822                	sd	s0,16(sp)
    80018668:	e426                	sd	s1,8(sp)
    TEST_START();
    8001866a:	223140ef          	jal	8002d08c <printf>
    8001866e:	4529                	li	a0,10
    80018670:	70a130ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80018674:	450d                	li	a0,3
    80018676:	893e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001867a:	f67e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001867e:	b46e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018682:	8fae80ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80018686:	450d                	li	a0,3
    80018688:	881e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001868c:	4509                	li	a0,2
    8001868e:	f9ae80ef          	jal	80000e28 <set_prev_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80018692:	f7ae80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80018696:	000807b7          	lui	a5,0x80
    8001869a:	1007a073          	csrs	sstatus,a5
    8001869e:	37ab77b7          	lui	a5,0x37ab7
    800186a2:	00100737          	lui	a4,0x100
    800186a6:	078a                	slli	a5,a5,0x2
    800186a8:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800186ac:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800186b0:	0732                	slli	a4,a4,0xc
    800186b2:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    800186b6:	08200593          	li	a1,130
    800186ba:	0001d617          	auipc	a2,0x1d
    800186be:	6d660613          	addi	a2,a2,1750 # 80035d90 <__func__.0+0x60a0>
    800186c2:	00018517          	auipc	a0,0x18
    800186c6:	92e50513          	addi	a0,a0,-1746 # 8002fff0 <__func__.0+0x300>
    800186ca:	1c3140ef          	jal	8002d08c <printf>
    800186ce:	00040797          	auipc	a5,0x40
    800186d2:	9437c783          	lbu	a5,-1725(a5) # 80058011 <excpt+0x1>
    800186d6:	00040497          	auipc	s1,0x40
    800186da:	93a48493          	addi	s1,s1,-1734 # 80058010 <excpt>
    800186de:	00018597          	auipc	a1,0x18
    800186e2:	8ea58593          	addi	a1,a1,-1814 # 8002ffc8 <__func__.0+0x2d8>
    800186e6:	cf89                	beqz	a5,80018700 <store_guest_page_fault_3+0xae>
    800186e8:	6498                	ld	a4,8(s1)
    800186ea:	47dd                	li	a5,23
    800186ec:	00018597          	auipc	a1,0x18
    800186f0:	8cc58593          	addi	a1,a1,-1844 # 8002ffb8 <__func__.0+0x2c8>
    800186f4:	00f70663          	beq	a4,a5,80018700 <store_guest_page_fault_3+0xae>
    800186f8:	00018597          	auipc	a1,0x18
    800186fc:	8d058593          	addi	a1,a1,-1840 # 8002ffc8 <__func__.0+0x2d8>
    80018700:	00018517          	auipc	a0,0x18
    80018704:	90850513          	addi	a0,a0,-1784 # 80030008 <__func__.0+0x318>
    80018708:	185140ef          	jal	8002d08c <printf>
    8001870c:	00040797          	auipc	a5,0x40
    80018710:	9057c783          	lbu	a5,-1787(a5) # 80058011 <excpt+0x1>
    80018714:	c789                	beqz	a5,8001871e <store_guest_page_fault_3+0xcc>
    80018716:	6498                	ld	a4,8(s1)
    80018718:	47dd                	li	a5,23
    8001871a:	00f70c63          	beq	a4,a5,80018732 <store_guest_page_fault_3+0xe0>
    8001871e:	00018517          	auipc	a0,0x18
    80018722:	8f250513          	addi	a0,a0,-1806 # 80030010 <__func__.0+0x320>
    80018726:	167140ef          	jal	8002d08c <printf>
    8001872a:	02900513          	li	a0,41
    8001872e:	64c130ef          	jal	8002bd7a <putchar>
    80018732:	4529                	li	a0,10
    80018734:	646130ef          	jal	8002bd7a <putchar>
    80018738:	00040417          	auipc	s0,0x40
    8001873c:	8d944403          	lbu	s0,-1831(s0) # 80058011 <excpt+0x1>
    80018740:	c409                	beqz	s0,8001874a <store_guest_page_fault_3+0xf8>
    80018742:	6498                	ld	a4,8(s1)
    80018744:	47dd                	li	a5,23
    80018746:	02f70c63          	beq	a4,a5,8001877e <store_guest_page_fault_3+0x12c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001874a:	000807b7          	lui	a5,0x80
    8001874e:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018752:	4401                	li	s0,0

    TEST_END();
    80018754:	00018597          	auipc	a1,0x18
    80018758:	87458593          	addi	a1,a1,-1932 # 8002ffc8 <__func__.0+0x2d8>
    8001875c:	00018517          	auipc	a0,0x18
    80018760:	91450513          	addi	a0,a0,-1772 # 80030070 <__func__.0+0x380>
    80018764:	129140ef          	jal	8002d08c <printf>
    80018768:	4511                	li	a0,4
    8001876a:	f9ee80ef          	jal	80000f08 <goto_priv>
    8001876e:	964e90ef          	jal	800018d2 <reset_state>
}
    80018772:	60e2                	ld	ra,24(sp)
    80018774:	8522                	mv	a0,s0
    80018776:	6442                	ld	s0,16(sp)
    80018778:	64a2                	ld	s1,8(sp)
    8001877a:	6105                	addi	sp,sp,32
    8001877c:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001877e:	000807b7          	lui	a5,0x80
    80018782:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80018786:	00018597          	auipc	a1,0x18
    8001878a:	83258593          	addi	a1,a1,-1998 # 8002ffb8 <__func__.0+0x2c8>
    8001878e:	b7f9                	j	8001875c <store_guest_page_fault_3+0x10a>

0000000080018790 <store_guest_page_fault_4>:

bool store_guest_page_fault_4(){
    80018790:	1101                	addi	sp,sp,-32

    TEST_START();
    80018792:	00016597          	auipc	a1,0x16
    80018796:	41e58593          	addi	a1,a1,1054 # 8002ebb0 <__func__.18>
    8001879a:	00018517          	auipc	a0,0x18
    8001879e:	83e50513          	addi	a0,a0,-1986 # 8002ffd8 <__func__.0+0x2e8>
bool store_guest_page_fault_4(){
    800187a2:	ec06                	sd	ra,24(sp)
    800187a4:	e822                	sd	s0,16(sp)
    800187a6:	e426                	sd	s1,8(sp)
    TEST_START();
    800187a8:	0e5140ef          	jal	8002d08c <printf>
    800187ac:	4529                	li	a0,10
    800187ae:	5cc130ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800187b2:	450d                	li	a0,3
    800187b4:	f54e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800187b8:	e29e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800187bc:	a08e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800187c0:	fbde70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800187c4:	4511                	li	a0,4
    800187c6:	f42e80ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800187ca:	000407b7          	lui	a5,0x40
    800187ce:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    800187d2:	450d                	li	a0,3
    800187d4:	f34e80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    800187d8:	4509                	li	a0,2
    800187da:	e4ee80ef          	jal	80000e28 <set_prev_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800187de:	e2ee80ef          	jal	80000e0c <test_setup_except_function>
    800187e2:	37ab77b7          	lui	a5,0x37ab7
    800187e6:	00080737          	lui	a4,0x80
    800187ea:	078a                	slli	a5,a5,0x2
    800187ec:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    800187ee:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800187f2:	0736                	slli	a4,a4,0xd
    800187f4:	6ef74073          	.insn	4, 0x6ef74073
    vaddr = hs_page_base(VSURWX_GUX);


    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    800187f8:	08200593          	li	a1,130
    800187fc:	0001d617          	auipc	a2,0x1d
    80018800:	60460613          	addi	a2,a2,1540 # 80035e00 <__func__.0+0x6110>
    80018804:	00017517          	auipc	a0,0x17
    80018808:	7ec50513          	addi	a0,a0,2028 # 8002fff0 <__func__.0+0x300>
    8001880c:	081140ef          	jal	8002d08c <printf>
    80018810:	00040797          	auipc	a5,0x40
    80018814:	8017c783          	lbu	a5,-2047(a5) # 80058011 <excpt+0x1>
    80018818:	0003f497          	auipc	s1,0x3f
    8001881c:	7f848493          	addi	s1,s1,2040 # 80058010 <excpt>
    80018820:	00017597          	auipc	a1,0x17
    80018824:	7a858593          	addi	a1,a1,1960 # 8002ffc8 <__func__.0+0x2d8>
    80018828:	cf89                	beqz	a5,80018842 <store_guest_page_fault_4+0xb2>
    8001882a:	6498                	ld	a4,8(s1)
    8001882c:	47bd                	li	a5,15
    8001882e:	00017597          	auipc	a1,0x17
    80018832:	78a58593          	addi	a1,a1,1930 # 8002ffb8 <__func__.0+0x2c8>
    80018836:	00f70663          	beq	a4,a5,80018842 <store_guest_page_fault_4+0xb2>
    8001883a:	00017597          	auipc	a1,0x17
    8001883e:	78e58593          	addi	a1,a1,1934 # 8002ffc8 <__func__.0+0x2d8>
    80018842:	00017517          	auipc	a0,0x17
    80018846:	7c650513          	addi	a0,a0,1990 # 80030008 <__func__.0+0x318>
    8001884a:	043140ef          	jal	8002d08c <printf>
    8001884e:	0003f797          	auipc	a5,0x3f
    80018852:	7c37c783          	lbu	a5,1987(a5) # 80058011 <excpt+0x1>
    80018856:	c789                	beqz	a5,80018860 <store_guest_page_fault_4+0xd0>
    80018858:	6498                	ld	a4,8(s1)
    8001885a:	47bd                	li	a5,15
    8001885c:	00f70c63          	beq	a4,a5,80018874 <store_guest_page_fault_4+0xe4>
    80018860:	00017517          	auipc	a0,0x17
    80018864:	7b050513          	addi	a0,a0,1968 # 80030010 <__func__.0+0x320>
    80018868:	025140ef          	jal	8002d08c <printf>
    8001886c:	02900513          	li	a0,41
    80018870:	50a130ef          	jal	8002bd7a <putchar>
    80018874:	4529                	li	a0,10
    80018876:	504130ef          	jal	8002bd7a <putchar>
    8001887a:	0003f417          	auipc	s0,0x3f
    8001887e:	79744403          	lbu	s0,1943(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80018882:	00017597          	auipc	a1,0x17
    80018886:	74658593          	addi	a1,a1,1862 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    8001888a:	cc11                	beqz	s0,800188a6 <store_guest_page_fault_4+0x116>
    8001888c:	6498                	ld	a4,8(s1)
    8001888e:	47bd                	li	a5,15
    TEST_END();
    80018890:	00017597          	auipc	a1,0x17
    80018894:	72858593          	addi	a1,a1,1832 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80018898:	00f70763          	beq	a4,a5,800188a6 <store_guest_page_fault_4+0x116>
    8001889c:	4401                	li	s0,0
    TEST_END();
    8001889e:	00017597          	auipc	a1,0x17
    800188a2:	72a58593          	addi	a1,a1,1834 # 8002ffc8 <__func__.0+0x2d8>
    800188a6:	00017517          	auipc	a0,0x17
    800188aa:	7ca50513          	addi	a0,a0,1994 # 80030070 <__func__.0+0x380>
    800188ae:	7de140ef          	jal	8002d08c <printf>
    800188b2:	4511                	li	a0,4
    800188b4:	e54e80ef          	jal	80000f08 <goto_priv>
    800188b8:	81ae90ef          	jal	800018d2 <reset_state>
}
    800188bc:	60e2                	ld	ra,24(sp)
    800188be:	8522                	mv	a0,s0
    800188c0:	6442                	ld	s0,16(sp)
    800188c2:	64a2                	ld	s1,8(sp)
    800188c4:	6105                	addi	sp,sp,32
    800188c6:	8082                	ret

00000000800188c8 <store_guest_page_fault_5>:

bool store_guest_page_fault_5(){
    800188c8:	1141                	addi	sp,sp,-16

    TEST_START();
    800188ca:	00016597          	auipc	a1,0x16
    800188ce:	30658593          	addi	a1,a1,774 # 8002ebd0 <__func__.17>
    800188d2:	00017517          	auipc	a0,0x17
    800188d6:	70650513          	addi	a0,a0,1798 # 8002ffd8 <__func__.0+0x2e8>
bool store_guest_page_fault_5(){
    800188da:	e406                	sd	ra,8(sp)
    800188dc:	e022                	sd	s0,0(sp)
    TEST_START();
    800188de:	7ae140ef          	jal	8002d08c <printf>
    800188e2:	4529                	li	a0,10
    800188e4:	496130ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800188e8:	450d                	li	a0,3
    800188ea:	e1ee80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800188ee:	cf3e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800188f2:	8d2e80ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800188f6:	e87e70ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    800188fa:	4511                	li	a0,4
    800188fc:	e0ce80ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018900:	000407b7          	lui	a5,0x40
    80018904:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80018908:	450d                	li	a0,3
    8001890a:	dfee80ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001890e:	4509                	li	a0,2
    80018910:	d18e80ef          	jal	80000e28 <set_prev_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80018914:	cf8e80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80018918:	37ab77b7          	lui	a5,0x37ab7
    8001891c:	00080737          	lui	a4,0x80
    80018920:	078a                	slli	a5,a5,0x2
    80018922:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80018924:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018928:	0736                	slli	a4,a4,0xd
    8001892a:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    8001892e:	08200593          	li	a1,130
    80018932:	0001d617          	auipc	a2,0x1d
    80018936:	50e60613          	addi	a2,a2,1294 # 80035e40 <__func__.0+0x6150>
    8001893a:	00017517          	auipc	a0,0x17
    8001893e:	6b650513          	addi	a0,a0,1718 # 8002fff0 <__func__.0+0x300>
    80018942:	74a140ef          	jal	8002d08c <printf>
    80018946:	0003f797          	auipc	a5,0x3f
    8001894a:	6cb7c783          	lbu	a5,1739(a5) # 80058011 <excpt+0x1>
    8001894e:	00017597          	auipc	a1,0x17
    80018952:	66a58593          	addi	a1,a1,1642 # 8002ffb8 <__func__.0+0x2c8>
    80018956:	c789                	beqz	a5,80018960 <store_guest_page_fault_5+0x98>
    80018958:	00017597          	auipc	a1,0x17
    8001895c:	67058593          	addi	a1,a1,1648 # 8002ffc8 <__func__.0+0x2d8>
    80018960:	00017517          	auipc	a0,0x17
    80018964:	6a850513          	addi	a0,a0,1704 # 80030008 <__func__.0+0x318>
    80018968:	724140ef          	jal	8002d08c <printf>
    8001896c:	0003f797          	auipc	a5,0x3f
    80018970:	6a57c783          	lbu	a5,1701(a5) # 80058011 <excpt+0x1>
    80018974:	e7a1                	bnez	a5,800189bc <store_guest_page_fault_5+0xf4>
    80018976:	4529                	li	a0,10
    80018978:	402130ef          	jal	8002bd7a <putchar>
    8001897c:	0003f797          	auipc	a5,0x3f
    80018980:	6957c783          	lbu	a5,1685(a5) # 80058011 <excpt+0x1>
    80018984:	e795                	bnez	a5,800189b0 <store_guest_page_fault_5+0xe8>
    80018986:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80018988:	00017597          	auipc	a1,0x17
    8001898c:	63058593          	addi	a1,a1,1584 # 8002ffb8 <__func__.0+0x2c8>
    80018990:	00017517          	auipc	a0,0x17
    80018994:	6e050513          	addi	a0,a0,1760 # 80030070 <__func__.0+0x380>
    80018998:	6f4140ef          	jal	8002d08c <printf>
    8001899c:	4511                	li	a0,4
    8001899e:	d6ae80ef          	jal	80000f08 <goto_priv>
    800189a2:	f31e80ef          	jal	800018d2 <reset_state>
}
    800189a6:	60a2                	ld	ra,8(sp)
    800189a8:	8522                	mv	a0,s0
    800189aa:	6402                	ld	s0,0(sp)
    800189ac:	0141                	addi	sp,sp,16
    800189ae:	8082                	ret
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    800189b0:	4401                	li	s0,0
    TEST_END();
    800189b2:	00017597          	auipc	a1,0x17
    800189b6:	61658593          	addi	a1,a1,1558 # 8002ffc8 <__func__.0+0x2d8>
    800189ba:	bfd9                	j	80018990 <store_guest_page_fault_5+0xc8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    800189bc:	00017517          	auipc	a0,0x17
    800189c0:	65450513          	addi	a0,a0,1620 # 80030010 <__func__.0+0x320>
    800189c4:	6c8140ef          	jal	8002d08c <printf>
    800189c8:	02900513          	li	a0,41
    800189cc:	3ae130ef          	jal	8002bd7a <putchar>
    800189d0:	b75d                	j	80018976 <store_guest_page_fault_5+0xae>

00000000800189d2 <store_guest_page_fault_6>:

bool store_guest_page_fault_6(){
    800189d2:	1101                	addi	sp,sp,-32

    TEST_START();
    800189d4:	00016597          	auipc	a1,0x16
    800189d8:	21c58593          	addi	a1,a1,540 # 8002ebf0 <__func__.16>
    800189dc:	00017517          	auipc	a0,0x17
    800189e0:	5fc50513          	addi	a0,a0,1532 # 8002ffd8 <__func__.0+0x2e8>
bool store_guest_page_fault_6(){
    800189e4:	ec06                	sd	ra,24(sp)
    800189e6:	e822                	sd	s0,16(sp)
    800189e8:	e426                	sd	s1,8(sp)
    TEST_START();
    800189ea:	6a2140ef          	jal	8002d08c <printf>
    800189ee:	4529                	li	a0,10
    800189f0:	38a130ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800189f4:	450d                	li	a0,3
    800189f6:	d12e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800189fa:	be7e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800189fe:	fc7e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018a02:	d7be70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018a06:	4509                	li	a0,2
    80018a08:	d00e80ef          	jal	80000f08 <goto_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80018a0c:	c00e80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80018a10:	37ab77b7          	lui	a5,0x37ab7
    80018a14:	00100737          	lui	a4,0x100
    80018a18:	078a                	slli	a5,a5,0x2
    80018a1a:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018a1e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018a22:	0732                	slli	a4,a4,0xc
    80018a24:	00f73023          	sd	a5,0(a4)

    vaddr = hs_page_base(VSRWX_GI);
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.v=0 leads to SGPF",
    80018a28:	08200593          	li	a1,130
    80018a2c:	0001d617          	auipc	a2,0x1d
    80018a30:	44c60613          	addi	a2,a2,1100 # 80035e78 <__func__.0+0x6188>
    80018a34:	00017517          	auipc	a0,0x17
    80018a38:	5bc50513          	addi	a0,a0,1468 # 8002fff0 <__func__.0+0x300>
    80018a3c:	650140ef          	jal	8002d08c <printf>
    80018a40:	0003f797          	auipc	a5,0x3f
    80018a44:	5d17c783          	lbu	a5,1489(a5) # 80058011 <excpt+0x1>
    80018a48:	0003f497          	auipc	s1,0x3f
    80018a4c:	5c848493          	addi	s1,s1,1480 # 80058010 <excpt>
    80018a50:	00017597          	auipc	a1,0x17
    80018a54:	57858593          	addi	a1,a1,1400 # 8002ffc8 <__func__.0+0x2d8>
    80018a58:	cf89                	beqz	a5,80018a72 <store_guest_page_fault_6+0xa0>
    80018a5a:	6498                	ld	a4,8(s1)
    80018a5c:	47dd                	li	a5,23
    80018a5e:	00017597          	auipc	a1,0x17
    80018a62:	55a58593          	addi	a1,a1,1370 # 8002ffb8 <__func__.0+0x2c8>
    80018a66:	00f70663          	beq	a4,a5,80018a72 <store_guest_page_fault_6+0xa0>
    80018a6a:	00017597          	auipc	a1,0x17
    80018a6e:	55e58593          	addi	a1,a1,1374 # 8002ffc8 <__func__.0+0x2d8>
    80018a72:	00017517          	auipc	a0,0x17
    80018a76:	59650513          	addi	a0,a0,1430 # 80030008 <__func__.0+0x318>
    80018a7a:	612140ef          	jal	8002d08c <printf>
    80018a7e:	0003f797          	auipc	a5,0x3f
    80018a82:	5937c783          	lbu	a5,1427(a5) # 80058011 <excpt+0x1>
    80018a86:	c789                	beqz	a5,80018a90 <store_guest_page_fault_6+0xbe>
    80018a88:	6498                	ld	a4,8(s1)
    80018a8a:	47dd                	li	a5,23
    80018a8c:	00f70c63          	beq	a4,a5,80018aa4 <store_guest_page_fault_6+0xd2>
    80018a90:	00017517          	auipc	a0,0x17
    80018a94:	58050513          	addi	a0,a0,1408 # 80030010 <__func__.0+0x320>
    80018a98:	5f4140ef          	jal	8002d08c <printf>
    80018a9c:	02900513          	li	a0,41
    80018aa0:	2da130ef          	jal	8002bd7a <putchar>
    80018aa4:	4529                	li	a0,10
    80018aa6:	2d4130ef          	jal	8002bd7a <putchar>
    80018aaa:	0003f797          	auipc	a5,0x3f
    80018aae:	5677c783          	lbu	a5,1383(a5) # 80058011 <excpt+0x1>
    80018ab2:	4401                	li	s0,0
    80018ab4:	c789                	beqz	a5,80018abe <store_guest_page_fault_6+0xec>
    80018ab6:	6480                	ld	s0,8(s1)
    80018ab8:	1425                	addi	s0,s0,-23
    80018aba:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80018abe:	b4ee80ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80018ac2:	001007b7          	lui	a5,0x100
    80018ac6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018aca:	7771                	lui	a4,0xffffc
    80018acc:	07b2                	slli	a5,a5,0xc
    80018ace:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80018ad2:	00e79023          	sh	a4,0(a5)
    addr = hs_page_base(VSRWX_GI);

    sh(addr,0xbeef);   
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018ad6:	08200593          	li	a1,130
    80018ada:	0001d617          	auipc	a2,0x1d
    80018ade:	3ee60613          	addi	a2,a2,1006 # 80035ec8 <__func__.0+0x61d8>
    80018ae2:	00017517          	auipc	a0,0x17
    80018ae6:	50e50513          	addi	a0,a0,1294 # 8002fff0 <__func__.0+0x300>
    80018aea:	5a2140ef          	jal	8002d08c <printf>
    80018aee:	0003f797          	auipc	a5,0x3f
    80018af2:	5237c783          	lbu	a5,1315(a5) # 80058011 <excpt+0x1>
    80018af6:	00017597          	auipc	a1,0x17
    80018afa:	4d258593          	addi	a1,a1,1234 # 8002ffc8 <__func__.0+0x2d8>
    80018afe:	cf89                	beqz	a5,80018b18 <store_guest_page_fault_6+0x146>
    80018b00:	6498                	ld	a4,8(s1)
    80018b02:	47dd                	li	a5,23
    80018b04:	00017597          	auipc	a1,0x17
    80018b08:	4b458593          	addi	a1,a1,1204 # 8002ffb8 <__func__.0+0x2c8>
    80018b0c:	00f70663          	beq	a4,a5,80018b18 <store_guest_page_fault_6+0x146>
    80018b10:	00017597          	auipc	a1,0x17
    80018b14:	4b858593          	addi	a1,a1,1208 # 8002ffc8 <__func__.0+0x2d8>
    80018b18:	00017517          	auipc	a0,0x17
    80018b1c:	4f050513          	addi	a0,a0,1264 # 80030008 <__func__.0+0x318>
    80018b20:	56c140ef          	jal	8002d08c <printf>
    80018b24:	0003f797          	auipc	a5,0x3f
    80018b28:	4ed7c783          	lbu	a5,1261(a5) # 80058011 <excpt+0x1>
    80018b2c:	c789                	beqz	a5,80018b36 <store_guest_page_fault_6+0x164>
    80018b2e:	6498                	ld	a4,8(s1)
    80018b30:	47dd                	li	a5,23
    80018b32:	00f70c63          	beq	a4,a5,80018b4a <store_guest_page_fault_6+0x178>
    80018b36:	00017517          	auipc	a0,0x17
    80018b3a:	4da50513          	addi	a0,a0,1242 # 80030010 <__func__.0+0x320>
    80018b3e:	54e140ef          	jal	8002d08c <printf>
    80018b42:	02900513          	li	a0,41
    80018b46:	234130ef          	jal	8002bd7a <putchar>
    80018b4a:	4529                	li	a0,10
    80018b4c:	22e130ef          	jal	8002bd7a <putchar>
    80018b50:	c015                	beqz	s0,80018b74 <store_guest_page_fault_6+0x1a2>
    80018b52:	0003f417          	auipc	s0,0x3f
    80018b56:	4bf44403          	lbu	s0,1215(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018b5a:	00017597          	auipc	a1,0x17
    80018b5e:	46e58593          	addi	a1,a1,1134 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018b62:	cc11                	beqz	s0,80018b7e <store_guest_page_fault_6+0x1ac>
    80018b64:	6498                	ld	a4,8(s1)
    80018b66:	47dd                	li	a5,23
    TEST_END();
    80018b68:	00017597          	auipc	a1,0x17
    80018b6c:	45058593          	addi	a1,a1,1104 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018b70:	00f70763          	beq	a4,a5,80018b7e <store_guest_page_fault_6+0x1ac>
    80018b74:	4401                	li	s0,0
    TEST_END();
    80018b76:	00017597          	auipc	a1,0x17
    80018b7a:	45258593          	addi	a1,a1,1106 # 8002ffc8 <__func__.0+0x2d8>
    80018b7e:	00017517          	auipc	a0,0x17
    80018b82:	4f250513          	addi	a0,a0,1266 # 80030070 <__func__.0+0x380>
    80018b86:	506140ef          	jal	8002d08c <printf>
    80018b8a:	4511                	li	a0,4
    80018b8c:	b7ce80ef          	jal	80000f08 <goto_priv>
    80018b90:	d43e80ef          	jal	800018d2 <reset_state>

}
    80018b94:	60e2                	ld	ra,24(sp)
    80018b96:	8522                	mv	a0,s0
    80018b98:	6442                	ld	s0,16(sp)
    80018b9a:	64a2                	ld	s1,8(sp)
    80018b9c:	6105                	addi	sp,sp,32
    80018b9e:	8082                	ret

0000000080018ba0 <store_guest_page_fault_7>:

bool store_guest_page_fault_7(){
    80018ba0:	1101                	addi	sp,sp,-32

    TEST_START();
    80018ba2:	00016597          	auipc	a1,0x16
    80018ba6:	06e58593          	addi	a1,a1,110 # 8002ec10 <__func__.15>
    80018baa:	00017517          	auipc	a0,0x17
    80018bae:	42e50513          	addi	a0,a0,1070 # 8002ffd8 <__func__.0+0x2e8>
bool store_guest_page_fault_7(){
    80018bb2:	ec06                	sd	ra,24(sp)
    80018bb4:	e822                	sd	s0,16(sp)
    80018bb6:	e426                	sd	s1,8(sp)
    TEST_START();
    80018bb8:	4d4140ef          	jal	8002d08c <printf>
    80018bbc:	4529                	li	a0,10
    80018bbe:	1bc130ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80018bc2:	450d                	li	a0,3
    80018bc4:	b44e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018bc8:	a19e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018bcc:	df9e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018bd0:	bade70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018bd4:	4509                	li	a0,2
    80018bd6:	b32e80ef          	jal	80000f08 <goto_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80018bda:	a32e80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018bde:	000807b7          	lui	a5,0x80
    80018be2:	1007b073          	csrc	sstatus,a5
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80018be6:	37ab77b7          	lui	a5,0x37ab7
    80018bea:	00100737          	lui	a4,0x100
    80018bee:	078a                	slli	a5,a5,0x2
    80018bf0:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018bf4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018bf8:	0732                	slli	a4,a4,0xc
    80018bfa:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018bfe:	08200593          	li	a1,130
    80018c02:	0001d617          	auipc	a2,0x1d
    80018c06:	31e60613          	addi	a2,a2,798 # 80035f20 <__func__.0+0x6230>
    80018c0a:	00017517          	auipc	a0,0x17
    80018c0e:	3e650513          	addi	a0,a0,998 # 8002fff0 <__func__.0+0x300>
    80018c12:	47a140ef          	jal	8002d08c <printf>
    80018c16:	0003f797          	auipc	a5,0x3f
    80018c1a:	3fb7c783          	lbu	a5,1019(a5) # 80058011 <excpt+0x1>
    80018c1e:	0003f497          	auipc	s1,0x3f
    80018c22:	3f248493          	addi	s1,s1,1010 # 80058010 <excpt>
    80018c26:	00017597          	auipc	a1,0x17
    80018c2a:	3a258593          	addi	a1,a1,930 # 8002ffc8 <__func__.0+0x2d8>
    80018c2e:	cf89                	beqz	a5,80018c48 <store_guest_page_fault_7+0xa8>
    80018c30:	6498                	ld	a4,8(s1)
    80018c32:	47dd                	li	a5,23
    80018c34:	00017597          	auipc	a1,0x17
    80018c38:	38458593          	addi	a1,a1,900 # 8002ffb8 <__func__.0+0x2c8>
    80018c3c:	00f70663          	beq	a4,a5,80018c48 <store_guest_page_fault_7+0xa8>
    80018c40:	00017597          	auipc	a1,0x17
    80018c44:	38858593          	addi	a1,a1,904 # 8002ffc8 <__func__.0+0x2d8>
    80018c48:	00017517          	auipc	a0,0x17
    80018c4c:	3c050513          	addi	a0,a0,960 # 80030008 <__func__.0+0x318>
    80018c50:	43c140ef          	jal	8002d08c <printf>
    80018c54:	0003f797          	auipc	a5,0x3f
    80018c58:	3bd7c783          	lbu	a5,957(a5) # 80058011 <excpt+0x1>
    80018c5c:	c789                	beqz	a5,80018c66 <store_guest_page_fault_7+0xc6>
    80018c5e:	6498                	ld	a4,8(s1)
    80018c60:	47dd                	li	a5,23
    80018c62:	00f70c63          	beq	a4,a5,80018c7a <store_guest_page_fault_7+0xda>
    80018c66:	00017517          	auipc	a0,0x17
    80018c6a:	3aa50513          	addi	a0,a0,938 # 80030010 <__func__.0+0x320>
    80018c6e:	41e140ef          	jal	8002d08c <printf>
    80018c72:	02900513          	li	a0,41
    80018c76:	104130ef          	jal	8002bd7a <putchar>
    80018c7a:	4529                	li	a0,10
    80018c7c:	0fe130ef          	jal	8002bd7a <putchar>
    80018c80:	0003f417          	auipc	s0,0x3f
    80018c84:	39144403          	lbu	s0,913(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018c88:	00017597          	auipc	a1,0x17
    80018c8c:	34058593          	addi	a1,a1,832 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018c90:	cc11                	beqz	s0,80018cac <store_guest_page_fault_7+0x10c>
    80018c92:	6498                	ld	a4,8(s1)
    80018c94:	47dd                	li	a5,23
    TEST_END();
    80018c96:	00017597          	auipc	a1,0x17
    80018c9a:	32258593          	addi	a1,a1,802 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018c9e:	00f70763          	beq	a4,a5,80018cac <store_guest_page_fault_7+0x10c>
    80018ca2:	4401                	li	s0,0
    TEST_END();
    80018ca4:	00017597          	auipc	a1,0x17
    80018ca8:	32458593          	addi	a1,a1,804 # 8002ffc8 <__func__.0+0x2d8>
    80018cac:	00017517          	auipc	a0,0x17
    80018cb0:	3c450513          	addi	a0,a0,964 # 80030070 <__func__.0+0x380>
    80018cb4:	3d8140ef          	jal	8002d08c <printf>
    80018cb8:	4511                	li	a0,4
    80018cba:	a4ee80ef          	jal	80000f08 <goto_priv>
    80018cbe:	c15e80ef          	jal	800018d2 <reset_state>
}
    80018cc2:	60e2                	ld	ra,24(sp)
    80018cc4:	8522                	mv	a0,s0
    80018cc6:	6442                	ld	s0,16(sp)
    80018cc8:	64a2                	ld	s1,8(sp)
    80018cca:	6105                	addi	sp,sp,32
    80018ccc:	8082                	ret

0000000080018cce <store_guest_page_fault_8>:

bool store_guest_page_fault_8(){
    80018cce:	1101                	addi	sp,sp,-32

    TEST_START();
    80018cd0:	00016597          	auipc	a1,0x16
    80018cd4:	f6058593          	addi	a1,a1,-160 # 8002ec30 <__func__.14>
    80018cd8:	00017517          	auipc	a0,0x17
    80018cdc:	30050513          	addi	a0,a0,768 # 8002ffd8 <__func__.0+0x2e8>
bool store_guest_page_fault_8(){
    80018ce0:	ec06                	sd	ra,24(sp)
    80018ce2:	e822                	sd	s0,16(sp)
    80018ce4:	e426                	sd	s1,8(sp)
    TEST_START();
    80018ce6:	3a6140ef          	jal	8002d08c <printf>
    80018cea:	4529                	li	a0,10
    80018cec:	08e130ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80018cf0:	450d                	li	a0,3
    80018cf2:	a16e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018cf6:	8ebe70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018cfa:	ccbe70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018cfe:	a7fe70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018d02:	4509                	li	a0,2
    80018d04:	a04e80ef          	jal	80000f08 <goto_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80018d08:	904e80ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80018d0c:	000807b7          	lui	a5,0x80
    80018d10:	1007a073          	csrs	sstatus,a5
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80018d14:	001007b7          	lui	a5,0x100
    80018d18:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018d1c:	7771                	lui	a4,0xffffc
    80018d1e:	07b2                	slli	a5,a5,0xc
    80018d20:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80018d24:	00e79023          	sh	a4,0(a5)
    sh(vaddr,0xbeef);
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018d28:	08200593          	li	a1,130
    80018d2c:	0001d617          	auipc	a2,0x1d
    80018d30:	25460613          	addi	a2,a2,596 # 80035f80 <__func__.0+0x6290>
    80018d34:	00017517          	auipc	a0,0x17
    80018d38:	2bc50513          	addi	a0,a0,700 # 8002fff0 <__func__.0+0x300>
    80018d3c:	350140ef          	jal	8002d08c <printf>
    80018d40:	0003f797          	auipc	a5,0x3f
    80018d44:	2d17c783          	lbu	a5,721(a5) # 80058011 <excpt+0x1>
    80018d48:	0003f497          	auipc	s1,0x3f
    80018d4c:	2c848493          	addi	s1,s1,712 # 80058010 <excpt>
    80018d50:	00017597          	auipc	a1,0x17
    80018d54:	27858593          	addi	a1,a1,632 # 8002ffc8 <__func__.0+0x2d8>
    80018d58:	cf89                	beqz	a5,80018d72 <store_guest_page_fault_8+0xa4>
    80018d5a:	6498                	ld	a4,8(s1)
    80018d5c:	47dd                	li	a5,23
    80018d5e:	00017597          	auipc	a1,0x17
    80018d62:	25a58593          	addi	a1,a1,602 # 8002ffb8 <__func__.0+0x2c8>
    80018d66:	00f70663          	beq	a4,a5,80018d72 <store_guest_page_fault_8+0xa4>
    80018d6a:	00017597          	auipc	a1,0x17
    80018d6e:	25e58593          	addi	a1,a1,606 # 8002ffc8 <__func__.0+0x2d8>
    80018d72:	00017517          	auipc	a0,0x17
    80018d76:	29650513          	addi	a0,a0,662 # 80030008 <__func__.0+0x318>
    80018d7a:	312140ef          	jal	8002d08c <printf>
    80018d7e:	0003f797          	auipc	a5,0x3f
    80018d82:	2937c783          	lbu	a5,659(a5) # 80058011 <excpt+0x1>
    80018d86:	c789                	beqz	a5,80018d90 <store_guest_page_fault_8+0xc2>
    80018d88:	6498                	ld	a4,8(s1)
    80018d8a:	47dd                	li	a5,23
    80018d8c:	00f70c63          	beq	a4,a5,80018da4 <store_guest_page_fault_8+0xd6>
    80018d90:	00017517          	auipc	a0,0x17
    80018d94:	28050513          	addi	a0,a0,640 # 80030010 <__func__.0+0x320>
    80018d98:	2f4140ef          	jal	8002d08c <printf>
    80018d9c:	02900513          	li	a0,41
    80018da0:	7db120ef          	jal	8002bd7a <putchar>
    80018da4:	4529                	li	a0,10
    80018da6:	7d5120ef          	jal	8002bd7a <putchar>
    80018daa:	0003f417          	auipc	s0,0x3f
    80018dae:	26744403          	lbu	s0,615(s0) # 80058011 <excpt+0x1>
    80018db2:	c409                	beqz	s0,80018dbc <store_guest_page_fault_8+0xee>
    80018db4:	6498                	ld	a4,8(s1)
    80018db6:	47dd                	li	a5,23
    80018db8:	02f70c63          	beq	a4,a5,80018df0 <store_guest_page_fault_8+0x122>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018dbc:	000807b7          	lui	a5,0x80
    80018dc0:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018dc4:	4401                	li	s0,0

    TEST_END();
    80018dc6:	00017597          	auipc	a1,0x17
    80018dca:	20258593          	addi	a1,a1,514 # 8002ffc8 <__func__.0+0x2d8>
    80018dce:	00017517          	auipc	a0,0x17
    80018dd2:	2a250513          	addi	a0,a0,674 # 80030070 <__func__.0+0x380>
    80018dd6:	2b6140ef          	jal	8002d08c <printf>
    80018dda:	4511                	li	a0,4
    80018ddc:	92ce80ef          	jal	80000f08 <goto_priv>
    80018de0:	af3e80ef          	jal	800018d2 <reset_state>
}
    80018de4:	60e2                	ld	ra,24(sp)
    80018de6:	8522                	mv	a0,s0
    80018de8:	6442                	ld	s0,16(sp)
    80018dea:	64a2                	ld	s1,8(sp)
    80018dec:	6105                	addi	sp,sp,32
    80018dee:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018df0:	000807b7          	lui	a5,0x80
    80018df4:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80018df8:	00017597          	auipc	a1,0x17
    80018dfc:	1c058593          	addi	a1,a1,448 # 8002ffb8 <__func__.0+0x2c8>
    80018e00:	b7f9                	j	80018dce <store_guest_page_fault_8+0x100>

0000000080018e02 <store_guest_page_fault_9>:

bool store_guest_page_fault_9(){
    80018e02:	1101                	addi	sp,sp,-32

    TEST_START();
    80018e04:	00016597          	auipc	a1,0x16
    80018e08:	e4c58593          	addi	a1,a1,-436 # 8002ec50 <__func__.13>
    80018e0c:	00017517          	auipc	a0,0x17
    80018e10:	1cc50513          	addi	a0,a0,460 # 8002ffd8 <__func__.0+0x2e8>
bool store_guest_page_fault_9(){
    80018e14:	ec06                	sd	ra,24(sp)
    80018e16:	e822                	sd	s0,16(sp)
    80018e18:	e426                	sd	s1,8(sp)
    TEST_START();
    80018e1a:	272140ef          	jal	8002d08c <printf>
    80018e1e:	4529                	li	a0,10
    80018e20:	75b120ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80018e24:	450d                	li	a0,3
    80018e26:	8e2e80ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018e2a:	fb6e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018e2e:	b97e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018e32:	94be70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80018e36:	4511                	li	a0,4
    80018e38:	8d0e80ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80018e3c:	000407b7          	lui	a5,0x40
    80018e40:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80018e44:	4509                	li	a0,2
    80018e46:	8c2e80ef          	jal	80000f08 <goto_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80018e4a:	fc3e70ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80018e4e:	37ab77b7          	lui	a5,0x37ab7
    80018e52:	00080737          	lui	a4,0x80
    80018e56:	078a                	slli	a5,a5,0x2
    80018e58:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80018e5a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018e5e:	0736                	slli	a4,a4,0xd
    80018e60:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GUX);


    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018e64:	08200593          	li	a1,130
    80018e68:	0001d617          	auipc	a2,0x1d
    80018e6c:	18860613          	addi	a2,a2,392 # 80035ff0 <__func__.0+0x6300>
    80018e70:	00017517          	auipc	a0,0x17
    80018e74:	18050513          	addi	a0,a0,384 # 8002fff0 <__func__.0+0x300>
    80018e78:	214140ef          	jal	8002d08c <printf>
    80018e7c:	0003f797          	auipc	a5,0x3f
    80018e80:	1957c783          	lbu	a5,405(a5) # 80058011 <excpt+0x1>
    80018e84:	0003f497          	auipc	s1,0x3f
    80018e88:	18c48493          	addi	s1,s1,396 # 80058010 <excpt>
    80018e8c:	00017597          	auipc	a1,0x17
    80018e90:	13c58593          	addi	a1,a1,316 # 8002ffc8 <__func__.0+0x2d8>
    80018e94:	cf89                	beqz	a5,80018eae <store_guest_page_fault_9+0xac>
    80018e96:	6498                	ld	a4,8(s1)
    80018e98:	47bd                	li	a5,15
    80018e9a:	00017597          	auipc	a1,0x17
    80018e9e:	11e58593          	addi	a1,a1,286 # 8002ffb8 <__func__.0+0x2c8>
    80018ea2:	00f70663          	beq	a4,a5,80018eae <store_guest_page_fault_9+0xac>
    80018ea6:	00017597          	auipc	a1,0x17
    80018eaa:	12258593          	addi	a1,a1,290 # 8002ffc8 <__func__.0+0x2d8>
    80018eae:	00017517          	auipc	a0,0x17
    80018eb2:	15a50513          	addi	a0,a0,346 # 80030008 <__func__.0+0x318>
    80018eb6:	1d6140ef          	jal	8002d08c <printf>
    80018eba:	0003f797          	auipc	a5,0x3f
    80018ebe:	1577c783          	lbu	a5,343(a5) # 80058011 <excpt+0x1>
    80018ec2:	c789                	beqz	a5,80018ecc <store_guest_page_fault_9+0xca>
    80018ec4:	6498                	ld	a4,8(s1)
    80018ec6:	47bd                	li	a5,15
    80018ec8:	00f70c63          	beq	a4,a5,80018ee0 <store_guest_page_fault_9+0xde>
    80018ecc:	00017517          	auipc	a0,0x17
    80018ed0:	14450513          	addi	a0,a0,324 # 80030010 <__func__.0+0x320>
    80018ed4:	1b8140ef          	jal	8002d08c <printf>
    80018ed8:	02900513          	li	a0,41
    80018edc:	69f120ef          	jal	8002bd7a <putchar>
    80018ee0:	4529                	li	a0,10
    80018ee2:	699120ef          	jal	8002bd7a <putchar>
    80018ee6:	0003f417          	auipc	s0,0x3f
    80018eea:	12b44403          	lbu	s0,299(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80018eee:	00017597          	auipc	a1,0x17
    80018ef2:	0da58593          	addi	a1,a1,218 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018ef6:	cc11                	beqz	s0,80018f12 <store_guest_page_fault_9+0x110>
    80018ef8:	6498                	ld	a4,8(s1)
    80018efa:	47bd                	li	a5,15
    TEST_END();
    80018efc:	00017597          	auipc	a1,0x17
    80018f00:	0bc58593          	addi	a1,a1,188 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018f04:	00f70763          	beq	a4,a5,80018f12 <store_guest_page_fault_9+0x110>
    80018f08:	4401                	li	s0,0
    TEST_END();
    80018f0a:	00017597          	auipc	a1,0x17
    80018f0e:	0be58593          	addi	a1,a1,190 # 8002ffc8 <__func__.0+0x2d8>
    80018f12:	00017517          	auipc	a0,0x17
    80018f16:	15e50513          	addi	a0,a0,350 # 80030070 <__func__.0+0x380>
    80018f1a:	172140ef          	jal	8002d08c <printf>
    80018f1e:	4511                	li	a0,4
    80018f20:	fe9e70ef          	jal	80000f08 <goto_priv>
    80018f24:	9afe80ef          	jal	800018d2 <reset_state>
}
    80018f28:	60e2                	ld	ra,24(sp)
    80018f2a:	8522                	mv	a0,s0
    80018f2c:	6442                	ld	s0,16(sp)
    80018f2e:	64a2                	ld	s1,8(sp)
    80018f30:	6105                	addi	sp,sp,32
    80018f32:	8082                	ret

0000000080018f34 <store_guest_page_fault_10>:

bool store_guest_page_fault_10(){
    80018f34:	1141                	addi	sp,sp,-16

    TEST_START();
    80018f36:	00016597          	auipc	a1,0x16
    80018f3a:	d3a58593          	addi	a1,a1,-710 # 8002ec70 <__func__.12>
    80018f3e:	00017517          	auipc	a0,0x17
    80018f42:	09a50513          	addi	a0,a0,154 # 8002ffd8 <__func__.0+0x2e8>
bool store_guest_page_fault_10(){
    80018f46:	e406                	sd	ra,8(sp)
    80018f48:	e022                	sd	s0,0(sp)
    TEST_START();
    80018f4a:	142140ef          	jal	8002d08c <printf>
    80018f4e:	4529                	li	a0,10
    80018f50:	62b120ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80018f54:	450d                	li	a0,3
    80018f56:	fb3e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80018f5a:	e86e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018f5e:	a67e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80018f62:	81be70ef          	jal	8000077c <vspt_init>

    goto_priv(PRIV_M);
    80018f66:	4511                	li	a0,4
    80018f68:	fa1e70ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018f6c:	000407b7          	lui	a5,0x40
    80018f70:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018f74:	4509                	li	a0,2
    80018f76:	f93e70ef          	jal	80000f08 <goto_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80018f7a:	e93e70ef          	jal	80000e0c <test_setup_except_function>
    80018f7e:	37ab77b7          	lui	a5,0x37ab7
    80018f82:	00080737          	lui	a4,0x80
    80018f86:	078a                	slli	a5,a5,0x2
    80018f88:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80018f8a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018f8e:	0736                	slli	a4,a4,0xd
    80018f90:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018f94:	08200593          	li	a1,130
    80018f98:	0001c617          	auipc	a2,0x1c
    80018f9c:	5e860613          	addi	a2,a2,1512 # 80035580 <__func__.0+0x5890>
    80018fa0:	00017517          	auipc	a0,0x17
    80018fa4:	05050513          	addi	a0,a0,80 # 8002fff0 <__func__.0+0x300>
    80018fa8:	0e4140ef          	jal	8002d08c <printf>
    80018fac:	0003f797          	auipc	a5,0x3f
    80018fb0:	0657c783          	lbu	a5,101(a5) # 80058011 <excpt+0x1>
    80018fb4:	00017597          	auipc	a1,0x17
    80018fb8:	00458593          	addi	a1,a1,4 # 8002ffb8 <__func__.0+0x2c8>
    80018fbc:	c789                	beqz	a5,80018fc6 <store_guest_page_fault_10+0x92>
    80018fbe:	00017597          	auipc	a1,0x17
    80018fc2:	00a58593          	addi	a1,a1,10 # 8002ffc8 <__func__.0+0x2d8>
    80018fc6:	00017517          	auipc	a0,0x17
    80018fca:	04250513          	addi	a0,a0,66 # 80030008 <__func__.0+0x318>
    80018fce:	0be140ef          	jal	8002d08c <printf>
    80018fd2:	0003f797          	auipc	a5,0x3f
    80018fd6:	03f7c783          	lbu	a5,63(a5) # 80058011 <excpt+0x1>
    80018fda:	e7a1                	bnez	a5,80019022 <store_guest_page_fault_10+0xee>
    80018fdc:	4529                	li	a0,10
    80018fde:	59d120ef          	jal	8002bd7a <putchar>
    80018fe2:	0003f797          	auipc	a5,0x3f
    80018fe6:	02f7c783          	lbu	a5,47(a5) # 80058011 <excpt+0x1>
    80018fea:	e795                	bnez	a5,80019016 <store_guest_page_fault_10+0xe2>
    80018fec:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80018fee:	00017597          	auipc	a1,0x17
    80018ff2:	fca58593          	addi	a1,a1,-54 # 8002ffb8 <__func__.0+0x2c8>
    80018ff6:	00017517          	auipc	a0,0x17
    80018ffa:	07a50513          	addi	a0,a0,122 # 80030070 <__func__.0+0x380>
    80018ffe:	08e140ef          	jal	8002d08c <printf>
    80019002:	4511                	li	a0,4
    80019004:	f05e70ef          	jal	80000f08 <goto_priv>
    80019008:	8cbe80ef          	jal	800018d2 <reset_state>
}
    8001900c:	60a2                	ld	ra,8(sp)
    8001900e:	8522                	mv	a0,s0
    80019010:	6402                	ld	s0,0(sp)
    80019012:	0141                	addi	sp,sp,16
    80019014:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80019016:	4401                	li	s0,0
    TEST_END();
    80019018:	00017597          	auipc	a1,0x17
    8001901c:	fb058593          	addi	a1,a1,-80 # 8002ffc8 <__func__.0+0x2d8>
    80019020:	bfd9                	j	80018ff6 <store_guest_page_fault_10+0xc2>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80019022:	00017517          	auipc	a0,0x17
    80019026:	fee50513          	addi	a0,a0,-18 # 80030010 <__func__.0+0x320>
    8001902a:	062140ef          	jal	8002d08c <printf>
    8001902e:	02900513          	li	a0,41
    80019032:	549120ef          	jal	8002bd7a <putchar>
    80019036:	b75d                	j	80018fdc <store_guest_page_fault_10+0xa8>

0000000080019038 <amo_guest_page_fault_1>:

bool amo_guest_page_fault_1(){
    80019038:	1101                	addi	sp,sp,-32

    TEST_START();
    8001903a:	00016597          	auipc	a1,0x16
    8001903e:	c5658593          	addi	a1,a1,-938 # 8002ec90 <__func__.11>
    80019042:	00017517          	auipc	a0,0x17
    80019046:	f9650513          	addi	a0,a0,-106 # 8002ffd8 <__func__.0+0x2e8>
bool amo_guest_page_fault_1(){
    8001904a:	ec06                	sd	ra,24(sp)
    8001904c:	e822                	sd	s0,16(sp)
    8001904e:	e426                	sd	s1,8(sp)
    80019050:	e04a                	sd	s2,0(sp)
    TEST_START();
    80019052:	03a140ef          	jal	8002d08c <printf>
    80019056:	4529                	li	a0,10
    80019058:	523120ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    8001905c:	450d                	li	a0,3
    8001905e:	eabe70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019062:	d7ee70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019066:	95fe70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001906a:	f12e70ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0x1;  
    goto_priv(PRIV_VS);
    8001906e:	4509                	li	a0,2
    80019070:	e99e70ef          	jal	80000f08 <goto_priv>


    //执行原子指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80019074:	d99e70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80019078:	00100737          	lui	a4,0x100
    8001907c:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80019080:	4785                	li	a5,1
    80019082:	0732                	slli	a4,a4,0xc
    80019084:	00f727af          	amoadd.w	a5,a5,(a4)


    addr = hs_page_base(VSRWX_GI);
    value = amoadd_w(addr,value);
    
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80019088:	08200593          	li	a1,130
    8001908c:	0001d617          	auipc	a2,0x1d
    80019090:	f9c60613          	addi	a2,a2,-100 # 80036028 <__func__.0+0x6338>
    80019094:	00017517          	auipc	a0,0x17
    80019098:	f5c50513          	addi	a0,a0,-164 # 8002fff0 <__func__.0+0x300>
    value = amoadd_w(addr,value);
    8001909c:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    800190a0:	7ed130ef          	jal	8002d08c <printf>
    800190a4:	0003f797          	auipc	a5,0x3f
    800190a8:	f6d7c783          	lbu	a5,-147(a5) # 80058011 <excpt+0x1>
    value = amoadd_w(addr,value);
    800190ac:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    800190ae:	0003f917          	auipc	s2,0x3f
    800190b2:	f6290913          	addi	s2,s2,-158 # 80058010 <excpt>
    800190b6:	00017597          	auipc	a1,0x17
    800190ba:	f1258593          	addi	a1,a1,-238 # 8002ffc8 <__func__.0+0x2d8>
    800190be:	cf91                	beqz	a5,800190da <amo_guest_page_fault_1+0xa2>
    800190c0:	00893703          	ld	a4,8(s2)
    800190c4:	47dd                	li	a5,23
    800190c6:	00017597          	auipc	a1,0x17
    800190ca:	ef258593          	addi	a1,a1,-270 # 8002ffb8 <__func__.0+0x2c8>
    800190ce:	00f70663          	beq	a4,a5,800190da <amo_guest_page_fault_1+0xa2>
    800190d2:	00017597          	auipc	a1,0x17
    800190d6:	ef658593          	addi	a1,a1,-266 # 8002ffc8 <__func__.0+0x2d8>
    800190da:	00017517          	auipc	a0,0x17
    800190de:	f2e50513          	addi	a0,a0,-210 # 80030008 <__func__.0+0x318>
    800190e2:	7ab130ef          	jal	8002d08c <printf>
    800190e6:	0003f797          	auipc	a5,0x3f
    800190ea:	f2b7c783          	lbu	a5,-213(a5) # 80058011 <excpt+0x1>
    800190ee:	c791                	beqz	a5,800190fa <amo_guest_page_fault_1+0xc2>
    800190f0:	00893703          	ld	a4,8(s2)
    800190f4:	47dd                	li	a5,23
    800190f6:	00f70c63          	beq	a4,a5,8001910e <amo_guest_page_fault_1+0xd6>
    800190fa:	00017517          	auipc	a0,0x17
    800190fe:	f1650513          	addi	a0,a0,-234 # 80030010 <__func__.0+0x320>
    80019102:	78b130ef          	jal	8002d08c <printf>
    80019106:	02900513          	li	a0,41
    8001910a:	471120ef          	jal	8002bd7a <putchar>
    8001910e:	4529                	li	a0,10
    80019110:	46b120ef          	jal	8002bd7a <putchar>
    80019114:	0003f797          	auipc	a5,0x3f
    80019118:	efd7c783          	lbu	a5,-259(a5) # 80058011 <excpt+0x1>
    8001911c:	4481                	li	s1,0
    8001911e:	c791                	beqz	a5,8001912a <amo_guest_page_fault_1+0xf2>
    80019120:	00893483          	ld	s1,8(s2)
    80019124:	14a5                	addi	s1,s1,-23
    80019126:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行原子相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    8001912a:	ce3e70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8001912e:	001007b7          	lui	a5,0x100
    80019132:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80019136:	8722                	mv	a4,s0
    80019138:	07b2                	slli	a5,a5,0xc
    8001913a:	a0e7b72f          	amomax.d	a4,a4,(a5)
    vaddr = hs_page_base(VSRWX_GI);
    value = amomax_d(vaddr,value);

    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001913e:	08200593          	li	a1,130
    80019142:	0001d617          	auipc	a2,0x1d
    80019146:	f3660613          	addi	a2,a2,-202 # 80036078 <__func__.0+0x6388>
    8001914a:	00017517          	auipc	a0,0x17
    8001914e:	ea650513          	addi	a0,a0,-346 # 8002fff0 <__func__.0+0x300>
    80019152:	73b130ef          	jal	8002d08c <printf>
    80019156:	0003f797          	auipc	a5,0x3f
    8001915a:	ebb7c783          	lbu	a5,-325(a5) # 80058011 <excpt+0x1>
    8001915e:	00017597          	auipc	a1,0x17
    80019162:	e6a58593          	addi	a1,a1,-406 # 8002ffc8 <__func__.0+0x2d8>
    80019166:	cf91                	beqz	a5,80019182 <amo_guest_page_fault_1+0x14a>
    80019168:	00893703          	ld	a4,8(s2)
    8001916c:	47dd                	li	a5,23
    8001916e:	00017597          	auipc	a1,0x17
    80019172:	e4a58593          	addi	a1,a1,-438 # 8002ffb8 <__func__.0+0x2c8>
    80019176:	00f70663          	beq	a4,a5,80019182 <amo_guest_page_fault_1+0x14a>
    8001917a:	00017597          	auipc	a1,0x17
    8001917e:	e4e58593          	addi	a1,a1,-434 # 8002ffc8 <__func__.0+0x2d8>
    80019182:	00017517          	auipc	a0,0x17
    80019186:	e8650513          	addi	a0,a0,-378 # 80030008 <__func__.0+0x318>
    8001918a:	703130ef          	jal	8002d08c <printf>
    8001918e:	0003f797          	auipc	a5,0x3f
    80019192:	e837c783          	lbu	a5,-381(a5) # 80058011 <excpt+0x1>
    80019196:	c791                	beqz	a5,800191a2 <amo_guest_page_fault_1+0x16a>
    80019198:	00893703          	ld	a4,8(s2)
    8001919c:	47dd                	li	a5,23
    8001919e:	00f70c63          	beq	a4,a5,800191b6 <amo_guest_page_fault_1+0x17e>
    800191a2:	00017517          	auipc	a0,0x17
    800191a6:	e6e50513          	addi	a0,a0,-402 # 80030010 <__func__.0+0x320>
    800191aa:	6e3130ef          	jal	8002d08c <printf>
    800191ae:	02900513          	li	a0,41
    800191b2:	3c9120ef          	jal	8002bd7a <putchar>
    800191b6:	4529                	li	a0,10
    800191b8:	3c3120ef          	jal	8002bd7a <putchar>
    800191bc:	c09d                	beqz	s1,800191e2 <amo_guest_page_fault_1+0x1aa>
    800191be:	0003f417          	auipc	s0,0x3f
    800191c2:	e5344403          	lbu	s0,-429(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800191c6:	00017597          	auipc	a1,0x17
    800191ca:	e0258593          	addi	a1,a1,-510 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800191ce:	cc19                	beqz	s0,800191ec <amo_guest_page_fault_1+0x1b4>
    800191d0:	00893703          	ld	a4,8(s2)
    800191d4:	47dd                	li	a5,23
    TEST_END();
    800191d6:	00017597          	auipc	a1,0x17
    800191da:	de258593          	addi	a1,a1,-542 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800191de:	00f70763          	beq	a4,a5,800191ec <amo_guest_page_fault_1+0x1b4>
    800191e2:	4401                	li	s0,0
    TEST_END();
    800191e4:	00017597          	auipc	a1,0x17
    800191e8:	de458593          	addi	a1,a1,-540 # 8002ffc8 <__func__.0+0x2d8>
    800191ec:	00017517          	auipc	a0,0x17
    800191f0:	e8450513          	addi	a0,a0,-380 # 80030070 <__func__.0+0x380>
    800191f4:	699130ef          	jal	8002d08c <printf>
    800191f8:	4511                	li	a0,4
    800191fa:	d0fe70ef          	jal	80000f08 <goto_priv>
    800191fe:	ed4e80ef          	jal	800018d2 <reset_state>
}
    80019202:	60e2                	ld	ra,24(sp)
    80019204:	8522                	mv	a0,s0
    80019206:	6442                	ld	s0,16(sp)
    80019208:	64a2                	ld	s1,8(sp)
    8001920a:	6902                	ld	s2,0(sp)
    8001920c:	6105                	addi	sp,sp,32
    8001920e:	8082                	ret

0000000080019210 <amo_guest_page_fault_2>:

bool amo_guest_page_fault_2(){
    80019210:	1101                	addi	sp,sp,-32

    TEST_START();
    80019212:	00016597          	auipc	a1,0x16
    80019216:	a9658593          	addi	a1,a1,-1386 # 8002eca8 <__func__.10>
    8001921a:	00017517          	auipc	a0,0x17
    8001921e:	dbe50513          	addi	a0,a0,-578 # 8002ffd8 <__func__.0+0x2e8>
bool amo_guest_page_fault_2(){
    80019222:	ec06                	sd	ra,24(sp)
    80019224:	e822                	sd	s0,16(sp)
    80019226:	e426                	sd	s1,8(sp)
    TEST_START();
    80019228:	665130ef          	jal	8002d08c <printf>
    8001922c:	4529                	li	a0,10
    8001922e:	34d120ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80019232:	450d                	li	a0,3
    80019234:	cd5e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019238:	ba8e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001923c:	f88e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019240:	d3ce70ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80019244:	4509                	li	a0,2
    80019246:	cc3e70ef          	jal	80000f08 <goto_priv>
    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001924a:	bc3e70ef          	jal	80000e0c <test_setup_except_function>
    addr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001924e:	000807b7          	lui	a5,0x80
    80019252:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    80019256:	37ab77b7          	lui	a5,0x37ab7
    8001925a:	00100737          	lui	a4,0x100
    8001925e:	078a                	slli	a5,a5,0x2
    80019260:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80019264:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019268:	0732                	slli	a4,a4,0xc
    8001926a:	08f737af          	amoswap.d	a5,a5,(a4)
    value = amoswap_d(addr,value);
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001926e:	08200593          	li	a1,130
    80019272:	0001d617          	auipc	a2,0x1d
    80019276:	e6660613          	addi	a2,a2,-410 # 800360d8 <__func__.0+0x63e8>
    8001927a:	00017517          	auipc	a0,0x17
    8001927e:	d7650513          	addi	a0,a0,-650 # 8002fff0 <__func__.0+0x300>
    80019282:	60b130ef          	jal	8002d08c <printf>
    80019286:	0003f797          	auipc	a5,0x3f
    8001928a:	d8b7c783          	lbu	a5,-629(a5) # 80058011 <excpt+0x1>
    8001928e:	0003f497          	auipc	s1,0x3f
    80019292:	d8248493          	addi	s1,s1,-638 # 80058010 <excpt>
    80019296:	00017597          	auipc	a1,0x17
    8001929a:	d3258593          	addi	a1,a1,-718 # 8002ffc8 <__func__.0+0x2d8>
    8001929e:	cf89                	beqz	a5,800192b8 <amo_guest_page_fault_2+0xa8>
    800192a0:	6498                	ld	a4,8(s1)
    800192a2:	47dd                	li	a5,23
    800192a4:	00017597          	auipc	a1,0x17
    800192a8:	d1458593          	addi	a1,a1,-748 # 8002ffb8 <__func__.0+0x2c8>
    800192ac:	00f70663          	beq	a4,a5,800192b8 <amo_guest_page_fault_2+0xa8>
    800192b0:	00017597          	auipc	a1,0x17
    800192b4:	d1858593          	addi	a1,a1,-744 # 8002ffc8 <__func__.0+0x2d8>
    800192b8:	00017517          	auipc	a0,0x17
    800192bc:	d5050513          	addi	a0,a0,-688 # 80030008 <__func__.0+0x318>
    800192c0:	5cd130ef          	jal	8002d08c <printf>
    800192c4:	0003f797          	auipc	a5,0x3f
    800192c8:	d4d7c783          	lbu	a5,-691(a5) # 80058011 <excpt+0x1>
    800192cc:	c789                	beqz	a5,800192d6 <amo_guest_page_fault_2+0xc6>
    800192ce:	6498                	ld	a4,8(s1)
    800192d0:	47dd                	li	a5,23
    800192d2:	00f70c63          	beq	a4,a5,800192ea <amo_guest_page_fault_2+0xda>
    800192d6:	00017517          	auipc	a0,0x17
    800192da:	d3a50513          	addi	a0,a0,-710 # 80030010 <__func__.0+0x320>
    800192de:	5af130ef          	jal	8002d08c <printf>
    800192e2:	02900513          	li	a0,41
    800192e6:	295120ef          	jal	8002bd7a <putchar>
    800192ea:	4529                	li	a0,10
    800192ec:	28f120ef          	jal	8002bd7a <putchar>
    800192f0:	0003f417          	auipc	s0,0x3f
    800192f4:	d2144403          	lbu	s0,-735(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800192f8:	00017597          	auipc	a1,0x17
    800192fc:	cd058593          	addi	a1,a1,-816 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019300:	cc11                	beqz	s0,8001931c <amo_guest_page_fault_2+0x10c>
    80019302:	6498                	ld	a4,8(s1)
    80019304:	47dd                	li	a5,23
    TEST_END();
    80019306:	00017597          	auipc	a1,0x17
    8001930a:	cb258593          	addi	a1,a1,-846 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001930e:	00f70763          	beq	a4,a5,8001931c <amo_guest_page_fault_2+0x10c>
    80019312:	4401                	li	s0,0
    TEST_END();
    80019314:	00017597          	auipc	a1,0x17
    80019318:	cb458593          	addi	a1,a1,-844 # 8002ffc8 <__func__.0+0x2d8>
    8001931c:	00017517          	auipc	a0,0x17
    80019320:	d5450513          	addi	a0,a0,-684 # 80030070 <__func__.0+0x380>
    80019324:	569130ef          	jal	8002d08c <printf>
    80019328:	4511                	li	a0,4
    8001932a:	bdfe70ef          	jal	80000f08 <goto_priv>
    8001932e:	da4e80ef          	jal	800018d2 <reset_state>
}
    80019332:	60e2                	ld	ra,24(sp)
    80019334:	8522                	mv	a0,s0
    80019336:	6442                	ld	s0,16(sp)
    80019338:	64a2                	ld	s1,8(sp)
    8001933a:	6105                	addi	sp,sp,32
    8001933c:	8082                	ret

000000008001933e <amo_guest_page_fault_3>:

bool amo_guest_page_fault_3(){
    8001933e:	1101                	addi	sp,sp,-32

    TEST_START();
    80019340:	00016597          	auipc	a1,0x16
    80019344:	98058593          	addi	a1,a1,-1664 # 8002ecc0 <__func__.9>
    80019348:	00017517          	auipc	a0,0x17
    8001934c:	c9050513          	addi	a0,a0,-880 # 8002ffd8 <__func__.0+0x2e8>
bool amo_guest_page_fault_3(){
    80019350:	ec06                	sd	ra,24(sp)
    80019352:	e822                	sd	s0,16(sp)
    80019354:	e426                	sd	s1,8(sp)
    TEST_START();
    80019356:	537130ef          	jal	8002d08c <printf>
    8001935a:	4529                	li	a0,10
    8001935c:	21f120ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80019360:	450d                	li	a0,3
    80019362:	ba7e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019366:	a7ae70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001936a:	e5ae70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001936e:	c0ee70ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80019372:	4509                	li	a0,2
    80019374:	b95e70ef          	jal	80000f08 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80019378:	a95e70ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001937c:	000807b7          	lui	a5,0x80
    80019380:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    80019384:	37ab77b7          	lui	a5,0x37ab7
    80019388:	00100737          	lui	a4,0x100
    8001938c:	078a                	slli	a5,a5,0x2
    8001938e:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80019392:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019396:	0732                	slli	a4,a4,0xc
    80019398:	40f737af          	amoor.d	a5,a5,(a4)
    value = amoor_d(vaddr,value);
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001939c:	08200593          	li	a1,130
    800193a0:	0001d617          	auipc	a2,0x1d
    800193a4:	da060613          	addi	a2,a2,-608 # 80036140 <__func__.0+0x6450>
    800193a8:	00017517          	auipc	a0,0x17
    800193ac:	c4850513          	addi	a0,a0,-952 # 8002fff0 <__func__.0+0x300>
    800193b0:	4dd130ef          	jal	8002d08c <printf>
    800193b4:	0003f797          	auipc	a5,0x3f
    800193b8:	c5d7c783          	lbu	a5,-931(a5) # 80058011 <excpt+0x1>
    800193bc:	0003f497          	auipc	s1,0x3f
    800193c0:	c5448493          	addi	s1,s1,-940 # 80058010 <excpt>
    800193c4:	00017597          	auipc	a1,0x17
    800193c8:	c0458593          	addi	a1,a1,-1020 # 8002ffc8 <__func__.0+0x2d8>
    800193cc:	cf89                	beqz	a5,800193e6 <amo_guest_page_fault_3+0xa8>
    800193ce:	6498                	ld	a4,8(s1)
    800193d0:	47dd                	li	a5,23
    800193d2:	00017597          	auipc	a1,0x17
    800193d6:	be658593          	addi	a1,a1,-1050 # 8002ffb8 <__func__.0+0x2c8>
    800193da:	00f70663          	beq	a4,a5,800193e6 <amo_guest_page_fault_3+0xa8>
    800193de:	00017597          	auipc	a1,0x17
    800193e2:	bea58593          	addi	a1,a1,-1046 # 8002ffc8 <__func__.0+0x2d8>
    800193e6:	00017517          	auipc	a0,0x17
    800193ea:	c2250513          	addi	a0,a0,-990 # 80030008 <__func__.0+0x318>
    800193ee:	49f130ef          	jal	8002d08c <printf>
    800193f2:	0003f797          	auipc	a5,0x3f
    800193f6:	c1f7c783          	lbu	a5,-993(a5) # 80058011 <excpt+0x1>
    800193fa:	c789                	beqz	a5,80019404 <amo_guest_page_fault_3+0xc6>
    800193fc:	6498                	ld	a4,8(s1)
    800193fe:	47dd                	li	a5,23
    80019400:	00f70c63          	beq	a4,a5,80019418 <amo_guest_page_fault_3+0xda>
    80019404:	00017517          	auipc	a0,0x17
    80019408:	c0c50513          	addi	a0,a0,-1012 # 80030010 <__func__.0+0x320>
    8001940c:	481130ef          	jal	8002d08c <printf>
    80019410:	02900513          	li	a0,41
    80019414:	167120ef          	jal	8002bd7a <putchar>
    80019418:	4529                	li	a0,10
    8001941a:	161120ef          	jal	8002bd7a <putchar>
    8001941e:	0003f417          	auipc	s0,0x3f
    80019422:	bf344403          	lbu	s0,-1037(s0) # 80058011 <excpt+0x1>
    80019426:	c409                	beqz	s0,80019430 <amo_guest_page_fault_3+0xf2>
    80019428:	6498                	ld	a4,8(s1)
    8001942a:	47dd                	li	a5,23
    8001942c:	02f70c63          	beq	a4,a5,80019464 <amo_guest_page_fault_3+0x126>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019430:	000807b7          	lui	a5,0x80
    80019434:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80019438:	4401                	li	s0,0

    TEST_END();
    8001943a:	00017597          	auipc	a1,0x17
    8001943e:	b8e58593          	addi	a1,a1,-1138 # 8002ffc8 <__func__.0+0x2d8>
    80019442:	00017517          	auipc	a0,0x17
    80019446:	c2e50513          	addi	a0,a0,-978 # 80030070 <__func__.0+0x380>
    8001944a:	443130ef          	jal	8002d08c <printf>
    8001944e:	4511                	li	a0,4
    80019450:	ab9e70ef          	jal	80000f08 <goto_priv>
    80019454:	c7ee80ef          	jal	800018d2 <reset_state>
}
    80019458:	60e2                	ld	ra,24(sp)
    8001945a:	8522                	mv	a0,s0
    8001945c:	6442                	ld	s0,16(sp)
    8001945e:	64a2                	ld	s1,8(sp)
    80019460:	6105                	addi	sp,sp,32
    80019462:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019464:	000807b7          	lui	a5,0x80
    80019468:	1007b073          	csrc	sstatus,a5
    TEST_END();
    8001946c:	00017597          	auipc	a1,0x17
    80019470:	b4c58593          	addi	a1,a1,-1204 # 8002ffb8 <__func__.0+0x2c8>
    80019474:	b7f9                	j	80019442 <amo_guest_page_fault_3+0x104>

0000000080019476 <amo_guest_page_fault_4>:

bool amo_guest_page_fault_4(){
    80019476:	1101                	addi	sp,sp,-32

    TEST_START();
    80019478:	00016597          	auipc	a1,0x16
    8001947c:	86058593          	addi	a1,a1,-1952 # 8002ecd8 <__func__.8>
    80019480:	00017517          	auipc	a0,0x17
    80019484:	b5850513          	addi	a0,a0,-1192 # 8002ffd8 <__func__.0+0x2e8>
bool amo_guest_page_fault_4(){
    80019488:	ec06                	sd	ra,24(sp)
    8001948a:	e822                	sd	s0,16(sp)
    8001948c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001948e:	3ff130ef          	jal	8002d08c <printf>
    80019492:	4529                	li	a0,10
    80019494:	0e7120ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80019498:	450d                	li	a0,3
    8001949a:	a6fe70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001949e:	942e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800194a2:	d22e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800194a6:	ad6e70ef          	jal	8000077c <vspt_init>
    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  

    goto_priv(PRIV_M);
    800194aa:	4511                	li	a0,4
    800194ac:	a5de70ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    800194b0:	000407b7          	lui	a5,0x40
    800194b4:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800194b8:	450d                	li	a0,3
    800194ba:	a4fe70ef          	jal	80000f08 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800194be:	94fe70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    800194c2:	37ab77b7          	lui	a5,0x37ab7
    800194c6:	00080737          	lui	a4,0x80
    800194ca:	078a                	slli	a5,a5,0x2
    800194cc:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    800194ce:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800194d2:	0736                	slli	a4,a4,0xd
    800194d4:	80f737af          	amomin.d	a5,a5,(a4)
    addr = hs_page_base(VSURWX_GUX);

    value = amomin_d(addr,value);
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    800194d8:	08200593          	li	a1,130
    800194dc:	0001d617          	auipc	a2,0x1d
    800194e0:	cd460613          	addi	a2,a2,-812 # 800361b0 <__func__.0+0x64c0>
    800194e4:	00017517          	auipc	a0,0x17
    800194e8:	b0c50513          	addi	a0,a0,-1268 # 8002fff0 <__func__.0+0x300>
    800194ec:	3a1130ef          	jal	8002d08c <printf>
    800194f0:	0003f797          	auipc	a5,0x3f
    800194f4:	b217c783          	lbu	a5,-1247(a5) # 80058011 <excpt+0x1>
    800194f8:	0003f497          	auipc	s1,0x3f
    800194fc:	b1848493          	addi	s1,s1,-1256 # 80058010 <excpt>
    80019500:	00017597          	auipc	a1,0x17
    80019504:	ac858593          	addi	a1,a1,-1336 # 8002ffc8 <__func__.0+0x2d8>
    80019508:	cf89                	beqz	a5,80019522 <amo_guest_page_fault_4+0xac>
    8001950a:	6498                	ld	a4,8(s1)
    8001950c:	47bd                	li	a5,15
    8001950e:	00017597          	auipc	a1,0x17
    80019512:	aaa58593          	addi	a1,a1,-1366 # 8002ffb8 <__func__.0+0x2c8>
    80019516:	00f70663          	beq	a4,a5,80019522 <amo_guest_page_fault_4+0xac>
    8001951a:	00017597          	auipc	a1,0x17
    8001951e:	aae58593          	addi	a1,a1,-1362 # 8002ffc8 <__func__.0+0x2d8>
    80019522:	00017517          	auipc	a0,0x17
    80019526:	ae650513          	addi	a0,a0,-1306 # 80030008 <__func__.0+0x318>
    8001952a:	363130ef          	jal	8002d08c <printf>
    8001952e:	0003f797          	auipc	a5,0x3f
    80019532:	ae37c783          	lbu	a5,-1309(a5) # 80058011 <excpt+0x1>
    80019536:	c789                	beqz	a5,80019540 <amo_guest_page_fault_4+0xca>
    80019538:	6498                	ld	a4,8(s1)
    8001953a:	47bd                	li	a5,15
    8001953c:	00f70c63          	beq	a4,a5,80019554 <amo_guest_page_fault_4+0xde>
    80019540:	00017517          	auipc	a0,0x17
    80019544:	ad050513          	addi	a0,a0,-1328 # 80030010 <__func__.0+0x320>
    80019548:	345130ef          	jal	8002d08c <printf>
    8001954c:	02900513          	li	a0,41
    80019550:	02b120ef          	jal	8002bd7a <putchar>
    80019554:	4529                	li	a0,10
    80019556:	025120ef          	jal	8002bd7a <putchar>
    8001955a:	0003f417          	auipc	s0,0x3f
    8001955e:	ab744403          	lbu	s0,-1353(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80019562:	00017597          	auipc	a1,0x17
    80019566:	a6658593          	addi	a1,a1,-1434 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    8001956a:	cc11                	beqz	s0,80019586 <amo_guest_page_fault_4+0x110>
    8001956c:	6498                	ld	a4,8(s1)
    8001956e:	47bd                	li	a5,15
    TEST_END();
    80019570:	00017597          	auipc	a1,0x17
    80019574:	a4858593          	addi	a1,a1,-1464 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    80019578:	00f70763          	beq	a4,a5,80019586 <amo_guest_page_fault_4+0x110>
    8001957c:	4401                	li	s0,0
    TEST_END();
    8001957e:	00017597          	auipc	a1,0x17
    80019582:	a4a58593          	addi	a1,a1,-1462 # 8002ffc8 <__func__.0+0x2d8>
    80019586:	00017517          	auipc	a0,0x17
    8001958a:	aea50513          	addi	a0,a0,-1302 # 80030070 <__func__.0+0x380>
    8001958e:	2ff130ef          	jal	8002d08c <printf>
    80019592:	4511                	li	a0,4
    80019594:	975e70ef          	jal	80000f08 <goto_priv>
    80019598:	b3ae80ef          	jal	800018d2 <reset_state>
}
    8001959c:	60e2                	ld	ra,24(sp)
    8001959e:	8522                	mv	a0,s0
    800195a0:	6442                	ld	s0,16(sp)
    800195a2:	64a2                	ld	s1,8(sp)
    800195a4:	6105                	addi	sp,sp,32
    800195a6:	8082                	ret

00000000800195a8 <amo_guest_page_fault_5>:

bool amo_guest_page_fault_5(){
    800195a8:	1141                	addi	sp,sp,-16

    TEST_START();
    800195aa:	00015597          	auipc	a1,0x15
    800195ae:	74658593          	addi	a1,a1,1862 # 8002ecf0 <__func__.7>
    800195b2:	00017517          	auipc	a0,0x17
    800195b6:	a2650513          	addi	a0,a0,-1498 # 8002ffd8 <__func__.0+0x2e8>
bool amo_guest_page_fault_5(){
    800195ba:	e406                	sd	ra,8(sp)
    800195bc:	e022                	sd	s0,0(sp)
    TEST_START();
    800195be:	2cf130ef          	jal	8002d08c <printf>
    800195c2:	4529                	li	a0,10
    800195c4:	7b6120ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800195c8:	450d                	li	a0,3
    800195ca:	93fe70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800195ce:	812e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800195d2:	bf2e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800195d6:	9a6e70ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_M);
    800195da:	4511                	li	a0,4
    800195dc:	92de70ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    800195e0:	000407b7          	lui	a5,0x40
    800195e4:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800195e8:	450d                	li	a0,3
    800195ea:	91fe70ef          	jal	80000f08 <goto_priv>

    //执行原子指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800195ee:	81fe70ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    800195f2:	37ab77b7          	lui	a5,0x37ab7
    800195f6:	00080737          	lui	a4,0x80
    800195fa:	078a                	slli	a5,a5,0x2
    800195fc:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800195fe:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019602:	0736                	slli	a4,a4,0xd
    80019604:	c0f737af          	amominu.d	a5,a5,(a4)
    value = amominu_d(vaddr,value);

    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    80019608:	08200593          	li	a1,130
    8001960c:	0001d617          	auipc	a2,0x1d
    80019610:	be460613          	addi	a2,a2,-1052 # 800361f0 <__func__.0+0x6500>
    80019614:	00017517          	auipc	a0,0x17
    80019618:	9dc50513          	addi	a0,a0,-1572 # 8002fff0 <__func__.0+0x300>
    8001961c:	271130ef          	jal	8002d08c <printf>
    80019620:	0003f797          	auipc	a5,0x3f
    80019624:	9f17c783          	lbu	a5,-1551(a5) # 80058011 <excpt+0x1>
    80019628:	00017597          	auipc	a1,0x17
    8001962c:	99058593          	addi	a1,a1,-1648 # 8002ffb8 <__func__.0+0x2c8>
    80019630:	c789                	beqz	a5,8001963a <amo_guest_page_fault_5+0x92>
    80019632:	00017597          	auipc	a1,0x17
    80019636:	99658593          	addi	a1,a1,-1642 # 8002ffc8 <__func__.0+0x2d8>
    8001963a:	00017517          	auipc	a0,0x17
    8001963e:	9ce50513          	addi	a0,a0,-1586 # 80030008 <__func__.0+0x318>
    80019642:	24b130ef          	jal	8002d08c <printf>
    80019646:	0003f797          	auipc	a5,0x3f
    8001964a:	9cb7c783          	lbu	a5,-1589(a5) # 80058011 <excpt+0x1>
    8001964e:	e7a1                	bnez	a5,80019696 <amo_guest_page_fault_5+0xee>
    80019650:	4529                	li	a0,10
    80019652:	728120ef          	jal	8002bd7a <putchar>
    80019656:	0003f797          	auipc	a5,0x3f
    8001965a:	9bb7c783          	lbu	a5,-1605(a5) # 80058011 <excpt+0x1>
    8001965e:	e795                	bnez	a5,8001968a <amo_guest_page_fault_5+0xe2>
    80019660:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80019662:	00017597          	auipc	a1,0x17
    80019666:	95658593          	addi	a1,a1,-1706 # 8002ffb8 <__func__.0+0x2c8>
    8001966a:	00017517          	auipc	a0,0x17
    8001966e:	a0650513          	addi	a0,a0,-1530 # 80030070 <__func__.0+0x380>
    80019672:	21b130ef          	jal	8002d08c <printf>
    80019676:	4511                	li	a0,4
    80019678:	891e70ef          	jal	80000f08 <goto_priv>
    8001967c:	a56e80ef          	jal	800018d2 <reset_state>
}
    80019680:	60a2                	ld	ra,8(sp)
    80019682:	8522                	mv	a0,s0
    80019684:	6402                	ld	s0,0(sp)
    80019686:	0141                	addi	sp,sp,16
    80019688:	8082                	ret
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    8001968a:	4401                	li	s0,0
    TEST_END();
    8001968c:	00017597          	auipc	a1,0x17
    80019690:	93c58593          	addi	a1,a1,-1732 # 8002ffc8 <__func__.0+0x2d8>
    80019694:	bfd9                	j	8001966a <amo_guest_page_fault_5+0xc2>
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    80019696:	00017517          	auipc	a0,0x17
    8001969a:	97a50513          	addi	a0,a0,-1670 # 80030010 <__func__.0+0x320>
    8001969e:	1ef130ef          	jal	8002d08c <printf>
    800196a2:	02900513          	li	a0,41
    800196a6:	6d4120ef          	jal	8002bd7a <putchar>
    800196aa:	b75d                	j	80019650 <amo_guest_page_fault_5+0xa8>

00000000800196ac <instruction_guest_page_fault_1>:


bool instruction_guest_page_fault_1(){
    800196ac:	1101                	addi	sp,sp,-32

    TEST_START();
    800196ae:	00015597          	auipc	a1,0x15
    800196b2:	65a58593          	addi	a1,a1,1626 # 8002ed08 <__func__.6>
    800196b6:	00017517          	auipc	a0,0x17
    800196ba:	92250513          	addi	a0,a0,-1758 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_guest_page_fault_1(){
    800196be:	ec06                	sd	ra,24(sp)
    800196c0:	e822                	sd	s0,16(sp)
    800196c2:	e426                	sd	s1,8(sp)
    TEST_START();
    800196c4:	1c9130ef          	jal	8002d08c <printf>
    800196c8:	4529                	li	a0,10
    800196ca:	6b0120ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800196ce:	450d                	li	a0,3
    800196d0:	839e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800196d4:	f0de60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800196d8:	aece70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    800196dc:	8a0e70ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    800196e0:	4509                	li	a0,2
    800196e2:	827e70ef          	jal	80000f08 <goto_priv>

    //执行取指指令二级地址翻译阶段时，pte.v=0
    vaddr = hs_page_base(VSRWX_GI);
    TEST_SETUP_EXCEPT();
    800196e6:	f26e70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    800196ea:	001007b7          	lui	a5,0x100
    800196ee:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800196f2:	07b2                	slli	a5,a5,0xc
    800196f4:	0003f417          	auipc	s0,0x3f
    800196f8:	91c40413          	addi	s0,s0,-1764 # 80058010 <excpt>
    800196fc:	00000297          	auipc	t0,0x0
    80019700:	00c28293          	addi	t0,t0,12 # 80019708 <instruction_guest_page_fault_1+0x5c>
    80019704:	02543c23          	sd	t0,56(s0)
    80019708:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    8001970a:	08200593          	li	a1,130
    8001970e:	0001d617          	auipc	a2,0x1d
    80019712:	b2260613          	addi	a2,a2,-1246 # 80036230 <__func__.0+0x6540>
    80019716:	00017517          	auipc	a0,0x17
    8001971a:	8da50513          	addi	a0,a0,-1830 # 8002fff0 <__func__.0+0x300>
    8001971e:	16f130ef          	jal	8002d08c <printf>
    80019722:	0003f797          	auipc	a5,0x3f
    80019726:	8ef7c783          	lbu	a5,-1809(a5) # 80058011 <excpt+0x1>
    8001972a:	00017597          	auipc	a1,0x17
    8001972e:	89e58593          	addi	a1,a1,-1890 # 8002ffc8 <__func__.0+0x2d8>
    80019732:	cf89                	beqz	a5,8001974c <instruction_guest_page_fault_1+0xa0>
    80019734:	6418                	ld	a4,8(s0)
    80019736:	47d1                	li	a5,20
    80019738:	00017597          	auipc	a1,0x17
    8001973c:	88058593          	addi	a1,a1,-1920 # 8002ffb8 <__func__.0+0x2c8>
    80019740:	00f70663          	beq	a4,a5,8001974c <instruction_guest_page_fault_1+0xa0>
    80019744:	00017597          	auipc	a1,0x17
    80019748:	88458593          	addi	a1,a1,-1916 # 8002ffc8 <__func__.0+0x2d8>
    8001974c:	00017517          	auipc	a0,0x17
    80019750:	8bc50513          	addi	a0,a0,-1860 # 80030008 <__func__.0+0x318>
    80019754:	139130ef          	jal	8002d08c <printf>
    80019758:	0003f797          	auipc	a5,0x3f
    8001975c:	8b97c783          	lbu	a5,-1863(a5) # 80058011 <excpt+0x1>
    80019760:	c789                	beqz	a5,8001976a <instruction_guest_page_fault_1+0xbe>
    80019762:	6418                	ld	a4,8(s0)
    80019764:	47d1                	li	a5,20
    80019766:	00f70c63          	beq	a4,a5,8001977e <instruction_guest_page_fault_1+0xd2>
    8001976a:	00017517          	auipc	a0,0x17
    8001976e:	8a650513          	addi	a0,a0,-1882 # 80030010 <__func__.0+0x320>
    80019772:	11b130ef          	jal	8002d08c <printf>
    80019776:	02900513          	li	a0,41
    8001977a:	600120ef          	jal	8002bd7a <putchar>
    8001977e:	4529                	li	a0,10
    80019780:	5fa120ef          	jal	8002bd7a <putchar>
    80019784:	0003f497          	auipc	s1,0x3f
    80019788:	88d4c483          	lbu	s1,-1907(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    8001978c:	00017597          	auipc	a1,0x17
    80019790:	83c58593          	addi	a1,a1,-1988 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    80019794:	cc91                	beqz	s1,800197b0 <instruction_guest_page_fault_1+0x104>
    80019796:	6418                	ld	a4,8(s0)
    80019798:	47d1                	li	a5,20
    TEST_END();
    8001979a:	00017597          	auipc	a1,0x17
    8001979e:	81e58593          	addi	a1,a1,-2018 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    800197a2:	00f70763          	beq	a4,a5,800197b0 <instruction_guest_page_fault_1+0x104>
    800197a6:	4481                	li	s1,0
    TEST_END();
    800197a8:	00017597          	auipc	a1,0x17
    800197ac:	82058593          	addi	a1,a1,-2016 # 8002ffc8 <__func__.0+0x2d8>
    800197b0:	00017517          	auipc	a0,0x17
    800197b4:	8c050513          	addi	a0,a0,-1856 # 80030070 <__func__.0+0x380>
    800197b8:	0d5130ef          	jal	8002d08c <printf>
    800197bc:	4511                	li	a0,4
    800197be:	f4ae70ef          	jal	80000f08 <goto_priv>
    800197c2:	910e80ef          	jal	800018d2 <reset_state>

}
    800197c6:	60e2                	ld	ra,24(sp)
    800197c8:	6442                	ld	s0,16(sp)
    800197ca:	8526                	mv	a0,s1
    800197cc:	64a2                	ld	s1,8(sp)
    800197ce:	6105                	addi	sp,sp,32
    800197d0:	8082                	ret

00000000800197d2 <instruction_guest_page_fault_2>:


bool instruction_guest_page_fault_2(){
    800197d2:	1101                	addi	sp,sp,-32

    TEST_START();
    800197d4:	00015597          	auipc	a1,0x15
    800197d8:	55458593          	addi	a1,a1,1364 # 8002ed28 <__func__.5>
    800197dc:	00016517          	auipc	a0,0x16
    800197e0:	7fc50513          	addi	a0,a0,2044 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_guest_page_fault_2(){
    800197e4:	ec06                	sd	ra,24(sp)
    800197e6:	e822                	sd	s0,16(sp)
    800197e8:	e426                	sd	s1,8(sp)
    TEST_START();
    800197ea:	0a3130ef          	jal	8002d08c <printf>
    800197ee:	4529                	li	a0,10
    800197f0:	58a120ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    800197f4:	450d                	li	a0,3
    800197f6:	f12e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    800197fa:	de7e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800197fe:	9c6e70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019802:	f7be60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019806:	4509                	li	a0,2
    80019808:	f00e70ef          	jal	80000f08 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    8001980c:	e00e70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019810:	400137b7          	lui	a5,0x40013
    80019814:	078a                	slli	a5,a5,0x2
    80019816:	0003e417          	auipc	s0,0x3e
    8001981a:	7fa40413          	addi	s0,s0,2042 # 80058010 <excpt>
    8001981e:	00000297          	auipc	t0,0x0
    80019822:	00c28293          	addi	t0,t0,12 # 8001982a <instruction_guest_page_fault_2+0x58>
    80019826:	02543c23          	sd	t0,56(s0)
    8001982a:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001982c:	08200593          	li	a1,130
    80019830:	0001d617          	auipc	a2,0x1d
    80019834:	a6060613          	addi	a2,a2,-1440 # 80036290 <__func__.0+0x65a0>
    80019838:	00016517          	auipc	a0,0x16
    8001983c:	7b850513          	addi	a0,a0,1976 # 8002fff0 <__func__.0+0x300>
    80019840:	04d130ef          	jal	8002d08c <printf>
    80019844:	0003e797          	auipc	a5,0x3e
    80019848:	7cd7c783          	lbu	a5,1997(a5) # 80058011 <excpt+0x1>
    8001984c:	00016597          	auipc	a1,0x16
    80019850:	77c58593          	addi	a1,a1,1916 # 8002ffc8 <__func__.0+0x2d8>
    80019854:	cf89                	beqz	a5,8001986e <instruction_guest_page_fault_2+0x9c>
    80019856:	6418                	ld	a4,8(s0)
    80019858:	47d1                	li	a5,20
    8001985a:	00016597          	auipc	a1,0x16
    8001985e:	75e58593          	addi	a1,a1,1886 # 8002ffb8 <__func__.0+0x2c8>
    80019862:	00f70663          	beq	a4,a5,8001986e <instruction_guest_page_fault_2+0x9c>
    80019866:	00016597          	auipc	a1,0x16
    8001986a:	76258593          	addi	a1,a1,1890 # 8002ffc8 <__func__.0+0x2d8>
    8001986e:	00016517          	auipc	a0,0x16
    80019872:	79a50513          	addi	a0,a0,1946 # 80030008 <__func__.0+0x318>
    80019876:	017130ef          	jal	8002d08c <printf>
    8001987a:	0003e797          	auipc	a5,0x3e
    8001987e:	7977c783          	lbu	a5,1943(a5) # 80058011 <excpt+0x1>
    80019882:	c789                	beqz	a5,8001988c <instruction_guest_page_fault_2+0xba>
    80019884:	6418                	ld	a4,8(s0)
    80019886:	47d1                	li	a5,20
    80019888:	00f70c63          	beq	a4,a5,800198a0 <instruction_guest_page_fault_2+0xce>
    8001988c:	00016517          	auipc	a0,0x16
    80019890:	78450513          	addi	a0,a0,1924 # 80030010 <__func__.0+0x320>
    80019894:	7f8130ef          	jal	8002d08c <printf>
    80019898:	02900513          	li	a0,41
    8001989c:	4de120ef          	jal	8002bd7a <putchar>
    800198a0:	4529                	li	a0,10
    800198a2:	4d8120ef          	jal	8002bd7a <putchar>
    800198a6:	0003e497          	auipc	s1,0x3e
    800198aa:	76b4c483          	lbu	s1,1899(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    800198ae:	00016597          	auipc	a1,0x16
    800198b2:	71a58593          	addi	a1,a1,1818 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    800198b6:	cc91                	beqz	s1,800198d2 <instruction_guest_page_fault_2+0x100>
    800198b8:	6418                	ld	a4,8(s0)
    800198ba:	47d1                	li	a5,20
    TEST_END();
    800198bc:	00016597          	auipc	a1,0x16
    800198c0:	6fc58593          	addi	a1,a1,1788 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    800198c4:	00f70763          	beq	a4,a5,800198d2 <instruction_guest_page_fault_2+0x100>
    800198c8:	4481                	li	s1,0
    TEST_END();
    800198ca:	00016597          	auipc	a1,0x16
    800198ce:	6fe58593          	addi	a1,a1,1790 # 8002ffc8 <__func__.0+0x2d8>
    800198d2:	00016517          	auipc	a0,0x16
    800198d6:	79e50513          	addi	a0,a0,1950 # 80030070 <__func__.0+0x380>
    800198da:	7b2130ef          	jal	8002d08c <printf>
    800198de:	4511                	li	a0,4
    800198e0:	e28e70ef          	jal	80000f08 <goto_priv>
    800198e4:	fefe70ef          	jal	800018d2 <reset_state>
}
    800198e8:	60e2                	ld	ra,24(sp)
    800198ea:	6442                	ld	s0,16(sp)
    800198ec:	8526                	mv	a0,s1
    800198ee:	64a2                	ld	s1,8(sp)
    800198f0:	6105                	addi	sp,sp,32
    800198f2:	8082                	ret

00000000800198f4 <instruction_guest_page_fault_3>:

bool instruction_guest_page_fault_3(){
    800198f4:	1101                	addi	sp,sp,-32

    TEST_START();
    800198f6:	00015597          	auipc	a1,0x15
    800198fa:	45258593          	addi	a1,a1,1106 # 8002ed48 <__func__.4>
    800198fe:	00016517          	auipc	a0,0x16
    80019902:	6da50513          	addi	a0,a0,1754 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_guest_page_fault_3(){
    80019906:	ec06                	sd	ra,24(sp)
    80019908:	e822                	sd	s0,16(sp)
    8001990a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001990c:	780130ef          	jal	8002d08c <printf>
    80019910:	4529                	li	a0,10
    80019912:	468120ef          	jal	8002bd7a <putchar>

    CSRC(CSR_VSSTATUS,SSTATUS_SUM);
    80019916:	000407b7          	lui	a5,0x40
    8001991a:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    8001991e:	450d                	li	a0,3
    80019920:	de8e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019924:	cbde60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019928:	89ce70ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001992c:	e51e60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019930:	4509                	li	a0,2
    80019932:	dd6e70ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80019936:	cd6e70ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSURWX_GURWX);


    TEST_EXEC_EXCEPT(vaddr); 
    8001993a:	000807b7          	lui	a5,0x80
    8001993e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80019940:	07b6                	slli	a5,a5,0xd
    80019942:	0003e417          	auipc	s0,0x3e
    80019946:	6ce40413          	addi	s0,s0,1742 # 80058010 <excpt>
    8001994a:	00000297          	auipc	t0,0x0
    8001994e:	00c28293          	addi	t0,t0,12 # 80019956 <instruction_guest_page_fault_3+0x62>
    80019952:	02543c23          	sd	t0,56(s0)
    80019956:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    80019958:	08200593          	li	a1,130
    8001995c:	0001d617          	auipc	a2,0x1d
    80019960:	99460613          	addi	a2,a2,-1644 # 800362f0 <__func__.0+0x6600>
    80019964:	00016517          	auipc	a0,0x16
    80019968:	68c50513          	addi	a0,a0,1676 # 8002fff0 <__func__.0+0x300>
    8001996c:	720130ef          	jal	8002d08c <printf>
    80019970:	0003e797          	auipc	a5,0x3e
    80019974:	6a17c783          	lbu	a5,1697(a5) # 80058011 <excpt+0x1>
    80019978:	00016597          	auipc	a1,0x16
    8001997c:	65058593          	addi	a1,a1,1616 # 8002ffc8 <__func__.0+0x2d8>
    80019980:	cf89                	beqz	a5,8001999a <instruction_guest_page_fault_3+0xa6>
    80019982:	6418                	ld	a4,8(s0)
    80019984:	47b1                	li	a5,12
    80019986:	00016597          	auipc	a1,0x16
    8001998a:	63258593          	addi	a1,a1,1586 # 8002ffb8 <__func__.0+0x2c8>
    8001998e:	00f70663          	beq	a4,a5,8001999a <instruction_guest_page_fault_3+0xa6>
    80019992:	00016597          	auipc	a1,0x16
    80019996:	63658593          	addi	a1,a1,1590 # 8002ffc8 <__func__.0+0x2d8>
    8001999a:	00016517          	auipc	a0,0x16
    8001999e:	66e50513          	addi	a0,a0,1646 # 80030008 <__func__.0+0x318>
    800199a2:	6ea130ef          	jal	8002d08c <printf>
    800199a6:	0003e797          	auipc	a5,0x3e
    800199aa:	66b7c783          	lbu	a5,1643(a5) # 80058011 <excpt+0x1>
    800199ae:	c789                	beqz	a5,800199b8 <instruction_guest_page_fault_3+0xc4>
    800199b0:	6418                	ld	a4,8(s0)
    800199b2:	47b1                	li	a5,12
    800199b4:	00f70c63          	beq	a4,a5,800199cc <instruction_guest_page_fault_3+0xd8>
    800199b8:	00016517          	auipc	a0,0x16
    800199bc:	65850513          	addi	a0,a0,1624 # 80030010 <__func__.0+0x320>
    800199c0:	6cc130ef          	jal	8002d08c <printf>
    800199c4:	02900513          	li	a0,41
    800199c8:	3b2120ef          	jal	8002bd7a <putchar>
    800199cc:	4529                	li	a0,10
    800199ce:	3ac120ef          	jal	8002bd7a <putchar>
    800199d2:	0003e497          	auipc	s1,0x3e
    800199d6:	63f4c483          	lbu	s1,1599(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    800199da:	00016597          	auipc	a1,0x16
    800199de:	5ee58593          	addi	a1,a1,1518 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    800199e2:	cc91                	beqz	s1,800199fe <instruction_guest_page_fault_3+0x10a>
    800199e4:	6418                	ld	a4,8(s0)
    800199e6:	47b1                	li	a5,12
    TEST_END();
    800199e8:	00016597          	auipc	a1,0x16
    800199ec:	5d058593          	addi	a1,a1,1488 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    800199f0:	00f70763          	beq	a4,a5,800199fe <instruction_guest_page_fault_3+0x10a>
    800199f4:	4481                	li	s1,0
    TEST_END();
    800199f6:	00016597          	auipc	a1,0x16
    800199fa:	5d258593          	addi	a1,a1,1490 # 8002ffc8 <__func__.0+0x2d8>
    800199fe:	00016517          	auipc	a0,0x16
    80019a02:	67250513          	addi	a0,a0,1650 # 80030070 <__func__.0+0x380>
    80019a06:	686130ef          	jal	8002d08c <printf>
    80019a0a:	4511                	li	a0,4
    80019a0c:	cfce70ef          	jal	80000f08 <goto_priv>
    80019a10:	ec3e70ef          	jal	800018d2 <reset_state>
}
    80019a14:	60e2                	ld	ra,24(sp)
    80019a16:	6442                	ld	s0,16(sp)
    80019a18:	8526                	mv	a0,s1
    80019a1a:	64a2                	ld	s1,8(sp)
    80019a1c:	6105                	addi	sp,sp,32
    80019a1e:	8082                	ret

0000000080019a20 <instruction_guest_page_fault_4>:


bool instruction_guest_page_fault_4(){
    80019a20:	1101                	addi	sp,sp,-32

    TEST_START();
    80019a22:	00015597          	auipc	a1,0x15
    80019a26:	34658593          	addi	a1,a1,838 # 8002ed68 <__func__.3>
    80019a2a:	00016517          	auipc	a0,0x16
    80019a2e:	5ae50513          	addi	a0,a0,1454 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_guest_page_fault_4(){
    80019a32:	ec06                	sd	ra,24(sp)
    80019a34:	e822                	sd	s0,16(sp)
    80019a36:	e426                	sd	s1,8(sp)
    TEST_START();
    80019a38:	654130ef          	jal	8002d08c <printf>
    80019a3c:	4529                	li	a0,10
    80019a3e:	33c120ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80019a42:	450d                	li	a0,3
    80019a44:	cc4e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019a48:	b99e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019a4c:	f79e60ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019a50:	d2de60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_M);
    80019a54:	4511                	li	a0,4
    80019a56:	cb2e70ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80019a5a:	28005073          	csrwi	vsatp,0
    goto_priv(PRIV_VS);
    80019a5e:	4509                	li	a0,2
    80019a60:	ca8e70ef          	jal	80000f08 <goto_priv>


    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项没有执行权限的页面中执行，pte.x=0
    addr = vs_page_base(VSURWX_GRW);
    TEST_SETUP_EXCEPT();
    80019a64:	ba8e70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(addr); 
    80019a68:	000807b7          	lui	a5,0x80
    80019a6c:	07b5                	addi	a5,a5,13 # 8000d <_test_table_size+0x8000c>
    80019a6e:	07b6                	slli	a5,a5,0xd
    80019a70:	0003e417          	auipc	s0,0x3e
    80019a74:	5a040413          	addi	s0,s0,1440 # 80058010 <excpt>
    80019a78:	00000297          	auipc	t0,0x0
    80019a7c:	00c28293          	addi	t0,t0,12 # 80019a84 <instruction_guest_page_fault_4+0x64>
    80019a80:	02543c23          	sd	t0,56(s0)
    80019a84:	8782                	jr	a5

    printf("%d\n",excpt.cause);
    80019a86:	640c                	ld	a1,8(s0)
    80019a88:	00017517          	auipc	a0,0x17
    80019a8c:	0c850513          	addi	a0,a0,200 # 80030b50 <__func__.0+0xe60>
    80019a90:	5fc130ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.triggered);
    80019a94:	0003e597          	auipc	a1,0x3e
    80019a98:	57d5c583          	lbu	a1,1405(a1) # 80058011 <excpt+0x1>
    80019a9c:	00017517          	auipc	a0,0x17
    80019aa0:	0b450513          	addi	a0,a0,180 # 80030b50 <__func__.0+0xe60>
    80019aa4:	5e8130ef          	jal	8002d08c <printf>

    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80019aa8:	08200593          	li	a1,130
    80019aac:	0001d617          	auipc	a2,0x1d
    80019ab0:	88c60613          	addi	a2,a2,-1908 # 80036338 <__func__.0+0x6648>
    80019ab4:	00016517          	auipc	a0,0x16
    80019ab8:	53c50513          	addi	a0,a0,1340 # 8002fff0 <__func__.0+0x300>
    80019abc:	5d0130ef          	jal	8002d08c <printf>
    80019ac0:	0003e797          	auipc	a5,0x3e
    80019ac4:	5517c783          	lbu	a5,1361(a5) # 80058011 <excpt+0x1>
    80019ac8:	00016597          	auipc	a1,0x16
    80019acc:	50058593          	addi	a1,a1,1280 # 8002ffc8 <__func__.0+0x2d8>
    80019ad0:	cf89                	beqz	a5,80019aea <instruction_guest_page_fault_4+0xca>
    80019ad2:	6418                	ld	a4,8(s0)
    80019ad4:	47d1                	li	a5,20
    80019ad6:	00016597          	auipc	a1,0x16
    80019ada:	4e258593          	addi	a1,a1,1250 # 8002ffb8 <__func__.0+0x2c8>
    80019ade:	00f70663          	beq	a4,a5,80019aea <instruction_guest_page_fault_4+0xca>
    80019ae2:	00016597          	auipc	a1,0x16
    80019ae6:	4e658593          	addi	a1,a1,1254 # 8002ffc8 <__func__.0+0x2d8>
    80019aea:	00016517          	auipc	a0,0x16
    80019aee:	51e50513          	addi	a0,a0,1310 # 80030008 <__func__.0+0x318>
    80019af2:	59a130ef          	jal	8002d08c <printf>
    80019af6:	0003e797          	auipc	a5,0x3e
    80019afa:	51b7c783          	lbu	a5,1307(a5) # 80058011 <excpt+0x1>
    80019afe:	c789                	beqz	a5,80019b08 <instruction_guest_page_fault_4+0xe8>
    80019b00:	6418                	ld	a4,8(s0)
    80019b02:	47d1                	li	a5,20
    80019b04:	00f70c63          	beq	a4,a5,80019b1c <instruction_guest_page_fault_4+0xfc>
    80019b08:	00016517          	auipc	a0,0x16
    80019b0c:	50850513          	addi	a0,a0,1288 # 80030010 <__func__.0+0x320>
    80019b10:	57c130ef          	jal	8002d08c <printf>
    80019b14:	02900513          	li	a0,41
    80019b18:	262120ef          	jal	8002bd7a <putchar>
    80019b1c:	4529                	li	a0,10
    80019b1e:	25c120ef          	jal	8002bd7a <putchar>
    80019b22:	0003e497          	auipc	s1,0x3e
    80019b26:	4ef4c483          	lbu	s1,1263(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019b2a:	00016597          	auipc	a1,0x16
    80019b2e:	49e58593          	addi	a1,a1,1182 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80019b32:	cc91                	beqz	s1,80019b4e <instruction_guest_page_fault_4+0x12e>
    80019b34:	6418                	ld	a4,8(s0)
    80019b36:	47d1                	li	a5,20
    TEST_END();
    80019b38:	00016597          	auipc	a1,0x16
    80019b3c:	48058593          	addi	a1,a1,1152 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80019b40:	00f70763          	beq	a4,a5,80019b4e <instruction_guest_page_fault_4+0x12e>
    80019b44:	4481                	li	s1,0
    TEST_END();
    80019b46:	00016597          	auipc	a1,0x16
    80019b4a:	48258593          	addi	a1,a1,1154 # 8002ffc8 <__func__.0+0x2d8>
    80019b4e:	00016517          	auipc	a0,0x16
    80019b52:	52250513          	addi	a0,a0,1314 # 80030070 <__func__.0+0x380>
    80019b56:	536130ef          	jal	8002d08c <printf>
    80019b5a:	4511                	li	a0,4
    80019b5c:	bace70ef          	jal	80000f08 <goto_priv>
    80019b60:	d73e70ef          	jal	800018d2 <reset_state>
}
    80019b64:	60e2                	ld	ra,24(sp)
    80019b66:	6442                	ld	s0,16(sp)
    80019b68:	8526                	mv	a0,s1
    80019b6a:	64a2                	ld	s1,8(sp)
    80019b6c:	6105                	addi	sp,sp,32
    80019b6e:	8082                	ret

0000000080019b70 <instruction_guest_page_fault_5>:


bool instruction_guest_page_fault_5(){
    80019b70:	1101                	addi	sp,sp,-32

    TEST_START();
    80019b72:	00015597          	auipc	a1,0x15
    80019b76:	21658593          	addi	a1,a1,534 # 8002ed88 <__func__.2>
    80019b7a:	00016517          	auipc	a0,0x16
    80019b7e:	45e50513          	addi	a0,a0,1118 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_guest_page_fault_5(){
    80019b82:	ec06                	sd	ra,24(sp)
    80019b84:	e822                	sd	s0,16(sp)
    80019b86:	e426                	sd	s1,8(sp)
    TEST_START();
    80019b88:	504130ef          	jal	8002d08c <printf>
    80019b8c:	4529                	li	a0,10
    80019b8e:	1ec120ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80019b92:	450d                	li	a0,3
    80019b94:	b74e70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019b98:	a49e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019b9c:	e29e60ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019ba0:	bdde60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;
    goto_priv(PRIV_M);
    80019ba4:	4511                	li	a0,4
    80019ba6:	b62e70ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80019baa:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_VS);
    80019bae:	4509                	li	a0,2
    80019bb0:	b58e70ef          	jal	80000f08 <goto_priv>

    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项无效，pte.v=0
    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80019bb4:	a58e70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019bb8:	400197b7          	lui	a5,0x40019
    80019bbc:	078a                	slli	a5,a5,0x2
    80019bbe:	0003e417          	auipc	s0,0x3e
    80019bc2:	45240413          	addi	s0,s0,1106 # 80058010 <excpt>
    80019bc6:	00000297          	auipc	t0,0x0
    80019bca:	00c28293          	addi	t0,t0,12 # 80019bd2 <instruction_guest_page_fault_5+0x62>
    80019bce:	02543c23          	sd	t0,56(s0)
    80019bd2:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019bd4:	08200593          	li	a1,130
    80019bd8:	0001c617          	auipc	a2,0x1c
    80019bdc:	7c060613          	addi	a2,a2,1984 # 80036398 <__func__.0+0x66a8>
    80019be0:	00016517          	auipc	a0,0x16
    80019be4:	41050513          	addi	a0,a0,1040 # 8002fff0 <__func__.0+0x300>
    80019be8:	4a4130ef          	jal	8002d08c <printf>
    80019bec:	0003e797          	auipc	a5,0x3e
    80019bf0:	4257c783          	lbu	a5,1061(a5) # 80058011 <excpt+0x1>
    80019bf4:	00016597          	auipc	a1,0x16
    80019bf8:	3d458593          	addi	a1,a1,980 # 8002ffc8 <__func__.0+0x2d8>
    80019bfc:	cf89                	beqz	a5,80019c16 <instruction_guest_page_fault_5+0xa6>
    80019bfe:	6418                	ld	a4,8(s0)
    80019c00:	47d1                	li	a5,20
    80019c02:	00016597          	auipc	a1,0x16
    80019c06:	3b658593          	addi	a1,a1,950 # 8002ffb8 <__func__.0+0x2c8>
    80019c0a:	00f70663          	beq	a4,a5,80019c16 <instruction_guest_page_fault_5+0xa6>
    80019c0e:	00016597          	auipc	a1,0x16
    80019c12:	3ba58593          	addi	a1,a1,954 # 8002ffc8 <__func__.0+0x2d8>
    80019c16:	00016517          	auipc	a0,0x16
    80019c1a:	3f250513          	addi	a0,a0,1010 # 80030008 <__func__.0+0x318>
    80019c1e:	46e130ef          	jal	8002d08c <printf>
    80019c22:	0003e797          	auipc	a5,0x3e
    80019c26:	3ef7c783          	lbu	a5,1007(a5) # 80058011 <excpt+0x1>
    80019c2a:	c789                	beqz	a5,80019c34 <instruction_guest_page_fault_5+0xc4>
    80019c2c:	6418                	ld	a4,8(s0)
    80019c2e:	47d1                	li	a5,20
    80019c30:	00f70c63          	beq	a4,a5,80019c48 <instruction_guest_page_fault_5+0xd8>
    80019c34:	00016517          	auipc	a0,0x16
    80019c38:	3dc50513          	addi	a0,a0,988 # 80030010 <__func__.0+0x320>
    80019c3c:	450130ef          	jal	8002d08c <printf>
    80019c40:	02900513          	li	a0,41
    80019c44:	136120ef          	jal	8002bd7a <putchar>
    80019c48:	4529                	li	a0,10
    80019c4a:	130120ef          	jal	8002bd7a <putchar>
    80019c4e:	0003e497          	auipc	s1,0x3e
    80019c52:	3c34c483          	lbu	s1,963(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019c56:	00016597          	auipc	a1,0x16
    80019c5a:	37258593          	addi	a1,a1,882 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019c5e:	cc91                	beqz	s1,80019c7a <instruction_guest_page_fault_5+0x10a>
    80019c60:	6418                	ld	a4,8(s0)
    80019c62:	47d1                	li	a5,20
    TEST_END();
    80019c64:	00016597          	auipc	a1,0x16
    80019c68:	35458593          	addi	a1,a1,852 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019c6c:	00f70763          	beq	a4,a5,80019c7a <instruction_guest_page_fault_5+0x10a>
    80019c70:	4481                	li	s1,0
    TEST_END();
    80019c72:	00016597          	auipc	a1,0x16
    80019c76:	35658593          	addi	a1,a1,854 # 8002ffc8 <__func__.0+0x2d8>
    80019c7a:	00016517          	auipc	a0,0x16
    80019c7e:	3f650513          	addi	a0,a0,1014 # 80030070 <__func__.0+0x380>
    80019c82:	40a130ef          	jal	8002d08c <printf>
    80019c86:	4511                	li	a0,4
    80019c88:	a80e70ef          	jal	80000f08 <goto_priv>
    80019c8c:	c47e70ef          	jal	800018d2 <reset_state>

}
    80019c90:	60e2                	ld	ra,24(sp)
    80019c92:	6442                	ld	s0,16(sp)
    80019c94:	8526                	mv	a0,s1
    80019c96:	64a2                	ld	s1,8(sp)
    80019c98:	6105                	addi	sp,sp,32
    80019c9a:	8082                	ret

0000000080019c9c <instruction_guest_page_fault_6>:



bool instruction_guest_page_fault_6(){
    80019c9c:	1141                	addi	sp,sp,-16

    TEST_START();
    80019c9e:	00015597          	auipc	a1,0x15
    80019ca2:	10a58593          	addi	a1,a1,266 # 8002eda8 <__func__.1>
    80019ca6:	00016517          	auipc	a0,0x16
    80019caa:	33250513          	addi	a0,a0,818 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_guest_page_fault_6(){
    80019cae:	e406                	sd	ra,8(sp)
    80019cb0:	e022                	sd	s0,0(sp)
    TEST_START();
    80019cb2:	3da130ef          	jal	8002d08c <printf>
    80019cb6:	4529                	li	a0,10
    80019cb8:	0c2120ef          	jal	8002bd7a <putchar>
    // CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    // CSRS(CSR_MSTATUS, SSTATUS_SUM);


    goto_priv(PRIV_HS);
    80019cbc:	450d                	li	a0,3
    80019cbe:	a4ae70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019cc2:	91fe60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019cc6:	cffe60ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019cca:	ab3e60ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr ;


    goto_priv(PRIV_VS);
    80019cce:	4509                	li	a0,2
    80019cd0:	a38e70ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，在VS模式下
    vaddr = vs_page_base(VSRWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80019cd4:	938e70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019cd8:	4785                	li	a5,1
    80019cda:	1782                	slli	a5,a5,0x20
    80019cdc:	0003e717          	auipc	a4,0x3e
    80019ce0:	33470713          	addi	a4,a4,820 # 80058010 <excpt>
    80019ce4:	00000297          	auipc	t0,0x0
    80019ce8:	00c28293          	addi	t0,t0,12 # 80019cf0 <instruction_guest_page_fault_6+0x54>
    80019cec:	02573c23          	sd	t0,56(a4)
    80019cf0:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019cf2:	08200593          	li	a1,130
    80019cf6:	0001c617          	auipc	a2,0x1c
    80019cfa:	70a60613          	addi	a2,a2,1802 # 80036400 <__func__.0+0x6710>
    80019cfe:	00016517          	auipc	a0,0x16
    80019d02:	2f250513          	addi	a0,a0,754 # 8002fff0 <__func__.0+0x300>
    80019d06:	386130ef          	jal	8002d08c <printf>
    80019d0a:	0003e797          	auipc	a5,0x3e
    80019d0e:	3077c783          	lbu	a5,775(a5) # 80058011 <excpt+0x1>
    80019d12:	00016597          	auipc	a1,0x16
    80019d16:	2a658593          	addi	a1,a1,678 # 8002ffb8 <__func__.0+0x2c8>
    80019d1a:	c789                	beqz	a5,80019d24 <instruction_guest_page_fault_6+0x88>
    80019d1c:	00016597          	auipc	a1,0x16
    80019d20:	2ac58593          	addi	a1,a1,684 # 8002ffc8 <__func__.0+0x2d8>
    80019d24:	00016517          	auipc	a0,0x16
    80019d28:	2e450513          	addi	a0,a0,740 # 80030008 <__func__.0+0x318>
    80019d2c:	360130ef          	jal	8002d08c <printf>
    80019d30:	0003e797          	auipc	a5,0x3e
    80019d34:	2e17c783          	lbu	a5,737(a5) # 80058011 <excpt+0x1>
    80019d38:	e7a1                	bnez	a5,80019d80 <instruction_guest_page_fault_6+0xe4>
    80019d3a:	4529                	li	a0,10
    80019d3c:	03e120ef          	jal	8002bd7a <putchar>
    80019d40:	0003e797          	auipc	a5,0x3e
    80019d44:	2d17c783          	lbu	a5,721(a5) # 80058011 <excpt+0x1>
    80019d48:	e795                	bnez	a5,80019d74 <instruction_guest_page_fault_6+0xd8>
    80019d4a:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80019d4c:	00016597          	auipc	a1,0x16
    80019d50:	26c58593          	addi	a1,a1,620 # 8002ffb8 <__func__.0+0x2c8>
    80019d54:	00016517          	auipc	a0,0x16
    80019d58:	31c50513          	addi	a0,a0,796 # 80030070 <__func__.0+0x380>
    80019d5c:	330130ef          	jal	8002d08c <printf>
    80019d60:	4511                	li	a0,4
    80019d62:	9a6e70ef          	jal	80000f08 <goto_priv>
    80019d66:	b6de70ef          	jal	800018d2 <reset_state>
}
    80019d6a:	60a2                	ld	ra,8(sp)
    80019d6c:	8522                	mv	a0,s0
    80019d6e:	6402                	ld	s0,0(sp)
    80019d70:	0141                	addi	sp,sp,16
    80019d72:	8082                	ret
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019d74:	4401                	li	s0,0
    TEST_END();
    80019d76:	00016597          	auipc	a1,0x16
    80019d7a:	25258593          	addi	a1,a1,594 # 8002ffc8 <__func__.0+0x2d8>
    80019d7e:	bfd9                	j	80019d54 <instruction_guest_page_fault_6+0xb8>
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019d80:	00016517          	auipc	a0,0x16
    80019d84:	29050513          	addi	a0,a0,656 # 80030010 <__func__.0+0x320>
    80019d88:	304130ef          	jal	8002d08c <printf>
    80019d8c:	02900513          	li	a0,41
    80019d90:	7eb110ef          	jal	8002bd7a <putchar>
    80019d94:	b75d                	j	80019d3a <instruction_guest_page_fault_6+0x9e>

0000000080019d96 <instruction_guest_page_fault_7>:

bool instruction_guest_page_fault_7(){
    80019d96:	1101                	addi	sp,sp,-32

    TEST_START();
    80019d98:	00015597          	auipc	a1,0x15
    80019d9c:	03058593          	addi	a1,a1,48 # 8002edc8 <__func__.0>
    80019da0:	00016517          	auipc	a0,0x16
    80019da4:	23850513          	addi	a0,a0,568 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_guest_page_fault_7(){
    80019da8:	ec06                	sd	ra,24(sp)
    80019daa:	e822                	sd	s0,16(sp)
    80019dac:	e426                	sd	s1,8(sp)
    TEST_START();
    80019dae:	2de130ef          	jal	8002d08c <printf>
    80019db2:	4529                	li	a0,10
    80019db4:	7c7110ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    80019db8:	450d                	li	a0,3
    80019dba:	94ee70ef          	jal	80000f08 <goto_priv>
    hspt_init();
    80019dbe:	823e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019dc2:	c03e60ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80019dc6:	9b7e60ef          	jal	8000077c <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019dca:	4509                	li	a0,2
    80019dcc:	93ce70ef          	jal	80000f08 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    80019dd0:	83ce70ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019dd4:	400137b7          	lui	a5,0x40013
    80019dd8:	078a                	slli	a5,a5,0x2
    80019dda:	0003e417          	auipc	s0,0x3e
    80019dde:	23640413          	addi	s0,s0,566 # 80058010 <excpt>
    80019de2:	00000297          	auipc	t0,0x0
    80019de6:	00c28293          	addi	t0,t0,12 # 80019dee <instruction_guest_page_fault_7+0x58>
    80019dea:	02543c23          	sd	t0,56(s0)
    80019dee:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019df0:	08200593          	li	a1,130
    80019df4:	0001c617          	auipc	a2,0x1c
    80019df8:	64460613          	addi	a2,a2,1604 # 80036438 <__func__.0+0x6748>
    80019dfc:	00016517          	auipc	a0,0x16
    80019e00:	1f450513          	addi	a0,a0,500 # 8002fff0 <__func__.0+0x300>
    80019e04:	288130ef          	jal	8002d08c <printf>
    80019e08:	0003e797          	auipc	a5,0x3e
    80019e0c:	2097c783          	lbu	a5,521(a5) # 80058011 <excpt+0x1>
    80019e10:	00016597          	auipc	a1,0x16
    80019e14:	1b858593          	addi	a1,a1,440 # 8002ffc8 <__func__.0+0x2d8>
    80019e18:	cf89                	beqz	a5,80019e32 <instruction_guest_page_fault_7+0x9c>
    80019e1a:	6418                	ld	a4,8(s0)
    80019e1c:	47d1                	li	a5,20
    80019e1e:	00016597          	auipc	a1,0x16
    80019e22:	19a58593          	addi	a1,a1,410 # 8002ffb8 <__func__.0+0x2c8>
    80019e26:	00f70663          	beq	a4,a5,80019e32 <instruction_guest_page_fault_7+0x9c>
    80019e2a:	00016597          	auipc	a1,0x16
    80019e2e:	19e58593          	addi	a1,a1,414 # 8002ffc8 <__func__.0+0x2d8>
    80019e32:	00016517          	auipc	a0,0x16
    80019e36:	1d650513          	addi	a0,a0,470 # 80030008 <__func__.0+0x318>
    80019e3a:	252130ef          	jal	8002d08c <printf>
    80019e3e:	0003e797          	auipc	a5,0x3e
    80019e42:	1d37c783          	lbu	a5,467(a5) # 80058011 <excpt+0x1>
    80019e46:	c789                	beqz	a5,80019e50 <instruction_guest_page_fault_7+0xba>
    80019e48:	6418                	ld	a4,8(s0)
    80019e4a:	47d1                	li	a5,20
    80019e4c:	00f70c63          	beq	a4,a5,80019e64 <instruction_guest_page_fault_7+0xce>
    80019e50:	00016517          	auipc	a0,0x16
    80019e54:	1c050513          	addi	a0,a0,448 # 80030010 <__func__.0+0x320>
    80019e58:	234130ef          	jal	8002d08c <printf>
    80019e5c:	02900513          	li	a0,41
    80019e60:	71b110ef          	jal	8002bd7a <putchar>
    80019e64:	4529                	li	a0,10
    80019e66:	715110ef          	jal	8002bd7a <putchar>
    80019e6a:	0003e797          	auipc	a5,0x3e
    80019e6e:	1a77c783          	lbu	a5,423(a5) # 80058011 <excpt+0x1>
    80019e72:	4481                	li	s1,0
    80019e74:	c789                	beqz	a5,80019e7e <instruction_guest_page_fault_7+0xe8>
    80019e76:	6404                	ld	s1,8(s0)
    80019e78:	14b1                	addi	s1,s1,-20
    80019e7a:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_SETUP_EXCEPT();
    80019e7e:	f8fe60ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019e82:	400137b7          	lui	a5,0x40013
    80019e86:	078a                	slli	a5,a5,0x2
    80019e88:	00000297          	auipc	t0,0x0
    80019e8c:	00c28293          	addi	t0,t0,12 # 80019e94 <instruction_guest_page_fault_7+0xfe>
    80019e90:	02543c23          	sd	t0,56(s0)
    80019e94:	8782                	jr	a5

    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019e96:	08200593          	li	a1,130
    80019e9a:	0001c617          	auipc	a2,0x1c
    80019e9e:	60660613          	addi	a2,a2,1542 # 800364a0 <__func__.0+0x67b0>
    80019ea2:	00016517          	auipc	a0,0x16
    80019ea6:	14e50513          	addi	a0,a0,334 # 8002fff0 <__func__.0+0x300>
    80019eaa:	1e2130ef          	jal	8002d08c <printf>
    80019eae:	0003e797          	auipc	a5,0x3e
    80019eb2:	1637c783          	lbu	a5,355(a5) # 80058011 <excpt+0x1>
    80019eb6:	00016597          	auipc	a1,0x16
    80019eba:	11258593          	addi	a1,a1,274 # 8002ffc8 <__func__.0+0x2d8>
    80019ebe:	cf89                	beqz	a5,80019ed8 <instruction_guest_page_fault_7+0x142>
    80019ec0:	6418                	ld	a4,8(s0)
    80019ec2:	47d1                	li	a5,20
    80019ec4:	00016597          	auipc	a1,0x16
    80019ec8:	0f458593          	addi	a1,a1,244 # 8002ffb8 <__func__.0+0x2c8>
    80019ecc:	00f70663          	beq	a4,a5,80019ed8 <instruction_guest_page_fault_7+0x142>
    80019ed0:	00016597          	auipc	a1,0x16
    80019ed4:	0f858593          	addi	a1,a1,248 # 8002ffc8 <__func__.0+0x2d8>
    80019ed8:	00016517          	auipc	a0,0x16
    80019edc:	13050513          	addi	a0,a0,304 # 80030008 <__func__.0+0x318>
    80019ee0:	1ac130ef          	jal	8002d08c <printf>
    80019ee4:	0003e797          	auipc	a5,0x3e
    80019ee8:	12d7c783          	lbu	a5,301(a5) # 80058011 <excpt+0x1>
    80019eec:	c789                	beqz	a5,80019ef6 <instruction_guest_page_fault_7+0x160>
    80019eee:	6418                	ld	a4,8(s0)
    80019ef0:	47d1                	li	a5,20
    80019ef2:	00f70c63          	beq	a4,a5,80019f0a <instruction_guest_page_fault_7+0x174>
    80019ef6:	00016517          	auipc	a0,0x16
    80019efa:	11a50513          	addi	a0,a0,282 # 80030010 <__func__.0+0x320>
    80019efe:	18e130ef          	jal	8002d08c <printf>
    80019f02:	02900513          	li	a0,41
    80019f06:	675110ef          	jal	8002bd7a <putchar>
    80019f0a:	4529                	li	a0,10
    80019f0c:	66f110ef          	jal	8002bd7a <putchar>
    80019f10:	c095                	beqz	s1,80019f34 <instruction_guest_page_fault_7+0x19e>
    80019f12:	0003e497          	auipc	s1,0x3e
    80019f16:	0ff4c483          	lbu	s1,255(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019f1a:	00016597          	auipc	a1,0x16
    80019f1e:	0ae58593          	addi	a1,a1,174 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019f22:	cc91                	beqz	s1,80019f3e <instruction_guest_page_fault_7+0x1a8>
    80019f24:	6418                	ld	a4,8(s0)
    80019f26:	47d1                	li	a5,20
    TEST_END();
    80019f28:	00016597          	auipc	a1,0x16
    80019f2c:	09058593          	addi	a1,a1,144 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019f30:	00f70763          	beq	a4,a5,80019f3e <instruction_guest_page_fault_7+0x1a8>
    80019f34:	4481                	li	s1,0
    TEST_END();
    80019f36:	00016597          	auipc	a1,0x16
    80019f3a:	09258593          	addi	a1,a1,146 # 8002ffc8 <__func__.0+0x2d8>
    80019f3e:	00016517          	auipc	a0,0x16
    80019f42:	13250513          	addi	a0,a0,306 # 80030070 <__func__.0+0x380>
    80019f46:	146130ef          	jal	8002d08c <printf>
    80019f4a:	4511                	li	a0,4
    80019f4c:	fbde60ef          	jal	80000f08 <goto_priv>
    80019f50:	983e70ef          	jal	800018d2 <reset_state>
    80019f54:	60e2                	ld	ra,24(sp)
    80019f56:	6442                	ld	s0,16(sp)
    80019f58:	8526                	mv	a0,s1
    80019f5a:	64a2                	ld	s1,8(sp)
    80019f5c:	6105                	addi	sp,sp,32
    80019f5e:	8082                	ret

0000000080019f60 <load_access_fault_1>:
#include <page_tables.h>




bool load_access_fault_1(){
    80019f60:	1101                	addi	sp,sp,-32

    TEST_START();
    80019f62:	00015597          	auipc	a1,0x15
    80019f66:	e8658593          	addi	a1,a1,-378 # 8002ede8 <__func__.39>
    80019f6a:	00016517          	auipc	a0,0x16
    80019f6e:	06e50513          	addi	a0,a0,110 # 8002ffd8 <__func__.0+0x2e8>
bool load_access_fault_1(){
    80019f72:	ec06                	sd	ra,24(sp)
    80019f74:	e822                	sd	s0,16(sp)
    80019f76:	e426                	sd	s1,8(sp)
    TEST_START();
    80019f78:	114130ef          	jal	8002d08c <printf>
    80019f7c:	4529                	li	a0,10
    80019f7e:	5fd110ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    80019f82:	4511                	li	a0,4
    80019f84:	f85e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019f88:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位（清除）
    80019f8c:	10000793          	li	a5,256
    80019f90:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019f94:	20000793          	li	a5,512
    80019f98:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019f9c:	40000793          	li	a5,1024
    80019fa0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019fa4:	6785                	lui	a5,0x1
    80019fa6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019faa:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019fae:	4785                	li	a5,1
    80019fb0:	07fe                	slli	a5,a5,0x1f
    80019fb2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019fb6:	08100793          	li	a5,129
    80019fba:	07e2                	slli	a5,a5,0x18
    80019fbc:	3b179073          	csrw	pmpaddr1,a5
    // sfence();
    // hfence();
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019fc0:	67a1                	lui	a5,0x8
    80019fc2:	3a07a073          	csrs	pmpcfg0,a5
    
    TEST_SETUP_EXCEPT();
    80019fc6:	e47e60ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80019fca:	4785                	li	a5,1
    80019fcc:	1786                	slli	a5,a5,0x21
    80019fce:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    80019fd2:	00078783          	lb	a5,0(a5)

    lb(0x80000100UL << 2);    //访问区域内地址


    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019fd6:	08200593          	li	a1,130
    80019fda:	0001c617          	auipc	a2,0x1c
    80019fde:	52e60613          	addi	a2,a2,1326 # 80036508 <__func__.0+0x6818>
    80019fe2:	00016517          	auipc	a0,0x16
    80019fe6:	00e50513          	addi	a0,a0,14 # 8002fff0 <__func__.0+0x300>
    80019fea:	0a2130ef          	jal	8002d08c <printf>
    80019fee:	0003e797          	auipc	a5,0x3e
    80019ff2:	0237c783          	lbu	a5,35(a5) # 80058011 <excpt+0x1>
    80019ff6:	0003e497          	auipc	s1,0x3e
    80019ffa:	01a48493          	addi	s1,s1,26 # 80058010 <excpt>
    80019ffe:	00016597          	auipc	a1,0x16
    8001a002:	fca58593          	addi	a1,a1,-54 # 8002ffc8 <__func__.0+0x2d8>
    8001a006:	cf89                	beqz	a5,8001a020 <load_access_fault_1+0xc0>
    8001a008:	6498                	ld	a4,8(s1)
    8001a00a:	4795                	li	a5,5
    8001a00c:	00016597          	auipc	a1,0x16
    8001a010:	fac58593          	addi	a1,a1,-84 # 8002ffb8 <__func__.0+0x2c8>
    8001a014:	00f70663          	beq	a4,a5,8001a020 <load_access_fault_1+0xc0>
    8001a018:	00016597          	auipc	a1,0x16
    8001a01c:	fb058593          	addi	a1,a1,-80 # 8002ffc8 <__func__.0+0x2d8>
    8001a020:	00016517          	auipc	a0,0x16
    8001a024:	fe850513          	addi	a0,a0,-24 # 80030008 <__func__.0+0x318>
    8001a028:	064130ef          	jal	8002d08c <printf>
    8001a02c:	0003e797          	auipc	a5,0x3e
    8001a030:	fe57c783          	lbu	a5,-27(a5) # 80058011 <excpt+0x1>
    8001a034:	c789                	beqz	a5,8001a03e <load_access_fault_1+0xde>
    8001a036:	6498                	ld	a4,8(s1)
    8001a038:	4795                	li	a5,5
    8001a03a:	00f70c63          	beq	a4,a5,8001a052 <load_access_fault_1+0xf2>
    8001a03e:	00016517          	auipc	a0,0x16
    8001a042:	fd250513          	addi	a0,a0,-46 # 80030010 <__func__.0+0x320>
    8001a046:	046130ef          	jal	8002d08c <printf>
    8001a04a:	02900513          	li	a0,41
    8001a04e:	52d110ef          	jal	8002bd7a <putchar>
    8001a052:	4529                	li	a0,10
    8001a054:	527110ef          	jal	8002bd7a <putchar>
    8001a058:	0003e417          	auipc	s0,0x3e
    8001a05c:	fb944403          	lbu	s0,-71(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a060:	00016597          	auipc	a1,0x16
    8001a064:	f6858593          	addi	a1,a1,-152 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    8001a068:	cc11                	beqz	s0,8001a084 <load_access_fault_1+0x124>
    8001a06a:	6498                	ld	a4,8(s1)
    8001a06c:	4795                	li	a5,5
    TEST_END();
    8001a06e:	00016597          	auipc	a1,0x16
    8001a072:	f4a58593          	addi	a1,a1,-182 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    8001a076:	00f70763          	beq	a4,a5,8001a084 <load_access_fault_1+0x124>
    8001a07a:	4401                	li	s0,0
    TEST_END();
    8001a07c:	00016597          	auipc	a1,0x16
    8001a080:	f4c58593          	addi	a1,a1,-180 # 8002ffc8 <__func__.0+0x2d8>
    8001a084:	00016517          	auipc	a0,0x16
    8001a088:	fec50513          	addi	a0,a0,-20 # 80030070 <__func__.0+0x380>
    8001a08c:	000130ef          	jal	8002d08c <printf>
    8001a090:	4511                	li	a0,4
    8001a092:	e77e60ef          	jal	80000f08 <goto_priv>
    8001a096:	83de70ef          	jal	800018d2 <reset_state>
}
    8001a09a:	60e2                	ld	ra,24(sp)
    8001a09c:	8522                	mv	a0,s0
    8001a09e:	6442                	ld	s0,16(sp)
    8001a0a0:	64a2                	ld	s1,8(sp)
    8001a0a2:	6105                	addi	sp,sp,32
    8001a0a4:	8082                	ret

000000008001a0a6 <load_access_fault_2>:

bool load_access_fault_2(){
    8001a0a6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a0a8:	00015597          	auipc	a1,0x15
    8001a0ac:	d5858593          	addi	a1,a1,-680 # 8002ee00 <__func__.38>
    8001a0b0:	00016517          	auipc	a0,0x16
    8001a0b4:	f2850513          	addi	a0,a0,-216 # 8002ffd8 <__func__.0+0x2e8>
bool load_access_fault_2(){
    8001a0b8:	ec06                	sd	ra,24(sp)
    8001a0ba:	e822                	sd	s0,16(sp)
    8001a0bc:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a0be:	7cf120ef          	jal	8002d08c <printf>
    8001a0c2:	4529                	li	a0,10
    8001a0c4:	4b7110ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001a0c8:	4511                	li	a0,4
    8001a0ca:	e3fe60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0

    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a0ce:	3a005073          	csrwi	pmpcfg0,0

    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a0d2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a0d6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a0da:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a0de:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a0e2:	10000793          	li	a5,256
    8001a0e6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a0ea:	20000793          	li	a5,512
    8001a0ee:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a0f2:	40000793          	li	a5,1024
    8001a0f6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a0fa:	6785                	lui	a5,0x1
    8001a0fc:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a100:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, 0x88000000UL);
    8001a104:	47c5                	li	a5,17
    8001a106:	07ee                	slli	a5,a5,0x1b
    8001a108:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, 0x89000000UL);
    8001a10c:	08900793          	li	a5,137
    8001a110:	07e2                	slli	a5,a5,0x18
    8001a112:	3b179073          	csrw	pmpaddr1,a5


    CSRS(CSR_PMPCFG0,1ULL << 7 );       //pmp0cfg的L位 
    8001a116:	08000793          	li	a5,128
    8001a11a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );      //pmp1cfg的L位 
    8001a11e:	67a1                	lui	a5,0x8
    8001a120:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001a124:	450d                	li	a0,3
    8001a126:	de3e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a12a:	ce3e60ef          	jal	80000e0c <test_setup_except_function>
    8001a12e:	008817b7          	lui	a5,0x881
    8001a132:	07aa                	slli	a5,a5,0xa
    8001a134:	00078783          	lb	a5,0(a5) # 881000 <STACK_SIZE+0x781000>

    lb(0x88100000UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a138:	08200593          	li	a1,130
    8001a13c:	0001c617          	auipc	a2,0x1c
    8001a140:	40460613          	addi	a2,a2,1028 # 80036540 <__func__.0+0x6850>
    8001a144:	00016517          	auipc	a0,0x16
    8001a148:	eac50513          	addi	a0,a0,-340 # 8002fff0 <__func__.0+0x300>
    8001a14c:	741120ef          	jal	8002d08c <printf>
    8001a150:	0003e797          	auipc	a5,0x3e
    8001a154:	ec17c783          	lbu	a5,-319(a5) # 80058011 <excpt+0x1>
    8001a158:	0003e497          	auipc	s1,0x3e
    8001a15c:	eb848493          	addi	s1,s1,-328 # 80058010 <excpt>
    8001a160:	00016597          	auipc	a1,0x16
    8001a164:	e6858593          	addi	a1,a1,-408 # 8002ffc8 <__func__.0+0x2d8>
    8001a168:	cf89                	beqz	a5,8001a182 <load_access_fault_2+0xdc>
    8001a16a:	6498                	ld	a4,8(s1)
    8001a16c:	4795                	li	a5,5
    8001a16e:	00016597          	auipc	a1,0x16
    8001a172:	e4a58593          	addi	a1,a1,-438 # 8002ffb8 <__func__.0+0x2c8>
    8001a176:	00f70663          	beq	a4,a5,8001a182 <load_access_fault_2+0xdc>
    8001a17a:	00016597          	auipc	a1,0x16
    8001a17e:	e4e58593          	addi	a1,a1,-434 # 8002ffc8 <__func__.0+0x2d8>
    8001a182:	00016517          	auipc	a0,0x16
    8001a186:	e8650513          	addi	a0,a0,-378 # 80030008 <__func__.0+0x318>
    8001a18a:	703120ef          	jal	8002d08c <printf>
    8001a18e:	0003e797          	auipc	a5,0x3e
    8001a192:	e837c783          	lbu	a5,-381(a5) # 80058011 <excpt+0x1>
    8001a196:	c789                	beqz	a5,8001a1a0 <load_access_fault_2+0xfa>
    8001a198:	6498                	ld	a4,8(s1)
    8001a19a:	4795                	li	a5,5
    8001a19c:	00f70c63          	beq	a4,a5,8001a1b4 <load_access_fault_2+0x10e>
    8001a1a0:	00016517          	auipc	a0,0x16
    8001a1a4:	e7050513          	addi	a0,a0,-400 # 80030010 <__func__.0+0x320>
    8001a1a8:	6e5120ef          	jal	8002d08c <printf>
    8001a1ac:	02900513          	li	a0,41
    8001a1b0:	3cb110ef          	jal	8002bd7a <putchar>
    8001a1b4:	4529                	li	a0,10
    8001a1b6:	3c5110ef          	jal	8002bd7a <putchar>
    8001a1ba:	0003e417          	auipc	s0,0x3e
    8001a1be:	e5744403          	lbu	s0,-425(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a1c2:	00016597          	auipc	a1,0x16
    8001a1c6:	e0658593          	addi	a1,a1,-506 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a1ca:	cc11                	beqz	s0,8001a1e6 <load_access_fault_2+0x140>
    8001a1cc:	6498                	ld	a4,8(s1)
    8001a1ce:	4795                	li	a5,5
    TEST_END();
    8001a1d0:	00016597          	auipc	a1,0x16
    8001a1d4:	de858593          	addi	a1,a1,-536 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a1d8:	00f70763          	beq	a4,a5,8001a1e6 <load_access_fault_2+0x140>
    8001a1dc:	4401                	li	s0,0
    TEST_END();
    8001a1de:	00016597          	auipc	a1,0x16
    8001a1e2:	dea58593          	addi	a1,a1,-534 # 8002ffc8 <__func__.0+0x2d8>
    8001a1e6:	00016517          	auipc	a0,0x16
    8001a1ea:	e8a50513          	addi	a0,a0,-374 # 80030070 <__func__.0+0x380>
    8001a1ee:	69f120ef          	jal	8002d08c <printf>
    8001a1f2:	4511                	li	a0,4
    8001a1f4:	d15e60ef          	jal	80000f08 <goto_priv>
    8001a1f8:	edae70ef          	jal	800018d2 <reset_state>
}
    8001a1fc:	60e2                	ld	ra,24(sp)
    8001a1fe:	8522                	mv	a0,s0
    8001a200:	6442                	ld	s0,16(sp)
    8001a202:	64a2                	ld	s1,8(sp)
    8001a204:	6105                	addi	sp,sp,32
    8001a206:	8082                	ret

000000008001a208 <load_access_fault_3>:


bool load_access_fault_3(){
    8001a208:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a20a:	00015597          	auipc	a1,0x15
    8001a20e:	c0e58593          	addi	a1,a1,-1010 # 8002ee18 <__func__.37>
    8001a212:	00016517          	auipc	a0,0x16
    8001a216:	dc650513          	addi	a0,a0,-570 # 8002ffd8 <__func__.0+0x2e8>
bool load_access_fault_3(){
    8001a21a:	ec06                	sd	ra,24(sp)
    8001a21c:	e822                	sd	s0,16(sp)
    8001a21e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a220:	66d120ef          	jal	8002d08c <printf>
    8001a224:	4529                	li	a0,10
    8001a226:	355110ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001a22a:	4511                	li	a0,4
    8001a22c:	cdde60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a230:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a234:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a238:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a23c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a240:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a244:	10000793          	li	a5,256
    8001a248:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a24c:	20000793          	li	a5,512
    8001a250:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a254:	40000793          	li	a5,1024
    8001a258:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a25c:	6785                	lui	a5,0x1
    8001a25e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a262:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a266:	4785                	li	a5,1
    8001a268:	07fe                	slli	a5,a5,0x1f
    8001a26a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a26e:	08100793          	li	a5,129
    8001a272:	07e2                	slli	a5,a5,0x18
    8001a274:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a278:	08000793          	li	a5,128
    8001a27c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a280:	67a1                	lui	a5,0x8
    8001a282:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001a286:	4505                	li	a0,1
    8001a288:	c81e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a28c:	b81e60ef          	jal	80000e0c <test_setup_except_function>
    8001a290:	4785                	li	a5,1
    8001a292:	1786                	slli	a5,a5,0x21
    8001a294:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a298:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a29c:	08200593          	li	a1,130
    8001a2a0:	0001c617          	auipc	a2,0x1c
    8001a2a4:	2d860613          	addi	a2,a2,728 # 80036578 <__func__.0+0x6888>
    8001a2a8:	00016517          	auipc	a0,0x16
    8001a2ac:	d4850513          	addi	a0,a0,-696 # 8002fff0 <__func__.0+0x300>
    8001a2b0:	5dd120ef          	jal	8002d08c <printf>
    8001a2b4:	0003e797          	auipc	a5,0x3e
    8001a2b8:	d5d7c783          	lbu	a5,-675(a5) # 80058011 <excpt+0x1>
    8001a2bc:	0003e497          	auipc	s1,0x3e
    8001a2c0:	d5448493          	addi	s1,s1,-684 # 80058010 <excpt>
    8001a2c4:	00016597          	auipc	a1,0x16
    8001a2c8:	d0458593          	addi	a1,a1,-764 # 8002ffc8 <__func__.0+0x2d8>
    8001a2cc:	cf89                	beqz	a5,8001a2e6 <load_access_fault_3+0xde>
    8001a2ce:	6498                	ld	a4,8(s1)
    8001a2d0:	4795                	li	a5,5
    8001a2d2:	00016597          	auipc	a1,0x16
    8001a2d6:	ce658593          	addi	a1,a1,-794 # 8002ffb8 <__func__.0+0x2c8>
    8001a2da:	00f70663          	beq	a4,a5,8001a2e6 <load_access_fault_3+0xde>
    8001a2de:	00016597          	auipc	a1,0x16
    8001a2e2:	cea58593          	addi	a1,a1,-790 # 8002ffc8 <__func__.0+0x2d8>
    8001a2e6:	00016517          	auipc	a0,0x16
    8001a2ea:	d2250513          	addi	a0,a0,-734 # 80030008 <__func__.0+0x318>
    8001a2ee:	59f120ef          	jal	8002d08c <printf>
    8001a2f2:	0003e797          	auipc	a5,0x3e
    8001a2f6:	d1f7c783          	lbu	a5,-737(a5) # 80058011 <excpt+0x1>
    8001a2fa:	c789                	beqz	a5,8001a304 <load_access_fault_3+0xfc>
    8001a2fc:	6498                	ld	a4,8(s1)
    8001a2fe:	4795                	li	a5,5
    8001a300:	00f70c63          	beq	a4,a5,8001a318 <load_access_fault_3+0x110>
    8001a304:	00016517          	auipc	a0,0x16
    8001a308:	d0c50513          	addi	a0,a0,-756 # 80030010 <__func__.0+0x320>
    8001a30c:	581120ef          	jal	8002d08c <printf>
    8001a310:	02900513          	li	a0,41
    8001a314:	267110ef          	jal	8002bd7a <putchar>
    8001a318:	4529                	li	a0,10
    8001a31a:	261110ef          	jal	8002bd7a <putchar>
    8001a31e:	0003e417          	auipc	s0,0x3e
    8001a322:	cf344403          	lbu	s0,-781(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a326:	00016597          	auipc	a1,0x16
    8001a32a:	ca258593          	addi	a1,a1,-862 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a32e:	cc11                	beqz	s0,8001a34a <load_access_fault_3+0x142>
    8001a330:	6498                	ld	a4,8(s1)
    8001a332:	4795                	li	a5,5
    TEST_END();
    8001a334:	00016597          	auipc	a1,0x16
    8001a338:	c8458593          	addi	a1,a1,-892 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a33c:	00f70763          	beq	a4,a5,8001a34a <load_access_fault_3+0x142>
    8001a340:	4401                	li	s0,0
    TEST_END();
    8001a342:	00016597          	auipc	a1,0x16
    8001a346:	c8658593          	addi	a1,a1,-890 # 8002ffc8 <__func__.0+0x2d8>
    8001a34a:	00016517          	auipc	a0,0x16
    8001a34e:	d2650513          	addi	a0,a0,-730 # 80030070 <__func__.0+0x380>
    8001a352:	53b120ef          	jal	8002d08c <printf>
    8001a356:	4511                	li	a0,4
    8001a358:	bb1e60ef          	jal	80000f08 <goto_priv>
    8001a35c:	d76e70ef          	jal	800018d2 <reset_state>
}
    8001a360:	60e2                	ld	ra,24(sp)
    8001a362:	8522                	mv	a0,s0
    8001a364:	6442                	ld	s0,16(sp)
    8001a366:	64a2                	ld	s1,8(sp)
    8001a368:	6105                	addi	sp,sp,32
    8001a36a:	8082                	ret

000000008001a36c <load_access_fault_4>:

bool load_access_fault_4(){
    8001a36c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a36e:	00015597          	auipc	a1,0x15
    8001a372:	ac258593          	addi	a1,a1,-1342 # 8002ee30 <__func__.36>
    8001a376:	00016517          	auipc	a0,0x16
    8001a37a:	c6250513          	addi	a0,a0,-926 # 8002ffd8 <__func__.0+0x2e8>
bool load_access_fault_4(){
    8001a37e:	ec06                	sd	ra,24(sp)
    8001a380:	e822                	sd	s0,16(sp)
    8001a382:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a384:	509120ef          	jal	8002d08c <printf>
    8001a388:	4529                	li	a0,10
    8001a38a:	1f1110ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001a38e:	4511                	li	a0,4
    8001a390:	b79e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a394:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a398:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a39c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a3a0:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a3a4:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a3a8:	10000793          	li	a5,256
    8001a3ac:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a3b0:	20000793          	li	a5,512
    8001a3b4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a3b8:	40000793          	li	a5,1024
    8001a3bc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a3c0:	6785                	lui	a5,0x1
    8001a3c2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a3c6:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a3ca:	4785                	li	a5,1
    8001a3cc:	07fe                	slli	a5,a5,0x1f
    8001a3ce:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a3d2:	08100793          	li	a5,129
    8001a3d6:	07e2                	slli	a5,a5,0x18
    8001a3d8:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a3dc:	08000793          	li	a5,128
    8001a3e0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a3e4:	67a1                	lui	a5,0x8
    8001a3e6:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a3ea:	4501                	li	a0,0
    8001a3ec:	b1de60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a3f0:	a1de60ef          	jal	80000e0c <test_setup_except_function>
    8001a3f4:	4785                	li	a5,1
    8001a3f6:	1786                	slli	a5,a5,0x21
    8001a3f8:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a3fc:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a400:	08200593          	li	a1,130
    8001a404:	0001c617          	auipc	a2,0x1c
    8001a408:	1ac60613          	addi	a2,a2,428 # 800365b0 <__func__.0+0x68c0>
    8001a40c:	00016517          	auipc	a0,0x16
    8001a410:	be450513          	addi	a0,a0,-1052 # 8002fff0 <__func__.0+0x300>
    8001a414:	479120ef          	jal	8002d08c <printf>
    8001a418:	0003e797          	auipc	a5,0x3e
    8001a41c:	bf97c783          	lbu	a5,-1031(a5) # 80058011 <excpt+0x1>
    8001a420:	0003e497          	auipc	s1,0x3e
    8001a424:	bf048493          	addi	s1,s1,-1040 # 80058010 <excpt>
    8001a428:	00016597          	auipc	a1,0x16
    8001a42c:	ba058593          	addi	a1,a1,-1120 # 8002ffc8 <__func__.0+0x2d8>
    8001a430:	cf89                	beqz	a5,8001a44a <load_access_fault_4+0xde>
    8001a432:	6498                	ld	a4,8(s1)
    8001a434:	4795                	li	a5,5
    8001a436:	00016597          	auipc	a1,0x16
    8001a43a:	b8258593          	addi	a1,a1,-1150 # 8002ffb8 <__func__.0+0x2c8>
    8001a43e:	00f70663          	beq	a4,a5,8001a44a <load_access_fault_4+0xde>
    8001a442:	00016597          	auipc	a1,0x16
    8001a446:	b8658593          	addi	a1,a1,-1146 # 8002ffc8 <__func__.0+0x2d8>
    8001a44a:	00016517          	auipc	a0,0x16
    8001a44e:	bbe50513          	addi	a0,a0,-1090 # 80030008 <__func__.0+0x318>
    8001a452:	43b120ef          	jal	8002d08c <printf>
    8001a456:	0003e797          	auipc	a5,0x3e
    8001a45a:	bbb7c783          	lbu	a5,-1093(a5) # 80058011 <excpt+0x1>
    8001a45e:	c789                	beqz	a5,8001a468 <load_access_fault_4+0xfc>
    8001a460:	6498                	ld	a4,8(s1)
    8001a462:	4795                	li	a5,5
    8001a464:	00f70c63          	beq	a4,a5,8001a47c <load_access_fault_4+0x110>
    8001a468:	00016517          	auipc	a0,0x16
    8001a46c:	ba850513          	addi	a0,a0,-1112 # 80030010 <__func__.0+0x320>
    8001a470:	41d120ef          	jal	8002d08c <printf>
    8001a474:	02900513          	li	a0,41
    8001a478:	103110ef          	jal	8002bd7a <putchar>
    8001a47c:	4529                	li	a0,10
    8001a47e:	0fd110ef          	jal	8002bd7a <putchar>
    8001a482:	0003e417          	auipc	s0,0x3e
    8001a486:	b8f44403          	lbu	s0,-1137(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a48a:	00016597          	auipc	a1,0x16
    8001a48e:	b3e58593          	addi	a1,a1,-1218 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a492:	cc11                	beqz	s0,8001a4ae <load_access_fault_4+0x142>
    8001a494:	6498                	ld	a4,8(s1)
    8001a496:	4795                	li	a5,5
    TEST_END();
    8001a498:	00016597          	auipc	a1,0x16
    8001a49c:	b2058593          	addi	a1,a1,-1248 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a4a0:	00f70763          	beq	a4,a5,8001a4ae <load_access_fault_4+0x142>
    8001a4a4:	4401                	li	s0,0
    TEST_END();
    8001a4a6:	00016597          	auipc	a1,0x16
    8001a4aa:	b2258593          	addi	a1,a1,-1246 # 8002ffc8 <__func__.0+0x2d8>
    8001a4ae:	00016517          	auipc	a0,0x16
    8001a4b2:	bc250513          	addi	a0,a0,-1086 # 80030070 <__func__.0+0x380>
    8001a4b6:	3d7120ef          	jal	8002d08c <printf>
    8001a4ba:	4511                	li	a0,4
    8001a4bc:	a4de60ef          	jal	80000f08 <goto_priv>
    8001a4c0:	c12e70ef          	jal	800018d2 <reset_state>
}
    8001a4c4:	60e2                	ld	ra,24(sp)
    8001a4c6:	8522                	mv	a0,s0
    8001a4c8:	6442                	ld	s0,16(sp)
    8001a4ca:	64a2                	ld	s1,8(sp)
    8001a4cc:	6105                	addi	sp,sp,32
    8001a4ce:	8082                	ret

000000008001a4d0 <load_access_fault_5>:

bool load_access_fault_5(){
    8001a4d0:	1141                	addi	sp,sp,-16

    TEST_START();
    8001a4d2:	00015597          	auipc	a1,0x15
    8001a4d6:	97658593          	addi	a1,a1,-1674 # 8002ee48 <__func__.35>
    8001a4da:	00016517          	auipc	a0,0x16
    8001a4de:	afe50513          	addi	a0,a0,-1282 # 8002ffd8 <__func__.0+0x2e8>
bool load_access_fault_5(){
    8001a4e2:	e406                	sd	ra,8(sp)
    8001a4e4:	e022                	sd	s0,0(sp)
    TEST_START();
    8001a4e6:	3a7120ef          	jal	8002d08c <printf>
    8001a4ea:	4529                	li	a0,10
    8001a4ec:	08f110ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001a4f0:	4511                	li	a0,4
    8001a4f2:	a17e60ef          	jal	80000f08 <goto_priv>
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));
    8001a4f6:	3a0025f3          	csrr	a1,pmpcfg0
    8001a4fa:	0001c517          	auipc	a0,0x1c
    8001a4fe:	0ee50513          	addi	a0,a0,238 # 800365e8 <__func__.0+0x68f8>
    8001a502:	38b120ef          	jal	8002d08c <printf>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a506:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a50a:	10000793          	li	a5,256
    8001a50e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a512:	20000793          	li	a5,512
    8001a516:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a51a:	40000793          	li	a5,1024
    8001a51e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a522:	6785                	lui	a5,0x1
    8001a524:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a528:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a52c:	4785                	li	a5,1
    8001a52e:	07fe                	slli	a5,a5,0x1f
    8001a530:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a534:	08100793          	li	a5,129
    8001a538:	07e2                	slli	a5,a5,0x18
    8001a53a:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a53e:	67a1                	lui	a5,0x8
    8001a540:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001a544:	8c9e60ef          	jal	80000e0c <test_setup_except_function>
    8001a548:	4785                	li	a5,1
    8001a54a:	1786                	slli	a5,a5,0x21
    8001a54c:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a550:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    printf("%d\n",excpt.triggered);
    8001a554:	0003e597          	auipc	a1,0x3e
    8001a558:	abd5c583          	lbu	a1,-1347(a1) # 80058011 <excpt+0x1>
    8001a55c:	00016517          	auipc	a0,0x16
    8001a560:	5f450513          	addi	a0,a0,1524 # 80030b50 <__func__.0+0xe60>
    8001a564:	329120ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.cause);
    8001a568:	0003e597          	auipc	a1,0x3e
    8001a56c:	ab05b583          	ld	a1,-1360(a1) # 80058018 <excpt+0x8>
    8001a570:	00016517          	auipc	a0,0x16
    8001a574:	5e050513          	addi	a0,a0,1504 # 80030b50 <__func__.0+0xe60>
    8001a578:	315120ef          	jal	8002d08c <printf>



    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a57c:	08200593          	li	a1,130
    8001a580:	0001c617          	auipc	a2,0x1c
    8001a584:	07860613          	addi	a2,a2,120 # 800365f8 <__func__.0+0x6908>
    8001a588:	00016517          	auipc	a0,0x16
    8001a58c:	a6850513          	addi	a0,a0,-1432 # 8002fff0 <__func__.0+0x300>
    8001a590:	2fd120ef          	jal	8002d08c <printf>
    8001a594:	0003e797          	auipc	a5,0x3e
    8001a598:	a7d7c783          	lbu	a5,-1411(a5) # 80058011 <excpt+0x1>
    8001a59c:	00016597          	auipc	a1,0x16
    8001a5a0:	a1c58593          	addi	a1,a1,-1508 # 8002ffb8 <__func__.0+0x2c8>
    8001a5a4:	c789                	beqz	a5,8001a5ae <load_access_fault_5+0xde>
    8001a5a6:	00016597          	auipc	a1,0x16
    8001a5aa:	a2258593          	addi	a1,a1,-1502 # 8002ffc8 <__func__.0+0x2d8>
    8001a5ae:	00016517          	auipc	a0,0x16
    8001a5b2:	a5a50513          	addi	a0,a0,-1446 # 80030008 <__func__.0+0x318>
    8001a5b6:	2d7120ef          	jal	8002d08c <printf>
    8001a5ba:	0003e797          	auipc	a5,0x3e
    8001a5be:	a577c783          	lbu	a5,-1449(a5) # 80058011 <excpt+0x1>
    8001a5c2:	e7a1                	bnez	a5,8001a60a <load_access_fault_5+0x13a>
    8001a5c4:	4529                	li	a0,10
    8001a5c6:	7b4110ef          	jal	8002bd7a <putchar>
    8001a5ca:	0003e797          	auipc	a5,0x3e
    8001a5ce:	a477c783          	lbu	a5,-1465(a5) # 80058011 <excpt+0x1>
    8001a5d2:	e795                	bnez	a5,8001a5fe <load_access_fault_5+0x12e>
    8001a5d4:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001a5d6:	00016597          	auipc	a1,0x16
    8001a5da:	9e258593          	addi	a1,a1,-1566 # 8002ffb8 <__func__.0+0x2c8>
    8001a5de:	00016517          	auipc	a0,0x16
    8001a5e2:	a9250513          	addi	a0,a0,-1390 # 80030070 <__func__.0+0x380>
    8001a5e6:	2a7120ef          	jal	8002d08c <printf>
    8001a5ea:	4511                	li	a0,4
    8001a5ec:	91de60ef          	jal	80000f08 <goto_priv>
    8001a5f0:	ae2e70ef          	jal	800018d2 <reset_state>
}
    8001a5f4:	60a2                	ld	ra,8(sp)
    8001a5f6:	8522                	mv	a0,s0
    8001a5f8:	6402                	ld	s0,0(sp)
    8001a5fa:	0141                	addi	sp,sp,16
    8001a5fc:	8082                	ret
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a5fe:	4401                	li	s0,0
    TEST_END();
    8001a600:	00016597          	auipc	a1,0x16
    8001a604:	9c858593          	addi	a1,a1,-1592 # 8002ffc8 <__func__.0+0x2d8>
    8001a608:	bfd9                	j	8001a5de <load_access_fault_5+0x10e>
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a60a:	00016517          	auipc	a0,0x16
    8001a60e:	a0650513          	addi	a0,a0,-1530 # 80030010 <__func__.0+0x320>
    8001a612:	27b120ef          	jal	8002d08c <printf>
    8001a616:	02900513          	li	a0,41
    8001a61a:	760110ef          	jal	8002bd7a <putchar>
    8001a61e:	b75d                	j	8001a5c4 <load_access_fault_5+0xf4>

000000008001a620 <load_access_fault_6>:


bool load_access_fault_6(){
    8001a620:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a622:	00015597          	auipc	a1,0x15
    8001a626:	83e58593          	addi	a1,a1,-1986 # 8002ee60 <__func__.34>
    8001a62a:	00016517          	auipc	a0,0x16
    8001a62e:	9ae50513          	addi	a0,a0,-1618 # 8002ffd8 <__func__.0+0x2e8>
bool load_access_fault_6(){
    8001a632:	ec06                	sd	ra,24(sp)
    8001a634:	e822                	sd	s0,16(sp)
    8001a636:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a638:	255120ef          	jal	8002d08c <printf>
    8001a63c:	4529                	li	a0,10
    8001a63e:	73c110ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001a642:	4511                	li	a0,4
    8001a644:	8c5e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a648:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a64c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a650:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a654:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a658:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a65c:	10000793          	li	a5,256
    8001a660:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a664:	20000793          	li	a5,512
    8001a668:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a66c:	40000793          	li	a5,1024
    8001a670:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a674:	6785                	lui	a5,0x1
    8001a676:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a67a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a67e:	4785                	li	a5,1
    8001a680:	07fe                	slli	a5,a5,0x1f
    8001a682:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a686:	08100793          	li	a5,129
    8001a68a:	07e2                	slli	a5,a5,0x18
    8001a68c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );           //pmp0cfg的L位 
    8001a690:	08000793          	li	a5,128
    8001a694:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );          //pmp1cfg的L位 
    8001a698:	67a1                	lui	a5,0x8
    8001a69a:	3a07b073          	csrc	pmpcfg0,a5

    printf("%llx\n",CSRR(CSR_PMPADDR0));
    8001a69e:	3b0025f3          	csrr	a1,pmpaddr0
    8001a6a2:	0001c517          	auipc	a0,0x1c
    8001a6a6:	f4e50513          	addi	a0,a0,-178 # 800365f0 <__func__.0+0x6900>
    8001a6aa:	1e3120ef          	jal	8002d08c <printf>
    printf("%llx\n",CSRR(CSR_PMPADDR1));
    8001a6ae:	3b1025f3          	csrr	a1,pmpaddr1
    8001a6b2:	0001c517          	auipc	a0,0x1c
    8001a6b6:	f3e50513          	addi	a0,a0,-194 # 800365f0 <__func__.0+0x6900>
    8001a6ba:	1d3120ef          	jal	8002d08c <printf>
    goto_priv(PRIV_HS);
    8001a6be:	450d                	li	a0,3
    8001a6c0:	849e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a6c4:	f48e60ef          	jal	80000e0c <test_setup_except_function>
    8001a6c8:	4785                	li	a5,1
    8001a6ca:	1786                	slli	a5,a5,0x21
    8001a6cc:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a6d0:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a6d4:	08200593          	li	a1,130
    8001a6d8:	0001c617          	auipc	a2,0x1c
    8001a6dc:	f5860613          	addi	a2,a2,-168 # 80036630 <__func__.0+0x6940>
    8001a6e0:	00016517          	auipc	a0,0x16
    8001a6e4:	91050513          	addi	a0,a0,-1776 # 8002fff0 <__func__.0+0x300>
    8001a6e8:	1a5120ef          	jal	8002d08c <printf>
    8001a6ec:	0003e797          	auipc	a5,0x3e
    8001a6f0:	9257c783          	lbu	a5,-1755(a5) # 80058011 <excpt+0x1>
    8001a6f4:	0003e497          	auipc	s1,0x3e
    8001a6f8:	91c48493          	addi	s1,s1,-1764 # 80058010 <excpt>
    8001a6fc:	00016597          	auipc	a1,0x16
    8001a700:	8cc58593          	addi	a1,a1,-1844 # 8002ffc8 <__func__.0+0x2d8>
    8001a704:	cf89                	beqz	a5,8001a71e <load_access_fault_6+0xfe>
    8001a706:	6498                	ld	a4,8(s1)
    8001a708:	4795                	li	a5,5
    8001a70a:	00016597          	auipc	a1,0x16
    8001a70e:	8ae58593          	addi	a1,a1,-1874 # 8002ffb8 <__func__.0+0x2c8>
    8001a712:	00f70663          	beq	a4,a5,8001a71e <load_access_fault_6+0xfe>
    8001a716:	00016597          	auipc	a1,0x16
    8001a71a:	8b258593          	addi	a1,a1,-1870 # 8002ffc8 <__func__.0+0x2d8>
    8001a71e:	00016517          	auipc	a0,0x16
    8001a722:	8ea50513          	addi	a0,a0,-1814 # 80030008 <__func__.0+0x318>
    8001a726:	167120ef          	jal	8002d08c <printf>
    8001a72a:	0003e797          	auipc	a5,0x3e
    8001a72e:	8e77c783          	lbu	a5,-1817(a5) # 80058011 <excpt+0x1>
    8001a732:	c789                	beqz	a5,8001a73c <load_access_fault_6+0x11c>
    8001a734:	6498                	ld	a4,8(s1)
    8001a736:	4795                	li	a5,5
    8001a738:	00f70c63          	beq	a4,a5,8001a750 <load_access_fault_6+0x130>
    8001a73c:	00016517          	auipc	a0,0x16
    8001a740:	8d450513          	addi	a0,a0,-1836 # 80030010 <__func__.0+0x320>
    8001a744:	149120ef          	jal	8002d08c <printf>
    8001a748:	02900513          	li	a0,41
    8001a74c:	62e110ef          	jal	8002bd7a <putchar>
    8001a750:	4529                	li	a0,10
    8001a752:	628110ef          	jal	8002bd7a <putchar>
    8001a756:	0003e417          	auipc	s0,0x3e
    8001a75a:	8bb44403          	lbu	s0,-1861(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a75e:	00016597          	auipc	a1,0x16
    8001a762:	86a58593          	addi	a1,a1,-1942 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a766:	cc11                	beqz	s0,8001a782 <load_access_fault_6+0x162>
    8001a768:	6498                	ld	a4,8(s1)
    8001a76a:	4795                	li	a5,5
    TEST_END();
    8001a76c:	00016597          	auipc	a1,0x16
    8001a770:	84c58593          	addi	a1,a1,-1972 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a774:	00f70763          	beq	a4,a5,8001a782 <load_access_fault_6+0x162>
    8001a778:	4401                	li	s0,0
    TEST_END();
    8001a77a:	00016597          	auipc	a1,0x16
    8001a77e:	84e58593          	addi	a1,a1,-1970 # 8002ffc8 <__func__.0+0x2d8>
    8001a782:	00016517          	auipc	a0,0x16
    8001a786:	8ee50513          	addi	a0,a0,-1810 # 80030070 <__func__.0+0x380>
    8001a78a:	103120ef          	jal	8002d08c <printf>
    8001a78e:	4511                	li	a0,4
    8001a790:	f78e60ef          	jal	80000f08 <goto_priv>
    8001a794:	93ee70ef          	jal	800018d2 <reset_state>
}
    8001a798:	60e2                	ld	ra,24(sp)
    8001a79a:	8522                	mv	a0,s0
    8001a79c:	6442                	ld	s0,16(sp)
    8001a79e:	64a2                	ld	s1,8(sp)
    8001a7a0:	6105                	addi	sp,sp,32
    8001a7a2:	8082                	ret

000000008001a7a4 <load_access_fault_7>:


bool load_access_fault_7(){
    8001a7a4:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a7a6:	00014597          	auipc	a1,0x14
    8001a7aa:	6d258593          	addi	a1,a1,1746 # 8002ee78 <__func__.33>
    8001a7ae:	00016517          	auipc	a0,0x16
    8001a7b2:	82a50513          	addi	a0,a0,-2006 # 8002ffd8 <__func__.0+0x2e8>
bool load_access_fault_7(){
    8001a7b6:	ec06                	sd	ra,24(sp)
    8001a7b8:	e822                	sd	s0,16(sp)
    8001a7ba:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a7bc:	0d1120ef          	jal	8002d08c <printf>
    8001a7c0:	4529                	li	a0,10
    8001a7c2:	5b8110ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001a7c6:	4511                	li	a0,4
    8001a7c8:	f40e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a7cc:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a7d0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a7d4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a7d8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a7dc:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a7e0:	10000793          	li	a5,256
    8001a7e4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a7e8:	20000793          	li	a5,512
    8001a7ec:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a7f0:	40000793          	li	a5,1024
    8001a7f4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a7f8:	6785                	lui	a5,0x1
    8001a7fa:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a7fe:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a802:	4785                	li	a5,1
    8001a804:	07fe                	slli	a5,a5,0x1f
    8001a806:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a80a:	08100793          	li	a5,129
    8001a80e:	07e2                	slli	a5,a5,0x18
    8001a810:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a814:	08000793          	li	a5,128
    8001a818:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a81c:	67a1                	lui	a5,0x8
    8001a81e:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001a822:	4505                	li	a0,1
    8001a824:	ee4e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a828:	de4e60ef          	jal	80000e0c <test_setup_except_function>
    8001a82c:	4785                	li	a5,1
    8001a82e:	1786                	slli	a5,a5,0x21
    8001a830:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a834:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a838:	08200593          	li	a1,130
    8001a83c:	0001c617          	auipc	a2,0x1c
    8001a840:	e2c60613          	addi	a2,a2,-468 # 80036668 <__func__.0+0x6978>
    8001a844:	00015517          	auipc	a0,0x15
    8001a848:	7ac50513          	addi	a0,a0,1964 # 8002fff0 <__func__.0+0x300>
    8001a84c:	041120ef          	jal	8002d08c <printf>
    8001a850:	0003d797          	auipc	a5,0x3d
    8001a854:	7c17c783          	lbu	a5,1985(a5) # 80058011 <excpt+0x1>
    8001a858:	0003d497          	auipc	s1,0x3d
    8001a85c:	7b848493          	addi	s1,s1,1976 # 80058010 <excpt>
    8001a860:	00015597          	auipc	a1,0x15
    8001a864:	76858593          	addi	a1,a1,1896 # 8002ffc8 <__func__.0+0x2d8>
    8001a868:	cf89                	beqz	a5,8001a882 <load_access_fault_7+0xde>
    8001a86a:	6498                	ld	a4,8(s1)
    8001a86c:	4795                	li	a5,5
    8001a86e:	00015597          	auipc	a1,0x15
    8001a872:	74a58593          	addi	a1,a1,1866 # 8002ffb8 <__func__.0+0x2c8>
    8001a876:	00f70663          	beq	a4,a5,8001a882 <load_access_fault_7+0xde>
    8001a87a:	00015597          	auipc	a1,0x15
    8001a87e:	74e58593          	addi	a1,a1,1870 # 8002ffc8 <__func__.0+0x2d8>
    8001a882:	00015517          	auipc	a0,0x15
    8001a886:	78650513          	addi	a0,a0,1926 # 80030008 <__func__.0+0x318>
    8001a88a:	003120ef          	jal	8002d08c <printf>
    8001a88e:	0003d797          	auipc	a5,0x3d
    8001a892:	7837c783          	lbu	a5,1923(a5) # 80058011 <excpt+0x1>
    8001a896:	c789                	beqz	a5,8001a8a0 <load_access_fault_7+0xfc>
    8001a898:	6498                	ld	a4,8(s1)
    8001a89a:	4795                	li	a5,5
    8001a89c:	00f70c63          	beq	a4,a5,8001a8b4 <load_access_fault_7+0x110>
    8001a8a0:	00015517          	auipc	a0,0x15
    8001a8a4:	77050513          	addi	a0,a0,1904 # 80030010 <__func__.0+0x320>
    8001a8a8:	7e4120ef          	jal	8002d08c <printf>
    8001a8ac:	02900513          	li	a0,41
    8001a8b0:	4ca110ef          	jal	8002bd7a <putchar>
    8001a8b4:	4529                	li	a0,10
    8001a8b6:	4c4110ef          	jal	8002bd7a <putchar>
    8001a8ba:	0003d417          	auipc	s0,0x3d
    8001a8be:	75744403          	lbu	s0,1879(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a8c2:	00015597          	auipc	a1,0x15
    8001a8c6:	70658593          	addi	a1,a1,1798 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a8ca:	cc11                	beqz	s0,8001a8e6 <load_access_fault_7+0x142>
    8001a8cc:	6498                	ld	a4,8(s1)
    8001a8ce:	4795                	li	a5,5
    TEST_END();
    8001a8d0:	00015597          	auipc	a1,0x15
    8001a8d4:	6e858593          	addi	a1,a1,1768 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a8d8:	00f70763          	beq	a4,a5,8001a8e6 <load_access_fault_7+0x142>
    8001a8dc:	4401                	li	s0,0
    TEST_END();
    8001a8de:	00015597          	auipc	a1,0x15
    8001a8e2:	6ea58593          	addi	a1,a1,1770 # 8002ffc8 <__func__.0+0x2d8>
    8001a8e6:	00015517          	auipc	a0,0x15
    8001a8ea:	78a50513          	addi	a0,a0,1930 # 80030070 <__func__.0+0x380>
    8001a8ee:	79e120ef          	jal	8002d08c <printf>
    8001a8f2:	4511                	li	a0,4
    8001a8f4:	e14e60ef          	jal	80000f08 <goto_priv>
    8001a8f8:	fdbe60ef          	jal	800018d2 <reset_state>
}
    8001a8fc:	60e2                	ld	ra,24(sp)
    8001a8fe:	8522                	mv	a0,s0
    8001a900:	6442                	ld	s0,16(sp)
    8001a902:	64a2                	ld	s1,8(sp)
    8001a904:	6105                	addi	sp,sp,32
    8001a906:	8082                	ret

000000008001a908 <load_access_fault_8>:

bool load_access_fault_8(){
    8001a908:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a90a:	00014597          	auipc	a1,0x14
    8001a90e:	58658593          	addi	a1,a1,1414 # 8002ee90 <__func__.32>
    8001a912:	00015517          	auipc	a0,0x15
    8001a916:	6c650513          	addi	a0,a0,1734 # 8002ffd8 <__func__.0+0x2e8>
bool load_access_fault_8(){
    8001a91a:	ec06                	sd	ra,24(sp)
    8001a91c:	e822                	sd	s0,16(sp)
    8001a91e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a920:	76c120ef          	jal	8002d08c <printf>
    8001a924:	4529                	li	a0,10
    8001a926:	454110ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001a92a:	4511                	li	a0,4
    8001a92c:	ddce60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a930:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a934:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a938:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a93c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a940:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a944:	10000793          	li	a5,256
    8001a948:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a94c:	20000793          	li	a5,512
    8001a950:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a954:	40000793          	li	a5,1024
    8001a958:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a95c:	6785                	lui	a5,0x1
    8001a95e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a962:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a966:	4785                	li	a5,1
    8001a968:	07fe                	slli	a5,a5,0x1f
    8001a96a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a96e:	08100793          	li	a5,129
    8001a972:	07e2                	slli	a5,a5,0x18
    8001a974:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a978:	08000793          	li	a5,128
    8001a97c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a980:	67a1                	lui	a5,0x8
    8001a982:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a986:	4501                	li	a0,0
    8001a988:	d80e60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a98c:	c80e60ef          	jal	80000e0c <test_setup_except_function>
    8001a990:	4785                	li	a5,1
    8001a992:	1786                	slli	a5,a5,0x21
    8001a994:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a998:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a99c:	08200593          	li	a1,130
    8001a9a0:	0001c617          	auipc	a2,0x1c
    8001a9a4:	d0060613          	addi	a2,a2,-768 # 800366a0 <__func__.0+0x69b0>
    8001a9a8:	00015517          	auipc	a0,0x15
    8001a9ac:	64850513          	addi	a0,a0,1608 # 8002fff0 <__func__.0+0x300>
    8001a9b0:	6dc120ef          	jal	8002d08c <printf>
    8001a9b4:	0003d797          	auipc	a5,0x3d
    8001a9b8:	65d7c783          	lbu	a5,1629(a5) # 80058011 <excpt+0x1>
    8001a9bc:	0003d497          	auipc	s1,0x3d
    8001a9c0:	65448493          	addi	s1,s1,1620 # 80058010 <excpt>
    8001a9c4:	00015597          	auipc	a1,0x15
    8001a9c8:	60458593          	addi	a1,a1,1540 # 8002ffc8 <__func__.0+0x2d8>
    8001a9cc:	cf89                	beqz	a5,8001a9e6 <load_access_fault_8+0xde>
    8001a9ce:	6498                	ld	a4,8(s1)
    8001a9d0:	4795                	li	a5,5
    8001a9d2:	00015597          	auipc	a1,0x15
    8001a9d6:	5e658593          	addi	a1,a1,1510 # 8002ffb8 <__func__.0+0x2c8>
    8001a9da:	00f70663          	beq	a4,a5,8001a9e6 <load_access_fault_8+0xde>
    8001a9de:	00015597          	auipc	a1,0x15
    8001a9e2:	5ea58593          	addi	a1,a1,1514 # 8002ffc8 <__func__.0+0x2d8>
    8001a9e6:	00015517          	auipc	a0,0x15
    8001a9ea:	62250513          	addi	a0,a0,1570 # 80030008 <__func__.0+0x318>
    8001a9ee:	69e120ef          	jal	8002d08c <printf>
    8001a9f2:	0003d797          	auipc	a5,0x3d
    8001a9f6:	61f7c783          	lbu	a5,1567(a5) # 80058011 <excpt+0x1>
    8001a9fa:	c789                	beqz	a5,8001aa04 <load_access_fault_8+0xfc>
    8001a9fc:	6498                	ld	a4,8(s1)
    8001a9fe:	4795                	li	a5,5
    8001aa00:	00f70c63          	beq	a4,a5,8001aa18 <load_access_fault_8+0x110>
    8001aa04:	00015517          	auipc	a0,0x15
    8001aa08:	60c50513          	addi	a0,a0,1548 # 80030010 <__func__.0+0x320>
    8001aa0c:	680120ef          	jal	8002d08c <printf>
    8001aa10:	02900513          	li	a0,41
    8001aa14:	366110ef          	jal	8002bd7a <putchar>
    8001aa18:	4529                	li	a0,10
    8001aa1a:	360110ef          	jal	8002bd7a <putchar>
    8001aa1e:	0003d417          	auipc	s0,0x3d
    8001aa22:	5f344403          	lbu	s0,1523(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001aa26:	00015597          	auipc	a1,0x15
    8001aa2a:	5a258593          	addi	a1,a1,1442 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001aa2e:	cc11                	beqz	s0,8001aa4a <load_access_fault_8+0x142>
    8001aa30:	6498                	ld	a4,8(s1)
    8001aa32:	4795                	li	a5,5
    TEST_END();
    8001aa34:	00015597          	auipc	a1,0x15
    8001aa38:	58458593          	addi	a1,a1,1412 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001aa3c:	00f70763          	beq	a4,a5,8001aa4a <load_access_fault_8+0x142>
    8001aa40:	4401                	li	s0,0
    TEST_END();
    8001aa42:	00015597          	auipc	a1,0x15
    8001aa46:	58658593          	addi	a1,a1,1414 # 8002ffc8 <__func__.0+0x2d8>
    8001aa4a:	00015517          	auipc	a0,0x15
    8001aa4e:	62650513          	addi	a0,a0,1574 # 80030070 <__func__.0+0x380>
    8001aa52:	63a120ef          	jal	8002d08c <printf>
    8001aa56:	4511                	li	a0,4
    8001aa58:	cb0e60ef          	jal	80000f08 <goto_priv>
    8001aa5c:	e77e60ef          	jal	800018d2 <reset_state>
}
    8001aa60:	60e2                	ld	ra,24(sp)
    8001aa62:	8522                	mv	a0,s0
    8001aa64:	6442                	ld	s0,16(sp)
    8001aa66:	64a2                	ld	s1,8(sp)
    8001aa68:	6105                	addi	sp,sp,32
    8001aa6a:	8082                	ret

000000008001aa6c <load_access_fault_9>:

bool load_access_fault_9(){
    8001aa6c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001aa6e:	00014597          	auipc	a1,0x14
    8001aa72:	43a58593          	addi	a1,a1,1082 # 8002eea8 <__func__.31>
    8001aa76:	00015517          	auipc	a0,0x15
    8001aa7a:	56250513          	addi	a0,a0,1378 # 8002ffd8 <__func__.0+0x2e8>
bool load_access_fault_9(){
    8001aa7e:	ec06                	sd	ra,24(sp)
    8001aa80:	e822                	sd	s0,16(sp)
    8001aa82:	e426                	sd	s1,8(sp)
    TEST_START();
    8001aa84:	608120ef          	jal	8002d08c <printf>
    8001aa88:	4529                	li	a0,10
    8001aa8a:	2f0110ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001aa8e:	4511                	li	a0,4
    8001aa90:	c78e60ef          	jal	80000f08 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001aa94:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001aa98:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001aa9c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001aaa0:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001aaa4:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001aaa8:	10000793          	li	a5,256
    8001aaac:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001aab0:	20000793          	li	a5,512
    8001aab4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001aab8:	40000793          	li	a5,1024
    8001aabc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001aac0:	6785                	lui	a5,0x1
    8001aac2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001aac6:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001aaca:	4785                	li	a5,1
    8001aacc:	07fe                	slli	a5,a5,0x1f
    8001aace:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001aad2:	08100793          	li	a5,129
    8001aad6:	07e2                	slli	a5,a5,0x18
    8001aad8:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001aadc:	08000793          	li	a5,128
    8001aae0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001aae4:	67a1                	lui	a5,0x8
    8001aae6:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001aaea:	4501                	li	a0,0
    8001aaec:	c1ce60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001aaf0:	b1ce60ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001aaf4:	4785                	li	a5,1
    8001aaf6:	178e                	slli	a5,a5,0x23
    8001aaf8:	17e1                	addi	a5,a5,-8 # 7ff8 <_test_table_size+0x7ff7>
    8001aafa:	0007b783          	ld	a5,0(a5)
    
    ld(0x1fffffffeUL << 2);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001aafe:	08200593          	li	a1,130
    8001ab02:	0001c617          	auipc	a2,0x1c
    8001ab06:	bd660613          	addi	a2,a2,-1066 # 800366d8 <__func__.0+0x69e8>
    8001ab0a:	00015517          	auipc	a0,0x15
    8001ab0e:	4e650513          	addi	a0,a0,1254 # 8002fff0 <__func__.0+0x300>
    8001ab12:	57a120ef          	jal	8002d08c <printf>
    8001ab16:	0003d797          	auipc	a5,0x3d
    8001ab1a:	4fb7c783          	lbu	a5,1275(a5) # 80058011 <excpt+0x1>
    8001ab1e:	0003d497          	auipc	s1,0x3d
    8001ab22:	4f248493          	addi	s1,s1,1266 # 80058010 <excpt>
    8001ab26:	00015597          	auipc	a1,0x15
    8001ab2a:	4a258593          	addi	a1,a1,1186 # 8002ffc8 <__func__.0+0x2d8>
    8001ab2e:	cf89                	beqz	a5,8001ab48 <load_access_fault_9+0xdc>
    8001ab30:	6498                	ld	a4,8(s1)
    8001ab32:	4795                	li	a5,5
    8001ab34:	00015597          	auipc	a1,0x15
    8001ab38:	48458593          	addi	a1,a1,1156 # 8002ffb8 <__func__.0+0x2c8>
    8001ab3c:	00f70663          	beq	a4,a5,8001ab48 <load_access_fault_9+0xdc>
    8001ab40:	00015597          	auipc	a1,0x15
    8001ab44:	48858593          	addi	a1,a1,1160 # 8002ffc8 <__func__.0+0x2d8>
    8001ab48:	00015517          	auipc	a0,0x15
    8001ab4c:	4c050513          	addi	a0,a0,1216 # 80030008 <__func__.0+0x318>
    8001ab50:	53c120ef          	jal	8002d08c <printf>
    8001ab54:	0003d797          	auipc	a5,0x3d
    8001ab58:	4bd7c783          	lbu	a5,1213(a5) # 80058011 <excpt+0x1>
    8001ab5c:	c789                	beqz	a5,8001ab66 <load_access_fault_9+0xfa>
    8001ab5e:	6498                	ld	a4,8(s1)
    8001ab60:	4795                	li	a5,5
    8001ab62:	00f70c63          	beq	a4,a5,8001ab7a <load_access_fault_9+0x10e>
    8001ab66:	00015517          	auipc	a0,0x15
    8001ab6a:	4aa50513          	addi	a0,a0,1194 # 80030010 <__func__.0+0x320>
    8001ab6e:	51e120ef          	jal	8002d08c <printf>
    8001ab72:	02900513          	li	a0,41
    8001ab76:	204110ef          	jal	8002bd7a <putchar>
    8001ab7a:	4529                	li	a0,10
    8001ab7c:	1fe110ef          	jal	8002bd7a <putchar>
    8001ab80:	0003d417          	auipc	s0,0x3d
    8001ab84:	49144403          	lbu	s0,1169(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001ab88:	00015597          	auipc	a1,0x15
    8001ab8c:	44058593          	addi	a1,a1,1088 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001ab90:	cc11                	beqz	s0,8001abac <load_access_fault_9+0x140>
    8001ab92:	6498                	ld	a4,8(s1)
    8001ab94:	4795                	li	a5,5
    TEST_END();
    8001ab96:	00015597          	auipc	a1,0x15
    8001ab9a:	42258593          	addi	a1,a1,1058 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001ab9e:	00f70763          	beq	a4,a5,8001abac <load_access_fault_9+0x140>
    8001aba2:	4401                	li	s0,0
    TEST_END();
    8001aba4:	00015597          	auipc	a1,0x15
    8001aba8:	42458593          	addi	a1,a1,1060 # 8002ffc8 <__func__.0+0x2d8>
    8001abac:	00015517          	auipc	a0,0x15
    8001abb0:	4c450513          	addi	a0,a0,1220 # 80030070 <__func__.0+0x380>
    8001abb4:	4d8120ef          	jal	8002d08c <printf>
    8001abb8:	4511                	li	a0,4
    8001abba:	b4ee60ef          	jal	80000f08 <goto_priv>
    8001abbe:	d15e60ef          	jal	800018d2 <reset_state>
}
    8001abc2:	60e2                	ld	ra,24(sp)
    8001abc4:	8522                	mv	a0,s0
    8001abc6:	6442                	ld	s0,16(sp)
    8001abc8:	64a2                	ld	s1,8(sp)
    8001abca:	6105                	addi	sp,sp,32
    8001abcc:	8082                	ret

000000008001abce <load_access_fault_10>:

bool load_access_fault_10(){
    8001abce:	1101                	addi	sp,sp,-32

    TEST_START();
    8001abd0:	00014597          	auipc	a1,0x14
    8001abd4:	2f058593          	addi	a1,a1,752 # 8002eec0 <__func__.30>
    8001abd8:	00015517          	auipc	a0,0x15
    8001abdc:	40050513          	addi	a0,a0,1024 # 8002ffd8 <__func__.0+0x2e8>
bool load_access_fault_10(){
    8001abe0:	ec06                	sd	ra,24(sp)
    8001abe2:	e822                	sd	s0,16(sp)
    8001abe4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001abe6:	4a6120ef          	jal	8002d08c <printf>
    8001abea:	4529                	li	a0,10
    8001abec:	18e110ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001abf0:	4511                	li	a0,4
    8001abf2:	b16e60ef          	jal	80000f08 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001abf6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001abfa:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001abfe:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ac02:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ac06:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ac0a:	4785                	li	a5,1
    8001ac0c:	07fe                	slli	a5,a5,0x1f
    8001ac0e:	3b079073          	csrw	pmpaddr0,a5
    
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ac12:	08000793          	li	a5,128
    8001ac16:	3a07a073          	csrs	pmpcfg0,a5

    printf("pmpcfg0=%llx \n",CSRR(CSR_PMPCFG0));
    8001ac1a:	3a0025f3          	csrr	a1,pmpcfg0
    8001ac1e:	0001c517          	auipc	a0,0x1c
    8001ac22:	b2a50513          	addi	a0,a0,-1238 # 80036748 <__func__.0+0x6a58>
    8001ac26:	466120ef          	jal	8002d08c <printf>
    printf("pmpcfg2=%llx \n",CSRR(CSR_PMPCFG2));
    8001ac2a:	3a2025f3          	csrr	a1,pmpcfg2
    8001ac2e:	0001c517          	auipc	a0,0x1c
    8001ac32:	b2a50513          	addi	a0,a0,-1238 # 80036758 <__func__.0+0x6a68>
    8001ac36:	456120ef          	jal	8002d08c <printf>


    goto_priv(PRIV_HS);
    8001ac3a:	450d                	li	a0,3
    8001ac3c:	acce60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ac40:	9cce60ef          	jal	80000e0c <test_setup_except_function>
    8001ac44:	08f00793          	li	a5,143
    8001ac48:	07ea                	slli	a5,a5,0x1a
    8001ac4a:	0007b783          	ld	a5,0(a5)

    ld(0x8f000000UL << 2);

    printf("%d\n",excpt.triggered);
    8001ac4e:	0003d597          	auipc	a1,0x3d
    8001ac52:	3c35c583          	lbu	a1,963(a1) # 80058011 <excpt+0x1>
    8001ac56:	00016517          	auipc	a0,0x16
    8001ac5a:	efa50513          	addi	a0,a0,-262 # 80030b50 <__func__.0+0xe60>
    8001ac5e:	0003d417          	auipc	s0,0x3d
    8001ac62:	3b240413          	addi	s0,s0,946 # 80058010 <excpt>
    8001ac66:	426120ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.cause);
    8001ac6a:	640c                	ld	a1,8(s0)
    8001ac6c:	00016517          	auipc	a0,0x16
    8001ac70:	ee450513          	addi	a0,a0,-284 # 80030b50 <__func__.0+0xe60>
    8001ac74:	418120ef          	jal	8002d08c <printf>

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001ac78:	08200593          	li	a1,130
    8001ac7c:	0001c617          	auipc	a2,0x1c
    8001ac80:	aec60613          	addi	a2,a2,-1300 # 80036768 <__func__.0+0x6a78>
    8001ac84:	00015517          	auipc	a0,0x15
    8001ac88:	36c50513          	addi	a0,a0,876 # 8002fff0 <__func__.0+0x300>
    8001ac8c:	400120ef          	jal	8002d08c <printf>
    8001ac90:	0003d797          	auipc	a5,0x3d
    8001ac94:	3817c783          	lbu	a5,897(a5) # 80058011 <excpt+0x1>
    8001ac98:	00015597          	auipc	a1,0x15
    8001ac9c:	33058593          	addi	a1,a1,816 # 8002ffc8 <__func__.0+0x2d8>
    8001aca0:	cf89                	beqz	a5,8001acba <load_access_fault_10+0xec>
    8001aca2:	6418                	ld	a4,8(s0)
    8001aca4:	4795                	li	a5,5
    8001aca6:	00015597          	auipc	a1,0x15
    8001acaa:	31258593          	addi	a1,a1,786 # 8002ffb8 <__func__.0+0x2c8>
    8001acae:	00f70663          	beq	a4,a5,8001acba <load_access_fault_10+0xec>
    8001acb2:	00015597          	auipc	a1,0x15
    8001acb6:	31658593          	addi	a1,a1,790 # 8002ffc8 <__func__.0+0x2d8>
    8001acba:	00015517          	auipc	a0,0x15
    8001acbe:	34e50513          	addi	a0,a0,846 # 80030008 <__func__.0+0x318>
    8001acc2:	3ca120ef          	jal	8002d08c <printf>
    8001acc6:	0003d797          	auipc	a5,0x3d
    8001acca:	34b7c783          	lbu	a5,843(a5) # 80058011 <excpt+0x1>
    8001acce:	c789                	beqz	a5,8001acd8 <load_access_fault_10+0x10a>
    8001acd0:	6418                	ld	a4,8(s0)
    8001acd2:	4795                	li	a5,5
    8001acd4:	00f70c63          	beq	a4,a5,8001acec <load_access_fault_10+0x11e>
    8001acd8:	00015517          	auipc	a0,0x15
    8001acdc:	33850513          	addi	a0,a0,824 # 80030010 <__func__.0+0x320>
    8001ace0:	3ac120ef          	jal	8002d08c <printf>
    8001ace4:	02900513          	li	a0,41
    8001ace8:	092110ef          	jal	8002bd7a <putchar>
    8001acec:	4529                	li	a0,10
    8001acee:	08c110ef          	jal	8002bd7a <putchar>
    8001acf2:	0003d497          	auipc	s1,0x3d
    8001acf6:	31f4c483          	lbu	s1,799(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001acfa:	00015597          	auipc	a1,0x15
    8001acfe:	2ce58593          	addi	a1,a1,718 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001ad02:	cc91                	beqz	s1,8001ad1e <load_access_fault_10+0x150>
    8001ad04:	6418                	ld	a4,8(s0)
    8001ad06:	4795                	li	a5,5
    TEST_END();
    8001ad08:	00015597          	auipc	a1,0x15
    8001ad0c:	2b058593          	addi	a1,a1,688 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001ad10:	00f70763          	beq	a4,a5,8001ad1e <load_access_fault_10+0x150>
    8001ad14:	4481                	li	s1,0
    TEST_END();
    8001ad16:	00015597          	auipc	a1,0x15
    8001ad1a:	2b258593          	addi	a1,a1,690 # 8002ffc8 <__func__.0+0x2d8>
    8001ad1e:	00015517          	auipc	a0,0x15
    8001ad22:	35250513          	addi	a0,a0,850 # 80030070 <__func__.0+0x380>
    8001ad26:	366120ef          	jal	8002d08c <printf>
    8001ad2a:	4511                	li	a0,4
    8001ad2c:	9dce60ef          	jal	80000f08 <goto_priv>
    8001ad30:	ba3e60ef          	jal	800018d2 <reset_state>
}
    8001ad34:	60e2                	ld	ra,24(sp)
    8001ad36:	6442                	ld	s0,16(sp)
    8001ad38:	8526                	mv	a0,s1
    8001ad3a:	64a2                	ld	s1,8(sp)
    8001ad3c:	6105                	addi	sp,sp,32
    8001ad3e:	8082                	ret

000000008001ad40 <store_access_fault_1>:


bool store_access_fault_1(){
    8001ad40:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ad42:	00014597          	auipc	a1,0x14
    8001ad46:	19658593          	addi	a1,a1,406 # 8002eed8 <__func__.29>
    8001ad4a:	00015517          	auipc	a0,0x15
    8001ad4e:	28e50513          	addi	a0,a0,654 # 8002ffd8 <__func__.0+0x2e8>
bool store_access_fault_1(){
    8001ad52:	ec06                	sd	ra,24(sp)
    8001ad54:	e822                	sd	s0,16(sp)
    8001ad56:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ad58:	334120ef          	jal	8002d08c <printf>
    8001ad5c:	4529                	li	a0,10
    8001ad5e:	01c110ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001ad62:	4511                	li	a0,4
    8001ad64:	9a4e60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ad68:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ad6c:	10000793          	li	a5,256
    8001ad70:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ad74:	20000793          	li	a5,512
    8001ad78:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ad7c:	40000793          	li	a5,1024
    8001ad80:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ad84:	6785                	lui	a5,0x1
    8001ad86:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ad8a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ad8e:	4785                	li	a5,1
    8001ad90:	07fe                	slli	a5,a5,0x1f
    8001ad92:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ad96:	08100793          	li	a5,129
    8001ad9a:	07e2                	slli	a5,a5,0x18
    8001ad9c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ada0:	67a1                	lui	a5,0x8
    8001ada2:	3a07a073          	csrs	pmpcfg0,a5
    asm volatile ("sfence.vma \n\t");
    8001ada6:	12000073          	sfence.vma
    asm volatile(
    8001adaa:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8001adae:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
    TEST_SETUP_EXCEPT();
    8001adb2:	85ae60ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8001adb6:	4785                	li	a5,1
    8001adb8:	1786                	slli	a5,a5,0x21
    8001adba:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001adbe:	4701                	li	a4,0
    8001adc0:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2 , 0x0);

    printf("%d\n",excpt.triggered);
    8001adc4:	0003d597          	auipc	a1,0x3d
    8001adc8:	24d5c583          	lbu	a1,589(a1) # 80058011 <excpt+0x1>
    8001adcc:	00016517          	auipc	a0,0x16
    8001add0:	d8450513          	addi	a0,a0,-636 # 80030b50 <__func__.0+0xe60>
    8001add4:	0003d417          	auipc	s0,0x3d
    8001add8:	23c40413          	addi	s0,s0,572 # 80058010 <excpt>
    8001addc:	2b0120ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.cause);
    8001ade0:	640c                	ld	a1,8(s0)
    8001ade2:	00016517          	auipc	a0,0x16
    8001ade6:	d6e50513          	addi	a0,a0,-658 # 80030b50 <__func__.0+0xe60>
    8001adea:	2a2120ef          	jal	8002d08c <printf>

    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001adee:	08200593          	li	a1,130
    8001adf2:	0001c617          	auipc	a2,0x1c
    8001adf6:	9d660613          	addi	a2,a2,-1578 # 800367c8 <__func__.0+0x6ad8>
    8001adfa:	00015517          	auipc	a0,0x15
    8001adfe:	1f650513          	addi	a0,a0,502 # 8002fff0 <__func__.0+0x300>
    8001ae02:	28a120ef          	jal	8002d08c <printf>
    8001ae06:	0003d797          	auipc	a5,0x3d
    8001ae0a:	20b7c783          	lbu	a5,523(a5) # 80058011 <excpt+0x1>
    8001ae0e:	00015597          	auipc	a1,0x15
    8001ae12:	1ba58593          	addi	a1,a1,442 # 8002ffc8 <__func__.0+0x2d8>
    8001ae16:	cf89                	beqz	a5,8001ae30 <store_access_fault_1+0xf0>
    8001ae18:	6418                	ld	a4,8(s0)
    8001ae1a:	479d                	li	a5,7
    8001ae1c:	00015597          	auipc	a1,0x15
    8001ae20:	19c58593          	addi	a1,a1,412 # 8002ffb8 <__func__.0+0x2c8>
    8001ae24:	00f70663          	beq	a4,a5,8001ae30 <store_access_fault_1+0xf0>
    8001ae28:	00015597          	auipc	a1,0x15
    8001ae2c:	1a058593          	addi	a1,a1,416 # 8002ffc8 <__func__.0+0x2d8>
    8001ae30:	00015517          	auipc	a0,0x15
    8001ae34:	1d850513          	addi	a0,a0,472 # 80030008 <__func__.0+0x318>
    8001ae38:	254120ef          	jal	8002d08c <printf>
    8001ae3c:	0003d797          	auipc	a5,0x3d
    8001ae40:	1d57c783          	lbu	a5,469(a5) # 80058011 <excpt+0x1>
    8001ae44:	c789                	beqz	a5,8001ae4e <store_access_fault_1+0x10e>
    8001ae46:	6418                	ld	a4,8(s0)
    8001ae48:	479d                	li	a5,7
    8001ae4a:	00f70c63          	beq	a4,a5,8001ae62 <store_access_fault_1+0x122>
    8001ae4e:	00015517          	auipc	a0,0x15
    8001ae52:	1c250513          	addi	a0,a0,450 # 80030010 <__func__.0+0x320>
    8001ae56:	236120ef          	jal	8002d08c <printf>
    8001ae5a:	02900513          	li	a0,41
    8001ae5e:	71d100ef          	jal	8002bd7a <putchar>
    8001ae62:	4529                	li	a0,10
    8001ae64:	717100ef          	jal	8002bd7a <putchar>
    8001ae68:	0003d497          	auipc	s1,0x3d
    8001ae6c:	1a94c483          	lbu	s1,425(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001ae70:	00015597          	auipc	a1,0x15
    8001ae74:	15858593          	addi	a1,a1,344 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ae78:	cc91                	beqz	s1,8001ae94 <store_access_fault_1+0x154>
    8001ae7a:	6418                	ld	a4,8(s0)
    8001ae7c:	479d                	li	a5,7
    TEST_END();
    8001ae7e:	00015597          	auipc	a1,0x15
    8001ae82:	13a58593          	addi	a1,a1,314 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ae86:	00f70763          	beq	a4,a5,8001ae94 <store_access_fault_1+0x154>
    8001ae8a:	4481                	li	s1,0
    TEST_END();
    8001ae8c:	00015597          	auipc	a1,0x15
    8001ae90:	13c58593          	addi	a1,a1,316 # 8002ffc8 <__func__.0+0x2d8>
    8001ae94:	00015517          	auipc	a0,0x15
    8001ae98:	1dc50513          	addi	a0,a0,476 # 80030070 <__func__.0+0x380>
    8001ae9c:	1f0120ef          	jal	8002d08c <printf>
    8001aea0:	4511                	li	a0,4
    8001aea2:	866e60ef          	jal	80000f08 <goto_priv>
    8001aea6:	a2de60ef          	jal	800018d2 <reset_state>
}
    8001aeaa:	60e2                	ld	ra,24(sp)
    8001aeac:	6442                	ld	s0,16(sp)
    8001aeae:	8526                	mv	a0,s1
    8001aeb0:	64a2                	ld	s1,8(sp)
    8001aeb2:	6105                	addi	sp,sp,32
    8001aeb4:	8082                	ret

000000008001aeb6 <store_access_fault_2>:

bool store_access_fault_2(){
    8001aeb6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001aeb8:	00014597          	auipc	a1,0x14
    8001aebc:	03858593          	addi	a1,a1,56 # 8002eef0 <__func__.28>
    8001aec0:	00015517          	auipc	a0,0x15
    8001aec4:	11850513          	addi	a0,a0,280 # 8002ffd8 <__func__.0+0x2e8>
bool store_access_fault_2(){
    8001aec8:	ec06                	sd	ra,24(sp)
    8001aeca:	e822                	sd	s0,16(sp)
    8001aecc:	e426                	sd	s1,8(sp)
    TEST_START();
    8001aece:	1be120ef          	jal	8002d08c <printf>
    8001aed2:	4529                	li	a0,10
    8001aed4:	6a7100ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001aed8:	4511                	li	a0,4
    8001aeda:	82ee60ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001aede:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001aee2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001aee6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001aeea:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001aeee:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001aef2:	10000793          	li	a5,256
    8001aef6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001aefa:	20000793          	li	a5,512
    8001aefe:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001af02:	40000793          	li	a5,1024
    8001af06:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001af0a:	6785                	lui	a5,0x1
    8001af0c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001af10:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001af14:	4785                	li	a5,1
    8001af16:	07fe                	slli	a5,a5,0x1f
    8001af18:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001af1c:	08100793          	li	a5,129
    8001af20:	07e2                	slli	a5,a5,0x18
    8001af22:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001af26:	08000793          	li	a5,128
    8001af2a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001af2e:	67a1                	lui	a5,0x8
    8001af30:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001af34:	450d                	li	a0,3
    8001af36:	fd3e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001af3a:	ed3e50ef          	jal	80000e0c <test_setup_except_function>
    8001af3e:	4785                	li	a5,1
    8001af40:	1786                	slli	a5,a5,0x21
    8001af42:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001af46:	4701                	li	a4,0
    8001af48:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001af4c:	08200593          	li	a1,130
    8001af50:	0001c617          	auipc	a2,0x1c
    8001af54:	8b060613          	addi	a2,a2,-1872 # 80036800 <__func__.0+0x6b10>
    8001af58:	00015517          	auipc	a0,0x15
    8001af5c:	09850513          	addi	a0,a0,152 # 8002fff0 <__func__.0+0x300>
    8001af60:	12c120ef          	jal	8002d08c <printf>
    8001af64:	0003d797          	auipc	a5,0x3d
    8001af68:	0ad7c783          	lbu	a5,173(a5) # 80058011 <excpt+0x1>
    8001af6c:	0003d497          	auipc	s1,0x3d
    8001af70:	0a448493          	addi	s1,s1,164 # 80058010 <excpt>
    8001af74:	00015597          	auipc	a1,0x15
    8001af78:	05458593          	addi	a1,a1,84 # 8002ffc8 <__func__.0+0x2d8>
    8001af7c:	cf89                	beqz	a5,8001af96 <store_access_fault_2+0xe0>
    8001af7e:	6498                	ld	a4,8(s1)
    8001af80:	479d                	li	a5,7
    8001af82:	00015597          	auipc	a1,0x15
    8001af86:	03658593          	addi	a1,a1,54 # 8002ffb8 <__func__.0+0x2c8>
    8001af8a:	00f70663          	beq	a4,a5,8001af96 <store_access_fault_2+0xe0>
    8001af8e:	00015597          	auipc	a1,0x15
    8001af92:	03a58593          	addi	a1,a1,58 # 8002ffc8 <__func__.0+0x2d8>
    8001af96:	00015517          	auipc	a0,0x15
    8001af9a:	07250513          	addi	a0,a0,114 # 80030008 <__func__.0+0x318>
    8001af9e:	0ee120ef          	jal	8002d08c <printf>
    8001afa2:	0003d797          	auipc	a5,0x3d
    8001afa6:	06f7c783          	lbu	a5,111(a5) # 80058011 <excpt+0x1>
    8001afaa:	c789                	beqz	a5,8001afb4 <store_access_fault_2+0xfe>
    8001afac:	6498                	ld	a4,8(s1)
    8001afae:	479d                	li	a5,7
    8001afb0:	00f70c63          	beq	a4,a5,8001afc8 <store_access_fault_2+0x112>
    8001afb4:	00015517          	auipc	a0,0x15
    8001afb8:	05c50513          	addi	a0,a0,92 # 80030010 <__func__.0+0x320>
    8001afbc:	0d0120ef          	jal	8002d08c <printf>
    8001afc0:	02900513          	li	a0,41
    8001afc4:	5b7100ef          	jal	8002bd7a <putchar>
    8001afc8:	4529                	li	a0,10
    8001afca:	5b1100ef          	jal	8002bd7a <putchar>
    8001afce:	0003d417          	auipc	s0,0x3d
    8001afd2:	04344403          	lbu	s0,67(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001afd6:	00015597          	auipc	a1,0x15
    8001afda:	ff258593          	addi	a1,a1,-14 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001afde:	cc11                	beqz	s0,8001affa <store_access_fault_2+0x144>
    8001afe0:	6498                	ld	a4,8(s1)
    8001afe2:	479d                	li	a5,7
    TEST_END();
    8001afe4:	00015597          	auipc	a1,0x15
    8001afe8:	fd458593          	addi	a1,a1,-44 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001afec:	00f70763          	beq	a4,a5,8001affa <store_access_fault_2+0x144>
    8001aff0:	4401                	li	s0,0
    TEST_END();
    8001aff2:	00015597          	auipc	a1,0x15
    8001aff6:	fd658593          	addi	a1,a1,-42 # 8002ffc8 <__func__.0+0x2d8>
    8001affa:	00015517          	auipc	a0,0x15
    8001affe:	07650513          	addi	a0,a0,118 # 80030070 <__func__.0+0x380>
    8001b002:	08a120ef          	jal	8002d08c <printf>
    8001b006:	4511                	li	a0,4
    8001b008:	f01e50ef          	jal	80000f08 <goto_priv>
    8001b00c:	8c7e60ef          	jal	800018d2 <reset_state>
}
    8001b010:	60e2                	ld	ra,24(sp)
    8001b012:	8522                	mv	a0,s0
    8001b014:	6442                	ld	s0,16(sp)
    8001b016:	64a2                	ld	s1,8(sp)
    8001b018:	6105                	addi	sp,sp,32
    8001b01a:	8082                	ret

000000008001b01c <store_access_fault_3>:


bool store_access_fault_3(){
    8001b01c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b01e:	00014597          	auipc	a1,0x14
    8001b022:	eea58593          	addi	a1,a1,-278 # 8002ef08 <__func__.27>
    8001b026:	00015517          	auipc	a0,0x15
    8001b02a:	fb250513          	addi	a0,a0,-78 # 8002ffd8 <__func__.0+0x2e8>
bool store_access_fault_3(){
    8001b02e:	ec06                	sd	ra,24(sp)
    8001b030:	e822                	sd	s0,16(sp)
    8001b032:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b034:	058120ef          	jal	8002d08c <printf>
    8001b038:	4529                	li	a0,10
    8001b03a:	541100ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001b03e:	4511                	li	a0,4
    8001b040:	ec9e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b044:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b048:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b04c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b050:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b054:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b058:	10000793          	li	a5,256
    8001b05c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b060:	20000793          	li	a5,512
    8001b064:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b068:	40000793          	li	a5,1024
    8001b06c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b070:	6785                	lui	a5,0x1
    8001b072:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b076:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b07a:	4785                	li	a5,1
    8001b07c:	07fe                	slli	a5,a5,0x1f
    8001b07e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b082:	08100793          	li	a5,129
    8001b086:	07e2                	slli	a5,a5,0x18
    8001b088:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b08c:	08000793          	li	a5,128
    8001b090:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b094:	67a1                	lui	a5,0x8
    8001b096:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001b09a:	4505                	li	a0,1
    8001b09c:	e6de50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b0a0:	d6de50ef          	jal	80000e0c <test_setup_except_function>
    8001b0a4:	4785                	li	a5,1
    8001b0a6:	1786                	slli	a5,a5,0x21
    8001b0a8:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b0ac:	4701                	li	a4,0
    8001b0ae:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b0b2:	08200593          	li	a1,130
    8001b0b6:	0001b617          	auipc	a2,0x1b
    8001b0ba:	78260613          	addi	a2,a2,1922 # 80036838 <__func__.0+0x6b48>
    8001b0be:	00015517          	auipc	a0,0x15
    8001b0c2:	f3250513          	addi	a0,a0,-206 # 8002fff0 <__func__.0+0x300>
    8001b0c6:	7c7110ef          	jal	8002d08c <printf>
    8001b0ca:	0003d797          	auipc	a5,0x3d
    8001b0ce:	f477c783          	lbu	a5,-185(a5) # 80058011 <excpt+0x1>
    8001b0d2:	0003d497          	auipc	s1,0x3d
    8001b0d6:	f3e48493          	addi	s1,s1,-194 # 80058010 <excpt>
    8001b0da:	00015597          	auipc	a1,0x15
    8001b0de:	eee58593          	addi	a1,a1,-274 # 8002ffc8 <__func__.0+0x2d8>
    8001b0e2:	cf89                	beqz	a5,8001b0fc <store_access_fault_3+0xe0>
    8001b0e4:	6498                	ld	a4,8(s1)
    8001b0e6:	479d                	li	a5,7
    8001b0e8:	00015597          	auipc	a1,0x15
    8001b0ec:	ed058593          	addi	a1,a1,-304 # 8002ffb8 <__func__.0+0x2c8>
    8001b0f0:	00f70663          	beq	a4,a5,8001b0fc <store_access_fault_3+0xe0>
    8001b0f4:	00015597          	auipc	a1,0x15
    8001b0f8:	ed458593          	addi	a1,a1,-300 # 8002ffc8 <__func__.0+0x2d8>
    8001b0fc:	00015517          	auipc	a0,0x15
    8001b100:	f0c50513          	addi	a0,a0,-244 # 80030008 <__func__.0+0x318>
    8001b104:	789110ef          	jal	8002d08c <printf>
    8001b108:	0003d797          	auipc	a5,0x3d
    8001b10c:	f097c783          	lbu	a5,-247(a5) # 80058011 <excpt+0x1>
    8001b110:	c789                	beqz	a5,8001b11a <store_access_fault_3+0xfe>
    8001b112:	6498                	ld	a4,8(s1)
    8001b114:	479d                	li	a5,7
    8001b116:	00f70c63          	beq	a4,a5,8001b12e <store_access_fault_3+0x112>
    8001b11a:	00015517          	auipc	a0,0x15
    8001b11e:	ef650513          	addi	a0,a0,-266 # 80030010 <__func__.0+0x320>
    8001b122:	76b110ef          	jal	8002d08c <printf>
    8001b126:	02900513          	li	a0,41
    8001b12a:	451100ef          	jal	8002bd7a <putchar>
    8001b12e:	4529                	li	a0,10
    8001b130:	44b100ef          	jal	8002bd7a <putchar>
    8001b134:	0003d417          	auipc	s0,0x3d
    8001b138:	edd44403          	lbu	s0,-291(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b13c:	00015597          	auipc	a1,0x15
    8001b140:	e8c58593          	addi	a1,a1,-372 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b144:	cc11                	beqz	s0,8001b160 <store_access_fault_3+0x144>
    8001b146:	6498                	ld	a4,8(s1)
    8001b148:	479d                	li	a5,7
    TEST_END();
    8001b14a:	00015597          	auipc	a1,0x15
    8001b14e:	e6e58593          	addi	a1,a1,-402 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b152:	00f70763          	beq	a4,a5,8001b160 <store_access_fault_3+0x144>
    8001b156:	4401                	li	s0,0
    TEST_END();
    8001b158:	00015597          	auipc	a1,0x15
    8001b15c:	e7058593          	addi	a1,a1,-400 # 8002ffc8 <__func__.0+0x2d8>
    8001b160:	00015517          	auipc	a0,0x15
    8001b164:	f1050513          	addi	a0,a0,-240 # 80030070 <__func__.0+0x380>
    8001b168:	725110ef          	jal	8002d08c <printf>
    8001b16c:	4511                	li	a0,4
    8001b16e:	d9be50ef          	jal	80000f08 <goto_priv>
    8001b172:	f60e60ef          	jal	800018d2 <reset_state>
}
    8001b176:	60e2                	ld	ra,24(sp)
    8001b178:	8522                	mv	a0,s0
    8001b17a:	6442                	ld	s0,16(sp)
    8001b17c:	64a2                	ld	s1,8(sp)
    8001b17e:	6105                	addi	sp,sp,32
    8001b180:	8082                	ret

000000008001b182 <store_access_fault_4>:

bool store_access_fault_4(){
    8001b182:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b184:	00014597          	auipc	a1,0x14
    8001b188:	d9c58593          	addi	a1,a1,-612 # 8002ef20 <__func__.26>
    8001b18c:	00015517          	auipc	a0,0x15
    8001b190:	e4c50513          	addi	a0,a0,-436 # 8002ffd8 <__func__.0+0x2e8>
bool store_access_fault_4(){
    8001b194:	ec06                	sd	ra,24(sp)
    8001b196:	e822                	sd	s0,16(sp)
    8001b198:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b19a:	6f3110ef          	jal	8002d08c <printf>
    8001b19e:	4529                	li	a0,10
    8001b1a0:	3db100ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001b1a4:	4511                	li	a0,4
    8001b1a6:	d63e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b1aa:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b1ae:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b1b2:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b1b6:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b1ba:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b1be:	10000793          	li	a5,256
    8001b1c2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b1c6:	20000793          	li	a5,512
    8001b1ca:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b1ce:	40000793          	li	a5,1024
    8001b1d2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b1d6:	6785                	lui	a5,0x1
    8001b1d8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b1dc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b1e0:	4785                	li	a5,1
    8001b1e2:	07fe                	slli	a5,a5,0x1f
    8001b1e4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b1e8:	08100793          	li	a5,129
    8001b1ec:	07e2                	slli	a5,a5,0x18
    8001b1ee:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b1f2:	08000793          	li	a5,128
    8001b1f6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b1fa:	67a1                	lui	a5,0x8
    8001b1fc:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b200:	4501                	li	a0,0
    8001b202:	d07e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b206:	c07e50ef          	jal	80000e0c <test_setup_except_function>
    8001b20a:	4785                	li	a5,1
    8001b20c:	1786                	slli	a5,a5,0x21
    8001b20e:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b212:	4701                	li	a4,0
    8001b214:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b218:	08200593          	li	a1,130
    8001b21c:	0001b617          	auipc	a2,0x1b
    8001b220:	65460613          	addi	a2,a2,1620 # 80036870 <__func__.0+0x6b80>
    8001b224:	00015517          	auipc	a0,0x15
    8001b228:	dcc50513          	addi	a0,a0,-564 # 8002fff0 <__func__.0+0x300>
    8001b22c:	661110ef          	jal	8002d08c <printf>
    8001b230:	0003d797          	auipc	a5,0x3d
    8001b234:	de17c783          	lbu	a5,-543(a5) # 80058011 <excpt+0x1>
    8001b238:	0003d497          	auipc	s1,0x3d
    8001b23c:	dd848493          	addi	s1,s1,-552 # 80058010 <excpt>
    8001b240:	00015597          	auipc	a1,0x15
    8001b244:	d8858593          	addi	a1,a1,-632 # 8002ffc8 <__func__.0+0x2d8>
    8001b248:	cf89                	beqz	a5,8001b262 <store_access_fault_4+0xe0>
    8001b24a:	6498                	ld	a4,8(s1)
    8001b24c:	479d                	li	a5,7
    8001b24e:	00015597          	auipc	a1,0x15
    8001b252:	d6a58593          	addi	a1,a1,-662 # 8002ffb8 <__func__.0+0x2c8>
    8001b256:	00f70663          	beq	a4,a5,8001b262 <store_access_fault_4+0xe0>
    8001b25a:	00015597          	auipc	a1,0x15
    8001b25e:	d6e58593          	addi	a1,a1,-658 # 8002ffc8 <__func__.0+0x2d8>
    8001b262:	00015517          	auipc	a0,0x15
    8001b266:	da650513          	addi	a0,a0,-602 # 80030008 <__func__.0+0x318>
    8001b26a:	623110ef          	jal	8002d08c <printf>
    8001b26e:	0003d797          	auipc	a5,0x3d
    8001b272:	da37c783          	lbu	a5,-605(a5) # 80058011 <excpt+0x1>
    8001b276:	c789                	beqz	a5,8001b280 <store_access_fault_4+0xfe>
    8001b278:	6498                	ld	a4,8(s1)
    8001b27a:	479d                	li	a5,7
    8001b27c:	00f70c63          	beq	a4,a5,8001b294 <store_access_fault_4+0x112>
    8001b280:	00015517          	auipc	a0,0x15
    8001b284:	d9050513          	addi	a0,a0,-624 # 80030010 <__func__.0+0x320>
    8001b288:	605110ef          	jal	8002d08c <printf>
    8001b28c:	02900513          	li	a0,41
    8001b290:	2eb100ef          	jal	8002bd7a <putchar>
    8001b294:	4529                	li	a0,10
    8001b296:	2e5100ef          	jal	8002bd7a <putchar>
    8001b29a:	0003d417          	auipc	s0,0x3d
    8001b29e:	d7744403          	lbu	s0,-649(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b2a2:	00015597          	auipc	a1,0x15
    8001b2a6:	d2658593          	addi	a1,a1,-730 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b2aa:	cc11                	beqz	s0,8001b2c6 <store_access_fault_4+0x144>
    8001b2ac:	6498                	ld	a4,8(s1)
    8001b2ae:	479d                	li	a5,7
    TEST_END();
    8001b2b0:	00015597          	auipc	a1,0x15
    8001b2b4:	d0858593          	addi	a1,a1,-760 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b2b8:	00f70763          	beq	a4,a5,8001b2c6 <store_access_fault_4+0x144>
    8001b2bc:	4401                	li	s0,0
    TEST_END();
    8001b2be:	00015597          	auipc	a1,0x15
    8001b2c2:	d0a58593          	addi	a1,a1,-758 # 8002ffc8 <__func__.0+0x2d8>
    8001b2c6:	00015517          	auipc	a0,0x15
    8001b2ca:	daa50513          	addi	a0,a0,-598 # 80030070 <__func__.0+0x380>
    8001b2ce:	5bf110ef          	jal	8002d08c <printf>
    8001b2d2:	4511                	li	a0,4
    8001b2d4:	c35e50ef          	jal	80000f08 <goto_priv>
    8001b2d8:	dfae60ef          	jal	800018d2 <reset_state>
}
    8001b2dc:	60e2                	ld	ra,24(sp)
    8001b2de:	8522                	mv	a0,s0
    8001b2e0:	6442                	ld	s0,16(sp)
    8001b2e2:	64a2                	ld	s1,8(sp)
    8001b2e4:	6105                	addi	sp,sp,32
    8001b2e6:	8082                	ret

000000008001b2e8 <store_access_fault_5>:

bool store_access_fault_5(){
    8001b2e8:	1141                	addi	sp,sp,-16

    TEST_START();
    8001b2ea:	00014597          	auipc	a1,0x14
    8001b2ee:	c4e58593          	addi	a1,a1,-946 # 8002ef38 <__func__.25>
    8001b2f2:	00015517          	auipc	a0,0x15
    8001b2f6:	ce650513          	addi	a0,a0,-794 # 8002ffd8 <__func__.0+0x2e8>
bool store_access_fault_5(){
    8001b2fa:	e406                	sd	ra,8(sp)
    8001b2fc:	e022                	sd	s0,0(sp)
    TEST_START();
    8001b2fe:	58f110ef          	jal	8002d08c <printf>
    8001b302:	4529                	li	a0,10
    8001b304:	277100ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001b308:	4511                	li	a0,4
    8001b30a:	bffe50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b30e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b312:	10000793          	li	a5,256
    8001b316:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b31a:	20000793          	li	a5,512
    8001b31e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b322:	40000793          	li	a5,1024
    8001b326:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b32a:	6785                	lui	a5,0x1
    8001b32c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b330:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b334:	4785                	li	a5,1
    8001b336:	07fe                	slli	a5,a5,0x1f
    8001b338:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b33c:	08100793          	li	a5,129
    8001b340:	07e2                	slli	a5,a5,0x18
    8001b342:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b346:	67a1                	lui	a5,0x8
    8001b348:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001b34c:	ac1e50ef          	jal	80000e0c <test_setup_except_function>
    8001b350:	4785                	li	a5,1
    8001b352:	1786                	slli	a5,a5,0x21
    8001b354:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b358:	4701                	li	a4,0
    8001b35a:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    printf("%d\n",excpt.triggered);
    8001b35e:	0003d597          	auipc	a1,0x3d
    8001b362:	cb35c583          	lbu	a1,-845(a1) # 80058011 <excpt+0x1>
    8001b366:	00015517          	auipc	a0,0x15
    8001b36a:	7ea50513          	addi	a0,a0,2026 # 80030b50 <__func__.0+0xe60>
    8001b36e:	51f110ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.cause);
    8001b372:	0003d597          	auipc	a1,0x3d
    8001b376:	ca65b583          	ld	a1,-858(a1) # 80058018 <excpt+0x8>
    8001b37a:	00015517          	auipc	a0,0x15
    8001b37e:	7d650513          	addi	a0,a0,2006 # 80030b50 <__func__.0+0xe60>
    8001b382:	50b110ef          	jal	8002d08c <printf>

    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b386:	08200593          	li	a1,130
    8001b38a:	0001b617          	auipc	a2,0x1b
    8001b38e:	51e60613          	addi	a2,a2,1310 # 800368a8 <__func__.0+0x6bb8>
    8001b392:	00015517          	auipc	a0,0x15
    8001b396:	c5e50513          	addi	a0,a0,-930 # 8002fff0 <__func__.0+0x300>
    8001b39a:	4f3110ef          	jal	8002d08c <printf>
    8001b39e:	0003d797          	auipc	a5,0x3d
    8001b3a2:	c737c783          	lbu	a5,-909(a5) # 80058011 <excpt+0x1>
    8001b3a6:	00015597          	auipc	a1,0x15
    8001b3aa:	c1258593          	addi	a1,a1,-1006 # 8002ffb8 <__func__.0+0x2c8>
    8001b3ae:	c789                	beqz	a5,8001b3b8 <store_access_fault_5+0xd0>
    8001b3b0:	00015597          	auipc	a1,0x15
    8001b3b4:	c1858593          	addi	a1,a1,-1000 # 8002ffc8 <__func__.0+0x2d8>
    8001b3b8:	00015517          	auipc	a0,0x15
    8001b3bc:	c5050513          	addi	a0,a0,-944 # 80030008 <__func__.0+0x318>
    8001b3c0:	4cd110ef          	jal	8002d08c <printf>
    8001b3c4:	0003d797          	auipc	a5,0x3d
    8001b3c8:	c4d7c783          	lbu	a5,-947(a5) # 80058011 <excpt+0x1>
    8001b3cc:	e7a1                	bnez	a5,8001b414 <store_access_fault_5+0x12c>
    8001b3ce:	4529                	li	a0,10
    8001b3d0:	1ab100ef          	jal	8002bd7a <putchar>
    8001b3d4:	0003d797          	auipc	a5,0x3d
    8001b3d8:	c3d7c783          	lbu	a5,-963(a5) # 80058011 <excpt+0x1>
    8001b3dc:	e795                	bnez	a5,8001b408 <store_access_fault_5+0x120>
    8001b3de:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001b3e0:	00015597          	auipc	a1,0x15
    8001b3e4:	bd858593          	addi	a1,a1,-1064 # 8002ffb8 <__func__.0+0x2c8>
    8001b3e8:	00015517          	auipc	a0,0x15
    8001b3ec:	c8850513          	addi	a0,a0,-888 # 80030070 <__func__.0+0x380>
    8001b3f0:	49d110ef          	jal	8002d08c <printf>
    8001b3f4:	4511                	li	a0,4
    8001b3f6:	b13e50ef          	jal	80000f08 <goto_priv>
    8001b3fa:	cd8e60ef          	jal	800018d2 <reset_state>
}
    8001b3fe:	60a2                	ld	ra,8(sp)
    8001b400:	8522                	mv	a0,s0
    8001b402:	6402                	ld	s0,0(sp)
    8001b404:	0141                	addi	sp,sp,16
    8001b406:	8082                	ret
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b408:	4401                	li	s0,0
    TEST_END();
    8001b40a:	00015597          	auipc	a1,0x15
    8001b40e:	bbe58593          	addi	a1,a1,-1090 # 8002ffc8 <__func__.0+0x2d8>
    8001b412:	bfd9                	j	8001b3e8 <store_access_fault_5+0x100>
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b414:	00015517          	auipc	a0,0x15
    8001b418:	bfc50513          	addi	a0,a0,-1028 # 80030010 <__func__.0+0x320>
    8001b41c:	471110ef          	jal	8002d08c <printf>
    8001b420:	02900513          	li	a0,41
    8001b424:	157100ef          	jal	8002bd7a <putchar>
    8001b428:	b75d                	j	8001b3ce <store_access_fault_5+0xe6>

000000008001b42a <store_access_fault_6>:


bool store_access_fault_6(){
    8001b42a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b42c:	00014597          	auipc	a1,0x14
    8001b430:	b2458593          	addi	a1,a1,-1244 # 8002ef50 <__func__.24>
    8001b434:	00015517          	auipc	a0,0x15
    8001b438:	ba450513          	addi	a0,a0,-1116 # 8002ffd8 <__func__.0+0x2e8>
bool store_access_fault_6(){
    8001b43c:	ec06                	sd	ra,24(sp)
    8001b43e:	e822                	sd	s0,16(sp)
    8001b440:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b442:	44b110ef          	jal	8002d08c <printf>
    8001b446:	4529                	li	a0,10
    8001b448:	133100ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001b44c:	4511                	li	a0,4
    8001b44e:	abbe50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b452:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b456:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b45a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b45e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b462:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b466:	10000793          	li	a5,256
    8001b46a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b46e:	20000793          	li	a5,512
    8001b472:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b476:	40000793          	li	a5,1024
    8001b47a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b47e:	6785                	lui	a5,0x1
    8001b480:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b484:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b488:	4785                	li	a5,1
    8001b48a:	07fe                	slli	a5,a5,0x1f
    8001b48c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b490:	08100793          	li	a5,129
    8001b494:	07e2                	slli	a5,a5,0x18
    8001b496:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b49a:	08000793          	li	a5,128
    8001b49e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b4a2:	67a1                	lui	a5,0x8
    8001b4a4:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001b4a8:	450d                	li	a0,3
    8001b4aa:	a5fe50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b4ae:	95fe50ef          	jal	80000e0c <test_setup_except_function>
    8001b4b2:	4785                	li	a5,1
    8001b4b4:	1786                	slli	a5,a5,0x21
    8001b4b6:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b4ba:	4701                	li	a4,0
    8001b4bc:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b4c0:	08200593          	li	a1,130
    8001b4c4:	0001b617          	auipc	a2,0x1b
    8001b4c8:	41c60613          	addi	a2,a2,1052 # 800368e0 <__func__.0+0x6bf0>
    8001b4cc:	00015517          	auipc	a0,0x15
    8001b4d0:	b2450513          	addi	a0,a0,-1244 # 8002fff0 <__func__.0+0x300>
    8001b4d4:	3b9110ef          	jal	8002d08c <printf>
    8001b4d8:	0003d797          	auipc	a5,0x3d
    8001b4dc:	b397c783          	lbu	a5,-1223(a5) # 80058011 <excpt+0x1>
    8001b4e0:	0003d497          	auipc	s1,0x3d
    8001b4e4:	b3048493          	addi	s1,s1,-1232 # 80058010 <excpt>
    8001b4e8:	00015597          	auipc	a1,0x15
    8001b4ec:	ae058593          	addi	a1,a1,-1312 # 8002ffc8 <__func__.0+0x2d8>
    8001b4f0:	cf89                	beqz	a5,8001b50a <store_access_fault_6+0xe0>
    8001b4f2:	6498                	ld	a4,8(s1)
    8001b4f4:	479d                	li	a5,7
    8001b4f6:	00015597          	auipc	a1,0x15
    8001b4fa:	ac258593          	addi	a1,a1,-1342 # 8002ffb8 <__func__.0+0x2c8>
    8001b4fe:	00f70663          	beq	a4,a5,8001b50a <store_access_fault_6+0xe0>
    8001b502:	00015597          	auipc	a1,0x15
    8001b506:	ac658593          	addi	a1,a1,-1338 # 8002ffc8 <__func__.0+0x2d8>
    8001b50a:	00015517          	auipc	a0,0x15
    8001b50e:	afe50513          	addi	a0,a0,-1282 # 80030008 <__func__.0+0x318>
    8001b512:	37b110ef          	jal	8002d08c <printf>
    8001b516:	0003d797          	auipc	a5,0x3d
    8001b51a:	afb7c783          	lbu	a5,-1285(a5) # 80058011 <excpt+0x1>
    8001b51e:	c789                	beqz	a5,8001b528 <store_access_fault_6+0xfe>
    8001b520:	6498                	ld	a4,8(s1)
    8001b522:	479d                	li	a5,7
    8001b524:	00f70c63          	beq	a4,a5,8001b53c <store_access_fault_6+0x112>
    8001b528:	00015517          	auipc	a0,0x15
    8001b52c:	ae850513          	addi	a0,a0,-1304 # 80030010 <__func__.0+0x320>
    8001b530:	35d110ef          	jal	8002d08c <printf>
    8001b534:	02900513          	li	a0,41
    8001b538:	043100ef          	jal	8002bd7a <putchar>
    8001b53c:	4529                	li	a0,10
    8001b53e:	03d100ef          	jal	8002bd7a <putchar>
    8001b542:	0003d417          	auipc	s0,0x3d
    8001b546:	acf44403          	lbu	s0,-1329(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b54a:	00015597          	auipc	a1,0x15
    8001b54e:	a7e58593          	addi	a1,a1,-1410 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b552:	cc11                	beqz	s0,8001b56e <store_access_fault_6+0x144>
    8001b554:	6498                	ld	a4,8(s1)
    8001b556:	479d                	li	a5,7
    TEST_END();
    8001b558:	00015597          	auipc	a1,0x15
    8001b55c:	a6058593          	addi	a1,a1,-1440 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b560:	00f70763          	beq	a4,a5,8001b56e <store_access_fault_6+0x144>
    8001b564:	4401                	li	s0,0
    TEST_END();
    8001b566:	00015597          	auipc	a1,0x15
    8001b56a:	a6258593          	addi	a1,a1,-1438 # 8002ffc8 <__func__.0+0x2d8>
    8001b56e:	00015517          	auipc	a0,0x15
    8001b572:	b0250513          	addi	a0,a0,-1278 # 80030070 <__func__.0+0x380>
    8001b576:	317110ef          	jal	8002d08c <printf>
    8001b57a:	4511                	li	a0,4
    8001b57c:	98de50ef          	jal	80000f08 <goto_priv>
    8001b580:	b52e60ef          	jal	800018d2 <reset_state>
}
    8001b584:	60e2                	ld	ra,24(sp)
    8001b586:	8522                	mv	a0,s0
    8001b588:	6442                	ld	s0,16(sp)
    8001b58a:	64a2                	ld	s1,8(sp)
    8001b58c:	6105                	addi	sp,sp,32
    8001b58e:	8082                	ret

000000008001b590 <store_access_fault_7>:


bool store_access_fault_7(){
    8001b590:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b592:	00014597          	auipc	a1,0x14
    8001b596:	9d658593          	addi	a1,a1,-1578 # 8002ef68 <__func__.23>
    8001b59a:	00015517          	auipc	a0,0x15
    8001b59e:	a3e50513          	addi	a0,a0,-1474 # 8002ffd8 <__func__.0+0x2e8>
bool store_access_fault_7(){
    8001b5a2:	ec06                	sd	ra,24(sp)
    8001b5a4:	e822                	sd	s0,16(sp)
    8001b5a6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b5a8:	2e5110ef          	jal	8002d08c <printf>
    8001b5ac:	4529                	li	a0,10
    8001b5ae:	7cc100ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001b5b2:	4511                	li	a0,4
    8001b5b4:	955e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b5b8:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b5bc:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b5c0:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b5c4:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b5c8:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b5cc:	10000793          	li	a5,256
    8001b5d0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b5d4:	20000793          	li	a5,512
    8001b5d8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b5dc:	40000793          	li	a5,1024
    8001b5e0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b5e4:	6785                	lui	a5,0x1
    8001b5e6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b5ea:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b5ee:	4785                	li	a5,1
    8001b5f0:	07fe                	slli	a5,a5,0x1f
    8001b5f2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b5f6:	08100793          	li	a5,129
    8001b5fa:	07e2                	slli	a5,a5,0x18
    8001b5fc:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b600:	08000793          	li	a5,128
    8001b604:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b608:	67a1                	lui	a5,0x8
    8001b60a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001b60e:	4505                	li	a0,1
    8001b610:	8f9e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b614:	ff8e50ef          	jal	80000e0c <test_setup_except_function>
    8001b618:	4785                	li	a5,1
    8001b61a:	1786                	slli	a5,a5,0x21
    8001b61c:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b620:	4701                	li	a4,0
    8001b622:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b626:	08200593          	li	a1,130
    8001b62a:	0001b617          	auipc	a2,0x1b
    8001b62e:	2ee60613          	addi	a2,a2,750 # 80036918 <__func__.0+0x6c28>
    8001b632:	00015517          	auipc	a0,0x15
    8001b636:	9be50513          	addi	a0,a0,-1602 # 8002fff0 <__func__.0+0x300>
    8001b63a:	253110ef          	jal	8002d08c <printf>
    8001b63e:	0003d797          	auipc	a5,0x3d
    8001b642:	9d37c783          	lbu	a5,-1581(a5) # 80058011 <excpt+0x1>
    8001b646:	0003d497          	auipc	s1,0x3d
    8001b64a:	9ca48493          	addi	s1,s1,-1590 # 80058010 <excpt>
    8001b64e:	00015597          	auipc	a1,0x15
    8001b652:	97a58593          	addi	a1,a1,-1670 # 8002ffc8 <__func__.0+0x2d8>
    8001b656:	cf89                	beqz	a5,8001b670 <store_access_fault_7+0xe0>
    8001b658:	6498                	ld	a4,8(s1)
    8001b65a:	479d                	li	a5,7
    8001b65c:	00015597          	auipc	a1,0x15
    8001b660:	95c58593          	addi	a1,a1,-1700 # 8002ffb8 <__func__.0+0x2c8>
    8001b664:	00f70663          	beq	a4,a5,8001b670 <store_access_fault_7+0xe0>
    8001b668:	00015597          	auipc	a1,0x15
    8001b66c:	96058593          	addi	a1,a1,-1696 # 8002ffc8 <__func__.0+0x2d8>
    8001b670:	00015517          	auipc	a0,0x15
    8001b674:	99850513          	addi	a0,a0,-1640 # 80030008 <__func__.0+0x318>
    8001b678:	215110ef          	jal	8002d08c <printf>
    8001b67c:	0003d797          	auipc	a5,0x3d
    8001b680:	9957c783          	lbu	a5,-1643(a5) # 80058011 <excpt+0x1>
    8001b684:	c789                	beqz	a5,8001b68e <store_access_fault_7+0xfe>
    8001b686:	6498                	ld	a4,8(s1)
    8001b688:	479d                	li	a5,7
    8001b68a:	00f70c63          	beq	a4,a5,8001b6a2 <store_access_fault_7+0x112>
    8001b68e:	00015517          	auipc	a0,0x15
    8001b692:	98250513          	addi	a0,a0,-1662 # 80030010 <__func__.0+0x320>
    8001b696:	1f7110ef          	jal	8002d08c <printf>
    8001b69a:	02900513          	li	a0,41
    8001b69e:	6dc100ef          	jal	8002bd7a <putchar>
    8001b6a2:	4529                	li	a0,10
    8001b6a4:	6d6100ef          	jal	8002bd7a <putchar>
    8001b6a8:	0003d417          	auipc	s0,0x3d
    8001b6ac:	96944403          	lbu	s0,-1687(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b6b0:	00015597          	auipc	a1,0x15
    8001b6b4:	91858593          	addi	a1,a1,-1768 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b6b8:	cc11                	beqz	s0,8001b6d4 <store_access_fault_7+0x144>
    8001b6ba:	6498                	ld	a4,8(s1)
    8001b6bc:	479d                	li	a5,7
    TEST_END();
    8001b6be:	00015597          	auipc	a1,0x15
    8001b6c2:	8fa58593          	addi	a1,a1,-1798 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b6c6:	00f70763          	beq	a4,a5,8001b6d4 <store_access_fault_7+0x144>
    8001b6ca:	4401                	li	s0,0
    TEST_END();
    8001b6cc:	00015597          	auipc	a1,0x15
    8001b6d0:	8fc58593          	addi	a1,a1,-1796 # 8002ffc8 <__func__.0+0x2d8>
    8001b6d4:	00015517          	auipc	a0,0x15
    8001b6d8:	99c50513          	addi	a0,a0,-1636 # 80030070 <__func__.0+0x380>
    8001b6dc:	1b1110ef          	jal	8002d08c <printf>
    8001b6e0:	4511                	li	a0,4
    8001b6e2:	827e50ef          	jal	80000f08 <goto_priv>
    8001b6e6:	9ece60ef          	jal	800018d2 <reset_state>
}
    8001b6ea:	60e2                	ld	ra,24(sp)
    8001b6ec:	8522                	mv	a0,s0
    8001b6ee:	6442                	ld	s0,16(sp)
    8001b6f0:	64a2                	ld	s1,8(sp)
    8001b6f2:	6105                	addi	sp,sp,32
    8001b6f4:	8082                	ret

000000008001b6f6 <store_access_fault_8>:

bool store_access_fault_8(){
    8001b6f6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b6f8:	00014597          	auipc	a1,0x14
    8001b6fc:	88858593          	addi	a1,a1,-1912 # 8002ef80 <__func__.22>
    8001b700:	00015517          	auipc	a0,0x15
    8001b704:	8d850513          	addi	a0,a0,-1832 # 8002ffd8 <__func__.0+0x2e8>
bool store_access_fault_8(){
    8001b708:	ec06                	sd	ra,24(sp)
    8001b70a:	e822                	sd	s0,16(sp)
    8001b70c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b70e:	17f110ef          	jal	8002d08c <printf>
    8001b712:	4529                	li	a0,10
    8001b714:	666100ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001b718:	4511                	li	a0,4
    8001b71a:	feee50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b71e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b722:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b726:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b72a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b72e:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b732:	10000793          	li	a5,256
    8001b736:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b73a:	20000793          	li	a5,512
    8001b73e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b742:	40000793          	li	a5,1024
    8001b746:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b74a:	6785                	lui	a5,0x1
    8001b74c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b750:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b754:	4785                	li	a5,1
    8001b756:	07fe                	slli	a5,a5,0x1f
    8001b758:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b75c:	08100793          	li	a5,129
    8001b760:	07e2                	slli	a5,a5,0x18
    8001b762:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b766:	08000793          	li	a5,128
    8001b76a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b76e:	67a1                	lui	a5,0x8
    8001b770:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b774:	4501                	li	a0,0
    8001b776:	f92e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b77a:	e92e50ef          	jal	80000e0c <test_setup_except_function>
    8001b77e:	4785                	li	a5,1
    8001b780:	1786                	slli	a5,a5,0x21
    8001b782:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b786:	4701                	li	a4,0
    8001b788:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b78c:	08200593          	li	a1,130
    8001b790:	0001b617          	auipc	a2,0x1b
    8001b794:	1c060613          	addi	a2,a2,448 # 80036950 <__func__.0+0x6c60>
    8001b798:	00015517          	auipc	a0,0x15
    8001b79c:	85850513          	addi	a0,a0,-1960 # 8002fff0 <__func__.0+0x300>
    8001b7a0:	0ed110ef          	jal	8002d08c <printf>
    8001b7a4:	0003d797          	auipc	a5,0x3d
    8001b7a8:	86d7c783          	lbu	a5,-1939(a5) # 80058011 <excpt+0x1>
    8001b7ac:	0003d497          	auipc	s1,0x3d
    8001b7b0:	86448493          	addi	s1,s1,-1948 # 80058010 <excpt>
    8001b7b4:	00015597          	auipc	a1,0x15
    8001b7b8:	81458593          	addi	a1,a1,-2028 # 8002ffc8 <__func__.0+0x2d8>
    8001b7bc:	cf89                	beqz	a5,8001b7d6 <store_access_fault_8+0xe0>
    8001b7be:	6498                	ld	a4,8(s1)
    8001b7c0:	479d                	li	a5,7
    8001b7c2:	00014597          	auipc	a1,0x14
    8001b7c6:	7f658593          	addi	a1,a1,2038 # 8002ffb8 <__func__.0+0x2c8>
    8001b7ca:	00f70663          	beq	a4,a5,8001b7d6 <store_access_fault_8+0xe0>
    8001b7ce:	00014597          	auipc	a1,0x14
    8001b7d2:	7fa58593          	addi	a1,a1,2042 # 8002ffc8 <__func__.0+0x2d8>
    8001b7d6:	00015517          	auipc	a0,0x15
    8001b7da:	83250513          	addi	a0,a0,-1998 # 80030008 <__func__.0+0x318>
    8001b7de:	0af110ef          	jal	8002d08c <printf>
    8001b7e2:	0003d797          	auipc	a5,0x3d
    8001b7e6:	82f7c783          	lbu	a5,-2001(a5) # 80058011 <excpt+0x1>
    8001b7ea:	c789                	beqz	a5,8001b7f4 <store_access_fault_8+0xfe>
    8001b7ec:	6498                	ld	a4,8(s1)
    8001b7ee:	479d                	li	a5,7
    8001b7f0:	00f70c63          	beq	a4,a5,8001b808 <store_access_fault_8+0x112>
    8001b7f4:	00015517          	auipc	a0,0x15
    8001b7f8:	81c50513          	addi	a0,a0,-2020 # 80030010 <__func__.0+0x320>
    8001b7fc:	091110ef          	jal	8002d08c <printf>
    8001b800:	02900513          	li	a0,41
    8001b804:	576100ef          	jal	8002bd7a <putchar>
    8001b808:	4529                	li	a0,10
    8001b80a:	570100ef          	jal	8002bd7a <putchar>
    8001b80e:	0003d417          	auipc	s0,0x3d
    8001b812:	80344403          	lbu	s0,-2045(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b816:	00014597          	auipc	a1,0x14
    8001b81a:	7b258593          	addi	a1,a1,1970 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b81e:	cc11                	beqz	s0,8001b83a <store_access_fault_8+0x144>
    8001b820:	6498                	ld	a4,8(s1)
    8001b822:	479d                	li	a5,7
    TEST_END();
    8001b824:	00014597          	auipc	a1,0x14
    8001b828:	79458593          	addi	a1,a1,1940 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b82c:	00f70763          	beq	a4,a5,8001b83a <store_access_fault_8+0x144>
    8001b830:	4401                	li	s0,0
    TEST_END();
    8001b832:	00014597          	auipc	a1,0x14
    8001b836:	79658593          	addi	a1,a1,1942 # 8002ffc8 <__func__.0+0x2d8>
    8001b83a:	00015517          	auipc	a0,0x15
    8001b83e:	83650513          	addi	a0,a0,-1994 # 80030070 <__func__.0+0x380>
    8001b842:	04b110ef          	jal	8002d08c <printf>
    8001b846:	4511                	li	a0,4
    8001b848:	ec0e50ef          	jal	80000f08 <goto_priv>
    8001b84c:	886e60ef          	jal	800018d2 <reset_state>
}
    8001b850:	60e2                	ld	ra,24(sp)
    8001b852:	8522                	mv	a0,s0
    8001b854:	6442                	ld	s0,16(sp)
    8001b856:	64a2                	ld	s1,8(sp)
    8001b858:	6105                	addi	sp,sp,32
    8001b85a:	8082                	ret

000000008001b85c <store_access_fault_9>:

bool store_access_fault_9(){
    8001b85c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b85e:	00013597          	auipc	a1,0x13
    8001b862:	73a58593          	addi	a1,a1,1850 # 8002ef98 <__func__.21>
    8001b866:	00014517          	auipc	a0,0x14
    8001b86a:	77250513          	addi	a0,a0,1906 # 8002ffd8 <__func__.0+0x2e8>
bool store_access_fault_9(){
    8001b86e:	ec06                	sd	ra,24(sp)
    8001b870:	e822                	sd	s0,16(sp)
    8001b872:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b874:	019110ef          	jal	8002d08c <printf>
    8001b878:	4529                	li	a0,10
    8001b87a:	500100ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001b87e:	4511                	li	a0,4
    8001b880:	e88e50ef          	jal	80000f08 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b884:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b888:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b88c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b890:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b894:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b898:	10000793          	li	a5,256
    8001b89c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b8a0:	20000793          	li	a5,512
    8001b8a4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b8a8:	40000793          	li	a5,1024
    8001b8ac:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b8b0:	6785                	lui	a5,0x1
    8001b8b2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b8b6:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b8ba:	4785                	li	a5,1
    8001b8bc:	07fe                	slli	a5,a5,0x1f
    8001b8be:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b8c2:	08100793          	li	a5,129
    8001b8c6:	07e2                	slli	a5,a5,0x18
    8001b8c8:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b8cc:	08000793          	li	a5,128
    8001b8d0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b8d4:	67a1                	lui	a5,0x8
    8001b8d6:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b8da:	4501                	li	a0,0
    8001b8dc:	e2ce50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b8e0:	d2ce50ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001b8e4:	37ab77b7          	lui	a5,0x37ab7
    8001b8e8:	4705                	li	a4,1
    8001b8ea:	078a                	slli	a5,a5,0x2
    8001b8ec:	170e                	slli	a4,a4,0x23
    8001b8ee:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001b8f2:	1761                	addi	a4,a4,-8
    8001b8f4:	00f73023          	sd	a5,0(a4)
    
    sd(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b8f8:	08200593          	li	a1,130
    8001b8fc:	0001b617          	auipc	a2,0x1b
    8001b900:	08c60613          	addi	a2,a2,140 # 80036988 <__func__.0+0x6c98>
    8001b904:	00014517          	auipc	a0,0x14
    8001b908:	6ec50513          	addi	a0,a0,1772 # 8002fff0 <__func__.0+0x300>
    8001b90c:	780110ef          	jal	8002d08c <printf>
    8001b910:	0003c797          	auipc	a5,0x3c
    8001b914:	7017c783          	lbu	a5,1793(a5) # 80058011 <excpt+0x1>
    8001b918:	0003c497          	auipc	s1,0x3c
    8001b91c:	6f848493          	addi	s1,s1,1784 # 80058010 <excpt>
    8001b920:	00014597          	auipc	a1,0x14
    8001b924:	6a858593          	addi	a1,a1,1704 # 8002ffc8 <__func__.0+0x2d8>
    8001b928:	cf89                	beqz	a5,8001b942 <store_access_fault_9+0xe6>
    8001b92a:	6498                	ld	a4,8(s1)
    8001b92c:	479d                	li	a5,7
    8001b92e:	00014597          	auipc	a1,0x14
    8001b932:	68a58593          	addi	a1,a1,1674 # 8002ffb8 <__func__.0+0x2c8>
    8001b936:	00f70663          	beq	a4,a5,8001b942 <store_access_fault_9+0xe6>
    8001b93a:	00014597          	auipc	a1,0x14
    8001b93e:	68e58593          	addi	a1,a1,1678 # 8002ffc8 <__func__.0+0x2d8>
    8001b942:	00014517          	auipc	a0,0x14
    8001b946:	6c650513          	addi	a0,a0,1734 # 80030008 <__func__.0+0x318>
    8001b94a:	742110ef          	jal	8002d08c <printf>
    8001b94e:	0003c797          	auipc	a5,0x3c
    8001b952:	6c37c783          	lbu	a5,1731(a5) # 80058011 <excpt+0x1>
    8001b956:	c789                	beqz	a5,8001b960 <store_access_fault_9+0x104>
    8001b958:	6498                	ld	a4,8(s1)
    8001b95a:	479d                	li	a5,7
    8001b95c:	00f70c63          	beq	a4,a5,8001b974 <store_access_fault_9+0x118>
    8001b960:	00014517          	auipc	a0,0x14
    8001b964:	6b050513          	addi	a0,a0,1712 # 80030010 <__func__.0+0x320>
    8001b968:	724110ef          	jal	8002d08c <printf>
    8001b96c:	02900513          	li	a0,41
    8001b970:	40a100ef          	jal	8002bd7a <putchar>
    8001b974:	4529                	li	a0,10
    8001b976:	404100ef          	jal	8002bd7a <putchar>
    8001b97a:	0003c417          	auipc	s0,0x3c
    8001b97e:	69744403          	lbu	s0,1687(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b982:	00014597          	auipc	a1,0x14
    8001b986:	64658593          	addi	a1,a1,1606 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b98a:	cc11                	beqz	s0,8001b9a6 <store_access_fault_9+0x14a>
    8001b98c:	6498                	ld	a4,8(s1)
    8001b98e:	479d                	li	a5,7
    TEST_END();
    8001b990:	00014597          	auipc	a1,0x14
    8001b994:	62858593          	addi	a1,a1,1576 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b998:	00f70763          	beq	a4,a5,8001b9a6 <store_access_fault_9+0x14a>
    8001b99c:	4401                	li	s0,0
    TEST_END();
    8001b99e:	00014597          	auipc	a1,0x14
    8001b9a2:	62a58593          	addi	a1,a1,1578 # 8002ffc8 <__func__.0+0x2d8>
    8001b9a6:	00014517          	auipc	a0,0x14
    8001b9aa:	6ca50513          	addi	a0,a0,1738 # 80030070 <__func__.0+0x380>
    8001b9ae:	6de110ef          	jal	8002d08c <printf>
    8001b9b2:	4511                	li	a0,4
    8001b9b4:	d54e50ef          	jal	80000f08 <goto_priv>
    8001b9b8:	f1be50ef          	jal	800018d2 <reset_state>
}
    8001b9bc:	60e2                	ld	ra,24(sp)
    8001b9be:	8522                	mv	a0,s0
    8001b9c0:	6442                	ld	s0,16(sp)
    8001b9c2:	64a2                	ld	s1,8(sp)
    8001b9c4:	6105                	addi	sp,sp,32
    8001b9c6:	8082                	ret

000000008001b9c8 <store_access_fault_10>:


bool store_access_fault_10(){
    8001b9c8:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b9ca:	00013597          	auipc	a1,0x13
    8001b9ce:	5e658593          	addi	a1,a1,1510 # 8002efb0 <__func__.20>
    8001b9d2:	00014517          	auipc	a0,0x14
    8001b9d6:	60650513          	addi	a0,a0,1542 # 8002ffd8 <__func__.0+0x2e8>
bool store_access_fault_10(){
    8001b9da:	ec06                	sd	ra,24(sp)
    8001b9dc:	e822                	sd	s0,16(sp)
    8001b9de:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b9e0:	6ac110ef          	jal	8002d08c <printf>
    8001b9e4:	4529                	li	a0,10
    8001b9e6:	394100ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001b9ea:	4511                	li	a0,4
    8001b9ec:	d1ce50ef          	jal	80000f08 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b9f0:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b9f4:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b9f8:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b9fc:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ba00:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ba04:	4785                	li	a5,1
    8001ba06:	07fe                	slli	a5,a5,0x1f
    8001ba08:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ba0c:	08000793          	li	a5,128
    8001ba10:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001ba14:	450d                	li	a0,3
    8001ba16:	cf2e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ba1a:	bf2e50ef          	jal	80000e0c <test_setup_except_function>
    8001ba1e:	37ab77b7          	lui	a5,0x37ab7
    8001ba22:	078a                	slli	a5,a5,0x2
    8001ba24:	00803737          	lui	a4,0x803
    8001ba28:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001ba2c:	072a                	slli	a4,a4,0xa
    8001ba2e:	00f73023          	sd	a5,0(a4) # 803000 <STACK_SIZE+0x703000>
    
    sd(0x80300000UL << 2,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001ba32:	08200593          	li	a1,130
    8001ba36:	0001b617          	auipc	a2,0x1b
    8001ba3a:	fc260613          	addi	a2,a2,-62 # 800369f8 <__func__.0+0x6d08>
    8001ba3e:	00014517          	auipc	a0,0x14
    8001ba42:	5b250513          	addi	a0,a0,1458 # 8002fff0 <__func__.0+0x300>
    8001ba46:	646110ef          	jal	8002d08c <printf>
    8001ba4a:	0003c797          	auipc	a5,0x3c
    8001ba4e:	5c77c783          	lbu	a5,1479(a5) # 80058011 <excpt+0x1>
    8001ba52:	0003c497          	auipc	s1,0x3c
    8001ba56:	5be48493          	addi	s1,s1,1470 # 80058010 <excpt>
    8001ba5a:	00014597          	auipc	a1,0x14
    8001ba5e:	56e58593          	addi	a1,a1,1390 # 8002ffc8 <__func__.0+0x2d8>
    8001ba62:	cf89                	beqz	a5,8001ba7c <store_access_fault_10+0xb4>
    8001ba64:	6498                	ld	a4,8(s1)
    8001ba66:	479d                	li	a5,7
    8001ba68:	00014597          	auipc	a1,0x14
    8001ba6c:	55058593          	addi	a1,a1,1360 # 8002ffb8 <__func__.0+0x2c8>
    8001ba70:	00f70663          	beq	a4,a5,8001ba7c <store_access_fault_10+0xb4>
    8001ba74:	00014597          	auipc	a1,0x14
    8001ba78:	55458593          	addi	a1,a1,1364 # 8002ffc8 <__func__.0+0x2d8>
    8001ba7c:	00014517          	auipc	a0,0x14
    8001ba80:	58c50513          	addi	a0,a0,1420 # 80030008 <__func__.0+0x318>
    8001ba84:	608110ef          	jal	8002d08c <printf>
    8001ba88:	0003c797          	auipc	a5,0x3c
    8001ba8c:	5897c783          	lbu	a5,1417(a5) # 80058011 <excpt+0x1>
    8001ba90:	c789                	beqz	a5,8001ba9a <store_access_fault_10+0xd2>
    8001ba92:	6498                	ld	a4,8(s1)
    8001ba94:	479d                	li	a5,7
    8001ba96:	00f70c63          	beq	a4,a5,8001baae <store_access_fault_10+0xe6>
    8001ba9a:	00014517          	auipc	a0,0x14
    8001ba9e:	57650513          	addi	a0,a0,1398 # 80030010 <__func__.0+0x320>
    8001baa2:	5ea110ef          	jal	8002d08c <printf>
    8001baa6:	02900513          	li	a0,41
    8001baaa:	2d0100ef          	jal	8002bd7a <putchar>
    8001baae:	4529                	li	a0,10
    8001bab0:	2ca100ef          	jal	8002bd7a <putchar>
    8001bab4:	0003c417          	auipc	s0,0x3c
    8001bab8:	55d44403          	lbu	s0,1373(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001babc:	00014597          	auipc	a1,0x14
    8001bac0:	50c58593          	addi	a1,a1,1292 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001bac4:	cc11                	beqz	s0,8001bae0 <store_access_fault_10+0x118>
    8001bac6:	6498                	ld	a4,8(s1)
    8001bac8:	479d                	li	a5,7
    TEST_END();
    8001baca:	00014597          	auipc	a1,0x14
    8001bace:	4ee58593          	addi	a1,a1,1262 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001bad2:	00f70763          	beq	a4,a5,8001bae0 <store_access_fault_10+0x118>
    8001bad6:	4401                	li	s0,0
    TEST_END();
    8001bad8:	00014597          	auipc	a1,0x14
    8001badc:	4f058593          	addi	a1,a1,1264 # 8002ffc8 <__func__.0+0x2d8>
    8001bae0:	00014517          	auipc	a0,0x14
    8001bae4:	59050513          	addi	a0,a0,1424 # 80030070 <__func__.0+0x380>
    8001bae8:	5a4110ef          	jal	8002d08c <printf>
    8001baec:	4511                	li	a0,4
    8001baee:	c1ae50ef          	jal	80000f08 <goto_priv>
    8001baf2:	de1e50ef          	jal	800018d2 <reset_state>
}
    8001baf6:	60e2                	ld	ra,24(sp)
    8001baf8:	8522                	mv	a0,s0
    8001bafa:	6442                	ld	s0,16(sp)
    8001bafc:	64a2                	ld	s1,8(sp)
    8001bafe:	6105                	addi	sp,sp,32
    8001bb00:	8082                	ret

000000008001bb02 <amo_access_fault_1>:




bool amo_access_fault_1(){
    8001bb02:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bb04:	00013597          	auipc	a1,0x13
    8001bb08:	4c458593          	addi	a1,a1,1220 # 8002efc8 <__func__.19>
    8001bb0c:	00014517          	auipc	a0,0x14
    8001bb10:	4cc50513          	addi	a0,a0,1228 # 8002ffd8 <__func__.0+0x2e8>
bool amo_access_fault_1(){
    8001bb14:	ec06                	sd	ra,24(sp)
    8001bb16:	e822                	sd	s0,16(sp)
    8001bb18:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bb1a:	572110ef          	jal	8002d08c <printf>
    8001bb1e:	4529                	li	a0,10
    8001bb20:	25a100ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001bb24:	4511                	li	a0,4
    8001bb26:	be2e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bb2a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bb2e:	10000793          	li	a5,256
    8001bb32:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bb36:	20000793          	li	a5,512
    8001bb3a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bb3e:	40000793          	li	a5,1024
    8001bb42:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bb46:	6785                	lui	a5,0x1
    8001bb48:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bb4c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bb50:	4785                	li	a5,1
    8001bb52:	07fe                	slli	a5,a5,0x1f
    8001bb54:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bb58:	08100793          	li	a5,129
    8001bb5c:	07e2                	slli	a5,a5,0x18
    8001bb5e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bb62:	67a1                	lui	a5,0x8
    8001bb64:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001bb68:	aa4e50ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8001bb6c:	37ab77b7          	lui	a5,0x37ab7
    8001bb70:	4705                	li	a4,1
    8001bb72:	078a                	slli	a5,a5,0x2
    8001bb74:	1706                	slli	a4,a4,0x21
    8001bb76:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bb7a:	40070713          	addi	a4,a4,1024
    8001bb7e:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001bb82:	0003c597          	auipc	a1,0x3c
    8001bb86:	48f5c583          	lbu	a1,1167(a1) # 80058011 <excpt+0x1>
    8001bb8a:	00015517          	auipc	a0,0x15
    8001bb8e:	fc650513          	addi	a0,a0,-58 # 80030b50 <__func__.0+0xe60>
    8001bb92:	0003c417          	auipc	s0,0x3c
    8001bb96:	47e40413          	addi	s0,s0,1150 # 80058010 <excpt>
    8001bb9a:	4f2110ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.cause);
    8001bb9e:	640c                	ld	a1,8(s0)
    8001bba0:	00015517          	auipc	a0,0x15
    8001bba4:	fb050513          	addi	a0,a0,-80 # 80030b50 <__func__.0+0xe60>
    8001bba8:	4e4110ef          	jal	8002d08c <printf>

    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bbac:	08200593          	li	a1,130
    8001bbb0:	0001b617          	auipc	a2,0x1b
    8001bbb4:	ea860613          	addi	a2,a2,-344 # 80036a58 <__func__.0+0x6d68>
    8001bbb8:	00014517          	auipc	a0,0x14
    8001bbbc:	43850513          	addi	a0,a0,1080 # 8002fff0 <__func__.0+0x300>
    8001bbc0:	4cc110ef          	jal	8002d08c <printf>
    8001bbc4:	0003c797          	auipc	a5,0x3c
    8001bbc8:	44d7c783          	lbu	a5,1101(a5) # 80058011 <excpt+0x1>
    8001bbcc:	00014597          	auipc	a1,0x14
    8001bbd0:	3fc58593          	addi	a1,a1,1020 # 8002ffc8 <__func__.0+0x2d8>
    8001bbd4:	cf89                	beqz	a5,8001bbee <amo_access_fault_1+0xec>
    8001bbd6:	6418                	ld	a4,8(s0)
    8001bbd8:	479d                	li	a5,7
    8001bbda:	00014597          	auipc	a1,0x14
    8001bbde:	3de58593          	addi	a1,a1,990 # 8002ffb8 <__func__.0+0x2c8>
    8001bbe2:	00f70663          	beq	a4,a5,8001bbee <amo_access_fault_1+0xec>
    8001bbe6:	00014597          	auipc	a1,0x14
    8001bbea:	3e258593          	addi	a1,a1,994 # 8002ffc8 <__func__.0+0x2d8>
    8001bbee:	00014517          	auipc	a0,0x14
    8001bbf2:	41a50513          	addi	a0,a0,1050 # 80030008 <__func__.0+0x318>
    8001bbf6:	496110ef          	jal	8002d08c <printf>
    8001bbfa:	0003c797          	auipc	a5,0x3c
    8001bbfe:	4177c783          	lbu	a5,1047(a5) # 80058011 <excpt+0x1>
    8001bc02:	c789                	beqz	a5,8001bc0c <amo_access_fault_1+0x10a>
    8001bc04:	6418                	ld	a4,8(s0)
    8001bc06:	479d                	li	a5,7
    8001bc08:	00f70c63          	beq	a4,a5,8001bc20 <amo_access_fault_1+0x11e>
    8001bc0c:	00014517          	auipc	a0,0x14
    8001bc10:	40450513          	addi	a0,a0,1028 # 80030010 <__func__.0+0x320>
    8001bc14:	478110ef          	jal	8002d08c <printf>
    8001bc18:	02900513          	li	a0,41
    8001bc1c:	15e100ef          	jal	8002bd7a <putchar>
    8001bc20:	4529                	li	a0,10
    8001bc22:	158100ef          	jal	8002bd7a <putchar>
    8001bc26:	0003c497          	auipc	s1,0x3c
    8001bc2a:	3eb4c483          	lbu	s1,1003(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bc2e:	00014597          	auipc	a1,0x14
    8001bc32:	39a58593          	addi	a1,a1,922 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bc36:	cc91                	beqz	s1,8001bc52 <amo_access_fault_1+0x150>
    8001bc38:	6418                	ld	a4,8(s0)
    8001bc3a:	479d                	li	a5,7
    TEST_END();
    8001bc3c:	00014597          	auipc	a1,0x14
    8001bc40:	37c58593          	addi	a1,a1,892 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bc44:	00f70763          	beq	a4,a5,8001bc52 <amo_access_fault_1+0x150>
    8001bc48:	4481                	li	s1,0
    TEST_END();
    8001bc4a:	00014597          	auipc	a1,0x14
    8001bc4e:	37e58593          	addi	a1,a1,894 # 8002ffc8 <__func__.0+0x2d8>
    8001bc52:	00014517          	auipc	a0,0x14
    8001bc56:	41e50513          	addi	a0,a0,1054 # 80030070 <__func__.0+0x380>
    8001bc5a:	432110ef          	jal	8002d08c <printf>
    8001bc5e:	4511                	li	a0,4
    8001bc60:	aa8e50ef          	jal	80000f08 <goto_priv>
    8001bc64:	c6fe50ef          	jal	800018d2 <reset_state>
}
    8001bc68:	60e2                	ld	ra,24(sp)
    8001bc6a:	6442                	ld	s0,16(sp)
    8001bc6c:	8526                	mv	a0,s1
    8001bc6e:	64a2                	ld	s1,8(sp)
    8001bc70:	6105                	addi	sp,sp,32
    8001bc72:	8082                	ret

000000008001bc74 <amo_access_fault_2>:

bool amo_access_fault_2(){
    8001bc74:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bc76:	00013597          	auipc	a1,0x13
    8001bc7a:	36a58593          	addi	a1,a1,874 # 8002efe0 <__func__.18>
    8001bc7e:	00014517          	auipc	a0,0x14
    8001bc82:	35a50513          	addi	a0,a0,858 # 8002ffd8 <__func__.0+0x2e8>
bool amo_access_fault_2(){
    8001bc86:	ec06                	sd	ra,24(sp)
    8001bc88:	e822                	sd	s0,16(sp)
    8001bc8a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bc8c:	400110ef          	jal	8002d08c <printf>
    8001bc90:	4529                	li	a0,10
    8001bc92:	0e8100ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001bc96:	4511                	li	a0,4
    8001bc98:	a70e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bc9c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bca0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bca4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bca8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bcac:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bcb0:	10000793          	li	a5,256
    8001bcb4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bcb8:	20000793          	li	a5,512
    8001bcbc:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bcc0:	40000793          	li	a5,1024
    8001bcc4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bcc8:	6785                	lui	a5,0x1
    8001bcca:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bcce:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bcd2:	4785                	li	a5,1
    8001bcd4:	07fe                	slli	a5,a5,0x1f
    8001bcd6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bcda:	08100793          	li	a5,129
    8001bcde:	07e2                	slli	a5,a5,0x18
    8001bce0:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bce4:	08000793          	li	a5,128
    8001bce8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bcec:	67a1                	lui	a5,0x8
    8001bcee:	3a07a073          	csrs	pmpcfg0,a5


    goto_priv(PRIV_HS);
    8001bcf2:	450d                	li	a0,3
    8001bcf4:	a14e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bcf8:	914e50ef          	jal	80000e0c <test_setup_except_function>
    8001bcfc:	37ab77b7          	lui	a5,0x37ab7
    8001bd00:	4705                	li	a4,1
    8001bd02:	078a                	slli	a5,a5,0x2
    8001bd04:	1706                	slli	a4,a4,0x21
    8001bd06:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bd0a:	40070713          	addi	a4,a4,1024
    8001bd0e:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bd12:	08200593          	li	a1,130
    8001bd16:	0001b617          	auipc	a2,0x1b
    8001bd1a:	d8260613          	addi	a2,a2,-638 # 80036a98 <__func__.0+0x6da8>
    8001bd1e:	00014517          	auipc	a0,0x14
    8001bd22:	2d250513          	addi	a0,a0,722 # 8002fff0 <__func__.0+0x300>
    8001bd26:	366110ef          	jal	8002d08c <printf>
    8001bd2a:	0003c797          	auipc	a5,0x3c
    8001bd2e:	2e77c783          	lbu	a5,743(a5) # 80058011 <excpt+0x1>
    8001bd32:	0003c497          	auipc	s1,0x3c
    8001bd36:	2de48493          	addi	s1,s1,734 # 80058010 <excpt>
    8001bd3a:	00014597          	auipc	a1,0x14
    8001bd3e:	28e58593          	addi	a1,a1,654 # 8002ffc8 <__func__.0+0x2d8>
    8001bd42:	cf89                	beqz	a5,8001bd5c <amo_access_fault_2+0xe8>
    8001bd44:	6498                	ld	a4,8(s1)
    8001bd46:	479d                	li	a5,7
    8001bd48:	00014597          	auipc	a1,0x14
    8001bd4c:	27058593          	addi	a1,a1,624 # 8002ffb8 <__func__.0+0x2c8>
    8001bd50:	00f70663          	beq	a4,a5,8001bd5c <amo_access_fault_2+0xe8>
    8001bd54:	00014597          	auipc	a1,0x14
    8001bd58:	27458593          	addi	a1,a1,628 # 8002ffc8 <__func__.0+0x2d8>
    8001bd5c:	00014517          	auipc	a0,0x14
    8001bd60:	2ac50513          	addi	a0,a0,684 # 80030008 <__func__.0+0x318>
    8001bd64:	328110ef          	jal	8002d08c <printf>
    8001bd68:	0003c797          	auipc	a5,0x3c
    8001bd6c:	2a97c783          	lbu	a5,681(a5) # 80058011 <excpt+0x1>
    8001bd70:	c789                	beqz	a5,8001bd7a <amo_access_fault_2+0x106>
    8001bd72:	6498                	ld	a4,8(s1)
    8001bd74:	479d                	li	a5,7
    8001bd76:	00f70c63          	beq	a4,a5,8001bd8e <amo_access_fault_2+0x11a>
    8001bd7a:	00014517          	auipc	a0,0x14
    8001bd7e:	29650513          	addi	a0,a0,662 # 80030010 <__func__.0+0x320>
    8001bd82:	30a110ef          	jal	8002d08c <printf>
    8001bd86:	02900513          	li	a0,41
    8001bd8a:	7f10f0ef          	jal	8002bd7a <putchar>
    8001bd8e:	4529                	li	a0,10
    8001bd90:	7eb0f0ef          	jal	8002bd7a <putchar>
    8001bd94:	0003c417          	auipc	s0,0x3c
    8001bd98:	27d44403          	lbu	s0,637(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bd9c:	00014597          	auipc	a1,0x14
    8001bda0:	22c58593          	addi	a1,a1,556 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bda4:	cc11                	beqz	s0,8001bdc0 <amo_access_fault_2+0x14c>
    8001bda6:	6498                	ld	a4,8(s1)
    8001bda8:	479d                	li	a5,7
    TEST_END();
    8001bdaa:	00014597          	auipc	a1,0x14
    8001bdae:	20e58593          	addi	a1,a1,526 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bdb2:	00f70763          	beq	a4,a5,8001bdc0 <amo_access_fault_2+0x14c>
    8001bdb6:	4401                	li	s0,0
    TEST_END();
    8001bdb8:	00014597          	auipc	a1,0x14
    8001bdbc:	21058593          	addi	a1,a1,528 # 8002ffc8 <__func__.0+0x2d8>
    8001bdc0:	00014517          	auipc	a0,0x14
    8001bdc4:	2b050513          	addi	a0,a0,688 # 80030070 <__func__.0+0x380>
    8001bdc8:	2c4110ef          	jal	8002d08c <printf>
    8001bdcc:	4511                	li	a0,4
    8001bdce:	93ae50ef          	jal	80000f08 <goto_priv>
    8001bdd2:	b01e50ef          	jal	800018d2 <reset_state>
}
    8001bdd6:	60e2                	ld	ra,24(sp)
    8001bdd8:	8522                	mv	a0,s0
    8001bdda:	6442                	ld	s0,16(sp)
    8001bddc:	64a2                	ld	s1,8(sp)
    8001bdde:	6105                	addi	sp,sp,32
    8001bde0:	8082                	ret

000000008001bde2 <amo_access_fault_3>:


bool amo_access_fault_3(){
    8001bde2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bde4:	00013597          	auipc	a1,0x13
    8001bde8:	21458593          	addi	a1,a1,532 # 8002eff8 <__func__.17>
    8001bdec:	00014517          	auipc	a0,0x14
    8001bdf0:	1ec50513          	addi	a0,a0,492 # 8002ffd8 <__func__.0+0x2e8>
bool amo_access_fault_3(){
    8001bdf4:	ec06                	sd	ra,24(sp)
    8001bdf6:	e822                	sd	s0,16(sp)
    8001bdf8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bdfa:	292110ef          	jal	8002d08c <printf>
    8001bdfe:	4529                	li	a0,10
    8001be00:	77b0f0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001be04:	4511                	li	a0,4
    8001be06:	902e50ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001be0a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001be0e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001be12:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001be16:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001be1a:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001be1e:	10000793          	li	a5,256
    8001be22:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001be26:	20000793          	li	a5,512
    8001be2a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001be2e:	40000793          	li	a5,1024
    8001be32:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001be36:	6785                	lui	a5,0x1
    8001be38:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001be3c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001be40:	4785                	li	a5,1
    8001be42:	07fe                	slli	a5,a5,0x1f
    8001be44:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001be48:	08100793          	li	a5,129
    8001be4c:	07e2                	slli	a5,a5,0x18
    8001be4e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001be52:	08000793          	li	a5,128
    8001be56:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001be5a:	67a1                	lui	a5,0x8
    8001be5c:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001be60:	4505                	li	a0,1
    8001be62:	8a6e50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001be66:	fa7e40ef          	jal	80000e0c <test_setup_except_function>
    8001be6a:	37ab77b7          	lui	a5,0x37ab7
    8001be6e:	4705                	li	a4,1
    8001be70:	078a                	slli	a5,a5,0x2
    8001be72:	1706                	slli	a4,a4,0x21
    8001be74:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001be78:	40070713          	addi	a4,a4,1024
    8001be7c:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001be80:	08200593          	li	a1,130
    8001be84:	0001b617          	auipc	a2,0x1b
    8001be88:	c5460613          	addi	a2,a2,-940 # 80036ad8 <__func__.0+0x6de8>
    8001be8c:	00014517          	auipc	a0,0x14
    8001be90:	16450513          	addi	a0,a0,356 # 8002fff0 <__func__.0+0x300>
    8001be94:	1f8110ef          	jal	8002d08c <printf>
    8001be98:	0003c797          	auipc	a5,0x3c
    8001be9c:	1797c783          	lbu	a5,377(a5) # 80058011 <excpt+0x1>
    8001bea0:	0003c497          	auipc	s1,0x3c
    8001bea4:	17048493          	addi	s1,s1,368 # 80058010 <excpt>
    8001bea8:	00014597          	auipc	a1,0x14
    8001beac:	12058593          	addi	a1,a1,288 # 8002ffc8 <__func__.0+0x2d8>
    8001beb0:	cf89                	beqz	a5,8001beca <amo_access_fault_3+0xe8>
    8001beb2:	6498                	ld	a4,8(s1)
    8001beb4:	479d                	li	a5,7
    8001beb6:	00014597          	auipc	a1,0x14
    8001beba:	10258593          	addi	a1,a1,258 # 8002ffb8 <__func__.0+0x2c8>
    8001bebe:	00f70663          	beq	a4,a5,8001beca <amo_access_fault_3+0xe8>
    8001bec2:	00014597          	auipc	a1,0x14
    8001bec6:	10658593          	addi	a1,a1,262 # 8002ffc8 <__func__.0+0x2d8>
    8001beca:	00014517          	auipc	a0,0x14
    8001bece:	13e50513          	addi	a0,a0,318 # 80030008 <__func__.0+0x318>
    8001bed2:	1ba110ef          	jal	8002d08c <printf>
    8001bed6:	0003c797          	auipc	a5,0x3c
    8001beda:	13b7c783          	lbu	a5,315(a5) # 80058011 <excpt+0x1>
    8001bede:	c789                	beqz	a5,8001bee8 <amo_access_fault_3+0x106>
    8001bee0:	6498                	ld	a4,8(s1)
    8001bee2:	479d                	li	a5,7
    8001bee4:	00f70c63          	beq	a4,a5,8001befc <amo_access_fault_3+0x11a>
    8001bee8:	00014517          	auipc	a0,0x14
    8001beec:	12850513          	addi	a0,a0,296 # 80030010 <__func__.0+0x320>
    8001bef0:	19c110ef          	jal	8002d08c <printf>
    8001bef4:	02900513          	li	a0,41
    8001bef8:	6830f0ef          	jal	8002bd7a <putchar>
    8001befc:	4529                	li	a0,10
    8001befe:	67d0f0ef          	jal	8002bd7a <putchar>
    8001bf02:	0003c417          	auipc	s0,0x3c
    8001bf06:	10f44403          	lbu	s0,271(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bf0a:	00014597          	auipc	a1,0x14
    8001bf0e:	0be58593          	addi	a1,a1,190 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bf12:	cc11                	beqz	s0,8001bf2e <amo_access_fault_3+0x14c>
    8001bf14:	6498                	ld	a4,8(s1)
    8001bf16:	479d                	li	a5,7
    TEST_END();
    8001bf18:	00014597          	auipc	a1,0x14
    8001bf1c:	0a058593          	addi	a1,a1,160 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bf20:	00f70763          	beq	a4,a5,8001bf2e <amo_access_fault_3+0x14c>
    8001bf24:	4401                	li	s0,0
    TEST_END();
    8001bf26:	00014597          	auipc	a1,0x14
    8001bf2a:	0a258593          	addi	a1,a1,162 # 8002ffc8 <__func__.0+0x2d8>
    8001bf2e:	00014517          	auipc	a0,0x14
    8001bf32:	14250513          	addi	a0,a0,322 # 80030070 <__func__.0+0x380>
    8001bf36:	156110ef          	jal	8002d08c <printf>
    8001bf3a:	4511                	li	a0,4
    8001bf3c:	fcde40ef          	jal	80000f08 <goto_priv>
    8001bf40:	993e50ef          	jal	800018d2 <reset_state>
}
    8001bf44:	60e2                	ld	ra,24(sp)
    8001bf46:	8522                	mv	a0,s0
    8001bf48:	6442                	ld	s0,16(sp)
    8001bf4a:	64a2                	ld	s1,8(sp)
    8001bf4c:	6105                	addi	sp,sp,32
    8001bf4e:	8082                	ret

000000008001bf50 <amo_access_fault_4>:

bool amo_access_fault_4(){
    8001bf50:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bf52:	00013597          	auipc	a1,0x13
    8001bf56:	0be58593          	addi	a1,a1,190 # 8002f010 <__func__.16>
    8001bf5a:	00014517          	auipc	a0,0x14
    8001bf5e:	07e50513          	addi	a0,a0,126 # 8002ffd8 <__func__.0+0x2e8>
bool amo_access_fault_4(){
    8001bf62:	ec06                	sd	ra,24(sp)
    8001bf64:	e822                	sd	s0,16(sp)
    8001bf66:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bf68:	124110ef          	jal	8002d08c <printf>
    8001bf6c:	4529                	li	a0,10
    8001bf6e:	60d0f0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001bf72:	4511                	li	a0,4
    8001bf74:	f95e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bf78:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bf7c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bf80:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bf84:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bf88:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bf8c:	10000793          	li	a5,256
    8001bf90:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bf94:	20000793          	li	a5,512
    8001bf98:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bf9c:	40000793          	li	a5,1024
    8001bfa0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bfa4:	6785                	lui	a5,0x1
    8001bfa6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bfaa:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bfae:	4785                	li	a5,1
    8001bfb0:	07fe                	slli	a5,a5,0x1f
    8001bfb2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bfb6:	08100793          	li	a5,129
    8001bfba:	07e2                	slli	a5,a5,0x18
    8001bfbc:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bfc0:	08000793          	li	a5,128
    8001bfc4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bfc8:	67a1                	lui	a5,0x8
    8001bfca:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001bfce:	4501                	li	a0,0
    8001bfd0:	f39e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bfd4:	e39e40ef          	jal	80000e0c <test_setup_except_function>
    8001bfd8:	37ab77b7          	lui	a5,0x37ab7
    8001bfdc:	4705                	li	a4,1
    8001bfde:	078a                	slli	a5,a5,0x2
    8001bfe0:	1706                	slli	a4,a4,0x21
    8001bfe2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bfe6:	40070713          	addi	a4,a4,1024
    8001bfea:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bfee:	08200593          	li	a1,130
    8001bff2:	0001b617          	auipc	a2,0x1b
    8001bff6:	b2660613          	addi	a2,a2,-1242 # 80036b18 <__func__.0+0x6e28>
    8001bffa:	00014517          	auipc	a0,0x14
    8001bffe:	ff650513          	addi	a0,a0,-10 # 8002fff0 <__func__.0+0x300>
    8001c002:	08a110ef          	jal	8002d08c <printf>
    8001c006:	0003c797          	auipc	a5,0x3c
    8001c00a:	00b7c783          	lbu	a5,11(a5) # 80058011 <excpt+0x1>
    8001c00e:	0003c497          	auipc	s1,0x3c
    8001c012:	00248493          	addi	s1,s1,2 # 80058010 <excpt>
    8001c016:	00014597          	auipc	a1,0x14
    8001c01a:	fb258593          	addi	a1,a1,-78 # 8002ffc8 <__func__.0+0x2d8>
    8001c01e:	cf89                	beqz	a5,8001c038 <amo_access_fault_4+0xe8>
    8001c020:	6498                	ld	a4,8(s1)
    8001c022:	479d                	li	a5,7
    8001c024:	00014597          	auipc	a1,0x14
    8001c028:	f9458593          	addi	a1,a1,-108 # 8002ffb8 <__func__.0+0x2c8>
    8001c02c:	00f70663          	beq	a4,a5,8001c038 <amo_access_fault_4+0xe8>
    8001c030:	00014597          	auipc	a1,0x14
    8001c034:	f9858593          	addi	a1,a1,-104 # 8002ffc8 <__func__.0+0x2d8>
    8001c038:	00014517          	auipc	a0,0x14
    8001c03c:	fd050513          	addi	a0,a0,-48 # 80030008 <__func__.0+0x318>
    8001c040:	04c110ef          	jal	8002d08c <printf>
    8001c044:	0003c797          	auipc	a5,0x3c
    8001c048:	fcd7c783          	lbu	a5,-51(a5) # 80058011 <excpt+0x1>
    8001c04c:	c789                	beqz	a5,8001c056 <amo_access_fault_4+0x106>
    8001c04e:	6498                	ld	a4,8(s1)
    8001c050:	479d                	li	a5,7
    8001c052:	00f70c63          	beq	a4,a5,8001c06a <amo_access_fault_4+0x11a>
    8001c056:	00014517          	auipc	a0,0x14
    8001c05a:	fba50513          	addi	a0,a0,-70 # 80030010 <__func__.0+0x320>
    8001c05e:	02e110ef          	jal	8002d08c <printf>
    8001c062:	02900513          	li	a0,41
    8001c066:	5150f0ef          	jal	8002bd7a <putchar>
    8001c06a:	4529                	li	a0,10
    8001c06c:	50f0f0ef          	jal	8002bd7a <putchar>
    8001c070:	0003c417          	auipc	s0,0x3c
    8001c074:	fa144403          	lbu	s0,-95(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c078:	00014597          	auipc	a1,0x14
    8001c07c:	f5058593          	addi	a1,a1,-176 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c080:	cc11                	beqz	s0,8001c09c <amo_access_fault_4+0x14c>
    8001c082:	6498                	ld	a4,8(s1)
    8001c084:	479d                	li	a5,7
    TEST_END();
    8001c086:	00014597          	auipc	a1,0x14
    8001c08a:	f3258593          	addi	a1,a1,-206 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c08e:	00f70763          	beq	a4,a5,8001c09c <amo_access_fault_4+0x14c>
    8001c092:	4401                	li	s0,0
    TEST_END();
    8001c094:	00014597          	auipc	a1,0x14
    8001c098:	f3458593          	addi	a1,a1,-204 # 8002ffc8 <__func__.0+0x2d8>
    8001c09c:	00014517          	auipc	a0,0x14
    8001c0a0:	fd450513          	addi	a0,a0,-44 # 80030070 <__func__.0+0x380>
    8001c0a4:	7e9100ef          	jal	8002d08c <printf>
    8001c0a8:	4511                	li	a0,4
    8001c0aa:	e5fe40ef          	jal	80000f08 <goto_priv>
    8001c0ae:	825e50ef          	jal	800018d2 <reset_state>
}
    8001c0b2:	60e2                	ld	ra,24(sp)
    8001c0b4:	8522                	mv	a0,s0
    8001c0b6:	6442                	ld	s0,16(sp)
    8001c0b8:	64a2                	ld	s1,8(sp)
    8001c0ba:	6105                	addi	sp,sp,32
    8001c0bc:	8082                	ret

000000008001c0be <amo_access_fault_5>:

bool amo_access_fault_5(){
    8001c0be:	1141                	addi	sp,sp,-16

    TEST_START();
    8001c0c0:	00013597          	auipc	a1,0x13
    8001c0c4:	f6858593          	addi	a1,a1,-152 # 8002f028 <__func__.15>
    8001c0c8:	00014517          	auipc	a0,0x14
    8001c0cc:	f1050513          	addi	a0,a0,-240 # 8002ffd8 <__func__.0+0x2e8>
bool amo_access_fault_5(){
    8001c0d0:	e406                	sd	ra,8(sp)
    8001c0d2:	e022                	sd	s0,0(sp)
    TEST_START();
    8001c0d4:	7b9100ef          	jal	8002d08c <printf>
    8001c0d8:	4529                	li	a0,10
    8001c0da:	4a10f0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001c0de:	4511                	li	a0,4
    8001c0e0:	e29e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c0e4:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c0e8:	10000793          	li	a5,256
    8001c0ec:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c0f0:	20000793          	li	a5,512
    8001c0f4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c0f8:	40000793          	li	a5,1024
    8001c0fc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c100:	6785                	lui	a5,0x1
    8001c102:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c106:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c10a:	4785                	li	a5,1
    8001c10c:	07fe                	slli	a5,a5,0x1f
    8001c10e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c112:	08100793          	li	a5,129
    8001c116:	07e2                	slli	a5,a5,0x18
    8001c118:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c11c:	67a1                	lui	a5,0x8
    8001c11e:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001c122:	cebe40ef          	jal	80000e0c <test_setup_except_function>
    8001c126:	37ab77b7          	lui	a5,0x37ab7
    8001c12a:	4705                	li	a4,1
    8001c12c:	078a                	slli	a5,a5,0x2
    8001c12e:	1706                	slli	a4,a4,0x21
    8001c130:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c134:	40070713          	addi	a4,a4,1024
    8001c138:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001c13c:	0003c597          	auipc	a1,0x3c
    8001c140:	ed55c583          	lbu	a1,-299(a1) # 80058011 <excpt+0x1>
    8001c144:	00015517          	auipc	a0,0x15
    8001c148:	a0c50513          	addi	a0,a0,-1524 # 80030b50 <__func__.0+0xe60>
    8001c14c:	741100ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.cause);
    8001c150:	0003c597          	auipc	a1,0x3c
    8001c154:	ec85b583          	ld	a1,-312(a1) # 80058018 <excpt+0x8>
    8001c158:	00015517          	auipc	a0,0x15
    8001c15c:	9f850513          	addi	a0,a0,-1544 # 80030b50 <__func__.0+0xe60>
    8001c160:	72d100ef          	jal	8002d08c <printf>

    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c164:	08200593          	li	a1,130
    8001c168:	0001b617          	auipc	a2,0x1b
    8001c16c:	9f060613          	addi	a2,a2,-1552 # 80036b58 <__func__.0+0x6e68>
    8001c170:	00014517          	auipc	a0,0x14
    8001c174:	e8050513          	addi	a0,a0,-384 # 8002fff0 <__func__.0+0x300>
    8001c178:	715100ef          	jal	8002d08c <printf>
    8001c17c:	0003c797          	auipc	a5,0x3c
    8001c180:	e957c783          	lbu	a5,-363(a5) # 80058011 <excpt+0x1>
    8001c184:	00014597          	auipc	a1,0x14
    8001c188:	e3458593          	addi	a1,a1,-460 # 8002ffb8 <__func__.0+0x2c8>
    8001c18c:	c789                	beqz	a5,8001c196 <amo_access_fault_5+0xd8>
    8001c18e:	00014597          	auipc	a1,0x14
    8001c192:	e3a58593          	addi	a1,a1,-454 # 8002ffc8 <__func__.0+0x2d8>
    8001c196:	00014517          	auipc	a0,0x14
    8001c19a:	e7250513          	addi	a0,a0,-398 # 80030008 <__func__.0+0x318>
    8001c19e:	6ef100ef          	jal	8002d08c <printf>
    8001c1a2:	0003c797          	auipc	a5,0x3c
    8001c1a6:	e6f7c783          	lbu	a5,-401(a5) # 80058011 <excpt+0x1>
    8001c1aa:	e7a1                	bnez	a5,8001c1f2 <amo_access_fault_5+0x134>
    8001c1ac:	4529                	li	a0,10
    8001c1ae:	3cd0f0ef          	jal	8002bd7a <putchar>
    8001c1b2:	0003c797          	auipc	a5,0x3c
    8001c1b6:	e5f7c783          	lbu	a5,-417(a5) # 80058011 <excpt+0x1>
    8001c1ba:	e795                	bnez	a5,8001c1e6 <amo_access_fault_5+0x128>
    8001c1bc:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001c1be:	00014597          	auipc	a1,0x14
    8001c1c2:	dfa58593          	addi	a1,a1,-518 # 8002ffb8 <__func__.0+0x2c8>
    8001c1c6:	00014517          	auipc	a0,0x14
    8001c1ca:	eaa50513          	addi	a0,a0,-342 # 80030070 <__func__.0+0x380>
    8001c1ce:	6bf100ef          	jal	8002d08c <printf>
    8001c1d2:	4511                	li	a0,4
    8001c1d4:	d35e40ef          	jal	80000f08 <goto_priv>
    8001c1d8:	efae50ef          	jal	800018d2 <reset_state>
}
    8001c1dc:	60a2                	ld	ra,8(sp)
    8001c1de:	8522                	mv	a0,s0
    8001c1e0:	6402                	ld	s0,0(sp)
    8001c1e2:	0141                	addi	sp,sp,16
    8001c1e4:	8082                	ret
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c1e6:	4401                	li	s0,0
    TEST_END();
    8001c1e8:	00014597          	auipc	a1,0x14
    8001c1ec:	de058593          	addi	a1,a1,-544 # 8002ffc8 <__func__.0+0x2d8>
    8001c1f0:	bfd9                	j	8001c1c6 <amo_access_fault_5+0x108>
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c1f2:	00014517          	auipc	a0,0x14
    8001c1f6:	e1e50513          	addi	a0,a0,-482 # 80030010 <__func__.0+0x320>
    8001c1fa:	693100ef          	jal	8002d08c <printf>
    8001c1fe:	02900513          	li	a0,41
    8001c202:	3790f0ef          	jal	8002bd7a <putchar>
    8001c206:	b75d                	j	8001c1ac <amo_access_fault_5+0xee>

000000008001c208 <amo_access_fault_6>:


bool amo_access_fault_6(){
    8001c208:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c20a:	00013597          	auipc	a1,0x13
    8001c20e:	e3658593          	addi	a1,a1,-458 # 8002f040 <__func__.14>
    8001c212:	00014517          	auipc	a0,0x14
    8001c216:	dc650513          	addi	a0,a0,-570 # 8002ffd8 <__func__.0+0x2e8>
bool amo_access_fault_6(){
    8001c21a:	ec06                	sd	ra,24(sp)
    8001c21c:	e822                	sd	s0,16(sp)
    8001c21e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c220:	66d100ef          	jal	8002d08c <printf>
    8001c224:	4529                	li	a0,10
    8001c226:	3550f0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001c22a:	4511                	li	a0,4
    8001c22c:	cdde40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c230:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c234:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c238:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c23c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c240:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c244:	10000793          	li	a5,256
    8001c248:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c24c:	20000793          	li	a5,512
    8001c250:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c254:	40000793          	li	a5,1024
    8001c258:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c25c:	6785                	lui	a5,0x1
    8001c25e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c262:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c266:	4785                	li	a5,1
    8001c268:	07fe                	slli	a5,a5,0x1f
    8001c26a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c26e:	08100793          	li	a5,129
    8001c272:	07e2                	slli	a5,a5,0x18
    8001c274:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c278:	08000793          	li	a5,128
    8001c27c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c280:	67a1                	lui	a5,0x8
    8001c282:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c286:	450d                	li	a0,3
    8001c288:	c81e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c28c:	b81e40ef          	jal	80000e0c <test_setup_except_function>
    8001c290:	37ab77b7          	lui	a5,0x37ab7
    8001c294:	4705                	li	a4,1
    8001c296:	078a                	slli	a5,a5,0x2
    8001c298:	1706                	slli	a4,a4,0x21
    8001c29a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c29e:	40070713          	addi	a4,a4,1024
    8001c2a2:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c2a6:	08200593          	li	a1,130
    8001c2aa:	0001b617          	auipc	a2,0x1b
    8001c2ae:	8ee60613          	addi	a2,a2,-1810 # 80036b98 <__func__.0+0x6ea8>
    8001c2b2:	00014517          	auipc	a0,0x14
    8001c2b6:	d3e50513          	addi	a0,a0,-706 # 8002fff0 <__func__.0+0x300>
    8001c2ba:	5d3100ef          	jal	8002d08c <printf>
    8001c2be:	0003c797          	auipc	a5,0x3c
    8001c2c2:	d537c783          	lbu	a5,-685(a5) # 80058011 <excpt+0x1>
    8001c2c6:	0003c497          	auipc	s1,0x3c
    8001c2ca:	d4a48493          	addi	s1,s1,-694 # 80058010 <excpt>
    8001c2ce:	00014597          	auipc	a1,0x14
    8001c2d2:	cfa58593          	addi	a1,a1,-774 # 8002ffc8 <__func__.0+0x2d8>
    8001c2d6:	cf89                	beqz	a5,8001c2f0 <amo_access_fault_6+0xe8>
    8001c2d8:	6498                	ld	a4,8(s1)
    8001c2da:	479d                	li	a5,7
    8001c2dc:	00014597          	auipc	a1,0x14
    8001c2e0:	cdc58593          	addi	a1,a1,-804 # 8002ffb8 <__func__.0+0x2c8>
    8001c2e4:	00f70663          	beq	a4,a5,8001c2f0 <amo_access_fault_6+0xe8>
    8001c2e8:	00014597          	auipc	a1,0x14
    8001c2ec:	ce058593          	addi	a1,a1,-800 # 8002ffc8 <__func__.0+0x2d8>
    8001c2f0:	00014517          	auipc	a0,0x14
    8001c2f4:	d1850513          	addi	a0,a0,-744 # 80030008 <__func__.0+0x318>
    8001c2f8:	595100ef          	jal	8002d08c <printf>
    8001c2fc:	0003c797          	auipc	a5,0x3c
    8001c300:	d157c783          	lbu	a5,-747(a5) # 80058011 <excpt+0x1>
    8001c304:	c789                	beqz	a5,8001c30e <amo_access_fault_6+0x106>
    8001c306:	6498                	ld	a4,8(s1)
    8001c308:	479d                	li	a5,7
    8001c30a:	00f70c63          	beq	a4,a5,8001c322 <amo_access_fault_6+0x11a>
    8001c30e:	00014517          	auipc	a0,0x14
    8001c312:	d0250513          	addi	a0,a0,-766 # 80030010 <__func__.0+0x320>
    8001c316:	577100ef          	jal	8002d08c <printf>
    8001c31a:	02900513          	li	a0,41
    8001c31e:	25d0f0ef          	jal	8002bd7a <putchar>
    8001c322:	4529                	li	a0,10
    8001c324:	2570f0ef          	jal	8002bd7a <putchar>
    8001c328:	0003c417          	auipc	s0,0x3c
    8001c32c:	ce944403          	lbu	s0,-791(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c330:	00014597          	auipc	a1,0x14
    8001c334:	c9858593          	addi	a1,a1,-872 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c338:	cc11                	beqz	s0,8001c354 <amo_access_fault_6+0x14c>
    8001c33a:	6498                	ld	a4,8(s1)
    8001c33c:	479d                	li	a5,7
    TEST_END();
    8001c33e:	00014597          	auipc	a1,0x14
    8001c342:	c7a58593          	addi	a1,a1,-902 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c346:	00f70763          	beq	a4,a5,8001c354 <amo_access_fault_6+0x14c>
    8001c34a:	4401                	li	s0,0
    TEST_END();
    8001c34c:	00014597          	auipc	a1,0x14
    8001c350:	c7c58593          	addi	a1,a1,-900 # 8002ffc8 <__func__.0+0x2d8>
    8001c354:	00014517          	auipc	a0,0x14
    8001c358:	d1c50513          	addi	a0,a0,-740 # 80030070 <__func__.0+0x380>
    8001c35c:	531100ef          	jal	8002d08c <printf>
    8001c360:	4511                	li	a0,4
    8001c362:	ba7e40ef          	jal	80000f08 <goto_priv>
    8001c366:	d6ce50ef          	jal	800018d2 <reset_state>
}
    8001c36a:	60e2                	ld	ra,24(sp)
    8001c36c:	8522                	mv	a0,s0
    8001c36e:	6442                	ld	s0,16(sp)
    8001c370:	64a2                	ld	s1,8(sp)
    8001c372:	6105                	addi	sp,sp,32
    8001c374:	8082                	ret

000000008001c376 <amo_access_fault_7>:


bool amo_access_fault_7(){
    8001c376:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c378:	00013597          	auipc	a1,0x13
    8001c37c:	ce058593          	addi	a1,a1,-800 # 8002f058 <__func__.13>
    8001c380:	00014517          	auipc	a0,0x14
    8001c384:	c5850513          	addi	a0,a0,-936 # 8002ffd8 <__func__.0+0x2e8>
bool amo_access_fault_7(){
    8001c388:	ec06                	sd	ra,24(sp)
    8001c38a:	e822                	sd	s0,16(sp)
    8001c38c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c38e:	4ff100ef          	jal	8002d08c <printf>
    8001c392:	4529                	li	a0,10
    8001c394:	1e70f0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001c398:	4511                	li	a0,4
    8001c39a:	b6fe40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c39e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c3a2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c3a6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c3aa:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c3ae:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c3b2:	10000793          	li	a5,256
    8001c3b6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c3ba:	20000793          	li	a5,512
    8001c3be:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c3c2:	40000793          	li	a5,1024
    8001c3c6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c3ca:	6785                	lui	a5,0x1
    8001c3cc:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c3d0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c3d4:	4785                	li	a5,1
    8001c3d6:	07fe                	slli	a5,a5,0x1f
    8001c3d8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c3dc:	08100793          	li	a5,129
    8001c3e0:	07e2                	slli	a5,a5,0x18
    8001c3e2:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c3e6:	08000793          	li	a5,128
    8001c3ea:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c3ee:	67a1                	lui	a5,0x8
    8001c3f0:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001c3f4:	4505                	li	a0,1
    8001c3f6:	b13e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c3fa:	a13e40ef          	jal	80000e0c <test_setup_except_function>
    8001c3fe:	37ab77b7          	lui	a5,0x37ab7
    8001c402:	4705                	li	a4,1
    8001c404:	078a                	slli	a5,a5,0x2
    8001c406:	1706                	slli	a4,a4,0x21
    8001c408:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c40c:	40070713          	addi	a4,a4,1024
    8001c410:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c414:	08200593          	li	a1,130
    8001c418:	0001a617          	auipc	a2,0x1a
    8001c41c:	7c060613          	addi	a2,a2,1984 # 80036bd8 <__func__.0+0x6ee8>
    8001c420:	00014517          	auipc	a0,0x14
    8001c424:	bd050513          	addi	a0,a0,-1072 # 8002fff0 <__func__.0+0x300>
    8001c428:	465100ef          	jal	8002d08c <printf>
    8001c42c:	0003c797          	auipc	a5,0x3c
    8001c430:	be57c783          	lbu	a5,-1051(a5) # 80058011 <excpt+0x1>
    8001c434:	0003c497          	auipc	s1,0x3c
    8001c438:	bdc48493          	addi	s1,s1,-1060 # 80058010 <excpt>
    8001c43c:	00014597          	auipc	a1,0x14
    8001c440:	b8c58593          	addi	a1,a1,-1140 # 8002ffc8 <__func__.0+0x2d8>
    8001c444:	cf89                	beqz	a5,8001c45e <amo_access_fault_7+0xe8>
    8001c446:	6498                	ld	a4,8(s1)
    8001c448:	479d                	li	a5,7
    8001c44a:	00014597          	auipc	a1,0x14
    8001c44e:	b6e58593          	addi	a1,a1,-1170 # 8002ffb8 <__func__.0+0x2c8>
    8001c452:	00f70663          	beq	a4,a5,8001c45e <amo_access_fault_7+0xe8>
    8001c456:	00014597          	auipc	a1,0x14
    8001c45a:	b7258593          	addi	a1,a1,-1166 # 8002ffc8 <__func__.0+0x2d8>
    8001c45e:	00014517          	auipc	a0,0x14
    8001c462:	baa50513          	addi	a0,a0,-1110 # 80030008 <__func__.0+0x318>
    8001c466:	427100ef          	jal	8002d08c <printf>
    8001c46a:	0003c797          	auipc	a5,0x3c
    8001c46e:	ba77c783          	lbu	a5,-1113(a5) # 80058011 <excpt+0x1>
    8001c472:	c789                	beqz	a5,8001c47c <amo_access_fault_7+0x106>
    8001c474:	6498                	ld	a4,8(s1)
    8001c476:	479d                	li	a5,7
    8001c478:	00f70c63          	beq	a4,a5,8001c490 <amo_access_fault_7+0x11a>
    8001c47c:	00014517          	auipc	a0,0x14
    8001c480:	b9450513          	addi	a0,a0,-1132 # 80030010 <__func__.0+0x320>
    8001c484:	409100ef          	jal	8002d08c <printf>
    8001c488:	02900513          	li	a0,41
    8001c48c:	0ef0f0ef          	jal	8002bd7a <putchar>
    8001c490:	4529                	li	a0,10
    8001c492:	0e90f0ef          	jal	8002bd7a <putchar>
    8001c496:	0003c417          	auipc	s0,0x3c
    8001c49a:	b7b44403          	lbu	s0,-1157(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c49e:	00014597          	auipc	a1,0x14
    8001c4a2:	b2a58593          	addi	a1,a1,-1238 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c4a6:	cc11                	beqz	s0,8001c4c2 <amo_access_fault_7+0x14c>
    8001c4a8:	6498                	ld	a4,8(s1)
    8001c4aa:	479d                	li	a5,7
    TEST_END();
    8001c4ac:	00014597          	auipc	a1,0x14
    8001c4b0:	b0c58593          	addi	a1,a1,-1268 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c4b4:	00f70763          	beq	a4,a5,8001c4c2 <amo_access_fault_7+0x14c>
    8001c4b8:	4401                	li	s0,0
    TEST_END();
    8001c4ba:	00014597          	auipc	a1,0x14
    8001c4be:	b0e58593          	addi	a1,a1,-1266 # 8002ffc8 <__func__.0+0x2d8>
    8001c4c2:	00014517          	auipc	a0,0x14
    8001c4c6:	bae50513          	addi	a0,a0,-1106 # 80030070 <__func__.0+0x380>
    8001c4ca:	3c3100ef          	jal	8002d08c <printf>
    8001c4ce:	4511                	li	a0,4
    8001c4d0:	a39e40ef          	jal	80000f08 <goto_priv>
    8001c4d4:	bfee50ef          	jal	800018d2 <reset_state>
}
    8001c4d8:	60e2                	ld	ra,24(sp)
    8001c4da:	8522                	mv	a0,s0
    8001c4dc:	6442                	ld	s0,16(sp)
    8001c4de:	64a2                	ld	s1,8(sp)
    8001c4e0:	6105                	addi	sp,sp,32
    8001c4e2:	8082                	ret

000000008001c4e4 <amo_access_fault_8>:

bool amo_access_fault_8(){
    8001c4e4:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c4e6:	00013597          	auipc	a1,0x13
    8001c4ea:	b8a58593          	addi	a1,a1,-1142 # 8002f070 <__func__.12>
    8001c4ee:	00014517          	auipc	a0,0x14
    8001c4f2:	aea50513          	addi	a0,a0,-1302 # 8002ffd8 <__func__.0+0x2e8>
bool amo_access_fault_8(){
    8001c4f6:	ec06                	sd	ra,24(sp)
    8001c4f8:	e822                	sd	s0,16(sp)
    8001c4fa:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c4fc:	391100ef          	jal	8002d08c <printf>
    8001c500:	4529                	li	a0,10
    8001c502:	0790f0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001c506:	4511                	li	a0,4
    8001c508:	a01e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c50c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c510:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c514:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c518:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c51c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c520:	10000793          	li	a5,256
    8001c524:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c528:	20000793          	li	a5,512
    8001c52c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c530:	40000793          	li	a5,1024
    8001c534:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c538:	6785                	lui	a5,0x1
    8001c53a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c53e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c542:	4785                	li	a5,1
    8001c544:	07fe                	slli	a5,a5,0x1f
    8001c546:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c54a:	08100793          	li	a5,129
    8001c54e:	07e2                	slli	a5,a5,0x18
    8001c550:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c554:	08000793          	li	a5,128
    8001c558:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c55c:	67a1                	lui	a5,0x8
    8001c55e:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c562:	4501                	li	a0,0
    8001c564:	9a5e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c568:	8a5e40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8001c56c:	37ab77b7          	lui	a5,0x37ab7
    8001c570:	4705                	li	a4,1
    8001c572:	078a                	slli	a5,a5,0x2
    8001c574:	1706                	slli	a4,a4,0x21
    8001c576:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c57a:	40070713          	addi	a4,a4,1024
    8001c57e:	40f737af          	amoor.d	a5,a5,(a4)
    
    amoor_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c582:	08200593          	li	a1,130
    8001c586:	0001a617          	auipc	a2,0x1a
    8001c58a:	69260613          	addi	a2,a2,1682 # 80036c18 <__func__.0+0x6f28>
    8001c58e:	00014517          	auipc	a0,0x14
    8001c592:	a6250513          	addi	a0,a0,-1438 # 8002fff0 <__func__.0+0x300>
    8001c596:	2f7100ef          	jal	8002d08c <printf>
    8001c59a:	0003c797          	auipc	a5,0x3c
    8001c59e:	a777c783          	lbu	a5,-1417(a5) # 80058011 <excpt+0x1>
    8001c5a2:	0003c497          	auipc	s1,0x3c
    8001c5a6:	a6e48493          	addi	s1,s1,-1426 # 80058010 <excpt>
    8001c5aa:	00014597          	auipc	a1,0x14
    8001c5ae:	a1e58593          	addi	a1,a1,-1506 # 8002ffc8 <__func__.0+0x2d8>
    8001c5b2:	cf89                	beqz	a5,8001c5cc <amo_access_fault_8+0xe8>
    8001c5b4:	6498                	ld	a4,8(s1)
    8001c5b6:	479d                	li	a5,7
    8001c5b8:	00014597          	auipc	a1,0x14
    8001c5bc:	a0058593          	addi	a1,a1,-1536 # 8002ffb8 <__func__.0+0x2c8>
    8001c5c0:	00f70663          	beq	a4,a5,8001c5cc <amo_access_fault_8+0xe8>
    8001c5c4:	00014597          	auipc	a1,0x14
    8001c5c8:	a0458593          	addi	a1,a1,-1532 # 8002ffc8 <__func__.0+0x2d8>
    8001c5cc:	00014517          	auipc	a0,0x14
    8001c5d0:	a3c50513          	addi	a0,a0,-1476 # 80030008 <__func__.0+0x318>
    8001c5d4:	2b9100ef          	jal	8002d08c <printf>
    8001c5d8:	0003c797          	auipc	a5,0x3c
    8001c5dc:	a397c783          	lbu	a5,-1479(a5) # 80058011 <excpt+0x1>
    8001c5e0:	c789                	beqz	a5,8001c5ea <amo_access_fault_8+0x106>
    8001c5e2:	6498                	ld	a4,8(s1)
    8001c5e4:	479d                	li	a5,7
    8001c5e6:	00f70c63          	beq	a4,a5,8001c5fe <amo_access_fault_8+0x11a>
    8001c5ea:	00014517          	auipc	a0,0x14
    8001c5ee:	a2650513          	addi	a0,a0,-1498 # 80030010 <__func__.0+0x320>
    8001c5f2:	29b100ef          	jal	8002d08c <printf>
    8001c5f6:	02900513          	li	a0,41
    8001c5fa:	7800f0ef          	jal	8002bd7a <putchar>
    8001c5fe:	4529                	li	a0,10
    8001c600:	77a0f0ef          	jal	8002bd7a <putchar>
    8001c604:	0003c417          	auipc	s0,0x3c
    8001c608:	a0d44403          	lbu	s0,-1523(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c60c:	00014597          	auipc	a1,0x14
    8001c610:	9bc58593          	addi	a1,a1,-1604 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c614:	cc11                	beqz	s0,8001c630 <amo_access_fault_8+0x14c>
    8001c616:	6498                	ld	a4,8(s1)
    8001c618:	479d                	li	a5,7
    TEST_END();
    8001c61a:	00014597          	auipc	a1,0x14
    8001c61e:	99e58593          	addi	a1,a1,-1634 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c622:	00f70763          	beq	a4,a5,8001c630 <amo_access_fault_8+0x14c>
    8001c626:	4401                	li	s0,0
    TEST_END();
    8001c628:	00014597          	auipc	a1,0x14
    8001c62c:	9a058593          	addi	a1,a1,-1632 # 8002ffc8 <__func__.0+0x2d8>
    8001c630:	00014517          	auipc	a0,0x14
    8001c634:	a4050513          	addi	a0,a0,-1472 # 80030070 <__func__.0+0x380>
    8001c638:	255100ef          	jal	8002d08c <printf>
    8001c63c:	4511                	li	a0,4
    8001c63e:	8cbe40ef          	jal	80000f08 <goto_priv>
    8001c642:	a90e50ef          	jal	800018d2 <reset_state>
}
    8001c646:	60e2                	ld	ra,24(sp)
    8001c648:	8522                	mv	a0,s0
    8001c64a:	6442                	ld	s0,16(sp)
    8001c64c:	64a2                	ld	s1,8(sp)
    8001c64e:	6105                	addi	sp,sp,32
    8001c650:	8082                	ret

000000008001c652 <amo_access_fault_9>:

bool amo_access_fault_9(){
    8001c652:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c654:	00013597          	auipc	a1,0x13
    8001c658:	a3458593          	addi	a1,a1,-1484 # 8002f088 <__func__.11>
    8001c65c:	00014517          	auipc	a0,0x14
    8001c660:	97c50513          	addi	a0,a0,-1668 # 8002ffd8 <__func__.0+0x2e8>
bool amo_access_fault_9(){
    8001c664:	ec06                	sd	ra,24(sp)
    8001c666:	e822                	sd	s0,16(sp)
    8001c668:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c66a:	223100ef          	jal	8002d08c <printf>
    8001c66e:	4529                	li	a0,10
    8001c670:	70a0f0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001c674:	4511                	li	a0,4
    8001c676:	893e40ef          	jal	80000f08 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c67a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c67e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c682:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c686:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c68a:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c68e:	10000793          	li	a5,256
    8001c692:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c696:	20000793          	li	a5,512
    8001c69a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c69e:	40000793          	li	a5,1024
    8001c6a2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c6a6:	6785                	lui	a5,0x1
    8001c6a8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c6ac:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c6b0:	4785                	li	a5,1
    8001c6b2:	07fe                	slli	a5,a5,0x1f
    8001c6b4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c6b8:	08100793          	li	a5,129
    8001c6bc:	07e2                	slli	a5,a5,0x18
    8001c6be:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c6c2:	08000793          	li	a5,128
    8001c6c6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c6ca:	67a1                	lui	a5,0x8
    8001c6cc:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c6d0:	4501                	li	a0,0
    8001c6d2:	837e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c6d6:	f36e40ef          	jal	80000e0c <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8001c6da:	37ab77b7          	lui	a5,0x37ab7
    8001c6de:	4705                	li	a4,1
    8001c6e0:	078a                	slli	a5,a5,0x2
    8001c6e2:	170e                	slli	a4,a4,0x23
    8001c6e4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c6e8:	1761                	addi	a4,a4,-8
    8001c6ea:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c6ee:	08200593          	li	a1,130
    8001c6f2:	0001a617          	auipc	a2,0x1a
    8001c6f6:	56660613          	addi	a2,a2,1382 # 80036c58 <__func__.0+0x6f68>
    8001c6fa:	00014517          	auipc	a0,0x14
    8001c6fe:	8f650513          	addi	a0,a0,-1802 # 8002fff0 <__func__.0+0x300>
    8001c702:	18b100ef          	jal	8002d08c <printf>
    8001c706:	0003c797          	auipc	a5,0x3c
    8001c70a:	90b7c783          	lbu	a5,-1781(a5) # 80058011 <excpt+0x1>
    8001c70e:	0003c497          	auipc	s1,0x3c
    8001c712:	90248493          	addi	s1,s1,-1790 # 80058010 <excpt>
    8001c716:	00014597          	auipc	a1,0x14
    8001c71a:	8b258593          	addi	a1,a1,-1870 # 8002ffc8 <__func__.0+0x2d8>
    8001c71e:	cf89                	beqz	a5,8001c738 <amo_access_fault_9+0xe6>
    8001c720:	6498                	ld	a4,8(s1)
    8001c722:	479d                	li	a5,7
    8001c724:	00014597          	auipc	a1,0x14
    8001c728:	89458593          	addi	a1,a1,-1900 # 8002ffb8 <__func__.0+0x2c8>
    8001c72c:	00f70663          	beq	a4,a5,8001c738 <amo_access_fault_9+0xe6>
    8001c730:	00014597          	auipc	a1,0x14
    8001c734:	89858593          	addi	a1,a1,-1896 # 8002ffc8 <__func__.0+0x2d8>
    8001c738:	00014517          	auipc	a0,0x14
    8001c73c:	8d050513          	addi	a0,a0,-1840 # 80030008 <__func__.0+0x318>
    8001c740:	14d100ef          	jal	8002d08c <printf>
    8001c744:	0003c797          	auipc	a5,0x3c
    8001c748:	8cd7c783          	lbu	a5,-1843(a5) # 80058011 <excpt+0x1>
    8001c74c:	c789                	beqz	a5,8001c756 <amo_access_fault_9+0x104>
    8001c74e:	6498                	ld	a4,8(s1)
    8001c750:	479d                	li	a5,7
    8001c752:	00f70c63          	beq	a4,a5,8001c76a <amo_access_fault_9+0x118>
    8001c756:	00014517          	auipc	a0,0x14
    8001c75a:	8ba50513          	addi	a0,a0,-1862 # 80030010 <__func__.0+0x320>
    8001c75e:	12f100ef          	jal	8002d08c <printf>
    8001c762:	02900513          	li	a0,41
    8001c766:	6140f0ef          	jal	8002bd7a <putchar>
    8001c76a:	4529                	li	a0,10
    8001c76c:	60e0f0ef          	jal	8002bd7a <putchar>
    8001c770:	0003c417          	auipc	s0,0x3c
    8001c774:	8a144403          	lbu	s0,-1887(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c778:	00014597          	auipc	a1,0x14
    8001c77c:	85058593          	addi	a1,a1,-1968 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c780:	cc11                	beqz	s0,8001c79c <amo_access_fault_9+0x14a>
    8001c782:	6498                	ld	a4,8(s1)
    8001c784:	479d                	li	a5,7
    TEST_END();
    8001c786:	00014597          	auipc	a1,0x14
    8001c78a:	83258593          	addi	a1,a1,-1998 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c78e:	00f70763          	beq	a4,a5,8001c79c <amo_access_fault_9+0x14a>
    8001c792:	4401                	li	s0,0
    TEST_END();
    8001c794:	00014597          	auipc	a1,0x14
    8001c798:	83458593          	addi	a1,a1,-1996 # 8002ffc8 <__func__.0+0x2d8>
    8001c79c:	00014517          	auipc	a0,0x14
    8001c7a0:	8d450513          	addi	a0,a0,-1836 # 80030070 <__func__.0+0x380>
    8001c7a4:	0e9100ef          	jal	8002d08c <printf>
    8001c7a8:	4511                	li	a0,4
    8001c7aa:	f5ee40ef          	jal	80000f08 <goto_priv>
    8001c7ae:	924e50ef          	jal	800018d2 <reset_state>
}
    8001c7b2:	60e2                	ld	ra,24(sp)
    8001c7b4:	8522                	mv	a0,s0
    8001c7b6:	6442                	ld	s0,16(sp)
    8001c7b8:	64a2                	ld	s1,8(sp)
    8001c7ba:	6105                	addi	sp,sp,32
    8001c7bc:	8082                	ret

000000008001c7be <amo_access_fault_10>:


bool amo_access_fault_10(){
    8001c7be:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c7c0:	00013597          	auipc	a1,0x13
    8001c7c4:	8e058593          	addi	a1,a1,-1824 # 8002f0a0 <__func__.10>
    8001c7c8:	00014517          	auipc	a0,0x14
    8001c7cc:	81050513          	addi	a0,a0,-2032 # 8002ffd8 <__func__.0+0x2e8>
bool amo_access_fault_10(){
    8001c7d0:	ec06                	sd	ra,24(sp)
    8001c7d2:	e822                	sd	s0,16(sp)
    8001c7d4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c7d6:	0b7100ef          	jal	8002d08c <printf>
    8001c7da:	4529                	li	a0,10
    8001c7dc:	59e0f0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001c7e0:	4511                	li	a0,4
    8001c7e2:	f26e40ef          	jal	80000f08 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c7e6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c7ea:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c7ee:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c7f2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c7f6:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c7fa:	4785                	li	a5,1
    8001c7fc:	07fe                	slli	a5,a5,0x1f
    8001c7fe:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c802:	08000793          	li	a5,128
    8001c806:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c80a:	450d                	li	a0,3
    8001c80c:	efce40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c810:	dfce40ef          	jal	80000e0c <test_setup_except_function>
    8001c814:	37ab77b7          	lui	a5,0x37ab7
    8001c818:	078a                	slli	a5,a5,0x2
    8001c81a:	4705                	li	a4,1
    8001c81c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c820:	1706                	slli	a4,a4,0x21
    8001c822:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x80000000UL << 2 ,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c826:	08200593          	li	a1,130
    8001c82a:	0001a617          	auipc	a2,0x1a
    8001c82e:	4a660613          	addi	a2,a2,1190 # 80036cd0 <__func__.0+0x6fe0>
    8001c832:	00013517          	auipc	a0,0x13
    8001c836:	7be50513          	addi	a0,a0,1982 # 8002fff0 <__func__.0+0x300>
    8001c83a:	053100ef          	jal	8002d08c <printf>
    8001c83e:	0003b797          	auipc	a5,0x3b
    8001c842:	7d37c783          	lbu	a5,2003(a5) # 80058011 <excpt+0x1>
    8001c846:	0003b497          	auipc	s1,0x3b
    8001c84a:	7ca48493          	addi	s1,s1,1994 # 80058010 <excpt>
    8001c84e:	00013597          	auipc	a1,0x13
    8001c852:	77a58593          	addi	a1,a1,1914 # 8002ffc8 <__func__.0+0x2d8>
    8001c856:	cf89                	beqz	a5,8001c870 <amo_access_fault_10+0xb2>
    8001c858:	6498                	ld	a4,8(s1)
    8001c85a:	479d                	li	a5,7
    8001c85c:	00013597          	auipc	a1,0x13
    8001c860:	75c58593          	addi	a1,a1,1884 # 8002ffb8 <__func__.0+0x2c8>
    8001c864:	00f70663          	beq	a4,a5,8001c870 <amo_access_fault_10+0xb2>
    8001c868:	00013597          	auipc	a1,0x13
    8001c86c:	76058593          	addi	a1,a1,1888 # 8002ffc8 <__func__.0+0x2d8>
    8001c870:	00013517          	auipc	a0,0x13
    8001c874:	79850513          	addi	a0,a0,1944 # 80030008 <__func__.0+0x318>
    8001c878:	015100ef          	jal	8002d08c <printf>
    8001c87c:	0003b797          	auipc	a5,0x3b
    8001c880:	7957c783          	lbu	a5,1941(a5) # 80058011 <excpt+0x1>
    8001c884:	c789                	beqz	a5,8001c88e <amo_access_fault_10+0xd0>
    8001c886:	6498                	ld	a4,8(s1)
    8001c888:	479d                	li	a5,7
    8001c88a:	00f70c63          	beq	a4,a5,8001c8a2 <amo_access_fault_10+0xe4>
    8001c88e:	00013517          	auipc	a0,0x13
    8001c892:	78250513          	addi	a0,a0,1922 # 80030010 <__func__.0+0x320>
    8001c896:	7f6100ef          	jal	8002d08c <printf>
    8001c89a:	02900513          	li	a0,41
    8001c89e:	4dc0f0ef          	jal	8002bd7a <putchar>
    8001c8a2:	4529                	li	a0,10
    8001c8a4:	4d60f0ef          	jal	8002bd7a <putchar>
    8001c8a8:	0003b417          	auipc	s0,0x3b
    8001c8ac:	76944403          	lbu	s0,1897(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c8b0:	00013597          	auipc	a1,0x13
    8001c8b4:	71858593          	addi	a1,a1,1816 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c8b8:	cc11                	beqz	s0,8001c8d4 <amo_access_fault_10+0x116>
    8001c8ba:	6498                	ld	a4,8(s1)
    8001c8bc:	479d                	li	a5,7
    TEST_END();
    8001c8be:	00013597          	auipc	a1,0x13
    8001c8c2:	6fa58593          	addi	a1,a1,1786 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c8c6:	00f70763          	beq	a4,a5,8001c8d4 <amo_access_fault_10+0x116>
    8001c8ca:	4401                	li	s0,0
    TEST_END();
    8001c8cc:	00013597          	auipc	a1,0x13
    8001c8d0:	6fc58593          	addi	a1,a1,1788 # 8002ffc8 <__func__.0+0x2d8>
    8001c8d4:	00013517          	auipc	a0,0x13
    8001c8d8:	79c50513          	addi	a0,a0,1948 # 80030070 <__func__.0+0x380>
    8001c8dc:	7b0100ef          	jal	8002d08c <printf>
    8001c8e0:	4511                	li	a0,4
    8001c8e2:	e26e40ef          	jal	80000f08 <goto_priv>
    8001c8e6:	fede40ef          	jal	800018d2 <reset_state>
}
    8001c8ea:	60e2                	ld	ra,24(sp)
    8001c8ec:	8522                	mv	a0,s0
    8001c8ee:	6442                	ld	s0,16(sp)
    8001c8f0:	64a2                	ld	s1,8(sp)
    8001c8f2:	6105                	addi	sp,sp,32
    8001c8f4:	8082                	ret

000000008001c8f6 <instruction_access_fault_1>:


bool instruction_access_fault_1(){
    8001c8f6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c8f8:	00012597          	auipc	a1,0x12
    8001c8fc:	7c058593          	addi	a1,a1,1984 # 8002f0b8 <__func__.9>
    8001c900:	00013517          	auipc	a0,0x13
    8001c904:	6d850513          	addi	a0,a0,1752 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_access_fault_1(){
    8001c908:	ec06                	sd	ra,24(sp)
    8001c90a:	e822                	sd	s0,16(sp)
    8001c90c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c90e:	77e100ef          	jal	8002d08c <printf>
    8001c912:	4529                	li	a0,10
    8001c914:	4660f0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001c918:	4511                	li	a0,4
    8001c91a:	deee40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c91e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c922:	10000793          	li	a5,256
    8001c926:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c92a:	20000793          	li	a5,512
    8001c92e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c932:	40000793          	li	a5,1024
    8001c936:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c93a:	6785                	lui	a5,0x1
    8001c93c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c940:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c944:	4785                	li	a5,1
    8001c946:	07fe                	slli	a5,a5,0x1f
    8001c948:	4485                	li	s1,1
    8001c94a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c94e:	08100793          	li	a5,129
    8001c952:	07e2                	slli	a5,a5,0x18
    8001c954:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c958:	67a1                	lui	a5,0x8
    8001c95a:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001c95e:	caee40ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001c962:	02149793          	slli	a5,s1,0x21
    8001c966:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001c96a:	0003b417          	auipc	s0,0x3b
    8001c96e:	6a640413          	addi	s0,s0,1702 # 80058010 <excpt>
    8001c972:	00000297          	auipc	t0,0x0
    8001c976:	00c28293          	addi	t0,t0,12 # 8001c97e <instruction_access_fault_1+0x88>
    8001c97a:	02543c23          	sd	t0,56(s0)
    8001c97e:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001c980:	0003b597          	auipc	a1,0x3b
    8001c984:	6915c583          	lbu	a1,1681(a1) # 80058011 <excpt+0x1>
    8001c988:	00014517          	auipc	a0,0x14
    8001c98c:	1c850513          	addi	a0,a0,456 # 80030b50 <__func__.0+0xe60>
    8001c990:	6fc100ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.cause);
    8001c994:	640c                	ld	a1,8(s0)
    8001c996:	00014517          	auipc	a0,0x14
    8001c99a:	1ba50513          	addi	a0,a0,442 # 80030b50 <__func__.0+0xe60>
    8001c99e:	6ee100ef          	jal	8002d08c <printf>

    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c9a2:	08200593          	li	a1,130
    8001c9a6:	0001a617          	auipc	a2,0x1a
    8001c9aa:	39a60613          	addi	a2,a2,922 # 80036d40 <__func__.0+0x7050>
    8001c9ae:	00013517          	auipc	a0,0x13
    8001c9b2:	64250513          	addi	a0,a0,1602 # 8002fff0 <__func__.0+0x300>
    8001c9b6:	6d6100ef          	jal	8002d08c <printf>
    8001c9ba:	0003b797          	auipc	a5,0x3b
    8001c9be:	6577c783          	lbu	a5,1623(a5) # 80058011 <excpt+0x1>
    8001c9c2:	00013597          	auipc	a1,0x13
    8001c9c6:	60658593          	addi	a1,a1,1542 # 8002ffc8 <__func__.0+0x2d8>
    8001c9ca:	cf81                	beqz	a5,8001c9e2 <instruction_access_fault_1+0xec>
    8001c9cc:	641c                	ld	a5,8(s0)
    8001c9ce:	00013597          	auipc	a1,0x13
    8001c9d2:	5ea58593          	addi	a1,a1,1514 # 8002ffb8 <__func__.0+0x2c8>
    8001c9d6:	00978663          	beq	a5,s1,8001c9e2 <instruction_access_fault_1+0xec>
    8001c9da:	00013597          	auipc	a1,0x13
    8001c9de:	5ee58593          	addi	a1,a1,1518 # 8002ffc8 <__func__.0+0x2d8>
    8001c9e2:	00013517          	auipc	a0,0x13
    8001c9e6:	62650513          	addi	a0,a0,1574 # 80030008 <__func__.0+0x318>
    8001c9ea:	6a2100ef          	jal	8002d08c <printf>
    8001c9ee:	0003b797          	auipc	a5,0x3b
    8001c9f2:	6237c783          	lbu	a5,1571(a5) # 80058011 <excpt+0x1>
    8001c9f6:	c789                	beqz	a5,8001ca00 <instruction_access_fault_1+0x10a>
    8001c9f8:	6418                	ld	a4,8(s0)
    8001c9fa:	4785                	li	a5,1
    8001c9fc:	00f70c63          	beq	a4,a5,8001ca14 <instruction_access_fault_1+0x11e>
    8001ca00:	00013517          	auipc	a0,0x13
    8001ca04:	61050513          	addi	a0,a0,1552 # 80030010 <__func__.0+0x320>
    8001ca08:	684100ef          	jal	8002d08c <printf>
    8001ca0c:	02900513          	li	a0,41
    8001ca10:	36a0f0ef          	jal	8002bd7a <putchar>
    8001ca14:	4529                	li	a0,10
    8001ca16:	3640f0ef          	jal	8002bd7a <putchar>
    8001ca1a:	0003b497          	auipc	s1,0x3b
    8001ca1e:	5f74c483          	lbu	s1,1527(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001ca22:	00013597          	auipc	a1,0x13
    8001ca26:	5a658593          	addi	a1,a1,1446 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ca2a:	cc91                	beqz	s1,8001ca46 <instruction_access_fault_1+0x150>
    8001ca2c:	6418                	ld	a4,8(s0)
    8001ca2e:	4785                	li	a5,1
    TEST_END();
    8001ca30:	00013597          	auipc	a1,0x13
    8001ca34:	58858593          	addi	a1,a1,1416 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ca38:	00f70763          	beq	a4,a5,8001ca46 <instruction_access_fault_1+0x150>
    8001ca3c:	4481                	li	s1,0
    TEST_END();
    8001ca3e:	00013597          	auipc	a1,0x13
    8001ca42:	58a58593          	addi	a1,a1,1418 # 8002ffc8 <__func__.0+0x2d8>
    8001ca46:	00013517          	auipc	a0,0x13
    8001ca4a:	62a50513          	addi	a0,a0,1578 # 80030070 <__func__.0+0x380>
    8001ca4e:	63e100ef          	jal	8002d08c <printf>
    8001ca52:	4511                	li	a0,4
    8001ca54:	cb4e40ef          	jal	80000f08 <goto_priv>
    8001ca58:	e7be40ef          	jal	800018d2 <reset_state>
}
    8001ca5c:	60e2                	ld	ra,24(sp)
    8001ca5e:	6442                	ld	s0,16(sp)
    8001ca60:	8526                	mv	a0,s1
    8001ca62:	64a2                	ld	s1,8(sp)
    8001ca64:	6105                	addi	sp,sp,32
    8001ca66:	8082                	ret

000000008001ca68 <instruction_access_fault_2>:

bool instruction_access_fault_2(){
    8001ca68:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ca6a:	00012597          	auipc	a1,0x12
    8001ca6e:	66e58593          	addi	a1,a1,1646 # 8002f0d8 <__func__.8>
    8001ca72:	00013517          	auipc	a0,0x13
    8001ca76:	56650513          	addi	a0,a0,1382 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_access_fault_2(){
    8001ca7a:	ec06                	sd	ra,24(sp)
    8001ca7c:	e822                	sd	s0,16(sp)
    8001ca7e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ca80:	60c100ef          	jal	8002d08c <printf>
    8001ca84:	4529                	li	a0,10
    8001ca86:	2f40f0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001ca8a:	4511                	li	a0,4
    8001ca8c:	c7ce40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ca90:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ca94:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ca98:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ca9c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001caa0:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001caa4:	10000793          	li	a5,256
    8001caa8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001caac:	20000793          	li	a5,512
    8001cab0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cab4:	40000793          	li	a5,1024
    8001cab8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cabc:	6785                	lui	a5,0x1
    8001cabe:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cac2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cac6:	4785                	li	a5,1
    8001cac8:	07fe                	slli	a5,a5,0x1f
    8001caca:	4485                	li	s1,1
    8001cacc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cad0:	08100793          	li	a5,129
    8001cad4:	07e2                	slli	a5,a5,0x18
    8001cad6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cada:	08000793          	li	a5,128
    8001cade:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cae2:	67a1                	lui	a5,0x8
    8001cae4:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001cae8:	450d                	li	a0,3
    8001caea:	c1ee40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001caee:	b1ee40ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001caf2:	02149793          	slli	a5,s1,0x21
    8001caf6:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cafa:	0003b417          	auipc	s0,0x3b
    8001cafe:	51640413          	addi	s0,s0,1302 # 80058010 <excpt>
    8001cb02:	00000297          	auipc	t0,0x0
    8001cb06:	00c28293          	addi	t0,t0,12 # 8001cb0e <instruction_access_fault_2+0xa6>
    8001cb0a:	02543c23          	sd	t0,56(s0)
    8001cb0e:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cb10:	08200593          	li	a1,130
    8001cb14:	0001a617          	auipc	a2,0x1a
    8001cb18:	27460613          	addi	a2,a2,628 # 80036d88 <__func__.0+0x7098>
    8001cb1c:	00013517          	auipc	a0,0x13
    8001cb20:	4d450513          	addi	a0,a0,1236 # 8002fff0 <__func__.0+0x300>
    8001cb24:	568100ef          	jal	8002d08c <printf>
    8001cb28:	0003b797          	auipc	a5,0x3b
    8001cb2c:	4e97c783          	lbu	a5,1257(a5) # 80058011 <excpt+0x1>
    8001cb30:	00013597          	auipc	a1,0x13
    8001cb34:	49858593          	addi	a1,a1,1176 # 8002ffc8 <__func__.0+0x2d8>
    8001cb38:	cf81                	beqz	a5,8001cb50 <instruction_access_fault_2+0xe8>
    8001cb3a:	641c                	ld	a5,8(s0)
    8001cb3c:	00013597          	auipc	a1,0x13
    8001cb40:	47c58593          	addi	a1,a1,1148 # 8002ffb8 <__func__.0+0x2c8>
    8001cb44:	00978663          	beq	a5,s1,8001cb50 <instruction_access_fault_2+0xe8>
    8001cb48:	00013597          	auipc	a1,0x13
    8001cb4c:	48058593          	addi	a1,a1,1152 # 8002ffc8 <__func__.0+0x2d8>
    8001cb50:	00013517          	auipc	a0,0x13
    8001cb54:	4b850513          	addi	a0,a0,1208 # 80030008 <__func__.0+0x318>
    8001cb58:	534100ef          	jal	8002d08c <printf>
    8001cb5c:	0003b797          	auipc	a5,0x3b
    8001cb60:	4b57c783          	lbu	a5,1205(a5) # 80058011 <excpt+0x1>
    8001cb64:	c789                	beqz	a5,8001cb6e <instruction_access_fault_2+0x106>
    8001cb66:	6418                	ld	a4,8(s0)
    8001cb68:	4785                	li	a5,1
    8001cb6a:	00f70c63          	beq	a4,a5,8001cb82 <instruction_access_fault_2+0x11a>
    8001cb6e:	00013517          	auipc	a0,0x13
    8001cb72:	4a250513          	addi	a0,a0,1186 # 80030010 <__func__.0+0x320>
    8001cb76:	516100ef          	jal	8002d08c <printf>
    8001cb7a:	02900513          	li	a0,41
    8001cb7e:	1fc0f0ef          	jal	8002bd7a <putchar>
    8001cb82:	4529                	li	a0,10
    8001cb84:	1f60f0ef          	jal	8002bd7a <putchar>
    8001cb88:	0003b497          	auipc	s1,0x3b
    8001cb8c:	4894c483          	lbu	s1,1161(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001cb90:	00013597          	auipc	a1,0x13
    8001cb94:	43858593          	addi	a1,a1,1080 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cb98:	cc91                	beqz	s1,8001cbb4 <instruction_access_fault_2+0x14c>
    8001cb9a:	6418                	ld	a4,8(s0)
    8001cb9c:	4785                	li	a5,1
    TEST_END();
    8001cb9e:	00013597          	auipc	a1,0x13
    8001cba2:	41a58593          	addi	a1,a1,1050 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cba6:	00f70763          	beq	a4,a5,8001cbb4 <instruction_access_fault_2+0x14c>
    8001cbaa:	4481                	li	s1,0
    TEST_END();
    8001cbac:	00013597          	auipc	a1,0x13
    8001cbb0:	41c58593          	addi	a1,a1,1052 # 8002ffc8 <__func__.0+0x2d8>
    8001cbb4:	00013517          	auipc	a0,0x13
    8001cbb8:	4bc50513          	addi	a0,a0,1212 # 80030070 <__func__.0+0x380>
    8001cbbc:	4d0100ef          	jal	8002d08c <printf>
    8001cbc0:	4511                	li	a0,4
    8001cbc2:	b46e40ef          	jal	80000f08 <goto_priv>
    8001cbc6:	d0de40ef          	jal	800018d2 <reset_state>
}
    8001cbca:	60e2                	ld	ra,24(sp)
    8001cbcc:	6442                	ld	s0,16(sp)
    8001cbce:	8526                	mv	a0,s1
    8001cbd0:	64a2                	ld	s1,8(sp)
    8001cbd2:	6105                	addi	sp,sp,32
    8001cbd4:	8082                	ret

000000008001cbd6 <instruction_access_fault_3>:


bool instruction_access_fault_3(){
    8001cbd6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cbd8:	00012597          	auipc	a1,0x12
    8001cbdc:	52058593          	addi	a1,a1,1312 # 8002f0f8 <__func__.7>
    8001cbe0:	00013517          	auipc	a0,0x13
    8001cbe4:	3f850513          	addi	a0,a0,1016 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_access_fault_3(){
    8001cbe8:	ec06                	sd	ra,24(sp)
    8001cbea:	e822                	sd	s0,16(sp)
    8001cbec:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cbee:	49e100ef          	jal	8002d08c <printf>
    8001cbf2:	4529                	li	a0,10
    8001cbf4:	1860f0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001cbf8:	4511                	li	a0,4
    8001cbfa:	b0ee40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cbfe:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cc02:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cc06:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cc0a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cc0e:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cc12:	10000793          	li	a5,256
    8001cc16:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cc1a:	20000793          	li	a5,512
    8001cc1e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cc22:	40000793          	li	a5,1024
    8001cc26:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cc2a:	6785                	lui	a5,0x1
    8001cc2c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cc30:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cc34:	4785                	li	a5,1
    8001cc36:	07fe                	slli	a5,a5,0x1f
    8001cc38:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cc3c:	08100793          	li	a5,129
    8001cc40:	07e2                	slli	a5,a5,0x18
    8001cc42:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cc46:	08000793          	li	a5,128
    8001cc4a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cc4e:	67a1                	lui	a5,0x8
    8001cc50:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001cc54:	4505                	li	a0,1
    8001cc56:	ab2e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cc5a:	9b2e40ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cc5e:	4785                	li	a5,1
    8001cc60:	1786                	slli	a5,a5,0x21
    8001cc62:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cc66:	0003b417          	auipc	s0,0x3b
    8001cc6a:	3aa40413          	addi	s0,s0,938 # 80058010 <excpt>
    8001cc6e:	00000297          	auipc	t0,0x0
    8001cc72:	00c28293          	addi	t0,t0,12 # 8001cc7a <instruction_access_fault_3+0xa4>
    8001cc76:	02543c23          	sd	t0,56(s0)
    8001cc7a:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cc7c:	08200593          	li	a1,130
    8001cc80:	0001a617          	auipc	a2,0x1a
    8001cc84:	15060613          	addi	a2,a2,336 # 80036dd0 <__func__.0+0x70e0>
    8001cc88:	00013517          	auipc	a0,0x13
    8001cc8c:	36850513          	addi	a0,a0,872 # 8002fff0 <__func__.0+0x300>
    8001cc90:	3fc100ef          	jal	8002d08c <printf>
    8001cc94:	0003b797          	auipc	a5,0x3b
    8001cc98:	37d7c783          	lbu	a5,893(a5) # 80058011 <excpt+0x1>
    8001cc9c:	00013597          	auipc	a1,0x13
    8001cca0:	32c58593          	addi	a1,a1,812 # 8002ffc8 <__func__.0+0x2d8>
    8001cca4:	cf89                	beqz	a5,8001ccbe <instruction_access_fault_3+0xe8>
    8001cca6:	641c                	ld	a5,8(s0)
    8001cca8:	4705                	li	a4,1
    8001ccaa:	00013597          	auipc	a1,0x13
    8001ccae:	30e58593          	addi	a1,a1,782 # 8002ffb8 <__func__.0+0x2c8>
    8001ccb2:	00e78663          	beq	a5,a4,8001ccbe <instruction_access_fault_3+0xe8>
    8001ccb6:	00013597          	auipc	a1,0x13
    8001ccba:	31258593          	addi	a1,a1,786 # 8002ffc8 <__func__.0+0x2d8>
    8001ccbe:	00013517          	auipc	a0,0x13
    8001ccc2:	34a50513          	addi	a0,a0,842 # 80030008 <__func__.0+0x318>
    8001ccc6:	3c6100ef          	jal	8002d08c <printf>
    8001ccca:	0003b797          	auipc	a5,0x3b
    8001ccce:	3477c783          	lbu	a5,839(a5) # 80058011 <excpt+0x1>
    8001ccd2:	c789                	beqz	a5,8001ccdc <instruction_access_fault_3+0x106>
    8001ccd4:	6418                	ld	a4,8(s0)
    8001ccd6:	4785                	li	a5,1
    8001ccd8:	00f70c63          	beq	a4,a5,8001ccf0 <instruction_access_fault_3+0x11a>
    8001ccdc:	00013517          	auipc	a0,0x13
    8001cce0:	33450513          	addi	a0,a0,820 # 80030010 <__func__.0+0x320>
    8001cce4:	3a8100ef          	jal	8002d08c <printf>
    8001cce8:	02900513          	li	a0,41
    8001ccec:	08e0f0ef          	jal	8002bd7a <putchar>
    8001ccf0:	4529                	li	a0,10
    8001ccf2:	0880f0ef          	jal	8002bd7a <putchar>
    8001ccf6:	0003b497          	auipc	s1,0x3b
    8001ccfa:	31b4c483          	lbu	s1,795(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001ccfe:	00013597          	auipc	a1,0x13
    8001cd02:	2ca58593          	addi	a1,a1,714 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cd06:	cc91                	beqz	s1,8001cd22 <instruction_access_fault_3+0x14c>
    8001cd08:	6418                	ld	a4,8(s0)
    8001cd0a:	4785                	li	a5,1
    TEST_END();
    8001cd0c:	00013597          	auipc	a1,0x13
    8001cd10:	2ac58593          	addi	a1,a1,684 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cd14:	00f70763          	beq	a4,a5,8001cd22 <instruction_access_fault_3+0x14c>
    8001cd18:	4481                	li	s1,0
    TEST_END();
    8001cd1a:	00013597          	auipc	a1,0x13
    8001cd1e:	2ae58593          	addi	a1,a1,686 # 8002ffc8 <__func__.0+0x2d8>
    8001cd22:	00013517          	auipc	a0,0x13
    8001cd26:	34e50513          	addi	a0,a0,846 # 80030070 <__func__.0+0x380>
    8001cd2a:	362100ef          	jal	8002d08c <printf>
    8001cd2e:	4511                	li	a0,4
    8001cd30:	9d8e40ef          	jal	80000f08 <goto_priv>
    8001cd34:	b9fe40ef          	jal	800018d2 <reset_state>
}
    8001cd38:	60e2                	ld	ra,24(sp)
    8001cd3a:	6442                	ld	s0,16(sp)
    8001cd3c:	8526                	mv	a0,s1
    8001cd3e:	64a2                	ld	s1,8(sp)
    8001cd40:	6105                	addi	sp,sp,32
    8001cd42:	8082                	ret

000000008001cd44 <instruction_access_fault_4>:

bool instruction_access_fault_4(){
    8001cd44:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cd46:	00012597          	auipc	a1,0x12
    8001cd4a:	3d258593          	addi	a1,a1,978 # 8002f118 <__func__.6>
    8001cd4e:	00013517          	auipc	a0,0x13
    8001cd52:	28a50513          	addi	a0,a0,650 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_access_fault_4(){
    8001cd56:	ec06                	sd	ra,24(sp)
    8001cd58:	e822                	sd	s0,16(sp)
    8001cd5a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cd5c:	330100ef          	jal	8002d08c <printf>
    8001cd60:	4529                	li	a0,10
    8001cd62:	0180f0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001cd66:	4511                	li	a0,4
    8001cd68:	9a0e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cd6c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cd70:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cd74:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cd78:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cd7c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cd80:	10000793          	li	a5,256
    8001cd84:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cd88:	20000793          	li	a5,512
    8001cd8c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cd90:	40000793          	li	a5,1024
    8001cd94:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cd98:	6785                	lui	a5,0x1
    8001cd9a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cd9e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cda2:	4785                	li	a5,1
    8001cda4:	07fe                	slli	a5,a5,0x1f
    8001cda6:	4485                	li	s1,1
    8001cda8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cdac:	08100793          	li	a5,129
    8001cdb0:	07e2                	slli	a5,a5,0x18
    8001cdb2:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cdb6:	08000793          	li	a5,128
    8001cdba:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cdbe:	67a1                	lui	a5,0x8
    8001cdc0:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001cdc4:	4501                	li	a0,0
    8001cdc6:	942e40ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cdca:	842e40ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cdce:	02149793          	slli	a5,s1,0x21
    8001cdd2:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cdd6:	0003b417          	auipc	s0,0x3b
    8001cdda:	23a40413          	addi	s0,s0,570 # 80058010 <excpt>
    8001cdde:	00000297          	auipc	t0,0x0
    8001cde2:	00c28293          	addi	t0,t0,12 # 8001cdea <instruction_access_fault_4+0xa6>
    8001cde6:	02543c23          	sd	t0,56(s0)
    8001cdea:	8782                	jr	a5

    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cdec:	08200593          	li	a1,130
    8001cdf0:	0001a617          	auipc	a2,0x1a
    8001cdf4:	02860613          	addi	a2,a2,40 # 80036e18 <__func__.0+0x7128>
    8001cdf8:	00013517          	auipc	a0,0x13
    8001cdfc:	1f850513          	addi	a0,a0,504 # 8002fff0 <__func__.0+0x300>
    8001ce00:	28c100ef          	jal	8002d08c <printf>
    8001ce04:	0003b797          	auipc	a5,0x3b
    8001ce08:	20d7c783          	lbu	a5,525(a5) # 80058011 <excpt+0x1>
    8001ce0c:	00013597          	auipc	a1,0x13
    8001ce10:	1bc58593          	addi	a1,a1,444 # 8002ffc8 <__func__.0+0x2d8>
    8001ce14:	cf81                	beqz	a5,8001ce2c <instruction_access_fault_4+0xe8>
    8001ce16:	641c                	ld	a5,8(s0)
    8001ce18:	00013597          	auipc	a1,0x13
    8001ce1c:	1a058593          	addi	a1,a1,416 # 8002ffb8 <__func__.0+0x2c8>
    8001ce20:	00978663          	beq	a5,s1,8001ce2c <instruction_access_fault_4+0xe8>
    8001ce24:	00013597          	auipc	a1,0x13
    8001ce28:	1a458593          	addi	a1,a1,420 # 8002ffc8 <__func__.0+0x2d8>
    8001ce2c:	00013517          	auipc	a0,0x13
    8001ce30:	1dc50513          	addi	a0,a0,476 # 80030008 <__func__.0+0x318>
    8001ce34:	258100ef          	jal	8002d08c <printf>
    8001ce38:	0003b797          	auipc	a5,0x3b
    8001ce3c:	1d97c783          	lbu	a5,473(a5) # 80058011 <excpt+0x1>
    8001ce40:	c789                	beqz	a5,8001ce4a <instruction_access_fault_4+0x106>
    8001ce42:	6418                	ld	a4,8(s0)
    8001ce44:	4785                	li	a5,1
    8001ce46:	00f70c63          	beq	a4,a5,8001ce5e <instruction_access_fault_4+0x11a>
    8001ce4a:	00013517          	auipc	a0,0x13
    8001ce4e:	1c650513          	addi	a0,a0,454 # 80030010 <__func__.0+0x320>
    8001ce52:	23a100ef          	jal	8002d08c <printf>
    8001ce56:	02900513          	li	a0,41
    8001ce5a:	7210e0ef          	jal	8002bd7a <putchar>
    8001ce5e:	4529                	li	a0,10
    8001ce60:	71b0e0ef          	jal	8002bd7a <putchar>
    8001ce64:	0003b497          	auipc	s1,0x3b
    8001ce68:	1ad4c483          	lbu	s1,429(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001ce6c:	00013597          	auipc	a1,0x13
    8001ce70:	15c58593          	addi	a1,a1,348 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ce74:	cc91                	beqz	s1,8001ce90 <instruction_access_fault_4+0x14c>
    8001ce76:	6418                	ld	a4,8(s0)
    8001ce78:	4785                	li	a5,1
    TEST_END();
    8001ce7a:	00013597          	auipc	a1,0x13
    8001ce7e:	13e58593          	addi	a1,a1,318 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ce82:	00f70763          	beq	a4,a5,8001ce90 <instruction_access_fault_4+0x14c>
    8001ce86:	4481                	li	s1,0
    TEST_END();
    8001ce88:	00013597          	auipc	a1,0x13
    8001ce8c:	14058593          	addi	a1,a1,320 # 8002ffc8 <__func__.0+0x2d8>
    8001ce90:	00013517          	auipc	a0,0x13
    8001ce94:	1e050513          	addi	a0,a0,480 # 80030070 <__func__.0+0x380>
    8001ce98:	1f4100ef          	jal	8002d08c <printf>
    8001ce9c:	4511                	li	a0,4
    8001ce9e:	86ae40ef          	jal	80000f08 <goto_priv>
    8001cea2:	a31e40ef          	jal	800018d2 <reset_state>
}
    8001cea6:	60e2                	ld	ra,24(sp)
    8001cea8:	6442                	ld	s0,16(sp)
    8001ceaa:	8526                	mv	a0,s1
    8001ceac:	64a2                	ld	s1,8(sp)
    8001ceae:	6105                	addi	sp,sp,32
    8001ceb0:	8082                	ret

000000008001ceb2 <instruction_access_fault_5>:

bool instruction_access_fault_5(){
    8001ceb2:	1141                	addi	sp,sp,-16

    TEST_START();
    8001ceb4:	00012597          	auipc	a1,0x12
    8001ceb8:	28458593          	addi	a1,a1,644 # 8002f138 <__func__.5>
    8001cebc:	00013517          	auipc	a0,0x13
    8001cec0:	11c50513          	addi	a0,a0,284 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_access_fault_5(){
    8001cec4:	e406                	sd	ra,8(sp)
    8001cec6:	e022                	sd	s0,0(sp)
    TEST_START();
    8001cec8:	1c4100ef          	jal	8002d08c <printf>
    8001cecc:	4529                	li	a0,10
    8001cece:	6ad0e0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001ced2:	4511                	li	a0,4
    8001ced4:	834e40ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ced8:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cedc:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cee0:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cee4:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cee8:	3a046073          	csrsi	pmpcfg0,8
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ceec:	10000793          	li	a5,256
    8001cef0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cef4:	20000793          	li	a5,512
    8001cef8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cefc:	40000793          	li	a5,1024
    8001cf00:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cf04:	6785                	lui	a5,0x1
    8001cf06:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cf0a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000UL);
    8001cf0e:	4785                	li	a5,1
    8001cf10:	07fe                	slli	a5,a5,0x1f
    8001cf12:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000UL);
    8001cf16:	08100793          	li	a5,129
    8001cf1a:	07e2                	slli	a5,a5,0x18
    8001cf1c:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cf20:	67a1                	lui	a5,0x8
    8001cf22:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001cf26:	ee7e30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cf2a:	4785                	li	a5,1
    8001cf2c:	1786                	slli	a5,a5,0x21
    8001cf2e:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cf32:	0003b417          	auipc	s0,0x3b
    8001cf36:	0de40413          	addi	s0,s0,222 # 80058010 <excpt>
    8001cf3a:	00000297          	auipc	t0,0x0
    8001cf3e:	00c28293          	addi	t0,t0,12 # 8001cf46 <instruction_access_fault_5+0x94>
    8001cf42:	02543c23          	sd	t0,56(s0)
    8001cf46:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001cf48:	0003b597          	auipc	a1,0x3b
    8001cf4c:	0c95c583          	lbu	a1,201(a1) # 80058011 <excpt+0x1>
    8001cf50:	00014517          	auipc	a0,0x14
    8001cf54:	c0050513          	addi	a0,a0,-1024 # 80030b50 <__func__.0+0xe60>
    8001cf58:	134100ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.cause);
    8001cf5c:	640c                	ld	a1,8(s0)
    8001cf5e:	00014517          	auipc	a0,0x14
    8001cf62:	bf250513          	addi	a0,a0,-1038 # 80030b50 <__func__.0+0xe60>
    8001cf66:	126100ef          	jal	8002d08c <printf>

    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001cf6a:	08200593          	li	a1,130
    8001cf6e:	0001a617          	auipc	a2,0x1a
    8001cf72:	ef260613          	addi	a2,a2,-270 # 80036e60 <__func__.0+0x7170>
    8001cf76:	00013517          	auipc	a0,0x13
    8001cf7a:	07a50513          	addi	a0,a0,122 # 8002fff0 <__func__.0+0x300>
    8001cf7e:	10e100ef          	jal	8002d08c <printf>
    8001cf82:	0003b797          	auipc	a5,0x3b
    8001cf86:	08f7c783          	lbu	a5,143(a5) # 80058011 <excpt+0x1>
    8001cf8a:	00013597          	auipc	a1,0x13
    8001cf8e:	02e58593          	addi	a1,a1,46 # 8002ffb8 <__func__.0+0x2c8>
    8001cf92:	c789                	beqz	a5,8001cf9c <instruction_access_fault_5+0xea>
    8001cf94:	00013597          	auipc	a1,0x13
    8001cf98:	03458593          	addi	a1,a1,52 # 8002ffc8 <__func__.0+0x2d8>
    8001cf9c:	00013517          	auipc	a0,0x13
    8001cfa0:	06c50513          	addi	a0,a0,108 # 80030008 <__func__.0+0x318>
    8001cfa4:	0e8100ef          	jal	8002d08c <printf>
    8001cfa8:	0003b797          	auipc	a5,0x3b
    8001cfac:	0697c783          	lbu	a5,105(a5) # 80058011 <excpt+0x1>
    8001cfb0:	e7a1                	bnez	a5,8001cff8 <instruction_access_fault_5+0x146>
    8001cfb2:	4529                	li	a0,10
    8001cfb4:	5c70e0ef          	jal	8002bd7a <putchar>
    8001cfb8:	0003b797          	auipc	a5,0x3b
    8001cfbc:	0597c783          	lbu	a5,89(a5) # 80058011 <excpt+0x1>
    8001cfc0:	e795                	bnez	a5,8001cfec <instruction_access_fault_5+0x13a>
    8001cfc2:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001cfc4:	00013597          	auipc	a1,0x13
    8001cfc8:	ff458593          	addi	a1,a1,-12 # 8002ffb8 <__func__.0+0x2c8>
    8001cfcc:	00013517          	auipc	a0,0x13
    8001cfd0:	0a450513          	addi	a0,a0,164 # 80030070 <__func__.0+0x380>
    8001cfd4:	0b8100ef          	jal	8002d08c <printf>
    8001cfd8:	4511                	li	a0,4
    8001cfda:	f2fe30ef          	jal	80000f08 <goto_priv>
    8001cfde:	8f5e40ef          	jal	800018d2 <reset_state>
}
    8001cfe2:	60a2                	ld	ra,8(sp)
    8001cfe4:	8522                	mv	a0,s0
    8001cfe6:	6402                	ld	s0,0(sp)
    8001cfe8:	0141                	addi	sp,sp,16
    8001cfea:	8082                	ret
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001cfec:	4401                	li	s0,0
    TEST_END();
    8001cfee:	00013597          	auipc	a1,0x13
    8001cff2:	fda58593          	addi	a1,a1,-38 # 8002ffc8 <__func__.0+0x2d8>
    8001cff6:	bfd9                	j	8001cfcc <instruction_access_fault_5+0x11a>
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001cff8:	00013517          	auipc	a0,0x13
    8001cffc:	01850513          	addi	a0,a0,24 # 80030010 <__func__.0+0x320>
    8001d000:	08c100ef          	jal	8002d08c <printf>
    8001d004:	02900513          	li	a0,41
    8001d008:	5730e0ef          	jal	8002bd7a <putchar>
    8001d00c:	b75d                	j	8001cfb2 <instruction_access_fault_5+0x100>

000000008001d00e <instruction_access_fault_6>:


bool instruction_access_fault_6(){
    8001d00e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d010:	00012597          	auipc	a1,0x12
    8001d014:	14858593          	addi	a1,a1,328 # 8002f158 <__func__.4>
    8001d018:	00013517          	auipc	a0,0x13
    8001d01c:	fc050513          	addi	a0,a0,-64 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_access_fault_6(){
    8001d020:	ec06                	sd	ra,24(sp)
    8001d022:	e822                	sd	s0,16(sp)
    8001d024:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d026:	066100ef          	jal	8002d08c <printf>
    8001d02a:	4529                	li	a0,10
    8001d02c:	54f0e0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001d030:	4511                	li	a0,4
    8001d032:	ed7e30ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d036:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d03a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d03e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d042:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d046:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d04a:	10000793          	li	a5,256
    8001d04e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d052:	20000793          	li	a5,512
    8001d056:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d05a:	40000793          	li	a5,1024
    8001d05e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d062:	6785                	lui	a5,0x1
    8001d064:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d068:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d06c:	4785                	li	a5,1
    8001d06e:	07fe                	slli	a5,a5,0x1f
    8001d070:	4485                	li	s1,1
    8001d072:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d076:	08100793          	li	a5,129
    8001d07a:	07e2                	slli	a5,a5,0x18
    8001d07c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d080:	08000793          	li	a5,128
    8001d084:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d088:	67a1                	lui	a5,0x8
    8001d08a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001d08e:	450d                	li	a0,3
    8001d090:	e79e30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d094:	d79e30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001d098:	02149793          	slli	a5,s1,0x21
    8001d09c:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001d0a0:	0003b417          	auipc	s0,0x3b
    8001d0a4:	f7040413          	addi	s0,s0,-144 # 80058010 <excpt>
    8001d0a8:	00000297          	auipc	t0,0x0
    8001d0ac:	00c28293          	addi	t0,t0,12 # 8001d0b4 <instruction_access_fault_6+0xa6>
    8001d0b0:	02543c23          	sd	t0,56(s0)
    8001d0b4:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d0b6:	08200593          	li	a1,130
    8001d0ba:	0001a617          	auipc	a2,0x1a
    8001d0be:	dee60613          	addi	a2,a2,-530 # 80036ea8 <__func__.0+0x71b8>
    8001d0c2:	00013517          	auipc	a0,0x13
    8001d0c6:	f2e50513          	addi	a0,a0,-210 # 8002fff0 <__func__.0+0x300>
    8001d0ca:	7c30f0ef          	jal	8002d08c <printf>
    8001d0ce:	0003b797          	auipc	a5,0x3b
    8001d0d2:	f437c783          	lbu	a5,-189(a5) # 80058011 <excpt+0x1>
    8001d0d6:	00013597          	auipc	a1,0x13
    8001d0da:	ef258593          	addi	a1,a1,-270 # 8002ffc8 <__func__.0+0x2d8>
    8001d0de:	cf81                	beqz	a5,8001d0f6 <instruction_access_fault_6+0xe8>
    8001d0e0:	641c                	ld	a5,8(s0)
    8001d0e2:	00013597          	auipc	a1,0x13
    8001d0e6:	ed658593          	addi	a1,a1,-298 # 8002ffb8 <__func__.0+0x2c8>
    8001d0ea:	00978663          	beq	a5,s1,8001d0f6 <instruction_access_fault_6+0xe8>
    8001d0ee:	00013597          	auipc	a1,0x13
    8001d0f2:	eda58593          	addi	a1,a1,-294 # 8002ffc8 <__func__.0+0x2d8>
    8001d0f6:	00013517          	auipc	a0,0x13
    8001d0fa:	f1250513          	addi	a0,a0,-238 # 80030008 <__func__.0+0x318>
    8001d0fe:	78f0f0ef          	jal	8002d08c <printf>
    8001d102:	0003b797          	auipc	a5,0x3b
    8001d106:	f0f7c783          	lbu	a5,-241(a5) # 80058011 <excpt+0x1>
    8001d10a:	c789                	beqz	a5,8001d114 <instruction_access_fault_6+0x106>
    8001d10c:	6418                	ld	a4,8(s0)
    8001d10e:	4785                	li	a5,1
    8001d110:	00f70c63          	beq	a4,a5,8001d128 <instruction_access_fault_6+0x11a>
    8001d114:	00013517          	auipc	a0,0x13
    8001d118:	efc50513          	addi	a0,a0,-260 # 80030010 <__func__.0+0x320>
    8001d11c:	7710f0ef          	jal	8002d08c <printf>
    8001d120:	02900513          	li	a0,41
    8001d124:	4570e0ef          	jal	8002bd7a <putchar>
    8001d128:	4529                	li	a0,10
    8001d12a:	4510e0ef          	jal	8002bd7a <putchar>
    8001d12e:	0003b497          	auipc	s1,0x3b
    8001d132:	ee34c483          	lbu	s1,-285(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d136:	00013597          	auipc	a1,0x13
    8001d13a:	e9258593          	addi	a1,a1,-366 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d13e:	cc91                	beqz	s1,8001d15a <instruction_access_fault_6+0x14c>
    8001d140:	6418                	ld	a4,8(s0)
    8001d142:	4785                	li	a5,1
    TEST_END();
    8001d144:	00013597          	auipc	a1,0x13
    8001d148:	e7458593          	addi	a1,a1,-396 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d14c:	00f70763          	beq	a4,a5,8001d15a <instruction_access_fault_6+0x14c>
    8001d150:	4481                	li	s1,0
    TEST_END();
    8001d152:	00013597          	auipc	a1,0x13
    8001d156:	e7658593          	addi	a1,a1,-394 # 8002ffc8 <__func__.0+0x2d8>
    8001d15a:	00013517          	auipc	a0,0x13
    8001d15e:	f1650513          	addi	a0,a0,-234 # 80030070 <__func__.0+0x380>
    8001d162:	72b0f0ef          	jal	8002d08c <printf>
    8001d166:	4511                	li	a0,4
    8001d168:	da1e30ef          	jal	80000f08 <goto_priv>
    8001d16c:	f66e40ef          	jal	800018d2 <reset_state>
}
    8001d170:	60e2                	ld	ra,24(sp)
    8001d172:	6442                	ld	s0,16(sp)
    8001d174:	8526                	mv	a0,s1
    8001d176:	64a2                	ld	s1,8(sp)
    8001d178:	6105                	addi	sp,sp,32
    8001d17a:	8082                	ret

000000008001d17c <instruction_access_fault_7>:


bool instruction_access_fault_7(){
    8001d17c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d17e:	00012597          	auipc	a1,0x12
    8001d182:	ffa58593          	addi	a1,a1,-6 # 8002f178 <__func__.3>
    8001d186:	00013517          	auipc	a0,0x13
    8001d18a:	e5250513          	addi	a0,a0,-430 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_access_fault_7(){
    8001d18e:	ec06                	sd	ra,24(sp)
    8001d190:	e822                	sd	s0,16(sp)
    8001d192:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d194:	6f90f0ef          	jal	8002d08c <printf>
    8001d198:	4529                	li	a0,10
    8001d19a:	3e10e0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001d19e:	4511                	li	a0,4
    8001d1a0:	d69e30ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d1a4:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d1a8:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d1ac:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d1b0:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d1b4:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d1b8:	10000793          	li	a5,256
    8001d1bc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d1c0:	20000793          	li	a5,512
    8001d1c4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d1c8:	40000793          	li	a5,1024
    8001d1cc:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d1d0:	6785                	lui	a5,0x1
    8001d1d2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d1d6:	3a07a073          	csrs	pmpcfg0,a5
    
    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d1da:	4785                	li	a5,1
    8001d1dc:	07fe                	slli	a5,a5,0x1f
    8001d1de:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d1e2:	08100793          	li	a5,129
    8001d1e6:	07e2                	slli	a5,a5,0x18
    8001d1e8:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d1ec:	08000793          	li	a5,128
    8001d1f0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d1f4:	67a1                	lui	a5,0x8
    8001d1f6:	3a07b073          	csrc	pmpcfg0,a5


    goto_priv(PRIV_HU);
    8001d1fa:	4505                	li	a0,1
    8001d1fc:	d0de30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d200:	c0de30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001d204:	4785                	li	a5,1
    8001d206:	1786                	slli	a5,a5,0x21
    8001d208:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001d20c:	0003b417          	auipc	s0,0x3b
    8001d210:	e0440413          	addi	s0,s0,-508 # 80058010 <excpt>
    8001d214:	00000297          	auipc	t0,0x0
    8001d218:	00c28293          	addi	t0,t0,12 # 8001d220 <instruction_access_fault_7+0xa4>
    8001d21c:	02543c23          	sd	t0,56(s0)
    8001d220:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d222:	08200593          	li	a1,130
    8001d226:	0001a617          	auipc	a2,0x1a
    8001d22a:	cca60613          	addi	a2,a2,-822 # 80036ef0 <__func__.0+0x7200>
    8001d22e:	00013517          	auipc	a0,0x13
    8001d232:	dc250513          	addi	a0,a0,-574 # 8002fff0 <__func__.0+0x300>
    8001d236:	6570f0ef          	jal	8002d08c <printf>
    8001d23a:	0003b797          	auipc	a5,0x3b
    8001d23e:	dd77c783          	lbu	a5,-553(a5) # 80058011 <excpt+0x1>
    8001d242:	00013597          	auipc	a1,0x13
    8001d246:	d8658593          	addi	a1,a1,-634 # 8002ffc8 <__func__.0+0x2d8>
    8001d24a:	cf89                	beqz	a5,8001d264 <instruction_access_fault_7+0xe8>
    8001d24c:	641c                	ld	a5,8(s0)
    8001d24e:	4705                	li	a4,1
    8001d250:	00013597          	auipc	a1,0x13
    8001d254:	d6858593          	addi	a1,a1,-664 # 8002ffb8 <__func__.0+0x2c8>
    8001d258:	00e78663          	beq	a5,a4,8001d264 <instruction_access_fault_7+0xe8>
    8001d25c:	00013597          	auipc	a1,0x13
    8001d260:	d6c58593          	addi	a1,a1,-660 # 8002ffc8 <__func__.0+0x2d8>
    8001d264:	00013517          	auipc	a0,0x13
    8001d268:	da450513          	addi	a0,a0,-604 # 80030008 <__func__.0+0x318>
    8001d26c:	6210f0ef          	jal	8002d08c <printf>
    8001d270:	0003b797          	auipc	a5,0x3b
    8001d274:	da17c783          	lbu	a5,-607(a5) # 80058011 <excpt+0x1>
    8001d278:	c789                	beqz	a5,8001d282 <instruction_access_fault_7+0x106>
    8001d27a:	6418                	ld	a4,8(s0)
    8001d27c:	4785                	li	a5,1
    8001d27e:	00f70c63          	beq	a4,a5,8001d296 <instruction_access_fault_7+0x11a>
    8001d282:	00013517          	auipc	a0,0x13
    8001d286:	d8e50513          	addi	a0,a0,-626 # 80030010 <__func__.0+0x320>
    8001d28a:	6030f0ef          	jal	8002d08c <printf>
    8001d28e:	02900513          	li	a0,41
    8001d292:	2e90e0ef          	jal	8002bd7a <putchar>
    8001d296:	4529                	li	a0,10
    8001d298:	2e30e0ef          	jal	8002bd7a <putchar>
    8001d29c:	0003b497          	auipc	s1,0x3b
    8001d2a0:	d754c483          	lbu	s1,-651(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );

    TEST_END();
    8001d2a4:	00013597          	auipc	a1,0x13
    8001d2a8:	d2458593          	addi	a1,a1,-732 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d2ac:	cc91                	beqz	s1,8001d2c8 <instruction_access_fault_7+0x14c>
    8001d2ae:	6418                	ld	a4,8(s0)
    8001d2b0:	4785                	li	a5,1
    TEST_END();
    8001d2b2:	00013597          	auipc	a1,0x13
    8001d2b6:	d0658593          	addi	a1,a1,-762 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d2ba:	00f70763          	beq	a4,a5,8001d2c8 <instruction_access_fault_7+0x14c>
    8001d2be:	4481                	li	s1,0
    TEST_END();
    8001d2c0:	00013597          	auipc	a1,0x13
    8001d2c4:	d0858593          	addi	a1,a1,-760 # 8002ffc8 <__func__.0+0x2d8>
    8001d2c8:	00013517          	auipc	a0,0x13
    8001d2cc:	da850513          	addi	a0,a0,-600 # 80030070 <__func__.0+0x380>
    8001d2d0:	5bd0f0ef          	jal	8002d08c <printf>
    8001d2d4:	4511                	li	a0,4
    8001d2d6:	c33e30ef          	jal	80000f08 <goto_priv>
    8001d2da:	df8e40ef          	jal	800018d2 <reset_state>
}
    8001d2de:	60e2                	ld	ra,24(sp)
    8001d2e0:	6442                	ld	s0,16(sp)
    8001d2e2:	8526                	mv	a0,s1
    8001d2e4:	64a2                	ld	s1,8(sp)
    8001d2e6:	6105                	addi	sp,sp,32
    8001d2e8:	8082                	ret

000000008001d2ea <instruction_access_fault_8>:

bool instruction_access_fault_8(){
    8001d2ea:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d2ec:	00012597          	auipc	a1,0x12
    8001d2f0:	eac58593          	addi	a1,a1,-340 # 8002f198 <__func__.2>
    8001d2f4:	00013517          	auipc	a0,0x13
    8001d2f8:	ce450513          	addi	a0,a0,-796 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_access_fault_8(){
    8001d2fc:	ec06                	sd	ra,24(sp)
    8001d2fe:	e822                	sd	s0,16(sp)
    8001d300:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d302:	58b0f0ef          	jal	8002d08c <printf>
    8001d306:	4529                	li	a0,10
    8001d308:	2730e0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001d30c:	4511                	li	a0,4
    8001d30e:	bfbe30ef          	jal	80000f08 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d312:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d316:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d31a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d31e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d322:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d326:	10000793          	li	a5,256
    8001d32a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d32e:	20000793          	li	a5,512
    8001d332:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d336:	40000793          	li	a5,1024
    8001d33a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d33e:	6785                	lui	a5,0x1
    8001d340:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d344:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d348:	4785                	li	a5,1
    8001d34a:	07fe                	slli	a5,a5,0x1f
    8001d34c:	4485                	li	s1,1
    8001d34e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d352:	08100793          	li	a5,129
    8001d356:	07e2                	slli	a5,a5,0x18
    8001d358:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d35c:	08000793          	li	a5,128
    8001d360:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d364:	67a1                	lui	a5,0x8
    8001d366:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d36a:	4501                	li	a0,0
    8001d36c:	b9de30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d370:	a9de30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001d374:	02149793          	slli	a5,s1,0x21
    8001d378:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001d37c:	0003b417          	auipc	s0,0x3b
    8001d380:	c9440413          	addi	s0,s0,-876 # 80058010 <excpt>
    8001d384:	00000297          	auipc	t0,0x0
    8001d388:	00c28293          	addi	t0,t0,12 # 8001d390 <instruction_access_fault_8+0xa6>
    8001d38c:	02543c23          	sd	t0,56(s0)
    8001d390:	8782                	jr	a5

    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d392:	08200593          	li	a1,130
    8001d396:	0001a617          	auipc	a2,0x1a
    8001d39a:	ba260613          	addi	a2,a2,-1118 # 80036f38 <__func__.0+0x7248>
    8001d39e:	00013517          	auipc	a0,0x13
    8001d3a2:	c5250513          	addi	a0,a0,-942 # 8002fff0 <__func__.0+0x300>
    8001d3a6:	4e70f0ef          	jal	8002d08c <printf>
    8001d3aa:	0003b797          	auipc	a5,0x3b
    8001d3ae:	c677c783          	lbu	a5,-921(a5) # 80058011 <excpt+0x1>
    8001d3b2:	00013597          	auipc	a1,0x13
    8001d3b6:	c1658593          	addi	a1,a1,-1002 # 8002ffc8 <__func__.0+0x2d8>
    8001d3ba:	cf81                	beqz	a5,8001d3d2 <instruction_access_fault_8+0xe8>
    8001d3bc:	641c                	ld	a5,8(s0)
    8001d3be:	00013597          	auipc	a1,0x13
    8001d3c2:	bfa58593          	addi	a1,a1,-1030 # 8002ffb8 <__func__.0+0x2c8>
    8001d3c6:	00978663          	beq	a5,s1,8001d3d2 <instruction_access_fault_8+0xe8>
    8001d3ca:	00013597          	auipc	a1,0x13
    8001d3ce:	bfe58593          	addi	a1,a1,-1026 # 8002ffc8 <__func__.0+0x2d8>
    8001d3d2:	00013517          	auipc	a0,0x13
    8001d3d6:	c3650513          	addi	a0,a0,-970 # 80030008 <__func__.0+0x318>
    8001d3da:	4b30f0ef          	jal	8002d08c <printf>
    8001d3de:	0003b797          	auipc	a5,0x3b
    8001d3e2:	c337c783          	lbu	a5,-973(a5) # 80058011 <excpt+0x1>
    8001d3e6:	c789                	beqz	a5,8001d3f0 <instruction_access_fault_8+0x106>
    8001d3e8:	6418                	ld	a4,8(s0)
    8001d3ea:	4785                	li	a5,1
    8001d3ec:	00f70c63          	beq	a4,a5,8001d404 <instruction_access_fault_8+0x11a>
    8001d3f0:	00013517          	auipc	a0,0x13
    8001d3f4:	c2050513          	addi	a0,a0,-992 # 80030010 <__func__.0+0x320>
    8001d3f8:	4950f0ef          	jal	8002d08c <printf>
    8001d3fc:	02900513          	li	a0,41
    8001d400:	17b0e0ef          	jal	8002bd7a <putchar>
    8001d404:	4529                	li	a0,10
    8001d406:	1750e0ef          	jal	8002bd7a <putchar>
    8001d40a:	0003b497          	auipc	s1,0x3b
    8001d40e:	c074c483          	lbu	s1,-1017(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d412:	00013597          	auipc	a1,0x13
    8001d416:	bb658593          	addi	a1,a1,-1098 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d41a:	cc91                	beqz	s1,8001d436 <instruction_access_fault_8+0x14c>
    8001d41c:	6418                	ld	a4,8(s0)
    8001d41e:	4785                	li	a5,1
    TEST_END();
    8001d420:	00013597          	auipc	a1,0x13
    8001d424:	b9858593          	addi	a1,a1,-1128 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d428:	00f70763          	beq	a4,a5,8001d436 <instruction_access_fault_8+0x14c>
    8001d42c:	4481                	li	s1,0
    TEST_END();
    8001d42e:	00013597          	auipc	a1,0x13
    8001d432:	b9a58593          	addi	a1,a1,-1126 # 8002ffc8 <__func__.0+0x2d8>
    8001d436:	00013517          	auipc	a0,0x13
    8001d43a:	c3a50513          	addi	a0,a0,-966 # 80030070 <__func__.0+0x380>
    8001d43e:	44f0f0ef          	jal	8002d08c <printf>
    8001d442:	4511                	li	a0,4
    8001d444:	ac5e30ef          	jal	80000f08 <goto_priv>
    8001d448:	c8ae40ef          	jal	800018d2 <reset_state>
}
    8001d44c:	60e2                	ld	ra,24(sp)
    8001d44e:	6442                	ld	s0,16(sp)
    8001d450:	8526                	mv	a0,s1
    8001d452:	64a2                	ld	s1,8(sp)
    8001d454:	6105                	addi	sp,sp,32
    8001d456:	8082                	ret

000000008001d458 <instruction_access_fault_9>:

bool instruction_access_fault_9(){
    8001d458:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d45a:	00012597          	auipc	a1,0x12
    8001d45e:	d5e58593          	addi	a1,a1,-674 # 8002f1b8 <__func__.1>
    8001d462:	00013517          	auipc	a0,0x13
    8001d466:	b7650513          	addi	a0,a0,-1162 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_access_fault_9(){
    8001d46a:	ec06                	sd	ra,24(sp)
    8001d46c:	e822                	sd	s0,16(sp)
    8001d46e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d470:	41d0f0ef          	jal	8002d08c <printf>
    8001d474:	4529                	li	a0,10
    8001d476:	1050e0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001d47a:	4511                	li	a0,4
    8001d47c:	a8de30ef          	jal	80000f08 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d480:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d484:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d488:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d48c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d490:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d494:	10000793          	li	a5,256
    8001d498:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d49c:	20000793          	li	a5,512
    8001d4a0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d4a4:	40000793          	li	a5,1024
    8001d4a8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d4ac:	6785                	lui	a5,0x1
    8001d4ae:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d4b2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d4b6:	4785                	li	a5,1
    8001d4b8:	07fe                	slli	a5,a5,0x1f
    8001d4ba:	4485                	li	s1,1
    8001d4bc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d4c0:	08100793          	li	a5,129
    8001d4c4:	07e2                	slli	a5,a5,0x18
    8001d4c6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d4ca:	08000793          	li	a5,128
    8001d4ce:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d4d2:	67a1                	lui	a5,0x8
    8001d4d4:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d4d8:	4501                	li	a0,0
    8001d4da:	a2fe30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d4de:	92fe30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x1fffffffeUL << 2);
    8001d4e2:	02349793          	slli	a5,s1,0x23
    8001d4e6:	17e1                	addi	a5,a5,-8 # 7ff8 <_test_table_size+0x7ff7>
    8001d4e8:	0003b417          	auipc	s0,0x3b
    8001d4ec:	b2840413          	addi	s0,s0,-1240 # 80058010 <excpt>
    8001d4f0:	00000297          	auipc	t0,0x0
    8001d4f4:	00c28293          	addi	t0,t0,12 # 8001d4fc <instruction_access_fault_9+0xa4>
    8001d4f8:	02543c23          	sd	t0,56(s0)
    8001d4fc:	8782                	jr	a5

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d4fe:	08200593          	li	a1,130
    8001d502:	0001a617          	auipc	a2,0x1a
    8001d506:	a6e60613          	addi	a2,a2,-1426 # 80036f70 <__func__.0+0x7280>
    8001d50a:	00013517          	auipc	a0,0x13
    8001d50e:	ae650513          	addi	a0,a0,-1306 # 8002fff0 <__func__.0+0x300>
    8001d512:	37b0f0ef          	jal	8002d08c <printf>
    8001d516:	0003b797          	auipc	a5,0x3b
    8001d51a:	afb7c783          	lbu	a5,-1285(a5) # 80058011 <excpt+0x1>
    8001d51e:	00013597          	auipc	a1,0x13
    8001d522:	aaa58593          	addi	a1,a1,-1366 # 8002ffc8 <__func__.0+0x2d8>
    8001d526:	cf81                	beqz	a5,8001d53e <instruction_access_fault_9+0xe6>
    8001d528:	641c                	ld	a5,8(s0)
    8001d52a:	00013597          	auipc	a1,0x13
    8001d52e:	a8e58593          	addi	a1,a1,-1394 # 8002ffb8 <__func__.0+0x2c8>
    8001d532:	00978663          	beq	a5,s1,8001d53e <instruction_access_fault_9+0xe6>
    8001d536:	00013597          	auipc	a1,0x13
    8001d53a:	a9258593          	addi	a1,a1,-1390 # 8002ffc8 <__func__.0+0x2d8>
    8001d53e:	00013517          	auipc	a0,0x13
    8001d542:	aca50513          	addi	a0,a0,-1334 # 80030008 <__func__.0+0x318>
    8001d546:	3470f0ef          	jal	8002d08c <printf>
    8001d54a:	0003b797          	auipc	a5,0x3b
    8001d54e:	ac77c783          	lbu	a5,-1337(a5) # 80058011 <excpt+0x1>
    8001d552:	c789                	beqz	a5,8001d55c <instruction_access_fault_9+0x104>
    8001d554:	6418                	ld	a4,8(s0)
    8001d556:	4785                	li	a5,1
    8001d558:	00f70c63          	beq	a4,a5,8001d570 <instruction_access_fault_9+0x118>
    8001d55c:	00013517          	auipc	a0,0x13
    8001d560:	ab450513          	addi	a0,a0,-1356 # 80030010 <__func__.0+0x320>
    8001d564:	3290f0ef          	jal	8002d08c <printf>
    8001d568:	02900513          	li	a0,41
    8001d56c:	00f0e0ef          	jal	8002bd7a <putchar>
    8001d570:	4529                	li	a0,10
    8001d572:	0090e0ef          	jal	8002bd7a <putchar>
    8001d576:	0003b497          	auipc	s1,0x3b
    8001d57a:	a9b4c483          	lbu	s1,-1381(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d57e:	00013597          	auipc	a1,0x13
    8001d582:	a4a58593          	addi	a1,a1,-1462 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d586:	cc91                	beqz	s1,8001d5a2 <instruction_access_fault_9+0x14a>
    8001d588:	6418                	ld	a4,8(s0)
    8001d58a:	4785                	li	a5,1
    TEST_END();
    8001d58c:	00013597          	auipc	a1,0x13
    8001d590:	a2c58593          	addi	a1,a1,-1492 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d594:	00f70763          	beq	a4,a5,8001d5a2 <instruction_access_fault_9+0x14a>
    8001d598:	4481                	li	s1,0
    TEST_END();
    8001d59a:	00013597          	auipc	a1,0x13
    8001d59e:	a2e58593          	addi	a1,a1,-1490 # 8002ffc8 <__func__.0+0x2d8>
    8001d5a2:	00013517          	auipc	a0,0x13
    8001d5a6:	ace50513          	addi	a0,a0,-1330 # 80030070 <__func__.0+0x380>
    8001d5aa:	2e30f0ef          	jal	8002d08c <printf>
    8001d5ae:	4511                	li	a0,4
    8001d5b0:	959e30ef          	jal	80000f08 <goto_priv>
    8001d5b4:	b1ee40ef          	jal	800018d2 <reset_state>
}
    8001d5b8:	60e2                	ld	ra,24(sp)
    8001d5ba:	6442                	ld	s0,16(sp)
    8001d5bc:	8526                	mv	a0,s1
    8001d5be:	64a2                	ld	s1,8(sp)
    8001d5c0:	6105                	addi	sp,sp,32
    8001d5c2:	8082                	ret

000000008001d5c4 <instruction_access_fault_10>:

bool instruction_access_fault_10(){
    8001d5c4:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d5c6:	00012597          	auipc	a1,0x12
    8001d5ca:	c1258593          	addi	a1,a1,-1006 # 8002f1d8 <__func__.0>
    8001d5ce:	00013517          	auipc	a0,0x13
    8001d5d2:	a0a50513          	addi	a0,a0,-1526 # 8002ffd8 <__func__.0+0x2e8>
bool instruction_access_fault_10(){
    8001d5d6:	ec06                	sd	ra,24(sp)
    8001d5d8:	e822                	sd	s0,16(sp)
    8001d5da:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d5dc:	2b10f0ef          	jal	8002d08c <printf>
    8001d5e0:	4529                	li	a0,10
    8001d5e2:	7980e0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8001d5e6:	4511                	li	a0,4
    8001d5e8:	921e30ef          	jal	80000f08 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d5ec:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d5f0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d5f4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d5f8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d5fc:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x90000000);
    8001d600:	47a5                	li	a5,9
    8001d602:	07f2                	slli	a5,a5,0x1c
    8001d604:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d608:	08000793          	li	a5,128
    8001d60c:	3a07a073          	csrs	pmpcfg0,a5
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));printf("pmpcfg2=%llx\n",CSRR(CSR_PMPCFG2));
    8001d610:	3a0025f3          	csrr	a1,pmpcfg0
    8001d614:	00019517          	auipc	a0,0x19
    8001d618:	fd450513          	addi	a0,a0,-44 # 800365e8 <__func__.0+0x68f8>
    8001d61c:	2710f0ef          	jal	8002d08c <printf>
    8001d620:	3a2025f3          	csrr	a1,pmpcfg2
    8001d624:	0001a517          	auipc	a0,0x1a
    8001d628:	9bc50513          	addi	a0,a0,-1604 # 80036fe0 <__func__.0+0x72f0>
    8001d62c:	2610f0ef          	jal	8002d08c <printf>
    goto_priv(PRIV_HS);
    8001d630:	450d                	li	a0,3
    8001d632:	8d7e30ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d636:	fd6e30ef          	jal	80000e0c <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x9f000000UL << 2);
    8001d63a:	09f00793          	li	a5,159
    8001d63e:	07ea                	slli	a5,a5,0x1a
    8001d640:	0003b417          	auipc	s0,0x3b
    8001d644:	9d040413          	addi	s0,s0,-1584 # 80058010 <excpt>
    8001d648:	00000297          	auipc	t0,0x0
    8001d64c:	00c28293          	addi	t0,t0,12 # 8001d654 <instruction_access_fault_10+0x90>
    8001d650:	02543c23          	sd	t0,56(s0)
    8001d654:	8782                	jr	a5

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d656:	08200593          	li	a1,130
    8001d65a:	0001a617          	auipc	a2,0x1a
    8001d65e:	99660613          	addi	a2,a2,-1642 # 80036ff0 <__func__.0+0x7300>
    8001d662:	00013517          	auipc	a0,0x13
    8001d666:	98e50513          	addi	a0,a0,-1650 # 8002fff0 <__func__.0+0x300>
    8001d66a:	2230f0ef          	jal	8002d08c <printf>
    8001d66e:	0003b797          	auipc	a5,0x3b
    8001d672:	9a37c783          	lbu	a5,-1629(a5) # 80058011 <excpt+0x1>
    8001d676:	00013597          	auipc	a1,0x13
    8001d67a:	95258593          	addi	a1,a1,-1710 # 8002ffc8 <__func__.0+0x2d8>
    8001d67e:	cf89                	beqz	a5,8001d698 <instruction_access_fault_10+0xd4>
    8001d680:	6418                	ld	a4,8(s0)
    8001d682:	4785                	li	a5,1
    8001d684:	00013597          	auipc	a1,0x13
    8001d688:	93458593          	addi	a1,a1,-1740 # 8002ffb8 <__func__.0+0x2c8>
    8001d68c:	00f70663          	beq	a4,a5,8001d698 <instruction_access_fault_10+0xd4>
    8001d690:	00013597          	auipc	a1,0x13
    8001d694:	93858593          	addi	a1,a1,-1736 # 8002ffc8 <__func__.0+0x2d8>
    8001d698:	00013517          	auipc	a0,0x13
    8001d69c:	97050513          	addi	a0,a0,-1680 # 80030008 <__func__.0+0x318>
    8001d6a0:	1ed0f0ef          	jal	8002d08c <printf>
    8001d6a4:	0003b797          	auipc	a5,0x3b
    8001d6a8:	96d7c783          	lbu	a5,-1683(a5) # 80058011 <excpt+0x1>
    8001d6ac:	c789                	beqz	a5,8001d6b6 <instruction_access_fault_10+0xf2>
    8001d6ae:	6418                	ld	a4,8(s0)
    8001d6b0:	4785                	li	a5,1
    8001d6b2:	00f70c63          	beq	a4,a5,8001d6ca <instruction_access_fault_10+0x106>
    8001d6b6:	00013517          	auipc	a0,0x13
    8001d6ba:	95a50513          	addi	a0,a0,-1702 # 80030010 <__func__.0+0x320>
    8001d6be:	1cf0f0ef          	jal	8002d08c <printf>
    8001d6c2:	02900513          	li	a0,41
    8001d6c6:	6b40e0ef          	jal	8002bd7a <putchar>
    8001d6ca:	4529                	li	a0,10
    8001d6cc:	6ae0e0ef          	jal	8002bd7a <putchar>
    8001d6d0:	0003b497          	auipc	s1,0x3b
    8001d6d4:	9414c483          	lbu	s1,-1727(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d6d8:	00013597          	auipc	a1,0x13
    8001d6dc:	8f058593          	addi	a1,a1,-1808 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d6e0:	cc91                	beqz	s1,8001d6fc <instruction_access_fault_10+0x138>
    8001d6e2:	6418                	ld	a4,8(s0)
    8001d6e4:	4785                	li	a5,1
    TEST_END();
    8001d6e6:	00013597          	auipc	a1,0x13
    8001d6ea:	8d258593          	addi	a1,a1,-1838 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d6ee:	00f70763          	beq	a4,a5,8001d6fc <instruction_access_fault_10+0x138>
    8001d6f2:	4481                	li	s1,0
    TEST_END();
    8001d6f4:	00013597          	auipc	a1,0x13
    8001d6f8:	8d458593          	addi	a1,a1,-1836 # 8002ffc8 <__func__.0+0x2d8>
    8001d6fc:	00013517          	auipc	a0,0x13
    8001d700:	97450513          	addi	a0,a0,-1676 # 80030070 <__func__.0+0x380>
    8001d704:	1890f0ef          	jal	8002d08c <printf>
    8001d708:	4511                	li	a0,4
    8001d70a:	ffee30ef          	jal	80000f08 <goto_priv>
    8001d70e:	9c4e40ef          	jal	800018d2 <reset_state>
    8001d712:	60e2                	ld	ra,24(sp)
    8001d714:	6442                	ld	s0,16(sp)
    8001d716:	8526                	mv	a0,s1
    8001d718:	64a2                	ld	s1,8(sp)
    8001d71a:	6105                	addi	sp,sp,32
    8001d71c:	8082                	ret

000000008001d71e <mstatus_csr_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool mstatus_csr_tests_1(){
    8001d71e:	1101                	addi	sp,sp,-32

TEST_START();
    8001d720:	00012597          	auipc	a1,0x12
    8001d724:	ad858593          	addi	a1,a1,-1320 # 8002f1f8 <__func__.10>
    8001d728:	00013517          	auipc	a0,0x13
    8001d72c:	8b050513          	addi	a0,a0,-1872 # 8002ffd8 <__func__.0+0x2e8>
bool mstatus_csr_tests_1(){
    8001d730:	ec06                	sd	ra,24(sp)
    8001d732:	e822                	sd	s0,16(sp)
    8001d734:	e426                	sd	s1,8(sp)
TEST_START();
    8001d736:	1570f0ef          	jal	8002d08c <printf>
    8001d73a:	4529                	li	a0,10
    8001d73c:	63e0e0ef          	jal	8002bd7a <putchar>
    printf("%d\n",x);
*/

//mstatus.SUM 阻止S对U访问，缺页异常
    
    goto_priv(PRIV_HS);
    8001d740:	450d                	li	a0,3
    8001d742:	fc6e30ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001d746:	e9be20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d74a:	a7ae30ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001d74e:	82ee30ef          	jal	8000077c <vspt_init>

    //执行load指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001d752:	4511                	li	a0,4
    8001d754:	fb4e30ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATUS, MSTATUS_SUM);
    8001d758:	000407b7          	lui	a5,0x40
    8001d75c:	3007b073          	csrc	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001d760:	eace30ef          	jal	80000e0c <test_setup_except_function>

    goto_priv(PRIV_HS);
    8001d764:	450d                	li	a0,3
    8001d766:	fa2e30ef          	jal	80000f08 <goto_priv>
    asm volatile(
    8001d76a:	000807b7          	lui	a5,0x80
    8001d76e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001d770:	07b6                	slli	a5,a5,0xd
    8001d772:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d776:	08200593          	li	a1,130
    8001d77a:	0001a617          	auipc	a2,0x1a
    8001d77e:	8d660613          	addi	a2,a2,-1834 # 80037050 <__func__.0+0x7360>
    8001d782:	00013517          	auipc	a0,0x13
    8001d786:	86e50513          	addi	a0,a0,-1938 # 8002fff0 <__func__.0+0x300>
    8001d78a:	1030f0ef          	jal	8002d08c <printf>
    8001d78e:	0003b797          	auipc	a5,0x3b
    8001d792:	8837c783          	lbu	a5,-1917(a5) # 80058011 <excpt+0x1>
    8001d796:	0003b497          	auipc	s1,0x3b
    8001d79a:	87a48493          	addi	s1,s1,-1926 # 80058010 <excpt>
    8001d79e:	00013597          	auipc	a1,0x13
    8001d7a2:	82a58593          	addi	a1,a1,-2006 # 8002ffc8 <__func__.0+0x2d8>
    8001d7a6:	cf89                	beqz	a5,8001d7c0 <mstatus_csr_tests_1+0xa2>
    8001d7a8:	6498                	ld	a4,8(s1)
    8001d7aa:	47b5                	li	a5,13
    8001d7ac:	00013597          	auipc	a1,0x13
    8001d7b0:	80c58593          	addi	a1,a1,-2036 # 8002ffb8 <__func__.0+0x2c8>
    8001d7b4:	00f70663          	beq	a4,a5,8001d7c0 <mstatus_csr_tests_1+0xa2>
    8001d7b8:	00013597          	auipc	a1,0x13
    8001d7bc:	81058593          	addi	a1,a1,-2032 # 8002ffc8 <__func__.0+0x2d8>
    8001d7c0:	00013517          	auipc	a0,0x13
    8001d7c4:	84850513          	addi	a0,a0,-1976 # 80030008 <__func__.0+0x318>
    8001d7c8:	0c50f0ef          	jal	8002d08c <printf>
    8001d7cc:	0003b797          	auipc	a5,0x3b
    8001d7d0:	8457c783          	lbu	a5,-1979(a5) # 80058011 <excpt+0x1>
    8001d7d4:	c789                	beqz	a5,8001d7de <mstatus_csr_tests_1+0xc0>
    8001d7d6:	6498                	ld	a4,8(s1)
    8001d7d8:	47b5                	li	a5,13
    8001d7da:	00f70c63          	beq	a4,a5,8001d7f2 <mstatus_csr_tests_1+0xd4>
    8001d7de:	00013517          	auipc	a0,0x13
    8001d7e2:	83250513          	addi	a0,a0,-1998 # 80030010 <__func__.0+0x320>
    8001d7e6:	0a70f0ef          	jal	8002d08c <printf>
    8001d7ea:	02900513          	li	a0,41
    8001d7ee:	58c0e0ef          	jal	8002bd7a <putchar>
    8001d7f2:	4529                	li	a0,10
    8001d7f4:	5860e0ef          	jal	8002bd7a <putchar>
    8001d7f8:	0003b417          	auipc	s0,0x3b
    8001d7fc:	81944403          	lbu	s0,-2023(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001d800:	00012597          	auipc	a1,0x12
    8001d804:	7c858593          	addi	a1,a1,1992 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d808:	cc11                	beqz	s0,8001d824 <mstatus_csr_tests_1+0x106>
    8001d80a:	6498                	ld	a4,8(s1)
    8001d80c:	47b5                	li	a5,13
    TEST_END();
    8001d80e:	00012597          	auipc	a1,0x12
    8001d812:	7aa58593          	addi	a1,a1,1962 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d816:	00f70763          	beq	a4,a5,8001d824 <mstatus_csr_tests_1+0x106>
    8001d81a:	4401                	li	s0,0
    TEST_END();
    8001d81c:	00012597          	auipc	a1,0x12
    8001d820:	7ac58593          	addi	a1,a1,1964 # 8002ffc8 <__func__.0+0x2d8>
    8001d824:	00013517          	auipc	a0,0x13
    8001d828:	84c50513          	addi	a0,a0,-1972 # 80030070 <__func__.0+0x380>
    8001d82c:	0610f0ef          	jal	8002d08c <printf>
    8001d830:	4511                	li	a0,4
    8001d832:	ed6e30ef          	jal	80000f08 <goto_priv>
    8001d836:	89ce40ef          	jal	800018d2 <reset_state>
}
    8001d83a:	60e2                	ld	ra,24(sp)
    8001d83c:	8522                	mv	a0,s0
    8001d83e:	6442                	ld	s0,16(sp)
    8001d840:	64a2                	ld	s1,8(sp)
    8001d842:	6105                	addi	sp,sp,32
    8001d844:	8082                	ret

000000008001d846 <mstatus_csr_tests_2>:

bool mstatus_csr_tests_2(){
    8001d846:	1141                	addi	sp,sp,-16

    TEST_START();
    8001d848:	00012597          	auipc	a1,0x12
    8001d84c:	9c858593          	addi	a1,a1,-1592 # 8002f210 <__func__.8>
    8001d850:	00012517          	auipc	a0,0x12
    8001d854:	78850513          	addi	a0,a0,1928 # 8002ffd8 <__func__.0+0x2e8>
bool mstatus_csr_tests_2(){
    8001d858:	e406                	sd	ra,8(sp)
    8001d85a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001d85c:	0310f0ef          	jal	8002d08c <printf>
    8001d860:	4529                	li	a0,10
    8001d862:	5180e0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    8001d866:	450d                	li	a0,3
    8001d868:	ea0e30ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001d86c:	d75e20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d870:	954e30ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001d874:	f09e20ef          	jal	8000077c <vspt_init>

    //执行load指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001d878:	4511                	li	a0,4
    8001d87a:	e8ee30ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_SUM);
    8001d87e:	000407b7          	lui	a5,0x40
    8001d882:	3007a073          	csrs	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001d886:	d86e30ef          	jal	80000e0c <test_setup_except_function>

    goto_priv(PRIV_HS);
    8001d88a:	450d                	li	a0,3
    8001d88c:	e7ce30ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001d890:	4509                	li	a0,2
    8001d892:	d96e30ef          	jal	80000e28 <set_prev_priv>
    8001d896:	000807b7          	lui	a5,0x80
    8001d89a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001d89c:	07b6                	slli	a5,a5,0xd
    8001d89e:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
        printf("%d\n",excpt.triggered);
    8001d8a2:	0003a597          	auipc	a1,0x3a
    8001d8a6:	76f5c583          	lbu	a1,1903(a1) # 80058011 <excpt+0x1>
    8001d8aa:	00013517          	auipc	a0,0x13
    8001d8ae:	2a650513          	addi	a0,a0,678 # 80030b50 <__func__.0+0xe60>
    8001d8b2:	7da0f0ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.cause);
    8001d8b6:	0003a597          	auipc	a1,0x3a
    8001d8ba:	7625b583          	ld	a1,1890(a1) # 80058018 <excpt+0x8>
    8001d8be:	00013517          	auipc	a0,0x13
    8001d8c2:	29250513          	addi	a0,a0,658 # 80030b50 <__func__.0+0xe60>
    8001d8c6:	7c60f0ef          	jal	8002d08c <printf>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d8ca:	08200593          	li	a1,130
    8001d8ce:	00019617          	auipc	a2,0x19
    8001d8d2:	7ba60613          	addi	a2,a2,1978 # 80037088 <__func__.0+0x7398>
    8001d8d6:	00012517          	auipc	a0,0x12
    8001d8da:	71a50513          	addi	a0,a0,1818 # 8002fff0 <__func__.0+0x300>
    8001d8de:	7ae0f0ef          	jal	8002d08c <printf>
    8001d8e2:	0003a797          	auipc	a5,0x3a
    8001d8e6:	72f7c783          	lbu	a5,1839(a5) # 80058011 <excpt+0x1>
    8001d8ea:	00012597          	auipc	a1,0x12
    8001d8ee:	6ce58593          	addi	a1,a1,1742 # 8002ffb8 <__func__.0+0x2c8>
    8001d8f2:	c789                	beqz	a5,8001d8fc <mstatus_csr_tests_2+0xb6>
    8001d8f4:	00012597          	auipc	a1,0x12
    8001d8f8:	6d458593          	addi	a1,a1,1748 # 8002ffc8 <__func__.0+0x2d8>
    8001d8fc:	00012517          	auipc	a0,0x12
    8001d900:	70c50513          	addi	a0,a0,1804 # 80030008 <__func__.0+0x318>
    8001d904:	7880f0ef          	jal	8002d08c <printf>
    8001d908:	0003a797          	auipc	a5,0x3a
    8001d90c:	7097c783          	lbu	a5,1801(a5) # 80058011 <excpt+0x1>
    8001d910:	e7a1                	bnez	a5,8001d958 <mstatus_csr_tests_2+0x112>
    8001d912:	4529                	li	a0,10
    8001d914:	4660e0ef          	jal	8002bd7a <putchar>
    8001d918:	0003a797          	auipc	a5,0x3a
    8001d91c:	6f97c783          	lbu	a5,1785(a5) # 80058011 <excpt+0x1>
    8001d920:	e795                	bnez	a5,8001d94c <mstatus_csr_tests_2+0x106>
    8001d922:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001d924:	00012597          	auipc	a1,0x12
    8001d928:	69458593          	addi	a1,a1,1684 # 8002ffb8 <__func__.0+0x2c8>
    8001d92c:	00012517          	auipc	a0,0x12
    8001d930:	74450513          	addi	a0,a0,1860 # 80030070 <__func__.0+0x380>
    8001d934:	7580f0ef          	jal	8002d08c <printf>
    8001d938:	4511                	li	a0,4
    8001d93a:	dcee30ef          	jal	80000f08 <goto_priv>
    8001d93e:	f95e30ef          	jal	800018d2 <reset_state>
}
    8001d942:	60a2                	ld	ra,8(sp)
    8001d944:	8522                	mv	a0,s0
    8001d946:	6402                	ld	s0,0(sp)
    8001d948:	0141                	addi	sp,sp,16
    8001d94a:	8082                	ret
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d94c:	4401                	li	s0,0
    TEST_END();
    8001d94e:	00012597          	auipc	a1,0x12
    8001d952:	67a58593          	addi	a1,a1,1658 # 8002ffc8 <__func__.0+0x2d8>
    8001d956:	bfd9                	j	8001d92c <mstatus_csr_tests_2+0xe6>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d958:	00012517          	auipc	a0,0x12
    8001d95c:	6b850513          	addi	a0,a0,1720 # 80030010 <__func__.0+0x320>
    8001d960:	72c0f0ef          	jal	8002d08c <printf>
    8001d964:	02900513          	li	a0,41
    8001d968:	4120e0ef          	jal	8002bd7a <putchar>
    8001d96c:	b75d                	j	8001d912 <mstatus_csr_tests_2+0xcc>

000000008001d96e <mstatus_csr_tests_3>:

bool mstatus_csr_tests_3(){
    8001d96e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d970:	00012597          	auipc	a1,0x12
    8001d974:	8b858593          	addi	a1,a1,-1864 # 8002f228 <__func__.7>
    8001d978:	00012517          	auipc	a0,0x12
    8001d97c:	66050513          	addi	a0,a0,1632 # 8002ffd8 <__func__.0+0x2e8>
bool mstatus_csr_tests_3(){
    8001d980:	ec06                	sd	ra,24(sp)
    8001d982:	e822                	sd	s0,16(sp)
    8001d984:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d986:	7060f0ef          	jal	8002d08c <printf>
    8001d98a:	4529                	li	a0,10
    8001d98c:	3ee0e0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    8001d990:	450d                	li	a0,3
    8001d992:	d76e30ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001d996:	c4be20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d99a:	82ae30ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001d99e:	ddfe20ef          	jal	8000077c <vspt_init>
    //执行load指令时，设置了mstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    goto_priv(PRIV_M);
    8001d9a2:	4511                	li	a0,4
    8001d9a4:	d64e30ef          	jal	80000f08 <goto_priv>

    uintptr_t addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_MSTATUS, MSTATUS_MXR);
    8001d9a8:	000807b7          	lui	a5,0x80
    8001d9ac:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    8001d9b0:	450d                	li	a0,3
    8001d9b2:	d56e30ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001d9b6:	4509                	li	a0,2
    8001d9b8:	c70e30ef          	jal	80000e28 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001d9bc:	c50e30ef          	jal	80000e0c <test_setup_except_function>
    8001d9c0:	001007b7          	lui	a5,0x100
    8001d9c4:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001d9c8:	07b2                	slli	a5,a5,0xc
    8001d9ca:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    printf("%d\n",excpt.triggered);
    8001d9ce:	0003a597          	auipc	a1,0x3a
    8001d9d2:	6435c583          	lbu	a1,1603(a1) # 80058011 <excpt+0x1>
    8001d9d6:	00013517          	auipc	a0,0x13
    8001d9da:	17a50513          	addi	a0,a0,378 # 80030b50 <__func__.0+0xe60>
    8001d9de:	0003a417          	auipc	s0,0x3a
    8001d9e2:	63240413          	addi	s0,s0,1586 # 80058010 <excpt>
    8001d9e6:	6a60f0ef          	jal	8002d08c <printf>
    printf("%d\n",excpt.cause);
    8001d9ea:	640c                	ld	a1,8(s0)
    8001d9ec:	00013517          	auipc	a0,0x13
    8001d9f0:	16450513          	addi	a0,a0,356 # 80030b50 <__func__.0+0xe60>
    8001d9f4:	6980f0ef          	jal	8002d08c <printf>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001d9f8:	08200593          	li	a1,130
    8001d9fc:	00019617          	auipc	a2,0x19
    8001da00:	6c460613          	addi	a2,a2,1732 # 800370c0 <__func__.0+0x73d0>
    8001da04:	00012517          	auipc	a0,0x12
    8001da08:	5ec50513          	addi	a0,a0,1516 # 8002fff0 <__func__.0+0x300>
    8001da0c:	6800f0ef          	jal	8002d08c <printf>
    8001da10:	0003a797          	auipc	a5,0x3a
    8001da14:	6017c783          	lbu	a5,1537(a5) # 80058011 <excpt+0x1>
    8001da18:	00012597          	auipc	a1,0x12
    8001da1c:	5b058593          	addi	a1,a1,1456 # 8002ffc8 <__func__.0+0x2d8>
    8001da20:	cf89                	beqz	a5,8001da3a <mstatus_csr_tests_3+0xcc>
    8001da22:	6418                	ld	a4,8(s0)
    8001da24:	47b5                	li	a5,13
    8001da26:	00012597          	auipc	a1,0x12
    8001da2a:	59258593          	addi	a1,a1,1426 # 8002ffb8 <__func__.0+0x2c8>
    8001da2e:	00f70663          	beq	a4,a5,8001da3a <mstatus_csr_tests_3+0xcc>
    8001da32:	00012597          	auipc	a1,0x12
    8001da36:	59658593          	addi	a1,a1,1430 # 8002ffc8 <__func__.0+0x2d8>
    8001da3a:	00012517          	auipc	a0,0x12
    8001da3e:	5ce50513          	addi	a0,a0,1486 # 80030008 <__func__.0+0x318>
    8001da42:	64a0f0ef          	jal	8002d08c <printf>
    8001da46:	0003a797          	auipc	a5,0x3a
    8001da4a:	5cb7c783          	lbu	a5,1483(a5) # 80058011 <excpt+0x1>
    8001da4e:	c789                	beqz	a5,8001da58 <mstatus_csr_tests_3+0xea>
    8001da50:	6418                	ld	a4,8(s0)
    8001da52:	47b5                	li	a5,13
    8001da54:	00f70c63          	beq	a4,a5,8001da6c <mstatus_csr_tests_3+0xfe>
    8001da58:	00012517          	auipc	a0,0x12
    8001da5c:	5b850513          	addi	a0,a0,1464 # 80030010 <__func__.0+0x320>
    8001da60:	62c0f0ef          	jal	8002d08c <printf>
    8001da64:	02900513          	li	a0,41
    8001da68:	3120e0ef          	jal	8002bd7a <putchar>
    8001da6c:	4529                	li	a0,10
    8001da6e:	30c0e0ef          	jal	8002bd7a <putchar>
    8001da72:	0003a497          	auipc	s1,0x3a
    8001da76:	59f4c483          	lbu	s1,1439(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );


    TEST_END();
    8001da7a:	00012597          	auipc	a1,0x12
    8001da7e:	54e58593          	addi	a1,a1,1358 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001da82:	cc91                	beqz	s1,8001da9e <mstatus_csr_tests_3+0x130>
    8001da84:	6418                	ld	a4,8(s0)
    8001da86:	47b5                	li	a5,13
    TEST_END();
    8001da88:	00012597          	auipc	a1,0x12
    8001da8c:	53058593          	addi	a1,a1,1328 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001da90:	00f70763          	beq	a4,a5,8001da9e <mstatus_csr_tests_3+0x130>
    8001da94:	4481                	li	s1,0
    TEST_END();
    8001da96:	00012597          	auipc	a1,0x12
    8001da9a:	53258593          	addi	a1,a1,1330 # 8002ffc8 <__func__.0+0x2d8>
    8001da9e:	00012517          	auipc	a0,0x12
    8001daa2:	5d250513          	addi	a0,a0,1490 # 80030070 <__func__.0+0x380>
    8001daa6:	5e60f0ef          	jal	8002d08c <printf>
    8001daaa:	4511                	li	a0,4
    8001daac:	c5ce30ef          	jal	80000f08 <goto_priv>
    8001dab0:	e23e30ef          	jal	800018d2 <reset_state>
}
    8001dab4:	60e2                	ld	ra,24(sp)
    8001dab6:	6442                	ld	s0,16(sp)
    8001dab8:	8526                	mv	a0,s1
    8001daba:	64a2                	ld	s1,8(sp)
    8001dabc:	6105                	addi	sp,sp,32
    8001dabe:	8082                	ret

000000008001dac0 <mstatus_csr_tests_4>:

bool mstatus_csr_tests_4(){
    8001dac0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001dac2:	00011597          	auipc	a1,0x11
    8001dac6:	77e58593          	addi	a1,a1,1918 # 8002f240 <__func__.6>
    8001daca:	00012517          	auipc	a0,0x12
    8001dace:	50e50513          	addi	a0,a0,1294 # 8002ffd8 <__func__.0+0x2e8>
bool mstatus_csr_tests_4(){
    8001dad2:	ec06                	sd	ra,24(sp)
    8001dad4:	e822                	sd	s0,16(sp)
    8001dad6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001dad8:	5b40f0ef          	jal	8002d08c <printf>
    8001dadc:	4529                	li	a0,10
    8001dade:	29c0e0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_HS);
    8001dae2:	450d                	li	a0,3
    8001dae4:	c24e30ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8001dae8:	af9e20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001daec:	ed9e20ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8001daf0:	c8de20ef          	jal	8000077c <vspt_init>
    //执行load指令时，设置了mstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    uintptr_t addr = hs_page_base(VSV_GV);

    goto_priv(PRIV_M);
    8001daf4:	4511                	li	a0,4
    8001daf6:	c12e30ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MXR);
    8001dafa:	000807b7          	lui	a5,0x80
    8001dafe:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8001db02:	450d                	li	a0,3
    8001db04:	c04e30ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001db08:	4509                	li	a0,2
    8001db0a:	b1ee30ef          	jal	80000e28 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001db0e:	afee30ef          	jal	80000e0c <test_setup_except_function>
    8001db12:	001007b7          	lui	a5,0x100
    8001db16:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001db18:	07b2                	slli	a5,a5,0xc
    8001db1a:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001db1e:	08200593          	li	a1,130
    8001db22:	00019617          	auipc	a2,0x19
    8001db26:	5d660613          	addi	a2,a2,1494 # 800370f8 <__func__.0+0x7408>
    8001db2a:	00012517          	auipc	a0,0x12
    8001db2e:	4c650513          	addi	a0,a0,1222 # 8002fff0 <__func__.0+0x300>
    8001db32:	55a0f0ef          	jal	8002d08c <printf>
    8001db36:	0003a797          	auipc	a5,0x3a
    8001db3a:	4db7c783          	lbu	a5,1243(a5) # 80058011 <excpt+0x1>
    8001db3e:	0003a497          	auipc	s1,0x3a
    8001db42:	4d248493          	addi	s1,s1,1234 # 80058010 <excpt>
    8001db46:	00012597          	auipc	a1,0x12
    8001db4a:	48258593          	addi	a1,a1,1154 # 8002ffc8 <__func__.0+0x2d8>
    8001db4e:	cf89                	beqz	a5,8001db68 <mstatus_csr_tests_4+0xa8>
    8001db50:	6498                	ld	a4,8(s1)
    8001db52:	47b5                	li	a5,13
    8001db54:	00012597          	auipc	a1,0x12
    8001db58:	46458593          	addi	a1,a1,1124 # 8002ffb8 <__func__.0+0x2c8>
    8001db5c:	00f70663          	beq	a4,a5,8001db68 <mstatus_csr_tests_4+0xa8>
    8001db60:	00012597          	auipc	a1,0x12
    8001db64:	46858593          	addi	a1,a1,1128 # 8002ffc8 <__func__.0+0x2d8>
    8001db68:	00012517          	auipc	a0,0x12
    8001db6c:	4a050513          	addi	a0,a0,1184 # 80030008 <__func__.0+0x318>
    8001db70:	51c0f0ef          	jal	8002d08c <printf>
    8001db74:	0003a797          	auipc	a5,0x3a
    8001db78:	49d7c783          	lbu	a5,1181(a5) # 80058011 <excpt+0x1>
    8001db7c:	c789                	beqz	a5,8001db86 <mstatus_csr_tests_4+0xc6>
    8001db7e:	6498                	ld	a4,8(s1)
    8001db80:	47b5                	li	a5,13
    8001db82:	00f70c63          	beq	a4,a5,8001db9a <mstatus_csr_tests_4+0xda>
    8001db86:	00012517          	auipc	a0,0x12
    8001db8a:	48a50513          	addi	a0,a0,1162 # 80030010 <__func__.0+0x320>
    8001db8e:	4fe0f0ef          	jal	8002d08c <printf>
    8001db92:	02900513          	li	a0,41
    8001db96:	1e40e0ef          	jal	8002bd7a <putchar>
    8001db9a:	4529                	li	a0,10
    8001db9c:	1de0e0ef          	jal	8002bd7a <putchar>
    8001dba0:	0003a417          	auipc	s0,0x3a
    8001dba4:	47144403          	lbu	s0,1137(s0) # 80058011 <excpt+0x1>
    8001dba8:	c409                	beqz	s0,8001dbb2 <mstatus_csr_tests_4+0xf2>
    8001dbaa:	6498                	ld	a4,8(s1)
    8001dbac:	47b5                	li	a5,13
    8001dbae:	02f70c63          	beq	a4,a5,8001dbe6 <mstatus_csr_tests_4+0x126>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001dbb2:	000807b7          	lui	a5,0x80
    8001dbb6:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001dbba:	4401                	li	s0,0


TEST_END();
    8001dbbc:	00012597          	auipc	a1,0x12
    8001dbc0:	40c58593          	addi	a1,a1,1036 # 8002ffc8 <__func__.0+0x2d8>
    8001dbc4:	00012517          	auipc	a0,0x12
    8001dbc8:	4ac50513          	addi	a0,a0,1196 # 80030070 <__func__.0+0x380>
    8001dbcc:	4c00f0ef          	jal	8002d08c <printf>
    8001dbd0:	4511                	li	a0,4
    8001dbd2:	b36e30ef          	jal	80000f08 <goto_priv>
    8001dbd6:	cfde30ef          	jal	800018d2 <reset_state>

}
    8001dbda:	60e2                	ld	ra,24(sp)
    8001dbdc:	8522                	mv	a0,s0
    8001dbde:	6442                	ld	s0,16(sp)
    8001dbe0:	64a2                	ld	s1,8(sp)
    8001dbe2:	6105                	addi	sp,sp,32
    8001dbe4:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001dbe6:	000807b7          	lui	a5,0x80
    8001dbea:	1007b073          	csrc	sstatus,a5
TEST_END();
    8001dbee:	00012597          	auipc	a1,0x12
    8001dbf2:	3ca58593          	addi	a1,a1,970 # 8002ffb8 <__func__.0+0x2c8>
    8001dbf6:	b7f9                	j	8001dbc4 <mstatus_csr_tests_4+0x104>

000000008001dbf8 <mstatus_csr_tests_5>:

bool mstatus_csr_tests_5(){
    8001dbf8:	1101                	addi	sp,sp,-32

    TEST_START();
    8001dbfa:	00011597          	auipc	a1,0x11
    8001dbfe:	65e58593          	addi	a1,a1,1630 # 8002f258 <__func__.5>
    8001dc02:	00012517          	auipc	a0,0x12
    8001dc06:	3d650513          	addi	a0,a0,982 # 8002ffd8 <__func__.0+0x2e8>
bool mstatus_csr_tests_5(){
    8001dc0a:	ec06                	sd	ra,24(sp)
    8001dc0c:	e822                	sd	s0,16(sp)
    8001dc0e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001dc10:	47c0f0ef          	jal	8002d08c <printf>
    8001dc14:	4529                	li	a0,10
    8001dc16:	1640e0ef          	jal	8002bd7a <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001dc1a:	9f2e30ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dc1e:	4511                	li	a0,4
    8001dc20:	ae8e30ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8001dc24:	004007b7          	lui	a5,0x400
    8001dc28:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001dc2c:	450d                	li	a0,3
    8001dc2e:	adae30ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VU);
    8001dc32:	4501                	li	a0,0
    8001dc34:	9f4e30ef          	jal	80000e28 <set_prev_priv>

    TEST_EXEC_SRET();
    8001dc38:	00000297          	auipc	t0,0x0
    8001dc3c:	01028293          	addi	t0,t0,16 # 8001dc48 <mstatus_csr_tests_5+0x50>
    8001dc40:	14129073          	csrw	sepc,t0
    8001dc44:	10200073          	sret

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001dc48:	08200593          	li	a1,130
    8001dc4c:	00016617          	auipc	a2,0x16
    8001dc50:	b5460613          	addi	a2,a2,-1196 # 800337a0 <__func__.0+0x3ab0>
    8001dc54:	00012517          	auipc	a0,0x12
    8001dc58:	39c50513          	addi	a0,a0,924 # 8002fff0 <__func__.0+0x300>
    8001dc5c:	4300f0ef          	jal	8002d08c <printf>
    8001dc60:	0003a797          	auipc	a5,0x3a
    8001dc64:	3b17c783          	lbu	a5,945(a5) # 80058011 <excpt+0x1>
    8001dc68:	0003a497          	auipc	s1,0x3a
    8001dc6c:	3a848493          	addi	s1,s1,936 # 80058010 <excpt>
    8001dc70:	00012597          	auipc	a1,0x12
    8001dc74:	35858593          	addi	a1,a1,856 # 8002ffc8 <__func__.0+0x2d8>
    8001dc78:	cf89                	beqz	a5,8001dc92 <mstatus_csr_tests_5+0x9a>
    8001dc7a:	6498                	ld	a4,8(s1)
    8001dc7c:	4789                	li	a5,2
    8001dc7e:	00012597          	auipc	a1,0x12
    8001dc82:	33a58593          	addi	a1,a1,826 # 8002ffb8 <__func__.0+0x2c8>
    8001dc86:	00f70663          	beq	a4,a5,8001dc92 <mstatus_csr_tests_5+0x9a>
    8001dc8a:	00012597          	auipc	a1,0x12
    8001dc8e:	33e58593          	addi	a1,a1,830 # 8002ffc8 <__func__.0+0x2d8>
    8001dc92:	00012517          	auipc	a0,0x12
    8001dc96:	37650513          	addi	a0,a0,886 # 80030008 <__func__.0+0x318>
    8001dc9a:	3f20f0ef          	jal	8002d08c <printf>
    8001dc9e:	0003a797          	auipc	a5,0x3a
    8001dca2:	3737c783          	lbu	a5,883(a5) # 80058011 <excpt+0x1>
    8001dca6:	c789                	beqz	a5,8001dcb0 <mstatus_csr_tests_5+0xb8>
    8001dca8:	6498                	ld	a4,8(s1)
    8001dcaa:	4789                	li	a5,2
    8001dcac:	00f70c63          	beq	a4,a5,8001dcc4 <mstatus_csr_tests_5+0xcc>
    8001dcb0:	00012517          	auipc	a0,0x12
    8001dcb4:	36050513          	addi	a0,a0,864 # 80030010 <__func__.0+0x320>
    8001dcb8:	3d40f0ef          	jal	8002d08c <printf>
    8001dcbc:	02900513          	li	a0,41
    8001dcc0:	0ba0e0ef          	jal	8002bd7a <putchar>
    8001dcc4:	4529                	li	a0,10
    8001dcc6:	0b40e0ef          	jal	8002bd7a <putchar>
    8001dcca:	0003a417          	auipc	s0,0x3a
    8001dcce:	34744403          	lbu	s0,839(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001dcd2:	00012597          	auipc	a1,0x12
    8001dcd6:	2f658593          	addi	a1,a1,758 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001dcda:	cc11                	beqz	s0,8001dcf6 <mstatus_csr_tests_5+0xfe>
    8001dcdc:	6498                	ld	a4,8(s1)
    8001dcde:	4789                	li	a5,2
    TEST_END();
    8001dce0:	00012597          	auipc	a1,0x12
    8001dce4:	2d858593          	addi	a1,a1,728 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001dce8:	00f70763          	beq	a4,a5,8001dcf6 <mstatus_csr_tests_5+0xfe>
    8001dcec:	4401                	li	s0,0
    TEST_END();
    8001dcee:	00012597          	auipc	a1,0x12
    8001dcf2:	2da58593          	addi	a1,a1,730 # 8002ffc8 <__func__.0+0x2d8>
    8001dcf6:	00012517          	auipc	a0,0x12
    8001dcfa:	37a50513          	addi	a0,a0,890 # 80030070 <__func__.0+0x380>
    8001dcfe:	38e0f0ef          	jal	8002d08c <printf>
    8001dd02:	4511                	li	a0,4
    8001dd04:	a04e30ef          	jal	80000f08 <goto_priv>
    8001dd08:	bcbe30ef          	jal	800018d2 <reset_state>

}
    8001dd0c:	60e2                	ld	ra,24(sp)
    8001dd0e:	8522                	mv	a0,s0
    8001dd10:	6442                	ld	s0,16(sp)
    8001dd12:	64a2                	ld	s1,8(sp)
    8001dd14:	6105                	addi	sp,sp,32
    8001dd16:	8082                	ret

000000008001dd18 <hedeleg_csr_tests_1>:

bool hedeleg_csr_tests_1(){
    8001dd18:	1141                	addi	sp,sp,-16

    TEST_START();
    8001dd1a:	00011597          	auipc	a1,0x11
    8001dd1e:	55658593          	addi	a1,a1,1366 # 8002f270 <__func__.4>
    8001dd22:	00012517          	auipc	a0,0x12
    8001dd26:	2b650513          	addi	a0,a0,694 # 8002ffd8 <__func__.0+0x2e8>
bool hedeleg_csr_tests_1(){
    8001dd2a:	e406                	sd	ra,8(sp)
    8001dd2c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001dd2e:	35e0f0ef          	jal	8002d08c <printf>
    8001dd32:	4529                	li	a0,10
    8001dd34:	0460e0ef          	jal	8002bd7a <putchar>
    TEST_SETUP_EXCEPT();
    8001dd38:	8d4e30ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dd3c:	4511                	li	a0,4
    8001dd3e:	9cae30ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_HEDELEG, (uint64_t)-1);
    8001dd42:	57fd                	li	a5,-1
    8001dd44:	60279073          	csrw	hedeleg,a5
    printf("%llx\n",CSRR(CSR_HEDELEG));
    8001dd48:	602025f3          	csrr	a1,hedeleg
    8001dd4c:	00019517          	auipc	a0,0x19
    8001dd50:	8a450513          	addi	a0,a0,-1884 # 800365f0 <__func__.0+0x6900>
    8001dd54:	3380f0ef          	jal	8002d08c <printf>

    TEST_ASSERT("hedeleg right",
    8001dd58:	00019617          	auipc	a2,0x19
    8001dd5c:	3e860613          	addi	a2,a2,1000 # 80037140 <__func__.0+0x7450>
    8001dd60:	08200593          	li	a1,130
    8001dd64:	00012517          	auipc	a0,0x12
    8001dd68:	28c50513          	addi	a0,a0,652 # 8002fff0 <__func__.0+0x300>
    8001dd6c:	3200f0ef          	jal	8002d08c <printf>
    8001dd70:	60202773          	csrr	a4,hedeleg
    8001dd74:	67ad                	lui	a5,0xb
    8001dd76:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dd7a:	00012597          	auipc	a1,0x12
    8001dd7e:	23e58593          	addi	a1,a1,574 # 8002ffb8 <__func__.0+0x2c8>
    8001dd82:	00f70663          	beq	a4,a5,8001dd8e <hedeleg_csr_tests_1+0x76>
    8001dd86:	00012597          	auipc	a1,0x12
    8001dd8a:	24258593          	addi	a1,a1,578 # 8002ffc8 <__func__.0+0x2d8>
    8001dd8e:	00012517          	auipc	a0,0x12
    8001dd92:	27a50513          	addi	a0,a0,634 # 80030008 <__func__.0+0x318>
    8001dd96:	2f60f0ef          	jal	8002d08c <printf>
    8001dd9a:	60202773          	csrr	a4,hedeleg
    8001dd9e:	67ad                	lui	a5,0xb
    8001dda0:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dda4:	00f70c63          	beq	a4,a5,8001ddbc <hedeleg_csr_tests_1+0xa4>
    8001dda8:	00012517          	auipc	a0,0x12
    8001ddac:	26850513          	addi	a0,a0,616 # 80030010 <__func__.0+0x320>
    8001ddb0:	2dc0f0ef          	jal	8002d08c <printf>
    8001ddb4:	02900513          	li	a0,41
    8001ddb8:	7c30d0ef          	jal	8002bd7a <putchar>
    8001ddbc:	4529                	li	a0,10
    8001ddbe:	7bd0d0ef          	jal	8002bd7a <putchar>
    8001ddc2:	60202773          	csrr	a4,hedeleg
    8001ddc6:	67ad                	lui	a5,0xb
    8001ddc8:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001ddcc:	02f70763          	beq	a4,a5,8001ddfa <hedeleg_csr_tests_1+0xe2>
    8001ddd0:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001ddd2:	00012597          	auipc	a1,0x12
    8001ddd6:	1f658593          	addi	a1,a1,502 # 8002ffc8 <__func__.0+0x2d8>
    8001ddda:	00012517          	auipc	a0,0x12
    8001ddde:	29650513          	addi	a0,a0,662 # 80030070 <__func__.0+0x380>
    8001dde2:	2aa0f0ef          	jal	8002d08c <printf>
    8001dde6:	4511                	li	a0,4
    8001dde8:	920e30ef          	jal	80000f08 <goto_priv>
    8001ddec:	ae7e30ef          	jal	800018d2 <reset_state>

}
    8001ddf0:	60a2                	ld	ra,8(sp)
    8001ddf2:	8522                	mv	a0,s0
    8001ddf4:	6402                	ld	s0,0(sp)
    8001ddf6:	0141                	addi	sp,sp,16
    8001ddf8:	8082                	ret
    TEST_ASSERT("hedeleg right",
    8001ddfa:	4405                	li	s0,1
    TEST_END();
    8001ddfc:	00012597          	auipc	a1,0x12
    8001de00:	1bc58593          	addi	a1,a1,444 # 8002ffb8 <__func__.0+0x2c8>
    8001de04:	bfd9                	j	8001ddda <hedeleg_csr_tests_1+0xc2>

000000008001de06 <mhpmevent_csr_tests_1>:

bool mhpmevent_csr_tests_1(){
    8001de06:	1141                	addi	sp,sp,-16

    TEST_START();
    8001de08:	00011597          	auipc	a1,0x11
    8001de0c:	48058593          	addi	a1,a1,1152 # 8002f288 <__func__.3>
    8001de10:	00012517          	auipc	a0,0x12
    8001de14:	1c850513          	addi	a0,a0,456 # 8002ffd8 <__func__.0+0x2e8>
bool mhpmevent_csr_tests_1(){
    8001de18:	e406                	sd	ra,8(sp)
    TEST_START();
    8001de1a:	2720f0ef          	jal	8002d08c <printf>
    8001de1e:	4529                	li	a0,10
    8001de20:	75b0d0ef          	jal	8002bd7a <putchar>
    TEST_SETUP_EXCEPT();
    8001de24:	fe9e20ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001de28:	4511                	li	a0,4
    8001de2a:	8dee30ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MHPMEVENT3, (uint64_t)-1);
    8001de2e:	57fd                	li	a5,-1
    8001de30:	32379073          	csrw	mhpmevent3,a5
    printf("%llx\n",CSRR(CSR_MHPMEVENT3));
    8001de34:	323025f3          	csrr	a1,mhpmevent3
    8001de38:	00018517          	auipc	a0,0x18
    8001de3c:	7b850513          	addi	a0,a0,1976 # 800365f0 <__func__.0+0x6900>
    8001de40:	24c0f0ef          	jal	8002d08c <printf>

    TEST_END();
    8001de44:	00012597          	auipc	a1,0x12
    8001de48:	17458593          	addi	a1,a1,372 # 8002ffb8 <__func__.0+0x2c8>
    8001de4c:	00012517          	auipc	a0,0x12
    8001de50:	22450513          	addi	a0,a0,548 # 80030070 <__func__.0+0x380>
    8001de54:	2380f0ef          	jal	8002d08c <printf>
    8001de58:	4511                	li	a0,4
    8001de5a:	8aee30ef          	jal	80000f08 <goto_priv>
    8001de5e:	a75e30ef          	jal	800018d2 <reset_state>

}
    8001de62:	60a2                	ld	ra,8(sp)
    8001de64:	4505                	li	a0,1
    8001de66:	0141                	addi	sp,sp,16
    8001de68:	8082                	ret

000000008001de6a <tselect_csr_tests_1>:

bool tselect_csr_tests_1(){
    8001de6a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001de6c:	00011597          	auipc	a1,0x11
    8001de70:	43458593          	addi	a1,a1,1076 # 8002f2a0 <__func__.2>
    8001de74:	00012517          	auipc	a0,0x12
    8001de78:	16450513          	addi	a0,a0,356 # 8002ffd8 <__func__.0+0x2e8>
bool tselect_csr_tests_1(){
    8001de7c:	e406                	sd	ra,8(sp)
    8001de7e:	e022                	sd	s0,0(sp)
    TEST_START();
    8001de80:	20c0f0ef          	jal	8002d08c <printf>
    8001de84:	4529                	li	a0,10
    8001de86:	6f50d0ef          	jal	8002bd7a <putchar>
    TEST_SETUP_EXCEPT();
    8001de8a:	f83e20ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_M);
    8001de8e:	4511                	li	a0,4
    8001de90:	878e30ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_TSELECT, (uint64_t)-1);
    8001de94:	57fd                	li	a5,-1
    8001de96:	7a079073          	csrw	tselect,a5
    printf("%llx\n",CSRR(CSR_TSELECT));
    8001de9a:	7a0025f3          	csrr	a1,tselect
    8001de9e:	00018517          	auipc	a0,0x18
    8001dea2:	75250513          	addi	a0,a0,1874 # 800365f0 <__func__.0+0x6900>
    8001dea6:	1e60f0ef          	jal	8002d08c <printf>

    TEST_ASSERT("tselect right",
    8001deaa:	00019617          	auipc	a2,0x19
    8001deae:	2a660613          	addi	a2,a2,678 # 80037150 <__func__.0+0x7460>
    8001deb2:	08200593          	li	a1,130
    8001deb6:	00012517          	auipc	a0,0x12
    8001deba:	13a50513          	addi	a0,a0,314 # 8002fff0 <__func__.0+0x300>
    8001debe:	1ce0f0ef          	jal	8002d08c <printf>
    8001dec2:	60202773          	csrr	a4,hedeleg
    8001dec6:	67ad                	lui	a5,0xb
    8001dec8:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001decc:	00012597          	auipc	a1,0x12
    8001ded0:	0ec58593          	addi	a1,a1,236 # 8002ffb8 <__func__.0+0x2c8>
    8001ded4:	00f70663          	beq	a4,a5,8001dee0 <tselect_csr_tests_1+0x76>
    8001ded8:	00012597          	auipc	a1,0x12
    8001dedc:	0f058593          	addi	a1,a1,240 # 8002ffc8 <__func__.0+0x2d8>
    8001dee0:	00012517          	auipc	a0,0x12
    8001dee4:	12850513          	addi	a0,a0,296 # 80030008 <__func__.0+0x318>
    8001dee8:	1a40f0ef          	jal	8002d08c <printf>
    8001deec:	60202773          	csrr	a4,hedeleg
    8001def0:	67ad                	lui	a5,0xb
    8001def2:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001def6:	00f70c63          	beq	a4,a5,8001df0e <tselect_csr_tests_1+0xa4>
    8001defa:	00012517          	auipc	a0,0x12
    8001defe:	11650513          	addi	a0,a0,278 # 80030010 <__func__.0+0x320>
    8001df02:	18a0f0ef          	jal	8002d08c <printf>
    8001df06:	02900513          	li	a0,41
    8001df0a:	6710d0ef          	jal	8002bd7a <putchar>
    8001df0e:	4529                	li	a0,10
    8001df10:	66b0d0ef          	jal	8002bd7a <putchar>
    8001df14:	60202773          	csrr	a4,hedeleg
    8001df18:	67ad                	lui	a5,0xb
    8001df1a:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001df1e:	02f70763          	beq	a4,a5,8001df4c <tselect_csr_tests_1+0xe2>
    8001df22:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001df24:	00012597          	auipc	a1,0x12
    8001df28:	0a458593          	addi	a1,a1,164 # 8002ffc8 <__func__.0+0x2d8>
    8001df2c:	00012517          	auipc	a0,0x12
    8001df30:	14450513          	addi	a0,a0,324 # 80030070 <__func__.0+0x380>
    8001df34:	1580f0ef          	jal	8002d08c <printf>
    8001df38:	4511                	li	a0,4
    8001df3a:	fcfe20ef          	jal	80000f08 <goto_priv>
    8001df3e:	995e30ef          	jal	800018d2 <reset_state>

}
    8001df42:	60a2                	ld	ra,8(sp)
    8001df44:	8522                	mv	a0,s0
    8001df46:	6402                	ld	s0,0(sp)
    8001df48:	0141                	addi	sp,sp,16
    8001df4a:	8082                	ret
    TEST_ASSERT("tselect right",
    8001df4c:	4405                	li	s0,1
    TEST_END();
    8001df4e:	00012597          	auipc	a1,0x12
    8001df52:	06a58593          	addi	a1,a1,106 # 8002ffb8 <__func__.0+0x2c8>
    8001df56:	bfd9                	j	8001df2c <tselect_csr_tests_1+0xc2>

000000008001df58 <random_instruction_tests>:


bool random_instruction_tests(){
    8001df58:	1141                	addi	sp,sp,-16

    TEST_START();
    8001df5a:	00011597          	auipc	a1,0x11
    8001df5e:	35e58593          	addi	a1,a1,862 # 8002f2b8 <__func__.1>
    8001df62:	00012517          	auipc	a0,0x12
    8001df66:	07650513          	addi	a0,a0,118 # 8002ffd8 <__func__.0+0x2e8>
bool random_instruction_tests(){
    8001df6a:	e406                	sd	ra,8(sp)
    8001df6c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001df6e:	11e0f0ef          	jal	8002d08c <printf>
    8001df72:	4529                	li	a0,10
    8001df74:	6070d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001df78:	4511                	li	a0,4
    8001df7a:	f8fe20ef          	jal	80000f08 <goto_priv>
    CSRW(CSR_MCYCLE,0x0);
    8001df7e:	b0005073          	csrwi	mcycle,0

    excpt_info();
    8001df82:	4429                	li	s0,10
    8001df84:	8cae30ef          	jal	8000104e <excpt_info>

    for (int i = 0; i < 10; i++)
    8001df88:	347d                	addiw	s0,s0,-1
    {
        random_m_instruction();
    8001df8a:	a47e30ef          	jal	800019d0 <random_m_instruction>
    for (int i = 0; i < 10; i++)
    8001df8e:	fc6d                	bnez	s0,8001df88 <random_instruction_tests+0x30>
    }
    

    TEST_END();
    8001df90:	00012597          	auipc	a1,0x12
    8001df94:	02858593          	addi	a1,a1,40 # 8002ffb8 <__func__.0+0x2c8>
    8001df98:	00012517          	auipc	a0,0x12
    8001df9c:	0d850513          	addi	a0,a0,216 # 80030070 <__func__.0+0x380>
    8001dfa0:	0ec0f0ef          	jal	8002d08c <printf>
    8001dfa4:	4511                	li	a0,4
    8001dfa6:	f63e20ef          	jal	80000f08 <goto_priv>
    8001dfaa:	929e30ef          	jal	800018d2 <reset_state>

}
    8001dfae:	60a2                	ld	ra,8(sp)
    8001dfb0:	6402                	ld	s0,0(sp)
    8001dfb2:	4505                	li	a0,1
    8001dfb4:	0141                	addi	sp,sp,16
    8001dfb6:	8082                	ret

000000008001dfb8 <script_test>:

bool script_test(){     //草稿
    8001dfb8:	1141                	addi	sp,sp,-16

    TEST_START();
    8001dfba:	00011597          	auipc	a1,0x11
    8001dfbe:	31e58593          	addi	a1,a1,798 # 8002f2d8 <__func__.0>
    8001dfc2:	00012517          	auipc	a0,0x12
    8001dfc6:	01650513          	addi	a0,a0,22 # 8002ffd8 <__func__.0+0x2e8>
bool script_test(){     //草稿
    8001dfca:	e406                	sd	ra,8(sp)
    TEST_START();
    8001dfcc:	0c00f0ef          	jal	8002d08c <printf>
    8001dfd0:	4529                	li	a0,10
    8001dfd2:	5a90d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001dfd6:	4511                	li	a0,4
    8001dfd8:	f31e20ef          	jal	80000f08 <goto_priv>
    printf("mncause=%llx\n",CSRR(CSR_MNCAUSE));
    8001dfdc:	742025f3          	csrr	a1,0x742
    8001dfe0:	00019517          	auipc	a0,0x19
    8001dfe4:	18050513          	addi	a0,a0,384 # 80037160 <__func__.0+0x7470>
    8001dfe8:	0a40f0ef          	jal	8002d08c <printf>
    printf("mnepc=%llx\n",CSRR(CSR_MNEPC));
    8001dfec:	741025f3          	csrr	a1,0x741
    8001dff0:	00019517          	auipc	a0,0x19
    8001dff4:	18050513          	addi	a0,a0,384 # 80037170 <__func__.0+0x7480>
    8001dff8:	0940f0ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8001dffc:	e11e20ef          	jal	80000e0c <test_setup_except_function>
    CSRW(CSR_MNEPC,0x8001dfde);
    8001e000:	8001e7b7          	lui	a5,0x8001e
    8001e004:	fde7879b          	addiw	a5,a5,-34 # ffffffff8001dfde <__stack_top+0xfffffffeffd1efde>
    8001e008:	74179073          	csrw	0x741,a5
    asm volatile(
    8001e00c:	70200073          	.insn	4, 0x70200073
    mnret();
    excpt_info();
    8001e010:	83ee30ef          	jal	8000104e <excpt_info>
    printf("mncause=%llx\n",CSRR(CSR_MNCAUSE));
    8001e014:	742025f3          	csrr	a1,0x742
    8001e018:	00019517          	auipc	a0,0x19
    8001e01c:	14850513          	addi	a0,a0,328 # 80037160 <__func__.0+0x7470>
    8001e020:	06c0f0ef          	jal	8002d08c <printf>

    TEST_END();
    8001e024:	00012597          	auipc	a1,0x12
    8001e028:	f9458593          	addi	a1,a1,-108 # 8002ffb8 <__func__.0+0x2c8>
    8001e02c:	00012517          	auipc	a0,0x12
    8001e030:	04450513          	addi	a0,a0,68 # 80030070 <__func__.0+0x380>
    8001e034:	0580f0ef          	jal	8002d08c <printf>
    8001e038:	4511                	li	a0,4
    8001e03a:	ecfe20ef          	jal	80000f08 <goto_priv>
    8001e03e:	895e30ef          	jal	800018d2 <reset_state>

    8001e042:	60a2                	ld	ra,8(sp)
    8001e044:	4505                	li	a0,1
    8001e046:	0141                	addi	sp,sp,16
    8001e048:	8082                	ret

000000008001e04a <time_test_1>:
#include <rvh_test.h>
#include <csrs.h> 

bool time_test_1() {
    8001e04a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e04c:	00011597          	auipc	a1,0x11
    8001e050:	29c58593          	addi	a1,a1,668 # 8002f2e8 <__func__.50>
    8001e054:	00012517          	auipc	a0,0x12
    8001e058:	f8450513          	addi	a0,a0,-124 # 8002ffd8 <__func__.0+0x2e8>
bool time_test_1() {
    8001e05c:	ec06                	sd	ra,24(sp)
    8001e05e:	e822                	sd	s0,16(sp)
    8001e060:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e062:	02a0f0ef          	jal	8002d08c <printf>
    8001e066:	4529                	li	a0,10
    8001e068:	5130d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001e06c:	4511                	li	a0,4
    8001e06e:	e9be20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001e072:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8001e076:	4509                	li	a0,2
    8001e078:	e91e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e07c:	d91e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e080:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e084:	08200593          	li	a1,130
    8001e088:	00019617          	auipc	a2,0x19
    8001e08c:	0f860613          	addi	a2,a2,248 # 80037180 <__func__.0+0x7490>
    8001e090:	00012517          	auipc	a0,0x12
    8001e094:	f6050513          	addi	a0,a0,-160 # 8002fff0 <__func__.0+0x300>
    8001e098:	7f50e0ef          	jal	8002d08c <printf>
    8001e09c:	0003a797          	auipc	a5,0x3a
    8001e0a0:	f757c783          	lbu	a5,-139(a5) # 80058011 <excpt+0x1>
    8001e0a4:	0003a497          	auipc	s1,0x3a
    8001e0a8:	f6c48493          	addi	s1,s1,-148 # 80058010 <excpt>
    8001e0ac:	00012597          	auipc	a1,0x12
    8001e0b0:	f1c58593          	addi	a1,a1,-228 # 8002ffc8 <__func__.0+0x2d8>
    8001e0b4:	cf89                	beqz	a5,8001e0ce <time_test_1+0x84>
    8001e0b6:	6498                	ld	a4,8(s1)
    8001e0b8:	4789                	li	a5,2
    8001e0ba:	00012597          	auipc	a1,0x12
    8001e0be:	efe58593          	addi	a1,a1,-258 # 8002ffb8 <__func__.0+0x2c8>
    8001e0c2:	00f70663          	beq	a4,a5,8001e0ce <time_test_1+0x84>
    8001e0c6:	00012597          	auipc	a1,0x12
    8001e0ca:	f0258593          	addi	a1,a1,-254 # 8002ffc8 <__func__.0+0x2d8>
    8001e0ce:	00012517          	auipc	a0,0x12
    8001e0d2:	f3a50513          	addi	a0,a0,-198 # 80030008 <__func__.0+0x318>
    8001e0d6:	7b70e0ef          	jal	8002d08c <printf>
    8001e0da:	0003a797          	auipc	a5,0x3a
    8001e0de:	f377c783          	lbu	a5,-201(a5) # 80058011 <excpt+0x1>
    8001e0e2:	c789                	beqz	a5,8001e0ec <time_test_1+0xa2>
    8001e0e4:	6498                	ld	a4,8(s1)
    8001e0e6:	4789                	li	a5,2
    8001e0e8:	00f70c63          	beq	a4,a5,8001e100 <time_test_1+0xb6>
    8001e0ec:	00012517          	auipc	a0,0x12
    8001e0f0:	f2450513          	addi	a0,a0,-220 # 80030010 <__func__.0+0x320>
    8001e0f4:	7990e0ef          	jal	8002d08c <printf>
    8001e0f8:	02900513          	li	a0,41
    8001e0fc:	47f0d0ef          	jal	8002bd7a <putchar>
    8001e100:	4529                	li	a0,10
    8001e102:	4790d0ef          	jal	8002bd7a <putchar>
    8001e106:	0003a797          	auipc	a5,0x3a
    8001e10a:	f0b7c783          	lbu	a5,-245(a5) # 80058011 <excpt+0x1>
    8001e10e:	4401                	li	s0,0
    8001e110:	c789                	beqz	a5,8001e11a <time_test_1+0xd0>
    8001e112:	6480                	ld	s0,8(s1)
    8001e114:	1479                	addi	s0,s0,-2
    8001e116:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001e11a:	450d                	li	a0,3
    8001e11c:	dede20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e120:	cede20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e124:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e128:	08200593          	li	a1,130
    8001e12c:	00019617          	auipc	a2,0x19
    8001e130:	0a460613          	addi	a2,a2,164 # 800371d0 <__func__.0+0x74e0>
    8001e134:	00012517          	auipc	a0,0x12
    8001e138:	ebc50513          	addi	a0,a0,-324 # 8002fff0 <__func__.0+0x300>
    8001e13c:	7510e0ef          	jal	8002d08c <printf>
    8001e140:	0003a797          	auipc	a5,0x3a
    8001e144:	ed17c783          	lbu	a5,-303(a5) # 80058011 <excpt+0x1>
    8001e148:	00012597          	auipc	a1,0x12
    8001e14c:	e8058593          	addi	a1,a1,-384 # 8002ffc8 <__func__.0+0x2d8>
    8001e150:	cf89                	beqz	a5,8001e16a <time_test_1+0x120>
    8001e152:	6498                	ld	a4,8(s1)
    8001e154:	4789                	li	a5,2
    8001e156:	00012597          	auipc	a1,0x12
    8001e15a:	e6258593          	addi	a1,a1,-414 # 8002ffb8 <__func__.0+0x2c8>
    8001e15e:	00f70663          	beq	a4,a5,8001e16a <time_test_1+0x120>
    8001e162:	00012597          	auipc	a1,0x12
    8001e166:	e6658593          	addi	a1,a1,-410 # 8002ffc8 <__func__.0+0x2d8>
    8001e16a:	00012517          	auipc	a0,0x12
    8001e16e:	e9e50513          	addi	a0,a0,-354 # 80030008 <__func__.0+0x318>
    8001e172:	71b0e0ef          	jal	8002d08c <printf>
    8001e176:	0003a797          	auipc	a5,0x3a
    8001e17a:	e9b7c783          	lbu	a5,-357(a5) # 80058011 <excpt+0x1>
    8001e17e:	c789                	beqz	a5,8001e188 <time_test_1+0x13e>
    8001e180:	6498                	ld	a4,8(s1)
    8001e182:	4789                	li	a5,2
    8001e184:	00f70c63          	beq	a4,a5,8001e19c <time_test_1+0x152>
    8001e188:	00012517          	auipc	a0,0x12
    8001e18c:	e8850513          	addi	a0,a0,-376 # 80030010 <__func__.0+0x320>
    8001e190:	6fd0e0ef          	jal	8002d08c <printf>
    8001e194:	02900513          	li	a0,41
    8001e198:	3e30d0ef          	jal	8002bd7a <putchar>
    8001e19c:	4529                	li	a0,10
    8001e19e:	3dd0d0ef          	jal	8002bd7a <putchar>
    8001e1a2:	c801                	beqz	s0,8001e1b2 <time_test_1+0x168>
    8001e1a4:	0003a797          	auipc	a5,0x3a
    8001e1a8:	e6d7c783          	lbu	a5,-403(a5) # 80058011 <excpt+0x1>
    8001e1ac:	4401                	li	s0,0
    8001e1ae:	16079f63          	bnez	a5,8001e32c <time_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001e1b2:	4501                	li	a0,0
    8001e1b4:	d55e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e1b8:	c55e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e1bc:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e1c0:	08200593          	li	a1,130
    8001e1c4:	00019617          	auipc	a2,0x19
    8001e1c8:	05c60613          	addi	a2,a2,92 # 80037220 <__func__.0+0x7530>
    8001e1cc:	00012517          	auipc	a0,0x12
    8001e1d0:	e2450513          	addi	a0,a0,-476 # 8002fff0 <__func__.0+0x300>
    8001e1d4:	6b90e0ef          	jal	8002d08c <printf>
    8001e1d8:	0003a797          	auipc	a5,0x3a
    8001e1dc:	e397c783          	lbu	a5,-455(a5) # 80058011 <excpt+0x1>
    8001e1e0:	00012597          	auipc	a1,0x12
    8001e1e4:	de858593          	addi	a1,a1,-536 # 8002ffc8 <__func__.0+0x2d8>
    8001e1e8:	cf89                	beqz	a5,8001e202 <time_test_1+0x1b8>
    8001e1ea:	6498                	ld	a4,8(s1)
    8001e1ec:	4789                	li	a5,2
    8001e1ee:	00012597          	auipc	a1,0x12
    8001e1f2:	dca58593          	addi	a1,a1,-566 # 8002ffb8 <__func__.0+0x2c8>
    8001e1f6:	00f70663          	beq	a4,a5,8001e202 <time_test_1+0x1b8>
    8001e1fa:	00012597          	auipc	a1,0x12
    8001e1fe:	dce58593          	addi	a1,a1,-562 # 8002ffc8 <__func__.0+0x2d8>
    8001e202:	00012517          	auipc	a0,0x12
    8001e206:	e0650513          	addi	a0,a0,-506 # 80030008 <__func__.0+0x318>
    8001e20a:	6830e0ef          	jal	8002d08c <printf>
    8001e20e:	0003a797          	auipc	a5,0x3a
    8001e212:	e037c783          	lbu	a5,-509(a5) # 80058011 <excpt+0x1>
    8001e216:	c789                	beqz	a5,8001e220 <time_test_1+0x1d6>
    8001e218:	6498                	ld	a4,8(s1)
    8001e21a:	4789                	li	a5,2
    8001e21c:	00f70c63          	beq	a4,a5,8001e234 <time_test_1+0x1ea>
    8001e220:	00012517          	auipc	a0,0x12
    8001e224:	df050513          	addi	a0,a0,-528 # 80030010 <__func__.0+0x320>
    8001e228:	6650e0ef          	jal	8002d08c <printf>
    8001e22c:	02900513          	li	a0,41
    8001e230:	34b0d0ef          	jal	8002bd7a <putchar>
    8001e234:	4529                	li	a0,10
    8001e236:	3450d0ef          	jal	8002bd7a <putchar>
    8001e23a:	c801                	beqz	s0,8001e24a <time_test_1+0x200>
    8001e23c:	0003a797          	auipc	a5,0x3a
    8001e240:	dd57c783          	lbu	a5,-555(a5) # 80058011 <excpt+0x1>
    8001e244:	4401                	li	s0,0
    8001e246:	0c079e63          	bnez	a5,8001e322 <time_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001e24a:	4505                	li	a0,1
    8001e24c:	cbde20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e250:	bbde20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e254:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e258:	08200593          	li	a1,130
    8001e25c:	00019617          	auipc	a2,0x19
    8001e260:	01460613          	addi	a2,a2,20 # 80037270 <__func__.0+0x7580>
    8001e264:	00012517          	auipc	a0,0x12
    8001e268:	d8c50513          	addi	a0,a0,-628 # 8002fff0 <__func__.0+0x300>
    8001e26c:	6210e0ef          	jal	8002d08c <printf>
    8001e270:	0003a797          	auipc	a5,0x3a
    8001e274:	da17c783          	lbu	a5,-607(a5) # 80058011 <excpt+0x1>
    8001e278:	00012597          	auipc	a1,0x12
    8001e27c:	d5058593          	addi	a1,a1,-688 # 8002ffc8 <__func__.0+0x2d8>
    8001e280:	cf89                	beqz	a5,8001e29a <time_test_1+0x250>
    8001e282:	6498                	ld	a4,8(s1)
    8001e284:	4789                	li	a5,2
    8001e286:	00012597          	auipc	a1,0x12
    8001e28a:	d3258593          	addi	a1,a1,-718 # 8002ffb8 <__func__.0+0x2c8>
    8001e28e:	00f70663          	beq	a4,a5,8001e29a <time_test_1+0x250>
    8001e292:	00012597          	auipc	a1,0x12
    8001e296:	d3658593          	addi	a1,a1,-714 # 8002ffc8 <__func__.0+0x2d8>
    8001e29a:	00012517          	auipc	a0,0x12
    8001e29e:	d6e50513          	addi	a0,a0,-658 # 80030008 <__func__.0+0x318>
    8001e2a2:	5eb0e0ef          	jal	8002d08c <printf>
    8001e2a6:	0003a797          	auipc	a5,0x3a
    8001e2aa:	d6b7c783          	lbu	a5,-661(a5) # 80058011 <excpt+0x1>
    8001e2ae:	c789                	beqz	a5,8001e2b8 <time_test_1+0x26e>
    8001e2b0:	6498                	ld	a4,8(s1)
    8001e2b2:	4789                	li	a5,2
    8001e2b4:	00f70c63          	beq	a4,a5,8001e2cc <time_test_1+0x282>
    8001e2b8:	00012517          	auipc	a0,0x12
    8001e2bc:	d5850513          	addi	a0,a0,-680 # 80030010 <__func__.0+0x320>
    8001e2c0:	5cd0e0ef          	jal	8002d08c <printf>
    8001e2c4:	02900513          	li	a0,41
    8001e2c8:	2b30d0ef          	jal	8002bd7a <putchar>
    8001e2cc:	4529                	li	a0,10
    8001e2ce:	2ad0d0ef          	jal	8002bd7a <putchar>
    8001e2d2:	c015                	beqz	s0,8001e2f6 <time_test_1+0x2ac>
    8001e2d4:	0003a417          	auipc	s0,0x3a
    8001e2d8:	d3d44403          	lbu	s0,-707(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e2dc:	00012597          	auipc	a1,0x12
    8001e2e0:	cec58593          	addi	a1,a1,-788 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e2e4:	cc11                	beqz	s0,8001e300 <time_test_1+0x2b6>
    8001e2e6:	6498                	ld	a4,8(s1)
    8001e2e8:	4789                	li	a5,2
    TEST_END(); 
    8001e2ea:	00012597          	auipc	a1,0x12
    8001e2ee:	cce58593          	addi	a1,a1,-818 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e2f2:	00f70763          	beq	a4,a5,8001e300 <time_test_1+0x2b6>
    8001e2f6:	4401                	li	s0,0
    TEST_END(); 
    8001e2f8:	00012597          	auipc	a1,0x12
    8001e2fc:	cd058593          	addi	a1,a1,-816 # 8002ffc8 <__func__.0+0x2d8>
    8001e300:	00012517          	auipc	a0,0x12
    8001e304:	d7050513          	addi	a0,a0,-656 # 80030070 <__func__.0+0x380>
    8001e308:	5850e0ef          	jal	8002d08c <printf>
    8001e30c:	4511                	li	a0,4
    8001e30e:	bfbe20ef          	jal	80000f08 <goto_priv>
    8001e312:	dc0e30ef          	jal	800018d2 <reset_state>
}
    8001e316:	60e2                	ld	ra,24(sp)
    8001e318:	8522                	mv	a0,s0
    8001e31a:	6442                	ld	s0,16(sp)
    8001e31c:	64a2                	ld	s1,8(sp)
    8001e31e:	6105                	addi	sp,sp,32
    8001e320:	8082                	ret
    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e322:	6480                	ld	s0,8(s1)
    8001e324:	1479                	addi	s0,s0,-2
    8001e326:	00143413          	seqz	s0,s0
    8001e32a:	b705                	j	8001e24a <time_test_1+0x200>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e32c:	6480                	ld	s0,8(s1)
    8001e32e:	1479                	addi	s0,s0,-2
    8001e330:	00143413          	seqz	s0,s0
    8001e334:	bdbd                	j	8001e1b2 <time_test_1+0x168>

000000008001e336 <time_test_2>:

bool time_test_2() {
    8001e336:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e338:	00011597          	auipc	a1,0x11
    8001e33c:	fc058593          	addi	a1,a1,-64 # 8002f2f8 <__func__.49>
    8001e340:	00012517          	auipc	a0,0x12
    8001e344:	c9850513          	addi	a0,a0,-872 # 8002ffd8 <__func__.0+0x2e8>
bool time_test_2() {
    8001e348:	e406                	sd	ra,8(sp)
    8001e34a:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e34c:	5410e0ef          	jal	8002d08c <printf>
    8001e350:	4529                	li	a0,10
    8001e352:	2290d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001e356:	4511                	li	a0,4
    8001e358:	bb1e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001e35c:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    8001e360:	450d                	li	a0,3
    8001e362:	ba7e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e366:	aa7e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e36a:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e36e:	08200593          	li	a1,130
    8001e372:	00019617          	auipc	a2,0x19
    8001e376:	f4e60613          	addi	a2,a2,-178 # 800372c0 <__func__.0+0x75d0>
    8001e37a:	00012517          	auipc	a0,0x12
    8001e37e:	c7650513          	addi	a0,a0,-906 # 8002fff0 <__func__.0+0x300>
    8001e382:	50b0e0ef          	jal	8002d08c <printf>
    8001e386:	0003a797          	auipc	a5,0x3a
    8001e38a:	c8b7c783          	lbu	a5,-885(a5) # 80058011 <excpt+0x1>
    8001e38e:	00012597          	auipc	a1,0x12
    8001e392:	c2a58593          	addi	a1,a1,-982 # 8002ffb8 <__func__.0+0x2c8>
    8001e396:	c789                	beqz	a5,8001e3a0 <time_test_2+0x6a>
    8001e398:	00012597          	auipc	a1,0x12
    8001e39c:	c3058593          	addi	a1,a1,-976 # 8002ffc8 <__func__.0+0x2d8>
    8001e3a0:	00012517          	auipc	a0,0x12
    8001e3a4:	c6850513          	addi	a0,a0,-920 # 80030008 <__func__.0+0x318>
    8001e3a8:	4e50e0ef          	jal	8002d08c <printf>
    8001e3ac:	0003a797          	auipc	a5,0x3a
    8001e3b0:	c657c783          	lbu	a5,-923(a5) # 80058011 <excpt+0x1>
    8001e3b4:	e7a1                	bnez	a5,8001e3fc <time_test_2+0xc6>
    8001e3b6:	4529                	li	a0,10
    8001e3b8:	1c30d0ef          	jal	8002bd7a <putchar>
    8001e3bc:	0003a797          	auipc	a5,0x3a
    8001e3c0:	c557c783          	lbu	a5,-939(a5) # 80058011 <excpt+0x1>
    8001e3c4:	e795                	bnez	a5,8001e3f0 <time_test_2+0xba>
    8001e3c6:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001e3c8:	00012597          	auipc	a1,0x12
    8001e3cc:	bf058593          	addi	a1,a1,-1040 # 8002ffb8 <__func__.0+0x2c8>
    8001e3d0:	00012517          	auipc	a0,0x12
    8001e3d4:	ca050513          	addi	a0,a0,-864 # 80030070 <__func__.0+0x380>
    8001e3d8:	4b50e0ef          	jal	8002d08c <printf>
    8001e3dc:	4511                	li	a0,4
    8001e3de:	b2be20ef          	jal	80000f08 <goto_priv>
    8001e3e2:	cf0e30ef          	jal	800018d2 <reset_state>
}
    8001e3e6:	60a2                	ld	ra,8(sp)
    8001e3e8:	8522                	mv	a0,s0
    8001e3ea:	6402                	ld	s0,0(sp)
    8001e3ec:	0141                	addi	sp,sp,16
    8001e3ee:	8082                	ret
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e3f0:	4401                	li	s0,0
    TEST_END(); 
    8001e3f2:	00012597          	auipc	a1,0x12
    8001e3f6:	bd658593          	addi	a1,a1,-1066 # 8002ffc8 <__func__.0+0x2d8>
    8001e3fa:	bfd9                	j	8001e3d0 <time_test_2+0x9a>
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e3fc:	00012517          	auipc	a0,0x12
    8001e400:	c1450513          	addi	a0,a0,-1004 # 80030010 <__func__.0+0x320>
    8001e404:	4890e0ef          	jal	8002d08c <printf>
    8001e408:	02900513          	li	a0,41
    8001e40c:	16f0d0ef          	jal	8002bd7a <putchar>
    8001e410:	b75d                	j	8001e3b6 <time_test_2+0x80>

000000008001e412 <time_test_3>:

bool time_test_3() {
    8001e412:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e414:	00011597          	auipc	a1,0x11
    8001e418:	ef458593          	addi	a1,a1,-268 # 8002f308 <__func__.48>
    8001e41c:	00012517          	auipc	a0,0x12
    8001e420:	bbc50513          	addi	a0,a0,-1092 # 8002ffd8 <__func__.0+0x2e8>
bool time_test_3() {
    8001e424:	ec06                	sd	ra,24(sp)
    8001e426:	e822                	sd	s0,16(sp)
    8001e428:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e42a:	4630e0ef          	jal	8002d08c <printf>
    8001e42e:	4529                	li	a0,10
    8001e430:	14b0d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001e434:	4511                	li	a0,4
    8001e436:	ad3e20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e43a:	10617073          	csrci	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e43e:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001e442:	4505                	li	a0,1
    8001e444:	ac5e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e448:	9c5e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e44c:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e450:	08200593          	li	a1,130
    8001e454:	00019617          	auipc	a2,0x19
    8001e458:	ea460613          	addi	a2,a2,-348 # 800372f8 <__func__.0+0x7608>
    8001e45c:	00012517          	auipc	a0,0x12
    8001e460:	b9450513          	addi	a0,a0,-1132 # 8002fff0 <__func__.0+0x300>
    8001e464:	4290e0ef          	jal	8002d08c <printf>
    8001e468:	0003a797          	auipc	a5,0x3a
    8001e46c:	ba97c783          	lbu	a5,-1111(a5) # 80058011 <excpt+0x1>
    8001e470:	0003a497          	auipc	s1,0x3a
    8001e474:	ba048493          	addi	s1,s1,-1120 # 80058010 <excpt>
    8001e478:	00012597          	auipc	a1,0x12
    8001e47c:	b5058593          	addi	a1,a1,-1200 # 8002ffc8 <__func__.0+0x2d8>
    8001e480:	cf89                	beqz	a5,8001e49a <time_test_3+0x88>
    8001e482:	6498                	ld	a4,8(s1)
    8001e484:	4789                	li	a5,2
    8001e486:	00012597          	auipc	a1,0x12
    8001e48a:	b3258593          	addi	a1,a1,-1230 # 8002ffb8 <__func__.0+0x2c8>
    8001e48e:	00f70663          	beq	a4,a5,8001e49a <time_test_3+0x88>
    8001e492:	00012597          	auipc	a1,0x12
    8001e496:	b3658593          	addi	a1,a1,-1226 # 8002ffc8 <__func__.0+0x2d8>
    8001e49a:	00012517          	auipc	a0,0x12
    8001e49e:	b6e50513          	addi	a0,a0,-1170 # 80030008 <__func__.0+0x318>
    8001e4a2:	3eb0e0ef          	jal	8002d08c <printf>
    8001e4a6:	0003a797          	auipc	a5,0x3a
    8001e4aa:	b6b7c783          	lbu	a5,-1173(a5) # 80058011 <excpt+0x1>
    8001e4ae:	c789                	beqz	a5,8001e4b8 <time_test_3+0xa6>
    8001e4b0:	6498                	ld	a4,8(s1)
    8001e4b2:	4789                	li	a5,2
    8001e4b4:	00f70c63          	beq	a4,a5,8001e4cc <time_test_3+0xba>
    8001e4b8:	00012517          	auipc	a0,0x12
    8001e4bc:	b5850513          	addi	a0,a0,-1192 # 80030010 <__func__.0+0x320>
    8001e4c0:	3cd0e0ef          	jal	8002d08c <printf>
    8001e4c4:	02900513          	li	a0,41
    8001e4c8:	0b30d0ef          	jal	8002bd7a <putchar>
    8001e4cc:	4529                	li	a0,10
    8001e4ce:	0ad0d0ef          	jal	8002bd7a <putchar>
    8001e4d2:	0003a417          	auipc	s0,0x3a
    8001e4d6:	b3f44403          	lbu	s0,-1217(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e4da:	00012597          	auipc	a1,0x12
    8001e4de:	aee58593          	addi	a1,a1,-1298 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e4e2:	cc11                	beqz	s0,8001e4fe <time_test_3+0xec>
    8001e4e4:	6498                	ld	a4,8(s1)
    8001e4e6:	4789                	li	a5,2
    TEST_END(); 
    8001e4e8:	00012597          	auipc	a1,0x12
    8001e4ec:	ad058593          	addi	a1,a1,-1328 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e4f0:	00f70763          	beq	a4,a5,8001e4fe <time_test_3+0xec>
    8001e4f4:	4401                	li	s0,0
    TEST_END(); 
    8001e4f6:	00012597          	auipc	a1,0x12
    8001e4fa:	ad258593          	addi	a1,a1,-1326 # 8002ffc8 <__func__.0+0x2d8>
    8001e4fe:	00012517          	auipc	a0,0x12
    8001e502:	b7250513          	addi	a0,a0,-1166 # 80030070 <__func__.0+0x380>
    8001e506:	3870e0ef          	jal	8002d08c <printf>
    8001e50a:	4511                	li	a0,4
    8001e50c:	9fde20ef          	jal	80000f08 <goto_priv>
    8001e510:	bc2e30ef          	jal	800018d2 <reset_state>
}
    8001e514:	60e2                	ld	ra,24(sp)
    8001e516:	8522                	mv	a0,s0
    8001e518:	6442                	ld	s0,16(sp)
    8001e51a:	64a2                	ld	s1,8(sp)
    8001e51c:	6105                	addi	sp,sp,32
    8001e51e:	8082                	ret

000000008001e520 <time_test_4>:

bool time_test_4() {
    8001e520:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e522:	00011597          	auipc	a1,0x11
    8001e526:	df658593          	addi	a1,a1,-522 # 8002f318 <__func__.47>
    8001e52a:	00012517          	auipc	a0,0x12
    8001e52e:	aae50513          	addi	a0,a0,-1362 # 8002ffd8 <__func__.0+0x2e8>
bool time_test_4() {
    8001e532:	e406                	sd	ra,8(sp)
    8001e534:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e536:	3570e0ef          	jal	8002d08c <printf>
    8001e53a:	4529                	li	a0,10
    8001e53c:	03f0d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001e540:	4511                	li	a0,4
    8001e542:	9c7e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e546:	10616073          	csrsi	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e54a:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001e54e:	4505                	li	a0,1
    8001e550:	9b9e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e554:	8b9e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e558:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e55c:	08200593          	li	a1,130
    8001e560:	00019617          	auipc	a2,0x19
    8001e564:	de860613          	addi	a2,a2,-536 # 80037348 <__func__.0+0x7658>
    8001e568:	00012517          	auipc	a0,0x12
    8001e56c:	a8850513          	addi	a0,a0,-1400 # 8002fff0 <__func__.0+0x300>
    8001e570:	31d0e0ef          	jal	8002d08c <printf>
    8001e574:	0003a797          	auipc	a5,0x3a
    8001e578:	a9d7c783          	lbu	a5,-1379(a5) # 80058011 <excpt+0x1>
    8001e57c:	00012597          	auipc	a1,0x12
    8001e580:	a3c58593          	addi	a1,a1,-1476 # 8002ffb8 <__func__.0+0x2c8>
    8001e584:	c789                	beqz	a5,8001e58e <time_test_4+0x6e>
    8001e586:	00012597          	auipc	a1,0x12
    8001e58a:	a4258593          	addi	a1,a1,-1470 # 8002ffc8 <__func__.0+0x2d8>
    8001e58e:	00012517          	auipc	a0,0x12
    8001e592:	a7a50513          	addi	a0,a0,-1414 # 80030008 <__func__.0+0x318>
    8001e596:	2f70e0ef          	jal	8002d08c <printf>
    8001e59a:	0003a797          	auipc	a5,0x3a
    8001e59e:	a777c783          	lbu	a5,-1417(a5) # 80058011 <excpt+0x1>
    8001e5a2:	e7a1                	bnez	a5,8001e5ea <time_test_4+0xca>
    8001e5a4:	4529                	li	a0,10
    8001e5a6:	7d40d0ef          	jal	8002bd7a <putchar>
    8001e5aa:	0003a797          	auipc	a5,0x3a
    8001e5ae:	a677c783          	lbu	a5,-1433(a5) # 80058011 <excpt+0x1>
    8001e5b2:	e795                	bnez	a5,8001e5de <time_test_4+0xbe>
    8001e5b4:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e5b6:	00012597          	auipc	a1,0x12
    8001e5ba:	a0258593          	addi	a1,a1,-1534 # 8002ffb8 <__func__.0+0x2c8>
    8001e5be:	00012517          	auipc	a0,0x12
    8001e5c2:	ab250513          	addi	a0,a0,-1358 # 80030070 <__func__.0+0x380>
    8001e5c6:	2c70e0ef          	jal	8002d08c <printf>
    8001e5ca:	4511                	li	a0,4
    8001e5cc:	93de20ef          	jal	80000f08 <goto_priv>
    8001e5d0:	b02e30ef          	jal	800018d2 <reset_state>
}
    8001e5d4:	60a2                	ld	ra,8(sp)
    8001e5d6:	8522                	mv	a0,s0
    8001e5d8:	6402                	ld	s0,0(sp)
    8001e5da:	0141                	addi	sp,sp,16
    8001e5dc:	8082                	ret
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e5de:	4401                	li	s0,0
    TEST_END(); 
    8001e5e0:	00012597          	auipc	a1,0x12
    8001e5e4:	9e858593          	addi	a1,a1,-1560 # 8002ffc8 <__func__.0+0x2d8>
    8001e5e8:	bfd9                	j	8001e5be <time_test_4+0x9e>
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e5ea:	00012517          	auipc	a0,0x12
    8001e5ee:	a2650513          	addi	a0,a0,-1498 # 80030010 <__func__.0+0x320>
    8001e5f2:	29b0e0ef          	jal	8002d08c <printf>
    8001e5f6:	02900513          	li	a0,41
    8001e5fa:	7800d0ef          	jal	8002bd7a <putchar>
    8001e5fe:	b75d                	j	8001e5a4 <time_test_4+0x84>

000000008001e600 <time_test_5>:

bool time_test_5() {
    8001e600:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e602:	00011597          	auipc	a1,0x11
    8001e606:	d2658593          	addi	a1,a1,-730 # 8002f328 <__func__.46>
    8001e60a:	00012517          	auipc	a0,0x12
    8001e60e:	9ce50513          	addi	a0,a0,-1586 # 8002ffd8 <__func__.0+0x2e8>
bool time_test_5() {
    8001e612:	ec06                	sd	ra,24(sp)
    8001e614:	e822                	sd	s0,16(sp)
    8001e616:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e618:	2750e0ef          	jal	8002d08c <printf>
    8001e61c:	4529                	li	a0,10
    8001e61e:	75c0d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001e622:	4511                	li	a0,4
    8001e624:	8e5e20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e628:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e62c:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e630:	4509                	li	a0,2
    8001e632:	8d7e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e636:	fd6e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e63a:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e63e:	08200593          	li	a1,130
    8001e642:	00019617          	auipc	a2,0x19
    8001e646:	d4e60613          	addi	a2,a2,-690 # 80037390 <__func__.0+0x76a0>
    8001e64a:	00012517          	auipc	a0,0x12
    8001e64e:	9a650513          	addi	a0,a0,-1626 # 8002fff0 <__func__.0+0x300>
    8001e652:	23b0e0ef          	jal	8002d08c <printf>
    8001e656:	0003a797          	auipc	a5,0x3a
    8001e65a:	9bb7c783          	lbu	a5,-1605(a5) # 80058011 <excpt+0x1>
    8001e65e:	0003a497          	auipc	s1,0x3a
    8001e662:	9b248493          	addi	s1,s1,-1614 # 80058010 <excpt>
    8001e666:	00012597          	auipc	a1,0x12
    8001e66a:	96258593          	addi	a1,a1,-1694 # 8002ffc8 <__func__.0+0x2d8>
    8001e66e:	cf89                	beqz	a5,8001e688 <time_test_5+0x88>
    8001e670:	6498                	ld	a4,8(s1)
    8001e672:	47d9                	li	a5,22
    8001e674:	00012597          	auipc	a1,0x12
    8001e678:	94458593          	addi	a1,a1,-1724 # 8002ffb8 <__func__.0+0x2c8>
    8001e67c:	00f70663          	beq	a4,a5,8001e688 <time_test_5+0x88>
    8001e680:	00012597          	auipc	a1,0x12
    8001e684:	94858593          	addi	a1,a1,-1720 # 8002ffc8 <__func__.0+0x2d8>
    8001e688:	00012517          	auipc	a0,0x12
    8001e68c:	98050513          	addi	a0,a0,-1664 # 80030008 <__func__.0+0x318>
    8001e690:	1fd0e0ef          	jal	8002d08c <printf>
    8001e694:	0003a797          	auipc	a5,0x3a
    8001e698:	97d7c783          	lbu	a5,-1667(a5) # 80058011 <excpt+0x1>
    8001e69c:	c789                	beqz	a5,8001e6a6 <time_test_5+0xa6>
    8001e69e:	6498                	ld	a4,8(s1)
    8001e6a0:	47d9                	li	a5,22
    8001e6a2:	00f70c63          	beq	a4,a5,8001e6ba <time_test_5+0xba>
    8001e6a6:	00012517          	auipc	a0,0x12
    8001e6aa:	96a50513          	addi	a0,a0,-1686 # 80030010 <__func__.0+0x320>
    8001e6ae:	1df0e0ef          	jal	8002d08c <printf>
    8001e6b2:	02900513          	li	a0,41
    8001e6b6:	6c40d0ef          	jal	8002bd7a <putchar>
    8001e6ba:	4529                	li	a0,10
    8001e6bc:	6be0d0ef          	jal	8002bd7a <putchar>
    8001e6c0:	0003a417          	auipc	s0,0x3a
    8001e6c4:	95144403          	lbu	s0,-1711(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001e6c8:	00012597          	auipc	a1,0x12
    8001e6cc:	90058593          	addi	a1,a1,-1792 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e6d0:	cc11                	beqz	s0,8001e6ec <time_test_5+0xec>
    8001e6d2:	6498                	ld	a4,8(s1)
    8001e6d4:	47d9                	li	a5,22
    TEST_END(); 
    8001e6d6:	00012597          	auipc	a1,0x12
    8001e6da:	8e258593          	addi	a1,a1,-1822 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e6de:	00f70763          	beq	a4,a5,8001e6ec <time_test_5+0xec>
    8001e6e2:	4401                	li	s0,0
    TEST_END(); 
    8001e6e4:	00012597          	auipc	a1,0x12
    8001e6e8:	8e458593          	addi	a1,a1,-1820 # 8002ffc8 <__func__.0+0x2d8>
    8001e6ec:	00012517          	auipc	a0,0x12
    8001e6f0:	98450513          	addi	a0,a0,-1660 # 80030070 <__func__.0+0x380>
    8001e6f4:	1990e0ef          	jal	8002d08c <printf>
    8001e6f8:	4511                	li	a0,4
    8001e6fa:	80fe20ef          	jal	80000f08 <goto_priv>
    8001e6fe:	9d4e30ef          	jal	800018d2 <reset_state>
}
    8001e702:	60e2                	ld	ra,24(sp)
    8001e704:	8522                	mv	a0,s0
    8001e706:	6442                	ld	s0,16(sp)
    8001e708:	64a2                	ld	s1,8(sp)
    8001e70a:	6105                	addi	sp,sp,32
    8001e70c:	8082                	ret

000000008001e70e <time_test_6>:

bool time_test_6() {
    8001e70e:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e710:	00011597          	auipc	a1,0x11
    8001e714:	c2858593          	addi	a1,a1,-984 # 8002f338 <__func__.45>
    8001e718:	00012517          	auipc	a0,0x12
    8001e71c:	8c050513          	addi	a0,a0,-1856 # 8002ffd8 <__func__.0+0x2e8>
bool time_test_6() {
    8001e720:	e406                	sd	ra,8(sp)
    8001e722:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e724:	1690e0ef          	jal	8002d08c <printf>
    8001e728:	4529                	li	a0,10
    8001e72a:	6500d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001e72e:	4511                	li	a0,4
    8001e730:	fd8e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e734:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e738:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e73c:	4509                	li	a0,2
    8001e73e:	fcae20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e742:	ecae20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e746:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e74a:	08200593          	li	a1,130
    8001e74e:	00019617          	auipc	a2,0x19
    8001e752:	ca260613          	addi	a2,a2,-862 # 800373f0 <__func__.0+0x7700>
    8001e756:	00012517          	auipc	a0,0x12
    8001e75a:	89a50513          	addi	a0,a0,-1894 # 8002fff0 <__func__.0+0x300>
    8001e75e:	12f0e0ef          	jal	8002d08c <printf>
    8001e762:	0003a797          	auipc	a5,0x3a
    8001e766:	8af7c783          	lbu	a5,-1873(a5) # 80058011 <excpt+0x1>
    8001e76a:	00012597          	auipc	a1,0x12
    8001e76e:	84e58593          	addi	a1,a1,-1970 # 8002ffb8 <__func__.0+0x2c8>
    8001e772:	c789                	beqz	a5,8001e77c <time_test_6+0x6e>
    8001e774:	00012597          	auipc	a1,0x12
    8001e778:	85458593          	addi	a1,a1,-1964 # 8002ffc8 <__func__.0+0x2d8>
    8001e77c:	00012517          	auipc	a0,0x12
    8001e780:	88c50513          	addi	a0,a0,-1908 # 80030008 <__func__.0+0x318>
    8001e784:	1090e0ef          	jal	8002d08c <printf>
    8001e788:	0003a797          	auipc	a5,0x3a
    8001e78c:	8897c783          	lbu	a5,-1911(a5) # 80058011 <excpt+0x1>
    8001e790:	e7a1                	bnez	a5,8001e7d8 <time_test_6+0xca>
    8001e792:	4529                	li	a0,10
    8001e794:	5e60d0ef          	jal	8002bd7a <putchar>
    8001e798:	0003a797          	auipc	a5,0x3a
    8001e79c:	8797c783          	lbu	a5,-1927(a5) # 80058011 <excpt+0x1>
    8001e7a0:	e795                	bnez	a5,8001e7cc <time_test_6+0xbe>
    8001e7a2:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e7a4:	00012597          	auipc	a1,0x12
    8001e7a8:	81458593          	addi	a1,a1,-2028 # 8002ffb8 <__func__.0+0x2c8>
    8001e7ac:	00012517          	auipc	a0,0x12
    8001e7b0:	8c450513          	addi	a0,a0,-1852 # 80030070 <__func__.0+0x380>
    8001e7b4:	0d90e0ef          	jal	8002d08c <printf>
    8001e7b8:	4511                	li	a0,4
    8001e7ba:	f4ee20ef          	jal	80000f08 <goto_priv>
    8001e7be:	914e30ef          	jal	800018d2 <reset_state>
}
    8001e7c2:	60a2                	ld	ra,8(sp)
    8001e7c4:	8522                	mv	a0,s0
    8001e7c6:	6402                	ld	s0,0(sp)
    8001e7c8:	0141                	addi	sp,sp,16
    8001e7ca:	8082                	ret
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e7cc:	4401                	li	s0,0
    TEST_END(); 
    8001e7ce:	00011597          	auipc	a1,0x11
    8001e7d2:	7fa58593          	addi	a1,a1,2042 # 8002ffc8 <__func__.0+0x2d8>
    8001e7d6:	bfd9                	j	8001e7ac <time_test_6+0x9e>
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e7d8:	00012517          	auipc	a0,0x12
    8001e7dc:	83850513          	addi	a0,a0,-1992 # 80030010 <__func__.0+0x320>
    8001e7e0:	0ad0e0ef          	jal	8002d08c <printf>
    8001e7e4:	02900513          	li	a0,41
    8001e7e8:	5920d0ef          	jal	8002bd7a <putchar>
    8001e7ec:	b75d                	j	8001e792 <time_test_6+0x84>

000000008001e7ee <time_test_7>:

bool time_test_7() {
    8001e7ee:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e7f0:	00011597          	auipc	a1,0x11
    8001e7f4:	b5858593          	addi	a1,a1,-1192 # 8002f348 <__func__.44>
    8001e7f8:	00011517          	auipc	a0,0x11
    8001e7fc:	7e050513          	addi	a0,a0,2016 # 8002ffd8 <__func__.0+0x2e8>
bool time_test_7() {
    8001e800:	e406                	sd	ra,8(sp)
    8001e802:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e804:	0890e0ef          	jal	8002d08c <printf>
    8001e808:	4529                	li	a0,10
    8001e80a:	5700d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001e80e:	4511                	li	a0,4
    8001e810:	ef8e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e814:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e818:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e81c:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001e820:	4501                	li	a0,0
    8001e822:	ee6e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e826:	de6e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e82a:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e82e:	08200593          	li	a1,130
    8001e832:	00019617          	auipc	a2,0x19
    8001e836:	c0660613          	addi	a2,a2,-1018 # 80037438 <__func__.0+0x7748>
    8001e83a:	00011517          	auipc	a0,0x11
    8001e83e:	7b650513          	addi	a0,a0,1974 # 8002fff0 <__func__.0+0x300>
    8001e842:	04b0e0ef          	jal	8002d08c <printf>
    8001e846:	00039797          	auipc	a5,0x39
    8001e84a:	7cb7c783          	lbu	a5,1995(a5) # 80058011 <excpt+0x1>
    8001e84e:	00011597          	auipc	a1,0x11
    8001e852:	76a58593          	addi	a1,a1,1898 # 8002ffb8 <__func__.0+0x2c8>
    8001e856:	c789                	beqz	a5,8001e860 <time_test_7+0x72>
    8001e858:	00011597          	auipc	a1,0x11
    8001e85c:	77058593          	addi	a1,a1,1904 # 8002ffc8 <__func__.0+0x2d8>
    8001e860:	00011517          	auipc	a0,0x11
    8001e864:	7a850513          	addi	a0,a0,1960 # 80030008 <__func__.0+0x318>
    8001e868:	0250e0ef          	jal	8002d08c <printf>
    8001e86c:	00039797          	auipc	a5,0x39
    8001e870:	7a57c783          	lbu	a5,1957(a5) # 80058011 <excpt+0x1>
    8001e874:	e7a1                	bnez	a5,8001e8bc <time_test_7+0xce>
    8001e876:	4529                	li	a0,10
    8001e878:	5020d0ef          	jal	8002bd7a <putchar>
    8001e87c:	00039797          	auipc	a5,0x39
    8001e880:	7957c783          	lbu	a5,1941(a5) # 80058011 <excpt+0x1>
    8001e884:	e795                	bnez	a5,8001e8b0 <time_test_7+0xc2>
    8001e886:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e888:	00011597          	auipc	a1,0x11
    8001e88c:	73058593          	addi	a1,a1,1840 # 8002ffb8 <__func__.0+0x2c8>
    8001e890:	00011517          	auipc	a0,0x11
    8001e894:	7e050513          	addi	a0,a0,2016 # 80030070 <__func__.0+0x380>
    8001e898:	7f40e0ef          	jal	8002d08c <printf>
    8001e89c:	4511                	li	a0,4
    8001e89e:	e6ae20ef          	jal	80000f08 <goto_priv>
    8001e8a2:	830e30ef          	jal	800018d2 <reset_state>
}
    8001e8a6:	60a2                	ld	ra,8(sp)
    8001e8a8:	8522                	mv	a0,s0
    8001e8aa:	6402                	ld	s0,0(sp)
    8001e8ac:	0141                	addi	sp,sp,16
    8001e8ae:	8082                	ret
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e8b0:	4401                	li	s0,0
    TEST_END(); 
    8001e8b2:	00011597          	auipc	a1,0x11
    8001e8b6:	71658593          	addi	a1,a1,1814 # 8002ffc8 <__func__.0+0x2d8>
    8001e8ba:	bfd9                	j	8001e890 <time_test_7+0xa2>
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e8bc:	00011517          	auipc	a0,0x11
    8001e8c0:	75450513          	addi	a0,a0,1876 # 80030010 <__func__.0+0x320>
    8001e8c4:	7c80e0ef          	jal	8002d08c <printf>
    8001e8c8:	02900513          	li	a0,41
    8001e8cc:	4ae0d0ef          	jal	8002bd7a <putchar>
    8001e8d0:	b75d                	j	8001e876 <time_test_7+0x88>

000000008001e8d2 <time_test_8>:

bool time_test_8() {
    8001e8d2:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e8d4:	00011597          	auipc	a1,0x11
    8001e8d8:	a8458593          	addi	a1,a1,-1404 # 8002f358 <__func__.43>
    8001e8dc:	00011517          	auipc	a0,0x11
    8001e8e0:	6fc50513          	addi	a0,a0,1788 # 8002ffd8 <__func__.0+0x2e8>
bool time_test_8() {
    8001e8e4:	ec06                	sd	ra,24(sp)
    8001e8e6:	e822                	sd	s0,16(sp)
    8001e8e8:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e8ea:	7a20e0ef          	jal	8002d08c <printf>
    8001e8ee:	4529                	li	a0,10
    8001e8f0:	48a0d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001e8f4:	4511                	li	a0,4
    8001e8f6:	e12e20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e8fa:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e8fe:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e902:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001e906:	4501                	li	a0,0
    8001e908:	e00e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e90c:	d00e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e910:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e914:	08200593          	li	a1,130
    8001e918:	00019617          	auipc	a2,0x19
    8001e91c:	b7860613          	addi	a2,a2,-1160 # 80037490 <__func__.0+0x77a0>
    8001e920:	00011517          	auipc	a0,0x11
    8001e924:	6d050513          	addi	a0,a0,1744 # 8002fff0 <__func__.0+0x300>
    8001e928:	7640e0ef          	jal	8002d08c <printf>
    8001e92c:	00039797          	auipc	a5,0x39
    8001e930:	6e57c783          	lbu	a5,1765(a5) # 80058011 <excpt+0x1>
    8001e934:	00039497          	auipc	s1,0x39
    8001e938:	6dc48493          	addi	s1,s1,1756 # 80058010 <excpt>
    8001e93c:	00011597          	auipc	a1,0x11
    8001e940:	68c58593          	addi	a1,a1,1676 # 8002ffc8 <__func__.0+0x2d8>
    8001e944:	cf89                	beqz	a5,8001e95e <time_test_8+0x8c>
    8001e946:	6498                	ld	a4,8(s1)
    8001e948:	47d9                	li	a5,22
    8001e94a:	00011597          	auipc	a1,0x11
    8001e94e:	66e58593          	addi	a1,a1,1646 # 8002ffb8 <__func__.0+0x2c8>
    8001e952:	00f70663          	beq	a4,a5,8001e95e <time_test_8+0x8c>
    8001e956:	00011597          	auipc	a1,0x11
    8001e95a:	67258593          	addi	a1,a1,1650 # 8002ffc8 <__func__.0+0x2d8>
    8001e95e:	00011517          	auipc	a0,0x11
    8001e962:	6aa50513          	addi	a0,a0,1706 # 80030008 <__func__.0+0x318>
    8001e966:	7260e0ef          	jal	8002d08c <printf>
    8001e96a:	00039797          	auipc	a5,0x39
    8001e96e:	6a77c783          	lbu	a5,1703(a5) # 80058011 <excpt+0x1>
    8001e972:	c789                	beqz	a5,8001e97c <time_test_8+0xaa>
    8001e974:	6498                	ld	a4,8(s1)
    8001e976:	47d9                	li	a5,22
    8001e978:	00f70c63          	beq	a4,a5,8001e990 <time_test_8+0xbe>
    8001e97c:	00011517          	auipc	a0,0x11
    8001e980:	69450513          	addi	a0,a0,1684 # 80030010 <__func__.0+0x320>
    8001e984:	7080e0ef          	jal	8002d08c <printf>
    8001e988:	02900513          	li	a0,41
    8001e98c:	3ee0d0ef          	jal	8002bd7a <putchar>
    8001e990:	4529                	li	a0,10
    8001e992:	3e80d0ef          	jal	8002bd7a <putchar>
    8001e996:	00039417          	auipc	s0,0x39
    8001e99a:	67b44403          	lbu	s0,1659(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001e99e:	00011597          	auipc	a1,0x11
    8001e9a2:	62a58593          	addi	a1,a1,1578 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e9a6:	cc11                	beqz	s0,8001e9c2 <time_test_8+0xf0>
    8001e9a8:	6498                	ld	a4,8(s1)
    8001e9aa:	47d9                	li	a5,22
    TEST_END(); 
    8001e9ac:	00011597          	auipc	a1,0x11
    8001e9b0:	60c58593          	addi	a1,a1,1548 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e9b4:	00f70763          	beq	a4,a5,8001e9c2 <time_test_8+0xf0>
    8001e9b8:	4401                	li	s0,0
    TEST_END(); 
    8001e9ba:	00011597          	auipc	a1,0x11
    8001e9be:	60e58593          	addi	a1,a1,1550 # 8002ffc8 <__func__.0+0x2d8>
    8001e9c2:	00011517          	auipc	a0,0x11
    8001e9c6:	6ae50513          	addi	a0,a0,1710 # 80030070 <__func__.0+0x380>
    8001e9ca:	6c20e0ef          	jal	8002d08c <printf>
    8001e9ce:	4511                	li	a0,4
    8001e9d0:	d38e20ef          	jal	80000f08 <goto_priv>
    8001e9d4:	effe20ef          	jal	800018d2 <reset_state>
}
    8001e9d8:	60e2                	ld	ra,24(sp)
    8001e9da:	8522                	mv	a0,s0
    8001e9dc:	6442                	ld	s0,16(sp)
    8001e9de:	64a2                	ld	s1,8(sp)
    8001e9e0:	6105                	addi	sp,sp,32
    8001e9e2:	8082                	ret

000000008001e9e4 <time_test_9>:

bool time_test_9() {
    8001e9e4:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e9e6:	00011597          	auipc	a1,0x11
    8001e9ea:	98258593          	addi	a1,a1,-1662 # 8002f368 <__func__.42>
    8001e9ee:	00011517          	auipc	a0,0x11
    8001e9f2:	5ea50513          	addi	a0,a0,1514 # 8002ffd8 <__func__.0+0x2e8>
bool time_test_9() {
    8001e9f6:	ec06                	sd	ra,24(sp)
    8001e9f8:	e822                	sd	s0,16(sp)
    8001e9fa:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e9fc:	6900e0ef          	jal	8002d08c <printf>
    8001ea00:	4529                	li	a0,10
    8001ea02:	3780d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001ea06:	4511                	li	a0,4
    8001ea08:	d00e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001ea0c:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001ea10:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001ea14:	10617073          	csrci	scounteren,2

    goto_priv(PRIV_HU);
    8001ea18:	4505                	li	a0,1
    8001ea1a:	ceee20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ea1e:	beee20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001ea22:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001ea26:	08200593          	li	a1,130
    8001ea2a:	00019617          	auipc	a2,0x19
    8001ea2e:	ad660613          	addi	a2,a2,-1322 # 80037500 <__func__.0+0x7810>
    8001ea32:	00011517          	auipc	a0,0x11
    8001ea36:	5be50513          	addi	a0,a0,1470 # 8002fff0 <__func__.0+0x300>
    8001ea3a:	6520e0ef          	jal	8002d08c <printf>
    8001ea3e:	00039797          	auipc	a5,0x39
    8001ea42:	5d37c783          	lbu	a5,1491(a5) # 80058011 <excpt+0x1>
    8001ea46:	00039497          	auipc	s1,0x39
    8001ea4a:	5ca48493          	addi	s1,s1,1482 # 80058010 <excpt>
    8001ea4e:	00011597          	auipc	a1,0x11
    8001ea52:	57a58593          	addi	a1,a1,1402 # 8002ffc8 <__func__.0+0x2d8>
    8001ea56:	cf89                	beqz	a5,8001ea70 <time_test_9+0x8c>
    8001ea58:	6498                	ld	a4,8(s1)
    8001ea5a:	4789                	li	a5,2
    8001ea5c:	00011597          	auipc	a1,0x11
    8001ea60:	55c58593          	addi	a1,a1,1372 # 8002ffb8 <__func__.0+0x2c8>
    8001ea64:	00f70663          	beq	a4,a5,8001ea70 <time_test_9+0x8c>
    8001ea68:	00011597          	auipc	a1,0x11
    8001ea6c:	56058593          	addi	a1,a1,1376 # 8002ffc8 <__func__.0+0x2d8>
    8001ea70:	00011517          	auipc	a0,0x11
    8001ea74:	59850513          	addi	a0,a0,1432 # 80030008 <__func__.0+0x318>
    8001ea78:	6140e0ef          	jal	8002d08c <printf>
    8001ea7c:	00039797          	auipc	a5,0x39
    8001ea80:	5957c783          	lbu	a5,1429(a5) # 80058011 <excpt+0x1>
    8001ea84:	c789                	beqz	a5,8001ea8e <time_test_9+0xaa>
    8001ea86:	6498                	ld	a4,8(s1)
    8001ea88:	4789                	li	a5,2
    8001ea8a:	00f70c63          	beq	a4,a5,8001eaa2 <time_test_9+0xbe>
    8001ea8e:	00011517          	auipc	a0,0x11
    8001ea92:	58250513          	addi	a0,a0,1410 # 80030010 <__func__.0+0x320>
    8001ea96:	5f60e0ef          	jal	8002d08c <printf>
    8001ea9a:	02900513          	li	a0,41
    8001ea9e:	2dc0d0ef          	jal	8002bd7a <putchar>
    8001eaa2:	4529                	li	a0,10
    8001eaa4:	2d60d0ef          	jal	8002bd7a <putchar>
    8001eaa8:	00039417          	auipc	s0,0x39
    8001eaac:	56944403          	lbu	s0,1385(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001eab0:	00011597          	auipc	a1,0x11
    8001eab4:	51858593          	addi	a1,a1,1304 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001eab8:	cc11                	beqz	s0,8001ead4 <time_test_9+0xf0>
    8001eaba:	6498                	ld	a4,8(s1)
    8001eabc:	4789                	li	a5,2
    TEST_END(); 
    8001eabe:	00011597          	auipc	a1,0x11
    8001eac2:	4fa58593          	addi	a1,a1,1274 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001eac6:	00f70763          	beq	a4,a5,8001ead4 <time_test_9+0xf0>
    8001eaca:	4401                	li	s0,0
    TEST_END(); 
    8001eacc:	00011597          	auipc	a1,0x11
    8001ead0:	4fc58593          	addi	a1,a1,1276 # 8002ffc8 <__func__.0+0x2d8>
    8001ead4:	00011517          	auipc	a0,0x11
    8001ead8:	59c50513          	addi	a0,a0,1436 # 80030070 <__func__.0+0x380>
    8001eadc:	5b00e0ef          	jal	8002d08c <printf>
    8001eae0:	4511                	li	a0,4
    8001eae2:	c26e20ef          	jal	80000f08 <goto_priv>
    8001eae6:	dede20ef          	jal	800018d2 <reset_state>
}
    8001eaea:	60e2                	ld	ra,24(sp)
    8001eaec:	8522                	mv	a0,s0
    8001eaee:	6442                	ld	s0,16(sp)
    8001eaf0:	64a2                	ld	s1,8(sp)
    8001eaf2:	6105                	addi	sp,sp,32
    8001eaf4:	8082                	ret

000000008001eaf6 <time_test_10>:

bool time_test_10() {
    8001eaf6:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001eaf8:	00011597          	auipc	a1,0x11
    8001eafc:	88058593          	addi	a1,a1,-1920 # 8002f378 <__func__.41>
    8001eb00:	00011517          	auipc	a0,0x11
    8001eb04:	4d850513          	addi	a0,a0,1240 # 8002ffd8 <__func__.0+0x2e8>
bool time_test_10() {
    8001eb08:	e406                	sd	ra,8(sp)
    8001eb0a:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001eb0c:	5800e0ef          	jal	8002d08c <printf>
    8001eb10:	4529                	li	a0,10
    8001eb12:	2680d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001eb16:	4511                	li	a0,4
    8001eb18:	bf0e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001eb1c:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001eb20:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001eb24:	4509                	li	a0,2
    8001eb26:	be2e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eb2a:	ae2e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    8001eb2e:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001eb32:	08200593          	li	a1,130
    8001eb36:	00019617          	auipc	a2,0x19
    8001eb3a:	a3a60613          	addi	a2,a2,-1478 # 80037570 <__func__.0+0x7880>
    8001eb3e:	00011517          	auipc	a0,0x11
    8001eb42:	4b250513          	addi	a0,a0,1202 # 8002fff0 <__func__.0+0x300>
    8001eb46:	5460e0ef          	jal	8002d08c <printf>
    8001eb4a:	00039797          	auipc	a5,0x39
    8001eb4e:	4c77c783          	lbu	a5,1223(a5) # 80058011 <excpt+0x1>
    8001eb52:	00011597          	auipc	a1,0x11
    8001eb56:	46658593          	addi	a1,a1,1126 # 8002ffb8 <__func__.0+0x2c8>
    8001eb5a:	c789                	beqz	a5,8001eb64 <time_test_10+0x6e>
    8001eb5c:	00011597          	auipc	a1,0x11
    8001eb60:	46c58593          	addi	a1,a1,1132 # 8002ffc8 <__func__.0+0x2d8>
    8001eb64:	00011517          	auipc	a0,0x11
    8001eb68:	4a450513          	addi	a0,a0,1188 # 80030008 <__func__.0+0x318>
    8001eb6c:	5200e0ef          	jal	8002d08c <printf>
    8001eb70:	00039797          	auipc	a5,0x39
    8001eb74:	4a17c783          	lbu	a5,1185(a5) # 80058011 <excpt+0x1>
    8001eb78:	e7a1                	bnez	a5,8001ebc0 <time_test_10+0xca>
    8001eb7a:	4529                	li	a0,10
    8001eb7c:	1fe0d0ef          	jal	8002bd7a <putchar>
    8001eb80:	00039797          	auipc	a5,0x39
    8001eb84:	4917c783          	lbu	a5,1169(a5) # 80058011 <excpt+0x1>
    8001eb88:	e795                	bnez	a5,8001ebb4 <time_test_10+0xbe>
    8001eb8a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001eb8c:	00011597          	auipc	a1,0x11
    8001eb90:	42c58593          	addi	a1,a1,1068 # 8002ffb8 <__func__.0+0x2c8>
    8001eb94:	00011517          	auipc	a0,0x11
    8001eb98:	4dc50513          	addi	a0,a0,1244 # 80030070 <__func__.0+0x380>
    8001eb9c:	4f00e0ef          	jal	8002d08c <printf>
    8001eba0:	4511                	li	a0,4
    8001eba2:	b66e20ef          	jal	80000f08 <goto_priv>
    8001eba6:	d2de20ef          	jal	800018d2 <reset_state>
}
    8001ebaa:	60a2                	ld	ra,8(sp)
    8001ebac:	8522                	mv	a0,s0
    8001ebae:	6402                	ld	s0,0(sp)
    8001ebb0:	0141                	addi	sp,sp,16
    8001ebb2:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001ebb4:	4401                	li	s0,0
    TEST_END(); 
    8001ebb6:	00011597          	auipc	a1,0x11
    8001ebba:	41258593          	addi	a1,a1,1042 # 8002ffc8 <__func__.0+0x2d8>
    8001ebbe:	bfd9                	j	8001eb94 <time_test_10+0x9e>
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001ebc0:	00011517          	auipc	a0,0x11
    8001ebc4:	45050513          	addi	a0,a0,1104 # 80030010 <__func__.0+0x320>
    8001ebc8:	4c40e0ef          	jal	8002d08c <printf>
    8001ebcc:	02900513          	li	a0,41
    8001ebd0:	1aa0d0ef          	jal	8002bd7a <putchar>
    8001ebd4:	b75d                	j	8001eb7a <time_test_10+0x84>

000000008001ebd6 <cycle_test_1>:


bool cycle_test_1() {
    8001ebd6:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ebd8:	00010597          	auipc	a1,0x10
    8001ebdc:	7b058593          	addi	a1,a1,1968 # 8002f388 <__func__.40>
    8001ebe0:	00011517          	auipc	a0,0x11
    8001ebe4:	3f850513          	addi	a0,a0,1016 # 8002ffd8 <__func__.0+0x2e8>
bool cycle_test_1() {
    8001ebe8:	ec06                	sd	ra,24(sp)
    8001ebea:	e822                	sd	s0,16(sp)
    8001ebec:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001ebee:	49e0e0ef          	jal	8002d08c <printf>
    8001ebf2:	4529                	li	a0,10
    8001ebf4:	1860d0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001ebf8:	4511                	li	a0,4
    8001ebfa:	b0ee20ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8001ebfe:	3060f073          	csrci	mcounteren,1

    goto_priv(PRIV_VS);
    8001ec02:	4509                	li	a0,2
    8001ec04:	b04e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ec08:	a04e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ec0c:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ec10:	08200593          	li	a1,130
    8001ec14:	00019617          	auipc	a2,0x19
    8001ec18:	9ac60613          	addi	a2,a2,-1620 # 800375c0 <__func__.0+0x78d0>
    8001ec1c:	00011517          	auipc	a0,0x11
    8001ec20:	3d450513          	addi	a0,a0,980 # 8002fff0 <__func__.0+0x300>
    8001ec24:	4680e0ef          	jal	8002d08c <printf>
    8001ec28:	00039797          	auipc	a5,0x39
    8001ec2c:	3e97c783          	lbu	a5,1001(a5) # 80058011 <excpt+0x1>
    8001ec30:	00039497          	auipc	s1,0x39
    8001ec34:	3e048493          	addi	s1,s1,992 # 80058010 <excpt>
    8001ec38:	00011597          	auipc	a1,0x11
    8001ec3c:	39058593          	addi	a1,a1,912 # 8002ffc8 <__func__.0+0x2d8>
    8001ec40:	cf89                	beqz	a5,8001ec5a <cycle_test_1+0x84>
    8001ec42:	6498                	ld	a4,8(s1)
    8001ec44:	4789                	li	a5,2
    8001ec46:	00011597          	auipc	a1,0x11
    8001ec4a:	37258593          	addi	a1,a1,882 # 8002ffb8 <__func__.0+0x2c8>
    8001ec4e:	00f70663          	beq	a4,a5,8001ec5a <cycle_test_1+0x84>
    8001ec52:	00011597          	auipc	a1,0x11
    8001ec56:	37658593          	addi	a1,a1,886 # 8002ffc8 <__func__.0+0x2d8>
    8001ec5a:	00011517          	auipc	a0,0x11
    8001ec5e:	3ae50513          	addi	a0,a0,942 # 80030008 <__func__.0+0x318>
    8001ec62:	42a0e0ef          	jal	8002d08c <printf>
    8001ec66:	00039797          	auipc	a5,0x39
    8001ec6a:	3ab7c783          	lbu	a5,939(a5) # 80058011 <excpt+0x1>
    8001ec6e:	c789                	beqz	a5,8001ec78 <cycle_test_1+0xa2>
    8001ec70:	6498                	ld	a4,8(s1)
    8001ec72:	4789                	li	a5,2
    8001ec74:	00f70c63          	beq	a4,a5,8001ec8c <cycle_test_1+0xb6>
    8001ec78:	00011517          	auipc	a0,0x11
    8001ec7c:	39850513          	addi	a0,a0,920 # 80030010 <__func__.0+0x320>
    8001ec80:	40c0e0ef          	jal	8002d08c <printf>
    8001ec84:	02900513          	li	a0,41
    8001ec88:	0f20d0ef          	jal	8002bd7a <putchar>
    8001ec8c:	4529                	li	a0,10
    8001ec8e:	0ec0d0ef          	jal	8002bd7a <putchar>
    8001ec92:	00039797          	auipc	a5,0x39
    8001ec96:	37f7c783          	lbu	a5,895(a5) # 80058011 <excpt+0x1>
    8001ec9a:	4401                	li	s0,0
    8001ec9c:	c789                	beqz	a5,8001eca6 <cycle_test_1+0xd0>
    8001ec9e:	6480                	ld	s0,8(s1)
    8001eca0:	1479                	addi	s0,s0,-2
    8001eca2:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001eca6:	450d                	li	a0,3
    8001eca8:	a60e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ecac:	960e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ecb0:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ecb4:	08200593          	li	a1,130
    8001ecb8:	00019617          	auipc	a2,0x19
    8001ecbc:	95860613          	addi	a2,a2,-1704 # 80037610 <__func__.0+0x7920>
    8001ecc0:	00011517          	auipc	a0,0x11
    8001ecc4:	33050513          	addi	a0,a0,816 # 8002fff0 <__func__.0+0x300>
    8001ecc8:	3c40e0ef          	jal	8002d08c <printf>
    8001eccc:	00039797          	auipc	a5,0x39
    8001ecd0:	3457c783          	lbu	a5,837(a5) # 80058011 <excpt+0x1>
    8001ecd4:	00011597          	auipc	a1,0x11
    8001ecd8:	2f458593          	addi	a1,a1,756 # 8002ffc8 <__func__.0+0x2d8>
    8001ecdc:	cf89                	beqz	a5,8001ecf6 <cycle_test_1+0x120>
    8001ecde:	6498                	ld	a4,8(s1)
    8001ece0:	4789                	li	a5,2
    8001ece2:	00011597          	auipc	a1,0x11
    8001ece6:	2d658593          	addi	a1,a1,726 # 8002ffb8 <__func__.0+0x2c8>
    8001ecea:	00f70663          	beq	a4,a5,8001ecf6 <cycle_test_1+0x120>
    8001ecee:	00011597          	auipc	a1,0x11
    8001ecf2:	2da58593          	addi	a1,a1,730 # 8002ffc8 <__func__.0+0x2d8>
    8001ecf6:	00011517          	auipc	a0,0x11
    8001ecfa:	31250513          	addi	a0,a0,786 # 80030008 <__func__.0+0x318>
    8001ecfe:	38e0e0ef          	jal	8002d08c <printf>
    8001ed02:	00039797          	auipc	a5,0x39
    8001ed06:	30f7c783          	lbu	a5,783(a5) # 80058011 <excpt+0x1>
    8001ed0a:	c789                	beqz	a5,8001ed14 <cycle_test_1+0x13e>
    8001ed0c:	6498                	ld	a4,8(s1)
    8001ed0e:	4789                	li	a5,2
    8001ed10:	00f70c63          	beq	a4,a5,8001ed28 <cycle_test_1+0x152>
    8001ed14:	00011517          	auipc	a0,0x11
    8001ed18:	2fc50513          	addi	a0,a0,764 # 80030010 <__func__.0+0x320>
    8001ed1c:	3700e0ef          	jal	8002d08c <printf>
    8001ed20:	02900513          	li	a0,41
    8001ed24:	0560d0ef          	jal	8002bd7a <putchar>
    8001ed28:	4529                	li	a0,10
    8001ed2a:	0500d0ef          	jal	8002bd7a <putchar>
    8001ed2e:	c801                	beqz	s0,8001ed3e <cycle_test_1+0x168>
    8001ed30:	00039797          	auipc	a5,0x39
    8001ed34:	2e17c783          	lbu	a5,737(a5) # 80058011 <excpt+0x1>
    8001ed38:	4401                	li	s0,0
    8001ed3a:	16079f63          	bnez	a5,8001eeb8 <cycle_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001ed3e:	4501                	li	a0,0
    8001ed40:	9c8e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ed44:	8c8e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ed48:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ed4c:	08200593          	li	a1,130
    8001ed50:	00019617          	auipc	a2,0x19
    8001ed54:	91060613          	addi	a2,a2,-1776 # 80037660 <__func__.0+0x7970>
    8001ed58:	00011517          	auipc	a0,0x11
    8001ed5c:	29850513          	addi	a0,a0,664 # 8002fff0 <__func__.0+0x300>
    8001ed60:	32c0e0ef          	jal	8002d08c <printf>
    8001ed64:	00039797          	auipc	a5,0x39
    8001ed68:	2ad7c783          	lbu	a5,685(a5) # 80058011 <excpt+0x1>
    8001ed6c:	00011597          	auipc	a1,0x11
    8001ed70:	25c58593          	addi	a1,a1,604 # 8002ffc8 <__func__.0+0x2d8>
    8001ed74:	cf89                	beqz	a5,8001ed8e <cycle_test_1+0x1b8>
    8001ed76:	6498                	ld	a4,8(s1)
    8001ed78:	4789                	li	a5,2
    8001ed7a:	00011597          	auipc	a1,0x11
    8001ed7e:	23e58593          	addi	a1,a1,574 # 8002ffb8 <__func__.0+0x2c8>
    8001ed82:	00f70663          	beq	a4,a5,8001ed8e <cycle_test_1+0x1b8>
    8001ed86:	00011597          	auipc	a1,0x11
    8001ed8a:	24258593          	addi	a1,a1,578 # 8002ffc8 <__func__.0+0x2d8>
    8001ed8e:	00011517          	auipc	a0,0x11
    8001ed92:	27a50513          	addi	a0,a0,634 # 80030008 <__func__.0+0x318>
    8001ed96:	2f60e0ef          	jal	8002d08c <printf>
    8001ed9a:	00039797          	auipc	a5,0x39
    8001ed9e:	2777c783          	lbu	a5,631(a5) # 80058011 <excpt+0x1>
    8001eda2:	c789                	beqz	a5,8001edac <cycle_test_1+0x1d6>
    8001eda4:	6498                	ld	a4,8(s1)
    8001eda6:	4789                	li	a5,2
    8001eda8:	00f70c63          	beq	a4,a5,8001edc0 <cycle_test_1+0x1ea>
    8001edac:	00011517          	auipc	a0,0x11
    8001edb0:	26450513          	addi	a0,a0,612 # 80030010 <__func__.0+0x320>
    8001edb4:	2d80e0ef          	jal	8002d08c <printf>
    8001edb8:	02900513          	li	a0,41
    8001edbc:	7bf0c0ef          	jal	8002bd7a <putchar>
    8001edc0:	4529                	li	a0,10
    8001edc2:	7b90c0ef          	jal	8002bd7a <putchar>
    8001edc6:	c801                	beqz	s0,8001edd6 <cycle_test_1+0x200>
    8001edc8:	00039797          	auipc	a5,0x39
    8001edcc:	2497c783          	lbu	a5,585(a5) # 80058011 <excpt+0x1>
    8001edd0:	4401                	li	s0,0
    8001edd2:	0c079e63          	bnez	a5,8001eeae <cycle_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001edd6:	4505                	li	a0,1
    8001edd8:	930e20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eddc:	830e20ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ede0:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ede4:	08200593          	li	a1,130
    8001ede8:	00019617          	auipc	a2,0x19
    8001edec:	8c860613          	addi	a2,a2,-1848 # 800376b0 <__func__.0+0x79c0>
    8001edf0:	00011517          	auipc	a0,0x11
    8001edf4:	20050513          	addi	a0,a0,512 # 8002fff0 <__func__.0+0x300>
    8001edf8:	2940e0ef          	jal	8002d08c <printf>
    8001edfc:	00039797          	auipc	a5,0x39
    8001ee00:	2157c783          	lbu	a5,533(a5) # 80058011 <excpt+0x1>
    8001ee04:	00011597          	auipc	a1,0x11
    8001ee08:	1c458593          	addi	a1,a1,452 # 8002ffc8 <__func__.0+0x2d8>
    8001ee0c:	cf89                	beqz	a5,8001ee26 <cycle_test_1+0x250>
    8001ee0e:	6498                	ld	a4,8(s1)
    8001ee10:	4789                	li	a5,2
    8001ee12:	00011597          	auipc	a1,0x11
    8001ee16:	1a658593          	addi	a1,a1,422 # 8002ffb8 <__func__.0+0x2c8>
    8001ee1a:	00f70663          	beq	a4,a5,8001ee26 <cycle_test_1+0x250>
    8001ee1e:	00011597          	auipc	a1,0x11
    8001ee22:	1aa58593          	addi	a1,a1,426 # 8002ffc8 <__func__.0+0x2d8>
    8001ee26:	00011517          	auipc	a0,0x11
    8001ee2a:	1e250513          	addi	a0,a0,482 # 80030008 <__func__.0+0x318>
    8001ee2e:	25e0e0ef          	jal	8002d08c <printf>
    8001ee32:	00039797          	auipc	a5,0x39
    8001ee36:	1df7c783          	lbu	a5,479(a5) # 80058011 <excpt+0x1>
    8001ee3a:	c789                	beqz	a5,8001ee44 <cycle_test_1+0x26e>
    8001ee3c:	6498                	ld	a4,8(s1)
    8001ee3e:	4789                	li	a5,2
    8001ee40:	00f70c63          	beq	a4,a5,8001ee58 <cycle_test_1+0x282>
    8001ee44:	00011517          	auipc	a0,0x11
    8001ee48:	1cc50513          	addi	a0,a0,460 # 80030010 <__func__.0+0x320>
    8001ee4c:	2400e0ef          	jal	8002d08c <printf>
    8001ee50:	02900513          	li	a0,41
    8001ee54:	7270c0ef          	jal	8002bd7a <putchar>
    8001ee58:	4529                	li	a0,10
    8001ee5a:	7210c0ef          	jal	8002bd7a <putchar>
    8001ee5e:	c015                	beqz	s0,8001ee82 <cycle_test_1+0x2ac>
    8001ee60:	00039417          	auipc	s0,0x39
    8001ee64:	1b144403          	lbu	s0,433(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001ee68:	00011597          	auipc	a1,0x11
    8001ee6c:	16058593          	addi	a1,a1,352 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ee70:	cc11                	beqz	s0,8001ee8c <cycle_test_1+0x2b6>
    8001ee72:	6498                	ld	a4,8(s1)
    8001ee74:	4789                	li	a5,2
    TEST_END(); 
    8001ee76:	00011597          	auipc	a1,0x11
    8001ee7a:	14258593          	addi	a1,a1,322 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ee7e:	00f70763          	beq	a4,a5,8001ee8c <cycle_test_1+0x2b6>
    8001ee82:	4401                	li	s0,0
    TEST_END(); 
    8001ee84:	00011597          	auipc	a1,0x11
    8001ee88:	14458593          	addi	a1,a1,324 # 8002ffc8 <__func__.0+0x2d8>
    8001ee8c:	00011517          	auipc	a0,0x11
    8001ee90:	1e450513          	addi	a0,a0,484 # 80030070 <__func__.0+0x380>
    8001ee94:	1f80e0ef          	jal	8002d08c <printf>
    8001ee98:	4511                	li	a0,4
    8001ee9a:	86ee20ef          	jal	80000f08 <goto_priv>
    8001ee9e:	a35e20ef          	jal	800018d2 <reset_state>
}
    8001eea2:	60e2                	ld	ra,24(sp)
    8001eea4:	8522                	mv	a0,s0
    8001eea6:	6442                	ld	s0,16(sp)
    8001eea8:	64a2                	ld	s1,8(sp)
    8001eeaa:	6105                	addi	sp,sp,32
    8001eeac:	8082                	ret
    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001eeae:	6480                	ld	s0,8(s1)
    8001eeb0:	1479                	addi	s0,s0,-2
    8001eeb2:	00143413          	seqz	s0,s0
    8001eeb6:	b705                	j	8001edd6 <cycle_test_1+0x200>
    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001eeb8:	6480                	ld	s0,8(s1)
    8001eeba:	1479                	addi	s0,s0,-2
    8001eebc:	00143413          	seqz	s0,s0
    8001eec0:	bdbd                	j	8001ed3e <cycle_test_1+0x168>

000000008001eec2 <cycle_test_2>:

bool cycle_test_2() {
    8001eec2:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001eec4:	00010597          	auipc	a1,0x10
    8001eec8:	4d458593          	addi	a1,a1,1236 # 8002f398 <__func__.39>
    8001eecc:	00011517          	auipc	a0,0x11
    8001eed0:	10c50513          	addi	a0,a0,268 # 8002ffd8 <__func__.0+0x2e8>
bool cycle_test_2() {
    8001eed4:	e406                	sd	ra,8(sp)
    8001eed6:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001eed8:	1b40e0ef          	jal	8002d08c <printf>
    8001eedc:	4529                	li	a0,10
    8001eede:	69d0c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001eee2:	4511                	li	a0,4
    8001eee4:	824e20ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8001eee8:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HS);
    8001eeec:	450d                	li	a0,3
    8001eeee:	81ae20ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eef2:	f1be10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001eef6:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001eefa:	08200593          	li	a1,130
    8001eefe:	00019617          	auipc	a2,0x19
    8001ef02:	80260613          	addi	a2,a2,-2046 # 80037700 <__func__.0+0x7a10>
    8001ef06:	00011517          	auipc	a0,0x11
    8001ef0a:	0ea50513          	addi	a0,a0,234 # 8002fff0 <__func__.0+0x300>
    8001ef0e:	17e0e0ef          	jal	8002d08c <printf>
    8001ef12:	00039797          	auipc	a5,0x39
    8001ef16:	0ff7c783          	lbu	a5,255(a5) # 80058011 <excpt+0x1>
    8001ef1a:	00011597          	auipc	a1,0x11
    8001ef1e:	09e58593          	addi	a1,a1,158 # 8002ffb8 <__func__.0+0x2c8>
    8001ef22:	c789                	beqz	a5,8001ef2c <cycle_test_2+0x6a>
    8001ef24:	00011597          	auipc	a1,0x11
    8001ef28:	0a458593          	addi	a1,a1,164 # 8002ffc8 <__func__.0+0x2d8>
    8001ef2c:	00011517          	auipc	a0,0x11
    8001ef30:	0dc50513          	addi	a0,a0,220 # 80030008 <__func__.0+0x318>
    8001ef34:	1580e0ef          	jal	8002d08c <printf>
    8001ef38:	00039797          	auipc	a5,0x39
    8001ef3c:	0d97c783          	lbu	a5,217(a5) # 80058011 <excpt+0x1>
    8001ef40:	e7a1                	bnez	a5,8001ef88 <cycle_test_2+0xc6>
    8001ef42:	4529                	li	a0,10
    8001ef44:	6370c0ef          	jal	8002bd7a <putchar>
    8001ef48:	00039797          	auipc	a5,0x39
    8001ef4c:	0c97c783          	lbu	a5,201(a5) # 80058011 <excpt+0x1>
    8001ef50:	e795                	bnez	a5,8001ef7c <cycle_test_2+0xba>
    8001ef52:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001ef54:	00011597          	auipc	a1,0x11
    8001ef58:	06458593          	addi	a1,a1,100 # 8002ffb8 <__func__.0+0x2c8>
    8001ef5c:	00011517          	auipc	a0,0x11
    8001ef60:	11450513          	addi	a0,a0,276 # 80030070 <__func__.0+0x380>
    8001ef64:	1280e0ef          	jal	8002d08c <printf>
    8001ef68:	4511                	li	a0,4
    8001ef6a:	f9fe10ef          	jal	80000f08 <goto_priv>
    8001ef6e:	965e20ef          	jal	800018d2 <reset_state>
}
    8001ef72:	60a2                	ld	ra,8(sp)
    8001ef74:	8522                	mv	a0,s0
    8001ef76:	6402                	ld	s0,0(sp)
    8001ef78:	0141                	addi	sp,sp,16
    8001ef7a:	8082                	ret
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001ef7c:	4401                	li	s0,0
    TEST_END(); 
    8001ef7e:	00011597          	auipc	a1,0x11
    8001ef82:	04a58593          	addi	a1,a1,74 # 8002ffc8 <__func__.0+0x2d8>
    8001ef86:	bfd9                	j	8001ef5c <cycle_test_2+0x9a>
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001ef88:	00011517          	auipc	a0,0x11
    8001ef8c:	08850513          	addi	a0,a0,136 # 80030010 <__func__.0+0x320>
    8001ef90:	0fc0e0ef          	jal	8002d08c <printf>
    8001ef94:	02900513          	li	a0,41
    8001ef98:	5e30c0ef          	jal	8002bd7a <putchar>
    8001ef9c:	b75d                	j	8001ef42 <cycle_test_2+0x80>

000000008001ef9e <cycle_test_3>:

bool cycle_test_3() {
    8001ef9e:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001efa0:	00010597          	auipc	a1,0x10
    8001efa4:	40858593          	addi	a1,a1,1032 # 8002f3a8 <__func__.38>
    8001efa8:	00011517          	auipc	a0,0x11
    8001efac:	03050513          	addi	a0,a0,48 # 8002ffd8 <__func__.0+0x2e8>
bool cycle_test_3() {
    8001efb0:	ec06                	sd	ra,24(sp)
    8001efb2:	e822                	sd	s0,16(sp)
    8001efb4:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001efb6:	0d60e0ef          	jal	8002d08c <printf>
    8001efba:	4529                	li	a0,10
    8001efbc:	5bf0c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001efc0:	4511                	li	a0,4
    8001efc2:	f47e10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001efc6:	1060f073          	csrci	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001efca:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    8001efce:	4505                	li	a0,1
    8001efd0:	f39e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001efd4:	e39e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001efd8:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001efdc:	08200593          	li	a1,130
    8001efe0:	00018617          	auipc	a2,0x18
    8001efe4:	75860613          	addi	a2,a2,1880 # 80037738 <__func__.0+0x7a48>
    8001efe8:	00011517          	auipc	a0,0x11
    8001efec:	00850513          	addi	a0,a0,8 # 8002fff0 <__func__.0+0x300>
    8001eff0:	09c0e0ef          	jal	8002d08c <printf>
    8001eff4:	00039797          	auipc	a5,0x39
    8001eff8:	01d7c783          	lbu	a5,29(a5) # 80058011 <excpt+0x1>
    8001effc:	00039497          	auipc	s1,0x39
    8001f000:	01448493          	addi	s1,s1,20 # 80058010 <excpt>
    8001f004:	00011597          	auipc	a1,0x11
    8001f008:	fc458593          	addi	a1,a1,-60 # 8002ffc8 <__func__.0+0x2d8>
    8001f00c:	cf89                	beqz	a5,8001f026 <cycle_test_3+0x88>
    8001f00e:	6498                	ld	a4,8(s1)
    8001f010:	4789                	li	a5,2
    8001f012:	00011597          	auipc	a1,0x11
    8001f016:	fa658593          	addi	a1,a1,-90 # 8002ffb8 <__func__.0+0x2c8>
    8001f01a:	00f70663          	beq	a4,a5,8001f026 <cycle_test_3+0x88>
    8001f01e:	00011597          	auipc	a1,0x11
    8001f022:	faa58593          	addi	a1,a1,-86 # 8002ffc8 <__func__.0+0x2d8>
    8001f026:	00011517          	auipc	a0,0x11
    8001f02a:	fe250513          	addi	a0,a0,-30 # 80030008 <__func__.0+0x318>
    8001f02e:	05e0e0ef          	jal	8002d08c <printf>
    8001f032:	00039797          	auipc	a5,0x39
    8001f036:	fdf7c783          	lbu	a5,-33(a5) # 80058011 <excpt+0x1>
    8001f03a:	c789                	beqz	a5,8001f044 <cycle_test_3+0xa6>
    8001f03c:	6498                	ld	a4,8(s1)
    8001f03e:	4789                	li	a5,2
    8001f040:	00f70c63          	beq	a4,a5,8001f058 <cycle_test_3+0xba>
    8001f044:	00011517          	auipc	a0,0x11
    8001f048:	fcc50513          	addi	a0,a0,-52 # 80030010 <__func__.0+0x320>
    8001f04c:	0400e0ef          	jal	8002d08c <printf>
    8001f050:	02900513          	li	a0,41
    8001f054:	5270c0ef          	jal	8002bd7a <putchar>
    8001f058:	4529                	li	a0,10
    8001f05a:	5210c0ef          	jal	8002bd7a <putchar>
    8001f05e:	00039417          	auipc	s0,0x39
    8001f062:	fb344403          	lbu	s0,-77(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f066:	00011597          	auipc	a1,0x11
    8001f06a:	f6258593          	addi	a1,a1,-158 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001f06e:	cc11                	beqz	s0,8001f08a <cycle_test_3+0xec>
    8001f070:	6498                	ld	a4,8(s1)
    8001f072:	4789                	li	a5,2
    TEST_END(); 
    8001f074:	00011597          	auipc	a1,0x11
    8001f078:	f4458593          	addi	a1,a1,-188 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001f07c:	00f70763          	beq	a4,a5,8001f08a <cycle_test_3+0xec>
    8001f080:	4401                	li	s0,0
    TEST_END(); 
    8001f082:	00011597          	auipc	a1,0x11
    8001f086:	f4658593          	addi	a1,a1,-186 # 8002ffc8 <__func__.0+0x2d8>
    8001f08a:	00011517          	auipc	a0,0x11
    8001f08e:	fe650513          	addi	a0,a0,-26 # 80030070 <__func__.0+0x380>
    8001f092:	7fb0d0ef          	jal	8002d08c <printf>
    8001f096:	4511                	li	a0,4
    8001f098:	e71e10ef          	jal	80000f08 <goto_priv>
    8001f09c:	837e20ef          	jal	800018d2 <reset_state>
}
    8001f0a0:	60e2                	ld	ra,24(sp)
    8001f0a2:	8522                	mv	a0,s0
    8001f0a4:	6442                	ld	s0,16(sp)
    8001f0a6:	64a2                	ld	s1,8(sp)
    8001f0a8:	6105                	addi	sp,sp,32
    8001f0aa:	8082                	ret

000000008001f0ac <cycle_test_4>:

bool cycle_test_4() {
    8001f0ac:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f0ae:	00010597          	auipc	a1,0x10
    8001f0b2:	30a58593          	addi	a1,a1,778 # 8002f3b8 <__func__.37>
    8001f0b6:	00011517          	auipc	a0,0x11
    8001f0ba:	f2250513          	addi	a0,a0,-222 # 8002ffd8 <__func__.0+0x2e8>
bool cycle_test_4() {
    8001f0be:	e406                	sd	ra,8(sp)
    8001f0c0:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f0c2:	7cb0d0ef          	jal	8002d08c <printf>
    8001f0c6:	4529                	li	a0,10
    8001f0c8:	4b30c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001f0cc:	4511                	li	a0,4
    8001f0ce:	e3be10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f0d2:	1060e073          	csrsi	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f0d6:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    8001f0da:	4505                	li	a0,1
    8001f0dc:	e2de10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f0e0:	d2de10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f0e4:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001f0e8:	08200593          	li	a1,130
    8001f0ec:	00018617          	auipc	a2,0x18
    8001f0f0:	69c60613          	addi	a2,a2,1692 # 80037788 <__func__.0+0x7a98>
    8001f0f4:	00011517          	auipc	a0,0x11
    8001f0f8:	efc50513          	addi	a0,a0,-260 # 8002fff0 <__func__.0+0x300>
    8001f0fc:	7910d0ef          	jal	8002d08c <printf>
    8001f100:	00039797          	auipc	a5,0x39
    8001f104:	f117c783          	lbu	a5,-239(a5) # 80058011 <excpt+0x1>
    8001f108:	00011597          	auipc	a1,0x11
    8001f10c:	eb058593          	addi	a1,a1,-336 # 8002ffb8 <__func__.0+0x2c8>
    8001f110:	c789                	beqz	a5,8001f11a <cycle_test_4+0x6e>
    8001f112:	00011597          	auipc	a1,0x11
    8001f116:	eb658593          	addi	a1,a1,-330 # 8002ffc8 <__func__.0+0x2d8>
    8001f11a:	00011517          	auipc	a0,0x11
    8001f11e:	eee50513          	addi	a0,a0,-274 # 80030008 <__func__.0+0x318>
    8001f122:	76b0d0ef          	jal	8002d08c <printf>
    8001f126:	00039797          	auipc	a5,0x39
    8001f12a:	eeb7c783          	lbu	a5,-277(a5) # 80058011 <excpt+0x1>
    8001f12e:	e7a1                	bnez	a5,8001f176 <cycle_test_4+0xca>
    8001f130:	4529                	li	a0,10
    8001f132:	4490c0ef          	jal	8002bd7a <putchar>
    8001f136:	00039797          	auipc	a5,0x39
    8001f13a:	edb7c783          	lbu	a5,-293(a5) # 80058011 <excpt+0x1>
    8001f13e:	e795                	bnez	a5,8001f16a <cycle_test_4+0xbe>
    8001f140:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f142:	00011597          	auipc	a1,0x11
    8001f146:	e7658593          	addi	a1,a1,-394 # 8002ffb8 <__func__.0+0x2c8>
    8001f14a:	00011517          	auipc	a0,0x11
    8001f14e:	f2650513          	addi	a0,a0,-218 # 80030070 <__func__.0+0x380>
    8001f152:	73b0d0ef          	jal	8002d08c <printf>
    8001f156:	4511                	li	a0,4
    8001f158:	db1e10ef          	jal	80000f08 <goto_priv>
    8001f15c:	f76e20ef          	jal	800018d2 <reset_state>
}
    8001f160:	60a2                	ld	ra,8(sp)
    8001f162:	8522                	mv	a0,s0
    8001f164:	6402                	ld	s0,0(sp)
    8001f166:	0141                	addi	sp,sp,16
    8001f168:	8082                	ret
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001f16a:	4401                	li	s0,0
    TEST_END(); 
    8001f16c:	00011597          	auipc	a1,0x11
    8001f170:	e5c58593          	addi	a1,a1,-420 # 8002ffc8 <__func__.0+0x2d8>
    8001f174:	bfd9                	j	8001f14a <cycle_test_4+0x9e>
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001f176:	00011517          	auipc	a0,0x11
    8001f17a:	e9a50513          	addi	a0,a0,-358 # 80030010 <__func__.0+0x320>
    8001f17e:	70f0d0ef          	jal	8002d08c <printf>
    8001f182:	02900513          	li	a0,41
    8001f186:	3f50c0ef          	jal	8002bd7a <putchar>
    8001f18a:	b75d                	j	8001f130 <cycle_test_4+0x84>

000000008001f18c <cycle_test_5>:

bool cycle_test_5() {
    8001f18c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f18e:	00010597          	auipc	a1,0x10
    8001f192:	23a58593          	addi	a1,a1,570 # 8002f3c8 <__func__.36>
    8001f196:	00011517          	auipc	a0,0x11
    8001f19a:	e4250513          	addi	a0,a0,-446 # 8002ffd8 <__func__.0+0x2e8>
bool cycle_test_5() {
    8001f19e:	ec06                	sd	ra,24(sp)
    8001f1a0:	e822                	sd	s0,16(sp)
    8001f1a2:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f1a4:	6e90d0ef          	jal	8002d08c <printf>
    8001f1a8:	4529                	li	a0,10
    8001f1aa:	3d10c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001f1ae:	4511                	li	a0,4
    8001f1b0:	d59e10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f1b4:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f1b8:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f1bc:	4509                	li	a0,2
    8001f1be:	d4be10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f1c2:	c4be10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f1c6:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f1ca:	08200593          	li	a1,130
    8001f1ce:	00018617          	auipc	a2,0x18
    8001f1d2:	60260613          	addi	a2,a2,1538 # 800377d0 <__func__.0+0x7ae0>
    8001f1d6:	00011517          	auipc	a0,0x11
    8001f1da:	e1a50513          	addi	a0,a0,-486 # 8002fff0 <__func__.0+0x300>
    8001f1de:	6af0d0ef          	jal	8002d08c <printf>
    8001f1e2:	00039797          	auipc	a5,0x39
    8001f1e6:	e2f7c783          	lbu	a5,-465(a5) # 80058011 <excpt+0x1>
    8001f1ea:	00039497          	auipc	s1,0x39
    8001f1ee:	e2648493          	addi	s1,s1,-474 # 80058010 <excpt>
    8001f1f2:	00011597          	auipc	a1,0x11
    8001f1f6:	dd658593          	addi	a1,a1,-554 # 8002ffc8 <__func__.0+0x2d8>
    8001f1fa:	cf89                	beqz	a5,8001f214 <cycle_test_5+0x88>
    8001f1fc:	6498                	ld	a4,8(s1)
    8001f1fe:	47d9                	li	a5,22
    8001f200:	00011597          	auipc	a1,0x11
    8001f204:	db858593          	addi	a1,a1,-584 # 8002ffb8 <__func__.0+0x2c8>
    8001f208:	00f70663          	beq	a4,a5,8001f214 <cycle_test_5+0x88>
    8001f20c:	00011597          	auipc	a1,0x11
    8001f210:	dbc58593          	addi	a1,a1,-580 # 8002ffc8 <__func__.0+0x2d8>
    8001f214:	00011517          	auipc	a0,0x11
    8001f218:	df450513          	addi	a0,a0,-524 # 80030008 <__func__.0+0x318>
    8001f21c:	6710d0ef          	jal	8002d08c <printf>
    8001f220:	00039797          	auipc	a5,0x39
    8001f224:	df17c783          	lbu	a5,-527(a5) # 80058011 <excpt+0x1>
    8001f228:	c789                	beqz	a5,8001f232 <cycle_test_5+0xa6>
    8001f22a:	6498                	ld	a4,8(s1)
    8001f22c:	47d9                	li	a5,22
    8001f22e:	00f70c63          	beq	a4,a5,8001f246 <cycle_test_5+0xba>
    8001f232:	00011517          	auipc	a0,0x11
    8001f236:	dde50513          	addi	a0,a0,-546 # 80030010 <__func__.0+0x320>
    8001f23a:	6530d0ef          	jal	8002d08c <printf>
    8001f23e:	02900513          	li	a0,41
    8001f242:	3390c0ef          	jal	8002bd7a <putchar>
    8001f246:	4529                	li	a0,10
    8001f248:	3330c0ef          	jal	8002bd7a <putchar>
    8001f24c:	00039417          	auipc	s0,0x39
    8001f250:	dc544403          	lbu	s0,-571(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001f254:	00011597          	auipc	a1,0x11
    8001f258:	d7458593          	addi	a1,a1,-652 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f25c:	cc11                	beqz	s0,8001f278 <cycle_test_5+0xec>
    8001f25e:	6498                	ld	a4,8(s1)
    8001f260:	47d9                	li	a5,22
    TEST_END(); 
    8001f262:	00011597          	auipc	a1,0x11
    8001f266:	d5658593          	addi	a1,a1,-682 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f26a:	00f70763          	beq	a4,a5,8001f278 <cycle_test_5+0xec>
    8001f26e:	4401                	li	s0,0
    TEST_END(); 
    8001f270:	00011597          	auipc	a1,0x11
    8001f274:	d5858593          	addi	a1,a1,-680 # 8002ffc8 <__func__.0+0x2d8>
    8001f278:	00011517          	auipc	a0,0x11
    8001f27c:	df850513          	addi	a0,a0,-520 # 80030070 <__func__.0+0x380>
    8001f280:	60d0d0ef          	jal	8002d08c <printf>
    8001f284:	4511                	li	a0,4
    8001f286:	c83e10ef          	jal	80000f08 <goto_priv>
    8001f28a:	e48e20ef          	jal	800018d2 <reset_state>
}
    8001f28e:	60e2                	ld	ra,24(sp)
    8001f290:	8522                	mv	a0,s0
    8001f292:	6442                	ld	s0,16(sp)
    8001f294:	64a2                	ld	s1,8(sp)
    8001f296:	6105                	addi	sp,sp,32
    8001f298:	8082                	ret

000000008001f29a <cycle_test_6>:

bool cycle_test_6() {
    8001f29a:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f29c:	00010597          	auipc	a1,0x10
    8001f2a0:	13c58593          	addi	a1,a1,316 # 8002f3d8 <__func__.35>
    8001f2a4:	00011517          	auipc	a0,0x11
    8001f2a8:	d3450513          	addi	a0,a0,-716 # 8002ffd8 <__func__.0+0x2e8>
bool cycle_test_6() {
    8001f2ac:	e406                	sd	ra,8(sp)
    8001f2ae:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f2b0:	5dd0d0ef          	jal	8002d08c <printf>
    8001f2b4:	4529                	li	a0,10
    8001f2b6:	2c50c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001f2ba:	4511                	li	a0,4
    8001f2bc:	c4de10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f2c0:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f2c4:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f2c8:	4509                	li	a0,2
    8001f2ca:	c3fe10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f2ce:	b3fe10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f2d2:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f2d6:	08200593          	li	a1,130
    8001f2da:	00018617          	auipc	a2,0x18
    8001f2de:	55660613          	addi	a2,a2,1366 # 80037830 <__func__.0+0x7b40>
    8001f2e2:	00011517          	auipc	a0,0x11
    8001f2e6:	d0e50513          	addi	a0,a0,-754 # 8002fff0 <__func__.0+0x300>
    8001f2ea:	5a30d0ef          	jal	8002d08c <printf>
    8001f2ee:	00039797          	auipc	a5,0x39
    8001f2f2:	d237c783          	lbu	a5,-733(a5) # 80058011 <excpt+0x1>
    8001f2f6:	00011597          	auipc	a1,0x11
    8001f2fa:	cc258593          	addi	a1,a1,-830 # 8002ffb8 <__func__.0+0x2c8>
    8001f2fe:	c789                	beqz	a5,8001f308 <cycle_test_6+0x6e>
    8001f300:	00011597          	auipc	a1,0x11
    8001f304:	cc858593          	addi	a1,a1,-824 # 8002ffc8 <__func__.0+0x2d8>
    8001f308:	00011517          	auipc	a0,0x11
    8001f30c:	d0050513          	addi	a0,a0,-768 # 80030008 <__func__.0+0x318>
    8001f310:	57d0d0ef          	jal	8002d08c <printf>
    8001f314:	00039797          	auipc	a5,0x39
    8001f318:	cfd7c783          	lbu	a5,-771(a5) # 80058011 <excpt+0x1>
    8001f31c:	e7a1                	bnez	a5,8001f364 <cycle_test_6+0xca>
    8001f31e:	4529                	li	a0,10
    8001f320:	25b0c0ef          	jal	8002bd7a <putchar>
    8001f324:	00039797          	auipc	a5,0x39
    8001f328:	ced7c783          	lbu	a5,-787(a5) # 80058011 <excpt+0x1>
    8001f32c:	e795                	bnez	a5,8001f358 <cycle_test_6+0xbe>
    8001f32e:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f330:	00011597          	auipc	a1,0x11
    8001f334:	c8858593          	addi	a1,a1,-888 # 8002ffb8 <__func__.0+0x2c8>
    8001f338:	00011517          	auipc	a0,0x11
    8001f33c:	d3850513          	addi	a0,a0,-712 # 80030070 <__func__.0+0x380>
    8001f340:	54d0d0ef          	jal	8002d08c <printf>
    8001f344:	4511                	li	a0,4
    8001f346:	bc3e10ef          	jal	80000f08 <goto_priv>
    8001f34a:	d88e20ef          	jal	800018d2 <reset_state>
}
    8001f34e:	60a2                	ld	ra,8(sp)
    8001f350:	8522                	mv	a0,s0
    8001f352:	6402                	ld	s0,0(sp)
    8001f354:	0141                	addi	sp,sp,16
    8001f356:	8082                	ret
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f358:	4401                	li	s0,0
    TEST_END(); 
    8001f35a:	00011597          	auipc	a1,0x11
    8001f35e:	c6e58593          	addi	a1,a1,-914 # 8002ffc8 <__func__.0+0x2d8>
    8001f362:	bfd9                	j	8001f338 <cycle_test_6+0x9e>
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f364:	00011517          	auipc	a0,0x11
    8001f368:	cac50513          	addi	a0,a0,-852 # 80030010 <__func__.0+0x320>
    8001f36c:	5210d0ef          	jal	8002d08c <printf>
    8001f370:	02900513          	li	a0,41
    8001f374:	2070c0ef          	jal	8002bd7a <putchar>
    8001f378:	b75d                	j	8001f31e <cycle_test_6+0x84>

000000008001f37a <cycle_test_7>:

bool cycle_test_7() {
    8001f37a:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f37c:	00010597          	auipc	a1,0x10
    8001f380:	06c58593          	addi	a1,a1,108 # 8002f3e8 <__func__.34>
    8001f384:	00011517          	auipc	a0,0x11
    8001f388:	c5450513          	addi	a0,a0,-940 # 8002ffd8 <__func__.0+0x2e8>
bool cycle_test_7() {
    8001f38c:	e406                	sd	ra,8(sp)
    8001f38e:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f390:	4fd0d0ef          	jal	8002d08c <printf>
    8001f394:	4529                	li	a0,10
    8001f396:	1e50c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001f39a:	4511                	li	a0,4
    8001f39c:	b6de10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f3a0:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f3a4:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f3a8:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    8001f3ac:	4501                	li	a0,0
    8001f3ae:	b5be10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f3b2:	a5be10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f3b6:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f3ba:	08200593          	li	a1,130
    8001f3be:	00018617          	auipc	a2,0x18
    8001f3c2:	4ba60613          	addi	a2,a2,1210 # 80037878 <__func__.0+0x7b88>
    8001f3c6:	00011517          	auipc	a0,0x11
    8001f3ca:	c2a50513          	addi	a0,a0,-982 # 8002fff0 <__func__.0+0x300>
    8001f3ce:	4bf0d0ef          	jal	8002d08c <printf>
    8001f3d2:	00039797          	auipc	a5,0x39
    8001f3d6:	c3f7c783          	lbu	a5,-961(a5) # 80058011 <excpt+0x1>
    8001f3da:	00011597          	auipc	a1,0x11
    8001f3de:	bde58593          	addi	a1,a1,-1058 # 8002ffb8 <__func__.0+0x2c8>
    8001f3e2:	c789                	beqz	a5,8001f3ec <cycle_test_7+0x72>
    8001f3e4:	00011597          	auipc	a1,0x11
    8001f3e8:	be458593          	addi	a1,a1,-1052 # 8002ffc8 <__func__.0+0x2d8>
    8001f3ec:	00011517          	auipc	a0,0x11
    8001f3f0:	c1c50513          	addi	a0,a0,-996 # 80030008 <__func__.0+0x318>
    8001f3f4:	4990d0ef          	jal	8002d08c <printf>
    8001f3f8:	00039797          	auipc	a5,0x39
    8001f3fc:	c197c783          	lbu	a5,-999(a5) # 80058011 <excpt+0x1>
    8001f400:	e7a1                	bnez	a5,8001f448 <cycle_test_7+0xce>
    8001f402:	4529                	li	a0,10
    8001f404:	1770c0ef          	jal	8002bd7a <putchar>
    8001f408:	00039797          	auipc	a5,0x39
    8001f40c:	c097c783          	lbu	a5,-1015(a5) # 80058011 <excpt+0x1>
    8001f410:	e795                	bnez	a5,8001f43c <cycle_test_7+0xc2>
    8001f412:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f414:	00011597          	auipc	a1,0x11
    8001f418:	ba458593          	addi	a1,a1,-1116 # 8002ffb8 <__func__.0+0x2c8>
    8001f41c:	00011517          	auipc	a0,0x11
    8001f420:	c5450513          	addi	a0,a0,-940 # 80030070 <__func__.0+0x380>
    8001f424:	4690d0ef          	jal	8002d08c <printf>
    8001f428:	4511                	li	a0,4
    8001f42a:	adfe10ef          	jal	80000f08 <goto_priv>
    8001f42e:	ca4e20ef          	jal	800018d2 <reset_state>
}
    8001f432:	60a2                	ld	ra,8(sp)
    8001f434:	8522                	mv	a0,s0
    8001f436:	6402                	ld	s0,0(sp)
    8001f438:	0141                	addi	sp,sp,16
    8001f43a:	8082                	ret
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f43c:	4401                	li	s0,0
    TEST_END(); 
    8001f43e:	00011597          	auipc	a1,0x11
    8001f442:	b8a58593          	addi	a1,a1,-1142 # 8002ffc8 <__func__.0+0x2d8>
    8001f446:	bfd9                	j	8001f41c <cycle_test_7+0xa2>
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f448:	00011517          	auipc	a0,0x11
    8001f44c:	bc850513          	addi	a0,a0,-1080 # 80030010 <__func__.0+0x320>
    8001f450:	43d0d0ef          	jal	8002d08c <printf>
    8001f454:	02900513          	li	a0,41
    8001f458:	1230c0ef          	jal	8002bd7a <putchar>
    8001f45c:	b75d                	j	8001f402 <cycle_test_7+0x88>

000000008001f45e <cycle_test_8>:

bool cycle_test_8() {
    8001f45e:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f460:	00010597          	auipc	a1,0x10
    8001f464:	f9858593          	addi	a1,a1,-104 # 8002f3f8 <__func__.33>
    8001f468:	00011517          	auipc	a0,0x11
    8001f46c:	b7050513          	addi	a0,a0,-1168 # 8002ffd8 <__func__.0+0x2e8>
bool cycle_test_8() {
    8001f470:	ec06                	sd	ra,24(sp)
    8001f472:	e822                	sd	s0,16(sp)
    8001f474:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f476:	4170d0ef          	jal	8002d08c <printf>
    8001f47a:	4529                	li	a0,10
    8001f47c:	0ff0c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001f480:	4511                	li	a0,4
    8001f482:	a87e10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f486:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f48a:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f48e:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    8001f492:	4501                	li	a0,0
    8001f494:	a75e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f498:	975e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f49c:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f4a0:	08200593          	li	a1,130
    8001f4a4:	00018617          	auipc	a2,0x18
    8001f4a8:	42c60613          	addi	a2,a2,1068 # 800378d0 <__func__.0+0x7be0>
    8001f4ac:	00011517          	auipc	a0,0x11
    8001f4b0:	b4450513          	addi	a0,a0,-1212 # 8002fff0 <__func__.0+0x300>
    8001f4b4:	3d90d0ef          	jal	8002d08c <printf>
    8001f4b8:	00039797          	auipc	a5,0x39
    8001f4bc:	b597c783          	lbu	a5,-1191(a5) # 80058011 <excpt+0x1>
    8001f4c0:	00039497          	auipc	s1,0x39
    8001f4c4:	b5048493          	addi	s1,s1,-1200 # 80058010 <excpt>
    8001f4c8:	00011597          	auipc	a1,0x11
    8001f4cc:	b0058593          	addi	a1,a1,-1280 # 8002ffc8 <__func__.0+0x2d8>
    8001f4d0:	cf89                	beqz	a5,8001f4ea <cycle_test_8+0x8c>
    8001f4d2:	6498                	ld	a4,8(s1)
    8001f4d4:	47d9                	li	a5,22
    8001f4d6:	00011597          	auipc	a1,0x11
    8001f4da:	ae258593          	addi	a1,a1,-1310 # 8002ffb8 <__func__.0+0x2c8>
    8001f4de:	00f70663          	beq	a4,a5,8001f4ea <cycle_test_8+0x8c>
    8001f4e2:	00011597          	auipc	a1,0x11
    8001f4e6:	ae658593          	addi	a1,a1,-1306 # 8002ffc8 <__func__.0+0x2d8>
    8001f4ea:	00011517          	auipc	a0,0x11
    8001f4ee:	b1e50513          	addi	a0,a0,-1250 # 80030008 <__func__.0+0x318>
    8001f4f2:	39b0d0ef          	jal	8002d08c <printf>
    8001f4f6:	00039797          	auipc	a5,0x39
    8001f4fa:	b1b7c783          	lbu	a5,-1253(a5) # 80058011 <excpt+0x1>
    8001f4fe:	c789                	beqz	a5,8001f508 <cycle_test_8+0xaa>
    8001f500:	6498                	ld	a4,8(s1)
    8001f502:	47d9                	li	a5,22
    8001f504:	00f70c63          	beq	a4,a5,8001f51c <cycle_test_8+0xbe>
    8001f508:	00011517          	auipc	a0,0x11
    8001f50c:	b0850513          	addi	a0,a0,-1272 # 80030010 <__func__.0+0x320>
    8001f510:	37d0d0ef          	jal	8002d08c <printf>
    8001f514:	02900513          	li	a0,41
    8001f518:	0630c0ef          	jal	8002bd7a <putchar>
    8001f51c:	4529                	li	a0,10
    8001f51e:	05d0c0ef          	jal	8002bd7a <putchar>
    8001f522:	00039417          	auipc	s0,0x39
    8001f526:	aef44403          	lbu	s0,-1297(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001f52a:	00011597          	auipc	a1,0x11
    8001f52e:	a9e58593          	addi	a1,a1,-1378 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f532:	cc11                	beqz	s0,8001f54e <cycle_test_8+0xf0>
    8001f534:	6498                	ld	a4,8(s1)
    8001f536:	47d9                	li	a5,22
    TEST_END(); 
    8001f538:	00011597          	auipc	a1,0x11
    8001f53c:	a8058593          	addi	a1,a1,-1408 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f540:	00f70763          	beq	a4,a5,8001f54e <cycle_test_8+0xf0>
    8001f544:	4401                	li	s0,0
    TEST_END(); 
    8001f546:	00011597          	auipc	a1,0x11
    8001f54a:	a8258593          	addi	a1,a1,-1406 # 8002ffc8 <__func__.0+0x2d8>
    8001f54e:	00011517          	auipc	a0,0x11
    8001f552:	b2250513          	addi	a0,a0,-1246 # 80030070 <__func__.0+0x380>
    8001f556:	3370d0ef          	jal	8002d08c <printf>
    8001f55a:	4511                	li	a0,4
    8001f55c:	9ade10ef          	jal	80000f08 <goto_priv>
    8001f560:	b72e20ef          	jal	800018d2 <reset_state>
}
    8001f564:	60e2                	ld	ra,24(sp)
    8001f566:	8522                	mv	a0,s0
    8001f568:	6442                	ld	s0,16(sp)
    8001f56a:	64a2                	ld	s1,8(sp)
    8001f56c:	6105                	addi	sp,sp,32
    8001f56e:	8082                	ret

000000008001f570 <cycle_test_9>:

bool cycle_test_9() {
    8001f570:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f572:	00010597          	auipc	a1,0x10
    8001f576:	e9658593          	addi	a1,a1,-362 # 8002f408 <__func__.32>
    8001f57a:	00011517          	auipc	a0,0x11
    8001f57e:	a5e50513          	addi	a0,a0,-1442 # 8002ffd8 <__func__.0+0x2e8>
bool cycle_test_9() {
    8001f582:	ec06                	sd	ra,24(sp)
    8001f584:	e822                	sd	s0,16(sp)
    8001f586:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f588:	3050d0ef          	jal	8002d08c <printf>
    8001f58c:	4529                	li	a0,10
    8001f58e:	7ec0c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001f592:	4511                	li	a0,4
    8001f594:	975e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f598:	3060e073          	csrsi	mcounteren,1
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f59c:	1060f073          	csrci	scounteren,1

    goto_priv(PRIV_HU);
    8001f5a0:	4505                	li	a0,1
    8001f5a2:	967e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f5a6:	867e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f5aa:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f5ae:	08200593          	li	a1,130
    8001f5b2:	00018617          	auipc	a2,0x18
    8001f5b6:	38e60613          	addi	a2,a2,910 # 80037940 <__func__.0+0x7c50>
    8001f5ba:	00011517          	auipc	a0,0x11
    8001f5be:	a3650513          	addi	a0,a0,-1482 # 8002fff0 <__func__.0+0x300>
    8001f5c2:	2cb0d0ef          	jal	8002d08c <printf>
    8001f5c6:	00039797          	auipc	a5,0x39
    8001f5ca:	a4b7c783          	lbu	a5,-1461(a5) # 80058011 <excpt+0x1>
    8001f5ce:	00039497          	auipc	s1,0x39
    8001f5d2:	a4248493          	addi	s1,s1,-1470 # 80058010 <excpt>
    8001f5d6:	00011597          	auipc	a1,0x11
    8001f5da:	9f258593          	addi	a1,a1,-1550 # 8002ffc8 <__func__.0+0x2d8>
    8001f5de:	cf89                	beqz	a5,8001f5f8 <cycle_test_9+0x88>
    8001f5e0:	6498                	ld	a4,8(s1)
    8001f5e2:	4789                	li	a5,2
    8001f5e4:	00011597          	auipc	a1,0x11
    8001f5e8:	9d458593          	addi	a1,a1,-1580 # 8002ffb8 <__func__.0+0x2c8>
    8001f5ec:	00f70663          	beq	a4,a5,8001f5f8 <cycle_test_9+0x88>
    8001f5f0:	00011597          	auipc	a1,0x11
    8001f5f4:	9d858593          	addi	a1,a1,-1576 # 8002ffc8 <__func__.0+0x2d8>
    8001f5f8:	00011517          	auipc	a0,0x11
    8001f5fc:	a1050513          	addi	a0,a0,-1520 # 80030008 <__func__.0+0x318>
    8001f600:	28d0d0ef          	jal	8002d08c <printf>
    8001f604:	00039797          	auipc	a5,0x39
    8001f608:	a0d7c783          	lbu	a5,-1523(a5) # 80058011 <excpt+0x1>
    8001f60c:	c789                	beqz	a5,8001f616 <cycle_test_9+0xa6>
    8001f60e:	6498                	ld	a4,8(s1)
    8001f610:	4789                	li	a5,2
    8001f612:	00f70c63          	beq	a4,a5,8001f62a <cycle_test_9+0xba>
    8001f616:	00011517          	auipc	a0,0x11
    8001f61a:	9fa50513          	addi	a0,a0,-1542 # 80030010 <__func__.0+0x320>
    8001f61e:	26f0d0ef          	jal	8002d08c <printf>
    8001f622:	02900513          	li	a0,41
    8001f626:	7540c0ef          	jal	8002bd7a <putchar>
    8001f62a:	4529                	li	a0,10
    8001f62c:	74e0c0ef          	jal	8002bd7a <putchar>
    8001f630:	00039417          	auipc	s0,0x39
    8001f634:	9e144403          	lbu	s0,-1567(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f638:	00011597          	auipc	a1,0x11
    8001f63c:	99058593          	addi	a1,a1,-1648 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f640:	cc11                	beqz	s0,8001f65c <cycle_test_9+0xec>
    8001f642:	6498                	ld	a4,8(s1)
    8001f644:	4789                	li	a5,2
    TEST_END(); 
    8001f646:	00011597          	auipc	a1,0x11
    8001f64a:	97258593          	addi	a1,a1,-1678 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f64e:	00f70763          	beq	a4,a5,8001f65c <cycle_test_9+0xec>
    8001f652:	4401                	li	s0,0
    TEST_END(); 
    8001f654:	00011597          	auipc	a1,0x11
    8001f658:	97458593          	addi	a1,a1,-1676 # 8002ffc8 <__func__.0+0x2d8>
    8001f65c:	00011517          	auipc	a0,0x11
    8001f660:	a1450513          	addi	a0,a0,-1516 # 80030070 <__func__.0+0x380>
    8001f664:	2290d0ef          	jal	8002d08c <printf>
    8001f668:	4511                	li	a0,4
    8001f66a:	89fe10ef          	jal	80000f08 <goto_priv>
    8001f66e:	a64e20ef          	jal	800018d2 <reset_state>
}
    8001f672:	60e2                	ld	ra,24(sp)
    8001f674:	8522                	mv	a0,s0
    8001f676:	6442                	ld	s0,16(sp)
    8001f678:	64a2                	ld	s1,8(sp)
    8001f67a:	6105                	addi	sp,sp,32
    8001f67c:	8082                	ret

000000008001f67e <cycle_test_10>:

bool cycle_test_10() {
    8001f67e:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f680:	00010597          	auipc	a1,0x10
    8001f684:	d9858593          	addi	a1,a1,-616 # 8002f418 <__func__.31>
    8001f688:	00011517          	auipc	a0,0x11
    8001f68c:	95050513          	addi	a0,a0,-1712 # 8002ffd8 <__func__.0+0x2e8>
bool cycle_test_10() {
    8001f690:	e406                	sd	ra,8(sp)
    8001f692:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f694:	1f90d0ef          	jal	8002d08c <printf>
    8001f698:	4529                	li	a0,10
    8001f69a:	6e00c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001f69e:	4511                	li	a0,4
    8001f6a0:	869e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f6a4:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f6a8:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f6ac:	4509                	li	a0,2
    8001f6ae:	85be10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f6b2:	f5ae10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f6b6:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f6ba:	08200593          	li	a1,130
    8001f6be:	00018617          	auipc	a2,0x18
    8001f6c2:	2e260613          	addi	a2,a2,738 # 800379a0 <__func__.0+0x7cb0>
    8001f6c6:	00011517          	auipc	a0,0x11
    8001f6ca:	92a50513          	addi	a0,a0,-1750 # 8002fff0 <__func__.0+0x300>
    8001f6ce:	1bf0d0ef          	jal	8002d08c <printf>
    8001f6d2:	00039797          	auipc	a5,0x39
    8001f6d6:	93f7c783          	lbu	a5,-1729(a5) # 80058011 <excpt+0x1>
    8001f6da:	00011597          	auipc	a1,0x11
    8001f6de:	8de58593          	addi	a1,a1,-1826 # 8002ffb8 <__func__.0+0x2c8>
    8001f6e2:	c789                	beqz	a5,8001f6ec <cycle_test_10+0x6e>
    8001f6e4:	00011597          	auipc	a1,0x11
    8001f6e8:	8e458593          	addi	a1,a1,-1820 # 8002ffc8 <__func__.0+0x2d8>
    8001f6ec:	00011517          	auipc	a0,0x11
    8001f6f0:	91c50513          	addi	a0,a0,-1764 # 80030008 <__func__.0+0x318>
    8001f6f4:	1990d0ef          	jal	8002d08c <printf>
    8001f6f8:	00039797          	auipc	a5,0x39
    8001f6fc:	9197c783          	lbu	a5,-1767(a5) # 80058011 <excpt+0x1>
    8001f700:	e7a1                	bnez	a5,8001f748 <cycle_test_10+0xca>
    8001f702:	4529                	li	a0,10
    8001f704:	6760c0ef          	jal	8002bd7a <putchar>
    8001f708:	00039797          	auipc	a5,0x39
    8001f70c:	9097c783          	lbu	a5,-1783(a5) # 80058011 <excpt+0x1>
    8001f710:	e795                	bnez	a5,8001f73c <cycle_test_10+0xbe>
    8001f712:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f714:	00011597          	auipc	a1,0x11
    8001f718:	8a458593          	addi	a1,a1,-1884 # 8002ffb8 <__func__.0+0x2c8>
    8001f71c:	00011517          	auipc	a0,0x11
    8001f720:	95450513          	addi	a0,a0,-1708 # 80030070 <__func__.0+0x380>
    8001f724:	1690d0ef          	jal	8002d08c <printf>
    8001f728:	4511                	li	a0,4
    8001f72a:	fdee10ef          	jal	80000f08 <goto_priv>
    8001f72e:	9a4e20ef          	jal	800018d2 <reset_state>
}
    8001f732:	60a2                	ld	ra,8(sp)
    8001f734:	8522                	mv	a0,s0
    8001f736:	6402                	ld	s0,0(sp)
    8001f738:	0141                	addi	sp,sp,16
    8001f73a:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f73c:	4401                	li	s0,0
    TEST_END(); 
    8001f73e:	00011597          	auipc	a1,0x11
    8001f742:	88a58593          	addi	a1,a1,-1910 # 8002ffc8 <__func__.0+0x2d8>
    8001f746:	bfd9                	j	8001f71c <cycle_test_10+0x9e>
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f748:	00011517          	auipc	a0,0x11
    8001f74c:	8c850513          	addi	a0,a0,-1848 # 80030010 <__func__.0+0x320>
    8001f750:	13d0d0ef          	jal	8002d08c <printf>
    8001f754:	02900513          	li	a0,41
    8001f758:	6220c0ef          	jal	8002bd7a <putchar>
    8001f75c:	b75d                	j	8001f702 <cycle_test_10+0x84>

000000008001f75e <instret_test_1>:


bool instret_test_1() {
    8001f75e:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f760:	00010597          	auipc	a1,0x10
    8001f764:	cc858593          	addi	a1,a1,-824 # 8002f428 <__func__.30>
    8001f768:	00011517          	auipc	a0,0x11
    8001f76c:	87050513          	addi	a0,a0,-1936 # 8002ffd8 <__func__.0+0x2e8>
bool instret_test_1() {
    8001f770:	ec06                	sd	ra,24(sp)
    8001f772:	e822                	sd	s0,16(sp)
    8001f774:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f776:	1170d0ef          	jal	8002d08c <printf>
    8001f77a:	4529                	li	a0,10
    8001f77c:	5fe0c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001f780:	4511                	li	a0,4
    8001f782:	f86e10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8001f786:	30627073          	csrci	mcounteren,4

    goto_priv(PRIV_VS);
    8001f78a:	4509                	li	a0,2
    8001f78c:	f7ce10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f790:	e7ce10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f794:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f798:	08200593          	li	a1,130
    8001f79c:	00018617          	auipc	a2,0x18
    8001f7a0:	25460613          	addi	a2,a2,596 # 800379f0 <__func__.0+0x7d00>
    8001f7a4:	00011517          	auipc	a0,0x11
    8001f7a8:	84c50513          	addi	a0,a0,-1972 # 8002fff0 <__func__.0+0x300>
    8001f7ac:	0e10d0ef          	jal	8002d08c <printf>
    8001f7b0:	00039797          	auipc	a5,0x39
    8001f7b4:	8617c783          	lbu	a5,-1951(a5) # 80058011 <excpt+0x1>
    8001f7b8:	00039497          	auipc	s1,0x39
    8001f7bc:	85848493          	addi	s1,s1,-1960 # 80058010 <excpt>
    8001f7c0:	00011597          	auipc	a1,0x11
    8001f7c4:	80858593          	addi	a1,a1,-2040 # 8002ffc8 <__func__.0+0x2d8>
    8001f7c8:	cf89                	beqz	a5,8001f7e2 <instret_test_1+0x84>
    8001f7ca:	6498                	ld	a4,8(s1)
    8001f7cc:	4789                	li	a5,2
    8001f7ce:	00010597          	auipc	a1,0x10
    8001f7d2:	7ea58593          	addi	a1,a1,2026 # 8002ffb8 <__func__.0+0x2c8>
    8001f7d6:	00f70663          	beq	a4,a5,8001f7e2 <instret_test_1+0x84>
    8001f7da:	00010597          	auipc	a1,0x10
    8001f7de:	7ee58593          	addi	a1,a1,2030 # 8002ffc8 <__func__.0+0x2d8>
    8001f7e2:	00011517          	auipc	a0,0x11
    8001f7e6:	82650513          	addi	a0,a0,-2010 # 80030008 <__func__.0+0x318>
    8001f7ea:	0a30d0ef          	jal	8002d08c <printf>
    8001f7ee:	00039797          	auipc	a5,0x39
    8001f7f2:	8237c783          	lbu	a5,-2013(a5) # 80058011 <excpt+0x1>
    8001f7f6:	c789                	beqz	a5,8001f800 <instret_test_1+0xa2>
    8001f7f8:	6498                	ld	a4,8(s1)
    8001f7fa:	4789                	li	a5,2
    8001f7fc:	00f70c63          	beq	a4,a5,8001f814 <instret_test_1+0xb6>
    8001f800:	00011517          	auipc	a0,0x11
    8001f804:	81050513          	addi	a0,a0,-2032 # 80030010 <__func__.0+0x320>
    8001f808:	0850d0ef          	jal	8002d08c <printf>
    8001f80c:	02900513          	li	a0,41
    8001f810:	56a0c0ef          	jal	8002bd7a <putchar>
    8001f814:	4529                	li	a0,10
    8001f816:	5640c0ef          	jal	8002bd7a <putchar>
    8001f81a:	00038797          	auipc	a5,0x38
    8001f81e:	7f77c783          	lbu	a5,2039(a5) # 80058011 <excpt+0x1>
    8001f822:	4401                	li	s0,0
    8001f824:	c789                	beqz	a5,8001f82e <instret_test_1+0xd0>
    8001f826:	6480                	ld	s0,8(s1)
    8001f828:	1479                	addi	s0,s0,-2
    8001f82a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001f82e:	450d                	li	a0,3
    8001f830:	ed8e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f834:	dd8e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f838:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f83c:	08200593          	li	a1,130
    8001f840:	00018617          	auipc	a2,0x18
    8001f844:	20060613          	addi	a2,a2,512 # 80037a40 <__func__.0+0x7d50>
    8001f848:	00010517          	auipc	a0,0x10
    8001f84c:	7a850513          	addi	a0,a0,1960 # 8002fff0 <__func__.0+0x300>
    8001f850:	03d0d0ef          	jal	8002d08c <printf>
    8001f854:	00038797          	auipc	a5,0x38
    8001f858:	7bd7c783          	lbu	a5,1981(a5) # 80058011 <excpt+0x1>
    8001f85c:	00010597          	auipc	a1,0x10
    8001f860:	76c58593          	addi	a1,a1,1900 # 8002ffc8 <__func__.0+0x2d8>
    8001f864:	cf89                	beqz	a5,8001f87e <instret_test_1+0x120>
    8001f866:	6498                	ld	a4,8(s1)
    8001f868:	4789                	li	a5,2
    8001f86a:	00010597          	auipc	a1,0x10
    8001f86e:	74e58593          	addi	a1,a1,1870 # 8002ffb8 <__func__.0+0x2c8>
    8001f872:	00f70663          	beq	a4,a5,8001f87e <instret_test_1+0x120>
    8001f876:	00010597          	auipc	a1,0x10
    8001f87a:	75258593          	addi	a1,a1,1874 # 8002ffc8 <__func__.0+0x2d8>
    8001f87e:	00010517          	auipc	a0,0x10
    8001f882:	78a50513          	addi	a0,a0,1930 # 80030008 <__func__.0+0x318>
    8001f886:	0070d0ef          	jal	8002d08c <printf>
    8001f88a:	00038797          	auipc	a5,0x38
    8001f88e:	7877c783          	lbu	a5,1927(a5) # 80058011 <excpt+0x1>
    8001f892:	c789                	beqz	a5,8001f89c <instret_test_1+0x13e>
    8001f894:	6498                	ld	a4,8(s1)
    8001f896:	4789                	li	a5,2
    8001f898:	00f70c63          	beq	a4,a5,8001f8b0 <instret_test_1+0x152>
    8001f89c:	00010517          	auipc	a0,0x10
    8001f8a0:	77450513          	addi	a0,a0,1908 # 80030010 <__func__.0+0x320>
    8001f8a4:	7e80d0ef          	jal	8002d08c <printf>
    8001f8a8:	02900513          	li	a0,41
    8001f8ac:	4ce0c0ef          	jal	8002bd7a <putchar>
    8001f8b0:	4529                	li	a0,10
    8001f8b2:	4c80c0ef          	jal	8002bd7a <putchar>
    8001f8b6:	c801                	beqz	s0,8001f8c6 <instret_test_1+0x168>
    8001f8b8:	00038797          	auipc	a5,0x38
    8001f8bc:	7597c783          	lbu	a5,1881(a5) # 80058011 <excpt+0x1>
    8001f8c0:	4401                	li	s0,0
    8001f8c2:	16079f63          	bnez	a5,8001fa40 <instret_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001f8c6:	4501                	li	a0,0
    8001f8c8:	e40e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f8cc:	d40e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f8d0:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f8d4:	08200593          	li	a1,130
    8001f8d8:	00018617          	auipc	a2,0x18
    8001f8dc:	1b860613          	addi	a2,a2,440 # 80037a90 <__func__.0+0x7da0>
    8001f8e0:	00010517          	auipc	a0,0x10
    8001f8e4:	71050513          	addi	a0,a0,1808 # 8002fff0 <__func__.0+0x300>
    8001f8e8:	7a40d0ef          	jal	8002d08c <printf>
    8001f8ec:	00038797          	auipc	a5,0x38
    8001f8f0:	7257c783          	lbu	a5,1829(a5) # 80058011 <excpt+0x1>
    8001f8f4:	00010597          	auipc	a1,0x10
    8001f8f8:	6d458593          	addi	a1,a1,1748 # 8002ffc8 <__func__.0+0x2d8>
    8001f8fc:	cf89                	beqz	a5,8001f916 <instret_test_1+0x1b8>
    8001f8fe:	6498                	ld	a4,8(s1)
    8001f900:	4789                	li	a5,2
    8001f902:	00010597          	auipc	a1,0x10
    8001f906:	6b658593          	addi	a1,a1,1718 # 8002ffb8 <__func__.0+0x2c8>
    8001f90a:	00f70663          	beq	a4,a5,8001f916 <instret_test_1+0x1b8>
    8001f90e:	00010597          	auipc	a1,0x10
    8001f912:	6ba58593          	addi	a1,a1,1722 # 8002ffc8 <__func__.0+0x2d8>
    8001f916:	00010517          	auipc	a0,0x10
    8001f91a:	6f250513          	addi	a0,a0,1778 # 80030008 <__func__.0+0x318>
    8001f91e:	76e0d0ef          	jal	8002d08c <printf>
    8001f922:	00038797          	auipc	a5,0x38
    8001f926:	6ef7c783          	lbu	a5,1775(a5) # 80058011 <excpt+0x1>
    8001f92a:	c789                	beqz	a5,8001f934 <instret_test_1+0x1d6>
    8001f92c:	6498                	ld	a4,8(s1)
    8001f92e:	4789                	li	a5,2
    8001f930:	00f70c63          	beq	a4,a5,8001f948 <instret_test_1+0x1ea>
    8001f934:	00010517          	auipc	a0,0x10
    8001f938:	6dc50513          	addi	a0,a0,1756 # 80030010 <__func__.0+0x320>
    8001f93c:	7500d0ef          	jal	8002d08c <printf>
    8001f940:	02900513          	li	a0,41
    8001f944:	4360c0ef          	jal	8002bd7a <putchar>
    8001f948:	4529                	li	a0,10
    8001f94a:	4300c0ef          	jal	8002bd7a <putchar>
    8001f94e:	c801                	beqz	s0,8001f95e <instret_test_1+0x200>
    8001f950:	00038797          	auipc	a5,0x38
    8001f954:	6c17c783          	lbu	a5,1729(a5) # 80058011 <excpt+0x1>
    8001f958:	4401                	li	s0,0
    8001f95a:	0c079e63          	bnez	a5,8001fa36 <instret_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001f95e:	4505                	li	a0,1
    8001f960:	da8e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f964:	ca8e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f968:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f96c:	08200593          	li	a1,130
    8001f970:	00018617          	auipc	a2,0x18
    8001f974:	17060613          	addi	a2,a2,368 # 80037ae0 <__func__.0+0x7df0>
    8001f978:	00010517          	auipc	a0,0x10
    8001f97c:	67850513          	addi	a0,a0,1656 # 8002fff0 <__func__.0+0x300>
    8001f980:	70c0d0ef          	jal	8002d08c <printf>
    8001f984:	00038797          	auipc	a5,0x38
    8001f988:	68d7c783          	lbu	a5,1677(a5) # 80058011 <excpt+0x1>
    8001f98c:	00010597          	auipc	a1,0x10
    8001f990:	63c58593          	addi	a1,a1,1596 # 8002ffc8 <__func__.0+0x2d8>
    8001f994:	cf89                	beqz	a5,8001f9ae <instret_test_1+0x250>
    8001f996:	6498                	ld	a4,8(s1)
    8001f998:	4789                	li	a5,2
    8001f99a:	00010597          	auipc	a1,0x10
    8001f99e:	61e58593          	addi	a1,a1,1566 # 8002ffb8 <__func__.0+0x2c8>
    8001f9a2:	00f70663          	beq	a4,a5,8001f9ae <instret_test_1+0x250>
    8001f9a6:	00010597          	auipc	a1,0x10
    8001f9aa:	62258593          	addi	a1,a1,1570 # 8002ffc8 <__func__.0+0x2d8>
    8001f9ae:	00010517          	auipc	a0,0x10
    8001f9b2:	65a50513          	addi	a0,a0,1626 # 80030008 <__func__.0+0x318>
    8001f9b6:	6d60d0ef          	jal	8002d08c <printf>
    8001f9ba:	00038797          	auipc	a5,0x38
    8001f9be:	6577c783          	lbu	a5,1623(a5) # 80058011 <excpt+0x1>
    8001f9c2:	c789                	beqz	a5,8001f9cc <instret_test_1+0x26e>
    8001f9c4:	6498                	ld	a4,8(s1)
    8001f9c6:	4789                	li	a5,2
    8001f9c8:	00f70c63          	beq	a4,a5,8001f9e0 <instret_test_1+0x282>
    8001f9cc:	00010517          	auipc	a0,0x10
    8001f9d0:	64450513          	addi	a0,a0,1604 # 80030010 <__func__.0+0x320>
    8001f9d4:	6b80d0ef          	jal	8002d08c <printf>
    8001f9d8:	02900513          	li	a0,41
    8001f9dc:	39e0c0ef          	jal	8002bd7a <putchar>
    8001f9e0:	4529                	li	a0,10
    8001f9e2:	3980c0ef          	jal	8002bd7a <putchar>
    8001f9e6:	c015                	beqz	s0,8001fa0a <instret_test_1+0x2ac>
    8001f9e8:	00038417          	auipc	s0,0x38
    8001f9ec:	62944403          	lbu	s0,1577(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f9f0:	00010597          	auipc	a1,0x10
    8001f9f4:	5d858593          	addi	a1,a1,1496 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f9f8:	cc11                	beqz	s0,8001fa14 <instret_test_1+0x2b6>
    8001f9fa:	6498                	ld	a4,8(s1)
    8001f9fc:	4789                	li	a5,2
    TEST_END(); 
    8001f9fe:	00010597          	auipc	a1,0x10
    8001fa02:	5ba58593          	addi	a1,a1,1466 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001fa06:	00f70763          	beq	a4,a5,8001fa14 <instret_test_1+0x2b6>
    8001fa0a:	4401                	li	s0,0
    TEST_END(); 
    8001fa0c:	00010597          	auipc	a1,0x10
    8001fa10:	5bc58593          	addi	a1,a1,1468 # 8002ffc8 <__func__.0+0x2d8>
    8001fa14:	00010517          	auipc	a0,0x10
    8001fa18:	65c50513          	addi	a0,a0,1628 # 80030070 <__func__.0+0x380>
    8001fa1c:	6700d0ef          	jal	8002d08c <printf>
    8001fa20:	4511                	li	a0,4
    8001fa22:	ce6e10ef          	jal	80000f08 <goto_priv>
    8001fa26:	eade10ef          	jal	800018d2 <reset_state>
}
    8001fa2a:	60e2                	ld	ra,24(sp)
    8001fa2c:	8522                	mv	a0,s0
    8001fa2e:	6442                	ld	s0,16(sp)
    8001fa30:	64a2                	ld	s1,8(sp)
    8001fa32:	6105                	addi	sp,sp,32
    8001fa34:	8082                	ret
    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001fa36:	6480                	ld	s0,8(s1)
    8001fa38:	1479                	addi	s0,s0,-2
    8001fa3a:	00143413          	seqz	s0,s0
    8001fa3e:	b705                	j	8001f95e <instret_test_1+0x200>
    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001fa40:	6480                	ld	s0,8(s1)
    8001fa42:	1479                	addi	s0,s0,-2
    8001fa44:	00143413          	seqz	s0,s0
    8001fa48:	bdbd                	j	8001f8c6 <instret_test_1+0x168>

000000008001fa4a <instret_test_2>:

bool instret_test_2() {
    8001fa4a:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fa4c:	00010597          	auipc	a1,0x10
    8001fa50:	9ec58593          	addi	a1,a1,-1556 # 8002f438 <__func__.29>
    8001fa54:	00010517          	auipc	a0,0x10
    8001fa58:	58450513          	addi	a0,a0,1412 # 8002ffd8 <__func__.0+0x2e8>
bool instret_test_2() {
    8001fa5c:	e406                	sd	ra,8(sp)
    8001fa5e:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fa60:	62c0d0ef          	jal	8002d08c <printf>
    8001fa64:	4529                	li	a0,10
    8001fa66:	3140c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001fa6a:	4511                	li	a0,4
    8001fa6c:	c9ce10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8001fa70:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HS);
    8001fa74:	450d                	li	a0,3
    8001fa76:	c92e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fa7a:	b92e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fa7e:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001fa82:	08200593          	li	a1,130
    8001fa86:	00018617          	auipc	a2,0x18
    8001fa8a:	0aa60613          	addi	a2,a2,170 # 80037b30 <__func__.0+0x7e40>
    8001fa8e:	00010517          	auipc	a0,0x10
    8001fa92:	56250513          	addi	a0,a0,1378 # 8002fff0 <__func__.0+0x300>
    8001fa96:	5f60d0ef          	jal	8002d08c <printf>
    8001fa9a:	00038797          	auipc	a5,0x38
    8001fa9e:	5777c783          	lbu	a5,1399(a5) # 80058011 <excpt+0x1>
    8001faa2:	00010597          	auipc	a1,0x10
    8001faa6:	51658593          	addi	a1,a1,1302 # 8002ffb8 <__func__.0+0x2c8>
    8001faaa:	c789                	beqz	a5,8001fab4 <instret_test_2+0x6a>
    8001faac:	00010597          	auipc	a1,0x10
    8001fab0:	51c58593          	addi	a1,a1,1308 # 8002ffc8 <__func__.0+0x2d8>
    8001fab4:	00010517          	auipc	a0,0x10
    8001fab8:	55450513          	addi	a0,a0,1364 # 80030008 <__func__.0+0x318>
    8001fabc:	5d00d0ef          	jal	8002d08c <printf>
    8001fac0:	00038797          	auipc	a5,0x38
    8001fac4:	5517c783          	lbu	a5,1361(a5) # 80058011 <excpt+0x1>
    8001fac8:	e7a1                	bnez	a5,8001fb10 <instret_test_2+0xc6>
    8001faca:	4529                	li	a0,10
    8001facc:	2ae0c0ef          	jal	8002bd7a <putchar>
    8001fad0:	00038797          	auipc	a5,0x38
    8001fad4:	5417c783          	lbu	a5,1345(a5) # 80058011 <excpt+0x1>
    8001fad8:	e795                	bnez	a5,8001fb04 <instret_test_2+0xba>
    8001fada:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001fadc:	00010597          	auipc	a1,0x10
    8001fae0:	4dc58593          	addi	a1,a1,1244 # 8002ffb8 <__func__.0+0x2c8>
    8001fae4:	00010517          	auipc	a0,0x10
    8001fae8:	58c50513          	addi	a0,a0,1420 # 80030070 <__func__.0+0x380>
    8001faec:	5a00d0ef          	jal	8002d08c <printf>
    8001faf0:	4511                	li	a0,4
    8001faf2:	c16e10ef          	jal	80000f08 <goto_priv>
    8001faf6:	ddde10ef          	jal	800018d2 <reset_state>
}
    8001fafa:	60a2                	ld	ra,8(sp)
    8001fafc:	8522                	mv	a0,s0
    8001fafe:	6402                	ld	s0,0(sp)
    8001fb00:	0141                	addi	sp,sp,16
    8001fb02:	8082                	ret
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001fb04:	4401                	li	s0,0
    TEST_END(); 
    8001fb06:	00010597          	auipc	a1,0x10
    8001fb0a:	4c258593          	addi	a1,a1,1218 # 8002ffc8 <__func__.0+0x2d8>
    8001fb0e:	bfd9                	j	8001fae4 <instret_test_2+0x9a>
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001fb10:	00010517          	auipc	a0,0x10
    8001fb14:	50050513          	addi	a0,a0,1280 # 80030010 <__func__.0+0x320>
    8001fb18:	5740d0ef          	jal	8002d08c <printf>
    8001fb1c:	02900513          	li	a0,41
    8001fb20:	25a0c0ef          	jal	8002bd7a <putchar>
    8001fb24:	b75d                	j	8001faca <instret_test_2+0x80>

000000008001fb26 <instret_test_3>:

bool instret_test_3() {
    8001fb26:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001fb28:	00010597          	auipc	a1,0x10
    8001fb2c:	92058593          	addi	a1,a1,-1760 # 8002f448 <__func__.28>
    8001fb30:	00010517          	auipc	a0,0x10
    8001fb34:	4a850513          	addi	a0,a0,1192 # 8002ffd8 <__func__.0+0x2e8>
bool instret_test_3() {
    8001fb38:	ec06                	sd	ra,24(sp)
    8001fb3a:	e822                	sd	s0,16(sp)
    8001fb3c:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fb3e:	54e0d0ef          	jal	8002d08c <printf>
    8001fb42:	4529                	li	a0,10
    8001fb44:	2360c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001fb48:	4511                	li	a0,4
    8001fb4a:	bbee10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fb4e:	10627073          	csrci	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fb52:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8001fb56:	4505                	li	a0,1
    8001fb58:	bb0e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fb5c:	ab0e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fb60:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fb64:	08200593          	li	a1,130
    8001fb68:	00018617          	auipc	a2,0x18
    8001fb6c:	00060613          	mv	a2,a2
    8001fb70:	00010517          	auipc	a0,0x10
    8001fb74:	48050513          	addi	a0,a0,1152 # 8002fff0 <__func__.0+0x300>
    8001fb78:	5140d0ef          	jal	8002d08c <printf>
    8001fb7c:	00038797          	auipc	a5,0x38
    8001fb80:	4957c783          	lbu	a5,1173(a5) # 80058011 <excpt+0x1>
    8001fb84:	00038497          	auipc	s1,0x38
    8001fb88:	48c48493          	addi	s1,s1,1164 # 80058010 <excpt>
    8001fb8c:	00010597          	auipc	a1,0x10
    8001fb90:	43c58593          	addi	a1,a1,1084 # 8002ffc8 <__func__.0+0x2d8>
    8001fb94:	cf89                	beqz	a5,8001fbae <instret_test_3+0x88>
    8001fb96:	6498                	ld	a4,8(s1)
    8001fb98:	4789                	li	a5,2
    8001fb9a:	00010597          	auipc	a1,0x10
    8001fb9e:	41e58593          	addi	a1,a1,1054 # 8002ffb8 <__func__.0+0x2c8>
    8001fba2:	00f70663          	beq	a4,a5,8001fbae <instret_test_3+0x88>
    8001fba6:	00010597          	auipc	a1,0x10
    8001fbaa:	42258593          	addi	a1,a1,1058 # 8002ffc8 <__func__.0+0x2d8>
    8001fbae:	00010517          	auipc	a0,0x10
    8001fbb2:	45a50513          	addi	a0,a0,1114 # 80030008 <__func__.0+0x318>
    8001fbb6:	4d60d0ef          	jal	8002d08c <printf>
    8001fbba:	00038797          	auipc	a5,0x38
    8001fbbe:	4577c783          	lbu	a5,1111(a5) # 80058011 <excpt+0x1>
    8001fbc2:	c789                	beqz	a5,8001fbcc <instret_test_3+0xa6>
    8001fbc4:	6498                	ld	a4,8(s1)
    8001fbc6:	4789                	li	a5,2
    8001fbc8:	00f70c63          	beq	a4,a5,8001fbe0 <instret_test_3+0xba>
    8001fbcc:	00010517          	auipc	a0,0x10
    8001fbd0:	44450513          	addi	a0,a0,1092 # 80030010 <__func__.0+0x320>
    8001fbd4:	4b80d0ef          	jal	8002d08c <printf>
    8001fbd8:	02900513          	li	a0,41
    8001fbdc:	19e0c0ef          	jal	8002bd7a <putchar>
    8001fbe0:	4529                	li	a0,10
    8001fbe2:	1980c0ef          	jal	8002bd7a <putchar>
    8001fbe6:	00038417          	auipc	s0,0x38
    8001fbea:	42b44403          	lbu	s0,1067(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001fbee:	00010597          	auipc	a1,0x10
    8001fbf2:	3da58593          	addi	a1,a1,986 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fbf6:	cc11                	beqz	s0,8001fc12 <instret_test_3+0xec>
    8001fbf8:	6498                	ld	a4,8(s1)
    8001fbfa:	4789                	li	a5,2
    TEST_END(); 
    8001fbfc:	00010597          	auipc	a1,0x10
    8001fc00:	3bc58593          	addi	a1,a1,956 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fc04:	00f70763          	beq	a4,a5,8001fc12 <instret_test_3+0xec>
    8001fc08:	4401                	li	s0,0
    TEST_END(); 
    8001fc0a:	00010597          	auipc	a1,0x10
    8001fc0e:	3be58593          	addi	a1,a1,958 # 8002ffc8 <__func__.0+0x2d8>
    8001fc12:	00010517          	auipc	a0,0x10
    8001fc16:	45e50513          	addi	a0,a0,1118 # 80030070 <__func__.0+0x380>
    8001fc1a:	4720d0ef          	jal	8002d08c <printf>
    8001fc1e:	4511                	li	a0,4
    8001fc20:	ae8e10ef          	jal	80000f08 <goto_priv>
    8001fc24:	cafe10ef          	jal	800018d2 <reset_state>
}
    8001fc28:	60e2                	ld	ra,24(sp)
    8001fc2a:	8522                	mv	a0,s0
    8001fc2c:	6442                	ld	s0,16(sp)
    8001fc2e:	64a2                	ld	s1,8(sp)
    8001fc30:	6105                	addi	sp,sp,32
    8001fc32:	8082                	ret

000000008001fc34 <instret_test_4>:

bool instret_test_4() {
    8001fc34:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fc36:	00010597          	auipc	a1,0x10
    8001fc3a:	82258593          	addi	a1,a1,-2014 # 8002f458 <__func__.27>
    8001fc3e:	00010517          	auipc	a0,0x10
    8001fc42:	39a50513          	addi	a0,a0,922 # 8002ffd8 <__func__.0+0x2e8>
bool instret_test_4() {
    8001fc46:	e406                	sd	ra,8(sp)
    8001fc48:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fc4a:	4420d0ef          	jal	8002d08c <printf>
    8001fc4e:	4529                	li	a0,10
    8001fc50:	12a0c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001fc54:	4511                	li	a0,4
    8001fc56:	ab2e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fc5a:	10626073          	csrsi	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fc5e:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8001fc62:	4505                	li	a0,1
    8001fc64:	aa4e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fc68:	9a4e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fc6c:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fc70:	08200593          	li	a1,130
    8001fc74:	00018617          	auipc	a2,0x18
    8001fc78:	f4460613          	addi	a2,a2,-188 # 80037bb8 <__func__.0+0x7ec8>
    8001fc7c:	00010517          	auipc	a0,0x10
    8001fc80:	37450513          	addi	a0,a0,884 # 8002fff0 <__func__.0+0x300>
    8001fc84:	4080d0ef          	jal	8002d08c <printf>
    8001fc88:	00038797          	auipc	a5,0x38
    8001fc8c:	3897c783          	lbu	a5,905(a5) # 80058011 <excpt+0x1>
    8001fc90:	00010597          	auipc	a1,0x10
    8001fc94:	32858593          	addi	a1,a1,808 # 8002ffb8 <__func__.0+0x2c8>
    8001fc98:	c789                	beqz	a5,8001fca2 <instret_test_4+0x6e>
    8001fc9a:	00010597          	auipc	a1,0x10
    8001fc9e:	32e58593          	addi	a1,a1,814 # 8002ffc8 <__func__.0+0x2d8>
    8001fca2:	00010517          	auipc	a0,0x10
    8001fca6:	36650513          	addi	a0,a0,870 # 80030008 <__func__.0+0x318>
    8001fcaa:	3e20d0ef          	jal	8002d08c <printf>
    8001fcae:	00038797          	auipc	a5,0x38
    8001fcb2:	3637c783          	lbu	a5,867(a5) # 80058011 <excpt+0x1>
    8001fcb6:	e7a1                	bnez	a5,8001fcfe <instret_test_4+0xca>
    8001fcb8:	4529                	li	a0,10
    8001fcba:	0c00c0ef          	jal	8002bd7a <putchar>
    8001fcbe:	00038797          	auipc	a5,0x38
    8001fcc2:	3537c783          	lbu	a5,851(a5) # 80058011 <excpt+0x1>
    8001fcc6:	e795                	bnez	a5,8001fcf2 <instret_test_4+0xbe>
    8001fcc8:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fcca:	00010597          	auipc	a1,0x10
    8001fcce:	2ee58593          	addi	a1,a1,750 # 8002ffb8 <__func__.0+0x2c8>
    8001fcd2:	00010517          	auipc	a0,0x10
    8001fcd6:	39e50513          	addi	a0,a0,926 # 80030070 <__func__.0+0x380>
    8001fcda:	3b20d0ef          	jal	8002d08c <printf>
    8001fcde:	4511                	li	a0,4
    8001fce0:	a28e10ef          	jal	80000f08 <goto_priv>
    8001fce4:	befe10ef          	jal	800018d2 <reset_state>
}
    8001fce8:	60a2                	ld	ra,8(sp)
    8001fcea:	8522                	mv	a0,s0
    8001fcec:	6402                	ld	s0,0(sp)
    8001fcee:	0141                	addi	sp,sp,16
    8001fcf0:	8082                	ret
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fcf2:	4401                	li	s0,0
    TEST_END(); 
    8001fcf4:	00010597          	auipc	a1,0x10
    8001fcf8:	2d458593          	addi	a1,a1,724 # 8002ffc8 <__func__.0+0x2d8>
    8001fcfc:	bfd9                	j	8001fcd2 <instret_test_4+0x9e>
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fcfe:	00010517          	auipc	a0,0x10
    8001fd02:	31250513          	addi	a0,a0,786 # 80030010 <__func__.0+0x320>
    8001fd06:	3860d0ef          	jal	8002d08c <printf>
    8001fd0a:	02900513          	li	a0,41
    8001fd0e:	06c0c0ef          	jal	8002bd7a <putchar>
    8001fd12:	b75d                	j	8001fcb8 <instret_test_4+0x84>

000000008001fd14 <instret_test_5>:

bool instret_test_5() {
    8001fd14:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001fd16:	0000f597          	auipc	a1,0xf
    8001fd1a:	75258593          	addi	a1,a1,1874 # 8002f468 <__func__.26>
    8001fd1e:	00010517          	auipc	a0,0x10
    8001fd22:	2ba50513          	addi	a0,a0,698 # 8002ffd8 <__func__.0+0x2e8>
bool instret_test_5() {
    8001fd26:	ec06                	sd	ra,24(sp)
    8001fd28:	e822                	sd	s0,16(sp)
    8001fd2a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fd2c:	3600d0ef          	jal	8002d08c <printf>
    8001fd30:	4529                	li	a0,10
    8001fd32:	0480c0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001fd36:	4511                	li	a0,4
    8001fd38:	9d0e10ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fd3c:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fd40:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001fd44:	4509                	li	a0,2
    8001fd46:	9c2e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fd4a:	8c2e10ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fd4e:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fd52:	08200593          	li	a1,130
    8001fd56:	00018617          	auipc	a2,0x18
    8001fd5a:	eaa60613          	addi	a2,a2,-342 # 80037c00 <__func__.0+0x7f10>
    8001fd5e:	00010517          	auipc	a0,0x10
    8001fd62:	29250513          	addi	a0,a0,658 # 8002fff0 <__func__.0+0x300>
    8001fd66:	3260d0ef          	jal	8002d08c <printf>
    8001fd6a:	00038797          	auipc	a5,0x38
    8001fd6e:	2a77c783          	lbu	a5,679(a5) # 80058011 <excpt+0x1>
    8001fd72:	00038497          	auipc	s1,0x38
    8001fd76:	29e48493          	addi	s1,s1,670 # 80058010 <excpt>
    8001fd7a:	00010597          	auipc	a1,0x10
    8001fd7e:	24e58593          	addi	a1,a1,590 # 8002ffc8 <__func__.0+0x2d8>
    8001fd82:	cf89                	beqz	a5,8001fd9c <instret_test_5+0x88>
    8001fd84:	6498                	ld	a4,8(s1)
    8001fd86:	47d9                	li	a5,22
    8001fd88:	00010597          	auipc	a1,0x10
    8001fd8c:	23058593          	addi	a1,a1,560 # 8002ffb8 <__func__.0+0x2c8>
    8001fd90:	00f70663          	beq	a4,a5,8001fd9c <instret_test_5+0x88>
    8001fd94:	00010597          	auipc	a1,0x10
    8001fd98:	23458593          	addi	a1,a1,564 # 8002ffc8 <__func__.0+0x2d8>
    8001fd9c:	00010517          	auipc	a0,0x10
    8001fda0:	26c50513          	addi	a0,a0,620 # 80030008 <__func__.0+0x318>
    8001fda4:	2e80d0ef          	jal	8002d08c <printf>
    8001fda8:	00038797          	auipc	a5,0x38
    8001fdac:	2697c783          	lbu	a5,617(a5) # 80058011 <excpt+0x1>
    8001fdb0:	c789                	beqz	a5,8001fdba <instret_test_5+0xa6>
    8001fdb2:	6498                	ld	a4,8(s1)
    8001fdb4:	47d9                	li	a5,22
    8001fdb6:	00f70c63          	beq	a4,a5,8001fdce <instret_test_5+0xba>
    8001fdba:	00010517          	auipc	a0,0x10
    8001fdbe:	25650513          	addi	a0,a0,598 # 80030010 <__func__.0+0x320>
    8001fdc2:	2ca0d0ef          	jal	8002d08c <printf>
    8001fdc6:	02900513          	li	a0,41
    8001fdca:	7b10b0ef          	jal	8002bd7a <putchar>
    8001fdce:	4529                	li	a0,10
    8001fdd0:	7ab0b0ef          	jal	8002bd7a <putchar>
    8001fdd4:	00038417          	auipc	s0,0x38
    8001fdd8:	23d44403          	lbu	s0,573(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001fddc:	00010597          	auipc	a1,0x10
    8001fde0:	1ec58593          	addi	a1,a1,492 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fde4:	cc11                	beqz	s0,8001fe00 <instret_test_5+0xec>
    8001fde6:	6498                	ld	a4,8(s1)
    8001fde8:	47d9                	li	a5,22
    TEST_END(); 
    8001fdea:	00010597          	auipc	a1,0x10
    8001fdee:	1ce58593          	addi	a1,a1,462 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fdf2:	00f70763          	beq	a4,a5,8001fe00 <instret_test_5+0xec>
    8001fdf6:	4401                	li	s0,0
    TEST_END(); 
    8001fdf8:	00010597          	auipc	a1,0x10
    8001fdfc:	1d058593          	addi	a1,a1,464 # 8002ffc8 <__func__.0+0x2d8>
    8001fe00:	00010517          	auipc	a0,0x10
    8001fe04:	27050513          	addi	a0,a0,624 # 80030070 <__func__.0+0x380>
    8001fe08:	2840d0ef          	jal	8002d08c <printf>
    8001fe0c:	4511                	li	a0,4
    8001fe0e:	8fae10ef          	jal	80000f08 <goto_priv>
    8001fe12:	ac1e10ef          	jal	800018d2 <reset_state>
}
    8001fe16:	60e2                	ld	ra,24(sp)
    8001fe18:	8522                	mv	a0,s0
    8001fe1a:	6442                	ld	s0,16(sp)
    8001fe1c:	64a2                	ld	s1,8(sp)
    8001fe1e:	6105                	addi	sp,sp,32
    8001fe20:	8082                	ret

000000008001fe22 <instret_test_6>:

bool instret_test_6() {
    8001fe22:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fe24:	0000f597          	auipc	a1,0xf
    8001fe28:	65458593          	addi	a1,a1,1620 # 8002f478 <__func__.25>
    8001fe2c:	00010517          	auipc	a0,0x10
    8001fe30:	1ac50513          	addi	a0,a0,428 # 8002ffd8 <__func__.0+0x2e8>
bool instret_test_6() {
    8001fe34:	e406                	sd	ra,8(sp)
    8001fe36:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fe38:	2540d0ef          	jal	8002d08c <printf>
    8001fe3c:	4529                	li	a0,10
    8001fe3e:	73d0b0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001fe42:	4511                	li	a0,4
    8001fe44:	8c4e10ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fe48:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fe4c:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001fe50:	4509                	li	a0,2
    8001fe52:	8b6e10ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fe56:	fb7e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fe5a:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fe5e:	08200593          	li	a1,130
    8001fe62:	00018617          	auipc	a2,0x18
    8001fe66:	dfe60613          	addi	a2,a2,-514 # 80037c60 <__func__.0+0x7f70>
    8001fe6a:	00010517          	auipc	a0,0x10
    8001fe6e:	18650513          	addi	a0,a0,390 # 8002fff0 <__func__.0+0x300>
    8001fe72:	21a0d0ef          	jal	8002d08c <printf>
    8001fe76:	00038797          	auipc	a5,0x38
    8001fe7a:	19b7c783          	lbu	a5,411(a5) # 80058011 <excpt+0x1>
    8001fe7e:	00010597          	auipc	a1,0x10
    8001fe82:	13a58593          	addi	a1,a1,314 # 8002ffb8 <__func__.0+0x2c8>
    8001fe86:	c789                	beqz	a5,8001fe90 <instret_test_6+0x6e>
    8001fe88:	00010597          	auipc	a1,0x10
    8001fe8c:	14058593          	addi	a1,a1,320 # 8002ffc8 <__func__.0+0x2d8>
    8001fe90:	00010517          	auipc	a0,0x10
    8001fe94:	17850513          	addi	a0,a0,376 # 80030008 <__func__.0+0x318>
    8001fe98:	1f40d0ef          	jal	8002d08c <printf>
    8001fe9c:	00038797          	auipc	a5,0x38
    8001fea0:	1757c783          	lbu	a5,373(a5) # 80058011 <excpt+0x1>
    8001fea4:	e7a1                	bnez	a5,8001feec <instret_test_6+0xca>
    8001fea6:	4529                	li	a0,10
    8001fea8:	6d30b0ef          	jal	8002bd7a <putchar>
    8001feac:	00038797          	auipc	a5,0x38
    8001feb0:	1657c783          	lbu	a5,357(a5) # 80058011 <excpt+0x1>
    8001feb4:	e795                	bnez	a5,8001fee0 <instret_test_6+0xbe>
    8001feb6:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001feb8:	00010597          	auipc	a1,0x10
    8001febc:	10058593          	addi	a1,a1,256 # 8002ffb8 <__func__.0+0x2c8>
    8001fec0:	00010517          	auipc	a0,0x10
    8001fec4:	1b050513          	addi	a0,a0,432 # 80030070 <__func__.0+0x380>
    8001fec8:	1c40d0ef          	jal	8002d08c <printf>
    8001fecc:	4511                	li	a0,4
    8001fece:	83ae10ef          	jal	80000f08 <goto_priv>
    8001fed2:	a01e10ef          	jal	800018d2 <reset_state>
}
    8001fed6:	60a2                	ld	ra,8(sp)
    8001fed8:	8522                	mv	a0,s0
    8001feda:	6402                	ld	s0,0(sp)
    8001fedc:	0141                	addi	sp,sp,16
    8001fede:	8082                	ret
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fee0:	4401                	li	s0,0
    TEST_END(); 
    8001fee2:	00010597          	auipc	a1,0x10
    8001fee6:	0e658593          	addi	a1,a1,230 # 8002ffc8 <__func__.0+0x2d8>
    8001feea:	bfd9                	j	8001fec0 <instret_test_6+0x9e>
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001feec:	00010517          	auipc	a0,0x10
    8001fef0:	12450513          	addi	a0,a0,292 # 80030010 <__func__.0+0x320>
    8001fef4:	1980d0ef          	jal	8002d08c <printf>
    8001fef8:	02900513          	li	a0,41
    8001fefc:	67f0b0ef          	jal	8002bd7a <putchar>
    8001ff00:	b75d                	j	8001fea6 <instret_test_6+0x84>

000000008001ff02 <instret_test_7>:

bool instret_test_7() {
    8001ff02:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001ff04:	0000f597          	auipc	a1,0xf
    8001ff08:	58458593          	addi	a1,a1,1412 # 8002f488 <__func__.24>
    8001ff0c:	00010517          	auipc	a0,0x10
    8001ff10:	0cc50513          	addi	a0,a0,204 # 8002ffd8 <__func__.0+0x2e8>
bool instret_test_7() {
    8001ff14:	e406                	sd	ra,8(sp)
    8001ff16:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001ff18:	1740d0ef          	jal	8002d08c <printf>
    8001ff1c:	4529                	li	a0,10
    8001ff1e:	65d0b0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8001ff22:	4511                	li	a0,4
    8001ff24:	fe5e00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001ff28:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001ff2c:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001ff30:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    8001ff34:	4501                	li	a0,0
    8001ff36:	fd3e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ff3a:	ed3e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001ff3e:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001ff42:	08200593          	li	a1,130
    8001ff46:	00018617          	auipc	a2,0x18
    8001ff4a:	d6260613          	addi	a2,a2,-670 # 80037ca8 <__func__.0+0x7fb8>
    8001ff4e:	00010517          	auipc	a0,0x10
    8001ff52:	0a250513          	addi	a0,a0,162 # 8002fff0 <__func__.0+0x300>
    8001ff56:	1360d0ef          	jal	8002d08c <printf>
    8001ff5a:	00038797          	auipc	a5,0x38
    8001ff5e:	0b77c783          	lbu	a5,183(a5) # 80058011 <excpt+0x1>
    8001ff62:	00010597          	auipc	a1,0x10
    8001ff66:	05658593          	addi	a1,a1,86 # 8002ffb8 <__func__.0+0x2c8>
    8001ff6a:	c789                	beqz	a5,8001ff74 <instret_test_7+0x72>
    8001ff6c:	00010597          	auipc	a1,0x10
    8001ff70:	05c58593          	addi	a1,a1,92 # 8002ffc8 <__func__.0+0x2d8>
    8001ff74:	00010517          	auipc	a0,0x10
    8001ff78:	09450513          	addi	a0,a0,148 # 80030008 <__func__.0+0x318>
    8001ff7c:	1100d0ef          	jal	8002d08c <printf>
    8001ff80:	00038797          	auipc	a5,0x38
    8001ff84:	0917c783          	lbu	a5,145(a5) # 80058011 <excpt+0x1>
    8001ff88:	e7a1                	bnez	a5,8001ffd0 <instret_test_7+0xce>
    8001ff8a:	4529                	li	a0,10
    8001ff8c:	5ef0b0ef          	jal	8002bd7a <putchar>
    8001ff90:	00038797          	auipc	a5,0x38
    8001ff94:	0817c783          	lbu	a5,129(a5) # 80058011 <excpt+0x1>
    8001ff98:	e795                	bnez	a5,8001ffc4 <instret_test_7+0xc2>
    8001ff9a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001ff9c:	00010597          	auipc	a1,0x10
    8001ffa0:	01c58593          	addi	a1,a1,28 # 8002ffb8 <__func__.0+0x2c8>
    8001ffa4:	00010517          	auipc	a0,0x10
    8001ffa8:	0cc50513          	addi	a0,a0,204 # 80030070 <__func__.0+0x380>
    8001ffac:	0e00d0ef          	jal	8002d08c <printf>
    8001ffb0:	4511                	li	a0,4
    8001ffb2:	f57e00ef          	jal	80000f08 <goto_priv>
    8001ffb6:	91de10ef          	jal	800018d2 <reset_state>
}
    8001ffba:	60a2                	ld	ra,8(sp)
    8001ffbc:	8522                	mv	a0,s0
    8001ffbe:	6402                	ld	s0,0(sp)
    8001ffc0:	0141                	addi	sp,sp,16
    8001ffc2:	8082                	ret
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001ffc4:	4401                	li	s0,0
    TEST_END(); 
    8001ffc6:	00010597          	auipc	a1,0x10
    8001ffca:	00258593          	addi	a1,a1,2 # 8002ffc8 <__func__.0+0x2d8>
    8001ffce:	bfd9                	j	8001ffa4 <instret_test_7+0xa2>
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001ffd0:	00010517          	auipc	a0,0x10
    8001ffd4:	04050513          	addi	a0,a0,64 # 80030010 <__func__.0+0x320>
    8001ffd8:	0b40d0ef          	jal	8002d08c <printf>
    8001ffdc:	02900513          	li	a0,41
    8001ffe0:	59b0b0ef          	jal	8002bd7a <putchar>
    8001ffe4:	b75d                	j	8001ff8a <instret_test_7+0x88>

000000008001ffe6 <instret_test_8>:

bool instret_test_8() {
    8001ffe6:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ffe8:	0000f597          	auipc	a1,0xf
    8001ffec:	4b058593          	addi	a1,a1,1200 # 8002f498 <__func__.23>
    8001fff0:	00010517          	auipc	a0,0x10
    8001fff4:	fe850513          	addi	a0,a0,-24 # 8002ffd8 <__func__.0+0x2e8>
bool instret_test_8() {
    8001fff8:	ec06                	sd	ra,24(sp)
    8001fffa:	e822                	sd	s0,16(sp)
    8001fffc:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fffe:	08e0d0ef          	jal	8002d08c <printf>
    80020002:	4529                	li	a0,10
    80020004:	5770b0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    80020008:	4511                	li	a0,4
    8002000a:	effe00ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8002000e:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80020012:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80020016:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    8002001a:	4501                	li	a0,0
    8002001c:	eede00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020020:	dede00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    80020024:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    80020028:	08200593          	li	a1,130
    8002002c:	00018617          	auipc	a2,0x18
    80020030:	cd460613          	addi	a2,a2,-812 # 80037d00 <__func__.0+0x8010>
    80020034:	00010517          	auipc	a0,0x10
    80020038:	fbc50513          	addi	a0,a0,-68 # 8002fff0 <__func__.0+0x300>
    8002003c:	0500d0ef          	jal	8002d08c <printf>
    80020040:	00038797          	auipc	a5,0x38
    80020044:	fd17c783          	lbu	a5,-47(a5) # 80058011 <excpt+0x1>
    80020048:	00038497          	auipc	s1,0x38
    8002004c:	fc848493          	addi	s1,s1,-56 # 80058010 <excpt>
    80020050:	00010597          	auipc	a1,0x10
    80020054:	f7858593          	addi	a1,a1,-136 # 8002ffc8 <__func__.0+0x2d8>
    80020058:	cf89                	beqz	a5,80020072 <instret_test_8+0x8c>
    8002005a:	6498                	ld	a4,8(s1)
    8002005c:	47d9                	li	a5,22
    8002005e:	00010597          	auipc	a1,0x10
    80020062:	f5a58593          	addi	a1,a1,-166 # 8002ffb8 <__func__.0+0x2c8>
    80020066:	00f70663          	beq	a4,a5,80020072 <instret_test_8+0x8c>
    8002006a:	00010597          	auipc	a1,0x10
    8002006e:	f5e58593          	addi	a1,a1,-162 # 8002ffc8 <__func__.0+0x2d8>
    80020072:	00010517          	auipc	a0,0x10
    80020076:	f9650513          	addi	a0,a0,-106 # 80030008 <__func__.0+0x318>
    8002007a:	0120d0ef          	jal	8002d08c <printf>
    8002007e:	00038797          	auipc	a5,0x38
    80020082:	f937c783          	lbu	a5,-109(a5) # 80058011 <excpt+0x1>
    80020086:	c789                	beqz	a5,80020090 <instret_test_8+0xaa>
    80020088:	6498                	ld	a4,8(s1)
    8002008a:	47d9                	li	a5,22
    8002008c:	00f70c63          	beq	a4,a5,800200a4 <instret_test_8+0xbe>
    80020090:	00010517          	auipc	a0,0x10
    80020094:	f8050513          	addi	a0,a0,-128 # 80030010 <__func__.0+0x320>
    80020098:	7f50c0ef          	jal	8002d08c <printf>
    8002009c:	02900513          	li	a0,41
    800200a0:	4db0b0ef          	jal	8002bd7a <putchar>
    800200a4:	4529                	li	a0,10
    800200a6:	4d50b0ef          	jal	8002bd7a <putchar>
    800200aa:	00038417          	auipc	s0,0x38
    800200ae:	f6744403          	lbu	s0,-153(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800200b2:	00010597          	auipc	a1,0x10
    800200b6:	f1658593          	addi	a1,a1,-234 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    800200ba:	cc11                	beqz	s0,800200d6 <instret_test_8+0xf0>
    800200bc:	6498                	ld	a4,8(s1)
    800200be:	47d9                	li	a5,22
    TEST_END(); 
    800200c0:	00010597          	auipc	a1,0x10
    800200c4:	ef858593          	addi	a1,a1,-264 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    800200c8:	00f70763          	beq	a4,a5,800200d6 <instret_test_8+0xf0>
    800200cc:	4401                	li	s0,0
    TEST_END(); 
    800200ce:	00010597          	auipc	a1,0x10
    800200d2:	efa58593          	addi	a1,a1,-262 # 8002ffc8 <__func__.0+0x2d8>
    800200d6:	00010517          	auipc	a0,0x10
    800200da:	f9a50513          	addi	a0,a0,-102 # 80030070 <__func__.0+0x380>
    800200de:	7af0c0ef          	jal	8002d08c <printf>
    800200e2:	4511                	li	a0,4
    800200e4:	e25e00ef          	jal	80000f08 <goto_priv>
    800200e8:	feae10ef          	jal	800018d2 <reset_state>
}
    800200ec:	60e2                	ld	ra,24(sp)
    800200ee:	8522                	mv	a0,s0
    800200f0:	6442                	ld	s0,16(sp)
    800200f2:	64a2                	ld	s1,8(sp)
    800200f4:	6105                	addi	sp,sp,32
    800200f6:	8082                	ret

00000000800200f8 <instret_test_9>:

bool instret_test_9() {
    800200f8:	1101                	addi	sp,sp,-32

    TEST_START();    
    800200fa:	0000f597          	auipc	a1,0xf
    800200fe:	3ae58593          	addi	a1,a1,942 # 8002f4a8 <__func__.22>
    80020102:	00010517          	auipc	a0,0x10
    80020106:	ed650513          	addi	a0,a0,-298 # 8002ffd8 <__func__.0+0x2e8>
bool instret_test_9() {
    8002010a:	ec06                	sd	ra,24(sp)
    8002010c:	e822                	sd	s0,16(sp)
    8002010e:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020110:	77d0c0ef          	jal	8002d08c <printf>
    80020114:	4529                	li	a0,10
    80020116:	4650b0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    8002011a:	4511                	li	a0,4
    8002011c:	dede00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80020120:	30626073          	csrsi	mcounteren,4
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80020124:	10627073          	csrci	scounteren,4

    goto_priv(PRIV_HU);
    80020128:	4505                	li	a0,1
    8002012a:	ddfe00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002012e:	cdfe00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    80020132:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    80020136:	08200593          	li	a1,130
    8002013a:	00018617          	auipc	a2,0x18
    8002013e:	c3660613          	addi	a2,a2,-970 # 80037d70 <__func__.0+0x8080>
    80020142:	00010517          	auipc	a0,0x10
    80020146:	eae50513          	addi	a0,a0,-338 # 8002fff0 <__func__.0+0x300>
    8002014a:	7430c0ef          	jal	8002d08c <printf>
    8002014e:	00038797          	auipc	a5,0x38
    80020152:	ec37c783          	lbu	a5,-317(a5) # 80058011 <excpt+0x1>
    80020156:	00038497          	auipc	s1,0x38
    8002015a:	eba48493          	addi	s1,s1,-326 # 80058010 <excpt>
    8002015e:	00010597          	auipc	a1,0x10
    80020162:	e6a58593          	addi	a1,a1,-406 # 8002ffc8 <__func__.0+0x2d8>
    80020166:	cf89                	beqz	a5,80020180 <instret_test_9+0x88>
    80020168:	6498                	ld	a4,8(s1)
    8002016a:	4789                	li	a5,2
    8002016c:	00010597          	auipc	a1,0x10
    80020170:	e4c58593          	addi	a1,a1,-436 # 8002ffb8 <__func__.0+0x2c8>
    80020174:	00f70663          	beq	a4,a5,80020180 <instret_test_9+0x88>
    80020178:	00010597          	auipc	a1,0x10
    8002017c:	e5058593          	addi	a1,a1,-432 # 8002ffc8 <__func__.0+0x2d8>
    80020180:	00010517          	auipc	a0,0x10
    80020184:	e8850513          	addi	a0,a0,-376 # 80030008 <__func__.0+0x318>
    80020188:	7050c0ef          	jal	8002d08c <printf>
    8002018c:	00038797          	auipc	a5,0x38
    80020190:	e857c783          	lbu	a5,-379(a5) # 80058011 <excpt+0x1>
    80020194:	c789                	beqz	a5,8002019e <instret_test_9+0xa6>
    80020196:	6498                	ld	a4,8(s1)
    80020198:	4789                	li	a5,2
    8002019a:	00f70c63          	beq	a4,a5,800201b2 <instret_test_9+0xba>
    8002019e:	00010517          	auipc	a0,0x10
    800201a2:	e7250513          	addi	a0,a0,-398 # 80030010 <__func__.0+0x320>
    800201a6:	6e70c0ef          	jal	8002d08c <printf>
    800201aa:	02900513          	li	a0,41
    800201ae:	3cd0b0ef          	jal	8002bd7a <putchar>
    800201b2:	4529                	li	a0,10
    800201b4:	3c70b0ef          	jal	8002bd7a <putchar>
    800201b8:	00038417          	auipc	s0,0x38
    800201bc:	e5944403          	lbu	s0,-423(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800201c0:	00010597          	auipc	a1,0x10
    800201c4:	e0858593          	addi	a1,a1,-504 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    800201c8:	cc11                	beqz	s0,800201e4 <instret_test_9+0xec>
    800201ca:	6498                	ld	a4,8(s1)
    800201cc:	4789                	li	a5,2
    TEST_END(); 
    800201ce:	00010597          	auipc	a1,0x10
    800201d2:	dea58593          	addi	a1,a1,-534 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    800201d6:	00f70763          	beq	a4,a5,800201e4 <instret_test_9+0xec>
    800201da:	4401                	li	s0,0
    TEST_END(); 
    800201dc:	00010597          	auipc	a1,0x10
    800201e0:	dec58593          	addi	a1,a1,-532 # 8002ffc8 <__func__.0+0x2d8>
    800201e4:	00010517          	auipc	a0,0x10
    800201e8:	e8c50513          	addi	a0,a0,-372 # 80030070 <__func__.0+0x380>
    800201ec:	6a10c0ef          	jal	8002d08c <printf>
    800201f0:	4511                	li	a0,4
    800201f2:	d17e00ef          	jal	80000f08 <goto_priv>
    800201f6:	edce10ef          	jal	800018d2 <reset_state>
}
    800201fa:	60e2                	ld	ra,24(sp)
    800201fc:	8522                	mv	a0,s0
    800201fe:	6442                	ld	s0,16(sp)
    80020200:	64a2                	ld	s1,8(sp)
    80020202:	6105                	addi	sp,sp,32
    80020204:	8082                	ret

0000000080020206 <instret_test_10>:

bool instret_test_10() {
    80020206:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020208:	0000f597          	auipc	a1,0xf
    8002020c:	2b058593          	addi	a1,a1,688 # 8002f4b8 <__func__.21>
    80020210:	00010517          	auipc	a0,0x10
    80020214:	dc850513          	addi	a0,a0,-568 # 8002ffd8 <__func__.0+0x2e8>
bool instret_test_10() {
    80020218:	e406                	sd	ra,8(sp)
    8002021a:	e022                	sd	s0,0(sp)
    TEST_START();    
    8002021c:	6710c0ef          	jal	8002d08c <printf>
    80020220:	4529                	li	a0,10
    80020222:	3590b0ef          	jal	8002bd7a <putchar>
    goto_priv(PRIV_M);
    80020226:	4511                	li	a0,4
    80020228:	ce1e00ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8002022c:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80020230:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    80020234:	4509                	li	a0,2
    80020236:	cd3e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002023a:	bd3e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8002023e:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    80020242:	08200593          	li	a1,130
    80020246:	00018617          	auipc	a2,0x18
    8002024a:	b8a60613          	addi	a2,a2,-1142 # 80037dd0 <__func__.0+0x80e0>
    8002024e:	00010517          	auipc	a0,0x10
    80020252:	da250513          	addi	a0,a0,-606 # 8002fff0 <__func__.0+0x300>
    80020256:	6370c0ef          	jal	8002d08c <printf>
    8002025a:	00038797          	auipc	a5,0x38
    8002025e:	db77c783          	lbu	a5,-585(a5) # 80058011 <excpt+0x1>
    80020262:	00010597          	auipc	a1,0x10
    80020266:	d5658593          	addi	a1,a1,-682 # 8002ffb8 <__func__.0+0x2c8>
    8002026a:	c789                	beqz	a5,80020274 <instret_test_10+0x6e>
    8002026c:	00010597          	auipc	a1,0x10
    80020270:	d5c58593          	addi	a1,a1,-676 # 8002ffc8 <__func__.0+0x2d8>
    80020274:	00010517          	auipc	a0,0x10
    80020278:	d9450513          	addi	a0,a0,-620 # 80030008 <__func__.0+0x318>
    8002027c:	6110c0ef          	jal	8002d08c <printf>
    80020280:	00038797          	auipc	a5,0x38
    80020284:	d917c783          	lbu	a5,-623(a5) # 80058011 <excpt+0x1>
    80020288:	e7a1                	bnez	a5,800202d0 <instret_test_10+0xca>
    8002028a:	4529                	li	a0,10
    8002028c:	2ef0b0ef          	jal	8002bd7a <putchar>
    80020290:	00038797          	auipc	a5,0x38
    80020294:	d817c783          	lbu	a5,-639(a5) # 80058011 <excpt+0x1>
    80020298:	e795                	bnez	a5,800202c4 <instret_test_10+0xbe>
    8002029a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8002029c:	00010597          	auipc	a1,0x10
    800202a0:	d1c58593          	addi	a1,a1,-740 # 8002ffb8 <__func__.0+0x2c8>
    800202a4:	00010517          	auipc	a0,0x10
    800202a8:	dcc50513          	addi	a0,a0,-564 # 80030070 <__func__.0+0x380>
    800202ac:	5e10c0ef          	jal	8002d08c <printf>
    800202b0:	4511                	li	a0,4
    800202b2:	c57e00ef          	jal	80000f08 <goto_priv>
    800202b6:	e1ce10ef          	jal	800018d2 <reset_state>
}
    800202ba:	60a2                	ld	ra,8(sp)
    800202bc:	8522                	mv	a0,s0
    800202be:	6402                	ld	s0,0(sp)
    800202c0:	0141                	addi	sp,sp,16
    800202c2:	8082                	ret
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    800202c4:	4401                	li	s0,0
    TEST_END(); 
    800202c6:	00010597          	auipc	a1,0x10
    800202ca:	d0258593          	addi	a1,a1,-766 # 8002ffc8 <__func__.0+0x2d8>
    800202ce:	bfd9                	j	800202a4 <instret_test_10+0x9e>
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    800202d0:	00010517          	auipc	a0,0x10
    800202d4:	d4050513          	addi	a0,a0,-704 # 80030010 <__func__.0+0x320>
    800202d8:	5b50c0ef          	jal	8002d08c <printf>
    800202dc:	02900513          	li	a0,41
    800202e0:	29b0b0ef          	jal	8002bd7a <putchar>
    800202e4:	b75d                	j	8002028a <instret_test_10+0x84>

00000000800202e6 <timecmp_test_1>:


bool timecmp_test_1() {
    800202e6:	1101                	addi	sp,sp,-32

    TEST_START();    
    800202e8:	0000f597          	auipc	a1,0xf
    800202ec:	1e058593          	addi	a1,a1,480 # 8002f4c8 <__func__.20>
    800202f0:	00010517          	auipc	a0,0x10
    800202f4:	ce850513          	addi	a0,a0,-792 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_1() {
    800202f8:	ec06                	sd	ra,24(sp)
    800202fa:	e822                	sd	s0,16(sp)
    800202fc:	e426                	sd	s1,8(sp)
    TEST_START();    
    800202fe:	58f0c0ef          	jal	8002d08c <printf>
    80020302:	4529                	li	a0,10
    80020304:	2770b0ef          	jal	8002bd7a <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80020308:	57fd                	li	a5,-1
    8002030a:	17fe                	slli	a5,a5,0x3f
    8002030c:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020310:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    80020314:	450d                	li	a0,3
    80020316:	bf3e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002031a:	af3e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002031e:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80020322:	08200593          	li	a1,130
    80020326:	00018617          	auipc	a2,0x18
    8002032a:	afa60613          	addi	a2,a2,-1286 # 80037e20 <__func__.0+0x8130>
    8002032e:	00010517          	auipc	a0,0x10
    80020332:	cc250513          	addi	a0,a0,-830 # 8002fff0 <__func__.0+0x300>
    80020336:	5570c0ef          	jal	8002d08c <printf>
    8002033a:	00038797          	auipc	a5,0x38
    8002033e:	cd77c783          	lbu	a5,-809(a5) # 80058011 <excpt+0x1>
    80020342:	00038497          	auipc	s1,0x38
    80020346:	cce48493          	addi	s1,s1,-818 # 80058010 <excpt>
    8002034a:	00010597          	auipc	a1,0x10
    8002034e:	c7e58593          	addi	a1,a1,-898 # 8002ffc8 <__func__.0+0x2d8>
    80020352:	cf89                	beqz	a5,8002036c <timecmp_test_1+0x86>
    80020354:	6498                	ld	a4,8(s1)
    80020356:	4789                	li	a5,2
    80020358:	00010597          	auipc	a1,0x10
    8002035c:	c6058593          	addi	a1,a1,-928 # 8002ffb8 <__func__.0+0x2c8>
    80020360:	00f70663          	beq	a4,a5,8002036c <timecmp_test_1+0x86>
    80020364:	00010597          	auipc	a1,0x10
    80020368:	c6458593          	addi	a1,a1,-924 # 8002ffc8 <__func__.0+0x2d8>
    8002036c:	00010517          	auipc	a0,0x10
    80020370:	c9c50513          	addi	a0,a0,-868 # 80030008 <__func__.0+0x318>
    80020374:	5190c0ef          	jal	8002d08c <printf>
    80020378:	00038797          	auipc	a5,0x38
    8002037c:	c997c783          	lbu	a5,-871(a5) # 80058011 <excpt+0x1>
    80020380:	c789                	beqz	a5,8002038a <timecmp_test_1+0xa4>
    80020382:	6498                	ld	a4,8(s1)
    80020384:	4789                	li	a5,2
    80020386:	00f70c63          	beq	a4,a5,8002039e <timecmp_test_1+0xb8>
    8002038a:	00010517          	auipc	a0,0x10
    8002038e:	c8650513          	addi	a0,a0,-890 # 80030010 <__func__.0+0x320>
    80020392:	4fb0c0ef          	jal	8002d08c <printf>
    80020396:	02900513          	li	a0,41
    8002039a:	1e10b0ef          	jal	8002bd7a <putchar>
    8002039e:	4529                	li	a0,10
    800203a0:	1db0b0ef          	jal	8002bd7a <putchar>
    800203a4:	00038797          	auipc	a5,0x38
    800203a8:	c6d7c783          	lbu	a5,-915(a5) # 80058011 <excpt+0x1>
    800203ac:	4401                	li	s0,0
    800203ae:	c789                	beqz	a5,800203b8 <timecmp_test_1+0xd2>
    800203b0:	6480                	ld	s0,8(s1)
    800203b2:	1479                	addi	s0,s0,-2
    800203b4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HU);
    800203b8:	4505                	li	a0,1
    800203ba:	b4fe00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800203be:	a4fe00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800203c2:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    800203c6:	08200593          	li	a1,130
    800203ca:	00018617          	auipc	a2,0x18
    800203ce:	abe60613          	addi	a2,a2,-1346 # 80037e88 <__func__.0+0x8198>
    800203d2:	00010517          	auipc	a0,0x10
    800203d6:	c1e50513          	addi	a0,a0,-994 # 8002fff0 <__func__.0+0x300>
    800203da:	4b30c0ef          	jal	8002d08c <printf>
    800203de:	00038797          	auipc	a5,0x38
    800203e2:	c337c783          	lbu	a5,-973(a5) # 80058011 <excpt+0x1>
    800203e6:	00010597          	auipc	a1,0x10
    800203ea:	be258593          	addi	a1,a1,-1054 # 8002ffc8 <__func__.0+0x2d8>
    800203ee:	cf89                	beqz	a5,80020408 <timecmp_test_1+0x122>
    800203f0:	6498                	ld	a4,8(s1)
    800203f2:	4789                	li	a5,2
    800203f4:	00010597          	auipc	a1,0x10
    800203f8:	bc458593          	addi	a1,a1,-1084 # 8002ffb8 <__func__.0+0x2c8>
    800203fc:	00f70663          	beq	a4,a5,80020408 <timecmp_test_1+0x122>
    80020400:	00010597          	auipc	a1,0x10
    80020404:	bc858593          	addi	a1,a1,-1080 # 8002ffc8 <__func__.0+0x2d8>
    80020408:	00010517          	auipc	a0,0x10
    8002040c:	c0050513          	addi	a0,a0,-1024 # 80030008 <__func__.0+0x318>
    80020410:	47d0c0ef          	jal	8002d08c <printf>
    80020414:	00038797          	auipc	a5,0x38
    80020418:	bfd7c783          	lbu	a5,-1027(a5) # 80058011 <excpt+0x1>
    8002041c:	c789                	beqz	a5,80020426 <timecmp_test_1+0x140>
    8002041e:	6498                	ld	a4,8(s1)
    80020420:	4789                	li	a5,2
    80020422:	00f70c63          	beq	a4,a5,8002043a <timecmp_test_1+0x154>
    80020426:	00010517          	auipc	a0,0x10
    8002042a:	bea50513          	addi	a0,a0,-1046 # 80030010 <__func__.0+0x320>
    8002042e:	45f0c0ef          	jal	8002d08c <printf>
    80020432:	02900513          	li	a0,41
    80020436:	1450b0ef          	jal	8002bd7a <putchar>
    8002043a:	4529                	li	a0,10
    8002043c:	13f0b0ef          	jal	8002bd7a <putchar>
    80020440:	c015                	beqz	s0,80020464 <timecmp_test_1+0x17e>
    80020442:	00038417          	auipc	s0,0x38
    80020446:	bcf44403          	lbu	s0,-1073(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002044a:	00010597          	auipc	a1,0x10
    8002044e:	b7e58593          	addi	a1,a1,-1154 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80020452:	cc11                	beqz	s0,8002046e <timecmp_test_1+0x188>
    80020454:	6498                	ld	a4,8(s1)
    80020456:	4789                	li	a5,2
    TEST_END(); 
    80020458:	00010597          	auipc	a1,0x10
    8002045c:	b6058593          	addi	a1,a1,-1184 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80020460:	00f70763          	beq	a4,a5,8002046e <timecmp_test_1+0x188>
    80020464:	4401                	li	s0,0
    TEST_END(); 
    80020466:	00010597          	auipc	a1,0x10
    8002046a:	b6258593          	addi	a1,a1,-1182 # 8002ffc8 <__func__.0+0x2d8>
    8002046e:	00010517          	auipc	a0,0x10
    80020472:	c0250513          	addi	a0,a0,-1022 # 80030070 <__func__.0+0x380>
    80020476:	4170c0ef          	jal	8002d08c <printf>
    8002047a:	4511                	li	a0,4
    8002047c:	a8de00ef          	jal	80000f08 <goto_priv>
    80020480:	c52e10ef          	jal	800018d2 <reset_state>
}
    80020484:	60e2                	ld	ra,24(sp)
    80020486:	8522                	mv	a0,s0
    80020488:	6442                	ld	s0,16(sp)
    8002048a:	64a2                	ld	s1,8(sp)
    8002048c:	6105                	addi	sp,sp,32
    8002048e:	8082                	ret

0000000080020490 <timecmp_test_2>:

bool timecmp_test_2() {
    80020490:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020492:	0000f597          	auipc	a1,0xf
    80020496:	04658593          	addi	a1,a1,70 # 8002f4d8 <__func__.19>
    8002049a:	00010517          	auipc	a0,0x10
    8002049e:	b3e50513          	addi	a0,a0,-1218 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_2() {
    800204a2:	ec06                	sd	ra,24(sp)
    800204a4:	e822                	sd	s0,16(sp)
    800204a6:	e426                	sd	s1,8(sp)
    TEST_START();    
    800204a8:	3e50c0ef          	jal	8002d08c <printf>
    800204ac:	4529                	li	a0,10
    800204ae:	0cd0b0ef          	jal	8002bd7a <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800204b2:	57fd                	li	a5,-1
    800204b4:	17fe                	slli	a5,a5,0x3f
    800204b6:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HS);
    800204ba:	450d                	li	a0,3
    800204bc:	a4de00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800204c0:	94de00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800204c4:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800204c8:	08200593          	li	a1,130
    800204cc:	00018617          	auipc	a2,0x18
    800204d0:	a2460613          	addi	a2,a2,-1500 # 80037ef0 <__func__.0+0x8200>
    800204d4:	00010517          	auipc	a0,0x10
    800204d8:	b1c50513          	addi	a0,a0,-1252 # 8002fff0 <__func__.0+0x300>
    800204dc:	3b10c0ef          	jal	8002d08c <printf>
    800204e0:	00038797          	auipc	a5,0x38
    800204e4:	b317c783          	lbu	a5,-1231(a5) # 80058011 <excpt+0x1>
    800204e8:	00038497          	auipc	s1,0x38
    800204ec:	b2848493          	addi	s1,s1,-1240 # 80058010 <excpt>
    800204f0:	00010597          	auipc	a1,0x10
    800204f4:	ad858593          	addi	a1,a1,-1320 # 8002ffc8 <__func__.0+0x2d8>
    800204f8:	cf89                	beqz	a5,80020512 <timecmp_test_2+0x82>
    800204fa:	6498                	ld	a4,8(s1)
    800204fc:	4789                	li	a5,2
    800204fe:	00010597          	auipc	a1,0x10
    80020502:	aba58593          	addi	a1,a1,-1350 # 8002ffb8 <__func__.0+0x2c8>
    80020506:	00f70663          	beq	a4,a5,80020512 <timecmp_test_2+0x82>
    8002050a:	00010597          	auipc	a1,0x10
    8002050e:	abe58593          	addi	a1,a1,-1346 # 8002ffc8 <__func__.0+0x2d8>
    80020512:	00010517          	auipc	a0,0x10
    80020516:	af650513          	addi	a0,a0,-1290 # 80030008 <__func__.0+0x318>
    8002051a:	3730c0ef          	jal	8002d08c <printf>
    8002051e:	00038797          	auipc	a5,0x38
    80020522:	af37c783          	lbu	a5,-1293(a5) # 80058011 <excpt+0x1>
    80020526:	c789                	beqz	a5,80020530 <timecmp_test_2+0xa0>
    80020528:	6498                	ld	a4,8(s1)
    8002052a:	4789                	li	a5,2
    8002052c:	00f70c63          	beq	a4,a5,80020544 <timecmp_test_2+0xb4>
    80020530:	00010517          	auipc	a0,0x10
    80020534:	ae050513          	addi	a0,a0,-1312 # 80030010 <__func__.0+0x320>
    80020538:	3550c0ef          	jal	8002d08c <printf>
    8002053c:	02900513          	li	a0,41
    80020540:	03b0b0ef          	jal	8002bd7a <putchar>
    80020544:	4529                	li	a0,10
    80020546:	0350b0ef          	jal	8002bd7a <putchar>
    8002054a:	00038417          	auipc	s0,0x38
    8002054e:	ac744403          	lbu	s0,-1337(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020552:	00010597          	auipc	a1,0x10
    80020556:	a7658593          	addi	a1,a1,-1418 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002055a:	cc11                	beqz	s0,80020576 <timecmp_test_2+0xe6>
    8002055c:	6498                	ld	a4,8(s1)
    8002055e:	4789                	li	a5,2
    TEST_END(); 
    80020560:	00010597          	auipc	a1,0x10
    80020564:	a5858593          	addi	a1,a1,-1448 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020568:	00f70763          	beq	a4,a5,80020576 <timecmp_test_2+0xe6>
    8002056c:	4401                	li	s0,0
    TEST_END(); 
    8002056e:	00010597          	auipc	a1,0x10
    80020572:	a5a58593          	addi	a1,a1,-1446 # 8002ffc8 <__func__.0+0x2d8>
    80020576:	00010517          	auipc	a0,0x10
    8002057a:	afa50513          	addi	a0,a0,-1286 # 80030070 <__func__.0+0x380>
    8002057e:	30f0c0ef          	jal	8002d08c <printf>
    80020582:	4511                	li	a0,4
    80020584:	985e00ef          	jal	80000f08 <goto_priv>
    80020588:	b4ae10ef          	jal	800018d2 <reset_state>
}
    8002058c:	60e2                	ld	ra,24(sp)
    8002058e:	8522                	mv	a0,s0
    80020590:	6442                	ld	s0,16(sp)
    80020592:	64a2                	ld	s1,8(sp)
    80020594:	6105                	addi	sp,sp,32
    80020596:	8082                	ret

0000000080020598 <timecmp_test_3>:

bool timecmp_test_3() {
    80020598:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002059a:	0000f597          	auipc	a1,0xf
    8002059e:	f4e58593          	addi	a1,a1,-178 # 8002f4e8 <__func__.18>
    800205a2:	00010517          	auipc	a0,0x10
    800205a6:	a3650513          	addi	a0,a0,-1482 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_3() {
    800205aa:	ec06                	sd	ra,24(sp)
    800205ac:	e822                	sd	s0,16(sp)
    800205ae:	e426                	sd	s1,8(sp)
    TEST_START();    
    800205b0:	2dd0c0ef          	jal	8002d08c <printf>
    800205b4:	4529                	li	a0,10
    800205b6:	7c40b0ef          	jal	8002bd7a <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800205ba:	57fd                	li	a5,-1
    800205bc:	17fe                	slli	a5,a5,0x3f
    800205be:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VS); 
    800205c2:	4509                	li	a0,2
    800205c4:	945e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800205c8:	845e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800205cc:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800205d0:	08200593          	li	a1,130
    800205d4:	00018617          	auipc	a2,0x18
    800205d8:	97460613          	addi	a2,a2,-1676 # 80037f48 <__func__.0+0x8258>
    800205dc:	00010517          	auipc	a0,0x10
    800205e0:	a1450513          	addi	a0,a0,-1516 # 8002fff0 <__func__.0+0x300>
    800205e4:	2a90c0ef          	jal	8002d08c <printf>
    800205e8:	00038797          	auipc	a5,0x38
    800205ec:	a297c783          	lbu	a5,-1495(a5) # 80058011 <excpt+0x1>
    800205f0:	00038497          	auipc	s1,0x38
    800205f4:	a2048493          	addi	s1,s1,-1504 # 80058010 <excpt>
    800205f8:	00010597          	auipc	a1,0x10
    800205fc:	9d058593          	addi	a1,a1,-1584 # 8002ffc8 <__func__.0+0x2d8>
    80020600:	cf89                	beqz	a5,8002061a <timecmp_test_3+0x82>
    80020602:	6498                	ld	a4,8(s1)
    80020604:	4789                	li	a5,2
    80020606:	00010597          	auipc	a1,0x10
    8002060a:	9b258593          	addi	a1,a1,-1614 # 8002ffb8 <__func__.0+0x2c8>
    8002060e:	00f70663          	beq	a4,a5,8002061a <timecmp_test_3+0x82>
    80020612:	00010597          	auipc	a1,0x10
    80020616:	9b658593          	addi	a1,a1,-1610 # 8002ffc8 <__func__.0+0x2d8>
    8002061a:	00010517          	auipc	a0,0x10
    8002061e:	9ee50513          	addi	a0,a0,-1554 # 80030008 <__func__.0+0x318>
    80020622:	26b0c0ef          	jal	8002d08c <printf>
    80020626:	00038797          	auipc	a5,0x38
    8002062a:	9eb7c783          	lbu	a5,-1557(a5) # 80058011 <excpt+0x1>
    8002062e:	c789                	beqz	a5,80020638 <timecmp_test_3+0xa0>
    80020630:	6498                	ld	a4,8(s1)
    80020632:	4789                	li	a5,2
    80020634:	00f70c63          	beq	a4,a5,8002064c <timecmp_test_3+0xb4>
    80020638:	00010517          	auipc	a0,0x10
    8002063c:	9d850513          	addi	a0,a0,-1576 # 80030010 <__func__.0+0x320>
    80020640:	24d0c0ef          	jal	8002d08c <printf>
    80020644:	02900513          	li	a0,41
    80020648:	7320b0ef          	jal	8002bd7a <putchar>
    8002064c:	4529                	li	a0,10
    8002064e:	72c0b0ef          	jal	8002bd7a <putchar>
    80020652:	00038417          	auipc	s0,0x38
    80020656:	9bf44403          	lbu	s0,-1601(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002065a:	00010597          	auipc	a1,0x10
    8002065e:	96e58593          	addi	a1,a1,-1682 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020662:	cc11                	beqz	s0,8002067e <timecmp_test_3+0xe6>
    80020664:	6498                	ld	a4,8(s1)
    80020666:	4789                	li	a5,2
    TEST_END(); 
    80020668:	00010597          	auipc	a1,0x10
    8002066c:	95058593          	addi	a1,a1,-1712 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020670:	00f70763          	beq	a4,a5,8002067e <timecmp_test_3+0xe6>
    80020674:	4401                	li	s0,0
    TEST_END(); 
    80020676:	00010597          	auipc	a1,0x10
    8002067a:	95258593          	addi	a1,a1,-1710 # 8002ffc8 <__func__.0+0x2d8>
    8002067e:	00010517          	auipc	a0,0x10
    80020682:	9f250513          	addi	a0,a0,-1550 # 80030070 <__func__.0+0x380>
    80020686:	2070c0ef          	jal	8002d08c <printf>
    8002068a:	4511                	li	a0,4
    8002068c:	87de00ef          	jal	80000f08 <goto_priv>
    80020690:	a42e10ef          	jal	800018d2 <reset_state>
}
    80020694:	60e2                	ld	ra,24(sp)
    80020696:	8522                	mv	a0,s0
    80020698:	6442                	ld	s0,16(sp)
    8002069a:	64a2                	ld	s1,8(sp)
    8002069c:	6105                	addi	sp,sp,32
    8002069e:	8082                	ret

00000000800206a0 <timecmp_test_4>:

bool timecmp_test_4() {
    800206a0:	1101                	addi	sp,sp,-32

    TEST_START();    
    800206a2:	0000f597          	auipc	a1,0xf
    800206a6:	e5658593          	addi	a1,a1,-426 # 8002f4f8 <__func__.17>
    800206aa:	00010517          	auipc	a0,0x10
    800206ae:	92e50513          	addi	a0,a0,-1746 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_4() {
    800206b2:	ec06                	sd	ra,24(sp)
    800206b4:	e822                	sd	s0,16(sp)
    800206b6:	e426                	sd	s1,8(sp)
    TEST_START();    
    800206b8:	1d50c0ef          	jal	8002d08c <printf>
    800206bc:	4529                	li	a0,10
    800206be:	6bc0b0ef          	jal	8002bd7a <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800206c2:	57fd                	li	a5,-1
    800206c4:	17fe                	slli	a5,a5,0x3f
    800206c6:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HU);
    800206ca:	4505                	li	a0,1
    800206cc:	83de00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800206d0:	f3ce00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800206d4:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800206d8:	08200593          	li	a1,130
    800206dc:	00018617          	auipc	a2,0x18
    800206e0:	8c460613          	addi	a2,a2,-1852 # 80037fa0 <__func__.0+0x82b0>
    800206e4:	00010517          	auipc	a0,0x10
    800206e8:	90c50513          	addi	a0,a0,-1780 # 8002fff0 <__func__.0+0x300>
    800206ec:	1a10c0ef          	jal	8002d08c <printf>
    800206f0:	00038797          	auipc	a5,0x38
    800206f4:	9217c783          	lbu	a5,-1759(a5) # 80058011 <excpt+0x1>
    800206f8:	00038497          	auipc	s1,0x38
    800206fc:	91848493          	addi	s1,s1,-1768 # 80058010 <excpt>
    80020700:	00010597          	auipc	a1,0x10
    80020704:	8c858593          	addi	a1,a1,-1848 # 8002ffc8 <__func__.0+0x2d8>
    80020708:	cf89                	beqz	a5,80020722 <timecmp_test_4+0x82>
    8002070a:	6498                	ld	a4,8(s1)
    8002070c:	4789                	li	a5,2
    8002070e:	00010597          	auipc	a1,0x10
    80020712:	8aa58593          	addi	a1,a1,-1878 # 8002ffb8 <__func__.0+0x2c8>
    80020716:	00f70663          	beq	a4,a5,80020722 <timecmp_test_4+0x82>
    8002071a:	00010597          	auipc	a1,0x10
    8002071e:	8ae58593          	addi	a1,a1,-1874 # 8002ffc8 <__func__.0+0x2d8>
    80020722:	00010517          	auipc	a0,0x10
    80020726:	8e650513          	addi	a0,a0,-1818 # 80030008 <__func__.0+0x318>
    8002072a:	1630c0ef          	jal	8002d08c <printf>
    8002072e:	00038797          	auipc	a5,0x38
    80020732:	8e37c783          	lbu	a5,-1821(a5) # 80058011 <excpt+0x1>
    80020736:	c789                	beqz	a5,80020740 <timecmp_test_4+0xa0>
    80020738:	6498                	ld	a4,8(s1)
    8002073a:	4789                	li	a5,2
    8002073c:	00f70c63          	beq	a4,a5,80020754 <timecmp_test_4+0xb4>
    80020740:	00010517          	auipc	a0,0x10
    80020744:	8d050513          	addi	a0,a0,-1840 # 80030010 <__func__.0+0x320>
    80020748:	1450c0ef          	jal	8002d08c <printf>
    8002074c:	02900513          	li	a0,41
    80020750:	62a0b0ef          	jal	8002bd7a <putchar>
    80020754:	4529                	li	a0,10
    80020756:	6240b0ef          	jal	8002bd7a <putchar>
    8002075a:	00038417          	auipc	s0,0x38
    8002075e:	8b744403          	lbu	s0,-1865(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020762:	00010597          	auipc	a1,0x10
    80020766:	86658593          	addi	a1,a1,-1946 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002076a:	cc11                	beqz	s0,80020786 <timecmp_test_4+0xe6>
    8002076c:	6498                	ld	a4,8(s1)
    8002076e:	4789                	li	a5,2
    TEST_END(); 
    80020770:	00010597          	auipc	a1,0x10
    80020774:	84858593          	addi	a1,a1,-1976 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020778:	00f70763          	beq	a4,a5,80020786 <timecmp_test_4+0xe6>
    8002077c:	4401                	li	s0,0
    TEST_END(); 
    8002077e:	00010597          	auipc	a1,0x10
    80020782:	84a58593          	addi	a1,a1,-1974 # 8002ffc8 <__func__.0+0x2d8>
    80020786:	00010517          	auipc	a0,0x10
    8002078a:	8ea50513          	addi	a0,a0,-1814 # 80030070 <__func__.0+0x380>
    8002078e:	0ff0c0ef          	jal	8002d08c <printf>
    80020792:	4511                	li	a0,4
    80020794:	f74e00ef          	jal	80000f08 <goto_priv>
    80020798:	93ae10ef          	jal	800018d2 <reset_state>
}
    8002079c:	60e2                	ld	ra,24(sp)
    8002079e:	8522                	mv	a0,s0
    800207a0:	6442                	ld	s0,16(sp)
    800207a2:	64a2                	ld	s1,8(sp)
    800207a4:	6105                	addi	sp,sp,32
    800207a6:	8082                	ret

00000000800207a8 <timecmp_test_5>:

bool timecmp_test_5() {
    800207a8:	1101                	addi	sp,sp,-32

    TEST_START();    
    800207aa:	0000f597          	auipc	a1,0xf
    800207ae:	d5e58593          	addi	a1,a1,-674 # 8002f508 <__func__.16>
    800207b2:	00010517          	auipc	a0,0x10
    800207b6:	82650513          	addi	a0,a0,-2010 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_5() {
    800207ba:	ec06                	sd	ra,24(sp)
    800207bc:	e822                	sd	s0,16(sp)
    800207be:	e426                	sd	s1,8(sp)
    TEST_START();    
    800207c0:	0cd0c0ef          	jal	8002d08c <printf>
    800207c4:	4529                	li	a0,10
    800207c6:	5b40b0ef          	jal	8002bd7a <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800207ca:	57fd                	li	a5,-1
    800207cc:	17fe                	slli	a5,a5,0x3f
    800207ce:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VU);
    800207d2:	4501                	li	a0,0
    800207d4:	f34e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800207d8:	e34e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800207dc:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800207e0:	08200593          	li	a1,130
    800207e4:	00018617          	auipc	a2,0x18
    800207e8:	81460613          	addi	a2,a2,-2028 # 80037ff8 <__func__.0+0x8308>
    800207ec:	00010517          	auipc	a0,0x10
    800207f0:	80450513          	addi	a0,a0,-2044 # 8002fff0 <__func__.0+0x300>
    800207f4:	0990c0ef          	jal	8002d08c <printf>
    800207f8:	00038797          	auipc	a5,0x38
    800207fc:	8197c783          	lbu	a5,-2023(a5) # 80058011 <excpt+0x1>
    80020800:	00038497          	auipc	s1,0x38
    80020804:	81048493          	addi	s1,s1,-2032 # 80058010 <excpt>
    80020808:	0000f597          	auipc	a1,0xf
    8002080c:	7c058593          	addi	a1,a1,1984 # 8002ffc8 <__func__.0+0x2d8>
    80020810:	cf89                	beqz	a5,8002082a <timecmp_test_5+0x82>
    80020812:	6498                	ld	a4,8(s1)
    80020814:	4789                	li	a5,2
    80020816:	0000f597          	auipc	a1,0xf
    8002081a:	7a258593          	addi	a1,a1,1954 # 8002ffb8 <__func__.0+0x2c8>
    8002081e:	00f70663          	beq	a4,a5,8002082a <timecmp_test_5+0x82>
    80020822:	0000f597          	auipc	a1,0xf
    80020826:	7a658593          	addi	a1,a1,1958 # 8002ffc8 <__func__.0+0x2d8>
    8002082a:	0000f517          	auipc	a0,0xf
    8002082e:	7de50513          	addi	a0,a0,2014 # 80030008 <__func__.0+0x318>
    80020832:	05b0c0ef          	jal	8002d08c <printf>
    80020836:	00037797          	auipc	a5,0x37
    8002083a:	7db7c783          	lbu	a5,2011(a5) # 80058011 <excpt+0x1>
    8002083e:	c789                	beqz	a5,80020848 <timecmp_test_5+0xa0>
    80020840:	6498                	ld	a4,8(s1)
    80020842:	4789                	li	a5,2
    80020844:	00f70c63          	beq	a4,a5,8002085c <timecmp_test_5+0xb4>
    80020848:	0000f517          	auipc	a0,0xf
    8002084c:	7c850513          	addi	a0,a0,1992 # 80030010 <__func__.0+0x320>
    80020850:	03d0c0ef          	jal	8002d08c <printf>
    80020854:	02900513          	li	a0,41
    80020858:	5220b0ef          	jal	8002bd7a <putchar>
    8002085c:	4529                	li	a0,10
    8002085e:	51c0b0ef          	jal	8002bd7a <putchar>
    80020862:	00037417          	auipc	s0,0x37
    80020866:	7af44403          	lbu	s0,1967(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002086a:	0000f597          	auipc	a1,0xf
    8002086e:	75e58593          	addi	a1,a1,1886 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020872:	cc11                	beqz	s0,8002088e <timecmp_test_5+0xe6>
    80020874:	6498                	ld	a4,8(s1)
    80020876:	4789                	li	a5,2
    TEST_END(); 
    80020878:	0000f597          	auipc	a1,0xf
    8002087c:	74058593          	addi	a1,a1,1856 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020880:	00f70763          	beq	a4,a5,8002088e <timecmp_test_5+0xe6>
    80020884:	4401                	li	s0,0
    TEST_END(); 
    80020886:	0000f597          	auipc	a1,0xf
    8002088a:	74258593          	addi	a1,a1,1858 # 8002ffc8 <__func__.0+0x2d8>
    8002088e:	0000f517          	auipc	a0,0xf
    80020892:	7e250513          	addi	a0,a0,2018 # 80030070 <__func__.0+0x380>
    80020896:	7f60c0ef          	jal	8002d08c <printf>
    8002089a:	4511                	li	a0,4
    8002089c:	e6ce00ef          	jal	80000f08 <goto_priv>
    800208a0:	832e10ef          	jal	800018d2 <reset_state>
}
    800208a4:	60e2                	ld	ra,24(sp)
    800208a6:	8522                	mv	a0,s0
    800208a8:	6442                	ld	s0,16(sp)
    800208aa:	64a2                	ld	s1,8(sp)
    800208ac:	6105                	addi	sp,sp,32
    800208ae:	8082                	ret

00000000800208b0 <timecmp_test_6>:

bool timecmp_test_6() {
    800208b0:	1101                	addi	sp,sp,-32

    TEST_START();    
    800208b2:	0000f597          	auipc	a1,0xf
    800208b6:	c6658593          	addi	a1,a1,-922 # 8002f518 <__func__.15>
    800208ba:	0000f517          	auipc	a0,0xf
    800208be:	71e50513          	addi	a0,a0,1822 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_6() {
    800208c2:	ec06                	sd	ra,24(sp)
    800208c4:	e822                	sd	s0,16(sp)
    800208c6:	e426                	sd	s1,8(sp)
    TEST_START();    
    800208c8:	7c40c0ef          	jal	8002d08c <printf>
    800208cc:	4529                	li	a0,10
    800208ce:	4ac0b0ef          	jal	8002bd7a <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800208d2:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    800208d6:	450d                	li	a0,3
    800208d8:	e30e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800208dc:	d30e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    800208e0:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800208e4:	08200593          	li	a1,130
    800208e8:	00017617          	auipc	a2,0x17
    800208ec:	76860613          	addi	a2,a2,1896 # 80038050 <__func__.0+0x8360>
    800208f0:	0000f517          	auipc	a0,0xf
    800208f4:	70050513          	addi	a0,a0,1792 # 8002fff0 <__func__.0+0x300>
    800208f8:	7940c0ef          	jal	8002d08c <printf>
    800208fc:	00037797          	auipc	a5,0x37
    80020900:	7157c783          	lbu	a5,1813(a5) # 80058011 <excpt+0x1>
    80020904:	00037497          	auipc	s1,0x37
    80020908:	70c48493          	addi	s1,s1,1804 # 80058010 <excpt>
    8002090c:	0000f597          	auipc	a1,0xf
    80020910:	6bc58593          	addi	a1,a1,1724 # 8002ffc8 <__func__.0+0x2d8>
    80020914:	cf89                	beqz	a5,8002092e <timecmp_test_6+0x7e>
    80020916:	6498                	ld	a4,8(s1)
    80020918:	4789                	li	a5,2
    8002091a:	0000f597          	auipc	a1,0xf
    8002091e:	69e58593          	addi	a1,a1,1694 # 8002ffb8 <__func__.0+0x2c8>
    80020922:	00f70663          	beq	a4,a5,8002092e <timecmp_test_6+0x7e>
    80020926:	0000f597          	auipc	a1,0xf
    8002092a:	6a258593          	addi	a1,a1,1698 # 8002ffc8 <__func__.0+0x2d8>
    8002092e:	0000f517          	auipc	a0,0xf
    80020932:	6da50513          	addi	a0,a0,1754 # 80030008 <__func__.0+0x318>
    80020936:	7560c0ef          	jal	8002d08c <printf>
    8002093a:	00037797          	auipc	a5,0x37
    8002093e:	6d77c783          	lbu	a5,1751(a5) # 80058011 <excpt+0x1>
    80020942:	c789                	beqz	a5,8002094c <timecmp_test_6+0x9c>
    80020944:	6498                	ld	a4,8(s1)
    80020946:	4789                	li	a5,2
    80020948:	00f70c63          	beq	a4,a5,80020960 <timecmp_test_6+0xb0>
    8002094c:	0000f517          	auipc	a0,0xf
    80020950:	6c450513          	addi	a0,a0,1732 # 80030010 <__func__.0+0x320>
    80020954:	7380c0ef          	jal	8002d08c <printf>
    80020958:	02900513          	li	a0,41
    8002095c:	41e0b0ef          	jal	8002bd7a <putchar>
    80020960:	4529                	li	a0,10
    80020962:	4180b0ef          	jal	8002bd7a <putchar>
    80020966:	00037417          	auipc	s0,0x37
    8002096a:	6ab44403          	lbu	s0,1707(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002096e:	0000f597          	auipc	a1,0xf
    80020972:	65a58593          	addi	a1,a1,1626 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020976:	cc11                	beqz	s0,80020992 <timecmp_test_6+0xe2>
    80020978:	6498                	ld	a4,8(s1)
    8002097a:	4789                	li	a5,2
    TEST_END(); 
    8002097c:	0000f597          	auipc	a1,0xf
    80020980:	63c58593          	addi	a1,a1,1596 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020984:	00f70763          	beq	a4,a5,80020992 <timecmp_test_6+0xe2>
    80020988:	4401                	li	s0,0
    TEST_END(); 
    8002098a:	0000f597          	auipc	a1,0xf
    8002098e:	63e58593          	addi	a1,a1,1598 # 8002ffc8 <__func__.0+0x2d8>
    80020992:	0000f517          	auipc	a0,0xf
    80020996:	6de50513          	addi	a0,a0,1758 # 80030070 <__func__.0+0x380>
    8002099a:	6f20c0ef          	jal	8002d08c <printf>
    8002099e:	4511                	li	a0,4
    800209a0:	d68e00ef          	jal	80000f08 <goto_priv>
    800209a4:	f2fe00ef          	jal	800018d2 <reset_state>
}
    800209a8:	60e2                	ld	ra,24(sp)
    800209aa:	8522                	mv	a0,s0
    800209ac:	6442                	ld	s0,16(sp)
    800209ae:	64a2                	ld	s1,8(sp)
    800209b0:	6105                	addi	sp,sp,32
    800209b2:	8082                	ret

00000000800209b4 <timecmp_test_7>:

bool timecmp_test_7() {
    800209b4:	1101                	addi	sp,sp,-32

    TEST_START();    
    800209b6:	0000f597          	auipc	a1,0xf
    800209ba:	b7258593          	addi	a1,a1,-1166 # 8002f528 <__func__.14>
    800209be:	0000f517          	auipc	a0,0xf
    800209c2:	61a50513          	addi	a0,a0,1562 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_7() {
    800209c6:	ec06                	sd	ra,24(sp)
    800209c8:	e822                	sd	s0,16(sp)
    800209ca:	e426                	sd	s1,8(sp)
    TEST_START();    
    800209cc:	6c00c0ef          	jal	8002d08c <printf>
    800209d0:	4529                	li	a0,10
    800209d2:	3a80b0ef          	jal	8002bd7a <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800209d6:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    800209da:	4509                	li	a0,2
    800209dc:	d2ce00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800209e0:	c2ce00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    800209e4:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800209e8:	08200593          	li	a1,130
    800209ec:	00017617          	auipc	a2,0x17
    800209f0:	6bc60613          	addi	a2,a2,1724 # 800380a8 <__func__.0+0x83b8>
    800209f4:	0000f517          	auipc	a0,0xf
    800209f8:	5fc50513          	addi	a0,a0,1532 # 8002fff0 <__func__.0+0x300>
    800209fc:	6900c0ef          	jal	8002d08c <printf>
    80020a00:	00037797          	auipc	a5,0x37
    80020a04:	6117c783          	lbu	a5,1553(a5) # 80058011 <excpt+0x1>
    80020a08:	00037497          	auipc	s1,0x37
    80020a0c:	60848493          	addi	s1,s1,1544 # 80058010 <excpt>
    80020a10:	0000f597          	auipc	a1,0xf
    80020a14:	5b858593          	addi	a1,a1,1464 # 8002ffc8 <__func__.0+0x2d8>
    80020a18:	cf89                	beqz	a5,80020a32 <timecmp_test_7+0x7e>
    80020a1a:	6498                	ld	a4,8(s1)
    80020a1c:	4789                	li	a5,2
    80020a1e:	0000f597          	auipc	a1,0xf
    80020a22:	59a58593          	addi	a1,a1,1434 # 8002ffb8 <__func__.0+0x2c8>
    80020a26:	00f70663          	beq	a4,a5,80020a32 <timecmp_test_7+0x7e>
    80020a2a:	0000f597          	auipc	a1,0xf
    80020a2e:	59e58593          	addi	a1,a1,1438 # 8002ffc8 <__func__.0+0x2d8>
    80020a32:	0000f517          	auipc	a0,0xf
    80020a36:	5d650513          	addi	a0,a0,1494 # 80030008 <__func__.0+0x318>
    80020a3a:	6520c0ef          	jal	8002d08c <printf>
    80020a3e:	00037797          	auipc	a5,0x37
    80020a42:	5d37c783          	lbu	a5,1491(a5) # 80058011 <excpt+0x1>
    80020a46:	c789                	beqz	a5,80020a50 <timecmp_test_7+0x9c>
    80020a48:	6498                	ld	a4,8(s1)
    80020a4a:	4789                	li	a5,2
    80020a4c:	00f70c63          	beq	a4,a5,80020a64 <timecmp_test_7+0xb0>
    80020a50:	0000f517          	auipc	a0,0xf
    80020a54:	5c050513          	addi	a0,a0,1472 # 80030010 <__func__.0+0x320>
    80020a58:	6340c0ef          	jal	8002d08c <printf>
    80020a5c:	02900513          	li	a0,41
    80020a60:	31a0b0ef          	jal	8002bd7a <putchar>
    80020a64:	4529                	li	a0,10
    80020a66:	3140b0ef          	jal	8002bd7a <putchar>
    80020a6a:	00037417          	auipc	s0,0x37
    80020a6e:	5a744403          	lbu	s0,1447(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020a72:	0000f597          	auipc	a1,0xf
    80020a76:	55658593          	addi	a1,a1,1366 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020a7a:	cc11                	beqz	s0,80020a96 <timecmp_test_7+0xe2>
    80020a7c:	6498                	ld	a4,8(s1)
    80020a7e:	4789                	li	a5,2
    TEST_END(); 
    80020a80:	0000f597          	auipc	a1,0xf
    80020a84:	53858593          	addi	a1,a1,1336 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020a88:	00f70763          	beq	a4,a5,80020a96 <timecmp_test_7+0xe2>
    80020a8c:	4401                	li	s0,0
    TEST_END(); 
    80020a8e:	0000f597          	auipc	a1,0xf
    80020a92:	53a58593          	addi	a1,a1,1338 # 8002ffc8 <__func__.0+0x2d8>
    80020a96:	0000f517          	auipc	a0,0xf
    80020a9a:	5da50513          	addi	a0,a0,1498 # 80030070 <__func__.0+0x380>
    80020a9e:	5ee0c0ef          	jal	8002d08c <printf>
    80020aa2:	4511                	li	a0,4
    80020aa4:	c64e00ef          	jal	80000f08 <goto_priv>
    80020aa8:	e2be00ef          	jal	800018d2 <reset_state>
}
    80020aac:	60e2                	ld	ra,24(sp)
    80020aae:	8522                	mv	a0,s0
    80020ab0:	6442                	ld	s0,16(sp)
    80020ab2:	64a2                	ld	s1,8(sp)
    80020ab4:	6105                	addi	sp,sp,32
    80020ab6:	8082                	ret

0000000080020ab8 <timecmp_test_8>:

bool timecmp_test_8() {
    80020ab8:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020aba:	0000f597          	auipc	a1,0xf
    80020abe:	a7e58593          	addi	a1,a1,-1410 # 8002f538 <__func__.13>
    80020ac2:	0000f517          	auipc	a0,0xf
    80020ac6:	51650513          	addi	a0,a0,1302 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_8() {
    80020aca:	ec06                	sd	ra,24(sp)
    80020acc:	e822                	sd	s0,16(sp)
    80020ace:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020ad0:	5bc0c0ef          	jal	8002d08c <printf>
    80020ad4:	4529                	li	a0,10
    80020ad6:	2a40b0ef          	jal	8002bd7a <putchar>

    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020ada:	57fd                	li	a5,-1
    80020adc:	17fe                	slli	a5,a5,0x3f
    80020ade:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020ae2:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020ae6:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020aea:	60617073          	csrci	hcounteren,2

    goto_priv(PRIV_VS);
    80020aee:	4509                	li	a0,2
    80020af0:	c18e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020af4:	b18e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020af8:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80020afc:	08200593          	li	a1,130
    80020b00:	00017617          	auipc	a2,0x17
    80020b04:	60060613          	addi	a2,a2,1536 # 80038100 <__func__.0+0x8410>
    80020b08:	0000f517          	auipc	a0,0xf
    80020b0c:	4e850513          	addi	a0,a0,1256 # 8002fff0 <__func__.0+0x300>
    80020b10:	57c0c0ef          	jal	8002d08c <printf>
    80020b14:	00037797          	auipc	a5,0x37
    80020b18:	4fd7c783          	lbu	a5,1277(a5) # 80058011 <excpt+0x1>
    80020b1c:	00037497          	auipc	s1,0x37
    80020b20:	4f448493          	addi	s1,s1,1268 # 80058010 <excpt>
    80020b24:	0000f597          	auipc	a1,0xf
    80020b28:	4a458593          	addi	a1,a1,1188 # 8002ffc8 <__func__.0+0x2d8>
    80020b2c:	cf89                	beqz	a5,80020b46 <timecmp_test_8+0x8e>
    80020b2e:	6498                	ld	a4,8(s1)
    80020b30:	47d9                	li	a5,22
    80020b32:	0000f597          	auipc	a1,0xf
    80020b36:	48658593          	addi	a1,a1,1158 # 8002ffb8 <__func__.0+0x2c8>
    80020b3a:	00f70663          	beq	a4,a5,80020b46 <timecmp_test_8+0x8e>
    80020b3e:	0000f597          	auipc	a1,0xf
    80020b42:	48a58593          	addi	a1,a1,1162 # 8002ffc8 <__func__.0+0x2d8>
    80020b46:	0000f517          	auipc	a0,0xf
    80020b4a:	4c250513          	addi	a0,a0,1218 # 80030008 <__func__.0+0x318>
    80020b4e:	53e0c0ef          	jal	8002d08c <printf>
    80020b52:	00037797          	auipc	a5,0x37
    80020b56:	4bf7c783          	lbu	a5,1215(a5) # 80058011 <excpt+0x1>
    80020b5a:	c789                	beqz	a5,80020b64 <timecmp_test_8+0xac>
    80020b5c:	6498                	ld	a4,8(s1)
    80020b5e:	47d9                	li	a5,22
    80020b60:	00f70c63          	beq	a4,a5,80020b78 <timecmp_test_8+0xc0>
    80020b64:	0000f517          	auipc	a0,0xf
    80020b68:	4ac50513          	addi	a0,a0,1196 # 80030010 <__func__.0+0x320>
    80020b6c:	5200c0ef          	jal	8002d08c <printf>
    80020b70:	02900513          	li	a0,41
    80020b74:	2060b0ef          	jal	8002bd7a <putchar>
    80020b78:	4529                	li	a0,10
    80020b7a:	2000b0ef          	jal	8002bd7a <putchar>
    80020b7e:	00037417          	auipc	s0,0x37
    80020b82:	49344403          	lbu	s0,1171(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020b86:	0000f597          	auipc	a1,0xf
    80020b8a:	44258593          	addi	a1,a1,1090 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80020b8e:	cc11                	beqz	s0,80020baa <timecmp_test_8+0xf2>
    80020b90:	6498                	ld	a4,8(s1)
    80020b92:	47d9                	li	a5,22
    TEST_END(); 
    80020b94:	0000f597          	auipc	a1,0xf
    80020b98:	42458593          	addi	a1,a1,1060 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80020b9c:	00f70763          	beq	a4,a5,80020baa <timecmp_test_8+0xf2>
    80020ba0:	4401                	li	s0,0
    TEST_END(); 
    80020ba2:	0000f597          	auipc	a1,0xf
    80020ba6:	42658593          	addi	a1,a1,1062 # 8002ffc8 <__func__.0+0x2d8>
    80020baa:	0000f517          	auipc	a0,0xf
    80020bae:	4c650513          	addi	a0,a0,1222 # 80030070 <__func__.0+0x380>
    80020bb2:	4da0c0ef          	jal	8002d08c <printf>
    80020bb6:	4511                	li	a0,4
    80020bb8:	b50e00ef          	jal	80000f08 <goto_priv>
    80020bbc:	d17e00ef          	jal	800018d2 <reset_state>
}
    80020bc0:	60e2                	ld	ra,24(sp)
    80020bc2:	8522                	mv	a0,s0
    80020bc4:	6442                	ld	s0,16(sp)
    80020bc6:	64a2                	ld	s1,8(sp)
    80020bc8:	6105                	addi	sp,sp,32
    80020bca:	8082                	ret

0000000080020bcc <timecmp_test_9>:

bool timecmp_test_9() {
    80020bcc:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020bce:	0000f597          	auipc	a1,0xf
    80020bd2:	97a58593          	addi	a1,a1,-1670 # 8002f548 <__func__.12>
    80020bd6:	0000f517          	auipc	a0,0xf
    80020bda:	40250513          	addi	a0,a0,1026 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_9() {
    80020bde:	ec06                	sd	ra,24(sp)
    80020be0:	e822                	sd	s0,16(sp)
    80020be2:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020be4:	4a80c0ef          	jal	8002d08c <printf>
    80020be8:	4529                	li	a0,10
    80020bea:	1900b0ef          	jal	8002bd7a <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020bee:	57fd                	li	a5,-1
    80020bf0:	17fe                	slli	a5,a5,0x3f
    80020bf2:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020bf6:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020bfa:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020bfe:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80020c02:	4509                	li	a0,2
    80020c04:	b04e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020c08:	a04e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020c0c:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020c10:	08200593          	li	a1,130
    80020c14:	00017617          	auipc	a2,0x17
    80020c18:	56c60613          	addi	a2,a2,1388 # 80038180 <__func__.0+0x8490>
    80020c1c:	0000f517          	auipc	a0,0xf
    80020c20:	3d450513          	addi	a0,a0,980 # 8002fff0 <__func__.0+0x300>
    80020c24:	4680c0ef          	jal	8002d08c <printf>
    80020c28:	00037797          	auipc	a5,0x37
    80020c2c:	3e97c783          	lbu	a5,1001(a5) # 80058011 <excpt+0x1>
    80020c30:	00037497          	auipc	s1,0x37
    80020c34:	3e048493          	addi	s1,s1,992 # 80058010 <excpt>
    80020c38:	0000f597          	auipc	a1,0xf
    80020c3c:	39058593          	addi	a1,a1,912 # 8002ffc8 <__func__.0+0x2d8>
    80020c40:	cf89                	beqz	a5,80020c5a <timecmp_test_9+0x8e>
    80020c42:	6498                	ld	a4,8(s1)
    80020c44:	47d9                	li	a5,22
    80020c46:	0000f597          	auipc	a1,0xf
    80020c4a:	37258593          	addi	a1,a1,882 # 8002ffb8 <__func__.0+0x2c8>
    80020c4e:	00f70663          	beq	a4,a5,80020c5a <timecmp_test_9+0x8e>
    80020c52:	0000f597          	auipc	a1,0xf
    80020c56:	37658593          	addi	a1,a1,886 # 8002ffc8 <__func__.0+0x2d8>
    80020c5a:	0000f517          	auipc	a0,0xf
    80020c5e:	3ae50513          	addi	a0,a0,942 # 80030008 <__func__.0+0x318>
    80020c62:	42a0c0ef          	jal	8002d08c <printf>
    80020c66:	00037797          	auipc	a5,0x37
    80020c6a:	3ab7c783          	lbu	a5,939(a5) # 80058011 <excpt+0x1>
    80020c6e:	c789                	beqz	a5,80020c78 <timecmp_test_9+0xac>
    80020c70:	6498                	ld	a4,8(s1)
    80020c72:	47d9                	li	a5,22
    80020c74:	00f70c63          	beq	a4,a5,80020c8c <timecmp_test_9+0xc0>
    80020c78:	0000f517          	auipc	a0,0xf
    80020c7c:	39850513          	addi	a0,a0,920 # 80030010 <__func__.0+0x320>
    80020c80:	40c0c0ef          	jal	8002d08c <printf>
    80020c84:	02900513          	li	a0,41
    80020c88:	0f20b0ef          	jal	8002bd7a <putchar>
    80020c8c:	4529                	li	a0,10
    80020c8e:	0ec0b0ef          	jal	8002bd7a <putchar>
    80020c92:	00037417          	auipc	s0,0x37
    80020c96:	37f44403          	lbu	s0,895(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020c9a:	0000f597          	auipc	a1,0xf
    80020c9e:	32e58593          	addi	a1,a1,814 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020ca2:	cc11                	beqz	s0,80020cbe <timecmp_test_9+0xf2>
    80020ca4:	6498                	ld	a4,8(s1)
    80020ca6:	47d9                	li	a5,22
    TEST_END(); 
    80020ca8:	0000f597          	auipc	a1,0xf
    80020cac:	31058593          	addi	a1,a1,784 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020cb0:	00f70763          	beq	a4,a5,80020cbe <timecmp_test_9+0xf2>
    80020cb4:	4401                	li	s0,0
    TEST_END(); 
    80020cb6:	0000f597          	auipc	a1,0xf
    80020cba:	31258593          	addi	a1,a1,786 # 8002ffc8 <__func__.0+0x2d8>
    80020cbe:	0000f517          	auipc	a0,0xf
    80020cc2:	3b250513          	addi	a0,a0,946 # 80030070 <__func__.0+0x380>
    80020cc6:	3c60c0ef          	jal	8002d08c <printf>
    80020cca:	4511                	li	a0,4
    80020ccc:	a3ce00ef          	jal	80000f08 <goto_priv>
    80020cd0:	c03e00ef          	jal	800018d2 <reset_state>
}
    80020cd4:	60e2                	ld	ra,24(sp)
    80020cd6:	8522                	mv	a0,s0
    80020cd8:	6442                	ld	s0,16(sp)
    80020cda:	64a2                	ld	s1,8(sp)
    80020cdc:	6105                	addi	sp,sp,32
    80020cde:	8082                	ret

0000000080020ce0 <timecmp_test_10>:

bool timecmp_test_10() {
    80020ce0:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020ce2:	0000f597          	auipc	a1,0xf
    80020ce6:	87658593          	addi	a1,a1,-1930 # 8002f558 <__func__.11>
    80020cea:	0000f517          	auipc	a0,0xf
    80020cee:	2ee50513          	addi	a0,a0,750 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_10() {
    80020cf2:	e406                	sd	ra,8(sp)
    80020cf4:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020cf6:	3960c0ef          	jal	8002d08c <printf>
    80020cfa:	4529                	li	a0,10
    80020cfc:	07e0b0ef          	jal	8002bd7a <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020d00:	57fd                	li	a5,-1
    80020d02:	17fe                	slli	a5,a5,0x3f
    80020d04:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020d08:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020d0c:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020d10:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80020d14:	4509                	li	a0,2
    80020d16:	9f2e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020d1a:	8f2e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020d1e:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020d22:	08200593          	li	a1,130
    80020d26:	00017617          	auipc	a2,0x17
    80020d2a:	4da60613          	addi	a2,a2,1242 # 80038200 <__func__.0+0x8510>
    80020d2e:	0000f517          	auipc	a0,0xf
    80020d32:	2c250513          	addi	a0,a0,706 # 8002fff0 <__func__.0+0x300>
    80020d36:	3560c0ef          	jal	8002d08c <printf>
    80020d3a:	00037797          	auipc	a5,0x37
    80020d3e:	2d77c783          	lbu	a5,727(a5) # 80058011 <excpt+0x1>
    80020d42:	0000f597          	auipc	a1,0xf
    80020d46:	27658593          	addi	a1,a1,630 # 8002ffb8 <__func__.0+0x2c8>
    80020d4a:	c789                	beqz	a5,80020d54 <timecmp_test_10+0x74>
    80020d4c:	0000f597          	auipc	a1,0xf
    80020d50:	27c58593          	addi	a1,a1,636 # 8002ffc8 <__func__.0+0x2d8>
    80020d54:	0000f517          	auipc	a0,0xf
    80020d58:	2b450513          	addi	a0,a0,692 # 80030008 <__func__.0+0x318>
    80020d5c:	3300c0ef          	jal	8002d08c <printf>
    80020d60:	00037797          	auipc	a5,0x37
    80020d64:	2b17c783          	lbu	a5,689(a5) # 80058011 <excpt+0x1>
    80020d68:	e7a1                	bnez	a5,80020db0 <timecmp_test_10+0xd0>
    80020d6a:	4529                	li	a0,10
    80020d6c:	00e0b0ef          	jal	8002bd7a <putchar>
    80020d70:	00037797          	auipc	a5,0x37
    80020d74:	2a17c783          	lbu	a5,673(a5) # 80058011 <excpt+0x1>
    80020d78:	e795                	bnez	a5,80020da4 <timecmp_test_10+0xc4>
    80020d7a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020d7c:	0000f597          	auipc	a1,0xf
    80020d80:	23c58593          	addi	a1,a1,572 # 8002ffb8 <__func__.0+0x2c8>
    80020d84:	0000f517          	auipc	a0,0xf
    80020d88:	2ec50513          	addi	a0,a0,748 # 80030070 <__func__.0+0x380>
    80020d8c:	3000c0ef          	jal	8002d08c <printf>
    80020d90:	4511                	li	a0,4
    80020d92:	976e00ef          	jal	80000f08 <goto_priv>
    80020d96:	b3de00ef          	jal	800018d2 <reset_state>
}
    80020d9a:	60a2                	ld	ra,8(sp)
    80020d9c:	8522                	mv	a0,s0
    80020d9e:	6402                	ld	s0,0(sp)
    80020da0:	0141                	addi	sp,sp,16
    80020da2:	8082                	ret
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020da4:	4401                	li	s0,0
    TEST_END(); 
    80020da6:	0000f597          	auipc	a1,0xf
    80020daa:	22258593          	addi	a1,a1,546 # 8002ffc8 <__func__.0+0x2d8>
    80020dae:	bfd9                	j	80020d84 <timecmp_test_10+0xa4>
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020db0:	0000f517          	auipc	a0,0xf
    80020db4:	26050513          	addi	a0,a0,608 # 80030010 <__func__.0+0x320>
    80020db8:	2d40c0ef          	jal	8002d08c <printf>
    80020dbc:	02900513          	li	a0,41
    80020dc0:	7bb0a0ef          	jal	8002bd7a <putchar>
    80020dc4:	b75d                	j	80020d6a <timecmp_test_10+0x8a>

0000000080020dc6 <timecmp_test_11>:

bool timecmp_test_11() {
    80020dc6:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020dc8:	0000e597          	auipc	a1,0xe
    80020dcc:	7a058593          	addi	a1,a1,1952 # 8002f568 <__func__.10>
    80020dd0:	0000f517          	auipc	a0,0xf
    80020dd4:	20850513          	addi	a0,a0,520 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_11() {
    80020dd8:	e406                	sd	ra,8(sp)
    80020dda:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020ddc:	2b00c0ef          	jal	8002d08c <printf>
    80020de0:	4529                	li	a0,10
    80020de2:	7990a0ef          	jal	8002bd7a <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020de6:	57fd                	li	a5,-1
    80020de8:	17fe                	slli	a5,a5,0x3f
    80020dea:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020dee:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    80020df2:	450d                	li	a0,3
    80020df4:	914e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020df8:	814e00ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020dfc:	14d027f3          	csrr	a5,stimecmp
    CSRR(CSR_VSTIMECMP);
    80020e00:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020e04:	08200593          	li	a1,130
    80020e08:	00017617          	auipc	a2,0x17
    80020e0c:	46060613          	addi	a2,a2,1120 # 80038268 <__func__.0+0x8578>
    80020e10:	0000f517          	auipc	a0,0xf
    80020e14:	1e050513          	addi	a0,a0,480 # 8002fff0 <__func__.0+0x300>
    80020e18:	2740c0ef          	jal	8002d08c <printf>
    80020e1c:	00037797          	auipc	a5,0x37
    80020e20:	1f57c783          	lbu	a5,501(a5) # 80058011 <excpt+0x1>
    80020e24:	0000f597          	auipc	a1,0xf
    80020e28:	19458593          	addi	a1,a1,404 # 8002ffb8 <__func__.0+0x2c8>
    80020e2c:	c789                	beqz	a5,80020e36 <timecmp_test_11+0x70>
    80020e2e:	0000f597          	auipc	a1,0xf
    80020e32:	19a58593          	addi	a1,a1,410 # 8002ffc8 <__func__.0+0x2d8>
    80020e36:	0000f517          	auipc	a0,0xf
    80020e3a:	1d250513          	addi	a0,a0,466 # 80030008 <__func__.0+0x318>
    80020e3e:	24e0c0ef          	jal	8002d08c <printf>
    80020e42:	00037797          	auipc	a5,0x37
    80020e46:	1cf7c783          	lbu	a5,463(a5) # 80058011 <excpt+0x1>
    80020e4a:	e7a1                	bnez	a5,80020e92 <timecmp_test_11+0xcc>
    80020e4c:	4529                	li	a0,10
    80020e4e:	72d0a0ef          	jal	8002bd7a <putchar>
    80020e52:	00037797          	auipc	a5,0x37
    80020e56:	1bf7c783          	lbu	a5,447(a5) # 80058011 <excpt+0x1>
    80020e5a:	e795                	bnez	a5,80020e86 <timecmp_test_11+0xc0>
    80020e5c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020e5e:	0000f597          	auipc	a1,0xf
    80020e62:	15a58593          	addi	a1,a1,346 # 8002ffb8 <__func__.0+0x2c8>
    80020e66:	0000f517          	auipc	a0,0xf
    80020e6a:	20a50513          	addi	a0,a0,522 # 80030070 <__func__.0+0x380>
    80020e6e:	21e0c0ef          	jal	8002d08c <printf>
    80020e72:	4511                	li	a0,4
    80020e74:	894e00ef          	jal	80000f08 <goto_priv>
    80020e78:	a5be00ef          	jal	800018d2 <reset_state>
}
    80020e7c:	60a2                	ld	ra,8(sp)
    80020e7e:	8522                	mv	a0,s0
    80020e80:	6402                	ld	s0,0(sp)
    80020e82:	0141                	addi	sp,sp,16
    80020e84:	8082                	ret
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020e86:	4401                	li	s0,0
    TEST_END(); 
    80020e88:	0000f597          	auipc	a1,0xf
    80020e8c:	14058593          	addi	a1,a1,320 # 8002ffc8 <__func__.0+0x2d8>
    80020e90:	bfd9                	j	80020e66 <timecmp_test_11+0xa0>
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020e92:	0000f517          	auipc	a0,0xf
    80020e96:	17e50513          	addi	a0,a0,382 # 80030010 <__func__.0+0x320>
    80020e9a:	1f20c0ef          	jal	8002d08c <printf>
    80020e9e:	02900513          	li	a0,41
    80020ea2:	6d90a0ef          	jal	8002bd7a <putchar>
    80020ea6:	b75d                	j	80020e4c <timecmp_test_11+0x86>

0000000080020ea8 <timecmp_test_12>:

bool timecmp_test_12() {
    80020ea8:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020eaa:	0000e597          	auipc	a1,0xe
    80020eae:	6ce58593          	addi	a1,a1,1742 # 8002f578 <__func__.9>
    80020eb2:	0000f517          	auipc	a0,0xf
    80020eb6:	12650513          	addi	a0,a0,294 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_12() {
    80020eba:	e406                	sd	ra,8(sp)
    80020ebc:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020ebe:	1ce0c0ef          	jal	8002d08c <printf>
    80020ec2:	4529                	li	a0,10
    80020ec4:	6b70a0ef          	jal	8002bd7a <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80020ec8:	57fd                	li	a5,-1
    80020eca:	17fe                	slli	a5,a5,0x3f
    80020ecc:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020ed0:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    80020ed4:	450d                	li	a0,3
    80020ed6:	832e00ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020eda:	f33df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020ede:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020ee2:	08200593          	li	a1,130
    80020ee6:	00017617          	auipc	a2,0x17
    80020eea:	3d260613          	addi	a2,a2,978 # 800382b8 <__func__.0+0x85c8>
    80020eee:	0000f517          	auipc	a0,0xf
    80020ef2:	10250513          	addi	a0,a0,258 # 8002fff0 <__func__.0+0x300>
    80020ef6:	1960c0ef          	jal	8002d08c <printf>
    80020efa:	00037797          	auipc	a5,0x37
    80020efe:	1177c783          	lbu	a5,279(a5) # 80058011 <excpt+0x1>
    80020f02:	0000f597          	auipc	a1,0xf
    80020f06:	0b658593          	addi	a1,a1,182 # 8002ffb8 <__func__.0+0x2c8>
    80020f0a:	c789                	beqz	a5,80020f14 <timecmp_test_12+0x6c>
    80020f0c:	0000f597          	auipc	a1,0xf
    80020f10:	0bc58593          	addi	a1,a1,188 # 8002ffc8 <__func__.0+0x2d8>
    80020f14:	0000f517          	auipc	a0,0xf
    80020f18:	0f450513          	addi	a0,a0,244 # 80030008 <__func__.0+0x318>
    80020f1c:	1700c0ef          	jal	8002d08c <printf>
    80020f20:	00037797          	auipc	a5,0x37
    80020f24:	0f17c783          	lbu	a5,241(a5) # 80058011 <excpt+0x1>
    80020f28:	e7a1                	bnez	a5,80020f70 <timecmp_test_12+0xc8>
    80020f2a:	4529                	li	a0,10
    80020f2c:	64f0a0ef          	jal	8002bd7a <putchar>
    80020f30:	00037797          	auipc	a5,0x37
    80020f34:	0e17c783          	lbu	a5,225(a5) # 80058011 <excpt+0x1>
    80020f38:	e795                	bnez	a5,80020f64 <timecmp_test_12+0xbc>
    80020f3a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020f3c:	0000f597          	auipc	a1,0xf
    80020f40:	07c58593          	addi	a1,a1,124 # 8002ffb8 <__func__.0+0x2c8>
    80020f44:	0000f517          	auipc	a0,0xf
    80020f48:	12c50513          	addi	a0,a0,300 # 80030070 <__func__.0+0x380>
    80020f4c:	1400c0ef          	jal	8002d08c <printf>
    80020f50:	4511                	li	a0,4
    80020f52:	fb7df0ef          	jal	80000f08 <goto_priv>
    80020f56:	97de00ef          	jal	800018d2 <reset_state>
}
    80020f5a:	60a2                	ld	ra,8(sp)
    80020f5c:	8522                	mv	a0,s0
    80020f5e:	6402                	ld	s0,0(sp)
    80020f60:	0141                	addi	sp,sp,16
    80020f62:	8082                	ret
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020f64:	4401                	li	s0,0
    TEST_END(); 
    80020f66:	0000f597          	auipc	a1,0xf
    80020f6a:	06258593          	addi	a1,a1,98 # 8002ffc8 <__func__.0+0x2d8>
    80020f6e:	bfd9                	j	80020f44 <timecmp_test_12+0x9c>
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020f70:	0000f517          	auipc	a0,0xf
    80020f74:	0a050513          	addi	a0,a0,160 # 80030010 <__func__.0+0x320>
    80020f78:	1140c0ef          	jal	8002d08c <printf>
    80020f7c:	02900513          	li	a0,41
    80020f80:	5fb0a0ef          	jal	8002bd7a <putchar>
    80020f84:	b75d                	j	80020f2a <timecmp_test_12+0x82>

0000000080020f86 <timecmp_test_13>:

bool timecmp_test_13() {
    80020f86:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020f88:	0000e597          	auipc	a1,0xe
    80020f8c:	60058593          	addi	a1,a1,1536 # 8002f588 <__func__.8>
    80020f90:	0000f517          	auipc	a0,0xf
    80020f94:	04850513          	addi	a0,a0,72 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_13() {
    80020f98:	ec06                	sd	ra,24(sp)
    80020f9a:	e822                	sd	s0,16(sp)
    80020f9c:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020f9e:	0ee0c0ef          	jal	8002d08c <printf>
    80020fa2:	4529                	li	a0,10
    80020fa4:	5d70a0ef          	jal	8002bd7a <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020fa8:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020fac:	57fd                	li	a5,-1
    80020fae:	17fe                	slli	a5,a5,0x3f
    80020fb0:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020fb4:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80020fb8:	30a025f3          	csrr	a1,0x30a
    80020fbc:	00015517          	auipc	a0,0x15
    80020fc0:	63450513          	addi	a0,a0,1588 # 800365f0 <__func__.0+0x6900>
    80020fc4:	0c80c0ef          	jal	8002d08c <printf>
    80020fc8:	60a025f3          	csrr	a1,henvcfg
    80020fcc:	00015517          	auipc	a0,0x15
    80020fd0:	62450513          	addi	a0,a0,1572 # 800365f0 <__func__.0+0x6900>
    80020fd4:	0b80c0ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VU);
    80020fd8:	4501                	li	a0,0
    80020fda:	f2fdf0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020fde:	e2fdf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020fe2:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80020fe6:	00037597          	auipc	a1,0x37
    80020fea:	02b5c583          	lbu	a1,43(a1) # 80058011 <excpt+0x1>
    80020fee:	00017517          	auipc	a0,0x17
    80020ff2:	31a50513          	addi	a0,a0,794 # 80038308 <__func__.0+0x8618>
    80020ff6:	00037417          	auipc	s0,0x37
    80020ffa:	01a40413          	addi	s0,s0,26 # 80058010 <excpt>
    80020ffe:	08e0c0ef          	jal	8002d08c <printf>
    printf("cause=%d\n",excpt.cause);
    80021002:	640c                	ld	a1,8(s0)
    80021004:	00017517          	auipc	a0,0x17
    80021008:	31450513          	addi	a0,a0,788 # 80038318 <__func__.0+0x8628>
    8002100c:	0800c0ef          	jal	8002d08c <printf>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021010:	08200593          	li	a1,130
    80021014:	00017617          	auipc	a2,0x17
    80021018:	31460613          	addi	a2,a2,788 # 80038328 <__func__.0+0x8638>
    8002101c:	0000f517          	auipc	a0,0xf
    80021020:	fd450513          	addi	a0,a0,-44 # 8002fff0 <__func__.0+0x300>
    80021024:	0680c0ef          	jal	8002d08c <printf>
    80021028:	00037797          	auipc	a5,0x37
    8002102c:	fe97c783          	lbu	a5,-23(a5) # 80058011 <excpt+0x1>
    80021030:	0000f597          	auipc	a1,0xf
    80021034:	f9858593          	addi	a1,a1,-104 # 8002ffc8 <__func__.0+0x2d8>
    80021038:	cf89                	beqz	a5,80021052 <timecmp_test_13+0xcc>
    8002103a:	6418                	ld	a4,8(s0)
    8002103c:	47d9                	li	a5,22
    8002103e:	0000f597          	auipc	a1,0xf
    80021042:	f7a58593          	addi	a1,a1,-134 # 8002ffb8 <__func__.0+0x2c8>
    80021046:	00f70663          	beq	a4,a5,80021052 <timecmp_test_13+0xcc>
    8002104a:	0000f597          	auipc	a1,0xf
    8002104e:	f7e58593          	addi	a1,a1,-130 # 8002ffc8 <__func__.0+0x2d8>
    80021052:	0000f517          	auipc	a0,0xf
    80021056:	fb650513          	addi	a0,a0,-74 # 80030008 <__func__.0+0x318>
    8002105a:	0320c0ef          	jal	8002d08c <printf>
    8002105e:	00037797          	auipc	a5,0x37
    80021062:	fb37c783          	lbu	a5,-77(a5) # 80058011 <excpt+0x1>
    80021066:	c789                	beqz	a5,80021070 <timecmp_test_13+0xea>
    80021068:	6418                	ld	a4,8(s0)
    8002106a:	47d9                	li	a5,22
    8002106c:	00f70c63          	beq	a4,a5,80021084 <timecmp_test_13+0xfe>
    80021070:	0000f517          	auipc	a0,0xf
    80021074:	fa050513          	addi	a0,a0,-96 # 80030010 <__func__.0+0x320>
    80021078:	0140c0ef          	jal	8002d08c <printf>
    8002107c:	02900513          	li	a0,41
    80021080:	4fb0a0ef          	jal	8002bd7a <putchar>
    80021084:	4529                	li	a0,10
    80021086:	4f50a0ef          	jal	8002bd7a <putchar>
    8002108a:	00037497          	auipc	s1,0x37
    8002108e:	f874c483          	lbu	s1,-121(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80021092:	0000f597          	auipc	a1,0xf
    80021096:	f3658593          	addi	a1,a1,-202 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002109a:	cc91                	beqz	s1,800210b6 <timecmp_test_13+0x130>
    8002109c:	6418                	ld	a4,8(s0)
    8002109e:	47d9                	li	a5,22
    TEST_END(); 
    800210a0:	0000f597          	auipc	a1,0xf
    800210a4:	f1858593          	addi	a1,a1,-232 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800210a8:	00f70763          	beq	a4,a5,800210b6 <timecmp_test_13+0x130>
    800210ac:	4481                	li	s1,0
    TEST_END(); 
    800210ae:	0000f597          	auipc	a1,0xf
    800210b2:	f1a58593          	addi	a1,a1,-230 # 8002ffc8 <__func__.0+0x2d8>
    800210b6:	0000f517          	auipc	a0,0xf
    800210ba:	fba50513          	addi	a0,a0,-70 # 80030070 <__func__.0+0x380>
    800210be:	7cf0b0ef          	jal	8002d08c <printf>
    800210c2:	4511                	li	a0,4
    800210c4:	e45df0ef          	jal	80000f08 <goto_priv>
    800210c8:	80be00ef          	jal	800018d2 <reset_state>
}
    800210cc:	60e2                	ld	ra,24(sp)
    800210ce:	6442                	ld	s0,16(sp)
    800210d0:	8526                	mv	a0,s1
    800210d2:	64a2                	ld	s1,8(sp)
    800210d4:	6105                	addi	sp,sp,32
    800210d6:	8082                	ret

00000000800210d8 <timecmp_test_14>:

bool timecmp_test_14() {
    800210d8:	1101                	addi	sp,sp,-32

    TEST_START();    
    800210da:	0000e597          	auipc	a1,0xe
    800210de:	4be58593          	addi	a1,a1,1214 # 8002f598 <__func__.7>
    800210e2:	0000f517          	auipc	a0,0xf
    800210e6:	ef650513          	addi	a0,a0,-266 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_14() {
    800210ea:	ec06                	sd	ra,24(sp)
    800210ec:	e822                	sd	s0,16(sp)
    800210ee:	e426                	sd	s1,8(sp)
    TEST_START();    
    800210f0:	79d0b0ef          	jal	8002d08c <printf>
    800210f4:	4529                	li	a0,10
    800210f6:	4850a0ef          	jal	8002bd7a <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800210fa:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800210fe:	57fd                	li	a5,-1
    80021100:	17fe                	slli	a5,a5,0x3f
    80021102:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021106:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    8002110a:	30a025f3          	csrr	a1,0x30a
    8002110e:	00015517          	auipc	a0,0x15
    80021112:	4e250513          	addi	a0,a0,1250 # 800365f0 <__func__.0+0x6900>
    80021116:	7770b0ef          	jal	8002d08c <printf>
    8002111a:	60a025f3          	csrr	a1,henvcfg
    8002111e:	00015517          	auipc	a0,0x15
    80021122:	4d250513          	addi	a0,a0,1234 # 800365f0 <__func__.0+0x6900>
    80021126:	7670b0ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VS);
    8002112a:	4509                	li	a0,2
    8002112c:	ddddf0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021130:	cdddf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021134:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80021138:	00037597          	auipc	a1,0x37
    8002113c:	ed95c583          	lbu	a1,-295(a1) # 80058011 <excpt+0x1>
    80021140:	00017517          	auipc	a0,0x17
    80021144:	1c850513          	addi	a0,a0,456 # 80038308 <__func__.0+0x8618>
    80021148:	00037417          	auipc	s0,0x37
    8002114c:	ec840413          	addi	s0,s0,-312 # 80058010 <excpt>
    80021150:	73d0b0ef          	jal	8002d08c <printf>
    printf("cause=%d\n",excpt.cause);
    80021154:	640c                	ld	a1,8(s0)
    80021156:	00017517          	auipc	a0,0x17
    8002115a:	1c250513          	addi	a0,a0,450 # 80038318 <__func__.0+0x8628>
    8002115e:	72f0b0ef          	jal	8002d08c <printf>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021162:	08200593          	li	a1,130
    80021166:	00017617          	auipc	a2,0x17
    8002116a:	23260613          	addi	a2,a2,562 # 80038398 <__func__.0+0x86a8>
    8002116e:	0000f517          	auipc	a0,0xf
    80021172:	e8250513          	addi	a0,a0,-382 # 8002fff0 <__func__.0+0x300>
    80021176:	7170b0ef          	jal	8002d08c <printf>
    8002117a:	00037797          	auipc	a5,0x37
    8002117e:	e977c783          	lbu	a5,-361(a5) # 80058011 <excpt+0x1>
    80021182:	0000f597          	auipc	a1,0xf
    80021186:	e4658593          	addi	a1,a1,-442 # 8002ffc8 <__func__.0+0x2d8>
    8002118a:	cf89                	beqz	a5,800211a4 <timecmp_test_14+0xcc>
    8002118c:	6418                	ld	a4,8(s0)
    8002118e:	47d9                	li	a5,22
    80021190:	0000f597          	auipc	a1,0xf
    80021194:	e2858593          	addi	a1,a1,-472 # 8002ffb8 <__func__.0+0x2c8>
    80021198:	00f70663          	beq	a4,a5,800211a4 <timecmp_test_14+0xcc>
    8002119c:	0000f597          	auipc	a1,0xf
    800211a0:	e2c58593          	addi	a1,a1,-468 # 8002ffc8 <__func__.0+0x2d8>
    800211a4:	0000f517          	auipc	a0,0xf
    800211a8:	e6450513          	addi	a0,a0,-412 # 80030008 <__func__.0+0x318>
    800211ac:	6e10b0ef          	jal	8002d08c <printf>
    800211b0:	00037797          	auipc	a5,0x37
    800211b4:	e617c783          	lbu	a5,-415(a5) # 80058011 <excpt+0x1>
    800211b8:	c789                	beqz	a5,800211c2 <timecmp_test_14+0xea>
    800211ba:	6418                	ld	a4,8(s0)
    800211bc:	47d9                	li	a5,22
    800211be:	00f70c63          	beq	a4,a5,800211d6 <timecmp_test_14+0xfe>
    800211c2:	0000f517          	auipc	a0,0xf
    800211c6:	e4e50513          	addi	a0,a0,-434 # 80030010 <__func__.0+0x320>
    800211ca:	6c30b0ef          	jal	8002d08c <printf>
    800211ce:	02900513          	li	a0,41
    800211d2:	3a90a0ef          	jal	8002bd7a <putchar>
    800211d6:	4529                	li	a0,10
    800211d8:	3a30a0ef          	jal	8002bd7a <putchar>
    800211dc:	00037497          	auipc	s1,0x37
    800211e0:	e354c483          	lbu	s1,-459(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800211e4:	0000f597          	auipc	a1,0xf
    800211e8:	de458593          	addi	a1,a1,-540 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800211ec:	cc91                	beqz	s1,80021208 <timecmp_test_14+0x130>
    800211ee:	6418                	ld	a4,8(s0)
    800211f0:	47d9                	li	a5,22
    TEST_END(); 
    800211f2:	0000f597          	auipc	a1,0xf
    800211f6:	dc658593          	addi	a1,a1,-570 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800211fa:	00f70763          	beq	a4,a5,80021208 <timecmp_test_14+0x130>
    800211fe:	4481                	li	s1,0
    TEST_END(); 
    80021200:	0000f597          	auipc	a1,0xf
    80021204:	dc858593          	addi	a1,a1,-568 # 8002ffc8 <__func__.0+0x2d8>
    80021208:	0000f517          	auipc	a0,0xf
    8002120c:	e6850513          	addi	a0,a0,-408 # 80030070 <__func__.0+0x380>
    80021210:	67d0b0ef          	jal	8002d08c <printf>
    80021214:	4511                	li	a0,4
    80021216:	cf3df0ef          	jal	80000f08 <goto_priv>
    8002121a:	eb8e00ef          	jal	800018d2 <reset_state>
}
    8002121e:	60e2                	ld	ra,24(sp)
    80021220:	6442                	ld	s0,16(sp)
    80021222:	8526                	mv	a0,s1
    80021224:	64a2                	ld	s1,8(sp)
    80021226:	6105                	addi	sp,sp,32
    80021228:	8082                	ret

000000008002122a <timecmp_test_15>:


bool timecmp_test_15() {
    8002122a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002122c:	0000e597          	auipc	a1,0xe
    80021230:	37c58593          	addi	a1,a1,892 # 8002f5a8 <__func__.6>
    80021234:	0000f517          	auipc	a0,0xf
    80021238:	da450513          	addi	a0,a0,-604 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_15() {
    8002123c:	ec06                	sd	ra,24(sp)
    8002123e:	e822                	sd	s0,16(sp)
    80021240:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021242:	64b0b0ef          	jal	8002d08c <printf>
    80021246:	4529                	li	a0,10
    80021248:	3330a0ef          	jal	8002bd7a <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002124c:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021250:	57fd                	li	a5,-1
    80021252:	17fe                	slli	a5,a5,0x3f
    80021254:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021258:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    8002125c:	30a025f3          	csrr	a1,0x30a
    80021260:	00015517          	auipc	a0,0x15
    80021264:	39050513          	addi	a0,a0,912 # 800365f0 <__func__.0+0x6900>
    80021268:	6250b0ef          	jal	8002d08c <printf>
    8002126c:	60a025f3          	csrr	a1,henvcfg
    80021270:	00015517          	auipc	a0,0x15
    80021274:	38050513          	addi	a0,a0,896 # 800365f0 <__func__.0+0x6900>
    80021278:	6150b0ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VU);
    8002127c:	4501                	li	a0,0
    8002127e:	c8bdf0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021282:	b8bdf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021286:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    8002128a:	00037597          	auipc	a1,0x37
    8002128e:	d875c583          	lbu	a1,-633(a1) # 80058011 <excpt+0x1>
    80021292:	00017517          	auipc	a0,0x17
    80021296:	07650513          	addi	a0,a0,118 # 80038308 <__func__.0+0x8618>
    8002129a:	00037417          	auipc	s0,0x37
    8002129e:	d7640413          	addi	s0,s0,-650 # 80058010 <excpt>
    800212a2:	5eb0b0ef          	jal	8002d08c <printf>
    printf("cause=%d\n",excpt.cause);
    800212a6:	640c                	ld	a1,8(s0)
    800212a8:	00017517          	auipc	a0,0x17
    800212ac:	07050513          	addi	a0,a0,112 # 80038318 <__func__.0+0x8628>
    800212b0:	5dd0b0ef          	jal	8002d08c <printf>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800212b4:	08200593          	li	a1,130
    800212b8:	00017617          	auipc	a2,0x17
    800212bc:	15060613          	addi	a2,a2,336 # 80038408 <__func__.0+0x8718>
    800212c0:	0000f517          	auipc	a0,0xf
    800212c4:	d3050513          	addi	a0,a0,-720 # 8002fff0 <__func__.0+0x300>
    800212c8:	5c50b0ef          	jal	8002d08c <printf>
    800212cc:	00037797          	auipc	a5,0x37
    800212d0:	d457c783          	lbu	a5,-699(a5) # 80058011 <excpt+0x1>
    800212d4:	0000f597          	auipc	a1,0xf
    800212d8:	cf458593          	addi	a1,a1,-780 # 8002ffc8 <__func__.0+0x2d8>
    800212dc:	cf89                	beqz	a5,800212f6 <timecmp_test_15+0xcc>
    800212de:	6418                	ld	a4,8(s0)
    800212e0:	4789                	li	a5,2
    800212e2:	0000f597          	auipc	a1,0xf
    800212e6:	cd658593          	addi	a1,a1,-810 # 8002ffb8 <__func__.0+0x2c8>
    800212ea:	00f70663          	beq	a4,a5,800212f6 <timecmp_test_15+0xcc>
    800212ee:	0000f597          	auipc	a1,0xf
    800212f2:	cda58593          	addi	a1,a1,-806 # 8002ffc8 <__func__.0+0x2d8>
    800212f6:	0000f517          	auipc	a0,0xf
    800212fa:	d1250513          	addi	a0,a0,-750 # 80030008 <__func__.0+0x318>
    800212fe:	58f0b0ef          	jal	8002d08c <printf>
    80021302:	00037797          	auipc	a5,0x37
    80021306:	d0f7c783          	lbu	a5,-753(a5) # 80058011 <excpt+0x1>
    8002130a:	c789                	beqz	a5,80021314 <timecmp_test_15+0xea>
    8002130c:	6418                	ld	a4,8(s0)
    8002130e:	4789                	li	a5,2
    80021310:	00f70c63          	beq	a4,a5,80021328 <timecmp_test_15+0xfe>
    80021314:	0000f517          	auipc	a0,0xf
    80021318:	cfc50513          	addi	a0,a0,-772 # 80030010 <__func__.0+0x320>
    8002131c:	5710b0ef          	jal	8002d08c <printf>
    80021320:	02900513          	li	a0,41
    80021324:	2570a0ef          	jal	8002bd7a <putchar>
    80021328:	4529                	li	a0,10
    8002132a:	2510a0ef          	jal	8002bd7a <putchar>
    8002132e:	00037497          	auipc	s1,0x37
    80021332:	ce34c483          	lbu	s1,-797(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021336:	0000f597          	auipc	a1,0xf
    8002133a:	c9258593          	addi	a1,a1,-878 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002133e:	cc91                	beqz	s1,8002135a <timecmp_test_15+0x130>
    80021340:	6418                	ld	a4,8(s0)
    80021342:	4789                	li	a5,2
    TEST_END(); 
    80021344:	0000f597          	auipc	a1,0xf
    80021348:	c7458593          	addi	a1,a1,-908 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002134c:	00f70763          	beq	a4,a5,8002135a <timecmp_test_15+0x130>
    80021350:	4481                	li	s1,0
    TEST_END(); 
    80021352:	0000f597          	auipc	a1,0xf
    80021356:	c7658593          	addi	a1,a1,-906 # 8002ffc8 <__func__.0+0x2d8>
    8002135a:	0000f517          	auipc	a0,0xf
    8002135e:	d1650513          	addi	a0,a0,-746 # 80030070 <__func__.0+0x380>
    80021362:	52b0b0ef          	jal	8002d08c <printf>
    80021366:	4511                	li	a0,4
    80021368:	ba1df0ef          	jal	80000f08 <goto_priv>
    8002136c:	d66e00ef          	jal	800018d2 <reset_state>
}
    80021370:	60e2                	ld	ra,24(sp)
    80021372:	6442                	ld	s0,16(sp)
    80021374:	8526                	mv	a0,s1
    80021376:	64a2                	ld	s1,8(sp)
    80021378:	6105                	addi	sp,sp,32
    8002137a:	8082                	ret

000000008002137c <timecmp_test_16>:

bool timecmp_test_16() {
    8002137c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002137e:	0000e597          	auipc	a1,0xe
    80021382:	23a58593          	addi	a1,a1,570 # 8002f5b8 <__func__.5>
    80021386:	0000f517          	auipc	a0,0xf
    8002138a:	c5250513          	addi	a0,a0,-942 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_16() {
    8002138e:	ec06                	sd	ra,24(sp)
    80021390:	e822                	sd	s0,16(sp)
    80021392:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021394:	4f90b0ef          	jal	8002d08c <printf>
    80021398:	4529                	li	a0,10
    8002139a:	1e10a0ef          	jal	8002bd7a <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002139e:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800213a2:	57fd                	li	a5,-1
    800213a4:	17fe                	slli	a5,a5,0x3f
    800213a6:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800213aa:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800213ae:	30a025f3          	csrr	a1,0x30a
    800213b2:	00015517          	auipc	a0,0x15
    800213b6:	23e50513          	addi	a0,a0,574 # 800365f0 <__func__.0+0x6900>
    800213ba:	4d30b0ef          	jal	8002d08c <printf>
    800213be:	60a025f3          	csrr	a1,henvcfg
    800213c2:	00015517          	auipc	a0,0x15
    800213c6:	22e50513          	addi	a0,a0,558 # 800365f0 <__func__.0+0x6900>
    800213ca:	4c30b0ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VS);
    800213ce:	4509                	li	a0,2
    800213d0:	b39df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800213d4:	a39df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800213d8:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800213dc:	00037597          	auipc	a1,0x37
    800213e0:	c355c583          	lbu	a1,-971(a1) # 80058011 <excpt+0x1>
    800213e4:	00017517          	auipc	a0,0x17
    800213e8:	f2450513          	addi	a0,a0,-220 # 80038308 <__func__.0+0x8618>
    800213ec:	00037417          	auipc	s0,0x37
    800213f0:	c2440413          	addi	s0,s0,-988 # 80058010 <excpt>
    800213f4:	4990b0ef          	jal	8002d08c <printf>
    printf("cause=%d\n",excpt.cause);
    800213f8:	640c                	ld	a1,8(s0)
    800213fa:	00017517          	auipc	a0,0x17
    800213fe:	f1e50513          	addi	a0,a0,-226 # 80038318 <__func__.0+0x8628>
    80021402:	48b0b0ef          	jal	8002d08c <printf>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021406:	08200593          	li	a1,130
    8002140a:	00017617          	auipc	a2,0x17
    8002140e:	06e60613          	addi	a2,a2,110 # 80038478 <__func__.0+0x8788>
    80021412:	0000f517          	auipc	a0,0xf
    80021416:	bde50513          	addi	a0,a0,-1058 # 8002fff0 <__func__.0+0x300>
    8002141a:	4730b0ef          	jal	8002d08c <printf>
    8002141e:	00037797          	auipc	a5,0x37
    80021422:	bf37c783          	lbu	a5,-1037(a5) # 80058011 <excpt+0x1>
    80021426:	0000f597          	auipc	a1,0xf
    8002142a:	ba258593          	addi	a1,a1,-1118 # 8002ffc8 <__func__.0+0x2d8>
    8002142e:	cf89                	beqz	a5,80021448 <timecmp_test_16+0xcc>
    80021430:	6418                	ld	a4,8(s0)
    80021432:	4789                	li	a5,2
    80021434:	0000f597          	auipc	a1,0xf
    80021438:	b8458593          	addi	a1,a1,-1148 # 8002ffb8 <__func__.0+0x2c8>
    8002143c:	00f70663          	beq	a4,a5,80021448 <timecmp_test_16+0xcc>
    80021440:	0000f597          	auipc	a1,0xf
    80021444:	b8858593          	addi	a1,a1,-1144 # 8002ffc8 <__func__.0+0x2d8>
    80021448:	0000f517          	auipc	a0,0xf
    8002144c:	bc050513          	addi	a0,a0,-1088 # 80030008 <__func__.0+0x318>
    80021450:	43d0b0ef          	jal	8002d08c <printf>
    80021454:	00037797          	auipc	a5,0x37
    80021458:	bbd7c783          	lbu	a5,-1091(a5) # 80058011 <excpt+0x1>
    8002145c:	c789                	beqz	a5,80021466 <timecmp_test_16+0xea>
    8002145e:	6418                	ld	a4,8(s0)
    80021460:	4789                	li	a5,2
    80021462:	00f70c63          	beq	a4,a5,8002147a <timecmp_test_16+0xfe>
    80021466:	0000f517          	auipc	a0,0xf
    8002146a:	baa50513          	addi	a0,a0,-1110 # 80030010 <__func__.0+0x320>
    8002146e:	41f0b0ef          	jal	8002d08c <printf>
    80021472:	02900513          	li	a0,41
    80021476:	1050a0ef          	jal	8002bd7a <putchar>
    8002147a:	4529                	li	a0,10
    8002147c:	0ff0a0ef          	jal	8002bd7a <putchar>
    80021480:	00037497          	auipc	s1,0x37
    80021484:	b914c483          	lbu	s1,-1135(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021488:	0000f597          	auipc	a1,0xf
    8002148c:	b4058593          	addi	a1,a1,-1216 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021490:	cc91                	beqz	s1,800214ac <timecmp_test_16+0x130>
    80021492:	6418                	ld	a4,8(s0)
    80021494:	4789                	li	a5,2
    TEST_END(); 
    80021496:	0000f597          	auipc	a1,0xf
    8002149a:	b2258593          	addi	a1,a1,-1246 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002149e:	00f70763          	beq	a4,a5,800214ac <timecmp_test_16+0x130>
    800214a2:	4481                	li	s1,0
    TEST_END(); 
    800214a4:	0000f597          	auipc	a1,0xf
    800214a8:	b2458593          	addi	a1,a1,-1244 # 8002ffc8 <__func__.0+0x2d8>
    800214ac:	0000f517          	auipc	a0,0xf
    800214b0:	bc450513          	addi	a0,a0,-1084 # 80030070 <__func__.0+0x380>
    800214b4:	3d90b0ef          	jal	8002d08c <printf>
    800214b8:	4511                	li	a0,4
    800214ba:	a4fdf0ef          	jal	80000f08 <goto_priv>
    800214be:	c14e00ef          	jal	800018d2 <reset_state>
}
    800214c2:	60e2                	ld	ra,24(sp)
    800214c4:	6442                	ld	s0,16(sp)
    800214c6:	8526                	mv	a0,s1
    800214c8:	64a2                	ld	s1,8(sp)
    800214ca:	6105                	addi	sp,sp,32
    800214cc:	8082                	ret

00000000800214ce <timecmp_test_17>:

bool timecmp_test_17() {
    800214ce:	1101                	addi	sp,sp,-32

    TEST_START();    
    800214d0:	0000e597          	auipc	a1,0xe
    800214d4:	0f858593          	addi	a1,a1,248 # 8002f5c8 <__func__.4>
    800214d8:	0000f517          	auipc	a0,0xf
    800214dc:	b0050513          	addi	a0,a0,-1280 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_17() {
    800214e0:	ec06                	sd	ra,24(sp)
    800214e2:	e822                	sd	s0,16(sp)
    800214e4:	e426                	sd	s1,8(sp)
    TEST_START();    
    800214e6:	3a70b0ef          	jal	8002d08c <printf>
    800214ea:	4529                	li	a0,10
    800214ec:	08f0a0ef          	jal	8002bd7a <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800214f0:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800214f4:	57fd                	li	a5,-1
    800214f6:	17fe                	slli	a5,a5,0x3f
    800214f8:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800214fc:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80021500:	30a025f3          	csrr	a1,0x30a
    80021504:	00015517          	auipc	a0,0x15
    80021508:	0ec50513          	addi	a0,a0,236 # 800365f0 <__func__.0+0x6900>
    8002150c:	3810b0ef          	jal	8002d08c <printf>
    80021510:	60a025f3          	csrr	a1,henvcfg
    80021514:	00015517          	auipc	a0,0x15
    80021518:	0dc50513          	addi	a0,a0,220 # 800365f0 <__func__.0+0x6900>
    8002151c:	3710b0ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VU);
    80021520:	4501                	li	a0,0
    80021522:	9e7df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021526:	8e7df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002152a:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    8002152e:	00037597          	auipc	a1,0x37
    80021532:	ae35c583          	lbu	a1,-1309(a1) # 80058011 <excpt+0x1>
    80021536:	00017517          	auipc	a0,0x17
    8002153a:	dd250513          	addi	a0,a0,-558 # 80038308 <__func__.0+0x8618>
    8002153e:	00037417          	auipc	s0,0x37
    80021542:	ad240413          	addi	s0,s0,-1326 # 80058010 <excpt>
    80021546:	3470b0ef          	jal	8002d08c <printf>
    printf("cause=%d\n",excpt.cause);
    8002154a:	640c                	ld	a1,8(s0)
    8002154c:	00017517          	auipc	a0,0x17
    80021550:	dcc50513          	addi	a0,a0,-564 # 80038318 <__func__.0+0x8628>
    80021554:	3390b0ef          	jal	8002d08c <printf>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021558:	08200593          	li	a1,130
    8002155c:	00017617          	auipc	a2,0x17
    80021560:	dcc60613          	addi	a2,a2,-564 # 80038328 <__func__.0+0x8638>
    80021564:	0000f517          	auipc	a0,0xf
    80021568:	a8c50513          	addi	a0,a0,-1396 # 8002fff0 <__func__.0+0x300>
    8002156c:	3210b0ef          	jal	8002d08c <printf>
    80021570:	00037797          	auipc	a5,0x37
    80021574:	aa17c783          	lbu	a5,-1375(a5) # 80058011 <excpt+0x1>
    80021578:	0000f597          	auipc	a1,0xf
    8002157c:	a5058593          	addi	a1,a1,-1456 # 8002ffc8 <__func__.0+0x2d8>
    80021580:	cf89                	beqz	a5,8002159a <timecmp_test_17+0xcc>
    80021582:	6418                	ld	a4,8(s0)
    80021584:	47d9                	li	a5,22
    80021586:	0000f597          	auipc	a1,0xf
    8002158a:	a3258593          	addi	a1,a1,-1486 # 8002ffb8 <__func__.0+0x2c8>
    8002158e:	00f70663          	beq	a4,a5,8002159a <timecmp_test_17+0xcc>
    80021592:	0000f597          	auipc	a1,0xf
    80021596:	a3658593          	addi	a1,a1,-1482 # 8002ffc8 <__func__.0+0x2d8>
    8002159a:	0000f517          	auipc	a0,0xf
    8002159e:	a6e50513          	addi	a0,a0,-1426 # 80030008 <__func__.0+0x318>
    800215a2:	2eb0b0ef          	jal	8002d08c <printf>
    800215a6:	00037797          	auipc	a5,0x37
    800215aa:	a6b7c783          	lbu	a5,-1429(a5) # 80058011 <excpt+0x1>
    800215ae:	c789                	beqz	a5,800215b8 <timecmp_test_17+0xea>
    800215b0:	6418                	ld	a4,8(s0)
    800215b2:	47d9                	li	a5,22
    800215b4:	00f70c63          	beq	a4,a5,800215cc <timecmp_test_17+0xfe>
    800215b8:	0000f517          	auipc	a0,0xf
    800215bc:	a5850513          	addi	a0,a0,-1448 # 80030010 <__func__.0+0x320>
    800215c0:	2cd0b0ef          	jal	8002d08c <printf>
    800215c4:	02900513          	li	a0,41
    800215c8:	7b20a0ef          	jal	8002bd7a <putchar>
    800215cc:	4529                	li	a0,10
    800215ce:	7ac0a0ef          	jal	8002bd7a <putchar>
    800215d2:	00037497          	auipc	s1,0x37
    800215d6:	a3f4c483          	lbu	s1,-1473(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800215da:	0000f597          	auipc	a1,0xf
    800215de:	9ee58593          	addi	a1,a1,-1554 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800215e2:	cc91                	beqz	s1,800215fe <timecmp_test_17+0x130>
    800215e4:	6418                	ld	a4,8(s0)
    800215e6:	47d9                	li	a5,22
    TEST_END(); 
    800215e8:	0000f597          	auipc	a1,0xf
    800215ec:	9d058593          	addi	a1,a1,-1584 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800215f0:	00f70763          	beq	a4,a5,800215fe <timecmp_test_17+0x130>
    800215f4:	4481                	li	s1,0
    TEST_END(); 
    800215f6:	0000f597          	auipc	a1,0xf
    800215fa:	9d258593          	addi	a1,a1,-1582 # 8002ffc8 <__func__.0+0x2d8>
    800215fe:	0000f517          	auipc	a0,0xf
    80021602:	a7250513          	addi	a0,a0,-1422 # 80030070 <__func__.0+0x380>
    80021606:	2870b0ef          	jal	8002d08c <printf>
    8002160a:	4511                	li	a0,4
    8002160c:	8fddf0ef          	jal	80000f08 <goto_priv>
    80021610:	ac2e00ef          	jal	800018d2 <reset_state>
}
    80021614:	60e2                	ld	ra,24(sp)
    80021616:	6442                	ld	s0,16(sp)
    80021618:	8526                	mv	a0,s1
    8002161a:	64a2                	ld	s1,8(sp)
    8002161c:	6105                	addi	sp,sp,32
    8002161e:	8082                	ret

0000000080021620 <timecmp_test_18>:

bool timecmp_test_18() {
    80021620:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021622:	0000e597          	auipc	a1,0xe
    80021626:	fb658593          	addi	a1,a1,-74 # 8002f5d8 <__func__.3>
    8002162a:	0000f517          	auipc	a0,0xf
    8002162e:	9ae50513          	addi	a0,a0,-1618 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_18() {
    80021632:	ec06                	sd	ra,24(sp)
    80021634:	e822                	sd	s0,16(sp)
    80021636:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021638:	2550b0ef          	jal	8002d08c <printf>
    8002163c:	4529                	li	a0,10
    8002163e:	73c0a0ef          	jal	8002bd7a <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021642:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021646:	57fd                	li	a5,-1
    80021648:	17fe                	slli	a5,a5,0x3f
    8002164a:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8002164e:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80021652:	30a025f3          	csrr	a1,0x30a
    80021656:	00015517          	auipc	a0,0x15
    8002165a:	f9a50513          	addi	a0,a0,-102 # 800365f0 <__func__.0+0x6900>
    8002165e:	22f0b0ef          	jal	8002d08c <printf>
    80021662:	60a025f3          	csrr	a1,henvcfg
    80021666:	00015517          	auipc	a0,0x15
    8002166a:	f8a50513          	addi	a0,a0,-118 # 800365f0 <__func__.0+0x6900>
    8002166e:	21f0b0ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VS);
    80021672:	4509                	li	a0,2
    80021674:	895df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021678:	f94df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002167c:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80021680:	00037597          	auipc	a1,0x37
    80021684:	9915c583          	lbu	a1,-1647(a1) # 80058011 <excpt+0x1>
    80021688:	00017517          	auipc	a0,0x17
    8002168c:	c8050513          	addi	a0,a0,-896 # 80038308 <__func__.0+0x8618>
    80021690:	00037417          	auipc	s0,0x37
    80021694:	98040413          	addi	s0,s0,-1664 # 80058010 <excpt>
    80021698:	1f50b0ef          	jal	8002d08c <printf>
    printf("cause=%d\n",excpt.cause);
    8002169c:	640c                	ld	a1,8(s0)
    8002169e:	00017517          	auipc	a0,0x17
    800216a2:	c7a50513          	addi	a0,a0,-902 # 80038318 <__func__.0+0x8628>
    800216a6:	1e70b0ef          	jal	8002d08c <printf>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800216aa:	08200593          	li	a1,130
    800216ae:	00017617          	auipc	a2,0x17
    800216b2:	cea60613          	addi	a2,a2,-790 # 80038398 <__func__.0+0x86a8>
    800216b6:	0000f517          	auipc	a0,0xf
    800216ba:	93a50513          	addi	a0,a0,-1734 # 8002fff0 <__func__.0+0x300>
    800216be:	1cf0b0ef          	jal	8002d08c <printf>
    800216c2:	00037797          	auipc	a5,0x37
    800216c6:	94f7c783          	lbu	a5,-1713(a5) # 80058011 <excpt+0x1>
    800216ca:	0000f597          	auipc	a1,0xf
    800216ce:	8fe58593          	addi	a1,a1,-1794 # 8002ffc8 <__func__.0+0x2d8>
    800216d2:	cf89                	beqz	a5,800216ec <timecmp_test_18+0xcc>
    800216d4:	6418                	ld	a4,8(s0)
    800216d6:	47d9                	li	a5,22
    800216d8:	0000f597          	auipc	a1,0xf
    800216dc:	8e058593          	addi	a1,a1,-1824 # 8002ffb8 <__func__.0+0x2c8>
    800216e0:	00f70663          	beq	a4,a5,800216ec <timecmp_test_18+0xcc>
    800216e4:	0000f597          	auipc	a1,0xf
    800216e8:	8e458593          	addi	a1,a1,-1820 # 8002ffc8 <__func__.0+0x2d8>
    800216ec:	0000f517          	auipc	a0,0xf
    800216f0:	91c50513          	addi	a0,a0,-1764 # 80030008 <__func__.0+0x318>
    800216f4:	1990b0ef          	jal	8002d08c <printf>
    800216f8:	00037797          	auipc	a5,0x37
    800216fc:	9197c783          	lbu	a5,-1767(a5) # 80058011 <excpt+0x1>
    80021700:	c789                	beqz	a5,8002170a <timecmp_test_18+0xea>
    80021702:	6418                	ld	a4,8(s0)
    80021704:	47d9                	li	a5,22
    80021706:	00f70c63          	beq	a4,a5,8002171e <timecmp_test_18+0xfe>
    8002170a:	0000f517          	auipc	a0,0xf
    8002170e:	90650513          	addi	a0,a0,-1786 # 80030010 <__func__.0+0x320>
    80021712:	17b0b0ef          	jal	8002d08c <printf>
    80021716:	02900513          	li	a0,41
    8002171a:	6600a0ef          	jal	8002bd7a <putchar>
    8002171e:	4529                	li	a0,10
    80021720:	65a0a0ef          	jal	8002bd7a <putchar>
    80021724:	00037497          	auipc	s1,0x37
    80021728:	8ed4c483          	lbu	s1,-1811(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8002172c:	0000f597          	auipc	a1,0xf
    80021730:	89c58593          	addi	a1,a1,-1892 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021734:	cc91                	beqz	s1,80021750 <timecmp_test_18+0x130>
    80021736:	6418                	ld	a4,8(s0)
    80021738:	47d9                	li	a5,22
    TEST_END(); 
    8002173a:	0000f597          	auipc	a1,0xf
    8002173e:	87e58593          	addi	a1,a1,-1922 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021742:	00f70763          	beq	a4,a5,80021750 <timecmp_test_18+0x130>
    80021746:	4481                	li	s1,0
    TEST_END(); 
    80021748:	0000f597          	auipc	a1,0xf
    8002174c:	88058593          	addi	a1,a1,-1920 # 8002ffc8 <__func__.0+0x2d8>
    80021750:	0000f517          	auipc	a0,0xf
    80021754:	92050513          	addi	a0,a0,-1760 # 80030070 <__func__.0+0x380>
    80021758:	1350b0ef          	jal	8002d08c <printf>
    8002175c:	4511                	li	a0,4
    8002175e:	faadf0ef          	jal	80000f08 <goto_priv>
    80021762:	970e00ef          	jal	800018d2 <reset_state>
}
    80021766:	60e2                	ld	ra,24(sp)
    80021768:	6442                	ld	s0,16(sp)
    8002176a:	8526                	mv	a0,s1
    8002176c:	64a2                	ld	s1,8(sp)
    8002176e:	6105                	addi	sp,sp,32
    80021770:	8082                	ret

0000000080021772 <timecmp_test_19>:


bool timecmp_test_19() {
    80021772:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021774:	0000e597          	auipc	a1,0xe
    80021778:	e7458593          	addi	a1,a1,-396 # 8002f5e8 <__func__.2>
    8002177c:	0000f517          	auipc	a0,0xf
    80021780:	85c50513          	addi	a0,a0,-1956 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_19() {
    80021784:	ec06                	sd	ra,24(sp)
    80021786:	e822                	sd	s0,16(sp)
    80021788:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002178a:	1030b0ef          	jal	8002d08c <printf>
    8002178e:	4529                	li	a0,10
    80021790:	5ea0a0ef          	jal	8002bd7a <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021794:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021798:	57fd                	li	a5,-1
    8002179a:	17fe                	slli	a5,a5,0x3f
    8002179c:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800217a0:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800217a4:	30a025f3          	csrr	a1,0x30a
    800217a8:	00015517          	auipc	a0,0x15
    800217ac:	e4850513          	addi	a0,a0,-440 # 800365f0 <__func__.0+0x6900>
    800217b0:	0dd0b0ef          	jal	8002d08c <printf>
    800217b4:	60a025f3          	csrr	a1,henvcfg
    800217b8:	00015517          	auipc	a0,0x15
    800217bc:	e3850513          	addi	a0,a0,-456 # 800365f0 <__func__.0+0x6900>
    800217c0:	0cd0b0ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VU);
    800217c4:	4501                	li	a0,0
    800217c6:	f42df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800217ca:	e42df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800217ce:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800217d2:	00037597          	auipc	a1,0x37
    800217d6:	83f5c583          	lbu	a1,-1985(a1) # 80058011 <excpt+0x1>
    800217da:	00017517          	auipc	a0,0x17
    800217de:	b2e50513          	addi	a0,a0,-1234 # 80038308 <__func__.0+0x8618>
    800217e2:	00037417          	auipc	s0,0x37
    800217e6:	82e40413          	addi	s0,s0,-2002 # 80058010 <excpt>
    800217ea:	0a30b0ef          	jal	8002d08c <printf>
    printf("cause=%d\n",excpt.cause);
    800217ee:	640c                	ld	a1,8(s0)
    800217f0:	00017517          	auipc	a0,0x17
    800217f4:	b2850513          	addi	a0,a0,-1240 # 80038318 <__func__.0+0x8628>
    800217f8:	0950b0ef          	jal	8002d08c <printf>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800217fc:	08200593          	li	a1,130
    80021800:	00017617          	auipc	a2,0x17
    80021804:	c0860613          	addi	a2,a2,-1016 # 80038408 <__func__.0+0x8718>
    80021808:	0000e517          	auipc	a0,0xe
    8002180c:	7e850513          	addi	a0,a0,2024 # 8002fff0 <__func__.0+0x300>
    80021810:	07d0b0ef          	jal	8002d08c <printf>
    80021814:	00036797          	auipc	a5,0x36
    80021818:	7fd7c783          	lbu	a5,2045(a5) # 80058011 <excpt+0x1>
    8002181c:	0000e597          	auipc	a1,0xe
    80021820:	7ac58593          	addi	a1,a1,1964 # 8002ffc8 <__func__.0+0x2d8>
    80021824:	cf89                	beqz	a5,8002183e <timecmp_test_19+0xcc>
    80021826:	6418                	ld	a4,8(s0)
    80021828:	4789                	li	a5,2
    8002182a:	0000e597          	auipc	a1,0xe
    8002182e:	78e58593          	addi	a1,a1,1934 # 8002ffb8 <__func__.0+0x2c8>
    80021832:	00f70663          	beq	a4,a5,8002183e <timecmp_test_19+0xcc>
    80021836:	0000e597          	auipc	a1,0xe
    8002183a:	79258593          	addi	a1,a1,1938 # 8002ffc8 <__func__.0+0x2d8>
    8002183e:	0000e517          	auipc	a0,0xe
    80021842:	7ca50513          	addi	a0,a0,1994 # 80030008 <__func__.0+0x318>
    80021846:	0470b0ef          	jal	8002d08c <printf>
    8002184a:	00036797          	auipc	a5,0x36
    8002184e:	7c77c783          	lbu	a5,1991(a5) # 80058011 <excpt+0x1>
    80021852:	c789                	beqz	a5,8002185c <timecmp_test_19+0xea>
    80021854:	6418                	ld	a4,8(s0)
    80021856:	4789                	li	a5,2
    80021858:	00f70c63          	beq	a4,a5,80021870 <timecmp_test_19+0xfe>
    8002185c:	0000e517          	auipc	a0,0xe
    80021860:	7b450513          	addi	a0,a0,1972 # 80030010 <__func__.0+0x320>
    80021864:	0290b0ef          	jal	8002d08c <printf>
    80021868:	02900513          	li	a0,41
    8002186c:	50e0a0ef          	jal	8002bd7a <putchar>
    80021870:	4529                	li	a0,10
    80021872:	5080a0ef          	jal	8002bd7a <putchar>
    80021876:	00036497          	auipc	s1,0x36
    8002187a:	79b4c483          	lbu	s1,1947(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002187e:	0000e597          	auipc	a1,0xe
    80021882:	74a58593          	addi	a1,a1,1866 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021886:	cc91                	beqz	s1,800218a2 <timecmp_test_19+0x130>
    80021888:	6418                	ld	a4,8(s0)
    8002188a:	4789                	li	a5,2
    TEST_END(); 
    8002188c:	0000e597          	auipc	a1,0xe
    80021890:	72c58593          	addi	a1,a1,1836 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021894:	00f70763          	beq	a4,a5,800218a2 <timecmp_test_19+0x130>
    80021898:	4481                	li	s1,0
    TEST_END(); 
    8002189a:	0000e597          	auipc	a1,0xe
    8002189e:	72e58593          	addi	a1,a1,1838 # 8002ffc8 <__func__.0+0x2d8>
    800218a2:	0000e517          	auipc	a0,0xe
    800218a6:	7ce50513          	addi	a0,a0,1998 # 80030070 <__func__.0+0x380>
    800218aa:	7e20b0ef          	jal	8002d08c <printf>
    800218ae:	4511                	li	a0,4
    800218b0:	e58df0ef          	jal	80000f08 <goto_priv>
    800218b4:	81ee00ef          	jal	800018d2 <reset_state>
}
    800218b8:	60e2                	ld	ra,24(sp)
    800218ba:	6442                	ld	s0,16(sp)
    800218bc:	8526                	mv	a0,s1
    800218be:	64a2                	ld	s1,8(sp)
    800218c0:	6105                	addi	sp,sp,32
    800218c2:	8082                	ret

00000000800218c4 <timecmp_test_20>:

bool timecmp_test_20() {
    800218c4:	1101                	addi	sp,sp,-32

    TEST_START();    
    800218c6:	0000e597          	auipc	a1,0xe
    800218ca:	d3258593          	addi	a1,a1,-718 # 8002f5f8 <__func__.1>
    800218ce:	0000e517          	auipc	a0,0xe
    800218d2:	70a50513          	addi	a0,a0,1802 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_20() {
    800218d6:	ec06                	sd	ra,24(sp)
    800218d8:	e822                	sd	s0,16(sp)
    800218da:	e426                	sd	s1,8(sp)
    TEST_START();    
    800218dc:	7b00b0ef          	jal	8002d08c <printf>
    800218e0:	4529                	li	a0,10
    800218e2:	4980a0ef          	jal	8002bd7a <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800218e6:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800218ea:	57fd                	li	a5,-1
    800218ec:	17fe                	slli	a5,a5,0x3f
    800218ee:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800218f2:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800218f6:	30a025f3          	csrr	a1,0x30a
    800218fa:	00015517          	auipc	a0,0x15
    800218fe:	cf650513          	addi	a0,a0,-778 # 800365f0 <__func__.0+0x6900>
    80021902:	78a0b0ef          	jal	8002d08c <printf>
    80021906:	60a025f3          	csrr	a1,henvcfg
    8002190a:	00015517          	auipc	a0,0x15
    8002190e:	ce650513          	addi	a0,a0,-794 # 800365f0 <__func__.0+0x6900>
    80021912:	77a0b0ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VS);
    80021916:	4509                	li	a0,2
    80021918:	df0df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002191c:	cf0df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021920:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80021924:	00036597          	auipc	a1,0x36
    80021928:	6ed5c583          	lbu	a1,1773(a1) # 80058011 <excpt+0x1>
    8002192c:	00017517          	auipc	a0,0x17
    80021930:	9dc50513          	addi	a0,a0,-1572 # 80038308 <__func__.0+0x8618>
    80021934:	00036417          	auipc	s0,0x36
    80021938:	6dc40413          	addi	s0,s0,1756 # 80058010 <excpt>
    8002193c:	7500b0ef          	jal	8002d08c <printf>
    printf("cause=%d\n",excpt.cause);
    80021940:	640c                	ld	a1,8(s0)
    80021942:	00017517          	auipc	a0,0x17
    80021946:	9d650513          	addi	a0,a0,-1578 # 80038318 <__func__.0+0x8628>
    8002194a:	7420b0ef          	jal	8002d08c <printf>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002194e:	08200593          	li	a1,130
    80021952:	00017617          	auipc	a2,0x17
    80021956:	b2660613          	addi	a2,a2,-1242 # 80038478 <__func__.0+0x8788>
    8002195a:	0000e517          	auipc	a0,0xe
    8002195e:	69650513          	addi	a0,a0,1686 # 8002fff0 <__func__.0+0x300>
    80021962:	72a0b0ef          	jal	8002d08c <printf>
    80021966:	00036797          	auipc	a5,0x36
    8002196a:	6ab7c783          	lbu	a5,1707(a5) # 80058011 <excpt+0x1>
    8002196e:	0000e597          	auipc	a1,0xe
    80021972:	65a58593          	addi	a1,a1,1626 # 8002ffc8 <__func__.0+0x2d8>
    80021976:	cf89                	beqz	a5,80021990 <timecmp_test_20+0xcc>
    80021978:	6418                	ld	a4,8(s0)
    8002197a:	4789                	li	a5,2
    8002197c:	0000e597          	auipc	a1,0xe
    80021980:	63c58593          	addi	a1,a1,1596 # 8002ffb8 <__func__.0+0x2c8>
    80021984:	00f70663          	beq	a4,a5,80021990 <timecmp_test_20+0xcc>
    80021988:	0000e597          	auipc	a1,0xe
    8002198c:	64058593          	addi	a1,a1,1600 # 8002ffc8 <__func__.0+0x2d8>
    80021990:	0000e517          	auipc	a0,0xe
    80021994:	67850513          	addi	a0,a0,1656 # 80030008 <__func__.0+0x318>
    80021998:	6f40b0ef          	jal	8002d08c <printf>
    8002199c:	00036797          	auipc	a5,0x36
    800219a0:	6757c783          	lbu	a5,1653(a5) # 80058011 <excpt+0x1>
    800219a4:	c789                	beqz	a5,800219ae <timecmp_test_20+0xea>
    800219a6:	6418                	ld	a4,8(s0)
    800219a8:	4789                	li	a5,2
    800219aa:	00f70c63          	beq	a4,a5,800219c2 <timecmp_test_20+0xfe>
    800219ae:	0000e517          	auipc	a0,0xe
    800219b2:	66250513          	addi	a0,a0,1634 # 80030010 <__func__.0+0x320>
    800219b6:	6d60b0ef          	jal	8002d08c <printf>
    800219ba:	02900513          	li	a0,41
    800219be:	3bc0a0ef          	jal	8002bd7a <putchar>
    800219c2:	4529                	li	a0,10
    800219c4:	3b60a0ef          	jal	8002bd7a <putchar>
    800219c8:	00036497          	auipc	s1,0x36
    800219cc:	6494c483          	lbu	s1,1609(s1) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800219d0:	0000e597          	auipc	a1,0xe
    800219d4:	5f858593          	addi	a1,a1,1528 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800219d8:	cc91                	beqz	s1,800219f4 <timecmp_test_20+0x130>
    800219da:	6418                	ld	a4,8(s0)
    800219dc:	4789                	li	a5,2
    TEST_END(); 
    800219de:	0000e597          	auipc	a1,0xe
    800219e2:	5da58593          	addi	a1,a1,1498 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800219e6:	00f70763          	beq	a4,a5,800219f4 <timecmp_test_20+0x130>
    800219ea:	4481                	li	s1,0
    TEST_END(); 
    800219ec:	0000e597          	auipc	a1,0xe
    800219f0:	5dc58593          	addi	a1,a1,1500 # 8002ffc8 <__func__.0+0x2d8>
    800219f4:	0000e517          	auipc	a0,0xe
    800219f8:	67c50513          	addi	a0,a0,1660 # 80030070 <__func__.0+0x380>
    800219fc:	6900b0ef          	jal	8002d08c <printf>
    80021a00:	4511                	li	a0,4
    80021a02:	d06df0ef          	jal	80000f08 <goto_priv>
    80021a06:	ecddf0ef          	jal	800018d2 <reset_state>
}
    80021a0a:	60e2                	ld	ra,24(sp)
    80021a0c:	6442                	ld	s0,16(sp)
    80021a0e:	8526                	mv	a0,s1
    80021a10:	64a2                	ld	s1,8(sp)
    80021a12:	6105                	addi	sp,sp,32
    80021a14:	8082                	ret

0000000080021a16 <timecmp_test_21>:

bool timecmp_test_21() {
    80021a16:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021a18:	0000e597          	auipc	a1,0xe
    80021a1c:	bf058593          	addi	a1,a1,-1040 # 8002f608 <__func__.0>
    80021a20:	0000e517          	auipc	a0,0xe
    80021a24:	5b850513          	addi	a0,a0,1464 # 8002ffd8 <__func__.0+0x2e8>
bool timecmp_test_21() {
    80021a28:	ec06                	sd	ra,24(sp)
    80021a2a:	e822                	sd	s0,16(sp)
    80021a2c:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021a2e:	65e0b0ef          	jal	8002d08c <printf>
    80021a32:	4529                	li	a0,10
    80021a34:	3460a0ef          	jal	8002bd7a <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80021a38:	57fd                	li	a5,-1
    80021a3a:	17fe                	slli	a5,a5,0x3f
    80021a3c:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021a40:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    80021a44:	4509                	li	a0,2
    80021a46:	cc2df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021a4a:	bc2df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021a4e:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021a52:	08200593          	li	a1,130
    80021a56:	00017617          	auipc	a2,0x17
    80021a5a:	a9260613          	addi	a2,a2,-1390 # 800384e8 <__func__.0+0x87f8>
    80021a5e:	0000e517          	auipc	a0,0xe
    80021a62:	59250513          	addi	a0,a0,1426 # 8002fff0 <__func__.0+0x300>
    80021a66:	6260b0ef          	jal	8002d08c <printf>
    80021a6a:	00036797          	auipc	a5,0x36
    80021a6e:	5a77c783          	lbu	a5,1447(a5) # 80058011 <excpt+0x1>
    80021a72:	00036497          	auipc	s1,0x36
    80021a76:	59e48493          	addi	s1,s1,1438 # 80058010 <excpt>
    80021a7a:	0000e597          	auipc	a1,0xe
    80021a7e:	54e58593          	addi	a1,a1,1358 # 8002ffc8 <__func__.0+0x2d8>
    80021a82:	cf89                	beqz	a5,80021a9c <timecmp_test_21+0x86>
    80021a84:	6498                	ld	a4,8(s1)
    80021a86:	4789                	li	a5,2
    80021a88:	0000e597          	auipc	a1,0xe
    80021a8c:	53058593          	addi	a1,a1,1328 # 8002ffb8 <__func__.0+0x2c8>
    80021a90:	00f70663          	beq	a4,a5,80021a9c <timecmp_test_21+0x86>
    80021a94:	0000e597          	auipc	a1,0xe
    80021a98:	53458593          	addi	a1,a1,1332 # 8002ffc8 <__func__.0+0x2d8>
    80021a9c:	0000e517          	auipc	a0,0xe
    80021aa0:	56c50513          	addi	a0,a0,1388 # 80030008 <__func__.0+0x318>
    80021aa4:	5e80b0ef          	jal	8002d08c <printf>
    80021aa8:	00036797          	auipc	a5,0x36
    80021aac:	5697c783          	lbu	a5,1385(a5) # 80058011 <excpt+0x1>
    80021ab0:	c789                	beqz	a5,80021aba <timecmp_test_21+0xa4>
    80021ab2:	6498                	ld	a4,8(s1)
    80021ab4:	4789                	li	a5,2
    80021ab6:	00f70c63          	beq	a4,a5,80021ace <timecmp_test_21+0xb8>
    80021aba:	0000e517          	auipc	a0,0xe
    80021abe:	55650513          	addi	a0,a0,1366 # 80030010 <__func__.0+0x320>
    80021ac2:	5ca0b0ef          	jal	8002d08c <printf>
    80021ac6:	02900513          	li	a0,41
    80021aca:	2b00a0ef          	jal	8002bd7a <putchar>
    80021ace:	4529                	li	a0,10
    80021ad0:	2aa0a0ef          	jal	8002bd7a <putchar>
    80021ad4:	00036797          	auipc	a5,0x36
    80021ad8:	53d7c783          	lbu	a5,1341(a5) # 80058011 <excpt+0x1>
    80021adc:	4401                	li	s0,0
    80021ade:	c789                	beqz	a5,80021ae8 <timecmp_test_21+0xd2>
    80021ae0:	6480                	ld	s0,8(s1)
    80021ae2:	1479                	addi	s0,s0,-2
    80021ae4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    80021ae8:	4501                	li	a0,0
    80021aea:	c1edf0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021aee:	b1edf0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021af2:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021af6:	08200593          	li	a1,130
    80021afa:	00017617          	auipc	a2,0x17
    80021afe:	a5660613          	addi	a2,a2,-1450 # 80038550 <__func__.0+0x8860>
    80021b02:	0000e517          	auipc	a0,0xe
    80021b06:	4ee50513          	addi	a0,a0,1262 # 8002fff0 <__func__.0+0x300>
    80021b0a:	5820b0ef          	jal	8002d08c <printf>
    80021b0e:	00036797          	auipc	a5,0x36
    80021b12:	5037c783          	lbu	a5,1283(a5) # 80058011 <excpt+0x1>
    80021b16:	0000e597          	auipc	a1,0xe
    80021b1a:	4b258593          	addi	a1,a1,1202 # 8002ffc8 <__func__.0+0x2d8>
    80021b1e:	cf89                	beqz	a5,80021b38 <timecmp_test_21+0x122>
    80021b20:	6498                	ld	a4,8(s1)
    80021b22:	4789                	li	a5,2
    80021b24:	0000e597          	auipc	a1,0xe
    80021b28:	49458593          	addi	a1,a1,1172 # 8002ffb8 <__func__.0+0x2c8>
    80021b2c:	00f70663          	beq	a4,a5,80021b38 <timecmp_test_21+0x122>
    80021b30:	0000e597          	auipc	a1,0xe
    80021b34:	49858593          	addi	a1,a1,1176 # 8002ffc8 <__func__.0+0x2d8>
    80021b38:	0000e517          	auipc	a0,0xe
    80021b3c:	4d050513          	addi	a0,a0,1232 # 80030008 <__func__.0+0x318>
    80021b40:	54c0b0ef          	jal	8002d08c <printf>
    80021b44:	00036797          	auipc	a5,0x36
    80021b48:	4cd7c783          	lbu	a5,1229(a5) # 80058011 <excpt+0x1>
    80021b4c:	c789                	beqz	a5,80021b56 <timecmp_test_21+0x140>
    80021b4e:	6498                	ld	a4,8(s1)
    80021b50:	4789                	li	a5,2
    80021b52:	00f70c63          	beq	a4,a5,80021b6a <timecmp_test_21+0x154>
    80021b56:	0000e517          	auipc	a0,0xe
    80021b5a:	4ba50513          	addi	a0,a0,1210 # 80030010 <__func__.0+0x320>
    80021b5e:	52e0b0ef          	jal	8002d08c <printf>
    80021b62:	02900513          	li	a0,41
    80021b66:	2140a0ef          	jal	8002bd7a <putchar>
    80021b6a:	4529                	li	a0,10
    80021b6c:	20e0a0ef          	jal	8002bd7a <putchar>
    80021b70:	c015                	beqz	s0,80021b94 <timecmp_test_21+0x17e>
    80021b72:	00036417          	auipc	s0,0x36
    80021b76:	49f44403          	lbu	s0,1183(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021b7a:	0000e597          	auipc	a1,0xe
    80021b7e:	44e58593          	addi	a1,a1,1102 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021b82:	cc11                	beqz	s0,80021b9e <timecmp_test_21+0x188>
    80021b84:	6498                	ld	a4,8(s1)
    80021b86:	4789                	li	a5,2
    TEST_END(); 
    80021b88:	0000e597          	auipc	a1,0xe
    80021b8c:	43058593          	addi	a1,a1,1072 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021b90:	00f70763          	beq	a4,a5,80021b9e <timecmp_test_21+0x188>
    80021b94:	4401                	li	s0,0
    TEST_END(); 
    80021b96:	0000e597          	auipc	a1,0xe
    80021b9a:	43258593          	addi	a1,a1,1074 # 8002ffc8 <__func__.0+0x2d8>
    80021b9e:	0000e517          	auipc	a0,0xe
    80021ba2:	4d250513          	addi	a0,a0,1234 # 80030070 <__func__.0+0x380>
    80021ba6:	4e60b0ef          	jal	8002d08c <printf>
    80021baa:	4511                	li	a0,4
    80021bac:	b5cdf0ef          	jal	80000f08 <goto_priv>
    80021bb0:	d23df0ef          	jal	800018d2 <reset_state>
    80021bb4:	60e2                	ld	ra,24(sp)
    80021bb6:	8522                	mv	a0,s0
    80021bb8:	6442                	ld	s0,16(sp)
    80021bba:	64a2                	ld	s1,8(sp)
    80021bbc:	6105                	addi	sp,sp,32
    80021bbe:	8082                	ret

0000000080021bc0 <mix_instruction_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h>

bool mix_instruction_1(){
    80021bc0:	7179                	addi	sp,sp,-48

    TEST_START();
    80021bc2:	0000e597          	auipc	a1,0xe
    80021bc6:	a5658593          	addi	a1,a1,-1450 # 8002f618 <__func__.2>
    80021bca:	0000e517          	auipc	a0,0xe
    80021bce:	40e50513          	addi	a0,a0,1038 # 8002ffd8 <__func__.0+0x2e8>
bool mix_instruction_1(){
    80021bd2:	f406                	sd	ra,40(sp)
    80021bd4:	f022                	sd	s0,32(sp)
    80021bd6:	ec26                	sd	s1,24(sp)
    80021bd8:	e84a                	sd	s2,16(sp)
    80021bda:	e44e                	sd	s3,8(sp)
    TEST_START();
    80021bdc:	4b00b0ef          	jal	8002d08c <printf>
    80021be0:	4529                	li	a0,10
    80021be2:	1980a0ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    80021be6:	4511                	li	a0,4
    80021be8:	b20df0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021bec:	57fd                	li	a5,-1
    80021bee:	17fe                	slli	a5,a5,0x3f
    80021bf0:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021bf4:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021bf8:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80021bfc:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80021c00:	4509                	li	a0,2
    80021c02:	b06df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021c06:	a06df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80021c0a:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 and henvcfg.stce=0",
    80021c0e:	08200593          	li	a1,130
    80021c12:	00017617          	auipc	a2,0x17
    80021c16:	9a660613          	addi	a2,a2,-1626 # 800385b8 <__func__.0+0x88c8>
    80021c1a:	0000e517          	auipc	a0,0xe
    80021c1e:	3d650513          	addi	a0,a0,982 # 8002fff0 <__func__.0+0x300>
    80021c22:	46a0b0ef          	jal	8002d08c <printf>
    80021c26:	00036797          	auipc	a5,0x36
    80021c2a:	3eb7c783          	lbu	a5,1003(a5) # 80058011 <excpt+0x1>
    80021c2e:	00036497          	auipc	s1,0x36
    80021c32:	3e248493          	addi	s1,s1,994 # 80058010 <excpt>
    80021c36:	0000e597          	auipc	a1,0xe
    80021c3a:	39258593          	addi	a1,a1,914 # 8002ffc8 <__func__.0+0x2d8>
    80021c3e:	cf89                	beqz	a5,80021c58 <mix_instruction_1+0x98>
    80021c40:	6498                	ld	a4,8(s1)
    80021c42:	47d9                	li	a5,22
    80021c44:	0000e597          	auipc	a1,0xe
    80021c48:	37458593          	addi	a1,a1,884 # 8002ffb8 <__func__.0+0x2c8>
    80021c4c:	00f70663          	beq	a4,a5,80021c58 <mix_instruction_1+0x98>
    80021c50:	0000e597          	auipc	a1,0xe
    80021c54:	37858593          	addi	a1,a1,888 # 8002ffc8 <__func__.0+0x2d8>
    80021c58:	0000e517          	auipc	a0,0xe
    80021c5c:	3b050513          	addi	a0,a0,944 # 80030008 <__func__.0+0x318>
    80021c60:	42c0b0ef          	jal	8002d08c <printf>
    80021c64:	00036797          	auipc	a5,0x36
    80021c68:	3ad7c783          	lbu	a5,941(a5) # 80058011 <excpt+0x1>
    80021c6c:	c789                	beqz	a5,80021c76 <mix_instruction_1+0xb6>
    80021c6e:	6498                	ld	a4,8(s1)
    80021c70:	47d9                	li	a5,22
    80021c72:	00f70c63          	beq	a4,a5,80021c8a <mix_instruction_1+0xca>
    80021c76:	0000e517          	auipc	a0,0xe
    80021c7a:	39a50513          	addi	a0,a0,922 # 80030010 <__func__.0+0x320>
    80021c7e:	40e0b0ef          	jal	8002d08c <printf>
    80021c82:	02900513          	li	a0,41
    80021c86:	0f40a0ef          	jal	8002bd7a <putchar>
    80021c8a:	4529                	li	a0,10
    80021c8c:	0ee0a0ef          	jal	8002bd7a <putchar>
    80021c90:	00036797          	auipc	a5,0x36
    80021c94:	3817c783          	lbu	a5,897(a5) # 80058011 <excpt+0x1>
    80021c98:	4401                	li	s0,0
    80021c9a:	c789                	beqz	a5,80021ca4 <mix_instruction_1+0xe4>
    80021c9c:	6480                	ld	s0,8(s1)
    80021c9e:	1429                	addi	s0,s0,-22
    80021ca0:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80021ca4:	4511                	li	a0,4
    80021ca6:	a62df0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021caa:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    80021cae:	450d                	li	a0,3
    80021cb0:	a58df0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021cb4:	958df0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_TIME);
    80021cb8:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    80021cbc:	08200593          	li	a1,130
    80021cc0:	00015617          	auipc	a2,0x15
    80021cc4:	51060613          	addi	a2,a2,1296 # 800371d0 <__func__.0+0x74e0>
    80021cc8:	0000e517          	auipc	a0,0xe
    80021ccc:	32850513          	addi	a0,a0,808 # 8002fff0 <__func__.0+0x300>
    80021cd0:	3bc0b0ef          	jal	8002d08c <printf>
    80021cd4:	00036797          	auipc	a5,0x36
    80021cd8:	33d7c783          	lbu	a5,829(a5) # 80058011 <excpt+0x1>
    80021cdc:	0000e597          	auipc	a1,0xe
    80021ce0:	2ec58593          	addi	a1,a1,748 # 8002ffc8 <__func__.0+0x2d8>
    80021ce4:	cf89                	beqz	a5,80021cfe <mix_instruction_1+0x13e>
    80021ce6:	6498                	ld	a4,8(s1)
    80021ce8:	4789                	li	a5,2
    80021cea:	0000e597          	auipc	a1,0xe
    80021cee:	2ce58593          	addi	a1,a1,718 # 8002ffb8 <__func__.0+0x2c8>
    80021cf2:	00f70663          	beq	a4,a5,80021cfe <mix_instruction_1+0x13e>
    80021cf6:	0000e597          	auipc	a1,0xe
    80021cfa:	2d258593          	addi	a1,a1,722 # 8002ffc8 <__func__.0+0x2d8>
    80021cfe:	0000e517          	auipc	a0,0xe
    80021d02:	30a50513          	addi	a0,a0,778 # 80030008 <__func__.0+0x318>
    80021d06:	3860b0ef          	jal	8002d08c <printf>
    80021d0a:	00036797          	auipc	a5,0x36
    80021d0e:	3077c783          	lbu	a5,775(a5) # 80058011 <excpt+0x1>
    80021d12:	c789                	beqz	a5,80021d1c <mix_instruction_1+0x15c>
    80021d14:	6498                	ld	a4,8(s1)
    80021d16:	4789                	li	a5,2
    80021d18:	00f70c63          	beq	a4,a5,80021d30 <mix_instruction_1+0x170>
    80021d1c:	0000e517          	auipc	a0,0xe
    80021d20:	2f450513          	addi	a0,a0,756 # 80030010 <__func__.0+0x320>
    80021d24:	3680b0ef          	jal	8002d08c <printf>
    80021d28:	02900513          	li	a0,41
    80021d2c:	04e0a0ef          	jal	8002bd7a <putchar>
    80021d30:	4529                	li	a0,10
    80021d32:	0480a0ef          	jal	8002bd7a <putchar>
    80021d36:	c801                	beqz	s0,80021d46 <mix_instruction_1+0x186>
    80021d38:	00036797          	auipc	a5,0x36
    80021d3c:	2d97c783          	lbu	a5,729(a5) # 80058011 <excpt+0x1>
    80021d40:	4401                	li	s0,0
    80021d42:	040794e3          	bnez	a5,8002258a <mix_instruction_1+0x9ca>
    //     excpt.cause == CAUSE_ILI
    // ); 
    
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80021d46:	4511                	li	a0,4
    80021d48:	9c0df0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80021d4c:	004007b7          	lui	a5,0x400
    80021d50:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80021d54:	002007b7          	lui	a5,0x200
    80021d58:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    80021d5c:	4501                	li	a0,0
    80021d5e:	9aadf0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80021d62:	8aadf0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile(
    80021d66:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80021d6a:	08200593          	li	a1,130
    80021d6e:	0000f617          	auipc	a2,0xf
    80021d72:	3aa60613          	addi	a2,a2,938 # 80031118 <__func__.0+0x1428>
    80021d76:	0000e517          	auipc	a0,0xe
    80021d7a:	27a50513          	addi	a0,a0,634 # 8002fff0 <__func__.0+0x300>
    80021d7e:	30e0b0ef          	jal	8002d08c <printf>
    80021d82:	00036797          	auipc	a5,0x36
    80021d86:	28f7c783          	lbu	a5,655(a5) # 80058011 <excpt+0x1>
    80021d8a:	0000e597          	auipc	a1,0xe
    80021d8e:	23e58593          	addi	a1,a1,574 # 8002ffc8 <__func__.0+0x2d8>
    80021d92:	cf89                	beqz	a5,80021dac <mix_instruction_1+0x1ec>
    80021d94:	6498                	ld	a4,8(s1)
    80021d96:	47d9                	li	a5,22
    80021d98:	0000e597          	auipc	a1,0xe
    80021d9c:	22058593          	addi	a1,a1,544 # 8002ffb8 <__func__.0+0x2c8>
    80021da0:	00f70663          	beq	a4,a5,80021dac <mix_instruction_1+0x1ec>
    80021da4:	0000e597          	auipc	a1,0xe
    80021da8:	22458593          	addi	a1,a1,548 # 8002ffc8 <__func__.0+0x2d8>
    80021dac:	0000e517          	auipc	a0,0xe
    80021db0:	25c50513          	addi	a0,a0,604 # 80030008 <__func__.0+0x318>
    80021db4:	2d80b0ef          	jal	8002d08c <printf>
    80021db8:	00036797          	auipc	a5,0x36
    80021dbc:	2597c783          	lbu	a5,601(a5) # 80058011 <excpt+0x1>
    80021dc0:	c789                	beqz	a5,80021dca <mix_instruction_1+0x20a>
    80021dc2:	6498                	ld	a4,8(s1)
    80021dc4:	47d9                	li	a5,22
    80021dc6:	00f70c63          	beq	a4,a5,80021dde <mix_instruction_1+0x21e>
    80021dca:	0000e517          	auipc	a0,0xe
    80021dce:	24650513          	addi	a0,a0,582 # 80030010 <__func__.0+0x320>
    80021dd2:	2ba0b0ef          	jal	8002d08c <printf>
    80021dd6:	02900513          	li	a0,41
    80021dda:	7a1090ef          	jal	8002bd7a <putchar>
    80021dde:	4529                	li	a0,10
    80021de0:	79b090ef          	jal	8002bd7a <putchar>
    80021de4:	c801                	beqz	s0,80021df4 <mix_instruction_1+0x234>
    80021de6:	00036797          	auipc	a5,0x36
    80021dea:	22b7c783          	lbu	a5,555(a5) # 80058011 <excpt+0x1>
    80021dee:	4401                	li	s0,0
    80021df0:	78079763          	bnez	a5,8002257e <mix_instruction_1+0x9be>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80021df4:	4511                	li	a0,4
    80021df6:	912df0ef          	jal	80000f08 <goto_priv>
    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    hspt_init();
    80021dfa:	fe6de0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80021dfe:	bc7de0ef          	jal	800009c4 <hpt_init>
    vspt_init();
    80021e02:	97bde0ef          	jal	8000077c <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80021e06:	450d                	li	a0,3
    80021e08:	900df0ef          	jal	80000f08 <goto_priv>

    set_prev_priv(PRIV_VU);
    80021e0c:	4501                	li	a0,0
    80021e0e:	81adf0ef          	jal	80000e28 <set_prev_priv>
    *((volatile uint64_t*) addr) = val;
    80021e12:	0001a917          	auipc	s2,0x1a
    80021e16:	fde90913          	addi	s2,s2,-34 # 8003bdf0 <__func__.0+0xc100>
    TEST_SETUP_EXCEPT();
    80021e1a:	ff3de0ef          	jal	80000e0c <test_setup_except_function>
    80021e1e:	00093683          	ld	a3,0(s2)
    80021e22:	44019737          	lui	a4,0x44019
    asm volatile(
    80021e26:	000807b7          	lui	a5,0x80
    80021e2a:	0706                	slli	a4,a4,0x1
    80021e2c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80021e2e:	e314                	sd	a3,0(a4)
    80021e30:	07b6                	slli	a5,a5,0xd
    80021e32:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80021e36:	08200593          	li	a1,130
    80021e3a:	0000f617          	auipc	a2,0xf
    80021e3e:	b6e60613          	addi	a2,a2,-1170 # 800309a8 <__func__.0+0xcb8>
    80021e42:	0000e517          	auipc	a0,0xe
    80021e46:	1ae50513          	addi	a0,a0,430 # 8002fff0 <__func__.0+0x300>
    80021e4a:	2420b0ef          	jal	8002d08c <printf>
    80021e4e:	00036797          	auipc	a5,0x36
    80021e52:	1c37c783          	lbu	a5,451(a5) # 80058011 <excpt+0x1>
    80021e56:	0000e597          	auipc	a1,0xe
    80021e5a:	17258593          	addi	a1,a1,370 # 8002ffc8 <__func__.0+0x2d8>
    80021e5e:	e789                	bnez	a5,80021e68 <mix_instruction_1+0x2a8>
    80021e60:	0000e597          	auipc	a1,0xe
    80021e64:	15858593          	addi	a1,a1,344 # 8002ffb8 <__func__.0+0x2c8>
    80021e68:	0000e517          	auipc	a0,0xe
    80021e6c:	1a050513          	addi	a0,a0,416 # 80030008 <__func__.0+0x318>
    80021e70:	21c0b0ef          	jal	8002d08c <printf>
    80021e74:	00036797          	auipc	a5,0x36
    80021e78:	19d7c783          	lbu	a5,413(a5) # 80058011 <excpt+0x1>
    80021e7c:	76079563          	bnez	a5,800225e6 <mix_instruction_1+0xa26>
    80021e80:	4529                	li	a0,10
    80021e82:	6f9090ef          	jal	8002bd7a <putchar>
    80021e86:	c419                	beqz	s0,80021e94 <mix_instruction_1+0x2d4>
    80021e88:	00036417          	auipc	s0,0x36
    80021e8c:	18944403          	lbu	s0,393(s0) # 80058011 <excpt+0x1>
    80021e90:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    80021e94:	4509                	li	a0,2
    80021e96:	f93de0ef          	jal	80000e28 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80021e9a:	f73de0ef          	jal	80000e0c <test_setup_except_function>
    80021e9e:	00093683          	ld	a3,0(s2)
    80021ea2:	44019737          	lui	a4,0x44019
    80021ea6:	000807b7          	lui	a5,0x80
    80021eaa:	0706                	slli	a4,a4,0x1
    80021eac:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80021eae:	e314                	sd	a3,0(a4)
    80021eb0:	07b6                	slli	a5,a5,0xd
    80021eb2:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80021eb6:	08200593          	li	a1,130
    80021eba:	0000f617          	auipc	a2,0xf
    80021ebe:	b1e60613          	addi	a2,a2,-1250 # 800309d8 <__func__.0+0xce8>
    80021ec2:	0000e517          	auipc	a0,0xe
    80021ec6:	12e50513          	addi	a0,a0,302 # 8002fff0 <__func__.0+0x300>
    80021eca:	1c20b0ef          	jal	8002d08c <printf>
    80021ece:	00036797          	auipc	a5,0x36
    80021ed2:	1437c783          	lbu	a5,323(a5) # 80058011 <excpt+0x1>
    80021ed6:	0000e597          	auipc	a1,0xe
    80021eda:	0f258593          	addi	a1,a1,242 # 8002ffc8 <__func__.0+0x2d8>
    80021ede:	cf89                	beqz	a5,80021ef8 <mix_instruction_1+0x338>
    80021ee0:	6498                	ld	a4,8(s1)
    80021ee2:	47b5                	li	a5,13
    80021ee4:	0000e597          	auipc	a1,0xe
    80021ee8:	0d458593          	addi	a1,a1,212 # 8002ffb8 <__func__.0+0x2c8>
    80021eec:	00f70663          	beq	a4,a5,80021ef8 <mix_instruction_1+0x338>
    80021ef0:	0000e597          	auipc	a1,0xe
    80021ef4:	0d858593          	addi	a1,a1,216 # 8002ffc8 <__func__.0+0x2d8>
    80021ef8:	0000e517          	auipc	a0,0xe
    80021efc:	11050513          	addi	a0,a0,272 # 80030008 <__func__.0+0x318>
    80021f00:	18c0b0ef          	jal	8002d08c <printf>
    80021f04:	00036797          	auipc	a5,0x36
    80021f08:	10d7c783          	lbu	a5,269(a5) # 80058011 <excpt+0x1>
    80021f0c:	c789                	beqz	a5,80021f16 <mix_instruction_1+0x356>
    80021f0e:	6498                	ld	a4,8(s1)
    80021f10:	47b5                	li	a5,13
    80021f12:	00f70c63          	beq	a4,a5,80021f2a <mix_instruction_1+0x36a>
    80021f16:	0000e517          	auipc	a0,0xe
    80021f1a:	0fa50513          	addi	a0,a0,250 # 80030010 <__func__.0+0x320>
    80021f1e:	16e0b0ef          	jal	8002d08c <printf>
    80021f22:	02900513          	li	a0,41
    80021f26:	655090ef          	jal	8002bd7a <putchar>
    80021f2a:	4529                	li	a0,10
    80021f2c:	64f090ef          	jal	8002bd7a <putchar>
    80021f30:	c801                	beqz	s0,80021f40 <mix_instruction_1+0x380>
    80021f32:	00036797          	auipc	a5,0x36
    80021f36:	0df7c783          	lbu	a5,223(a5) # 80058011 <excpt+0x1>
    80021f3a:	4401                	li	s0,0
    80021f3c:	66079263          	bnez	a5,800225a0 <mix_instruction_1+0x9e0>


//----------------------------------------------------------------------


    goto_priv(PRIV_M);     
    80021f40:	4511                	li	a0,4
    80021f42:	fc7de0ef          	jal	80000f08 <goto_priv>

    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80021f46:	000407b7          	lui	a5,0x40
    80021f4a:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80021f4e:	450d                	li	a0,3
    80021f50:	fb9de0ef          	jal	80000f08 <goto_priv>

    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80021f54:	eb9de0ef          	jal	80000e0c <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80021f58:	37ab77b7          	lui	a5,0x37ab7
    80021f5c:	00080737          	lui	a4,0x80
    80021f60:	078a                	slli	a5,a5,0x2
    80021f62:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80021f64:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80021f68:	0736                	slli	a4,a4,0xd
    80021f6a:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80021f6e:	08200593          	li	a1,130
    80021f72:	00013617          	auipc	a2,0x13
    80021f76:	64660613          	addi	a2,a2,1606 # 800355b8 <__func__.0+0x58c8>
    80021f7a:	0000e517          	auipc	a0,0xe
    80021f7e:	07650513          	addi	a0,a0,118 # 8002fff0 <__func__.0+0x300>
    80021f82:	10a0b0ef          	jal	8002d08c <printf>
    80021f86:	00036797          	auipc	a5,0x36
    80021f8a:	08b7c783          	lbu	a5,139(a5) # 80058011 <excpt+0x1>
    80021f8e:	0000e597          	auipc	a1,0xe
    80021f92:	03a58593          	addi	a1,a1,58 # 8002ffc8 <__func__.0+0x2d8>
    80021f96:	cf89                	beqz	a5,80021fb0 <mix_instruction_1+0x3f0>
    80021f98:	6498                	ld	a4,8(s1)
    80021f9a:	47bd                	li	a5,15
    80021f9c:	0000e597          	auipc	a1,0xe
    80021fa0:	01c58593          	addi	a1,a1,28 # 8002ffb8 <__func__.0+0x2c8>
    80021fa4:	00f70663          	beq	a4,a5,80021fb0 <mix_instruction_1+0x3f0>
    80021fa8:	0000e597          	auipc	a1,0xe
    80021fac:	02058593          	addi	a1,a1,32 # 8002ffc8 <__func__.0+0x2d8>
    80021fb0:	0000e517          	auipc	a0,0xe
    80021fb4:	05850513          	addi	a0,a0,88 # 80030008 <__func__.0+0x318>
    80021fb8:	0d40b0ef          	jal	8002d08c <printf>
    80021fbc:	00036797          	auipc	a5,0x36
    80021fc0:	0557c783          	lbu	a5,85(a5) # 80058011 <excpt+0x1>
    80021fc4:	c789                	beqz	a5,80021fce <mix_instruction_1+0x40e>
    80021fc6:	6498                	ld	a4,8(s1)
    80021fc8:	47bd                	li	a5,15
    80021fca:	00f70c63          	beq	a4,a5,80021fe2 <mix_instruction_1+0x422>
    80021fce:	0000e517          	auipc	a0,0xe
    80021fd2:	04250513          	addi	a0,a0,66 # 80030010 <__func__.0+0x320>
    80021fd6:	0b60b0ef          	jal	8002d08c <printf>
    80021fda:	02900513          	li	a0,41
    80021fde:	59d090ef          	jal	8002bd7a <putchar>
    80021fe2:	4529                	li	a0,10
    80021fe4:	597090ef          	jal	8002bd7a <putchar>
    80021fe8:	c801                	beqz	s0,80021ff8 <mix_instruction_1+0x438>
    80021fea:	00036797          	auipc	a5,0x36
    80021fee:	0277c783          	lbu	a5,39(a5) # 80058011 <excpt+0x1>
    80021ff2:	4401                	li	s0,0
    80021ff4:	5a079b63          	bnez	a5,800225aa <mix_instruction_1+0x9ea>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80021ff8:	4511                	li	a0,4
    80021ffa:	f0fde0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80021ffe:	57fd                	li	a5,-1
    80022000:	03f79713          	slli	a4,a5,0x3f
    80022004:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    80022008:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    8002200c:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    80022010:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80022014:	64402973          	csrr	s2,hip
    80022018:	0000e617          	auipc	a2,0xe
    8002201c:	49860613          	addi	a2,a2,1176 # 800304b0 <__func__.0+0x7c0>
    80022020:	08200593          	li	a1,130
    80022024:	0000e517          	auipc	a0,0xe
    80022028:	fcc50513          	addi	a0,a0,-52 # 8002fff0 <__func__.0+0x300>
    8002202c:	4991                	li	s3,4
    8002202e:	05e0b0ef          	jal	8002d08c <printf>
    80022032:	59390163          	beq	s2,s3,800225b4 <mix_instruction_1+0x9f4>
    80022036:	0000e597          	auipc	a1,0xe
    8002203a:	f9258593          	addi	a1,a1,-110 # 8002ffc8 <__func__.0+0x2d8>
    8002203e:	0000e517          	auipc	a0,0xe
    80022042:	fca50513          	addi	a0,a0,-54 # 80030008 <__func__.0+0x318>
    80022046:	0460b0ef          	jal	8002d08c <printf>
    8002204a:	0000e517          	auipc	a0,0xe
    8002204e:	fc650513          	addi	a0,a0,-58 # 80030010 <__func__.0+0x320>
    80022052:	03a0b0ef          	jal	8002d08c <printf>
    80022056:	86ce                	mv	a3,s3
    80022058:	864a                	mv	a2,s2
    8002205a:	02d00593          	li	a1,45
    8002205e:	0000e517          	auipc	a0,0xe
    80022062:	45a50513          	addi	a0,a0,1114 # 800304b8 <__func__.0+0x7c8>
    80022066:	0260b0ef          	jal	8002d08c <printf>
    8002206a:	02900513          	li	a0,41
    8002206e:	50d090ef          	jal	8002bd7a <putchar>
    80022072:	4529                	li	a0,10
    80022074:	507090ef          	jal	8002bd7a <putchar>
    80022078:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    8002207a:	14402973          	csrr	s2,sip
    8002207e:	0000e617          	auipc	a2,0xe
    80022082:	45260613          	addi	a2,a2,1106 # 800304d0 <__func__.0+0x7e0>
    80022086:	08200593          	li	a1,130
    8002208a:	0000e517          	auipc	a0,0xe
    8002208e:	f6650513          	addi	a0,a0,-154 # 8002fff0 <__func__.0+0x300>
    80022092:	22200993          	li	s3,546
    80022096:	7f70a0ef          	jal	8002d08c <printf>
    8002209a:	4b390e63          	beq	s2,s3,80022556 <mix_instruction_1+0x996>
    8002209e:	0000e597          	auipc	a1,0xe
    800220a2:	f2a58593          	addi	a1,a1,-214 # 8002ffc8 <__func__.0+0x2d8>
    800220a6:	0000e517          	auipc	a0,0xe
    800220aa:	f6250513          	addi	a0,a0,-158 # 80030008 <__func__.0+0x318>
    800220ae:	7df0a0ef          	jal	8002d08c <printf>
    800220b2:	0000e517          	auipc	a0,0xe
    800220b6:	f5e50513          	addi	a0,a0,-162 # 80030010 <__func__.0+0x320>
    800220ba:	7d30a0ef          	jal	8002d08c <printf>
    800220be:	86ce                	mv	a3,s3
    800220c0:	864a                	mv	a2,s2
    800220c2:	02d00593          	li	a1,45
    800220c6:	0000e517          	auipc	a0,0xe
    800220ca:	3f250513          	addi	a0,a0,1010 # 800304b8 <__func__.0+0x7c8>
    800220ce:	7bf0a0ef          	jal	8002d08c <printf>
    800220d2:	02900513          	li	a0,41
    800220d6:	4a5090ef          	jal	8002bd7a <putchar>
    800220da:	4529                	li	a0,10
    800220dc:	49f090ef          	jal	8002bd7a <putchar>
    800220e0:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    800220e2:	24402973          	csrr	s2,vsip
    800220e6:	0000e617          	auipc	a2,0xe
    800220ea:	3ba60613          	addi	a2,a2,954 # 800304a0 <__func__.0+0x7b0>
    800220ee:	08200593          	li	a1,130
    800220f2:	0000e517          	auipc	a0,0xe
    800220f6:	efe50513          	addi	a0,a0,-258 # 8002fff0 <__func__.0+0x300>
    800220fa:	4989                	li	s3,2
    800220fc:	7910a0ef          	jal	8002d08c <printf>
    80022100:	43390d63          	beq	s2,s3,8002253a <mix_instruction_1+0x97a>
    80022104:	0000e597          	auipc	a1,0xe
    80022108:	ec458593          	addi	a1,a1,-316 # 8002ffc8 <__func__.0+0x2d8>
    8002210c:	0000e517          	auipc	a0,0xe
    80022110:	efc50513          	addi	a0,a0,-260 # 80030008 <__func__.0+0x318>
    80022114:	7790a0ef          	jal	8002d08c <printf>
    80022118:	0000e517          	auipc	a0,0xe
    8002211c:	ef850513          	addi	a0,a0,-264 # 80030010 <__func__.0+0x320>
    80022120:	76d0a0ef          	jal	8002d08c <printf>
    80022124:	86ce                	mv	a3,s3
    80022126:	864a                	mv	a2,s2
    80022128:	02d00593          	li	a1,45
    8002212c:	0000e517          	auipc	a0,0xe
    80022130:	38c50513          	addi	a0,a0,908 # 800304b8 <__func__.0+0x7c8>
    80022134:	7590a0ef          	jal	8002d08c <printf>
    80022138:	02900513          	li	a0,41
    8002213c:	43f090ef          	jal	8002bd7a <putchar>
    80022140:	4529                	li	a0,10
    80022142:	439090ef          	jal	8002bd7a <putchar>
    80022146:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80022148:	4509                	li	a0,2
    8002214a:	dbfde0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    8002214e:	14402973          	csrr	s2,sip
    80022152:	0000e617          	auipc	a2,0xe
    80022156:	38660613          	addi	a2,a2,902 # 800304d8 <__func__.0+0x7e8>
    8002215a:	08200593          	li	a1,130
    8002215e:	0000e517          	auipc	a0,0xe
    80022162:	e9250513          	addi	a0,a0,-366 # 8002fff0 <__func__.0+0x300>
    80022166:	4989                	li	s3,2
    80022168:	7250a0ef          	jal	8002d08c <printf>
    8002216c:	3b390963          	beq	s2,s3,8002251e <mix_instruction_1+0x95e>
    80022170:	0000e597          	auipc	a1,0xe
    80022174:	e5858593          	addi	a1,a1,-424 # 8002ffc8 <__func__.0+0x2d8>
    80022178:	0000e517          	auipc	a0,0xe
    8002217c:	e9050513          	addi	a0,a0,-368 # 80030008 <__func__.0+0x318>
    80022180:	70d0a0ef          	jal	8002d08c <printf>
    80022184:	0000e517          	auipc	a0,0xe
    80022188:	e8c50513          	addi	a0,a0,-372 # 80030010 <__func__.0+0x320>
    8002218c:	7010a0ef          	jal	8002d08c <printf>
    80022190:	86ce                	mv	a3,s3
    80022192:	864a                	mv	a2,s2
    80022194:	02d00593          	li	a1,45
    80022198:	0000e517          	auipc	a0,0xe
    8002219c:	32050513          	addi	a0,a0,800 # 800304b8 <__func__.0+0x7c8>
    800221a0:	6ed0a0ef          	jal	8002d08c <printf>
    800221a4:	02900513          	li	a0,41
    800221a8:	3d3090ef          	jal	8002bd7a <putchar>
    800221ac:	4529                	li	a0,10
    800221ae:	3cd090ef          	jal	8002bd7a <putchar>
    800221b2:	4401                	li	s0,0
    goto_priv(PRIV_M);
    800221b4:	4511                	li	a0,4
    800221b6:	d53de0ef          	jal	80000f08 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    800221ba:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    800221be:	64402973          	csrr	s2,hip
    800221c2:	0000e617          	auipc	a2,0xe
    800221c6:	2ee60613          	addi	a2,a2,750 # 800304b0 <__func__.0+0x7c0>
    800221ca:	08200593          	li	a1,130
    800221ce:	0000e517          	auipc	a0,0xe
    800221d2:	e2250513          	addi	a0,a0,-478 # 8002fff0 <__func__.0+0x300>
    800221d6:	6b70a0ef          	jal	8002d08c <printf>
    800221da:	32090463          	beqz	s2,80022502 <mix_instruction_1+0x942>
    800221de:	0000e597          	auipc	a1,0xe
    800221e2:	dea58593          	addi	a1,a1,-534 # 8002ffc8 <__func__.0+0x2d8>
    800221e6:	0000e517          	auipc	a0,0xe
    800221ea:	e2250513          	addi	a0,a0,-478 # 80030008 <__func__.0+0x318>
    800221ee:	69f0a0ef          	jal	8002d08c <printf>
    800221f2:	0000e517          	auipc	a0,0xe
    800221f6:	e1e50513          	addi	a0,a0,-482 # 80030010 <__func__.0+0x320>
    800221fa:	6930a0ef          	jal	8002d08c <printf>
    800221fe:	864a                	mv	a2,s2
    80022200:	4681                	li	a3,0
    80022202:	02d00593          	li	a1,45
    80022206:	0000e517          	auipc	a0,0xe
    8002220a:	2b250513          	addi	a0,a0,690 # 800304b8 <__func__.0+0x7c8>
    8002220e:	67f0a0ef          	jal	8002d08c <printf>
    80022212:	02900513          	li	a0,41
    80022216:	365090ef          	jal	8002bd7a <putchar>
    8002221a:	4529                	li	a0,10
    8002221c:	35f090ef          	jal	8002bd7a <putchar>
    80022220:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80022222:	14402973          	csrr	s2,sip
    80022226:	0000e617          	auipc	a2,0xe
    8002222a:	2aa60613          	addi	a2,a2,682 # 800304d0 <__func__.0+0x7e0>
    8002222e:	08200593          	li	a1,130
    80022232:	0000e517          	auipc	a0,0xe
    80022236:	dbe50513          	addi	a0,a0,-578 # 8002fff0 <__func__.0+0x300>
    8002223a:	6530a0ef          	jal	8002d08c <printf>
    8002223e:	2a090463          	beqz	s2,800224e6 <mix_instruction_1+0x926>
    80022242:	0000e597          	auipc	a1,0xe
    80022246:	d8658593          	addi	a1,a1,-634 # 8002ffc8 <__func__.0+0x2d8>
    8002224a:	0000e517          	auipc	a0,0xe
    8002224e:	dbe50513          	addi	a0,a0,-578 # 80030008 <__func__.0+0x318>
    80022252:	63b0a0ef          	jal	8002d08c <printf>
    80022256:	0000e517          	auipc	a0,0xe
    8002225a:	dba50513          	addi	a0,a0,-582 # 80030010 <__func__.0+0x320>
    8002225e:	62f0a0ef          	jal	8002d08c <printf>
    80022262:	864a                	mv	a2,s2
    80022264:	4681                	li	a3,0
    80022266:	02d00593          	li	a1,45
    8002226a:	0000e517          	auipc	a0,0xe
    8002226e:	24e50513          	addi	a0,a0,590 # 800304b8 <__func__.0+0x7c8>
    80022272:	61b0a0ef          	jal	8002d08c <printf>
    80022276:	02900513          	li	a0,41
    8002227a:	301090ef          	jal	8002bd7a <putchar>
    8002227e:	4529                	li	a0,10
    80022280:	2fb090ef          	jal	8002bd7a <putchar>
    80022284:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80022286:	24402973          	csrr	s2,vsip
    8002228a:	0000e617          	auipc	a2,0xe
    8002228e:	21660613          	addi	a2,a2,534 # 800304a0 <__func__.0+0x7b0>
    80022292:	08200593          	li	a1,130
    80022296:	0000e517          	auipc	a0,0xe
    8002229a:	d5a50513          	addi	a0,a0,-678 # 8002fff0 <__func__.0+0x300>
    8002229e:	5ef0a0ef          	jal	8002d08c <printf>
    800222a2:	22090463          	beqz	s2,800224ca <mix_instruction_1+0x90a>
    800222a6:	0000e597          	auipc	a1,0xe
    800222aa:	d2258593          	addi	a1,a1,-734 # 8002ffc8 <__func__.0+0x2d8>
    800222ae:	0000e517          	auipc	a0,0xe
    800222b2:	d5a50513          	addi	a0,a0,-678 # 80030008 <__func__.0+0x318>
    800222b6:	5d70a0ef          	jal	8002d08c <printf>
    800222ba:	0000e517          	auipc	a0,0xe
    800222be:	d5650513          	addi	a0,a0,-682 # 80030010 <__func__.0+0x320>
    800222c2:	5cb0a0ef          	jal	8002d08c <printf>
    800222c6:	864a                	mv	a2,s2
    800222c8:	4681                	li	a3,0
    800222ca:	02d00593          	li	a1,45
    800222ce:	0000e517          	auipc	a0,0xe
    800222d2:	1ea50513          	addi	a0,a0,490 # 800304b8 <__func__.0+0x7c8>
    800222d6:	5b70a0ef          	jal	8002d08c <printf>
    800222da:	02900513          	li	a0,41
    800222de:	29d090ef          	jal	8002bd7a <putchar>
    800222e2:	4529                	li	a0,10
    800222e4:	297090ef          	jal	8002bd7a <putchar>
    800222e8:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    800222ea:	4509                	li	a0,2
    800222ec:	c1dde0ef          	jal	80000f08 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800222f0:	14402973          	csrr	s2,sip
    800222f4:	0000e617          	auipc	a2,0xe
    800222f8:	1e460613          	addi	a2,a2,484 # 800304d8 <__func__.0+0x7e8>
    800222fc:	08200593          	li	a1,130
    80022300:	0000e517          	auipc	a0,0xe
    80022304:	cf050513          	addi	a0,a0,-784 # 8002fff0 <__func__.0+0x300>
    80022308:	5850a0ef          	jal	8002d08c <printf>
    8002230c:	1a090163          	beqz	s2,800224ae <mix_instruction_1+0x8ee>
    80022310:	0000e597          	auipc	a1,0xe
    80022314:	cb858593          	addi	a1,a1,-840 # 8002ffc8 <__func__.0+0x2d8>
    80022318:	0000e517          	auipc	a0,0xe
    8002231c:	cf050513          	addi	a0,a0,-784 # 80030008 <__func__.0+0x318>
    80022320:	56d0a0ef          	jal	8002d08c <printf>
    80022324:	0000e517          	auipc	a0,0xe
    80022328:	cec50513          	addi	a0,a0,-788 # 80030010 <__func__.0+0x320>
    8002232c:	5610a0ef          	jal	8002d08c <printf>
    80022330:	864a                	mv	a2,s2
    80022332:	4681                	li	a3,0
    80022334:	02d00593          	li	a1,45
    80022338:	0000e517          	auipc	a0,0xe
    8002233c:	18050513          	addi	a0,a0,384 # 800304b8 <__func__.0+0x7c8>
    80022340:	54d0a0ef          	jal	8002d08c <printf>
    80022344:	02900513          	li	a0,41
    80022348:	233090ef          	jal	8002bd7a <putchar>
    8002234c:	4529                	li	a0,10
    8002234e:	22d090ef          	jal	8002bd7a <putchar>
    80022352:	4401                	li	s0,0
    goto_priv(PRIV_M);   
    80022354:	4511                	li	a0,4
    80022356:	bb3de0ef          	jal	80000f08 <goto_priv>


//----------------------------------------------------------------------
    //执行取指指令二级地址翻译阶段时，pte.x=0
    goto_priv(PRIV_VS);
    8002235a:	4509                	li	a0,2
    8002235c:	badde0ef          	jal	80000f08 <goto_priv>
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    80022360:	aadde0ef          	jal	80000e0c <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80022364:	400137b7          	lui	a5,0x40013
    80022368:	078a                	slli	a5,a5,0x2
    8002236a:	00000297          	auipc	t0,0x0
    8002236e:	00c28293          	addi	t0,t0,12 # 80022376 <mix_instruction_1+0x7b6>
    80022372:	0254bc23          	sd	t0,56(s1)
    80022376:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80022378:	08200593          	li	a1,130
    8002237c:	00014617          	auipc	a2,0x14
    80022380:	0bc60613          	addi	a2,a2,188 # 80036438 <__func__.0+0x6748>
    80022384:	0000e517          	auipc	a0,0xe
    80022388:	c6c50513          	addi	a0,a0,-916 # 8002fff0 <__func__.0+0x300>
    8002238c:	5010a0ef          	jal	8002d08c <printf>
    80022390:	00036797          	auipc	a5,0x36
    80022394:	c817c783          	lbu	a5,-895(a5) # 80058011 <excpt+0x1>
    80022398:	0000e597          	auipc	a1,0xe
    8002239c:	c3058593          	addi	a1,a1,-976 # 8002ffc8 <__func__.0+0x2d8>
    800223a0:	cf89                	beqz	a5,800223ba <mix_instruction_1+0x7fa>
    800223a2:	6498                	ld	a4,8(s1)
    800223a4:	47d1                	li	a5,20
    800223a6:	0000e597          	auipc	a1,0xe
    800223aa:	c1258593          	addi	a1,a1,-1006 # 8002ffb8 <__func__.0+0x2c8>
    800223ae:	00f70663          	beq	a4,a5,800223ba <mix_instruction_1+0x7fa>
    800223b2:	0000e597          	auipc	a1,0xe
    800223b6:	c1658593          	addi	a1,a1,-1002 # 8002ffc8 <__func__.0+0x2d8>
    800223ba:	0000e517          	auipc	a0,0xe
    800223be:	c4e50513          	addi	a0,a0,-946 # 80030008 <__func__.0+0x318>
    800223c2:	4cb0a0ef          	jal	8002d08c <printf>
    800223c6:	00036797          	auipc	a5,0x36
    800223ca:	c4b7c783          	lbu	a5,-949(a5) # 80058011 <excpt+0x1>
    800223ce:	c789                	beqz	a5,800223d8 <mix_instruction_1+0x818>
    800223d0:	6498                	ld	a4,8(s1)
    800223d2:	47d1                	li	a5,20
    800223d4:	00f70c63          	beq	a4,a5,800223ec <mix_instruction_1+0x82c>
    800223d8:	0000e517          	auipc	a0,0xe
    800223dc:	c3850513          	addi	a0,a0,-968 # 80030010 <__func__.0+0x320>
    800223e0:	4ad0a0ef          	jal	8002d08c <printf>
    800223e4:	02900513          	li	a0,41
    800223e8:	193090ef          	jal	8002bd7a <putchar>
    800223ec:	4529                	li	a0,10
    800223ee:	18d090ef          	jal	8002bd7a <putchar>
    800223f2:	c801                	beqz	s0,80022402 <mix_instruction_1+0x842>
    800223f4:	00036797          	auipc	a5,0x36
    800223f8:	c1d7c783          	lbu	a5,-995(a5) # 80058011 <excpt+0x1>
    800223fc:	4401                	li	s0,0
    800223fe:	18079c63          	bnez	a5,80022596 <mix_instruction_1+0x9d6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );
//----------------------------------------------------------------------
    TEST_SETUP_EXCEPT();
    80022402:	a0bde0ef          	jal	80000e0c <test_setup_except_function>
    
    
    goto_priv(PRIV_HS);     
    80022406:	450d                	li	a0,3
    80022408:	b01de0ef          	jal	80000f08 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8002240c:	a01de0ef          	jal	80000e0c <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80022410:	001007b7          	lui	a5,0x100
    80022414:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    80022418:	07b2                	slli	a5,a5,0xc
    8002241a:	0785                	addi	a5,a5,1
    8002241c:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    80022420:	08200593          	li	a1,130
    80022424:	00011617          	auipc	a2,0x11
    80022428:	c8c60613          	addi	a2,a2,-884 # 800330b0 <__func__.0+0x33c0>
    8002242c:	0000e517          	auipc	a0,0xe
    80022430:	bc450513          	addi	a0,a0,-1084 # 8002fff0 <__func__.0+0x300>
    80022434:	4590a0ef          	jal	8002d08c <printf>
    80022438:	00036797          	auipc	a5,0x36
    8002243c:	bd97c783          	lbu	a5,-1063(a5) # 80058011 <excpt+0x1>
    80022440:	0000e597          	auipc	a1,0xe
    80022444:	b8858593          	addi	a1,a1,-1144 # 8002ffc8 <__func__.0+0x2d8>
    80022448:	e789                	bnez	a5,80022452 <mix_instruction_1+0x892>
    8002244a:	0000e597          	auipc	a1,0xe
    8002244e:	b6e58593          	addi	a1,a1,-1170 # 8002ffb8 <__func__.0+0x2c8>
    80022452:	0000e517          	auipc	a0,0xe
    80022456:	bb650513          	addi	a0,a0,-1098 # 80030008 <__func__.0+0x318>
    8002245a:	4330a0ef          	jal	8002d08c <printf>
    8002245e:	00036797          	auipc	a5,0x36
    80022462:	bb37c783          	lbu	a5,-1101(a5) # 80058011 <excpt+0x1>
    80022466:	16079563          	bnez	a5,800225d0 <mix_instruction_1+0xa10>
    8002246a:	4529                	li	a0,10
    8002246c:	10f090ef          	jal	8002bd7a <putchar>
    80022470:	c419                	beqz	s0,8002247e <mix_instruction_1+0x8be>
    80022472:	00036797          	auipc	a5,0x36
    80022476:	b9f7c783          	lbu	a5,-1121(a5) # 80058011 <excpt+0x1>
    8002247a:	0e078c63          	beqz	a5,80022572 <mix_instruction_1+0x9b2>
    8002247e:	4401                	li	s0,0
        excpt.triggered == false
    );
//----------------------------------------------------------------------

    TEST_END();
    80022480:	0000e597          	auipc	a1,0xe
    80022484:	b4858593          	addi	a1,a1,-1208 # 8002ffc8 <__func__.0+0x2d8>
    80022488:	0000e517          	auipc	a0,0xe
    8002248c:	be850513          	addi	a0,a0,-1048 # 80030070 <__func__.0+0x380>
    80022490:	3fd0a0ef          	jal	8002d08c <printf>
    80022494:	4511                	li	a0,4
    80022496:	a73de0ef          	jal	80000f08 <goto_priv>
    8002249a:	c38df0ef          	jal	800018d2 <reset_state>

    8002249e:	70a2                	ld	ra,40(sp)
    800224a0:	8522                	mv	a0,s0
    800224a2:	7402                	ld	s0,32(sp)
    800224a4:	64e2                	ld	s1,24(sp)
    800224a6:	6942                	ld	s2,16(sp)
    800224a8:	69a2                	ld	s3,8(sp)
    800224aa:	6145                	addi	sp,sp,48
    800224ac:	8082                	ret
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800224ae:	0000e597          	auipc	a1,0xe
    800224b2:	b0a58593          	addi	a1,a1,-1270 # 8002ffb8 <__func__.0+0x2c8>
    800224b6:	0000e517          	auipc	a0,0xe
    800224ba:	b5250513          	addi	a0,a0,-1198 # 80030008 <__func__.0+0x318>
    800224be:	3cf0a0ef          	jal	8002d08c <printf>
    800224c2:	4529                	li	a0,10
    800224c4:	0b7090ef          	jal	8002bd7a <putchar>
    800224c8:	b571                	j	80022354 <mix_instruction_1+0x794>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    800224ca:	0000e597          	auipc	a1,0xe
    800224ce:	aee58593          	addi	a1,a1,-1298 # 8002ffb8 <__func__.0+0x2c8>
    800224d2:	0000e517          	auipc	a0,0xe
    800224d6:	b3650513          	addi	a0,a0,-1226 # 80030008 <__func__.0+0x318>
    800224da:	3b30a0ef          	jal	8002d08c <printf>
    800224de:	4529                	li	a0,10
    800224e0:	09b090ef          	jal	8002bd7a <putchar>
    800224e4:	b519                	j	800222ea <mix_instruction_1+0x72a>
    check_csr_rd("sip", sip, 0x0);
    800224e6:	0000e597          	auipc	a1,0xe
    800224ea:	ad258593          	addi	a1,a1,-1326 # 8002ffb8 <__func__.0+0x2c8>
    800224ee:	0000e517          	auipc	a0,0xe
    800224f2:	b1a50513          	addi	a0,a0,-1254 # 80030008 <__func__.0+0x318>
    800224f6:	3970a0ef          	jal	8002d08c <printf>
    800224fa:	4529                	li	a0,10
    800224fc:	07f090ef          	jal	8002bd7a <putchar>
    80022500:	b359                	j	80022286 <mix_instruction_1+0x6c6>
    check_csr_rd("hip", CSR_HIP, 0x0);
    80022502:	0000e597          	auipc	a1,0xe
    80022506:	ab658593          	addi	a1,a1,-1354 # 8002ffb8 <__func__.0+0x2c8>
    8002250a:	0000e517          	auipc	a0,0xe
    8002250e:	afe50513          	addi	a0,a0,-1282 # 80030008 <__func__.0+0x318>
    80022512:	37b0a0ef          	jal	8002d08c <printf>
    80022516:	4529                	li	a0,10
    80022518:	063090ef          	jal	8002bd7a <putchar>
    8002251c:	b319                	j	80022222 <mix_instruction_1+0x662>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    8002251e:	0000e597          	auipc	a1,0xe
    80022522:	a9a58593          	addi	a1,a1,-1382 # 8002ffb8 <__func__.0+0x2c8>
    80022526:	0000e517          	auipc	a0,0xe
    8002252a:	ae250513          	addi	a0,a0,-1310 # 80030008 <__func__.0+0x318>
    8002252e:	35f0a0ef          	jal	8002d08c <printf>
    80022532:	4529                	li	a0,10
    80022534:	047090ef          	jal	8002bd7a <putchar>
    80022538:	b9b5                	j	800221b4 <mix_instruction_1+0x5f4>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    8002253a:	0000e597          	auipc	a1,0xe
    8002253e:	a7e58593          	addi	a1,a1,-1410 # 8002ffb8 <__func__.0+0x2c8>
    80022542:	0000e517          	auipc	a0,0xe
    80022546:	ac650513          	addi	a0,a0,-1338 # 80030008 <__func__.0+0x318>
    8002254a:	3430a0ef          	jal	8002d08c <printf>
    8002254e:	4529                	li	a0,10
    80022550:	02b090ef          	jal	8002bd7a <putchar>
    80022554:	bed5                	j	80022148 <mix_instruction_1+0x588>
    check_csr_rd("sip", sip, 0x222);    
    80022556:	0000e597          	auipc	a1,0xe
    8002255a:	a6258593          	addi	a1,a1,-1438 # 8002ffb8 <__func__.0+0x2c8>
    8002255e:	0000e517          	auipc	a0,0xe
    80022562:	aaa50513          	addi	a0,a0,-1366 # 80030008 <__func__.0+0x318>
    80022566:	3270a0ef          	jal	8002d08c <printf>
    8002256a:	4529                	li	a0,10
    8002256c:	00f090ef          	jal	8002bd7a <putchar>
    80022570:	be8d                	j	800220e2 <mix_instruction_1+0x522>
    TEST_ASSERT("load byte address is not aligned successful",         
    80022572:	4405                	li	s0,1
    TEST_END();
    80022574:	0000e597          	auipc	a1,0xe
    80022578:	a4458593          	addi	a1,a1,-1468 # 8002ffb8 <__func__.0+0x2c8>
    8002257c:	b731                	j	80022488 <mix_instruction_1+0x8c8>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    8002257e:	6480                	ld	s0,8(s1)
    80022580:	1429                	addi	s0,s0,-22
    80022582:	00143413          	seqz	s0,s0
    80022586:	86fff06f          	j	80021df4 <mix_instruction_1+0x234>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8002258a:	6480                	ld	s0,8(s1)
    8002258c:	1479                	addi	s0,s0,-2
    8002258e:	00143413          	seqz	s0,s0
    80022592:	fb4ff06f          	j	80021d46 <mix_instruction_1+0x186>
    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80022596:	6480                	ld	s0,8(s1)
    80022598:	1431                	addi	s0,s0,-20
    8002259a:	00143413          	seqz	s0,s0
    8002259e:	b595                	j	80022402 <mix_instruction_1+0x842>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    800225a0:	6480                	ld	s0,8(s1)
    800225a2:	144d                	addi	s0,s0,-13
    800225a4:	00143413          	seqz	s0,s0
    800225a8:	ba61                	j	80021f40 <mix_instruction_1+0x380>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800225aa:	6480                	ld	s0,8(s1)
    800225ac:	1445                	addi	s0,s0,-15
    800225ae:	00143413          	seqz	s0,s0
    800225b2:	b499                	j	80021ff8 <mix_instruction_1+0x438>
    check_csr_rd("hip", CSR_HIP, 0x4);
    800225b4:	0000e597          	auipc	a1,0xe
    800225b8:	a0458593          	addi	a1,a1,-1532 # 8002ffb8 <__func__.0+0x2c8>
    800225bc:	0000e517          	auipc	a0,0xe
    800225c0:	a4c50513          	addi	a0,a0,-1460 # 80030008 <__func__.0+0x318>
    800225c4:	2c90a0ef          	jal	8002d08c <printf>
    800225c8:	4529                	li	a0,10
    800225ca:	7b0090ef          	jal	8002bd7a <putchar>
    800225ce:	b475                	j	8002207a <mix_instruction_1+0x4ba>
    TEST_ASSERT("load byte address is not aligned successful",         
    800225d0:	0000e517          	auipc	a0,0xe
    800225d4:	a4050513          	addi	a0,a0,-1472 # 80030010 <__func__.0+0x320>
    800225d8:	2b50a0ef          	jal	8002d08c <printf>
    800225dc:	02900513          	li	a0,41
    800225e0:	79a090ef          	jal	8002bd7a <putchar>
    800225e4:	b559                	j	8002246a <mix_instruction_1+0x8aa>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800225e6:	0000e517          	auipc	a0,0xe
    800225ea:	a2a50513          	addi	a0,a0,-1494 # 80030010 <__func__.0+0x320>
    800225ee:	29f0a0ef          	jal	8002d08c <printf>
    800225f2:	02900513          	li	a0,41
    800225f6:	784090ef          	jal	8002bd7a <putchar>
    800225fa:	887ff06f          	j	80021e80 <mix_instruction_1+0x2c0>

00000000800225fe <ebreak_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool ebreak_tests_1() {
    800225fe:	1101                	addi	sp,sp,-32

    TEST_START();
    80022600:	0000d597          	auipc	a1,0xd
    80022604:	03058593          	addi	a1,a1,48 # 8002f630 <__func__.4>
    80022608:	0000e517          	auipc	a0,0xe
    8002260c:	9d050513          	addi	a0,a0,-1584 # 8002ffd8 <__func__.0+0x2e8>
bool ebreak_tests_1() {
    80022610:	ec06                	sd	ra,24(sp)
    80022612:	e822                	sd	s0,16(sp)
    80022614:	e426                	sd	s1,8(sp)
    TEST_START();
    80022616:	2770a0ef          	jal	8002d08c <printf>
    8002261a:	4529                	li	a0,10
    8002261c:	75e090ef          	jal	8002bd7a <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_M);
    80022620:	4511                	li	a0,4
    80022622:	8e7de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022626:	fe6de0ef          	jal	80000e0c <test_setup_except_function>
    asm volatile ("ebreak");
    8002262a:	9002                	ebreak
    
    ebreak();

    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    8002262c:	08200593          	li	a1,130
    80022630:	00016617          	auipc	a2,0x16
    80022634:	ff060613          	addi	a2,a2,-16 # 80038620 <__func__.0+0x8930>
    80022638:	0000e517          	auipc	a0,0xe
    8002263c:	9b850513          	addi	a0,a0,-1608 # 8002fff0 <__func__.0+0x300>
    80022640:	24d0a0ef          	jal	8002d08c <printf>
    80022644:	00036797          	auipc	a5,0x36
    80022648:	9cd7c783          	lbu	a5,-1587(a5) # 80058011 <excpt+0x1>
    8002264c:	00036497          	auipc	s1,0x36
    80022650:	9c448493          	addi	s1,s1,-1596 # 80058010 <excpt>
    80022654:	0000e597          	auipc	a1,0xe
    80022658:	97458593          	addi	a1,a1,-1676 # 8002ffc8 <__func__.0+0x2d8>
    8002265c:	cf89                	beqz	a5,80022676 <ebreak_tests_1+0x78>
    8002265e:	6498                	ld	a4,8(s1)
    80022660:	478d                	li	a5,3
    80022662:	0000e597          	auipc	a1,0xe
    80022666:	95658593          	addi	a1,a1,-1706 # 8002ffb8 <__func__.0+0x2c8>
    8002266a:	00f70663          	beq	a4,a5,80022676 <ebreak_tests_1+0x78>
    8002266e:	0000e597          	auipc	a1,0xe
    80022672:	95a58593          	addi	a1,a1,-1702 # 8002ffc8 <__func__.0+0x2d8>
    80022676:	0000e517          	auipc	a0,0xe
    8002267a:	99250513          	addi	a0,a0,-1646 # 80030008 <__func__.0+0x318>
    8002267e:	20f0a0ef          	jal	8002d08c <printf>
    80022682:	00036797          	auipc	a5,0x36
    80022686:	98f7c783          	lbu	a5,-1649(a5) # 80058011 <excpt+0x1>
    8002268a:	c789                	beqz	a5,80022694 <ebreak_tests_1+0x96>
    8002268c:	6498                	ld	a4,8(s1)
    8002268e:	478d                	li	a5,3
    80022690:	00f70c63          	beq	a4,a5,800226a8 <ebreak_tests_1+0xaa>
    80022694:	0000e517          	auipc	a0,0xe
    80022698:	97c50513          	addi	a0,a0,-1668 # 80030010 <__func__.0+0x320>
    8002269c:	1f10a0ef          	jal	8002d08c <printf>
    800226a0:	02900513          	li	a0,41
    800226a4:	6d6090ef          	jal	8002bd7a <putchar>
    800226a8:	4529                	li	a0,10
    800226aa:	6d0090ef          	jal	8002bd7a <putchar>
    800226ae:	00036417          	auipc	s0,0x36
    800226b2:	96344403          	lbu	s0,-1693(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800226b6:	0000e597          	auipc	a1,0xe
    800226ba:	91258593          	addi	a1,a1,-1774 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    800226be:	cc11                	beqz	s0,800226da <ebreak_tests_1+0xdc>
    800226c0:	6498                	ld	a4,8(s1)
    800226c2:	478d                	li	a5,3
    TEST_END();
    800226c4:	0000e597          	auipc	a1,0xe
    800226c8:	8f458593          	addi	a1,a1,-1804 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    800226cc:	00f70763          	beq	a4,a5,800226da <ebreak_tests_1+0xdc>
    800226d0:	4401                	li	s0,0
    TEST_END();
    800226d2:	0000e597          	auipc	a1,0xe
    800226d6:	8f658593          	addi	a1,a1,-1802 # 8002ffc8 <__func__.0+0x2d8>
    800226da:	0000e517          	auipc	a0,0xe
    800226de:	99650513          	addi	a0,a0,-1642 # 80030070 <__func__.0+0x380>
    800226e2:	1ab0a0ef          	jal	8002d08c <printf>
    800226e6:	4511                	li	a0,4
    800226e8:	821de0ef          	jal	80000f08 <goto_priv>
    800226ec:	9e6df0ef          	jal	800018d2 <reset_state>

}
    800226f0:	60e2                	ld	ra,24(sp)
    800226f2:	8522                	mv	a0,s0
    800226f4:	6442                	ld	s0,16(sp)
    800226f6:	64a2                	ld	s1,8(sp)
    800226f8:	6105                	addi	sp,sp,32
    800226fa:	8082                	ret

00000000800226fc <ebreak_tests_2>:

bool ebreak_tests_2() {
    800226fc:	1101                	addi	sp,sp,-32

    TEST_START();
    800226fe:	0000d597          	auipc	a1,0xd
    80022702:	f4258593          	addi	a1,a1,-190 # 8002f640 <__func__.3>
    80022706:	0000e517          	auipc	a0,0xe
    8002270a:	8d250513          	addi	a0,a0,-1838 # 8002ffd8 <__func__.0+0x2e8>
bool ebreak_tests_2() {
    8002270e:	ec06                	sd	ra,24(sp)
    80022710:	e822                	sd	s0,16(sp)
    80022712:	e426                	sd	s1,8(sp)
    TEST_START();
    80022714:	1790a0ef          	jal	8002d08c <printf>
    80022718:	4529                	li	a0,10
    8002271a:	660090ef          	jal	8002bd7a <putchar>

    //vs模式下执行ebreak指令
    goto_priv(PRIV_VS);
    8002271e:	4509                	li	a0,2
    80022720:	fe8de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022724:	ee8de0ef          	jal	80000e0c <test_setup_except_function>
    80022728:	9002                	ebreak

    ebreak();

    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    8002272a:	08200593          	li	a1,130
    8002272e:	00016617          	auipc	a2,0x16
    80022732:	f1a60613          	addi	a2,a2,-230 # 80038648 <__func__.0+0x8958>
    80022736:	0000e517          	auipc	a0,0xe
    8002273a:	8ba50513          	addi	a0,a0,-1862 # 8002fff0 <__func__.0+0x300>
    8002273e:	14f0a0ef          	jal	8002d08c <printf>
    80022742:	00036797          	auipc	a5,0x36
    80022746:	8cf7c783          	lbu	a5,-1841(a5) # 80058011 <excpt+0x1>
    8002274a:	00036497          	auipc	s1,0x36
    8002274e:	8c648493          	addi	s1,s1,-1850 # 80058010 <excpt>
    80022752:	0000e597          	auipc	a1,0xe
    80022756:	87658593          	addi	a1,a1,-1930 # 8002ffc8 <__func__.0+0x2d8>
    8002275a:	cf89                	beqz	a5,80022774 <ebreak_tests_2+0x78>
    8002275c:	6498                	ld	a4,8(s1)
    8002275e:	478d                	li	a5,3
    80022760:	0000e597          	auipc	a1,0xe
    80022764:	85858593          	addi	a1,a1,-1960 # 8002ffb8 <__func__.0+0x2c8>
    80022768:	00f70663          	beq	a4,a5,80022774 <ebreak_tests_2+0x78>
    8002276c:	0000e597          	auipc	a1,0xe
    80022770:	85c58593          	addi	a1,a1,-1956 # 8002ffc8 <__func__.0+0x2d8>
    80022774:	0000e517          	auipc	a0,0xe
    80022778:	89450513          	addi	a0,a0,-1900 # 80030008 <__func__.0+0x318>
    8002277c:	1110a0ef          	jal	8002d08c <printf>
    80022780:	00036797          	auipc	a5,0x36
    80022784:	8917c783          	lbu	a5,-1903(a5) # 80058011 <excpt+0x1>
    80022788:	c789                	beqz	a5,80022792 <ebreak_tests_2+0x96>
    8002278a:	6498                	ld	a4,8(s1)
    8002278c:	478d                	li	a5,3
    8002278e:	00f70c63          	beq	a4,a5,800227a6 <ebreak_tests_2+0xaa>
    80022792:	0000e517          	auipc	a0,0xe
    80022796:	87e50513          	addi	a0,a0,-1922 # 80030010 <__func__.0+0x320>
    8002279a:	0f30a0ef          	jal	8002d08c <printf>
    8002279e:	02900513          	li	a0,41
    800227a2:	5d8090ef          	jal	8002bd7a <putchar>
    800227a6:	4529                	li	a0,10
    800227a8:	5d2090ef          	jal	8002bd7a <putchar>
    800227ac:	00036417          	auipc	s0,0x36
    800227b0:	86544403          	lbu	s0,-1947(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800227b4:	0000e597          	auipc	a1,0xe
    800227b8:	81458593          	addi	a1,a1,-2028 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    800227bc:	cc11                	beqz	s0,800227d8 <ebreak_tests_2+0xdc>
    800227be:	6498                	ld	a4,8(s1)
    800227c0:	478d                	li	a5,3
    TEST_END();
    800227c2:	0000d597          	auipc	a1,0xd
    800227c6:	7f658593          	addi	a1,a1,2038 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    800227ca:	00f70763          	beq	a4,a5,800227d8 <ebreak_tests_2+0xdc>
    800227ce:	4401                	li	s0,0
    TEST_END();
    800227d0:	0000d597          	auipc	a1,0xd
    800227d4:	7f858593          	addi	a1,a1,2040 # 8002ffc8 <__func__.0+0x2d8>
    800227d8:	0000e517          	auipc	a0,0xe
    800227dc:	89850513          	addi	a0,a0,-1896 # 80030070 <__func__.0+0x380>
    800227e0:	0ad0a0ef          	jal	8002d08c <printf>
    800227e4:	4511                	li	a0,4
    800227e6:	f22de0ef          	jal	80000f08 <goto_priv>
    800227ea:	8e8df0ef          	jal	800018d2 <reset_state>

}
    800227ee:	60e2                	ld	ra,24(sp)
    800227f0:	8522                	mv	a0,s0
    800227f2:	6442                	ld	s0,16(sp)
    800227f4:	64a2                	ld	s1,8(sp)
    800227f6:	6105                	addi	sp,sp,32
    800227f8:	8082                	ret

00000000800227fa <ebreak_tests_3>:

bool ebreak_tests_3() {
    800227fa:	1101                	addi	sp,sp,-32

    TEST_START();
    800227fc:	0000d597          	auipc	a1,0xd
    80022800:	e5458593          	addi	a1,a1,-428 # 8002f650 <__func__.2>
    80022804:	0000d517          	auipc	a0,0xd
    80022808:	7d450513          	addi	a0,a0,2004 # 8002ffd8 <__func__.0+0x2e8>
bool ebreak_tests_3() {
    8002280c:	ec06                	sd	ra,24(sp)
    8002280e:	e822                	sd	s0,16(sp)
    80022810:	e426                	sd	s1,8(sp)
    TEST_START();
    80022812:	07b0a0ef          	jal	8002d08c <printf>
    80022816:	4529                	li	a0,10
    80022818:	562090ef          	jal	8002bd7a <putchar>

    //HS模式下执行ebreak指令
    goto_priv(PRIV_HS);
    8002281c:	450d                	li	a0,3
    8002281e:	eeade0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022822:	deade0ef          	jal	80000e0c <test_setup_except_function>
    80022826:	9002                	ebreak

    ebreak();

    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    80022828:	08200593          	li	a1,130
    8002282c:	00016617          	auipc	a2,0x16
    80022830:	e4460613          	addi	a2,a2,-444 # 80038670 <__func__.0+0x8980>
    80022834:	0000d517          	auipc	a0,0xd
    80022838:	7bc50513          	addi	a0,a0,1980 # 8002fff0 <__func__.0+0x300>
    8002283c:	0510a0ef          	jal	8002d08c <printf>
    80022840:	00035797          	auipc	a5,0x35
    80022844:	7d17c783          	lbu	a5,2001(a5) # 80058011 <excpt+0x1>
    80022848:	00035497          	auipc	s1,0x35
    8002284c:	7c848493          	addi	s1,s1,1992 # 80058010 <excpt>
    80022850:	0000d597          	auipc	a1,0xd
    80022854:	77858593          	addi	a1,a1,1912 # 8002ffc8 <__func__.0+0x2d8>
    80022858:	cf89                	beqz	a5,80022872 <ebreak_tests_3+0x78>
    8002285a:	6498                	ld	a4,8(s1)
    8002285c:	478d                	li	a5,3
    8002285e:	0000d597          	auipc	a1,0xd
    80022862:	75a58593          	addi	a1,a1,1882 # 8002ffb8 <__func__.0+0x2c8>
    80022866:	00f70663          	beq	a4,a5,80022872 <ebreak_tests_3+0x78>
    8002286a:	0000d597          	auipc	a1,0xd
    8002286e:	75e58593          	addi	a1,a1,1886 # 8002ffc8 <__func__.0+0x2d8>
    80022872:	0000d517          	auipc	a0,0xd
    80022876:	79650513          	addi	a0,a0,1942 # 80030008 <__func__.0+0x318>
    8002287a:	0130a0ef          	jal	8002d08c <printf>
    8002287e:	00035797          	auipc	a5,0x35
    80022882:	7937c783          	lbu	a5,1939(a5) # 80058011 <excpt+0x1>
    80022886:	c789                	beqz	a5,80022890 <ebreak_tests_3+0x96>
    80022888:	6498                	ld	a4,8(s1)
    8002288a:	478d                	li	a5,3
    8002288c:	00f70c63          	beq	a4,a5,800228a4 <ebreak_tests_3+0xaa>
    80022890:	0000d517          	auipc	a0,0xd
    80022894:	78050513          	addi	a0,a0,1920 # 80030010 <__func__.0+0x320>
    80022898:	7f40a0ef          	jal	8002d08c <printf>
    8002289c:	02900513          	li	a0,41
    800228a0:	4da090ef          	jal	8002bd7a <putchar>
    800228a4:	4529                	li	a0,10
    800228a6:	4d4090ef          	jal	8002bd7a <putchar>
    800228aa:	00035417          	auipc	s0,0x35
    800228ae:	76744403          	lbu	s0,1895(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800228b2:	0000d597          	auipc	a1,0xd
    800228b6:	71658593          	addi	a1,a1,1814 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    800228ba:	cc11                	beqz	s0,800228d6 <ebreak_tests_3+0xdc>
    800228bc:	6498                	ld	a4,8(s1)
    800228be:	478d                	li	a5,3
    TEST_END();
    800228c0:	0000d597          	auipc	a1,0xd
    800228c4:	6f858593          	addi	a1,a1,1784 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    800228c8:	00f70763          	beq	a4,a5,800228d6 <ebreak_tests_3+0xdc>
    800228cc:	4401                	li	s0,0
    TEST_END();
    800228ce:	0000d597          	auipc	a1,0xd
    800228d2:	6fa58593          	addi	a1,a1,1786 # 8002ffc8 <__func__.0+0x2d8>
    800228d6:	0000d517          	auipc	a0,0xd
    800228da:	79a50513          	addi	a0,a0,1946 # 80030070 <__func__.0+0x380>
    800228de:	7ae0a0ef          	jal	8002d08c <printf>
    800228e2:	4511                	li	a0,4
    800228e4:	e24de0ef          	jal	80000f08 <goto_priv>
    800228e8:	febde0ef          	jal	800018d2 <reset_state>

}
    800228ec:	60e2                	ld	ra,24(sp)
    800228ee:	8522                	mv	a0,s0
    800228f0:	6442                	ld	s0,16(sp)
    800228f2:	64a2                	ld	s1,8(sp)
    800228f4:	6105                	addi	sp,sp,32
    800228f6:	8082                	ret

00000000800228f8 <ebreak_tests_4>:

bool ebreak_tests_4() {
    800228f8:	1101                	addi	sp,sp,-32

    TEST_START();
    800228fa:	0000d597          	auipc	a1,0xd
    800228fe:	d6658593          	addi	a1,a1,-666 # 8002f660 <__func__.1>
    80022902:	0000d517          	auipc	a0,0xd
    80022906:	6d650513          	addi	a0,a0,1750 # 8002ffd8 <__func__.0+0x2e8>
bool ebreak_tests_4() {
    8002290a:	ec06                	sd	ra,24(sp)
    8002290c:	e822                	sd	s0,16(sp)
    8002290e:	e426                	sd	s1,8(sp)
    TEST_START();
    80022910:	77c0a0ef          	jal	8002d08c <printf>
    80022914:	4529                	li	a0,10
    80022916:	464090ef          	jal	8002bd7a <putchar>

    //HU模式下执行ebreak指令
    goto_priv(PRIV_HU);
    8002291a:	4505                	li	a0,1
    8002291c:	decde0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022920:	cecde0ef          	jal	80000e0c <test_setup_except_function>
    80022924:	9002                	ebreak

    ebreak();

    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    80022926:	08200593          	li	a1,130
    8002292a:	00016617          	auipc	a2,0x16
    8002292e:	d6e60613          	addi	a2,a2,-658 # 80038698 <__func__.0+0x89a8>
    80022932:	0000d517          	auipc	a0,0xd
    80022936:	6be50513          	addi	a0,a0,1726 # 8002fff0 <__func__.0+0x300>
    8002293a:	7520a0ef          	jal	8002d08c <printf>
    8002293e:	00035797          	auipc	a5,0x35
    80022942:	6d37c783          	lbu	a5,1747(a5) # 80058011 <excpt+0x1>
    80022946:	00035497          	auipc	s1,0x35
    8002294a:	6ca48493          	addi	s1,s1,1738 # 80058010 <excpt>
    8002294e:	0000d597          	auipc	a1,0xd
    80022952:	67a58593          	addi	a1,a1,1658 # 8002ffc8 <__func__.0+0x2d8>
    80022956:	cf89                	beqz	a5,80022970 <ebreak_tests_4+0x78>
    80022958:	6498                	ld	a4,8(s1)
    8002295a:	478d                	li	a5,3
    8002295c:	0000d597          	auipc	a1,0xd
    80022960:	65c58593          	addi	a1,a1,1628 # 8002ffb8 <__func__.0+0x2c8>
    80022964:	00f70663          	beq	a4,a5,80022970 <ebreak_tests_4+0x78>
    80022968:	0000d597          	auipc	a1,0xd
    8002296c:	66058593          	addi	a1,a1,1632 # 8002ffc8 <__func__.0+0x2d8>
    80022970:	0000d517          	auipc	a0,0xd
    80022974:	69850513          	addi	a0,a0,1688 # 80030008 <__func__.0+0x318>
    80022978:	7140a0ef          	jal	8002d08c <printf>
    8002297c:	00035797          	auipc	a5,0x35
    80022980:	6957c783          	lbu	a5,1685(a5) # 80058011 <excpt+0x1>
    80022984:	c789                	beqz	a5,8002298e <ebreak_tests_4+0x96>
    80022986:	6498                	ld	a4,8(s1)
    80022988:	478d                	li	a5,3
    8002298a:	00f70c63          	beq	a4,a5,800229a2 <ebreak_tests_4+0xaa>
    8002298e:	0000d517          	auipc	a0,0xd
    80022992:	68250513          	addi	a0,a0,1666 # 80030010 <__func__.0+0x320>
    80022996:	6f60a0ef          	jal	8002d08c <printf>
    8002299a:	02900513          	li	a0,41
    8002299e:	3dc090ef          	jal	8002bd7a <putchar>
    800229a2:	4529                	li	a0,10
    800229a4:	3d6090ef          	jal	8002bd7a <putchar>
    800229a8:	00035417          	auipc	s0,0x35
    800229ac:	66944403          	lbu	s0,1641(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800229b0:	0000d597          	auipc	a1,0xd
    800229b4:	61858593          	addi	a1,a1,1560 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    800229b8:	cc11                	beqz	s0,800229d4 <ebreak_tests_4+0xdc>
    800229ba:	6498                	ld	a4,8(s1)
    800229bc:	478d                	li	a5,3
    TEST_END();
    800229be:	0000d597          	auipc	a1,0xd
    800229c2:	5fa58593          	addi	a1,a1,1530 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    800229c6:	00f70763          	beq	a4,a5,800229d4 <ebreak_tests_4+0xdc>
    800229ca:	4401                	li	s0,0
    TEST_END();
    800229cc:	0000d597          	auipc	a1,0xd
    800229d0:	5fc58593          	addi	a1,a1,1532 # 8002ffc8 <__func__.0+0x2d8>
    800229d4:	0000d517          	auipc	a0,0xd
    800229d8:	69c50513          	addi	a0,a0,1692 # 80030070 <__func__.0+0x380>
    800229dc:	6b00a0ef          	jal	8002d08c <printf>
    800229e0:	4511                	li	a0,4
    800229e2:	d26de0ef          	jal	80000f08 <goto_priv>
    800229e6:	eedde0ef          	jal	800018d2 <reset_state>

}
    800229ea:	60e2                	ld	ra,24(sp)
    800229ec:	8522                	mv	a0,s0
    800229ee:	6442                	ld	s0,16(sp)
    800229f0:	64a2                	ld	s1,8(sp)
    800229f2:	6105                	addi	sp,sp,32
    800229f4:	8082                	ret

00000000800229f6 <ebreak_tests_5>:

bool ebreak_tests_5() {
    800229f6:	1101                	addi	sp,sp,-32

    TEST_START();
    800229f8:	0000d597          	auipc	a1,0xd
    800229fc:	c7858593          	addi	a1,a1,-904 # 8002f670 <__func__.0>
    80022a00:	0000d517          	auipc	a0,0xd
    80022a04:	5d850513          	addi	a0,a0,1496 # 8002ffd8 <__func__.0+0x2e8>
bool ebreak_tests_5() {
    80022a08:	ec06                	sd	ra,24(sp)
    80022a0a:	e822                	sd	s0,16(sp)
    80022a0c:	e426                	sd	s1,8(sp)
    TEST_START();
    80022a0e:	67e0a0ef          	jal	8002d08c <printf>
    80022a12:	4529                	li	a0,10
    80022a14:	366090ef          	jal	8002bd7a <putchar>

    //VU模式下执行ebreak指令
    goto_priv(PRIV_VU);
    80022a18:	4501                	li	a0,0
    80022a1a:	ceede0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022a1e:	beede0ef          	jal	80000e0c <test_setup_except_function>
    80022a22:	9002                	ebreak

    ebreak();

    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80022a24:	08200593          	li	a1,130
    80022a28:	00016617          	auipc	a2,0x16
    80022a2c:	c9860613          	addi	a2,a2,-872 # 800386c0 <__func__.0+0x89d0>
    80022a30:	0000d517          	auipc	a0,0xd
    80022a34:	5c050513          	addi	a0,a0,1472 # 8002fff0 <__func__.0+0x300>
    80022a38:	6540a0ef          	jal	8002d08c <printf>
    80022a3c:	00035797          	auipc	a5,0x35
    80022a40:	5d57c783          	lbu	a5,1493(a5) # 80058011 <excpt+0x1>
    80022a44:	00035497          	auipc	s1,0x35
    80022a48:	5cc48493          	addi	s1,s1,1484 # 80058010 <excpt>
    80022a4c:	0000d597          	auipc	a1,0xd
    80022a50:	57c58593          	addi	a1,a1,1404 # 8002ffc8 <__func__.0+0x2d8>
    80022a54:	cf89                	beqz	a5,80022a6e <ebreak_tests_5+0x78>
    80022a56:	6498                	ld	a4,8(s1)
    80022a58:	478d                	li	a5,3
    80022a5a:	0000d597          	auipc	a1,0xd
    80022a5e:	55e58593          	addi	a1,a1,1374 # 8002ffb8 <__func__.0+0x2c8>
    80022a62:	00f70663          	beq	a4,a5,80022a6e <ebreak_tests_5+0x78>
    80022a66:	0000d597          	auipc	a1,0xd
    80022a6a:	56258593          	addi	a1,a1,1378 # 8002ffc8 <__func__.0+0x2d8>
    80022a6e:	0000d517          	auipc	a0,0xd
    80022a72:	59a50513          	addi	a0,a0,1434 # 80030008 <__func__.0+0x318>
    80022a76:	6160a0ef          	jal	8002d08c <printf>
    80022a7a:	00035797          	auipc	a5,0x35
    80022a7e:	5977c783          	lbu	a5,1431(a5) # 80058011 <excpt+0x1>
    80022a82:	c789                	beqz	a5,80022a8c <ebreak_tests_5+0x96>
    80022a84:	6498                	ld	a4,8(s1)
    80022a86:	478d                	li	a5,3
    80022a88:	00f70c63          	beq	a4,a5,80022aa0 <ebreak_tests_5+0xaa>
    80022a8c:	0000d517          	auipc	a0,0xd
    80022a90:	58450513          	addi	a0,a0,1412 # 80030010 <__func__.0+0x320>
    80022a94:	5f80a0ef          	jal	8002d08c <printf>
    80022a98:	02900513          	li	a0,41
    80022a9c:	2de090ef          	jal	8002bd7a <putchar>
    80022aa0:	4529                	li	a0,10
    80022aa2:	2d8090ef          	jal	8002bd7a <putchar>
    80022aa6:	00035417          	auipc	s0,0x35
    80022aaa:	56b44403          	lbu	s0,1387(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    80022aae:	0000d597          	auipc	a1,0xd
    80022ab2:	51a58593          	addi	a1,a1,1306 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80022ab6:	cc11                	beqz	s0,80022ad2 <ebreak_tests_5+0xdc>
    80022ab8:	6498                	ld	a4,8(s1)
    80022aba:	478d                	li	a5,3
    TEST_END();
    80022abc:	0000d597          	auipc	a1,0xd
    80022ac0:	4fc58593          	addi	a1,a1,1276 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80022ac4:	00f70763          	beq	a4,a5,80022ad2 <ebreak_tests_5+0xdc>
    80022ac8:	4401                	li	s0,0
    TEST_END();
    80022aca:	0000d597          	auipc	a1,0xd
    80022ace:	4fe58593          	addi	a1,a1,1278 # 8002ffc8 <__func__.0+0x2d8>
    80022ad2:	0000d517          	auipc	a0,0xd
    80022ad6:	59e50513          	addi	a0,a0,1438 # 80030070 <__func__.0+0x380>
    80022ada:	5b20a0ef          	jal	8002d08c <printf>
    80022ade:	4511                	li	a0,4
    80022ae0:	c28de0ef          	jal	80000f08 <goto_priv>
    80022ae4:	defde0ef          	jal	800018d2 <reset_state>

    80022ae8:	60e2                	ld	ra,24(sp)
    80022aea:	8522                	mv	a0,s0
    80022aec:	6442                	ld	s0,16(sp)
    80022aee:	64a2                	ld	s1,8(sp)
    80022af0:	6105                	addi	sp,sp,32
    80022af2:	8082                	ret

0000000080022af4 <stateen_C_test_1>:
#include <rvh_test.h>


bool stateen_C_test_1(){
    80022af4:	1101                	addi	sp,sp,-32

    TEST_START();
    80022af6:	0000d597          	auipc	a1,0xd
    80022afa:	b8a58593          	addi	a1,a1,-1142 # 8002f680 <__func__.36>
    80022afe:	0000d517          	auipc	a0,0xd
    80022b02:	4da50513          	addi	a0,a0,1242 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_C_test_1(){
    80022b06:	ec06                	sd	ra,24(sp)
    80022b08:	e822                	sd	s0,16(sp)
    80022b0a:	e426                	sd	s1,8(sp)
    TEST_START();
    80022b0c:	5800a0ef          	jal	8002d08c <printf>
    80022b10:	4529                	li	a0,10
    80022b12:	268090ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80022b16:	4511                	li	a0,4
    80022b18:	bf0de0ef          	jal	80000f08 <goto_priv>
    //当mstateen.C=0,hu mode 不可访问自定义寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022b1c:	30c0f073          	csrci	mstateen0,1

    goto_priv(PRIV_HU);
    80022b20:	4505                	li	a0,1
    80022b22:	be6de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022b26:	ae6de0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C2);
    80022b2a:	5c2027f3          	csrr	a5,0x5c2

    excpt_info();
    80022b2e:	d20de0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022b32:	08200593          	li	a1,130
    80022b36:	00016617          	auipc	a2,0x16
    80022b3a:	bb260613          	addi	a2,a2,-1102 # 800386e8 <__func__.0+0x89f8>
    80022b3e:	0000d517          	auipc	a0,0xd
    80022b42:	4b250513          	addi	a0,a0,1202 # 8002fff0 <__func__.0+0x300>
    80022b46:	5460a0ef          	jal	8002d08c <printf>
    80022b4a:	00035797          	auipc	a5,0x35
    80022b4e:	4c77c783          	lbu	a5,1223(a5) # 80058011 <excpt+0x1>
    80022b52:	00035497          	auipc	s1,0x35
    80022b56:	4be48493          	addi	s1,s1,1214 # 80058010 <excpt>
    80022b5a:	0000d597          	auipc	a1,0xd
    80022b5e:	46e58593          	addi	a1,a1,1134 # 8002ffc8 <__func__.0+0x2d8>
    80022b62:	cf89                	beqz	a5,80022b7c <stateen_C_test_1+0x88>
    80022b64:	6498                	ld	a4,8(s1)
    80022b66:	4789                	li	a5,2
    80022b68:	0000d597          	auipc	a1,0xd
    80022b6c:	45058593          	addi	a1,a1,1104 # 8002ffb8 <__func__.0+0x2c8>
    80022b70:	00f70663          	beq	a4,a5,80022b7c <stateen_C_test_1+0x88>
    80022b74:	0000d597          	auipc	a1,0xd
    80022b78:	45458593          	addi	a1,a1,1108 # 8002ffc8 <__func__.0+0x2d8>
    80022b7c:	0000d517          	auipc	a0,0xd
    80022b80:	48c50513          	addi	a0,a0,1164 # 80030008 <__func__.0+0x318>
    80022b84:	5080a0ef          	jal	8002d08c <printf>
    80022b88:	00035797          	auipc	a5,0x35
    80022b8c:	4897c783          	lbu	a5,1161(a5) # 80058011 <excpt+0x1>
    80022b90:	c789                	beqz	a5,80022b9a <stateen_C_test_1+0xa6>
    80022b92:	6498                	ld	a4,8(s1)
    80022b94:	4789                	li	a5,2
    80022b96:	00f70c63          	beq	a4,a5,80022bae <stateen_C_test_1+0xba>
    80022b9a:	0000d517          	auipc	a0,0xd
    80022b9e:	47650513          	addi	a0,a0,1142 # 80030010 <__func__.0+0x320>
    80022ba2:	4ea0a0ef          	jal	8002d08c <printf>
    80022ba6:	02900513          	li	a0,41
    80022baa:	1d0090ef          	jal	8002bd7a <putchar>
    80022bae:	4529                	li	a0,10
    80022bb0:	1ca090ef          	jal	8002bd7a <putchar>
    80022bb4:	00035417          	auipc	s0,0x35
    80022bb8:	45d44403          	lbu	s0,1117(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80022bbc:	0000d597          	auipc	a1,0xd
    80022bc0:	40c58593          	addi	a1,a1,1036 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022bc4:	cc11                	beqz	s0,80022be0 <stateen_C_test_1+0xec>
    80022bc6:	6498                	ld	a4,8(s1)
    80022bc8:	4789                	li	a5,2
    TEST_END();
    80022bca:	0000d597          	auipc	a1,0xd
    80022bce:	3ee58593          	addi	a1,a1,1006 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022bd2:	00f70763          	beq	a4,a5,80022be0 <stateen_C_test_1+0xec>
    80022bd6:	4401                	li	s0,0
    TEST_END();
    80022bd8:	0000d597          	auipc	a1,0xd
    80022bdc:	3f058593          	addi	a1,a1,1008 # 8002ffc8 <__func__.0+0x2d8>
    80022be0:	0000d517          	auipc	a0,0xd
    80022be4:	49050513          	addi	a0,a0,1168 # 80030070 <__func__.0+0x380>
    80022be8:	4a40a0ef          	jal	8002d08c <printf>
    80022bec:	4511                	li	a0,4
    80022bee:	b1ade0ef          	jal	80000f08 <goto_priv>
    80022bf2:	ce1de0ef          	jal	800018d2 <reset_state>

}
    80022bf6:	60e2                	ld	ra,24(sp)
    80022bf8:	8522                	mv	a0,s0
    80022bfa:	6442                	ld	s0,16(sp)
    80022bfc:	64a2                	ld	s1,8(sp)
    80022bfe:	6105                	addi	sp,sp,32
    80022c00:	8082                	ret

0000000080022c02 <stateen_C_test_2>:

bool stateen_C_test_2(){
    80022c02:	1101                	addi	sp,sp,-32

    TEST_START();
    80022c04:	0000d597          	auipc	a1,0xd
    80022c08:	a9458593          	addi	a1,a1,-1388 # 8002f698 <__func__.35>
    80022c0c:	0000d517          	auipc	a0,0xd
    80022c10:	3cc50513          	addi	a0,a0,972 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_C_test_2(){
    80022c14:	ec06                	sd	ra,24(sp)
    80022c16:	e822                	sd	s0,16(sp)
    80022c18:	e426                	sd	s1,8(sp)
    TEST_START();
    80022c1a:	4720a0ef          	jal	8002d08c <printf>
    80022c1e:	4529                	li	a0,10
    80022c20:	15a090ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80022c24:	4511                	li	a0,4
    80022c26:	ae2de0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022c2a:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022c2e:	60c0f073          	csrci	hstateen0,1

    //当mstateen.C=1,hstateen.C=0,v=1时不可访问自定义寄存器
    goto_priv(PRIV_VU);
    80022c32:	4501                	li	a0,0
    80022c34:	ad4de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022c38:	9d4de0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C3);
    80022c3c:	5c3027f3          	csrr	a5,0x5c3

    excpt_info();
    80022c40:	c0ede0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022c44:	08200593          	li	a1,130
    80022c48:	00016617          	auipc	a2,0x16
    80022c4c:	af060613          	addi	a2,a2,-1296 # 80038738 <__func__.0+0x8a48>
    80022c50:	0000d517          	auipc	a0,0xd
    80022c54:	3a050513          	addi	a0,a0,928 # 8002fff0 <__func__.0+0x300>
    80022c58:	4340a0ef          	jal	8002d08c <printf>
    80022c5c:	00035797          	auipc	a5,0x35
    80022c60:	3b57c783          	lbu	a5,949(a5) # 80058011 <excpt+0x1>
    80022c64:	00035497          	auipc	s1,0x35
    80022c68:	3ac48493          	addi	s1,s1,940 # 80058010 <excpt>
    80022c6c:	0000d597          	auipc	a1,0xd
    80022c70:	35c58593          	addi	a1,a1,860 # 8002ffc8 <__func__.0+0x2d8>
    80022c74:	cf89                	beqz	a5,80022c8e <stateen_C_test_2+0x8c>
    80022c76:	6498                	ld	a4,8(s1)
    80022c78:	47d9                	li	a5,22
    80022c7a:	0000d597          	auipc	a1,0xd
    80022c7e:	33e58593          	addi	a1,a1,830 # 8002ffb8 <__func__.0+0x2c8>
    80022c82:	00f70663          	beq	a4,a5,80022c8e <stateen_C_test_2+0x8c>
    80022c86:	0000d597          	auipc	a1,0xd
    80022c8a:	34258593          	addi	a1,a1,834 # 8002ffc8 <__func__.0+0x2d8>
    80022c8e:	0000d517          	auipc	a0,0xd
    80022c92:	37a50513          	addi	a0,a0,890 # 80030008 <__func__.0+0x318>
    80022c96:	3f60a0ef          	jal	8002d08c <printf>
    80022c9a:	00035797          	auipc	a5,0x35
    80022c9e:	3777c783          	lbu	a5,887(a5) # 80058011 <excpt+0x1>
    80022ca2:	c789                	beqz	a5,80022cac <stateen_C_test_2+0xaa>
    80022ca4:	6498                	ld	a4,8(s1)
    80022ca6:	47d9                	li	a5,22
    80022ca8:	00f70c63          	beq	a4,a5,80022cc0 <stateen_C_test_2+0xbe>
    80022cac:	0000d517          	auipc	a0,0xd
    80022cb0:	36450513          	addi	a0,a0,868 # 80030010 <__func__.0+0x320>
    80022cb4:	3d80a0ef          	jal	8002d08c <printf>
    80022cb8:	02900513          	li	a0,41
    80022cbc:	0be090ef          	jal	8002bd7a <putchar>
    80022cc0:	4529                	li	a0,10
    80022cc2:	0b8090ef          	jal	8002bd7a <putchar>
    80022cc6:	00035417          	auipc	s0,0x35
    80022cca:	34b44403          	lbu	s0,843(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80022cce:	0000d597          	auipc	a1,0xd
    80022cd2:	2fa58593          	addi	a1,a1,762 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022cd6:	cc11                	beqz	s0,80022cf2 <stateen_C_test_2+0xf0>
    80022cd8:	6498                	ld	a4,8(s1)
    80022cda:	47d9                	li	a5,22
    TEST_END();
    80022cdc:	0000d597          	auipc	a1,0xd
    80022ce0:	2dc58593          	addi	a1,a1,732 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022ce4:	00f70763          	beq	a4,a5,80022cf2 <stateen_C_test_2+0xf0>
    80022ce8:	4401                	li	s0,0
    TEST_END();
    80022cea:	0000d597          	auipc	a1,0xd
    80022cee:	2de58593          	addi	a1,a1,734 # 8002ffc8 <__func__.0+0x2d8>
    80022cf2:	0000d517          	auipc	a0,0xd
    80022cf6:	37e50513          	addi	a0,a0,894 # 80030070 <__func__.0+0x380>
    80022cfa:	3920a0ef          	jal	8002d08c <printf>
    80022cfe:	4511                	li	a0,4
    80022d00:	a08de0ef          	jal	80000f08 <goto_priv>
    80022d04:	bcfde0ef          	jal	800018d2 <reset_state>

}
    80022d08:	60e2                	ld	ra,24(sp)
    80022d0a:	8522                	mv	a0,s0
    80022d0c:	6442                	ld	s0,16(sp)
    80022d0e:	64a2                	ld	s1,8(sp)
    80022d10:	6105                	addi	sp,sp,32
    80022d12:	8082                	ret

0000000080022d14 <stateen_C_test_3>:

bool stateen_C_test_3(){
    80022d14:	1141                	addi	sp,sp,-16

    //当mstateen.C=0,m mode 可访问自定义寄存器

    TEST_START();
    80022d16:	0000d597          	auipc	a1,0xd
    80022d1a:	99a58593          	addi	a1,a1,-1638 # 8002f6b0 <__func__.34>
    80022d1e:	0000d517          	auipc	a0,0xd
    80022d22:	2ba50513          	addi	a0,a0,698 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_C_test_3(){
    80022d26:	e406                	sd	ra,8(sp)
    80022d28:	e022                	sd	s0,0(sp)
    TEST_START();
    80022d2a:	3620a0ef          	jal	8002d08c <printf>
    80022d2e:	4529                	li	a0,10
    80022d30:	04a090ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80022d34:	4511                	li	a0,4
    80022d36:	9d2de0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022d3a:	30c0f073          	csrci	mstateen0,1
    goto_priv(PRIV_M);
    80022d3e:	4511                	li	a0,4
    80022d40:	9c8de0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022d44:	8c8de0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C1);
    80022d48:	5c1027f3          	csrr	a5,0x5c1

    excpt_info();
    80022d4c:	b02de0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022d50:	08200593          	li	a1,130
    80022d54:	00016617          	auipc	a2,0x16
    80022d58:	a3460613          	addi	a2,a2,-1484 # 80038788 <__func__.0+0x8a98>
    80022d5c:	0000d517          	auipc	a0,0xd
    80022d60:	29450513          	addi	a0,a0,660 # 8002fff0 <__func__.0+0x300>
    80022d64:	3280a0ef          	jal	8002d08c <printf>
    80022d68:	00035797          	auipc	a5,0x35
    80022d6c:	2a97c783          	lbu	a5,681(a5) # 80058011 <excpt+0x1>
    80022d70:	0000d597          	auipc	a1,0xd
    80022d74:	24858593          	addi	a1,a1,584 # 8002ffb8 <__func__.0+0x2c8>
    80022d78:	c789                	beqz	a5,80022d82 <stateen_C_test_3+0x6e>
    80022d7a:	0000d597          	auipc	a1,0xd
    80022d7e:	24e58593          	addi	a1,a1,590 # 8002ffc8 <__func__.0+0x2d8>
    80022d82:	0000d517          	auipc	a0,0xd
    80022d86:	28650513          	addi	a0,a0,646 # 80030008 <__func__.0+0x318>
    80022d8a:	3020a0ef          	jal	8002d08c <printf>
    80022d8e:	00035797          	auipc	a5,0x35
    80022d92:	2837c783          	lbu	a5,643(a5) # 80058011 <excpt+0x1>
    80022d96:	e7a1                	bnez	a5,80022dde <stateen_C_test_3+0xca>
    80022d98:	4529                	li	a0,10
    80022d9a:	7e1080ef          	jal	8002bd7a <putchar>
    80022d9e:	00035797          	auipc	a5,0x35
    80022da2:	2737c783          	lbu	a5,627(a5) # 80058011 <excpt+0x1>
    80022da6:	e795                	bnez	a5,80022dd2 <stateen_C_test_3+0xbe>
    80022da8:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80022daa:	0000d597          	auipc	a1,0xd
    80022dae:	20e58593          	addi	a1,a1,526 # 8002ffb8 <__func__.0+0x2c8>
    80022db2:	0000d517          	auipc	a0,0xd
    80022db6:	2be50513          	addi	a0,a0,702 # 80030070 <__func__.0+0x380>
    80022dba:	2d20a0ef          	jal	8002d08c <printf>
    80022dbe:	4511                	li	a0,4
    80022dc0:	948de0ef          	jal	80000f08 <goto_priv>
    80022dc4:	b0fde0ef          	jal	800018d2 <reset_state>

}
    80022dc8:	60a2                	ld	ra,8(sp)
    80022dca:	8522                	mv	a0,s0
    80022dcc:	6402                	ld	s0,0(sp)
    80022dce:	0141                	addi	sp,sp,16
    80022dd0:	8082                	ret
    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022dd2:	4401                	li	s0,0
    TEST_END();
    80022dd4:	0000d597          	auipc	a1,0xd
    80022dd8:	1f458593          	addi	a1,a1,500 # 8002ffc8 <__func__.0+0x2d8>
    80022ddc:	bfd9                	j	80022db2 <stateen_C_test_3+0x9e>
    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022dde:	0000d517          	auipc	a0,0xd
    80022de2:	23250513          	addi	a0,a0,562 # 80030010 <__func__.0+0x320>
    80022de6:	2a60a0ef          	jal	8002d08c <printf>
    80022dea:	02900513          	li	a0,41
    80022dee:	78d080ef          	jal	8002bd7a <putchar>
    80022df2:	b75d                	j	80022d98 <stateen_C_test_3+0x84>

0000000080022df4 <stateen_C_test_4>:

bool stateen_C_test_4(){
    80022df4:	1101                	addi	sp,sp,-32

    //当mstateen.C=1,hstateen.C=0,v=1时不可访问自定义寄存器

    TEST_START();
    80022df6:	0000d597          	auipc	a1,0xd
    80022dfa:	8d258593          	addi	a1,a1,-1838 # 8002f6c8 <__func__.33>
    80022dfe:	0000d517          	auipc	a0,0xd
    80022e02:	1da50513          	addi	a0,a0,474 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_C_test_4(){
    80022e06:	ec06                	sd	ra,24(sp)
    80022e08:	e822                	sd	s0,16(sp)
    80022e0a:	e426                	sd	s1,8(sp)
    TEST_START();
    80022e0c:	2800a0ef          	jal	8002d08c <printf>
    80022e10:	4529                	li	a0,10
    80022e12:	769080ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80022e16:	4511                	li	a0,4
    80022e18:	8f0de0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022e1c:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022e20:	60c0f073          	csrci	hstateen0,1
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80022e24:	30c025f3          	csrr	a1,mstateen0
    80022e28:	00016517          	auipc	a0,0x16
    80022e2c:	9a050513          	addi	a0,a0,-1632 # 800387c8 <__func__.0+0x8ad8>
    80022e30:	25c0a0ef          	jal	8002d08c <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80022e34:	60c025f3          	csrr	a1,hstateen0
    80022e38:	00016517          	auipc	a0,0x16
    80022e3c:	9a050513          	addi	a0,a0,-1632 # 800387d8 <__func__.0+0x8ae8>
    80022e40:	24c0a0ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VS);
    80022e44:	4509                	li	a0,2
    80022e46:	8c2de0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022e4a:	fc3dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C4);
    80022e4e:	5c4027f3          	csrr	a5,0x5c4

    excpt_info();
    80022e52:	9fcde0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022e56:	08200593          	li	a1,130
    80022e5a:	00016617          	auipc	a2,0x16
    80022e5e:	98e60613          	addi	a2,a2,-1650 # 800387e8 <__func__.0+0x8af8>
    80022e62:	0000d517          	auipc	a0,0xd
    80022e66:	18e50513          	addi	a0,a0,398 # 8002fff0 <__func__.0+0x300>
    80022e6a:	2220a0ef          	jal	8002d08c <printf>
    80022e6e:	00035797          	auipc	a5,0x35
    80022e72:	1a37c783          	lbu	a5,419(a5) # 80058011 <excpt+0x1>
    80022e76:	00035497          	auipc	s1,0x35
    80022e7a:	19a48493          	addi	s1,s1,410 # 80058010 <excpt>
    80022e7e:	0000d597          	auipc	a1,0xd
    80022e82:	14a58593          	addi	a1,a1,330 # 8002ffc8 <__func__.0+0x2d8>
    80022e86:	cf89                	beqz	a5,80022ea0 <stateen_C_test_4+0xac>
    80022e88:	6498                	ld	a4,8(s1)
    80022e8a:	47d9                	li	a5,22
    80022e8c:	0000d597          	auipc	a1,0xd
    80022e90:	12c58593          	addi	a1,a1,300 # 8002ffb8 <__func__.0+0x2c8>
    80022e94:	00f70663          	beq	a4,a5,80022ea0 <stateen_C_test_4+0xac>
    80022e98:	0000d597          	auipc	a1,0xd
    80022e9c:	13058593          	addi	a1,a1,304 # 8002ffc8 <__func__.0+0x2d8>
    80022ea0:	0000d517          	auipc	a0,0xd
    80022ea4:	16850513          	addi	a0,a0,360 # 80030008 <__func__.0+0x318>
    80022ea8:	1e40a0ef          	jal	8002d08c <printf>
    80022eac:	00035797          	auipc	a5,0x35
    80022eb0:	1657c783          	lbu	a5,357(a5) # 80058011 <excpt+0x1>
    80022eb4:	c789                	beqz	a5,80022ebe <stateen_C_test_4+0xca>
    80022eb6:	6498                	ld	a4,8(s1)
    80022eb8:	47d9                	li	a5,22
    80022eba:	00f70c63          	beq	a4,a5,80022ed2 <stateen_C_test_4+0xde>
    80022ebe:	0000d517          	auipc	a0,0xd
    80022ec2:	15250513          	addi	a0,a0,338 # 80030010 <__func__.0+0x320>
    80022ec6:	1c60a0ef          	jal	8002d08c <printf>
    80022eca:	02900513          	li	a0,41
    80022ece:	6ad080ef          	jal	8002bd7a <putchar>
    80022ed2:	4529                	li	a0,10
    80022ed4:	6a7080ef          	jal	8002bd7a <putchar>
    80022ed8:	00035417          	auipc	s0,0x35
    80022edc:	13944403          	lbu	s0,313(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80022ee0:	0000d597          	auipc	a1,0xd
    80022ee4:	0e858593          	addi	a1,a1,232 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022ee8:	cc11                	beqz	s0,80022f04 <stateen_C_test_4+0x110>
    80022eea:	6498                	ld	a4,8(s1)
    80022eec:	47d9                	li	a5,22
    TEST_END();
    80022eee:	0000d597          	auipc	a1,0xd
    80022ef2:	0ca58593          	addi	a1,a1,202 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022ef6:	00f70763          	beq	a4,a5,80022f04 <stateen_C_test_4+0x110>
    80022efa:	4401                	li	s0,0
    TEST_END();
    80022efc:	0000d597          	auipc	a1,0xd
    80022f00:	0cc58593          	addi	a1,a1,204 # 8002ffc8 <__func__.0+0x2d8>
    80022f04:	0000d517          	auipc	a0,0xd
    80022f08:	16c50513          	addi	a0,a0,364 # 80030070 <__func__.0+0x380>
    80022f0c:	1800a0ef          	jal	8002d08c <printf>
    80022f10:	4511                	li	a0,4
    80022f12:	ff7dd0ef          	jal	80000f08 <goto_priv>
    80022f16:	9bdde0ef          	jal	800018d2 <reset_state>

}
    80022f1a:	60e2                	ld	ra,24(sp)
    80022f1c:	8522                	mv	a0,s0
    80022f1e:	6442                	ld	s0,16(sp)
    80022f20:	64a2                	ld	s1,8(sp)
    80022f22:	6105                	addi	sp,sp,32
    80022f24:	8082                	ret

0000000080022f26 <stateen_C_test_5>:

bool stateen_C_test_5(){
    80022f26:	1101                	addi	sp,sp,-32

    //当mstateen.C=0,hs mode 不可访问自定义寄存器

    TEST_START();
    80022f28:	0000c597          	auipc	a1,0xc
    80022f2c:	7b858593          	addi	a1,a1,1976 # 8002f6e0 <__func__.32>
    80022f30:	0000d517          	auipc	a0,0xd
    80022f34:	0a850513          	addi	a0,a0,168 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_C_test_5(){
    80022f38:	ec06                	sd	ra,24(sp)
    80022f3a:	e822                	sd	s0,16(sp)
    80022f3c:	e426                	sd	s1,8(sp)
    TEST_START();
    80022f3e:	14e0a0ef          	jal	8002d08c <printf>
    80022f42:	4529                	li	a0,10
    80022f44:	637080ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80022f48:	4511                	li	a0,4
    80022f4a:	fbfdd0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022f4e:	30c0f073          	csrci	mstateen0,1

    goto_priv(PRIV_HS);
    80022f52:	450d                	li	a0,3
    80022f54:	fb5dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022f58:	eb5dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C0);
    80022f5c:	5c0027f3          	csrr	a5,0x5c0

    excpt_info();
    80022f60:	8eede0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022f64:	08200593          	li	a1,130
    80022f68:	00016617          	auipc	a2,0x16
    80022f6c:	8d060613          	addi	a2,a2,-1840 # 80038838 <__func__.0+0x8b48>
    80022f70:	0000d517          	auipc	a0,0xd
    80022f74:	08050513          	addi	a0,a0,128 # 8002fff0 <__func__.0+0x300>
    80022f78:	1140a0ef          	jal	8002d08c <printf>
    80022f7c:	00035797          	auipc	a5,0x35
    80022f80:	0957c783          	lbu	a5,149(a5) # 80058011 <excpt+0x1>
    80022f84:	00035497          	auipc	s1,0x35
    80022f88:	08c48493          	addi	s1,s1,140 # 80058010 <excpt>
    80022f8c:	0000d597          	auipc	a1,0xd
    80022f90:	03c58593          	addi	a1,a1,60 # 8002ffc8 <__func__.0+0x2d8>
    80022f94:	cf89                	beqz	a5,80022fae <stateen_C_test_5+0x88>
    80022f96:	6498                	ld	a4,8(s1)
    80022f98:	4789                	li	a5,2
    80022f9a:	0000d597          	auipc	a1,0xd
    80022f9e:	01e58593          	addi	a1,a1,30 # 8002ffb8 <__func__.0+0x2c8>
    80022fa2:	00f70663          	beq	a4,a5,80022fae <stateen_C_test_5+0x88>
    80022fa6:	0000d597          	auipc	a1,0xd
    80022faa:	02258593          	addi	a1,a1,34 # 8002ffc8 <__func__.0+0x2d8>
    80022fae:	0000d517          	auipc	a0,0xd
    80022fb2:	05a50513          	addi	a0,a0,90 # 80030008 <__func__.0+0x318>
    80022fb6:	0d60a0ef          	jal	8002d08c <printf>
    80022fba:	00035797          	auipc	a5,0x35
    80022fbe:	0577c783          	lbu	a5,87(a5) # 80058011 <excpt+0x1>
    80022fc2:	c789                	beqz	a5,80022fcc <stateen_C_test_5+0xa6>
    80022fc4:	6498                	ld	a4,8(s1)
    80022fc6:	4789                	li	a5,2
    80022fc8:	00f70c63          	beq	a4,a5,80022fe0 <stateen_C_test_5+0xba>
    80022fcc:	0000d517          	auipc	a0,0xd
    80022fd0:	04450513          	addi	a0,a0,68 # 80030010 <__func__.0+0x320>
    80022fd4:	0b80a0ef          	jal	8002d08c <printf>
    80022fd8:	02900513          	li	a0,41
    80022fdc:	59f080ef          	jal	8002bd7a <putchar>
    80022fe0:	4529                	li	a0,10
    80022fe2:	599080ef          	jal	8002bd7a <putchar>
    80022fe6:	00035417          	auipc	s0,0x35
    80022fea:	02b44403          	lbu	s0,43(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80022fee:	0000d597          	auipc	a1,0xd
    80022ff2:	fda58593          	addi	a1,a1,-38 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022ff6:	cc11                	beqz	s0,80023012 <stateen_C_test_5+0xec>
    80022ff8:	6498                	ld	a4,8(s1)
    80022ffa:	4789                	li	a5,2
    TEST_END();
    80022ffc:	0000d597          	auipc	a1,0xd
    80023000:	fbc58593          	addi	a1,a1,-68 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80023004:	00f70763          	beq	a4,a5,80023012 <stateen_C_test_5+0xec>
    80023008:	4401                	li	s0,0
    TEST_END();
    8002300a:	0000d597          	auipc	a1,0xd
    8002300e:	fbe58593          	addi	a1,a1,-66 # 8002ffc8 <__func__.0+0x2d8>
    80023012:	0000d517          	auipc	a0,0xd
    80023016:	05e50513          	addi	a0,a0,94 # 80030070 <__func__.0+0x380>
    8002301a:	0720a0ef          	jal	8002d08c <printf>
    8002301e:	4511                	li	a0,4
    80023020:	ee9dd0ef          	jal	80000f08 <goto_priv>
    80023024:	8afde0ef          	jal	800018d2 <reset_state>

}
    80023028:	60e2                	ld	ra,24(sp)
    8002302a:	8522                	mv	a0,s0
    8002302c:	6442                	ld	s0,16(sp)
    8002302e:	64a2                	ld	s1,8(sp)
    80023030:	6105                	addi	sp,sp,32
    80023032:	8082                	ret

0000000080023034 <stateen_C_test_6>:


bool stateen_C_test_6(){
    80023034:	1141                	addi	sp,sp,-16

    TEST_START();
    80023036:	0000c597          	auipc	a1,0xc
    8002303a:	6c258593          	addi	a1,a1,1730 # 8002f6f8 <__func__.31>
    8002303e:	0000d517          	auipc	a0,0xd
    80023042:	f9a50513          	addi	a0,a0,-102 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_C_test_6(){
    80023046:	e406                	sd	ra,8(sp)
    80023048:	e022                	sd	s0,0(sp)
    TEST_START();
    8002304a:	0420a0ef          	jal	8002d08c <printf>
    8002304e:	4529                	li	a0,10
    80023050:	52b080ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80023054:	4511                	li	a0,4
    80023056:	eb3dd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.C=1,v=0时,可访问自定义寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    8002305a:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    8002305e:	60c0f073          	csrci	hstateen0,1

    goto_priv(PRIV_HS);
    80023062:	450d                	li	a0,3
    80023064:	ea5dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023068:	da5dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C0);
    8002306c:	5c0027f3          	csrr	a5,0x5c0

    excpt_info();
    80023070:	fdfdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    80023074:	08200593          	li	a1,130
    80023078:	00016617          	auipc	a2,0x16
    8002307c:	81060613          	addi	a2,a2,-2032 # 80038888 <__func__.0+0x8b98>
    80023080:	0000d517          	auipc	a0,0xd
    80023084:	f7050513          	addi	a0,a0,-144 # 8002fff0 <__func__.0+0x300>
    80023088:	0040a0ef          	jal	8002d08c <printf>
    8002308c:	00035797          	auipc	a5,0x35
    80023090:	f857c783          	lbu	a5,-123(a5) # 80058011 <excpt+0x1>
    80023094:	0000d597          	auipc	a1,0xd
    80023098:	f2458593          	addi	a1,a1,-220 # 8002ffb8 <__func__.0+0x2c8>
    8002309c:	c789                	beqz	a5,800230a6 <stateen_C_test_6+0x72>
    8002309e:	0000d597          	auipc	a1,0xd
    800230a2:	f2a58593          	addi	a1,a1,-214 # 8002ffc8 <__func__.0+0x2d8>
    800230a6:	0000d517          	auipc	a0,0xd
    800230aa:	f6250513          	addi	a0,a0,-158 # 80030008 <__func__.0+0x318>
    800230ae:	7df090ef          	jal	8002d08c <printf>
    800230b2:	00035797          	auipc	a5,0x35
    800230b6:	f5f7c783          	lbu	a5,-161(a5) # 80058011 <excpt+0x1>
    800230ba:	e7e9                	bnez	a5,80023184 <stateen_C_test_6+0x150>
    800230bc:	4529                	li	a0,10
    800230be:	4bd080ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    ); 

#endif

    goto_priv(PRIV_M);
    800230c2:	4511                	li	a0,4
    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    800230c4:	00035417          	auipc	s0,0x35
    800230c8:	f4d44403          	lbu	s0,-179(s0) # 80058011 <excpt+0x1>
    goto_priv(PRIV_M);
    800230cc:	e3ddd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800230d0:	d3ddd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C3);
    800230d4:	5c3027f3          	csrr	a5,0x5c3

    excpt_info();
    800230d8:	f77dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    800230dc:	08200593          	li	a1,130
    800230e0:	00015617          	auipc	a2,0x15
    800230e4:	7f860613          	addi	a2,a2,2040 # 800388d8 <__func__.0+0x8be8>
    800230e8:	0000d517          	auipc	a0,0xd
    800230ec:	f0850513          	addi	a0,a0,-248 # 8002fff0 <__func__.0+0x300>
    800230f0:	79d090ef          	jal	8002d08c <printf>
    800230f4:	00035797          	auipc	a5,0x35
    800230f8:	f1d7c783          	lbu	a5,-227(a5) # 80058011 <excpt+0x1>
    800230fc:	0000d597          	auipc	a1,0xd
    80023100:	ecc58593          	addi	a1,a1,-308 # 8002ffc8 <__func__.0+0x2d8>
    80023104:	e789                	bnez	a5,8002310e <stateen_C_test_6+0xda>
    80023106:	0000d597          	auipc	a1,0xd
    8002310a:	eb258593          	addi	a1,a1,-334 # 8002ffb8 <__func__.0+0x2c8>
    8002310e:	0000d517          	auipc	a0,0xd
    80023112:	efa50513          	addi	a0,a0,-262 # 80030008 <__func__.0+0x318>
    80023116:	777090ef          	jal	8002d08c <printf>
    8002311a:	00035797          	auipc	a5,0x35
    8002311e:	ef77c783          	lbu	a5,-265(a5) # 80058011 <excpt+0x1>
    80023122:	e7b1                	bnez	a5,8002316e <stateen_C_test_6+0x13a>
    80023124:	4529                	li	a0,10
    80023126:	455080ef          	jal	8002bd7a <putchar>
    8002312a:	e815                	bnez	s0,8002315e <stateen_C_test_6+0x12a>
    8002312c:	00035797          	auipc	a5,0x35
    80023130:	ee57c783          	lbu	a5,-283(a5) # 80058011 <excpt+0x1>
    80023134:	c79d                	beqz	a5,80023162 <stateen_C_test_6+0x12e>
        excpt.triggered == false
    ); 

    TEST_END();
    80023136:	0000d597          	auipc	a1,0xd
    8002313a:	e9258593          	addi	a1,a1,-366 # 8002ffc8 <__func__.0+0x2d8>
    8002313e:	0000d517          	auipc	a0,0xd
    80023142:	f3250513          	addi	a0,a0,-206 # 80030070 <__func__.0+0x380>
    80023146:	747090ef          	jal	8002d08c <printf>
    8002314a:	4511                	li	a0,4
    8002314c:	dbddd0ef          	jal	80000f08 <goto_priv>
    80023150:	f82de0ef          	jal	800018d2 <reset_state>

}
    80023154:	60a2                	ld	ra,8(sp)
    80023156:	8522                	mv	a0,s0
    80023158:	6402                	ld	s0,0(sp)
    8002315a:	0141                	addi	sp,sp,16
    8002315c:	8082                	ret
    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    8002315e:	4401                	li	s0,0
    80023160:	bfd9                	j	80023136 <stateen_C_test_6+0x102>
    80023162:	4405                	li	s0,1
    TEST_END();
    80023164:	0000d597          	auipc	a1,0xd
    80023168:	e5458593          	addi	a1,a1,-428 # 8002ffb8 <__func__.0+0x2c8>
    8002316c:	bfc9                	j	8002313e <stateen_C_test_6+0x10a>
    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    8002316e:	0000d517          	auipc	a0,0xd
    80023172:	ea250513          	addi	a0,a0,-350 # 80030010 <__func__.0+0x320>
    80023176:	717090ef          	jal	8002d08c <printf>
    8002317a:	02900513          	li	a0,41
    8002317e:	3fd080ef          	jal	8002bd7a <putchar>
    80023182:	b74d                	j	80023124 <stateen_C_test_6+0xf0>
    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    80023184:	0000d517          	auipc	a0,0xd
    80023188:	e8c50513          	addi	a0,a0,-372 # 80030010 <__func__.0+0x320>
    8002318c:	701090ef          	jal	8002d08c <printf>
    80023190:	02900513          	li	a0,41
    80023194:	3e7080ef          	jal	8002bd7a <putchar>
    80023198:	b715                	j	800230bc <stateen_C_test_6+0x88>

000000008002319a <stateen_C_test_7>:


bool stateen_C_test_7(){
    8002319a:	1141                	addi	sp,sp,-16

    TEST_START();
    8002319c:	0000c597          	auipc	a1,0xc
    800231a0:	57458593          	addi	a1,a1,1396 # 8002f710 <__func__.30>
    800231a4:	0000d517          	auipc	a0,0xd
    800231a8:	e3450513          	addi	a0,a0,-460 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_C_test_7(){
    800231ac:	e406                	sd	ra,8(sp)
    800231ae:	e022                	sd	s0,0(sp)
    TEST_START();
    800231b0:	6dd090ef          	jal	8002d08c <printf>
    800231b4:	4529                	li	a0,10
    800231b6:	3c5080ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    800231ba:	4511                	li	a0,4
    800231bc:	d4ddd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.C=1 hstateen.C=1,v=1 时可访问自定义寄存器(vs,vu自定义寄存器是哪些)
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    800231c0:	30c0e073          	csrsi	mstateen0,1
    CSRS(CSR_HSTATEEN0 , MSTATEEN_C);
    800231c4:	60c0e073          	csrsi	hstateen0,1

    goto_priv(PRIV_VS);
    800231c8:	4509                	li	a0,2
    800231ca:	d3fdd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800231ce:	c3fdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C1);
    800231d2:	5c1027f3          	csrr	a5,0x5c1

    excpt_info();
    800231d6:	e79dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800231da:	08200593          	li	a1,130
    800231de:	00015617          	auipc	a2,0x15
    800231e2:	74a60613          	addi	a2,a2,1866 # 80038928 <__func__.0+0x8c38>
    800231e6:	0000d517          	auipc	a0,0xd
    800231ea:	e0a50513          	addi	a0,a0,-502 # 8002fff0 <__func__.0+0x300>
    800231ee:	69f090ef          	jal	8002d08c <printf>
    800231f2:	00035797          	auipc	a5,0x35
    800231f6:	e1f7c783          	lbu	a5,-481(a5) # 80058011 <excpt+0x1>
    800231fa:	0000d597          	auipc	a1,0xd
    800231fe:	dbe58593          	addi	a1,a1,-578 # 8002ffb8 <__func__.0+0x2c8>
    80023202:	c789                	beqz	a5,8002320c <stateen_C_test_7+0x72>
    80023204:	0000d597          	auipc	a1,0xd
    80023208:	dc458593          	addi	a1,a1,-572 # 8002ffc8 <__func__.0+0x2d8>
    8002320c:	0000d517          	auipc	a0,0xd
    80023210:	dfc50513          	addi	a0,a0,-516 # 80030008 <__func__.0+0x318>
    80023214:	679090ef          	jal	8002d08c <printf>
    80023218:	00035797          	auipc	a5,0x35
    8002321c:	df97c783          	lbu	a5,-519(a5) # 80058011 <excpt+0x1>
    80023220:	e7e9                	bnez	a5,800232ea <stateen_C_test_7+0x150>
    80023222:	4529                	li	a0,10
    80023224:	357080ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80023228:	4501                	li	a0,0
    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    8002322a:	00035417          	auipc	s0,0x35
    8002322e:	de744403          	lbu	s0,-537(s0) # 80058011 <excpt+0x1>
    goto_priv(PRIV_VU);
    80023232:	cd7dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023236:	bd7dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(0X5C2);
    8002323a:	5c2027f3          	csrr	a5,0x5c2

    excpt_info();
    8002323e:	e11dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    80023242:	08200593          	li	a1,130
    80023246:	00015617          	auipc	a2,0x15
    8002324a:	73260613          	addi	a2,a2,1842 # 80038978 <__func__.0+0x8c88>
    8002324e:	0000d517          	auipc	a0,0xd
    80023252:	da250513          	addi	a0,a0,-606 # 8002fff0 <__func__.0+0x300>
    80023256:	637090ef          	jal	8002d08c <printf>
    8002325a:	00035797          	auipc	a5,0x35
    8002325e:	db77c783          	lbu	a5,-585(a5) # 80058011 <excpt+0x1>
    80023262:	0000d597          	auipc	a1,0xd
    80023266:	d6658593          	addi	a1,a1,-666 # 8002ffc8 <__func__.0+0x2d8>
    8002326a:	e789                	bnez	a5,80023274 <stateen_C_test_7+0xda>
    8002326c:	0000d597          	auipc	a1,0xd
    80023270:	d4c58593          	addi	a1,a1,-692 # 8002ffb8 <__func__.0+0x2c8>
    80023274:	0000d517          	auipc	a0,0xd
    80023278:	d9450513          	addi	a0,a0,-620 # 80030008 <__func__.0+0x318>
    8002327c:	611090ef          	jal	8002d08c <printf>
    80023280:	00035797          	auipc	a5,0x35
    80023284:	d917c783          	lbu	a5,-623(a5) # 80058011 <excpt+0x1>
    80023288:	e7b1                	bnez	a5,800232d4 <stateen_C_test_7+0x13a>
    8002328a:	4529                	li	a0,10
    8002328c:	2ef080ef          	jal	8002bd7a <putchar>
    80023290:	e815                	bnez	s0,800232c4 <stateen_C_test_7+0x12a>
    80023292:	00035797          	auipc	a5,0x35
    80023296:	d7f7c783          	lbu	a5,-641(a5) # 80058011 <excpt+0x1>
    8002329a:	c79d                	beqz	a5,800232c8 <stateen_C_test_7+0x12e>
        excpt.triggered == false
    ); 
    TEST_END();
    8002329c:	0000d597          	auipc	a1,0xd
    800232a0:	d2c58593          	addi	a1,a1,-724 # 8002ffc8 <__func__.0+0x2d8>
    800232a4:	0000d517          	auipc	a0,0xd
    800232a8:	dcc50513          	addi	a0,a0,-564 # 80030070 <__func__.0+0x380>
    800232ac:	5e1090ef          	jal	8002d08c <printf>
    800232b0:	4511                	li	a0,4
    800232b2:	c57dd0ef          	jal	80000f08 <goto_priv>
    800232b6:	e1cde0ef          	jal	800018d2 <reset_state>
}
    800232ba:	60a2                	ld	ra,8(sp)
    800232bc:	8522                	mv	a0,s0
    800232be:	6402                	ld	s0,0(sp)
    800232c0:	0141                	addi	sp,sp,16
    800232c2:	8082                	ret
    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800232c4:	4401                	li	s0,0
    800232c6:	bfd9                	j	8002329c <stateen_C_test_7+0x102>
    800232c8:	4405                	li	s0,1
    TEST_END();
    800232ca:	0000d597          	auipc	a1,0xd
    800232ce:	cee58593          	addi	a1,a1,-786 # 8002ffb8 <__func__.0+0x2c8>
    800232d2:	bfc9                	j	800232a4 <stateen_C_test_7+0x10a>
    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800232d4:	0000d517          	auipc	a0,0xd
    800232d8:	d3c50513          	addi	a0,a0,-708 # 80030010 <__func__.0+0x320>
    800232dc:	5b1090ef          	jal	8002d08c <printf>
    800232e0:	02900513          	li	a0,41
    800232e4:	297080ef          	jal	8002bd7a <putchar>
    800232e8:	b74d                	j	8002328a <stateen_C_test_7+0xf0>
    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800232ea:	0000d517          	auipc	a0,0xd
    800232ee:	d2650513          	addi	a0,a0,-730 # 80030010 <__func__.0+0x320>
    800232f2:	59b090ef          	jal	8002d08c <printf>
    800232f6:	02900513          	li	a0,41
    800232fa:	281080ef          	jal	8002bd7a <putchar>
    800232fe:	b715                	j	80023222 <stateen_C_test_7+0x88>

0000000080023300 <stateen_IMSIC_test_1>:

//----



bool stateen_IMSIC_test_1(){
    80023300:	1101                	addi	sp,sp,-32

    TEST_START();
    80023302:	0000c597          	auipc	a1,0xc
    80023306:	42658593          	addi	a1,a1,1062 # 8002f728 <__func__.29>
    8002330a:	0000d517          	auipc	a0,0xd
    8002330e:	cce50513          	addi	a0,a0,-818 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_IMSIC_test_1(){
    80023312:	ec06                	sd	ra,24(sp)
    80023314:	e822                	sd	s0,16(sp)
    80023316:	e426                	sd	s1,8(sp)
    TEST_START();
    80023318:	575090ef          	jal	8002d08c <printf>
    8002331c:	4529                	li	a0,10
    8002331e:	25d080ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80023322:	4511                	li	a0,4
    80023324:	be5dd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.IMSIC=0,hu mode 不可访问stopei、vstopei寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023328:	4785                	li	a5,1
    8002332a:	17ea                	slli	a5,a5,0x3a
    8002332c:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80023330:	4505                	li	a0,1
    80023332:	bd7dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023336:	ad7dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    8002333a:	15c027f3          	csrr	a5,stopei

    excpt_info();
    8002333e:	d11dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss stopei register cause to illegal except when mstateen.imsic=0",
    80023342:	08200593          	li	a1,130
    80023346:	00015617          	auipc	a2,0x15
    8002334a:	68260613          	addi	a2,a2,1666 # 800389c8 <__func__.0+0x8cd8>
    8002334e:	0000d517          	auipc	a0,0xd
    80023352:	ca250513          	addi	a0,a0,-862 # 8002fff0 <__func__.0+0x300>
    80023356:	537090ef          	jal	8002d08c <printf>
    8002335a:	00035797          	auipc	a5,0x35
    8002335e:	cb77c783          	lbu	a5,-841(a5) # 80058011 <excpt+0x1>
    80023362:	00035497          	auipc	s1,0x35
    80023366:	cae48493          	addi	s1,s1,-850 # 80058010 <excpt>
    8002336a:	0000d597          	auipc	a1,0xd
    8002336e:	c5e58593          	addi	a1,a1,-930 # 8002ffc8 <__func__.0+0x2d8>
    80023372:	cf89                	beqz	a5,8002338c <stateen_IMSIC_test_1+0x8c>
    80023374:	6498                	ld	a4,8(s1)
    80023376:	4789                	li	a5,2
    80023378:	0000d597          	auipc	a1,0xd
    8002337c:	c4058593          	addi	a1,a1,-960 # 8002ffb8 <__func__.0+0x2c8>
    80023380:	00f70663          	beq	a4,a5,8002338c <stateen_IMSIC_test_1+0x8c>
    80023384:	0000d597          	auipc	a1,0xd
    80023388:	c4458593          	addi	a1,a1,-956 # 8002ffc8 <__func__.0+0x2d8>
    8002338c:	0000d517          	auipc	a0,0xd
    80023390:	c7c50513          	addi	a0,a0,-900 # 80030008 <__func__.0+0x318>
    80023394:	4f9090ef          	jal	8002d08c <printf>
    80023398:	00035797          	auipc	a5,0x35
    8002339c:	c797c783          	lbu	a5,-903(a5) # 80058011 <excpt+0x1>
    800233a0:	c789                	beqz	a5,800233aa <stateen_IMSIC_test_1+0xaa>
    800233a2:	6498                	ld	a4,8(s1)
    800233a4:	4789                	li	a5,2
    800233a6:	00f70c63          	beq	a4,a5,800233be <stateen_IMSIC_test_1+0xbe>
    800233aa:	0000d517          	auipc	a0,0xd
    800233ae:	c6650513          	addi	a0,a0,-922 # 80030010 <__func__.0+0x320>
    800233b2:	4db090ef          	jal	8002d08c <printf>
    800233b6:	02900513          	li	a0,41
    800233ba:	1c1080ef          	jal	8002bd7a <putchar>
    800233be:	4529                	li	a0,10
    800233c0:	1bb080ef          	jal	8002bd7a <putchar>
    800233c4:	00035797          	auipc	a5,0x35
    800233c8:	c4d7c783          	lbu	a5,-947(a5) # 80058011 <excpt+0x1>
    800233cc:	4401                	li	s0,0
    800233ce:	c789                	beqz	a5,800233d8 <stateen_IMSIC_test_1+0xd8>
    800233d0:	6480                	ld	s0,8(s1)
    800233d2:	1479                	addi	s0,s0,-2
    800233d4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    800233d8:	4505                	li	a0,1
    800233da:	b2fdd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800233de:	a2fdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800233e2:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800233e6:	c69dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    800233ea:	08200593          	li	a1,130
    800233ee:	00015617          	auipc	a2,0x15
    800233f2:	62a60613          	addi	a2,a2,1578 # 80038a18 <__func__.0+0x8d28>
    800233f6:	0000d517          	auipc	a0,0xd
    800233fa:	bfa50513          	addi	a0,a0,-1030 # 8002fff0 <__func__.0+0x300>
    800233fe:	48f090ef          	jal	8002d08c <printf>
    80023402:	00035797          	auipc	a5,0x35
    80023406:	c0f7c783          	lbu	a5,-1009(a5) # 80058011 <excpt+0x1>
    8002340a:	0000d597          	auipc	a1,0xd
    8002340e:	bbe58593          	addi	a1,a1,-1090 # 8002ffc8 <__func__.0+0x2d8>
    80023412:	cf89                	beqz	a5,8002342c <stateen_IMSIC_test_1+0x12c>
    80023414:	6498                	ld	a4,8(s1)
    80023416:	4789                	li	a5,2
    80023418:	0000d597          	auipc	a1,0xd
    8002341c:	ba058593          	addi	a1,a1,-1120 # 8002ffb8 <__func__.0+0x2c8>
    80023420:	00f70663          	beq	a4,a5,8002342c <stateen_IMSIC_test_1+0x12c>
    80023424:	0000d597          	auipc	a1,0xd
    80023428:	ba458593          	addi	a1,a1,-1116 # 8002ffc8 <__func__.0+0x2d8>
    8002342c:	0000d517          	auipc	a0,0xd
    80023430:	bdc50513          	addi	a0,a0,-1060 # 80030008 <__func__.0+0x318>
    80023434:	459090ef          	jal	8002d08c <printf>
    80023438:	00035797          	auipc	a5,0x35
    8002343c:	bd97c783          	lbu	a5,-1063(a5) # 80058011 <excpt+0x1>
    80023440:	c789                	beqz	a5,8002344a <stateen_IMSIC_test_1+0x14a>
    80023442:	6498                	ld	a4,8(s1)
    80023444:	4789                	li	a5,2
    80023446:	00f70c63          	beq	a4,a5,8002345e <stateen_IMSIC_test_1+0x15e>
    8002344a:	0000d517          	auipc	a0,0xd
    8002344e:	bc650513          	addi	a0,a0,-1082 # 80030010 <__func__.0+0x320>
    80023452:	43b090ef          	jal	8002d08c <printf>
    80023456:	02900513          	li	a0,41
    8002345a:	121080ef          	jal	8002bd7a <putchar>
    8002345e:	4529                	li	a0,10
    80023460:	11b080ef          	jal	8002bd7a <putchar>
    80023464:	c015                	beqz	s0,80023488 <stateen_IMSIC_test_1+0x188>
    80023466:	00035417          	auipc	s0,0x35
    8002346a:	bab44403          	lbu	s0,-1109(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8002346e:	0000d597          	auipc	a1,0xd
    80023472:	b5a58593          	addi	a1,a1,-1190 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023476:	cc11                	beqz	s0,80023492 <stateen_IMSIC_test_1+0x192>
    80023478:	6498                	ld	a4,8(s1)
    8002347a:	4789                	li	a5,2
    TEST_END();
    8002347c:	0000d597          	auipc	a1,0xd
    80023480:	b3c58593          	addi	a1,a1,-1220 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023484:	00f70763          	beq	a4,a5,80023492 <stateen_IMSIC_test_1+0x192>
    80023488:	4401                	li	s0,0
    TEST_END();
    8002348a:	0000d597          	auipc	a1,0xd
    8002348e:	b3e58593          	addi	a1,a1,-1218 # 8002ffc8 <__func__.0+0x2d8>
    80023492:	0000d517          	auipc	a0,0xd
    80023496:	bde50513          	addi	a0,a0,-1058 # 80030070 <__func__.0+0x380>
    8002349a:	3f3090ef          	jal	8002d08c <printf>
    8002349e:	4511                	li	a0,4
    800234a0:	a69dd0ef          	jal	80000f08 <goto_priv>
    800234a4:	c2ede0ef          	jal	800018d2 <reset_state>

}
    800234a8:	60e2                	ld	ra,24(sp)
    800234aa:	8522                	mv	a0,s0
    800234ac:	6442                	ld	s0,16(sp)
    800234ae:	64a2                	ld	s1,8(sp)
    800234b0:	6105                	addi	sp,sp,32
    800234b2:	8082                	ret

00000000800234b4 <stateen_IMSIC_test_2>:

bool stateen_IMSIC_test_2(){
    800234b4:	1101                	addi	sp,sp,-32

    TEST_START();
    800234b6:	0000c597          	auipc	a1,0xc
    800234ba:	28a58593          	addi	a1,a1,650 # 8002f740 <__func__.28>
    800234be:	0000d517          	auipc	a0,0xd
    800234c2:	b1a50513          	addi	a0,a0,-1254 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_IMSIC_test_2(){
    800234c6:	ec06                	sd	ra,24(sp)
    800234c8:	e822                	sd	s0,16(sp)
    800234ca:	e426                	sd	s1,8(sp)
    TEST_START();
    800234cc:	3c1090ef          	jal	8002d08c <printf>
    800234d0:	4529                	li	a0,10
    800234d2:	0a9080ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    800234d6:	4511                	li	a0,4
    800234d8:	a31dd0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800234dc:	4785                	li	a5,1
    800234de:	17ea                	slli	a5,a5,0x3a
    800234e0:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    800234e4:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.IMSIC=1,hstateen.IMSIC=0,v=1时,不可访问stopei、vstopei寄存器
    goto_priv(PRIV_VU);
    800234e8:	4501                	li	a0,0
    800234ea:	a1fdd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800234ee:	91fdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800234f2:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800234f6:	b59dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss stopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800234fa:	08200593          	li	a1,130
    800234fe:	00015617          	auipc	a2,0x15
    80023502:	56a60613          	addi	a2,a2,1386 # 80038a68 <__func__.0+0x8d78>
    80023506:	0000d517          	auipc	a0,0xd
    8002350a:	aea50513          	addi	a0,a0,-1302 # 8002fff0 <__func__.0+0x300>
    8002350e:	37f090ef          	jal	8002d08c <printf>
    80023512:	00035797          	auipc	a5,0x35
    80023516:	aff7c783          	lbu	a5,-1281(a5) # 80058011 <excpt+0x1>
    8002351a:	00035497          	auipc	s1,0x35
    8002351e:	af648493          	addi	s1,s1,-1290 # 80058010 <excpt>
    80023522:	0000d597          	auipc	a1,0xd
    80023526:	aa658593          	addi	a1,a1,-1370 # 8002ffc8 <__func__.0+0x2d8>
    8002352a:	cf89                	beqz	a5,80023544 <stateen_IMSIC_test_2+0x90>
    8002352c:	6498                	ld	a4,8(s1)
    8002352e:	47d9                	li	a5,22
    80023530:	0000d597          	auipc	a1,0xd
    80023534:	a8858593          	addi	a1,a1,-1400 # 8002ffb8 <__func__.0+0x2c8>
    80023538:	00f70663          	beq	a4,a5,80023544 <stateen_IMSIC_test_2+0x90>
    8002353c:	0000d597          	auipc	a1,0xd
    80023540:	a8c58593          	addi	a1,a1,-1396 # 8002ffc8 <__func__.0+0x2d8>
    80023544:	0000d517          	auipc	a0,0xd
    80023548:	ac450513          	addi	a0,a0,-1340 # 80030008 <__func__.0+0x318>
    8002354c:	341090ef          	jal	8002d08c <printf>
    80023550:	00035797          	auipc	a5,0x35
    80023554:	ac17c783          	lbu	a5,-1343(a5) # 80058011 <excpt+0x1>
    80023558:	c789                	beqz	a5,80023562 <stateen_IMSIC_test_2+0xae>
    8002355a:	6498                	ld	a4,8(s1)
    8002355c:	47d9                	li	a5,22
    8002355e:	00f70c63          	beq	a4,a5,80023576 <stateen_IMSIC_test_2+0xc2>
    80023562:	0000d517          	auipc	a0,0xd
    80023566:	aae50513          	addi	a0,a0,-1362 # 80030010 <__func__.0+0x320>
    8002356a:	323090ef          	jal	8002d08c <printf>
    8002356e:	02900513          	li	a0,41
    80023572:	009080ef          	jal	8002bd7a <putchar>
    80023576:	4529                	li	a0,10
    80023578:	003080ef          	jal	8002bd7a <putchar>
    8002357c:	00035797          	auipc	a5,0x35
    80023580:	a957c783          	lbu	a5,-1387(a5) # 80058011 <excpt+0x1>
    80023584:	4401                	li	s0,0
    80023586:	c789                	beqz	a5,80023590 <stateen_IMSIC_test_2+0xdc>
    80023588:	6480                	ld	s0,8(s1)
    8002358a:	1429                	addi	s0,s0,-22
    8002358c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80023590:	4501                	li	a0,0
    80023592:	977dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023596:	877dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    8002359a:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    8002359e:	ab1dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800235a2:	08200593          	li	a1,130
    800235a6:	00015617          	auipc	a2,0x15
    800235aa:	51a60613          	addi	a2,a2,1306 # 80038ac0 <__func__.0+0x8dd0>
    800235ae:	0000d517          	auipc	a0,0xd
    800235b2:	a4250513          	addi	a0,a0,-1470 # 8002fff0 <__func__.0+0x300>
    800235b6:	2d7090ef          	jal	8002d08c <printf>
    800235ba:	00035797          	auipc	a5,0x35
    800235be:	a577c783          	lbu	a5,-1449(a5) # 80058011 <excpt+0x1>
    800235c2:	0000d597          	auipc	a1,0xd
    800235c6:	a0658593          	addi	a1,a1,-1530 # 8002ffc8 <__func__.0+0x2d8>
    800235ca:	cf89                	beqz	a5,800235e4 <stateen_IMSIC_test_2+0x130>
    800235cc:	6498                	ld	a4,8(s1)
    800235ce:	47d9                	li	a5,22
    800235d0:	0000d597          	auipc	a1,0xd
    800235d4:	9e858593          	addi	a1,a1,-1560 # 8002ffb8 <__func__.0+0x2c8>
    800235d8:	00f70663          	beq	a4,a5,800235e4 <stateen_IMSIC_test_2+0x130>
    800235dc:	0000d597          	auipc	a1,0xd
    800235e0:	9ec58593          	addi	a1,a1,-1556 # 8002ffc8 <__func__.0+0x2d8>
    800235e4:	0000d517          	auipc	a0,0xd
    800235e8:	a2450513          	addi	a0,a0,-1500 # 80030008 <__func__.0+0x318>
    800235ec:	2a1090ef          	jal	8002d08c <printf>
    800235f0:	00035797          	auipc	a5,0x35
    800235f4:	a217c783          	lbu	a5,-1503(a5) # 80058011 <excpt+0x1>
    800235f8:	c789                	beqz	a5,80023602 <stateen_IMSIC_test_2+0x14e>
    800235fa:	6498                	ld	a4,8(s1)
    800235fc:	47d9                	li	a5,22
    800235fe:	00f70c63          	beq	a4,a5,80023616 <stateen_IMSIC_test_2+0x162>
    80023602:	0000d517          	auipc	a0,0xd
    80023606:	a0e50513          	addi	a0,a0,-1522 # 80030010 <__func__.0+0x320>
    8002360a:	283090ef          	jal	8002d08c <printf>
    8002360e:	02900513          	li	a0,41
    80023612:	768080ef          	jal	8002bd7a <putchar>
    80023616:	4529                	li	a0,10
    80023618:	762080ef          	jal	8002bd7a <putchar>
    8002361c:	c015                	beqz	s0,80023640 <stateen_IMSIC_test_2+0x18c>
    8002361e:	00035417          	auipc	s0,0x35
    80023622:	9f344403          	lbu	s0,-1549(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80023626:	0000d597          	auipc	a1,0xd
    8002362a:	9a258593          	addi	a1,a1,-1630 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    8002362e:	cc11                	beqz	s0,8002364a <stateen_IMSIC_test_2+0x196>
    80023630:	6498                	ld	a4,8(s1)
    80023632:	47d9                	li	a5,22
    TEST_END();
    80023634:	0000d597          	auipc	a1,0xd
    80023638:	98458593          	addi	a1,a1,-1660 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    8002363c:	00f70763          	beq	a4,a5,8002364a <stateen_IMSIC_test_2+0x196>
    80023640:	4401                	li	s0,0
    TEST_END();
    80023642:	0000d597          	auipc	a1,0xd
    80023646:	98658593          	addi	a1,a1,-1658 # 8002ffc8 <__func__.0+0x2d8>
    8002364a:	0000d517          	auipc	a0,0xd
    8002364e:	a2650513          	addi	a0,a0,-1498 # 80030070 <__func__.0+0x380>
    80023652:	23b090ef          	jal	8002d08c <printf>
    80023656:	4511                	li	a0,4
    80023658:	8b1dd0ef          	jal	80000f08 <goto_priv>
    8002365c:	a76de0ef          	jal	800018d2 <reset_state>

}
    80023660:	60e2                	ld	ra,24(sp)
    80023662:	8522                	mv	a0,s0
    80023664:	6442                	ld	s0,16(sp)
    80023666:	64a2                	ld	s1,8(sp)
    80023668:	6105                	addi	sp,sp,32
    8002366a:	8082                	ret

000000008002366c <stateen_IMSIC_test_3>:

bool stateen_IMSIC_test_3(){
    8002366c:	1141                	addi	sp,sp,-16

    //当mstateen.IMSIC=0,m mode 可访问stopei、vstopei寄存器

    TEST_START();
    8002366e:	0000c597          	auipc	a1,0xc
    80023672:	0ea58593          	addi	a1,a1,234 # 8002f758 <__func__.27>
    80023676:	0000d517          	auipc	a0,0xd
    8002367a:	96250513          	addi	a0,a0,-1694 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_IMSIC_test_3(){
    8002367e:	e406                	sd	ra,8(sp)
    80023680:	e022                	sd	s0,0(sp)
    TEST_START();
    80023682:	20b090ef          	jal	8002d08c <printf>
    80023686:	4529                	li	a0,10
    80023688:	6f2080ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    8002368c:	4511                	li	a0,4
    8002368e:	87bdd0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023692:	4785                	li	a5,1
    80023694:	17ea                	slli	a5,a5,0x3a
    80023696:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    8002369a:	4511                	li	a0,4
    8002369c:	86ddd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800236a0:	f6cdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800236a4:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800236a8:	9a7dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    800236ac:	08200593          	li	a1,130
    800236b0:	00015617          	auipc	a2,0x15
    800236b4:	46860613          	addi	a2,a2,1128 # 80038b18 <__func__.0+0x8e28>
    800236b8:	0000d517          	auipc	a0,0xd
    800236bc:	93850513          	addi	a0,a0,-1736 # 8002fff0 <__func__.0+0x300>
    800236c0:	1cd090ef          	jal	8002d08c <printf>
    800236c4:	00035797          	auipc	a5,0x35
    800236c8:	94d7c783          	lbu	a5,-1715(a5) # 80058011 <excpt+0x1>
    800236cc:	0000d597          	auipc	a1,0xd
    800236d0:	8ec58593          	addi	a1,a1,-1812 # 8002ffb8 <__func__.0+0x2c8>
    800236d4:	c789                	beqz	a5,800236de <stateen_IMSIC_test_3+0x72>
    800236d6:	0000d597          	auipc	a1,0xd
    800236da:	8f258593          	addi	a1,a1,-1806 # 8002ffc8 <__func__.0+0x2d8>
    800236de:	0000d517          	auipc	a0,0xd
    800236e2:	92a50513          	addi	a0,a0,-1750 # 80030008 <__func__.0+0x318>
    800236e6:	1a7090ef          	jal	8002d08c <printf>
    800236ea:	00035797          	auipc	a5,0x35
    800236ee:	9277c783          	lbu	a5,-1753(a5) # 80058011 <excpt+0x1>
    800236f2:	e7e9                	bnez	a5,800237bc <stateen_IMSIC_test_3+0x150>
    800236f4:	4529                	li	a0,10
    800236f6:	684080ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800236fa:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    800236fc:	00035417          	auipc	s0,0x35
    80023700:	91544403          	lbu	s0,-1771(s0) # 80058011 <excpt+0x1>
    goto_priv(PRIV_M);
    80023704:	805dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023708:	f04dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    8002370c:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023710:	93fdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    80023714:	08200593          	li	a1,130
    80023718:	00015617          	auipc	a2,0x15
    8002371c:	44060613          	addi	a2,a2,1088 # 80038b58 <__func__.0+0x8e68>
    80023720:	0000d517          	auipc	a0,0xd
    80023724:	8d050513          	addi	a0,a0,-1840 # 8002fff0 <__func__.0+0x300>
    80023728:	165090ef          	jal	8002d08c <printf>
    8002372c:	00035797          	auipc	a5,0x35
    80023730:	8e57c783          	lbu	a5,-1819(a5) # 80058011 <excpt+0x1>
    80023734:	0000d597          	auipc	a1,0xd
    80023738:	89458593          	addi	a1,a1,-1900 # 8002ffc8 <__func__.0+0x2d8>
    8002373c:	e789                	bnez	a5,80023746 <stateen_IMSIC_test_3+0xda>
    8002373e:	0000d597          	auipc	a1,0xd
    80023742:	87a58593          	addi	a1,a1,-1926 # 8002ffb8 <__func__.0+0x2c8>
    80023746:	0000d517          	auipc	a0,0xd
    8002374a:	8c250513          	addi	a0,a0,-1854 # 80030008 <__func__.0+0x318>
    8002374e:	13f090ef          	jal	8002d08c <printf>
    80023752:	00035797          	auipc	a5,0x35
    80023756:	8bf7c783          	lbu	a5,-1857(a5) # 80058011 <excpt+0x1>
    8002375a:	e7b1                	bnez	a5,800237a6 <stateen_IMSIC_test_3+0x13a>
    8002375c:	4529                	li	a0,10
    8002375e:	61c080ef          	jal	8002bd7a <putchar>
    80023762:	e815                	bnez	s0,80023796 <stateen_IMSIC_test_3+0x12a>
    80023764:	00035797          	auipc	a5,0x35
    80023768:	8ad7c783          	lbu	a5,-1875(a5) # 80058011 <excpt+0x1>
    8002376c:	c79d                	beqz	a5,8002379a <stateen_IMSIC_test_3+0x12e>
        excpt.triggered == false
    ); 
    TEST_END();
    8002376e:	0000d597          	auipc	a1,0xd
    80023772:	85a58593          	addi	a1,a1,-1958 # 8002ffc8 <__func__.0+0x2d8>
    80023776:	0000d517          	auipc	a0,0xd
    8002377a:	8fa50513          	addi	a0,a0,-1798 # 80030070 <__func__.0+0x380>
    8002377e:	10f090ef          	jal	8002d08c <printf>
    80023782:	4511                	li	a0,4
    80023784:	f84dd0ef          	jal	80000f08 <goto_priv>
    80023788:	94ade0ef          	jal	800018d2 <reset_state>

}
    8002378c:	60a2                	ld	ra,8(sp)
    8002378e:	8522                	mv	a0,s0
    80023790:	6402                	ld	s0,0(sp)
    80023792:	0141                	addi	sp,sp,16
    80023794:	8082                	ret
    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    80023796:	4401                	li	s0,0
    80023798:	bfd9                	j	8002376e <stateen_IMSIC_test_3+0x102>
    8002379a:	4405                	li	s0,1
    TEST_END();
    8002379c:	0000d597          	auipc	a1,0xd
    800237a0:	81c58593          	addi	a1,a1,-2020 # 8002ffb8 <__func__.0+0x2c8>
    800237a4:	bfc9                	j	80023776 <stateen_IMSIC_test_3+0x10a>
    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    800237a6:	0000d517          	auipc	a0,0xd
    800237aa:	86a50513          	addi	a0,a0,-1942 # 80030010 <__func__.0+0x320>
    800237ae:	0df090ef          	jal	8002d08c <printf>
    800237b2:	02900513          	li	a0,41
    800237b6:	5c4080ef          	jal	8002bd7a <putchar>
    800237ba:	b74d                	j	8002375c <stateen_IMSIC_test_3+0xf0>
    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    800237bc:	0000d517          	auipc	a0,0xd
    800237c0:	85450513          	addi	a0,a0,-1964 # 80030010 <__func__.0+0x320>
    800237c4:	0c9090ef          	jal	8002d08c <printf>
    800237c8:	02900513          	li	a0,41
    800237cc:	5ae080ef          	jal	8002bd7a <putchar>
    800237d0:	b715                	j	800236f4 <stateen_IMSIC_test_3+0x88>

00000000800237d2 <stateen_IMSIC_test_4>:

bool stateen_IMSIC_test_4(){
    800237d2:	1101                	addi	sp,sp,-32

    //当mstateen.IMSIC=1,hstateen.IMSIC=0,v=1时不可访问stopei、vstopei寄存器

    TEST_START();
    800237d4:	0000c597          	auipc	a1,0xc
    800237d8:	f9c58593          	addi	a1,a1,-100 # 8002f770 <__func__.26>
    800237dc:	0000c517          	auipc	a0,0xc
    800237e0:	7fc50513          	addi	a0,a0,2044 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_IMSIC_test_4(){
    800237e4:	ec06                	sd	ra,24(sp)
    800237e6:	e822                	sd	s0,16(sp)
    800237e8:	e426                	sd	s1,8(sp)
    TEST_START();
    800237ea:	0a3090ef          	jal	8002d08c <printf>
    800237ee:	4529                	li	a0,10
    800237f0:	58a080ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    800237f4:	4511                	li	a0,4
    800237f6:	f12dd0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800237fa:	4785                	li	a5,1
    800237fc:	17ea                	slli	a5,a5,0x3a
    800237fe:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    80023802:	60c7b073          	csrc	hstateen0,a5

    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80023806:	30c025f3          	csrr	a1,mstateen0
    8002380a:	00015517          	auipc	a0,0x15
    8002380e:	fbe50513          	addi	a0,a0,-66 # 800387c8 <__func__.0+0x8ad8>
    80023812:	07b090ef          	jal	8002d08c <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80023816:	60c025f3          	csrr	a1,hstateen0
    8002381a:	00015517          	auipc	a0,0x15
    8002381e:	fbe50513          	addi	a0,a0,-66 # 800387d8 <__func__.0+0x8ae8>
    80023822:	06b090ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VS);
    80023826:	4509                	li	a0,2
    80023828:	ee0dd0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002382c:	de0dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023830:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023834:	81bdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss stopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023838:	08200593          	li	a1,130
    8002383c:	00015617          	auipc	a2,0x15
    80023840:	35c60613          	addi	a2,a2,860 # 80038b98 <__func__.0+0x8ea8>
    80023844:	0000c517          	auipc	a0,0xc
    80023848:	7ac50513          	addi	a0,a0,1964 # 8002fff0 <__func__.0+0x300>
    8002384c:	041090ef          	jal	8002d08c <printf>
    80023850:	00034797          	auipc	a5,0x34
    80023854:	7c17c783          	lbu	a5,1985(a5) # 80058011 <excpt+0x1>
    80023858:	00034497          	auipc	s1,0x34
    8002385c:	7b848493          	addi	s1,s1,1976 # 80058010 <excpt>
    80023860:	0000c597          	auipc	a1,0xc
    80023864:	76858593          	addi	a1,a1,1896 # 8002ffc8 <__func__.0+0x2d8>
    80023868:	cf89                	beqz	a5,80023882 <stateen_IMSIC_test_4+0xb0>
    8002386a:	6498                	ld	a4,8(s1)
    8002386c:	47d9                	li	a5,22
    8002386e:	0000c597          	auipc	a1,0xc
    80023872:	74a58593          	addi	a1,a1,1866 # 8002ffb8 <__func__.0+0x2c8>
    80023876:	00f70663          	beq	a4,a5,80023882 <stateen_IMSIC_test_4+0xb0>
    8002387a:	0000c597          	auipc	a1,0xc
    8002387e:	74e58593          	addi	a1,a1,1870 # 8002ffc8 <__func__.0+0x2d8>
    80023882:	0000c517          	auipc	a0,0xc
    80023886:	78650513          	addi	a0,a0,1926 # 80030008 <__func__.0+0x318>
    8002388a:	003090ef          	jal	8002d08c <printf>
    8002388e:	00034797          	auipc	a5,0x34
    80023892:	7837c783          	lbu	a5,1923(a5) # 80058011 <excpt+0x1>
    80023896:	c789                	beqz	a5,800238a0 <stateen_IMSIC_test_4+0xce>
    80023898:	6498                	ld	a4,8(s1)
    8002389a:	47d9                	li	a5,22
    8002389c:	00f70c63          	beq	a4,a5,800238b4 <stateen_IMSIC_test_4+0xe2>
    800238a0:	0000c517          	auipc	a0,0xc
    800238a4:	77050513          	addi	a0,a0,1904 # 80030010 <__func__.0+0x320>
    800238a8:	7e4090ef          	jal	8002d08c <printf>
    800238ac:	02900513          	li	a0,41
    800238b0:	4ca080ef          	jal	8002bd7a <putchar>
    800238b4:	4529                	li	a0,10
    800238b6:	4c4080ef          	jal	8002bd7a <putchar>
    800238ba:	00034797          	auipc	a5,0x34
    800238be:	7577c783          	lbu	a5,1879(a5) # 80058011 <excpt+0x1>
    800238c2:	4401                	li	s0,0
    800238c4:	c789                	beqz	a5,800238ce <stateen_IMSIC_test_4+0xfc>
    800238c6:	6480                	ld	s0,8(s1)
    800238c8:	1429                	addi	s0,s0,-22
    800238ca:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800238ce:	4509                	li	a0,2
    800238d0:	e38dd0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800238d4:	d38dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800238d8:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800238dc:	f72dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800238e0:	08200593          	li	a1,130
    800238e4:	00015617          	auipc	a2,0x15
    800238e8:	30c60613          	addi	a2,a2,780 # 80038bf0 <__func__.0+0x8f00>
    800238ec:	0000c517          	auipc	a0,0xc
    800238f0:	70450513          	addi	a0,a0,1796 # 8002fff0 <__func__.0+0x300>
    800238f4:	798090ef          	jal	8002d08c <printf>
    800238f8:	00034797          	auipc	a5,0x34
    800238fc:	7197c783          	lbu	a5,1817(a5) # 80058011 <excpt+0x1>
    80023900:	0000c597          	auipc	a1,0xc
    80023904:	6c858593          	addi	a1,a1,1736 # 8002ffc8 <__func__.0+0x2d8>
    80023908:	cf89                	beqz	a5,80023922 <stateen_IMSIC_test_4+0x150>
    8002390a:	6498                	ld	a4,8(s1)
    8002390c:	47d9                	li	a5,22
    8002390e:	0000c597          	auipc	a1,0xc
    80023912:	6aa58593          	addi	a1,a1,1706 # 8002ffb8 <__func__.0+0x2c8>
    80023916:	00f70663          	beq	a4,a5,80023922 <stateen_IMSIC_test_4+0x150>
    8002391a:	0000c597          	auipc	a1,0xc
    8002391e:	6ae58593          	addi	a1,a1,1710 # 8002ffc8 <__func__.0+0x2d8>
    80023922:	0000c517          	auipc	a0,0xc
    80023926:	6e650513          	addi	a0,a0,1766 # 80030008 <__func__.0+0x318>
    8002392a:	762090ef          	jal	8002d08c <printf>
    8002392e:	00034797          	auipc	a5,0x34
    80023932:	6e37c783          	lbu	a5,1763(a5) # 80058011 <excpt+0x1>
    80023936:	c789                	beqz	a5,80023940 <stateen_IMSIC_test_4+0x16e>
    80023938:	6498                	ld	a4,8(s1)
    8002393a:	47d9                	li	a5,22
    8002393c:	00f70c63          	beq	a4,a5,80023954 <stateen_IMSIC_test_4+0x182>
    80023940:	0000c517          	auipc	a0,0xc
    80023944:	6d050513          	addi	a0,a0,1744 # 80030010 <__func__.0+0x320>
    80023948:	744090ef          	jal	8002d08c <printf>
    8002394c:	02900513          	li	a0,41
    80023950:	42a080ef          	jal	8002bd7a <putchar>
    80023954:	4529                	li	a0,10
    80023956:	424080ef          	jal	8002bd7a <putchar>
    8002395a:	c015                	beqz	s0,8002397e <stateen_IMSIC_test_4+0x1ac>
    8002395c:	00034417          	auipc	s0,0x34
    80023960:	6b544403          	lbu	s0,1717(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80023964:	0000c597          	auipc	a1,0xc
    80023968:	66458593          	addi	a1,a1,1636 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    8002396c:	cc11                	beqz	s0,80023988 <stateen_IMSIC_test_4+0x1b6>
    8002396e:	6498                	ld	a4,8(s1)
    80023970:	47d9                	li	a5,22
    TEST_END();
    80023972:	0000c597          	auipc	a1,0xc
    80023976:	64658593          	addi	a1,a1,1606 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    8002397a:	00f70763          	beq	a4,a5,80023988 <stateen_IMSIC_test_4+0x1b6>
    8002397e:	4401                	li	s0,0
    TEST_END();
    80023980:	0000c597          	auipc	a1,0xc
    80023984:	64858593          	addi	a1,a1,1608 # 8002ffc8 <__func__.0+0x2d8>
    80023988:	0000c517          	auipc	a0,0xc
    8002398c:	6e850513          	addi	a0,a0,1768 # 80030070 <__func__.0+0x380>
    80023990:	6fc090ef          	jal	8002d08c <printf>
    80023994:	4511                	li	a0,4
    80023996:	d72dd0ef          	jal	80000f08 <goto_priv>
    8002399a:	f39dd0ef          	jal	800018d2 <reset_state>

}
    8002399e:	60e2                	ld	ra,24(sp)
    800239a0:	8522                	mv	a0,s0
    800239a2:	6442                	ld	s0,16(sp)
    800239a4:	64a2                	ld	s1,8(sp)
    800239a6:	6105                	addi	sp,sp,32
    800239a8:	8082                	ret

00000000800239aa <stateen_IMSIC_test_5>:

bool stateen_IMSIC_test_5(){
    800239aa:	1101                	addi	sp,sp,-32

    //当mstateen.IMSIC=0,hs mode 不可访问stopei、vstopei寄存器

    TEST_START();
    800239ac:	0000c597          	auipc	a1,0xc
    800239b0:	ddc58593          	addi	a1,a1,-548 # 8002f788 <__func__.25>
    800239b4:	0000c517          	auipc	a0,0xc
    800239b8:	62450513          	addi	a0,a0,1572 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_IMSIC_test_5(){
    800239bc:	ec06                	sd	ra,24(sp)
    800239be:	e822                	sd	s0,16(sp)
    800239c0:	e426                	sd	s1,8(sp)
    TEST_START();
    800239c2:	6ca090ef          	jal	8002d08c <printf>
    800239c6:	4529                	li	a0,10
    800239c8:	3b2080ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    800239cc:	4511                	li	a0,4
    800239ce:	d3add0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800239d2:	4785                	li	a5,1
    800239d4:	17ea                	slli	a5,a5,0x3a
    800239d6:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_HS);
    800239da:	450d                	li	a0,3
    800239dc:	d2cdd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800239e0:	c2cdd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800239e4:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800239e8:	e66dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss stopei register cause to illegal except when mstateen.imsic=0",
    800239ec:	08200593          	li	a1,130
    800239f0:	00015617          	auipc	a2,0x15
    800239f4:	25860613          	addi	a2,a2,600 # 80038c48 <__func__.0+0x8f58>
    800239f8:	0000c517          	auipc	a0,0xc
    800239fc:	5f850513          	addi	a0,a0,1528 # 8002fff0 <__func__.0+0x300>
    80023a00:	68c090ef          	jal	8002d08c <printf>
    80023a04:	00034797          	auipc	a5,0x34
    80023a08:	60d7c783          	lbu	a5,1549(a5) # 80058011 <excpt+0x1>
    80023a0c:	00034497          	auipc	s1,0x34
    80023a10:	60448493          	addi	s1,s1,1540 # 80058010 <excpt>
    80023a14:	0000c597          	auipc	a1,0xc
    80023a18:	5b458593          	addi	a1,a1,1460 # 8002ffc8 <__func__.0+0x2d8>
    80023a1c:	cf89                	beqz	a5,80023a36 <stateen_IMSIC_test_5+0x8c>
    80023a1e:	6498                	ld	a4,8(s1)
    80023a20:	4789                	li	a5,2
    80023a22:	0000c597          	auipc	a1,0xc
    80023a26:	59658593          	addi	a1,a1,1430 # 8002ffb8 <__func__.0+0x2c8>
    80023a2a:	00f70663          	beq	a4,a5,80023a36 <stateen_IMSIC_test_5+0x8c>
    80023a2e:	0000c597          	auipc	a1,0xc
    80023a32:	59a58593          	addi	a1,a1,1434 # 8002ffc8 <__func__.0+0x2d8>
    80023a36:	0000c517          	auipc	a0,0xc
    80023a3a:	5d250513          	addi	a0,a0,1490 # 80030008 <__func__.0+0x318>
    80023a3e:	64e090ef          	jal	8002d08c <printf>
    80023a42:	00034797          	auipc	a5,0x34
    80023a46:	5cf7c783          	lbu	a5,1487(a5) # 80058011 <excpt+0x1>
    80023a4a:	c789                	beqz	a5,80023a54 <stateen_IMSIC_test_5+0xaa>
    80023a4c:	6498                	ld	a4,8(s1)
    80023a4e:	4789                	li	a5,2
    80023a50:	00f70c63          	beq	a4,a5,80023a68 <stateen_IMSIC_test_5+0xbe>
    80023a54:	0000c517          	auipc	a0,0xc
    80023a58:	5bc50513          	addi	a0,a0,1468 # 80030010 <__func__.0+0x320>
    80023a5c:	630090ef          	jal	8002d08c <printf>
    80023a60:	02900513          	li	a0,41
    80023a64:	316080ef          	jal	8002bd7a <putchar>
    80023a68:	4529                	li	a0,10
    80023a6a:	310080ef          	jal	8002bd7a <putchar>
    80023a6e:	00034797          	auipc	a5,0x34
    80023a72:	5a37c783          	lbu	a5,1443(a5) # 80058011 <excpt+0x1>
    80023a76:	4401                	li	s0,0
    80023a78:	c789                	beqz	a5,80023a82 <stateen_IMSIC_test_5+0xd8>
    80023a7a:	6480                	ld	s0,8(s1)
    80023a7c:	1479                	addi	s0,s0,-2
    80023a7e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80023a82:	450d                	li	a0,3
    80023a84:	c84dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023a88:	b84dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023a8c:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023a90:	dbedd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023a94:	08200593          	li	a1,130
    80023a98:	00015617          	auipc	a2,0x15
    80023a9c:	20060613          	addi	a2,a2,512 # 80038c98 <__func__.0+0x8fa8>
    80023aa0:	0000c517          	auipc	a0,0xc
    80023aa4:	55050513          	addi	a0,a0,1360 # 8002fff0 <__func__.0+0x300>
    80023aa8:	5e4090ef          	jal	8002d08c <printf>
    80023aac:	00034797          	auipc	a5,0x34
    80023ab0:	5657c783          	lbu	a5,1381(a5) # 80058011 <excpt+0x1>
    80023ab4:	0000c597          	auipc	a1,0xc
    80023ab8:	51458593          	addi	a1,a1,1300 # 8002ffc8 <__func__.0+0x2d8>
    80023abc:	cf89                	beqz	a5,80023ad6 <stateen_IMSIC_test_5+0x12c>
    80023abe:	6498                	ld	a4,8(s1)
    80023ac0:	4789                	li	a5,2
    80023ac2:	0000c597          	auipc	a1,0xc
    80023ac6:	4f658593          	addi	a1,a1,1270 # 8002ffb8 <__func__.0+0x2c8>
    80023aca:	00f70663          	beq	a4,a5,80023ad6 <stateen_IMSIC_test_5+0x12c>
    80023ace:	0000c597          	auipc	a1,0xc
    80023ad2:	4fa58593          	addi	a1,a1,1274 # 8002ffc8 <__func__.0+0x2d8>
    80023ad6:	0000c517          	auipc	a0,0xc
    80023ada:	53250513          	addi	a0,a0,1330 # 80030008 <__func__.0+0x318>
    80023ade:	5ae090ef          	jal	8002d08c <printf>
    80023ae2:	00034797          	auipc	a5,0x34
    80023ae6:	52f7c783          	lbu	a5,1327(a5) # 80058011 <excpt+0x1>
    80023aea:	c789                	beqz	a5,80023af4 <stateen_IMSIC_test_5+0x14a>
    80023aec:	6498                	ld	a4,8(s1)
    80023aee:	4789                	li	a5,2
    80023af0:	00f70c63          	beq	a4,a5,80023b08 <stateen_IMSIC_test_5+0x15e>
    80023af4:	0000c517          	auipc	a0,0xc
    80023af8:	51c50513          	addi	a0,a0,1308 # 80030010 <__func__.0+0x320>
    80023afc:	590090ef          	jal	8002d08c <printf>
    80023b00:	02900513          	li	a0,41
    80023b04:	276080ef          	jal	8002bd7a <putchar>
    80023b08:	4529                	li	a0,10
    80023b0a:	270080ef          	jal	8002bd7a <putchar>
    80023b0e:	c015                	beqz	s0,80023b32 <stateen_IMSIC_test_5+0x188>
    80023b10:	00034417          	auipc	s0,0x34
    80023b14:	50144403          	lbu	s0,1281(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80023b18:	0000c597          	auipc	a1,0xc
    80023b1c:	4b058593          	addi	a1,a1,1200 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023b20:	cc11                	beqz	s0,80023b3c <stateen_IMSIC_test_5+0x192>
    80023b22:	6498                	ld	a4,8(s1)
    80023b24:	4789                	li	a5,2
    TEST_END();
    80023b26:	0000c597          	auipc	a1,0xc
    80023b2a:	49258593          	addi	a1,a1,1170 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023b2e:	00f70763          	beq	a4,a5,80023b3c <stateen_IMSIC_test_5+0x192>
    80023b32:	4401                	li	s0,0
    TEST_END();
    80023b34:	0000c597          	auipc	a1,0xc
    80023b38:	49458593          	addi	a1,a1,1172 # 8002ffc8 <__func__.0+0x2d8>
    80023b3c:	0000c517          	auipc	a0,0xc
    80023b40:	53450513          	addi	a0,a0,1332 # 80030070 <__func__.0+0x380>
    80023b44:	548090ef          	jal	8002d08c <printf>
    80023b48:	4511                	li	a0,4
    80023b4a:	bbedd0ef          	jal	80000f08 <goto_priv>
    80023b4e:	d85dd0ef          	jal	800018d2 <reset_state>

}
    80023b52:	60e2                	ld	ra,24(sp)
    80023b54:	8522                	mv	a0,s0
    80023b56:	6442                	ld	s0,16(sp)
    80023b58:	64a2                	ld	s1,8(sp)
    80023b5a:	6105                	addi	sp,sp,32
    80023b5c:	8082                	ret

0000000080023b5e <stateen_IMSIC_test_6>:


bool stateen_IMSIC_test_6(){
    80023b5e:	1101                	addi	sp,sp,-32

    TEST_START();
    80023b60:	0000c597          	auipc	a1,0xc
    80023b64:	c4058593          	addi	a1,a1,-960 # 8002f7a0 <__func__.24>
    80023b68:	0000c517          	auipc	a0,0xc
    80023b6c:	47050513          	addi	a0,a0,1136 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_IMSIC_test_6(){
    80023b70:	ec06                	sd	ra,24(sp)
    80023b72:	e822                	sd	s0,16(sp)
    80023b74:	e426                	sd	s1,8(sp)
    TEST_START();
    80023b76:	516090ef          	jal	8002d08c <printf>
    80023b7a:	4529                	li	a0,10
    80023b7c:	1fe080ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80023b80:	4511                	li	a0,4
    80023b82:	b86dd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.IMSIC=1,v=0时,可访问stopei、vstopei寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023b86:	4785                	li	a5,1
    80023b88:	17ea                	slli	a5,a5,0x3a
    80023b8a:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    80023b8e:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80023b92:	450d                	li	a0,3
    80023b94:	b74dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023b98:	a74dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023b9c:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023ba0:	caedd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss stopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023ba4:	08200593          	li	a1,130
    80023ba8:	00015617          	auipc	a2,0x15
    80023bac:	14060613          	addi	a2,a2,320 # 80038ce8 <__func__.0+0x8ff8>
    80023bb0:	0000c517          	auipc	a0,0xc
    80023bb4:	44050513          	addi	a0,a0,1088 # 8002fff0 <__func__.0+0x300>
    80023bb8:	4d4090ef          	jal	8002d08c <printf>
    80023bbc:	00034797          	auipc	a5,0x34
    80023bc0:	4557c783          	lbu	a5,1109(a5) # 80058011 <excpt+0x1>
    80023bc4:	0000c597          	auipc	a1,0xc
    80023bc8:	3f458593          	addi	a1,a1,1012 # 8002ffb8 <__func__.0+0x2c8>
    80023bcc:	c789                	beqz	a5,80023bd6 <stateen_IMSIC_test_6+0x78>
    80023bce:	0000c597          	auipc	a1,0xc
    80023bd2:	3fa58593          	addi	a1,a1,1018 # 8002ffc8 <__func__.0+0x2d8>
    80023bd6:	0000c517          	auipc	a0,0xc
    80023bda:	43250513          	addi	a0,a0,1074 # 80030008 <__func__.0+0x318>
    80023bde:	4ae090ef          	jal	8002d08c <printf>
    80023be2:	00034797          	auipc	a5,0x34
    80023be6:	42f7c783          	lbu	a5,1071(a5) # 80058011 <excpt+0x1>
    80023bea:	2c079e63          	bnez	a5,80023ec6 <stateen_IMSIC_test_6+0x368>
    80023bee:	4529                	li	a0,10
    80023bf0:	18a080ef          	jal	8002bd7a <putchar>
    80023bf4:	00034497          	auipc	s1,0x34
    80023bf8:	41d4c483          	lbu	s1,1053(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_VSTOPEI);
    80023bfc:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023c00:	c4edd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss vstopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023c04:	08200593          	li	a1,130
    80023c08:	00015617          	auipc	a2,0x15
    80023c0c:	13860613          	addi	a2,a2,312 # 80038d40 <__func__.0+0x9050>
    80023c10:	0000c517          	auipc	a0,0xc
    80023c14:	3e050513          	addi	a0,a0,992 # 8002fff0 <__func__.0+0x300>
    80023c18:	474090ef          	jal	8002d08c <printf>
    80023c1c:	00034797          	auipc	a5,0x34
    80023c20:	3f57c783          	lbu	a5,1013(a5) # 80058011 <excpt+0x1>
    80023c24:	0000c597          	auipc	a1,0xc
    80023c28:	3a458593          	addi	a1,a1,932 # 8002ffc8 <__func__.0+0x2d8>
    80023c2c:	e789                	bnez	a5,80023c36 <stateen_IMSIC_test_6+0xd8>
    80023c2e:	0000c597          	auipc	a1,0xc
    80023c32:	38a58593          	addi	a1,a1,906 # 8002ffb8 <__func__.0+0x2c8>
    80023c36:	0000c517          	auipc	a0,0xc
    80023c3a:	3d250513          	addi	a0,a0,978 # 80030008 <__func__.0+0x318>
    80023c3e:	44e090ef          	jal	8002d08c <printf>
    80023c42:	00034797          	auipc	a5,0x34
    80023c46:	3cf7c783          	lbu	a5,975(a5) # 80058011 <excpt+0x1>
    80023c4a:	26079363          	bnez	a5,80023eb0 <stateen_IMSIC_test_6+0x352>
    80023c4e:	4529                	li	a0,10
    80023c50:	12a080ef          	jal	8002bd7a <putchar>
    80023c54:	4401                	li	s0,0
    80023c56:	e499                	bnez	s1,80023c64 <stateen_IMSIC_test_6+0x106>
    80023c58:	00034417          	auipc	s0,0x34
    80023c5c:	3b944403          	lbu	s0,953(s0) # 80058011 <excpt+0x1>
    80023c60:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80023c64:	4505                	li	a0,1
    80023c66:	aa2dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023c6a:	9a2dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023c6e:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023c72:	bdcdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss stopei register successful when mstateen.imsic=1  hstateen.imsic=0 sstateen.imsic=0 ",
    80023c76:	08200593          	li	a1,130
    80023c7a:	00015617          	auipc	a2,0x15
    80023c7e:	11e60613          	addi	a2,a2,286 # 80038d98 <__func__.0+0x90a8>
    80023c82:	0000c517          	auipc	a0,0xc
    80023c86:	36e50513          	addi	a0,a0,878 # 8002fff0 <__func__.0+0x300>
    80023c8a:	402090ef          	jal	8002d08c <printf>
    80023c8e:	00034797          	auipc	a5,0x34
    80023c92:	3837c783          	lbu	a5,899(a5) # 80058011 <excpt+0x1>
    80023c96:	0000c597          	auipc	a1,0xc
    80023c9a:	33258593          	addi	a1,a1,818 # 8002ffc8 <__func__.0+0x2d8>
    80023c9e:	e789                	bnez	a5,80023ca8 <stateen_IMSIC_test_6+0x14a>
    80023ca0:	0000c597          	auipc	a1,0xc
    80023ca4:	31858593          	addi	a1,a1,792 # 8002ffb8 <__func__.0+0x2c8>
    80023ca8:	0000c517          	auipc	a0,0xc
    80023cac:	36050513          	addi	a0,a0,864 # 80030008 <__func__.0+0x318>
    80023cb0:	3dc090ef          	jal	8002d08c <printf>
    80023cb4:	00034797          	auipc	a5,0x34
    80023cb8:	35d7c783          	lbu	a5,861(a5) # 80058011 <excpt+0x1>
    80023cbc:	1c079f63          	bnez	a5,80023e9a <stateen_IMSIC_test_6+0x33c>
    80023cc0:	4529                	li	a0,10
    80023cc2:	0b8080ef          	jal	8002bd7a <putchar>
    80023cc6:	c419                	beqz	s0,80023cd4 <stateen_IMSIC_test_6+0x176>
    80023cc8:	00034417          	auipc	s0,0x34
    80023ccc:	34944403          	lbu	s0,841(s0) # 80058011 <excpt+0x1>
    80023cd0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80023cd4:	4505                	li	a0,1
    80023cd6:	a32dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023cda:	932dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023cde:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023ce2:	b6cdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0 sstateen.imsic=0",
    80023ce6:	08200593          	li	a1,130
    80023cea:	00015617          	auipc	a2,0x15
    80023cee:	11660613          	addi	a2,a2,278 # 80038e00 <__func__.0+0x9110>
    80023cf2:	0000c517          	auipc	a0,0xc
    80023cf6:	2fe50513          	addi	a0,a0,766 # 8002fff0 <__func__.0+0x300>
    80023cfa:	392090ef          	jal	8002d08c <printf>
    80023cfe:	00034797          	auipc	a5,0x34
    80023d02:	3137c783          	lbu	a5,787(a5) # 80058011 <excpt+0x1>
    80023d06:	0000c597          	auipc	a1,0xc
    80023d0a:	2c258593          	addi	a1,a1,706 # 8002ffc8 <__func__.0+0x2d8>
    80023d0e:	e789                	bnez	a5,80023d18 <stateen_IMSIC_test_6+0x1ba>
    80023d10:	0000c597          	auipc	a1,0xc
    80023d14:	2a858593          	addi	a1,a1,680 # 8002ffb8 <__func__.0+0x2c8>
    80023d18:	0000c517          	auipc	a0,0xc
    80023d1c:	2f050513          	addi	a0,a0,752 # 80030008 <__func__.0+0x318>
    80023d20:	36c090ef          	jal	8002d08c <printf>
    80023d24:	00034797          	auipc	a5,0x34
    80023d28:	2ed7c783          	lbu	a5,749(a5) # 80058011 <excpt+0x1>
    80023d2c:	14079c63          	bnez	a5,80023e84 <stateen_IMSIC_test_6+0x326>
    80023d30:	4529                	li	a0,10
    80023d32:	048080ef          	jal	8002bd7a <putchar>
    80023d36:	c419                	beqz	s0,80023d44 <stateen_IMSIC_test_6+0x1e6>
    80023d38:	00034417          	auipc	s0,0x34
    80023d3c:	2d944403          	lbu	s0,729(s0) # 80058011 <excpt+0x1>
    80023d40:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80023d44:	4511                	li	a0,4
    80023d46:	9c2dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023d4a:	8c2dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023d4e:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023d52:	afcdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023d56:	08200593          	li	a1,130
    80023d5a:	00015617          	auipc	a2,0x15
    80023d5e:	10e60613          	addi	a2,a2,270 # 80038e68 <__func__.0+0x9178>
    80023d62:	0000c517          	auipc	a0,0xc
    80023d66:	28e50513          	addi	a0,a0,654 # 8002fff0 <__func__.0+0x300>
    80023d6a:	322090ef          	jal	8002d08c <printf>
    80023d6e:	00034797          	auipc	a5,0x34
    80023d72:	2a37c783          	lbu	a5,675(a5) # 80058011 <excpt+0x1>
    80023d76:	0000c597          	auipc	a1,0xc
    80023d7a:	25258593          	addi	a1,a1,594 # 8002ffc8 <__func__.0+0x2d8>
    80023d7e:	e789                	bnez	a5,80023d88 <stateen_IMSIC_test_6+0x22a>
    80023d80:	0000c597          	auipc	a1,0xc
    80023d84:	23858593          	addi	a1,a1,568 # 8002ffb8 <__func__.0+0x2c8>
    80023d88:	0000c517          	auipc	a0,0xc
    80023d8c:	28050513          	addi	a0,a0,640 # 80030008 <__func__.0+0x318>
    80023d90:	2fc090ef          	jal	8002d08c <printf>
    80023d94:	00034797          	auipc	a5,0x34
    80023d98:	27d7c783          	lbu	a5,637(a5) # 80058011 <excpt+0x1>
    80023d9c:	0c079963          	bnez	a5,80023e6e <stateen_IMSIC_test_6+0x310>
    80023da0:	4529                	li	a0,10
    80023da2:	7d9070ef          	jal	8002bd7a <putchar>
    80023da6:	c419                	beqz	s0,80023db4 <stateen_IMSIC_test_6+0x256>
    80023da8:	00034417          	auipc	s0,0x34
    80023dac:	26944403          	lbu	s0,617(s0) # 80058011 <excpt+0x1>
    80023db0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80023db4:	4511                	li	a0,4
    80023db6:	952dd0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023dba:	852dd0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023dbe:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023dc2:	a8cdd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023dc6:	08200593          	li	a1,130
    80023dca:	00015617          	auipc	a2,0x15
    80023dce:	0f660613          	addi	a2,a2,246 # 80038ec0 <__func__.0+0x91d0>
    80023dd2:	0000c517          	auipc	a0,0xc
    80023dd6:	21e50513          	addi	a0,a0,542 # 8002fff0 <__func__.0+0x300>
    80023dda:	2b2090ef          	jal	8002d08c <printf>
    80023dde:	00034797          	auipc	a5,0x34
    80023de2:	2337c783          	lbu	a5,563(a5) # 80058011 <excpt+0x1>
    80023de6:	0000c597          	auipc	a1,0xc
    80023dea:	1e258593          	addi	a1,a1,482 # 8002ffc8 <__func__.0+0x2d8>
    80023dee:	e789                	bnez	a5,80023df8 <stateen_IMSIC_test_6+0x29a>
    80023df0:	0000c597          	auipc	a1,0xc
    80023df4:	1c858593          	addi	a1,a1,456 # 8002ffb8 <__func__.0+0x2c8>
    80023df8:	0000c517          	auipc	a0,0xc
    80023dfc:	21050513          	addi	a0,a0,528 # 80030008 <__func__.0+0x318>
    80023e00:	28c090ef          	jal	8002d08c <printf>
    80023e04:	00034797          	auipc	a5,0x34
    80023e08:	20d7c783          	lbu	a5,525(a5) # 80058011 <excpt+0x1>
    80023e0c:	e7b1                	bnez	a5,80023e58 <stateen_IMSIC_test_6+0x2fa>
    80023e0e:	4529                	li	a0,10
    80023e10:	76b070ef          	jal	8002bd7a <putchar>
    80023e14:	c411                	beqz	s0,80023e20 <stateen_IMSIC_test_6+0x2c2>
    80023e16:	00034797          	auipc	a5,0x34
    80023e1a:	1fb7c783          	lbu	a5,507(a5) # 80058011 <excpt+0x1>
    80023e1e:	c79d                	beqz	a5,80023e4c <stateen_IMSIC_test_6+0x2ee>
    80023e20:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80023e22:	0000c597          	auipc	a1,0xc
    80023e26:	1a658593          	addi	a1,a1,422 # 8002ffc8 <__func__.0+0x2d8>
    80023e2a:	0000c517          	auipc	a0,0xc
    80023e2e:	24650513          	addi	a0,a0,582 # 80030070 <__func__.0+0x380>
    80023e32:	25a090ef          	jal	8002d08c <printf>
    80023e36:	4511                	li	a0,4
    80023e38:	8d0dd0ef          	jal	80000f08 <goto_priv>
    80023e3c:	a97dd0ef          	jal	800018d2 <reset_state>

}
    80023e40:	60e2                	ld	ra,24(sp)
    80023e42:	8522                	mv	a0,s0
    80023e44:	6442                	ld	s0,16(sp)
    80023e46:	64a2                	ld	s1,8(sp)
    80023e48:	6105                	addi	sp,sp,32
    80023e4a:	8082                	ret
    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023e4c:	4405                	li	s0,1
    TEST_END();
    80023e4e:	0000c597          	auipc	a1,0xc
    80023e52:	16a58593          	addi	a1,a1,362 # 8002ffb8 <__func__.0+0x2c8>
    80023e56:	bfd1                	j	80023e2a <stateen_IMSIC_test_6+0x2cc>
    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023e58:	0000c517          	auipc	a0,0xc
    80023e5c:	1b850513          	addi	a0,a0,440 # 80030010 <__func__.0+0x320>
    80023e60:	22c090ef          	jal	8002d08c <printf>
    80023e64:	02900513          	li	a0,41
    80023e68:	713070ef          	jal	8002bd7a <putchar>
    80023e6c:	b74d                	j	80023e0e <stateen_IMSIC_test_6+0x2b0>
    TEST_ASSERT("m mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023e6e:	0000c517          	auipc	a0,0xc
    80023e72:	1a250513          	addi	a0,a0,418 # 80030010 <__func__.0+0x320>
    80023e76:	216090ef          	jal	8002d08c <printf>
    80023e7a:	02900513          	li	a0,41
    80023e7e:	6fd070ef          	jal	8002bd7a <putchar>
    80023e82:	bf39                	j	80023da0 <stateen_IMSIC_test_6+0x242>
    TEST_ASSERT("hu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0 sstateen.imsic=0",
    80023e84:	0000c517          	auipc	a0,0xc
    80023e88:	18c50513          	addi	a0,a0,396 # 80030010 <__func__.0+0x320>
    80023e8c:	200090ef          	jal	8002d08c <printf>
    80023e90:	02900513          	li	a0,41
    80023e94:	6e7070ef          	jal	8002bd7a <putchar>
    80023e98:	bd61                	j	80023d30 <stateen_IMSIC_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss stopei register successful when mstateen.imsic=1  hstateen.imsic=0 sstateen.imsic=0 ",
    80023e9a:	0000c517          	auipc	a0,0xc
    80023e9e:	17650513          	addi	a0,a0,374 # 80030010 <__func__.0+0x320>
    80023ea2:	1ea090ef          	jal	8002d08c <printf>
    80023ea6:	02900513          	li	a0,41
    80023eaa:	6d1070ef          	jal	8002bd7a <putchar>
    80023eae:	bd09                	j	80023cc0 <stateen_IMSIC_test_6+0x162>
    TEST_ASSERT("hs mode accesss vstopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023eb0:	0000c517          	auipc	a0,0xc
    80023eb4:	16050513          	addi	a0,a0,352 # 80030010 <__func__.0+0x320>
    80023eb8:	1d4090ef          	jal	8002d08c <printf>
    80023ebc:	02900513          	li	a0,41
    80023ec0:	6bb070ef          	jal	8002bd7a <putchar>
    80023ec4:	b369                	j	80023c4e <stateen_IMSIC_test_6+0xf0>
    TEST_ASSERT("hs mode accesss stopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023ec6:	0000c517          	auipc	a0,0xc
    80023eca:	14a50513          	addi	a0,a0,330 # 80030010 <__func__.0+0x320>
    80023ece:	1be090ef          	jal	8002d08c <printf>
    80023ed2:	02900513          	li	a0,41
    80023ed6:	6a5070ef          	jal	8002bd7a <putchar>
    80023eda:	bb11                	j	80023bee <stateen_IMSIC_test_6+0x90>

0000000080023edc <stateen_IMSIC_test_7>:


bool stateen_IMSIC_test_7(){
    80023edc:	1101                	addi	sp,sp,-32

    TEST_START();
    80023ede:	0000c597          	auipc	a1,0xc
    80023ee2:	8da58593          	addi	a1,a1,-1830 # 8002f7b8 <__func__.23>
    80023ee6:	0000c517          	auipc	a0,0xc
    80023eea:	0f250513          	addi	a0,a0,242 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_IMSIC_test_7(){
    80023eee:	ec06                	sd	ra,24(sp)
    80023ef0:	e822                	sd	s0,16(sp)
    80023ef2:	e426                	sd	s1,8(sp)
    TEST_START();
    80023ef4:	198090ef          	jal	8002d08c <printf>
    80023ef8:	4529                	li	a0,10
    80023efa:	681070ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80023efe:	4511                	li	a0,4
    80023f00:	808dd0ef          	jal	80000f08 <goto_priv>
    //当mstateen.IMSIC=1 hstateen.IMSIC=1,v=1 时可访问stopei、vstopei寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023f04:	4785                	li	a5,1
    80023f06:	17ea                	slli	a5,a5,0x3a
    80023f08:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    80023f0c:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    80023f10:	4509                	li	a0,2
    80023f12:	ff7dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023f16:	ef7dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023f1a:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023f1e:	930dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f22:	08200593          	li	a1,130
    80023f26:	00015617          	auipc	a2,0x15
    80023f2a:	ff260613          	addi	a2,a2,-14 # 80038f18 <__func__.0+0x9228>
    80023f2e:	0000c517          	auipc	a0,0xc
    80023f32:	0c250513          	addi	a0,a0,194 # 8002fff0 <__func__.0+0x300>
    80023f36:	156090ef          	jal	8002d08c <printf>
    80023f3a:	00034797          	auipc	a5,0x34
    80023f3e:	0d77c783          	lbu	a5,215(a5) # 80058011 <excpt+0x1>
    80023f42:	0000c597          	auipc	a1,0xc
    80023f46:	07658593          	addi	a1,a1,118 # 8002ffb8 <__func__.0+0x2c8>
    80023f4a:	c789                	beqz	a5,80023f54 <stateen_IMSIC_test_7+0x78>
    80023f4c:	0000c597          	auipc	a1,0xc
    80023f50:	07c58593          	addi	a1,a1,124 # 8002ffc8 <__func__.0+0x2d8>
    80023f54:	0000c517          	auipc	a0,0xc
    80023f58:	0b450513          	addi	a0,a0,180 # 80030008 <__func__.0+0x318>
    80023f5c:	130090ef          	jal	8002d08c <printf>
    80023f60:	00034797          	auipc	a5,0x34
    80023f64:	0b17c783          	lbu	a5,177(a5) # 80058011 <excpt+0x1>
    80023f68:	1c079d63          	bnez	a5,80024142 <stateen_IMSIC_test_7+0x266>
    80023f6c:	4529                	li	a0,10
    80023f6e:	60d070ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80023f72:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f74:	00034497          	auipc	s1,0x34
    80023f78:	09d4c483          	lbu	s1,157(s1) # 80058011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80023f7c:	f8ddc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023f80:	e8ddc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023f84:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023f88:	8c6dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f8c:	08200593          	li	a1,130
    80023f90:	00015617          	auipc	a2,0x15
    80023f94:	fe060613          	addi	a2,a2,-32 # 80038f70 <__func__.0+0x9280>
    80023f98:	0000c517          	auipc	a0,0xc
    80023f9c:	05850513          	addi	a0,a0,88 # 8002fff0 <__func__.0+0x300>
    80023fa0:	0ec090ef          	jal	8002d08c <printf>
    80023fa4:	00034797          	auipc	a5,0x34
    80023fa8:	06d7c783          	lbu	a5,109(a5) # 80058011 <excpt+0x1>
    80023fac:	0000c597          	auipc	a1,0xc
    80023fb0:	01c58593          	addi	a1,a1,28 # 8002ffc8 <__func__.0+0x2d8>
    80023fb4:	e789                	bnez	a5,80023fbe <stateen_IMSIC_test_7+0xe2>
    80023fb6:	0000c597          	auipc	a1,0xc
    80023fba:	00258593          	addi	a1,a1,2 # 8002ffb8 <__func__.0+0x2c8>
    80023fbe:	0000c517          	auipc	a0,0xc
    80023fc2:	04a50513          	addi	a0,a0,74 # 80030008 <__func__.0+0x318>
    80023fc6:	0c6090ef          	jal	8002d08c <printf>
    80023fca:	00034797          	auipc	a5,0x34
    80023fce:	0477c783          	lbu	a5,71(a5) # 80058011 <excpt+0x1>
    80023fd2:	14079d63          	bnez	a5,8002412c <stateen_IMSIC_test_7+0x250>
    80023fd6:	4529                	li	a0,10
    80023fd8:	5a3070ef          	jal	8002bd7a <putchar>
    80023fdc:	4401                	li	s0,0
    80023fde:	e499                	bnez	s1,80023fec <stateen_IMSIC_test_7+0x110>
    80023fe0:	00034417          	auipc	s0,0x34
    80023fe4:	03144403          	lbu	s0,49(s0) # 80058011 <excpt+0x1>
    80023fe8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80023fec:	4501                	li	a0,0
    80023fee:	f1bdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023ff2:	e1bdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023ff6:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023ffa:	854dd0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023ffe:	08200593          	li	a1,130
    80024002:	00015617          	auipc	a2,0x15
    80024006:	fc660613          	addi	a2,a2,-58 # 80038fc8 <__func__.0+0x92d8>
    8002400a:	0000c517          	auipc	a0,0xc
    8002400e:	fe650513          	addi	a0,a0,-26 # 8002fff0 <__func__.0+0x300>
    80024012:	07a090ef          	jal	8002d08c <printf>
    80024016:	00034797          	auipc	a5,0x34
    8002401a:	ffb7c783          	lbu	a5,-5(a5) # 80058011 <excpt+0x1>
    8002401e:	0000c597          	auipc	a1,0xc
    80024022:	faa58593          	addi	a1,a1,-86 # 8002ffc8 <__func__.0+0x2d8>
    80024026:	e789                	bnez	a5,80024030 <stateen_IMSIC_test_7+0x154>
    80024028:	0000c597          	auipc	a1,0xc
    8002402c:	f9058593          	addi	a1,a1,-112 # 8002ffb8 <__func__.0+0x2c8>
    80024030:	0000c517          	auipc	a0,0xc
    80024034:	fd850513          	addi	a0,a0,-40 # 80030008 <__func__.0+0x318>
    80024038:	054090ef          	jal	8002d08c <printf>
    8002403c:	00034797          	auipc	a5,0x34
    80024040:	fd57c783          	lbu	a5,-43(a5) # 80058011 <excpt+0x1>
    80024044:	0c079963          	bnez	a5,80024116 <stateen_IMSIC_test_7+0x23a>
    80024048:	4529                	li	a0,10
    8002404a:	531070ef          	jal	8002bd7a <putchar>
    8002404e:	c419                	beqz	s0,8002405c <stateen_IMSIC_test_7+0x180>
    80024050:	00034417          	auipc	s0,0x34
    80024054:	fc144403          	lbu	s0,-63(s0) # 80058011 <excpt+0x1>
    80024058:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    8002405c:	4501                	li	a0,0
    8002405e:	eabdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024062:	dabdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80024066:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    8002406a:	fe5dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    8002406e:	08200593          	li	a1,130
    80024072:	00015617          	auipc	a2,0x15
    80024076:	fae60613          	addi	a2,a2,-82 # 80039020 <__func__.0+0x9330>
    8002407a:	0000c517          	auipc	a0,0xc
    8002407e:	f7650513          	addi	a0,a0,-138 # 8002fff0 <__func__.0+0x300>
    80024082:	00a090ef          	jal	8002d08c <printf>
    80024086:	00034797          	auipc	a5,0x34
    8002408a:	f8b7c783          	lbu	a5,-117(a5) # 80058011 <excpt+0x1>
    8002408e:	0000c597          	auipc	a1,0xc
    80024092:	f3a58593          	addi	a1,a1,-198 # 8002ffc8 <__func__.0+0x2d8>
    80024096:	e789                	bnez	a5,800240a0 <stateen_IMSIC_test_7+0x1c4>
    80024098:	0000c597          	auipc	a1,0xc
    8002409c:	f2058593          	addi	a1,a1,-224 # 8002ffb8 <__func__.0+0x2c8>
    800240a0:	0000c517          	auipc	a0,0xc
    800240a4:	f6850513          	addi	a0,a0,-152 # 80030008 <__func__.0+0x318>
    800240a8:	7e5080ef          	jal	8002d08c <printf>
    800240ac:	00034797          	auipc	a5,0x34
    800240b0:	f657c783          	lbu	a5,-155(a5) # 80058011 <excpt+0x1>
    800240b4:	e7b1                	bnez	a5,80024100 <stateen_IMSIC_test_7+0x224>
    800240b6:	4529                	li	a0,10
    800240b8:	4c3070ef          	jal	8002bd7a <putchar>
    800240bc:	c411                	beqz	s0,800240c8 <stateen_IMSIC_test_7+0x1ec>
    800240be:	00034797          	auipc	a5,0x34
    800240c2:	f537c783          	lbu	a5,-173(a5) # 80058011 <excpt+0x1>
    800240c6:	c79d                	beqz	a5,800240f4 <stateen_IMSIC_test_7+0x218>
    800240c8:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    800240ca:	0000c597          	auipc	a1,0xc
    800240ce:	efe58593          	addi	a1,a1,-258 # 8002ffc8 <__func__.0+0x2d8>
    800240d2:	0000c517          	auipc	a0,0xc
    800240d6:	f9e50513          	addi	a0,a0,-98 # 80030070 <__func__.0+0x380>
    800240da:	7b3080ef          	jal	8002d08c <printf>
    800240de:	4511                	li	a0,4
    800240e0:	e29dc0ef          	jal	80000f08 <goto_priv>
    800240e4:	feedd0ef          	jal	800018d2 <reset_state>
}
    800240e8:	60e2                	ld	ra,24(sp)
    800240ea:	8522                	mv	a0,s0
    800240ec:	6442                	ld	s0,16(sp)
    800240ee:	64a2                	ld	s1,8(sp)
    800240f0:	6105                	addi	sp,sp,32
    800240f2:	8082                	ret
    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    800240f4:	4405                	li	s0,1
    TEST_END();
    800240f6:	0000c597          	auipc	a1,0xc
    800240fa:	ec258593          	addi	a1,a1,-318 # 8002ffb8 <__func__.0+0x2c8>
    800240fe:	bfd1                	j	800240d2 <stateen_IMSIC_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80024100:	0000c517          	auipc	a0,0xc
    80024104:	f1050513          	addi	a0,a0,-240 # 80030010 <__func__.0+0x320>
    80024108:	785080ef          	jal	8002d08c <printf>
    8002410c:	02900513          	li	a0,41
    80024110:	46b070ef          	jal	8002bd7a <putchar>
    80024114:	b74d                	j	800240b6 <stateen_IMSIC_test_7+0x1da>
    TEST_ASSERT("vu mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80024116:	0000c517          	auipc	a0,0xc
    8002411a:	efa50513          	addi	a0,a0,-262 # 80030010 <__func__.0+0x320>
    8002411e:	76f080ef          	jal	8002d08c <printf>
    80024122:	02900513          	li	a0,41
    80024126:	455070ef          	jal	8002bd7a <putchar>
    8002412a:	bf39                	j	80024048 <stateen_IMSIC_test_7+0x16c>
    TEST_ASSERT("vs mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    8002412c:	0000c517          	auipc	a0,0xc
    80024130:	ee450513          	addi	a0,a0,-284 # 80030010 <__func__.0+0x320>
    80024134:	759080ef          	jal	8002d08c <printf>
    80024138:	02900513          	li	a0,41
    8002413c:	43f070ef          	jal	8002bd7a <putchar>
    80024140:	bd59                	j	80023fd6 <stateen_IMSIC_test_7+0xfa>
    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80024142:	0000c517          	auipc	a0,0xc
    80024146:	ece50513          	addi	a0,a0,-306 # 80030010 <__func__.0+0x320>
    8002414a:	743080ef          	jal	8002d08c <printf>
    8002414e:	02900513          	li	a0,41
    80024152:	429070ef          	jal	8002bd7a <putchar>
    80024156:	bd19                	j	80023f6c <stateen_IMSIC_test_7+0x90>

0000000080024158 <stateen_AIA_test_1>:



//--

bool stateen_AIA_test_1(){
    80024158:	1101                	addi	sp,sp,-32

    TEST_START();
    8002415a:	0000b597          	auipc	a1,0xb
    8002415e:	67658593          	addi	a1,a1,1654 # 8002f7d0 <__func__.22>
    80024162:	0000c517          	auipc	a0,0xc
    80024166:	e7650513          	addi	a0,a0,-394 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_AIA_test_1(){
    8002416a:	ec06                	sd	ra,24(sp)
    8002416c:	e822                	sd	s0,16(sp)
    8002416e:	e426                	sd	s1,8(sp)
    TEST_START();
    80024170:	71d080ef          	jal	8002d08c <printf>
    80024174:	4529                	li	a0,10
    80024176:	405070ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    8002417a:	4511                	li	a0,4
    8002417c:	d8ddc0ef          	jal	80000f08 <goto_priv>
    //当mstateen.AIA=0,hu mode 不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024180:	4785                	li	a5,1
    80024182:	17ee                	slli	a5,a5,0x3b
    80024184:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80024188:	4505                	li	a0,1
    8002418a:	d7fdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002418e:	c7fdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024192:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024196:	eb9dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss hvien register cause to illegal except when mstateen.aia=0",
    8002419a:	08200593          	li	a1,130
    8002419e:	00015617          	auipc	a2,0x15
    800241a2:	eda60613          	addi	a2,a2,-294 # 80039078 <__func__.0+0x9388>
    800241a6:	0000c517          	auipc	a0,0xc
    800241aa:	e4a50513          	addi	a0,a0,-438 # 8002fff0 <__func__.0+0x300>
    800241ae:	6df080ef          	jal	8002d08c <printf>
    800241b2:	00034797          	auipc	a5,0x34
    800241b6:	e5f7c783          	lbu	a5,-417(a5) # 80058011 <excpt+0x1>
    800241ba:	00034497          	auipc	s1,0x34
    800241be:	e5648493          	addi	s1,s1,-426 # 80058010 <excpt>
    800241c2:	0000c597          	auipc	a1,0xc
    800241c6:	e0658593          	addi	a1,a1,-506 # 8002ffc8 <__func__.0+0x2d8>
    800241ca:	cf89                	beqz	a5,800241e4 <stateen_AIA_test_1+0x8c>
    800241cc:	6498                	ld	a4,8(s1)
    800241ce:	4789                	li	a5,2
    800241d0:	0000c597          	auipc	a1,0xc
    800241d4:	de858593          	addi	a1,a1,-536 # 8002ffb8 <__func__.0+0x2c8>
    800241d8:	00f70663          	beq	a4,a5,800241e4 <stateen_AIA_test_1+0x8c>
    800241dc:	0000c597          	auipc	a1,0xc
    800241e0:	dec58593          	addi	a1,a1,-532 # 8002ffc8 <__func__.0+0x2d8>
    800241e4:	0000c517          	auipc	a0,0xc
    800241e8:	e2450513          	addi	a0,a0,-476 # 80030008 <__func__.0+0x318>
    800241ec:	6a1080ef          	jal	8002d08c <printf>
    800241f0:	00034797          	auipc	a5,0x34
    800241f4:	e217c783          	lbu	a5,-479(a5) # 80058011 <excpt+0x1>
    800241f8:	c789                	beqz	a5,80024202 <stateen_AIA_test_1+0xaa>
    800241fa:	6498                	ld	a4,8(s1)
    800241fc:	4789                	li	a5,2
    800241fe:	00f70c63          	beq	a4,a5,80024216 <stateen_AIA_test_1+0xbe>
    80024202:	0000c517          	auipc	a0,0xc
    80024206:	e0e50513          	addi	a0,a0,-498 # 80030010 <__func__.0+0x320>
    8002420a:	683080ef          	jal	8002d08c <printf>
    8002420e:	02900513          	li	a0,41
    80024212:	369070ef          	jal	8002bd7a <putchar>
    80024216:	4529                	li	a0,10
    80024218:	363070ef          	jal	8002bd7a <putchar>
    8002421c:	00034797          	auipc	a5,0x34
    80024220:	df57c783          	lbu	a5,-523(a5) # 80058011 <excpt+0x1>
    80024224:	4401                	li	s0,0
    80024226:	c789                	beqz	a5,80024230 <stateen_AIA_test_1+0xd8>
    80024228:	6480                	ld	s0,8(s1)
    8002422a:	1479                	addi	s0,s0,-2
    8002422c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80024230:	4505                	li	a0,1
    80024232:	cd7dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024236:	bd7dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    8002423a:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002423e:	e11dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024242:	08200593          	li	a1,130
    80024246:	00015617          	auipc	a2,0x15
    8002424a:	e8260613          	addi	a2,a2,-382 # 800390c8 <__func__.0+0x93d8>
    8002424e:	0000c517          	auipc	a0,0xc
    80024252:	da250513          	addi	a0,a0,-606 # 8002fff0 <__func__.0+0x300>
    80024256:	637080ef          	jal	8002d08c <printf>
    8002425a:	00034797          	auipc	a5,0x34
    8002425e:	db77c783          	lbu	a5,-585(a5) # 80058011 <excpt+0x1>
    80024262:	0000c597          	auipc	a1,0xc
    80024266:	d6658593          	addi	a1,a1,-666 # 8002ffc8 <__func__.0+0x2d8>
    8002426a:	cf89                	beqz	a5,80024284 <stateen_AIA_test_1+0x12c>
    8002426c:	6498                	ld	a4,8(s1)
    8002426e:	4789                	li	a5,2
    80024270:	0000c597          	auipc	a1,0xc
    80024274:	d4858593          	addi	a1,a1,-696 # 8002ffb8 <__func__.0+0x2c8>
    80024278:	00f70663          	beq	a4,a5,80024284 <stateen_AIA_test_1+0x12c>
    8002427c:	0000c597          	auipc	a1,0xc
    80024280:	d4c58593          	addi	a1,a1,-692 # 8002ffc8 <__func__.0+0x2d8>
    80024284:	0000c517          	auipc	a0,0xc
    80024288:	d8450513          	addi	a0,a0,-636 # 80030008 <__func__.0+0x318>
    8002428c:	601080ef          	jal	8002d08c <printf>
    80024290:	00034797          	auipc	a5,0x34
    80024294:	d817c783          	lbu	a5,-639(a5) # 80058011 <excpt+0x1>
    80024298:	c789                	beqz	a5,800242a2 <stateen_AIA_test_1+0x14a>
    8002429a:	6498                	ld	a4,8(s1)
    8002429c:	4789                	li	a5,2
    8002429e:	00f70c63          	beq	a4,a5,800242b6 <stateen_AIA_test_1+0x15e>
    800242a2:	0000c517          	auipc	a0,0xc
    800242a6:	d6e50513          	addi	a0,a0,-658 # 80030010 <__func__.0+0x320>
    800242aa:	5e3080ef          	jal	8002d08c <printf>
    800242ae:	02900513          	li	a0,41
    800242b2:	2c9070ef          	jal	8002bd7a <putchar>
    800242b6:	4529                	li	a0,10
    800242b8:	2c3070ef          	jal	8002bd7a <putchar>
    800242bc:	c801                	beqz	s0,800242cc <stateen_AIA_test_1+0x174>
    800242be:	00034797          	auipc	a5,0x34
    800242c2:	d537c783          	lbu	a5,-685(a5) # 80058011 <excpt+0x1>
    800242c6:	4401                	li	s0,0
    800242c8:	18079363          	bnez	a5,8002444e <stateen_AIA_test_1+0x2f6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    800242cc:	4505                	li	a0,1
    800242ce:	c3bdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800242d2:	b3bdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    800242d6:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800242da:	d75dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss stopi register cause to illegal except when mstateen.aia=0",
    800242de:	08200593          	li	a1,130
    800242e2:	00015617          	auipc	a2,0x15
    800242e6:	e3660613          	addi	a2,a2,-458 # 80039118 <__func__.0+0x9428>
    800242ea:	0000c517          	auipc	a0,0xc
    800242ee:	d0650513          	addi	a0,a0,-762 # 8002fff0 <__func__.0+0x300>
    800242f2:	59b080ef          	jal	8002d08c <printf>
    800242f6:	00034797          	auipc	a5,0x34
    800242fa:	d1b7c783          	lbu	a5,-741(a5) # 80058011 <excpt+0x1>
    800242fe:	0000c597          	auipc	a1,0xc
    80024302:	cca58593          	addi	a1,a1,-822 # 8002ffc8 <__func__.0+0x2d8>
    80024306:	cf89                	beqz	a5,80024320 <stateen_AIA_test_1+0x1c8>
    80024308:	6498                	ld	a4,8(s1)
    8002430a:	4789                	li	a5,2
    8002430c:	0000c597          	auipc	a1,0xc
    80024310:	cac58593          	addi	a1,a1,-852 # 8002ffb8 <__func__.0+0x2c8>
    80024314:	00f70663          	beq	a4,a5,80024320 <stateen_AIA_test_1+0x1c8>
    80024318:	0000c597          	auipc	a1,0xc
    8002431c:	cb058593          	addi	a1,a1,-848 # 8002ffc8 <__func__.0+0x2d8>
    80024320:	0000c517          	auipc	a0,0xc
    80024324:	ce850513          	addi	a0,a0,-792 # 80030008 <__func__.0+0x318>
    80024328:	565080ef          	jal	8002d08c <printf>
    8002432c:	00034797          	auipc	a5,0x34
    80024330:	ce57c783          	lbu	a5,-795(a5) # 80058011 <excpt+0x1>
    80024334:	c789                	beqz	a5,8002433e <stateen_AIA_test_1+0x1e6>
    80024336:	6498                	ld	a4,8(s1)
    80024338:	4789                	li	a5,2
    8002433a:	00f70c63          	beq	a4,a5,80024352 <stateen_AIA_test_1+0x1fa>
    8002433e:	0000c517          	auipc	a0,0xc
    80024342:	cd250513          	addi	a0,a0,-814 # 80030010 <__func__.0+0x320>
    80024346:	547080ef          	jal	8002d08c <printf>
    8002434a:	02900513          	li	a0,41
    8002434e:	22d070ef          	jal	8002bd7a <putchar>
    80024352:	4529                	li	a0,10
    80024354:	227070ef          	jal	8002bd7a <putchar>
    80024358:	c801                	beqz	s0,80024368 <stateen_AIA_test_1+0x210>
    8002435a:	00034797          	auipc	a5,0x34
    8002435e:	cb77c783          	lbu	a5,-841(a5) # 80058011 <excpt+0x1>
    80024362:	4401                	li	s0,0
    80024364:	0e079063          	bnez	a5,80024444 <stateen_AIA_test_1+0x2ec>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80024368:	4505                	li	a0,1
    8002436a:	b9fdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002436e:	a9fdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024372:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024376:	cd9dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    8002437a:	08200593          	li	a1,130
    8002437e:	00015617          	auipc	a2,0x15
    80024382:	dea60613          	addi	a2,a2,-534 # 80039168 <__func__.0+0x9478>
    80024386:	0000c517          	auipc	a0,0xc
    8002438a:	c6a50513          	addi	a0,a0,-918 # 8002fff0 <__func__.0+0x300>
    8002438e:	4ff080ef          	jal	8002d08c <printf>
    80024392:	00034797          	auipc	a5,0x34
    80024396:	c7f7c783          	lbu	a5,-897(a5) # 80058011 <excpt+0x1>
    8002439a:	0000c597          	auipc	a1,0xc
    8002439e:	c2e58593          	addi	a1,a1,-978 # 8002ffc8 <__func__.0+0x2d8>
    800243a2:	cf89                	beqz	a5,800243bc <stateen_AIA_test_1+0x264>
    800243a4:	6498                	ld	a4,8(s1)
    800243a6:	4789                	li	a5,2
    800243a8:	0000c597          	auipc	a1,0xc
    800243ac:	c1058593          	addi	a1,a1,-1008 # 8002ffb8 <__func__.0+0x2c8>
    800243b0:	00f70663          	beq	a4,a5,800243bc <stateen_AIA_test_1+0x264>
    800243b4:	0000c597          	auipc	a1,0xc
    800243b8:	c1458593          	addi	a1,a1,-1004 # 8002ffc8 <__func__.0+0x2d8>
    800243bc:	0000c517          	auipc	a0,0xc
    800243c0:	c4c50513          	addi	a0,a0,-948 # 80030008 <__func__.0+0x318>
    800243c4:	4c9080ef          	jal	8002d08c <printf>
    800243c8:	00034797          	auipc	a5,0x34
    800243cc:	c497c783          	lbu	a5,-951(a5) # 80058011 <excpt+0x1>
    800243d0:	c789                	beqz	a5,800243da <stateen_AIA_test_1+0x282>
    800243d2:	6498                	ld	a4,8(s1)
    800243d4:	4789                	li	a5,2
    800243d6:	00f70c63          	beq	a4,a5,800243ee <stateen_AIA_test_1+0x296>
    800243da:	0000c517          	auipc	a0,0xc
    800243de:	c3650513          	addi	a0,a0,-970 # 80030010 <__func__.0+0x320>
    800243e2:	4ab080ef          	jal	8002d08c <printf>
    800243e6:	02900513          	li	a0,41
    800243ea:	191070ef          	jal	8002bd7a <putchar>
    800243ee:	4529                	li	a0,10
    800243f0:	18b070ef          	jal	8002bd7a <putchar>
    800243f4:	c015                	beqz	s0,80024418 <stateen_AIA_test_1+0x2c0>
    800243f6:	00034417          	auipc	s0,0x34
    800243fa:	c1b44403          	lbu	s0,-997(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800243fe:	0000c597          	auipc	a1,0xc
    80024402:	bca58593          	addi	a1,a1,-1078 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    80024406:	cc11                	beqz	s0,80024422 <stateen_AIA_test_1+0x2ca>
    80024408:	6498                	ld	a4,8(s1)
    8002440a:	4789                	li	a5,2
    TEST_END();
    8002440c:	0000c597          	auipc	a1,0xc
    80024410:	bac58593          	addi	a1,a1,-1108 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    80024414:	00f70763          	beq	a4,a5,80024422 <stateen_AIA_test_1+0x2ca>
    80024418:	4401                	li	s0,0
    TEST_END();
    8002441a:	0000c597          	auipc	a1,0xc
    8002441e:	bae58593          	addi	a1,a1,-1106 # 8002ffc8 <__func__.0+0x2d8>
    80024422:	0000c517          	auipc	a0,0xc
    80024426:	c4e50513          	addi	a0,a0,-946 # 80030070 <__func__.0+0x380>
    8002442a:	463080ef          	jal	8002d08c <printf>
    8002442e:	4511                	li	a0,4
    80024430:	ad9dc0ef          	jal	80000f08 <goto_priv>
    80024434:	c9edd0ef          	jal	800018d2 <reset_state>

}
    80024438:	60e2                	ld	ra,24(sp)
    8002443a:	8522                	mv	a0,s0
    8002443c:	6442                	ld	s0,16(sp)
    8002443e:	64a2                	ld	s1,8(sp)
    80024440:	6105                	addi	sp,sp,32
    80024442:	8082                	ret
    TEST_ASSERT("HU mode accesss stopi register cause to illegal except when mstateen.aia=0",
    80024444:	6480                	ld	s0,8(s1)
    80024446:	1479                	addi	s0,s0,-2
    80024448:	00143413          	seqz	s0,s0
    8002444c:	bf31                	j	80024368 <stateen_AIA_test_1+0x210>
    TEST_ASSERT("HU mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    8002444e:	6480                	ld	s0,8(s1)
    80024450:	1479                	addi	s0,s0,-2
    80024452:	00143413          	seqz	s0,s0
    80024456:	bd9d                	j	800242cc <stateen_AIA_test_1+0x174>

0000000080024458 <stateen_AIA_test_2>:

bool stateen_AIA_test_2(){
    80024458:	1101                	addi	sp,sp,-32

    TEST_START();
    8002445a:	0000b597          	auipc	a1,0xb
    8002445e:	38e58593          	addi	a1,a1,910 # 8002f7e8 <__func__.21>
    80024462:	0000c517          	auipc	a0,0xc
    80024466:	b7650513          	addi	a0,a0,-1162 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_AIA_test_2(){
    8002446a:	ec06                	sd	ra,24(sp)
    8002446c:	e822                	sd	s0,16(sp)
    8002446e:	e426                	sd	s1,8(sp)
    TEST_START();
    80024470:	41d080ef          	jal	8002d08c <printf>
    80024474:	4529                	li	a0,10
    80024476:	105070ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    8002447a:	4511                	li	a0,4
    8002447c:	a8ddc0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024480:	4785                	li	a5,1
    80024482:	17ee                	slli	a5,a5,0x3b
    80024484:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    80024488:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.AIA=1,hstateen.AIA=0,v=1时,不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    goto_priv(PRIV_VU);
    8002448c:	4501                	li	a0,0
    8002448e:	a7bdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024492:	97bdc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024496:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002449a:	bb5dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss hvien register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    8002449e:	08200593          	li	a1,130
    800244a2:	00015617          	auipc	a2,0x15
    800244a6:	d1660613          	addi	a2,a2,-746 # 800391b8 <__func__.0+0x94c8>
    800244aa:	0000c517          	auipc	a0,0xc
    800244ae:	b4650513          	addi	a0,a0,-1210 # 8002fff0 <__func__.0+0x300>
    800244b2:	3db080ef          	jal	8002d08c <printf>
    800244b6:	00034797          	auipc	a5,0x34
    800244ba:	b5b7c783          	lbu	a5,-1189(a5) # 80058011 <excpt+0x1>
    800244be:	00034497          	auipc	s1,0x34
    800244c2:	b5248493          	addi	s1,s1,-1198 # 80058010 <excpt>
    800244c6:	0000c597          	auipc	a1,0xc
    800244ca:	b0258593          	addi	a1,a1,-1278 # 8002ffc8 <__func__.0+0x2d8>
    800244ce:	cf89                	beqz	a5,800244e8 <stateen_AIA_test_2+0x90>
    800244d0:	6498                	ld	a4,8(s1)
    800244d2:	47d9                	li	a5,22
    800244d4:	0000c597          	auipc	a1,0xc
    800244d8:	ae458593          	addi	a1,a1,-1308 # 8002ffb8 <__func__.0+0x2c8>
    800244dc:	00f70663          	beq	a4,a5,800244e8 <stateen_AIA_test_2+0x90>
    800244e0:	0000c597          	auipc	a1,0xc
    800244e4:	ae858593          	addi	a1,a1,-1304 # 8002ffc8 <__func__.0+0x2d8>
    800244e8:	0000c517          	auipc	a0,0xc
    800244ec:	b2050513          	addi	a0,a0,-1248 # 80030008 <__func__.0+0x318>
    800244f0:	39d080ef          	jal	8002d08c <printf>
    800244f4:	00034797          	auipc	a5,0x34
    800244f8:	b1d7c783          	lbu	a5,-1251(a5) # 80058011 <excpt+0x1>
    800244fc:	c789                	beqz	a5,80024506 <stateen_AIA_test_2+0xae>
    800244fe:	6498                	ld	a4,8(s1)
    80024500:	47d9                	li	a5,22
    80024502:	00f70c63          	beq	a4,a5,8002451a <stateen_AIA_test_2+0xc2>
    80024506:	0000c517          	auipc	a0,0xc
    8002450a:	b0a50513          	addi	a0,a0,-1270 # 80030010 <__func__.0+0x320>
    8002450e:	37f080ef          	jal	8002d08c <printf>
    80024512:	02900513          	li	a0,41
    80024516:	065070ef          	jal	8002bd7a <putchar>
    8002451a:	4529                	li	a0,10
    8002451c:	05f070ef          	jal	8002bd7a <putchar>
    80024520:	00034797          	auipc	a5,0x34
    80024524:	af17c783          	lbu	a5,-1295(a5) # 80058011 <excpt+0x1>
    80024528:	4401                	li	s0,0
    8002452a:	c789                	beqz	a5,80024534 <stateen_AIA_test_2+0xdc>
    8002452c:	6480                	ld	s0,8(s1)
    8002452e:	1429                	addi	s0,s0,-22
    80024530:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80024534:	4501                	li	a0,0
    80024536:	9d3dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002453a:	8d3dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    8002453e:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024542:	b0ddc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024546:	08200593          	li	a1,130
    8002454a:	00015617          	auipc	a2,0x15
    8002454e:	cbe60613          	addi	a2,a2,-834 # 80039208 <__func__.0+0x9518>
    80024552:	0000c517          	auipc	a0,0xc
    80024556:	a9e50513          	addi	a0,a0,-1378 # 8002fff0 <__func__.0+0x300>
    8002455a:	333080ef          	jal	8002d08c <printf>
    8002455e:	00034797          	auipc	a5,0x34
    80024562:	ab37c783          	lbu	a5,-1357(a5) # 80058011 <excpt+0x1>
    80024566:	0000c597          	auipc	a1,0xc
    8002456a:	a6258593          	addi	a1,a1,-1438 # 8002ffc8 <__func__.0+0x2d8>
    8002456e:	cf89                	beqz	a5,80024588 <stateen_AIA_test_2+0x130>
    80024570:	6498                	ld	a4,8(s1)
    80024572:	47d9                	li	a5,22
    80024574:	0000c597          	auipc	a1,0xc
    80024578:	a4458593          	addi	a1,a1,-1468 # 8002ffb8 <__func__.0+0x2c8>
    8002457c:	00f70663          	beq	a4,a5,80024588 <stateen_AIA_test_2+0x130>
    80024580:	0000c597          	auipc	a1,0xc
    80024584:	a4858593          	addi	a1,a1,-1464 # 8002ffc8 <__func__.0+0x2d8>
    80024588:	0000c517          	auipc	a0,0xc
    8002458c:	a8050513          	addi	a0,a0,-1408 # 80030008 <__func__.0+0x318>
    80024590:	2fd080ef          	jal	8002d08c <printf>
    80024594:	00034797          	auipc	a5,0x34
    80024598:	a7d7c783          	lbu	a5,-1411(a5) # 80058011 <excpt+0x1>
    8002459c:	c789                	beqz	a5,800245a6 <stateen_AIA_test_2+0x14e>
    8002459e:	6498                	ld	a4,8(s1)
    800245a0:	47d9                	li	a5,22
    800245a2:	00f70c63          	beq	a4,a5,800245ba <stateen_AIA_test_2+0x162>
    800245a6:	0000c517          	auipc	a0,0xc
    800245aa:	a6a50513          	addi	a0,a0,-1430 # 80030010 <__func__.0+0x320>
    800245ae:	2df080ef          	jal	8002d08c <printf>
    800245b2:	02900513          	li	a0,41
    800245b6:	7c4070ef          	jal	8002bd7a <putchar>
    800245ba:	4529                	li	a0,10
    800245bc:	7be070ef          	jal	8002bd7a <putchar>
    800245c0:	c801                	beqz	s0,800245d0 <stateen_AIA_test_2+0x178>
    800245c2:	00034797          	auipc	a5,0x34
    800245c6:	a4f7c783          	lbu	a5,-1457(a5) # 80058011 <excpt+0x1>
    800245ca:	4401                	li	s0,0
    800245cc:	18079363          	bnez	a5,80024752 <stateen_AIA_test_2+0x2fa>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    800245d0:	4501                	li	a0,0
    800245d2:	937dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800245d6:	837dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    800245da:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800245de:	a71dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800245e2:	08200593          	li	a1,130
    800245e6:	00015617          	auipc	a2,0x15
    800245ea:	c7a60613          	addi	a2,a2,-902 # 80039260 <__func__.0+0x9570>
    800245ee:	0000c517          	auipc	a0,0xc
    800245f2:	a0250513          	addi	a0,a0,-1534 # 8002fff0 <__func__.0+0x300>
    800245f6:	297080ef          	jal	8002d08c <printf>
    800245fa:	00034797          	auipc	a5,0x34
    800245fe:	a177c783          	lbu	a5,-1513(a5) # 80058011 <excpt+0x1>
    80024602:	0000c597          	auipc	a1,0xc
    80024606:	9c658593          	addi	a1,a1,-1594 # 8002ffc8 <__func__.0+0x2d8>
    8002460a:	cf89                	beqz	a5,80024624 <stateen_AIA_test_2+0x1cc>
    8002460c:	6498                	ld	a4,8(s1)
    8002460e:	47d9                	li	a5,22
    80024610:	0000c597          	auipc	a1,0xc
    80024614:	9a858593          	addi	a1,a1,-1624 # 8002ffb8 <__func__.0+0x2c8>
    80024618:	00f70663          	beq	a4,a5,80024624 <stateen_AIA_test_2+0x1cc>
    8002461c:	0000c597          	auipc	a1,0xc
    80024620:	9ac58593          	addi	a1,a1,-1620 # 8002ffc8 <__func__.0+0x2d8>
    80024624:	0000c517          	auipc	a0,0xc
    80024628:	9e450513          	addi	a0,a0,-1564 # 80030008 <__func__.0+0x318>
    8002462c:	261080ef          	jal	8002d08c <printf>
    80024630:	00034797          	auipc	a5,0x34
    80024634:	9e17c783          	lbu	a5,-1567(a5) # 80058011 <excpt+0x1>
    80024638:	c789                	beqz	a5,80024642 <stateen_AIA_test_2+0x1ea>
    8002463a:	6498                	ld	a4,8(s1)
    8002463c:	47d9                	li	a5,22
    8002463e:	00f70c63          	beq	a4,a5,80024656 <stateen_AIA_test_2+0x1fe>
    80024642:	0000c517          	auipc	a0,0xc
    80024646:	9ce50513          	addi	a0,a0,-1586 # 80030010 <__func__.0+0x320>
    8002464a:	243080ef          	jal	8002d08c <printf>
    8002464e:	02900513          	li	a0,41
    80024652:	728070ef          	jal	8002bd7a <putchar>
    80024656:	4529                	li	a0,10
    80024658:	722070ef          	jal	8002bd7a <putchar>
    8002465c:	c801                	beqz	s0,8002466c <stateen_AIA_test_2+0x214>
    8002465e:	00034797          	auipc	a5,0x34
    80024662:	9b37c783          	lbu	a5,-1613(a5) # 80058011 <excpt+0x1>
    80024666:	4401                	li	s0,0
    80024668:	0e079063          	bnez	a5,80024748 <stateen_AIA_test_2+0x2f0>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8002466c:	4501                	li	a0,0
    8002466e:	89bdc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024672:	f9adc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024676:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    8002467a:	9d5dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    8002467e:	08200593          	li	a1,130
    80024682:	00015617          	auipc	a2,0x15
    80024686:	c2e60613          	addi	a2,a2,-978 # 800392b0 <__func__.0+0x95c0>
    8002468a:	0000c517          	auipc	a0,0xc
    8002468e:	96650513          	addi	a0,a0,-1690 # 8002fff0 <__func__.0+0x300>
    80024692:	1fb080ef          	jal	8002d08c <printf>
    80024696:	00034797          	auipc	a5,0x34
    8002469a:	97b7c783          	lbu	a5,-1669(a5) # 80058011 <excpt+0x1>
    8002469e:	0000c597          	auipc	a1,0xc
    800246a2:	92a58593          	addi	a1,a1,-1750 # 8002ffc8 <__func__.0+0x2d8>
    800246a6:	cf89                	beqz	a5,800246c0 <stateen_AIA_test_2+0x268>
    800246a8:	6498                	ld	a4,8(s1)
    800246aa:	47d9                	li	a5,22
    800246ac:	0000c597          	auipc	a1,0xc
    800246b0:	90c58593          	addi	a1,a1,-1780 # 8002ffb8 <__func__.0+0x2c8>
    800246b4:	00f70663          	beq	a4,a5,800246c0 <stateen_AIA_test_2+0x268>
    800246b8:	0000c597          	auipc	a1,0xc
    800246bc:	91058593          	addi	a1,a1,-1776 # 8002ffc8 <__func__.0+0x2d8>
    800246c0:	0000c517          	auipc	a0,0xc
    800246c4:	94850513          	addi	a0,a0,-1720 # 80030008 <__func__.0+0x318>
    800246c8:	1c5080ef          	jal	8002d08c <printf>
    800246cc:	00034797          	auipc	a5,0x34
    800246d0:	9457c783          	lbu	a5,-1723(a5) # 80058011 <excpt+0x1>
    800246d4:	c789                	beqz	a5,800246de <stateen_AIA_test_2+0x286>
    800246d6:	6498                	ld	a4,8(s1)
    800246d8:	47d9                	li	a5,22
    800246da:	00f70c63          	beq	a4,a5,800246f2 <stateen_AIA_test_2+0x29a>
    800246de:	0000c517          	auipc	a0,0xc
    800246e2:	93250513          	addi	a0,a0,-1742 # 80030010 <__func__.0+0x320>
    800246e6:	1a7080ef          	jal	8002d08c <printf>
    800246ea:	02900513          	li	a0,41
    800246ee:	68c070ef          	jal	8002bd7a <putchar>
    800246f2:	4529                	li	a0,10
    800246f4:	686070ef          	jal	8002bd7a <putchar>
    800246f8:	c015                	beqz	s0,8002471c <stateen_AIA_test_2+0x2c4>
    800246fa:	00034417          	auipc	s0,0x34
    800246fe:	91744403          	lbu	s0,-1769(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80024702:	0000c597          	auipc	a1,0xc
    80024706:	8c658593          	addi	a1,a1,-1850 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    8002470a:	cc11                	beqz	s0,80024726 <stateen_AIA_test_2+0x2ce>
    8002470c:	6498                	ld	a4,8(s1)
    8002470e:	47d9                	li	a5,22
    TEST_END();
    80024710:	0000c597          	auipc	a1,0xc
    80024714:	8a858593          	addi	a1,a1,-1880 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024718:	00f70763          	beq	a4,a5,80024726 <stateen_AIA_test_2+0x2ce>
    8002471c:	4401                	li	s0,0
    TEST_END();
    8002471e:	0000c597          	auipc	a1,0xc
    80024722:	8aa58593          	addi	a1,a1,-1878 # 8002ffc8 <__func__.0+0x2d8>
    80024726:	0000c517          	auipc	a0,0xc
    8002472a:	94a50513          	addi	a0,a0,-1718 # 80030070 <__func__.0+0x380>
    8002472e:	15f080ef          	jal	8002d08c <printf>
    80024732:	4511                	li	a0,4
    80024734:	fd4dc0ef          	jal	80000f08 <goto_priv>
    80024738:	99add0ef          	jal	800018d2 <reset_state>

}
    8002473c:	60e2                	ld	ra,24(sp)
    8002473e:	8522                	mv	a0,s0
    80024740:	6442                	ld	s0,16(sp)
    80024742:	64a2                	ld	s1,8(sp)
    80024744:	6105                	addi	sp,sp,32
    80024746:	8082                	ret
    TEST_ASSERT("VU mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024748:	6480                	ld	s0,8(s1)
    8002474a:	1429                	addi	s0,s0,-22
    8002474c:	00143413          	seqz	s0,s0
    80024750:	bf31                	j	8002466c <stateen_AIA_test_2+0x214>
    TEST_ASSERT("VU mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024752:	6480                	ld	s0,8(s1)
    80024754:	1429                	addi	s0,s0,-22
    80024756:	00143413          	seqz	s0,s0
    8002475a:	bd9d                	j	800245d0 <stateen_AIA_test_2+0x178>

000000008002475c <stateen_AIA_test_3>:

bool stateen_AIA_test_3(){
    8002475c:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=0,m mode 可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    8002475e:	0000b597          	auipc	a1,0xb
    80024762:	0a258593          	addi	a1,a1,162 # 8002f800 <__func__.20>
    80024766:	0000c517          	auipc	a0,0xc
    8002476a:	87250513          	addi	a0,a0,-1934 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_AIA_test_3(){
    8002476e:	ec06                	sd	ra,24(sp)
    80024770:	e822                	sd	s0,16(sp)
    80024772:	e426                	sd	s1,8(sp)
    TEST_START();
    80024774:	119080ef          	jal	8002d08c <printf>
    80024778:	4529                	li	a0,10
    8002477a:	600070ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    8002477e:	4511                	li	a0,4
    80024780:	f88dc0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024784:	4785                	li	a5,1
    80024786:	17ee                	slli	a5,a5,0x3b
    80024788:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    8002478c:	4511                	li	a0,4
    8002478e:	f7adc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024792:	e7adc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024796:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002479a:	8b5dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    8002479e:	08200593          	li	a1,130
    800247a2:	00015617          	auipc	a2,0x15
    800247a6:	b6660613          	addi	a2,a2,-1178 # 80039308 <__func__.0+0x9618>
    800247aa:	0000c517          	auipc	a0,0xc
    800247ae:	84650513          	addi	a0,a0,-1978 # 8002fff0 <__func__.0+0x300>
    800247b2:	0db080ef          	jal	8002d08c <printf>
    800247b6:	00034797          	auipc	a5,0x34
    800247ba:	85b7c783          	lbu	a5,-1957(a5) # 80058011 <excpt+0x1>
    800247be:	0000b597          	auipc	a1,0xb
    800247c2:	7fa58593          	addi	a1,a1,2042 # 8002ffb8 <__func__.0+0x2c8>
    800247c6:	c789                	beqz	a5,800247d0 <stateen_AIA_test_3+0x74>
    800247c8:	0000c597          	auipc	a1,0xc
    800247cc:	80058593          	addi	a1,a1,-2048 # 8002ffc8 <__func__.0+0x2d8>
    800247d0:	0000c517          	auipc	a0,0xc
    800247d4:	83850513          	addi	a0,a0,-1992 # 80030008 <__func__.0+0x318>
    800247d8:	0b5080ef          	jal	8002d08c <printf>
    800247dc:	00034797          	auipc	a5,0x34
    800247e0:	8357c783          	lbu	a5,-1995(a5) # 80058011 <excpt+0x1>
    800247e4:	1c079d63          	bnez	a5,800249be <stateen_AIA_test_3+0x262>
    800247e8:	4529                	li	a0,10
    800247ea:	590070ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800247ee:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    800247f0:	00034497          	auipc	s1,0x34
    800247f4:	8214c483          	lbu	s1,-2015(s1) # 80058011 <excpt+0x1>
    goto_priv(PRIV_M);
    800247f8:	f10dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800247fc:	e10dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024800:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024804:	84bdc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss hvictl register success  when mstateen.aia=0",
    80024808:	08200593          	li	a1,130
    8002480c:	00015617          	auipc	a2,0x15
    80024810:	b3c60613          	addi	a2,a2,-1220 # 80039348 <__func__.0+0x9658>
    80024814:	0000b517          	auipc	a0,0xb
    80024818:	7dc50513          	addi	a0,a0,2012 # 8002fff0 <__func__.0+0x300>
    8002481c:	071080ef          	jal	8002d08c <printf>
    80024820:	00033797          	auipc	a5,0x33
    80024824:	7f17c783          	lbu	a5,2033(a5) # 80058011 <excpt+0x1>
    80024828:	0000b597          	auipc	a1,0xb
    8002482c:	7a058593          	addi	a1,a1,1952 # 8002ffc8 <__func__.0+0x2d8>
    80024830:	e789                	bnez	a5,8002483a <stateen_AIA_test_3+0xde>
    80024832:	0000b597          	auipc	a1,0xb
    80024836:	78658593          	addi	a1,a1,1926 # 8002ffb8 <__func__.0+0x2c8>
    8002483a:	0000b517          	auipc	a0,0xb
    8002483e:	7ce50513          	addi	a0,a0,1998 # 80030008 <__func__.0+0x318>
    80024842:	04b080ef          	jal	8002d08c <printf>
    80024846:	00033797          	auipc	a5,0x33
    8002484a:	7cb7c783          	lbu	a5,1995(a5) # 80058011 <excpt+0x1>
    8002484e:	14079d63          	bnez	a5,800249a8 <stateen_AIA_test_3+0x24c>
    80024852:	4529                	li	a0,10
    80024854:	526070ef          	jal	8002bd7a <putchar>
    80024858:	4401                	li	s0,0
    8002485a:	e499                	bnez	s1,80024868 <stateen_AIA_test_3+0x10c>
    8002485c:	00033417          	auipc	s0,0x33
    80024860:	7b544403          	lbu	s0,1973(s0) # 80058011 <excpt+0x1>
    80024864:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80024868:	4511                	li	a0,4
    8002486a:	e9edc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002486e:	d9edc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80024872:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024876:	fd8dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss stopi register success  when mstateen.aia=0",
    8002487a:	08200593          	li	a1,130
    8002487e:	00015617          	auipc	a2,0x15
    80024882:	b0a60613          	addi	a2,a2,-1270 # 80039388 <__func__.0+0x9698>
    80024886:	0000b517          	auipc	a0,0xb
    8002488a:	76a50513          	addi	a0,a0,1898 # 8002fff0 <__func__.0+0x300>
    8002488e:	7fe080ef          	jal	8002d08c <printf>
    80024892:	00033797          	auipc	a5,0x33
    80024896:	77f7c783          	lbu	a5,1919(a5) # 80058011 <excpt+0x1>
    8002489a:	0000b597          	auipc	a1,0xb
    8002489e:	72e58593          	addi	a1,a1,1838 # 8002ffc8 <__func__.0+0x2d8>
    800248a2:	e789                	bnez	a5,800248ac <stateen_AIA_test_3+0x150>
    800248a4:	0000b597          	auipc	a1,0xb
    800248a8:	71458593          	addi	a1,a1,1812 # 8002ffb8 <__func__.0+0x2c8>
    800248ac:	0000b517          	auipc	a0,0xb
    800248b0:	75c50513          	addi	a0,a0,1884 # 80030008 <__func__.0+0x318>
    800248b4:	7d8080ef          	jal	8002d08c <printf>
    800248b8:	00033797          	auipc	a5,0x33
    800248bc:	7597c783          	lbu	a5,1881(a5) # 80058011 <excpt+0x1>
    800248c0:	0c079963          	bnez	a5,80024992 <stateen_AIA_test_3+0x236>
    800248c4:	4529                	li	a0,10
    800248c6:	4b4070ef          	jal	8002bd7a <putchar>
    800248ca:	c419                	beqz	s0,800248d8 <stateen_AIA_test_3+0x17c>
    800248cc:	00033417          	auipc	s0,0x33
    800248d0:	74544403          	lbu	s0,1861(s0) # 80058011 <excpt+0x1>
    800248d4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800248d8:	4511                	li	a0,4
    800248da:	e2edc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800248de:	d2edc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800248e2:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800248e6:	f68dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    800248ea:	08200593          	li	a1,130
    800248ee:	00015617          	auipc	a2,0x15
    800248f2:	ada60613          	addi	a2,a2,-1318 # 800393c8 <__func__.0+0x96d8>
    800248f6:	0000b517          	auipc	a0,0xb
    800248fa:	6fa50513          	addi	a0,a0,1786 # 8002fff0 <__func__.0+0x300>
    800248fe:	78e080ef          	jal	8002d08c <printf>
    80024902:	00033797          	auipc	a5,0x33
    80024906:	70f7c783          	lbu	a5,1807(a5) # 80058011 <excpt+0x1>
    8002490a:	0000b597          	auipc	a1,0xb
    8002490e:	6be58593          	addi	a1,a1,1726 # 8002ffc8 <__func__.0+0x2d8>
    80024912:	e789                	bnez	a5,8002491c <stateen_AIA_test_3+0x1c0>
    80024914:	0000b597          	auipc	a1,0xb
    80024918:	6a458593          	addi	a1,a1,1700 # 8002ffb8 <__func__.0+0x2c8>
    8002491c:	0000b517          	auipc	a0,0xb
    80024920:	6ec50513          	addi	a0,a0,1772 # 80030008 <__func__.0+0x318>
    80024924:	768080ef          	jal	8002d08c <printf>
    80024928:	00033797          	auipc	a5,0x33
    8002492c:	6e97c783          	lbu	a5,1769(a5) # 80058011 <excpt+0x1>
    80024930:	e7b1                	bnez	a5,8002497c <stateen_AIA_test_3+0x220>
    80024932:	4529                	li	a0,10
    80024934:	446070ef          	jal	8002bd7a <putchar>
    80024938:	c411                	beqz	s0,80024944 <stateen_AIA_test_3+0x1e8>
    8002493a:	00033797          	auipc	a5,0x33
    8002493e:	6d77c783          	lbu	a5,1751(a5) # 80058011 <excpt+0x1>
    80024942:	c79d                	beqz	a5,80024970 <stateen_AIA_test_3+0x214>
    80024944:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80024946:	0000b597          	auipc	a1,0xb
    8002494a:	68258593          	addi	a1,a1,1666 # 8002ffc8 <__func__.0+0x2d8>
    8002494e:	0000b517          	auipc	a0,0xb
    80024952:	72250513          	addi	a0,a0,1826 # 80030070 <__func__.0+0x380>
    80024956:	736080ef          	jal	8002d08c <printf>
    8002495a:	4511                	li	a0,4
    8002495c:	dacdc0ef          	jal	80000f08 <goto_priv>
    80024960:	f73dc0ef          	jal	800018d2 <reset_state>

}
    80024964:	60e2                	ld	ra,24(sp)
    80024966:	8522                	mv	a0,s0
    80024968:	6442                	ld	s0,16(sp)
    8002496a:	64a2                	ld	s1,8(sp)
    8002496c:	6105                	addi	sp,sp,32
    8002496e:	8082                	ret
    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    80024970:	4405                	li	s0,1
    TEST_END();
    80024972:	0000b597          	auipc	a1,0xb
    80024976:	64658593          	addi	a1,a1,1606 # 8002ffb8 <__func__.0+0x2c8>
    8002497a:	bfd1                	j	8002494e <stateen_AIA_test_3+0x1f2>
    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    8002497c:	0000b517          	auipc	a0,0xb
    80024980:	69450513          	addi	a0,a0,1684 # 80030010 <__func__.0+0x320>
    80024984:	708080ef          	jal	8002d08c <printf>
    80024988:	02900513          	li	a0,41
    8002498c:	3ee070ef          	jal	8002bd7a <putchar>
    80024990:	b74d                	j	80024932 <stateen_AIA_test_3+0x1d6>
    TEST_ASSERT("m mode accesss stopi register success  when mstateen.aia=0",
    80024992:	0000b517          	auipc	a0,0xb
    80024996:	67e50513          	addi	a0,a0,1662 # 80030010 <__func__.0+0x320>
    8002499a:	6f2080ef          	jal	8002d08c <printf>
    8002499e:	02900513          	li	a0,41
    800249a2:	3d8070ef          	jal	8002bd7a <putchar>
    800249a6:	bf39                	j	800248c4 <stateen_AIA_test_3+0x168>
    TEST_ASSERT("m mode accesss hvictl register success  when mstateen.aia=0",
    800249a8:	0000b517          	auipc	a0,0xb
    800249ac:	66850513          	addi	a0,a0,1640 # 80030010 <__func__.0+0x320>
    800249b0:	6dc080ef          	jal	8002d08c <printf>
    800249b4:	02900513          	li	a0,41
    800249b8:	3c2070ef          	jal	8002bd7a <putchar>
    800249bc:	bd59                	j	80024852 <stateen_AIA_test_3+0xf6>
    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    800249be:	0000b517          	auipc	a0,0xb
    800249c2:	65250513          	addi	a0,a0,1618 # 80030010 <__func__.0+0x320>
    800249c6:	6c6080ef          	jal	8002d08c <printf>
    800249ca:	02900513          	li	a0,41
    800249ce:	3ac070ef          	jal	8002bd7a <putchar>
    800249d2:	bd19                	j	800247e8 <stateen_AIA_test_3+0x8c>

00000000800249d4 <stateen_AIA_test_4>:


bool stateen_AIA_test_4(){
    800249d4:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=1,hstateen.AIA=0,v=1时不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    800249d6:	0000b597          	auipc	a1,0xb
    800249da:	e4258593          	addi	a1,a1,-446 # 8002f818 <__func__.19>
    800249de:	0000b517          	auipc	a0,0xb
    800249e2:	5fa50513          	addi	a0,a0,1530 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_AIA_test_4(){
    800249e6:	ec06                	sd	ra,24(sp)
    800249e8:	e822                	sd	s0,16(sp)
    800249ea:	e426                	sd	s1,8(sp)
    TEST_START();
    800249ec:	6a0080ef          	jal	8002d08c <printf>
    800249f0:	4529                	li	a0,10
    800249f2:	388070ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    800249f6:	4511                	li	a0,4
    800249f8:	d10dc0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    800249fc:	4785                	li	a5,1
    800249fe:	17ee                	slli	a5,a5,0x3b
    80024a00:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    80024a04:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80024a08:	30c025f3          	csrr	a1,mstateen0
    80024a0c:	00014517          	auipc	a0,0x14
    80024a10:	dbc50513          	addi	a0,a0,-580 # 800387c8 <__func__.0+0x8ad8>
    80024a14:	678080ef          	jal	8002d08c <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80024a18:	60c025f3          	csrr	a1,hstateen0
    80024a1c:	00014517          	auipc	a0,0x14
    80024a20:	dbc50513          	addi	a0,a0,-580 # 800387d8 <__func__.0+0x8ae8>
    80024a24:	668080ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VS);
    80024a28:	4509                	li	a0,2
    80024a2a:	cdedc0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024a2e:	bdedc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024a32:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024a36:	e18dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss hvien register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024a3a:	08200593          	li	a1,130
    80024a3e:	00015617          	auipc	a2,0x15
    80024a42:	9ca60613          	addi	a2,a2,-1590 # 80039408 <__func__.0+0x9718>
    80024a46:	0000b517          	auipc	a0,0xb
    80024a4a:	5aa50513          	addi	a0,a0,1450 # 8002fff0 <__func__.0+0x300>
    80024a4e:	63e080ef          	jal	8002d08c <printf>
    80024a52:	00033797          	auipc	a5,0x33
    80024a56:	5bf7c783          	lbu	a5,1471(a5) # 80058011 <excpt+0x1>
    80024a5a:	00033497          	auipc	s1,0x33
    80024a5e:	5b648493          	addi	s1,s1,1462 # 80058010 <excpt>
    80024a62:	0000b597          	auipc	a1,0xb
    80024a66:	56658593          	addi	a1,a1,1382 # 8002ffc8 <__func__.0+0x2d8>
    80024a6a:	cf89                	beqz	a5,80024a84 <stateen_AIA_test_4+0xb0>
    80024a6c:	6498                	ld	a4,8(s1)
    80024a6e:	47d9                	li	a5,22
    80024a70:	0000b597          	auipc	a1,0xb
    80024a74:	54858593          	addi	a1,a1,1352 # 8002ffb8 <__func__.0+0x2c8>
    80024a78:	00f70663          	beq	a4,a5,80024a84 <stateen_AIA_test_4+0xb0>
    80024a7c:	0000b597          	auipc	a1,0xb
    80024a80:	54c58593          	addi	a1,a1,1356 # 8002ffc8 <__func__.0+0x2d8>
    80024a84:	0000b517          	auipc	a0,0xb
    80024a88:	58450513          	addi	a0,a0,1412 # 80030008 <__func__.0+0x318>
    80024a8c:	600080ef          	jal	8002d08c <printf>
    80024a90:	00033797          	auipc	a5,0x33
    80024a94:	5817c783          	lbu	a5,1409(a5) # 80058011 <excpt+0x1>
    80024a98:	c789                	beqz	a5,80024aa2 <stateen_AIA_test_4+0xce>
    80024a9a:	6498                	ld	a4,8(s1)
    80024a9c:	47d9                	li	a5,22
    80024a9e:	00f70c63          	beq	a4,a5,80024ab6 <stateen_AIA_test_4+0xe2>
    80024aa2:	0000b517          	auipc	a0,0xb
    80024aa6:	56e50513          	addi	a0,a0,1390 # 80030010 <__func__.0+0x320>
    80024aaa:	5e2080ef          	jal	8002d08c <printf>
    80024aae:	02900513          	li	a0,41
    80024ab2:	2c8070ef          	jal	8002bd7a <putchar>
    80024ab6:	4529                	li	a0,10
    80024ab8:	2c2070ef          	jal	8002bd7a <putchar>
    80024abc:	00033797          	auipc	a5,0x33
    80024ac0:	5557c783          	lbu	a5,1365(a5) # 80058011 <excpt+0x1>
    80024ac4:	4401                	li	s0,0
    80024ac6:	c789                	beqz	a5,80024ad0 <stateen_AIA_test_4+0xfc>
    80024ac8:	6480                	ld	s0,8(s1)
    80024aca:	1429                	addi	s0,s0,-22
    80024acc:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024ad0:	4509                	li	a0,2
    80024ad2:	c36dc0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024ad6:	b36dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024ada:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024ade:	d70dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024ae2:	08200593          	li	a1,130
    80024ae6:	00015617          	auipc	a2,0x15
    80024aea:	97260613          	addi	a2,a2,-1678 # 80039458 <__func__.0+0x9768>
    80024aee:	0000b517          	auipc	a0,0xb
    80024af2:	50250513          	addi	a0,a0,1282 # 8002fff0 <__func__.0+0x300>
    80024af6:	596080ef          	jal	8002d08c <printf>
    80024afa:	00033797          	auipc	a5,0x33
    80024afe:	5177c783          	lbu	a5,1303(a5) # 80058011 <excpt+0x1>
    80024b02:	0000b597          	auipc	a1,0xb
    80024b06:	4c658593          	addi	a1,a1,1222 # 8002ffc8 <__func__.0+0x2d8>
    80024b0a:	cf89                	beqz	a5,80024b24 <stateen_AIA_test_4+0x150>
    80024b0c:	6498                	ld	a4,8(s1)
    80024b0e:	47d9                	li	a5,22
    80024b10:	0000b597          	auipc	a1,0xb
    80024b14:	4a858593          	addi	a1,a1,1192 # 8002ffb8 <__func__.0+0x2c8>
    80024b18:	00f70663          	beq	a4,a5,80024b24 <stateen_AIA_test_4+0x150>
    80024b1c:	0000b597          	auipc	a1,0xb
    80024b20:	4ac58593          	addi	a1,a1,1196 # 8002ffc8 <__func__.0+0x2d8>
    80024b24:	0000b517          	auipc	a0,0xb
    80024b28:	4e450513          	addi	a0,a0,1252 # 80030008 <__func__.0+0x318>
    80024b2c:	560080ef          	jal	8002d08c <printf>
    80024b30:	00033797          	auipc	a5,0x33
    80024b34:	4e17c783          	lbu	a5,1249(a5) # 80058011 <excpt+0x1>
    80024b38:	c789                	beqz	a5,80024b42 <stateen_AIA_test_4+0x16e>
    80024b3a:	6498                	ld	a4,8(s1)
    80024b3c:	47d9                	li	a5,22
    80024b3e:	00f70c63          	beq	a4,a5,80024b56 <stateen_AIA_test_4+0x182>
    80024b42:	0000b517          	auipc	a0,0xb
    80024b46:	4ce50513          	addi	a0,a0,1230 # 80030010 <__func__.0+0x320>
    80024b4a:	542080ef          	jal	8002d08c <printf>
    80024b4e:	02900513          	li	a0,41
    80024b52:	228070ef          	jal	8002bd7a <putchar>
    80024b56:	4529                	li	a0,10
    80024b58:	222070ef          	jal	8002bd7a <putchar>
    80024b5c:	c801                	beqz	s0,80024b6c <stateen_AIA_test_4+0x198>
    80024b5e:	00033797          	auipc	a5,0x33
    80024b62:	4b37c783          	lbu	a5,1203(a5) # 80058011 <excpt+0x1>
    80024b66:	4401                	li	s0,0
    80024b68:	18079363          	bnez	a5,80024cee <stateen_AIA_test_4+0x31a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024b6c:	4509                	li	a0,2
    80024b6e:	b9adc0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024b72:	a9adc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80024b76:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024b7a:	cd4dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024b7e:	08200593          	li	a1,130
    80024b82:	00015617          	auipc	a2,0x15
    80024b86:	92e60613          	addi	a2,a2,-1746 # 800394b0 <__func__.0+0x97c0>
    80024b8a:	0000b517          	auipc	a0,0xb
    80024b8e:	46650513          	addi	a0,a0,1126 # 8002fff0 <__func__.0+0x300>
    80024b92:	4fa080ef          	jal	8002d08c <printf>
    80024b96:	00033797          	auipc	a5,0x33
    80024b9a:	47b7c783          	lbu	a5,1147(a5) # 80058011 <excpt+0x1>
    80024b9e:	0000b597          	auipc	a1,0xb
    80024ba2:	42a58593          	addi	a1,a1,1066 # 8002ffc8 <__func__.0+0x2d8>
    80024ba6:	cf89                	beqz	a5,80024bc0 <stateen_AIA_test_4+0x1ec>
    80024ba8:	6498                	ld	a4,8(s1)
    80024baa:	47d9                	li	a5,22
    80024bac:	0000b597          	auipc	a1,0xb
    80024bb0:	40c58593          	addi	a1,a1,1036 # 8002ffb8 <__func__.0+0x2c8>
    80024bb4:	00f70663          	beq	a4,a5,80024bc0 <stateen_AIA_test_4+0x1ec>
    80024bb8:	0000b597          	auipc	a1,0xb
    80024bbc:	41058593          	addi	a1,a1,1040 # 8002ffc8 <__func__.0+0x2d8>
    80024bc0:	0000b517          	auipc	a0,0xb
    80024bc4:	44850513          	addi	a0,a0,1096 # 80030008 <__func__.0+0x318>
    80024bc8:	4c4080ef          	jal	8002d08c <printf>
    80024bcc:	00033797          	auipc	a5,0x33
    80024bd0:	4457c783          	lbu	a5,1093(a5) # 80058011 <excpt+0x1>
    80024bd4:	c789                	beqz	a5,80024bde <stateen_AIA_test_4+0x20a>
    80024bd6:	6498                	ld	a4,8(s1)
    80024bd8:	47d9                	li	a5,22
    80024bda:	00f70c63          	beq	a4,a5,80024bf2 <stateen_AIA_test_4+0x21e>
    80024bde:	0000b517          	auipc	a0,0xb
    80024be2:	43250513          	addi	a0,a0,1074 # 80030010 <__func__.0+0x320>
    80024be6:	4a6080ef          	jal	8002d08c <printf>
    80024bea:	02900513          	li	a0,41
    80024bee:	18c070ef          	jal	8002bd7a <putchar>
    80024bf2:	4529                	li	a0,10
    80024bf4:	186070ef          	jal	8002bd7a <putchar>
    80024bf8:	c801                	beqz	s0,80024c08 <stateen_AIA_test_4+0x234>
    80024bfa:	00033797          	auipc	a5,0x33
    80024bfe:	4177c783          	lbu	a5,1047(a5) # 80058011 <excpt+0x1>
    80024c02:	4401                	li	s0,0
    80024c04:	0e079063          	bnez	a5,80024ce4 <stateen_AIA_test_4+0x310>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024c08:	4509                	li	a0,2
    80024c0a:	afedc0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80024c0e:	9fedc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024c12:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024c16:	c38dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024c1a:	08200593          	li	a1,130
    80024c1e:	00015617          	auipc	a2,0x15
    80024c22:	8e260613          	addi	a2,a2,-1822 # 80039500 <__func__.0+0x9810>
    80024c26:	0000b517          	auipc	a0,0xb
    80024c2a:	3ca50513          	addi	a0,a0,970 # 8002fff0 <__func__.0+0x300>
    80024c2e:	45e080ef          	jal	8002d08c <printf>
    80024c32:	00033797          	auipc	a5,0x33
    80024c36:	3df7c783          	lbu	a5,991(a5) # 80058011 <excpt+0x1>
    80024c3a:	0000b597          	auipc	a1,0xb
    80024c3e:	38e58593          	addi	a1,a1,910 # 8002ffc8 <__func__.0+0x2d8>
    80024c42:	cf89                	beqz	a5,80024c5c <stateen_AIA_test_4+0x288>
    80024c44:	6498                	ld	a4,8(s1)
    80024c46:	47d9                	li	a5,22
    80024c48:	0000b597          	auipc	a1,0xb
    80024c4c:	37058593          	addi	a1,a1,880 # 8002ffb8 <__func__.0+0x2c8>
    80024c50:	00f70663          	beq	a4,a5,80024c5c <stateen_AIA_test_4+0x288>
    80024c54:	0000b597          	auipc	a1,0xb
    80024c58:	37458593          	addi	a1,a1,884 # 8002ffc8 <__func__.0+0x2d8>
    80024c5c:	0000b517          	auipc	a0,0xb
    80024c60:	3ac50513          	addi	a0,a0,940 # 80030008 <__func__.0+0x318>
    80024c64:	428080ef          	jal	8002d08c <printf>
    80024c68:	00033797          	auipc	a5,0x33
    80024c6c:	3a97c783          	lbu	a5,937(a5) # 80058011 <excpt+0x1>
    80024c70:	c789                	beqz	a5,80024c7a <stateen_AIA_test_4+0x2a6>
    80024c72:	6498                	ld	a4,8(s1)
    80024c74:	47d9                	li	a5,22
    80024c76:	00f70c63          	beq	a4,a5,80024c8e <stateen_AIA_test_4+0x2ba>
    80024c7a:	0000b517          	auipc	a0,0xb
    80024c7e:	39650513          	addi	a0,a0,918 # 80030010 <__func__.0+0x320>
    80024c82:	40a080ef          	jal	8002d08c <printf>
    80024c86:	02900513          	li	a0,41
    80024c8a:	0f0070ef          	jal	8002bd7a <putchar>
    80024c8e:	4529                	li	a0,10
    80024c90:	0ea070ef          	jal	8002bd7a <putchar>
    80024c94:	c015                	beqz	s0,80024cb8 <stateen_AIA_test_4+0x2e4>
    80024c96:	00033417          	auipc	s0,0x33
    80024c9a:	37b44403          	lbu	s0,891(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80024c9e:	0000b597          	auipc	a1,0xb
    80024ca2:	32a58593          	addi	a1,a1,810 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024ca6:	cc11                	beqz	s0,80024cc2 <stateen_AIA_test_4+0x2ee>
    80024ca8:	6498                	ld	a4,8(s1)
    80024caa:	47d9                	li	a5,22
    TEST_END();
    80024cac:	0000b597          	auipc	a1,0xb
    80024cb0:	30c58593          	addi	a1,a1,780 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024cb4:	00f70763          	beq	a4,a5,80024cc2 <stateen_AIA_test_4+0x2ee>
    80024cb8:	4401                	li	s0,0
    TEST_END();
    80024cba:	0000b597          	auipc	a1,0xb
    80024cbe:	30e58593          	addi	a1,a1,782 # 8002ffc8 <__func__.0+0x2d8>
    80024cc2:	0000b517          	auipc	a0,0xb
    80024cc6:	3ae50513          	addi	a0,a0,942 # 80030070 <__func__.0+0x380>
    80024cca:	3c2080ef          	jal	8002d08c <printf>
    80024cce:	4511                	li	a0,4
    80024cd0:	a38dc0ef          	jal	80000f08 <goto_priv>
    80024cd4:	bffdc0ef          	jal	800018d2 <reset_state>

}
    80024cd8:	60e2                	ld	ra,24(sp)
    80024cda:	8522                	mv	a0,s0
    80024cdc:	6442                	ld	s0,16(sp)
    80024cde:	64a2                	ld	s1,8(sp)
    80024ce0:	6105                	addi	sp,sp,32
    80024ce2:	8082                	ret
    TEST_ASSERT("vs mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024ce4:	6480                	ld	s0,8(s1)
    80024ce6:	1429                	addi	s0,s0,-22
    80024ce8:	00143413          	seqz	s0,s0
    80024cec:	bf31                	j	80024c08 <stateen_AIA_test_4+0x234>
    TEST_ASSERT("vs mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024cee:	6480                	ld	s0,8(s1)
    80024cf0:	1429                	addi	s0,s0,-22
    80024cf2:	00143413          	seqz	s0,s0
    80024cf6:	bd9d                	j	80024b6c <stateen_AIA_test_4+0x198>

0000000080024cf8 <stateen_AIA_test_5>:

bool stateen_AIA_test_5(){
    80024cf8:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=0,hs mode 不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    80024cfa:	0000b597          	auipc	a1,0xb
    80024cfe:	b3658593          	addi	a1,a1,-1226 # 8002f830 <__func__.18>
    80024d02:	0000b517          	auipc	a0,0xb
    80024d06:	2d650513          	addi	a0,a0,726 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_AIA_test_5(){
    80024d0a:	ec06                	sd	ra,24(sp)
    80024d0c:	e822                	sd	s0,16(sp)
    80024d0e:	e426                	sd	s1,8(sp)
    TEST_START();
    80024d10:	37c080ef          	jal	8002d08c <printf>
    80024d14:	4529                	li	a0,10
    80024d16:	064070ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80024d1a:	4511                	li	a0,4
    80024d1c:	9ecdc0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024d20:	4785                	li	a5,1
    80024d22:	17ee                	slli	a5,a5,0x3b
    80024d24:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    80024d28:	450d                	li	a0,3
    80024d2a:	9dedc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024d2e:	8dedc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024d32:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024d36:	b18dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss hvien register cause to illegal except when mstateen.aia=0",
    80024d3a:	08200593          	li	a1,130
    80024d3e:	00015617          	auipc	a2,0x15
    80024d42:	81a60613          	addi	a2,a2,-2022 # 80039558 <__func__.0+0x9868>
    80024d46:	0000b517          	auipc	a0,0xb
    80024d4a:	2aa50513          	addi	a0,a0,682 # 8002fff0 <__func__.0+0x300>
    80024d4e:	33e080ef          	jal	8002d08c <printf>
    80024d52:	00033797          	auipc	a5,0x33
    80024d56:	2bf7c783          	lbu	a5,703(a5) # 80058011 <excpt+0x1>
    80024d5a:	00033497          	auipc	s1,0x33
    80024d5e:	2b648493          	addi	s1,s1,694 # 80058010 <excpt>
    80024d62:	0000b597          	auipc	a1,0xb
    80024d66:	26658593          	addi	a1,a1,614 # 8002ffc8 <__func__.0+0x2d8>
    80024d6a:	cf89                	beqz	a5,80024d84 <stateen_AIA_test_5+0x8c>
    80024d6c:	6498                	ld	a4,8(s1)
    80024d6e:	4789                	li	a5,2
    80024d70:	0000b597          	auipc	a1,0xb
    80024d74:	24858593          	addi	a1,a1,584 # 8002ffb8 <__func__.0+0x2c8>
    80024d78:	00f70663          	beq	a4,a5,80024d84 <stateen_AIA_test_5+0x8c>
    80024d7c:	0000b597          	auipc	a1,0xb
    80024d80:	24c58593          	addi	a1,a1,588 # 8002ffc8 <__func__.0+0x2d8>
    80024d84:	0000b517          	auipc	a0,0xb
    80024d88:	28450513          	addi	a0,a0,644 # 80030008 <__func__.0+0x318>
    80024d8c:	300080ef          	jal	8002d08c <printf>
    80024d90:	00033797          	auipc	a5,0x33
    80024d94:	2817c783          	lbu	a5,641(a5) # 80058011 <excpt+0x1>
    80024d98:	c789                	beqz	a5,80024da2 <stateen_AIA_test_5+0xaa>
    80024d9a:	6498                	ld	a4,8(s1)
    80024d9c:	4789                	li	a5,2
    80024d9e:	00f70c63          	beq	a4,a5,80024db6 <stateen_AIA_test_5+0xbe>
    80024da2:	0000b517          	auipc	a0,0xb
    80024da6:	26e50513          	addi	a0,a0,622 # 80030010 <__func__.0+0x320>
    80024daa:	2e2080ef          	jal	8002d08c <printf>
    80024dae:	02900513          	li	a0,41
    80024db2:	7c9060ef          	jal	8002bd7a <putchar>
    80024db6:	4529                	li	a0,10
    80024db8:	7c3060ef          	jal	8002bd7a <putchar>
    80024dbc:	00033797          	auipc	a5,0x33
    80024dc0:	2557c783          	lbu	a5,597(a5) # 80058011 <excpt+0x1>
    80024dc4:	4401                	li	s0,0
    80024dc6:	c789                	beqz	a5,80024dd0 <stateen_AIA_test_5+0xd8>
    80024dc8:	6480                	ld	s0,8(s1)
    80024dca:	1479                	addi	s0,s0,-2
    80024dcc:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024dd0:	450d                	li	a0,3
    80024dd2:	936dc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024dd6:	836dc0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024dda:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024dde:	a70dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024de2:	08200593          	li	a1,130
    80024de6:	00014617          	auipc	a2,0x14
    80024dea:	7c260613          	addi	a2,a2,1986 # 800395a8 <__func__.0+0x98b8>
    80024dee:	0000b517          	auipc	a0,0xb
    80024df2:	20250513          	addi	a0,a0,514 # 8002fff0 <__func__.0+0x300>
    80024df6:	296080ef          	jal	8002d08c <printf>
    80024dfa:	00033797          	auipc	a5,0x33
    80024dfe:	2177c783          	lbu	a5,535(a5) # 80058011 <excpt+0x1>
    80024e02:	0000b597          	auipc	a1,0xb
    80024e06:	1c658593          	addi	a1,a1,454 # 8002ffc8 <__func__.0+0x2d8>
    80024e0a:	cf89                	beqz	a5,80024e24 <stateen_AIA_test_5+0x12c>
    80024e0c:	6498                	ld	a4,8(s1)
    80024e0e:	4789                	li	a5,2
    80024e10:	0000b597          	auipc	a1,0xb
    80024e14:	1a858593          	addi	a1,a1,424 # 8002ffb8 <__func__.0+0x2c8>
    80024e18:	00f70663          	beq	a4,a5,80024e24 <stateen_AIA_test_5+0x12c>
    80024e1c:	0000b597          	auipc	a1,0xb
    80024e20:	1ac58593          	addi	a1,a1,428 # 8002ffc8 <__func__.0+0x2d8>
    80024e24:	0000b517          	auipc	a0,0xb
    80024e28:	1e450513          	addi	a0,a0,484 # 80030008 <__func__.0+0x318>
    80024e2c:	260080ef          	jal	8002d08c <printf>
    80024e30:	00033797          	auipc	a5,0x33
    80024e34:	1e17c783          	lbu	a5,481(a5) # 80058011 <excpt+0x1>
    80024e38:	c789                	beqz	a5,80024e42 <stateen_AIA_test_5+0x14a>
    80024e3a:	6498                	ld	a4,8(s1)
    80024e3c:	4789                	li	a5,2
    80024e3e:	00f70c63          	beq	a4,a5,80024e56 <stateen_AIA_test_5+0x15e>
    80024e42:	0000b517          	auipc	a0,0xb
    80024e46:	1ce50513          	addi	a0,a0,462 # 80030010 <__func__.0+0x320>
    80024e4a:	242080ef          	jal	8002d08c <printf>
    80024e4e:	02900513          	li	a0,41
    80024e52:	729060ef          	jal	8002bd7a <putchar>
    80024e56:	4529                	li	a0,10
    80024e58:	723060ef          	jal	8002bd7a <putchar>
    80024e5c:	c801                	beqz	s0,80024e6c <stateen_AIA_test_5+0x174>
    80024e5e:	00033797          	auipc	a5,0x33
    80024e62:	1b37c783          	lbu	a5,435(a5) # 80058011 <excpt+0x1>
    80024e66:	4401                	li	s0,0
    80024e68:	18079363          	bnez	a5,80024fee <stateen_AIA_test_5+0x2f6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024e6c:	450d                	li	a0,3
    80024e6e:	89adc0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024e72:	f9bdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    80024e76:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024e7a:	9d4dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss stopi register cause to illegal except when mstateen.aia=0",
    80024e7e:	08200593          	li	a1,130
    80024e82:	00014617          	auipc	a2,0x14
    80024e86:	77660613          	addi	a2,a2,1910 # 800395f8 <__func__.0+0x9908>
    80024e8a:	0000b517          	auipc	a0,0xb
    80024e8e:	16650513          	addi	a0,a0,358 # 8002fff0 <__func__.0+0x300>
    80024e92:	1fa080ef          	jal	8002d08c <printf>
    80024e96:	00033797          	auipc	a5,0x33
    80024e9a:	17b7c783          	lbu	a5,379(a5) # 80058011 <excpt+0x1>
    80024e9e:	0000b597          	auipc	a1,0xb
    80024ea2:	12a58593          	addi	a1,a1,298 # 8002ffc8 <__func__.0+0x2d8>
    80024ea6:	cf89                	beqz	a5,80024ec0 <stateen_AIA_test_5+0x1c8>
    80024ea8:	6498                	ld	a4,8(s1)
    80024eaa:	4789                	li	a5,2
    80024eac:	0000b597          	auipc	a1,0xb
    80024eb0:	10c58593          	addi	a1,a1,268 # 8002ffb8 <__func__.0+0x2c8>
    80024eb4:	00f70663          	beq	a4,a5,80024ec0 <stateen_AIA_test_5+0x1c8>
    80024eb8:	0000b597          	auipc	a1,0xb
    80024ebc:	11058593          	addi	a1,a1,272 # 8002ffc8 <__func__.0+0x2d8>
    80024ec0:	0000b517          	auipc	a0,0xb
    80024ec4:	14850513          	addi	a0,a0,328 # 80030008 <__func__.0+0x318>
    80024ec8:	1c4080ef          	jal	8002d08c <printf>
    80024ecc:	00033797          	auipc	a5,0x33
    80024ed0:	1457c783          	lbu	a5,325(a5) # 80058011 <excpt+0x1>
    80024ed4:	c789                	beqz	a5,80024ede <stateen_AIA_test_5+0x1e6>
    80024ed6:	6498                	ld	a4,8(s1)
    80024ed8:	4789                	li	a5,2
    80024eda:	00f70c63          	beq	a4,a5,80024ef2 <stateen_AIA_test_5+0x1fa>
    80024ede:	0000b517          	auipc	a0,0xb
    80024ee2:	13250513          	addi	a0,a0,306 # 80030010 <__func__.0+0x320>
    80024ee6:	1a6080ef          	jal	8002d08c <printf>
    80024eea:	02900513          	li	a0,41
    80024eee:	68d060ef          	jal	8002bd7a <putchar>
    80024ef2:	4529                	li	a0,10
    80024ef4:	687060ef          	jal	8002bd7a <putchar>
    80024ef8:	c801                	beqz	s0,80024f08 <stateen_AIA_test_5+0x210>
    80024efa:	00033797          	auipc	a5,0x33
    80024efe:	1177c783          	lbu	a5,279(a5) # 80058011 <excpt+0x1>
    80024f02:	4401                	li	s0,0
    80024f04:	0e079063          	bnez	a5,80024fe4 <stateen_AIA_test_5+0x2ec>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024f08:	450d                	li	a0,3
    80024f0a:	fffdb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024f0e:	effdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024f12:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024f16:	938dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024f1a:	08200593          	li	a1,130
    80024f1e:	00014617          	auipc	a2,0x14
    80024f22:	72a60613          	addi	a2,a2,1834 # 80039648 <__func__.0+0x9958>
    80024f26:	0000b517          	auipc	a0,0xb
    80024f2a:	0ca50513          	addi	a0,a0,202 # 8002fff0 <__func__.0+0x300>
    80024f2e:	15e080ef          	jal	8002d08c <printf>
    80024f32:	00033797          	auipc	a5,0x33
    80024f36:	0df7c783          	lbu	a5,223(a5) # 80058011 <excpt+0x1>
    80024f3a:	0000b597          	auipc	a1,0xb
    80024f3e:	08e58593          	addi	a1,a1,142 # 8002ffc8 <__func__.0+0x2d8>
    80024f42:	cf89                	beqz	a5,80024f5c <stateen_AIA_test_5+0x264>
    80024f44:	6498                	ld	a4,8(s1)
    80024f46:	4789                	li	a5,2
    80024f48:	0000b597          	auipc	a1,0xb
    80024f4c:	07058593          	addi	a1,a1,112 # 8002ffb8 <__func__.0+0x2c8>
    80024f50:	00f70663          	beq	a4,a5,80024f5c <stateen_AIA_test_5+0x264>
    80024f54:	0000b597          	auipc	a1,0xb
    80024f58:	07458593          	addi	a1,a1,116 # 8002ffc8 <__func__.0+0x2d8>
    80024f5c:	0000b517          	auipc	a0,0xb
    80024f60:	0ac50513          	addi	a0,a0,172 # 80030008 <__func__.0+0x318>
    80024f64:	128080ef          	jal	8002d08c <printf>
    80024f68:	00033797          	auipc	a5,0x33
    80024f6c:	0a97c783          	lbu	a5,169(a5) # 80058011 <excpt+0x1>
    80024f70:	c789                	beqz	a5,80024f7a <stateen_AIA_test_5+0x282>
    80024f72:	6498                	ld	a4,8(s1)
    80024f74:	4789                	li	a5,2
    80024f76:	00f70c63          	beq	a4,a5,80024f8e <stateen_AIA_test_5+0x296>
    80024f7a:	0000b517          	auipc	a0,0xb
    80024f7e:	09650513          	addi	a0,a0,150 # 80030010 <__func__.0+0x320>
    80024f82:	10a080ef          	jal	8002d08c <printf>
    80024f86:	02900513          	li	a0,41
    80024f8a:	5f1060ef          	jal	8002bd7a <putchar>
    80024f8e:	4529                	li	a0,10
    80024f90:	5eb060ef          	jal	8002bd7a <putchar>
    80024f94:	c015                	beqz	s0,80024fb8 <stateen_AIA_test_5+0x2c0>
    80024f96:	00033417          	auipc	s0,0x33
    80024f9a:	07b44403          	lbu	s0,123(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80024f9e:	0000b597          	auipc	a1,0xb
    80024fa2:	02a58593          	addi	a1,a1,42 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024fa6:	cc11                	beqz	s0,80024fc2 <stateen_AIA_test_5+0x2ca>
    80024fa8:	6498                	ld	a4,8(s1)
    80024faa:	4789                	li	a5,2
    TEST_END();
    80024fac:	0000b597          	auipc	a1,0xb
    80024fb0:	00c58593          	addi	a1,a1,12 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024fb4:	00f70763          	beq	a4,a5,80024fc2 <stateen_AIA_test_5+0x2ca>
    80024fb8:	4401                	li	s0,0
    TEST_END();
    80024fba:	0000b597          	auipc	a1,0xb
    80024fbe:	00e58593          	addi	a1,a1,14 # 8002ffc8 <__func__.0+0x2d8>
    80024fc2:	0000b517          	auipc	a0,0xb
    80024fc6:	0ae50513          	addi	a0,a0,174 # 80030070 <__func__.0+0x380>
    80024fca:	0c2080ef          	jal	8002d08c <printf>
    80024fce:	4511                	li	a0,4
    80024fd0:	f39db0ef          	jal	80000f08 <goto_priv>
    80024fd4:	8ffdc0ef          	jal	800018d2 <reset_state>

}
    80024fd8:	60e2                	ld	ra,24(sp)
    80024fda:	8522                	mv	a0,s0
    80024fdc:	6442                	ld	s0,16(sp)
    80024fde:	64a2                	ld	s1,8(sp)
    80024fe0:	6105                	addi	sp,sp,32
    80024fe2:	8082                	ret
    TEST_ASSERT("hs mode accesss stopi register cause to illegal except when mstateen.aia=0",
    80024fe4:	6480                	ld	s0,8(s1)
    80024fe6:	1479                	addi	s0,s0,-2
    80024fe8:	00143413          	seqz	s0,s0
    80024fec:	bf31                	j	80024f08 <stateen_AIA_test_5+0x210>
    TEST_ASSERT("hs mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024fee:	6480                	ld	s0,8(s1)
    80024ff0:	1479                	addi	s0,s0,-2
    80024ff2:	00143413          	seqz	s0,s0
    80024ff6:	bd9d                	j	80024e6c <stateen_AIA_test_5+0x174>

0000000080024ff8 <stateen_AIA_test_6>:


bool stateen_AIA_test_6(){
    80024ff8:	1101                	addi	sp,sp,-32

    TEST_START();
    80024ffa:	0000b597          	auipc	a1,0xb
    80024ffe:	84e58593          	addi	a1,a1,-1970 # 8002f848 <__func__.17>
    80025002:	0000b517          	auipc	a0,0xb
    80025006:	fd650513          	addi	a0,a0,-42 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_AIA_test_6(){
    8002500a:	ec06                	sd	ra,24(sp)
    8002500c:	e822                	sd	s0,16(sp)
    8002500e:	e426                	sd	s1,8(sp)
    TEST_START();
    80025010:	07c080ef          	jal	8002d08c <printf>
    80025014:	4529                	li	a0,10
    80025016:	565060ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    8002501a:	4511                	li	a0,4
    8002501c:	eeddb0ef          	jal	80000f08 <goto_priv>
    //当mstateen.AIA=1,v=0时,可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80025020:	4785                	li	a5,1
    80025022:	17ee                	slli	a5,a5,0x3b
    80025024:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    80025028:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    8002502c:	450d                	li	a0,3
    8002502e:	edbdb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025032:	ddbdb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80025036:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002503a:	814dc0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss hvien register successful when  mstateen.aia=1 hstateen.aia=0",
    8002503e:	08200593          	li	a1,130
    80025042:	00014617          	auipc	a2,0x14
    80025046:	65660613          	addi	a2,a2,1622 # 80039698 <__func__.0+0x99a8>
    8002504a:	0000b517          	auipc	a0,0xb
    8002504e:	fa650513          	addi	a0,a0,-90 # 8002fff0 <__func__.0+0x300>
    80025052:	03a080ef          	jal	8002d08c <printf>
    80025056:	00033797          	auipc	a5,0x33
    8002505a:	fbb7c783          	lbu	a5,-69(a5) # 80058011 <excpt+0x1>
    8002505e:	0000b597          	auipc	a1,0xb
    80025062:	f5a58593          	addi	a1,a1,-166 # 8002ffb8 <__func__.0+0x2c8>
    80025066:	c789                	beqz	a5,80025070 <stateen_AIA_test_6+0x78>
    80025068:	0000b597          	auipc	a1,0xb
    8002506c:	f6058593          	addi	a1,a1,-160 # 8002ffc8 <__func__.0+0x2d8>
    80025070:	0000b517          	auipc	a0,0xb
    80025074:	f9850513          	addi	a0,a0,-104 # 80030008 <__func__.0+0x318>
    80025078:	014080ef          	jal	8002d08c <printf>
    8002507c:	00033797          	auipc	a5,0x33
    80025080:	f957c783          	lbu	a5,-107(a5) # 80058011 <excpt+0x1>
    80025084:	5e079b63          	bnez	a5,8002567a <stateen_AIA_test_6+0x682>
    80025088:	4529                	li	a0,10
    8002508a:	4f1060ef          	jal	8002bd7a <putchar>
    8002508e:	00033497          	auipc	s1,0x33
    80025092:	f834c483          	lbu	s1,-125(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_HVICTL);
    80025096:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002509a:	fb5db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss hvictl register successful when  mstateen.aia=1 hstateen.aia=0",
    8002509e:	08200593          	li	a1,130
    800250a2:	00014617          	auipc	a2,0x14
    800250a6:	64660613          	addi	a2,a2,1606 # 800396e8 <__func__.0+0x99f8>
    800250aa:	0000b517          	auipc	a0,0xb
    800250ae:	f4650513          	addi	a0,a0,-186 # 8002fff0 <__func__.0+0x300>
    800250b2:	7db070ef          	jal	8002d08c <printf>
    800250b6:	00033797          	auipc	a5,0x33
    800250ba:	f5b7c783          	lbu	a5,-165(a5) # 80058011 <excpt+0x1>
    800250be:	0000b597          	auipc	a1,0xb
    800250c2:	f0a58593          	addi	a1,a1,-246 # 8002ffc8 <__func__.0+0x2d8>
    800250c6:	e789                	bnez	a5,800250d0 <stateen_AIA_test_6+0xd8>
    800250c8:	0000b597          	auipc	a1,0xb
    800250cc:	ef058593          	addi	a1,a1,-272 # 8002ffb8 <__func__.0+0x2c8>
    800250d0:	0000b517          	auipc	a0,0xb
    800250d4:	f3850513          	addi	a0,a0,-200 # 80030008 <__func__.0+0x318>
    800250d8:	7b5070ef          	jal	8002d08c <printf>
    800250dc:	00033797          	auipc	a5,0x33
    800250e0:	f357c783          	lbu	a5,-203(a5) # 80058011 <excpt+0x1>
    800250e4:	58079063          	bnez	a5,80025664 <stateen_AIA_test_6+0x66c>
    800250e8:	4529                	li	a0,10
    800250ea:	491060ef          	jal	8002bd7a <putchar>
    800250ee:	4401                	li	s0,0
    800250f0:	e499                	bnez	s1,800250fe <stateen_AIA_test_6+0x106>
    800250f2:	00033417          	auipc	s0,0x33
    800250f6:	f1f44403          	lbu	s0,-225(s0) # 80058011 <excpt+0x1>
    800250fa:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    800250fe:	4505                	li	a0,1
    80025100:	e09db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025104:	d09db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80025108:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002510c:	f43db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    80025110:	08200593          	li	a1,130
    80025114:	00014617          	auipc	a2,0x14
    80025118:	62460613          	addi	a2,a2,1572 # 80039738 <__func__.0+0x9a48>
    8002511c:	0000b517          	auipc	a0,0xb
    80025120:	ed450513          	addi	a0,a0,-300 # 8002fff0 <__func__.0+0x300>
    80025124:	769070ef          	jal	8002d08c <printf>
    80025128:	00033797          	auipc	a5,0x33
    8002512c:	ee97c783          	lbu	a5,-279(a5) # 80058011 <excpt+0x1>
    80025130:	0000b597          	auipc	a1,0xb
    80025134:	e9858593          	addi	a1,a1,-360 # 8002ffc8 <__func__.0+0x2d8>
    80025138:	e789                	bnez	a5,80025142 <stateen_AIA_test_6+0x14a>
    8002513a:	0000b597          	auipc	a1,0xb
    8002513e:	e7e58593          	addi	a1,a1,-386 # 8002ffb8 <__func__.0+0x2c8>
    80025142:	0000b517          	auipc	a0,0xb
    80025146:	ec650513          	addi	a0,a0,-314 # 80030008 <__func__.0+0x318>
    8002514a:	743070ef          	jal	8002d08c <printf>
    8002514e:	00033797          	auipc	a5,0x33
    80025152:	ec37c783          	lbu	a5,-317(a5) # 80058011 <excpt+0x1>
    80025156:	4e079c63          	bnez	a5,8002564e <stateen_AIA_test_6+0x656>
    8002515a:	4529                	li	a0,10
    8002515c:	41f060ef          	jal	8002bd7a <putchar>
    80025160:	c419                	beqz	s0,8002516e <stateen_AIA_test_6+0x176>
    80025162:	00033417          	auipc	s0,0x33
    80025166:	eaf44403          	lbu	s0,-337(s0) # 80058011 <excpt+0x1>
    8002516a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    8002516e:	4505                	li	a0,1
    80025170:	d99db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025174:	c99db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025178:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002517c:	ed3db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    80025180:	08200593          	li	a1,130
    80025184:	00014617          	auipc	a2,0x14
    80025188:	60460613          	addi	a2,a2,1540 # 80039788 <__func__.0+0x9a98>
    8002518c:	0000b517          	auipc	a0,0xb
    80025190:	e6450513          	addi	a0,a0,-412 # 8002fff0 <__func__.0+0x300>
    80025194:	6f9070ef          	jal	8002d08c <printf>
    80025198:	00033797          	auipc	a5,0x33
    8002519c:	e797c783          	lbu	a5,-391(a5) # 80058011 <excpt+0x1>
    800251a0:	0000b597          	auipc	a1,0xb
    800251a4:	e2858593          	addi	a1,a1,-472 # 8002ffc8 <__func__.0+0x2d8>
    800251a8:	e789                	bnez	a5,800251b2 <stateen_AIA_test_6+0x1ba>
    800251aa:	0000b597          	auipc	a1,0xb
    800251ae:	e0e58593          	addi	a1,a1,-498 # 8002ffb8 <__func__.0+0x2c8>
    800251b2:	0000b517          	auipc	a0,0xb
    800251b6:	e5650513          	addi	a0,a0,-426 # 80030008 <__func__.0+0x318>
    800251ba:	6d3070ef          	jal	8002d08c <printf>
    800251be:	00033797          	auipc	a5,0x33
    800251c2:	e537c783          	lbu	a5,-429(a5) # 80058011 <excpt+0x1>
    800251c6:	46079963          	bnez	a5,80025638 <stateen_AIA_test_6+0x640>
    800251ca:	4529                	li	a0,10
    800251cc:	3af060ef          	jal	8002bd7a <putchar>
    800251d0:	c419                	beqz	s0,800251de <stateen_AIA_test_6+0x1e6>
    800251d2:	00033417          	auipc	s0,0x33
    800251d6:	e3f44403          	lbu	s0,-449(s0) # 80058011 <excpt+0x1>
    800251da:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    800251de:	4511                	li	a0,4
    800251e0:	d29db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800251e4:	c29db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800251e8:	608027f3          	csrr	a5,hvien

    excpt_info();
    800251ec:	e63db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    800251f0:	08200593          	li	a1,130
    800251f4:	00014617          	auipc	a2,0x14
    800251f8:	5e460613          	addi	a2,a2,1508 # 800397d8 <__func__.0+0x9ae8>
    800251fc:	0000b517          	auipc	a0,0xb
    80025200:	df450513          	addi	a0,a0,-524 # 8002fff0 <__func__.0+0x300>
    80025204:	689070ef          	jal	8002d08c <printf>
    80025208:	00033797          	auipc	a5,0x33
    8002520c:	e097c783          	lbu	a5,-503(a5) # 80058011 <excpt+0x1>
    80025210:	0000b597          	auipc	a1,0xb
    80025214:	db858593          	addi	a1,a1,-584 # 8002ffc8 <__func__.0+0x2d8>
    80025218:	e789                	bnez	a5,80025222 <stateen_AIA_test_6+0x22a>
    8002521a:	0000b597          	auipc	a1,0xb
    8002521e:	d9e58593          	addi	a1,a1,-610 # 8002ffb8 <__func__.0+0x2c8>
    80025222:	0000b517          	auipc	a0,0xb
    80025226:	de650513          	addi	a0,a0,-538 # 80030008 <__func__.0+0x318>
    8002522a:	663070ef          	jal	8002d08c <printf>
    8002522e:	00033797          	auipc	a5,0x33
    80025232:	de37c783          	lbu	a5,-541(a5) # 80058011 <excpt+0x1>
    80025236:	3e079663          	bnez	a5,80025622 <stateen_AIA_test_6+0x62a>
    8002523a:	4529                	li	a0,10
    8002523c:	33f060ef          	jal	8002bd7a <putchar>
    80025240:	c419                	beqz	s0,8002524e <stateen_AIA_test_6+0x256>
    80025242:	00033417          	auipc	s0,0x33
    80025246:	dcf44403          	lbu	s0,-561(s0) # 80058011 <excpt+0x1>
    8002524a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    8002524e:	4511                	li	a0,4
    80025250:	cb9db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025254:	bb9db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025258:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002525c:	df3db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    80025260:	08200593          	li	a1,130
    80025264:	00014617          	auipc	a2,0x14
    80025268:	5c460613          	addi	a2,a2,1476 # 80039828 <__func__.0+0x9b38>
    8002526c:	0000b517          	auipc	a0,0xb
    80025270:	d8450513          	addi	a0,a0,-636 # 8002fff0 <__func__.0+0x300>
    80025274:	619070ef          	jal	8002d08c <printf>
    80025278:	00033797          	auipc	a5,0x33
    8002527c:	d997c783          	lbu	a5,-615(a5) # 80058011 <excpt+0x1>
    80025280:	0000b597          	auipc	a1,0xb
    80025284:	d4858593          	addi	a1,a1,-696 # 8002ffc8 <__func__.0+0x2d8>
    80025288:	e789                	bnez	a5,80025292 <stateen_AIA_test_6+0x29a>
    8002528a:	0000b597          	auipc	a1,0xb
    8002528e:	d2e58593          	addi	a1,a1,-722 # 8002ffb8 <__func__.0+0x2c8>
    80025292:	0000b517          	auipc	a0,0xb
    80025296:	d7650513          	addi	a0,a0,-650 # 80030008 <__func__.0+0x318>
    8002529a:	5f3070ef          	jal	8002d08c <printf>
    8002529e:	00033797          	auipc	a5,0x33
    800252a2:	d737c783          	lbu	a5,-653(a5) # 80058011 <excpt+0x1>
    800252a6:	36079363          	bnez	a5,8002560c <stateen_AIA_test_6+0x614>
    800252aa:	4529                	li	a0,10
    800252ac:	2cf060ef          	jal	8002bd7a <putchar>
    800252b0:	c419                	beqz	s0,800252be <stateen_AIA_test_6+0x2c6>
    800252b2:	00033417          	auipc	s0,0x33
    800252b6:	d5f44403          	lbu	s0,-673(s0) # 80058011 <excpt+0x1>
    800252ba:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    800252be:	450d                	li	a0,3
    800252c0:	c49db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800252c4:	b49db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    800252c8:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800252cc:	d83db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss stopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800252d0:	08200593          	li	a1,130
    800252d4:	00014617          	auipc	a2,0x14
    800252d8:	5a460613          	addi	a2,a2,1444 # 80039878 <__func__.0+0x9b88>
    800252dc:	0000b517          	auipc	a0,0xb
    800252e0:	d1450513          	addi	a0,a0,-748 # 8002fff0 <__func__.0+0x300>
    800252e4:	5a9070ef          	jal	8002d08c <printf>
    800252e8:	00033797          	auipc	a5,0x33
    800252ec:	d297c783          	lbu	a5,-727(a5) # 80058011 <excpt+0x1>
    800252f0:	0000b597          	auipc	a1,0xb
    800252f4:	cd858593          	addi	a1,a1,-808 # 8002ffc8 <__func__.0+0x2d8>
    800252f8:	e789                	bnez	a5,80025302 <stateen_AIA_test_6+0x30a>
    800252fa:	0000b597          	auipc	a1,0xb
    800252fe:	cbe58593          	addi	a1,a1,-834 # 8002ffb8 <__func__.0+0x2c8>
    80025302:	0000b517          	auipc	a0,0xb
    80025306:	d0650513          	addi	a0,a0,-762 # 80030008 <__func__.0+0x318>
    8002530a:	583070ef          	jal	8002d08c <printf>
    8002530e:	00033797          	auipc	a5,0x33
    80025312:	d037c783          	lbu	a5,-765(a5) # 80058011 <excpt+0x1>
    80025316:	2e079063          	bnez	a5,800255f6 <stateen_AIA_test_6+0x5fe>
    8002531a:	4529                	li	a0,10
    8002531c:	25f060ef          	jal	8002bd7a <putchar>
    80025320:	c419                	beqz	s0,8002532e <stateen_AIA_test_6+0x336>
    80025322:	00033417          	auipc	s0,0x33
    80025326:	cef44403          	lbu	s0,-785(s0) # 80058011 <excpt+0x1>
    8002532a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    CSRR(CSR_VSTOPI);
    8002532e:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80025332:	d1ddb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss vstopi register successful when  mstateen.aia=1 hstateen.aia=0",
    80025336:	08200593          	li	a1,130
    8002533a:	00014617          	auipc	a2,0x14
    8002533e:	58e60613          	addi	a2,a2,1422 # 800398c8 <__func__.0+0x9bd8>
    80025342:	0000b517          	auipc	a0,0xb
    80025346:	cae50513          	addi	a0,a0,-850 # 8002fff0 <__func__.0+0x300>
    8002534a:	543070ef          	jal	8002d08c <printf>
    8002534e:	00033797          	auipc	a5,0x33
    80025352:	cc37c783          	lbu	a5,-829(a5) # 80058011 <excpt+0x1>
    80025356:	0000b597          	auipc	a1,0xb
    8002535a:	c7258593          	addi	a1,a1,-910 # 8002ffc8 <__func__.0+0x2d8>
    8002535e:	e789                	bnez	a5,80025368 <stateen_AIA_test_6+0x370>
    80025360:	0000b597          	auipc	a1,0xb
    80025364:	c5858593          	addi	a1,a1,-936 # 8002ffb8 <__func__.0+0x2c8>
    80025368:	0000b517          	auipc	a0,0xb
    8002536c:	ca050513          	addi	a0,a0,-864 # 80030008 <__func__.0+0x318>
    80025370:	51d070ef          	jal	8002d08c <printf>
    80025374:	00033797          	auipc	a5,0x33
    80025378:	c9d7c783          	lbu	a5,-867(a5) # 80058011 <excpt+0x1>
    8002537c:	26079263          	bnez	a5,800255e0 <stateen_AIA_test_6+0x5e8>
    80025380:	4529                	li	a0,10
    80025382:	1f9060ef          	jal	8002bd7a <putchar>
    80025386:	c419                	beqz	s0,80025394 <stateen_AIA_test_6+0x39c>
    80025388:	00033417          	auipc	s0,0x33
    8002538c:	c8944403          	lbu	s0,-887(s0) # 80058011 <excpt+0x1>
    80025390:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80025394:	4505                	li	a0,1
    80025396:	b73db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002539a:	a73db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002539e:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800253a2:	caddb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    800253a6:	08200593          	li	a1,130
    800253aa:	00014617          	auipc	a2,0x14
    800253ae:	56e60613          	addi	a2,a2,1390 # 80039918 <__func__.0+0x9c28>
    800253b2:	0000b517          	auipc	a0,0xb
    800253b6:	c3e50513          	addi	a0,a0,-962 # 8002fff0 <__func__.0+0x300>
    800253ba:	4d3070ef          	jal	8002d08c <printf>
    800253be:	00033797          	auipc	a5,0x33
    800253c2:	c537c783          	lbu	a5,-941(a5) # 80058011 <excpt+0x1>
    800253c6:	0000b597          	auipc	a1,0xb
    800253ca:	c0258593          	addi	a1,a1,-1022 # 8002ffc8 <__func__.0+0x2d8>
    800253ce:	e789                	bnez	a5,800253d8 <stateen_AIA_test_6+0x3e0>
    800253d0:	0000b597          	auipc	a1,0xb
    800253d4:	be858593          	addi	a1,a1,-1048 # 8002ffb8 <__func__.0+0x2c8>
    800253d8:	0000b517          	auipc	a0,0xb
    800253dc:	c3050513          	addi	a0,a0,-976 # 80030008 <__func__.0+0x318>
    800253e0:	4ad070ef          	jal	8002d08c <printf>
    800253e4:	00033797          	auipc	a5,0x33
    800253e8:	c2d7c783          	lbu	a5,-979(a5) # 80058011 <excpt+0x1>
    800253ec:	1c079f63          	bnez	a5,800255ca <stateen_AIA_test_6+0x5d2>
    800253f0:	4529                	li	a0,10
    800253f2:	189060ef          	jal	8002bd7a <putchar>
    800253f6:	c419                	beqz	s0,80025404 <stateen_AIA_test_6+0x40c>
    800253f8:	00033417          	auipc	s0,0x33
    800253fc:	c1944403          	lbu	s0,-999(s0) # 80058011 <excpt+0x1>
    80025400:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025404:	4505                	li	a0,1
    80025406:	b03db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002540a:	a03db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    8002540e:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80025412:	c3ddb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025416:	08200593          	li	a1,130
    8002541a:	00014617          	auipc	a2,0x14
    8002541e:	54e60613          	addi	a2,a2,1358 # 80039968 <__func__.0+0x9c78>
    80025422:	0000b517          	auipc	a0,0xb
    80025426:	bce50513          	addi	a0,a0,-1074 # 8002fff0 <__func__.0+0x300>
    8002542a:	463070ef          	jal	8002d08c <printf>
    8002542e:	00033797          	auipc	a5,0x33
    80025432:	be37c783          	lbu	a5,-1053(a5) # 80058011 <excpt+0x1>
    80025436:	0000b597          	auipc	a1,0xb
    8002543a:	b9258593          	addi	a1,a1,-1134 # 8002ffc8 <__func__.0+0x2d8>
    8002543e:	e789                	bnez	a5,80025448 <stateen_AIA_test_6+0x450>
    80025440:	0000b597          	auipc	a1,0xb
    80025444:	b7858593          	addi	a1,a1,-1160 # 8002ffb8 <__func__.0+0x2c8>
    80025448:	0000b517          	auipc	a0,0xb
    8002544c:	bc050513          	addi	a0,a0,-1088 # 80030008 <__func__.0+0x318>
    80025450:	43d070ef          	jal	8002d08c <printf>
    80025454:	00033797          	auipc	a5,0x33
    80025458:	bbd7c783          	lbu	a5,-1091(a5) # 80058011 <excpt+0x1>
    8002545c:	14079c63          	bnez	a5,800255b4 <stateen_AIA_test_6+0x5bc>
    80025460:	4529                	li	a0,10
    80025462:	119060ef          	jal	8002bd7a <putchar>
    80025466:	c419                	beqz	s0,80025474 <stateen_AIA_test_6+0x47c>
    80025468:	00033417          	auipc	s0,0x33
    8002546c:	ba944403          	lbu	s0,-1111(s0) # 80058011 <excpt+0x1>
    80025470:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80025474:	4511                	li	a0,4
    80025476:	a93db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002547a:	993db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002547e:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80025482:	bcddb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025486:	08200593          	li	a1,130
    8002548a:	00014617          	auipc	a2,0x14
    8002548e:	52e60613          	addi	a2,a2,1326 # 800399b8 <__func__.0+0x9cc8>
    80025492:	0000b517          	auipc	a0,0xb
    80025496:	b5e50513          	addi	a0,a0,-1186 # 8002fff0 <__func__.0+0x300>
    8002549a:	3f3070ef          	jal	8002d08c <printf>
    8002549e:	00033797          	auipc	a5,0x33
    800254a2:	b737c783          	lbu	a5,-1165(a5) # 80058011 <excpt+0x1>
    800254a6:	0000b597          	auipc	a1,0xb
    800254aa:	b2258593          	addi	a1,a1,-1246 # 8002ffc8 <__func__.0+0x2d8>
    800254ae:	e789                	bnez	a5,800254b8 <stateen_AIA_test_6+0x4c0>
    800254b0:	0000b597          	auipc	a1,0xb
    800254b4:	b0858593          	addi	a1,a1,-1272 # 8002ffb8 <__func__.0+0x2c8>
    800254b8:	0000b517          	auipc	a0,0xb
    800254bc:	b5050513          	addi	a0,a0,-1200 # 80030008 <__func__.0+0x318>
    800254c0:	3cd070ef          	jal	8002d08c <printf>
    800254c4:	00033797          	auipc	a5,0x33
    800254c8:	b4d7c783          	lbu	a5,-1203(a5) # 80058011 <excpt+0x1>
    800254cc:	0c079963          	bnez	a5,8002559e <stateen_AIA_test_6+0x5a6>
    800254d0:	4529                	li	a0,10
    800254d2:	0a9060ef          	jal	8002bd7a <putchar>
    800254d6:	c419                	beqz	s0,800254e4 <stateen_AIA_test_6+0x4ec>
    800254d8:	00033417          	auipc	s0,0x33
    800254dc:	b3944403          	lbu	s0,-1223(s0) # 80058011 <excpt+0x1>
    800254e0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800254e4:	4511                	li	a0,4
    800254e6:	a23db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800254ea:	923db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800254ee:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800254f2:	b5ddb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    800254f6:	08200593          	li	a1,130
    800254fa:	00014617          	auipc	a2,0x14
    800254fe:	50e60613          	addi	a2,a2,1294 # 80039a08 <__func__.0+0x9d18>
    80025502:	0000b517          	auipc	a0,0xb
    80025506:	aee50513          	addi	a0,a0,-1298 # 8002fff0 <__func__.0+0x300>
    8002550a:	383070ef          	jal	8002d08c <printf>
    8002550e:	00033797          	auipc	a5,0x33
    80025512:	b037c783          	lbu	a5,-1277(a5) # 80058011 <excpt+0x1>
    80025516:	0000b597          	auipc	a1,0xb
    8002551a:	ab258593          	addi	a1,a1,-1358 # 8002ffc8 <__func__.0+0x2d8>
    8002551e:	e789                	bnez	a5,80025528 <stateen_AIA_test_6+0x530>
    80025520:	0000b597          	auipc	a1,0xb
    80025524:	a9858593          	addi	a1,a1,-1384 # 8002ffb8 <__func__.0+0x2c8>
    80025528:	0000b517          	auipc	a0,0xb
    8002552c:	ae050513          	addi	a0,a0,-1312 # 80030008 <__func__.0+0x318>
    80025530:	35d070ef          	jal	8002d08c <printf>
    80025534:	00033797          	auipc	a5,0x33
    80025538:	add7c783          	lbu	a5,-1315(a5) # 80058011 <excpt+0x1>
    8002553c:	e7b1                	bnez	a5,80025588 <stateen_AIA_test_6+0x590>
    8002553e:	4529                	li	a0,10
    80025540:	03b060ef          	jal	8002bd7a <putchar>
    80025544:	c411                	beqz	s0,80025550 <stateen_AIA_test_6+0x558>
    80025546:	00033797          	auipc	a5,0x33
    8002554a:	acb7c783          	lbu	a5,-1333(a5) # 80058011 <excpt+0x1>
    8002554e:	c79d                	beqz	a5,8002557c <stateen_AIA_test_6+0x584>
    80025550:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80025552:	0000b597          	auipc	a1,0xb
    80025556:	a7658593          	addi	a1,a1,-1418 # 8002ffc8 <__func__.0+0x2d8>
    8002555a:	0000b517          	auipc	a0,0xb
    8002555e:	b1650513          	addi	a0,a0,-1258 # 80030070 <__func__.0+0x380>
    80025562:	32b070ef          	jal	8002d08c <printf>
    80025566:	4511                	li	a0,4
    80025568:	9a1db0ef          	jal	80000f08 <goto_priv>
    8002556c:	b66dc0ef          	jal	800018d2 <reset_state>

}
    80025570:	60e2                	ld	ra,24(sp)
    80025572:	8522                	mv	a0,s0
    80025574:	6442                	ld	s0,16(sp)
    80025576:	64a2                	ld	s1,8(sp)
    80025578:	6105                	addi	sp,sp,32
    8002557a:	8082                	ret
    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    8002557c:	4405                	li	s0,1
    TEST_END();
    8002557e:	0000b597          	auipc	a1,0xb
    80025582:	a3a58593          	addi	a1,a1,-1478 # 8002ffb8 <__func__.0+0x2c8>
    80025586:	bfd1                	j	8002555a <stateen_AIA_test_6+0x562>
    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025588:	0000b517          	auipc	a0,0xb
    8002558c:	a8850513          	addi	a0,a0,-1400 # 80030010 <__func__.0+0x320>
    80025590:	2fd070ef          	jal	8002d08c <printf>
    80025594:	02900513          	li	a0,41
    80025598:	7e2060ef          	jal	8002bd7a <putchar>
    8002559c:	b74d                	j	8002553e <stateen_AIA_test_6+0x546>
    TEST_ASSERT("m mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    8002559e:	0000b517          	auipc	a0,0xb
    800255a2:	a7250513          	addi	a0,a0,-1422 # 80030010 <__func__.0+0x320>
    800255a6:	2e7070ef          	jal	8002d08c <printf>
    800255aa:	02900513          	li	a0,41
    800255ae:	7cc060ef          	jal	8002bd7a <putchar>
    800255b2:	bf39                	j	800254d0 <stateen_AIA_test_6+0x4d8>
    TEST_ASSERT("hu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    800255b4:	0000b517          	auipc	a0,0xb
    800255b8:	a5c50513          	addi	a0,a0,-1444 # 80030010 <__func__.0+0x320>
    800255bc:	2d1070ef          	jal	8002d08c <printf>
    800255c0:	02900513          	li	a0,41
    800255c4:	7b6060ef          	jal	8002bd7a <putchar>
    800255c8:	bd61                	j	80025460 <stateen_AIA_test_6+0x468>
    TEST_ASSERT("hu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    800255ca:	0000b517          	auipc	a0,0xb
    800255ce:	a4650513          	addi	a0,a0,-1466 # 80030010 <__func__.0+0x320>
    800255d2:	2bb070ef          	jal	8002d08c <printf>
    800255d6:	02900513          	li	a0,41
    800255da:	7a0060ef          	jal	8002bd7a <putchar>
    800255de:	bd09                	j	800253f0 <stateen_AIA_test_6+0x3f8>
    TEST_ASSERT("hs mode accesss vstopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800255e0:	0000b517          	auipc	a0,0xb
    800255e4:	a3050513          	addi	a0,a0,-1488 # 80030010 <__func__.0+0x320>
    800255e8:	2a5070ef          	jal	8002d08c <printf>
    800255ec:	02900513          	li	a0,41
    800255f0:	78a060ef          	jal	8002bd7a <putchar>
    800255f4:	b371                	j	80025380 <stateen_AIA_test_6+0x388>
    TEST_ASSERT("hs mode accesss stopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800255f6:	0000b517          	auipc	a0,0xb
    800255fa:	a1a50513          	addi	a0,a0,-1510 # 80030010 <__func__.0+0x320>
    800255fe:	28f070ef          	jal	8002d08c <printf>
    80025602:	02900513          	li	a0,41
    80025606:	774060ef          	jal	8002bd7a <putchar>
    8002560a:	bb01                	j	8002531a <stateen_AIA_test_6+0x322>
    TEST_ASSERT("m mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    8002560c:	0000b517          	auipc	a0,0xb
    80025610:	a0450513          	addi	a0,a0,-1532 # 80030010 <__func__.0+0x320>
    80025614:	279070ef          	jal	8002d08c <printf>
    80025618:	02900513          	li	a0,41
    8002561c:	75e060ef          	jal	8002bd7a <putchar>
    80025620:	b169                	j	800252aa <stateen_AIA_test_6+0x2b2>
    TEST_ASSERT("m mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    80025622:	0000b517          	auipc	a0,0xb
    80025626:	9ee50513          	addi	a0,a0,-1554 # 80030010 <__func__.0+0x320>
    8002562a:	263070ef          	jal	8002d08c <printf>
    8002562e:	02900513          	li	a0,41
    80025632:	748060ef          	jal	8002bd7a <putchar>
    80025636:	b111                	j	8002523a <stateen_AIA_test_6+0x242>
    TEST_ASSERT("hu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    80025638:	0000b517          	auipc	a0,0xb
    8002563c:	9d850513          	addi	a0,a0,-1576 # 80030010 <__func__.0+0x320>
    80025640:	24d070ef          	jal	8002d08c <printf>
    80025644:	02900513          	li	a0,41
    80025648:	732060ef          	jal	8002bd7a <putchar>
    8002564c:	bebd                	j	800251ca <stateen_AIA_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    8002564e:	0000b517          	auipc	a0,0xb
    80025652:	9c250513          	addi	a0,a0,-1598 # 80030010 <__func__.0+0x320>
    80025656:	237070ef          	jal	8002d08c <printf>
    8002565a:	02900513          	li	a0,41
    8002565e:	71c060ef          	jal	8002bd7a <putchar>
    80025662:	bce5                	j	8002515a <stateen_AIA_test_6+0x162>
    TEST_ASSERT("hs mode accesss hvictl register successful when  mstateen.aia=1 hstateen.aia=0",
    80025664:	0000b517          	auipc	a0,0xb
    80025668:	9ac50513          	addi	a0,a0,-1620 # 80030010 <__func__.0+0x320>
    8002566c:	221070ef          	jal	8002d08c <printf>
    80025670:	02900513          	li	a0,41
    80025674:	706060ef          	jal	8002bd7a <putchar>
    80025678:	bc85                	j	800250e8 <stateen_AIA_test_6+0xf0>
    TEST_ASSERT("hs mode accesss hvien register successful when  mstateen.aia=1 hstateen.aia=0",
    8002567a:	0000b517          	auipc	a0,0xb
    8002567e:	99650513          	addi	a0,a0,-1642 # 80030010 <__func__.0+0x320>
    80025682:	20b070ef          	jal	8002d08c <printf>
    80025686:	02900513          	li	a0,41
    8002568a:	6f0060ef          	jal	8002bd7a <putchar>
    8002568e:	baed                	j	80025088 <stateen_AIA_test_6+0x90>

0000000080025690 <stateen_AIA_test_7>:


bool stateen_AIA_test_7(){
    80025690:	1101                	addi	sp,sp,-32

    TEST_START();
    80025692:	0000a597          	auipc	a1,0xa
    80025696:	1ce58593          	addi	a1,a1,462 # 8002f860 <__func__.16>
    8002569a:	0000b517          	auipc	a0,0xb
    8002569e:	93e50513          	addi	a0,a0,-1730 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_AIA_test_7(){
    800256a2:	ec06                	sd	ra,24(sp)
    800256a4:	e822                	sd	s0,16(sp)
    800256a6:	e426                	sd	s1,8(sp)
    TEST_START();
    800256a8:	1e5070ef          	jal	8002d08c <printf>
    800256ac:	4529                	li	a0,10
    800256ae:	6cc060ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    800256b2:	4511                	li	a0,4
    800256b4:	855db0ef          	jal	80000f08 <goto_priv>
    //当mstateen.AIA=1 hstateen.AIA=1,v=1 时可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    800256b8:	4785                	li	a5,1
    800256ba:	17ee                	slli	a5,a5,0x3b
    800256bc:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_AIA);
    800256c0:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    800256c4:	4509                	li	a0,2
    800256c6:	843db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800256ca:	f42db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800256ce:	608027f3          	csrr	a5,hvien

    excpt_info();
    800256d2:	97ddb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800256d6:	08200593          	li	a1,130
    800256da:	00014617          	auipc	a2,0x14
    800256de:	37e60613          	addi	a2,a2,894 # 80039a58 <__func__.0+0x9d68>
    800256e2:	0000b517          	auipc	a0,0xb
    800256e6:	90e50513          	addi	a0,a0,-1778 # 8002fff0 <__func__.0+0x300>
    800256ea:	1a3070ef          	jal	8002d08c <printf>
    800256ee:	00033797          	auipc	a5,0x33
    800256f2:	9237c783          	lbu	a5,-1757(a5) # 80058011 <excpt+0x1>
    800256f6:	0000b597          	auipc	a1,0xb
    800256fa:	8c258593          	addi	a1,a1,-1854 # 8002ffb8 <__func__.0+0x2c8>
    800256fe:	c789                	beqz	a5,80025708 <stateen_AIA_test_7+0x78>
    80025700:	0000b597          	auipc	a1,0xb
    80025704:	8c858593          	addi	a1,a1,-1848 # 8002ffc8 <__func__.0+0x2d8>
    80025708:	0000b517          	auipc	a0,0xb
    8002570c:	90050513          	addi	a0,a0,-1792 # 80030008 <__func__.0+0x318>
    80025710:	17d070ef          	jal	8002d08c <printf>
    80025714:	00033797          	auipc	a5,0x33
    80025718:	8fd7c783          	lbu	a5,-1795(a5) # 80058011 <excpt+0x1>
    8002571c:	3e079963          	bnez	a5,80025b0e <stateen_AIA_test_7+0x47e>
    80025720:	4529                	li	a0,10
    80025722:	658060ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80025726:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    80025728:	00033497          	auipc	s1,0x33
    8002572c:	8e94c483          	lbu	s1,-1815(s1) # 80058011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80025730:	fd8db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025734:	ed8db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025738:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002573c:	913db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    80025740:	08200593          	li	a1,130
    80025744:	00014617          	auipc	a2,0x14
    80025748:	36460613          	addi	a2,a2,868 # 80039aa8 <__func__.0+0x9db8>
    8002574c:	0000b517          	auipc	a0,0xb
    80025750:	8a450513          	addi	a0,a0,-1884 # 8002fff0 <__func__.0+0x300>
    80025754:	139070ef          	jal	8002d08c <printf>
    80025758:	00033797          	auipc	a5,0x33
    8002575c:	8b97c783          	lbu	a5,-1863(a5) # 80058011 <excpt+0x1>
    80025760:	0000b597          	auipc	a1,0xb
    80025764:	86858593          	addi	a1,a1,-1944 # 8002ffc8 <__func__.0+0x2d8>
    80025768:	e789                	bnez	a5,80025772 <stateen_AIA_test_7+0xe2>
    8002576a:	0000b597          	auipc	a1,0xb
    8002576e:	84e58593          	addi	a1,a1,-1970 # 8002ffb8 <__func__.0+0x2c8>
    80025772:	0000b517          	auipc	a0,0xb
    80025776:	89650513          	addi	a0,a0,-1898 # 80030008 <__func__.0+0x318>
    8002577a:	113070ef          	jal	8002d08c <printf>
    8002577e:	00033797          	auipc	a5,0x33
    80025782:	8937c783          	lbu	a5,-1901(a5) # 80058011 <excpt+0x1>
    80025786:	36079963          	bnez	a5,80025af8 <stateen_AIA_test_7+0x468>
    8002578a:	4529                	li	a0,10
    8002578c:	5ee060ef          	jal	8002bd7a <putchar>
    80025790:	4401                	li	s0,0
    80025792:	e499                	bnez	s1,800257a0 <stateen_AIA_test_7+0x110>
    80025794:	00033417          	auipc	s0,0x33
    80025798:	87d44403          	lbu	s0,-1923(s0) # 80058011 <excpt+0x1>
    8002579c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    800257a0:	4501                	li	a0,0
    800257a2:	f66db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800257a6:	e66db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800257aa:	608027f3          	csrr	a5,hvien

    excpt_info();
    800257ae:	8a1db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800257b2:	08200593          	li	a1,130
    800257b6:	00014617          	auipc	a2,0x14
    800257ba:	34260613          	addi	a2,a2,834 # 80039af8 <__func__.0+0x9e08>
    800257be:	0000b517          	auipc	a0,0xb
    800257c2:	83250513          	addi	a0,a0,-1998 # 8002fff0 <__func__.0+0x300>
    800257c6:	0c7070ef          	jal	8002d08c <printf>
    800257ca:	00033797          	auipc	a5,0x33
    800257ce:	8477c783          	lbu	a5,-1977(a5) # 80058011 <excpt+0x1>
    800257d2:	0000a597          	auipc	a1,0xa
    800257d6:	7f658593          	addi	a1,a1,2038 # 8002ffc8 <__func__.0+0x2d8>
    800257da:	e789                	bnez	a5,800257e4 <stateen_AIA_test_7+0x154>
    800257dc:	0000a597          	auipc	a1,0xa
    800257e0:	7dc58593          	addi	a1,a1,2012 # 8002ffb8 <__func__.0+0x2c8>
    800257e4:	0000b517          	auipc	a0,0xb
    800257e8:	82450513          	addi	a0,a0,-2012 # 80030008 <__func__.0+0x318>
    800257ec:	0a1070ef          	jal	8002d08c <printf>
    800257f0:	00033797          	auipc	a5,0x33
    800257f4:	8217c783          	lbu	a5,-2015(a5) # 80058011 <excpt+0x1>
    800257f8:	2e079563          	bnez	a5,80025ae2 <stateen_AIA_test_7+0x452>
    800257fc:	4529                	li	a0,10
    800257fe:	57c060ef          	jal	8002bd7a <putchar>
    80025802:	c419                	beqz	s0,80025810 <stateen_AIA_test_7+0x180>
    80025804:	00033417          	auipc	s0,0x33
    80025808:	80d44403          	lbu	s0,-2035(s0) # 80058011 <excpt+0x1>
    8002580c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80025810:	4501                	li	a0,0
    80025812:	ef6db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025816:	df6db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HVICTL);
    8002581a:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002581e:	831db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    80025822:	08200593          	li	a1,130
    80025826:	00014617          	auipc	a2,0x14
    8002582a:	32260613          	addi	a2,a2,802 # 80039b48 <__func__.0+0x9e58>
    8002582e:	0000a517          	auipc	a0,0xa
    80025832:	7c250513          	addi	a0,a0,1986 # 8002fff0 <__func__.0+0x300>
    80025836:	057070ef          	jal	8002d08c <printf>
    8002583a:	00032797          	auipc	a5,0x32
    8002583e:	7d77c783          	lbu	a5,2007(a5) # 80058011 <excpt+0x1>
    80025842:	0000a597          	auipc	a1,0xa
    80025846:	78658593          	addi	a1,a1,1926 # 8002ffc8 <__func__.0+0x2d8>
    8002584a:	e789                	bnez	a5,80025854 <stateen_AIA_test_7+0x1c4>
    8002584c:	0000a597          	auipc	a1,0xa
    80025850:	76c58593          	addi	a1,a1,1900 # 8002ffb8 <__func__.0+0x2c8>
    80025854:	0000a517          	auipc	a0,0xa
    80025858:	7b450513          	addi	a0,a0,1972 # 80030008 <__func__.0+0x318>
    8002585c:	031070ef          	jal	8002d08c <printf>
    80025860:	00032797          	auipc	a5,0x32
    80025864:	7b17c783          	lbu	a5,1969(a5) # 80058011 <excpt+0x1>
    80025868:	26079263          	bnez	a5,80025acc <stateen_AIA_test_7+0x43c>
    8002586c:	4529                	li	a0,10
    8002586e:	50c060ef          	jal	8002bd7a <putchar>
    80025872:	c419                	beqz	s0,80025880 <stateen_AIA_test_7+0x1f0>
    80025874:	00032417          	auipc	s0,0x32
    80025878:	79d44403          	lbu	s0,1949(s0) # 80058011 <excpt+0x1>
    8002587c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80025880:	4509                	li	a0,2
    80025882:	e86db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025886:	d86db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002588a:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002588e:	fc0db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025892:	08200593          	li	a1,130
    80025896:	00014617          	auipc	a2,0x14
    8002589a:	30260613          	addi	a2,a2,770 # 80039b98 <__func__.0+0x9ea8>
    8002589e:	0000a517          	auipc	a0,0xa
    800258a2:	75250513          	addi	a0,a0,1874 # 8002fff0 <__func__.0+0x300>
    800258a6:	7e6070ef          	jal	8002d08c <printf>
    800258aa:	00032797          	auipc	a5,0x32
    800258ae:	7677c783          	lbu	a5,1895(a5) # 80058011 <excpt+0x1>
    800258b2:	0000a597          	auipc	a1,0xa
    800258b6:	71658593          	addi	a1,a1,1814 # 8002ffc8 <__func__.0+0x2d8>
    800258ba:	e789                	bnez	a5,800258c4 <stateen_AIA_test_7+0x234>
    800258bc:	0000a597          	auipc	a1,0xa
    800258c0:	6fc58593          	addi	a1,a1,1788 # 8002ffb8 <__func__.0+0x2c8>
    800258c4:	0000a517          	auipc	a0,0xa
    800258c8:	74450513          	addi	a0,a0,1860 # 80030008 <__func__.0+0x318>
    800258cc:	7c0070ef          	jal	8002d08c <printf>
    800258d0:	00032797          	auipc	a5,0x32
    800258d4:	7417c783          	lbu	a5,1857(a5) # 80058011 <excpt+0x1>
    800258d8:	1c079f63          	bnez	a5,80025ab6 <stateen_AIA_test_7+0x426>
    800258dc:	4529                	li	a0,10
    800258de:	49c060ef          	jal	8002bd7a <putchar>
    800258e2:	c419                	beqz	s0,800258f0 <stateen_AIA_test_7+0x260>
    800258e4:	00032417          	auipc	s0,0x32
    800258e8:	72d44403          	lbu	s0,1837(s0) # 80058011 <excpt+0x1>
    800258ec:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    800258f0:	4509                	li	a0,2
    800258f2:	e16db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800258f6:	d16db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800258fa:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800258fe:	f50db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025902:	08200593          	li	a1,130
    80025906:	00014617          	auipc	a2,0x14
    8002590a:	2e260613          	addi	a2,a2,738 # 80039be8 <__func__.0+0x9ef8>
    8002590e:	0000a517          	auipc	a0,0xa
    80025912:	6e250513          	addi	a0,a0,1762 # 8002fff0 <__func__.0+0x300>
    80025916:	776070ef          	jal	8002d08c <printf>
    8002591a:	00032797          	auipc	a5,0x32
    8002591e:	6f77c783          	lbu	a5,1783(a5) # 80058011 <excpt+0x1>
    80025922:	0000a597          	auipc	a1,0xa
    80025926:	6a658593          	addi	a1,a1,1702 # 8002ffc8 <__func__.0+0x2d8>
    8002592a:	e789                	bnez	a5,80025934 <stateen_AIA_test_7+0x2a4>
    8002592c:	0000a597          	auipc	a1,0xa
    80025930:	68c58593          	addi	a1,a1,1676 # 8002ffb8 <__func__.0+0x2c8>
    80025934:	0000a517          	auipc	a0,0xa
    80025938:	6d450513          	addi	a0,a0,1748 # 80030008 <__func__.0+0x318>
    8002593c:	750070ef          	jal	8002d08c <printf>
    80025940:	00032797          	auipc	a5,0x32
    80025944:	6d17c783          	lbu	a5,1745(a5) # 80058011 <excpt+0x1>
    80025948:	14079c63          	bnez	a5,80025aa0 <stateen_AIA_test_7+0x410>
    8002594c:	4529                	li	a0,10
    8002594e:	42c060ef          	jal	8002bd7a <putchar>
    80025952:	c419                	beqz	s0,80025960 <stateen_AIA_test_7+0x2d0>
    80025954:	00032417          	auipc	s0,0x32
    80025958:	6bd44403          	lbu	s0,1725(s0) # 80058011 <excpt+0x1>
    8002595c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80025960:	4501                	li	a0,0
    80025962:	da6db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025966:	ca6db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002596a:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002596e:	ee0db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025972:	08200593          	li	a1,130
    80025976:	00014617          	auipc	a2,0x14
    8002597a:	2c260613          	addi	a2,a2,706 # 80039c38 <__func__.0+0x9f48>
    8002597e:	0000a517          	auipc	a0,0xa
    80025982:	67250513          	addi	a0,a0,1650 # 8002fff0 <__func__.0+0x300>
    80025986:	706070ef          	jal	8002d08c <printf>
    8002598a:	00032797          	auipc	a5,0x32
    8002598e:	6877c783          	lbu	a5,1671(a5) # 80058011 <excpt+0x1>
    80025992:	0000a597          	auipc	a1,0xa
    80025996:	63658593          	addi	a1,a1,1590 # 8002ffc8 <__func__.0+0x2d8>
    8002599a:	e789                	bnez	a5,800259a4 <stateen_AIA_test_7+0x314>
    8002599c:	0000a597          	auipc	a1,0xa
    800259a0:	61c58593          	addi	a1,a1,1564 # 8002ffb8 <__func__.0+0x2c8>
    800259a4:	0000a517          	auipc	a0,0xa
    800259a8:	66450513          	addi	a0,a0,1636 # 80030008 <__func__.0+0x318>
    800259ac:	6e0070ef          	jal	8002d08c <printf>
    800259b0:	00032797          	auipc	a5,0x32
    800259b4:	6617c783          	lbu	a5,1633(a5) # 80058011 <excpt+0x1>
    800259b8:	0c079963          	bnez	a5,80025a8a <stateen_AIA_test_7+0x3fa>
    800259bc:	4529                	li	a0,10
    800259be:	3bc060ef          	jal	8002bd7a <putchar>
    800259c2:	c419                	beqz	s0,800259d0 <stateen_AIA_test_7+0x340>
    800259c4:	00032417          	auipc	s0,0x32
    800259c8:	64d44403          	lbu	s0,1613(s0) # 80058011 <excpt+0x1>
    800259cc:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    800259d0:	4501                	li	a0,0
    800259d2:	d36db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800259d6:	c36db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800259da:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800259de:	e70db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    800259e2:	08200593          	li	a1,130
    800259e6:	00014617          	auipc	a2,0x14
    800259ea:	2a260613          	addi	a2,a2,674 # 80039c88 <__func__.0+0x9f98>
    800259ee:	0000a517          	auipc	a0,0xa
    800259f2:	60250513          	addi	a0,a0,1538 # 8002fff0 <__func__.0+0x300>
    800259f6:	696070ef          	jal	8002d08c <printf>
    800259fa:	00032797          	auipc	a5,0x32
    800259fe:	6177c783          	lbu	a5,1559(a5) # 80058011 <excpt+0x1>
    80025a02:	0000a597          	auipc	a1,0xa
    80025a06:	5c658593          	addi	a1,a1,1478 # 8002ffc8 <__func__.0+0x2d8>
    80025a0a:	e789                	bnez	a5,80025a14 <stateen_AIA_test_7+0x384>
    80025a0c:	0000a597          	auipc	a1,0xa
    80025a10:	5ac58593          	addi	a1,a1,1452 # 8002ffb8 <__func__.0+0x2c8>
    80025a14:	0000a517          	auipc	a0,0xa
    80025a18:	5f450513          	addi	a0,a0,1524 # 80030008 <__func__.0+0x318>
    80025a1c:	670070ef          	jal	8002d08c <printf>
    80025a20:	00032797          	auipc	a5,0x32
    80025a24:	5f17c783          	lbu	a5,1521(a5) # 80058011 <excpt+0x1>
    80025a28:	e7b1                	bnez	a5,80025a74 <stateen_AIA_test_7+0x3e4>
    80025a2a:	4529                	li	a0,10
    80025a2c:	34e060ef          	jal	8002bd7a <putchar>
    80025a30:	c411                	beqz	s0,80025a3c <stateen_AIA_test_7+0x3ac>
    80025a32:	00032797          	auipc	a5,0x32
    80025a36:	5df7c783          	lbu	a5,1503(a5) # 80058011 <excpt+0x1>
    80025a3a:	c79d                	beqz	a5,80025a68 <stateen_AIA_test_7+0x3d8>
    80025a3c:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80025a3e:	0000a597          	auipc	a1,0xa
    80025a42:	58a58593          	addi	a1,a1,1418 # 8002ffc8 <__func__.0+0x2d8>
    80025a46:	0000a517          	auipc	a0,0xa
    80025a4a:	62a50513          	addi	a0,a0,1578 # 80030070 <__func__.0+0x380>
    80025a4e:	63e070ef          	jal	8002d08c <printf>
    80025a52:	4511                	li	a0,4
    80025a54:	cb4db0ef          	jal	80000f08 <goto_priv>
    80025a58:	e7bdb0ef          	jal	800018d2 <reset_state>
}
    80025a5c:	60e2                	ld	ra,24(sp)
    80025a5e:	8522                	mv	a0,s0
    80025a60:	6442                	ld	s0,16(sp)
    80025a62:	64a2                	ld	s1,8(sp)
    80025a64:	6105                	addi	sp,sp,32
    80025a66:	8082                	ret
    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025a68:	4405                	li	s0,1
    TEST_END();
    80025a6a:	0000a597          	auipc	a1,0xa
    80025a6e:	54e58593          	addi	a1,a1,1358 # 8002ffb8 <__func__.0+0x2c8>
    80025a72:	bfd1                	j	80025a46 <stateen_AIA_test_7+0x3b6>
    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025a74:	0000a517          	auipc	a0,0xa
    80025a78:	59c50513          	addi	a0,a0,1436 # 80030010 <__func__.0+0x320>
    80025a7c:	610070ef          	jal	8002d08c <printf>
    80025a80:	02900513          	li	a0,41
    80025a84:	2f6060ef          	jal	8002bd7a <putchar>
    80025a88:	b74d                	j	80025a2a <stateen_AIA_test_7+0x39a>
    TEST_ASSERT("vu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025a8a:	0000a517          	auipc	a0,0xa
    80025a8e:	58650513          	addi	a0,a0,1414 # 80030010 <__func__.0+0x320>
    80025a92:	5fa070ef          	jal	8002d08c <printf>
    80025a96:	02900513          	li	a0,41
    80025a9a:	2e0060ef          	jal	8002bd7a <putchar>
    80025a9e:	bf39                	j	800259bc <stateen_AIA_test_7+0x32c>
    TEST_ASSERT("vs mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025aa0:	0000a517          	auipc	a0,0xa
    80025aa4:	57050513          	addi	a0,a0,1392 # 80030010 <__func__.0+0x320>
    80025aa8:	5e4070ef          	jal	8002d08c <printf>
    80025aac:	02900513          	li	a0,41
    80025ab0:	2ca060ef          	jal	8002bd7a <putchar>
    80025ab4:	bd61                	j	8002594c <stateen_AIA_test_7+0x2bc>
    TEST_ASSERT("vs mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025ab6:	0000a517          	auipc	a0,0xa
    80025aba:	55a50513          	addi	a0,a0,1370 # 80030010 <__func__.0+0x320>
    80025abe:	5ce070ef          	jal	8002d08c <printf>
    80025ac2:	02900513          	li	a0,41
    80025ac6:	2b4060ef          	jal	8002bd7a <putchar>
    80025aca:	bd09                	j	800258dc <stateen_AIA_test_7+0x24c>
    TEST_ASSERT("vu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    80025acc:	0000a517          	auipc	a0,0xa
    80025ad0:	54450513          	addi	a0,a0,1348 # 80030010 <__func__.0+0x320>
    80025ad4:	5b8070ef          	jal	8002d08c <printf>
    80025ad8:	02900513          	li	a0,41
    80025adc:	29e060ef          	jal	8002bd7a <putchar>
    80025ae0:	b371                	j	8002586c <stateen_AIA_test_7+0x1dc>
    TEST_ASSERT("vu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    80025ae2:	0000a517          	auipc	a0,0xa
    80025ae6:	52e50513          	addi	a0,a0,1326 # 80030010 <__func__.0+0x320>
    80025aea:	5a2070ef          	jal	8002d08c <printf>
    80025aee:	02900513          	li	a0,41
    80025af2:	288060ef          	jal	8002bd7a <putchar>
    80025af6:	b319                	j	800257fc <stateen_AIA_test_7+0x16c>
    TEST_ASSERT("vs mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    80025af8:	0000a517          	auipc	a0,0xa
    80025afc:	51850513          	addi	a0,a0,1304 # 80030010 <__func__.0+0x320>
    80025b00:	58c070ef          	jal	8002d08c <printf>
    80025b04:	02900513          	li	a0,41
    80025b08:	272060ef          	jal	8002bd7a <putchar>
    80025b0c:	b9bd                	j	8002578a <stateen_AIA_test_7+0xfa>
    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    80025b0e:	0000a517          	auipc	a0,0xa
    80025b12:	50250513          	addi	a0,a0,1282 # 80030010 <__func__.0+0x320>
    80025b16:	576070ef          	jal	8002d08c <printf>
    80025b1a:	02900513          	li	a0,41
    80025b1e:	25c060ef          	jal	8002bd7a <putchar>
    80025b22:	befd                	j	80025720 <stateen_AIA_test_7+0x90>

0000000080025b24 <stateen_CSRIND_test>:



//mstateen.csrind 和 hstateen.csrind 在xiangshan中默认为1，且RO
bool stateen_CSRIND_test(){
    80025b24:	1101                	addi	sp,sp,-32

    TEST_START();
    80025b26:	0000a597          	auipc	a1,0xa
    80025b2a:	d5258593          	addi	a1,a1,-686 # 8002f878 <__func__.15>
    80025b2e:	0000a517          	auipc	a0,0xa
    80025b32:	4aa50513          	addi	a0,a0,1194 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_CSRIND_test(){
    80025b36:	ec06                	sd	ra,24(sp)
    80025b38:	e822                	sd	s0,16(sp)
    80025b3a:	e426                	sd	s1,8(sp)
    TEST_START();
    80025b3c:	550070ef          	jal	8002d08c <printf>
    80025b40:	4529                	li	a0,10
    80025b42:	238060ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80025b46:	4511                	li	a0,4
    80025b48:	bc0db0ef          	jal	80000f08 <goto_priv>
    //当mstateen.CSRIND=1 hstateen.CSRIND=1,v=1 时可访问iselect，ireg等寄存器

    goto_priv(PRIV_VS);
    80025b4c:	4509                	li	a0,2
    80025b4e:	bbadb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025b52:	abadb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025b56:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025b5a:	cf4db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025b5e:	08200593          	li	a1,130
    80025b62:	00014617          	auipc	a2,0x14
    80025b66:	17660613          	addi	a2,a2,374 # 80039cd8 <__func__.0+0x9fe8>
    80025b6a:	0000a517          	auipc	a0,0xa
    80025b6e:	48650513          	addi	a0,a0,1158 # 8002fff0 <__func__.0+0x300>
    80025b72:	51a070ef          	jal	8002d08c <printf>
    80025b76:	00032797          	auipc	a5,0x32
    80025b7a:	49b7c783          	lbu	a5,1179(a5) # 80058011 <excpt+0x1>
    80025b7e:	0000a597          	auipc	a1,0xa
    80025b82:	43a58593          	addi	a1,a1,1082 # 8002ffb8 <__func__.0+0x2c8>
    80025b86:	c789                	beqz	a5,80025b90 <stateen_CSRIND_test+0x6c>
    80025b88:	0000a597          	auipc	a1,0xa
    80025b8c:	44058593          	addi	a1,a1,1088 # 8002ffc8 <__func__.0+0x2d8>
    80025b90:	0000a517          	auipc	a0,0xa
    80025b94:	47850513          	addi	a0,a0,1144 # 80030008 <__func__.0+0x318>
    80025b98:	4f4070ef          	jal	8002d08c <printf>
    80025b9c:	00032797          	auipc	a5,0x32
    80025ba0:	4757c783          	lbu	a5,1141(a5) # 80058011 <excpt+0x1>
    80025ba4:	3e079963          	bnez	a5,80025f96 <stateen_CSRIND_test+0x472>
    80025ba8:	4529                	li	a0,10
    80025baa:	1d0060ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80025bae:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025bb0:	00032497          	auipc	s1,0x32
    80025bb4:	4614c483          	lbu	s1,1121(s1) # 80058011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80025bb8:	b50db0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025bbc:	a50db0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025bc0:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025bc4:	c8adb0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025bc8:	08200593          	li	a1,130
    80025bcc:	00014617          	auipc	a2,0x14
    80025bd0:	16460613          	addi	a2,a2,356 # 80039d30 <__func__.0+0xa040>
    80025bd4:	0000a517          	auipc	a0,0xa
    80025bd8:	41c50513          	addi	a0,a0,1052 # 8002fff0 <__func__.0+0x300>
    80025bdc:	4b0070ef          	jal	8002d08c <printf>
    80025be0:	00032797          	auipc	a5,0x32
    80025be4:	4317c783          	lbu	a5,1073(a5) # 80058011 <excpt+0x1>
    80025be8:	0000a597          	auipc	a1,0xa
    80025bec:	3e058593          	addi	a1,a1,992 # 8002ffc8 <__func__.0+0x2d8>
    80025bf0:	e789                	bnez	a5,80025bfa <stateen_CSRIND_test+0xd6>
    80025bf2:	0000a597          	auipc	a1,0xa
    80025bf6:	3c658593          	addi	a1,a1,966 # 8002ffb8 <__func__.0+0x2c8>
    80025bfa:	0000a517          	auipc	a0,0xa
    80025bfe:	40e50513          	addi	a0,a0,1038 # 80030008 <__func__.0+0x318>
    80025c02:	48a070ef          	jal	8002d08c <printf>
    80025c06:	00032797          	auipc	a5,0x32
    80025c0a:	40b7c783          	lbu	a5,1035(a5) # 80058011 <excpt+0x1>
    80025c0e:	36079963          	bnez	a5,80025f80 <stateen_CSRIND_test+0x45c>
    80025c12:	4529                	li	a0,10
    80025c14:	166060ef          	jal	8002bd7a <putchar>
    80025c18:	4401                	li	s0,0
    80025c1a:	e499                	bnez	s1,80025c28 <stateen_CSRIND_test+0x104>
    80025c1c:	00032417          	auipc	s0,0x32
    80025c20:	3f544403          	lbu	s0,1013(s0) # 80058011 <excpt+0x1>
    80025c24:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    80025c28:	450d                	li	a0,3
    80025c2a:	adedb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025c2e:	9dedb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025c32:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025c36:	c18db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025c3a:	08200593          	li	a1,130
    80025c3e:	00014617          	auipc	a2,0x14
    80025c42:	14a60613          	addi	a2,a2,330 # 80039d88 <__func__.0+0xa098>
    80025c46:	0000a517          	auipc	a0,0xa
    80025c4a:	3aa50513          	addi	a0,a0,938 # 8002fff0 <__func__.0+0x300>
    80025c4e:	43e070ef          	jal	8002d08c <printf>
    80025c52:	00032797          	auipc	a5,0x32
    80025c56:	3bf7c783          	lbu	a5,959(a5) # 80058011 <excpt+0x1>
    80025c5a:	0000a597          	auipc	a1,0xa
    80025c5e:	36e58593          	addi	a1,a1,878 # 8002ffc8 <__func__.0+0x2d8>
    80025c62:	e789                	bnez	a5,80025c6c <stateen_CSRIND_test+0x148>
    80025c64:	0000a597          	auipc	a1,0xa
    80025c68:	35458593          	addi	a1,a1,852 # 8002ffb8 <__func__.0+0x2c8>
    80025c6c:	0000a517          	auipc	a0,0xa
    80025c70:	39c50513          	addi	a0,a0,924 # 80030008 <__func__.0+0x318>
    80025c74:	418070ef          	jal	8002d08c <printf>
    80025c78:	00032797          	auipc	a5,0x32
    80025c7c:	3997c783          	lbu	a5,921(a5) # 80058011 <excpt+0x1>
    80025c80:	2e079563          	bnez	a5,80025f6a <stateen_CSRIND_test+0x446>
    80025c84:	4529                	li	a0,10
    80025c86:	0f4060ef          	jal	8002bd7a <putchar>
    80025c8a:	c419                	beqz	s0,80025c98 <stateen_CSRIND_test+0x174>
    80025c8c:	00032417          	auipc	s0,0x32
    80025c90:	38544403          	lbu	s0,901(s0) # 80058011 <excpt+0x1>
    80025c94:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HS);
    80025c98:	450d                	li	a0,3
    80025c9a:	a6edb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025c9e:	96edb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025ca2:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025ca6:	ba8db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025caa:	08200593          	li	a1,130
    80025cae:	00014617          	auipc	a2,0x14
    80025cb2:	13260613          	addi	a2,a2,306 # 80039de0 <__func__.0+0xa0f0>
    80025cb6:	0000a517          	auipc	a0,0xa
    80025cba:	33a50513          	addi	a0,a0,826 # 8002fff0 <__func__.0+0x300>
    80025cbe:	3ce070ef          	jal	8002d08c <printf>
    80025cc2:	00032797          	auipc	a5,0x32
    80025cc6:	34f7c783          	lbu	a5,847(a5) # 80058011 <excpt+0x1>
    80025cca:	0000a597          	auipc	a1,0xa
    80025cce:	2fe58593          	addi	a1,a1,766 # 8002ffc8 <__func__.0+0x2d8>
    80025cd2:	e789                	bnez	a5,80025cdc <stateen_CSRIND_test+0x1b8>
    80025cd4:	0000a597          	auipc	a1,0xa
    80025cd8:	2e458593          	addi	a1,a1,740 # 8002ffb8 <__func__.0+0x2c8>
    80025cdc:	0000a517          	auipc	a0,0xa
    80025ce0:	32c50513          	addi	a0,a0,812 # 80030008 <__func__.0+0x318>
    80025ce4:	3a8070ef          	jal	8002d08c <printf>
    80025ce8:	00032797          	auipc	a5,0x32
    80025cec:	3297c783          	lbu	a5,809(a5) # 80058011 <excpt+0x1>
    80025cf0:	26079263          	bnez	a5,80025f54 <stateen_CSRIND_test+0x430>
    80025cf4:	4529                	li	a0,10
    80025cf6:	084060ef          	jal	8002bd7a <putchar>
    80025cfa:	c419                	beqz	s0,80025d08 <stateen_CSRIND_test+0x1e4>
    80025cfc:	00032417          	auipc	s0,0x32
    80025d00:	31544403          	lbu	s0,789(s0) # 80058011 <excpt+0x1>
    80025d04:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025d08:	4505                	li	a0,1
    80025d0a:	9fedb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025d0e:	8fedb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025d12:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025d16:	b38db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d1a:	08200593          	li	a1,130
    80025d1e:	00014617          	auipc	a2,0x14
    80025d22:	11a60613          	addi	a2,a2,282 # 80039e38 <__func__.0+0xa148>
    80025d26:	0000a517          	auipc	a0,0xa
    80025d2a:	2ca50513          	addi	a0,a0,714 # 8002fff0 <__func__.0+0x300>
    80025d2e:	35e070ef          	jal	8002d08c <printf>
    80025d32:	00032797          	auipc	a5,0x32
    80025d36:	2df7c783          	lbu	a5,735(a5) # 80058011 <excpt+0x1>
    80025d3a:	0000a597          	auipc	a1,0xa
    80025d3e:	28e58593          	addi	a1,a1,654 # 8002ffc8 <__func__.0+0x2d8>
    80025d42:	e789                	bnez	a5,80025d4c <stateen_CSRIND_test+0x228>
    80025d44:	0000a597          	auipc	a1,0xa
    80025d48:	27458593          	addi	a1,a1,628 # 8002ffb8 <__func__.0+0x2c8>
    80025d4c:	0000a517          	auipc	a0,0xa
    80025d50:	2bc50513          	addi	a0,a0,700 # 80030008 <__func__.0+0x318>
    80025d54:	338070ef          	jal	8002d08c <printf>
    80025d58:	00032797          	auipc	a5,0x32
    80025d5c:	2b97c783          	lbu	a5,697(a5) # 80058011 <excpt+0x1>
    80025d60:	1c079f63          	bnez	a5,80025f3e <stateen_CSRIND_test+0x41a>
    80025d64:	4529                	li	a0,10
    80025d66:	014060ef          	jal	8002bd7a <putchar>
    80025d6a:	c419                	beqz	s0,80025d78 <stateen_CSRIND_test+0x254>
    80025d6c:	00032417          	auipc	s0,0x32
    80025d70:	2a544403          	lbu	s0,677(s0) # 80058011 <excpt+0x1>
    80025d74:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025d78:	4505                	li	a0,1
    80025d7a:	98edb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025d7e:	88edb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025d82:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025d86:	ac8db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d8a:	08200593          	li	a1,130
    80025d8e:	00014617          	auipc	a2,0x14
    80025d92:	10260613          	addi	a2,a2,258 # 80039e90 <__func__.0+0xa1a0>
    80025d96:	0000a517          	auipc	a0,0xa
    80025d9a:	25a50513          	addi	a0,a0,602 # 8002fff0 <__func__.0+0x300>
    80025d9e:	2ee070ef          	jal	8002d08c <printf>
    80025da2:	00032797          	auipc	a5,0x32
    80025da6:	26f7c783          	lbu	a5,623(a5) # 80058011 <excpt+0x1>
    80025daa:	0000a597          	auipc	a1,0xa
    80025dae:	21e58593          	addi	a1,a1,542 # 8002ffc8 <__func__.0+0x2d8>
    80025db2:	e789                	bnez	a5,80025dbc <stateen_CSRIND_test+0x298>
    80025db4:	0000a597          	auipc	a1,0xa
    80025db8:	20458593          	addi	a1,a1,516 # 8002ffb8 <__func__.0+0x2c8>
    80025dbc:	0000a517          	auipc	a0,0xa
    80025dc0:	24c50513          	addi	a0,a0,588 # 80030008 <__func__.0+0x318>
    80025dc4:	2c8070ef          	jal	8002d08c <printf>
    80025dc8:	00032797          	auipc	a5,0x32
    80025dcc:	2497c783          	lbu	a5,585(a5) # 80058011 <excpt+0x1>
    80025dd0:	14079c63          	bnez	a5,80025f28 <stateen_CSRIND_test+0x404>
    80025dd4:	4529                	li	a0,10
    80025dd6:	7a5050ef          	jal	8002bd7a <putchar>
    80025dda:	c419                	beqz	s0,80025de8 <stateen_CSRIND_test+0x2c4>
    80025ddc:	00032417          	auipc	s0,0x32
    80025de0:	23544403          	lbu	s0,565(s0) # 80058011 <excpt+0x1>
    80025de4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80025de8:	4511                	li	a0,4
    80025dea:	91edb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025dee:	81edb0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025df2:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025df6:	a58db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025dfa:	08200593          	li	a1,130
    80025dfe:	00014617          	auipc	a2,0x14
    80025e02:	0ea60613          	addi	a2,a2,234 # 80039ee8 <__func__.0+0xa1f8>
    80025e06:	0000a517          	auipc	a0,0xa
    80025e0a:	1ea50513          	addi	a0,a0,490 # 8002fff0 <__func__.0+0x300>
    80025e0e:	27e070ef          	jal	8002d08c <printf>
    80025e12:	00032797          	auipc	a5,0x32
    80025e16:	1ff7c783          	lbu	a5,511(a5) # 80058011 <excpt+0x1>
    80025e1a:	0000a597          	auipc	a1,0xa
    80025e1e:	1ae58593          	addi	a1,a1,430 # 8002ffc8 <__func__.0+0x2d8>
    80025e22:	e789                	bnez	a5,80025e2c <stateen_CSRIND_test+0x308>
    80025e24:	0000a597          	auipc	a1,0xa
    80025e28:	19458593          	addi	a1,a1,404 # 8002ffb8 <__func__.0+0x2c8>
    80025e2c:	0000a517          	auipc	a0,0xa
    80025e30:	1dc50513          	addi	a0,a0,476 # 80030008 <__func__.0+0x318>
    80025e34:	258070ef          	jal	8002d08c <printf>
    80025e38:	00032797          	auipc	a5,0x32
    80025e3c:	1d97c783          	lbu	a5,473(a5) # 80058011 <excpt+0x1>
    80025e40:	0c079963          	bnez	a5,80025f12 <stateen_CSRIND_test+0x3ee>
    80025e44:	4529                	li	a0,10
    80025e46:	735050ef          	jal	8002bd7a <putchar>
    80025e4a:	c419                	beqz	s0,80025e58 <stateen_CSRIND_test+0x334>
    80025e4c:	00032417          	auipc	s0,0x32
    80025e50:	1c544403          	lbu	s0,453(s0) # 80058011 <excpt+0x1>
    80025e54:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80025e58:	4511                	li	a0,4
    80025e5a:	8aedb0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025e5e:	fafda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025e62:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025e66:	9e8db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025e6a:	08200593          	li	a1,130
    80025e6e:	00014617          	auipc	a2,0x14
    80025e72:	0d260613          	addi	a2,a2,210 # 80039f40 <__func__.0+0xa250>
    80025e76:	0000a517          	auipc	a0,0xa
    80025e7a:	17a50513          	addi	a0,a0,378 # 8002fff0 <__func__.0+0x300>
    80025e7e:	20e070ef          	jal	8002d08c <printf>
    80025e82:	00032797          	auipc	a5,0x32
    80025e86:	18f7c783          	lbu	a5,399(a5) # 80058011 <excpt+0x1>
    80025e8a:	0000a597          	auipc	a1,0xa
    80025e8e:	13e58593          	addi	a1,a1,318 # 8002ffc8 <__func__.0+0x2d8>
    80025e92:	e789                	bnez	a5,80025e9c <stateen_CSRIND_test+0x378>
    80025e94:	0000a597          	auipc	a1,0xa
    80025e98:	12458593          	addi	a1,a1,292 # 8002ffb8 <__func__.0+0x2c8>
    80025e9c:	0000a517          	auipc	a0,0xa
    80025ea0:	16c50513          	addi	a0,a0,364 # 80030008 <__func__.0+0x318>
    80025ea4:	1e8070ef          	jal	8002d08c <printf>
    80025ea8:	00032797          	auipc	a5,0x32
    80025eac:	1697c783          	lbu	a5,361(a5) # 80058011 <excpt+0x1>
    80025eb0:	e7b1                	bnez	a5,80025efc <stateen_CSRIND_test+0x3d8>
    80025eb2:	4529                	li	a0,10
    80025eb4:	6c7050ef          	jal	8002bd7a <putchar>
    80025eb8:	c411                	beqz	s0,80025ec4 <stateen_CSRIND_test+0x3a0>
    80025eba:	00032797          	auipc	a5,0x32
    80025ebe:	1577c783          	lbu	a5,343(a5) # 80058011 <excpt+0x1>
    80025ec2:	c79d                	beqz	a5,80025ef0 <stateen_CSRIND_test+0x3cc>
    80025ec4:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80025ec6:	0000a597          	auipc	a1,0xa
    80025eca:	10258593          	addi	a1,a1,258 # 8002ffc8 <__func__.0+0x2d8>
    80025ece:	0000a517          	auipc	a0,0xa
    80025ed2:	1a250513          	addi	a0,a0,418 # 80030070 <__func__.0+0x380>
    80025ed6:	1b6070ef          	jal	8002d08c <printf>
    80025eda:	4511                	li	a0,4
    80025edc:	82cdb0ef          	jal	80000f08 <goto_priv>
    80025ee0:	9f3db0ef          	jal	800018d2 <reset_state>
}
    80025ee4:	60e2                	ld	ra,24(sp)
    80025ee6:	8522                	mv	a0,s0
    80025ee8:	6442                	ld	s0,16(sp)
    80025eea:	64a2                	ld	s1,8(sp)
    80025eec:	6105                	addi	sp,sp,32
    80025eee:	8082                	ret
    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025ef0:	4405                	li	s0,1
    TEST_END();
    80025ef2:	0000a597          	auipc	a1,0xa
    80025ef6:	0c658593          	addi	a1,a1,198 # 8002ffb8 <__func__.0+0x2c8>
    80025efa:	bfd1                	j	80025ece <stateen_CSRIND_test+0x3aa>
    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025efc:	0000a517          	auipc	a0,0xa
    80025f00:	11450513          	addi	a0,a0,276 # 80030010 <__func__.0+0x320>
    80025f04:	188070ef          	jal	8002d08c <printf>
    80025f08:	02900513          	li	a0,41
    80025f0c:	66f050ef          	jal	8002bd7a <putchar>
    80025f10:	b74d                	j	80025eb2 <stateen_CSRIND_test+0x38e>
    TEST_ASSERT("m mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f12:	0000a517          	auipc	a0,0xa
    80025f16:	0fe50513          	addi	a0,a0,254 # 80030010 <__func__.0+0x320>
    80025f1a:	172070ef          	jal	8002d08c <printf>
    80025f1e:	02900513          	li	a0,41
    80025f22:	659050ef          	jal	8002bd7a <putchar>
    80025f26:	bf39                	j	80025e44 <stateen_CSRIND_test+0x320>
    TEST_ASSERT("hu mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f28:	0000a517          	auipc	a0,0xa
    80025f2c:	0e850513          	addi	a0,a0,232 # 80030010 <__func__.0+0x320>
    80025f30:	15c070ef          	jal	8002d08c <printf>
    80025f34:	02900513          	li	a0,41
    80025f38:	643050ef          	jal	8002bd7a <putchar>
    80025f3c:	bd61                	j	80025dd4 <stateen_CSRIND_test+0x2b0>
    TEST_ASSERT("hu mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f3e:	0000a517          	auipc	a0,0xa
    80025f42:	0d250513          	addi	a0,a0,210 # 80030010 <__func__.0+0x320>
    80025f46:	146070ef          	jal	8002d08c <printf>
    80025f4a:	02900513          	li	a0,41
    80025f4e:	62d050ef          	jal	8002bd7a <putchar>
    80025f52:	bd09                	j	80025d64 <stateen_CSRIND_test+0x240>
    TEST_ASSERT("hs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f54:	0000a517          	auipc	a0,0xa
    80025f58:	0bc50513          	addi	a0,a0,188 # 80030010 <__func__.0+0x320>
    80025f5c:	130070ef          	jal	8002d08c <printf>
    80025f60:	02900513          	li	a0,41
    80025f64:	617050ef          	jal	8002bd7a <putchar>
    80025f68:	b371                	j	80025cf4 <stateen_CSRIND_test+0x1d0>
    TEST_ASSERT("hs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f6a:	0000a517          	auipc	a0,0xa
    80025f6e:	0a650513          	addi	a0,a0,166 # 80030010 <__func__.0+0x320>
    80025f72:	11a070ef          	jal	8002d08c <printf>
    80025f76:	02900513          	li	a0,41
    80025f7a:	601050ef          	jal	8002bd7a <putchar>
    80025f7e:	b319                	j	80025c84 <stateen_CSRIND_test+0x160>
    TEST_ASSERT("vs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f80:	0000a517          	auipc	a0,0xa
    80025f84:	09050513          	addi	a0,a0,144 # 80030010 <__func__.0+0x320>
    80025f88:	104070ef          	jal	8002d08c <printf>
    80025f8c:	02900513          	li	a0,41
    80025f90:	5eb050ef          	jal	8002bd7a <putchar>
    80025f94:	b9bd                	j	80025c12 <stateen_CSRIND_test+0xee>
    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025f96:	0000a517          	auipc	a0,0xa
    80025f9a:	07a50513          	addi	a0,a0,122 # 80030010 <__func__.0+0x320>
    80025f9e:	0ee070ef          	jal	8002d08c <printf>
    80025fa2:	02900513          	li	a0,41
    80025fa6:	5d5050ef          	jal	8002bd7a <putchar>
    80025faa:	befd                	j	80025ba8 <stateen_CSRIND_test+0x84>

0000000080025fac <stateen_ENVCFG_test_1>:

// ----------


bool stateen_ENVCFG_test_1(){
    80025fac:	1101                	addi	sp,sp,-32

    TEST_START();
    80025fae:	0000a597          	auipc	a1,0xa
    80025fb2:	8e258593          	addi	a1,a1,-1822 # 8002f890 <__func__.14>
    80025fb6:	0000a517          	auipc	a0,0xa
    80025fba:	02250513          	addi	a0,a0,34 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_ENVCFG_test_1(){
    80025fbe:	ec06                	sd	ra,24(sp)
    80025fc0:	e822                	sd	s0,16(sp)
    80025fc2:	e426                	sd	s1,8(sp)
    TEST_START();
    80025fc4:	0c8070ef          	jal	8002d08c <printf>
    80025fc8:	4529                	li	a0,10
    80025fca:	5b1050ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80025fce:	4511                	li	a0,4
    80025fd0:	f39da0ef          	jal	80000f08 <goto_priv>
    //当mstateen.ENVCFG=0,hu mode 不可访问Henvcfg和Senvcfg寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80025fd4:	4785                	li	a5,1
    80025fd6:	17fa                	slli	a5,a5,0x3e
    80025fd8:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80025fdc:	4505                	li	a0,1
    80025fde:	f2bda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80025fe2:	e2bda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80025fe6:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80025fea:	864db0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss envcfg register cause to illegal except when mstateen.envcfg=0",
    80025fee:	08200593          	li	a1,130
    80025ff2:	00014617          	auipc	a2,0x14
    80025ff6:	fa660613          	addi	a2,a2,-90 # 80039f98 <__func__.0+0xa2a8>
    80025ffa:	0000a517          	auipc	a0,0xa
    80025ffe:	ff650513          	addi	a0,a0,-10 # 8002fff0 <__func__.0+0x300>
    80026002:	08a070ef          	jal	8002d08c <printf>
    80026006:	00032797          	auipc	a5,0x32
    8002600a:	00b7c783          	lbu	a5,11(a5) # 80058011 <excpt+0x1>
    8002600e:	00032497          	auipc	s1,0x32
    80026012:	00248493          	addi	s1,s1,2 # 80058010 <excpt>
    80026016:	0000a597          	auipc	a1,0xa
    8002601a:	fb258593          	addi	a1,a1,-78 # 8002ffc8 <__func__.0+0x2d8>
    8002601e:	cf89                	beqz	a5,80026038 <stateen_ENVCFG_test_1+0x8c>
    80026020:	6498                	ld	a4,8(s1)
    80026022:	4789                	li	a5,2
    80026024:	0000a597          	auipc	a1,0xa
    80026028:	f9458593          	addi	a1,a1,-108 # 8002ffb8 <__func__.0+0x2c8>
    8002602c:	00f70663          	beq	a4,a5,80026038 <stateen_ENVCFG_test_1+0x8c>
    80026030:	0000a597          	auipc	a1,0xa
    80026034:	f9858593          	addi	a1,a1,-104 # 8002ffc8 <__func__.0+0x2d8>
    80026038:	0000a517          	auipc	a0,0xa
    8002603c:	fd050513          	addi	a0,a0,-48 # 80030008 <__func__.0+0x318>
    80026040:	04c070ef          	jal	8002d08c <printf>
    80026044:	00032797          	auipc	a5,0x32
    80026048:	fcd7c783          	lbu	a5,-51(a5) # 80058011 <excpt+0x1>
    8002604c:	c789                	beqz	a5,80026056 <stateen_ENVCFG_test_1+0xaa>
    8002604e:	6498                	ld	a4,8(s1)
    80026050:	4789                	li	a5,2
    80026052:	00f70c63          	beq	a4,a5,8002606a <stateen_ENVCFG_test_1+0xbe>
    80026056:	0000a517          	auipc	a0,0xa
    8002605a:	fba50513          	addi	a0,a0,-70 # 80030010 <__func__.0+0x320>
    8002605e:	02e070ef          	jal	8002d08c <printf>
    80026062:	02900513          	li	a0,41
    80026066:	515050ef          	jal	8002bd7a <putchar>
    8002606a:	4529                	li	a0,10
    8002606c:	50f050ef          	jal	8002bd7a <putchar>
    80026070:	00032797          	auipc	a5,0x32
    80026074:	fa17c783          	lbu	a5,-95(a5) # 80058011 <excpt+0x1>
    80026078:	4401                	li	s0,0
    8002607a:	c789                	beqz	a5,80026084 <stateen_ENVCFG_test_1+0xd8>
    8002607c:	6480                	ld	s0,8(s1)
    8002607e:	1479                	addi	s0,s0,-2
    80026080:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80026084:	4505                	li	a0,1
    80026086:	e83da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002608a:	d83da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    8002608e:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026092:	fbdda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80026096:	08200593          	li	a1,130
    8002609a:	00014617          	auipc	a2,0x14
    8002609e:	f4e60613          	addi	a2,a2,-178 # 80039fe8 <__func__.0+0xa2f8>
    800260a2:	0000a517          	auipc	a0,0xa
    800260a6:	f4e50513          	addi	a0,a0,-178 # 8002fff0 <__func__.0+0x300>
    800260aa:	7e3060ef          	jal	8002d08c <printf>
    800260ae:	00032797          	auipc	a5,0x32
    800260b2:	f637c783          	lbu	a5,-157(a5) # 80058011 <excpt+0x1>
    800260b6:	0000a597          	auipc	a1,0xa
    800260ba:	f1258593          	addi	a1,a1,-238 # 8002ffc8 <__func__.0+0x2d8>
    800260be:	cf89                	beqz	a5,800260d8 <stateen_ENVCFG_test_1+0x12c>
    800260c0:	6498                	ld	a4,8(s1)
    800260c2:	4789                	li	a5,2
    800260c4:	0000a597          	auipc	a1,0xa
    800260c8:	ef458593          	addi	a1,a1,-268 # 8002ffb8 <__func__.0+0x2c8>
    800260cc:	00f70663          	beq	a4,a5,800260d8 <stateen_ENVCFG_test_1+0x12c>
    800260d0:	0000a597          	auipc	a1,0xa
    800260d4:	ef858593          	addi	a1,a1,-264 # 8002ffc8 <__func__.0+0x2d8>
    800260d8:	0000a517          	auipc	a0,0xa
    800260dc:	f3050513          	addi	a0,a0,-208 # 80030008 <__func__.0+0x318>
    800260e0:	7ad060ef          	jal	8002d08c <printf>
    800260e4:	00032797          	auipc	a5,0x32
    800260e8:	f2d7c783          	lbu	a5,-211(a5) # 80058011 <excpt+0x1>
    800260ec:	c789                	beqz	a5,800260f6 <stateen_ENVCFG_test_1+0x14a>
    800260ee:	6498                	ld	a4,8(s1)
    800260f0:	4789                	li	a5,2
    800260f2:	00f70c63          	beq	a4,a5,8002610a <stateen_ENVCFG_test_1+0x15e>
    800260f6:	0000a517          	auipc	a0,0xa
    800260fa:	f1a50513          	addi	a0,a0,-230 # 80030010 <__func__.0+0x320>
    800260fe:	78f060ef          	jal	8002d08c <printf>
    80026102:	02900513          	li	a0,41
    80026106:	475050ef          	jal	8002bd7a <putchar>
    8002610a:	4529                	li	a0,10
    8002610c:	46f050ef          	jal	8002bd7a <putchar>
    80026110:	c015                	beqz	s0,80026134 <stateen_ENVCFG_test_1+0x188>
    80026112:	00032417          	auipc	s0,0x32
    80026116:	eff44403          	lbu	s0,-257(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    8002611a:	0000a597          	auipc	a1,0xa
    8002611e:	eae58593          	addi	a1,a1,-338 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80026122:	cc11                	beqz	s0,8002613e <stateen_ENVCFG_test_1+0x192>
    80026124:	6498                	ld	a4,8(s1)
    80026126:	4789                	li	a5,2
    TEST_END();
    80026128:	0000a597          	auipc	a1,0xa
    8002612c:	e9058593          	addi	a1,a1,-368 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80026130:	00f70763          	beq	a4,a5,8002613e <stateen_ENVCFG_test_1+0x192>
    80026134:	4401                	li	s0,0
    TEST_END();
    80026136:	0000a597          	auipc	a1,0xa
    8002613a:	e9258593          	addi	a1,a1,-366 # 8002ffc8 <__func__.0+0x2d8>
    8002613e:	0000a517          	auipc	a0,0xa
    80026142:	f3250513          	addi	a0,a0,-206 # 80030070 <__func__.0+0x380>
    80026146:	747060ef          	jal	8002d08c <printf>
    8002614a:	4511                	li	a0,4
    8002614c:	dbdda0ef          	jal	80000f08 <goto_priv>
    80026150:	f82db0ef          	jal	800018d2 <reset_state>

}
    80026154:	60e2                	ld	ra,24(sp)
    80026156:	8522                	mv	a0,s0
    80026158:	6442                	ld	s0,16(sp)
    8002615a:	64a2                	ld	s1,8(sp)
    8002615c:	6105                	addi	sp,sp,32
    8002615e:	8082                	ret

0000000080026160 <stateen_ENVCFG_test_2>:

bool stateen_ENVCFG_test_2(){
    80026160:	1101                	addi	sp,sp,-32

    TEST_START();
    80026162:	00009597          	auipc	a1,0x9
    80026166:	74658593          	addi	a1,a1,1862 # 8002f8a8 <__func__.13>
    8002616a:	0000a517          	auipc	a0,0xa
    8002616e:	e6e50513          	addi	a0,a0,-402 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_ENVCFG_test_2(){
    80026172:	ec06                	sd	ra,24(sp)
    80026174:	e822                	sd	s0,16(sp)
    80026176:	e426                	sd	s1,8(sp)
    TEST_START();
    80026178:	715060ef          	jal	8002d08c <printf>
    8002617c:	4529                	li	a0,10
    8002617e:	3fd050ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80026182:	4511                	li	a0,4
    80026184:	d85da0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026188:	4785                	li	a5,1
    8002618a:	17fa                	slli	a5,a5,0x3e
    8002618c:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    80026190:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.ENVCFG=1,hstateen.ENVCFG=0,v=1时,不可访问Henvcfg和Senvcfg寄存器
    goto_priv(PRIV_VU);
    80026194:	4501                	li	a0,0
    80026196:	d73da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002619a:	c73da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    8002619e:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800261a2:	eadda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss henvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800261a6:	08200593          	li	a1,130
    800261aa:	00014617          	auipc	a2,0x14
    800261ae:	e8e60613          	addi	a2,a2,-370 # 8003a038 <__func__.0+0xa348>
    800261b2:	0000a517          	auipc	a0,0xa
    800261b6:	e3e50513          	addi	a0,a0,-450 # 8002fff0 <__func__.0+0x300>
    800261ba:	6d3060ef          	jal	8002d08c <printf>
    800261be:	00032797          	auipc	a5,0x32
    800261c2:	e537c783          	lbu	a5,-429(a5) # 80058011 <excpt+0x1>
    800261c6:	00032497          	auipc	s1,0x32
    800261ca:	e4a48493          	addi	s1,s1,-438 # 80058010 <excpt>
    800261ce:	0000a597          	auipc	a1,0xa
    800261d2:	dfa58593          	addi	a1,a1,-518 # 8002ffc8 <__func__.0+0x2d8>
    800261d6:	cf89                	beqz	a5,800261f0 <stateen_ENVCFG_test_2+0x90>
    800261d8:	6498                	ld	a4,8(s1)
    800261da:	47d9                	li	a5,22
    800261dc:	0000a597          	auipc	a1,0xa
    800261e0:	ddc58593          	addi	a1,a1,-548 # 8002ffb8 <__func__.0+0x2c8>
    800261e4:	00f70663          	beq	a4,a5,800261f0 <stateen_ENVCFG_test_2+0x90>
    800261e8:	0000a597          	auipc	a1,0xa
    800261ec:	de058593          	addi	a1,a1,-544 # 8002ffc8 <__func__.0+0x2d8>
    800261f0:	0000a517          	auipc	a0,0xa
    800261f4:	e1850513          	addi	a0,a0,-488 # 80030008 <__func__.0+0x318>
    800261f8:	695060ef          	jal	8002d08c <printf>
    800261fc:	00032797          	auipc	a5,0x32
    80026200:	e157c783          	lbu	a5,-491(a5) # 80058011 <excpt+0x1>
    80026204:	c789                	beqz	a5,8002620e <stateen_ENVCFG_test_2+0xae>
    80026206:	6498                	ld	a4,8(s1)
    80026208:	47d9                	li	a5,22
    8002620a:	00f70c63          	beq	a4,a5,80026222 <stateen_ENVCFG_test_2+0xc2>
    8002620e:	0000a517          	auipc	a0,0xa
    80026212:	e0250513          	addi	a0,a0,-510 # 80030010 <__func__.0+0x320>
    80026216:	677060ef          	jal	8002d08c <printf>
    8002621a:	02900513          	li	a0,41
    8002621e:	35d050ef          	jal	8002bd7a <putchar>
    80026222:	4529                	li	a0,10
    80026224:	357050ef          	jal	8002bd7a <putchar>
    80026228:	00032797          	auipc	a5,0x32
    8002622c:	de97c783          	lbu	a5,-535(a5) # 80058011 <excpt+0x1>
    80026230:	4401                	li	s0,0
    80026232:	c789                	beqz	a5,8002623c <stateen_ENVCFG_test_2+0xdc>
    80026234:	6480                	ld	s0,8(s1)
    80026236:	1429                	addi	s0,s0,-22
    80026238:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8002623c:	4501                	li	a0,0
    8002623e:	ccbda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026242:	bcbda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026246:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    8002624a:	e05da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    8002624e:	08200593          	li	a1,130
    80026252:	00014617          	auipc	a2,0x14
    80026256:	e3e60613          	addi	a2,a2,-450 # 8003a090 <__func__.0+0xa3a0>
    8002625a:	0000a517          	auipc	a0,0xa
    8002625e:	d9650513          	addi	a0,a0,-618 # 8002fff0 <__func__.0+0x300>
    80026262:	62b060ef          	jal	8002d08c <printf>
    80026266:	00032797          	auipc	a5,0x32
    8002626a:	dab7c783          	lbu	a5,-597(a5) # 80058011 <excpt+0x1>
    8002626e:	0000a597          	auipc	a1,0xa
    80026272:	d5a58593          	addi	a1,a1,-678 # 8002ffc8 <__func__.0+0x2d8>
    80026276:	cf89                	beqz	a5,80026290 <stateen_ENVCFG_test_2+0x130>
    80026278:	6498                	ld	a4,8(s1)
    8002627a:	47d9                	li	a5,22
    8002627c:	0000a597          	auipc	a1,0xa
    80026280:	d3c58593          	addi	a1,a1,-708 # 8002ffb8 <__func__.0+0x2c8>
    80026284:	00f70663          	beq	a4,a5,80026290 <stateen_ENVCFG_test_2+0x130>
    80026288:	0000a597          	auipc	a1,0xa
    8002628c:	d4058593          	addi	a1,a1,-704 # 8002ffc8 <__func__.0+0x2d8>
    80026290:	0000a517          	auipc	a0,0xa
    80026294:	d7850513          	addi	a0,a0,-648 # 80030008 <__func__.0+0x318>
    80026298:	5f5060ef          	jal	8002d08c <printf>
    8002629c:	00032797          	auipc	a5,0x32
    800262a0:	d757c783          	lbu	a5,-651(a5) # 80058011 <excpt+0x1>
    800262a4:	c789                	beqz	a5,800262ae <stateen_ENVCFG_test_2+0x14e>
    800262a6:	6498                	ld	a4,8(s1)
    800262a8:	47d9                	li	a5,22
    800262aa:	00f70c63          	beq	a4,a5,800262c2 <stateen_ENVCFG_test_2+0x162>
    800262ae:	0000a517          	auipc	a0,0xa
    800262b2:	d6250513          	addi	a0,a0,-670 # 80030010 <__func__.0+0x320>
    800262b6:	5d7060ef          	jal	8002d08c <printf>
    800262ba:	02900513          	li	a0,41
    800262be:	2bd050ef          	jal	8002bd7a <putchar>
    800262c2:	4529                	li	a0,10
    800262c4:	2b7050ef          	jal	8002bd7a <putchar>
    800262c8:	c015                	beqz	s0,800262ec <stateen_ENVCFG_test_2+0x18c>
    800262ca:	00032417          	auipc	s0,0x32
    800262ce:	d4744403          	lbu	s0,-697(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    800262d2:	0000a597          	auipc	a1,0xa
    800262d6:	cf658593          	addi	a1,a1,-778 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800262da:	cc11                	beqz	s0,800262f6 <stateen_ENVCFG_test_2+0x196>
    800262dc:	6498                	ld	a4,8(s1)
    800262de:	47d9                	li	a5,22
    TEST_END();
    800262e0:	0000a597          	auipc	a1,0xa
    800262e4:	cd858593          	addi	a1,a1,-808 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800262e8:	00f70763          	beq	a4,a5,800262f6 <stateen_ENVCFG_test_2+0x196>
    800262ec:	4401                	li	s0,0
    TEST_END();
    800262ee:	0000a597          	auipc	a1,0xa
    800262f2:	cda58593          	addi	a1,a1,-806 # 8002ffc8 <__func__.0+0x2d8>
    800262f6:	0000a517          	auipc	a0,0xa
    800262fa:	d7a50513          	addi	a0,a0,-646 # 80030070 <__func__.0+0x380>
    800262fe:	58f060ef          	jal	8002d08c <printf>
    80026302:	4511                	li	a0,4
    80026304:	c05da0ef          	jal	80000f08 <goto_priv>
    80026308:	dcadb0ef          	jal	800018d2 <reset_state>

}
    8002630c:	60e2                	ld	ra,24(sp)
    8002630e:	8522                	mv	a0,s0
    80026310:	6442                	ld	s0,16(sp)
    80026312:	64a2                	ld	s1,8(sp)
    80026314:	6105                	addi	sp,sp,32
    80026316:	8082                	ret

0000000080026318 <stateen_ENVCFG_test_3>:

bool stateen_ENVCFG_test_3(){
    80026318:	1141                	addi	sp,sp,-16

    //当mstateen.ENVCFG=0,m mode 可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    8002631a:	00009597          	auipc	a1,0x9
    8002631e:	5a658593          	addi	a1,a1,1446 # 8002f8c0 <__func__.12>
    80026322:	0000a517          	auipc	a0,0xa
    80026326:	cb650513          	addi	a0,a0,-842 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_ENVCFG_test_3(){
    8002632a:	e406                	sd	ra,8(sp)
    8002632c:	e022                	sd	s0,0(sp)
    TEST_START();
    8002632e:	55f060ef          	jal	8002d08c <printf>
    80026332:	4529                	li	a0,10
    80026334:	247050ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80026338:	4511                	li	a0,4
    8002633a:	bcfda0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    8002633e:	4785                	li	a5,1
    80026340:	17fa                	slli	a5,a5,0x3e
    80026342:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    80026346:	4511                	li	a0,4
    80026348:	bc1da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002634c:	ac1da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026350:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026354:	cfbda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    80026358:	08200593          	li	a1,130
    8002635c:	00014617          	auipc	a2,0x14
    80026360:	d8c60613          	addi	a2,a2,-628 # 8003a0e8 <__func__.0+0xa3f8>
    80026364:	0000a517          	auipc	a0,0xa
    80026368:	c8c50513          	addi	a0,a0,-884 # 8002fff0 <__func__.0+0x300>
    8002636c:	521060ef          	jal	8002d08c <printf>
    80026370:	00032797          	auipc	a5,0x32
    80026374:	ca17c783          	lbu	a5,-863(a5) # 80058011 <excpt+0x1>
    80026378:	0000a597          	auipc	a1,0xa
    8002637c:	c4058593          	addi	a1,a1,-960 # 8002ffb8 <__func__.0+0x2c8>
    80026380:	c789                	beqz	a5,8002638a <stateen_ENVCFG_test_3+0x72>
    80026382:	0000a597          	auipc	a1,0xa
    80026386:	c4658593          	addi	a1,a1,-954 # 8002ffc8 <__func__.0+0x2d8>
    8002638a:	0000a517          	auipc	a0,0xa
    8002638e:	c7e50513          	addi	a0,a0,-898 # 80030008 <__func__.0+0x318>
    80026392:	4fb060ef          	jal	8002d08c <printf>
    80026396:	00032797          	auipc	a5,0x32
    8002639a:	c7b7c783          	lbu	a5,-901(a5) # 80058011 <excpt+0x1>
    8002639e:	e7e9                	bnez	a5,80026468 <stateen_ENVCFG_test_3+0x150>
    800263a0:	4529                	li	a0,10
    800263a2:	1d9050ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800263a6:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    800263a8:	00032417          	auipc	s0,0x32
    800263ac:	c6944403          	lbu	s0,-919(s0) # 80058011 <excpt+0x1>
    goto_priv(PRIV_M);
    800263b0:	b59da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800263b4:	a59da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    800263b8:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    800263bc:	c93da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    800263c0:	08200593          	li	a1,130
    800263c4:	00014617          	auipc	a2,0x14
    800263c8:	d6460613          	addi	a2,a2,-668 # 8003a128 <__func__.0+0xa438>
    800263cc:	0000a517          	auipc	a0,0xa
    800263d0:	c2450513          	addi	a0,a0,-988 # 8002fff0 <__func__.0+0x300>
    800263d4:	4b9060ef          	jal	8002d08c <printf>
    800263d8:	00032797          	auipc	a5,0x32
    800263dc:	c397c783          	lbu	a5,-967(a5) # 80058011 <excpt+0x1>
    800263e0:	0000a597          	auipc	a1,0xa
    800263e4:	be858593          	addi	a1,a1,-1048 # 8002ffc8 <__func__.0+0x2d8>
    800263e8:	e789                	bnez	a5,800263f2 <stateen_ENVCFG_test_3+0xda>
    800263ea:	0000a597          	auipc	a1,0xa
    800263ee:	bce58593          	addi	a1,a1,-1074 # 8002ffb8 <__func__.0+0x2c8>
    800263f2:	0000a517          	auipc	a0,0xa
    800263f6:	c1650513          	addi	a0,a0,-1002 # 80030008 <__func__.0+0x318>
    800263fa:	493060ef          	jal	8002d08c <printf>
    800263fe:	00032797          	auipc	a5,0x32
    80026402:	c137c783          	lbu	a5,-1005(a5) # 80058011 <excpt+0x1>
    80026406:	e7b1                	bnez	a5,80026452 <stateen_ENVCFG_test_3+0x13a>
    80026408:	4529                	li	a0,10
    8002640a:	171050ef          	jal	8002bd7a <putchar>
    8002640e:	e815                	bnez	s0,80026442 <stateen_ENVCFG_test_3+0x12a>
    80026410:	00032797          	auipc	a5,0x32
    80026414:	c017c783          	lbu	a5,-1023(a5) # 80058011 <excpt+0x1>
    80026418:	c79d                	beqz	a5,80026446 <stateen_ENVCFG_test_3+0x12e>
        excpt.triggered == false
    ); 



    TEST_END();
    8002641a:	0000a597          	auipc	a1,0xa
    8002641e:	bae58593          	addi	a1,a1,-1106 # 8002ffc8 <__func__.0+0x2d8>
    80026422:	0000a517          	auipc	a0,0xa
    80026426:	c4e50513          	addi	a0,a0,-946 # 80030070 <__func__.0+0x380>
    8002642a:	463060ef          	jal	8002d08c <printf>
    8002642e:	4511                	li	a0,4
    80026430:	ad9da0ef          	jal	80000f08 <goto_priv>
    80026434:	c9edb0ef          	jal	800018d2 <reset_state>

}
    80026438:	60a2                	ld	ra,8(sp)
    8002643a:	8522                	mv	a0,s0
    8002643c:	6402                	ld	s0,0(sp)
    8002643e:	0141                	addi	sp,sp,16
    80026440:	8082                	ret
    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    80026442:	4401                	li	s0,0
    80026444:	bfd9                	j	8002641a <stateen_ENVCFG_test_3+0x102>
    80026446:	4405                	li	s0,1
    TEST_END();
    80026448:	0000a597          	auipc	a1,0xa
    8002644c:	b7058593          	addi	a1,a1,-1168 # 8002ffb8 <__func__.0+0x2c8>
    80026450:	bfc9                	j	80026422 <stateen_ENVCFG_test_3+0x10a>
    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    80026452:	0000a517          	auipc	a0,0xa
    80026456:	bbe50513          	addi	a0,a0,-1090 # 80030010 <__func__.0+0x320>
    8002645a:	433060ef          	jal	8002d08c <printf>
    8002645e:	02900513          	li	a0,41
    80026462:	119050ef          	jal	8002bd7a <putchar>
    80026466:	b74d                	j	80026408 <stateen_ENVCFG_test_3+0xf0>
    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    80026468:	0000a517          	auipc	a0,0xa
    8002646c:	ba850513          	addi	a0,a0,-1112 # 80030010 <__func__.0+0x320>
    80026470:	41d060ef          	jal	8002d08c <printf>
    80026474:	02900513          	li	a0,41
    80026478:	103050ef          	jal	8002bd7a <putchar>
    8002647c:	b715                	j	800263a0 <stateen_ENVCFG_test_3+0x88>

000000008002647e <stateen_ENVCFG_test_4>:


bool stateen_ENVCFG_test_4(){
    8002647e:	1101                	addi	sp,sp,-32

    //当mstateen.ENVCFG=1,hstateen.ENVCFG=0,v=1时不可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    80026480:	00009597          	auipc	a1,0x9
    80026484:	45858593          	addi	a1,a1,1112 # 8002f8d8 <__func__.11>
    80026488:	0000a517          	auipc	a0,0xa
    8002648c:	b5050513          	addi	a0,a0,-1200 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_ENVCFG_test_4(){
    80026490:	ec06                	sd	ra,24(sp)
    80026492:	e822                	sd	s0,16(sp)
    80026494:	e426                	sd	s1,8(sp)
    TEST_START();
    80026496:	3f7060ef          	jal	8002d08c <printf>
    8002649a:	4529                	li	a0,10
    8002649c:	0df050ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    800264a0:	4511                	li	a0,4
    800264a2:	a67da0ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    800264a6:	4785                	li	a5,1
    800264a8:	17fa                	slli	a5,a5,0x3e
    800264aa:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    800264ae:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    800264b2:	30c025f3          	csrr	a1,mstateen0
    800264b6:	00012517          	auipc	a0,0x12
    800264ba:	31250513          	addi	a0,a0,786 # 800387c8 <__func__.0+0x8ad8>
    800264be:	3cf060ef          	jal	8002d08c <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    800264c2:	60c025f3          	csrr	a1,hstateen0
    800264c6:	00012517          	auipc	a0,0x12
    800264ca:	31250513          	addi	a0,a0,786 # 800387d8 <__func__.0+0x8ae8>
    800264ce:	3bf060ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VS);
    800264d2:	4509                	li	a0,2
    800264d4:	a35da0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800264d8:	935da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    800264dc:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800264e0:	b6fda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss henvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800264e4:	08200593          	li	a1,130
    800264e8:	00014617          	auipc	a2,0x14
    800264ec:	c8060613          	addi	a2,a2,-896 # 8003a168 <__func__.0+0xa478>
    800264f0:	0000a517          	auipc	a0,0xa
    800264f4:	b0050513          	addi	a0,a0,-1280 # 8002fff0 <__func__.0+0x300>
    800264f8:	395060ef          	jal	8002d08c <printf>
    800264fc:	00032797          	auipc	a5,0x32
    80026500:	b157c783          	lbu	a5,-1259(a5) # 80058011 <excpt+0x1>
    80026504:	00032497          	auipc	s1,0x32
    80026508:	b0c48493          	addi	s1,s1,-1268 # 80058010 <excpt>
    8002650c:	0000a597          	auipc	a1,0xa
    80026510:	abc58593          	addi	a1,a1,-1348 # 8002ffc8 <__func__.0+0x2d8>
    80026514:	cf89                	beqz	a5,8002652e <stateen_ENVCFG_test_4+0xb0>
    80026516:	6498                	ld	a4,8(s1)
    80026518:	47d9                	li	a5,22
    8002651a:	0000a597          	auipc	a1,0xa
    8002651e:	a9e58593          	addi	a1,a1,-1378 # 8002ffb8 <__func__.0+0x2c8>
    80026522:	00f70663          	beq	a4,a5,8002652e <stateen_ENVCFG_test_4+0xb0>
    80026526:	0000a597          	auipc	a1,0xa
    8002652a:	aa258593          	addi	a1,a1,-1374 # 8002ffc8 <__func__.0+0x2d8>
    8002652e:	0000a517          	auipc	a0,0xa
    80026532:	ada50513          	addi	a0,a0,-1318 # 80030008 <__func__.0+0x318>
    80026536:	357060ef          	jal	8002d08c <printf>
    8002653a:	00032797          	auipc	a5,0x32
    8002653e:	ad77c783          	lbu	a5,-1321(a5) # 80058011 <excpt+0x1>
    80026542:	c789                	beqz	a5,8002654c <stateen_ENVCFG_test_4+0xce>
    80026544:	6498                	ld	a4,8(s1)
    80026546:	47d9                	li	a5,22
    80026548:	00f70c63          	beq	a4,a5,80026560 <stateen_ENVCFG_test_4+0xe2>
    8002654c:	0000a517          	auipc	a0,0xa
    80026550:	ac450513          	addi	a0,a0,-1340 # 80030010 <__func__.0+0x320>
    80026554:	339060ef          	jal	8002d08c <printf>
    80026558:	02900513          	li	a0,41
    8002655c:	01f050ef          	jal	8002bd7a <putchar>
    80026560:	4529                	li	a0,10
    80026562:	019050ef          	jal	8002bd7a <putchar>
    80026566:	00032797          	auipc	a5,0x32
    8002656a:	aab7c783          	lbu	a5,-1365(a5) # 80058011 <excpt+0x1>
    8002656e:	4401                	li	s0,0
    80026570:	c789                	beqz	a5,8002657a <stateen_ENVCFG_test_4+0xfc>
    80026572:	6480                	ld	s0,8(s1)
    80026574:	1429                	addi	s0,s0,-22
    80026576:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    8002657a:	4509                	li	a0,2
    8002657c:	98dda0ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80026580:	88dda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026584:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026588:	ac7da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    8002658c:	08200593          	li	a1,130
    80026590:	00014617          	auipc	a2,0x14
    80026594:	c3060613          	addi	a2,a2,-976 # 8003a1c0 <__func__.0+0xa4d0>
    80026598:	0000a517          	auipc	a0,0xa
    8002659c:	a5850513          	addi	a0,a0,-1448 # 8002fff0 <__func__.0+0x300>
    800265a0:	2ed060ef          	jal	8002d08c <printf>
    800265a4:	00032797          	auipc	a5,0x32
    800265a8:	a6d7c783          	lbu	a5,-1427(a5) # 80058011 <excpt+0x1>
    800265ac:	0000a597          	auipc	a1,0xa
    800265b0:	a1c58593          	addi	a1,a1,-1508 # 8002ffc8 <__func__.0+0x2d8>
    800265b4:	cf89                	beqz	a5,800265ce <stateen_ENVCFG_test_4+0x150>
    800265b6:	6498                	ld	a4,8(s1)
    800265b8:	47d9                	li	a5,22
    800265ba:	0000a597          	auipc	a1,0xa
    800265be:	9fe58593          	addi	a1,a1,-1538 # 8002ffb8 <__func__.0+0x2c8>
    800265c2:	00f70663          	beq	a4,a5,800265ce <stateen_ENVCFG_test_4+0x150>
    800265c6:	0000a597          	auipc	a1,0xa
    800265ca:	a0258593          	addi	a1,a1,-1534 # 8002ffc8 <__func__.0+0x2d8>
    800265ce:	0000a517          	auipc	a0,0xa
    800265d2:	a3a50513          	addi	a0,a0,-1478 # 80030008 <__func__.0+0x318>
    800265d6:	2b7060ef          	jal	8002d08c <printf>
    800265da:	00032797          	auipc	a5,0x32
    800265de:	a377c783          	lbu	a5,-1481(a5) # 80058011 <excpt+0x1>
    800265e2:	c789                	beqz	a5,800265ec <stateen_ENVCFG_test_4+0x16e>
    800265e4:	6498                	ld	a4,8(s1)
    800265e6:	47d9                	li	a5,22
    800265e8:	00f70c63          	beq	a4,a5,80026600 <stateen_ENVCFG_test_4+0x182>
    800265ec:	0000a517          	auipc	a0,0xa
    800265f0:	a2450513          	addi	a0,a0,-1500 # 80030010 <__func__.0+0x320>
    800265f4:	299060ef          	jal	8002d08c <printf>
    800265f8:	02900513          	li	a0,41
    800265fc:	77e050ef          	jal	8002bd7a <putchar>
    80026600:	4529                	li	a0,10
    80026602:	778050ef          	jal	8002bd7a <putchar>
    80026606:	c015                	beqz	s0,8002662a <stateen_ENVCFG_test_4+0x1ac>
    80026608:	00032417          	auipc	s0,0x32
    8002660c:	a0944403          	lbu	s0,-1527(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_VRTI
    ); 



    TEST_END();
    80026610:	0000a597          	auipc	a1,0xa
    80026614:	9b858593          	addi	a1,a1,-1608 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026618:	cc11                	beqz	s0,80026634 <stateen_ENVCFG_test_4+0x1b6>
    8002661a:	6498                	ld	a4,8(s1)
    8002661c:	47d9                	li	a5,22
    TEST_END();
    8002661e:	0000a597          	auipc	a1,0xa
    80026622:	99a58593          	addi	a1,a1,-1638 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026626:	00f70763          	beq	a4,a5,80026634 <stateen_ENVCFG_test_4+0x1b6>
    8002662a:	4401                	li	s0,0
    TEST_END();
    8002662c:	0000a597          	auipc	a1,0xa
    80026630:	99c58593          	addi	a1,a1,-1636 # 8002ffc8 <__func__.0+0x2d8>
    80026634:	0000a517          	auipc	a0,0xa
    80026638:	a3c50513          	addi	a0,a0,-1476 # 80030070 <__func__.0+0x380>
    8002663c:	251060ef          	jal	8002d08c <printf>
    80026640:	4511                	li	a0,4
    80026642:	8c7da0ef          	jal	80000f08 <goto_priv>
    80026646:	a8cdb0ef          	jal	800018d2 <reset_state>

}
    8002664a:	60e2                	ld	ra,24(sp)
    8002664c:	8522                	mv	a0,s0
    8002664e:	6442                	ld	s0,16(sp)
    80026650:	64a2                	ld	s1,8(sp)
    80026652:	6105                	addi	sp,sp,32
    80026654:	8082                	ret

0000000080026656 <stateen_ENVCFG_test_5>:

bool stateen_ENVCFG_test_5(){
    80026656:	1101                	addi	sp,sp,-32

    //当mstateen.ENVCFG=0,hs mode 不可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    80026658:	00009597          	auipc	a1,0x9
    8002665c:	29858593          	addi	a1,a1,664 # 8002f8f0 <__func__.10>
    80026660:	0000a517          	auipc	a0,0xa
    80026664:	97850513          	addi	a0,a0,-1672 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_ENVCFG_test_5(){
    80026668:	ec06                	sd	ra,24(sp)
    8002666a:	e822                	sd	s0,16(sp)
    8002666c:	e426                	sd	s1,8(sp)
    TEST_START();
    8002666e:	21f060ef          	jal	8002d08c <printf>
    80026672:	4529                	li	a0,10
    80026674:	706050ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80026678:	4511                	li	a0,4
    8002667a:	88fda0ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    8002667e:	4785                	li	a5,1
    80026680:	17fa                	slli	a5,a5,0x3e
    80026682:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    80026686:	450d                	li	a0,3
    80026688:	881da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002668c:	f80da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026690:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026694:	9bbda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss henvcfg register cause to illegal except when mstateen.envcfg=0",
    80026698:	08200593          	li	a1,130
    8002669c:	00014617          	auipc	a2,0x14
    800266a0:	b7c60613          	addi	a2,a2,-1156 # 8003a218 <__func__.0+0xa528>
    800266a4:	0000a517          	auipc	a0,0xa
    800266a8:	94c50513          	addi	a0,a0,-1716 # 8002fff0 <__func__.0+0x300>
    800266ac:	1e1060ef          	jal	8002d08c <printf>
    800266b0:	00032797          	auipc	a5,0x32
    800266b4:	9617c783          	lbu	a5,-1695(a5) # 80058011 <excpt+0x1>
    800266b8:	00032497          	auipc	s1,0x32
    800266bc:	95848493          	addi	s1,s1,-1704 # 80058010 <excpt>
    800266c0:	0000a597          	auipc	a1,0xa
    800266c4:	90858593          	addi	a1,a1,-1784 # 8002ffc8 <__func__.0+0x2d8>
    800266c8:	cf89                	beqz	a5,800266e2 <stateen_ENVCFG_test_5+0x8c>
    800266ca:	6498                	ld	a4,8(s1)
    800266cc:	4789                	li	a5,2
    800266ce:	0000a597          	auipc	a1,0xa
    800266d2:	8ea58593          	addi	a1,a1,-1814 # 8002ffb8 <__func__.0+0x2c8>
    800266d6:	00f70663          	beq	a4,a5,800266e2 <stateen_ENVCFG_test_5+0x8c>
    800266da:	0000a597          	auipc	a1,0xa
    800266de:	8ee58593          	addi	a1,a1,-1810 # 8002ffc8 <__func__.0+0x2d8>
    800266e2:	0000a517          	auipc	a0,0xa
    800266e6:	92650513          	addi	a0,a0,-1754 # 80030008 <__func__.0+0x318>
    800266ea:	1a3060ef          	jal	8002d08c <printf>
    800266ee:	00032797          	auipc	a5,0x32
    800266f2:	9237c783          	lbu	a5,-1757(a5) # 80058011 <excpt+0x1>
    800266f6:	c789                	beqz	a5,80026700 <stateen_ENVCFG_test_5+0xaa>
    800266f8:	6498                	ld	a4,8(s1)
    800266fa:	4789                	li	a5,2
    800266fc:	00f70c63          	beq	a4,a5,80026714 <stateen_ENVCFG_test_5+0xbe>
    80026700:	0000a517          	auipc	a0,0xa
    80026704:	91050513          	addi	a0,a0,-1776 # 80030010 <__func__.0+0x320>
    80026708:	185060ef          	jal	8002d08c <printf>
    8002670c:	02900513          	li	a0,41
    80026710:	66a050ef          	jal	8002bd7a <putchar>
    80026714:	4529                	li	a0,10
    80026716:	664050ef          	jal	8002bd7a <putchar>
    8002671a:	00032797          	auipc	a5,0x32
    8002671e:	8f77c783          	lbu	a5,-1801(a5) # 80058011 <excpt+0x1>
    80026722:	4401                	li	s0,0
    80026724:	c789                	beqz	a5,8002672e <stateen_ENVCFG_test_5+0xd8>
    80026726:	6480                	ld	s0,8(s1)
    80026728:	1479                	addi	s0,s0,-2
    8002672a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    8002672e:	450d                	li	a0,3
    80026730:	fd8da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026734:	ed8da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026738:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    8002673c:	913da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80026740:	08200593          	li	a1,130
    80026744:	00014617          	auipc	a2,0x14
    80026748:	b2460613          	addi	a2,a2,-1244 # 8003a268 <__func__.0+0xa578>
    8002674c:	0000a517          	auipc	a0,0xa
    80026750:	8a450513          	addi	a0,a0,-1884 # 8002fff0 <__func__.0+0x300>
    80026754:	139060ef          	jal	8002d08c <printf>
    80026758:	00032797          	auipc	a5,0x32
    8002675c:	8b97c783          	lbu	a5,-1863(a5) # 80058011 <excpt+0x1>
    80026760:	0000a597          	auipc	a1,0xa
    80026764:	86858593          	addi	a1,a1,-1944 # 8002ffc8 <__func__.0+0x2d8>
    80026768:	cf89                	beqz	a5,80026782 <stateen_ENVCFG_test_5+0x12c>
    8002676a:	6498                	ld	a4,8(s1)
    8002676c:	4789                	li	a5,2
    8002676e:	0000a597          	auipc	a1,0xa
    80026772:	84a58593          	addi	a1,a1,-1974 # 8002ffb8 <__func__.0+0x2c8>
    80026776:	00f70663          	beq	a4,a5,80026782 <stateen_ENVCFG_test_5+0x12c>
    8002677a:	0000a597          	auipc	a1,0xa
    8002677e:	84e58593          	addi	a1,a1,-1970 # 8002ffc8 <__func__.0+0x2d8>
    80026782:	0000a517          	auipc	a0,0xa
    80026786:	88650513          	addi	a0,a0,-1914 # 80030008 <__func__.0+0x318>
    8002678a:	103060ef          	jal	8002d08c <printf>
    8002678e:	00032797          	auipc	a5,0x32
    80026792:	8837c783          	lbu	a5,-1917(a5) # 80058011 <excpt+0x1>
    80026796:	c789                	beqz	a5,800267a0 <stateen_ENVCFG_test_5+0x14a>
    80026798:	6498                	ld	a4,8(s1)
    8002679a:	4789                	li	a5,2
    8002679c:	00f70c63          	beq	a4,a5,800267b4 <stateen_ENVCFG_test_5+0x15e>
    800267a0:	0000a517          	auipc	a0,0xa
    800267a4:	87050513          	addi	a0,a0,-1936 # 80030010 <__func__.0+0x320>
    800267a8:	0e5060ef          	jal	8002d08c <printf>
    800267ac:	02900513          	li	a0,41
    800267b0:	5ca050ef          	jal	8002bd7a <putchar>
    800267b4:	4529                	li	a0,10
    800267b6:	5c4050ef          	jal	8002bd7a <putchar>
    800267ba:	c015                	beqz	s0,800267de <stateen_ENVCFG_test_5+0x188>
    800267bc:	00032417          	auipc	s0,0x32
    800267c0:	85544403          	lbu	s0,-1963(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_ILI
    ); 



    TEST_END();
    800267c4:	0000a597          	auipc	a1,0xa
    800267c8:	80458593          	addi	a1,a1,-2044 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    800267cc:	cc11                	beqz	s0,800267e8 <stateen_ENVCFG_test_5+0x192>
    800267ce:	6498                	ld	a4,8(s1)
    800267d0:	4789                	li	a5,2
    TEST_END();
    800267d2:	00009597          	auipc	a1,0x9
    800267d6:	7e658593          	addi	a1,a1,2022 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    800267da:	00f70763          	beq	a4,a5,800267e8 <stateen_ENVCFG_test_5+0x192>
    800267de:	4401                	li	s0,0
    TEST_END();
    800267e0:	00009597          	auipc	a1,0x9
    800267e4:	7e858593          	addi	a1,a1,2024 # 8002ffc8 <__func__.0+0x2d8>
    800267e8:	0000a517          	auipc	a0,0xa
    800267ec:	88850513          	addi	a0,a0,-1912 # 80030070 <__func__.0+0x380>
    800267f0:	09d060ef          	jal	8002d08c <printf>
    800267f4:	4511                	li	a0,4
    800267f6:	f12da0ef          	jal	80000f08 <goto_priv>
    800267fa:	8d8db0ef          	jal	800018d2 <reset_state>

}
    800267fe:	60e2                	ld	ra,24(sp)
    80026800:	8522                	mv	a0,s0
    80026802:	6442                	ld	s0,16(sp)
    80026804:	64a2                	ld	s1,8(sp)
    80026806:	6105                	addi	sp,sp,32
    80026808:	8082                	ret

000000008002680a <stateen_ENVCFG_test_6>:


bool stateen_ENVCFG_test_6(){
    8002680a:	1101                	addi	sp,sp,-32

    TEST_START();
    8002680c:	00009597          	auipc	a1,0x9
    80026810:	0fc58593          	addi	a1,a1,252 # 8002f908 <__func__.9>
    80026814:	00009517          	auipc	a0,0x9
    80026818:	7c450513          	addi	a0,a0,1988 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_ENVCFG_test_6(){
    8002681c:	ec06                	sd	ra,24(sp)
    8002681e:	e822                	sd	s0,16(sp)
    80026820:	e426                	sd	s1,8(sp)
    TEST_START();
    80026822:	06b060ef          	jal	8002d08c <printf>
    80026826:	4529                	li	a0,10
    80026828:	552050ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    8002682c:	4511                	li	a0,4
    8002682e:	edada0ef          	jal	80000f08 <goto_priv>
    //当mstateen.ENVCFG=1,v=0时,可访问Henvcfg和Senvcfg寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026832:	4785                	li	a5,1
    80026834:	17fa                	slli	a5,a5,0x3e
    80026836:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    8002683a:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    8002683e:	450d                	li	a0,3
    80026840:	ec8da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026844:	dc8da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026848:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    8002684c:	803da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss henvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026850:	08200593          	li	a1,130
    80026854:	00014617          	auipc	a2,0x14
    80026858:	a6460613          	addi	a2,a2,-1436 # 8003a2b8 <__func__.0+0xa5c8>
    8002685c:	00009517          	auipc	a0,0x9
    80026860:	79450513          	addi	a0,a0,1940 # 8002fff0 <__func__.0+0x300>
    80026864:	029060ef          	jal	8002d08c <printf>
    80026868:	00031797          	auipc	a5,0x31
    8002686c:	7a97c783          	lbu	a5,1961(a5) # 80058011 <excpt+0x1>
    80026870:	00009597          	auipc	a1,0x9
    80026874:	74858593          	addi	a1,a1,1864 # 8002ffb8 <__func__.0+0x2c8>
    80026878:	c789                	beqz	a5,80026882 <stateen_ENVCFG_test_6+0x78>
    8002687a:	00009597          	auipc	a1,0x9
    8002687e:	74e58593          	addi	a1,a1,1870 # 8002ffc8 <__func__.0+0x2d8>
    80026882:	00009517          	auipc	a0,0x9
    80026886:	78650513          	addi	a0,a0,1926 # 80030008 <__func__.0+0x318>
    8002688a:	003060ef          	jal	8002d08c <printf>
    8002688e:	00031797          	auipc	a5,0x31
    80026892:	7837c783          	lbu	a5,1923(a5) # 80058011 <excpt+0x1>
    80026896:	2c079e63          	bnez	a5,80026b72 <stateen_ENVCFG_test_6+0x368>
    8002689a:	4529                	li	a0,10
    8002689c:	4de050ef          	jal	8002bd7a <putchar>
    800268a0:	00031497          	auipc	s1,0x31
    800268a4:	7714c483          	lbu	s1,1905(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SENVCFG);
    800268a8:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    800268ac:	fa2da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss senvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    800268b0:	08200593          	li	a1,130
    800268b4:	00014617          	auipc	a2,0x14
    800268b8:	a5c60613          	addi	a2,a2,-1444 # 8003a310 <__func__.0+0xa620>
    800268bc:	00009517          	auipc	a0,0x9
    800268c0:	73450513          	addi	a0,a0,1844 # 8002fff0 <__func__.0+0x300>
    800268c4:	7c8060ef          	jal	8002d08c <printf>
    800268c8:	00031797          	auipc	a5,0x31
    800268cc:	7497c783          	lbu	a5,1865(a5) # 80058011 <excpt+0x1>
    800268d0:	00009597          	auipc	a1,0x9
    800268d4:	6f858593          	addi	a1,a1,1784 # 8002ffc8 <__func__.0+0x2d8>
    800268d8:	e789                	bnez	a5,800268e2 <stateen_ENVCFG_test_6+0xd8>
    800268da:	00009597          	auipc	a1,0x9
    800268de:	6de58593          	addi	a1,a1,1758 # 8002ffb8 <__func__.0+0x2c8>
    800268e2:	00009517          	auipc	a0,0x9
    800268e6:	72650513          	addi	a0,a0,1830 # 80030008 <__func__.0+0x318>
    800268ea:	7a2060ef          	jal	8002d08c <printf>
    800268ee:	00031797          	auipc	a5,0x31
    800268f2:	7237c783          	lbu	a5,1827(a5) # 80058011 <excpt+0x1>
    800268f6:	26079363          	bnez	a5,80026b5c <stateen_ENVCFG_test_6+0x352>
    800268fa:	4529                	li	a0,10
    800268fc:	47e050ef          	jal	8002bd7a <putchar>
    80026900:	4401                	li	s0,0
    80026902:	e499                	bnez	s1,80026910 <stateen_ENVCFG_test_6+0x106>
    80026904:	00031417          	auipc	s0,0x31
    80026908:	70d44403          	lbu	s0,1805(s0) # 80058011 <excpt+0x1>
    8002690c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80026910:	4505                	li	a0,1
    80026912:	df6da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026916:	cf6da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    8002691a:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    8002691e:	f30da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026922:	08200593          	li	a1,130
    80026926:	00014617          	auipc	a2,0x14
    8002692a:	a4260613          	addi	a2,a2,-1470 # 8003a368 <__func__.0+0xa678>
    8002692e:	00009517          	auipc	a0,0x9
    80026932:	6c250513          	addi	a0,a0,1730 # 8002fff0 <__func__.0+0x300>
    80026936:	756060ef          	jal	8002d08c <printf>
    8002693a:	00031797          	auipc	a5,0x31
    8002693e:	6d77c783          	lbu	a5,1751(a5) # 80058011 <excpt+0x1>
    80026942:	00009597          	auipc	a1,0x9
    80026946:	68658593          	addi	a1,a1,1670 # 8002ffc8 <__func__.0+0x2d8>
    8002694a:	e789                	bnez	a5,80026954 <stateen_ENVCFG_test_6+0x14a>
    8002694c:	00009597          	auipc	a1,0x9
    80026950:	66c58593          	addi	a1,a1,1644 # 8002ffb8 <__func__.0+0x2c8>
    80026954:	00009517          	auipc	a0,0x9
    80026958:	6b450513          	addi	a0,a0,1716 # 80030008 <__func__.0+0x318>
    8002695c:	730060ef          	jal	8002d08c <printf>
    80026960:	00031797          	auipc	a5,0x31
    80026964:	6b17c783          	lbu	a5,1713(a5) # 80058011 <excpt+0x1>
    80026968:	1c079f63          	bnez	a5,80026b46 <stateen_ENVCFG_test_6+0x33c>
    8002696c:	4529                	li	a0,10
    8002696e:	40c050ef          	jal	8002bd7a <putchar>
    80026972:	c419                	beqz	s0,80026980 <stateen_ENVCFG_test_6+0x176>
    80026974:	00031417          	auipc	s0,0x31
    80026978:	69d44403          	lbu	s0,1693(s0) # 80058011 <excpt+0x1>
    8002697c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80026980:	4505                	li	a0,1
    80026982:	d86da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026986:	c86da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    8002698a:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    8002698e:	ec0da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026992:	08200593          	li	a1,130
    80026996:	00014617          	auipc	a2,0x14
    8002699a:	a2a60613          	addi	a2,a2,-1494 # 8003a3c0 <__func__.0+0xa6d0>
    8002699e:	00009517          	auipc	a0,0x9
    800269a2:	65250513          	addi	a0,a0,1618 # 8002fff0 <__func__.0+0x300>
    800269a6:	6e6060ef          	jal	8002d08c <printf>
    800269aa:	00031797          	auipc	a5,0x31
    800269ae:	6677c783          	lbu	a5,1639(a5) # 80058011 <excpt+0x1>
    800269b2:	00009597          	auipc	a1,0x9
    800269b6:	61658593          	addi	a1,a1,1558 # 8002ffc8 <__func__.0+0x2d8>
    800269ba:	e789                	bnez	a5,800269c4 <stateen_ENVCFG_test_6+0x1ba>
    800269bc:	00009597          	auipc	a1,0x9
    800269c0:	5fc58593          	addi	a1,a1,1532 # 8002ffb8 <__func__.0+0x2c8>
    800269c4:	00009517          	auipc	a0,0x9
    800269c8:	64450513          	addi	a0,a0,1604 # 80030008 <__func__.0+0x318>
    800269cc:	6c0060ef          	jal	8002d08c <printf>
    800269d0:	00031797          	auipc	a5,0x31
    800269d4:	6417c783          	lbu	a5,1601(a5) # 80058011 <excpt+0x1>
    800269d8:	14079c63          	bnez	a5,80026b30 <stateen_ENVCFG_test_6+0x326>
    800269dc:	4529                	li	a0,10
    800269de:	39c050ef          	jal	8002bd7a <putchar>
    800269e2:	c419                	beqz	s0,800269f0 <stateen_ENVCFG_test_6+0x1e6>
    800269e4:	00031417          	auipc	s0,0x31
    800269e8:	62d44403          	lbu	s0,1581(s0) # 80058011 <excpt+0x1>
    800269ec:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    800269f0:	4511                	li	a0,4
    800269f2:	d16da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800269f6:	c16da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    800269fa:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800269fe:	e50da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026a02:	08200593          	li	a1,130
    80026a06:	00014617          	auipc	a2,0x14
    80026a0a:	a1260613          	addi	a2,a2,-1518 # 8003a418 <__func__.0+0xa728>
    80026a0e:	00009517          	auipc	a0,0x9
    80026a12:	5e250513          	addi	a0,a0,1506 # 8002fff0 <__func__.0+0x300>
    80026a16:	676060ef          	jal	8002d08c <printf>
    80026a1a:	00031797          	auipc	a5,0x31
    80026a1e:	5f77c783          	lbu	a5,1527(a5) # 80058011 <excpt+0x1>
    80026a22:	00009597          	auipc	a1,0x9
    80026a26:	5a658593          	addi	a1,a1,1446 # 8002ffc8 <__func__.0+0x2d8>
    80026a2a:	e789                	bnez	a5,80026a34 <stateen_ENVCFG_test_6+0x22a>
    80026a2c:	00009597          	auipc	a1,0x9
    80026a30:	58c58593          	addi	a1,a1,1420 # 8002ffb8 <__func__.0+0x2c8>
    80026a34:	00009517          	auipc	a0,0x9
    80026a38:	5d450513          	addi	a0,a0,1492 # 80030008 <__func__.0+0x318>
    80026a3c:	650060ef          	jal	8002d08c <printf>
    80026a40:	00031797          	auipc	a5,0x31
    80026a44:	5d17c783          	lbu	a5,1489(a5) # 80058011 <excpt+0x1>
    80026a48:	0c079963          	bnez	a5,80026b1a <stateen_ENVCFG_test_6+0x310>
    80026a4c:	4529                	li	a0,10
    80026a4e:	32c050ef          	jal	8002bd7a <putchar>
    80026a52:	c419                	beqz	s0,80026a60 <stateen_ENVCFG_test_6+0x256>
    80026a54:	00031417          	auipc	s0,0x31
    80026a58:	5bd44403          	lbu	s0,1469(s0) # 80058011 <excpt+0x1>
    80026a5c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80026a60:	4511                	li	a0,4
    80026a62:	ca6da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026a66:	ba6da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026a6a:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026a6e:	de0da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026a72:	08200593          	li	a1,130
    80026a76:	00014617          	auipc	a2,0x14
    80026a7a:	9fa60613          	addi	a2,a2,-1542 # 8003a470 <__func__.0+0xa780>
    80026a7e:	00009517          	auipc	a0,0x9
    80026a82:	57250513          	addi	a0,a0,1394 # 8002fff0 <__func__.0+0x300>
    80026a86:	606060ef          	jal	8002d08c <printf>
    80026a8a:	00031797          	auipc	a5,0x31
    80026a8e:	5877c783          	lbu	a5,1415(a5) # 80058011 <excpt+0x1>
    80026a92:	00009597          	auipc	a1,0x9
    80026a96:	53658593          	addi	a1,a1,1334 # 8002ffc8 <__func__.0+0x2d8>
    80026a9a:	e789                	bnez	a5,80026aa4 <stateen_ENVCFG_test_6+0x29a>
    80026a9c:	00009597          	auipc	a1,0x9
    80026aa0:	51c58593          	addi	a1,a1,1308 # 8002ffb8 <__func__.0+0x2c8>
    80026aa4:	00009517          	auipc	a0,0x9
    80026aa8:	56450513          	addi	a0,a0,1380 # 80030008 <__func__.0+0x318>
    80026aac:	5e0060ef          	jal	8002d08c <printf>
    80026ab0:	00031797          	auipc	a5,0x31
    80026ab4:	5617c783          	lbu	a5,1377(a5) # 80058011 <excpt+0x1>
    80026ab8:	e7b1                	bnez	a5,80026b04 <stateen_ENVCFG_test_6+0x2fa>
    80026aba:	4529                	li	a0,10
    80026abc:	2be050ef          	jal	8002bd7a <putchar>
    80026ac0:	c411                	beqz	s0,80026acc <stateen_ENVCFG_test_6+0x2c2>
    80026ac2:	00031797          	auipc	a5,0x31
    80026ac6:	54f7c783          	lbu	a5,1359(a5) # 80058011 <excpt+0x1>
    80026aca:	c79d                	beqz	a5,80026af8 <stateen_ENVCFG_test_6+0x2ee>
    80026acc:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    80026ace:	00009597          	auipc	a1,0x9
    80026ad2:	4fa58593          	addi	a1,a1,1274 # 8002ffc8 <__func__.0+0x2d8>
    80026ad6:	00009517          	auipc	a0,0x9
    80026ada:	59a50513          	addi	a0,a0,1434 # 80030070 <__func__.0+0x380>
    80026ade:	5ae060ef          	jal	8002d08c <printf>
    80026ae2:	4511                	li	a0,4
    80026ae4:	c24da0ef          	jal	80000f08 <goto_priv>
    80026ae8:	debda0ef          	jal	800018d2 <reset_state>

}
    80026aec:	60e2                	ld	ra,24(sp)
    80026aee:	8522                	mv	a0,s0
    80026af0:	6442                	ld	s0,16(sp)
    80026af2:	64a2                	ld	s1,8(sp)
    80026af4:	6105                	addi	sp,sp,32
    80026af6:	8082                	ret
    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026af8:	4405                	li	s0,1
    TEST_END();
    80026afa:	00009597          	auipc	a1,0x9
    80026afe:	4be58593          	addi	a1,a1,1214 # 8002ffb8 <__func__.0+0x2c8>
    80026b02:	bfd1                	j	80026ad6 <stateen_ENVCFG_test_6+0x2cc>
    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026b04:	00009517          	auipc	a0,0x9
    80026b08:	50c50513          	addi	a0,a0,1292 # 80030010 <__func__.0+0x320>
    80026b0c:	580060ef          	jal	8002d08c <printf>
    80026b10:	02900513          	li	a0,41
    80026b14:	266050ef          	jal	8002bd7a <putchar>
    80026b18:	b74d                	j	80026aba <stateen_ENVCFG_test_6+0x2b0>
    TEST_ASSERT("m mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026b1a:	00009517          	auipc	a0,0x9
    80026b1e:	4f650513          	addi	a0,a0,1270 # 80030010 <__func__.0+0x320>
    80026b22:	56a060ef          	jal	8002d08c <printf>
    80026b26:	02900513          	li	a0,41
    80026b2a:	250050ef          	jal	8002bd7a <putchar>
    80026b2e:	bf39                	j	80026a4c <stateen_ENVCFG_test_6+0x242>
    TEST_ASSERT("hu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026b30:	00009517          	auipc	a0,0x9
    80026b34:	4e050513          	addi	a0,a0,1248 # 80030010 <__func__.0+0x320>
    80026b38:	554060ef          	jal	8002d08c <printf>
    80026b3c:	02900513          	li	a0,41
    80026b40:	23a050ef          	jal	8002bd7a <putchar>
    80026b44:	bd61                	j	800269dc <stateen_ENVCFG_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026b46:	00009517          	auipc	a0,0x9
    80026b4a:	4ca50513          	addi	a0,a0,1226 # 80030010 <__func__.0+0x320>
    80026b4e:	53e060ef          	jal	8002d08c <printf>
    80026b52:	02900513          	li	a0,41
    80026b56:	224050ef          	jal	8002bd7a <putchar>
    80026b5a:	bd09                	j	8002696c <stateen_ENVCFG_test_6+0x162>
    TEST_ASSERT("hs mode accesss senvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026b5c:	00009517          	auipc	a0,0x9
    80026b60:	4b450513          	addi	a0,a0,1204 # 80030010 <__func__.0+0x320>
    80026b64:	528060ef          	jal	8002d08c <printf>
    80026b68:	02900513          	li	a0,41
    80026b6c:	20e050ef          	jal	8002bd7a <putchar>
    80026b70:	b369                	j	800268fa <stateen_ENVCFG_test_6+0xf0>
    TEST_ASSERT("hs mode accesss henvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026b72:	00009517          	auipc	a0,0x9
    80026b76:	49e50513          	addi	a0,a0,1182 # 80030010 <__func__.0+0x320>
    80026b7a:	512060ef          	jal	8002d08c <printf>
    80026b7e:	02900513          	li	a0,41
    80026b82:	1f8050ef          	jal	8002bd7a <putchar>
    80026b86:	bb11                	j	8002689a <stateen_ENVCFG_test_6+0x90>

0000000080026b88 <stateen_ENVCFG_test_7>:


bool stateen_ENVCFG_test_7(){
    80026b88:	1101                	addi	sp,sp,-32

    TEST_START();
    80026b8a:	00009597          	auipc	a1,0x9
    80026b8e:	d9658593          	addi	a1,a1,-618 # 8002f920 <__func__.8>
    80026b92:	00009517          	auipc	a0,0x9
    80026b96:	44650513          	addi	a0,a0,1094 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_ENVCFG_test_7(){
    80026b9a:	ec06                	sd	ra,24(sp)
    80026b9c:	e822                	sd	s0,16(sp)
    80026b9e:	e426                	sd	s1,8(sp)
    TEST_START();
    80026ba0:	4ec060ef          	jal	8002d08c <printf>
    80026ba4:	4529                	li	a0,10
    80026ba6:	1d4050ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80026baa:	4511                	li	a0,4
    80026bac:	b5cda0ef          	jal	80000f08 <goto_priv>
    //当mstateen.ENVCFG=1 hstateen.ENVCFG=1,v=1 时可访问Henvcfg和Senvcfg寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026bb0:	4785                	li	a5,1
    80026bb2:	17fa                	slli	a5,a5,0x3e
    80026bb4:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    80026bb8:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    80026bbc:	4509                	li	a0,2
    80026bbe:	b4ada0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026bc2:	a4ada0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026bc6:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026bca:	c84da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026bce:	08200593          	li	a1,130
    80026bd2:	00014617          	auipc	a2,0x14
    80026bd6:	8f660613          	addi	a2,a2,-1802 # 8003a4c8 <__func__.0+0xa7d8>
    80026bda:	00009517          	auipc	a0,0x9
    80026bde:	41650513          	addi	a0,a0,1046 # 8002fff0 <__func__.0+0x300>
    80026be2:	4aa060ef          	jal	8002d08c <printf>
    80026be6:	00031797          	auipc	a5,0x31
    80026bea:	42b7c783          	lbu	a5,1067(a5) # 80058011 <excpt+0x1>
    80026bee:	00009597          	auipc	a1,0x9
    80026bf2:	3ca58593          	addi	a1,a1,970 # 8002ffb8 <__func__.0+0x2c8>
    80026bf6:	c789                	beqz	a5,80026c00 <stateen_ENVCFG_test_7+0x78>
    80026bf8:	00009597          	auipc	a1,0x9
    80026bfc:	3d058593          	addi	a1,a1,976 # 8002ffc8 <__func__.0+0x2d8>
    80026c00:	00009517          	auipc	a0,0x9
    80026c04:	40850513          	addi	a0,a0,1032 # 80030008 <__func__.0+0x318>
    80026c08:	484060ef          	jal	8002d08c <printf>
    80026c0c:	00031797          	auipc	a5,0x31
    80026c10:	4057c783          	lbu	a5,1029(a5) # 80058011 <excpt+0x1>
    80026c14:	1c079d63          	bnez	a5,80026dee <stateen_ENVCFG_test_7+0x266>
    80026c18:	4529                	li	a0,10
    80026c1a:	160050ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80026c1e:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026c20:	00031497          	auipc	s1,0x31
    80026c24:	3f14c483          	lbu	s1,1009(s1) # 80058011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80026c28:	ae0da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026c2c:	9e0da0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026c30:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026c34:	c1ada0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026c38:	08200593          	li	a1,130
    80026c3c:	00014617          	auipc	a2,0x14
    80026c40:	8e460613          	addi	a2,a2,-1820 # 8003a520 <__func__.0+0xa830>
    80026c44:	00009517          	auipc	a0,0x9
    80026c48:	3ac50513          	addi	a0,a0,940 # 8002fff0 <__func__.0+0x300>
    80026c4c:	440060ef          	jal	8002d08c <printf>
    80026c50:	00031797          	auipc	a5,0x31
    80026c54:	3c17c783          	lbu	a5,961(a5) # 80058011 <excpt+0x1>
    80026c58:	00009597          	auipc	a1,0x9
    80026c5c:	37058593          	addi	a1,a1,880 # 8002ffc8 <__func__.0+0x2d8>
    80026c60:	e789                	bnez	a5,80026c6a <stateen_ENVCFG_test_7+0xe2>
    80026c62:	00009597          	auipc	a1,0x9
    80026c66:	35658593          	addi	a1,a1,854 # 8002ffb8 <__func__.0+0x2c8>
    80026c6a:	00009517          	auipc	a0,0x9
    80026c6e:	39e50513          	addi	a0,a0,926 # 80030008 <__func__.0+0x318>
    80026c72:	41a060ef          	jal	8002d08c <printf>
    80026c76:	00031797          	auipc	a5,0x31
    80026c7a:	39b7c783          	lbu	a5,923(a5) # 80058011 <excpt+0x1>
    80026c7e:	14079d63          	bnez	a5,80026dd8 <stateen_ENVCFG_test_7+0x250>
    80026c82:	4529                	li	a0,10
    80026c84:	0f6050ef          	jal	8002bd7a <putchar>
    80026c88:	4401                	li	s0,0
    80026c8a:	e499                	bnez	s1,80026c98 <stateen_ENVCFG_test_7+0x110>
    80026c8c:	00031417          	auipc	s0,0x31
    80026c90:	38544403          	lbu	s0,901(s0) # 80058011 <excpt+0x1>
    80026c94:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80026c98:	4501                	li	a0,0
    80026c9a:	a6eda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026c9e:	96eda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026ca2:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026ca6:	ba8da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026caa:	08200593          	li	a1,130
    80026cae:	00014617          	auipc	a2,0x14
    80026cb2:	8ca60613          	addi	a2,a2,-1846 # 8003a578 <__func__.0+0xa888>
    80026cb6:	00009517          	auipc	a0,0x9
    80026cba:	33a50513          	addi	a0,a0,826 # 8002fff0 <__func__.0+0x300>
    80026cbe:	3ce060ef          	jal	8002d08c <printf>
    80026cc2:	00031797          	auipc	a5,0x31
    80026cc6:	34f7c783          	lbu	a5,847(a5) # 80058011 <excpt+0x1>
    80026cca:	00009597          	auipc	a1,0x9
    80026cce:	2fe58593          	addi	a1,a1,766 # 8002ffc8 <__func__.0+0x2d8>
    80026cd2:	e789                	bnez	a5,80026cdc <stateen_ENVCFG_test_7+0x154>
    80026cd4:	00009597          	auipc	a1,0x9
    80026cd8:	2e458593          	addi	a1,a1,740 # 8002ffb8 <__func__.0+0x2c8>
    80026cdc:	00009517          	auipc	a0,0x9
    80026ce0:	32c50513          	addi	a0,a0,812 # 80030008 <__func__.0+0x318>
    80026ce4:	3a8060ef          	jal	8002d08c <printf>
    80026ce8:	00031797          	auipc	a5,0x31
    80026cec:	3297c783          	lbu	a5,809(a5) # 80058011 <excpt+0x1>
    80026cf0:	0c079963          	bnez	a5,80026dc2 <stateen_ENVCFG_test_7+0x23a>
    80026cf4:	4529                	li	a0,10
    80026cf6:	084050ef          	jal	8002bd7a <putchar>
    80026cfa:	c419                	beqz	s0,80026d08 <stateen_ENVCFG_test_7+0x180>
    80026cfc:	00031417          	auipc	s0,0x31
    80026d00:	31544403          	lbu	s0,789(s0) # 80058011 <excpt+0x1>
    80026d04:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80026d08:	4501                	li	a0,0
    80026d0a:	9feda0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026d0e:	8feda0ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026d12:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026d16:	b38da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026d1a:	08200593          	li	a1,130
    80026d1e:	00014617          	auipc	a2,0x14
    80026d22:	8b260613          	addi	a2,a2,-1870 # 8003a5d0 <__func__.0+0xa8e0>
    80026d26:	00009517          	auipc	a0,0x9
    80026d2a:	2ca50513          	addi	a0,a0,714 # 8002fff0 <__func__.0+0x300>
    80026d2e:	35e060ef          	jal	8002d08c <printf>
    80026d32:	00031797          	auipc	a5,0x31
    80026d36:	2df7c783          	lbu	a5,735(a5) # 80058011 <excpt+0x1>
    80026d3a:	00009597          	auipc	a1,0x9
    80026d3e:	28e58593          	addi	a1,a1,654 # 8002ffc8 <__func__.0+0x2d8>
    80026d42:	e789                	bnez	a5,80026d4c <stateen_ENVCFG_test_7+0x1c4>
    80026d44:	00009597          	auipc	a1,0x9
    80026d48:	27458593          	addi	a1,a1,628 # 8002ffb8 <__func__.0+0x2c8>
    80026d4c:	00009517          	auipc	a0,0x9
    80026d50:	2bc50513          	addi	a0,a0,700 # 80030008 <__func__.0+0x318>
    80026d54:	338060ef          	jal	8002d08c <printf>
    80026d58:	00031797          	auipc	a5,0x31
    80026d5c:	2b97c783          	lbu	a5,697(a5) # 80058011 <excpt+0x1>
    80026d60:	e7b1                	bnez	a5,80026dac <stateen_ENVCFG_test_7+0x224>
    80026d62:	4529                	li	a0,10
    80026d64:	016050ef          	jal	8002bd7a <putchar>
    80026d68:	c411                	beqz	s0,80026d74 <stateen_ENVCFG_test_7+0x1ec>
    80026d6a:	00031797          	auipc	a5,0x31
    80026d6e:	2a77c783          	lbu	a5,679(a5) # 80058011 <excpt+0x1>
    80026d72:	c79d                	beqz	a5,80026da0 <stateen_ENVCFG_test_7+0x218>
    80026d74:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80026d76:	00009597          	auipc	a1,0x9
    80026d7a:	25258593          	addi	a1,a1,594 # 8002ffc8 <__func__.0+0x2d8>
    80026d7e:	00009517          	auipc	a0,0x9
    80026d82:	2f250513          	addi	a0,a0,754 # 80030070 <__func__.0+0x380>
    80026d86:	306060ef          	jal	8002d08c <printf>
    80026d8a:	4511                	li	a0,4
    80026d8c:	97cda0ef          	jal	80000f08 <goto_priv>
    80026d90:	b43da0ef          	jal	800018d2 <reset_state>
}
    80026d94:	60e2                	ld	ra,24(sp)
    80026d96:	8522                	mv	a0,s0
    80026d98:	6442                	ld	s0,16(sp)
    80026d9a:	64a2                	ld	s1,8(sp)
    80026d9c:	6105                	addi	sp,sp,32
    80026d9e:	8082                	ret
    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026da0:	4405                	li	s0,1
    TEST_END();
    80026da2:	00009597          	auipc	a1,0x9
    80026da6:	21658593          	addi	a1,a1,534 # 8002ffb8 <__func__.0+0x2c8>
    80026daa:	bfd1                	j	80026d7e <stateen_ENVCFG_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026dac:	00009517          	auipc	a0,0x9
    80026db0:	26450513          	addi	a0,a0,612 # 80030010 <__func__.0+0x320>
    80026db4:	2d8060ef          	jal	8002d08c <printf>
    80026db8:	02900513          	li	a0,41
    80026dbc:	7bf040ef          	jal	8002bd7a <putchar>
    80026dc0:	b74d                	j	80026d62 <stateen_ENVCFG_test_7+0x1da>
    TEST_ASSERT("vu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026dc2:	00009517          	auipc	a0,0x9
    80026dc6:	24e50513          	addi	a0,a0,590 # 80030010 <__func__.0+0x320>
    80026dca:	2c2060ef          	jal	8002d08c <printf>
    80026dce:	02900513          	li	a0,41
    80026dd2:	7a9040ef          	jal	8002bd7a <putchar>
    80026dd6:	bf39                	j	80026cf4 <stateen_ENVCFG_test_7+0x16c>
    TEST_ASSERT("vs mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026dd8:	00009517          	auipc	a0,0x9
    80026ddc:	23850513          	addi	a0,a0,568 # 80030010 <__func__.0+0x320>
    80026de0:	2ac060ef          	jal	8002d08c <printf>
    80026de4:	02900513          	li	a0,41
    80026de8:	793040ef          	jal	8002bd7a <putchar>
    80026dec:	bd59                	j	80026c82 <stateen_ENVCFG_test_7+0xfa>
    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026dee:	00009517          	auipc	a0,0x9
    80026df2:	22250513          	addi	a0,a0,546 # 80030010 <__func__.0+0x320>
    80026df6:	296060ef          	jal	8002d08c <printf>
    80026dfa:	02900513          	li	a0,41
    80026dfe:	77d040ef          	jal	8002bd7a <putchar>
    80026e02:	bd19                	j	80026c18 <stateen_ENVCFG_test_7+0x90>

0000000080026e04 <stateen_SE0_test_1>:
// -------------




bool stateen_SE0_test_1(){
    80026e04:	1101                	addi	sp,sp,-32

    TEST_START();
    80026e06:	00009597          	auipc	a1,0x9
    80026e0a:	b3258593          	addi	a1,a1,-1230 # 8002f938 <__func__.7>
    80026e0e:	00009517          	auipc	a0,0x9
    80026e12:	1ca50513          	addi	a0,a0,458 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_SE0_test_1(){
    80026e16:	ec06                	sd	ra,24(sp)
    80026e18:	e822                	sd	s0,16(sp)
    80026e1a:	e426                	sd	s1,8(sp)
    TEST_START();
    80026e1c:	270060ef          	jal	8002d08c <printf>
    80026e20:	4529                	li	a0,10
    80026e22:	759040ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80026e26:	4511                	li	a0,4
    80026e28:	8e0da0ef          	jal	80000f08 <goto_priv>
    //当mstateen.SE0=0,hu mode 不可访问Hstateen0和Sstateen0寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80026e2c:	57fd                	li	a5,-1
    80026e2e:	17fe                	slli	a5,a5,0x3f
    80026e30:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80026e34:	4505                	li	a0,1
    80026e36:	8d2da0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026e3a:	fd3d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80026e3e:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80026e42:	a0cda0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss hstateen0 register cause to illegal except when mstateen.SE0=0",
    80026e46:	08200593          	li	a1,130
    80026e4a:	00013617          	auipc	a2,0x13
    80026e4e:	7de60613          	addi	a2,a2,2014 # 8003a628 <__func__.0+0xa938>
    80026e52:	00009517          	auipc	a0,0x9
    80026e56:	19e50513          	addi	a0,a0,414 # 8002fff0 <__func__.0+0x300>
    80026e5a:	232060ef          	jal	8002d08c <printf>
    80026e5e:	00031797          	auipc	a5,0x31
    80026e62:	1b37c783          	lbu	a5,435(a5) # 80058011 <excpt+0x1>
    80026e66:	00031497          	auipc	s1,0x31
    80026e6a:	1aa48493          	addi	s1,s1,426 # 80058010 <excpt>
    80026e6e:	00009597          	auipc	a1,0x9
    80026e72:	15a58593          	addi	a1,a1,346 # 8002ffc8 <__func__.0+0x2d8>
    80026e76:	cf89                	beqz	a5,80026e90 <stateen_SE0_test_1+0x8c>
    80026e78:	6498                	ld	a4,8(s1)
    80026e7a:	4789                	li	a5,2
    80026e7c:	00009597          	auipc	a1,0x9
    80026e80:	13c58593          	addi	a1,a1,316 # 8002ffb8 <__func__.0+0x2c8>
    80026e84:	00f70663          	beq	a4,a5,80026e90 <stateen_SE0_test_1+0x8c>
    80026e88:	00009597          	auipc	a1,0x9
    80026e8c:	14058593          	addi	a1,a1,320 # 8002ffc8 <__func__.0+0x2d8>
    80026e90:	00009517          	auipc	a0,0x9
    80026e94:	17850513          	addi	a0,a0,376 # 80030008 <__func__.0+0x318>
    80026e98:	1f4060ef          	jal	8002d08c <printf>
    80026e9c:	00031797          	auipc	a5,0x31
    80026ea0:	1757c783          	lbu	a5,373(a5) # 80058011 <excpt+0x1>
    80026ea4:	c789                	beqz	a5,80026eae <stateen_SE0_test_1+0xaa>
    80026ea6:	6498                	ld	a4,8(s1)
    80026ea8:	4789                	li	a5,2
    80026eaa:	00f70c63          	beq	a4,a5,80026ec2 <stateen_SE0_test_1+0xbe>
    80026eae:	00009517          	auipc	a0,0x9
    80026eb2:	16250513          	addi	a0,a0,354 # 80030010 <__func__.0+0x320>
    80026eb6:	1d6060ef          	jal	8002d08c <printf>
    80026eba:	02900513          	li	a0,41
    80026ebe:	6bd040ef          	jal	8002bd7a <putchar>
    80026ec2:	4529                	li	a0,10
    80026ec4:	6b7040ef          	jal	8002bd7a <putchar>
    80026ec8:	00031797          	auipc	a5,0x31
    80026ecc:	1497c783          	lbu	a5,329(a5) # 80058011 <excpt+0x1>
    80026ed0:	4401                	li	s0,0
    80026ed2:	c789                	beqz	a5,80026edc <stateen_SE0_test_1+0xd8>
    80026ed4:	6480                	ld	s0,8(s1)
    80026ed6:	1479                	addi	s0,s0,-2
    80026ed8:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80026edc:	4505                	li	a0,1
    80026ede:	82ada0ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026ee2:	f2bd90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80026ee6:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80026eea:	964da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026eee:	08200593          	li	a1,130
    80026ef2:	00013617          	auipc	a2,0x13
    80026ef6:	78660613          	addi	a2,a2,1926 # 8003a678 <__func__.0+0xa988>
    80026efa:	00009517          	auipc	a0,0x9
    80026efe:	0f650513          	addi	a0,a0,246 # 8002fff0 <__func__.0+0x300>
    80026f02:	18a060ef          	jal	8002d08c <printf>
    80026f06:	00031797          	auipc	a5,0x31
    80026f0a:	10b7c783          	lbu	a5,267(a5) # 80058011 <excpt+0x1>
    80026f0e:	00009597          	auipc	a1,0x9
    80026f12:	0ba58593          	addi	a1,a1,186 # 8002ffc8 <__func__.0+0x2d8>
    80026f16:	cf89                	beqz	a5,80026f30 <stateen_SE0_test_1+0x12c>
    80026f18:	6498                	ld	a4,8(s1)
    80026f1a:	4789                	li	a5,2
    80026f1c:	00009597          	auipc	a1,0x9
    80026f20:	09c58593          	addi	a1,a1,156 # 8002ffb8 <__func__.0+0x2c8>
    80026f24:	00f70663          	beq	a4,a5,80026f30 <stateen_SE0_test_1+0x12c>
    80026f28:	00009597          	auipc	a1,0x9
    80026f2c:	0a058593          	addi	a1,a1,160 # 8002ffc8 <__func__.0+0x2d8>
    80026f30:	00009517          	auipc	a0,0x9
    80026f34:	0d850513          	addi	a0,a0,216 # 80030008 <__func__.0+0x318>
    80026f38:	154060ef          	jal	8002d08c <printf>
    80026f3c:	00031797          	auipc	a5,0x31
    80026f40:	0d57c783          	lbu	a5,213(a5) # 80058011 <excpt+0x1>
    80026f44:	c789                	beqz	a5,80026f4e <stateen_SE0_test_1+0x14a>
    80026f46:	6498                	ld	a4,8(s1)
    80026f48:	4789                	li	a5,2
    80026f4a:	00f70c63          	beq	a4,a5,80026f62 <stateen_SE0_test_1+0x15e>
    80026f4e:	00009517          	auipc	a0,0x9
    80026f52:	0c250513          	addi	a0,a0,194 # 80030010 <__func__.0+0x320>
    80026f56:	136060ef          	jal	8002d08c <printf>
    80026f5a:	02900513          	li	a0,41
    80026f5e:	61d040ef          	jal	8002bd7a <putchar>
    80026f62:	4529                	li	a0,10
    80026f64:	617040ef          	jal	8002bd7a <putchar>
    80026f68:	c015                	beqz	s0,80026f8c <stateen_SE0_test_1+0x188>
    80026f6a:	00031417          	auipc	s0,0x31
    80026f6e:	0a744403          	lbu	s0,167(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80026f72:	00009597          	auipc	a1,0x9
    80026f76:	05658593          	addi	a1,a1,86 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026f7a:	cc11                	beqz	s0,80026f96 <stateen_SE0_test_1+0x192>
    80026f7c:	6498                	ld	a4,8(s1)
    80026f7e:	4789                	li	a5,2
    TEST_END();
    80026f80:	00009597          	auipc	a1,0x9
    80026f84:	03858593          	addi	a1,a1,56 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026f88:	00f70763          	beq	a4,a5,80026f96 <stateen_SE0_test_1+0x192>
    80026f8c:	4401                	li	s0,0
    TEST_END();
    80026f8e:	00009597          	auipc	a1,0x9
    80026f92:	03a58593          	addi	a1,a1,58 # 8002ffc8 <__func__.0+0x2d8>
    80026f96:	00009517          	auipc	a0,0x9
    80026f9a:	0da50513          	addi	a0,a0,218 # 80030070 <__func__.0+0x380>
    80026f9e:	0ee060ef          	jal	8002d08c <printf>
    80026fa2:	4511                	li	a0,4
    80026fa4:	f65d90ef          	jal	80000f08 <goto_priv>
    80026fa8:	92bda0ef          	jal	800018d2 <reset_state>

}
    80026fac:	60e2                	ld	ra,24(sp)
    80026fae:	8522                	mv	a0,s0
    80026fb0:	6442                	ld	s0,16(sp)
    80026fb2:	64a2                	ld	s1,8(sp)
    80026fb4:	6105                	addi	sp,sp,32
    80026fb6:	8082                	ret

0000000080026fb8 <stateen_SE0_test_2>:

bool stateen_SE0_test_2(){
    80026fb8:	1101                	addi	sp,sp,-32

    TEST_START();
    80026fba:	00009597          	auipc	a1,0x9
    80026fbe:	99658593          	addi	a1,a1,-1642 # 8002f950 <__func__.6>
    80026fc2:	00009517          	auipc	a0,0x9
    80026fc6:	01650513          	addi	a0,a0,22 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_SE0_test_2(){
    80026fca:	ec06                	sd	ra,24(sp)
    80026fcc:	e822                	sd	s0,16(sp)
    80026fce:	e426                	sd	s1,8(sp)
    TEST_START();
    80026fd0:	0bc060ef          	jal	8002d08c <printf>
    80026fd4:	4529                	li	a0,10
    80026fd6:	5a5040ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80026fda:	4511                	li	a0,4
    80026fdc:	f2dd90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80026fe0:	57fd                	li	a5,-1
    80026fe2:	17fe                	slli	a5,a5,0x3f
    80026fe4:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80026fe8:	60c7a073          	csrs	hstateen0,a5

    //当mstateen.SE0=1,hstateen.SE0=0,v=1时,不可访问Hstateen0和Sstateen0寄存器
    goto_priv(PRIV_VU);
    80026fec:	4501                	li	a0,0
    80026fee:	f1bd90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80026ff2:	e1bd90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80026ff6:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80026ffa:	854da0ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode access hstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80026ffe:	08200593          	li	a1,130
    80027002:	00013617          	auipc	a2,0x13
    80027006:	6c660613          	addi	a2,a2,1734 # 8003a6c8 <__func__.0+0xa9d8>
    8002700a:	00009517          	auipc	a0,0x9
    8002700e:	fe650513          	addi	a0,a0,-26 # 8002fff0 <__func__.0+0x300>
    80027012:	07a060ef          	jal	8002d08c <printf>
    80027016:	00031797          	auipc	a5,0x31
    8002701a:	ffb7c783          	lbu	a5,-5(a5) # 80058011 <excpt+0x1>
    8002701e:	00031497          	auipc	s1,0x31
    80027022:	ff248493          	addi	s1,s1,-14 # 80058010 <excpt>
    80027026:	00009597          	auipc	a1,0x9
    8002702a:	fa258593          	addi	a1,a1,-94 # 8002ffc8 <__func__.0+0x2d8>
    8002702e:	cf89                	beqz	a5,80027048 <stateen_SE0_test_2+0x90>
    80027030:	6498                	ld	a4,8(s1)
    80027032:	47d9                	li	a5,22
    80027034:	00009597          	auipc	a1,0x9
    80027038:	f8458593          	addi	a1,a1,-124 # 8002ffb8 <__func__.0+0x2c8>
    8002703c:	00f70663          	beq	a4,a5,80027048 <stateen_SE0_test_2+0x90>
    80027040:	00009597          	auipc	a1,0x9
    80027044:	f8858593          	addi	a1,a1,-120 # 8002ffc8 <__func__.0+0x2d8>
    80027048:	00009517          	auipc	a0,0x9
    8002704c:	fc050513          	addi	a0,a0,-64 # 80030008 <__func__.0+0x318>
    80027050:	03c060ef          	jal	8002d08c <printf>
    80027054:	00031797          	auipc	a5,0x31
    80027058:	fbd7c783          	lbu	a5,-67(a5) # 80058011 <excpt+0x1>
    8002705c:	c789                	beqz	a5,80027066 <stateen_SE0_test_2+0xae>
    8002705e:	6498                	ld	a4,8(s1)
    80027060:	47d9                	li	a5,22
    80027062:	00f70c63          	beq	a4,a5,8002707a <stateen_SE0_test_2+0xc2>
    80027066:	00009517          	auipc	a0,0x9
    8002706a:	faa50513          	addi	a0,a0,-86 # 80030010 <__func__.0+0x320>
    8002706e:	01e060ef          	jal	8002d08c <printf>
    80027072:	02900513          	li	a0,41
    80027076:	505040ef          	jal	8002bd7a <putchar>
    8002707a:	4529                	li	a0,10
    8002707c:	4ff040ef          	jal	8002bd7a <putchar>
    80027080:	00031797          	auipc	a5,0x31
    80027084:	f917c783          	lbu	a5,-111(a5) # 80058011 <excpt+0x1>
    80027088:	4401                	li	s0,0
    8002708a:	c789                	beqz	a5,80027094 <stateen_SE0_test_2+0xdc>
    8002708c:	6480                	ld	s0,8(s1)
    8002708e:	1429                	addi	s0,s0,-22
    80027090:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80027094:	4501                	li	a0,0
    80027096:	e73d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002709a:	d73d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    8002709e:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800270a2:	fadd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    800270a6:	08200593          	li	a1,130
    800270aa:	00013617          	auipc	a2,0x13
    800270ae:	67660613          	addi	a2,a2,1654 # 8003a720 <__func__.0+0xaa30>
    800270b2:	00009517          	auipc	a0,0x9
    800270b6:	f3e50513          	addi	a0,a0,-194 # 8002fff0 <__func__.0+0x300>
    800270ba:	7d3050ef          	jal	8002d08c <printf>
    800270be:	00031797          	auipc	a5,0x31
    800270c2:	f537c783          	lbu	a5,-173(a5) # 80058011 <excpt+0x1>
    800270c6:	00009597          	auipc	a1,0x9
    800270ca:	f0258593          	addi	a1,a1,-254 # 8002ffc8 <__func__.0+0x2d8>
    800270ce:	cf89                	beqz	a5,800270e8 <stateen_SE0_test_2+0x130>
    800270d0:	6498                	ld	a4,8(s1)
    800270d2:	47d9                	li	a5,22
    800270d4:	00009597          	auipc	a1,0x9
    800270d8:	ee458593          	addi	a1,a1,-284 # 8002ffb8 <__func__.0+0x2c8>
    800270dc:	00f70663          	beq	a4,a5,800270e8 <stateen_SE0_test_2+0x130>
    800270e0:	00009597          	auipc	a1,0x9
    800270e4:	ee858593          	addi	a1,a1,-280 # 8002ffc8 <__func__.0+0x2d8>
    800270e8:	00009517          	auipc	a0,0x9
    800270ec:	f2050513          	addi	a0,a0,-224 # 80030008 <__func__.0+0x318>
    800270f0:	79d050ef          	jal	8002d08c <printf>
    800270f4:	00031797          	auipc	a5,0x31
    800270f8:	f1d7c783          	lbu	a5,-227(a5) # 80058011 <excpt+0x1>
    800270fc:	c789                	beqz	a5,80027106 <stateen_SE0_test_2+0x14e>
    800270fe:	6498                	ld	a4,8(s1)
    80027100:	47d9                	li	a5,22
    80027102:	00f70c63          	beq	a4,a5,8002711a <stateen_SE0_test_2+0x162>
    80027106:	00009517          	auipc	a0,0x9
    8002710a:	f0a50513          	addi	a0,a0,-246 # 80030010 <__func__.0+0x320>
    8002710e:	77f050ef          	jal	8002d08c <printf>
    80027112:	02900513          	li	a0,41
    80027116:	465040ef          	jal	8002bd7a <putchar>
    8002711a:	4529                	li	a0,10
    8002711c:	45f040ef          	jal	8002bd7a <putchar>
    80027120:	c015                	beqz	s0,80027144 <stateen_SE0_test_2+0x18c>
    80027122:	00031417          	auipc	s0,0x31
    80027126:	eef44403          	lbu	s0,-273(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    8002712a:	00009597          	auipc	a1,0x9
    8002712e:	e9e58593          	addi	a1,a1,-354 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80027132:	cc11                	beqz	s0,8002714e <stateen_SE0_test_2+0x196>
    80027134:	6498                	ld	a4,8(s1)
    80027136:	47d9                	li	a5,22
    TEST_END();
    80027138:	00009597          	auipc	a1,0x9
    8002713c:	e8058593          	addi	a1,a1,-384 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80027140:	00f70763          	beq	a4,a5,8002714e <stateen_SE0_test_2+0x196>
    80027144:	4401                	li	s0,0
    TEST_END();
    80027146:	00009597          	auipc	a1,0x9
    8002714a:	e8258593          	addi	a1,a1,-382 # 8002ffc8 <__func__.0+0x2d8>
    8002714e:	00009517          	auipc	a0,0x9
    80027152:	f2250513          	addi	a0,a0,-222 # 80030070 <__func__.0+0x380>
    80027156:	737050ef          	jal	8002d08c <printf>
    8002715a:	4511                	li	a0,4
    8002715c:	dadd90ef          	jal	80000f08 <goto_priv>
    80027160:	f72da0ef          	jal	800018d2 <reset_state>

}
    80027164:	60e2                	ld	ra,24(sp)
    80027166:	8522                	mv	a0,s0
    80027168:	6442                	ld	s0,16(sp)
    8002716a:	64a2                	ld	s1,8(sp)
    8002716c:	6105                	addi	sp,sp,32
    8002716e:	8082                	ret

0000000080027170 <stateen_SE0_test_3>:

bool stateen_SE0_test_3(){
    80027170:	1141                	addi	sp,sp,-16

    //当mstateen.SE0=0,m mode 可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    80027172:	00008597          	auipc	a1,0x8
    80027176:	7f658593          	addi	a1,a1,2038 # 8002f968 <__func__.5>
    8002717a:	00009517          	auipc	a0,0x9
    8002717e:	e5e50513          	addi	a0,a0,-418 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_SE0_test_3(){
    80027182:	e406                	sd	ra,8(sp)
    80027184:	e022                	sd	s0,0(sp)
    TEST_START();
    80027186:	707050ef          	jal	8002d08c <printf>
    8002718a:	4529                	li	a0,10
    8002718c:	3ef040ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80027190:	4511                	li	a0,4
    80027192:	d77d90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027196:	57fd                	li	a5,-1
    80027198:	17fe                	slli	a5,a5,0x3f
    8002719a:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    8002719e:	4511                	li	a0,4
    800271a0:	d69d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800271a4:	c69d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800271a8:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800271ac:	ea3d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    800271b0:	08200593          	li	a1,130
    800271b4:	00013617          	auipc	a2,0x13
    800271b8:	5c460613          	addi	a2,a2,1476 # 8003a778 <__func__.0+0xaa88>
    800271bc:	00009517          	auipc	a0,0x9
    800271c0:	e3450513          	addi	a0,a0,-460 # 8002fff0 <__func__.0+0x300>
    800271c4:	6c9050ef          	jal	8002d08c <printf>
    800271c8:	00031797          	auipc	a5,0x31
    800271cc:	e497c783          	lbu	a5,-439(a5) # 80058011 <excpt+0x1>
    800271d0:	00009597          	auipc	a1,0x9
    800271d4:	de858593          	addi	a1,a1,-536 # 8002ffb8 <__func__.0+0x2c8>
    800271d8:	c789                	beqz	a5,800271e2 <stateen_SE0_test_3+0x72>
    800271da:	00009597          	auipc	a1,0x9
    800271de:	dee58593          	addi	a1,a1,-530 # 8002ffc8 <__func__.0+0x2d8>
    800271e2:	00009517          	auipc	a0,0x9
    800271e6:	e2650513          	addi	a0,a0,-474 # 80030008 <__func__.0+0x318>
    800271ea:	6a3050ef          	jal	8002d08c <printf>
    800271ee:	00031797          	auipc	a5,0x31
    800271f2:	e237c783          	lbu	a5,-477(a5) # 80058011 <excpt+0x1>
    800271f6:	e7e9                	bnez	a5,800272c0 <stateen_SE0_test_3+0x150>
    800271f8:	4529                	li	a0,10
    800271fa:	381040ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800271fe:	4511                	li	a0,4
    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    80027200:	00031417          	auipc	s0,0x31
    80027204:	e1144403          	lbu	s0,-495(s0) # 80058011 <excpt+0x1>
    goto_priv(PRIV_M);
    80027208:	d01d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002720c:	c01d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027210:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027214:	e3bd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    80027218:	08200593          	li	a1,130
    8002721c:	00013617          	auipc	a2,0x13
    80027220:	59c60613          	addi	a2,a2,1436 # 8003a7b8 <__func__.0+0xaac8>
    80027224:	00009517          	auipc	a0,0x9
    80027228:	dcc50513          	addi	a0,a0,-564 # 8002fff0 <__func__.0+0x300>
    8002722c:	661050ef          	jal	8002d08c <printf>
    80027230:	00031797          	auipc	a5,0x31
    80027234:	de17c783          	lbu	a5,-543(a5) # 80058011 <excpt+0x1>
    80027238:	00009597          	auipc	a1,0x9
    8002723c:	d9058593          	addi	a1,a1,-624 # 8002ffc8 <__func__.0+0x2d8>
    80027240:	e789                	bnez	a5,8002724a <stateen_SE0_test_3+0xda>
    80027242:	00009597          	auipc	a1,0x9
    80027246:	d7658593          	addi	a1,a1,-650 # 8002ffb8 <__func__.0+0x2c8>
    8002724a:	00009517          	auipc	a0,0x9
    8002724e:	dbe50513          	addi	a0,a0,-578 # 80030008 <__func__.0+0x318>
    80027252:	63b050ef          	jal	8002d08c <printf>
    80027256:	00031797          	auipc	a5,0x31
    8002725a:	dbb7c783          	lbu	a5,-581(a5) # 80058011 <excpt+0x1>
    8002725e:	e7b1                	bnez	a5,800272aa <stateen_SE0_test_3+0x13a>
    80027260:	4529                	li	a0,10
    80027262:	319040ef          	jal	8002bd7a <putchar>
    80027266:	e815                	bnez	s0,8002729a <stateen_SE0_test_3+0x12a>
    80027268:	00031797          	auipc	a5,0x31
    8002726c:	da97c783          	lbu	a5,-599(a5) # 80058011 <excpt+0x1>
    80027270:	c79d                	beqz	a5,8002729e <stateen_SE0_test_3+0x12e>
        excpt.triggered == false
    ); 



    TEST_END();
    80027272:	00009597          	auipc	a1,0x9
    80027276:	d5658593          	addi	a1,a1,-682 # 8002ffc8 <__func__.0+0x2d8>
    8002727a:	00009517          	auipc	a0,0x9
    8002727e:	df650513          	addi	a0,a0,-522 # 80030070 <__func__.0+0x380>
    80027282:	60b050ef          	jal	8002d08c <printf>
    80027286:	4511                	li	a0,4
    80027288:	c81d90ef          	jal	80000f08 <goto_priv>
    8002728c:	e46da0ef          	jal	800018d2 <reset_state>

}
    80027290:	60a2                	ld	ra,8(sp)
    80027292:	8522                	mv	a0,s0
    80027294:	6402                	ld	s0,0(sp)
    80027296:	0141                	addi	sp,sp,16
    80027298:	8082                	ret
    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    8002729a:	4401                	li	s0,0
    8002729c:	bfd9                	j	80027272 <stateen_SE0_test_3+0x102>
    8002729e:	4405                	li	s0,1
    TEST_END();
    800272a0:	00009597          	auipc	a1,0x9
    800272a4:	d1858593          	addi	a1,a1,-744 # 8002ffb8 <__func__.0+0x2c8>
    800272a8:	bfc9                	j	8002727a <stateen_SE0_test_3+0x10a>
    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    800272aa:	00009517          	auipc	a0,0x9
    800272ae:	d6650513          	addi	a0,a0,-666 # 80030010 <__func__.0+0x320>
    800272b2:	5db050ef          	jal	8002d08c <printf>
    800272b6:	02900513          	li	a0,41
    800272ba:	2c1040ef          	jal	8002bd7a <putchar>
    800272be:	b74d                	j	80027260 <stateen_SE0_test_3+0xf0>
    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    800272c0:	00009517          	auipc	a0,0x9
    800272c4:	d5050513          	addi	a0,a0,-688 # 80030010 <__func__.0+0x320>
    800272c8:	5c5050ef          	jal	8002d08c <printf>
    800272cc:	02900513          	li	a0,41
    800272d0:	2ab040ef          	jal	8002bd7a <putchar>
    800272d4:	b715                	j	800271f8 <stateen_SE0_test_3+0x88>

00000000800272d6 <stateen_SE0_test_4>:


bool stateen_SE0_test_4(){
    800272d6:	1101                	addi	sp,sp,-32

    //当mstateen.SE0=1,hstateen.SE0=0,v=1时不可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    800272d8:	00008597          	auipc	a1,0x8
    800272dc:	6a858593          	addi	a1,a1,1704 # 8002f980 <__func__.4>
    800272e0:	00009517          	auipc	a0,0x9
    800272e4:	cf850513          	addi	a0,a0,-776 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_SE0_test_4(){
    800272e8:	ec06                	sd	ra,24(sp)
    800272ea:	e822                	sd	s0,16(sp)
    800272ec:	e426                	sd	s1,8(sp)
    TEST_START();
    800272ee:	59f050ef          	jal	8002d08c <printf>
    800272f2:	4529                	li	a0,10
    800272f4:	287040ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    800272f8:	4511                	li	a0,4
    800272fa:	c0fd90ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    800272fe:	57fd                	li	a5,-1
    80027300:	17fe                	slli	a5,a5,0x3f
    80027302:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80027306:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    8002730a:	30c025f3          	csrr	a1,mstateen0
    8002730e:	00011517          	auipc	a0,0x11
    80027312:	4ba50513          	addi	a0,a0,1210 # 800387c8 <__func__.0+0x8ad8>
    80027316:	577050ef          	jal	8002d08c <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    8002731a:	60c025f3          	csrr	a1,hstateen0
    8002731e:	00011517          	auipc	a0,0x11
    80027322:	4ba50513          	addi	a0,a0,1210 # 800387d8 <__func__.0+0x8ae8>
    80027326:	567050ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VS);
    8002732a:	4509                	li	a0,2
    8002732c:	bddd90ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    80027330:	addd90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027334:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027338:	d17d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    8002733c:	08200593          	li	a1,130
    80027340:	00013617          	auipc	a2,0x13
    80027344:	4b860613          	addi	a2,a2,1208 # 8003a7f8 <__func__.0+0xab08>
    80027348:	00009517          	auipc	a0,0x9
    8002734c:	ca850513          	addi	a0,a0,-856 # 8002fff0 <__func__.0+0x300>
    80027350:	53d050ef          	jal	8002d08c <printf>
    80027354:	00031797          	auipc	a5,0x31
    80027358:	cbd7c783          	lbu	a5,-835(a5) # 80058011 <excpt+0x1>
    8002735c:	00031497          	auipc	s1,0x31
    80027360:	cb448493          	addi	s1,s1,-844 # 80058010 <excpt>
    80027364:	00009597          	auipc	a1,0x9
    80027368:	c6458593          	addi	a1,a1,-924 # 8002ffc8 <__func__.0+0x2d8>
    8002736c:	cf89                	beqz	a5,80027386 <stateen_SE0_test_4+0xb0>
    8002736e:	6498                	ld	a4,8(s1)
    80027370:	47d9                	li	a5,22
    80027372:	00009597          	auipc	a1,0x9
    80027376:	c4658593          	addi	a1,a1,-954 # 8002ffb8 <__func__.0+0x2c8>
    8002737a:	00f70663          	beq	a4,a5,80027386 <stateen_SE0_test_4+0xb0>
    8002737e:	00009597          	auipc	a1,0x9
    80027382:	c4a58593          	addi	a1,a1,-950 # 8002ffc8 <__func__.0+0x2d8>
    80027386:	00009517          	auipc	a0,0x9
    8002738a:	c8250513          	addi	a0,a0,-894 # 80030008 <__func__.0+0x318>
    8002738e:	4ff050ef          	jal	8002d08c <printf>
    80027392:	00031797          	auipc	a5,0x31
    80027396:	c7f7c783          	lbu	a5,-897(a5) # 80058011 <excpt+0x1>
    8002739a:	c789                	beqz	a5,800273a4 <stateen_SE0_test_4+0xce>
    8002739c:	6498                	ld	a4,8(s1)
    8002739e:	47d9                	li	a5,22
    800273a0:	00f70c63          	beq	a4,a5,800273b8 <stateen_SE0_test_4+0xe2>
    800273a4:	00009517          	auipc	a0,0x9
    800273a8:	c6c50513          	addi	a0,a0,-916 # 80030010 <__func__.0+0x320>
    800273ac:	4e1050ef          	jal	8002d08c <printf>
    800273b0:	02900513          	li	a0,41
    800273b4:	1c7040ef          	jal	8002bd7a <putchar>
    800273b8:	4529                	li	a0,10
    800273ba:	1c1040ef          	jal	8002bd7a <putchar>
    800273be:	00031797          	auipc	a5,0x31
    800273c2:	c537c783          	lbu	a5,-941(a5) # 80058011 <excpt+0x1>
    800273c6:	4401                	li	s0,0
    800273c8:	c789                	beqz	a5,800273d2 <stateen_SE0_test_4+0xfc>
    800273ca:	6480                	ld	s0,8(s1)
    800273cc:	1429                	addi	s0,s0,-22
    800273ce:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800273d2:	4509                	li	a0,2
    800273d4:	b35d90ef          	jal	80000f08 <goto_priv>

    TEST_SETUP_EXCEPT();
    800273d8:	a35d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800273dc:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800273e0:	c6fd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    800273e4:	08200593          	li	a1,130
    800273e8:	00013617          	auipc	a2,0x13
    800273ec:	46860613          	addi	a2,a2,1128 # 8003a850 <__func__.0+0xab60>
    800273f0:	00009517          	auipc	a0,0x9
    800273f4:	c0050513          	addi	a0,a0,-1024 # 8002fff0 <__func__.0+0x300>
    800273f8:	495050ef          	jal	8002d08c <printf>
    800273fc:	00031797          	auipc	a5,0x31
    80027400:	c157c783          	lbu	a5,-1003(a5) # 80058011 <excpt+0x1>
    80027404:	00009597          	auipc	a1,0x9
    80027408:	bc458593          	addi	a1,a1,-1084 # 8002ffc8 <__func__.0+0x2d8>
    8002740c:	cf89                	beqz	a5,80027426 <stateen_SE0_test_4+0x150>
    8002740e:	6498                	ld	a4,8(s1)
    80027410:	47d9                	li	a5,22
    80027412:	00009597          	auipc	a1,0x9
    80027416:	ba658593          	addi	a1,a1,-1114 # 8002ffb8 <__func__.0+0x2c8>
    8002741a:	00f70663          	beq	a4,a5,80027426 <stateen_SE0_test_4+0x150>
    8002741e:	00009597          	auipc	a1,0x9
    80027422:	baa58593          	addi	a1,a1,-1110 # 8002ffc8 <__func__.0+0x2d8>
    80027426:	00009517          	auipc	a0,0x9
    8002742a:	be250513          	addi	a0,a0,-1054 # 80030008 <__func__.0+0x318>
    8002742e:	45f050ef          	jal	8002d08c <printf>
    80027432:	00031797          	auipc	a5,0x31
    80027436:	bdf7c783          	lbu	a5,-1057(a5) # 80058011 <excpt+0x1>
    8002743a:	c789                	beqz	a5,80027444 <stateen_SE0_test_4+0x16e>
    8002743c:	6498                	ld	a4,8(s1)
    8002743e:	47d9                	li	a5,22
    80027440:	00f70c63          	beq	a4,a5,80027458 <stateen_SE0_test_4+0x182>
    80027444:	00009517          	auipc	a0,0x9
    80027448:	bcc50513          	addi	a0,a0,-1076 # 80030010 <__func__.0+0x320>
    8002744c:	441050ef          	jal	8002d08c <printf>
    80027450:	02900513          	li	a0,41
    80027454:	127040ef          	jal	8002bd7a <putchar>
    80027458:	4529                	li	a0,10
    8002745a:	121040ef          	jal	8002bd7a <putchar>
    8002745e:	c015                	beqz	s0,80027482 <stateen_SE0_test_4+0x1ac>
    80027460:	00031417          	auipc	s0,0x31
    80027464:	bb144403          	lbu	s0,-1103(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_VRTI
    ); 



    TEST_END();
    80027468:	00009597          	auipc	a1,0x9
    8002746c:	b6058593          	addi	a1,a1,-1184 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80027470:	cc11                	beqz	s0,8002748c <stateen_SE0_test_4+0x1b6>
    80027472:	6498                	ld	a4,8(s1)
    80027474:	47d9                	li	a5,22
    TEST_END();
    80027476:	00009597          	auipc	a1,0x9
    8002747a:	b4258593          	addi	a1,a1,-1214 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    8002747e:	00f70763          	beq	a4,a5,8002748c <stateen_SE0_test_4+0x1b6>
    80027482:	4401                	li	s0,0
    TEST_END();
    80027484:	00009597          	auipc	a1,0x9
    80027488:	b4458593          	addi	a1,a1,-1212 # 8002ffc8 <__func__.0+0x2d8>
    8002748c:	00009517          	auipc	a0,0x9
    80027490:	be450513          	addi	a0,a0,-1052 # 80030070 <__func__.0+0x380>
    80027494:	3f9050ef          	jal	8002d08c <printf>
    80027498:	4511                	li	a0,4
    8002749a:	a6fd90ef          	jal	80000f08 <goto_priv>
    8002749e:	c34da0ef          	jal	800018d2 <reset_state>

}
    800274a2:	60e2                	ld	ra,24(sp)
    800274a4:	8522                	mv	a0,s0
    800274a6:	6442                	ld	s0,16(sp)
    800274a8:	64a2                	ld	s1,8(sp)
    800274aa:	6105                	addi	sp,sp,32
    800274ac:	8082                	ret

00000000800274ae <stateen_SE0_test_5>:

bool stateen_SE0_test_5(){
    800274ae:	1101                	addi	sp,sp,-32

    //当mstateen.SE0=0,hs mode 不可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    800274b0:	00008597          	auipc	a1,0x8
    800274b4:	4e858593          	addi	a1,a1,1256 # 8002f998 <__func__.3>
    800274b8:	00009517          	auipc	a0,0x9
    800274bc:	b2050513          	addi	a0,a0,-1248 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_SE0_test_5(){
    800274c0:	ec06                	sd	ra,24(sp)
    800274c2:	e822                	sd	s0,16(sp)
    800274c4:	e426                	sd	s1,8(sp)
    TEST_START();
    800274c6:	3c7050ef          	jal	8002d08c <printf>
    800274ca:	4529                	li	a0,10
    800274cc:	0af040ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    800274d0:	4511                	li	a0,4
    800274d2:	a37d90ef          	jal	80000f08 <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    800274d6:	57fd                	li	a5,-1
    800274d8:	17fe                	slli	a5,a5,0x3f
    800274da:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    800274de:	450d                	li	a0,3
    800274e0:	a29d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800274e4:	929d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800274e8:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800274ec:	b63d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register cause to illegal except when mstateen.SE0=0",
    800274f0:	08200593          	li	a1,130
    800274f4:	00013617          	auipc	a2,0x13
    800274f8:	3b460613          	addi	a2,a2,948 # 8003a8a8 <__func__.0+0xabb8>
    800274fc:	00009517          	auipc	a0,0x9
    80027500:	af450513          	addi	a0,a0,-1292 # 8002fff0 <__func__.0+0x300>
    80027504:	389050ef          	jal	8002d08c <printf>
    80027508:	00031797          	auipc	a5,0x31
    8002750c:	b097c783          	lbu	a5,-1271(a5) # 80058011 <excpt+0x1>
    80027510:	00031497          	auipc	s1,0x31
    80027514:	b0048493          	addi	s1,s1,-1280 # 80058010 <excpt>
    80027518:	00009597          	auipc	a1,0x9
    8002751c:	ab058593          	addi	a1,a1,-1360 # 8002ffc8 <__func__.0+0x2d8>
    80027520:	cf89                	beqz	a5,8002753a <stateen_SE0_test_5+0x8c>
    80027522:	6498                	ld	a4,8(s1)
    80027524:	4789                	li	a5,2
    80027526:	00009597          	auipc	a1,0x9
    8002752a:	a9258593          	addi	a1,a1,-1390 # 8002ffb8 <__func__.0+0x2c8>
    8002752e:	00f70663          	beq	a4,a5,8002753a <stateen_SE0_test_5+0x8c>
    80027532:	00009597          	auipc	a1,0x9
    80027536:	a9658593          	addi	a1,a1,-1386 # 8002ffc8 <__func__.0+0x2d8>
    8002753a:	00009517          	auipc	a0,0x9
    8002753e:	ace50513          	addi	a0,a0,-1330 # 80030008 <__func__.0+0x318>
    80027542:	34b050ef          	jal	8002d08c <printf>
    80027546:	00031797          	auipc	a5,0x31
    8002754a:	acb7c783          	lbu	a5,-1333(a5) # 80058011 <excpt+0x1>
    8002754e:	c789                	beqz	a5,80027558 <stateen_SE0_test_5+0xaa>
    80027550:	6498                	ld	a4,8(s1)
    80027552:	4789                	li	a5,2
    80027554:	00f70c63          	beq	a4,a5,8002756c <stateen_SE0_test_5+0xbe>
    80027558:	00009517          	auipc	a0,0x9
    8002755c:	ab850513          	addi	a0,a0,-1352 # 80030010 <__func__.0+0x320>
    80027560:	32d050ef          	jal	8002d08c <printf>
    80027564:	02900513          	li	a0,41
    80027568:	013040ef          	jal	8002bd7a <putchar>
    8002756c:	4529                	li	a0,10
    8002756e:	00d040ef          	jal	8002bd7a <putchar>
    80027572:	00031797          	auipc	a5,0x31
    80027576:	a9f7c783          	lbu	a5,-1377(a5) # 80058011 <excpt+0x1>
    8002757a:	4401                	li	s0,0
    8002757c:	c789                	beqz	a5,80027586 <stateen_SE0_test_5+0xd8>
    8002757e:	6480                	ld	s0,8(s1)
    80027580:	1479                	addi	s0,s0,-2
    80027582:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80027586:	450d                	li	a0,3
    80027588:	981d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002758c:	881d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027590:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027594:	abbd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80027598:	08200593          	li	a1,130
    8002759c:	00013617          	auipc	a2,0x13
    800275a0:	35c60613          	addi	a2,a2,860 # 8003a8f8 <__func__.0+0xac08>
    800275a4:	00009517          	auipc	a0,0x9
    800275a8:	a4c50513          	addi	a0,a0,-1460 # 8002fff0 <__func__.0+0x300>
    800275ac:	2e1050ef          	jal	8002d08c <printf>
    800275b0:	00031797          	auipc	a5,0x31
    800275b4:	a617c783          	lbu	a5,-1439(a5) # 80058011 <excpt+0x1>
    800275b8:	00009597          	auipc	a1,0x9
    800275bc:	a1058593          	addi	a1,a1,-1520 # 8002ffc8 <__func__.0+0x2d8>
    800275c0:	cf89                	beqz	a5,800275da <stateen_SE0_test_5+0x12c>
    800275c2:	6498                	ld	a4,8(s1)
    800275c4:	4789                	li	a5,2
    800275c6:	00009597          	auipc	a1,0x9
    800275ca:	9f258593          	addi	a1,a1,-1550 # 8002ffb8 <__func__.0+0x2c8>
    800275ce:	00f70663          	beq	a4,a5,800275da <stateen_SE0_test_5+0x12c>
    800275d2:	00009597          	auipc	a1,0x9
    800275d6:	9f658593          	addi	a1,a1,-1546 # 8002ffc8 <__func__.0+0x2d8>
    800275da:	00009517          	auipc	a0,0x9
    800275de:	a2e50513          	addi	a0,a0,-1490 # 80030008 <__func__.0+0x318>
    800275e2:	2ab050ef          	jal	8002d08c <printf>
    800275e6:	00031797          	auipc	a5,0x31
    800275ea:	a2b7c783          	lbu	a5,-1493(a5) # 80058011 <excpt+0x1>
    800275ee:	c789                	beqz	a5,800275f8 <stateen_SE0_test_5+0x14a>
    800275f0:	6498                	ld	a4,8(s1)
    800275f2:	4789                	li	a5,2
    800275f4:	00f70c63          	beq	a4,a5,8002760c <stateen_SE0_test_5+0x15e>
    800275f8:	00009517          	auipc	a0,0x9
    800275fc:	a1850513          	addi	a0,a0,-1512 # 80030010 <__func__.0+0x320>
    80027600:	28d050ef          	jal	8002d08c <printf>
    80027604:	02900513          	li	a0,41
    80027608:	772040ef          	jal	8002bd7a <putchar>
    8002760c:	4529                	li	a0,10
    8002760e:	76c040ef          	jal	8002bd7a <putchar>
    80027612:	c015                	beqz	s0,80027636 <stateen_SE0_test_5+0x188>
    80027614:	00031417          	auipc	s0,0x31
    80027618:	9fd44403          	lbu	s0,-1539(s0) # 80058011 <excpt+0x1>
        excpt.cause == CAUSE_ILI
    ); 



    TEST_END();
    8002761c:	00009597          	auipc	a1,0x9
    80027620:	9ac58593          	addi	a1,a1,-1620 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80027624:	cc11                	beqz	s0,80027640 <stateen_SE0_test_5+0x192>
    80027626:	6498                	ld	a4,8(s1)
    80027628:	4789                	li	a5,2
    TEST_END();
    8002762a:	00009597          	auipc	a1,0x9
    8002762e:	98e58593          	addi	a1,a1,-1650 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80027632:	00f70763          	beq	a4,a5,80027640 <stateen_SE0_test_5+0x192>
    80027636:	4401                	li	s0,0
    TEST_END();
    80027638:	00009597          	auipc	a1,0x9
    8002763c:	99058593          	addi	a1,a1,-1648 # 8002ffc8 <__func__.0+0x2d8>
    80027640:	00009517          	auipc	a0,0x9
    80027644:	a3050513          	addi	a0,a0,-1488 # 80030070 <__func__.0+0x380>
    80027648:	245050ef          	jal	8002d08c <printf>
    8002764c:	4511                	li	a0,4
    8002764e:	8bbd90ef          	jal	80000f08 <goto_priv>
    80027652:	a80da0ef          	jal	800018d2 <reset_state>

}
    80027656:	60e2                	ld	ra,24(sp)
    80027658:	8522                	mv	a0,s0
    8002765a:	6442                	ld	s0,16(sp)
    8002765c:	64a2                	ld	s1,8(sp)
    8002765e:	6105                	addi	sp,sp,32
    80027660:	8082                	ret

0000000080027662 <stateen_SE0_test_6>:


bool stateen_SE0_test_6(){
    80027662:	1101                	addi	sp,sp,-32

    TEST_START();
    80027664:	00008597          	auipc	a1,0x8
    80027668:	34c58593          	addi	a1,a1,844 # 8002f9b0 <__func__.2>
    8002766c:	00009517          	auipc	a0,0x9
    80027670:	96c50513          	addi	a0,a0,-1684 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_SE0_test_6(){
    80027674:	ec06                	sd	ra,24(sp)
    80027676:	e822                	sd	s0,16(sp)
    80027678:	e426                	sd	s1,8(sp)
    TEST_START();
    8002767a:	213050ef          	jal	8002d08c <printf>
    8002767e:	4529                	li	a0,10
    80027680:	6fa040ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80027684:	4511                	li	a0,4
    80027686:	883d90ef          	jal	80000f08 <goto_priv>
    //当mstateen.SE0=1,v=0时,可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    8002768a:	57fd                	li	a5,-1
    8002768c:	17fe                	slli	a5,a5,0x3f
    8002768e:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80027692:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80027696:	450d                	li	a0,3
    80027698:	871d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002769c:	f70d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800276a0:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800276a4:	9abd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    800276a8:	08200593          	li	a1,130
    800276ac:	00013617          	auipc	a2,0x13
    800276b0:	29c60613          	addi	a2,a2,668 # 8003a948 <__func__.0+0xac58>
    800276b4:	00009517          	auipc	a0,0x9
    800276b8:	93c50513          	addi	a0,a0,-1732 # 8002fff0 <__func__.0+0x300>
    800276bc:	1d1050ef          	jal	8002d08c <printf>
    800276c0:	00031797          	auipc	a5,0x31
    800276c4:	9517c783          	lbu	a5,-1711(a5) # 80058011 <excpt+0x1>
    800276c8:	00009597          	auipc	a1,0x9
    800276cc:	8f058593          	addi	a1,a1,-1808 # 8002ffb8 <__func__.0+0x2c8>
    800276d0:	c789                	beqz	a5,800276da <stateen_SE0_test_6+0x78>
    800276d2:	00009597          	auipc	a1,0x9
    800276d6:	8f658593          	addi	a1,a1,-1802 # 8002ffc8 <__func__.0+0x2d8>
    800276da:	00009517          	auipc	a0,0x9
    800276de:	92e50513          	addi	a0,a0,-1746 # 80030008 <__func__.0+0x318>
    800276e2:	1ab050ef          	jal	8002d08c <printf>
    800276e6:	00031797          	auipc	a5,0x31
    800276ea:	92b7c783          	lbu	a5,-1749(a5) # 80058011 <excpt+0x1>
    800276ee:	2c079e63          	bnez	a5,800279ca <stateen_SE0_test_6+0x368>
    800276f2:	4529                	li	a0,10
    800276f4:	686040ef          	jal	8002bd7a <putchar>
    800276f8:	00031497          	auipc	s1,0x31
    800276fc:	9194c483          	lbu	s1,-1767(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SSTATEEN0);
    80027700:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027704:	94bd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    80027708:	08200593          	li	a1,130
    8002770c:	00013617          	auipc	a2,0x13
    80027710:	29460613          	addi	a2,a2,660 # 8003a9a0 <__func__.0+0xacb0>
    80027714:	00009517          	auipc	a0,0x9
    80027718:	8dc50513          	addi	a0,a0,-1828 # 8002fff0 <__func__.0+0x300>
    8002771c:	171050ef          	jal	8002d08c <printf>
    80027720:	00031797          	auipc	a5,0x31
    80027724:	8f17c783          	lbu	a5,-1807(a5) # 80058011 <excpt+0x1>
    80027728:	00009597          	auipc	a1,0x9
    8002772c:	8a058593          	addi	a1,a1,-1888 # 8002ffc8 <__func__.0+0x2d8>
    80027730:	e789                	bnez	a5,8002773a <stateen_SE0_test_6+0xd8>
    80027732:	00009597          	auipc	a1,0x9
    80027736:	88658593          	addi	a1,a1,-1914 # 8002ffb8 <__func__.0+0x2c8>
    8002773a:	00009517          	auipc	a0,0x9
    8002773e:	8ce50513          	addi	a0,a0,-1842 # 80030008 <__func__.0+0x318>
    80027742:	14b050ef          	jal	8002d08c <printf>
    80027746:	00031797          	auipc	a5,0x31
    8002774a:	8cb7c783          	lbu	a5,-1845(a5) # 80058011 <excpt+0x1>
    8002774e:	26079363          	bnez	a5,800279b4 <stateen_SE0_test_6+0x352>
    80027752:	4529                	li	a0,10
    80027754:	626040ef          	jal	8002bd7a <putchar>
    80027758:	4401                	li	s0,0
    8002775a:	e499                	bnez	s1,80027768 <stateen_SE0_test_6+0x106>
    8002775c:	00031417          	auipc	s0,0x31
    80027760:	8b544403          	lbu	s0,-1867(s0) # 80058011 <excpt+0x1>
    80027764:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80027768:	4505                	li	a0,1
    8002776a:	f9ed90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002776e:	e9ed90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027772:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027776:	8d9d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002777a:	08200593          	li	a1,130
    8002777e:	00013617          	auipc	a2,0x13
    80027782:	27a60613          	addi	a2,a2,634 # 8003a9f8 <__func__.0+0xad08>
    80027786:	00009517          	auipc	a0,0x9
    8002778a:	86a50513          	addi	a0,a0,-1942 # 8002fff0 <__func__.0+0x300>
    8002778e:	0ff050ef          	jal	8002d08c <printf>
    80027792:	00031797          	auipc	a5,0x31
    80027796:	87f7c783          	lbu	a5,-1921(a5) # 80058011 <excpt+0x1>
    8002779a:	00009597          	auipc	a1,0x9
    8002779e:	82e58593          	addi	a1,a1,-2002 # 8002ffc8 <__func__.0+0x2d8>
    800277a2:	e789                	bnez	a5,800277ac <stateen_SE0_test_6+0x14a>
    800277a4:	00009597          	auipc	a1,0x9
    800277a8:	81458593          	addi	a1,a1,-2028 # 8002ffb8 <__func__.0+0x2c8>
    800277ac:	00009517          	auipc	a0,0x9
    800277b0:	85c50513          	addi	a0,a0,-1956 # 80030008 <__func__.0+0x318>
    800277b4:	0d9050ef          	jal	8002d08c <printf>
    800277b8:	00031797          	auipc	a5,0x31
    800277bc:	8597c783          	lbu	a5,-1959(a5) # 80058011 <excpt+0x1>
    800277c0:	1c079f63          	bnez	a5,8002799e <stateen_SE0_test_6+0x33c>
    800277c4:	4529                	li	a0,10
    800277c6:	5b4040ef          	jal	8002bd7a <putchar>
    800277ca:	c419                	beqz	s0,800277d8 <stateen_SE0_test_6+0x176>
    800277cc:	00031417          	auipc	s0,0x31
    800277d0:	84544403          	lbu	s0,-1979(s0) # 80058011 <excpt+0x1>
    800277d4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    800277d8:	4505                	li	a0,1
    800277da:	f2ed90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800277de:	e2ed90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800277e2:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800277e6:	869d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    800277ea:	08200593          	li	a1,130
    800277ee:	00013617          	auipc	a2,0x13
    800277f2:	25a60613          	addi	a2,a2,602 # 8003aa48 <__func__.0+0xad58>
    800277f6:	00008517          	auipc	a0,0x8
    800277fa:	7fa50513          	addi	a0,a0,2042 # 8002fff0 <__func__.0+0x300>
    800277fe:	08f050ef          	jal	8002d08c <printf>
    80027802:	00031797          	auipc	a5,0x31
    80027806:	80f7c783          	lbu	a5,-2033(a5) # 80058011 <excpt+0x1>
    8002780a:	00008597          	auipc	a1,0x8
    8002780e:	7be58593          	addi	a1,a1,1982 # 8002ffc8 <__func__.0+0x2d8>
    80027812:	e789                	bnez	a5,8002781c <stateen_SE0_test_6+0x1ba>
    80027814:	00008597          	auipc	a1,0x8
    80027818:	7a458593          	addi	a1,a1,1956 # 8002ffb8 <__func__.0+0x2c8>
    8002781c:	00008517          	auipc	a0,0x8
    80027820:	7ec50513          	addi	a0,a0,2028 # 80030008 <__func__.0+0x318>
    80027824:	069050ef          	jal	8002d08c <printf>
    80027828:	00030797          	auipc	a5,0x30
    8002782c:	7e97c783          	lbu	a5,2025(a5) # 80058011 <excpt+0x1>
    80027830:	14079c63          	bnez	a5,80027988 <stateen_SE0_test_6+0x326>
    80027834:	4529                	li	a0,10
    80027836:	544040ef          	jal	8002bd7a <putchar>
    8002783a:	c419                	beqz	s0,80027848 <stateen_SE0_test_6+0x1e6>
    8002783c:	00030417          	auipc	s0,0x30
    80027840:	7d544403          	lbu	s0,2005(s0) # 80058011 <excpt+0x1>
    80027844:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80027848:	4511                	li	a0,4
    8002784a:	ebed90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002784e:	dbed90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027852:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027856:	ff8d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002785a:	08200593          	li	a1,130
    8002785e:	00013617          	auipc	a2,0x13
    80027862:	24260613          	addi	a2,a2,578 # 8003aaa0 <__func__.0+0xadb0>
    80027866:	00008517          	auipc	a0,0x8
    8002786a:	78a50513          	addi	a0,a0,1930 # 8002fff0 <__func__.0+0x300>
    8002786e:	01f050ef          	jal	8002d08c <printf>
    80027872:	00030797          	auipc	a5,0x30
    80027876:	79f7c783          	lbu	a5,1951(a5) # 80058011 <excpt+0x1>
    8002787a:	00008597          	auipc	a1,0x8
    8002787e:	74e58593          	addi	a1,a1,1870 # 8002ffc8 <__func__.0+0x2d8>
    80027882:	e789                	bnez	a5,8002788c <stateen_SE0_test_6+0x22a>
    80027884:	00008597          	auipc	a1,0x8
    80027888:	73458593          	addi	a1,a1,1844 # 8002ffb8 <__func__.0+0x2c8>
    8002788c:	00008517          	auipc	a0,0x8
    80027890:	77c50513          	addi	a0,a0,1916 # 80030008 <__func__.0+0x318>
    80027894:	7f8050ef          	jal	8002d08c <printf>
    80027898:	00030797          	auipc	a5,0x30
    8002789c:	7797c783          	lbu	a5,1913(a5) # 80058011 <excpt+0x1>
    800278a0:	0c079963          	bnez	a5,80027972 <stateen_SE0_test_6+0x310>
    800278a4:	4529                	li	a0,10
    800278a6:	4d4040ef          	jal	8002bd7a <putchar>
    800278aa:	c419                	beqz	s0,800278b8 <stateen_SE0_test_6+0x256>
    800278ac:	00030417          	auipc	s0,0x30
    800278b0:	76544403          	lbu	s0,1893(s0) # 80058011 <excpt+0x1>
    800278b4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800278b8:	4511                	li	a0,4
    800278ba:	e4ed90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800278be:	d4ed90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800278c2:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800278c6:	f88d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    800278ca:	08200593          	li	a1,130
    800278ce:	00013617          	auipc	a2,0x13
    800278d2:	22260613          	addi	a2,a2,546 # 8003aaf0 <__func__.0+0xae00>
    800278d6:	00008517          	auipc	a0,0x8
    800278da:	71a50513          	addi	a0,a0,1818 # 8002fff0 <__func__.0+0x300>
    800278de:	7ae050ef          	jal	8002d08c <printf>
    800278e2:	00030797          	auipc	a5,0x30
    800278e6:	72f7c783          	lbu	a5,1839(a5) # 80058011 <excpt+0x1>
    800278ea:	00008597          	auipc	a1,0x8
    800278ee:	6de58593          	addi	a1,a1,1758 # 8002ffc8 <__func__.0+0x2d8>
    800278f2:	e789                	bnez	a5,800278fc <stateen_SE0_test_6+0x29a>
    800278f4:	00008597          	auipc	a1,0x8
    800278f8:	6c458593          	addi	a1,a1,1732 # 8002ffb8 <__func__.0+0x2c8>
    800278fc:	00008517          	auipc	a0,0x8
    80027900:	70c50513          	addi	a0,a0,1804 # 80030008 <__func__.0+0x318>
    80027904:	788050ef          	jal	8002d08c <printf>
    80027908:	00030797          	auipc	a5,0x30
    8002790c:	7097c783          	lbu	a5,1801(a5) # 80058011 <excpt+0x1>
    80027910:	e7b1                	bnez	a5,8002795c <stateen_SE0_test_6+0x2fa>
    80027912:	4529                	li	a0,10
    80027914:	466040ef          	jal	8002bd7a <putchar>
    80027918:	c411                	beqz	s0,80027924 <stateen_SE0_test_6+0x2c2>
    8002791a:	00030797          	auipc	a5,0x30
    8002791e:	6f77c783          	lbu	a5,1783(a5) # 80058011 <excpt+0x1>
    80027922:	c79d                	beqz	a5,80027950 <stateen_SE0_test_6+0x2ee>
    80027924:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    80027926:	00008597          	auipc	a1,0x8
    8002792a:	6a258593          	addi	a1,a1,1698 # 8002ffc8 <__func__.0+0x2d8>
    8002792e:	00008517          	auipc	a0,0x8
    80027932:	74250513          	addi	a0,a0,1858 # 80030070 <__func__.0+0x380>
    80027936:	756050ef          	jal	8002d08c <printf>
    8002793a:	4511                	li	a0,4
    8002793c:	dccd90ef          	jal	80000f08 <goto_priv>
    80027940:	f93d90ef          	jal	800018d2 <reset_state>

}
    80027944:	60e2                	ld	ra,24(sp)
    80027946:	8522                	mv	a0,s0
    80027948:	6442                	ld	s0,16(sp)
    8002794a:	64a2                	ld	s1,8(sp)
    8002794c:	6105                	addi	sp,sp,32
    8002794e:	8082                	ret
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027950:	4405                	li	s0,1
    TEST_END();
    80027952:	00008597          	auipc	a1,0x8
    80027956:	66658593          	addi	a1,a1,1638 # 8002ffb8 <__func__.0+0x2c8>
    8002795a:	bfd1                	j	8002792e <stateen_SE0_test_6+0x2cc>
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002795c:	00008517          	auipc	a0,0x8
    80027960:	6b450513          	addi	a0,a0,1716 # 80030010 <__func__.0+0x320>
    80027964:	728050ef          	jal	8002d08c <printf>
    80027968:	02900513          	li	a0,41
    8002796c:	40e040ef          	jal	8002bd7a <putchar>
    80027970:	b74d                	j	80027912 <stateen_SE0_test_6+0x2b0>
    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027972:	00008517          	auipc	a0,0x8
    80027976:	69e50513          	addi	a0,a0,1694 # 80030010 <__func__.0+0x320>
    8002797a:	712050ef          	jal	8002d08c <printf>
    8002797e:	02900513          	li	a0,41
    80027982:	3f8040ef          	jal	8002bd7a <putchar>
    80027986:	bf39                	j	800278a4 <stateen_SE0_test_6+0x242>
    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027988:	00008517          	auipc	a0,0x8
    8002798c:	68850513          	addi	a0,a0,1672 # 80030010 <__func__.0+0x320>
    80027990:	6fc050ef          	jal	8002d08c <printf>
    80027994:	02900513          	li	a0,41
    80027998:	3e2040ef          	jal	8002bd7a <putchar>
    8002799c:	bd61                	j	80027834 <stateen_SE0_test_6+0x1d2>
    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002799e:	00008517          	auipc	a0,0x8
    800279a2:	67250513          	addi	a0,a0,1650 # 80030010 <__func__.0+0x320>
    800279a6:	6e6050ef          	jal	8002d08c <printf>
    800279aa:	02900513          	li	a0,41
    800279ae:	3cc040ef          	jal	8002bd7a <putchar>
    800279b2:	bd09                	j	800277c4 <stateen_SE0_test_6+0x162>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    800279b4:	00008517          	auipc	a0,0x8
    800279b8:	65c50513          	addi	a0,a0,1628 # 80030010 <__func__.0+0x320>
    800279bc:	6d0050ef          	jal	8002d08c <printf>
    800279c0:	02900513          	li	a0,41
    800279c4:	3b6040ef          	jal	8002bd7a <putchar>
    800279c8:	b369                	j	80027752 <stateen_SE0_test_6+0xf0>
    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    800279ca:	00008517          	auipc	a0,0x8
    800279ce:	64650513          	addi	a0,a0,1606 # 80030010 <__func__.0+0x320>
    800279d2:	6ba050ef          	jal	8002d08c <printf>
    800279d6:	02900513          	li	a0,41
    800279da:	3a0040ef          	jal	8002bd7a <putchar>
    800279de:	bb11                	j	800276f2 <stateen_SE0_test_6+0x90>

00000000800279e0 <stateen_SE0_test_7>:


bool stateen_SE0_test_7(){
    800279e0:	1101                	addi	sp,sp,-32

    TEST_START();
    800279e2:	00008597          	auipc	a1,0x8
    800279e6:	fe658593          	addi	a1,a1,-26 # 8002f9c8 <__func__.1>
    800279ea:	00008517          	auipc	a0,0x8
    800279ee:	5ee50513          	addi	a0,a0,1518 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_SE0_test_7(){
    800279f2:	ec06                	sd	ra,24(sp)
    800279f4:	e822                	sd	s0,16(sp)
    800279f6:	e426                	sd	s1,8(sp)
    TEST_START();
    800279f8:	694050ef          	jal	8002d08c <printf>
    800279fc:	4529                	li	a0,10
    800279fe:	37c040ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80027a02:	4511                	li	a0,4
    80027a04:	d04d90ef          	jal	80000f08 <goto_priv>
    //当mstateen.SE0=1 hstateen.SE0=1,v=1 时可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027a08:	57fd                	li	a5,-1
    80027a0a:	17fe                	slli	a5,a5,0x3f
    80027a0c:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80027a10:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    80027a14:	4509                	li	a0,2
    80027a16:	cf2d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027a1a:	bf2d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027a1e:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027a22:	e2cd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a26:	08200593          	li	a1,130
    80027a2a:	00013617          	auipc	a2,0x13
    80027a2e:	11660613          	addi	a2,a2,278 # 8003ab40 <__func__.0+0xae50>
    80027a32:	00008517          	auipc	a0,0x8
    80027a36:	5be50513          	addi	a0,a0,1470 # 8002fff0 <__func__.0+0x300>
    80027a3a:	652050ef          	jal	8002d08c <printf>
    80027a3e:	00030797          	auipc	a5,0x30
    80027a42:	5d37c783          	lbu	a5,1491(a5) # 80058011 <excpt+0x1>
    80027a46:	00008597          	auipc	a1,0x8
    80027a4a:	57258593          	addi	a1,a1,1394 # 8002ffb8 <__func__.0+0x2c8>
    80027a4e:	c789                	beqz	a5,80027a58 <stateen_SE0_test_7+0x78>
    80027a50:	00008597          	auipc	a1,0x8
    80027a54:	57858593          	addi	a1,a1,1400 # 8002ffc8 <__func__.0+0x2d8>
    80027a58:	00008517          	auipc	a0,0x8
    80027a5c:	5b050513          	addi	a0,a0,1456 # 80030008 <__func__.0+0x318>
    80027a60:	62c050ef          	jal	8002d08c <printf>
    80027a64:	00030797          	auipc	a5,0x30
    80027a68:	5ad7c783          	lbu	a5,1453(a5) # 80058011 <excpt+0x1>
    80027a6c:	1c079d63          	bnez	a5,80027c46 <stateen_SE0_test_7+0x266>
    80027a70:	4529                	li	a0,10
    80027a72:	308040ef          	jal	8002bd7a <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80027a76:	4509                	li	a0,2
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a78:	00030497          	auipc	s1,0x30
    80027a7c:	5994c483          	lbu	s1,1433(s1) # 80058011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80027a80:	c88d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027a84:	b88d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027a88:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027a8c:	dc2d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a90:	08200593          	li	a1,130
    80027a94:	00013617          	auipc	a2,0x13
    80027a98:	0fc60613          	addi	a2,a2,252 # 8003ab90 <__func__.0+0xaea0>
    80027a9c:	00008517          	auipc	a0,0x8
    80027aa0:	55450513          	addi	a0,a0,1364 # 8002fff0 <__func__.0+0x300>
    80027aa4:	5e8050ef          	jal	8002d08c <printf>
    80027aa8:	00030797          	auipc	a5,0x30
    80027aac:	5697c783          	lbu	a5,1385(a5) # 80058011 <excpt+0x1>
    80027ab0:	00008597          	auipc	a1,0x8
    80027ab4:	51858593          	addi	a1,a1,1304 # 8002ffc8 <__func__.0+0x2d8>
    80027ab8:	e789                	bnez	a5,80027ac2 <stateen_SE0_test_7+0xe2>
    80027aba:	00008597          	auipc	a1,0x8
    80027abe:	4fe58593          	addi	a1,a1,1278 # 8002ffb8 <__func__.0+0x2c8>
    80027ac2:	00008517          	auipc	a0,0x8
    80027ac6:	54650513          	addi	a0,a0,1350 # 80030008 <__func__.0+0x318>
    80027aca:	5c2050ef          	jal	8002d08c <printf>
    80027ace:	00030797          	auipc	a5,0x30
    80027ad2:	5437c783          	lbu	a5,1347(a5) # 80058011 <excpt+0x1>
    80027ad6:	14079d63          	bnez	a5,80027c30 <stateen_SE0_test_7+0x250>
    80027ada:	4529                	li	a0,10
    80027adc:	29e040ef          	jal	8002bd7a <putchar>
    80027ae0:	4401                	li	s0,0
    80027ae2:	e499                	bnez	s1,80027af0 <stateen_SE0_test_7+0x110>
    80027ae4:	00030417          	auipc	s0,0x30
    80027ae8:	52d44403          	lbu	s0,1325(s0) # 80058011 <excpt+0x1>
    80027aec:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80027af0:	4501                	li	a0,0
    80027af2:	c16d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027af6:	b16d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027afa:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027afe:	d50d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027b02:	08200593          	li	a1,130
    80027b06:	00013617          	auipc	a2,0x13
    80027b0a:	0e260613          	addi	a2,a2,226 # 8003abe8 <__func__.0+0xaef8>
    80027b0e:	00008517          	auipc	a0,0x8
    80027b12:	4e250513          	addi	a0,a0,1250 # 8002fff0 <__func__.0+0x300>
    80027b16:	576050ef          	jal	8002d08c <printf>
    80027b1a:	00030797          	auipc	a5,0x30
    80027b1e:	4f77c783          	lbu	a5,1271(a5) # 80058011 <excpt+0x1>
    80027b22:	00008597          	auipc	a1,0x8
    80027b26:	4a658593          	addi	a1,a1,1190 # 8002ffc8 <__func__.0+0x2d8>
    80027b2a:	e789                	bnez	a5,80027b34 <stateen_SE0_test_7+0x154>
    80027b2c:	00008597          	auipc	a1,0x8
    80027b30:	48c58593          	addi	a1,a1,1164 # 8002ffb8 <__func__.0+0x2c8>
    80027b34:	00008517          	auipc	a0,0x8
    80027b38:	4d450513          	addi	a0,a0,1236 # 80030008 <__func__.0+0x318>
    80027b3c:	550050ef          	jal	8002d08c <printf>
    80027b40:	00030797          	auipc	a5,0x30
    80027b44:	4d17c783          	lbu	a5,1233(a5) # 80058011 <excpt+0x1>
    80027b48:	0c079963          	bnez	a5,80027c1a <stateen_SE0_test_7+0x23a>
    80027b4c:	4529                	li	a0,10
    80027b4e:	22c040ef          	jal	8002bd7a <putchar>
    80027b52:	c419                	beqz	s0,80027b60 <stateen_SE0_test_7+0x180>
    80027b54:	00030417          	auipc	s0,0x30
    80027b58:	4bd44403          	lbu	s0,1213(s0) # 80058011 <excpt+0x1>
    80027b5c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80027b60:	4501                	li	a0,0
    80027b62:	ba6d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027b66:	aa6d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027b6a:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027b6e:	ce0d90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027b72:	08200593          	li	a1,130
    80027b76:	00013617          	auipc	a2,0x13
    80027b7a:	0c260613          	addi	a2,a2,194 # 8003ac38 <__func__.0+0xaf48>
    80027b7e:	00008517          	auipc	a0,0x8
    80027b82:	47250513          	addi	a0,a0,1138 # 8002fff0 <__func__.0+0x300>
    80027b86:	506050ef          	jal	8002d08c <printf>
    80027b8a:	00030797          	auipc	a5,0x30
    80027b8e:	4877c783          	lbu	a5,1159(a5) # 80058011 <excpt+0x1>
    80027b92:	00008597          	auipc	a1,0x8
    80027b96:	43658593          	addi	a1,a1,1078 # 8002ffc8 <__func__.0+0x2d8>
    80027b9a:	e789                	bnez	a5,80027ba4 <stateen_SE0_test_7+0x1c4>
    80027b9c:	00008597          	auipc	a1,0x8
    80027ba0:	41c58593          	addi	a1,a1,1052 # 8002ffb8 <__func__.0+0x2c8>
    80027ba4:	00008517          	auipc	a0,0x8
    80027ba8:	46450513          	addi	a0,a0,1124 # 80030008 <__func__.0+0x318>
    80027bac:	4e0050ef          	jal	8002d08c <printf>
    80027bb0:	00030797          	auipc	a5,0x30
    80027bb4:	4617c783          	lbu	a5,1121(a5) # 80058011 <excpt+0x1>
    80027bb8:	e7b1                	bnez	a5,80027c04 <stateen_SE0_test_7+0x224>
    80027bba:	4529                	li	a0,10
    80027bbc:	1be040ef          	jal	8002bd7a <putchar>
    80027bc0:	c411                	beqz	s0,80027bcc <stateen_SE0_test_7+0x1ec>
    80027bc2:	00030797          	auipc	a5,0x30
    80027bc6:	44f7c783          	lbu	a5,1103(a5) # 80058011 <excpt+0x1>
    80027bca:	c79d                	beqz	a5,80027bf8 <stateen_SE0_test_7+0x218>
    80027bcc:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80027bce:	00008597          	auipc	a1,0x8
    80027bd2:	3fa58593          	addi	a1,a1,1018 # 8002ffc8 <__func__.0+0x2d8>
    80027bd6:	00008517          	auipc	a0,0x8
    80027bda:	49a50513          	addi	a0,a0,1178 # 80030070 <__func__.0+0x380>
    80027bde:	4ae050ef          	jal	8002d08c <printf>
    80027be2:	4511                	li	a0,4
    80027be4:	b24d90ef          	jal	80000f08 <goto_priv>
    80027be8:	cebd90ef          	jal	800018d2 <reset_state>
}
    80027bec:	60e2                	ld	ra,24(sp)
    80027bee:	8522                	mv	a0,s0
    80027bf0:	6442                	ld	s0,16(sp)
    80027bf2:	64a2                	ld	s1,8(sp)
    80027bf4:	6105                	addi	sp,sp,32
    80027bf6:	8082                	ret
    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027bf8:	4405                	li	s0,1
    TEST_END();
    80027bfa:	00008597          	auipc	a1,0x8
    80027bfe:	3be58593          	addi	a1,a1,958 # 8002ffb8 <__func__.0+0x2c8>
    80027c02:	bfd1                	j	80027bd6 <stateen_SE0_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027c04:	00008517          	auipc	a0,0x8
    80027c08:	40c50513          	addi	a0,a0,1036 # 80030010 <__func__.0+0x320>
    80027c0c:	480050ef          	jal	8002d08c <printf>
    80027c10:	02900513          	li	a0,41
    80027c14:	166040ef          	jal	8002bd7a <putchar>
    80027c18:	b74d                	j	80027bba <stateen_SE0_test_7+0x1da>
    TEST_ASSERT("vu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027c1a:	00008517          	auipc	a0,0x8
    80027c1e:	3f650513          	addi	a0,a0,1014 # 80030010 <__func__.0+0x320>
    80027c22:	46a050ef          	jal	8002d08c <printf>
    80027c26:	02900513          	li	a0,41
    80027c2a:	150040ef          	jal	8002bd7a <putchar>
    80027c2e:	bf39                	j	80027b4c <stateen_SE0_test_7+0x16c>
    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027c30:	00008517          	auipc	a0,0x8
    80027c34:	3e050513          	addi	a0,a0,992 # 80030010 <__func__.0+0x320>
    80027c38:	454050ef          	jal	8002d08c <printf>
    80027c3c:	02900513          	li	a0,41
    80027c40:	13a040ef          	jal	8002bd7a <putchar>
    80027c44:	bd59                	j	80027ada <stateen_SE0_test_7+0xfa>
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027c46:	00008517          	auipc	a0,0x8
    80027c4a:	3ca50513          	addi	a0,a0,970 # 80030010 <__func__.0+0x320>
    80027c4e:	43e050ef          	jal	8002d08c <printf>
    80027c52:	02900513          	li	a0,41
    80027c56:	124040ef          	jal	8002bd7a <putchar>
    80027c5a:	bd19                	j	80027a70 <stateen_SE0_test_7+0x90>

0000000080027c5c <stateen_SE0_test_8>:




bool stateen_SE0_test_8(){
    80027c5c:	1101                	addi	sp,sp,-32

    TEST_START();
    80027c5e:	00008597          	auipc	a1,0x8
    80027c62:	d8258593          	addi	a1,a1,-638 # 8002f9e0 <__func__.0>
    80027c66:	00008517          	auipc	a0,0x8
    80027c6a:	37250513          	addi	a0,a0,882 # 8002ffd8 <__func__.0+0x2e8>
bool stateen_SE0_test_8(){
    80027c6e:	ec06                	sd	ra,24(sp)
    80027c70:	e822                	sd	s0,16(sp)
    80027c72:	e426                	sd	s1,8(sp)
    TEST_START();
    80027c74:	418050ef          	jal	8002d08c <printf>
    80027c78:	4529                	li	a0,10
    80027c7a:	100040ef          	jal	8002bd7a <putchar>
    
    goto_priv(PRIV_M);
    80027c7e:	4511                	li	a0,4
    80027c80:	a88d90ef          	jal	80000f08 <goto_priv>
    //当mstateen.SE0=1,v=0时,可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027c84:	57fd                	li	a5,-1
    80027c86:	17fe                	slli	a5,a5,0x3f
    80027c88:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80027c8c:	60c7a073          	csrs	hstateen0,a5
    CSRS(CSR_SSTATEEN0 , MSTATEEN_SE0);
    80027c90:	10c7a073          	csrs	sstateen0,a5

    goto_priv(PRIV_HS);
    80027c94:	450d                	li	a0,3
    80027c96:	a72d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027c9a:	972d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027c9e:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027ca2:	bacd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80027ca6:	08200593          	li	a1,130
    80027caa:	00013617          	auipc	a2,0x13
    80027cae:	fe660613          	addi	a2,a2,-26 # 8003ac90 <__func__.0+0xafa0>
    80027cb2:	00008517          	auipc	a0,0x8
    80027cb6:	33e50513          	addi	a0,a0,830 # 8002fff0 <__func__.0+0x300>
    80027cba:	3d2050ef          	jal	8002d08c <printf>
    80027cbe:	00030797          	auipc	a5,0x30
    80027cc2:	3537c783          	lbu	a5,851(a5) # 80058011 <excpt+0x1>
    80027cc6:	00008597          	auipc	a1,0x8
    80027cca:	2f258593          	addi	a1,a1,754 # 8002ffb8 <__func__.0+0x2c8>
    80027cce:	c789                	beqz	a5,80027cd8 <stateen_SE0_test_8+0x7c>
    80027cd0:	00008597          	auipc	a1,0x8
    80027cd4:	2f858593          	addi	a1,a1,760 # 8002ffc8 <__func__.0+0x2d8>
    80027cd8:	00008517          	auipc	a0,0x8
    80027cdc:	33050513          	addi	a0,a0,816 # 80030008 <__func__.0+0x318>
    80027ce0:	3ac050ef          	jal	8002d08c <printf>
    80027ce4:	00030797          	auipc	a5,0x30
    80027ce8:	32d7c783          	lbu	a5,813(a5) # 80058011 <excpt+0x1>
    80027cec:	4e079a63          	bnez	a5,800281e0 <stateen_SE0_test_8+0x584>
    80027cf0:	4529                	li	a0,10
    80027cf2:	088040ef          	jal	8002bd7a <putchar>
    80027cf6:	00030497          	auipc	s1,0x30
    80027cfa:	31b4c483          	lbu	s1,795(s1) # 80058011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SSTATEEN0);
    80027cfe:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027d02:	b4cd90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80027d06:	08200593          	li	a1,130
    80027d0a:	00013617          	auipc	a2,0x13
    80027d0e:	fde60613          	addi	a2,a2,-34 # 8003ace8 <__func__.0+0xaff8>
    80027d12:	00008517          	auipc	a0,0x8
    80027d16:	2de50513          	addi	a0,a0,734 # 8002fff0 <__func__.0+0x300>
    80027d1a:	372050ef          	jal	8002d08c <printf>
    80027d1e:	00030797          	auipc	a5,0x30
    80027d22:	2f37c783          	lbu	a5,755(a5) # 80058011 <excpt+0x1>
    80027d26:	00008597          	auipc	a1,0x8
    80027d2a:	2a258593          	addi	a1,a1,674 # 8002ffc8 <__func__.0+0x2d8>
    80027d2e:	e789                	bnez	a5,80027d38 <stateen_SE0_test_8+0xdc>
    80027d30:	00008597          	auipc	a1,0x8
    80027d34:	28858593          	addi	a1,a1,648 # 8002ffb8 <__func__.0+0x2c8>
    80027d38:	00008517          	auipc	a0,0x8
    80027d3c:	2d050513          	addi	a0,a0,720 # 80030008 <__func__.0+0x318>
    80027d40:	34c050ef          	jal	8002d08c <printf>
    80027d44:	00030797          	auipc	a5,0x30
    80027d48:	2cd7c783          	lbu	a5,717(a5) # 80058011 <excpt+0x1>
    80027d4c:	46079f63          	bnez	a5,800281ca <stateen_SE0_test_8+0x56e>
    80027d50:	4529                	li	a0,10
    80027d52:	028040ef          	jal	8002bd7a <putchar>
    80027d56:	4401                	li	s0,0
    80027d58:	e499                	bnez	s1,80027d66 <stateen_SE0_test_8+0x10a>
    80027d5a:	00030417          	auipc	s0,0x30
    80027d5e:	2b744403          	lbu	s0,695(s0) # 80058011 <excpt+0x1>
    80027d62:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80027d66:	4505                	li	a0,1
    80027d68:	9a0d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027d6c:	8a0d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027d70:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027d74:	adad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027d78:	08200593          	li	a1,130
    80027d7c:	00013617          	auipc	a2,0x13
    80027d80:	fc460613          	addi	a2,a2,-60 # 8003ad40 <__func__.0+0xb050>
    80027d84:	00008517          	auipc	a0,0x8
    80027d88:	26c50513          	addi	a0,a0,620 # 8002fff0 <__func__.0+0x300>
    80027d8c:	300050ef          	jal	8002d08c <printf>
    80027d90:	00030797          	auipc	a5,0x30
    80027d94:	2817c783          	lbu	a5,641(a5) # 80058011 <excpt+0x1>
    80027d98:	00008597          	auipc	a1,0x8
    80027d9c:	23058593          	addi	a1,a1,560 # 8002ffc8 <__func__.0+0x2d8>
    80027da0:	e789                	bnez	a5,80027daa <stateen_SE0_test_8+0x14e>
    80027da2:	00008597          	auipc	a1,0x8
    80027da6:	21658593          	addi	a1,a1,534 # 8002ffb8 <__func__.0+0x2c8>
    80027daa:	00008517          	auipc	a0,0x8
    80027dae:	25e50513          	addi	a0,a0,606 # 80030008 <__func__.0+0x318>
    80027db2:	2da050ef          	jal	8002d08c <printf>
    80027db6:	00030797          	auipc	a5,0x30
    80027dba:	25b7c783          	lbu	a5,603(a5) # 80058011 <excpt+0x1>
    80027dbe:	3e079b63          	bnez	a5,800281b4 <stateen_SE0_test_8+0x558>
    80027dc2:	4529                	li	a0,10
    80027dc4:	7b7030ef          	jal	8002bd7a <putchar>
    80027dc8:	c419                	beqz	s0,80027dd6 <stateen_SE0_test_8+0x17a>
    80027dca:	00030417          	auipc	s0,0x30
    80027dce:	24744403          	lbu	s0,583(s0) # 80058011 <excpt+0x1>
    80027dd2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80027dd6:	4505                	li	a0,1
    80027dd8:	930d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027ddc:	830d90ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027de0:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027de4:	a6ad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027de8:	08200593          	li	a1,130
    80027dec:	00013617          	auipc	a2,0x13
    80027df0:	fa460613          	addi	a2,a2,-92 # 8003ad90 <__func__.0+0xb0a0>
    80027df4:	00008517          	auipc	a0,0x8
    80027df8:	1fc50513          	addi	a0,a0,508 # 8002fff0 <__func__.0+0x300>
    80027dfc:	290050ef          	jal	8002d08c <printf>
    80027e00:	00030797          	auipc	a5,0x30
    80027e04:	2117c783          	lbu	a5,529(a5) # 80058011 <excpt+0x1>
    80027e08:	00008597          	auipc	a1,0x8
    80027e0c:	1c058593          	addi	a1,a1,448 # 8002ffc8 <__func__.0+0x2d8>
    80027e10:	e789                	bnez	a5,80027e1a <stateen_SE0_test_8+0x1be>
    80027e12:	00008597          	auipc	a1,0x8
    80027e16:	1a658593          	addi	a1,a1,422 # 8002ffb8 <__func__.0+0x2c8>
    80027e1a:	00008517          	auipc	a0,0x8
    80027e1e:	1ee50513          	addi	a0,a0,494 # 80030008 <__func__.0+0x318>
    80027e22:	26a050ef          	jal	8002d08c <printf>
    80027e26:	00030797          	auipc	a5,0x30
    80027e2a:	1eb7c783          	lbu	a5,491(a5) # 80058011 <excpt+0x1>
    80027e2e:	36079863          	bnez	a5,8002819e <stateen_SE0_test_8+0x542>
    80027e32:	4529                	li	a0,10
    80027e34:	747030ef          	jal	8002bd7a <putchar>
    80027e38:	c419                	beqz	s0,80027e46 <stateen_SE0_test_8+0x1ea>
    80027e3a:	00030417          	auipc	s0,0x30
    80027e3e:	1d744403          	lbu	s0,471(s0) # 80058011 <excpt+0x1>
    80027e42:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80027e46:	4511                	li	a0,4
    80027e48:	8c0d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027e4c:	fc1d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027e50:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027e54:	9fad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027e58:	08200593          	li	a1,130
    80027e5c:	00013617          	auipc	a2,0x13
    80027e60:	f8c60613          	addi	a2,a2,-116 # 8003ade8 <__func__.0+0xb0f8>
    80027e64:	00008517          	auipc	a0,0x8
    80027e68:	18c50513          	addi	a0,a0,396 # 8002fff0 <__func__.0+0x300>
    80027e6c:	220050ef          	jal	8002d08c <printf>
    80027e70:	00030797          	auipc	a5,0x30
    80027e74:	1a17c783          	lbu	a5,417(a5) # 80058011 <excpt+0x1>
    80027e78:	00008597          	auipc	a1,0x8
    80027e7c:	15058593          	addi	a1,a1,336 # 8002ffc8 <__func__.0+0x2d8>
    80027e80:	e789                	bnez	a5,80027e8a <stateen_SE0_test_8+0x22e>
    80027e82:	00008597          	auipc	a1,0x8
    80027e86:	13658593          	addi	a1,a1,310 # 8002ffb8 <__func__.0+0x2c8>
    80027e8a:	00008517          	auipc	a0,0x8
    80027e8e:	17e50513          	addi	a0,a0,382 # 80030008 <__func__.0+0x318>
    80027e92:	1fa050ef          	jal	8002d08c <printf>
    80027e96:	00030797          	auipc	a5,0x30
    80027e9a:	17b7c783          	lbu	a5,379(a5) # 80058011 <excpt+0x1>
    80027e9e:	2e079563          	bnez	a5,80028188 <stateen_SE0_test_8+0x52c>
    80027ea2:	4529                	li	a0,10
    80027ea4:	6d7030ef          	jal	8002bd7a <putchar>
    80027ea8:	c419                	beqz	s0,80027eb6 <stateen_SE0_test_8+0x25a>
    80027eaa:	00030417          	auipc	s0,0x30
    80027eae:	16744403          	lbu	s0,359(s0) # 80058011 <excpt+0x1>
    80027eb2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80027eb6:	4511                	li	a0,4
    80027eb8:	850d90ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027ebc:	f51d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027ec0:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027ec4:	98ad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ec8:	08200593          	li	a1,130
    80027ecc:	00013617          	auipc	a2,0x13
    80027ed0:	f6c60613          	addi	a2,a2,-148 # 8003ae38 <__func__.0+0xb148>
    80027ed4:	00008517          	auipc	a0,0x8
    80027ed8:	11c50513          	addi	a0,a0,284 # 8002fff0 <__func__.0+0x300>
    80027edc:	1b0050ef          	jal	8002d08c <printf>
    80027ee0:	00030797          	auipc	a5,0x30
    80027ee4:	1317c783          	lbu	a5,305(a5) # 80058011 <excpt+0x1>
    80027ee8:	00008597          	auipc	a1,0x8
    80027eec:	0e058593          	addi	a1,a1,224 # 8002ffc8 <__func__.0+0x2d8>
    80027ef0:	e789                	bnez	a5,80027efa <stateen_SE0_test_8+0x29e>
    80027ef2:	00008597          	auipc	a1,0x8
    80027ef6:	0c658593          	addi	a1,a1,198 # 8002ffb8 <__func__.0+0x2c8>
    80027efa:	00008517          	auipc	a0,0x8
    80027efe:	10e50513          	addi	a0,a0,270 # 80030008 <__func__.0+0x318>
    80027f02:	18a050ef          	jal	8002d08c <printf>
    80027f06:	00030797          	auipc	a5,0x30
    80027f0a:	10b7c783          	lbu	a5,267(a5) # 80058011 <excpt+0x1>
    80027f0e:	26079263          	bnez	a5,80028172 <stateen_SE0_test_8+0x516>
    80027f12:	4529                	li	a0,10
    80027f14:	667030ef          	jal	8002bd7a <putchar>
    80027f18:	c419                	beqz	s0,80027f26 <stateen_SE0_test_8+0x2ca>
    80027f1a:	00030417          	auipc	s0,0x30
    80027f1e:	0f744403          	lbu	s0,247(s0) # 80058011 <excpt+0x1>
    80027f22:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VS);
    80027f26:	4509                	li	a0,2
    80027f28:	fe1d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027f2c:	ee1d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027f30:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027f34:	91ad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027f38:	08200593          	li	a1,130
    80027f3c:	00013617          	auipc	a2,0x13
    80027f40:	c0460613          	addi	a2,a2,-1020 # 8003ab40 <__func__.0+0xae50>
    80027f44:	00008517          	auipc	a0,0x8
    80027f48:	0ac50513          	addi	a0,a0,172 # 8002fff0 <__func__.0+0x300>
    80027f4c:	140050ef          	jal	8002d08c <printf>
    80027f50:	00030797          	auipc	a5,0x30
    80027f54:	0c17c783          	lbu	a5,193(a5) # 80058011 <excpt+0x1>
    80027f58:	00008597          	auipc	a1,0x8
    80027f5c:	07058593          	addi	a1,a1,112 # 8002ffc8 <__func__.0+0x2d8>
    80027f60:	e789                	bnez	a5,80027f6a <stateen_SE0_test_8+0x30e>
    80027f62:	00008597          	auipc	a1,0x8
    80027f66:	05658593          	addi	a1,a1,86 # 8002ffb8 <__func__.0+0x2c8>
    80027f6a:	00008517          	auipc	a0,0x8
    80027f6e:	09e50513          	addi	a0,a0,158 # 80030008 <__func__.0+0x318>
    80027f72:	11a050ef          	jal	8002d08c <printf>
    80027f76:	00030797          	auipc	a5,0x30
    80027f7a:	09b7c783          	lbu	a5,155(a5) # 80058011 <excpt+0x1>
    80027f7e:	1c079f63          	bnez	a5,8002815c <stateen_SE0_test_8+0x500>
    80027f82:	4529                	li	a0,10
    80027f84:	5f7030ef          	jal	8002bd7a <putchar>
    80027f88:	c419                	beqz	s0,80027f96 <stateen_SE0_test_8+0x33a>
    80027f8a:	00030417          	auipc	s0,0x30
    80027f8e:	08744403          	lbu	s0,135(s0) # 80058011 <excpt+0x1>
    80027f92:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80027f96:	4509                	li	a0,2
    80027f98:	f71d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80027f9c:	e71d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027fa0:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027fa4:	8aad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027fa8:	08200593          	li	a1,130
    80027fac:	00013617          	auipc	a2,0x13
    80027fb0:	be460613          	addi	a2,a2,-1052 # 8003ab90 <__func__.0+0xaea0>
    80027fb4:	00008517          	auipc	a0,0x8
    80027fb8:	03c50513          	addi	a0,a0,60 # 8002fff0 <__func__.0+0x300>
    80027fbc:	0d0050ef          	jal	8002d08c <printf>
    80027fc0:	00030797          	auipc	a5,0x30
    80027fc4:	0517c783          	lbu	a5,81(a5) # 80058011 <excpt+0x1>
    80027fc8:	00008597          	auipc	a1,0x8
    80027fcc:	00058593          	mv	a1,a1
    80027fd0:	e789                	bnez	a5,80027fda <stateen_SE0_test_8+0x37e>
    80027fd2:	00008597          	auipc	a1,0x8
    80027fd6:	fe658593          	addi	a1,a1,-26 # 8002ffb8 <__func__.0+0x2c8>
    80027fda:	00008517          	auipc	a0,0x8
    80027fde:	02e50513          	addi	a0,a0,46 # 80030008 <__func__.0+0x318>
    80027fe2:	0aa050ef          	jal	8002d08c <printf>
    80027fe6:	00030797          	auipc	a5,0x30
    80027fea:	02b7c783          	lbu	a5,43(a5) # 80058011 <excpt+0x1>
    80027fee:	14079c63          	bnez	a5,80028146 <stateen_SE0_test_8+0x4ea>
    80027ff2:	4529                	li	a0,10
    80027ff4:	587030ef          	jal	8002bd7a <putchar>
    80027ff8:	c419                	beqz	s0,80028006 <stateen_SE0_test_8+0x3aa>
    80027ffa:	00030417          	auipc	s0,0x30
    80027ffe:	01744403          	lbu	s0,23(s0) # 80058011 <excpt+0x1>
    80028002:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    80028006:	450d                	li	a0,3
    80028008:	f01d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002800c:	e01d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80028010:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80028014:	83ad90ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028018:	08200593          	li	a1,130
    8002801c:	00013617          	auipc	a2,0x13
    80028020:	e6c60613          	addi	a2,a2,-404 # 8003ae88 <__func__.0+0xb198>
    80028024:	00008517          	auipc	a0,0x8
    80028028:	fcc50513          	addi	a0,a0,-52 # 8002fff0 <__func__.0+0x300>
    8002802c:	060050ef          	jal	8002d08c <printf>
    80028030:	00030797          	auipc	a5,0x30
    80028034:	fe17c783          	lbu	a5,-31(a5) # 80058011 <excpt+0x1>
    80028038:	00008597          	auipc	a1,0x8
    8002803c:	f9058593          	addi	a1,a1,-112 # 8002ffc8 <__func__.0+0x2d8>
    80028040:	e789                	bnez	a5,8002804a <stateen_SE0_test_8+0x3ee>
    80028042:	00008597          	auipc	a1,0x8
    80028046:	f7658593          	addi	a1,a1,-138 # 8002ffb8 <__func__.0+0x2c8>
    8002804a:	00008517          	auipc	a0,0x8
    8002804e:	fbe50513          	addi	a0,a0,-66 # 80030008 <__func__.0+0x318>
    80028052:	03a050ef          	jal	8002d08c <printf>
    80028056:	00030797          	auipc	a5,0x30
    8002805a:	fbb7c783          	lbu	a5,-69(a5) # 80058011 <excpt+0x1>
    8002805e:	0c079963          	bnez	a5,80028130 <stateen_SE0_test_8+0x4d4>
    80028062:	4529                	li	a0,10
    80028064:	517030ef          	jal	8002bd7a <putchar>
    80028068:	c419                	beqz	s0,80028076 <stateen_SE0_test_8+0x41a>
    8002806a:	00030417          	auipc	s0,0x30
    8002806e:	fa744403          	lbu	s0,-89(s0) # 80058011 <excpt+0x1>
    80028072:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HS);
    80028076:	450d                	li	a0,3
    80028078:	e91d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002807c:	d91d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80028080:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80028084:	fcbd80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028088:	08200593          	li	a1,130
    8002808c:	00013617          	auipc	a2,0x13
    80028090:	e4c60613          	addi	a2,a2,-436 # 8003aed8 <__func__.0+0xb1e8>
    80028094:	00008517          	auipc	a0,0x8
    80028098:	f5c50513          	addi	a0,a0,-164 # 8002fff0 <__func__.0+0x300>
    8002809c:	7f1040ef          	jal	8002d08c <printf>
    800280a0:	00030797          	auipc	a5,0x30
    800280a4:	f717c783          	lbu	a5,-143(a5) # 80058011 <excpt+0x1>
    800280a8:	00008597          	auipc	a1,0x8
    800280ac:	f2058593          	addi	a1,a1,-224 # 8002ffc8 <__func__.0+0x2d8>
    800280b0:	e789                	bnez	a5,800280ba <stateen_SE0_test_8+0x45e>
    800280b2:	00008597          	auipc	a1,0x8
    800280b6:	f0658593          	addi	a1,a1,-250 # 8002ffb8 <__func__.0+0x2c8>
    800280ba:	00008517          	auipc	a0,0x8
    800280be:	f4e50513          	addi	a0,a0,-178 # 80030008 <__func__.0+0x318>
    800280c2:	7cb040ef          	jal	8002d08c <printf>
    800280c6:	00030797          	auipc	a5,0x30
    800280ca:	f4b7c783          	lbu	a5,-181(a5) # 80058011 <excpt+0x1>
    800280ce:	e7b1                	bnez	a5,8002811a <stateen_SE0_test_8+0x4be>
    800280d0:	4529                	li	a0,10
    800280d2:	4a9030ef          	jal	8002bd7a <putchar>
    800280d6:	c411                	beqz	s0,800280e2 <stateen_SE0_test_8+0x486>
    800280d8:	00030797          	auipc	a5,0x30
    800280dc:	f397c783          	lbu	a5,-199(a5) # 80058011 <excpt+0x1>
    800280e0:	c79d                	beqz	a5,8002810e <stateen_SE0_test_8+0x4b2>
    800280e2:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    800280e4:	00008597          	auipc	a1,0x8
    800280e8:	ee458593          	addi	a1,a1,-284 # 8002ffc8 <__func__.0+0x2d8>
    800280ec:	00008517          	auipc	a0,0x8
    800280f0:	f8450513          	addi	a0,a0,-124 # 80030070 <__func__.0+0x380>
    800280f4:	799040ef          	jal	8002d08c <printf>
    800280f8:	4511                	li	a0,4
    800280fa:	e0fd80ef          	jal	80000f08 <goto_priv>
    800280fe:	fd4d90ef          	jal	800018d2 <reset_state>

    80028102:	60e2                	ld	ra,24(sp)
    80028104:	8522                	mv	a0,s0
    80028106:	6442                	ld	s0,16(sp)
    80028108:	64a2                	ld	s1,8(sp)
    8002810a:	6105                	addi	sp,sp,32
    8002810c:	8082                	ret
    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002810e:	4405                	li	s0,1
    TEST_END();
    80028110:	00008597          	auipc	a1,0x8
    80028114:	ea858593          	addi	a1,a1,-344 # 8002ffb8 <__func__.0+0x2c8>
    80028118:	bfd1                	j	800280ec <stateen_SE0_test_8+0x490>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002811a:	00008517          	auipc	a0,0x8
    8002811e:	ef650513          	addi	a0,a0,-266 # 80030010 <__func__.0+0x320>
    80028122:	76b040ef          	jal	8002d08c <printf>
    80028126:	02900513          	li	a0,41
    8002812a:	451030ef          	jal	8002bd7a <putchar>
    8002812e:	b74d                	j	800280d0 <stateen_SE0_test_8+0x474>
    TEST_ASSERT("hs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028130:	00008517          	auipc	a0,0x8
    80028134:	ee050513          	addi	a0,a0,-288 # 80030010 <__func__.0+0x320>
    80028138:	755040ef          	jal	8002d08c <printf>
    8002813c:	02900513          	li	a0,41
    80028140:	43b030ef          	jal	8002bd7a <putchar>
    80028144:	bf39                	j	80028062 <stateen_SE0_test_8+0x406>
    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028146:	00008517          	auipc	a0,0x8
    8002814a:	eca50513          	addi	a0,a0,-310 # 80030010 <__func__.0+0x320>
    8002814e:	73f040ef          	jal	8002d08c <printf>
    80028152:	02900513          	li	a0,41
    80028156:	425030ef          	jal	8002bd7a <putchar>
    8002815a:	bd61                	j	80027ff2 <stateen_SE0_test_8+0x396>
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002815c:	00008517          	auipc	a0,0x8
    80028160:	eb450513          	addi	a0,a0,-332 # 80030010 <__func__.0+0x320>
    80028164:	729040ef          	jal	8002d08c <printf>
    80028168:	02900513          	li	a0,41
    8002816c:	40f030ef          	jal	8002bd7a <putchar>
    80028170:	bd09                	j	80027f82 <stateen_SE0_test_8+0x326>
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028172:	00008517          	auipc	a0,0x8
    80028176:	e9e50513          	addi	a0,a0,-354 # 80030010 <__func__.0+0x320>
    8002817a:	713040ef          	jal	8002d08c <printf>
    8002817e:	02900513          	li	a0,41
    80028182:	3f9030ef          	jal	8002bd7a <putchar>
    80028186:	b371                	j	80027f12 <stateen_SE0_test_8+0x2b6>
    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80028188:	00008517          	auipc	a0,0x8
    8002818c:	e8850513          	addi	a0,a0,-376 # 80030010 <__func__.0+0x320>
    80028190:	6fd040ef          	jal	8002d08c <printf>
    80028194:	02900513          	li	a0,41
    80028198:	3e3030ef          	jal	8002bd7a <putchar>
    8002819c:	b319                	j	80027ea2 <stateen_SE0_test_8+0x246>
    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002819e:	00008517          	auipc	a0,0x8
    800281a2:	e7250513          	addi	a0,a0,-398 # 80030010 <__func__.0+0x320>
    800281a6:	6e7040ef          	jal	8002d08c <printf>
    800281aa:	02900513          	li	a0,41
    800281ae:	3cd030ef          	jal	8002bd7a <putchar>
    800281b2:	b141                	j	80027e32 <stateen_SE0_test_8+0x1d6>
    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    800281b4:	00008517          	auipc	a0,0x8
    800281b8:	e5c50513          	addi	a0,a0,-420 # 80030010 <__func__.0+0x320>
    800281bc:	6d1040ef          	jal	8002d08c <printf>
    800281c0:	02900513          	li	a0,41
    800281c4:	3b7030ef          	jal	8002bd7a <putchar>
    800281c8:	beed                	j	80027dc2 <stateen_SE0_test_8+0x166>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    800281ca:	00008517          	auipc	a0,0x8
    800281ce:	e4650513          	addi	a0,a0,-442 # 80030010 <__func__.0+0x320>
    800281d2:	6bb040ef          	jal	8002d08c <printf>
    800281d6:	02900513          	li	a0,41
    800281da:	3a1030ef          	jal	8002bd7a <putchar>
    800281de:	be8d                	j	80027d50 <stateen_SE0_test_8+0xf4>
    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    800281e0:	00008517          	auipc	a0,0x8
    800281e4:	e3050513          	addi	a0,a0,-464 # 80030010 <__func__.0+0x320>
    800281e8:	6a5040ef          	jal	8002d08c <printf>
    800281ec:	02900513          	li	a0,41
    800281f0:	38b030ef          	jal	8002bd7a <putchar>
    800281f4:	bcf5                	j	80027cf0 <stateen_SE0_test_8+0x94>

00000000800281f6 <vec_vle_vse_func>:
#include <rvh_test.h>

bool vec_vle_vse_func(){
    800281f6:	7179                	addi	sp,sp,-48
    TEST_START();
    800281f8:	00008597          	auipc	a1,0x8
    800281fc:	80058593          	addi	a1,a1,-2048 # 8002f9f8 <__func__.24>
    80028200:	00008517          	auipc	a0,0x8
    80028204:	dd850513          	addi	a0,a0,-552 # 8002ffd8 <__func__.0+0x2e8>
bool vec_vle_vse_func(){
    80028208:	f406                	sd	ra,40(sp)
    8002820a:	f022                	sd	s0,32(sp)
    8002820c:	ec26                	sd	s1,24(sp)
    8002820e:	e84a                	sd	s2,16(sp)
    TEST_START();
    80028210:	67d040ef          	jal	8002d08c <printf>
    80028214:	4529                	li	a0,10
    80028216:	365030ef          	jal	8002bd7a <putchar>

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=1
    8002821a:	20000793          	li	a5,512
    8002821e:	3007a073          	csrs	mstatus,a5

    uint8_t src8[8] = {1, 2, 3, 4, 5, 6, 7, 8}; 
    80028222:	00013717          	auipc	a4,0x13
    80028226:	d3673703          	ld	a4,-714(a4) # 8003af58 <__func__.0+0xb268>
    uint8_t dest8[8] = {0}; 
    8002822a:	e402                	sd	zero,8(sp)
            : "t0", "memory" /* Clobbered registers */ \
        ); \
    }

// 定义具体的加载和存储指令函数（固定使用 v6 寄存器,其它v指令同固定）
LOAD_VECTOR_TO_REGISTER(vle8_to_v6, "vle8.v", uint8_t, 8);
    8002822c:	4421                	li	s0,8
    uint8_t src8[8] = {1, 2, 3, 4, 5, 6, 7, 8}; 
    8002822e:	e03a                	sd	a4,0(sp)
    80028230:	04100493          	li	s1,65
    80028234:	809472d7          	vsetvl	t0,s0,s1
    80028238:	02010307          	vle8.v	v6,(sp)

    int vl = 8;  // 向量长度

    // 调用向量加载和存储函数
    vle8_to_v6(src8, vl);
    excpt_info();
    8002823c:	e13d80ef          	jal	8000104e <excpt_info>
LOAD_VECTOR_TO_REGISTER(vle16_to_v6, "vle16.v", uint16_t, 16);
LOAD_VECTOR_TO_REGISTER(vle32_to_v6, "vle32.v", uint32_t, 32);
LOAD_VECTOR_TO_REGISTER(vle64_to_v6, "vle64.v", uint64_t, 64);

STORE_VECTOR_FROM_REGISTER(vse8_from_v6, "vse8.v", uint8_t, 8);
    80028240:	003c                	addi	a5,sp,8
    80028242:	809472d7          	vsetvl	t0,s0,s1
    80028246:	02078327          	vse8.v	v6,(a5)
    vse8_from_v6(dest8, vl);

    
    // 打印结果以验证
    printf("After vle8_v:\n");
    8002824a:	00013517          	auipc	a0,0x13
    8002824e:	ce650513          	addi	a0,a0,-794 # 8003af30 <__func__.0+0xb240>
    80028252:	277040ef          	jal	8002ccc8 <puts>
    for (int i = 0; i < 8; i++) {
    80028256:	0024                	addi	s1,sp,8
    80028258:	4401                	li	s0,0
    8002825a:	4921                	li	s2,8
        printf("dest8[%d] = %u  ", i, dest8[i]);
    8002825c:	0004c603          	lbu	a2,0(s1)
    80028260:	85a2                	mv	a1,s0
    80028262:	00013517          	auipc	a0,0x13
    80028266:	cde50513          	addi	a0,a0,-802 # 8003af40 <__func__.0+0xb250>
    for (int i = 0; i < 8; i++) {
    8002826a:	2405                	addiw	s0,s0,1
        printf("dest8[%d] = %u  ", i, dest8[i]);
    8002826c:	621040ef          	jal	8002d08c <printf>
    for (int i = 0; i < 8; i++) {
    80028270:	0485                	addi	s1,s1,1
    80028272:	ff2415e3          	bne	s0,s2,8002825c <vec_vle_vse_func+0x66>
    }
    printf("\n");
    80028276:	4529                	li	a0,10
    80028278:	303030ef          	jal	8002bd7a <putchar>


    TEST_END();
    8002827c:	00008597          	auipc	a1,0x8
    80028280:	d3c58593          	addi	a1,a1,-708 # 8002ffb8 <__func__.0+0x2c8>
    80028284:	00008517          	auipc	a0,0x8
    80028288:	dec50513          	addi	a0,a0,-532 # 80030070 <__func__.0+0x380>
    8002828c:	601040ef          	jal	8002d08c <printf>
    80028290:	4511                	li	a0,4
    80028292:	c77d80ef          	jal	80000f08 <goto_priv>
    80028296:	e3cd90ef          	jal	800018d2 <reset_state>
}
    8002829a:	70a2                	ld	ra,40(sp)
    8002829c:	7402                	ld	s0,32(sp)
    8002829e:	64e2                	ld	s1,24(sp)
    800282a0:	6942                	ld	s2,16(sp)
    800282a2:	4505                	li	a0,1
    800282a4:	6145                	addi	sp,sp,48
    800282a6:	8082                	ret

00000000800282a8 <vec_test_1>:



bool vec_test_1(){
    800282a8:	1101                	addi	sp,sp,-32
    
    TEST_START();
    800282aa:	00007597          	auipc	a1,0x7
    800282ae:	76658593          	addi	a1,a1,1894 # 8002fa10 <__func__.23>
    800282b2:	00008517          	auipc	a0,0x8
    800282b6:	d2650513          	addi	a0,a0,-730 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_1(){
    800282ba:	ec06                	sd	ra,24(sp)
    800282bc:	e822                	sd	s0,16(sp)
    800282be:	e426                	sd	s1,8(sp)
    TEST_START();
    800282c0:	5cd040ef          	jal	8002d08c <printf>
    800282c4:	4529                	li	a0,10
    800282c6:	2b5030ef          	jal	8002bd7a <putchar>
    // 当 mstatus.VS 被设置为 Off 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    800282ca:	20000713          	li	a4,512
    800282ce:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800282d2:	40000793          	li	a5,1024
    800282d6:	3007b073          	csrc	mstatus,a5

static inline void set_vcpop_conditions(int vl, int sew, int lmull, int v0_init, int v2_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;

    asm volatile (
    800282da:	46a1                	li	a3,8
    800282dc:	4645                	li	a2,17
    800282de:	80c6f2d7          	vsetvl	t0,a3,a2
    800282e2:	5e00b057          	vmv.v.i	v0,1
    800282e6:	5e00b157          	vmv.v.i	v2,1
    int v2_init = 1;     // 初始化 v2 的值为全 1

    // 设置 vcpop.m 的执行条件
    set_vcpop_conditions(vl, sew, lmull, v0_init, v2_init);

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800282ea:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800282ee:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    800282f2:	b1bd80ef          	jal	80000e0c <test_setup_except_function>
    // 执行 vcpop.m 指令并返回结果
    uint32_t result = execute_vcpop_v2();
    800282f6:	402827d7          	vcpop.m	a5,v2,v0.t

    excpt_info();
    800282fa:	d55d80ef          	jal	8000104e <excpt_info>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    800282fe:	08200593          	li	a1,130
    80028302:	00013617          	auipc	a2,0x13
    80028306:	c6660613          	addi	a2,a2,-922 # 8003af68 <__func__.0+0xb278>
    8002830a:	00008517          	auipc	a0,0x8
    8002830e:	ce650513          	addi	a0,a0,-794 # 8002fff0 <__func__.0+0x300>
    80028312:	57b040ef          	jal	8002d08c <printf>
    80028316:	00030797          	auipc	a5,0x30
    8002831a:	cfb7c783          	lbu	a5,-773(a5) # 80058011 <excpt+0x1>
    8002831e:	00030497          	auipc	s1,0x30
    80028322:	cf248493          	addi	s1,s1,-782 # 80058010 <excpt>
    80028326:	00008597          	auipc	a1,0x8
    8002832a:	ca258593          	addi	a1,a1,-862 # 8002ffc8 <__func__.0+0x2d8>
    8002832e:	cf89                	beqz	a5,80028348 <vec_test_1+0xa0>
    80028330:	6498                	ld	a4,8(s1)
    80028332:	4789                	li	a5,2
    80028334:	00008597          	auipc	a1,0x8
    80028338:	c8458593          	addi	a1,a1,-892 # 8002ffb8 <__func__.0+0x2c8>
    8002833c:	00f70663          	beq	a4,a5,80028348 <vec_test_1+0xa0>
    80028340:	00008597          	auipc	a1,0x8
    80028344:	c8858593          	addi	a1,a1,-888 # 8002ffc8 <__func__.0+0x2d8>
    80028348:	00008517          	auipc	a0,0x8
    8002834c:	cc050513          	addi	a0,a0,-832 # 80030008 <__func__.0+0x318>
    80028350:	53d040ef          	jal	8002d08c <printf>
    80028354:	00030797          	auipc	a5,0x30
    80028358:	cbd7c783          	lbu	a5,-835(a5) # 80058011 <excpt+0x1>
    8002835c:	c789                	beqz	a5,80028366 <vec_test_1+0xbe>
    8002835e:	6498                	ld	a4,8(s1)
    80028360:	4789                	li	a5,2
    80028362:	00f70c63          	beq	a4,a5,8002837a <vec_test_1+0xd2>
    80028366:	00008517          	auipc	a0,0x8
    8002836a:	caa50513          	addi	a0,a0,-854 # 80030010 <__func__.0+0x320>
    8002836e:	51f040ef          	jal	8002d08c <printf>
    80028372:	02900513          	li	a0,41
    80028376:	205030ef          	jal	8002bd7a <putchar>
    8002837a:	4529                	li	a0,10
    8002837c:	1ff030ef          	jal	8002bd7a <putchar>
    80028380:	00030417          	auipc	s0,0x30
    80028384:	c9144403          	lbu	s0,-879(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028388:	00008597          	auipc	a1,0x8
    8002838c:	c4058593          	addi	a1,a1,-960 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    80028390:	cc11                	beqz	s0,800283ac <vec_test_1+0x104>
    80028392:	6498                	ld	a4,8(s1)
    80028394:	4789                	li	a5,2
    TEST_END();
    80028396:	00008597          	auipc	a1,0x8
    8002839a:	c2258593          	addi	a1,a1,-990 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    8002839e:	00f70763          	beq	a4,a5,800283ac <vec_test_1+0x104>
    800283a2:	4401                	li	s0,0
    TEST_END();
    800283a4:	00008597          	auipc	a1,0x8
    800283a8:	c2458593          	addi	a1,a1,-988 # 8002ffc8 <__func__.0+0x2d8>
    800283ac:	00008517          	auipc	a0,0x8
    800283b0:	cc450513          	addi	a0,a0,-828 # 80030070 <__func__.0+0x380>
    800283b4:	4d9040ef          	jal	8002d08c <printf>
    800283b8:	4511                	li	a0,4
    800283ba:	b4fd80ef          	jal	80000f08 <goto_priv>
    800283be:	d14d90ef          	jal	800018d2 <reset_state>
}
    800283c2:	60e2                	ld	ra,24(sp)
    800283c4:	8522                	mv	a0,s0
    800283c6:	6442                	ld	s0,16(sp)
    800283c8:	64a2                	ld	s1,8(sp)
    800283ca:	6105                	addi	sp,sp,32
    800283cc:	8082                	ret

00000000800283ce <vec_test_2>:

bool vec_test_2(){
    800283ce:	1101                	addi	sp,sp,-32

    TEST_START();
    800283d0:	00007597          	auipc	a1,0x7
    800283d4:	65058593          	addi	a1,a1,1616 # 8002fa20 <__func__.22>
    800283d8:	00008517          	auipc	a0,0x8
    800283dc:	c0050513          	addi	a0,a0,-1024 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_2(){
    800283e0:	ec06                	sd	ra,24(sp)
    800283e2:	e822                	sd	s0,16(sp)
    800283e4:	e426                	sd	s1,8(sp)
    TEST_START();
    800283e6:	4a7040ef          	jal	8002d08c <printf>
    800283ea:	4529                	li	a0,10
    800283ec:	18f030ef          	jal	8002bd7a <putchar>
    // 当 mstatus.VS 被设置为 Off 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800283f0:	20000793          	li	a5,512
    800283f4:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800283f8:	40000793          	li	a5,1024
    800283fc:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    80028400:	a0dd80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VSTART);
    80028404:	008027f3          	csrr	a5,vstart
    excpt_info();
    80028408:	c47d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    8002840c:	08200593          	li	a1,130
    80028410:	00013617          	auipc	a2,0x13
    80028414:	ba860613          	addi	a2,a2,-1112 # 8003afb8 <__func__.0+0xb2c8>
    80028418:	00008517          	auipc	a0,0x8
    8002841c:	bd850513          	addi	a0,a0,-1064 # 8002fff0 <__func__.0+0x300>
    80028420:	46d040ef          	jal	8002d08c <printf>
    80028424:	00030797          	auipc	a5,0x30
    80028428:	bed7c783          	lbu	a5,-1043(a5) # 80058011 <excpt+0x1>
    8002842c:	00030497          	auipc	s1,0x30
    80028430:	be448493          	addi	s1,s1,-1052 # 80058010 <excpt>
    80028434:	00008597          	auipc	a1,0x8
    80028438:	b9458593          	addi	a1,a1,-1132 # 8002ffc8 <__func__.0+0x2d8>
    8002843c:	cf89                	beqz	a5,80028456 <vec_test_2+0x88>
    8002843e:	6498                	ld	a4,8(s1)
    80028440:	4789                	li	a5,2
    80028442:	00008597          	auipc	a1,0x8
    80028446:	b7658593          	addi	a1,a1,-1162 # 8002ffb8 <__func__.0+0x2c8>
    8002844a:	00f70663          	beq	a4,a5,80028456 <vec_test_2+0x88>
    8002844e:	00008597          	auipc	a1,0x8
    80028452:	b7a58593          	addi	a1,a1,-1158 # 8002ffc8 <__func__.0+0x2d8>
    80028456:	00008517          	auipc	a0,0x8
    8002845a:	bb250513          	addi	a0,a0,-1102 # 80030008 <__func__.0+0x318>
    8002845e:	42f040ef          	jal	8002d08c <printf>
    80028462:	00030797          	auipc	a5,0x30
    80028466:	baf7c783          	lbu	a5,-1105(a5) # 80058011 <excpt+0x1>
    8002846a:	c789                	beqz	a5,80028474 <vec_test_2+0xa6>
    8002846c:	6498                	ld	a4,8(s1)
    8002846e:	4789                	li	a5,2
    80028470:	00f70c63          	beq	a4,a5,80028488 <vec_test_2+0xba>
    80028474:	00008517          	auipc	a0,0x8
    80028478:	b9c50513          	addi	a0,a0,-1124 # 80030010 <__func__.0+0x320>
    8002847c:	411040ef          	jal	8002d08c <printf>
    80028480:	02900513          	li	a0,41
    80028484:	0f7030ef          	jal	8002bd7a <putchar>
    80028488:	4529                	li	a0,10
    8002848a:	0f1030ef          	jal	8002bd7a <putchar>
    8002848e:	00030417          	auipc	s0,0x30
    80028492:	b8344403          	lbu	s0,-1149(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028496:	00008597          	auipc	a1,0x8
    8002849a:	b3258593          	addi	a1,a1,-1230 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    8002849e:	cc11                	beqz	s0,800284ba <vec_test_2+0xec>
    800284a0:	6498                	ld	a4,8(s1)
    800284a2:	4789                	li	a5,2
    TEST_END();
    800284a4:	00008597          	auipc	a1,0x8
    800284a8:	b1458593          	addi	a1,a1,-1260 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    800284ac:	00f70763          	beq	a4,a5,800284ba <vec_test_2+0xec>
    800284b0:	4401                	li	s0,0
    TEST_END();
    800284b2:	00008597          	auipc	a1,0x8
    800284b6:	b1658593          	addi	a1,a1,-1258 # 8002ffc8 <__func__.0+0x2d8>
    800284ba:	00008517          	auipc	a0,0x8
    800284be:	bb650513          	addi	a0,a0,-1098 # 80030070 <__func__.0+0x380>
    800284c2:	3cb040ef          	jal	8002d08c <printf>
    800284c6:	4511                	li	a0,4
    800284c8:	a41d80ef          	jal	80000f08 <goto_priv>
    800284cc:	c06d90ef          	jal	800018d2 <reset_state>
}
    800284d0:	60e2                	ld	ra,24(sp)
    800284d2:	8522                	mv	a0,s0
    800284d4:	6442                	ld	s0,16(sp)
    800284d6:	64a2                	ld	s1,8(sp)
    800284d8:	6105                	addi	sp,sp,32
    800284da:	8082                	ret

00000000800284dc <vec_test_3>:


bool vec_test_3(){             
    800284dc:	1101                	addi	sp,sp,-32

    TEST_START();
    800284de:	00007597          	auipc	a1,0x7
    800284e2:	55258593          	addi	a1,a1,1362 # 8002fa30 <__func__.21>
    800284e6:	00008517          	auipc	a0,0x8
    800284ea:	af250513          	addi	a0,a0,-1294 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_3(){             
    800284ee:	ec06                	sd	ra,24(sp)
    800284f0:	e822                	sd	s0,16(sp)
    800284f2:	e426                	sd	s1,8(sp)
    TEST_START();
    800284f4:	399040ef          	jal	8002d08c <printf>
    800284f8:	4529                	li	a0,10
    800284fa:	081030ef          	jal	8002bd7a <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS!=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800284fe:	20000713          	li	a4,512
    80028502:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028506:	40000793          	li	a5,1024
    8002850a:	3007a073          	csrs	mstatus,a5
    asm volatile (
    8002850e:	4689                	li	a3,2
    80028510:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    80028514:	5e00b057          	vmv.v.i	v0,1
    80028518:	5e003257          	vmv.v.i	v4,0
    8002851c:	5e00b357          	vmv.v.i	v6,1
    int vs2_init = 1;    // 初始化 v6（源数据）为 1

    // 设置 vredsum.vs 的执行条件
    set_vredsum_vs_conditions(sew, lmull, vl, vs1_init, vs2_init);

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    80028520:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028524:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    80028528:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    8002852c:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80028530:	4509                	li	a0,2
    80028532:	9d7d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80028536:	8d7d80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    8002853a:	00222157          	vredsum.vs	v2,v2,v4,v0.t
    execute_vredsum_vs();           // 执行 vredsum.vs 指令并获取结果
    excpt_info();
    8002853e:	b11d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    80028542:	08200593          	li	a1,130
    80028546:	00013617          	auipc	a2,0x13
    8002854a:	aba60613          	addi	a2,a2,-1350 # 8003b000 <__func__.0+0xb310>
    8002854e:	00008517          	auipc	a0,0x8
    80028552:	aa250513          	addi	a0,a0,-1374 # 8002fff0 <__func__.0+0x300>
    80028556:	337040ef          	jal	8002d08c <printf>
    8002855a:	00030797          	auipc	a5,0x30
    8002855e:	ab77c783          	lbu	a5,-1353(a5) # 80058011 <excpt+0x1>
    80028562:	00030497          	auipc	s1,0x30
    80028566:	aae48493          	addi	s1,s1,-1362 # 80058010 <excpt>
    8002856a:	00008597          	auipc	a1,0x8
    8002856e:	a5e58593          	addi	a1,a1,-1442 # 8002ffc8 <__func__.0+0x2d8>
    80028572:	cf89                	beqz	a5,8002858c <vec_test_3+0xb0>
    80028574:	6498                	ld	a4,8(s1)
    80028576:	4789                	li	a5,2
    80028578:	00008597          	auipc	a1,0x8
    8002857c:	a4058593          	addi	a1,a1,-1472 # 8002ffb8 <__func__.0+0x2c8>
    80028580:	00f70663          	beq	a4,a5,8002858c <vec_test_3+0xb0>
    80028584:	00008597          	auipc	a1,0x8
    80028588:	a4458593          	addi	a1,a1,-1468 # 8002ffc8 <__func__.0+0x2d8>
    8002858c:	00008517          	auipc	a0,0x8
    80028590:	a7c50513          	addi	a0,a0,-1412 # 80030008 <__func__.0+0x318>
    80028594:	2f9040ef          	jal	8002d08c <printf>
    80028598:	00030797          	auipc	a5,0x30
    8002859c:	a797c783          	lbu	a5,-1415(a5) # 80058011 <excpt+0x1>
    800285a0:	c789                	beqz	a5,800285aa <vec_test_3+0xce>
    800285a2:	6498                	ld	a4,8(s1)
    800285a4:	4789                	li	a5,2
    800285a6:	00f70c63          	beq	a4,a5,800285be <vec_test_3+0xe2>
    800285aa:	00008517          	auipc	a0,0x8
    800285ae:	a6650513          	addi	a0,a0,-1434 # 80030010 <__func__.0+0x320>
    800285b2:	2db040ef          	jal	8002d08c <printf>
    800285b6:	02900513          	li	a0,41
    800285ba:	7c0030ef          	jal	8002bd7a <putchar>
    800285be:	4529                	li	a0,10
    800285c0:	7ba030ef          	jal	8002bd7a <putchar>
    800285c4:	00030417          	auipc	s0,0x30
    800285c8:	a4d44403          	lbu	s0,-1459(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    800285cc:	00008597          	auipc	a1,0x8
    800285d0:	9fc58593          	addi	a1,a1,-1540 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    800285d4:	cc11                	beqz	s0,800285f0 <vec_test_3+0x114>
    800285d6:	6498                	ld	a4,8(s1)
    800285d8:	4789                	li	a5,2
    TEST_END();
    800285da:	00008597          	auipc	a1,0x8
    800285de:	9de58593          	addi	a1,a1,-1570 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    800285e2:	00f70763          	beq	a4,a5,800285f0 <vec_test_3+0x114>
    800285e6:	4401                	li	s0,0
    TEST_END();
    800285e8:	00008597          	auipc	a1,0x8
    800285ec:	9e058593          	addi	a1,a1,-1568 # 8002ffc8 <__func__.0+0x2d8>
    800285f0:	00008517          	auipc	a0,0x8
    800285f4:	a8050513          	addi	a0,a0,-1408 # 80030070 <__func__.0+0x380>
    800285f8:	295040ef          	jal	8002d08c <printf>
    800285fc:	4511                	li	a0,4
    800285fe:	90bd80ef          	jal	80000f08 <goto_priv>
    80028602:	ad0d90ef          	jal	800018d2 <reset_state>
}
    80028606:	60e2                	ld	ra,24(sp)
    80028608:	8522                	mv	a0,s0
    8002860a:	6442                	ld	s0,16(sp)
    8002860c:	64a2                	ld	s1,8(sp)
    8002860e:	6105                	addi	sp,sp,32
    80028610:	8082                	ret

0000000080028612 <vec_test_4>:


bool vec_test_4(){
    80028612:	1101                	addi	sp,sp,-32

    TEST_START();
    80028614:	00007597          	auipc	a1,0x7
    80028618:	42c58593          	addi	a1,a1,1068 # 8002fa40 <__func__.20>
    8002861c:	00008517          	auipc	a0,0x8
    80028620:	9bc50513          	addi	a0,a0,-1604 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_4(){
    80028624:	ec06                	sd	ra,24(sp)
    80028626:	e822                	sd	s0,16(sp)
    80028628:	e426                	sd	s1,8(sp)
    TEST_START();
    8002862a:	263040ef          	jal	8002d08c <printf>
    8002862e:	4529                	li	a0,10
    80028630:	74a030ef          	jal	8002bd7a <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS!=OFF 时，尝试访问向量 CSR 

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=!0
    80028634:	20000713          	li	a4,512
    80028638:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    8002863c:	40000793          	li	a5,1024
    80028640:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    80028644:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    80028648:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    8002864c:	4509                	li	a0,2
    8002864e:	8bbd80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80028652:	fbad80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VTYPE);
    80028656:	c21027f3          	csrr	a5,vtype
    excpt_info();
    8002865a:	9f5d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    8002865e:	08200593          	li	a1,130
    80028662:	00013617          	auipc	a2,0x13
    80028666:	9fe60613          	addi	a2,a2,-1538 # 8003b060 <__func__.0+0xb370>
    8002866a:	00008517          	auipc	a0,0x8
    8002866e:	98650513          	addi	a0,a0,-1658 # 8002fff0 <__func__.0+0x300>
    80028672:	21b040ef          	jal	8002d08c <printf>
    80028676:	00030797          	auipc	a5,0x30
    8002867a:	99b7c783          	lbu	a5,-1637(a5) # 80058011 <excpt+0x1>
    8002867e:	00030497          	auipc	s1,0x30
    80028682:	99248493          	addi	s1,s1,-1646 # 80058010 <excpt>
    80028686:	00008597          	auipc	a1,0x8
    8002868a:	94258593          	addi	a1,a1,-1726 # 8002ffc8 <__func__.0+0x2d8>
    8002868e:	cf89                	beqz	a5,800286a8 <vec_test_4+0x96>
    80028690:	6498                	ld	a4,8(s1)
    80028692:	4789                	li	a5,2
    80028694:	00008597          	auipc	a1,0x8
    80028698:	92458593          	addi	a1,a1,-1756 # 8002ffb8 <__func__.0+0x2c8>
    8002869c:	00f70663          	beq	a4,a5,800286a8 <vec_test_4+0x96>
    800286a0:	00008597          	auipc	a1,0x8
    800286a4:	92858593          	addi	a1,a1,-1752 # 8002ffc8 <__func__.0+0x2d8>
    800286a8:	00008517          	auipc	a0,0x8
    800286ac:	96050513          	addi	a0,a0,-1696 # 80030008 <__func__.0+0x318>
    800286b0:	1dd040ef          	jal	8002d08c <printf>
    800286b4:	00030797          	auipc	a5,0x30
    800286b8:	95d7c783          	lbu	a5,-1699(a5) # 80058011 <excpt+0x1>
    800286bc:	c789                	beqz	a5,800286c6 <vec_test_4+0xb4>
    800286be:	6498                	ld	a4,8(s1)
    800286c0:	4789                	li	a5,2
    800286c2:	00f70c63          	beq	a4,a5,800286da <vec_test_4+0xc8>
    800286c6:	00008517          	auipc	a0,0x8
    800286ca:	94a50513          	addi	a0,a0,-1718 # 80030010 <__func__.0+0x320>
    800286ce:	1bf040ef          	jal	8002d08c <printf>
    800286d2:	02900513          	li	a0,41
    800286d6:	6a4030ef          	jal	8002bd7a <putchar>
    800286da:	4529                	li	a0,10
    800286dc:	69e030ef          	jal	8002bd7a <putchar>
    800286e0:	00030417          	auipc	s0,0x30
    800286e4:	93144403          	lbu	s0,-1743(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    800286e8:	00008597          	auipc	a1,0x8
    800286ec:	8e058593          	addi	a1,a1,-1824 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    800286f0:	cc11                	beqz	s0,8002870c <vec_test_4+0xfa>
    800286f2:	6498                	ld	a4,8(s1)
    800286f4:	4789                	li	a5,2
    TEST_END();
    800286f6:	00008597          	auipc	a1,0x8
    800286fa:	8c258593          	addi	a1,a1,-1854 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    800286fe:	00f70763          	beq	a4,a5,8002870c <vec_test_4+0xfa>
    80028702:	4401                	li	s0,0
    TEST_END();
    80028704:	00008597          	auipc	a1,0x8
    80028708:	8c458593          	addi	a1,a1,-1852 # 8002ffc8 <__func__.0+0x2d8>
    8002870c:	00008517          	auipc	a0,0x8
    80028710:	96450513          	addi	a0,a0,-1692 # 80030070 <__func__.0+0x380>
    80028714:	179040ef          	jal	8002d08c <printf>
    80028718:	4511                	li	a0,4
    8002871a:	feed80ef          	jal	80000f08 <goto_priv>
    8002871e:	9b4d90ef          	jal	800018d2 <reset_state>
}
    80028722:	60e2                	ld	ra,24(sp)
    80028724:	8522                	mv	a0,s0
    80028726:	6442                	ld	s0,16(sp)
    80028728:	64a2                	ld	s1,8(sp)
    8002872a:	6105                	addi	sp,sp,32
    8002872c:	8082                	ret

000000008002872e <vec_test_5>:

bool vec_test_5(){          
    8002872e:	1101                	addi	sp,sp,-32

    TEST_START();
    80028730:	00007597          	auipc	a1,0x7
    80028734:	32058593          	addi	a1,a1,800 # 8002fa50 <__func__.19>
    80028738:	00008517          	auipc	a0,0x8
    8002873c:	8a050513          	addi	a0,a0,-1888 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_5(){          
    80028740:	ec06                	sd	ra,24(sp)
    80028742:	e426                	sd	s1,8(sp)
    80028744:	e822                	sd	s0,16(sp)
    TEST_START();
    80028746:	147040ef          	jal	8002d08c <printf>
    8002874a:	4529                	li	a0,10
    8002874c:	62e030ef          	jal	8002bd7a <putchar>
    // 当 V=1 时，vsstatus.VS!=OFF && mstatus.VS=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028750:	20000493          	li	s1,512
    80028754:	3004a073          	csrs	mstatus,s1
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028758:	40000413          	li	s0,1024
    8002875c:	30042073          	csrs	mstatus,s0
    int lmull = 1;     // LMUL = 1
    int vl = 2;        // 向量长度（处理 2 个元素）
    int v0_init = 1;   // 初始化 v0 的值为 1
    int v4_init = 2;   // 初始化 v4 的值为 2

    TEST_SETUP_EXCEPT();
    80028760:	eacd80ef          	jal	80000e0c <test_setup_except_function>
// 设置 vfirst.m 执行条件
static inline void set_vfirst_m_conditions(int sew, int lmull, int vl, int v0_init, int v4_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80028764:	4785                	li	a5,1
    80028766:	4749                	li	a4,18
    80028768:	80e7f2d7          	vsetvl	t0,a5,a4
    8002876c:	5e00b057          	vmv.v.i	v0,1
    80028770:	5e013257          	vmv.v.i	v4,2

    // 设置 vfirst.m 的执行条件
    set_vfirst_m_conditions(vl, sew, lmull, v0_init, v4_init);
    excpt_info();
    80028774:	8dbd80ef          	jal	8000104e <excpt_info>

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028778:	3004b073          	csrc	mstatus,s1
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    8002877c:	30043073          	csrc	mstatus,s0
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    80028780:	2004a073          	csrs	vsstatus,s1
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    80028784:	20043073          	csrc	vsstatus,s0

    goto_priv(PRIV_VS);
    80028788:	4509                	li	a0,2
    8002878a:	f7ed80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002878e:	e7ed80ef          	jal	80000e0c <test_setup_except_function>
    EXECUTE_VFIRST_M_V3();
    80028792:	4038a7d7          	vfirst.m	a5,v3,v0.t
    excpt_info();
    80028796:	8b9d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    8002879a:	08200593          	li	a1,130
    8002879e:	00013617          	auipc	a2,0x13
    800287a2:	92260613          	addi	a2,a2,-1758 # 8003b0c0 <__func__.0+0xb3d0>
    800287a6:	00008517          	auipc	a0,0x8
    800287aa:	84a50513          	addi	a0,a0,-1974 # 8002fff0 <__func__.0+0x300>
    800287ae:	0df040ef          	jal	8002d08c <printf>
    800287b2:	00030797          	auipc	a5,0x30
    800287b6:	85f7c783          	lbu	a5,-1953(a5) # 80058011 <excpt+0x1>
    800287ba:	00030497          	auipc	s1,0x30
    800287be:	85648493          	addi	s1,s1,-1962 # 80058010 <excpt>
    800287c2:	00008597          	auipc	a1,0x8
    800287c6:	80658593          	addi	a1,a1,-2042 # 8002ffc8 <__func__.0+0x2d8>
    800287ca:	cf89                	beqz	a5,800287e4 <vec_test_5+0xb6>
    800287cc:	6498                	ld	a4,8(s1)
    800287ce:	4789                	li	a5,2
    800287d0:	00007597          	auipc	a1,0x7
    800287d4:	7e858593          	addi	a1,a1,2024 # 8002ffb8 <__func__.0+0x2c8>
    800287d8:	00f70663          	beq	a4,a5,800287e4 <vec_test_5+0xb6>
    800287dc:	00007597          	auipc	a1,0x7
    800287e0:	7ec58593          	addi	a1,a1,2028 # 8002ffc8 <__func__.0+0x2d8>
    800287e4:	00008517          	auipc	a0,0x8
    800287e8:	82450513          	addi	a0,a0,-2012 # 80030008 <__func__.0+0x318>
    800287ec:	0a1040ef          	jal	8002d08c <printf>
    800287f0:	00030797          	auipc	a5,0x30
    800287f4:	8217c783          	lbu	a5,-2015(a5) # 80058011 <excpt+0x1>
    800287f8:	c789                	beqz	a5,80028802 <vec_test_5+0xd4>
    800287fa:	6498                	ld	a4,8(s1)
    800287fc:	4789                	li	a5,2
    800287fe:	00f70c63          	beq	a4,a5,80028816 <vec_test_5+0xe8>
    80028802:	00008517          	auipc	a0,0x8
    80028806:	80e50513          	addi	a0,a0,-2034 # 80030010 <__func__.0+0x320>
    8002880a:	083040ef          	jal	8002d08c <printf>
    8002880e:	02900513          	li	a0,41
    80028812:	568030ef          	jal	8002bd7a <putchar>
    80028816:	4529                	li	a0,10
    80028818:	562030ef          	jal	8002bd7a <putchar>
    8002881c:	0002f417          	auipc	s0,0x2f
    80028820:	7f544403          	lbu	s0,2037(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028824:	00007597          	auipc	a1,0x7
    80028828:	7a458593          	addi	a1,a1,1956 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    8002882c:	cc11                	beqz	s0,80028848 <vec_test_5+0x11a>
    8002882e:	6498                	ld	a4,8(s1)
    80028830:	4789                	li	a5,2
    TEST_END();
    80028832:	00007597          	auipc	a1,0x7
    80028836:	78658593          	addi	a1,a1,1926 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    8002883a:	00f70763          	beq	a4,a5,80028848 <vec_test_5+0x11a>
    8002883e:	4401                	li	s0,0
    TEST_END();
    80028840:	00007597          	auipc	a1,0x7
    80028844:	78858593          	addi	a1,a1,1928 # 8002ffc8 <__func__.0+0x2d8>
    80028848:	00008517          	auipc	a0,0x8
    8002884c:	82850513          	addi	a0,a0,-2008 # 80030070 <__func__.0+0x380>
    80028850:	03d040ef          	jal	8002d08c <printf>
    80028854:	4511                	li	a0,4
    80028856:	eb2d80ef          	jal	80000f08 <goto_priv>
    8002885a:	878d90ef          	jal	800018d2 <reset_state>
}
    8002885e:	60e2                	ld	ra,24(sp)
    80028860:	8522                	mv	a0,s0
    80028862:	6442                	ld	s0,16(sp)
    80028864:	64a2                	ld	s1,8(sp)
    80028866:	6105                	addi	sp,sp,32
    80028868:	8082                	ret

000000008002886a <vec_test_6>:


bool vec_test_6(){
    8002886a:	1101                	addi	sp,sp,-32

    TEST_START();
    8002886c:	00007597          	auipc	a1,0x7
    80028870:	1f458593          	addi	a1,a1,500 # 8002fa60 <__func__.18>
    80028874:	00007517          	auipc	a0,0x7
    80028878:	76450513          	addi	a0,a0,1892 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_6(){
    8002887c:	ec06                	sd	ra,24(sp)
    8002887e:	e822                	sd	s0,16(sp)
    80028880:	e426                	sd	s1,8(sp)
    TEST_START();
    80028882:	00b040ef          	jal	8002d08c <printf>
    80028886:	4529                	li	a0,10
    80028888:	4f2030ef          	jal	8002bd7a <putchar>
    // 当 V=1 时，vsstatus.VS!=OFF && mstatus.VS=OFF 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    8002888c:	20000713          	li	a4,512
    80028890:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028894:	40000793          	li	a5,1024
    80028898:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    8002889c:	20072073          	csrs	vsstatus,a4
    CSRS(CSR_VSSTATUS, 1ULL << 10); 
    800288a0:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    800288a4:	4509                	li	a0,2
    800288a6:	e62d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800288aa:	d62d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VXSAT);
    800288ae:	009027f3          	csrr	a5,vxsat
    excpt_info();
    800288b2:	f9cd80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    800288b6:	08200593          	li	a1,130
    800288ba:	00013617          	auipc	a2,0x13
    800288be:	86660613          	addi	a2,a2,-1946 # 8003b120 <__func__.0+0xb430>
    800288c2:	00007517          	auipc	a0,0x7
    800288c6:	72e50513          	addi	a0,a0,1838 # 8002fff0 <__func__.0+0x300>
    800288ca:	7c2040ef          	jal	8002d08c <printf>
    800288ce:	0002f797          	auipc	a5,0x2f
    800288d2:	7437c783          	lbu	a5,1859(a5) # 80058011 <excpt+0x1>
    800288d6:	0002f497          	auipc	s1,0x2f
    800288da:	73a48493          	addi	s1,s1,1850 # 80058010 <excpt>
    800288de:	00007597          	auipc	a1,0x7
    800288e2:	6ea58593          	addi	a1,a1,1770 # 8002ffc8 <__func__.0+0x2d8>
    800288e6:	cf89                	beqz	a5,80028900 <vec_test_6+0x96>
    800288e8:	6498                	ld	a4,8(s1)
    800288ea:	4789                	li	a5,2
    800288ec:	00007597          	auipc	a1,0x7
    800288f0:	6cc58593          	addi	a1,a1,1740 # 8002ffb8 <__func__.0+0x2c8>
    800288f4:	00f70663          	beq	a4,a5,80028900 <vec_test_6+0x96>
    800288f8:	00007597          	auipc	a1,0x7
    800288fc:	6d058593          	addi	a1,a1,1744 # 8002ffc8 <__func__.0+0x2d8>
    80028900:	00007517          	auipc	a0,0x7
    80028904:	70850513          	addi	a0,a0,1800 # 80030008 <__func__.0+0x318>
    80028908:	784040ef          	jal	8002d08c <printf>
    8002890c:	0002f797          	auipc	a5,0x2f
    80028910:	7057c783          	lbu	a5,1797(a5) # 80058011 <excpt+0x1>
    80028914:	c789                	beqz	a5,8002891e <vec_test_6+0xb4>
    80028916:	6498                	ld	a4,8(s1)
    80028918:	4789                	li	a5,2
    8002891a:	00f70c63          	beq	a4,a5,80028932 <vec_test_6+0xc8>
    8002891e:	00007517          	auipc	a0,0x7
    80028922:	6f250513          	addi	a0,a0,1778 # 80030010 <__func__.0+0x320>
    80028926:	766040ef          	jal	8002d08c <printf>
    8002892a:	02900513          	li	a0,41
    8002892e:	44c030ef          	jal	8002bd7a <putchar>
    80028932:	4529                	li	a0,10
    80028934:	446030ef          	jal	8002bd7a <putchar>
    80028938:	0002f417          	auipc	s0,0x2f
    8002893c:	6d944403          	lbu	s0,1753(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028940:	00007597          	auipc	a1,0x7
    80028944:	68858593          	addi	a1,a1,1672 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    80028948:	cc11                	beqz	s0,80028964 <vec_test_6+0xfa>
    8002894a:	6498                	ld	a4,8(s1)
    8002894c:	4789                	li	a5,2
    TEST_END();
    8002894e:	00007597          	auipc	a1,0x7
    80028952:	66a58593          	addi	a1,a1,1642 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    80028956:	00f70763          	beq	a4,a5,80028964 <vec_test_6+0xfa>
    8002895a:	4401                	li	s0,0
    TEST_END();
    8002895c:	00007597          	auipc	a1,0x7
    80028960:	66c58593          	addi	a1,a1,1644 # 8002ffc8 <__func__.0+0x2d8>
    80028964:	00007517          	auipc	a0,0x7
    80028968:	70c50513          	addi	a0,a0,1804 # 80030070 <__func__.0+0x380>
    8002896c:	720040ef          	jal	8002d08c <printf>
    80028970:	4511                	li	a0,4
    80028972:	d96d80ef          	jal	80000f08 <goto_priv>
    80028976:	f5dd80ef          	jal	800018d2 <reset_state>
}
    8002897a:	60e2                	ld	ra,24(sp)
    8002897c:	8522                	mv	a0,s0
    8002897e:	6442                	ld	s0,16(sp)
    80028980:	64a2                	ld	s1,8(sp)
    80028982:	6105                	addi	sp,sp,32
    80028984:	8082                	ret

0000000080028986 <vec_test_7>:

bool vec_test_7(){
    80028986:	1101                	addi	sp,sp,-32

    TEST_START();
    80028988:	00007597          	auipc	a1,0x7
    8002898c:	0e858593          	addi	a1,a1,232 # 8002fa70 <__func__.17>
    80028990:	00007517          	auipc	a0,0x7
    80028994:	64850513          	addi	a0,a0,1608 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_7(){
    80028998:	ec06                	sd	ra,24(sp)
    8002899a:	e822                	sd	s0,16(sp)
    8002899c:	e426                	sd	s1,8(sp)
    TEST_START();
    8002899e:	6ee040ef          	jal	8002d08c <printf>
    800289a2:	4529                	li	a0,10
    800289a4:	3d6030ef          	jal	8002bd7a <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800289a8:	20000713          	li	a4,512
    800289ac:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800289b0:	40000793          	li	a5,1024
    800289b4:	3007a073          	csrs	mstatus,a5
// 设置执行 vmsbf.m 指令条件，包括向量长度、掩码寄存器和源寄存器
static inline void set_vmsbfm_conditions(int vl, int sew, int lmull, int v0_init, int v4_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;

    asm volatile (
    800289b8:	46a1                	li	a3,8
    800289ba:	4645                	li	a2,17
    800289bc:	80c6f2d7          	vsetvl	t0,a3,a2
    800289c0:	5e00b057          	vmv.v.i	v0,1
    800289c4:	5e003257          	vmv.v.i	v4,0
    int v4_init = 0;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    set_vmsbfm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800289c8:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800289cc:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    800289d0:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    800289d4:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800289d8:	4509                	li	a0,2
    800289da:	d2ed80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    800289de:	c2ed80ef          	jal	80000e0c <test_setup_except_function>
    );
}

// 执行 vmsbf.m 指令
static inline void execute_vmsbf_m() {
    asm volatile (
    800289e2:	5040a1d7          	vmsbf.m	v3,v4,v0.t

    // 执行 vmsbf.m 指令
    execute_vmsbf_m();
    excpt_info();
    800289e6:	e68d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    800289ea:	08200593          	li	a1,130
    800289ee:	00012617          	auipc	a2,0x12
    800289f2:	79260613          	addi	a2,a2,1938 # 8003b180 <__func__.0+0xb490>
    800289f6:	00007517          	auipc	a0,0x7
    800289fa:	5fa50513          	addi	a0,a0,1530 # 8002fff0 <__func__.0+0x300>
    800289fe:	68e040ef          	jal	8002d08c <printf>
    80028a02:	0002f797          	auipc	a5,0x2f
    80028a06:	60f7c783          	lbu	a5,1551(a5) # 80058011 <excpt+0x1>
    80028a0a:	0002f497          	auipc	s1,0x2f
    80028a0e:	60648493          	addi	s1,s1,1542 # 80058010 <excpt>
    80028a12:	00007597          	auipc	a1,0x7
    80028a16:	5b658593          	addi	a1,a1,1462 # 8002ffc8 <__func__.0+0x2d8>
    80028a1a:	cf89                	beqz	a5,80028a34 <vec_test_7+0xae>
    80028a1c:	6498                	ld	a4,8(s1)
    80028a1e:	4789                	li	a5,2
    80028a20:	00007597          	auipc	a1,0x7
    80028a24:	59858593          	addi	a1,a1,1432 # 8002ffb8 <__func__.0+0x2c8>
    80028a28:	00f70663          	beq	a4,a5,80028a34 <vec_test_7+0xae>
    80028a2c:	00007597          	auipc	a1,0x7
    80028a30:	59c58593          	addi	a1,a1,1436 # 8002ffc8 <__func__.0+0x2d8>
    80028a34:	00007517          	auipc	a0,0x7
    80028a38:	5d450513          	addi	a0,a0,1492 # 80030008 <__func__.0+0x318>
    80028a3c:	650040ef          	jal	8002d08c <printf>
    80028a40:	0002f797          	auipc	a5,0x2f
    80028a44:	5d17c783          	lbu	a5,1489(a5) # 80058011 <excpt+0x1>
    80028a48:	c789                	beqz	a5,80028a52 <vec_test_7+0xcc>
    80028a4a:	6498                	ld	a4,8(s1)
    80028a4c:	4789                	li	a5,2
    80028a4e:	00f70c63          	beq	a4,a5,80028a66 <vec_test_7+0xe0>
    80028a52:	00007517          	auipc	a0,0x7
    80028a56:	5be50513          	addi	a0,a0,1470 # 80030010 <__func__.0+0x320>
    80028a5a:	632040ef          	jal	8002d08c <printf>
    80028a5e:	02900513          	li	a0,41
    80028a62:	318030ef          	jal	8002bd7a <putchar>
    80028a66:	4529                	li	a0,10
    80028a68:	312030ef          	jal	8002bd7a <putchar>
    80028a6c:	0002f417          	auipc	s0,0x2f
    80028a70:	5a544403          	lbu	s0,1445(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028a74:	00007597          	auipc	a1,0x7
    80028a78:	55458593          	addi	a1,a1,1364 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028a7c:	cc11                	beqz	s0,80028a98 <vec_test_7+0x112>
    80028a7e:	6498                	ld	a4,8(s1)
    80028a80:	4789                	li	a5,2
    TEST_END();
    80028a82:	00007597          	auipc	a1,0x7
    80028a86:	53658593          	addi	a1,a1,1334 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028a8a:	00f70763          	beq	a4,a5,80028a98 <vec_test_7+0x112>
    80028a8e:	4401                	li	s0,0
    TEST_END();
    80028a90:	00007597          	auipc	a1,0x7
    80028a94:	53858593          	addi	a1,a1,1336 # 8002ffc8 <__func__.0+0x2d8>
    80028a98:	00007517          	auipc	a0,0x7
    80028a9c:	5d850513          	addi	a0,a0,1496 # 80030070 <__func__.0+0x380>
    80028aa0:	5ec040ef          	jal	8002d08c <printf>
    80028aa4:	4511                	li	a0,4
    80028aa6:	c62d80ef          	jal	80000f08 <goto_priv>
    80028aaa:	e29d80ef          	jal	800018d2 <reset_state>
}
    80028aae:	60e2                	ld	ra,24(sp)
    80028ab0:	8522                	mv	a0,s0
    80028ab2:	6442                	ld	s0,16(sp)
    80028ab4:	64a2                	ld	s1,8(sp)
    80028ab6:	6105                	addi	sp,sp,32
    80028ab8:	8082                	ret

0000000080028aba <vec_test_8>:


bool vec_test_8(){
    80028aba:	1101                	addi	sp,sp,-32

    TEST_START();
    80028abc:	00007597          	auipc	a1,0x7
    80028ac0:	fc458593          	addi	a1,a1,-60 # 8002fa80 <__func__.16>
    80028ac4:	00007517          	auipc	a0,0x7
    80028ac8:	51450513          	addi	a0,a0,1300 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_8(){
    80028acc:	ec06                	sd	ra,24(sp)
    80028ace:	e822                	sd	s0,16(sp)
    80028ad0:	e426                	sd	s1,8(sp)
    TEST_START();
    80028ad2:	5ba040ef          	jal	8002d08c <printf>
    80028ad6:	4529                	li	a0,10
    80028ad8:	2a2030ef          	jal	8002bd7a <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS=OFF 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028adc:	20000713          	li	a4,512
    80028ae0:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028ae4:	40000793          	li	a5,1024
    80028ae8:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    80028aec:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    80028af0:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80028af4:	4509                	li	a0,2
    80028af6:	c12d80ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    80028afa:	b12d80ef          	jal	80000e0c <test_setup_except_function>
    CSRR(CSR_VXRM);
    80028afe:	00a027f3          	csrr	a5,vxrm
    excpt_info();
    80028b02:	d4cd80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028b06:	08200593          	li	a1,130
    80028b0a:	00012617          	auipc	a2,0x12
    80028b0e:	6d660613          	addi	a2,a2,1750 # 8003b1e0 <__func__.0+0xb4f0>
    80028b12:	00007517          	auipc	a0,0x7
    80028b16:	4de50513          	addi	a0,a0,1246 # 8002fff0 <__func__.0+0x300>
    80028b1a:	572040ef          	jal	8002d08c <printf>
    80028b1e:	0002f797          	auipc	a5,0x2f
    80028b22:	4f37c783          	lbu	a5,1267(a5) # 80058011 <excpt+0x1>
    80028b26:	0002f497          	auipc	s1,0x2f
    80028b2a:	4ea48493          	addi	s1,s1,1258 # 80058010 <excpt>
    80028b2e:	00007597          	auipc	a1,0x7
    80028b32:	49a58593          	addi	a1,a1,1178 # 8002ffc8 <__func__.0+0x2d8>
    80028b36:	cf89                	beqz	a5,80028b50 <vec_test_8+0x96>
    80028b38:	6498                	ld	a4,8(s1)
    80028b3a:	4789                	li	a5,2
    80028b3c:	00007597          	auipc	a1,0x7
    80028b40:	47c58593          	addi	a1,a1,1148 # 8002ffb8 <__func__.0+0x2c8>
    80028b44:	00f70663          	beq	a4,a5,80028b50 <vec_test_8+0x96>
    80028b48:	00007597          	auipc	a1,0x7
    80028b4c:	48058593          	addi	a1,a1,1152 # 8002ffc8 <__func__.0+0x2d8>
    80028b50:	00007517          	auipc	a0,0x7
    80028b54:	4b850513          	addi	a0,a0,1208 # 80030008 <__func__.0+0x318>
    80028b58:	534040ef          	jal	8002d08c <printf>
    80028b5c:	0002f797          	auipc	a5,0x2f
    80028b60:	4b57c783          	lbu	a5,1205(a5) # 80058011 <excpt+0x1>
    80028b64:	c789                	beqz	a5,80028b6e <vec_test_8+0xb4>
    80028b66:	6498                	ld	a4,8(s1)
    80028b68:	4789                	li	a5,2
    80028b6a:	00f70c63          	beq	a4,a5,80028b82 <vec_test_8+0xc8>
    80028b6e:	00007517          	auipc	a0,0x7
    80028b72:	4a250513          	addi	a0,a0,1186 # 80030010 <__func__.0+0x320>
    80028b76:	516040ef          	jal	8002d08c <printf>
    80028b7a:	02900513          	li	a0,41
    80028b7e:	1fc030ef          	jal	8002bd7a <putchar>
    80028b82:	4529                	li	a0,10
    80028b84:	1f6030ef          	jal	8002bd7a <putchar>
    80028b88:	0002f417          	auipc	s0,0x2f
    80028b8c:	48944403          	lbu	s0,1161(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028b90:	00007597          	auipc	a1,0x7
    80028b94:	43858593          	addi	a1,a1,1080 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028b98:	cc11                	beqz	s0,80028bb4 <vec_test_8+0xfa>
    80028b9a:	6498                	ld	a4,8(s1)
    80028b9c:	4789                	li	a5,2
    TEST_END();
    80028b9e:	00007597          	auipc	a1,0x7
    80028ba2:	41a58593          	addi	a1,a1,1050 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028ba6:	00f70763          	beq	a4,a5,80028bb4 <vec_test_8+0xfa>
    80028baa:	4401                	li	s0,0
    TEST_END();
    80028bac:	00007597          	auipc	a1,0x7
    80028bb0:	41c58593          	addi	a1,a1,1052 # 8002ffc8 <__func__.0+0x2d8>
    80028bb4:	00007517          	auipc	a0,0x7
    80028bb8:	4bc50513          	addi	a0,a0,1212 # 80030070 <__func__.0+0x380>
    80028bbc:	4d0040ef          	jal	8002d08c <printf>
    80028bc0:	4511                	li	a0,4
    80028bc2:	b46d80ef          	jal	80000f08 <goto_priv>
    80028bc6:	d0dd80ef          	jal	800018d2 <reset_state>
}
    80028bca:	60e2                	ld	ra,24(sp)
    80028bcc:	8522                	mv	a0,s0
    80028bce:	6442                	ld	s0,16(sp)
    80028bd0:	64a2                	ld	s1,8(sp)
    80028bd2:	6105                	addi	sp,sp,32
    80028bd4:	8082                	ret

0000000080028bd6 <vec_test_9>:


bool vec_test_9(){
    80028bd6:	1101                	addi	sp,sp,-32

    TEST_START();
    80028bd8:	00007597          	auipc	a1,0x7
    80028bdc:	eb858593          	addi	a1,a1,-328 # 8002fa90 <__func__.15>
    80028be0:	00007517          	auipc	a0,0x7
    80028be4:	3f850513          	addi	a0,a0,1016 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_9(){
    80028be8:	ec06                	sd	ra,24(sp)
    80028bea:	e822                	sd	s0,16(sp)
    80028bec:	e426                	sd	s1,8(sp)
    TEST_START();
    80028bee:	49e040ef          	jal	8002d08c <printf>
    80028bf2:	4529                	li	a0,10
    80028bf4:	186030ef          	jal	8002bd7a <putchar>
    // 如果vstart超出界限，建议实现陷阱
    /*
    向量配置的最大长度 VLMAX。这个值取决于向量长度寄存器（vl）、元素宽度（SEW）、和向量组乘数（LMUL）。
    (该测试用例只是简单弄个大的数来测试)
    */
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    80028bf8:	20000793          	li	a5,512
    80028bfc:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10);      
    80028c00:	40000793          	li	a5,1024
    80028c04:	3007b073          	csrc	mstatus,a5
// 设置 vadd 执行条件
static inline void set_vadd_conditions(int sew, int lmull, int vl, int v0_init, int v4_init, int v6_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80028c08:	47a1                	li	a5,8
    80028c0a:	0117f2d7          	vsetvli	t0,a5,e32,m2,tu,mu
    80028c0e:	5e00b057          	vmv.v.i	v0,1
    80028c12:	5e01b257          	vmv.v.i	v4,3
    80028c16:	5e02b357          	vmv.v.i	v6,5
    int v6_init = 5;    // 初始化 v6 的值为 5

    // 设置 vadd 的执行条件
    set_vadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRW(CSR_VSTART,(uint64_t)-1);
    80028c1a:	57fd                	li	a5,-1
    80028c1c:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80028c20:	008025f3          	csrr	a1,vstart
    80028c24:	00012517          	auipc	a0,0x12
    80028c28:	61c50513          	addi	a0,a0,1564 # 8003b240 <__func__.0+0xb550>
    80028c2c:	460040ef          	jal	8002d08c <printf>
    TEST_SETUP_EXCEPT();
    80028c30:	9dcd80ef          	jal	80000e0c <test_setup_except_function>



// 执行 vadd.vv 指令
static inline void execute_vadd_vv() {
    asm volatile (
    80028c34:	02430457          	vadd.vv	v8,v4,v6
    
    // 执行 vadd.vv 指令
    execute_vadd_vv();

    excpt_info();
    80028c38:	c16d80ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028c3c:	08200593          	li	a1,130
    80028c40:	00012617          	auipc	a2,0x12
    80028c44:	61060613          	addi	a2,a2,1552 # 8003b250 <__func__.0+0xb560>
    80028c48:	00007517          	auipc	a0,0x7
    80028c4c:	3a850513          	addi	a0,a0,936 # 8002fff0 <__func__.0+0x300>
    80028c50:	43c040ef          	jal	8002d08c <printf>
    80028c54:	0002f797          	auipc	a5,0x2f
    80028c58:	3bd7c783          	lbu	a5,957(a5) # 80058011 <excpt+0x1>
    80028c5c:	0002f497          	auipc	s1,0x2f
    80028c60:	3b448493          	addi	s1,s1,948 # 80058010 <excpt>
    80028c64:	00007597          	auipc	a1,0x7
    80028c68:	36458593          	addi	a1,a1,868 # 8002ffc8 <__func__.0+0x2d8>
    80028c6c:	cf89                	beqz	a5,80028c86 <vec_test_9+0xb0>
    80028c6e:	6498                	ld	a4,8(s1)
    80028c70:	4789                	li	a5,2
    80028c72:	00007597          	auipc	a1,0x7
    80028c76:	34658593          	addi	a1,a1,838 # 8002ffb8 <__func__.0+0x2c8>
    80028c7a:	00f70663          	beq	a4,a5,80028c86 <vec_test_9+0xb0>
    80028c7e:	00007597          	auipc	a1,0x7
    80028c82:	34a58593          	addi	a1,a1,842 # 8002ffc8 <__func__.0+0x2d8>
    80028c86:	00007517          	auipc	a0,0x7
    80028c8a:	38250513          	addi	a0,a0,898 # 80030008 <__func__.0+0x318>
    80028c8e:	3fe040ef          	jal	8002d08c <printf>
    80028c92:	0002f797          	auipc	a5,0x2f
    80028c96:	37f7c783          	lbu	a5,895(a5) # 80058011 <excpt+0x1>
    80028c9a:	c789                	beqz	a5,80028ca4 <vec_test_9+0xce>
    80028c9c:	6498                	ld	a4,8(s1)
    80028c9e:	4789                	li	a5,2
    80028ca0:	00f70c63          	beq	a4,a5,80028cb8 <vec_test_9+0xe2>
    80028ca4:	00007517          	auipc	a0,0x7
    80028ca8:	36c50513          	addi	a0,a0,876 # 80030010 <__func__.0+0x320>
    80028cac:	3e0040ef          	jal	8002d08c <printf>
    80028cb0:	02900513          	li	a0,41
    80028cb4:	0c6030ef          	jal	8002bd7a <putchar>
    80028cb8:	4529                	li	a0,10
    80028cba:	0c0030ef          	jal	8002bd7a <putchar>
    80028cbe:	0002f417          	auipc	s0,0x2f
    80028cc2:	35344403          	lbu	s0,851(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028cc6:	00007597          	auipc	a1,0x7
    80028cca:	30258593          	addi	a1,a1,770 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028cce:	cc11                	beqz	s0,80028cea <vec_test_9+0x114>
    80028cd0:	6498                	ld	a4,8(s1)
    80028cd2:	4789                	li	a5,2
    TEST_END();
    80028cd4:	00007597          	auipc	a1,0x7
    80028cd8:	2e458593          	addi	a1,a1,740 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028cdc:	00f70763          	beq	a4,a5,80028cea <vec_test_9+0x114>
    80028ce0:	4401                	li	s0,0
    TEST_END();
    80028ce2:	00007597          	auipc	a1,0x7
    80028ce6:	2e658593          	addi	a1,a1,742 # 8002ffc8 <__func__.0+0x2d8>
    80028cea:	00007517          	auipc	a0,0x7
    80028cee:	38650513          	addi	a0,a0,902 # 80030070 <__func__.0+0x380>
    80028cf2:	39a040ef          	jal	8002d08c <printf>
    80028cf6:	4511                	li	a0,4
    80028cf8:	a10d80ef          	jal	80000f08 <goto_priv>
    80028cfc:	bd7d80ef          	jal	800018d2 <reset_state>
}
    80028d00:	60e2                	ld	ra,24(sp)
    80028d02:	8522                	mv	a0,s0
    80028d04:	6442                	ld	s0,16(sp)
    80028d06:	64a2                	ld	s1,8(sp)
    80028d08:	6105                	addi	sp,sp,32
    80028d0a:	8082                	ret

0000000080028d0c <vec_test_10>:


bool vec_test_10(){
    80028d0c:	1141                	addi	sp,sp,-16

    TEST_START();
    80028d0e:	00007597          	auipc	a1,0x7
    80028d12:	d9258593          	addi	a1,a1,-622 # 8002faa0 <__func__.14>
    80028d16:	00007517          	auipc	a0,0x7
    80028d1a:	2c250513          	addi	a0,a0,706 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_10(){
    80028d1e:	e406                	sd	ra,8(sp)
    TEST_START();
    80028d20:	36c040ef          	jal	8002d08c <printf>
    80028d24:	4529                	li	a0,10
    80028d26:	054030ef          	jal	8002bd7a <putchar>
    //当尝试执行某个向量指令时，如果 vstart 的值是该实现在使用相同 vtype 设置执行该指令时不可能产生的


    TEST_END();
    80028d2a:	00007597          	auipc	a1,0x7
    80028d2e:	28e58593          	addi	a1,a1,654 # 8002ffb8 <__func__.0+0x2c8>
    80028d32:	00007517          	auipc	a0,0x7
    80028d36:	33e50513          	addi	a0,a0,830 # 80030070 <__func__.0+0x380>
    80028d3a:	352040ef          	jal	8002d08c <printf>
    80028d3e:	4511                	li	a0,4
    80028d40:	9c8d80ef          	jal	80000f08 <goto_priv>
    80028d44:	b8fd80ef          	jal	800018d2 <reset_state>

}
    80028d48:	60a2                	ld	ra,8(sp)
    80028d4a:	4505                	li	a0,1
    80028d4c:	0141                	addi	sp,sp,16
    80028d4e:	8082                	ret

0000000080028d50 <vec_test_11>:


bool vec_test_11(){
    80028d50:	1101                	addi	sp,sp,-32

    TEST_START();
    80028d52:	00007597          	auipc	a1,0x7
    80028d56:	d5e58593          	addi	a1,a1,-674 # 8002fab0 <__func__.13>
    80028d5a:	00007517          	auipc	a0,0x7
    80028d5e:	27e50513          	addi	a0,a0,638 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_11(){
    80028d62:	ec06                	sd	ra,24(sp)
    80028d64:	e822                	sd	s0,16(sp)
    80028d66:	e426                	sd	s1,8(sp)
    TEST_START();
    80028d68:	324040ef          	jal	8002d08c <printf>
    80028d6c:	4529                	li	a0,10
    80028d6e:	00c030ef          	jal	8002bd7a <putchar>
    //如果 vill 位被设置位1，执行依赖 vtype 的向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028d72:	20000793          	li	a5,512
    80028d76:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028d7a:	40000793          	li	a5,1024
    80028d7e:	3007a073          	csrs	mstatus,a5
    int lmull = 1;     // LMUL = 1
    int v0_init = 1;   // 初始化掩码寄存器 v0 的值为 1（全 1）
    int v4_init = 3;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    printf("vtype=%llx\n",CSRR(CSR_VTYPE));
    80028d82:	c21025f3          	csrr	a1,vtype
    80028d86:	00012517          	auipc	a0,0x12
    80028d8a:	50a50513          	addi	a0,a0,1290 # 8003b290 <__func__.0+0xb5a0>
    80028d8e:	2fe040ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    80028d92:	87ad80ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    80028d96:	5040a1d7          	vmsbf.m	v3,v4,v0.t
    execute_vmsbf_m(); 
    excpt_info();
    80028d9a:	ab4d80ef          	jal	8000104e <excpt_info>
    
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028d9e:	08200593          	li	a1,130
    80028da2:	00012617          	auipc	a2,0x12
    80028da6:	4fe60613          	addi	a2,a2,1278 # 8003b2a0 <__func__.0+0xb5b0>
    80028daa:	00007517          	auipc	a0,0x7
    80028dae:	24650513          	addi	a0,a0,582 # 8002fff0 <__func__.0+0x300>
    80028db2:	2da040ef          	jal	8002d08c <printf>
    80028db6:	0002f797          	auipc	a5,0x2f
    80028dba:	25b7c783          	lbu	a5,603(a5) # 80058011 <excpt+0x1>
    80028dbe:	0002f497          	auipc	s1,0x2f
    80028dc2:	25248493          	addi	s1,s1,594 # 80058010 <excpt>
    80028dc6:	00007597          	auipc	a1,0x7
    80028dca:	20258593          	addi	a1,a1,514 # 8002ffc8 <__func__.0+0x2d8>
    80028dce:	cf89                	beqz	a5,80028de8 <vec_test_11+0x98>
    80028dd0:	6498                	ld	a4,8(s1)
    80028dd2:	4789                	li	a5,2
    80028dd4:	00007597          	auipc	a1,0x7
    80028dd8:	1e458593          	addi	a1,a1,484 # 8002ffb8 <__func__.0+0x2c8>
    80028ddc:	00f70663          	beq	a4,a5,80028de8 <vec_test_11+0x98>
    80028de0:	00007597          	auipc	a1,0x7
    80028de4:	1e858593          	addi	a1,a1,488 # 8002ffc8 <__func__.0+0x2d8>
    80028de8:	00007517          	auipc	a0,0x7
    80028dec:	22050513          	addi	a0,a0,544 # 80030008 <__func__.0+0x318>
    80028df0:	29c040ef          	jal	8002d08c <printf>
    80028df4:	0002f797          	auipc	a5,0x2f
    80028df8:	21d7c783          	lbu	a5,541(a5) # 80058011 <excpt+0x1>
    80028dfc:	c789                	beqz	a5,80028e06 <vec_test_11+0xb6>
    80028dfe:	6498                	ld	a4,8(s1)
    80028e00:	4789                	li	a5,2
    80028e02:	00f70c63          	beq	a4,a5,80028e1a <vec_test_11+0xca>
    80028e06:	00007517          	auipc	a0,0x7
    80028e0a:	20a50513          	addi	a0,a0,522 # 80030010 <__func__.0+0x320>
    80028e0e:	27e040ef          	jal	8002d08c <printf>
    80028e12:	02900513          	li	a0,41
    80028e16:	765020ef          	jal	8002bd7a <putchar>
    80028e1a:	4529                	li	a0,10
    80028e1c:	75f020ef          	jal	8002bd7a <putchar>
    80028e20:	0002f417          	auipc	s0,0x2f
    80028e24:	1f144403          	lbu	s0,497(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80028e28:	00007597          	auipc	a1,0x7
    80028e2c:	1a058593          	addi	a1,a1,416 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028e30:	cc11                	beqz	s0,80028e4c <vec_test_11+0xfc>
    80028e32:	6498                	ld	a4,8(s1)
    80028e34:	4789                	li	a5,2
    TEST_END();
    80028e36:	00007597          	auipc	a1,0x7
    80028e3a:	18258593          	addi	a1,a1,386 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028e3e:	00f70763          	beq	a4,a5,80028e4c <vec_test_11+0xfc>
    80028e42:	4401                	li	s0,0
    TEST_END();
    80028e44:	00007597          	auipc	a1,0x7
    80028e48:	18458593          	addi	a1,a1,388 # 8002ffc8 <__func__.0+0x2d8>
    80028e4c:	00007517          	auipc	a0,0x7
    80028e50:	22450513          	addi	a0,a0,548 # 80030070 <__func__.0+0x380>
    80028e54:	238040ef          	jal	8002d08c <printf>
    80028e58:	4511                	li	a0,4
    80028e5a:	8aed80ef          	jal	80000f08 <goto_priv>
    80028e5e:	a75d80ef          	jal	800018d2 <reset_state>

}
    80028e62:	60e2                	ld	ra,24(sp)
    80028e64:	8522                	mv	a0,s0
    80028e66:	6442                	ld	s0,16(sp)
    80028e68:	64a2                	ld	s1,8(sp)
    80028e6a:	6105                	addi	sp,sp,32
    80028e6c:	8082                	ret

0000000080028e6e <vec_test_12>:

bool vec_test_12(){
    80028e6e:	1141                	addi	sp,sp,-16

    TEST_START();
    80028e70:	00007597          	auipc	a1,0x7
    80028e74:	c5058593          	addi	a1,a1,-944 # 8002fac0 <__func__.12>
    80028e78:	00007517          	auipc	a0,0x7
    80028e7c:	16050513          	addi	a0,a0,352 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_12(){
    80028e80:	e406                	sd	ra,8(sp)
    TEST_START();
    80028e82:	20a040ef          	jal	8002d08c <printf>
    80028e86:	4529                	li	a0,10
    80028e88:	6f3020ef          	jal	8002bd7a <putchar>
    //实现必须提供与所有受支持的 SEW 设置对应的 EEW 向量加载和存储。设置 EEW 宽度不受支持，执行向量加载/存储编码
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028e8c:	20000793          	li	a5,512
    80028e90:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028e94:	40000793          	li	a5,1024
    80028e98:	3007b073          	csrc	mstatus,a5

    // set_vtype_with_invalid_eew();       //环境不支持设置



    TEST_END();
    80028e9c:	00007597          	auipc	a1,0x7
    80028ea0:	11c58593          	addi	a1,a1,284 # 8002ffb8 <__func__.0+0x2c8>
    80028ea4:	00007517          	auipc	a0,0x7
    80028ea8:	1cc50513          	addi	a0,a0,460 # 80030070 <__func__.0+0x380>
    80028eac:	1e0040ef          	jal	8002d08c <printf>
    80028eb0:	4511                	li	a0,4
    80028eb2:	856d80ef          	jal	80000f08 <goto_priv>
    80028eb6:	a1dd80ef          	jal	800018d2 <reset_state>

}
    80028eba:	60a2                	ld	ra,8(sp)
    80028ebc:	4505                	li	a0,1
    80028ebe:	0141                	addi	sp,sp,16
    80028ec0:	8082                	ret

0000000080028ec2 <vec_test_13>:

bool vec_test_13(){
    80028ec2:	1141                	addi	sp,sp,-16

    TEST_START();
    80028ec4:	00007597          	auipc	a1,0x7
    80028ec8:	c0c58593          	addi	a1,a1,-1012 # 8002fad0 <__func__.11>
    80028ecc:	00007517          	auipc	a0,0x7
    80028ed0:	10c50513          	addi	a0,a0,268 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_13(){
    80028ed4:	e406                	sd	ra,8(sp)
    TEST_START();
    80028ed6:	1b6040ef          	jal	8002d08c <printf>
    80028eda:	4529                	li	a0,10
    80028edc:	69f020ef          	jal	8002bd7a <putchar>
    //设置不支持的 EEW 值，执行 vl<nf>r 指令

    TEST_END();
    80028ee0:	00007597          	auipc	a1,0x7
    80028ee4:	0d858593          	addi	a1,a1,216 # 8002ffb8 <__func__.0+0x2c8>
    80028ee8:	00007517          	auipc	a0,0x7
    80028eec:	18850513          	addi	a0,a0,392 # 80030070 <__func__.0+0x380>
    80028ef0:	19c040ef          	jal	8002d08c <printf>
    80028ef4:	4511                	li	a0,4
    80028ef6:	812d80ef          	jal	80000f08 <goto_priv>
    80028efa:	9d9d80ef          	jal	800018d2 <reset_state>

}
    80028efe:	60a2                	ld	ra,8(sp)
    80028f00:	4505                	li	a0,1
    80028f02:	0141                	addi	sp,sp,16
    80028f04:	8082                	ret

0000000080028f06 <vec_test_14>:



bool vec_test_14(){
    80028f06:	1101                	addi	sp,sp,-32

    TEST_START();
    80028f08:	00007597          	auipc	a1,0x7
    80028f0c:	bd858593          	addi	a1,a1,-1064 # 8002fae0 <__func__.10>
    80028f10:	00007517          	auipc	a0,0x7
    80028f14:	0c850513          	addi	a0,a0,200 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_14(){
    80028f18:	ec06                	sd	ra,24(sp)
    80028f1a:	e822                	sd	s0,16(sp)
    80028f1c:	e426                	sd	s1,8(sp)
    TEST_START();
    80028f1e:	16e040ef          	jal	8002d08c <printf>
    80028f22:	4529                	li	a0,10
    80028f24:	657020ef          	jal	8002bd7a <putchar>
    //浮点单元状态字段 mstatus.FS 被设置为 Off，任何尝试执行向量浮点指令
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028f28:	20000793          	li	a5,512
    80028f2c:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028f30:	40000793          	li	a5,1024
    80028f34:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    80028f38:	6709                	lui	a4,0x2
    80028f3a:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028f3e:	6791                	lui	a5,0x4
    80028f40:	3007b073          	csrc	mstatus,a5
// 设置向量浮点加法指令的执行条件
static inline void set_vfadd_conditions(int sew, int lmull, int vl, float v0_init, float v4_init, float v6_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80028f44:	00013617          	auipc	a2,0x13
    80028f48:	ec462787          	flw	fa5,-316(a2) # 8003be08 <__func__.0+0xc118>
    80028f4c:	00013617          	auipc	a2,0x13
    80028f50:	ec062707          	flw	fa4,-320(a2) # 8003be0c <__func__.0+0xc11c>
    80028f54:	00013617          	auipc	a2,0x13
    80028f58:	ebc62687          	flw	fa3,-324(a2) # 8003be10 <__func__.0+0xc120>
    80028f5c:	46a1                	li	a3,8
    80028f5e:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    80028f62:	5e07d057          	vfmv.v.f	v0,fa5
    80028f66:	5e075257          	vfmv.v.f	v4,fa4
    80028f6a:	5e06d357          	vfmv.v.f	v6,fa3
    float v6_init = 2.0; // 初始化 v6 的值为 2.0

    // 设置 vfadd 执行条件
    set_vfadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRC(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs = 0
    80028f6e:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028f72:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    80028f76:	e97d70ef          	jal	80000e0c <test_setup_except_function>
    );
}

// 执行向量浮点加法指令
static inline void execute_vfadd() {
    asm volatile (
    80028f7a:	02431457          	vfadd.vv	v8,v4,v6
    // 执行 vfadd 指令
    execute_vfadd();

    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80028f7e:	08200593          	li	a1,130
    80028f82:	00012617          	auipc	a2,0x12
    80028f86:	35e60613          	addi	a2,a2,862 # 8003b2e0 <__func__.0+0xb5f0>
    80028f8a:	00007517          	auipc	a0,0x7
    80028f8e:	06650513          	addi	a0,a0,102 # 8002fff0 <__func__.0+0x300>
    80028f92:	0fa040ef          	jal	8002d08c <printf>
    80028f96:	0002f797          	auipc	a5,0x2f
    80028f9a:	07b7c783          	lbu	a5,123(a5) # 80058011 <excpt+0x1>
    80028f9e:	0002f497          	auipc	s1,0x2f
    80028fa2:	07248493          	addi	s1,s1,114 # 80058010 <excpt>
    80028fa6:	00007597          	auipc	a1,0x7
    80028faa:	02258593          	addi	a1,a1,34 # 8002ffc8 <__func__.0+0x2d8>
    80028fae:	cf89                	beqz	a5,80028fc8 <vec_test_14+0xc2>
    80028fb0:	6498                	ld	a4,8(s1)
    80028fb2:	4789                	li	a5,2
    80028fb4:	00007597          	auipc	a1,0x7
    80028fb8:	00458593          	addi	a1,a1,4 # 8002ffb8 <__func__.0+0x2c8>
    80028fbc:	00f70663          	beq	a4,a5,80028fc8 <vec_test_14+0xc2>
    80028fc0:	00007597          	auipc	a1,0x7
    80028fc4:	00858593          	addi	a1,a1,8 # 8002ffc8 <__func__.0+0x2d8>
    80028fc8:	00007517          	auipc	a0,0x7
    80028fcc:	04050513          	addi	a0,a0,64 # 80030008 <__func__.0+0x318>
    80028fd0:	0bc040ef          	jal	8002d08c <printf>
    80028fd4:	0002f797          	auipc	a5,0x2f
    80028fd8:	03d7c783          	lbu	a5,61(a5) # 80058011 <excpt+0x1>
    80028fdc:	c789                	beqz	a5,80028fe6 <vec_test_14+0xe0>
    80028fde:	6498                	ld	a4,8(s1)
    80028fe0:	4789                	li	a5,2
    80028fe2:	00f70c63          	beq	a4,a5,80028ffa <vec_test_14+0xf4>
    80028fe6:	00007517          	auipc	a0,0x7
    80028fea:	02a50513          	addi	a0,a0,42 # 80030010 <__func__.0+0x320>
    80028fee:	09e040ef          	jal	8002d08c <printf>
    80028ff2:	02900513          	li	a0,41
    80028ff6:	585020ef          	jal	8002bd7a <putchar>
    80028ffa:	4529                	li	a0,10
    80028ffc:	57f020ef          	jal	8002bd7a <putchar>
    80029000:	0002f417          	auipc	s0,0x2f
    80029004:	01144403          	lbu	s0,17(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029008:	00007597          	auipc	a1,0x7
    8002900c:	fc058593          	addi	a1,a1,-64 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80029010:	cc11                	beqz	s0,8002902c <vec_test_14+0x126>
    80029012:	6498                	ld	a4,8(s1)
    80029014:	4789                	li	a5,2
    TEST_END();
    80029016:	00007597          	auipc	a1,0x7
    8002901a:	fa258593          	addi	a1,a1,-94 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    8002901e:	00f70763          	beq	a4,a5,8002902c <vec_test_14+0x126>
    80029022:	4401                	li	s0,0
    TEST_END();
    80029024:	00007597          	auipc	a1,0x7
    80029028:	fa458593          	addi	a1,a1,-92 # 8002ffc8 <__func__.0+0x2d8>
    8002902c:	00007517          	auipc	a0,0x7
    80029030:	04450513          	addi	a0,a0,68 # 80030070 <__func__.0+0x380>
    80029034:	058040ef          	jal	8002d08c <printf>
    80029038:	4511                	li	a0,4
    8002903a:	ecfd70ef          	jal	80000f08 <goto_priv>
    8002903e:	895d80ef          	jal	800018d2 <reset_state>

}
    80029042:	60e2                	ld	ra,24(sp)
    80029044:	8522                	mv	a0,s0
    80029046:	6442                	ld	s0,16(sp)
    80029048:	64a2                	ld	s1,8(sp)
    8002904a:	6105                	addi	sp,sp,32
    8002904c:	8082                	ret

000000008002904e <vec_test_15>:


bool vec_test_15(){
    8002904e:	1101                	addi	sp,sp,-32

    TEST_START();
    80029050:	00007597          	auipc	a1,0x7
    80029054:	aa058593          	addi	a1,a1,-1376 # 8002faf0 <__func__.9>
    80029058:	00007517          	auipc	a0,0x7
    8002905c:	f8050513          	addi	a0,a0,-128 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_15(){
    80029060:	ec06                	sd	ra,24(sp)
    80029062:	e822                	sd	s0,16(sp)
    80029064:	e426                	sd	s1,8(sp)
    TEST_START();
    80029066:	026040ef          	jal	8002d08c <printf>
    8002906a:	4529                	li	a0,10
    8002906c:	50f020ef          	jal	8002bd7a <putchar>
    //如果实现了虚拟化扩展且 V=1，如果 vsstatus.FS 或 mstatus.FS 被设置为 Off，任何尝试执行向量浮点指令的操作
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029070:	20000793          	li	a5,512
    80029074:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80029078:	40000793          	li	a5,1024
    8002907c:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    80029080:	6709                	lui	a4,0x2
    80029082:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80029086:	6791                	lui	a5,0x4
    80029088:	3007b073          	csrc	mstatus,a5
    asm volatile (
    8002908c:	00013617          	auipc	a2,0x13
    80029090:	d7c62787          	flw	fa5,-644(a2) # 8003be08 <__func__.0+0xc118>
    80029094:	00013617          	auipc	a2,0x13
    80029098:	d7862707          	flw	fa4,-648(a2) # 8003be0c <__func__.0+0xc11c>
    8002909c:	00013617          	auipc	a2,0x13
    800290a0:	d7462687          	flw	fa3,-652(a2) # 8003be10 <__func__.0+0xc120>
    800290a4:	46a1                	li	a3,8
    800290a6:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    800290aa:	5e07d057          	vfmv.v.f	v0,fa5
    800290ae:	5e075257          	vfmv.v.f	v4,fa4
    800290b2:	5e06d357          	vfmv.v.f	v6,fa3
    float v6_init = 2.0; // 初始化 v6 的值为 2.0

    // 设置 vfadd 执行条件
    set_vfadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    800290b6:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 14); 
    800290ba:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 13);      //设置vsstatus.fs = 0
    800290be:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 14); 
    800290c2:	2007b073          	csrc	vsstatus,a5

    TEST_SETUP_EXCEPT();
    800290c6:	d47d70ef          	jal	80000e0c <test_setup_except_function>
    // 执行 vfadd 指令
    goto_priv(PRIV_VU);
    800290ca:	4501                	li	a0,0
    800290cc:	e3dd70ef          	jal	80000f08 <goto_priv>
    asm volatile (
    800290d0:	02431457          	vfadd.vv	v8,v4,v6
    execute_vfadd();
    excpt_info();
    800290d4:	f7bd70ef          	jal	8000104e <excpt_info>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    800290d8:	08200593          	li	a1,130
    800290dc:	00012617          	auipc	a2,0x12
    800290e0:	24460613          	addi	a2,a2,580 # 8003b320 <__func__.0+0xb630>
    800290e4:	00007517          	auipc	a0,0x7
    800290e8:	f0c50513          	addi	a0,a0,-244 # 8002fff0 <__func__.0+0x300>
    800290ec:	7a1030ef          	jal	8002d08c <printf>
    800290f0:	0002f797          	auipc	a5,0x2f
    800290f4:	f217c783          	lbu	a5,-223(a5) # 80058011 <excpt+0x1>
    800290f8:	0002f497          	auipc	s1,0x2f
    800290fc:	f1848493          	addi	s1,s1,-232 # 80058010 <excpt>
    80029100:	00007597          	auipc	a1,0x7
    80029104:	ec858593          	addi	a1,a1,-312 # 8002ffc8 <__func__.0+0x2d8>
    80029108:	cf89                	beqz	a5,80029122 <vec_test_15+0xd4>
    8002910a:	6498                	ld	a4,8(s1)
    8002910c:	4789                	li	a5,2
    8002910e:	00007597          	auipc	a1,0x7
    80029112:	eaa58593          	addi	a1,a1,-342 # 8002ffb8 <__func__.0+0x2c8>
    80029116:	00f70663          	beq	a4,a5,80029122 <vec_test_15+0xd4>
    8002911a:	00007597          	auipc	a1,0x7
    8002911e:	eae58593          	addi	a1,a1,-338 # 8002ffc8 <__func__.0+0x2d8>
    80029122:	00007517          	auipc	a0,0x7
    80029126:	ee650513          	addi	a0,a0,-282 # 80030008 <__func__.0+0x318>
    8002912a:	763030ef          	jal	8002d08c <printf>
    8002912e:	0002f797          	auipc	a5,0x2f
    80029132:	ee37c783          	lbu	a5,-285(a5) # 80058011 <excpt+0x1>
    80029136:	c789                	beqz	a5,80029140 <vec_test_15+0xf2>
    80029138:	6498                	ld	a4,8(s1)
    8002913a:	4789                	li	a5,2
    8002913c:	00f70c63          	beq	a4,a5,80029154 <vec_test_15+0x106>
    80029140:	00007517          	auipc	a0,0x7
    80029144:	ed050513          	addi	a0,a0,-304 # 80030010 <__func__.0+0x320>
    80029148:	745030ef          	jal	8002d08c <printf>
    8002914c:	02900513          	li	a0,41
    80029150:	42b020ef          	jal	8002bd7a <putchar>
    80029154:	4529                	li	a0,10
    80029156:	425020ef          	jal	8002bd7a <putchar>
    8002915a:	0002f417          	auipc	s0,0x2f
    8002915e:	eb744403          	lbu	s0,-329(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029162:	00007597          	auipc	a1,0x7
    80029166:	e6658593          	addi	a1,a1,-410 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    8002916a:	cc11                	beqz	s0,80029186 <vec_test_15+0x138>
    8002916c:	6498                	ld	a4,8(s1)
    8002916e:	4789                	li	a5,2
    TEST_END();
    80029170:	00007597          	auipc	a1,0x7
    80029174:	e4858593          	addi	a1,a1,-440 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    80029178:	00f70763          	beq	a4,a5,80029186 <vec_test_15+0x138>
    8002917c:	4401                	li	s0,0
    TEST_END();
    8002917e:	00007597          	auipc	a1,0x7
    80029182:	e4a58593          	addi	a1,a1,-438 # 8002ffc8 <__func__.0+0x2d8>
    80029186:	00007517          	auipc	a0,0x7
    8002918a:	eea50513          	addi	a0,a0,-278 # 80030070 <__func__.0+0x380>
    8002918e:	6ff030ef          	jal	8002d08c <printf>
    80029192:	4511                	li	a0,4
    80029194:	d75d70ef          	jal	80000f08 <goto_priv>
    80029198:	f3ad80ef          	jal	800018d2 <reset_state>

}
    8002919c:	60e2                	ld	ra,24(sp)
    8002919e:	8522                	mv	a0,s0
    800291a0:	6442                	ld	s0,16(sp)
    800291a2:	64a2                	ld	s1,8(sp)
    800291a4:	6105                	addi	sp,sp,32
    800291a6:	8082                	ret

00000000800291a8 <vec_test_16>:





bool vec_test_16(){
    800291a8:	1101                	addi	sp,sp,-32

    TEST_START();
    800291aa:	00007597          	auipc	a1,0x7
    800291ae:	95658593          	addi	a1,a1,-1706 # 8002fb00 <__func__.8>
    800291b2:	00007517          	auipc	a0,0x7
    800291b6:	e2650513          	addi	a0,a0,-474 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_16(){
    800291ba:	ec06                	sd	ra,24(sp)
    800291bc:	e822                	sd	s0,16(sp)
    800291be:	e426                	sd	s1,8(sp)
    TEST_START();
    800291c0:	6cd030ef          	jal	8002d08c <printf>
    800291c4:	4529                	li	a0,10
    800291c6:	3b5020ef          	jal	8002bd7a <putchar>
    //如果 vstart 非零，执行vector reduction instructions操作


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800291ca:	20000793          	li	a5,512
    800291ce:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800291d2:	40000793          	li	a5,1024
    800291d6:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800291da:	4789                	li	a5,2
    800291dc:	0117f2d7          	vsetvli	t0,a5,e32,m2,tu,mu
    800291e0:	5e00b057          	vmv.v.i	v0,1
    800291e4:	5e003257          	vmv.v.i	v4,0
    800291e8:	5e00b357          	vmv.v.i	v6,1
    int vs2_init = 1;    // 初始化 v6（源数据）为 1


    // 设置 vredsum.vs 的执行条件
    set_vredsum_vs_conditions(sew, lmull, vl, vs1_init, vs2_init);
    excpt_info();
    800291ec:	e63d70ef          	jal	8000104e <excpt_info>

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800291f0:	57fd                	li	a5,-1
    800291f2:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800291f6:	008025f3          	csrr	a1,vstart
    800291fa:	00012517          	auipc	a0,0x12
    800291fe:	04650513          	addi	a0,a0,70 # 8003b240 <__func__.0+0xb550>
    80029202:	68b030ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    80029206:	c07d70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    8002920a:	00222157          	vredsum.vs	v2,v2,v4,v0.t
    execute_vredsum_vs();           // 执行 vredsum.vs 指令并获取结果
    excpt_info();
    8002920e:	e41d70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    80029212:	08200593          	li	a1,130
    80029216:	00012617          	auipc	a2,0x12
    8002921a:	15a60613          	addi	a2,a2,346 # 8003b370 <__func__.0+0xb680>
    8002921e:	00007517          	auipc	a0,0x7
    80029222:	dd250513          	addi	a0,a0,-558 # 8002fff0 <__func__.0+0x300>
    80029226:	667030ef          	jal	8002d08c <printf>
    8002922a:	0002f797          	auipc	a5,0x2f
    8002922e:	de77c783          	lbu	a5,-537(a5) # 80058011 <excpt+0x1>
    80029232:	0002f497          	auipc	s1,0x2f
    80029236:	dde48493          	addi	s1,s1,-546 # 80058010 <excpt>
    8002923a:	00007597          	auipc	a1,0x7
    8002923e:	d8e58593          	addi	a1,a1,-626 # 8002ffc8 <__func__.0+0x2d8>
    80029242:	cf89                	beqz	a5,8002925c <vec_test_16+0xb4>
    80029244:	6498                	ld	a4,8(s1)
    80029246:	4789                	li	a5,2
    80029248:	00007597          	auipc	a1,0x7
    8002924c:	d7058593          	addi	a1,a1,-656 # 8002ffb8 <__func__.0+0x2c8>
    80029250:	00f70663          	beq	a4,a5,8002925c <vec_test_16+0xb4>
    80029254:	00007597          	auipc	a1,0x7
    80029258:	d7458593          	addi	a1,a1,-652 # 8002ffc8 <__func__.0+0x2d8>
    8002925c:	00007517          	auipc	a0,0x7
    80029260:	dac50513          	addi	a0,a0,-596 # 80030008 <__func__.0+0x318>
    80029264:	629030ef          	jal	8002d08c <printf>
    80029268:	0002f797          	auipc	a5,0x2f
    8002926c:	da97c783          	lbu	a5,-599(a5) # 80058011 <excpt+0x1>
    80029270:	c789                	beqz	a5,8002927a <vec_test_16+0xd2>
    80029272:	6498                	ld	a4,8(s1)
    80029274:	4789                	li	a5,2
    80029276:	00f70c63          	beq	a4,a5,8002928e <vec_test_16+0xe6>
    8002927a:	00007517          	auipc	a0,0x7
    8002927e:	d9650513          	addi	a0,a0,-618 # 80030010 <__func__.0+0x320>
    80029282:	60b030ef          	jal	8002d08c <printf>
    80029286:	02900513          	li	a0,41
    8002928a:	2f1020ef          	jal	8002bd7a <putchar>
    8002928e:	4529                	li	a0,10
    80029290:	2eb020ef          	jal	8002bd7a <putchar>
    80029294:	0002f417          	auipc	s0,0x2f
    80029298:	d7d44403          	lbu	s0,-643(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002929c:	00007597          	auipc	a1,0x7
    800292a0:	d2c58593          	addi	a1,a1,-724 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    800292a4:	cc11                	beqz	s0,800292c0 <vec_test_16+0x118>
    800292a6:	6498                	ld	a4,8(s1)
    800292a8:	4789                	li	a5,2
    TEST_END();
    800292aa:	00007597          	auipc	a1,0x7
    800292ae:	d0e58593          	addi	a1,a1,-754 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    800292b2:	00f70763          	beq	a4,a5,800292c0 <vec_test_16+0x118>
    800292b6:	4401                	li	s0,0
    TEST_END();
    800292b8:	00007597          	auipc	a1,0x7
    800292bc:	d1058593          	addi	a1,a1,-752 # 8002ffc8 <__func__.0+0x2d8>
    800292c0:	00007517          	auipc	a0,0x7
    800292c4:	db050513          	addi	a0,a0,-592 # 80030070 <__func__.0+0x380>
    800292c8:	5c5030ef          	jal	8002d08c <printf>
    800292cc:	4511                	li	a0,4
    800292ce:	c3bd70ef          	jal	80000f08 <goto_priv>
    800292d2:	e00d80ef          	jal	800018d2 <reset_state>

}
    800292d6:	60e2                	ld	ra,24(sp)
    800292d8:	8522                	mv	a0,s0
    800292da:	6442                	ld	s0,16(sp)
    800292dc:	64a2                	ld	s1,8(sp)
    800292de:	6105                	addi	sp,sp,32
    800292e0:	8082                	ret

00000000800292e2 <vec_test_17>:



bool vec_test_17(){
    800292e2:	1101                	addi	sp,sp,-32

    TEST_START();
    800292e4:	00007597          	auipc	a1,0x7
    800292e8:	82c58593          	addi	a1,a1,-2004 # 8002fb10 <__func__.7>
    800292ec:	00007517          	auipc	a0,0x7
    800292f0:	cec50513          	addi	a0,a0,-788 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_17(){
    800292f4:	ec06                	sd	ra,24(sp)
    800292f6:	e822                	sd	s0,16(sp)
    800292f8:	e426                	sd	s1,8(sp)
    TEST_START();
    800292fa:	593030ef          	jal	8002d08c <printf>
    800292fe:	4529                	li	a0,10
    80029300:	27b020ef          	jal	8002bd7a <putchar>
    //如果 vstart 非零，执行vcpop.m指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029304:	20000793          	li	a5,512
    80029308:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    8002930c:	40000793          	li	a5,1024
    80029310:	3007a073          	csrs	mstatus,a5
    asm volatile (
    80029314:	47a1                	li	a5,8
    80029316:	4745                	li	a4,17
    80029318:	80e7f2d7          	vsetvl	t0,a5,a4
    8002931c:	5e00b057          	vmv.v.i	v0,1
    80029320:	5e00b157          	vmv.v.i	v2,1
    int v2_init = 1;     // 初始化 v2 的值为全 1

    // 设置 vcpop.m 的执行条件
    set_vcpop_conditions(vl, sew, lmull, v0_init, v2_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    80029324:	57fd                	li	a5,-1
    80029326:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    8002932a:	008025f3          	csrr	a1,vstart
    8002932e:	00012517          	auipc	a0,0x12
    80029332:	f1250513          	addi	a0,a0,-238 # 8003b240 <__func__.0+0xb550>
    80029336:	557030ef          	jal	8002d08c <printf>

    // 执行 vcpop.m 指令并返回结果
    TEST_SETUP_EXCEPT();
    8002933a:	ad3d70ef          	jal	80000e0c <test_setup_except_function>
    uint32_t result = execute_vcpop_v2();
    8002933e:	402827d7          	vcpop.m	a5,v2,v0.t

    excpt_info();
    80029342:	d0dd70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    80029346:	08200593          	li	a1,130
    8002934a:	00012617          	auipc	a2,0x12
    8002934e:	06660613          	addi	a2,a2,102 # 8003b3b0 <__func__.0+0xb6c0>
    80029352:	00007517          	auipc	a0,0x7
    80029356:	c9e50513          	addi	a0,a0,-866 # 8002fff0 <__func__.0+0x300>
    8002935a:	533030ef          	jal	8002d08c <printf>
    8002935e:	0002f797          	auipc	a5,0x2f
    80029362:	cb37c783          	lbu	a5,-845(a5) # 80058011 <excpt+0x1>
    80029366:	0002f497          	auipc	s1,0x2f
    8002936a:	caa48493          	addi	s1,s1,-854 # 80058010 <excpt>
    8002936e:	00007597          	auipc	a1,0x7
    80029372:	c5a58593          	addi	a1,a1,-934 # 8002ffc8 <__func__.0+0x2d8>
    80029376:	cf89                	beqz	a5,80029390 <vec_test_17+0xae>
    80029378:	6498                	ld	a4,8(s1)
    8002937a:	4789                	li	a5,2
    8002937c:	00007597          	auipc	a1,0x7
    80029380:	c3c58593          	addi	a1,a1,-964 # 8002ffb8 <__func__.0+0x2c8>
    80029384:	00f70663          	beq	a4,a5,80029390 <vec_test_17+0xae>
    80029388:	00007597          	auipc	a1,0x7
    8002938c:	c4058593          	addi	a1,a1,-960 # 8002ffc8 <__func__.0+0x2d8>
    80029390:	00007517          	auipc	a0,0x7
    80029394:	c7850513          	addi	a0,a0,-904 # 80030008 <__func__.0+0x318>
    80029398:	4f5030ef          	jal	8002d08c <printf>
    8002939c:	0002f797          	auipc	a5,0x2f
    800293a0:	c757c783          	lbu	a5,-907(a5) # 80058011 <excpt+0x1>
    800293a4:	c789                	beqz	a5,800293ae <vec_test_17+0xcc>
    800293a6:	6498                	ld	a4,8(s1)
    800293a8:	4789                	li	a5,2
    800293aa:	00f70c63          	beq	a4,a5,800293c2 <vec_test_17+0xe0>
    800293ae:	00007517          	auipc	a0,0x7
    800293b2:	c6250513          	addi	a0,a0,-926 # 80030010 <__func__.0+0x320>
    800293b6:	4d7030ef          	jal	8002d08c <printf>
    800293ba:	02900513          	li	a0,41
    800293be:	1bd020ef          	jal	8002bd7a <putchar>
    800293c2:	4529                	li	a0,10
    800293c4:	1b7020ef          	jal	8002bd7a <putchar>
    800293c8:	0002f417          	auipc	s0,0x2f
    800293cc:	c4944403          	lbu	s0,-951(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800293d0:	00007597          	auipc	a1,0x7
    800293d4:	bf858593          	addi	a1,a1,-1032 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    800293d8:	cc11                	beqz	s0,800293f4 <vec_test_17+0x112>
    800293da:	6498                	ld	a4,8(s1)
    800293dc:	4789                	li	a5,2
    TEST_END();
    800293de:	00007597          	auipc	a1,0x7
    800293e2:	bda58593          	addi	a1,a1,-1062 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    800293e6:	00f70763          	beq	a4,a5,800293f4 <vec_test_17+0x112>
    800293ea:	4401                	li	s0,0
    TEST_END();
    800293ec:	00007597          	auipc	a1,0x7
    800293f0:	bdc58593          	addi	a1,a1,-1060 # 8002ffc8 <__func__.0+0x2d8>
    800293f4:	00007517          	auipc	a0,0x7
    800293f8:	c7c50513          	addi	a0,a0,-900 # 80030070 <__func__.0+0x380>
    800293fc:	491030ef          	jal	8002d08c <printf>
    80029400:	4511                	li	a0,4
    80029402:	b07d70ef          	jal	80000f08 <goto_priv>
    80029406:	cccd80ef          	jal	800018d2 <reset_state>

}
    8002940a:	60e2                	ld	ra,24(sp)
    8002940c:	8522                	mv	a0,s0
    8002940e:	6442                	ld	s0,16(sp)
    80029410:	64a2                	ld	s1,8(sp)
    80029412:	6105                	addi	sp,sp,32
    80029414:	8082                	ret

0000000080029416 <vec_test_18>:



bool vec_test_18(){
    80029416:	1101                	addi	sp,sp,-32

    TEST_START();
    80029418:	00006597          	auipc	a1,0x6
    8002941c:	70858593          	addi	a1,a1,1800 # 8002fb20 <__func__.6>
    80029420:	00007517          	auipc	a0,0x7
    80029424:	bb850513          	addi	a0,a0,-1096 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_18(){
    80029428:	ec06                	sd	ra,24(sp)
    8002942a:	e822                	sd	s0,16(sp)
    8002942c:	e426                	sd	s1,8(sp)
    TEST_START();
    8002942e:	45f030ef          	jal	8002d08c <printf>
    80029432:	4529                	li	a0,10
    80029434:	147020ef          	jal	8002bd7a <putchar>
    //如果 vstart 非零，执行vfirst指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029438:	20000793          	li	a5,512
    8002943c:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029440:	40000793          	li	a5,1024
    80029444:	3007a073          	csrs	mstatus,a5
    int lmull = 1;     // LMUL = 1
    int vl = 2;        // 向量长度（处理 2 个元素）
    int v0_init = 1;   // 初始化 v0 的值为 1
    int v4_init = 2;   // 初始化 v4 的值为 2

    TEST_SETUP_EXCEPT();
    80029448:	9c5d70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    8002944c:	4785                	li	a5,1
    8002944e:	4749                	li	a4,18
    80029450:	80e7f2d7          	vsetvl	t0,a5,a4
    80029454:	5e00b057          	vmv.v.i	v0,1
    80029458:	5e013257          	vmv.v.i	v4,2

    // 设置 vfirst.m 的执行条件
    set_vfirst_m_conditions(vl, sew, lmull, v0_init, v4_init);
    excpt_info();
    8002945c:	bf3d70ef          	jal	8000104e <excpt_info>

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    80029460:	57fd                	li	a5,-1
    80029462:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029466:	008025f3          	csrr	a1,vstart
    8002946a:	00012517          	auipc	a0,0x12
    8002946e:	dd650513          	addi	a0,a0,-554 # 8003b240 <__func__.0+0xb550>
    80029472:	41b030ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    80029476:	997d70ef          	jal	80000e0c <test_setup_except_function>
    EXECUTE_VFIRST_M_V3();
    8002947a:	4038a7d7          	vfirst.m	a5,v3,v0.t
    excpt_info();
    8002947e:	bd1d70ef          	jal	8000104e <excpt_info>


    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    80029482:	08200593          	li	a1,130
    80029486:	00012617          	auipc	a2,0x12
    8002948a:	f6a60613          	addi	a2,a2,-150 # 8003b3f0 <__func__.0+0xb700>
    8002948e:	00007517          	auipc	a0,0x7
    80029492:	b6250513          	addi	a0,a0,-1182 # 8002fff0 <__func__.0+0x300>
    80029496:	3f7030ef          	jal	8002d08c <printf>
    8002949a:	0002f797          	auipc	a5,0x2f
    8002949e:	b777c783          	lbu	a5,-1161(a5) # 80058011 <excpt+0x1>
    800294a2:	0002f497          	auipc	s1,0x2f
    800294a6:	b6e48493          	addi	s1,s1,-1170 # 80058010 <excpt>
    800294aa:	00007597          	auipc	a1,0x7
    800294ae:	b1e58593          	addi	a1,a1,-1250 # 8002ffc8 <__func__.0+0x2d8>
    800294b2:	cf89                	beqz	a5,800294cc <vec_test_18+0xb6>
    800294b4:	6498                	ld	a4,8(s1)
    800294b6:	4789                	li	a5,2
    800294b8:	00007597          	auipc	a1,0x7
    800294bc:	b0058593          	addi	a1,a1,-1280 # 8002ffb8 <__func__.0+0x2c8>
    800294c0:	00f70663          	beq	a4,a5,800294cc <vec_test_18+0xb6>
    800294c4:	00007597          	auipc	a1,0x7
    800294c8:	b0458593          	addi	a1,a1,-1276 # 8002ffc8 <__func__.0+0x2d8>
    800294cc:	00007517          	auipc	a0,0x7
    800294d0:	b3c50513          	addi	a0,a0,-1220 # 80030008 <__func__.0+0x318>
    800294d4:	3b9030ef          	jal	8002d08c <printf>
    800294d8:	0002f797          	auipc	a5,0x2f
    800294dc:	b397c783          	lbu	a5,-1223(a5) # 80058011 <excpt+0x1>
    800294e0:	c789                	beqz	a5,800294ea <vec_test_18+0xd4>
    800294e2:	6498                	ld	a4,8(s1)
    800294e4:	4789                	li	a5,2
    800294e6:	00f70c63          	beq	a4,a5,800294fe <vec_test_18+0xe8>
    800294ea:	00007517          	auipc	a0,0x7
    800294ee:	b2650513          	addi	a0,a0,-1242 # 80030010 <__func__.0+0x320>
    800294f2:	39b030ef          	jal	8002d08c <printf>
    800294f6:	02900513          	li	a0,41
    800294fa:	081020ef          	jal	8002bd7a <putchar>
    800294fe:	4529                	li	a0,10
    80029500:	07b020ef          	jal	8002bd7a <putchar>
    80029504:	0002f417          	auipc	s0,0x2f
    80029508:	b0d44403          	lbu	s0,-1267(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002950c:	00007597          	auipc	a1,0x7
    80029510:	abc58593          	addi	a1,a1,-1348 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    80029514:	cc11                	beqz	s0,80029530 <vec_test_18+0x11a>
    80029516:	6498                	ld	a4,8(s1)
    80029518:	4789                	li	a5,2
    TEST_END();
    8002951a:	00007597          	auipc	a1,0x7
    8002951e:	a9e58593          	addi	a1,a1,-1378 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    80029522:	00f70763          	beq	a4,a5,80029530 <vec_test_18+0x11a>
    80029526:	4401                	li	s0,0
    TEST_END();
    80029528:	00007597          	auipc	a1,0x7
    8002952c:	aa058593          	addi	a1,a1,-1376 # 8002ffc8 <__func__.0+0x2d8>
    80029530:	00007517          	auipc	a0,0x7
    80029534:	b4050513          	addi	a0,a0,-1216 # 80030070 <__func__.0+0x380>
    80029538:	355030ef          	jal	8002d08c <printf>
    8002953c:	4511                	li	a0,4
    8002953e:	9cbd70ef          	jal	80000f08 <goto_priv>
    80029542:	b90d80ef          	jal	800018d2 <reset_state>

}
    80029546:	60e2                	ld	ra,24(sp)
    80029548:	8522                	mv	a0,s0
    8002954a:	6442                	ld	s0,16(sp)
    8002954c:	64a2                	ld	s1,8(sp)
    8002954e:	6105                	addi	sp,sp,32
    80029550:	8082                	ret

0000000080029552 <vec_test_19>:

bool vec_test_19(){
    80029552:	1101                	addi	sp,sp,-32

    TEST_START();
    80029554:	00006597          	auipc	a1,0x6
    80029558:	5dc58593          	addi	a1,a1,1500 # 8002fb30 <__func__.5>
    8002955c:	00007517          	auipc	a0,0x7
    80029560:	a7c50513          	addi	a0,a0,-1412 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_19(){
    80029564:	ec06                	sd	ra,24(sp)
    80029566:	e822                	sd	s0,16(sp)
    80029568:	e426                	sd	s1,8(sp)
    TEST_START();
    8002956a:	323030ef          	jal	8002d08c <printf>
    8002956e:	4529                	li	a0,10
    80029570:	00b020ef          	jal	8002bd7a <putchar>
    //如果 vstart 非零，执行vmsbf指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029574:	20000793          	li	a5,512
    80029578:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    8002957c:	40000793          	li	a5,1024
    80029580:	3007a073          	csrs	mstatus,a5
    asm volatile (
    80029584:	47a1                	li	a5,8
    80029586:	4745                	li	a4,17
    80029588:	80e7f2d7          	vsetvl	t0,a5,a4
    8002958c:	5e00b057          	vmv.v.i	v0,1
    80029590:	5e003257          	vmv.v.i	v4,0
    int v4_init = 0;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    set_vmsbfm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    80029594:	57fd                	li	a5,-1
    80029596:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    8002959a:	008025f3          	csrr	a1,vstart
    8002959e:	00012517          	auipc	a0,0x12
    800295a2:	ca250513          	addi	a0,a0,-862 # 8003b240 <__func__.0+0xb550>
    800295a6:	2e7030ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    800295aa:	863d70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    800295ae:	5040a1d7          	vmsbf.m	v3,v4,v0.t
    // 执行 vmsbf.m 指令
    execute_vmsbf_m();
    excpt_info();
    800295b2:	a9dd70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    800295b6:	08200593          	li	a1,130
    800295ba:	00012617          	auipc	a2,0x12
    800295be:	e7660613          	addi	a2,a2,-394 # 8003b430 <__func__.0+0xb740>
    800295c2:	00007517          	auipc	a0,0x7
    800295c6:	a2e50513          	addi	a0,a0,-1490 # 8002fff0 <__func__.0+0x300>
    800295ca:	2c3030ef          	jal	8002d08c <printf>
    800295ce:	0002f797          	auipc	a5,0x2f
    800295d2:	a437c783          	lbu	a5,-1469(a5) # 80058011 <excpt+0x1>
    800295d6:	0002f497          	auipc	s1,0x2f
    800295da:	a3a48493          	addi	s1,s1,-1478 # 80058010 <excpt>
    800295de:	00007597          	auipc	a1,0x7
    800295e2:	9ea58593          	addi	a1,a1,-1558 # 8002ffc8 <__func__.0+0x2d8>
    800295e6:	cf89                	beqz	a5,80029600 <vec_test_19+0xae>
    800295e8:	6498                	ld	a4,8(s1)
    800295ea:	4789                	li	a5,2
    800295ec:	00007597          	auipc	a1,0x7
    800295f0:	9cc58593          	addi	a1,a1,-1588 # 8002ffb8 <__func__.0+0x2c8>
    800295f4:	00f70663          	beq	a4,a5,80029600 <vec_test_19+0xae>
    800295f8:	00007597          	auipc	a1,0x7
    800295fc:	9d058593          	addi	a1,a1,-1584 # 8002ffc8 <__func__.0+0x2d8>
    80029600:	00007517          	auipc	a0,0x7
    80029604:	a0850513          	addi	a0,a0,-1528 # 80030008 <__func__.0+0x318>
    80029608:	285030ef          	jal	8002d08c <printf>
    8002960c:	0002f797          	auipc	a5,0x2f
    80029610:	a057c783          	lbu	a5,-1531(a5) # 80058011 <excpt+0x1>
    80029614:	c789                	beqz	a5,8002961e <vec_test_19+0xcc>
    80029616:	6498                	ld	a4,8(s1)
    80029618:	4789                	li	a5,2
    8002961a:	00f70c63          	beq	a4,a5,80029632 <vec_test_19+0xe0>
    8002961e:	00007517          	auipc	a0,0x7
    80029622:	9f250513          	addi	a0,a0,-1550 # 80030010 <__func__.0+0x320>
    80029626:	267030ef          	jal	8002d08c <printf>
    8002962a:	02900513          	li	a0,41
    8002962e:	74c020ef          	jal	8002bd7a <putchar>
    80029632:	4529                	li	a0,10
    80029634:	746020ef          	jal	8002bd7a <putchar>
    80029638:	0002f417          	auipc	s0,0x2f
    8002963c:	9d944403          	lbu	s0,-1575(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029640:	00007597          	auipc	a1,0x7
    80029644:	98858593          	addi	a1,a1,-1656 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    80029648:	cc11                	beqz	s0,80029664 <vec_test_19+0x112>
    8002964a:	6498                	ld	a4,8(s1)
    8002964c:	4789                	li	a5,2
    TEST_END();
    8002964e:	00007597          	auipc	a1,0x7
    80029652:	96a58593          	addi	a1,a1,-1686 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    80029656:	00f70763          	beq	a4,a5,80029664 <vec_test_19+0x112>
    8002965a:	4401                	li	s0,0
    TEST_END();
    8002965c:	00007597          	auipc	a1,0x7
    80029660:	96c58593          	addi	a1,a1,-1684 # 8002ffc8 <__func__.0+0x2d8>
    80029664:	00007517          	auipc	a0,0x7
    80029668:	a0c50513          	addi	a0,a0,-1524 # 80030070 <__func__.0+0x380>
    8002966c:	221030ef          	jal	8002d08c <printf>
    80029670:	4511                	li	a0,4
    80029672:	897d70ef          	jal	80000f08 <goto_priv>
    80029676:	a5cd80ef          	jal	800018d2 <reset_state>

}
    8002967a:	60e2                	ld	ra,24(sp)
    8002967c:	8522                	mv	a0,s0
    8002967e:	6442                	ld	s0,16(sp)
    80029680:	64a2                	ld	s1,8(sp)
    80029682:	6105                	addi	sp,sp,32
    80029684:	8082                	ret

0000000080029686 <vec_test_20>:

bool vec_test_20(){
    80029686:	1101                	addi	sp,sp,-32

    TEST_START();
    80029688:	00006597          	auipc	a1,0x6
    8002968c:	4b858593          	addi	a1,a1,1208 # 8002fb40 <__func__.4>
    80029690:	00007517          	auipc	a0,0x7
    80029694:	94850513          	addi	a0,a0,-1720 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_20(){
    80029698:	ec06                	sd	ra,24(sp)
    8002969a:	e822                	sd	s0,16(sp)
    8002969c:	e426                	sd	s1,8(sp)
    TEST_START();
    8002969e:	1ef030ef          	jal	8002d08c <printf>
    800296a2:	4529                	li	a0,10
    800296a4:	6d6020ef          	jal	8002bd7a <putchar>
    //如果 vstart 非零，执行vmsif指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800296a8:	20000793          	li	a5,512
    800296ac:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800296b0:	40000793          	li	a5,1024
    800296b4:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800296b8:	47a1                	li	a5,8
    800296ba:	4745                	li	a4,17
    800296bc:	80e7f2d7          	vsetvl	t0,a5,a4
    800296c0:	5e00b057          	vmv.v.i	v0,1
    800296c4:	5e01b257          	vmv.v.i	v4,3
    int v4_init = 3;    // 初始化 v4 的值为 3

    // 设置 vmsif.m 的执行条件
    set_vmsifm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800296c8:	57fd                	li	a5,-1
    800296ca:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800296ce:	008025f3          	csrr	a1,vstart
    800296d2:	00012517          	auipc	a0,0x12
    800296d6:	b6e50513          	addi	a0,a0,-1170 # 8003b240 <__func__.0+0xb550>
    800296da:	1b3030ef          	jal	8002d08c <printf>

    // 执行 vmsif.m 指令
    TEST_SETUP_EXCEPT();
    800296de:	f2ed70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    800296e2:	5041a2d7          	vmsif.m	v5,v4,v0.t
    execute_vmsif_m();
    excpt_info();
    800296e6:	969d70ef          	jal	8000104e <excpt_info>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800296ea:	08200593          	li	a1,130
    800296ee:	00012617          	auipc	a2,0x12
    800296f2:	d8260613          	addi	a2,a2,-638 # 8003b470 <__func__.0+0xb780>
    800296f6:	00007517          	auipc	a0,0x7
    800296fa:	8fa50513          	addi	a0,a0,-1798 # 8002fff0 <__func__.0+0x300>
    800296fe:	18f030ef          	jal	8002d08c <printf>
    80029702:	0002f797          	auipc	a5,0x2f
    80029706:	90f7c783          	lbu	a5,-1777(a5) # 80058011 <excpt+0x1>
    8002970a:	0002f497          	auipc	s1,0x2f
    8002970e:	90648493          	addi	s1,s1,-1786 # 80058010 <excpt>
    80029712:	00007597          	auipc	a1,0x7
    80029716:	8b658593          	addi	a1,a1,-1866 # 8002ffc8 <__func__.0+0x2d8>
    8002971a:	cf89                	beqz	a5,80029734 <vec_test_20+0xae>
    8002971c:	6498                	ld	a4,8(s1)
    8002971e:	4789                	li	a5,2
    80029720:	00007597          	auipc	a1,0x7
    80029724:	89858593          	addi	a1,a1,-1896 # 8002ffb8 <__func__.0+0x2c8>
    80029728:	00f70663          	beq	a4,a5,80029734 <vec_test_20+0xae>
    8002972c:	00007597          	auipc	a1,0x7
    80029730:	89c58593          	addi	a1,a1,-1892 # 8002ffc8 <__func__.0+0x2d8>
    80029734:	00007517          	auipc	a0,0x7
    80029738:	8d450513          	addi	a0,a0,-1836 # 80030008 <__func__.0+0x318>
    8002973c:	151030ef          	jal	8002d08c <printf>
    80029740:	0002f797          	auipc	a5,0x2f
    80029744:	8d17c783          	lbu	a5,-1839(a5) # 80058011 <excpt+0x1>
    80029748:	c789                	beqz	a5,80029752 <vec_test_20+0xcc>
    8002974a:	6498                	ld	a4,8(s1)
    8002974c:	4789                	li	a5,2
    8002974e:	00f70c63          	beq	a4,a5,80029766 <vec_test_20+0xe0>
    80029752:	00007517          	auipc	a0,0x7
    80029756:	8be50513          	addi	a0,a0,-1858 # 80030010 <__func__.0+0x320>
    8002975a:	133030ef          	jal	8002d08c <printf>
    8002975e:	02900513          	li	a0,41
    80029762:	618020ef          	jal	8002bd7a <putchar>
    80029766:	4529                	li	a0,10
    80029768:	612020ef          	jal	8002bd7a <putchar>
    8002976c:	0002f417          	auipc	s0,0x2f
    80029770:	8a544403          	lbu	s0,-1883(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029774:	00007597          	auipc	a1,0x7
    80029778:	85458593          	addi	a1,a1,-1964 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    8002977c:	cc11                	beqz	s0,80029798 <vec_test_20+0x112>
    8002977e:	6498                	ld	a4,8(s1)
    80029780:	4789                	li	a5,2
    TEST_END();
    80029782:	00007597          	auipc	a1,0x7
    80029786:	83658593          	addi	a1,a1,-1994 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    8002978a:	00f70763          	beq	a4,a5,80029798 <vec_test_20+0x112>
    8002978e:	4401                	li	s0,0
    TEST_END();
    80029790:	00007597          	auipc	a1,0x7
    80029794:	83858593          	addi	a1,a1,-1992 # 8002ffc8 <__func__.0+0x2d8>
    80029798:	00007517          	auipc	a0,0x7
    8002979c:	8d850513          	addi	a0,a0,-1832 # 80030070 <__func__.0+0x380>
    800297a0:	0ed030ef          	jal	8002d08c <printf>
    800297a4:	4511                	li	a0,4
    800297a6:	f62d70ef          	jal	80000f08 <goto_priv>
    800297aa:	928d80ef          	jal	800018d2 <reset_state>

}
    800297ae:	60e2                	ld	ra,24(sp)
    800297b0:	8522                	mv	a0,s0
    800297b2:	6442                	ld	s0,16(sp)
    800297b4:	64a2                	ld	s1,8(sp)
    800297b6:	6105                	addi	sp,sp,32
    800297b8:	8082                	ret

00000000800297ba <vec_test_21>:

bool vec_test_21(){
    800297ba:	1101                	addi	sp,sp,-32

    TEST_START();
    800297bc:	00006597          	auipc	a1,0x6
    800297c0:	39458593          	addi	a1,a1,916 # 8002fb50 <__func__.3>
    800297c4:	00007517          	auipc	a0,0x7
    800297c8:	81450513          	addi	a0,a0,-2028 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_21(){
    800297cc:	ec06                	sd	ra,24(sp)
    800297ce:	e822                	sd	s0,16(sp)
    800297d0:	e426                	sd	s1,8(sp)
    TEST_START();
    800297d2:	0bb030ef          	jal	8002d08c <printf>
    800297d6:	4529                	li	a0,10
    800297d8:	5a2020ef          	jal	8002bd7a <putchar>
    //如果 vstart 非零，执行vmsof指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800297dc:	20000793          	li	a5,512
    800297e0:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800297e4:	40000793          	li	a5,1024
    800297e8:	3007a073          	csrs	mstatus,a5
    asm volatile (
    800297ec:	47a1                	li	a5,8
    800297ee:	4745                	li	a4,17
    800297f0:	80e7f2d7          	vsetvl	t0,a5,a4
    800297f4:	5e00b057          	vmv.v.i	v0,1
    800297f8:	5e01b257          	vmv.v.i	v4,3
    int v4_init = 3;    // 初始化 v4 的值为 3

    // 设置 vmsof.m 的执行条件
    set_vmsofm_conditions(vl, sew, lmull, v0_init, v4_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    800297fc:	57fd                	li	a5,-1
    800297fe:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029802:	008025f3          	csrr	a1,vstart
    80029806:	00012517          	auipc	a0,0x12
    8002980a:	a3a50513          	addi	a0,a0,-1478 # 8003b240 <__func__.0+0xb550>
    8002980e:	07f030ef          	jal	8002d08c <printf>

    // 执行 vmsof.m 指令
    TEST_SETUP_EXCEPT();
    80029812:	dfad70ef          	jal	80000e0c <test_setup_except_function>
    asm volatile (
    80029816:	504122d7          	vmsof.m	v5,v4,v0.t
    execute_vmsof_m();
    excpt_info();
    8002981a:	835d70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    8002981e:	08200593          	li	a1,130
    80029822:	00012617          	auipc	a2,0x12
    80029826:	c4e60613          	addi	a2,a2,-946 # 8003b470 <__func__.0+0xb780>
    8002982a:	00006517          	auipc	a0,0x6
    8002982e:	7c650513          	addi	a0,a0,1990 # 8002fff0 <__func__.0+0x300>
    80029832:	05b030ef          	jal	8002d08c <printf>
    80029836:	0002e797          	auipc	a5,0x2e
    8002983a:	7db7c783          	lbu	a5,2011(a5) # 80058011 <excpt+0x1>
    8002983e:	0002e497          	auipc	s1,0x2e
    80029842:	7d248493          	addi	s1,s1,2002 # 80058010 <excpt>
    80029846:	00006597          	auipc	a1,0x6
    8002984a:	78258593          	addi	a1,a1,1922 # 8002ffc8 <__func__.0+0x2d8>
    8002984e:	cf89                	beqz	a5,80029868 <vec_test_21+0xae>
    80029850:	6498                	ld	a4,8(s1)
    80029852:	4789                	li	a5,2
    80029854:	00006597          	auipc	a1,0x6
    80029858:	76458593          	addi	a1,a1,1892 # 8002ffb8 <__func__.0+0x2c8>
    8002985c:	00f70663          	beq	a4,a5,80029868 <vec_test_21+0xae>
    80029860:	00006597          	auipc	a1,0x6
    80029864:	76858593          	addi	a1,a1,1896 # 8002ffc8 <__func__.0+0x2d8>
    80029868:	00006517          	auipc	a0,0x6
    8002986c:	7a050513          	addi	a0,a0,1952 # 80030008 <__func__.0+0x318>
    80029870:	01d030ef          	jal	8002d08c <printf>
    80029874:	0002e797          	auipc	a5,0x2e
    80029878:	79d7c783          	lbu	a5,1949(a5) # 80058011 <excpt+0x1>
    8002987c:	c789                	beqz	a5,80029886 <vec_test_21+0xcc>
    8002987e:	6498                	ld	a4,8(s1)
    80029880:	4789                	li	a5,2
    80029882:	00f70c63          	beq	a4,a5,8002989a <vec_test_21+0xe0>
    80029886:	00006517          	auipc	a0,0x6
    8002988a:	78a50513          	addi	a0,a0,1930 # 80030010 <__func__.0+0x320>
    8002988e:	7fe030ef          	jal	8002d08c <printf>
    80029892:	02900513          	li	a0,41
    80029896:	4e4020ef          	jal	8002bd7a <putchar>
    8002989a:	4529                	li	a0,10
    8002989c:	4de020ef          	jal	8002bd7a <putchar>
    800298a0:	0002e417          	auipc	s0,0x2e
    800298a4:	77144403          	lbu	s0,1905(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800298a8:	00006597          	auipc	a1,0x6
    800298ac:	72058593          	addi	a1,a1,1824 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800298b0:	cc11                	beqz	s0,800298cc <vec_test_21+0x112>
    800298b2:	6498                	ld	a4,8(s1)
    800298b4:	4789                	li	a5,2
    TEST_END();
    800298b6:	00006597          	auipc	a1,0x6
    800298ba:	70258593          	addi	a1,a1,1794 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800298be:	00f70763          	beq	a4,a5,800298cc <vec_test_21+0x112>
    800298c2:	4401                	li	s0,0
    TEST_END();
    800298c4:	00006597          	auipc	a1,0x6
    800298c8:	70458593          	addi	a1,a1,1796 # 8002ffc8 <__func__.0+0x2d8>
    800298cc:	00006517          	auipc	a0,0x6
    800298d0:	7a450513          	addi	a0,a0,1956 # 80030070 <__func__.0+0x380>
    800298d4:	7b8030ef          	jal	8002d08c <printf>
    800298d8:	4511                	li	a0,4
    800298da:	e2ed70ef          	jal	80000f08 <goto_priv>
    800298de:	ff5d70ef          	jal	800018d2 <reset_state>

}
    800298e2:	60e2                	ld	ra,24(sp)
    800298e4:	8522                	mv	a0,s0
    800298e6:	6442                	ld	s0,16(sp)
    800298e8:	64a2                	ld	s1,8(sp)
    800298ea:	6105                	addi	sp,sp,32
    800298ec:	8082                	ret

00000000800298ee <vec_test_22>:

bool vec_test_22(){
    800298ee:	1101                	addi	sp,sp,-32

    TEST_START();
    800298f0:	00006597          	auipc	a1,0x6
    800298f4:	27058593          	addi	a1,a1,624 # 8002fb60 <__func__.2>
    800298f8:	00006517          	auipc	a0,0x6
    800298fc:	6e050513          	addi	a0,a0,1760 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_22(){
    80029900:	ec06                	sd	ra,24(sp)
    80029902:	e822                	sd	s0,16(sp)
    80029904:	e426                	sd	s1,8(sp)
    TEST_START();
    80029906:	786030ef          	jal	8002d08c <printf>
    8002990a:	4529                	li	a0,10
    8002990c:	46e020ef          	jal	8002bd7a <putchar>
    //如果 vstart 非零，执行viota.m 指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029910:	20000793          	li	a5,512
    80029914:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029918:	40000793          	li	a5,1024
    8002991c:	3007a073          	csrs	mstatus,a5
// 设置 viota.m 执行条件
static inline void set_viota_m_conditions(int vl, int sew, int lmull, int v0_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80029920:	47a1                	li	a5,8
    80029922:	4745                	li	a4,17
    80029924:	80e7f2d7          	vsetvl	t0,a5,a4
    80029928:	5e00b057          	vmv.v.i	v0,1
    int v0_init = 1;    // 初始化 v0 的值为 1（全1）

    // 设置 viota.m 的执行条件
    set_viota_m_conditions(vl, sew, lmull, v0_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    8002992c:	57fd                	li	a5,-1
    8002992e:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029932:	008025f3          	csrr	a1,vstart
    80029936:	00012517          	auipc	a0,0x12
    8002993a:	90a50513          	addi	a0,a0,-1782 # 8003b240 <__func__.0+0xb550>
    8002993e:	74e030ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    80029942:	ccad70ef          	jal	80000e0c <test_setup_except_function>
    );
}

// 执行 viota.m 指令
static inline void execute_viota_m() {
    asm volatile (
    80029946:	52082357          	viota.m	v6,v0
    // 执行 viota.m 指令
    execute_viota_m();

    excpt_info();
    8002994a:	f04d70ef          	jal	8000104e <excpt_info>



    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    8002994e:	08200593          	li	a1,130
    80029952:	00012617          	auipc	a2,0x12
    80029956:	b5e60613          	addi	a2,a2,-1186 # 8003b4b0 <__func__.0+0xb7c0>
    8002995a:	00006517          	auipc	a0,0x6
    8002995e:	69650513          	addi	a0,a0,1686 # 8002fff0 <__func__.0+0x300>
    80029962:	72a030ef          	jal	8002d08c <printf>
    80029966:	0002e797          	auipc	a5,0x2e
    8002996a:	6ab7c783          	lbu	a5,1707(a5) # 80058011 <excpt+0x1>
    8002996e:	0002e497          	auipc	s1,0x2e
    80029972:	6a248493          	addi	s1,s1,1698 # 80058010 <excpt>
    80029976:	00006597          	auipc	a1,0x6
    8002997a:	65258593          	addi	a1,a1,1618 # 8002ffc8 <__func__.0+0x2d8>
    8002997e:	cf89                	beqz	a5,80029998 <vec_test_22+0xaa>
    80029980:	6498                	ld	a4,8(s1)
    80029982:	4789                	li	a5,2
    80029984:	00006597          	auipc	a1,0x6
    80029988:	63458593          	addi	a1,a1,1588 # 8002ffb8 <__func__.0+0x2c8>
    8002998c:	00f70663          	beq	a4,a5,80029998 <vec_test_22+0xaa>
    80029990:	00006597          	auipc	a1,0x6
    80029994:	63858593          	addi	a1,a1,1592 # 8002ffc8 <__func__.0+0x2d8>
    80029998:	00006517          	auipc	a0,0x6
    8002999c:	67050513          	addi	a0,a0,1648 # 80030008 <__func__.0+0x318>
    800299a0:	6ec030ef          	jal	8002d08c <printf>
    800299a4:	0002e797          	auipc	a5,0x2e
    800299a8:	66d7c783          	lbu	a5,1645(a5) # 80058011 <excpt+0x1>
    800299ac:	c789                	beqz	a5,800299b6 <vec_test_22+0xc8>
    800299ae:	6498                	ld	a4,8(s1)
    800299b0:	4789                	li	a5,2
    800299b2:	00f70c63          	beq	a4,a5,800299ca <vec_test_22+0xdc>
    800299b6:	00006517          	auipc	a0,0x6
    800299ba:	65a50513          	addi	a0,a0,1626 # 80030010 <__func__.0+0x320>
    800299be:	6ce030ef          	jal	8002d08c <printf>
    800299c2:	02900513          	li	a0,41
    800299c6:	3b4020ef          	jal	8002bd7a <putchar>
    800299ca:	4529                	li	a0,10
    800299cc:	3ae020ef          	jal	8002bd7a <putchar>
    800299d0:	0002e417          	auipc	s0,0x2e
    800299d4:	64144403          	lbu	s0,1601(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800299d8:	00006597          	auipc	a1,0x6
    800299dc:	5f058593          	addi	a1,a1,1520 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    800299e0:	cc11                	beqz	s0,800299fc <vec_test_22+0x10e>
    800299e2:	6498                	ld	a4,8(s1)
    800299e4:	4789                	li	a5,2
    TEST_END();
    800299e6:	00006597          	auipc	a1,0x6
    800299ea:	5d258593          	addi	a1,a1,1490 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    800299ee:	00f70763          	beq	a4,a5,800299fc <vec_test_22+0x10e>
    800299f2:	4401                	li	s0,0
    TEST_END();
    800299f4:	00006597          	auipc	a1,0x6
    800299f8:	5d458593          	addi	a1,a1,1492 # 8002ffc8 <__func__.0+0x2d8>
    800299fc:	00006517          	auipc	a0,0x6
    80029a00:	67450513          	addi	a0,a0,1652 # 80030070 <__func__.0+0x380>
    80029a04:	688030ef          	jal	8002d08c <printf>
    80029a08:	4511                	li	a0,4
    80029a0a:	cfed70ef          	jal	80000f08 <goto_priv>
    80029a0e:	ec5d70ef          	jal	800018d2 <reset_state>

}
    80029a12:	60e2                	ld	ra,24(sp)
    80029a14:	8522                	mv	a0,s0
    80029a16:	6442                	ld	s0,16(sp)
    80029a18:	64a2                	ld	s1,8(sp)
    80029a1a:	6105                	addi	sp,sp,32
    80029a1c:	8082                	ret

0000000080029a1e <vec_test_23>:



bool vec_test_23(){
    80029a1e:	1101                	addi	sp,sp,-32

    TEST_START();
    80029a20:	00006597          	auipc	a1,0x6
    80029a24:	15058593          	addi	a1,a1,336 # 8002fb70 <__func__.1>
    80029a28:	00006517          	auipc	a0,0x6
    80029a2c:	5b050513          	addi	a0,a0,1456 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_23(){
    80029a30:	ec06                	sd	ra,24(sp)
    80029a32:	e822                	sd	s0,16(sp)
    80029a34:	e426                	sd	s1,8(sp)
    TEST_START();
    80029a36:	656030ef          	jal	8002d08c <printf>
    80029a3a:	4529                	li	a0,10
    80029a3c:	33e020ef          	jal	8002bd7a <putchar>
    //如果 vstart 非零，执行vcompress 指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029a40:	20000793          	li	a5,512
    80029a44:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029a48:	40000793          	li	a5,1024
    80029a4c:	3007a073          	csrs	mstatus,a5
// 设置 vcompress 执行条件
static inline void set_vcompress_conditions(int vl, int sew, int lmull, int v0_init, int v4_init, int v8_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80029a50:	47a1                	li	a5,8
    80029a52:	4745                	li	a4,17
    80029a54:	80e7f2d7          	vsetvl	t0,a5,a4
    80029a58:	5e00b057          	vmv.v.i	v0,1
    80029a5c:	5e01b257          	vmv.v.i	v4,3
    80029a60:	5e003457          	vmv.v.i	v8,0
    int v8_init = 0;    // 初始化 v8 的值为 0

    // 设置 vcompress 的执行条件
    set_vcompress_conditions(vl, sew, lmull, v0_init, v4_init, v8_init);

    CSRW(CSR_VSTART,(uint64_t)-1)       //设置vstart非零
    80029a64:	57fd                	li	a5,-1
    80029a66:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029a6a:	008025f3          	csrr	a1,vstart
    80029a6e:	00011517          	auipc	a0,0x11
    80029a72:	7d250513          	addi	a0,a0,2002 # 8003b240 <__func__.0+0xb550>
    80029a76:	616030ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    80029a7a:	b92d70ef          	jal	80000e0c <test_setup_except_function>
    );
}

// 执行 vcompress 指令
static inline void execute_vcompress() {
    asm volatile (
    80029a7e:	5e402457          	vcompress.vm	v8,v4,v0
    // 执行 vcompress 指令
    execute_vcompress();
    excpt_info();
    80029a82:	dccd70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029a86:	08200593          	li	a1,130
    80029a8a:	00012617          	auipc	a2,0x12
    80029a8e:	a6660613          	addi	a2,a2,-1434 # 8003b4f0 <__func__.0+0xb800>
    80029a92:	00006517          	auipc	a0,0x6
    80029a96:	55e50513          	addi	a0,a0,1374 # 8002fff0 <__func__.0+0x300>
    80029a9a:	5f2030ef          	jal	8002d08c <printf>
    80029a9e:	0002e797          	auipc	a5,0x2e
    80029aa2:	5737c783          	lbu	a5,1395(a5) # 80058011 <excpt+0x1>
    80029aa6:	0002e497          	auipc	s1,0x2e
    80029aaa:	56a48493          	addi	s1,s1,1386 # 80058010 <excpt>
    80029aae:	00006597          	auipc	a1,0x6
    80029ab2:	51a58593          	addi	a1,a1,1306 # 8002ffc8 <__func__.0+0x2d8>
    80029ab6:	cf89                	beqz	a5,80029ad0 <vec_test_23+0xb2>
    80029ab8:	6498                	ld	a4,8(s1)
    80029aba:	4789                	li	a5,2
    80029abc:	00006597          	auipc	a1,0x6
    80029ac0:	4fc58593          	addi	a1,a1,1276 # 8002ffb8 <__func__.0+0x2c8>
    80029ac4:	00f70663          	beq	a4,a5,80029ad0 <vec_test_23+0xb2>
    80029ac8:	00006597          	auipc	a1,0x6
    80029acc:	50058593          	addi	a1,a1,1280 # 8002ffc8 <__func__.0+0x2d8>
    80029ad0:	00006517          	auipc	a0,0x6
    80029ad4:	53850513          	addi	a0,a0,1336 # 80030008 <__func__.0+0x318>
    80029ad8:	5b4030ef          	jal	8002d08c <printf>
    80029adc:	0002e797          	auipc	a5,0x2e
    80029ae0:	5357c783          	lbu	a5,1333(a5) # 80058011 <excpt+0x1>
    80029ae4:	c789                	beqz	a5,80029aee <vec_test_23+0xd0>
    80029ae6:	6498                	ld	a4,8(s1)
    80029ae8:	4789                	li	a5,2
    80029aea:	00f70c63          	beq	a4,a5,80029b02 <vec_test_23+0xe4>
    80029aee:	00006517          	auipc	a0,0x6
    80029af2:	52250513          	addi	a0,a0,1314 # 80030010 <__func__.0+0x320>
    80029af6:	596030ef          	jal	8002d08c <printf>
    80029afa:	02900513          	li	a0,41
    80029afe:	27c020ef          	jal	8002bd7a <putchar>
    80029b02:	4529                	li	a0,10
    80029b04:	276020ef          	jal	8002bd7a <putchar>
    80029b08:	0002e417          	auipc	s0,0x2e
    80029b0c:	50944403          	lbu	s0,1289(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029b10:	00006597          	auipc	a1,0x6
    80029b14:	4b858593          	addi	a1,a1,1208 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029b18:	cc11                	beqz	s0,80029b34 <vec_test_23+0x116>
    80029b1a:	6498                	ld	a4,8(s1)
    80029b1c:	4789                	li	a5,2
    TEST_END();
    80029b1e:	00006597          	auipc	a1,0x6
    80029b22:	49a58593          	addi	a1,a1,1178 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029b26:	00f70763          	beq	a4,a5,80029b34 <vec_test_23+0x116>
    80029b2a:	4401                	li	s0,0
    TEST_END();
    80029b2c:	00006597          	auipc	a1,0x6
    80029b30:	49c58593          	addi	a1,a1,1180 # 8002ffc8 <__func__.0+0x2d8>
    80029b34:	00006517          	auipc	a0,0x6
    80029b38:	53c50513          	addi	a0,a0,1340 # 80030070 <__func__.0+0x380>
    80029b3c:	550030ef          	jal	8002d08c <printf>
    80029b40:	4511                	li	a0,4
    80029b42:	bc6d70ef          	jal	80000f08 <goto_priv>
    80029b46:	d8dd70ef          	jal	800018d2 <reset_state>

}
    80029b4a:	60e2                	ld	ra,24(sp)
    80029b4c:	8522                	mv	a0,s0
    80029b4e:	6442                	ld	s0,16(sp)
    80029b50:	64a2                	ld	s1,8(sp)
    80029b52:	6105                	addi	sp,sp,32
    80029b54:	8082                	ret

0000000080029b56 <vec_test_24>:



bool vec_test_24(){
    80029b56:	1101                	addi	sp,sp,-32

    TEST_START();
    80029b58:	00006597          	auipc	a1,0x6
    80029b5c:	02858593          	addi	a1,a1,40 # 8002fb80 <__func__.0>
    80029b60:	00006517          	auipc	a0,0x6
    80029b64:	47850513          	addi	a0,a0,1144 # 8002ffd8 <__func__.0+0x2e8>
bool vec_test_24(){
    80029b68:	ec06                	sd	ra,24(sp)
    80029b6a:	e822                	sd	s0,16(sp)
    80029b6c:	e426                	sd	s1,8(sp)
    TEST_START();
    80029b6e:	51e030ef          	jal	8002d08c <printf>
    80029b72:	4529                	li	a0,10
    80029b74:	206020ef          	jal	8002bd7a <putchar>
    //当执行一个向量指令时，如设置 EGS > VLMAX


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029b78:	20000793          	li	a5,512
    80029b7c:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029b80:	40000793          	li	a5,1024
    80029b84:	3007a073          	csrs	mstatus,a5
    int vl = 32;       // 向量长

    // 计算 VLMAX
    int vlen = 128;     // 硬件的向量寄存器长度（128 位）
    int vlmax = (vlen / sew) * lmull;
    printf("Calculated VLMAX: %d elements\n", vlmax);
    80029b88:	10000593          	li	a1,256
    80029b8c:	00012517          	auipc	a0,0x12
    80029b90:	9a450513          	addi	a0,a0,-1628 # 8003b530 <__func__.0+0xb840>
    80029b94:	4f8030ef          	jal	8002d08c <printf>

    // 设置 EGS > VLMAX 的执行条件
    // set_egs_greater_vlmax_conditions(vl, sew, lmull);

    excpt_info();
    80029b98:	cb6d70ef          	jal	8000104e <excpt_info>

    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029b9c:	08200593          	li	a1,130
    80029ba0:	00012617          	auipc	a2,0x12
    80029ba4:	95060613          	addi	a2,a2,-1712 # 8003b4f0 <__func__.0+0xb800>
    80029ba8:	00006517          	auipc	a0,0x6
    80029bac:	44850513          	addi	a0,a0,1096 # 8002fff0 <__func__.0+0x300>
    80029bb0:	4dc030ef          	jal	8002d08c <printf>
    80029bb4:	0002e797          	auipc	a5,0x2e
    80029bb8:	45d7c783          	lbu	a5,1117(a5) # 80058011 <excpt+0x1>
    80029bbc:	0002e497          	auipc	s1,0x2e
    80029bc0:	45448493          	addi	s1,s1,1108 # 80058010 <excpt>
    80029bc4:	00006597          	auipc	a1,0x6
    80029bc8:	40458593          	addi	a1,a1,1028 # 8002ffc8 <__func__.0+0x2d8>
    80029bcc:	cf89                	beqz	a5,80029be6 <vec_test_24+0x90>
    80029bce:	6498                	ld	a4,8(s1)
    80029bd0:	4789                	li	a5,2
    80029bd2:	00006597          	auipc	a1,0x6
    80029bd6:	3e658593          	addi	a1,a1,998 # 8002ffb8 <__func__.0+0x2c8>
    80029bda:	00f70663          	beq	a4,a5,80029be6 <vec_test_24+0x90>
    80029bde:	00006597          	auipc	a1,0x6
    80029be2:	3ea58593          	addi	a1,a1,1002 # 8002ffc8 <__func__.0+0x2d8>
    80029be6:	00006517          	auipc	a0,0x6
    80029bea:	42250513          	addi	a0,a0,1058 # 80030008 <__func__.0+0x318>
    80029bee:	49e030ef          	jal	8002d08c <printf>
    80029bf2:	0002e797          	auipc	a5,0x2e
    80029bf6:	41f7c783          	lbu	a5,1055(a5) # 80058011 <excpt+0x1>
    80029bfa:	c789                	beqz	a5,80029c04 <vec_test_24+0xae>
    80029bfc:	6498                	ld	a4,8(s1)
    80029bfe:	4789                	li	a5,2
    80029c00:	00f70c63          	beq	a4,a5,80029c18 <vec_test_24+0xc2>
    80029c04:	00006517          	auipc	a0,0x6
    80029c08:	40c50513          	addi	a0,a0,1036 # 80030010 <__func__.0+0x320>
    80029c0c:	480030ef          	jal	8002d08c <printf>
    80029c10:	02900513          	li	a0,41
    80029c14:	166020ef          	jal	8002bd7a <putchar>
    80029c18:	4529                	li	a0,10
    80029c1a:	160020ef          	jal	8002bd7a <putchar>
    80029c1e:	0002e417          	auipc	s0,0x2e
    80029c22:	3f344403          	lbu	s0,1011(s0) # 80058011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029c26:	00006597          	auipc	a1,0x6
    80029c2a:	3a258593          	addi	a1,a1,930 # 8002ffc8 <__func__.0+0x2d8>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029c2e:	cc11                	beqz	s0,80029c4a <vec_test_24+0xf4>
    80029c30:	6498                	ld	a4,8(s1)
    80029c32:	4789                	li	a5,2
    TEST_END();
    80029c34:	00006597          	auipc	a1,0x6
    80029c38:	38458593          	addi	a1,a1,900 # 8002ffb8 <__func__.0+0x2c8>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029c3c:	00f70763          	beq	a4,a5,80029c4a <vec_test_24+0xf4>
    80029c40:	4401                	li	s0,0
    TEST_END();
    80029c42:	00006597          	auipc	a1,0x6
    80029c46:	38658593          	addi	a1,a1,902 # 8002ffc8 <__func__.0+0x2d8>
    80029c4a:	00006517          	auipc	a0,0x6
    80029c4e:	42650513          	addi	a0,a0,1062 # 80030070 <__func__.0+0x380>
    80029c52:	43a030ef          	jal	8002d08c <printf>
    80029c56:	4511                	li	a0,4
    80029c58:	ab0d70ef          	jal	80000f08 <goto_priv>
    80029c5c:	c77d70ef          	jal	800018d2 <reset_state>

}
    80029c60:	60e2                	ld	ra,24(sp)
    80029c62:	8522                	mv	a0,s0
    80029c64:	6442                	ld	s0,16(sp)
    80029c66:	64a2                	ld	s1,8(sp)
    80029c68:	6105                	addi	sp,sp,32
    80029c6a:	8082                	ret

0000000080029c6c <m_test_entry_two_1>:
        TEST_SETUP_EXCEPT(); \
        mode##handler(); \
    }\


HANDLE_INTERRUPT(m,1)
    80029c6c:	1141                	addi	sp,sp,-16
    80029c6e:	4605                	li	a2,1
    80029c70:	00012597          	auipc	a1,0x12
    80029c74:	8e058593          	addi	a1,a1,-1824 # 8003b550 <__func__.0+0xb860>
    80029c78:	00012517          	auipc	a0,0x12
    80029c7c:	8e050513          	addi	a0,a0,-1824 # 8003b558 <__func__.0+0xb868>
    80029c80:	e406                	sd	ra,8(sp)
    80029c82:	40a030ef          	jal	8002d08c <printf>
    80029c86:	00014717          	auipc	a4,0x14
    80029c8a:	1b272703          	lw	a4,434(a4) # 8003de38 <trap>
    80029c8e:	4789                	li	a5,2
    80029c90:	00f70863          	beq	a4,a5,80029ca0 <m_test_entry_two_1+0x34>
    80029c94:	978d70ef          	jal	80000e0c <test_setup_except_function>
    80029c98:	60a2                	ld	ra,8(sp)
    80029c9a:	0141                	addi	sp,sp,16
    80029c9c:	bf4d706f          	j	80001090 <mhandler>
    80029ca0:	4585                	li	a1,1
    80029ca2:	00012517          	auipc	a0,0x12
    80029ca6:	8e650513          	addi	a0,a0,-1818 # 8003b588 <__func__.0+0xb898>
    80029caa:	e022                	sd	s0,0(sp)
    80029cac:	3e0030ef          	jal	8002d08c <printf>
    80029cb0:	6785                	lui	a5,0x1
    80029cb2:	00014417          	auipc	s0,0x14
    80029cb6:	18640413          	addi	s0,s0,390 # 8003de38 <trap>
    80029cba:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029cbc:	f1579073          	csrw	0xf15,a5
    80029cc0:	00014797          	auipc	a5,0x14
    80029cc4:	1787a783          	lw	a5,376(a5) # 8003de38 <trap>
    80029cc8:	37fd                	addiw	a5,a5,-1
    80029cca:	c01c                	sw	a5,0(s0)
    80029ccc:	6402                	ld	s0,0(sp)
    80029cce:	93ed70ef          	jal	80000e0c <test_setup_except_function>
    80029cd2:	60a2                	ld	ra,8(sp)
    80029cd4:	0141                	addi	sp,sp,16
    80029cd6:	bbad706f          	j	80001090 <mhandler>

0000000080029cda <m_test_entry_two_2>:
HANDLE_INTERRUPT(m,2)
    80029cda:	1141                	addi	sp,sp,-16
    80029cdc:	00012597          	auipc	a1,0x12
    80029ce0:	87458593          	addi	a1,a1,-1932 # 8003b550 <__func__.0+0xb860>
    80029ce4:	4609                	li	a2,2
    80029ce6:	00012517          	auipc	a0,0x12
    80029cea:	87250513          	addi	a0,a0,-1934 # 8003b558 <__func__.0+0xb868>
    80029cee:	e406                	sd	ra,8(sp)
    80029cf0:	39c030ef          	jal	8002d08c <printf>
    80029cf4:	00014597          	auipc	a1,0x14
    80029cf8:	1445a583          	lw	a1,324(a1) # 8003de38 <trap>
    80029cfc:	4789                	li	a5,2
    80029cfe:	00f58863          	beq	a1,a5,80029d0e <m_test_entry_two_2+0x34>
    80029d02:	90ad70ef          	jal	80000e0c <test_setup_except_function>
    80029d06:	60a2                	ld	ra,8(sp)
    80029d08:	0141                	addi	sp,sp,16
    80029d0a:	b86d706f          	j	80001090 <mhandler>
    80029d0e:	00012517          	auipc	a0,0x12
    80029d12:	87a50513          	addi	a0,a0,-1926 # 8003b588 <__func__.0+0xb898>
    80029d16:	e022                	sd	s0,0(sp)
    80029d18:	374030ef          	jal	8002d08c <printf>
    80029d1c:	6785                	lui	a5,0x1
    80029d1e:	00014417          	auipc	s0,0x14
    80029d22:	11a40413          	addi	s0,s0,282 # 8003de38 <trap>
    80029d26:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029d28:	f1579073          	csrw	0xf15,a5
    80029d2c:	00014797          	auipc	a5,0x14
    80029d30:	10c7a783          	lw	a5,268(a5) # 8003de38 <trap>
    80029d34:	37fd                	addiw	a5,a5,-1
    80029d36:	c01c                	sw	a5,0(s0)
    80029d38:	6402                	ld	s0,0(sp)
    80029d3a:	8d2d70ef          	jal	80000e0c <test_setup_except_function>
    80029d3e:	60a2                	ld	ra,8(sp)
    80029d40:	0141                	addi	sp,sp,16
    80029d42:	b4ed706f          	j	80001090 <mhandler>

0000000080029d46 <m_test_entry_two_3>:
HANDLE_INTERRUPT(m,3)
    80029d46:	1141                	addi	sp,sp,-16
    80029d48:	460d                	li	a2,3
    80029d4a:	00012597          	auipc	a1,0x12
    80029d4e:	80658593          	addi	a1,a1,-2042 # 8003b550 <__func__.0+0xb860>
    80029d52:	00012517          	auipc	a0,0x12
    80029d56:	80650513          	addi	a0,a0,-2042 # 8003b558 <__func__.0+0xb868>
    80029d5a:	e406                	sd	ra,8(sp)
    80029d5c:	330030ef          	jal	8002d08c <printf>
    80029d60:	00014717          	auipc	a4,0x14
    80029d64:	0d872703          	lw	a4,216(a4) # 8003de38 <trap>
    80029d68:	4789                	li	a5,2
    80029d6a:	00f70863          	beq	a4,a5,80029d7a <m_test_entry_two_3+0x34>
    80029d6e:	89ed70ef          	jal	80000e0c <test_setup_except_function>
    80029d72:	60a2                	ld	ra,8(sp)
    80029d74:	0141                	addi	sp,sp,16
    80029d76:	b1ad706f          	j	80001090 <mhandler>
    80029d7a:	458d                	li	a1,3
    80029d7c:	00012517          	auipc	a0,0x12
    80029d80:	80c50513          	addi	a0,a0,-2036 # 8003b588 <__func__.0+0xb898>
    80029d84:	e022                	sd	s0,0(sp)
    80029d86:	306030ef          	jal	8002d08c <printf>
    80029d8a:	6785                	lui	a5,0x1
    80029d8c:	00014417          	auipc	s0,0x14
    80029d90:	0ac40413          	addi	s0,s0,172 # 8003de38 <trap>
    80029d94:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029d96:	f1579073          	csrw	0xf15,a5
    80029d9a:	00014797          	auipc	a5,0x14
    80029d9e:	09e7a783          	lw	a5,158(a5) # 8003de38 <trap>
    80029da2:	37fd                	addiw	a5,a5,-1
    80029da4:	c01c                	sw	a5,0(s0)
    80029da6:	6402                	ld	s0,0(sp)
    80029da8:	864d70ef          	jal	80000e0c <test_setup_except_function>
    80029dac:	60a2                	ld	ra,8(sp)
    80029dae:	0141                	addi	sp,sp,16
    80029db0:	ae0d706f          	j	80001090 <mhandler>

0000000080029db4 <m_test_entry_two_4>:
HANDLE_INTERRUPT(m,4)
    80029db4:	1141                	addi	sp,sp,-16
    80029db6:	4611                	li	a2,4
    80029db8:	00011597          	auipc	a1,0x11
    80029dbc:	79858593          	addi	a1,a1,1944 # 8003b550 <__func__.0+0xb860>
    80029dc0:	00011517          	auipc	a0,0x11
    80029dc4:	79850513          	addi	a0,a0,1944 # 8003b558 <__func__.0+0xb868>
    80029dc8:	e406                	sd	ra,8(sp)
    80029dca:	2c2030ef          	jal	8002d08c <printf>
    80029dce:	00014717          	auipc	a4,0x14
    80029dd2:	06a72703          	lw	a4,106(a4) # 8003de38 <trap>
    80029dd6:	4789                	li	a5,2
    80029dd8:	00f70863          	beq	a4,a5,80029de8 <m_test_entry_two_4+0x34>
    80029ddc:	830d70ef          	jal	80000e0c <test_setup_except_function>
    80029de0:	60a2                	ld	ra,8(sp)
    80029de2:	0141                	addi	sp,sp,16
    80029de4:	aacd706f          	j	80001090 <mhandler>
    80029de8:	4591                	li	a1,4
    80029dea:	00011517          	auipc	a0,0x11
    80029dee:	79e50513          	addi	a0,a0,1950 # 8003b588 <__func__.0+0xb898>
    80029df2:	e022                	sd	s0,0(sp)
    80029df4:	298030ef          	jal	8002d08c <printf>
    80029df8:	6785                	lui	a5,0x1
    80029dfa:	00014417          	auipc	s0,0x14
    80029dfe:	03e40413          	addi	s0,s0,62 # 8003de38 <trap>
    80029e02:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029e04:	f1579073          	csrw	0xf15,a5
    80029e08:	00014797          	auipc	a5,0x14
    80029e0c:	0307a783          	lw	a5,48(a5) # 8003de38 <trap>
    80029e10:	37fd                	addiw	a5,a5,-1
    80029e12:	c01c                	sw	a5,0(s0)
    80029e14:	6402                	ld	s0,0(sp)
    80029e16:	ff7d60ef          	jal	80000e0c <test_setup_except_function>
    80029e1a:	60a2                	ld	ra,8(sp)
    80029e1c:	0141                	addi	sp,sp,16
    80029e1e:	a72d706f          	j	80001090 <mhandler>

0000000080029e22 <m_test_entry_two_5>:
HANDLE_INTERRUPT(m,5)
    80029e22:	1141                	addi	sp,sp,-16
    80029e24:	4615                	li	a2,5
    80029e26:	00011597          	auipc	a1,0x11
    80029e2a:	72a58593          	addi	a1,a1,1834 # 8003b550 <__func__.0+0xb860>
    80029e2e:	00011517          	auipc	a0,0x11
    80029e32:	72a50513          	addi	a0,a0,1834 # 8003b558 <__func__.0+0xb868>
    80029e36:	e406                	sd	ra,8(sp)
    80029e38:	254030ef          	jal	8002d08c <printf>
    80029e3c:	00014717          	auipc	a4,0x14
    80029e40:	ffc72703          	lw	a4,-4(a4) # 8003de38 <trap>
    80029e44:	4789                	li	a5,2
    80029e46:	00f70863          	beq	a4,a5,80029e56 <m_test_entry_two_5+0x34>
    80029e4a:	fc3d60ef          	jal	80000e0c <test_setup_except_function>
    80029e4e:	60a2                	ld	ra,8(sp)
    80029e50:	0141                	addi	sp,sp,16
    80029e52:	a3ed706f          	j	80001090 <mhandler>
    80029e56:	4595                	li	a1,5
    80029e58:	00011517          	auipc	a0,0x11
    80029e5c:	73050513          	addi	a0,a0,1840 # 8003b588 <__func__.0+0xb898>
    80029e60:	e022                	sd	s0,0(sp)
    80029e62:	22a030ef          	jal	8002d08c <printf>
    80029e66:	6785                	lui	a5,0x1
    80029e68:	00014417          	auipc	s0,0x14
    80029e6c:	fd040413          	addi	s0,s0,-48 # 8003de38 <trap>
    80029e70:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029e72:	f1579073          	csrw	0xf15,a5
    80029e76:	00014797          	auipc	a5,0x14
    80029e7a:	fc27a783          	lw	a5,-62(a5) # 8003de38 <trap>
    80029e7e:	37fd                	addiw	a5,a5,-1
    80029e80:	c01c                	sw	a5,0(s0)
    80029e82:	6402                	ld	s0,0(sp)
    80029e84:	f89d60ef          	jal	80000e0c <test_setup_except_function>
    80029e88:	60a2                	ld	ra,8(sp)
    80029e8a:	0141                	addi	sp,sp,16
    80029e8c:	a04d706f          	j	80001090 <mhandler>

0000000080029e90 <m_test_entry_two_6>:
HANDLE_INTERRUPT(m,6)
    80029e90:	1141                	addi	sp,sp,-16
    80029e92:	4619                	li	a2,6
    80029e94:	00011597          	auipc	a1,0x11
    80029e98:	6bc58593          	addi	a1,a1,1724 # 8003b550 <__func__.0+0xb860>
    80029e9c:	00011517          	auipc	a0,0x11
    80029ea0:	6bc50513          	addi	a0,a0,1724 # 8003b558 <__func__.0+0xb868>
    80029ea4:	e406                	sd	ra,8(sp)
    80029ea6:	1e6030ef          	jal	8002d08c <printf>
    80029eaa:	00014717          	auipc	a4,0x14
    80029eae:	f8e72703          	lw	a4,-114(a4) # 8003de38 <trap>
    80029eb2:	4789                	li	a5,2
    80029eb4:	00f70863          	beq	a4,a5,80029ec4 <m_test_entry_two_6+0x34>
    80029eb8:	f55d60ef          	jal	80000e0c <test_setup_except_function>
    80029ebc:	60a2                	ld	ra,8(sp)
    80029ebe:	0141                	addi	sp,sp,16
    80029ec0:	9d0d706f          	j	80001090 <mhandler>
    80029ec4:	4599                	li	a1,6
    80029ec6:	00011517          	auipc	a0,0x11
    80029eca:	6c250513          	addi	a0,a0,1730 # 8003b588 <__func__.0+0xb898>
    80029ece:	e022                	sd	s0,0(sp)
    80029ed0:	1bc030ef          	jal	8002d08c <printf>
    80029ed4:	6785                	lui	a5,0x1
    80029ed6:	00014417          	auipc	s0,0x14
    80029eda:	f6240413          	addi	s0,s0,-158 # 8003de38 <trap>
    80029ede:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029ee0:	f1579073          	csrw	0xf15,a5
    80029ee4:	00014797          	auipc	a5,0x14
    80029ee8:	f547a783          	lw	a5,-172(a5) # 8003de38 <trap>
    80029eec:	37fd                	addiw	a5,a5,-1
    80029eee:	c01c                	sw	a5,0(s0)
    80029ef0:	6402                	ld	s0,0(sp)
    80029ef2:	f1bd60ef          	jal	80000e0c <test_setup_except_function>
    80029ef6:	60a2                	ld	ra,8(sp)
    80029ef8:	0141                	addi	sp,sp,16
    80029efa:	996d706f          	j	80001090 <mhandler>

0000000080029efe <m_test_entry_two_7>:
HANDLE_INTERRUPT(m,7)
    80029efe:	1141                	addi	sp,sp,-16
    80029f00:	461d                	li	a2,7
    80029f02:	00011597          	auipc	a1,0x11
    80029f06:	64e58593          	addi	a1,a1,1614 # 8003b550 <__func__.0+0xb860>
    80029f0a:	00011517          	auipc	a0,0x11
    80029f0e:	64e50513          	addi	a0,a0,1614 # 8003b558 <__func__.0+0xb868>
    80029f12:	e406                	sd	ra,8(sp)
    80029f14:	178030ef          	jal	8002d08c <printf>
    80029f18:	00014717          	auipc	a4,0x14
    80029f1c:	f2072703          	lw	a4,-224(a4) # 8003de38 <trap>
    80029f20:	4789                	li	a5,2
    80029f22:	00f70863          	beq	a4,a5,80029f32 <m_test_entry_two_7+0x34>
    80029f26:	ee7d60ef          	jal	80000e0c <test_setup_except_function>
    80029f2a:	60a2                	ld	ra,8(sp)
    80029f2c:	0141                	addi	sp,sp,16
    80029f2e:	962d706f          	j	80001090 <mhandler>
    80029f32:	459d                	li	a1,7
    80029f34:	00011517          	auipc	a0,0x11
    80029f38:	65450513          	addi	a0,a0,1620 # 8003b588 <__func__.0+0xb898>
    80029f3c:	e022                	sd	s0,0(sp)
    80029f3e:	14e030ef          	jal	8002d08c <printf>
    80029f42:	6785                	lui	a5,0x1
    80029f44:	00014417          	auipc	s0,0x14
    80029f48:	ef440413          	addi	s0,s0,-268 # 8003de38 <trap>
    80029f4c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029f4e:	f1579073          	csrw	0xf15,a5
    80029f52:	00014797          	auipc	a5,0x14
    80029f56:	ee67a783          	lw	a5,-282(a5) # 8003de38 <trap>
    80029f5a:	37fd                	addiw	a5,a5,-1
    80029f5c:	c01c                	sw	a5,0(s0)
    80029f5e:	6402                	ld	s0,0(sp)
    80029f60:	eadd60ef          	jal	80000e0c <test_setup_except_function>
    80029f64:	60a2                	ld	ra,8(sp)
    80029f66:	0141                	addi	sp,sp,16
    80029f68:	928d706f          	j	80001090 <mhandler>

0000000080029f6c <m_test_entry_two_8>:
HANDLE_INTERRUPT(m,8)
    80029f6c:	1141                	addi	sp,sp,-16
    80029f6e:	4621                	li	a2,8
    80029f70:	00011597          	auipc	a1,0x11
    80029f74:	5e058593          	addi	a1,a1,1504 # 8003b550 <__func__.0+0xb860>
    80029f78:	00011517          	auipc	a0,0x11
    80029f7c:	5e050513          	addi	a0,a0,1504 # 8003b558 <__func__.0+0xb868>
    80029f80:	e406                	sd	ra,8(sp)
    80029f82:	10a030ef          	jal	8002d08c <printf>
    80029f86:	00014717          	auipc	a4,0x14
    80029f8a:	eb272703          	lw	a4,-334(a4) # 8003de38 <trap>
    80029f8e:	4789                	li	a5,2
    80029f90:	00f70863          	beq	a4,a5,80029fa0 <m_test_entry_two_8+0x34>
    80029f94:	e79d60ef          	jal	80000e0c <test_setup_except_function>
    80029f98:	60a2                	ld	ra,8(sp)
    80029f9a:	0141                	addi	sp,sp,16
    80029f9c:	8f4d706f          	j	80001090 <mhandler>
    80029fa0:	45a1                	li	a1,8
    80029fa2:	00011517          	auipc	a0,0x11
    80029fa6:	5e650513          	addi	a0,a0,1510 # 8003b588 <__func__.0+0xb898>
    80029faa:	e022                	sd	s0,0(sp)
    80029fac:	0e0030ef          	jal	8002d08c <printf>
    80029fb0:	6785                	lui	a5,0x1
    80029fb2:	00014417          	auipc	s0,0x14
    80029fb6:	e8640413          	addi	s0,s0,-378 # 8003de38 <trap>
    80029fba:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80029fbc:	f1579073          	csrw	0xf15,a5
    80029fc0:	00014797          	auipc	a5,0x14
    80029fc4:	e787a783          	lw	a5,-392(a5) # 8003de38 <trap>
    80029fc8:	37fd                	addiw	a5,a5,-1
    80029fca:	c01c                	sw	a5,0(s0)
    80029fcc:	6402                	ld	s0,0(sp)
    80029fce:	e3fd60ef          	jal	80000e0c <test_setup_except_function>
    80029fd2:	60a2                	ld	ra,8(sp)
    80029fd4:	0141                	addi	sp,sp,16
    80029fd6:	8bad706f          	j	80001090 <mhandler>

0000000080029fda <hs_test_entry_two_1>:

HANDLE_INTERRUPT(hs,1)
    80029fda:	1141                	addi	sp,sp,-16
    80029fdc:	4605                	li	a2,1
    80029fde:	00011597          	auipc	a1,0x11
    80029fe2:	5da58593          	addi	a1,a1,1498 # 8003b5b8 <__func__.0+0xb8c8>
    80029fe6:	00011517          	auipc	a0,0x11
    80029fea:	57250513          	addi	a0,a0,1394 # 8003b558 <__func__.0+0xb868>
    80029fee:	e406                	sd	ra,8(sp)
    80029ff0:	09c030ef          	jal	8002d08c <printf>
    80029ff4:	00014717          	auipc	a4,0x14
    80029ff8:	e4472703          	lw	a4,-444(a4) # 8003de38 <trap>
    80029ffc:	4789                	li	a5,2
    80029ffe:	00f70863          	beq	a4,a5,8002a00e <hs_test_entry_two_1+0x34>
    8002a002:	e0bd60ef          	jal	80000e0c <test_setup_except_function>
    8002a006:	60a2                	ld	ra,8(sp)
    8002a008:	0141                	addi	sp,sp,16
    8002a00a:	af2d706f          	j	800012fc <hshandler>
    8002a00e:	4585                	li	a1,1
    8002a010:	00011517          	auipc	a0,0x11
    8002a014:	57850513          	addi	a0,a0,1400 # 8003b588 <__func__.0+0xb898>
    8002a018:	e022                	sd	s0,0(sp)
    8002a01a:	072030ef          	jal	8002d08c <printf>
    8002a01e:	6785                	lui	a5,0x1
    8002a020:	00014417          	auipc	s0,0x14
    8002a024:	e1840413          	addi	s0,s0,-488 # 8003de38 <trap>
    8002a028:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a02a:	f1579073          	csrw	0xf15,a5
    8002a02e:	00014797          	auipc	a5,0x14
    8002a032:	e0a7a783          	lw	a5,-502(a5) # 8003de38 <trap>
    8002a036:	37fd                	addiw	a5,a5,-1
    8002a038:	c01c                	sw	a5,0(s0)
    8002a03a:	6402                	ld	s0,0(sp)
    8002a03c:	dd1d60ef          	jal	80000e0c <test_setup_except_function>
    8002a040:	60a2                	ld	ra,8(sp)
    8002a042:	0141                	addi	sp,sp,16
    8002a044:	ab8d706f          	j	800012fc <hshandler>

000000008002a048 <hs_test_entry_two_2>:
HANDLE_INTERRUPT(hs,2)
    8002a048:	1141                	addi	sp,sp,-16
    8002a04a:	00011597          	auipc	a1,0x11
    8002a04e:	56e58593          	addi	a1,a1,1390 # 8003b5b8 <__func__.0+0xb8c8>
    8002a052:	4609                	li	a2,2
    8002a054:	00011517          	auipc	a0,0x11
    8002a058:	50450513          	addi	a0,a0,1284 # 8003b558 <__func__.0+0xb868>
    8002a05c:	e406                	sd	ra,8(sp)
    8002a05e:	02e030ef          	jal	8002d08c <printf>
    8002a062:	00014597          	auipc	a1,0x14
    8002a066:	dd65a583          	lw	a1,-554(a1) # 8003de38 <trap>
    8002a06a:	4789                	li	a5,2
    8002a06c:	00f58863          	beq	a1,a5,8002a07c <hs_test_entry_two_2+0x34>
    8002a070:	d9dd60ef          	jal	80000e0c <test_setup_except_function>
    8002a074:	60a2                	ld	ra,8(sp)
    8002a076:	0141                	addi	sp,sp,16
    8002a078:	a84d706f          	j	800012fc <hshandler>
    8002a07c:	00011517          	auipc	a0,0x11
    8002a080:	50c50513          	addi	a0,a0,1292 # 8003b588 <__func__.0+0xb898>
    8002a084:	e022                	sd	s0,0(sp)
    8002a086:	006030ef          	jal	8002d08c <printf>
    8002a08a:	6785                	lui	a5,0x1
    8002a08c:	00014417          	auipc	s0,0x14
    8002a090:	dac40413          	addi	s0,s0,-596 # 8003de38 <trap>
    8002a094:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a096:	f1579073          	csrw	0xf15,a5
    8002a09a:	00014797          	auipc	a5,0x14
    8002a09e:	d9e7a783          	lw	a5,-610(a5) # 8003de38 <trap>
    8002a0a2:	37fd                	addiw	a5,a5,-1
    8002a0a4:	c01c                	sw	a5,0(s0)
    8002a0a6:	6402                	ld	s0,0(sp)
    8002a0a8:	d65d60ef          	jal	80000e0c <test_setup_except_function>
    8002a0ac:	60a2                	ld	ra,8(sp)
    8002a0ae:	0141                	addi	sp,sp,16
    8002a0b0:	a4cd706f          	j	800012fc <hshandler>

000000008002a0b4 <hs_test_entry_two_3>:
HANDLE_INTERRUPT(hs,3)
    8002a0b4:	1141                	addi	sp,sp,-16
    8002a0b6:	460d                	li	a2,3
    8002a0b8:	00011597          	auipc	a1,0x11
    8002a0bc:	50058593          	addi	a1,a1,1280 # 8003b5b8 <__func__.0+0xb8c8>
    8002a0c0:	00011517          	auipc	a0,0x11
    8002a0c4:	49850513          	addi	a0,a0,1176 # 8003b558 <__func__.0+0xb868>
    8002a0c8:	e406                	sd	ra,8(sp)
    8002a0ca:	7c3020ef          	jal	8002d08c <printf>
    8002a0ce:	00014717          	auipc	a4,0x14
    8002a0d2:	d6a72703          	lw	a4,-662(a4) # 8003de38 <trap>
    8002a0d6:	4789                	li	a5,2
    8002a0d8:	00f70863          	beq	a4,a5,8002a0e8 <hs_test_entry_two_3+0x34>
    8002a0dc:	d31d60ef          	jal	80000e0c <test_setup_except_function>
    8002a0e0:	60a2                	ld	ra,8(sp)
    8002a0e2:	0141                	addi	sp,sp,16
    8002a0e4:	a18d706f          	j	800012fc <hshandler>
    8002a0e8:	458d                	li	a1,3
    8002a0ea:	00011517          	auipc	a0,0x11
    8002a0ee:	49e50513          	addi	a0,a0,1182 # 8003b588 <__func__.0+0xb898>
    8002a0f2:	e022                	sd	s0,0(sp)
    8002a0f4:	799020ef          	jal	8002d08c <printf>
    8002a0f8:	6785                	lui	a5,0x1
    8002a0fa:	00014417          	auipc	s0,0x14
    8002a0fe:	d3e40413          	addi	s0,s0,-706 # 8003de38 <trap>
    8002a102:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a104:	f1579073          	csrw	0xf15,a5
    8002a108:	00014797          	auipc	a5,0x14
    8002a10c:	d307a783          	lw	a5,-720(a5) # 8003de38 <trap>
    8002a110:	37fd                	addiw	a5,a5,-1
    8002a112:	c01c                	sw	a5,0(s0)
    8002a114:	6402                	ld	s0,0(sp)
    8002a116:	cf7d60ef          	jal	80000e0c <test_setup_except_function>
    8002a11a:	60a2                	ld	ra,8(sp)
    8002a11c:	0141                	addi	sp,sp,16
    8002a11e:	9ded706f          	j	800012fc <hshandler>

000000008002a122 <hs_test_entry_two_4>:
HANDLE_INTERRUPT(hs,4)
    8002a122:	1141                	addi	sp,sp,-16
    8002a124:	4611                	li	a2,4
    8002a126:	00011597          	auipc	a1,0x11
    8002a12a:	49258593          	addi	a1,a1,1170 # 8003b5b8 <__func__.0+0xb8c8>
    8002a12e:	00011517          	auipc	a0,0x11
    8002a132:	42a50513          	addi	a0,a0,1066 # 8003b558 <__func__.0+0xb868>
    8002a136:	e406                	sd	ra,8(sp)
    8002a138:	755020ef          	jal	8002d08c <printf>
    8002a13c:	00014717          	auipc	a4,0x14
    8002a140:	cfc72703          	lw	a4,-772(a4) # 8003de38 <trap>
    8002a144:	4789                	li	a5,2
    8002a146:	00f70863          	beq	a4,a5,8002a156 <hs_test_entry_two_4+0x34>
    8002a14a:	cc3d60ef          	jal	80000e0c <test_setup_except_function>
    8002a14e:	60a2                	ld	ra,8(sp)
    8002a150:	0141                	addi	sp,sp,16
    8002a152:	9aad706f          	j	800012fc <hshandler>
    8002a156:	4591                	li	a1,4
    8002a158:	00011517          	auipc	a0,0x11
    8002a15c:	43050513          	addi	a0,a0,1072 # 8003b588 <__func__.0+0xb898>
    8002a160:	e022                	sd	s0,0(sp)
    8002a162:	72b020ef          	jal	8002d08c <printf>
    8002a166:	6785                	lui	a5,0x1
    8002a168:	00014417          	auipc	s0,0x14
    8002a16c:	cd040413          	addi	s0,s0,-816 # 8003de38 <trap>
    8002a170:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a172:	f1579073          	csrw	0xf15,a5
    8002a176:	00014797          	auipc	a5,0x14
    8002a17a:	cc27a783          	lw	a5,-830(a5) # 8003de38 <trap>
    8002a17e:	37fd                	addiw	a5,a5,-1
    8002a180:	c01c                	sw	a5,0(s0)
    8002a182:	6402                	ld	s0,0(sp)
    8002a184:	c89d60ef          	jal	80000e0c <test_setup_except_function>
    8002a188:	60a2                	ld	ra,8(sp)
    8002a18a:	0141                	addi	sp,sp,16
    8002a18c:	970d706f          	j	800012fc <hshandler>

000000008002a190 <hs_test_entry_two_5>:
HANDLE_INTERRUPT(hs,5)
    8002a190:	1141                	addi	sp,sp,-16
    8002a192:	4615                	li	a2,5
    8002a194:	00011597          	auipc	a1,0x11
    8002a198:	42458593          	addi	a1,a1,1060 # 8003b5b8 <__func__.0+0xb8c8>
    8002a19c:	00011517          	auipc	a0,0x11
    8002a1a0:	3bc50513          	addi	a0,a0,956 # 8003b558 <__func__.0+0xb868>
    8002a1a4:	e406                	sd	ra,8(sp)
    8002a1a6:	6e7020ef          	jal	8002d08c <printf>
    8002a1aa:	00014717          	auipc	a4,0x14
    8002a1ae:	c8e72703          	lw	a4,-882(a4) # 8003de38 <trap>
    8002a1b2:	4789                	li	a5,2
    8002a1b4:	00f70863          	beq	a4,a5,8002a1c4 <hs_test_entry_two_5+0x34>
    8002a1b8:	c55d60ef          	jal	80000e0c <test_setup_except_function>
    8002a1bc:	60a2                	ld	ra,8(sp)
    8002a1be:	0141                	addi	sp,sp,16
    8002a1c0:	93cd706f          	j	800012fc <hshandler>
    8002a1c4:	4595                	li	a1,5
    8002a1c6:	00011517          	auipc	a0,0x11
    8002a1ca:	3c250513          	addi	a0,a0,962 # 8003b588 <__func__.0+0xb898>
    8002a1ce:	e022                	sd	s0,0(sp)
    8002a1d0:	6bd020ef          	jal	8002d08c <printf>
    8002a1d4:	6785                	lui	a5,0x1
    8002a1d6:	00014417          	auipc	s0,0x14
    8002a1da:	c6240413          	addi	s0,s0,-926 # 8003de38 <trap>
    8002a1de:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a1e0:	f1579073          	csrw	0xf15,a5
    8002a1e4:	00014797          	auipc	a5,0x14
    8002a1e8:	c547a783          	lw	a5,-940(a5) # 8003de38 <trap>
    8002a1ec:	37fd                	addiw	a5,a5,-1
    8002a1ee:	c01c                	sw	a5,0(s0)
    8002a1f0:	6402                	ld	s0,0(sp)
    8002a1f2:	c1bd60ef          	jal	80000e0c <test_setup_except_function>
    8002a1f6:	60a2                	ld	ra,8(sp)
    8002a1f8:	0141                	addi	sp,sp,16
    8002a1fa:	902d706f          	j	800012fc <hshandler>

000000008002a1fe <hs_test_entry_two_6>:
HANDLE_INTERRUPT(hs,6)
    8002a1fe:	1141                	addi	sp,sp,-16
    8002a200:	4619                	li	a2,6
    8002a202:	00011597          	auipc	a1,0x11
    8002a206:	3b658593          	addi	a1,a1,950 # 8003b5b8 <__func__.0+0xb8c8>
    8002a20a:	00011517          	auipc	a0,0x11
    8002a20e:	34e50513          	addi	a0,a0,846 # 8003b558 <__func__.0+0xb868>
    8002a212:	e406                	sd	ra,8(sp)
    8002a214:	679020ef          	jal	8002d08c <printf>
    8002a218:	00014717          	auipc	a4,0x14
    8002a21c:	c2072703          	lw	a4,-992(a4) # 8003de38 <trap>
    8002a220:	4789                	li	a5,2
    8002a222:	00f70863          	beq	a4,a5,8002a232 <hs_test_entry_two_6+0x34>
    8002a226:	be7d60ef          	jal	80000e0c <test_setup_except_function>
    8002a22a:	60a2                	ld	ra,8(sp)
    8002a22c:	0141                	addi	sp,sp,16
    8002a22e:	8ced706f          	j	800012fc <hshandler>
    8002a232:	4599                	li	a1,6
    8002a234:	00011517          	auipc	a0,0x11
    8002a238:	35450513          	addi	a0,a0,852 # 8003b588 <__func__.0+0xb898>
    8002a23c:	e022                	sd	s0,0(sp)
    8002a23e:	64f020ef          	jal	8002d08c <printf>
    8002a242:	6785                	lui	a5,0x1
    8002a244:	00014417          	auipc	s0,0x14
    8002a248:	bf440413          	addi	s0,s0,-1036 # 8003de38 <trap>
    8002a24c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a24e:	f1579073          	csrw	0xf15,a5
    8002a252:	00014797          	auipc	a5,0x14
    8002a256:	be67a783          	lw	a5,-1050(a5) # 8003de38 <trap>
    8002a25a:	37fd                	addiw	a5,a5,-1
    8002a25c:	c01c                	sw	a5,0(s0)
    8002a25e:	6402                	ld	s0,0(sp)
    8002a260:	badd60ef          	jal	80000e0c <test_setup_except_function>
    8002a264:	60a2                	ld	ra,8(sp)
    8002a266:	0141                	addi	sp,sp,16
    8002a268:	894d706f          	j	800012fc <hshandler>

000000008002a26c <hs_test_entry_two_7>:
HANDLE_INTERRUPT(hs,7)
    8002a26c:	1141                	addi	sp,sp,-16
    8002a26e:	461d                	li	a2,7
    8002a270:	00011597          	auipc	a1,0x11
    8002a274:	34858593          	addi	a1,a1,840 # 8003b5b8 <__func__.0+0xb8c8>
    8002a278:	00011517          	auipc	a0,0x11
    8002a27c:	2e050513          	addi	a0,a0,736 # 8003b558 <__func__.0+0xb868>
    8002a280:	e406                	sd	ra,8(sp)
    8002a282:	60b020ef          	jal	8002d08c <printf>
    8002a286:	00014717          	auipc	a4,0x14
    8002a28a:	bb272703          	lw	a4,-1102(a4) # 8003de38 <trap>
    8002a28e:	4789                	li	a5,2
    8002a290:	00f70863          	beq	a4,a5,8002a2a0 <hs_test_entry_two_7+0x34>
    8002a294:	b79d60ef          	jal	80000e0c <test_setup_except_function>
    8002a298:	60a2                	ld	ra,8(sp)
    8002a29a:	0141                	addi	sp,sp,16
    8002a29c:	860d706f          	j	800012fc <hshandler>
    8002a2a0:	459d                	li	a1,7
    8002a2a2:	00011517          	auipc	a0,0x11
    8002a2a6:	2e650513          	addi	a0,a0,742 # 8003b588 <__func__.0+0xb898>
    8002a2aa:	e022                	sd	s0,0(sp)
    8002a2ac:	5e1020ef          	jal	8002d08c <printf>
    8002a2b0:	6785                	lui	a5,0x1
    8002a2b2:	00014417          	auipc	s0,0x14
    8002a2b6:	b8640413          	addi	s0,s0,-1146 # 8003de38 <trap>
    8002a2ba:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a2bc:	f1579073          	csrw	0xf15,a5
    8002a2c0:	00014797          	auipc	a5,0x14
    8002a2c4:	b787a783          	lw	a5,-1160(a5) # 8003de38 <trap>
    8002a2c8:	37fd                	addiw	a5,a5,-1
    8002a2ca:	c01c                	sw	a5,0(s0)
    8002a2cc:	6402                	ld	s0,0(sp)
    8002a2ce:	b3fd60ef          	jal	80000e0c <test_setup_except_function>
    8002a2d2:	60a2                	ld	ra,8(sp)
    8002a2d4:	0141                	addi	sp,sp,16
    8002a2d6:	826d706f          	j	800012fc <hshandler>

000000008002a2da <hs_test_entry_two_8>:
HANDLE_INTERRUPT(hs,8)
    8002a2da:	1141                	addi	sp,sp,-16
    8002a2dc:	4621                	li	a2,8
    8002a2de:	00011597          	auipc	a1,0x11
    8002a2e2:	2da58593          	addi	a1,a1,730 # 8003b5b8 <__func__.0+0xb8c8>
    8002a2e6:	00011517          	auipc	a0,0x11
    8002a2ea:	27250513          	addi	a0,a0,626 # 8003b558 <__func__.0+0xb868>
    8002a2ee:	e406                	sd	ra,8(sp)
    8002a2f0:	59d020ef          	jal	8002d08c <printf>
    8002a2f4:	00014717          	auipc	a4,0x14
    8002a2f8:	b4472703          	lw	a4,-1212(a4) # 8003de38 <trap>
    8002a2fc:	4789                	li	a5,2
    8002a2fe:	00f70863          	beq	a4,a5,8002a30e <hs_test_entry_two_8+0x34>
    8002a302:	b0bd60ef          	jal	80000e0c <test_setup_except_function>
    8002a306:	60a2                	ld	ra,8(sp)
    8002a308:	0141                	addi	sp,sp,16
    8002a30a:	ff3d606f          	j	800012fc <hshandler>
    8002a30e:	45a1                	li	a1,8
    8002a310:	00011517          	auipc	a0,0x11
    8002a314:	27850513          	addi	a0,a0,632 # 8003b588 <__func__.0+0xb898>
    8002a318:	e022                	sd	s0,0(sp)
    8002a31a:	573020ef          	jal	8002d08c <printf>
    8002a31e:	6785                	lui	a5,0x1
    8002a320:	00014417          	auipc	s0,0x14
    8002a324:	b1840413          	addi	s0,s0,-1256 # 8003de38 <trap>
    8002a328:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a32a:	f1579073          	csrw	0xf15,a5
    8002a32e:	00014797          	auipc	a5,0x14
    8002a332:	b0a7a783          	lw	a5,-1270(a5) # 8003de38 <trap>
    8002a336:	37fd                	addiw	a5,a5,-1
    8002a338:	c01c                	sw	a5,0(s0)
    8002a33a:	6402                	ld	s0,0(sp)
    8002a33c:	ad1d60ef          	jal	80000e0c <test_setup_except_function>
    8002a340:	60a2                	ld	ra,8(sp)
    8002a342:	0141                	addi	sp,sp,16
    8002a344:	fb9d606f          	j	800012fc <hshandler>

000000008002a348 <vs_test_entry_two_1>:

HANDLE_INTERRUPT(vs,1)
    8002a348:	1141                	addi	sp,sp,-16
    8002a34a:	4605                	li	a2,1
    8002a34c:	00011597          	auipc	a1,0x11
    8002a350:	27458593          	addi	a1,a1,628 # 8003b5c0 <__func__.0+0xb8d0>
    8002a354:	00011517          	auipc	a0,0x11
    8002a358:	20450513          	addi	a0,a0,516 # 8003b558 <__func__.0+0xb868>
    8002a35c:	e406                	sd	ra,8(sp)
    8002a35e:	52f020ef          	jal	8002d08c <printf>
    8002a362:	00014717          	auipc	a4,0x14
    8002a366:	ad672703          	lw	a4,-1322(a4) # 8003de38 <trap>
    8002a36a:	4789                	li	a5,2
    8002a36c:	00f70863          	beq	a4,a5,8002a37c <vs_test_entry_two_1+0x34>
    8002a370:	a9dd60ef          	jal	80000e0c <test_setup_except_function>
    8002a374:	60a2                	ld	ra,8(sp)
    8002a376:	0141                	addi	sp,sp,16
    8002a378:	9f0d706f          	j	80001568 <vshandler>
    8002a37c:	4585                	li	a1,1
    8002a37e:	00011517          	auipc	a0,0x11
    8002a382:	20a50513          	addi	a0,a0,522 # 8003b588 <__func__.0+0xb898>
    8002a386:	e022                	sd	s0,0(sp)
    8002a388:	505020ef          	jal	8002d08c <printf>
    8002a38c:	6785                	lui	a5,0x1
    8002a38e:	00014417          	auipc	s0,0x14
    8002a392:	aaa40413          	addi	s0,s0,-1366 # 8003de38 <trap>
    8002a396:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a398:	f1579073          	csrw	0xf15,a5
    8002a39c:	00014797          	auipc	a5,0x14
    8002a3a0:	a9c7a783          	lw	a5,-1380(a5) # 8003de38 <trap>
    8002a3a4:	37fd                	addiw	a5,a5,-1
    8002a3a6:	c01c                	sw	a5,0(s0)
    8002a3a8:	6402                	ld	s0,0(sp)
    8002a3aa:	a63d60ef          	jal	80000e0c <test_setup_except_function>
    8002a3ae:	60a2                	ld	ra,8(sp)
    8002a3b0:	0141                	addi	sp,sp,16
    8002a3b2:	9b6d706f          	j	80001568 <vshandler>

000000008002a3b6 <vs_test_entry_two_2>:
HANDLE_INTERRUPT(vs,2)
    8002a3b6:	1141                	addi	sp,sp,-16
    8002a3b8:	00011597          	auipc	a1,0x11
    8002a3bc:	20858593          	addi	a1,a1,520 # 8003b5c0 <__func__.0+0xb8d0>
    8002a3c0:	4609                	li	a2,2
    8002a3c2:	00011517          	auipc	a0,0x11
    8002a3c6:	19650513          	addi	a0,a0,406 # 8003b558 <__func__.0+0xb868>
    8002a3ca:	e406                	sd	ra,8(sp)
    8002a3cc:	4c1020ef          	jal	8002d08c <printf>
    8002a3d0:	00014597          	auipc	a1,0x14
    8002a3d4:	a685a583          	lw	a1,-1432(a1) # 8003de38 <trap>
    8002a3d8:	4789                	li	a5,2
    8002a3da:	00f58863          	beq	a1,a5,8002a3ea <vs_test_entry_two_2+0x34>
    8002a3de:	a2fd60ef          	jal	80000e0c <test_setup_except_function>
    8002a3e2:	60a2                	ld	ra,8(sp)
    8002a3e4:	0141                	addi	sp,sp,16
    8002a3e6:	982d706f          	j	80001568 <vshandler>
    8002a3ea:	00011517          	auipc	a0,0x11
    8002a3ee:	19e50513          	addi	a0,a0,414 # 8003b588 <__func__.0+0xb898>
    8002a3f2:	e022                	sd	s0,0(sp)
    8002a3f4:	499020ef          	jal	8002d08c <printf>
    8002a3f8:	6785                	lui	a5,0x1
    8002a3fa:	00014417          	auipc	s0,0x14
    8002a3fe:	a3e40413          	addi	s0,s0,-1474 # 8003de38 <trap>
    8002a402:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a404:	f1579073          	csrw	0xf15,a5
    8002a408:	00014797          	auipc	a5,0x14
    8002a40c:	a307a783          	lw	a5,-1488(a5) # 8003de38 <trap>
    8002a410:	37fd                	addiw	a5,a5,-1
    8002a412:	c01c                	sw	a5,0(s0)
    8002a414:	6402                	ld	s0,0(sp)
    8002a416:	9f7d60ef          	jal	80000e0c <test_setup_except_function>
    8002a41a:	60a2                	ld	ra,8(sp)
    8002a41c:	0141                	addi	sp,sp,16
    8002a41e:	94ad706f          	j	80001568 <vshandler>

000000008002a422 <vs_test_entry_two_3>:
HANDLE_INTERRUPT(vs,3)
    8002a422:	1141                	addi	sp,sp,-16
    8002a424:	460d                	li	a2,3
    8002a426:	00011597          	auipc	a1,0x11
    8002a42a:	19a58593          	addi	a1,a1,410 # 8003b5c0 <__func__.0+0xb8d0>
    8002a42e:	00011517          	auipc	a0,0x11
    8002a432:	12a50513          	addi	a0,a0,298 # 8003b558 <__func__.0+0xb868>
    8002a436:	e406                	sd	ra,8(sp)
    8002a438:	455020ef          	jal	8002d08c <printf>
    8002a43c:	00014717          	auipc	a4,0x14
    8002a440:	9fc72703          	lw	a4,-1540(a4) # 8003de38 <trap>
    8002a444:	4789                	li	a5,2
    8002a446:	00f70863          	beq	a4,a5,8002a456 <vs_test_entry_two_3+0x34>
    8002a44a:	9c3d60ef          	jal	80000e0c <test_setup_except_function>
    8002a44e:	60a2                	ld	ra,8(sp)
    8002a450:	0141                	addi	sp,sp,16
    8002a452:	916d706f          	j	80001568 <vshandler>
    8002a456:	458d                	li	a1,3
    8002a458:	00011517          	auipc	a0,0x11
    8002a45c:	13050513          	addi	a0,a0,304 # 8003b588 <__func__.0+0xb898>
    8002a460:	e022                	sd	s0,0(sp)
    8002a462:	42b020ef          	jal	8002d08c <printf>
    8002a466:	6785                	lui	a5,0x1
    8002a468:	00014417          	auipc	s0,0x14
    8002a46c:	9d040413          	addi	s0,s0,-1584 # 8003de38 <trap>
    8002a470:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a472:	f1579073          	csrw	0xf15,a5
    8002a476:	00014797          	auipc	a5,0x14
    8002a47a:	9c27a783          	lw	a5,-1598(a5) # 8003de38 <trap>
    8002a47e:	37fd                	addiw	a5,a5,-1
    8002a480:	c01c                	sw	a5,0(s0)
    8002a482:	6402                	ld	s0,0(sp)
    8002a484:	989d60ef          	jal	80000e0c <test_setup_except_function>
    8002a488:	60a2                	ld	ra,8(sp)
    8002a48a:	0141                	addi	sp,sp,16
    8002a48c:	8dcd706f          	j	80001568 <vshandler>

000000008002a490 <vs_test_entry_two_4>:
HANDLE_INTERRUPT(vs,4)
    8002a490:	1141                	addi	sp,sp,-16
    8002a492:	4611                	li	a2,4
    8002a494:	00011597          	auipc	a1,0x11
    8002a498:	12c58593          	addi	a1,a1,300 # 8003b5c0 <__func__.0+0xb8d0>
    8002a49c:	00011517          	auipc	a0,0x11
    8002a4a0:	0bc50513          	addi	a0,a0,188 # 8003b558 <__func__.0+0xb868>
    8002a4a4:	e406                	sd	ra,8(sp)
    8002a4a6:	3e7020ef          	jal	8002d08c <printf>
    8002a4aa:	00014717          	auipc	a4,0x14
    8002a4ae:	98e72703          	lw	a4,-1650(a4) # 8003de38 <trap>
    8002a4b2:	4789                	li	a5,2
    8002a4b4:	00f70863          	beq	a4,a5,8002a4c4 <vs_test_entry_two_4+0x34>
    8002a4b8:	955d60ef          	jal	80000e0c <test_setup_except_function>
    8002a4bc:	60a2                	ld	ra,8(sp)
    8002a4be:	0141                	addi	sp,sp,16
    8002a4c0:	8a8d706f          	j	80001568 <vshandler>
    8002a4c4:	4591                	li	a1,4
    8002a4c6:	00011517          	auipc	a0,0x11
    8002a4ca:	0c250513          	addi	a0,a0,194 # 8003b588 <__func__.0+0xb898>
    8002a4ce:	e022                	sd	s0,0(sp)
    8002a4d0:	3bd020ef          	jal	8002d08c <printf>
    8002a4d4:	6785                	lui	a5,0x1
    8002a4d6:	00014417          	auipc	s0,0x14
    8002a4da:	96240413          	addi	s0,s0,-1694 # 8003de38 <trap>
    8002a4de:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a4e0:	f1579073          	csrw	0xf15,a5
    8002a4e4:	00014797          	auipc	a5,0x14
    8002a4e8:	9547a783          	lw	a5,-1708(a5) # 8003de38 <trap>
    8002a4ec:	37fd                	addiw	a5,a5,-1
    8002a4ee:	c01c                	sw	a5,0(s0)
    8002a4f0:	6402                	ld	s0,0(sp)
    8002a4f2:	91bd60ef          	jal	80000e0c <test_setup_except_function>
    8002a4f6:	60a2                	ld	ra,8(sp)
    8002a4f8:	0141                	addi	sp,sp,16
    8002a4fa:	86ed706f          	j	80001568 <vshandler>

000000008002a4fe <vs_test_entry_two_5>:
HANDLE_INTERRUPT(vs,5)
    8002a4fe:	1141                	addi	sp,sp,-16
    8002a500:	4615                	li	a2,5
    8002a502:	00011597          	auipc	a1,0x11
    8002a506:	0be58593          	addi	a1,a1,190 # 8003b5c0 <__func__.0+0xb8d0>
    8002a50a:	00011517          	auipc	a0,0x11
    8002a50e:	04e50513          	addi	a0,a0,78 # 8003b558 <__func__.0+0xb868>
    8002a512:	e406                	sd	ra,8(sp)
    8002a514:	379020ef          	jal	8002d08c <printf>
    8002a518:	00014717          	auipc	a4,0x14
    8002a51c:	92072703          	lw	a4,-1760(a4) # 8003de38 <trap>
    8002a520:	4789                	li	a5,2
    8002a522:	00f70863          	beq	a4,a5,8002a532 <vs_test_entry_two_5+0x34>
    8002a526:	8e7d60ef          	jal	80000e0c <test_setup_except_function>
    8002a52a:	60a2                	ld	ra,8(sp)
    8002a52c:	0141                	addi	sp,sp,16
    8002a52e:	83ad706f          	j	80001568 <vshandler>
    8002a532:	4595                	li	a1,5
    8002a534:	00011517          	auipc	a0,0x11
    8002a538:	05450513          	addi	a0,a0,84 # 8003b588 <__func__.0+0xb898>
    8002a53c:	e022                	sd	s0,0(sp)
    8002a53e:	34f020ef          	jal	8002d08c <printf>
    8002a542:	6785                	lui	a5,0x1
    8002a544:	00014417          	auipc	s0,0x14
    8002a548:	8f440413          	addi	s0,s0,-1804 # 8003de38 <trap>
    8002a54c:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a54e:	f1579073          	csrw	0xf15,a5
    8002a552:	00014797          	auipc	a5,0x14
    8002a556:	8e67a783          	lw	a5,-1818(a5) # 8003de38 <trap>
    8002a55a:	37fd                	addiw	a5,a5,-1
    8002a55c:	c01c                	sw	a5,0(s0)
    8002a55e:	6402                	ld	s0,0(sp)
    8002a560:	8add60ef          	jal	80000e0c <test_setup_except_function>
    8002a564:	60a2                	ld	ra,8(sp)
    8002a566:	0141                	addi	sp,sp,16
    8002a568:	800d706f          	j	80001568 <vshandler>

000000008002a56c <vs_test_entry_two_6>:
HANDLE_INTERRUPT(vs,6)
    8002a56c:	1141                	addi	sp,sp,-16
    8002a56e:	4619                	li	a2,6
    8002a570:	00011597          	auipc	a1,0x11
    8002a574:	05058593          	addi	a1,a1,80 # 8003b5c0 <__func__.0+0xb8d0>
    8002a578:	00011517          	auipc	a0,0x11
    8002a57c:	fe050513          	addi	a0,a0,-32 # 8003b558 <__func__.0+0xb868>
    8002a580:	e406                	sd	ra,8(sp)
    8002a582:	30b020ef          	jal	8002d08c <printf>
    8002a586:	00014717          	auipc	a4,0x14
    8002a58a:	8b272703          	lw	a4,-1870(a4) # 8003de38 <trap>
    8002a58e:	4789                	li	a5,2
    8002a590:	00f70863          	beq	a4,a5,8002a5a0 <vs_test_entry_two_6+0x34>
    8002a594:	879d60ef          	jal	80000e0c <test_setup_except_function>
    8002a598:	60a2                	ld	ra,8(sp)
    8002a59a:	0141                	addi	sp,sp,16
    8002a59c:	fcdd606f          	j	80001568 <vshandler>
    8002a5a0:	4599                	li	a1,6
    8002a5a2:	00011517          	auipc	a0,0x11
    8002a5a6:	fe650513          	addi	a0,a0,-26 # 8003b588 <__func__.0+0xb898>
    8002a5aa:	e022                	sd	s0,0(sp)
    8002a5ac:	2e1020ef          	jal	8002d08c <printf>
    8002a5b0:	6785                	lui	a5,0x1
    8002a5b2:	00014417          	auipc	s0,0x14
    8002a5b6:	88640413          	addi	s0,s0,-1914 # 8003de38 <trap>
    8002a5ba:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a5bc:	f1579073          	csrw	0xf15,a5
    8002a5c0:	00014797          	auipc	a5,0x14
    8002a5c4:	8787a783          	lw	a5,-1928(a5) # 8003de38 <trap>
    8002a5c8:	37fd                	addiw	a5,a5,-1
    8002a5ca:	c01c                	sw	a5,0(s0)
    8002a5cc:	6402                	ld	s0,0(sp)
    8002a5ce:	83fd60ef          	jal	80000e0c <test_setup_except_function>
    8002a5d2:	60a2                	ld	ra,8(sp)
    8002a5d4:	0141                	addi	sp,sp,16
    8002a5d6:	f93d606f          	j	80001568 <vshandler>

000000008002a5da <vs_test_entry_two_7>:
HANDLE_INTERRUPT(vs,7)
    8002a5da:	1141                	addi	sp,sp,-16
    8002a5dc:	461d                	li	a2,7
    8002a5de:	00011597          	auipc	a1,0x11
    8002a5e2:	fe258593          	addi	a1,a1,-30 # 8003b5c0 <__func__.0+0xb8d0>
    8002a5e6:	00011517          	auipc	a0,0x11
    8002a5ea:	f7250513          	addi	a0,a0,-142 # 8003b558 <__func__.0+0xb868>
    8002a5ee:	e406                	sd	ra,8(sp)
    8002a5f0:	29d020ef          	jal	8002d08c <printf>
    8002a5f4:	00014717          	auipc	a4,0x14
    8002a5f8:	84472703          	lw	a4,-1980(a4) # 8003de38 <trap>
    8002a5fc:	4789                	li	a5,2
    8002a5fe:	00f70863          	beq	a4,a5,8002a60e <vs_test_entry_two_7+0x34>
    8002a602:	80bd60ef          	jal	80000e0c <test_setup_except_function>
    8002a606:	60a2                	ld	ra,8(sp)
    8002a608:	0141                	addi	sp,sp,16
    8002a60a:	f5fd606f          	j	80001568 <vshandler>
    8002a60e:	459d                	li	a1,7
    8002a610:	00011517          	auipc	a0,0x11
    8002a614:	f7850513          	addi	a0,a0,-136 # 8003b588 <__func__.0+0xb898>
    8002a618:	e022                	sd	s0,0(sp)
    8002a61a:	273020ef          	jal	8002d08c <printf>
    8002a61e:	6785                	lui	a5,0x1
    8002a620:	00014417          	auipc	s0,0x14
    8002a624:	81840413          	addi	s0,s0,-2024 # 8003de38 <trap>
    8002a628:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a62a:	f1579073          	csrw	0xf15,a5
    8002a62e:	00014797          	auipc	a5,0x14
    8002a632:	80a7a783          	lw	a5,-2038(a5) # 8003de38 <trap>
    8002a636:	37fd                	addiw	a5,a5,-1
    8002a638:	c01c                	sw	a5,0(s0)
    8002a63a:	6402                	ld	s0,0(sp)
    8002a63c:	fd0d60ef          	jal	80000e0c <test_setup_except_function>
    8002a640:	60a2                	ld	ra,8(sp)
    8002a642:	0141                	addi	sp,sp,16
    8002a644:	f25d606f          	j	80001568 <vshandler>

000000008002a648 <vs_test_entry_two_8>:
HANDLE_INTERRUPT(vs,8)
    8002a648:	1141                	addi	sp,sp,-16
    8002a64a:	4621                	li	a2,8
    8002a64c:	00011597          	auipc	a1,0x11
    8002a650:	f7458593          	addi	a1,a1,-140 # 8003b5c0 <__func__.0+0xb8d0>
    8002a654:	00011517          	auipc	a0,0x11
    8002a658:	f0450513          	addi	a0,a0,-252 # 8003b558 <__func__.0+0xb868>
    8002a65c:	e406                	sd	ra,8(sp)
    8002a65e:	22f020ef          	jal	8002d08c <printf>
    8002a662:	00013717          	auipc	a4,0x13
    8002a666:	7d672703          	lw	a4,2006(a4) # 8003de38 <trap>
    8002a66a:	4789                	li	a5,2
    8002a66c:	00f70863          	beq	a4,a5,8002a67c <vs_test_entry_two_8+0x34>
    8002a670:	f9cd60ef          	jal	80000e0c <test_setup_except_function>
    8002a674:	60a2                	ld	ra,8(sp)
    8002a676:	0141                	addi	sp,sp,16
    8002a678:	ef1d606f          	j	80001568 <vshandler>
    8002a67c:	45a1                	li	a1,8
    8002a67e:	00011517          	auipc	a0,0x11
    8002a682:	f0a50513          	addi	a0,a0,-246 # 8003b588 <__func__.0+0xb898>
    8002a686:	e022                	sd	s0,0(sp)
    8002a688:	205020ef          	jal	8002d08c <printf>
    8002a68c:	6785                	lui	a5,0x1
    8002a68e:	00013417          	auipc	s0,0x13
    8002a692:	7aa40413          	addi	s0,s0,1962 # 8003de38 <trap>
    8002a696:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a698:	f1579073          	csrw	0xf15,a5
    8002a69c:	00013797          	auipc	a5,0x13
    8002a6a0:	79c7a783          	lw	a5,1948(a5) # 8003de38 <trap>
    8002a6a4:	37fd                	addiw	a5,a5,-1
    8002a6a6:	c01c                	sw	a5,0(s0)
    8002a6a8:	6402                	ld	s0,0(sp)
    8002a6aa:	f62d60ef          	jal	80000e0c <test_setup_except_function>
    8002a6ae:	60a2                	ld	ra,8(sp)
    8002a6b0:	0141                	addi	sp,sp,16
    8002a6b2:	eb7d606f          	j	80001568 <vshandler>

000000008002a6b6 <m_test_entry_two_0>:


void m_test_entry_two_0() { 
    8002a6b6:	1141                	addi	sp,sp,-16
    8002a6b8:	e406                	sd	ra,8(sp)
    TEST_SETUP_EXCEPT();
    8002a6ba:	f52d60ef          	jal	80000e0c <test_setup_except_function>
    printf("进入mtvec指向入口(异常)\n"); 
    8002a6be:	00011517          	auipc	a0,0x11
    8002a6c2:	f0a50513          	addi	a0,a0,-246 # 8003b5c8 <__func__.0+0xb8d8>
    8002a6c6:	602020ef          	jal	8002ccc8 <puts>
    mhandler();
}
    8002a6ca:	60a2                	ld	ra,8(sp)
    8002a6cc:	0141                	addi	sp,sp,16
    mhandler();
    8002a6ce:	9c3d606f          	j	80001090 <mhandler>

000000008002a6d2 <hs_test_entry_two_0>:
void hs_test_entry_two_0() { 
    8002a6d2:	1141                	addi	sp,sp,-16
    printf("进入stvec指向入口(异常)\n"); 
    8002a6d4:	00011517          	auipc	a0,0x11
    8002a6d8:	f1450513          	addi	a0,a0,-236 # 8003b5e8 <__func__.0+0xb8f8>
void hs_test_entry_two_0() { 
    8002a6dc:	e406                	sd	ra,8(sp)
    printf("进入stvec指向入口(异常)\n"); 
    8002a6de:	5ea020ef          	jal	8002ccc8 <puts>
    hshandler();
}
    8002a6e2:	60a2                	ld	ra,8(sp)
    8002a6e4:	0141                	addi	sp,sp,16
    hshandler();
    8002a6e6:	c17d606f          	j	800012fc <hshandler>

000000008002a6ea <vs_test_entry_two_0>:
void vs_test_entry_two_0() { 
    8002a6ea:	1141                	addi	sp,sp,-16
    printf("进入vstvec指向入口(异常)\n"); 
    8002a6ec:	00011517          	auipc	a0,0x11
    8002a6f0:	f1c50513          	addi	a0,a0,-228 # 8003b608 <__func__.0+0xb918>
void vs_test_entry_two_0() { 
    8002a6f4:	e406                	sd	ra,8(sp)
    printf("进入vstvec指向入口(异常)\n"); 
    8002a6f6:	5d2020ef          	jal	8002ccc8 <puts>
    vshandler();
}
    8002a6fa:	60a2                	ld	ra,8(sp)
    8002a6fc:	0141                	addi	sp,sp,16
    vshandler();
    8002a6fe:	e6bd606f          	j	80001568 <vshandler>

000000008002a702 <mtvec_test_1>:
extern void m_test_entry();
extern void hs_test_entry();
extern void vs_test_entry();


bool mtvec_test_1() {
    8002a702:	1141                	addi	sp,sp,-16

    //m模式下，当mtvec.mode=vectored，未开启中断代理，发生2号软件中断  
    TEST_START();
    8002a704:	00005597          	auipc	a1,0x5
    8002a708:	48c58593          	addi	a1,a1,1164 # 8002fb90 <__func__.23>
    8002a70c:	00006517          	auipc	a0,0x6
    8002a710:	8cc50513          	addi	a0,a0,-1844 # 8002ffd8 <__func__.0+0x2e8>
bool mtvec_test_1() {
    8002a714:	e406                	sd	ra,8(sp)
    TEST_START();
    8002a716:	177020ef          	jal	8002d08c <printf>
    8002a71a:	4529                	li	a0,10
    8002a71c:	65e010ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8002a720:	4511                	li	a0,4
    8002a722:	fe6d60ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,(1ULL << 3));
    8002a726:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,(1ULL << 1));
    8002a72a:	30016073          	csrsi	mstatus,2

    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002a72e:	300025f3          	csrr	a1,mstatus
    8002a732:	00011517          	auipc	a0,0x11
    8002a736:	efe50513          	addi	a0,a0,-258 # 8003b630 <__func__.0+0xb940>
    8002a73a:	153020ef          	jal	8002d08c <printf>

    CSRS(mie, 1ULL << 1);
    8002a73e:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002a742:	00003797          	auipc	a5,0x3
    8002a746:	1fa78793          	addi	a5,a5,506 # 8002d93c <vs_test_entry>
    8002a74a:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002a74e:	00003797          	auipc	a5,0x3
    8002a752:	f6678793          	addi	a5,a5,-154 # 8002d6b4 <hs_test_entry>
    8002a756:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002a75a:	00003797          	auipc	a5,0x3
    8002a75e:	cd278793          	addi	a5,a5,-814 # 8002d42c <m_test_entry>
    8002a762:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002a766:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002a76a:	305025f3          	csrr	a1,mtvec
    8002a76e:	00011517          	auipc	a0,0x11
    8002a772:	ed250513          	addi	a0,a0,-302 # 8003b640 <__func__.0+0xb950>
    8002a776:	117020ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002a77a:	e92d60ef          	jal	80000e0c <test_setup_except_function>
    printf("入口：");
    8002a77e:	00011517          	auipc	a0,0x11
    8002a782:	ed250513          	addi	a0,a0,-302 # 8003b650 <__func__.0+0xb960>
    8002a786:	107020ef          	jal	8002d08c <printf>
    CSRS(mip, 1ULL << 1);
    8002a78a:	34416073          	csrsi	mip,2

    TEST_ASSERT("m模式下,mtve.mode=vectored.未开启中断代理,产生2号软件中断",
    8002a78e:	08200593          	li	a1,130
    8002a792:	00011617          	auipc	a2,0x11
    8002a796:	ece60613          	addi	a2,a2,-306 # 8003b660 <__func__.0+0xb970>
    8002a79a:	00006517          	auipc	a0,0x6
    8002a79e:	85650513          	addi	a0,a0,-1962 # 8002fff0 <__func__.0+0x300>
    8002a7a2:	0eb020ef          	jal	8002d08c <printf>
    8002a7a6:	0002e797          	auipc	a5,0x2e
    8002a7aa:	86b7c783          	lbu	a5,-1941(a5) # 80058011 <excpt+0x1>
    8002a7ae:	00006597          	auipc	a1,0x6
    8002a7b2:	80a58593          	addi	a1,a1,-2038 # 8002ffb8 <__func__.0+0x2c8>
    8002a7b6:	e789                	bnez	a5,8002a7c0 <mtvec_test_1+0xbe>
    8002a7b8:	00006597          	auipc	a1,0x6
    8002a7bc:	81058593          	addi	a1,a1,-2032 # 8002ffc8 <__func__.0+0x2d8>
    8002a7c0:	00006517          	auipc	a0,0x6
    8002a7c4:	84850513          	addi	a0,a0,-1976 # 80030008 <__func__.0+0x318>
    8002a7c8:	0c5020ef          	jal	8002d08c <printf>
    8002a7cc:	0002e797          	auipc	a5,0x2e
    8002a7d0:	8457c783          	lbu	a5,-1979(a5) # 80058011 <excpt+0x1>
    8002a7d4:	c799                	beqz	a5,8002a7e2 <mtvec_test_1+0xe0>
    8002a7d6:	4529                	li	a0,10
    8002a7d8:	5a2010ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
}
    8002a7dc:	60a2                	ld	ra,8(sp)
    8002a7de:	0141                	addi	sp,sp,16
    8002a7e0:	8082                	ret
    TEST_ASSERT("m模式下,mtve.mode=vectored.未开启中断代理,产生2号软件中断",
    8002a7e2:	00006517          	auipc	a0,0x6
    8002a7e6:	82e50513          	addi	a0,a0,-2002 # 80030010 <__func__.0+0x320>
    8002a7ea:	0a3020ef          	jal	8002d08c <printf>
    8002a7ee:	02900513          	li	a0,41
    8002a7f2:	588010ef          	jal	8002bd7a <putchar>
    8002a7f6:	4529                	li	a0,10
    8002a7f8:	582010ef          	jal	8002bd7a <putchar>
}
    8002a7fc:	60a2                	ld	ra,8(sp)
    8002a7fe:	0141                	addi	sp,sp,16
    8002a800:	8082                	ret

000000008002a802 <mtvec_test_2>:

bool mtvec_test_2() {
    8002a802:	1141                	addi	sp,sp,-16

    TEST_START();
    8002a804:	00005597          	auipc	a1,0x5
    8002a808:	39c58593          	addi	a1,a1,924 # 8002fba0 <__func__.22>
    8002a80c:	00005517          	auipc	a0,0x5
    8002a810:	7cc50513          	addi	a0,a0,1996 # 8002ffd8 <__func__.0+0x2e8>
bool mtvec_test_2() {
    8002a814:	e406                	sd	ra,8(sp)
    TEST_START();
    8002a816:	077020ef          	jal	8002d08c <printf>
    8002a81a:	4529                	li	a0,10
    8002a81c:	55e010ef          	jal	8002bd7a <putchar>

    //m模式下，当mtve.mode=vectored，未开启异常代理，发生异常  

    goto_priv(PRIV_M);
    8002a820:	4511                	li	a0,4
    8002a822:	ee6d60ef          	jal	80000f08 <goto_priv>
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002a826:	300025f3          	csrr	a1,mstatus
    8002a82a:	00011517          	auipc	a0,0x11
    8002a82e:	e0650513          	addi	a0,a0,-506 # 8003b630 <__func__.0+0xb940>
    8002a832:	05b020ef          	jal	8002d08c <printf>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002a836:	00003797          	auipc	a5,0x3
    8002a83a:	10678793          	addi	a5,a5,262 # 8002d93c <vs_test_entry>
    8002a83e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002a842:	00003797          	auipc	a5,0x3
    8002a846:	e7278793          	addi	a5,a5,-398 # 8002d6b4 <hs_test_entry>
    8002a84a:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002a84e:	00003797          	auipc	a5,0x3
    8002a852:	bde78793          	addi	a5,a5,-1058 # 8002d42c <m_test_entry>
    8002a856:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002a85a:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002a85e:	305025f3          	csrr	a1,mtvec
    8002a862:	00011517          	auipc	a0,0x11
    8002a866:	dde50513          	addi	a0,a0,-546 # 8003b640 <__func__.0+0xb950>
    8002a86a:	023020ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002a86e:	d9ed60ef          	jal	80000e0c <test_setup_except_function>
    printf("入口：");
    8002a872:	00011517          	auipc	a0,0x11
    8002a876:	dde50513          	addi	a0,a0,-546 # 8003b650 <__func__.0+0xb960>
    8002a87a:	013020ef          	jal	8002d08c <printf>
    CSRW(CSR_MCONFIGPTR,0xfff);     //访问只读csr
    8002a87e:	6785                	lui	a5,0x1
    8002a880:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002a882:	f1579073          	csrw	0xf15,a5

    TEST_ASSERT("m模式下,mtve.mode=vectored,未开启异常代理,产生异常",
    8002a886:	08200593          	li	a1,130
    8002a88a:	00011617          	auipc	a2,0x11
    8002a88e:	e2660613          	addi	a2,a2,-474 # 8003b6b0 <__func__.0+0xb9c0>
    8002a892:	00005517          	auipc	a0,0x5
    8002a896:	75e50513          	addi	a0,a0,1886 # 8002fff0 <__func__.0+0x300>
    8002a89a:	7f2020ef          	jal	8002d08c <printf>
    8002a89e:	0002d797          	auipc	a5,0x2d
    8002a8a2:	7737c783          	lbu	a5,1907(a5) # 80058011 <excpt+0x1>
    8002a8a6:	00005597          	auipc	a1,0x5
    8002a8aa:	71258593          	addi	a1,a1,1810 # 8002ffb8 <__func__.0+0x2c8>
    8002a8ae:	e789                	bnez	a5,8002a8b8 <mtvec_test_2+0xb6>
    8002a8b0:	00005597          	auipc	a1,0x5
    8002a8b4:	71858593          	addi	a1,a1,1816 # 8002ffc8 <__func__.0+0x2d8>
    8002a8b8:	00005517          	auipc	a0,0x5
    8002a8bc:	75050513          	addi	a0,a0,1872 # 80030008 <__func__.0+0x318>
    8002a8c0:	7cc020ef          	jal	8002d08c <printf>
    8002a8c4:	0002d797          	auipc	a5,0x2d
    8002a8c8:	74d7c783          	lbu	a5,1869(a5) # 80058011 <excpt+0x1>
    8002a8cc:	c799                	beqz	a5,8002a8da <mtvec_test_2+0xd8>
    8002a8ce:	4529                	li	a0,10
    8002a8d0:	4aa010ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
}
    8002a8d4:	60a2                	ld	ra,8(sp)
    8002a8d6:	0141                	addi	sp,sp,16
    8002a8d8:	8082                	ret
    TEST_ASSERT("m模式下,mtve.mode=vectored,未开启异常代理,产生异常",
    8002a8da:	00005517          	auipc	a0,0x5
    8002a8de:	73650513          	addi	a0,a0,1846 # 80030010 <__func__.0+0x320>
    8002a8e2:	7aa020ef          	jal	8002d08c <printf>
    8002a8e6:	02900513          	li	a0,41
    8002a8ea:	490010ef          	jal	8002bd7a <putchar>
    8002a8ee:	4529                	li	a0,10
    8002a8f0:	48a010ef          	jal	8002bd7a <putchar>
}
    8002a8f4:	60a2                	ld	ra,8(sp)
    8002a8f6:	0141                	addi	sp,sp,16
    8002a8f8:	8082                	ret

000000008002a8fa <mtvec_test_3>:

bool mtvec_test_3() {
    8002a8fa:	1141                	addi	sp,sp,-16

    TEST_START();
    8002a8fc:	00005597          	auipc	a1,0x5
    8002a900:	2b458593          	addi	a1,a1,692 # 8002fbb0 <__func__.21>
    8002a904:	00005517          	auipc	a0,0x5
    8002a908:	6d450513          	addi	a0,a0,1748 # 8002ffd8 <__func__.0+0x2e8>
bool mtvec_test_3() {
    8002a90c:	e406                	sd	ra,8(sp)
    TEST_START();
    8002a90e:	77e020ef          	jal	8002d08c <printf>
    8002a912:	4529                	li	a0,10
    8002a914:	466010ef          	jal	8002bd7a <putchar>

    //HS模式下，当mtve.mode=vectored，未开启异常代理，发生异常  

    goto_priv(PRIV_M);
    8002a918:	4511                	li	a0,4
    8002a91a:	deed60ef          	jal	80000f08 <goto_priv>
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002a91e:	300025f3          	csrr	a1,mstatus
    8002a922:	00011517          	auipc	a0,0x11
    8002a926:	d0e50513          	addi	a0,a0,-754 # 8003b630 <__func__.0+0xb940>
    8002a92a:	762020ef          	jal	8002d08c <printf>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002a92e:	00003797          	auipc	a5,0x3
    8002a932:	00e78793          	addi	a5,a5,14 # 8002d93c <vs_test_entry>
    8002a936:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002a93a:	00003797          	auipc	a5,0x3
    8002a93e:	d7a78793          	addi	a5,a5,-646 # 8002d6b4 <hs_test_entry>
    8002a942:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002a946:	00003797          	auipc	a5,0x3
    8002a94a:	ae678793          	addi	a5,a5,-1306 # 8002d42c <m_test_entry>
    8002a94e:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002a952:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002a956:	305025f3          	csrr	a1,mtvec
    8002a95a:	00011517          	auipc	a0,0x11
    8002a95e:	ce650513          	addi	a0,a0,-794 # 8003b640 <__func__.0+0xb950>
    8002a962:	72a020ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002a966:	ca6d60ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_HS);
    8002a96a:	450d                	li	a0,3
    8002a96c:	d9cd60ef          	jal	80000f08 <goto_priv>
    printf("入口：");
    8002a970:	00011517          	auipc	a0,0x11
    8002a974:	ce050513          	addi	a0,a0,-800 # 8003b650 <__func__.0+0xb960>
    8002a978:	714020ef          	jal	8002d08c <printf>
    CSRR(CSR_MSTATUS);  
    8002a97c:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("HS模式下,mtve.mode=vectored,未开启异常代理,产生异常",
    8002a980:	08200593          	li	a1,130
    8002a984:	00011617          	auipc	a2,0x11
    8002a988:	d7460613          	addi	a2,a2,-652 # 8003b6f8 <__func__.0+0xba08>
    8002a98c:	00005517          	auipc	a0,0x5
    8002a990:	66450513          	addi	a0,a0,1636 # 8002fff0 <__func__.0+0x300>
    8002a994:	6f8020ef          	jal	8002d08c <printf>
    8002a998:	0002d797          	auipc	a5,0x2d
    8002a99c:	6797c783          	lbu	a5,1657(a5) # 80058011 <excpt+0x1>
    8002a9a0:	00005597          	auipc	a1,0x5
    8002a9a4:	61858593          	addi	a1,a1,1560 # 8002ffb8 <__func__.0+0x2c8>
    8002a9a8:	e789                	bnez	a5,8002a9b2 <mtvec_test_3+0xb8>
    8002a9aa:	00005597          	auipc	a1,0x5
    8002a9ae:	61e58593          	addi	a1,a1,1566 # 8002ffc8 <__func__.0+0x2d8>
    8002a9b2:	00005517          	auipc	a0,0x5
    8002a9b6:	65650513          	addi	a0,a0,1622 # 80030008 <__func__.0+0x318>
    8002a9ba:	6d2020ef          	jal	8002d08c <printf>
    8002a9be:	0002d797          	auipc	a5,0x2d
    8002a9c2:	6537c783          	lbu	a5,1619(a5) # 80058011 <excpt+0x1>
    8002a9c6:	c799                	beqz	a5,8002a9d4 <mtvec_test_3+0xda>
    8002a9c8:	4529                	li	a0,10
    8002a9ca:	3b0010ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
}
    8002a9ce:	60a2                	ld	ra,8(sp)
    8002a9d0:	0141                	addi	sp,sp,16
    8002a9d2:	8082                	ret
    TEST_ASSERT("HS模式下,mtve.mode=vectored,未开启异常代理,产生异常",
    8002a9d4:	00005517          	auipc	a0,0x5
    8002a9d8:	63c50513          	addi	a0,a0,1596 # 80030010 <__func__.0+0x320>
    8002a9dc:	6b0020ef          	jal	8002d08c <printf>
    8002a9e0:	02900513          	li	a0,41
    8002a9e4:	396010ef          	jal	8002bd7a <putchar>
    8002a9e8:	4529                	li	a0,10
    8002a9ea:	390010ef          	jal	8002bd7a <putchar>
}
    8002a9ee:	60a2                	ld	ra,8(sp)
    8002a9f0:	0141                	addi	sp,sp,16
    8002a9f2:	8082                	ret

000000008002a9f4 <mtvec_test_4>:

bool mtvec_test_4() {
    8002a9f4:	1141                	addi	sp,sp,-16

    TEST_START();
    8002a9f6:	00005597          	auipc	a1,0x5
    8002a9fa:	1ca58593          	addi	a1,a1,458 # 8002fbc0 <__func__.20>
    8002a9fe:	00005517          	auipc	a0,0x5
    8002aa02:	5da50513          	addi	a0,a0,1498 # 8002ffd8 <__func__.0+0x2e8>
bool mtvec_test_4() {
    8002aa06:	e406                	sd	ra,8(sp)
    TEST_START();
    8002aa08:	684020ef          	jal	8002d08c <printf>
    8002aa0c:	4529                	li	a0,10
    8002aa0e:	36c010ef          	jal	8002bd7a <putchar>

    //HU模式下，当mtve.mode=vectored，未开启异常代理，发生异常  

    goto_priv(PRIV_M);
    8002aa12:	4511                	li	a0,4
    8002aa14:	cf4d60ef          	jal	80000f08 <goto_priv>
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002aa18:	300025f3          	csrr	a1,mstatus
    8002aa1c:	00011517          	auipc	a0,0x11
    8002aa20:	c1450513          	addi	a0,a0,-1004 # 8003b630 <__func__.0+0xb940>
    8002aa24:	668020ef          	jal	8002d08c <printf>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002aa28:	00003797          	auipc	a5,0x3
    8002aa2c:	f1478793          	addi	a5,a5,-236 # 8002d93c <vs_test_entry>
    8002aa30:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002aa34:	00003797          	auipc	a5,0x3
    8002aa38:	c8078793          	addi	a5,a5,-896 # 8002d6b4 <hs_test_entry>
    8002aa3c:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002aa40:	00003797          	auipc	a5,0x3
    8002aa44:	9ec78793          	addi	a5,a5,-1556 # 8002d42c <m_test_entry>
    8002aa48:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002aa4c:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002aa50:	305025f3          	csrr	a1,mtvec
    8002aa54:	00011517          	auipc	a0,0x11
    8002aa58:	bec50513          	addi	a0,a0,-1044 # 8003b640 <__func__.0+0xb950>
    8002aa5c:	630020ef          	jal	8002d08c <printf>

    goto_priv(PRIV_HU);
    8002aa60:	4505                	li	a0,1
    8002aa62:	ca6d60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002aa66:	ba6d60ef          	jal	80000e0c <test_setup_except_function>
    printf("入口：");
    8002aa6a:	00011517          	auipc	a0,0x11
    8002aa6e:	be650513          	addi	a0,a0,-1050 # 8003b650 <__func__.0+0xb960>
    8002aa72:	61a020ef          	jal	8002d08c <printf>
    asm volatile(
    8002aa76:	22000073          	.insn	4, 0x22000073
    hfence_vvma();

    TEST_ASSERT("HU模式下,mtve.mode=vectored,未开启异常代理,产生异常",
    8002aa7a:	08200593          	li	a1,130
    8002aa7e:	00011617          	auipc	a2,0x11
    8002aa82:	cc260613          	addi	a2,a2,-830 # 8003b740 <__func__.0+0xba50>
    8002aa86:	00005517          	auipc	a0,0x5
    8002aa8a:	56a50513          	addi	a0,a0,1386 # 8002fff0 <__func__.0+0x300>
    8002aa8e:	5fe020ef          	jal	8002d08c <printf>
    8002aa92:	0002d797          	auipc	a5,0x2d
    8002aa96:	57f7c783          	lbu	a5,1407(a5) # 80058011 <excpt+0x1>
    8002aa9a:	00005597          	auipc	a1,0x5
    8002aa9e:	51e58593          	addi	a1,a1,1310 # 8002ffb8 <__func__.0+0x2c8>
    8002aaa2:	e789                	bnez	a5,8002aaac <mtvec_test_4+0xb8>
    8002aaa4:	00005597          	auipc	a1,0x5
    8002aaa8:	52458593          	addi	a1,a1,1316 # 8002ffc8 <__func__.0+0x2d8>
    8002aaac:	00005517          	auipc	a0,0x5
    8002aab0:	55c50513          	addi	a0,a0,1372 # 80030008 <__func__.0+0x318>
    8002aab4:	5d8020ef          	jal	8002d08c <printf>
    8002aab8:	0002d797          	auipc	a5,0x2d
    8002aabc:	5597c783          	lbu	a5,1369(a5) # 80058011 <excpt+0x1>
    8002aac0:	c799                	beqz	a5,8002aace <mtvec_test_4+0xda>
    8002aac2:	4529                	li	a0,10
    8002aac4:	2b6010ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
}
    8002aac8:	60a2                	ld	ra,8(sp)
    8002aaca:	0141                	addi	sp,sp,16
    8002aacc:	8082                	ret
    TEST_ASSERT("HU模式下,mtve.mode=vectored,未开启异常代理,产生异常",
    8002aace:	00005517          	auipc	a0,0x5
    8002aad2:	54250513          	addi	a0,a0,1346 # 80030010 <__func__.0+0x320>
    8002aad6:	5b6020ef          	jal	8002d08c <printf>
    8002aada:	02900513          	li	a0,41
    8002aade:	29c010ef          	jal	8002bd7a <putchar>
    8002aae2:	4529                	li	a0,10
    8002aae4:	296010ef          	jal	8002bd7a <putchar>
}
    8002aae8:	60a2                	ld	ra,8(sp)
    8002aaea:	0141                	addi	sp,sp,16
    8002aaec:	8082                	ret

000000008002aaee <mtvec_test_5>:

bool mtvec_test_5() {
    8002aaee:	1141                	addi	sp,sp,-16

    TEST_START();
    8002aaf0:	00005597          	auipc	a1,0x5
    8002aaf4:	0e058593          	addi	a1,a1,224 # 8002fbd0 <__func__.19>
    8002aaf8:	00005517          	auipc	a0,0x5
    8002aafc:	4e050513          	addi	a0,a0,1248 # 8002ffd8 <__func__.0+0x2e8>
bool mtvec_test_5() {
    8002ab00:	e406                	sd	ra,8(sp)
    TEST_START();
    8002ab02:	58a020ef          	jal	8002d08c <printf>
    8002ab06:	4529                	li	a0,10
    8002ab08:	272010ef          	jal	8002bd7a <putchar>

    //VS模式下，当mtve.mode=vectored，未开启异常代理，发生异常  

    goto_priv(PRIV_M);
    8002ab0c:	4511                	li	a0,4
    8002ab0e:	bfad60ef          	jal	80000f08 <goto_priv>
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002ab12:	300025f3          	csrr	a1,mstatus
    8002ab16:	00011517          	auipc	a0,0x11
    8002ab1a:	b1a50513          	addi	a0,a0,-1254 # 8003b630 <__func__.0+0xb940>
    8002ab1e:	56e020ef          	jal	8002d08c <printf>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002ab22:	00003797          	auipc	a5,0x3
    8002ab26:	e1a78793          	addi	a5,a5,-486 # 8002d93c <vs_test_entry>
    8002ab2a:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002ab2e:	00003797          	auipc	a5,0x3
    8002ab32:	b8678793          	addi	a5,a5,-1146 # 8002d6b4 <hs_test_entry>
    8002ab36:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002ab3a:	00003797          	auipc	a5,0x3
    8002ab3e:	8f278793          	addi	a5,a5,-1806 # 8002d42c <m_test_entry>
    8002ab42:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002ab46:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002ab4a:	305025f3          	csrr	a1,mtvec
    8002ab4e:	00011517          	auipc	a0,0x11
    8002ab52:	af250513          	addi	a0,a0,-1294 # 8003b640 <__func__.0+0xb950>
    8002ab56:	536020ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VS);
    8002ab5a:	4509                	li	a0,2
    8002ab5c:	bacd60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002ab60:	aacd60ef          	jal	80000e0c <test_setup_except_function>
    printf("入口：");
    8002ab64:	00011517          	auipc	a0,0x11
    8002ab68:	aec50513          	addi	a0,a0,-1300 # 8003b650 <__func__.0+0xb960>
    8002ab6c:	520020ef          	jal	8002d08c <printf>
    8002ab70:	22000073          	.insn	4, 0x22000073
    hfence_vvma();

    TEST_ASSERT("VS模式下,mtve.mode=vectored,未开启异常代理,产生异常",
    8002ab74:	08200593          	li	a1,130
    8002ab78:	00011617          	auipc	a2,0x11
    8002ab7c:	c1060613          	addi	a2,a2,-1008 # 8003b788 <__func__.0+0xba98>
    8002ab80:	00005517          	auipc	a0,0x5
    8002ab84:	47050513          	addi	a0,a0,1136 # 8002fff0 <__func__.0+0x300>
    8002ab88:	504020ef          	jal	8002d08c <printf>
    8002ab8c:	0002d797          	auipc	a5,0x2d
    8002ab90:	4857c783          	lbu	a5,1157(a5) # 80058011 <excpt+0x1>
    8002ab94:	00005597          	auipc	a1,0x5
    8002ab98:	42458593          	addi	a1,a1,1060 # 8002ffb8 <__func__.0+0x2c8>
    8002ab9c:	e789                	bnez	a5,8002aba6 <mtvec_test_5+0xb8>
    8002ab9e:	00005597          	auipc	a1,0x5
    8002aba2:	42a58593          	addi	a1,a1,1066 # 8002ffc8 <__func__.0+0x2d8>
    8002aba6:	00005517          	auipc	a0,0x5
    8002abaa:	46250513          	addi	a0,a0,1122 # 80030008 <__func__.0+0x318>
    8002abae:	4de020ef          	jal	8002d08c <printf>
    8002abb2:	0002d797          	auipc	a5,0x2d
    8002abb6:	45f7c783          	lbu	a5,1119(a5) # 80058011 <excpt+0x1>
    8002abba:	c799                	beqz	a5,8002abc8 <mtvec_test_5+0xda>
    8002abbc:	4529                	li	a0,10
    8002abbe:	1bc010ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
}
    8002abc2:	60a2                	ld	ra,8(sp)
    8002abc4:	0141                	addi	sp,sp,16
    8002abc6:	8082                	ret
    TEST_ASSERT("VS模式下,mtve.mode=vectored,未开启异常代理,产生异常",
    8002abc8:	00005517          	auipc	a0,0x5
    8002abcc:	44850513          	addi	a0,a0,1096 # 80030010 <__func__.0+0x320>
    8002abd0:	4bc020ef          	jal	8002d08c <printf>
    8002abd4:	02900513          	li	a0,41
    8002abd8:	1a2010ef          	jal	8002bd7a <putchar>
    8002abdc:	4529                	li	a0,10
    8002abde:	19c010ef          	jal	8002bd7a <putchar>
}
    8002abe2:	60a2                	ld	ra,8(sp)
    8002abe4:	0141                	addi	sp,sp,16
    8002abe6:	8082                	ret

000000008002abe8 <mtvec_test_6>:

bool mtvec_test_6() {
    8002abe8:	1141                	addi	sp,sp,-16

    TEST_START();
    8002abea:	00005597          	auipc	a1,0x5
    8002abee:	ff658593          	addi	a1,a1,-10 # 8002fbe0 <__func__.18>
    8002abf2:	00005517          	auipc	a0,0x5
    8002abf6:	3e650513          	addi	a0,a0,998 # 8002ffd8 <__func__.0+0x2e8>
bool mtvec_test_6() {
    8002abfa:	e406                	sd	ra,8(sp)
    TEST_START();
    8002abfc:	490020ef          	jal	8002d08c <printf>
    8002ac00:	4529                	li	a0,10
    8002ac02:	178010ef          	jal	8002bd7a <putchar>

    //VU模式下，当mtve.mode=vectored，未开启异常代理，发生异常  

    goto_priv(PRIV_M);
    8002ac06:	4511                	li	a0,4
    8002ac08:	b00d60ef          	jal	80000f08 <goto_priv>
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002ac0c:	300025f3          	csrr	a1,mstatus
    8002ac10:	00011517          	auipc	a0,0x11
    8002ac14:	a2050513          	addi	a0,a0,-1504 # 8003b630 <__func__.0+0xb940>
    8002ac18:	474020ef          	jal	8002d08c <printf>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002ac1c:	00003797          	auipc	a5,0x3
    8002ac20:	d2078793          	addi	a5,a5,-736 # 8002d93c <vs_test_entry>
    8002ac24:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002ac28:	00003797          	auipc	a5,0x3
    8002ac2c:	a8c78793          	addi	a5,a5,-1396 # 8002d6b4 <hs_test_entry>
    8002ac30:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002ac34:	00002797          	auipc	a5,0x2
    8002ac38:	7f878793          	addi	a5,a5,2040 # 8002d42c <m_test_entry>
    8002ac3c:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002ac40:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002ac44:	305025f3          	csrr	a1,mtvec
    8002ac48:	00011517          	auipc	a0,0x11
    8002ac4c:	9f850513          	addi	a0,a0,-1544 # 8003b640 <__func__.0+0xb950>
    8002ac50:	43c020ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002ac54:	9b8d60ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_VU);
    8002ac58:	4501                	li	a0,0
    8002ac5a:	aaed60ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002ac5e:	9aed60ef          	jal	80000e0c <test_setup_except_function>
    printf("入口：");
    8002ac62:	00011517          	auipc	a0,0x11
    8002ac66:	9ee50513          	addi	a0,a0,-1554 # 8003b650 <__func__.0+0xb960>
    8002ac6a:	422020ef          	jal	8002d08c <printf>
    asm volatile(
    8002ac6e:	62000073          	.insn	4, 0x62000073
    hfence_gvma();

    TEST_ASSERT("VU模式下,mtve.mode=vectored,未开启异常代理,产生异常",
    8002ac72:	08200593          	li	a1,130
    8002ac76:	00011617          	auipc	a2,0x11
    8002ac7a:	b5a60613          	addi	a2,a2,-1190 # 8003b7d0 <__func__.0+0xbae0>
    8002ac7e:	00005517          	auipc	a0,0x5
    8002ac82:	37250513          	addi	a0,a0,882 # 8002fff0 <__func__.0+0x300>
    8002ac86:	406020ef          	jal	8002d08c <printf>
    8002ac8a:	0002d797          	auipc	a5,0x2d
    8002ac8e:	3877c783          	lbu	a5,903(a5) # 80058011 <excpt+0x1>
    8002ac92:	00005597          	auipc	a1,0x5
    8002ac96:	32658593          	addi	a1,a1,806 # 8002ffb8 <__func__.0+0x2c8>
    8002ac9a:	e789                	bnez	a5,8002aca4 <mtvec_test_6+0xbc>
    8002ac9c:	00005597          	auipc	a1,0x5
    8002aca0:	32c58593          	addi	a1,a1,812 # 8002ffc8 <__func__.0+0x2d8>
    8002aca4:	00005517          	auipc	a0,0x5
    8002aca8:	36450513          	addi	a0,a0,868 # 80030008 <__func__.0+0x318>
    8002acac:	3e0020ef          	jal	8002d08c <printf>
    8002acb0:	0002d797          	auipc	a5,0x2d
    8002acb4:	3617c783          	lbu	a5,865(a5) # 80058011 <excpt+0x1>
    8002acb8:	c799                	beqz	a5,8002acc6 <mtvec_test_6+0xde>
    8002acba:	4529                	li	a0,10
    8002acbc:	0be010ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
}
    8002acc0:	60a2                	ld	ra,8(sp)
    8002acc2:	0141                	addi	sp,sp,16
    8002acc4:	8082                	ret
    TEST_ASSERT("VU模式下,mtve.mode=vectored,未开启异常代理,产生异常",
    8002acc6:	00005517          	auipc	a0,0x5
    8002acca:	34a50513          	addi	a0,a0,842 # 80030010 <__func__.0+0x320>
    8002acce:	3be020ef          	jal	8002d08c <printf>
    8002acd2:	02900513          	li	a0,41
    8002acd6:	0a4010ef          	jal	8002bd7a <putchar>
    8002acda:	4529                	li	a0,10
    8002acdc:	09e010ef          	jal	8002bd7a <putchar>
}
    8002ace0:	60a2                	ld	ra,8(sp)
    8002ace2:	0141                	addi	sp,sp,16
    8002ace4:	8082                	ret

000000008002ace6 <mtvec_test_7>:

bool mtvec_test_7() {
    8002ace6:	1141                	addi	sp,sp,-16

    TEST_START();
    8002ace8:	00005597          	auipc	a1,0x5
    8002acec:	f0858593          	addi	a1,a1,-248 # 8002fbf0 <__func__.17>
    8002acf0:	00005517          	auipc	a0,0x5
    8002acf4:	2e850513          	addi	a0,a0,744 # 8002ffd8 <__func__.0+0x2e8>
bool mtvec_test_7() {
    8002acf8:	e406                	sd	ra,8(sp)
    TEST_START();
    8002acfa:	392020ef          	jal	8002d08c <printf>
    8002acfe:	4529                	li	a0,10
    8002ad00:	07a010ef          	jal	8002bd7a <putchar>

    //HS模式下，当mtve.mode=vectored，未开启中断代理，发生中断  

    goto_priv(PRIV_M);
    8002ad04:	4511                	li	a0,4
    8002ad06:	a02d60ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002ad0a:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002ad0e:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002ad12:	10016073          	csrsi	sstatus,2
    CSRC(CSR_MIDELEG,1ULL << 1);
    8002ad16:	30317073          	csrci	mideleg,2
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002ad1a:	300025f3          	csrr	a1,mstatus
    8002ad1e:	00011517          	auipc	a0,0x11
    8002ad22:	91250513          	addi	a0,a0,-1774 # 8003b630 <__func__.0+0xb940>
    8002ad26:	366020ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002ad2a:	8e2d60ef          	jal	80000e0c <test_setup_except_function>
    CSRS(CSR_MVIEN,1ULL << 1);
    8002ad2e:	30816073          	csrsi	mvien,2
    excpt_info();
    8002ad32:	b1cd60ef          	jal	8000104e <excpt_info>

    CSRS(mie, 1ULL << 1);
    8002ad36:	30416073          	csrsi	mie,2

    // CSRS(sie, 1ULL << 1);
    printf("sie=%llx \n",CSRR(sie));
    8002ad3a:	104025f3          	csrr	a1,sie
    8002ad3e:	00011517          	auipc	a0,0x11
    8002ad42:	ada50513          	addi	a0,a0,-1318 # 8003b818 <__func__.0+0xbb28>
    8002ad46:	346020ef          	jal	8002d08c <printf>

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002ad4a:	00003797          	auipc	a5,0x3
    8002ad4e:	bf278793          	addi	a5,a5,-1038 # 8002d93c <vs_test_entry>
    8002ad52:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002ad56:	00003797          	auipc	a5,0x3
    8002ad5a:	95e78793          	addi	a5,a5,-1698 # 8002d6b4 <hs_test_entry>
    8002ad5e:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002ad62:	00002797          	auipc	a5,0x2
    8002ad66:	6ca78793          	addi	a5,a5,1738 # 8002d42c <m_test_entry>
    8002ad6a:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002ad6e:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002ad72:	305025f3          	csrr	a1,mtvec
    8002ad76:	00011517          	auipc	a0,0x11
    8002ad7a:	8ca50513          	addi	a0,a0,-1846 # 8003b640 <__func__.0+0xb950>
    8002ad7e:	30e020ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002ad82:	88ad60ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_HS);
    8002ad86:	450d                	li	a0,3
    8002ad88:	980d60ef          	jal	80000f08 <goto_priv>
    printf("入口：");
    8002ad8c:	00011517          	auipc	a0,0x11
    8002ad90:	8c450513          	addi	a0,a0,-1852 # 8003b650 <__func__.0+0xb960>
    8002ad94:	2f8020ef          	jal	8002d08c <printf>
    CSRS(sip, 1ULL << 1);
    8002ad98:	14416073          	csrsi	sip,2
    
    TEST_ASSERT("HS模式下,mtve.mode=vectored,未开启中断代理,产生2号软件中断",
    8002ad9c:	08200593          	li	a1,130
    8002ada0:	00011617          	auipc	a2,0x11
    8002ada4:	a8860613          	addi	a2,a2,-1400 # 8003b828 <__func__.0+0xbb38>
    8002ada8:	00005517          	auipc	a0,0x5
    8002adac:	24850513          	addi	a0,a0,584 # 8002fff0 <__func__.0+0x300>
    8002adb0:	2dc020ef          	jal	8002d08c <printf>
    8002adb4:	0002d797          	auipc	a5,0x2d
    8002adb8:	25d7c783          	lbu	a5,605(a5) # 80058011 <excpt+0x1>
    8002adbc:	00005597          	auipc	a1,0x5
    8002adc0:	1fc58593          	addi	a1,a1,508 # 8002ffb8 <__func__.0+0x2c8>
    8002adc4:	e789                	bnez	a5,8002adce <mtvec_test_7+0xe8>
    8002adc6:	00005597          	auipc	a1,0x5
    8002adca:	20258593          	addi	a1,a1,514 # 8002ffc8 <__func__.0+0x2d8>
    8002adce:	00005517          	auipc	a0,0x5
    8002add2:	23a50513          	addi	a0,a0,570 # 80030008 <__func__.0+0x318>
    8002add6:	2b6020ef          	jal	8002d08c <printf>
    8002adda:	0002d797          	auipc	a5,0x2d
    8002adde:	2377c783          	lbu	a5,567(a5) # 80058011 <excpt+0x1>
    8002ade2:	c799                	beqz	a5,8002adf0 <mtvec_test_7+0x10a>
    8002ade4:	4529                	li	a0,10
    8002ade6:	795000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
}
    8002adea:	60a2                	ld	ra,8(sp)
    8002adec:	0141                	addi	sp,sp,16
    8002adee:	8082                	ret
    TEST_ASSERT("HS模式下,mtve.mode=vectored,未开启中断代理,产生2号软件中断",
    8002adf0:	00005517          	auipc	a0,0x5
    8002adf4:	22050513          	addi	a0,a0,544 # 80030010 <__func__.0+0x320>
    8002adf8:	294020ef          	jal	8002d08c <printf>
    8002adfc:	02900513          	li	a0,41
    8002ae00:	77b000ef          	jal	8002bd7a <putchar>
    8002ae04:	4529                	li	a0,10
    8002ae06:	775000ef          	jal	8002bd7a <putchar>
}
    8002ae0a:	60a2                	ld	ra,8(sp)
    8002ae0c:	0141                	addi	sp,sp,16
    8002ae0e:	8082                	ret

000000008002ae10 <stvec_test_1>:
//     // TEST_END();
// }



bool stvec_test_1() {
    8002ae10:	1141                	addi	sp,sp,-16

    TEST_START();
    8002ae12:	00005597          	auipc	a1,0x5
    8002ae16:	dee58593          	addi	a1,a1,-530 # 8002fc00 <__func__.16>
    8002ae1a:	00005517          	auipc	a0,0x5
    8002ae1e:	1be50513          	addi	a0,a0,446 # 8002ffd8 <__func__.0+0x2e8>
bool stvec_test_1() {
    8002ae22:	e406                	sd	ra,8(sp)
    TEST_START();
    8002ae24:	268020ef          	jal	8002d08c <printf>
    8002ae28:	4529                	li	a0,10
    8002ae2a:	751000ef          	jal	8002bd7a <putchar>

    //hs模式下，开启了mideleg中断代理，关闭了hideleg中断代理，发生2号软件中断  

    goto_priv(PRIV_M);
    8002ae2e:	4511                	li	a0,4
    8002ae30:	8d8d60ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002ae34:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002ae38:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002ae3c:	10016073          	csrsi	sstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002ae40:	30316073          	csrsi	mideleg,2
    CSRS(CSR_HIDELEG,1ULL << 1);
    8002ae44:	60316073          	csrsi	hideleg,2
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002ae48:	300025f3          	csrr	a1,mstatus
    8002ae4c:	00010517          	auipc	a0,0x10
    8002ae50:	7e450513          	addi	a0,a0,2020 # 8003b630 <__func__.0+0xb940>
    8002ae54:	238020ef          	jal	8002d08c <printf>

    CSRS(mie, 1ULL << 1);
    8002ae58:	30416073          	csrsi	mie,2
    CSRS(sie, 1ULL << 1);
    8002ae5c:	10416073          	csrsi	sie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002ae60:	00003797          	auipc	a5,0x3
    8002ae64:	adc78793          	addi	a5,a5,-1316 # 8002d93c <vs_test_entry>
    8002ae68:	20579073          	csrw	vstvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002ae6c:	00002797          	auipc	a5,0x2
    8002ae70:	5c078793          	addi	a5,a5,1472 # 8002d42c <m_test_entry>
    8002ae74:	30579073          	csrw	mtvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002ae78:	00003797          	auipc	a5,0x3
    8002ae7c:	83c78793          	addi	a5,a5,-1988 # 8002d6b4 <hs_test_entry>
    8002ae80:	10579073          	csrw	stvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002ae84:	1050e073          	csrsi	stvec,1
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002ae88:	105025f3          	csrr	a1,stvec
    8002ae8c:	00011517          	auipc	a0,0x11
    8002ae90:	9ec50513          	addi	a0,a0,-1556 # 8003b878 <__func__.0+0xbb88>
    8002ae94:	1f8020ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002ae98:	f75d50ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_HS);
    8002ae9c:	450d                	li	a0,3
    8002ae9e:	86ad60ef          	jal	80000f08 <goto_priv>
    printf("入口：");
    8002aea2:	00010517          	auipc	a0,0x10
    8002aea6:	7ae50513          	addi	a0,a0,1966 # 8003b650 <__func__.0+0xb960>
    8002aeaa:	1e2020ef          	jal	8002d08c <printf>
    CSRS(sip, 1ULL << 1);
    8002aeae:	14416073          	csrsi	sip,2
    
    TEST_ASSERT("HS模式下,mtve.mode=vectored,mideleg=1,hideleg=0,产生2号软件中断",
    8002aeb2:	08200593          	li	a1,130
    8002aeb6:	00011617          	auipc	a2,0x11
    8002aeba:	9d260613          	addi	a2,a2,-1582 # 8003b888 <__func__.0+0xbb98>
    8002aebe:	00005517          	auipc	a0,0x5
    8002aec2:	13250513          	addi	a0,a0,306 # 8002fff0 <__func__.0+0x300>
    8002aec6:	1c6020ef          	jal	8002d08c <printf>
    8002aeca:	0002d797          	auipc	a5,0x2d
    8002aece:	1477c783          	lbu	a5,327(a5) # 80058011 <excpt+0x1>
    8002aed2:	00005597          	auipc	a1,0x5
    8002aed6:	0e658593          	addi	a1,a1,230 # 8002ffb8 <__func__.0+0x2c8>
    8002aeda:	e789                	bnez	a5,8002aee4 <stvec_test_1+0xd4>
    8002aedc:	00005597          	auipc	a1,0x5
    8002aee0:	0ec58593          	addi	a1,a1,236 # 8002ffc8 <__func__.0+0x2d8>
    8002aee4:	00005517          	auipc	a0,0x5
    8002aee8:	12450513          	addi	a0,a0,292 # 80030008 <__func__.0+0x318>
    8002aeec:	1a0020ef          	jal	8002d08c <printf>
    8002aef0:	0002d797          	auipc	a5,0x2d
    8002aef4:	1217c783          	lbu	a5,289(a5) # 80058011 <excpt+0x1>
    8002aef8:	c799                	beqz	a5,8002af06 <stvec_test_1+0xf6>
    8002aefa:	4529                	li	a0,10
    8002aefc:	67f000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
}
    8002af00:	60a2                	ld	ra,8(sp)
    8002af02:	0141                	addi	sp,sp,16
    8002af04:	8082                	ret
    TEST_ASSERT("HS模式下,mtve.mode=vectored,mideleg=1,hideleg=0,产生2号软件中断",
    8002af06:	00005517          	auipc	a0,0x5
    8002af0a:	10a50513          	addi	a0,a0,266 # 80030010 <__func__.0+0x320>
    8002af0e:	17e020ef          	jal	8002d08c <printf>
    8002af12:	02900513          	li	a0,41
    8002af16:	665000ef          	jal	8002bd7a <putchar>
    8002af1a:	4529                	li	a0,10
    8002af1c:	65f000ef          	jal	8002bd7a <putchar>
}
    8002af20:	60a2                	ld	ra,8(sp)
    8002af22:	0141                	addi	sp,sp,16
    8002af24:	8082                	ret

000000008002af26 <stvec_test_2>:

bool stvec_test_2() {
    8002af26:	1141                	addi	sp,sp,-16

    TEST_START();
    8002af28:	00005597          	auipc	a1,0x5
    8002af2c:	ce858593          	addi	a1,a1,-792 # 8002fc10 <__func__.15>
    8002af30:	00005517          	auipc	a0,0x5
    8002af34:	0a850513          	addi	a0,a0,168 # 8002ffd8 <__func__.0+0x2e8>
bool stvec_test_2() {
    8002af38:	e406                	sd	ra,8(sp)
    TEST_START();
    8002af3a:	152020ef          	jal	8002d08c <printf>
    8002af3e:	4529                	li	a0,10
    8002af40:	63b000ef          	jal	8002bd7a <putchar>

    //HS模式下，开启了medeleg代理，关闭hedeleg异常代理，发生异常

    goto_priv(PRIV_M);
    8002af44:	4511                	li	a0,4
    8002af46:	fc3d50ef          	jal	80000f08 <goto_priv>

    CSRS(CSR_MEDELEG,1ULL << 21);
    8002af4a:	002007b7          	lui	a5,0x200
    8002af4e:	3027a073          	csrs	medeleg,a5

    CSRW(CSR_MTVEC,m_test_entry);
    8002af52:	00002797          	auipc	a5,0x2
    8002af56:	4da78793          	addi	a5,a5,1242 # 8002d42c <m_test_entry>
    8002af5a:	30579073          	csrw	mtvec,a5
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002af5e:	00003797          	auipc	a5,0x3
    8002af62:	9de78793          	addi	a5,a5,-1570 # 8002d93c <vs_test_entry>
    8002af66:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002af6a:	00002797          	auipc	a5,0x2
    8002af6e:	74a78793          	addi	a5,a5,1866 # 8002d6b4 <hs_test_entry>
    8002af72:	10579073          	csrw	stvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002af76:	1050e073          	csrsi	stvec,1
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002af7a:	105025f3          	csrr	a1,stvec
    8002af7e:	00011517          	auipc	a0,0x11
    8002af82:	8fa50513          	addi	a0,a0,-1798 # 8003b878 <__func__.0+0xbb88>
    8002af86:	106020ef          	jal	8002d08c <printf>


    goto_priv(PRIV_HS);
    8002af8a:	450d                	li	a0,3
    8002af8c:	f7dd50ef          	jal	80000f08 <goto_priv>
    hspt_init();
    8002af90:	e50d50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8002af94:	a31d50ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8002af98:	fe4d50ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8002af9c:	450d                	li	a0,3
    8002af9e:	f6bd50ef          	jal	80000f08 <goto_priv>
    set_prev_priv(PRIV_VS);
    8002afa2:	4509                	li	a0,2
    8002afa4:	e85d50ef          	jal	80000e28 <set_prev_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8002afa8:	e65d50ef          	jal	80000e0c <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8002afac:	000807b7          	lui	a5,0x80
    8002afb0:	1007b073          	csrc	sstatus,a5
    printf("入口：");
    8002afb4:	00010517          	auipc	a0,0x10
    8002afb8:	69c50513          	addi	a0,a0,1692 # 8003b650 <__func__.0+0xb960>
    8002afbc:	0d0020ef          	jal	8002d08c <printf>
    asm volatile(
    8002afc0:	001007b7          	lui	a5,0x100
    8002afc4:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8002afc8:	07b2                	slli	a5,a5,0xc
    8002afca:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("HS模式下,mtve.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002afce:	08200593          	li	a1,130
    8002afd2:	00011617          	auipc	a2,0x11
    8002afd6:	90660613          	addi	a2,a2,-1786 # 8003b8d8 <__func__.0+0xbbe8>
    8002afda:	00005517          	auipc	a0,0x5
    8002afde:	01650513          	addi	a0,a0,22 # 8002fff0 <__func__.0+0x300>
    8002afe2:	0aa020ef          	jal	8002d08c <printf>
    8002afe6:	0002d797          	auipc	a5,0x2d
    8002afea:	02b7c783          	lbu	a5,43(a5) # 80058011 <excpt+0x1>
    8002afee:	00005597          	auipc	a1,0x5
    8002aff2:	fca58593          	addi	a1,a1,-54 # 8002ffb8 <__func__.0+0x2c8>
    8002aff6:	e789                	bnez	a5,8002b000 <stvec_test_2+0xda>
    8002aff8:	00005597          	auipc	a1,0x5
    8002affc:	fd058593          	addi	a1,a1,-48 # 8002ffc8 <__func__.0+0x2d8>
    8002b000:	00005517          	auipc	a0,0x5
    8002b004:	00850513          	addi	a0,a0,8 # 80030008 <__func__.0+0x318>
    8002b008:	084020ef          	jal	8002d08c <printf>
    8002b00c:	0002d797          	auipc	a5,0x2d
    8002b010:	0057c783          	lbu	a5,5(a5) # 80058011 <excpt+0x1>
    8002b014:	c799                	beqz	a5,8002b022 <stvec_test_2+0xfc>
    8002b016:	4529                	li	a0,10
    8002b018:	563000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    );
    
}
    8002b01c:	60a2                	ld	ra,8(sp)
    8002b01e:	0141                	addi	sp,sp,16
    8002b020:	8082                	ret
    TEST_ASSERT("HS模式下,mtve.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b022:	00005517          	auipc	a0,0x5
    8002b026:	fee50513          	addi	a0,a0,-18 # 80030010 <__func__.0+0x320>
    8002b02a:	062020ef          	jal	8002d08c <printf>
    8002b02e:	02900513          	li	a0,41
    8002b032:	549000ef          	jal	8002bd7a <putchar>
    8002b036:	4529                	li	a0,10
    8002b038:	543000ef          	jal	8002bd7a <putchar>
}
    8002b03c:	60a2                	ld	ra,8(sp)
    8002b03e:	0141                	addi	sp,sp,16
    8002b040:	8082                	ret

000000008002b042 <stvec_test_3>:

bool stvec_test_3() {
    8002b042:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b044:	00005597          	auipc	a1,0x5
    8002b048:	bdc58593          	addi	a1,a1,-1060 # 8002fc20 <__func__.13>
    8002b04c:	00005517          	auipc	a0,0x5
    8002b050:	f8c50513          	addi	a0,a0,-116 # 8002ffd8 <__func__.0+0x2e8>
bool stvec_test_3() {
    8002b054:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b056:	036020ef          	jal	8002d08c <printf>
    8002b05a:	4529                	li	a0,10
    8002b05c:	51f000ef          	jal	8002bd7a <putchar>

    //HU模式下，开启了medeleg代理，关闭hedeleg异常代理，发生异常

    goto_priv(PRIV_M);
    8002b060:	4511                	li	a0,4
    8002b062:	ea7d50ef          	jal	80000f08 <goto_priv>

    CSRS(CSR_MEDELEG,1ULL << 2);
    8002b066:	30226073          	csrsi	medeleg,4

    CSRW(CSR_MTVEC,m_test_entry);
    8002b06a:	00002797          	auipc	a5,0x2
    8002b06e:	3c278793          	addi	a5,a5,962 # 8002d42c <m_test_entry>
    8002b072:	30579073          	csrw	mtvec,a5
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b076:	00003797          	auipc	a5,0x3
    8002b07a:	8c678793          	addi	a5,a5,-1850 # 8002d93c <vs_test_entry>
    8002b07e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b082:	00002797          	auipc	a5,0x2
    8002b086:	63278793          	addi	a5,a5,1586 # 8002d6b4 <hs_test_entry>
    8002b08a:	10579073          	csrw	stvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002b08e:	1050e073          	csrsi	stvec,1
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002b092:	105025f3          	csrr	a1,stvec
    8002b096:	00010517          	auipc	a0,0x10
    8002b09a:	7e250513          	addi	a0,a0,2018 # 8003b878 <__func__.0+0xbb88>
    8002b09e:	7ef010ef          	jal	8002d08c <printf>

    goto_priv(PRIV_HU);
    8002b0a2:	4505                	li	a0,1
    8002b0a4:	e65d50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();      
    8002b0a8:	d65d50ef          	jal	80000e0c <test_setup_except_function>
    printf("入口：");
    8002b0ac:	00010517          	auipc	a0,0x10
    8002b0b0:	5a450513          	addi	a0,a0,1444 # 8003b650 <__func__.0+0xb960>
    8002b0b4:	7d9010ef          	jal	8002d08c <printf>
    CSRR(CSR_MSTATUS);
    8002b0b8:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("HU模式下,mtve.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b0bc:	08200593          	li	a1,130
    8002b0c0:	00011617          	auipc	a2,0x11
    8002b0c4:	85860613          	addi	a2,a2,-1960 # 8003b918 <__func__.0+0xbc28>
    8002b0c8:	00005517          	auipc	a0,0x5
    8002b0cc:	f2850513          	addi	a0,a0,-216 # 8002fff0 <__func__.0+0x300>
    8002b0d0:	7bd010ef          	jal	8002d08c <printf>
    8002b0d4:	0002d797          	auipc	a5,0x2d
    8002b0d8:	f3d7c783          	lbu	a5,-195(a5) # 80058011 <excpt+0x1>
    8002b0dc:	00005597          	auipc	a1,0x5
    8002b0e0:	edc58593          	addi	a1,a1,-292 # 8002ffb8 <__func__.0+0x2c8>
    8002b0e4:	e789                	bnez	a5,8002b0ee <stvec_test_3+0xac>
    8002b0e6:	00005597          	auipc	a1,0x5
    8002b0ea:	ee258593          	addi	a1,a1,-286 # 8002ffc8 <__func__.0+0x2d8>
    8002b0ee:	00005517          	auipc	a0,0x5
    8002b0f2:	f1a50513          	addi	a0,a0,-230 # 80030008 <__func__.0+0x318>
    8002b0f6:	797010ef          	jal	8002d08c <printf>
    8002b0fa:	0002d797          	auipc	a5,0x2d
    8002b0fe:	f177c783          	lbu	a5,-233(a5) # 80058011 <excpt+0x1>
    8002b102:	c799                	beqz	a5,8002b110 <stvec_test_3+0xce>
    8002b104:	4529                	li	a0,10
    8002b106:	475000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    );
}
    8002b10a:	60a2                	ld	ra,8(sp)
    8002b10c:	0141                	addi	sp,sp,16
    8002b10e:	8082                	ret
    TEST_ASSERT("HU模式下,mtve.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b110:	00005517          	auipc	a0,0x5
    8002b114:	f0050513          	addi	a0,a0,-256 # 80030010 <__func__.0+0x320>
    8002b118:	775010ef          	jal	8002d08c <printf>
    8002b11c:	02900513          	li	a0,41
    8002b120:	45b000ef          	jal	8002bd7a <putchar>
    8002b124:	4529                	li	a0,10
    8002b126:	455000ef          	jal	8002bd7a <putchar>
}
    8002b12a:	60a2                	ld	ra,8(sp)
    8002b12c:	0141                	addi	sp,sp,16
    8002b12e:	8082                	ret

000000008002b130 <stvec_test_4>:

bool stvec_test_4() {
    8002b130:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b132:	00005597          	auipc	a1,0x5
    8002b136:	afe58593          	addi	a1,a1,-1282 # 8002fc30 <__func__.12>
    8002b13a:	00005517          	auipc	a0,0x5
    8002b13e:	e9e50513          	addi	a0,a0,-354 # 8002ffd8 <__func__.0+0x2e8>
bool stvec_test_4() {
    8002b142:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b144:	749010ef          	jal	8002d08c <printf>
    8002b148:	4529                	li	a0,10
    8002b14a:	431000ef          	jal	8002bd7a <putchar>

    //VS模式下，开启了medeleg代理，关闭hedeleg异常代理，发生异常

    goto_priv(PRIV_M);
    8002b14e:	4511                	li	a0,4
    8002b150:	db9d50ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    8002b154:	001007b7          	lui	a5,0x100
    8002b158:	6007a073          	csrs	hstatus,a5

    CSRS(CSR_MEDELEG,1ULL << 22);
    8002b15c:	004007b7          	lui	a5,0x400
    8002b160:	3027a073          	csrs	medeleg,a5

    CSRW(CSR_MTVEC,m_test_entry);
    8002b164:	00002797          	auipc	a5,0x2
    8002b168:	2c878793          	addi	a5,a5,712 # 8002d42c <m_test_entry>
    8002b16c:	30579073          	csrw	mtvec,a5
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b170:	00002797          	auipc	a5,0x2
    8002b174:	7cc78793          	addi	a5,a5,1996 # 8002d93c <vs_test_entry>
    8002b178:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b17c:	00002797          	auipc	a5,0x2
    8002b180:	53878793          	addi	a5,a5,1336 # 8002d6b4 <hs_test_entry>
    8002b184:	10579073          	csrw	stvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002b188:	1050e073          	csrsi	stvec,1
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002b18c:	105025f3          	csrr	a1,stvec
    8002b190:	00010517          	auipc	a0,0x10
    8002b194:	6e850513          	addi	a0,a0,1768 # 8003b878 <__func__.0+0xbb88>
    8002b198:	6f5010ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VS);
    8002b19c:	4509                	li	a0,2
    8002b19e:	d6bd50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002b1a2:	c6bd50ef          	jal	80000e0c <test_setup_except_function>
    printf("入口：");
    8002b1a6:	00010517          	auipc	a0,0x10
    8002b1aa:	4aa50513          	addi	a0,a0,1194 # 8003b650 <__func__.0+0xb960>
    8002b1ae:	6df010ef          	jal	8002d08c <printf>
    asm volatile(
    8002b1b2:	12000073          	sfence.vma
    sfence_vma();
    
    TEST_ASSERT("VS模式下,mtve.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b1b6:	08200593          	li	a1,130
    8002b1ba:	00010617          	auipc	a2,0x10
    8002b1be:	79e60613          	addi	a2,a2,1950 # 8003b958 <__func__.0+0xbc68>
    8002b1c2:	00005517          	auipc	a0,0x5
    8002b1c6:	e2e50513          	addi	a0,a0,-466 # 8002fff0 <__func__.0+0x300>
    8002b1ca:	6c3010ef          	jal	8002d08c <printf>
    8002b1ce:	0002d797          	auipc	a5,0x2d
    8002b1d2:	e437c783          	lbu	a5,-445(a5) # 80058011 <excpt+0x1>
    8002b1d6:	00005597          	auipc	a1,0x5
    8002b1da:	de258593          	addi	a1,a1,-542 # 8002ffb8 <__func__.0+0x2c8>
    8002b1de:	e789                	bnez	a5,8002b1e8 <stvec_test_4+0xb8>
    8002b1e0:	00005597          	auipc	a1,0x5
    8002b1e4:	de858593          	addi	a1,a1,-536 # 8002ffc8 <__func__.0+0x2d8>
    8002b1e8:	00005517          	auipc	a0,0x5
    8002b1ec:	e2050513          	addi	a0,a0,-480 # 80030008 <__func__.0+0x318>
    8002b1f0:	69d010ef          	jal	8002d08c <printf>
    8002b1f4:	0002d797          	auipc	a5,0x2d
    8002b1f8:	e1d7c783          	lbu	a5,-483(a5) # 80058011 <excpt+0x1>
    8002b1fc:	c799                	beqz	a5,8002b20a <stvec_test_4+0xda>
    8002b1fe:	4529                	li	a0,10
    8002b200:	37b000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    );
}
    8002b204:	60a2                	ld	ra,8(sp)
    8002b206:	0141                	addi	sp,sp,16
    8002b208:	8082                	ret
    TEST_ASSERT("VS模式下,mtve.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b20a:	00005517          	auipc	a0,0x5
    8002b20e:	e0650513          	addi	a0,a0,-506 # 80030010 <__func__.0+0x320>
    8002b212:	67b010ef          	jal	8002d08c <printf>
    8002b216:	02900513          	li	a0,41
    8002b21a:	361000ef          	jal	8002bd7a <putchar>
    8002b21e:	4529                	li	a0,10
    8002b220:	35b000ef          	jal	8002bd7a <putchar>
}
    8002b224:	60a2                	ld	ra,8(sp)
    8002b226:	0141                	addi	sp,sp,16
    8002b228:	8082                	ret

000000008002b22a <stvec_test_5>:

bool stvec_test_5() {
    8002b22a:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b22c:	00005597          	auipc	a1,0x5
    8002b230:	a1458593          	addi	a1,a1,-1516 # 8002fc40 <__func__.11>
    8002b234:	00005517          	auipc	a0,0x5
    8002b238:	da450513          	addi	a0,a0,-604 # 8002ffd8 <__func__.0+0x2e8>
bool stvec_test_5() {
    8002b23c:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b23e:	64f010ef          	jal	8002d08c <printf>
    8002b242:	4529                	li	a0,10
    8002b244:	337000ef          	jal	8002bd7a <putchar>

    //VU模式下，开启了medeleg代理，关闭hedeleg异常代理，发生异常

    goto_priv(PRIV_M);
    8002b248:	4511                	li	a0,4
    8002b24a:	cbfd50ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    8002b24e:	001007b7          	lui	a5,0x100
    8002b252:	6007a073          	csrs	hstatus,a5

    CSRS(CSR_MEDELEG,1ULL << 22);
    8002b256:	004007b7          	lui	a5,0x400
    8002b25a:	3027a073          	csrs	medeleg,a5

    CSRW(CSR_MTVEC,m_test_entry);
    8002b25e:	00002797          	auipc	a5,0x2
    8002b262:	1ce78793          	addi	a5,a5,462 # 8002d42c <m_test_entry>
    8002b266:	30579073          	csrw	mtvec,a5
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b26a:	00002797          	auipc	a5,0x2
    8002b26e:	6d278793          	addi	a5,a5,1746 # 8002d93c <vs_test_entry>
    8002b272:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b276:	00002797          	auipc	a5,0x2
    8002b27a:	43e78793          	addi	a5,a5,1086 # 8002d6b4 <hs_test_entry>
    8002b27e:	10579073          	csrw	stvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002b282:	1050e073          	csrsi	stvec,1
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002b286:	105025f3          	csrr	a1,stvec
    8002b28a:	00010517          	auipc	a0,0x10
    8002b28e:	5ee50513          	addi	a0,a0,1518 # 8003b878 <__func__.0+0xbb88>
    8002b292:	5fb010ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VU);
    8002b296:	4501                	li	a0,0
    8002b298:	c71d50ef          	jal	80000f08 <goto_priv>
    TEST_SETUP_EXCEPT();
    8002b29c:	b71d50ef          	jal	80000e0c <test_setup_except_function>
    printf("入口：");
    8002b2a0:	00010517          	auipc	a0,0x10
    8002b2a4:	3b050513          	addi	a0,a0,944 # 8003b650 <__func__.0+0xb960>
    8002b2a8:	5e5010ef          	jal	8002d08c <printf>
    asm volatile(
    8002b2ac:	4781                	li	a5,0
    8002b2ae:	6007c7f3          	.insn	4, 0x6007c7f3
    uint64_t tmp = hlvb(0);
    
    TEST_ASSERT("VU模式下,mtve.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b2b2:	08200593          	li	a1,130
    8002b2b6:	00010617          	auipc	a2,0x10
    8002b2ba:	6e260613          	addi	a2,a2,1762 # 8003b998 <__func__.0+0xbca8>
    8002b2be:	00005517          	auipc	a0,0x5
    8002b2c2:	d3250513          	addi	a0,a0,-718 # 8002fff0 <__func__.0+0x300>
    8002b2c6:	5c7010ef          	jal	8002d08c <printf>
    8002b2ca:	0002d797          	auipc	a5,0x2d
    8002b2ce:	d477c783          	lbu	a5,-697(a5) # 80058011 <excpt+0x1>
    8002b2d2:	00005597          	auipc	a1,0x5
    8002b2d6:	ce658593          	addi	a1,a1,-794 # 8002ffb8 <__func__.0+0x2c8>
    8002b2da:	e789                	bnez	a5,8002b2e4 <stvec_test_5+0xba>
    8002b2dc:	00005597          	auipc	a1,0x5
    8002b2e0:	cec58593          	addi	a1,a1,-788 # 8002ffc8 <__func__.0+0x2d8>
    8002b2e4:	00005517          	auipc	a0,0x5
    8002b2e8:	d2450513          	addi	a0,a0,-732 # 80030008 <__func__.0+0x318>
    8002b2ec:	5a1010ef          	jal	8002d08c <printf>
    8002b2f0:	0002d797          	auipc	a5,0x2d
    8002b2f4:	d217c783          	lbu	a5,-735(a5) # 80058011 <excpt+0x1>
    8002b2f8:	c799                	beqz	a5,8002b306 <stvec_test_5+0xdc>
    8002b2fa:	4529                	li	a0,10
    8002b2fc:	27f000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    );
}
    8002b300:	60a2                	ld	ra,8(sp)
    8002b302:	0141                	addi	sp,sp,16
    8002b304:	8082                	ret
    TEST_ASSERT("VU模式下,mtve.mode=vectored,medeleg=1,hedeleg=0,产生异常",
    8002b306:	00005517          	auipc	a0,0x5
    8002b30a:	d0a50513          	addi	a0,a0,-758 # 80030010 <__func__.0+0x320>
    8002b30e:	57f010ef          	jal	8002d08c <printf>
    8002b312:	02900513          	li	a0,41
    8002b316:	265000ef          	jal	8002bd7a <putchar>
    8002b31a:	4529                	li	a0,10
    8002b31c:	25f000ef          	jal	8002bd7a <putchar>
}
    8002b320:	60a2                	ld	ra,8(sp)
    8002b322:	0141                	addi	sp,sp,16
    8002b324:	8082                	ret

000000008002b326 <vstvec_test_1>:




bool vstvec_test_1() {
    8002b326:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b328:	00005597          	auipc	a1,0x5
    8002b32c:	92858593          	addi	a1,a1,-1752 # 8002fc50 <__func__.10>
    8002b330:	00005517          	auipc	a0,0x5
    8002b334:	ca850513          	addi	a0,a0,-856 # 8002ffd8 <__func__.0+0x2e8>
bool vstvec_test_1() {
    8002b338:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b33a:	553010ef          	jal	8002d08c <printf>
    8002b33e:	4529                	li	a0,10
    8002b340:	23b000ef          	jal	8002bd7a <putchar>

    //vs模式下，当vstve.mode=vectored，开启了mideleg和hideleg中断代理,,发生2号软件中断  

    goto_priv(PRIV_M);
    8002b344:	4511                	li	a0,4
    8002b346:	bc3d50ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002b34a:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002b34e:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002b352:	10016073          	csrsi	sstatus,2
    CSRS(CSR_VSSTATUS,1ULL << 1);
    8002b356:	20016073          	csrsi	vsstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002b35a:	30316073          	csrsi	mideleg,2
    CSRS(CSR_MIDELEG,1ULL << 2);
    8002b35e:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIDELEG,1ULL << 2);
    8002b362:	60326073          	csrsi	hideleg,4
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002b366:	300025f3          	csrr	a1,mstatus
    8002b36a:	00010517          	auipc	a0,0x10
    8002b36e:	2c650513          	addi	a0,a0,710 # 8003b630 <__func__.0+0xb940>
    8002b372:	51b010ef          	jal	8002d08c <printf>

    CSRS(mie, 1ULL << 3);
    8002b376:	30446073          	csrsi	mie,8
    CSRS(sie, 1ULL << 1);
    8002b37a:	10416073          	csrsi	sie,2
    CSRS(vsie, 1ULL << 1);
    8002b37e:	20416073          	csrsi	vsie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b382:	00002797          	auipc	a5,0x2
    8002b386:	5ba78793          	addi	a5,a5,1466 # 8002d93c <vs_test_entry>
    8002b38a:	20579073          	csrw	vstvec,a5
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002b38e:	205025f3          	csrr	a1,vstvec
    8002b392:	00010517          	auipc	a0,0x10
    8002b396:	64650513          	addi	a0,a0,1606 # 8003b9d8 <__func__.0+0xbce8>
    8002b39a:	4f3010ef          	jal	8002d08c <printf>
    CSRS(CSR_VSTVEC , 1ULL << 0);
    8002b39e:	2050e073          	csrsi	vstvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002b3a2:	205025f3          	csrr	a1,vstvec
    8002b3a6:	00010517          	auipc	a0,0x10
    8002b3aa:	63250513          	addi	a0,a0,1586 # 8003b9d8 <__func__.0+0xbce8>
    8002b3ae:	4df010ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002b3b2:	a5bd50ef          	jal	80000e0c <test_setup_except_function>
    CSRS(hip, 1ULL << 2);       //当hideleg=1，hvip.VSSIP是hip.VSSIP的别名
    8002b3b6:	64426073          	csrsi	hip,4
    printf("入口：");
    8002b3ba:	00010517          	auipc	a0,0x10
    8002b3be:	29650513          	addi	a0,a0,662 # 8003b650 <__func__.0+0xb960>
    8002b3c2:	4cb010ef          	jal	8002d08c <printf>
    goto_priv(PRIV_VS);
    8002b3c6:	4509                	li	a0,2
    8002b3c8:	b41d50ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("vs模式下,mtve.mode=vectored.,mideleg=1,hideleg=1,产生2号软件中断",
    8002b3cc:	08200593          	li	a1,130
    8002b3d0:	00010617          	auipc	a2,0x10
    8002b3d4:	61860613          	addi	a2,a2,1560 # 8003b9e8 <__func__.0+0xbcf8>
    8002b3d8:	00005517          	auipc	a0,0x5
    8002b3dc:	c1850513          	addi	a0,a0,-1000 # 8002fff0 <__func__.0+0x300>
    8002b3e0:	4ad010ef          	jal	8002d08c <printf>
    8002b3e4:	0002d797          	auipc	a5,0x2d
    8002b3e8:	c2d7c783          	lbu	a5,-979(a5) # 80058011 <excpt+0x1>
    8002b3ec:	00005597          	auipc	a1,0x5
    8002b3f0:	bcc58593          	addi	a1,a1,-1076 # 8002ffb8 <__func__.0+0x2c8>
    8002b3f4:	e789                	bnez	a5,8002b3fe <vstvec_test_1+0xd8>
    8002b3f6:	00005597          	auipc	a1,0x5
    8002b3fa:	bd258593          	addi	a1,a1,-1070 # 8002ffc8 <__func__.0+0x2d8>
    8002b3fe:	00005517          	auipc	a0,0x5
    8002b402:	c0a50513          	addi	a0,a0,-1014 # 80030008 <__func__.0+0x318>
    8002b406:	487010ef          	jal	8002d08c <printf>
    8002b40a:	0002d797          	auipc	a5,0x2d
    8002b40e:	c077c783          	lbu	a5,-1017(a5) # 80058011 <excpt+0x1>
    8002b412:	c799                	beqz	a5,8002b420 <vstvec_test_1+0xfa>
    8002b414:	4529                	li	a0,10
    8002b416:	165000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
    

}
    8002b41a:	60a2                	ld	ra,8(sp)
    8002b41c:	0141                	addi	sp,sp,16
    8002b41e:	8082                	ret
    TEST_ASSERT("vs模式下,mtve.mode=vectored.,mideleg=1,hideleg=1,产生2号软件中断",
    8002b420:	00005517          	auipc	a0,0x5
    8002b424:	bf050513          	addi	a0,a0,-1040 # 80030010 <__func__.0+0x320>
    8002b428:	465010ef          	jal	8002d08c <printf>
    8002b42c:	02900513          	li	a0,41
    8002b430:	14b000ef          	jal	8002bd7a <putchar>
    8002b434:	4529                	li	a0,10
    8002b436:	145000ef          	jal	8002bd7a <putchar>
}
    8002b43a:	60a2                	ld	ra,8(sp)
    8002b43c:	0141                	addi	sp,sp,16
    8002b43e:	8082                	ret

000000008002b440 <vstvec_test_2>:

bool vstvec_test_2() {
    8002b440:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b442:	00005597          	auipc	a1,0x5
    8002b446:	81e58593          	addi	a1,a1,-2018 # 8002fc60 <__func__.9>
    8002b44a:	00005517          	auipc	a0,0x5
    8002b44e:	b8e50513          	addi	a0,a0,-1138 # 8002ffd8 <__func__.0+0x2e8>
bool vstvec_test_2() {
    8002b452:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b454:	439010ef          	jal	8002d08c <printf>
    8002b458:	4529                	li	a0,10
    8002b45a:	121000ef          	jal	8002bd7a <putchar>

    //VS模式下，开启了medeleg代理和hedeleg异常代理，发生异常

    goto_priv(PRIV_M);
    8002b45e:	4511                	li	a0,4
    8002b460:	aa9d50ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    8002b464:	001007b7          	lui	a5,0x100
    8002b468:	6007a073          	csrs	hstatus,a5

    CSRS(CSR_MEDELEG,1ULL << 13);
    8002b46c:	6789                	lui	a5,0x2
    8002b46e:	3027a073          	csrs	medeleg,a5
    CSRS(CSR_HEDELEG,1ULL << 13);
    8002b472:	6027a073          	csrs	hedeleg,a5

    CSRW(CSR_MTVEC,m_test_entry);
    8002b476:	00002797          	auipc	a5,0x2
    8002b47a:	fb678793          	addi	a5,a5,-74 # 8002d42c <m_test_entry>
    8002b47e:	30579073          	csrw	mtvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b482:	00002797          	auipc	a5,0x2
    8002b486:	23278793          	addi	a5,a5,562 # 8002d6b4 <hs_test_entry>
    8002b48a:	10579073          	csrw	stvec,a5
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b48e:	00002797          	auipc	a5,0x2
    8002b492:	4ae78793          	addi	a5,a5,1198 # 8002d93c <vs_test_entry>
    8002b496:	20579073          	csrw	vstvec,a5
    CSRS(CSR_VSTVEC , 1ULL << 0);
    8002b49a:	2050e073          	csrsi	vstvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002b49e:	205025f3          	csrr	a1,vstvec
    8002b4a2:	00010517          	auipc	a0,0x10
    8002b4a6:	53650513          	addi	a0,a0,1334 # 8003b9d8 <__func__.0+0xbce8>
    8002b4aa:	3e3010ef          	jal	8002d08c <printf>

    hspt_init();
    8002b4ae:	932d50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8002b4b2:	d12d50ef          	jal	800009c4 <hpt_init>
    vspt_init();
    8002b4b6:	ac6d50ef          	jal	8000077c <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8002b4ba:	4509                	li	a0,2
    8002b4bc:	a4dd50ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    8002b4c0:	94dd50ef          	jal	80000e0c <test_setup_except_function>

    printf("VS模式下,mtve.mode=vectored,medeleg=1,hedeleg=1,产生异常\n\n");
    8002b4c4:	00010517          	auipc	a0,0x10
    8002b4c8:	57450513          	addi	a0,a0,1396 # 8003ba38 <__func__.0+0xbd48>
    8002b4cc:	7fc010ef          	jal	8002ccc8 <puts>

    addr = hs_page_base(VSI_GI);
    printf("入口：");
    8002b4d0:	00010517          	auipc	a0,0x10
    8002b4d4:	18050513          	addi	a0,a0,384 # 8003b650 <__func__.0+0xb960>
    8002b4d8:	3b5010ef          	jal	8002d08c <printf>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8002b4dc:	400197b7          	lui	a5,0x40019
    8002b4e0:	078a                	slli	a5,a5,0x2
    8002b4e2:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>

    // TEST_ASSERT("VS模式下,mtve.mode=vectored,medeleg=1,hedeleg=1,产生异常",
    //     excpt.triggered == true 
    // );

}
    8002b4e6:	60a2                	ld	ra,8(sp)
    8002b4e8:	0141                	addi	sp,sp,16
    8002b4ea:	8082                	ret

000000008002b4ec <vstvec_test_3>:

bool vstvec_test_3() {      //待修改
    8002b4ec:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b4ee:	00004597          	auipc	a1,0x4
    8002b4f2:	78258593          	addi	a1,a1,1922 # 8002fc70 <__func__.8>
    8002b4f6:	00005517          	auipc	a0,0x5
    8002b4fa:	ae250513          	addi	a0,a0,-1310 # 8002ffd8 <__func__.0+0x2e8>
bool vstvec_test_3() {      //待修改
    8002b4fe:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b500:	38d010ef          	jal	8002d08c <printf>
    8002b504:	4529                	li	a0,10
    8002b506:	075000ef          	jal	8002bd7a <putchar>

    //VU模式下，开启了medeleg代理和hedeleg异常代理，发生异常

    goto_priv(PRIV_M);
    8002b50a:	4511                	li	a0,4
    8002b50c:	9fdd50ef          	jal	80000f08 <goto_priv>
    
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    8002b510:	001007b7          	lui	a5,0x100
    8002b514:	6007a073          	csrs	hstatus,a5

    CSRS(CSR_MEDELEG,1ULL << 22);
    8002b518:	004007b7          	lui	a5,0x400
    8002b51c:	3027a073          	csrs	medeleg,a5
    CSRS(CSR_HEDELEG,1ULL << 22);
    8002b520:	6027a073          	csrs	hedeleg,a5
    CSRS(CSR_MEDELEG,1ULL << 2);
    8002b524:	30226073          	csrsi	medeleg,4
    CSRS(CSR_HEDELEG,1ULL << 2);
    8002b528:	60226073          	csrsi	hedeleg,4

    CSRW(CSR_MTVEC,m_test_entry);
    8002b52c:	00002797          	auipc	a5,0x2
    8002b530:	f0078793          	addi	a5,a5,-256 # 8002d42c <m_test_entry>
    8002b534:	30579073          	csrw	mtvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b538:	00002797          	auipc	a5,0x2
    8002b53c:	17c78793          	addi	a5,a5,380 # 8002d6b4 <hs_test_entry>
    8002b540:	10579073          	csrw	stvec,a5
    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b544:	00002797          	auipc	a5,0x2
    8002b548:	3f878793          	addi	a5,a5,1016 # 8002d93c <vs_test_entry>
    8002b54c:	20579073          	csrw	vstvec,a5
    CSRS(CSR_VSTVEC , 1ULL << 0);
    8002b550:	2050e073          	csrsi	vstvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002b554:	205025f3          	csrr	a1,vstvec
    8002b558:	00010517          	auipc	a0,0x10
    8002b55c:	48050513          	addi	a0,a0,1152 # 8003b9d8 <__func__.0+0xbce8>
    8002b560:	32d010ef          	jal	8002d08c <printf>

    goto_priv(PRIV_VU);
    8002b564:	4501                	li	a0,0
    8002b566:	9a3d50ef          	jal	80000f08 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();     
    8002b56a:	8a3d50ef          	jal	80000e0c <test_setup_except_function>

    printf("VU模式下,mtve.mode=vectored,medeleg=1,hedeleg=1,产生异常\n\n");
    8002b56e:	00010517          	auipc	a0,0x10
    8002b572:	51250513          	addi	a0,a0,1298 # 8003ba80 <__func__.0+0xbd90>
    8002b576:	752010ef          	jal	8002ccc8 <puts>

    printf("入口：");   
    8002b57a:	00010517          	auipc	a0,0x10
    8002b57e:	0d650513          	addi	a0,a0,214 # 8003b650 <__func__.0+0xb960>
    8002b582:	30b010ef          	jal	8002d08c <printf>
    CSRR(CSR_MSTATUS);
    8002b586:	300027f3          	csrr	a5,mstatus

    // TEST_ASSERT("VU模式下,mtve.mode=vectored,medeleg=1,hedeleg=1,产生异常",
    //     excpt.triggered == true 
    // );

}
    8002b58a:	60a2                	ld	ra,8(sp)
    8002b58c:	0141                	addi	sp,sp,16
    8002b58e:	8082                	ret

000000008002b590 <vstvec_test_4>:



bool vstvec_test_4() {
    8002b590:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b592:	00004597          	auipc	a1,0x4
    8002b596:	6ee58593          	addi	a1,a1,1774 # 8002fc80 <__func__.7>
    8002b59a:	00005517          	auipc	a0,0x5
    8002b59e:	a3e50513          	addi	a0,a0,-1474 # 8002ffd8 <__func__.0+0x2e8>
bool vstvec_test_4() {
    8002b5a2:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b5a4:	2e9010ef          	jal	8002d08c <printf>
    8002b5a8:	4529                	li	a0,10
    8002b5aa:	7d0000ef          	jal	8002bd7a <putchar>

    //vs模式下，当vstvec.mode=direct，开启了mideleg和hideleg中断代理,发生2号软件中断  

    goto_priv(PRIV_M);
    8002b5ae:	4511                	li	a0,4
    8002b5b0:	959d50ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002b5b4:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002b5b8:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002b5bc:	10016073          	csrsi	sstatus,2
    CSRS(CSR_VSSTATUS,1ULL << 1);
    8002b5c0:	20016073          	csrsi	vsstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002b5c4:	30316073          	csrsi	mideleg,2
    CSRS(CSR_MIDELEG,1ULL << 2);
    8002b5c8:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIDELEG,1ULL << 2);
    8002b5cc:	60326073          	csrsi	hideleg,4
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002b5d0:	300025f3          	csrr	a1,mstatus
    8002b5d4:	00010517          	auipc	a0,0x10
    8002b5d8:	05c50513          	addi	a0,a0,92 # 8003b630 <__func__.0+0xb940>
    8002b5dc:	2b1010ef          	jal	8002d08c <printf>

    CSRS(mie, 1ULL << 3);
    8002b5e0:	30446073          	csrsi	mie,8
    CSRS(sie, 1ULL << 1);
    8002b5e4:	10416073          	csrsi	sie,2
    CSRS(vsie, 1ULL << 1);
    8002b5e8:	20416073          	csrsi	vsie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b5ec:	00002797          	auipc	a5,0x2
    8002b5f0:	35078793          	addi	a5,a5,848 # 8002d93c <vs_test_entry>
    8002b5f4:	20579073          	csrw	vstvec,a5
    CSRC(CSR_VSTVEC , 1ULL << 0);
    8002b5f8:	2050f073          	csrci	vstvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002b5fc:	205025f3          	csrr	a1,vstvec
    8002b600:	00010517          	auipc	a0,0x10
    8002b604:	3d850513          	addi	a0,a0,984 # 8003b9d8 <__func__.0+0xbce8>
    8002b608:	285010ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002b60c:	801d50ef          	jal	80000e0c <test_setup_except_function>
    CSRS(hip, 1ULL << 2);       //当hideleg=1，hvip.VSSIP是hip.VSSIP的别名
    8002b610:	64426073          	csrsi	hip,4

    printf("Vs模式下,mtve.mode=direct,medeleg=1,hedeleg=1,产生2号软件中断\n\n");
    8002b614:	00010517          	auipc	a0,0x10
    8002b618:	4b450513          	addi	a0,a0,1204 # 8003bac8 <__func__.0+0xbdd8>
    8002b61c:	6ac010ef          	jal	8002ccc8 <puts>

    printf("入口：");
    8002b620:	00010517          	auipc	a0,0x10
    8002b624:	03050513          	addi	a0,a0,48 # 8003b650 <__func__.0+0xb960>
    8002b628:	265010ef          	jal	8002d08c <printf>
    goto_priv(PRIV_VS);
    8002b62c:	4509                	li	a0,2
    8002b62e:	8dbd50ef          	jal	80000f08 <goto_priv>

    // TEST_ASSERT("vs模式下,mtve.mode=direct.,mideleg=1,hideleg=1,产生2号软件中断",
    //     excpt.triggered == true 
    // );
}
    8002b632:	60a2                	ld	ra,8(sp)
    8002b634:	0141                	addi	sp,sp,16
    8002b636:	8082                	ret

000000008002b638 <vstvec_test_5>:

bool vstvec_test_5() {
    8002b638:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b63a:	00004597          	auipc	a1,0x4
    8002b63e:	65658593          	addi	a1,a1,1622 # 8002fc90 <__func__.6>
    8002b642:	00005517          	auipc	a0,0x5
    8002b646:	99650513          	addi	a0,a0,-1642 # 8002ffd8 <__func__.0+0x2e8>
bool vstvec_test_5() {
    8002b64a:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b64c:	241010ef          	jal	8002d08c <printf>
    8002b650:	4529                	li	a0,10
    8002b652:	728000ef          	jal	8002bd7a <putchar>

    //vu模式下，当vstvec.mode=direct，开启了mideleg和hideleg中断代理,,发生2号软件中断  

    goto_priv(PRIV_M);
    8002b656:	4511                	li	a0,4
    8002b658:	8b1d50ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002b65c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002b660:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002b664:	10016073          	csrsi	sstatus,2
    CSRS(CSR_VSSTATUS,1ULL << 1);
    8002b668:	20016073          	csrsi	vsstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002b66c:	30316073          	csrsi	mideleg,2
    CSRS(CSR_MIDELEG,1ULL << 2);
    8002b670:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIDELEG,1ULL << 2);
    8002b674:	60326073          	csrsi	hideleg,4
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002b678:	300025f3          	csrr	a1,mstatus
    8002b67c:	00010517          	auipc	a0,0x10
    8002b680:	fb450513          	addi	a0,a0,-76 # 8003b630 <__func__.0+0xb940>
    8002b684:	209010ef          	jal	8002d08c <printf>

    CSRS(mie, 1ULL << 3);
    8002b688:	30446073          	csrsi	mie,8
    CSRS(sie, 1ULL << 1);
    8002b68c:	10416073          	csrsi	sie,2
    CSRS(vsie, 1ULL << 1);
    8002b690:	20416073          	csrsi	vsie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b694:	00002797          	auipc	a5,0x2
    8002b698:	2a878793          	addi	a5,a5,680 # 8002d93c <vs_test_entry>
    8002b69c:	20579073          	csrw	vstvec,a5
    CSRC(CSR_VSTVEC , 1ULL << 0);
    8002b6a0:	2050f073          	csrci	vstvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002b6a4:	205025f3          	csrr	a1,vstvec
    8002b6a8:	00010517          	auipc	a0,0x10
    8002b6ac:	33050513          	addi	a0,a0,816 # 8003b9d8 <__func__.0+0xbce8>
    8002b6b0:	1dd010ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002b6b4:	f58d50ef          	jal	80000e0c <test_setup_except_function>
    CSRS(hip, 1ULL << 2);       //当hideleg=1，hvip.VSSIP是hip.VSSIP的别名
    8002b6b8:	64426073          	csrsi	hip,4

    printf("VU模式下,mtve.mode=direct,medeleg=1,hedeleg=1,产生2号软件中断\n\n");
    8002b6bc:	00010517          	auipc	a0,0x10
    8002b6c0:	45c50513          	addi	a0,a0,1116 # 8003bb18 <__func__.0+0xbe28>
    8002b6c4:	604010ef          	jal	8002ccc8 <puts>

    printf("入口：");
    8002b6c8:	00010517          	auipc	a0,0x10
    8002b6cc:	f8850513          	addi	a0,a0,-120 # 8003b650 <__func__.0+0xb960>
    8002b6d0:	1bd010ef          	jal	8002d08c <printf>
    goto_priv(PRIV_VU);
    8002b6d4:	4501                	li	a0,0
    8002b6d6:	833d50ef          	jal	80000f08 <goto_priv>

    // TEST_ASSERT("vu模式下,mtve.mode=direct.,mideleg=1,hideleg=1,产生2号软件中断",
    //     excpt.triggered == true 
    // );
}
    8002b6da:	60a2                	ld	ra,8(sp)
    8002b6dc:	0141                	addi	sp,sp,16
    8002b6de:	8082                	ret

000000008002b6e0 <vstvec_test_6>:

bool vstvec_test_6() {
    8002b6e0:	1141                	addi	sp,sp,-16

    TEST_START();
    8002b6e2:	00004597          	auipc	a1,0x4
    8002b6e6:	5be58593          	addi	a1,a1,1470 # 8002fca0 <__func__.5>
    8002b6ea:	00005517          	auipc	a0,0x5
    8002b6ee:	8ee50513          	addi	a0,a0,-1810 # 8002ffd8 <__func__.0+0x2e8>
bool vstvec_test_6() {
    8002b6f2:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b6f4:	199010ef          	jal	8002d08c <printf>
    8002b6f8:	4529                	li	a0,10
    8002b6fa:	680000ef          	jal	8002bd7a <putchar>

    //vu模式下，当vstve.mode=vectored，开启了mideleg和hideleg中断代理,,发生2号软件中断  

    goto_priv(PRIV_M);
    8002b6fe:	4511                	li	a0,4
    8002b700:	809d50ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002b704:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002b708:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002b70c:	10016073          	csrsi	sstatus,2
    CSRS(CSR_VSSTATUS,1ULL << 1);
    8002b710:	20016073          	csrsi	vsstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002b714:	30316073          	csrsi	mideleg,2
    CSRS(CSR_MIDELEG,1ULL << 2);
    8002b718:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIDELEG,1ULL << 2);
    8002b71c:	60326073          	csrsi	hideleg,4
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002b720:	300025f3          	csrr	a1,mstatus
    8002b724:	00010517          	auipc	a0,0x10
    8002b728:	f0c50513          	addi	a0,a0,-244 # 8003b630 <__func__.0+0xb940>
    8002b72c:	161010ef          	jal	8002d08c <printf>

    CSRS(mie, 1ULL << 3);
    8002b730:	30446073          	csrsi	mie,8
    CSRS(sie, 1ULL << 1);
    8002b734:	10416073          	csrsi	sie,2
    CSRS(vsie, 1ULL << 1);
    8002b738:	20416073          	csrsi	vsie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b73c:	00002797          	auipc	a5,0x2
    8002b740:	20078793          	addi	a5,a5,512 # 8002d93c <vs_test_entry>
    8002b744:	20579073          	csrw	vstvec,a5
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002b748:	205025f3          	csrr	a1,vstvec
    8002b74c:	00010517          	auipc	a0,0x10
    8002b750:	28c50513          	addi	a0,a0,652 # 8003b9d8 <__func__.0+0xbce8>
    8002b754:	139010ef          	jal	8002d08c <printf>
    CSRS(CSR_VSTVEC , 1ULL << 0);
    8002b758:	2050e073          	csrsi	vstvec,1
    printf("vstvec=%llx \n",CSRR(CSR_VSTVEC));
    8002b75c:	205025f3          	csrr	a1,vstvec
    8002b760:	00010517          	auipc	a0,0x10
    8002b764:	27850513          	addi	a0,a0,632 # 8003b9d8 <__func__.0+0xbce8>
    8002b768:	125010ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002b76c:	ea0d50ef          	jal	80000e0c <test_setup_except_function>
    CSRS(hip, 1ULL << 2);       //当hideleg=1，hvip.VSSIP是hip.VSSIP的别名
    8002b770:	64426073          	csrsi	hip,4
    printf("入口：");
    8002b774:	00010517          	auipc	a0,0x10
    8002b778:	edc50513          	addi	a0,a0,-292 # 8003b650 <__func__.0+0xb960>
    8002b77c:	111010ef          	jal	8002d08c <printf>
    goto_priv(PRIV_VU);
    8002b780:	4501                	li	a0,0
    8002b782:	f86d50ef          	jal	80000f08 <goto_priv>

    TEST_ASSERT("vu模式下,mtve.mode=vectored.,mideleg=1,hideleg=1,产生2号软件中断",
    8002b786:	08200593          	li	a1,130
    8002b78a:	00010617          	auipc	a2,0x10
    8002b78e:	3de60613          	addi	a2,a2,990 # 8003bb68 <__func__.0+0xbe78>
    8002b792:	00005517          	auipc	a0,0x5
    8002b796:	85e50513          	addi	a0,a0,-1954 # 8002fff0 <__func__.0+0x300>
    8002b79a:	0f3010ef          	jal	8002d08c <printf>
    8002b79e:	0002d797          	auipc	a5,0x2d
    8002b7a2:	8737c783          	lbu	a5,-1933(a5) # 80058011 <excpt+0x1>
    8002b7a6:	00005597          	auipc	a1,0x5
    8002b7aa:	81258593          	addi	a1,a1,-2030 # 8002ffb8 <__func__.0+0x2c8>
    8002b7ae:	e789                	bnez	a5,8002b7b8 <vstvec_test_6+0xd8>
    8002b7b0:	00005597          	auipc	a1,0x5
    8002b7b4:	81858593          	addi	a1,a1,-2024 # 8002ffc8 <__func__.0+0x2d8>
    8002b7b8:	00005517          	auipc	a0,0x5
    8002b7bc:	85050513          	addi	a0,a0,-1968 # 80030008 <__func__.0+0x318>
    8002b7c0:	0cd010ef          	jal	8002d08c <printf>
    8002b7c4:	0002d797          	auipc	a5,0x2d
    8002b7c8:	84d7c783          	lbu	a5,-1971(a5) # 80058011 <excpt+0x1>
    8002b7cc:	c799                	beqz	a5,8002b7da <vstvec_test_6+0xfa>
    8002b7ce:	4529                	li	a0,10
    8002b7d0:	5aa000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    );
}
    8002b7d4:	60a2                	ld	ra,8(sp)
    8002b7d6:	0141                	addi	sp,sp,16
    8002b7d8:	8082                	ret
    TEST_ASSERT("vu模式下,mtve.mode=vectored.,mideleg=1,hideleg=1,产生2号软件中断",
    8002b7da:	00005517          	auipc	a0,0x5
    8002b7de:	83650513          	addi	a0,a0,-1994 # 80030010 <__func__.0+0x320>
    8002b7e2:	0ab010ef          	jal	8002d08c <printf>
    8002b7e6:	02900513          	li	a0,41
    8002b7ea:	590000ef          	jal	8002bd7a <putchar>
    8002b7ee:	4529                	li	a0,10
    8002b7f0:	58a000ef          	jal	8002bd7a <putchar>
}
    8002b7f4:	60a2                	ld	ra,8(sp)
    8002b7f6:	0141                	addi	sp,sp,16
    8002b7f8:	8082                	ret

000000008002b7fa <mnret_test_1>:


bool mnret_test_1() {
    8002b7fa:	1141                	addi	sp,sp,-16
    //m模式下，当mtve.mode=vectored，未开启中断代理，发生2号软件中断 ,执行mnret返回
    TEST_START();
    8002b7fc:	00004597          	auipc	a1,0x4
    8002b800:	4b458593          	addi	a1,a1,1204 # 8002fcb0 <__func__.4>
    8002b804:	00004517          	auipc	a0,0x4
    8002b808:	7d450513          	addi	a0,a0,2004 # 8002ffd8 <__func__.0+0x2e8>
bool mnret_test_1() {
    8002b80c:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b80e:	07f010ef          	jal	8002d08c <printf>
    8002b812:	4529                	li	a0,10
    8002b814:	566000ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8002b818:	4511                	li	a0,4
    8002b81a:	eeed50ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,(1ULL << 3));
    8002b81e:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,(1ULL << 1));
    8002b822:	30016073          	csrsi	mstatus,2

    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002b826:	300025f3          	csrr	a1,mstatus
    8002b82a:	00010517          	auipc	a0,0x10
    8002b82e:	e0650513          	addi	a0,a0,-506 # 8003b630 <__func__.0+0xb940>
    8002b832:	05b010ef          	jal	8002d08c <printf>

    CSRS(mie, 1ULL << 1);
    8002b836:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b83a:	00002797          	auipc	a5,0x2
    8002b83e:	10278793          	addi	a5,a5,258 # 8002d93c <vs_test_entry>
    8002b842:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b846:	00002797          	auipc	a5,0x2
    8002b84a:	e6e78793          	addi	a5,a5,-402 # 8002d6b4 <hs_test_entry>
    8002b84e:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002b852:	00002797          	auipc	a5,0x2
    8002b856:	bda78793          	addi	a5,a5,-1062 # 8002d42c <m_test_entry>
    8002b85a:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002b85e:	3050e073          	csrsi	mtvec,1


    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002b862:	305025f3          	csrr	a1,mtvec
    8002b866:	00010517          	auipc	a0,0x10
    8002b86a:	dda50513          	addi	a0,a0,-550 # 8003b640 <__func__.0+0xb950>
    8002b86e:	01f010ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002b872:	d9ad50ef          	jal	80000e0c <test_setup_except_function>
    printf("入口：");
    8002b876:	00010517          	auipc	a0,0x10
    8002b87a:	dda50513          	addi	a0,a0,-550 # 8003b650 <__func__.0+0xb960>
    8002b87e:	00f010ef          	jal	8002d08c <printf>
    CSRS(mip, 1ULL << 1);
    8002b882:	34416073          	csrsi	mip,2

    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断,执行mnret返回",      //要修改xtvec_test_asm.S中的返回指令
    8002b886:	08200593          	li	a1,130
    8002b88a:	00010617          	auipc	a2,0x10
    8002b88e:	32e60613          	addi	a2,a2,814 # 8003bbb8 <__func__.0+0xbec8>
    8002b892:	00004517          	auipc	a0,0x4
    8002b896:	75e50513          	addi	a0,a0,1886 # 8002fff0 <__func__.0+0x300>
    8002b89a:	7f2010ef          	jal	8002d08c <printf>
    8002b89e:	0002c797          	auipc	a5,0x2c
    8002b8a2:	7737c783          	lbu	a5,1907(a5) # 80058011 <excpt+0x1>
    8002b8a6:	00004597          	auipc	a1,0x4
    8002b8aa:	71258593          	addi	a1,a1,1810 # 8002ffb8 <__func__.0+0x2c8>
    8002b8ae:	e789                	bnez	a5,8002b8b8 <mnret_test_1+0xbe>
    8002b8b0:	00004597          	auipc	a1,0x4
    8002b8b4:	71858593          	addi	a1,a1,1816 # 8002ffc8 <__func__.0+0x2d8>
    8002b8b8:	00004517          	auipc	a0,0x4
    8002b8bc:	75050513          	addi	a0,a0,1872 # 80030008 <__func__.0+0x318>
    8002b8c0:	7cc010ef          	jal	8002d08c <printf>
    8002b8c4:	0002c797          	auipc	a5,0x2c
    8002b8c8:	74d7c783          	lbu	a5,1869(a5) # 80058011 <excpt+0x1>
    8002b8cc:	c799                	beqz	a5,8002b8da <mnret_test_1+0xe0>
    8002b8ce:	4529                	li	a0,10
    8002b8d0:	4aa000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
}
    8002b8d4:	60a2                	ld	ra,8(sp)
    8002b8d6:	0141                	addi	sp,sp,16
    8002b8d8:	8082                	ret
    TEST_ASSERT("m模式下,mtvec.mode=vectored.未开启中断代理,产生2号软件中断,执行mnret返回",      //要修改xtvec_test_asm.S中的返回指令
    8002b8da:	00004517          	auipc	a0,0x4
    8002b8de:	73650513          	addi	a0,a0,1846 # 80030010 <__func__.0+0x320>
    8002b8e2:	7aa010ef          	jal	8002d08c <printf>
    8002b8e6:	02900513          	li	a0,41
    8002b8ea:	490000ef          	jal	8002bd7a <putchar>
    8002b8ee:	4529                	li	a0,10
    8002b8f0:	48a000ef          	jal	8002bd7a <putchar>
}
    8002b8f4:	60a2                	ld	ra,8(sp)
    8002b8f6:	0141                	addi	sp,sp,16
    8002b8f8:	8082                	ret

000000008002b8fa <mnret_test_2>:

bool mnret_test_2() {
    8002b8fa:	1141                	addi	sp,sp,-16
    //m模式下，当mtve.mode=vectored，mstatus.MDT=1,mnstatus.NMIE=1时，产生异常
    TEST_START();
    8002b8fc:	00004597          	auipc	a1,0x4
    8002b900:	3c458593          	addi	a1,a1,964 # 8002fcc0 <__func__.3>
    8002b904:	00004517          	auipc	a0,0x4
    8002b908:	6d450513          	addi	a0,a0,1748 # 8002ffd8 <__func__.0+0x2e8>
bool mnret_test_2() {
    8002b90c:	e406                	sd	ra,8(sp)
    TEST_START();
    8002b90e:	77e010ef          	jal	8002d08c <printf>
    8002b912:	4529                	li	a0,10
    8002b914:	466000ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8002b918:	4511                	li	a0,4
    8002b91a:	deed50ef          	jal	80000f08 <goto_priv>

    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002b91e:	300025f3          	csrr	a1,mstatus
    8002b922:	00010517          	auipc	a0,0x10
    8002b926:	d0e50513          	addi	a0,a0,-754 # 8003b630 <__func__.0+0xb940>
    8002b92a:	762010ef          	jal	8002d08c <printf>

    CSRS(mie, 1ULL << 1);
    8002b92e:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002b932:	00002797          	auipc	a5,0x2
    8002b936:	00a78793          	addi	a5,a5,10 # 8002d93c <vs_test_entry>
    8002b93a:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002b93e:	00002797          	auipc	a5,0x2
    8002b942:	d7678793          	addi	a5,a5,-650 # 8002d6b4 <hs_test_entry>
    8002b946:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002b94a:	00002797          	auipc	a5,0x2
    8002b94e:	ae278793          	addi	a5,a5,-1310 # 8002d42c <m_test_entry>
    8002b952:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002b956:	3050e073          	csrsi	mtvec,1
    CSRS(CSR_MSTATUS , 1ULL << 42); 
    8002b95a:	4785                	li	a5,1
    8002b95c:	17aa                	slli	a5,a5,0x2a
    8002b95e:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MNSTATUS , 1ULL << 3);
    8002b962:	74446073          	csrsi	0x744,8


    printf("mstatus=%llx \n",CSRR(CSR_MSTATUS));
    8002b966:	300025f3          	csrr	a1,mstatus
    8002b96a:	00010517          	auipc	a0,0x10
    8002b96e:	2ae50513          	addi	a0,a0,686 # 8003bc18 <__func__.0+0xbf28>
    8002b972:	71a010ef          	jal	8002d08c <printf>
    printf("mnstatus=%llx \n",CSRR(CSR_MNSTATUS));
    8002b976:	744025f3          	csrr	a1,0x744
    8002b97a:	00010517          	auipc	a0,0x10
    8002b97e:	2ae50513          	addi	a0,a0,686 # 8003bc28 <__func__.0+0xbf38>
    8002b982:	70a010ef          	jal	8002d08c <printf>

    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002b986:	305025f3          	csrr	a1,mtvec
    8002b98a:	00010517          	auipc	a0,0x10
    8002b98e:	cb650513          	addi	a0,a0,-842 # 8003b640 <__func__.0+0xb950>
    8002b992:	6fa010ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002b996:	c76d50ef          	jal	80000e0c <test_setup_except_function>
    printf("入口：");
    8002b99a:	00010517          	auipc	a0,0x10
    8002b99e:	cb650513          	addi	a0,a0,-842 # 8003b650 <__func__.0+0xb960>
    8002b9a2:	6ea010ef          	jal	8002d08c <printf>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8002b9a6:	6785                	lui	a5,0x1
    8002b9a8:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8002b9aa:	f1579073          	csrw	0xf15,a5
    excpt_info();
    8002b9ae:	ea0d50ef          	jal	8000104e <excpt_info>
    TEST_ASSERT("m模式下,mtvec.mode=vectored,mstatus.MDT=1,mnstatus.NMIE=1时产生异常",      
    8002b9b2:	08200593          	li	a1,130
    8002b9b6:	00010617          	auipc	a2,0x10
    8002b9ba:	28260613          	addi	a2,a2,642 # 8003bc38 <__func__.0+0xbf48>
    8002b9be:	00004517          	auipc	a0,0x4
    8002b9c2:	63250513          	addi	a0,a0,1586 # 8002fff0 <__func__.0+0x300>
    8002b9c6:	6c6010ef          	jal	8002d08c <printf>
    8002b9ca:	0002c797          	auipc	a5,0x2c
    8002b9ce:	6477c783          	lbu	a5,1607(a5) # 80058011 <excpt+0x1>
    8002b9d2:	00004597          	auipc	a1,0x4
    8002b9d6:	5e658593          	addi	a1,a1,1510 # 8002ffb8 <__func__.0+0x2c8>
    8002b9da:	e789                	bnez	a5,8002b9e4 <mnret_test_2+0xea>
    8002b9dc:	00004597          	auipc	a1,0x4
    8002b9e0:	5ec58593          	addi	a1,a1,1516 # 8002ffc8 <__func__.0+0x2d8>
    8002b9e4:	00004517          	auipc	a0,0x4
    8002b9e8:	62450513          	addi	a0,a0,1572 # 80030008 <__func__.0+0x318>
    8002b9ec:	6a0010ef          	jal	8002d08c <printf>
    8002b9f0:	0002c797          	auipc	a5,0x2c
    8002b9f4:	6217c783          	lbu	a5,1569(a5) # 80058011 <excpt+0x1>
    8002b9f8:	c799                	beqz	a5,8002ba06 <mnret_test_2+0x10c>
    8002b9fa:	4529                	li	a0,10
    8002b9fc:	37e000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
}
    8002ba00:	60a2                	ld	ra,8(sp)
    8002ba02:	0141                	addi	sp,sp,16
    8002ba04:	8082                	ret
    TEST_ASSERT("m模式下,mtvec.mode=vectored,mstatus.MDT=1,mnstatus.NMIE=1时产生异常",      
    8002ba06:	00004517          	auipc	a0,0x4
    8002ba0a:	60a50513          	addi	a0,a0,1546 # 80030010 <__func__.0+0x320>
    8002ba0e:	67e010ef          	jal	8002d08c <printf>
    8002ba12:	02900513          	li	a0,41
    8002ba16:	364000ef          	jal	8002bd7a <putchar>
    8002ba1a:	4529                	li	a0,10
    8002ba1c:	35e000ef          	jal	8002bd7a <putchar>
}
    8002ba20:	60a2                	ld	ra,8(sp)
    8002ba22:	0141                	addi	sp,sp,16
    8002ba24:	8082                	ret

000000008002ba26 <m_double_trap_1>:

bool m_double_trap_1() {
    8002ba26:	1141                	addi	sp,sp,-16

    //m模式下，当mtve.mode=vectored，未开启中断代理，发生2号软件中断,产生double trap  
    TEST_START();
    8002ba28:	00004597          	auipc	a1,0x4
    8002ba2c:	2a858593          	addi	a1,a1,680 # 8002fcd0 <__func__.2>
    8002ba30:	00004517          	auipc	a0,0x4
    8002ba34:	5a850513          	addi	a0,a0,1448 # 8002ffd8 <__func__.0+0x2e8>
bool m_double_trap_1() {
    8002ba38:	e406                	sd	ra,8(sp)
    TEST_START();
    8002ba3a:	652010ef          	jal	8002d08c <printf>
    8002ba3e:	4529                	li	a0,10
    8002ba40:	33a000ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8002ba44:	4511                	li	a0,4
    8002ba46:	cc2d50ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,(1ULL << 3));
    8002ba4a:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,(1ULL << 1));
    8002ba4e:	30016073          	csrsi	mstatus,2

    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002ba52:	300025f3          	csrr	a1,mstatus
    8002ba56:	00010517          	auipc	a0,0x10
    8002ba5a:	bda50513          	addi	a0,a0,-1062 # 8003b630 <__func__.0+0xb940>
    8002ba5e:	62e010ef          	jal	8002d08c <printf>

    CSRS(mie, 1ULL << 1);
    8002ba62:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002ba66:	00002797          	auipc	a5,0x2
    8002ba6a:	ed678793          	addi	a5,a5,-298 # 8002d93c <vs_test_entry>
    8002ba6e:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002ba72:	00002797          	auipc	a5,0x2
    8002ba76:	c4278793          	addi	a5,a5,-958 # 8002d6b4 <hs_test_entry>
    8002ba7a:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002ba7e:	00002797          	auipc	a5,0x2
    8002ba82:	9ae78793          	addi	a5,a5,-1618 # 8002d42c <m_test_entry>
    8002ba86:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002ba8a:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002ba8e:	305025f3          	csrr	a1,mtvec
    8002ba92:	00010517          	auipc	a0,0x10
    8002ba96:	bae50513          	addi	a0,a0,-1106 # 8003b640 <__func__.0+0xb950>
    8002ba9a:	5f2010ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002ba9e:	b6ed50ef          	jal	80000e0c <test_setup_except_function>
    printf("入口：");
    8002baa2:	00010517          	auipc	a0,0x10
    8002baa6:	bae50513          	addi	a0,a0,-1106 # 8003b650 <__func__.0+0xb960>
    8002baaa:	5e2010ef          	jal	8002d08c <printf>
    trap = 2;
    8002baae:	4789                	li	a5,2
    8002bab0:	00012717          	auipc	a4,0x12
    8002bab4:	38f72423          	sw	a5,904(a4) # 8003de38 <trap>
    CSRS(mip, 1ULL << 1);
    8002bab8:	3447a073          	csrs	mip,a5

    TEST_ASSERT("m模式下,mtve.mode=vectored.未开启中断代理,产生2号软件中断处理过程中产生一个非法非法指令异常",
    8002babc:	08200593          	li	a1,130
    8002bac0:	00010617          	auipc	a2,0x10
    8002bac4:	1c860613          	addi	a2,a2,456 # 8003bc88 <__func__.0+0xbf98>
    8002bac8:	00004517          	auipc	a0,0x4
    8002bacc:	52850513          	addi	a0,a0,1320 # 8002fff0 <__func__.0+0x300>
    8002bad0:	5bc010ef          	jal	8002d08c <printf>
    8002bad4:	0002c797          	auipc	a5,0x2c
    8002bad8:	53d7c783          	lbu	a5,1341(a5) # 80058011 <excpt+0x1>
    8002badc:	00004597          	auipc	a1,0x4
    8002bae0:	4dc58593          	addi	a1,a1,1244 # 8002ffb8 <__func__.0+0x2c8>
    8002bae4:	e789                	bnez	a5,8002baee <m_double_trap_1+0xc8>
    8002bae6:	00004597          	auipc	a1,0x4
    8002baea:	4e258593          	addi	a1,a1,1250 # 8002ffc8 <__func__.0+0x2d8>
    8002baee:	00004517          	auipc	a0,0x4
    8002baf2:	51a50513          	addi	a0,a0,1306 # 80030008 <__func__.0+0x318>
    8002baf6:	596010ef          	jal	8002d08c <printf>
    8002bafa:	0002c797          	auipc	a5,0x2c
    8002bafe:	5177c783          	lbu	a5,1303(a5) # 80058011 <excpt+0x1>
    8002bb02:	c799                	beqz	a5,8002bb10 <m_double_trap_1+0xea>
    8002bb04:	4529                	li	a0,10
    8002bb06:	274000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
}
    8002bb0a:	60a2                	ld	ra,8(sp)
    8002bb0c:	0141                	addi	sp,sp,16
    8002bb0e:	8082                	ret
    TEST_ASSERT("m模式下,mtve.mode=vectored.未开启中断代理,产生2号软件中断处理过程中产生一个非法非法指令异常",
    8002bb10:	00004517          	auipc	a0,0x4
    8002bb14:	50050513          	addi	a0,a0,1280 # 80030010 <__func__.0+0x320>
    8002bb18:	574010ef          	jal	8002d08c <printf>
    8002bb1c:	02900513          	li	a0,41
    8002bb20:	25a000ef          	jal	8002bd7a <putchar>
    8002bb24:	4529                	li	a0,10
    8002bb26:	254000ef          	jal	8002bd7a <putchar>
}
    8002bb2a:	60a2                	ld	ra,8(sp)
    8002bb2c:	0141                	addi	sp,sp,16
    8002bb2e:	8082                	ret

000000008002bb30 <m_double_trap_2>:

bool m_double_trap_2() {    
    8002bb30:	1141                	addi	sp,sp,-16

    TEST_START();
    8002bb32:	00004597          	auipc	a1,0x4
    8002bb36:	1ae58593          	addi	a1,a1,430 # 8002fce0 <__func__.1>
    8002bb3a:	00004517          	auipc	a0,0x4
    8002bb3e:	49e50513          	addi	a0,a0,1182 # 8002ffd8 <__func__.0+0x2e8>
bool m_double_trap_2() {    
    8002bb42:	e406                	sd	ra,8(sp)
    TEST_START();
    8002bb44:	548010ef          	jal	8002d08c <printf>
    8002bb48:	4529                	li	a0,10
    8002bb4a:	230000ef          	jal	8002bd7a <putchar>

    //HS模式下，当mtve.mode=vectored，未开启中断代理，发生中断后发生double trap  

    goto_priv(PRIV_M);
    8002bb4e:	4511                	li	a0,4
    8002bb50:	bb8d50ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002bb54:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002bb58:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002bb5c:	10016073          	csrsi	sstatus,2
    CSRC(CSR_MIDELEG,1ULL << 1);
    8002bb60:	30317073          	csrci	mideleg,2
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002bb64:	300025f3          	csrr	a1,mstatus
    8002bb68:	00010517          	auipc	a0,0x10
    8002bb6c:	ac850513          	addi	a0,a0,-1336 # 8003b630 <__func__.0+0xb940>
    8002bb70:	51c010ef          	jal	8002d08c <printf>

    CSRS(mie, 1ULL << 1);
    8002bb74:	30416073          	csrsi	mie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002bb78:	00002797          	auipc	a5,0x2
    8002bb7c:	dc478793          	addi	a5,a5,-572 # 8002d93c <vs_test_entry>
    8002bb80:	20579073          	csrw	vstvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002bb84:	00002797          	auipc	a5,0x2
    8002bb88:	b3078793          	addi	a5,a5,-1232 # 8002d6b4 <hs_test_entry>
    8002bb8c:	10579073          	csrw	stvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002bb90:	00002797          	auipc	a5,0x2
    8002bb94:	89c78793          	addi	a5,a5,-1892 # 8002d42c <m_test_entry>
    8002bb98:	30579073          	csrw	mtvec,a5
    CSRS(CSR_MTVEC , 1ULL << 0);
    8002bb9c:	3050e073          	csrsi	mtvec,1
    printf("mtvec=%llx \n",CSRR(CSR_MTVEC));
    8002bba0:	305025f3          	csrr	a1,mtvec
    8002bba4:	00010517          	auipc	a0,0x10
    8002bba8:	a9c50513          	addi	a0,a0,-1380 # 8003b640 <__func__.0+0xb950>
    8002bbac:	4e0010ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002bbb0:	a5cd50ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_HS);
    8002bbb4:	450d                	li	a0,3
    8002bbb6:	b52d50ef          	jal	80000f08 <goto_priv>
    printf("入口：");
    8002bbba:	00010517          	auipc	a0,0x10
    8002bbbe:	a9650513          	addi	a0,a0,-1386 # 8003b650 <__func__.0+0xb960>
    8002bbc2:	4ca010ef          	jal	8002d08c <printf>
    trap = 2;
    8002bbc6:	4789                	li	a5,2
    8002bbc8:	00012717          	auipc	a4,0x12
    8002bbcc:	26f72823          	sw	a5,624(a4) # 8003de38 <trap>
    
    CSRS(sip, 1ULL << 1);
    8002bbd0:	1447a073          	csrs	sip,a5
    
    TEST_ASSERT("HS模式下,mtve.mode=vectored,未开启中断代理,产生2号软件中断,发生double trap",
    8002bbd4:	08200593          	li	a1,130
    8002bbd8:	00010617          	auipc	a2,0x10
    8002bbdc:	13060613          	addi	a2,a2,304 # 8003bd08 <__func__.0+0xc018>
    8002bbe0:	00004517          	auipc	a0,0x4
    8002bbe4:	41050513          	addi	a0,a0,1040 # 8002fff0 <__func__.0+0x300>
    8002bbe8:	4a4010ef          	jal	8002d08c <printf>
    8002bbec:	0002c797          	auipc	a5,0x2c
    8002bbf0:	4257c783          	lbu	a5,1061(a5) # 80058011 <excpt+0x1>
    8002bbf4:	00004597          	auipc	a1,0x4
    8002bbf8:	3c458593          	addi	a1,a1,964 # 8002ffb8 <__func__.0+0x2c8>
    8002bbfc:	e789                	bnez	a5,8002bc06 <m_double_trap_2+0xd6>
    8002bbfe:	00004597          	auipc	a1,0x4
    8002bc02:	3ca58593          	addi	a1,a1,970 # 8002ffc8 <__func__.0+0x2d8>
    8002bc06:	00004517          	auipc	a0,0x4
    8002bc0a:	40250513          	addi	a0,a0,1026 # 80030008 <__func__.0+0x318>
    8002bc0e:	47e010ef          	jal	8002d08c <printf>
    8002bc12:	0002c797          	auipc	a5,0x2c
    8002bc16:	3ff7c783          	lbu	a5,1023(a5) # 80058011 <excpt+0x1>
    8002bc1a:	c799                	beqz	a5,8002bc28 <m_double_trap_2+0xf8>
    8002bc1c:	4529                	li	a0,10
    8002bc1e:	15c000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
}
    8002bc22:	60a2                	ld	ra,8(sp)
    8002bc24:	0141                	addi	sp,sp,16
    8002bc26:	8082                	ret
    TEST_ASSERT("HS模式下,mtve.mode=vectored,未开启中断代理,产生2号软件中断,发生double trap",
    8002bc28:	00004517          	auipc	a0,0x4
    8002bc2c:	3e850513          	addi	a0,a0,1000 # 80030010 <__func__.0+0x320>
    8002bc30:	45c010ef          	jal	8002d08c <printf>
    8002bc34:	02900513          	li	a0,41
    8002bc38:	142000ef          	jal	8002bd7a <putchar>
    8002bc3c:	4529                	li	a0,10
    8002bc3e:	13c000ef          	jal	8002bd7a <putchar>
}
    8002bc42:	60a2                	ld	ra,8(sp)
    8002bc44:	0141                	addi	sp,sp,16
    8002bc46:	8082                	ret

000000008002bc48 <hs_double_trap_1>:





bool hs_double_trap_1() {
    8002bc48:	1141                	addi	sp,sp,-16

    //hs模式下，开启了mideleg中断代理，关闭了hideleg中断代理，发生2号软件中断,发生double trap  
    TEST_START();
    8002bc4a:	00004597          	auipc	a1,0x4
    8002bc4e:	0a658593          	addi	a1,a1,166 # 8002fcf0 <__func__.0>
    8002bc52:	00004517          	auipc	a0,0x4
    8002bc56:	38650513          	addi	a0,a0,902 # 8002ffd8 <__func__.0+0x2e8>
bool hs_double_trap_1() {
    8002bc5a:	e406                	sd	ra,8(sp)
    TEST_START();
    8002bc5c:	430010ef          	jal	8002d08c <printf>
    8002bc60:	4529                	li	a0,10
    8002bc62:	118000ef          	jal	8002bd7a <putchar>

    goto_priv(PRIV_M);
    8002bc66:	4511                	li	a0,4
    8002bc68:	aa0d50ef          	jal	80000f08 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);
    8002bc6c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MSTATUS,1ULL << 1);
    8002bc70:	30016073          	csrsi	mstatus,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002bc74:	10016073          	csrsi	sstatus,2
    CSRS(CSR_MIDELEG,1ULL << 1);
    8002bc78:	30316073          	csrsi	mideleg,2
    CSRS(CSR_HIDELEG,1ULL << 1);
    8002bc7c:	60316073          	csrsi	hideleg,2
    CSRS(CSR_SSTATUS,1ULL << 1);
    8002bc80:	10016073          	csrsi	sstatus,2
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    8002bc84:	300025f3          	csrr	a1,mstatus
    8002bc88:	00010517          	auipc	a0,0x10
    8002bc8c:	9a850513          	addi	a0,a0,-1624 # 8003b630 <__func__.0+0xb940>
    8002bc90:	3fc010ef          	jal	8002d08c <printf>

    CSRS(mie, 1ULL << 1);
    8002bc94:	30416073          	csrsi	mie,2
    CSRS(sie, 1ULL << 1);
    8002bc98:	10416073          	csrsi	sie,2

    CSRW(CSR_VSTVEC,vs_test_entry);
    8002bc9c:	00002797          	auipc	a5,0x2
    8002bca0:	ca078793          	addi	a5,a5,-864 # 8002d93c <vs_test_entry>
    8002bca4:	20579073          	csrw	vstvec,a5
    CSRW(CSR_MTVEC,m_test_entry);
    8002bca8:	00001797          	auipc	a5,0x1
    8002bcac:	78478793          	addi	a5,a5,1924 # 8002d42c <m_test_entry>
    8002bcb0:	30579073          	csrw	mtvec,a5
    CSRW(CSR_STVEC,hs_test_entry);
    8002bcb4:	00002797          	auipc	a5,0x2
    8002bcb8:	a0078793          	addi	a5,a5,-1536 # 8002d6b4 <hs_test_entry>
    8002bcbc:	10579073          	csrw	stvec,a5
    CSRS(CSR_STVEC , 1ULL << 0);
    8002bcc0:	1050e073          	csrsi	stvec,1
    printf("stvec=%llx \n",CSRR(CSR_STVEC));
    8002bcc4:	105025f3          	csrr	a1,stvec
    8002bcc8:	00010517          	auipc	a0,0x10
    8002bccc:	bb050513          	addi	a0,a0,-1104 # 8003b878 <__func__.0+0xbb88>
    8002bcd0:	3bc010ef          	jal	8002d08c <printf>

    TEST_SETUP_EXCEPT();
    8002bcd4:	938d50ef          	jal	80000e0c <test_setup_except_function>
    goto_priv(PRIV_HS);
    8002bcd8:	450d                	li	a0,3
    8002bcda:	a2ed50ef          	jal	80000f08 <goto_priv>
    printf("入口：");
    8002bcde:	00010517          	auipc	a0,0x10
    8002bce2:	97250513          	addi	a0,a0,-1678 # 8003b650 <__func__.0+0xb960>
    8002bce6:	3a6010ef          	jal	8002d08c <printf>
    trap = 2;
    8002bcea:	4789                	li	a5,2
    8002bcec:	00012717          	auipc	a4,0x12
    8002bcf0:	14f72623          	sw	a5,332(a4) # 8003de38 <trap>
    CSRS(sip, 1ULL << 1);
    8002bcf4:	1447a073          	csrs	sip,a5
    
    TEST_ASSERT("HS模式下,mtve.mode=vectored,mideleg=1,hideleg=0,产生2号软件中断,发生double trap",
    8002bcf8:	08200593          	li	a1,130
    8002bcfc:	00010617          	auipc	a2,0x10
    8002bd00:	06c60613          	addi	a2,a2,108 # 8003bd68 <__func__.0+0xc078>
    8002bd04:	00004517          	auipc	a0,0x4
    8002bd08:	2ec50513          	addi	a0,a0,748 # 8002fff0 <__func__.0+0x300>
    8002bd0c:	380010ef          	jal	8002d08c <printf>
    8002bd10:	0002c797          	auipc	a5,0x2c
    8002bd14:	3017c783          	lbu	a5,769(a5) # 80058011 <excpt+0x1>
    8002bd18:	00004597          	auipc	a1,0x4
    8002bd1c:	2a058593          	addi	a1,a1,672 # 8002ffb8 <__func__.0+0x2c8>
    8002bd20:	e789                	bnez	a5,8002bd2a <hs_double_trap_1+0xe2>
    8002bd22:	00004597          	auipc	a1,0x4
    8002bd26:	2a658593          	addi	a1,a1,678 # 8002ffc8 <__func__.0+0x2d8>
    8002bd2a:	00004517          	auipc	a0,0x4
    8002bd2e:	2de50513          	addi	a0,a0,734 # 80030008 <__func__.0+0x318>
    8002bd32:	35a010ef          	jal	8002d08c <printf>
    8002bd36:	0002c797          	auipc	a5,0x2c
    8002bd3a:	2db7c783          	lbu	a5,731(a5) # 80058011 <excpt+0x1>
    8002bd3e:	c799                	beqz	a5,8002bd4c <hs_double_trap_1+0x104>
    8002bd40:	4529                	li	a0,10
    8002bd42:	038000ef          	jal	8002bd7a <putchar>
        excpt.triggered == true 
    ); 
    8002bd46:	60a2                	ld	ra,8(sp)
    8002bd48:	0141                	addi	sp,sp,16
    8002bd4a:	8082                	ret
    TEST_ASSERT("HS模式下,mtve.mode=vectored,mideleg=1,hideleg=0,产生2号软件中断,发生double trap",
    8002bd4c:	00004517          	auipc	a0,0x4
    8002bd50:	2c450513          	addi	a0,a0,708 # 80030010 <__func__.0+0x320>
    8002bd54:	338010ef          	jal	8002d08c <printf>
    8002bd58:	02900513          	li	a0,41
    8002bd5c:	01e000ef          	jal	8002bd7a <putchar>
    8002bd60:	4529                	li	a0,10
    8002bd62:	018000ef          	jal	8002bd7a <putchar>
    8002bd66:	60a2                	ld	ra,8(sp)
    8002bd68:	0141                	addi	sp,sp,16
    8002bd6a:	8082                	ret

000000008002bd6c <sprintf_putch.0>:
  va_start(ap, fmt);

  void sprintf_putch(int ch, void** data)
  {
    char** pstr = (char**)data;
    **pstr = ch;
    8002bd6c:	619c                	ld	a5,0(a1)
    8002bd6e:	00a78023          	sb	a0,0(a5)
    (*pstr)++;
    8002bd72:	619c                	ld	a5,0(a1)
    8002bd74:	0785                	addi	a5,a5,1
    8002bd76:	e19c                	sd	a5,0(a1)
  }
    8002bd78:	8082                	ret

000000008002bd7a <putchar>:
  buf[buflen++] = ch;
    8002bd7a:	0002c797          	auipc	a5,0x2c
    8002bd7e:	35a7a783          	lw	a5,858(a5) # 800580d4 <buflen.2>
    8002bd82:	0002c697          	auipc	a3,0x2c
    8002bd86:	2fe68693          	addi	a3,a3,766 # 80058080 <buf.1>
{
    8002bd8a:	7159                	addi	sp,sp,-112
  buf[buflen++] = ch;
    8002bd8c:	00f68733          	add	a4,a3,a5
    8002bd90:	2785                	addiw	a5,a5,1
    8002bd92:	00a70023          	sb	a0,0(a4)
    8002bd96:	0002c717          	auipc	a4,0x2c
    8002bd9a:	32f72f23          	sw	a5,830(a4) # 800580d4 <buflen.2>
{
    8002bd9e:	03f10713          	addi	a4,sp,63
  if (ch == '\n' || buflen == sizeof(buf))
    8002bda2:	4629                	li	a2,10
{
    8002bda4:	fc077713          	andi	a4,a4,-64
  if (ch == '\n' || buflen == sizeof(buf))
    8002bda8:	00c50963          	beq	a0,a2,8002bdba <putchar+0x40>
    8002bdac:	04000613          	li	a2,64
    8002bdb0:	00c78563          	beq	a5,a2,8002bdba <putchar+0x40>
}
    8002bdb4:	4501                	li	a0,0
    8002bdb6:	6165                	addi	sp,sp,112
    8002bdb8:	8082                	ret
  magic_mem[0] = which;
    8002bdba:	04000613          	li	a2,64
    8002bdbe:	e310                	sd	a2,0(a4)
  magic_mem[1] = arg0;
    8002bdc0:	4605                	li	a2,1
    8002bdc2:	e710                	sd	a2,8(a4)
  magic_mem[2] = arg1;
    8002bdc4:	eb14                	sd	a3,16(a4)
  magic_mem[3] = arg2;
    8002bdc6:	ef1c                	sd	a5,24(a4)
  __sync_synchronize();
    8002bdc8:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002bdcc:	00012697          	auipc	a3,0x12
    8002bdd0:	27468693          	addi	a3,a3,628 # 8003e040 <fromhost>
    8002bdd4:	00012797          	auipc	a5,0x12
    8002bdd8:	22e7b623          	sd	a4,556(a5) # 8003e000 <tohost>
  while (fromhost == 0)
    8002bddc:	629c                	ld	a5,0(a3)
    8002bdde:	dffd                	beqz	a5,8002bddc <putchar+0x62>
  fromhost = 0;
    8002bde0:	00012797          	auipc	a5,0x12
    8002bde4:	2607b023          	sd	zero,608(a5) # 8003e040 <fromhost>
  __sync_synchronize();
    8002bde8:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002bdec:	631c                	ld	a5,0(a4)
}
    8002bdee:	4501                	li	a0,0
    buflen = 0;
    8002bdf0:	0002c797          	auipc	a5,0x2c
    8002bdf4:	2e07a223          	sw	zero,740(a5) # 800580d4 <buflen.2>
}
    8002bdf8:	6165                	addi	sp,sp,112
    8002bdfa:	8082                	ret

000000008002bdfc <vprintfmt.constprop.0>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    8002bdfc:	716d                	addi	sp,sp,-272
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002bdfe:	02500313          	li	t1,37
    switch (ch = *(unsigned char *) fmt++) {
    8002be02:	05500e93          	li	t4,85
    8002be06:	00004e17          	auipc	t3,0x4
    8002be0a:	efee0e13          	addi	t3,t3,-258 # 8002fd04 <__func__.0+0x14>
    8002be0e:	a809                	j	8002be20 <vprintfmt.constprop.0+0x24>
      if (ch == '\0')
    8002be10:	c729                	beqz	a4,8002be5a <vprintfmt.constprop.0+0x5e>
    **pstr = ch;
    8002be12:	6118                	ld	a4,0(a0)
      fmt++;
    8002be14:	0585                	addi	a1,a1,1
    **pstr = ch;
    8002be16:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    8002be1a:	611c                	ld	a5,0(a0)
    8002be1c:	0785                	addi	a5,a5,1
    8002be1e:	e11c                	sd	a5,0(a0)
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002be20:	0005c783          	lbu	a5,0(a1)
    8002be24:	0007871b          	sext.w	a4,a5
    8002be28:	fe6794e3          	bne	a5,t1,8002be10 <vprintfmt.constprop.0+0x14>
    switch (ch = *(unsigned char *) fmt++) {
    8002be2c:	0015c803          	lbu	a6,1(a1)
    fmt++;
    8002be30:	00158893          	addi	a7,a1,1
    precision = -1;
    8002be34:	577d                	li	a4,-1
    fmt++;
    8002be36:	86c6                	mv	a3,a7
    width = -1;
    8002be38:	8fba                	mv	t6,a4
    padc = ' ';
    8002be3a:	02000293          	li	t0,32
    lflag = 0;
    8002be3e:	4f01                	li	t5,0
    switch (ch = *(unsigned char *) fmt++) {
    8002be40:	fdd8079b          	addiw	a5,a6,-35
    8002be44:	0ff7f793          	zext.b	a5,a5
    8002be48:	00168593          	addi	a1,a3,1
    8002be4c:	02fee563          	bltu	t4,a5,8002be76 <vprintfmt.constprop.0+0x7a>
    8002be50:	078a                	slli	a5,a5,0x2
    8002be52:	97f2                	add	a5,a5,t3
    8002be54:	439c                	lw	a5,0(a5)
    8002be56:	97f2                	add	a5,a5,t3
    8002be58:	8782                	jr	a5
}
    8002be5a:	6151                	addi	sp,sp,272
    8002be5c:	8082                	ret
      padc = '0';
    8002be5e:	82c2                	mv	t0,a6
      goto reswitch;
    8002be60:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    8002be64:	86ae                	mv	a3,a1
    8002be66:	00168593          	addi	a1,a3,1
    8002be6a:	fdd8079b          	addiw	a5,a6,-35
    8002be6e:	0ff7f793          	zext.b	a5,a5
    8002be72:	fcfeffe3          	bgeu	t4,a5,8002be50 <vprintfmt.constprop.0+0x54>
    **pstr = ch;
    8002be76:	611c                	ld	a5,0(a0)
    8002be78:	02500713          	li	a4,37
      fmt = last_fmt;
    8002be7c:	85c6                	mv	a1,a7
    **pstr = ch;
    8002be7e:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002be82:	611c                	ld	a5,0(a0)
    8002be84:	0785                	addi	a5,a5,1
    8002be86:	e11c                	sd	a5,0(a0)
  }
    8002be88:	bf61                	j	8002be20 <vprintfmt.constprop.0+0x24>
    8002be8a:	e622                	sd	s0,264(sp)
        precision = precision * 10 + ch - '0';
    8002be8c:	fd08071b          	addiw	a4,a6,-48
        ch = *fmt;
    8002be90:	0016c803          	lbu	a6,1(a3)
        if (ch < '0' || ch > '9')
    8002be94:	4425                	li	s0,9
    switch (ch = *(unsigned char *) fmt++) {
    8002be96:	86ae                	mv	a3,a1
        if (ch < '0' || ch > '9')
    8002be98:	fd08079b          	addiw	a5,a6,-48
        ch = *fmt;
    8002be9c:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    8002bea0:	02f46463          	bltu	s0,a5,8002bec8 <vprintfmt.constprop.0+0xcc>
        precision = precision * 10 + ch - '0';
    8002bea4:	0027179b          	slliw	a5,a4,0x2
        ch = *fmt;
    8002bea8:	0016c803          	lbu	a6,1(a3)
        precision = precision * 10 + ch - '0';
    8002beac:	9fb9                	addw	a5,a5,a4
    8002beae:	0017979b          	slliw	a5,a5,0x1
    8002beb2:	007787bb          	addw	a5,a5,t2
        if (ch < '0' || ch > '9')
    8002beb6:	fd08059b          	addiw	a1,a6,-48
      for (precision = 0; ; ++fmt) {
    8002beba:	0685                	addi	a3,a3,1
        precision = precision * 10 + ch - '0';
    8002bebc:	fd07871b          	addiw	a4,a5,-48
        ch = *fmt;
    8002bec0:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    8002bec4:	feb470e3          	bgeu	s0,a1,8002bea4 <vprintfmt.constprop.0+0xa8>
    switch (ch = *(unsigned char *) fmt++) {
    8002bec8:	6432                	ld	s0,264(sp)
      if (width < 0)
    8002beca:	f60fdbe3          	bgez	t6,8002be40 <vprintfmt.constprop.0+0x44>
        width = precision, precision = -1;
    8002bece:	8fba                	mv	t6,a4
    8002bed0:	577d                	li	a4,-1
    8002bed2:	b7bd                	j	8002be40 <vprintfmt.constprop.0+0x44>
        ch = *fmt;
    8002bed4:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    8002bed8:	86ae                	mv	a3,a1
      goto reswitch;
    8002beda:	b79d                	j	8002be40 <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    8002bedc:	611c                	ld	a5,0(a0)
    8002bede:	02500713          	li	a4,37
    8002bee2:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002bee6:	611c                	ld	a5,0(a0)
    8002bee8:	0785                	addi	a5,a5,1
    8002beea:	e11c                	sd	a5,0(a0)
  }
    8002beec:	bf15                	j	8002be20 <vprintfmt.constprop.0+0x24>
        ch = *fmt;
    8002beee:	0016c803          	lbu	a6,1(a3)
      precision = va_arg(ap, int);
    8002bef2:	4218                	lw	a4,0(a2)
    switch (ch = *(unsigned char *) fmt++) {
    8002bef4:	86ae                	mv	a3,a1
      precision = va_arg(ap, int);
    8002bef6:	0621                	addi	a2,a2,8
      goto process_precision;
    8002bef8:	bfc9                	j	8002beca <vprintfmt.constprop.0+0xce>
    **pstr = ch;
    8002befa:	611c                	ld	a5,0(a0)
    8002befc:	03000693          	li	a3,48
    8002bf00:	07800713          	li	a4,120
    8002bf04:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    8002bf08:	611c                	ld	a5,0(a0)
    8002bf0a:	4841                	li	a6,16
    8002bf0c:	00860693          	addi	a3,a2,8
    8002bf10:	00178893          	addi	a7,a5,1
    8002bf14:	01153023          	sd	a7,0(a0)
    **pstr = ch;
    8002bf18:	00e780a3          	sb	a4,1(a5)
    (*pstr)++;
    8002bf1c:	611c                	ld	a5,0(a0)
    8002bf1e:	0785                	addi	a5,a5,1
    8002bf20:	e11c                	sd	a5,0(a0)
    return va_arg(*ap, unsigned long);
    8002bf22:	6218                	ld	a4,0(a2)
    8002bf24:	8636                	mv	a2,a3
    digs[pos++] = num % base;
    8002bf26:	03077f33          	remu	t5,a4,a6
    8002bf2a:	00410893          	addi	a7,sp,4
    8002bf2e:	4685                	li	a3,1
    8002bf30:	c07a                	sw	t5,0(sp)
    if (num < base)
    8002bf32:	1b076c63          	bltu	a4,a6,8002c0ea <vprintfmt.constprop.0+0x2ee>
    num /= base;
    8002bf36:	03075733          	divu	a4,a4,a6
    digs[pos++] = num % base;
    8002bf3a:	83b6                	mv	t2,a3
    if (num < base)
    8002bf3c:	0891                	addi	a7,a7,4
    digs[pos++] = num % base;
    8002bf3e:	2685                	addiw	a3,a3,1
    8002bf40:	03077f33          	remu	t5,a4,a6
    8002bf44:	ffe8ae23          	sw	t5,-4(a7)
    if (num < base)
    8002bf48:	ff0777e3          	bgeu	a4,a6,8002bf36 <vprintfmt.constprop.0+0x13a>
  while (width-- > pos)
    8002bf4c:	ffff871b          	addiw	a4,t6,-1
    8002bf50:	fff6881b          	addiw	a6,a3,-1
    8002bf54:	01f6da63          	bge	a3,t6,8002bf68 <vprintfmt.constprop.0+0x16c>
    **pstr = ch;
    8002bf58:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    8002bf5c:	611c                	ld	a5,0(a0)
  while (width-- > pos)
    8002bf5e:	377d                	addiw	a4,a4,-1
    (*pstr)++;
    8002bf60:	0785                	addi	a5,a5,1
    8002bf62:	e11c                	sd	a5,0(a0)
  while (width-- > pos)
    8002bf64:	ff071ae3          	bne	a4,a6,8002bf58 <vprintfmt.constprop.0+0x15c>
  while (pos-- > 0)
    8002bf68:	038a                	slli	t2,t2,0x2
    8002bf6a:	007106b3          	add	a3,sp,t2
    8002bf6e:	ffc10893          	addi	a7,sp,-4
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002bf72:	4825                	li	a6,9
    8002bf74:	a819                	j	8002bf8a <vprintfmt.constprop.0+0x18e>
    8002bf76:	0577071b          	addiw	a4,a4,87
    **pstr = ch;
    8002bf7a:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002bf7e:	611c                	ld	a5,0(a0)
  while (pos-- > 0)
    8002bf80:	16f1                	addi	a3,a3,-4
    (*pstr)++;
    8002bf82:	0785                	addi	a5,a5,1
    8002bf84:	e11c                	sd	a5,0(a0)
  while (pos-- > 0)
    8002bf86:	e8d88de3          	beq	a7,a3,8002be20 <vprintfmt.constprop.0+0x24>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002bf8a:	4298                	lw	a4,0(a3)
    8002bf8c:	fee865e3          	bltu	a6,a4,8002bf76 <vprintfmt.constprop.0+0x17a>
    8002bf90:	0307071b          	addiw	a4,a4,48
    8002bf94:	b7dd                	j	8002bf7a <vprintfmt.constprop.0+0x17e>
  if (lflag >= 2)
    8002bf96:	4785                	li	a5,1
      precision = va_arg(ap, int);
    8002bf98:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    8002bf9c:	01e7c463          	blt	a5,t5,8002bfa4 <vprintfmt.constprop.0+0x1a8>
  else if (lflag)
    8002bfa0:	140f0763          	beqz	t5,8002c0ee <vprintfmt.constprop.0+0x2f2>
    return va_arg(*ap, long);
    8002bfa4:	6218                	ld	a4,0(a2)
    **pstr = ch;
    8002bfa6:	611c                	ld	a5,0(a0)
      if ((long long) num < 0) {
    8002bfa8:	14074963          	bltz	a4,8002c0fa <vprintfmt.constprop.0+0x2fe>
      num = getint(&ap, lflag);
    8002bfac:	8636                	mv	a2,a3
    8002bfae:	4829                	li	a6,10
    8002bfb0:	bf9d                	j	8002bf26 <vprintfmt.constprop.0+0x12a>
        ch = *fmt;
    8002bfb2:	0016c803          	lbu	a6,1(a3)
      lflag++;
    8002bfb6:	2f05                	addiw	t5,t5,1
    switch (ch = *(unsigned char *) fmt++) {
    8002bfb8:	86ae                	mv	a3,a1
      goto reswitch;
    8002bfba:	b559                	j	8002be40 <vprintfmt.constprop.0+0x44>
    switch (ch = *(unsigned char *) fmt++) {
    8002bfbc:	4841                	li	a6,16
  if (lflag >= 2)
    8002bfbe:	4705                	li	a4,1
    **pstr = ch;
    8002bfc0:	611c                	ld	a5,0(a0)
      precision = va_arg(ap, int);
    8002bfc2:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    8002bfc6:	f5e74ee3          	blt	a4,t5,8002bf22 <vprintfmt.constprop.0+0x126>
  else if (lflag)
    8002bfca:	f40f1ce3          	bnez	t5,8002bf22 <vprintfmt.constprop.0+0x126>
    return va_arg(*ap, unsigned int);
    8002bfce:	00066703          	lwu	a4,0(a2)
    8002bfd2:	8636                	mv	a2,a3
    8002bfd4:	bf89                	j	8002bf26 <vprintfmt.constprop.0+0x12a>
      if ((p = va_arg(ap, char *)) == NULL)
    8002bfd6:	6214                	ld	a3,0(a2)
    8002bfd8:	ca99                	beqz	a3,8002bfee <vprintfmt.constprop.0+0x1f2>
      if (width > 0 && padc != '-')
    8002bfda:	07f05663          	blez	t6,8002c046 <vprintfmt.constprop.0+0x24a>
    8002bfde:	02d00793          	li	a5,45
    8002bfe2:	02f29863          	bne	t0,a5,8002c012 <vprintfmt.constprop.0+0x216>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002bfe6:	0006c783          	lbu	a5,0(a3)
    8002bfea:	e3ad                	bnez	a5,8002c04c <vprintfmt.constprop.0+0x250>
    8002bfec:	a879                	j	8002c08a <vprintfmt.constprop.0+0x28e>
        p = "(null)";
    8002bfee:	00010697          	auipc	a3,0x10
    8002bff2:	dda68693          	addi	a3,a3,-550 # 8003bdc8 <__func__.0+0xc0d8>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002bff6:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    8002bffa:	05f05963          	blez	t6,8002c04c <vprintfmt.constprop.0+0x250>
    8002bffe:	02d00813          	li	a6,45
        p = "(null)";
    8002c002:	00010697          	auipc	a3,0x10
    8002c006:	dc668693          	addi	a3,a3,-570 # 8003bdc8 <__func__.0+0xc0d8>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c00a:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    8002c00e:	03028f63          	beq	t0,a6,8002c04c <vprintfmt.constprop.0+0x250>
  const char *p = s;
    8002c012:	87b6                	mv	a5,a3
  while (n-- && *p)
    8002c014:	00e688b3          	add	a7,a3,a4
    8002c018:	e709                	bnez	a4,8002c022 <vprintfmt.constprop.0+0x226>
    8002c01a:	a829                	j	8002c034 <vprintfmt.constprop.0+0x238>
    p++;
    8002c01c:	0785                	addi	a5,a5,1
  while (n-- && *p)
    8002c01e:	01178663          	beq	a5,a7,8002c02a <vprintfmt.constprop.0+0x22e>
    8002c022:	0007c803          	lbu	a6,0(a5)
    8002c026:	fe081be3          	bnez	a6,8002c01c <vprintfmt.constprop.0+0x220>
  return p - s;
    8002c02a:	8f95                	sub	a5,a5,a3
        for (width -= strnlen(p, precision); width > 0; width--)
    8002c02c:	40ff8fbb          	subw	t6,t6,a5
    8002c030:	01f05b63          	blez	t6,8002c046 <vprintfmt.constprop.0+0x24a>
    **pstr = ch;
    8002c034:	611c                	ld	a5,0(a0)
    8002c036:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    8002c03a:	611c                	ld	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002c03c:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    8002c03e:	0785                	addi	a5,a5,1
    8002c040:	e11c                	sd	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002c042:	fe0f9ae3          	bnez	t6,8002c036 <vprintfmt.constprop.0+0x23a>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c046:	0006c783          	lbu	a5,0(a3)
    8002c04a:	cbb9                	beqz	a5,8002c0a0 <vprintfmt.constprop.0+0x2a4>
    8002c04c:	58fd                	li	a7,-1
    8002c04e:	04075b63          	bgez	a4,8002c0a4 <vprintfmt.constprop.0+0x2a8>
    **pstr = ch;
    8002c052:	6118                	ld	a4,0(a0)
        p++;
    8002c054:	00168813          	addi	a6,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c058:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    8002c05a:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    8002c05e:	611c                	ld	a5,0(a0)
    8002c060:	8742                	mv	a4,a6
    8002c062:	0785                	addi	a5,a5,1
    8002c064:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c066:	0016c683          	lbu	a3,1(a3)
    8002c06a:	ce91                	beqz	a3,8002c086 <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    8002c06c:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    8002c070:	611c                	ld	a5,0(a0)
        p++;
    8002c072:	0705                	addi	a4,a4,1
    (*pstr)++;
    8002c074:	0785                	addi	a5,a5,1
    8002c076:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c078:	00074683          	lbu	a3,0(a4)
    8002c07c:	fae5                	bnez	a3,8002c06c <vprintfmt.constprop.0+0x270>
    8002c07e:	40e8083b          	subw	a6,a6,a4
    8002c082:	01f80fbb          	addw	t6,a6,t6
      for (; width > 0; width--)
    8002c086:	01f05d63          	blez	t6,8002c0a0 <vprintfmt.constprop.0+0x2a4>
    **pstr = ch;
    8002c08a:	611c                	ld	a5,0(a0)
    8002c08c:	02000713          	li	a4,32
    8002c090:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002c094:	611c                	ld	a5,0(a0)
      for (; width > 0; width--)
    8002c096:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    8002c098:	0785                	addi	a5,a5,1
    8002c09a:	e11c                	sd	a5,0(a0)
      for (; width > 0; width--)
    8002c09c:	fe0f9ae3          	bnez	t6,8002c090 <vprintfmt.constprop.0+0x294>
      if ((p = va_arg(ap, char *)) == NULL)
    8002c0a0:	0621                	addi	a2,a2,8
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002c0a2:	bbbd                	j	8002be20 <vprintfmt.constprop.0+0x24>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c0a4:	377d                	addiw	a4,a4,-1
    8002c0a6:	ff1700e3          	beq	a4,a7,8002c086 <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    8002c0aa:	00053803          	ld	a6,0(a0)
        p++;
    8002c0ae:	0685                	addi	a3,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c0b0:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    8002c0b2:	00f80023          	sb	a5,0(a6)
    (*pstr)++;
    8002c0b6:	611c                	ld	a5,0(a0)
    8002c0b8:	0785                	addi	a5,a5,1
    8002c0ba:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c0bc:	0006c783          	lbu	a5,0(a3)
    8002c0c0:	f3f5                	bnez	a5,8002c0a4 <vprintfmt.constprop.0+0x2a8>
    8002c0c2:	b7d1                	j	8002c086 <vprintfmt.constprop.0+0x28a>
      if (width < 0)
    8002c0c4:	87fe                	mv	a5,t6
    8002c0c6:	000fd363          	bgez	t6,8002c0cc <vprintfmt.constprop.0+0x2d0>
    8002c0ca:	4781                	li	a5,0
        ch = *fmt;
    8002c0cc:	0016c803          	lbu	a6,1(a3)
      if (width < 0)
    8002c0d0:	00078f9b          	sext.w	t6,a5
    switch (ch = *(unsigned char *) fmt++) {
    8002c0d4:	86ae                	mv	a3,a1
      goto reswitch;
    8002c0d6:	b3ad                	j	8002be40 <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    8002c0d8:	611c                	ld	a5,0(a0)
    8002c0da:	4218                	lw	a4,0(a2)
      putch(va_arg(ap, int), putdat);
    8002c0dc:	0621                	addi	a2,a2,8
    **pstr = ch;
    8002c0de:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8002c0e2:	611c                	ld	a5,0(a0)
    8002c0e4:	0785                	addi	a5,a5,1
    8002c0e6:	e11c                	sd	a5,0(a0)
  }
    8002c0e8:	bb25                	j	8002be20 <vprintfmt.constprop.0+0x24>
    if (num < base)
    8002c0ea:	4381                	li	t2,0
    8002c0ec:	b585                	j	8002bf4c <vprintfmt.constprop.0+0x150>
    return va_arg(*ap, int);
    8002c0ee:	4218                	lw	a4,0(a2)
    8002c0f0:	bd5d                	j	8002bfa6 <vprintfmt.constprop.0+0x1aa>
    switch (ch = *(unsigned char *) fmt++) {
    8002c0f2:	4829                	li	a6,10
    8002c0f4:	b5e9                	j	8002bfbe <vprintfmt.constprop.0+0x1c2>
    8002c0f6:	4821                	li	a6,8
    8002c0f8:	b5d9                	j	8002bfbe <vprintfmt.constprop.0+0x1c2>
    **pstr = ch;
    8002c0fa:	02d00613          	li	a2,45
    8002c0fe:	00c78023          	sb	a2,0(a5)
    (*pstr)++;
    8002c102:	611c                	ld	a5,0(a0)
        num = -(long long) num;
    8002c104:	40e00733          	neg	a4,a4
    8002c108:	8636                	mv	a2,a3
    (*pstr)++;
    8002c10a:	0785                	addi	a5,a5,1
    8002c10c:	e11c                	sd	a5,0(a0)
        num = -(long long) num;
    8002c10e:	4829                	li	a6,10
    8002c110:	bd19                	j	8002bf26 <vprintfmt.constprop.0+0x12a>

000000008002c112 <vprintfmt.constprop.1>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    8002c112:	b6010113          	addi	sp,sp,-1184
    8002c116:	14f10713          	addi	a4,sp,335
    8002c11a:	fc077713          	andi	a4,a4,-64
    8002c11e:	45b13023          	sd	s11,1088(sp)
    8002c122:	83ae                	mv	t2,a1
    8002c124:	48813c23          	sd	s0,1176(sp)
    8002c128:	48913823          	sd	s1,1168(sp)
    8002c12c:	49213423          	sd	s2,1160(sp)
    8002c130:	49313023          	sd	s3,1152(sp)
    8002c134:	47413c23          	sd	s4,1144(sp)
    8002c138:	47513823          	sd	s5,1136(sp)
    8002c13c:	47613423          	sd	s6,1128(sp)
  tohost = (uintptr_t)magic_mem;
    8002c140:	2c070f13          	addi	t5,a4,704
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002c144:	02500593          	li	a1,37
  buf[buflen++] = ch;
    8002c148:	0002c897          	auipc	a7,0x2c
    8002c14c:	f8c88893          	addi	a7,a7,-116 # 800580d4 <buflen.2>
    8002c150:	0002c697          	auipc	a3,0x2c
    8002c154:	f3068693          	addi	a3,a3,-208 # 80058080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002c158:	4829                	li	a6,10
  magic_mem[0] = which;
    8002c15a:	04000613          	li	a2,64
  magic_mem[1] = arg0;
    8002c15e:	4e85                	li	t4,1
  tohost = (uintptr_t)magic_mem;
    8002c160:	00012e17          	auipc	t3,0x12
    8002c164:	ea0e0e13          	addi	t3,t3,-352 # 8003e000 <tohost>
    8002c168:	00012797          	auipc	a5,0x12
    8002c16c:	ed878793          	addi	a5,a5,-296 # 8003e040 <fromhost>
    switch (ch = *(unsigned char *) fmt++) {
    8002c170:	00004d97          	auipc	s11,0x4
    8002c174:	cecd8d93          	addi	s11,s11,-788 # 8002fe5c <__func__.0+0x16c>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002c178:	00054f83          	lbu	t6,0(a0)
    8002c17c:	000f841b          	sext.w	s0,t6
    8002c180:	06bf8563          	beq	t6,a1,8002c1ea <vprintfmt.constprop.1+0xd8>
      if (ch == '\0')
    8002c184:	cc49                	beqz	s0,8002c21e <vprintfmt.constprop.1+0x10c>
  buf[buflen++] = ch;
    8002c186:	0002c317          	auipc	t1,0x2c
    8002c18a:	f4e32303          	lw	t1,-178(t1) # 800580d4 <buflen.2>
      fmt++;
    8002c18e:	0505                	addi	a0,a0,1
  buf[buflen++] = ch;
    8002c190:	0013029b          	addiw	t0,t1,1
    8002c194:	9336                	add	t1,t1,a3
    8002c196:	0058a023          	sw	t0,0(a7)
    8002c19a:	01f30023          	sb	t6,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002c19e:	01040463          	beq	s0,a6,8002c1a6 <vprintfmt.constprop.1+0x94>
    8002c1a2:	fcc29be3          	bne	t0,a2,8002c178 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002c1a6:	2cc73023          	sd	a2,704(a4)
  magic_mem[1] = arg0;
    8002c1aa:	2dd73423          	sd	t4,712(a4)
  magic_mem[2] = arg1;
    8002c1ae:	2cd73823          	sd	a3,720(a4)
  magic_mem[3] = arg2;
    8002c1b2:	2c573c23          	sd	t0,728(a4)
  __sync_synchronize();
    8002c1b6:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002c1ba:	01ee3023          	sd	t5,0(t3)
  while (fromhost == 0)
    8002c1be:	0007b303          	ld	t1,0(a5)
    8002c1c2:	fe030ee3          	beqz	t1,8002c1be <vprintfmt.constprop.1+0xac>
  fromhost = 0;
    8002c1c6:	00012317          	auipc	t1,0x12
    8002c1ca:	e6033d23          	sd	zero,-390(t1) # 8003e040 <fromhost>
  __sync_synchronize();
    8002c1ce:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002c1d2:	2c073303          	ld	t1,704(a4)
    buflen = 0;
    8002c1d6:	0002c317          	auipc	t1,0x2c
    8002c1da:	ee032f23          	sw	zero,-258(t1) # 800580d4 <buflen.2>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002c1de:	00054f83          	lbu	t6,0(a0)
    8002c1e2:	000f841b          	sext.w	s0,t6
    8002c1e6:	f8bf9fe3          	bne	t6,a1,8002c184 <vprintfmt.constprop.1+0x72>
    switch (ch = *(unsigned char *) fmt++) {
    8002c1ea:	00154483          	lbu	s1,1(a0)
    fmt++;
    8002c1ee:	00150a13          	addi	s4,a0,1
    precision = -1;
    8002c1f2:	537d                	li	t1,-1
    fmt++;
    8002c1f4:	8452                	mv	s0,s4
    width = -1;
    8002c1f6:	8f9a                	mv	t6,t1
    padc = ' ';
    8002c1f8:	02000a93          	li	s5,32
    lflag = 0;
    8002c1fc:	4901                	li	s2,0
    switch (ch = *(unsigned char *) fmt++) {
    8002c1fe:	05500993          	li	s3,85
    8002c202:	fdd4829b          	addiw	t0,s1,-35
    8002c206:	0ff2f293          	zext.b	t0,t0
    8002c20a:	00140513          	addi	a0,s0,1
    8002c20e:	0459e763          	bltu	s3,t0,8002c25c <vprintfmt.constprop.1+0x14a>
    8002c212:	028a                	slli	t0,t0,0x2
    8002c214:	92ee                	add	t0,t0,s11
    8002c216:	0002ab03          	lw	s6,0(t0)
    8002c21a:	9b6e                	add	s6,s6,s11
    8002c21c:	8b02                	jr	s6
}
    8002c21e:	49813403          	ld	s0,1176(sp)
    8002c222:	49013483          	ld	s1,1168(sp)
    8002c226:	48813903          	ld	s2,1160(sp)
    8002c22a:	48013983          	ld	s3,1152(sp)
    8002c22e:	47813a03          	ld	s4,1144(sp)
    8002c232:	47013a83          	ld	s5,1136(sp)
    8002c236:	46813b03          	ld	s6,1128(sp)
    8002c23a:	44013d83          	ld	s11,1088(sp)
    8002c23e:	4a010113          	addi	sp,sp,1184
    8002c242:	8082                	ret
      padc = '0';
    8002c244:	8aa6                	mv	s5,s1
      goto reswitch;
    8002c246:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    8002c24a:	842a                	mv	s0,a0
    8002c24c:	00140513          	addi	a0,s0,1
    8002c250:	fdd4829b          	addiw	t0,s1,-35
    8002c254:	0ff2f293          	zext.b	t0,t0
    8002c258:	fa59fde3          	bgeu	s3,t0,8002c212 <vprintfmt.constprop.1+0x100>
  buf[buflen++] = ch;
    8002c25c:	0002c317          	auipc	t1,0x2c
    8002c260:	e7832303          	lw	t1,-392(t1) # 800580d4 <buflen.2>
    8002c264:	0002cf97          	auipc	t6,0x2c
    8002c268:	e1cf8f93          	addi	t6,t6,-484 # 80058080 <buf.1>
    8002c26c:	02500293          	li	t0,37
    8002c270:	0013051b          	addiw	a0,t1,1
    8002c274:	937e                	add	t1,t1,t6
    8002c276:	00530023          	sb	t0,0(t1)
    8002c27a:	0002c417          	auipc	s0,0x2c
    8002c27e:	e4a42d23          	sw	a0,-422(s0) # 800580d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002c282:	04000313          	li	t1,64
    8002c286:	56650f63          	beq	a0,t1,8002c804 <vprintfmt.constprop.1+0x6f2>
      fmt = last_fmt;
    8002c28a:	8552                	mv	a0,s4
    8002c28c:	b5f5                	j	8002c178 <vprintfmt.constprop.1+0x66>
    8002c28e:	47713023          	sd	s7,1120(sp)
        precision = precision * 10 + ch - '0';
    8002c292:	fd04831b          	addiw	t1,s1,-48
        ch = *fmt;
    8002c296:	00144483          	lbu	s1,1(s0)
        if (ch < '0' || ch > '9')
    8002c29a:	4ba5                	li	s7,9
    8002c29c:	fd04841b          	addiw	s0,s1,-48
        ch = *fmt;
    8002c2a0:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    8002c2a4:	088befe3          	bltu	s7,s0,8002cb42 <vprintfmt.constprop.1+0xa30>
    switch (ch = *(unsigned char *) fmt++) {
    8002c2a8:	842a                	mv	s0,a0
        precision = precision * 10 + ch - '0';
    8002c2aa:	0023151b          	slliw	a0,t1,0x2
        ch = *fmt;
    8002c2ae:	00144483          	lbu	s1,1(s0)
        precision = precision * 10 + ch - '0';
    8002c2b2:	0065053b          	addw	a0,a0,t1
    8002c2b6:	0015151b          	slliw	a0,a0,0x1
    8002c2ba:	0055053b          	addw	a0,a0,t0
        if (ch < '0' || ch > '9')
    8002c2be:	fd048b1b          	addiw	s6,s1,-48
      for (precision = 0; ; ++fmt) {
    8002c2c2:	0405                	addi	s0,s0,1
        precision = precision * 10 + ch - '0';
    8002c2c4:	fd05031b          	addiw	t1,a0,-48
        ch = *fmt;
    8002c2c8:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    8002c2cc:	fd6bffe3          	bgeu	s7,s6,8002c2aa <vprintfmt.constprop.1+0x198>
    switch (ch = *(unsigned char *) fmt++) {
    8002c2d0:	46013b83          	ld	s7,1120(sp)
      if (width < 0)
    8002c2d4:	f20fd7e3          	bgez	t6,8002c202 <vprintfmt.constprop.1+0xf0>
        width = precision, precision = -1;
    8002c2d8:	8f9a                	mv	t6,t1
    8002c2da:	537d                	li	t1,-1
    8002c2dc:	b71d                	j	8002c202 <vprintfmt.constprop.1+0xf0>
        ch = *fmt;
    8002c2de:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    8002c2e2:	842a                	mv	s0,a0
      goto reswitch;
    8002c2e4:	bf39                	j	8002c202 <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8002c2e6:	0002cf97          	auipc	t6,0x2c
    8002c2ea:	deefaf83          	lw	t6,-530(t6) # 800580d4 <buflen.2>
    8002c2ee:	0002c297          	auipc	t0,0x2c
    8002c2f2:	d9228293          	addi	t0,t0,-622 # 80058080 <buf.1>
    8002c2f6:	02500413          	li	s0,37
    8002c2fa:	001f831b          	addiw	t1,t6,1
    8002c2fe:	9f96                	add	t6,t6,t0
    8002c300:	008f8023          	sb	s0,0(t6)
    8002c304:	0002c497          	auipc	s1,0x2c
    8002c308:	dc64a823          	sw	t1,-560(s1) # 800580d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002c30c:	04000f93          	li	t6,64
    8002c310:	e7f314e3          	bne	t1,t6,8002c178 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002c314:	04673023          	sd	t1,64(a4)
  magic_mem[1] = arg0;
    8002c318:	4f85                	li	t6,1
    8002c31a:	05f73423          	sd	t6,72(a4)
  magic_mem[2] = arg1;
    8002c31e:	04573823          	sd	t0,80(a4)
  magic_mem[3] = arg2;
    8002c322:	04673c23          	sd	t1,88(a4)
  __sync_synchronize();
    8002c326:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002c32a:	04070313          	addi	t1,a4,64
    8002c32e:	00012f97          	auipc	t6,0x12
    8002c332:	cc6fb923          	sd	t1,-814(t6) # 8003e000 <tohost>
  while (fromhost == 0)
    8002c336:	00012317          	auipc	t1,0x12
    8002c33a:	d0a30313          	addi	t1,t1,-758 # 8003e040 <fromhost>
    8002c33e:	00033f83          	ld	t6,0(t1)
    8002c342:	fe0f8ee3          	beqz	t6,8002c33e <vprintfmt.constprop.1+0x22c>
  fromhost = 0;
    8002c346:	00012317          	auipc	t1,0x12
    8002c34a:	ce033d23          	sd	zero,-774(t1) # 8003e040 <fromhost>
  __sync_synchronize();
    8002c34e:	0330000f          	fence	rw,rw
    buflen = 0;
    8002c352:	0002c317          	auipc	t1,0x2c
    8002c356:	d8032123          	sw	zero,-638(t1) # 800580d4 <buflen.2>
  return magic_mem[0];
    8002c35a:	04073303          	ld	t1,64(a4)
    buflen = 0;
    8002c35e:	bd29                	j	8002c178 <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    8002c360:	00144483          	lbu	s1,1(s0)
      precision = va_arg(ap, int);
    8002c364:	0003a303          	lw	t1,0(t2)
    switch (ch = *(unsigned char *) fmt++) {
    8002c368:	842a                	mv	s0,a0
      precision = va_arg(ap, int);
    8002c36a:	03a1                	addi	t2,t2,8
      goto process_precision;
    8002c36c:	b7a5                	j	8002c2d4 <vprintfmt.constprop.1+0x1c2>
  buf[buflen++] = ch;
    8002c36e:	0002c317          	auipc	t1,0x2c
    8002c372:	d6632303          	lw	t1,-666(t1) # 800580d4 <buflen.2>
    8002c376:	0002c917          	auipc	s2,0x2c
    8002c37a:	d0a90913          	addi	s2,s2,-758 # 80058080 <buf.1>
    8002c37e:	47713023          	sd	s7,1120(sp)
    8002c382:	45813c23          	sd	s8,1112(sp)
    8002c386:	45913823          	sd	s9,1104(sp)
    8002c38a:	45a13423          	sd	s10,1096(sp)
    8002c38e:	00690433          	add	s0,s2,t1
    8002c392:	0002c997          	auipc	s3,0x2c
    8002c396:	d4298993          	addi	s3,s3,-702 # 800580d4 <buflen.2>
    8002c39a:	0013029b          	addiw	t0,t1,1
    8002c39e:	03000493          	li	s1,48
    8002c3a2:	00940023          	sb	s1,0(s0)
    8002c3a6:	0059a023          	sw	t0,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002c3aa:	04000413          	li	s0,64
    8002c3ae:	62828d63          	beq	t0,s0,8002c9e8 <vprintfmt.constprop.1+0x8d6>
  buf[buflen++] = ch;
    8002c3b2:	2309                	addiw	t1,t1,2
    8002c3b4:	92ca                	add	t0,t0,s2
    8002c3b6:	07800493          	li	s1,120
    8002c3ba:	0069a023          	sw	t1,0(s3)
    8002c3be:	00928023          	sb	s1,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002c3c2:	42831a63          	bne	t1,s0,8002c7f6 <vprintfmt.constprop.1+0x6e4>
  magic_mem[0] = which;
    8002c3c6:	10673023          	sd	t1,256(a4)
  magic_mem[1] = arg0;
    8002c3ca:	4285                	li	t0,1
    8002c3cc:	10573423          	sd	t0,264(a4)
  magic_mem[2] = arg1;
    8002c3d0:	11273823          	sd	s2,272(a4)
  magic_mem[3] = arg2;
    8002c3d4:	10673c23          	sd	t1,280(a4)
  __sync_synchronize();
    8002c3d8:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002c3dc:	10070313          	addi	t1,a4,256
    8002c3e0:	00012297          	auipc	t0,0x12
    8002c3e4:	c262b023          	sd	t1,-992(t0) # 8003e000 <tohost>
  while (fromhost == 0)
    8002c3e8:	00012317          	auipc	t1,0x12
    8002c3ec:	c5830313          	addi	t1,t1,-936 # 8003e040 <fromhost>
    8002c3f0:	00033283          	ld	t0,0(t1)
    8002c3f4:	fe028ee3          	beqz	t0,8002c3f0 <vprintfmt.constprop.1+0x2de>
  fromhost = 0;
    8002c3f8:	00012317          	auipc	t1,0x12
    8002c3fc:	c4033423          	sd	zero,-952(t1) # 8003e040 <fromhost>
  __sync_synchronize();
    8002c400:	0330000f          	fence	rw,rw
    buflen = 0;
    8002c404:	0002c317          	auipc	t1,0x2c
    8002c408:	cc032823          	sw	zero,-816(t1) # 800580d4 <buflen.2>
  return magic_mem[0];
    8002c40c:	10073303          	ld	t1,256(a4)
  else if (lflag)
    8002c410:	00838493          	addi	s1,t2,8
    buflen = 0;
    8002c414:	4301                	li	t1,0
    8002c416:	4441                	li	s0,16
    8002c418:	a6d5                	j	8002c7fc <vprintfmt.constprop.1+0x6ea>
    8002c41a:	47713023          	sd	s7,1120(sp)
    8002c41e:	45813c23          	sd	s8,1112(sp)
    8002c422:	45913823          	sd	s9,1104(sp)
    8002c426:	45a13423          	sd	s10,1096(sp)
  if (lflag >= 2)
    8002c42a:	4305                	li	t1,1
      precision = va_arg(ap, int);
    8002c42c:	00838413          	addi	s0,t2,8
  if (lflag >= 2)
    8002c430:	01234463          	blt	t1,s2,8002c438 <vprintfmt.constprop.1+0x326>
  else if (lflag)
    8002c434:	3a090e63          	beqz	s2,8002c7f0 <vprintfmt.constprop.1+0x6de>
    return va_arg(*ap, long);
    8002c438:	0003b283          	ld	t0,0(t2)
  buf[buflen++] = ch;
    8002c43c:	0002c317          	auipc	t1,0x2c
    8002c440:	c9832303          	lw	t1,-872(t1) # 800580d4 <buflen.2>
    8002c444:	0002c997          	auipc	s3,0x2c
    8002c448:	c9098993          	addi	s3,s3,-880 # 800580d4 <buflen.2>
      if ((long long) num < 0) {
    8002c44c:	5402cd63          	bltz	t0,8002c9a6 <vprintfmt.constprop.1+0x894>
      num = getint(&ap, lflag);
    8002c450:	83a2                	mv	t2,s0
    8002c452:	0002c917          	auipc	s2,0x2c
    8002c456:	c2e90913          	addi	s2,s2,-978 # 80058080 <buf.1>
    8002c45a:	4429                	li	s0,10
    digs[pos++] = num % base;
    8002c45c:	0282fb33          	remu	s6,t0,s0
    8002c460:	01410a13          	addi	s4,sp,20
    8002c464:	4485                	li	s1,1
    8002c466:	c85a                	sw	s6,16(sp)
    if (num < base)
    8002c468:	3682e263          	bltu	t0,s0,8002c7cc <vprintfmt.constprop.1+0x6ba>
    num /= base;
    8002c46c:	0282d2b3          	divu	t0,t0,s0
    digs[pos++] = num % base;
    8002c470:	8ba6                	mv	s7,s1
    if (num < base)
    8002c472:	0a11                	addi	s4,s4,4
    digs[pos++] = num % base;
    8002c474:	2485                	addiw	s1,s1,1
    8002c476:	0282fb33          	remu	s6,t0,s0
    8002c47a:	ff6a2e23          	sw	s6,-4(s4)
    if (num < base)
    8002c47e:	fe82f7e3          	bgeu	t0,s0,8002c46c <vprintfmt.constprop.1+0x35a>
  while (width-- > pos)
    8002c482:	ffff829b          	addiw	t0,t6,-1
    8002c486:	fff48a1b          	addiw	s4,s1,-1
    8002c48a:	09f4d463          	bge	s1,t6,8002c512 <vprintfmt.constprop.1+0x400>
  if (ch == '\n' || buflen == sizeof(buf))
    8002c48e:	04000413          	li	s0,64
  magic_mem[1] = arg0;
    8002c492:	4c05                	li	s8,1
  tohost = (uintptr_t)magic_mem;
    8002c494:	0c070b13          	addi	s6,a4,192
    8002c498:	00012497          	auipc	s1,0x12
    8002c49c:	b6848493          	addi	s1,s1,-1176 # 8003e000 <tohost>
    8002c4a0:	00012f97          	auipc	t6,0x12
    8002c4a4:	ba0f8f93          	addi	t6,t6,-1120 # 8003e040 <fromhost>
  buf[buflen++] = ch;
    8002c4a8:	4c89                	li	s9,2
    8002c4aa:	00130d1b          	addiw	s10,t1,1
    8002c4ae:	934a                	add	t1,t1,s2
    8002c4b0:	01a9a023          	sw	s10,0(s3)
    8002c4b4:	01530023          	sb	s5,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002c4b8:	2e8d1863          	bne	s10,s0,8002c7a8 <vprintfmt.constprop.1+0x696>
  magic_mem[0] = which;
    8002c4bc:	e360                	sd	s0,192(a4)
  magic_mem[1] = arg0;
    8002c4be:	0d873423          	sd	s8,200(a4)
  magic_mem[2] = arg1;
    8002c4c2:	0d273823          	sd	s2,208(a4)
  magic_mem[3] = arg2;
    8002c4c6:	ef60                	sd	s0,216(a4)
  __sync_synchronize();
    8002c4c8:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002c4cc:	0164b023          	sd	s6,0(s1)
  while (fromhost == 0)
    8002c4d0:	000fb303          	ld	t1,0(t6)
    8002c4d4:	fe030ee3          	beqz	t1,8002c4d0 <vprintfmt.constprop.1+0x3be>
  fromhost = 0;
    8002c4d8:	00012317          	auipc	t1,0x12
    8002c4dc:	b6033423          	sd	zero,-1176(t1) # 8003e040 <fromhost>
  __sync_synchronize();
    8002c4e0:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002c4e4:	0c073303          	ld	t1,192(a4)
    buflen = 0;
    8002c4e8:	0002c317          	auipc	t1,0x2c
    8002c4ec:	be032623          	sw	zero,-1044(t1) # 800580d4 <buflen.2>
  while (width-- > pos)
    8002c4f0:	fff2831b          	addiw	t1,t0,-1
    8002c4f4:	2b430c63          	beq	t1,s4,8002c7ac <vprintfmt.constprop.1+0x69a>
  buf[buflen++] = ch;
    8002c4f8:	01590023          	sb	s5,0(s2)
  while (width-- > pos)
    8002c4fc:	32f9                	addiw	t0,t0,-2
    8002c4fe:	2a5a0963          	beq	s4,t0,8002c7b0 <vprintfmt.constprop.1+0x69e>
  buf[buflen++] = ch;
    8002c502:	0199a023          	sw	s9,0(s3)
    8002c506:	015900a3          	sb	s5,1(s2)
    8002c50a:	4309                	li	t1,2
  while (width-- > pos)
    8002c50c:	32fd                	addiw	t0,t0,-1
    8002c50e:	f85a1ee3          	bne	s4,t0,8002c4aa <vprintfmt.constprop.1+0x398>
  while (pos-- > 0)
    8002c512:	0b8a                	slli	s7,s7,0x2
    8002c514:	0800                	addi	s0,sp,16
    8002c516:	945e                	add	s0,s0,s7
    8002c518:	00c10a93          	addi	s5,sp,12
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002c51c:	4a25                	li	s4,9
  magic_mem[0] = which;
    8002c51e:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    8002c522:	4c85                	li	s9,1
  tohost = (uintptr_t)magic_mem;
    8002c524:	08070c13          	addi	s8,a4,128
    8002c528:	00012b97          	auipc	s7,0x12
    8002c52c:	ad8b8b93          	addi	s7,s7,-1320 # 8003e000 <tohost>
    8002c530:	00012297          	auipc	t0,0x12
    8002c534:	b1028293          	addi	t0,t0,-1264 # 8003e040 <fromhost>
  if (ch == '\n' || buflen == sizeof(buf))
    8002c538:	4b29                	li	s6,10
    8002c53a:	a831                	j	8002c556 <vprintfmt.constprop.1+0x444>
  buf[buflen++] = ch;
    8002c53c:	934a                	add	t1,t1,s2
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002c53e:	030f8f9b          	addiw	t6,t6,48
  buf[buflen++] = ch;
    8002c542:	01f30023          	sb	t6,0(t1)
    8002c546:	01a9a023          	sw	s10,0(s3)
    8002c54a:	836a                	mv	t1,s10
  if (ch == '\n' || buflen == sizeof(buf))
    8002c54c:	029d0463          	beq	s10,s1,8002c574 <vprintfmt.constprop.1+0x462>
  while (pos-- > 0)
    8002c550:	1471                	addi	s0,s0,-4
    8002c552:	068a8063          	beq	s5,s0,8002c5b2 <vprintfmt.constprop.1+0x4a0>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002c556:	00042f83          	lw	t6,0(s0)
  buf[buflen++] = ch;
    8002c55a:	00130d1b          	addiw	s10,t1,1
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002c55e:	fdfa7fe3          	bgeu	s4,t6,8002c53c <vprintfmt.constprop.1+0x42a>
    8002c562:	057f8f9b          	addiw	t6,t6,87
  buf[buflen++] = ch;
    8002c566:	934a                	add	t1,t1,s2
    8002c568:	01f30023          	sb	t6,0(t1)
    8002c56c:	01a9a023          	sw	s10,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002c570:	fd6f9de3          	bne	t6,s6,8002c54a <vprintfmt.constprop.1+0x438>
  magic_mem[0] = which;
    8002c574:	e344                	sd	s1,128(a4)
  magic_mem[1] = arg0;
    8002c576:	09973423          	sd	s9,136(a4)
  magic_mem[2] = arg1;
    8002c57a:	09273823          	sd	s2,144(a4)
  magic_mem[3] = arg2;
    8002c57e:	09a73c23          	sd	s10,152(a4)
  __sync_synchronize();
    8002c582:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002c586:	018bb023          	sd	s8,0(s7)
  while (fromhost == 0)
    8002c58a:	0002b303          	ld	t1,0(t0)
    8002c58e:	fe030ee3          	beqz	t1,8002c58a <vprintfmt.constprop.1+0x478>
  fromhost = 0;
    8002c592:	00012317          	auipc	t1,0x12
    8002c596:	aa033723          	sd	zero,-1362(t1) # 8003e040 <fromhost>
  __sync_synchronize();
    8002c59a:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002c59e:	08073303          	ld	t1,128(a4)
  while (pos-- > 0)
    8002c5a2:	1471                	addi	s0,s0,-4
    buflen = 0;
    8002c5a4:	0002c317          	auipc	t1,0x2c
    8002c5a8:	b2032823          	sw	zero,-1232(t1) # 800580d4 <buflen.2>
    8002c5ac:	4301                	li	t1,0
  while (pos-- > 0)
    8002c5ae:	fa8a94e3          	bne	s5,s0,8002c556 <vprintfmt.constprop.1+0x444>
    8002c5b2:	46013b83          	ld	s7,1120(sp)
    8002c5b6:	45813c03          	ld	s8,1112(sp)
    8002c5ba:	45013c83          	ld	s9,1104(sp)
    8002c5be:	44813d03          	ld	s10,1096(sp)
    8002c5c2:	be5d                	j	8002c178 <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    8002c5c4:	00144483          	lbu	s1,1(s0)
      lflag++;
    8002c5c8:	2905                	addiw	s2,s2,1
    switch (ch = *(unsigned char *) fmt++) {
    8002c5ca:	842a                	mv	s0,a0
      goto reswitch;
    8002c5cc:	b91d                	j	8002c202 <vprintfmt.constprop.1+0xf0>
    8002c5ce:	47713023          	sd	s7,1120(sp)
    8002c5d2:	45813c23          	sd	s8,1112(sp)
    8002c5d6:	45913823          	sd	s9,1104(sp)
    8002c5da:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    8002c5de:	4441                	li	s0,16
  if (lflag >= 2)
    8002c5e0:	4285                	li	t0,1
  buf[buflen++] = ch;
    8002c5e2:	0002c317          	auipc	t1,0x2c
    8002c5e6:	af232303          	lw	t1,-1294(t1) # 800580d4 <buflen.2>
      precision = va_arg(ap, int);
    8002c5ea:	00838493          	addi	s1,t2,8
  if (lflag >= 2)
    8002c5ee:	1d22c363          	blt	t0,s2,8002c7b4 <vprintfmt.constprop.1+0x6a2>
  else if (lflag)
    8002c5f2:	3e091263          	bnez	s2,8002c9d6 <vprintfmt.constprop.1+0x8c4>
    return va_arg(*ap, unsigned int);
    8002c5f6:	0003e283          	lwu	t0,0(t2)
    8002c5fa:	0002c997          	auipc	s3,0x2c
    8002c5fe:	ada98993          	addi	s3,s3,-1318 # 800580d4 <buflen.2>
    8002c602:	83a6                	mv	t2,s1
    8002c604:	0002c917          	auipc	s2,0x2c
    8002c608:	a7c90913          	addi	s2,s2,-1412 # 80058080 <buf.1>
    8002c60c:	bd81                	j	8002c45c <vprintfmt.constprop.1+0x34a>
      if ((p = va_arg(ap, char *)) == NULL)
    8002c60e:	0003b483          	ld	s1,0(t2)
    8002c612:	47713023          	sd	s7,1120(sp)
    8002c616:	45813c23          	sd	s8,1112(sp)
    8002c61a:	45913823          	sd	s9,1104(sp)
    8002c61e:	45a13423          	sd	s10,1096(sp)
    8002c622:	42048463          	beqz	s1,8002ca4a <vprintfmt.constprop.1+0x938>
      if (width > 0 && padc != '-')
    8002c626:	1bf05563          	blez	t6,8002c7d0 <vprintfmt.constprop.1+0x6be>
    8002c62a:	02d00293          	li	t0,45
    8002c62e:	445a9063          	bne	s5,t0,8002ca6e <vprintfmt.constprop.1+0x95c>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c632:	0004c283          	lbu	t0,0(s1)
    8002c636:	0002899b          	sext.w	s3,t0
    8002c63a:	2c028363          	beqz	t0,8002c900 <vprintfmt.constprop.1+0x7ee>
  tohost = (uintptr_t)magic_mem;
    8002c63e:	20070413          	addi	s0,a4,512
    8002c642:	e422                	sd	s0,8(sp)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c644:	5d7d                	li	s10,-1
  buf[buflen++] = ch;
    8002c646:	0002cb97          	auipc	s7,0x2c
    8002c64a:	a8eb8b93          	addi	s7,s7,-1394 # 800580d4 <buflen.2>
    8002c64e:	0002cb17          	auipc	s6,0x2c
    8002c652:	a32b0b13          	addi	s6,s6,-1486 # 80058080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002c656:	4ca9                	li	s9,10
  magic_mem[0] = which;
    8002c658:	04000c13          	li	s8,64
    8002c65c:	00012917          	auipc	s2,0x12
    8002c660:	9e490913          	addi	s2,s2,-1564 # 8003e040 <fromhost>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c664:	04034263          	bltz	t1,8002c6a8 <vprintfmt.constprop.1+0x596>
    8002c668:	fff30a9b          	addiw	s5,t1,-1
    8002c66c:	29aa8863          	beq	s5,s10,8002c8fc <vprintfmt.constprop.1+0x7ea>
  buf[buflen++] = ch;
    8002c670:	0002c417          	auipc	s0,0x2c
    8002c674:	a6442403          	lw	s0,-1436(s0) # 800580d4 <buflen.2>
    8002c678:	00140a1b          	addiw	s4,s0,1
    8002c67c:	945a                	add	s0,s0,s6
    8002c67e:	014ba023          	sw	s4,0(s7)
    8002c682:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002c686:	03998f63          	beq	s3,s9,8002c6c4 <vprintfmt.constprop.1+0x5b2>
    8002c68a:	038a0d63          	beq	s4,s8,8002c6c4 <vprintfmt.constprop.1+0x5b2>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c68e:	0014c283          	lbu	t0,1(s1)
        p++;
    8002c692:	0485                	addi	s1,s1,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c694:	3ffd                	addiw	t6,t6,-1
    8002c696:	0002899b          	sext.w	s3,t0
    8002c69a:	26028163          	beqz	t0,8002c8fc <vprintfmt.constprop.1+0x7ea>
    8002c69e:	1c034863          	bltz	t1,8002c86e <vprintfmt.constprop.1+0x75c>
    8002c6a2:	8356                	mv	t1,s5
    8002c6a4:	fc0352e3          	bgez	t1,8002c668 <vprintfmt.constprop.1+0x556>
  buf[buflen++] = ch;
    8002c6a8:	0002c417          	auipc	s0,0x2c
    8002c6ac:	a2c42403          	lw	s0,-1492(s0) # 800580d4 <buflen.2>
    8002c6b0:	8a9a                	mv	s5,t1
    8002c6b2:	00140a1b          	addiw	s4,s0,1
    8002c6b6:	945a                	add	s0,s0,s6
    8002c6b8:	014ba023          	sw	s4,0(s7)
    8002c6bc:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002c6c0:	fd9995e3          	bne	s3,s9,8002c68a <vprintfmt.constprop.1+0x578>
  magic_mem[0] = which;
    8002c6c4:	21873023          	sd	s8,512(a4)
  magic_mem[1] = arg0;
    8002c6c8:	4405                	li	s0,1
    8002c6ca:	20873423          	sd	s0,520(a4)
  magic_mem[2] = arg1;
    8002c6ce:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    8002c6d2:	21473c23          	sd	s4,536(a4)
  __sync_synchronize();
    8002c6d6:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002c6da:	62a2                	ld	t0,8(sp)
    8002c6dc:	00012417          	auipc	s0,0x12
    8002c6e0:	92440413          	addi	s0,s0,-1756 # 8003e000 <tohost>
    8002c6e4:	00543023          	sd	t0,0(s0)
  while (fromhost == 0)
    8002c6e8:	00093283          	ld	t0,0(s2)
    8002c6ec:	fe028ee3          	beqz	t0,8002c6e8 <vprintfmt.constprop.1+0x5d6>
  fromhost = 0;
    8002c6f0:	00012297          	auipc	t0,0x12
    8002c6f4:	9402b823          	sd	zero,-1712(t0) # 8003e040 <fromhost>
  __sync_synchronize();
    8002c6f8:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002c6fc:	20073283          	ld	t0,512(a4)
    buflen = 0;
    8002c700:	0002c297          	auipc	t0,0x2c
    8002c704:	9c02aa23          	sw	zero,-1580(t0) # 800580d4 <buflen.2>
    8002c708:	b759                	j	8002c68e <vprintfmt.constprop.1+0x57c>
      if (width < 0)
    8002c70a:	82fe                	mv	t0,t6
    8002c70c:	000fd363          	bgez	t6,8002c712 <vprintfmt.constprop.1+0x600>
    8002c710:	4281                	li	t0,0
        ch = *fmt;
    8002c712:	00144483          	lbu	s1,1(s0)
      if (width < 0)
    8002c716:	00028f9b          	sext.w	t6,t0
    switch (ch = *(unsigned char *) fmt++) {
    8002c71a:	842a                	mv	s0,a0
      goto reswitch;
    8002c71c:	b4dd                	j	8002c202 <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8002c71e:	0002c317          	auipc	t1,0x2c
    8002c722:	9b632303          	lw	t1,-1610(t1) # 800580d4 <buflen.2>
      putch(va_arg(ap, int), putdat);
    8002c726:	0003a283          	lw	t0,0(t2)
  buf[buflen++] = ch;
    8002c72a:	0002c917          	auipc	s2,0x2c
    8002c72e:	95690913          	addi	s2,s2,-1706 # 80058080 <buf.1>
    8002c732:	00130f9b          	addiw	t6,t1,1
    8002c736:	934a                	add	t1,t1,s2
    8002c738:	00530023          	sb	t0,0(t1)
    8002c73c:	0002c417          	auipc	s0,0x2c
    8002c740:	99f42c23          	sw	t6,-1640(s0) # 800580d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002c744:	4329                	li	t1,10
    8002c746:	00628863          	beq	t0,t1,8002c756 <vprintfmt.constprop.1+0x644>
    8002c74a:	04000313          	li	t1,64
    8002c74e:	006f8463          	beq	t6,t1,8002c756 <vprintfmt.constprop.1+0x644>
      putch(va_arg(ap, int), putdat);
    8002c752:	03a1                	addi	t2,t2,8
    8002c754:	b415                	j	8002c178 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002c756:	04000313          	li	t1,64
    8002c75a:	28673023          	sd	t1,640(a4)
  magic_mem[1] = arg0;
    8002c75e:	4305                	li	t1,1
    8002c760:	28673423          	sd	t1,648(a4)
  magic_mem[2] = arg1;
    8002c764:	29273823          	sd	s2,656(a4)
  magic_mem[3] = arg2;
    8002c768:	29f73c23          	sd	t6,664(a4)
  __sync_synchronize();
    8002c76c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002c770:	28070313          	addi	t1,a4,640
    8002c774:	00012f97          	auipc	t6,0x12
    8002c778:	886fb623          	sd	t1,-1908(t6) # 8003e000 <tohost>
  while (fromhost == 0)
    8002c77c:	00012317          	auipc	t1,0x12
    8002c780:	8c430313          	addi	t1,t1,-1852 # 8003e040 <fromhost>
    8002c784:	00033f83          	ld	t6,0(t1)
    8002c788:	fe0f8ee3          	beqz	t6,8002c784 <vprintfmt.constprop.1+0x672>
  fromhost = 0;
    8002c78c:	00012317          	auipc	t1,0x12
    8002c790:	8a033a23          	sd	zero,-1868(t1) # 8003e040 <fromhost>
  __sync_synchronize();
    8002c794:	0330000f          	fence	rw,rw
    buflen = 0;
    8002c798:	0002c317          	auipc	t1,0x2c
    8002c79c:	92032e23          	sw	zero,-1732(t1) # 800580d4 <buflen.2>
  return magic_mem[0];
    8002c7a0:	28073303          	ld	t1,640(a4)
      putch(va_arg(ap, int), putdat);
    8002c7a4:	03a1                	addi	t2,t2,8
    8002c7a6:	bac9                	j	8002c178 <vprintfmt.constprop.1+0x66>
    8002c7a8:	836a                	mv	t1,s10
    8002c7aa:	b38d                	j	8002c50c <vprintfmt.constprop.1+0x3fa>
  while (width-- > pos)
    8002c7ac:	4301                	li	t1,0
    8002c7ae:	b395                	j	8002c512 <vprintfmt.constprop.1+0x400>
  buf[buflen++] = ch;
    8002c7b0:	4305                	li	t1,1
    8002c7b2:	b385                	j	8002c512 <vprintfmt.constprop.1+0x400>
    return va_arg(*ap, unsigned long long);
    8002c7b4:	0003b283          	ld	t0,0(t2)
    8002c7b8:	0002c997          	auipc	s3,0x2c
    8002c7bc:	91c98993          	addi	s3,s3,-1764 # 800580d4 <buflen.2>
    8002c7c0:	83a6                	mv	t2,s1
    8002c7c2:	0002c917          	auipc	s2,0x2c
    8002c7c6:	8be90913          	addi	s2,s2,-1858 # 80058080 <buf.1>
    8002c7ca:	b949                	j	8002c45c <vprintfmt.constprop.1+0x34a>
    if (num < base)
    8002c7cc:	4b81                	li	s7,0
    8002c7ce:	b955                	j	8002c482 <vprintfmt.constprop.1+0x370>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c7d0:	0004c283          	lbu	t0,0(s1)
    8002c7d4:	0002899b          	sext.w	s3,t0
    8002c7d8:	e60293e3          	bnez	t0,8002c63e <vprintfmt.constprop.1+0x52c>
    8002c7dc:	46013b83          	ld	s7,1120(sp)
    8002c7e0:	45813c03          	ld	s8,1112(sp)
    8002c7e4:	45013c83          	ld	s9,1104(sp)
    8002c7e8:	44813d03          	ld	s10,1096(sp)
      if ((p = va_arg(ap, char *)) == NULL)
    8002c7ec:	03a1                	addi	t2,t2,8
    8002c7ee:	b269                	j	8002c178 <vprintfmt.constprop.1+0x66>
    return va_arg(*ap, int);
    8002c7f0:	0003a283          	lw	t0,0(t2)
    8002c7f4:	b1a1                	j	8002c43c <vprintfmt.constprop.1+0x32a>
    8002c7f6:	4441                	li	s0,16
    8002c7f8:	00838493          	addi	s1,t2,8
    return va_arg(*ap, unsigned long);
    8002c7fc:	0003b283          	ld	t0,0(t2)
    8002c800:	83a6                	mv	t2,s1
    8002c802:	b9a9                	j	8002c45c <vprintfmt.constprop.1+0x34a>
  magic_mem[0] = which;
    8002c804:	e308                	sd	a0,0(a4)
  magic_mem[1] = arg0;
    8002c806:	4305                	li	t1,1
    8002c808:	00673423          	sd	t1,8(a4)
  magic_mem[2] = arg1;
    8002c80c:	01f73823          	sd	t6,16(a4)
  magic_mem[3] = arg2;
    8002c810:	ef08                	sd	a0,24(a4)
  __sync_synchronize();
    8002c812:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002c816:	00012317          	auipc	t1,0x12
    8002c81a:	82a30313          	addi	t1,t1,-2006 # 8003e040 <fromhost>
    8002c81e:	00011517          	auipc	a0,0x11
    8002c822:	7ee53123          	sd	a4,2018(a0) # 8003e000 <tohost>
  while (fromhost == 0)
    8002c826:	00033503          	ld	a0,0(t1)
    8002c82a:	dd75                	beqz	a0,8002c826 <vprintfmt.constprop.1+0x714>
  fromhost = 0;
    8002c82c:	00012517          	auipc	a0,0x12
    8002c830:	80053a23          	sd	zero,-2028(a0) # 8003e040 <fromhost>
  __sync_synchronize();
    8002c834:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002c838:	6308                	ld	a0,0(a4)
    buflen = 0;
    8002c83a:	0002c517          	auipc	a0,0x2c
    8002c83e:	88052d23          	sw	zero,-1894(a0) # 800580d4 <buflen.2>
      fmt = last_fmt;
    8002c842:	8552                	mv	a0,s4
    8002c844:	ba15                	j	8002c178 <vprintfmt.constprop.1+0x66>
    8002c846:	47713023          	sd	s7,1120(sp)
    8002c84a:	45813c23          	sd	s8,1112(sp)
    8002c84e:	45913823          	sd	s9,1104(sp)
    8002c852:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    8002c856:	4429                	li	s0,10
    8002c858:	b361                	j	8002c5e0 <vprintfmt.constprop.1+0x4ce>
    8002c85a:	47713023          	sd	s7,1120(sp)
    8002c85e:	45813c23          	sd	s8,1112(sp)
    8002c862:	45913823          	sd	s9,1104(sp)
    8002c866:	45a13423          	sd	s10,1096(sp)
    8002c86a:	4421                	li	s0,8
    8002c86c:	bb95                	j	8002c5e0 <vprintfmt.constprop.1+0x4ce>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c86e:	8926                	mv	s2,s1
  if (ch == '\n' || buflen == sizeof(buf))
    8002c870:	4a29                	li	s4,10
    8002c872:	04000a93          	li	s5,64
    8002c876:	a801                	j	8002c886 <vprintfmt.constprop.1+0x774>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c878:	00194283          	lbu	t0,1(s2)
        p++;
    8002c87c:	0905                	addi	s2,s2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002c87e:	0002899b          	sext.w	s3,t0
    8002c882:	06028963          	beqz	t0,8002c8f4 <vprintfmt.constprop.1+0x7e2>
  buf[buflen++] = ch;
    8002c886:	0002c317          	auipc	t1,0x2c
    8002c88a:	84e32303          	lw	t1,-1970(t1) # 800580d4 <buflen.2>
    8002c88e:	0013041b          	addiw	s0,t1,1
    8002c892:	935a                	add	t1,t1,s6
    8002c894:	008ba023          	sw	s0,0(s7)
    8002c898:	00530023          	sb	t0,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002c89c:	01498463          	beq	s3,s4,8002c8a4 <vprintfmt.constprop.1+0x792>
    8002c8a0:	fd541ce3          	bne	s0,s5,8002c878 <vprintfmt.constprop.1+0x766>
  magic_mem[0] = which;
    8002c8a4:	04000313          	li	t1,64
    8002c8a8:	20673023          	sd	t1,512(a4)
  magic_mem[1] = arg0;
    8002c8ac:	4305                	li	t1,1
    8002c8ae:	20673423          	sd	t1,520(a4)
  magic_mem[2] = arg1;
    8002c8b2:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    8002c8b6:	20873c23          	sd	s0,536(a4)
  __sync_synchronize();
    8002c8ba:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002c8be:	20070313          	addi	t1,a4,512
    8002c8c2:	00011297          	auipc	t0,0x11
    8002c8c6:	7262bf23          	sd	t1,1854(t0) # 8003e000 <tohost>
  while (fromhost == 0)
    8002c8ca:	00011297          	auipc	t0,0x11
    8002c8ce:	77628293          	addi	t0,t0,1910 # 8003e040 <fromhost>
    8002c8d2:	0002b303          	ld	t1,0(t0)
    8002c8d6:	fe030ee3          	beqz	t1,8002c8d2 <vprintfmt.constprop.1+0x7c0>
  fromhost = 0;
    8002c8da:	00011317          	auipc	t1,0x11
    8002c8de:	76033323          	sd	zero,1894(t1) # 8003e040 <fromhost>
  __sync_synchronize();
    8002c8e2:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002c8e6:	20073303          	ld	t1,512(a4)
    buflen = 0;
    8002c8ea:	0002b317          	auipc	t1,0x2b
    8002c8ee:	7e032523          	sw	zero,2026(t1) # 800580d4 <buflen.2>
    8002c8f2:	b759                	j	8002c878 <vprintfmt.constprop.1+0x766>
    8002c8f4:	009f8fbb          	addw	t6,t6,s1
    8002c8f8:	412f8fbb          	subw	t6,t6,s2
      for (; width > 0; width--)
    8002c8fc:	eff050e3          	blez	t6,8002c7dc <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    8002c900:	0002b317          	auipc	t1,0x2b
    8002c904:	7d432303          	lw	t1,2004(t1) # 800580d4 <buflen.2>
    8002c908:	0002b997          	auipc	s3,0x2b
    8002c90c:	7cc98993          	addi	s3,s3,1996 # 800580d4 <buflen.2>
    8002c910:	0002b917          	auipc	s2,0x2b
    8002c914:	77090913          	addi	s2,s2,1904 # 80058080 <buf.1>
    8002c918:	02000a13          	li	s4,32
  if (ch == '\n' || buflen == sizeof(buf))
    8002c91c:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    8002c920:	4a85                	li	s5,1
  tohost = (uintptr_t)magic_mem;
    8002c922:	1c070b93          	addi	s7,a4,448
    8002c926:	00011b17          	auipc	s6,0x11
    8002c92a:	6dab0b13          	addi	s6,s6,1754 # 8003e000 <tohost>
    8002c92e:	00011297          	auipc	t0,0x11
    8002c932:	71228293          	addi	t0,t0,1810 # 8003e040 <fromhost>
  buf[buflen++] = ch;
    8002c936:	4c09                	li	s8,2
    8002c938:	0013041b          	addiw	s0,t1,1
    8002c93c:	934a                	add	t1,t1,s2
    8002c93e:	0089a023          	sw	s0,0(s3)
    8002c942:	01430023          	sb	s4,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002c946:	04941e63          	bne	s0,s1,8002c9a2 <vprintfmt.constprop.1+0x890>
  magic_mem[0] = which;
    8002c94a:	1c973023          	sd	s1,448(a4)
  magic_mem[1] = arg0;
    8002c94e:	1d573423          	sd	s5,456(a4)
  magic_mem[2] = arg1;
    8002c952:	1d273823          	sd	s2,464(a4)
  magic_mem[3] = arg2;
    8002c956:	1c973c23          	sd	s1,472(a4)
  __sync_synchronize();
    8002c95a:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002c95e:	017b3023          	sd	s7,0(s6)
  while (fromhost == 0)
    8002c962:	0002b303          	ld	t1,0(t0)
    8002c966:	fe030ee3          	beqz	t1,8002c962 <vprintfmt.constprop.1+0x850>
  fromhost = 0;
    8002c96a:	00011317          	auipc	t1,0x11
    8002c96e:	6c033b23          	sd	zero,1750(t1) # 8003e040 <fromhost>
  __sync_synchronize();
    8002c972:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002c976:	1c073303          	ld	t1,448(a4)
      for (; width > 0; width--)
    8002c97a:	ffff831b          	addiw	t1,t6,-1
    8002c97e:	0c030163          	beqz	t1,8002ca40 <vprintfmt.constprop.1+0x92e>
  buf[buflen++] = ch;
    8002c982:	0159a023          	sw	s5,0(s3)
    8002c986:	01490023          	sb	s4,0(s2)
      for (; width > 0; width--)
    8002c98a:	3ff9                	addiw	t6,t6,-2
    8002c98c:	e40f88e3          	beqz	t6,8002c7dc <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    8002c990:	0189a023          	sw	s8,0(s3)
    8002c994:	014900a3          	sb	s4,1(s2)
    8002c998:	4309                	li	t1,2
      for (; width > 0; width--)
    8002c99a:	3ffd                	addiw	t6,t6,-1
    8002c99c:	f80f9ee3          	bnez	t6,8002c938 <vprintfmt.constprop.1+0x826>
    8002c9a0:	bd35                	j	8002c7dc <vprintfmt.constprop.1+0x6ca>
    8002c9a2:	8322                	mv	t1,s0
    8002c9a4:	bfdd                	j	8002c99a <vprintfmt.constprop.1+0x888>
  buf[buflen++] = ch;
    8002c9a6:	0002b917          	auipc	s2,0x2b
    8002c9aa:	6da90913          	addi	s2,s2,1754 # 80058080 <buf.1>
    8002c9ae:	006904b3          	add	s1,s2,t1
    8002c9b2:	0013039b          	addiw	t2,t1,1
    8002c9b6:	02d00313          	li	t1,45
    8002c9ba:	00648023          	sb	t1,0(s1)
    8002c9be:	0079a023          	sw	t2,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002c9c2:	04000493          	li	s1,64
  buf[buflen++] = ch;
    8002c9c6:	831e                	mv	t1,t2
  if (ch == '\n' || buflen == sizeof(buf))
    8002c9c8:	18938263          	beq	t2,s1,8002cb4c <vprintfmt.constprop.1+0xa3a>
        num = -(long long) num;
    8002c9cc:	83a2                	mv	t2,s0
    8002c9ce:	405002b3          	neg	t0,t0
    8002c9d2:	4429                	li	s0,10
    8002c9d4:	b461                	j	8002c45c <vprintfmt.constprop.1+0x34a>
    8002c9d6:	0002b997          	auipc	s3,0x2b
    8002c9da:	6fe98993          	addi	s3,s3,1790 # 800580d4 <buflen.2>
    8002c9de:	0002b917          	auipc	s2,0x2b
    8002c9e2:	6a290913          	addi	s2,s2,1698 # 80058080 <buf.1>
    8002c9e6:	bd19                	j	8002c7fc <vprintfmt.constprop.1+0x6ea>
  magic_mem[0] = which;
    8002c9e8:	14573023          	sd	t0,320(a4)
  magic_mem[1] = arg0;
    8002c9ec:	4305                	li	t1,1
    8002c9ee:	14673423          	sd	t1,328(a4)
  magic_mem[2] = arg1;
    8002c9f2:	15273823          	sd	s2,336(a4)
  magic_mem[3] = arg2;
    8002c9f6:	14573c23          	sd	t0,344(a4)
  __sync_synchronize();
    8002c9fa:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002c9fe:	14070313          	addi	t1,a4,320
    8002ca02:	00011297          	auipc	t0,0x11
    8002ca06:	5e62bf23          	sd	t1,1534(t0) # 8003e000 <tohost>
  while (fromhost == 0)
    8002ca0a:	00011317          	auipc	t1,0x11
    8002ca0e:	63630313          	addi	t1,t1,1590 # 8003e040 <fromhost>
    8002ca12:	00033283          	ld	t0,0(t1)
    8002ca16:	fe028ee3          	beqz	t0,8002ca12 <vprintfmt.constprop.1+0x900>
  fromhost = 0;
    8002ca1a:	00011317          	auipc	t1,0x11
    8002ca1e:	62033323          	sd	zero,1574(t1) # 8003e040 <fromhost>
  __sync_synchronize();
    8002ca22:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002ca26:	14073403          	ld	s0,320(a4)
  buf[buflen++] = ch;
    8002ca2a:	07800293          	li	t0,120
    8002ca2e:	4305                	li	t1,1
    8002ca30:	00590023          	sb	t0,0(s2)
    8002ca34:	0069a023          	sw	t1,0(s3)
    8002ca38:	00838493          	addi	s1,t2,8
    8002ca3c:	4441                	li	s0,16
    8002ca3e:	bb7d                	j	8002c7fc <vprintfmt.constprop.1+0x6ea>
    buflen = 0;
    8002ca40:	0002b317          	auipc	t1,0x2b
    8002ca44:	68032a23          	sw	zero,1684(t1) # 800580d4 <buflen.2>
    8002ca48:	bb51                	j	8002c7dc <vprintfmt.constprop.1+0x6ca>
      if (width > 0 && padc != '-')
    8002ca4a:	01f05663          	blez	t6,8002ca56 <vprintfmt.constprop.1+0x944>
    8002ca4e:	02d00293          	li	t0,45
    8002ca52:	005a9a63          	bne	s5,t0,8002ca66 <vprintfmt.constprop.1+0x954>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002ca56:	02800293          	li	t0,40
    8002ca5a:	8996                	mv	s3,t0
        p = "(null)";
    8002ca5c:	0000f497          	auipc	s1,0xf
    8002ca60:	36c48493          	addi	s1,s1,876 # 8003bdc8 <__func__.0+0xc0d8>
    8002ca64:	bee9                	j	8002c63e <vprintfmt.constprop.1+0x52c>
    8002ca66:	0000f497          	auipc	s1,0xf
    8002ca6a:	36248493          	addi	s1,s1,866 # 8003bdc8 <__func__.0+0xc0d8>
  const char *p = s;
    8002ca6e:	82a6                	mv	t0,s1
  while (n-- && *p)
    8002ca70:	00648933          	add	s2,s1,t1
    8002ca74:	00031663          	bnez	t1,8002ca80 <vprintfmt.constprop.1+0x96e>
    8002ca78:	a829                	j	8002ca92 <vprintfmt.constprop.1+0x980>
    p++;
    8002ca7a:	0285                	addi	t0,t0,1
  while (n-- && *p)
    8002ca7c:	01228563          	beq	t0,s2,8002ca86 <vprintfmt.constprop.1+0x974>
    8002ca80:	0002c403          	lbu	s0,0(t0)
    8002ca84:	f87d                	bnez	s0,8002ca7a <vprintfmt.constprop.1+0x968>
  return p - s;
    8002ca86:	409282b3          	sub	t0,t0,s1
        for (width -= strnlen(p, precision); width > 0; width--)
    8002ca8a:	405f8fbb          	subw	t6,t6,t0
    8002ca8e:	d5f051e3          	blez	t6,8002c7d0 <vprintfmt.constprop.1+0x6be>
  buf[buflen++] = ch;
    8002ca92:	0002b297          	auipc	t0,0x2b
    8002ca96:	6422a283          	lw	t0,1602(t0) # 800580d4 <buflen.2>
    8002ca9a:	0002b997          	auipc	s3,0x2b
    8002ca9e:	63a98993          	addi	s3,s3,1594 # 800580d4 <buflen.2>
    8002caa2:	0002b917          	auipc	s2,0x2b
    8002caa6:	5de90913          	addi	s2,s2,1502 # 80058080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002caaa:	04000a13          	li	s4,64
  magic_mem[1] = arg0;
    8002caae:	4b05                	li	s6,1
  tohost = (uintptr_t)magic_mem;
    8002cab0:	24070c93          	addi	s9,a4,576
    8002cab4:	00011c17          	auipc	s8,0x11
    8002cab8:	54cc0c13          	addi	s8,s8,1356 # 8003e000 <tohost>
    8002cabc:	00011417          	auipc	s0,0x11
    8002cac0:	58440413          	addi	s0,s0,1412 # 8003e040 <fromhost>
  buf[buflen++] = ch;
    8002cac4:	4b89                	li	s7,2
    8002cac6:	00128d1b          	addiw	s10,t0,1
    8002caca:	92ca                	add	t0,t0,s2
    8002cacc:	01a9a023          	sw	s10,0(s3)
    8002cad0:	01528023          	sb	s5,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002cad4:	074d1563          	bne	s10,s4,8002cb3e <vprintfmt.constprop.1+0xa2c>
  magic_mem[0] = which;
    8002cad8:	25473023          	sd	s4,576(a4)
  magic_mem[1] = arg0;
    8002cadc:	25673423          	sd	s6,584(a4)
  magic_mem[2] = arg1;
    8002cae0:	25273823          	sd	s2,592(a4)
  magic_mem[3] = arg2;
    8002cae4:	25473c23          	sd	s4,600(a4)
  __sync_synchronize();
    8002cae8:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002caec:	019c3023          	sd	s9,0(s8)
  while (fromhost == 0)
    8002caf0:	00043283          	ld	t0,0(s0)
    8002caf4:	fe028ee3          	beqz	t0,8002caf0 <vprintfmt.constprop.1+0x9de>
  fromhost = 0;
    8002caf8:	00011297          	auipc	t0,0x11
    8002cafc:	5402b423          	sd	zero,1352(t0) # 8003e040 <fromhost>
  __sync_synchronize();
    8002cb00:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002cb04:	24073283          	ld	t0,576(a4)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002cb08:	ffff829b          	addiw	t0,t6,-1
    8002cb0c:	08028763          	beqz	t0,8002cb9a <vprintfmt.constprop.1+0xa88>
  buf[buflen++] = ch;
    8002cb10:	0169a023          	sw	s6,0(s3)
    8002cb14:	01590023          	sb	s5,0(s2)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002cb18:	3ff9                	addiw	t6,t6,-2
    8002cb1a:	000f8a63          	beqz	t6,8002cb2e <vprintfmt.constprop.1+0xa1c>
  buf[buflen++] = ch;
    8002cb1e:	0179a023          	sw	s7,0(s3)
    8002cb22:	015900a3          	sb	s5,1(s2)
    8002cb26:	4289                	li	t0,2
        for (width -= strnlen(p, precision); width > 0; width--)
    8002cb28:	3ffd                	addiw	t6,t6,-1
    8002cb2a:	f80f9ee3          	bnez	t6,8002cac6 <vprintfmt.constprop.1+0x9b4>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002cb2e:	0004c283          	lbu	t0,0(s1)
    8002cb32:	0002899b          	sext.w	s3,t0
    8002cb36:	ca0283e3          	beqz	t0,8002c7dc <vprintfmt.constprop.1+0x6ca>
    8002cb3a:	4f81                	li	t6,0
    8002cb3c:	b609                	j	8002c63e <vprintfmt.constprop.1+0x52c>
    8002cb3e:	82ea                	mv	t0,s10
    8002cb40:	b7e5                	j	8002cb28 <vprintfmt.constprop.1+0xa16>
    switch (ch = *(unsigned char *) fmt++) {
    8002cb42:	46013b83          	ld	s7,1120(sp)
    8002cb46:	842a                	mv	s0,a0
    8002cb48:	f8cff06f          	j	8002c2d4 <vprintfmt.constprop.1+0x1c2>
  magic_mem[0] = which;
    8002cb4c:	18773023          	sd	t2,384(a4)
  magic_mem[1] = arg0;
    8002cb50:	4305                	li	t1,1
    8002cb52:	18673423          	sd	t1,392(a4)
  magic_mem[2] = arg1;
    8002cb56:	19273823          	sd	s2,400(a4)
  magic_mem[3] = arg2;
    8002cb5a:	18773c23          	sd	t2,408(a4)
  __sync_synchronize();
    8002cb5e:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002cb62:	18070313          	addi	t1,a4,384
    8002cb66:	00011397          	auipc	t2,0x11
    8002cb6a:	4863bd23          	sd	t1,1178(t2) # 8003e000 <tohost>
  while (fromhost == 0)
    8002cb6e:	00011317          	auipc	t1,0x11
    8002cb72:	4d230313          	addi	t1,t1,1234 # 8003e040 <fromhost>
    8002cb76:	00033383          	ld	t2,0(t1)
    8002cb7a:	fe038ee3          	beqz	t2,8002cb76 <vprintfmt.constprop.1+0xa64>
  fromhost = 0;
    8002cb7e:	00011317          	auipc	t1,0x11
    8002cb82:	4c033123          	sd	zero,1218(t1) # 8003e040 <fromhost>
  __sync_synchronize();
    8002cb86:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002cb8a:	18073303          	ld	t1,384(a4)
    buflen = 0;
    8002cb8e:	0002b317          	auipc	t1,0x2b
    8002cb92:	54032323          	sw	zero,1350(t1) # 800580d4 <buflen.2>
    8002cb96:	4301                	li	t1,0
    8002cb98:	bd15                	j	8002c9cc <vprintfmt.constprop.1+0x8ba>
    8002cb9a:	0002bf97          	auipc	t6,0x2b
    8002cb9e:	520fad23          	sw	zero,1338(t6) # 800580d4 <buflen.2>
    8002cba2:	b771                	j	8002cb2e <vprintfmt.constprop.1+0xa1c>

000000008002cba4 <strlen>:
  while (*p)
    8002cba4:	00054783          	lbu	a5,0(a0)
    8002cba8:	c78d                	beqz	a5,8002cbd2 <strlen+0x2e>
    8002cbaa:	4701                	li	a4,0
    8002cbac:	00150793          	addi	a5,a0,1
    8002cbb0:	0c0076d7          	vsetvli	a3,zero,e8,m1,ta,ma
    8002cbb4:	97ba                	add	a5,a5,a4
    8002cbb6:	03078087          	vle8ff.v	v1,(a5)
    8002cbba:	621030d7          	vmseq.vi	v1,v1,0
    8002cbbe:	c2002773          	csrr	a4,vl
    8002cbc2:	4218a657          	vfirst.m	a2,v1
    8002cbc6:	fe0645e3          	bltz	a2,8002cbb0 <strlen+0xc>
    8002cbca:	97b2                	add	a5,a5,a2
  return p - s;
    8002cbcc:	40a78533          	sub	a0,a5,a0
    8002cbd0:	8082                	ret
  while (*p)
    8002cbd2:	4501                	li	a0,0
}
    8002cbd4:	8082                	ret

000000008002cbd6 <strnlen>:
  while (n-- && *p)
    8002cbd6:	00b506b3          	add	a3,a0,a1
  const char *p = s;
    8002cbda:	87aa                	mv	a5,a0
  while (n-- && *p)
    8002cbdc:	e589                	bnez	a1,8002cbe6 <strnlen+0x10>
    8002cbde:	a811                	j	8002cbf2 <strnlen+0x1c>
    p++;
    8002cbe0:	0785                	addi	a5,a5,1
  while (n-- && *p)
    8002cbe2:	00d78563          	beq	a5,a3,8002cbec <strnlen+0x16>
    8002cbe6:	0007c703          	lbu	a4,0(a5)
    8002cbea:	fb7d                	bnez	a4,8002cbe0 <strnlen+0xa>
  return p - s;
    8002cbec:	40a78533          	sub	a0,a5,a0
}
    8002cbf0:	8082                	ret
  while (n-- && *p)
    8002cbf2:	4501                	li	a0,0
    8002cbf4:	8082                	ret

000000008002cbf6 <setStats>:
  READ_CTR(mcycle);
    8002cbf6:	b0002773          	csrr	a4,mcycle
    8002cbfa:	0002b797          	auipc	a5,0x2b
    8002cbfe:	48678793          	addi	a5,a5,1158 # 80058080 <buf.1>
    8002cc02:	c511                	beqz	a0,8002cc0e <setStats+0x18>
    8002cc04:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8002cc06:	b0202773          	csrr	a4,minstret
    8002cc0a:	e7b8                	sd	a4,72(a5)
}
    8002cc0c:	8082                	ret
  READ_CTR(mcycle);
    8002cc0e:	63b4                	ld	a3,64(a5)
    8002cc10:	8f15                	sub	a4,a4,a3
    8002cc12:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8002cc14:	b0202773          	csrr	a4,minstret
    8002cc18:	67b4                	ld	a3,72(a5)
    8002cc1a:	8f15                	sub	a4,a4,a3
    8002cc1c:	e7b8                	sd	a4,72(a5)
}
    8002cc1e:	8082                	ret

000000008002cc20 <tohost_exit>:
  tohost = (code << 1) | 1;
    8002cc20:	00151793          	slli	a5,a0,0x1
    8002cc24:	0017e793          	ori	a5,a5,1
    8002cc28:	00011717          	auipc	a4,0x11
    8002cc2c:	3cf73c23          	sd	a5,984(a4) # 8003e000 <tohost>
  while (1);
    8002cc30:	a001                	j	8002cc30 <tohost_exit+0x10>

000000008002cc32 <handle_trap>:
  tohost = (code << 1) | 1;
    8002cc32:	6785                	lui	a5,0x1
    8002cc34:	a7378793          	addi	a5,a5,-1421 # a73 <_test_table_size+0xa72>
    8002cc38:	00011717          	auipc	a4,0x11
    8002cc3c:	3cf73423          	sd	a5,968(a4) # 8003e000 <tohost>
  while (1);
    8002cc40:	a001                	j	8002cc40 <handle_trap+0xe>

000000008002cc42 <exit>:
{
    8002cc42:	1141                	addi	sp,sp,-16
    8002cc44:	e406                	sd	ra,8(sp)
  tohost_exit(code);
    8002cc46:	fdbff0ef          	jal	8002cc20 <tohost_exit>

000000008002cc4a <abort>:
  tohost = (code << 1) | 1;
    8002cc4a:	10d00793          	li	a5,269
    8002cc4e:	00011717          	auipc	a4,0x11
    8002cc52:	3af73923          	sd	a5,946(a4) # 8003e000 <tohost>
  while (1);
    8002cc56:	a001                	j	8002cc56 <abort+0xc>

000000008002cc58 <printstr>:
  while (*p)
    8002cc58:	00054783          	lbu	a5,0(a0)
{
    8002cc5c:	7159                	addi	sp,sp,-112
    8002cc5e:	03f10693          	addi	a3,sp,63
    8002cc62:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002cc66:	cfb9                	beqz	a5,8002ccc4 <printstr+0x6c>
    8002cc68:	4701                	li	a4,0
    8002cc6a:	00150793          	addi	a5,a0,1
    8002cc6e:	0c007657          	vsetvli	a2,zero,e8,m1,ta,ma
    8002cc72:	97ba                	add	a5,a5,a4
    8002cc74:	03078087          	vle8ff.v	v1,(a5)
    8002cc78:	621030d7          	vmseq.vi	v1,v1,0
    8002cc7c:	c2002773          	csrr	a4,vl
    8002cc80:	4218a5d7          	vfirst.m	a1,v1
    8002cc84:	fe05c5e3          	bltz	a1,8002cc6e <printstr+0x16>
    8002cc88:	97ae                	add	a5,a5,a1
  return p - s;
    8002cc8a:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8002cc8c:	04000713          	li	a4,64
    8002cc90:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8002cc92:	4705                	li	a4,1
    8002cc94:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8002cc96:	ea88                	sd	a0,16(a3)
  magic_mem[3] = arg2;
    8002cc98:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8002cc9a:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002cc9e:	00011717          	auipc	a4,0x11
    8002cca2:	3a270713          	addi	a4,a4,930 # 8003e040 <fromhost>
    8002cca6:	00011797          	auipc	a5,0x11
    8002ccaa:	34d7bd23          	sd	a3,858(a5) # 8003e000 <tohost>
  while (fromhost == 0)
    8002ccae:	631c                	ld	a5,0(a4)
    8002ccb0:	dffd                	beqz	a5,8002ccae <printstr+0x56>
  fromhost = 0;
    8002ccb2:	00011797          	auipc	a5,0x11
    8002ccb6:	3807b723          	sd	zero,910(a5) # 8003e040 <fromhost>
  __sync_synchronize();
    8002ccba:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002ccbe:	629c                	ld	a5,0(a3)
}
    8002ccc0:	6165                	addi	sp,sp,112
    8002ccc2:	8082                	ret
  while (*p)
    8002ccc4:	4781                	li	a5,0
    8002ccc6:	b7d9                	j	8002cc8c <printstr+0x34>

000000008002ccc8 <puts>:
    8002ccc8:	00054783          	lbu	a5,0(a0)
{
    8002cccc:	7171                	addi	sp,sp,-176
    8002ccce:	03f10693          	addi	a3,sp,63
    8002ccd2:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002ccd6:	cfdd                	beqz	a5,8002cd94 <puts+0xcc>
    8002ccd8:	4601                	li	a2,0
    8002ccda:	00150793          	addi	a5,a0,1
    8002ccde:	0c007757          	vsetvli	a4,zero,e8,m1,ta,ma
    8002cce2:	97b2                	add	a5,a5,a2
    8002cce4:	03078087          	vle8ff.v	v1,(a5)
    8002cce8:	621030d7          	vmseq.vi	v1,v1,0
    8002ccec:	c2002673          	csrr	a2,vl
    8002ccf0:	4218a5d7          	vfirst.m	a1,v1
    8002ccf4:	fe05c5e3          	bltz	a1,8002ccde <puts+0x16>
    8002ccf8:	97ae                	add	a5,a5,a1
  return p - s;
    8002ccfa:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8002ccfc:	04000713          	li	a4,64
    8002cd00:	e2b8                	sd	a4,64(a3)
  magic_mem[1] = arg0;
    8002cd02:	4705                	li	a4,1
    8002cd04:	e6b8                	sd	a4,72(a3)
  magic_mem[2] = arg1;
    8002cd06:	eaa8                	sd	a0,80(a3)
  magic_mem[3] = arg2;
    8002cd08:	eebc                	sd	a5,88(a3)
  __sync_synchronize();
    8002cd0a:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002cd0e:	00011617          	auipc	a2,0x11
    8002cd12:	2f260613          	addi	a2,a2,754 # 8003e000 <tohost>
    8002cd16:	04068793          	addi	a5,a3,64
    8002cd1a:	e21c                	sd	a5,0(a2)
  while (fromhost == 0)
    8002cd1c:	00011797          	auipc	a5,0x11
    8002cd20:	32478793          	addi	a5,a5,804 # 8003e040 <fromhost>
    8002cd24:	6398                	ld	a4,0(a5)
    8002cd26:	df7d                	beqz	a4,8002cd24 <puts+0x5c>
  fromhost = 0;
    8002cd28:	00011717          	auipc	a4,0x11
    8002cd2c:	30073c23          	sd	zero,792(a4) # 8003e040 <fromhost>
  __sync_synchronize();
    8002cd30:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002cd34:	62b8                	ld	a4,64(a3)
  magic_mem[0] = which;
    8002cd36:	04000593          	li	a1,64
    8002cd3a:	e28c                	sd	a1,0(a3)
  magic_mem[1] = arg0;
    8002cd3c:	4705                	li	a4,1
    8002cd3e:	e698                	sd	a4,8(a3)
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    8002cd40:	0000f597          	auipc	a1,0xf
    8002cd44:	09058593          	addi	a1,a1,144 # 8003bdd0 <__func__.0+0xc0e0>
  magic_mem[2] = arg1;
    8002cd48:	ea8c                	sd	a1,16(a3)
  magic_mem[3] = arg2;
    8002cd4a:	ee98                	sd	a4,24(a3)
  __sync_synchronize();
    8002cd4c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002cd50:	e214                	sd	a3,0(a2)
  while (fromhost == 0)
    8002cd52:	6398                	ld	a4,0(a5)
    8002cd54:	df7d                	beqz	a4,8002cd52 <puts+0x8a>
  fromhost = 0;
    8002cd56:	00011797          	auipc	a5,0x11
    8002cd5a:	2e07b523          	sd	zero,746(a5) # 8003e040 <fromhost>
  __sync_synchronize();
    8002cd5e:	0330000f          	fence	rw,rw
  while (*p)
    8002cd62:	00054783          	lbu	a5,0(a0)
  return magic_mem[0];
    8002cd66:	6298                	ld	a4,0(a3)
  while (*p)
    8002cd68:	cb85                	beqz	a5,8002cd98 <puts+0xd0>
    8002cd6a:	4681                	li	a3,0
    8002cd6c:	00150793          	addi	a5,a0,1
    8002cd70:	0c007757          	vsetvli	a4,zero,e8,m1,ta,ma
    8002cd74:	97b6                	add	a5,a5,a3
    8002cd76:	03078087          	vle8ff.v	v1,(a5)
    8002cd7a:	621030d7          	vmseq.vi	v1,v1,0
    8002cd7e:	c20026f3          	csrr	a3,vl
    8002cd82:	4218a657          	vfirst.m	a2,v1
    8002cd86:	fe0645e3          	bltz	a2,8002cd70 <puts+0xa8>
    8002cd8a:	97b2                	add	a5,a5,a2
  return strlen(s);
    8002cd8c:	40a7853b          	subw	a0,a5,a0
}
    8002cd90:	614d                	addi	sp,sp,176
    8002cd92:	8082                	ret
  while (*p)
    8002cd94:	4781                	li	a5,0
    8002cd96:	b79d                	j	8002ccfc <puts+0x34>
    8002cd98:	4501                	li	a0,0
}
    8002cd9a:	614d                	addi	sp,sp,176
    8002cd9c:	8082                	ret

000000008002cd9e <thread_entry>:
  while (cid != 0);
    8002cd9e:	e111                	bnez	a0,8002cda2 <thread_entry+0x4>
}
    8002cda0:	8082                	ret
  while (cid != 0);
    8002cda2:	a001                	j	8002cda2 <thread_entry+0x4>

000000008002cda4 <printhex>:
  for (i = 0; i < 16; i++)
    8002cda4:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    8002cda8:	5208a157          	vid.v	v2
    8002cdac:	5e0540d7          	vmv.v.x	v1,a0
    8002cdb0:	96213157          	vsll.vi	v2,v2,2
    8002cdb4:	03800613          	li	a2,56
    8002cdb8:	03000793          	li	a5,48
    8002cdbc:	a21100d7          	vsrl.vv	v1,v1,v2
    8002cdc0:	02000693          	li	a3,32
    8002cdc4:	02800713          	li	a4,40
    8002cdc8:	a2164157          	vsrl.vx	v2,v1,a2
    8002cdcc:	a217c857          	vsrl.vx	v16,v1,a5
    8002cdd0:	a216c457          	vsrl.vx	v8,v1,a3
    8002cdd4:	a21747d7          	vsrl.vx	v15,v1,a4
    8002cdd8:	a21433d7          	vsrl.vi	v7,v1,8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002cddc:	a2183357          	vsrl.vi	v6,v1,16
    8002cde0:	a21c32d7          	vsrl.vi	v5,v1,24
    8002cde4:	0d707057          	vsetvli	zero,zero,e32,mf2,ta,ma
    8002cde8:	b22044d7          	vncvt.x.x.w	v9,v2
    8002cdec:	b21046d7          	vncvt.x.x.w	v13,v1
    8002cdf0:	b2704657          	vncvt.x.x.w	v12,v7
    8002cdf4:	b26045d7          	vncvt.x.x.w	v11,v6
    8002cdf8:	b2504557          	vncvt.x.x.w	v10,v5
    8002cdfc:	b2804257          	vncvt.x.x.w	v4,v8
    8002ce00:	b2f041d7          	vncvt.x.x.w	v3,v15
    8002ce04:	b3004757          	vncvt.x.x.w	v14,v16
    8002ce08:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ce0c:	b29044d7          	vncvt.x.x.w	v9,v9
    8002ce10:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ce14:	2627b157          	vand.vi	v2,v2,15
    8002ce18:	2617b0d7          	vand.vi	v1,v1,15
    8002ce1c:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ce20:	b2d046d7          	vncvt.x.x.w	v13,v13
    8002ce24:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ce28:	2677b3d7          	vand.vi	v7,v7,15
    8002ce2c:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ce30:	b2c04657          	vncvt.x.x.w	v12,v12
    8002ce34:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ce38:	2667b357          	vand.vi	v6,v6,15
    8002ce3c:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ce40:	b2b045d7          	vncvt.x.x.w	v11,v11
    8002ce44:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ce48:	2657b2d7          	vand.vi	v5,v5,15
    8002ce4c:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ce50:	b2a04557          	vncvt.x.x.w	v10,v10
    8002ce54:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ce58:	2687b457          	vand.vi	v8,v8,15
    8002ce5c:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ce60:	b2404257          	vncvt.x.x.w	v4,v4
    8002ce64:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ce68:	26f7b7d7          	vand.vi	v15,v15,15
    8002ce6c:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ce70:	b23041d7          	vncvt.x.x.w	v3,v3
    8002ce74:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ce78:	2707b8d7          	vand.vi	v17,v16,15
    8002ce7c:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ce80:	b2e04757          	vncvt.x.x.w	v14,v14
    8002ce84:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ce88:	b29044d7          	vncvt.x.x.w	v9,v9
    8002ce8c:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ce90:	7224b057          	vmsleu.vi	v0,v2,9
    8002ce94:	05700713          	li	a4,87
    8002ce98:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ce9c:	5e074157          	vmv.v.x	v2,a4
    8002cea0:	5e07c9d7          	vmv.v.x	v19,a5
    8002cea4:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002cea8:	7214b0d7          	vmsleu.vi	v1,v1,9
    8002ceac:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ceb0:	b2d046d7          	vncvt.x.x.w	v13,v13
    8002ceb4:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ceb8:	7274b3d7          	vmsleu.vi	v7,v7,9
    8002cebc:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002cec0:	b2c04657          	vncvt.x.x.w	v12,v12
    8002cec4:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002cec8:	7264b357          	vmsleu.vi	v6,v6,9
    8002cecc:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ced0:	b2b045d7          	vncvt.x.x.w	v11,v11
    8002ced4:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ced8:	7254b2d7          	vmsleu.vi	v5,v5,9
    8002cedc:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002cee0:	b2a04557          	vncvt.x.x.w	v10,v10
    8002cee4:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002cee8:	7284b457          	vmsleu.vi	v8,v8,9
    8002ceec:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002cef0:	b2404257          	vncvt.x.x.w	v4,v4
    8002cef4:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002cef8:	72f4b7d7          	vmsleu.vi	v15,v15,9
    8002cefc:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002cf00:	b23041d7          	vncvt.x.x.w	v3,v3
    8002cf04:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002cf08:	7314b8d7          	vmsleu.vi	v17,v17,9
    8002cf0c:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002cf10:	9f303957          	vmv1r.v	v18,v19
    8002cf14:	9f303b57          	vmv1r.v	v22,v19
    8002cf18:	9f303bd7          	vmv1r.v	v23,v19
    8002cf1c:	9f303857          	vmv1r.v	v16,v19
    8002cf20:	9f303c57          	vmv1r.v	v24,v19
    8002cf24:	9f303ad7          	vmv1r.v	v21,v19
    8002cf28:	9f303a57          	vmv1r.v	v20,v19
    8002cf2c:	5c2989d7          	vmerge.vvm	v19,v2,v19,v0
    8002cf30:	9e103057          	vmv1r.v	v0,v1
    8002cf34:	b2e04757          	vncvt.x.x.w	v14,v14
    8002cf38:	2697b4d7          	vand.vi	v9,v9,15
    8002cf3c:	5c290957          	vmerge.vvm	v18,v2,v18,v0
    8002cf40:	9e703057          	vmv1r.v	v0,v7
    8002cf44:	26d7b6d7          	vand.vi	v13,v13,15
    8002cf48:	26c7b657          	vand.vi	v12,v12,15
    8002cf4c:	5c2b0b57          	vmerge.vvm	v22,v2,v22,v0
    8002cf50:	9e603057          	vmv1r.v	v0,v6
    8002cf54:	26b7b5d7          	vand.vi	v11,v11,15
    8002cf58:	26a7b557          	vand.vi	v10,v10,15
    8002cf5c:	5c2b8bd7          	vmerge.vvm	v23,v2,v23,v0
    8002cf60:	9e503057          	vmv1r.v	v0,v5
    8002cf64:	2647b257          	vand.vi	v4,v4,15
    8002cf68:	26e7b2d7          	vand.vi	v5,v14,15
    8002cf6c:	5c280857          	vmerge.vvm	v16,v2,v16,v0
    8002cf70:	9e803057          	vmv1r.v	v0,v8
    8002cf74:	2637b1d7          	vand.vi	v3,v3,15
    8002cf78:	5208a0d7          	vid.v	v1
    8002cf7c:	5c2c0c57          	vmerge.vvm	v24,v2,v24,v0
    8002cf80:	9ef03057          	vmv1r.v	v0,v15
    8002cf84:	0e10b0d7          	vrsub.vi	v1,v1,1
    8002cf88:	02998357          	vadd.vv	v6,v9,v19
    8002cf8c:	5c2a8ad7          	vmerge.vvm	v21,v2,v21,v0
    8002cf90:	9f103057          	vmv1r.v	v0,v17
    8002cf94:	02cb0657          	vadd.vv	v12,v12,v22
    8002cf98:	024c0257          	vadd.vv	v4,v4,v24
    8002cf9c:	5c2a0157          	vmerge.vvm	v2,v2,v20,v0
    8002cfa0:	023a81d7          	vadd.vv	v3,v3,v21
    8002cfa4:	02d906d7          	vadd.vv	v13,v13,v18
    8002cfa8:	025102d7          	vadd.vv	v5,v5,v2
    8002cfac:	02bb85d7          	vadd.vv	v11,v11,v23
    8002cfb0:	02a80557          	vadd.vv	v10,v10,v16
    8002cfb4:	32c08757          	vrgather.vv	v14,v12,v1
    8002cfb8:	32408457          	vrgather.vv	v8,v4,v1
    8002cfbc:	323083d7          	vrgather.vv	v7,v3,v1
    8002cfc0:	32b08657          	vrgather.vv	v12,v11,v1
    8002cfc4:	32a084d7          	vrgather.vv	v9,v10,v1
    8002cfc8:	32508257          	vrgather.vv	v4,v5,v1
    8002cfcc:	326081d7          	vrgather.vv	v3,v6,v1
    8002cfd0:	32d08157          	vrgather.vv	v2,v13,v1
{
    8002cfd4:	7175                	addi	sp,sp,-144
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002cfd6:	00a10693          	addi	a3,sp,10
  while (*p)
    8002cfda:	3e60b7d7          	vslidedown.vi	v15,v6,1
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002cfde:	01210893          	addi	a7,sp,18
    8002cfe2:	01010813          	addi	a6,sp,16
    8002cfe6:	00e10513          	addi	a0,sp,14
    8002cfea:	006c                	addi	a1,sp,12
    8002cfec:	0030                	addi	a2,sp,8
    8002cfee:	01610713          	addi	a4,sp,22
    8002cff2:	01410313          	addi	t1,sp,20
    8002cff6:	02068227          	vse8.v	v4,(a3)
    8002cffa:	02030727          	vse8.v	v14,(t1)
    8002cffe:	02088627          	vse8.v	v12,(a7)
    8002d002:	020804a7          	vse8.v	v9,(a6)
    8002d006:	02050427          	vse8.v	v8,(a0)
    8002d00a:	020583a7          	vse8.v	v7,(a1)
    8002d00e:	020601a7          	vse8.v	v3,(a2)
    8002d012:	02070127          	vse8.v	v2,(a4)
  while (*p)
    8002d016:	42f027d7          	vmv.x.s	a5,v15
{
    8002d01a:	05f10693          	addi	a3,sp,95
  str[16] = 0;
    8002d01e:	00010c23          	sb	zero,24(sp)
  while (*p)
    8002d022:	0ff7f793          	zext.b	a5,a5
{
    8002d026:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002d02a:	cfb9                	beqz	a5,8002d088 <printhex+0x2e4>
    8002d02c:	4701                	li	a4,0
    8002d02e:	00910793          	addi	a5,sp,9
    8002d032:	0c0075d7          	vsetvli	a1,zero,e8,m1,ta,ma
    8002d036:	97ba                	add	a5,a5,a4
    8002d038:	03078087          	vle8ff.v	v1,(a5)
    8002d03c:	621030d7          	vmseq.vi	v1,v1,0
    8002d040:	c2002773          	csrr	a4,vl
    8002d044:	4218a557          	vfirst.m	a0,v1
    8002d048:	fe0545e3          	bltz	a0,8002d032 <printhex+0x28e>
    8002d04c:	97aa                	add	a5,a5,a0
  return p - s;
    8002d04e:	8f91                	sub	a5,a5,a2
  magic_mem[0] = which;
    8002d050:	04000713          	li	a4,64
    8002d054:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8002d056:	4705                	li	a4,1
    8002d058:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8002d05a:	ea90                	sd	a2,16(a3)
  magic_mem[3] = arg2;
    8002d05c:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8002d05e:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002d062:	00011717          	auipc	a4,0x11
    8002d066:	fde70713          	addi	a4,a4,-34 # 8003e040 <fromhost>
    8002d06a:	00011797          	auipc	a5,0x11
    8002d06e:	f8d7bb23          	sd	a3,-106(a5) # 8003e000 <tohost>
  while (fromhost == 0)
    8002d072:	631c                	ld	a5,0(a4)
    8002d074:	dffd                	beqz	a5,8002d072 <printhex+0x2ce>
  fromhost = 0;
    8002d076:	00011797          	auipc	a5,0x11
    8002d07a:	fc07b523          	sd	zero,-54(a5) # 8003e040 <fromhost>
  __sync_synchronize();
    8002d07e:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002d082:	629c                	ld	a5,0(a3)
}
    8002d084:	6149                	addi	sp,sp,144
    8002d086:	8082                	ret
  while (*p)
    8002d088:	4781                	li	a5,0
    8002d08a:	b7d9                	j	8002d050 <printhex+0x2ac>

000000008002d08c <printf>:
{
    8002d08c:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    8002d08e:	02810313          	addi	t1,sp,40
{
    8002d092:	f42e                	sd	a1,40(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8002d094:	859a                	mv	a1,t1
{
    8002d096:	ec06                	sd	ra,24(sp)
    8002d098:	f832                	sd	a2,48(sp)
    8002d09a:	fc36                	sd	a3,56(sp)
    8002d09c:	e0ba                	sd	a4,64(sp)
    8002d09e:	e4be                	sd	a5,72(sp)
    8002d0a0:	e8c2                	sd	a6,80(sp)
    8002d0a2:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8002d0a4:	e41a                	sd	t1,8(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8002d0a6:	86cff0ef          	jal	8002c112 <vprintfmt.constprop.1>
}
    8002d0aa:	60e2                	ld	ra,24(sp)
    8002d0ac:	4501                	li	a0,0
    8002d0ae:	6125                	addi	sp,sp,96
    8002d0b0:	8082                	ret

000000008002d0b2 <sprintf>:
{
    8002d0b2:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    8002d0b4:	03010313          	addi	t1,sp,48
{
    8002d0b8:	f022                	sd	s0,32(sp)
    8002d0ba:	e42a                	sd	a0,8(sp)
    8002d0bc:	f832                	sd	a2,48(sp)
  char* str0 = str;
    8002d0be:	842a                	mv	s0,a0

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8002d0c0:	861a                	mv	a2,t1
    8002d0c2:	0028                	addi	a0,sp,8
{
    8002d0c4:	f406                	sd	ra,40(sp)
    8002d0c6:	fc36                	sd	a3,56(sp)
    8002d0c8:	e0ba                	sd	a4,64(sp)
    8002d0ca:	e4be                	sd	a5,72(sp)
    8002d0cc:	e8c2                	sd	a6,80(sp)
    8002d0ce:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8002d0d0:	ec1a                	sd	t1,24(sp)
  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8002d0d2:	d2bfe0ef          	jal	8002bdfc <vprintfmt.constprop.0>
  *str = 0;
    8002d0d6:	6522                	ld	a0,8(sp)
    8002d0d8:	00050023          	sb	zero,0(a0)

  va_end(ap);
  return str - str0;
}
    8002d0dc:	70a2                	ld	ra,40(sp)
    8002d0de:	9d01                	subw	a0,a0,s0
    8002d0e0:	7402                	ld	s0,32(sp)
    8002d0e2:	6125                	addi	sp,sp,96
    8002d0e4:	8082                	ret

000000008002d0e6 <memcpy>:

void* memcpy(void* dest, const void* src, size_t len)
{
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002d0e6:	00c5e7b3          	or	a5,a1,a2
    8002d0ea:	8fc9                	or	a5,a5,a0
    8002d0ec:	8b9d                	andi	a5,a5,7
    while (d < (uintptr_t*)(dest + len))
      *d++ = *s++;
  } else {
    const char* s = src;
    char *d = dest;
    while (d < (char*)(dest + len))
    8002d0ee:	00c506b3          	add	a3,a0,a2
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002d0f2:	cb85                	beqz	a5,8002d122 <memcpy+0x3c>
    while (d < (char*)(dest + len))
    8002d0f4:	08d57363          	bgeu	a0,a3,8002d17a <memcpy+0x94>
    8002d0f8:	00158793          	addi	a5,a1,1
    8002d0fc:	c2202773          	csrr	a4,vlenb
    8002d100:	40f506b3          	sub	a3,a0,a5
    8002d104:	1779                	addi	a4,a4,-2
    8002d106:	04d77e63          	bgeu	a4,a3,8002d162 <memcpy+0x7c>
    8002d10a:	872a                	mv	a4,a0
    8002d10c:	0c0677d7          	vsetvli	a5,a2,e8,m1,ta,ma
      *d++ = *s++;
    8002d110:	02058087          	vle8.v	v1,(a1)
    while (d < (char*)(dest + len))
    8002d114:	8e1d                	sub	a2,a2,a5
    8002d116:	95be                	add	a1,a1,a5
      *d++ = *s++;
    8002d118:	020700a7          	vse8.v	v1,(a4)
    while (d < (char*)(dest + len))
    8002d11c:	973e                	add	a4,a4,a5
    8002d11e:	f67d                	bnez	a2,8002d10c <memcpy+0x26>
    8002d120:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    8002d122:	04d57b63          	bgeu	a0,a3,8002d178 <memcpy+0x92>
    8002d126:	167d                	addi	a2,a2,-1
    8002d128:	04700793          	li	a5,71
    8002d12c:	00858713          	addi	a4,a1,8
    8002d130:	04c7f663          	bgeu	a5,a2,8002d17c <memcpy+0x96>
    8002d134:	c22027f3          	csrr	a5,vlenb
    8002d138:	40e50833          	sub	a6,a0,a4
    8002d13c:	17c1                	addi	a5,a5,-16
    8002d13e:	0307ff63          	bgeu	a5,a6,8002d17c <memcpy+0x96>
    8002d142:	820d                	srli	a2,a2,0x3
    8002d144:	0605                	addi	a2,a2,1
    8002d146:	872a                	mv	a4,a0
    8002d148:	0c5677d7          	vsetvli	a5,a2,e8,mf8,ta,ma
      *d++ = *s++;
    8002d14c:	0205f087          	vle64.v	v1,(a1)
    8002d150:	00379693          	slli	a3,a5,0x3
    while (d < (uintptr_t*)(dest + len))
    8002d154:	8e1d                	sub	a2,a2,a5
    8002d156:	95b6                	add	a1,a1,a3
      *d++ = *s++;
    8002d158:	020770a7          	vse64.v	v1,(a4)
    while (d < (uintptr_t*)(dest + len))
    8002d15c:	9736                	add	a4,a4,a3
    8002d15e:	f66d                	bnez	a2,8002d148 <memcpy+0x62>
    8002d160:	8082                	ret
    8002d162:	95b2                	add	a1,a1,a2
    char *d = dest;
    8002d164:	872a                	mv	a4,a0
    8002d166:	a011                	j	8002d16a <memcpy+0x84>
    8002d168:	0785                	addi	a5,a5,1
      *d++ = *s++;
    8002d16a:	fff7c683          	lbu	a3,-1(a5)
    8002d16e:	0705                	addi	a4,a4,1
    8002d170:	fed70fa3          	sb	a3,-1(a4)
    while (d < (char*)(dest + len))
    8002d174:	fef59ae3          	bne	a1,a5,8002d168 <memcpy+0x82>
  }
  return dest;
}
    8002d178:	8082                	ret
    8002d17a:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    8002d17c:	87aa                	mv	a5,a0
      *d++ = *s++;
    8002d17e:	ff873603          	ld	a2,-8(a4)
    8002d182:	07a1                	addi	a5,a5,8
    8002d184:	0721                	addi	a4,a4,8
    8002d186:	fec7bc23          	sd	a2,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    8002d18a:	fed7eae3          	bltu	a5,a3,8002d17e <memcpy+0x98>
}
    8002d18e:	8082                	ret

000000008002d190 <memset>:

void* memset(void* dest, int byte, size_t len)
{
    8002d190:	1141                	addi	sp,sp,-16
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002d192:	00c566b3          	or	a3,a0,a2
{
    8002d196:	e022                	sd	s0,0(sp)
    8002d198:	e406                	sd	ra,8(sp)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002d19a:	8a9d                	andi	a3,a3,7
{
    8002d19c:	842a                	mv	s0,a0
    uintptr_t *d = dest;
    while (d < (uintptr_t*)(dest + len))
      *d++ = word;
  } else {
    char *d = dest;
    while (d < (char*)(dest + len))
    8002d19e:	00c50833          	add	a6,a0,a2
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002d1a2:	ce81                	beqz	a3,8002d1ba <memset+0x2a>
    while (d < (char*)(dest + len))
    8002d1a4:	01057663          	bgeu	a0,a6,8002d1b0 <memset+0x20>
      *d++ = byte;
    8002d1a8:	0ff5f593          	zext.b	a1,a1
    8002d1ac:	fe5ff0ef          	jal	8002d190 <memset>
  }
  return dest;
}
    8002d1b0:	60a2                	ld	ra,8(sp)
    8002d1b2:	8522                	mv	a0,s0
    8002d1b4:	6402                	ld	s0,0(sp)
    8002d1b6:	0141                	addi	sp,sp,16
    8002d1b8:	8082                	ret
    word |= word << 16 << 16;
    8002d1ba:	8732                	mv	a4,a2
    8002d1bc:	01010637          	lui	a2,0x1010
    8002d1c0:	10160613          	addi	a2,a2,257 # 1010101 <STACK_SIZE+0xf10101>
    8002d1c4:	87aa                	mv	a5,a0
    8002d1c6:	02061513          	slli	a0,a2,0x20
    uintptr_t word = byte & 0xFF;
    8002d1ca:	0ff5f593          	zext.b	a1,a1
    8002d1ce:	9532                	add	a0,a0,a2
    8002d1d0:	02a585b3          	mul	a1,a1,a0
    while (d < (uintptr_t*)(dest + len))
    8002d1d4:	fd047ee3          	bgeu	s0,a6,8002d1b0 <memset+0x20>
    8002d1d8:	177d                	addi	a4,a4,-1
    8002d1da:	00375613          	srli	a2,a4,0x3
    8002d1de:	451d                	li	a0,7
    8002d1e0:	0605                	addi	a2,a2,1
    8002d1e2:	02e57463          	bgeu	a0,a4,8002d20a <memset+0x7a>
    8002d1e6:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    8002d1ea:	00165713          	srli	a4,a2,0x1
    8002d1ee:	5e05c0d7          	vmv.v.x	v1,a1
    8002d1f2:	0712                	slli	a4,a4,0x4
    8002d1f4:	9722                	add	a4,a4,s0
      *d++ = word;
    8002d1f6:	0207f0a7          	vse64.v	v1,(a5)
    while (d < (uintptr_t*)(dest + len))
    8002d1fa:	07c1                	addi	a5,a5,16
    8002d1fc:	fef71de3          	bne	a4,a5,8002d1f6 <memset+0x66>
    8002d200:	00167793          	andi	a5,a2,1
    8002d204:	d7d5                	beqz	a5,8002d1b0 <memset+0x20>
    8002d206:	ffe67693          	andi	a3,a2,-2
    8002d20a:	8e15                	sub	a2,a2,a3
    8002d20c:	0d867057          	vsetvli	zero,a2,e64,m1,ta,ma
      *d++ = word;
    8002d210:	5e05c0d7          	vmv.v.x	v1,a1
    8002d214:	068e                	slli	a3,a3,0x3
    8002d216:	96a2                	add	a3,a3,s0
    8002d218:	0206f0a7          	vse64.v	v1,(a3)
}
    8002d21c:	60a2                	ld	ra,8(sp)
    8002d21e:	8522                	mv	a0,s0
    8002d220:	6402                	ld	s0,0(sp)
    8002d222:	0141                	addi	sp,sp,16
    8002d224:	8082                	ret

000000008002d226 <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    8002d226:	00054783          	lbu	a5,0(a0)
    8002d22a:	0505                	addi	a0,a0,1
    c2 = *s2++;
    8002d22c:	0585                	addi	a1,a1,1
    8002d22e:	fff5c703          	lbu	a4,-1(a1)
  } while (c1 != 0 && c1 == c2);
    8002d232:	c799                	beqz	a5,8002d240 <strcmp+0x1a>
    8002d234:	fee789e3          	beq	a5,a4,8002d226 <strcmp>

  return c1 - c2;
    8002d238:	0007851b          	sext.w	a0,a5
}
    8002d23c:	9d19                	subw	a0,a0,a4
    8002d23e:	8082                	ret
    8002d240:	4501                	li	a0,0
  return c1 - c2;
    8002d242:	bfed                	j	8002d23c <strcmp+0x16>

000000008002d244 <strcpy>:

char* strcpy(char* dest, const char* src)
{
  char* d = dest;
    8002d244:	87aa                	mv	a5,a0
  while ((*d++ = *src++))
    8002d246:	0005c703          	lbu	a4,0(a1)
    8002d24a:	0585                	addi	a1,a1,1
    8002d24c:	0785                	addi	a5,a5,1
    8002d24e:	fee78fa3          	sb	a4,-1(a5)
    8002d252:	fb75                	bnez	a4,8002d246 <strcpy+0x2>
    ;
  return dest;
}
    8002d254:	8082                	ret

000000008002d256 <atol>:
long atol(const char* str)
{
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    8002d256:	00054683          	lbu	a3,0(a0)
    8002d25a:	02000713          	li	a4,32
{
    8002d25e:	87aa                	mv	a5,a0
  while (*str == ' ')
    8002d260:	00e69863          	bne	a3,a4,8002d270 <atol+0x1a>
    8002d264:	8736                	mv	a4,a3
    8002d266:	0017c683          	lbu	a3,1(a5)
    str++;
    8002d26a:	0785                	addi	a5,a5,1
  while (*str == ' ')
    8002d26c:	fee68de3          	beq	a3,a4,8002d266 <atol+0x10>

  if (*str == '-' || *str == '+') {
    8002d270:	02d00713          	li	a4,45
    8002d274:	02e68f63          	beq	a3,a4,8002d2b2 <atol+0x5c>
    8002d278:	02b00713          	li	a4,43
    8002d27c:	02e68563          	beq	a3,a4,8002d2a6 <atol+0x50>
  int sign = 0;
    8002d280:	4581                	li	a1,0
    sign = *str == '-';
    str++;
  }

  while (*str) {
    8002d282:	ce8d                	beqz	a3,8002d2bc <atol+0x66>
  int sign = 0;
    8002d284:	4501                	li	a0,0
    res *= 10;
    res += *str++ - '0';
    8002d286:	0785                	addi	a5,a5,1
    8002d288:	fd06861b          	addiw	a2,a3,-48
    res *= 10;
    8002d28c:	00251713          	slli	a4,a0,0x2
  while (*str) {
    8002d290:	0007c683          	lbu	a3,0(a5)
    res *= 10;
    8002d294:	972a                	add	a4,a4,a0
    8002d296:	0706                	slli	a4,a4,0x1
    res += *str++ - '0';
    8002d298:	00e60533          	add	a0,a2,a4
  while (*str) {
    8002d29c:	f6ed                	bnez	a3,8002d286 <atol+0x30>
  }

  return sign ? -res : res;
    8002d29e:	c185                	beqz	a1,8002d2be <atol+0x68>
    8002d2a0:	40a00533          	neg	a0,a0
    8002d2a4:	8082                	ret
  while (*str) {
    8002d2a6:	0017c683          	lbu	a3,1(a5)
    str++;
    8002d2aa:	0785                	addi	a5,a5,1
  while (*str) {
    8002d2ac:	ca81                	beqz	a3,8002d2bc <atol+0x66>
    sign = *str == '-';
    8002d2ae:	4581                	li	a1,0
    8002d2b0:	bfd1                	j	8002d284 <atol+0x2e>
  while (*str) {
    8002d2b2:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    8002d2b6:	4585                	li	a1,1
    str++;
    8002d2b8:	97ae                	add	a5,a5,a1
  while (*str) {
    8002d2ba:	f6e9                	bnez	a3,8002d284 <atol+0x2e>
  return sign ? -res : res;
    8002d2bc:	4501                	li	a0,0
}
    8002d2be:	8082                	ret

000000008002d2c0 <_init>:

void _init(){

    8002d2c0:	8082                	ret
	...

000000008002d2c4 <mhandler_entry>:
.endm

.balign 0x4
.global mhandler_entry
mhandler_entry:
    SAVE_CONTEXT
    8002d2c4:	f0810113          	addi	sp,sp,-248
    8002d2c8:	e006                	sd	ra,0(sp)
    8002d2ca:	e80e                	sd	gp,16(sp)
    8002d2cc:	ec12                	sd	tp,24(sp)
    8002d2ce:	f016                	sd	t0,32(sp)
    8002d2d0:	f41a                	sd	t1,40(sp)
    8002d2d2:	f81e                	sd	t2,48(sp)
    8002d2d4:	fc22                	sd	s0,56(sp)
    8002d2d6:	e0a6                	sd	s1,64(sp)
    8002d2d8:	e4aa                	sd	a0,72(sp)
    8002d2da:	e8ae                	sd	a1,80(sp)
    8002d2dc:	ecb2                	sd	a2,88(sp)
    8002d2de:	f0b6                	sd	a3,96(sp)
    8002d2e0:	f4ba                	sd	a4,104(sp)
    8002d2e2:	f8be                	sd	a5,112(sp)
    8002d2e4:	fcc2                	sd	a6,120(sp)
    8002d2e6:	e146                	sd	a7,128(sp)
    8002d2e8:	e54a                	sd	s2,136(sp)
    8002d2ea:	e94e                	sd	s3,144(sp)
    8002d2ec:	ed52                	sd	s4,152(sp)
    8002d2ee:	f156                	sd	s5,160(sp)
    8002d2f0:	f55a                	sd	s6,168(sp)
    8002d2f2:	f95e                	sd	s7,176(sp)
    8002d2f4:	fd62                	sd	s8,184(sp)
    8002d2f6:	e1e6                	sd	s9,192(sp)
    8002d2f8:	e5ea                	sd	s10,200(sp)
    8002d2fa:	e9ee                	sd	s11,208(sp)
    8002d2fc:	edf2                	sd	t3,216(sp)
    8002d2fe:	f1f6                	sd	t4,224(sp)
    8002d300:	f5fa                	sd	t5,232(sp)
    8002d302:	f5fe                	sd	t6,232(sp)
    jal mhandler
    8002d304:	d8dd30ef          	jal	80001090 <mhandler>
    j _return
    8002d308:	a849                	j	8002d39a <_return>
    8002d30a:	0001                	nop

000000008002d30c <hshandler_entry>:

.balign 0x4
.global hshandler_entry
hshandler_entry:
    SAVE_CONTEXT
    8002d30c:	f0810113          	addi	sp,sp,-248
    8002d310:	e006                	sd	ra,0(sp)
    8002d312:	e80e                	sd	gp,16(sp)
    8002d314:	ec12                	sd	tp,24(sp)
    8002d316:	f016                	sd	t0,32(sp)
    8002d318:	f41a                	sd	t1,40(sp)
    8002d31a:	f81e                	sd	t2,48(sp)
    8002d31c:	fc22                	sd	s0,56(sp)
    8002d31e:	e0a6                	sd	s1,64(sp)
    8002d320:	e4aa                	sd	a0,72(sp)
    8002d322:	e8ae                	sd	a1,80(sp)
    8002d324:	ecb2                	sd	a2,88(sp)
    8002d326:	f0b6                	sd	a3,96(sp)
    8002d328:	f4ba                	sd	a4,104(sp)
    8002d32a:	f8be                	sd	a5,112(sp)
    8002d32c:	fcc2                	sd	a6,120(sp)
    8002d32e:	e146                	sd	a7,128(sp)
    8002d330:	e54a                	sd	s2,136(sp)
    8002d332:	e94e                	sd	s3,144(sp)
    8002d334:	ed52                	sd	s4,152(sp)
    8002d336:	f156                	sd	s5,160(sp)
    8002d338:	f55a                	sd	s6,168(sp)
    8002d33a:	f95e                	sd	s7,176(sp)
    8002d33c:	fd62                	sd	s8,184(sp)
    8002d33e:	e1e6                	sd	s9,192(sp)
    8002d340:	e5ea                	sd	s10,200(sp)
    8002d342:	e9ee                	sd	s11,208(sp)
    8002d344:	edf2                	sd	t3,216(sp)
    8002d346:	f1f6                	sd	t4,224(sp)
    8002d348:	f5fa                	sd	t5,232(sp)
    8002d34a:	f5fe                	sd	t6,232(sp)
    jal hshandler
    8002d34c:	fb1d30ef          	jal	800012fc <hshandler>
    j _return
    8002d350:	a0a9                	j	8002d39a <_return>
    8002d352:	0001                	nop

000000008002d354 <vshandler_entry>:

.balign 0x4
.global vshandler_entry
vshandler_entry:
    SAVE_CONTEXT
    8002d354:	f0810113          	addi	sp,sp,-248
    8002d358:	e006                	sd	ra,0(sp)
    8002d35a:	e80e                	sd	gp,16(sp)
    8002d35c:	ec12                	sd	tp,24(sp)
    8002d35e:	f016                	sd	t0,32(sp)
    8002d360:	f41a                	sd	t1,40(sp)
    8002d362:	f81e                	sd	t2,48(sp)
    8002d364:	fc22                	sd	s0,56(sp)
    8002d366:	e0a6                	sd	s1,64(sp)
    8002d368:	e4aa                	sd	a0,72(sp)
    8002d36a:	e8ae                	sd	a1,80(sp)
    8002d36c:	ecb2                	sd	a2,88(sp)
    8002d36e:	f0b6                	sd	a3,96(sp)
    8002d370:	f4ba                	sd	a4,104(sp)
    8002d372:	f8be                	sd	a5,112(sp)
    8002d374:	fcc2                	sd	a6,120(sp)
    8002d376:	e146                	sd	a7,128(sp)
    8002d378:	e54a                	sd	s2,136(sp)
    8002d37a:	e94e                	sd	s3,144(sp)
    8002d37c:	ed52                	sd	s4,152(sp)
    8002d37e:	f156                	sd	s5,160(sp)
    8002d380:	f55a                	sd	s6,168(sp)
    8002d382:	f95e                	sd	s7,176(sp)
    8002d384:	fd62                	sd	s8,184(sp)
    8002d386:	e1e6                	sd	s9,192(sp)
    8002d388:	e5ea                	sd	s10,200(sp)
    8002d38a:	e9ee                	sd	s11,208(sp)
    8002d38c:	edf2                	sd	t3,216(sp)
    8002d38e:	f1f6                	sd	t4,224(sp)
    8002d390:	f5fa                	sd	t5,232(sp)
    8002d392:	f5fe                	sd	t6,232(sp)
    jal vshandler
    8002d394:	9d4d40ef          	jal	80001568 <vshandler>
    j _return
    8002d398:	a009                	j	8002d39a <_return>

000000008002d39a <_return>:
    
_return:
    li t0, 4 //make sure PRIV_M is 4
    8002d39a:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    8002d39c:	04550563          	beq	a0,t0,8002d3e6 <_return_from_m>

000000008002d3a0 <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    8002d3a0:	6082                	ld	ra,0(sp)
    8002d3a2:	61c2                	ld	gp,16(sp)
    8002d3a4:	6262                	ld	tp,24(sp)
    8002d3a6:	7282                	ld	t0,32(sp)
    8002d3a8:	7322                	ld	t1,40(sp)
    8002d3aa:	73c2                	ld	t2,48(sp)
    8002d3ac:	7462                	ld	s0,56(sp)
    8002d3ae:	6486                	ld	s1,64(sp)
    8002d3b0:	6526                	ld	a0,72(sp)
    8002d3b2:	65c6                	ld	a1,80(sp)
    8002d3b4:	6666                	ld	a2,88(sp)
    8002d3b6:	7686                	ld	a3,96(sp)
    8002d3b8:	7726                	ld	a4,104(sp)
    8002d3ba:	77c6                	ld	a5,112(sp)
    8002d3bc:	7866                	ld	a6,120(sp)
    8002d3be:	688a                	ld	a7,128(sp)
    8002d3c0:	692a                	ld	s2,136(sp)
    8002d3c2:	69ca                	ld	s3,144(sp)
    8002d3c4:	6a6a                	ld	s4,152(sp)
    8002d3c6:	7a8a                	ld	s5,160(sp)
    8002d3c8:	7b2a                	ld	s6,168(sp)
    8002d3ca:	7bca                	ld	s7,176(sp)
    8002d3cc:	7c6a                	ld	s8,184(sp)
    8002d3ce:	6c8e                	ld	s9,192(sp)
    8002d3d0:	6d2e                	ld	s10,200(sp)
    8002d3d2:	6dce                	ld	s11,208(sp)
    8002d3d4:	6e6e                	ld	t3,216(sp)
    8002d3d6:	7e8e                	ld	t4,224(sp)
    8002d3d8:	7f2e                	ld	t5,232(sp)
    8002d3da:	7fce                	ld	t6,240(sp)
    8002d3dc:	0f810113          	addi	sp,sp,248
    sret
    8002d3e0:	10200073          	sret
    j   .
    8002d3e4:	a001                	j	8002d3e4 <_return_from_s+0x44>

000000008002d3e6 <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    8002d3e6:	6082                	ld	ra,0(sp)
    8002d3e8:	61c2                	ld	gp,16(sp)
    8002d3ea:	6262                	ld	tp,24(sp)
    8002d3ec:	7282                	ld	t0,32(sp)
    8002d3ee:	7322                	ld	t1,40(sp)
    8002d3f0:	73c2                	ld	t2,48(sp)
    8002d3f2:	7462                	ld	s0,56(sp)
    8002d3f4:	6486                	ld	s1,64(sp)
    8002d3f6:	6526                	ld	a0,72(sp)
    8002d3f8:	65c6                	ld	a1,80(sp)
    8002d3fa:	6666                	ld	a2,88(sp)
    8002d3fc:	7686                	ld	a3,96(sp)
    8002d3fe:	7726                	ld	a4,104(sp)
    8002d400:	77c6                	ld	a5,112(sp)
    8002d402:	7866                	ld	a6,120(sp)
    8002d404:	688a                	ld	a7,128(sp)
    8002d406:	692a                	ld	s2,136(sp)
    8002d408:	69ca                	ld	s3,144(sp)
    8002d40a:	6a6a                	ld	s4,152(sp)
    8002d40c:	7a8a                	ld	s5,160(sp)
    8002d40e:	7b2a                	ld	s6,168(sp)
    8002d410:	7bca                	ld	s7,176(sp)
    8002d412:	7c6a                	ld	s8,184(sp)
    8002d414:	6c8e                	ld	s9,192(sp)
    8002d416:	6d2e                	ld	s10,200(sp)
    8002d418:	6dce                	ld	s11,208(sp)
    8002d41a:	6e6e                	ld	t3,216(sp)
    8002d41c:	7e8e                	ld	t4,224(sp)
    8002d41e:	7f2e                	ld	t5,232(sp)
    8002d420:	7fce                	ld	t6,240(sp)
    8002d422:	0f810113          	addi	sp,sp,248
    mret
    8002d426:	30200073          	mret
	...

000000008002d42c <m_test_entry>:

.balign 0x4
.global m_test_entry
m_test_entry:
    .balign 4
    j mhandler_0
    8002d42c:	a809                	j	8002d43e <mhandler_0>
    j mhandler_1
    8002d42e:	a899                	j	8002d484 <mhandler_1>
    j mhandler_2
    8002d430:	a869                	j	8002d4ca <mhandler_2>
    j mhandler_3
    8002d432:	a8f9                	j	8002d510 <mhandler_3>
    j mhandler_4
    8002d434:	a20d                	j	8002d556 <mhandler_4>
    j mhandler_5
    8002d436:	a29d                	j	8002d59c <mhandler_5>
    j mhandler_6
    8002d438:	a26d                	j	8002d5e2 <mhandler_6>
    j mhandler_7
    8002d43a:	a2fd                	j	8002d628 <mhandler_7>
    j mhandler_8
    8002d43c:	ac0d                	j	8002d66e <mhandler_8>

000000008002d43e <mhandler_0>:

mhandler_0:
    SAVE_CONTEXT
    8002d43e:	f0810113          	addi	sp,sp,-248
    8002d442:	e006                	sd	ra,0(sp)
    8002d444:	e80e                	sd	gp,16(sp)
    8002d446:	ec12                	sd	tp,24(sp)
    8002d448:	f016                	sd	t0,32(sp)
    8002d44a:	f41a                	sd	t1,40(sp)
    8002d44c:	f81e                	sd	t2,48(sp)
    8002d44e:	fc22                	sd	s0,56(sp)
    8002d450:	e0a6                	sd	s1,64(sp)
    8002d452:	e4aa                	sd	a0,72(sp)
    8002d454:	e8ae                	sd	a1,80(sp)
    8002d456:	ecb2                	sd	a2,88(sp)
    8002d458:	f0b6                	sd	a3,96(sp)
    8002d45a:	f4ba                	sd	a4,104(sp)
    8002d45c:	f8be                	sd	a5,112(sp)
    8002d45e:	fcc2                	sd	a6,120(sp)
    8002d460:	e146                	sd	a7,128(sp)
    8002d462:	e54a                	sd	s2,136(sp)
    8002d464:	e94e                	sd	s3,144(sp)
    8002d466:	ed52                	sd	s4,152(sp)
    8002d468:	f156                	sd	s5,160(sp)
    8002d46a:	f55a                	sd	s6,168(sp)
    8002d46c:	f95e                	sd	s7,176(sp)
    8002d46e:	fd62                	sd	s8,184(sp)
    8002d470:	e1e6                	sd	s9,192(sp)
    8002d472:	e5ea                	sd	s10,200(sp)
    8002d474:	e9ee                	sd	s11,208(sp)
    8002d476:	edf2                	sd	t3,216(sp)
    8002d478:	f1f6                	sd	t4,224(sp)
    8002d47a:	f5fa                	sd	t5,232(sp)
    8002d47c:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_0
    8002d47e:	a38fd0ef          	jal	8002a6b6 <m_test_entry_two_0>
    j _return
    8002d482:	a789                	j	8002dbc4 <_return>

000000008002d484 <mhandler_1>:

mhandler_1:
    SAVE_CONTEXT
    8002d484:	f0810113          	addi	sp,sp,-248
    8002d488:	e006                	sd	ra,0(sp)
    8002d48a:	e80e                	sd	gp,16(sp)
    8002d48c:	ec12                	sd	tp,24(sp)
    8002d48e:	f016                	sd	t0,32(sp)
    8002d490:	f41a                	sd	t1,40(sp)
    8002d492:	f81e                	sd	t2,48(sp)
    8002d494:	fc22                	sd	s0,56(sp)
    8002d496:	e0a6                	sd	s1,64(sp)
    8002d498:	e4aa                	sd	a0,72(sp)
    8002d49a:	e8ae                	sd	a1,80(sp)
    8002d49c:	ecb2                	sd	a2,88(sp)
    8002d49e:	f0b6                	sd	a3,96(sp)
    8002d4a0:	f4ba                	sd	a4,104(sp)
    8002d4a2:	f8be                	sd	a5,112(sp)
    8002d4a4:	fcc2                	sd	a6,120(sp)
    8002d4a6:	e146                	sd	a7,128(sp)
    8002d4a8:	e54a                	sd	s2,136(sp)
    8002d4aa:	e94e                	sd	s3,144(sp)
    8002d4ac:	ed52                	sd	s4,152(sp)
    8002d4ae:	f156                	sd	s5,160(sp)
    8002d4b0:	f55a                	sd	s6,168(sp)
    8002d4b2:	f95e                	sd	s7,176(sp)
    8002d4b4:	fd62                	sd	s8,184(sp)
    8002d4b6:	e1e6                	sd	s9,192(sp)
    8002d4b8:	e5ea                	sd	s10,200(sp)
    8002d4ba:	e9ee                	sd	s11,208(sp)
    8002d4bc:	edf2                	sd	t3,216(sp)
    8002d4be:	f1f6                	sd	t4,224(sp)
    8002d4c0:	f5fa                	sd	t5,232(sp)
    8002d4c2:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_1
    8002d4c4:	fa8fc0ef          	jal	80029c6c <m_test_entry_two_1>
    j _return
    8002d4c8:	adf5                	j	8002dbc4 <_return>

000000008002d4ca <mhandler_2>:

mhandler_2:
    SAVE_CONTEXT
    8002d4ca:	f0810113          	addi	sp,sp,-248
    8002d4ce:	e006                	sd	ra,0(sp)
    8002d4d0:	e80e                	sd	gp,16(sp)
    8002d4d2:	ec12                	sd	tp,24(sp)
    8002d4d4:	f016                	sd	t0,32(sp)
    8002d4d6:	f41a                	sd	t1,40(sp)
    8002d4d8:	f81e                	sd	t2,48(sp)
    8002d4da:	fc22                	sd	s0,56(sp)
    8002d4dc:	e0a6                	sd	s1,64(sp)
    8002d4de:	e4aa                	sd	a0,72(sp)
    8002d4e0:	e8ae                	sd	a1,80(sp)
    8002d4e2:	ecb2                	sd	a2,88(sp)
    8002d4e4:	f0b6                	sd	a3,96(sp)
    8002d4e6:	f4ba                	sd	a4,104(sp)
    8002d4e8:	f8be                	sd	a5,112(sp)
    8002d4ea:	fcc2                	sd	a6,120(sp)
    8002d4ec:	e146                	sd	a7,128(sp)
    8002d4ee:	e54a                	sd	s2,136(sp)
    8002d4f0:	e94e                	sd	s3,144(sp)
    8002d4f2:	ed52                	sd	s4,152(sp)
    8002d4f4:	f156                	sd	s5,160(sp)
    8002d4f6:	f55a                	sd	s6,168(sp)
    8002d4f8:	f95e                	sd	s7,176(sp)
    8002d4fa:	fd62                	sd	s8,184(sp)
    8002d4fc:	e1e6                	sd	s9,192(sp)
    8002d4fe:	e5ea                	sd	s10,200(sp)
    8002d500:	e9ee                	sd	s11,208(sp)
    8002d502:	edf2                	sd	t3,216(sp)
    8002d504:	f1f6                	sd	t4,224(sp)
    8002d506:	f5fa                	sd	t5,232(sp)
    8002d508:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_2
    8002d50a:	fd0fc0ef          	jal	80029cda <m_test_entry_two_2>
    j _return
    8002d50e:	ad5d                	j	8002dbc4 <_return>

000000008002d510 <mhandler_3>:

mhandler_3:
    SAVE_CONTEXT
    8002d510:	f0810113          	addi	sp,sp,-248
    8002d514:	e006                	sd	ra,0(sp)
    8002d516:	e80e                	sd	gp,16(sp)
    8002d518:	ec12                	sd	tp,24(sp)
    8002d51a:	f016                	sd	t0,32(sp)
    8002d51c:	f41a                	sd	t1,40(sp)
    8002d51e:	f81e                	sd	t2,48(sp)
    8002d520:	fc22                	sd	s0,56(sp)
    8002d522:	e0a6                	sd	s1,64(sp)
    8002d524:	e4aa                	sd	a0,72(sp)
    8002d526:	e8ae                	sd	a1,80(sp)
    8002d528:	ecb2                	sd	a2,88(sp)
    8002d52a:	f0b6                	sd	a3,96(sp)
    8002d52c:	f4ba                	sd	a4,104(sp)
    8002d52e:	f8be                	sd	a5,112(sp)
    8002d530:	fcc2                	sd	a6,120(sp)
    8002d532:	e146                	sd	a7,128(sp)
    8002d534:	e54a                	sd	s2,136(sp)
    8002d536:	e94e                	sd	s3,144(sp)
    8002d538:	ed52                	sd	s4,152(sp)
    8002d53a:	f156                	sd	s5,160(sp)
    8002d53c:	f55a                	sd	s6,168(sp)
    8002d53e:	f95e                	sd	s7,176(sp)
    8002d540:	fd62                	sd	s8,184(sp)
    8002d542:	e1e6                	sd	s9,192(sp)
    8002d544:	e5ea                	sd	s10,200(sp)
    8002d546:	e9ee                	sd	s11,208(sp)
    8002d548:	edf2                	sd	t3,216(sp)
    8002d54a:	f1f6                	sd	t4,224(sp)
    8002d54c:	f5fa                	sd	t5,232(sp)
    8002d54e:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_3
    8002d550:	ff6fc0ef          	jal	80029d46 <m_test_entry_two_3>
    j _return
    8002d554:	ad85                	j	8002dbc4 <_return>

000000008002d556 <mhandler_4>:

mhandler_4:
    SAVE_CONTEXT
    8002d556:	f0810113          	addi	sp,sp,-248
    8002d55a:	e006                	sd	ra,0(sp)
    8002d55c:	e80e                	sd	gp,16(sp)
    8002d55e:	ec12                	sd	tp,24(sp)
    8002d560:	f016                	sd	t0,32(sp)
    8002d562:	f41a                	sd	t1,40(sp)
    8002d564:	f81e                	sd	t2,48(sp)
    8002d566:	fc22                	sd	s0,56(sp)
    8002d568:	e0a6                	sd	s1,64(sp)
    8002d56a:	e4aa                	sd	a0,72(sp)
    8002d56c:	e8ae                	sd	a1,80(sp)
    8002d56e:	ecb2                	sd	a2,88(sp)
    8002d570:	f0b6                	sd	a3,96(sp)
    8002d572:	f4ba                	sd	a4,104(sp)
    8002d574:	f8be                	sd	a5,112(sp)
    8002d576:	fcc2                	sd	a6,120(sp)
    8002d578:	e146                	sd	a7,128(sp)
    8002d57a:	e54a                	sd	s2,136(sp)
    8002d57c:	e94e                	sd	s3,144(sp)
    8002d57e:	ed52                	sd	s4,152(sp)
    8002d580:	f156                	sd	s5,160(sp)
    8002d582:	f55a                	sd	s6,168(sp)
    8002d584:	f95e                	sd	s7,176(sp)
    8002d586:	fd62                	sd	s8,184(sp)
    8002d588:	e1e6                	sd	s9,192(sp)
    8002d58a:	e5ea                	sd	s10,200(sp)
    8002d58c:	e9ee                	sd	s11,208(sp)
    8002d58e:	edf2                	sd	t3,216(sp)
    8002d590:	f1f6                	sd	t4,224(sp)
    8002d592:	f5fa                	sd	t5,232(sp)
    8002d594:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_4
    8002d596:	81ffc0ef          	jal	80029db4 <m_test_entry_two_4>
    j _return
    8002d59a:	a52d                	j	8002dbc4 <_return>

000000008002d59c <mhandler_5>:

mhandler_5:
    SAVE_CONTEXT
    8002d59c:	f0810113          	addi	sp,sp,-248
    8002d5a0:	e006                	sd	ra,0(sp)
    8002d5a2:	e80e                	sd	gp,16(sp)
    8002d5a4:	ec12                	sd	tp,24(sp)
    8002d5a6:	f016                	sd	t0,32(sp)
    8002d5a8:	f41a                	sd	t1,40(sp)
    8002d5aa:	f81e                	sd	t2,48(sp)
    8002d5ac:	fc22                	sd	s0,56(sp)
    8002d5ae:	e0a6                	sd	s1,64(sp)
    8002d5b0:	e4aa                	sd	a0,72(sp)
    8002d5b2:	e8ae                	sd	a1,80(sp)
    8002d5b4:	ecb2                	sd	a2,88(sp)
    8002d5b6:	f0b6                	sd	a3,96(sp)
    8002d5b8:	f4ba                	sd	a4,104(sp)
    8002d5ba:	f8be                	sd	a5,112(sp)
    8002d5bc:	fcc2                	sd	a6,120(sp)
    8002d5be:	e146                	sd	a7,128(sp)
    8002d5c0:	e54a                	sd	s2,136(sp)
    8002d5c2:	e94e                	sd	s3,144(sp)
    8002d5c4:	ed52                	sd	s4,152(sp)
    8002d5c6:	f156                	sd	s5,160(sp)
    8002d5c8:	f55a                	sd	s6,168(sp)
    8002d5ca:	f95e                	sd	s7,176(sp)
    8002d5cc:	fd62                	sd	s8,184(sp)
    8002d5ce:	e1e6                	sd	s9,192(sp)
    8002d5d0:	e5ea                	sd	s10,200(sp)
    8002d5d2:	e9ee                	sd	s11,208(sp)
    8002d5d4:	edf2                	sd	t3,216(sp)
    8002d5d6:	f1f6                	sd	t4,224(sp)
    8002d5d8:	f5fa                	sd	t5,232(sp)
    8002d5da:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_5
    8002d5dc:	847fc0ef          	jal	80029e22 <m_test_entry_two_5>
    j _return
    8002d5e0:	a3d5                	j	8002dbc4 <_return>

000000008002d5e2 <mhandler_6>:

mhandler_6:
    SAVE_CONTEXT
    8002d5e2:	f0810113          	addi	sp,sp,-248
    8002d5e6:	e006                	sd	ra,0(sp)
    8002d5e8:	e80e                	sd	gp,16(sp)
    8002d5ea:	ec12                	sd	tp,24(sp)
    8002d5ec:	f016                	sd	t0,32(sp)
    8002d5ee:	f41a                	sd	t1,40(sp)
    8002d5f0:	f81e                	sd	t2,48(sp)
    8002d5f2:	fc22                	sd	s0,56(sp)
    8002d5f4:	e0a6                	sd	s1,64(sp)
    8002d5f6:	e4aa                	sd	a0,72(sp)
    8002d5f8:	e8ae                	sd	a1,80(sp)
    8002d5fa:	ecb2                	sd	a2,88(sp)
    8002d5fc:	f0b6                	sd	a3,96(sp)
    8002d5fe:	f4ba                	sd	a4,104(sp)
    8002d600:	f8be                	sd	a5,112(sp)
    8002d602:	fcc2                	sd	a6,120(sp)
    8002d604:	e146                	sd	a7,128(sp)
    8002d606:	e54a                	sd	s2,136(sp)
    8002d608:	e94e                	sd	s3,144(sp)
    8002d60a:	ed52                	sd	s4,152(sp)
    8002d60c:	f156                	sd	s5,160(sp)
    8002d60e:	f55a                	sd	s6,168(sp)
    8002d610:	f95e                	sd	s7,176(sp)
    8002d612:	fd62                	sd	s8,184(sp)
    8002d614:	e1e6                	sd	s9,192(sp)
    8002d616:	e5ea                	sd	s10,200(sp)
    8002d618:	e9ee                	sd	s11,208(sp)
    8002d61a:	edf2                	sd	t3,216(sp)
    8002d61c:	f1f6                	sd	t4,224(sp)
    8002d61e:	f5fa                	sd	t5,232(sp)
    8002d620:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_6
    8002d622:	86ffc0ef          	jal	80029e90 <m_test_entry_two_6>
    j _return
    8002d626:	ab79                	j	8002dbc4 <_return>

000000008002d628 <mhandler_7>:

mhandler_7:
    SAVE_CONTEXT
    8002d628:	f0810113          	addi	sp,sp,-248
    8002d62c:	e006                	sd	ra,0(sp)
    8002d62e:	e80e                	sd	gp,16(sp)
    8002d630:	ec12                	sd	tp,24(sp)
    8002d632:	f016                	sd	t0,32(sp)
    8002d634:	f41a                	sd	t1,40(sp)
    8002d636:	f81e                	sd	t2,48(sp)
    8002d638:	fc22                	sd	s0,56(sp)
    8002d63a:	e0a6                	sd	s1,64(sp)
    8002d63c:	e4aa                	sd	a0,72(sp)
    8002d63e:	e8ae                	sd	a1,80(sp)
    8002d640:	ecb2                	sd	a2,88(sp)
    8002d642:	f0b6                	sd	a3,96(sp)
    8002d644:	f4ba                	sd	a4,104(sp)
    8002d646:	f8be                	sd	a5,112(sp)
    8002d648:	fcc2                	sd	a6,120(sp)
    8002d64a:	e146                	sd	a7,128(sp)
    8002d64c:	e54a                	sd	s2,136(sp)
    8002d64e:	e94e                	sd	s3,144(sp)
    8002d650:	ed52                	sd	s4,152(sp)
    8002d652:	f156                	sd	s5,160(sp)
    8002d654:	f55a                	sd	s6,168(sp)
    8002d656:	f95e                	sd	s7,176(sp)
    8002d658:	fd62                	sd	s8,184(sp)
    8002d65a:	e1e6                	sd	s9,192(sp)
    8002d65c:	e5ea                	sd	s10,200(sp)
    8002d65e:	e9ee                	sd	s11,208(sp)
    8002d660:	edf2                	sd	t3,216(sp)
    8002d662:	f1f6                	sd	t4,224(sp)
    8002d664:	f5fa                	sd	t5,232(sp)
    8002d666:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_7
    8002d668:	897fc0ef          	jal	80029efe <m_test_entry_two_7>
    j _return
    8002d66c:	aba1                	j	8002dbc4 <_return>

000000008002d66e <mhandler_8>:
    
mhandler_8:
    SAVE_CONTEXT
    8002d66e:	f0810113          	addi	sp,sp,-248
    8002d672:	e006                	sd	ra,0(sp)
    8002d674:	e80e                	sd	gp,16(sp)
    8002d676:	ec12                	sd	tp,24(sp)
    8002d678:	f016                	sd	t0,32(sp)
    8002d67a:	f41a                	sd	t1,40(sp)
    8002d67c:	f81e                	sd	t2,48(sp)
    8002d67e:	fc22                	sd	s0,56(sp)
    8002d680:	e0a6                	sd	s1,64(sp)
    8002d682:	e4aa                	sd	a0,72(sp)
    8002d684:	e8ae                	sd	a1,80(sp)
    8002d686:	ecb2                	sd	a2,88(sp)
    8002d688:	f0b6                	sd	a3,96(sp)
    8002d68a:	f4ba                	sd	a4,104(sp)
    8002d68c:	f8be                	sd	a5,112(sp)
    8002d68e:	fcc2                	sd	a6,120(sp)
    8002d690:	e146                	sd	a7,128(sp)
    8002d692:	e54a                	sd	s2,136(sp)
    8002d694:	e94e                	sd	s3,144(sp)
    8002d696:	ed52                	sd	s4,152(sp)
    8002d698:	f156                	sd	s5,160(sp)
    8002d69a:	f55a                	sd	s6,168(sp)
    8002d69c:	f95e                	sd	s7,176(sp)
    8002d69e:	fd62                	sd	s8,184(sp)
    8002d6a0:	e1e6                	sd	s9,192(sp)
    8002d6a2:	e5ea                	sd	s10,200(sp)
    8002d6a4:	e9ee                	sd	s11,208(sp)
    8002d6a6:	edf2                	sd	t3,216(sp)
    8002d6a8:	f1f6                	sd	t4,224(sp)
    8002d6aa:	f5fa                	sd	t5,232(sp)
    8002d6ac:	f5fe                	sd	t6,232(sp)
    jal m_test_entry_two_8
    8002d6ae:	8bffc0ef          	jal	80029f6c <m_test_entry_two_8>
    j _return
    8002d6b2:	ab09                	j	8002dbc4 <_return>

000000008002d6b4 <hs_test_entry>:

.balign 0x4
.global hs_test_entry
hs_test_entry:
    .balign 4
    j hshandler_0
    8002d6b4:	a809                	j	8002d6c6 <hshandler_0>
    j hshandler_1
    8002d6b6:	a899                	j	8002d70c <hshandler_1>
    j hshandler_2
    8002d6b8:	a869                	j	8002d752 <hshandler_2>
    j hshandler_3
    8002d6ba:	a8f9                	j	8002d798 <hshandler_3>
    j hshandler_4
    8002d6bc:	a20d                	j	8002d7de <hshandler_4>
    j hshandler_5
    8002d6be:	a29d                	j	8002d824 <hshandler_5>
    j hshandler_6
    8002d6c0:	a26d                	j	8002d86a <hshandler_6>
    j hshandler_7
    8002d6c2:	a2fd                	j	8002d8b0 <hshandler_7>
    j hshandler_8
    8002d6c4:	ac0d                	j	8002d8f6 <hshandler_8>

000000008002d6c6 <hshandler_0>:

hshandler_0:
    SAVE_CONTEXT
    8002d6c6:	f0810113          	addi	sp,sp,-248
    8002d6ca:	e006                	sd	ra,0(sp)
    8002d6cc:	e80e                	sd	gp,16(sp)
    8002d6ce:	ec12                	sd	tp,24(sp)
    8002d6d0:	f016                	sd	t0,32(sp)
    8002d6d2:	f41a                	sd	t1,40(sp)
    8002d6d4:	f81e                	sd	t2,48(sp)
    8002d6d6:	fc22                	sd	s0,56(sp)
    8002d6d8:	e0a6                	sd	s1,64(sp)
    8002d6da:	e4aa                	sd	a0,72(sp)
    8002d6dc:	e8ae                	sd	a1,80(sp)
    8002d6de:	ecb2                	sd	a2,88(sp)
    8002d6e0:	f0b6                	sd	a3,96(sp)
    8002d6e2:	f4ba                	sd	a4,104(sp)
    8002d6e4:	f8be                	sd	a5,112(sp)
    8002d6e6:	fcc2                	sd	a6,120(sp)
    8002d6e8:	e146                	sd	a7,128(sp)
    8002d6ea:	e54a                	sd	s2,136(sp)
    8002d6ec:	e94e                	sd	s3,144(sp)
    8002d6ee:	ed52                	sd	s4,152(sp)
    8002d6f0:	f156                	sd	s5,160(sp)
    8002d6f2:	f55a                	sd	s6,168(sp)
    8002d6f4:	f95e                	sd	s7,176(sp)
    8002d6f6:	fd62                	sd	s8,184(sp)
    8002d6f8:	e1e6                	sd	s9,192(sp)
    8002d6fa:	e5ea                	sd	s10,200(sp)
    8002d6fc:	e9ee                	sd	s11,208(sp)
    8002d6fe:	edf2                	sd	t3,216(sp)
    8002d700:	f1f6                	sd	t4,224(sp)
    8002d702:	f5fa                	sd	t5,232(sp)
    8002d704:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_0
    8002d706:	fcdfc0ef          	jal	8002a6d2 <hs_test_entry_two_0>
    j _return
    8002d70a:	a96d                	j	8002dbc4 <_return>

000000008002d70c <hshandler_1>:

hshandler_1:
    SAVE_CONTEXT
    8002d70c:	f0810113          	addi	sp,sp,-248
    8002d710:	e006                	sd	ra,0(sp)
    8002d712:	e80e                	sd	gp,16(sp)
    8002d714:	ec12                	sd	tp,24(sp)
    8002d716:	f016                	sd	t0,32(sp)
    8002d718:	f41a                	sd	t1,40(sp)
    8002d71a:	f81e                	sd	t2,48(sp)
    8002d71c:	fc22                	sd	s0,56(sp)
    8002d71e:	e0a6                	sd	s1,64(sp)
    8002d720:	e4aa                	sd	a0,72(sp)
    8002d722:	e8ae                	sd	a1,80(sp)
    8002d724:	ecb2                	sd	a2,88(sp)
    8002d726:	f0b6                	sd	a3,96(sp)
    8002d728:	f4ba                	sd	a4,104(sp)
    8002d72a:	f8be                	sd	a5,112(sp)
    8002d72c:	fcc2                	sd	a6,120(sp)
    8002d72e:	e146                	sd	a7,128(sp)
    8002d730:	e54a                	sd	s2,136(sp)
    8002d732:	e94e                	sd	s3,144(sp)
    8002d734:	ed52                	sd	s4,152(sp)
    8002d736:	f156                	sd	s5,160(sp)
    8002d738:	f55a                	sd	s6,168(sp)
    8002d73a:	f95e                	sd	s7,176(sp)
    8002d73c:	fd62                	sd	s8,184(sp)
    8002d73e:	e1e6                	sd	s9,192(sp)
    8002d740:	e5ea                	sd	s10,200(sp)
    8002d742:	e9ee                	sd	s11,208(sp)
    8002d744:	edf2                	sd	t3,216(sp)
    8002d746:	f1f6                	sd	t4,224(sp)
    8002d748:	f5fa                	sd	t5,232(sp)
    8002d74a:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_1
    8002d74c:	88ffc0ef          	jal	80029fda <hs_test_entry_two_1>
    j _return
    8002d750:	a995                	j	8002dbc4 <_return>

000000008002d752 <hshandler_2>:

hshandler_2:
    SAVE_CONTEXT
    8002d752:	f0810113          	addi	sp,sp,-248
    8002d756:	e006                	sd	ra,0(sp)
    8002d758:	e80e                	sd	gp,16(sp)
    8002d75a:	ec12                	sd	tp,24(sp)
    8002d75c:	f016                	sd	t0,32(sp)
    8002d75e:	f41a                	sd	t1,40(sp)
    8002d760:	f81e                	sd	t2,48(sp)
    8002d762:	fc22                	sd	s0,56(sp)
    8002d764:	e0a6                	sd	s1,64(sp)
    8002d766:	e4aa                	sd	a0,72(sp)
    8002d768:	e8ae                	sd	a1,80(sp)
    8002d76a:	ecb2                	sd	a2,88(sp)
    8002d76c:	f0b6                	sd	a3,96(sp)
    8002d76e:	f4ba                	sd	a4,104(sp)
    8002d770:	f8be                	sd	a5,112(sp)
    8002d772:	fcc2                	sd	a6,120(sp)
    8002d774:	e146                	sd	a7,128(sp)
    8002d776:	e54a                	sd	s2,136(sp)
    8002d778:	e94e                	sd	s3,144(sp)
    8002d77a:	ed52                	sd	s4,152(sp)
    8002d77c:	f156                	sd	s5,160(sp)
    8002d77e:	f55a                	sd	s6,168(sp)
    8002d780:	f95e                	sd	s7,176(sp)
    8002d782:	fd62                	sd	s8,184(sp)
    8002d784:	e1e6                	sd	s9,192(sp)
    8002d786:	e5ea                	sd	s10,200(sp)
    8002d788:	e9ee                	sd	s11,208(sp)
    8002d78a:	edf2                	sd	t3,216(sp)
    8002d78c:	f1f6                	sd	t4,224(sp)
    8002d78e:	f5fa                	sd	t5,232(sp)
    8002d790:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_2
    8002d792:	8b7fc0ef          	jal	8002a048 <hs_test_entry_two_2>
    j _return
    8002d796:	a13d                	j	8002dbc4 <_return>

000000008002d798 <hshandler_3>:

hshandler_3:
    SAVE_CONTEXT
    8002d798:	f0810113          	addi	sp,sp,-248
    8002d79c:	e006                	sd	ra,0(sp)
    8002d79e:	e80e                	sd	gp,16(sp)
    8002d7a0:	ec12                	sd	tp,24(sp)
    8002d7a2:	f016                	sd	t0,32(sp)
    8002d7a4:	f41a                	sd	t1,40(sp)
    8002d7a6:	f81e                	sd	t2,48(sp)
    8002d7a8:	fc22                	sd	s0,56(sp)
    8002d7aa:	e0a6                	sd	s1,64(sp)
    8002d7ac:	e4aa                	sd	a0,72(sp)
    8002d7ae:	e8ae                	sd	a1,80(sp)
    8002d7b0:	ecb2                	sd	a2,88(sp)
    8002d7b2:	f0b6                	sd	a3,96(sp)
    8002d7b4:	f4ba                	sd	a4,104(sp)
    8002d7b6:	f8be                	sd	a5,112(sp)
    8002d7b8:	fcc2                	sd	a6,120(sp)
    8002d7ba:	e146                	sd	a7,128(sp)
    8002d7bc:	e54a                	sd	s2,136(sp)
    8002d7be:	e94e                	sd	s3,144(sp)
    8002d7c0:	ed52                	sd	s4,152(sp)
    8002d7c2:	f156                	sd	s5,160(sp)
    8002d7c4:	f55a                	sd	s6,168(sp)
    8002d7c6:	f95e                	sd	s7,176(sp)
    8002d7c8:	fd62                	sd	s8,184(sp)
    8002d7ca:	e1e6                	sd	s9,192(sp)
    8002d7cc:	e5ea                	sd	s10,200(sp)
    8002d7ce:	e9ee                	sd	s11,208(sp)
    8002d7d0:	edf2                	sd	t3,216(sp)
    8002d7d2:	f1f6                	sd	t4,224(sp)
    8002d7d4:	f5fa                	sd	t5,232(sp)
    8002d7d6:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_3
    8002d7d8:	8ddfc0ef          	jal	8002a0b4 <hs_test_entry_two_3>
    j _return
    8002d7dc:	a6e5                	j	8002dbc4 <_return>

000000008002d7de <hshandler_4>:

hshandler_4:
    SAVE_CONTEXT
    8002d7de:	f0810113          	addi	sp,sp,-248
    8002d7e2:	e006                	sd	ra,0(sp)
    8002d7e4:	e80e                	sd	gp,16(sp)
    8002d7e6:	ec12                	sd	tp,24(sp)
    8002d7e8:	f016                	sd	t0,32(sp)
    8002d7ea:	f41a                	sd	t1,40(sp)
    8002d7ec:	f81e                	sd	t2,48(sp)
    8002d7ee:	fc22                	sd	s0,56(sp)
    8002d7f0:	e0a6                	sd	s1,64(sp)
    8002d7f2:	e4aa                	sd	a0,72(sp)
    8002d7f4:	e8ae                	sd	a1,80(sp)
    8002d7f6:	ecb2                	sd	a2,88(sp)
    8002d7f8:	f0b6                	sd	a3,96(sp)
    8002d7fa:	f4ba                	sd	a4,104(sp)
    8002d7fc:	f8be                	sd	a5,112(sp)
    8002d7fe:	fcc2                	sd	a6,120(sp)
    8002d800:	e146                	sd	a7,128(sp)
    8002d802:	e54a                	sd	s2,136(sp)
    8002d804:	e94e                	sd	s3,144(sp)
    8002d806:	ed52                	sd	s4,152(sp)
    8002d808:	f156                	sd	s5,160(sp)
    8002d80a:	f55a                	sd	s6,168(sp)
    8002d80c:	f95e                	sd	s7,176(sp)
    8002d80e:	fd62                	sd	s8,184(sp)
    8002d810:	e1e6                	sd	s9,192(sp)
    8002d812:	e5ea                	sd	s10,200(sp)
    8002d814:	e9ee                	sd	s11,208(sp)
    8002d816:	edf2                	sd	t3,216(sp)
    8002d818:	f1f6                	sd	t4,224(sp)
    8002d81a:	f5fa                	sd	t5,232(sp)
    8002d81c:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_4
    8002d81e:	905fc0ef          	jal	8002a122 <hs_test_entry_two_4>
    j _return
    8002d822:	a64d                	j	8002dbc4 <_return>

000000008002d824 <hshandler_5>:

hshandler_5:
    SAVE_CONTEXT
    8002d824:	f0810113          	addi	sp,sp,-248
    8002d828:	e006                	sd	ra,0(sp)
    8002d82a:	e80e                	sd	gp,16(sp)
    8002d82c:	ec12                	sd	tp,24(sp)
    8002d82e:	f016                	sd	t0,32(sp)
    8002d830:	f41a                	sd	t1,40(sp)
    8002d832:	f81e                	sd	t2,48(sp)
    8002d834:	fc22                	sd	s0,56(sp)
    8002d836:	e0a6                	sd	s1,64(sp)
    8002d838:	e4aa                	sd	a0,72(sp)
    8002d83a:	e8ae                	sd	a1,80(sp)
    8002d83c:	ecb2                	sd	a2,88(sp)
    8002d83e:	f0b6                	sd	a3,96(sp)
    8002d840:	f4ba                	sd	a4,104(sp)
    8002d842:	f8be                	sd	a5,112(sp)
    8002d844:	fcc2                	sd	a6,120(sp)
    8002d846:	e146                	sd	a7,128(sp)
    8002d848:	e54a                	sd	s2,136(sp)
    8002d84a:	e94e                	sd	s3,144(sp)
    8002d84c:	ed52                	sd	s4,152(sp)
    8002d84e:	f156                	sd	s5,160(sp)
    8002d850:	f55a                	sd	s6,168(sp)
    8002d852:	f95e                	sd	s7,176(sp)
    8002d854:	fd62                	sd	s8,184(sp)
    8002d856:	e1e6                	sd	s9,192(sp)
    8002d858:	e5ea                	sd	s10,200(sp)
    8002d85a:	e9ee                	sd	s11,208(sp)
    8002d85c:	edf2                	sd	t3,216(sp)
    8002d85e:	f1f6                	sd	t4,224(sp)
    8002d860:	f5fa                	sd	t5,232(sp)
    8002d862:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_5
    8002d864:	92dfc0ef          	jal	8002a190 <hs_test_entry_two_5>
    j _return
    8002d868:	aeb1                	j	8002dbc4 <_return>

000000008002d86a <hshandler_6>:

hshandler_6:
    SAVE_CONTEXT
    8002d86a:	f0810113          	addi	sp,sp,-248
    8002d86e:	e006                	sd	ra,0(sp)
    8002d870:	e80e                	sd	gp,16(sp)
    8002d872:	ec12                	sd	tp,24(sp)
    8002d874:	f016                	sd	t0,32(sp)
    8002d876:	f41a                	sd	t1,40(sp)
    8002d878:	f81e                	sd	t2,48(sp)
    8002d87a:	fc22                	sd	s0,56(sp)
    8002d87c:	e0a6                	sd	s1,64(sp)
    8002d87e:	e4aa                	sd	a0,72(sp)
    8002d880:	e8ae                	sd	a1,80(sp)
    8002d882:	ecb2                	sd	a2,88(sp)
    8002d884:	f0b6                	sd	a3,96(sp)
    8002d886:	f4ba                	sd	a4,104(sp)
    8002d888:	f8be                	sd	a5,112(sp)
    8002d88a:	fcc2                	sd	a6,120(sp)
    8002d88c:	e146                	sd	a7,128(sp)
    8002d88e:	e54a                	sd	s2,136(sp)
    8002d890:	e94e                	sd	s3,144(sp)
    8002d892:	ed52                	sd	s4,152(sp)
    8002d894:	f156                	sd	s5,160(sp)
    8002d896:	f55a                	sd	s6,168(sp)
    8002d898:	f95e                	sd	s7,176(sp)
    8002d89a:	fd62                	sd	s8,184(sp)
    8002d89c:	e1e6                	sd	s9,192(sp)
    8002d89e:	e5ea                	sd	s10,200(sp)
    8002d8a0:	e9ee                	sd	s11,208(sp)
    8002d8a2:	edf2                	sd	t3,216(sp)
    8002d8a4:	f1f6                	sd	t4,224(sp)
    8002d8a6:	f5fa                	sd	t5,232(sp)
    8002d8a8:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_6
    8002d8aa:	955fc0ef          	jal	8002a1fe <hs_test_entry_two_6>
    j _return
    8002d8ae:	ae19                	j	8002dbc4 <_return>

000000008002d8b0 <hshandler_7>:

hshandler_7:
    SAVE_CONTEXT
    8002d8b0:	f0810113          	addi	sp,sp,-248
    8002d8b4:	e006                	sd	ra,0(sp)
    8002d8b6:	e80e                	sd	gp,16(sp)
    8002d8b8:	ec12                	sd	tp,24(sp)
    8002d8ba:	f016                	sd	t0,32(sp)
    8002d8bc:	f41a                	sd	t1,40(sp)
    8002d8be:	f81e                	sd	t2,48(sp)
    8002d8c0:	fc22                	sd	s0,56(sp)
    8002d8c2:	e0a6                	sd	s1,64(sp)
    8002d8c4:	e4aa                	sd	a0,72(sp)
    8002d8c6:	e8ae                	sd	a1,80(sp)
    8002d8c8:	ecb2                	sd	a2,88(sp)
    8002d8ca:	f0b6                	sd	a3,96(sp)
    8002d8cc:	f4ba                	sd	a4,104(sp)
    8002d8ce:	f8be                	sd	a5,112(sp)
    8002d8d0:	fcc2                	sd	a6,120(sp)
    8002d8d2:	e146                	sd	a7,128(sp)
    8002d8d4:	e54a                	sd	s2,136(sp)
    8002d8d6:	e94e                	sd	s3,144(sp)
    8002d8d8:	ed52                	sd	s4,152(sp)
    8002d8da:	f156                	sd	s5,160(sp)
    8002d8dc:	f55a                	sd	s6,168(sp)
    8002d8de:	f95e                	sd	s7,176(sp)
    8002d8e0:	fd62                	sd	s8,184(sp)
    8002d8e2:	e1e6                	sd	s9,192(sp)
    8002d8e4:	e5ea                	sd	s10,200(sp)
    8002d8e6:	e9ee                	sd	s11,208(sp)
    8002d8e8:	edf2                	sd	t3,216(sp)
    8002d8ea:	f1f6                	sd	t4,224(sp)
    8002d8ec:	f5fa                	sd	t5,232(sp)
    8002d8ee:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_7
    8002d8f0:	97dfc0ef          	jal	8002a26c <hs_test_entry_two_7>
    j _return
    8002d8f4:	acc1                	j	8002dbc4 <_return>

000000008002d8f6 <hshandler_8>:
    
hshandler_8:
    SAVE_CONTEXT
    8002d8f6:	f0810113          	addi	sp,sp,-248
    8002d8fa:	e006                	sd	ra,0(sp)
    8002d8fc:	e80e                	sd	gp,16(sp)
    8002d8fe:	ec12                	sd	tp,24(sp)
    8002d900:	f016                	sd	t0,32(sp)
    8002d902:	f41a                	sd	t1,40(sp)
    8002d904:	f81e                	sd	t2,48(sp)
    8002d906:	fc22                	sd	s0,56(sp)
    8002d908:	e0a6                	sd	s1,64(sp)
    8002d90a:	e4aa                	sd	a0,72(sp)
    8002d90c:	e8ae                	sd	a1,80(sp)
    8002d90e:	ecb2                	sd	a2,88(sp)
    8002d910:	f0b6                	sd	a3,96(sp)
    8002d912:	f4ba                	sd	a4,104(sp)
    8002d914:	f8be                	sd	a5,112(sp)
    8002d916:	fcc2                	sd	a6,120(sp)
    8002d918:	e146                	sd	a7,128(sp)
    8002d91a:	e54a                	sd	s2,136(sp)
    8002d91c:	e94e                	sd	s3,144(sp)
    8002d91e:	ed52                	sd	s4,152(sp)
    8002d920:	f156                	sd	s5,160(sp)
    8002d922:	f55a                	sd	s6,168(sp)
    8002d924:	f95e                	sd	s7,176(sp)
    8002d926:	fd62                	sd	s8,184(sp)
    8002d928:	e1e6                	sd	s9,192(sp)
    8002d92a:	e5ea                	sd	s10,200(sp)
    8002d92c:	e9ee                	sd	s11,208(sp)
    8002d92e:	edf2                	sd	t3,216(sp)
    8002d930:	f1f6                	sd	t4,224(sp)
    8002d932:	f5fa                	sd	t5,232(sp)
    8002d934:	f5fe                	sd	t6,232(sp)
    jal hs_test_entry_two_8
    8002d936:	9a5fc0ef          	jal	8002a2da <hs_test_entry_two_8>
    j _return
    8002d93a:	a469                	j	8002dbc4 <_return>

000000008002d93c <vs_test_entry>:

.balign 0x4
.global vs_test_entry
vs_test_entry:
    .balign 4
    j vshandler_0
    8002d93c:	a809                	j	8002d94e <vshandler_0>
    j vshandler_1
    8002d93e:	a899                	j	8002d994 <vshandler_1>
    j vshandler_2
    8002d940:	a869                	j	8002d9da <vshandler_2>
    j vshandler_3
    8002d942:	a8f9                	j	8002da20 <vshandler_3>
    j vshandler_4
    8002d944:	a20d                	j	8002da66 <vshandler_4>
    j vshandler_5
    8002d946:	a29d                	j	8002daac <vshandler_5>
    j vshandler_6
    8002d948:	a26d                	j	8002daf2 <vshandler_6>
    j vshandler_7
    8002d94a:	a2fd                	j	8002db38 <vshandler_7>
    j vshandler_8
    8002d94c:	ac0d                	j	8002db7e <vshandler_8>

000000008002d94e <vshandler_0>:

vshandler_0:
    SAVE_CONTEXT
    8002d94e:	f0810113          	addi	sp,sp,-248
    8002d952:	e006                	sd	ra,0(sp)
    8002d954:	e80e                	sd	gp,16(sp)
    8002d956:	ec12                	sd	tp,24(sp)
    8002d958:	f016                	sd	t0,32(sp)
    8002d95a:	f41a                	sd	t1,40(sp)
    8002d95c:	f81e                	sd	t2,48(sp)
    8002d95e:	fc22                	sd	s0,56(sp)
    8002d960:	e0a6                	sd	s1,64(sp)
    8002d962:	e4aa                	sd	a0,72(sp)
    8002d964:	e8ae                	sd	a1,80(sp)
    8002d966:	ecb2                	sd	a2,88(sp)
    8002d968:	f0b6                	sd	a3,96(sp)
    8002d96a:	f4ba                	sd	a4,104(sp)
    8002d96c:	f8be                	sd	a5,112(sp)
    8002d96e:	fcc2                	sd	a6,120(sp)
    8002d970:	e146                	sd	a7,128(sp)
    8002d972:	e54a                	sd	s2,136(sp)
    8002d974:	e94e                	sd	s3,144(sp)
    8002d976:	ed52                	sd	s4,152(sp)
    8002d978:	f156                	sd	s5,160(sp)
    8002d97a:	f55a                	sd	s6,168(sp)
    8002d97c:	f95e                	sd	s7,176(sp)
    8002d97e:	fd62                	sd	s8,184(sp)
    8002d980:	e1e6                	sd	s9,192(sp)
    8002d982:	e5ea                	sd	s10,200(sp)
    8002d984:	e9ee                	sd	s11,208(sp)
    8002d986:	edf2                	sd	t3,216(sp)
    8002d988:	f1f6                	sd	t4,224(sp)
    8002d98a:	f5fa                	sd	t5,232(sp)
    8002d98c:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_0
    8002d98e:	d5dfc0ef          	jal	8002a6ea <vs_test_entry_two_0>
    j _return
    8002d992:	ac0d                	j	8002dbc4 <_return>

000000008002d994 <vshandler_1>:

vshandler_1:
    SAVE_CONTEXT
    8002d994:	f0810113          	addi	sp,sp,-248
    8002d998:	e006                	sd	ra,0(sp)
    8002d99a:	e80e                	sd	gp,16(sp)
    8002d99c:	ec12                	sd	tp,24(sp)
    8002d99e:	f016                	sd	t0,32(sp)
    8002d9a0:	f41a                	sd	t1,40(sp)
    8002d9a2:	f81e                	sd	t2,48(sp)
    8002d9a4:	fc22                	sd	s0,56(sp)
    8002d9a6:	e0a6                	sd	s1,64(sp)
    8002d9a8:	e4aa                	sd	a0,72(sp)
    8002d9aa:	e8ae                	sd	a1,80(sp)
    8002d9ac:	ecb2                	sd	a2,88(sp)
    8002d9ae:	f0b6                	sd	a3,96(sp)
    8002d9b0:	f4ba                	sd	a4,104(sp)
    8002d9b2:	f8be                	sd	a5,112(sp)
    8002d9b4:	fcc2                	sd	a6,120(sp)
    8002d9b6:	e146                	sd	a7,128(sp)
    8002d9b8:	e54a                	sd	s2,136(sp)
    8002d9ba:	e94e                	sd	s3,144(sp)
    8002d9bc:	ed52                	sd	s4,152(sp)
    8002d9be:	f156                	sd	s5,160(sp)
    8002d9c0:	f55a                	sd	s6,168(sp)
    8002d9c2:	f95e                	sd	s7,176(sp)
    8002d9c4:	fd62                	sd	s8,184(sp)
    8002d9c6:	e1e6                	sd	s9,192(sp)
    8002d9c8:	e5ea                	sd	s10,200(sp)
    8002d9ca:	e9ee                	sd	s11,208(sp)
    8002d9cc:	edf2                	sd	t3,216(sp)
    8002d9ce:	f1f6                	sd	t4,224(sp)
    8002d9d0:	f5fa                	sd	t5,232(sp)
    8002d9d2:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_1
    8002d9d4:	975fc0ef          	jal	8002a348 <vs_test_entry_two_1>
    j _return
    8002d9d8:	a2f5                	j	8002dbc4 <_return>

000000008002d9da <vshandler_2>:

vshandler_2:
    SAVE_CONTEXT
    8002d9da:	f0810113          	addi	sp,sp,-248
    8002d9de:	e006                	sd	ra,0(sp)
    8002d9e0:	e80e                	sd	gp,16(sp)
    8002d9e2:	ec12                	sd	tp,24(sp)
    8002d9e4:	f016                	sd	t0,32(sp)
    8002d9e6:	f41a                	sd	t1,40(sp)
    8002d9e8:	f81e                	sd	t2,48(sp)
    8002d9ea:	fc22                	sd	s0,56(sp)
    8002d9ec:	e0a6                	sd	s1,64(sp)
    8002d9ee:	e4aa                	sd	a0,72(sp)
    8002d9f0:	e8ae                	sd	a1,80(sp)
    8002d9f2:	ecb2                	sd	a2,88(sp)
    8002d9f4:	f0b6                	sd	a3,96(sp)
    8002d9f6:	f4ba                	sd	a4,104(sp)
    8002d9f8:	f8be                	sd	a5,112(sp)
    8002d9fa:	fcc2                	sd	a6,120(sp)
    8002d9fc:	e146                	sd	a7,128(sp)
    8002d9fe:	e54a                	sd	s2,136(sp)
    8002da00:	e94e                	sd	s3,144(sp)
    8002da02:	ed52                	sd	s4,152(sp)
    8002da04:	f156                	sd	s5,160(sp)
    8002da06:	f55a                	sd	s6,168(sp)
    8002da08:	f95e                	sd	s7,176(sp)
    8002da0a:	fd62                	sd	s8,184(sp)
    8002da0c:	e1e6                	sd	s9,192(sp)
    8002da0e:	e5ea                	sd	s10,200(sp)
    8002da10:	e9ee                	sd	s11,208(sp)
    8002da12:	edf2                	sd	t3,216(sp)
    8002da14:	f1f6                	sd	t4,224(sp)
    8002da16:	f5fa                	sd	t5,232(sp)
    8002da18:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_2
    8002da1a:	99dfc0ef          	jal	8002a3b6 <vs_test_entry_two_2>
    j _return
    8002da1e:	a25d                	j	8002dbc4 <_return>

000000008002da20 <vshandler_3>:

vshandler_3:
    SAVE_CONTEXT
    8002da20:	f0810113          	addi	sp,sp,-248
    8002da24:	e006                	sd	ra,0(sp)
    8002da26:	e80e                	sd	gp,16(sp)
    8002da28:	ec12                	sd	tp,24(sp)
    8002da2a:	f016                	sd	t0,32(sp)
    8002da2c:	f41a                	sd	t1,40(sp)
    8002da2e:	f81e                	sd	t2,48(sp)
    8002da30:	fc22                	sd	s0,56(sp)
    8002da32:	e0a6                	sd	s1,64(sp)
    8002da34:	e4aa                	sd	a0,72(sp)
    8002da36:	e8ae                	sd	a1,80(sp)
    8002da38:	ecb2                	sd	a2,88(sp)
    8002da3a:	f0b6                	sd	a3,96(sp)
    8002da3c:	f4ba                	sd	a4,104(sp)
    8002da3e:	f8be                	sd	a5,112(sp)
    8002da40:	fcc2                	sd	a6,120(sp)
    8002da42:	e146                	sd	a7,128(sp)
    8002da44:	e54a                	sd	s2,136(sp)
    8002da46:	e94e                	sd	s3,144(sp)
    8002da48:	ed52                	sd	s4,152(sp)
    8002da4a:	f156                	sd	s5,160(sp)
    8002da4c:	f55a                	sd	s6,168(sp)
    8002da4e:	f95e                	sd	s7,176(sp)
    8002da50:	fd62                	sd	s8,184(sp)
    8002da52:	e1e6                	sd	s9,192(sp)
    8002da54:	e5ea                	sd	s10,200(sp)
    8002da56:	e9ee                	sd	s11,208(sp)
    8002da58:	edf2                	sd	t3,216(sp)
    8002da5a:	f1f6                	sd	t4,224(sp)
    8002da5c:	f5fa                	sd	t5,232(sp)
    8002da5e:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_3
    8002da60:	9c3fc0ef          	jal	8002a422 <vs_test_entry_two_3>
    j _return
    8002da64:	a285                	j	8002dbc4 <_return>

000000008002da66 <vshandler_4>:

vshandler_4:
    SAVE_CONTEXT
    8002da66:	f0810113          	addi	sp,sp,-248
    8002da6a:	e006                	sd	ra,0(sp)
    8002da6c:	e80e                	sd	gp,16(sp)
    8002da6e:	ec12                	sd	tp,24(sp)
    8002da70:	f016                	sd	t0,32(sp)
    8002da72:	f41a                	sd	t1,40(sp)
    8002da74:	f81e                	sd	t2,48(sp)
    8002da76:	fc22                	sd	s0,56(sp)
    8002da78:	e0a6                	sd	s1,64(sp)
    8002da7a:	e4aa                	sd	a0,72(sp)
    8002da7c:	e8ae                	sd	a1,80(sp)
    8002da7e:	ecb2                	sd	a2,88(sp)
    8002da80:	f0b6                	sd	a3,96(sp)
    8002da82:	f4ba                	sd	a4,104(sp)
    8002da84:	f8be                	sd	a5,112(sp)
    8002da86:	fcc2                	sd	a6,120(sp)
    8002da88:	e146                	sd	a7,128(sp)
    8002da8a:	e54a                	sd	s2,136(sp)
    8002da8c:	e94e                	sd	s3,144(sp)
    8002da8e:	ed52                	sd	s4,152(sp)
    8002da90:	f156                	sd	s5,160(sp)
    8002da92:	f55a                	sd	s6,168(sp)
    8002da94:	f95e                	sd	s7,176(sp)
    8002da96:	fd62                	sd	s8,184(sp)
    8002da98:	e1e6                	sd	s9,192(sp)
    8002da9a:	e5ea                	sd	s10,200(sp)
    8002da9c:	e9ee                	sd	s11,208(sp)
    8002da9e:	edf2                	sd	t3,216(sp)
    8002daa0:	f1f6                	sd	t4,224(sp)
    8002daa2:	f5fa                	sd	t5,232(sp)
    8002daa4:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_4
    8002daa6:	9ebfc0ef          	jal	8002a490 <vs_test_entry_two_4>
    j _return
    8002daaa:	aa29                	j	8002dbc4 <_return>

000000008002daac <vshandler_5>:

vshandler_5:
    SAVE_CONTEXT
    8002daac:	f0810113          	addi	sp,sp,-248
    8002dab0:	e006                	sd	ra,0(sp)
    8002dab2:	e80e                	sd	gp,16(sp)
    8002dab4:	ec12                	sd	tp,24(sp)
    8002dab6:	f016                	sd	t0,32(sp)
    8002dab8:	f41a                	sd	t1,40(sp)
    8002daba:	f81e                	sd	t2,48(sp)
    8002dabc:	fc22                	sd	s0,56(sp)
    8002dabe:	e0a6                	sd	s1,64(sp)
    8002dac0:	e4aa                	sd	a0,72(sp)
    8002dac2:	e8ae                	sd	a1,80(sp)
    8002dac4:	ecb2                	sd	a2,88(sp)
    8002dac6:	f0b6                	sd	a3,96(sp)
    8002dac8:	f4ba                	sd	a4,104(sp)
    8002daca:	f8be                	sd	a5,112(sp)
    8002dacc:	fcc2                	sd	a6,120(sp)
    8002dace:	e146                	sd	a7,128(sp)
    8002dad0:	e54a                	sd	s2,136(sp)
    8002dad2:	e94e                	sd	s3,144(sp)
    8002dad4:	ed52                	sd	s4,152(sp)
    8002dad6:	f156                	sd	s5,160(sp)
    8002dad8:	f55a                	sd	s6,168(sp)
    8002dada:	f95e                	sd	s7,176(sp)
    8002dadc:	fd62                	sd	s8,184(sp)
    8002dade:	e1e6                	sd	s9,192(sp)
    8002dae0:	e5ea                	sd	s10,200(sp)
    8002dae2:	e9ee                	sd	s11,208(sp)
    8002dae4:	edf2                	sd	t3,216(sp)
    8002dae6:	f1f6                	sd	t4,224(sp)
    8002dae8:	f5fa                	sd	t5,232(sp)
    8002daea:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_5
    8002daec:	a13fc0ef          	jal	8002a4fe <vs_test_entry_two_5>
    j _return
    8002daf0:	a8d1                	j	8002dbc4 <_return>

000000008002daf2 <vshandler_6>:

vshandler_6:
    SAVE_CONTEXT
    8002daf2:	f0810113          	addi	sp,sp,-248
    8002daf6:	e006                	sd	ra,0(sp)
    8002daf8:	e80e                	sd	gp,16(sp)
    8002dafa:	ec12                	sd	tp,24(sp)
    8002dafc:	f016                	sd	t0,32(sp)
    8002dafe:	f41a                	sd	t1,40(sp)
    8002db00:	f81e                	sd	t2,48(sp)
    8002db02:	fc22                	sd	s0,56(sp)
    8002db04:	e0a6                	sd	s1,64(sp)
    8002db06:	e4aa                	sd	a0,72(sp)
    8002db08:	e8ae                	sd	a1,80(sp)
    8002db0a:	ecb2                	sd	a2,88(sp)
    8002db0c:	f0b6                	sd	a3,96(sp)
    8002db0e:	f4ba                	sd	a4,104(sp)
    8002db10:	f8be                	sd	a5,112(sp)
    8002db12:	fcc2                	sd	a6,120(sp)
    8002db14:	e146                	sd	a7,128(sp)
    8002db16:	e54a                	sd	s2,136(sp)
    8002db18:	e94e                	sd	s3,144(sp)
    8002db1a:	ed52                	sd	s4,152(sp)
    8002db1c:	f156                	sd	s5,160(sp)
    8002db1e:	f55a                	sd	s6,168(sp)
    8002db20:	f95e                	sd	s7,176(sp)
    8002db22:	fd62                	sd	s8,184(sp)
    8002db24:	e1e6                	sd	s9,192(sp)
    8002db26:	e5ea                	sd	s10,200(sp)
    8002db28:	e9ee                	sd	s11,208(sp)
    8002db2a:	edf2                	sd	t3,216(sp)
    8002db2c:	f1f6                	sd	t4,224(sp)
    8002db2e:	f5fa                	sd	t5,232(sp)
    8002db30:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_6
    8002db32:	a3bfc0ef          	jal	8002a56c <vs_test_entry_two_6>
    j _return
    8002db36:	a079                	j	8002dbc4 <_return>

000000008002db38 <vshandler_7>:

vshandler_7:
    SAVE_CONTEXT
    8002db38:	f0810113          	addi	sp,sp,-248
    8002db3c:	e006                	sd	ra,0(sp)
    8002db3e:	e80e                	sd	gp,16(sp)
    8002db40:	ec12                	sd	tp,24(sp)
    8002db42:	f016                	sd	t0,32(sp)
    8002db44:	f41a                	sd	t1,40(sp)
    8002db46:	f81e                	sd	t2,48(sp)
    8002db48:	fc22                	sd	s0,56(sp)
    8002db4a:	e0a6                	sd	s1,64(sp)
    8002db4c:	e4aa                	sd	a0,72(sp)
    8002db4e:	e8ae                	sd	a1,80(sp)
    8002db50:	ecb2                	sd	a2,88(sp)
    8002db52:	f0b6                	sd	a3,96(sp)
    8002db54:	f4ba                	sd	a4,104(sp)
    8002db56:	f8be                	sd	a5,112(sp)
    8002db58:	fcc2                	sd	a6,120(sp)
    8002db5a:	e146                	sd	a7,128(sp)
    8002db5c:	e54a                	sd	s2,136(sp)
    8002db5e:	e94e                	sd	s3,144(sp)
    8002db60:	ed52                	sd	s4,152(sp)
    8002db62:	f156                	sd	s5,160(sp)
    8002db64:	f55a                	sd	s6,168(sp)
    8002db66:	f95e                	sd	s7,176(sp)
    8002db68:	fd62                	sd	s8,184(sp)
    8002db6a:	e1e6                	sd	s9,192(sp)
    8002db6c:	e5ea                	sd	s10,200(sp)
    8002db6e:	e9ee                	sd	s11,208(sp)
    8002db70:	edf2                	sd	t3,216(sp)
    8002db72:	f1f6                	sd	t4,224(sp)
    8002db74:	f5fa                	sd	t5,232(sp)
    8002db76:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_7
    8002db78:	a63fc0ef          	jal	8002a5da <vs_test_entry_two_7>
    j _return
    8002db7c:	a0a1                	j	8002dbc4 <_return>

000000008002db7e <vshandler_8>:
    
vshandler_8:
    SAVE_CONTEXT
    8002db7e:	f0810113          	addi	sp,sp,-248
    8002db82:	e006                	sd	ra,0(sp)
    8002db84:	e80e                	sd	gp,16(sp)
    8002db86:	ec12                	sd	tp,24(sp)
    8002db88:	f016                	sd	t0,32(sp)
    8002db8a:	f41a                	sd	t1,40(sp)
    8002db8c:	f81e                	sd	t2,48(sp)
    8002db8e:	fc22                	sd	s0,56(sp)
    8002db90:	e0a6                	sd	s1,64(sp)
    8002db92:	e4aa                	sd	a0,72(sp)
    8002db94:	e8ae                	sd	a1,80(sp)
    8002db96:	ecb2                	sd	a2,88(sp)
    8002db98:	f0b6                	sd	a3,96(sp)
    8002db9a:	f4ba                	sd	a4,104(sp)
    8002db9c:	f8be                	sd	a5,112(sp)
    8002db9e:	fcc2                	sd	a6,120(sp)
    8002dba0:	e146                	sd	a7,128(sp)
    8002dba2:	e54a                	sd	s2,136(sp)
    8002dba4:	e94e                	sd	s3,144(sp)
    8002dba6:	ed52                	sd	s4,152(sp)
    8002dba8:	f156                	sd	s5,160(sp)
    8002dbaa:	f55a                	sd	s6,168(sp)
    8002dbac:	f95e                	sd	s7,176(sp)
    8002dbae:	fd62                	sd	s8,184(sp)
    8002dbb0:	e1e6                	sd	s9,192(sp)
    8002dbb2:	e5ea                	sd	s10,200(sp)
    8002dbb4:	e9ee                	sd	s11,208(sp)
    8002dbb6:	edf2                	sd	t3,216(sp)
    8002dbb8:	f1f6                	sd	t4,224(sp)
    8002dbba:	f5fa                	sd	t5,232(sp)
    8002dbbc:	f5fe                	sd	t6,232(sp)
    jal vs_test_entry_two_8
    8002dbbe:	a8bfc0ef          	jal	8002a648 <vs_test_entry_two_8>
    j _return
    8002dbc2:	a009                	j	8002dbc4 <_return>

000000008002dbc4 <_return>:
    

_return:
    csrr    t1, 0x744
    8002dbc4:	74402373          	csrr	t1,0x744
    srli    t1, t1, 3
    8002dbc8:	00335313          	srli	t1,t1,0x3
    andi    t1, t1, 1       //读出mnstatus的第三位
    8002dbcc:	00137313          	andi	t1,t1,1

    bnez    t1, _first_return
    8002dbd0:	04031463          	bnez	t1,8002dc18 <_first_return>

    RESTORE_CONTEXT
    8002dbd4:	6082                	ld	ra,0(sp)
    8002dbd6:	61c2                	ld	gp,16(sp)
    8002dbd8:	6262                	ld	tp,24(sp)
    8002dbda:	7282                	ld	t0,32(sp)
    8002dbdc:	7322                	ld	t1,40(sp)
    8002dbde:	73c2                	ld	t2,48(sp)
    8002dbe0:	7462                	ld	s0,56(sp)
    8002dbe2:	6486                	ld	s1,64(sp)
    8002dbe4:	6526                	ld	a0,72(sp)
    8002dbe6:	65c6                	ld	a1,80(sp)
    8002dbe8:	6666                	ld	a2,88(sp)
    8002dbea:	7686                	ld	a3,96(sp)
    8002dbec:	7726                	ld	a4,104(sp)
    8002dbee:	77c6                	ld	a5,112(sp)
    8002dbf0:	7866                	ld	a6,120(sp)
    8002dbf2:	688a                	ld	a7,128(sp)
    8002dbf4:	692a                	ld	s2,136(sp)
    8002dbf6:	69ca                	ld	s3,144(sp)
    8002dbf8:	6a6a                	ld	s4,152(sp)
    8002dbfa:	7a8a                	ld	s5,160(sp)
    8002dbfc:	7b2a                	ld	s6,168(sp)
    8002dbfe:	7bca                	ld	s7,176(sp)
    8002dc00:	7c6a                	ld	s8,184(sp)
    8002dc02:	6c8e                	ld	s9,192(sp)
    8002dc04:	6d2e                	ld	s10,200(sp)
    8002dc06:	6dce                	ld	s11,208(sp)
    8002dc08:	6e6e                	ld	t3,216(sp)
    8002dc0a:	7e8e                	ld	t4,224(sp)
    8002dc0c:	7f2e                	ld	t5,232(sp)
    8002dc0e:	7fce                	ld	t6,240(sp)
    8002dc10:	0f810113          	addi	sp,sp,248
    8002dc14:	70200073          	.word	0x70200073

000000008002dc18 <_first_return>:
    .word   0x70200073      //mnret

_first_return:
    li t0, 4 //make sure PRIV_M is 4
    8002dc18:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    8002dc1a:	04550563          	beq	a0,t0,8002dc64 <_return_from_m>

000000008002dc1e <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    8002dc1e:	6082                	ld	ra,0(sp)
    8002dc20:	61c2                	ld	gp,16(sp)
    8002dc22:	6262                	ld	tp,24(sp)
    8002dc24:	7282                	ld	t0,32(sp)
    8002dc26:	7322                	ld	t1,40(sp)
    8002dc28:	73c2                	ld	t2,48(sp)
    8002dc2a:	7462                	ld	s0,56(sp)
    8002dc2c:	6486                	ld	s1,64(sp)
    8002dc2e:	6526                	ld	a0,72(sp)
    8002dc30:	65c6                	ld	a1,80(sp)
    8002dc32:	6666                	ld	a2,88(sp)
    8002dc34:	7686                	ld	a3,96(sp)
    8002dc36:	7726                	ld	a4,104(sp)
    8002dc38:	77c6                	ld	a5,112(sp)
    8002dc3a:	7866                	ld	a6,120(sp)
    8002dc3c:	688a                	ld	a7,128(sp)
    8002dc3e:	692a                	ld	s2,136(sp)
    8002dc40:	69ca                	ld	s3,144(sp)
    8002dc42:	6a6a                	ld	s4,152(sp)
    8002dc44:	7a8a                	ld	s5,160(sp)
    8002dc46:	7b2a                	ld	s6,168(sp)
    8002dc48:	7bca                	ld	s7,176(sp)
    8002dc4a:	7c6a                	ld	s8,184(sp)
    8002dc4c:	6c8e                	ld	s9,192(sp)
    8002dc4e:	6d2e                	ld	s10,200(sp)
    8002dc50:	6dce                	ld	s11,208(sp)
    8002dc52:	6e6e                	ld	t3,216(sp)
    8002dc54:	7e8e                	ld	t4,224(sp)
    8002dc56:	7f2e                	ld	t5,232(sp)
    8002dc58:	7fce                	ld	t6,240(sp)
    8002dc5a:	0f810113          	addi	sp,sp,248
    sret
    8002dc5e:	10200073          	sret
    j   .
    8002dc62:	a001                	j	8002dc62 <_return_from_s+0x44>

000000008002dc64 <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    8002dc64:	6082                	ld	ra,0(sp)
    8002dc66:	61c2                	ld	gp,16(sp)
    8002dc68:	6262                	ld	tp,24(sp)
    8002dc6a:	7282                	ld	t0,32(sp)
    8002dc6c:	7322                	ld	t1,40(sp)
    8002dc6e:	73c2                	ld	t2,48(sp)
    8002dc70:	7462                	ld	s0,56(sp)
    8002dc72:	6486                	ld	s1,64(sp)
    8002dc74:	6526                	ld	a0,72(sp)
    8002dc76:	65c6                	ld	a1,80(sp)
    8002dc78:	6666                	ld	a2,88(sp)
    8002dc7a:	7686                	ld	a3,96(sp)
    8002dc7c:	7726                	ld	a4,104(sp)
    8002dc7e:	77c6                	ld	a5,112(sp)
    8002dc80:	7866                	ld	a6,120(sp)
    8002dc82:	688a                	ld	a7,128(sp)
    8002dc84:	692a                	ld	s2,136(sp)
    8002dc86:	69ca                	ld	s3,144(sp)
    8002dc88:	6a6a                	ld	s4,152(sp)
    8002dc8a:	7a8a                	ld	s5,160(sp)
    8002dc8c:	7b2a                	ld	s6,168(sp)
    8002dc8e:	7bca                	ld	s7,176(sp)
    8002dc90:	7c6a                	ld	s8,184(sp)
    8002dc92:	6c8e                	ld	s9,192(sp)
    8002dc94:	6d2e                	ld	s10,200(sp)
    8002dc96:	6dce                	ld	s11,208(sp)
    8002dc98:	6e6e                	ld	t3,216(sp)
    8002dc9a:	7e8e                	ld	t4,224(sp)
    8002dc9c:	7f2e                	ld	t5,232(sp)
    8002dc9e:	7fce                	ld	t6,240(sp)
    8002dca0:	0f810113          	addi	sp,sp,248
    mret
    8002dca4:	30200073          	mret

Disassembly of section .text.startup:

000000008002dca8 <main>:


void main(){
    8002dca8:	1101                	addi	sp,sp,-32

    INFO("risc-v hypervisor extension tests");
    8002dcaa:	00002517          	auipc	a0,0x2
    8002dcae:	41650513          	addi	a0,a0,1046 # 800300c0 <__func__.0+0x3d0>
void main(){
    8002dcb2:	ec06                	sd	ra,24(sp)
    8002dcb4:	e822                	sd	s0,16(sp)
    8002dcb6:	e426                	sd	s1,8(sp)
    8002dcb8:	e04a                	sd	s2,0(sp)
    INFO("risc-v hypervisor extension tests");
    8002dcba:	bd2ff0ef          	jal	8002d08c <printf>
    8002dcbe:	4529                	li	a0,10
    8002dcc0:	8bafe0ef          	jal	8002bd7a <putchar>
    // printf("%f\n",CSRR(CSR_SSCRATCH));
    if(check_misa_h()){
    8002dcc4:	849d20ef          	jal	8000050c <check_misa_h>
    8002dcc8:	c539                	beqz	a0,8002dd16 <main+0x6e>
        reset_state();
    8002dcca:	c09d30ef          	jal	800018d2 <reset_state>
        for(int i = 0; i < test_table_size; i++){
    8002dcce:	00010497          	auipc	s1,0x10
    8002dcd2:	15a48493          	addi	s1,s1,346 # 8003de28 <test_table_size>
    8002dcd6:	609c                	ld	a5,0(s1)
    8002dcd8:	4401                	li	s0,0
    8002dcda:	00010917          	auipc	s2,0x10
    8002dcde:	15690913          	addi	s2,s2,342 # 8003de30 <test_table>
    8002dce2:	cf91                	beqz	a5,8002dcfe <main+0x56>
            reset_state();
    8002dce4:	befd30ef          	jal	800018d2 <reset_state>
            test_table[i]();
    8002dce8:	00093783          	ld	a5,0(s2)
    8002dcec:	00341713          	slli	a4,s0,0x3
        for(int i = 0; i < test_table_size; i++){
    8002dcf0:	0405                	addi	s0,s0,1
            test_table[i]();
    8002dcf2:	97ba                	add	a5,a5,a4
    8002dcf4:	639c                	ld	a5,0(a5)
    8002dcf6:	9782                	jalr	a5
        for(int i = 0; i < test_table_size; i++){
    8002dcf8:	609c                	ld	a5,0(s1)
    8002dcfa:	fef465e3          	bltu	s0,a5,8002dce4 <main+0x3c>
            
    }else{
        printf("hypervisor extension is not supported!\n");
    }

    INFO("end");
    8002dcfe:	00002517          	auipc	a0,0x2
    8002dd02:	41250513          	addi	a0,a0,1042 # 80030110 <__func__.0+0x420>
    8002dd06:	b86ff0ef          	jal	8002d08c <printf>
    8002dd0a:	4529                	li	a0,10
    8002dd0c:	86efe0ef          	jal	8002bd7a <putchar>
    exit(0);
    8002dd10:	4501                	li	a0,0
    8002dd12:	f31fe0ef          	jal	8002cc42 <exit>
        printf("hypervisor extension is not supported!\n");
    8002dd16:	00002517          	auipc	a0,0x2
    8002dd1a:	3d250513          	addi	a0,a0,978 # 800300e8 <__func__.0+0x3f8>
    8002dd1e:	fabfe0ef          	jal	8002ccc8 <puts>
    8002dd22:	bff1                	j	8002dcfe <main+0x56>
{
    8002dd24:	1141                	addi	sp,sp,-16
  printstr("Implement main(), foo!\n");
    8002dd26:	0000e517          	auipc	a0,0xe
    8002dd2a:	0b250513          	addi	a0,a0,178 # 8003bdd8 <__func__.0+0xc0e8>
{
    8002dd2e:	e406                	sd	ra,8(sp)
  printstr("Implement main(), foo!\n");
    8002dd30:	f29fe0ef          	jal	8002cc58 <printstr>
}
    8002dd34:	60a2                	ld	ra,8(sp)
    8002dd36:	557d                	li	a0,-1
    8002dd38:	0141                	addi	sp,sp,16
    8002dd3a:	8082                	ret
